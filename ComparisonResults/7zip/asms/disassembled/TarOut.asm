.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 174482225439240136C4C4FB53481860
.text:00000000 ; Input CRC32 : 50E9BCD4
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\TarOut.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __thiscall NArchive::NTar::COutArchive::WriteBytes(NArchive::NTar::COutArchive *this, const void *, unsigned int)
.text:00000000                 public ?WriteBytes@COutArchive@NTar@NArchive@@AAEJPBXI@Z
.text:00000000 ?WriteBytes@COutArchive@NTar@NArchive@@AAEJPBXI@Z proc near
.text:00000000                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+490p
.text:00000000                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+5CFp ...
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     eax, [ebp+arg_4]
.text:00000011                 xor     ecx, ecx
.text:00000013                 mov     edx, [ebp+var_4]
.text:00000016                 add     eax, [edx+8]
.text:00000019                 adc     ecx, [edx+0Ch]
.text:0000001C                 mov     edx, [ebp+var_4]
.text:0000001F                 mov     [edx+8], eax
.text:00000022                 mov     [edx+0Ch], ecx
.text:00000025                 mov     eax, [ebp+arg_4]
.text:00000028                 push    eax             ; unsigned int
.text:00000029                 mov     ecx, [ebp+arg_0]
.text:0000002C                 push    ecx             ; void *
.text:0000002D                 mov     ecx, [ebp+var_4]
.text:00000030                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00000035                 push    eax             ; struct ISequentialOutStream *
.text:00000036                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:0000003B                 add     esp, 4
.text:0000003E                 cmp     ebp, esp
.text:00000040                 call    __RTC_CheckEsp
.text:00000045                 mov     esp, ebp
.text:00000047                 pop     ebp
.text:00000048                 retn    8
.text:00000048 ?WriteBytes@COutArchive@NTar@NArchive@@AAEJPBXI@Z endp
.text:00000048
.text:00000048 ; ---------------------------------------------------------------------------
.text:0000004B                 align 10h
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; __int32 __thiscall NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::COutArchive *this, const struct NArchive::NTar::CItem *)
.text:00000050                 public ?WriteHeaderReal@COutArchive@NTar@NArchive@@AAEJABUCItem@23@@Z
.text:00000050 ?WriteHeaderReal@COutArchive@NTar@NArchive@@AAEJABUCItem@23@@Z proc near
.text:00000050                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+6Fp
.text:00000050                                         ; NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+13Dp ...
.text:00000050
.text:00000050 var_248         = dword ptr -248h
.text:00000050 var_244         = dword ptr -244h
.text:00000050 var_240         = dword ptr -240h
.text:00000050 var_23C         = dword ptr -23Ch
.text:00000050 var_238         = dword ptr -238h
.text:00000050 var_234         = dword ptr -234h
.text:00000050 var_230         = dword ptr -230h
.text:00000050 var_22C         = dword ptr -22Ch
.text:00000050 var_228         = dword ptr -228h
.text:00000050 var_224         = dword ptr -224h
.text:00000050 var_220         = dword ptr -220h
.text:00000050 var_21C         = dword ptr -21Ch
.text:00000050 var_218         = dword ptr -218h
.text:00000050 var_214         = dword ptr -214h
.text:00000050 Dst             = byte ptr -20Ch
.text:00000050 var_172         = byte ptr -172h
.text:00000050 var_8A          = byte ptr -8Ah
.text:00000050 var_2A          = byte ptr -2Ah
.text:00000050 var_29          = byte ptr -29h
.text:00000050 var_14          = byte ptr -14h
.text:00000050 var_8           = dword ptr -8
.text:00000050 var_4           = dword ptr -4
.text:00000050 arg_0           = dword ptr  8
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 sub     esp, 248h
.text:00000059                 push    edi
.text:0000005A                 push    ecx
.text:0000005B                 lea     edi, [ebp+var_248]
.text:00000061                 mov     ecx, 92h ; 'Ã†'
.text:00000066                 mov     eax, 0CCCCCCCCh
.text:0000006B                 rep stosd
.text:0000006D                 pop     ecx
.text:0000006E                 mov     eax, dword ptr ds:___security_cookie
.text:00000073                 xor     eax, ebp
.text:00000075                 mov     [ebp+var_4], eax
.text:00000078                 mov     [ebp+var_8], ecx
.text:0000007B                 push    200h            ; Size
.text:00000080                 push    0               ; Val
.text:00000082                 lea     eax, [ebp+Dst]
.text:00000088                 push    eax             ; Dst
.text:00000089                 call    _memset
.text:0000008E                 add     esp, 0Ch
.text:00000091                 lea     ecx, [ebp+Dst]
.text:00000097                 mov     [ebp+var_214], ecx
.text:0000009D                 mov     ecx, [ebp+arg_0] ; this
.text:000000A0                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000000A5                 cmp     eax, 64h ; 'd'
.text:000000A8                 jbe     short loc_B4
.text:000000AA                 mov     eax, 80004005h
.text:000000AF                 jmp     loc_642
.text:000000B4 ; ---------------------------------------------------------------------------
.text:000000B4
.text:000000B4 loc_B4:                                 ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+58j
.text:000000B4                 push    64h ; 'd'
.text:000000B6                 mov     ecx, [ebp+arg_0]
.text:000000B9                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000000BE                 push    eax
.text:000000BF                 mov     edx, [ebp+var_214]
.text:000000C5                 push    edx
.text:000000C6                 call    ?MyStrNCpy@NTar@NArchive@@YGXPADPBDI@Z ; NArchive::NTar::MyStrNCpy(char *,char const *,uint)
.text:000000CB                 mov     eax, [ebp+var_214]
.text:000000D1                 add     eax, 64h ; 'd'
.text:000000D4                 mov     [ebp+var_214], eax
.text:000000DA                 mov     ecx, [ebp+arg_0]
.text:000000DD                 mov     edx, [ecx+28h]
.text:000000E0                 push    edx
.text:000000E1                 mov     eax, [ebp+var_214]
.text:000000E7                 push    eax
.text:000000E8                 call    ?WriteOctal_8@NTar@NArchive@@YG_NPADI@Z ; NArchive::NTar::WriteOctal_8(char *,uint)
.text:000000ED                 movzx   ecx, al
.text:000000F0                 test    ecx, ecx
.text:000000F2                 jnz     short loc_FE
.text:000000F4                 mov     eax, 80004005h
.text:000000F9                 jmp     loc_642
.text:000000FE ; ---------------------------------------------------------------------------
.text:000000FE
.text:000000FE loc_FE:                                 ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+A2j
.text:000000FE                 mov     edx, [ebp+var_214]
.text:00000104                 add     edx, 8
.text:00000107                 mov     [ebp+var_214], edx
.text:0000010D                 mov     eax, [ebp+arg_0]
.text:00000110                 mov     ecx, [eax+2Ch]
.text:00000113                 push    ecx
.text:00000114                 mov     edx, [ebp+var_214]
.text:0000011A                 push    edx
.text:0000011B                 call    ?WriteOctal_8@NTar@NArchive@@YG_NPADI@Z ; NArchive::NTar::WriteOctal_8(char *,uint)
.text:00000120                 movzx   eax, al
.text:00000123                 test    eax, eax
.text:00000125                 jnz     short loc_131
.text:00000127                 mov     eax, 80004005h
.text:0000012C                 jmp     loc_642
.text:00000131 ; ---------------------------------------------------------------------------
.text:00000131
.text:00000131 loc_131:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+D5j
.text:00000131                 mov     ecx, [ebp+var_214]
.text:00000137                 add     ecx, 8
.text:0000013A                 mov     [ebp+var_214], ecx
.text:00000140                 mov     edx, [ebp+arg_0]
.text:00000143                 mov     eax, [edx+30h]
.text:00000146                 push    eax
.text:00000147                 mov     ecx, [ebp+var_214]
.text:0000014D                 push    ecx
.text:0000014E                 call    ?WriteOctal_8@NTar@NArchive@@YG_NPADI@Z ; NArchive::NTar::WriteOctal_8(char *,uint)
.text:00000153                 movzx   edx, al
.text:00000156                 test    edx, edx
.text:00000158                 jnz     short loc_164
.text:0000015A                 mov     eax, 80004005h
.text:0000015F                 jmp     loc_642
.text:00000164 ; ---------------------------------------------------------------------------
.text:00000164
.text:00000164 loc_164:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+108j
.text:00000164                 mov     eax, [ebp+var_214]
.text:0000016A                 add     eax, 8
.text:0000016D                 mov     [ebp+var_214], eax
.text:00000173                 mov     ecx, [ebp+arg_0]
.text:00000176                 mov     edx, [ecx+14h]
.text:00000179                 push    edx
.text:0000017A                 mov     eax, [ecx+10h]
.text:0000017D                 push    eax
.text:0000017E                 mov     ecx, [ebp+var_214]
.text:00000184                 push    ecx
.text:00000185                 call    ?WriteOctal_12@NTar@NArchive@@YGXPAD_K@Z ; NArchive::NTar::WriteOctal_12(char *,unsigned __int64)
.text:0000018A                 mov     edx, [ebp+var_214]
.text:00000190                 add     edx, 0Ch
.text:00000193                 mov     [ebp+var_214], edx
.text:00000199                 mov     eax, [ebp+arg_0]
.text:0000019C                 mov     ecx, [eax+24h]
.text:0000019F                 push    ecx
.text:000001A0                 mov     edx, [eax+20h]
.text:000001A3                 push    edx
.text:000001A4                 mov     eax, [ebp+var_214]
.text:000001AA                 push    eax
.text:000001AB                 call    ?WriteOctal_12_Signed@NTar@NArchive@@YGXPAD_J@Z ; NArchive::NTar::WriteOctal_12_Signed(char *,__int64)
.text:000001B0                 mov     ecx, [ebp+var_214]
.text:000001B6                 add     ecx, 0Ch
.text:000001B9                 mov     [ebp+var_214], ecx
.text:000001BF                 push    8               ; Size
.text:000001C1                 push    20h ; ' '       ; Val
.text:000001C3                 mov     edx, [ebp+var_214]
.text:000001C9                 push    edx             ; Dst
.text:000001CA                 call    _memset
.text:000001CF                 add     esp, 0Ch
.text:000001D2                 mov     eax, [ebp+var_214]
.text:000001D8                 add     eax, 8
.text:000001DB                 mov     [ebp+var_214], eax
.text:000001E1                 mov     ecx, [ebp+var_214]
.text:000001E7                 mov     edx, [ebp+arg_0]
.text:000001EA                 mov     al, [edx+68h]
.text:000001ED                 mov     [ecx], al
.text:000001EF                 mov     ecx, [ebp+var_214]
.text:000001F5                 add     ecx, 1
.text:000001F8                 mov     [ebp+var_214], ecx
.text:000001FE                 push    64h ; 'd'       ; int
.text:00000200                 mov     edx, [ebp+arg_0]
.text:00000203                 add     edx, 3Ch ; '<'
.text:00000206                 push    edx             ; AString *
.text:00000207                 mov     eax, [ebp+var_214]
.text:0000020D                 push    eax             ; char *
.text:0000020E                 call    ?CopyString@NTar@NArchive@@YG_NPADABVAString@@I@Z ; NArchive::NTar::CopyString(char *,AString const &,uint)
.text:00000213                 movzx   ecx, al
.text:00000216                 test    ecx, ecx
.text:00000218                 jnz     short loc_224
.text:0000021A                 mov     eax, 80004005h
.text:0000021F                 jmp     loc_642
.text:00000224 ; ---------------------------------------------------------------------------
.text:00000224
.text:00000224 loc_224:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+1C8j
.text:00000224                 mov     edx, [ebp+var_214]
.text:0000022A                 add     edx, 64h ; 'd'
.text:0000022D                 mov     [ebp+var_214], edx
.text:00000233                 push    8               ; Size
.text:00000235                 mov     eax, [ebp+arg_0]
.text:00000238                 add     eax, 60h ; '`'
.text:0000023B                 push    eax             ; Src
.text:0000023C                 mov     ecx, [ebp+var_214]
.text:00000242                 push    ecx             ; Dst
.text:00000243                 call    _memcpy
.text:00000248                 add     esp, 0Ch
.text:0000024B                 mov     edx, [ebp+var_214]
.text:00000251                 add     edx, 8
.text:00000254                 mov     [ebp+var_214], edx
.text:0000025A                 push    20h ; ' '       ; int
.text:0000025C                 mov     eax, [ebp+arg_0]
.text:0000025F                 add     eax, 48h ; 'H'
.text:00000262                 push    eax             ; AString *
.text:00000263                 mov     ecx, [ebp+var_214]
.text:00000269                 push    ecx             ; char *
.text:0000026A                 call    ?CopyString@NTar@NArchive@@YG_NPADABVAString@@I@Z ; NArchive::NTar::CopyString(char *,AString const &,uint)
.text:0000026F                 movzx   edx, al
.text:00000272                 test    edx, edx
.text:00000274                 jnz     short loc_280
.text:00000276                 mov     eax, 80004005h
.text:0000027B                 jmp     loc_642
.text:00000280 ; ---------------------------------------------------------------------------
.text:00000280
.text:00000280 loc_280:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+224j
.text:00000280                 mov     eax, [ebp+var_214]
.text:00000286                 add     eax, 20h ; ' '
.text:00000289                 mov     [ebp+var_214], eax
.text:0000028F                 push    20h ; ' '       ; int
.text:00000291                 mov     ecx, [ebp+arg_0]
.text:00000294                 add     ecx, 54h ; 'T'
.text:00000297                 push    ecx             ; AString *
.text:00000298                 mov     edx, [ebp+var_214]
.text:0000029E                 push    edx             ; char *
.text:0000029F                 call    ?CopyString@NTar@NArchive@@YG_NPADABVAString@@I@Z ; NArchive::NTar::CopyString(char *,AString const &,uint)
.text:000002A4                 movzx   eax, al
.text:000002A7                 test    eax, eax
.text:000002A9                 jnz     short loc_2B5
.text:000002AB                 mov     eax, 80004005h
.text:000002B0                 jmp     loc_642
.text:000002B5 ; ---------------------------------------------------------------------------
.text:000002B5
.text:000002B5 loc_2B5:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+259j
.text:000002B5                 mov     ecx, [ebp+var_214]
.text:000002BB                 add     ecx, 20h ; ' '
.text:000002BE                 mov     [ebp+var_214], ecx
.text:000002C4                 mov     edx, [ebp+arg_0]
.text:000002C7                 movzx   eax, byte ptr [edx+69h]
.text:000002CB                 test    eax, eax
.text:000002CD                 jz      short loc_2F3
.text:000002CF                 mov     ecx, [ebp+arg_0]
.text:000002D2                 mov     edx, [ecx+34h]
.text:000002D5                 push    edx
.text:000002D6                 mov     eax, [ebp+var_214]
.text:000002DC                 push    eax
.text:000002DD                 call    ?WriteOctal_8@NTar@NArchive@@YG_NPADI@Z ; NArchive::NTar::WriteOctal_8(char *,uint)
.text:000002E2                 movzx   ecx, al
.text:000002E5                 test    ecx, ecx
.text:000002E7                 jnz     short loc_2F3
.text:000002E9                 mov     eax, 80004005h
.text:000002EE                 jmp     loc_642
.text:000002F3 ; ---------------------------------------------------------------------------
.text:000002F3
.text:000002F3 loc_2F3:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+27Dj
.text:000002F3                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+297j
.text:000002F3                 mov     edx, [ebp+var_214]
.text:000002F9                 add     edx, 8
.text:000002FC                 mov     [ebp+var_214], edx
.text:00000302                 mov     eax, [ebp+arg_0]
.text:00000305                 movzx   ecx, byte ptr [eax+6Ah]
.text:00000309                 test    ecx, ecx
.text:0000030B                 jz      short loc_331
.text:0000030D                 mov     edx, [ebp+arg_0]
.text:00000310                 mov     eax, [edx+38h]
.text:00000313                 push    eax
.text:00000314                 mov     ecx, [ebp+var_214]
.text:0000031A                 push    ecx
.text:0000031B                 call    ?WriteOctal_8@NTar@NArchive@@YG_NPADI@Z ; NArchive::NTar::WriteOctal_8(char *,uint)
.text:00000320                 movzx   edx, al
.text:00000323                 test    edx, edx
.text:00000325                 jnz     short loc_331
.text:00000327                 mov     eax, 80004005h
.text:0000032C                 jmp     loc_642
.text:00000331 ; ---------------------------------------------------------------------------
.text:00000331
.text:00000331 loc_331:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+2BBj
.text:00000331                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+2D5j
.text:00000331                 mov     eax, [ebp+var_214]
.text:00000337                 add     eax, 8
.text:0000033A                 mov     [ebp+var_214], eax
.text:00000340                 mov     ecx, [ebp+arg_0] ; this
.text:00000343                 call    ?IsSparse@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsSparse(void)
.text:00000348                 movzx   ecx, al
.text:0000034B                 test    ecx, ecx
.text:0000034D                 jz      loc_420
.text:00000353                 mov     ecx, [ebp+arg_0]
.text:00000356                 add     ecx, 6Ch ; 'l'
.text:00000359                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:0000035E                 mov     edx, 4
.text:00000363                 cmp     edx, eax
.text:00000365                 sbb     eax, eax
.text:00000367                 neg     eax
.text:00000369                 mov     [ebp+var_2A], al
.text:0000036C                 mov     ecx, [ebp+arg_0]
.text:0000036F                 mov     edx, [ecx+1Ch]
.text:00000372                 push    edx
.text:00000373                 mov     eax, [ecx+18h]
.text:00000376                 push    eax
.text:00000377                 lea     ecx, [ebp+var_29]
.text:0000037A                 push    ecx
.text:0000037B                 call    ?WriteOctal_12@NTar@NArchive@@YGXPAD_K@Z ; NArchive::NTar::WriteOctal_12(char *,unsigned __int64)
.text:00000380                 mov     [ebp+var_218], 0
.text:0000038A                 jmp     short loc_39B
.text:0000038C ; ---------------------------------------------------------------------------
.text:0000038C
.text:0000038C loc_38C:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+3CBj
.text:0000038C                 mov     edx, [ebp+var_218]
.text:00000392                 add     edx, 1
.text:00000395                 mov     [ebp+var_218], edx
.text:0000039B
.text:0000039B loc_39B:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+33Aj
.text:0000039B                 mov     ecx, [ebp+arg_0]
.text:0000039E                 add     ecx, 6Ch ; 'l'
.text:000003A1                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:000003A6                 cmp     [ebp+var_218], eax
.text:000003AC                 jnb     short loc_420
.text:000003AE                 cmp     [ebp+var_218], 4
.text:000003B5                 jnb     short loc_420
.text:000003B7                 mov     eax, [ebp+var_218]
.text:000003BD                 push    eax
.text:000003BE                 mov     ecx, [ebp+arg_0]
.text:000003C1                 add     ecx, 6Ch ; 'l'
.text:000003C4                 call    ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[](uint)
.text:000003C9                 mov     [ebp+var_21C], eax
.text:000003CF                 mov     ecx, [ebp+var_218]
.text:000003D5                 imul    ecx, 18h
.text:000003D8                 lea     edx, [ebp+ecx+var_8A]
.text:000003DF                 mov     [ebp+var_220], edx
.text:000003E5                 mov     eax, [ebp+var_21C]
.text:000003EB                 mov     ecx, [eax+4]
.text:000003EE                 push    ecx
.text:000003EF                 mov     edx, [eax]
.text:000003F1                 push    edx
.text:000003F2                 mov     eax, [ebp+var_220]
.text:000003F8                 push    eax
.text:000003F9                 call    ?WriteOctal_12@NTar@NArchive@@YGXPAD_K@Z ; NArchive::NTar::WriteOctal_12(char *,unsigned __int64)
.text:000003FE                 mov     ecx, [ebp+var_21C]
.text:00000404                 mov     edx, [ecx+0Ch]
.text:00000407                 push    edx
.text:00000408                 mov     eax, [ecx+8]
.text:0000040B                 push    eax
.text:0000040C                 mov     ecx, [ebp+var_220]
.text:00000412                 add     ecx, 0Ch
.text:00000415                 push    ecx
.text:00000416                 call    ?WriteOctal_12@NTar@NArchive@@YGXPAD_K@Z ; NArchive::NTar::WriteOctal_12(char *,unsigned __int64)
.text:0000041B                 jmp     loc_38C
.text:00000420 ; ---------------------------------------------------------------------------
.text:00000420
.text:00000420 loc_420:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+2FDj
.text:00000420                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+35Cj ...
.text:00000420                 mov     [ebp+var_224], 0
.text:0000042A                 mov     [ebp+var_228], 0
.text:00000434                 jmp     short loc_445
.text:00000436 ; ---------------------------------------------------------------------------
.text:00000436
.text:00000436 loc_436:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+41Bj
.text:00000436                 mov     edx, [ebp+var_228]
.text:0000043C                 add     edx, 1
.text:0000043F                 mov     [ebp+var_228], edx
.text:00000445
.text:00000445 loc_445:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+3E4j
.text:00000445                 cmp     [ebp+var_228], 200h
.text:0000044F                 jnb     short loc_46D
.text:00000451                 mov     eax, [ebp+var_228]
.text:00000457                 movzx   ecx, [ebp+eax+Dst]
.text:0000045F                 add     ecx, [ebp+var_224]
.text:00000465                 mov     [ebp+var_224], ecx
.text:0000046B                 jmp     short loc_436
.text:0000046D ; ---------------------------------------------------------------------------
.text:0000046D
.text:0000046D loc_46D:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+3FFj
.text:0000046D                 mov     [ebp+var_22C], 6
.text:00000477                 mov     [ebp+var_230], 0
.text:00000481                 jmp     short loc_492
.text:00000483 ; ---------------------------------------------------------------------------
.text:00000483
.text:00000483 loc_483:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+478j
.text:00000483                 mov     edx, [ebp+var_230]
.text:00000489                 add     edx, 1
.text:0000048C                 mov     [ebp+var_230], edx
.text:00000492
.text:00000492 loc_492:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+431j
.text:00000492                 cmp     [ebp+var_230], 6
.text:00000499                 jnb     short loc_4CA
.text:0000049B                 mov     eax, [ebp+var_224]
.text:000004A1                 and     eax, 7
.text:000004A4                 add     eax, 30h ; '0'
.text:000004A7                 mov     ecx, 99h ; 'Ã–'
.text:000004AC                 sub     ecx, [ebp+var_230]
.text:000004B2                 mov     [ebp+ecx+Dst], al
.text:000004B9                 mov     edx, [ebp+var_224]
.text:000004BF                 shr     edx, 3
.text:000004C2                 mov     [ebp+var_224], edx
.text:000004C8                 jmp     short loc_483
.text:000004CA ; ---------------------------------------------------------------------------
.text:000004CA
.text:000004CA loc_4CA:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+449j
.text:000004CA                 mov     [ebp+var_172], 0
.text:000004D1                 push    200h            ; unsigned int
.text:000004D6                 lea     eax, [ebp+Dst]
.text:000004DC                 push    eax             ; void *
.text:000004DD                 mov     ecx, [ebp+var_8] ; this
.text:000004E0                 call    ?WriteBytes@COutArchive@NTar@NArchive@@AAEJPBXI@Z ; NArchive::NTar::COutArchive::WriteBytes(void const *,uint)
.text:000004E5                 mov     [ebp+var_234], eax
.text:000004EB                 cmp     [ebp+var_234], 0
.text:000004F2                 jz      short loc_4FF
.text:000004F4                 mov     eax, [ebp+var_234]
.text:000004FA                 jmp     loc_642
.text:000004FF ; ---------------------------------------------------------------------------
.text:000004FF
.text:000004FF loc_4FF:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+4A2j
.text:000004FF                 mov     ecx, [ebp+arg_0] ; this
.text:00000502                 call    ?IsSparse@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsSparse(void)
.text:00000507                 movzx   ecx, al
.text:0000050A                 test    ecx, ecx
.text:0000050C                 jz      loc_640
.text:00000512                 mov     [ebp+var_238], 4
.text:0000051C
.text:0000051C loc_51C:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &):loc_63Bj
.text:0000051C                 mov     ecx, [ebp+arg_0]
.text:0000051F                 add     ecx, 6Ch ; 'l'
.text:00000522                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:00000527                 cmp     [ebp+var_238], eax
.text:0000052D                 jnb     loc_640
.text:00000533                 push    200h            ; Size
.text:00000538                 push    0               ; Val
.text:0000053A                 lea     edx, [ebp+Dst]
.text:00000540                 push    edx             ; Dst
.text:00000541                 call    _memset
.text:00000546                 add     esp, 0Ch
.text:00000549                 mov     [ebp+var_23C], 0
.text:00000553                 jmp     short loc_573
.text:00000555 ; ---------------------------------------------------------------------------
.text:00000555
.text:00000555 loc_555:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+5A3j
.text:00000555                 mov     eax, [ebp+var_23C]
.text:0000055B                 add     eax, 1
.text:0000055E                 mov     [ebp+var_23C], eax
.text:00000564                 mov     ecx, [ebp+var_238]
.text:0000056A                 add     ecx, 1
.text:0000056D                 mov     [ebp+var_238], ecx
.text:00000573
.text:00000573 loc_573:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+503j
.text:00000573                 cmp     [ebp+var_23C], 15h
.text:0000057A                 jnb     short loc_5F8
.text:0000057C                 mov     ecx, [ebp+arg_0]
.text:0000057F                 add     ecx, 6Ch ; 'l'
.text:00000582                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:00000587                 cmp     [ebp+var_238], eax
.text:0000058D                 jnb     short loc_5F8
.text:0000058F                 mov     edx, [ebp+var_238]
.text:00000595                 push    edx
.text:00000596                 mov     ecx, [ebp+arg_0]
.text:00000599                 add     ecx, 6Ch ; 'l'
.text:0000059C                 call    ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[](uint)
.text:000005A1                 mov     [ebp+var_240], eax
.text:000005A7                 mov     eax, [ebp+var_23C]
.text:000005AD                 imul    eax, 18h
.text:000005B0                 lea     ecx, [ebp+eax+Dst]
.text:000005B7                 mov     [ebp+var_244], ecx
.text:000005BD                 mov     edx, [ebp+var_240]
.text:000005C3                 mov     eax, [edx+4]
.text:000005C6                 push    eax
.text:000005C7                 mov     ecx, [edx]
.text:000005C9                 push    ecx
.text:000005CA                 mov     edx, [ebp+var_244]
.text:000005D0                 push    edx
.text:000005D1                 call    ?WriteOctal_12@NTar@NArchive@@YGXPAD_K@Z ; NArchive::NTar::WriteOctal_12(char *,unsigned __int64)
.text:000005D6                 mov     eax, [ebp+var_240]
.text:000005DC                 mov     ecx, [eax+0Ch]
.text:000005DF                 push    ecx
.text:000005E0                 mov     edx, [eax+8]
.text:000005E3                 push    edx
.text:000005E4                 mov     eax, [ebp+var_244]
.text:000005EA                 add     eax, 0Ch
.text:000005ED                 push    eax
.text:000005EE                 call    ?WriteOctal_12@NTar@NArchive@@YGXPAD_K@Z ; NArchive::NTar::WriteOctal_12(char *,unsigned __int64)
.text:000005F3                 jmp     loc_555
.text:000005F8 ; ---------------------------------------------------------------------------
.text:000005F8
.text:000005F8 loc_5F8:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+52Aj
.text:000005F8                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+53Dj
.text:000005F8                 mov     ecx, [ebp+arg_0]
.text:000005FB                 add     ecx, 6Ch ; 'l'
.text:000005FE                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:00000603                 cmp     [ebp+var_238], eax
.text:00000609                 sbb     ecx, ecx
.text:0000060B                 neg     ecx
.text:0000060D                 mov     [ebp+var_14], cl
.text:00000610                 push    200h            ; unsigned int
.text:00000615                 lea     edx, [ebp+Dst]
.text:0000061B                 push    edx             ; void *
.text:0000061C                 mov     ecx, [ebp+var_8] ; this
.text:0000061F                 call    ?WriteBytes@COutArchive@NTar@NArchive@@AAEJPBXI@Z ; NArchive::NTar::COutArchive::WriteBytes(void const *,uint)
.text:00000624                 mov     [ebp+var_248], eax
.text:0000062A                 cmp     [ebp+var_248], 0
.text:00000631                 jz      short loc_63B
.text:00000633                 mov     eax, [ebp+var_248]
.text:00000639                 jmp     short loc_642
.text:0000063B ; ---------------------------------------------------------------------------
.text:0000063B
.text:0000063B loc_63B:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+5E1j
.text:0000063B                 jmp     loc_51C
.text:00000640 ; ---------------------------------------------------------------------------
.text:00000640
.text:00000640 loc_640:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+4BCj
.text:00000640                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+4DDj
.text:00000640                 xor     eax, eax
.text:00000642
.text:00000642 loc_642:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+5Fj
.text:00000642                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+A9j ...
.text:00000642                 push    edx
.text:00000643                 mov     ecx, ebp
.text:00000645                 push    eax
.text:00000646                 lea     edx, $LN34
.text:0000064C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000651                 pop     eax
.text:00000652                 pop     edx
.text:00000653                 pop     edi
.text:00000654                 mov     ecx, [ebp+var_4]
.text:00000657                 xor     ecx, ebp
.text:00000659                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000065E                 add     esp, 248h
.text:00000664                 cmp     ebp, esp
.text:00000666                 call    __RTC_CheckEsp
.text:0000066B                 mov     esp, ebp
.text:0000066D                 pop     ebp
.text:0000066E                 retn    4
.text:0000066E ?WriteHeaderReal@COutArchive@NTar@NArchive@@AAEJABUCItem@23@@Z endp
.text:0000066E
.text:0000066E ; ---------------------------------------------------------------------------
.text:00000671                 align 4
.text:00000674 $LN34           dd 1                    ; DATA XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+5F6o
.text:00000678                 dd offset $LN33
.text:0000067C $LN33           dd 0FFFFFDF4h, 200h     ; DATA XREF: .text:00000678o
.text:00000684                 dd offset $LN32         ; "record"
.text:00000688 $LN32           db 'record',0           ; DATA XREF: .text:00000684o
.text:0000068F                 align 10h
.text:00000690
.text:00000690 ; =============== S U B R O U T I N E =======================================
.text:00000690
.text:00000690 ; Attributes: bp-based frame
.text:00000690
.text:00000690 ; void __stdcall NArchive::NTar::MyStrNCpy(char *, char const *, unsigned int)
.text:00000690 ?MyStrNCpy@NTar@NArchive@@YGXPADPBDI@Z proc near
.text:00000690                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+76p
.text:00000690
.text:00000690 var_8           = dword ptr -8
.text:00000690 var_4           = dword ptr -4
.text:00000690 arg_0           = dword ptr  8
.text:00000690 arg_4           = dword ptr  0Ch
.text:00000690 arg_8           = dword ptr  10h
.text:00000690
.text:00000690                 push    ebp
.text:00000691                 mov     ebp, esp
.text:00000693                 sub     esp, 8
.text:00000696                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000069D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006A4                 mov     [ebp+var_4], 0
.text:000006AB                 jmp     short loc_6B6
.text:000006AD ; ---------------------------------------------------------------------------
.text:000006AD
.text:000006AD loc_6AD:                                ; CODE XREF: NArchive::NTar::MyStrNCpy(char *,char const *,uint):loc_6DEj
.text:000006AD                 mov     eax, [ebp+var_4]
.text:000006B0                 add     eax, 1
.text:000006B3                 mov     [ebp+var_4], eax
.text:000006B6
.text:000006B6 loc_6B6:                                ; CODE XREF: NArchive::NTar::MyStrNCpy(char *,char const *,uint)+1Bj
.text:000006B6                 mov     ecx, [ebp+var_4]
.text:000006B9                 cmp     ecx, [ebp+arg_8]
.text:000006BC                 jnb     short loc_6E0
.text:000006BE                 mov     edx, [ebp+arg_4]
.text:000006C1                 add     edx, [ebp+var_4]
.text:000006C4                 mov     al, [edx]
.text:000006C6                 mov     byte ptr [ebp+var_8+3], al
.text:000006C9                 mov     ecx, [ebp+arg_0]
.text:000006CC                 add     ecx, [ebp+var_4]
.text:000006CF                 mov     dl, byte ptr [ebp+var_8+3]
.text:000006D2                 mov     [ecx], dl
.text:000006D4                 movsx   eax, byte ptr [ebp+var_8+3]
.text:000006D8                 test    eax, eax
.text:000006DA                 jnz     short loc_6DE
.text:000006DC                 jmp     short loc_6E0
.text:000006DE ; ---------------------------------------------------------------------------
.text:000006DE
.text:000006DE loc_6DE:                                ; CODE XREF: NArchive::NTar::MyStrNCpy(char *,char const *,uint)+4Aj
.text:000006DE                 jmp     short loc_6AD
.text:000006E0 ; ---------------------------------------------------------------------------
.text:000006E0
.text:000006E0 loc_6E0:                                ; CODE XREF: NArchive::NTar::MyStrNCpy(char *,char const *,uint)+2Cj
.text:000006E0                                         ; NArchive::NTar::MyStrNCpy(char *,char const *,uint)+4Cj
.text:000006E0                 mov     esp, ebp
.text:000006E2                 pop     ebp
.text:000006E3                 retn    0Ch
.text:000006E3 ?MyStrNCpy@NTar@NArchive@@YGXPADPBDI@Z endp
.text:000006E3
.text:000006E3 ; ---------------------------------------------------------------------------
.text:000006E6                 align 10h
.text:000006F0
.text:000006F0 ; =============== S U B R O U T I N E =======================================
.text:000006F0
.text:000006F0 ; Attributes: bp-based frame
.text:000006F0
.text:000006F0 ; bool __stdcall NArchive::NTar::WriteOctal_8(char *, unsigned int)
.text:000006F0 ?WriteOctal_8@NTar@NArchive@@YG_NPADI@Z proc near
.text:000006F0                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+98p
.text:000006F0                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+CBp ...
.text:000006F0
.text:000006F0 var_8           = dword ptr -8
.text:000006F0 var_4           = dword ptr -4
.text:000006F0 arg_0           = dword ptr  8
.text:000006F0 arg_4           = dword ptr  0Ch
.text:000006F0
.text:000006F0                 push    ebp
.text:000006F1                 mov     ebp, esp
.text:000006F3                 sub     esp, 8
.text:000006F6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000006FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000704                 mov     [ebp+var_4], 7
.text:0000070B                 cmp     [ebp+arg_4], 200000h
.text:00000712                 jb      short loc_718
.text:00000714                 xor     al, al
.text:00000716                 jmp     short loc_754
.text:00000718 ; ---------------------------------------------------------------------------
.text:00000718
.text:00000718 loc_718:                                ; CODE XREF: NArchive::NTar::WriteOctal_8(char *,uint)+22j
.text:00000718                 mov     [ebp+var_8], 0
.text:0000071F                 jmp     short loc_72A
.text:00000721 ; ---------------------------------------------------------------------------
.text:00000721
.text:00000721 loc_721:                                ; CODE XREF: NArchive::NTar::WriteOctal_8(char *,uint)+60j
.text:00000721                 mov     eax, [ebp+var_8]
.text:00000724                 add     eax, 1
.text:00000727                 mov     [ebp+var_8], eax
.text:0000072A
.text:0000072A loc_72A:                                ; CODE XREF: NArchive::NTar::WriteOctal_8(char *,uint)+2Fj
.text:0000072A                 cmp     [ebp+var_8], 7
.text:0000072E                 jnb     short loc_752
.text:00000730                 mov     ecx, [ebp+arg_4]
.text:00000733                 and     ecx, 7
.text:00000736                 add     ecx, 30h ; '0'
.text:00000739                 mov     edx, 6
.text:0000073E                 sub     edx, [ebp+var_8]
.text:00000741                 mov     eax, [ebp+arg_0]
.text:00000744                 mov     [eax+edx], cl
.text:00000747                 mov     ecx, [ebp+arg_4]
.text:0000074A                 shr     ecx, 3
.text:0000074D                 mov     [ebp+arg_4], ecx
.text:00000750                 jmp     short loc_721
.text:00000752 ; ---------------------------------------------------------------------------
.text:00000752
.text:00000752 loc_752:                                ; CODE XREF: NArchive::NTar::WriteOctal_8(char *,uint)+3Ej
.text:00000752                 mov     al, 1
.text:00000754
.text:00000754 loc_754:                                ; CODE XREF: NArchive::NTar::WriteOctal_8(char *,uint)+26j
.text:00000754                 mov     esp, ebp
.text:00000756                 pop     ebp
.text:00000757                 retn    8
.text:00000757 ?WriteOctal_8@NTar@NArchive@@YG_NPADI@Z endp
.text:00000757
.text:00000757 ; ---------------------------------------------------------------------------
.text:0000075A                 align 10h
.text:00000760
.text:00000760 ; =============== S U B R O U T I N E =======================================
.text:00000760
.text:00000760 ; Attributes: bp-based frame
.text:00000760
.text:00000760 ; void __stdcall NArchive::NTar::WriteOctal_12(char *, unsigned __int64)
.text:00000760 ?WriteOctal_12@NTar@NArchive@@YGXPAD_K@Z proc near
.text:00000760                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+135p
.text:00000760                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+32Bp ...
.text:00000760
.text:00000760 var_C           = dword ptr -0Ch
.text:00000760 var_8           = dword ptr -8
.text:00000760 var_4           = dword ptr -4
.text:00000760 arg_0           = dword ptr  8
.text:00000760 arg_4           = dword ptr  0Ch
.text:00000760 arg_8           = dword ptr  10h
.text:00000760
.text:00000760                 push    ebp
.text:00000761                 mov     ebp, esp
.text:00000763                 sub     esp, 0Ch
.text:00000766                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000076D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000774                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000077B                 mov     [ebp+var_4], 0Bh
.text:00000782                 cmp     [ebp+arg_8], 2
.text:00000786                 jb      short loc_7F0
.text:00000788                 ja      short loc_790
.text:0000078A                 cmp     [ebp+arg_4], 0
.text:0000078E                 jb      short loc_7F0
.text:00000790
.text:00000790 loc_790:                                ; CODE XREF: NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+28j
.text:00000790                 mov     eax, [ebp+arg_0]
.text:00000793                 mov     byte ptr [eax], 80h ; 'Ã‡'
.text:00000796                 mov     ecx, [ebp+arg_0]
.text:00000799                 mov     byte ptr [ecx+3], 0
.text:0000079D                 mov     edx, [ebp+arg_0]
.text:000007A0                 mov     byte ptr [edx+2], 0
.text:000007A4                 mov     eax, [ebp+arg_0]
.text:000007A7                 mov     byte ptr [eax+1], 0
.text:000007AB                 mov     [ebp+var_8], 0
.text:000007B2                 jmp     short loc_7D0
.text:000007B4 ; ---------------------------------------------------------------------------
.text:000007B4
.text:000007B4 loc_7B4:                                ; CODE XREF: NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+8Cj
.text:000007B4                 mov     ecx, [ebp+var_8]
.text:000007B7                 add     ecx, 1
.text:000007BA                 mov     [ebp+var_8], ecx
.text:000007BD                 mov     eax, [ebp+arg_4]
.text:000007C0                 mov     edx, [ebp+arg_8]
.text:000007C3                 mov     cl, 8
.text:000007C5                 call    __allshl
.text:000007CA                 mov     [ebp+arg_4], eax
.text:000007CD                 mov     [ebp+arg_8], edx
.text:000007D0
.text:000007D0 loc_7D0:                                ; CODE XREF: NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+52j
.text:000007D0                 cmp     [ebp+var_8], 8
.text:000007D4                 jnb     short loc_7EE
.text:000007D6                 mov     eax, [ebp+arg_4]
.text:000007D9                 mov     edx, [ebp+arg_8]
.text:000007DC                 mov     cl, 38h ; '8'
.text:000007DE                 call    __aullshr
.text:000007E3                 mov     edx, [ebp+arg_0]
.text:000007E6                 add     edx, [ebp+var_8]
.text:000007E9                 mov     [edx+4], al
.text:000007EC                 jmp     short loc_7B4
.text:000007EE ; ---------------------------------------------------------------------------
.text:000007EE
.text:000007EE loc_7EE:                                ; CODE XREF: NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+74j
.text:000007EE                 jmp     short loc_83D
.text:000007F0 ; ---------------------------------------------------------------------------
.text:000007F0
.text:000007F0 loc_7F0:                                ; CODE XREF: NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+26j
.text:000007F0                                         ; NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+2Ej
.text:000007F0                 mov     [ebp+var_C], 0
.text:000007F7                 jmp     short loc_802
.text:000007F9 ; ---------------------------------------------------------------------------
.text:000007F9
.text:000007F9 loc_7F9:                                ; CODE XREF: NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+DBj
.text:000007F9                 mov     eax, [ebp+var_C]
.text:000007FC                 add     eax, 1
.text:000007FF                 mov     [ebp+var_C], eax
.text:00000802
.text:00000802 loc_802:                                ; CODE XREF: NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+97j
.text:00000802                 cmp     [ebp+var_C], 0Bh
.text:00000806                 jnb     short loc_83D
.text:00000808                 mov     ecx, [ebp+arg_4]
.text:0000080B                 and     ecx, 7
.text:0000080E                 mov     edx, [ebp+arg_8]
.text:00000811                 and     edx, 0
.text:00000814                 add     ecx, 30h ; '0'
.text:00000817                 adc     edx, 0
.text:0000081A                 mov     eax, 0Ah
.text:0000081F                 sub     eax, [ebp+var_C]
.text:00000822                 mov     edx, [ebp+arg_0]
.text:00000825                 mov     [edx+eax], cl
.text:00000828                 mov     eax, [ebp+arg_4]
.text:0000082B                 mov     edx, [ebp+arg_8]
.text:0000082E                 mov     cl, 3
.text:00000830                 call    __aullshr
.text:00000835                 mov     [ebp+arg_4], eax
.text:00000838                 mov     [ebp+arg_8], edx
.text:0000083B                 jmp     short loc_7F9
.text:0000083D ; ---------------------------------------------------------------------------
.text:0000083D
.text:0000083D loc_83D:                                ; CODE XREF: NArchive::NTar::WriteOctal_12(char *,unsigned __int64):loc_7EEj
.text:0000083D                                         ; NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+A6j
.text:0000083D                 add     esp, 0Ch
.text:00000840                 cmp     ebp, esp
.text:00000842                 call    __RTC_CheckEsp
.text:00000847                 mov     esp, ebp
.text:00000849                 pop     ebp
.text:0000084A                 retn    0Ch
.text:0000084A ?WriteOctal_12@NTar@NArchive@@YGXPAD_K@Z endp
.text:0000084A
.text:0000084A ; ---------------------------------------------------------------------------
.text:0000084D                 align 10h
.text:00000850
.text:00000850 ; =============== S U B R O U T I N E =======================================
.text:00000850
.text:00000850 ; Attributes: bp-based frame
.text:00000850
.text:00000850 ; void __stdcall NArchive::NTar::WriteOctal_12_Signed(char *, __int64)
.text:00000850 ?WriteOctal_12_Signed@NTar@NArchive@@YGXPAD_J@Z proc near
.text:00000850                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+15Bp
.text:00000850
.text:00000850 var_4           = dword ptr -4
.text:00000850 arg_0           = dword ptr  8
.text:00000850 arg_4           = dword ptr  0Ch
.text:00000850 arg_8           = dword ptr  10h
.text:00000850
.text:00000850                 push    ebp
.text:00000851                 mov     ebp, esp
.text:00000853                 push    ecx
.text:00000854                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000085B                 cmp     [ebp+arg_8], 0
.text:0000085F                 jl      short loc_87C
.text:00000861                 jg      short loc_869
.text:00000863                 cmp     [ebp+arg_4], 0
.text:00000867                 jb      short loc_87C
.text:00000869
.text:00000869 loc_869:                                ; CODE XREF: NArchive::NTar::WriteOctal_12_Signed(char *,__int64)+11j
.text:00000869                 mov     eax, [ebp+arg_8]
.text:0000086C                 push    eax
.text:0000086D                 mov     ecx, [ebp+arg_4]
.text:00000870                 push    ecx
.text:00000871                 mov     edx, [ebp+arg_0]
.text:00000874                 push    edx
.text:00000875                 call    ?WriteOctal_12@NTar@NArchive@@YGXPAD_K@Z ; NArchive::NTar::WriteOctal_12(char *,unsigned __int64)
.text:0000087A                 jmp     short loc_8DA
.text:0000087C ; ---------------------------------------------------------------------------
.text:0000087C
.text:0000087C loc_87C:                                ; CODE XREF: NArchive::NTar::WriteOctal_12_Signed(char *,__int64)+Fj
.text:0000087C                                         ; NArchive::NTar::WriteOctal_12_Signed(char *,__int64)+17j
.text:0000087C                 mov     eax, [ebp+arg_0]
.text:0000087F                 mov     byte ptr [eax+3], 0FFh
.text:00000883                 mov     ecx, [ebp+arg_0]
.text:00000886                 mov     byte ptr [ecx+2], 0FFh
.text:0000088A                 mov     edx, [ebp+arg_0]
.text:0000088D                 mov     byte ptr [edx+1], 0FFh
.text:00000891                 mov     eax, [ebp+arg_0]
.text:00000894                 mov     byte ptr [eax], 0FFh
.text:00000897                 mov     [ebp+var_4], 0
.text:0000089E                 jmp     short loc_8BC
.text:000008A0 ; ---------------------------------------------------------------------------
.text:000008A0
.text:000008A0 loc_8A0:                                ; CODE XREF: NArchive::NTar::WriteOctal_12_Signed(char *,__int64)+88j
.text:000008A0                 mov     ecx, [ebp+var_4]
.text:000008A3                 add     ecx, 1
.text:000008A6                 mov     [ebp+var_4], ecx
.text:000008A9                 mov     eax, [ebp+arg_4]
.text:000008AC                 mov     edx, [ebp+arg_8]
.text:000008AF                 mov     cl, 8
.text:000008B1                 call    __allshl
.text:000008B6                 mov     [ebp+arg_4], eax
.text:000008B9                 mov     [ebp+arg_8], edx
.text:000008BC
.text:000008BC loc_8BC:                                ; CODE XREF: NArchive::NTar::WriteOctal_12_Signed(char *,__int64)+4Ej
.text:000008BC                 cmp     [ebp+var_4], 8
.text:000008C0                 jnb     short loc_8DA
.text:000008C2                 mov     eax, [ebp+arg_4]
.text:000008C5                 mov     edx, [ebp+arg_8]
.text:000008C8                 mov     cl, 38h ; '8'
.text:000008CA                 call    __allshr
.text:000008CF                 mov     edx, [ebp+arg_0]
.text:000008D2                 add     edx, [ebp+var_4]
.text:000008D5                 mov     [edx+4], al
.text:000008D8                 jmp     short loc_8A0
.text:000008DA ; ---------------------------------------------------------------------------
.text:000008DA
.text:000008DA loc_8DA:                                ; CODE XREF: NArchive::NTar::WriteOctal_12_Signed(char *,__int64)+2Aj
.text:000008DA                                         ; NArchive::NTar::WriteOctal_12_Signed(char *,__int64)+70j
.text:000008DA                 add     esp, 4
.text:000008DD                 cmp     ebp, esp
.text:000008DF                 call    __RTC_CheckEsp
.text:000008E4                 mov     esp, ebp
.text:000008E6                 pop     ebp
.text:000008E7                 retn    0Ch
.text:000008E7 ?WriteOctal_12_Signed@NTar@NArchive@@YGXPAD_J@Z endp
.text:000008E7
.text:000008E7 ; ---------------------------------------------------------------------------
.text:000008EA                 align 10h
.text:000008F0
.text:000008F0 ; =============== S U B R O U T I N E =======================================
.text:000008F0
.text:000008F0 ; Attributes: bp-based frame
.text:000008F0
.text:000008F0 ; int __stdcall NArchive::NTar::CopyString(char *, AString *, int)
.text:000008F0 ?CopyString@NTar@NArchive@@YG_NPADABVAString@@I@Z proc near
.text:000008F0                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+1BEp
.text:000008F0                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+21Ap ...
.text:000008F0
.text:000008F0 arg_0           = dword ptr  8
.text:000008F0 arg_4           = dword ptr  0Ch
.text:000008F0 arg_8           = dword ptr  10h
.text:000008F0
.text:000008F0                 push    ebp
.text:000008F1                 mov     ebp, esp
.text:000008F3                 mov     ecx, [ebp+arg_4] ; this
.text:000008F6                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000008FB                 cmp     eax, [ebp+arg_8]
.text:000008FE                 jb      short loc_904
.text:00000900                 xor     al, al
.text:00000902                 jmp     short loc_918
.text:00000904 ; ---------------------------------------------------------------------------
.text:00000904
.text:00000904 loc_904:                                ; CODE XREF: NArchive::NTar::CopyString(char *,AString const &,uint)+Ej
.text:00000904                 mov     ecx, [ebp+arg_4]
.text:00000907                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000090C                 push    eax             ; char *
.text:0000090D                 mov     eax, [ebp+arg_0]
.text:00000910                 push    eax             ; char *
.text:00000911                 call    ?MyStringCopy@@YGXPADPBD@Z ; MyStringCopy(char *,char const *)
.text:00000916                 mov     al, 1
.text:00000918
.text:00000918 loc_918:                                ; CODE XREF: NArchive::NTar::CopyString(char *,AString const &,uint)+12j
.text:00000918                 cmp     ebp, esp
.text:0000091A                 call    __RTC_CheckEsp
.text:0000091F                 pop     ebp
.text:00000920                 retn    0Ch
.text:00000920 ?CopyString@NTar@NArchive@@YG_NPADABVAString@@I@Z endp
.text:00000920
.text:00000920 ; ---------------------------------------------------------------------------
.text:00000923                 align 10h
.text:00000930
.text:00000930 ; =============== S U B R O U T I N E =======================================
.text:00000930
.text:00000930 ; Attributes: bp-based frame
.text:00000930
.text:00000930 ; __int32 __thiscall NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::COutArchive *this, const struct NArchive::NTar::CItem *)
.text:00000930                 public ?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z
.text:00000930 ?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z proc near
.text:00000930
.text:00000930 var_C4          = dword ptr -0C4h
.text:00000930 var_C0          = dword ptr -0C0h
.text:00000930 var_BC          = dword ptr -0BCh
.text:00000930 var_B8          = dword ptr -0B8h
.text:00000930 var_B4          = dword ptr -0B4h
.text:00000930 var_B0          = dword ptr -0B0h
.text:00000930 var_AC          = dword ptr -0ACh
.text:00000930 var_A8          = dword ptr -0A8h
.text:00000930 var_A0          = dword ptr -0A0h
.text:00000930 var_98          = byte ptr -98h
.text:00000930 var_88          = dword ptr -88h
.text:00000930 var_84          = dword ptr -84h
.text:00000930 var_5C          = byte ptr -5Ch
.text:00000930 var_30          = byte ptr -30h
.text:00000930 var_1C          = dword ptr -1Ch
.text:00000930 var_18          = dword ptr -18h
.text:00000930 var_14          = dword ptr -14h
.text:00000930 var_10          = dword ptr -10h
.text:00000930 var_C           = dword ptr -0Ch
.text:00000930 var_4           = dword ptr -4
.text:00000930 arg_0           = dword ptr  8
.text:00000930
.text:00000930                 push    ebp
.text:00000931                 mov     ebp, esp
.text:00000933                 push    0FFFFFFFFh
.text:00000935                 push    offset __ehhandler$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z
.text:0000093A                 mov     eax, large fs:0
.text:00000940                 push    eax
.text:00000941                 sub     esp, 0B8h
.text:00000947                 push    edi
.text:00000948                 push    ecx
.text:00000949                 lea     edi, [ebp+var_C4]
.text:0000094F                 mov     ecx, 2Eh ; '.'
.text:00000954                 mov     eax, 0CCCCCCCCh
.text:00000959                 rep stosd
.text:0000095B                 pop     ecx
.text:0000095C                 mov     eax, dword ptr ds:___security_cookie
.text:00000961                 xor     eax, ebp
.text:00000963                 mov     [ebp+var_10], eax
.text:00000966                 push    eax
.text:00000967                 lea     eax, [ebp+var_C]
.text:0000096A                 mov     large fs:0, eax
.text:00000970                 mov     [ebp+var_14], ecx
.text:00000973                 mov     ecx, [ebp+arg_0] ; this
.text:00000976                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:0000097B                 mov     [ebp+var_18], eax
.text:0000097E                 mov     ecx, [ebp+arg_0]
.text:00000981                 add     ecx, 3Ch ; '<'  ; this
.text:00000984                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000989                 mov     [ebp+var_1C], eax
.text:0000098C                 cmp     [ebp+var_18], 64h ; 'd'
.text:00000990                 jnb     short loc_9A9
.text:00000992                 cmp     [ebp+var_1C], 64h ; 'd'
.text:00000996                 jnb     short loc_9A9
.text:00000998                 mov     eax, [ebp+arg_0]
.text:0000099B                 push    eax             ; struct NArchive::NTar::CItem *
.text:0000099C                 mov     ecx, [ebp+var_14] ; this
.text:0000099F                 call    ?WriteHeaderReal@COutArchive@NTar@NArchive@@AAEJABUCItem@23@@Z ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)
.text:000009A4                 jmp     loc_BD1
.text:000009A9 ; ---------------------------------------------------------------------------
.text:000009A9
.text:000009A9 loc_9A9:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+60j
.text:000009A9                                         ; NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+66j
.text:000009A9                 mov     ecx, [ebp+arg_0]
.text:000009AC                 push    ecx             ; struct NArchive::NTar::CItem *
.text:000009AD                 lea     ecx, [ebp+var_98] ; this
.text:000009B3                 call    ??0CItem@NTar@NArchive@@QAE@ABU012@@Z ; NArchive::NTar::CItem::CItem(NArchive::NTar::CItem const &)
.text:000009B8                 mov     [ebp+var_4], 0
.text:000009BF                 mov     edx, dword ptr ds:?kLongLink@NFileHeader@NTar@NArchive@@3PBDB ; char const * const NArchive::NTar::NFileHeader::kLongLink
.text:000009C5                 push    edx
.text:000009C6                 lea     ecx, [ebp+var_98]
.text:000009CC                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:000009D1                 lea     ecx, [ebp+var_5C] ; this
.text:000009D4                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:000009D9                 mov     [ebp+var_A0], 0
.text:000009E3                 jmp     short loc_9F4
.text:000009E5 ; ---------------------------------------------------------------------------
.text:000009E5
.text:000009E5 loc_9E5:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+109j
.text:000009E5                                         ; NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &):loc_B47j
.text:000009E5                 mov     eax, [ebp+var_A0]
.text:000009EB                 add     eax, 1
.text:000009EE                 mov     [ebp+var_A0], eax
.text:000009F4
.text:000009F4 loc_9F4:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+B3j
.text:000009F4                 cmp     [ebp+var_A0], 2
.text:000009FB                 jge     loc_B4C
.text:00000A01                 cmp     [ebp+var_A0], 0
.text:00000A08                 jnz     short loc_A1C
.text:00000A0A                 mov     [ebp+var_30], 4Bh ; 'K'
.text:00000A0E                 mov     ecx, [ebp+arg_0]
.text:00000A11                 add     ecx, 3Ch ; '<'
.text:00000A14                 mov     [ebp+var_A8+4], ecx
.text:00000A1A                 jmp     short loc_A29
.text:00000A1C ; ---------------------------------------------------------------------------
.text:00000A1C
.text:00000A1C loc_A1C:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+D8j
.text:00000A1C                 mov     [ebp+var_30], 4Ch ; 'L'
.text:00000A20                 mov     edx, [ebp+arg_0]
.text:00000A23                 mov     [ebp+var_A8+4], edx
.text:00000A29
.text:00000A29 loc_A29:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+EAj
.text:00000A29                 mov     ecx, [ebp+var_A8+4] ; this
.text:00000A2F                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000A34                 cmp     eax, 64h ; 'd'
.text:00000A37                 jnb     short loc_A3B
.text:00000A39                 jmp     short loc_9E5
.text:00000A3B ; ---------------------------------------------------------------------------
.text:00000A3B
.text:00000A3B loc_A3B:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+107j
.text:00000A3B                 mov     ecx, [ebp+var_A8+4] ; this
.text:00000A41                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000A46                 add     eax, 1
.text:00000A49                 mov     [ebp+var_A8], eax
.text:00000A4F                 mov     eax, [ebp+var_A8]
.text:00000A55                 xor     ecx, ecx
.text:00000A57                 mov     [ebp+var_88], eax
.text:00000A5D                 mov     [ebp+var_84], ecx
.text:00000A63                 lea     edx, [ebp+var_98]
.text:00000A69                 push    edx             ; struct NArchive::NTar::CItem *
.text:00000A6A                 mov     ecx, [ebp+var_14] ; this
.text:00000A6D                 call    ?WriteHeaderReal@COutArchive@NTar@NArchive@@AAEJABUCItem@23@@Z ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)
.text:00000A72                 mov     [ebp+var_AC], eax
.text:00000A78                 cmp     [ebp+var_AC], 0
.text:00000A7F                 jz      short loc_AAA
.text:00000A81                 mov     eax, [ebp+var_AC]
.text:00000A87                 mov     [ebp+var_B8], eax
.text:00000A8D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A94                 lea     ecx, [ebp+var_98] ; this
.text:00000A9A                 call    ??1CItem@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItem::~CItem(void)
.text:00000A9F                 mov     eax, [ebp+var_B8]
.text:00000AA5                 jmp     loc_BD1
.text:00000AAA ; ---------------------------------------------------------------------------
.text:00000AAA
.text:00000AAA loc_AAA:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+14Fj
.text:00000AAA                 mov     ecx, [ebp+var_A8]
.text:00000AB0                 push    ecx             ; unsigned int
.text:00000AB1                 mov     ecx, [ebp+var_A8+4]
.text:00000AB7                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000ABC                 push    eax             ; void *
.text:00000ABD                 mov     ecx, [ebp+var_14] ; this
.text:00000AC0                 call    ?WriteBytes@COutArchive@NTar@NArchive@@AAEJPBXI@Z ; NArchive::NTar::COutArchive::WriteBytes(void const *,uint)
.text:00000AC5                 mov     [ebp+var_B0], eax
.text:00000ACB                 cmp     [ebp+var_B0], 0
.text:00000AD2                 jz      short loc_AFD
.text:00000AD4                 mov     edx, [ebp+var_B0]
.text:00000ADA                 mov     [ebp+var_BC], edx
.text:00000AE0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000AE7                 lea     ecx, [ebp+var_98] ; this
.text:00000AED                 call    ??1CItem@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItem::~CItem(void)
.text:00000AF2                 mov     eax, [ebp+var_BC]
.text:00000AF8                 jmp     loc_BD1
.text:00000AFD ; ---------------------------------------------------------------------------
.text:00000AFD
.text:00000AFD loc_AFD:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+1A2j
.text:00000AFD                 mov     eax, [ebp+var_A8]
.text:00000B03                 xor     ecx, ecx
.text:00000B05                 push    ecx
.text:00000B06                 push    eax             ; unsigned __int64
.text:00000B07                 mov     ecx, [ebp+var_14] ; this
.text:00000B0A                 call    ?FillDataResidual@COutArchive@NTar@NArchive@@QAEJ_K@Z ; NArchive::NTar::COutArchive::FillDataResidual(unsigned __int64)
.text:00000B0F                 mov     [ebp+var_B4], eax
.text:00000B15                 cmp     [ebp+var_B4], 0
.text:00000B1C                 jz      short loc_B47
.text:00000B1E                 mov     edx, [ebp+var_B4]
.text:00000B24                 mov     [ebp+var_C0], edx
.text:00000B2A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B31                 lea     ecx, [ebp+var_98] ; this
.text:00000B37                 call    ??1CItem@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItem::~CItem(void)
.text:00000B3C                 mov     eax, [ebp+var_C0]
.text:00000B42                 jmp     loc_BD1
.text:00000B47 ; ---------------------------------------------------------------------------
.text:00000B47
.text:00000B47 loc_B47:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+1ECj
.text:00000B47                 jmp     loc_9E5
.text:00000B4C ; ---------------------------------------------------------------------------
.text:00000B4C
.text:00000B4C loc_B4C:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+CBj
.text:00000B4C                 mov     eax, [ebp+arg_0]
.text:00000B4F                 push    eax
.text:00000B50                 lea     ecx, [ebp+var_98]
.text:00000B56                 call    ??4CItem@NTar@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NTar::CItem::operator=(NArchive::NTar::CItem const &)
.text:00000B5B                 lea     ecx, [ebp+var_98] ; this
.text:00000B61                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000B66                 cmp     eax, 64h ; 'd'
.text:00000B69                 jb      short loc_B81
.text:00000B6B                 push    63h ; 'c'       ; unsigned int
.text:00000B6D                 mov     ecx, [ebp+arg_0]
.text:00000B70                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000B75                 push    eax             ; char *
.text:00000B76                 lea     ecx, [ebp+var_98] ; this
.text:00000B7C                 call    ?SetFrom@AString@@QAEXPBDI@Z ; AString::SetFrom(char const *,uint)
.text:00000B81
.text:00000B81 loc_B81:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+239j
.text:00000B81                 lea     ecx, [ebp+var_5C] ; this
.text:00000B84                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000B89                 cmp     eax, 64h ; 'd'
.text:00000B8C                 jb      short loc_BA4
.text:00000B8E                 push    63h ; 'c'       ; unsigned int
.text:00000B90                 mov     ecx, [ebp+arg_0]
.text:00000B93                 add     ecx, 3Ch ; '<'
.text:00000B96                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000B9B                 push    eax             ; char *
.text:00000B9C                 lea     ecx, [ebp+var_5C] ; this
.text:00000B9F                 call    ?SetFrom@AString@@QAEXPBDI@Z ; AString::SetFrom(char const *,uint)
.text:00000BA4
.text:00000BA4 loc_BA4:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+25Cj
.text:00000BA4                 lea     ecx, [ebp+var_98]
.text:00000BAA                 push    ecx             ; struct NArchive::NTar::CItem *
.text:00000BAB                 mov     ecx, [ebp+var_14] ; this
.text:00000BAE                 call    ?WriteHeaderReal@COutArchive@NTar@NArchive@@AAEJABUCItem@23@@Z ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)
.text:00000BB3                 mov     [ebp+var_C4], eax
.text:00000BB9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000BC0                 lea     ecx, [ebp+var_98] ; this
.text:00000BC6                 call    ??1CItem@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItem::~CItem(void)
.text:00000BCB                 mov     eax, [ebp+var_C4]
.text:00000BD1
.text:00000BD1 loc_BD1:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+74j
.text:00000BD1                                         ; NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+175j ...
.text:00000BD1                 push    edx
.text:00000BD2                 mov     ecx, ebp
.text:00000BD4                 push    eax
.text:00000BD5                 lea     edx, $LN19
.text:00000BDB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BE0                 pop     eax
.text:00000BE1                 pop     edx
.text:00000BE2                 mov     ecx, [ebp+var_C]
.text:00000BE5                 mov     large fs:0, ecx
.text:00000BEC                 pop     ecx
.text:00000BED                 pop     edi
.text:00000BEE                 mov     ecx, [ebp+var_10]
.text:00000BF1                 xor     ecx, ebp
.text:00000BF3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000BF8                 add     esp, 0C4h
.text:00000BFE                 cmp     ebp, esp
.text:00000C00                 call    __RTC_CheckEsp
.text:00000C05                 mov     esp, ebp
.text:00000C07                 pop     ebp
.text:00000C08                 retn    4
.text:00000C08 ?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z endp
.text:00000C08
.text:00000C08 ; ---------------------------------------------------------------------------
.text:00000C0B                 align 4
.text:00000C0C $LN19           dd 1                    ; DATA XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+2A5o
.text:00000C10                 dd offset $LN18
.text:00000C14 $LN18           dd 0FFFFFF68h, 78h      ; DATA XREF: .text:00000C10o
.text:00000C1C                 dd offset $LN16
.text:00000C20 $LN16           dd 0CC00696Dh, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000C1Co
.text:00000C30
.text:00000C30 ; =============== S U B R O U T I N E =======================================
.text:00000C30
.text:00000C30 ; Attributes: bp-based frame
.text:00000C30
.text:00000C30 ; __int32 __thiscall NArchive::NTar::COutArchive::FillDataResidual(NArchive::NTar::COutArchive *this, unsigned __int64)
.text:00000C30                 public ?FillDataResidual@COutArchive@NTar@NArchive@@QAEJ_K@Z
.text:00000C30 ?FillDataResidual@COutArchive@NTar@NArchive@@QAEJ_K@Z proc near
.text:00000C30                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+1DAp
.text:00000C30
.text:00000C30 var_218         = byte ptr -218h
.text:00000C30 Dst             = byte ptr -214h
.text:00000C30 Size            = dword ptr -10h
.text:00000C30 var_C           = dword ptr -0Ch
.text:00000C30 var_8           = dword ptr -8
.text:00000C30 var_4           = dword ptr -4
.text:00000C30 arg_0           = qword ptr  8
.text:00000C30
.text:00000C30                 push    ebp
.text:00000C31                 mov     ebp, esp
.text:00000C33                 sub     esp, 218h
.text:00000C39                 push    edi
.text:00000C3A                 push    ecx
.text:00000C3B                 lea     edi, [ebp+var_218]
.text:00000C41                 mov     ecx, 86h ; 'Ã¥'
.text:00000C46                 mov     eax, 0CCCCCCCCh
.text:00000C4B                 rep stosd
.text:00000C4D                 pop     ecx
.text:00000C4E                 mov     eax, dword ptr ds:___security_cookie
.text:00000C53                 xor     eax, ebp
.text:00000C55                 mov     [ebp+var_4], eax
.text:00000C58                 mov     [ebp+var_8], ecx
.text:00000C5B                 mov     eax, dword ptr [ebp+arg_0]
.text:00000C5E                 and     eax, 1FFh
.text:00000C63                 mov     [ebp+var_C], eax
.text:00000C66                 jnz     short loc_C6C
.text:00000C68                 xor     eax, eax
.text:00000C6A                 jmp     short loc_C9F
.text:00000C6C ; ---------------------------------------------------------------------------
.text:00000C6C
.text:00000C6C loc_C6C:                                ; CODE XREF: NArchive::NTar::COutArchive::FillDataResidual(unsigned __int64)+36j
.text:00000C6C                 mov     ecx, 200h
.text:00000C71                 sub     ecx, [ebp+var_C]
.text:00000C74                 mov     [ebp+Size], ecx
.text:00000C77                 mov     edx, [ebp+Size]
.text:00000C7A                 push    edx             ; Size
.text:00000C7B                 push    0               ; Val
.text:00000C7D                 lea     eax, [ebp+Dst]
.text:00000C83                 push    eax             ; Dst
.text:00000C84                 call    _memset
.text:00000C89                 add     esp, 0Ch
.text:00000C8C                 mov     ecx, [ebp+Size]
.text:00000C8F                 push    ecx             ; unsigned int
.text:00000C90                 lea     edx, [ebp+Dst]
.text:00000C96                 push    edx             ; void *
.text:00000C97                 mov     ecx, [ebp+var_8] ; this
.text:00000C9A                 call    ?WriteBytes@COutArchive@NTar@NArchive@@AAEJPBXI@Z ; NArchive::NTar::COutArchive::WriteBytes(void const *,uint)
.text:00000C9F
.text:00000C9F loc_C9F:                                ; CODE XREF: NArchive::NTar::COutArchive::FillDataResidual(unsigned __int64)+3Aj
.text:00000C9F                 push    edx
.text:00000CA0                 mov     ecx, ebp
.text:00000CA2                 push    eax
.text:00000CA3                 lea     edx, $LN6
.text:00000CA9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000CAE                 pop     eax
.text:00000CAF                 pop     edx
.text:00000CB0                 pop     edi
.text:00000CB1                 mov     ecx, [ebp+var_4]
.text:00000CB4                 xor     ecx, ebp
.text:00000CB6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000CBB                 add     esp, 218h
.text:00000CC1                 cmp     ebp, esp
.text:00000CC3                 call    __RTC_CheckEsp
.text:00000CC8                 mov     esp, ebp
.text:00000CCA                 pop     ebp
.text:00000CCB                 retn    8
.text:00000CCB ?FillDataResidual@COutArchive@NTar@NArchive@@QAEJ_K@Z endp
.text:00000CCB
.text:00000CCB ; ---------------------------------------------------------------------------
.text:00000CCE                 align 10h
.text:00000CD0 $LN6            dd 1                    ; DATA XREF: NArchive::NTar::COutArchive::FillDataResidual(unsigned __int64)+73o
.text:00000CD4                 dd offset $LN5
.text:00000CD8 $LN5            dd 0FFFFFDECh, 200h     ; DATA XREF: .text:00000CD4o
.text:00000CE0                 dd offset $LN4
.text:00000CE4 $LN4            dd 667562h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00000CE0o
.text:00000CF0
.text:00000CF0 ; =============== S U B R O U T I N E =======================================
.text:00000CF0
.text:00000CF0 ; Attributes: bp-based frame
.text:00000CF0
.text:00000CF0 ; __int32 __thiscall NArchive::NTar::COutArchive::WriteFinishHeader(NArchive::NTar::COutArchive *__hidden this)
.text:00000CF0                 public ?WriteFinishHeader@COutArchive@NTar@NArchive@@QAEJXZ
.text:00000CF0 ?WriteFinishHeader@COutArchive@NTar@NArchive@@QAEJXZ proc near
.text:00000CF0
.text:00000CF0 var_218         = dword ptr -218h
.text:00000CF0 var_214         = dword ptr -214h
.text:00000CF0 Dst             = byte ptr -20Ch
.text:00000CF0 var_8           = dword ptr -8
.text:00000CF0 var_4           = dword ptr -4
.text:00000CF0
.text:00000CF0                 push    ebp
.text:00000CF1                 mov     ebp, esp
.text:00000CF3                 sub     esp, 218h
.text:00000CF9                 push    edi
.text:00000CFA                 push    ecx
.text:00000CFB                 lea     edi, [ebp+var_218]
.text:00000D01                 mov     ecx, 86h ; 'Ã¥'
.text:00000D06                 mov     eax, 0CCCCCCCCh
.text:00000D0B                 rep stosd
.text:00000D0D                 pop     ecx
.text:00000D0E                 mov     eax, dword ptr ds:___security_cookie
.text:00000D13                 xor     eax, ebp
.text:00000D15                 mov     [ebp+var_4], eax
.text:00000D18                 mov     [ebp+var_8], ecx
.text:00000D1B                 push    200h            ; Size
.text:00000D20                 push    0               ; Val
.text:00000D22                 lea     eax, [ebp+Dst]
.text:00000D28                 push    eax             ; Dst
.text:00000D29                 call    _memset
.text:00000D2E                 add     esp, 0Ch
.text:00000D31                 mov     [ebp+var_214], 0
.text:00000D3B                 jmp     short loc_D4C
.text:00000D3D ; ---------------------------------------------------------------------------
.text:00000D3D
.text:00000D3D loc_D3D:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteFinishHeader(void):loc_D80j
.text:00000D3D                 mov     ecx, [ebp+var_214]
.text:00000D43                 add     ecx, 1
.text:00000D46                 mov     [ebp+var_214], ecx
.text:00000D4C
.text:00000D4C loc_D4C:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteFinishHeader(void)+4Bj
.text:00000D4C                 cmp     [ebp+var_214], 2
.text:00000D53                 jnb     short loc_D82
.text:00000D55                 push    200h            ; unsigned int
.text:00000D5A                 lea     edx, [ebp+Dst]
.text:00000D60                 push    edx             ; void *
.text:00000D61                 mov     ecx, [ebp+var_8] ; this
.text:00000D64                 call    ?WriteBytes@COutArchive@NTar@NArchive@@AAEJPBXI@Z ; NArchive::NTar::COutArchive::WriteBytes(void const *,uint)
.text:00000D69                 mov     [ebp+var_218], eax
.text:00000D6F                 cmp     [ebp+var_218], 0
.text:00000D76                 jz      short loc_D80
.text:00000D78                 mov     eax, [ebp+var_218]
.text:00000D7E                 jmp     short loc_D84
.text:00000D80 ; ---------------------------------------------------------------------------
.text:00000D80
.text:00000D80 loc_D80:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteFinishHeader(void)+86j
.text:00000D80                 jmp     short loc_D3D
.text:00000D82 ; ---------------------------------------------------------------------------
.text:00000D82
.text:00000D82 loc_D82:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteFinishHeader(void)+63j
.text:00000D82                 xor     eax, eax
.text:00000D84
.text:00000D84 loc_D84:                                ; CODE XREF: NArchive::NTar::COutArchive::WriteFinishHeader(void)+8Ej
.text:00000D84                 push    edx
.text:00000D85                 mov     ecx, ebp
.text:00000D87                 push    eax
.text:00000D88                 lea     edx, $LN9
.text:00000D8E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D93                 pop     eax
.text:00000D94                 pop     edx
.text:00000D95                 pop     edi
.text:00000D96                 mov     ecx, [ebp+var_4]
.text:00000D99                 xor     ecx, ebp
.text:00000D9B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000DA0                 add     esp, 218h
.text:00000DA6                 cmp     ebp, esp
.text:00000DA8                 call    __RTC_CheckEsp
.text:00000DAD                 mov     esp, ebp
.text:00000DAF                 pop     ebp
.text:00000DB0                 retn
.text:00000DB0 ?WriteFinishHeader@COutArchive@NTar@NArchive@@QAEJXZ endp
.text:00000DB0
.text:00000DB0 ; ---------------------------------------------------------------------------
.text:00000DB1                 align 4
.text:00000DB4 $LN9            dd 1                    ; DATA XREF: NArchive::NTar::COutArchive::WriteFinishHeader(void)+98o
.text:00000DB8                 dd offset $LN8
.text:00000DBC $LN8            dd 0FFFFFDF4h, 200h     ; DATA XREF: .text:00000DB8o
.text:00000DC4                 dd offset $LN7          ; "record"
.text:00000DC8 $LN7            db 'record',0           ; DATA XREF: .text:00000DC4o
.text:00000DCF                 align 10h
.text:00000DCF _text           ends
.text:00000DCF
.rtc$TMZ:00000DD0 ; ===========================================================================
.rtc$TMZ:00000DD0
.rtc$TMZ:00000DD0 ; Segment type: Pure data
.rtc$TMZ:00000DD0 ; Segment permissions: Read
.rtc$TMZ:00000DD0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000DD0                 assume cs:_rtc$TMZ
.rtc$TMZ:00000DD0                 ;org 0DD0h
.rtc$TMZ:00000DD0 ; COMDAT (pick any)
.rtc$TMZ:00000DD0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000DD0 _rtc$TMZ        ends
.rtc$TMZ:00000DD0
.rtc$IMZ:00000DD4 ; ===========================================================================
.rtc$IMZ:00000DD4
.rtc$IMZ:00000DD4 ; Segment type: Pure data
.rtc$IMZ:00000DD4 ; Segment permissions: Read
.rtc$IMZ:00000DD4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000DD4                 assume cs:_rtc$IMZ
.rtc$IMZ:00000DD4                 ;org 0DD4h
.rtc$IMZ:00000DD4 ; COMDAT (pick any)
.rtc$IMZ:00000DD4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000DD4 _rtc$IMZ        ends
.rtc$IMZ:00000DD4
.text:00000DD8 ; ===========================================================================
.text:00000DD8
.text:00000DD8 ; Segment type: Pure code
.text:00000DD8 ; Segment permissions: Read/Execute
.text:00000DD8 _text           segment para public 'CODE' use32
.text:00000DD8                 assume cs:_text
.text:00000DD8                 ;org 0DD8h
.text:00000DD8 ; COMDAT (pick any)
.text:00000DD8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000DD8
.text:00000DD8 ; =============== S U B R O U T I N E =======================================
.text:00000DD8
.text:00000DD8 ; Attributes: bp-based frame
.text:00000DD8
.text:00000DD8 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00000DD8                 public ?Len@AString@@QBEIXZ
.text:00000DD8 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+50p
.text:00000DD8                                         ; NArchive::NTar::CopyString(char *,AString const &,uint)+6p ...
.text:00000DD8
.text:00000DD8 var_4           = dword ptr -4
.text:00000DD8
.text:00000DD8                 push    ebp
.text:00000DD9                 mov     ebp, esp
.text:00000DDB                 push    ecx
.text:00000DDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DE3                 mov     [ebp+var_4], ecx
.text:00000DE6                 mov     eax, [ebp+var_4]
.text:00000DE9                 mov     eax, [eax+4]
.text:00000DEC                 mov     esp, ebp
.text:00000DEE                 pop     ebp
.text:00000DEF                 retn
.text:00000DEF ?Len@AString@@QBEIXZ endp
.text:00000DEF
.text:00000DEF _text           ends
.text:00000DEF
.text:00000DF0 ; ===========================================================================
.text:00000DF0
.text:00000DF0 ; Segment type: Pure code
.text:00000DF0 ; Segment permissions: Read/Execute
.text:00000DF0 _text           segment para public 'CODE' use32
.text:00000DF0                 assume cs:_text
.text:00000DF0                 ;org 0DF0h
.text:00000DF0 ; COMDAT (pick any)
.text:00000DF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000DF0
.text:00000DF0 ; =============== S U B R O U T I N E =======================================
.text:00000DF0
.text:00000DF0 ; Attributes: bp-based frame
.text:00000DF0
.text:00000DF0 ; public: __thiscall AString::operator char const *(void)const
.text:00000DF0                 public ??BAString@@QBEPBDXZ
.text:00000DF0 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+69p
.text:00000DF0                                         ; NArchive::NTar::CopyString(char *,AString const &,uint)+17p ...
.text:00000DF0
.text:00000DF0 var_4           = dword ptr -4
.text:00000DF0
.text:00000DF0                 push    ebp
.text:00000DF1                 mov     ebp, esp
.text:00000DF3                 push    ecx
.text:00000DF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DFB                 mov     [ebp+var_4], ecx
.text:00000DFE                 mov     eax, [ebp+var_4]
.text:00000E01                 mov     eax, [eax]
.text:00000E03                 mov     esp, ebp
.text:00000E05                 pop     ebp
.text:00000E06                 retn
.text:00000E06 ??BAString@@QBEPBDXZ endp
.text:00000E06
.text:00000E06 ; ---------------------------------------------------------------------------
.text:00000E07                 align 4
.text:00000E07 _text           ends
.text:00000E07
.text:00000E08 ; ===========================================================================
.text:00000E08
.text:00000E08 ; Segment type: Pure code
.text:00000E08 ; Segment permissions: Read/Execute
.text:00000E08 _text           segment para public 'CODE' use32
.text:00000E08                 assume cs:_text
.text:00000E08                 ;org 0E08h
.text:00000E08 ; COMDAT (pick any)
.text:00000E08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000E08
.text:00000E08 ; =============== S U B R O U T I N E =======================================
.text:00000E08
.text:00000E08 ; Attributes: bp-based frame
.text:00000E08
.text:00000E08 ; bool __thiscall NArchive::NTar::CItem::IsSparse(NArchive::NTar::CItem *__hidden this)
.text:00000E08                 public ?IsSparse@CItem@NTar@NArchive@@QBE_NXZ
.text:00000E08 ?IsSparse@CItem@NTar@NArchive@@QBE_NXZ proc near
.text:00000E08                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+2F3p
.text:00000E08                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+4B2p
.text:00000E08
.text:00000E08 var_4           = dword ptr -4
.text:00000E08
.text:00000E08                 push    ebp
.text:00000E09                 mov     ebp, esp
.text:00000E0B                 push    ecx
.text:00000E0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E13                 mov     [ebp+var_4], ecx
.text:00000E16                 mov     eax, [ebp+var_4]
.text:00000E19                 movsx   ecx, byte ptr [eax+68h]
.text:00000E1D                 xor     eax, eax
.text:00000E1F                 cmp     ecx, 53h ; 'S'
.text:00000E22                 setz    al
.text:00000E25                 mov     esp, ebp
.text:00000E27                 pop     ebp
.text:00000E28                 retn
.text:00000E28 ?IsSparse@CItem@NTar@NArchive@@QBE_NXZ endp
.text:00000E28
.text:00000E28 ; ---------------------------------------------------------------------------
.text:00000E29                 align 4
.text:00000E29 _text           ends
.text:00000E29
.text:00000E2C ; ===========================================================================
.text:00000E2C
.text:00000E2C ; Segment type: Pure code
.text:00000E2C ; Segment permissions: Read/Execute
.text:00000E2C _text           segment para public 'CODE' use32
.text:00000E2C                 assume cs:_text
.text:00000E2C                 ;org 0E2Ch
.text:00000E2C ; COMDAT (pick any)
.text:00000E2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000E2C
.text:00000E2C ; =============== S U B R O U T I N E =======================================
.text:00000E2C
.text:00000E2C ; Attributes: bp-based frame
.text:00000E2C
.text:00000E2C ; void __stdcall MyStringCopy(char *, const char *)
.text:00000E2C                 public ?MyStringCopy@@YGXPADPBD@Z
.text:00000E2C ?MyStringCopy@@YGXPADPBD@Z proc near    ; CODE XREF: NArchive::NTar::CopyString(char *,AString const &,uint)+21p
.text:00000E2C
.text:00000E2C var_4           = dword ptr -4
.text:00000E2C arg_0           = dword ptr  8
.text:00000E2C arg_4           = dword ptr  0Ch
.text:00000E2C
.text:00000E2C                 push    ebp
.text:00000E2D                 mov     ebp, esp
.text:00000E2F                 push    ecx
.text:00000E30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E37
.text:00000E37 loc_E37:                                ; CODE XREF: MyStringCopy(char *,char const *)+47j
.text:00000E37                 mov     eax, [ebp+arg_0]
.text:00000E3A                 mov     ecx, [ebp+arg_4]
.text:00000E3D                 mov     dl, [ecx]
.text:00000E3F                 mov     [eax], dl
.text:00000E41                 mov     eax, [ebp+arg_0]
.text:00000E44                 movsx   ecx, byte ptr [eax]
.text:00000E47                 mov     edx, [ebp+arg_0]
.text:00000E4A                 add     edx, 1
.text:00000E4D                 mov     [ebp+arg_0], edx
.text:00000E50                 mov     eax, [ebp+arg_4]
.text:00000E53                 add     eax, 1
.text:00000E56                 mov     [ebp+arg_4], eax
.text:00000E59                 test    ecx, ecx
.text:00000E5B                 jz      short loc_E66
.text:00000E5D                 mov     [ebp+var_4], 1
.text:00000E64                 jmp     short loc_E6D
.text:00000E66 ; ---------------------------------------------------------------------------
.text:00000E66
.text:00000E66 loc_E66:                                ; CODE XREF: MyStringCopy(char *,char const *)+2Fj
.text:00000E66                 mov     [ebp+var_4], 0
.text:00000E6D
.text:00000E6D loc_E6D:                                ; CODE XREF: MyStringCopy(char *,char const *)+38j
.text:00000E6D                 cmp     [ebp+var_4], 0
.text:00000E71                 jz      short loc_E75
.text:00000E73                 jmp     short loc_E37
.text:00000E75 ; ---------------------------------------------------------------------------
.text:00000E75
.text:00000E75 loc_E75:                                ; CODE XREF: MyStringCopy(char *,char const *)+45j
.text:00000E75                 mov     esp, ebp
.text:00000E77                 pop     ebp
.text:00000E78                 retn    8
.text:00000E78 ?MyStringCopy@@YGXPADPBD@Z endp
.text:00000E78
.text:00000E78 ; ---------------------------------------------------------------------------
.text:00000E7B                 align 4
.text:00000E7B _text           ends
.text:00000E7B
.text$x:00000E7C ; ===========================================================================
.text$x:00000E7C
.text$x:00000E7C ; Segment type: Pure code
.text$x:00000E7C ; Segment permissions: Read/Execute
.text$x:00000E7C _text$x         segment para public 'CODE' use32
.text$x:00000E7C                 assume cs:_text$x
.text$x:00000E7C                 ;org 0E7Ch
.text$x:00000E7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00000E7C
.text$x:00000E7C ; =============== S U B R O U T I N E =======================================
.text$x:00000E7C
.text$x:00000E7C
.text$x:00000E7C __unwindfunclet$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z$0 proc near
.text$x:00000E7C                                         ; DATA XREF: .xdata$x:00000EB4o
.text$x:00000E7C                 lea     ecx, [ebp-98h]  ; this
.text$x:00000E82                 jmp     ??1CItem@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItem::~CItem(void)
.text$x:00000E82 __unwindfunclet$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z$0 endp
.text$x:00000E82
.text$x:00000E87
.text$x:00000E87 ; =============== S U B R O U T I N E =======================================
.text$x:00000E87
.text$x:00000E87
.text$x:00000E87 __ehhandler$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z proc near
.text$x:00000E87                                         ; DATA XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+5o
.text$x:00000E87
.text$x:00000E87 arg_4           = dword ptr  8
.text$x:00000E87
.text$x:00000E87                 mov     edx, [esp+arg_4]
.text$x:00000E8B                 lea     eax, [edx+0Ch]
.text$x:00000E8E                 mov     ecx, [edx-0C0h]
.text$x:00000E94                 xor     ecx, eax
.text$x:00000E96                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000E9B                 mov     ecx, [edx-4]
.text$x:00000E9E                 xor     ecx, eax
.text$x:00000EA0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000EA5                 mov     eax, offset __ehfuncinfo$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z
.text$x:00000EAA                 jmp     ___CxxFrameHandler3
.text$x:00000EAA __ehhandler$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z endp
.text$x:00000EAA
.text$x:00000EAA ; ---------------------------------------------------------------------------
.text$x:00000EAF                 align 10h
.text$x:00000EAF _text$x         ends
.text$x:00000EAF
.xdata$x:00000EB0 ; ===========================================================================
.xdata$x:00000EB0
.xdata$x:00000EB0 ; Segment type: Pure data
.xdata$x:00000EB0 ; Segment permissions: Read
.xdata$x:00000EB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000EB0                 assume cs:_xdata$x
.xdata$x:00000EB0                 ;org 0EB0h
.xdata$x:00000EB0 __unwindtable$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z db 0FFh
.xdata$x:00000EB0                                         ; DATA XREF: .xdata$x:00000EC0o
.xdata$x:00000EB1                 db 0FFh
.xdata$x:00000EB2                 db 0FFh
.xdata$x:00000EB3                 db 0FFh
.xdata$x:00000EB4                 dd offset __unwindfunclet$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z$0
.xdata$x:00000EB8 __ehfuncinfo$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z db  22h ; "
.xdata$x:00000EB8                                         ; DATA XREF: __ehhandler$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z+1Eo
.xdata$x:00000EB9                 db    5
.xdata$x:00000EBA                 db  93h ; Ã´
.xdata$x:00000EBB                 db  19h
.xdata$x:00000EBC                 db    1
.xdata$x:00000EBD                 db    0
.xdata$x:00000EBE                 db    0
.xdata$x:00000EBF                 db    0
.xdata$x:00000EC0                 dd offset __unwindtable$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z
.xdata$x:00000EC4                 db    0
.xdata$x:00000EC5                 db    0
.xdata$x:00000EC6                 db    0
.xdata$x:00000EC7                 db    0
.xdata$x:00000EC8                 db    0
.xdata$x:00000EC9                 db    0
.xdata$x:00000ECA                 db    0
.xdata$x:00000ECB                 db    0
.xdata$x:00000ECC                 db    0
.xdata$x:00000ECD                 db    0
.xdata$x:00000ECE                 db    0
.xdata$x:00000ECF                 db    0
.xdata$x:00000ED0                 db    0
.xdata$x:00000ED1                 db    0
.xdata$x:00000ED2                 db    0
.xdata$x:00000ED3                 db    0
.xdata$x:00000ED4                 db    0
.xdata$x:00000ED5                 db    0
.xdata$x:00000ED6                 db    0
.xdata$x:00000ED7                 db    0
.xdata$x:00000ED8                 db    1
.xdata$x:00000ED9                 db    0
.xdata$x:00000EDA                 db    0
.xdata$x:00000EDB                 db    0
.xdata$x:00000EDB _xdata$x        ends
.xdata$x:00000EDB
.text:00000EDC ; ===========================================================================
.text:00000EDC
.text:00000EDC ; Segment type: Pure code
.text:00000EDC ; Segment permissions: Read/Execute
.text:00000EDC _text           segment para public 'CODE' use32
.text:00000EDC                 assume cs:_text
.text:00000EDC                 ;org 0EDCh
.text:00000EDC ; COMDAT (pick any)
.text:00000EDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000EDC
.text:00000EDC ; =============== S U B R O U T I N E =======================================
.text:00000EDC
.text:00000EDC ; Attributes: bp-based frame
.text:00000EDC
.text:00000EDC ; void __thiscall AString::Empty(AString *__hidden this)
.text:00000EDC                 public ?Empty@AString@@QAEXXZ
.text:00000EDC ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+A4p
.text:00000EDC
.text:00000EDC var_4           = dword ptr -4
.text:00000EDC
.text:00000EDC                 push    ebp
.text:00000EDD                 mov     ebp, esp
.text:00000EDF                 push    ecx
.text:00000EE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EE7                 mov     [ebp+var_4], ecx
.text:00000EEA                 mov     eax, [ebp+var_4]
.text:00000EED                 mov     dword ptr [eax+4], 0
.text:00000EF4                 mov     ecx, [ebp+var_4]
.text:00000EF7                 mov     edx, [ecx]
.text:00000EF9                 mov     byte ptr [edx], 0
.text:00000EFC                 mov     esp, ebp
.text:00000EFE                 pop     ebp
.text:00000EFF                 retn
.text:00000EFF ?Empty@AString@@QAEXXZ endp
.text:00000EFF
.text:00000EFF _text           ends
.text:00000EFF
.text:00000F00 ; ===========================================================================
.text:00000F00
.text:00000F00 ; Segment type: Pure code
.text:00000F00 ; Segment permissions: Read/Execute
.text:00000F00 _text           segment para public 'CODE' use32
.text:00000F00                 assume cs:_text
.text:00000F00                 ;org 0F00h
.text:00000F00 ; COMDAT (pick any)
.text:00000F00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000F00
.text:00000F00 ; =============== S U B R O U T I N E =======================================
.text:00000F00
.text:00000F00 ; Attributes: bp-based frame
.text:00000F00
.text:00000F00 ; _DWORD __thiscall NArchive::NTar::CItem::CItem(NArchive::NTar::CItem *this, const struct NArchive::NTar::CItem *)
.text:00000F00                 public ??0CItem@NTar@NArchive@@QAE@ABU012@@Z
.text:00000F00 ??0CItem@NTar@NArchive@@QAE@ABU012@@Z proc near
.text:00000F00                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+83p
.text:00000F00
.text:00000F00 var_10          = dword ptr -10h
.text:00000F00 var_C           = dword ptr -0Ch
.text:00000F00 var_4           = dword ptr -4
.text:00000F00 arg_0           = dword ptr  8
.text:00000F00
.text:00000F00                 push    ebp
.text:00000F01                 mov     ebp, esp
.text:00000F03                 push    0FFFFFFFFh
.text:00000F05                 push    offset __ehhandler$??0CItem@NTar@NArchive@@QAE@ABU012@@Z
.text:00000F0A                 mov     eax, large fs:0
.text:00000F10                 push    eax
.text:00000F11                 push    ecx
.text:00000F12                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000F19                 mov     eax, dword ptr ds:___security_cookie
.text:00000F1E                 xor     eax, ebp
.text:00000F20                 push    eax
.text:00000F21                 lea     eax, [ebp+var_C]
.text:00000F24                 mov     large fs:0, eax
.text:00000F2A                 mov     [ebp+var_10], ecx
.text:00000F2D                 mov     eax, [ebp+arg_0]
.text:00000F30                 push    eax
.text:00000F31                 mov     ecx, [ebp+var_10]
.text:00000F34                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00000F39                 mov     [ebp+var_4], 0
.text:00000F40                 mov     ecx, [ebp+var_10]
.text:00000F43                 mov     edx, [ebp+arg_0]
.text:00000F46                 mov     eax, [edx+10h]
.text:00000F49                 mov     [ecx+10h], eax
.text:00000F4C                 mov     edx, [edx+14h]
.text:00000F4F                 mov     [ecx+14h], edx
.text:00000F52                 mov     eax, [ebp+var_10]
.text:00000F55                 mov     ecx, [ebp+arg_0]
.text:00000F58                 mov     edx, [ecx+18h]
.text:00000F5B                 mov     [eax+18h], edx
.text:00000F5E                 mov     ecx, [ecx+1Ch]
.text:00000F61                 mov     [eax+1Ch], ecx
.text:00000F64                 mov     edx, [ebp+var_10]
.text:00000F67                 mov     eax, [ebp+arg_0]
.text:00000F6A                 mov     ecx, [eax+20h]
.text:00000F6D                 mov     [edx+20h], ecx
.text:00000F70                 mov     eax, [eax+24h]
.text:00000F73                 mov     [edx+24h], eax
.text:00000F76                 mov     ecx, [ebp+var_10]
.text:00000F79                 mov     edx, [ebp+arg_0]
.text:00000F7C                 mov     eax, [edx+28h]
.text:00000F7F                 mov     [ecx+28h], eax
.text:00000F82                 mov     ecx, [ebp+var_10]
.text:00000F85                 mov     edx, [ebp+arg_0]
.text:00000F88                 mov     eax, [edx+2Ch]
.text:00000F8B                 mov     [ecx+2Ch], eax
.text:00000F8E                 mov     ecx, [ebp+var_10]
.text:00000F91                 mov     edx, [ebp+arg_0]
.text:00000F94                 mov     eax, [edx+30h]
.text:00000F97                 mov     [ecx+30h], eax
.text:00000F9A                 mov     ecx, [ebp+var_10]
.text:00000F9D                 mov     edx, [ebp+arg_0]
.text:00000FA0                 mov     eax, [edx+34h]
.text:00000FA3                 mov     [ecx+34h], eax
.text:00000FA6                 mov     ecx, [ebp+var_10]
.text:00000FA9                 mov     edx, [ebp+arg_0]
.text:00000FAC                 mov     eax, [edx+38h]
.text:00000FAF                 mov     [ecx+38h], eax
.text:00000FB2                 mov     ecx, [ebp+arg_0]
.text:00000FB5                 add     ecx, 3Ch ; '<'
.text:00000FB8                 push    ecx
.text:00000FB9                 mov     ecx, [ebp+var_10]
.text:00000FBC                 add     ecx, 3Ch ; '<'
.text:00000FBF                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00000FC4                 mov     byte ptr [ebp+var_4], 1
.text:00000FC8                 mov     edx, [ebp+arg_0]
.text:00000FCB                 add     edx, 48h ; 'H'
.text:00000FCE                 push    edx
.text:00000FCF                 mov     ecx, [ebp+var_10]
.text:00000FD2                 add     ecx, 48h ; 'H'
.text:00000FD5                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00000FDA                 mov     byte ptr [ebp+var_4], 2
.text:00000FDE                 mov     eax, [ebp+arg_0]
.text:00000FE1                 add     eax, 54h ; 'T'
.text:00000FE4                 push    eax
.text:00000FE5                 mov     ecx, [ebp+var_10]
.text:00000FE8                 add     ecx, 54h ; 'T'
.text:00000FEB                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00000FF0                 mov     byte ptr [ebp+var_4], 3
.text:00000FF4                 mov     ecx, [ebp+var_10]
.text:00000FF7                 mov     edx, [ebp+arg_0]
.text:00000FFA                 mov     eax, [edx+60h]
.text:00000FFD                 mov     [ecx+60h], eax
.text:00001000                 mov     edx, [edx+64h]
.text:00001003                 mov     [ecx+64h], edx
.text:00001006                 mov     eax, [ebp+var_10]
.text:00001009                 mov     ecx, [ebp+arg_0]
.text:0000100C                 mov     dl, [ecx+68h]
.text:0000100F                 mov     [eax+68h], dl
.text:00001012                 mov     eax, [ebp+var_10]
.text:00001015                 mov     ecx, [ebp+arg_0]
.text:00001018                 mov     dl, [ecx+69h]
.text:0000101B                 mov     [eax+69h], dl
.text:0000101E                 mov     eax, [ebp+var_10]
.text:00001021                 mov     ecx, [ebp+arg_0]
.text:00001024                 mov     dl, [ecx+6Ah]
.text:00001027                 mov     [eax+6Ah], dl
.text:0000102A                 mov     eax, [ebp+arg_0]
.text:0000102D                 add     eax, 6Ch ; 'l'
.text:00001030                 push    eax
.text:00001031                 mov     ecx, [ebp+var_10]
.text:00001034                 add     ecx, 6Ch ; 'l'
.text:00001037                 call    ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>(CRecordVector<NArchive::NTar::CSparseBlock> const &)
.text:0000103C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001043                 mov     eax, [ebp+var_10]
.text:00001046                 mov     ecx, [ebp+var_C]
.text:00001049                 mov     large fs:0, ecx
.text:00001050                 pop     ecx
.text:00001051                 add     esp, 10h
.text:00001054                 cmp     ebp, esp
.text:00001056                 call    __RTC_CheckEsp
.text:0000105B                 mov     esp, ebp
.text:0000105D                 pop     ebp
.text:0000105E                 retn    4
.text:0000105E ??0CItem@NTar@NArchive@@QAE@ABU012@@Z endp
.text:0000105E
.text:0000105E ; ---------------------------------------------------------------------------
.text:00001061                 align 4
.text:00001061 _text           ends
.text:00001061
.text$x:00001064 ; ===========================================================================
.text$x:00001064
.text$x:00001064 ; Segment type: Pure code
.text$x:00001064 ; Segment permissions: Read/Execute
.text$x:00001064 _text$x         segment para public 'CODE' use32
.text$x:00001064                 assume cs:_text$x
.text$x:00001064                 ;org 1064h
.text$x:00001064 ; COMDAT (pick associative to section at F00)
.text$x:00001064                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00001064
.text$x:00001064 ; =============== S U B R O U T I N E =======================================
.text$x:00001064
.text$x:00001064
.text$x:00001064 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$0 proc near
.text$x:00001064                                         ; DATA XREF: .xdata$x:000010ACo
.text$x:00001064                 mov     ecx, [ebp-10h]  ; this
.text$x:00001067                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001067 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$0 endp
.text$x:00001067
.text$x:0000106C
.text$x:0000106C ; =============== S U B R O U T I N E =======================================
.text$x:0000106C
.text$x:0000106C
.text$x:0000106C __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$1 proc near
.text$x:0000106C                                         ; DATA XREF: .xdata$x:000010B4o
.text$x:0000106C                 mov     ecx, [ebp-10h]
.text$x:0000106F                 add     ecx, 3Ch ; '<'  ; this
.text$x:00001072                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001072 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$1 endp
.text$x:00001072
.text$x:00001077
.text$x:00001077 ; =============== S U B R O U T I N E =======================================
.text$x:00001077
.text$x:00001077
.text$x:00001077 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$2 proc near
.text$x:00001077                                         ; DATA XREF: .xdata$x:000010BCo
.text$x:00001077                 mov     ecx, [ebp-10h]
.text$x:0000107A                 add     ecx, 48h ; 'H'  ; this
.text$x:0000107D                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000107D __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$2 endp
.text$x:0000107D
.text$x:00001082
.text$x:00001082 ; =============== S U B R O U T I N E =======================================
.text$x:00001082
.text$x:00001082
.text$x:00001082 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$3 proc near
.text$x:00001082                                         ; DATA XREF: .xdata$x:000010C4o
.text$x:00001082                 mov     ecx, [ebp-10h]
.text$x:00001085                 add     ecx, 54h ; 'T'  ; this
.text$x:00001088                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001088 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$3 endp
.text$x:00001088
.text$x:0000108D
.text$x:0000108D ; =============== S U B R O U T I N E =======================================
.text$x:0000108D
.text$x:0000108D
.text$x:0000108D __ehhandler$??0CItem@NTar@NArchive@@QAE@ABU012@@Z proc near
.text$x:0000108D                                         ; DATA XREF: NArchive::NTar::CItem::CItem(NArchive::NTar::CItem const &)+5o
.text$x:0000108D
.text$x:0000108D arg_4           = dword ptr  8
.text$x:0000108D
.text$x:0000108D                 mov     edx, [esp+arg_4]
.text$x:00001091                 lea     eax, [edx+0Ch]
.text$x:00001094                 mov     ecx, [edx-8]
.text$x:00001097                 xor     ecx, eax
.text$x:00001099                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000109E                 mov     eax, offset __ehfuncinfo$??0CItem@NTar@NArchive@@QAE@ABU012@@Z
.text$x:000010A3                 jmp     ___CxxFrameHandler3
.text$x:000010A3 __ehhandler$??0CItem@NTar@NArchive@@QAE@ABU012@@Z endp
.text$x:000010A3
.text$x:000010A3 _text$x         ends
.text$x:000010A3
.xdata$x:000010A8 ; ===========================================================================
.xdata$x:000010A8
.xdata$x:000010A8 ; Segment type: Pure data
.xdata$x:000010A8 ; Segment permissions: Read
.xdata$x:000010A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000010A8                 assume cs:_xdata$x
.xdata$x:000010A8                 ;org 10A8h
.xdata$x:000010A8 ; COMDAT (pick associative to section at F00)
.xdata$x:000010A8 __unwindtable$??0CItem@NTar@NArchive@@QAE@ABU012@@Z db 0FFh
.xdata$x:000010A8                                         ; DATA XREF: .xdata$x:000010D0o
.xdata$x:000010A9                 db 0FFh
.xdata$x:000010AA                 db 0FFh
.xdata$x:000010AB                 db 0FFh
.xdata$x:000010AC                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$0
.xdata$x:000010B0                 db    0
.xdata$x:000010B1                 db    0
.xdata$x:000010B2                 db    0
.xdata$x:000010B3                 db    0
.xdata$x:000010B4                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$1
.xdata$x:000010B8                 db    1
.xdata$x:000010B9                 db    0
.xdata$x:000010BA                 db    0
.xdata$x:000010BB                 db    0
.xdata$x:000010BC                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$2
.xdata$x:000010C0                 db    2
.xdata$x:000010C1                 db    0
.xdata$x:000010C2                 db    0
.xdata$x:000010C3                 db    0
.xdata$x:000010C4                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$3
.xdata$x:000010C8 __ehfuncinfo$??0CItem@NTar@NArchive@@QAE@ABU012@@Z db  22h ; "
.xdata$x:000010C8                                         ; DATA XREF: __ehhandler$??0CItem@NTar@NArchive@@QAE@ABU012@@Z+11o
.xdata$x:000010C9                 db    5
.xdata$x:000010CA                 db  93h ; Ã´
.xdata$x:000010CB                 db  19h
.xdata$x:000010CC                 db    4
.xdata$x:000010CD                 db    0
.xdata$x:000010CE                 db    0
.xdata$x:000010CF                 db    0
.xdata$x:000010D0                 dd offset __unwindtable$??0CItem@NTar@NArchive@@QAE@ABU012@@Z
.xdata$x:000010D4                 db    0
.xdata$x:000010D5                 db    0
.xdata$x:000010D6                 db    0
.xdata$x:000010D7                 db    0
.xdata$x:000010D8                 db    0
.xdata$x:000010D9                 db    0
.xdata$x:000010DA                 db    0
.xdata$x:000010DB                 db    0
.xdata$x:000010DC                 db    0
.xdata$x:000010DD                 db    0
.xdata$x:000010DE                 db    0
.xdata$x:000010DF                 db    0
.xdata$x:000010E0                 db    0
.xdata$x:000010E1                 db    0
.xdata$x:000010E2                 db    0
.xdata$x:000010E3                 db    0
.xdata$x:000010E4                 db    0
.xdata$x:000010E5                 db    0
.xdata$x:000010E6                 db    0
.xdata$x:000010E7                 db    0
.xdata$x:000010E8                 db    1
.xdata$x:000010E9                 db    0
.xdata$x:000010EA                 db    0
.xdata$x:000010EB                 db    0
.xdata$x:000010EB _xdata$x        ends
.xdata$x:000010EB
.text:000010EC ; ===========================================================================
.text:000010EC
.text:000010EC ; Segment type: Pure code
.text:000010EC ; Segment permissions: Read/Execute
.text:000010EC _text           segment para public 'CODE' use32
.text:000010EC                 assume cs:_text
.text:000010EC                 ;org 10ECh
.text:000010EC ; COMDAT (pick any)
.text:000010EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000010EC
.text:000010EC ; =============== S U B R O U T I N E =======================================
.text:000010EC
.text:000010EC ; Attributes: bp-based frame
.text:000010EC
.text:000010EC ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:000010EC                 public ??1AString@@QAE@XZ
.text:000010EC ??1AString@@QAE@XZ proc near            ; CODE XREF: __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$0+3j
.text:000010EC                                         ; __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$1+6j ...
.text:000010EC
.text:000010EC var_8           = dword ptr -8
.text:000010EC var_4           = dword ptr -4
.text:000010EC
.text:000010EC                 push    ebp
.text:000010ED                 mov     ebp, esp
.text:000010EF                 sub     esp, 8
.text:000010F2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000010F9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001100                 mov     [ebp+var_4], ecx
.text:00001103                 mov     eax, [ebp+var_4]
.text:00001106                 mov     ecx, [eax]
.text:00001108                 mov     [ebp+var_8], ecx
.text:0000110B                 mov     edx, [ebp+var_8]
.text:0000110E                 push    edx             ; void *
.text:0000110F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001114                 add     esp, 4
.text:00001117                 add     esp, 8
.text:0000111A                 cmp     ebp, esp
.text:0000111C                 call    __RTC_CheckEsp
.text:00001121                 mov     esp, ebp
.text:00001123                 pop     ebp
.text:00001124                 retn
.text:00001124 ??1AString@@QAE@XZ endp
.text:00001124
.text:00001124 ; ---------------------------------------------------------------------------
.text:00001125                 align 4
.text:00001125 _text           ends
.text:00001125
.text:00001128 ; ===========================================================================
.text:00001128
.text:00001128 ; Segment type: Pure code
.text:00001128 ; Segment permissions: Read/Execute
.text:00001128 _text           segment para public 'CODE' use32
.text:00001128                 assume cs:_text
.text:00001128                 ;org 1128h
.text:00001128 ; COMDAT (pick any)
.text:00001128                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001128
.text:00001128 ; =============== S U B R O U T I N E =======================================
.text:00001128
.text:00001128 ; Attributes: bp-based frame
.text:00001128
.text:00001128 ; _DWORD __thiscall NArchive::NTar::CItem::~CItem(NArchive::NTar::CItem *__hidden this)
.text:00001128                 public ??1CItem@NTar@NArchive@@QAE@XZ
.text:00001128 ??1CItem@NTar@NArchive@@QAE@XZ proc near
.text:00001128                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+16Ap
.text:00001128                                         ; NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+1BDp ...
.text:00001128
.text:00001128 var_10          = dword ptr -10h
.text:00001128 var_C           = dword ptr -0Ch
.text:00001128 var_4           = dword ptr -4
.text:00001128
.text:00001128                 push    ebp
.text:00001129                 mov     ebp, esp
.text:0000112B                 push    0FFFFFFFFh
.text:0000112D                 push    offset __ehhandler$??1CItem@NTar@NArchive@@QAE@XZ
.text:00001132                 mov     eax, large fs:0
.text:00001138                 push    eax
.text:00001139                 push    ecx
.text:0000113A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001141                 mov     eax, dword ptr ds:___security_cookie
.text:00001146                 xor     eax, ebp
.text:00001148                 push    eax
.text:00001149                 lea     eax, [ebp+var_C]
.text:0000114C                 mov     large fs:0, eax
.text:00001152                 mov     [ebp+var_10], ecx
.text:00001155                 mov     [ebp+var_4], 3
.text:0000115C                 mov     ecx, [ebp+var_10]
.text:0000115F                 add     ecx, 6Ch ; 'l'
.text:00001162                 call    ??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NTar::CSparseBlock>::~CRecordVector<NArchive::NTar::CSparseBlock>(void)
.text:00001167                 mov     byte ptr [ebp+var_4], 2
.text:0000116B                 mov     ecx, [ebp+var_10]
.text:0000116E                 add     ecx, 54h ; 'T'  ; this
.text:00001171                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001176                 mov     byte ptr [ebp+var_4], 1
.text:0000117A                 mov     ecx, [ebp+var_10]
.text:0000117D                 add     ecx, 48h ; 'H'  ; this
.text:00001180                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001185                 mov     byte ptr [ebp+var_4], 0
.text:00001189                 mov     ecx, [ebp+var_10]
.text:0000118C                 add     ecx, 3Ch ; '<'  ; this
.text:0000118F                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001194                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000119B                 mov     ecx, [ebp+var_10] ; this
.text:0000119E                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000011A3                 mov     ecx, [ebp+var_C]
.text:000011A6                 mov     large fs:0, ecx
.text:000011AD                 pop     ecx
.text:000011AE                 add     esp, 10h
.text:000011B1                 cmp     ebp, esp
.text:000011B3                 call    __RTC_CheckEsp
.text:000011B8                 mov     esp, ebp
.text:000011BA                 pop     ebp
.text:000011BB                 retn
.text:000011BB ??1CItem@NTar@NArchive@@QAE@XZ endp
.text:000011BB
.text:000011BB _text           ends
.text:000011BB
.text$x:000011BC ; ===========================================================================
.text$x:000011BC
.text$x:000011BC ; Segment type: Pure code
.text$x:000011BC ; Segment permissions: Read/Execute
.text$x:000011BC _text$x         segment para public 'CODE' use32
.text$x:000011BC                 assume cs:_text$x
.text$x:000011BC                 ;org 11BCh
.text$x:000011BC ; COMDAT (pick associative to section at 1128)
.text$x:000011BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000011BC
.text$x:000011BC ; =============== S U B R O U T I N E =======================================
.text$x:000011BC
.text$x:000011BC
.text$x:000011BC __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$0 proc near
.text$x:000011BC                                         ; DATA XREF: .xdata$x:00001204o
.text$x:000011BC                 mov     ecx, [ebp-10h]  ; this
.text$x:000011BF                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000011BF __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$0 endp
.text$x:000011BF
.text$x:000011C4
.text$x:000011C4 ; =============== S U B R O U T I N E =======================================
.text$x:000011C4
.text$x:000011C4
.text$x:000011C4 __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$1 proc near
.text$x:000011C4                                         ; DATA XREF: .xdata$x:0000120Co
.text$x:000011C4                 mov     ecx, [ebp-10h]
.text$x:000011C7                 add     ecx, 3Ch ; '<'  ; this
.text$x:000011CA                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000011CA __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$1 endp
.text$x:000011CA
.text$x:000011CF
.text$x:000011CF ; =============== S U B R O U T I N E =======================================
.text$x:000011CF
.text$x:000011CF
.text$x:000011CF __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$2 proc near
.text$x:000011CF                                         ; DATA XREF: .xdata$x:00001214o
.text$x:000011CF                 mov     ecx, [ebp-10h]
.text$x:000011D2                 add     ecx, 48h ; 'H'  ; this
.text$x:000011D5                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000011D5 __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$2 endp
.text$x:000011D5
.text$x:000011DA
.text$x:000011DA ; =============== S U B R O U T I N E =======================================
.text$x:000011DA
.text$x:000011DA
.text$x:000011DA __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$3 proc near
.text$x:000011DA                                         ; DATA XREF: .xdata$x:0000121Co
.text$x:000011DA                 mov     ecx, [ebp-10h]
.text$x:000011DD                 add     ecx, 54h ; 'T'  ; this
.text$x:000011E0                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000011E0 __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$3 endp
.text$x:000011E0
.text$x:000011E5
.text$x:000011E5 ; =============== S U B R O U T I N E =======================================
.text$x:000011E5
.text$x:000011E5
.text$x:000011E5 __ehhandler$??1CItem@NTar@NArchive@@QAE@XZ proc near
.text$x:000011E5                                         ; DATA XREF: NArchive::NTar::CItem::~CItem(void)+5o
.text$x:000011E5
.text$x:000011E5 arg_4           = dword ptr  8
.text$x:000011E5
.text$x:000011E5                 mov     edx, [esp+arg_4]
.text$x:000011E9                 lea     eax, [edx+0Ch]
.text$x:000011EC                 mov     ecx, [edx-8]
.text$x:000011EF                 xor     ecx, eax
.text$x:000011F1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000011F6                 mov     eax, offset __ehfuncinfo$??1CItem@NTar@NArchive@@QAE@XZ
.text$x:000011FB                 jmp     ___CxxFrameHandler3
.text$x:000011FB __ehhandler$??1CItem@NTar@NArchive@@QAE@XZ endp
.text$x:000011FB
.text$x:000011FB _text$x         ends
.text$x:000011FB
.xdata$x:00001200 ; ===========================================================================
.xdata$x:00001200
.xdata$x:00001200 ; Segment type: Pure data
.xdata$x:00001200 ; Segment permissions: Read
.xdata$x:00001200 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001200                 assume cs:_xdata$x
.xdata$x:00001200                 ;org 1200h
.xdata$x:00001200 ; COMDAT (pick associative to section at 1128)
.xdata$x:00001200 __unwindtable$??1CItem@NTar@NArchive@@QAE@XZ db 0FFh
.xdata$x:00001200                                         ; DATA XREF: .xdata$x:00001228o
.xdata$x:00001201                 db 0FFh
.xdata$x:00001202                 db 0FFh
.xdata$x:00001203                 db 0FFh
.xdata$x:00001204                 dd offset __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$0
.xdata$x:00001208                 db    0
.xdata$x:00001209                 db    0
.xdata$x:0000120A                 db    0
.xdata$x:0000120B                 db    0
.xdata$x:0000120C                 dd offset __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$1
.xdata$x:00001210                 db    1
.xdata$x:00001211                 db    0
.xdata$x:00001212                 db    0
.xdata$x:00001213                 db    0
.xdata$x:00001214                 dd offset __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$2
.xdata$x:00001218                 db    2
.xdata$x:00001219                 db    0
.xdata$x:0000121A                 db    0
.xdata$x:0000121B                 db    0
.xdata$x:0000121C                 dd offset __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$3
.xdata$x:00001220 __ehfuncinfo$??1CItem@NTar@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00001220                                         ; DATA XREF: __ehhandler$??1CItem@NTar@NArchive@@QAE@XZ+11o
.xdata$x:00001221                 db    5
.xdata$x:00001222                 db  93h ; Ã´
.xdata$x:00001223                 db  19h
.xdata$x:00001224                 db    4
.xdata$x:00001225                 db    0
.xdata$x:00001226                 db    0
.xdata$x:00001227                 db    0
.xdata$x:00001228                 dd offset __unwindtable$??1CItem@NTar@NArchive@@QAE@XZ
.xdata$x:0000122C                 align 20h
.xdata$x:00001240                 db    1
.xdata$x:00001241                 db    0
.xdata$x:00001242                 db    0
.xdata$x:00001243                 db    0
.xdata$x:00001243 _xdata$x        ends
.xdata$x:00001243
.text:00001244 ; ===========================================================================
.text:00001244
.text:00001244 ; Segment type: Pure code
.text:00001244 ; Segment permissions: Read/Execute
.text:00001244 _text           segment para public 'CODE' use32
.text:00001244                 assume cs:_text
.text:00001244                 ;org 1244h
.text:00001244 ; COMDAT (pick any)
.text:00001244                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001244
.text:00001244 ; =============== S U B R O U T I N E =======================================
.text:00001244
.text:00001244 ; Attributes: bp-based frame
.text:00001244
.text:00001244 ; public: struct NArchive::NTar::CItem & __thiscall NArchive::NTar::CItem::operator=(struct NArchive::NTar::CItem const &)
.text:00001244                 public ??4CItem@NTar@NArchive@@QAEAAU012@ABU012@@Z
.text:00001244 ??4CItem@NTar@NArchive@@QAEAAU012@ABU012@@Z proc near
.text:00001244                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+226p
.text:00001244
.text:00001244 var_8           = dword ptr -8
.text:00001244 var_4           = dword ptr -4
.text:00001244 arg_0           = dword ptr  8
.text:00001244
.text:00001244                 push    ebp
.text:00001245                 mov     ebp, esp
.text:00001247                 sub     esp, 8
.text:0000124A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001251                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001258                 mov     [ebp+var_4], ecx
.text:0000125B                 mov     eax, [ebp+arg_0]
.text:0000125E                 push    eax
.text:0000125F                 mov     ecx, [ebp+var_4]
.text:00001262                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00001267                 mov     ecx, [ebp+var_4]
.text:0000126A                 mov     edx, [ebp+arg_0]
.text:0000126D                 mov     eax, [edx+10h]
.text:00001270                 mov     [ecx+10h], eax
.text:00001273                 mov     edx, [edx+14h]
.text:00001276                 mov     [ecx+14h], edx
.text:00001279                 mov     eax, [ebp+var_4]
.text:0000127C                 mov     ecx, [ebp+arg_0]
.text:0000127F                 mov     edx, [ecx+18h]
.text:00001282                 mov     [eax+18h], edx
.text:00001285                 mov     ecx, [ecx+1Ch]
.text:00001288                 mov     [eax+1Ch], ecx
.text:0000128B                 mov     edx, [ebp+var_4]
.text:0000128E                 mov     eax, [ebp+arg_0]
.text:00001291                 mov     ecx, [eax+20h]
.text:00001294                 mov     [edx+20h], ecx
.text:00001297                 mov     eax, [eax+24h]
.text:0000129A                 mov     [edx+24h], eax
.text:0000129D                 mov     ecx, [ebp+var_4]
.text:000012A0                 mov     edx, [ebp+arg_0]
.text:000012A3                 mov     eax, [edx+28h]
.text:000012A6                 mov     [ecx+28h], eax
.text:000012A9                 mov     ecx, [ebp+var_4]
.text:000012AC                 mov     edx, [ebp+arg_0]
.text:000012AF                 mov     eax, [edx+2Ch]
.text:000012B2                 mov     [ecx+2Ch], eax
.text:000012B5                 mov     ecx, [ebp+var_4]
.text:000012B8                 mov     edx, [ebp+arg_0]
.text:000012BB                 mov     eax, [edx+30h]
.text:000012BE                 mov     [ecx+30h], eax
.text:000012C1                 mov     ecx, [ebp+var_4]
.text:000012C4                 mov     edx, [ebp+arg_0]
.text:000012C7                 mov     eax, [edx+34h]
.text:000012CA                 mov     [ecx+34h], eax
.text:000012CD                 mov     ecx, [ebp+var_4]
.text:000012D0                 mov     edx, [ebp+arg_0]
.text:000012D3                 mov     eax, [edx+38h]
.text:000012D6                 mov     [ecx+38h], eax
.text:000012D9                 mov     ecx, [ebp+arg_0]
.text:000012DC                 add     ecx, 3Ch ; '<'
.text:000012DF                 push    ecx
.text:000012E0                 mov     ecx, [ebp+var_4]
.text:000012E3                 add     ecx, 3Ch ; '<'
.text:000012E6                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:000012EB                 mov     edx, [ebp+arg_0]
.text:000012EE                 add     edx, 48h ; 'H'
.text:000012F1                 push    edx
.text:000012F2                 mov     ecx, [ebp+var_4]
.text:000012F5                 add     ecx, 48h ; 'H'
.text:000012F8                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:000012FD                 mov     eax, [ebp+arg_0]
.text:00001300                 add     eax, 54h ; 'T'
.text:00001303                 push    eax
.text:00001304                 mov     ecx, [ebp+var_4]
.text:00001307                 add     ecx, 54h ; 'T'
.text:0000130A                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:0000130F                 mov     [ebp+var_8], 0
.text:00001316                 jmp     short loc_1321
.text:00001318 ; ---------------------------------------------------------------------------
.text:00001318
.text:00001318 loc_1318:                               ; CODE XREF: NArchive::NTar::CItem::operator=(NArchive::NTar::CItem const &)+F5j
.text:00001318                 mov     ecx, [ebp+var_8]
.text:0000131B                 add     ecx, 1
.text:0000131E                 mov     [ebp+var_8], ecx
.text:00001321
.text:00001321 loc_1321:                               ; CODE XREF: NArchive::NTar::CItem::operator=(NArchive::NTar::CItem const &)+D2j
.text:00001321                 cmp     [ebp+var_8], 8
.text:00001325                 jnb     short loc_133B
.text:00001327                 mov     edx, [ebp+var_4]
.text:0000132A                 add     edx, [ebp+var_8]
.text:0000132D                 mov     eax, [ebp+arg_0]
.text:00001330                 add     eax, [ebp+var_8]
.text:00001333                 mov     cl, [eax+60h]
.text:00001336                 mov     [edx+60h], cl
.text:00001339                 jmp     short loc_1318
.text:0000133B ; ---------------------------------------------------------------------------
.text:0000133B
.text:0000133B loc_133B:                               ; CODE XREF: NArchive::NTar::CItem::operator=(NArchive::NTar::CItem const &)+E1j
.text:0000133B                 mov     edx, [ebp+var_4]
.text:0000133E                 mov     eax, [ebp+arg_0]
.text:00001341                 mov     cl, [eax+68h]
.text:00001344                 mov     [edx+68h], cl
.text:00001347                 mov     edx, [ebp+var_4]
.text:0000134A                 mov     eax, [ebp+arg_0]
.text:0000134D                 mov     cl, [eax+69h]
.text:00001350                 mov     [edx+69h], cl
.text:00001353                 mov     edx, [ebp+var_4]
.text:00001356                 mov     eax, [ebp+arg_0]
.text:00001359                 mov     cl, [eax+6Ah]
.text:0000135C                 mov     [edx+6Ah], cl
.text:0000135F                 mov     edx, [ebp+arg_0]
.text:00001362                 add     edx, 6Ch ; 'l'
.text:00001365                 push    edx
.text:00001366                 mov     ecx, [ebp+var_4]
.text:00001369                 add     ecx, 6Ch ; 'l'
.text:0000136C                 call    ??4?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator=(CRecordVector<NArchive::NTar::CSparseBlock> const &)
.text:00001371                 mov     eax, [ebp+var_4]
.text:00001374                 add     esp, 8
.text:00001377                 cmp     ebp, esp
.text:00001379                 call    __RTC_CheckEsp
.text:0000137E                 mov     esp, ebp
.text:00001380                 pop     ebp
.text:00001381                 retn    4
.text:00001381 ??4CItem@NTar@NArchive@@QAEAAU012@ABU012@@Z endp
.text:00001381
.text:00001381 _text           ends
.text:00001381
.text:00001384 ; ===========================================================================
.text:00001384
.text:00001384 ; Segment type: Pure code
.text:00001384 ; Segment permissions: Read/Execute
.text:00001384 _text           segment para public 'CODE' use32
.text:00001384                 assume cs:_text
.text:00001384                 ;org 1384h
.text:00001384 ; COMDAT (pick any)
.text:00001384                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001384
.text:00001384 ; =============== S U B R O U T I N E =======================================
.text:00001384
.text:00001384 ; Attributes: bp-based frame
.text:00001384
.text:00001384 ; public: __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::CRecordVector<struct NArchive::NTar::CSparseBlock>(class CRecordVector<struct NArchive::NTar::CSparseBlock> const &)
.text:00001384                 public ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z
.text:00001384 ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z proc near
.text:00001384                                         ; CODE XREF: NArchive::NTar::CItem::CItem(NArchive::NTar::CItem const &)+137p
.text:00001384
.text:00001384 var_C           = dword ptr -0Ch
.text:00001384 var_8           = dword ptr -8
.text:00001384 var_4           = dword ptr -4
.text:00001384 arg_0           = dword ptr  8
.text:00001384
.text:00001384                 push    ebp
.text:00001385                 mov     ebp, esp
.text:00001387                 sub     esp, 0Ch
.text:0000138A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001391                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001398                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000139F                 mov     [ebp+var_4], ecx
.text:000013A2                 mov     eax, [ebp+var_4]
.text:000013A5                 mov     dword ptr [eax], 0
.text:000013AB                 mov     ecx, [ebp+var_4]
.text:000013AE                 mov     dword ptr [ecx+4], 0
.text:000013B5                 mov     edx, [ebp+var_4]
.text:000013B8                 mov     dword ptr [edx+8], 0
.text:000013BF                 mov     ecx, [ebp+arg_0]
.text:000013C2                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:000013C7                 mov     [ebp+var_8], eax
.text:000013CA                 cmp     [ebp+var_8], 0
.text:000013CE                 jz      short loc_1424
.text:000013D0                 xor     ecx, ecx
.text:000013D2                 mov     eax, [ebp+var_8]
.text:000013D5                 mov     edx, 10h
.text:000013DA                 mul     edx
.text:000013DC                 seto    cl
.text:000013DF                 neg     ecx
.text:000013E1                 or      ecx, eax
.text:000013E3                 push    ecx             ; unsigned int
.text:000013E4                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000013E9                 add     esp, 4
.text:000013EC                 mov     [ebp+var_C], eax
.text:000013EF                 mov     eax, [ebp+var_4]
.text:000013F2                 mov     ecx, [ebp+var_C]
.text:000013F5                 mov     [eax], ecx
.text:000013F7                 mov     edx, [ebp+var_4]
.text:000013FA                 mov     eax, [ebp+var_8]
.text:000013FD                 mov     [edx+4], eax
.text:00001400                 mov     ecx, [ebp+var_4]
.text:00001403                 mov     edx, [ebp+var_8]
.text:00001406                 mov     [ecx+8], edx
.text:00001409                 mov     eax, [ebp+var_8]
.text:0000140C                 shl     eax, 4
.text:0000140F                 push    eax             ; Size
.text:00001410                 mov     ecx, [ebp+arg_0]
.text:00001413                 mov     edx, [ecx]
.text:00001415                 push    edx             ; Src
.text:00001416                 mov     eax, [ebp+var_4]
.text:00001419                 mov     ecx, [eax]
.text:0000141B                 push    ecx             ; Dst
.text:0000141C                 call    _memcpy
.text:00001421                 add     esp, 0Ch
.text:00001424
.text:00001424 loc_1424:                               ; CODE XREF: CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>(CRecordVector<NArchive::NTar::CSparseBlock> const &)+4Aj
.text:00001424                 mov     eax, [ebp+var_4]
.text:00001427                 add     esp, 0Ch
.text:0000142A                 cmp     ebp, esp
.text:0000142C                 call    __RTC_CheckEsp
.text:00001431                 mov     esp, ebp
.text:00001433                 pop     ebp
.text:00001434                 retn    4
.text:00001434 ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z endp
.text:00001434
.text:00001434 ; ---------------------------------------------------------------------------
.text:00001437                 align 4
.text:00001437 _text           ends
.text:00001437
.text:00001438 ; ===========================================================================
.text:00001438
.text:00001438 ; Segment type: Pure code
.text:00001438 ; Segment permissions: Read/Execute
.text:00001438 _text           segment para public 'CODE' use32
.text:00001438                 assume cs:_text
.text:00001438                 ;org 1438h
.text:00001438 ; COMDAT (pick any)
.text:00001438                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001438
.text:00001438 ; =============== S U B R O U T I N E =======================================
.text:00001438
.text:00001438 ; Attributes: bp-based frame
.text:00001438
.text:00001438 ; public: unsigned int __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::Size(void)const
.text:00001438                 public ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ
.text:00001438 ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ proc near
.text:00001438                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+309p
.text:00001438                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+351p ...
.text:00001438
.text:00001438 var_4           = dword ptr -4
.text:00001438
.text:00001438                 push    ebp
.text:00001439                 mov     ebp, esp
.text:0000143B                 push    ecx
.text:0000143C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001443                 mov     [ebp+var_4], ecx
.text:00001446                 mov     eax, [ebp+var_4]
.text:00001449                 mov     eax, [eax+4]
.text:0000144C                 mov     esp, ebp
.text:0000144E                 pop     ebp
.text:0000144F                 retn
.text:0000144F ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ endp
.text:0000144F
.text:0000144F _text           ends
.text:0000144F
.text:00001450 ; ===========================================================================
.text:00001450
.text:00001450 ; Segment type: Pure code
.text:00001450 ; Segment permissions: Read/Execute
.text:00001450 _text           segment para public 'CODE' use32
.text:00001450                 assume cs:_text
.text:00001450                 ;org 1450h
.text:00001450 ; COMDAT (pick any)
.text:00001450                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001450
.text:00001450 ; =============== S U B R O U T I N E =======================================
.text:00001450
.text:00001450 ; Attributes: bp-based frame
.text:00001450
.text:00001450 ; public: __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::~CRecordVector<struct NArchive::NTar::CSparseBlock>(void)
.text:00001450                 public ??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ
.text:00001450 ??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ proc near
.text:00001450                                         ; CODE XREF: NArchive::NTar::CItem::~CItem(void)+3Ap
.text:00001450
.text:00001450 var_8           = dword ptr -8
.text:00001450 var_4           = dword ptr -4
.text:00001450
.text:00001450                 push    ebp
.text:00001451                 mov     ebp, esp
.text:00001453                 sub     esp, 8
.text:00001456                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000145D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001464                 mov     [ebp+var_4], ecx
.text:00001467                 mov     eax, [ebp+var_4]
.text:0000146A                 mov     ecx, [eax]
.text:0000146C                 mov     [ebp+var_8], ecx
.text:0000146F                 mov     edx, [ebp+var_8]
.text:00001472                 push    edx             ; void *
.text:00001473                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001478                 add     esp, 4
.text:0000147B                 add     esp, 8
.text:0000147E                 cmp     ebp, esp
.text:00001480                 call    __RTC_CheckEsp
.text:00001485                 mov     esp, ebp
.text:00001487                 pop     ebp
.text:00001488                 retn
.text:00001488 ??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ endp
.text:00001488
.text:00001488 ; ---------------------------------------------------------------------------
.text:00001489                 align 4
.text:00001489 _text           ends
.text:00001489
.text:0000148C ; ===========================================================================
.text:0000148C
.text:0000148C ; Segment type: Pure code
.text:0000148C ; Segment permissions: Read/Execute
.text:0000148C _text           segment para public 'CODE' use32
.text:0000148C                 assume cs:_text
.text:0000148C                 ;org 148Ch
.text:0000148C ; COMDAT (pick any)
.text:0000148C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000148C
.text:0000148C ; =============== S U B R O U T I N E =======================================
.text:0000148C
.text:0000148C ; Attributes: bp-based frame
.text:0000148C
.text:0000148C ; public: class CRecordVector<struct NArchive::NTar::CSparseBlock> & __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::operator=(class CRecordVector<struct NArchive::NTar::CSparseBlock> const &)
.text:0000148C                 public ??4?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEAAV0@ABV0@@Z
.text:0000148C ??4?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEAAV0@ABV0@@Z proc near
.text:0000148C                                         ; CODE XREF: NArchive::NTar::CItem::operator=(NArchive::NTar::CItem const &)+128p
.text:0000148C
.text:0000148C var_10          = dword ptr -10h
.text:0000148C var_C           = dword ptr -0Ch
.text:0000148C var_8           = dword ptr -8
.text:0000148C var_4           = dword ptr -4
.text:0000148C arg_0           = dword ptr  8
.text:0000148C
.text:0000148C                 push    ebp
.text:0000148D                 mov     ebp, esp
.text:0000148F                 sub     esp, 10h
.text:00001492                 mov     eax, 0CCCCCCCCh
.text:00001497                 mov     [ebp+var_10], eax
.text:0000149A                 mov     [ebp+var_C], eax
.text:0000149D                 mov     [ebp+var_8], eax
.text:000014A0                 mov     [ebp+var_4], eax
.text:000014A3                 mov     [ebp+var_4], ecx
.text:000014A6                 mov     eax, [ebp+arg_0]
.text:000014A9                 cmp     eax, [ebp+var_4]
.text:000014AC                 jnz     short loc_14B6
.text:000014AE                 mov     eax, [ebp+var_4]
.text:000014B1                 jmp     loc_155A
.text:000014B6 ; ---------------------------------------------------------------------------
.text:000014B6
.text:000014B6 loc_14B6:                               ; CODE XREF: CRecordVector<NArchive::NTar::CSparseBlock>::operator=(CRecordVector<NArchive::NTar::CSparseBlock> const &)+20j
.text:000014B6                 mov     ecx, [ebp+arg_0]
.text:000014B9                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:000014BE                 mov     [ebp+var_8], eax
.text:000014C1                 mov     ecx, [ebp+var_4]
.text:000014C4                 mov     edx, [ebp+var_8]
.text:000014C7                 cmp     edx, [ecx+8]
.text:000014CA                 jbe     short loc_152D
.text:000014CC                 mov     eax, [ebp+var_4]
.text:000014CF                 mov     ecx, [eax]
.text:000014D1                 mov     [ebp+var_C], ecx
.text:000014D4                 mov     edx, [ebp+var_C]
.text:000014D7                 push    edx             ; void *
.text:000014D8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000014DD                 add     esp, 4
.text:000014E0                 mov     eax, [ebp+var_4]
.text:000014E3                 mov     dword ptr [eax+8], 0
.text:000014EA                 mov     ecx, [ebp+var_4]
.text:000014ED                 mov     dword ptr [ecx+4], 0
.text:000014F4                 mov     edx, [ebp+var_4]
.text:000014F7                 mov     dword ptr [edx], 0
.text:000014FD                 xor     ecx, ecx
.text:000014FF                 mov     eax, [ebp+var_8]
.text:00001502                 mov     edx, 10h
.text:00001507                 mul     edx
.text:00001509                 seto    cl
.text:0000150C                 neg     ecx
.text:0000150E                 or      ecx, eax
.text:00001510                 push    ecx             ; unsigned int
.text:00001511                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001516                 add     esp, 4
.text:00001519                 mov     [ebp+var_10], eax
.text:0000151C                 mov     eax, [ebp+var_4]
.text:0000151F                 mov     ecx, [ebp+var_10]
.text:00001522                 mov     [eax], ecx
.text:00001524                 mov     edx, [ebp+var_4]
.text:00001527                 mov     eax, [ebp+var_8]
.text:0000152A                 mov     [edx+8], eax
.text:0000152D
.text:0000152D loc_152D:                               ; CODE XREF: CRecordVector<NArchive::NTar::CSparseBlock>::operator=(CRecordVector<NArchive::NTar::CSparseBlock> const &)+3Ej
.text:0000152D                 mov     ecx, [ebp+var_4]
.text:00001530                 mov     edx, [ebp+var_8]
.text:00001533                 mov     [ecx+4], edx
.text:00001536                 cmp     [ebp+var_8], 0
.text:0000153A                 jz      short loc_1557
.text:0000153C                 mov     eax, [ebp+var_8]
.text:0000153F                 shl     eax, 4
.text:00001542                 push    eax             ; Size
.text:00001543                 mov     ecx, [ebp+arg_0]
.text:00001546                 mov     edx, [ecx]
.text:00001548                 push    edx             ; Src
.text:00001549                 mov     eax, [ebp+var_4]
.text:0000154C                 mov     ecx, [eax]
.text:0000154E                 push    ecx             ; Dst
.text:0000154F                 call    _memcpy
.text:00001554                 add     esp, 0Ch
.text:00001557
.text:00001557 loc_1557:                               ; CODE XREF: CRecordVector<NArchive::NTar::CSparseBlock>::operator=(CRecordVector<NArchive::NTar::CSparseBlock> const &)+AEj
.text:00001557                 mov     eax, [ebp+var_4]
.text:0000155A
.text:0000155A loc_155A:                               ; CODE XREF: CRecordVector<NArchive::NTar::CSparseBlock>::operator=(CRecordVector<NArchive::NTar::CSparseBlock> const &)+25j
.text:0000155A                 add     esp, 10h
.text:0000155D                 cmp     ebp, esp
.text:0000155F                 call    __RTC_CheckEsp
.text:00001564                 mov     esp, ebp
.text:00001566                 pop     ebp
.text:00001567                 retn    4
.text:00001567 ??4?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEAAV0@ABV0@@Z endp
.text:00001567
.text:00001567 ; ---------------------------------------------------------------------------
.text:0000156A                 align 4
.text:0000156A _text           ends
.text:0000156A
.text:0000156C ; ===========================================================================
.text:0000156C
.text:0000156C ; Segment type: Pure code
.text:0000156C ; Segment permissions: Read/Execute
.text:0000156C _text           segment para public 'CODE' use32
.text:0000156C                 assume cs:_text
.text:0000156C                 ;org 156Ch
.text:0000156C ; COMDAT (pick any)
.text:0000156C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000156C
.text:0000156C ; =============== S U B R O U T I N E =======================================
.text:0000156C
.text:0000156C ; Attributes: bp-based frame
.text:0000156C
.text:0000156C ; public: struct NArchive::NTar::CSparseBlock const & __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::operator[](unsigned int)const
.text:0000156C                 public ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z
.text:0000156C ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z proc near
.text:0000156C                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+374p
.text:0000156C                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+54Cp
.text:0000156C
.text:0000156C var_4           = dword ptr -4
.text:0000156C arg_0           = dword ptr  8
.text:0000156C
.text:0000156C                 push    ebp
.text:0000156D                 mov     ebp, esp
.text:0000156F                 push    ecx
.text:00001570                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001577                 mov     [ebp+var_4], ecx
.text:0000157A                 mov     eax, [ebp+arg_0]
.text:0000157D                 shl     eax, 4
.text:00001580                 mov     ecx, [ebp+var_4]
.text:00001583                 add     eax, [ecx]
.text:00001585                 mov     esp, ebp
.text:00001587                 pop     ebp
.text:00001588                 retn    4
.text:00001588 ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z endp
.text:00001588
.text:00001588 ; ---------------------------------------------------------------------------
.text:0000158B                 align 4
.text:0000158B _text           ends
.text:0000158B
.text:0000158C ; ===========================================================================
.text:0000158C
.text:0000158C ; Segment type: Pure code
.text:0000158C ; Segment permissions: Read/Execute
.text:0000158C _text           segment para public 'CODE' use32
.text:0000158C                 assume cs:_text
.text:0000158C                 ;org 158Ch
.text:0000158C ; COMDAT (pick any)
.text:0000158C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000158C
.text:0000158C ; =============== S U B R O U T I N E =======================================
.text:0000158C
.text:0000158C ; Attributes: bp-based frame
.text:0000158C
.text:0000158C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:0000158C                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:0000158C ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:0000158C                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteBytes(void const *,uint)+30p
.text:0000158C
.text:0000158C var_4           = dword ptr -4
.text:0000158C
.text:0000158C                 push    ebp
.text:0000158D                 mov     ebp, esp
.text:0000158F                 push    ecx
.text:00001590                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001597                 mov     [ebp+var_4], ecx
.text:0000159A                 mov     eax, [ebp+var_4]
.text:0000159D                 mov     eax, [eax]
.text:0000159F                 mov     esp, ebp
.text:000015A1                 pop     ebp
.text:000015A2                 retn
.text:000015A2 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:000015A2
.text:000015A2 _text           ends
.text:000015A2
UNDEF:000015B0 ; ===========================================================================
UNDEF:000015B0
UNDEF:000015B0 ; Segment type: Externs
UNDEF:000015B0 ; UNDEF
UNDEF:000015B0 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:000015B0                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:000015B0                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteBytes(void const *,uint)+36p
UNDEF:000015B4                 extrn __RTC_CheckEsp:near
UNDEF:000015B4                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteBytes(void const *,uint)+40p
UNDEF:000015B4                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+616p ...
UNDEF:000015B8                 extrn __RTC_Shutdown:near
UNDEF:000015B8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000015BC                 extrn __RTC_InitBase:near
UNDEF:000015BC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000015C0 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000015C0                 extrn _memcpy:near      ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+1F3p
UNDEF:000015C0                                         ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>(CRecordVector<NArchive::NTar::CSparseBlock> const &)+98p ...
UNDEF:000015C4 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:000015C4                 extrn _memset:near      ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+39p
UNDEF:000015C4                                         ; NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+17Ap ...
UNDEF:000015C8                 extrn ___security_cookie:near
UNDEF:000015C8                                         ; DATA XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+1Er
UNDEF:000015C8                                         ; NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+2Cr ...
UNDEF:000015CC ; __fastcall __security_check_cookie(x)
UNDEF:000015CC                 extrn @__security_check_cookie@4:near
UNDEF:000015CC                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+609p
UNDEF:000015CC                                         ; NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+2C3p ...
UNDEF:000015D0 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000015D0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000015D0                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeaderReal(NArchive::NTar::CItem const &)+5FCp
UNDEF:000015D0                                         ; NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+2ABp ...
UNDEF:000015D4                 extrn __aullshr:near    ; CODE XREF: NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+7Ep
UNDEF:000015D4                                         ; NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+D0p
UNDEF:000015D8                 extrn __allshl:near     ; CODE XREF: NArchive::NTar::WriteOctal_12(char *,unsigned __int64)+65p
UNDEF:000015D8                                         ; NArchive::NTar::WriteOctal_12_Signed(char *,__int64)+61p
UNDEF:000015DC                 extrn __allshr:near     ; CODE XREF: NArchive::NTar::WriteOctal_12_Signed(char *,__int64)+7Ap
UNDEF:000015E0 ; void __thiscall AString::SetFrom(AString *__hidden this, const char *, unsigned int)
UNDEF:000015E0                 extrn ?SetFrom@AString@@QAEXPBDI@Z:near
UNDEF:000015E0                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+24Cp
UNDEF:000015E0                                         ; NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+26Fp
UNDEF:000015E4 ; public: class AString & __thiscall AString::operator=(char const *)
UNDEF:000015E4                 extrn ??4AString@@QAEAAV0@PBD@Z:near
UNDEF:000015E4                                         ; CODE XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+9Cp
UNDEF:000015E8 ; char const * const NArchive::NTar::NFileHeader::kLongLink
UNDEF:000015E8                 extrn ?kLongLink@NFileHeader@NTar@NArchive@@3PBDB:near
UNDEF:000015E8                                         ; DATA XREF: NArchive::NTar::COutArchive::WriteHeader(NArchive::NTar::CItem const &)+8Fr
UNDEF:000015EC                 extrn ___CxxFrameHandler3:near
UNDEF:000015EC                                         ; CODE XREF: __ehhandler$?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z+23j
UNDEF:000015EC                                         ; __ehhandler$??0CItem@NTar@NArchive@@QAE@ABU012@@Z+16j ...
UNDEF:000015F0 ; public: __thiscall AString::AString(class AString const &)
UNDEF:000015F0                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:000015F0                                         ; CODE XREF: NArchive::NTar::CItem::CItem(NArchive::NTar::CItem const &)+34p
UNDEF:000015F0                                         ; NArchive::NTar::CItem::CItem(NArchive::NTar::CItem const &)+BFp ...
UNDEF:000015F4 ; void __cdecl operator delete(void *)
UNDEF:000015F4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:000015F4                                         ; CRecordVector<NArchive::NTar::CSparseBlock>::~CRecordVector<NArchive::NTar::CSparseBlock>(void)+23p ...
UNDEF:000015F8 ; public: class AString & __thiscall AString::operator=(class AString const &)
UNDEF:000015F8                 extrn ??4AString@@QAEAAV0@ABV0@@Z:near
UNDEF:000015F8                                         ; CODE XREF: NArchive::NTar::CItem::operator=(NArchive::NTar::CItem const &)+1Ep
UNDEF:000015F8                                         ; NArchive::NTar::CItem::operator=(NArchive::NTar::CItem const &)+A2p ...
UNDEF:000015FC ; void *__cdecl operator new(unsigned int)
UNDEF:000015FC                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>(CRecordVector<NArchive::NTar::CSparseBlock> const &)+60p
UNDEF:000015FC                                         ; CRecordVector<NArchive::NTar::CSparseBlock>::operator=(CRecordVector<NArchive::NTar::CSparseBlock> const &)+85p
UNDEF:000015FC
UNDEF:000015FC
UNDEF:000015FC                 end