.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : B8C74F9B92AF6B9D8B10500A81C12646
.text:00000000 ; Input CRC32 : 5810F9BD
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zAes.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; bool __thiscall NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo *this, const struct NCrypto::N7z::CKeyInfo *)
.text:00000000                 public ?IsEqualTo@CKeyInfo@N7z@NCrypto@@QBE_NABV123@@Z
.text:00000000 ?IsEqualTo@CKeyInfo@N7z@NCrypto@@QBE_NABV123@@Z proc near
.text:00000000                                         ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+55p
.text:00000000                                         ; NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &)+59p
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000014                 mov     [ebp+var_4], ecx
.text:00000017                 mov     eax, [ebp+var_4]
.text:0000001A                 mov     ecx, [ebp+arg_0]
.text:0000001D                 mov     edx, [eax+4]
.text:00000020                 cmp     edx, [ecx+4]
.text:00000023                 jnz     short loc_31
.text:00000025                 mov     eax, [ebp+var_4]
.text:00000028                 mov     ecx, [ebp+arg_0]
.text:0000002B                 mov     edx, [eax]
.text:0000002D                 cmp     edx, [ecx]
.text:0000002F                 jz      short loc_35
.text:00000031
.text:00000031 loc_31:                                 ; CODE XREF: NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &)+23j
.text:00000031                 xor     al, al
.text:00000033                 jmp     short loc_83
.text:00000035 ; ---------------------------------------------------------------------------
.text:00000035
.text:00000035 loc_35:                                 ; CODE XREF: NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &)+2Fj
.text:00000035                 mov     [ebp+var_8], 0
.text:0000003C                 jmp     short loc_47
.text:0000003E ; ---------------------------------------------------------------------------
.text:0000003E
.text:0000003E loc_3E:                                 ; CODE XREF: NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &):loc_6Ej
.text:0000003E                                         ; DATA XREF: .xdata$x:__catchsym$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z$2o ...
.text:0000003E                 mov     eax, [ebp+var_8]
.text:00000041                 add     eax, 1
.text:00000044                 mov     [ebp+var_8], eax
.text:00000047
.text:00000047 loc_47:                                 ; CODE XREF: NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &)+3Cj
.text:00000047                 mov     ecx, [ebp+var_4]
.text:0000004A                 mov     edx, [ebp+var_8]
.text:0000004D                 cmp     edx, [ecx+4]
.text:00000050                 jnb     short loc_70
.text:00000052                 mov     eax, [ebp+var_4]
.text:00000055                 add     eax, [ebp+var_8]
.text:00000058                 movzx   ecx, byte ptr [eax+8]
.text:0000005C                 mov     edx, [ebp+arg_0]
.text:0000005F                 add     edx, [ebp+var_8]
.text:00000062                 movzx   eax, byte ptr [edx+8]
.text:00000066                 cmp     ecx, eax
.text:00000068                 jz      short loc_6E
.text:0000006A                 xor     al, al
.text:0000006C                 jmp     short loc_83
.text:0000006E ; ---------------------------------------------------------------------------
.text:0000006E
.text:0000006E loc_6E:                                 ; CODE XREF: NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &)+68j
.text:0000006E                 jmp     short loc_3E
.text:00000070 ; ---------------------------------------------------------------------------
.text:00000070
.text:00000070 loc_70:                                 ; CODE XREF: NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &)+50j
.text:00000070                 mov     ecx, [ebp+arg_0]
.text:00000073
.text:00000073 loc_73:                                 ; DATA XREF: .rdata$r:000018C8o
.text:00000073                 add     ecx, 18h
.text:00000076                 push    ecx
.text:00000077
.text:00000077 loc_77:                                 ; DATA XREF: .rdata$r:00001960o
.text:00000077                 mov     edx, [ebp+var_4]
.text:0000007A                 add     edx, 18h
.text:0000007D                 push    edx
.text:0000007E                 call    ??$?8E@@YG_NABV?$CBuffer@E@@0@Z ; operator==<uchar>(CBuffer<uchar> const &,CBuffer<uchar> const &)
.text:00000083
.text:00000083 loc_83:                                 ; CODE XREF: NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &)+33j
.text:00000083                                         ; NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &)+6Cj
.text:00000083                 add     esp, 8
.text:00000086                 cmp     ebp, esp
.text:00000088                 call    __RTC_CheckEsp
.text:0000008D                 mov     esp, ebp
.text:0000008F                 pop     ebp
.text:00000090                 retn    4
.text:00000090 ?IsEqualTo@CKeyInfo@N7z@NCrypto@@QBE_NABV123@@Z endp
.text:00000090
.text:00000090 ; ---------------------------------------------------------------------------
.text:00000093                 align 10h
.text:000000A0
.text:000000A0 ; =============== S U B R O U T I N E =======================================
.text:000000A0
.text:000000A0 ; Attributes: bp-based frame
.text:000000A0
.text:000000A0 ; void __thiscall NCrypto::N7z::CKeyInfo::CalcKey(NCrypto::N7z::CKeyInfo *__hidden this)
.text:000000A0                 public ?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ
.text:000000A0 ?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ proc near
.text:000000A0                                         ; CODE XREF: NCrypto::N7z::CBase::PrepareKey(void)+8Cp
.text:000000A0
.text:000000A0 var_B4          = byte ptr -0B4h
.text:000000A0 var_B1          = byte ptr -0B1h
.text:000000A0 var_B0          = dword ptr -0B0h
.text:000000A0 var_AC          = dword ptr -0ACh
.text:000000A0 var_A8          = dword ptr -0A8h
.text:000000A0 var_A4          = dword ptr -0A4h
.text:000000A0 var_A0          = dword ptr -0A0h
.text:000000A0 var_98          = byte ptr -98h
.text:000000A0 var_28          = byte ptr -28h
.text:000000A0 var_20          = dword ptr -20h
.text:000000A0 var_1C          = dword ptr -1Ch
.text:000000A0 var_18          = dword ptr -18h
.text:000000A0 var_14          = dword ptr -14h
.text:000000A0 var_10          = dword ptr -10h
.text:000000A0 var_C           = dword ptr -0Ch
.text:000000A0 var_4           = dword ptr -4
.text:000000A0
.text:000000A0                 push    ebp
.text:000000A1                 mov     ebp, esp
.text:000000A3                 push    0FFFFFFFFh
.text:000000A5                 push    offset __ehhandler$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ
.text:000000AA                 mov     eax, large fs:0
.text:000000B0                 push    eax
.text:000000B1                 sub     esp, 0A8h
.text:000000B7                 push    esi
.text:000000B8                 push    edi
.text:000000B9                 push    ecx
.text:000000BA                 lea     edi, [ebp+var_B4]
.text:000000C0                 mov     ecx, 2Ah ; '*'
.text:000000C5                 mov     eax, 0CCCCCCCCh
.text:000000CA                 rep stosd
.text:000000CC                 pop     ecx
.text:000000CD                 mov     eax, dword ptr ds:___security_cookie
.text:000000D2                 xor     eax, ebp
.text:000000D4                 mov     [ebp+var_10], eax
.text:000000D7                 push    eax
.text:000000D8                 lea     eax, [ebp+var_C]
.text:000000DB                 mov     large fs:0, eax
.text:000000E1                 mov     [ebp+var_14], ecx
.text:000000E4                 mov     eax, [ebp+var_14]
.text:000000E7                 cmp     dword ptr [eax], 3Fh ; '?'
.text:000000EA                 jnz     loc_190
.text:000000F0                 mov     [ebp+var_18], 0
.text:000000F7                 jmp     short loc_102
.text:000000F9 ; ---------------------------------------------------------------------------
.text:000000F9
.text:000000F9 loc_F9:                                 ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+7Fj
.text:000000F9                 mov     ecx, [ebp+var_18]
.text:000000FC                 add     ecx, 1
.text:000000FF                 mov     [ebp+var_18], ecx
.text:00000102
.text:00000102 loc_102:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+57j
.text:00000102                 mov     edx, [ebp+var_14]
.text:00000105                 mov     eax, [ebp+var_18]
.text:00000108                 cmp     eax, [edx+4]
.text:0000010B                 jnb     short loc_121
.text:0000010D                 mov     ecx, [ebp+var_14]
.text:00000110                 add     ecx, [ebp+var_18]
.text:00000113                 mov     edx, [ebp+var_14]
.text:00000116                 add     edx, [ebp+var_18]
.text:00000119                 mov     al, [edx+8]
.text:0000011C                 mov     [ecx+20h], al
.text:0000011F                 jmp     short loc_F9
.text:00000121 ; ---------------------------------------------------------------------------
.text:00000121
.text:00000121 loc_121:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+6Bj
.text:00000121                 mov     [ebp+var_1C], 0
.text:00000128                 jmp     short loc_133
.text:0000012A ; ---------------------------------------------------------------------------
.text:0000012A
.text:0000012A loc_12A:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+CCj
.text:0000012A                 mov     ecx, [ebp+var_1C]
.text:0000012D                 add     ecx, 1
.text:00000130                 mov     [ebp+var_1C], ecx
.text:00000133
.text:00000133 loc_133:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+88j
.text:00000133                 mov     ecx, [ebp+var_14]
.text:00000136                 add     ecx, 18h
.text:00000139                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000013E                 cmp     [ebp+var_1C], eax
.text:00000141                 jnb     short loc_16E
.text:00000143                 cmp     [ebp+var_18], 20h ; ' '
.text:00000147                 jnb     short loc_16E
.text:00000149                 mov     ecx, [ebp+var_14]
.text:0000014C                 add     ecx, 18h
.text:0000014F                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000154                 mov     edx, [ebp+var_14]
.text:00000157                 add     edx, [ebp+var_18]
.text:0000015A                 mov     ecx, [ebp+var_1C]
.text:0000015D                 mov     al, [eax+ecx]
.text:00000160                 mov     [edx+20h], al
.text:00000163                 mov     ecx, [ebp+var_18]
.text:00000166                 add     ecx, 1
.text:00000169                 mov     [ebp+var_18], ecx
.text:0000016C                 jmp     short loc_12A
.text:0000016E ; ---------------------------------------------------------------------------
.text:0000016E
.text:0000016E loc_16E:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+A1j
.text:0000016E                                         ; NCrypto::N7z::CKeyInfo::CalcKey(void)+A7j
.text:0000016E                 jmp     short loc_179
.text:00000170 ; ---------------------------------------------------------------------------
.text:00000170
.text:00000170 loc_170:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+E9j
.text:00000170                 mov     edx, [ebp+var_18]
.text:00000173                 add     edx, 1
.text:00000176                 mov     [ebp+var_18], edx
.text:00000179
.text:00000179 loc_179:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void):loc_16Ej
.text:00000179                 cmp     [ebp+var_18], 20h ; ' '
.text:0000017D                 jnb     short loc_18B
.text:0000017F                 mov     eax, [ebp+var_14]
.text:00000182                 add     eax, [ebp+var_18]
.text:00000185                 mov     byte ptr [eax+20h], 0
.text:00000189                 jmp     short loc_170
.text:0000018B ; ---------------------------------------------------------------------------
.text:0000018B
.text:0000018B loc_18B:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+DDj
.text:0000018B                 jmp     loc_352
.text:00000190 ; ---------------------------------------------------------------------------
.text:00000190
.text:00000190 loc_190:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+4Aj
.text:00000190                 mov     ecx, [ebp+var_14]
.text:00000193                 mov     esi, [ecx+4]
.text:00000196                 mov     ecx, [ebp+var_14]
.text:00000199                 add     ecx, 18h
.text:0000019C                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000001A1                 lea     edx, [esi+eax+8]
.text:000001A5                 mov     [ebp+var_20], edx
.text:000001A8                 mov     eax, [ebp+var_20]
.text:000001AB                 push    eax
.text:000001AC                 lea     ecx, [ebp+var_28]
.text:000001AF                 call    ??0?$CObjArray@E@@QAE@I@Z ; CObjArray<uchar>::CObjArray<uchar>(uint)
.text:000001B4                 mov     [ebp+var_4], 0
.text:000001BB                 mov     ecx, [ebp+var_14]
.text:000001BE                 mov     edx, [ecx+4]
.text:000001C1                 push    edx             ; Size
.text:000001C2                 mov     eax, [ebp+var_14]
.text:000001C5                 add     eax, 8
.text:000001C8                 push    eax             ; Src
.text:000001C9                 lea     ecx, [ebp+var_28]
.text:000001CC                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:000001D1                 push    eax             ; Dst
.text:000001D2                 call    _memcpy
.text:000001D7                 add     esp, 0Ch
.text:000001DA                 mov     ecx, [ebp+var_14]
.text:000001DD                 add     ecx, 18h
.text:000001E0                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000001E5                 push    eax             ; Size
.text:000001E6                 mov     ecx, [ebp+var_14]
.text:000001E9                 add     ecx, 18h
.text:000001EC                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000001F1                 push    eax             ; Src
.text:000001F2                 lea     ecx, [ebp+var_28]
.text:000001F5                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:000001FA                 mov     ecx, [ebp+var_14]
.text:000001FD                 add     eax, [ecx+4]
.text:00000200                 push    eax             ; Dst
.text:00000201                 call    _memcpy
.text:00000206                 add     esp, 0Ch
.text:00000209                 lea     edx, [ebp+var_98]
.text:0000020F                 push    edx
.text:00000210                 call    _Sha256_Init@4  ; Sha256_Init(x)
.text:00000215                 lea     ecx, [ebp+var_28]
.text:00000218                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:0000021D                 mov     esi, eax
.text:0000021F                 mov     eax, [ebp+var_14]
.text:00000222                 add     esi, [eax+4]
.text:00000225                 mov     ecx, [ebp+var_14]
.text:00000228                 add     ecx, 18h
.text:0000022B                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000230                 add     esi, eax
.text:00000232                 mov     [ebp+var_A0], esi
.text:00000238                 mov     [ebp+var_A4], 0
.text:00000242                 jmp     short loc_253
.text:00000244 ; ---------------------------------------------------------------------------
.text:00000244
.text:00000244 loc_244:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+1CBj
.text:00000244                 mov     ecx, [ebp+var_A4]
.text:0000024A                 add     ecx, 1
.text:0000024D                 mov     [ebp+var_A4], ecx
.text:00000253
.text:00000253 loc_253:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+1A2j
.text:00000253                 cmp     [ebp+var_A4], 8
.text:0000025A                 jnb     short loc_26D
.text:0000025C                 mov     edx, [ebp+var_A0]
.text:00000262                 add     edx, [ebp+var_A4]
.text:00000268                 mov     byte ptr [edx], 0
.text:0000026B                 jmp     short loc_244
.text:0000026D ; ---------------------------------------------------------------------------
.text:0000026D
.text:0000026D loc_26D:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+1BAj
.text:0000026D                 mov     ecx, [ebp+var_14]
.text:00000270                 mov     eax, 1
.text:00000275                 xor     edx, edx
.text:00000277                 mov     ecx, [ecx]
.text:00000279                 call    __allshl
.text:0000027E                 mov     [ebp+var_AC], eax
.text:00000284                 mov     [ebp+var_A8], edx
.text:0000028A
.text:0000028A loc_28A:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+28Aj
.text:0000028A                 mov     edx, [ebp+var_20]
.text:0000028D                 push    edx
.text:0000028E                 lea     ecx, [ebp+var_28]
.text:00000291                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00000296                 push    eax
.text:00000297                 lea     eax, [ebp+var_98]
.text:0000029D                 push    eax
.text:0000029E                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:000002A3                 mov     [ebp+var_B0], 0
.text:000002AD                 jmp     short loc_2BE
.text:000002AF ; ---------------------------------------------------------------------------
.text:000002AF
.text:000002AF loc_2AF:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void):loc_2FEj
.text:000002AF                 mov     ecx, [ebp+var_B0]
.text:000002B5                 add     ecx, 1
.text:000002B8                 mov     [ebp+var_B0], ecx
.text:000002BE
.text:000002BE loc_2BE:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+20Dj
.text:000002BE                 cmp     [ebp+var_B0], 8
.text:000002C5                 jnb     short loc_300
.text:000002C7                 mov     edx, [ebp+var_A0]
.text:000002CD                 add     edx, [ebp+var_B0]
.text:000002D3                 mov     al, [edx]
.text:000002D5                 add     al, 1
.text:000002D7                 mov     [ebp+var_B1], al
.text:000002DD                 mov     ecx, [ebp+var_A0]
.text:000002E3                 add     ecx, [ebp+var_B0]
.text:000002E9                 mov     dl, [ebp+var_B1]
.text:000002EF                 mov     [ecx], dl
.text:000002F1                 movzx   eax, [ebp+var_B1]
.text:000002F8                 test    eax, eax
.text:000002FA                 jz      short loc_2FE
.text:000002FC                 jmp     short loc_300
.text:000002FE ; ---------------------------------------------------------------------------
.text:000002FE
.text:000002FE loc_2FE:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+25Aj
.text:000002FE                 jmp     short loc_2AF
.text:00000300 ; ---------------------------------------------------------------------------
.text:00000300
.text:00000300 loc_300:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+225j
.text:00000300                                         ; NCrypto::N7z::CKeyInfo::CalcKey(void)+25Cj
.text:00000300                 mov     ecx, [ebp+var_AC]
.text:00000306                 sub     ecx, 1
.text:00000309                 mov     edx, [ebp+var_A8]
.text:0000030F                 sbb     edx, 0
.text:00000312                 mov     [ebp+var_AC], ecx
.text:00000318                 mov     [ebp+var_A8], edx
.text:0000031E                 mov     eax, [ebp+var_AC]
.text:00000324                 or      eax, [ebp+var_A8]
.text:0000032A                 jnz     loc_28A
.text:00000330                 mov     ecx, [ebp+var_14]
.text:00000333                 add     ecx, 20h ; ' '
.text:00000336                 push    ecx
.text:00000337                 lea     edx, [ebp+var_98]
.text:0000033D                 push    edx
.text:0000033E                 call    _Sha256_Final@8 ; Sha256_Final(x,x)
.text:00000343                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000034A                 lea     ecx, [ebp+var_28]
.text:0000034D                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00000352
.text:00000352 loc_352:                                ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void):loc_18Bj
.text:00000352                 push    edx
.text:00000353                 mov     ecx, ebp
.text:00000355                 push    eax
.text:00000356                 lea     edx, $LN29
.text:0000035C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000361                 pop     eax
.text:00000362                 pop     edx
.text:00000363                 mov     ecx, [ebp+var_C]
.text:00000366                 mov     large fs:0, ecx
.text:0000036D                 pop     ecx
.text:0000036E                 pop     edi
.text:0000036F                 pop     esi
.text:00000370                 mov     ecx, [ebp+var_10]
.text:00000373                 xor     ecx, ebp
.text:00000375                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000037A                 add     esp, 0B4h
.text:00000380                 cmp     ebp, esp
.text:00000382                 call    __RTC_CheckEsp
.text:00000387                 mov     esp, ebp
.text:00000389                 pop     ebp
.text:0000038A                 retn
.text:0000038A ?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ endp
.text:0000038A
.text:0000038A ; ---------------------------------------------------------------------------
.text:0000038B                 align 4
.text:0000038C $LN29           dd 2                    ; DATA XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+2B6o
.text:00000390                 dd offset $LN28
.text:00000394 $LN28           dd 0FFFFFFD8h, 4        ; DATA XREF: .text:00000390o
.text:0000039C                 dd offset $LN25
.text:000003A0                 dd 0FFFFFF68h, 68h
.text:000003A8                 dd offset $LN26
.text:000003AC $LN26           dd 616873h              ; DATA XREF: .text:000003A8o
.text:000003B0 $LN25           dd 667562h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:0000039Co
.text:000003C0
.text:000003C0 ; =============== S U B R O U T I N E =======================================
.text:000003C0
.text:000003C0 ; Attributes: bp-based frame
.text:000003C0
.text:000003C0 ; bool __thiscall NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfoCache *this, struct NCrypto::N7z::CKeyInfo *)
.text:000003C0                 public ?GetKey@CKeyInfoCache@N7z@NCrypto@@QAE_NAAVCKeyInfo@23@@Z
.text:000003C0 ?GetKey@CKeyInfoCache@N7z@NCrypto@@QAE_NAAVCKeyInfo@23@@Z proc near
.text:000003C0                                         ; CODE XREF: NCrypto::N7z::CBase::PrepareKey(void)+5Ep
.text:000003C0                                         ; NCrypto::N7z::CBase::PrepareKey(void)+76p
.text:000003C0
.text:000003C0 var_10          = dword ptr -10h
.text:000003C0 var_C           = dword ptr -0Ch
.text:000003C0 var_8           = dword ptr -8
.text:000003C0 var_4           = dword ptr -4
.text:000003C0 arg_0           = dword ptr  8
.text:000003C0
.text:000003C0                 push    ebp
.text:000003C1                 mov     ebp, esp
.text:000003C3                 sub     esp, 10h
.text:000003C6                 mov     eax, 0CCCCCCCCh
.text:000003CB                 mov     [ebp+var_10], eax
.text:000003CE                 mov     [ebp+var_C], eax
.text:000003D1                 mov     [ebp+var_8], eax
.text:000003D4                 mov     [ebp+var_4], eax
.text:000003D7                 mov     [ebp+var_4], ecx
.text:000003DA                 mov     [ebp+var_8], 0
.text:000003E1                 jmp     short loc_3EC
.text:000003E3 ; ---------------------------------------------------------------------------
.text:000003E3
.text:000003E3 loc_3E3:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &):loc_466j
.text:000003E3                 mov     eax, [ebp+var_8]
.text:000003E6                 add     eax, 1
.text:000003E9                 mov     [ebp+var_8], eax
.text:000003EC
.text:000003EC loc_3EC:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+21j
.text:000003EC                 mov     ecx, [ebp+var_4]
.text:000003EF                 add     ecx, 4
.text:000003F2                 call    ?Size@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QBEIXZ ; CObjectVector<NCrypto::N7z::CKeyInfo>::Size(void)
.text:000003F7                 cmp     [ebp+var_8], eax
.text:000003FA                 jnb     short loc_46B
.text:000003FC                 mov     ecx, [ebp+var_8]
.text:000003FF                 push    ecx
.text:00000400                 mov     ecx, [ebp+var_4]
.text:00000403                 add     ecx, 4
.text:00000406                 call    ??A?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEAAVCKeyInfo@N7z@NCrypto@@I@Z ; CObjectVector<NCrypto::N7z::CKeyInfo>::operator[](uint)
.text:0000040B                 mov     [ebp+var_C], eax
.text:0000040E                 mov     edx, [ebp+var_C]
.text:00000411                 push    edx             ; struct NCrypto::N7z::CKeyInfo *
.text:00000412                 mov     ecx, [ebp+arg_0] ; this
.text:00000415                 call    ?IsEqualTo@CKeyInfo@N7z@NCrypto@@QBE_NABV123@@Z ; NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &)
.text:0000041A                 movzx   eax, al
.text:0000041D                 test    eax, eax
.text:0000041F                 jz      short loc_466
.text:00000421                 mov     [ebp+var_10], 0
.text:00000428                 jmp     short loc_433
.text:0000042A ; ---------------------------------------------------------------------------
.text:0000042A
.text:0000042A loc_42A:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+8Bj
.text:0000042A                 mov     ecx, [ebp+var_10]
.text:0000042D                 add     ecx, 1
.text:00000430                 mov     [ebp+var_10], ecx
.text:00000433
.text:00000433 loc_433:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+68j
.text:00000433                 cmp     [ebp+var_10], 20h ; ' '
.text:00000437                 jnb     short loc_44D
.text:00000439                 mov     edx, [ebp+arg_0]
.text:0000043C                 add     edx, [ebp+var_10]
.text:0000043F                 mov     eax, [ebp+var_C]
.text:00000442                 add     eax, [ebp+var_10]
.text:00000445                 mov     cl, [eax+20h]
.text:00000448                 mov     [edx+20h], cl
.text:0000044B                 jmp     short loc_42A
.text:0000044D ; ---------------------------------------------------------------------------
.text:0000044D
.text:0000044D loc_44D:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+77j
.text:0000044D                 cmp     [ebp+var_8], 0
.text:00000451                 jz      short loc_462
.text:00000453                 mov     edx, [ebp+var_8]
.text:00000456                 push    edx
.text:00000457                 mov     ecx, [ebp+var_4]
.text:0000045A                 add     ecx, 4
.text:0000045D                 call    ?MoveToFront@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXI@Z ; CObjectVector<NCrypto::N7z::CKeyInfo>::MoveToFront(uint)
.text:00000462
.text:00000462 loc_462:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+91j
.text:00000462                 mov     al, 1
.text:00000464                 jmp     short loc_46D
.text:00000466 ; ---------------------------------------------------------------------------
.text:00000466
.text:00000466 loc_466:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+5Fj
.text:00000466                 jmp     loc_3E3
.text:0000046B ; ---------------------------------------------------------------------------
.text:0000046B
.text:0000046B loc_46B:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+3Aj
.text:0000046B                 xor     al, al
.text:0000046D
.text:0000046D loc_46D:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+A4j
.text:0000046D                 add     esp, 10h
.text:00000470                 cmp     ebp, esp
.text:00000472                 call    __RTC_CheckEsp
.text:00000477                 mov     esp, ebp
.text:00000479                 pop     ebp
.text:0000047A                 retn    4
.text:0000047A ?GetKey@CKeyInfoCache@N7z@NCrypto@@QAE_NAAVCKeyInfo@23@@Z endp
.text:0000047A
.text:0000047A ; ---------------------------------------------------------------------------
.text:0000047D                 align 10h
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 ; void __thiscall NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfoCache *this, const struct NCrypto::N7z::CKeyInfo *)
.text:00000480                 public ?FindAndAdd@CKeyInfoCache@N7z@NCrypto@@QAEXABVCKeyInfo@23@@Z
.text:00000480 ?FindAndAdd@CKeyInfoCache@N7z@NCrypto@@QAEXABVCKeyInfo@23@@Z proc near
.text:00000480                                         ; CODE XREF: NCrypto::N7z::CBase::PrepareKey(void)+B4p
.text:00000480
.text:00000480 var_C           = dword ptr -0Ch
.text:00000480 var_8           = dword ptr -8
.text:00000480 var_4           = dword ptr -4
.text:00000480 arg_0           = dword ptr  8
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 sub     esp, 0Ch
.text:00000486                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000048D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000494                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000049B                 mov     [ebp+var_4], ecx
.text:0000049E                 mov     [ebp+var_8], 0
.text:000004A5                 jmp     short loc_4B0
.text:000004A7 ; ---------------------------------------------------------------------------
.text:000004A7
.text:000004A7 loc_4A7:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &):loc_4FCj
.text:000004A7                 mov     eax, [ebp+var_8]
.text:000004AA                 add     eax, 1
.text:000004AD                 mov     [ebp+var_8], eax
.text:000004B0
.text:000004B0 loc_4B0:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &)+25j
.text:000004B0                 mov     ecx, [ebp+var_4]
.text:000004B3                 add     ecx, 4
.text:000004B6                 call    ?Size@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QBEIXZ ; CObjectVector<NCrypto::N7z::CKeyInfo>::Size(void)
.text:000004BB                 cmp     [ebp+var_8], eax
.text:000004BE                 jnb     short loc_4FE
.text:000004C0                 mov     ecx, [ebp+var_8]
.text:000004C3                 push    ecx
.text:000004C4                 mov     ecx, [ebp+var_4]
.text:000004C7                 add     ecx, 4
.text:000004CA                 call    ??A?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEAAVCKeyInfo@N7z@NCrypto@@I@Z ; CObjectVector<NCrypto::N7z::CKeyInfo>::operator[](uint)
.text:000004CF                 mov     [ebp+var_C], eax
.text:000004D2                 mov     edx, [ebp+var_C]
.text:000004D5                 push    edx             ; struct NCrypto::N7z::CKeyInfo *
.text:000004D6                 mov     ecx, [ebp+arg_0] ; this
.text:000004D9                 call    ?IsEqualTo@CKeyInfo@N7z@NCrypto@@QBE_NABV123@@Z ; NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &)
.text:000004DE                 movzx   eax, al
.text:000004E1                 test    eax, eax
.text:000004E3                 jz      short loc_4FC
.text:000004E5                 cmp     [ebp+var_8], 0
.text:000004E9                 jz      short loc_4FA
.text:000004EB                 mov     ecx, [ebp+var_8]
.text:000004EE                 push    ecx
.text:000004EF                 mov     ecx, [ebp+var_4]
.text:000004F2                 add     ecx, 4
.text:000004F5                 call    ?MoveToFront@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXI@Z ; CObjectVector<NCrypto::N7z::CKeyInfo>::MoveToFront(uint)
.text:000004FA
.text:000004FA loc_4FA:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &)+69j
.text:000004FA                 jmp     short loc_50A
.text:000004FC ; ---------------------------------------------------------------------------
.text:000004FC
.text:000004FC loc_4FC:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &)+63j
.text:000004FC                 jmp     short loc_4A7
.text:000004FE ; ---------------------------------------------------------------------------
.text:000004FE
.text:000004FE loc_4FE:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &)+3Ej
.text:000004FE                 mov     edx, [ebp+arg_0]
.text:00000501                 push    edx             ; struct NCrypto::N7z::CKeyInfo *
.text:00000502                 mov     ecx, [ebp+var_4] ; this
.text:00000505                 call    ?Add@CKeyInfoCache@N7z@NCrypto@@QAEXABVCKeyInfo@23@@Z ; NCrypto::N7z::CKeyInfoCache::Add(NCrypto::N7z::CKeyInfo const &)
.text:0000050A
.text:0000050A loc_50A:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &):loc_4FAj
.text:0000050A                 add     esp, 0Ch
.text:0000050D                 cmp     ebp, esp
.text:0000050F                 call    __RTC_CheckEsp
.text:00000514                 mov     esp, ebp
.text:00000516                 pop     ebp
.text:00000517                 retn    4
.text:00000517 ?FindAndAdd@CKeyInfoCache@N7z@NCrypto@@QAEXABVCKeyInfo@23@@Z endp
.text:00000517
.text:00000517 ; ---------------------------------------------------------------------------
.text:0000051A                 align 10h
.text:00000520
.text:00000520 ; =============== S U B R O U T I N E =======================================
.text:00000520
.text:00000520 ; Attributes: bp-based frame
.text:00000520
.text:00000520 ; void __thiscall NCrypto::N7z::CKeyInfoCache::Add(NCrypto::N7z::CKeyInfoCache *this, const struct NCrypto::N7z::CKeyInfo *)
.text:00000520                 public ?Add@CKeyInfoCache@N7z@NCrypto@@QAEXABVCKeyInfo@23@@Z
.text:00000520 ?Add@CKeyInfoCache@N7z@NCrypto@@QAEXABVCKeyInfo@23@@Z proc near
.text:00000520                                         ; CODE XREF: NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &)+85p
.text:00000520                                         ; NCrypto::N7z::CBase::PrepareKey(void)+9Bp
.text:00000520
.text:00000520 var_4           = dword ptr -4
.text:00000520 arg_0           = dword ptr  8
.text:00000520
.text:00000520                 push    ebp
.text:00000521                 mov     ebp, esp
.text:00000523                 push    ecx
.text:00000524                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000052B                 mov     [ebp+var_4], ecx
.text:0000052E                 mov     ecx, [ebp+var_4]
.text:00000531                 add     ecx, 4
.text:00000534                 call    ?Size@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QBEIXZ ; CObjectVector<NCrypto::N7z::CKeyInfo>::Size(void)
.text:00000539                 mov     ecx, [ebp+var_4]
.text:0000053C                 cmp     eax, [ecx]
.text:0000053E                 jb      short loc_54B
.text:00000540                 mov     ecx, [ebp+var_4]
.text:00000543                 add     ecx, 4
.text:00000546                 call    ?DeleteBack@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXXZ ; CObjectVector<NCrypto::N7z::CKeyInfo>::DeleteBack(void)
.text:0000054B
.text:0000054B loc_54B:                                ; CODE XREF: NCrypto::N7z::CKeyInfoCache::Add(NCrypto::N7z::CKeyInfo const &)+1Ej
.text:0000054B                 mov     edx, [ebp+arg_0]
.text:0000054E                 push    edx             ; struct NCrypto::N7z::CKeyInfo *
.text:0000054F                 push    0               ; int
.text:00000551                 mov     ecx, [ebp+var_4]
.text:00000554                 add     ecx, 4
.text:00000557                 call    ?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z ; CObjectVector<NCrypto::N7z::CKeyInfo>::Insert(uint,NCrypto::N7z::CKeyInfo const &)
.text:0000055C                 add     esp, 4
.text:0000055F                 cmp     ebp, esp
.text:00000561                 call    __RTC_CheckEsp
.text:00000566                 mov     esp, ebp
.text:00000568                 pop     ebp
.text:00000569                 retn    4
.text:00000569 ?Add@CKeyInfoCache@N7z@NCrypto@@QAEXABVCKeyInfo@23@@Z endp
.text:00000569
.text:00000569 ; ---------------------------------------------------------------------------
.text:0000056C                 align 10h
.text:00000570
.text:00000570 ; =============== S U B R O U T I N E =======================================
.text:00000570
.text:00000570 ; Attributes: bp-based frame
.text:00000570
.text:00000570 ; _DWORD __thiscall NCrypto::N7z::CBase::CBase(NCrypto::N7z::CBase *__hidden this)
.text:00000570                 public ??0CBase@N7z@NCrypto@@IAE@XZ
.text:00000570 ??0CBase@N7z@NCrypto@@IAE@XZ proc near  ; CODE XREF: NCrypto::N7z::CBaseCoder::CBaseCoder(void)+51p
.text:00000570
.text:00000570 var_14          = dword ptr -14h
.text:00000570 var_10          = dword ptr -10h
.text:00000570 var_C           = dword ptr -0Ch
.text:00000570 var_4           = dword ptr -4
.text:00000570
.text:00000570                 push    ebp
.text:00000571                 mov     ebp, esp
.text:00000573                 push    0FFFFFFFFh
.text:00000575                 push    offset __ehhandler$??0CBase@N7z@NCrypto@@IAE@XZ
.text:0000057A                 mov     eax, large fs:0
.text:00000580                 push    eax
.text:00000581                 sub     esp, 8
.text:00000584                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000058B                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000592                 mov     eax, dword ptr ds:___security_cookie
.text:00000597                 xor     eax, ebp
.text:00000599                 push    eax
.text:0000059A                 lea     eax, [ebp+var_C]
.text:0000059D                 mov     large fs:0, eax
.text:000005A3                 mov     [ebp+var_10], ecx
.text:000005A6                 push    10h             ; unsigned int
.text:000005A8                 mov     ecx, [ebp+var_10] ; this
.text:000005AB                 call    ??0CKeyInfoCache@N7z@NCrypto@@QAE@I@Z ; NCrypto::N7z::CKeyInfoCache::CKeyInfoCache(uint)
.text:000005B0                 mov     [ebp+var_4], 0
.text:000005B7                 mov     ecx, [ebp+var_10]
.text:000005BA                 add     ecx, 10h        ; this
.text:000005BD                 call    ??0CKeyInfo@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CKeyInfo::CKeyInfo(void)
.text:000005C2                 mov     eax, [ebp+var_10]
.text:000005C5                 mov     dword ptr [eax+60h], 0
.text:000005CC                 mov     [ebp+var_14], 0
.text:000005D3                 jmp     short loc_5DE
.text:000005D5 ; ---------------------------------------------------------------------------
.text:000005D5
.text:000005D5 loc_5D5:                                ; CODE XREF: NCrypto::N7z::CBase::CBase(void)+7Ej
.text:000005D5                 mov     ecx, [ebp+var_14]
.text:000005D8                 add     ecx, 1
.text:000005DB                 mov     [ebp+var_14], ecx
.text:000005DE
.text:000005DE loc_5DE:                                ; CODE XREF: NCrypto::N7z::CBase::CBase(void)+63j
.text:000005DE                 cmp     [ebp+var_14], 10h
.text:000005E2                 jnb     short loc_5F0
.text:000005E4                 mov     edx, [ebp+var_10]
.text:000005E7                 add     edx, [ebp+var_14]
.text:000005EA                 mov     byte ptr [edx+50h], 0
.text:000005EE                 jmp     short loc_5D5
.text:000005F0 ; ---------------------------------------------------------------------------
.text:000005F0
.text:000005F0 loc_5F0:                                ; CODE XREF: NCrypto::N7z::CBase::CBase(void)+72j
.text:000005F0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000005F7                 mov     eax, [ebp+var_10]
.text:000005FA                 mov     ecx, [ebp+var_C]
.text:000005FD                 mov     large fs:0, ecx
.text:00000604                 pop     ecx
.text:00000605                 add     esp, 14h
.text:00000608                 cmp     ebp, esp
.text:0000060A                 call    __RTC_CheckEsp
.text:0000060F                 mov     esp, ebp
.text:00000611                 pop     ebp
.text:00000612                 retn
.text:00000612 ??0CBase@N7z@NCrypto@@IAE@XZ endp
.text:00000612
.text:00000612 ; ---------------------------------------------------------------------------
.text:00000613                 align 10h
.text:00000620
.text:00000620 ; =============== S U B R O U T I N E =======================================
.text:00000620
.text:00000620 ; Attributes: bp-based frame
.text:00000620
.text:00000620 ; void __thiscall NCrypto::N7z::CBase::PrepareKey(NCrypto::N7z::CBase *__hidden this)
.text:00000620                 public ?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ
.text:00000620 ?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ proc near
.text:00000620                                         ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+48p
.text:00000620
.text:00000620 var_20          = dword ptr -20h
.text:00000620 var_1C          = dword ptr -1Ch
.text:00000620 var_18          = dword ptr -18h
.text:00000620 var_14          = dword ptr -14h
.text:00000620 var_10          = dword ptr -10h
.text:00000620 var_C           = dword ptr -0Ch
.text:00000620 var_4           = dword ptr -4
.text:00000620
.text:00000620                 push    ebp
.text:00000621                 mov     ebp, esp
.text:00000623                 push    0FFFFFFFFh
.text:00000625                 push    offset __ehhandler$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ
.text:0000062A                 mov     eax, large fs:0
.text:00000630                 push    eax
.text:00000631                 sub     esp, 14h
.text:00000634                 mov     eax, 0CCCCCCCCh
.text:00000639                 mov     [ebp+var_20], eax
.text:0000063C                 mov     [ebp+var_1C], eax
.text:0000063F                 mov     [ebp+var_18], eax
.text:00000642                 mov     [ebp+var_14], eax
.text:00000645                 mov     [ebp+var_10], eax
.text:00000648                 mov     eax, dword ptr ds:___security_cookie
.text:0000064D                 xor     eax, ebp
.text:0000064F                 push    eax
.text:00000650                 lea     eax, [ebp+var_C]
.text:00000653                 mov     large fs:0, eax
.text:00000659                 mov     [ebp+var_10], ecx
.text:0000065C                 push    offset _g_GlobalKeyCacheCriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000661                 lea     ecx, [ebp+var_18] ; this
.text:00000664                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00000669                 mov     [ebp+var_4], 0
.text:00000670                 mov     byte ptr [ebp+var_20+3], 0
.text:00000674                 mov     eax, [ebp+var_10]
.text:00000677                 add     eax, 10h
.text:0000067A                 push    eax             ; struct NCrypto::N7z::CKeyInfo *
.text:0000067B                 mov     ecx, [ebp+var_10] ; this
.text:0000067E                 call    ?GetKey@CKeyInfoCache@N7z@NCrypto@@QAE_NAAVCKeyInfo@23@@Z ; NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)
.text:00000683                 movzx   ecx, al
.text:00000686                 test    ecx, ecx
.text:00000688                 jnz     short loc_6C0
.text:0000068A                 mov     edx, [ebp+var_10]
.text:0000068D                 add     edx, 10h
.text:00000690                 push    edx             ; struct NCrypto::N7z::CKeyInfo *
.text:00000691                 mov     ecx, offset _g_GlobalKeyCache ; this
.text:00000696                 call    ?GetKey@CKeyInfoCache@N7z@NCrypto@@QAE_NAAVCKeyInfo@23@@Z ; NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)
.text:0000069B                 mov     byte ptr [ebp+var_20+3], al
.text:0000069E                 movzx   eax, byte ptr [ebp+var_20+3]
.text:000006A2                 test    eax, eax
.text:000006A4                 jnz     short loc_6B1
.text:000006A6                 mov     ecx, [ebp+var_10]
.text:000006A9                 add     ecx, 10h        ; this
.text:000006AC                 call    ?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ ; NCrypto::N7z::CKeyInfo::CalcKey(void)
.text:000006B1
.text:000006B1 loc_6B1:                                ; CODE XREF: NCrypto::N7z::CBase::PrepareKey(void)+84j
.text:000006B1                 mov     ecx, [ebp+var_10]
.text:000006B4                 add     ecx, 10h
.text:000006B7                 push    ecx             ; struct NCrypto::N7z::CKeyInfo *
.text:000006B8                 mov     ecx, [ebp+var_10] ; this
.text:000006BB                 call    ?Add@CKeyInfoCache@N7z@NCrypto@@QAEXABVCKeyInfo@23@@Z ; NCrypto::N7z::CKeyInfoCache::Add(NCrypto::N7z::CKeyInfo const &)
.text:000006C0
.text:000006C0 loc_6C0:                                ; CODE XREF: NCrypto::N7z::CBase::PrepareKey(void)+68j
.text:000006C0                 movzx   edx, byte ptr [ebp+var_20+3]
.text:000006C4                 test    edx, edx
.text:000006C6                 jnz     short loc_6D9
.text:000006C8                 mov     eax, [ebp+var_10]
.text:000006CB                 add     eax, 10h
.text:000006CE                 push    eax             ; struct NCrypto::N7z::CKeyInfo *
.text:000006CF                 mov     ecx, offset _g_GlobalKeyCache ; this
.text:000006D4                 call    ?FindAndAdd@CKeyInfoCache@N7z@NCrypto@@QAEXABVCKeyInfo@23@@Z ; NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &)
.text:000006D9
.text:000006D9 loc_6D9:                                ; CODE XREF: NCrypto::N7z::CBase::PrepareKey(void)+A6j
.text:000006D9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006E0                 lea     ecx, [ebp+var_18] ; this
.text:000006E3                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:000006E8                 push    edx
.text:000006E9                 mov     ecx, ebp
.text:000006EB                 push    eax
.text:000006EC                 lea     edx, $LN10
.text:000006F2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000006F7                 pop     eax
.text:000006F8                 pop     edx
.text:000006F9                 mov     ecx, [ebp+var_C]
.text:000006FC                 mov     large fs:0, ecx
.text:00000703                 pop     ecx
.text:00000704                 add     esp, 20h
.text:00000707                 cmp     ebp, esp
.text:00000709                 call    __RTC_CheckEsp
.text:0000070E                 mov     esp, ebp
.text:00000710                 pop     ebp
.text:00000711                 retn
.text:00000711 ?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ endp
.text:00000711
.text:00000711 ; ---------------------------------------------------------------------------
.text:00000712                 align 4
.text:00000714 $LN10           dd 1                    ; DATA XREF: NCrypto::N7z::CBase::PrepareKey(void)+CCo
.text:00000718                 dd offset $LN9
.text:0000071C $LN9            dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000718o
.text:00000724                 dd offset $LN7          ; "lock"
.text:00000728 $LN7            db 'lock',0             ; DATA XREF: .text:00000724o
.text:0000072D                 align 10h
.text:00000730
.text:00000730 ; =============== S U B R O U T I N E =======================================
.text:00000730
.text:00000730 ; Attributes: bp-based frame
.text:00000730
.text:00000730 ; __int32 __stdcall NCrypto::N7z::CEncoder::ResetInitVector(NCrypto::N7z::CEncoder *this)
.text:00000730                 public ?ResetInitVector@CEncoder@N7z@NCrypto@@UAGJXZ
.text:00000730 ?ResetInitVector@CEncoder@N7z@NCrypto@@UAGJXZ proc near
.text:00000730                                         ; DATA XREF: .rdata:000014C0o
.text:00000730
.text:00000730 var_4           = dword ptr -4
.text:00000730 this            = dword ptr  8
.text:00000730
.text:00000730                 push    ebp
.text:00000731                 mov     ebp, esp
.text:00000733                 push    ecx
.text:00000734                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000073B                 mov     [ebp+var_4], 0
.text:00000742                 jmp     short loc_74D
.text:00000744 ; ---------------------------------------------------------------------------
.text:00000744
.text:00000744 loc_744:                                ; CODE XREF: NCrypto::N7z::CEncoder::ResetInitVector(void)+2Dj
.text:00000744                 mov     eax, [ebp+var_4]
.text:00000747                 add     eax, 1
.text:0000074A                 mov     [ebp+var_4], eax
.text:0000074D
.text:0000074D loc_74D:                                ; CODE XREF: NCrypto::N7z::CEncoder::ResetInitVector(void)+12j
.text:0000074D                 cmp     [ebp+var_4], 10h
.text:00000751                 jnb     short loc_75F
.text:00000753                 mov     ecx, [ebp+this]
.text:00000756                 add     ecx, [ebp+var_4]
.text:00000759                 mov     byte ptr [ecx-1Ch], 0
.text:0000075D                 jmp     short loc_744
.text:0000075F ; ---------------------------------------------------------------------------
.text:0000075F
.text:0000075F loc_75F:                                ; CODE XREF: NCrypto::N7z::CEncoder::ResetInitVector(void)+21j
.text:0000075F                 mov     edx, [ebp+this]
.text:00000762                 mov     dword ptr [edx-0Ch], 8
.text:00000769                 mov     eax, [ebp+this]
.text:0000076C                 mov     ecx, [eax-0Ch]
.text:0000076F                 push    ecx             ; unsigned int
.text:00000770                 mov     edx, [ebp+this]
.text:00000773                 sub     edx, 1Ch
.text:00000776                 push    edx             ; unsigned __int8 *
.text:00000777                 mov     ecx, offset ?g_RandomGenerator@@3VCRandomGenerator@@A ; this
.text:0000077C                 call    ?Generate@CRandomGenerator@@QAEXPAEI@Z ; CRandomGenerator::Generate(uchar *,uint)
.text:00000781                 xor     eax, eax
.text:00000783                 add     esp, 4
.text:00000786                 cmp     ebp, esp
.text:00000788                 call    __RTC_CheckEsp
.text:0000078D                 mov     esp, ebp
.text:0000078F                 pop     ebp
.text:00000790                 retn    4
.text:00000790 ?ResetInitVector@CEncoder@N7z@NCrypto@@UAGJXZ endp
.text:00000790
.text:00000790 ; ---------------------------------------------------------------------------
.text:00000793                 align 10h
.text:000007A0
.text:000007A0 ; =============== S U B R O U T I N E =======================================
.text:000007A0
.text:000007A0 ; Attributes: bp-based frame
.text:000007A0
.text:000007A0 ; __int32 __stdcall NCrypto::N7z::CEncoder::WriteCoderProperties(NCrypto::N7z::CEncoder *this, struct ISequentialOutStream *)
.text:000007A0                 public ?WriteCoderProperties@CEncoder@N7z@NCrypto@@UAGJPAUISequentialOutStream@@@Z
.text:000007A0 ?WriteCoderProperties@CEncoder@N7z@NCrypto@@UAGJPAUISequentialOutStream@@@Z proc near
.text:000007A0                                         ; DATA XREF: .rdata:000014D4o
.text:000007A0
.text:000007A0 var_3C          = dword ptr -3Ch
.text:000007A0 var_38          = dword ptr -38h
.text:000007A0 var_34          = dword ptr -34h
.text:000007A0 var_2C          = byte ptr -2Ch
.text:000007A0 var_2B          = byte ptr -2Bh
.text:000007A0 Dst             = byte ptr -2Ah
.text:000007A0 var_4           = dword ptr -4
.text:000007A0 this            = dword ptr  8
.text:000007A0 arg_4           = dword ptr  0Ch
.text:000007A0
.text:000007A0                 push    ebp
.text:000007A1                 mov     ebp, esp
.text:000007A3                 sub     esp, 3Ch
.text:000007A6                 push    edi
.text:000007A7                 lea     edi, [ebp+var_3C]
.text:000007AA                 mov     ecx, 0Fh
.text:000007AF                 mov     eax, 0CCCCCCCCh
.text:000007B4                 rep stosd
.text:000007B6                 mov     eax, dword ptr ds:___security_cookie
.text:000007BB                 xor     eax, ebp
.text:000007BD                 mov     [ebp+var_4], eax
.text:000007C0                 mov     [ebp+var_34], 1
.text:000007C7                 mov     eax, [ebp+this]
.text:000007CA                 mov     ecx, [eax-54h]
.text:000007CD                 neg     ecx
.text:000007CF                 sbb     ecx, ecx
.text:000007D1                 and     ecx, 80h
.text:000007D7                 mov     edx, [ebp+this]
.text:000007DA                 or      ecx, [edx-58h]
.text:000007DD                 mov     eax, [ebp+this]
.text:000007E0                 mov     edx, [eax-8]
.text:000007E3                 neg     edx
.text:000007E5                 sbb     edx, edx
.text:000007E7                 and     edx, 40h
.text:000007EA                 or      ecx, edx
.text:000007EC                 mov     [ebp+var_2C], cl
.text:000007EF                 mov     eax, [ebp+this]
.text:000007F2                 cmp     dword ptr [eax-54h], 0
.text:000007F6                 jnz     short loc_805
.text:000007F8                 mov     ecx, [ebp+this]
.text:000007FB                 cmp     dword ptr [ecx-8], 0
.text:000007FF                 jz      loc_89D
.text:00000805
.text:00000805 loc_805:                                ; CODE XREF: NCrypto::N7z::CEncoder::WriteCoderProperties(ISequentialOutStream *)+56j
.text:00000805                 mov     edx, [ebp+this]
.text:00000808                 cmp     dword ptr [edx-54h], 0
.text:0000080C                 jnz     short loc_817
.text:0000080E                 mov     [ebp+var_38], 0
.text:00000815                 jmp     short loc_823
.text:00000817 ; ---------------------------------------------------------------------------
.text:00000817
.text:00000817 loc_817:                                ; CODE XREF: NCrypto::N7z::CEncoder::WriteCoderProperties(ISequentialOutStream *)+6Cj
.text:00000817                 mov     eax, [ebp+this]
.text:0000081A                 mov     ecx, [eax-54h]
.text:0000081D                 sub     ecx, 1
.text:00000820                 mov     [ebp+var_38], ecx
.text:00000823
.text:00000823 loc_823:                                ; CODE XREF: NCrypto::N7z::CEncoder::WriteCoderProperties(ISequentialOutStream *)+75j
.text:00000823                 mov     edx, [ebp+this]
.text:00000826                 cmp     dword ptr [edx-8], 0
.text:0000082A                 jnz     short loc_835
.text:0000082C                 mov     [ebp+var_3C], 0
.text:00000833                 jmp     short loc_841
.text:00000835 ; ---------------------------------------------------------------------------
.text:00000835
.text:00000835 loc_835:                                ; CODE XREF: NCrypto::N7z::CEncoder::WriteCoderProperties(ISequentialOutStream *)+8Aj
.text:00000835                 mov     eax, [ebp+this]
.text:00000838                 mov     ecx, [eax-8]
.text:0000083B                 sub     ecx, 1
.text:0000083E                 mov     [ebp+var_3C], ecx
.text:00000841
.text:00000841 loc_841:                                ; CODE XREF: NCrypto::N7z::CEncoder::WriteCoderProperties(ISequentialOutStream *)+93j
.text:00000841                 mov     edx, [ebp+var_38]
.text:00000844                 shl     edx, 4
.text:00000847                 or      edx, [ebp+var_3C]
.text:0000084A                 mov     [ebp+var_2B], dl
.text:0000084D                 mov     eax, [ebp+this]
.text:00000850                 mov     ecx, [eax-54h]
.text:00000853                 push    ecx             ; Size
.text:00000854                 mov     edx, [ebp+this]
.text:00000857                 sub     edx, 50h ; 'P'
.text:0000085A                 push    edx             ; Src
.text:0000085B                 lea     eax, [ebp+Dst]
.text:0000085E                 push    eax             ; Dst
.text:0000085F                 call    _memcpy
.text:00000864                 add     esp, 0Ch
.text:00000867                 mov     ecx, [ebp+this]
.text:0000086A                 mov     edx, [ecx-54h]
.text:0000086D                 add     edx, 2
.text:00000870                 mov     [ebp+var_34], edx
.text:00000873                 mov     eax, [ebp+this]
.text:00000876                 mov     ecx, [eax-8]
.text:00000879                 push    ecx             ; Size
.text:0000087A                 mov     edx, [ebp+this]
.text:0000087D                 sub     edx, 18h
.text:00000880                 push    edx             ; Src
.text:00000881                 mov     eax, [ebp+var_34]
.text:00000884                 lea     ecx, [ebp+eax+var_2C]
.text:00000888                 push    ecx             ; Dst
.text:00000889                 call    _memcpy
.text:0000088E                 add     esp, 0Ch
.text:00000891                 mov     edx, [ebp+this]
.text:00000894                 mov     eax, [ebp+var_34]
.text:00000897                 add     eax, [edx-8]
.text:0000089A                 mov     [ebp+var_34], eax
.text:0000089D
.text:0000089D loc_89D:                                ; CODE XREF: NCrypto::N7z::CEncoder::WriteCoderProperties(ISequentialOutStream *)+5Fj
.text:0000089D                 mov     ecx, [ebp+var_34]
.text:000008A0                 push    ecx             ; unsigned int
.text:000008A1                 lea     edx, [ebp+var_2C]
.text:000008A4                 push    edx             ; void *
.text:000008A5                 mov     eax, [ebp+arg_4]
.text:000008A8                 push    eax             ; struct ISequentialOutStream *
.text:000008A9                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:000008AE                 push    edx
.text:000008AF                 mov     ecx, ebp
.text:000008B1                 push    eax
.text:000008B2                 lea     edx, $LN11
.text:000008B8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008BD                 pop     eax
.text:000008BE                 pop     edx
.text:000008BF                 pop     edi
.text:000008C0                 mov     ecx, [ebp+var_4]
.text:000008C3                 xor     ecx, ebp
.text:000008C5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000008CA                 add     esp, 3Ch
.text:000008CD                 cmp     ebp, esp
.text:000008CF                 call    __RTC_CheckEsp
.text:000008D4                 mov     esp, ebp
.text:000008D6                 pop     ebp
.text:000008D7                 retn    8
.text:000008D7 ?WriteCoderProperties@CEncoder@N7z@NCrypto@@UAGJPAUISequentialOutStream@@@Z endp
.text:000008D7
.text:000008D7 ; ---------------------------------------------------------------------------
.text:000008DA                 align 4
.text:000008DC $LN11           dd 1                    ; DATA XREF: NCrypto::N7z::CEncoder::WriteCoderProperties(ISequentialOutStream *)+112o
.text:000008E0                 dd offset $LN10_0
.text:000008E4 $LN10_0         dd 0FFFFFFD4h, 22h      ; DATA XREF: .text:000008E0o
.text:000008EC                 dd offset $LN9_0        ; "props"
.text:000008F0 $LN9_0          db 'props',0            ; DATA XREF: .text:000008ECo
.text:000008F6                 align 10h
.text:00000900
.text:00000900 ; =============== S U B R O U T I N E =======================================
.text:00000900
.text:00000900 ; Attributes: bp-based frame
.text:00000900
.text:00000900 ; _DWORD __thiscall NCrypto::N7z::CEncoder::CEncoder(NCrypto::N7z::CEncoder *__hidden this)
.text:00000900                 public ??0CEncoder@N7z@NCrypto@@QAE@XZ
.text:00000900 ??0CEncoder@N7z@NCrypto@@QAE@XZ proc near
.text:00000900
.text:00000900 var_1C          = dword ptr -1Ch
.text:00000900 var_18          = dword ptr -18h
.text:00000900 var_14          = dword ptr -14h
.text:00000900 var_10          = dword ptr -10h
.text:00000900 var_C           = dword ptr -0Ch
.text:00000900 var_4           = dword ptr -4
.text:00000900
.text:00000900                 push    ebp
.text:00000901                 mov     ebp, esp
.text:00000903                 push    0FFFFFFFFh
.text:00000905                 push    offset __ehhandler$??0CEncoder@N7z@NCrypto@@QAE@XZ
.text:0000090A                 mov     eax, large fs:0
.text:00000910                 push    eax
.text:00000911                 sub     esp, 10h
.text:00000914                 mov     eax, 0CCCCCCCCh
.text:00000919                 mov     [ebp+var_1C], eax
.text:0000091C                 mov     [ebp+var_18], eax
.text:0000091F                 mov     [ebp+var_14], eax
.text:00000922                 mov     [ebp+var_10], eax
.text:00000925                 mov     eax, dword ptr ds:___security_cookie
.text:0000092A                 xor     eax, ebp
.text:0000092C                 push    eax
.text:0000092D                 lea     eax, [ebp+var_C]
.text:00000930                 mov     large fs:0, eax
.text:00000936                 mov     [ebp+var_10], ecx
.text:00000939                 mov     ecx, [ebp+var_10] ; this
.text:0000093C                 call    ??0CBaseCoder@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CBaseCoder::CBaseCoder(void)
.text:00000941                 mov     [ebp+var_4], 0
.text:00000948                 mov     ecx, [ebp+var_10]
.text:0000094B                 add     ecx, 74h ; 't'  ; this
.text:0000094E                 call    ??0ICompressWriteCoderProperties@@QAE@XZ ; ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)
.text:00000953                 mov     ecx, [ebp+var_10]
.text:00000956                 add     ecx, 78h ; 'x'  ; this
.text:00000959                 call    ??0ICryptoResetInitVector@@QAE@XZ ; ICryptoResetInitVector::ICryptoResetInitVector(void)
.text:0000095E                 mov     eax, [ebp+var_10]
.text:00000961                 mov     dword ptr [eax], offset ??_7CEncoder@N7z@NCrypto@@6BICompressFilter@@@ ; const NCrypto::N7z::CEncoder::`vftable'{for `ICompressFilter'}
.text:00000967                 mov     ecx, [ebp+var_10]
.text:0000096A                 mov     dword ptr [ecx+4], offset ??_7CEncoder@N7z@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::N7z::CEncoder::`vftable'{for `ICryptoSetPassword'}
.text:00000971                 mov     edx, [ebp+var_10]
.text:00000974                 mov     dword ptr [edx+74h], offset ??_7CEncoder@N7z@NCrypto@@6BICompressWriteCoderProperties@@@ ; const NCrypto::N7z::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.text:0000097B                 mov     eax, [ebp+var_10]
.text:0000097E                 mov     dword ptr [eax+78h], offset ??_7CEncoder@N7z@NCrypto@@6BICryptoResetInitVector@@@ ; const NCrypto::N7z::CEncoder::`vftable'{for `ICryptoResetInitVector'}
.text:00000985                 mov     ecx, [ebp+var_10]
.text:00000988                 mov     dword ptr [ecx+1Ch], 13h
.text:0000098F                 push    14Ch            ; unsigned int
.text:00000994                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000999                 add     esp, 4
.text:0000099C                 mov     [ebp+var_18], eax
.text:0000099F                 mov     byte ptr [ebp+var_4], 1
.text:000009A3                 cmp     [ebp+var_18], 0
.text:000009A7                 jz      short loc_9B8
.text:000009A9                 push    20h ; ' '       ; unsigned int
.text:000009AB                 mov     ecx, [ebp+var_18] ; this
.text:000009AE                 call    ??0CAesCbcEncoder@NCrypto@@QAE@I@Z ; NCrypto::CAesCbcEncoder::CAesCbcEncoder(uint)
.text:000009B3                 mov     [ebp+var_1C], eax
.text:000009B6                 jmp     short loc_9BF
.text:000009B8 ; ---------------------------------------------------------------------------
.text:000009B8
.text:000009B8 loc_9B8:                                ; CODE XREF: NCrypto::N7z::CEncoder::CEncoder(void)+A7j
.text:000009B8                 mov     [ebp+var_1C], 0
.text:000009BF
.text:000009BF loc_9BF:                                ; CODE XREF: NCrypto::N7z::CEncoder::CEncoder(void)+B6j
.text:000009BF                 mov     edx, [ebp+var_1C]
.text:000009C2                 mov     [ebp+var_14], edx
.text:000009C5                 mov     byte ptr [ebp+var_4], 0
.text:000009C9                 mov     eax, [ebp+var_14]
.text:000009CC                 push    eax
.text:000009CD                 mov     ecx, [ebp+var_10]
.text:000009D0                 add     ecx, 70h ; 'p'
.text:000009D3                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:000009D8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000009DF                 mov     eax, [ebp+var_10]
.text:000009E2                 mov     ecx, [ebp+var_C]
.text:000009E5                 mov     large fs:0, ecx
.text:000009EC                 pop     ecx
.text:000009ED                 add     esp, 1Ch
.text:000009F0                 cmp     ebp, esp
.text:000009F2                 call    __RTC_CheckEsp
.text:000009F7                 mov     esp, ebp
.text:000009F9                 pop     ebp
.text:000009FA                 retn
.text:000009FA ??0CEncoder@N7z@NCrypto@@QAE@XZ endp
.text:000009FA
.text:000009FA ; ---------------------------------------------------------------------------
.text:000009FB                 align 10h
.text:00000A00
.text:00000A00 ; =============== S U B R O U T I N E =======================================
.text:00000A00
.text:00000A00 ; Attributes: bp-based frame
.text:00000A00
.text:00000A00 ; _DWORD __thiscall NCrypto::N7z::CDecoder::CDecoder(NCrypto::N7z::CDecoder *__hidden this)
.text:00000A00                 public ??0CDecoder@N7z@NCrypto@@QAE@XZ
.text:00000A00 ??0CDecoder@N7z@NCrypto@@QAE@XZ proc near
.text:00000A00
.text:00000A00 var_1C          = dword ptr -1Ch
.text:00000A00 var_18          = dword ptr -18h
.text:00000A00 var_14          = dword ptr -14h
.text:00000A00 var_10          = dword ptr -10h
.text:00000A00 var_C           = dword ptr -0Ch
.text:00000A00 var_4           = dword ptr -4
.text:00000A00
.text:00000A00                 push    ebp
.text:00000A01                 mov     ebp, esp
.text:00000A03                 push    0FFFFFFFFh
.text:00000A05                 push    offset __ehhandler$??0CDecoder@N7z@NCrypto@@QAE@XZ
.text:00000A0A                 mov     eax, large fs:0
.text:00000A10                 push    eax
.text:00000A11                 sub     esp, 10h
.text:00000A14                 mov     eax, 0CCCCCCCCh
.text:00000A19                 mov     [ebp+var_1C], eax
.text:00000A1C                 mov     [ebp+var_18], eax
.text:00000A1F                 mov     [ebp+var_14], eax
.text:00000A22                 mov     [ebp+var_10], eax
.text:00000A25                 mov     eax, dword ptr ds:___security_cookie
.text:00000A2A                 xor     eax, ebp
.text:00000A2C                 push    eax
.text:00000A2D                 lea     eax, [ebp+var_C]
.text:00000A30                 mov     large fs:0, eax
.text:00000A36                 mov     [ebp+var_10], ecx
.text:00000A39                 mov     ecx, [ebp+var_10] ; this
.text:00000A3C                 call    ??0CBaseCoder@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CBaseCoder::CBaseCoder(void)
.text:00000A41                 mov     [ebp+var_4], 0
.text:00000A48                 mov     ecx, [ebp+var_10]
.text:00000A4B                 add     ecx, 74h ; 't'  ; this
.text:00000A4E                 call    ??0ICompressSetDecoderProperties2@@QAE@XZ ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)
.text:00000A53                 mov     eax, [ebp+var_10]
.text:00000A56                 mov     dword ptr [eax], offset ??_7CDecoder@N7z@NCrypto@@6BICompressFilter@@@ ; const NCrypto::N7z::CDecoder::`vftable'{for `ICompressFilter'}
.text:00000A5C                 mov     ecx, [ebp+var_10]
.text:00000A5F                 mov     dword ptr [ecx+4], offset ??_7CDecoder@N7z@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::N7z::CDecoder::`vftable'{for `ICryptoSetPassword'}
.text:00000A66                 mov     edx, [ebp+var_10]
.text:00000A69                 mov     dword ptr [edx+74h], offset ??_7CDecoder@N7z@NCrypto@@6B@ ; const NCrypto::N7z::CDecoder::`vftable'
.text:00000A70                 push    14Ch            ; unsigned int
.text:00000A75                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000A7A                 add     esp, 4
.text:00000A7D                 mov     [ebp+var_18], eax
.text:00000A80                 mov     byte ptr [ebp+var_4], 1
.text:00000A84                 cmp     [ebp+var_18], 0
.text:00000A88                 jz      short loc_A99
.text:00000A8A                 push    20h ; ' '       ; unsigned int
.text:00000A8C                 mov     ecx, [ebp+var_18] ; this
.text:00000A8F                 call    ??0CAesCbcDecoder@NCrypto@@QAE@I@Z ; NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)
.text:00000A94                 mov     [ebp+var_1C], eax
.text:00000A97                 jmp     short loc_AA0
.text:00000A99 ; ---------------------------------------------------------------------------
.text:00000A99
.text:00000A99 loc_A99:                                ; CODE XREF: NCrypto::N7z::CDecoder::CDecoder(void)+88j
.text:00000A99                 mov     [ebp+var_1C], 0
.text:00000AA0
.text:00000AA0 loc_AA0:                                ; CODE XREF: NCrypto::N7z::CDecoder::CDecoder(void)+97j
.text:00000AA0                 mov     eax, [ebp+var_1C]
.text:00000AA3                 mov     [ebp+var_14], eax
.text:00000AA6                 mov     byte ptr [ebp+var_4], 0
.text:00000AAA                 mov     ecx, [ebp+var_14]
.text:00000AAD                 push    ecx
.text:00000AAE                 mov     ecx, [ebp+var_10]
.text:00000AB1                 add     ecx, 70h ; 'p'
.text:00000AB4                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:00000AB9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000AC0                 mov     eax, [ebp+var_10]
.text:00000AC3                 mov     ecx, [ebp+var_C]
.text:00000AC6                 mov     large fs:0, ecx
.text:00000ACD                 pop     ecx
.text:00000ACE                 add     esp, 1Ch
.text:00000AD1                 cmp     ebp, esp
.text:00000AD3                 call    __RTC_CheckEsp
.text:00000AD8                 mov     esp, ebp
.text:00000ADA                 pop     ebp
.text:00000ADB                 retn
.text:00000ADB ??0CDecoder@N7z@NCrypto@@QAE@XZ endp
.text:00000ADB
.text:00000ADB ; ---------------------------------------------------------------------------
.text:00000ADC                 align 10h
.text:00000AE0
.text:00000AE0 ; =============== S U B R O U T I N E =======================================
.text:00000AE0
.text:00000AE0 ; Attributes: bp-based frame
.text:00000AE0
.text:00000AE0 ; __int32 __stdcall NCrypto::N7z::CDecoder::SetDecoderProperties2(NCrypto::N7z::CDecoder *this, const unsigned __int8 *, unsigned int)
.text:00000AE0                 public ?SetDecoderProperties2@CDecoder@N7z@NCrypto@@UAGJPBEI@Z
.text:00000AE0 ?SetDecoderProperties2@CDecoder@N7z@NCrypto@@UAGJPBEI@Z proc near
.text:00000AE0                                         ; DATA XREF: .rdata:00002500o
.text:00000AE0
.text:00000AE0 var_14          = dword ptr -14h
.text:00000AE0 var_10          = dword ptr -10h
.text:00000AE0 var_C           = dword ptr -0Ch
.text:00000AE0 var_8           = dword ptr -8
.text:00000AE0 var_4           = dword ptr -4
.text:00000AE0 this            = dword ptr  8
.text:00000AE0 arg_4           = dword ptr  0Ch
.text:00000AE0 arg_8           = dword ptr  10h
.text:00000AE0
.text:00000AE0                 push    ebp
.text:00000AE1                 mov     ebp, esp
.text:00000AE3                 sub     esp, 14h
.text:00000AE6                 mov     eax, 0CCCCCCCCh
.text:00000AEB                 mov     [ebp+var_14], eax
.text:00000AEE                 mov     [ebp+var_10], eax
.text:00000AF1                 mov     [ebp+var_C], eax
.text:00000AF4                 mov     [ebp+var_8], eax
.text:00000AF7                 mov     [ebp+var_4], eax
.text:00000AFA                 mov     ecx, [ebp+this]
.text:00000AFD                 sub     ecx, 58h ; 'X'  ; this
.text:00000B00                 call    ?ClearProps@CKeyInfo@N7z@NCrypto@@QAEXXZ ; NCrypto::N7z::CKeyInfo::ClearProps(void)
.text:00000B05                 mov     eax, [ebp+this]
.text:00000B08                 mov     dword ptr [eax-8], 0
.text:00000B0F                 mov     [ebp+var_4], 0
.text:00000B16                 jmp     short loc_B21
.text:00000B18 ; ---------------------------------------------------------------------------
.text:00000B18
.text:00000B18 loc_B18:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+51j
.text:00000B18                 mov     ecx, [ebp+var_4]
.text:00000B1B                 add     ecx, 1
.text:00000B1E                 mov     [ebp+var_4], ecx
.text:00000B21
.text:00000B21 loc_B21:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+36j
.text:00000B21                 cmp     [ebp+var_4], 10h
.text:00000B25                 jnb     short loc_B33
.text:00000B27                 mov     edx, [ebp+this]
.text:00000B2A                 add     edx, [ebp+var_4]
.text:00000B2D                 mov     byte ptr [edx-18h], 0
.text:00000B31                 jmp     short loc_B18
.text:00000B33 ; ---------------------------------------------------------------------------
.text:00000B33
.text:00000B33 loc_B33:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+45j
.text:00000B33                 cmp     [ebp+arg_8], 0
.text:00000B37                 jnz     short loc_B40
.text:00000B39                 xor     eax, eax
.text:00000B3B                 jmp     loc_C70
.text:00000B40 ; ---------------------------------------------------------------------------
.text:00000B40
.text:00000B40 loc_B40:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+57j
.text:00000B40                 mov     eax, [ebp+arg_4]
.text:00000B43                 mov     cl, [eax]
.text:00000B45                 mov     byte ptr [ebp+var_8+3], cl
.text:00000B48                 movzx   edx, byte ptr [ebp+var_8+3]
.text:00000B4C                 and     edx, 3Fh
.text:00000B4F                 mov     eax, [ebp+this]
.text:00000B52                 mov     [eax-58h], edx
.text:00000B55                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00000B59                 and     ecx, 0C0h
.text:00000B5F                 jnz     short loc_B75
.text:00000B61                 mov     eax, [ebp+arg_8]
.text:00000B64                 sub     eax, 1
.text:00000B67                 neg     eax
.text:00000B69                 sbb     eax, eax
.text:00000B6B                 and     eax, 80070057h
.text:00000B70                 jmp     loc_C70
.text:00000B75 ; ---------------------------------------------------------------------------
.text:00000B75
.text:00000B75 loc_B75:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+7Fj
.text:00000B75                 cmp     [ebp+arg_8], 1
.text:00000B79                 ja      short loc_B85
.text:00000B7B                 mov     eax, 80070057h
.text:00000B80                 jmp     loc_C70
.text:00000B85 ; ---------------------------------------------------------------------------
.text:00000B85
.text:00000B85 loc_B85:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+99j
.text:00000B85                 mov     edx, [ebp+arg_4]
.text:00000B88                 mov     al, [edx+1]
.text:00000B8B                 mov     byte ptr [ebp+var_8+2], al
.text:00000B8E                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00000B92                 sar     ecx, 7
.text:00000B95                 and     ecx, 1
.text:00000B98                 movzx   edx, byte ptr [ebp+var_8+2]
.text:00000B9C                 sar     edx, 4
.text:00000B9F                 add     ecx, edx
.text:00000BA1                 mov     [ebp+var_C], ecx
.text:00000BA4                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00000BA8                 sar     eax, 6
.text:00000BAB                 and     eax, 1
.text:00000BAE                 movzx   ecx, byte ptr [ebp+var_8+2]
.text:00000BB2                 and     ecx, 0Fh
.text:00000BB5                 add     eax, ecx
.text:00000BB7                 mov     [ebp+var_10], eax
.text:00000BBA                 mov     edx, [ebp+var_10]
.text:00000BBD                 mov     eax, [ebp+var_C]
.text:00000BC0                 lea     ecx, [eax+edx+2]
.text:00000BC4                 cmp     [ebp+arg_8], ecx
.text:00000BC7                 jz      short loc_BD3
.text:00000BC9                 mov     eax, 80070057h
.text:00000BCE                 jmp     loc_C70
.text:00000BD3 ; ---------------------------------------------------------------------------
.text:00000BD3
.text:00000BD3 loc_BD3:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+E7j
.text:00000BD3                 mov     edx, [ebp+this]
.text:00000BD6                 mov     eax, [ebp+var_C]
.text:00000BD9                 mov     [edx-54h], eax
.text:00000BDC                 mov     ecx, [ebp+arg_4]
.text:00000BDF                 add     ecx, 2
.text:00000BE2                 mov     [ebp+arg_4], ecx
.text:00000BE5                 mov     [ebp+var_4], 0
.text:00000BEC                 jmp     short loc_BF7
.text:00000BEE ; ---------------------------------------------------------------------------
.text:00000BEE
.text:00000BEE loc_BEE:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+136j
.text:00000BEE                 mov     edx, [ebp+var_4]
.text:00000BF1                 add     edx, 1
.text:00000BF4                 mov     [ebp+var_4], edx
.text:00000BF7
.text:00000BF7 loc_BF7:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+10Cj
.text:00000BF7                 mov     eax, [ebp+var_4]
.text:00000BFA                 cmp     eax, [ebp+var_C]
.text:00000BFD                 jnb     short loc_C18
.text:00000BFF                 mov     ecx, [ebp+this]
.text:00000C02                 add     ecx, [ebp+var_4]
.text:00000C05                 mov     edx, [ebp+arg_4]
.text:00000C08                 mov     al, [edx]
.text:00000C0A                 mov     [ecx-50h], al
.text:00000C0D                 mov     ecx, [ebp+arg_4]
.text:00000C10                 add     ecx, 1
.text:00000C13                 mov     [ebp+arg_4], ecx
.text:00000C16                 jmp     short loc_BEE
.text:00000C18 ; ---------------------------------------------------------------------------
.text:00000C18
.text:00000C18 loc_C18:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+11Dj
.text:00000C18                 mov     [ebp+var_4], 0
.text:00000C1F                 jmp     short loc_C2A
.text:00000C21 ; ---------------------------------------------------------------------------
.text:00000C21
.text:00000C21 loc_C21:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+169j
.text:00000C21                 mov     edx, [ebp+var_4]
.text:00000C24                 add     edx, 1
.text:00000C27                 mov     [ebp+var_4], edx
.text:00000C2A
.text:00000C2A loc_C2A:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+13Fj
.text:00000C2A                 mov     eax, [ebp+var_4]
.text:00000C2D                 cmp     eax, [ebp+var_10]
.text:00000C30                 jnb     short loc_C4B
.text:00000C32                 mov     ecx, [ebp+this]
.text:00000C35                 add     ecx, [ebp+var_4]
.text:00000C38                 mov     edx, [ebp+arg_4]
.text:00000C3B                 mov     al, [edx]
.text:00000C3D                 mov     [ecx-18h], al
.text:00000C40                 mov     ecx, [ebp+arg_4]
.text:00000C43                 add     ecx, 1
.text:00000C46                 mov     [ebp+arg_4], ecx
.text:00000C49                 jmp     short loc_C21
.text:00000C4B ; ---------------------------------------------------------------------------
.text:00000C4B
.text:00000C4B loc_C4B:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+150j
.text:00000C4B                 mov     edx, [ebp+this]
.text:00000C4E                 cmp     dword ptr [edx-58h], 18h
.text:00000C52                 jbe     short loc_C66
.text:00000C54                 mov     eax, [ebp+this]
.text:00000C57                 cmp     dword ptr [eax-58h], 3Fh ; '?'
.text:00000C5B                 jz      short loc_C66
.text:00000C5D                 mov     [ebp+var_14], 80004001h
.text:00000C64                 jmp     short loc_C6D
.text:00000C66 ; ---------------------------------------------------------------------------
.text:00000C66
.text:00000C66 loc_C66:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+172j
.text:00000C66                                         ; NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+17Bj
.text:00000C66                 mov     [ebp+var_14], 0
.text:00000C6D
.text:00000C6D loc_C6D:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+184j
.text:00000C6D                 mov     eax, [ebp+var_14]
.text:00000C70
.text:00000C70 loc_C70:                                ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+5Bj
.text:00000C70                                         ; NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+90j ...
.text:00000C70                 add     esp, 14h
.text:00000C73                 cmp     ebp, esp
.text:00000C75                 call    __RTC_CheckEsp
.text:00000C7A                 mov     esp, ebp
.text:00000C7C                 pop     ebp
.text:00000C7D                 retn    0Ch
.text:00000C7D ?SetDecoderProperties2@CDecoder@N7z@NCrypto@@UAGJPBEI@Z endp
.text:00000C7D
.text:00000C80
.text:00000C80 ; =============== S U B R O U T I N E =======================================
.text:00000C80
.text:00000C80 ; Attributes: bp-based frame
.text:00000C80
.text:00000C80 ; __int32 __cdecl NCrypto::N7z::CBaseCoder::CryptoSetPassword(NCrypto::N7z::CBaseCoder *this, const unsigned __int8 *Src, size_t Size)
.text:00000C80                 public ?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z
.text:00000C80 ?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z proc near
.text:00000C80                                         ; DATA XREF: .rdata:000014E8o
.text:00000C80                                         ; .rdata:000022E4o ...
.text:00000C80
.text:00000C80 var_14          = dword ptr -14h
.text:00000C80 var_10          = dword ptr -10h
.text:00000C80 var_C           = dword ptr -0Ch
.text:00000C80 var_4           = dword ptr -4
.text:00000C80 this            = dword ptr  8
.text:00000C80 Src             = dword ptr  0Ch
.text:00000C80 Size            = dword ptr  10h
.text:00000C80
.text:00000C80 ; FUNCTION CHUNK AT .text:00000CF5 SIZE 0000001E BYTES
.text:00000C80
.text:00000C80                 push    ebp
.text:00000C81                 mov     ebp, esp
.text:00000C83                 push    0FFFFFFFFh
.text:00000C85                 push    offset __ehhandler$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z
.text:00000C8A                 mov     eax, large fs:0
.text:00000C90                 push    eax
.text:00000C91                 push    ecx
.text:00000C92                 push    ecx
.text:00000C93                 push    ebx
.text:00000C94                 push    esi
.text:00000C95                 push    edi
.text:00000C96                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000C9D                 mov     eax, dword ptr ds:___security_cookie
.text:00000CA2                 xor     eax, ebp
.text:00000CA4                 push    eax
.text:00000CA5                 lea     eax, [ebp+var_C]
.text:00000CA8                 mov     large fs:0, eax
.text:00000CAE                 mov     [ebp+var_10], esp
.text:00000CB1                 mov     [ebp+var_4], 0
.text:00000CB8                 mov     eax, [ebp+Size]
.text:00000CBB                 push    eax             ; Size
.text:00000CBC                 mov     ecx, [ebp+Src]
.text:00000CBF                 push    ecx             ; Src
.text:00000CC0                 mov     ecx, [ebp+this]
.text:00000CC3                 add     ecx, 30h ; '0'
.text:00000CC6                 call    ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ; CBuffer<uchar>::CopyFrom(uchar const *,uint)
.text:00000CCB                 xor     eax, eax
.text:00000CCD                 jmp     short loc_CF5
.text:00000CCD ?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z endp
.text:00000CCD
.text:00000CCF
.text:00000CCF ; =============== S U B R O U T I N E =======================================
.text:00000CCF
.text:00000CCF
.text:00000CCF __catch$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z$0 proc near
.text:00000CCF                                         ; DATA XREF: .xdata$x:000011ACo
.text:00000CCF                 mov     dword ptr [ebp-14h], 8007000Eh
.text:00000CD6                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000CDD                 mov     eax, offset $LN7_0
.text:00000CE2                 retn
.text:00000CE2 __catch$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z$0 endp
.text:00000CE2
.text:00000CE3 ; ---------------------------------------------------------------------------
.text:00000CE3                 mov     eax, offset __tryend$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z$1
.text:00000CE8                 retn
.text:00000CE9 ; ---------------------------------------------------------------------------
.text:00000CE9
.text:00000CE9 __tryend$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z$1:
.text:00000CE9                                         ; DATA XREF: .text:00000CE3o
.text:00000CE9                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000CF0                 jmp     short loc_CF5
.text:00000CF2 ; ---------------------------------------------------------------------------
.text:00000CF2
.text:00000CF2 $LN7_0:                                 ; DATA XREF: __catch$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z$0+Eo
.text:00000CF2                 mov     eax, [ebp-14h]
.text:00000CF5 ; START OF FUNCTION CHUNK FOR ?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z
.text:00000CF5
.text:00000CF5 loc_CF5:                                ; CODE XREF: NCrypto::N7z::CBaseCoder::CryptoSetPassword(uchar const *,uint)+4Dj
.text:00000CF5                                         ; .text:00000CF0j
.text:00000CF5                 mov     ecx, [ebp+var_C]
.text:00000CF8                 mov     large fs:0, ecx
.text:00000CFF                 pop     ecx
.text:00000D00                 pop     edi
.text:00000D01                 pop     esi
.text:00000D02                 pop     ebx
.text:00000D03                 add     esp, 14h
.text:00000D06                 cmp     ebp, esp
.text:00000D08                 call    __RTC_CheckEsp
.text:00000D0D                 mov     esp, ebp
.text:00000D0F                 pop     ebp
.text:00000D10                 retn    0Ch
.text:00000D10 ; END OF FUNCTION CHUNK FOR ?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z
.text:00000D10 ; ---------------------------------------------------------------------------
.text:00000D13                 align 10h
.text:00000D20
.text:00000D20 ; =============== S U B R O U T I N E =======================================
.text:00000D20
.text:00000D20 ; Attributes: bp-based frame
.text:00000D20
.text:00000D20 ; __int32 __cdecl NCrypto::N7z::CBaseCoder::Init(NCrypto::N7z::CBaseCoder *this)
.text:00000D20                 public ?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ
.text:00000D20 ?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ proc near ; DATA XREF: .rdata:000014FCo
.text:00000D20                                         ; .rdata:000022F8o ...
.text:00000D20
.text:00000D20 var_70          = dword ptr -70h
.text:00000D20 var_6C          = dword ptr -6Ch
.text:00000D20 var_68          = dword ptr -68h
.text:00000D20 var_64          = dword ptr -64h
.text:00000D20 var_60          = dword ptr -60h
.text:00000D20 var_5C          = dword ptr -5Ch
.text:00000D20 var_58          = dword ptr -58h
.text:00000D20 var_54          = dword ptr -54h
.text:00000D20 var_50          = dword ptr -50h
.text:00000D20 var_49          = byte ptr -49h
.text:00000D20 var_48          = dword ptr -48h
.text:00000D20 var_44          = dword ptr -44h
.text:00000D20 var_3C          = dword ptr -3Ch
.text:00000D20 var_38          = dword ptr -38h
.text:00000D20 var_34          = dword ptr -34h
.text:00000D20 var_30          = dword ptr -30h
.text:00000D20 var_2C          = dword ptr -2Ch
.text:00000D20 var_28          = dword ptr -28h
.text:00000D20 var_24          = dword ptr -24h
.text:00000D20 var_20          = dword ptr -20h
.text:00000D20 var_18          = byte ptr -18h
.text:00000D20 var_10          = dword ptr -10h
.text:00000D20 var_C           = dword ptr -0Ch
.text:00000D20 var_4           = dword ptr -4
.text:00000D20 this            = dword ptr  8
.text:00000D20
.text:00000D20 ; FUNCTION CHUNK AT .text:00000F08 SIZE 0000002F BYTES
.text:00000D20
.text:00000D20                 push    ebp
.text:00000D21                 mov     ebp, esp
.text:00000D23                 push    0FFFFFFFFh
.text:00000D25                 push    offset __ehhandler$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ
.text:00000D2A                 mov     eax, large fs:0
.text:00000D30                 push    eax
.text:00000D31                 push    ecx
.text:00000D32                 sub     esp, 60h
.text:00000D35                 push    ebx
.text:00000D36                 push    esi
.text:00000D37                 push    edi
.text:00000D38                 lea     edi, [ebp+var_70]
.text:00000D3B                 mov     ecx, 18h
.text:00000D40                 mov     eax, 0CCCCCCCCh
.text:00000D45                 rep stosd
.text:00000D47                 mov     eax, dword ptr ds:___security_cookie
.text:00000D4C                 xor     eax, ebp
.text:00000D4E                 push    eax
.text:00000D4F                 lea     eax, [ebp+var_C]
.text:00000D52                 mov     large fs:0, eax
.text:00000D58                 mov     [ebp+var_10], esp
.text:00000D5B                 mov     [ebp+var_4], 0
.text:00000D62                 mov     ecx, [ebp+this]
.text:00000D65                 add     ecx, 0Ch        ; this
.text:00000D68                 call    ?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ ; NCrypto::N7z::CBase::PrepareKey(void)
.text:00000D6D                 lea     ecx, [ebp+var_18]
.text:00000D70                 call    ??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::CMyComPtr<ICryptoProperties>(void)
.text:00000D75                 mov     [ebp+var_44], eax
.text:00000D78                 mov     byte ptr [ebp+var_4], 1
.text:00000D7C                 lea     ecx, [ebp+var_18]
.text:00000D7F                 call    ??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator&(void)
.text:00000D84                 mov     [ebp+var_48], eax
.text:00000D87                 mov     eax, [ebp+var_48]
.text:00000D8A                 push    eax
.text:00000D8B                 push    offset _IID_ICryptoProperties
.text:00000D90                 mov     ecx, [ebp+this]
.text:00000D93                 add     ecx, 70h ; 'p'
.text:00000D96                 call    ??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z ; CMyComPtr<ICompressFilter>::QueryInterface<ICryptoProperties>(_GUID const &,ICryptoProperties * *)
.text:00000D9B                 mov     [ebp+var_20], eax
.text:00000D9E                 cmp     [ebp+var_20], 0
.text:00000DA2                 jz      short loc_DBE
.text:00000DA4                 mov     ecx, [ebp+var_20]
.text:00000DA7                 mov     [ebp+var_2C], ecx
.text:00000DAA                 mov     byte ptr [ebp+var_4], 0
.text:00000DAE                 lea     ecx, [ebp+var_18]
.text:00000DB1                 call    ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>(void)
.text:00000DB6                 mov     eax, [ebp+var_2C]
.text:00000DB9                 jmp     loc_F08
.text:00000DBE ; ---------------------------------------------------------------------------
.text:00000DBE
.text:00000DBE loc_DBE:                                ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+82j
.text:00000DBE                 lea     ecx, [ebp+var_18]
.text:00000DC1                 call    ??7?$CMyComPtr@UICryptoProperties@@@@QBE_NXZ ; CMyComPtr<ICryptoProperties>::operator!(void)
.text:00000DC6                 mov     [ebp+var_49], al
.text:00000DC9                 movzx   edx, [ebp+var_49]
.text:00000DCD                 test    edx, edx
.text:00000DCF                 jz      short loc_DEC
.text:00000DD1                 mov     [ebp+var_30], 80004005h
.text:00000DD8                 mov     byte ptr [ebp+var_4], 0
.text:00000DDC                 lea     ecx, [ebp+var_18]
.text:00000DDF                 call    ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>(void)
.text:00000DE4                 mov     eax, [ebp+var_30]
.text:00000DE7                 jmp     loc_F08
.text:00000DEC ; ---------------------------------------------------------------------------
.text:00000DEC
.text:00000DEC loc_DEC:                                ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+AFj
.text:00000DEC                 lea     ecx, [ebp+var_18]
.text:00000DEF                 call    ??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator->(void)
.text:00000DF4                 mov     [ebp+var_50], eax
.text:00000DF7                 mov     eax, [ebp+var_50]
.text:00000DFA                 mov     [ebp+var_54], eax
.text:00000DFD                 mov     esi, esp
.text:00000DFF                 push    20h ; ' '
.text:00000E01                 mov     ecx, [ebp+this]
.text:00000E04                 add     ecx, 3Ch ; '<'
.text:00000E07                 push    ecx
.text:00000E08                 mov     edx, [ebp+var_54]
.text:00000E0B                 push    edx
.text:00000E0C                 mov     eax, [ebp+var_54]
.text:00000E0F                 mov     ecx, [eax]
.text:00000E11                 mov     edx, [ecx+0Ch]
.text:00000E14                 call    edx
.text:00000E16                 cmp     esi, esp
.text:00000E18                 call    __RTC_CheckEsp
.text:00000E1D                 mov     [ebp+var_58], eax
.text:00000E20                 mov     eax, [ebp+var_58]
.text:00000E23                 mov     [ebp+var_24], eax
.text:00000E26                 cmp     [ebp+var_24], 0
.text:00000E2A                 jz      short loc_E46
.text:00000E2C                 mov     ecx, [ebp+var_24]
.text:00000E2F                 mov     [ebp+var_34], ecx
.text:00000E32                 mov     byte ptr [ebp+var_4], 0
.text:00000E36                 lea     ecx, [ebp+var_18]
.text:00000E39                 call    ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>(void)
.text:00000E3E                 mov     eax, [ebp+var_34]
.text:00000E41                 jmp     loc_F08
.text:00000E46 ; ---------------------------------------------------------------------------
.text:00000E46
.text:00000E46 loc_E46:                                ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+10Aj
.text:00000E46                 lea     ecx, [ebp+var_18]
.text:00000E49                 call    ??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator->(void)
.text:00000E4E                 mov     [ebp+var_5C], eax
.text:00000E51                 mov     edx, [ebp+var_5C]
.text:00000E54                 mov     [ebp+var_60], edx
.text:00000E57                 mov     esi, esp
.text:00000E59                 push    10h
.text:00000E5B                 mov     eax, [ebp+this]
.text:00000E5E                 add     eax, 5Ch ; '\'
.text:00000E61                 push    eax
.text:00000E62                 mov     ecx, [ebp+var_60]
.text:00000E65                 push    ecx
.text:00000E66                 mov     edx, [ebp+var_60]
.text:00000E69                 mov     eax, [edx]
.text:00000E6B                 mov     ecx, [eax+10h]
.text:00000E6E                 call    ecx
.text:00000E70                 cmp     esi, esp
.text:00000E72                 call    __RTC_CheckEsp
.text:00000E77                 mov     [ebp+var_64], eax
.text:00000E7A                 mov     edx, [ebp+var_64]
.text:00000E7D                 mov     [ebp+var_28], edx
.text:00000E80                 cmp     [ebp+var_28], 0
.text:00000E84                 jz      short loc_E9D
.text:00000E86                 mov     eax, [ebp+var_28]
.text:00000E89                 mov     [ebp+var_38], eax
.text:00000E8C                 mov     byte ptr [ebp+var_4], 0
.text:00000E90                 lea     ecx, [ebp+var_18]
.text:00000E93                 call    ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>(void)
.text:00000E98                 mov     eax, [ebp+var_38]
.text:00000E9B                 jmp     short loc_F08
.text:00000E9D ; ---------------------------------------------------------------------------
.text:00000E9D
.text:00000E9D loc_E9D:                                ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+164j
.text:00000E9D                 mov     ecx, [ebp+this]
.text:00000EA0                 add     ecx, 70h ; 'p'
.text:00000EA3                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:00000EA8                 mov     [ebp+var_68], eax
.text:00000EAB                 mov     ecx, [ebp+var_68]
.text:00000EAE                 mov     [ebp+var_6C], ecx
.text:00000EB1                 mov     esi, esp
.text:00000EB3                 mov     edx, [ebp+var_6C]
.text:00000EB6                 push    edx
.text:00000EB7                 mov     eax, [ebp+var_6C]
.text:00000EBA                 mov     ecx, [eax]
.text:00000EBC                 mov     edx, [ecx+0Ch]
.text:00000EBF                 call    edx
.text:00000EC1                 cmp     esi, esp
.text:00000EC3                 call    __RTC_CheckEsp
.text:00000EC8                 mov     [ebp+var_70], eax
.text:00000ECB                 mov     eax, [ebp+var_70]
.text:00000ECE                 mov     [ebp+var_3C], eax
.text:00000ED1                 mov     byte ptr [ebp+var_4], 0
.text:00000ED5                 lea     ecx, [ebp+var_18]
.text:00000ED8                 call    ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>(void)
.text:00000EDD                 mov     eax, [ebp+var_3C]
.text:00000EE0                 jmp     short loc_F08
.text:00000EE0 ?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ endp
.text:00000EE0
.text:00000EE2
.text:00000EE2 ; =============== S U B R O U T I N E =======================================
.text:00000EE2
.text:00000EE2
.text:00000EE2 __catch$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ$0 proc near
.text:00000EE2                                         ; DATA XREF: .xdata$x:00001204o
.text:00000EE2                 mov     dword ptr [ebp-40h], 8007000Eh
.text:00000EE9                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000EF0                 mov     eax, offset $LN12
.text:00000EF5                 retn
.text:00000EF5 __catch$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ$0 endp
.text:00000EF5
.text:00000EF6 ; ---------------------------------------------------------------------------
.text:00000EF6                 mov     eax, offset __tryend$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ$1
.text:00000EFB                 retn
.text:00000EFC ; ---------------------------------------------------------------------------
.text:00000EFC
.text:00000EFC __tryend$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ$1: ; DATA XREF: .text:00000EF6o
.text:00000EFC                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000F03                 jmp     short loc_F08
.text:00000F05 ; ---------------------------------------------------------------------------
.text:00000F05
.text:00000F05 $LN12:                                  ; DATA XREF: __catch$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ$0+Eo
.text:00000F05                 mov     eax, [ebp-40h]
.text:00000F08 ; START OF FUNCTION CHUNK FOR ?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ
.text:00000F08
.text:00000F08 loc_F08:                                ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+99j
.text:00000F08                                         ; NCrypto::N7z::CBaseCoder::Init(void)+C7j ...
.text:00000F08                 push    edx
.text:00000F09                 mov     ecx, ebp
.text:00000F0B                 push    eax
.text:00000F0C                 lea     edx, $LN17
.text:00000F12                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F17                 pop     eax
.text:00000F18                 pop     edx
.text:00000F19                 mov     ecx, [ebp+var_C]
.text:00000F1C                 mov     large fs:0, ecx
.text:00000F23                 pop     ecx
.text:00000F24                 pop     edi
.text:00000F25                 pop     esi
.text:00000F26                 pop     ebx
.text:00000F27                 add     esp, 70h
.text:00000F2A                 cmp     ebp, esp
.text:00000F2C                 call    __RTC_CheckEsp
.text:00000F31                 mov     esp, ebp
.text:00000F33                 pop     ebp
.text:00000F34                 retn    4
.text:00000F34 ; END OF FUNCTION CHUNK FOR ?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ
.text:00000F34 ; ---------------------------------------------------------------------------
.text:00000F37                 align 4
.text:00000F38 $LN17           dd 1                    ; DATA XREF: NCrypto::N7z::CBaseCoder::Init(void)+1ECo
.text:00000F3C                 dd offset $LN16
.text:00000F40 $LN16           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000F3Co
.text:00000F48                 dd offset $LN14
.text:00000F4C $LN14           dd 0CC007063h           ; DATA XREF: .text:00000F48o
.text:00000F50
.text:00000F50 ; =============== S U B R O U T I N E =======================================
.text:00000F50
.text:00000F50 ; Attributes: bp-based frame
.text:00000F50
.text:00000F50 ; public: virtual unsigned int __stdcall NCrypto::N7z::CBaseCoder::Filter(unsigned char *, unsigned int)
.text:00000F50                 public ?Filter@CBaseCoder@N7z@NCrypto@@UAGIPAEI@Z
.text:00000F50 ?Filter@CBaseCoder@N7z@NCrypto@@UAGIPAEI@Z proc near
.text:00000F50                                         ; DATA XREF: .rdata:00001500o
.text:00000F50                                         ; .rdata:000022FCo ...
.text:00000F50
.text:00000F50 var_4           = dword ptr -4
.text:00000F50 arg_0           = dword ptr  8
.text:00000F50 arg_4           = dword ptr  0Ch
.text:00000F50 arg_8           = dword ptr  10h
.text:00000F50
.text:00000F50                 push    ebp
.text:00000F51                 mov     ebp, esp
.text:00000F53                 push    ecx
.text:00000F54                 push    esi
.text:00000F55                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F5C                 mov     ecx, [ebp+arg_0]
.text:00000F5F                 add     ecx, 70h ; 'p'
.text:00000F62                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:00000F67                 mov     [ebp+var_4], eax
.text:00000F6A                 mov     esi, esp
.text:00000F6C                 mov     eax, [ebp+arg_8]
.text:00000F6F                 push    eax
.text:00000F70                 mov     ecx, [ebp+arg_4]
.text:00000F73                 push    ecx
.text:00000F74                 mov     edx, [ebp+var_4]
.text:00000F77                 push    edx
.text:00000F78                 mov     eax, [ebp+var_4]
.text:00000F7B                 mov     ecx, [eax]
.text:00000F7D                 mov     edx, [ecx+10h]
.text:00000F80                 call    edx
.text:00000F82                 cmp     esi, esp
.text:00000F84                 call    __RTC_CheckEsp
.text:00000F89                 pop     esi
.text:00000F8A                 add     esp, 4
.text:00000F8D                 cmp     ebp, esp
.text:00000F8F                 call    __RTC_CheckEsp
.text:00000F94                 mov     esp, ebp
.text:00000F96                 pop     ebp
.text:00000F97                 retn    0Ch
.text:00000F97 ?Filter@CBaseCoder@N7z@NCrypto@@UAGIPAEI@Z endp
.text:00000F97
.text:00000F97 ; ---------------------------------------------------------------------------
.text:00000F9A                 align 4
.text:00000F9A _text           ends
.text:00000F9A
.rtc$TMZ:00000F9C ; ===========================================================================
.rtc$TMZ:00000F9C
.rtc$TMZ:00000F9C ; Segment type: Pure data
.rtc$TMZ:00000F9C ; Segment permissions: Read
.rtc$TMZ:00000F9C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000F9C                 assume cs:_rtc$TMZ
.rtc$TMZ:00000F9C                 ;org 0F9Ch
.rtc$TMZ:00000F9C ; COMDAT (pick any)
.rtc$TMZ:00000F9C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000F9C _rtc$TMZ        ends
.rtc$TMZ:00000F9C
.rtc$IMZ:00000FA0 ; ===========================================================================
.rtc$IMZ:00000FA0
.rtc$IMZ:00000FA0 ; Segment type: Pure data
.rtc$IMZ:00000FA0 ; Segment permissions: Read
.rtc$IMZ:00000FA0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000FA0                 assume cs:_rtc$IMZ
.rtc$IMZ:00000FA0                 ;org 0FA0h
.rtc$IMZ:00000FA0 ; COMDAT (pick any)
.rtc$IMZ:00000FA0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000FA0 _rtc$IMZ        ends
.rtc$IMZ:00000FA0
.text$x:00000FA4 ; ===========================================================================
.text$x:00000FA4
.text$x:00000FA4 ; Segment type: Pure code
.text$x:00000FA4 ; Segment permissions: Read/Execute
.text$x:00000FA4 _text$x         segment para public 'CODE' use32
.text$x:00000FA4                 assume cs:_text$x
.text$x:00000FA4                 ;org 0FA4h
.text$x:00000FA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00000FA4
.text$x:00000FA4 ; =============== S U B R O U T I N E =======================================
.text$x:00000FA4
.text$x:00000FA4
.text$x:00000FA4 __unwindfunclet$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ$0 proc near
.text$x:00000FA4                                         ; DATA XREF: .xdata$x:000010B8o
.text$x:00000FA4                 lea     ecx, [ebp-28h]
.text$x:00000FA7                 jmp     ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text$x:00000FA7 __unwindfunclet$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ$0 endp
.text$x:00000FA7
.text$x:00000FAC
.text$x:00000FAC ; =============== S U B R O U T I N E =======================================
.text$x:00000FAC
.text$x:00000FAC
.text$x:00000FAC __ehhandler$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ proc near
.text$x:00000FAC                                         ; DATA XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+5o
.text$x:00000FAC
.text$x:00000FAC arg_4           = dword ptr  8
.text$x:00000FAC
.text$x:00000FAC                 mov     edx, [esp+arg_4]
.text$x:00000FB0                 lea     eax, [edx+0Ch]
.text$x:00000FB3                 mov     ecx, [edx-0B4h]
.text$x:00000FB9                 xor     ecx, eax
.text$x:00000FBB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000FC0                 mov     ecx, [edx-4]
.text$x:00000FC3                 xor     ecx, eax
.text$x:00000FC5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000FCA                 mov     eax, offset __ehfuncinfo$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ
.text$x:00000FCF                 jmp     ___CxxFrameHandler3
.text$x:00000FCF __ehhandler$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ endp
.text$x:00000FCF
.text$x:00000FD4
.text$x:00000FD4 ; =============== S U B R O U T I N E =======================================
.text$x:00000FD4
.text$x:00000FD4
.text$x:00000FD4 __unwindfunclet$??0CBase@N7z@NCrypto@@IAE@XZ$0 proc near
.text$x:00000FD4                                         ; DATA XREF: .xdata$x:000010E4o
.text$x:00000FD4                 mov     ecx, [ebp-10h]  ; this
.text$x:00000FD7                 jmp     ??1CKeyInfoCache@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CKeyInfoCache::~CKeyInfoCache(void)
.text$x:00000FD7 __unwindfunclet$??0CBase@N7z@NCrypto@@IAE@XZ$0 endp
.text$x:00000FD7
.text$x:00000FDC
.text$x:00000FDC ; =============== S U B R O U T I N E =======================================
.text$x:00000FDC
.text$x:00000FDC
.text$x:00000FDC __ehhandler$??0CBase@N7z@NCrypto@@IAE@XZ proc near
.text$x:00000FDC                                         ; DATA XREF: NCrypto::N7z::CBase::CBase(void)+5o
.text$x:00000FDC
.text$x:00000FDC arg_4           = dword ptr  8
.text$x:00000FDC
.text$x:00000FDC                 mov     edx, [esp+arg_4]
.text$x:00000FE0                 lea     eax, [edx+0Ch]
.text$x:00000FE3                 mov     ecx, [edx-0Ch]
.text$x:00000FE6                 xor     ecx, eax
.text$x:00000FE8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000FED                 mov     eax, offset __ehfuncinfo$??0CBase@N7z@NCrypto@@IAE@XZ
.text$x:00000FF2                 jmp     ___CxxFrameHandler3
.text$x:00000FF2 __ehhandler$??0CBase@N7z@NCrypto@@IAE@XZ endp
.text$x:00000FF2
.text$x:00000FF7
.text$x:00000FF7 ; =============== S U B R O U T I N E =======================================
.text$x:00000FF7
.text$x:00000FF7
.text$x:00000FF7 __unwindfunclet$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ$0 proc near
.text$x:00000FF7                                         ; DATA XREF: .xdata$x:00001110o
.text$x:00000FF7                 lea     ecx, [ebp-18h]  ; this
.text$x:00000FFA                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:00000FFA __unwindfunclet$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ$0 endp
.text$x:00000FFA
.text$x:00000FFF
.text$x:00000FFF ; =============== S U B R O U T I N E =======================================
.text$x:00000FFF
.text$x:00000FFF
.text$x:00000FFF __ehhandler$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ proc near
.text$x:00000FFF                                         ; DATA XREF: NCrypto::N7z::CBase::PrepareKey(void)+5o
.text$x:00000FFF
.text$x:00000FFF arg_4           = dword ptr  8
.text$x:00000FFF
.text$x:00000FFF                 mov     edx, [esp+arg_4]
.text$x:00001003                 lea     eax, [edx+0Ch]
.text$x:00001006                 mov     ecx, [edx-18h]
.text$x:00001009                 xor     ecx, eax
.text$x:0000100B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001010                 mov     eax, offset __ehfuncinfo$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ
.text$x:00001015                 jmp     ___CxxFrameHandler3
.text$x:00001015 __ehhandler$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ endp
.text$x:00001015
.text$x:0000101A
.text$x:0000101A ; =============== S U B R O U T I N E =======================================
.text$x:0000101A
.text$x:0000101A
.text$x:0000101A __unwindfunclet$??0CEncoder@N7z@NCrypto@@QAE@XZ$0 proc near
.text$x:0000101A                                         ; DATA XREF: .xdata$x:0000113Co
.text$x:0000101A                 mov     ecx, [ebp-10h]  ; this
.text$x:0000101D                 jmp     ??1CBaseCoder@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CBaseCoder::~CBaseCoder(void)
.text$x:0000101D __unwindfunclet$??0CEncoder@N7z@NCrypto@@QAE@XZ$0 endp
.text$x:0000101D
.text$x:00001022
.text$x:00001022 ; =============== S U B R O U T I N E =======================================
.text$x:00001022
.text$x:00001022
.text$x:00001022 __unwindfunclet$??0CEncoder@N7z@NCrypto@@QAE@XZ$1 proc near
.text$x:00001022                                         ; DATA XREF: .xdata$x:00001144o
.text$x:00001022                 mov     eax, [ebp-18h]
.text$x:00001025                 push    eax             ; void *
.text$x:00001026                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000102B                 pop     ecx
.text$x:0000102C                 retn
.text$x:0000102C __unwindfunclet$??0CEncoder@N7z@NCrypto@@QAE@XZ$1 endp
.text$x:0000102C
.text$x:0000102D
.text$x:0000102D ; =============== S U B R O U T I N E =======================================
.text$x:0000102D
.text$x:0000102D
.text$x:0000102D __ehhandler$??0CEncoder@N7z@NCrypto@@QAE@XZ proc near
.text$x:0000102D                                         ; DATA XREF: NCrypto::N7z::CEncoder::CEncoder(void)+5o
.text$x:0000102D
.text$x:0000102D arg_4           = dword ptr  8
.text$x:0000102D
.text$x:0000102D                 mov     edx, [esp+arg_4]
.text$x:00001031                 lea     eax, [edx+0Ch]
.text$x:00001034                 mov     ecx, [edx-14h]
.text$x:00001037                 xor     ecx, eax
.text$x:00001039                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000103E                 mov     eax, offset __ehfuncinfo$??0CEncoder@N7z@NCrypto@@QAE@XZ
.text$x:00001043                 jmp     ___CxxFrameHandler3
.text$x:00001043 __ehhandler$??0CEncoder@N7z@NCrypto@@QAE@XZ endp
.text$x:00001043
.text$x:00001048
.text$x:00001048 ; =============== S U B R O U T I N E =======================================
.text$x:00001048
.text$x:00001048
.text$x:00001048 __unwindfunclet$??0CDecoder@N7z@NCrypto@@QAE@XZ$0 proc near
.text$x:00001048                                         ; DATA XREF: .xdata$x:00001170o
.text$x:00001048                 mov     ecx, [ebp-10h]  ; this
.text$x:0000104B                 jmp     ??1CBaseCoder@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CBaseCoder::~CBaseCoder(void)
.text$x:0000104B __unwindfunclet$??0CDecoder@N7z@NCrypto@@QAE@XZ$0 endp
.text$x:0000104B
.text$x:00001050
.text$x:00001050 ; =============== S U B R O U T I N E =======================================
.text$x:00001050
.text$x:00001050
.text$x:00001050 __unwindfunclet$??0CDecoder@N7z@NCrypto@@QAE@XZ$1 proc near
.text$x:00001050                                         ; DATA XREF: .xdata$x:00001178o
.text$x:00001050                 mov     eax, [ebp-18h]
.text$x:00001053                 push    eax             ; void *
.text$x:00001054                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001059                 pop     ecx
.text$x:0000105A                 retn
.text$x:0000105A __unwindfunclet$??0CDecoder@N7z@NCrypto@@QAE@XZ$1 endp
.text$x:0000105A
.text$x:0000105B
.text$x:0000105B ; =============== S U B R O U T I N E =======================================
.text$x:0000105B
.text$x:0000105B
.text$x:0000105B __ehhandler$??0CDecoder@N7z@NCrypto@@QAE@XZ proc near
.text$x:0000105B                                         ; DATA XREF: NCrypto::N7z::CDecoder::CDecoder(void)+5o
.text$x:0000105B
.text$x:0000105B arg_4           = dword ptr  8
.text$x:0000105B
.text$x:0000105B                 mov     edx, [esp+arg_4]
.text$x:0000105F                 lea     eax, [edx+0Ch]
.text$x:00001062                 mov     ecx, [edx-14h]
.text$x:00001065                 xor     ecx, eax
.text$x:00001067                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000106C                 mov     eax, offset __ehfuncinfo$??0CDecoder@N7z@NCrypto@@QAE@XZ
.text$x:00001071                 jmp     ___CxxFrameHandler3
.text$x:00001071 __ehhandler$??0CDecoder@N7z@NCrypto@@QAE@XZ endp
.text$x:00001071
.text$x:00001076
.text$x:00001076 ; =============== S U B R O U T I N E =======================================
.text$x:00001076
.text$x:00001076
.text$x:00001076 __ehhandler$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z proc near
.text$x:00001076                                         ; DATA XREF: NCrypto::N7z::CBaseCoder::CryptoSetPassword(uchar const *,uint)+5o
.text$x:00001076
.text$x:00001076 arg_4           = dword ptr  8
.text$x:00001076
.text$x:00001076                 mov     edx, [esp+arg_4]
.text$x:0000107A                 lea     eax, [edx+0Ch]
.text$x:0000107D                 mov     ecx, [edx-18h]
.text$x:00001080                 xor     ecx, eax
.text$x:00001082                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001087                 mov     eax, offset __ehfuncinfo$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z
.text$x:0000108C                 jmp     ___CxxFrameHandler3
.text$x:0000108C __ehhandler$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z endp
.text$x:0000108C
.text$x:00001091
.text$x:00001091 ; =============== S U B R O U T I N E =======================================
.text$x:00001091
.text$x:00001091
.text$x:00001091 __unwindfunclet$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ$2 proc near
.text$x:00001091                                         ; DATA XREF: .xdata$x:00001228o
.text$x:00001091                 lea     ecx, [ebp-18h]
.text$x:00001094                 jmp     ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>(void)
.text$x:00001094 __unwindfunclet$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ$2 endp
.text$x:00001094
.text$x:00001099
.text$x:00001099 ; =============== S U B R O U T I N E =======================================
.text$x:00001099
.text$x:00001099
.text$x:00001099 __ehhandler$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ proc near
.text$x:00001099                                         ; DATA XREF: NCrypto::N7z::CBaseCoder::Init(void)+5o
.text$x:00001099
.text$x:00001099 arg_4           = dword ptr  8
.text$x:00001099
.text$x:00001099                 mov     edx, [esp+arg_4]
.text$x:0000109D                 lea     eax, [edx+0Ch]
.text$x:000010A0                 mov     ecx, [edx-74h]
.text$x:000010A3                 xor     ecx, eax
.text$x:000010A5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000010AA                 mov     eax, offset __ehfuncinfo$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ
.text$x:000010AF                 jmp     ___CxxFrameHandler3
.text$x:000010AF __ehhandler$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ endp
.text$x:000010AF
.text$x:000010AF _text$x         ends
.text$x:000010AF
.xdata$x:000010B4 ; ===========================================================================
.xdata$x:000010B4
.xdata$x:000010B4 ; Segment type: Pure data
.xdata$x:000010B4 ; Segment permissions: Read
.xdata$x:000010B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000010B4                 assume cs:_xdata$x
.xdata$x:000010B4                 ;org 10B4h
.xdata$x:000010B4 __unwindtable$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ db 0FFh
.xdata$x:000010B4                                         ; DATA XREF: .xdata$x:000010C4o
.xdata$x:000010B5                 db 0FFh
.xdata$x:000010B6                 db 0FFh
.xdata$x:000010B7                 db 0FFh
.xdata$x:000010B8                 dd offset __unwindfunclet$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ$0
.xdata$x:000010BC __ehfuncinfo$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ db  22h ; "
.xdata$x:000010BC                                         ; DATA XREF: __ehhandler$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ+1Eo
.xdata$x:000010BD                 db    5
.xdata$x:000010BE                 db  93h ; ô
.xdata$x:000010BF                 db  19h
.xdata$x:000010C0                 db    1
.xdata$x:000010C1                 db    0
.xdata$x:000010C2                 db    0
.xdata$x:000010C3                 db    0
.xdata$x:000010C4                 dd offset __unwindtable$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ
.xdata$x:000010C8                 db    0
.xdata$x:000010C9                 db    0
.xdata$x:000010CA                 db    0
.xdata$x:000010CB                 db    0
.xdata$x:000010CC                 db    0
.xdata$x:000010CD                 db    0
.xdata$x:000010CE                 db    0
.xdata$x:000010CF                 db    0
.xdata$x:000010D0                 db    0
.xdata$x:000010D1                 db    0
.xdata$x:000010D2                 db    0
.xdata$x:000010D3                 db    0
.xdata$x:000010D4                 db    0
.xdata$x:000010D5                 db    0
.xdata$x:000010D6                 db    0
.xdata$x:000010D7                 db    0
.xdata$x:000010D8                 db    0
.xdata$x:000010D9                 db    0
.xdata$x:000010DA                 db    0
.xdata$x:000010DB                 db    0
.xdata$x:000010DC                 db    1
.xdata$x:000010DD                 db    0
.xdata$x:000010DE                 db    0
.xdata$x:000010DF                 db    0
.xdata$x:000010E0 __unwindtable$??0CBase@N7z@NCrypto@@IAE@XZ db 0FFh
.xdata$x:000010E0                                         ; DATA XREF: .xdata$x:000010F0o
.xdata$x:000010E1                 db 0FFh
.xdata$x:000010E2                 db 0FFh
.xdata$x:000010E3                 db 0FFh
.xdata$x:000010E4                 dd offset __unwindfunclet$??0CBase@N7z@NCrypto@@IAE@XZ$0
.xdata$x:000010E8 __ehfuncinfo$??0CBase@N7z@NCrypto@@IAE@XZ db  22h ; "
.xdata$x:000010E8                                         ; DATA XREF: __ehhandler$??0CBase@N7z@NCrypto@@IAE@XZ+11o
.xdata$x:000010E9                 db    5
.xdata$x:000010EA                 db  93h ; ô
.xdata$x:000010EB                 db  19h
.xdata$x:000010EC                 db    1
.xdata$x:000010ED                 db    0
.xdata$x:000010EE                 db    0
.xdata$x:000010EF                 db    0
.xdata$x:000010F0                 dd offset __unwindtable$??0CBase@N7z@NCrypto@@IAE@XZ
.xdata$x:000010F4                 db    0
.xdata$x:000010F5                 db    0
.xdata$x:000010F6                 db    0
.xdata$x:000010F7                 db    0
.xdata$x:000010F8                 db    0
.xdata$x:000010F9                 db    0
.xdata$x:000010FA                 db    0
.xdata$x:000010FB                 db    0
.xdata$x:000010FC                 db    0
.xdata$x:000010FD                 db    0
.xdata$x:000010FE                 db    0
.xdata$x:000010FF                 db    0
.xdata$x:00001100                 db    0
.xdata$x:00001101                 db    0
.xdata$x:00001102                 db    0
.xdata$x:00001103                 db    0
.xdata$x:00001104                 db    0
.xdata$x:00001105                 db    0
.xdata$x:00001106                 db    0
.xdata$x:00001107                 db    0
.xdata$x:00001108                 db    1
.xdata$x:00001109                 db    0
.xdata$x:0000110A                 db    0
.xdata$x:0000110B                 db    0
.xdata$x:0000110C __unwindtable$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ db 0FFh
.xdata$x:0000110C                                         ; DATA XREF: .xdata$x:0000111Co
.xdata$x:0000110D                 db 0FFh
.xdata$x:0000110E                 db 0FFh
.xdata$x:0000110F                 db 0FFh
.xdata$x:00001110                 dd offset __unwindfunclet$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ$0
.xdata$x:00001114 __ehfuncinfo$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ db  22h ; "
.xdata$x:00001114                                         ; DATA XREF: __ehhandler$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ+11o
.xdata$x:00001115                 db    5
.xdata$x:00001116                 db  93h ; ô
.xdata$x:00001117                 db  19h
.xdata$x:00001118                 db    1
.xdata$x:00001119                 db    0
.xdata$x:0000111A                 db    0
.xdata$x:0000111B                 db    0
.xdata$x:0000111C                 dd offset __unwindtable$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ
.xdata$x:00001120                 db    0
.xdata$x:00001121                 db    0
.xdata$x:00001122                 db    0
.xdata$x:00001123                 db    0
.xdata$x:00001124                 db    0
.xdata$x:00001125                 db    0
.xdata$x:00001126                 db    0
.xdata$x:00001127                 db    0
.xdata$x:00001128                 db    0
.xdata$x:00001129                 db    0
.xdata$x:0000112A                 db    0
.xdata$x:0000112B                 db    0
.xdata$x:0000112C                 db    0
.xdata$x:0000112D                 db    0
.xdata$x:0000112E                 db    0
.xdata$x:0000112F                 db    0
.xdata$x:00001130                 db    0
.xdata$x:00001131                 db    0
.xdata$x:00001132                 db    0
.xdata$x:00001133                 db    0
.xdata$x:00001134                 db    1
.xdata$x:00001135                 db    0
.xdata$x:00001136                 db    0
.xdata$x:00001137                 db    0
.xdata$x:00001138 __unwindtable$??0CEncoder@N7z@NCrypto@@QAE@XZ db 0FFh
.xdata$x:00001138                                         ; DATA XREF: .xdata$x:00001150o
.xdata$x:00001139                 db 0FFh
.xdata$x:0000113A                 db 0FFh
.xdata$x:0000113B                 db 0FFh
.xdata$x:0000113C                 dd offset __unwindfunclet$??0CEncoder@N7z@NCrypto@@QAE@XZ$0
.xdata$x:00001140                 db    0
.xdata$x:00001141                 db    0
.xdata$x:00001142                 db    0
.xdata$x:00001143                 db    0
.xdata$x:00001144                 dd offset __unwindfunclet$??0CEncoder@N7z@NCrypto@@QAE@XZ$1
.xdata$x:00001148 __ehfuncinfo$??0CEncoder@N7z@NCrypto@@QAE@XZ db  22h ; "
.xdata$x:00001148                                         ; DATA XREF: __ehhandler$??0CEncoder@N7z@NCrypto@@QAE@XZ+11o
.xdata$x:00001149                 db    5
.xdata$x:0000114A                 db  93h ; ô
.xdata$x:0000114B                 db  19h
.xdata$x:0000114C                 db    2
.xdata$x:0000114D                 db    0
.xdata$x:0000114E                 db    0
.xdata$x:0000114F                 db    0
.xdata$x:00001150                 dd offset __unwindtable$??0CEncoder@N7z@NCrypto@@QAE@XZ
.xdata$x:00001154                 db    0
.xdata$x:00001155                 db    0
.xdata$x:00001156                 db    0
.xdata$x:00001157                 db    0
.xdata$x:00001158                 db    0
.xdata$x:00001159                 db    0
.xdata$x:0000115A                 db    0
.xdata$x:0000115B                 db    0
.xdata$x:0000115C                 db    0
.xdata$x:0000115D                 db    0
.xdata$x:0000115E                 db    0
.xdata$x:0000115F                 db    0
.xdata$x:00001160                 db    0
.xdata$x:00001161                 db    0
.xdata$x:00001162                 db    0
.xdata$x:00001163                 db    0
.xdata$x:00001164                 db    0
.xdata$x:00001165                 db    0
.xdata$x:00001166                 db    0
.xdata$x:00001167                 db    0
.xdata$x:00001168                 db    1
.xdata$x:00001169                 db    0
.xdata$x:0000116A                 db    0
.xdata$x:0000116B                 db    0
.xdata$x:0000116C __unwindtable$??0CDecoder@N7z@NCrypto@@QAE@XZ db 0FFh
.xdata$x:0000116C                                         ; DATA XREF: .xdata$x:00001184o
.xdata$x:0000116D                 db 0FFh
.xdata$x:0000116E                 db 0FFh
.xdata$x:0000116F                 db 0FFh
.xdata$x:00001170                 dd offset __unwindfunclet$??0CDecoder@N7z@NCrypto@@QAE@XZ$0
.xdata$x:00001174                 align 8
.xdata$x:00001178                 dd offset __unwindfunclet$??0CDecoder@N7z@NCrypto@@QAE@XZ$1
.xdata$x:0000117C __ehfuncinfo$??0CDecoder@N7z@NCrypto@@QAE@XZ db  22h ; "
.xdata$x:0000117C                                         ; DATA XREF: __ehhandler$??0CDecoder@N7z@NCrypto@@QAE@XZ+11o
.xdata$x:0000117D                 db    5
.xdata$x:0000117E                 db  93h ; ô
.xdata$x:0000117F                 db  19h
.xdata$x:00001180                 db    2
.xdata$x:00001181                 db    0
.xdata$x:00001182                 db    0
.xdata$x:00001183                 db    0
.xdata$x:00001184                 dd offset __unwindtable$??0CDecoder@N7z@NCrypto@@QAE@XZ
.xdata$x:00001188                 db    0
.xdata$x:00001189                 db    0
.xdata$x:0000118A                 db    0
.xdata$x:0000118B                 db    0
.xdata$x:0000118C                 db    0
.xdata$x:0000118D                 db    0
.xdata$x:0000118E                 db    0
.xdata$x:0000118F                 db    0
.xdata$x:00001190                 db    0
.xdata$x:00001191                 db    0
.xdata$x:00001192                 db    0
.xdata$x:00001193                 db    0
.xdata$x:00001194                 db    0
.xdata$x:00001195                 db    0
.xdata$x:00001196                 db    0
.xdata$x:00001197                 db    0
.xdata$x:00001198                 db    0
.xdata$x:00001199                 db    0
.xdata$x:0000119A                 db    0
.xdata$x:0000119B                 db    0
.xdata$x:0000119C                 db    1
.xdata$x:0000119D                 db    0
.xdata$x:0000119E                 db    0
.xdata$x:0000119F                 db    0
.xdata$x:000011A0 __catchsym$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z$2 dd offset loc_3E+2
.xdata$x:000011A0                                         ; DATA XREF: .xdata$x:000011D0o
.xdata$x:000011A4                 db    0
.xdata$x:000011A5                 db    0
.xdata$x:000011A6                 db    0
.xdata$x:000011A7                 db    0
.xdata$x:000011A8                 db    0
.xdata$x:000011A9                 db    0
.xdata$x:000011AA                 db    0
.xdata$x:000011AB                 db    0
.xdata$x:000011AC                 dd offset __catch$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z$0
.xdata$x:000011B0 __unwindtable$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z db 0FFh
.xdata$x:000011B0                                         ; DATA XREF: .xdata$x:000011DCo
.xdata$x:000011B1                 db 0FFh
.xdata$x:000011B2                 db 0FFh
.xdata$x:000011B3                 db 0FFh
.xdata$x:000011B4                 db    0
.xdata$x:000011B5                 db    0
.xdata$x:000011B6                 db    0
.xdata$x:000011B7                 db    0
.xdata$x:000011B8                 db 0FFh
.xdata$x:000011B9                 db 0FFh
.xdata$x:000011BA                 db 0FFh
.xdata$x:000011BB                 db 0FFh
.xdata$x:000011BC                 db    0
.xdata$x:000011BD                 db    0
.xdata$x:000011BE                 db    0
.xdata$x:000011BF                 db    0
.xdata$x:000011C0 __tryblocktable$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z db    0
.xdata$x:000011C0                                         ; DATA XREF: .xdata$x:000011E4o
.xdata$x:000011C1                 db    0
.xdata$x:000011C2                 db    0
.xdata$x:000011C3                 db    0
.xdata$x:000011C4                 db    0
.xdata$x:000011C5                 db    0
.xdata$x:000011C6                 db    0
.xdata$x:000011C7                 db    0
.xdata$x:000011C8                 db    1
.xdata$x:000011C9                 db    0
.xdata$x:000011CA                 db    0
.xdata$x:000011CB                 db    0
.xdata$x:000011CC                 db    1
.xdata$x:000011CD                 db    0
.xdata$x:000011CE                 db    0
.xdata$x:000011CF                 db    0
.xdata$x:000011D0                 dd offset __catchsym$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z$2
.xdata$x:000011D4 __ehfuncinfo$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z db  22h ; "
.xdata$x:000011D4                                         ; DATA XREF: __ehhandler$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z+11o
.xdata$x:000011D5                 db    5
.xdata$x:000011D6                 db  93h ; ô
.xdata$x:000011D7                 db  19h
.xdata$x:000011D8                 db    2
.xdata$x:000011D9                 db    0
.xdata$x:000011DA                 db    0
.xdata$x:000011DB                 db    0
.xdata$x:000011DC                 dd offset __unwindtable$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z
.xdata$x:000011E0                 db    1
.xdata$x:000011E1                 db    0
.xdata$x:000011E2                 db    0
.xdata$x:000011E3                 db    0
.xdata$x:000011E4                 dd offset __tryblocktable$?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z
.xdata$x:000011E8                 db    0
.xdata$x:000011E9                 db    0
.xdata$x:000011EA                 db    0
.xdata$x:000011EB                 db    0
.xdata$x:000011EC                 db    0
.xdata$x:000011ED                 db    0
.xdata$x:000011EE                 db    0
.xdata$x:000011EF                 db    0
.xdata$x:000011F0                 db    0
.xdata$x:000011F1                 db    0
.xdata$x:000011F2                 db    0
.xdata$x:000011F3                 db    0
.xdata$x:000011F4                 db    1
.xdata$x:000011F5                 db    0
.xdata$x:000011F6                 db    0
.xdata$x:000011F7                 db    0
.xdata$x:000011F8 __catchsym$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ$3 dd offset loc_3E+2
.xdata$x:000011F8                                         ; DATA XREF: .xdata$x:00001218o
.xdata$x:000011FC                 db    0
.xdata$x:000011FD                 db    0
.xdata$x:000011FE                 db    0
.xdata$x:000011FF                 db    0
.xdata$x:00001200                 db    0
.xdata$x:00001201                 db    0
.xdata$x:00001202                 db    0
.xdata$x:00001203                 db    0
.xdata$x:00001204                 dd offset __catch$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ$0
.xdata$x:00001208 __tryblocktable$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ db    0
.xdata$x:00001208                                         ; DATA XREF: .xdata$x:00001244o
.xdata$x:00001209                 db    0
.xdata$x:0000120A                 db    0
.xdata$x:0000120B                 db    0
.xdata$x:0000120C                 db    1
.xdata$x:0000120D                 db    0
.xdata$x:0000120E                 db    0
.xdata$x:0000120F                 db    0
.xdata$x:00001210                 db    2
.xdata$x:00001211                 db    0
.xdata$x:00001212                 db    0
.xdata$x:00001213                 db    0
.xdata$x:00001214                 db    1
.xdata$x:00001215                 db    0
.xdata$x:00001216                 db    0
.xdata$x:00001217                 db    0
.xdata$x:00001218                 dd offset __catchsym$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ$3
.xdata$x:0000121C __unwindtable$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ db 0FFh
.xdata$x:0000121C                                         ; DATA XREF: .xdata$x:0000123Co
.xdata$x:0000121D                 db 0FFh
.xdata$x:0000121E                 db 0FFh
.xdata$x:0000121F                 db 0FFh
.xdata$x:00001220                 db    0
.xdata$x:00001221                 db    0
.xdata$x:00001222                 db    0
.xdata$x:00001223                 db    0
.xdata$x:00001224                 db    0
.xdata$x:00001225                 db    0
.xdata$x:00001226                 db    0
.xdata$x:00001227                 db    0
.xdata$x:00001228                 dd offset __unwindfunclet$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ$2
.xdata$x:0000122C                 db 0FFh
.xdata$x:0000122D                 db 0FFh
.xdata$x:0000122E                 db 0FFh
.xdata$x:0000122F                 db 0FFh
.xdata$x:00001230                 db    0
.xdata$x:00001231                 db    0
.xdata$x:00001232                 db    0
.xdata$x:00001233                 db    0
.xdata$x:00001234 __ehfuncinfo$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ db  22h ; "
.xdata$x:00001234                                         ; DATA XREF: __ehhandler$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ+11o
.xdata$x:00001235                 db    5
.xdata$x:00001236                 db  93h ; ô
.xdata$x:00001237                 db  19h
.xdata$x:00001238                 db    3
.xdata$x:00001239                 db    0
.xdata$x:0000123A                 db    0
.xdata$x:0000123B                 db    0
.xdata$x:0000123C                 dd offset __unwindtable$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ
.xdata$x:00001240                 db    1
.xdata$x:00001241                 db    0
.xdata$x:00001242                 db    0
.xdata$x:00001243                 db    0
.xdata$x:00001244                 dd offset __tryblocktable$?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ
.xdata$x:00001248                 db    0
.xdata$x:00001249                 db    0
.xdata$x:0000124A                 db    0
.xdata$x:0000124B                 db    0
.xdata$x:0000124C                 db    0
.xdata$x:0000124D                 db    0
.xdata$x:0000124E                 db    0
.xdata$x:0000124F                 db    0
.xdata$x:00001250                 db    0
.xdata$x:00001251                 db    0
.xdata$x:00001252                 db    0
.xdata$x:00001253                 db    0
.xdata$x:00001254                 db    1
.xdata$x:00001255                 db    0
.xdata$x:00001256                 db    0
.xdata$x:00001257                 db    0
.xdata$x:00001257 _xdata$x        ends
.xdata$x:00001257
.text:00001258 ; ===========================================================================
.text:00001258
.text:00001258 ; Segment type: Pure code
.text:00001258 ; Segment permissions: Read/Execute
.text:00001258 _text           segment para public 'CODE' use32
.text:00001258                 assume cs:_text
.text:00001258                 ;org 1258h
.text:00001258 ; COMDAT (pick any)
.text:00001258                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001258
.text:00001258 ; =============== S U B R O U T I N E =======================================
.text:00001258
.text:00001258 ; Attributes: bp-based frame
.text:00001258
.text:00001258 ; _DWORD __thiscall NCrypto::N7z::CKeyInfo::CKeyInfo(NCrypto::N7z::CKeyInfo *__hidden this)
.text:00001258                 public ??0CKeyInfo@N7z@NCrypto@@QAE@XZ
.text:00001258 ??0CKeyInfo@N7z@NCrypto@@QAE@XZ proc near
.text:00001258                                         ; CODE XREF: NCrypto::N7z::CBase::CBase(void)+4Dp
.text:00001258
.text:00001258 var_10          = dword ptr -10h
.text:00001258 var_C           = dword ptr -0Ch
.text:00001258 var_4           = dword ptr -4
.text:00001258
.text:00001258                 push    ebp
.text:00001259                 mov     ebp, esp
.text:0000125B                 push    0FFFFFFFFh
.text:0000125D                 push    offset __ehhandler$??0CKeyInfo@N7z@NCrypto@@QAE@XZ
.text:00001262                 mov     eax, large fs:0
.text:00001268                 push    eax
.text:00001269                 push    ecx
.text:0000126A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001271                 mov     eax, dword ptr ds:___security_cookie
.text:00001276                 xor     eax, ebp
.text:00001278                 push    eax
.text:00001279                 lea     eax, [ebp+var_C]
.text:0000127C                 mov     large fs:0, eax
.text:00001282                 mov     [ebp+var_10], ecx
.text:00001285                 mov     ecx, [ebp+var_10]
.text:00001288                 add     ecx, 18h
.text:0000128B                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00001290                 mov     [ebp+var_4], 0
.text:00001297                 mov     ecx, [ebp+var_10] ; this
.text:0000129A                 call    ?ClearProps@CKeyInfo@N7z@NCrypto@@QAEXXZ ; NCrypto::N7z::CKeyInfo::ClearProps(void)
.text:0000129F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000012A6                 mov     eax, [ebp+var_10]
.text:000012A9                 mov     ecx, [ebp+var_C]
.text:000012AC                 mov     large fs:0, ecx
.text:000012B3                 pop     ecx
.text:000012B4                 add     esp, 10h
.text:000012B7                 cmp     ebp, esp
.text:000012B9                 call    __RTC_CheckEsp
.text:000012BE                 mov     esp, ebp
.text:000012C0                 pop     ebp
.text:000012C1                 retn
.text:000012C1 ??0CKeyInfo@N7z@NCrypto@@QAE@XZ endp
.text:000012C1
.text:000012C1 ; ---------------------------------------------------------------------------
.text:000012C2                 align 4
.text:000012C2 _text           ends
.text:000012C2
.text$x:000012C4 ; ===========================================================================
.text$x:000012C4
.text$x:000012C4 ; Segment type: Pure code
.text$x:000012C4 ; Segment permissions: Read/Execute
.text$x:000012C4 _text$x         segment para public 'CODE' use32
.text$x:000012C4                 assume cs:_text$x
.text$x:000012C4                 ;org 12C4h
.text$x:000012C4 ; COMDAT (pick associative to section at 1258)
.text$x:000012C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000012C4
.text$x:000012C4 ; =============== S U B R O U T I N E =======================================
.text$x:000012C4
.text$x:000012C4
.text$x:000012C4 __unwindfunclet$??0CKeyInfo@N7z@NCrypto@@QAE@XZ$0 proc near
.text$x:000012C4                                         ; DATA XREF: .xdata$x:000012F0o
.text$x:000012C4                 mov     ecx, [ebp-10h]
.text$x:000012C7                 add     ecx, 18h
.text$x:000012CA                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:000012CA __unwindfunclet$??0CKeyInfo@N7z@NCrypto@@QAE@XZ$0 endp
.text$x:000012CA
.text$x:000012CF
.text$x:000012CF ; =============== S U B R O U T I N E =======================================
.text$x:000012CF
.text$x:000012CF
.text$x:000012CF __ehhandler$??0CKeyInfo@N7z@NCrypto@@QAE@XZ proc near
.text$x:000012CF                                         ; DATA XREF: NCrypto::N7z::CKeyInfo::CKeyInfo(void)+5o
.text$x:000012CF
.text$x:000012CF arg_4           = dword ptr  8
.text$x:000012CF
.text$x:000012CF                 mov     edx, [esp+arg_4]
.text$x:000012D3                 lea     eax, [edx+0Ch]
.text$x:000012D6                 mov     ecx, [edx-8]
.text$x:000012D9                 xor     ecx, eax
.text$x:000012DB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000012E0                 mov     eax, offset __ehfuncinfo$??0CKeyInfo@N7z@NCrypto@@QAE@XZ
.text$x:000012E5                 jmp     ___CxxFrameHandler3
.text$x:000012E5 __ehhandler$??0CKeyInfo@N7z@NCrypto@@QAE@XZ endp
.text$x:000012E5
.text$x:000012E5 ; ---------------------------------------------------------------------------
.text$x:000012EA                 align 4
.text$x:000012EA _text$x         ends
.text$x:000012EA
.xdata$x:000012EC ; ===========================================================================
.xdata$x:000012EC
.xdata$x:000012EC ; Segment type: Pure data
.xdata$x:000012EC ; Segment permissions: Read
.xdata$x:000012EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000012EC                 assume cs:_xdata$x
.xdata$x:000012EC                 ;org 12ECh
.xdata$x:000012EC ; COMDAT (pick associative to section at 1258)
.xdata$x:000012EC __unwindtable$??0CKeyInfo@N7z@NCrypto@@QAE@XZ db 0FFh
.xdata$x:000012EC                                         ; DATA XREF: .xdata$x:000012FCo
.xdata$x:000012ED                 db 0FFh
.xdata$x:000012EE                 db 0FFh
.xdata$x:000012EF                 db 0FFh
.xdata$x:000012F0                 dd offset __unwindfunclet$??0CKeyInfo@N7z@NCrypto@@QAE@XZ$0
.xdata$x:000012F4 __ehfuncinfo$??0CKeyInfo@N7z@NCrypto@@QAE@XZ db  22h ; "
.xdata$x:000012F4                                         ; DATA XREF: __ehhandler$??0CKeyInfo@N7z@NCrypto@@QAE@XZ+11o
.xdata$x:000012F5                 db    5
.xdata$x:000012F6                 db  93h ; ô
.xdata$x:000012F7                 db  19h
.xdata$x:000012F8                 db    1
.xdata$x:000012F9                 db    0
.xdata$x:000012FA                 db    0
.xdata$x:000012FB                 db    0
.xdata$x:000012FC                 dd offset __unwindtable$??0CKeyInfo@N7z@NCrypto@@QAE@XZ
.xdata$x:00001300                 db    0
.xdata$x:00001301                 db    0
.xdata$x:00001302                 db    0
.xdata$x:00001303                 db    0
.xdata$x:00001304                 db    0
.xdata$x:00001305                 db    0
.xdata$x:00001306                 db    0
.xdata$x:00001307                 db    0
.xdata$x:00001308                 db    0
.xdata$x:00001309                 db    0
.xdata$x:0000130A                 db    0
.xdata$x:0000130B                 db    0
.xdata$x:0000130C                 db    0
.xdata$x:0000130D                 db    0
.xdata$x:0000130E                 db    0
.xdata$x:0000130F                 db    0
.xdata$x:00001310                 db    0
.xdata$x:00001311                 db    0
.xdata$x:00001312                 db    0
.xdata$x:00001313                 db    0
.xdata$x:00001314                 db    1
.xdata$x:00001315                 db    0
.xdata$x:00001316                 db    0
.xdata$x:00001317                 db    0
.xdata$x:00001317 _xdata$x        ends
.xdata$x:00001317
.text:00001318 ; ===========================================================================
.text:00001318
.text:00001318 ; Segment type: Pure code
.text:00001318 ; Segment permissions: Read/Execute
.text:00001318 _text           segment para public 'CODE' use32
.text:00001318                 assume cs:_text
.text:00001318                 ;org 1318h
.text:00001318 ; COMDAT (pick any)
.text:00001318                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001318
.text:00001318 ; =============== S U B R O U T I N E =======================================
.text:00001318
.text:00001318 ; Attributes: bp-based frame
.text:00001318
.text:00001318 ; void __thiscall NCrypto::N7z::CKeyInfo::ClearProps(NCrypto::N7z::CKeyInfo *__hidden this)
.text:00001318                 public ?ClearProps@CKeyInfo@N7z@NCrypto@@QAEXXZ
.text:00001318 ?ClearProps@CKeyInfo@N7z@NCrypto@@QAEXXZ proc near
.text:00001318                                         ; CODE XREF: NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)+20p
.text:00001318                                         ; NCrypto::N7z::CKeyInfo::CKeyInfo(void)+42p
.text:00001318
.text:00001318 var_8           = dword ptr -8
.text:00001318 var_4           = dword ptr -4
.text:00001318
.text:00001318                 push    ebp
.text:00001319                 mov     ebp, esp
.text:0000131B                 sub     esp, 8
.text:0000131E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001325                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000132C                 mov     [ebp+var_4], ecx
.text:0000132F                 mov     eax, [ebp+var_4]
.text:00001332                 mov     dword ptr [eax], 0
.text:00001338                 mov     ecx, [ebp+var_4]
.text:0000133B                 mov     dword ptr [ecx+4], 0
.text:00001342                 mov     [ebp+var_8], 0
.text:00001349                 jmp     short loc_1354
.text:0000134B ; ---------------------------------------------------------------------------
.text:0000134B
.text:0000134B loc_134B:                               ; CODE XREF: NCrypto::N7z::CKeyInfo::ClearProps(void)+4Cj
.text:0000134B                 mov     edx, [ebp+var_8]
.text:0000134E                 add     edx, 1
.text:00001351                 mov     [ebp+var_8], edx
.text:00001354
.text:00001354 loc_1354:                               ; CODE XREF: NCrypto::N7z::CKeyInfo::ClearProps(void)+31j
.text:00001354                 cmp     [ebp+var_8], 10h
.text:00001358                 jnb     short loc_1366
.text:0000135A                 mov     eax, [ebp+var_4]
.text:0000135D                 add     eax, [ebp+var_8]
.text:00001360                 mov     byte ptr [eax+8], 0
.text:00001364                 jmp     short loc_134B
.text:00001366 ; ---------------------------------------------------------------------------
.text:00001366
.text:00001366 loc_1366:                               ; CODE XREF: NCrypto::N7z::CKeyInfo::ClearProps(void)+40j
.text:00001366                 mov     esp, ebp
.text:00001368                 pop     ebp
.text:00001369                 retn
.text:00001369 ?ClearProps@CKeyInfo@N7z@NCrypto@@QAEXXZ endp
.text:00001369
.text:00001369 ; ---------------------------------------------------------------------------
.text:0000136A                 align 4
.text:0000136A _text           ends
.text:0000136A
.text:0000136C ; ===========================================================================
.text:0000136C
.text:0000136C ; Segment type: Pure code
.text:0000136C ; Segment permissions: Read/Execute
.text:0000136C _text           segment para public 'CODE' use32
.text:0000136C                 assume cs:_text
.text:0000136C                 ;org 136Ch
.text:0000136C ; COMDAT (pick any)
.text:0000136C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000136C
.text:0000136C ; =============== S U B R O U T I N E =======================================
.text:0000136C
.text:0000136C ; Attributes: bp-based frame
.text:0000136C
.text:0000136C ; _DWORD __thiscall NCrypto::N7z::CKeyInfoCache::CKeyInfoCache(NCrypto::N7z::CKeyInfoCache *this, unsigned int)
.text:0000136C                 public ??0CKeyInfoCache@N7z@NCrypto@@QAE@I@Z
.text:0000136C ??0CKeyInfoCache@N7z@NCrypto@@QAE@I@Z proc near
.text:0000136C                                         ; CODE XREF: NCrypto::N7z::CBase::CBase(void)+3Bp
.text:0000136C                                         ; NCrypto::N7z::`dynamic initializer for 'g_GlobalKeyCache''(void)+Ap
.text:0000136C
.text:0000136C var_4           = dword ptr -4
.text:0000136C arg_0           = dword ptr  8
.text:0000136C
.text:0000136C                 push    ebp
.text:0000136D                 mov     ebp, esp
.text:0000136F                 push    ecx
.text:00001370                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001377                 mov     [ebp+var_4], ecx
.text:0000137A                 mov     eax, [ebp+var_4]
.text:0000137D                 mov     ecx, [ebp+arg_0]
.text:00001380                 mov     [eax], ecx
.text:00001382                 mov     ecx, [ebp+var_4]
.text:00001385                 add     ecx, 4
.text:00001388                 call    ??0?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ ; CObjectVector<NCrypto::N7z::CKeyInfo>::CObjectVector<NCrypto::N7z::CKeyInfo>(void)
.text:0000138D                 mov     eax, [ebp+var_4]
.text:00001390                 add     esp, 4
.text:00001393                 cmp     ebp, esp
.text:00001395                 call    __RTC_CheckEsp
.text:0000139A                 mov     esp, ebp
.text:0000139C                 pop     ebp
.text:0000139D                 retn    4
.text:0000139D ??0CKeyInfoCache@N7z@NCrypto@@QAE@I@Z endp
.text:0000139D
.text:0000139D _text           ends
.text:0000139D
.text:000013A0 ; ===========================================================================
.text:000013A0
.text:000013A0 ; Segment type: Pure code
.text:000013A0 ; Segment permissions: Read/Execute
.text:000013A0 _text           segment para public 'CODE' use32
.text:000013A0                 assume cs:_text
.text:000013A0                 ;org 13A0h
.text:000013A0 ; COMDAT (pick any)
.text:000013A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000013A0
.text:000013A0 ; =============== S U B R O U T I N E =======================================
.text:000013A0
.text:000013A0 ; Attributes: bp-based frame
.text:000013A0
.text:000013A0 ; _DWORD __thiscall NCrypto::N7z::CKeyInfoCache::~CKeyInfoCache(NCrypto::N7z::CKeyInfoCache *__hidden this)
.text:000013A0                 public ??1CKeyInfoCache@N7z@NCrypto@@QAE@XZ
.text:000013A0 ??1CKeyInfoCache@N7z@NCrypto@@QAE@XZ proc near
.text:000013A0                                         ; CODE XREF: __unwindfunclet$??0CBase@N7z@NCrypto@@IAE@XZ$0+3j
.text:000013A0                                         ; NCrypto::N7z::CBase::~CBase(void)+49p ...
.text:000013A0
.text:000013A0 var_4           = dword ptr -4
.text:000013A0
.text:000013A0                 push    ebp
.text:000013A1                 mov     ebp, esp
.text:000013A3                 push    ecx
.text:000013A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013AB                 mov     [ebp+var_4], ecx
.text:000013AE                 mov     ecx, [ebp+var_4]
.text:000013B1                 add     ecx, 4
.text:000013B4                 call    ??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ ; CObjectVector<NCrypto::N7z::CKeyInfo>::~CObjectVector<NCrypto::N7z::CKeyInfo>(void)
.text:000013B9                 add     esp, 4
.text:000013BC                 cmp     ebp, esp
.text:000013BE                 call    __RTC_CheckEsp
.text:000013C3                 mov     esp, ebp
.text:000013C5                 pop     ebp
.text:000013C6                 retn
.text:000013C6 ??1CKeyInfoCache@N7z@NCrypto@@QAE@XZ endp
.text:000013C6
.text:000013C6 ; ---------------------------------------------------------------------------
.text:000013C7                 align 4
.text:000013C7 _text           ends
.text:000013C7
.text:000013C8 ; ===========================================================================
.text:000013C8
.text:000013C8 ; Segment type: Pure code
.text:000013C8 ; Segment permissions: Read/Execute
.text:000013C8 _text           segment para public 'CODE' use32
.text:000013C8                 assume cs:_text
.text:000013C8                 ;org 13C8h
.text:000013C8 ; COMDAT (pick any)
.text:000013C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000013C8
.text:000013C8 ; =============== S U B R O U T I N E =======================================
.text:000013C8
.text:000013C8 ; Attributes: bp-based frame
.text:000013C8
.text:000013C8 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *this, struct NWindows::NSynchronization::CCriticalSection *)
.text:000013C8                 public ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
.text:000013C8 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z proc near
.text:000013C8                                         ; CODE XREF: NCrypto::N7z::CBase::PrepareKey(void)+44p
.text:000013C8
.text:000013C8 var_4           = dword ptr -4
.text:000013C8 arg_0           = dword ptr  8
.text:000013C8
.text:000013C8                 push    ebp
.text:000013C9                 mov     ebp, esp
.text:000013CB                 push    ecx
.text:000013CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013D3                 mov     [ebp+var_4], ecx
.text:000013D6                 mov     eax, [ebp+var_4]
.text:000013D9                 mov     ecx, [ebp+arg_0]
.text:000013DC                 mov     [eax], ecx
.text:000013DE                 mov     edx, [ebp+var_4]
.text:000013E1                 mov     ecx, [edx]      ; this
.text:000013E3                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:000013E8                 mov     eax, [ebp+var_4]
.text:000013EB                 add     esp, 4
.text:000013EE                 cmp     ebp, esp
.text:000013F0                 call    __RTC_CheckEsp
.text:000013F5                 mov     esp, ebp
.text:000013F7                 pop     ebp
.text:000013F8                 retn    4
.text:000013F8 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z endp
.text:000013F8
.text:000013F8 ; ---------------------------------------------------------------------------
.text:000013FB                 align 4
.text:000013FB _text           ends
.text:000013FB
.text:000013FC ; ===========================================================================
.text:000013FC
.text:000013FC ; Segment type: Pure code
.text:000013FC ; Segment permissions: Read/Execute
.text:000013FC _text           segment para public 'CODE' use32
.text:000013FC                 assume cs:_text
.text:000013FC                 ;org 13FCh
.text:000013FC ; COMDAT (pick any)
.text:000013FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000013FC
.text:000013FC ; =============== S U B R O U T I N E =======================================
.text:000013FC
.text:000013FC ; Attributes: bp-based frame
.text:000013FC
.text:000013FC ; void __thiscall NWindows::NSynchronization::CCriticalSection::Enter(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:000013FC                 public ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:000013FC ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:000013FC                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)+1Bp
.text:000013FC
.text:000013FC lpCriticalSection= dword ptr -4
.text:000013FC
.text:000013FC                 push    ebp
.text:000013FD                 mov     ebp, esp
.text:000013FF                 push    ecx
.text:00001400                 push    esi
.text:00001401                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00001408                 mov     [ebp+lpCriticalSection], ecx
.text:0000140B                 mov     esi, esp
.text:0000140D                 mov     eax, [ebp+lpCriticalSection]
.text:00001410                 push    eax             ; lpCriticalSection
.text:00001411                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00001417                 cmp     esi, esp
.text:00001419                 call    __RTC_CheckEsp
.text:0000141E                 pop     esi
.text:0000141F                 add     esp, 4
.text:00001422                 cmp     ebp, esp
.text:00001424                 call    __RTC_CheckEsp
.text:00001429                 mov     esp, ebp
.text:0000142B                 pop     ebp
.text:0000142C                 retn
.text:0000142C ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:0000142C
.text:0000142C ; ---------------------------------------------------------------------------
.text:0000142D                 align 10h
.text:0000142D _text           ends
.text:0000142D
.text:00001430 ; ===========================================================================
.text:00001430
.text:00001430 ; Segment type: Pure code
.text:00001430 ; Segment permissions: Read/Execute
.text:00001430 _text           segment para public 'CODE' use32
.text:00001430                 assume cs:_text
.text:00001430                 ;org 1430h
.text:00001430 ; COMDAT (pick any)
.text:00001430                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001430
.text:00001430 ; =============== S U B R O U T I N E =======================================
.text:00001430
.text:00001430 ; Attributes: bp-based frame
.text:00001430
.text:00001430 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:00001430                 public ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
.text:00001430 ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ proc near
.text:00001430                                         ; CODE XREF: NCrypto::N7z::CBase::PrepareKey(void)+C3p
.text:00001430                                         ; __unwindfunclet$?PrepareKey@CBase@N7z@NCrypto@@IAEXXZ$0+3j
.text:00001430
.text:00001430 var_4           = dword ptr -4
.text:00001430
.text:00001430                 push    ebp
.text:00001431                 mov     ebp, esp
.text:00001433                 push    ecx
.text:00001434                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000143B                 mov     [ebp+var_4], ecx
.text:0000143E                 mov     ecx, [ebp+var_4] ; this
.text:00001441                 call    ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)
.text:00001446                 add     esp, 4
.text:00001449                 cmp     ebp, esp
.text:0000144B                 call    __RTC_CheckEsp
.text:00001450                 mov     esp, ebp
.text:00001452                 pop     ebp
.text:00001453                 retn
.text:00001453 ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ endp
.text:00001453
.text:00001453 _text           ends
.text:00001453
.text:00001454 ; ===========================================================================
.text:00001454
.text:00001454 ; Segment type: Pure code
.text:00001454 ; Segment permissions: Read/Execute
.text:00001454 _text           segment para public 'CODE' use32
.text:00001454                 assume cs:_text
.text:00001454                 ;org 1454h
.text:00001454 ; COMDAT (pick any)
.text:00001454                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001454
.text:00001454 ; =============== S U B R O U T I N E =======================================
.text:00001454
.text:00001454 ; Attributes: bp-based frame
.text:00001454
.text:00001454 ; void __thiscall NWindows::NSynchronization::CCriticalSectionLock::Unlock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:00001454                 public ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
.text:00001454 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ proc near
.text:00001454                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)+11p
.text:00001454
.text:00001454 var_4           = dword ptr -4
.text:00001454
.text:00001454                 push    ebp
.text:00001455                 mov     ebp, esp
.text:00001457                 push    ecx
.text:00001458                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000145F                 mov     [ebp+var_4], ecx
.text:00001462                 mov     eax, [ebp+var_4]
.text:00001465                 mov     ecx, [eax]      ; this
.text:00001467                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:0000146C                 add     esp, 4
.text:0000146F                 cmp     ebp, esp
.text:00001471                 call    __RTC_CheckEsp
.text:00001476                 mov     esp, ebp
.text:00001478                 pop     ebp
.text:00001479                 retn
.text:00001479 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ endp
.text:00001479
.text:00001479 ; ---------------------------------------------------------------------------
.text:0000147A                 align 4
.text:0000147A _text           ends
.text:0000147A
.text:0000147C ; ===========================================================================
.text:0000147C
.text:0000147C ; Segment type: Pure code
.text:0000147C ; Segment permissions: Read/Execute
.text:0000147C _text           segment para public 'CODE' use32
.text:0000147C                 assume cs:_text
.text:0000147C                 ;org 147Ch
.text:0000147C ; COMDAT (pick any)
.text:0000147C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000147C
.text:0000147C ; =============== S U B R O U T I N E =======================================
.text:0000147C
.text:0000147C ; Attributes: bp-based frame
.text:0000147C
.text:0000147C ; void __thiscall NWindows::NSynchronization::CCriticalSection::Leave(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:0000147C                 public ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:0000147C ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:0000147C                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)+13p
.text:0000147C
.text:0000147C lpCriticalSection= dword ptr -4
.text:0000147C
.text:0000147C                 push    ebp
.text:0000147D                 mov     ebp, esp
.text:0000147F                 push    ecx
.text:00001480                 push    esi
.text:00001481                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00001488                 mov     [ebp+lpCriticalSection], ecx
.text:0000148B                 mov     esi, esp
.text:0000148D                 mov     eax, [ebp+lpCriticalSection]
.text:00001490                 push    eax             ; lpCriticalSection
.text:00001491                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00001497                 cmp     esi, esp
.text:00001499                 call    __RTC_CheckEsp
.text:0000149E                 pop     esi
.text:0000149F                 add     esp, 4
.text:000014A2                 cmp     ebp, esp
.text:000014A4                 call    __RTC_CheckEsp
.text:000014A9                 mov     esp, ebp
.text:000014AB                 pop     ebp
.text:000014AC                 retn
.text:000014AC ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:000014AC
.text:000014AC ; ---------------------------------------------------------------------------
.text:000014AD                 align 10h
.text:000014AD _text           ends
.text:000014AD
.rdata:000014B0 ; ===========================================================================
.rdata:000014B0
.rdata:000014B0 ; Segment type: Pure data
.rdata:000014B0 ; Segment permissions: Read
.rdata:000014B0 _rdata          segment dword public 'DATA' use32
.rdata:000014B0                 assume cs:_rdata
.rdata:000014B0                 ;org 14B0h
.rdata:000014B0 ; COMDAT (pick largest)
.rdata:000014B0                 dd offset ??_R4CEncoder@N7z@NCrypto@@6BICryptoResetInitVector@@@ ; const NCrypto::N7z::CEncoder::`RTTI Complete Object Locator'{for `ICryptoResetInitVector'}
.rdata:000014B4                 public ??_7CEncoder@N7z@NCrypto@@6BICryptoResetInitVector@@@
.rdata:000014B4 ; const NCrypto::N7z::CEncoder::`vftable'{for `ICryptoResetInitVector'}
.rdata:000014B4 ??_7CEncoder@N7z@NCrypto@@6BICryptoResetInitVector@@@ dd offset ?QueryInterface@CEncoder@N7z@NCrypto@@WHI@AGJABU_GUID@@PAPAX@Z
.rdata:000014B4                                         ; DATA XREF: NCrypto::N7z::CEncoder::CEncoder(void)+7Eo
.rdata:000014B4                                         ; [thunk]:NCrypto::N7z::CEncoder::QueryInterface`adjustor{120}' (_GUID const &,void * *)
.rdata:000014B8                 dd offset ?AddRef@CEncoder@N7z@NCrypto@@WHI@AGKXZ ; [thunk]:NCrypto::N7z::CEncoder::AddRef`adjustor{120}' (void)
.rdata:000014BC                 dd offset ?Release@CEncoder@N7z@NCrypto@@WHI@AGKXZ ; [thunk]:NCrypto::N7z::CEncoder::Release`adjustor{120}' (void)
.rdata:000014C0                 dd offset ?ResetInitVector@CEncoder@N7z@NCrypto@@UAGJXZ ; NCrypto::N7z::CEncoder::ResetInitVector(void)
.rdata:000014C0 _rdata          ends
.rdata:000014C0
.rdata:000014C4 ; ===========================================================================
.rdata:000014C4
.rdata:000014C4 ; Segment type: Pure data
.rdata:000014C4 ; Segment permissions: Read
.rdata:000014C4 _rdata          segment dword public 'DATA' use32
.rdata:000014C4                 assume cs:_rdata
.rdata:000014C4                 ;org 14C4h
.rdata:000014C4 ; COMDAT (pick largest)
.rdata:000014C4                 dd offset ??_R4CEncoder@N7z@NCrypto@@6BICompressWriteCoderProperties@@@ ; const NCrypto::N7z::CEncoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata:000014C8                 public ??_7CEncoder@N7z@NCrypto@@6BICompressWriteCoderProperties@@@
.rdata:000014C8 ; const NCrypto::N7z::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.rdata:000014C8 ??_7CEncoder@N7z@NCrypto@@6BICompressWriteCoderProperties@@@ dd offset ?QueryInterface@CEncoder@N7z@NCrypto@@WHE@AGJABU_GUID@@PAPAX@Z
.rdata:000014C8                                         ; DATA XREF: NCrypto::N7z::CEncoder::CEncoder(void)+74o
.rdata:000014C8                                         ; [thunk]:NCrypto::N7z::CEncoder::QueryInterface`adjustor{116}' (_GUID const &,void * *)
.rdata:000014CC                 dd offset ?AddRef@CEncoder@N7z@NCrypto@@WHE@AGKXZ ; [thunk]:NCrypto::N7z::CEncoder::AddRef`adjustor{116}' (void)
.rdata:000014D0                 dd offset ?Release@CEncoder@N7z@NCrypto@@WHE@AGKXZ ; [thunk]:NCrypto::N7z::CEncoder::Release`adjustor{116}' (void)
.rdata:000014D4                 dd offset ?WriteCoderProperties@CEncoder@N7z@NCrypto@@UAGJPAUISequentialOutStream@@@Z ; NCrypto::N7z::CEncoder::WriteCoderProperties(ISequentialOutStream *)
.rdata:000014D4 _rdata          ends
.rdata:000014D4
.rdata:000014D8 ; ===========================================================================
.rdata:000014D8
.rdata:000014D8 ; Segment type: Pure data
.rdata:000014D8 ; Segment permissions: Read
.rdata:000014D8 _rdata          segment dword public 'DATA' use32
.rdata:000014D8                 assume cs:_rdata
.rdata:000014D8                 ;org 14D8h
.rdata:000014D8 ; COMDAT (pick largest)
.rdata:000014D8                 dd offset ??_R4CEncoder@N7z@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::N7z::CEncoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:000014DC                 public ??_7CEncoder@N7z@NCrypto@@6BICryptoSetPassword@@@
.rdata:000014DC ; const NCrypto::N7z::CEncoder::`vftable'{for `ICryptoSetPassword'}
.rdata:000014DC ??_7CEncoder@N7z@NCrypto@@6BICryptoSetPassword@@@ dd offset ?QueryInterface@CEncoder@N7z@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000014DC                                         ; DATA XREF: NCrypto::N7z::CEncoder::CEncoder(void)+6Ao
.rdata:000014DC                                         ; [thunk]:NCrypto::N7z::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000014E0                 dd offset ?AddRef@CEncoder@N7z@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::N7z::CEncoder::AddRef`adjustor{4}' (void)
.rdata:000014E4                 dd offset ?Release@CEncoder@N7z@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::N7z::CEncoder::Release`adjustor{4}' (void)
.rdata:000014E8                 dd offset ?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z ; NCrypto::N7z::CBaseCoder::CryptoSetPassword(uchar const *,uint)
.rdata:000014E8 _rdata          ends
.rdata:000014E8
.rdata:000014EC ; ===========================================================================
.rdata:000014EC
.rdata:000014EC ; Segment type: Pure data
.rdata:000014EC ; Segment permissions: Read
.rdata:000014EC _rdata          segment dword public 'DATA' use32
.rdata:000014EC                 assume cs:_rdata
.rdata:000014EC                 ;org 14ECh
.rdata:000014EC ; COMDAT (pick largest)
.rdata:000014EC                 dd offset ??_R4CEncoder@N7z@NCrypto@@6BICompressFilter@@@ ; const NCrypto::N7z::CEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:000014F0                 public ??_7CEncoder@N7z@NCrypto@@6BICompressFilter@@@
.rdata:000014F0 ; const NCrypto::N7z::CEncoder::`vftable'{for `ICompressFilter'}
.rdata:000014F0 ??_7CEncoder@N7z@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CEncoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:000014F0                                         ; DATA XREF: NCrypto::N7z::CEncoder::CEncoder(void)+61o
.rdata:000014F0                                         ; NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)
.rdata:000014F4                 dd offset ?AddRef@CEncoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CEncoder::AddRef(void)
.rdata:000014F8                 dd offset ?Release@CEncoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CEncoder::Release(void)
.rdata:000014FC                 dd offset ?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ ; NCrypto::N7z::CBaseCoder::Init(void)
.rdata:00001500                 dd offset ?Filter@CBaseCoder@N7z@NCrypto@@UAGIPAEI@Z ; NCrypto::N7z::CBaseCoder::Filter(uchar *,uint)
.rdata:00001500 _rdata          ends
.rdata:00001500
.rdata$r:00001504 ; ===========================================================================
.rdata$r:00001504
.rdata$r:00001504 ; Segment type: Pure data
.rdata$r:00001504 ; Segment permissions: Read
.rdata$r:00001504 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001504                 assume cs:_rdata$r
.rdata$r:00001504                 ;org 1504h
.rdata$r:00001504 ; COMDAT (pick any)
.rdata$r:00001504                 public ??_R4CEncoder@N7z@NCrypto@@6BICompressFilter@@@
.rdata$r:00001504 ; const NCrypto::N7z::CEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00001504 ??_R4CEncoder@N7z@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00001504                                         ; DATA XREF: .rdata:000014ECo
.rdata$r:00001505                 db    0
.rdata$r:00001506                 db    0
.rdata$r:00001507                 db    0
.rdata$r:00001508                 db    0
.rdata$r:00001509                 db    0
.rdata$r:0000150A                 db    0
.rdata$r:0000150B                 db    0
.rdata$r:0000150C                 db    0
.rdata$r:0000150D                 db    0
.rdata$r:0000150E                 db    0
.rdata$r:0000150F                 db    0
.rdata$r:00001510                 dd offset ??_R0?AVCEncoder@N7z@NCrypto@@@8 ; NCrypto::N7z::CEncoder `RTTI Type Descriptor'
.rdata$r:00001514                 dd offset ??_R3CEncoder@N7z@NCrypto@@8 ; NCrypto::N7z::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001514 _rdata$r        ends
.rdata$r:00001514
.data:00001518 ; ===========================================================================
.data:00001518
.data:00001518 ; Segment type: Pure data
.data:00001518 ; Segment permissions: Read/Write
.data:00001518 _data           segment dword public 'DATA' use32
.data:00001518                 assume cs:_data
.data:00001518                 ;org 1518h
.data:00001518 ; COMDAT (pick any)
.data:00001518                 public ??_R0?AVCEncoder@N7z@NCrypto@@@8
.data:00001518 ; class NCrypto::N7z::CEncoder `RTTI Type Descriptor'
.data:00001518 ??_R0?AVCEncoder@N7z@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00001518                                         ; DATA XREF: .rdata$r:00001510o
.data:00001518                                         ; .rdata$r:NCrypto::N7z::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001518                                         ; const type_info::`vftable'
.data:0000151C                 align 10h
.data:00001520 a_?avcencoder@n db '.?AVCEncoder@N7z@NCrypto@@',0
.data:0000153B                 align 4
.data:0000153B _data           ends
.data:0000153B
.rdata$r:0000153C ; ===========================================================================
.rdata$r:0000153C
.rdata$r:0000153C ; Segment type: Pure data
.rdata$r:0000153C ; Segment permissions: Read
.rdata$r:0000153C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000153C                 assume cs:_rdata$r
.rdata$r:0000153C                 ;org 153Ch
.rdata$r:0000153C ; COMDAT (pick any)
.rdata$r:0000153C                 public ??_R3CEncoder@N7z@NCrypto@@8
.rdata$r:0000153C ; NCrypto::N7z::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000153C ??_R3CEncoder@N7z@NCrypto@@8 db    0    ; DATA XREF: .rdata$r:00001514o
.rdata$r:0000153C                                         ; .rdata$r:00001598o ...
.rdata$r:0000153D                 db    0
.rdata$r:0000153E                 db    0
.rdata$r:0000153F                 db    0
.rdata$r:00001540                 db    5
.rdata$r:00001541                 db    0
.rdata$r:00001542                 db    0
.rdata$r:00001543                 db    0
.rdata$r:00001544                 db  0Ch
.rdata$r:00001545                 db    0
.rdata$r:00001546                 db    0
.rdata$r:00001547                 db    0
.rdata$r:00001548                 dd offset ??_R2CEncoder@N7z@NCrypto@@8 ; NCrypto::N7z::CEncoder::`RTTI Base Class Array'
.rdata$r:00001548 _rdata$r        ends
.rdata$r:00001548
.rdata$r:0000154C ; ===========================================================================
.rdata$r:0000154C
.rdata$r:0000154C ; Segment type: Pure data
.rdata$r:0000154C ; Segment permissions: Read
.rdata$r:0000154C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000154C                 assume cs:_rdata$r
.rdata$r:0000154C                 ;org 154Ch
.rdata$r:0000154C ; COMDAT (pick any)
.rdata$r:0000154C                 public ??_R2CEncoder@N7z@NCrypto@@8
.rdata$r:0000154C ; NCrypto::N7z::CEncoder::`RTTI Base Class Array'
.rdata$r:0000154C ??_R2CEncoder@N7z@NCrypto@@8 dd offset ??_R1A@?0A@EA@CEncoder@N7z@NCrypto@@8
.rdata$r:0000154C                                         ; DATA XREF: .rdata$r:00001548o
.rdata$r:0000154C                                         ; NCrypto::N7z::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001550                 dd offset ??_R1A@?0A@EA@CBaseCoder@N7z@NCrypto@@8 ; NCrypto::N7z::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001554                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001558                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000155C                 dd offset ??_R13?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00001560                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00001564                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00001568                 dd offset ??_R1M@?0A@EA@CBase@N7z@NCrypto@@8 ; NCrypto::N7z::CBase::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:0000156C                 dd offset ??_R1HE@?0A@EA@ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (116,-1,0,64)'
.rdata$r:00001570                 dd offset ??_R1HE@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (116,-1,0,66)'
.rdata$r:00001574                 dd offset ??_R1HI@?0A@EA@ICryptoResetInitVector@@8 ; ICryptoResetInitVector::`RTTI Base Class Descriptor at (120,-1,0,64)'
.rdata$r:00001578                 dd offset ??_R1HI@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (120,-1,0,66)'
.rdata$r:0000157C                 db    0
.rdata$r:0000157D                 align 10h
.rdata$r:0000157D _rdata$r        ends
.rdata$r:0000157D
.rdata$r:00001580 ; ===========================================================================
.rdata$r:00001580
.rdata$r:00001580 ; Segment type: Pure data
.rdata$r:00001580 ; Segment permissions: Read
.rdata$r:00001580 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001580                 assume cs:_rdata$r
.rdata$r:00001580                 ;org 1580h
.rdata$r:00001580 ; COMDAT (pick any)
.rdata$r:00001580                 public ??_R1A@?0A@EA@CEncoder@N7z@NCrypto@@8
.rdata$r:00001580 ; NCrypto::N7z::CEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001580 ??_R1A@?0A@EA@CEncoder@N7z@NCrypto@@8 dd offset ??_R0?AVCEncoder@N7z@NCrypto@@@8
.rdata$r:00001580                                         ; DATA XREF: .rdata$r:NCrypto::N7z::CEncoder::`RTTI Base Class Array'o
.rdata$r:00001580                                         ; NCrypto::N7z::CEncoder `RTTI Type Descriptor'
.rdata$r:00001584                 db  0Bh
.rdata$r:00001585                 db    0
.rdata$r:00001586                 db    0
.rdata$r:00001587                 db    0
.rdata$r:00001588                 db    0
.rdata$r:00001589                 db    0
.rdata$r:0000158A                 db    0
.rdata$r:0000158B                 db    0
.rdata$r:0000158C                 db 0FFh
.rdata$r:0000158D                 db 0FFh
.rdata$r:0000158E                 db 0FFh
.rdata$r:0000158F                 db 0FFh
.rdata$r:00001590                 db    0
.rdata$r:00001591                 db    0
.rdata$r:00001592                 db    0
.rdata$r:00001593                 db    0
.rdata$r:00001594                 db  40h ; @
.rdata$r:00001595                 db    0
.rdata$r:00001596                 db    0
.rdata$r:00001597                 db    0
.rdata$r:00001598                 dd offset ??_R3CEncoder@N7z@NCrypto@@8 ; NCrypto::N7z::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001598 _rdata$r        ends
.rdata$r:00001598
.rdata$r:0000159C ; ===========================================================================
.rdata$r:0000159C
.rdata$r:0000159C ; Segment type: Pure data
.rdata$r:0000159C ; Segment permissions: Read
.rdata$r:0000159C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000159C                 assume cs:_rdata$r
.rdata$r:0000159C                 ;org 159Ch
.rdata$r:0000159C ; COMDAT (pick any)
.rdata$r:0000159C                 public ??_R1A@?0A@EA@CBaseCoder@N7z@NCrypto@@8
.rdata$r:0000159C ; NCrypto::N7z::CBaseCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000159C ??_R1A@?0A@EA@CBaseCoder@N7z@NCrypto@@8 dd offset ??_R0?AVCBaseCoder@N7z@NCrypto@@@8
.rdata$r:0000159C                                         ; DATA XREF: .rdata$r:00001550o
.rdata$r:0000159C                                         ; .rdata$r:NCrypto::N7z::CBaseCoder::`RTTI Base Class Array'o ...
.rdata$r:0000159C                                         ; NCrypto::N7z::CBaseCoder `RTTI Type Descriptor'
.rdata$r:000015A0                 db    6
.rdata$r:000015A1                 db    0
.rdata$r:000015A2                 db    0
.rdata$r:000015A3                 db    0
.rdata$r:000015A4                 db    0
.rdata$r:000015A5                 db    0
.rdata$r:000015A6                 db    0
.rdata$r:000015A7                 db    0
.rdata$r:000015A8                 db 0FFh
.rdata$r:000015A9                 db 0FFh
.rdata$r:000015AA                 db 0FFh
.rdata$r:000015AB                 db 0FFh
.rdata$r:000015AC                 db    0
.rdata$r:000015AD                 db    0
.rdata$r:000015AE                 db    0
.rdata$r:000015AF                 db    0
.rdata$r:000015B0                 db  40h ; @
.rdata$r:000015B1                 db    0
.rdata$r:000015B2                 db    0
.rdata$r:000015B3                 db    0
.rdata$r:000015B4                 dd offset ??_R3CBaseCoder@N7z@NCrypto@@8 ; NCrypto::N7z::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000015B4 _rdata$r        ends
.rdata$r:000015B4
.data:000015B8 ; ===========================================================================
.data:000015B8
.data:000015B8 ; Segment type: Pure data
.data:000015B8 ; Segment permissions: Read/Write
.data:000015B8 _data           segment dword public 'DATA' use32
.data:000015B8                 assume cs:_data
.data:000015B8                 ;org 15B8h
.data:000015B8 ; COMDAT (pick any)
.data:000015B8                 public ??_R0?AVCBaseCoder@N7z@NCrypto@@@8
.data:000015B8 ; class NCrypto::N7z::CBaseCoder `RTTI Type Descriptor'
.data:000015B8 ??_R0?AVCBaseCoder@N7z@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:000015B8                                         ; DATA XREF: .rdata$r:NCrypto::N7z::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000015B8                                         ; .rdata$r:00002338o ...
.data:000015B8                                         ; const type_info::`vftable'
.data:000015BC                 align 10h
.data:000015C0 a_?avcbasecoder db '.?AVCBaseCoder@N7z@NCrypto@@',0
.data:000015DD                 align 10h
.data:000015DD _data           ends
.data:000015DD
.rdata$r:000015E0 ; ===========================================================================
.rdata$r:000015E0
.rdata$r:000015E0 ; Segment type: Pure data
.rdata$r:000015E0 ; Segment permissions: Read
.rdata$r:000015E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000015E0                 assume cs:_rdata$r
.rdata$r:000015E0                 ;org 15E0h
.rdata$r:000015E0 ; COMDAT (pick any)
.rdata$r:000015E0                 public ??_R3CBaseCoder@N7z@NCrypto@@8
.rdata$r:000015E0 ; NCrypto::N7z::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000015E0 ??_R3CBaseCoder@N7z@NCrypto@@8 db    0  ; DATA XREF: .rdata$r:000015B4o
.rdata$r:000015E0                                         ; .rdata$r:0000233Co ...
.rdata$r:000015E1                 db    0
.rdata$r:000015E2                 db    0
.rdata$r:000015E3                 db    0
.rdata$r:000015E4                 db    5
.rdata$r:000015E5                 db    0
.rdata$r:000015E6                 db    0
.rdata$r:000015E7                 db    0
.rdata$r:000015E8                 db    7
.rdata$r:000015E9                 db    0
.rdata$r:000015EA                 db    0
.rdata$r:000015EB                 db    0
.rdata$r:000015EC                 dd offset ??_R2CBaseCoder@N7z@NCrypto@@8 ; NCrypto::N7z::CBaseCoder::`RTTI Base Class Array'
.rdata$r:000015EC _rdata$r        ends
.rdata$r:000015EC
.rdata$r:000015F0 ; ===========================================================================
.rdata$r:000015F0
.rdata$r:000015F0 ; Segment type: Pure data
.rdata$r:000015F0 ; Segment permissions: Read
.rdata$r:000015F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000015F0                 assume cs:_rdata$r
.rdata$r:000015F0                 ;org 15F0h
.rdata$r:000015F0 ; COMDAT (pick any)
.rdata$r:000015F0                 public ??_R2CBaseCoder@N7z@NCrypto@@8
.rdata$r:000015F0 ; NCrypto::N7z::CBaseCoder::`RTTI Base Class Array'
.rdata$r:000015F0 ??_R2CBaseCoder@N7z@NCrypto@@8 dd offset ??_R1A@?0A@EA@CBaseCoder@N7z@NCrypto@@8
.rdata$r:000015F0                                         ; DATA XREF: .rdata$r:000015ECo
.rdata$r:000015F0                                         ; NCrypto::N7z::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000015F4                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000015F8                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000015FC                 dd offset ??_R13?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00001600                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00001604                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00001608                 dd offset ??_R1M@?0A@EA@CBase@N7z@NCrypto@@8 ; NCrypto::N7z::CBase::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:0000160C                 db    0
.rdata$r:0000160D                 align 10h
.rdata$r:0000160D _rdata$r        ends
.rdata$r:0000160D
.rdata$r:00001610 ; ===========================================================================
.rdata$r:00001610
.rdata$r:00001610 ; Segment type: Pure data
.rdata$r:00001610 ; Segment permissions: Read
.rdata$r:00001610 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001610                 assume cs:_rdata$r
.rdata$r:00001610                 ;org 1610h
.rdata$r:00001610 ; COMDAT (pick any)
.rdata$r:00001610                 public ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00001610 ; ICompressFilter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001610 ??_R1A@?0A@EA@ICompressFilter@@8 dd offset ??_R0?AUICompressFilter@@@8
.rdata$r:00001610                                         ; DATA XREF: .rdata$r:00001554o
.rdata$r:00001610                                         ; .rdata$r:000015F4o ...
.rdata$r:00001610                                         ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:00001614                 db    1
.rdata$r:00001615                 db    0
.rdata$r:00001616                 db    0
.rdata$r:00001617                 db    0
.rdata$r:00001618                 db    0
.rdata$r:00001619                 db    0
.rdata$r:0000161A                 db    0
.rdata$r:0000161B                 db    0
.rdata$r:0000161C                 db 0FFh
.rdata$r:0000161D                 db 0FFh
.rdata$r:0000161E                 db 0FFh
.rdata$r:0000161F                 db 0FFh
.rdata$r:00001620                 db    0
.rdata$r:00001621                 db    0
.rdata$r:00001622                 db    0
.rdata$r:00001623                 db    0
.rdata$r:00001624                 db  40h ; @
.rdata$r:00001625                 db    0
.rdata$r:00001626                 db    0
.rdata$r:00001627                 db    0
.rdata$r:00001628                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001628 _rdata$r        ends
.rdata$r:00001628
.data:0000162C ; ===========================================================================
.data:0000162C
.data:0000162C ; Segment type: Pure data
.data:0000162C ; Segment permissions: Read/Write
.data:0000162C _data           segment dword public 'DATA' use32
.data:0000162C                 assume cs:_data
.data:0000162C                 ;org 162Ch
.data:0000162C ; COMDAT (pick any)
.data:0000162C                 public ??_R0?AUICompressFilter@@@8
.data:0000162C ; struct ICompressFilter `RTTI Type Descriptor'
.data:0000162C ??_R0?AUICompressFilter@@@8 dd offset ??_7type_info@@6B@
.data:0000162C                                         ; DATA XREF: .rdata$r:ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000162C                                         ; .rdata$r:00002478o
.data:0000162C                                         ; const type_info::`vftable'
.data:00001630                 db    0
.data:00001631                 db    0
.data:00001632                 db    0
.data:00001633                 db    0
.data:00001634                 db  2Eh ; .
.data:00001635                 db  3Fh ; ?
.data:00001636                 db  41h ; A
.data:00001637                 db  55h ; U
.data:00001638                 db  49h ; I
.data:00001639                 db  43h ; C
.data:0000163A                 db  6Fh ; o
.data:0000163B                 db  6Dh ; m
.data:0000163C                 db  70h ; p
.data:0000163D                 db  72h ; r
.data:0000163E                 db  65h ; e
.data:0000163F                 db  73h ; s
.data:00001640                 db  73h ; s
.data:00001641                 db  46h ; F
.data:00001642                 db  69h ; i
.data:00001643                 db  6Ch ; l
.data:00001644                 db  74h ; t
.data:00001645                 db  65h ; e
.data:00001646                 db  72h ; r
.data:00001647                 db  40h ; @
.data:00001648                 db  40h ; @
.data:00001649                 db    0
.data:0000164A                 align 4
.data:0000164A _data           ends
.data:0000164A
.rdata$r:0000164C ; ===========================================================================
.rdata$r:0000164C
.rdata$r:0000164C ; Segment type: Pure data
.rdata$r:0000164C ; Segment permissions: Read
.rdata$r:0000164C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000164C                 assume cs:_rdata$r
.rdata$r:0000164C                 ;org 164Ch
.rdata$r:0000164C ; COMDAT (pick any)
.rdata$r:0000164C                 public ??_R3ICompressFilter@@8
.rdata$r:0000164C ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000164C ??_R3ICompressFilter@@8 db    0         ; DATA XREF: .rdata$r:00001628o
.rdata$r:0000164C                                         ; .rdata$r:0000247Co
.rdata$r:0000164D                 db    0
.rdata$r:0000164E                 db    0
.rdata$r:0000164F                 db    0
.rdata$r:00001650                 db    0
.rdata$r:00001651                 db    0
.rdata$r:00001652                 db    0
.rdata$r:00001653                 db    0
.rdata$r:00001654                 db    2
.rdata$r:00001655                 db    0
.rdata$r:00001656                 db    0
.rdata$r:00001657                 db    0
.rdata$r:00001658                 dd offset ??_R2ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:00001658 _rdata$r        ends
.rdata$r:00001658
.rdata$r:0000165C ; ===========================================================================
.rdata$r:0000165C
.rdata$r:0000165C ; Segment type: Pure data
.rdata$r:0000165C ; Segment permissions: Read
.rdata$r:0000165C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000165C                 assume cs:_rdata$r
.rdata$r:0000165C                 ;org 165Ch
.rdata$r:0000165C ; COMDAT (pick any)
.rdata$r:0000165C                 public ??_R2ICompressFilter@@8
.rdata$r:0000165C ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:0000165C ??_R2ICompressFilter@@8 dd offset ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:0000165C                                         ; DATA XREF: .rdata$r:00001658o
.rdata$r:0000165C                                         ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001660                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001664                 db    0
.rdata$r:00001665                 align 4
.rdata$r:00001665 _rdata$r        ends
.rdata$r:00001665
.rdata$r:00001668 ; ===========================================================================
.rdata$r:00001668
.rdata$r:00001668 ; Segment type: Pure data
.rdata$r:00001668 ; Segment permissions: Read
.rdata$r:00001668 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001668                 assume cs:_rdata$r
.rdata$r:00001668                 ;org 1668h
.rdata$r:00001668 ; COMDAT (pick any)
.rdata$r:00001668                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001668 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001668 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001668                                         ; DATA XREF: .rdata$r:00001660o
.rdata$r:00001668                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00001668                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000166C                 db    0
.rdata$r:0000166D                 db    0
.rdata$r:0000166E                 db    0
.rdata$r:0000166F                 db    0
.rdata$r:00001670                 db    0
.rdata$r:00001671                 db    0
.rdata$r:00001672                 db    0
.rdata$r:00001673                 db    0
.rdata$r:00001674                 db 0FFh
.rdata$r:00001675                 db 0FFh
.rdata$r:00001676                 db 0FFh
.rdata$r:00001677                 db 0FFh
.rdata$r:00001678                 db    0
.rdata$r:00001679                 db    0
.rdata$r:0000167A                 db    0
.rdata$r:0000167B                 db    0
.rdata$r:0000167C                 db  40h ; @
.rdata$r:0000167D                 db    0
.rdata$r:0000167E                 db    0
.rdata$r:0000167F                 db    0
.rdata$r:00001680                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001680 _rdata$r        ends
.rdata$r:00001680
.data:00001684 ; ===========================================================================
.data:00001684
.data:00001684 ; Segment type: Pure data
.data:00001684 ; Segment permissions: Read/Write
.data:00001684 _data           segment dword public 'DATA' use32
.data:00001684                 assume cs:_data
.data:00001684                 ;org 1684h
.data:00001684 ; COMDAT (pick any)
.data:00001684                 public ??_R0?AUIUnknown@@@8
.data:00001684 ; struct IUnknown `RTTI Type Descriptor'
.data:00001684 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00001684                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001684                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00001684                                         ; const type_info::`vftable'
.data:00001688                 db    0
.data:00001689                 db    0
.data:0000168A                 db    0
.data:0000168B                 db    0
.data:0000168C                 db  2Eh ; .
.data:0000168D                 db  3Fh ; ?
.data:0000168E                 db  41h ; A
.data:0000168F                 db  55h ; U
.data:00001690                 db  49h ; I
.data:00001691                 db  55h ; U
.data:00001692                 db  6Eh ; n
.data:00001693                 db  6Bh ; k
.data:00001694                 db  6Eh ; n
.data:00001695                 db  6Fh ; o
.data:00001696                 db  77h ; w
.data:00001697                 db  6Eh ; n
.data:00001698                 db  40h ; @
.data:00001699                 db  40h ; @
.data:0000169A                 db    0
.data:0000169B                 align 4
.data:0000169B _data           ends
.data:0000169B
.rdata$r:0000169C ; ===========================================================================
.rdata$r:0000169C
.rdata$r:0000169C ; Segment type: Pure data
.rdata$r:0000169C ; Segment permissions: Read
.rdata$r:0000169C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000169C                 assume cs:_rdata$r
.rdata$r:0000169C                 ;org 169Ch
.rdata$r:0000169C ; COMDAT (pick any)
.rdata$r:0000169C                 public ??_R3IUnknown@@8
.rdata$r:0000169C ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000169C ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00001680o
.rdata$r:0000169C                                         ; .rdata$r:000016CCo ...
.rdata$r:0000169D                 db    0
.rdata$r:0000169E                 db    0
.rdata$r:0000169F                 db    0
.rdata$r:000016A0                 db    0
.rdata$r:000016A1                 db    0
.rdata$r:000016A2                 db    0
.rdata$r:000016A3                 db    0
.rdata$r:000016A4                 db    1
.rdata$r:000016A5                 db    0
.rdata$r:000016A6                 db    0
.rdata$r:000016A7                 db    0
.rdata$r:000016A8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000016A8 _rdata$r        ends
.rdata$r:000016A8
.rdata$r:000016AC ; ===========================================================================
.rdata$r:000016AC
.rdata$r:000016AC ; Segment type: Pure data
.rdata$r:000016AC ; Segment permissions: Read
.rdata$r:000016AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000016AC                 assume cs:_rdata$r
.rdata$r:000016AC                 ;org 16ACh
.rdata$r:000016AC ; COMDAT (pick any)
.rdata$r:000016AC                 public ??_R2IUnknown@@8
.rdata$r:000016AC ; IUnknown::`RTTI Base Class Array'
.rdata$r:000016AC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000016AC                                         ; DATA XREF: .rdata$r:000016A8o
.rdata$r:000016AC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000016B0                 db    0
.rdata$r:000016B1                 align 4
.rdata$r:000016B1 _rdata$r        ends
.rdata$r:000016B1
.rdata$r:000016B4 ; ===========================================================================
.rdata$r:000016B4
.rdata$r:000016B4 ; Segment type: Pure data
.rdata$r:000016B4 ; Segment permissions: Read
.rdata$r:000016B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000016B4                 assume cs:_rdata$r
.rdata$r:000016B4                 ;org 16B4h
.rdata$r:000016B4 ; COMDAT (pick any)
.rdata$r:000016B4                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:000016B4 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:000016B4 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000016B4                                         ; DATA XREF: .rdata$r:00001558o
.rdata$r:000016B4                                         ; .rdata$r:000015F8o ...
.rdata$r:000016B4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000016B8                 align 10h
.rdata$r:000016C0                 db 0FFh
.rdata$r:000016C1                 db 0FFh
.rdata$r:000016C2                 db 0FFh
.rdata$r:000016C3                 db 0FFh
.rdata$r:000016C4                 db    0
.rdata$r:000016C5                 db    0
.rdata$r:000016C6                 db    0
.rdata$r:000016C7                 db    0
.rdata$r:000016C8                 db  42h ; B
.rdata$r:000016C9                 db    0
.rdata$r:000016CA                 db    0
.rdata$r:000016CB                 db    0
.rdata$r:000016CC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000016CC _rdata$r        ends
.rdata$r:000016CC
.rdata$r:000016D0 ; ===========================================================================
.rdata$r:000016D0
.rdata$r:000016D0 ; Segment type: Pure data
.rdata$r:000016D0 ; Segment permissions: Read
.rdata$r:000016D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000016D0                 assume cs:_rdata$r
.rdata$r:000016D0                 ;org 16D0h
.rdata$r:000016D0 ; COMDAT (pick any)
.rdata$r:000016D0                 public ??_R13?0A@EA@ICryptoSetPassword@@8
.rdata$r:000016D0 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000016D0 ??_R13?0A@EA@ICryptoSetPassword@@8 dd offset ??_R0?AUICryptoSetPassword@@@8
.rdata$r:000016D0                                         ; DATA XREF: .rdata$r:0000155Co
.rdata$r:000016D0                                         ; .rdata$r:000015FCo ...
.rdata$r:000016D0                                         ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:000016D4                 db    1
.rdata$r:000016D5                 db    0
.rdata$r:000016D6                 db    0
.rdata$r:000016D7                 db    0
.rdata$r:000016D8                 db    4
.rdata$r:000016D9                 db    0
.rdata$r:000016DA                 db    0
.rdata$r:000016DB                 db    0
.rdata$r:000016DC                 db 0FFh
.rdata$r:000016DD                 db 0FFh
.rdata$r:000016DE                 db 0FFh
.rdata$r:000016DF                 db 0FFh
.rdata$r:000016E0                 db    0
.rdata$r:000016E1                 db    0
.rdata$r:000016E2                 db    0
.rdata$r:000016E3                 db    0
.rdata$r:000016E4                 db  40h ; @
.rdata$r:000016E5                 db    0
.rdata$r:000016E6                 db    0
.rdata$r:000016E7                 db    0
.rdata$r:000016E8                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:000016E8 _rdata$r        ends
.rdata$r:000016E8
.data:000016EC ; ===========================================================================
.data:000016EC
.data:000016EC ; Segment type: Pure data
.data:000016EC ; Segment permissions: Read/Write
.data:000016EC _data           segment dword public 'DATA' use32
.data:000016EC                 assume cs:_data
.data:000016EC                 ;org 16ECh
.data:000016EC ; COMDAT (pick any)
.data:000016EC                 public ??_R0?AUICryptoSetPassword@@@8
.data:000016EC ; struct ICryptoSetPassword `RTTI Type Descriptor'
.data:000016EC ??_R0?AUICryptoSetPassword@@@8 dd offset ??_7type_info@@6B@
.data:000016EC                                         ; DATA XREF: .rdata$r:ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000016EC                                         ; .rdata$r:ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000016EC                                         ; const type_info::`vftable'
.data:000016F0                 db    0
.data:000016F1                 db    0
.data:000016F2                 db    0
.data:000016F3                 db    0
.data:000016F4                 db  2Eh ; .
.data:000016F5                 db  3Fh ; ?
.data:000016F6                 db  41h ; A
.data:000016F7                 db  55h ; U
.data:000016F8                 db  49h ; I
.data:000016F9                 db  43h ; C
.data:000016FA                 db  72h ; r
.data:000016FB                 db  79h ; y
.data:000016FC                 db  70h ; p
.data:000016FD                 db  74h ; t
.data:000016FE                 db  6Fh ; o
.data:000016FF                 db  53h ; S
.data:00001700                 db  65h ; e
.data:00001701                 db  74h ; t
.data:00001702                 db  50h ; P
.data:00001703                 db  61h ; a
.data:00001704                 db  73h ; s
.data:00001705                 db  73h ; s
.data:00001706                 db  77h ; w
.data:00001707                 db  6Fh ; o
.data:00001708                 db  72h ; r
.data:00001709                 db  64h ; d
.data:0000170A                 db  40h ; @
.data:0000170B                 db  40h ; @
.data:0000170C                 db    0
.data:0000170D                 align 10h
.data:0000170D _data           ends
.data:0000170D
.rdata$r:00001710 ; ===========================================================================
.rdata$r:00001710
.rdata$r:00001710 ; Segment type: Pure data
.rdata$r:00001710 ; Segment permissions: Read
.rdata$r:00001710 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001710                 assume cs:_rdata$r
.rdata$r:00001710                 ;org 1710h
.rdata$r:00001710 ; COMDAT (pick any)
.rdata$r:00001710                 public ??_R3ICryptoSetPassword@@8
.rdata$r:00001710 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001710 ??_R3ICryptoSetPassword@@8 db    0      ; DATA XREF: .rdata$r:000016E8o
.rdata$r:00001710                                         ; .rdata$r:00001744o ...
.rdata$r:00001711                 db    0
.rdata$r:00001712                 db    0
.rdata$r:00001713                 db    0
.rdata$r:00001714                 db    0
.rdata$r:00001715                 db    0
.rdata$r:00001716                 db    0
.rdata$r:00001717                 db    0
.rdata$r:00001718                 db    2
.rdata$r:00001719                 db    0
.rdata$r:0000171A                 db    0
.rdata$r:0000171B                 db    0
.rdata$r:0000171C                 dd offset ??_R2ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Array'
.rdata$r:0000171C _rdata$r        ends
.rdata$r:0000171C
.rdata$r:00001720 ; ===========================================================================
.rdata$r:00001720
.rdata$r:00001720 ; Segment type: Pure data
.rdata$r:00001720 ; Segment permissions: Read
.rdata$r:00001720 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001720                 assume cs:_rdata$r
.rdata$r:00001720                 ;org 1720h
.rdata$r:00001720 ; COMDAT (pick any)
.rdata$r:00001720                 public ??_R2ICryptoSetPassword@@8
.rdata$r:00001720 ; ICryptoSetPassword::`RTTI Base Class Array'
.rdata$r:00001720 ??_R2ICryptoSetPassword@@8 dd offset ??_R1A@?0A@EA@ICryptoSetPassword@@8
.rdata$r:00001720                                         ; DATA XREF: .rdata$r:0000171Co
.rdata$r:00001720                                         ; ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001724                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001728                 db    0
.rdata$r:00001729                 align 4
.rdata$r:00001729 _rdata$r        ends
.rdata$r:00001729
.rdata$r:0000172C ; ===========================================================================
.rdata$r:0000172C
.rdata$r:0000172C ; Segment type: Pure data
.rdata$r:0000172C ; Segment permissions: Read
.rdata$r:0000172C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000172C                 assume cs:_rdata$r
.rdata$r:0000172C                 ;org 172Ch
.rdata$r:0000172C ; COMDAT (pick any)
.rdata$r:0000172C                 public ??_R1A@?0A@EA@ICryptoSetPassword@@8
.rdata$r:0000172C ; ICryptoSetPassword::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000172C ??_R1A@?0A@EA@ICryptoSetPassword@@8 dd offset ??_R0?AUICryptoSetPassword@@@8
.rdata$r:0000172C                                         ; DATA XREF: .rdata$r:ICryptoSetPassword::`RTTI Base Class Array'o
.rdata$r:0000172C                                         ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:00001730                 db    1
.rdata$r:00001731                 db    0
.rdata$r:00001732                 db    0
.rdata$r:00001733                 db    0
.rdata$r:00001734                 db    0
.rdata$r:00001735                 db    0
.rdata$r:00001736                 db    0
.rdata$r:00001737                 db    0
.rdata$r:00001738                 db 0FFh
.rdata$r:00001739                 db 0FFh
.rdata$r:0000173A                 db 0FFh
.rdata$r:0000173B                 db 0FFh
.rdata$r:0000173C                 db    0
.rdata$r:0000173D                 db    0
.rdata$r:0000173E                 db    0
.rdata$r:0000173F                 db    0
.rdata$r:00001740                 db  40h ; @
.rdata$r:00001741                 db    0
.rdata$r:00001742                 db    0
.rdata$r:00001743                 db    0
.rdata$r:00001744                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001744 _rdata$r        ends
.rdata$r:00001744
.rdata$r:00001748 ; ===========================================================================
.rdata$r:00001748
.rdata$r:00001748 ; Segment type: Pure data
.rdata$r:00001748 ; Segment permissions: Read
.rdata$r:00001748 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001748                 assume cs:_rdata$r
.rdata$r:00001748                 ;org 1748h
.rdata$r:00001748 ; COMDAT (pick any)
.rdata$r:00001748                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00001748 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00001748 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001748                                         ; DATA XREF: .rdata$r:00001560o
.rdata$r:00001748                                         ; .rdata$r:00001600o ...
.rdata$r:00001748                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000174C                 align 10h
.rdata$r:00001750                 db    4
.rdata$r:00001751                 db    0
.rdata$r:00001752                 db    0
.rdata$r:00001753                 db    0
.rdata$r:00001754                 db 0FFh
.rdata$r:00001755                 db 0FFh
.rdata$r:00001756                 db 0FFh
.rdata$r:00001757                 db 0FFh
.rdata$r:00001758                 db    0
.rdata$r:00001759                 db    0
.rdata$r:0000175A                 db    0
.rdata$r:0000175B                 db    0
.rdata$r:0000175C                 db  42h ; B
.rdata$r:0000175D                 db    0
.rdata$r:0000175E                 db    0
.rdata$r:0000175F                 db    0
.rdata$r:00001760                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001760 _rdata$r        ends
.rdata$r:00001760
.rdata$r:00001764 ; ===========================================================================
.rdata$r:00001764
.rdata$r:00001764 ; Segment type: Pure data
.rdata$r:00001764 ; Segment permissions: Read
.rdata$r:00001764 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001764                 assume cs:_rdata$r
.rdata$r:00001764                 ;org 1764h
.rdata$r:00001764 ; COMDAT (pick any)
.rdata$r:00001764                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:00001764 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00001764 ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00001764                                         ; DATA XREF: .rdata$r:00001564o
.rdata$r:00001764                                         ; .rdata$r:00001604o ...
.rdata$r:00001764                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00001768                 db    0
.rdata$r:00001769                 db    0
.rdata$r:0000176A                 db    0
.rdata$r:0000176B                 db    0
.rdata$r:0000176C                 db    8
.rdata$r:0000176D                 db    0
.rdata$r:0000176E                 db    0
.rdata$r:0000176F                 db    0
.rdata$r:00001770                 db 0FFh
.rdata$r:00001771                 db 0FFh
.rdata$r:00001772                 db 0FFh
.rdata$r:00001773                 db 0FFh
.rdata$r:00001774                 db    0
.rdata$r:00001775                 db    0
.rdata$r:00001776                 db    0
.rdata$r:00001777                 db    0
.rdata$r:00001778                 db  40h ; @
.rdata$r:00001779                 db    0
.rdata$r:0000177A                 db    0
.rdata$r:0000177B                 db    0
.rdata$r:0000177C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000177C _rdata$r        ends
.rdata$r:0000177C
.data:00001780 ; ===========================================================================
.data:00001780
.data:00001780 ; Segment type: Pure data
.data:00001780 ; Segment permissions: Read/Write
.data:00001780 _data           segment dword public 'DATA' use32
.data:00001780                 assume cs:_data
.data:00001780                 ;org 1780h
.data:00001780 ; COMDAT (pick any)
.data:00001780                 public ??_R0?AVCMyUnknownImp@@@8
.data:00001780 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00001780 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00001780                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00001780                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001780                                         ; const type_info::`vftable'
.data:00001784                 align 8
.data:00001788 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00001788 _data           ends
.data:00001788
.rdata$r:0000179C ; ===========================================================================
.rdata$r:0000179C
.rdata$r:0000179C ; Segment type: Pure data
.rdata$r:0000179C ; Segment permissions: Read
.rdata$r:0000179C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000179C                 assume cs:_rdata$r
.rdata$r:0000179C                 ;org 179Ch
.rdata$r:0000179C ; COMDAT (pick any)
.rdata$r:0000179C                 public ??_R3CMyUnknownImp@@8
.rdata$r:0000179C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000179C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:0000177Co
.rdata$r:0000179C                                         ; .rdata$r:000017CCo ...
.rdata$r:0000179D                 db    0
.rdata$r:0000179E                 db    0
.rdata$r:0000179F                 db    0
.rdata$r:000017A0                 db    0
.rdata$r:000017A1                 db    0
.rdata$r:000017A2                 db    0
.rdata$r:000017A3                 db    0
.rdata$r:000017A4                 db    1
.rdata$r:000017A5                 db    0
.rdata$r:000017A6                 db    0
.rdata$r:000017A7                 db    0
.rdata$r:000017A8                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000017A8 _rdata$r        ends
.rdata$r:000017A8
.rdata$r:000017AC ; ===========================================================================
.rdata$r:000017AC
.rdata$r:000017AC ; Segment type: Pure data
.rdata$r:000017AC ; Segment permissions: Read
.rdata$r:000017AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000017AC                 assume cs:_rdata$r
.rdata$r:000017AC                 ;org 17ACh
.rdata$r:000017AC ; COMDAT (pick any)
.rdata$r:000017AC                 public ??_R2CMyUnknownImp@@8
.rdata$r:000017AC ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000017AC ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000017AC                                         ; DATA XREF: .rdata$r:000017A8o
.rdata$r:000017AC                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000017B0                 db    0
.rdata$r:000017B1                 align 4
.rdata$r:000017B1 _rdata$r        ends
.rdata$r:000017B1
.rdata$r:000017B4 ; ===========================================================================
.rdata$r:000017B4
.rdata$r:000017B4 ; Segment type: Pure data
.rdata$r:000017B4 ; Segment permissions: Read
.rdata$r:000017B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000017B4                 assume cs:_rdata$r
.rdata$r:000017B4                 ;org 17B4h
.rdata$r:000017B4 ; COMDAT (pick any)
.rdata$r:000017B4                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000017B4 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000017B4 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000017B4                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000017B4                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000017B8                 align 10h
.rdata$r:000017C0                 db 0FFh
.rdata$r:000017C1                 db 0FFh
.rdata$r:000017C2                 db 0FFh
.rdata$r:000017C3                 db 0FFh
.rdata$r:000017C4                 db    0
.rdata$r:000017C5                 db    0
.rdata$r:000017C6                 db    0
.rdata$r:000017C7                 db    0
.rdata$r:000017C8                 db  40h ; @
.rdata$r:000017C9                 db    0
.rdata$r:000017CA                 db    0
.rdata$r:000017CB                 db    0
.rdata$r:000017CC                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000017CC _rdata$r        ends
.rdata$r:000017CC
.rdata$r:000017D0 ; ===========================================================================
.rdata$r:000017D0
.rdata$r:000017D0 ; Segment type: Pure data
.rdata$r:000017D0 ; Segment permissions: Read
.rdata$r:000017D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000017D0                 assume cs:_rdata$r
.rdata$r:000017D0                 ;org 17D0h
.rdata$r:000017D0 ; COMDAT (pick any)
.rdata$r:000017D0                 public ??_R1M@?0A@EA@CBase@N7z@NCrypto@@8
.rdata$r:000017D0 ; NCrypto::N7z::CBase::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:000017D0 ??_R1M@?0A@EA@CBase@N7z@NCrypto@@8 dd offset ??_R0?AVCBase@N7z@NCrypto@@@8
.rdata$r:000017D0                                         ; DATA XREF: .rdata$r:00001568o
.rdata$r:000017D0                                         ; .rdata$r:00001608o ...
.rdata$r:000017D0                                         ; NCrypto::N7z::CBase `RTTI Type Descriptor'
.rdata$r:000017D4                 align 8
.rdata$r:000017D8                 db  0Ch
.rdata$r:000017D9                 db    0
.rdata$r:000017DA                 db    0
.rdata$r:000017DB                 db    0
.rdata$r:000017DC                 db 0FFh
.rdata$r:000017DD                 db 0FFh
.rdata$r:000017DE                 db 0FFh
.rdata$r:000017DF                 db 0FFh
.rdata$r:000017E0                 db    0
.rdata$r:000017E1                 db    0
.rdata$r:000017E2                 db    0
.rdata$r:000017E3                 db    0
.rdata$r:000017E4                 db  40h ; @
.rdata$r:000017E5                 db    0
.rdata$r:000017E6                 db    0
.rdata$r:000017E7                 db    0
.rdata$r:000017E8                 dd offset ??_R3CBase@N7z@NCrypto@@8 ; NCrypto::N7z::CBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:000017E8 _rdata$r        ends
.rdata$r:000017E8
.data:000017EC ; ===========================================================================
.data:000017EC
.data:000017EC ; Segment type: Pure data
.data:000017EC ; Segment permissions: Read/Write
.data:000017EC _data           segment dword public 'DATA' use32
.data:000017EC                 assume cs:_data
.data:000017EC                 ;org 17ECh
.data:000017EC ; COMDAT (pick any)
.data:000017EC                 public ??_R0?AVCBase@N7z@NCrypto@@@8
.data:000017EC ; class NCrypto::N7z::CBase `RTTI Type Descriptor'
.data:000017EC ??_R0?AVCBase@N7z@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:000017EC                                         ; DATA XREF: .rdata$r:NCrypto::N7z::CBase::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:000017EC                                         ; .rdata$r:NCrypto::N7z::CBase::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000017EC                                         ; const type_info::`vftable'
.data:000017F0                 db    0
.data:000017F1                 db    0
.data:000017F2                 db    0
.data:000017F3                 db    0
.data:000017F4                 db  2Eh ; .
.data:000017F5                 db  3Fh ; ?
.data:000017F6                 db  41h ; A
.data:000017F7                 db  56h ; V
.data:000017F8                 db  43h ; C
.data:000017F9                 db  42h ; B
.data:000017FA                 db  61h ; a
.data:000017FB                 db  73h ; s
.data:000017FC                 db  65h ; e
.data:000017FD                 db  40h ; @
.data:000017FE                 db  4Eh ; N
.data:000017FF                 db  37h ; 7
.data:00001800                 db  7Ah ; z
.data:00001801                 db  40h ; @
.data:00001802                 db  4Eh ; N
.data:00001803                 db  43h ; C
.data:00001804                 db  72h ; r
.data:00001805                 db  79h ; y
.data:00001806                 db  70h ; p
.data:00001807                 db  74h ; t
.data:00001808                 db  6Fh ; o
.data:00001809                 db  40h ; @
.data:0000180A                 db  40h ; @
.data:0000180B                 db    0
.data:0000180B _data           ends
.data:0000180B
.rdata$r:0000180C ; ===========================================================================
.rdata$r:0000180C
.rdata$r:0000180C ; Segment type: Pure data
.rdata$r:0000180C ; Segment permissions: Read
.rdata$r:0000180C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000180C                 assume cs:_rdata$r
.rdata$r:0000180C                 ;org 180Ch
.rdata$r:0000180C ; COMDAT (pick any)
.rdata$r:0000180C                 public ??_R3CBase@N7z@NCrypto@@8
.rdata$r:0000180C ; NCrypto::N7z::CBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000180C ??_R3CBase@N7z@NCrypto@@8 db    0       ; DATA XREF: .rdata$r:000017E8o
.rdata$r:0000180C                                         ; .rdata$r:0000183Co
.rdata$r:0000180D                 db    0
.rdata$r:0000180E                 db    0
.rdata$r:0000180F                 db    0
.rdata$r:00001810                 db    0
.rdata$r:00001811                 db    0
.rdata$r:00001812                 db    0
.rdata$r:00001813                 db    0
.rdata$r:00001814                 db    1
.rdata$r:00001815                 db    0
.rdata$r:00001816                 db    0
.rdata$r:00001817                 db    0
.rdata$r:00001818                 dd offset ??_R2CBase@N7z@NCrypto@@8 ; NCrypto::N7z::CBase::`RTTI Base Class Array'
.rdata$r:00001818 _rdata$r        ends
.rdata$r:00001818
.rdata$r:0000181C ; ===========================================================================
.rdata$r:0000181C
.rdata$r:0000181C ; Segment type: Pure data
.rdata$r:0000181C ; Segment permissions: Read
.rdata$r:0000181C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000181C                 assume cs:_rdata$r
.rdata$r:0000181C                 ;org 181Ch
.rdata$r:0000181C ; COMDAT (pick any)
.rdata$r:0000181C                 public ??_R2CBase@N7z@NCrypto@@8
.rdata$r:0000181C ; NCrypto::N7z::CBase::`RTTI Base Class Array'
.rdata$r:0000181C ??_R2CBase@N7z@NCrypto@@8 dd offset ??_R1A@?0A@EA@CBase@N7z@NCrypto@@8
.rdata$r:0000181C                                         ; DATA XREF: .rdata$r:00001818o
.rdata$r:0000181C                                         ; NCrypto::N7z::CBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001820                 db    0
.rdata$r:00001821                 align 4
.rdata$r:00001821 _rdata$r        ends
.rdata$r:00001821
.rdata$r:00001824 ; ===========================================================================
.rdata$r:00001824
.rdata$r:00001824 ; Segment type: Pure data
.rdata$r:00001824 ; Segment permissions: Read
.rdata$r:00001824 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001824                 assume cs:_rdata$r
.rdata$r:00001824                 ;org 1824h
.rdata$r:00001824 ; COMDAT (pick any)
.rdata$r:00001824                 public ??_R1A@?0A@EA@CBase@N7z@NCrypto@@8
.rdata$r:00001824 ; NCrypto::N7z::CBase::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001824 ??_R1A@?0A@EA@CBase@N7z@NCrypto@@8 dd offset ??_R0?AVCBase@N7z@NCrypto@@@8
.rdata$r:00001824                                         ; DATA XREF: .rdata$r:NCrypto::N7z::CBase::`RTTI Base Class Array'o
.rdata$r:00001824                                         ; NCrypto::N7z::CBase `RTTI Type Descriptor'
.rdata$r:00001828                 align 10h
.rdata$r:00001830                 db 0FFh
.rdata$r:00001831                 db 0FFh
.rdata$r:00001832                 db 0FFh
.rdata$r:00001833                 db 0FFh
.rdata$r:00001834                 db    0
.rdata$r:00001835                 db    0
.rdata$r:00001836                 db    0
.rdata$r:00001837                 db    0
.rdata$r:00001838                 db  40h ; @
.rdata$r:00001839                 db    0
.rdata$r:0000183A                 db    0
.rdata$r:0000183B                 db    0
.rdata$r:0000183C                 dd offset ??_R3CBase@N7z@NCrypto@@8 ; NCrypto::N7z::CBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000183C _rdata$r        ends
.rdata$r:0000183C
.rdata$r:00001840 ; ===========================================================================
.rdata$r:00001840
.rdata$r:00001840 ; Segment type: Pure data
.rdata$r:00001840 ; Segment permissions: Read
.rdata$r:00001840 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001840                 assume cs:_rdata$r
.rdata$r:00001840                 ;org 1840h
.rdata$r:00001840 ; COMDAT (pick any)
.rdata$r:00001840                 public ??_R1HE@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:00001840 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (116, -1, 0, 64)'
.rdata$r:00001840 ??_R1HE@?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:00001840                                         ; DATA XREF: .rdata$r:0000156Co
.rdata$r:00001840                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00001844                 db    1
.rdata$r:00001845                 db    0
.rdata$r:00001846                 db    0
.rdata$r:00001847                 db    0
.rdata$r:00001848                 db  74h ; t
.rdata$r:00001849                 db    0
.rdata$r:0000184A                 db    0
.rdata$r:0000184B                 db    0
.rdata$r:0000184C                 db 0FFh
.rdata$r:0000184D                 db 0FFh
.rdata$r:0000184E                 db 0FFh
.rdata$r:0000184F                 db 0FFh
.rdata$r:00001850                 db    0
.rdata$r:00001851                 db    0
.rdata$r:00001852                 db    0
.rdata$r:00001853                 db    0
.rdata$r:00001854                 db  40h ; @
.rdata$r:00001855                 db    0
.rdata$r:00001856                 db    0
.rdata$r:00001857                 db    0
.rdata$r:00001858                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001858 _rdata$r        ends
.rdata$r:00001858
.data:0000185C ; ===========================================================================
.data:0000185C
.data:0000185C ; Segment type: Pure data
.data:0000185C ; Segment permissions: Read/Write
.data:0000185C _data           segment dword public 'DATA' use32
.data:0000185C                 assume cs:_data
.data:0000185C                 ;org 185Ch
.data:0000185C ; COMDAT (pick any)
.data:0000185C                 public ??_R0?AUICompressWriteCoderProperties@@@8
.data:0000185C ; struct ICompressWriteCoderProperties `RTTI Type Descriptor'
.data:0000185C ??_R0?AUICompressWriteCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:0000185C                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (116,-1,0,64)'o
.data:0000185C                                         ; .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000185C                                         ; const type_info::`vftable'
.data:00001860                 db    0
.data:00001861                 db    0
.data:00001862                 db    0
.data:00001863                 db    0
.data:00001864                 db  2Eh ; .
.data:00001865                 db  3Fh ; ?
.data:00001866                 db  41h ; A
.data:00001867                 db  55h ; U
.data:00001868                 db  49h ; I
.data:00001869                 db  43h ; C
.data:0000186A                 db  6Fh ; o
.data:0000186B                 db  6Dh ; m
.data:0000186C                 db  70h ; p
.data:0000186D                 db  72h ; r
.data:0000186E                 db  65h ; e
.data:0000186F                 db  73h ; s
.data:00001870                 db  73h ; s
.data:00001871                 db  57h ; W
.data:00001872                 db  72h ; r
.data:00001873                 db  69h ; i
.data:00001874                 db  74h ; t
.data:00001875                 db  65h ; e
.data:00001876                 db  43h ; C
.data:00001877                 db  6Fh ; o
.data:00001878                 db  64h ; d
.data:00001879                 db  65h ; e
.data:0000187A                 db  72h ; r
.data:0000187B                 db  50h ; P
.data:0000187C                 db  72h ; r
.data:0000187D                 db  6Fh ; o
.data:0000187E                 db  70h ; p
.data:0000187F                 db  65h ; e
.data:00001880                 db  72h ; r
.data:00001881                 db  74h ; t
.data:00001882                 db  69h ; i
.data:00001883                 db  65h ; e
.data:00001884                 db  73h ; s
.data:00001885                 db  40h ; @
.data:00001886                 db  40h ; @
.data:00001887                 db    0
.data:00001887 _data           ends
.data:00001887
.rdata$r:00001888 ; ===========================================================================
.rdata$r:00001888
.rdata$r:00001888 ; Segment type: Pure data
.rdata$r:00001888 ; Segment permissions: Read
.rdata$r:00001888 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001888                 assume cs:_rdata$r
.rdata$r:00001888                 ;org 1888h
.rdata$r:00001888 ; COMDAT (pick any)
.rdata$r:00001888                 public ??_R3ICompressWriteCoderProperties@@8
.rdata$r:00001888 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001888 ??_R3ICompressWriteCoderProperties@@8 db    0
.rdata$r:00001888                                         ; DATA XREF: .rdata$r:00001858o
.rdata$r:00001888                                         ; .rdata$r:000018BCo ...
.rdata$r:00001889                 db    0
.rdata$r:0000188A                 db    0
.rdata$r:0000188B                 db    0
.rdata$r:0000188C                 db    0
.rdata$r:0000188D                 db    0
.rdata$r:0000188E                 db    0
.rdata$r:0000188F                 db    0
.rdata$r:00001890                 db    2
.rdata$r:00001891                 db    0
.rdata$r:00001892                 db    0
.rdata$r:00001893                 db    0
.rdata$r:00001894                 dd offset ??_R2ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:00001894 _rdata$r        ends
.rdata$r:00001894
.rdata$r:00001898 ; ===========================================================================
.rdata$r:00001898
.rdata$r:00001898 ; Segment type: Pure data
.rdata$r:00001898 ; Segment permissions: Read
.rdata$r:00001898 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001898                 assume cs:_rdata$r
.rdata$r:00001898                 ;org 1898h
.rdata$r:00001898 ; COMDAT (pick any)
.rdata$r:00001898                 public ??_R2ICompressWriteCoderProperties@@8
.rdata$r:00001898 ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:00001898 ??_R2ICompressWriteCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:00001898                                         ; DATA XREF: .rdata$r:00001894o
.rdata$r:00001898                                         ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000189C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000018A0                 db    0
.rdata$r:000018A1                 align 4
.rdata$r:000018A1 _rdata$r        ends
.rdata$r:000018A1
.rdata$r:000018A4 ; ===========================================================================
.rdata$r:000018A4
.rdata$r:000018A4 ; Segment type: Pure data
.rdata$r:000018A4 ; Segment permissions: Read
.rdata$r:000018A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018A4                 assume cs:_rdata$r
.rdata$r:000018A4                 ;org 18A4h
.rdata$r:000018A4 ; COMDAT (pick any)
.rdata$r:000018A4                 public ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:000018A4 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000018A4 ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:000018A4                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Array'o
.rdata$r:000018A4                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:000018A8                 db    1
.rdata$r:000018A9                 db    0
.rdata$r:000018AA                 db    0
.rdata$r:000018AB                 db    0
.rdata$r:000018AC                 db    0
.rdata$r:000018AD                 db    0
.rdata$r:000018AE                 db    0
.rdata$r:000018AF                 db    0
.rdata$r:000018B0                 db 0FFh
.rdata$r:000018B1                 db 0FFh
.rdata$r:000018B2                 db 0FFh
.rdata$r:000018B3                 db 0FFh
.rdata$r:000018B4                 db    0
.rdata$r:000018B5                 db    0
.rdata$r:000018B6                 db    0
.rdata$r:000018B7                 db    0
.rdata$r:000018B8                 db  40h ; @
.rdata$r:000018B9                 db    0
.rdata$r:000018BA                 db    0
.rdata$r:000018BB                 db    0
.rdata$r:000018BC                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000018BC _rdata$r        ends
.rdata$r:000018BC
.rdata$r:000018C0 ; ===========================================================================
.rdata$r:000018C0
.rdata$r:000018C0 ; Segment type: Pure data
.rdata$r:000018C0 ; Segment permissions: Read
.rdata$r:000018C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018C0                 assume cs:_rdata$r
.rdata$r:000018C0                 ;org 18C0h
.rdata$r:000018C0 ; COMDAT (pick any)
.rdata$r:000018C0                 public ??_R1HE@?0A@EC@IUnknown@@8
.rdata$r:000018C0 ; IUnknown::`RTTI Base Class Descriptor at (116, -1, 0, 66)'
.rdata$r:000018C0 ??_R1HE@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000018C0                                         ; DATA XREF: .rdata$r:00001570o
.rdata$r:000018C0                                         ; .rdata$r:0000259Co
.rdata$r:000018C0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000018C4                 align 8
.rdata$r:000018C8                 dd offset loc_73+1
.rdata$r:000018CC                 db 0FFh
.rdata$r:000018CD                 db 0FFh
.rdata$r:000018CE                 db 0FFh
.rdata$r:000018CF                 db 0FFh
.rdata$r:000018D0                 db    0
.rdata$r:000018D1                 db    0
.rdata$r:000018D2                 db    0
.rdata$r:000018D3                 db    0
.rdata$r:000018D4                 db  42h ; B
.rdata$r:000018D5                 db    0
.rdata$r:000018D6                 db    0
.rdata$r:000018D7                 db    0
.rdata$r:000018D8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000018D8 _rdata$r        ends
.rdata$r:000018D8
.rdata$r:000018DC ; ===========================================================================
.rdata$r:000018DC
.rdata$r:000018DC ; Segment type: Pure data
.rdata$r:000018DC ; Segment permissions: Read
.rdata$r:000018DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018DC                 assume cs:_rdata$r
.rdata$r:000018DC                 ;org 18DCh
.rdata$r:000018DC ; COMDAT (pick any)
.rdata$r:000018DC                 public ??_R1HI@?0A@EA@ICryptoResetInitVector@@8
.rdata$r:000018DC ; ICryptoResetInitVector::`RTTI Base Class Descriptor at (120, -1, 0, 64)'
.rdata$r:000018DC ??_R1HI@?0A@EA@ICryptoResetInitVector@@8 dd offset ??_R0?AUICryptoResetInitVector@@@8
.rdata$r:000018DC                                         ; DATA XREF: .rdata$r:00001574o
.rdata$r:000018DC                                         ; ICryptoResetInitVector `RTTI Type Descriptor'
.rdata$r:000018E0                 db    1
.rdata$r:000018E1                 db    0
.rdata$r:000018E2                 db    0
.rdata$r:000018E3                 db    0
.rdata$r:000018E4                 db  78h ; x
.rdata$r:000018E5                 db    0
.rdata$r:000018E6                 db    0
.rdata$r:000018E7                 db    0
.rdata$r:000018E8                 db 0FFh
.rdata$r:000018E9                 db 0FFh
.rdata$r:000018EA                 db 0FFh
.rdata$r:000018EB                 db 0FFh
.rdata$r:000018EC                 db    0
.rdata$r:000018ED                 db    0
.rdata$r:000018EE                 db    0
.rdata$r:000018EF                 db    0
.rdata$r:000018F0                 db  40h ; @
.rdata$r:000018F1                 db    0
.rdata$r:000018F2                 db    0
.rdata$r:000018F3                 db    0
.rdata$r:000018F4                 dd offset ??_R3ICryptoResetInitVector@@8 ; ICryptoResetInitVector::`RTTI Class Hierarchy Descriptor'
.rdata$r:000018F4 _rdata$r        ends
.rdata$r:000018F4
.data:000018F8 ; ===========================================================================
.data:000018F8
.data:000018F8 ; Segment type: Pure data
.data:000018F8 ; Segment permissions: Read/Write
.data:000018F8 _data           segment dword public 'DATA' use32
.data:000018F8                 assume cs:_data
.data:000018F8                 ;org 18F8h
.data:000018F8 ; COMDAT (pick any)
.data:000018F8                 public ??_R0?AUICryptoResetInitVector@@@8
.data:000018F8 ; struct ICryptoResetInitVector `RTTI Type Descriptor'
.data:000018F8 ??_R0?AUICryptoResetInitVector@@@8 dd offset ??_7type_info@@6B@
.data:000018F8                                         ; DATA XREF: .rdata$r:ICryptoResetInitVector::`RTTI Base Class Descriptor at (120,-1,0,64)'o
.data:000018F8                                         ; .rdata$r:ICryptoResetInitVector::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000018F8                                         ; const type_info::`vftable'
.data:000018FC                 align 10h
.data:00001900 a_?auicryptores db '.?AUICryptoResetInitVector@@',0
.data:0000191D                 align 10h
.data:0000191D _data           ends
.data:0000191D
.rdata$r:00001920 ; ===========================================================================
.rdata$r:00001920
.rdata$r:00001920 ; Segment type: Pure data
.rdata$r:00001920 ; Segment permissions: Read
.rdata$r:00001920 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001920                 assume cs:_rdata$r
.rdata$r:00001920                 ;org 1920h
.rdata$r:00001920 ; COMDAT (pick any)
.rdata$r:00001920                 public ??_R3ICryptoResetInitVector@@8
.rdata$r:00001920 ; ICryptoResetInitVector::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001920 ??_R3ICryptoResetInitVector@@8 db    0  ; DATA XREF: .rdata$r:000018F4o
.rdata$r:00001920                                         ; .rdata$r:00001954o ...
.rdata$r:00001921                 db    0
.rdata$r:00001922                 db    0
.rdata$r:00001923                 db    0
.rdata$r:00001924                 db    0
.rdata$r:00001925                 db    0
.rdata$r:00001926                 db    0
.rdata$r:00001927                 db    0
.rdata$r:00001928                 db    2
.rdata$r:00001929                 db    0
.rdata$r:0000192A                 db    0
.rdata$r:0000192B                 db    0
.rdata$r:0000192C                 dd offset ??_R2ICryptoResetInitVector@@8 ; ICryptoResetInitVector::`RTTI Base Class Array'
.rdata$r:0000192C _rdata$r        ends
.rdata$r:0000192C
.rdata$r:00001930 ; ===========================================================================
.rdata$r:00001930
.rdata$r:00001930 ; Segment type: Pure data
.rdata$r:00001930 ; Segment permissions: Read
.rdata$r:00001930 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001930                 assume cs:_rdata$r
.rdata$r:00001930                 ;org 1930h
.rdata$r:00001930 ; COMDAT (pick any)
.rdata$r:00001930                 public ??_R2ICryptoResetInitVector@@8
.rdata$r:00001930 ; ICryptoResetInitVector::`RTTI Base Class Array'
.rdata$r:00001930 ??_R2ICryptoResetInitVector@@8 dd offset ??_R1A@?0A@EA@ICryptoResetInitVector@@8
.rdata$r:00001930                                         ; DATA XREF: .rdata$r:0000192Co
.rdata$r:00001930                                         ; ICryptoResetInitVector::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001934                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001938                 db    0
.rdata$r:00001939                 align 4
.rdata$r:00001939 _rdata$r        ends
.rdata$r:00001939
.rdata$r:0000193C ; ===========================================================================
.rdata$r:0000193C
.rdata$r:0000193C ; Segment type: Pure data
.rdata$r:0000193C ; Segment permissions: Read
.rdata$r:0000193C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000193C                 assume cs:_rdata$r
.rdata$r:0000193C                 ;org 193Ch
.rdata$r:0000193C ; COMDAT (pick any)
.rdata$r:0000193C                 public ??_R1A@?0A@EA@ICryptoResetInitVector@@8
.rdata$r:0000193C ; ICryptoResetInitVector::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000193C ??_R1A@?0A@EA@ICryptoResetInitVector@@8 dd offset ??_R0?AUICryptoResetInitVector@@@8
.rdata$r:0000193C                                         ; DATA XREF: .rdata$r:ICryptoResetInitVector::`RTTI Base Class Array'o
.rdata$r:0000193C                                         ; ICryptoResetInitVector `RTTI Type Descriptor'
.rdata$r:00001940                 db    1
.rdata$r:00001941                 db    0
.rdata$r:00001942                 db    0
.rdata$r:00001943                 db    0
.rdata$r:00001944                 db    0
.rdata$r:00001945                 db    0
.rdata$r:00001946                 db    0
.rdata$r:00001947                 db    0
.rdata$r:00001948                 db 0FFh
.rdata$r:00001949                 db 0FFh
.rdata$r:0000194A                 db 0FFh
.rdata$r:0000194B                 db 0FFh
.rdata$r:0000194C                 db    0
.rdata$r:0000194D                 db    0
.rdata$r:0000194E                 db    0
.rdata$r:0000194F                 db    0
.rdata$r:00001950                 db  40h ; @
.rdata$r:00001951                 db    0
.rdata$r:00001952                 db    0
.rdata$r:00001953                 db    0
.rdata$r:00001954                 dd offset ??_R3ICryptoResetInitVector@@8 ; ICryptoResetInitVector::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001954 _rdata$r        ends
.rdata$r:00001954
.rdata$r:00001958 ; ===========================================================================
.rdata$r:00001958
.rdata$r:00001958 ; Segment type: Pure data
.rdata$r:00001958 ; Segment permissions: Read
.rdata$r:00001958 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001958                 assume cs:_rdata$r
.rdata$r:00001958                 ;org 1958h
.rdata$r:00001958 ; COMDAT (pick any)
.rdata$r:00001958                 public ??_R1HI@?0A@EC@IUnknown@@8
.rdata$r:00001958 ; IUnknown::`RTTI Base Class Descriptor at (120, -1, 0, 66)'
.rdata$r:00001958 ??_R1HI@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001958                                         ; DATA XREF: .rdata$r:00001578o
.rdata$r:00001958                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000195C                 align 10h
.rdata$r:00001960                 dd offset loc_77+1
.rdata$r:00001964                 db 0FFh
.rdata$r:00001965                 db 0FFh
.rdata$r:00001966                 db 0FFh
.rdata$r:00001967                 db 0FFh
.rdata$r:00001968                 db    0
.rdata$r:00001969                 db    0
.rdata$r:0000196A                 db    0
.rdata$r:0000196B                 db    0
.rdata$r:0000196C                 db  42h ; B
.rdata$r:0000196D                 db    0
.rdata$r:0000196E                 db    0
.rdata$r:0000196F                 db    0
.rdata$r:00001970                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001970 _rdata$r        ends
.rdata$r:00001970
.rdata$r:00001974 ; ===========================================================================
.rdata$r:00001974
.rdata$r:00001974 ; Segment type: Pure data
.rdata$r:00001974 ; Segment permissions: Read
.rdata$r:00001974 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001974                 assume cs:_rdata$r
.rdata$r:00001974                 ;org 1974h
.rdata$r:00001974 ; COMDAT (pick any)
.rdata$r:00001974                 public ??_R4CEncoder@N7z@NCrypto@@6BICryptoSetPassword@@@
.rdata$r:00001974 ; const NCrypto::N7z::CEncoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:00001974 ??_R4CEncoder@N7z@NCrypto@@6BICryptoSetPassword@@@ db    0
.rdata$r:00001974                                         ; DATA XREF: .rdata:000014D8o
.rdata$r:00001975                 db    0
.rdata$r:00001976                 db    0
.rdata$r:00001977                 db    0
.rdata$r:00001978                 db    4
.rdata$r:00001979                 db    0
.rdata$r:0000197A                 db    0
.rdata$r:0000197B                 db    0
.rdata$r:0000197C                 db    0
.rdata$r:0000197D                 db    0
.rdata$r:0000197E                 db    0
.rdata$r:0000197F                 db    0
.rdata$r:00001980                 dd offset ??_R0?AVCEncoder@N7z@NCrypto@@@8 ; NCrypto::N7z::CEncoder `RTTI Type Descriptor'
.rdata$r:00001984                 dd offset ??_R3CEncoder@N7z@NCrypto@@8 ; NCrypto::N7z::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001984 _rdata$r        ends
.rdata$r:00001984
.rdata$r:00001988 ; ===========================================================================
.rdata$r:00001988
.rdata$r:00001988 ; Segment type: Pure data
.rdata$r:00001988 ; Segment permissions: Read
.rdata$r:00001988 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001988                 assume cs:_rdata$r
.rdata$r:00001988                 ;org 1988h
.rdata$r:00001988 ; COMDAT (pick any)
.rdata$r:00001988                 public ??_R4CEncoder@N7z@NCrypto@@6BICompressWriteCoderProperties@@@
.rdata$r:00001988 ; const NCrypto::N7z::CEncoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata$r:00001988 ??_R4CEncoder@N7z@NCrypto@@6BICompressWriteCoderProperties@@@ db    0
.rdata$r:00001988                                         ; DATA XREF: .rdata:000014C4o
.rdata$r:00001989                 db    0
.rdata$r:0000198A                 db    0
.rdata$r:0000198B                 db    0
.rdata$r:0000198C                 db  74h ; t
.rdata$r:0000198D                 db    0
.rdata$r:0000198E                 db    0
.rdata$r:0000198F                 db    0
.rdata$r:00001990                 db    0
.rdata$r:00001991                 db    0
.rdata$r:00001992                 db    0
.rdata$r:00001993                 db    0
.rdata$r:00001994                 dd offset ??_R0?AVCEncoder@N7z@NCrypto@@@8 ; NCrypto::N7z::CEncoder `RTTI Type Descriptor'
.rdata$r:00001998                 dd offset ??_R3CEncoder@N7z@NCrypto@@8 ; NCrypto::N7z::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001998 _rdata$r        ends
.rdata$r:00001998
.rdata$r:0000199C ; ===========================================================================
.rdata$r:0000199C
.rdata$r:0000199C ; Segment type: Pure data
.rdata$r:0000199C ; Segment permissions: Read
.rdata$r:0000199C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000199C                 assume cs:_rdata$r
.rdata$r:0000199C                 ;org 199Ch
.rdata$r:0000199C ; COMDAT (pick any)
.rdata$r:0000199C                 public ??_R4CEncoder@N7z@NCrypto@@6BICryptoResetInitVector@@@
.rdata$r:0000199C ; const NCrypto::N7z::CEncoder::`RTTI Complete Object Locator'{for `ICryptoResetInitVector'}
.rdata$r:0000199C ??_R4CEncoder@N7z@NCrypto@@6BICryptoResetInitVector@@@ db    0
.rdata$r:0000199C                                         ; DATA XREF: .rdata:000014B0o
.rdata$r:0000199D                 db    0
.rdata$r:0000199E                 db    0
.rdata$r:0000199F                 db    0
.rdata$r:000019A0                 db  78h ; x
.rdata$r:000019A1                 db    0
.rdata$r:000019A2                 db    0
.rdata$r:000019A3                 db    0
.rdata$r:000019A4                 db    0
.rdata$r:000019A5                 db    0
.rdata$r:000019A6                 db    0
.rdata$r:000019A7                 db    0
.rdata$r:000019A8                 dd offset ??_R0?AVCEncoder@N7z@NCrypto@@@8 ; NCrypto::N7z::CEncoder `RTTI Type Descriptor'
.rdata$r:000019AC                 dd offset ??_R3CEncoder@N7z@NCrypto@@8 ; NCrypto::N7z::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000019AC _rdata$r        ends
.rdata$r:000019AC
.text:000019B0 ; ===========================================================================
.text:000019B0
.text:000019B0 ; Segment type: Pure code
.text:000019B0 ; Segment permissions: Read/Execute
.text:000019B0 _text           segment para public 'CODE' use32
.text:000019B0                 assume cs:_text
.text:000019B0                 ;org 19B0h
.text:000019B0 ; COMDAT (pick any)
.text:000019B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000019B0
.text:000019B0 ; =============== S U B R O U T I N E =======================================
.text:000019B0
.text:000019B0 ; Attributes: bp-based frame
.text:000019B0
.text:000019B0 ; __int32 __stdcall NCrypto::N7z::CEncoder::QueryInterface(NCrypto::N7z::CEncoder *this, const struct _GUID *Buf1, void **)
.text:000019B0                 public ?QueryInterface@CEncoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.text:000019B0 ?QueryInterface@CEncoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000019B0                                         ; CODE XREF: [thunk]:NCrypto::N7z::CEncoder::QueryInterface`adjustor{120}' (_GUID const &,void * *)+5j
.text:000019B0                                         ; [thunk]:NCrypto::N7z::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j ...
.text:000019B0
.text:000019B0 var_10          = dword ptr -10h
.text:000019B0 var_C           = dword ptr -0Ch
.text:000019B0 var_8           = dword ptr -8
.text:000019B0 var_4           = dword ptr -4
.text:000019B0 this            = dword ptr  8
.text:000019B0 Buf1            = dword ptr  0Ch
.text:000019B0 arg_8           = dword ptr  10h
.text:000019B0
.text:000019B0                 push    ebp
.text:000019B1                 mov     ebp, esp
.text:000019B3                 sub     esp, 10h
.text:000019B6                 mov     eax, 0CCCCCCCCh
.text:000019BB                 mov     [ebp+var_10], eax
.text:000019BE                 mov     [ebp+var_C], eax
.text:000019C1                 mov     [ebp+var_8], eax
.text:000019C4                 mov     [ebp+var_4], eax
.text:000019C7                 mov     eax, [ebp+arg_8]
.text:000019CA                 mov     dword ptr [eax], 0
.text:000019D0                 push    offset _IID_IUnknown ; Buf2
.text:000019D5                 mov     ecx, [ebp+Buf1]
.text:000019D8                 push    ecx             ; Buf1
.text:000019D9                 call    ___@8           ; __(x,x)
.text:000019DE                 test    eax, eax
.text:000019E0                 jz      short loc_1A07
.text:000019E2                 cmp     [ebp+this], 0
.text:000019E6                 jz      short loc_19F3
.text:000019E8                 mov     edx, [ebp+this]
.text:000019EB                 add     edx, 4
.text:000019EE                 mov     [ebp+var_4], edx
.text:000019F1                 jmp     short loc_19FA
.text:000019F3 ; ---------------------------------------------------------------------------
.text:000019F3
.text:000019F3 loc_19F3:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+36j
.text:000019F3                 mov     [ebp+var_4], 0
.text:000019FA
.text:000019FA loc_19FA:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+41j
.text:000019FA                 mov     eax, [ebp+arg_8]
.text:000019FD                 mov     ecx, [ebp+var_4]
.text:00001A00                 mov     [eax], ecx
.text:00001A02                 jmp     loc_1AAA
.text:00001A07 ; ---------------------------------------------------------------------------
.text:00001A07
.text:00001A07 loc_1A07:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+30j
.text:00001A07                 push    offset _IID_ICryptoSetPassword ; Buf2
.text:00001A0C                 mov     edx, [ebp+Buf1]
.text:00001A0F                 push    edx             ; Buf1
.text:00001A10                 call    ___@8           ; __(x,x)
.text:00001A15                 test    eax, eax
.text:00001A17                 jz      short loc_1A3B
.text:00001A19                 cmp     [ebp+this], 0
.text:00001A1D                 jz      short loc_1A2A
.text:00001A1F                 mov     eax, [ebp+this]
.text:00001A22                 add     eax, 4
.text:00001A25                 mov     [ebp+var_8], eax
.text:00001A28                 jmp     short loc_1A31
.text:00001A2A ; ---------------------------------------------------------------------------
.text:00001A2A
.text:00001A2A loc_1A2A:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+6Dj
.text:00001A2A                 mov     [ebp+var_8], 0
.text:00001A31
.text:00001A31 loc_1A31:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+78j
.text:00001A31                 mov     ecx, [ebp+arg_8]
.text:00001A34                 mov     edx, [ebp+var_8]
.text:00001A37                 mov     [ecx], edx
.text:00001A39                 jmp     short loc_1AAA
.text:00001A3B ; ---------------------------------------------------------------------------
.text:00001A3B
.text:00001A3B loc_1A3B:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+67j
.text:00001A3B                 push    offset _IID_ICompressWriteCoderProperties ; Buf2
.text:00001A40                 mov     eax, [ebp+Buf1]
.text:00001A43                 push    eax             ; Buf1
.text:00001A44                 call    ___@8           ; __(x,x)
.text:00001A49                 test    eax, eax
.text:00001A4B                 jz      short loc_1A6F
.text:00001A4D                 cmp     [ebp+this], 0
.text:00001A51                 jz      short loc_1A5E
.text:00001A53                 mov     ecx, [ebp+this]
.text:00001A56                 add     ecx, 74h ; 't'
.text:00001A59                 mov     [ebp+var_C], ecx
.text:00001A5C                 jmp     short loc_1A65
.text:00001A5E ; ---------------------------------------------------------------------------
.text:00001A5E
.text:00001A5E loc_1A5E:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+A1j
.text:00001A5E                 mov     [ebp+var_C], 0
.text:00001A65
.text:00001A65 loc_1A65:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+ACj
.text:00001A65                 mov     edx, [ebp+arg_8]
.text:00001A68                 mov     eax, [ebp+var_C]
.text:00001A6B                 mov     [edx], eax
.text:00001A6D                 jmp     short loc_1AAA
.text:00001A6F ; ---------------------------------------------------------------------------
.text:00001A6F
.text:00001A6F loc_1A6F:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+9Bj
.text:00001A6F                 push    offset _IID_ICryptoResetInitVector ; Buf2
.text:00001A74                 mov     ecx, [ebp+Buf1]
.text:00001A77                 push    ecx             ; Buf1
.text:00001A78                 call    ___@8           ; __(x,x)
.text:00001A7D                 test    eax, eax
.text:00001A7F                 jz      short loc_1AA3
.text:00001A81                 cmp     [ebp+this], 0
.text:00001A85                 jz      short loc_1A92
.text:00001A87                 mov     edx, [ebp+this]
.text:00001A8A                 add     edx, 78h ; 'x'
.text:00001A8D                 mov     [ebp+var_10], edx
.text:00001A90                 jmp     short loc_1A99
.text:00001A92 ; ---------------------------------------------------------------------------
.text:00001A92
.text:00001A92 loc_1A92:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+D5j
.text:00001A92                 mov     [ebp+var_10], 0
.text:00001A99
.text:00001A99 loc_1A99:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+E0j
.text:00001A99                 mov     eax, [ebp+arg_8]
.text:00001A9C                 mov     ecx, [ebp+var_10]
.text:00001A9F                 mov     [eax], ecx
.text:00001AA1                 jmp     short loc_1AAA
.text:00001AA3 ; ---------------------------------------------------------------------------
.text:00001AA3
.text:00001AA3 loc_1AA3:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+CFj
.text:00001AA3                 mov     eax, 80004002h
.text:00001AA8                 jmp     short loc_1ABB
.text:00001AAA ; ---------------------------------------------------------------------------
.text:00001AAA
.text:00001AAA loc_1AAA:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+52j
.text:00001AAA                                         ; NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+89j ...
.text:00001AAA                 mov     edx, [ebp+this]
.text:00001AAD                 mov     eax, [edx+8]
.text:00001AB0                 add     eax, 1
.text:00001AB3                 mov     ecx, [ebp+this]
.text:00001AB6                 mov     [ecx+8], eax
.text:00001AB9                 xor     eax, eax
.text:00001ABB
.text:00001ABB loc_1ABB:                               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+F8j
.text:00001ABB                 add     esp, 10h
.text:00001ABE                 cmp     ebp, esp
.text:00001AC0                 call    __RTC_CheckEsp
.text:00001AC5                 mov     esp, ebp
.text:00001AC7                 pop     ebp
.text:00001AC8                 retn    0Ch
.text:00001AC8 ?QueryInterface@CEncoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001AC8
.text:00001AC8 ; ---------------------------------------------------------------------------
.text:00001ACB                 align 4
.text:00001ACB _text           ends
.text:00001ACB
.text:00001ACC ; ===========================================================================
.text:00001ACC
.text:00001ACC ; Segment type: Pure code
.text:00001ACC ; Segment permissions: Read/Execute
.text:00001ACC _text           segment para public 'CODE' use32
.text:00001ACC                 assume cs:_text
.text:00001ACC                 ;org 1ACCh
.text:00001ACC ; COMDAT (pick any)
.text:00001ACC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001ACC
.text:00001ACC ; =============== S U B R O U T I N E =======================================
.text:00001ACC
.text:00001ACC ; Attributes: bp-based frame
.text:00001ACC
.text:00001ACC ; int __stdcall __(void *Buf1, void *Buf2)
.text:00001ACC                 public ___@8
.text:00001ACC ___@8           proc near               ; CODE XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+29p
.text:00001ACC                                         ; NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+60p ...
.text:00001ACC
.text:00001ACC Buf1            = dword ptr  8
.text:00001ACC Buf2            = dword ptr  0Ch
.text:00001ACC
.text:00001ACC                 push    ebp
.text:00001ACD                 mov     ebp, esp
.text:00001ACF                 mov     eax, [ebp+Buf2]
.text:00001AD2                 push    eax             ; Buf2
.text:00001AD3                 mov     ecx, [ebp+Buf1]
.text:00001AD6                 push    ecx             ; Buf1
.text:00001AD7                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00001ADC                 cmp     ebp, esp
.text:00001ADE                 call    __RTC_CheckEsp
.text:00001AE3                 pop     ebp
.text:00001AE4                 retn    8
.text:00001AE4 ___@8           endp
.text:00001AE4
.text:00001AE4 ; ---------------------------------------------------------------------------
.text:00001AE7                 align 4
.text:00001AE7 _text           ends
.text:00001AE7
.text:00001AE8 ; ===========================================================================
.text:00001AE8
.text:00001AE8 ; Segment type: Pure code
.text:00001AE8 ; Segment permissions: Read/Execute
.text:00001AE8 _text           segment para public 'CODE' use32
.text:00001AE8                 assume cs:_text
.text:00001AE8                 ;org 1AE8h
.text:00001AE8 ; COMDAT (pick any)
.text:00001AE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001AE8
.text:00001AE8 ; =============== S U B R O U T I N E =======================================
.text:00001AE8
.text:00001AE8 ; Attributes: bp-based frame
.text:00001AE8
.text:00001AE8 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00001AE8                 public _IsEqualGUID@8
.text:00001AE8 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00001AE8
.text:00001AE8 Buf1            = dword ptr  8
.text:00001AE8 Buf2            = dword ptr  0Ch
.text:00001AE8
.text:00001AE8                 push    ebp
.text:00001AE9                 mov     ebp, esp
.text:00001AEB                 push    10h             ; Size
.text:00001AED                 mov     eax, [ebp+Buf2]
.text:00001AF0                 push    eax             ; Buf2
.text:00001AF1                 mov     ecx, [ebp+Buf1]
.text:00001AF4                 push    ecx             ; Buf1
.text:00001AF5                 call    _memcmp
.text:00001AFA                 add     esp, 0Ch
.text:00001AFD                 neg     eax
.text:00001AFF                 sbb     eax, eax
.text:00001B01                 add     eax, 1
.text:00001B04                 cmp     ebp, esp
.text:00001B06                 call    __RTC_CheckEsp
.text:00001B0B                 pop     ebp
.text:00001B0C                 retn    8
.text:00001B0C _IsEqualGUID@8  endp
.text:00001B0C
.text:00001B0C ; ---------------------------------------------------------------------------
.text:00001B0F                 align 10h
.text:00001B0F _text           ends
.text:00001B0F
.text:00001B10 ; ===========================================================================
.text:00001B10
.text:00001B10 ; Segment type: Pure code
.text:00001B10 ; Segment permissions: Read/Execute
.text:00001B10 _text           segment para public 'CODE' use32
.text:00001B10                 assume cs:_text
.text:00001B10                 ;org 1B10h
.text:00001B10 ; COMDAT (pick any)
.text:00001B10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001B10
.text:00001B10 ; =============== S U B R O U T I N E =======================================
.text:00001B10
.text:00001B10 ; Attributes: bp-based frame
.text:00001B10
.text:00001B10 ; unsigned __int32 __stdcall NCrypto::N7z::CEncoder::AddRef(NCrypto::N7z::CEncoder *this)
.text:00001B10                 public ?AddRef@CEncoder@N7z@NCrypto@@UAGKXZ
.text:00001B10 ?AddRef@CEncoder@N7z@NCrypto@@UAGKXZ proc near
.text:00001B10                                         ; CODE XREF: [thunk]:NCrypto::N7z::CEncoder::AddRef`adjustor{4}' (void)+5j
.text:00001B10                                         ; [thunk]:NCrypto::N7z::CEncoder::AddRef`adjustor{116}' (void)+5j ...
.text:00001B10
.text:00001B10 var_4           = dword ptr -4
.text:00001B10 this            = dword ptr  8
.text:00001B10
.text:00001B10                 push    ebp
.text:00001B11                 mov     ebp, esp
.text:00001B13                 push    ecx
.text:00001B14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B1B                 mov     eax, [ebp+this]
.text:00001B1E                 mov     ecx, [eax+8]
.text:00001B21                 add     ecx, 1
.text:00001B24                 mov     [ebp+var_4], ecx
.text:00001B27                 mov     edx, [ebp+this]
.text:00001B2A                 mov     eax, [ebp+var_4]
.text:00001B2D                 mov     [edx+8], eax
.text:00001B30                 mov     eax, [ebp+var_4]
.text:00001B33                 mov     esp, ebp
.text:00001B35                 pop     ebp
.text:00001B36                 retn    4
.text:00001B36 ?AddRef@CEncoder@N7z@NCrypto@@UAGKXZ endp
.text:00001B36
.text:00001B36 ; ---------------------------------------------------------------------------
.text:00001B39                 align 4
.text:00001B39 _text           ends
.text:00001B39
.text:00001B3C ; ===========================================================================
.text:00001B3C
.text:00001B3C ; Segment type: Pure code
.text:00001B3C ; Segment permissions: Read/Execute
.text:00001B3C _text           segment para public 'CODE' use32
.text:00001B3C                 assume cs:_text
.text:00001B3C                 ;org 1B3Ch
.text:00001B3C ; COMDAT (pick any)
.text:00001B3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001B3C
.text:00001B3C ; =============== S U B R O U T I N E =======================================
.text:00001B3C
.text:00001B3C ; Attributes: bp-based frame
.text:00001B3C
.text:00001B3C ; unsigned __int32 __stdcall NCrypto::N7z::CEncoder::Release(NCrypto::N7z::CEncoder *this)
.text:00001B3C                 public ?Release@CEncoder@N7z@NCrypto@@UAGKXZ
.text:00001B3C ?Release@CEncoder@N7z@NCrypto@@UAGKXZ proc near
.text:00001B3C                                         ; CODE XREF: [thunk]:NCrypto::N7z::CEncoder::Release`adjustor{116}' (void)+5j
.text:00001B3C                                         ; [thunk]:NCrypto::N7z::CEncoder::Release`adjustor{120}' (void)+5j ...
.text:00001B3C
.text:00001B3C var_10          = dword ptr -10h
.text:00001B3C var_C           = dword ptr -0Ch
.text:00001B3C var_8           = dword ptr -8
.text:00001B3C var_4           = dword ptr -4
.text:00001B3C this            = dword ptr  8
.text:00001B3C
.text:00001B3C                 push    ebp
.text:00001B3D                 mov     ebp, esp
.text:00001B3F                 sub     esp, 10h
.text:00001B42                 mov     eax, 0CCCCCCCCh
.text:00001B47                 mov     [ebp+var_10], eax
.text:00001B4A                 mov     [ebp+var_C], eax
.text:00001B4D                 mov     [ebp+var_8], eax
.text:00001B50                 mov     [ebp+var_4], eax
.text:00001B53                 mov     eax, [ebp+this]
.text:00001B56                 mov     ecx, [eax+8]
.text:00001B59                 sub     ecx, 1
.text:00001B5C                 mov     [ebp+var_C], ecx
.text:00001B5F                 mov     edx, [ebp+this]
.text:00001B62                 mov     eax, [ebp+var_C]
.text:00001B65                 mov     [edx+8], eax
.text:00001B68                 cmp     [ebp+var_C], 0
.text:00001B6C                 jz      short loc_1B76
.text:00001B6E                 mov     ecx, [ebp+this]
.text:00001B71                 mov     eax, [ecx+8]
.text:00001B74                 jmp     short loc_1BA0
.text:00001B76 ; ---------------------------------------------------------------------------
.text:00001B76
.text:00001B76 loc_1B76:                               ; CODE XREF: NCrypto::N7z::CEncoder::Release(void)+30j
.text:00001B76                 mov     edx, [ebp+this]
.text:00001B79                 mov     [ebp+var_8], edx
.text:00001B7C                 mov     eax, [ebp+var_8]
.text:00001B7F                 mov     [ebp+var_4], eax
.text:00001B82                 cmp     [ebp+var_4], 0
.text:00001B86                 jz      short loc_1B97
.text:00001B88                 push    1
.text:00001B8A                 mov     ecx, [ebp+var_4]
.text:00001B8D                 call    ??_GCEncoder@N7z@NCrypto@@QAEPAXI@Z ; NCrypto::N7z::CEncoder::`scalar deleting destructor'(uint)
.text:00001B92                 mov     [ebp+var_10], eax
.text:00001B95                 jmp     short loc_1B9E
.text:00001B97 ; ---------------------------------------------------------------------------
.text:00001B97
.text:00001B97 loc_1B97:                               ; CODE XREF: NCrypto::N7z::CEncoder::Release(void)+4Aj
.text:00001B97                 mov     [ebp+var_10], 0
.text:00001B9E
.text:00001B9E loc_1B9E:                               ; CODE XREF: NCrypto::N7z::CEncoder::Release(void)+59j
.text:00001B9E                 xor     eax, eax
.text:00001BA0
.text:00001BA0 loc_1BA0:                               ; CODE XREF: NCrypto::N7z::CEncoder::Release(void)+38j
.text:00001BA0                 add     esp, 10h
.text:00001BA3                 cmp     ebp, esp
.text:00001BA5                 call    __RTC_CheckEsp
.text:00001BAA                 mov     esp, ebp
.text:00001BAC                 pop     ebp
.text:00001BAD                 retn    4
.text:00001BAD ?Release@CEncoder@N7z@NCrypto@@UAGKXZ endp
.text:00001BAD
.text:00001BAD _text           ends
.text:00001BAD
.text:00001BB0 ; ===========================================================================
.text:00001BB0
.text:00001BB0 ; Segment type: Pure code
.text:00001BB0 ; Segment permissions: Read/Execute
.text:00001BB0 _text           segment para public 'CODE' use32
.text:00001BB0                 assume cs:_text
.text:00001BB0                 ;org 1BB0h
.text:00001BB0 ; COMDAT (pick any)
.text:00001BB0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001BB0
.text:00001BB0 ; =============== S U B R O U T I N E =======================================
.text:00001BB0
.text:00001BB0 ; Attributes: bp-based frame
.text:00001BB0
.text:00001BB0 ; public: void * __thiscall NCrypto::N7z::CEncoder::`scalar deleting destructor'(unsigned int)
.text:00001BB0                 public ??_GCEncoder@N7z@NCrypto@@QAEPAXI@Z
.text:00001BB0 ??_GCEncoder@N7z@NCrypto@@QAEPAXI@Z proc near
.text:00001BB0                                         ; CODE XREF: NCrypto::N7z::CEncoder::Release(void)+51p
.text:00001BB0
.text:00001BB0 var_4           = dword ptr -4
.text:00001BB0 arg_0           = dword ptr  8
.text:00001BB0
.text:00001BB0                 push    ebp
.text:00001BB1                 mov     ebp, esp
.text:00001BB3                 push    ecx
.text:00001BB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001BBB                 mov     [ebp+var_4], ecx
.text:00001BBE                 mov     ecx, [ebp+var_4] ; this
.text:00001BC1                 call    ??1CEncoder@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CEncoder::~CEncoder(void)
.text:00001BC6                 mov     eax, [ebp+arg_0]
.text:00001BC9                 and     eax, 1
.text:00001BCC                 jz      short loc_1BDA
.text:00001BCE                 mov     ecx, [ebp+var_4]
.text:00001BD1                 push    ecx             ; void *
.text:00001BD2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001BD7                 add     esp, 4
.text:00001BDA
.text:00001BDA loc_1BDA:                               ; CODE XREF: NCrypto::N7z::CEncoder::`scalar deleting destructor'(uint)+1Cj
.text:00001BDA                 mov     eax, [ebp+var_4]
.text:00001BDD                 add     esp, 4
.text:00001BE0                 cmp     ebp, esp
.text:00001BE2                 call    __RTC_CheckEsp
.text:00001BE7                 mov     esp, ebp
.text:00001BE9                 pop     ebp
.text:00001BEA                 retn    4
.text:00001BEA ??_GCEncoder@N7z@NCrypto@@QAEPAXI@Z endp
.text:00001BEA
.text:00001BEA ; ---------------------------------------------------------------------------
.text:00001BED                 align 10h
.text:00001BED _text           ends
.text:00001BED
.text:00001BF0 ; ===========================================================================
.text:00001BF0
.text:00001BF0 ; Segment type: Pure code
.text:00001BF0 ; Segment permissions: Read/Execute
.text:00001BF0 _text           segment para public 'CODE' use32
.text:00001BF0                 assume cs:_text
.text:00001BF0                 ;org 1BF0h
.text:00001BF0 ; COMDAT (pick any)
.text:00001BF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001BF0
.text:00001BF0 ; =============== S U B R O U T I N E =======================================
.text:00001BF0
.text:00001BF0 ; Attributes: bp-based frame
.text:00001BF0
.text:00001BF0 ; _DWORD __thiscall NCrypto::N7z::CEncoder::~CEncoder(NCrypto::N7z::CEncoder *__hidden this)
.text:00001BF0                 public ??1CEncoder@N7z@NCrypto@@QAE@XZ
.text:00001BF0 ??1CEncoder@N7z@NCrypto@@QAE@XZ proc near
.text:00001BF0                                         ; CODE XREF: NCrypto::N7z::CEncoder::`scalar deleting destructor'(uint)+11p
.text:00001BF0
.text:00001BF0 var_4           = dword ptr -4
.text:00001BF0
.text:00001BF0                 push    ebp
.text:00001BF1                 mov     ebp, esp
.text:00001BF3                 push    ecx
.text:00001BF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001BFB                 mov     [ebp+var_4], ecx
.text:00001BFE                 mov     ecx, [ebp+var_4] ; this
.text:00001C01                 call    ??1CBaseCoder@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CBaseCoder::~CBaseCoder(void)
.text:00001C06                 add     esp, 4
.text:00001C09                 cmp     ebp, esp
.text:00001C0B                 call    __RTC_CheckEsp
.text:00001C10                 mov     esp, ebp
.text:00001C12                 pop     ebp
.text:00001C13                 retn
.text:00001C13 ??1CEncoder@N7z@NCrypto@@QAE@XZ endp
.text:00001C13
.text:00001C13 _text           ends
.text:00001C13
.text:00001C14 ; ===========================================================================
.text:00001C14
.text:00001C14 ; Segment type: Pure code
.text:00001C14 ; Segment permissions: Read/Execute
.text:00001C14 _text           segment para public 'CODE' use32
.text:00001C14                 assume cs:_text
.text:00001C14                 ;org 1C14h
.text:00001C14 ; COMDAT (pick any)
.text:00001C14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001C14
.text:00001C14 ; =============== S U B R O U T I N E =======================================
.text:00001C14
.text:00001C14 ; Attributes: bp-based frame
.text:00001C14
.text:00001C14 ; _DWORD __thiscall NCrypto::N7z::CBaseCoder::~CBaseCoder(NCrypto::N7z::CBaseCoder *__hidden this)
.text:00001C14                 public ??1CBaseCoder@N7z@NCrypto@@QAE@XZ
.text:00001C14 ??1CBaseCoder@N7z@NCrypto@@QAE@XZ proc near
.text:00001C14                                         ; CODE XREF: __unwindfunclet$??0CEncoder@N7z@NCrypto@@QAE@XZ$0+3j
.text:00001C14                                         ; __unwindfunclet$??0CDecoder@N7z@NCrypto@@QAE@XZ$0+3j ...
.text:00001C14
.text:00001C14 var_10          = dword ptr -10h
.text:00001C14 var_C           = dword ptr -0Ch
.text:00001C14 var_4           = dword ptr -4
.text:00001C14
.text:00001C14                 push    ebp
.text:00001C15                 mov     ebp, esp
.text:00001C17                 push    0FFFFFFFFh
.text:00001C19                 push    offset __ehhandler$??1CBaseCoder@N7z@NCrypto@@QAE@XZ
.text:00001C1E                 mov     eax, large fs:0
.text:00001C24                 push    eax
.text:00001C25                 push    ecx
.text:00001C26                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001C2D                 mov     eax, dword ptr ds:___security_cookie
.text:00001C32                 xor     eax, ebp
.text:00001C34                 push    eax
.text:00001C35                 lea     eax, [ebp+var_C]
.text:00001C38                 mov     large fs:0, eax
.text:00001C3E                 mov     [ebp+var_10], ecx
.text:00001C41                 mov     [ebp+var_4], 0
.text:00001C48                 mov     ecx, [ebp+var_10]
.text:00001C4B                 add     ecx, 70h ; 'p'
.text:00001C4E                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00001C53                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001C5A                 mov     ecx, [ebp+var_10]
.text:00001C5D                 add     ecx, 0Ch        ; this
.text:00001C60                 call    ??1CBase@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CBase::~CBase(void)
.text:00001C65                 mov     ecx, [ebp+var_C]
.text:00001C68                 mov     large fs:0, ecx
.text:00001C6F                 pop     ecx
.text:00001C70                 add     esp, 10h
.text:00001C73                 cmp     ebp, esp
.text:00001C75                 call    __RTC_CheckEsp
.text:00001C7A                 mov     esp, ebp
.text:00001C7C                 pop     ebp
.text:00001C7D                 retn
.text:00001C7D ??1CBaseCoder@N7z@NCrypto@@QAE@XZ endp
.text:00001C7D
.text:00001C7D ; ---------------------------------------------------------------------------
.text:00001C7E                 align 10h
.text:00001C7E _text           ends
.text:00001C7E
.text$x:00001C80 ; ===========================================================================
.text$x:00001C80
.text$x:00001C80 ; Segment type: Pure code
.text$x:00001C80 ; Segment permissions: Read/Execute
.text$x:00001C80 _text$x         segment para public 'CODE' use32
.text$x:00001C80                 assume cs:_text$x
.text$x:00001C80                 ;org 1C80h
.text$x:00001C80 ; COMDAT (pick associative to section at 1C14)
.text$x:00001C80                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00001C80
.text$x:00001C80 ; =============== S U B R O U T I N E =======================================
.text$x:00001C80
.text$x:00001C80
.text$x:00001C80 __unwindfunclet$??1CBaseCoder@N7z@NCrypto@@QAE@XZ$0 proc near
.text$x:00001C80                                         ; DATA XREF: .xdata$x:00001CACo
.text$x:00001C80                 mov     ecx, [ebp-10h]
.text$x:00001C83                 add     ecx, 0Ch        ; this
.text$x:00001C86                 jmp     ??1CBase@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CBase::~CBase(void)
.text$x:00001C86 __unwindfunclet$??1CBaseCoder@N7z@NCrypto@@QAE@XZ$0 endp
.text$x:00001C86
.text$x:00001C8B
.text$x:00001C8B ; =============== S U B R O U T I N E =======================================
.text$x:00001C8B
.text$x:00001C8B
.text$x:00001C8B __ehhandler$??1CBaseCoder@N7z@NCrypto@@QAE@XZ proc near
.text$x:00001C8B                                         ; DATA XREF: NCrypto::N7z::CBaseCoder::~CBaseCoder(void)+5o
.text$x:00001C8B
.text$x:00001C8B arg_4           = dword ptr  8
.text$x:00001C8B
.text$x:00001C8B                 mov     edx, [esp+arg_4]
.text$x:00001C8F                 lea     eax, [edx+0Ch]
.text$x:00001C92                 mov     ecx, [edx-8]
.text$x:00001C95                 xor     ecx, eax
.text$x:00001C97                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001C9C                 mov     eax, offset __ehfuncinfo$??1CBaseCoder@N7z@NCrypto@@QAE@XZ
.text$x:00001CA1                 jmp     ___CxxFrameHandler3
.text$x:00001CA1 __ehhandler$??1CBaseCoder@N7z@NCrypto@@QAE@XZ endp
.text$x:00001CA1
.text$x:00001CA1 ; ---------------------------------------------------------------------------
.text$x:00001CA6                 align 4
.text$x:00001CA6 _text$x         ends
.text$x:00001CA6
.xdata$x:00001CA8 ; ===========================================================================
.xdata$x:00001CA8
.xdata$x:00001CA8 ; Segment type: Pure data
.xdata$x:00001CA8 ; Segment permissions: Read
.xdata$x:00001CA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001CA8                 assume cs:_xdata$x
.xdata$x:00001CA8                 ;org 1CA8h
.xdata$x:00001CA8 ; COMDAT (pick associative to section at 1C14)
.xdata$x:00001CA8 __unwindtable$??1CBaseCoder@N7z@NCrypto@@QAE@XZ db 0FFh
.xdata$x:00001CA8                                         ; DATA XREF: .xdata$x:00001CB8o
.xdata$x:00001CA9                 db 0FFh
.xdata$x:00001CAA                 db 0FFh
.xdata$x:00001CAB                 db 0FFh
.xdata$x:00001CAC                 dd offset __unwindfunclet$??1CBaseCoder@N7z@NCrypto@@QAE@XZ$0
.xdata$x:00001CB0 __ehfuncinfo$??1CBaseCoder@N7z@NCrypto@@QAE@XZ db  22h ; "
.xdata$x:00001CB0                                         ; DATA XREF: __ehhandler$??1CBaseCoder@N7z@NCrypto@@QAE@XZ+11o
.xdata$x:00001CB1                 db    5
.xdata$x:00001CB2                 db  93h ; ô
.xdata$x:00001CB3                 db  19h
.xdata$x:00001CB4                 db    1
.xdata$x:00001CB5                 db    0
.xdata$x:00001CB6                 db    0
.xdata$x:00001CB7                 db    0
.xdata$x:00001CB8                 dd offset __unwindtable$??1CBaseCoder@N7z@NCrypto@@QAE@XZ
.xdata$x:00001CBC                 db    0
.xdata$x:00001CBD                 db    0
.xdata$x:00001CBE                 db    0
.xdata$x:00001CBF                 db    0
.xdata$x:00001CC0                 db    0
.xdata$x:00001CC1                 db    0
.xdata$x:00001CC2                 db    0
.xdata$x:00001CC3                 db    0
.xdata$x:00001CC4                 db    0
.xdata$x:00001CC5                 db    0
.xdata$x:00001CC6                 db    0
.xdata$x:00001CC7                 db    0
.xdata$x:00001CC8                 db    0
.xdata$x:00001CC9                 db    0
.xdata$x:00001CCA                 db    0
.xdata$x:00001CCB                 db    0
.xdata$x:00001CCC                 db    0
.xdata$x:00001CCD                 db    0
.xdata$x:00001CCE                 db    0
.xdata$x:00001CCF                 db    0
.xdata$x:00001CD0                 db    1
.xdata$x:00001CD1                 db    0
.xdata$x:00001CD2                 db    0
.xdata$x:00001CD3                 db    0
.xdata$x:00001CD3 _xdata$x        ends
.xdata$x:00001CD3
.text:00001CD4 ; ===========================================================================
.text:00001CD4
.text:00001CD4 ; Segment type: Pure code
.text:00001CD4 ; Segment permissions: Read/Execute
.text:00001CD4 _text           segment para public 'CODE' use32
.text:00001CD4                 assume cs:_text
.text:00001CD4                 ;org 1CD4h
.text:00001CD4 ; COMDAT (pick any)
.text:00001CD4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001CD4
.text:00001CD4 ; =============== S U B R O U T I N E =======================================
.text:00001CD4
.text:00001CD4 ; Attributes: bp-based frame
.text:00001CD4
.text:00001CD4 ; _DWORD __thiscall NCrypto::N7z::CBase::~CBase(NCrypto::N7z::CBase *__hidden this)
.text:00001CD4                 public ??1CBase@N7z@NCrypto@@QAE@XZ
.text:00001CD4 ??1CBase@N7z@NCrypto@@QAE@XZ proc near  ; CODE XREF: NCrypto::N7z::CBaseCoder::~CBaseCoder(void)+4Cp
.text:00001CD4                                         ; __unwindfunclet$??1CBaseCoder@N7z@NCrypto@@QAE@XZ$0+6j ...
.text:00001CD4
.text:00001CD4 var_10          = dword ptr -10h
.text:00001CD4 var_C           = dword ptr -0Ch
.text:00001CD4 var_4           = dword ptr -4
.text:00001CD4
.text:00001CD4                 push    ebp
.text:00001CD5                 mov     ebp, esp
.text:00001CD7                 push    0FFFFFFFFh
.text:00001CD9                 push    offset __ehhandler$??1CBase@N7z@NCrypto@@QAE@XZ
.text:00001CDE                 mov     eax, large fs:0
.text:00001CE4                 push    eax
.text:00001CE5                 push    ecx
.text:00001CE6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001CED                 mov     eax, dword ptr ds:___security_cookie
.text:00001CF2                 xor     eax, ebp
.text:00001CF4                 push    eax
.text:00001CF5                 lea     eax, [ebp+var_C]
.text:00001CF8                 mov     large fs:0, eax
.text:00001CFE                 mov     [ebp+var_10], ecx
.text:00001D01                 mov     [ebp+var_4], 0
.text:00001D08                 mov     ecx, [ebp+var_10]
.text:00001D0B                 add     ecx, 10h        ; this
.text:00001D0E                 call    ??1CKeyInfo@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CKeyInfo::~CKeyInfo(void)
.text:00001D13                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001D1A                 mov     ecx, [ebp+var_10] ; this
.text:00001D1D                 call    ??1CKeyInfoCache@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CKeyInfoCache::~CKeyInfoCache(void)
.text:00001D22                 mov     ecx, [ebp+var_C]
.text:00001D25                 mov     large fs:0, ecx
.text:00001D2C                 pop     ecx
.text:00001D2D                 add     esp, 10h
.text:00001D30                 cmp     ebp, esp
.text:00001D32                 call    __RTC_CheckEsp
.text:00001D37                 mov     esp, ebp
.text:00001D39                 pop     ebp
.text:00001D3A                 retn
.text:00001D3A ??1CBase@N7z@NCrypto@@QAE@XZ endp
.text:00001D3A
.text:00001D3A ; ---------------------------------------------------------------------------
.text:00001D3B                 align 4
.text:00001D3B _text           ends
.text:00001D3B
.text$x:00001D3C ; ===========================================================================
.text$x:00001D3C
.text$x:00001D3C ; Segment type: Pure code
.text$x:00001D3C ; Segment permissions: Read/Execute
.text$x:00001D3C _text$x         segment para public 'CODE' use32
.text$x:00001D3C                 assume cs:_text$x
.text$x:00001D3C                 ;org 1D3Ch
.text$x:00001D3C ; COMDAT (pick associative to section at 1CD4)
.text$x:00001D3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00001D3C
.text$x:00001D3C ; =============== S U B R O U T I N E =======================================
.text$x:00001D3C
.text$x:00001D3C
.text$x:00001D3C __unwindfunclet$??1CBase@N7z@NCrypto@@QAE@XZ$0 proc near
.text$x:00001D3C                                         ; DATA XREF: .xdata$x:00001D64o
.text$x:00001D3C                 mov     ecx, [ebp-10h]  ; this
.text$x:00001D3F                 jmp     ??1CKeyInfoCache@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CKeyInfoCache::~CKeyInfoCache(void)
.text$x:00001D3F __unwindfunclet$??1CBase@N7z@NCrypto@@QAE@XZ$0 endp
.text$x:00001D3F
.text$x:00001D44
.text$x:00001D44 ; =============== S U B R O U T I N E =======================================
.text$x:00001D44
.text$x:00001D44
.text$x:00001D44 __ehhandler$??1CBase@N7z@NCrypto@@QAE@XZ proc near
.text$x:00001D44                                         ; DATA XREF: NCrypto::N7z::CBase::~CBase(void)+5o
.text$x:00001D44
.text$x:00001D44 arg_4           = dword ptr  8
.text$x:00001D44
.text$x:00001D44                 mov     edx, [esp+arg_4]
.text$x:00001D48                 lea     eax, [edx+0Ch]
.text$x:00001D4B                 mov     ecx, [edx-8]
.text$x:00001D4E                 xor     ecx, eax
.text$x:00001D50                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001D55                 mov     eax, offset __ehfuncinfo$??1CBase@N7z@NCrypto@@QAE@XZ
.text$x:00001D5A                 jmp     ___CxxFrameHandler3
.text$x:00001D5A __ehhandler$??1CBase@N7z@NCrypto@@QAE@XZ endp
.text$x:00001D5A
.text$x:00001D5A ; ---------------------------------------------------------------------------
.text$x:00001D5F                 align 10h
.text$x:00001D5F _text$x         ends
.text$x:00001D5F
.xdata$x:00001D60 ; ===========================================================================
.xdata$x:00001D60
.xdata$x:00001D60 ; Segment type: Pure data
.xdata$x:00001D60 ; Segment permissions: Read
.xdata$x:00001D60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001D60                 assume cs:_xdata$x
.xdata$x:00001D60                 ;org 1D60h
.xdata$x:00001D60 ; COMDAT (pick associative to section at 1CD4)
.xdata$x:00001D60 __unwindtable$??1CBase@N7z@NCrypto@@QAE@XZ db 0FFh
.xdata$x:00001D60                                         ; DATA XREF: .xdata$x:00001D70o
.xdata$x:00001D61                 db 0FFh
.xdata$x:00001D62                 db 0FFh
.xdata$x:00001D63                 db 0FFh
.xdata$x:00001D64                 dd offset __unwindfunclet$??1CBase@N7z@NCrypto@@QAE@XZ$0
.xdata$x:00001D68 __ehfuncinfo$??1CBase@N7z@NCrypto@@QAE@XZ db  22h ; "
.xdata$x:00001D68                                         ; DATA XREF: __ehhandler$??1CBase@N7z@NCrypto@@QAE@XZ+11o
.xdata$x:00001D69                 db    5
.xdata$x:00001D6A                 db  93h ; ô
.xdata$x:00001D6B                 db  19h
.xdata$x:00001D6C                 db    1
.xdata$x:00001D6D                 db    0
.xdata$x:00001D6E                 db    0
.xdata$x:00001D6F                 db    0
.xdata$x:00001D70                 dd offset __unwindtable$??1CBase@N7z@NCrypto@@QAE@XZ
.xdata$x:00001D74                 db    0
.xdata$x:00001D75                 db    0
.xdata$x:00001D76                 db    0
.xdata$x:00001D77                 db    0
.xdata$x:00001D78                 db    0
.xdata$x:00001D79                 db    0
.xdata$x:00001D7A                 db    0
.xdata$x:00001D7B                 db    0
.xdata$x:00001D7C                 db    0
.xdata$x:00001D7D                 db    0
.xdata$x:00001D7E                 db    0
.xdata$x:00001D7F                 db    0
.xdata$x:00001D80                 db    0
.xdata$x:00001D81                 db    0
.xdata$x:00001D82                 db    0
.xdata$x:00001D83                 db    0
.xdata$x:00001D84                 db    0
.xdata$x:00001D85                 db    0
.xdata$x:00001D86                 db    0
.xdata$x:00001D87                 db    0
.xdata$x:00001D88                 db    1
.xdata$x:00001D89                 db    0
.xdata$x:00001D8A                 db    0
.xdata$x:00001D8B                 db    0
.xdata$x:00001D8B _xdata$x        ends
.xdata$x:00001D8B
.text:00001D8C ; ===========================================================================
.text:00001D8C
.text:00001D8C ; Segment type: Pure code
.text:00001D8C ; Segment permissions: Read/Execute
.text:00001D8C _text           segment para public 'CODE' use32
.text:00001D8C                 assume cs:_text
.text:00001D8C                 ;org 1D8Ch
.text:00001D8C ; COMDAT (pick any)
.text:00001D8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001D8C
.text:00001D8C ; =============== S U B R O U T I N E =======================================
.text:00001D8C
.text:00001D8C ; Attributes: bp-based frame
.text:00001D8C
.text:00001D8C ; _DWORD __thiscall NCrypto::N7z::CKeyInfo::~CKeyInfo(NCrypto::N7z::CKeyInfo *__hidden this)
.text:00001D8C                 public ??1CKeyInfo@N7z@NCrypto@@QAE@XZ
.text:00001D8C ??1CKeyInfo@N7z@NCrypto@@QAE@XZ proc near
.text:00001D8C                                         ; CODE XREF: NCrypto::N7z::CBase::~CBase(void)+3Ap
.text:00001D8C                                         ; NCrypto::N7z::CKeyInfo::`scalar deleting destructor'(uint)+11p
.text:00001D8C
.text:00001D8C var_4           = dword ptr -4
.text:00001D8C
.text:00001D8C                 push    ebp
.text:00001D8D                 mov     ebp, esp
.text:00001D8F                 push    ecx
.text:00001D90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D97                 mov     [ebp+var_4], ecx
.text:00001D9A                 mov     ecx, [ebp+var_4]
.text:00001D9D                 add     ecx, 18h
.text:00001DA0                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00001DA5                 add     esp, 4
.text:00001DA8                 cmp     ebp, esp
.text:00001DAA                 call    __RTC_CheckEsp
.text:00001DAF                 mov     esp, ebp
.text:00001DB1                 pop     ebp
.text:00001DB2                 retn
.text:00001DB2 ??1CKeyInfo@N7z@NCrypto@@QAE@XZ endp
.text:00001DB2
.text:00001DB2 ; ---------------------------------------------------------------------------
.text:00001DB3                 align 4
.text:00001DB3 _text           ends
.text:00001DB3
.text:00001DB4 ; ===========================================================================
.text:00001DB4
.text:00001DB4 ; Segment type: Pure code
.text:00001DB4 ; Segment permissions: Read/Execute
.text:00001DB4 _text           segment para public 'CODE' use32
.text:00001DB4                 assume cs:_text
.text:00001DB4                 ;org 1DB4h
.text:00001DB4 ; COMDAT (pick any)
.text:00001DB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001DB4
.text:00001DB4 ; =============== S U B R O U T I N E =======================================
.text:00001DB4
.text:00001DB4 ; Attributes: bp-based frame
.text:00001DB4
.text:00001DB4 ; _DWORD __thiscall NCrypto::CAesCbcEncoder::CAesCbcEncoder(NCrypto::CAesCbcEncoder *this, unsigned int)
.text:00001DB4                 public ??0CAesCbcEncoder@NCrypto@@QAE@I@Z
.text:00001DB4 ??0CAesCbcEncoder@NCrypto@@QAE@I@Z proc near
.text:00001DB4                                         ; CODE XREF: NCrypto::N7z::CEncoder::CEncoder(void)+AEp
.text:00001DB4
.text:00001DB4 var_4           = dword ptr -4
.text:00001DB4 arg_0           = dword ptr  8
.text:00001DB4
.text:00001DB4                 push    ebp
.text:00001DB5                 mov     ebp, esp
.text:00001DB7                 push    ecx
.text:00001DB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001DBF                 mov     [ebp+var_4], ecx
.text:00001DC2                 mov     eax, [ebp+arg_0]
.text:00001DC5                 push    eax             ; unsigned int
.text:00001DC6                 push    1               ; bool
.text:00001DC8                 mov     ecx, [ebp+var_4] ; this
.text:00001DCB                 call    ??0CAesCbcCoder@NCrypto@@QAE@_NI@Z ; NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)
.text:00001DD0                 mov     ecx, [ebp+var_4]
.text:00001DD3                 mov     dword ptr [ecx], offset ??_7CAesCbcEncoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICompressFilter'}
.text:00001DD9                 mov     edx, [ebp+var_4]
.text:00001DDC                 mov     dword ptr [edx+4], offset ??_7CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICryptoProperties'}
.text:00001DE3                 mov     eax, [ebp+var_4]
.text:00001DE6                 mov     dword ptr [eax+8], offset ??_7CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00001DED                 mov     eax, [ebp+var_4]
.text:00001DF0                 add     esp, 4
.text:00001DF3                 cmp     ebp, esp
.text:00001DF5                 call    __RTC_CheckEsp
.text:00001DFA                 mov     esp, ebp
.text:00001DFC                 pop     ebp
.text:00001DFD                 retn    4
.text:00001DFD ??0CAesCbcEncoder@NCrypto@@QAE@I@Z endp
.text:00001DFD
.text:00001DFD _text           ends
.text:00001DFD
.rdata:00001E00 ; ===========================================================================
.rdata:00001E00
.rdata:00001E00 ; Segment type: Pure data
.rdata:00001E00 ; Segment permissions: Read
.rdata:00001E00 _rdata          segment dword public 'DATA' use32
.rdata:00001E00                 assume cs:_rdata
.rdata:00001E00                 ;org 1E00h
.rdata:00001E00 ; COMDAT (pick largest)
.rdata:00001E00                 dd offset ??_R4CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00001E04                 public ??_7CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata:00001E04 ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00001E04 ??_7CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00001E04                                         ; DATA XREF: NCrypto::CAesCbcEncoder::CAesCbcEncoder(uint)+32o
.rdata:00001E04                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00001E08                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)
.rdata:00001E0C                 dd offset ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)
.rdata:00001E10                 dd offset ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00001E10 _rdata          ends
.rdata:00001E10
.rdata:00001E14 ; ===========================================================================
.rdata:00001E14
.rdata:00001E14 ; Segment type: Pure data
.rdata:00001E14 ; Segment permissions: Read
.rdata:00001E14 _rdata          segment dword public 'DATA' use32
.rdata:00001E14                 assume cs:_rdata
.rdata:00001E14                 ;org 1E14h
.rdata:00001E14 ; COMDAT (pick largest)
.rdata:00001E14                 dd offset ??_R4CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata:00001E18                 public ??_7CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@
.rdata:00001E18 ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICryptoProperties'}
.rdata:00001E18 ??_7CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00001E18                                         ; DATA XREF: NCrypto::CAesCbcEncoder::CAesCbcEncoder(uint)+28o
.rdata:00001E18                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00001E1C                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)
.rdata:00001E20                 dd offset ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)
.rdata:00001E24                 dd offset ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)
.rdata:00001E28                 dd offset ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)
.rdata:00001E28 _rdata          ends
.rdata:00001E28
.rdata:00001E2C ; ===========================================================================
.rdata:00001E2C
.rdata:00001E2C ; Segment type: Pure data
.rdata:00001E2C ; Segment permissions: Read
.rdata:00001E2C _rdata          segment dword public 'DATA' use32
.rdata:00001E2C                 assume cs:_rdata
.rdata:00001E2C                 ;org 1E2Ch
.rdata:00001E2C ; COMDAT (pick largest)
.rdata:00001E2C                 dd offset ??_R4CAesCbcEncoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:00001E30                 public ??_7CAesCbcEncoder@NCrypto@@6BICompressFilter@@@
.rdata:00001E30 ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICompressFilter'}
.rdata:00001E30 ??_7CAesCbcEncoder@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:00001E30                                         ; DATA XREF: NCrypto::CAesCbcEncoder::CAesCbcEncoder(uint)+1Fo
.rdata:00001E30                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.rdata:00001E34                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.rdata:00001E38                 dd offset ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.rdata:00001E3C                 dd offset ?Init@CAesCbcCoder@NCrypto@@UAGJXZ ; NCrypto::CAesCbcCoder::Init(void)
.rdata:00001E40                 dd offset ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z ; NCrypto::CAesCbcCoder::Filter(uchar *,uint)
.rdata:00001E40 _rdata          ends
.rdata:00001E40
.rdata$r:00001E44 ; ===========================================================================
.rdata$r:00001E44
.rdata$r:00001E44 ; Segment type: Pure data
.rdata$r:00001E44 ; Segment permissions: Read
.rdata$r:00001E44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E44                 assume cs:_rdata$r
.rdata$r:00001E44                 ;org 1E44h
.rdata$r:00001E44 ; COMDAT (pick any)
.rdata$r:00001E44                 public ??_R4CAesCbcEncoder@NCrypto@@6BICompressFilter@@@
.rdata$r:00001E44 ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00001E44 ??_R4CAesCbcEncoder@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00001E44                                         ; DATA XREF: .rdata:00001E2Co
.rdata$r:00001E45                 db    0
.rdata$r:00001E46                 db    0
.rdata$r:00001E47                 db    0
.rdata$r:00001E48                 db    0
.rdata$r:00001E49                 db    0
.rdata$r:00001E4A                 db    0
.rdata$r:00001E4B                 db    0
.rdata$r:00001E4C                 db    0
.rdata$r:00001E4D                 db    0
.rdata$r:00001E4E                 db    0
.rdata$r:00001E4F                 db    0
.rdata$r:00001E50                 dd offset ??_R0?AUCAesCbcEncoder@NCrypto@@@8 ; NCrypto::CAesCbcEncoder `RTTI Type Descriptor'
.rdata$r:00001E54                 dd offset ??_R3CAesCbcEncoder@NCrypto@@8 ; NCrypto::CAesCbcEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E54 _rdata$r        ends
.rdata$r:00001E54
.data:00001E58 ; ===========================================================================
.data:00001E58
.data:00001E58 ; Segment type: Pure data
.data:00001E58 ; Segment permissions: Read/Write
.data:00001E58 _data           segment dword public 'DATA' use32
.data:00001E58                 assume cs:_data
.data:00001E58                 ;org 1E58h
.data:00001E58 ; COMDAT (pick any)
.data:00001E58                 public ??_R0?AUCAesCbcEncoder@NCrypto@@@8
.data:00001E58 ; struct NCrypto::CAesCbcEncoder `RTTI Type Descriptor'
.data:00001E58 ??_R0?AUCAesCbcEncoder@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00001E58                                         ; DATA XREF: .rdata$r:00001E50o
.data:00001E58                                         ; .rdata$r:NCrypto::CAesCbcEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001E58                                         ; const type_info::`vftable'
.data:00001E5C                 align 10h
.data:00001E60 a_?aucaescbcenc db '.?AUCAesCbcEncoder@NCrypto@@',0
.data:00001E7D                 align 10h
.data:00001E7D _data           ends
.data:00001E7D
.rdata$r:00001E80 ; ===========================================================================
.rdata$r:00001E80
.rdata$r:00001E80 ; Segment type: Pure data
.rdata$r:00001E80 ; Segment permissions: Read
.rdata$r:00001E80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E80                 assume cs:_rdata$r
.rdata$r:00001E80                 ;org 1E80h
.rdata$r:00001E80 ; COMDAT (pick any)
.rdata$r:00001E80                 public ??_R3CAesCbcEncoder@NCrypto@@8
.rdata$r:00001E80 ; NCrypto::CAesCbcEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E80 ??_R3CAesCbcEncoder@NCrypto@@8 db    0  ; DATA XREF: .rdata$r:00001E54o
.rdata$r:00001E80                                         ; .rdata$r:00001ED0o ...
.rdata$r:00001E81                 db    0
.rdata$r:00001E82                 db    0
.rdata$r:00001E83                 db    0
.rdata$r:00001E84                 db    1
.rdata$r:00001E85                 db    0
.rdata$r:00001E86                 db    0
.rdata$r:00001E87                 db    0
.rdata$r:00001E88                 db    9
.rdata$r:00001E89                 db    0
.rdata$r:00001E8A                 db    0
.rdata$r:00001E8B                 db    0
.rdata$r:00001E8C                 dd offset ??_R2CAesCbcEncoder@NCrypto@@8 ; NCrypto::CAesCbcEncoder::`RTTI Base Class Array'
.rdata$r:00001E8C _rdata$r        ends
.rdata$r:00001E8C
.rdata$r:00001E90 ; ===========================================================================
.rdata$r:00001E90
.rdata$r:00001E90 ; Segment type: Pure data
.rdata$r:00001E90 ; Segment permissions: Read
.rdata$r:00001E90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E90                 assume cs:_rdata$r
.rdata$r:00001E90                 ;org 1E90h
.rdata$r:00001E90 ; COMDAT (pick any)
.rdata$r:00001E90                 public ??_R2CAesCbcEncoder@NCrypto@@8
.rdata$r:00001E90 ; NCrypto::CAesCbcEncoder::`RTTI Base Class Array'
.rdata$r:00001E90 ??_R2CAesCbcEncoder@NCrypto@@8 dd offset ??_R1A@?0A@EA@CAesCbcEncoder@NCrypto@@8
.rdata$r:00001E90                                         ; DATA XREF: .rdata$r:00001E8Co
.rdata$r:00001E90                                         ; NCrypto::CAesCbcEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001E94                 dd offset ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001E98                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001E9C                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00001EA0                 dd offset ??_R13?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00001EA4                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00001EA8                 dd offset ??_R17?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00001EAC                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00001EB0                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00001EB4                 db    0
.rdata$r:00001EB5                 align 4
.rdata$r:00001EB5 _rdata$r        ends
.rdata$r:00001EB5
.rdata$r:00001EB8 ; ===========================================================================
.rdata$r:00001EB8
.rdata$r:00001EB8 ; Segment type: Pure data
.rdata$r:00001EB8 ; Segment permissions: Read
.rdata$r:00001EB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EB8                 assume cs:_rdata$r
.rdata$r:00001EB8                 ;org 1EB8h
.rdata$r:00001EB8 ; COMDAT (pick any)
.rdata$r:00001EB8                 public ??_R1A@?0A@EA@CAesCbcEncoder@NCrypto@@8
.rdata$r:00001EB8 ; NCrypto::CAesCbcEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001EB8 ??_R1A@?0A@EA@CAesCbcEncoder@NCrypto@@8 dd offset ??_R0?AUCAesCbcEncoder@NCrypto@@@8
.rdata$r:00001EB8                                         ; DATA XREF: .rdata$r:NCrypto::CAesCbcEncoder::`RTTI Base Class Array'o
.rdata$r:00001EB8                                         ; NCrypto::CAesCbcEncoder `RTTI Type Descriptor'
.rdata$r:00001EBC                 db    8
.rdata$r:00001EBD                 db    0
.rdata$r:00001EBE                 db    0
.rdata$r:00001EBF                 db    0
.rdata$r:00001EC0                 db    0
.rdata$r:00001EC1                 db    0
.rdata$r:00001EC2                 db    0
.rdata$r:00001EC3                 db    0
.rdata$r:00001EC4                 db 0FFh
.rdata$r:00001EC5                 db 0FFh
.rdata$r:00001EC6                 db 0FFh
.rdata$r:00001EC7                 db 0FFh
.rdata$r:00001EC8                 db    0
.rdata$r:00001EC9                 db    0
.rdata$r:00001ECA                 db    0
.rdata$r:00001ECB                 db    0
.rdata$r:00001ECC                 db  40h ; @
.rdata$r:00001ECD                 db    0
.rdata$r:00001ECE                 db    0
.rdata$r:00001ECF                 db    0
.rdata$r:00001ED0                 dd offset ??_R3CAesCbcEncoder@NCrypto@@8 ; NCrypto::CAesCbcEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001ED0 _rdata$r        ends
.rdata$r:00001ED0
.rdata$r:00001ED4 ; ===========================================================================
.rdata$r:00001ED4
.rdata$r:00001ED4 ; Segment type: Pure data
.rdata$r:00001ED4 ; Segment permissions: Read
.rdata$r:00001ED4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001ED4                 assume cs:_rdata$r
.rdata$r:00001ED4                 ;org 1ED4h
.rdata$r:00001ED4 ; COMDAT (pick any)
.rdata$r:00001ED4                 public ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
.rdata$r:00001ED4 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001ED4 ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 dd offset ??_R0?AVCAesCbcCoder@NCrypto@@@8
.rdata$r:00001ED4                                         ; DATA XREF: .rdata$r:00001E94o
.rdata$r:00001ED4                                         ; .rdata$r:NCrypto::CAesCbcCoder::`RTTI Base Class Array'o ...
.rdata$r:00001ED4                                         ; NCrypto::CAesCbcCoder `RTTI Type Descriptor'
.rdata$r:00001ED8                 db    7
.rdata$r:00001ED9                 db    0
.rdata$r:00001EDA                 db    0
.rdata$r:00001EDB                 db    0
.rdata$r:00001EDC                 db    0
.rdata$r:00001EDD                 db    0
.rdata$r:00001EDE                 db    0
.rdata$r:00001EDF                 db    0
.rdata$r:00001EE0                 db 0FFh
.rdata$r:00001EE1                 db 0FFh
.rdata$r:00001EE2                 db 0FFh
.rdata$r:00001EE3                 db 0FFh
.rdata$r:00001EE4                 db    0
.rdata$r:00001EE5                 db    0
.rdata$r:00001EE6                 db    0
.rdata$r:00001EE7                 db    0
.rdata$r:00001EE8                 db  40h ; @
.rdata$r:00001EE9                 db    0
.rdata$r:00001EEA                 db    0
.rdata$r:00001EEB                 db    0
.rdata$r:00001EEC                 dd offset ??_R3CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001EEC _rdata$r        ends
.rdata$r:00001EEC
.data:00001EF0 ; ===========================================================================
.data:00001EF0
.data:00001EF0 ; Segment type: Pure data
.data:00001EF0 ; Segment permissions: Read/Write
.data:00001EF0 _data           segment dword public 'DATA' use32
.data:00001EF0                 assume cs:_data
.data:00001EF0                 ;org 1EF0h
.data:00001EF0 ; COMDAT (pick any)
.data:00001EF0                 public ??_R0?AVCAesCbcCoder@NCrypto@@@8
.data:00001EF0 ; class NCrypto::CAesCbcCoder `RTTI Type Descriptor'
.data:00001EF0 ??_R0?AVCAesCbcCoder@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00001EF0                                         ; DATA XREF: .rdata$r:NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001EF0                                         ; const type_info::`vftable'
.data:00001EF4                 align 8
.data:00001EF8 a_?avcaescbccod db '.?AVCAesCbcCoder@NCrypto@@',0
.data:00001F13                 align 4
.data:00001F13 _data           ends
.data:00001F13
.rdata$r:00001F14 ; ===========================================================================
.rdata$r:00001F14
.rdata$r:00001F14 ; Segment type: Pure data
.rdata$r:00001F14 ; Segment permissions: Read
.rdata$r:00001F14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F14                 assume cs:_rdata$r
.rdata$r:00001F14                 ;org 1F14h
.rdata$r:00001F14 ; COMDAT (pick any)
.rdata$r:00001F14                 public ??_R3CAesCbcCoder@NCrypto@@8
.rdata$r:00001F14 ; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F14 ??_R3CAesCbcCoder@NCrypto@@8 db    0    ; DATA XREF: .rdata$r:00001EECo
.rdata$r:00001F15                 db    0
.rdata$r:00001F16                 db    0
.rdata$r:00001F17                 db    0
.rdata$r:00001F18                 db    5
.rdata$r:00001F19                 db    0
.rdata$r:00001F1A                 db    0
.rdata$r:00001F1B                 db    0
.rdata$r:00001F1C                 db    8
.rdata$r:00001F1D                 db    0
.rdata$r:00001F1E                 db    0
.rdata$r:00001F1F                 db    0
.rdata$r:00001F20                 dd offset ??_R2CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Array'
.rdata$r:00001F20 _rdata$r        ends
.rdata$r:00001F20
.rdata$r:00001F24 ; ===========================================================================
.rdata$r:00001F24
.rdata$r:00001F24 ; Segment type: Pure data
.rdata$r:00001F24 ; Segment permissions: Read
.rdata$r:00001F24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F24                 assume cs:_rdata$r
.rdata$r:00001F24                 ;org 1F24h
.rdata$r:00001F24 ; COMDAT (pick any)
.rdata$r:00001F24                 public ??_R2CAesCbcCoder@NCrypto@@8
.rdata$r:00001F24 ; NCrypto::CAesCbcCoder::`RTTI Base Class Array'
.rdata$r:00001F24 ??_R2CAesCbcCoder@NCrypto@@8 dd offset ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
.rdata$r:00001F24                                         ; DATA XREF: .rdata$r:00001F20o
.rdata$r:00001F24                                         ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F28                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F2C                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00001F30                 dd offset ??_R13?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00001F34                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00001F38                 dd offset ??_R17?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00001F3C                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00001F40                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00001F44                 db    0
.rdata$r:00001F45                 align 4
.rdata$r:00001F45 _rdata$r        ends
.rdata$r:00001F45
.rdata$r:00001F48 ; ===========================================================================
.rdata$r:00001F48
.rdata$r:00001F48 ; Segment type: Pure data
.rdata$r:00001F48 ; Segment permissions: Read
.rdata$r:00001F48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F48                 assume cs:_rdata$r
.rdata$r:00001F48                 ;org 1F48h
.rdata$r:00001F48 ; COMDAT (pick any)
.rdata$r:00001F48                 public ??_R13?0A@EA@ICryptoProperties@@8
.rdata$r:00001F48 ; ICryptoProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00001F48 ??_R13?0A@EA@ICryptoProperties@@8 dd offset ??_R0?AUICryptoProperties@@@8
.rdata$r:00001F48                                         ; DATA XREF: .rdata$r:00001EA0o
.rdata$r:00001F48                                         ; .rdata$r:00001F30o ...
.rdata$r:00001F48                                         ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:00001F4C                 db    1
.rdata$r:00001F4D                 db    0
.rdata$r:00001F4E                 db    0
.rdata$r:00001F4F                 db    0
.rdata$r:00001F50                 db    4
.rdata$r:00001F51                 db    0
.rdata$r:00001F52                 db    0
.rdata$r:00001F53                 db    0
.rdata$r:00001F54                 db 0FFh
.rdata$r:00001F55                 db 0FFh
.rdata$r:00001F56                 db 0FFh
.rdata$r:00001F57                 db 0FFh
.rdata$r:00001F58                 db    0
.rdata$r:00001F59                 db    0
.rdata$r:00001F5A                 db    0
.rdata$r:00001F5B                 db    0
.rdata$r:00001F5C                 db  40h ; @
.rdata$r:00001F5D                 db    0
.rdata$r:00001F5E                 db    0
.rdata$r:00001F5F                 db    0
.rdata$r:00001F60                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F60 _rdata$r        ends
.rdata$r:00001F60
.data:00001F64 ; ===========================================================================
.data:00001F64
.data:00001F64 ; Segment type: Pure data
.data:00001F64 ; Segment permissions: Read/Write
.data:00001F64 _data           segment dword public 'DATA' use32
.data:00001F64                 assume cs:_data
.data:00001F64                 ;org 1F64h
.data:00001F64 ; COMDAT (pick any)
.data:00001F64                 public ??_R0?AUICryptoProperties@@@8
.data:00001F64 ; struct ICryptoProperties `RTTI Type Descriptor'
.data:00001F64 ??_R0?AUICryptoProperties@@@8 dd offset ??_7type_info@@6B@
.data:00001F64                                         ; DATA XREF: .rdata$r:ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00001F64                                         ; .rdata$r:ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001F64                                         ; const type_info::`vftable'
.data:00001F68                 db    0
.data:00001F69                 db    0
.data:00001F6A                 db    0
.data:00001F6B                 db    0
.data:00001F6C                 db  2Eh ; .
.data:00001F6D                 db  3Fh ; ?
.data:00001F6E                 db  41h ; A
.data:00001F6F                 db  55h ; U
.data:00001F70                 db  49h ; I
.data:00001F71                 db  43h ; C
.data:00001F72                 db  72h ; r
.data:00001F73                 db  79h ; y
.data:00001F74                 db  70h ; p
.data:00001F75                 db  74h ; t
.data:00001F76                 db  6Fh ; o
.data:00001F77                 db  50h ; P
.data:00001F78                 db  72h ; r
.data:00001F79                 db  6Fh ; o
.data:00001F7A                 db  70h ; p
.data:00001F7B                 db  65h ; e
.data:00001F7C                 db  72h ; r
.data:00001F7D                 db  74h ; t
.data:00001F7E                 db  69h ; i
.data:00001F7F                 db  65h ; e
.data:00001F80                 db  73h ; s
.data:00001F81                 db  40h ; @
.data:00001F82                 db  40h ; @
.data:00001F83                 db    0
.data:00001F83 _data           ends
.data:00001F83
.rdata$r:00001F84 ; ===========================================================================
.rdata$r:00001F84
.rdata$r:00001F84 ; Segment type: Pure data
.rdata$r:00001F84 ; Segment permissions: Read
.rdata$r:00001F84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F84                 assume cs:_rdata$r
.rdata$r:00001F84                 ;org 1F84h
.rdata$r:00001F84 ; COMDAT (pick any)
.rdata$r:00001F84                 public ??_R3ICryptoProperties@@8
.rdata$r:00001F84 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F84 ??_R3ICryptoProperties@@8 db    0       ; DATA XREF: .rdata$r:00001F60o
.rdata$r:00001F84                                         ; .rdata$r:00001FB8o
.rdata$r:00001F85                 db    0
.rdata$r:00001F86                 db    0
.rdata$r:00001F87                 db    0
.rdata$r:00001F88                 db    0
.rdata$r:00001F89                 db    0
.rdata$r:00001F8A                 db    0
.rdata$r:00001F8B                 db    0
.rdata$r:00001F8C                 db    2
.rdata$r:00001F8D                 db    0
.rdata$r:00001F8E                 db    0
.rdata$r:00001F8F                 db    0
.rdata$r:00001F90                 dd offset ??_R2ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Array'
.rdata$r:00001F90 _rdata$r        ends
.rdata$r:00001F90
.rdata$r:00001F94 ; ===========================================================================
.rdata$r:00001F94
.rdata$r:00001F94 ; Segment type: Pure data
.rdata$r:00001F94 ; Segment permissions: Read
.rdata$r:00001F94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F94                 assume cs:_rdata$r
.rdata$r:00001F94                 ;org 1F94h
.rdata$r:00001F94 ; COMDAT (pick any)
.rdata$r:00001F94                 public ??_R2ICryptoProperties@@8
.rdata$r:00001F94 ; ICryptoProperties::`RTTI Base Class Array'
.rdata$r:00001F94 ??_R2ICryptoProperties@@8 dd offset ??_R1A@?0A@EA@ICryptoProperties@@8
.rdata$r:00001F94                                         ; DATA XREF: .rdata$r:00001F90o
.rdata$r:00001F94                                         ; ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F98                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F9C                 db    0
.rdata$r:00001F9D                 align 10h
.rdata$r:00001F9D _rdata$r        ends
.rdata$r:00001F9D
.rdata$r:00001FA0 ; ===========================================================================
.rdata$r:00001FA0
.rdata$r:00001FA0 ; Segment type: Pure data
.rdata$r:00001FA0 ; Segment permissions: Read
.rdata$r:00001FA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FA0                 assume cs:_rdata$r
.rdata$r:00001FA0                 ;org 1FA0h
.rdata$r:00001FA0 ; COMDAT (pick any)
.rdata$r:00001FA0                 public ??_R1A@?0A@EA@ICryptoProperties@@8
.rdata$r:00001FA0 ; ICryptoProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001FA0 ??_R1A@?0A@EA@ICryptoProperties@@8 dd offset ??_R0?AUICryptoProperties@@@8
.rdata$r:00001FA0                                         ; DATA XREF: .rdata$r:ICryptoProperties::`RTTI Base Class Array'o
.rdata$r:00001FA0                                         ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:00001FA4                 db    1
.rdata$r:00001FA5                 db    0
.rdata$r:00001FA6                 db    0
.rdata$r:00001FA7                 db    0
.rdata$r:00001FA8                 db    0
.rdata$r:00001FA9                 db    0
.rdata$r:00001FAA                 db    0
.rdata$r:00001FAB                 db    0
.rdata$r:00001FAC                 db 0FFh
.rdata$r:00001FAD                 db 0FFh
.rdata$r:00001FAE                 db 0FFh
.rdata$r:00001FAF                 db 0FFh
.rdata$r:00001FB0                 db    0
.rdata$r:00001FB1                 db    0
.rdata$r:00001FB2                 db    0
.rdata$r:00001FB3                 db    0
.rdata$r:00001FB4                 db  40h ; @
.rdata$r:00001FB5                 db    0
.rdata$r:00001FB6                 db    0
.rdata$r:00001FB7                 db    0
.rdata$r:00001FB8                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FB8 _rdata$r        ends
.rdata$r:00001FB8
.rdata$r:00001FBC ; ===========================================================================
.rdata$r:00001FBC
.rdata$r:00001FBC ; Segment type: Pure data
.rdata$r:00001FBC ; Segment permissions: Read
.rdata$r:00001FBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FBC                 assume cs:_rdata$r
.rdata$r:00001FBC                 ;org 1FBCh
.rdata$r:00001FBC ; COMDAT (pick any)
.rdata$r:00001FBC                 public ??_R17?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00001FBC ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00001FBC ??_R17?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00001FBC                                         ; DATA XREF: .rdata$r:00001EA8o
.rdata$r:00001FBC                                         ; .rdata$r:00001F38o ...
.rdata$r:00001FBC                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00001FC0                 db    1
.rdata$r:00001FC1                 db    0
.rdata$r:00001FC2                 db    0
.rdata$r:00001FC3                 db    0
.rdata$r:00001FC4                 db    8
.rdata$r:00001FC5                 db    0
.rdata$r:00001FC6                 db    0
.rdata$r:00001FC7                 db    0
.rdata$r:00001FC8                 db 0FFh
.rdata$r:00001FC9                 db 0FFh
.rdata$r:00001FCA                 db 0FFh
.rdata$r:00001FCB                 db 0FFh
.rdata$r:00001FCC                 db    0
.rdata$r:00001FCD                 db    0
.rdata$r:00001FCE                 db    0
.rdata$r:00001FCF                 db    0
.rdata$r:00001FD0                 db  40h ; @
.rdata$r:00001FD1                 db    0
.rdata$r:00001FD2                 db    0
.rdata$r:00001FD3                 db    0
.rdata$r:00001FD4                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FD4 _rdata$r        ends
.rdata$r:00001FD4
.data:00001FD8 ; ===========================================================================
.data:00001FD8
.data:00001FD8 ; Segment type: Pure data
.data:00001FD8 ; Segment permissions: Read/Write
.data:00001FD8 _data           segment dword public 'DATA' use32
.data:00001FD8                 assume cs:_data
.data:00001FD8                 ;org 1FD8h
.data:00001FD8 ; COMDAT (pick any)
.data:00001FD8                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:00001FD8 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:00001FD8 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00001FD8                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00001FD8                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001FD8                                         ; const type_info::`vftable'
.data:00001FDC                 align 10h
.data:00001FE0 a_?auicompresss db '.?AUICompressSetCoderProperties@@',0
.data:00002002                 align 4
.data:00002002 _data           ends
.data:00002002
.rdata$r:00002004 ; ===========================================================================
.rdata$r:00002004
.rdata$r:00002004 ; Segment type: Pure data
.rdata$r:00002004 ; Segment permissions: Read
.rdata$r:00002004 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002004                 assume cs:_rdata$r
.rdata$r:00002004                 ;org 2004h
.rdata$r:00002004 ; COMDAT (pick any)
.rdata$r:00002004                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:00002004 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002004 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:00002004                                         ; DATA XREF: .rdata$r:00001FD4o
.rdata$r:00002004                                         ; .rdata$r:00002038o
.rdata$r:00002005                 db    0
.rdata$r:00002006                 db    0
.rdata$r:00002007                 db    0
.rdata$r:00002008                 db    0
.rdata$r:00002009                 db    0
.rdata$r:0000200A                 db    0
.rdata$r:0000200B                 db    0
.rdata$r:0000200C                 db    2
.rdata$r:0000200D                 db    0
.rdata$r:0000200E                 db    0
.rdata$r:0000200F                 db    0
.rdata$r:00002010                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00002010 _rdata$r        ends
.rdata$r:00002010
.rdata$r:00002014 ; ===========================================================================
.rdata$r:00002014
.rdata$r:00002014 ; Segment type: Pure data
.rdata$r:00002014 ; Segment permissions: Read
.rdata$r:00002014 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002014                 assume cs:_rdata$r
.rdata$r:00002014                 ;org 2014h
.rdata$r:00002014 ; COMDAT (pick any)
.rdata$r:00002014                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00002014 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00002014 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00002014                                         ; DATA XREF: .rdata$r:00002010o
.rdata$r:00002014                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002018                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000201C                 db    0
.rdata$r:0000201D                 align 10h
.rdata$r:0000201D _rdata$r        ends
.rdata$r:0000201D
.rdata$r:00002020 ; ===========================================================================
.rdata$r:00002020
.rdata$r:00002020 ; Segment type: Pure data
.rdata$r:00002020 ; Segment permissions: Read
.rdata$r:00002020 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002020                 assume cs:_rdata$r
.rdata$r:00002020                 ;org 2020h
.rdata$r:00002020 ; COMDAT (pick any)
.rdata$r:00002020                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00002020 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002020 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00002020                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:00002020                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00002024                 db    1
.rdata$r:00002025                 db    0
.rdata$r:00002026                 db    0
.rdata$r:00002027                 db    0
.rdata$r:00002028                 db    0
.rdata$r:00002029                 db    0
.rdata$r:0000202A                 db    0
.rdata$r:0000202B                 db    0
.rdata$r:0000202C                 db 0FFh
.rdata$r:0000202D                 db 0FFh
.rdata$r:0000202E                 db 0FFh
.rdata$r:0000202F                 db 0FFh
.rdata$r:00002030                 db    0
.rdata$r:00002031                 db    0
.rdata$r:00002032                 db    0
.rdata$r:00002033                 db    0
.rdata$r:00002034                 db  40h ; @
.rdata$r:00002035                 db    0
.rdata$r:00002036                 db    0
.rdata$r:00002037                 db    0
.rdata$r:00002038                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002038 _rdata$r        ends
.rdata$r:00002038
.rdata$r:0000203C ; ===========================================================================
.rdata$r:0000203C
.rdata$r:0000203C ; Segment type: Pure data
.rdata$r:0000203C ; Segment permissions: Read
.rdata$r:0000203C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000203C                 assume cs:_rdata$r
.rdata$r:0000203C                 ;org 203Ch
.rdata$r:0000203C ; COMDAT (pick any)
.rdata$r:0000203C                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:0000203C ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:0000203C ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000203C                                         ; DATA XREF: .rdata$r:00001EACo
.rdata$r:0000203C                                         ; .rdata$r:00001F3Co ...
.rdata$r:0000203C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002040                 db    0
.rdata$r:00002041                 db    0
.rdata$r:00002042                 db    0
.rdata$r:00002043                 db    0
.rdata$r:00002044                 db    8
.rdata$r:00002045                 db    0
.rdata$r:00002046                 db    0
.rdata$r:00002047                 db    0
.rdata$r:00002048                 db 0FFh
.rdata$r:00002049                 db 0FFh
.rdata$r:0000204A                 db 0FFh
.rdata$r:0000204B                 db 0FFh
.rdata$r:0000204C                 db    0
.rdata$r:0000204D                 db    0
.rdata$r:0000204E                 db    0
.rdata$r:0000204F                 db    0
.rdata$r:00002050                 db  42h ; B
.rdata$r:00002051                 db    0
.rdata$r:00002052                 db    0
.rdata$r:00002053                 db    0
.rdata$r:00002054                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002054 _rdata$r        ends
.rdata$r:00002054
.rdata$r:00002058 ; ===========================================================================
.rdata$r:00002058
.rdata$r:00002058 ; Segment type: Pure data
.rdata$r:00002058 ; Segment permissions: Read
.rdata$r:00002058 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002058                 assume cs:_rdata$r
.rdata$r:00002058                 ;org 2058h
.rdata$r:00002058 ; COMDAT (pick any)
.rdata$r:00002058                 public ??_R1M@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002058 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00002058 ??_R1M@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002058                                         ; DATA XREF: .rdata$r:00001EB0o
.rdata$r:00002058                                         ; .rdata$r:00001F40o ...
.rdata$r:00002058                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000205C                 align 10h
.rdata$r:00002060                 db  0Ch
.rdata$r:00002061                 db    0
.rdata$r:00002062                 db    0
.rdata$r:00002063                 db    0
.rdata$r:00002064                 db 0FFh
.rdata$r:00002065                 db 0FFh
.rdata$r:00002066                 db 0FFh
.rdata$r:00002067                 db 0FFh
.rdata$r:00002068                 db    0
.rdata$r:00002069                 db    0
.rdata$r:0000206A                 db    0
.rdata$r:0000206B                 db    0
.rdata$r:0000206C                 db  40h ; @
.rdata$r:0000206D                 db    0
.rdata$r:0000206E                 db    0
.rdata$r:0000206F                 db    0
.rdata$r:00002070                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002070 _rdata$r        ends
.rdata$r:00002070
.rdata$r:00002074 ; ===========================================================================
.rdata$r:00002074
.rdata$r:00002074 ; Segment type: Pure data
.rdata$r:00002074 ; Segment permissions: Read
.rdata$r:00002074 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002074                 assume cs:_rdata$r
.rdata$r:00002074                 ;org 2074h
.rdata$r:00002074 ; COMDAT (pick any)
.rdata$r:00002074                 public ??_R4CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@
.rdata$r:00002074 ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata$r:00002074 ??_R4CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@ db    0
.rdata$r:00002074                                         ; DATA XREF: .rdata:00001E14o
.rdata$r:00002075                 db    0
.rdata$r:00002076                 db    0
.rdata$r:00002077                 db    0
.rdata$r:00002078                 db    4
.rdata$r:00002079                 db    0
.rdata$r:0000207A                 db    0
.rdata$r:0000207B                 db    0
.rdata$r:0000207C                 db    0
.rdata$r:0000207D                 db    0
.rdata$r:0000207E                 db    0
.rdata$r:0000207F                 db    0
.rdata$r:00002080                 dd offset ??_R0?AUCAesCbcEncoder@NCrypto@@@8 ; NCrypto::CAesCbcEncoder `RTTI Type Descriptor'
.rdata$r:00002084                 dd offset ??_R3CAesCbcEncoder@NCrypto@@8 ; NCrypto::CAesCbcEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002084 _rdata$r        ends
.rdata$r:00002084
.rdata$r:00002088 ; ===========================================================================
.rdata$r:00002088
.rdata$r:00002088 ; Segment type: Pure data
.rdata$r:00002088 ; Segment permissions: Read
.rdata$r:00002088 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002088                 assume cs:_rdata$r
.rdata$r:00002088                 ;org 2088h
.rdata$r:00002088 ; COMDAT (pick any)
.rdata$r:00002088                 public ??_R4CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata$r:00002088 ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00002088 ??_R4CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00002088                                         ; DATA XREF: .rdata:00001E00o
.rdata$r:00002089                 db    0
.rdata$r:0000208A                 db    0
.rdata$r:0000208B                 db    0
.rdata$r:0000208C                 db    8
.rdata$r:0000208D                 db    0
.rdata$r:0000208E                 db    0
.rdata$r:0000208F                 db    0
.rdata$r:00002090                 db    0
.rdata$r:00002091                 db    0
.rdata$r:00002092                 db    0
.rdata$r:00002093                 db    0
.rdata$r:00002094                 dd offset ??_R0?AUCAesCbcEncoder@NCrypto@@@8 ; NCrypto::CAesCbcEncoder `RTTI Type Descriptor'
.rdata$r:00002098                 dd offset ??_R3CAesCbcEncoder@NCrypto@@8 ; NCrypto::CAesCbcEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002098 _rdata$r        ends
.rdata$r:00002098
.text:0000209C ; ===========================================================================
.text:0000209C
.text:0000209C ; Segment type: Pure code
.text:0000209C ; Segment permissions: Read/Execute
.text:0000209C _text           segment para public 'CODE' use32
.text:0000209C                 assume cs:_text
.text:0000209C                 ;org 209Ch
.text:0000209C ; COMDAT (pick any)
.text:0000209C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000209C
.text:0000209C ; =============== S U B R O U T I N E =======================================
.text:0000209C
.text:0000209C ; Attributes: bp-based frame
.text:0000209C
.text:0000209C ; __int32 __stdcall NCrypto::CAesCbcCoder::QueryInterface(NCrypto::CAesCbcCoder *this, const struct _GUID *Buf1, void **)
.text:0000209C                 public ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.text:0000209C ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000209C                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000209C                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:0000209C                                         ; DATA XREF: ...
.text:0000209C
.text:0000209C var_C           = dword ptr -0Ch
.text:0000209C var_8           = dword ptr -8
.text:0000209C var_4           = dword ptr -4
.text:0000209C this            = dword ptr  8
.text:0000209C Buf1            = dword ptr  0Ch
.text:0000209C arg_8           = dword ptr  10h
.text:0000209C
.text:0000209C                 push    ebp
.text:0000209D                 mov     ebp, esp
.text:0000209F                 sub     esp, 0Ch
.text:000020A2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000020A9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000020B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000020B7                 mov     eax, [ebp+arg_8]
.text:000020BA                 mov     dword ptr [eax], 0
.text:000020C0                 push    offset _IID_IUnknown ; Buf2
.text:000020C5                 mov     ecx, [ebp+Buf1]
.text:000020C8                 push    ecx             ; Buf1
.text:000020C9                 call    ___@8           ; __(x,x)
.text:000020CE                 test    eax, eax
.text:000020D0                 jz      short loc_20F4
.text:000020D2                 cmp     [ebp+this], 0
.text:000020D6                 jz      short loc_20E3
.text:000020D8                 mov     edx, [ebp+this]
.text:000020DB                 add     edx, 4
.text:000020DE                 mov     [ebp+var_4], edx
.text:000020E1                 jmp     short loc_20EA
.text:000020E3 ; ---------------------------------------------------------------------------
.text:000020E3
.text:000020E3 loc_20E3:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+3Aj
.text:000020E3                 mov     [ebp+var_4], 0
.text:000020EA
.text:000020EA loc_20EA:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+45j
.text:000020EA                 mov     eax, [ebp+arg_8]
.text:000020ED                 mov     ecx, [ebp+var_4]
.text:000020F0                 mov     [eax], ecx
.text:000020F2                 jmp     short loc_2163
.text:000020F4 ; ---------------------------------------------------------------------------
.text:000020F4
.text:000020F4 loc_20F4:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+34j
.text:000020F4                 push    offset _IID_ICryptoProperties ; Buf2
.text:000020F9                 mov     edx, [ebp+Buf1]
.text:000020FC                 push    edx             ; Buf1
.text:000020FD                 call    ___@8           ; __(x,x)
.text:00002102                 test    eax, eax
.text:00002104                 jz      short loc_2128
.text:00002106                 cmp     [ebp+this], 0
.text:0000210A                 jz      short loc_2117
.text:0000210C                 mov     eax, [ebp+this]
.text:0000210F                 add     eax, 4
.text:00002112                 mov     [ebp+var_8], eax
.text:00002115                 jmp     short loc_211E
.text:00002117 ; ---------------------------------------------------------------------------
.text:00002117
.text:00002117 loc_2117:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:00002117                 mov     [ebp+var_8], 0
.text:0000211E
.text:0000211E loc_211E:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+79j
.text:0000211E                 mov     ecx, [ebp+arg_8]
.text:00002121                 mov     edx, [ebp+var_8]
.text:00002124                 mov     [ecx], edx
.text:00002126                 jmp     short loc_2163
.text:00002128 ; ---------------------------------------------------------------------------
.text:00002128
.text:00002128 loc_2128:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+68j
.text:00002128                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:0000212D                 mov     eax, [ebp+Buf1]
.text:00002130                 push    eax             ; Buf1
.text:00002131                 call    ___@8           ; __(x,x)
.text:00002136                 test    eax, eax
.text:00002138                 jz      short loc_215C
.text:0000213A                 cmp     [ebp+this], 0
.text:0000213E                 jz      short loc_214B
.text:00002140                 mov     ecx, [ebp+this]
.text:00002143                 add     ecx, 8
.text:00002146                 mov     [ebp+var_C], ecx
.text:00002149                 jmp     short loc_2152
.text:0000214B ; ---------------------------------------------------------------------------
.text:0000214B
.text:0000214B loc_214B:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+A2j
.text:0000214B                 mov     [ebp+var_C], 0
.text:00002152
.text:00002152 loc_2152:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+ADj
.text:00002152                 mov     edx, [ebp+arg_8]
.text:00002155                 mov     eax, [ebp+var_C]
.text:00002158                 mov     [edx], eax
.text:0000215A                 jmp     short loc_2163
.text:0000215C ; ---------------------------------------------------------------------------
.text:0000215C
.text:0000215C loc_215C:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+9Cj
.text:0000215C                 mov     eax, 80004002h
.text:00002161                 jmp     short loc_2174
.text:00002163 ; ---------------------------------------------------------------------------
.text:00002163
.text:00002163 loc_2163:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+56j
.text:00002163                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+8Aj ...
.text:00002163                 mov     ecx, [ebp+this]
.text:00002166                 mov     edx, [ecx+0Ch]
.text:00002169                 add     edx, 1
.text:0000216C                 mov     eax, [ebp+this]
.text:0000216F                 mov     [eax+0Ch], edx
.text:00002172                 xor     eax, eax
.text:00002174
.text:00002174 loc_2174:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+C5j
.text:00002174                 add     esp, 0Ch
.text:00002177                 cmp     ebp, esp
.text:00002179                 call    __RTC_CheckEsp
.text:0000217E                 mov     esp, ebp
.text:00002180                 pop     ebp
.text:00002181                 retn    0Ch
.text:00002181 ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002181
.text:00002181 _text           ends
.text:00002181
.text:00002184 ; ===========================================================================
.text:00002184
.text:00002184 ; Segment type: Pure code
.text:00002184 ; Segment permissions: Read/Execute
.text:00002184 _text           segment para public 'CODE' use32
.text:00002184                 assume cs:_text
.text:00002184                 ;org 2184h
.text:00002184 ; COMDAT (pick any)
.text:00002184                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002184
.text:00002184 ; =============== S U B R O U T I N E =======================================
.text:00002184
.text:00002184 ; Attributes: bp-based frame
.text:00002184
.text:00002184 ; unsigned __int32 __stdcall NCrypto::CAesCbcCoder::AddRef(NCrypto::CAesCbcCoder *this)
.text:00002184                 public ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ
.text:00002184 ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ proc near
.text:00002184                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)+5j
.text:00002184                                         ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)+5j
.text:00002184                                         ; DATA XREF: ...
.text:00002184
.text:00002184 var_4           = dword ptr -4
.text:00002184 this            = dword ptr  8
.text:00002184
.text:00002184                 push    ebp
.text:00002185                 mov     ebp, esp
.text:00002187                 push    ecx
.text:00002188                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000218F                 mov     eax, [ebp+this]
.text:00002192                 mov     ecx, [eax+0Ch]
.text:00002195                 add     ecx, 1
.text:00002198                 mov     [ebp+var_4], ecx
.text:0000219B                 mov     edx, [ebp+this]
.text:0000219E                 mov     eax, [ebp+var_4]
.text:000021A1                 mov     [edx+0Ch], eax
.text:000021A4                 mov     eax, [ebp+var_4]
.text:000021A7                 mov     esp, ebp
.text:000021A9                 pop     ebp
.text:000021AA                 retn    4
.text:000021AA ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ endp
.text:000021AA
.text:000021AA ; ---------------------------------------------------------------------------
.text:000021AD                 align 10h
.text:000021AD _text           ends
.text:000021AD
.text:000021B0 ; ===========================================================================
.text:000021B0
.text:000021B0 ; Segment type: Pure code
.text:000021B0 ; Segment permissions: Read/Execute
.text:000021B0 _text           segment para public 'CODE' use32
.text:000021B0                 assume cs:_text
.text:000021B0                 ;org 21B0h
.text:000021B0 ; COMDAT (pick any)
.text:000021B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000021B0
.text:000021B0 ; =============== S U B R O U T I N E =======================================
.text:000021B0
.text:000021B0 ; Attributes: bp-based frame
.text:000021B0
.text:000021B0 ; unsigned __int32 __stdcall NCrypto::CAesCbcCoder::Release(NCrypto::CAesCbcCoder *this)
.text:000021B0                 public ?Release@CAesCbcCoder@NCrypto@@UAGKXZ
.text:000021B0 ?Release@CAesCbcCoder@NCrypto@@UAGKXZ proc near
.text:000021B0                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)+5j
.text:000021B0                                         ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)+5j
.text:000021B0                                         ; DATA XREF: ...
.text:000021B0
.text:000021B0 var_8           = dword ptr -8
.text:000021B0 var_4           = dword ptr -4
.text:000021B0 this            = dword ptr  8
.text:000021B0
.text:000021B0                 push    ebp
.text:000021B1                 mov     ebp, esp
.text:000021B3                 sub     esp, 8
.text:000021B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000021BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021C4                 mov     eax, [ebp+this]
.text:000021C7                 mov     ecx, [eax+0Ch]
.text:000021CA                 sub     ecx, 1
.text:000021CD                 mov     [ebp+var_8], ecx
.text:000021D0                 mov     edx, [ebp+this]
.text:000021D3                 mov     eax, [ebp+var_8]
.text:000021D6                 mov     [edx+0Ch], eax
.text:000021D9                 cmp     [ebp+var_8], 0
.text:000021DD                 jz      short loc_21E7
.text:000021DF                 mov     ecx, [ebp+this]
.text:000021E2                 mov     eax, [ecx+0Ch]
.text:000021E5                 jmp     short loc_21FB
.text:000021E7 ; ---------------------------------------------------------------------------
.text:000021E7
.text:000021E7 loc_21E7:                               ; CODE XREF: NCrypto::CAesCbcCoder::Release(void)+2Dj
.text:000021E7                 mov     edx, [ebp+this]
.text:000021EA                 mov     [ebp+var_4], edx
.text:000021ED                 mov     eax, [ebp+var_4]
.text:000021F0                 push    eax             ; void *
.text:000021F1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000021F6                 add     esp, 4
.text:000021F9                 xor     eax, eax
.text:000021FB
.text:000021FB loc_21FB:                               ; CODE XREF: NCrypto::CAesCbcCoder::Release(void)+35j
.text:000021FB                 add     esp, 8
.text:000021FE                 cmp     ebp, esp
.text:00002200                 call    __RTC_CheckEsp
.text:00002205                 mov     esp, ebp
.text:00002207                 pop     ebp
.text:00002208                 retn    4
.text:00002208 ?Release@CAesCbcCoder@NCrypto@@UAGKXZ endp
.text:00002208
.text:00002208 ; ---------------------------------------------------------------------------
.text:0000220B                 align 4
.text:0000220B _text           ends
.text:0000220B
.text:0000220C ; ===========================================================================
.text:0000220C
.text:0000220C ; Segment type: Pure code
.text:0000220C ; Segment permissions: Read/Execute
.text:0000220C _text           segment para public 'CODE' use32
.text:0000220C                 assume cs:_text
.text:0000220C                 ;org 220Ch
.text:0000220C ; COMDAT (pick any)
.text:0000220C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000220C
.text:0000220C ; =============== S U B R O U T I N E =======================================
.text:0000220C
.text:0000220C ; Attributes: bp-based frame
.text:0000220C
.text:0000220C ; _DWORD __thiscall NCrypto::N7z::CBaseCoder::CBaseCoder(NCrypto::N7z::CBaseCoder *__hidden this)
.text:0000220C                 public ??0CBaseCoder@N7z@NCrypto@@QAE@XZ
.text:0000220C ??0CBaseCoder@N7z@NCrypto@@QAE@XZ proc near
.text:0000220C                                         ; CODE XREF: NCrypto::N7z::CEncoder::CEncoder(void)+3Cp
.text:0000220C                                         ; NCrypto::N7z::CDecoder::CDecoder(void)+3Cp
.text:0000220C
.text:0000220C var_10          = dword ptr -10h
.text:0000220C var_C           = dword ptr -0Ch
.text:0000220C var_4           = dword ptr -4
.text:0000220C
.text:0000220C                 push    ebp
.text:0000220D                 mov     ebp, esp
.text:0000220F                 push    0FFFFFFFFh
.text:00002211                 push    offset __ehhandler$??0CBaseCoder@N7z@NCrypto@@QAE@XZ
.text:00002216                 mov     eax, large fs:0
.text:0000221C                 push    eax
.text:0000221D                 push    ecx
.text:0000221E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002225                 mov     eax, dword ptr ds:___security_cookie
.text:0000222A                 xor     eax, ebp
.text:0000222C                 push    eax
.text:0000222D                 lea     eax, [ebp+var_C]
.text:00002230                 mov     large fs:0, eax
.text:00002236                 mov     [ebp+var_10], ecx
.text:00002239                 mov     ecx, [ebp+var_10] ; this
.text:0000223C                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:00002241                 mov     ecx, [ebp+var_10]
.text:00002244                 add     ecx, 4          ; this
.text:00002247                 call    ??0ICryptoSetPassword@@QAE@XZ ; ICryptoSetPassword::ICryptoSetPassword(void)
.text:0000224C                 mov     ecx, [ebp+var_10]
.text:0000224F                 add     ecx, 8          ; this
.text:00002252                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00002257                 mov     ecx, [ebp+var_10]
.text:0000225A                 add     ecx, 0Ch        ; this
.text:0000225D                 call    ??0CBase@N7z@NCrypto@@IAE@XZ ; NCrypto::N7z::CBase::CBase(void)
.text:00002262                 mov     [ebp+var_4], 0
.text:00002269                 mov     eax, [ebp+var_10]
.text:0000226C                 mov     dword ptr [eax], offset ??_7CBaseCoder@N7z@NCrypto@@6BICompressFilter@@@ ; const NCrypto::N7z::CBaseCoder::`vftable'{for `ICompressFilter'}
.text:00002272                 mov     ecx, [ebp+var_10]
.text:00002275                 mov     dword ptr [ecx+4], offset ??_7CBaseCoder@N7z@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::N7z::CBaseCoder::`vftable'{for `ICryptoSetPassword'}
.text:0000227C                 mov     ecx, [ebp+var_10]
.text:0000227F                 add     ecx, 70h ; 'p'
.text:00002282                 call    ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>(void)
.text:00002287                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000228E                 mov     eax, [ebp+var_10]
.text:00002291                 mov     ecx, [ebp+var_C]
.text:00002294                 mov     large fs:0, ecx
.text:0000229B                 pop     ecx
.text:0000229C                 add     esp, 10h
.text:0000229F                 cmp     ebp, esp
.text:000022A1                 call    __RTC_CheckEsp
.text:000022A6                 mov     esp, ebp
.text:000022A8                 pop     ebp
.text:000022A9                 retn
.text:000022A9 ??0CBaseCoder@N7z@NCrypto@@QAE@XZ endp
.text:000022A9
.text:000022A9 ; ---------------------------------------------------------------------------
.text:000022AA                 align 4
.text:000022AA _text           ends
.text:000022AA
.text$x:000022AC ; ===========================================================================
.text$x:000022AC
.text$x:000022AC ; Segment type: Pure code
.text$x:000022AC ; Segment permissions: Read/Execute
.text$x:000022AC _text$x         segment para public 'CODE' use32
.text$x:000022AC                 assume cs:_text$x
.text$x:000022AC                 ;org 22ACh
.text$x:000022AC ; COMDAT (pick associative to section at 220C)
.text$x:000022AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000022AC
.text$x:000022AC ; =============== S U B R O U T I N E =======================================
.text$x:000022AC
.text$x:000022AC
.text$x:000022AC __unwindfunclet$??0CBaseCoder@N7z@NCrypto@@QAE@XZ$0 proc near
.text$x:000022AC                                         ; DATA XREF: .xdata$x:00002304o
.text$x:000022AC                 mov     ecx, [ebp-10h]
.text$x:000022AF                 add     ecx, 0Ch        ; this
.text$x:000022B2                 jmp     ??1CBase@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CBase::~CBase(void)
.text$x:000022B2 __unwindfunclet$??0CBaseCoder@N7z@NCrypto@@QAE@XZ$0 endp
.text$x:000022B2
.text$x:000022B7
.text$x:000022B7 ; =============== S U B R O U T I N E =======================================
.text$x:000022B7
.text$x:000022B7
.text$x:000022B7 __ehhandler$??0CBaseCoder@N7z@NCrypto@@QAE@XZ proc near
.text$x:000022B7                                         ; DATA XREF: NCrypto::N7z::CBaseCoder::CBaseCoder(void)+5o
.text$x:000022B7
.text$x:000022B7 arg_4           = dword ptr  8
.text$x:000022B7
.text$x:000022B7                 mov     edx, [esp+arg_4]
.text$x:000022BB                 lea     eax, [edx+0Ch]
.text$x:000022BE                 mov     ecx, [edx-8]
.text$x:000022C1                 xor     ecx, eax
.text$x:000022C3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000022C8                 mov     eax, offset __ehfuncinfo$??0CBaseCoder@N7z@NCrypto@@QAE@XZ
.text$x:000022CD                 jmp     ___CxxFrameHandler3
.text$x:000022CD __ehhandler$??0CBaseCoder@N7z@NCrypto@@QAE@XZ endp
.text$x:000022CD
.text$x:000022CD ; ---------------------------------------------------------------------------
.text$x:000022D2                 align 4
.text$x:000022D2 _text$x         ends
.text$x:000022D2
.rdata:000022D4 ; ===========================================================================
.rdata:000022D4
.rdata:000022D4 ; Segment type: Pure data
.rdata:000022D4 ; Segment permissions: Read
.rdata:000022D4 _rdata          segment dword public 'DATA' use32
.rdata:000022D4                 assume cs:_rdata
.rdata:000022D4                 ;org 22D4h
.rdata:000022D4 ; COMDAT (pick largest)
.rdata:000022D4                 dd offset ??_R4CBaseCoder@N7z@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::N7z::CBaseCoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:000022D8                 public ??_7CBaseCoder@N7z@NCrypto@@6BICryptoSetPassword@@@
.rdata:000022D8 ; const NCrypto::N7z::CBaseCoder::`vftable'{for `ICryptoSetPassword'}
.rdata:000022D8 ??_7CBaseCoder@N7z@NCrypto@@6BICryptoSetPassword@@@ dd offset __purecall
.rdata:000022D8                                         ; DATA XREF: NCrypto::N7z::CBaseCoder::CBaseCoder(void)+69o
.rdata:000022DC                 dd offset __purecall
.rdata:000022E0                 dd offset __purecall
.rdata:000022E4                 dd offset ?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z ; NCrypto::N7z::CBaseCoder::CryptoSetPassword(uchar const *,uint)
.rdata:000022E4 _rdata          ends
.rdata:000022E4
.rdata:000022E8 ; ===========================================================================
.rdata:000022E8
.rdata:000022E8 ; Segment type: Pure data
.rdata:000022E8 ; Segment permissions: Read
.rdata:000022E8 _rdata          segment dword public 'DATA' use32
.rdata:000022E8                 assume cs:_rdata
.rdata:000022E8                 ;org 22E8h
.rdata:000022E8 ; COMDAT (pick largest)
.rdata:000022E8                 dd offset ??_R4CBaseCoder@N7z@NCrypto@@6BICompressFilter@@@ ; const NCrypto::N7z::CBaseCoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:000022EC                 public ??_7CBaseCoder@N7z@NCrypto@@6BICompressFilter@@@
.rdata:000022EC ; const NCrypto::N7z::CBaseCoder::`vftable'{for `ICompressFilter'}
.rdata:000022EC ??_7CBaseCoder@N7z@NCrypto@@6BICompressFilter@@@ dd offset __purecall
.rdata:000022EC                                         ; DATA XREF: NCrypto::N7z::CBaseCoder::CBaseCoder(void)+60o
.rdata:000022F0                 dd offset __purecall
.rdata:000022F4                 dd offset __purecall
.rdata:000022F8                 dd offset ?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ ; NCrypto::N7z::CBaseCoder::Init(void)
.rdata:000022FC                 dd offset ?Filter@CBaseCoder@N7z@NCrypto@@UAGIPAEI@Z ; NCrypto::N7z::CBaseCoder::Filter(uchar *,uint)
.rdata:000022FC _rdata          ends
.rdata:000022FC
.xdata$x:00002300 ; ===========================================================================
.xdata$x:00002300
.xdata$x:00002300 ; Segment type: Pure data
.xdata$x:00002300 ; Segment permissions: Read
.xdata$x:00002300 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002300                 assume cs:_xdata$x
.xdata$x:00002300                 ;org 2300h
.xdata$x:00002300 ; COMDAT (pick associative to section at 220C)
.xdata$x:00002300 __unwindtable$??0CBaseCoder@N7z@NCrypto@@QAE@XZ db 0FFh
.xdata$x:00002300                                         ; DATA XREF: .xdata$x:00002310o
.xdata$x:00002301                 db 0FFh
.xdata$x:00002302                 db 0FFh
.xdata$x:00002303                 db 0FFh
.xdata$x:00002304                 dd offset __unwindfunclet$??0CBaseCoder@N7z@NCrypto@@QAE@XZ$0
.xdata$x:00002308 __ehfuncinfo$??0CBaseCoder@N7z@NCrypto@@QAE@XZ db  22h ; "
.xdata$x:00002308                                         ; DATA XREF: __ehhandler$??0CBaseCoder@N7z@NCrypto@@QAE@XZ+11o
.xdata$x:00002309                 db    5
.xdata$x:0000230A                 db  93h ; ô
.xdata$x:0000230B                 db  19h
.xdata$x:0000230C                 db    1
.xdata$x:0000230D                 db    0
.xdata$x:0000230E                 db    0
.xdata$x:0000230F                 db    0
.xdata$x:00002310                 dd offset __unwindtable$??0CBaseCoder@N7z@NCrypto@@QAE@XZ
.xdata$x:00002314                 db    0
.xdata$x:00002315                 db    0
.xdata$x:00002316                 db    0
.xdata$x:00002317                 db    0
.xdata$x:00002318                 db    0
.xdata$x:00002319                 db    0
.xdata$x:0000231A                 db    0
.xdata$x:0000231B                 db    0
.xdata$x:0000231C                 db    0
.xdata$x:0000231D                 db    0
.xdata$x:0000231E                 db    0
.xdata$x:0000231F                 db    0
.xdata$x:00002320                 db    0
.xdata$x:00002321                 db    0
.xdata$x:00002322                 db    0
.xdata$x:00002323                 db    0
.xdata$x:00002324                 db    0
.xdata$x:00002325                 db    0
.xdata$x:00002326                 db    0
.xdata$x:00002327                 db    0
.xdata$x:00002328                 db    1
.xdata$x:00002329                 db    0
.xdata$x:0000232A                 db    0
.xdata$x:0000232B                 db    0
.xdata$x:0000232B _xdata$x        ends
.xdata$x:0000232B
.rdata$r:0000232C ; ===========================================================================
.rdata$r:0000232C
.rdata$r:0000232C ; Segment type: Pure data
.rdata$r:0000232C ; Segment permissions: Read
.rdata$r:0000232C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000232C                 assume cs:_rdata$r
.rdata$r:0000232C                 ;org 232Ch
.rdata$r:0000232C ; COMDAT (pick any)
.rdata$r:0000232C                 public ??_R4CBaseCoder@N7z@NCrypto@@6BICompressFilter@@@
.rdata$r:0000232C ; const NCrypto::N7z::CBaseCoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:0000232C ??_R4CBaseCoder@N7z@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:0000232C                                         ; DATA XREF: .rdata:000022E8o
.rdata$r:0000232D                 db    0
.rdata$r:0000232E                 db    0
.rdata$r:0000232F                 db    0
.rdata$r:00002330                 db    0
.rdata$r:00002331                 db    0
.rdata$r:00002332                 db    0
.rdata$r:00002333                 db    0
.rdata$r:00002334                 db    0
.rdata$r:00002335                 db    0
.rdata$r:00002336                 db    0
.rdata$r:00002337                 db    0
.rdata$r:00002338                 dd offset ??_R0?AVCBaseCoder@N7z@NCrypto@@@8 ; NCrypto::N7z::CBaseCoder `RTTI Type Descriptor'
.rdata$r:0000233C                 dd offset ??_R3CBaseCoder@N7z@NCrypto@@8 ; NCrypto::N7z::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000233C _rdata$r        ends
.rdata$r:0000233C
.rdata$r:00002340 ; ===========================================================================
.rdata$r:00002340
.rdata$r:00002340 ; Segment type: Pure data
.rdata$r:00002340 ; Segment permissions: Read
.rdata$r:00002340 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002340                 assume cs:_rdata$r
.rdata$r:00002340                 ;org 2340h
.rdata$r:00002340 ; COMDAT (pick any)
.rdata$r:00002340                 public ??_R4CBaseCoder@N7z@NCrypto@@6BICryptoSetPassword@@@
.rdata$r:00002340 ; const NCrypto::N7z::CBaseCoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:00002340 ??_R4CBaseCoder@N7z@NCrypto@@6BICryptoSetPassword@@@ db    0
.rdata$r:00002340                                         ; DATA XREF: .rdata:000022D4o
.rdata$r:00002341                 db    0
.rdata$r:00002342                 db    0
.rdata$r:00002343                 db    0
.rdata$r:00002344                 db    4
.rdata$r:00002345                 db    0
.rdata$r:00002346                 db    0
.rdata$r:00002347                 db    0
.rdata$r:00002348                 db    0
.rdata$r:00002349                 db    0
.rdata$r:0000234A                 db    0
.rdata$r:0000234B                 db    0
.rdata$r:0000234C                 dd offset ??_R0?AVCBaseCoder@N7z@NCrypto@@@8 ; NCrypto::N7z::CBaseCoder `RTTI Type Descriptor'
.rdata$r:00002350                 dd offset ??_R3CBaseCoder@N7z@NCrypto@@8 ; NCrypto::N7z::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002350 _rdata$r        ends
.rdata$r:00002350
.text:00002354 ; ===========================================================================
.text:00002354
.text:00002354 ; Segment type: Pure code
.text:00002354 ; Segment permissions: Read/Execute
.text:00002354 _text           segment para public 'CODE' use32
.text:00002354                 assume cs:_text
.text:00002354                 ;org 2354h
.text:00002354 ; COMDAT (pick any)
.text:00002354                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002354
.text:00002354 ; =============== S U B R O U T I N E =======================================
.text:00002354
.text:00002354 ; Attributes: bp-based frame
.text:00002354
.text:00002354 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00002354                 public ??0CMyUnknownImp@@QAE@XZ
.text:00002354 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCrypto::N7z::CBaseCoder::CBaseCoder(void)+46p
.text:00002354
.text:00002354 var_4           = dword ptr -4
.text:00002354
.text:00002354                 push    ebp
.text:00002355                 mov     ebp, esp
.text:00002357                 push    ecx
.text:00002358                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000235F                 mov     [ebp+var_4], ecx
.text:00002362                 mov     eax, [ebp+var_4]
.text:00002365                 mov     dword ptr [eax], 0
.text:0000236B                 mov     eax, [ebp+var_4]
.text:0000236E                 mov     esp, ebp
.text:00002370                 pop     ebp
.text:00002371                 retn
.text:00002371 ??0CMyUnknownImp@@QAE@XZ endp
.text:00002371
.text:00002371 ; ---------------------------------------------------------------------------
.text:00002372                 align 4
.text:00002372 _text           ends
.text:00002372
.text:00002374 ; ===========================================================================
.text:00002374
.text:00002374 ; Segment type: Pure code
.text:00002374 ; Segment permissions: Read/Execute
.text:00002374 _text           segment para public 'CODE' use32
.text:00002374                 assume cs:_text
.text:00002374                 ;org 2374h
.text:00002374 ; COMDAT (pick any)
.text:00002374                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002374
.text:00002374 ; =============== S U B R O U T I N E =======================================
.text:00002374
.text:00002374 ; Attributes: bp-based frame
.text:00002374
.text:00002374 ; _DWORD __thiscall ICompressWriteCoderProperties::ICompressWriteCoderProperties(ICompressWriteCoderProperties *__hidden this)
.text:00002374                 public ??0ICompressWriteCoderProperties@@QAE@XZ
.text:00002374 ??0ICompressWriteCoderProperties@@QAE@XZ proc near
.text:00002374                                         ; CODE XREF: NCrypto::N7z::CEncoder::CEncoder(void)+4Ep
.text:00002374
.text:00002374 var_4           = dword ptr -4
.text:00002374
.text:00002374                 push    ebp
.text:00002375                 mov     ebp, esp
.text:00002377                 push    ecx
.text:00002378                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000237F                 mov     [ebp+var_4], ecx
.text:00002382                 mov     ecx, [ebp+var_4]
.text:00002385                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000238A                 mov     eax, [ebp+var_4]
.text:0000238D                 mov     dword ptr [eax], offset ??_7ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`vftable'
.text:00002393                 mov     eax, [ebp+var_4]
.text:00002396                 add     esp, 4
.text:00002399                 cmp     ebp, esp
.text:0000239B                 call    __RTC_CheckEsp
.text:000023A0                 mov     esp, ebp
.text:000023A2                 pop     ebp
.text:000023A3                 retn
.text:000023A3 ??0ICompressWriteCoderProperties@@QAE@XZ endp
.text:000023A3
.text:000023A3 _text           ends
.text:000023A3
.rdata:000023A4 ; ===========================================================================
.rdata:000023A4
.rdata:000023A4 ; Segment type: Pure data
.rdata:000023A4 ; Segment permissions: Read
.rdata:000023A4 _rdata          segment dword public 'DATA' use32
.rdata:000023A4                 assume cs:_rdata
.rdata:000023A4                 ;org 23A4h
.rdata:000023A4 ; COMDAT (pick largest)
.rdata:000023A4                 dd offset ??_R4ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata:000023A8                 public ??_7ICompressWriteCoderProperties@@6B@
.rdata:000023A8 ; const ICompressWriteCoderProperties::`vftable'
.rdata:000023A8 ??_7ICompressWriteCoderProperties@@6B@ dd offset __purecall
.rdata:000023A8                                         ; DATA XREF: ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)+19o
.rdata:000023AC                 dd offset __purecall
.rdata:000023B0                 dd offset __purecall
.rdata:000023B4                 dd offset __purecall
.rdata:000023B4 _rdata          ends
.rdata:000023B4
.rdata$r:000023B8 ; ===========================================================================
.rdata$r:000023B8
.rdata$r:000023B8 ; Segment type: Pure data
.rdata$r:000023B8 ; Segment permissions: Read
.rdata$r:000023B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023B8                 assume cs:_rdata$r
.rdata$r:000023B8                 ;org 23B8h
.rdata$r:000023B8 ; COMDAT (pick any)
.rdata$r:000023B8                 public ??_R4ICompressWriteCoderProperties@@6B@
.rdata$r:000023B8 ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata$r:000023B8 ??_R4ICompressWriteCoderProperties@@6B@ db    0
.rdata$r:000023B8                                         ; DATA XREF: .rdata:000023A4o
.rdata$r:000023B9                 db    0
.rdata$r:000023BA                 db    0
.rdata$r:000023BB                 db    0
.rdata$r:000023BC                 db    0
.rdata$r:000023BD                 db    0
.rdata$r:000023BE                 db    0
.rdata$r:000023BF                 db    0
.rdata$r:000023C0                 db    0
.rdata$r:000023C1                 db    0
.rdata$r:000023C2                 db    0
.rdata$r:000023C3                 db    0
.rdata$r:000023C4                 dd offset ??_R0?AUICompressWriteCoderProperties@@@8 ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:000023C8                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023C8 _rdata$r        ends
.rdata$r:000023C8
.text:000023CC ; ===========================================================================
.text:000023CC
.text:000023CC ; Segment type: Pure code
.text:000023CC ; Segment permissions: Read/Execute
.text:000023CC _text           segment para public 'CODE' use32
.text:000023CC                 assume cs:_text
.text:000023CC                 ;org 23CCh
.text:000023CC ; COMDAT (pick any)
.text:000023CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000023CC
.text:000023CC ; =============== S U B R O U T I N E =======================================
.text:000023CC
.text:000023CC ; Attributes: bp-based frame
.text:000023CC
.text:000023CC ; _DWORD __thiscall ICryptoResetInitVector::ICryptoResetInitVector(ICryptoResetInitVector *__hidden this)
.text:000023CC                 public ??0ICryptoResetInitVector@@QAE@XZ
.text:000023CC ??0ICryptoResetInitVector@@QAE@XZ proc near
.text:000023CC                                         ; CODE XREF: NCrypto::N7z::CEncoder::CEncoder(void)+59p
.text:000023CC
.text:000023CC var_4           = dword ptr -4
.text:000023CC
.text:000023CC                 push    ebp
.text:000023CD                 mov     ebp, esp
.text:000023CF                 push    ecx
.text:000023D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023D7                 mov     [ebp+var_4], ecx
.text:000023DA                 mov     ecx, [ebp+var_4]
.text:000023DD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000023E2                 mov     eax, [ebp+var_4]
.text:000023E5                 mov     dword ptr [eax], offset ??_7ICryptoResetInitVector@@6B@ ; const ICryptoResetInitVector::`vftable'
.text:000023EB                 mov     eax, [ebp+var_4]
.text:000023EE                 add     esp, 4
.text:000023F1                 cmp     ebp, esp
.text:000023F3                 call    __RTC_CheckEsp
.text:000023F8                 mov     esp, ebp
.text:000023FA                 pop     ebp
.text:000023FB                 retn
.text:000023FB ??0ICryptoResetInitVector@@QAE@XZ endp
.text:000023FB
.text:000023FB _text           ends
.text:000023FB
.rdata:000023FC ; ===========================================================================
.rdata:000023FC
.rdata:000023FC ; Segment type: Pure data
.rdata:000023FC ; Segment permissions: Read
.rdata:000023FC _rdata          segment dword public 'DATA' use32
.rdata:000023FC                 assume cs:_rdata
.rdata:000023FC                 ;org 23FCh
.rdata:000023FC ; COMDAT (pick largest)
.rdata:000023FC                 dd offset ??_R4ICryptoResetInitVector@@6B@ ; const ICryptoResetInitVector::`RTTI Complete Object Locator'
.rdata:00002400                 public ??_7ICryptoResetInitVector@@6B@
.rdata:00002400 ; const ICryptoResetInitVector::`vftable'
.rdata:00002400 ??_7ICryptoResetInitVector@@6B@ dd offset __purecall
.rdata:00002400                                         ; DATA XREF: ICryptoResetInitVector::ICryptoResetInitVector(void)+19o
.rdata:00002404                 dd offset __purecall
.rdata:00002408                 dd offset __purecall
.rdata:0000240C                 dd offset __purecall
.rdata:0000240C _rdata          ends
.rdata:0000240C
.rdata$r:00002410 ; ===========================================================================
.rdata$r:00002410
.rdata$r:00002410 ; Segment type: Pure data
.rdata$r:00002410 ; Segment permissions: Read
.rdata$r:00002410 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002410                 assume cs:_rdata$r
.rdata$r:00002410                 ;org 2410h
.rdata$r:00002410 ; COMDAT (pick any)
.rdata$r:00002410                 public ??_R4ICryptoResetInitVector@@6B@
.rdata$r:00002410 ; const ICryptoResetInitVector::`RTTI Complete Object Locator'
.rdata$r:00002410 ??_R4ICryptoResetInitVector@@6B@ db    0 ; DATA XREF: .rdata:000023FCo
.rdata$r:00002411                 db    0
.rdata$r:00002412                 db    0
.rdata$r:00002413                 db    0
.rdata$r:00002414                 db    0
.rdata$r:00002415                 db    0
.rdata$r:00002416                 db    0
.rdata$r:00002417                 db    0
.rdata$r:00002418                 db    0
.rdata$r:00002419                 db    0
.rdata$r:0000241A                 db    0
.rdata$r:0000241B                 db    0
.rdata$r:0000241C                 dd offset ??_R0?AUICryptoResetInitVector@@@8 ; ICryptoResetInitVector `RTTI Type Descriptor'
.rdata$r:00002420                 dd offset ??_R3ICryptoResetInitVector@@8 ; ICryptoResetInitVector::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002420 _rdata$r        ends
.rdata$r:00002420
.text:00002424 ; ===========================================================================
.text:00002424
.text:00002424 ; Segment type: Pure code
.text:00002424 ; Segment permissions: Read/Execute
.text:00002424 _text           segment para public 'CODE' use32
.text:00002424                 assume cs:_text
.text:00002424                 ;org 2424h
.text:00002424 ; COMDAT (pick any)
.text:00002424                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002424
.text:00002424 ; =============== S U B R O U T I N E =======================================
.text:00002424
.text:00002424 ; Attributes: bp-based frame
.text:00002424
.text:00002424 ; _DWORD __thiscall ICompressFilter::ICompressFilter(ICompressFilter *__hidden this)
.text:00002424                 public ??0ICompressFilter@@QAE@XZ
.text:00002424 ??0ICompressFilter@@QAE@XZ proc near    ; CODE XREF: NCrypto::N7z::CBaseCoder::CBaseCoder(void)+30p
.text:00002424
.text:00002424 var_4           = dword ptr -4
.text:00002424
.text:00002424                 push    ebp
.text:00002425                 mov     ebp, esp
.text:00002427                 push    ecx
.text:00002428                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000242F                 mov     [ebp+var_4], ecx
.text:00002432                 mov     ecx, [ebp+var_4]
.text:00002435                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000243A                 mov     eax, [ebp+var_4]
.text:0000243D                 mov     dword ptr [eax], offset ??_7ICompressFilter@@6B@ ; const ICompressFilter::`vftable'
.text:00002443                 mov     eax, [ebp+var_4]
.text:00002446                 add     esp, 4
.text:00002449                 cmp     ebp, esp
.text:0000244B                 call    __RTC_CheckEsp
.text:00002450                 mov     esp, ebp
.text:00002452                 pop     ebp
.text:00002453                 retn
.text:00002453 ??0ICompressFilter@@QAE@XZ endp
.text:00002453
.text:00002453 _text           ends
.text:00002453
.rdata:00002454 ; ===========================================================================
.rdata:00002454
.rdata:00002454 ; Segment type: Pure data
.rdata:00002454 ; Segment permissions: Read
.rdata:00002454 _rdata          segment dword public 'DATA' use32
.rdata:00002454                 assume cs:_rdata
.rdata:00002454                 ;org 2454h
.rdata:00002454 ; COMDAT (pick largest)
.rdata:00002454                 dd offset ??_R4ICompressFilter@@6B@ ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata:00002458                 public ??_7ICompressFilter@@6B@
.rdata:00002458 ; const ICompressFilter::`vftable'
.rdata:00002458 ??_7ICompressFilter@@6B@ dd offset __purecall
.rdata:00002458                                         ; DATA XREF: ICompressFilter::ICompressFilter(void)+19o
.rdata:0000245C                 dd offset __purecall
.rdata:00002460                 dd offset __purecall
.rdata:00002464                 dd offset __purecall
.rdata:00002468                 dd offset __purecall
.rdata:00002468 _rdata          ends
.rdata:00002468
.rdata$r:0000246C ; ===========================================================================
.rdata$r:0000246C
.rdata$r:0000246C ; Segment type: Pure data
.rdata$r:0000246C ; Segment permissions: Read
.rdata$r:0000246C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000246C                 assume cs:_rdata$r
.rdata$r:0000246C                 ;org 246Ch
.rdata$r:0000246C ; COMDAT (pick any)
.rdata$r:0000246C                 public ??_R4ICompressFilter@@6B@
.rdata$r:0000246C ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata$r:0000246C ??_R4ICompressFilter@@6B@ db    0       ; DATA XREF: .rdata:00002454o
.rdata$r:0000246D                 db    0
.rdata$r:0000246E                 db    0
.rdata$r:0000246F                 db    0
.rdata$r:00002470                 db    0
.rdata$r:00002471                 db    0
.rdata$r:00002472                 db    0
.rdata$r:00002473                 db    0
.rdata$r:00002474                 db    0
.rdata$r:00002475                 db    0
.rdata$r:00002476                 db    0
.rdata$r:00002477                 db    0
.rdata$r:00002478                 dd offset ??_R0?AUICompressFilter@@@8 ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:0000247C                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000247C _rdata$r        ends
.rdata$r:0000247C
.text:00002480 ; ===========================================================================
.text:00002480
.text:00002480 ; Segment type: Pure code
.text:00002480 ; Segment permissions: Read/Execute
.text:00002480 _text           segment para public 'CODE' use32
.text:00002480                 assume cs:_text
.text:00002480                 ;org 2480h
.text:00002480 ; COMDAT (pick any)
.text:00002480                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002480
.text:00002480 ; =============== S U B R O U T I N E =======================================
.text:00002480
.text:00002480 ; Attributes: bp-based frame
.text:00002480
.text:00002480 ; _DWORD __thiscall ICryptoSetPassword::ICryptoSetPassword(ICryptoSetPassword *__hidden this)
.text:00002480                 public ??0ICryptoSetPassword@@QAE@XZ
.text:00002480 ??0ICryptoSetPassword@@QAE@XZ proc near ; CODE XREF: NCrypto::N7z::CBaseCoder::CBaseCoder(void)+3Bp
.text:00002480
.text:00002480 var_4           = dword ptr -4
.text:00002480
.text:00002480                 push    ebp
.text:00002481                 mov     ebp, esp
.text:00002483                 push    ecx
.text:00002484                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000248B                 mov     [ebp+var_4], ecx
.text:0000248E                 mov     ecx, [ebp+var_4]
.text:00002491                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002496                 mov     eax, [ebp+var_4]
.text:00002499                 mov     dword ptr [eax], offset ??_7ICryptoSetPassword@@6B@ ; const ICryptoSetPassword::`vftable'
.text:0000249F                 mov     eax, [ebp+var_4]
.text:000024A2                 add     esp, 4
.text:000024A5                 cmp     ebp, esp
.text:000024A7                 call    __RTC_CheckEsp
.text:000024AC                 mov     esp, ebp
.text:000024AE                 pop     ebp
.text:000024AF                 retn
.text:000024AF ??0ICryptoSetPassword@@QAE@XZ endp
.text:000024AF
.text:000024AF _text           ends
.text:000024AF
.rdata:000024B0 ; ===========================================================================
.rdata:000024B0
.rdata:000024B0 ; Segment type: Pure data
.rdata:000024B0 ; Segment permissions: Read
.rdata:000024B0 _rdata          segment dword public 'DATA' use32
.rdata:000024B0                 assume cs:_rdata
.rdata:000024B0                 ;org 24B0h
.rdata:000024B0 ; COMDAT (pick largest)
.rdata:000024B0                 dd offset ??_R4ICryptoSetPassword@@6B@ ; const ICryptoSetPassword::`RTTI Complete Object Locator'
.rdata:000024B4                 public ??_7ICryptoSetPassword@@6B@
.rdata:000024B4 ; const ICryptoSetPassword::`vftable'
.rdata:000024B4 ??_7ICryptoSetPassword@@6B@ dd offset __purecall
.rdata:000024B4                                         ; DATA XREF: ICryptoSetPassword::ICryptoSetPassword(void)+19o
.rdata:000024B8                 dd offset __purecall
.rdata:000024BC                 dd offset __purecall
.rdata:000024C0                 dd offset __purecall
.rdata:000024C0 _rdata          ends
.rdata:000024C0
.rdata$r:000024C4 ; ===========================================================================
.rdata$r:000024C4
.rdata$r:000024C4 ; Segment type: Pure data
.rdata$r:000024C4 ; Segment permissions: Read
.rdata$r:000024C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000024C4                 assume cs:_rdata$r
.rdata$r:000024C4                 ;org 24C4h
.rdata$r:000024C4 ; COMDAT (pick any)
.rdata$r:000024C4                 public ??_R4ICryptoSetPassword@@6B@
.rdata$r:000024C4 ; const ICryptoSetPassword::`RTTI Complete Object Locator'
.rdata$r:000024C4 ??_R4ICryptoSetPassword@@6B@ db    0    ; DATA XREF: .rdata:000024B0o
.rdata$r:000024C5                 db    0
.rdata$r:000024C6                 db    0
.rdata$r:000024C7                 db    0
.rdata$r:000024C8                 db    0
.rdata$r:000024C9                 db    0
.rdata$r:000024CA                 db    0
.rdata$r:000024CB                 db    0
.rdata$r:000024CC                 db    0
.rdata$r:000024CD                 db    0
.rdata$r:000024CE                 db    0
.rdata$r:000024CF                 db    0
.rdata$r:000024D0                 dd offset ??_R0?AUICryptoSetPassword@@@8 ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:000024D4                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:000024D4 _rdata$r        ends
.rdata$r:000024D4
.text:000024D8 ; ===========================================================================
.text:000024D8
.text:000024D8 ; Segment type: Pure code
.text:000024D8 ; Segment permissions: Read/Execute
.text:000024D8 _text           segment para public 'CODE' use32
.text:000024D8                 assume cs:_text
.text:000024D8                 ;org 24D8h
.text:000024D8 ; COMDAT (pick any)
.text:000024D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000024D8
.text:000024D8 ; =============== S U B R O U T I N E =======================================
.text:000024D8
.text:000024D8 ; Attributes: bp-based frame
.text:000024D8
.text:000024D8 ; public: __thiscall IUnknown::IUnknown(void)
.text:000024D8                 public ??0IUnknown@@QAE@XZ
.text:000024D8 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)+11p
.text:000024D8                                         ; ICryptoResetInitVector::ICryptoResetInitVector(void)+11p ...
.text:000024D8
.text:000024D8 var_4           = dword ptr -4
.text:000024D8
.text:000024D8                 push    ebp
.text:000024D9                 mov     ebp, esp
.text:000024DB                 push    ecx
.text:000024DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024E3                 mov     [ebp+var_4], ecx
.text:000024E6                 mov     eax, [ebp+var_4]
.text:000024E9                 mov     esp, ebp
.text:000024EB                 pop     ebp
.text:000024EC                 retn
.text:000024EC ??0IUnknown@@QAE@XZ endp
.text:000024EC
.text:000024EC ; ---------------------------------------------------------------------------
.text:000024ED                 align 10h
.text:000024ED _text           ends
.text:000024ED
.rdata:000024F0 ; ===========================================================================
.rdata:000024F0
.rdata:000024F0 ; Segment type: Pure data
.rdata:000024F0 ; Segment permissions: Read
.rdata:000024F0 _rdata          segment dword public 'DATA' use32
.rdata:000024F0                 assume cs:_rdata
.rdata:000024F0                 ;org 24F0h
.rdata:000024F0 ; COMDAT (pick largest)
.rdata:000024F0                 dd offset ??_R4CDecoder@N7z@NCrypto@@6B@ ; const NCrypto::N7z::CDecoder::`RTTI Complete Object Locator'
.rdata:000024F4                 public ??_7CDecoder@N7z@NCrypto@@6B@
.rdata:000024F4 ; const NCrypto::N7z::CDecoder::`vftable'
.rdata:000024F4 ??_7CDecoder@N7z@NCrypto@@6B@ dd offset ?QueryInterface@CDecoder@N7z@NCrypto@@WHE@AGJABU_GUID@@PAPAX@Z
.rdata:000024F4                                         ; DATA XREF: NCrypto::N7z::CDecoder::CDecoder(void)+69o
.rdata:000024F4                                         ; [thunk]:NCrypto::N7z::CDecoder::QueryInterface`adjustor{116}' (_GUID const &,void * *)
.rdata:000024F8                 dd offset ?AddRef@CDecoder@N7z@NCrypto@@WHE@AGKXZ ; [thunk]:NCrypto::N7z::CDecoder::AddRef`adjustor{116}' (void)
.rdata:000024FC                 dd offset ?Release@CDecoder@N7z@NCrypto@@WHE@AGKXZ ; [thunk]:NCrypto::N7z::CDecoder::Release`adjustor{116}' (void)
.rdata:00002500                 dd offset ?SetDecoderProperties2@CDecoder@N7z@NCrypto@@UAGJPBEI@Z ; NCrypto::N7z::CDecoder::SetDecoderProperties2(uchar const *,uint)
.rdata:00002500 _rdata          ends
.rdata:00002500
.rdata:00002504 ; ===========================================================================
.rdata:00002504
.rdata:00002504 ; Segment type: Pure data
.rdata:00002504 ; Segment permissions: Read
.rdata:00002504 _rdata          segment dword public 'DATA' use32
.rdata:00002504                 assume cs:_rdata
.rdata:00002504                 ;org 2504h
.rdata:00002504 ; COMDAT (pick largest)
.rdata:00002504                 dd offset ??_R4CDecoder@N7z@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::N7z::CDecoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:00002508                 public ??_7CDecoder@N7z@NCrypto@@6BICryptoSetPassword@@@
.rdata:00002508 ; const NCrypto::N7z::CDecoder::`vftable'{for `ICryptoSetPassword'}
.rdata:00002508 ??_7CDecoder@N7z@NCrypto@@6BICryptoSetPassword@@@ dd offset ?QueryInterface@CDecoder@N7z@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00002508                                         ; DATA XREF: NCrypto::N7z::CDecoder::CDecoder(void)+5Fo
.rdata:00002508                                         ; [thunk]:NCrypto::N7z::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000250C                 dd offset ?AddRef@CDecoder@N7z@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::N7z::CDecoder::AddRef`adjustor{4}' (void)
.rdata:00002510                 dd offset ?Release@CDecoder@N7z@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::N7z::CDecoder::Release`adjustor{4}' (void)
.rdata:00002514                 dd offset ?CryptoSetPassword@CBaseCoder@N7z@NCrypto@@UAGJPBEI@Z ; NCrypto::N7z::CBaseCoder::CryptoSetPassword(uchar const *,uint)
.rdata:00002514 _rdata          ends
.rdata:00002514
.rdata:00002518 ; ===========================================================================
.rdata:00002518
.rdata:00002518 ; Segment type: Pure data
.rdata:00002518 ; Segment permissions: Read
.rdata:00002518 _rdata          segment dword public 'DATA' use32
.rdata:00002518                 assume cs:_rdata
.rdata:00002518                 ;org 2518h
.rdata:00002518 ; COMDAT (pick largest)
.rdata:00002518                 dd offset ??_R4CDecoder@N7z@NCrypto@@6BICompressFilter@@@ ; const NCrypto::N7z::CDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:0000251C                 public ??_7CDecoder@N7z@NCrypto@@6BICompressFilter@@@
.rdata:0000251C ; const NCrypto::N7z::CDecoder::`vftable'{for `ICompressFilter'}
.rdata:0000251C ??_7CDecoder@N7z@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CDecoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000251C                                         ; DATA XREF: NCrypto::N7z::CDecoder::CDecoder(void)+56o
.rdata:0000251C                                         ; NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00002520                 dd offset ?AddRef@CDecoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CDecoder::AddRef(void)
.rdata:00002524                 dd offset ?Release@CDecoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CDecoder::Release(void)
.rdata:00002528                 dd offset ?Init@CBaseCoder@N7z@NCrypto@@UAGJXZ ; NCrypto::N7z::CBaseCoder::Init(void)
.rdata:0000252C                 dd offset ?Filter@CBaseCoder@N7z@NCrypto@@UAGIPAEI@Z ; NCrypto::N7z::CBaseCoder::Filter(uchar *,uint)
.rdata:0000252C _rdata          ends
.rdata:0000252C
.rdata$r:00002530 ; ===========================================================================
.rdata$r:00002530
.rdata$r:00002530 ; Segment type: Pure data
.rdata$r:00002530 ; Segment permissions: Read
.rdata$r:00002530 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002530                 assume cs:_rdata$r
.rdata$r:00002530                 ;org 2530h
.rdata$r:00002530 ; COMDAT (pick any)
.rdata$r:00002530                 public ??_R4CDecoder@N7z@NCrypto@@6BICompressFilter@@@
.rdata$r:00002530 ; const NCrypto::N7z::CDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00002530 ??_R4CDecoder@N7z@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00002530                                         ; DATA XREF: .rdata:00002518o
.rdata$r:00002531                 db    0
.rdata$r:00002532                 db    0
.rdata$r:00002533                 db    0
.rdata$r:00002534                 db    0
.rdata$r:00002535                 db    0
.rdata$r:00002536                 db    0
.rdata$r:00002537                 db    0
.rdata$r:00002538                 db    0
.rdata$r:00002539                 db    0
.rdata$r:0000253A                 db    0
.rdata$r:0000253B                 db    0
.rdata$r:0000253C                 dd offset ??_R0?AVCDecoder@N7z@NCrypto@@@8 ; NCrypto::N7z::CDecoder `RTTI Type Descriptor'
.rdata$r:00002540                 dd offset ??_R3CDecoder@N7z@NCrypto@@8 ; NCrypto::N7z::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002540 _rdata$r        ends
.rdata$r:00002540
.data:00002544 ; ===========================================================================
.data:00002544
.data:00002544 ; Segment type: Pure data
.data:00002544 ; Segment permissions: Read/Write
.data:00002544 _data           segment dword public 'DATA' use32
.data:00002544                 assume cs:_data
.data:00002544                 ;org 2544h
.data:00002544 ; COMDAT (pick any)
.data:00002544                 public ??_R0?AVCDecoder@N7z@NCrypto@@@8
.data:00002544 ; class NCrypto::N7z::CDecoder `RTTI Type Descriptor'
.data:00002544 ??_R0?AVCDecoder@N7z@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00002544                                         ; DATA XREF: .rdata$r:0000253Co
.data:00002544                                         ; .rdata$r:NCrypto::N7z::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002544                                         ; const type_info::`vftable'
.data:00002548                 db    0
.data:00002549                 db    0
.data:0000254A                 db    0
.data:0000254B                 db    0
.data:0000254C                 db  2Eh ; .
.data:0000254D                 db  3Fh ; ?
.data:0000254E                 db  41h ; A
.data:0000254F                 db  56h ; V
.data:00002550                 db  43h ; C
.data:00002551                 db  44h ; D
.data:00002552                 db  65h ; e
.data:00002553                 db  63h ; c
.data:00002554                 db  6Fh ; o
.data:00002555                 db  64h ; d
.data:00002556                 db  65h ; e
.data:00002557                 db  72h ; r
.data:00002558                 db  40h ; @
.data:00002559                 db  4Eh ; N
.data:0000255A                 db  37h ; 7
.data:0000255B                 db  7Ah ; z
.data:0000255C                 db  40h ; @
.data:0000255D                 db  4Eh ; N
.data:0000255E                 db  43h ; C
.data:0000255F                 db  72h ; r
.data:00002560                 db  79h ; y
.data:00002561                 db  70h ; p
.data:00002562                 db  74h ; t
.data:00002563                 db  6Fh ; o
.data:00002564                 db  40h ; @
.data:00002565                 db  40h ; @
.data:00002566                 db    0
.data:00002567                 align 4
.data:00002567 _data           ends
.data:00002567
.rdata$r:00002568 ; ===========================================================================
.rdata$r:00002568
.rdata$r:00002568 ; Segment type: Pure data
.rdata$r:00002568 ; Segment permissions: Read
.rdata$r:00002568 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002568                 assume cs:_rdata$r
.rdata$r:00002568                 ;org 2568h
.rdata$r:00002568 ; COMDAT (pick any)
.rdata$r:00002568                 public ??_R3CDecoder@N7z@NCrypto@@8
.rdata$r:00002568 ; NCrypto::N7z::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002568 ??_R3CDecoder@N7z@NCrypto@@8 db    0    ; DATA XREF: .rdata$r:00002540o
.rdata$r:00002568                                         ; .rdata$r:000025BCo ...
.rdata$r:00002569                 db    0
.rdata$r:0000256A                 db    0
.rdata$r:0000256B                 db    0
.rdata$r:0000256C                 db    1
.rdata$r:0000256D                 db    0
.rdata$r:0000256E                 db    0
.rdata$r:0000256F                 db    0
.rdata$r:00002570                 db  0Ah
.rdata$r:00002571                 db    0
.rdata$r:00002572                 db    0
.rdata$r:00002573                 db    0
.rdata$r:00002574                 dd offset ??_R2CDecoder@N7z@NCrypto@@8 ; NCrypto::N7z::CDecoder::`RTTI Base Class Array'
.rdata$r:00002574 _rdata$r        ends
.rdata$r:00002574
.rdata$r:00002578 ; ===========================================================================
.rdata$r:00002578
.rdata$r:00002578 ; Segment type: Pure data
.rdata$r:00002578 ; Segment permissions: Read
.rdata$r:00002578 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002578                 assume cs:_rdata$r
.rdata$r:00002578                 ;org 2578h
.rdata$r:00002578 ; COMDAT (pick any)
.rdata$r:00002578                 public ??_R2CDecoder@N7z@NCrypto@@8
.rdata$r:00002578 ; NCrypto::N7z::CDecoder::`RTTI Base Class Array'
.rdata$r:00002578 ??_R2CDecoder@N7z@NCrypto@@8 dd offset ??_R1A@?0A@EA@CDecoder@N7z@NCrypto@@8
.rdata$r:00002578                                         ; DATA XREF: .rdata$r:00002574o
.rdata$r:00002578                                         ; NCrypto::N7z::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000257C                 dd offset ??_R1A@?0A@EA@CBaseCoder@N7z@NCrypto@@8 ; NCrypto::N7z::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002580                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002584                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00002588                 dd offset ??_R13?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000258C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00002590                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00002594                 dd offset ??_R1M@?0A@EA@CBase@N7z@NCrypto@@8 ; NCrypto::N7z::CBase::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00002598                 dd offset ??_R1HE@?0A@EA@ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (116,-1,0,64)'
.rdata$r:0000259C                 dd offset ??_R1HE@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (116,-1,0,66)'
.rdata$r:000025A0                 db    0
.rdata$r:000025A1                 align 4
.rdata$r:000025A1 _rdata$r        ends
.rdata$r:000025A1
.rdata$r:000025A4 ; ===========================================================================
.rdata$r:000025A4
.rdata$r:000025A4 ; Segment type: Pure data
.rdata$r:000025A4 ; Segment permissions: Read
.rdata$r:000025A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000025A4                 assume cs:_rdata$r
.rdata$r:000025A4                 ;org 25A4h
.rdata$r:000025A4 ; COMDAT (pick any)
.rdata$r:000025A4                 public ??_R1A@?0A@EA@CDecoder@N7z@NCrypto@@8
.rdata$r:000025A4 ; NCrypto::N7z::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000025A4 ??_R1A@?0A@EA@CDecoder@N7z@NCrypto@@8 dd offset ??_R0?AVCDecoder@N7z@NCrypto@@@8
.rdata$r:000025A4                                         ; DATA XREF: .rdata$r:NCrypto::N7z::CDecoder::`RTTI Base Class Array'o
.rdata$r:000025A4                                         ; NCrypto::N7z::CDecoder `RTTI Type Descriptor'
.rdata$r:000025A8                 db    9
.rdata$r:000025A9                 db    0
.rdata$r:000025AA                 db    0
.rdata$r:000025AB                 db    0
.rdata$r:000025AC                 db    0
.rdata$r:000025AD                 db    0
.rdata$r:000025AE                 db    0
.rdata$r:000025AF                 db    0
.rdata$r:000025B0                 db 0FFh
.rdata$r:000025B1                 db 0FFh
.rdata$r:000025B2                 db 0FFh
.rdata$r:000025B3                 db 0FFh
.rdata$r:000025B4                 db    0
.rdata$r:000025B5                 db    0
.rdata$r:000025B6                 db    0
.rdata$r:000025B7                 db    0
.rdata$r:000025B8                 db  40h ; @
.rdata$r:000025B9                 db    0
.rdata$r:000025BA                 db    0
.rdata$r:000025BB                 db    0
.rdata$r:000025BC                 dd offset ??_R3CDecoder@N7z@NCrypto@@8 ; NCrypto::N7z::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000025BC _rdata$r        ends
.rdata$r:000025BC
.rdata$r:000025C0 ; ===========================================================================
.rdata$r:000025C0
.rdata$r:000025C0 ; Segment type: Pure data
.rdata$r:000025C0 ; Segment permissions: Read
.rdata$r:000025C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000025C0                 assume cs:_rdata$r
.rdata$r:000025C0                 ;org 25C0h
.rdata$r:000025C0 ; COMDAT (pick any)
.rdata$r:000025C0                 public ??_R1HE@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:000025C0 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (116, -1, 0, 64)'
.rdata$r:000025C0 ??_R1HE@?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:000025C0                                         ; DATA XREF: .rdata$r:00002598o
.rdata$r:000025C0                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:000025C4                 db    1
.rdata$r:000025C5                 db    0
.rdata$r:000025C6                 db    0
.rdata$r:000025C7                 db    0
.rdata$r:000025C8                 db  74h ; t
.rdata$r:000025C9                 db    0
.rdata$r:000025CA                 db    0
.rdata$r:000025CB                 db    0
.rdata$r:000025CC                 db 0FFh
.rdata$r:000025CD                 db 0FFh
.rdata$r:000025CE                 db 0FFh
.rdata$r:000025CF                 db 0FFh
.rdata$r:000025D0                 db    0
.rdata$r:000025D1                 db    0
.rdata$r:000025D2                 db    0
.rdata$r:000025D3                 db    0
.rdata$r:000025D4                 db  40h ; @
.rdata$r:000025D5                 db    0
.rdata$r:000025D6                 db    0
.rdata$r:000025D7                 db    0
.rdata$r:000025D8                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000025D8 _rdata$r        ends
.rdata$r:000025D8
.data:000025DC ; ===========================================================================
.data:000025DC
.data:000025DC ; Segment type: Pure data
.data:000025DC ; Segment permissions: Read/Write
.data:000025DC _data           segment dword public 'DATA' use32
.data:000025DC                 assume cs:_data
.data:000025DC                 ;org 25DCh
.data:000025DC ; COMDAT (pick any)
.data:000025DC                 public ??_R0?AUICompressSetDecoderProperties2@@@8
.data:000025DC ; struct ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.data:000025DC ??_R0?AUICompressSetDecoderProperties2@@@8 dd offset ??_7type_info@@6B@
.data:000025DC                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (116,-1,0,64)'o
.data:000025DC                                         ; .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000025DC                                         ; const type_info::`vftable'
.data:000025E0                 db    0
.data:000025E1                 db    0
.data:000025E2                 db    0
.data:000025E3                 db    0
.data:000025E4                 db  2Eh ; .
.data:000025E5                 db  3Fh ; ?
.data:000025E6                 db  41h ; A
.data:000025E7                 db  55h ; U
.data:000025E8                 db  49h ; I
.data:000025E9                 db  43h ; C
.data:000025EA                 db  6Fh ; o
.data:000025EB                 db  6Dh ; m
.data:000025EC                 db  70h ; p
.data:000025ED                 db  72h ; r
.data:000025EE                 db  65h ; e
.data:000025EF                 db  73h ; s
.data:000025F0                 db  73h ; s
.data:000025F1                 db  53h ; S
.data:000025F2                 db  65h ; e
.data:000025F3                 db  74h ; t
.data:000025F4                 db  44h ; D
.data:000025F5                 db  65h ; e
.data:000025F6                 db  63h ; c
.data:000025F7                 db  6Fh ; o
.data:000025F8                 db  64h ; d
.data:000025F9                 db  65h ; e
.data:000025FA                 db  72h ; r
.data:000025FB                 db  50h ; P
.data:000025FC                 db  72h ; r
.data:000025FD                 db  6Fh ; o
.data:000025FE                 db  70h ; p
.data:000025FF                 db  65h ; e
.data:00002600                 db  72h ; r
.data:00002601                 db  74h ; t
.data:00002602                 db  69h ; i
.data:00002603                 db  65h ; e
.data:00002604                 db  73h ; s
.data:00002605                 db  32h ; 2
.data:00002606                 db  40h ; @
.data:00002607                 db  40h ; @
.data:00002608                 db    0
.data:00002609                 align 4
.data:00002609 _data           ends
.data:00002609
.rdata$r:0000260C ; ===========================================================================
.rdata$r:0000260C
.rdata$r:0000260C ; Segment type: Pure data
.rdata$r:0000260C ; Segment permissions: Read
.rdata$r:0000260C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000260C                 assume cs:_rdata$r
.rdata$r:0000260C                 ;org 260Ch
.rdata$r:0000260C ; COMDAT (pick any)
.rdata$r:0000260C                 public ??_R3ICompressSetDecoderProperties2@@8
.rdata$r:0000260C ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000260C ??_R3ICompressSetDecoderProperties2@@8 db    0
.rdata$r:0000260C                                         ; DATA XREF: .rdata$r:000025D8o
.rdata$r:0000260C                                         ; .rdata$r:00002640o ...
.rdata$r:0000260D                 db    0
.rdata$r:0000260E                 db    0
.rdata$r:0000260F                 db    0
.rdata$r:00002610                 db    0
.rdata$r:00002611                 db    0
.rdata$r:00002612                 db    0
.rdata$r:00002613                 db    0
.rdata$r:00002614                 db    2
.rdata$r:00002615                 db    0
.rdata$r:00002616                 db    0
.rdata$r:00002617                 db    0
.rdata$r:00002618                 dd offset ??_R2ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:00002618 _rdata$r        ends
.rdata$r:00002618
.rdata$r:0000261C ; ===========================================================================
.rdata$r:0000261C
.rdata$r:0000261C ; Segment type: Pure data
.rdata$r:0000261C ; Segment permissions: Read
.rdata$r:0000261C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000261C                 assume cs:_rdata$r
.rdata$r:0000261C                 ;org 261Ch
.rdata$r:0000261C ; COMDAT (pick any)
.rdata$r:0000261C                 public ??_R2ICompressSetDecoderProperties2@@8
.rdata$r:0000261C ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:0000261C ??_R2ICompressSetDecoderProperties2@@8 dd offset ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:0000261C                                         ; DATA XREF: .rdata$r:00002618o
.rdata$r:0000261C                                         ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002620                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002624                 db    0
.rdata$r:00002625                 align 4
.rdata$r:00002625 _rdata$r        ends
.rdata$r:00002625
.rdata$r:00002628 ; ===========================================================================
.rdata$r:00002628
.rdata$r:00002628 ; Segment type: Pure data
.rdata$r:00002628 ; Segment permissions: Read
.rdata$r:00002628 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002628                 assume cs:_rdata$r
.rdata$r:00002628                 ;org 2628h
.rdata$r:00002628 ; COMDAT (pick any)
.rdata$r:00002628                 public ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00002628 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002628 ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:00002628                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Array'o
.rdata$r:00002628                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:0000262C                 db    1
.rdata$r:0000262D                 db    0
.rdata$r:0000262E                 db    0
.rdata$r:0000262F                 db    0
.rdata$r:00002630                 db    0
.rdata$r:00002631                 db    0
.rdata$r:00002632                 db    0
.rdata$r:00002633                 db    0
.rdata$r:00002634                 db 0FFh
.rdata$r:00002635                 db 0FFh
.rdata$r:00002636                 db 0FFh
.rdata$r:00002637                 db 0FFh
.rdata$r:00002638                 db    0
.rdata$r:00002639                 db    0
.rdata$r:0000263A                 db    0
.rdata$r:0000263B                 db    0
.rdata$r:0000263C                 db  40h ; @
.rdata$r:0000263D                 db    0
.rdata$r:0000263E                 db    0
.rdata$r:0000263F                 db    0
.rdata$r:00002640                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002640 _rdata$r        ends
.rdata$r:00002640
.rdata$r:00002644 ; ===========================================================================
.rdata$r:00002644
.rdata$r:00002644 ; Segment type: Pure data
.rdata$r:00002644 ; Segment permissions: Read
.rdata$r:00002644 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002644                 assume cs:_rdata$r
.rdata$r:00002644                 ;org 2644h
.rdata$r:00002644 ; COMDAT (pick any)
.rdata$r:00002644                 public ??_R4CDecoder@N7z@NCrypto@@6BICryptoSetPassword@@@
.rdata$r:00002644 ; const NCrypto::N7z::CDecoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:00002644 ??_R4CDecoder@N7z@NCrypto@@6BICryptoSetPassword@@@ db    0
.rdata$r:00002644                                         ; DATA XREF: .rdata:00002504o
.rdata$r:00002645                 db    0
.rdata$r:00002646                 db    0
.rdata$r:00002647                 db    0
.rdata$r:00002648                 db    4
.rdata$r:00002649                 db    0
.rdata$r:0000264A                 db    0
.rdata$r:0000264B                 db    0
.rdata$r:0000264C                 db    0
.rdata$r:0000264D                 db    0
.rdata$r:0000264E                 db    0
.rdata$r:0000264F                 db    0
.rdata$r:00002650                 dd offset ??_R0?AVCDecoder@N7z@NCrypto@@@8 ; NCrypto::N7z::CDecoder `RTTI Type Descriptor'
.rdata$r:00002654                 dd offset ??_R3CDecoder@N7z@NCrypto@@8 ; NCrypto::N7z::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002654 _rdata$r        ends
.rdata$r:00002654
.rdata$r:00002658 ; ===========================================================================
.rdata$r:00002658
.rdata$r:00002658 ; Segment type: Pure data
.rdata$r:00002658 ; Segment permissions: Read
.rdata$r:00002658 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002658                 assume cs:_rdata$r
.rdata$r:00002658                 ;org 2658h
.rdata$r:00002658 ; COMDAT (pick any)
.rdata$r:00002658                 public ??_R4CDecoder@N7z@NCrypto@@6B@
.rdata$r:00002658 ; const NCrypto::N7z::CDecoder::`RTTI Complete Object Locator'
.rdata$r:00002658 ??_R4CDecoder@N7z@NCrypto@@6B@ db    0  ; DATA XREF: .rdata:000024F0o
.rdata$r:00002659                 db    0
.rdata$r:0000265A                 db    0
.rdata$r:0000265B                 db    0
.rdata$r:0000265C                 db  74h ; t
.rdata$r:0000265D                 db    0
.rdata$r:0000265E                 db    0
.rdata$r:0000265F                 db    0
.rdata$r:00002660                 db    0
.rdata$r:00002661                 db    0
.rdata$r:00002662                 db    0
.rdata$r:00002663                 db    0
.rdata$r:00002664                 dd offset ??_R0?AVCDecoder@N7z@NCrypto@@@8 ; NCrypto::N7z::CDecoder `RTTI Type Descriptor'
.rdata$r:00002668                 dd offset ??_R3CDecoder@N7z@NCrypto@@8 ; NCrypto::N7z::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002668 _rdata$r        ends
.rdata$r:00002668
.text:0000266C ; ===========================================================================
.text:0000266C
.text:0000266C ; Segment type: Pure code
.text:0000266C ; Segment permissions: Read/Execute
.text:0000266C _text           segment para public 'CODE' use32
.text:0000266C                 assume cs:_text
.text:0000266C                 ;org 266Ch
.text:0000266C ; COMDAT (pick any)
.text:0000266C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000266C
.text:0000266C ; =============== S U B R O U T I N E =======================================
.text:0000266C
.text:0000266C ; Attributes: bp-based frame
.text:0000266C
.text:0000266C ; __int32 __stdcall NCrypto::N7z::CDecoder::QueryInterface(NCrypto::N7z::CDecoder *this, const struct _GUID *Buf1, void **)
.text:0000266C                 public ?QueryInterface@CDecoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.text:0000266C ?QueryInterface@CDecoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000266C                                         ; CODE XREF: [thunk]:NCrypto::N7z::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000266C                                         ; [thunk]:NCrypto::N7z::CDecoder::QueryInterface`adjustor{116}' (_GUID const &,void * *)+5j
.text:0000266C                                         ; DATA XREF: ...
.text:0000266C
.text:0000266C var_C           = dword ptr -0Ch
.text:0000266C var_8           = dword ptr -8
.text:0000266C var_4           = dword ptr -4
.text:0000266C this            = dword ptr  8
.text:0000266C Buf1            = dword ptr  0Ch
.text:0000266C arg_8           = dword ptr  10h
.text:0000266C
.text:0000266C                 push    ebp
.text:0000266D                 mov     ebp, esp
.text:0000266F                 sub     esp, 0Ch
.text:00002672                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002679                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002680                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002687                 mov     eax, [ebp+arg_8]
.text:0000268A                 mov     dword ptr [eax], 0
.text:00002690                 push    offset _IID_IUnknown ; Buf2
.text:00002695                 mov     ecx, [ebp+Buf1]
.text:00002698                 push    ecx             ; Buf1
.text:00002699                 call    ___@8           ; __(x,x)
.text:0000269E                 test    eax, eax
.text:000026A0                 jz      short loc_26C4
.text:000026A2                 cmp     [ebp+this], 0
.text:000026A6                 jz      short loc_26B3
.text:000026A8                 mov     edx, [ebp+this]
.text:000026AB                 add     edx, 4
.text:000026AE                 mov     [ebp+var_4], edx
.text:000026B1                 jmp     short loc_26BA
.text:000026B3 ; ---------------------------------------------------------------------------
.text:000026B3
.text:000026B3 loc_26B3:                               ; CODE XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+3Aj
.text:000026B3                 mov     [ebp+var_4], 0
.text:000026BA
.text:000026BA loc_26BA:                               ; CODE XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+45j
.text:000026BA                 mov     eax, [ebp+arg_8]
.text:000026BD                 mov     ecx, [ebp+var_4]
.text:000026C0                 mov     [eax], ecx
.text:000026C2                 jmp     short loc_2733
.text:000026C4 ; ---------------------------------------------------------------------------
.text:000026C4
.text:000026C4 loc_26C4:                               ; CODE XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+34j
.text:000026C4                 push    offset _IID_ICryptoSetPassword ; Buf2
.text:000026C9                 mov     edx, [ebp+Buf1]
.text:000026CC                 push    edx             ; Buf1
.text:000026CD                 call    ___@8           ; __(x,x)
.text:000026D2                 test    eax, eax
.text:000026D4                 jz      short loc_26F8
.text:000026D6                 cmp     [ebp+this], 0
.text:000026DA                 jz      short loc_26E7
.text:000026DC                 mov     eax, [ebp+this]
.text:000026DF                 add     eax, 4
.text:000026E2                 mov     [ebp+var_8], eax
.text:000026E5                 jmp     short loc_26EE
.text:000026E7 ; ---------------------------------------------------------------------------
.text:000026E7
.text:000026E7 loc_26E7:                               ; CODE XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:000026E7                 mov     [ebp+var_8], 0
.text:000026EE
.text:000026EE loc_26EE:                               ; CODE XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+79j
.text:000026EE                 mov     ecx, [ebp+arg_8]
.text:000026F1                 mov     edx, [ebp+var_8]
.text:000026F4                 mov     [ecx], edx
.text:000026F6                 jmp     short loc_2733
.text:000026F8 ; ---------------------------------------------------------------------------
.text:000026F8
.text:000026F8 loc_26F8:                               ; CODE XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+68j
.text:000026F8                 push    offset _IID_ICompressSetDecoderProperties2 ; Buf2
.text:000026FD                 mov     eax, [ebp+Buf1]
.text:00002700                 push    eax             ; Buf1
.text:00002701                 call    ___@8           ; __(x,x)
.text:00002706                 test    eax, eax
.text:00002708                 jz      short loc_272C
.text:0000270A                 cmp     [ebp+this], 0
.text:0000270E                 jz      short loc_271B
.text:00002710                 mov     ecx, [ebp+this]
.text:00002713                 add     ecx, 74h ; 't'
.text:00002716                 mov     [ebp+var_C], ecx
.text:00002719                 jmp     short loc_2722
.text:0000271B ; ---------------------------------------------------------------------------
.text:0000271B
.text:0000271B loc_271B:                               ; CODE XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+A2j
.text:0000271B                 mov     [ebp+var_C], 0
.text:00002722
.text:00002722 loc_2722:                               ; CODE XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+ADj
.text:00002722                 mov     edx, [ebp+arg_8]
.text:00002725                 mov     eax, [ebp+var_C]
.text:00002728                 mov     [edx], eax
.text:0000272A                 jmp     short loc_2733
.text:0000272C ; ---------------------------------------------------------------------------
.text:0000272C
.text:0000272C loc_272C:                               ; CODE XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+9Cj
.text:0000272C                 mov     eax, 80004002h
.text:00002731                 jmp     short loc_2744
.text:00002733 ; ---------------------------------------------------------------------------
.text:00002733
.text:00002733 loc_2733:                               ; CODE XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+56j
.text:00002733                                         ; NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+8Aj ...
.text:00002733                 mov     ecx, [ebp+this]
.text:00002736                 mov     edx, [ecx+8]
.text:00002739                 add     edx, 1
.text:0000273C                 mov     eax, [ebp+this]
.text:0000273F                 mov     [eax+8], edx
.text:00002742                 xor     eax, eax
.text:00002744
.text:00002744 loc_2744:                               ; CODE XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)+C5j
.text:00002744                 add     esp, 0Ch
.text:00002747                 cmp     ebp, esp
.text:00002749                 call    __RTC_CheckEsp
.text:0000274E                 mov     esp, ebp
.text:00002750                 pop     ebp
.text:00002751                 retn    0Ch
.text:00002751 ?QueryInterface@CDecoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002751
.text:00002751 _text           ends
.text:00002751
.text:00002754 ; ===========================================================================
.text:00002754
.text:00002754 ; Segment type: Pure code
.text:00002754 ; Segment permissions: Read/Execute
.text:00002754 _text           segment para public 'CODE' use32
.text:00002754                 assume cs:_text
.text:00002754                 ;org 2754h
.text:00002754 ; COMDAT (pick any)
.text:00002754                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002754
.text:00002754 ; =============== S U B R O U T I N E =======================================
.text:00002754
.text:00002754 ; Attributes: bp-based frame
.text:00002754
.text:00002754 ; unsigned __int32 __stdcall NCrypto::N7z::CDecoder::AddRef(NCrypto::N7z::CDecoder *this)
.text:00002754                 public ?AddRef@CDecoder@N7z@NCrypto@@UAGKXZ
.text:00002754 ?AddRef@CDecoder@N7z@NCrypto@@UAGKXZ proc near
.text:00002754                                         ; CODE XREF: [thunk]:NCrypto::N7z::CDecoder::AddRef`adjustor{116}' (void)+5j
.text:00002754                                         ; [thunk]:NCrypto::N7z::CDecoder::AddRef`adjustor{4}' (void)+5j
.text:00002754                                         ; DATA XREF: ...
.text:00002754
.text:00002754 var_4           = dword ptr -4
.text:00002754 this            = dword ptr  8
.text:00002754
.text:00002754                 push    ebp
.text:00002755                 mov     ebp, esp
.text:00002757                 push    ecx
.text:00002758                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000275F                 mov     eax, [ebp+this]
.text:00002762                 mov     ecx, [eax+8]
.text:00002765                 add     ecx, 1
.text:00002768                 mov     [ebp+var_4], ecx
.text:0000276B                 mov     edx, [ebp+this]
.text:0000276E                 mov     eax, [ebp+var_4]
.text:00002771                 mov     [edx+8], eax
.text:00002774                 mov     eax, [ebp+var_4]
.text:00002777                 mov     esp, ebp
.text:00002779                 pop     ebp
.text:0000277A                 retn    4
.text:0000277A ?AddRef@CDecoder@N7z@NCrypto@@UAGKXZ endp
.text:0000277A
.text:0000277A ; ---------------------------------------------------------------------------
.text:0000277D                 align 10h
.text:0000277D _text           ends
.text:0000277D
.text:00002780 ; ===========================================================================
.text:00002780
.text:00002780 ; Segment type: Pure code
.text:00002780 ; Segment permissions: Read/Execute
.text:00002780 _text           segment para public 'CODE' use32
.text:00002780                 assume cs:_text
.text:00002780                 ;org 2780h
.text:00002780 ; COMDAT (pick any)
.text:00002780                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002780
.text:00002780 ; =============== S U B R O U T I N E =======================================
.text:00002780
.text:00002780 ; Attributes: bp-based frame
.text:00002780
.text:00002780 ; unsigned __int32 __stdcall NCrypto::N7z::CDecoder::Release(NCrypto::N7z::CDecoder *this)
.text:00002780                 public ?Release@CDecoder@N7z@NCrypto@@UAGKXZ
.text:00002780 ?Release@CDecoder@N7z@NCrypto@@UAGKXZ proc near
.text:00002780                                         ; CODE XREF: [thunk]:NCrypto::N7z::CDecoder::Release`adjustor{116}' (void)+5j
.text:00002780                                         ; [thunk]:NCrypto::N7z::CDecoder::Release`adjustor{4}' (void)+5j
.text:00002780                                         ; DATA XREF: ...
.text:00002780
.text:00002780 var_10          = dword ptr -10h
.text:00002780 var_C           = dword ptr -0Ch
.text:00002780 var_8           = dword ptr -8
.text:00002780 var_4           = dword ptr -4
.text:00002780 this            = dword ptr  8
.text:00002780
.text:00002780                 push    ebp
.text:00002781                 mov     ebp, esp
.text:00002783                 sub     esp, 10h
.text:00002786                 mov     eax, 0CCCCCCCCh
.text:0000278B                 mov     [ebp+var_10], eax
.text:0000278E                 mov     [ebp+var_C], eax
.text:00002791                 mov     [ebp+var_8], eax
.text:00002794                 mov     [ebp+var_4], eax
.text:00002797                 mov     eax, [ebp+this]
.text:0000279A                 mov     ecx, [eax+8]
.text:0000279D                 sub     ecx, 1
.text:000027A0                 mov     [ebp+var_C], ecx
.text:000027A3                 mov     edx, [ebp+this]
.text:000027A6                 mov     eax, [ebp+var_C]
.text:000027A9                 mov     [edx+8], eax
.text:000027AC                 cmp     [ebp+var_C], 0
.text:000027B0                 jz      short loc_27BA
.text:000027B2                 mov     ecx, [ebp+this]
.text:000027B5                 mov     eax, [ecx+8]
.text:000027B8                 jmp     short loc_27E4
.text:000027BA ; ---------------------------------------------------------------------------
.text:000027BA
.text:000027BA loc_27BA:                               ; CODE XREF: NCrypto::N7z::CDecoder::Release(void)+30j
.text:000027BA                 mov     edx, [ebp+this]
.text:000027BD                 mov     [ebp+var_8], edx
.text:000027C0                 mov     eax, [ebp+var_8]
.text:000027C3                 mov     [ebp+var_4], eax
.text:000027C6                 cmp     [ebp+var_4], 0
.text:000027CA                 jz      short loc_27DB
.text:000027CC                 push    1
.text:000027CE                 mov     ecx, [ebp+var_4]
.text:000027D1                 call    ??_GCDecoder@N7z@NCrypto@@QAEPAXI@Z ; NCrypto::N7z::CDecoder::`scalar deleting destructor'(uint)
.text:000027D6                 mov     [ebp+var_10], eax
.text:000027D9                 jmp     short loc_27E2
.text:000027DB ; ---------------------------------------------------------------------------
.text:000027DB
.text:000027DB loc_27DB:                               ; CODE XREF: NCrypto::N7z::CDecoder::Release(void)+4Aj
.text:000027DB                 mov     [ebp+var_10], 0
.text:000027E2
.text:000027E2 loc_27E2:                               ; CODE XREF: NCrypto::N7z::CDecoder::Release(void)+59j
.text:000027E2                 xor     eax, eax
.text:000027E4
.text:000027E4 loc_27E4:                               ; CODE XREF: NCrypto::N7z::CDecoder::Release(void)+38j
.text:000027E4                 add     esp, 10h
.text:000027E7                 cmp     ebp, esp
.text:000027E9                 call    __RTC_CheckEsp
.text:000027EE                 mov     esp, ebp
.text:000027F0                 pop     ebp
.text:000027F1                 retn    4
.text:000027F1 ?Release@CDecoder@N7z@NCrypto@@UAGKXZ endp
.text:000027F1
.text:000027F1 _text           ends
.text:000027F1
.text:000027F4 ; ===========================================================================
.text:000027F4
.text:000027F4 ; Segment type: Pure code
.text:000027F4 ; Segment permissions: Read/Execute
.text:000027F4 _text           segment para public 'CODE' use32
.text:000027F4                 assume cs:_text
.text:000027F4                 ;org 27F4h
.text:000027F4 ; COMDAT (pick any)
.text:000027F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000027F4
.text:000027F4 ; =============== S U B R O U T I N E =======================================
.text:000027F4
.text:000027F4 ; Attributes: bp-based frame
.text:000027F4
.text:000027F4 ; public: void * __thiscall NCrypto::N7z::CDecoder::`scalar deleting destructor'(unsigned int)
.text:000027F4                 public ??_GCDecoder@N7z@NCrypto@@QAEPAXI@Z
.text:000027F4 ??_GCDecoder@N7z@NCrypto@@QAEPAXI@Z proc near
.text:000027F4                                         ; CODE XREF: NCrypto::N7z::CDecoder::Release(void)+51p
.text:000027F4
.text:000027F4 var_4           = dword ptr -4
.text:000027F4 arg_0           = dword ptr  8
.text:000027F4
.text:000027F4                 push    ebp
.text:000027F5                 mov     ebp, esp
.text:000027F7                 push    ecx
.text:000027F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027FF                 mov     [ebp+var_4], ecx
.text:00002802                 mov     ecx, [ebp+var_4] ; this
.text:00002805                 call    ??1CDecoder@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CDecoder::~CDecoder(void)
.text:0000280A                 mov     eax, [ebp+arg_0]
.text:0000280D                 and     eax, 1
.text:00002810                 jz      short loc_281E
.text:00002812                 mov     ecx, [ebp+var_4]
.text:00002815                 push    ecx             ; void *
.text:00002816                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000281B                 add     esp, 4
.text:0000281E
.text:0000281E loc_281E:                               ; CODE XREF: NCrypto::N7z::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:0000281E                 mov     eax, [ebp+var_4]
.text:00002821                 add     esp, 4
.text:00002824                 cmp     ebp, esp
.text:00002826                 call    __RTC_CheckEsp
.text:0000282B                 mov     esp, ebp
.text:0000282D                 pop     ebp
.text:0000282E                 retn    4
.text:0000282E ??_GCDecoder@N7z@NCrypto@@QAEPAXI@Z endp
.text:0000282E
.text:0000282E ; ---------------------------------------------------------------------------
.text:00002831                 align 4
.text:00002831 _text           ends
.text:00002831
.text:00002834 ; ===========================================================================
.text:00002834
.text:00002834 ; Segment type: Pure code
.text:00002834 ; Segment permissions: Read/Execute
.text:00002834 _text           segment para public 'CODE' use32
.text:00002834                 assume cs:_text
.text:00002834                 ;org 2834h
.text:00002834 ; COMDAT (pick any)
.text:00002834                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002834
.text:00002834 ; =============== S U B R O U T I N E =======================================
.text:00002834
.text:00002834 ; Attributes: bp-based frame
.text:00002834
.text:00002834 ; _DWORD __thiscall NCrypto::N7z::CDecoder::~CDecoder(NCrypto::N7z::CDecoder *__hidden this)
.text:00002834                 public ??1CDecoder@N7z@NCrypto@@QAE@XZ
.text:00002834 ??1CDecoder@N7z@NCrypto@@QAE@XZ proc near
.text:00002834                                         ; CODE XREF: NCrypto::N7z::CDecoder::`scalar deleting destructor'(uint)+11p
.text:00002834
.text:00002834 var_4           = dword ptr -4
.text:00002834
.text:00002834                 push    ebp
.text:00002835                 mov     ebp, esp
.text:00002837                 push    ecx
.text:00002838                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000283F                 mov     [ebp+var_4], ecx
.text:00002842                 mov     ecx, [ebp+var_4] ; this
.text:00002845                 call    ??1CBaseCoder@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CBaseCoder::~CBaseCoder(void)
.text:0000284A                 add     esp, 4
.text:0000284D                 cmp     ebp, esp
.text:0000284F                 call    __RTC_CheckEsp
.text:00002854                 mov     esp, ebp
.text:00002856                 pop     ebp
.text:00002857                 retn
.text:00002857 ??1CDecoder@N7z@NCrypto@@QAE@XZ endp
.text:00002857
.text:00002857 _text           ends
.text:00002857
.text:00002858 ; ===========================================================================
.text:00002858
.text:00002858 ; Segment type: Pure code
.text:00002858 ; Segment permissions: Read/Execute
.text:00002858 _text           segment para public 'CODE' use32
.text:00002858                 assume cs:_text
.text:00002858                 ;org 2858h
.text:00002858 ; COMDAT (pick any)
.text:00002858                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002858
.text:00002858 ; =============== S U B R O U T I N E =======================================
.text:00002858
.text:00002858 ; Attributes: bp-based frame
.text:00002858
.text:00002858 ; _DWORD __thiscall NCrypto::CAesCbcDecoder::CAesCbcDecoder(NCrypto::CAesCbcDecoder *this, unsigned int)
.text:00002858                 public ??0CAesCbcDecoder@NCrypto@@QAE@I@Z
.text:00002858 ??0CAesCbcDecoder@NCrypto@@QAE@I@Z proc near
.text:00002858                                         ; CODE XREF: NCrypto::N7z::CDecoder::CDecoder(void)+8Fp
.text:00002858
.text:00002858 var_4           = dword ptr -4
.text:00002858 arg_0           = dword ptr  8
.text:00002858
.text:00002858                 push    ebp
.text:00002859                 mov     ebp, esp
.text:0000285B                 push    ecx
.text:0000285C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002863                 mov     [ebp+var_4], ecx
.text:00002866                 mov     eax, [ebp+arg_0]
.text:00002869                 push    eax             ; unsigned int
.text:0000286A                 push    0               ; bool
.text:0000286C                 mov     ecx, [ebp+var_4] ; this
.text:0000286F                 call    ??0CAesCbcCoder@NCrypto@@QAE@_NI@Z ; NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)
.text:00002874                 mov     ecx, [ebp+var_4]
.text:00002877                 mov     dword ptr [ecx], offset ??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressFilter'}
.text:0000287D                 mov     edx, [ebp+var_4]
.text:00002880                 mov     dword ptr [edx+4], offset ??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICryptoProperties'}
.text:00002887                 mov     eax, [ebp+var_4]
.text:0000288A                 mov     dword ptr [eax+8], offset ??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00002891                 mov     eax, [ebp+var_4]
.text:00002894                 add     esp, 4
.text:00002897                 cmp     ebp, esp
.text:00002899                 call    __RTC_CheckEsp
.text:0000289E                 mov     esp, ebp
.text:000028A0                 pop     ebp
.text:000028A1                 retn    4
.text:000028A1 ??0CAesCbcDecoder@NCrypto@@QAE@I@Z endp
.text:000028A1
.text:000028A1 _text           ends
.text:000028A1
.rdata:000028A4 ; ===========================================================================
.rdata:000028A4
.rdata:000028A4 ; Segment type: Pure data
.rdata:000028A4 ; Segment permissions: Read
.rdata:000028A4 _rdata          segment dword public 'DATA' use32
.rdata:000028A4                 assume cs:_rdata
.rdata:000028A4                 ;org 28A4h
.rdata:000028A4 ; COMDAT (pick largest)
.rdata:000028A4                 dd offset ??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:000028A8                 public ??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata:000028A8 ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:000028A8 ??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.rdata:000028A8                                         ; DATA XREF: NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+32o
.rdata:000028A8                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:000028AC                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)
.rdata:000028B0                 dd offset ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)
.rdata:000028B4                 dd offset ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:000028B4 _rdata          ends
.rdata:000028B4
.rdata:000028B8 ; ===========================================================================
.rdata:000028B8
.rdata:000028B8 ; Segment type: Pure data
.rdata:000028B8 ; Segment permissions: Read
.rdata:000028B8 _rdata          segment dword public 'DATA' use32
.rdata:000028B8                 assume cs:_rdata
.rdata:000028B8                 ;org 28B8h
.rdata:000028B8 ; COMDAT (pick largest)
.rdata:000028B8                 dd offset ??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata:000028BC                 public ??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@
.rdata:000028BC ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICryptoProperties'}
.rdata:000028BC ??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000028BC                                         ; DATA XREF: NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+28o
.rdata:000028BC                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000028C0                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)
.rdata:000028C4                 dd offset ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)
.rdata:000028C8                 dd offset ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)
.rdata:000028CC                 dd offset ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)
.rdata:000028CC _rdata          ends
.rdata:000028CC
.rdata:000028D0 ; ===========================================================================
.rdata:000028D0
.rdata:000028D0 ; Segment type: Pure data
.rdata:000028D0 ; Segment permissions: Read
.rdata:000028D0 _rdata          segment dword public 'DATA' use32
.rdata:000028D0                 assume cs:_rdata
.rdata:000028D0                 ;org 28D0h
.rdata:000028D0 ; COMDAT (pick largest)
.rdata:000028D0                 dd offset ??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:000028D4                 public ??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@
.rdata:000028D4 ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressFilter'}
.rdata:000028D4 ??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:000028D4                                         ; DATA XREF: NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+1Fo
.rdata:000028D4                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.rdata:000028D8                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.rdata:000028DC                 dd offset ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.rdata:000028E0                 dd offset ?Init@CAesCbcCoder@NCrypto@@UAGJXZ ; NCrypto::CAesCbcCoder::Init(void)
.rdata:000028E4                 dd offset ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z ; NCrypto::CAesCbcCoder::Filter(uchar *,uint)
.rdata:000028E4 _rdata          ends
.rdata:000028E4
.rdata$r:000028E8 ; ===========================================================================
.rdata$r:000028E8
.rdata$r:000028E8 ; Segment type: Pure data
.rdata$r:000028E8 ; Segment permissions: Read
.rdata$r:000028E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000028E8                 assume cs:_rdata$r
.rdata$r:000028E8                 ;org 28E8h
.rdata$r:000028E8 ; COMDAT (pick any)
.rdata$r:000028E8                 public ??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@
.rdata$r:000028E8 ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:000028E8 ??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:000028E8                                         ; DATA XREF: .rdata:000028D0o
.rdata$r:000028E9                 db    0
.rdata$r:000028EA                 db    0
.rdata$r:000028EB                 db    0
.rdata$r:000028EC                 db    0
.rdata$r:000028ED                 db    0
.rdata$r:000028EE                 db    0
.rdata$r:000028EF                 db    0
.rdata$r:000028F0                 db    0
.rdata$r:000028F1                 db    0
.rdata$r:000028F2                 db    0
.rdata$r:000028F3                 db    0
.rdata$r:000028F4                 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8 ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:000028F8                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028F8 _rdata$r        ends
.rdata$r:000028F8
.data:000028FC ; ===========================================================================
.data:000028FC
.data:000028FC ; Segment type: Pure data
.data:000028FC ; Segment permissions: Read/Write
.data:000028FC _data           segment dword public 'DATA' use32
.data:000028FC                 assume cs:_data
.data:000028FC                 ;org 28FCh
.data:000028FC ; COMDAT (pick any)
.data:000028FC                 public ??_R0?AUCAesCbcDecoder@NCrypto@@@8
.data:000028FC ; struct NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.data:000028FC ??_R0?AUCAesCbcDecoder@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:000028FC                                         ; DATA XREF: .rdata$r:000028F4o
.data:000028FC                                         ; .rdata$r:NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000028FC                                         ; const type_info::`vftable'
.data:00002900                 db    0
.data:00002901                 db    0
.data:00002902                 db    0
.data:00002903                 db    0
.data:00002904                 db  2Eh ; .
.data:00002905                 db  3Fh ; ?
.data:00002906                 db  41h ; A
.data:00002907                 db  55h ; U
.data:00002908                 db  43h ; C
.data:00002909                 db  41h ; A
.data:0000290A                 db  65h ; e
.data:0000290B                 db  73h ; s
.data:0000290C                 db  43h ; C
.data:0000290D                 db  62h ; b
.data:0000290E                 db  63h ; c
.data:0000290F                 db  44h ; D
.data:00002910                 db  65h ; e
.data:00002911                 db  63h ; c
.data:00002912                 db  6Fh ; o
.data:00002913                 db  64h ; d
.data:00002914                 db  65h ; e
.data:00002915                 db  72h ; r
.data:00002916                 db  40h ; @
.data:00002917                 db  4Eh ; N
.data:00002918                 db  43h ; C
.data:00002919                 db  72h ; r
.data:0000291A                 db  79h ; y
.data:0000291B                 db  70h ; p
.data:0000291C                 db  74h ; t
.data:0000291D                 db  6Fh ; o
.data:0000291E                 db  40h ; @
.data:0000291F                 db  40h ; @
.data:00002920                 db    0
.data:00002921                 align 4
.data:00002921 _data           ends
.data:00002921
.rdata$r:00002924 ; ===========================================================================
.rdata$r:00002924
.rdata$r:00002924 ; Segment type: Pure data
.rdata$r:00002924 ; Segment permissions: Read
.rdata$r:00002924 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002924                 assume cs:_rdata$r
.rdata$r:00002924                 ;org 2924h
.rdata$r:00002924 ; COMDAT (pick any)
.rdata$r:00002924                 public ??_R3CAesCbcDecoder@NCrypto@@8
.rdata$r:00002924 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002924 ??_R3CAesCbcDecoder@NCrypto@@8 db    0  ; DATA XREF: .rdata$r:000028F8o
.rdata$r:00002924                                         ; .rdata$r:00002974o ...
.rdata$r:00002925                 db    0
.rdata$r:00002926                 db    0
.rdata$r:00002927                 db    0
.rdata$r:00002928                 db    1
.rdata$r:00002929                 db    0
.rdata$r:0000292A                 db    0
.rdata$r:0000292B                 db    0
.rdata$r:0000292C                 db    9
.rdata$r:0000292D                 db    0
.rdata$r:0000292E                 db    0
.rdata$r:0000292F                 db    0
.rdata$r:00002930                 dd offset ??_R2CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Array'
.rdata$r:00002930 _rdata$r        ends
.rdata$r:00002930
.rdata$r:00002934 ; ===========================================================================
.rdata$r:00002934
.rdata$r:00002934 ; Segment type: Pure data
.rdata$r:00002934 ; Segment permissions: Read
.rdata$r:00002934 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002934                 assume cs:_rdata$r
.rdata$r:00002934                 ;org 2934h
.rdata$r:00002934 ; COMDAT (pick any)
.rdata$r:00002934                 public ??_R2CAesCbcDecoder@NCrypto@@8
.rdata$r:00002934 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Array'
.rdata$r:00002934 ??_R2CAesCbcDecoder@NCrypto@@8 dd offset ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8
.rdata$r:00002934                                         ; DATA XREF: .rdata$r:00002930o
.rdata$r:00002934                                         ; NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002938                 dd offset ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000293C                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002940                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00002944                 dd offset ??_R13?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00002948                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000294C                 dd offset ??_R17?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00002950                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00002954                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00002958                 db    0
.rdata$r:00002959                 align 4
.rdata$r:00002959 _rdata$r        ends
.rdata$r:00002959
.rdata$r:0000295C ; ===========================================================================
.rdata$r:0000295C
.rdata$r:0000295C ; Segment type: Pure data
.rdata$r:0000295C ; Segment permissions: Read
.rdata$r:0000295C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000295C                 assume cs:_rdata$r
.rdata$r:0000295C                 ;org 295Ch
.rdata$r:0000295C ; COMDAT (pick any)
.rdata$r:0000295C                 public ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8
.rdata$r:0000295C ; NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000295C ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8
.rdata$r:0000295C                                         ; DATA XREF: .rdata$r:NCrypto::CAesCbcDecoder::`RTTI Base Class Array'o
.rdata$r:0000295C                                         ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:00002960                 db    8
.rdata$r:00002961                 db    0
.rdata$r:00002962                 db    0
.rdata$r:00002963                 db    0
.rdata$r:00002964                 db    0
.rdata$r:00002965                 db    0
.rdata$r:00002966                 db    0
.rdata$r:00002967                 db    0
.rdata$r:00002968                 db 0FFh
.rdata$r:00002969                 db 0FFh
.rdata$r:0000296A                 db 0FFh
.rdata$r:0000296B                 db 0FFh
.rdata$r:0000296C                 db    0
.rdata$r:0000296D                 db    0
.rdata$r:0000296E                 db    0
.rdata$r:0000296F                 db    0
.rdata$r:00002970                 db  40h ; @
.rdata$r:00002971                 db    0
.rdata$r:00002972                 db    0
.rdata$r:00002973                 db    0
.rdata$r:00002974                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002974 _rdata$r        ends
.rdata$r:00002974
.rdata$r:00002978 ; ===========================================================================
.rdata$r:00002978
.rdata$r:00002978 ; Segment type: Pure data
.rdata$r:00002978 ; Segment permissions: Read
.rdata$r:00002978 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002978                 assume cs:_rdata$r
.rdata$r:00002978                 ;org 2978h
.rdata$r:00002978 ; COMDAT (pick any)
.rdata$r:00002978                 public ??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@
.rdata$r:00002978 ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata$r:00002978 ??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ db    0
.rdata$r:00002978                                         ; DATA XREF: .rdata:000028B8o
.rdata$r:00002979                 db    0
.rdata$r:0000297A                 db    0
.rdata$r:0000297B                 db    0
.rdata$r:0000297C                 db    4
.rdata$r:0000297D                 db    0
.rdata$r:0000297E                 db    0
.rdata$r:0000297F                 db    0
.rdata$r:00002980                 db    0
.rdata$r:00002981                 db    0
.rdata$r:00002982                 db    0
.rdata$r:00002983                 db    0
.rdata$r:00002984                 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8 ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:00002988                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002988 _rdata$r        ends
.rdata$r:00002988
.rdata$r:0000298C ; ===========================================================================
.rdata$r:0000298C
.rdata$r:0000298C ; Segment type: Pure data
.rdata$r:0000298C ; Segment permissions: Read
.rdata$r:0000298C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000298C                 assume cs:_rdata$r
.rdata$r:0000298C                 ;org 298Ch
.rdata$r:0000298C ; COMDAT (pick any)
.rdata$r:0000298C                 public ??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata$r:0000298C ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:0000298C ??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:0000298C                                         ; DATA XREF: .rdata:000028A4o
.rdata$r:0000298D                 db    0
.rdata$r:0000298E                 db    0
.rdata$r:0000298F                 db    0
.rdata$r:00002990                 db    8
.rdata$r:00002991                 db    0
.rdata$r:00002992                 db    0
.rdata$r:00002993                 db    0
.rdata$r:00002994                 db    0
.rdata$r:00002995                 db    0
.rdata$r:00002996                 db    0
.rdata$r:00002997                 db    0
.rdata$r:00002998                 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8 ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:0000299C                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000299C _rdata$r        ends
.rdata$r:0000299C
.text:000029A0 ; ===========================================================================
.text:000029A0
.text:000029A0 ; Segment type: Pure code
.text:000029A0 ; Segment permissions: Read/Execute
.text:000029A0 _text           segment para public 'CODE' use32
.text:000029A0                 assume cs:_text
.text:000029A0                 ;org 29A0h
.text:000029A0 ; COMDAT (pick any)
.text:000029A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000029A0
.text:000029A0 ; =============== S U B R O U T I N E =======================================
.text:000029A0
.text:000029A0 ; Attributes: bp-based frame
.text:000029A0
.text:000029A0 ; _DWORD __thiscall ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(ICompressSetDecoderProperties2 *__hidden this)
.text:000029A0                 public ??0ICompressSetDecoderProperties2@@QAE@XZ
.text:000029A0 ??0ICompressSetDecoderProperties2@@QAE@XZ proc near
.text:000029A0                                         ; CODE XREF: NCrypto::N7z::CDecoder::CDecoder(void)+4Ep
.text:000029A0
.text:000029A0 var_4           = dword ptr -4
.text:000029A0
.text:000029A0                 push    ebp
.text:000029A1                 mov     ebp, esp
.text:000029A3                 push    ecx
.text:000029A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000029AB                 mov     [ebp+var_4], ecx
.text:000029AE                 mov     ecx, [ebp+var_4]
.text:000029B1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000029B6                 mov     eax, [ebp+var_4]
.text:000029B9                 mov     dword ptr [eax], offset ??_7ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`vftable'
.text:000029BF                 mov     eax, [ebp+var_4]
.text:000029C2                 add     esp, 4
.text:000029C5                 cmp     ebp, esp
.text:000029C7                 call    __RTC_CheckEsp
.text:000029CC                 mov     esp, ebp
.text:000029CE                 pop     ebp
.text:000029CF                 retn
.text:000029CF ??0ICompressSetDecoderProperties2@@QAE@XZ endp
.text:000029CF
.text:000029CF _text           ends
.text:000029CF
.rdata:000029D0 ; ===========================================================================
.rdata:000029D0
.rdata:000029D0 ; Segment type: Pure data
.rdata:000029D0 ; Segment permissions: Read
.rdata:000029D0 _rdata          segment dword public 'DATA' use32
.rdata:000029D0                 assume cs:_rdata
.rdata:000029D0                 ;org 29D0h
.rdata:000029D0 ; COMDAT (pick largest)
.rdata:000029D0                 dd offset ??_R4ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata:000029D4                 public ??_7ICompressSetDecoderProperties2@@6B@
.rdata:000029D4 ; const ICompressSetDecoderProperties2::`vftable'
.rdata:000029D4 ??_7ICompressSetDecoderProperties2@@6B@ dd offset __purecall
.rdata:000029D4                                         ; DATA XREF: ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+19o
.rdata:000029D8                 dd offset __purecall
.rdata:000029DC                 dd offset __purecall
.rdata:000029E0                 dd offset __purecall
.rdata:000029E0 _rdata          ends
.rdata:000029E0
.rdata$r:000029E4 ; ===========================================================================
.rdata$r:000029E4
.rdata$r:000029E4 ; Segment type: Pure data
.rdata$r:000029E4 ; Segment permissions: Read
.rdata$r:000029E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000029E4                 assume cs:_rdata$r
.rdata$r:000029E4                 ;org 29E4h
.rdata$r:000029E4 ; COMDAT (pick any)
.rdata$r:000029E4                 public ??_R4ICompressSetDecoderProperties2@@6B@
.rdata$r:000029E4 ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata$r:000029E4 ??_R4ICompressSetDecoderProperties2@@6B@ db    0
.rdata$r:000029E4                                         ; DATA XREF: .rdata:000029D0o
.rdata$r:000029E5                 db    0
.rdata$r:000029E6                 db    0
.rdata$r:000029E7                 db    0
.rdata$r:000029E8                 db    0
.rdata$r:000029E9                 db    0
.rdata$r:000029EA                 db    0
.rdata$r:000029EB                 db    0
.rdata$r:000029EC                 db    0
.rdata$r:000029ED                 db    0
.rdata$r:000029EE                 db    0
.rdata$r:000029EF                 db    0
.rdata$r:000029F0                 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8 ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:000029F4                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000029F4 _rdata$r        ends
.rdata$r:000029F4
.text:000029F8 ; ===========================================================================
.text:000029F8
.text:000029F8 ; Segment type: Pure code
.text:000029F8 ; Segment permissions: Read/Execute
.text:000029F8 _text           segment para public 'CODE' use32
.text:000029F8                 assume cs:_text
.text:000029F8                 ;org 29F8h
.text:000029F8 ; COMDAT (pick any)
.text:000029F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000029F8
.text:000029F8 ; =============== S U B R O U T I N E =======================================
.text:000029F8
.text:000029F8 ; Attributes: bp-based frame
.text:000029F8
.text:000029F8 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:000029F8                 public ??0?$CBuffer@E@@QAE@XZ
.text:000029F8 ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NCrypto::N7z::CKeyInfo::CKeyInfo(void)+33p
.text:000029F8
.text:000029F8 var_4           = dword ptr -4
.text:000029F8
.text:000029F8                 push    ebp
.text:000029F9                 mov     ebp, esp
.text:000029FB                 push    ecx
.text:000029FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A03                 mov     [ebp+var_4], ecx
.text:00002A06                 mov     eax, [ebp+var_4]
.text:00002A09                 mov     dword ptr [eax], 0
.text:00002A0F                 mov     ecx, [ebp+var_4]
.text:00002A12                 mov     dword ptr [ecx+4], 0
.text:00002A19                 mov     eax, [ebp+var_4]
.text:00002A1C                 mov     esp, ebp
.text:00002A1E                 pop     ebp
.text:00002A1F                 retn
.text:00002A1F ??0?$CBuffer@E@@QAE@XZ endp
.text:00002A1F
.text:00002A1F _text           ends
.text:00002A1F
.text:00002A20 ; ===========================================================================
.text:00002A20
.text:00002A20 ; Segment type: Pure code
.text:00002A20 ; Segment permissions: Read/Execute
.text:00002A20 _text           segment para public 'CODE' use32
.text:00002A20                 assume cs:_text
.text:00002A20                 ;org 2A20h
.text:00002A20 ; COMDAT (pick any)
.text:00002A20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002A20
.text:00002A20 ; =============== S U B R O U T I N E =======================================
.text:00002A20
.text:00002A20 ; Attributes: bp-based frame
.text:00002A20
.text:00002A20 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:00002A20                 public ??1?$CBuffer@E@@QAE@XZ
.text:00002A20 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: __unwindfunclet$??0CKeyInfo@N7z@NCrypto@@QAE@XZ$0+6j
.text:00002A20                                         ; NCrypto::N7z::CKeyInfo::~CKeyInfo(void)+14p
.text:00002A20
.text:00002A20 var_8           = dword ptr -8
.text:00002A20 var_4           = dword ptr -4
.text:00002A20
.text:00002A20                 push    ebp
.text:00002A21                 mov     ebp, esp
.text:00002A23                 sub     esp, 8
.text:00002A26                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002A2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A34                 mov     [ebp+var_4], ecx
.text:00002A37                 mov     eax, [ebp+var_4]
.text:00002A3A                 mov     ecx, [eax]
.text:00002A3C                 mov     [ebp+var_8], ecx
.text:00002A3F                 mov     edx, [ebp+var_8]
.text:00002A42                 push    edx             ; void *
.text:00002A43                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002A48                 add     esp, 4
.text:00002A4B                 add     esp, 8
.text:00002A4E                 cmp     ebp, esp
.text:00002A50                 call    __RTC_CheckEsp
.text:00002A55                 mov     esp, ebp
.text:00002A57                 pop     ebp
.text:00002A58                 retn
.text:00002A58 ??1?$CBuffer@E@@QAE@XZ endp
.text:00002A58
.text:00002A58 ; ---------------------------------------------------------------------------
.text:00002A59                 align 4
.text:00002A59 _text           ends
.text:00002A59
.text:00002A5C ; ===========================================================================
.text:00002A5C
.text:00002A5C ; Segment type: Pure code
.text:00002A5C ; Segment permissions: Read/Execute
.text:00002A5C _text           segment para public 'CODE' use32
.text:00002A5C                 assume cs:_text
.text:00002A5C                 ;org 2A5Ch
.text:00002A5C ; COMDAT (pick any)
.text:00002A5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002A5C
.text:00002A5C ; =============== S U B R O U T I N E =======================================
.text:00002A5C
.text:00002A5C ; Attributes: bp-based frame
.text:00002A5C
.text:00002A5C ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:00002A5C                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:00002A5C ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+AFp
.text:00002A5C                                         ; NCrypto::N7z::CKeyInfo::CalcKey(void)+14Cp
.text:00002A5C
.text:00002A5C var_4           = dword ptr -4
.text:00002A5C
.text:00002A5C                 push    ebp
.text:00002A5D                 mov     ebp, esp
.text:00002A5F                 push    ecx
.text:00002A60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A67                 mov     [ebp+var_4], ecx
.text:00002A6A                 mov     eax, [ebp+var_4]
.text:00002A6D                 mov     eax, [eax]
.text:00002A6F                 mov     esp, ebp
.text:00002A71                 pop     ebp
.text:00002A72                 retn
.text:00002A72 ??B?$CBuffer@E@@QAEPAEXZ endp
.text:00002A72
.text:00002A72 ; ---------------------------------------------------------------------------
.text:00002A73                 align 4
.text:00002A73 _text           ends
.text:00002A73
.text:00002A74 ; ===========================================================================
.text:00002A74
.text:00002A74 ; Segment type: Pure code
.text:00002A74 ; Segment permissions: Read/Execute
.text:00002A74 _text           segment para public 'CODE' use32
.text:00002A74                 assume cs:_text
.text:00002A74                 ;org 2A74h
.text:00002A74 ; COMDAT (pick any)
.text:00002A74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002A74
.text:00002A74 ; =============== S U B R O U T I N E =======================================
.text:00002A74
.text:00002A74 ; Attributes: bp-based frame
.text:00002A74
.text:00002A74 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:00002A74                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:00002A74 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+99p
.text:00002A74                                         ; NCrypto::N7z::CKeyInfo::CalcKey(void)+FCp ...
.text:00002A74
.text:00002A74 var_4           = dword ptr -4
.text:00002A74
.text:00002A74                 push    ebp
.text:00002A75                 mov     ebp, esp
.text:00002A77                 push    ecx
.text:00002A78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A7F                 mov     [ebp+var_4], ecx
.text:00002A82                 mov     eax, [ebp+var_4]
.text:00002A85                 mov     eax, [eax+4]
.text:00002A88                 mov     esp, ebp
.text:00002A8A                 pop     ebp
.text:00002A8B                 retn
.text:00002A8B ?Size@?$CBuffer@E@@QBEIXZ endp
.text:00002A8B
.text:00002A8B _text           ends
.text:00002A8B
.text:00002A8C ; ===========================================================================
.text:00002A8C
.text:00002A8C ; Segment type: Pure code
.text:00002A8C ; Segment permissions: Read/Execute
.text:00002A8C _text           segment para public 'CODE' use32
.text:00002A8C                 assume cs:_text
.text:00002A8C                 ;org 2A8Ch
.text:00002A8C ; COMDAT (pick any)
.text:00002A8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002A8C
.text:00002A8C ; =============== S U B R O U T I N E =======================================
.text:00002A8C
.text:00002A8C ; Attributes: bp-based frame
.text:00002A8C
.text:00002A8C ; int __stdcall CBuffer<unsigned char>::CopyFrom(void *Src, size_t Size)
.text:00002A8C                 public ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
.text:00002A8C ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z proc near
.text:00002A8C                                         ; CODE XREF: NCrypto::N7z::CBaseCoder::CryptoSetPassword(uchar const *,uint)+46p
.text:00002A8C
.text:00002A8C var_4           = dword ptr -4
.text:00002A8C Src             = dword ptr  8
.text:00002A8C Size            = dword ptr  0Ch
.text:00002A8C
.text:00002A8C                 push    ebp
.text:00002A8D                 mov     ebp, esp
.text:00002A8F                 push    ecx
.text:00002A90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A97                 mov     [ebp+var_4], ecx
.text:00002A9A                 mov     eax, [ebp+Size]
.text:00002A9D                 push    eax
.text:00002A9E                 mov     ecx, [ebp+var_4]
.text:00002AA1                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00002AA6                 cmp     [ebp+Size], 0
.text:00002AAA                 jz      short loc_2AC2
.text:00002AAC                 mov     ecx, [ebp+Size]
.text:00002AAF                 push    ecx             ; Size
.text:00002AB0                 mov     edx, [ebp+Src]
.text:00002AB3                 push    edx             ; Src
.text:00002AB4                 mov     eax, [ebp+var_4]
.text:00002AB7                 mov     ecx, [eax]
.text:00002AB9                 push    ecx             ; Dst
.text:00002ABA                 call    _memcpy
.text:00002ABF                 add     esp, 0Ch
.text:00002AC2
.text:00002AC2 loc_2AC2:                               ; CODE XREF: CBuffer<uchar>::CopyFrom(uchar const *,uint)+1Ej
.text:00002AC2                 add     esp, 4
.text:00002AC5                 cmp     ebp, esp
.text:00002AC7                 call    __RTC_CheckEsp
.text:00002ACC                 mov     esp, ebp
.text:00002ACE                 pop     ebp
.text:00002ACF                 retn    8
.text:00002ACF ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z endp
.text:00002ACF
.text:00002ACF ; ---------------------------------------------------------------------------
.text:00002AD2                 align 4
.text:00002AD2 _text           ends
.text:00002AD2
.text:00002AD4 ; ===========================================================================
.text:00002AD4
.text:00002AD4 ; Segment type: Pure code
.text:00002AD4 ; Segment permissions: Read/Execute
.text:00002AD4 _text           segment para public 'CODE' use32
.text:00002AD4                 assume cs:_text
.text:00002AD4                 ;org 2AD4h
.text:00002AD4 ; COMDAT (pick any)
.text:00002AD4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002AD4
.text:00002AD4 ; =============== S U B R O U T I N E =======================================
.text:00002AD4
.text:00002AD4 ; Attributes: bp-based frame
.text:00002AD4
.text:00002AD4 ; public: unsigned int __thiscall CObjectVector<class NCrypto::N7z::CKeyInfo>::Size(void)const
.text:00002AD4                 public ?Size@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QBEIXZ
.text:00002AD4 ?Size@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QBEIXZ proc near
.text:00002AD4                                         ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+32p
.text:00002AD4                                         ; NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &)+36p ...
.text:00002AD4
.text:00002AD4 var_4           = dword ptr -4
.text:00002AD4
.text:00002AD4                 push    ebp
.text:00002AD5                 mov     ebp, esp
.text:00002AD7                 push    ecx
.text:00002AD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002ADF                 mov     [ebp+var_4], ecx
.text:00002AE2                 mov     ecx, [ebp+var_4]
.text:00002AE5                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00002AEA                 add     esp, 4
.text:00002AED                 cmp     ebp, esp
.text:00002AEF                 call    __RTC_CheckEsp
.text:00002AF4                 mov     esp, ebp
.text:00002AF6                 pop     ebp
.text:00002AF7                 retn
.text:00002AF7 ?Size@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QBEIXZ endp
.text:00002AF7
.text:00002AF7 _text           ends
.text:00002AF7
.text:00002AF8 ; ===========================================================================
.text:00002AF8
.text:00002AF8 ; Segment type: Pure code
.text:00002AF8 ; Segment permissions: Read/Execute
.text:00002AF8 _text           segment para public 'CODE' use32
.text:00002AF8                 assume cs:_text
.text:00002AF8                 ;org 2AF8h
.text:00002AF8 ; COMDAT (pick any)
.text:00002AF8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002AF8
.text:00002AF8 ; =============== S U B R O U T I N E =======================================
.text:00002AF8
.text:00002AF8 ; Attributes: bp-based frame
.text:00002AF8
.text:00002AF8 ; public: __thiscall CObjectVector<class NCrypto::N7z::CKeyInfo>::CObjectVector<class NCrypto::N7z::CKeyInfo>(void)
.text:00002AF8                 public ??0?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ
.text:00002AF8 ??0?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ proc near
.text:00002AF8                                         ; CODE XREF: NCrypto::N7z::CKeyInfoCache::CKeyInfoCache(uint)+1Cp
.text:00002AF8
.text:00002AF8 var_4           = dword ptr -4
.text:00002AF8
.text:00002AF8                 push    ebp
.text:00002AF9                 mov     ebp, esp
.text:00002AFB                 push    ecx
.text:00002AFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B03                 mov     [ebp+var_4], ecx
.text:00002B06                 mov     ecx, [ebp+var_4]
.text:00002B09                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00002B0E                 mov     eax, [ebp+var_4]
.text:00002B11                 add     esp, 4
.text:00002B14                 cmp     ebp, esp
.text:00002B16                 call    __RTC_CheckEsp
.text:00002B1B                 mov     esp, ebp
.text:00002B1D                 pop     ebp
.text:00002B1E                 retn
.text:00002B1E ??0?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ endp
.text:00002B1E
.text:00002B1E ; ---------------------------------------------------------------------------
.text:00002B1F                 align 10h
.text:00002B1F _text           ends
.text:00002B1F
.text:00002B20 ; ===========================================================================
.text:00002B20
.text:00002B20 ; Segment type: Pure code
.text:00002B20 ; Segment permissions: Read/Execute
.text:00002B20 _text           segment para public 'CODE' use32
.text:00002B20                 assume cs:_text
.text:00002B20                 ;org 2B20h
.text:00002B20 ; COMDAT (pick any)
.text:00002B20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002B20
.text:00002B20 ; =============== S U B R O U T I N E =======================================
.text:00002B20
.text:00002B20 ; Attributes: bp-based frame
.text:00002B20
.text:00002B20 ; public: class NCrypto::N7z::CKeyInfo & __thiscall CObjectVector<class NCrypto::N7z::CKeyInfo>::operator[](unsigned int)
.text:00002B20                 public ??A?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEAAVCKeyInfo@N7z@NCrypto@@I@Z
.text:00002B20 ??A?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEAAVCKeyInfo@N7z@NCrypto@@I@Z proc near
.text:00002B20                                         ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+46p
.text:00002B20                                         ; NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &)+4Ap
.text:00002B20
.text:00002B20 var_4           = dword ptr -4
.text:00002B20 arg_0           = dword ptr  8
.text:00002B20
.text:00002B20                 push    ebp
.text:00002B21                 mov     ebp, esp
.text:00002B23                 push    ecx
.text:00002B24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B2B                 mov     [ebp+var_4], ecx
.text:00002B2E                 mov     eax, [ebp+arg_0]
.text:00002B31                 push    eax
.text:00002B32                 mov     ecx, [ebp+var_4]
.text:00002B35                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00002B3A                 mov     eax, [eax]
.text:00002B3C                 add     esp, 4
.text:00002B3F                 cmp     ebp, esp
.text:00002B41                 call    __RTC_CheckEsp
.text:00002B46                 mov     esp, ebp
.text:00002B48                 pop     ebp
.text:00002B49                 retn    4
.text:00002B49 ??A?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEAAVCKeyInfo@N7z@NCrypto@@I@Z endp
.text:00002B49
.text:00002B49 _text           ends
.text:00002B49
.text:00002B4C ; ===========================================================================
.text:00002B4C
.text:00002B4C ; Segment type: Pure code
.text:00002B4C ; Segment permissions: Read/Execute
.text:00002B4C _text           segment para public 'CODE' use32
.text:00002B4C                 assume cs:_text
.text:00002B4C                 ;org 2B4Ch
.text:00002B4C ; COMDAT (pick any)
.text:00002B4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002B4C
.text:00002B4C ; =============== S U B R O U T I N E =======================================
.text:00002B4C
.text:00002B4C ; Attributes: bp-based frame
.text:00002B4C
.text:00002B4C ; public: void __thiscall CObjectVector<class NCrypto::N7z::CKeyInfo>::MoveToFront(unsigned int)
.text:00002B4C                 public ?MoveToFront@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXI@Z
.text:00002B4C ?MoveToFront@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXI@Z proc near
.text:00002B4C                                         ; CODE XREF: NCrypto::N7z::CKeyInfoCache::GetKey(NCrypto::N7z::CKeyInfo &)+9Dp
.text:00002B4C                                         ; NCrypto::N7z::CKeyInfoCache::FindAndAdd(NCrypto::N7z::CKeyInfo const &)+75p
.text:00002B4C
.text:00002B4C var_4           = dword ptr -4
.text:00002B4C arg_0           = dword ptr  8
.text:00002B4C
.text:00002B4C                 push    ebp
.text:00002B4D                 mov     ebp, esp
.text:00002B4F                 push    ecx
.text:00002B50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B57                 mov     [ebp+var_4], ecx
.text:00002B5A                 mov     eax, [ebp+arg_0]
.text:00002B5D                 push    eax
.text:00002B5E                 mov     ecx, [ebp+var_4]
.text:00002B61                 call    ?MoveToFront@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::MoveToFront(uint)
.text:00002B66                 add     esp, 4
.text:00002B69                 cmp     ebp, esp
.text:00002B6B                 call    __RTC_CheckEsp
.text:00002B70                 mov     esp, ebp
.text:00002B72                 pop     ebp
.text:00002B73                 retn    4
.text:00002B73 ?MoveToFront@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXI@Z endp
.text:00002B73
.text:00002B73 ; ---------------------------------------------------------------------------
.text:00002B76                 align 4
.text:00002B76 _text           ends
.text:00002B76
.text:00002B78 ; ===========================================================================
.text:00002B78
.text:00002B78 ; Segment type: Pure code
.text:00002B78 ; Segment permissions: Read/Execute
.text:00002B78 _text           segment para public 'CODE' use32
.text:00002B78                 assume cs:_text
.text:00002B78                 ;org 2B78h
.text:00002B78 ; COMDAT (pick any)
.text:00002B78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002B78
.text:00002B78 ; =============== S U B R O U T I N E =======================================
.text:00002B78
.text:00002B78 ; Attributes: bp-based frame
.text:00002B78
.text:00002B78 ; int __stdcall CObjectVector<NCrypto::N7z::CKeyInfo>::Insert(int, struct NCrypto::N7z::CKeyInfo *)
.text:00002B78                 public ?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z
.text:00002B78 ?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z proc near
.text:00002B78                                         ; CODE XREF: NCrypto::N7z::CKeyInfoCache::Add(NCrypto::N7z::CKeyInfo const &)+37p
.text:00002B78
.text:00002B78 var_1C          = dword ptr -1Ch
.text:00002B78 var_18          = dword ptr -18h
.text:00002B78 var_14          = dword ptr -14h
.text:00002B78 var_10          = dword ptr -10h
.text:00002B78 var_C           = dword ptr -0Ch
.text:00002B78 var_4           = dword ptr -4
.text:00002B78 arg_0           = dword ptr  8
.text:00002B78 arg_4           = dword ptr  0Ch
.text:00002B78
.text:00002B78                 push    ebp
.text:00002B79                 mov     ebp, esp
.text:00002B7B                 push    0FFFFFFFFh
.text:00002B7D                 push    offset __ehhandler$?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z
.text:00002B82                 mov     eax, large fs:0
.text:00002B88                 push    eax
.text:00002B89                 sub     esp, 10h
.text:00002B8C                 mov     eax, 0CCCCCCCCh
.text:00002B91                 mov     [ebp+var_1C], eax
.text:00002B94                 mov     [ebp+var_18], eax
.text:00002B97                 mov     [ebp+var_14], eax
.text:00002B9A                 mov     [ebp+var_10], eax
.text:00002B9D                 mov     eax, dword ptr ds:___security_cookie
.text:00002BA2                 xor     eax, ebp
.text:00002BA4                 push    eax
.text:00002BA5                 lea     eax, [ebp+var_C]
.text:00002BA8                 mov     large fs:0, eax
.text:00002BAE                 mov     [ebp+var_10], ecx
.text:00002BB1                 push    40h ; '@'       ; unsigned int
.text:00002BB3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002BB8                 add     esp, 4
.text:00002BBB                 mov     [ebp+var_18], eax
.text:00002BBE                 mov     [ebp+var_4], 0
.text:00002BC5                 cmp     [ebp+var_18], 0
.text:00002BC9                 jz      short loc_2BDC
.text:00002BCB                 mov     eax, [ebp+arg_4]
.text:00002BCE                 push    eax             ; struct NCrypto::N7z::CKeyInfo *
.text:00002BCF                 mov     ecx, [ebp+var_18] ; this
.text:00002BD2                 call    ??0CKeyInfo@N7z@NCrypto@@QAE@ABV012@@Z ; NCrypto::N7z::CKeyInfo::CKeyInfo(NCrypto::N7z::CKeyInfo const &)
.text:00002BD7                 mov     [ebp+var_1C], eax
.text:00002BDA                 jmp     short loc_2BE3
.text:00002BDC ; ---------------------------------------------------------------------------
.text:00002BDC
.text:00002BDC loc_2BDC:                               ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::Insert(uint,NCrypto::N7z::CKeyInfo const &)+51j
.text:00002BDC                 mov     [ebp+var_1C], 0
.text:00002BE3
.text:00002BE3 loc_2BE3:                               ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::Insert(uint,NCrypto::N7z::CKeyInfo const &)+62j
.text:00002BE3                 mov     ecx, [ebp+var_1C]
.text:00002BE6                 mov     [ebp+var_14], ecx
.text:00002BE9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002BF0                 mov     edx, [ebp+var_14]
.text:00002BF3                 push    edx
.text:00002BF4                 mov     eax, [ebp+arg_0]
.text:00002BF7                 push    eax
.text:00002BF8                 mov     ecx, [ebp+var_10]
.text:00002BFB                 call    ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ; CRecordVector<void *>::Insert(uint,void * const)
.text:00002C00                 mov     ecx, [ebp+var_C]
.text:00002C03                 mov     large fs:0, ecx
.text:00002C0A                 pop     ecx
.text:00002C0B                 add     esp, 1Ch
.text:00002C0E                 cmp     ebp, esp
.text:00002C10                 call    __RTC_CheckEsp
.text:00002C15                 mov     esp, ebp
.text:00002C17                 pop     ebp
.text:00002C18                 retn    8
.text:00002C18 ?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z endp
.text:00002C18
.text:00002C18 ; ---------------------------------------------------------------------------
.text:00002C1B                 align 4
.text:00002C1B _text           ends
.text:00002C1B
.text$x:00002C1C ; ===========================================================================
.text$x:00002C1C
.text$x:00002C1C ; Segment type: Pure code
.text$x:00002C1C ; Segment permissions: Read/Execute
.text$x:00002C1C _text$x         segment para public 'CODE' use32
.text$x:00002C1C                 assume cs:_text$x
.text$x:00002C1C                 ;org 2C1Ch
.text$x:00002C1C ; COMDAT (pick associative to section at 2B78)
.text$x:00002C1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002C1C
.text$x:00002C1C ; =============== S U B R O U T I N E =======================================
.text$x:00002C1C
.text$x:00002C1C
.text$x:00002C1C __unwindfunclet$?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z$0 proc near
.text$x:00002C1C                                         ; DATA XREF: .xdata$x:00002C48o
.text$x:00002C1C                 mov     eax, [ebp-18h]
.text$x:00002C1F                 push    eax             ; void *
.text$x:00002C20                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002C25                 pop     ecx
.text$x:00002C26                 retn
.text$x:00002C26 __unwindfunclet$?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z$0 endp
.text$x:00002C26
.text$x:00002C27
.text$x:00002C27 ; =============== S U B R O U T I N E =======================================
.text$x:00002C27
.text$x:00002C27
.text$x:00002C27 __ehhandler$?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z proc near
.text$x:00002C27                                         ; DATA XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::Insert(uint,NCrypto::N7z::CKeyInfo const &)+5o
.text$x:00002C27
.text$x:00002C27 arg_4           = dword ptr  8
.text$x:00002C27
.text$x:00002C27                 mov     edx, [esp+arg_4]
.text$x:00002C2B                 lea     eax, [edx+0Ch]
.text$x:00002C2E                 mov     ecx, [edx-14h]
.text$x:00002C31                 xor     ecx, eax
.text$x:00002C33                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002C38                 mov     eax, offset __ehfuncinfo$?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z
.text$x:00002C3D                 jmp     ___CxxFrameHandler3
.text$x:00002C3D __ehhandler$?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z endp
.text$x:00002C3D
.text$x:00002C3D ; ---------------------------------------------------------------------------
.text$x:00002C42                 align 4
.text$x:00002C42 _text$x         ends
.text$x:00002C42
.xdata$x:00002C44 ; ===========================================================================
.xdata$x:00002C44
.xdata$x:00002C44 ; Segment type: Pure data
.xdata$x:00002C44 ; Segment permissions: Read
.xdata$x:00002C44 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002C44                 assume cs:_xdata$x
.xdata$x:00002C44                 ;org 2C44h
.xdata$x:00002C44 ; COMDAT (pick associative to section at 2B78)
.xdata$x:00002C44 __unwindtable$?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z db 0FFh
.xdata$x:00002C44                                         ; DATA XREF: .xdata$x:00002C54o
.xdata$x:00002C45                 db 0FFh
.xdata$x:00002C46                 db 0FFh
.xdata$x:00002C47                 db 0FFh
.xdata$x:00002C48                 dd offset __unwindfunclet$?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z$0
.xdata$x:00002C4C __ehfuncinfo$?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z db  22h ; "
.xdata$x:00002C4C                                         ; DATA XREF: __ehhandler$?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z+11o
.xdata$x:00002C4D                 db    5
.xdata$x:00002C4E                 db  93h ; ô
.xdata$x:00002C4F                 db  19h
.xdata$x:00002C50                 db    1
.xdata$x:00002C51                 db    0
.xdata$x:00002C52                 db    0
.xdata$x:00002C53                 db    0
.xdata$x:00002C54                 dd offset __unwindtable$?Insert@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXIABVCKeyInfo@N7z@NCrypto@@@Z
.xdata$x:00002C58                 db    0
.xdata$x:00002C59                 db    0
.xdata$x:00002C5A                 db    0
.xdata$x:00002C5B                 db    0
.xdata$x:00002C5C                 db    0
.xdata$x:00002C5D                 db    0
.xdata$x:00002C5E                 db    0
.xdata$x:00002C5F                 db    0
.xdata$x:00002C60                 db    0
.xdata$x:00002C61                 db    0
.xdata$x:00002C62                 db    0
.xdata$x:00002C63                 db    0
.xdata$x:00002C64                 db    0
.xdata$x:00002C65                 db    0
.xdata$x:00002C66                 db    0
.xdata$x:00002C67                 db    0
.xdata$x:00002C68                 db    0
.xdata$x:00002C69                 db    0
.xdata$x:00002C6A                 db    0
.xdata$x:00002C6B                 db    0
.xdata$x:00002C6C                 db    1
.xdata$x:00002C6D                 db    0
.xdata$x:00002C6E                 db    0
.xdata$x:00002C6F                 db    0
.xdata$x:00002C6F _xdata$x        ends
.xdata$x:00002C6F
.text:00002C70 ; ===========================================================================
.text:00002C70
.text:00002C70 ; Segment type: Pure code
.text:00002C70 ; Segment permissions: Read/Execute
.text:00002C70 _text           segment para public 'CODE' use32
.text:00002C70                 assume cs:_text
.text:00002C70                 ;org 2C70h
.text:00002C70 ; COMDAT (pick any)
.text:00002C70                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002C70
.text:00002C70 ; =============== S U B R O U T I N E =======================================
.text:00002C70
.text:00002C70 ; Attributes: bp-based frame
.text:00002C70
.text:00002C70 ; public: __thiscall CObjectVector<class NCrypto::N7z::CKeyInfo>::~CObjectVector<class NCrypto::N7z::CKeyInfo>(void)
.text:00002C70                 public ??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ
.text:00002C70 ??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ proc near
.text:00002C70                                         ; CODE XREF: NCrypto::N7z::CKeyInfoCache::~CKeyInfoCache(void)+14p
.text:00002C70
.text:00002C70 var_20          = dword ptr -20h
.text:00002C70 var_1C          = dword ptr -1Ch
.text:00002C70 var_18          = dword ptr -18h
.text:00002C70 var_14          = dword ptr -14h
.text:00002C70 var_10          = dword ptr -10h
.text:00002C70 var_C           = dword ptr -0Ch
.text:00002C70 var_4           = dword ptr -4
.text:00002C70
.text:00002C70                 push    ebp
.text:00002C71                 mov     ebp, esp
.text:00002C73                 push    0FFFFFFFFh
.text:00002C75                 push    offset __ehhandler$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ
.text:00002C7A                 mov     eax, large fs:0
.text:00002C80                 push    eax
.text:00002C81                 sub     esp, 14h
.text:00002C84                 mov     eax, 0CCCCCCCCh
.text:00002C89                 mov     [ebp+var_20], eax
.text:00002C8C                 mov     [ebp+var_1C], eax
.text:00002C8F                 mov     [ebp+var_18], eax
.text:00002C92                 mov     [ebp+var_14], eax
.text:00002C95                 mov     [ebp+var_10], eax
.text:00002C98                 mov     eax, dword ptr ds:___security_cookie
.text:00002C9D                 xor     eax, ebp
.text:00002C9F                 push    eax
.text:00002CA0                 lea     eax, [ebp+var_C]
.text:00002CA3                 mov     large fs:0, eax
.text:00002CA9                 mov     [ebp+var_10], ecx
.text:00002CAC                 mov     [ebp+var_4], 0
.text:00002CB3                 mov     ecx, [ebp+var_10]
.text:00002CB6                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00002CBB                 mov     [ebp+var_14], eax
.text:00002CBE
.text:00002CBE loc_2CBE:                               ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::~CObjectVector<NCrypto::N7z::CKeyInfo>(void):loc_2D00j
.text:00002CBE                 cmp     [ebp+var_14], 0
.text:00002CC2                 jz      short loc_2D02
.text:00002CC4                 mov     eax, [ebp+var_14]
.text:00002CC7                 sub     eax, 1
.text:00002CCA                 mov     [ebp+var_14], eax
.text:00002CCD                 mov     ecx, [ebp+var_14]
.text:00002CD0                 push    ecx
.text:00002CD1                 mov     ecx, [ebp+var_10]
.text:00002CD4                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00002CD9                 mov     edx, [eax]
.text:00002CDB                 mov     [ebp+var_1C], edx
.text:00002CDE                 mov     eax, [ebp+var_1C]
.text:00002CE1                 mov     [ebp+var_18], eax
.text:00002CE4                 cmp     [ebp+var_18], 0
.text:00002CE8                 jz      short loc_2CF9
.text:00002CEA                 push    1
.text:00002CEC                 mov     ecx, [ebp+var_18]
.text:00002CEF                 call    ??_GCKeyInfo@N7z@NCrypto@@QAEPAXI@Z ; NCrypto::N7z::CKeyInfo::`scalar deleting destructor'(uint)
.text:00002CF4                 mov     [ebp+var_20], eax
.text:00002CF7                 jmp     short loc_2D00
.text:00002CF9 ; ---------------------------------------------------------------------------
.text:00002CF9
.text:00002CF9 loc_2CF9:                               ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::~CObjectVector<NCrypto::N7z::CKeyInfo>(void)+78j
.text:00002CF9                 mov     [ebp+var_20], 0
.text:00002D00
.text:00002D00 loc_2D00:                               ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::~CObjectVector<NCrypto::N7z::CKeyInfo>(void)+87j
.text:00002D00                 jmp     short loc_2CBE
.text:00002D02 ; ---------------------------------------------------------------------------
.text:00002D02
.text:00002D02 loc_2D02:                               ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::~CObjectVector<NCrypto::N7z::CKeyInfo>(void)+52j
.text:00002D02                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002D09                 mov     ecx, [ebp+var_10]
.text:00002D0C                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00002D11                 mov     ecx, [ebp+var_C]
.text:00002D14                 mov     large fs:0, ecx
.text:00002D1B                 pop     ecx
.text:00002D1C                 add     esp, 20h
.text:00002D1F                 cmp     ebp, esp
.text:00002D21                 call    __RTC_CheckEsp
.text:00002D26                 mov     esp, ebp
.text:00002D28                 pop     ebp
.text:00002D29                 retn
.text:00002D29 ??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ endp
.text:00002D29
.text:00002D29 ; ---------------------------------------------------------------------------
.text:00002D2A                 align 4
.text:00002D2A _text           ends
.text:00002D2A
.text$x:00002D2C ; ===========================================================================
.text$x:00002D2C
.text$x:00002D2C ; Segment type: Pure code
.text$x:00002D2C ; Segment permissions: Read/Execute
.text$x:00002D2C _text$x         segment para public 'CODE' use32
.text$x:00002D2C                 assume cs:_text$x
.text$x:00002D2C                 ;org 2D2Ch
.text$x:00002D2C ; COMDAT (pick associative to section at 2C70)
.text$x:00002D2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002D2C
.text$x:00002D2C ; =============== S U B R O U T I N E =======================================
.text$x:00002D2C
.text$x:00002D2C
.text$x:00002D2C __unwindfunclet$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ$0 proc near
.text$x:00002D2C                                         ; DATA XREF: .xdata$x:00002D54o
.text$x:00002D2C                 mov     ecx, [ebp-10h]
.text$x:00002D2F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00002D2F __unwindfunclet$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ$0 endp
.text$x:00002D2F
.text$x:00002D34
.text$x:00002D34 ; =============== S U B R O U T I N E =======================================
.text$x:00002D34
.text$x:00002D34
.text$x:00002D34 __ehhandler$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ proc near
.text$x:00002D34                                         ; DATA XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::~CObjectVector<NCrypto::N7z::CKeyInfo>(void)+5o
.text$x:00002D34
.text$x:00002D34 arg_4           = dword ptr  8
.text$x:00002D34
.text$x:00002D34                 mov     edx, [esp+arg_4]
.text$x:00002D38                 lea     eax, [edx+0Ch]
.text$x:00002D3B                 mov     ecx, [edx-18h]
.text$x:00002D3E                 xor     ecx, eax
.text$x:00002D40                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002D45                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ
.text$x:00002D4A                 jmp     ___CxxFrameHandler3
.text$x:00002D4A __ehhandler$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ endp
.text$x:00002D4A
.text$x:00002D4A ; ---------------------------------------------------------------------------
.text$x:00002D4F                 align 10h
.text$x:00002D4F _text$x         ends
.text$x:00002D4F
.xdata$x:00002D50 ; ===========================================================================
.xdata$x:00002D50
.xdata$x:00002D50 ; Segment type: Pure data
.xdata$x:00002D50 ; Segment permissions: Read
.xdata$x:00002D50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002D50                 assume cs:_xdata$x
.xdata$x:00002D50                 ;org 2D50h
.xdata$x:00002D50 ; COMDAT (pick associative to section at 2C70)
.xdata$x:00002D50 __unwindtable$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ db 0FFh
.xdata$x:00002D50                                         ; DATA XREF: .xdata$x:00002D60o
.xdata$x:00002D51                 db 0FFh
.xdata$x:00002D52                 db 0FFh
.xdata$x:00002D53                 db 0FFh
.xdata$x:00002D54                 dd offset __unwindfunclet$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ$0
.xdata$x:00002D58 __ehfuncinfo$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ db  22h ; "
.xdata$x:00002D58                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ+11o
.xdata$x:00002D59                 db    5
.xdata$x:00002D5A                 db  93h ; ô
.xdata$x:00002D5B                 db  19h
.xdata$x:00002D5C                 db    1
.xdata$x:00002D5D                 db    0
.xdata$x:00002D5E                 db    0
.xdata$x:00002D5F                 db    0
.xdata$x:00002D60                 dd offset __unwindtable$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ
.xdata$x:00002D64                 db    0
.xdata$x:00002D65                 db    0
.xdata$x:00002D66                 db    0
.xdata$x:00002D67                 db    0
.xdata$x:00002D68                 db    0
.xdata$x:00002D69                 db    0
.xdata$x:00002D6A                 db    0
.xdata$x:00002D6B                 db    0
.xdata$x:00002D6C                 db    0
.xdata$x:00002D6D                 db    0
.xdata$x:00002D6E                 db    0
.xdata$x:00002D6F                 db    0
.xdata$x:00002D70                 db    0
.xdata$x:00002D71                 db    0
.xdata$x:00002D72                 db    0
.xdata$x:00002D73                 db    0
.xdata$x:00002D74                 db    0
.xdata$x:00002D75                 db    0
.xdata$x:00002D76                 db    0
.xdata$x:00002D77                 db    0
.xdata$x:00002D78                 db    1
.xdata$x:00002D79                 db    0
.xdata$x:00002D7A                 db    0
.xdata$x:00002D7B                 db    0
.xdata$x:00002D7B _xdata$x        ends
.xdata$x:00002D7B
.text:00002D7C ; ===========================================================================
.text:00002D7C
.text:00002D7C ; Segment type: Pure code
.text:00002D7C ; Segment permissions: Read/Execute
.text:00002D7C _text           segment para public 'CODE' use32
.text:00002D7C                 assume cs:_text
.text:00002D7C                 ;org 2D7Ch
.text:00002D7C ; COMDAT (pick any)
.text:00002D7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002D7C
.text:00002D7C ; =============== S U B R O U T I N E =======================================
.text:00002D7C
.text:00002D7C ; Attributes: bp-based frame
.text:00002D7C
.text:00002D7C ; public: void __thiscall CObjectVector<class NCrypto::N7z::CKeyInfo>::DeleteBack(void)
.text:00002D7C                 public ?DeleteBack@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXXZ
.text:00002D7C ?DeleteBack@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXXZ proc near
.text:00002D7C                                         ; CODE XREF: NCrypto::N7z::CKeyInfoCache::Add(NCrypto::N7z::CKeyInfo const &)+26p
.text:00002D7C
.text:00002D7C var_10          = dword ptr -10h
.text:00002D7C var_C           = dword ptr -0Ch
.text:00002D7C var_8           = dword ptr -8
.text:00002D7C var_4           = dword ptr -4
.text:00002D7C
.text:00002D7C                 push    ebp
.text:00002D7D                 mov     ebp, esp
.text:00002D7F                 sub     esp, 10h
.text:00002D82                 mov     eax, 0CCCCCCCCh
.text:00002D87                 mov     [ebp+var_10], eax
.text:00002D8A                 mov     [ebp+var_C], eax
.text:00002D8D                 mov     [ebp+var_8], eax
.text:00002D90                 mov     [ebp+var_4], eax
.text:00002D93                 mov     [ebp+var_4], ecx
.text:00002D96                 mov     ecx, [ebp+var_4]
.text:00002D99                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00002D9E                 sub     eax, 1
.text:00002DA1                 push    eax
.text:00002DA2                 mov     ecx, [ebp+var_4]
.text:00002DA5                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00002DAA                 mov     eax, [eax]
.text:00002DAC                 mov     [ebp+var_C], eax
.text:00002DAF                 mov     ecx, [ebp+var_C]
.text:00002DB2                 mov     [ebp+var_8], ecx
.text:00002DB5                 cmp     [ebp+var_8], 0
.text:00002DB9                 jz      short loc_2DCA
.text:00002DBB                 push    1
.text:00002DBD                 mov     ecx, [ebp+var_8]
.text:00002DC0                 call    ??_GCKeyInfo@N7z@NCrypto@@QAEPAXI@Z ; NCrypto::N7z::CKeyInfo::`scalar deleting destructor'(uint)
.text:00002DC5                 mov     [ebp+var_10], eax
.text:00002DC8                 jmp     short loc_2DD1
.text:00002DCA ; ---------------------------------------------------------------------------
.text:00002DCA
.text:00002DCA loc_2DCA:                               ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::DeleteBack(void)+3Dj
.text:00002DCA                 mov     [ebp+var_10], 0
.text:00002DD1
.text:00002DD1 loc_2DD1:                               ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::DeleteBack(void)+4Cj
.text:00002DD1                 mov     ecx, [ebp+var_4]
.text:00002DD4                 call    ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::DeleteBack(void)
.text:00002DD9                 add     esp, 10h
.text:00002DDC                 cmp     ebp, esp
.text:00002DDE                 call    __RTC_CheckEsp
.text:00002DE3                 mov     esp, ebp
.text:00002DE5                 pop     ebp
.text:00002DE6                 retn
.text:00002DE6 ?DeleteBack@?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAEXXZ endp
.text:00002DE6
.text:00002DE6 ; ---------------------------------------------------------------------------
.text:00002DE7                 align 4
.text:00002DE7 _text           ends
.text:00002DE7
.text:00002DE8 ; ===========================================================================
.text:00002DE8
.text:00002DE8 ; Segment type: Pure code
.text:00002DE8 ; Segment permissions: Read/Execute
.text:00002DE8 _text           segment para public 'CODE' use32
.text:00002DE8                 assume cs:_text
.text:00002DE8                 ;org 2DE8h
.text:00002DE8 ; COMDAT (pick any)
.text:00002DE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002DE8
.text:00002DE8 ; =============== S U B R O U T I N E =======================================
.text:00002DE8
.text:00002DE8 ; Attributes: bp-based frame
.text:00002DE8
.text:00002DE8 ; public: __thiscall CMyComPtr<struct ICompressFilter>::CMyComPtr<struct ICompressFilter>(void)
.text:00002DE8                 public ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ
.text:00002DE8 ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ proc near
.text:00002DE8                                         ; CODE XREF: NCrypto::N7z::CBaseCoder::CBaseCoder(void)+76p
.text:00002DE8
.text:00002DE8 var_4           = dword ptr -4
.text:00002DE8
.text:00002DE8                 push    ebp
.text:00002DE9                 mov     ebp, esp
.text:00002DEB                 push    ecx
.text:00002DEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DF3                 mov     [ebp+var_4], ecx
.text:00002DF6                 mov     eax, [ebp+var_4]
.text:00002DF9                 mov     dword ptr [eax], 0
.text:00002DFF                 mov     eax, [ebp+var_4]
.text:00002E02                 mov     esp, ebp
.text:00002E04                 pop     ebp
.text:00002E05                 retn
.text:00002E05 ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ endp
.text:00002E05
.text:00002E05 ; ---------------------------------------------------------------------------
.text:00002E06                 align 4
.text:00002E06 _text           ends
.text:00002E06
.text:00002E08 ; ===========================================================================
.text:00002E08
.text:00002E08 ; Segment type: Pure code
.text:00002E08 ; Segment permissions: Read/Execute
.text:00002E08 _text           segment para public 'CODE' use32
.text:00002E08                 assume cs:_text
.text:00002E08                 ;org 2E08h
.text:00002E08 ; COMDAT (pick any)
.text:00002E08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E08
.text:00002E08 ; =============== S U B R O U T I N E =======================================
.text:00002E08
.text:00002E08 ; Attributes: bp-based frame
.text:00002E08
.text:00002E08 ; public: __thiscall CMyComPtr<struct ICompressFilter>::~CMyComPtr<struct ICompressFilter>(void)
.text:00002E08                 public ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ
.text:00002E08 ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ proc near
.text:00002E08                                         ; CODE XREF: NCrypto::N7z::CBaseCoder::~CBaseCoder(void)+3Ap
.text:00002E08
.text:00002E08 var_4           = dword ptr -4
.text:00002E08
.text:00002E08                 push    ebp
.text:00002E09                 mov     ebp, esp
.text:00002E0B                 push    ecx
.text:00002E0C                 push    esi
.text:00002E0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E14                 mov     [ebp+var_4], ecx
.text:00002E17                 mov     eax, [ebp+var_4]
.text:00002E1A                 cmp     dword ptr [eax], 0
.text:00002E1D                 jz      short loc_2E3A
.text:00002E1F                 mov     ecx, [ebp+var_4]
.text:00002E22                 mov     edx, [ecx]
.text:00002E24                 mov     eax, [ebp+var_4]
.text:00002E27                 mov     ecx, [eax]
.text:00002E29                 mov     edx, [edx]
.text:00002E2B                 mov     esi, esp
.text:00002E2D                 push    ecx
.text:00002E2E                 mov     eax, [edx+8]
.text:00002E31                 call    eax
.text:00002E33                 cmp     esi, esp
.text:00002E35                 call    __RTC_CheckEsp
.text:00002E3A
.text:00002E3A loc_2E3A:                               ; CODE XREF: CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)+15j
.text:00002E3A                 pop     esi
.text:00002E3B                 add     esp, 4
.text:00002E3E                 cmp     ebp, esp
.text:00002E40                 call    __RTC_CheckEsp
.text:00002E45                 mov     esp, ebp
.text:00002E47                 pop     ebp
.text:00002E48                 retn
.text:00002E48 ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ endp
.text:00002E48
.text:00002E48 ; ---------------------------------------------------------------------------
.text:00002E49                 align 4
.text:00002E49 _text           ends
.text:00002E49
.text:00002E4C ; ===========================================================================
.text:00002E4C
.text:00002E4C ; Segment type: Pure code
.text:00002E4C ; Segment permissions: Read/Execute
.text:00002E4C _text           segment para public 'CODE' use32
.text:00002E4C                 assume cs:_text
.text:00002E4C                 ;org 2E4Ch
.text:00002E4C ; COMDAT (pick any)
.text:00002E4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E4C
.text:00002E4C ; =============== S U B R O U T I N E =======================================
.text:00002E4C
.text:00002E4C ; Attributes: bp-based frame
.text:00002E4C
.text:00002E4C ; public: struct ICompressFilter * __thiscall CMyComPtr<struct ICompressFilter>::operator->(void)const
.text:00002E4C                 public ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ
.text:00002E4C ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ proc near
.text:00002E4C                                         ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+183p
.text:00002E4C                                         ; NCrypto::N7z::CBaseCoder::Filter(uchar *,uint)+12p
.text:00002E4C
.text:00002E4C var_4           = dword ptr -4
.text:00002E4C
.text:00002E4C                 push    ebp
.text:00002E4D                 mov     ebp, esp
.text:00002E4F                 push    ecx
.text:00002E50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E57                 mov     [ebp+var_4], ecx
.text:00002E5A                 mov     eax, [ebp+var_4]
.text:00002E5D                 mov     eax, [eax]
.text:00002E5F                 mov     esp, ebp
.text:00002E61                 pop     ebp
.text:00002E62                 retn
.text:00002E62 ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ endp
.text:00002E62
.text:00002E62 ; ---------------------------------------------------------------------------
.text:00002E63                 align 4
.text:00002E63 _text           ends
.text:00002E63
.text:00002E64 ; ===========================================================================
.text:00002E64
.text:00002E64 ; Segment type: Pure code
.text:00002E64 ; Segment permissions: Read/Execute
.text:00002E64 _text           segment para public 'CODE' use32
.text:00002E64                 assume cs:_text
.text:00002E64                 ;org 2E64h
.text:00002E64 ; COMDAT (pick any)
.text:00002E64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E64
.text:00002E64 ; =============== S U B R O U T I N E =======================================
.text:00002E64
.text:00002E64 ; Attributes: bp-based frame
.text:00002E64
.text:00002E64 ; public: struct ICompressFilter * __thiscall CMyComPtr<struct ICompressFilter>::operator=(struct ICompressFilter *)
.text:00002E64                 public ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z
.text:00002E64 ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z proc near
.text:00002E64                                         ; CODE XREF: NCrypto::N7z::CEncoder::CEncoder(void)+D3p
.text:00002E64                                         ; NCrypto::N7z::CDecoder::CDecoder(void)+B4p
.text:00002E64
.text:00002E64 var_4           = dword ptr -4
.text:00002E64 arg_0           = dword ptr  8
.text:00002E64
.text:00002E64                 push    ebp
.text:00002E65                 mov     ebp, esp
.text:00002E67                 push    ecx
.text:00002E68                 push    esi
.text:00002E69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E70                 mov     [ebp+var_4], ecx
.text:00002E73                 cmp     [ebp+arg_0], 0
.text:00002E77                 jz      short loc_2E90
.text:00002E79                 mov     eax, [ebp+arg_0]
.text:00002E7C                 mov     ecx, [eax]
.text:00002E7E                 mov     esi, esp
.text:00002E80                 mov     edx, [ebp+arg_0]
.text:00002E83                 push    edx
.text:00002E84                 mov     eax, [ecx+4]
.text:00002E87                 call    eax
.text:00002E89                 cmp     esi, esp
.text:00002E8B                 call    __RTC_CheckEsp
.text:00002E90
.text:00002E90 loc_2E90:                               ; CODE XREF: CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)+13j
.text:00002E90                 mov     ecx, [ebp+var_4]
.text:00002E93                 cmp     dword ptr [ecx], 0
.text:00002E96                 jz      short loc_2EB3
.text:00002E98                 mov     edx, [ebp+var_4]
.text:00002E9B                 mov     eax, [edx]
.text:00002E9D                 mov     ecx, [ebp+var_4]
.text:00002EA0                 mov     edx, [ecx]
.text:00002EA2                 mov     eax, [eax]
.text:00002EA4                 mov     esi, esp
.text:00002EA6                 push    edx
.text:00002EA7                 mov     ecx, [eax+8]
.text:00002EAA                 call    ecx
.text:00002EAC                 cmp     esi, esp
.text:00002EAE                 call    __RTC_CheckEsp
.text:00002EB3
.text:00002EB3 loc_2EB3:                               ; CODE XREF: CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)+32j
.text:00002EB3                 mov     edx, [ebp+var_4]
.text:00002EB6                 mov     eax, [ebp+arg_0]
.text:00002EB9                 mov     [edx], eax
.text:00002EBB                 mov     eax, [ebp+arg_0]
.text:00002EBE                 pop     esi
.text:00002EBF                 add     esp, 4
.text:00002EC2                 cmp     ebp, esp
.text:00002EC4                 call    __RTC_CheckEsp
.text:00002EC9                 mov     esp, ebp
.text:00002ECB                 pop     ebp
.text:00002ECC                 retn    4
.text:00002ECC ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z endp
.text:00002ECC
.text:00002ECC ; ---------------------------------------------------------------------------
.text:00002ECF                 align 10h
.text:00002ECF _text           ends
.text:00002ECF
.text:00002ED0 ; ===========================================================================
.text:00002ED0
.text:00002ED0 ; Segment type: Pure code
.text:00002ED0 ; Segment permissions: Read/Execute
.text:00002ED0 _text           segment para public 'CODE' use32
.text:00002ED0                 assume cs:_text
.text:00002ED0                 ;org 2ED0h
.text:00002ED0 ; COMDAT (pick any)
.text:00002ED0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002ED0
.text:00002ED0 ; =============== S U B R O U T I N E =======================================
.text:00002ED0
.text:00002ED0 ; Attributes: bp-based frame
.text:00002ED0
.text:00002ED0 ; public: __thiscall CObjArray<unsigned char>::CObjArray<unsigned char>(unsigned int)
.text:00002ED0                 public ??0?$CObjArray@E@@QAE@I@Z
.text:00002ED0 ??0?$CObjArray@E@@QAE@I@Z proc near     ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+10Fp
.text:00002ED0
.text:00002ED0 var_8           = dword ptr -8
.text:00002ED0 var_4           = dword ptr -4
.text:00002ED0 arg_0           = dword ptr  8
.text:00002ED0
.text:00002ED0                 push    ebp
.text:00002ED1                 mov     ebp, esp
.text:00002ED3                 sub     esp, 8
.text:00002ED6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002EDD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EE4                 mov     [ebp+var_4], ecx
.text:00002EE7                 mov     eax, [ebp+var_4]
.text:00002EEA                 mov     dword ptr [eax], 0
.text:00002EF0                 cmp     [ebp+arg_0], 0
.text:00002EF4                 jz      short loc_2F0D
.text:00002EF6                 mov     ecx, [ebp+arg_0]
.text:00002EF9                 push    ecx             ; unsigned int
.text:00002EFA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002EFF                 add     esp, 4
.text:00002F02                 mov     [ebp+var_8], eax
.text:00002F05                 mov     edx, [ebp+var_4]
.text:00002F08                 mov     eax, [ebp+var_8]
.text:00002F0B                 mov     [edx], eax
.text:00002F0D
.text:00002F0D loc_2F0D:                               ; CODE XREF: CObjArray<uchar>::CObjArray<uchar>(uint)+24j
.text:00002F0D                 mov     eax, [ebp+var_4]
.text:00002F10                 add     esp, 8
.text:00002F13                 cmp     ebp, esp
.text:00002F15                 call    __RTC_CheckEsp
.text:00002F1A                 mov     esp, ebp
.text:00002F1C                 pop     ebp
.text:00002F1D                 retn    4
.text:00002F1D ??0?$CObjArray@E@@QAE@I@Z endp
.text:00002F1D
.text:00002F1D _text           ends
.text:00002F1D
.text:00002F20 ; ===========================================================================
.text:00002F20
.text:00002F20 ; Segment type: Pure code
.text:00002F20 ; Segment permissions: Read/Execute
.text:00002F20 _text           segment para public 'CODE' use32
.text:00002F20                 assume cs:_text
.text:00002F20                 ;org 2F20h
.text:00002F20 ; COMDAT (pick any)
.text:00002F20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F20
.text:00002F20 ; =============== S U B R O U T I N E =======================================
.text:00002F20
.text:00002F20 ; Attributes: bp-based frame
.text:00002F20
.text:00002F20 ; public: __thiscall CObjArray<unsigned char>::~CObjArray<unsigned char>(void)
.text:00002F20                 public ??1?$CObjArray@E@@QAE@XZ
.text:00002F20 ??1?$CObjArray@E@@QAE@XZ proc near      ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+2ADp
.text:00002F20                                         ; __unwindfunclet$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ$0+3j
.text:00002F20
.text:00002F20 var_8           = dword ptr -8
.text:00002F20 var_4           = dword ptr -4
.text:00002F20
.text:00002F20                 push    ebp
.text:00002F21                 mov     ebp, esp
.text:00002F23                 sub     esp, 8
.text:00002F26                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002F2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F34                 mov     [ebp+var_4], ecx
.text:00002F37                 mov     eax, [ebp+var_4]
.text:00002F3A                 mov     ecx, [eax]
.text:00002F3C                 mov     [ebp+var_8], ecx
.text:00002F3F                 mov     edx, [ebp+var_8]
.text:00002F42                 push    edx             ; void *
.text:00002F43                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002F48                 add     esp, 4
.text:00002F4B                 add     esp, 8
.text:00002F4E                 cmp     ebp, esp
.text:00002F50                 call    __RTC_CheckEsp
.text:00002F55                 mov     esp, ebp
.text:00002F57                 pop     ebp
.text:00002F58                 retn
.text:00002F58 ??1?$CObjArray@E@@QAE@XZ endp
.text:00002F58
.text:00002F58 ; ---------------------------------------------------------------------------
.text:00002F59                 align 4
.text:00002F59 _text           ends
.text:00002F59
.text:00002F5C ; ===========================================================================
.text:00002F5C
.text:00002F5C ; Segment type: Pure code
.text:00002F5C ; Segment permissions: Read/Execute
.text:00002F5C _text           segment para public 'CODE' use32
.text:00002F5C                 assume cs:_text
.text:00002F5C                 ;org 2F5Ch
.text:00002F5C ; COMDAT (pick any)
.text:00002F5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F5C
.text:00002F5C ; =============== S U B R O U T I N E =======================================
.text:00002F5C
.text:00002F5C ; Attributes: bp-based frame
.text:00002F5C
.text:00002F5C ; public: __thiscall CObjArray<unsigned char>::operator unsigned char *(void)
.text:00002F5C                 public ??B?$CObjArray@E@@QAEPAEXZ
.text:00002F5C ??B?$CObjArray@E@@QAEPAEXZ proc near    ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+12Cp
.text:00002F5C                                         ; NCrypto::N7z::CKeyInfo::CalcKey(void)+155p ...
.text:00002F5C
.text:00002F5C var_4           = dword ptr -4
.text:00002F5C
.text:00002F5C                 push    ebp
.text:00002F5D                 mov     ebp, esp
.text:00002F5F                 push    ecx
.text:00002F60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F67                 mov     [ebp+var_4], ecx
.text:00002F6A                 mov     eax, [ebp+var_4]
.text:00002F6D                 mov     eax, [eax]
.text:00002F6F                 mov     esp, ebp
.text:00002F71                 pop     ebp
.text:00002F72                 retn
.text:00002F72 ??B?$CObjArray@E@@QAEPAEXZ endp
.text:00002F72
.text:00002F72 ; ---------------------------------------------------------------------------
.text:00002F73                 align 4
.text:00002F73 _text           ends
.text:00002F73
.text:00002F74 ; ===========================================================================
.text:00002F74
.text:00002F74 ; Segment type: Pure code
.text:00002F74 ; Segment permissions: Read/Execute
.text:00002F74 _text           segment para public 'CODE' use32
.text:00002F74                 assume cs:_text
.text:00002F74                 ;org 2F74h
.text:00002F74 ; COMDAT (pick any)
.text:00002F74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F74
.text:00002F74 ; =============== S U B R O U T I N E =======================================
.text:00002F74
.text:00002F74 ; Attributes: bp-based frame
.text:00002F74
.text:00002F74 ; public: __thiscall CMyComPtr<struct ICryptoProperties>::CMyComPtr<struct ICryptoProperties>(void)
.text:00002F74                 public ??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ
.text:00002F74 ??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ proc near
.text:00002F74                                         ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+50p
.text:00002F74
.text:00002F74 var_4           = dword ptr -4
.text:00002F74
.text:00002F74                 push    ebp
.text:00002F75                 mov     ebp, esp
.text:00002F77                 push    ecx
.text:00002F78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F7F                 mov     [ebp+var_4], ecx
.text:00002F82                 mov     eax, [ebp+var_4]
.text:00002F85                 mov     dword ptr [eax], 0
.text:00002F8B                 mov     eax, [ebp+var_4]
.text:00002F8E                 mov     esp, ebp
.text:00002F90                 pop     ebp
.text:00002F91                 retn
.text:00002F91 ??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ endp
.text:00002F91
.text:00002F91 ; ---------------------------------------------------------------------------
.text:00002F92                 align 4
.text:00002F92 _text           ends
.text:00002F92
.text:00002F94 ; ===========================================================================
.text:00002F94
.text:00002F94 ; Segment type: Pure code
.text:00002F94 ; Segment permissions: Read/Execute
.text:00002F94 _text           segment para public 'CODE' use32
.text:00002F94                 assume cs:_text
.text:00002F94                 ;org 2F94h
.text:00002F94 ; COMDAT (pick any)
.text:00002F94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F94
.text:00002F94 ; =============== S U B R O U T I N E =======================================
.text:00002F94
.text:00002F94 ; Attributes: bp-based frame
.text:00002F94
.text:00002F94 ; public: __thiscall CMyComPtr<struct ICryptoProperties>::~CMyComPtr<struct ICryptoProperties>(void)
.text:00002F94                 public ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ
.text:00002F94 ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ proc near
.text:00002F94                                         ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+91p
.text:00002F94                                         ; NCrypto::N7z::CBaseCoder::Init(void)+BFp ...
.text:00002F94
.text:00002F94 var_4           = dword ptr -4
.text:00002F94
.text:00002F94                 push    ebp
.text:00002F95                 mov     ebp, esp
.text:00002F97                 push    ecx
.text:00002F98                 push    esi
.text:00002F99                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FA0                 mov     [ebp+var_4], ecx
.text:00002FA3                 mov     eax, [ebp+var_4]
.text:00002FA6                 cmp     dword ptr [eax], 0
.text:00002FA9                 jz      short loc_2FC6
.text:00002FAB                 mov     ecx, [ebp+var_4]
.text:00002FAE                 mov     edx, [ecx]
.text:00002FB0                 mov     eax, [ebp+var_4]
.text:00002FB3                 mov     ecx, [eax]
.text:00002FB5                 mov     edx, [edx]
.text:00002FB7                 mov     esi, esp
.text:00002FB9                 push    ecx
.text:00002FBA                 mov     eax, [edx+8]
.text:00002FBD                 call    eax
.text:00002FBF                 cmp     esi, esp
.text:00002FC1                 call    __RTC_CheckEsp
.text:00002FC6
.text:00002FC6 loc_2FC6:                               ; CODE XREF: CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>(void)+15j
.text:00002FC6                 pop     esi
.text:00002FC7                 add     esp, 4
.text:00002FCA                 cmp     ebp, esp
.text:00002FCC                 call    __RTC_CheckEsp
.text:00002FD1                 mov     esp, ebp
.text:00002FD3                 pop     ebp
.text:00002FD4                 retn
.text:00002FD4 ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ endp
.text:00002FD4
.text:00002FD4 ; ---------------------------------------------------------------------------
.text:00002FD5                 align 4
.text:00002FD5 _text           ends
.text:00002FD5
.text:00002FD8 ; ===========================================================================
.text:00002FD8
.text:00002FD8 ; Segment type: Pure code
.text:00002FD8 ; Segment permissions: Read/Execute
.text:00002FD8 _text           segment para public 'CODE' use32
.text:00002FD8                 assume cs:_text
.text:00002FD8                 ;org 2FD8h
.text:00002FD8 ; COMDAT (pick any)
.text:00002FD8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002FD8
.text:00002FD8 ; =============== S U B R O U T I N E =======================================
.text:00002FD8
.text:00002FD8 ; Attributes: bp-based frame
.text:00002FD8
.text:00002FD8 ; public: struct ICryptoProperties * * __thiscall CMyComPtr<struct ICryptoProperties>::operator&(void)
.text:00002FD8                 public ??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ
.text:00002FD8 ??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ proc near
.text:00002FD8                                         ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+5Fp
.text:00002FD8
.text:00002FD8 var_4           = dword ptr -4
.text:00002FD8
.text:00002FD8                 push    ebp
.text:00002FD9                 mov     ebp, esp
.text:00002FDB                 push    ecx
.text:00002FDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FE3                 mov     [ebp+var_4], ecx
.text:00002FE6                 mov     eax, [ebp+var_4]
.text:00002FE9                 mov     esp, ebp
.text:00002FEB                 pop     ebp
.text:00002FEC                 retn
.text:00002FEC ??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ endp
.text:00002FEC
.text:00002FEC ; ---------------------------------------------------------------------------
.text:00002FED                 align 10h
.text:00002FED _text           ends
.text:00002FED
.text:00002FF0 ; ===========================================================================
.text:00002FF0
.text:00002FF0 ; Segment type: Pure code
.text:00002FF0 ; Segment permissions: Read/Execute
.text:00002FF0 _text           segment para public 'CODE' use32
.text:00002FF0                 assume cs:_text
.text:00002FF0                 ;org 2FF0h
.text:00002FF0 ; COMDAT (pick any)
.text:00002FF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002FF0
.text:00002FF0 ; =============== S U B R O U T I N E =======================================
.text:00002FF0
.text:00002FF0 ; Attributes: bp-based frame
.text:00002FF0
.text:00002FF0 ; public: struct ICryptoProperties * __thiscall CMyComPtr<struct ICryptoProperties>::operator->(void)const
.text:00002FF0                 public ??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ
.text:00002FF0 ??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ proc near
.text:00002FF0                                         ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+CFp
.text:00002FF0                                         ; NCrypto::N7z::CBaseCoder::Init(void)+129p
.text:00002FF0
.text:00002FF0 var_4           = dword ptr -4
.text:00002FF0
.text:00002FF0                 push    ebp
.text:00002FF1                 mov     ebp, esp
.text:00002FF3                 push    ecx
.text:00002FF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FFB                 mov     [ebp+var_4], ecx
.text:00002FFE                 mov     eax, [ebp+var_4]
.text:00003001                 mov     eax, [eax]
.text:00003003                 mov     esp, ebp
.text:00003005                 pop     ebp
.text:00003006                 retn
.text:00003006 ??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ endp
.text:00003006
.text:00003006 ; ---------------------------------------------------------------------------
.text:00003007                 align 4
.text:00003007 _text           ends
.text:00003007
.text:00003008 ; ===========================================================================
.text:00003008
.text:00003008 ; Segment type: Pure code
.text:00003008 ; Segment permissions: Read/Execute
.text:00003008 _text           segment para public 'CODE' use32
.text:00003008                 assume cs:_text
.text:00003008                 ;org 3008h
.text:00003008 ; COMDAT (pick any)
.text:00003008                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003008
.text:00003008 ; =============== S U B R O U T I N E =======================================
.text:00003008
.text:00003008 ; Attributes: bp-based frame
.text:00003008
.text:00003008 ; public: bool __thiscall CMyComPtr<struct ICryptoProperties>::operator!(void)const
.text:00003008                 public ??7?$CMyComPtr@UICryptoProperties@@@@QBE_NXZ
.text:00003008 ??7?$CMyComPtr@UICryptoProperties@@@@QBE_NXZ proc near
.text:00003008                                         ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+A1p
.text:00003008
.text:00003008 var_4           = dword ptr -4
.text:00003008
.text:00003008                 push    ebp
.text:00003009                 mov     ebp, esp
.text:0000300B                 push    ecx
.text:0000300C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003013                 mov     [ebp+var_4], ecx
.text:00003016                 mov     eax, [ebp+var_4]
.text:00003019                 xor     ecx, ecx
.text:0000301B                 cmp     dword ptr [eax], 0
.text:0000301E                 setz    cl
.text:00003021                 mov     al, cl
.text:00003023                 mov     esp, ebp
.text:00003025                 pop     ebp
.text:00003026                 retn
.text:00003026 ??7?$CMyComPtr@UICryptoProperties@@@@QBE_NXZ endp
.text:00003026
.text:00003026 ; ---------------------------------------------------------------------------
.text:00003027                 align 4
.text:00003027 _text           ends
.text:00003027
.text:00003028 ; ===========================================================================
.text:00003028
.text:00003028 ; Segment type: Pure code
.text:00003028 ; Segment permissions: Read/Execute
.text:00003028 _text           segment para public 'CODE' use32
.text:00003028                 assume cs:_text
.text:00003028                 ;org 3028h
.text:00003028 ; COMDAT (pick any)
.text:00003028                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003028
.text:00003028 ; =============== S U B R O U T I N E =======================================
.text:00003028
.text:00003028 ; Attributes: bp-based frame
.text:00003028
.text:00003028 ; _DWORD __thiscall NCrypto::N7z::CKeyInfo::CKeyInfo(NCrypto::N7z::CKeyInfo *this, const struct NCrypto::N7z::CKeyInfo *)
.text:00003028                 public ??0CKeyInfo@N7z@NCrypto@@QAE@ABV012@@Z
.text:00003028 ??0CKeyInfo@N7z@NCrypto@@QAE@ABV012@@Z proc near
.text:00003028                                         ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::Insert(uint,NCrypto::N7z::CKeyInfo const &)+5Ap
.text:00003028
.text:00003028 var_4           = dword ptr -4
.text:00003028 arg_0           = dword ptr  8
.text:00003028
.text:00003028                 push    ebp
.text:00003029                 mov     ebp, esp
.text:0000302B                 push    ecx
.text:0000302C                 push    esi
.text:0000302D                 push    edi
.text:0000302E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003035                 mov     [ebp+var_4], ecx
.text:00003038                 mov     eax, [ebp+var_4]
.text:0000303B                 mov     ecx, [ebp+arg_0]
.text:0000303E                 mov     edx, [ecx]
.text:00003040                 mov     [eax], edx
.text:00003042                 mov     eax, [ebp+var_4]
.text:00003045                 mov     ecx, [ebp+arg_0]
.text:00003048                 mov     edx, [ecx+4]
.text:0000304B                 mov     [eax+4], edx
.text:0000304E                 mov     eax, [ebp+arg_0]
.text:00003051                 add     eax, 8
.text:00003054                 mov     ecx, [ebp+var_4]
.text:00003057                 add     ecx, 8
.text:0000305A                 mov     edx, [eax]
.text:0000305C                 mov     [ecx], edx
.text:0000305E                 mov     edx, [eax+4]
.text:00003061                 mov     [ecx+4], edx
.text:00003064                 mov     edx, [eax+8]
.text:00003067                 mov     [ecx+8], edx
.text:0000306A                 mov     eax, [eax+0Ch]
.text:0000306D                 mov     [ecx+0Ch], eax
.text:00003070                 mov     ecx, [ebp+arg_0]
.text:00003073                 add     ecx, 18h
.text:00003076                 push    ecx
.text:00003077                 mov     ecx, [ebp+var_4]
.text:0000307A                 add     ecx, 18h
.text:0000307D                 call    ??0?$CBuffer@E@@QAE@ABV0@@Z ; CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)
.text:00003082                 mov     esi, [ebp+arg_0]
.text:00003085                 add     esi, 20h ; ' '
.text:00003088                 mov     edi, [ebp+var_4]
.text:0000308B                 add     edi, 20h ; ' '
.text:0000308E                 mov     ecx, 8
.text:00003093                 rep movsd
.text:00003095                 mov     eax, [ebp+var_4]
.text:00003098                 pop     edi
.text:00003099                 pop     esi
.text:0000309A                 add     esp, 4
.text:0000309D                 cmp     ebp, esp
.text:0000309F                 call    __RTC_CheckEsp
.text:000030A4                 mov     esp, ebp
.text:000030A6                 pop     ebp
.text:000030A7                 retn    4
.text:000030A7 ??0CKeyInfo@N7z@NCrypto@@QAE@ABV012@@Z endp
.text:000030A7
.text:000030A7 ; ---------------------------------------------------------------------------
.text:000030AA                 align 4
.text:000030AA _text           ends
.text:000030AA
.text:000030AC ; ===========================================================================
.text:000030AC
.text:000030AC ; Segment type: Pure code
.text:000030AC ; Segment permissions: Read/Execute
.text:000030AC _text           segment para public 'CODE' use32
.text:000030AC                 assume cs:_text
.text:000030AC                 ;org 30ACh
.text:000030AC ; COMDAT (pick any)
.text:000030AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000030AC
.text:000030AC ; =============== S U B R O U T I N E =======================================
.text:000030AC
.text:000030AC ; Attributes: bp-based frame
.text:000030AC
.text:000030AC ; public: void * __thiscall NCrypto::N7z::CKeyInfo::`scalar deleting destructor'(unsigned int)
.text:000030AC                 public ??_GCKeyInfo@N7z@NCrypto@@QAEPAXI@Z
.text:000030AC ??_GCKeyInfo@N7z@NCrypto@@QAEPAXI@Z proc near
.text:000030AC                                         ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::~CObjectVector<NCrypto::N7z::CKeyInfo>(void)+7Fp
.text:000030AC                                         ; CObjectVector<NCrypto::N7z::CKeyInfo>::DeleteBack(void)+44p
.text:000030AC
.text:000030AC var_4           = dword ptr -4
.text:000030AC arg_0           = dword ptr  8
.text:000030AC
.text:000030AC                 push    ebp
.text:000030AD                 mov     ebp, esp
.text:000030AF                 push    ecx
.text:000030B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030B7                 mov     [ebp+var_4], ecx
.text:000030BA                 mov     ecx, [ebp+var_4] ; this
.text:000030BD                 call    ??1CKeyInfo@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CKeyInfo::~CKeyInfo(void)
.text:000030C2                 mov     eax, [ebp+arg_0]
.text:000030C5                 and     eax, 1
.text:000030C8                 jz      short loc_30D6
.text:000030CA                 mov     ecx, [ebp+var_4]
.text:000030CD                 push    ecx             ; void *
.text:000030CE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000030D3                 add     esp, 4
.text:000030D6
.text:000030D6 loc_30D6:                               ; CODE XREF: NCrypto::N7z::CKeyInfo::`scalar deleting destructor'(uint)+1Cj
.text:000030D6                 mov     eax, [ebp+var_4]
.text:000030D9                 add     esp, 4
.text:000030DC                 cmp     ebp, esp
.text:000030DE                 call    __RTC_CheckEsp
.text:000030E3                 mov     esp, ebp
.text:000030E5                 pop     ebp
.text:000030E6                 retn    4
.text:000030E6 ??_GCKeyInfo@N7z@NCrypto@@QAEPAXI@Z endp
.text:000030E6
.text:000030E6 ; ---------------------------------------------------------------------------
.text:000030E9                 align 4
.text:000030E9 _text           ends
.text:000030E9
.text:000030EC ; ===========================================================================
.text:000030EC
.text:000030EC ; Segment type: Pure code
.text:000030EC ; Segment permissions: Read/Execute
.text:000030EC _text           segment para public 'CODE' use32
.text:000030EC                 assume cs:_text
.text:000030EC                 ;org 30ECh
.text:000030EC ; COMDAT (pick any)
.text:000030EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000030EC
.text:000030EC ; =============== S U B R O U T I N E =======================================
.text:000030EC
.text:000030EC ; Attributes: bp-based frame
.text:000030EC
.text:000030EC ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:000030EC                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:000030EC ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:000030EC                                         ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::CObjectVector<NCrypto::N7z::CKeyInfo>(void)+11p
.text:000030EC
.text:000030EC var_4           = dword ptr -4
.text:000030EC
.text:000030EC                 push    ebp
.text:000030ED                 mov     ebp, esp
.text:000030EF                 push    ecx
.text:000030F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030F7                 mov     [ebp+var_4], ecx
.text:000030FA                 mov     eax, [ebp+var_4]
.text:000030FD                 mov     dword ptr [eax], 0
.text:00003103                 mov     ecx, [ebp+var_4]
.text:00003106                 mov     dword ptr [ecx+4], 0
.text:0000310D                 mov     edx, [ebp+var_4]
.text:00003110                 mov     dword ptr [edx+8], 0
.text:00003117                 mov     eax, [ebp+var_4]
.text:0000311A                 mov     esp, ebp
.text:0000311C                 pop     ebp
.text:0000311D                 retn
.text:0000311D ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:0000311D
.text:0000311D ; ---------------------------------------------------------------------------
.text:0000311E                 align 10h
.text:0000311E _text           ends
.text:0000311E
.text:00003120 ; ===========================================================================
.text:00003120
.text:00003120 ; Segment type: Pure code
.text:00003120 ; Segment permissions: Read/Execute
.text:00003120 _text           segment para public 'CODE' use32
.text:00003120                 assume cs:_text
.text:00003120                 ;org 3120h
.text:00003120 ; COMDAT (pick any)
.text:00003120                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003120
.text:00003120 ; =============== S U B R O U T I N E =======================================
.text:00003120
.text:00003120 ; Attributes: bp-based frame
.text:00003120
.text:00003120 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00003120                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00003120 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00003120                                         ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::Size(void)+11p
.text:00003120                                         ; CObjectVector<NCrypto::N7z::CKeyInfo>::~CObjectVector<NCrypto::N7z::CKeyInfo>(void)+46p ...
.text:00003120
.text:00003120 var_4           = dword ptr -4
.text:00003120
.text:00003120                 push    ebp
.text:00003121                 mov     ebp, esp
.text:00003123                 push    ecx
.text:00003124                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000312B                 mov     [ebp+var_4], ecx
.text:0000312E                 mov     eax, [ebp+var_4]
.text:00003131                 mov     eax, [eax+4]
.text:00003134                 mov     esp, ebp
.text:00003136                 pop     ebp
.text:00003137                 retn
.text:00003137 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00003137
.text:00003137 _text           ends
.text:00003137
.text:00003138 ; ===========================================================================
.text:00003138
.text:00003138 ; Segment type: Pure code
.text:00003138 ; Segment permissions: Read/Execute
.text:00003138 _text           segment para public 'CODE' use32
.text:00003138                 assume cs:_text
.text:00003138                 ;org 3138h
.text:00003138 ; COMDAT (pick any)
.text:00003138                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003138
.text:00003138 ; =============== S U B R O U T I N E =======================================
.text:00003138
.text:00003138 ; Attributes: bp-based frame
.text:00003138
.text:00003138 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00003138                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00003138 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00003138                                         ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::~CObjectVector<NCrypto::N7z::CKeyInfo>(void)+9Cp
.text:00003138                                         ; __unwindfunclet$??1?$CObjectVector@VCKeyInfo@N7z@NCrypto@@@@QAE@XZ$0+3j
.text:00003138
.text:00003138 var_8           = dword ptr -8
.text:00003138 var_4           = dword ptr -4
.text:00003138
.text:00003138                 push    ebp
.text:00003139                 mov     ebp, esp
.text:0000313B                 sub     esp, 8
.text:0000313E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003145                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000314C                 mov     [ebp+var_4], ecx
.text:0000314F                 mov     eax, [ebp+var_4]
.text:00003152                 mov     ecx, [eax]
.text:00003154                 mov     [ebp+var_8], ecx
.text:00003157                 mov     edx, [ebp+var_8]
.text:0000315A                 push    edx             ; void *
.text:0000315B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003160                 add     esp, 4
.text:00003163                 add     esp, 8
.text:00003166                 cmp     ebp, esp
.text:00003168                 call    __RTC_CheckEsp
.text:0000316D                 mov     esp, ebp
.text:0000316F                 pop     ebp
.text:00003170                 retn
.text:00003170 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00003170
.text:00003170 ; ---------------------------------------------------------------------------
.text:00003171                 align 4
.text:00003171 _text           ends
.text:00003171
.text:00003174 ; ===========================================================================
.text:00003174
.text:00003174 ; Segment type: Pure code
.text:00003174 ; Segment permissions: Read/Execute
.text:00003174 _text           segment para public 'CODE' use32
.text:00003174                 assume cs:_text
.text:00003174                 ;org 3174h
.text:00003174 ; COMDAT (pick any)
.text:00003174                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003174
.text:00003174 ; =============== S U B R O U T I N E =======================================
.text:00003174
.text:00003174 ; Attributes: bp-based frame
.text:00003174
.text:00003174 ; public: void __thiscall CRecordVector<void *>::DeleteBack(void)
.text:00003174                 public ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ
.text:00003174 ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00003174                                         ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::DeleteBack(void)+58p
.text:00003174
.text:00003174 var_4           = dword ptr -4
.text:00003174
.text:00003174                 push    ebp
.text:00003175                 mov     ebp, esp
.text:00003177                 push    ecx
.text:00003178                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000317F                 mov     [ebp+var_4], ecx
.text:00003182                 mov     eax, [ebp+var_4]
.text:00003185                 mov     ecx, [eax+4]
.text:00003188                 sub     ecx, 1
.text:0000318B                 mov     edx, [ebp+var_4]
.text:0000318E                 mov     [edx+4], ecx
.text:00003191                 mov     esp, ebp
.text:00003193                 pop     ebp
.text:00003194                 retn
.text:00003194 ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ endp
.text:00003194
.text:00003194 ; ---------------------------------------------------------------------------
.text:00003195                 align 4
.text:00003195 _text           ends
.text:00003195
.text:00003198 ; ===========================================================================
.text:00003198
.text:00003198 ; Segment type: Pure code
.text:00003198 ; Segment permissions: Read/Execute
.text:00003198 _text           segment para public 'CODE' use32
.text:00003198                 assume cs:_text
.text:00003198                 ;org 3198h
.text:00003198 ; COMDAT (pick any)
.text:00003198                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003198
.text:00003198 ; =============== S U B R O U T I N E =======================================
.text:00003198
.text:00003198 ; Attributes: bp-based frame
.text:00003198
.text:00003198 ; public: void __thiscall CRecordVector<void *>::Insert(unsigned int, void * const)
.text:00003198                 public ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
.text:00003198 ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z proc near
.text:00003198                                         ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::Insert(uint,NCrypto::N7z::CKeyInfo const &)+83p
.text:00003198
.text:00003198 var_4           = dword ptr -4
.text:00003198 arg_0           = dword ptr  8
.text:00003198 arg_4           = dword ptr  0Ch
.text:00003198
.text:00003198                 push    ebp
.text:00003199                 mov     ebp, esp
.text:0000319B                 push    ecx
.text:0000319C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031A3                 mov     [ebp+var_4], ecx
.text:000031A6                 mov     ecx, [ebp+var_4]
.text:000031A9                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:000031AE                 mov     eax, [ebp+arg_0]
.text:000031B1                 push    eax
.text:000031B2                 mov     ecx, [ebp+arg_0]
.text:000031B5                 add     ecx, 1
.text:000031B8                 push    ecx
.text:000031B9                 mov     ecx, [ebp+var_4]
.text:000031BC                 call    ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems(uint,uint)
.text:000031C1                 mov     edx, [ebp+var_4]
.text:000031C4                 mov     eax, [edx]
.text:000031C6                 mov     ecx, [ebp+arg_0]
.text:000031C9                 mov     edx, [ebp+arg_4]
.text:000031CC                 mov     [eax+ecx*4], edx
.text:000031CF                 mov     eax, [ebp+var_4]
.text:000031D2                 mov     ecx, [eax+4]
.text:000031D5                 add     ecx, 1
.text:000031D8                 mov     edx, [ebp+var_4]
.text:000031DB                 mov     [edx+4], ecx
.text:000031DE                 add     esp, 4
.text:000031E1                 cmp     ebp, esp
.text:000031E3                 call    __RTC_CheckEsp
.text:000031E8                 mov     esp, ebp
.text:000031EA                 pop     ebp
.text:000031EB                 retn    8
.text:000031EB ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z endp
.text:000031EB
.text:000031EB ; ---------------------------------------------------------------------------
.text:000031EE                 align 10h
.text:000031EE _text           ends
.text:000031EE
.text:000031F0 ; ===========================================================================
.text:000031F0
.text:000031F0 ; Segment type: Pure code
.text:000031F0 ; Segment permissions: Read/Execute
.text:000031F0 _text           segment para public 'CODE' use32
.text:000031F0                 assume cs:_text
.text:000031F0                 ;org 31F0h
.text:000031F0 ; COMDAT (pick any)
.text:000031F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031F0
.text:000031F0 ; =============== S U B R O U T I N E =======================================
.text:000031F0
.text:000031F0 ; Attributes: bp-based frame
.text:000031F0
.text:000031F0 ; public: void __thiscall CRecordVector<void *>::MoveToFront(unsigned int)
.text:000031F0                 public ?MoveToFront@?$CRecordVector@PAX@@QAEXI@Z
.text:000031F0 ?MoveToFront@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:000031F0                                         ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::MoveToFront(uint)+15p
.text:000031F0
.text:000031F0 var_8           = dword ptr -8
.text:000031F0 var_4           = dword ptr -4
.text:000031F0 arg_0           = dword ptr  8
.text:000031F0
.text:000031F0                 push    ebp
.text:000031F1                 mov     ebp, esp
.text:000031F3                 sub     esp, 8
.text:000031F6                 push    esi
.text:000031F7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000031FE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003205                 mov     [ebp+var_4], ecx
.text:00003208                 cmp     [ebp+arg_0], 0
.text:0000320C                 jz      short loc_324E
.text:0000320E                 mov     eax, [ebp+var_4]
.text:00003211                 mov     ecx, [eax]
.text:00003213                 mov     edx, [ebp+arg_0]
.text:00003216                 mov     eax, [ecx+edx*4]
.text:00003219                 mov     [ebp+var_8], eax
.text:0000321C                 mov     ecx, [ebp+arg_0]
.text:0000321F                 shl     ecx, 2
.text:00003222                 mov     esi, esp
.text:00003224                 push    ecx             ; Size
.text:00003225                 mov     edx, [ebp+var_4]
.text:00003228                 mov     eax, [edx]
.text:0000322A                 push    eax             ; Src
.text:0000322B                 mov     ecx, [ebp+var_4]
.text:0000322E                 mov     edx, [ecx]
.text:00003230                 add     edx, 4
.text:00003233                 push    edx             ; Dst
.text:00003234                 call    dword ptr ds:__imp__memmove
.text:0000323A                 add     esp, 0Ch
.text:0000323D                 cmp     esi, esp
.text:0000323F                 call    __RTC_CheckEsp
.text:00003244                 mov     eax, [ebp+var_4]
.text:00003247                 mov     ecx, [eax]
.text:00003249                 mov     edx, [ebp+var_8]
.text:0000324C                 mov     [ecx], edx
.text:0000324E
.text:0000324E loc_324E:                               ; CODE XREF: CRecordVector<void *>::MoveToFront(uint)+1Cj
.text:0000324E                 pop     esi
.text:0000324F                 add     esp, 8
.text:00003252                 cmp     ebp, esp
.text:00003254                 call    __RTC_CheckEsp
.text:00003259                 mov     esp, ebp
.text:0000325B                 pop     ebp
.text:0000325C                 retn    4
.text:0000325C ?MoveToFront@?$CRecordVector@PAX@@QAEXI@Z endp
.text:0000325C
.text:0000325C ; ---------------------------------------------------------------------------
.text:0000325F                 align 10h
.text:0000325F _text           ends
.text:0000325F
.text:00003260 ; ===========================================================================
.text:00003260
.text:00003260 ; Segment type: Pure code
.text:00003260 ; Segment permissions: Read/Execute
.text:00003260 _text           segment para public 'CODE' use32
.text:00003260                 assume cs:_text
.text:00003260                 ;org 3260h
.text:00003260 ; COMDAT (pick any)
.text:00003260                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003260
.text:00003260 ; =============== S U B R O U T I N E =======================================
.text:00003260
.text:00003260 ; Attributes: bp-based frame
.text:00003260
.text:00003260 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00003260                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00003260 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00003260                                         ; CODE XREF: CObjectVector<NCrypto::N7z::CKeyInfo>::operator[](uint)+15p
.text:00003260                                         ; CObjectVector<NCrypto::N7z::CKeyInfo>::~CObjectVector<NCrypto::N7z::CKeyInfo>(void)+64p ...
.text:00003260
.text:00003260 var_4           = dword ptr -4
.text:00003260 arg_0           = dword ptr  8
.text:00003260
.text:00003260                 push    ebp
.text:00003261                 mov     ebp, esp
.text:00003263                 push    ecx
.text:00003264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000326B                 mov     [ebp+var_4], ecx
.text:0000326E                 mov     eax, [ebp+var_4]
.text:00003271                 mov     ecx, [eax]
.text:00003273                 mov     edx, [ebp+arg_0]
.text:00003276                 lea     eax, [ecx+edx*4]
.text:00003279                 mov     esp, ebp
.text:0000327B                 pop     ebp
.text:0000327C                 retn    4
.text:0000327C ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:0000327C
.text:0000327C ; ---------------------------------------------------------------------------
.text:0000327F                 align 10h
.text:0000327F _text           ends
.text:0000327F
.text:00003280 ; ===========================================================================
.text:00003280
.text:00003280 ; Segment type: Pure code
.text:00003280 ; Segment permissions: Read/Execute
.text:00003280 _text           segment para public 'CODE' use32
.text:00003280                 assume cs:_text
.text:00003280                 ;org 3280h
.text:00003280 ; COMDAT (pick any)
.text:00003280                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003280
.text:00003280 ; =============== S U B R O U T I N E =======================================
.text:00003280
.text:00003280 ; Attributes: bp-based frame
.text:00003280
.text:00003280 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(class CBuffer<unsigned char> const &)
.text:00003280                 public ??0?$CBuffer@E@@QAE@ABV0@@Z
.text:00003280 ??0?$CBuffer@E@@QAE@ABV0@@Z proc near   ; CODE XREF: NCrypto::N7z::CKeyInfo::CKeyInfo(NCrypto::N7z::CKeyInfo const &)+55p
.text:00003280
.text:00003280 var_C           = dword ptr -0Ch
.text:00003280 Size            = dword ptr -8
.text:00003280 var_4           = dword ptr -4
.text:00003280 arg_0           = dword ptr  8
.text:00003280
.text:00003280                 push    ebp
.text:00003281                 mov     ebp, esp
.text:00003283                 sub     esp, 0Ch
.text:00003286                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000328D                 mov     [ebp+Size], 0CCCCCCCCh
.text:00003294                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000329B                 mov     [ebp+var_4], ecx
.text:0000329E                 mov     eax, [ebp+var_4]
.text:000032A1                 mov     dword ptr [eax], 0
.text:000032A7                 mov     ecx, [ebp+var_4]
.text:000032AA                 mov     dword ptr [ecx+4], 0
.text:000032B1                 mov     edx, [ebp+arg_0]
.text:000032B4                 mov     eax, [edx+4]
.text:000032B7                 mov     [ebp+Size], eax
.text:000032BA                 cmp     [ebp+Size], 0
.text:000032BE                 jz      short loc_32F8
.text:000032C0                 mov     ecx, [ebp+Size]
.text:000032C3                 push    ecx             ; unsigned int
.text:000032C4                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000032C9                 add     esp, 4
.text:000032CC                 mov     [ebp+var_C], eax
.text:000032CF                 mov     edx, [ebp+var_4]
.text:000032D2                 mov     eax, [ebp+var_C]
.text:000032D5                 mov     [edx], eax
.text:000032D7                 mov     ecx, [ebp+Size]
.text:000032DA                 push    ecx             ; Size
.text:000032DB                 mov     edx, [ebp+arg_0]
.text:000032DE                 mov     eax, [edx]
.text:000032E0                 push    eax             ; Src
.text:000032E1                 mov     ecx, [ebp+var_4]
.text:000032E4                 mov     edx, [ecx]
.text:000032E6                 push    edx             ; Dst
.text:000032E7                 call    _memcpy
.text:000032EC                 add     esp, 0Ch
.text:000032EF                 mov     eax, [ebp+var_4]
.text:000032F2                 mov     ecx, [ebp+Size]
.text:000032F5                 mov     [eax+4], ecx
.text:000032F8
.text:000032F8 loc_32F8:                               ; CODE XREF: CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)+3Ej
.text:000032F8                 mov     eax, [ebp+var_4]
.text:000032FB                 add     esp, 0Ch
.text:000032FE                 cmp     ebp, esp
.text:00003300                 call    __RTC_CheckEsp
.text:00003305                 mov     esp, ebp
.text:00003307                 pop     ebp
.text:00003308                 retn    4
.text:00003308 ??0?$CBuffer@E@@QAE@ABV0@@Z endp
.text:00003308
.text:00003308 ; ---------------------------------------------------------------------------
.text:0000330B                 align 4
.text:0000330B _text           ends
.text:0000330B
.text:0000330C ; ===========================================================================
.text:0000330C
.text:0000330C ; Segment type: Pure code
.text:0000330C ; Segment permissions: Read/Execute
.text:0000330C _text           segment para public 'CODE' use32
.text:0000330C                 assume cs:_text
.text:0000330C                 ;org 330Ch
.text:0000330C ; COMDAT (pick any)
.text:0000330C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000330C
.text:0000330C ; =============== S U B R O U T I N E =======================================
.text:0000330C
.text:0000330C ; Attributes: bp-based frame
.text:0000330C
.text:0000330C ; public: void __thiscall CBuffer<unsigned char>::Alloc(unsigned int)
.text:0000330C                 public ?Alloc@?$CBuffer@E@@QAEXI@Z
.text:0000330C ?Alloc@?$CBuffer@E@@QAEXI@Z proc near   ; CODE XREF: CBuffer<uchar>::CopyFrom(uchar const *,uint)+15p
.text:0000330C
.text:0000330C var_8           = dword ptr -8
.text:0000330C var_4           = dword ptr -4
.text:0000330C arg_0           = dword ptr  8
.text:0000330C
.text:0000330C                 push    ebp
.text:0000330D                 mov     ebp, esp
.text:0000330F                 sub     esp, 8
.text:00003312                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003319                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003320                 mov     [ebp+var_4], ecx
.text:00003323                 mov     eax, [ebp+var_4]
.text:00003326                 mov     ecx, [ebp+arg_0]
.text:00003329                 cmp     ecx, [eax+4]
.text:0000332C                 jz      short loc_335C
.text:0000332E                 mov     ecx, [ebp+var_4]
.text:00003331                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:00003336                 cmp     [ebp+arg_0], 0
.text:0000333A                 jz      short loc_335C
.text:0000333C                 mov     edx, [ebp+arg_0]
.text:0000333F                 push    edx             ; unsigned int
.text:00003340                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003345                 add     esp, 4
.text:00003348                 mov     [ebp+var_8], eax
.text:0000334B                 mov     eax, [ebp+var_4]
.text:0000334E                 mov     ecx, [ebp+var_8]
.text:00003351                 mov     [eax], ecx
.text:00003353                 mov     edx, [ebp+var_4]
.text:00003356                 mov     eax, [ebp+arg_0]
.text:00003359                 mov     [edx+4], eax
.text:0000335C
.text:0000335C loc_335C:                               ; CODE XREF: CBuffer<uchar>::Alloc(uint)+20j
.text:0000335C                                         ; CBuffer<uchar>::Alloc(uint)+2Ej
.text:0000335C                 add     esp, 8
.text:0000335F                 cmp     ebp, esp
.text:00003361                 call    __RTC_CheckEsp
.text:00003366                 mov     esp, ebp
.text:00003368                 pop     ebp
.text:00003369                 retn    4
.text:00003369 ?Alloc@?$CBuffer@E@@QAEXI@Z endp
.text:00003369
.text:00003369 _text           ends
.text:00003369
.text:0000336C ; ===========================================================================
.text:0000336C
.text:0000336C ; Segment type: Pure code
.text:0000336C ; Segment permissions: Read/Execute
.text:0000336C _text           segment para public 'CODE' use32
.text:0000336C                 assume cs:_text
.text:0000336C                 ;org 336Ch
.text:0000336C ; COMDAT (pick any)
.text:0000336C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000336C
.text:0000336C ; =============== S U B R O U T I N E =======================================
.text:0000336C
.text:0000336C ; Attributes: bp-based frame
.text:0000336C
.text:0000336C ; private: void __thiscall CRecordVector<void *>::MoveItems(unsigned int, unsigned int)
.text:0000336C                 public ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
.text:0000336C ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z proc near
.text:0000336C                                         ; CODE XREF: CRecordVector<void *>::Insert(uint,void * const)+24p
.text:0000336C
.text:0000336C var_4           = dword ptr -4
.text:0000336C arg_0           = dword ptr  8
.text:0000336C arg_4           = dword ptr  0Ch
.text:0000336C
.text:0000336C                 push    ebp
.text:0000336D                 mov     ebp, esp
.text:0000336F                 push    ecx
.text:00003370                 push    esi
.text:00003371                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003378                 mov     [ebp+var_4], ecx
.text:0000337B                 mov     eax, [ebp+var_4]
.text:0000337E                 mov     ecx, [eax+4]
.text:00003381                 sub     ecx, [ebp+arg_4]
.text:00003384                 shl     ecx, 2
.text:00003387                 mov     esi, esp
.text:00003389                 push    ecx             ; Size
.text:0000338A                 mov     edx, [ebp+var_4]
.text:0000338D                 mov     eax, [edx]
.text:0000338F                 mov     ecx, [ebp+arg_4]
.text:00003392                 lea     edx, [eax+ecx*4]
.text:00003395                 push    edx             ; Src
.text:00003396                 mov     eax, [ebp+var_4]
.text:00003399                 mov     ecx, [eax]
.text:0000339B                 mov     edx, [ebp+arg_0]
.text:0000339E                 lea     eax, [ecx+edx*4]
.text:000033A1                 push    eax             ; Dst
.text:000033A2                 call    dword ptr ds:__imp__memmove
.text:000033A8                 add     esp, 0Ch
.text:000033AB                 cmp     esi, esp
.text:000033AD                 call    __RTC_CheckEsp
.text:000033B2                 pop     esi
.text:000033B3                 add     esp, 4
.text:000033B6                 cmp     ebp, esp
.text:000033B8                 call    __RTC_CheckEsp
.text:000033BD                 mov     esp, ebp
.text:000033BF                 pop     ebp
.text:000033C0                 retn    8
.text:000033C0 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z endp
.text:000033C0
.text:000033C0 ; ---------------------------------------------------------------------------
.text:000033C3                 align 4
.text:000033C3 _text           ends
.text:000033C3
.text:000033C4 ; ===========================================================================
.text:000033C4
.text:000033C4 ; Segment type: Pure code
.text:000033C4 ; Segment permissions: Read/Execute
.text:000033C4 _text           segment para public 'CODE' use32
.text:000033C4                 assume cs:_text
.text:000033C4                 ;org 33C4h
.text:000033C4 ; COMDAT (pick any)
.text:000033C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000033C4
.text:000033C4 ; =============== S U B R O U T I N E =======================================
.text:000033C4
.text:000033C4 ; Attributes: bp-based frame
.text:000033C4
.text:000033C4 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:000033C4                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:000033C4 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:000033C4                                         ; CODE XREF: CRecordVector<void *>::Insert(uint,void * const)+11p
.text:000033C4
.text:000033C4 var_14          = dword ptr -14h
.text:000033C4 var_10          = dword ptr -10h
.text:000033C4 Dst             = dword ptr -0Ch
.text:000033C4 var_8           = dword ptr -8
.text:000033C4 var_4           = dword ptr -4
.text:000033C4
.text:000033C4                 push    ebp
.text:000033C5                 mov     ebp, esp
.text:000033C7                 sub     esp, 14h
.text:000033CA                 mov     eax, 0CCCCCCCCh
.text:000033CF                 mov     [ebp+var_14], eax
.text:000033D2                 mov     [ebp+var_10], eax
.text:000033D5                 mov     [ebp+Dst], eax
.text:000033D8                 mov     [ebp+var_8], eax
.text:000033DB                 mov     [ebp+var_4], eax
.text:000033DE                 mov     [ebp+var_4], ecx
.text:000033E1                 mov     eax, [ebp+var_4]
.text:000033E4                 mov     ecx, [ebp+var_4]
.text:000033E7                 mov     edx, [eax+4]
.text:000033EA                 cmp     edx, [ecx+8]
.text:000033ED                 jnz     loc_3478
.text:000033F3                 mov     eax, [ebp+var_4]
.text:000033F6                 mov     ecx, [eax+8]
.text:000033F9                 shr     ecx, 2
.text:000033FC                 mov     edx, [ebp+var_4]
.text:000033FF                 mov     eax, [edx+8]
.text:00003402                 lea     ecx, [eax+ecx+1]
.text:00003406                 mov     [ebp+var_8], ecx
.text:00003409                 xor     ecx, ecx
.text:0000340B                 mov     eax, [ebp+var_8]
.text:0000340E                 mov     edx, 4
.text:00003413                 mul     edx
.text:00003415                 seto    cl
.text:00003418                 neg     ecx
.text:0000341A                 or      ecx, eax
.text:0000341C                 push    ecx             ; unsigned int
.text:0000341D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003422                 add     esp, 4
.text:00003425                 mov     [ebp+var_10], eax
.text:00003428                 mov     eax, [ebp+var_10]
.text:0000342B                 mov     [ebp+Dst], eax
.text:0000342E                 mov     ecx, [ebp+var_4]
.text:00003431                 cmp     dword ptr [ecx+4], 0
.text:00003435                 jz      short loc_3453
.text:00003437                 mov     edx, [ebp+var_4]
.text:0000343A                 mov     eax, [edx+4]
.text:0000343D                 shl     eax, 2
.text:00003440                 push    eax             ; Size
.text:00003441                 mov     ecx, [ebp+var_4]
.text:00003444                 mov     edx, [ecx]
.text:00003446                 push    edx             ; Src
.text:00003447                 mov     eax, [ebp+Dst]
.text:0000344A                 push    eax             ; Dst
.text:0000344B                 call    _memcpy
.text:00003450                 add     esp, 0Ch
.text:00003453
.text:00003453 loc_3453:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00003453                 mov     ecx, [ebp+var_4]
.text:00003456                 mov     edx, [ecx]
.text:00003458                 mov     [ebp+var_14], edx
.text:0000345B                 mov     eax, [ebp+var_14]
.text:0000345E                 push    eax             ; void *
.text:0000345F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003464                 add     esp, 4
.text:00003467                 mov     ecx, [ebp+var_4]
.text:0000346A                 mov     edx, [ebp+Dst]
.text:0000346D                 mov     [ecx], edx
.text:0000346F                 mov     eax, [ebp+var_4]
.text:00003472                 mov     ecx, [ebp+var_8]
.text:00003475                 mov     [eax+8], ecx
.text:00003478
.text:00003478 loc_3478:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00003478                 add     esp, 14h
.text:0000347B                 cmp     ebp, esp
.text:0000347D                 call    __RTC_CheckEsp
.text:00003482                 mov     esp, ebp
.text:00003484                 pop     ebp
.text:00003485                 retn
.text:00003485 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00003485
.text:00003485 ; ---------------------------------------------------------------------------
.text:00003486                 align 4
.text:00003486 _text           ends
.text:00003486
.text:00003488 ; ===========================================================================
.text:00003488
.text:00003488 ; Segment type: Pure code
.text:00003488 ; Segment permissions: Read/Execute
.text:00003488 _text           segment para public 'CODE' use32
.text:00003488                 assume cs:_text
.text:00003488                 ;org 3488h
.text:00003488 ; COMDAT (pick any)
.text:00003488                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003488
.text:00003488 ; =============== S U B R O U T I N E =======================================
.text:00003488
.text:00003488 ; Attributes: bp-based frame
.text:00003488
.text:00003488 ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:00003488                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:00003488 ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: CBuffer<uchar>::Alloc(uint)+25p
.text:00003488
.text:00003488 var_8           = dword ptr -8
.text:00003488 var_4           = dword ptr -4
.text:00003488
.text:00003488                 push    ebp
.text:00003489                 mov     ebp, esp
.text:0000348B                 sub     esp, 8
.text:0000348E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003495                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000349C                 mov     [ebp+var_4], ecx
.text:0000349F                 mov     eax, [ebp+var_4]
.text:000034A2                 cmp     dword ptr [eax], 0
.text:000034A5                 jz      short loc_34C4
.text:000034A7                 mov     ecx, [ebp+var_4]
.text:000034AA                 mov     edx, [ecx]
.text:000034AC                 mov     [ebp+var_8], edx
.text:000034AF                 mov     eax, [ebp+var_8]
.text:000034B2                 push    eax             ; void *
.text:000034B3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000034B8                 add     esp, 4
.text:000034BB                 mov     ecx, [ebp+var_4]
.text:000034BE                 mov     dword ptr [ecx], 0
.text:000034C4
.text:000034C4 loc_34C4:                               ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:000034C4                 mov     edx, [ebp+var_4]
.text:000034C7                 mov     dword ptr [edx+4], 0
.text:000034CE                 add     esp, 8
.text:000034D1                 cmp     ebp, esp
.text:000034D3                 call    __RTC_CheckEsp
.text:000034D8                 mov     esp, ebp
.text:000034DA                 pop     ebp
.text:000034DB                 retn
.text:000034DB ?Free@?$CBuffer@E@@QAEXXZ endp
.text:000034DB
.text:000034DB _text           ends
.text:000034DB
.text:000034DC ; ===========================================================================
.text:000034DC
.text:000034DC ; Segment type: Pure code
.text:000034DC ; Segment permissions: Read/Execute
.text:000034DC _text           segment para public 'CODE' use32
.text:000034DC                 assume cs:_text
.text:000034DC                 ;org 34DCh
.text:000034DC ; COMDAT (pick any)
.text:000034DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000034DC
.text:000034DC ; =============== S U B R O U T I N E =======================================
.text:000034DC
.text:000034DC ; Attributes: bp-based frame
.text:000034DC
.text:000034DC ; bool __stdcall operator==<unsigned char>(class CBuffer<unsigned char> const &, class CBuffer<unsigned char> const &)
.text:000034DC                 public ??$?8E@@YG_NABV?$CBuffer@E@@0@Z
.text:000034DC ??$?8E@@YG_NABV?$CBuffer@E@@0@Z proc near
.text:000034DC                                         ; CODE XREF: NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &)+7Ep
.text:000034DC
.text:000034DC Size            = dword ptr -4
.text:000034DC arg_0           = dword ptr  8
.text:000034DC arg_4           = dword ptr  0Ch
.text:000034DC
.text:000034DC                 push    ebp
.text:000034DD                 mov     ebp, esp
.text:000034DF                 push    ecx
.text:000034E0                 mov     [ebp+Size], 0CCCCCCCCh
.text:000034E7                 mov     ecx, [ebp+arg_0]
.text:000034EA                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000034EF                 mov     [ebp+Size], eax
.text:000034F2                 mov     ecx, [ebp+arg_4]
.text:000034F5                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000034FA                 cmp     [ebp+Size], eax
.text:000034FD                 jz      short loc_3503
.text:000034FF                 xor     al, al
.text:00003501                 jmp     short loc_3532
.text:00003503 ; ---------------------------------------------------------------------------
.text:00003503
.text:00003503 loc_3503:                               ; CODE XREF: operator==<uchar>(CBuffer<uchar> const &,CBuffer<uchar> const &)+21j
.text:00003503                 cmp     [ebp+Size], 0
.text:00003507                 jnz     short loc_350D
.text:00003509                 mov     al, 1
.text:0000350B                 jmp     short loc_3532
.text:0000350D ; ---------------------------------------------------------------------------
.text:0000350D
.text:0000350D loc_350D:                               ; CODE XREF: operator==<uchar>(CBuffer<uchar> const &,CBuffer<uchar> const &)+2Bj
.text:0000350D                 mov     eax, [ebp+Size]
.text:00003510                 push    eax             ; Size
.text:00003511                 mov     ecx, [ebp+arg_4]
.text:00003514                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00003519                 push    eax             ; Buf2
.text:0000351A                 mov     ecx, [ebp+arg_0]
.text:0000351D                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00003522                 push    eax             ; Buf1
.text:00003523                 call    _memcmp
.text:00003528                 add     esp, 0Ch
.text:0000352B                 neg     eax
.text:0000352D                 sbb     eax, eax
.text:0000352F                 add     eax, 1
.text:00003532
.text:00003532 loc_3532:                               ; CODE XREF: operator==<uchar>(CBuffer<uchar> const &,CBuffer<uchar> const &)+25j
.text:00003532                                         ; operator==<uchar>(CBuffer<uchar> const &,CBuffer<uchar> const &)+2Fj
.text:00003532                 add     esp, 4
.text:00003535                 cmp     ebp, esp
.text:00003537                 call    __RTC_CheckEsp
.text:0000353C                 mov     esp, ebp
.text:0000353E                 pop     ebp
.text:0000353F                 retn    8
.text:0000353F ??$?8E@@YG_NABV?$CBuffer@E@@0@Z endp
.text:0000353F
.text:0000353F ; ---------------------------------------------------------------------------
.text:00003542                 align 4
.text:00003542 _text           ends
.text:00003542
.text:00003544 ; ===========================================================================
.text:00003544
.text:00003544 ; Segment type: Pure code
.text:00003544 ; Segment permissions: Read/Execute
.text:00003544 _text           segment para public 'CODE' use32
.text:00003544                 assume cs:_text
.text:00003544                 ;org 3544h
.text:00003544 ; COMDAT (pick any)
.text:00003544                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003544
.text:00003544 ; =============== S U B R O U T I N E =======================================
.text:00003544
.text:00003544 ; Attributes: bp-based frame
.text:00003544
.text:00003544 ; public: long __thiscall CMyComPtr<struct ICompressFilter>::QueryInterface<struct ICryptoProperties>(struct _GUID const &, struct ICryptoProperties * *)const
.text:00003544                 public ??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z
.text:00003544 ??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z proc near
.text:00003544                                         ; CODE XREF: NCrypto::N7z::CBaseCoder::Init(void)+76p
.text:00003544
.text:00003544 var_4           = dword ptr -4
.text:00003544 arg_0           = dword ptr  8
.text:00003544 arg_4           = dword ptr  0Ch
.text:00003544
.text:00003544                 push    ebp
.text:00003545                 mov     ebp, esp
.text:00003547                 push    ecx
.text:00003548                 push    esi
.text:00003549                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003550                 mov     [ebp+var_4], ecx
.text:00003553                 mov     esi, esp
.text:00003555                 mov     eax, [ebp+arg_4]
.text:00003558                 push    eax
.text:00003559                 mov     ecx, [ebp+arg_0]
.text:0000355C                 push    ecx
.text:0000355D                 mov     edx, [ebp+var_4]
.text:00003560                 mov     eax, [edx]
.text:00003562                 mov     ecx, [ebp+var_4]
.text:00003565                 mov     edx, [ecx]
.text:00003567                 mov     eax, [eax]
.text:00003569                 push    edx
.text:0000356A                 mov     ecx, [eax]
.text:0000356C                 call    ecx
.text:0000356E                 cmp     esi, esp
.text:00003570                 call    __RTC_CheckEsp
.text:00003575                 pop     esi
.text:00003576                 add     esp, 4
.text:00003579                 cmp     ebp, esp
.text:0000357B                 call    __RTC_CheckEsp
.text:00003580                 mov     esp, ebp
.text:00003582                 pop     ebp
.text:00003583                 retn    8
.text:00003583 ??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z endp
.text:00003583
.text:00003583 ; ---------------------------------------------------------------------------
.text:00003586                 align 4
.text:00003586 _text           ends
.text:00003586
.text:00003588 ; ===========================================================================
.text:00003588
.text:00003588 ; Segment type: Pure code
.text:00003588 ; Segment permissions: Read/Execute
.text:00003588 _text           segment para public 'CODE' use32
.text:00003588                 assume cs:_text
.text:00003588                 ;org 3588h
.text:00003588 ; COMDAT (pick any)
.text:00003588                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003588
.text:00003588 ; =============== S U B R O U T I N E =======================================
.text:00003588
.text:00003588 ; Attributes: bp-based frame
.text:00003588
.text:00003588 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:00003588                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:00003588 ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: operator==<uchar>(CBuffer<uchar> const &,CBuffer<uchar> const &)+38p
.text:00003588                                         ; operator==<uchar>(CBuffer<uchar> const &,CBuffer<uchar> const &)+41p
.text:00003588
.text:00003588 var_4           = dword ptr -4
.text:00003588
.text:00003588                 push    ebp
.text:00003589                 mov     ebp, esp
.text:0000358B                 push    ecx
.text:0000358C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003593                 mov     [ebp+var_4], ecx
.text:00003596                 mov     eax, [ebp+var_4]
.text:00003599                 mov     eax, [eax]
.text:0000359B                 mov     esp, ebp
.text:0000359D                 pop     ebp
.text:0000359E                 retn
.text:0000359E ??B?$CBuffer@E@@QBEPBEXZ endp
.text:0000359E
.text:0000359E ; ---------------------------------------------------------------------------
.text:0000359F                 align 10h
.text:0000359F _text           ends
.text:0000359F
.text:000035A0 ; ===========================================================================
.text:000035A0
.text:000035A0 ; Segment type: Pure code
.text:000035A0 ; Segment permissions: Read/Execute
.text:000035A0 _text           segment para public 'CODE' use32
.text:000035A0                 assume cs:_text
.text:000035A0                 ;org 35A0h
.text:000035A0 ; COMDAT (pick any)
.text:000035A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035A0
.text:000035A0 ; =============== S U B R O U T I N E =======================================
.text:000035A0
.text:000035A0
.text:000035A0 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::N7z::CDecoder::Release`adjustor{116}' (void)
.text:000035A0                 public ?Release@CDecoder@N7z@NCrypto@@WHE@AGKXZ
.text:000035A0 ?Release@CDecoder@N7z@NCrypto@@WHE@AGKXZ proc near
.text:000035A0                                         ; DATA XREF: .rdata:000024FCo
.text:000035A0
.text:000035A0 arg_0           = dword ptr  4
.text:000035A0
.text:000035A0                 sub     [esp+arg_0], 74h ; 't'
.text:000035A5                 jmp     ?Release@CDecoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CDecoder::Release(void)
.text:000035A5 ?Release@CDecoder@N7z@NCrypto@@WHE@AGKXZ endp
.text:000035A5
.text:000035A5 ; ---------------------------------------------------------------------------
.text:000035AA                 align 4
.text:000035AA _text           ends
.text:000035AA
.text:000035AC ; ===========================================================================
.text:000035AC
.text:000035AC ; Segment type: Pure code
.text:000035AC ; Segment permissions: Read/Execute
.text:000035AC _text           segment para public 'CODE' use32
.text:000035AC                 assume cs:_text
.text:000035AC                 ;org 35ACh
.text:000035AC ; COMDAT (pick any)
.text:000035AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035AC
.text:000035AC ; =============== S U B R O U T I N E =======================================
.text:000035AC
.text:000035AC
.text:000035AC ; [thunk]:public: virtual long __stdcall NCrypto::N7z::CDecoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000035AC                 public ?QueryInterface@CDecoder@N7z@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.text:000035AC ?QueryInterface@CDecoder@N7z@NCrypto@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000035AC                                         ; DATA XREF: .rdata:const NCrypto::N7z::CDecoder::`vftable'{for `ICryptoSetPassword'}o
.text:000035AC
.text:000035AC arg_0           = dword ptr  4
.text:000035AC
.text:000035AC                 sub     [esp+arg_0], 4
.text:000035B1                 jmp     ?QueryInterface@CDecoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)
.text:000035B1 ?QueryInterface@CDecoder@N7z@NCrypto@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000035B1
.text:000035B1 ; ---------------------------------------------------------------------------
.text:000035B6                 align 4
.text:000035B6 _text           ends
.text:000035B6
.text:000035B8 ; ===========================================================================
.text:000035B8
.text:000035B8 ; Segment type: Pure code
.text:000035B8 ; Segment permissions: Read/Execute
.text:000035B8 _text           segment para public 'CODE' use32
.text:000035B8                 assume cs:_text
.text:000035B8                 ;org 35B8h
.text:000035B8 ; COMDAT (pick any)
.text:000035B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035B8
.text:000035B8 ; =============== S U B R O U T I N E =======================================
.text:000035B8
.text:000035B8
.text:000035B8 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)
.text:000035B8                 public ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ
.text:000035B8 ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ proc near
.text:000035B8                                         ; DATA XREF: .rdata:00001E20o
.text:000035B8                                         ; .rdata:000028C4o
.text:000035B8
.text:000035B8 arg_0           = dword ptr  4
.text:000035B8
.text:000035B8                 sub     [esp+arg_0], 4
.text:000035BD                 jmp     ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.text:000035BD ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ endp
.text:000035BD
.text:000035BD ; ---------------------------------------------------------------------------
.text:000035C2                 align 4
.text:000035C2 _text           ends
.text:000035C2
.text:000035C4 ; ===========================================================================
.text:000035C4
.text:000035C4 ; Segment type: Pure code
.text:000035C4 ; Segment permissions: Read/Execute
.text:000035C4 _text           segment para public 'CODE' use32
.text:000035C4                 assume cs:_text
.text:000035C4                 ;org 35C4h
.text:000035C4 ; COMDAT (pick any)
.text:000035C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035C4
.text:000035C4 ; =============== S U B R O U T I N E =======================================
.text:000035C4
.text:000035C4
.text:000035C4 ; [thunk]:public: virtual long __stdcall NCrypto::N7z::CEncoder::QueryInterface`adjustor{120}' (struct _GUID const &, void * *)
.text:000035C4                 public ?QueryInterface@CEncoder@N7z@NCrypto@@WHI@AGJABU_GUID@@PAPAX@Z
.text:000035C4 ?QueryInterface@CEncoder@N7z@NCrypto@@WHI@AGJABU_GUID@@PAPAX@Z proc near
.text:000035C4                                         ; DATA XREF: .rdata:const NCrypto::N7z::CEncoder::`vftable'{for `ICryptoResetInitVector'}o
.text:000035C4
.text:000035C4 arg_0           = dword ptr  4
.text:000035C4
.text:000035C4                 sub     [esp+arg_0], 78h ; 'x'
.text:000035C9                 jmp     ?QueryInterface@CEncoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)
.text:000035C9 ?QueryInterface@CEncoder@N7z@NCrypto@@WHI@AGJABU_GUID@@PAPAX@Z endp
.text:000035C9
.text:000035C9 ; ---------------------------------------------------------------------------
.text:000035CE                 align 10h
.text:000035CE _text           ends
.text:000035CE
.text:000035D0 ; ===========================================================================
.text:000035D0
.text:000035D0 ; Segment type: Pure code
.text:000035D0 ; Segment permissions: Read/Execute
.text:000035D0 _text           segment para public 'CODE' use32
.text:000035D0                 assume cs:_text
.text:000035D0                 ;org 35D0h
.text:000035D0 ; COMDAT (pick any)
.text:000035D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035D0
.text:000035D0 ; =============== S U B R O U T I N E =======================================
.text:000035D0
.text:000035D0
.text:000035D0 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::N7z::CEncoder::AddRef`adjustor{4}' (void)
.text:000035D0                 public ?AddRef@CEncoder@N7z@NCrypto@@W3AGKXZ
.text:000035D0 ?AddRef@CEncoder@N7z@NCrypto@@W3AGKXZ proc near ; DATA XREF: .rdata:000014E0o
.text:000035D0
.text:000035D0 arg_0           = dword ptr  4
.text:000035D0
.text:000035D0                 sub     [esp+arg_0], 4
.text:000035D5                 jmp     ?AddRef@CEncoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CEncoder::AddRef(void)
.text:000035D5 ?AddRef@CEncoder@N7z@NCrypto@@W3AGKXZ endp
.text:000035D5
.text:000035D5 ; ---------------------------------------------------------------------------
.text:000035DA                 align 4
.text:000035DA _text           ends
.text:000035DA
.text:000035DC ; ===========================================================================
.text:000035DC
.text:000035DC ; Segment type: Pure code
.text:000035DC ; Segment permissions: Read/Execute
.text:000035DC _text           segment para public 'CODE' use32
.text:000035DC                 assume cs:_text
.text:000035DC                 ;org 35DCh
.text:000035DC ; COMDAT (pick any)
.text:000035DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035DC
.text:000035DC ; =============== S U B R O U T I N E =======================================
.text:000035DC
.text:000035DC
.text:000035DC ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)
.text:000035DC                 public ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ
.text:000035DC ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ proc near
.text:000035DC                                         ; DATA XREF: .rdata:00001E0Co
.text:000035DC                                         ; .rdata:000028B0o
.text:000035DC
.text:000035DC arg_0           = dword ptr  4
.text:000035DC
.text:000035DC                 sub     [esp+arg_0], 8
.text:000035E1                 jmp     ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.text:000035E1 ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ endp
.text:000035E1
.text:000035E1 ; ---------------------------------------------------------------------------
.text:000035E6                 align 4
.text:000035E6 _text           ends
.text:000035E6
.text:000035E8 ; ===========================================================================
.text:000035E8
.text:000035E8 ; Segment type: Pure code
.text:000035E8 ; Segment permissions: Read/Execute
.text:000035E8 _text           segment para public 'CODE' use32
.text:000035E8                 assume cs:_text
.text:000035E8                 ;org 35E8h
.text:000035E8 ; COMDAT (pick any)
.text:000035E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035E8
.text:000035E8 ; =============== S U B R O U T I N E =======================================
.text:000035E8
.text:000035E8
.text:000035E8 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::N7z::CDecoder::AddRef`adjustor{116}' (void)
.text:000035E8                 public ?AddRef@CDecoder@N7z@NCrypto@@WHE@AGKXZ
.text:000035E8 ?AddRef@CDecoder@N7z@NCrypto@@WHE@AGKXZ proc near
.text:000035E8                                         ; DATA XREF: .rdata:000024F8o
.text:000035E8
.text:000035E8 arg_0           = dword ptr  4
.text:000035E8
.text:000035E8                 sub     [esp+arg_0], 74h ; 't'
.text:000035ED                 jmp     ?AddRef@CDecoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CDecoder::AddRef(void)
.text:000035ED ?AddRef@CDecoder@N7z@NCrypto@@WHE@AGKXZ endp
.text:000035ED
.text:000035ED ; ---------------------------------------------------------------------------
.text:000035F2                 align 4
.text:000035F2 _text           ends
.text:000035F2
.text:000035F4 ; ===========================================================================
.text:000035F4
.text:000035F4 ; Segment type: Pure code
.text:000035F4 ; Segment permissions: Read/Execute
.text:000035F4 _text           segment para public 'CODE' use32
.text:000035F4                 assume cs:_text
.text:000035F4                 ;org 35F4h
.text:000035F4 ; COMDAT (pick any)
.text:000035F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035F4
.text:000035F4 ; =============== S U B R O U T I N E =======================================
.text:000035F4
.text:000035F4
.text:000035F4 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)
.text:000035F4                 public ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ
.text:000035F4 ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ proc near ; DATA XREF: .rdata:00001E1Co
.text:000035F4                                         ; .rdata:000028C0o
.text:000035F4
.text:000035F4 arg_0           = dword ptr  4
.text:000035F4
.text:000035F4                 sub     [esp+arg_0], 4
.text:000035F9                 jmp     ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.text:000035F9 ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ endp
.text:000035F9
.text:000035F9 ; ---------------------------------------------------------------------------
.text:000035FE                 align 10h
.text:000035FE _text           ends
.text:000035FE
.text:00003600 ; ===========================================================================
.text:00003600
.text:00003600 ; Segment type: Pure code
.text:00003600 ; Segment permissions: Read/Execute
.text:00003600 _text           segment para public 'CODE' use32
.text:00003600                 assume cs:_text
.text:00003600                 ;org 3600h
.text:00003600 ; COMDAT (pick any)
.text:00003600                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003600
.text:00003600 ; =============== S U B R O U T I N E =======================================
.text:00003600
.text:00003600
.text:00003600 ; [thunk]:public: virtual long __stdcall NCrypto::N7z::CEncoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00003600                 public ?QueryInterface@CEncoder@N7z@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.text:00003600 ?QueryInterface@CEncoder@N7z@NCrypto@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00003600                                         ; DATA XREF: .rdata:const NCrypto::N7z::CEncoder::`vftable'{for `ICryptoSetPassword'}o
.text:00003600
.text:00003600 arg_0           = dword ptr  4
.text:00003600
.text:00003600                 sub     [esp+arg_0], 4
.text:00003605                 jmp     ?QueryInterface@CEncoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00003605 ?QueryInterface@CEncoder@N7z@NCrypto@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00003605
.text:00003605 ; ---------------------------------------------------------------------------
.text:0000360A                 align 4
.text:0000360A _text           ends
.text:0000360A
.text:0000360C ; ===========================================================================
.text:0000360C
.text:0000360C ; Segment type: Pure code
.text:0000360C ; Segment permissions: Read/Execute
.text:0000360C _text           segment para public 'CODE' use32
.text:0000360C                 assume cs:_text
.text:0000360C                 ;org 360Ch
.text:0000360C ; COMDAT (pick any)
.text:0000360C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000360C
.text:0000360C ; =============== S U B R O U T I N E =======================================
.text:0000360C
.text:0000360C
.text:0000360C ; [thunk]:public: virtual unsigned long __stdcall NCrypto::N7z::CDecoder::Release`adjustor{4}' (void)
.text:0000360C                 public ?Release@CDecoder@N7z@NCrypto@@W3AGKXZ
.text:0000360C ?Release@CDecoder@N7z@NCrypto@@W3AGKXZ proc near
.text:0000360C                                         ; DATA XREF: .rdata:00002510o
.text:0000360C
.text:0000360C arg_0           = dword ptr  4
.text:0000360C
.text:0000360C                 sub     [esp+arg_0], 4
.text:00003611                 jmp     ?Release@CDecoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CDecoder::Release(void)
.text:00003611 ?Release@CDecoder@N7z@NCrypto@@W3AGKXZ endp
.text:00003611
.text:00003611 ; ---------------------------------------------------------------------------
.text:00003616                 align 4
.text:00003616 _text           ends
.text:00003616
.text:00003618 ; ===========================================================================
.text:00003618
.text:00003618 ; Segment type: Pure code
.text:00003618 ; Segment permissions: Read/Execute
.text:00003618 _text           segment para public 'CODE' use32
.text:00003618                 assume cs:_text
.text:00003618                 ;org 3618h
.text:00003618 ; COMDAT (pick any)
.text:00003618                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003618
.text:00003618 ; =============== S U B R O U T I N E =======================================
.text:00003618
.text:00003618
.text:00003618 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)
.text:00003618                 public ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ
.text:00003618 ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ proc near ; DATA XREF: .rdata:00001E08o
.text:00003618                                         ; .rdata:000028ACo
.text:00003618
.text:00003618 arg_0           = dword ptr  4
.text:00003618
.text:00003618                 sub     [esp+arg_0], 8
.text:0000361D                 jmp     ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.text:0000361D ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ endp
.text:0000361D
.text:0000361D ; ---------------------------------------------------------------------------
.text:00003622                 align 4
.text:00003622 _text           ends
.text:00003622
.text:00003624 ; ===========================================================================
.text:00003624
.text:00003624 ; Segment type: Pure code
.text:00003624 ; Segment permissions: Read/Execute
.text:00003624 _text           segment para public 'CODE' use32
.text:00003624                 assume cs:_text
.text:00003624                 ;org 3624h
.text:00003624 ; COMDAT (pick any)
.text:00003624                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003624
.text:00003624 ; =============== S U B R O U T I N E =======================================
.text:00003624
.text:00003624
.text:00003624 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::N7z::CEncoder::Release`adjustor{116}' (void)
.text:00003624                 public ?Release@CEncoder@N7z@NCrypto@@WHE@AGKXZ
.text:00003624 ?Release@CEncoder@N7z@NCrypto@@WHE@AGKXZ proc near
.text:00003624                                         ; DATA XREF: .rdata:000014D0o
.text:00003624
.text:00003624 arg_0           = dword ptr  4
.text:00003624
.text:00003624                 sub     [esp+arg_0], 74h ; 't'
.text:00003629                 jmp     ?Release@CEncoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CEncoder::Release(void)
.text:00003629 ?Release@CEncoder@N7z@NCrypto@@WHE@AGKXZ endp
.text:00003629
.text:00003629 ; ---------------------------------------------------------------------------
.text:0000362E                 align 10h
.text:0000362E _text           ends
.text:0000362E
.text:00003630 ; ===========================================================================
.text:00003630
.text:00003630 ; Segment type: Pure code
.text:00003630 ; Segment permissions: Read/Execute
.text:00003630 _text           segment para public 'CODE' use32
.text:00003630                 assume cs:_text
.text:00003630                 ;org 3630h
.text:00003630 ; COMDAT (pick any)
.text:00003630                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003630
.text:00003630 ; =============== S U B R O U T I N E =======================================
.text:00003630
.text:00003630
.text:00003630 ; [thunk]:public: virtual long __stdcall NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00003630                 public ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.text:00003630 ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00003630                                         ; DATA XREF: .rdata:const NCrypto::CAesCbcEncoder::`vftable'{for `ICryptoProperties'}o
.text:00003630                                         ; .rdata:const NCrypto::CAesCbcDecoder::`vftable'{for `ICryptoProperties'}o
.text:00003630
.text:00003630 arg_0           = dword ptr  4
.text:00003630
.text:00003630                 sub     [esp+arg_0], 4
.text:00003635                 jmp     ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.text:00003635 ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00003635
.text:00003635 ; ---------------------------------------------------------------------------
.text:0000363A                 align 4
.text:0000363A _text           ends
.text:0000363A
.text:0000363C ; ===========================================================================
.text:0000363C
.text:0000363C ; Segment type: Pure code
.text:0000363C ; Segment permissions: Read/Execute
.text:0000363C _text           segment para public 'CODE' use32
.text:0000363C                 assume cs:_text
.text:0000363C                 ;org 363Ch
.text:0000363C ; COMDAT (pick any)
.text:0000363C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000363C
.text:0000363C ; =============== S U B R O U T I N E =======================================
.text:0000363C
.text:0000363C
.text:0000363C ; [thunk]:public: virtual unsigned long __stdcall NCrypto::N7z::CEncoder::Release`adjustor{120}' (void)
.text:0000363C                 public ?Release@CEncoder@N7z@NCrypto@@WHI@AGKXZ
.text:0000363C ?Release@CEncoder@N7z@NCrypto@@WHI@AGKXZ proc near
.text:0000363C                                         ; DATA XREF: .rdata:000014BCo
.text:0000363C
.text:0000363C arg_0           = dword ptr  4
.text:0000363C
.text:0000363C                 sub     [esp+arg_0], 78h ; 'x'
.text:00003641                 jmp     ?Release@CEncoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CEncoder::Release(void)
.text:00003641 ?Release@CEncoder@N7z@NCrypto@@WHI@AGKXZ endp
.text:00003641
.text:00003641 ; ---------------------------------------------------------------------------
.text:00003646                 align 4
.text:00003646 _text           ends
.text:00003646
.text:00003648 ; ===========================================================================
.text:00003648
.text:00003648 ; Segment type: Pure code
.text:00003648 ; Segment permissions: Read/Execute
.text:00003648 _text           segment para public 'CODE' use32
.text:00003648                 assume cs:_text
.text:00003648                 ;org 3648h
.text:00003648 ; COMDAT (pick any)
.text:00003648                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003648
.text:00003648 ; =============== S U B R O U T I N E =======================================
.text:00003648
.text:00003648
.text:00003648 ; [thunk]:public: virtual long __stdcall NCrypto::N7z::CDecoder::QueryInterface`adjustor{116}' (struct _GUID const &, void * *)
.text:00003648                 public ?QueryInterface@CDecoder@N7z@NCrypto@@WHE@AGJABU_GUID@@PAPAX@Z
.text:00003648 ?QueryInterface@CDecoder@N7z@NCrypto@@WHE@AGJABU_GUID@@PAPAX@Z proc near
.text:00003648                                         ; DATA XREF: .rdata:const NCrypto::N7z::CDecoder::`vftable'o
.text:00003648
.text:00003648 arg_0           = dword ptr  4
.text:00003648
.text:00003648                 sub     [esp+arg_0], 74h ; 't'
.text:0000364D                 jmp     ?QueryInterface@CDecoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *)
.text:0000364D ?QueryInterface@CDecoder@N7z@NCrypto@@WHE@AGJABU_GUID@@PAPAX@Z endp
.text:0000364D
.text:0000364D ; ---------------------------------------------------------------------------
.text:00003652                 align 4
.text:00003652 _text           ends
.text:00003652
.text:00003654 ; ===========================================================================
.text:00003654
.text:00003654 ; Segment type: Pure code
.text:00003654 ; Segment permissions: Read/Execute
.text:00003654 _text           segment para public 'CODE' use32
.text:00003654                 assume cs:_text
.text:00003654                 ;org 3654h
.text:00003654 ; COMDAT (pick any)
.text:00003654                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003654
.text:00003654 ; =============== S U B R O U T I N E =======================================
.text:00003654
.text:00003654
.text:00003654 ; [thunk]:public: virtual long __stdcall NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00003654                 public ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.text:00003654 ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00003654                                         ; DATA XREF: .rdata:const NCrypto::CAesCbcEncoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00003654                                         ; .rdata:const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00003654
.text:00003654 arg_0           = dword ptr  4
.text:00003654
.text:00003654                 sub     [esp+arg_0], 8
.text:00003659                 jmp     ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.text:00003659 ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00003659
.text:00003659 ; ---------------------------------------------------------------------------
.text:0000365E                 align 10h
.text:0000365E _text           ends
.text:0000365E
.text:00003660 ; ===========================================================================
.text:00003660
.text:00003660 ; Segment type: Pure code
.text:00003660 ; Segment permissions: Read/Execute
.text:00003660 _text           segment para public 'CODE' use32
.text:00003660                 assume cs:_text
.text:00003660                 ;org 3660h
.text:00003660 ; COMDAT (pick any)
.text:00003660                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003660
.text:00003660 ; =============== S U B R O U T I N E =======================================
.text:00003660
.text:00003660
.text:00003660 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::N7z::CDecoder::AddRef`adjustor{4}' (void)
.text:00003660                 public ?AddRef@CDecoder@N7z@NCrypto@@W3AGKXZ
.text:00003660 ?AddRef@CDecoder@N7z@NCrypto@@W3AGKXZ proc near ; DATA XREF: .rdata:0000250Co
.text:00003660
.text:00003660 arg_0           = dword ptr  4
.text:00003660
.text:00003660                 sub     [esp+arg_0], 4
.text:00003665                 jmp     ?AddRef@CDecoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CDecoder::AddRef(void)
.text:00003665 ?AddRef@CDecoder@N7z@NCrypto@@W3AGKXZ endp
.text:00003665
.text:00003665 ; ---------------------------------------------------------------------------
.text:0000366A                 align 4
.text:0000366A _text           ends
.text:0000366A
.text:0000366C ; ===========================================================================
.text:0000366C
.text:0000366C ; Segment type: Pure code
.text:0000366C ; Segment permissions: Read/Execute
.text:0000366C _text           segment para public 'CODE' use32
.text:0000366C                 assume cs:_text
.text:0000366C                 ;org 366Ch
.text:0000366C ; COMDAT (pick any)
.text:0000366C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000366C
.text:0000366C ; =============== S U B R O U T I N E =======================================
.text:0000366C
.text:0000366C
.text:0000366C ; [thunk]:public: virtual unsigned long __stdcall NCrypto::N7z::CEncoder::AddRef`adjustor{116}' (void)
.text:0000366C                 public ?AddRef@CEncoder@N7z@NCrypto@@WHE@AGKXZ
.text:0000366C ?AddRef@CEncoder@N7z@NCrypto@@WHE@AGKXZ proc near
.text:0000366C                                         ; DATA XREF: .rdata:000014CCo
.text:0000366C
.text:0000366C arg_0           = dword ptr  4
.text:0000366C
.text:0000366C                 sub     [esp+arg_0], 74h ; 't'
.text:00003671                 jmp     ?AddRef@CEncoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CEncoder::AddRef(void)
.text:00003671 ?AddRef@CEncoder@N7z@NCrypto@@WHE@AGKXZ endp
.text:00003671
.text:00003671 ; ---------------------------------------------------------------------------
.text:00003676                 align 4
.text:00003676 _text           ends
.text:00003676
.text:00003678 ; ===========================================================================
.text:00003678
.text:00003678 ; Segment type: Pure code
.text:00003678 ; Segment permissions: Read/Execute
.text:00003678 _text           segment para public 'CODE' use32
.text:00003678                 assume cs:_text
.text:00003678                 ;org 3678h
.text:00003678 ; COMDAT (pick any)
.text:00003678                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003678
.text:00003678 ; =============== S U B R O U T I N E =======================================
.text:00003678
.text:00003678
.text:00003678 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::N7z::CEncoder::AddRef`adjustor{120}' (void)
.text:00003678                 public ?AddRef@CEncoder@N7z@NCrypto@@WHI@AGKXZ
.text:00003678 ?AddRef@CEncoder@N7z@NCrypto@@WHI@AGKXZ proc near
.text:00003678                                         ; DATA XREF: .rdata:000014B8o
.text:00003678
.text:00003678 arg_0           = dword ptr  4
.text:00003678
.text:00003678                 sub     [esp+arg_0], 78h ; 'x'
.text:0000367D                 jmp     ?AddRef@CEncoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CEncoder::AddRef(void)
.text:0000367D ?AddRef@CEncoder@N7z@NCrypto@@WHI@AGKXZ endp
.text:0000367D
.text:0000367D ; ---------------------------------------------------------------------------
.text:00003682                 align 4
.text:00003682 _text           ends
.text:00003682
.text:00003684 ; ===========================================================================
.text:00003684
.text:00003684 ; Segment type: Pure code
.text:00003684 ; Segment permissions: Read/Execute
.text:00003684 _text           segment para public 'CODE' use32
.text:00003684                 assume cs:_text
.text:00003684                 ;org 3684h
.text:00003684 ; COMDAT (pick any)
.text:00003684                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003684
.text:00003684 ; =============== S U B R O U T I N E =======================================
.text:00003684
.text:00003684
.text:00003684 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::N7z::CEncoder::Release`adjustor{4}' (void)
.text:00003684                 public ?Release@CEncoder@N7z@NCrypto@@W3AGKXZ
.text:00003684 ?Release@CEncoder@N7z@NCrypto@@W3AGKXZ proc near
.text:00003684                                         ; DATA XREF: .rdata:000014E4o
.text:00003684
.text:00003684 arg_0           = dword ptr  4
.text:00003684
.text:00003684                 sub     [esp+arg_0], 4
.text:00003689                 jmp     ?Release@CEncoder@N7z@NCrypto@@UAGKXZ ; NCrypto::N7z::CEncoder::Release(void)
.text:00003689 ?Release@CEncoder@N7z@NCrypto@@W3AGKXZ endp
.text:00003689
.text:00003689 ; ---------------------------------------------------------------------------
.text:0000368E                 align 10h
.text:0000368E _text           ends
.text:0000368E
.text:00003690 ; ===========================================================================
.text:00003690
.text:00003690 ; Segment type: Pure code
.text:00003690 ; Segment permissions: Read/Execute
.text:00003690 _text           segment para public 'CODE' use32
.text:00003690                 assume cs:_text
.text:00003690                 ;org 3690h
.text:00003690 ; COMDAT (pick any)
.text:00003690                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003690
.text:00003690 ; =============== S U B R O U T I N E =======================================
.text:00003690
.text:00003690
.text:00003690 ; [thunk]:public: virtual long __stdcall NCrypto::N7z::CEncoder::QueryInterface`adjustor{116}' (struct _GUID const &, void * *)
.text:00003690                 public ?QueryInterface@CEncoder@N7z@NCrypto@@WHE@AGJABU_GUID@@PAPAX@Z
.text:00003690 ?QueryInterface@CEncoder@N7z@NCrypto@@WHE@AGJABU_GUID@@PAPAX@Z proc near
.text:00003690                                         ; DATA XREF: .rdata:const NCrypto::N7z::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}o
.text:00003690
.text:00003690 arg_0           = dword ptr  4
.text:00003690
.text:00003690                 sub     [esp+arg_0], 74h ; 't'
.text:00003695                 jmp     ?QueryInterface@CEncoder@N7z@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00003695 ?QueryInterface@CEncoder@N7z@NCrypto@@WHE@AGJABU_GUID@@PAPAX@Z endp
.text:00003695
.text:00003695 ; ---------------------------------------------------------------------------
.text:0000369A                 align 4
.text:0000369A _text           ends
.text:0000369A
.text$yc:0000369C ; ===========================================================================
.text$yc:0000369C
.text$yc:0000369C ; Segment type: Pure code
.text$yc:0000369C ; Segment permissions: Read/Execute
.text$yc:0000369C _text$yc        segment para public 'CODE' use32
.text$yc:0000369C                 assume cs:_text$yc
.text$yc:0000369C                 ;org 369Ch
.text$yc:0000369C ; COMDAT (pick any)
.text$yc:0000369C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$yc:0000369C
.text$yc:0000369C ; =============== S U B R O U T I N E =======================================
.text$yc:0000369C
.text$yc:0000369C ; Attributes: bp-based frame
.text$yc:0000369C
.text$yc:0000369C ; void __cdecl NCrypto::N7z::`dynamic initializer for 'g_GlobalKeyCache''(void)
.text$yc:0000369C ??__Eg_GlobalKeyCache@N7z@NCrypto@@YAXXZ proc near
.text$yc:0000369C                                         ; DATA XREF: .CRT$XCU:_g_GlobalKeyCache$initializer$o
.text$yc:0000369C                 push    ebp
.text$yc:0000369D                 mov     ebp, esp
.text$yc:0000369F                 push    20h ; ' '       ; unsigned int
.text$yc:000036A1                 mov     ecx, offset _g_GlobalKeyCache ; this
.text$yc:000036A6                 call    ??0CKeyInfoCache@N7z@NCrypto@@QAE@I@Z ; NCrypto::N7z::CKeyInfoCache::CKeyInfoCache(uint)
.text$yc:000036AB                 push    offset ??__Fg_GlobalKeyCache@N7z@NCrypto@@YAXXZ ; void (__cdecl *)()
.text$yc:000036B0                 call    _atexit
.text$yc:000036B5                 add     esp, 4
.text$yc:000036B8                 cmp     ebp, esp
.text$yc:000036BA                 call    __RTC_CheckEsp
.text$yc:000036BF                 pop     ebp
.text$yc:000036C0                 retn
.text$yc:000036C0 ??__Eg_GlobalKeyCache@N7z@NCrypto@@YAXXZ endp
.text$yc:000036C0
.text$yc:000036C0 ; ---------------------------------------------------------------------------
.text$yc:000036C1                 align 4
.text$yc:000036C1 _text$yc        ends
.text$yc:000036C1
.text$yc:000036C4 ; ===========================================================================
.text$yc:000036C4
.text$yc:000036C4 ; Segment type: Pure code
.text$yc:000036C4 ; Segment permissions: Read/Execute
.text$yc:000036C4 _text$yc        segment para public 'CODE' use32
.text$yc:000036C4                 assume cs:_text$yc
.text$yc:000036C4                 ;org 36C4h
.text$yc:000036C4 ; COMDAT (pick any)
.text$yc:000036C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$yc:000036C4
.text$yc:000036C4 ; =============== S U B R O U T I N E =======================================
.text$yc:000036C4
.text$yc:000036C4 ; Attributes: bp-based frame
.text$yc:000036C4
.text$yc:000036C4 ; void __cdecl NCrypto::N7z::`dynamic initializer for 'g_GlobalKeyCacheCriticalSection''(void)
.text$yc:000036C4 ??__Eg_GlobalKeyCacheCriticalSection@N7z@NCrypto@@YAXXZ proc near
.text$yc:000036C4                                         ; DATA XREF: .CRT$XCU:_g_GlobalKeyCacheCriticalSection$initializer$o
.text$yc:000036C4                 push    ebp
.text$yc:000036C5                 mov     ebp, esp
.text$yc:000036C7                 mov     ecx, offset _g_GlobalKeyCacheCriticalSection ; this
.text$yc:000036CC                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text$yc:000036D1                 push    offset ??__Fg_GlobalKeyCacheCriticalSection@N7z@NCrypto@@YAXXZ ; void (__cdecl *)()
.text$yc:000036D6                 call    _atexit
.text$yc:000036DB                 add     esp, 4
.text$yc:000036DE                 cmp     ebp, esp
.text$yc:000036E0                 call    __RTC_CheckEsp
.text$yc:000036E5                 pop     ebp
.text$yc:000036E6                 retn
.text$yc:000036E6 ??__Eg_GlobalKeyCacheCriticalSection@N7z@NCrypto@@YAXXZ endp
.text$yc:000036E6
.text$yc:000036E6 ; ---------------------------------------------------------------------------
.text$yc:000036E7                 align 4
.text$yc:000036E7 _text$yc        ends
.text$yc:000036E7
.text:000036E8 ; ===========================================================================
.text:000036E8
.text:000036E8 ; Segment type: Pure code
.text:000036E8 ; Segment permissions: Read/Execute
.text:000036E8 _text           segment para public 'CODE' use32
.text:000036E8                 assume cs:_text
.text:000036E8                 ;org 36E8h
.text:000036E8 ; COMDAT (pick any)
.text:000036E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000036E8
.text:000036E8 ; =============== S U B R O U T I N E =======================================
.text:000036E8
.text:000036E8 ; Attributes: bp-based frame
.text:000036E8
.text:000036E8 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:000036E8                 public ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:000036E8 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:000036E8                                         ; CODE XREF: NCrypto::N7z::`dynamic initializer for 'g_GlobalKeyCacheCriticalSection''(void)+8p
.text:000036E8
.text:000036E8 var_4           = dword ptr -4
.text:000036E8
.text:000036E8                 push    ebp
.text:000036E9                 mov     ebp, esp
.text:000036EB                 push    ecx
.text:000036EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036F3                 mov     [ebp+var_4], ecx
.text:000036F6                 mov     eax, [ebp+var_4]
.text:000036F9                 push    eax
.text:000036FA                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:000036FF                 mov     eax, [ebp+var_4]
.text:00003702                 add     esp, 4
.text:00003705                 cmp     ebp, esp
.text:00003707                 call    __RTC_CheckEsp
.text:0000370C                 mov     esp, ebp
.text:0000370E                 pop     ebp
.text:0000370F                 retn
.text:0000370F ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:0000370F
.text:0000370F _text           ends
.text:0000370F
.text$yd:00003710 ; ===========================================================================
.text$yd:00003710
.text$yd:00003710 ; Segment type: Pure code
.text$yd:00003710 ; Segment permissions: Read/Execute
.text$yd:00003710 _text$yd        segment para public 'CODE' use32
.text$yd:00003710                 assume cs:_text$yd
.text$yd:00003710                 ;org 3710h
.text$yd:00003710 ; COMDAT (pick any)
.text$yd:00003710                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$yd:00003710
.text$yd:00003710 ; =============== S U B R O U T I N E =======================================
.text$yd:00003710
.text$yd:00003710 ; Attributes: bp-based frame
.text$yd:00003710
.text$yd:00003710 ; void __cdecl NCrypto::N7z::`dynamic atexit destructor for 'g_GlobalKeyCache''()
.text$yd:00003710 ??__Fg_GlobalKeyCache@N7z@NCrypto@@YAXXZ proc near
.text$yd:00003710                                         ; DATA XREF: NCrypto::N7z::`dynamic initializer for 'g_GlobalKeyCache''(void)+Fo
.text$yd:00003710                 push    ebp
.text$yd:00003711                 mov     ebp, esp
.text$yd:00003713                 mov     ecx, offset _g_GlobalKeyCache ; this
.text$yd:00003718                 call    ??1CKeyInfoCache@N7z@NCrypto@@QAE@XZ ; NCrypto::N7z::CKeyInfoCache::~CKeyInfoCache(void)
.text$yd:0000371D                 cmp     ebp, esp
.text$yd:0000371F                 call    __RTC_CheckEsp
.text$yd:00003724                 pop     ebp
.text$yd:00003725                 retn
.text$yd:00003725 ??__Fg_GlobalKeyCache@N7z@NCrypto@@YAXXZ endp
.text$yd:00003725
.text$yd:00003725 ; ---------------------------------------------------------------------------
.text$yd:00003726                 align 4
.text$yd:00003726 _text$yd        ends
.text$yd:00003726
.text$yd:00003728 ; ===========================================================================
.text$yd:00003728
.text$yd:00003728 ; Segment type: Pure code
.text$yd:00003728 ; Segment permissions: Read/Execute
.text$yd:00003728 _text$yd        segment para public 'CODE' use32
.text$yd:00003728                 assume cs:_text$yd
.text$yd:00003728                 ;org 3728h
.text$yd:00003728 ; COMDAT (pick any)
.text$yd:00003728                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$yd:00003728
.text$yd:00003728 ; =============== S U B R O U T I N E =======================================
.text$yd:00003728
.text$yd:00003728 ; Attributes: bp-based frame
.text$yd:00003728
.text$yd:00003728 ; void __cdecl NCrypto::N7z::`dynamic atexit destructor for 'g_GlobalKeyCacheCriticalSection''()
.text$yd:00003728 ??__Fg_GlobalKeyCacheCriticalSection@N7z@NCrypto@@YAXXZ proc near
.text$yd:00003728                                         ; DATA XREF: NCrypto::N7z::`dynamic initializer for 'g_GlobalKeyCacheCriticalSection''(void)+Do
.text$yd:00003728                 push    ebp
.text$yd:00003729                 mov     ebp, esp
.text$yd:0000372B                 mov     ecx, offset _g_GlobalKeyCacheCriticalSection ; this
.text$yd:00003730                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$yd:00003735                 cmp     ebp, esp
.text$yd:00003737                 call    __RTC_CheckEsp
.text$yd:0000373C                 pop     ebp
.text$yd:0000373D                 retn
.text$yd:0000373D ??__Fg_GlobalKeyCacheCriticalSection@N7z@NCrypto@@YAXXZ endp
.text$yd:0000373D
.text$yd:0000373D ; ---------------------------------------------------------------------------
.text$yd:0000373E                 align 10h
.text$yd:0000373E _text$yd        ends
.text$yd:0000373E
.text:00003740 ; ===========================================================================
.text:00003740
.text:00003740 ; Segment type: Pure code
.text:00003740 ; Segment permissions: Read/Execute
.text:00003740 _text           segment para public 'CODE' use32
.text:00003740                 assume cs:_text
.text:00003740                 ;org 3740h
.text:00003740 ; COMDAT (pick any)
.text:00003740                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003740
.text:00003740 ; =============== S U B R O U T I N E =======================================
.text:00003740
.text:00003740 ; Attributes: bp-based frame
.text:00003740
.text:00003740 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::~CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00003740                 public ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00003740 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003740                                         ; CODE XREF: NCrypto::N7z::`dynamic atexit destructor for 'g_GlobalKeyCacheCriticalSection''(void)+8p
.text:00003740
.text:00003740 lpCriticalSection= dword ptr -4
.text:00003740
.text:00003740                 push    ebp
.text:00003741                 mov     ebp, esp
.text:00003743                 push    ecx
.text:00003744                 push    esi
.text:00003745                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:0000374C                 mov     [ebp+lpCriticalSection], ecx
.text:0000374F                 mov     esi, esp
.text:00003751                 mov     eax, [ebp+lpCriticalSection]
.text:00003754                 push    eax             ; lpCriticalSection
.text:00003755                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:0000375B                 cmp     esi, esp
.text:0000375D                 call    __RTC_CheckEsp
.text:00003762                 pop     esi
.text:00003763                 add     esp, 4
.text:00003766                 cmp     ebp, esp
.text:00003768                 call    __RTC_CheckEsp
.text:0000376D                 mov     esp, ebp
.text:0000376F                 pop     ebp
.text:00003770                 retn
.text:00003770 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00003770
.text:00003770 ; ---------------------------------------------------------------------------
.text:00003771                 align 4
.text:00003771 _text           ends
.text:00003771
.bss:00003774 ; ===========================================================================
.bss:00003774
.bss:00003774 ; Segment type: Uninitialized
.bss:00003774 ; Segment permissions: Read/Write
.bss:00003774 _bss            segment dword public 'BSS' use32
.bss:00003774                 assume cs:_bss
.bss:00003774                 ;org 3774h
.bss:00003774                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.bss:00003774 ; NCrypto::N7z::CKeyInfoCache g_GlobalKeyCache
.bss:00003774 _g_GlobalKeyCache db    ? ;             ; DATA XREF: NCrypto::N7z::CBase::PrepareKey(void)+71o
.bss:00003774                                         ; NCrypto::N7z::CBase::PrepareKey(void)+AFo ...
.bss:00003775                 db    ? ;
.bss:00003776                 db    ? ;
.bss:00003777                 db    ? ;
.bss:00003778                 db    ? ;
.bss:00003779                 db    ? ;
.bss:0000377A                 db    ? ;
.bss:0000377B                 db    ? ;
.bss:0000377C                 db    ? ;
.bss:0000377D                 db    ? ;
.bss:0000377E                 db    ? ;
.bss:0000377F                 db    ? ;
.bss:00003780                 db    ? ;
.bss:00003781                 db    ? ;
.bss:00003782                 db    ? ;
.bss:00003783                 db    ? ;
.bss:00003784 ; NWindows::NSynchronization::CCriticalSection g_GlobalKeyCacheCriticalSection
.bss:00003784 _g_GlobalKeyCacheCriticalSection db    ? ;
.bss:00003784                                         ; DATA XREF: NCrypto::N7z::CBase::PrepareKey(void)+3Co
.bss:00003784                                         ; NCrypto::N7z::`dynamic initializer for 'g_GlobalKeyCacheCriticalSection''(void)+3o ...
.bss:00003785                 db    ? ;
.bss:00003786                 db    ? ;
.bss:00003787                 db    ? ;
.bss:00003788                 db    ? ;
.bss:00003789                 db    ? ;
.bss:0000378A                 db    ? ;
.bss:0000378B                 db    ? ;
.bss:0000378C                 db    ? ;
.bss:0000378D                 db    ? ;
.bss:0000378E                 db    ? ;
.bss:0000378F                 db    ? ;
.bss:00003790                 db    ? ;
.bss:00003791                 db    ? ;
.bss:00003792                 db    ? ;
.bss:00003793                 db    ? ;
.bss:00003794                 db    ? ;
.bss:00003795                 db    ? ;
.bss:00003796                 db    ? ;
.bss:00003797                 db    ? ;
.bss:00003798                 db    ? ;
.bss:00003799                 db    ? ;
.bss:0000379A                 db    ? ;
.bss:0000379B                 db    ? ;
.bss:0000379B _bss            ends
.bss:0000379B
.CRT$XCU:0000379C ; ===========================================================================
.CRT$XCU:0000379C
.CRT$XCU:0000379C ; Segment type: Pure data
.CRT$XCU:0000379C ; Segment permissions: Read
.CRT$XCU:0000379C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000379C                 assume cs:_CRT$XCU
.CRT$XCU:0000379C                 ;org 379Ch
.CRT$XCU:0000379C _g_GlobalKeyCache$initializer$ dd offset ??__Eg_GlobalKeyCache@N7z@NCrypto@@YAXXZ ; NCrypto::N7z::`dynamic initializer for 'g_GlobalKeyCache''(void)
.CRT$XCU:000037A0 _g_GlobalKeyCacheCriticalSection$initializer$ dd offset ??__Eg_GlobalKeyCacheCriticalSection@N7z@NCrypto@@YAXXZ ; NCrypto::N7z::`dynamic initializer for 'g_GlobalKeyCacheCriticalSection''(void)
.CRT$XCU:000037A0 _CRT$XCU        ends
.CRT$XCU:000037A0
UNDEF:000037B0 ; ===========================================================================
UNDEF:000037B0
UNDEF:000037B0 ; Segment type: Externs
UNDEF:000037B0 ; UNDEF
UNDEF:000037B0                 extrn __RTC_CheckEsp:near
UNDEF:000037B0                                         ; CODE XREF: NCrypto::N7z::CKeyInfo::IsEqualTo(NCrypto::N7z::CKeyInfo const &)+88p
UNDEF:000037B0                                         ; NCrypto::N7z::CKeyInfo::CalcKey(void)+2E2p ...
UNDEF:000037B4                 extrn __RTC_Shutdown:near
UNDEF:000037B4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000037B8                 extrn __RTC_InitBase:near
UNDEF:000037B8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000037BC ; __stdcall Sha256_Final(x, x)
UNDEF:000037BC                 extrn _Sha256_Final@8:near
UNDEF:000037BC                                         ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+29Ep
UNDEF:000037C0 ; __stdcall Sha256_Update(x, x, x)
UNDEF:000037C0                 extrn _Sha256_Update@12:near
UNDEF:000037C0                                         ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+1FEp
UNDEF:000037C4 ; __stdcall Sha256_Init(x)
UNDEF:000037C4                 extrn _Sha256_Init@4:near
UNDEF:000037C4                                         ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+170p
UNDEF:000037C8 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000037C8                 extrn _memcpy:near      ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+132p
UNDEF:000037C8                                         ; NCrypto::N7z::CKeyInfo::CalcKey(void)+161p ...
UNDEF:000037CC                 extrn ___security_cookie:near
UNDEF:000037CC                                         ; DATA XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+2Dr
UNDEF:000037CC                                         ; NCrypto::N7z::CBase::CBase(void)+22r ...
UNDEF:000037D0                 extrn ___CxxFrameHandler3:near
UNDEF:000037D0                                         ; CODE XREF: __ehhandler$?CalcKey@CKeyInfo@N7z@NCrypto@@QAEXXZ+23j
UNDEF:000037D0                                         ; __ehhandler$??0CBase@N7z@NCrypto@@IAE@XZ+16j ...
UNDEF:000037D4 ; __fastcall __security_check_cookie(x)
UNDEF:000037D4                 extrn @__security_check_cookie@4:near
UNDEF:000037D4                                         ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+2D5p
UNDEF:000037D4                                         ; NCrypto::N7z::CEncoder::WriteCoderProperties(ISequentialOutStream *)+125p ...
UNDEF:000037D8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000037D8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000037D8                                         ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+2BCp
UNDEF:000037D8                                         ; NCrypto::N7z::CBase::PrepareKey(void)+D2p ...
UNDEF:000037DC                 extrn __allshl:near     ; CODE XREF: NCrypto::N7z::CKeyInfo::CalcKey(void)+1D9p
UNDEF:000037E0 ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:000037E0                 extrn __imp__EnterCriticalSection@4:near
UNDEF:000037E0                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15p
UNDEF:000037E0                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15r
UNDEF:000037E4 ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:000037E4                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:000037E4                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15p
UNDEF:000037E4                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15r
UNDEF:000037E8 ; void __thiscall CRandomGenerator::Generate(CRandomGenerator *__hidden this, unsigned __int8 *, unsigned int)
UNDEF:000037E8                 extrn ?Generate@CRandomGenerator@@QAEXPAEI@Z:near
UNDEF:000037E8                                         ; CODE XREF: NCrypto::N7z::CEncoder::ResetInitVector(void)+4Cp
UNDEF:000037EC ; CRandomGenerator g_RandomGenerator
UNDEF:000037EC                 extrn ?g_RandomGenerator@@3VCRandomGenerator@@A:near
UNDEF:000037EC                                         ; DATA XREF: NCrypto::N7z::CEncoder::ResetInitVector(void)+47o
UNDEF:000037F0 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:000037F0                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:000037F0                                         ; CODE XREF: NCrypto::N7z::CEncoder::WriteCoderProperties(ISequentialOutStream *)+109p
UNDEF:000037F4 ; void __cdecl operator delete(void *)
UNDEF:000037F4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$??0CEncoder@N7z@NCrypto@@QAE@XZ$1+4p
UNDEF:000037F4                                         ; __unwindfunclet$??0CDecoder@N7z@NCrypto@@QAE@XZ$1+4p ...
UNDEF:000037F8 ; void *__cdecl operator new(unsigned int)
UNDEF:000037F8                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NCrypto::N7z::CEncoder::CEncoder(void)+94p
UNDEF:000037F8                                         ; NCrypto::N7z::CDecoder::CDecoder(void)+75p ...
UNDEF:000037FC ; const type_info::`vftable'
UNDEF:000037FC                 extrn ??_7type_info@@6B@:near
UNDEF:000037FC                                         ; DATA XREF: .data:NCrypto::N7z::CEncoder `RTTI Type Descriptor'o
UNDEF:000037FC                                         ; .data:NCrypto::N7z::CBaseCoder `RTTI Type Descriptor'o ...
UNDEF:00003800                 extrn _IID_ICryptoResetInitVector:near
UNDEF:00003800                                         ; DATA XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *):loc_1A6Fo
UNDEF:00003804                 extrn _IID_ICompressWriteCoderProperties:near
UNDEF:00003804                                         ; DATA XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *):loc_1A3Bo
UNDEF:00003808                 extrn _IID_ICryptoSetPassword:near
UNDEF:00003808                                         ; DATA XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *):loc_1A07o
UNDEF:00003808                                         ; NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *):loc_26C4o
UNDEF:0000380C ; const IID IID_IUnknown
UNDEF:0000380C                 extrn _IID_IUnknown:near
UNDEF:0000380C                                         ; DATA XREF: NCrypto::N7z::CEncoder::QueryInterface(_GUID const &,void * *)+20o
UNDEF:0000380C                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+24o ...
UNDEF:00003810 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00003810                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00003810                                         ; operator==<uchar>(CBuffer<uchar> const &,CBuffer<uchar> const &)+47p
UNDEF:00003814 ; _DWORD __thiscall NCrypto::CAesCbcCoder::CAesCbcCoder(NCrypto::CAesCbcCoder *__hidden this, bool, unsigned int)
UNDEF:00003814                 extrn ??0CAesCbcCoder@NCrypto@@QAE@_NI@Z:near
UNDEF:00003814                                         ; CODE XREF: NCrypto::CAesCbcEncoder::CAesCbcEncoder(uint)+17p
UNDEF:00003814                                         ; NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+17p
UNDEF:00003818 ; public: virtual long __stdcall NCrypto::CAesCbcCoder::Init(void)
UNDEF:00003818                 extrn ?Init@CAesCbcCoder@NCrypto@@UAGJXZ:near
UNDEF:00003818                                         ; DATA XREF: .rdata:00001E3Co
UNDEF:00003818                                         ; .rdata:000028E0o
UNDEF:0000381C ; public: virtual unsigned int __stdcall NCrypto::CAesCbcCoder::Filter(unsigned char *, unsigned int)
UNDEF:0000381C                 extrn ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z:near
UNDEF:0000381C                                         ; DATA XREF: .rdata:00001E40o
UNDEF:0000381C                                         ; .rdata:000028E4o
UNDEF:00003820 ; public: virtual long __stdcall NCrypto::CAesCbcCoder::SetKey(unsigned char const *, unsigned int)
UNDEF:00003820                 extrn ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z:near
UNDEF:00003820                                         ; DATA XREF: .rdata:00001E24o
UNDEF:00003820                                         ; .rdata:000028C8o
UNDEF:00003824 ; public: virtual long __stdcall NCrypto::CAesCbcCoder::SetInitVector(unsigned char const *, unsigned int)
UNDEF:00003824                 extrn ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z:near
UNDEF:00003824                                         ; DATA XREF: .rdata:00001E28o
UNDEF:00003824                                         ; .rdata:000028CCo
UNDEF:00003828 ; public: virtual long __stdcall NCrypto::CAesCbcCoder::SetCoderProperties(unsigned long const *, struct tagPROPVARIANT const *, unsigned int)
UNDEF:00003828                 extrn ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z:near
UNDEF:00003828                                         ; DATA XREF: .rdata:00001E10o
UNDEF:00003828                                         ; .rdata:000028B4o
UNDEF:0000382C                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:0000382C                                         ; DATA XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *):loc_2128o
UNDEF:00003830                 extrn _IID_ICryptoProperties:near
UNDEF:00003830                                         ; DATA XREF: NCrypto::N7z::CBaseCoder::Init(void)+6Bo
UNDEF:00003830                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *):loc_20F4o
UNDEF:00003834                 extrn __purecall:near   ; DATA XREF: .rdata:const NCrypto::N7z::CBaseCoder::`vftable'{for `ICryptoSetPassword'}o
UNDEF:00003834                                         ; .rdata:000022DCo ...
UNDEF:00003838                 extrn _IID_ICompressSetDecoderProperties2:near
UNDEF:00003838                                         ; DATA XREF: NCrypto::N7z::CDecoder::QueryInterface(_GUID const &,void * *):loc_26F8o
UNDEF:0000383C ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000383C                 extrn __imp__memmove:near
UNDEF:0000383C                                         ; CODE XREF: CRecordVector<void *>::MoveToFront(uint)+44p
UNDEF:0000383C                                         ; CRecordVector<void *>::MoveItems(uint,uint)+36p
UNDEF:0000383C                                         ; DATA XREF: ...
UNDEF:00003840 ; int __cdecl atexit(void (__cdecl *)())
UNDEF:00003840                 extrn _atexit:near      ; CODE XREF: NCrypto::N7z::`dynamic initializer for 'g_GlobalKeyCache''(void)+14p
UNDEF:00003840                                         ; NCrypto::N7z::`dynamic initializer for 'g_GlobalKeyCacheCriticalSection''(void)+12p
UNDEF:00003844 ; __stdcall CriticalSection_Init(x)
UNDEF:00003844                 extrn _CriticalSection_Init@4:near
UNDEF:00003844                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)+12p
UNDEF:00003848 ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00003848                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:00003848                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15p
UNDEF:00003848                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15r
UNDEF:00003848
UNDEF:00003848