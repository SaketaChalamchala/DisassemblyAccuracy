.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 498CA4793FAEA6A7D029E5C3F67D1034
.rdata:00000000 ; Input CRC32 : 6EC6BCCA
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\HashCon.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG74916:                               ; DATA XREF: .data:_kEmptyFileAliaso
.rdata:00000000                 unicode 0, <[Content]>,0
.rdata:00000014 $SG74918        db 'Scanning',0         ; DATA XREF: .data:_kScanningMessageo
.rdata:0000001D                 align 10h
.rdata:00000020 $SG74931        db 'Scan',0             ; DATA XREF: CHashCallbackConsole::StartScanning(void)+65o
.rdata:00000025                 align 4
.rdata:00000028 $SG75026        db 'Size',0             ; DATA XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+12Ao
.rdata:0000002D                 align 10h
.rdata:00000030 $SG75030        db 'Name',0             ; DATA XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+193o
.rdata:00000035                 align 4
.rdata:00000038 $SG75089        db ' : ',0              ; DATA XREF: .data:_k_DigestTitleso
.rdata:0000003C $SG75090        db ' for data:              ',0 ; DATA XREF: .data:000000E0o
.rdata:00000055                 align 4
.rdata:00000058 $SG75091        db ' for data and names:    ',0 ; DATA XREF: .data:000000E4o
.rdata:00000071                 align 4
.rdata:00000074 $SG75092        db ' for streams and names: ',0 ; DATA XREF: .data:000000E8o
.rdata:0000008D                 align 10h
.rdata:00000090 ; char _SG75127[]
.rdata:00000090 $SG75127        db 'Folders',0          ; DATA XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+E1o
.rdata:00000098 ; char _SG75128[]
.rdata:00000098 $SG75128        db 'Files',0            ; DATA XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+F9o
.rdata:0000009E                 align 10h
.rdata:000000A0 ; char _SG75129[]
.rdata:000000A0 $SG75129        db 'Size',0             ; DATA XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+111o
.rdata:000000A5                 align 4
.rdata:000000A8 ; char _SG75131[]
.rdata:000000A8 $SG75131        db 'Alternate streams',0
.rdata:000000A8                                         ; DATA XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+13Do
.rdata:000000BA                 align 4
.rdata:000000BC ; char _SG75132[]
.rdata:000000BC $SG75132        db 'Alternate streams size',0
.rdata:000000BC                                         ; DATA XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+155o
.rdata:000000D3                 align 4
.rdata:000000D3 _rdata          ends
.rdata:000000D3
.data:000000D4 ; ===========================================================================
.data:000000D4
.data:000000D4 ; Segment type: Pure data
.data:000000D4 ; Segment permissions: Read/Write
.data:000000D4 _data           segment dword public 'DATA' use32
.data:000000D4                 assume cs:_data
.data:000000D4                 ;org 0D4h
.data:000000D4 _kEmptyFileAlias dd offset $SG74916     ; DATA XREF: CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)+5Fr
.data:000000D4                                         ; "[Content]"
.data:000000D8 ; char *kScanningMessage
.data:000000D8 _kScanningMessage dd offset $SG74918    ; DATA XREF: CHashCallbackConsole::StartScanning(void)+2Dr
.data:000000D8                                         ; "Scanning"
.data:000000DC ; char *k_DigestTitles
.data:000000DC _k_DigestTitles dd offset $SG75089      ; DATA XREF: PrintSum(CStdOutStream &,CHasherState const &,uint)+A0r
.data:000000DC                                         ; " : "
.data:000000E0                 dd offset $SG75090      ; " for data:              "
.data:000000E4                 dd offset $SG75091      ; " for data and names:    "
.data:000000E8                 dd offset $SG75092      ; " for streams and names: "
.data:000000E8 _data           ends
.data:000000E8
.text:000000EC ; ===========================================================================
.text:000000EC
.text:000000EC ; Segment type: Pure code
.text:000000EC ; Segment permissions: Read/Execute
.text:000000EC _text           segment para public 'CODE' use32
.text:000000EC                 assume cs:_text
.text:000000EC                 ;org 0ECh
.text:000000EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000000EC
.text:000000EC ; =============== S U B R O U T I N E =======================================
.text:000000EC
.text:000000EC ; Attributes: bp-based frame
.text:000000EC
.text:000000EC ; __int32 __thiscall CHashCallbackConsole::CheckBreak(CHashCallbackConsole *__hidden this)
.text:000000EC                 public ?CheckBreak@CHashCallbackConsole@@UAEJXZ
.text:000000EC ?CheckBreak@CHashCallbackConsole@@UAEJXZ proc near
.text:000000EC
.text:000000EC var_4           = dword ptr -4
.text:000000EC
.text:000000EC                 push    ebp
.text:000000ED                 mov     ebp, esp
.text:000000EF                 push    ecx
.text:000000F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000F7                 mov     [ebp+var_4], ecx
.text:000000FA                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:000000FF                 add     esp, 4
.text:00000102                 cmp     ebp, esp
.text:00000104                 call    __RTC_CheckEsp
.text:00000109                 mov     esp, ebp
.text:0000010B                 pop     ebp
.text:0000010C                 retn
.text:0000010C ?CheckBreak@CHashCallbackConsole@@UAEJXZ endp
.text:0000010C
.text:0000010C ; ---------------------------------------------------------------------------
.text:0000010D                 db 0Fh dup(0CCh)
.text:0000011C
.text:0000011C ; =============== S U B R O U T I N E =======================================
.text:0000011C
.text:0000011C ; Attributes: bp-based frame
.text:0000011C
.text:0000011C ; long __stdcall CheckBreak2(void)
.text:0000011C ?CheckBreak2@@YGJXZ proc near           ; CODE XREF: CHashCallbackConsole::CheckBreak(void)+Ep
.text:0000011C                                         ; CHashCallbackConsole::StartScanning(void):loc_1B1p ...
.text:0000011C                 push    ebp             ; this
.text:0000011D                 mov     ebp, esp
.text:0000011F                 call    ?TestBreakSignal@NConsoleClose@@YG_NXZ ; NConsoleClose::TestBreakSignal(void)
.text:00000124                 movzx   eax, al
.text:00000127                 neg     eax
.text:00000129                 sbb     eax, eax
.text:0000012B                 and     eax, 80004004h
.text:00000130                 cmp     ebp, esp
.text:00000132                 call    __RTC_CheckEsp
.text:00000137                 pop     ebp
.text:00000138                 retn
.text:00000138 ?CheckBreak2@@YGJXZ endp
.text:00000138
.text:00000138 ; ---------------------------------------------------------------------------
.text:00000139                 align 4
.text:0000013C
.text:0000013C ; =============== S U B R O U T I N E =======================================
.text:0000013C
.text:0000013C ; Attributes: bp-based frame
.text:0000013C
.text:0000013C ; __int32 __thiscall CHashCallbackConsole::StartScanning(CHashCallbackConsole *__hidden this)
.text:0000013C                 public ?StartScanning@CHashCallbackConsole@@UAEJXZ
.text:0000013C ?StartScanning@CHashCallbackConsole@@UAEJXZ proc near
.text:0000013C
.text:0000013C var_4           = dword ptr -4
.text:0000013C
.text:0000013C                 push    ebp
.text:0000013D                 mov     ebp, esp
.text:0000013F                 push    ecx
.text:00000140                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000147                 mov     [ebp+var_4], ecx
.text:0000014A                 mov     eax, [ebp+var_4]
.text:0000014D                 movzx   ecx, byte ptr [eax+131h]
.text:00000154                 test    ecx, ecx
.text:00000156                 jz      short loc_184
.text:00000158                 mov     edx, [ebp+var_4]
.text:0000015B                 cmp     dword ptr [edx+0B8h], 0
.text:00000162                 jz      short loc_184
.text:00000164                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000169                 mov     eax, ds:_kScanningMessage
.text:0000016E                 push    eax             ; Str
.text:0000016F                 mov     ecx, [ebp+var_4]
.text:00000172                 mov     ecx, [ecx+0B8h]
.text:00000178                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000017D                 mov     ecx, eax
.text:0000017F                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000184
.text:00000184 loc_184:                                ; CODE XREF: CHashCallbackConsole::StartScanning(void)+1Aj
.text:00000184                                         ; CHashCallbackConsole::StartScanning(void)+26j
.text:00000184                 mov     ecx, [ebp+var_4]
.text:00000187                 add     ecx, 8          ; this
.text:0000018A                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:0000018F                 movzx   edx, al
.text:00000192                 test    edx, edx
.text:00000194                 jz      short loc_1B1
.text:00000196                 mov     ecx, [ebp+var_4]
.text:00000199                 add     ecx, 8          ; this
.text:0000019C                 call    ?ClearCurState@CPercentPrinterState@@QAEXXZ ; CPercentPrinterState::ClearCurState(void)
.text:000001A1                 push    offset $SG74931 ; "Scan"
.text:000001A6                 mov     ecx, [ebp+var_4]
.text:000001A9                 add     ecx, 20h ; ' '
.text:000001AC                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:000001B1
.text:000001B1 loc_1B1:                                ; CODE XREF: CHashCallbackConsole::StartScanning(void)+58j
.text:000001B1                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:000001B6                 add     esp, 4
.text:000001B9                 cmp     ebp, esp
.text:000001BB                 call    __RTC_CheckEsp
.text:000001C0                 mov     esp, ebp
.text:000001C2                 pop     ebp
.text:000001C3                 retn
.text:000001C3 ?StartScanning@CHashCallbackConsole@@UAEJXZ endp
.text:000001C3
.text:000001C3 ; ---------------------------------------------------------------------------
.text:000001C4                 db 8 dup(0CCh)
.text:000001CC
.text:000001CC ; =============== S U B R O U T I N E =======================================
.text:000001CC
.text:000001CC ; Attributes: bp-based frame
.text:000001CC
.text:000001CC ; __int32 __thiscall CHashCallbackConsole::ScanProgress(CHashCallbackConsole *this, const struct CDirItemsStat *, const struct UString *, bool)
.text:000001CC                 public ?ScanProgress@CHashCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z
.text:000001CC ?ScanProgress@CHashCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z proc near
.text:000001CC
.text:000001CC var_4           = dword ptr -4
.text:000001CC arg_0           = dword ptr  8
.text:000001CC arg_4           = dword ptr  0Ch
.text:000001CC
.text:000001CC                 push    ebp
.text:000001CD                 mov     ebp, esp
.text:000001CF                 push    ecx
.text:000001D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001D7                 mov     [ebp+var_4], ecx
.text:000001DA                 mov     ecx, [ebp+var_4]
.text:000001DD                 add     ecx, 8          ; this
.text:000001E0                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:000001E5                 movzx   eax, al
.text:000001E8                 test    eax, eax
.text:000001EA                 jz      short loc_23A
.text:000001EC                 mov     ecx, [ebp+arg_0]
.text:000001EF                 mov     edx, [ebp+arg_0]
.text:000001F2                 mov     eax, [ecx]
.text:000001F4                 add     eax, [edx+8]
.text:000001F7                 mov     ecx, [ecx+4]
.text:000001FA                 adc     ecx, [edx+0Ch]
.text:000001FD                 mov     edx, [ebp+arg_0]
.text:00000200                 add     eax, [edx+10h]
.text:00000203                 adc     ecx, [edx+14h]
.text:00000206                 mov     edx, [ebp+var_4]
.text:00000209                 mov     [edx+18h], eax
.text:0000020C                 mov     [edx+1Ch], ecx
.text:0000020F                 mov     ecx, [ebp+arg_0] ; this
.text:00000212                 call    ?GetTotalBytes@CDirItemsStat@@QBE_KXZ ; CDirItemsStat::GetTotalBytes(void)
.text:00000217                 mov     ecx, [ebp+var_4]
.text:0000021A                 mov     [ecx+8], eax
.text:0000021D                 mov     [ecx+0Ch], edx
.text:00000220                 mov     edx, [ebp+arg_4]
.text:00000223                 push    edx
.text:00000224                 mov     ecx, [ebp+var_4]
.text:00000227                 add     ecx, 2Ch ; ','
.text:0000022A                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000022F                 mov     ecx, [ebp+var_4]
.text:00000232                 add     ecx, 8          ; this
.text:00000235                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:0000023A
.text:0000023A loc_23A:                                ; CODE XREF: CHashCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+1Ej
.text:0000023A                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:0000023F                 add     esp, 4
.text:00000242                 cmp     ebp, esp
.text:00000244                 call    __RTC_CheckEsp
.text:00000249                 mov     esp, ebp
.text:0000024B                 pop     ebp
.text:0000024C                 retn    0Ch
.text:0000024C ?ScanProgress@CHashCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z endp
.text:0000024C
.text:0000024C ; ---------------------------------------------------------------------------
.text:0000024F                 db 0Dh dup(0CCh)
.text:0000025C
.text:0000025C ; =============== S U B R O U T I N E =======================================
.text:0000025C
.text:0000025C ; Attributes: bp-based frame
.text:0000025C
.text:0000025C ; __int32 __thiscall CHashCallbackConsole::ScanError(CHashCallbackConsole *this, const struct UString *, unsigned __int32)
.text:0000025C                 public ?ScanError@CHashCallbackConsole@@UAEJABVUString@@K@Z
.text:0000025C ?ScanError@CHashCallbackConsole@@UAEJABVUString@@K@Z proc near
.text:0000025C
.text:0000025C var_4           = dword ptr -4
.text:0000025C arg_0           = dword ptr  8
.text:0000025C arg_4           = dword ptr  0Ch
.text:0000025C
.text:0000025C                 push    ebp
.text:0000025D                 mov     ebp, esp
.text:0000025F                 push    ecx
.text:00000260                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000267                 mov     [ebp+var_4], ecx
.text:0000026A                 mov     eax, [ebp+arg_4]
.text:0000026D                 push    eax             ; unsigned __int32
.text:0000026E                 mov     ecx, [ebp+arg_0]
.text:00000271                 push    ecx             ; struct UString *
.text:00000272                 mov     ecx, [ebp+var_4]
.text:00000275                 add     ecx, 8          ; this
.text:00000278                 call    ?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z ; CCallbackConsoleBase::ScanError_Base(UString const &,ulong)
.text:0000027D                 add     esp, 4
.text:00000280                 cmp     ebp, esp
.text:00000282                 call    __RTC_CheckEsp
.text:00000287                 mov     esp, ebp
.text:00000289                 pop     ebp
.text:0000028A                 retn    8
.text:0000028A ?ScanError@CHashCallbackConsole@@UAEJABVUString@@K@Z endp
.text:0000028A
.text:0000028A ; ---------------------------------------------------------------------------
.text:0000028D                 db 0Fh dup(0CCh)
.text:0000029C
.text:0000029C ; =============== S U B R O U T I N E =======================================
.text:0000029C
.text:0000029C ; Attributes: bp-based frame
.text:0000029C
.text:0000029C ; __int32 __thiscall CHashCallbackConsole::FinishScanning(CHashCallbackConsole *this, const struct CDirItemsStat *)
.text:0000029C                 public ?FinishScanning@CHashCallbackConsole@@UAEJABUCDirItemsStat@@@Z
.text:0000029C ?FinishScanning@CHashCallbackConsole@@UAEJABUCDirItemsStat@@@Z proc near
.text:0000029C
.text:0000029C var_4           = dword ptr -4
.text:0000029C arg_0           = dword ptr  8
.text:0000029C
.text:0000029C                 push    ebp
.text:0000029D                 mov     ebp, esp
.text:0000029F                 push    ecx
.text:000002A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002A7                 mov     [ebp+var_4], ecx
.text:000002AA                 mov     ecx, [ebp+var_4]
.text:000002AD                 add     ecx, 8          ; this
.text:000002B0                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:000002B5                 movzx   eax, al
.text:000002B8                 test    eax, eax
.text:000002BA                 jz      short loc_2D4
.text:000002BC                 push    1               ; bool
.text:000002BE                 mov     ecx, [ebp+var_4]
.text:000002C1                 add     ecx, 8          ; this
.text:000002C4                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:000002C9                 mov     ecx, [ebp+var_4]
.text:000002CC                 add     ecx, 8          ; this
.text:000002CF                 call    ?ClearCurState@CPercentPrinterState@@QAEXXZ ; CPercentPrinterState::ClearCurState(void)
.text:000002D4
.text:000002D4 loc_2D4:                                ; CODE XREF: CHashCallbackConsole::FinishScanning(CDirItemsStat const &)+1Ej
.text:000002D4                 mov     ecx, [ebp+var_4]
.text:000002D7                 movzx   edx, byte ptr [ecx+131h]
.text:000002DE                 test    edx, edx
.text:000002E0                 jz      short loc_336
.text:000002E2                 mov     eax, [ebp+var_4]
.text:000002E5                 cmp     dword ptr [eax+0B8h], 0
.text:000002EC                 jz      short loc_336
.text:000002EE                 mov     ecx, [ebp+arg_0]
.text:000002F1                 push    ecx             ; struct CDirItemsStat *
.text:000002F2                 mov     edx, [ebp+var_4]
.text:000002F5                 add     edx, 124h
.text:000002FB                 push    edx             ; struct AString *
.text:000002FC                 call    ?Print_DirItemsStat@@YGXAAVAString@@ABUCDirItemsStat@@@Z ; Print_DirItemsStat(AString &,CDirItemsStat const &)
.text:00000301                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000306                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000030B                 mov     ecx, [ebp+var_4]
.text:0000030E                 add     ecx, 124h
.text:00000314                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000319                 push    eax             ; Str
.text:0000031A                 mov     eax, [ebp+var_4]
.text:0000031D                 mov     ecx, [eax+0B8h]
.text:00000323                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000328                 mov     ecx, eax
.text:0000032A                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000032F                 mov     ecx, eax
.text:00000331                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000336
.text:00000336 loc_336:                                ; CODE XREF: CHashCallbackConsole::FinishScanning(CDirItemsStat const &)+44j
.text:00000336                                         ; CHashCallbackConsole::FinishScanning(CDirItemsStat const &)+50j
.text:00000336                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:0000033B                 add     esp, 4
.text:0000033E                 cmp     ebp, esp
.text:00000340                 call    __RTC_CheckEsp
.text:00000345                 mov     esp, ebp
.text:00000347                 pop     ebp
.text:00000348                 retn    4
.text:00000348 ?FinishScanning@CHashCallbackConsole@@UAEJABUCDirItemsStat@@@Z endp
.text:00000348
.text:00000348 ; ---------------------------------------------------------------------------
.text:0000034B                 align 4
.text:0000034C
.text:0000034C ; =============== S U B R O U T I N E =======================================
.text:0000034C
.text:0000034C ; Attributes: bp-based frame
.text:0000034C
.text:0000034C ; __int32 __thiscall CHashCallbackConsole::SetNumFiles(CHashCallbackConsole *this, unsigned __int64)
.text:0000034C                 public ?SetNumFiles@CHashCallbackConsole@@UAEJ_K@Z
.text:0000034C ?SetNumFiles@CHashCallbackConsole@@UAEJ_K@Z proc near
.text:0000034C
.text:0000034C var_4           = dword ptr -4
.text:0000034C
.text:0000034C                 push    ebp
.text:0000034D                 mov     ebp, esp
.text:0000034F                 push    ecx
.text:00000350                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000357                 mov     [ebp+var_4], ecx
.text:0000035A                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:0000035F                 add     esp, 4
.text:00000362                 cmp     ebp, esp
.text:00000364                 call    __RTC_CheckEsp
.text:00000369                 mov     esp, ebp
.text:0000036B                 pop     ebp
.text:0000036C                 retn    8
.text:0000036C ?SetNumFiles@CHashCallbackConsole@@UAEJ_K@Z endp
.text:0000036C
.text:0000036C ; ---------------------------------------------------------------------------
.text:0000036F                 db 0Dh dup(0CCh)
.text:0000037C
.text:0000037C ; =============== S U B R O U T I N E =======================================
.text:0000037C
.text:0000037C ; Attributes: bp-based frame
.text:0000037C
.text:0000037C ; __int32 __thiscall CHashCallbackConsole::SetTotal(CHashCallbackConsole *this, unsigned __int64)
.text:0000037C                 public ?SetTotal@CHashCallbackConsole@@UAEJ_K@Z
.text:0000037C ?SetTotal@CHashCallbackConsole@@UAEJ_K@Z proc near
.text:0000037C
.text:0000037C var_4           = dword ptr -4
.text:0000037C arg_0           = qword ptr  8
.text:0000037C
.text:0000037C                 push    ebp
.text:0000037D                 mov     ebp, esp
.text:0000037F                 push    ecx
.text:00000380                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000387                 mov     [ebp+var_4], ecx
.text:0000038A                 mov     ecx, [ebp+var_4]
.text:0000038D                 add     ecx, 8          ; this
.text:00000390                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:00000395                 movzx   eax, al
.text:00000398                 test    eax, eax
.text:0000039A                 jz      short loc_3B6
.text:0000039C                 mov     ecx, [ebp+var_4]
.text:0000039F                 mov     edx, dword ptr [ebp+arg_0]
.text:000003A2                 mov     [ecx+10h], edx
.text:000003A5                 mov     eax, dword ptr [ebp+arg_0+4]
.text:000003A8                 mov     [ecx+14h], eax
.text:000003AB                 mov     ecx, [ebp+var_4]
.text:000003AE                 add     ecx, 8          ; this
.text:000003B1                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:000003B6
.text:000003B6 loc_3B6:                                ; CODE XREF: CHashCallbackConsole::SetTotal(unsigned __int64)+1Ej
.text:000003B6                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:000003BB                 add     esp, 4
.text:000003BE                 cmp     ebp, esp
.text:000003C0                 call    __RTC_CheckEsp
.text:000003C5                 mov     esp, ebp
.text:000003C7                 pop     ebp
.text:000003C8                 retn    8
.text:000003C8 ?SetTotal@CHashCallbackConsole@@UAEJ_K@Z endp
.text:000003C8
.text:000003C8 ; ---------------------------------------------------------------------------
.text:000003CB                 align 4
.text:000003CC
.text:000003CC ; =============== S U B R O U T I N E =======================================
.text:000003CC
.text:000003CC ; Attributes: bp-based frame
.text:000003CC
.text:000003CC ; __int32 __thiscall CHashCallbackConsole::SetCompleted(CHashCallbackConsole *this, const unsigned __int64 *)
.text:000003CC                 public ?SetCompleted@CHashCallbackConsole@@UAEJPB_K@Z
.text:000003CC ?SetCompleted@CHashCallbackConsole@@UAEJPB_K@Z proc near
.text:000003CC
.text:000003CC var_4           = dword ptr -4
.text:000003CC arg_0           = dword ptr  8
.text:000003CC
.text:000003CC                 push    ebp
.text:000003CD                 mov     ebp, esp
.text:000003CF                 push    ecx
.text:000003D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003D7                 mov     [ebp+var_4], ecx
.text:000003DA                 cmp     [ebp+arg_0], 0
.text:000003DE                 jz      short loc_40E
.text:000003E0                 mov     ecx, [ebp+var_4]
.text:000003E3                 add     ecx, 8          ; this
.text:000003E6                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:000003EB                 movzx   eax, al
.text:000003EE                 test    eax, eax
.text:000003F0                 jz      short loc_40E
.text:000003F2                 mov     ecx, [ebp+var_4]
.text:000003F5                 mov     edx, [ebp+arg_0]
.text:000003F8                 mov     eax, [edx]
.text:000003FA                 mov     [ecx+8], eax
.text:000003FD                 mov     edx, [edx+4]
.text:00000400                 mov     [ecx+0Ch], edx
.text:00000403                 mov     ecx, [ebp+var_4]
.text:00000406                 add     ecx, 8          ; this
.text:00000409                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:0000040E
.text:0000040E loc_40E:                                ; CODE XREF: CHashCallbackConsole::SetCompleted(unsigned __int64 const *)+12j
.text:0000040E                                         ; CHashCallbackConsole::SetCompleted(unsigned __int64 const *)+24j
.text:0000040E                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00000413                 add     esp, 4
.text:00000416                 cmp     ebp, esp
.text:00000418                 call    __RTC_CheckEsp
.text:0000041D                 mov     esp, ebp
.text:0000041F                 pop     ebp
.text:00000420                 retn    4
.text:00000420 ?SetCompleted@CHashCallbackConsole@@UAEJPB_K@Z endp
.text:00000420
.text:00000420 ; ---------------------------------------------------------------------------
.text:00000423                 db 9 dup(0CCh)
.text:0000042C
.text:0000042C ; =============== S U B R O U T I N E =======================================
.text:0000042C
.text:0000042C ; Attributes: bp-based frame
.text:0000042C
.text:0000042C ; private: void __thiscall CHashCallbackConsole::PrintSeparatorLine(class CObjectVector<struct CHasherState> const &)
.text:0000042C                 public ?PrintSeparatorLine@CHashCallbackConsole@@AAEXABV?$CObjectVector@UCHasherState@@@@@Z
.text:0000042C ?PrintSeparatorLine@CHashCallbackConsole@@AAEXABV?$CObjectVector@UCHasherState@@@@@Z proc near
.text:0000042C                                         ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+1D9p
.text:0000042C                                         ; CHashCallbackConsole::AfterLastFile(CHashBundle const &)+54p
.text:0000042C
.text:0000042C var_C           = dword ptr -0Ch
.text:0000042C var_8           = dword ptr -8
.text:0000042C var_4           = dword ptr -4
.text:0000042C arg_0           = dword ptr  8
.text:0000042C
.text:0000042C                 push    ebp
.text:0000042D                 mov     ebp, esp
.text:0000042F                 sub     esp, 0Ch
.text:00000432                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000439                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000440                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000447                 mov     [ebp+var_4], ecx
.text:0000044A                 mov     ecx, [ebp+var_4]
.text:0000044D                 add     ecx, 124h       ; this
.text:00000453                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00000458                 mov     [ebp+var_8], 0
.text:0000045F                 jmp     short loc_46A
.text:00000461 ; ---------------------------------------------------------------------------
.text:00000461
.text:00000461 loc_461:                                ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+8Aj
.text:00000461                 mov     eax, [ebp+var_8]
.text:00000464                 add     eax, 1
.text:00000467                 mov     [ebp+var_8], eax
.text:0000046A
.text:0000046A loc_46A:                                ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+33j
.text:0000046A                 mov     ecx, [ebp+arg_0]
.text:0000046D                 call    ?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ ; CObjectVector<CHasherState>::Size(void)
.text:00000472                 cmp     [ebp+var_8], eax
.text:00000475                 jnb     short loc_4B8
.text:00000477                 cmp     [ebp+var_8], 0
.text:0000047B                 jz      short loc_48B
.text:0000047D                 mov     ecx, [ebp+var_4]
.text:00000480                 add     ecx, 124h       ; this
.text:00000486                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:0000048B
.text:0000048B loc_48B:                                ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+4Fj
.text:0000048B                 mov     ecx, [ebp+var_8]
.text:0000048E                 push    ecx
.text:0000048F                 mov     ecx, [ebp+arg_0]
.text:00000492                 call    ??A?$CObjectVector@UCHasherState@@@@QBEABUCHasherState@@I@Z ; CObjectVector<CHasherState>::operator[](uint)
.text:00000497                 mov     [ebp+var_C], eax
.text:0000049A                 mov     edx, [ebp+var_C]
.text:0000049D                 mov     eax, [edx+10h]
.text:000004A0                 push    eax
.text:000004A1                 call    ?GetColumnWidth@@YGII@Z ; GetColumnWidth(uint)
.text:000004A6                 push    eax
.text:000004A7                 mov     ecx, [ebp+var_4]
.text:000004AA                 add     ecx, 124h
.text:000004B0                 push    ecx
.text:000004B1                 call    ?AddMinuses@@YGXAAVAString@@I@Z ; AddMinuses(AString &,uint)
.text:000004B6                 jmp     short loc_461
.text:000004B8 ; ---------------------------------------------------------------------------
.text:000004B8
.text:000004B8 loc_4B8:                                ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+49j
.text:000004B8                 mov     edx, [ebp+var_4]
.text:000004BB                 movzx   eax, byte ptr [edx+132h]
.text:000004C2                 test    eax, eax
.text:000004C4                 jz      short loc_4E5
.text:000004C6                 mov     ecx, [ebp+var_4]
.text:000004C9                 add     ecx, 124h       ; this
.text:000004CF                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:000004D4                 push    0Dh
.text:000004D6                 mov     ecx, [ebp+var_4]
.text:000004D9                 add     ecx, 124h
.text:000004DF                 push    ecx
.text:000004E0                 call    ?AddMinuses@@YGXAAVAString@@I@Z ; AddMinuses(AString &,uint)
.text:000004E5
.text:000004E5 loc_4E5:                                ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+98j
.text:000004E5                 mov     edx, [ebp+var_4]
.text:000004E8                 movzx   eax, byte ptr [edx+133h]
.text:000004EF                 test    eax, eax
.text:000004F1                 jz      short loc_50C
.text:000004F3                 mov     ecx, [ebp+var_4] ; this
.text:000004F6                 call    ?AddSpacesBeforeName@CHashCallbackConsole@@AAEXXZ ; CHashCallbackConsole::AddSpacesBeforeName(void)
.text:000004FB                 push    0Ch
.text:000004FD                 mov     ecx, [ebp+var_4]
.text:00000500                 add     ecx, 124h
.text:00000506                 push    ecx
.text:00000507                 call    ?AddMinuses@@YGXAAVAString@@I@Z ; AddMinuses(AString &,uint)
.text:0000050C
.text:0000050C loc_50C:                                ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+C5j
.text:0000050C                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000511                 mov     ecx, [ebp+var_4]
.text:00000514                 add     ecx, 124h
.text:0000051A                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000051F                 push    eax             ; Str
.text:00000520                 mov     edx, [ebp+var_4]
.text:00000523                 mov     ecx, [edx+0B8h]
.text:00000529                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000052E                 mov     ecx, eax
.text:00000530                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000535                 add     esp, 0Ch
.text:00000538                 cmp     ebp, esp
.text:0000053A                 call    __RTC_CheckEsp
.text:0000053F                 mov     esp, ebp
.text:00000541                 pop     ebp
.text:00000542                 retn    4
.text:00000542 ?PrintSeparatorLine@CHashCallbackConsole@@AAEXABV?$CObjectVector@UCHasherState@@@@@Z endp
.text:00000542
.text:00000542 ; ---------------------------------------------------------------------------
.text:00000545                 db 7 dup(0CCh)
.text:0000054C
.text:0000054C ; =============== S U B R O U T I N E =======================================
.text:0000054C
.text:0000054C ; Attributes: bp-based frame
.text:0000054C
.text:0000054C ; void __stdcall AddMinuses(class AString &, unsigned int)
.text:0000054C ?AddMinuses@@YGXAAVAString@@I@Z proc near
.text:0000054C                                         ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+85p
.text:0000054C                                         ; CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+B4p ...
.text:0000054C
.text:0000054C var_4           = dword ptr -4
.text:0000054C arg_0           = dword ptr  8
.text:0000054C arg_4           = dword ptr  0Ch
.text:0000054C
.text:0000054C                 push    ebp
.text:0000054D                 mov     ebp, esp
.text:0000054F                 push    ecx
.text:00000550                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000557                 mov     [ebp+var_4], 0
.text:0000055E                 jmp     short loc_569
.text:00000560 ; ---------------------------------------------------------------------------
.text:00000560
.text:00000560 loc_560:                                ; CODE XREF: AddMinuses(AString &,uint)+2Fj
.text:00000560                 mov     eax, [ebp+var_4]
.text:00000563                 add     eax, 1
.text:00000566                 mov     [ebp+var_4], eax
.text:00000569
.text:00000569 loc_569:                                ; CODE XREF: AddMinuses(AString &,uint)+12j
.text:00000569                 mov     ecx, [ebp+var_4]
.text:0000056C                 cmp     ecx, [ebp+arg_4]
.text:0000056F                 jnb     short loc_57D
.text:00000571                 push    2Dh ; '-'
.text:00000573                 mov     ecx, [ebp+arg_0]
.text:00000576                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:0000057B                 jmp     short loc_560
.text:0000057D ; ---------------------------------------------------------------------------
.text:0000057D
.text:0000057D loc_57D:                                ; CODE XREF: AddMinuses(AString &,uint)+23j
.text:0000057D                 add     esp, 4
.text:00000580                 cmp     ebp, esp
.text:00000582                 call    __RTC_CheckEsp
.text:00000587                 mov     esp, ebp
.text:00000589                 pop     ebp
.text:0000058A                 retn    8
.text:0000058A ?AddMinuses@@YGXAAVAString@@I@Z endp
.text:0000058A
.text:0000058A ; ---------------------------------------------------------------------------
.text:0000058D                 db 0Fh dup(0CCh)
.text:0000059C
.text:0000059C ; =============== S U B R O U T I N E =======================================
.text:0000059C
.text:0000059C ; Attributes: bp-based frame
.text:0000059C
.text:0000059C ; unsigned int __stdcall GetColumnWidth(unsigned int)
.text:0000059C ?GetColumnWidth@@YGII@Z proc near       ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+75p
.text:0000059C                                         ; CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+E5p ...
.text:0000059C
.text:0000059C var_8           = dword ptr -8
.text:0000059C var_4           = dword ptr -4
.text:0000059C arg_0           = dword ptr  8
.text:0000059C
.text:0000059C                 push    ebp
.text:0000059D                 mov     ebp, esp
.text:0000059F                 sub     esp, 8
.text:000005A2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005A9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005B0                 mov     eax, [ebp+arg_0]
.text:000005B3                 shl     eax, 1
.text:000005B5                 mov     [ebp+var_4], eax
.text:000005B8                 cmp     [ebp+var_4], 8
.text:000005BC                 jnb     short loc_5C7
.text:000005BE                 mov     [ebp+var_8], 8
.text:000005C5                 jmp     short loc_5CD
.text:000005C7 ; ---------------------------------------------------------------------------
.text:000005C7
.text:000005C7 loc_5C7:                                ; CODE XREF: GetColumnWidth(uint)+20j
.text:000005C7                 mov     ecx, [ebp+var_4]
.text:000005CA                 mov     [ebp+var_8], ecx
.text:000005CD
.text:000005CD loc_5CD:                                ; CODE XREF: GetColumnWidth(uint)+29j
.text:000005CD                 mov     eax, [ebp+var_8]
.text:000005D0                 mov     esp, ebp
.text:000005D2                 pop     ebp
.text:000005D3                 retn    4
.text:000005D3 ?GetColumnWidth@@YGII@Z endp
.text:000005D3
.text:000005D3 ; ---------------------------------------------------------------------------
.text:000005D6                 db 6 dup(0CCh)
.text:000005DC
.text:000005DC ; =============== S U B R O U T I N E =======================================
.text:000005DC
.text:000005DC ; Attributes: bp-based frame
.text:000005DC
.text:000005DC ; __int32 __thiscall CHashCallbackConsole::BeforeFirstFile(CHashCallbackConsole *this, const struct CHashBundle *)
.text:000005DC                 public ?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z
.text:000005DC ?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z proc near
.text:000005DC
.text:000005DC var_2C          = dword ptr -2Ch
.text:000005DC var_28          = dword ptr -28h
.text:000005DC var_24          = dword ptr -24h
.text:000005DC var_20          = dword ptr -20h
.text:000005DC var_1C          = dword ptr -1Ch
.text:000005DC var_18          = dword ptr -18h
.text:000005DC var_14          = dword ptr -14h
.text:000005DC var_10          = dword ptr -10h
.text:000005DC var_C           = dword ptr -0Ch
.text:000005DC var_4           = dword ptr -4
.text:000005DC arg_0           = dword ptr  8
.text:000005DC
.text:000005DC                 push    ebp
.text:000005DD                 mov     ebp, esp
.text:000005DF                 push    0FFFFFFFFh
.text:000005E1                 push    offset __ehhandler$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z
.text:000005E6                 mov     eax, large fs:0
.text:000005EC                 push    eax
.text:000005ED                 sub     esp, 20h
.text:000005F0                 push    esi
.text:000005F1                 mov     eax, 0CCCCCCCCh
.text:000005F6                 mov     [ebp+var_2C], eax
.text:000005F9                 mov     [ebp+var_28], eax
.text:000005FC                 mov     [ebp+var_24], eax
.text:000005FF                 mov     [ebp+var_20], eax
.text:00000602                 mov     [ebp+var_1C], eax
.text:00000605                 mov     [ebp+var_18], eax
.text:00000608                 mov     [ebp+var_14], eax
.text:0000060B                 mov     [ebp+var_10], eax
.text:0000060E                 mov     eax, dword ptr ds:___security_cookie
.text:00000613                 xor     eax, ebp
.text:00000615                 push    eax
.text:00000616                 lea     eax, [ebp+var_C]
.text:00000619                 mov     large fs:0, eax
.text:0000061F                 mov     [ebp+var_10], ecx
.text:00000622                 mov     eax, [ebp+var_10]
.text:00000625                 movzx   ecx, byte ptr [eax+131h]
.text:0000062C                 test    ecx, ecx
.text:0000062E                 jz      loc_7BA
.text:00000634                 mov     edx, [ebp+var_10]
.text:00000637                 cmp     dword ptr [edx+0B8h], 0
.text:0000063E                 jz      loc_7BA
.text:00000644                 mov     ecx, [ebp+var_10]
.text:00000647                 add     ecx, 124h       ; this
.text:0000064D                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00000652                 mov     ecx, [ebp+var_10]
.text:00000655                 add     ecx, 8          ; this
.text:00000658                 call    ?ClosePercents_for_so@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents_for_so(void)
.text:0000065D                 mov     [ebp+var_14], 0
.text:00000664                 jmp     short loc_66F
.text:00000666 ; ---------------------------------------------------------------------------
.text:00000666
.text:00000666 loc_666:                                ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+109j
.text:00000666                 mov     eax, [ebp+var_14]
.text:00000669                 add     eax, 1
.text:0000066C                 mov     [ebp+var_14], eax
.text:0000066F
.text:0000066F loc_66F:                                ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+88j
.text:0000066F                 mov     ecx, [ebp+arg_0]
.text:00000672                 add     ecx, 4
.text:00000675                 call    ?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ ; CObjectVector<CHasherState>::Size(void)
.text:0000067A                 cmp     [ebp+var_14], eax
.text:0000067D                 jnb     short loc_6EA
.text:0000067F                 cmp     [ebp+var_14], 0
.text:00000683                 jz      short loc_693
.text:00000685                 mov     ecx, [ebp+var_10]
.text:00000688                 add     ecx, 124h       ; this
.text:0000068E                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:00000693
.text:00000693 loc_693:                                ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+A7j
.text:00000693                 mov     ecx, [ebp+var_14]
.text:00000696                 push    ecx
.text:00000697                 mov     ecx, [ebp+arg_0]
.text:0000069A                 add     ecx, 4
.text:0000069D                 call    ??A?$CObjectVector@UCHasherState@@@@QBEABUCHasherState@@I@Z ; CObjectVector<CHasherState>::operator[](uint)
.text:000006A2                 mov     [ebp+var_18], eax
.text:000006A5                 mov     edx, [ebp+var_18]
.text:000006A8                 add     edx, 4
.text:000006AB                 push    edx
.text:000006AC                 mov     ecx, [ebp+var_10]
.text:000006AF                 add     ecx, 124h
.text:000006B5                 call    ??YAString@@QAEAAV0@ABV0@@Z ; AString::operator+=(AString const &)
.text:000006BA                 mov     eax, [ebp+var_18]
.text:000006BD                 mov     ecx, [eax+10h]
.text:000006C0                 push    ecx
.text:000006C1                 call    ?GetColumnWidth@@YGII@Z ; GetColumnWidth(uint)
.text:000006C6                 mov     esi, eax
.text:000006C8                 mov     ecx, [ebp+var_18]
.text:000006CB                 add     ecx, 4          ; this
.text:000006CE                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000006D3                 sub     esi, eax
.text:000006D5                 push    esi             ; int
.text:000006D6                 mov     edx, [ebp+var_10]
.text:000006D9                 add     edx, 124h
.text:000006DF                 push    edx             ; AString *
.text:000006E0                 call    ?AddSpaces_if_Positive@@YGXAAVAString@@H@Z ; AddSpaces_if_Positive(AString &,int)
.text:000006E5                 jmp     loc_666
.text:000006EA ; ---------------------------------------------------------------------------
.text:000006EA
.text:000006EA loc_6EA:                                ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+A1j
.text:000006EA                 mov     eax, [ebp+var_10]
.text:000006ED                 movzx   ecx, byte ptr [eax+132h]
.text:000006F4                 test    ecx, ecx
.text:000006F6                 jz      short loc_759
.text:000006F8                 mov     ecx, [ebp+var_10]
.text:000006FB                 add     ecx, 124h       ; this
.text:00000701                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:00000706                 push    offset $SG75026 ; "Size"
.text:0000070B                 lea     ecx, [ebp+var_28]
.text:0000070E                 call    ??0AString@@QAE@PBD@Z ; AString::AString(char const *)
.text:00000713                 mov     [ebp+var_4], 0
.text:0000071A                 lea     ecx, [ebp+var_28] ; this
.text:0000071D                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000722                 mov     edx, 0Dh
.text:00000727                 sub     edx, eax
.text:00000729                 push    edx             ; int
.text:0000072A                 mov     eax, [ebp+var_10]
.text:0000072D                 add     eax, 124h
.text:00000732                 push    eax             ; AString *
.text:00000733                 call    ?AddSpaces_if_Positive@@YGXAAVAString@@H@Z ; AddSpaces_if_Positive(AString &,int)
.text:00000738                 lea     ecx, [ebp+var_28]
.text:0000073B                 push    ecx
.text:0000073C                 mov     ecx, [ebp+var_10]
.text:0000073F                 add     ecx, 124h
.text:00000745                 call    ??YAString@@QAEAAV0@ABV0@@Z ; AString::operator+=(AString const &)
.text:0000074A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000751                 lea     ecx, [ebp+var_28] ; this
.text:00000754                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000759
.text:00000759 loc_759:                                ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+11Aj
.text:00000759                 mov     edx, [ebp+var_10]
.text:0000075C                 movzx   eax, byte ptr [edx+133h]
.text:00000763                 test    eax, eax
.text:00000765                 jz      short loc_782
.text:00000767                 mov     ecx, [ebp+var_10] ; this
.text:0000076A                 call    ?AddSpacesBeforeName@CHashCallbackConsole@@AAEXXZ ; CHashCallbackConsole::AddSpacesBeforeName(void)
.text:0000076F                 push    offset $SG75030 ; "Name"
.text:00000774                 mov     ecx, [ebp+var_10]
.text:00000777                 add     ecx, 124h
.text:0000077D                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000782
.text:00000782 loc_782:                                ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+189j
.text:00000782                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000787                 mov     ecx, [ebp+var_10]
.text:0000078A                 add     ecx, 124h
.text:00000790                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000795                 push    eax             ; Str
.text:00000796                 mov     ecx, [ebp+var_10]
.text:00000799                 mov     ecx, [ecx+0B8h]
.text:0000079F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000007A4                 mov     ecx, eax
.text:000007A6                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000007AB                 mov     edx, [ebp+arg_0]
.text:000007AE                 add     edx, 4
.text:000007B1                 push    edx
.text:000007B2                 mov     ecx, [ebp+var_10]
.text:000007B5                 call    ?PrintSeparatorLine@CHashCallbackConsole@@AAEXABV?$CObjectVector@UCHasherState@@@@@Z ; CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)
.text:000007BA
.text:000007BA loc_7BA:                                ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+52j
.text:000007BA                                         ; CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+62j
.text:000007BA                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:000007BF                 push    edx
.text:000007C0                 mov     ecx, ebp
.text:000007C2                 push    eax
.text:000007C3                 lea     edx, $LN14
.text:000007C9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000007CE                 pop     eax
.text:000007CF                 pop     edx
.text:000007D0                 mov     ecx, [ebp+var_C]
.text:000007D3                 mov     large fs:0, ecx
.text:000007DA                 pop     ecx
.text:000007DB                 pop     esi
.text:000007DC                 add     esp, 2Ch
.text:000007DF                 cmp     ebp, esp
.text:000007E1                 call    __RTC_CheckEsp
.text:000007E6                 mov     esp, ebp
.text:000007E8                 pop     ebp
.text:000007E9                 retn    4
.text:000007E9 ?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z endp
.text:000007E9
.text:000007E9 ; ---------------------------------------------------------------------------
.text:000007EC $LN14           dd 1                    ; DATA XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+1E7o
.text:000007F0                 dd offset $LN13
.text:000007F4 $LN13           dd 0FFFFFFD8h, 0Ch      ; DATA XREF: .text:000007F0o
.text:000007FC                 dd offset $LN11
.text:00000800 $LN11           dd 0CC003273h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000007FCo
.text:0000080C
.text:0000080C ; =============== S U B R O U T I N E =======================================
.text:0000080C
.text:0000080C ; Attributes: bp-based frame
.text:0000080C
.text:0000080C ; int __stdcall AddSpaces_if_Positive(AString *, int)
.text:0000080C ?AddSpaces_if_Positive@@YGXAAVAString@@H@Z proc near
.text:0000080C                                         ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+104p
.text:0000080C                                         ; CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+157p ...
.text:0000080C
.text:0000080C var_4           = dword ptr -4
.text:0000080C arg_0           = dword ptr  8
.text:0000080C arg_4           = dword ptr  0Ch
.text:0000080C
.text:0000080C                 push    ebp
.text:0000080D                 mov     ebp, esp
.text:0000080F                 push    ecx
.text:00000810                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000817                 mov     [ebp+var_4], 0
.text:0000081E                 jmp     short loc_829
.text:00000820 ; ---------------------------------------------------------------------------
.text:00000820
.text:00000820 loc_820:                                ; CODE XREF: AddSpaces_if_Positive(AString &,int)+2Dj
.text:00000820                 mov     eax, [ebp+var_4]
.text:00000823                 add     eax, 1
.text:00000826                 mov     [ebp+var_4], eax
.text:00000829
.text:00000829 loc_829:                                ; CODE XREF: AddSpaces_if_Positive(AString &,int)+12j
.text:00000829                 mov     ecx, [ebp+var_4]
.text:0000082C                 cmp     ecx, [ebp+arg_4]
.text:0000082F                 jge     short loc_83B
.text:00000831                 mov     ecx, [ebp+arg_0] ; this
.text:00000834                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:00000839                 jmp     short loc_820
.text:0000083B ; ---------------------------------------------------------------------------
.text:0000083B
.text:0000083B loc_83B:                                ; CODE XREF: AddSpaces_if_Positive(AString &,int)+23j
.text:0000083B                 add     esp, 4
.text:0000083E                 cmp     ebp, esp
.text:00000840                 call    __RTC_CheckEsp
.text:00000845                 mov     esp, ebp
.text:00000847                 pop     ebp
.text:00000848                 retn    8
.text:00000848 ?AddSpaces_if_Positive@@YGXAAVAString@@H@Z endp
.text:00000848
.text:00000848 ; ---------------------------------------------------------------------------
.text:0000084B                 align 4
.text:0000084C
.text:0000084C ; =============== S U B R O U T I N E =======================================
.text:0000084C
.text:0000084C ; Attributes: bp-based frame
.text:0000084C
.text:0000084C ; __int32 __thiscall CHashCallbackConsole::OpenFileError(CHashCallbackConsole *this, const struct UString *, unsigned __int32)
.text:0000084C                 public ?OpenFileError@CHashCallbackConsole@@UAEJABVUString@@K@Z
.text:0000084C ?OpenFileError@CHashCallbackConsole@@UAEJABVUString@@K@Z proc near
.text:0000084C
.text:0000084C var_4           = dword ptr -4
.text:0000084C arg_0           = dword ptr  8
.text:0000084C arg_4           = dword ptr  0Ch
.text:0000084C
.text:0000084C                 push    ebp
.text:0000084D                 mov     ebp, esp
.text:0000084F                 push    ecx
.text:00000850                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000857                 mov     [ebp+var_4], ecx
.text:0000085A                 mov     eax, [ebp+arg_4]
.text:0000085D                 push    eax             ; unsigned __int32
.text:0000085E                 mov     ecx, [ebp+arg_0]
.text:00000861                 push    ecx             ; struct UString *
.text:00000862                 mov     ecx, [ebp+var_4]
.text:00000865                 add     ecx, 8          ; this
.text:00000868                 call    ?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z ; CCallbackConsoleBase::OpenFileError_Base(UString const &,ulong)
.text:0000086D                 add     esp, 4
.text:00000870                 cmp     ebp, esp
.text:00000872                 call    __RTC_CheckEsp
.text:00000877                 mov     esp, ebp
.text:00000879                 pop     ebp
.text:0000087A                 retn    8
.text:0000087A ?OpenFileError@CHashCallbackConsole@@UAEJABVUString@@K@Z endp
.text:0000087A
.text:0000087A ; ---------------------------------------------------------------------------
.text:0000087D                 db 0Fh dup(0CCh)
.text:0000088C
.text:0000088C ; =============== S U B R O U T I N E =======================================
.text:0000088C
.text:0000088C ; Attributes: bp-based frame
.text:0000088C
.text:0000088C ; __int32 __thiscall CHashCallbackConsole::GetStream(CHashCallbackConsole *this, const wchar_t *, bool)
.text:0000088C                 public ?GetStream@CHashCallbackConsole@@UAEJPB_W_N@Z
.text:0000088C ?GetStream@CHashCallbackConsole@@UAEJPB_W_N@Z proc near
.text:0000088C
.text:0000088C var_4           = dword ptr -4
.text:0000088C arg_0           = dword ptr  8
.text:0000088C
.text:0000088C                 push    ebp
.text:0000088D                 mov     ebp, esp
.text:0000088F                 push    ecx
.text:00000890                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000897                 mov     [ebp+var_4], ecx
.text:0000089A                 mov     eax, [ebp+arg_0]
.text:0000089D                 push    eax
.text:0000089E                 mov     ecx, [ebp+var_4]
.text:000008A1                 add     ecx, 118h
.text:000008A7                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:000008AC                 mov     ecx, [ebp+var_4]
.text:000008AF                 add     ecx, 8          ; this
.text:000008B2                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:000008B7                 movzx   ecx, al
.text:000008BA                 test    ecx, ecx
.text:000008BC                 jz      short loc_8F7
.text:000008BE                 mov     edx, [ebp+var_4]
.text:000008C1                 movzx   eax, byte ptr [edx+130h]
.text:000008C8                 test    eax, eax
.text:000008CA                 jz      short loc_8EC
.text:000008CC                 mov     ecx, [ebp+var_4]
.text:000008CF                 add     ecx, 2Ch ; ','  ; this
.text:000008D2                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:000008D7                 cmp     [ebp+arg_0], 0
.text:000008DB                 jz      short loc_8EC
.text:000008DD                 mov     ecx, [ebp+arg_0]
.text:000008E0                 push    ecx
.text:000008E1                 mov     ecx, [ebp+var_4]
.text:000008E4                 add     ecx, 2Ch ; ','
.text:000008E7                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:000008EC
.text:000008EC loc_8EC:                                ; CODE XREF: CHashCallbackConsole::GetStream(wchar_t const *,bool)+3Ej
.text:000008EC                                         ; CHashCallbackConsole::GetStream(wchar_t const *,bool)+4Fj
.text:000008EC                 mov     ecx, [ebp+var_4]
.text:000008EF                 add     ecx, 8          ; this
.text:000008F2                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:000008F7
.text:000008F7 loc_8F7:                                ; CODE XREF: CHashCallbackConsole::GetStream(wchar_t const *,bool)+30j
.text:000008F7                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:000008FC                 add     esp, 4
.text:000008FF                 cmp     ebp, esp
.text:00000901                 call    __RTC_CheckEsp
.text:00000906                 mov     esp, ebp
.text:00000908                 pop     ebp
.text:00000909                 retn    8
.text:00000909 ?GetStream@CHashCallbackConsole@@UAEJPB_W_N@Z endp
.text:00000909
.text:0000090C
.text:0000090C ; =============== S U B R O U T I N E =======================================
.text:0000090C
.text:0000090C ; Attributes: bp-based frame
.text:0000090C
.text:0000090C ; private: void __thiscall CHashCallbackConsole::PrintResultLine(unsigned __int64, class CObjectVector<struct CHasherState> const &, unsigned int, bool)
.text:0000090C                 public ?PrintResultLine@CHashCallbackConsole@@AAEX_KABV?$CObjectVector@UCHasherState@@@@I_N@Z
.text:0000090C ?PrintResultLine@CHashCallbackConsole@@AAEX_KABV?$CObjectVector@UCHasherState@@@@I_N@Z proc near
.text:0000090C                                         ; CODE XREF: CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)+37p
.text:0000090C                                         ; CHashCallbackConsole::AfterLastFile(CHashBundle const &)+72p
.text:0000090C
.text:0000090C var_11C         = dword ptr -11Ch
.text:0000090C var_118         = dword ptr -118h
.text:0000090C var_114         = dword ptr -114h
.text:0000090C var_10C         = byte ptr -10Ch
.text:0000090C var_FF          = byte ptr -0FFh
.text:0000090C Str             = byte ptr -0D4h
.text:0000090C var_10          = dword ptr -10h
.text:0000090C var_C           = dword ptr -0Ch
.text:0000090C var_8           = dword ptr -8
.text:0000090C var_4           = dword ptr -4
.text:0000090C arg_0           = qword ptr  8
.text:0000090C arg_8           = dword ptr  10h
.text:0000090C arg_C           = dword ptr  14h
.text:0000090C arg_10          = byte ptr  18h
.text:0000090C
.text:0000090C                 push    ebp
.text:0000090D                 mov     ebp, esp
.text:0000090F                 sub     esp, 11Ch
.text:00000915                 push    esi
.text:00000916                 push    edi
.text:00000917                 push    ecx
.text:00000918                 lea     edi, [ebp+var_11C]
.text:0000091E                 mov     ecx, 47h ; 'G'
.text:00000923                 mov     eax, 0CCCCCCCCh
.text:00000928                 rep stosd
.text:0000092A                 pop     ecx
.text:0000092B                 mov     eax, dword ptr ds:___security_cookie
.text:00000930                 xor     eax, ebp
.text:00000932                 mov     [ebp+var_4], eax
.text:00000935                 mov     [ebp+var_8], ecx
.text:00000938                 mov     ecx, [ebp+var_8]
.text:0000093B                 add     ecx, 8          ; this
.text:0000093E                 call    ?ClosePercents_for_so@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents_for_so(void)
.text:00000943                 mov     ecx, [ebp+var_8]
.text:00000946                 add     ecx, 124h       ; this
.text:0000094C                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00000951                 mov     [ebp+var_C], 0
.text:00000958                 jmp     short loc_963
.text:0000095A ; ---------------------------------------------------------------------------
.text:0000095A
.text:0000095A loc_95A:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+10Cj
.text:0000095A                 mov     eax, [ebp+var_C]
.text:0000095D                 add     eax, 1
.text:00000960                 mov     [ebp+var_C], eax
.text:00000963
.text:00000963 loc_963:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+4Cj
.text:00000963                 mov     ecx, [ebp+arg_8]
.text:00000966                 call    ?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ ; CObjectVector<CHasherState>::Size(void)
.text:0000096B                 cmp     [ebp+var_C], eax
.text:0000096E                 jnb     loc_A1D
.text:00000974                 mov     ecx, [ebp+var_C]
.text:00000977                 push    ecx
.text:00000978                 mov     ecx, [ebp+arg_8]
.text:0000097B                 call    ??A?$CObjectVector@UCHasherState@@@@QBEABUCHasherState@@I@Z ; CObjectVector<CHasherState>::operator[](uint)
.text:00000980                 mov     [ebp+var_10], eax
.text:00000983                 mov     [ebp+Str], 0
.text:0000098A                 movzx   edx, [ebp+arg_10]
.text:0000098E                 test    edx, edx
.text:00000990                 jz      short loc_9B3
.text:00000992                 mov     eax, [ebp+var_10]
.text:00000995                 mov     ecx, [eax+10h]
.text:00000998                 push    ecx             ; unsigned int
.text:00000999                 mov     edx, [ebp+arg_C]
.text:0000099C                 shl     edx, 6
.text:0000099F                 mov     eax, [ebp+var_10]
.text:000009A2                 lea     ecx, [eax+edx+14h]
.text:000009A6                 push    ecx             ; unsigned __int8 *
.text:000009A7                 lea     edx, [ebp+Str]
.text:000009AD                 push    edx             ; char *
.text:000009AE                 call    ?AddHashHexToString@@YGXPADPBEI@Z ; AddHashHexToString(char *,uchar const *,uint)
.text:000009B3
.text:000009B3 loc_9B3:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+84j
.text:000009B3                 mov     eax, [ebp+var_10]
.text:000009B6                 mov     ecx, [eax+10h]
.text:000009B9                 push    ecx
.text:000009BA                 call    ?GetColumnWidth@@YGII@Z ; GetColumnWidth(uint)
.text:000009BF                 mov     esi, eax
.text:000009C1                 lea     edx, [ebp+Str]
.text:000009C7                 push    edx             ; Str
.text:000009C8                 call    _strlen
.text:000009CD                 add     esp, 4
.text:000009D0                 sub     esi, eax
.text:000009D2                 push    esi
.text:000009D3                 lea     eax, [ebp+Str]
.text:000009D9                 push    eax             ; Str
.text:000009DA                 call    _strlen
.text:000009DF                 add     esp, 4
.text:000009E2                 lea     ecx, [ebp+eax+Str]
.text:000009E9                 push    ecx
.text:000009EA                 call    ?SetSpacesAndNul@@YGXPADI@Z ; SetSpacesAndNul(char *,uint)
.text:000009EF                 cmp     [ebp+var_C], 0
.text:000009F3                 jz      short loc_A03
.text:000009F5                 mov     ecx, [ebp+var_8]
.text:000009F8                 add     ecx, 124h       ; this
.text:000009FE                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:00000A03
.text:00000A03 loc_A03:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+E7j
.text:00000A03                 lea     edx, [ebp+Str]
.text:00000A09                 push    edx
.text:00000A0A                 mov     ecx, [ebp+var_8]
.text:00000A0D                 add     ecx, 124h
.text:00000A13                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000A18                 jmp     loc_95A
.text:00000A1D ; ---------------------------------------------------------------------------
.text:00000A1D
.text:00000A1D loc_A1D:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+62j
.text:00000A1D                 mov     eax, [ebp+var_8]
.text:00000A20                 movzx   ecx, byte ptr [eax+132h]
.text:00000A27                 test    ecx, ecx
.text:00000A29                 jz      loc_B0B
.text:00000A2F                 mov     ecx, [ebp+var_8]
.text:00000A32                 add     ecx, 124h       ; this
.text:00000A38                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:00000A3D                 lea     edx, [ebp+var_10C]
.text:00000A43                 mov     [ebp+var_114], edx
.text:00000A49                 movzx   eax, [ebp+arg_10]
.text:00000A4D                 test    eax, eax
.text:00000A4F                 jz      loc_AE8
.text:00000A55                 lea     ecx, [ebp+var_FF]
.text:00000A5B                 mov     [ebp+var_114], ecx
.text:00000A61                 mov     edx, [ebp+var_114]
.text:00000A67                 push    edx             ; char *
.text:00000A68                 mov     eax, dword ptr [ebp+arg_0+4]
.text:00000A6B                 push    eax
.text:00000A6C                 mov     ecx, dword ptr [ebp+arg_0]
.text:00000A6F                 push    ecx             ; unsigned __int64
.text:00000A70                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:00000A75                 mov     edx, [ebp+var_114]
.text:00000A7B                 push    edx             ; Str
.text:00000A7C                 call    _strlen
.text:00000A81                 add     esp, 4
.text:00000A84                 mov     ecx, 0Dh
.text:00000A89                 sub     ecx, eax
.text:00000A8B                 mov     [ebp+var_118], ecx
.text:00000A91                 cmp     [ebp+var_118], 0
.text:00000A98                 jle     short loc_AE6
.text:00000A9A                 mov     edx, [ebp+var_114]
.text:00000AA0                 sub     edx, [ebp+var_118]
.text:00000AA6                 mov     [ebp+var_114], edx
.text:00000AAC                 mov     [ebp+var_11C], 0
.text:00000AB6                 jmp     short loc_AC7
.text:00000AB8 ; ---------------------------------------------------------------------------
.text:00000AB8
.text:00000AB8 loc_AB8:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+1D8j
.text:00000AB8                 mov     eax, [ebp+var_11C]
.text:00000ABE                 add     eax, 1
.text:00000AC1                 mov     [ebp+var_11C], eax
.text:00000AC7
.text:00000AC7 loc_AC7:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+1AAj
.text:00000AC7                 mov     ecx, [ebp+var_11C]
.text:00000ACD                 cmp     ecx, [ebp+var_118]
.text:00000AD3                 jnb     short loc_AE6
.text:00000AD5                 mov     edx, [ebp+var_114]
.text:00000ADB                 add     edx, [ebp+var_11C]
.text:00000AE1                 mov     byte ptr [edx], 20h ; ' '
.text:00000AE4                 jmp     short loc_AB8
.text:00000AE6 ; ---------------------------------------------------------------------------
.text:00000AE6
.text:00000AE6 loc_AE6:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+18Cj
.text:00000AE6                                         ; CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+1C7j
.text:00000AE6                 jmp     short loc_AF6
.text:00000AE8 ; ---------------------------------------------------------------------------
.text:00000AE8
.text:00000AE8 loc_AE8:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+143j
.text:00000AE8                 push    0Dh
.text:00000AEA                 lea     eax, [ebp+var_10C]
.text:00000AF0                 push    eax
.text:00000AF1                 call    ?SetSpacesAndNul@@YGXPADI@Z ; SetSpacesAndNul(char *,uint)
.text:00000AF6
.text:00000AF6 loc_AF6:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool):loc_AE6j
.text:00000AF6                 mov     ecx, [ebp+var_114]
.text:00000AFC                 push    ecx
.text:00000AFD                 mov     ecx, [ebp+var_8]
.text:00000B00                 add     ecx, 124h
.text:00000B06                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000B0B
.text:00000B0B loc_B0B:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+11Dj
.text:00000B0B                 mov     edx, [ebp+var_8]
.text:00000B0E                 movzx   eax, byte ptr [edx+133h]
.text:00000B15                 test    eax, eax
.text:00000B17                 jz      short loc_B21
.text:00000B19                 mov     ecx, [ebp+var_8] ; this
.text:00000B1C                 call    ?AddSpacesBeforeName@CHashCallbackConsole@@AAEXXZ ; CHashCallbackConsole::AddSpacesBeforeName(void)
.text:00000B21
.text:00000B21 loc_B21:                                ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+20Bj
.text:00000B21                 mov     ecx, [ebp+var_8]
.text:00000B24                 add     ecx, 124h
.text:00000B2A                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000B2F                 push    eax             ; Str
.text:00000B30                 mov     ecx, [ebp+var_8]
.text:00000B33                 mov     ecx, [ecx+0B8h]
.text:00000B39                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000B3E                 push    edx
.text:00000B3F                 mov     ecx, ebp
.text:00000B41                 push    eax
.text:00000B42                 lea     edx, $LN19
.text:00000B48                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000B4D                 pop     eax
.text:00000B4E                 pop     edx
.text:00000B4F                 pop     edi
.text:00000B50                 pop     esi
.text:00000B51                 mov     ecx, [ebp+var_4]
.text:00000B54                 xor     ecx, ebp
.text:00000B56                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000B5B                 add     esp, 11Ch
.text:00000B61                 cmp     ebp, esp
.text:00000B63                 call    __RTC_CheckEsp
.text:00000B68                 mov     esp, ebp
.text:00000B6A                 pop     ebp
.text:00000B6B                 retn    14h
.text:00000B6B ?PrintResultLine@CHashCallbackConsole@@AAEX_KABV?$CObjectVector@UCHasherState@@@@I_N@Z endp
.text:00000B6B
.text:00000B6B ; ---------------------------------------------------------------------------
.text:00000B6E                 align 10h
.text:00000B70 $LN19           dd 2                    ; DATA XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+236o
.text:00000B74                 dd offset $LN18
.text:00000B78 $LN18           dd 0FFFFFF2Ch, 0C0h     ; DATA XREF: .text:00000B74o
.text:00000B80                 dd offset $LN16
.text:00000B84                 dd 0FFFFFEF4h, 2Dh
.text:00000B8C                 dd offset $LN17
.text:00000B90 $LN17           db 73h, 0               ; DATA XREF: .text:00000B8Co
.text:00000B92 $LN16           dw 73h                  ; DATA XREF: .text:00000B80o
.text:00000B94                 db 8 dup(0CCh)
.text:00000B9C
.text:00000B9C ; =============== S U B R O U T I N E =======================================
.text:00000B9C
.text:00000B9C ; Attributes: bp-based frame
.text:00000B9C
.text:00000B9C ; void __stdcall SetSpacesAndNul(char *, unsigned int)
.text:00000B9C ?SetSpacesAndNul@@YGXPADI@Z proc near   ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+DEp
.text:00000B9C                                         ; CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+1E5p
.text:00000B9C
.text:00000B9C var_4           = dword ptr -4
.text:00000B9C arg_0           = dword ptr  8
.text:00000B9C arg_4           = dword ptr  0Ch
.text:00000B9C
.text:00000B9C                 push    ebp
.text:00000B9D                 mov     ebp, esp
.text:00000B9F                 push    ecx
.text:00000BA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BA7                 mov     [ebp+var_4], 0
.text:00000BAE                 jmp     short loc_BB9
.text:00000BB0 ; ---------------------------------------------------------------------------
.text:00000BB0
.text:00000BB0 loc_BB0:                                ; CODE XREF: SetSpacesAndNul(char *,uint)+2Ej
.text:00000BB0                 mov     eax, [ebp+var_4]
.text:00000BB3                 add     eax, 1
.text:00000BB6                 mov     [ebp+var_4], eax
.text:00000BB9
.text:00000BB9 loc_BB9:                                ; CODE XREF: SetSpacesAndNul(char *,uint)+12j
.text:00000BB9                 mov     ecx, [ebp+var_4]
.text:00000BBC                 cmp     ecx, [ebp+arg_4]
.text:00000BBF                 jnb     short loc_BCC
.text:00000BC1                 mov     edx, [ebp+arg_0]
.text:00000BC4                 add     edx, [ebp+var_4]
.text:00000BC7                 mov     byte ptr [edx], 20h ; ' '
.text:00000BCA                 jmp     short loc_BB0
.text:00000BCC ; ---------------------------------------------------------------------------
.text:00000BCC
.text:00000BCC loc_BCC:                                ; CODE XREF: SetSpacesAndNul(char *,uint)+23j
.text:00000BCC                 mov     eax, [ebp+arg_0]
.text:00000BCF                 add     eax, [ebp+arg_4]
.text:00000BD2                 mov     byte ptr [eax], 0
.text:00000BD5                 mov     esp, ebp
.text:00000BD7                 pop     ebp
.text:00000BD8                 retn    8
.text:00000BD8 ?SetSpacesAndNul@@YGXPADI@Z endp
.text:00000BD8
.text:00000BD8 ; ---------------------------------------------------------------------------
.text:00000BDB                 align 4
.text:00000BDC
.text:00000BDC ; =============== S U B R O U T I N E =======================================
.text:00000BDC
.text:00000BDC ; Attributes: bp-based frame
.text:00000BDC
.text:00000BDC ; __int32 __thiscall CHashCallbackConsole::SetOperationResult(CHashCallbackConsole *this, unsigned __int64, const struct CHashBundle *, bool)
.text:00000BDC                 public ?SetOperationResult@CHashCallbackConsole@@UAEJ_KABUCHashBundle@@_N@Z
.text:00000BDC ?SetOperationResult@CHashCallbackConsole@@UAEJ_KABUCHashBundle@@_N@Z proc near
.text:00000BDC
.text:00000BDC var_4           = dword ptr -4
.text:00000BDC arg_0           = qword ptr  8
.text:00000BDC arg_8           = dword ptr  10h
.text:00000BDC arg_C           = byte ptr  14h
.text:00000BDC
.text:00000BDC                 push    ebp
.text:00000BDD                 mov     ebp, esp
.text:00000BDF                 push    ecx
.text:00000BE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BE7                 mov     [ebp+var_4], ecx
.text:00000BEA                 mov     eax, [ebp+var_4]
.text:00000BED                 cmp     dword ptr [eax+0B8h], 0
.text:00000BF4                 jz      loc_C82
.text:00000BFA                 movzx   ecx, [ebp+arg_C]
.text:00000BFE                 push    ecx
.text:00000BFF                 push    0
.text:00000C01                 mov     edx, [ebp+arg_8]
.text:00000C04                 add     edx, 4
.text:00000C07                 push    edx
.text:00000C08                 mov     eax, dword ptr [ebp+arg_0+4]
.text:00000C0B                 push    eax
.text:00000C0C                 mov     ecx, dword ptr [ebp+arg_0]
.text:00000C0F                 push    ecx
.text:00000C10                 mov     ecx, [ebp+var_4]
.text:00000C13                 call    ?PrintResultLine@CHashCallbackConsole@@AAEX_KABV?$CObjectVector@UCHasherState@@@@I_N@Z ; CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)
.text:00000C18                 mov     edx, [ebp+var_4]
.text:00000C1B                 movzx   eax, byte ptr [edx+133h]
.text:00000C22                 test    eax, eax
.text:00000C24                 jz      short loc_C6F
.text:00000C26                 mov     ecx, [ebp+var_4]
.text:00000C29                 add     ecx, 118h       ; this
.text:00000C2F                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000C34                 movzx   ecx, al
.text:00000C37                 test    ecx, ecx
.text:00000C39                 jz      short loc_C52
.text:00000C3B                 mov     edx, ds:_kEmptyFileAlias
.text:00000C41                 push    edx
.text:00000C42                 mov     eax, [ebp+var_4]
.text:00000C45                 mov     ecx, [eax+0B8h]
.text:00000C4B                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000C50                 jmp     short loc_C6F
.text:00000C52 ; ---------------------------------------------------------------------------
.text:00000C52
.text:00000C52 loc_C52:                                ; CODE XREF: CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)+5Dj
.text:00000C52                 mov     ecx, [ebp+var_4]
.text:00000C55                 add     ecx, 118h
.text:00000C5B                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000C60                 push    eax
.text:00000C61                 mov     ecx, [ebp+var_4]
.text:00000C64                 mov     ecx, [ecx+0B8h]
.text:00000C6A                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000C6F
.text:00000C6F loc_C6F:                                ; CODE XREF: CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)+48j
.text:00000C6F                                         ; CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)+74j
.text:00000C6F                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000C74                 mov     edx, [ebp+var_4]
.text:00000C77                 mov     ecx, [edx+0B8h]
.text:00000C7D                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000C82
.text:00000C82 loc_C82:                                ; CODE XREF: CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)+18j
.text:00000C82                 mov     ecx, [ebp+var_4]
.text:00000C85                 add     ecx, 8          ; this
.text:00000C88                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:00000C8D                 movzx   eax, al
.text:00000C90                 test    eax, eax
.text:00000C92                 jz      short loc_CB7
.text:00000C94                 mov     ecx, [ebp+var_4]
.text:00000C97                 mov     edx, [ecx+18h]
.text:00000C9A                 add     edx, 1
.text:00000C9D                 mov     eax, [ecx+1Ch]
.text:00000CA0                 adc     eax, 0
.text:00000CA3                 mov     ecx, [ebp+var_4]
.text:00000CA6                 mov     [ecx+18h], edx
.text:00000CA9                 mov     [ecx+1Ch], eax
.text:00000CAC                 mov     ecx, [ebp+var_4]
.text:00000CAF                 add     ecx, 8          ; this
.text:00000CB2                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:00000CB7
.text:00000CB7 loc_CB7:                                ; CODE XREF: CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)+B6j
.text:00000CB7                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00000CBC                 add     esp, 4
.text:00000CBF                 cmp     ebp, esp
.text:00000CC1                 call    __RTC_CheckEsp
.text:00000CC6                 mov     esp, ebp
.text:00000CC8                 pop     ebp
.text:00000CC9                 retn    10h
.text:00000CC9 ?SetOperationResult@CHashCallbackConsole@@UAEJ_KABUCHashBundle@@_N@Z endp
.text:00000CC9
.text:00000CCC
.text:00000CCC ; =============== S U B R O U T I N E =======================================
.text:00000CCC
.text:00000CCC ; Attributes: bp-based frame
.text:00000CCC
.text:00000CCC ; void __stdcall PrintHashStat(struct CStdOutStream *, const struct CHashBundle *)
.text:00000CCC                 public ?PrintHashStat@@YGXAAVCStdOutStream@@ABUCHashBundle@@@Z
.text:00000CCC ?PrintHashStat@@YGXAAVCStdOutStream@@ABUCHashBundle@@@Z proc near
.text:00000CCC                                         ; CODE XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+183p
.text:00000CCC
.text:00000CCC var_14          = dword ptr -14h
.text:00000CCC var_10          = dword ptr -10h
.text:00000CCC var_C           = dword ptr -0Ch
.text:00000CCC var_8           = dword ptr -8
.text:00000CCC var_4           = dword ptr -4
.text:00000CCC arg_0           = dword ptr  8
.text:00000CCC arg_4           = dword ptr  0Ch
.text:00000CCC
.text:00000CCC                 push    ebp
.text:00000CCD                 mov     ebp, esp
.text:00000CCF                 sub     esp, 14h
.text:00000CD2                 mov     eax, 0CCCCCCCCh
.text:00000CD7                 mov     [ebp+var_14], eax
.text:00000CDA                 mov     [ebp+var_10], eax
.text:00000CDD                 mov     [ebp+var_C], eax
.text:00000CE0                 mov     [ebp+var_8], eax
.text:00000CE3                 mov     [ebp+var_4], eax
.text:00000CE6                 mov     [ebp+var_4], 0
.text:00000CED                 jmp     short loc_CF8
.text:00000CEF ; ---------------------------------------------------------------------------
.text:00000CEF
.text:00000CEF loc_CEF:                                ; CODE XREF: PrintHashStat(CStdOutStream &,CHashBundle const &)+CCj
.text:00000CEF                 mov     eax, [ebp+var_4]
.text:00000CF2                 add     eax, 1
.text:00000CF5                 mov     [ebp+var_4], eax
.text:00000CF8
.text:00000CF8 loc_CF8:                                ; CODE XREF: PrintHashStat(CStdOutStream &,CHashBundle const &)+21j
.text:00000CF8                 mov     ecx, [ebp+arg_4]
.text:00000CFB                 add     ecx, 4
.text:00000CFE                 call    ?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ ; CObjectVector<CHasherState>::Size(void)
.text:00000D03                 cmp     [ebp+var_4], eax
.text:00000D06                 jnb     loc_D9D
.text:00000D0C                 mov     ecx, [ebp+var_4]
.text:00000D0F                 push    ecx
.text:00000D10                 mov     ecx, [ebp+arg_4]
.text:00000D13                 add     ecx, 4
.text:00000D16                 call    ??A?$CObjectVector@UCHasherState@@@@QBEABUCHasherState@@I@Z ; CObjectVector<CHasherState>::operator[](uint)
.text:00000D1B                 mov     [ebp+var_8], eax
.text:00000D1E                 push    1
.text:00000D20                 mov     edx, [ebp+var_8]
.text:00000D23                 push    edx
.text:00000D24                 mov     eax, [ebp+arg_0]
.text:00000D27                 push    eax
.text:00000D28                 call    ?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z ; PrintSum(CStdOutStream &,CHasherState const &,uint)
.text:00000D2D                 mov     ecx, [ebp+arg_4]
.text:00000D30                 mov     [ebp+var_C], ecx
.text:00000D33                 mov     edx, [ebp+var_C]
.text:00000D36                 cmp     dword ptr [edx+18h], 1
.text:00000D3A                 jnz     short loc_D59
.text:00000D3C                 mov     eax, [ebp+var_C]
.text:00000D3F                 cmp     dword ptr [eax+1Ch], 0
.text:00000D43                 jnz     short loc_D59
.text:00000D45                 mov     ecx, [ebp+arg_4]
.text:00000D48                 mov     [ebp+var_10], ecx
.text:00000D4B                 mov     edx, [ebp+var_10]
.text:00000D4E                 mov     eax, [ebp+var_10]
.text:00000D51                 mov     ecx, [edx+10h]
.text:00000D54                 or      ecx, [eax+14h]
.text:00000D57                 jz      short loc_D68
.text:00000D59
.text:00000D59 loc_D59:                                ; CODE XREF: PrintHashStat(CStdOutStream &,CHashBundle const &)+6Ej
.text:00000D59                                         ; PrintHashStat(CStdOutStream &,CHashBundle const &)+77j
.text:00000D59                 push    2
.text:00000D5B                 mov     edx, [ebp+var_8]
.text:00000D5E                 push    edx
.text:00000D5F                 mov     eax, [ebp+arg_0]
.text:00000D62                 push    eax
.text:00000D63                 call    ?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z ; PrintSum(CStdOutStream &,CHasherState const &,uint)
.text:00000D68
.text:00000D68 loc_D68:                                ; CODE XREF: PrintHashStat(CStdOutStream &,CHashBundle const &)+8Bj
.text:00000D68                 mov     ecx, [ebp+arg_4]
.text:00000D6B                 mov     [ebp+var_14], ecx
.text:00000D6E                 mov     edx, [ebp+var_14]
.text:00000D71                 mov     eax, [ebp+var_14]
.text:00000D74                 mov     ecx, [edx+20h]
.text:00000D77                 or      ecx, [eax+24h]
.text:00000D7A                 jz      short loc_D8B
.text:00000D7C                 push    3
.text:00000D7E                 mov     edx, [ebp+var_8]
.text:00000D81                 push    edx
.text:00000D82                 mov     eax, [ebp+arg_0]
.text:00000D85                 push    eax
.text:00000D86                 call    ?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z ; PrintSum(CStdOutStream &,CHasherState const &,uint)
.text:00000D8B
.text:00000D8B loc_D8B:                                ; CODE XREF: PrintHashStat(CStdOutStream &,CHashBundle const &)+AEj
.text:00000D8B                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000D90                 mov     ecx, [ebp+arg_0]
.text:00000D93                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000D98                 jmp     loc_CEF
.text:00000D9D ; ---------------------------------------------------------------------------
.text:00000D9D
.text:00000D9D loc_D9D:                                ; CODE XREF: PrintHashStat(CStdOutStream &,CHashBundle const &)+3Aj
.text:00000D9D                 add     esp, 14h
.text:00000DA0                 cmp     ebp, esp
.text:00000DA2                 call    __RTC_CheckEsp
.text:00000DA7                 mov     esp, ebp
.text:00000DA9                 pop     ebp
.text:00000DAA                 retn    8
.text:00000DAA ?PrintHashStat@@YGXAAVCStdOutStream@@ABUCHashBundle@@@Z endp
.text:00000DAA
.text:00000DAA ; ---------------------------------------------------------------------------
.text:00000DAD                 db 0Fh dup(0CCh)
.text:00000DBC
.text:00000DBC ; =============== S U B R O U T I N E =======================================
.text:00000DBC
.text:00000DBC ; Attributes: bp-based frame
.text:00000DBC
.text:00000DBC ; void __stdcall PrintSum(class CStdOutStream &, struct CHasherState const &, unsigned int)
.text:00000DBC ?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z proc near
.text:00000DBC                                         ; CODE XREF: PrintHashStat(CStdOutStream &,CHashBundle const &)+5Cp
.text:00000DBC                                         ; PrintHashStat(CStdOutStream &,CHashBundle const &)+97p ...
.text:00000DBC
.text:00000DBC var_EC          = byte ptr -0ECh
.text:00000DBC Str             = byte ptr -0E8h
.text:00000DBC var_20          = byte ptr -20h
.text:00000DBC var_10          = dword ptr -10h
.text:00000DBC var_C           = dword ptr -0Ch
.text:00000DBC var_4           = dword ptr -4
.text:00000DBC arg_0           = dword ptr  8
.text:00000DBC arg_4           = dword ptr  0Ch
.text:00000DBC arg_8           = dword ptr  10h
.text:00000DBC
.text:00000DBC                 push    ebp
.text:00000DBD                 mov     ebp, esp
.text:00000DBF                 push    0FFFFFFFFh
.text:00000DC1                 push    offset __ehhandler$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z
.text:00000DC6                 mov     eax, large fs:0
.text:00000DCC                 push    eax
.text:00000DCD                 sub     esp, 0E0h
.text:00000DD3                 push    edi
.text:00000DD4                 lea     edi, [ebp+var_EC]
.text:00000DDA                 mov     ecx, 38h ; '8'
.text:00000DDF                 mov     eax, 0CCCCCCCCh
.text:00000DE4                 rep stosd
.text:00000DE6                 mov     eax, dword ptr ds:___security_cookie
.text:00000DEB                 xor     eax, ebp
.text:00000DED                 mov     [ebp+var_10], eax
.text:00000DF0                 push    eax
.text:00000DF1                 lea     eax, [ebp+var_C]
.text:00000DF4                 mov     large fs:0, eax
.text:00000DFA                 mov     ecx, [ebp+arg_4]
.text:00000DFD                 add     ecx, 4
.text:00000E00                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000E05                 push    eax             ; Str
.text:00000E06                 mov     ecx, [ebp+arg_0]
.text:00000E09                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000E0E                 lea     ecx, [ebp+var_20]
.text:00000E11                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000E16                 mov     [ebp+var_4], 0
.text:00000E1D                 mov     ecx, [ebp+arg_4]
.text:00000E20                 add     ecx, 4          ; this
.text:00000E23                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000E28                 mov     ecx, 6
.text:00000E2D                 sub     ecx, eax
.text:00000E2F                 push    ecx             ; int
.text:00000E30                 lea     edx, [ebp+var_20]
.text:00000E33                 push    edx             ; AString *
.text:00000E34                 call    ?AddSpaces_if_Positive@@YGXAAVAString@@H@Z ; AddSpaces_if_Positive(AString &,int)
.text:00000E39                 lea     ecx, [ebp+var_20]
.text:00000E3C                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000E41                 push    eax             ; Str
.text:00000E42                 mov     ecx, [ebp+arg_0]
.text:00000E45                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000E4A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E51                 lea     ecx, [ebp+var_20] ; this
.text:00000E54                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000E59                 mov     eax, [ebp+arg_8]
.text:00000E5C                 mov     ecx, ds:_k_DigestTitles[eax*4]
.text:00000E63                 push    ecx             ; Str
.text:00000E64                 mov     ecx, [ebp+arg_0]
.text:00000E67                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000E6C                 mov     [ebp+Str], 0
.text:00000E73                 mov     edx, [ebp+arg_4]
.text:00000E76                 mov     eax, [edx+10h]
.text:00000E79                 push    eax             ; unsigned int
.text:00000E7A                 mov     ecx, [ebp+arg_8]
.text:00000E7D                 shl     ecx, 6
.text:00000E80                 mov     edx, [ebp+arg_4]
.text:00000E83                 lea     eax, [edx+ecx+14h]
.text:00000E87                 push    eax             ; unsigned __int8 *
.text:00000E88                 lea     ecx, [ebp+Str]
.text:00000E8E                 push    ecx             ; char *
.text:00000E8F                 call    ?AddHashHexToString@@YGXPADPBEI@Z ; AddHashHexToString(char *,uchar const *,uint)
.text:00000E94                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000E99                 lea     edx, [ebp+Str]
.text:00000E9F                 push    edx             ; Str
.text:00000EA0                 mov     ecx, [ebp+arg_0]
.text:00000EA3                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000EA8                 mov     ecx, eax
.text:00000EAA                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000EAF                 push    edx
.text:00000EB0                 mov     ecx, ebp
.text:00000EB2                 push    eax
.text:00000EB3                 lea     edx, $LN8
.text:00000EB9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000EBE                 pop     eax
.text:00000EBF                 pop     edx
.text:00000EC0                 mov     ecx, [ebp+var_C]
.text:00000EC3                 mov     large fs:0, ecx
.text:00000ECA                 pop     ecx
.text:00000ECB                 pop     edi
.text:00000ECC                 mov     ecx, [ebp+var_10]
.text:00000ECF                 xor     ecx, ebp
.text:00000ED1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000ED6                 add     esp, 0ECh
.text:00000EDC                 cmp     ebp, esp
.text:00000EDE                 call    __RTC_CheckEsp
.text:00000EE3                 mov     esp, ebp
.text:00000EE5                 pop     ebp
.text:00000EE6                 retn    0Ch
.text:00000EE6 ?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z endp
.text:00000EE6
.text:00000EE6 ; ---------------------------------------------------------------------------
.text:00000EE9                 align 4
.text:00000EEC $LN8            dd 2                    ; DATA XREF: PrintSum(CStdOutStream &,CHasherState const &,uint)+F7o
.text:00000EF0                 dd offset $LN7
.text:00000EF4 $LN7            dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00000EF0o
.text:00000EFC                 dd offset $LN4          ; "temp"
.text:00000F00                 dd 0FFFFFF18h, 0C0h
.text:00000F08                 dd offset $LN5
.text:00000F0C $LN5            db 73h, 0               ; DATA XREF: .text:00000F08o
.text:00000F0E $LN4            db 'temp',0             ; DATA XREF: .text:00000EFCo
.text:00000F13                 db 9 dup(0CCh)
.text:00000F1C
.text:00000F1C ; =============== S U B R O U T I N E =======================================
.text:00000F1C
.text:00000F1C ; Attributes: bp-based frame
.text:00000F1C
.text:00000F1C ; void __thiscall CHashCallbackConsole::PrintProperty(CHashCallbackConsole *this, const char *Str, unsigned __int64)
.text:00000F1C                 public ?PrintProperty@CHashCallbackConsole@@AAEXPBD_K@Z
.text:00000F1C ?PrintProperty@CHashCallbackConsole@@AAEXPBD_K@Z proc near
.text:00000F1C                                         ; CODE XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+E9p
.text:00000F1C                                         ; CHashCallbackConsole::AfterLastFile(CHashBundle const &)+101p ...
.text:00000F1C
.text:00000F1C var_30          = byte ptr -30h
.text:00000F1C var_2C          = byte ptr -2Ch
.text:00000F1C var_2B          = byte ptr -2Bh
.text:00000F1C var_2A          = byte ptr -2Ah
.text:00000F1C var_8           = dword ptr -8
.text:00000F1C var_4           = dword ptr -4
.text:00000F1C Str             = dword ptr  8
.text:00000F1C arg_4           = qword ptr  0Ch
.text:00000F1C
.text:00000F1C                 push    ebp
.text:00000F1D                 mov     ebp, esp
.text:00000F1F                 sub     esp, 30h
.text:00000F22                 push    edi
.text:00000F23                 push    ecx
.text:00000F24                 lea     edi, [ebp+var_30]
.text:00000F27                 mov     ecx, 0Ch
.text:00000F2C                 mov     eax, 0CCCCCCCCh
.text:00000F31                 rep stosd
.text:00000F33                 pop     ecx
.text:00000F34                 mov     eax, dword ptr ds:___security_cookie
.text:00000F39                 xor     eax, ebp
.text:00000F3B                 mov     [ebp+var_4], eax
.text:00000F3E                 mov     [ebp+var_8], ecx
.text:00000F41                 mov     [ebp+var_2C], 3Ah ; ':'
.text:00000F45                 mov     [ebp+var_2B], 20h ; ' '
.text:00000F49                 lea     eax, [ebp+var_2A]
.text:00000F4C                 push    eax             ; char *
.text:00000F4D                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00000F50                 push    ecx
.text:00000F51                 mov     edx, dword ptr [ebp+arg_4]
.text:00000F54                 push    edx             ; unsigned __int64
.text:00000F55                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:00000F5A                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000F5F                 lea     eax, [ebp+var_2C]
.text:00000F62                 push    eax             ; Str
.text:00000F63                 mov     ecx, [ebp+Str]
.text:00000F66                 push    ecx             ; Str
.text:00000F67                 mov     edx, [ebp+var_8]
.text:00000F6A                 mov     ecx, [edx+0B8h]
.text:00000F70                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000F75                 mov     ecx, eax
.text:00000F77                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000F7C                 mov     ecx, eax
.text:00000F7E                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000F83                 push    edx
.text:00000F84                 mov     ecx, ebp
.text:00000F86                 push    eax
.text:00000F87                 lea     edx, $LN5_0
.text:00000F8D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F92                 pop     eax
.text:00000F93                 pop     edx
.text:00000F94                 pop     edi
.text:00000F95                 mov     ecx, [ebp+var_4]
.text:00000F98                 xor     ecx, ebp
.text:00000F9A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000F9F                 add     esp, 30h
.text:00000FA2                 cmp     ebp, esp
.text:00000FA4                 call    __RTC_CheckEsp
.text:00000FA9                 mov     esp, ebp
.text:00000FAB                 pop     ebp
.text:00000FAC                 retn    0Ch
.text:00000FAC ?PrintProperty@CHashCallbackConsole@@AAEXPBD_K@Z endp
.text:00000FAC
.text:00000FAC ; ---------------------------------------------------------------------------
.text:00000FAF                 align 10h
.text:00000FB0 $LN5_0          dd 1                    ; DATA XREF: CHashCallbackConsole::PrintProperty(char const *,unsigned __int64)+6Bo
.text:00000FB4                 dd offset $LN4_0
.text:00000FB8 $LN4_0          dd 0FFFFFFD4h, 20h      ; DATA XREF: .text:00000FB4o
.text:00000FC0                 dd offset $LN3
.text:00000FC4 $LN3            dd 0CCCC0073h, 0CCCCCCCCh ; DATA XREF: .text:00000FC0o
.text:00000FCC
.text:00000FCC ; =============== S U B R O U T I N E =======================================
.text:00000FCC
.text:00000FCC ; Attributes: bp-based frame
.text:00000FCC
.text:00000FCC ; __int32 __thiscall CHashCallbackConsole::AfterLastFile(CHashCallbackConsole *this, const struct CHashBundle *)
.text:00000FCC                 public ?AfterLastFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z
.text:00000FCC ?AfterLastFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z proc near
.text:00000FCC
.text:00000FCC var_14          = dword ptr -14h
.text:00000FCC var_10          = dword ptr -10h
.text:00000FCC var_C           = dword ptr -0Ch
.text:00000FCC var_8           = dword ptr -8
.text:00000FCC var_4           = dword ptr -4
.text:00000FCC arg_0           = dword ptr  8
.text:00000FCC
.text:00000FCC                 push    ebp
.text:00000FCD                 mov     ebp, esp
.text:00000FCF                 sub     esp, 14h
.text:00000FD2                 mov     eax, 0CCCCCCCCh
.text:00000FD7                 mov     [ebp+var_14], eax
.text:00000FDA                 mov     [ebp+var_10], eax
.text:00000FDD                 mov     [ebp+var_C], eax
.text:00000FE0                 mov     [ebp+var_8], eax
.text:00000FE3                 mov     [ebp+var_4], eax
.text:00000FE6                 mov     [ebp+var_4], ecx
.text:00000FE9                 mov     ecx, [ebp+var_4]
.text:00000FEC                 add     ecx, 8          ; this
.text:00000FEF                 call    ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents2(void)
.text:00000FF4                 mov     eax, [ebp+var_4]
.text:00000FF7                 movzx   ecx, byte ptr [eax+131h]
.text:00000FFE                 test    ecx, ecx
.text:00001000                 jz      loc_1154
.text:00001006                 mov     edx, [ebp+var_4]
.text:00001009                 cmp     dword ptr [edx+0B8h], 0
.text:00001010                 jz      loc_1154
.text:00001016                 mov     eax, [ebp+arg_0]
.text:00001019                 add     eax, 4
.text:0000101C                 push    eax
.text:0000101D                 mov     ecx, [ebp+var_4]
.text:00001020                 call    ?PrintSeparatorLine@CHashCallbackConsole@@AAEXABV?$CObjectVector@UCHasherState@@@@@Z ; CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)
.text:00001025                 push    1
.text:00001027                 push    1
.text:00001029                 mov     ecx, [ebp+arg_0]
.text:0000102C                 add     ecx, 4
.text:0000102F                 push    ecx
.text:00001030                 mov     edx, [ebp+arg_0]
.text:00001033                 mov     eax, [edx+2Ch]
.text:00001036                 push    eax
.text:00001037                 mov     ecx, [edx+28h]
.text:0000103A                 push    ecx
.text:0000103B                 mov     ecx, [ebp+var_4]
.text:0000103E                 call    ?PrintResultLine@CHashCallbackConsole@@AAEX_KABV?$CObjectVector@UCHasherState@@@@I_N@Z ; CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)
.text:00001043                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001048                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000104D                 mov     edx, [ebp+var_4]
.text:00001050                 mov     ecx, [edx+0B8h]
.text:00001056                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000105B                 mov     ecx, eax
.text:0000105D                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001062                 mov     eax, [ebp+arg_0]
.text:00001065                 mov     [ebp+var_8], eax
.text:00001068                 mov     ecx, [ebp+var_8]
.text:0000106B                 cmp     dword ptr [ecx+18h], 1
.text:0000106F                 jnz     short loc_108E
.text:00001071                 mov     edx, [ebp+var_8]
.text:00001074                 cmp     dword ptr [edx+1Ch], 0
.text:00001078                 jnz     short loc_108E
.text:0000107A                 mov     eax, [ebp+arg_0]
.text:0000107D                 mov     [ebp+var_C], eax
.text:00001080                 mov     ecx, [ebp+var_C]
.text:00001083                 mov     edx, [ebp+var_C]
.text:00001086                 mov     eax, [ecx+10h]
.text:00001089                 or      eax, [edx+14h]
.text:0000108C                 jz      short loc_10D2
.text:0000108E
.text:0000108E loc_108E:                               ; CODE XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+A3j
.text:0000108E                                         ; CHashCallbackConsole::AfterLastFile(CHashBundle const &)+ACj
.text:0000108E                 mov     ecx, [ebp+arg_0]
.text:00001091                 mov     [ebp+var_10], ecx
.text:00001094                 mov     edx, [ebp+var_10]
.text:00001097                 mov     eax, [ebp+var_10]
.text:0000109A                 mov     ecx, [edx+10h]
.text:0000109D                 or      ecx, [eax+14h]
.text:000010A0                 jz      short loc_10BA
.text:000010A2                 mov     edx, [ebp+arg_0]
.text:000010A5                 mov     eax, [edx+14h]
.text:000010A8                 push    eax
.text:000010A9                 mov     ecx, [edx+10h]
.text:000010AC                 push    ecx             ; unsigned __int64
.text:000010AD                 push    offset $SG75127 ; "Folders"
.text:000010B2                 mov     ecx, [ebp+var_4] ; this
.text:000010B5                 call    ?PrintProperty@CHashCallbackConsole@@AAEXPBD_K@Z ; CHashCallbackConsole::PrintProperty(char const *,unsigned __int64)
.text:000010BA
.text:000010BA loc_10BA:                               ; CODE XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+D4j
.text:000010BA                 mov     edx, [ebp+arg_0]
.text:000010BD                 mov     eax, [edx+1Ch]
.text:000010C0                 push    eax
.text:000010C1                 mov     ecx, [edx+18h]
.text:000010C4                 push    ecx             ; unsigned __int64
.text:000010C5                 push    offset $SG75128 ; "Files"
.text:000010CA                 mov     ecx, [ebp+var_4] ; this
.text:000010CD                 call    ?PrintProperty@CHashCallbackConsole@@AAEXPBD_K@Z ; CHashCallbackConsole::PrintProperty(char const *,unsigned __int64)
.text:000010D2
.text:000010D2 loc_10D2:                               ; CODE XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+C0j
.text:000010D2                 mov     edx, [ebp+arg_0]
.text:000010D5                 mov     eax, [edx+2Ch]
.text:000010D8                 push    eax
.text:000010D9                 mov     ecx, [edx+28h]
.text:000010DC                 push    ecx             ; unsigned __int64
.text:000010DD                 push    offset $SG75129 ; "Size"
.text:000010E2                 mov     ecx, [ebp+var_4] ; this
.text:000010E5                 call    ?PrintProperty@CHashCallbackConsole@@AAEXPBD_K@Z ; CHashCallbackConsole::PrintProperty(char const *,unsigned __int64)
.text:000010EA                 mov     edx, [ebp+arg_0]
.text:000010ED                 mov     [ebp+var_14], edx
.text:000010F0                 mov     eax, [ebp+var_14]
.text:000010F3                 mov     ecx, [ebp+var_14]
.text:000010F6                 mov     edx, [eax+20h]
.text:000010F9                 or      edx, [ecx+24h]
.text:000010FC                 jz      short loc_112E
.text:000010FE                 mov     eax, [ebp+arg_0]
.text:00001101                 mov     ecx, [eax+24h]
.text:00001104                 push    ecx
.text:00001105                 mov     edx, [eax+20h]
.text:00001108                 push    edx             ; unsigned __int64
.text:00001109                 push    offset $SG75131 ; "Alternate streams"
.text:0000110E                 mov     ecx, [ebp+var_4] ; this
.text:00001111                 call    ?PrintProperty@CHashCallbackConsole@@AAEXPBD_K@Z ; CHashCallbackConsole::PrintProperty(char const *,unsigned __int64)
.text:00001116                 mov     eax, [ebp+arg_0]
.text:00001119                 mov     ecx, [eax+34h]
.text:0000111C                 push    ecx
.text:0000111D                 mov     edx, [eax+30h]
.text:00001120                 push    edx             ; unsigned __int64
.text:00001121                 push    offset $SG75132 ; "Alternate streams size"
.text:00001126                 mov     ecx, [ebp+var_4] ; this
.text:00001129                 call    ?PrintProperty@CHashCallbackConsole@@AAEXPBD_K@Z ; CHashCallbackConsole::PrintProperty(char const *,unsigned __int64)
.text:0000112E
.text:0000112E loc_112E:                               ; CODE XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+130j
.text:0000112E                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001133                 mov     eax, [ebp+var_4]
.text:00001136                 mov     ecx, [eax+0B8h]
.text:0000113C                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001141                 mov     ecx, [ebp+arg_0]
.text:00001144                 push    ecx             ; struct CHashBundle *
.text:00001145                 mov     edx, [ebp+var_4]
.text:00001148                 mov     eax, [edx+0B8h]
.text:0000114E                 push    eax             ; struct CStdOutStream *
.text:0000114F                 call    ?PrintHashStat@@YGXAAVCStdOutStream@@ABUCHashBundle@@@Z ; PrintHashStat(CStdOutStream &,CHashBundle const &)
.text:00001154
.text:00001154 loc_1154:                               ; CODE XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+34j
.text:00001154                                         ; CHashCallbackConsole::AfterLastFile(CHashBundle const &)+44j
.text:00001154                 xor     eax, eax
.text:00001156                 add     esp, 14h
.text:00001159                 cmp     ebp, esp
.text:0000115B                 call    __RTC_CheckEsp
.text:00001160                 mov     esp, ebp
.text:00001162                 pop     ebp
.text:00001163                 retn    4
.text:00001163 ?AfterLastFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z endp
.text:00001163
.text:00001163 ; ---------------------------------------------------------------------------
.text:00001166                 align 4
.text:00001166 _text           ends
.text:00001166
.rtc$TMZ:00001168 ; ===========================================================================
.rtc$TMZ:00001168
.rtc$TMZ:00001168 ; Segment type: Pure data
.rtc$TMZ:00001168 ; Segment permissions: Read
.rtc$TMZ:00001168 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001168                 assume cs:_rtc$TMZ
.rtc$TMZ:00001168                 ;org 1168h
.rtc$TMZ:00001168 ; COMDAT (pick any)
.rtc$TMZ:00001168 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001168 _rtc$TMZ        ends
.rtc$TMZ:00001168
.rtc$IMZ:0000116C ; ===========================================================================
.rtc$IMZ:0000116C
.rtc$IMZ:0000116C ; Segment type: Pure data
.rtc$IMZ:0000116C ; Segment permissions: Read
.rtc$IMZ:0000116C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000116C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000116C                 ;org 116Ch
.rtc$IMZ:0000116C ; COMDAT (pick any)
.rtc$IMZ:0000116C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000116C _rtc$IMZ        ends
.rtc$IMZ:0000116C
.text:00001170 ; ===========================================================================
.text:00001170
.text:00001170 ; Segment type: Pure code
.text:00001170 ; Segment permissions: Read/Execute
.text:00001170 _text           segment para public 'CODE' use32
.text:00001170                 assume cs:_text
.text:00001170                 ;org 1170h
.text:00001170 ; COMDAT (pick any)
.text:00001170                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001170
.text:00001170 ; =============== S U B R O U T I N E =======================================
.text:00001170
.text:00001170 ; Attributes: bp-based frame
.text:00001170
.text:00001170 ; bool NConsoleClose::TestBreakSignal(NConsoleClose *__hidden this)
.text:00001170                 public ?TestBreakSignal@NConsoleClose@@YG_NXZ
.text:00001170 ?TestBreakSignal@NConsoleClose@@YG_NXZ proc near
.text:00001170                                         ; CODE XREF: CheckBreak2(void)+3p
.text:00001170
.text:00001170 this            = dword ptr  8
.text:00001170
.text:00001170                 push    ebp
.text:00001171                 mov     ebp, esp
.text:00001173                 xor     eax, eax
.text:00001175                 cmp     dword ptr ds:?g_BreakCounter@NConsoleClose@@3IA, 0 ; uint NConsoleClose::g_BreakCounter
.text:0000117C                 setnz   al
.text:0000117F                 pop     ebp
.text:00001180                 retn
.text:00001180 ?TestBreakSignal@NConsoleClose@@YG_NXZ endp
.text:00001180
.text:00001180 ; ---------------------------------------------------------------------------
.text:00001181                 align 4
.text:00001181 _text           ends
.text:00001181
.text:00001184 ; ===========================================================================
.text:00001184
.text:00001184 ; Segment type: Pure code
.text:00001184 ; Segment permissions: Read/Execute
.text:00001184 _text           segment para public 'CODE' use32
.text:00001184                 assume cs:_text
.text:00001184                 ;org 1184h
.text:00001184 ; COMDAT (pick any)
.text:00001184                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001184
.text:00001184 ; =============== S U B R O U T I N E =======================================
.text:00001184
.text:00001184 ; Attributes: bp-based frame
.text:00001184
.text:00001184 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(class CStdOutStream & (__stdcall *)(class CStdOutStream &))
.text:00001184                 public ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z
.text:00001184 ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z proc near
.text:00001184                                         ; CODE XREF: CHashCallbackConsole::StartScanning(void)+43p
.text:00001184                                         ; CHashCallbackConsole::FinishScanning(CDirItemsStat const &)+8Ep ...
.text:00001184
.text:00001184 var_4           = dword ptr -4
.text:00001184 arg_0           = dword ptr  8
.text:00001184
.text:00001184                 push    ebp
.text:00001185                 mov     ebp, esp
.text:00001187                 push    ecx
.text:00001188                 push    esi
.text:00001189                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001190                 mov     [ebp+var_4], ecx
.text:00001193                 mov     esi, esp
.text:00001195                 mov     eax, [ebp+var_4]
.text:00001198                 push    eax
.text:00001199                 call    [ebp+arg_0]
.text:0000119C                 cmp     esi, esp
.text:0000119E                 call    __RTC_CheckEsp
.text:000011A3                 mov     eax, [ebp+var_4]
.text:000011A6                 pop     esi
.text:000011A7                 add     esp, 4
.text:000011AA                 cmp     ebp, esp
.text:000011AC                 call    __RTC_CheckEsp
.text:000011B1                 mov     esp, ebp
.text:000011B3                 pop     ebp
.text:000011B4                 retn    4
.text:000011B4 ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z endp
.text:000011B4
.text:000011B4 ; ---------------------------------------------------------------------------
.text:000011B7                 align 4
.text:000011B7 _text           ends
.text:000011B7
.text:000011B8 ; ===========================================================================
.text:000011B8
.text:000011B8 ; Segment type: Pure code
.text:000011B8 ; Segment permissions: Read/Execute
.text:000011B8 _text           segment para public 'CODE' use32
.text:000011B8                 assume cs:_text
.text:000011B8                 ;org 11B8h
.text:000011B8 ; COMDAT (pick any)
.text:000011B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011B8
.text:000011B8 ; =============== S U B R O U T I N E =======================================
.text:000011B8
.text:000011B8 ; Attributes: bp-based frame
.text:000011B8
.text:000011B8 ; int __stdcall CStdOutStream::operator<<(char *Str)
.text:000011B8                 public ??6CStdOutStream@@QAEAAV0@PBD@Z
.text:000011B8 ??6CStdOutStream@@QAEAAV0@PBD@Z proc near
.text:000011B8                                         ; CODE XREF: CHashCallbackConsole::StartScanning(void)+3Cp
.text:000011B8                                         ; CHashCallbackConsole::FinishScanning(CDirItemsStat const &)+87p ...
.text:000011B8
.text:000011B8 var_4           = dword ptr -4
.text:000011B8 Str             = dword ptr  8
.text:000011B8
.text:000011B8                 push    ebp
.text:000011B9                 mov     ebp, esp
.text:000011BB                 push    ecx
.text:000011BC                 push    esi
.text:000011BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011C4                 mov     [ebp+var_4], ecx
.text:000011C7                 mov     esi, esp
.text:000011C9                 mov     eax, [ebp+var_4]
.text:000011CC                 mov     ecx, [eax]
.text:000011CE                 push    ecx             ; File
.text:000011CF                 mov     edx, [ebp+Str]
.text:000011D2                 push    edx             ; Str
.text:000011D3                 call    dword ptr ds:__imp__fputs
.text:000011D9                 add     esp, 8
.text:000011DC                 cmp     esi, esp
.text:000011DE                 call    __RTC_CheckEsp
.text:000011E3                 mov     eax, [ebp+var_4]
.text:000011E6                 pop     esi
.text:000011E7                 add     esp, 4
.text:000011EA                 cmp     ebp, esp
.text:000011EC                 call    __RTC_CheckEsp
.text:000011F1                 mov     esp, ebp
.text:000011F3                 pop     ebp
.text:000011F4                 retn    4
.text:000011F4 ??6CStdOutStream@@QAEAAV0@PBD@Z endp
.text:000011F4
.text:000011F4 ; ---------------------------------------------------------------------------
.text:000011F7                 align 4
.text:000011F7 _text           ends
.text:000011F7
.text:000011F8 ; ===========================================================================
.text:000011F8
.text:000011F8 ; Segment type: Pure code
.text:000011F8 ; Segment permissions: Read/Execute
.text:000011F8 _text           segment para public 'CODE' use32
.text:000011F8                 assume cs:_text
.text:000011F8                 ;org 11F8h
.text:000011F8 ; COMDAT (pick any)
.text:000011F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011F8
.text:000011F8 ; =============== S U B R O U T I N E =======================================
.text:000011F8
.text:000011F8 ; Attributes: bp-based frame
.text:000011F8
.text:000011F8 ; bool __thiscall CCallbackConsoleBase::NeedPercents(CCallbackConsoleBase *__hidden this)
.text:000011F8                 public ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ
.text:000011F8 ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ proc near
.text:000011F8                                         ; CODE XREF: CHashCallbackConsole::StartScanning(void)+4Ep
.text:000011F8                                         ; CHashCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+14p ...
.text:000011F8
.text:000011F8 var_4           = dword ptr -4
.text:000011F8
.text:000011F8                 push    ebp
.text:000011F9                 mov     ebp, esp
.text:000011FB                 push    ecx
.text:000011FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001203                 mov     [ebp+var_4], ecx
.text:00001206                 mov     eax, [ebp+var_4]
.text:00001209                 xor     ecx, ecx
.text:0000120B                 cmp     dword ptr [eax+0A4h], 0
.text:00001212                 setnz   cl
.text:00001215                 mov     al, cl
.text:00001217                 mov     esp, ebp
.text:00001219                 pop     ebp
.text:0000121A                 retn
.text:0000121A ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ endp
.text:0000121A
.text:0000121A ; ---------------------------------------------------------------------------
.text:0000121B                 align 4
.text:0000121B _text           ends
.text:0000121B
.text:0000121C ; ===========================================================================
.text:0000121C
.text:0000121C ; Segment type: Pure code
.text:0000121C ; Segment permissions: Read/Execute
.text:0000121C _text           segment para public 'CODE' use32
.text:0000121C                 assume cs:_text
.text:0000121C                 ;org 121Ch
.text:0000121C ; COMDAT (pick any)
.text:0000121C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000121C
.text:0000121C ; =============== S U B R O U T I N E =======================================
.text:0000121C
.text:0000121C ; Attributes: bp-based frame
.text:0000121C
.text:0000121C ; unsigned __int64 __thiscall CDirItemsStat::GetTotalBytes(CDirItemsStat *__hidden this)
.text:0000121C                 public ?GetTotalBytes@CDirItemsStat@@QBE_KXZ
.text:0000121C ?GetTotalBytes@CDirItemsStat@@QBE_KXZ proc near
.text:0000121C                                         ; CODE XREF: CHashCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+46p
.text:0000121C
.text:0000121C var_4           = dword ptr -4
.text:0000121C
.text:0000121C                 push    ebp
.text:0000121D                 mov     ebp, esp
.text:0000121F                 push    ecx
.text:00001220                 push    esi
.text:00001221                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001228                 mov     [ebp+var_4], ecx
.text:0000122B                 mov     eax, [ebp+var_4]
.text:0000122E                 mov     ecx, [ebp+var_4]
.text:00001231                 mov     edx, [eax+18h]
.text:00001234                 add     edx, [ecx+20h]
.text:00001237                 mov     esi, [eax+1Ch]
.text:0000123A                 adc     esi, [ecx+24h]
.text:0000123D                 mov     eax, edx
.text:0000123F                 mov     edx, esi
.text:00001241                 pop     esi
.text:00001242                 mov     esp, ebp
.text:00001244                 pop     ebp
.text:00001245                 retn
.text:00001245 ?GetTotalBytes@CDirItemsStat@@QBE_KXZ endp
.text:00001245
.text:00001245 ; ---------------------------------------------------------------------------
.text:00001246                 align 4
.text:00001246 _text           ends
.text:00001246
.text:00001248 ; ===========================================================================
.text:00001248
.text:00001248 ; Segment type: Pure code
.text:00001248 ; Segment permissions: Read/Execute
.text:00001248 _text           segment para public 'CODE' use32
.text:00001248                 assume cs:_text
.text:00001248                 ;org 1248h
.text:00001248 ; COMDAT (pick any)
.text:00001248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001248
.text:00001248 ; =============== S U B R O U T I N E =======================================
.text:00001248
.text:00001248 ; Attributes: bp-based frame
.text:00001248
.text:00001248 ; public: __thiscall AString::operator char const *(void)const
.text:00001248                 public ??BAString@@QBEPBDXZ
.text:00001248 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: CHashCallbackConsole::FinishScanning(CDirItemsStat const &)+78p
.text:00001248                                         ; CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+EEp ...
.text:00001248
.text:00001248 var_4           = dword ptr -4
.text:00001248
.text:00001248                 push    ebp
.text:00001249                 mov     ebp, esp
.text:0000124B                 push    ecx
.text:0000124C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001253                 mov     [ebp+var_4], ecx
.text:00001256                 mov     eax, [ebp+var_4]
.text:00001259                 mov     eax, [eax]
.text:0000125B                 mov     esp, ebp
.text:0000125D                 pop     ebp
.text:0000125E                 retn
.text:0000125E ??BAString@@QBEPBDXZ endp
.text:0000125E
.text:0000125E ; ---------------------------------------------------------------------------
.text:0000125F                 align 10h
.text:0000125F _text           ends
.text:0000125F
.text:00001260 ; ===========================================================================
.text:00001260
.text:00001260 ; Segment type: Pure code
.text:00001260 ; Segment permissions: Read/Execute
.text:00001260 _text           segment para public 'CODE' use32
.text:00001260                 assume cs:_text
.text:00001260                 ;org 1260h
.text:00001260 ; COMDAT (pick any)
.text:00001260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001260
.text:00001260 ; =============== S U B R O U T I N E =======================================
.text:00001260
.text:00001260 ; Attributes: bp-based frame
.text:00001260
.text:00001260 ; void __thiscall AString::Empty(AString *__hidden this)
.text:00001260                 public ?Empty@AString@@QAEXXZ
.text:00001260 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+27p
.text:00001260                                         ; CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+71p ...
.text:00001260
.text:00001260 var_4           = dword ptr -4
.text:00001260
.text:00001260                 push    ebp
.text:00001261                 mov     ebp, esp
.text:00001263                 push    ecx
.text:00001264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000126B                 mov     [ebp+var_4], ecx
.text:0000126E                 mov     eax, [ebp+var_4]
.text:00001271                 mov     dword ptr [eax+4], 0
.text:00001278                 mov     ecx, [ebp+var_4]
.text:0000127B                 mov     edx, [ecx]
.text:0000127D                 mov     byte ptr [edx], 0
.text:00001280                 mov     esp, ebp
.text:00001282                 pop     ebp
.text:00001283                 retn
.text:00001283 ?Empty@AString@@QAEXXZ endp
.text:00001283
.text:00001283 _text           ends
.text:00001283
.text:00001284 ; ===========================================================================
.text:00001284
.text:00001284 ; Segment type: Pure code
.text:00001284 ; Segment permissions: Read/Execute
.text:00001284 _text           segment para public 'CODE' use32
.text:00001284                 assume cs:_text
.text:00001284                 ;org 1284h
.text:00001284 ; COMDAT (pick any)
.text:00001284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001284
.text:00001284 ; =============== S U B R O U T I N E =======================================
.text:00001284
.text:00001284 ; Attributes: bp-based frame
.text:00001284
.text:00001284 ; void __thiscall CHashCallbackConsole::AddSpacesBeforeName(CHashCallbackConsole *__hidden this)
.text:00001284                 public ?AddSpacesBeforeName@CHashCallbackConsole@@AAEXXZ
.text:00001284 ?AddSpacesBeforeName@CHashCallbackConsole@@AAEXXZ proc near
.text:00001284                                         ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+CAp
.text:00001284                                         ; CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+18Ep ...
.text:00001284
.text:00001284 var_4           = dword ptr -4
.text:00001284
.text:00001284                 push    ebp
.text:00001285                 mov     ebp, esp
.text:00001287                 push    ecx
.text:00001288                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000128F                 mov     [ebp+var_4], ecx
.text:00001292                 mov     ecx, [ebp+var_4]
.text:00001295                 add     ecx, 124h       ; this
.text:0000129B                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:000012A0                 mov     ecx, [ebp+var_4]
.text:000012A3                 add     ecx, 124h       ; this
.text:000012A9                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:000012AE                 add     esp, 4
.text:000012B1                 cmp     ebp, esp
.text:000012B3                 call    __RTC_CheckEsp
.text:000012B8                 mov     esp, ebp
.text:000012BA                 pop     ebp
.text:000012BB                 retn
.text:000012BB ?AddSpacesBeforeName@CHashCallbackConsole@@AAEXXZ endp
.text:000012BB
.text:000012BB _text           ends
.text:000012BB
.text:000012BC ; ===========================================================================
.text:000012BC
.text:000012BC ; Segment type: Pure code
.text:000012BC ; Segment permissions: Read/Execute
.text:000012BC _text           segment para public 'CODE' use32
.text:000012BC                 assume cs:_text
.text:000012BC                 ;org 12BCh
.text:000012BC ; COMDAT (pick any)
.text:000012BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012BC
.text:000012BC ; =============== S U B R O U T I N E =======================================
.text:000012BC
.text:000012BC ; Attributes: bp-based frame
.text:000012BC
.text:000012BC ; public: class AString & __thiscall AString::operator+=(char)
.text:000012BC                 public ??YAString@@QAEAAV0@D@Z
.text:000012BC ??YAString@@QAEAAV0@D@Z proc near       ; CODE XREF: AddMinuses(AString &,uint)+2Ap
.text:000012BC
.text:000012BC var_C           = dword ptr -0Ch
.text:000012BC var_8           = dword ptr -8
.text:000012BC var_4           = dword ptr -4
.text:000012BC arg_0           = byte ptr  8
.text:000012BC
.text:000012BC                 push    ebp
.text:000012BD                 mov     ebp, esp
.text:000012BF                 sub     esp, 0Ch
.text:000012C2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000012C9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000012D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012D7                 mov     [ebp+var_4], ecx
.text:000012DA                 mov     eax, [ebp+var_4]
.text:000012DD                 mov     ecx, [ebp+var_4]
.text:000012E0                 mov     edx, [eax+8]
.text:000012E3                 cmp     edx, [ecx+4]
.text:000012E6                 jnz     short loc_12F0
.text:000012E8                 mov     ecx, [ebp+var_4] ; this
.text:000012EB                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:000012F0
.text:000012F0 loc_12F0:                               ; CODE XREF: AString::operator+=(char)+2Aj
.text:000012F0                 mov     eax, [ebp+var_4]
.text:000012F3                 mov     ecx, [eax+4]
.text:000012F6                 mov     [ebp+var_8], ecx
.text:000012F9                 mov     edx, [ebp+var_4]
.text:000012FC                 mov     eax, [edx]
.text:000012FE                 mov     [ebp+var_C], eax
.text:00001301                 mov     ecx, [ebp+var_C]
.text:00001304                 add     ecx, [ebp+var_8]
.text:00001307                 mov     dl, [ebp+arg_0]
.text:0000130A                 mov     [ecx], dl
.text:0000130C                 mov     eax, [ebp+var_8]
.text:0000130F                 add     eax, 1
.text:00001312                 mov     [ebp+var_8], eax
.text:00001315                 mov     ecx, [ebp+var_C]
.text:00001318                 add     ecx, [ebp+var_8]
.text:0000131B                 mov     byte ptr [ecx], 0
.text:0000131E                 mov     edx, [ebp+var_4]
.text:00001321                 mov     eax, [ebp+var_8]
.text:00001324                 mov     [edx+4], eax
.text:00001327                 mov     eax, [ebp+var_4]
.text:0000132A                 add     esp, 0Ch
.text:0000132D                 cmp     ebp, esp
.text:0000132F                 call    __RTC_CheckEsp
.text:00001334                 mov     esp, ebp
.text:00001336                 pop     ebp
.text:00001337                 retn    4
.text:00001337 ??YAString@@QAEAAV0@D@Z endp
.text:00001337
.text:00001337 ; ---------------------------------------------------------------------------
.text:0000133A                 align 4
.text:0000133A _text           ends
.text:0000133A
.text$x:0000133C ; ===========================================================================
.text$x:0000133C
.text$x:0000133C ; Segment type: Pure code
.text$x:0000133C ; Segment permissions: Read/Execute
.text$x:0000133C _text$x         segment para public 'CODE' use32
.text$x:0000133C                 assume cs:_text$x
.text$x:0000133C                 ;org 133Ch
.text$x:0000133C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000133C
.text$x:0000133C ; =============== S U B R O U T I N E =======================================
.text$x:0000133C
.text$x:0000133C
.text$x:0000133C __unwindfunclet$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z$0 proc near
.text$x:0000133C                                         ; DATA XREF: .xdata$x:00001394o
.text$x:0000133C                 lea     ecx, [ebp-28h]  ; this
.text$x:0000133F                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000133F __unwindfunclet$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z$0 endp
.text$x:0000133F
.text$x:00001344
.text$x:00001344 ; =============== S U B R O U T I N E =======================================
.text$x:00001344
.text$x:00001344
.text$x:00001344 __ehhandler$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z proc near
.text$x:00001344                                         ; DATA XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+5o
.text$x:00001344
.text$x:00001344 arg_4           = dword ptr  8
.text$x:00001344
.text$x:00001344                 mov     edx, [esp+arg_4]
.text$x:00001348                 lea     eax, [edx+0Ch]
.text$x:0000134B                 mov     ecx, [edx-28h]
.text$x:0000134E                 xor     ecx, eax
.text$x:00001350                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001355                 mov     eax, offset __ehfuncinfo$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z
.text$x:0000135A                 jmp     ___CxxFrameHandler3
.text$x:0000135A __ehhandler$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z endp
.text$x:0000135A
.text$x:0000135F
.text$x:0000135F ; =============== S U B R O U T I N E =======================================
.text$x:0000135F
.text$x:0000135F
.text$x:0000135F __unwindfunclet$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z$0 proc near
.text$x:0000135F                                         ; DATA XREF: .xdata$x:000013C0o
.text$x:0000135F                 lea     ecx, [ebp-20h]  ; this
.text$x:00001362                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001362 __unwindfunclet$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z$0 endp
.text$x:00001362
.text$x:00001367
.text$x:00001367 ; =============== S U B R O U T I N E =======================================
.text$x:00001367
.text$x:00001367
.text$x:00001367 __ehhandler$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z proc near
.text$x:00001367                                         ; DATA XREF: PrintSum(CStdOutStream &,CHasherState const &,uint)+5o
.text$x:00001367
.text$x:00001367 arg_4           = dword ptr  8
.text$x:00001367
.text$x:00001367                 mov     edx, [esp+arg_4]
.text$x:0000136B                 lea     eax, [edx+0Ch]
.text$x:0000136E                 mov     ecx, [edx-0E8h]
.text$x:00001374                 xor     ecx, eax
.text$x:00001376                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000137B                 mov     ecx, [edx-4]
.text$x:0000137E                 xor     ecx, eax
.text$x:00001380                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001385                 mov     eax, offset __ehfuncinfo$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z
.text$x:0000138A                 jmp     ___CxxFrameHandler3
.text$x:0000138A __ehhandler$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z endp
.text$x:0000138A
.text$x:0000138A ; ---------------------------------------------------------------------------
.text$x:0000138F                 align 10h
.text$x:0000138F _text$x         ends
.text$x:0000138F
.xdata$x:00001390 ; ===========================================================================
.xdata$x:00001390
.xdata$x:00001390 ; Segment type: Pure data
.xdata$x:00001390 ; Segment permissions: Read
.xdata$x:00001390 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001390                 assume cs:_xdata$x
.xdata$x:00001390                 ;org 1390h
.xdata$x:00001390 __unwindtable$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z db 0FFh
.xdata$x:00001390                                         ; DATA XREF: .xdata$x:000013A0o
.xdata$x:00001391                 db 0FFh
.xdata$x:00001392                 db 0FFh
.xdata$x:00001393                 db 0FFh
.xdata$x:00001394                 dd offset __unwindfunclet$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z$0
.xdata$x:00001398 __ehfuncinfo$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z db  22h ; "
.xdata$x:00001398                                         ; DATA XREF: __ehhandler$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z+11o
.xdata$x:00001399                 db    5
.xdata$x:0000139A                 db  93h ; ô
.xdata$x:0000139B                 db  19h
.xdata$x:0000139C                 db    1
.xdata$x:0000139D                 db    0
.xdata$x:0000139E                 db    0
.xdata$x:0000139F                 db    0
.xdata$x:000013A0                 dd offset __unwindtable$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z
.xdata$x:000013A4                 db    0
.xdata$x:000013A5                 db    0
.xdata$x:000013A6                 db    0
.xdata$x:000013A7                 db    0
.xdata$x:000013A8                 db    0
.xdata$x:000013A9                 db    0
.xdata$x:000013AA                 db    0
.xdata$x:000013AB                 db    0
.xdata$x:000013AC                 db    0
.xdata$x:000013AD                 db    0
.xdata$x:000013AE                 db    0
.xdata$x:000013AF                 db    0
.xdata$x:000013B0                 db    0
.xdata$x:000013B1                 db    0
.xdata$x:000013B2                 db    0
.xdata$x:000013B3                 db    0
.xdata$x:000013B4                 db    0
.xdata$x:000013B5                 db    0
.xdata$x:000013B6                 db    0
.xdata$x:000013B7                 db    0
.xdata$x:000013B8                 db    1
.xdata$x:000013B9                 db    0
.xdata$x:000013BA                 db    0
.xdata$x:000013BB                 db    0
.xdata$x:000013BC __unwindtable$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z db 0FFh
.xdata$x:000013BC                                         ; DATA XREF: .xdata$x:000013CCo
.xdata$x:000013BD                 db 0FFh
.xdata$x:000013BE                 db 0FFh
.xdata$x:000013BF                 db 0FFh
.xdata$x:000013C0                 dd offset __unwindfunclet$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z$0
.xdata$x:000013C4 __ehfuncinfo$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z db  22h ; "
.xdata$x:000013C4                                         ; DATA XREF: __ehhandler$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z+1Eo
.xdata$x:000013C5                 db    5
.xdata$x:000013C6                 db  93h ; ô
.xdata$x:000013C7                 db  19h
.xdata$x:000013C8                 db    1
.xdata$x:000013C9                 db    0
.xdata$x:000013CA                 db    0
.xdata$x:000013CB                 db    0
.xdata$x:000013CC                 dd offset __unwindtable$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z
.xdata$x:000013D0                 db    0
.xdata$x:000013D1                 db    0
.xdata$x:000013D2                 db    0
.xdata$x:000013D3                 db    0
.xdata$x:000013D4                 db    0
.xdata$x:000013D5                 db    0
.xdata$x:000013D6                 db    0
.xdata$x:000013D7                 db    0
.xdata$x:000013D8                 db    0
.xdata$x:000013D9                 db    0
.xdata$x:000013DA                 db    0
.xdata$x:000013DB                 db    0
.xdata$x:000013DC                 db    0
.xdata$x:000013DD                 db    0
.xdata$x:000013DE                 db    0
.xdata$x:000013DF                 db    0
.xdata$x:000013E0                 db    0
.xdata$x:000013E1                 db    0
.xdata$x:000013E2                 db    0
.xdata$x:000013E3                 db    0
.xdata$x:000013E4                 db    1
.xdata$x:000013E5                 db    0
.xdata$x:000013E6                 db    0
.xdata$x:000013E7                 db    0
.xdata$x:000013E7 _xdata$x        ends
.xdata$x:000013E7
.text:000013E8 ; ===========================================================================
.text:000013E8
.text:000013E8 ; Segment type: Pure code
.text:000013E8 ; Segment permissions: Read/Execute
.text:000013E8 _text           segment para public 'CODE' use32
.text:000013E8                 assume cs:_text
.text:000013E8                 ;org 13E8h
.text:000013E8 ; COMDAT (pick any)
.text:000013E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000013E8
.text:000013E8 ; =============== S U B R O U T I N E =======================================
.text:000013E8
.text:000013E8 ; Attributes: bp-based frame
.text:000013E8
.text:000013E8 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:000013E8                 public ??1AString@@QAE@XZ
.text:000013E8 ??1AString@@QAE@XZ proc near            ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+178p
.text:000013E8                                         ; PrintSum(CStdOutStream &,CHasherState const &,uint)+98p ...
.text:000013E8
.text:000013E8 var_8           = dword ptr -8
.text:000013E8 var_4           = dword ptr -4
.text:000013E8
.text:000013E8                 push    ebp
.text:000013E9                 mov     ebp, esp
.text:000013EB                 sub     esp, 8
.text:000013EE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000013F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013FC                 mov     [ebp+var_4], ecx
.text:000013FF                 mov     eax, [ebp+var_4]
.text:00001402                 mov     ecx, [eax]
.text:00001404                 mov     [ebp+var_8], ecx
.text:00001407                 mov     edx, [ebp+var_8]
.text:0000140A                 push    edx             ; void *
.text:0000140B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001410                 add     esp, 4
.text:00001413                 add     esp, 8
.text:00001416                 cmp     ebp, esp
.text:00001418                 call    __RTC_CheckEsp
.text:0000141D                 mov     esp, ebp
.text:0000141F                 pop     ebp
.text:00001420                 retn
.text:00001420 ??1AString@@QAE@XZ endp
.text:00001420
.text:00001420 ; ---------------------------------------------------------------------------
.text:00001421                 align 4
.text:00001421 _text           ends
.text:00001421
.text:00001424 ; ===========================================================================
.text:00001424
.text:00001424 ; Segment type: Pure code
.text:00001424 ; Segment permissions: Read/Execute
.text:00001424 _text           segment para public 'CODE' use32
.text:00001424                 assume cs:_text
.text:00001424                 ;org 1424h
.text:00001424 ; COMDAT (pick any)
.text:00001424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001424
.text:00001424 ; =============== S U B R O U T I N E =======================================
.text:00001424
.text:00001424 ; Attributes: bp-based frame
.text:00001424
.text:00001424 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00001424                 public ?Len@AString@@QBEIXZ
.text:00001424 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+F2p
.text:00001424                                         ; CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+141p ...
.text:00001424
.text:00001424 var_4           = dword ptr -4
.text:00001424
.text:00001424                 push    ebp
.text:00001425                 mov     ebp, esp
.text:00001427                 push    ecx
.text:00001428                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000142F                 mov     [ebp+var_4], ecx
.text:00001432                 mov     eax, [ebp+var_4]
.text:00001435                 mov     eax, [eax+4]
.text:00001438                 mov     esp, ebp
.text:0000143A                 pop     ebp
.text:0000143B                 retn
.text:0000143B ?Len@AString@@QBEIXZ endp
.text:0000143B
.text:0000143B _text           ends
.text:0000143B
.text:0000143C ; ===========================================================================
.text:0000143C
.text:0000143C ; Segment type: Pure code
.text:0000143C ; Segment permissions: Read/Execute
.text:0000143C _text           segment para public 'CODE' use32
.text:0000143C                 assume cs:_text
.text:0000143C                 ;org 143Ch
.text:0000143C ; COMDAT (pick any)
.text:0000143C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000143C
.text:0000143C ; =============== S U B R O U T I N E =======================================
.text:0000143C
.text:0000143C ; Attributes: bp-based frame
.text:0000143C
.text:0000143C ; void __thiscall CCallbackConsoleBase::ClosePercents_for_so(CCallbackConsoleBase *__hidden this)
.text:0000143C                 public ?ClosePercents_for_so@CCallbackConsoleBase@@QAEXXZ
.text:0000143C ?ClosePercents_for_so@CCallbackConsoleBase@@QAEXXZ proc near
.text:0000143C                                         ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+7Cp
.text:0000143C                                         ; CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+32p
.text:0000143C
.text:0000143C var_4           = dword ptr -4
.text:0000143C
.text:0000143C                 push    ebp
.text:0000143D                 mov     ebp, esp
.text:0000143F                 push    ecx
.text:00001440                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001447                 mov     [ebp+var_4], ecx
.text:0000144A                 mov     ecx, [ebp+var_4] ; this
.text:0000144D                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:00001452                 movzx   eax, al
.text:00001455                 test    eax, eax
.text:00001457                 jz      short loc_1477
.text:00001459                 mov     ecx, [ebp+var_4]
.text:0000145C                 mov     edx, [ebp+var_4]
.text:0000145F                 mov     eax, [ecx+0B0h]
.text:00001465                 cmp     eax, [edx+0A4h]
.text:0000146B                 jnz     short loc_1477
.text:0000146D                 push    0               ; bool
.text:0000146F                 mov     ecx, [ebp+var_4] ; this
.text:00001472                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:00001477
.text:00001477 loc_1477:                               ; CODE XREF: CCallbackConsoleBase::ClosePercents_for_so(void)+1Bj
.text:00001477                                         ; CCallbackConsoleBase::ClosePercents_for_so(void)+2Fj
.text:00001477                 add     esp, 4
.text:0000147A                 cmp     ebp, esp
.text:0000147C                 call    __RTC_CheckEsp
.text:00001481                 mov     esp, ebp
.text:00001483                 pop     ebp
.text:00001484                 retn
.text:00001484 ?ClosePercents_for_so@CCallbackConsoleBase@@QAEXXZ endp
.text:00001484
.text:00001484 ; ---------------------------------------------------------------------------
.text:00001485                 align 4
.text:00001485 _text           ends
.text:00001485
.text:00001488 ; ===========================================================================
.text:00001488
.text:00001488 ; Segment type: Pure code
.text:00001488 ; Segment permissions: Read/Execute
.text:00001488 _text           segment para public 'CODE' use32
.text:00001488                 assume cs:_text
.text:00001488                 ;org 1488h
.text:00001488 ; COMDAT (pick any)
.text:00001488                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001488
.text:00001488 ; =============== S U B R O U T I N E =======================================
.text:00001488
.text:00001488 ; Attributes: bp-based frame
.text:00001488
.text:00001488 ; void __thiscall UString::Empty(UString *__hidden this)
.text:00001488                 public ?Empty@UString@@QAEXXZ
.text:00001488 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: CHashCallbackConsole::GetStream(wchar_t const *,bool)+46p
.text:00001488
.text:00001488 var_4           = dword ptr -4
.text:00001488
.text:00001488                 push    ebp
.text:00001489                 mov     ebp, esp
.text:0000148B                 push    ecx
.text:0000148C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001493                 mov     [ebp+var_4], ecx
.text:00001496                 mov     eax, [ebp+var_4]
.text:00001499                 mov     dword ptr [eax+4], 0
.text:000014A0                 mov     ecx, [ebp+var_4]
.text:000014A3                 mov     edx, [ecx]
.text:000014A5                 xor     eax, eax
.text:000014A7                 mov     [edx], ax
.text:000014AA                 mov     esp, ebp
.text:000014AC                 pop     ebp
.text:000014AD                 retn
.text:000014AD ?Empty@UString@@QAEXXZ endp
.text:000014AD
.text:000014AD ; ---------------------------------------------------------------------------
.text:000014AE                 align 10h
.text:000014AE _text           ends
.text:000014AE
.text:000014B0 ; ===========================================================================
.text:000014B0
.text:000014B0 ; Segment type: Pure code
.text:000014B0 ; Segment permissions: Read/Execute
.text:000014B0 _text           segment para public 'CODE' use32
.text:000014B0                 assume cs:_text
.text:000014B0                 ;org 14B0h
.text:000014B0 ; COMDAT (pick any)
.text:000014B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014B0
.text:000014B0 ; =============== S U B R O U T I N E =======================================
.text:000014B0
.text:000014B0 ; Attributes: bp-based frame
.text:000014B0
.text:000014B0 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:000014B0                 public ?IsEmpty@UString@@QBE_NXZ
.text:000014B0 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)+53p
.text:000014B0
.text:000014B0 var_4           = dword ptr -4
.text:000014B0
.text:000014B0                 push    ebp
.text:000014B1                 mov     ebp, esp
.text:000014B3                 push    ecx
.text:000014B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014BB                 mov     [ebp+var_4], ecx
.text:000014BE                 mov     eax, [ebp+var_4]
.text:000014C1                 xor     ecx, ecx
.text:000014C3                 cmp     dword ptr [eax+4], 0
.text:000014C7                 setz    cl
.text:000014CA                 mov     al, cl
.text:000014CC                 mov     esp, ebp
.text:000014CE                 pop     ebp
.text:000014CF                 retn
.text:000014CF ?IsEmpty@UString@@QBE_NXZ endp
.text:000014CF
.text:000014CF _text           ends
.text:000014CF
.text:000014D0 ; ===========================================================================
.text:000014D0
.text:000014D0 ; Segment type: Pure code
.text:000014D0 ; Segment permissions: Read/Execute
.text:000014D0 _text           segment para public 'CODE' use32
.text:000014D0                 assume cs:_text
.text:000014D0                 ;org 14D0h
.text:000014D0 ; COMDAT (pick any)
.text:000014D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014D0
.text:000014D0 ; =============== S U B R O U T I N E =======================================
.text:000014D0
.text:000014D0 ; Attributes: bp-based frame
.text:000014D0
.text:000014D0 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:000014D0                 public ??BUString@@QBEPB_WXZ
.text:000014D0 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)+7Fp
.text:000014D0
.text:000014D0 var_4           = dword ptr -4
.text:000014D0
.text:000014D0                 push    ebp
.text:000014D1                 mov     ebp, esp
.text:000014D3                 push    ecx
.text:000014D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014DB                 mov     [ebp+var_4], ecx
.text:000014DE                 mov     eax, [ebp+var_4]
.text:000014E1                 mov     eax, [eax]
.text:000014E3                 mov     esp, ebp
.text:000014E5                 pop     ebp
.text:000014E6                 retn
.text:000014E6 ??BUString@@QBEPB_WXZ endp
.text:000014E6
.text:000014E6 ; ---------------------------------------------------------------------------
.text:000014E7                 align 4
.text:000014E7 _text           ends
.text:000014E7
.text:000014E8 ; ===========================================================================
.text:000014E8
.text:000014E8 ; Segment type: Pure code
.text:000014E8 ; Segment permissions: Read/Execute
.text:000014E8 _text           segment para public 'CODE' use32
.text:000014E8                 assume cs:_text
.text:000014E8                 ;org 14E8h
.text:000014E8 ; COMDAT (pick any)
.text:000014E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014E8
.text:000014E8 ; =============== S U B R O U T I N E =======================================
.text:000014E8
.text:000014E8 ; Attributes: bp-based frame
.text:000014E8
.text:000014E8 ; void __thiscall CCallbackConsoleBase::ClosePercents2(CCallbackConsoleBase *__hidden this)
.text:000014E8                 public ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ
.text:000014E8 ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ proc near
.text:000014E8                                         ; CODE XREF: CHashCallbackConsole::AfterLastFile(CHashBundle const &)+23p
.text:000014E8
.text:000014E8 var_4           = dword ptr -4
.text:000014E8
.text:000014E8                 push    ebp
.text:000014E9                 mov     ebp, esp
.text:000014EB                 push    ecx
.text:000014EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014F3                 mov     [ebp+var_4], ecx
.text:000014F6                 mov     ecx, [ebp+var_4] ; this
.text:000014F9                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:000014FE                 movzx   eax, al
.text:00001501                 test    eax, eax
.text:00001503                 jz      short loc_150F
.text:00001505                 push    1               ; bool
.text:00001507                 mov     ecx, [ebp+var_4] ; this
.text:0000150A                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:0000150F
.text:0000150F loc_150F:                               ; CODE XREF: CCallbackConsoleBase::ClosePercents2(void)+1Bj
.text:0000150F                 add     esp, 4
.text:00001512                 cmp     ebp, esp
.text:00001514                 call    __RTC_CheckEsp
.text:00001519                 mov     esp, ebp
.text:0000151B                 pop     ebp
.text:0000151C                 retn
.text:0000151C ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ endp
.text:0000151C
.text:0000151C ; ---------------------------------------------------------------------------
.text:0000151D                 align 10h
.text:0000151D _text           ends
.text:0000151D
.text:00001520 ; ===========================================================================
.text:00001520
.text:00001520 ; Segment type: Pure code
.text:00001520 ; Segment permissions: Read/Execute
.text:00001520 _text           segment para public 'CODE' use32
.text:00001520                 assume cs:_text
.text:00001520                 ;org 1520h
.text:00001520 ; COMDAT (pick any)
.text:00001520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001520
.text:00001520 ; =============== S U B R O U T I N E =======================================
.text:00001520
.text:00001520 ; Attributes: bp-based frame
.text:00001520
.text:00001520 ; public: unsigned int __thiscall CObjectVector<struct CHasherState>::Size(void)const
.text:00001520                 public ?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ
.text:00001520 ?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ proc near
.text:00001520                                         ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+41p
.text:00001520                                         ; CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+99p ...
.text:00001520
.text:00001520 var_4           = dword ptr -4
.text:00001520
.text:00001520                 push    ebp
.text:00001521                 mov     ebp, esp
.text:00001523                 push    ecx
.text:00001524                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000152B                 mov     [ebp+var_4], ecx
.text:0000152E                 mov     ecx, [ebp+var_4]
.text:00001531                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00001536                 add     esp, 4
.text:00001539                 cmp     ebp, esp
.text:0000153B                 call    __RTC_CheckEsp
.text:00001540                 mov     esp, ebp
.text:00001542                 pop     ebp
.text:00001543                 retn
.text:00001543 ?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ endp
.text:00001543
.text:00001543 _text           ends
.text:00001543
.text:00001544 ; ===========================================================================
.text:00001544
.text:00001544 ; Segment type: Pure code
.text:00001544 ; Segment permissions: Read/Execute
.text:00001544 _text           segment para public 'CODE' use32
.text:00001544                 assume cs:_text
.text:00001544                 ;org 1544h
.text:00001544 ; COMDAT (pick any)
.text:00001544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001544
.text:00001544 ; =============== S U B R O U T I N E =======================================
.text:00001544
.text:00001544 ; Attributes: bp-based frame
.text:00001544
.text:00001544 ; public: struct CHasherState const & __thiscall CObjectVector<struct CHasherState>::operator[](unsigned int)const
.text:00001544                 public ??A?$CObjectVector@UCHasherState@@@@QBEABUCHasherState@@I@Z
.text:00001544 ??A?$CObjectVector@UCHasherState@@@@QBEABUCHasherState@@I@Z proc near
.text:00001544                                         ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+66p
.text:00001544                                         ; CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+C1p ...
.text:00001544
.text:00001544 var_4           = dword ptr -4
.text:00001544 arg_0           = dword ptr  8
.text:00001544
.text:00001544                 push    ebp
.text:00001545                 mov     ebp, esp
.text:00001547                 push    ecx
.text:00001548                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000154F                 mov     [ebp+var_4], ecx
.text:00001552                 mov     eax, [ebp+arg_0]
.text:00001555                 push    eax
.text:00001556                 mov     ecx, [ebp+var_4]
.text:00001559                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000155E                 mov     eax, [eax]
.text:00001560                 add     esp, 4
.text:00001563                 cmp     ebp, esp
.text:00001565                 call    __RTC_CheckEsp
.text:0000156A                 mov     esp, ebp
.text:0000156C                 pop     ebp
.text:0000156D                 retn    4
.text:0000156D ??A?$CObjectVector@UCHasherState@@@@QBEABUCHasherState@@I@Z endp
.text:0000156D
.text:0000156D _text           ends
.text:0000156D
.text:00001570 ; ===========================================================================
.text:00001570
.text:00001570 ; Segment type: Pure code
.text:00001570 ; Segment permissions: Read/Execute
.text:00001570 _text           segment para public 'CODE' use32
.text:00001570                 assume cs:_text
.text:00001570                 ;org 1570h
.text:00001570 ; COMDAT (pick any)
.text:00001570                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001570
.text:00001570 ; =============== S U B R O U T I N E =======================================
.text:00001570
.text:00001570 ; Attributes: bp-based frame
.text:00001570
.text:00001570 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00001570                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00001570 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00001570                                         ; CODE XREF: CObjectVector<CHasherState>::Size(void)+11p
.text:00001570
.text:00001570 var_4           = dword ptr -4
.text:00001570
.text:00001570                 push    ebp
.text:00001571                 mov     ebp, esp
.text:00001573                 push    ecx
.text:00001574                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000157B                 mov     [ebp+var_4], ecx
.text:0000157E                 mov     eax, [ebp+var_4]
.text:00001581                 mov     eax, [eax+4]
.text:00001584                 mov     esp, ebp
.text:00001586                 pop     ebp
.text:00001587                 retn
.text:00001587 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00001587
.text:00001587 _text           ends
.text:00001587
.text:00001588 ; ===========================================================================
.text:00001588
.text:00001588 ; Segment type: Pure code
.text:00001588 ; Segment permissions: Read/Execute
.text:00001588 _text           segment para public 'CODE' use32
.text:00001588                 assume cs:_text
.text:00001588                 ;org 1588h
.text:00001588 ; COMDAT (pick any)
.text:00001588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001588
.text:00001588 ; =============== S U B R O U T I N E =======================================
.text:00001588
.text:00001588 ; Attributes: bp-based frame
.text:00001588
.text:00001588 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00001588                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00001588 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00001588                                         ; CODE XREF: CObjectVector<CHasherState>::operator[](uint)+15p
.text:00001588
.text:00001588 var_4           = dword ptr -4
.text:00001588 arg_0           = dword ptr  8
.text:00001588
.text:00001588                 push    ebp
.text:00001589                 mov     ebp, esp
.text:0000158B                 push    ecx
.text:0000158C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001593                 mov     [ebp+var_4], ecx
.text:00001596                 mov     eax, [ebp+var_4]
.text:00001599                 mov     ecx, [eax]
.text:0000159B                 mov     edx, [ebp+arg_0]
.text:0000159E                 lea     eax, [ecx+edx*4]
.text:000015A1                 mov     esp, ebp
.text:000015A3                 pop     ebp
.text:000015A4                 retn    4
.text:000015A4 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:000015A4
.text:000015A4 _text           ends
.text:000015A4
UNDEF:000015B0 ; ===========================================================================
UNDEF:000015B0
UNDEF:000015B0 ; Segment type: Externs
UNDEF:000015B0 ; UNDEF
UNDEF:000015B0                 extrn __RTC_CheckEsp:near
UNDEF:000015B0                                         ; CODE XREF: CHashCallbackConsole::CheckBreak(void)+18p
UNDEF:000015B0                                         ; CheckBreak2(void)+16p ...
UNDEF:000015B4                 extrn __RTC_Shutdown:near
UNDEF:000015B4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000015B8                 extrn __RTC_InitBase:near
UNDEF:000015B8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000015BC ; unsigned int NConsoleClose::g_BreakCounter
UNDEF:000015BC                 extrn ?g_BreakCounter@NConsoleClose@@3IA:near
UNDEF:000015BC                                         ; DATA XREF: NConsoleClose::TestBreakSignal(void)+5r
UNDEF:000015C0 ; public: class AString & __thiscall AString::operator=(char const *)
UNDEF:000015C0                 extrn ??4AString@@QAEAAV0@PBD@Z:near
UNDEF:000015C0                                         ; CODE XREF: CHashCallbackConsole::StartScanning(void)+70p
UNDEF:000015C4 ; void __thiscall CPercentPrinterState::ClearCurState(CPercentPrinterState *__hidden this)
UNDEF:000015C4                 extrn ?ClearCurState@CPercentPrinterState@@QAEXXZ:near
UNDEF:000015C4                                         ; CODE XREF: CHashCallbackConsole::StartScanning(void)+60p
UNDEF:000015C4                                         ; CHashCallbackConsole::FinishScanning(CDirItemsStat const &)+33p
UNDEF:000015C8 ; class CStdOutStream & __stdcall endl(class CStdOutStream &)
UNDEF:000015C8                 extrn ?endl@@YGAAVCStdOutStream@@AAV1@@Z:near
UNDEF:000015C8                                         ; DATA XREF: CHashCallbackConsole::StartScanning(void)+28o
UNDEF:000015C8                                         ; CHashCallbackConsole::FinishScanning(CDirItemsStat const &)+65o ...
UNDEF:000015CC ; int __cdecl _fputs(const char *Str, FILE *File)
UNDEF:000015CC                 extrn __imp__fputs:near ; CODE XREF: CStdOutStream::operator<<(char const *)+1Bp
UNDEF:000015CC                                         ; DATA XREF: CStdOutStream::operator<<(char const *)+1Br
UNDEF:000015D0 ; void __thiscall CPercentPrinter::Print(CPercentPrinter *__hidden this)
UNDEF:000015D0                 extrn ?Print@CPercentPrinter@@QAEXXZ:near
UNDEF:000015D0                                         ; CODE XREF: CHashCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+69p
UNDEF:000015D0                                         ; CHashCallbackConsole::SetTotal(unsigned __int64)+35p ...
UNDEF:000015D4 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:000015D4                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:000015D4                                         ; CODE XREF: CHashCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+5Ep
UNDEF:000015D8 ; __int32 __thiscall CCallbackConsoleBase::ScanError_Base(CCallbackConsoleBase *__hidden this, const struct UString *, unsigned __int32)
UNDEF:000015D8                 extrn ?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z:near
UNDEF:000015D8                                         ; CODE XREF: CHashCallbackConsole::ScanError(UString const &,ulong)+1Cp
UNDEF:000015DC ; void __stdcall Print_DirItemsStat(struct AString *, const struct CDirItemsStat *)
UNDEF:000015DC                 extrn ?Print_DirItemsStat@@YGXAAVAString@@ABUCDirItemsStat@@@Z:near
UNDEF:000015DC                                         ; CODE XREF: CHashCallbackConsole::FinishScanning(CDirItemsStat const &)+60p
UNDEF:000015E0 ; void __thiscall CPercentPrinter::ClosePrint(CPercentPrinter *__hidden this, bool)
UNDEF:000015E0                 extrn ?ClosePrint@CPercentPrinter@@QAEX_N@Z:near
UNDEF:000015E0                                         ; CODE XREF: CHashCallbackConsole::FinishScanning(CDirItemsStat const &)+28p
UNDEF:000015E0                                         ; CCallbackConsoleBase::ClosePercents_for_so(void)+36p ...
UNDEF:000015E4 ; void __thiscall AString::Add_Space(AString *__hidden this)
UNDEF:000015E4                 extrn ?Add_Space@AString@@QAEXXZ:near
UNDEF:000015E4                                         ; CODE XREF: CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+5Ap
UNDEF:000015E4                                         ; CHashCallbackConsole::PrintSeparatorLine(CObjectVector<CHasherState> const &)+A3p ...
UNDEF:000015E8 ; void __thiscall AString::Grow_1(AString *__hidden this)
UNDEF:000015E8                 extrn ?Grow_1@AString@@AAEXXZ:near
UNDEF:000015E8                                         ; CODE XREF: AString::operator+=(char)+2Fp
UNDEF:000015EC ; public: class AString & __thiscall AString::operator+=(char const *)
UNDEF:000015EC                 extrn ??YAString@@QAEAAV0@PBD@Z:near
UNDEF:000015EC                                         ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+1A1p
UNDEF:000015EC                                         ; CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+107p ...
UNDEF:000015F0 ; public: __thiscall AString::AString(char const *)
UNDEF:000015F0                 extrn ??0AString@@QAE@PBD@Z:near
UNDEF:000015F0                                         ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+132p
UNDEF:000015F4 ; public: class AString & __thiscall AString::operator+=(class AString const &)
UNDEF:000015F4                 extrn ??YAString@@QAEAAV0@ABV0@@Z:near
UNDEF:000015F4                                         ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+D9p
UNDEF:000015F4                                         ; CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+169p
UNDEF:000015F8                 extrn ___security_cookie:near
UNDEF:000015F8                                         ; DATA XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+32r
UNDEF:000015F8                                         ; CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+1Fr ...
UNDEF:000015FC                 extrn ___CxxFrameHandler3:near
UNDEF:000015FC                                         ; CODE XREF: __ehhandler$?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z+16j
UNDEF:000015FC                                         ; __ehhandler$?PrintSum@@YGXAAVCStdOutStream@@ABUCHasherState@@I@Z+23j
UNDEF:00001600 ; __fastcall __security_check_cookie(x)
UNDEF:00001600                 extrn @__security_check_cookie@4:near
UNDEF:00001600                                         ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+24Ap
UNDEF:00001600                                         ; PrintSum(CStdOutStream &,CHasherState const &,uint)+115p ...
UNDEF:00001604 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001604                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001604                                         ; CODE XREF: CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)+1EDp
UNDEF:00001604                                         ; CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+23Cp ...
UNDEF:00001608 ; void __cdecl operator delete(void *)
UNDEF:00001608                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:0000160C ; __int32 __thiscall CCallbackConsoleBase::OpenFileError_Base(CCallbackConsoleBase *__hidden this, const struct UString *, unsigned __int32)
UNDEF:0000160C                 extrn ?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z:near
UNDEF:0000160C                                         ; CODE XREF: CHashCallbackConsole::OpenFileError(UString const &,ulong)+1Cp
UNDEF:00001610 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:00001610                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:00001610                                         ; CODE XREF: CHashCallbackConsole::GetStream(wchar_t const *,bool)+1Bp
UNDEF:00001610                                         ; CHashCallbackConsole::GetStream(wchar_t const *,bool)+5Bp
UNDEF:00001614 ; void __stdcall ConvertUInt64ToString(unsigned __int64, char *)
UNDEF:00001614                 extrn ?ConvertUInt64ToString@@YGX_KPAD@Z:near
UNDEF:00001614                                         ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+164p
UNDEF:00001614                                         ; CHashCallbackConsole::PrintProperty(char const *,unsigned __int64)+39p
UNDEF:00001618 ; size_t __cdecl strlen(const char *Str)
UNDEF:00001618                 extrn _strlen:near      ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+BCp
UNDEF:00001618                                         ; CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+CEp ...
UNDEF:0000161C ; void __stdcall AddHashHexToString(char *, const unsigned __int8 *, unsigned int)
UNDEF:0000161C                 extrn ?AddHashHexToString@@YGXPADPBEI@Z:near
UNDEF:0000161C                                         ; CODE XREF: CHashCallbackConsole::PrintResultLine(unsigned __int64,CObjectVector<CHasherState> const &,uint,bool)+A2p
UNDEF:0000161C                                         ; PrintSum(CStdOutStream &,CHasherState const &,uint)+D3p
UNDEF:00001620 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(wchar_t const *)
UNDEF:00001620                 extrn ??6CStdOutStream@@QAEAAV0@PB_W@Z:near
UNDEF:00001620                                         ; CODE XREF: CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)+6Fp
UNDEF:00001620                                         ; CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)+8Ep
UNDEF:00001624 ; public: __thiscall AString::AString(void)
UNDEF:00001624                 extrn ??0AString@@QAE@XZ:near
UNDEF:00001624                                         ; CODE XREF: PrintSum(CStdOutStream &,CHasherState const &,uint)+55p
UNDEF:00001624
UNDEF:00001624