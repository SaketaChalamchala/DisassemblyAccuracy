.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 9397DC93AAB60F031C9E5EA305B9BF75
.rdata:00000000 ; Input CRC32 : 4EE2F36F
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\List.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG72505        db  30h ; 0             ; DATA XREF: .rdata:_kPropIdToNameo
.rdata:00000001                 db    0
.rdata:00000002 ; char _SG73168[2]
.rdata:00000002 $SG73168        db 2 dup(0)             ; DATA XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *):loc_1F20o
.rdata:00000004 $SG72506        dd offset unk_31        ; DATA XREF: .rdata:00000434o
.rdata:00000008 $SG72507        dd offset off_32        ; DATA XREF: .rdata:00000438o
.rdata:00000008                                         ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))+15r
.rdata:0000000C $SG72508        db 'Path',0             ; DATA XREF: .rdata:0000043Co
.rdata:00000011                 align 4
.rdata:00000014 $SG72509        db 'Name',0             ; DATA XREF: .rdata:00000440o
.rdata:00000019                 align 4
.rdata:0000001C $SG72510        db  45h ; E             ; DATA XREF: .rdata:00000444o
.rdata:0000001D                 db  78h ; x
.rdata:0000001E                 db  74h ; t
.rdata:0000001F                 db  65h ; e
.rdata:00000020                 db  6Eh ; n
.rdata:00000021                 db  73h ; s
.rdata:00000022                 db  69h ; i
.rdata:00000023 off_23          dd offset loc_6E6C+3    ; DATA XREF: .rdata:`string'o
.rdata:00000027                 align 4
.rdata:00000028 $SG72511        db 'Folder',0           ; DATA XREF: .rdata:00000448o
.rdata:0000002F                 align 10h
.rdata:00000030 $SG72512        db  53h ; S             ; DATA XREF: .rdata:0000044Co
.rdata:00000031 unk_31          db  69h ; i             ; DATA XREF: .rdata:$SG72506o
.rdata:00000032 off_32          dd offset $LN11_2+12h   ; DATA XREF: .rdata:$SG72507o
.rdata:00000036                 align 4
.rdata:00000038 $SG72513        db 'Packed Size',0      ; DATA XREF: .rdata:00000450o
.rdata:00000044 $SG72514        db 'Attributes',0       ; DATA XREF: .rdata:00000454o
.rdata:0000004F                 align 10h
.rdata:00000050 $SG72515        db 'Created',0          ; DATA XREF: .rdata:00000458o
.rdata:00000058 $SG72516        db 'Accessed',0         ; DATA XREF: .rdata:0000045Co
.rdata:00000061                 align 4
.rdata:00000064 $SG72517        db 'Modified',0         ; DATA XREF: .rdata:00000460o
.rdata:0000006D                 align 10h
.rdata:00000070 $SG72518        db 'Solid',0            ; DATA XREF: .rdata:00000464o
.rdata:00000076                 align 4
.rdata:00000078 $SG72519        db 'Commented',0        ; DATA XREF: .rdata:00000468o
.rdata:00000082                 align 4
.rdata:00000084 $SG72520        db 'Encrypted',0        ; DATA XREF: .rdata:0000046Co
.rdata:0000008E                 align 10h
.rdata:00000090 $SG72521        db 'Split Before',0     ; DATA XREF: .rdata:00000470o
.rdata:0000009D                 align 10h
.rdata:000000A0 $SG72522        db 'Split After',0      ; DATA XREF: .rdata:00000474o
.rdata:000000AC $SG72523        db 'Dictionary Size',0  ; DATA XREF: .rdata:00000478o
.rdata:000000BC $SG72524        db 'CRC',0              ; DATA XREF: .rdata:0000047Co
.rdata:000000C0 $SG72525        db 'Type',0             ; DATA XREF: .rdata:00000480o
.rdata:000000C5                 align 4
.rdata:000000C8 $SG72526        db 'Anti',0             ; DATA XREF: .rdata:00000484o
.rdata:000000CD                 align 10h
.rdata:000000D0 $SG72527        db 'Method',0           ; DATA XREF: .rdata:00000488o
.rdata:000000D7                 align 4
.rdata:000000D8 $SG72528        db 'Host OS',0          ; DATA XREF: .rdata:0000048Co
.rdata:000000E0 $SG72529        db 'File System',0      ; DATA XREF: .rdata:00000490o
.rdata:000000EC $SG72530        db 'User',0             ; DATA XREF: .rdata:00000494o
.rdata:000000F1                 align 4
.rdata:000000F4 $SG72531        db 'Group',0            ; DATA XREF: .rdata:00000498o
.rdata:000000FA                 align 4
.rdata:000000FC $SG72532        db 'Block',0            ; DATA XREF: .rdata:0000049Co
.rdata:00000102                 align 4
.rdata:00000104 $SG72533        db 'Comment',0          ; DATA XREF: .rdata:000004A0o
.rdata:0000010C $SG72534        db 'Position',0         ; DATA XREF: .rdata:000004A4o
.rdata:00000115                 align 4
.rdata:00000118 $SG72535        db 'Path Prefix',0      ; DATA XREF: .rdata:000004A8o
.rdata:00000124 $SG72536        db 'Folders',0          ; DATA XREF: .rdata:000004ACo
.rdata:0000012C $SG72537        db 'Files',0            ; DATA XREF: .rdata:000004B0o
.rdata:00000132                 align 4
.rdata:00000134 $SG72538        db 'Version',0          ; DATA XREF: .rdata:000004B4o
.rdata:0000013C $SG72539        db 'Volume',0           ; DATA XREF: .rdata:000004B8o
.rdata:00000143                 align 4
.rdata:00000144 $SG72540        db 'Multivolume',0      ; DATA XREF: .rdata:000004BCo
.rdata:00000150 $SG72541        db 'Offset',0           ; DATA XREF: .rdata:000004C0o
.rdata:00000157                 align 4
.rdata:00000158 $SG72542        db 'Links',0            ; DATA XREF: .rdata:000004C4o
.rdata:0000015E                 align 10h
.rdata:00000160 $SG72543        db 'Blocks',0           ; DATA XREF: .rdata:000004C8o
.rdata:00000167                 align 4
.rdata:00000168 $SG72544        db 'Volumes',0          ; DATA XREF: .rdata:000004CCo
.rdata:00000170 $SG72545        db 'Time Type',0        ; DATA XREF: .rdata:000004D0o
.rdata:0000017A                 align 4
.rdata:0000017C $SG72546        db '64-bit',0           ; DATA XREF: .rdata:000004D4o
.rdata:00000183                 align 4
.rdata:00000184 $SG72547        db 'Big-endian',0       ; DATA XREF: .rdata:000004D8o
.rdata:0000018F                 align 10h
.rdata:00000190 $SG72548        db 'CPU',0              ; DATA XREF: .rdata:000004DCo
.rdata:00000194 $SG72549        db 'Physical Size',0    ; DATA XREF: .rdata:000004E0o
.rdata:000001A2                 align 4
.rdata:000001A4 $SG72550        db 'Headers Size',0     ; DATA XREF: .rdata:000004E4o
.rdata:000001B1                 align 4
.rdata:000001B4 $SG72551        db 'Checksum',0         ; DATA XREF: .rdata:000004E8o
.rdata:000001BD                 align 10h
.rdata:000001C0 $SG72552        db 'Characteristics',0  ; DATA XREF: .rdata:000004ECo
.rdata:000001D0 $SG72553        db 'Virtual Address',0  ; DATA XREF: .rdata:000004F0o
.rdata:000001E0 $SG72554        dd offset loc_4448+1    ; DATA XREF: .rdata:000004F4o
.rdata:000001E4 $SG72555        db 'Short Name',0       ; DATA XREF: .rdata:000004F8o
.rdata:000001EF                 align 10h
.rdata:000001F0 $SG72556        db 'Creator Application',0 ; DATA XREF: .rdata:000004FCo
.rdata:00000204 $SG72557        db 'Sector Size',0      ; DATA XREF: .rdata:00000500o
.rdata:00000210 $SG72558        db 'Mode',0             ; DATA XREF: .rdata:00000504o
.rdata:00000215                 align 4
.rdata:00000218 $SG72559        db 'Symbolic Link',0    ; DATA XREF: .rdata:00000508o
.rdata:00000226                 align 4
.rdata:00000228 $SG72560        db 'Error',0            ; DATA XREF: .rdata:0000050Co
.rdata:0000022E                 align 10h
.rdata:00000230 $SG72561        db 'Total Size',0       ; DATA XREF: .rdata:00000510o
.rdata:0000023B                 align 4
.rdata:0000023C $SG72562        db 'Free Space',0       ; DATA XREF: .rdata:00000514o
.rdata:00000247                 align 4
.rdata:00000248 $SG72563        db 'Cluster Size',0     ; DATA XREF: .rdata:00000518o
.rdata:00000255                 align 4
.rdata:00000258 $SG72564        db 'Label',0            ; DATA XREF: .rdata:0000051Co
.rdata:0000025E                 align 10h
.rdata:00000260 $SG72565        db 'Local Name',0       ; DATA XREF: .rdata:00000520o
.rdata:0000026B                 align 4
.rdata:0000026C $SG72566        db 'Provider',0         ; DATA XREF: .rdata:00000524o
.rdata:00000275                 align 4
.rdata:00000278 $SG72567        db 'NT Security',0      ; DATA XREF: .rdata:00000528o
.rdata:00000284 $SG72568        db 'Alternate Stream',0 ; DATA XREF: .rdata:0000052Co
.rdata:00000295                 align 4
.rdata:00000298 $SG72569        db 'Aux',0              ; DATA XREF: .rdata:00000530o
.rdata:0000029C $SG72570        db 'Deleted',0          ; DATA XREF: .rdata:00000534o
.rdata:000002A4 $SG72571        db 'Tree',0             ; DATA XREF: .rdata:00000538o
.rdata:000002A9                 align 4
.rdata:000002AC $SG72572        db 'SHA-1',0            ; DATA XREF: .rdata:0000053Co
.rdata:000002B2                 align 4
.rdata:000002B4 $SG72573        db 'SHA-256',0          ; DATA XREF: .rdata:00000540o
.rdata:000002BC $SG72574        db 'Error Type',0       ; DATA XREF: .rdata:00000544o
.rdata:000002C7                 align 4
.rdata:000002C8 $SG72575        db 'Errors',0           ; DATA XREF: .rdata:00000548o
.rdata:000002CF                 align 10h
.rdata:000002D0 $SG72576        db 'Errors',0           ; DATA XREF: .rdata:0000054Co
.rdata:000002D7                 align 4
.rdata:000002D8 $SG72577        db 'Warnings',0         ; DATA XREF: .rdata:00000550o
.rdata:000002E1                 align 4
.rdata:000002E4 $SG72578        db 'Warning',0          ; DATA XREF: .rdata:00000554o
.rdata:000002EC $SG72579        db 'Streams',0          ; DATA XREF: .rdata:00000558o
.rdata:000002F4 $SG72580        db 'Alternate Streams',0 ; DATA XREF: .rdata:0000055Co
.rdata:00000306                 align 4
.rdata:00000308 $SG72581        db 'Alternate Streams Size',0 ; DATA XREF: .rdata:00000560o
.rdata:0000031F                 align 10h
.rdata:00000320 $SG72582        db 'Virtual Size',0     ; DATA XREF: .rdata:00000564o
.rdata:0000032D                 align 10h
.rdata:00000330 $SG72583        db 'Unpack Size',0      ; DATA XREF: .rdata:00000568o
.rdata:0000033C $SG72584        db 'Total Physical Size',0 ; DATA XREF: .rdata:0000056Co
.rdata:00000350 $SG72585        db 'Volume Index',0     ; DATA XREF: .rdata:00000570o
.rdata:0000035D                 align 10h
.rdata:00000360 $SG72586        db 'SubType',0          ; DATA XREF: .rdata:00000574o
.rdata:00000368 $SG72587        db 'Short Comment',0    ; DATA XREF: .rdata:00000578o
.rdata:00000376                 align 4
.rdata:00000378 $SG72588        db 'Code Page',0        ; DATA XREF: .rdata:0000057Co
.rdata:00000382                 align 4
.rdata:00000384 $SG72589        db 'Is not archive type',0 ; DATA XREF: .rdata:00000580o
.rdata:00000398 $SG72590        db 'Physical Size can',27h,'t be detected',0
.rdata:00000398                                         ; DATA XREF: .rdata:00000584o
.rdata:000003B8 $SG72591        db 'Zeros Tail Is Allowed',0 ; DATA XREF: .rdata:00000588o
.rdata:000003CE                 align 10h
.rdata:000003D0 $SG72592        db 'Tail Size',0        ; DATA XREF: .rdata:0000058Co
.rdata:000003DA                 align 4
.rdata:000003DC $SG72593        db 'Embedded Stub Size',0 ; DATA XREF: .rdata:00000590o
.rdata:000003EF                 align 10h
.rdata:000003F0 $SG72594        db 'Link',0             ; DATA XREF: .rdata:00000594o
.rdata:000003F5                 align 4
.rdata:000003F8 $SG72595        db 'Hard Link',0        ; DATA XREF: .rdata:00000598o
.rdata:00000402                 align 4
.rdata:00000404 $SG72596        db 'iNode',0            ; DATA XREF: .rdata:0000059Co
.rdata:0000040A                 align 4
.rdata:0000040C $SG72597        db 'Stream ID',0        ; DATA XREF: .rdata:000005A0o
.rdata:00000416                 align 4
.rdata:00000418 $SG72598        db 'Read-only',0        ; DATA XREF: .rdata:000005A4o
.rdata:00000422                 align 4
.rdata:00000424 $SG72599        db 'Out Name',0         ; DATA XREF: .rdata:000005A8o
.rdata:0000042D                 align 10h
.rdata:00000430 _kPropIdToName  dd offset $SG72505      ; DATA XREF: GetPropName(ulong,wchar_t const *,AString &,UString &)+33r
.rdata:00000430                                         ; PrintPropName_and_Eq(CStdOutStream &,ulong)+36r
.rdata:00000434                 dd offset $SG72506
.rdata:00000438                 dd offset $SG72507
.rdata:0000043C                 dd offset $SG72508      ; "Path"
.rdata:00000440                 dd offset $SG72509      ; "Name"
.rdata:00000444                 dd offset $SG72510
.rdata:00000448                 dd offset $SG72511      ; "Folder"
.rdata:0000044C                 dd offset $SG72512
.rdata:00000450                 dd offset $SG72513      ; "Packed Size"
.rdata:00000454                 dd offset $SG72514      ; "Attributes"
.rdata:00000458                 dd offset $SG72515      ; "Created"
.rdata:0000045C                 dd offset $SG72516      ; "Accessed"
.rdata:00000460                 dd offset $SG72517      ; "Modified"
.rdata:00000464                 dd offset $SG72518      ; "Solid"
.rdata:00000468                 dd offset $SG72519      ; "Commented"
.rdata:0000046C                 dd offset $SG72520      ; "Encrypted"
.rdata:00000470                 dd offset $SG72521      ; "Split Before"
.rdata:00000474                 dd offset $SG72522      ; "Split After"
.rdata:00000478                 dd offset $SG72523      ; "Dictionary Size"
.rdata:0000047C                 dd offset $SG72524      ; "CRC"
.rdata:00000480                 dd offset $SG72525      ; "Type"
.rdata:00000484                 dd offset $SG72526      ; "Anti"
.rdata:00000488                 dd offset $SG72527      ; "Method"
.rdata:0000048C                 dd offset $SG72528      ; "Host OS"
.rdata:00000490                 dd offset $SG72529      ; "File System"
.rdata:00000494                 dd offset $SG72530      ; "User"
.rdata:00000498                 dd offset $SG72531      ; "Group"
.rdata:0000049C                 dd offset $SG72532      ; "Block"
.rdata:000004A0                 dd offset $SG72533      ; "Comment"
.rdata:000004A4                 dd offset $SG72534      ; "Position"
.rdata:000004A8                 dd offset $SG72535      ; "Path Prefix"
.rdata:000004AC                 dd offset $SG72536      ; "Folders"
.rdata:000004B0                 dd offset $SG72537      ; "Files"
.rdata:000004B4                 dd offset $SG72538      ; "Version"
.rdata:000004B8                 dd offset $SG72539      ; "Volume"
.rdata:000004BC                 dd offset $SG72540      ; "Multivolume"
.rdata:000004C0                 dd offset $SG72541      ; "Offset"
.rdata:000004C4                 dd offset $SG72542      ; "Links"
.rdata:000004C8                 dd offset $SG72543      ; "Blocks"
.rdata:000004CC                 dd offset $SG72544      ; "Volumes"
.rdata:000004D0                 dd offset $SG72545      ; "Time Type"
.rdata:000004D4                 dd offset $SG72546      ; "64-bit"
.rdata:000004D8                 dd offset $SG72547      ; "Big-endian"
.rdata:000004DC                 dd offset $SG72548      ; "CPU"
.rdata:000004E0                 dd offset $SG72549      ; "Physical Size"
.rdata:000004E4                 dd offset $SG72550      ; "Headers Size"
.rdata:000004E8                 dd offset $SG72551      ; "Checksum"
.rdata:000004EC                 dd offset $SG72552      ; "Characteristics"
.rdata:000004F0                 dd offset $SG72553      ; "Virtual Address"
.rdata:000004F4                 dd offset $SG72554
.rdata:000004F8                 dd offset $SG72555      ; "Short Name"
.rdata:000004FC                 dd offset $SG72556      ; "Creator Application"
.rdata:00000500                 dd offset $SG72557      ; "Sector Size"
.rdata:00000504                 dd offset $SG72558      ; "Mode"
.rdata:00000508                 dd offset $SG72559      ; "Symbolic Link"
.rdata:0000050C                 dd offset $SG72560      ; "Error"
.rdata:00000510                 dd offset $SG72561      ; "Total Size"
.rdata:00000514                 dd offset $SG72562      ; "Free Space"
.rdata:00000518                 dd offset $SG72563      ; "Cluster Size"
.rdata:0000051C                 dd offset $SG72564      ; "Label"
.rdata:00000520                 dd offset $SG72565      ; "Local Name"
.rdata:00000524                 dd offset $SG72566      ; "Provider"
.rdata:00000528                 dd offset $SG72567      ; "NT Security"
.rdata:0000052C                 dd offset $SG72568      ; "Alternate Stream"
.rdata:00000530                 dd offset $SG72569      ; "Aux"
.rdata:00000534                 dd offset $SG72570      ; "Deleted"
.rdata:00000538                 dd offset $SG72571      ; "Tree"
.rdata:0000053C                 dd offset $SG72572      ; "SHA-1"
.rdata:00000540                 dd offset $SG72573      ; "SHA-256"
.rdata:00000544                 dd offset $SG72574      ; "Error Type"
.rdata:00000548                 dd offset $SG72575      ; "Errors"
.rdata:0000054C                 dd offset $SG72576      ; "Errors"
.rdata:00000550                 dd offset $SG72577      ; "Warnings"
.rdata:00000554                 dd offset $SG72578      ; "Warning"
.rdata:00000558                 dd offset $SG72579      ; "Streams"
.rdata:0000055C                 dd offset $SG72580      ; "Alternate Streams"
.rdata:00000560                 dd offset $SG72581      ; "Alternate Streams Size"
.rdata:00000564                 dd offset $SG72582      ; "Virtual Size"
.rdata:00000568                 dd offset $SG72583      ; "Unpack Size"
.rdata:0000056C                 dd offset $SG72584      ; "Total Physical Size"
.rdata:00000570                 dd offset $SG72585      ; "Volume Index"
.rdata:00000574                 dd offset $SG72586      ; "SubType"
.rdata:00000578                 dd offset $SG72587      ; "Short Comment"
.rdata:0000057C                 dd offset $SG72588      ; "Code Page"
.rdata:00000580                 dd offset $SG72589      ; "Is not archive type"
.rdata:00000584                 dd offset $SG72590      ; "Physical Size can't be detected"
.rdata:00000588                 dd offset $SG72591      ; "Zeros Tail Is Allowed"
.rdata:0000058C                 dd offset $SG72592      ; "Tail Size"
.rdata:00000590                 dd offset $SG72593      ; "Embedded Stub Size"
.rdata:00000594                 dd offset $SG72594      ; "Link"
.rdata:00000598                 dd offset $SG72595      ; "Hard Link"
.rdata:0000059C                 dd offset $SG72596      ; "iNode"
.rdata:000005A0                 dd offset $SG72597      ; "Stream ID"
.rdata:000005A4                 dd offset $SG72598      ; "Read-only"
.rdata:000005A8                 dd offset $SG72599      ; "Out Name"
.rdata:000005AC $SG72602        db 'Listing archive: ',0 ; DATA XREF: .data:_kListingo
.rdata:000005BE                 align 10h
.rdata:000005C0 $SG72604        db 'files',0            ; DATA XREF: .data:_kString_Fileso
.rdata:000005C6                 align 4
.rdata:000005C8 $SG72606        db 'folders',0          ; DATA XREF: .data:_kString_Dirso
.rdata:000005D0 $SG72608        db 'alternate streams',0
.rdata:000005D0                                         ; DATA XREF: .data:_kString_AltStreamso
.rdata:000005E2                 align 4
.rdata:000005E4 $SG72610        db 'streams',0          ; DATA XREF: .data:_kString_Streamso
.rdata:000005EC $SG72612        db 'ERROR: ',0          ; DATA XREF: .data:_kErroro
.rdata:000005F4 $SG72658        db '   Date      Time',0 ; DATA XREF: .rdata:00000654o
.rdata:00000606                 align 4
.rdata:00000608 $SG72659        db 'Attr',0             ; DATA XREF: .rdata:0000066Co
.rdata:0000060D                 align 10h
.rdata:00000610 $SG72660        db 'Size',0             ; DATA XREF: .rdata:00000684o
.rdata:00000615                 align 4
.rdata:00000618 $SG72661        db 'Compressed',0       ; DATA XREF: .rdata:0000069Co
.rdata:00000623                 align 4
.rdata:00000624 $SG72662        db 'Name',0             ; DATA XREF: .rdata:000006B4o
.rdata:00000629                 align 4
.rdata:0000062C $SG72665        db '                                ',0
.rdata:0000062C                                         ; DATA XREF: .data:_g_Spaceso
.rdata:0000064D                 align 10h
.rdata:00000650 ; struct CFieldInfoInit kStandardFieldTable
.rdata:00000650 _kStandardFieldTable db  0Ch            ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+80o
.rdata:00000651                 db    0
.rdata:00000652                 db    0
.rdata:00000653                 db    0
.rdata:00000654                 dd offset $SG72658      ; "   Date      Time"
.rdata:00000658                 db    0
.rdata:00000659                 db    0
.rdata:0000065A                 db    0
.rdata:0000065B                 db    0
.rdata:0000065C                 db    0
.rdata:0000065D                 db    0
.rdata:0000065E                 db    0
.rdata:0000065F                 db    0
.rdata:00000660                 db    0
.rdata:00000661                 db    0
.rdata:00000662                 db    0
.rdata:00000663                 db    0
.rdata:00000664                 db  13h
.rdata:00000665                 db    0
.rdata:00000666                 db    0
.rdata:00000667                 db    0
.rdata:00000668                 db    9
.rdata:00000669                 db    0
.rdata:0000066A                 db    0
.rdata:0000066B                 db    0
.rdata:0000066C                 dd offset $SG72659      ; "Attr"
.rdata:00000670                 db    2
.rdata:00000671                 db    0
.rdata:00000672                 db    0
.rdata:00000673                 db    0
.rdata:00000674                 db    1
.rdata:00000675                 db    0
.rdata:00000676                 db    0
.rdata:00000677                 db    0
.rdata:00000678                 db    1
.rdata:00000679                 db    0
.rdata:0000067A                 db    0
.rdata:0000067B                 db    0
.rdata:0000067C                 db    5
.rdata:0000067D                 db    0
.rdata:0000067E                 db    0
.rdata:0000067F                 db    0
.rdata:00000680                 db    7
.rdata:00000681                 db    0
.rdata:00000682                 db    0
.rdata:00000683                 db    0
.rdata:00000684                 dd offset $SG72660      ; "Size"
.rdata:00000688                 db    2
.rdata:00000689                 db    0
.rdata:0000068A                 db    0
.rdata:0000068B                 db    0
.rdata:0000068C                 db    2
.rdata:0000068D                 db    0
.rdata:0000068E                 db    0
.rdata:0000068F                 db    0
.rdata:00000690                 db    1
.rdata:00000691                 db    0
.rdata:00000692                 db    0
.rdata:00000693                 db    0
.rdata:00000694                 db  0Ch
.rdata:00000695                 db    0
.rdata:00000696                 db    0
.rdata:00000697                 db    0
.rdata:00000698                 db    8
.rdata:00000699                 db    0
.rdata:0000069A                 db    0
.rdata:0000069B                 db    0
.rdata:0000069C                 dd offset $SG72661      ; "Compressed"
.rdata:000006A0                 db    2
.rdata:000006A1                 db    0
.rdata:000006A2                 db    0
.rdata:000006A3                 db    0
.rdata:000006A4                 db    2
.rdata:000006A5                 db    0
.rdata:000006A6                 db    0
.rdata:000006A7                 db    0
.rdata:000006A8                 db    1
.rdata:000006A9                 db    0
.rdata:000006AA                 db    0
.rdata:000006AB                 db    0
.rdata:000006AC                 db  0Ch
.rdata:000006AD                 db    0
.rdata:000006AE                 db    0
.rdata:000006AF                 db    0
.rdata:000006B0                 db    3
.rdata:000006B1                 db    0
.rdata:000006B2                 db    0
.rdata:000006B3                 db    0
.rdata:000006B4                 dd offset $SG72662      ; "Name"
.rdata:000006B8                 align 10h
.rdata:000006C0                 db    2
.rdata:000006C1                 db    0
.rdata:000006C2                 db    0
.rdata:000006C3                 db    0
.rdata:000006C4                 db  18h
.rdata:000006C5                 db    0
.rdata:000006C6                 db    0
.rdata:000006C7                 db    0
.rdata:000006C8 ; char _SG72957[4]
.rdata:000006C8 $SG72957        db ' = ',0              ; DATA XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+6Ao
.rdata:000006CC $SG72959        db  20h                 ; DATA XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+86o
.rdata:000006CD                 db  3Dh ; =
.rdata:000006CE                 db  20h
.rdata:000006CF                 db    0
.rdata:000006D0 ; char _SG73088[]
.rdata:000006D0 $SG73088        db 'data:',0            ; DATA XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+326o
.rdata:000006D6                 align 4
.rdata:000006D8 $SG73166        dd offset loc_2028+4    ; DATA XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+140o
.rdata:000006DC ; char _SG73208[]
.rdata:000006DC $SG73208        dd offset off_2038+2    ; DATA XREF: PrintPropNameAndNumber(CStdOutStream &,char const *,unsigned __int64)+10o
.rdata:000006E0 ; char _SG73217[4]
.rdata:000006E0 $SG73217        db ' = ',0              ; DATA XREF: PrintPropName_and_Eq(CStdOutStream &,ulong):loc_2749o
.rdata:000006E4 ; char _SG73234[4]
.rdata:000006E4 $SG73234        db ' = ',0              ; DATA XREF: PrintPropPair(CStdOutStream &,char const *,wchar_t const *)+Co
.rdata:000006E8 $SG73247        db  20h                 ; DATA XREF: PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)+D1o
.rdata:000006E9                 db  3Dh ; =
.rdata:000006EA                 db  20h
.rdata:000006EB                 db    0
.rdata:000006EC ; char _SG73265[]
.rdata:000006EC $SG73265        db 'Open ',0            ; DATA XREF: PrintArcTypeError(CStdOutStream &,UString const &,bool)+3Fo
.rdata:000006F2                 align 4
.rdata:000006F4 $SG73266        db 'WARNING',0          ; DATA XREF: PrintArcTypeError(CStdOutStream &,UString const &,bool)+13o
.rdata:000006FC $SG73267        db 'ERROR',0            ; DATA XREF: PrintArcTypeError(CStdOutStream &,UString const &,bool):loc_2AF0o
.rdata:00000702                 align 4
.rdata:00000704 ; char _SG73268[]
.rdata:00000704 $SG73268        db ': Can not open the file as [',0
.rdata:00000704                                         ; DATA XREF: PrintArcTypeError(CStdOutStream &,UString const &,bool)+36o
.rdata:00000721                 align 4
.rdata:00000724 $SG73269        db '] archive',0        ; DATA XREF: PrintArcTypeError(CStdOutStream &,UString const &,bool)+28o
.rdata:0000072E                 align 10h
.rdata:00000730 ; char _SG73281[]
.rdata:00000730 $SG73281        db 'ERRORS:',0          ; DATA XREF: ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)+Co
.rdata:00000738 ; char _SG73283[]
.rdata:00000738 $SG73283        db 'ERROR',0            ; DATA XREF: ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)+38o
.rdata:0000073E                 align 10h
.rdata:00000740 ; char _SG73284[]
.rdata:00000740 $SG73284        db 'WARNINGS:',0        ; DATA XREF: ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)+4Fo
.rdata:0000074A                 align 4
.rdata:0000074C ; char _SG73286[]
.rdata:0000074C $SG73286        db 'WARNING',0          ; DATA XREF: ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)+7Bo
.rdata:00000754 ; char _SG73298[]
.rdata:00000754 $SG73298        db '--',0Ah,0           ; DATA XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+77o
.rdata:00000758 ; char _SG73299[]
.rdata:00000758 $SG73299        db 'Path',0             ; DATA XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+90o
.rdata:0000075D                 align 10h
.rdata:00000760 ; char _SG73302[]
.rdata:00000760 $SG73302        db 'Warning: The archive is open with offset',0
.rdata:00000760                                         ; DATA XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+BDo
.rdata:00000789                 align 4
.rdata:0000078C ; char _SG73305[]
.rdata:0000078C $SG73305        db 'Type',0             ; DATA XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+12Co
.rdata:00000791                 align 4
.rdata:00000794 ; char _SG73330[]
.rdata:00000794 $SG73330        db '----',0Ah,0         ; DATA XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+2EFo
.rdata:0000079A                 align 4
.rdata:0000079C ; char _SG73355[]
.rdata:0000079C $SG73355        db 'Can not open encrypted archive. Wrong password?',0
.rdata:0000079C                                         ; DATA XREF: Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &)+Eo
.rdata:000007CC ; char _SG73359[]
.rdata:000007CC $SG73359        db 'Can not open the file as archive',0
.rdata:000007CC                                         ; DATA XREF: Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &):loc_2C5Do
.rdata:000007ED                 align 10h
.rdata:000007F0 ; char _SG73429[]
.rdata:000007F0 $SG73429        db ' is not a file',0   ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+320o
.rdata:000007FF                 align 10h
.rdata:00000800 ; NConsoleClose _SG73599
.rdata:00000800 $SG73599        db ' : ',0              ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+57Co
.rdata:00000804 ; char _SG73603[]
.rdata:00000804 $SG73603        db 'opening : ',0       ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+5EAo
.rdata:0000080F                 align 10h
.rdata:00000810 ; char _SG73606[]
.rdata:00000810 $SG73606        db 'Can',27h,'t allocate required memory',0
.rdata:00000810                                         ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+606o
.rdata:0000082F                 align 10h
.rdata:00000830 ; char _SG73634[]
.rdata:00000830 $SG73634        db '----------',0Ah,0   ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+9B0o
.rdata:0000083C ; char _SG73713[]
.rdata:0000083C $SG73713        db '----------',0Ah,0   ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1593o
.rdata:00000848 ; char _SG73714[]
.rdata:00000848 $SG73714        db 'Path',0             ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+15AEo
.rdata:0000084D                 align 10h
.rdata:00000850 ; char _SG73717[]
.rdata:00000850 $SG73717        db 'Archives',0         ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+16D8o
.rdata:00000859                 align 4
.rdata:0000085C ; char _SG73718[]
.rdata:0000085C $SG73718        db 'Volumes',0          ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+16F5o
.rdata:00000864 ; char _SG73719[]
.rdata:00000864 $SG73719        db 'Total archives size',0
.rdata:00000864                                         ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1712o
.rdata:00000864 _rdata          ends
.rdata:00000864
.data:00000878 ; ===========================================================================
.data:00000878
.data:00000878 ; Segment type: Pure data
.data:00000878 ; Segment permissions: Read/Write
.data:00000878 _data           segment dword public 'DATA' use32
.data:00000878                 assume cs:_data
.data:00000878                 ;org 878h
.data:00000878 ; char *kListing
.data:00000878 _kListing       dd offset $SG72602      ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+4A7r
.data:00000878                                         ; "Listing archive: "
.data:0000087C ; char *kString_Files
.data:0000087C _kString_Files  dd offset $SG72604      ; DATA XREF: CFieldPrinter::PrintSum(CListStat2 const &)+1Cr
.data:0000087C                                         ; "files"
.data:00000880 ; char *kString_Dirs
.data:00000880 _kString_Dirs   dd offset $SG72606      ; DATA XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+14Dr
.data:00000880                                         ; "folders"
.data:00000884 ; char *kString_AltStreams
.data:00000884 _kString_AltStreams dd offset $SG72608  ; DATA XREF: CFieldPrinter::PrintSum(CListStat2 const &)+4Dr
.data:00000884                                         ; "alternate streams"
.data:00000888 ; char *kString_Streams
.data:00000888 _kString_Streams dd offset $SG72610     ; DATA XREF: CFieldPrinter::PrintSum(CListStat2 const &)+82r
.data:00000888                                         ; "streams"
.data:0000088C ; char *kError
.data:0000088C _kError         dd offset $SG72612      ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+27Cr
.data:0000088C                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+331r ...
.data:0000088C                                         ; "ERROR: "
.data:00000890 _g_Spaces       dd offset $SG72665      ; DATA XREF: PrintSpaces(uint)+17r
.data:00000890 _data           ends                    ; "                                "
.data:00000890
.text:00000894 ; ===========================================================================
.text:00000894
.text:00000894 ; Segment type: Pure code
.text:00000894 ; Segment permissions: Read/Execute
.text:00000894 _text           segment para public 'CODE' use32
.text:00000894                 assume cs:_text
.text:00000894                 ;org 894h
.text:00000894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000894
.text:00000894 ; =============== S U B R O U T I N E =======================================
.text:00000894
.text:00000894 ; Attributes: bp-based frame
.text:00000894
.text:00000894 ; void __thiscall CFieldPrinter::Init(CFieldPrinter *this, const struct CFieldInfoInit *, unsigned int)
.text:00000894                 public ?Init@CFieldPrinter@@QAEXPBUCFieldInfoInit@@I@Z
.text:00000894 ?Init@CFieldPrinter@@QAEXPBUCFieldInfoInit@@I@Z proc near
.text:00000894                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+88p
.text:00000894
.text:00000894 var_14          = dword ptr -14h
.text:00000894 var_10          = dword ptr -10h
.text:00000894 var_C           = dword ptr -0Ch
.text:00000894 var_8           = dword ptr -8
.text:00000894 var_4           = dword ptr -4
.text:00000894 arg_0           = dword ptr  8
.text:00000894 arg_4           = dword ptr  0Ch
.text:00000894
.text:00000894                 push    ebp
.text:00000895                 mov     ebp, esp
.text:00000897                 sub     esp, 14h
.text:0000089A                 mov     eax, 0CCCCCCCCh
.text:0000089F                 mov     [ebp+var_14], eax
.text:000008A2                 mov     [ebp+var_10], eax
.text:000008A5                 mov     [ebp+var_C], eax
.text:000008A8                 mov     [ebp+var_8], eax
.text:000008AB                 mov     [ebp+var_4], eax
.text:000008AE                 mov     [ebp+var_4], ecx
.text:000008B1                 mov     ecx, [ebp+var_4] ; this
.text:000008B4                 call    ?Clear@CFieldPrinter@@QAEXXZ ; CFieldPrinter::Clear(void)
.text:000008B9                 mov     [ebp+var_8], 0
.text:000008C0                 jmp     short loc_8CB
.text:000008C2 ; ---------------------------------------------------------------------------
.text:000008C2
.text:000008C2 loc_8C2:                                ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint):loc_997j
.text:000008C2                 mov     eax, [ebp+var_8]
.text:000008C5                 add     eax, 1
.text:000008C8                 mov     [ebp+var_8], eax
.text:000008CB
.text:000008CB loc_8CB:                                ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+2Cj
.text:000008CB                 mov     ecx, [ebp+var_8]
.text:000008CE                 cmp     ecx, [ebp+arg_4]
.text:000008D1                 jnb     loc_99C
.text:000008D7                 mov     ecx, [ebp+var_4]
.text:000008DA                 call    ?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ ; CObjectVector<CFieldInfo>::AddNew(void)
.text:000008DF                 mov     [ebp+var_C], eax
.text:000008E2                 mov     edx, [ebp+var_8]
.text:000008E5                 imul    edx, 18h
.text:000008E8                 add     edx, [ebp+arg_0]
.text:000008EB                 mov     [ebp+var_10], edx
.text:000008EE                 mov     eax, [ebp+var_C]
.text:000008F1                 mov     ecx, [ebp+var_10]
.text:000008F4                 mov     edx, [ecx]
.text:000008F6                 mov     [eax], edx
.text:000008F8                 mov     eax, [ebp+var_C]
.text:000008FB                 mov     byte ptr [eax+4], 0
.text:000008FF                 mov     ecx, [ebp+var_10]
.text:00000902                 mov     edx, [ecx+4]
.text:00000905                 push    edx
.text:00000906                 mov     ecx, [ebp+var_C]
.text:00000909                 add     ecx, 14h
.text:0000090C                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00000911                 mov     eax, [ebp+var_C]
.text:00000914                 mov     ecx, [ebp+var_10]
.text:00000917                 mov     edx, [ecx+8]
.text:0000091A                 mov     [eax+20h], edx
.text:0000091D                 mov     eax, [ebp+var_C]
.text:00000920                 mov     ecx, [ebp+var_10]
.text:00000923                 mov     edx, [ecx+0Ch]
.text:00000926                 mov     [eax+24h], edx
.text:00000929                 mov     eax, [ebp+var_C]
.text:0000092C                 mov     ecx, [ebp+var_10]
.text:0000092F                 mov     edx, [ecx+10h]
.text:00000932                 mov     [eax+28h], edx
.text:00000935                 mov     eax, [ebp+var_C]
.text:00000938                 mov     ecx, [ebp+var_10]
.text:0000093B                 mov     edx, [ecx+14h]
.text:0000093E                 mov     [eax+2Ch], edx
.text:00000941                 mov     [ebp+var_14], 0
.text:00000948                 jmp     short loc_953
.text:0000094A ; ---------------------------------------------------------------------------
.text:0000094A
.text:0000094A loc_94A:                                ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+D5j
.text:0000094A                 mov     eax, [ebp+var_14]
.text:0000094D                 add     eax, 1
.text:00000950                 mov     [ebp+var_14], eax
.text:00000953
.text:00000953 loc_953:                                ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+B4j
.text:00000953                 mov     ecx, [ebp+var_10]
.text:00000956                 mov     edx, [ebp+var_14]
.text:00000959                 cmp     edx, [ecx+10h]
.text:0000095C                 jnb     short loc_96B
.text:0000095E                 mov     ecx, [ebp+var_4]
.text:00000961                 add     ecx, 3Ch ; '<'  ; this
.text:00000964                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:00000969                 jmp     short loc_94A
.text:0000096B ; ---------------------------------------------------------------------------
.text:0000096B
.text:0000096B loc_96B:                                ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+C8j
.text:0000096B                 mov     [ebp+var_14], 0
.text:00000972                 jmp     short loc_97D
.text:00000974 ; ---------------------------------------------------------------------------
.text:00000974
.text:00000974 loc_974:                                ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+101j
.text:00000974                 mov     eax, [ebp+var_14]
.text:00000977                 add     eax, 1
.text:0000097A                 mov     [ebp+var_14], eax
.text:0000097D
.text:0000097D loc_97D:                                ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+DEj
.text:0000097D                 mov     ecx, [ebp+var_10]
.text:00000980                 mov     edx, [ebp+var_14]
.text:00000983                 cmp     edx, [ecx+14h]
.text:00000986                 jnb     short loc_997
.text:00000988                 push    2Dh ; '-'
.text:0000098A                 mov     ecx, [ebp+var_4]
.text:0000098D                 add     ecx, 3Ch ; '<'
.text:00000990                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00000995                 jmp     short loc_974
.text:00000997 ; ---------------------------------------------------------------------------
.text:00000997
.text:00000997 loc_997:                                ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+F2j
.text:00000997                 jmp     loc_8C2
.text:0000099C ; ---------------------------------------------------------------------------
.text:0000099C
.text:0000099C loc_99C:                                ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+3Dj
.text:0000099C                 add     esp, 14h
.text:0000099F                 cmp     ebp, esp
.text:000009A1                 call    __RTC_CheckEsp
.text:000009A6                 mov     esp, ebp
.text:000009A8                 pop     ebp
.text:000009A9                 retn    8
.text:000009A9 ?Init@CFieldPrinter@@QAEXPBUCFieldInfoInit@@I@Z endp
.text:000009A9
.text:000009A9 ; ---------------------------------------------------------------------------
.text:000009AC                 db 8 dup(0CCh)
.text:000009B4
.text:000009B4 ; =============== S U B R O U T I N E =======================================
.text:000009B4
.text:000009B4 ; Attributes: bp-based frame
.text:000009B4
.text:000009B4 ; void __thiscall CFieldPrinter::AddProp(CFieldPrinter *this, const wchar_t *, unsigned __int32, bool)
.text:000009B4                 public ?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z
.text:000009B4 ?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z proc near
.text:000009B4                                         ; CODE XREF: CFieldPrinter::AddMainProps(IInArchive *)+F5p
.text:000009B4                                         ; CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+F1p
.text:000009B4
.text:000009B4 var_68          = word ptr -68h
.text:000009B4 var_64          = dword ptr -64h
.text:000009B4 var_5C          = byte ptr -5Ch
.text:000009B4 var_4C          = dword ptr -4Ch
.text:000009B4 var_44          = dword ptr -44h
.text:000009B4 var_40          = byte ptr -40h
.text:000009B4 var_3C          = byte ptr -3Ch
.text:000009B4 var_30          = byte ptr -30h
.text:000009B4 var_10          = dword ptr -10h
.text:000009B4 var_C           = dword ptr -0Ch
.text:000009B4 var_4           = dword ptr -4
.text:000009B4 arg_0           = dword ptr  8
.text:000009B4 arg_4           = dword ptr  0Ch
.text:000009B4 arg_8           = byte ptr  10h
.text:000009B4
.text:000009B4                 push    ebp
.text:000009B5                 mov     ebp, esp
.text:000009B7                 push    0FFFFFFFFh
.text:000009B9                 push    offset __ehhandler$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z
.text:000009BE                 mov     eax, large fs:0
.text:000009C4                 push    eax
.text:000009C5                 sub     esp, 5Ch
.text:000009C8                 push    edi
.text:000009C9                 push    ecx
.text:000009CA                 lea     edi, [ebp+var_68]
.text:000009CD                 mov     ecx, 17h
.text:000009D2                 mov     eax, 0CCCCCCCCh
.text:000009D7                 rep stosd
.text:000009D9                 pop     ecx
.text:000009DA                 mov     eax, dword ptr ds:___security_cookie
.text:000009DF                 xor     eax, ebp
.text:000009E1                 push    eax
.text:000009E2                 lea     eax, [ebp+var_C]
.text:000009E5                 mov     large fs:0, eax
.text:000009EB                 mov     [ebp+var_10], ecx
.text:000009EE                 lea     ecx, [ebp+var_44] ; this
.text:000009F1                 call    ??0CFieldInfo@@QAE@XZ ; CFieldInfo::CFieldInfo(void)
.text:000009F6                 mov     [ebp+var_4], 0
.text:000009FD                 mov     eax, [ebp+arg_4]
.text:00000A00                 mov     [ebp+var_44], eax
.text:00000A03                 mov     cl, [ebp+arg_8]
.text:00000A06                 mov     [ebp+var_40], cl
.text:00000A09                 lea     edx, [ebp+var_3C]
.text:00000A0C                 push    edx
.text:00000A0D                 lea     eax, [ebp+var_30]
.text:00000A10                 push    eax
.text:00000A11                 mov     ecx, [ebp+arg_0]
.text:00000A14                 push    ecx
.text:00000A15                 mov     edx, [ebp+arg_4]
.text:00000A18                 push    edx
.text:00000A19                 call    ?GetPropName@@YGXKPB_WAAVAString@@AAVUString@@@Z ; GetPropName(ulong,wchar_t const *,AString &,UString &)
.text:00000A1E                 push    offset $SG72957 ; " = "
.text:00000A23                 lea     ecx, [ebp+var_3C] ; this
.text:00000A26                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:00000A2B                 lea     ecx, [ebp+var_30] ; this
.text:00000A2E                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00000A33                 movzx   eax, al
.text:00000A36                 test    eax, eax
.text:00000A38                 jnz     short loc_A4C
.text:00000A3A                 push    offset $SG72959
.text:00000A3F                 lea     ecx, [ebp+var_30]
.text:00000A42                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000A47                 jmp     loc_AD1
.text:00000A4C ; ---------------------------------------------------------------------------
.text:00000A4C
.text:00000A4C loc_A4C:                                ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+84j
.text:00000A4C                 lea     ecx, [ebp+var_3C]
.text:00000A4F                 mov     [ebp+var_4C], ecx
.text:00000A52                 lea     ecx, [ebp+var_5C]
.text:00000A55                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000A5A                 mov     byte ptr [ebp+var_4], 1
.text:00000A5E                 mov     [ebp+var_64], 0
.text:00000A65                 jmp     short loc_A70
.text:00000A67 ; ---------------------------------------------------------------------------
.text:00000A67
.text:00000A67 loc_A67:                                ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+F6j
.text:00000A67                 mov     edx, [ebp+var_64]
.text:00000A6A                 add     edx, 1
.text:00000A6D                 mov     [ebp+var_64], edx
.text:00000A70
.text:00000A70 loc_A70:                                ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+B1j
.text:00000A70                 mov     ecx, [ebp+var_4C] ; this
.text:00000A73                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000A78                 cmp     [ebp+var_64], eax
.text:00000A7B                 jnb     short loc_AAC
.text:00000A7D                 mov     ecx, [ebp+var_4C]
.text:00000A80                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000A85                 mov     ecx, [ebp+var_64]
.text:00000A88                 mov     dx, [eax+ecx*2]
.text:00000A8C                 mov     [ebp+var_68], dx
.text:00000A90                 movzx   eax, [ebp+var_68]
.text:00000A94                 cmp     eax, 80h ; 'Ç'
.text:00000A99                 jl      short loc_A9D
.text:00000A9B                 jmp     short loc_AAC
.text:00000A9D ; ---------------------------------------------------------------------------
.text:00000A9D
.text:00000A9D loc_A9D:                                ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+E5j
.text:00000A9D                 movzx   ecx, byte ptr [ebp+var_68]
.text:00000AA1                 push    ecx
.text:00000AA2                 lea     ecx, [ebp+var_5C]
.text:00000AA5                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00000AAA                 jmp     short loc_A67
.text:00000AAC ; ---------------------------------------------------------------------------
.text:00000AAC
.text:00000AAC loc_AAC:                                ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+C7j
.text:00000AAC                                         ; CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+E7j
.text:00000AAC                 mov     ecx, [ebp+var_4C] ; this
.text:00000AAF                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000AB4                 cmp     [ebp+var_64], eax
.text:00000AB7                 jnz     short loc_AC5
.text:00000AB9                 lea     edx, [ebp+var_5C]
.text:00000ABC                 push    edx
.text:00000ABD                 lea     ecx, [ebp+var_30]
.text:00000AC0                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00000AC5
.text:00000AC5 loc_AC5:                                ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+103j
.text:00000AC5                 mov     byte ptr [ebp+var_4], 0
.text:00000AC9                 lea     ecx, [ebp+var_5C] ; this
.text:00000ACC                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000AD1
.text:00000AD1 loc_AD1:                                ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+93j
.text:00000AD1                 lea     eax, [ebp+var_44]
.text:00000AD4                 push    eax
.text:00000AD5                 mov     ecx, [ebp+var_10]
.text:00000AD8                 call    ?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z ; CObjectVector<CFieldInfo>::Add(CFieldInfo const &)
.text:00000ADD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000AE4                 lea     ecx, [ebp+var_44] ; this
.text:00000AE7                 call    ??1CFieldInfo@@QAE@XZ ; CFieldInfo::~CFieldInfo(void)
.text:00000AEC                 push    edx
.text:00000AED                 mov     ecx, ebp
.text:00000AEF                 push    eax
.text:00000AF0                 lea     edx, $LN16
.text:00000AF6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000AFB                 pop     eax
.text:00000AFC                 pop     edx
.text:00000AFD                 mov     ecx, [ebp+var_C]
.text:00000B00                 mov     large fs:0, ecx
.text:00000B07                 pop     ecx
.text:00000B08                 pop     edi
.text:00000B09                 add     esp, 68h
.text:00000B0C                 cmp     ebp, esp
.text:00000B0E                 call    __RTC_CheckEsp
.text:00000B13                 mov     esp, ebp
.text:00000B15                 pop     ebp
.text:00000B16                 retn    0Ch
.text:00000B16 ?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z endp
.text:00000B16
.text:00000B16 ; ---------------------------------------------------------------------------
.text:00000B19                 align 4
.text:00000B1C $LN16           dd 2                    ; DATA XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+13Co
.text:00000B20                 dd offset $LN15
.text:00000B24 $LN15           dd 0FFFFFFBCh, 30h      ; DATA XREF: .text:00000B20o
.text:00000B2C                 dd offset $LN12
.text:00000B30                 dd 0FFFFFFA4h, 0Ch
.text:00000B38                 dd offset $LN13
.text:00000B3C $LN13           db 73h, 41h, 0          ; DATA XREF: .text:00000B38o
.text:00000B3F $LN12           db 66h                  ; DATA XREF: .text:00000B2Co
.text:00000B40                 dd 0CCCCCC00h
.text:00000B44
.text:00000B44 ; =============== S U B R O U T I N E =======================================
.text:00000B44
.text:00000B44 ; Attributes: bp-based frame
.text:00000B44
.text:00000B44 ; void __stdcall GetPropName(unsigned long, wchar_t const *, class AString &, class UString &)
.text:00000B44 ?GetPropName@@YGXKPB_WAAVAString@@AAVUString@@@Z proc near
.text:00000B44                                         ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+65p
.text:00000B44                                         ; PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)+92p
.text:00000B44
.text:00000B44 var_1C          = dword ptr -1Ch
.text:00000B44 var_18          = byte ptr -18h
.text:00000B44 var_14          = dword ptr -14h
.text:00000B44 var_10          = dword ptr -10h
.text:00000B44 var_C           = dword ptr -0Ch
.text:00000B44 var_8           = dword ptr -8
.text:00000B44 var_4           = dword ptr -4
.text:00000B44 arg_0           = dword ptr  8
.text:00000B44 arg_4           = dword ptr  0Ch
.text:00000B44 arg_8           = dword ptr  10h
.text:00000B44 arg_C           = dword ptr  14h
.text:00000B44
.text:00000B44                 push    ebp
.text:00000B45                 mov     ebp, esp
.text:00000B47                 sub     esp, 1Ch
.text:00000B4A                 mov     eax, 0CCCCCCCCh
.text:00000B4F                 mov     [ebp+var_1C], eax
.text:00000B52                 mov     dword ptr [ebp+var_18], eax
.text:00000B55                 mov     [ebp+var_14], eax
.text:00000B58                 mov     [ebp+var_10], eax
.text:00000B5B                 mov     [ebp+var_C], eax
.text:00000B5E                 mov     [ebp+var_8], eax
.text:00000B61                 mov     [ebp+var_4], eax
.text:00000B64                 mov     eax, dword ptr ds:___security_cookie
.text:00000B69                 xor     eax, ebp
.text:00000B6B                 mov     [ebp+var_4], eax
.text:00000B6E                 cmp     [ebp+arg_0], 5Fh ; '_'
.text:00000B72                 jnb     short loc_B89
.text:00000B74                 mov     eax, [ebp+arg_0]
.text:00000B77                 mov     ecx, _kPropIdToName[eax*4]
.text:00000B7E                 push    ecx
.text:00000B7F                 mov     ecx, [ebp+arg_8]
.text:00000B82                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00000B87                 jmp     short loc_BB6
.text:00000B89 ; ---------------------------------------------------------------------------
.text:00000B89
.text:00000B89 loc_B89:                                ; CODE XREF: GetPropName(ulong,wchar_t const *,AString &,UString &)+2Ej
.text:00000B89                 cmp     [ebp+arg_4], 0
.text:00000B8D                 jz      short loc_B9D
.text:00000B8F                 mov     edx, [ebp+arg_4]
.text:00000B92                 push    edx
.text:00000B93                 mov     ecx, [ebp+arg_C]
.text:00000B96                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00000B9B                 jmp     short loc_BB6
.text:00000B9D ; ---------------------------------------------------------------------------
.text:00000B9D
.text:00000B9D loc_B9D:                                ; CODE XREF: GetPropName(ulong,wchar_t const *,AString &,UString &)+49j
.text:00000B9D                 lea     eax, [ebp+var_18]
.text:00000BA0                 push    eax             ; char *
.text:00000BA1                 mov     ecx, [ebp+arg_0]
.text:00000BA4                 push    ecx             ; unsigned int
.text:00000BA5                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00000BAA                 lea     edx, [ebp+var_18]
.text:00000BAD                 push    edx
.text:00000BAE                 mov     ecx, [ebp+arg_8]
.text:00000BB1                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00000BB6
.text:00000BB6 loc_BB6:                                ; CODE XREF: GetPropName(ulong,wchar_t const *,AString &,UString &)+43j
.text:00000BB6                                         ; GetPropName(ulong,wchar_t const *,AString &,UString &)+57j
.text:00000BB6                 push    edx
.text:00000BB7                 mov     ecx, ebp
.text:00000BB9                 push    eax
.text:00000BBA                 lea     edx, $LN8
.text:00000BC0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BC5                 pop     eax
.text:00000BC6                 pop     edx
.text:00000BC7                 mov     ecx, [ebp+var_4]
.text:00000BCA                 xor     ecx, ebp
.text:00000BCC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000BD1                 add     esp, 1Ch
.text:00000BD4                 cmp     ebp, esp
.text:00000BD6                 call    __RTC_CheckEsp
.text:00000BDB                 mov     esp, ebp
.text:00000BDD                 pop     ebp
.text:00000BDE                 retn    10h
.text:00000BDE ?GetPropName@@YGXKPB_WAAVAString@@AAVUString@@@Z endp
.text:00000BDE
.text:00000BDE ; ---------------------------------------------------------------------------
.text:00000BE1                 align 4
.text:00000BE4 $LN8            dd 1                    ; DATA XREF: GetPropName(ulong,wchar_t const *,AString &,UString &)+76o
.text:00000BE8                 dd offset $LN7
.text:00000BEC $LN7            dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00000BE8o
.text:00000BF4                 dd offset $LN6
.text:00000BF8 $LN6            dd 0CCCC0073h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00000BF4o
.text:00000C04
.text:00000C04 ; =============== S U B R O U T I N E =======================================
.text:00000C04
.text:00000C04 ; Attributes: bp-based frame
.text:00000C04
.text:00000C04 ; __int32 __thiscall CFieldPrinter::AddMainProps(CFieldPrinter *this, struct IInArchive *)
.text:00000C04                 public ?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z
.text:00000C04 ?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z proc near
.text:00000C04                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+A4Cp
.text:00000C04
.text:00000C04 var_50          = dword ptr -50h
.text:00000C04 var_4C          = dword ptr -4Ch
.text:00000C04 var_44          = byte ptr -44h
.text:00000C04 var_38          = dword ptr -38h
.text:00000C04 var_2C          = byte ptr -2Ch
.text:00000C04 var_24          = dword ptr -24h
.text:00000C04 var_20          = dword ptr -20h
.text:00000C04 var_18          = dword ptr -18h
.text:00000C04 var_10          = dword ptr -10h
.text:00000C04 var_C           = dword ptr -0Ch
.text:00000C04 var_4           = dword ptr -4
.text:00000C04 arg_0           = dword ptr  8
.text:00000C04
.text:00000C04                 push    ebp
.text:00000C05                 mov     ebp, esp
.text:00000C07                 push    0FFFFFFFFh
.text:00000C09                 push    offset __ehhandler$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z
.text:00000C0E                 mov     eax, large fs:0
.text:00000C14                 push    eax
.text:00000C15                 sub     esp, 44h
.text:00000C18                 push    esi
.text:00000C19                 push    edi
.text:00000C1A                 push    ecx
.text:00000C1B                 lea     edi, [ebp+var_50]
.text:00000C1E                 mov     ecx, 11h
.text:00000C23                 mov     eax, 0CCCCCCCCh
.text:00000C28                 rep stosd
.text:00000C2A                 pop     ecx
.text:00000C2B                 mov     eax, dword ptr ds:___security_cookie
.text:00000C30                 xor     eax, ebp
.text:00000C32                 push    eax
.text:00000C33                 lea     eax, [ebp+var_C]
.text:00000C36                 mov     large fs:0, eax
.text:00000C3C                 mov     [ebp+var_10], ecx
.text:00000C3F                 mov     esi, esp
.text:00000C41                 lea     eax, [ebp+var_18]
.text:00000C44                 push    eax
.text:00000C45                 mov     ecx, [ebp+arg_0]
.text:00000C48                 mov     edx, [ecx]
.text:00000C4A                 mov     eax, [ebp+arg_0]
.text:00000C4D                 push    eax
.text:00000C4E                 mov     ecx, [edx+24h]
.text:00000C51                 call    ecx
.text:00000C53                 cmp     esi, esp
.text:00000C55                 call    __RTC_CheckEsp
.text:00000C5A                 mov     [ebp+var_20], eax
.text:00000C5D                 cmp     [ebp+var_20], 0
.text:00000C61                 jz      short loc_C6B
.text:00000C63                 mov     eax, [ebp+var_20]
.text:00000C66                 jmp     loc_D14
.text:00000C6B ; ---------------------------------------------------------------------------
.text:00000C6B
.text:00000C6B loc_C6B:                                ; CODE XREF: CFieldPrinter::AddMainProps(IInArchive *)+5Dj
.text:00000C6B                 mov     [ebp+var_24], 0
.text:00000C72                 jmp     short loc_C7D
.text:00000C74 ; ---------------------------------------------------------------------------
.text:00000C74
.text:00000C74 loc_C74:                                ; CODE XREF: CFieldPrinter::AddMainProps(IInArchive *)+109j
.text:00000C74                 mov     edx, [ebp+var_24]
.text:00000C77                 add     edx, 1
.text:00000C7A                 mov     [ebp+var_24], edx
.text:00000C7D
.text:00000C7D loc_C7D:                                ; CODE XREF: CFieldPrinter::AddMainProps(IInArchive *)+6Ej
.text:00000C7D                 mov     eax, [ebp+var_24]
.text:00000C80                 cmp     eax, [ebp+var_18]
.text:00000C83                 jnb     loc_D12
.text:00000C89                 lea     ecx, [ebp+var_2C] ; this
.text:00000C8C                 call    ??0CMyComBSTR@@QAE@XZ ; CMyComBSTR::CMyComBSTR(void)
.text:00000C91                 mov     [ebp+var_4], 0
.text:00000C98                 mov     esi, esp
.text:00000C9A                 lea     ecx, [ebp+var_44]
.text:00000C9D                 push    ecx
.text:00000C9E                 lea     edx, [ebp+var_38]
.text:00000CA1                 push    edx
.text:00000CA2                 lea     ecx, [ebp+var_2C]
.text:00000CA5                 call    ??ICMyComBSTR@@QAEPAPA_WXZ ; CMyComBSTR::operator&(void)
.text:00000CAA                 push    eax
.text:00000CAB                 mov     eax, [ebp+var_24]
.text:00000CAE                 push    eax
.text:00000CAF                 mov     ecx, [ebp+arg_0]
.text:00000CB2                 mov     edx, [ecx]
.text:00000CB4                 mov     eax, [ebp+arg_0]
.text:00000CB7                 push    eax
.text:00000CB8                 mov     ecx, [edx+28h]
.text:00000CBB                 call    ecx
.text:00000CBD                 cmp     esi, esp
.text:00000CBF                 call    __RTC_CheckEsp
.text:00000CC4                 mov     [ebp+var_4C], eax
.text:00000CC7                 cmp     [ebp+var_4C], 0
.text:00000CCB                 jz      short loc_CE7
.text:00000CCD                 mov     edx, [ebp+var_4C]
.text:00000CD0                 mov     [ebp+var_50], edx
.text:00000CD3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000CDA                 lea     ecx, [ebp+var_2C] ; this
.text:00000CDD                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00000CE2                 mov     eax, [ebp+var_50]
.text:00000CE5                 jmp     short loc_D14
.text:00000CE7 ; ---------------------------------------------------------------------------
.text:00000CE7
.text:00000CE7 loc_CE7:                                ; CODE XREF: CFieldPrinter::AddMainProps(IInArchive *)+C7j
.text:00000CE7                 push    0               ; bool
.text:00000CE9                 mov     eax, [ebp+var_38]
.text:00000CEC                 push    eax             ; unsigned __int32
.text:00000CED                 lea     ecx, [ebp+var_2C]
.text:00000CF0                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:00000CF5                 push    eax             ; wchar_t *
.text:00000CF6                 mov     ecx, [ebp+var_10] ; this
.text:00000CF9                 call    ?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z ; CFieldPrinter::AddProp(wchar_t const *,ulong,bool)
.text:00000CFE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D05                 lea     ecx, [ebp+var_2C] ; this
.text:00000D08                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00000D0D                 jmp     loc_C74
.text:00000D12 ; ---------------------------------------------------------------------------
.text:00000D12
.text:00000D12 loc_D12:                                ; CODE XREF: CFieldPrinter::AddMainProps(IInArchive *)+7Fj
.text:00000D12                 xor     eax, eax
.text:00000D14
.text:00000D14 loc_D14:                                ; CODE XREF: CFieldPrinter::AddMainProps(IInArchive *)+62j
.text:00000D14                                         ; CFieldPrinter::AddMainProps(IInArchive *)+E1j
.text:00000D14                 push    edx
.text:00000D15                 mov     ecx, ebp
.text:00000D17                 push    eax
.text:00000D18                 lea     edx, $LN15_0
.text:00000D1E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D23                 pop     eax
.text:00000D24                 pop     edx
.text:00000D25                 mov     ecx, [ebp+var_C]
.text:00000D28                 mov     large fs:0, ecx
.text:00000D2F                 pop     ecx
.text:00000D30                 pop     edi
.text:00000D31                 pop     esi
.text:00000D32                 add     esp, 50h
.text:00000D35                 cmp     ebp, esp
.text:00000D37                 call    __RTC_CheckEsp
.text:00000D3C                 mov     esp, ebp
.text:00000D3E                 pop     ebp
.text:00000D3F                 retn    4
.text:00000D3F ?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z endp
.text:00000D3F
.text:00000D3F ; ---------------------------------------------------------------------------
.text:00000D42                 align 4
.text:00000D44 $LN15_0         dd 4                    ; DATA XREF: CFieldPrinter::AddMainProps(IInArchive *)+114o
.text:00000D48                 dd offset $LN14
.text:00000D4C $LN14           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000D48o
.text:00000D54                 dd offset $LN9          ; "numProps"
.text:00000D58                 dd 0FFFFFFD4h, 4
.text:00000D60                 dd offset $LN10         ; "name"
.text:00000D64                 dd 0FFFFFFC8h, 4
.text:00000D6C                 dd offset $LN11         ; "propID"
.text:00000D70                 dd 0FFFFFFBCh, 2
.text:00000D78                 dd offset $LN12_0
.text:00000D7C $LN12_0         db 76h, 74h, 0          ; DATA XREF: .text:00000D78o
.text:00000D7F $LN11           db 'propID',0           ; DATA XREF: .text:00000D6Co
.text:00000D86 $LN10           db 'name',0             ; DATA XREF: .text:00000D60o
.text:00000D8B $LN9            db 'numProps',0         ; DATA XREF: .text:00000D54o
.text:00000D94
.text:00000D94 ; =============== S U B R O U T I N E =======================================
.text:00000D94
.text:00000D94 ; Attributes: bp-based frame
.text:00000D94
.text:00000D94 ; __int32 __thiscall CFieldPrinter::AddRawProps(CFieldPrinter *this, struct IArchiveGetRawProps *)
.text:00000D94                 public ?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z
.text:00000D94 ?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z proc near
.text:00000D94                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+AEAp
.text:00000D94
.text:00000D94 var_44          = dword ptr -44h
.text:00000D94 var_40          = dword ptr -40h
.text:00000D94 var_38          = dword ptr -38h
.text:00000D94 var_2C          = byte ptr -2Ch
.text:00000D94 var_24          = dword ptr -24h
.text:00000D94 var_20          = dword ptr -20h
.text:00000D94 var_18          = dword ptr -18h
.text:00000D94 var_10          = dword ptr -10h
.text:00000D94 var_C           = dword ptr -0Ch
.text:00000D94 var_4           = dword ptr -4
.text:00000D94 arg_0           = dword ptr  8
.text:00000D94
.text:00000D94                 push    ebp
.text:00000D95                 mov     ebp, esp
.text:00000D97                 push    0FFFFFFFFh
.text:00000D99                 push    offset __ehhandler$?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z
.text:00000D9E                 mov     eax, large fs:0
.text:00000DA4                 push    eax
.text:00000DA5                 sub     esp, 38h
.text:00000DA8                 push    esi
.text:00000DA9                 push    edi
.text:00000DAA                 push    ecx
.text:00000DAB                 lea     edi, [ebp+var_44]
.text:00000DAE                 mov     ecx, 0Eh
.text:00000DB3                 mov     eax, 0CCCCCCCCh
.text:00000DB8                 rep stosd
.text:00000DBA                 pop     ecx
.text:00000DBB                 mov     eax, dword ptr ds:___security_cookie
.text:00000DC0                 xor     eax, ebp
.text:00000DC2                 push    eax
.text:00000DC3                 lea     eax, [ebp+var_C]
.text:00000DC6                 mov     large fs:0, eax
.text:00000DCC                 mov     [ebp+var_10], ecx
.text:00000DCF                 mov     esi, esp
.text:00000DD1                 lea     eax, [ebp+var_18]
.text:00000DD4                 push    eax
.text:00000DD5                 mov     ecx, [ebp+arg_0]
.text:00000DD8                 mov     edx, [ecx]
.text:00000DDA                 mov     eax, [ebp+arg_0]
.text:00000DDD                 push    eax
.text:00000DDE                 mov     ecx, [edx+14h]
.text:00000DE1                 call    ecx
.text:00000DE3                 cmp     esi, esp
.text:00000DE5                 call    __RTC_CheckEsp
.text:00000DEA                 mov     [ebp+var_20], eax
.text:00000DED                 cmp     [ebp+var_20], 0
.text:00000DF1                 jz      short loc_DFB
.text:00000DF3                 mov     eax, [ebp+var_20]
.text:00000DF6                 jmp     loc_EA0
.text:00000DFB ; ---------------------------------------------------------------------------
.text:00000DFB
.text:00000DFB loc_DFB:                                ; CODE XREF: CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+5Dj
.text:00000DFB                 mov     [ebp+var_24], 0
.text:00000E02                 jmp     short loc_E0D
.text:00000E04 ; ---------------------------------------------------------------------------
.text:00000E04
.text:00000E04 loc_E04:                                ; CODE XREF: CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+105j
.text:00000E04                 mov     edx, [ebp+var_24]
.text:00000E07                 add     edx, 1
.text:00000E0A                 mov     [ebp+var_24], edx
.text:00000E0D
.text:00000E0D loc_E0D:                                ; CODE XREF: CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+6Ej
.text:00000E0D                 mov     eax, [ebp+var_24]
.text:00000E10                 cmp     eax, [ebp+var_18]
.text:00000E13                 jnb     loc_E9E
.text:00000E19                 lea     ecx, [ebp+var_2C] ; this
.text:00000E1C                 call    ??0CMyComBSTR@@QAE@XZ ; CMyComBSTR::CMyComBSTR(void)
.text:00000E21                 mov     [ebp+var_4], 0
.text:00000E28                 mov     esi, esp
.text:00000E2A                 lea     ecx, [ebp+var_38]
.text:00000E2D                 push    ecx
.text:00000E2E                 lea     ecx, [ebp+var_2C]
.text:00000E31                 call    ??ICMyComBSTR@@QAEPAPA_WXZ ; CMyComBSTR::operator&(void)
.text:00000E36                 push    eax
.text:00000E37                 mov     edx, [ebp+var_24]
.text:00000E3A                 push    edx
.text:00000E3B                 mov     eax, [ebp+arg_0]
.text:00000E3E                 mov     ecx, [eax]
.text:00000E40                 mov     edx, [ebp+arg_0]
.text:00000E43                 push    edx
.text:00000E44                 mov     eax, [ecx+18h]
.text:00000E47                 call    eax
.text:00000E49                 cmp     esi, esp
.text:00000E4B                 call    __RTC_CheckEsp
.text:00000E50                 mov     [ebp+var_40], eax
.text:00000E53                 cmp     [ebp+var_40], 0
.text:00000E57                 jz      short loc_E73
.text:00000E59                 mov     ecx, [ebp+var_40]
.text:00000E5C                 mov     [ebp+var_44], ecx
.text:00000E5F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E66                 lea     ecx, [ebp+var_2C] ; this
.text:00000E69                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00000E6E                 mov     eax, [ebp+var_44]
.text:00000E71                 jmp     short loc_EA0
.text:00000E73 ; ---------------------------------------------------------------------------
.text:00000E73
.text:00000E73 loc_E73:                                ; CODE XREF: CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+C3j
.text:00000E73                 push    1               ; bool
.text:00000E75                 mov     edx, [ebp+var_38]
.text:00000E78                 push    edx             ; unsigned __int32
.text:00000E79                 lea     ecx, [ebp+var_2C]
.text:00000E7C                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:00000E81                 push    eax             ; wchar_t *
.text:00000E82                 mov     ecx, [ebp+var_10] ; this
.text:00000E85                 call    ?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z ; CFieldPrinter::AddProp(wchar_t const *,ulong,bool)
.text:00000E8A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E91                 lea     ecx, [ebp+var_2C] ; this
.text:00000E94                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00000E99                 jmp     loc_E04
.text:00000E9E ; ---------------------------------------------------------------------------
.text:00000E9E
.text:00000E9E loc_E9E:                                ; CODE XREF: CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+7Fj
.text:00000E9E                 xor     eax, eax
.text:00000EA0
.text:00000EA0 loc_EA0:                                ; CODE XREF: CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+62j
.text:00000EA0                                         ; CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+DDj
.text:00000EA0                 push    edx
.text:00000EA1                 mov     ecx, ebp
.text:00000EA3                 push    eax
.text:00000EA4                 lea     edx, $LN14_0
.text:00000EAA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000EAF                 pop     eax
.text:00000EB0                 pop     edx
.text:00000EB1                 mov     ecx, [ebp+var_C]
.text:00000EB4                 mov     large fs:0, ecx
.text:00000EBB                 pop     ecx
.text:00000EBC                 pop     edi
.text:00000EBD                 pop     esi
.text:00000EBE                 add     esp, 44h
.text:00000EC1                 cmp     ebp, esp
.text:00000EC3                 call    __RTC_CheckEsp
.text:00000EC8                 mov     esp, ebp
.text:00000ECA                 pop     ebp
.text:00000ECB                 retn    4
.text:00000ECB ?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z endp
.text:00000ECB
.text:00000ECB ; ---------------------------------------------------------------------------
.text:00000ECE                 align 10h
.text:00000ED0 $LN14_0         dd 3                    ; DATA XREF: CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+110o
.text:00000ED4                 dd offset $LN13_0
.text:00000ED8 $LN13_0         dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000ED4o
.text:00000EE0                 dd offset $LN9_0        ; "numProps"
.text:00000EE4                 dd 0FFFFFFD4h, 4
.text:00000EEC                 dd offset $LN10_0       ; "name"
.text:00000EF0                 dd 0FFFFFFC8h, 4
.text:00000EF8                 dd offset $LN11_0       ; "propID"
.text:00000EFC $LN11_0         db 'propID',0           ; DATA XREF: .text:00000EF8o
.text:00000F03 $LN10_0         db 'name',0             ; DATA XREF: .text:00000EECo
.text:00000F08 $LN9_0          db 'numProps',0         ; DATA XREF: .text:00000EE0o
.text:00000F11                 align 4
.text:00000F14
.text:00000F14 ; =============== S U B R O U T I N E =======================================
.text:00000F14
.text:00000F14 ; Attributes: bp-based frame
.text:00000F14
.text:00000F14 ; void __thiscall CFieldPrinter::PrintTitle(CFieldPrinter *__hidden this)
.text:00000F14                 public ?PrintTitle@CFieldPrinter@@QAEXXZ
.text:00000F14 ?PrintTitle@CFieldPrinter@@QAEXXZ proc near
.text:00000F14                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+9D2p
.text:00000F14
.text:00000F14 var_10          = dword ptr -10h
.text:00000F14 var_C           = dword ptr -0Ch
.text:00000F14 var_8           = dword ptr -8
.text:00000F14 var_4           = dword ptr -4
.text:00000F14
.text:00000F14                 push    ebp
.text:00000F15                 mov     ebp, esp
.text:00000F17                 sub     esp, 10h
.text:00000F1A                 mov     eax, 0CCCCCCCCh
.text:00000F1F                 mov     [ebp+var_10], eax
.text:00000F22                 mov     [ebp+var_C], eax
.text:00000F25                 mov     [ebp+var_8], eax
.text:00000F28                 mov     [ebp+var_4], eax
.text:00000F2B                 mov     [ebp+var_4], ecx
.text:00000F2E                 mov     [ebp+var_8], 0
.text:00000F35                 jmp     short loc_F40
.text:00000F37 ; ---------------------------------------------------------------------------
.text:00000F37
.text:00000F37 loc_F37:                                ; CODE XREF: CFieldPrinter::PrintTitle(void)+8Aj
.text:00000F37                 mov     eax, [ebp+var_8]
.text:00000F3A                 add     eax, 1
.text:00000F3D                 mov     [ebp+var_8], eax
.text:00000F40
.text:00000F40 loc_F40:                                ; CODE XREF: CFieldPrinter::PrintTitle(void)+21j
.text:00000F40                 mov     ecx, [ebp+var_4]
.text:00000F43                 call    ?Size@?$CObjectVector@UCFieldInfo@@@@QBEIXZ ; CObjectVector<CFieldInfo>::Size(void)
.text:00000F48                 cmp     [ebp+var_8], eax
.text:00000F4B                 jnb     short loc_FA0
.text:00000F4D                 mov     ecx, [ebp+var_8]
.text:00000F50                 push    ecx
.text:00000F51                 mov     ecx, [ebp+var_4]
.text:00000F54                 call    ??A?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@I@Z ; CObjectVector<CFieldInfo>::operator[](uint)
.text:00000F59                 mov     [ebp+var_C], eax
.text:00000F5C                 mov     edx, [ebp+var_C]
.text:00000F5F                 mov     eax, [edx+28h]
.text:00000F62                 push    eax
.text:00000F63                 call    ?PrintSpaces@@YGXI@Z ; PrintSpaces(uint)
.text:00000F68                 mov     ecx, [ebp+var_C]
.text:00000F6B                 cmp     dword ptr [ecx], 3
.text:00000F6E                 jnz     short loc_F79
.text:00000F70                 mov     [ebp+var_10], 0
.text:00000F77                 jmp     short loc_F82
.text:00000F79 ; ---------------------------------------------------------------------------
.text:00000F79
.text:00000F79 loc_F79:                                ; CODE XREF: CFieldPrinter::PrintTitle(void)+5Aj
.text:00000F79                 mov     edx, [ebp+var_C]
.text:00000F7C                 mov     eax, [edx+2Ch]
.text:00000F7F                 mov     [ebp+var_10], eax
.text:00000F82
.text:00000F82 loc_F82:                                ; CODE XREF: CFieldPrinter::PrintTitle(void)+63j
.text:00000F82                 mov     ecx, [ebp+var_C]
.text:00000F85                 add     ecx, 14h
.text:00000F88                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000F8D                 push    eax             ; Str
.text:00000F8E                 mov     ecx, [ebp+var_10]
.text:00000F91                 push    ecx             ; int
.text:00000F92                 mov     edx, [ebp+var_C]
.text:00000F95                 mov     eax, [edx+20h]
.text:00000F98                 push    eax             ; int
.text:00000F99                 call    ?PrintString@@YGXW4EAdjustment@@IPBD@Z ; PrintString(EAdjustment,uint,char const *)
.text:00000F9E                 jmp     short loc_F37
.text:00000FA0 ; ---------------------------------------------------------------------------
.text:00000FA0
.text:00000FA0 loc_FA0:                                ; CODE XREF: CFieldPrinter::PrintTitle(void)+37j
.text:00000FA0                 add     esp, 10h
.text:00000FA3                 cmp     ebp, esp
.text:00000FA5                 call    __RTC_CheckEsp
.text:00000FAA                 mov     esp, ebp
.text:00000FAC                 pop     ebp
.text:00000FAD                 retn
.text:00000FAD ?PrintTitle@CFieldPrinter@@QAEXXZ endp
.text:00000FAD
.text:00000FAD ; ---------------------------------------------------------------------------
.text:00000FAE                 db 6 dup(0CCh)
.text:00000FB4
.text:00000FB4 ; =============== S U B R O U T I N E =======================================
.text:00000FB4
.text:00000FB4 ; Attributes: bp-based frame
.text:00000FB4
.text:00000FB4 ; void __stdcall PrintSpaces(unsigned int)
.text:00000FB4 ?PrintSpaces@@YGXI@Z proc near          ; CODE XREF: CFieldPrinter::PrintTitle(void)+4Fp
.text:00000FB4                                         ; PrintString(EAdjustment,uint,char const *)+7Cp ...
.text:00000FB4
.text:00000FB4 arg_0           = dword ptr  8
.text:00000FB4
.text:00000FB4                 push    ebp
.text:00000FB5                 mov     ebp, esp
.text:00000FB7                 cmp     [ebp+arg_0], 0
.text:00000FBB                 jbe     short loc_FDC
.text:00000FBD                 cmp     [ebp+arg_0], 20h ; ' '
.text:00000FC1                 ja      short loc_FDC
.text:00000FC3                 mov     eax, 20h ; ' '
.text:00000FC8                 sub     eax, [ebp+arg_0]
.text:00000FCB                 add     eax, ds:_g_Spaces
.text:00000FD1                 push    eax             ; Str
.text:00000FD2                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00000FD7                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000FDC
.text:00000FDC loc_FDC:                                ; CODE XREF: PrintSpaces(uint)+7j
.text:00000FDC                                         ; PrintSpaces(uint)+Dj
.text:00000FDC                 cmp     ebp, esp
.text:00000FDE                 call    __RTC_CheckEsp
.text:00000FE3                 pop     ebp
.text:00000FE4                 retn    4
.text:00000FE4 ?PrintSpaces@@YGXI@Z endp
.text:00000FE4
.text:00000FE4 ; ---------------------------------------------------------------------------
.text:00000FE7                 db 0Dh dup(0CCh)
.text:00000FF4
.text:00000FF4 ; =============== S U B R O U T I N E =======================================
.text:00000FF4
.text:00000FF4 ; Attributes: bp-based frame
.text:00000FF4
.text:00000FF4 ; int __stdcall PrintString(int, int, char *Str)
.text:00000FF4 ?PrintString@@YGXW4EAdjustment@@IPBD@Z proc near
.text:00000FF4                                         ; CODE XREF: CFieldPrinter::PrintTitle(void)+85p
.text:00000FF4                                         ; CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+FFp ...
.text:00000FF4
.text:00000FF4 var_10          = dword ptr -10h
.text:00000FF4 var_C           = dword ptr -0Ch
.text:00000FF4 var_8           = dword ptr -8
.text:00000FF4 var_4           = dword ptr -4
.text:00000FF4 arg_0           = dword ptr  8
.text:00000FF4 arg_4           = dword ptr  0Ch
.text:00000FF4 Str             = dword ptr  10h
.text:00000FF4
.text:00000FF4                 push    ebp
.text:00000FF5                 mov     ebp, esp
.text:00000FF7                 sub     esp, 10h
.text:00000FFA                 mov     eax, 0CCCCCCCCh
.text:00000FFF                 mov     [ebp+var_10], eax
.text:00001002                 mov     [ebp+var_C], eax
.text:00001005                 mov     [ebp+var_8], eax
.text:00001008                 mov     [ebp+var_4], eax
.text:0000100B                 mov     [ebp+var_4], 0
.text:00001012                 mov     eax, [ebp+Str]
.text:00001015                 push    eax             ; Str
.text:00001016                 call    _strlen
.text:0000101B                 add     esp, 4
.text:0000101E                 mov     [ebp+var_8], eax
.text:00001021                 mov     ecx, [ebp+arg_4]
.text:00001024                 cmp     ecx, [ebp+var_8]
.text:00001027                 jbe     short loc_107E
.text:00001029                 mov     edx, [ebp+arg_4]
.text:0000102C                 sub     edx, [ebp+var_8]
.text:0000102F                 mov     [ebp+var_4], edx
.text:00001032                 mov     [ebp+var_C], 0
.text:00001039                 mov     eax, [ebp+arg_0]
.text:0000103C                 mov     [ebp+var_10], eax
.text:0000103F                 cmp     [ebp+var_10], 0
.text:00001043                 jz      short loc_1053
.text:00001045                 cmp     [ebp+var_10], 1
.text:00001049                 jz      short loc_105C
.text:0000104B                 cmp     [ebp+var_10], 2
.text:0000104F                 jz      short loc_1066
.text:00001051                 jmp     short loc_106C
.text:00001053 ; ---------------------------------------------------------------------------
.text:00001053
.text:00001053 loc_1053:                               ; CODE XREF: PrintString(EAdjustment,uint,char const *)+4Fj
.text:00001053                 mov     [ebp+var_C], 0
.text:0000105A                 jmp     short loc_106C
.text:0000105C ; ---------------------------------------------------------------------------
.text:0000105C
.text:0000105C loc_105C:                               ; CODE XREF: PrintString(EAdjustment,uint,char const *)+55j
.text:0000105C                 mov     ecx, [ebp+var_4]
.text:0000105F                 shr     ecx, 1
.text:00001061                 mov     [ebp+var_C], ecx
.text:00001064                 jmp     short loc_106C
.text:00001066 ; ---------------------------------------------------------------------------
.text:00001066
.text:00001066 loc_1066:                               ; CODE XREF: PrintString(EAdjustment,uint,char const *)+5Bj
.text:00001066                 mov     edx, [ebp+var_4]
.text:00001069                 mov     [ebp+var_C], edx
.text:0000106C
.text:0000106C loc_106C:                               ; CODE XREF: PrintString(EAdjustment,uint,char const *)+5Dj
.text:0000106C                                         ; PrintString(EAdjustment,uint,char const *)+66j ...
.text:0000106C                 mov     eax, [ebp+var_C]
.text:0000106F                 push    eax
.text:00001070                 call    ?PrintSpaces@@YGXI@Z ; PrintSpaces(uint)
.text:00001075                 mov     ecx, [ebp+var_4]
.text:00001078                 sub     ecx, [ebp+var_C]
.text:0000107B                 mov     [ebp+var_4], ecx
.text:0000107E
.text:0000107E loc_107E:                               ; CODE XREF: PrintString(EAdjustment,uint,char const *)+33j
.text:0000107E                 mov     edx, [ebp+Str]
.text:00001081                 push    edx             ; Str
.text:00001082                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00001087                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000108C                 mov     eax, [ebp+var_4]
.text:0000108F                 push    eax
.text:00001090                 call    ?PrintSpaces@@YGXI@Z ; PrintSpaces(uint)
.text:00001095                 add     esp, 10h
.text:00001098                 cmp     ebp, esp
.text:0000109A                 call    __RTC_CheckEsp
.text:0000109F                 mov     esp, ebp
.text:000010A1                 pop     ebp
.text:000010A2                 retn    0Ch
.text:000010A2 ?PrintString@@YGXW4EAdjustment@@IPBD@Z endp
.text:000010A2
.text:000010A2 ; ---------------------------------------------------------------------------
.text:000010A5                 db 0Fh dup(0CCh)
.text:000010B4
.text:000010B4 ; =============== S U B R O U T I N E =======================================
.text:000010B4
.text:000010B4 ; Attributes: bp-based frame
.text:000010B4
.text:000010B4 ; void __thiscall CFieldPrinter::PrintTitleLines(CFieldPrinter *__hidden this)
.text:000010B4                 public ?PrintTitleLines@CFieldPrinter@@QAEXXZ
.text:000010B4 ?PrintTitleLines@CFieldPrinter@@QAEXXZ proc near
.text:000010B4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+9E9p
.text:000010B4                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+155Fp ...
.text:000010B4
.text:000010B4 var_4           = dword ptr -4
.text:000010B4
.text:000010B4                 push    ebp
.text:000010B5                 mov     ebp, esp
.text:000010B7                 push    ecx
.text:000010B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010BF                 mov     [ebp+var_4], ecx
.text:000010C2                 mov     ecx, [ebp+var_4]
.text:000010C5                 add     ecx, 3Ch ; '<'
.text:000010C8                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000010CD                 push    eax             ; Str
.text:000010CE                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:000010D3                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000010D8                 add     esp, 4
.text:000010DB                 cmp     ebp, esp
.text:000010DD                 call    __RTC_CheckEsp
.text:000010E2                 mov     esp, ebp
.text:000010E4                 pop     ebp
.text:000010E5                 retn
.text:000010E5 ?PrintTitleLines@CFieldPrinter@@QAEXXZ endp
.text:000010E5
.text:000010E5 ; ---------------------------------------------------------------------------
.text:000010E6                 db 0Eh dup(0CCh)
.text:000010F4
.text:000010F4 ; =============== S U B R O U T I N E =======================================
.text:000010F4
.text:000010F4 ; Attributes: bp-based frame
.text:000010F4
.text:000010F4 ; __int32 __thiscall CFieldPrinter::PrintItemInfo(CFieldPrinter *this, unsigned int, const struct CListStat *)
.text:000010F4                 public ?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z
.text:000010F4 ?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z proc near
.text:000010F4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+13D0p
.text:000010F4
.text:000010F4 var_1FC         = dword ptr -1FCh
.text:000010F4 var_1F8         = dword ptr -1F8h
.text:000010F4 var_1F4         = dword ptr -1F4h
.text:000010F4 var_1F0         = dword ptr -1F0h
.text:000010F4 var_1EC         = dword ptr -1ECh
.text:000010F4 var_1E4         = byte ptr -1E4h
.text:000010F4 var_1A0         = dword ptr -1A0h
.text:000010F4 var_19C         = dword ptr -19Ch
.text:000010F4 var_194         = tagPROPVARIANT ptr -194h
.text:000010F4 var_17C         = byte ptr -17Ch
.text:000010F4 var_F4          = dword ptr -0F4h
.text:000010F4 var_EC          = byte ptr -0ECh
.text:000010F4 var_D9          = byte ptr -0D9h
.text:000010F4 var_D8          = dword ptr -0D8h
.text:000010F4 var_D0          = dword ptr -0D0h
.text:000010F4 var_C4          = dword ptr -0C4h
.text:000010F4 var_B8          = dword ptr -0B8h
.text:000010F4 var_B0          = dword ptr -0B0h
.text:000010F4 var_AC          = dword ptr -0ACh
.text:000010F4 var_A8          = dword ptr -0A8h
.text:000010F4 var_A1          = byte ptr -0A1h
.text:000010F4 var_A0          = dword ptr -0A0h
.text:000010F4 Str             = byte ptr -98h
.text:000010F4 var_14          = dword ptr -14h
.text:000010F4 var_10          = dword ptr -10h
.text:000010F4 var_C           = dword ptr -0Ch
.text:000010F4 var_4           = dword ptr -4
.text:000010F4 arg_0           = dword ptr  8
.text:000010F4 arg_4           = dword ptr  0Ch
.text:000010F4
.text:000010F4                 push    ebp
.text:000010F5                 mov     ebp, esp
.text:000010F7                 push    0FFFFFFFFh
.text:000010F9                 push    offset __ehhandler$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z
.text:000010FE                 mov     eax, large fs:0
.text:00001104                 push    eax
.text:00001105                 sub     esp, 1F0h
.text:0000110B                 push    esi
.text:0000110C                 push    edi
.text:0000110D                 push    ecx
.text:0000110E                 lea     edi, [ebp+var_1FC]
.text:00001114                 mov     ecx, 7Ch ; '|'
.text:00001119                 mov     eax, 0CCCCCCCCh
.text:0000111E                 rep stosd
.text:00001120                 pop     ecx
.text:00001121                 mov     eax, dword ptr ds:___security_cookie
.text:00001126                 xor     eax, ebp
.text:00001128                 mov     [ebp+var_10], eax
.text:0000112B                 push    eax
.text:0000112C                 lea     eax, [ebp+var_C]
.text:0000112F                 mov     large fs:0, eax
.text:00001135                 mov     [ebp+var_14], ecx
.text:00001138                 mov     [ebp+var_A0], 0
.text:00001142                 mov     eax, [ebp+var_14]
.text:00001145                 mov     cl, [eax+10h]
.text:00001148                 mov     [ebp+var_A1], cl
.text:0000114E                 mov     [ebp+var_A8], 0
.text:00001158                 jmp     short loc_1169
.text:0000115A ; ---------------------------------------------------------------------------
.text:0000115A
.text:0000115A loc_115A:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &):loc_127Cj
.text:0000115A                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &):loc_188Fj
.text:0000115A                 mov     edx, [ebp+var_A8]
.text:00001160                 add     edx, 1
.text:00001163                 mov     [ebp+var_A8], edx
.text:00001169
.text:00001169 loc_1169:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+64j
.text:00001169                 mov     ecx, [ebp+var_14]
.text:0000116C                 call    ?Size@?$CObjectVector@UCFieldInfo@@@@QBEIXZ ; CObjectVector<CFieldInfo>::Size(void)
.text:00001171                 cmp     [ebp+var_A8], eax
.text:00001177                 jnb     loc_1894
.text:0000117D                 mov     eax, [ebp+var_A8]
.text:00001183                 push    eax
.text:00001184                 mov     ecx, [ebp+var_14]
.text:00001187                 call    ??A?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@I@Z ; CObjectVector<CFieldInfo>::operator[](uint)
.text:0000118C                 mov     [ebp+var_AC], eax
.text:00001192                 movzx   ecx, [ebp+var_A1]
.text:00001199                 test    ecx, ecx
.text:0000119B                 jnz     short loc_11CF
.text:0000119D                 mov     edx, [ebp+var_AC]
.text:000011A3                 mov     eax, [edx+28h]
.text:000011A6                 push    eax
.text:000011A7                 mov     ecx, [ebp+var_A0]
.text:000011AD                 lea     edx, [ebp+ecx+Str]
.text:000011B4                 push    edx
.text:000011B5                 call    ?PrintSpacesToString@@YGXPADI@Z ; PrintSpacesToString(char *,uint)
.text:000011BA                 mov     eax, [ebp+var_AC]
.text:000011C0                 mov     ecx, [ebp+var_A0]
.text:000011C6                 add     ecx, [eax+28h]
.text:000011C9                 mov     [ebp+var_A0], ecx
.text:000011CF
.text:000011CF loc_11CF:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+A7j
.text:000011CF                 movzx   edx, [ebp+var_A1]
.text:000011D6                 test    edx, edx
.text:000011D8                 jz      short loc_1223
.text:000011DA                 mov     ecx, [ebp+var_AC]
.text:000011E0                 add     ecx, 14h        ; this
.text:000011E3                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:000011E8                 movzx   eax, al
.text:000011EB                 test    eax, eax
.text:000011ED                 jnz     short loc_120A
.text:000011EF                 mov     ecx, [ebp+var_AC]
.text:000011F5                 add     ecx, 14h
.text:000011F8                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000011FD                 push    eax             ; Str
.text:000011FE                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00001203                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001208                 jmp     short loc_1223
.text:0000120A ; ---------------------------------------------------------------------------
.text:0000120A
.text:0000120A loc_120A:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+F9j
.text:0000120A                 mov     ecx, [ebp+var_AC]
.text:00001210                 add     ecx, 8
.text:00001213                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001218                 push    eax
.text:00001219                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:0000121E                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00001223
.text:00001223 loc_1223:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+E4j
.text:00001223                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+114j
.text:00001223                 mov     ecx, [ebp+var_AC]
.text:00001229                 cmp     dword ptr [ecx], 3
.text:0000122C                 jnz     short loc_1281
.text:0000122E                 movzx   edx, [ebp+var_A1]
.text:00001235                 test    edx, edx
.text:00001237                 jnz     short loc_124A
.text:00001239                 lea     eax, [ebp+Str]
.text:0000123F                 push    eax             ; Str
.text:00001240                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00001245                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000124A
.text:0000124A loc_124A:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+143j
.text:0000124A                 mov     ecx, [ebp+var_14]
.text:0000124D                 add     ecx, 20h ; ' '
.text:00001250                 push    ecx             ; struct AString *
.text:00001251                 mov     edx, [ebp+var_14]
.text:00001254                 add     edx, 14h
.text:00001257                 push    edx             ; struct UString *
.text:00001258                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; this
.text:0000125D                 call    ?PrintUString@CStdOutStream@@QAEXABVUString@@AAVAString@@@Z ; CStdOutStream::PrintUString(UString const &,AString &)
.text:00001262                 movzx   eax, [ebp+var_A1]
.text:00001269                 test    eax, eax
.text:0000126B                 jz      short loc_127C
.text:0000126D                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001272                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00001277                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000127C
.text:0000127C loc_127C:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+177j
.text:0000127C                 jmp     loc_115A
.text:00001281 ; ---------------------------------------------------------------------------
.text:00001281
.text:00001281 loc_1281:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+138j
.text:00001281                 mov     ecx, [ebp+var_AC]
.text:00001287                 mov     edx, [ecx+2Ch]
.text:0000128A                 mov     [ebp+var_B0], edx
.text:00001290                 mov     eax, [ebp+var_AC]
.text:00001296                 movzx   ecx, byte ptr [eax+4]
.text:0000129A                 test    ecx, ecx
.text:0000129C                 jz      loc_146C
.text:000012A2                 mov     edx, [ebp+var_14]
.text:000012A5                 mov     ecx, [edx+0Ch]
.text:000012A8                 add     ecx, 8
.text:000012AB                 call    ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->(void)
.text:000012B0                 mov     [ebp+var_1F0], eax
.text:000012B6                 mov     esi, esp
.text:000012B8                 lea     eax, [ebp+var_D0]
.text:000012BE                 push    eax
.text:000012BF                 lea     ecx, [ebp+var_C4]
.text:000012C5                 push    ecx
.text:000012C6                 lea     edx, [ebp+var_B8]
.text:000012CC                 push    edx
.text:000012CD                 mov     eax, [ebp+var_AC]
.text:000012D3                 mov     ecx, [eax]
.text:000012D5                 push    ecx
.text:000012D6                 mov     edx, [ebp+arg_0]
.text:000012D9                 push    edx
.text:000012DA                 mov     eax, [ebp+var_1F0]
.text:000012E0                 push    eax
.text:000012E1                 mov     ecx, [ebp+var_1F0]
.text:000012E7                 mov     edx, [ecx]
.text:000012E9                 mov     eax, [edx+10h]
.text:000012EC                 call    eax
.text:000012EE                 cmp     esi, esp
.text:000012F0                 call    __RTC_CheckEsp
.text:000012F5                 mov     [ebp+var_D8], eax
.text:000012FB                 cmp     [ebp+var_D8], 0
.text:00001302                 jz      short loc_130F
.text:00001304                 mov     eax, [ebp+var_D8]
.text:0000130A                 jmp     loc_18A5
.text:0000130F ; ---------------------------------------------------------------------------
.text:0000130F
.text:0000130F loc_130F:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+20Ej
.text:0000130F                 cmp     [ebp+var_C4], 0
.text:00001316                 jz      loc_1467
.text:0000131C                 mov     [ebp+var_D9], 1
.text:00001323                 mov     ecx, [ebp+var_AC]
.text:00001329                 cmp     dword ptr [ecx], 3Eh ; '>'
.text:0000132C                 jnz     short loc_137A
.text:0000132E                 cmp     [ebp+var_D0], 1
.text:00001335                 jz      short loc_1341
.text:00001337                 mov     eax, 80004005h
.text:0000133C                 jmp     loc_18A5
.text:00001341 ; ---------------------------------------------------------------------------
.text:00001341
.text:00001341 loc_1341:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+241j
.text:00001341                 mov     edx, [ebp+var_14]
.text:00001344                 add     edx, 20h ; ' '
.text:00001347                 push    edx             ; struct AString *
.text:00001348                 mov     eax, [ebp+var_C4]
.text:0000134E                 push    eax             ; unsigned int
.text:0000134F                 mov     ecx, [ebp+var_B8]
.text:00001355                 push    ecx             ; unsigned __int8 *
.text:00001356                 call    ?ConvertNtSecureToString@@YGXPBEIAAVAString@@@Z ; ConvertNtSecureToString(uchar const *,uint,AString &)
.text:0000135B                 mov     ecx, [ebp+var_14]
.text:0000135E                 add     ecx, 20h ; ' '
.text:00001361                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00001366                 push    eax             ; Str
.text:00001367                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:0000136C                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001371                 mov     [ebp+var_D9], 0
.text:00001378                 jmp     short loc_13E9
.text:0000137A ; ---------------------------------------------------------------------------
.text:0000137A
.text:0000137A loc_137A:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+238j
.text:0000137A                 mov     edx, [ebp+var_AC]
.text:00001380                 cmp     dword ptr [edx], 59h ; 'Y'
.text:00001383                 jnz     short loc_13E9
.text:00001385                 lea     ecx, [ebp+var_EC]
.text:0000138B                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00001390                 mov     [ebp+var_4], 0
.text:00001397                 lea     eax, [ebp+var_EC]
.text:0000139D                 push    eax             ; struct UString *
.text:0000139E                 mov     ecx, [ebp+var_C4]
.text:000013A4                 push    ecx             ; unsigned int
.text:000013A5                 mov     edx, [ebp+var_B8]
.text:000013AB                 push    edx             ; unsigned __int8 *
.text:000013AC                 call    ?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z ; ConvertNtReparseToString(uchar const *,uint,UString &)
.text:000013B1                 movzx   eax, al
.text:000013B4                 test    eax, eax
.text:000013B6                 jz      short loc_13D7
.text:000013B8                 mov     [ebp+var_D9], 0
.text:000013BF                 mov     ecx, [ebp+var_14]
.text:000013C2                 add     ecx, 20h ; ' '
.text:000013C5                 push    ecx             ; struct AString *
.text:000013C6                 lea     edx, [ebp+var_EC]
.text:000013CC                 push    edx             ; struct UString *
.text:000013CD                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; this
.text:000013D2                 call    ?PrintUString@CStdOutStream@@QAEXABVUString@@AAVAString@@@Z ; CStdOutStream::PrintUString(UString const &,AString &)
.text:000013D7
.text:000013D7 loc_13D7:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+2C2j
.text:000013D7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000013DE                 lea     ecx, [ebp+var_EC] ; this
.text:000013E4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000013E9
.text:000013E9 loc_13E9:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+284j
.text:000013E9                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+28Fj
.text:000013E9                 movzx   eax, [ebp+var_D9]
.text:000013F0                 test    eax, eax
.text:000013F2                 jz      short loc_1467
.text:000013F4                 cmp     [ebp+var_D0], 1
.text:000013FB                 jz      short loc_1407
.text:000013FD                 mov     eax, 80004005h
.text:00001402                 jmp     loc_18A5
.text:00001407 ; ---------------------------------------------------------------------------
.text:00001407
.text:00001407 loc_1407:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+307j
.text:00001407                 mov     [ebp+var_F4], 40h ; '@'
.text:00001411                 cmp     [ebp+var_C4], 40h ; '@'
.text:00001418                 jbe     short loc_143C
.text:0000141A                 push    offset $SG73088 ; "data:"
.text:0000141F                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00001424                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001429                 mov     ecx, [ebp+var_C4]
.text:0000142F                 push    ecx
.text:00001430                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00001435                 call    ??6CStdOutStream@@QAEAAV0@I@Z ; CStdOutStream::operator<<(uint)
.text:0000143A                 jmp     short loc_1467
.text:0000143C ; ---------------------------------------------------------------------------
.text:0000143C
.text:0000143C loc_143C:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+324j
.text:0000143C                 mov     edx, [ebp+var_C4]
.text:00001442                 push    edx
.text:00001443                 mov     eax, [ebp+var_B8]
.text:00001449                 push    eax
.text:0000144A                 lea     ecx, [ebp+var_17C]
.text:00001450                 push    ecx
.text:00001451                 call    ?HexToString@@YGXPADPBEI@Z ; HexToString(char *,uchar const *,uint)
.text:00001456                 lea     edx, [ebp+var_17C]
.text:0000145C                 push    edx             ; Str
.text:0000145D                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00001462                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001467
.text:00001467 loc_1467:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+222j
.text:00001467                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+2FEj ...
.text:00001467                 jmp     loc_1875
.text:0000146C ; ---------------------------------------------------------------------------
.text:0000146C
.text:0000146C loc_146C:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+1A8j
.text:0000146C                 lea     ecx, [ebp+var_194] ; this
.text:00001472                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00001477                 mov     [ebp+var_4], 1
.text:0000147E                 mov     eax, [ebp+var_AC]
.text:00001484                 mov     ecx, [eax]
.text:00001486                 mov     [ebp+var_1F4], ecx
.text:0000148C                 cmp     [ebp+var_1F4], 7
.text:00001493                 jz      short loc_14A9
.text:00001495                 cmp     [ebp+var_1F4], 8
.text:0000149C                 jz      short loc_14CE
.text:0000149E                 cmp     [ebp+var_1F4], 0Ch
.text:000014A5                 jz      short loc_14F4
.text:000014A7                 jmp     short loc_1513
.text:000014A9 ; ---------------------------------------------------------------------------
.text:000014A9
.text:000014A9 loc_14A9:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+39Fj
.text:000014A9                 mov     edx, [ebp+arg_4]
.text:000014AC                 movzx   eax, byte ptr [edx+8]
.text:000014B0                 test    eax, eax
.text:000014B2                 jz      short loc_14C9
.text:000014B4                 mov     ecx, [ebp+arg_4]
.text:000014B7                 mov     edx, [ecx+4]
.text:000014BA                 push    edx
.text:000014BB                 mov     eax, [ecx]
.text:000014BD                 push    eax
.text:000014BE                 lea     ecx, [ebp+var_194]
.text:000014C4                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000014C9
.text:000014C9 loc_14C9:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+3BEj
.text:000014C9                 jmp     loc_158D
.text:000014CE ; ---------------------------------------------------------------------------
.text:000014CE
.text:000014CE loc_14CE:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+3A8j
.text:000014CE                 mov     ecx, [ebp+arg_4]
.text:000014D1                 movzx   edx, byte ptr [ecx+18h]
.text:000014D5                 test    edx, edx
.text:000014D7                 jz      short loc_14EF
.text:000014D9                 mov     eax, [ebp+arg_4]
.text:000014DC                 mov     ecx, [eax+14h]
.text:000014DF                 push    ecx
.text:000014E0                 mov     edx, [eax+10h]
.text:000014E3                 push    edx
.text:000014E4                 lea     ecx, [ebp+var_194]
.text:000014EA                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000014EF
.text:000014EF loc_14EF:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+3E3j
.text:000014EF                 jmp     loc_158D
.text:000014F4 ; ---------------------------------------------------------------------------
.text:000014F4
.text:000014F4 loc_14F4:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+3B1j
.text:000014F4                 mov     eax, [ebp+arg_4]
.text:000014F7                 movzx   ecx, byte ptr [eax+28h]
.text:000014FB                 test    ecx, ecx
.text:000014FD                 jz      short loc_1511
.text:000014FF                 mov     edx, [ebp+arg_4]
.text:00001502                 add     edx, 20h ; ' '
.text:00001505                 push    edx
.text:00001506                 lea     ecx, [ebp+var_194]
.text:0000150C                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00001511
.text:00001511 loc_1511:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+409j
.text:00001511                 jmp     short loc_158D
.text:00001513 ; ---------------------------------------------------------------------------
.text:00001513
.text:00001513 loc_1513:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+3B3j
.text:00001513                 mov     eax, [ebp+var_14]
.text:00001516                 mov     ecx, [eax+0Ch]
.text:00001519                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:0000151E                 mov     [ebp+var_1F8], eax
.text:00001524                 mov     esi, esp
.text:00001526                 lea     ecx, [ebp+var_194]
.text:0000152C                 push    ecx
.text:0000152D                 mov     edx, [ebp+var_AC]
.text:00001533                 mov     eax, [edx]
.text:00001535                 push    eax
.text:00001536                 mov     ecx, [ebp+arg_0]
.text:00001539                 push    ecx
.text:0000153A                 mov     edx, [ebp+var_1F8]
.text:00001540                 push    edx
.text:00001541                 mov     eax, [ebp+var_1F8]
.text:00001547                 mov     ecx, [eax]
.text:00001549                 mov     edx, [ecx+18h]
.text:0000154C                 call    edx
.text:0000154E                 cmp     esi, esp
.text:00001550                 call    __RTC_CheckEsp
.text:00001555                 mov     [ebp+var_19C], eax
.text:0000155B                 cmp     [ebp+var_19C], 0
.text:00001562                 jz      short loc_158D
.text:00001564                 mov     eax, [ebp+var_19C]
.text:0000156A                 mov     [ebp+var_1EC], eax
.text:00001570                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001577                 lea     ecx, [ebp+var_194] ; this
.text:0000157D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001582                 mov     eax, [ebp+var_1EC]
.text:00001588                 jmp     loc_18A5
.text:0000158D ; ---------------------------------------------------------------------------
.text:0000158D
.text:0000158D loc_158D:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &):loc_14C9j
.text:0000158D                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &):loc_14EFj ...
.text:0000158D                 mov     ecx, [ebp+var_AC]
.text:00001593                 cmp     dword ptr [ecx], 9
.text:00001596                 jnz     loc_1650
.text:0000159C                 movzx   edx, word ptr [ebp+var_194.anonymous_0]
.text:000015A3                 test    edx, edx
.text:000015A5                 jz      short loc_15B7
.text:000015A7                 movzx   eax, word ptr [ebp+var_194.anonymous_0]
.text:000015AE                 cmp     eax, 13h
.text:000015B1                 jnz     loc_1650
.text:000015B7
.text:000015B7 loc_15B7:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+4B1j
.text:000015B7                 movzx   ecx, word ptr [ebp+var_194.anonymous_0]
.text:000015BE                 test    ecx, ecx
.text:000015C0                 jnz     short loc_15CE
.text:000015C2                 mov     [ebp+var_1FC], 0
.text:000015CC                 jmp     short loc_15DA
.text:000015CE ; ---------------------------------------------------------------------------
.text:000015CE
.text:000015CE loc_15CE:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+4CCj
.text:000015CE                 mov     edx, dword ptr [ebp+var_194.anonymous_0+8]
.text:000015D4                 mov     [ebp+var_1FC], edx
.text:000015DA
.text:000015DA loc_15DA:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+4D8j
.text:000015DA                 mov     eax, [ebp+var_A0]
.text:000015E0                 lea     ecx, [ebp+eax+Str]
.text:000015E7                 push    ecx             ; char *
.text:000015E8                 movzx   edx, [ebp+var_A1]
.text:000015EF                 push    edx             ; char
.text:000015F0                 mov     eax, [ebp+var_14]
.text:000015F3                 movzx   ecx, byte ptr [eax+38h]
.text:000015F7                 push    ecx             ; char
.text:000015F8                 mov     edx, [ebp+var_1FC]
.text:000015FE                 push    edx             ; unsigned int
.text:000015FF                 call    ?GetAttribString@@YGXI_N0PAD@Z ; GetAttribString(uint,bool,bool,char *)
.text:00001604                 movzx   eax, [ebp+var_A1]
.text:0000160B                 test    eax, eax
.text:0000160D                 jz      short loc_1629
.text:0000160F                 mov     ecx, [ebp+var_A0]
.text:00001615                 lea     edx, [ebp+ecx+Str]
.text:0000161C                 push    edx             ; Str
.text:0000161D                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00001622                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001627                 jmp     short loc_164B
.text:00001629 ; ---------------------------------------------------------------------------
.text:00001629
.text:00001629 loc_1629:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+519j
.text:00001629                 mov     eax, [ebp+var_A0]
.text:0000162F                 lea     ecx, [ebp+eax+Str]
.text:00001636                 push    ecx             ; Str
.text:00001637                 call    _strlen
.text:0000163C                 add     esp, 4
.text:0000163F                 add     eax, [ebp+var_A0]
.text:00001645                 mov     [ebp+var_A0], eax
.text:0000164B
.text:0000164B loc_164B:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+533j
.text:0000164B                 jmp     loc_1863
.text:00001650 ; ---------------------------------------------------------------------------
.text:00001650
.text:00001650 loc_1650:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+4A2j
.text:00001650                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+4BDj
.text:00001650                 movzx   edx, word ptr [ebp+var_194.anonymous_0]
.text:00001657                 test    edx, edx
.text:00001659                 jnz     short loc_1697
.text:0000165B                 movzx   eax, [ebp+var_A1]
.text:00001662                 test    eax, eax
.text:00001664                 jnz     short loc_1692
.text:00001666                 mov     ecx, [ebp+var_B0]
.text:0000166C                 push    ecx
.text:0000166D                 mov     edx, [ebp+var_A0]
.text:00001673                 lea     eax, [ebp+edx+Str]
.text:0000167A                 push    eax
.text:0000167B                 call    ?PrintSpacesToString@@YGXPADI@Z ; PrintSpacesToString(char *,uint)
.text:00001680                 mov     ecx, [ebp+var_A0]
.text:00001686                 add     ecx, [ebp+var_B0]
.text:0000168C                 mov     [ebp+var_A0], ecx
.text:00001692
.text:00001692 loc_1692:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+570j
.text:00001692                 jmp     loc_1863
.text:00001697 ; ---------------------------------------------------------------------------
.text:00001697
.text:00001697 loc_1697:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+565j
.text:00001697                 movzx   edx, word ptr [ebp+var_194.anonymous_0]
.text:0000169E                 cmp     edx, 40h ; '@'
.text:000016A1                 jnz     loc_176E
.text:000016A7                 lea     eax, [ebp+var_194.anonymous_0+8]
.text:000016AD                 push    eax             ; lpFileTime
.text:000016AE                 mov     ecx, [ebp+var_A0]
.text:000016B4                 lea     edx, [ebp+ecx+Str]
.text:000016BB                 push    edx             ; char *
.text:000016BC                 call    ?PrintTime@@YGXPADPBU_FILETIME@@@Z ; PrintTime(char *,_FILETIME const *)
.text:000016C1                 movzx   eax, [ebp+var_A1]
.text:000016C8                 test    eax, eax
.text:000016CA                 jz      short loc_16E9
.text:000016CC                 mov     ecx, [ebp+var_A0]
.text:000016D2                 lea     edx, [ebp+ecx+Str]
.text:000016D9                 push    edx             ; Str
.text:000016DA                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:000016DF                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000016E4                 jmp     loc_1769
.text:000016E9 ; ---------------------------------------------------------------------------
.text:000016E9
.text:000016E9 loc_16E9:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+5D6j
.text:000016E9                 mov     eax, [ebp+var_A0]
.text:000016EF                 lea     ecx, [ebp+eax+Str]
.text:000016F6                 push    ecx             ; Str
.text:000016F7                 call    _strlen
.text:000016FC                 add     esp, 4
.text:000016FF                 mov     [ebp+var_1A0], eax
.text:00001705                 mov     edx, [ebp+var_A0]
.text:0000170B                 add     edx, [ebp+var_1A0]
.text:00001711                 mov     [ebp+var_A0], edx
.text:00001717                 mov     eax, [ebp+var_AC]
.text:0000171D                 mov     ecx, [ebp+var_1A0]
.text:00001723                 cmp     ecx, [eax+2Ch]
.text:00001726                 jnb     short loc_1769
.text:00001728                 mov     edx, [ebp+var_AC]
.text:0000172E                 mov     eax, [edx+2Ch]
.text:00001731                 sub     eax, [ebp+var_1A0]
.text:00001737                 mov     [ebp+var_1A0], eax
.text:0000173D                 mov     ecx, [ebp+var_1A0]
.text:00001743                 push    ecx
.text:00001744                 mov     edx, [ebp+var_A0]
.text:0000174A                 lea     eax, [ebp+edx+Str]
.text:00001751                 push    eax
.text:00001752                 call    ?PrintSpacesToString@@YGXPADI@Z ; PrintSpacesToString(char *,uint)
.text:00001757                 mov     ecx, [ebp+var_A0]
.text:0000175D                 add     ecx, [ebp+var_1A0]
.text:00001763                 mov     [ebp+var_A0], ecx
.text:00001769
.text:00001769 loc_1769:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+5F0j
.text:00001769                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+632j
.text:00001769                 jmp     loc_1863
.text:0000176E ; ---------------------------------------------------------------------------
.text:0000176E
.text:0000176E loc_176E:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+5ADj
.text:0000176E                 movzx   edx, word ptr [ebp+var_194.anonymous_0]
.text:00001775                 cmp     edx, 8
.text:00001778                 jnz     short loc_17DA
.text:0000177A                 mov     eax, dword ptr [ebp+var_194.anonymous_0+8]
.text:00001780                 push    eax             ; wchar_t *
.text:00001781                 mov     ecx, [ebp+var_14]
.text:00001784                 add     ecx, 2Ch ; ','  ; this
.text:00001787                 call    ?SetFromBstr@UString@@QAEXPA_W@Z ; UString::SetFromBstr(wchar_t *)
.text:0000178C                 movzx   ecx, [ebp+var_A1]
.text:00001793                 test    ecx, ecx
.text:00001795                 jz      short loc_17B1
.text:00001797                 mov     edx, [ebp+var_14]
.text:0000179A                 add     edx, 20h ; ' '
.text:0000179D                 push    edx             ; struct AString *
.text:0000179E                 mov     eax, [ebp+var_14]
.text:000017A1                 add     eax, 2Ch ; ','
.text:000017A4                 push    eax             ; struct UString *
.text:000017A5                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; this
.text:000017AA                 call    ?PrintUString@CStdOutStream@@QAEXABVUString@@AAVAString@@@Z ; CStdOutStream::PrintUString(UString const &,AString &)
.text:000017AF                 jmp     short loc_17D5
.text:000017B1 ; ---------------------------------------------------------------------------
.text:000017B1
.text:000017B1 loc_17B1:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+6A1j
.text:000017B1                 mov     ecx, [ebp+var_14]
.text:000017B4                 add     ecx, 20h ; ' '
.text:000017B7                 push    ecx             ; struct AString *
.text:000017B8                 mov     edx, [ebp+var_14]
.text:000017BB                 add     edx, 2Ch ; ','
.text:000017BE                 push    edx             ; UString *
.text:000017BF                 mov     eax, [ebp+var_B0]
.text:000017C5                 push    eax             ; int
.text:000017C6                 mov     ecx, [ebp+var_AC]
.text:000017CC                 mov     edx, [ecx+24h]
.text:000017CF                 push    edx             ; int
.text:000017D0                 call    ?PrintUString@@YGXW4EAdjustment@@IABVUString@@AAVAString@@@Z ; PrintUString(EAdjustment,uint,UString const &,AString &)
.text:000017D5
.text:000017D5 loc_17D5:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+6BBj
.text:000017D5                 jmp     loc_1863
.text:000017DA ; ---------------------------------------------------------------------------
.text:000017DA
.text:000017DA loc_17DA:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+684j
.text:000017DA                 push    1               ; bool
.text:000017DC                 mov     eax, [ebp+var_AC]
.text:000017E2                 mov     ecx, [eax]
.text:000017E4                 push    ecx             ; unsigned __int32
.text:000017E5                 lea     edx, [ebp+var_194]
.text:000017EB                 push    edx             ; struct tagPROPVARIANT *
.text:000017EC                 lea     eax, [ebp+var_1E4]
.text:000017F2                 push    eax             ; char *
.text:000017F3                 call    ?ConvertPropertyToShortString@@YGXPADABUtagPROPVARIANT@@K_N@Z ; ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)
.text:000017F8                 movzx   ecx, [ebp+var_A1]
.text:000017FF                 test    ecx, ecx
.text:00001801                 jz      short loc_1816
.text:00001803                 lea     edx, [ebp+var_1E4]
.text:00001809                 push    edx             ; Str
.text:0000180A                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:0000180F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001814                 jmp     short loc_1863
.text:00001816 ; ---------------------------------------------------------------------------
.text:00001816
.text:00001816 loc_1816:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+70Dj
.text:00001816                 lea     eax, [ebp+var_1E4]
.text:0000181C                 push    eax             ; Str
.text:0000181D                 mov     ecx, [ebp+var_B0]
.text:00001823                 push    ecx             ; int
.text:00001824                 mov     edx, [ebp+var_AC]
.text:0000182A                 mov     eax, [edx+24h]
.text:0000182D                 push    eax             ; int
.text:0000182E                 mov     ecx, [ebp+var_A0]
.text:00001834                 lea     edx, [ebp+ecx+Str]
.text:0000183B                 push    edx             ; Dst
.text:0000183C                 call    ?PrintStringToString@@YGXPADW4EAdjustment@@IPBD@Z ; PrintStringToString(char *,EAdjustment,uint,char const *)
.text:00001841                 mov     eax, [ebp+var_A0]
.text:00001847                 lea     ecx, [ebp+eax+Str]
.text:0000184E                 push    ecx             ; Str
.text:0000184F                 call    _strlen
.text:00001854                 add     esp, 4
.text:00001857                 add     eax, [ebp+var_A0]
.text:0000185D                 mov     [ebp+var_A0], eax
.text:00001863
.text:00001863 loc_1863:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &):loc_164Bj
.text:00001863                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &):loc_1692j ...
.text:00001863                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000186A                 lea     ecx, [ebp+var_194] ; this
.text:00001870                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001875
.text:00001875 loc_1875:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &):loc_1467j
.text:00001875                 movzx   edx, [ebp+var_A1]
.text:0000187C                 test    edx, edx
.text:0000187E                 jz      short loc_188F
.text:00001880                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001885                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:0000188A                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000188F
.text:0000188F loc_188F:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+78Aj
.text:0000188F                 jmp     loc_115A
.text:00001894 ; ---------------------------------------------------------------------------
.text:00001894
.text:00001894 loc_1894:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+83j
.text:00001894                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001899                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:0000189E                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000018A3                 xor     eax, eax
.text:000018A5
.text:000018A5 loc_18A5:                               ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+216j
.text:000018A5                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+248j ...
.text:000018A5                 push    edx
.text:000018A6                 mov     ecx, ebp
.text:000018A8                 push    eax
.text:000018A9                 lea     edx, $LN70
.text:000018AF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000018B4                 pop     eax
.text:000018B5                 pop     edx
.text:000018B6                 mov     ecx, [ebp+var_C]
.text:000018B9                 mov     large fs:0, ecx
.text:000018C0                 pop     ecx
.text:000018C1                 pop     edi
.text:000018C2                 pop     esi
.text:000018C3                 mov     ecx, [ebp+var_10]
.text:000018C6                 xor     ecx, ebp
.text:000018C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000018CD                 add     esp, 1FCh
.text:000018D3                 cmp     ebp, esp
.text:000018D5                 call    __RTC_CheckEsp
.text:000018DA                 mov     esp, ebp
.text:000018DC                 pop     ebp
.text:000018DD                 retn    8
.text:000018DD ?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z endp
.text:000018DD
.text:000018DD ; ---------------------------------------------------------------------------
.text:000018E0 $LN70           dd 8                    ; DATA XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+7B5o
.text:000018E4                 dd offset $LN69
.text:000018E8 $LN69           dd 0FFFFFF68h, 80h      ; DATA XREF: .text:000018E4o
.text:000018F0                 dd offset $LN60         ; "temp"
.text:000018F4                 dd 0FFFFFF48h, 4
.text:000018FC                 dd offset $LN61         ; "data"
.text:00001900                 dd 0FFFFFF3Ch, 4
.text:00001908                 dd offset $LN62         ; "dataSize"
.text:0000190C                 dd 0FFFFFF30h, 4
.text:00001914                 dd offset $LN63         ; "propType"
.text:00001918                 dd 0FFFFFF14h, 0Ch
.text:00001920                 dd offset $LN64         ; "s"
.text:00001924                 dd 0FFFFFE84h, 84h
.text:0000192C                 dd offset $LN65         ; "hexStr"
.text:00001930                 dd 0FFFFFE6Ch, 10h
.text:00001938                 dd offset $LN66         ; "prop"
.text:0000193C                 dd 0FFFFFE1Ch, 40h
.text:00001944                 dd offset $LN67
.text:00001948 $LN67           db 73h, 0               ; DATA XREF: .text:00001944o
.text:0000194A $LN66           db 'prop',0             ; DATA XREF: .text:00001938o
.text:0000194F $LN65           db 'hexStr',0           ; DATA XREF: .text:0000192Co
.text:00001956 $LN64           db 's',0                ; DATA XREF: .text:00001920o
.text:00001958 $LN63           db 'propType',0         ; DATA XREF: .text:00001914o
.text:00001961 $LN62           db 'dataSize',0         ; DATA XREF: .text:00001908o
.text:0000196A $LN61           db 'data',0             ; DATA XREF: .text:000018FCo
.text:0000196F $LN60           db 'temp',0             ; DATA XREF: .text:000018F0o
.text:00001974
.text:00001974 ; =============== S U B R O U T I N E =======================================
.text:00001974
.text:00001974 ; Attributes: bp-based frame
.text:00001974
.text:00001974 ; int __stdcall GetAttribString(unsigned int, char, char, char *)
.text:00001974 ?GetAttribString@@YGXI_N0PAD@Z proc near
.text:00001974                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+50Bp
.text:00001974
.text:00001974 arg_0           = dword ptr  8
.text:00001974 arg_4           = byte ptr  0Ch
.text:00001974 arg_8           = byte ptr  10h
.text:00001974 arg_C           = dword ptr  14h
.text:00001974
.text:00001974                 push    ebp
.text:00001975                 mov     ebp, esp
.text:00001977                 movzx   eax, [ebp+arg_4]
.text:0000197B                 test    eax, eax
.text:0000197D                 jz      short loc_1988
.text:0000197F                 mov     ecx, [ebp+arg_0]
.text:00001982                 or      ecx, 10h
.text:00001985                 mov     [ebp+arg_0], ecx
.text:00001988
.text:00001988 loc_1988:                               ; CODE XREF: GetAttribString(uint,bool,bool,char *)+9j
.text:00001988                 movzx   edx, [ebp+arg_8]
.text:0000198C                 test    edx, edx
.text:0000198E                 jz      short loc_199F
.text:00001990                 mov     eax, [ebp+arg_0]
.text:00001993                 push    eax             ; unsigned int
.text:00001994                 mov     ecx, [ebp+arg_C]
.text:00001997                 push    ecx             ; char *
.text:00001998                 call    ?ConvertWinAttribToString@@YGXPADI@Z ; ConvertWinAttribToString(char *,uint)
.text:0000199D                 jmp     short loc_1A11
.text:0000199F ; ---------------------------------------------------------------------------
.text:0000199F
.text:0000199F loc_199F:                               ; CODE XREF: GetAttribString(uint,bool,bool,char *)+1Aj
.text:0000199F                 mov     edx, [ebp+arg_0]
.text:000019A2                 and     edx, 10h
.text:000019A5                 neg     edx
.text:000019A7                 sbb     dl, dl
.text:000019A9                 and     dl, 16h
.text:000019AC                 add     dl, 2Eh ; '.'
.text:000019AF                 mov     eax, [ebp+arg_C]
.text:000019B2                 mov     [eax], dl
.text:000019B4                 mov     ecx, [ebp+arg_0]
.text:000019B7                 and     ecx, 1
.text:000019BA                 neg     ecx
.text:000019BC                 sbb     cl, cl
.text:000019BE                 and     cl, 24h
.text:000019C1                 add     cl, 2Eh ; '.'
.text:000019C4                 mov     edx, [ebp+arg_C]
.text:000019C7                 mov     [edx+1], cl
.text:000019CA                 mov     eax, [ebp+arg_0]
.text:000019CD                 and     eax, 2
.text:000019D0                 neg     eax
.text:000019D2                 sbb     al, al
.text:000019D4                 and     al, 1Ah
.text:000019D6                 add     al, 2Eh ; '.'
.text:000019D8                 mov     ecx, [ebp+arg_C]
.text:000019DB                 mov     [ecx+2], al
.text:000019DE                 mov     edx, [ebp+arg_0]
.text:000019E1                 and     edx, 4
.text:000019E4                 neg     edx
.text:000019E6                 sbb     dl, dl
.text:000019E8                 and     dl, 25h
.text:000019EB                 add     dl, 2Eh ; '.'
.text:000019EE                 mov     eax, [ebp+arg_C]
.text:000019F1                 mov     [eax+3], dl
.text:000019F4                 mov     ecx, [ebp+arg_0]
.text:000019F7                 and     ecx, 20h
.text:000019FA                 neg     ecx
.text:000019FC                 sbb     cl, cl
.text:000019FE                 and     cl, 13h
.text:00001A01                 add     cl, 2Eh ; '.'
.text:00001A04                 mov     edx, [ebp+arg_C]
.text:00001A07                 mov     [edx+4], cl
.text:00001A0A                 mov     eax, [ebp+arg_C]
.text:00001A0D                 mov     byte ptr [eax+5], 0
.text:00001A11
.text:00001A11 loc_1A11:                               ; CODE XREF: GetAttribString(uint,bool,bool,char *)+29j
.text:00001A11                 cmp     ebp, esp
.text:00001A13                 call    __RTC_CheckEsp
.text:00001A18                 pop     ebp
.text:00001A19                 retn    10h
.text:00001A19 ?GetAttribString@@YGXI_N0PAD@Z endp
.text:00001A19
.text:00001A19 ; ---------------------------------------------------------------------------
.text:00001A1C                 db 8 dup(0CCh)
.text:00001A24
.text:00001A24 ; =============== S U B R O U T I N E =======================================
.text:00001A24
.text:00001A24 ; Attributes: bp-based frame
.text:00001A24
.text:00001A24 ; void __stdcall PrintSpacesToString(char *, unsigned int)
.text:00001A24 ?PrintSpacesToString@@YGXPADI@Z proc near
.text:00001A24                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+C1p
.text:00001A24                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+587p ...
.text:00001A24
.text:00001A24 var_4           = dword ptr -4
.text:00001A24 arg_0           = dword ptr  8
.text:00001A24 arg_4           = dword ptr  0Ch
.text:00001A24
.text:00001A24                 push    ebp
.text:00001A25                 mov     ebp, esp
.text:00001A27                 push    ecx
.text:00001A28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A2F                 mov     [ebp+var_4], 0
.text:00001A36                 jmp     short loc_1A41
.text:00001A38 ; ---------------------------------------------------------------------------
.text:00001A38
.text:00001A38 loc_1A38:                               ; CODE XREF: PrintSpacesToString(char *,uint)+2Ej
.text:00001A38                 mov     eax, [ebp+var_4]
.text:00001A3B                 add     eax, 1
.text:00001A3E                 mov     [ebp+var_4], eax
.text:00001A41
.text:00001A41 loc_1A41:                               ; CODE XREF: PrintSpacesToString(char *,uint)+12j
.text:00001A41                 mov     ecx, [ebp+var_4]
.text:00001A44                 cmp     ecx, [ebp+arg_4]
.text:00001A47                 jnb     short loc_1A54
.text:00001A49                 mov     edx, [ebp+arg_0]
.text:00001A4C                 add     edx, [ebp+var_4]
.text:00001A4F                 mov     byte ptr [edx], 20h ; ' '
.text:00001A52                 jmp     short loc_1A38
.text:00001A54 ; ---------------------------------------------------------------------------
.text:00001A54
.text:00001A54 loc_1A54:                               ; CODE XREF: PrintSpacesToString(char *,uint)+23j
.text:00001A54                 mov     eax, [ebp+arg_0]
.text:00001A57                 add     eax, [ebp+var_4]
.text:00001A5A                 mov     byte ptr [eax], 0
.text:00001A5D                 mov     esp, ebp
.text:00001A5F                 pop     ebp
.text:00001A60                 retn    8
.text:00001A60 ?PrintSpacesToString@@YGXPADI@Z endp
.text:00001A60
.text:00001A60 ; ---------------------------------------------------------------------------
.text:00001A63                 align 4
.text:00001A64
.text:00001A64 ; =============== S U B R O U T I N E =======================================
.text:00001A64
.text:00001A64 ; Attributes: bp-based frame
.text:00001A64
.text:00001A64 ; int __stdcall PrintUString(int, int, UString *, struct AString *)
.text:00001A64 ?PrintUString@@YGXW4EAdjustment@@IABVUString@@AAVAString@@@Z proc near
.text:00001A64                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+6DCp
.text:00001A64
.text:00001A64 var_C           = dword ptr -0Ch
.text:00001A64 var_8           = dword ptr -8
.text:00001A64 var_4           = dword ptr -4
.text:00001A64 arg_0           = dword ptr  8
.text:00001A64 arg_4           = dword ptr  0Ch
.text:00001A64 arg_8           = dword ptr  10h
.text:00001A64 arg_C           = dword ptr  14h
.text:00001A64
.text:00001A64                 push    ebp
.text:00001A65                 mov     ebp, esp
.text:00001A67                 sub     esp, 0Ch
.text:00001A6A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001A71                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001A78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A7F                 mov     [ebp+var_4], 0
.text:00001A86                 mov     ecx, [ebp+arg_8] ; this
.text:00001A89                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00001A8E                 cmp     [ebp+arg_4], eax
.text:00001A91                 jbe     short loc_1AEF
.text:00001A93                 mov     ecx, [ebp+arg_8] ; this
.text:00001A96                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00001A9B                 mov     ecx, [ebp+arg_4]
.text:00001A9E                 sub     ecx, eax
.text:00001AA0                 mov     [ebp+var_4], ecx
.text:00001AA3                 mov     [ebp+var_8], 0
.text:00001AAA                 mov     edx, [ebp+arg_0]
.text:00001AAD                 mov     [ebp+var_C], edx
.text:00001AB0                 cmp     [ebp+var_C], 0
.text:00001AB4                 jz      short loc_1AC4
.text:00001AB6                 cmp     [ebp+var_C], 1
.text:00001ABA                 jz      short loc_1ACD
.text:00001ABC                 cmp     [ebp+var_C], 2
.text:00001AC0                 jz      short loc_1AD7
.text:00001AC2                 jmp     short loc_1ADD
.text:00001AC4 ; ---------------------------------------------------------------------------
.text:00001AC4
.text:00001AC4 loc_1AC4:                               ; CODE XREF: PrintUString(EAdjustment,uint,UString const &,AString &)+50j
.text:00001AC4                 mov     [ebp+var_8], 0
.text:00001ACB                 jmp     short loc_1ADD
.text:00001ACD ; ---------------------------------------------------------------------------
.text:00001ACD
.text:00001ACD loc_1ACD:                               ; CODE XREF: PrintUString(EAdjustment,uint,UString const &,AString &)+56j
.text:00001ACD                 mov     eax, [ebp+var_4]
.text:00001AD0                 shr     eax, 1
.text:00001AD2                 mov     [ebp+var_8], eax
.text:00001AD5                 jmp     short loc_1ADD
.text:00001AD7 ; ---------------------------------------------------------------------------
.text:00001AD7
.text:00001AD7 loc_1AD7:                               ; CODE XREF: PrintUString(EAdjustment,uint,UString const &,AString &)+5Cj
.text:00001AD7                 mov     ecx, [ebp+var_4]
.text:00001ADA                 mov     [ebp+var_8], ecx
.text:00001ADD
.text:00001ADD loc_1ADD:                               ; CODE XREF: PrintUString(EAdjustment,uint,UString const &,AString &)+5Ej
.text:00001ADD                                         ; PrintUString(EAdjustment,uint,UString const &,AString &)+67j ...
.text:00001ADD                 mov     edx, [ebp+var_8]
.text:00001AE0                 push    edx
.text:00001AE1                 call    ?PrintSpaces@@YGXI@Z ; PrintSpaces(uint)
.text:00001AE6                 mov     eax, [ebp+var_4]
.text:00001AE9                 sub     eax, [ebp+var_8]
.text:00001AEC                 mov     [ebp+var_4], eax
.text:00001AEF
.text:00001AEF loc_1AEF:                               ; CODE XREF: PrintUString(EAdjustment,uint,UString const &,AString &)+2Dj
.text:00001AEF                 mov     ecx, [ebp+arg_C]
.text:00001AF2                 push    ecx             ; struct AString *
.text:00001AF3                 mov     edx, [ebp+arg_8]
.text:00001AF6                 push    edx             ; struct UString *
.text:00001AF7                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; this
.text:00001AFC                 call    ?PrintUString@CStdOutStream@@QAEXABVUString@@AAVAString@@@Z ; CStdOutStream::PrintUString(UString const &,AString &)
.text:00001B01                 mov     eax, [ebp+var_4]
.text:00001B04                 push    eax
.text:00001B05                 call    ?PrintSpaces@@YGXI@Z ; PrintSpaces(uint)
.text:00001B0A                 add     esp, 0Ch
.text:00001B0D                 cmp     ebp, esp
.text:00001B0F                 call    __RTC_CheckEsp
.text:00001B14                 mov     esp, ebp
.text:00001B16                 pop     ebp
.text:00001B17                 retn    10h
.text:00001B17 ?PrintUString@@YGXW4EAdjustment@@IABVUString@@AAVAString@@@Z endp
.text:00001B17
.text:00001B17 ; ---------------------------------------------------------------------------
.text:00001B1A                 db 0Ah dup(0CCh)
.text:00001B24
.text:00001B24 ; =============== S U B R O U T I N E =======================================
.text:00001B24
.text:00001B24 ; Attributes: bp-based frame
.text:00001B24
.text:00001B24 ; int __stdcall PrintStringToString(void *Dst, int, int, char *Str)
.text:00001B24 ?PrintStringToString@@YGXPADW4EAdjustment@@IPBD@Z proc near
.text:00001B24                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+748p
.text:00001B24
.text:00001B24 var_10          = dword ptr -10h
.text:00001B24 var_C           = dword ptr -0Ch
.text:00001B24 Size            = dword ptr -8
.text:00001B24 var_4           = dword ptr -4
.text:00001B24 Dst             = dword ptr  8
.text:00001B24 arg_4           = dword ptr  0Ch
.text:00001B24 arg_8           = dword ptr  10h
.text:00001B24 Str             = dword ptr  14h
.text:00001B24
.text:00001B24                 push    ebp
.text:00001B25                 mov     ebp, esp
.text:00001B27                 sub     esp, 10h
.text:00001B2A                 mov     eax, 0CCCCCCCCh
.text:00001B2F                 mov     [ebp+var_10], eax
.text:00001B32                 mov     [ebp+var_C], eax
.text:00001B35                 mov     [ebp+Size], eax
.text:00001B38                 mov     [ebp+var_4], eax
.text:00001B3B                 mov     [ebp+var_4], 0
.text:00001B42                 mov     eax, [ebp+Str]
.text:00001B45                 push    eax             ; Str
.text:00001B46                 call    _strlen
.text:00001B4B                 add     esp, 4
.text:00001B4E                 mov     [ebp+Size], eax
.text:00001B51                 mov     ecx, [ebp+arg_8]
.text:00001B54                 cmp     ecx, [ebp+Size]
.text:00001B57                 jbe     short loc_1BBB
.text:00001B59                 mov     edx, [ebp+arg_8]
.text:00001B5C                 sub     edx, [ebp+Size]
.text:00001B5F                 mov     [ebp+var_4], edx
.text:00001B62                 mov     [ebp+var_C], 0
.text:00001B69                 mov     eax, [ebp+arg_4]
.text:00001B6C                 mov     [ebp+var_10], eax
.text:00001B6F                 cmp     [ebp+var_10], 0
.text:00001B73                 jz      short loc_1B83
.text:00001B75                 cmp     [ebp+var_10], 1
.text:00001B79                 jz      short loc_1B8C
.text:00001B7B                 cmp     [ebp+var_10], 2
.text:00001B7F                 jz      short loc_1B96
.text:00001B81                 jmp     short loc_1B9C
.text:00001B83 ; ---------------------------------------------------------------------------
.text:00001B83
.text:00001B83 loc_1B83:                               ; CODE XREF: PrintStringToString(char *,EAdjustment,uint,char const *)+4Fj
.text:00001B83                 mov     [ebp+var_C], 0
.text:00001B8A                 jmp     short loc_1B9C
.text:00001B8C ; ---------------------------------------------------------------------------
.text:00001B8C
.text:00001B8C loc_1B8C:                               ; CODE XREF: PrintStringToString(char *,EAdjustment,uint,char const *)+55j
.text:00001B8C                 mov     ecx, [ebp+var_4]
.text:00001B8F                 shr     ecx, 1
.text:00001B91                 mov     [ebp+var_C], ecx
.text:00001B94                 jmp     short loc_1B9C
.text:00001B96 ; ---------------------------------------------------------------------------
.text:00001B96
.text:00001B96 loc_1B96:                               ; CODE XREF: PrintStringToString(char *,EAdjustment,uint,char const *)+5Bj
.text:00001B96                 mov     edx, [ebp+var_4]
.text:00001B99                 mov     [ebp+var_C], edx
.text:00001B9C
.text:00001B9C loc_1B9C:                               ; CODE XREF: PrintStringToString(char *,EAdjustment,uint,char const *)+5Dj
.text:00001B9C                                         ; PrintStringToString(char *,EAdjustment,uint,char const *)+66j ...
.text:00001B9C                 mov     eax, [ebp+var_C]
.text:00001B9F                 push    eax
.text:00001BA0                 mov     ecx, [ebp+Dst]
.text:00001BA3                 push    ecx
.text:00001BA4                 call    ?PrintSpacesToString@@YGXPADI@Z ; PrintSpacesToString(char *,uint)
.text:00001BA9                 mov     edx, [ebp+Dst]
.text:00001BAC                 add     edx, [ebp+var_C]
.text:00001BAF                 mov     [ebp+Dst], edx
.text:00001BB2                 mov     eax, [ebp+var_4]
.text:00001BB5                 sub     eax, [ebp+var_C]
.text:00001BB8                 mov     [ebp+var_4], eax
.text:00001BBB
.text:00001BBB loc_1BBB:                               ; CODE XREF: PrintStringToString(char *,EAdjustment,uint,char const *)+33j
.text:00001BBB                 mov     ecx, [ebp+Size]
.text:00001BBE                 push    ecx             ; Size
.text:00001BBF                 mov     edx, [ebp+Str]
.text:00001BC2                 push    edx             ; Src
.text:00001BC3                 mov     eax, [ebp+Dst]
.text:00001BC6                 push    eax             ; Dst
.text:00001BC7                 call    _memcpy
.text:00001BCC                 add     esp, 0Ch
.text:00001BCF                 mov     ecx, [ebp+Dst]
.text:00001BD2                 add     ecx, [ebp+Size]
.text:00001BD5                 mov     [ebp+Dst], ecx
.text:00001BD8                 mov     edx, [ebp+var_4]
.text:00001BDB                 push    edx
.text:00001BDC                 mov     eax, [ebp+Dst]
.text:00001BDF                 push    eax
.text:00001BE0                 call    ?PrintSpacesToString@@YGXPADI@Z ; PrintSpacesToString(char *,uint)
.text:00001BE5                 add     esp, 10h
.text:00001BE8                 cmp     ebp, esp
.text:00001BEA                 call    __RTC_CheckEsp
.text:00001BEF                 mov     esp, ebp
.text:00001BF1                 pop     ebp
.text:00001BF2                 retn    10h
.text:00001BF2 ?PrintStringToString@@YGXPADW4EAdjustment@@IPBD@Z endp
.text:00001BF2
.text:00001BF2 ; ---------------------------------------------------------------------------
.text:00001BF5                 db 0Fh dup(0CCh)
.text:00001C04
.text:00001C04 ; =============== S U B R O U T I N E =======================================
.text:00001C04
.text:00001C04 ; Attributes: bp-based frame
.text:00001C04
.text:00001C04 ; int __stdcall PrintTime(char *, FILETIME *lpFileTime)
.text:00001C04 ?PrintTime@@YGXPADPBU_FILETIME@@@Z proc near
.text:00001C04                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+5C8p
.text:00001C04                                         ; CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+E8p
.text:00001C04
.text:00001C04 var_14          = dword ptr -14h
.text:00001C04 var_10          = dword ptr -10h
.text:00001C04 LocalFileTime   = _FILETIME ptr -0Ch
.text:00001C04 var_4           = dword ptr -4
.text:00001C04 arg_0           = dword ptr  8
.text:00001C04 lpFileTime      = dword ptr  0Ch
.text:00001C04
.text:00001C04                 push    ebp
.text:00001C05                 mov     ebp, esp
.text:00001C07                 sub     esp, 14h
.text:00001C0A                 push    esi
.text:00001C0B                 mov     eax, 0CCCCCCCCh
.text:00001C10                 mov     [ebp+var_14], eax
.text:00001C13                 mov     [ebp+var_10], eax
.text:00001C16                 mov     [ebp+LocalFileTime.dwLowDateTime], eax
.text:00001C19                 mov     [ebp+LocalFileTime.dwHighDateTime], eax
.text:00001C1C                 mov     [ebp+var_4], eax
.text:00001C1F                 mov     eax, [ebp+arg_0]
.text:00001C22                 mov     byte ptr [eax], 0
.text:00001C25                 mov     ecx, [ebp+lpFileTime]
.text:00001C28                 cmp     dword ptr [ecx], 0
.text:00001C2B                 jnz     short loc_1C38
.text:00001C2D                 mov     edx, [ebp+lpFileTime]
.text:00001C30                 cmp     dword ptr [edx+4], 0
.text:00001C34                 jnz     short loc_1C38
.text:00001C36                 jmp     short loc_1C79
.text:00001C38 ; ---------------------------------------------------------------------------
.text:00001C38
.text:00001C38 loc_1C38:                               ; CODE XREF: PrintTime(char *,_FILETIME const *)+27j
.text:00001C38                                         ; PrintTime(char *,_FILETIME const *)+30j
.text:00001C38                 mov     esi, esp
.text:00001C3A                 lea     eax, [ebp+LocalFileTime]
.text:00001C3D                 push    eax             ; lpLocalFileTime
.text:00001C3E                 mov     ecx, [ebp+lpFileTime]
.text:00001C41                 push    ecx             ; lpFileTime
.text:00001C42                 call    dword ptr ds:__imp__FileTimeToLocalFileTime@8 ; FileTimeToLocalFileTime(x,x)
.text:00001C48                 cmp     esi, esp
.text:00001C4A                 call    __RTC_CheckEsp
.text:00001C4F                 test    eax, eax
.text:00001C51                 jnz     short loc_1C68
.text:00001C53                 mov     [ebp+var_14], 133067Bh
.text:00001C5A                 push    offset __TI1H
.text:00001C5F                 lea     edx, [ebp+var_14]
.text:00001C62                 push    edx
.text:00001C63                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00001C68 ; ---------------------------------------------------------------------------
.text:00001C68
.text:00001C68 loc_1C68:                               ; CODE XREF: PrintTime(char *,_FILETIME const *)+4Dj
.text:00001C68                 push    1               ; bool
.text:00001C6A                 push    1               ; bool
.text:00001C6C                 mov     eax, [ebp+arg_0]
.text:00001C6F                 push    eax             ; char *
.text:00001C70                 lea     ecx, [ebp+LocalFileTime]
.text:00001C73                 push    ecx             ; struct _FILETIME *
.text:00001C74                 call    ?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z ; ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)
.text:00001C79
.text:00001C79 loc_1C79:                               ; CODE XREF: PrintTime(char *,_FILETIME const *)+32j
.text:00001C79                 push    edx
.text:00001C7A                 mov     ecx, ebp
.text:00001C7C                 push    eax
.text:00001C7D                 lea     edx, $LN7_0
.text:00001C83                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001C88                 pop     eax
.text:00001C89                 pop     edx
.text:00001C8A                 pop     esi
.text:00001C8B                 add     esp, 14h
.text:00001C8E                 cmp     ebp, esp
.text:00001C90                 call    __RTC_CheckEsp
.text:00001C95                 mov     esp, ebp
.text:00001C97                 pop     ebp
.text:00001C98                 retn    8
.text:00001C98 ?PrintTime@@YGXPADPBU_FILETIME@@@Z endp
.text:00001C98
.text:00001C98 ; ---------------------------------------------------------------------------
.text:00001C9B                 align 4
.text:00001C9C $LN7_0          dd 1                    ; DATA XREF: PrintTime(char *,_FILETIME const *)+79o
.text:00001CA0                 dd offset $LN6_0
.text:00001CA4 $LN6_0          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00001CA0o
.text:00001CAC                 dd offset $LN5          ; "locTime"
.text:00001CB0 $LN5            db 'locTime',0          ; DATA XREF: .text:00001CACo
.text:00001CB8                 db 0Ch dup(0CCh)
.text:00001CC4
.text:00001CC4 ; =============== S U B R O U T I N E =======================================
.text:00001CC4
.text:00001CC4 ; Attributes: bp-based frame
.text:00001CC4
.text:00001CC4 ; void __stdcall HexToString(char *, unsigned char const *, unsigned int)
.text:00001CC4 ?HexToString@@YGXPADPBEI@Z proc near    ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+35Dp
.text:00001CC4
.text:00001CC4 var_8           = dword ptr -8
.text:00001CC4 var_4           = dword ptr -4
.text:00001CC4 arg_0           = dword ptr  8
.text:00001CC4 arg_4           = dword ptr  0Ch
.text:00001CC4 arg_8           = dword ptr  10h
.text:00001CC4
.text:00001CC4                 push    ebp
.text:00001CC5                 mov     ebp, esp
.text:00001CC7                 sub     esp, 8
.text:00001CCA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001CD1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001CD8                 mov     [ebp+var_4], 0
.text:00001CDF                 jmp     short loc_1CEA
.text:00001CE1 ; ---------------------------------------------------------------------------
.text:00001CE1
.text:00001CE1 loc_1CE1:                               ; CODE XREF: HexToString(char *,uchar const *,uint)+6Aj
.text:00001CE1                 mov     eax, [ebp+var_4]
.text:00001CE4                 add     eax, 1
.text:00001CE7                 mov     [ebp+var_4], eax
.text:00001CEA
.text:00001CEA loc_1CEA:                               ; CODE XREF: HexToString(char *,uchar const *,uint)+1Bj
.text:00001CEA                 mov     ecx, [ebp+var_4]
.text:00001CED                 cmp     ecx, [ebp+arg_8]
.text:00001CF0                 jnb     short loc_1D30
.text:00001CF2                 mov     edx, [ebp+arg_4]
.text:00001CF5                 add     edx, [ebp+var_4]
.text:00001CF8                 mov     al, [edx]
.text:00001CFA                 mov     byte ptr [ebp+var_8+3], al
.text:00001CFD                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00001D01                 sar     ecx, 4
.text:00001D04                 and     ecx, 0Fh
.text:00001D07                 push    ecx
.text:00001D08                 call    ?GetHex@@YGDE@Z ; GetHex(uchar)
.text:00001D0D                 mov     edx, [ebp+arg_0]
.text:00001D10                 mov     [edx], al
.text:00001D12                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00001D16                 and     eax, 0Fh
.text:00001D19                 push    eax
.text:00001D1A                 call    ?GetHex@@YGDE@Z ; GetHex(uchar)
.text:00001D1F                 mov     ecx, [ebp+arg_0]
.text:00001D22                 mov     [ecx+1], al
.text:00001D25                 mov     edx, [ebp+arg_0]
.text:00001D28                 add     edx, 2
.text:00001D2B                 mov     [ebp+arg_0], edx
.text:00001D2E                 jmp     short loc_1CE1
.text:00001D30 ; ---------------------------------------------------------------------------
.text:00001D30
.text:00001D30 loc_1D30:                               ; CODE XREF: HexToString(char *,uchar const *,uint)+2Cj
.text:00001D30                 mov     eax, [ebp+arg_0]
.text:00001D33                 mov     byte ptr [eax], 0
.text:00001D36                 add     esp, 8
.text:00001D39                 cmp     ebp, esp
.text:00001D3B                 call    __RTC_CheckEsp
.text:00001D40                 mov     esp, ebp
.text:00001D42                 pop     ebp
.text:00001D43                 retn    0Ch
.text:00001D43 ?HexToString@@YGXPADPBEI@Z endp
.text:00001D43
.text:00001D43 ; ---------------------------------------------------------------------------
.text:00001D46                 db 0Eh dup(0CCh)
.text:00001D54
.text:00001D54 ; =============== S U B R O U T I N E =======================================
.text:00001D54
.text:00001D54 ; Attributes: bp-based frame
.text:00001D54
.text:00001D54 ; char __stdcall GetHex(unsigned char)
.text:00001D54 ?GetHex@@YGDE@Z proc near               ; CODE XREF: HexToString(char *,uchar const *,uint)+44p
.text:00001D54                                         ; HexToString(char *,uchar const *,uint)+56p
.text:00001D54
.text:00001D54 var_4           = dword ptr -4
.text:00001D54 arg_0           = byte ptr  8
.text:00001D54
.text:00001D54                 push    ebp
.text:00001D55                 mov     ebp, esp
.text:00001D57                 push    ecx
.text:00001D58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D5F                 movzx   eax, [ebp+arg_0]
.text:00001D63                 cmp     eax, 0Ah
.text:00001D66                 jge     short loc_1D74
.text:00001D68                 movzx   ecx, [ebp+arg_0]
.text:00001D6C                 add     ecx, 30h ; '0'
.text:00001D6F                 mov     [ebp+var_4], ecx
.text:00001D72                 jmp     short loc_1D7E
.text:00001D74 ; ---------------------------------------------------------------------------
.text:00001D74
.text:00001D74 loc_1D74:                               ; CODE XREF: GetHex(uchar)+12j
.text:00001D74                 movzx   edx, [ebp+arg_0]
.text:00001D78                 add     edx, 37h ; '7'
.text:00001D7B                 mov     [ebp+var_4], edx
.text:00001D7E
.text:00001D7E loc_1D7E:                               ; CODE XREF: GetHex(uchar)+1Ej
.text:00001D7E                 mov     al, byte ptr [ebp+var_4]
.text:00001D81                 mov     esp, ebp
.text:00001D83                 pop     ebp
.text:00001D84                 retn    4
.text:00001D84 ?GetHex@@YGDE@Z endp
.text:00001D84
.text:00001D84 ; ---------------------------------------------------------------------------
.text:00001D87                 db 0Dh dup(0CCh)
.text:00001D94
.text:00001D94 ; =============== S U B R O U T I N E =======================================
.text:00001D94
.text:00001D94 ; Attributes: bp-based frame
.text:00001D94
.text:00001D94 ; void __thiscall CFieldPrinter::PrintSum(CFieldPrinter *this, const struct CListStat *, unsigned __int64, const char *)
.text:00001D94                 public ?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z
.text:00001D94 ?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z proc near
.text:00001D94                                         ; CODE XREF: CFieldPrinter::PrintSum(CListStat2 const &)+34p
.text:00001D94                                         ; CFieldPrinter::PrintSum(CListStat2 const &)+61p ...
.text:00001D94
.text:00001D94 var_78          = byte ptr -78h
.text:00001D94 var_74          = byte ptr -74h
.text:00001D94 Str             = byte ptr -60h
.text:00001D94 var_1C          = dword ptr -1Ch
.text:00001D94 var_18          = dword ptr -18h
.text:00001D94 var_14          = dword ptr -14h
.text:00001D94 var_10          = dword ptr -10h
.text:00001D94 var_C           = dword ptr -0Ch
.text:00001D94 var_4           = dword ptr -4
.text:00001D94 arg_0           = dword ptr  8
.text:00001D94 arg_4           = qword ptr  0Ch
.text:00001D94 arg_C           = dword ptr  14h
.text:00001D94
.text:00001D94                 push    ebp
.text:00001D95                 mov     ebp, esp
.text:00001D97                 push    0FFFFFFFFh
.text:00001D99                 push    offset __ehhandler$?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z
.text:00001D9E                 mov     eax, large fs:0
.text:00001DA4                 push    eax
.text:00001DA5                 sub     esp, 6Ch
.text:00001DA8                 push    edi
.text:00001DA9                 push    ecx
.text:00001DAA                 lea     edi, [ebp+var_78]
.text:00001DAD                 mov     ecx, 1Bh
.text:00001DB2                 mov     eax, 0CCCCCCCCh
.text:00001DB7                 rep stosd
.text:00001DB9                 pop     ecx
.text:00001DBA                 mov     eax, dword ptr ds:___security_cookie
.text:00001DBF                 xor     eax, ebp
.text:00001DC1                 mov     [ebp+var_10], eax
.text:00001DC4                 push    eax
.text:00001DC5                 lea     eax, [ebp+var_C]
.text:00001DC8                 mov     large fs:0, eax
.text:00001DCE                 mov     [ebp+var_14], ecx
.text:00001DD1                 mov     [ebp+var_18], 0
.text:00001DD8                 jmp     short loc_1DE3
.text:00001DDA ; ---------------------------------------------------------------------------
.text:00001DDA
.text:00001DDA loc_1DDA:                               ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *):loc_1F38j
.text:00001DDA                 mov     eax, [ebp+var_18]
.text:00001DDD                 add     eax, 1
.text:00001DE0                 mov     [ebp+var_18], eax
.text:00001DE3
.text:00001DE3 loc_1DE3:                               ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+44j
.text:00001DE3                 mov     ecx, [ebp+var_14]
.text:00001DE6                 call    ?Size@?$CObjectVector@UCFieldInfo@@@@QBEIXZ ; CObjectVector<CFieldInfo>::Size(void)
.text:00001DEB                 cmp     [ebp+var_18], eax
.text:00001DEE                 jnb     loc_1F3D
.text:00001DF4                 mov     ecx, [ebp+var_18]
.text:00001DF7                 push    ecx
.text:00001DF8                 mov     ecx, [ebp+var_14]
.text:00001DFB                 call    ??A?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@I@Z ; CObjectVector<CFieldInfo>::operator[](uint)
.text:00001E00                 mov     [ebp+var_1C], eax
.text:00001E03                 mov     edx, [ebp+var_1C]
.text:00001E06                 mov     eax, [edx+28h]
.text:00001E09                 push    eax
.text:00001E0A                 call    ?PrintSpaces@@YGXI@Z ; PrintSpaces(uint)
.text:00001E0F                 mov     ecx, [ebp+var_1C]
.text:00001E12                 cmp     dword ptr [ecx], 7
.text:00001E15                 jnz     short loc_1E33
.text:00001E17                 mov     edx, [ebp+arg_0]
.text:00001E1A                 push    edx
.text:00001E1B                 mov     eax, [ebp+var_1C]
.text:00001E1E                 mov     ecx, [eax+2Ch]
.text:00001E21                 push    ecx
.text:00001E22                 mov     edx, [ebp+var_1C]
.text:00001E25                 mov     eax, [edx+24h]
.text:00001E28                 push    eax
.text:00001E29                 call    ?PrintNumber@@YGXW4EAdjustment@@IABUCListUInt64Def@@@Z ; PrintNumber(EAdjustment,uint,CListUInt64Def const &)
.text:00001E2E                 jmp     loc_1F38
.text:00001E33 ; ---------------------------------------------------------------------------
.text:00001E33
.text:00001E33 loc_1E33:                               ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+81j
.text:00001E33                 mov     ecx, [ebp+var_1C]
.text:00001E36                 cmp     dword ptr [ecx], 8
.text:00001E39                 jnz     short loc_1E5A
.text:00001E3B                 mov     edx, [ebp+arg_0]
.text:00001E3E                 add     edx, 10h
.text:00001E41                 push    edx
.text:00001E42                 mov     eax, [ebp+var_1C]
.text:00001E45                 mov     ecx, [eax+2Ch]
.text:00001E48                 push    ecx
.text:00001E49                 mov     edx, [ebp+var_1C]
.text:00001E4C                 mov     eax, [edx+24h]
.text:00001E4F                 push    eax
.text:00001E50                 call    ?PrintNumber@@YGXW4EAdjustment@@IABUCListUInt64Def@@@Z ; PrintNumber(EAdjustment,uint,CListUInt64Def const &)
.text:00001E55                 jmp     loc_1F38
.text:00001E5A ; ---------------------------------------------------------------------------
.text:00001E5A
.text:00001E5A loc_1E5A:                               ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+A5j
.text:00001E5A                 mov     ecx, [ebp+var_1C]
.text:00001E5D                 cmp     dword ptr [ecx], 0Ch
.text:00001E60                 jnz     short loc_1E9D
.text:00001E62                 mov     [ebp+Str], 0
.text:00001E66                 mov     edx, [ebp+arg_0]
.text:00001E69                 movzx   eax, byte ptr [edx+28h]
.text:00001E6D                 test    eax, eax
.text:00001E6F                 jz      short loc_1E81
.text:00001E71                 mov     ecx, [ebp+arg_0]
.text:00001E74                 add     ecx, 20h ; ' '
.text:00001E77                 push    ecx             ; lpFileTime
.text:00001E78                 lea     edx, [ebp+Str]
.text:00001E7B                 push    edx             ; char *
.text:00001E7C                 call    ?PrintTime@@YGXPADPBU_FILETIME@@@Z ; PrintTime(char *,_FILETIME const *)
.text:00001E81
.text:00001E81 loc_1E81:                               ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+DBj
.text:00001E81                 lea     eax, [ebp+Str]
.text:00001E84                 push    eax             ; Str
.text:00001E85                 mov     ecx, [ebp+var_1C]
.text:00001E88                 mov     edx, [ecx+2Ch]
.text:00001E8B                 push    edx             ; int
.text:00001E8C                 mov     eax, [ebp+var_1C]
.text:00001E8F                 mov     ecx, [eax+24h]
.text:00001E92                 push    ecx             ; int
.text:00001E93                 call    ?PrintString@@YGXW4EAdjustment@@IPBD@Z ; PrintString(EAdjustment,uint,char const *)
.text:00001E98                 jmp     loc_1F38
.text:00001E9D ; ---------------------------------------------------------------------------
.text:00001E9D
.text:00001E9D loc_1E9D:                               ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+CCj
.text:00001E9D                 mov     edx, [ebp+var_1C]
.text:00001EA0                 cmp     dword ptr [edx], 3
.text:00001EA3                 jnz     short loc_1F20
.text:00001EA5                 lea     ecx, [ebp+var_74]
.text:00001EA8                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00001EAD                 mov     [ebp+var_4], 0
.text:00001EB4                 mov     eax, [ebp+arg_C]
.text:00001EB7                 push    eax             ; char *
.text:00001EB8                 mov     ecx, [ebp+arg_0]
.text:00001EBB                 mov     edx, [ecx+34h]
.text:00001EBE                 push    edx
.text:00001EBF                 mov     eax, [ecx+30h]
.text:00001EC2                 push    eax             ; unsigned __int64
.text:00001EC3                 lea     ecx, [ebp+var_74]
.text:00001EC6                 push    ecx             ; struct AString *
.text:00001EC7                 call    ?Print_UInt64_and_String@@YGXAAVAString@@_KPBD@Z ; Print_UInt64_and_String(AString &,unsigned __int64,char const *)
.text:00001ECC                 mov     edx, dword ptr [ebp+arg_4]
.text:00001ECF                 or      edx, dword ptr [ebp+arg_4+4]
.text:00001ED2                 jz      short loc_1EF8
.text:00001ED4                 push    offset $SG73166
.text:00001ED9                 lea     ecx, [ebp+var_74]
.text:00001EDC                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00001EE1                 mov     eax, ds:_kString_Dirs
.text:00001EE6                 push    eax             ; char *
.text:00001EE7                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00001EEA                 push    ecx
.text:00001EEB                 mov     edx, dword ptr [ebp+arg_4]
.text:00001EEE                 push    edx             ; unsigned __int64
.text:00001EEF                 lea     eax, [ebp+var_74]
.text:00001EF2                 push    eax             ; struct AString *
.text:00001EF3                 call    ?Print_UInt64_and_String@@YGXAAVAString@@_KPBD@Z ; Print_UInt64_and_String(AString &,unsigned __int64,char const *)
.text:00001EF8
.text:00001EF8 loc_1EF8:                               ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+13Ej
.text:00001EF8                 lea     ecx, [ebp+var_74]
.text:00001EFB                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00001F00                 push    eax             ; Str
.text:00001F01                 push    0               ; int
.text:00001F03                 mov     ecx, [ebp+var_1C]
.text:00001F06                 mov     edx, [ecx+24h]
.text:00001F09                 push    edx             ; int
.text:00001F0A                 call    ?PrintString@@YGXW4EAdjustment@@IPBD@Z ; PrintString(EAdjustment,uint,char const *)
.text:00001F0F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001F16                 lea     ecx, [ebp+var_74] ; this
.text:00001F19                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001F1E                 jmp     short loc_1F38
.text:00001F20 ; ---------------------------------------------------------------------------
.text:00001F20
.text:00001F20 loc_1F20:                               ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+10Fj
.text:00001F20                 push    offset $SG73168 ; Str
.text:00001F25                 mov     eax, [ebp+var_1C]
.text:00001F28                 mov     ecx, [eax+2Ch]
.text:00001F2B                 push    ecx             ; int
.text:00001F2C                 mov     edx, [ebp+var_1C]
.text:00001F2F                 mov     eax, [edx+24h]
.text:00001F32                 push    eax             ; int
.text:00001F33                 call    ?PrintString@@YGXW4EAdjustment@@IPBD@Z ; PrintString(EAdjustment,uint,char const *)
.text:00001F38
.text:00001F38 loc_1F38:                               ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+9Aj
.text:00001F38                                         ; CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+C1j ...
.text:00001F38                 jmp     loc_1DDA
.text:00001F3D ; ---------------------------------------------------------------------------
.text:00001F3D
.text:00001F3D loc_1F3D:                               ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+5Aj
.text:00001F3D                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001F42                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00001F47                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001F4C                 push    edx
.text:00001F4D                 mov     ecx, ebp
.text:00001F4F                 push    eax
.text:00001F50                 lea     edx, $LN21
.text:00001F56                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001F5B                 pop     eax
.text:00001F5C                 pop     edx
.text:00001F5D                 mov     ecx, [ebp+var_C]
.text:00001F60                 mov     large fs:0, ecx
.text:00001F67                 pop     ecx
.text:00001F68                 pop     edi
.text:00001F69                 mov     ecx, [ebp+var_10]
.text:00001F6C                 xor     ecx, ebp
.text:00001F6E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001F73                 add     esp, 78h
.text:00001F76                 cmp     ebp, esp
.text:00001F78                 call    __RTC_CheckEsp
.text:00001F7D                 mov     esp, ebp
.text:00001F7F                 pop     ebp
.text:00001F80                 retn    10h
.text:00001F80 ?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z endp
.text:00001F80
.text:00001F80 ; ---------------------------------------------------------------------------
.text:00001F83                 align 4
.text:00001F84 $LN21           dd 2                    ; DATA XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+1BCo
.text:00001F88                 dd offset $LN20
.text:00001F8C $LN20           dd 0FFFFFFA0h, 40h      ; DATA XREF: .text:00001F88o
.text:00001F94                 dd offset $LN17
.text:00001F98                 dd 0FFFFFF8Ch, 0Ch
.text:00001FA0                 dd offset $LN18
.text:00001FA4 $LN18           db 73h, 0               ; DATA XREF: .text:00001FA0o
.text:00001FA6 $LN17           dw 73h                  ; DATA XREF: .text:00001F94o
.text:00001FA8                 db 0Ch dup(0CCh)
.text:00001FB4
.text:00001FB4 ; =============== S U B R O U T I N E =======================================
.text:00001FB4
.text:00001FB4 ; Attributes: bp-based frame
.text:00001FB4
.text:00001FB4 ; void __stdcall PrintNumber(enum  EAdjustment, unsigned int, struct CListUInt64Def const &)
.text:00001FB4 ?PrintNumber@@YGXW4EAdjustment@@IABUCListUInt64Def@@@Z proc near
.text:00001FB4                                         ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+95p
.text:00001FB4                                         ; CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+BCp
.text:00001FB4
.text:00001FB4 var_2C          = byte ptr -2Ch
.text:00001FB4 Str             = byte ptr -28h
.text:00001FB4 var_4           = dword ptr -4
.text:00001FB4 arg_0           = dword ptr  8
.text:00001FB4 arg_4           = dword ptr  0Ch
.text:00001FB4 arg_8           = dword ptr  10h
.text:00001FB4
.text:00001FB4                 push    ebp
.text:00001FB5                 mov     ebp, esp
.text:00001FB7                 sub     esp, 2Ch
.text:00001FBA                 push    edi
.text:00001FBB                 lea     edi, [ebp+var_2C]
.text:00001FBE                 mov     ecx, 0Bh
.text:00001FC3                 mov     eax, 0CCCCCCCCh
.text:00001FC8                 rep stosd
.text:00001FCA                 mov     eax, dword ptr ds:___security_cookie
.text:00001FCF                 xor     eax, ebp
.text:00001FD1                 mov     [ebp+var_4], eax
.text:00001FD4                 mov     [ebp+Str], 0
.text:00001FD8                 mov     eax, [ebp+arg_8]
.text:00001FDB                 movzx   ecx, byte ptr [eax+8]
.text:00001FDF                 test    ecx, ecx
.text:00001FE1                 jz      short loc_1FF6
.text:00001FE3                 lea     edx, [ebp+Str]
.text:00001FE6                 push    edx             ; char *
.text:00001FE7                 mov     eax, [ebp+arg_8]
.text:00001FEA                 mov     ecx, [eax+4]
.text:00001FED                 push    ecx
.text:00001FEE                 mov     edx, [eax]
.text:00001FF0                 push    edx             ; unsigned __int64
.text:00001FF1                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:00001FF6
.text:00001FF6 loc_1FF6:                               ; CODE XREF: PrintNumber(EAdjustment,uint,CListUInt64Def const &)+2Dj
.text:00001FF6                 lea     eax, [ebp+Str]
.text:00001FF9                 push    eax             ; Str
.text:00001FFA                 mov     ecx, [ebp+arg_4]
.text:00001FFD                 push    ecx             ; int
.text:00001FFE                 mov     edx, [ebp+arg_0]
.text:00002001                 push    edx             ; int
.text:00002002                 call    ?PrintString@@YGXW4EAdjustment@@IPBD@Z ; PrintString(EAdjustment,uint,char const *)
.text:00002007                 push    edx
.text:00002008                 mov     ecx, ebp
.text:0000200A                 push    eax
.text:0000200B                 lea     edx, $LN6_1
.text:00002011                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002016                 pop     eax
.text:00002017                 pop     edx
.text:00002018                 pop     edi
.text:00002019                 mov     ecx, [ebp+var_4]
.text:0000201C                 xor     ecx, ebp
.text:0000201E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002023                 add     esp, 2Ch
.text:00002026                 cmp     ebp, esp
.text:00002028
.text:00002028 loc_2028:                               ; DATA XREF: .rdata:$SG73166o
.text:00002028                 call    __RTC_CheckEsp
.text:0000202D                 mov     esp, ebp
.text:0000202F                 pop     ebp
.text:00002030                 retn    0Ch
.text:00002030 ?PrintNumber@@YGXW4EAdjustment@@IABUCListUInt64Def@@@Z endp
.text:00002030
.text:00002030 ; ---------------------------------------------------------------------------
.text:00002033                 align 4
.text:00002034 $LN6_1          dd 1                    ; DATA XREF: PrintNumber(EAdjustment,uint,CListUInt64Def const &)+57o
.text:00002038 off_2038        dd offset $LN5_0        ; DATA XREF: .rdata:$SG73208o
.text:0000203C $LN5_0          dd 0FFFFFFD8h, 20h      ; DATA XREF: .text:off_2038o
.text:00002044                 dd offset $LN4
.text:00002048 $LN4            dd 0CCCC0073h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00002044o
.text:00002054
.text:00002054 ; =============== S U B R O U T I N E =======================================
.text:00002054
.text:00002054 ; Attributes: bp-based frame
.text:00002054
.text:00002054 ; void __thiscall CFieldPrinter::PrintSum(CFieldPrinter *this, const struct CListStat2 *)
.text:00002054                 public ?PrintSum@CFieldPrinter@@QAEXABUCListStat2@@@Z
.text:00002054 ?PrintSum@CFieldPrinter@@QAEXABUCListStat2@@@Z proc near
.text:00002054                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+157Dp
.text:00002054                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+16B6p
.text:00002054
.text:00002054 var_48          = dword ptr -48h
.text:00002054 var_40          = byte ptr -40h
.text:00002054 var_4           = dword ptr -4
.text:00002054 arg_0           = dword ptr  8
.text:00002054
.text:00002054                 push    ebp
.text:00002055                 mov     ebp, esp
.text:00002057                 sub     esp, 48h
.text:0000205A                 push    esi
.text:0000205B                 push    edi
.text:0000205C                 push    ecx
.text:0000205D                 lea     edi, [ebp+var_48]
.text:00002060                 mov     ecx, 12h
.text:00002065                 mov     eax, 0CCCCCCCCh
.text:0000206A                 rep stosd
.text:0000206C                 pop     ecx
.text:0000206D                 mov     [ebp+var_4], ecx
.text:00002070                 mov     eax, ds:_kString_Files
.text:00002075                 push    eax             ; char *
.text:00002076                 mov     ecx, [ebp+arg_0]
.text:00002079                 mov     edx, [ecx+74h]
.text:0000207C                 push    edx
.text:0000207D                 mov     eax, [ecx+70h]
.text:00002080                 push    eax             ; unsigned __int64
.text:00002081                 mov     ecx, [ebp+arg_0]
.text:00002084                 push    ecx             ; struct CListStat *
.text:00002085                 mov     ecx, [ebp+var_4] ; this
.text:00002088                 call    ?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z ; CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)
.text:0000208D                 mov     edx, [ebp+arg_0]
.text:00002090                 mov     [ebp+var_48], edx
.text:00002093                 mov     eax, [ebp+var_48]
.text:00002096                 mov     ecx, [ebp+var_48]
.text:00002099                 mov     edx, [eax+68h]
.text:0000209C                 or      edx, [ecx+6Ch]
.text:0000209F                 jz      short loc_20EC
.text:000020A1                 mov     eax, ds:_kString_AltStreams
.text:000020A6                 push    eax             ; char *
.text:000020A7                 push    0
.text:000020A9                 push    0               ; unsigned __int64
.text:000020AB                 mov     ecx, [ebp+arg_0]
.text:000020AE                 add     ecx, 38h ; '8'
.text:000020B1                 push    ecx             ; struct CListStat *
.text:000020B2                 mov     ecx, [ebp+var_4] ; this
.text:000020B5                 call    ?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z ; CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)
.text:000020BA                 mov     esi, [ebp+arg_0]
.text:000020BD                 mov     ecx, 0Eh
.text:000020C2                 lea     edi, [ebp+var_40]
.text:000020C5                 rep movsd
.text:000020C7                 mov     edx, [ebp+arg_0]
.text:000020CA                 add     edx, 38h ; '8'
.text:000020CD                 push    edx             ; struct CListStat *
.text:000020CE                 lea     ecx, [ebp+var_40] ; this
.text:000020D1                 call    ?Update@CListStat@@QAEXABU1@@Z ; CListStat::Update(CListStat const &)
.text:000020D6                 mov     eax, ds:_kString_Streams
.text:000020DB                 push    eax             ; char *
.text:000020DC                 push    0
.text:000020DE                 push    0               ; unsigned __int64
.text:000020E0                 lea     ecx, [ebp+var_40]
.text:000020E3                 push    ecx             ; struct CListStat *
.text:000020E4                 mov     ecx, [ebp+var_4] ; this
.text:000020E7                 call    ?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z ; CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)
.text:000020EC
.text:000020EC loc_20EC:                               ; CODE XREF: CFieldPrinter::PrintSum(CListStat2 const &)+4Bj
.text:000020EC                 push    edx
.text:000020ED                 mov     ecx, ebp
.text:000020EF                 push    eax
.text:000020F0                 lea     edx, $LN6_2
.text:000020F6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000020FB                 pop     eax
.text:000020FC                 pop     edx
.text:000020FD                 pop     edi
.text:000020FE                 pop     esi
.text:000020FF                 add     esp, 48h
.text:00002102                 cmp     ebp, esp
.text:00002104                 call    __RTC_CheckEsp
.text:00002109                 mov     esp, ebp
.text:0000210B                 pop     ebp
.text:0000210C                 retn    4
.text:0000210C ?PrintSum@CFieldPrinter@@QAEXABUCListStat2@@@Z endp
.text:0000210C
.text:0000210C ; ---------------------------------------------------------------------------
.text:0000210F                 align 10h
.text:00002110 $LN6_2          dd 1                    ; DATA XREF: CFieldPrinter::PrintSum(CListStat2 const &)+9Co
.text:00002114                 dd offset $LN5_1
.text:00002118 $LN5_1          dd 0FFFFFFC0h, 38h      ; DATA XREF: .text:00002114o
.text:00002120                 dd offset $LN4_0
.text:00002124 $LN4_0          dd 0CC007473h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00002120o
.text:00002134
.text:00002134 ; =============== S U B R O U T I N E =======================================
.text:00002134
.text:00002134 ; Attributes: bp-based frame
.text:00002134
.text:00002134 ; __int32 __stdcall Print_OpenArchive_Props(struct CStdOutStream *, const struct CCodecs *, const struct CArchiveLink *)
.text:00002134                 public ?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z
.text:00002134 ?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z proc near
.text:00002134                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+923p
.text:00002134
.text:00002134 var_E0          = dword ptr -0E0h
.text:00002134 var_DC          = dword ptr -0DCh
.text:00002134 var_D8          = dword ptr -0D8h
.text:00002134 var_D4          = dword ptr -0D4h
.text:00002134 var_D0          = dword ptr -0D0h
.text:00002134 var_CC          = byte ptr -0CCh
.text:00002134 var_C0          = dword ptr -0C0h
.text:00002134 var_B8          = tagPROPVARIANT ptr -0B8h
.text:00002134 var_A4          = dword ptr -0A4h
.text:00002134 var_9C          = byte ptr -9Ch
.text:00002134 var_90          = dword ptr -90h
.text:00002134 var_84          = byte ptr -84h
.text:00002134 var_7C          = dword ptr -7Ch
.text:00002134 var_78          = dword ptr -78h
.text:00002134 var_70          = dword ptr -70h
.text:00002134 var_68          = dword ptr -68h
.text:00002134 var_64          = dword ptr -64h
.text:00002134 var_5C          = byte ptr -5Ch
.text:00002134 var_50          = dword ptr -50h
.text:00002134 var_44          = byte ptr -44h
.text:00002134 var_3C          = dword ptr -3Ch
.text:00002134 var_38          = dword ptr -38h
.text:00002134 var_30          = dword ptr -30h
.text:00002134 var_28          = dword ptr -28h
.text:00002134 var_24          = dword ptr -24h
.text:00002134 var_20          = dword ptr -20h
.text:00002134 var_1C          = dword ptr -1Ch
.text:00002134 var_18          = dword ptr -18h
.text:00002134 var_14          = dword ptr -14h
.text:00002134 var_10          = dword ptr -10h
.text:00002134 var_C           = dword ptr -0Ch
.text:00002134 var_4           = dword ptr -4
.text:00002134 arg_0           = dword ptr  8
.text:00002134 arg_4           = dword ptr  0Ch
.text:00002134 arg_8           = dword ptr  10h
.text:00002134
.text:00002134                 push    ebp
.text:00002135                 mov     ebp, esp
.text:00002137                 push    0FFFFFFFFh
.text:00002139                 push    offset __ehhandler$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z
.text:0000213E                 mov     eax, large fs:0
.text:00002144                 push    eax
.text:00002145                 sub     esp, 0D4h
.text:0000214B                 push    esi
.text:0000214C                 push    edi
.text:0000214D                 lea     edi, [ebp+var_E0]
.text:00002153                 mov     ecx, 35h ; '5'
.text:00002158                 mov     eax, 0CCCCCCCCh
.text:0000215D                 rep stosd
.text:0000215F                 mov     eax, dword ptr ds:___security_cookie
.text:00002164                 xor     eax, ebp
.text:00002166                 push    eax
.text:00002167                 lea     eax, [ebp+var_C]
.text:0000216A                 mov     large fs:0, eax
.text:00002170                 mov     [ebp+var_10], 0
.text:00002177                 jmp     short loc_2182
.text:00002179 ; ---------------------------------------------------------------------------
.text:00002179
.text:00002179 loc_2179:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &):loc_25CDj
.text:00002179                 mov     eax, [ebp+var_10]
.text:0000217C                 add     eax, 1
.text:0000217F                 mov     [ebp+var_10], eax
.text:00002182
.text:00002182 loc_2182:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+43j
.text:00002182                 mov     ecx, [ebp+arg_8]
.text:00002185                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:0000218A                 cmp     [ebp+var_10], eax
.text:0000218D                 jnb     loc_25D2
.text:00002193                 mov     ecx, [ebp+var_10]
.text:00002196                 push    ecx
.text:00002197                 mov     ecx, [ebp+arg_8]
.text:0000219A                 call    ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z ; CObjectVector<CArc>::operator[](uint)
.text:0000219F                 mov     [ebp+var_14], eax
.text:000021A2                 mov     edx, [ebp+var_14]
.text:000021A5                 add     edx, 10h
.text:000021A8                 mov     [ebp+var_18], edx
.text:000021AB                 push    offset $SG73298 ; "--\n"
.text:000021B0                 mov     ecx, [ebp+arg_0]
.text:000021B3                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000021B8                 mov     ecx, [ebp+var_14]
.text:000021BB                 add     ecx, 70h ; 'p'
.text:000021BE                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000021C3                 push    eax             ; int
.text:000021C4                 push    offset $SG73299 ; "Path"
.text:000021C9                 mov     eax, [ebp+arg_0]
.text:000021CC                 push    eax             ; int
.text:000021CD                 call    ?PrintPropPair@@YGXAAVCStdOutStream@@PBDPB_W@Z ; PrintPropPair(CStdOutStream &,char const *,wchar_t const *)
.text:000021D2                 mov     ecx, [ebp+var_18]
.text:000021D5                 cmp     dword ptr [ecx+0Ch], 0
.text:000021D9                 jl      short loc_224D
.text:000021DB                 mov     edx, [ebp+var_18]
.text:000021DE                 mov     eax, [ebp+var_14]
.text:000021E1                 mov     ecx, [edx+0Ch]
.text:000021E4                 cmp     ecx, [eax+94h]
.text:000021EA                 jnz     short loc_2207
.text:000021EC                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000021F1                 push    offset $SG73302 ; "Warning: The archive is open with offse"...
.text:000021F6                 mov     ecx, [ebp+arg_0]
.text:000021F9                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000021FE                 mov     ecx, eax
.text:00002200                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002205                 jmp     short loc_224D
.text:00002207 ; ---------------------------------------------------------------------------
.text:00002207
.text:00002207 loc_2207:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+B6j
.text:00002207                 mov     edx, [ebp+var_18]
.text:0000220A                 mov     eax, [edx+0Ch]
.text:0000220D                 push    eax             ; int
.text:0000220E                 mov     ecx, [ebp+arg_4] ; this
.text:00002211                 call    ?GetFormatNamePtr@CCodecs@@QBEPB_WH@Z ; CCodecs::GetFormatNamePtr(int)
.text:00002216                 push    eax
.text:00002217                 lea     ecx, [ebp+var_CC]
.text:0000221D                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00002222                 mov     [ebp+var_4], 0
.text:00002229                 push    1
.text:0000222B                 lea     ecx, [ebp+var_CC]
.text:00002231                 push    ecx
.text:00002232                 mov     edx, [ebp+arg_0]
.text:00002235                 push    edx
.text:00002236                 call    ?PrintArcTypeError@@YGXAAVCStdOutStream@@ABVUString@@_N@Z ; PrintArcTypeError(CStdOutStream &,UString const &,bool)
.text:0000223B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002242                 lea     ecx, [ebp+var_CC] ; this
.text:00002248                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000224D
.text:0000224D loc_224D:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+A5j
.text:0000224D                                         ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+D1j
.text:0000224D                 mov     eax, [ebp+var_14]
.text:00002250                 mov     ecx, [eax+94h]
.text:00002256                 push    ecx             ; int
.text:00002257                 mov     ecx, [ebp+arg_4] ; this
.text:0000225A                 call    ?GetFormatNamePtr@CCodecs@@QBEPB_WH@Z ; CCodecs::GetFormatNamePtr(int)
.text:0000225F                 push    eax             ; int
.text:00002260                 push    offset $SG73305 ; "Type"
.text:00002265                 mov     edx, [ebp+arg_0]
.text:00002268                 push    edx             ; int
.text:00002269                 call    ?PrintPropPair@@YGXAAVCStdOutStream@@PBDPB_W@Z ; PrintPropPair(CStdOutStream &,char const *,wchar_t const *)
.text:0000226E                 mov     eax, [ebp+var_18]
.text:00002271                 push    eax             ; CArcErrorInfo *
.text:00002272                 mov     ecx, [ebp+arg_0]
.text:00002275                 push    ecx             ; struct CStdOutStream *
.text:00002276                 call    ?ErrorInfo_Print@@YGXAAVCStdOutStream@@ABUCArcErrorInfo@@@Z ; ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)
.text:0000227B                 mov     ecx, [ebp+var_14] ; this
.text:0000227E                 call    ?GetGlobalOffset@CArc@@QBE_JXZ ; CArc::GetGlobalOffset(void)
.text:00002283                 mov     [ebp+var_20], eax
.text:00002286                 mov     [ebp+var_1C], edx
.text:00002289                 mov     edx, [ebp+var_20]
.text:0000228C                 or      edx, [ebp+var_1C]
.text:0000228F                 jz      short loc_22A4
.text:00002291                 mov     eax, [ebp+var_1C]
.text:00002294                 push    eax
.text:00002295                 mov     ecx, [ebp+var_20]
.text:00002298                 push    ecx
.text:00002299                 push    24h ; '$'
.text:0000229B                 mov     edx, [ebp+arg_0]
.text:0000229E                 push    edx
.text:0000229F                 call    ?PrintPropNameAndNumber_Signed@@YGXAAVCStdOutStream@@K_J@Z ; PrintPropNameAndNumber_Signed(CStdOutStream &,ulong,__int64)
.text:000022A4
.text:000022A4 loc_22A4:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+15Bj
.text:000022A4                 mov     ecx, [ebp+var_14]
.text:000022A7                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:000022AC                 mov     [ebp+var_24], eax
.text:000022AF                 push    0
.text:000022B1                 push    2Ch ; ','
.text:000022B3                 mov     eax, [ebp+var_24]
.text:000022B6                 push    eax
.text:000022B7                 mov     ecx, [ebp+arg_0]
.text:000022BA                 push    ecx
.text:000022BB                 call    ?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z ; PrintArcProp(CStdOutStream &,IInArchive *,ulong,wchar_t const *)
.text:000022C0                 mov     [ebp+var_28], eax
.text:000022C3                 cmp     [ebp+var_28], 0
.text:000022C7                 jz      short loc_22D1
.text:000022C9                 mov     eax, [ebp+var_28]
.text:000022CC                 jmp     loc_25D4
.text:000022D1 ; ---------------------------------------------------------------------------
.text:000022D1
.text:000022D1 loc_22D1:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+193j
.text:000022D1                 mov     edx, [ebp+var_18]
.text:000022D4                 mov     [ebp+var_E0], edx
.text:000022DA                 mov     eax, [ebp+var_E0]
.text:000022E0                 mov     ecx, [ebp+var_E0]
.text:000022E6                 mov     edx, [eax+10h]
.text:000022E9                 or      edx, [ecx+14h]
.text:000022EC                 jz      short loc_2304
.text:000022EE                 mov     eax, [ebp+var_18]
.text:000022F1                 mov     ecx, [eax+14h]
.text:000022F4                 push    ecx
.text:000022F5                 mov     edx, [eax+10h]
.text:000022F8                 push    edx
.text:000022F9                 push    57h ; 'W'
.text:000022FB                 mov     eax, [ebp+arg_0]
.text:000022FE                 push    eax
.text:000022FF                 call    ?PrintPropNameAndNumber@@YGXAAVCStdOutStream@@K_K@Z ; PrintPropNameAndNumber(CStdOutStream &,ulong,unsigned __int64)
.text:00002304
.text:00002304 loc_2304:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+1B8j
.text:00002304                 mov     esi, esp
.text:00002306                 lea     ecx, [ebp+var_30]
.text:00002309                 push    ecx
.text:0000230A                 mov     edx, [ebp+var_24]
.text:0000230D                 mov     eax, [edx]
.text:0000230F                 mov     ecx, [ebp+var_24]
.text:00002312                 push    ecx
.text:00002313                 mov     edx, [eax+2Ch]
.text:00002316                 call    edx
.text:00002318                 cmp     esi, esp
.text:0000231A                 call    __RTC_CheckEsp
.text:0000231F                 mov     [ebp+var_38], eax
.text:00002322                 cmp     [ebp+var_38], 0
.text:00002326                 jz      short loc_2330
.text:00002328                 mov     eax, [ebp+var_38]
.text:0000232B                 jmp     loc_25D4
.text:00002330 ; ---------------------------------------------------------------------------
.text:00002330
.text:00002330 loc_2330:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+1F2j
.text:00002330                 mov     [ebp+var_3C], 0
.text:00002337                 jmp     short loc_2342
.text:00002339 ; ---------------------------------------------------------------------------
.text:00002339
.text:00002339 loc_2339:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+2D6j
.text:00002339                 mov     eax, [ebp+var_3C]
.text:0000233C                 add     eax, 1
.text:0000233F                 mov     [ebp+var_3C], eax
.text:00002342
.text:00002342 loc_2342:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+203j
.text:00002342                 mov     ecx, [ebp+var_3C]
.text:00002345                 cmp     ecx, [ebp+var_30]
.text:00002348                 jnb     loc_240F
.text:0000234E                 lea     ecx, [ebp+var_44] ; this
.text:00002351                 call    ??0CMyComBSTR@@QAE@XZ ; CMyComBSTR::CMyComBSTR(void)
.text:00002356                 mov     [ebp+var_4], 1
.text:0000235D                 mov     esi, esp
.text:0000235F                 lea     edx, [ebp+var_5C]
.text:00002362                 push    edx
.text:00002363                 lea     eax, [ebp+var_50]
.text:00002366                 push    eax
.text:00002367                 lea     ecx, [ebp+var_44]
.text:0000236A                 call    ??ICMyComBSTR@@QAEPAPA_WXZ ; CMyComBSTR::operator&(void)
.text:0000236F                 push    eax
.text:00002370                 mov     ecx, [ebp+var_3C]
.text:00002373                 push    ecx
.text:00002374                 mov     edx, [ebp+var_24]
.text:00002377                 mov     eax, [edx]
.text:00002379                 mov     ecx, [ebp+var_24]
.text:0000237C                 push    ecx
.text:0000237D                 mov     edx, [eax+30h]
.text:00002380                 call    edx
.text:00002382                 cmp     esi, esp
.text:00002384                 call    __RTC_CheckEsp
.text:00002389                 mov     [ebp+var_64], eax
.text:0000238C                 cmp     [ebp+var_64], 0
.text:00002390                 jz      short loc_23B5
.text:00002392                 mov     eax, [ebp+var_64]
.text:00002395                 mov     [ebp+var_D0], eax
.text:0000239B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000023A2                 lea     ecx, [ebp+var_44] ; this
.text:000023A5                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:000023AA                 mov     eax, [ebp+var_D0]
.text:000023B0                 jmp     loc_25D4
.text:000023B5 ; ---------------------------------------------------------------------------
.text:000023B5
.text:000023B5 loc_23B5:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+25Cj
.text:000023B5                 lea     ecx, [ebp+var_44]
.text:000023B8                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:000023BD                 push    eax
.text:000023BE                 mov     ecx, [ebp+var_50]
.text:000023C1                 push    ecx
.text:000023C2                 mov     edx, [ebp+var_24]
.text:000023C5                 push    edx
.text:000023C6                 mov     eax, [ebp+arg_0]
.text:000023C9                 push    eax
.text:000023CA                 call    ?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z ; PrintArcProp(CStdOutStream &,IInArchive *,ulong,wchar_t const *)
.text:000023CF                 mov     [ebp+var_68], eax
.text:000023D2                 cmp     [ebp+var_68], 0
.text:000023D6                 jz      short loc_23FB
.text:000023D8                 mov     ecx, [ebp+var_68]
.text:000023DB                 mov     [ebp+var_D4], ecx
.text:000023E1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000023E8                 lea     ecx, [ebp+var_44] ; this
.text:000023EB                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:000023F0                 mov     eax, [ebp+var_D4]
.text:000023F6                 jmp     loc_25D4
.text:000023FB ; ---------------------------------------------------------------------------
.text:000023FB
.text:000023FB loc_23FB:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+2A2j
.text:000023FB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002402                 lea     ecx, [ebp+var_44] ; this
.text:00002405                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:0000240A                 jmp     loc_2339
.text:0000240F ; ---------------------------------------------------------------------------
.text:0000240F
.text:0000240F loc_240F:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+214j
.text:0000240F                 mov     ecx, [ebp+arg_8]
.text:00002412                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:00002417                 sub     eax, 1
.text:0000241A                 cmp     [ebp+var_10], eax
.text:0000241D                 jz      loc_25CD
.text:00002423                 push    offset $SG73330 ; "----\n"
.text:00002428                 mov     ecx, [ebp+arg_0]
.text:0000242B                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002430                 mov     esi, esp
.text:00002432                 lea     edx, [ebp+var_70]
.text:00002435                 push    edx
.text:00002436                 mov     eax, [ebp+var_24]
.text:00002439                 mov     ecx, [eax]
.text:0000243B                 mov     edx, [ebp+var_24]
.text:0000243E                 push    edx
.text:0000243F                 mov     eax, [ecx+24h]
.text:00002442                 call    eax
.text:00002444                 cmp     esi, esp
.text:00002446                 call    __RTC_CheckEsp
.text:0000244B                 test    eax, eax
.text:0000244D                 jnz     loc_25CD
.text:00002453                 mov     ecx, [ebp+var_10]
.text:00002456                 add     ecx, 1
.text:00002459                 push    ecx
.text:0000245A                 mov     ecx, [ebp+arg_8]
.text:0000245D                 call    ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z ; CObjectVector<CArc>::operator[](uint)
.text:00002462                 mov     edx, [eax+98h]
.text:00002468                 mov     [ebp+var_78], edx
.text:0000246B                 mov     [ebp+var_7C], 0
.text:00002472                 jmp     short loc_247D
.text:00002474 ; ---------------------------------------------------------------------------
.text:00002474
.text:00002474 loc_2474:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+494j
.text:00002474                 mov     eax, [ebp+var_7C]
.text:00002477                 add     eax, 1
.text:0000247A                 mov     [ebp+var_7C], eax
.text:0000247D
.text:0000247D loc_247D:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+33Ej
.text:0000247D                 mov     ecx, [ebp+var_7C]
.text:00002480                 cmp     ecx, [ebp+var_70]
.text:00002483                 jnb     loc_25CD
.text:00002489                 lea     ecx, [ebp+var_84] ; this
.text:0000248F                 call    ??0CMyComBSTR@@QAE@XZ ; CMyComBSTR::CMyComBSTR(void)
.text:00002494                 mov     [ebp+var_4], 2
.text:0000249B                 mov     esi, esp
.text:0000249D                 lea     edx, [ebp+var_9C]
.text:000024A3                 push    edx
.text:000024A4                 lea     eax, [ebp+var_90]
.text:000024AA                 push    eax
.text:000024AB                 lea     ecx, [ebp+var_84]
.text:000024B1                 call    ??ICMyComBSTR@@QAEPAPA_WXZ ; CMyComBSTR::operator&(void)
.text:000024B6                 push    eax
.text:000024B7                 mov     ecx, [ebp+var_7C]
.text:000024BA                 push    ecx
.text:000024BB                 mov     edx, [ebp+var_24]
.text:000024BE                 mov     eax, [edx]
.text:000024C0                 mov     ecx, [ebp+var_24]
.text:000024C3                 push    ecx
.text:000024C4                 mov     edx, [eax+28h]
.text:000024C7                 call    edx
.text:000024C9                 cmp     esi, esp
.text:000024CB                 call    __RTC_CheckEsp
.text:000024D0                 mov     [ebp+var_A4], eax
.text:000024D6                 cmp     [ebp+var_A4], 0
.text:000024DD                 jz      short loc_2508
.text:000024DF                 mov     eax, [ebp+var_A4]
.text:000024E5                 mov     [ebp+var_D8], eax
.text:000024EB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000024F2                 lea     ecx, [ebp+var_84] ; this
.text:000024F8                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:000024FD                 mov     eax, [ebp+var_D8]
.text:00002503                 jmp     loc_25D4
.text:00002508 ; ---------------------------------------------------------------------------
.text:00002508
.text:00002508 loc_2508:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+3A9j
.text:00002508                 lea     ecx, [ebp+var_B8] ; this
.text:0000250E                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00002513                 mov     byte ptr [ebp+var_4], 3
.text:00002517                 mov     esi, esp
.text:00002519                 lea     ecx, [ebp+var_B8]
.text:0000251F                 push    ecx
.text:00002520                 mov     edx, [ebp+var_90]
.text:00002526                 push    edx
.text:00002527                 mov     eax, [ebp+var_78]
.text:0000252A                 push    eax
.text:0000252B                 mov     ecx, [ebp+var_24]
.text:0000252E                 mov     edx, [ecx]
.text:00002530                 mov     eax, [ebp+var_24]
.text:00002533                 push    eax
.text:00002534                 mov     ecx, [edx+18h]
.text:00002537                 call    ecx
.text:00002539                 cmp     esi, esp
.text:0000253B                 call    __RTC_CheckEsp
.text:00002540                 mov     [ebp+var_C0], eax
.text:00002546                 cmp     [ebp+var_C0], 0
.text:0000254D                 jz      short loc_2584
.text:0000254F                 mov     edx, [ebp+var_C0]
.text:00002555                 mov     [ebp+var_DC], edx
.text:0000255B                 mov     byte ptr [ebp+var_4], 2
.text:0000255F                 lea     ecx, [ebp+var_B8] ; this
.text:00002565                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000256A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002571                 lea     ecx, [ebp+var_84] ; this
.text:00002577                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:0000257C                 mov     eax, [ebp+var_DC]
.text:00002582                 jmp     short loc_25D4
.text:00002584 ; ---------------------------------------------------------------------------
.text:00002584
.text:00002584 loc_2584:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+419j
.text:00002584                 lea     eax, [ebp+var_B8]
.text:0000258A                 push    eax             ; struct tagPROPVARIANT *
.text:0000258B                 lea     ecx, [ebp+var_84]
.text:00002591                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:00002596                 push    eax             ; int
.text:00002597                 mov     ecx, [ebp+var_90]
.text:0000259D                 push    ecx             ; unsigned __int32
.text:0000259E                 mov     edx, [ebp+arg_0]
.text:000025A1                 push    edx             ; int
.text:000025A2                 call    ?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z ; PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)
.text:000025A7                 mov     byte ptr [ebp+var_4], 2
.text:000025AB                 lea     ecx, [ebp+var_B8] ; this
.text:000025B1                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000025B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000025BD                 lea     ecx, [ebp+var_84] ; this
.text:000025C3                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:000025C8                 jmp     loc_2474
.text:000025CD ; ---------------------------------------------------------------------------
.text:000025CD
.text:000025CD loc_25CD:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+2E9j
.text:000025CD                                         ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+319j ...
.text:000025CD                 jmp     loc_2179
.text:000025D2 ; ---------------------------------------------------------------------------
.text:000025D2
.text:000025D2 loc_25D2:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+59j
.text:000025D2                 xor     eax, eax
.text:000025D4
.text:000025D4 loc_25D4:                               ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+198j
.text:000025D4                                         ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+1F7j ...
.text:000025D4                 push    edx
.text:000025D5                 mov     ecx, ebp
.text:000025D7                 push    eax
.text:000025D8                 lea     edx, $LN40
.text:000025DE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000025E3                 pop     eax
.text:000025E4                 pop     edx
.text:000025E5                 mov     ecx, [ebp+var_C]
.text:000025E8                 mov     large fs:0, ecx
.text:000025EF                 pop     ecx
.text:000025F0                 pop     edi
.text:000025F1                 pop     esi
.text:000025F2                 add     esp, 0E0h
.text:000025F8                 cmp     ebp, esp
.text:000025FA                 call    __RTC_CheckEsp
.text:000025FF                 mov     esp, ebp
.text:00002601                 pop     ebp
.text:00002602                 retn    0Ch
.text:00002602 ?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z endp
.text:00002602
.text:00002602 ; ---------------------------------------------------------------------------
.text:00002605                 align 4
.text:00002608 $LN40           dd 9                    ; DATA XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+4A4o
.text:0000260C                 dd offset $LN39
.text:00002610 $LN39           dd 0FFFFFFD0h, 4        ; DATA XREF: .text:0000260Co
.text:00002618                 dd offset $LN29         ; "numProps"
.text:0000261C                 dd 0FFFFFFBCh, 4
.text:00002624                 dd offset $LN30         ; "name"
.text:00002628                 dd 0FFFFFFB0h, 4
.text:00002630                 dd offset $LN31         ; "propID"
.text:00002634                 dd 0FFFFFFA4h, 2
.text:0000263C                 dd offset $LN32         ; "vt"
.text:00002640                 db 90h
.text:00002641                 db 3 dup(0FFh)
.text:00002644                 dd 4
.text:00002648                 dd offset $LN33         ; "numProps"
.text:0000264C                 dd 0FFFFFF7Ch, 4
.text:00002654                 dd offset $LN34         ; "name"
.text:00002658                 dd 0FFFFFF70h, 4
.text:00002660                 dd offset $LN35         ; "propID"
.text:00002664                 dd 0FFFFFF64h, 2
.text:0000266C                 dd offset $LN36         ; "vt"
.text:00002670                 dd 0FFFFFF48h, 10h
.text:00002678                 dd offset $LN37         ; "prop"
.text:0000267C $LN37           db 'prop',0             ; DATA XREF: .text:00002678o
.text:00002681 $LN36           db 'vt',0               ; DATA XREF: .text:0000266Co
.text:00002684 $LN35           db 'propID',0           ; DATA XREF: .text:00002660o
.text:0000268B $LN34           db 'name',0             ; DATA XREF: .text:00002654o
.text:00002690 $LN33           db 'numProps',0         ; DATA XREF: .text:00002648o
.text:00002699 $LN32           db 'vt',0               ; DATA XREF: .text:0000263Co
.text:0000269C $LN31           db 'propID',0           ; DATA XREF: .text:00002630o
.text:000026A3 $LN30           db 'name',0             ; DATA XREF: .text:00002624o
.text:000026A8 $LN29           db 'numProps',0         ; DATA XREF: .text:00002618o
.text:000026B1                 align 4
.text:000026B4
.text:000026B4 ; =============== S U B R O U T I N E =======================================
.text:000026B4
.text:000026B4 ; Attributes: bp-based frame
.text:000026B4
.text:000026B4 ; void __stdcall PrintPropNameAndNumber(class CStdOutStream &, unsigned long, unsigned __int64)
.text:000026B4 ?PrintPropNameAndNumber@@YGXAAVCStdOutStream@@K_K@Z proc near
.text:000026B4                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+1CBp
.text:000026B4
.text:000026B4 arg_0           = dword ptr  8
.text:000026B4 arg_4           = dword ptr  0Ch
.text:000026B4 arg_8           = dword ptr  10h
.text:000026B4 arg_C           = dword ptr  14h
.text:000026B4
.text:000026B4                 push    ebp
.text:000026B5                 mov     ebp, esp
.text:000026B7                 mov     eax, [ebp+arg_4]
.text:000026BA                 push    eax
.text:000026BB                 mov     ecx, [ebp+arg_0]
.text:000026BE                 push    ecx
.text:000026BF                 call    ?PrintPropName_and_Eq@@YGXAAVCStdOutStream@@K@Z ; PrintPropName_and_Eq(CStdOutStream &,ulong)
.text:000026C4                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000026C9                 mov     edx, [ebp+arg_C]
.text:000026CC                 push    edx
.text:000026CD                 mov     eax, [ebp+arg_8]
.text:000026D0                 push    eax
.text:000026D1                 mov     ecx, [ebp+arg_0]
.text:000026D4                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:000026D9                 mov     ecx, eax
.text:000026DB                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000026E0                 cmp     ebp, esp
.text:000026E2                 call    __RTC_CheckEsp
.text:000026E7                 pop     ebp
.text:000026E8                 retn    10h
.text:000026E8 ?PrintPropNameAndNumber@@YGXAAVCStdOutStream@@K_K@Z endp
.text:000026E8
.text:000026E8 ; ---------------------------------------------------------------------------
.text:000026EB                 db 9 dup(0CCh)
.text:000026F4
.text:000026F4 ; =============== S U B R O U T I N E =======================================
.text:000026F4
.text:000026F4 ; Attributes: bp-based frame
.text:000026F4
.text:000026F4 ; void __stdcall PrintPropName_and_Eq(class CStdOutStream &, unsigned long)
.text:000026F4 ?PrintPropName_and_Eq@@YGXAAVCStdOutStream@@K@Z proc near
.text:000026F4                                         ; CODE XREF: PrintPropNameAndNumber(CStdOutStream &,ulong,unsigned __int64)+Bp
.text:000026F4                                         ; PrintPropNameAndNumber_Signed(CStdOutStream &,ulong,__int64)+Bp
.text:000026F4
.text:000026F4 var_20          = dword ptr -20h
.text:000026F4 var_1C          = byte ptr -1Ch
.text:000026F4 var_18          = dword ptr -18h
.text:000026F4 var_14          = dword ptr -14h
.text:000026F4 var_10          = dword ptr -10h
.text:000026F4 var_C           = dword ptr -0Ch
.text:000026F4 Str             = dword ptr -8
.text:000026F4 var_4           = dword ptr -4
.text:000026F4 arg_0           = dword ptr  8
.text:000026F4 arg_4           = dword ptr  0Ch
.text:000026F4
.text:000026F4                 push    ebp
.text:000026F5                 mov     ebp, esp
.text:000026F7                 sub     esp, 20h
.text:000026FA                 mov     eax, 0CCCCCCCCh
.text:000026FF                 mov     [ebp+var_20], eax
.text:00002702                 mov     dword ptr [ebp+var_1C], eax
.text:00002705                 mov     [ebp+var_18], eax
.text:00002708                 mov     [ebp+var_14], eax
.text:0000270B                 mov     [ebp+var_10], eax
.text:0000270E                 mov     [ebp+var_C], eax
.text:00002711                 mov     [ebp+Str], eax
.text:00002714                 mov     [ebp+var_4], eax
.text:00002717                 mov     eax, dword ptr ds:___security_cookie
.text:0000271C                 xor     eax, ebp
.text:0000271E                 mov     [ebp+var_4], eax
.text:00002721                 cmp     [ebp+arg_4], 5Fh ; '_'
.text:00002725                 jnb     short loc_2736
.text:00002727                 mov     eax, [ebp+arg_4]
.text:0000272A                 mov     ecx, _kPropIdToName[eax*4]
.text:00002731                 mov     [ebp+Str], ecx
.text:00002734                 jmp     short loc_2749
.text:00002736 ; ---------------------------------------------------------------------------
.text:00002736
.text:00002736 loc_2736:                               ; CODE XREF: PrintPropName_and_Eq(CStdOutStream &,ulong)+31j
.text:00002736                 lea     edx, [ebp+var_1C]
.text:00002739                 push    edx             ; char *
.text:0000273A                 mov     eax, [ebp+arg_4]
.text:0000273D                 push    eax             ; unsigned int
.text:0000273E                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00002743                 lea     ecx, [ebp+var_1C]
.text:00002746                 mov     [ebp+Str], ecx
.text:00002749
.text:00002749 loc_2749:                               ; CODE XREF: PrintPropName_and_Eq(CStdOutStream &,ulong)+40j
.text:00002749                 push    offset $SG73217 ; " = "
.text:0000274E                 mov     edx, [ebp+Str]
.text:00002751                 push    edx             ; Str
.text:00002752                 mov     ecx, [ebp+arg_0]
.text:00002755                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000275A                 mov     ecx, eax
.text:0000275C                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002761                 push    edx
.text:00002762                 mov     ecx, ebp
.text:00002764                 push    eax
.text:00002765                 lea     edx, $LN7_1
.text:0000276B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002770                 pop     eax
.text:00002771                 pop     edx
.text:00002772                 mov     ecx, [ebp+var_4]
.text:00002775                 xor     ecx, ebp
.text:00002777                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000277C                 add     esp, 20h
.text:0000277F                 cmp     ebp, esp
.text:00002781                 call    __RTC_CheckEsp
.text:00002786                 mov     esp, ebp
.text:00002788                 pop     ebp
.text:00002789                 retn    8
.text:00002789 ?PrintPropName_and_Eq@@YGXAAVCStdOutStream@@K@Z endp
.text:00002789
.text:00002789 ; ---------------------------------------------------------------------------
.text:0000278C $LN7_1          dd 1                    ; DATA XREF: PrintPropName_and_Eq(CStdOutStream &,ulong)+71o
.text:00002790                 dd offset $LN6_3
.text:00002794 $LN6_3          dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:00002790o
.text:0000279C                 dd offset $LN5_2        ; "temp"
.text:000027A0 $LN5_2          db 'temp',0             ; DATA XREF: .text:0000279Co
.text:000027A5                 db 0Fh dup(0CCh)
.text:000027B4
.text:000027B4 ; =============== S U B R O U T I N E =======================================
.text:000027B4
.text:000027B4 ; Attributes: bp-based frame
.text:000027B4
.text:000027B4 ; void __stdcall PrintPropNameAndNumber_Signed(class CStdOutStream &, unsigned long, __int64)
.text:000027B4 ?PrintPropNameAndNumber_Signed@@YGXAAVCStdOutStream@@K_J@Z proc near
.text:000027B4                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+16Bp
.text:000027B4
.text:000027B4 arg_0           = dword ptr  8
.text:000027B4 arg_4           = dword ptr  0Ch
.text:000027B4 arg_8           = dword ptr  10h
.text:000027B4 arg_C           = dword ptr  14h
.text:000027B4
.text:000027B4                 push    ebp
.text:000027B5                 mov     ebp, esp
.text:000027B7                 mov     eax, [ebp+arg_4]
.text:000027BA                 push    eax
.text:000027BB                 mov     ecx, [ebp+arg_0]
.text:000027BE                 push    ecx
.text:000027BF                 call    ?PrintPropName_and_Eq@@YGXAAVCStdOutStream@@K@Z ; PrintPropName_and_Eq(CStdOutStream &,ulong)
.text:000027C4                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000027C9                 mov     edx, [ebp+arg_C]
.text:000027CC                 push    edx
.text:000027CD                 mov     eax, [ebp+arg_8]
.text:000027D0                 push    eax
.text:000027D1                 mov     ecx, [ebp+arg_0]
.text:000027D4                 call    ??6CStdOutStream@@QAEAAV0@_J@Z ; CStdOutStream::operator<<(__int64)
.text:000027D9                 mov     ecx, eax
.text:000027DB                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000027E0                 cmp     ebp, esp
.text:000027E2                 call    __RTC_CheckEsp
.text:000027E7                 pop     ebp
.text:000027E8                 retn    10h
.text:000027E8 ?PrintPropNameAndNumber_Signed@@YGXAAVCStdOutStream@@K_J@Z endp
.text:000027E8
.text:000027E8 ; ---------------------------------------------------------------------------
.text:000027EB                 db 9 dup(0CCh)
.text:000027F4
.text:000027F4 ; =============== S U B R O U T I N E =======================================
.text:000027F4
.text:000027F4 ; Attributes: bp-based frame
.text:000027F4
.text:000027F4 ; int __stdcall PrintPropPair(int, char *Str, int)
.text:000027F4 ?PrintPropPair@@YGXAAVCStdOutStream@@PBDPB_W@Z proc near
.text:000027F4                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+99p
.text:000027F4                                         ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+135p ...
.text:000027F4
.text:000027F4 arg_0           = dword ptr  8
.text:000027F4 Str             = dword ptr  0Ch
.text:000027F4 arg_8           = dword ptr  10h
.text:000027F4
.text:000027F4                 push    ebp
.text:000027F5                 mov     ebp, esp
.text:000027F7                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000027FC                 mov     eax, [ebp+arg_8]
.text:000027FF                 push    eax
.text:00002800                 push    offset $SG73234 ; " = "
.text:00002805                 mov     ecx, [ebp+Str]
.text:00002808                 push    ecx             ; Str
.text:00002809                 mov     ecx, [ebp+arg_0]
.text:0000280C                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002811                 mov     ecx, eax
.text:00002813                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002818                 mov     ecx, eax
.text:0000281A                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:0000281F                 mov     ecx, eax
.text:00002821                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002826                 cmp     ebp, esp
.text:00002828                 call    __RTC_CheckEsp
.text:0000282D                 pop     ebp
.text:0000282E                 retn    0Ch
.text:0000282E ?PrintPropPair@@YGXAAVCStdOutStream@@PBDPB_W@Z endp
.text:0000282E
.text:0000282E ; ---------------------------------------------------------------------------
.text:00002831                 align 4
.text:00002834
.text:00002834 ; =============== S U B R O U T I N E =======================================
.text:00002834
.text:00002834 ; Attributes: bp-based frame
.text:00002834
.text:00002834 ; int __stdcall PrintPropertyPair2(int, unsigned __int32, int, struct tagPROPVARIANT *)
.text:00002834 ?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z proc near
.text:00002834                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+46Ep
.text:00002834                                         ; PrintArcProp(CStdOutStream &,IInArchive *,ulong,wchar_t const *)+A7p
.text:00002834
.text:00002834 var_48          = byte ptr -48h
.text:00002834 var_44          = byte ptr -44h
.text:00002834 var_30          = byte ptr -30h
.text:00002834 var_1C          = byte ptr -1Ch
.text:00002834 var_C           = dword ptr -0Ch
.text:00002834 var_4           = dword ptr -4
.text:00002834 arg_0           = dword ptr  8
.text:00002834 arg_4           = dword ptr  0Ch
.text:00002834 arg_8           = dword ptr  10h
.text:00002834 arg_C           = dword ptr  14h
.text:00002834
.text:00002834                 push    ebp
.text:00002835                 mov     ebp, esp
.text:00002837                 push    0FFFFFFFFh
.text:00002839                 push    offset __ehhandler$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z
.text:0000283E                 mov     eax, large fs:0
.text:00002844                 push    eax
.text:00002845                 sub     esp, 3Ch
.text:00002848                 push    edi
.text:00002849                 lea     edi, [ebp+var_48]
.text:0000284C                 mov     ecx, 0Fh
.text:00002851                 mov     eax, 0CCCCCCCCh
.text:00002856                 rep stosd
.text:00002858                 mov     eax, dword ptr ds:___security_cookie
.text:0000285D                 xor     eax, ebp
.text:0000285F                 push    eax
.text:00002860                 lea     eax, [ebp+var_C]
.text:00002863                 mov     large fs:0, eax
.text:00002869                 lea     ecx, [ebp+var_1C]
.text:0000286C                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00002871                 mov     [ebp+var_4], 0
.text:00002878                 push    1               ; bool
.text:0000287A                 mov     eax, [ebp+arg_4]
.text:0000287D                 push    eax             ; unsigned __int32
.text:0000287E                 mov     ecx, [ebp+arg_C]
.text:00002881                 push    ecx             ; struct tagPROPVARIANT *
.text:00002882                 lea     edx, [ebp+var_1C]
.text:00002885                 push    edx             ; struct UString *
.text:00002886                 call    ?ConvertPropertyToString@@YGXAAVUString@@ABUtagPROPVARIANT@@K_N@Z ; ConvertPropertyToString(UString &,tagPROPVARIANT const &,ulong,bool)
.text:0000288B                 lea     ecx, [ebp+var_1C] ; this
.text:0000288E                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00002893                 movzx   eax, al
.text:00002896                 test    eax, eax
.text:00002898                 jnz     loc_2948
.text:0000289E                 lea     ecx, [ebp+var_30]
.text:000028A1                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000028A6                 mov     byte ptr [ebp+var_4], 1
.text:000028AA                 lea     ecx, [ebp+var_44]
.text:000028AD                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000028B2                 mov     byte ptr [ebp+var_4], 2
.text:000028B6                 lea     ecx, [ebp+var_44]
.text:000028B9                 push    ecx
.text:000028BA                 lea     edx, [ebp+var_30]
.text:000028BD                 push    edx
.text:000028BE                 mov     eax, [ebp+arg_8]
.text:000028C1                 push    eax
.text:000028C2                 mov     ecx, [ebp+arg_4]
.text:000028C5                 push    ecx
.text:000028C6                 call    ?GetPropName@@YGXKPB_WAAVAString@@AAVUString@@@Z ; GetPropName(ulong,wchar_t const *,AString &,UString &)
.text:000028CB                 lea     ecx, [ebp+var_30] ; this
.text:000028CE                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:000028D3                 movzx   edx, al
.text:000028D6                 test    edx, edx
.text:000028D8                 jnz     short loc_28F7
.text:000028DA                 lea     ecx, [ebp+var_1C]
.text:000028DD                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000028E2                 push    eax             ; int
.text:000028E3                 lea     ecx, [ebp+var_30]
.text:000028E6                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000028EB                 push    eax             ; Str
.text:000028EC                 mov     eax, [ebp+arg_0]
.text:000028EF                 push    eax             ; int
.text:000028F0                 call    ?PrintPropPair@@YGXAAVCStdOutStream@@PBDPB_W@Z ; PrintPropPair(CStdOutStream &,char const *,wchar_t const *)
.text:000028F5                 jmp     short loc_2930
.text:000028F7 ; ---------------------------------------------------------------------------
.text:000028F7
.text:000028F7 loc_28F7:                               ; CODE XREF: PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)+A4j
.text:000028F7                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000028FC                 lea     ecx, [ebp+var_1C]
.text:000028FF                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002904                 push    eax             ; Str
.text:00002905                 push    offset $SG73247
.text:0000290A                 lea     ecx, [ebp+var_44]
.text:0000290D                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002912                 push    eax
.text:00002913                 mov     ecx, [ebp+arg_0]
.text:00002916                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:0000291B                 mov     ecx, eax
.text:0000291D                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002922                 mov     ecx, eax
.text:00002924                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00002929                 mov     ecx, eax
.text:0000292B                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002930
.text:00002930 loc_2930:                               ; CODE XREF: PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)+C1j
.text:00002930                 mov     byte ptr [ebp+var_4], 1
.text:00002934                 lea     ecx, [ebp+var_44] ; this
.text:00002937                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000293C                 mov     byte ptr [ebp+var_4], 0
.text:00002940                 lea     ecx, [ebp+var_30] ; this
.text:00002943                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00002948
.text:00002948 loc_2948:                               ; CODE XREF: PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)+64j
.text:00002948                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000294F                 lea     ecx, [ebp+var_1C] ; this
.text:00002952                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002957                 push    edx
.text:00002958                 mov     ecx, ebp
.text:0000295A                 push    eax
.text:0000295B                 lea     edx, $LN14_1
.text:00002961                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002966                 pop     eax
.text:00002967                 pop     edx
.text:00002968                 mov     ecx, [ebp+var_C]
.text:0000296B                 mov     large fs:0, ecx
.text:00002972                 pop     ecx
.text:00002973                 pop     edi
.text:00002974                 add     esp, 48h
.text:00002977                 cmp     ebp, esp
.text:00002979                 call    __RTC_CheckEsp
.text:0000297E                 mov     esp, ebp
.text:00002980                 pop     ebp
.text:00002981                 retn    10h
.text:00002981 ?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z endp
.text:00002981
.text:00002981 ; ---------------------------------------------------------------------------
.text:00002984 $LN14_1         dd 3                    ; DATA XREF: PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)+127o
.text:00002988                 dd offset $LN13_1
.text:0000298C $LN13_1         dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:00002988o
.text:00002994                 dd offset $LN9_1        ; "s"
.text:00002998                 dd 0FFFFFFD0h, 0Ch
.text:000029A0                 dd offset $LN10_1       ; "nameA"
.text:000029A4                 dd 0FFFFFFBCh, 0Ch
.text:000029AC                 dd offset $LN11_1       ; "nameU"
.text:000029B0 $LN11_1         db 'nameU',0            ; DATA XREF: .text:000029ACo
.text:000029B6 $LN10_1         db 'nameA',0            ; DATA XREF: .text:000029A0o
.text:000029BC $LN9_1          db 's',0                ; DATA XREF: .text:00002994o
.text:000029BE                 db 6 dup(0CCh)
.text:000029C4
.text:000029C4 ; =============== S U B R O U T I N E =======================================
.text:000029C4
.text:000029C4 ; Attributes: bp-based frame
.text:000029C4
.text:000029C4 ; long __stdcall PrintArcProp(class CStdOutStream &, struct IInArchive *, unsigned long, wchar_t const *)
.text:000029C4 ?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z proc near
.text:000029C4                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+187p
.text:000029C4                                         ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+296p
.text:000029C4
.text:000029C4 var_30          = dword ptr -30h
.text:000029C4 var_2C          = dword ptr -2Ch
.text:000029C4 var_28          = dword ptr -28h
.text:000029C4 var_24          = dword ptr -24h
.text:000029C4 var_20          = tagPROPVARIANT ptr -20h
.text:000029C4 var_10          = dword ptr -10h
.text:000029C4 var_C           = dword ptr -0Ch
.text:000029C4 var_4           = dword ptr -4
.text:000029C4 arg_0           = dword ptr  8
.text:000029C4 arg_4           = dword ptr  0Ch
.text:000029C4 arg_8           = dword ptr  10h
.text:000029C4 arg_C           = dword ptr  14h
.text:000029C4
.text:000029C4                 push    ebp
.text:000029C5                 mov     ebp, esp
.text:000029C7                 push    0FFFFFFFFh
.text:000029C9                 push    offset __ehhandler$?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z
.text:000029CE                 mov     eax, large fs:0
.text:000029D4                 push    eax
.text:000029D5                 sub     esp, 24h
.text:000029D8                 push    esi
.text:000029D9                 mov     eax, 0CCCCCCCCh
.text:000029DE                 mov     [ebp+var_30], eax
.text:000029E1                 mov     [ebp+var_2C], eax
.text:000029E4                 mov     [ebp+var_28], eax
.text:000029E7                 mov     [ebp+var_24], eax
.text:000029EA                 mov     dword ptr [ebp+var_20.anonymous_0], eax
.text:000029ED                 mov     dword ptr [ebp+var_20.anonymous_0+4], eax
.text:000029F0                 mov     dword ptr [ebp+var_20.anonymous_0+8], eax
.text:000029F3                 mov     dword ptr [ebp+var_20.anonymous_0+0Ch], eax
.text:000029F6                 mov     [ebp+var_10], eax
.text:000029F9                 mov     eax, dword ptr ds:___security_cookie
.text:000029FE                 xor     eax, ebp
.text:00002A00                 push    eax
.text:00002A01                 lea     eax, [ebp+var_C]
.text:00002A04                 mov     large fs:0, eax
.text:00002A0A                 lea     ecx, [ebp+var_20] ; this
.text:00002A0D                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00002A12                 mov     [ebp+var_4], 0
.text:00002A19                 mov     esi, esp
.text:00002A1B                 lea     eax, [ebp+var_20]
.text:00002A1E                 push    eax
.text:00002A1F                 mov     ecx, [ebp+arg_8]
.text:00002A22                 push    ecx
.text:00002A23                 mov     edx, [ebp+arg_4]
.text:00002A26                 mov     eax, [edx]
.text:00002A28                 mov     ecx, [ebp+arg_4]
.text:00002A2B                 push    ecx
.text:00002A2C                 mov     edx, [eax+20h]
.text:00002A2F                 call    edx
.text:00002A31                 cmp     esi, esp
.text:00002A33                 call    __RTC_CheckEsp
.text:00002A38                 mov     [ebp+var_28], eax
.text:00002A3B                 cmp     [ebp+var_28], 0
.text:00002A3F                 jz      short loc_2A5B
.text:00002A41                 mov     eax, [ebp+var_28]
.text:00002A44                 mov     [ebp+var_2C], eax
.text:00002A47                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002A4E                 lea     ecx, [ebp+var_20] ; this
.text:00002A51                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002A56                 mov     eax, [ebp+var_2C]
.text:00002A59                 jmp     short loc_2A89
.text:00002A5B ; ---------------------------------------------------------------------------
.text:00002A5B
.text:00002A5B loc_2A5B:                               ; CODE XREF: PrintArcProp(CStdOutStream &,IInArchive *,ulong,wchar_t const *)+7Bj
.text:00002A5B                 lea     ecx, [ebp+var_20]
.text:00002A5E                 push    ecx             ; struct tagPROPVARIANT *
.text:00002A5F                 mov     edx, [ebp+arg_C]
.text:00002A62                 push    edx             ; int
.text:00002A63                 mov     eax, [ebp+arg_8]
.text:00002A66                 push    eax             ; unsigned __int32
.text:00002A67                 mov     ecx, [ebp+arg_0]
.text:00002A6A                 push    ecx             ; int
.text:00002A6B                 call    ?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z ; PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)
.text:00002A70                 mov     [ebp+var_30], 0
.text:00002A77                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002A7E                 lea     ecx, [ebp+var_20] ; this
.text:00002A81                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002A86                 mov     eax, [ebp+var_30]
.text:00002A89
.text:00002A89 loc_2A89:                               ; CODE XREF: PrintArcProp(CStdOutStream &,IInArchive *,ulong,wchar_t const *)+95j
.text:00002A89                 push    edx
.text:00002A8A                 mov     ecx, ebp
.text:00002A8C                 push    eax
.text:00002A8D                 lea     edx, $LN8_0
.text:00002A93                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002A98                 pop     eax
.text:00002A99                 pop     edx
.text:00002A9A                 mov     ecx, [ebp+var_C]
.text:00002A9D                 mov     large fs:0, ecx
.text:00002AA4                 pop     ecx
.text:00002AA5                 pop     esi
.text:00002AA6                 add     esp, 30h
.text:00002AA9                 cmp     ebp, esp
.text:00002AAB                 call    __RTC_CheckEsp
.text:00002AB0                 mov     esp, ebp
.text:00002AB2                 pop     ebp
.text:00002AB3                 retn    10h
.text:00002AB3 ?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z endp
.text:00002AB3
.text:00002AB3 ; ---------------------------------------------------------------------------
.text:00002AB6                 align 4
.text:00002AB8 $LN8_0          dd 1                    ; DATA XREF: PrintArcProp(CStdOutStream &,IInArchive *,ulong,wchar_t const *)+C9o
.text:00002ABC                 dd offset $LN7_2
.text:00002AC0 $LN7_2          dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:00002ABCo
.text:00002AC8                 dd offset $LN5_3        ; "prop"
.text:00002ACC $LN5_3          db 'prop',0             ; DATA XREF: .text:00002AC8o
.text:00002AD1                 align 4
.text:00002AD4
.text:00002AD4 ; =============== S U B R O U T I N E =======================================
.text:00002AD4
.text:00002AD4 ; Attributes: bp-based frame
.text:00002AD4
.text:00002AD4 ; void __stdcall PrintArcTypeError(class CStdOutStream &, class UString const &, bool)
.text:00002AD4 ?PrintArcTypeError@@YGXAAVCStdOutStream@@ABVUString@@_N@Z proc near
.text:00002AD4                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+102p
.text:00002AD4                                         ; Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &)+62p ...
.text:00002AD4
.text:00002AD4 Str             = dword ptr -4
.text:00002AD4 arg_0           = dword ptr  8
.text:00002AD4 arg_4           = dword ptr  0Ch
.text:00002AD4 arg_8           = byte ptr  10h
.text:00002AD4
.text:00002AD4                 push    ebp
.text:00002AD5                 mov     ebp, esp
.text:00002AD7                 push    ecx
.text:00002AD8                 mov     [ebp+Str], 0CCCCCCCCh
.text:00002ADF                 movzx   eax, [ebp+arg_8]
.text:00002AE3                 test    eax, eax
.text:00002AE5                 jz      short loc_2AF0
.text:00002AE7                 mov     [ebp+Str], offset $SG73266 ; "WARNING"
.text:00002AEE                 jmp     short loc_2AF7
.text:00002AF0 ; ---------------------------------------------------------------------------
.text:00002AF0
.text:00002AF0 loc_2AF0:                               ; CODE XREF: PrintArcTypeError(CStdOutStream &,UString const &,bool)+11j
.text:00002AF0                 mov     [ebp+Str], offset $SG73267 ; "ERROR"
.text:00002AF7
.text:00002AF7 loc_2AF7:                               ; CODE XREF: PrintArcTypeError(CStdOutStream &,UString const &,bool)+1Aj
.text:00002AF7                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002AFC                 push    offset $SG73269 ; "] archive"
.text:00002B01                 mov     ecx, [ebp+arg_4]
.text:00002B04                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002B09                 push    eax             ; Str
.text:00002B0A                 push    offset $SG73268 ; ": Can not open the file as ["
.text:00002B0F                 mov     ecx, [ebp+Str]
.text:00002B12                 push    ecx             ; Str
.text:00002B13                 push    offset $SG73265 ; "Open "
.text:00002B18                 mov     ecx, [ebp+arg_0]
.text:00002B1B                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002B20                 mov     ecx, eax
.text:00002B22                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002B27                 mov     ecx, eax
.text:00002B29                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002B2E                 mov     ecx, eax
.text:00002B30                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00002B35                 mov     ecx, eax
.text:00002B37                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002B3C                 mov     ecx, eax
.text:00002B3E                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002B43                 add     esp, 4
.text:00002B46                 cmp     ebp, esp
.text:00002B48                 call    __RTC_CheckEsp
.text:00002B4D                 mov     esp, ebp
.text:00002B4F                 pop     ebp
.text:00002B50                 retn    0Ch
.text:00002B50 ?PrintArcTypeError@@YGXAAVCStdOutStream@@ABVUString@@_N@Z endp
.text:00002B50
.text:00002B50 ; ---------------------------------------------------------------------------
.text:00002B53                 align 4
.text:00002B54
.text:00002B54 ; =============== S U B R O U T I N E =======================================
.text:00002B54
.text:00002B54 ; Attributes: bp-based frame
.text:00002B54
.text:00002B54 ; int __stdcall ErrorInfo_Print(struct CStdOutStream *, CArcErrorInfo *)
.text:00002B54 ?ErrorInfo_Print@@YGXAAVCStdOutStream@@ABUCArcErrorInfo@@@Z proc near
.text:00002B54                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+142p
.text:00002B54                                         ; Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &)+9Bp
.text:00002B54
.text:00002B54 arg_0           = dword ptr  8
.text:00002B54 arg_4           = dword ptr  0Ch
.text:00002B54
.text:00002B54                 push    ebp
.text:00002B55                 mov     ebp, esp
.text:00002B57                 mov     ecx, [ebp+arg_4] ; this
.text:00002B5A                 call    ?GetErrorFlags@CArcErrorInfo@@QBEIXZ ; CArcErrorInfo::GetErrorFlags(void)
.text:00002B5F                 push    eax             ; unsigned int
.text:00002B60                 push    offset $SG73281 ; "ERRORS:"
.text:00002B65                 mov     eax, [ebp+arg_0]
.text:00002B68                 push    eax             ; struct CStdOutStream *
.text:00002B69                 call    ?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z ; PrintErrorFlags(CStdOutStream &,char const *,uint)
.text:00002B6E                 mov     ecx, [ebp+arg_4]
.text:00002B71                 add     ecx, 18h        ; this
.text:00002B74                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00002B79                 movzx   ecx, al
.text:00002B7C                 test    ecx, ecx
.text:00002B7E                 jnz     short loc_2B9A
.text:00002B80                 mov     ecx, [ebp+arg_4]
.text:00002B83                 add     ecx, 18h
.text:00002B86                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002B8B                 push    eax             ; int
.text:00002B8C                 push    offset $SG73283 ; "ERROR"
.text:00002B91                 mov     edx, [ebp+arg_0]
.text:00002B94                 push    edx             ; int
.text:00002B95                 call    ?PrintPropPair@@YGXAAVCStdOutStream@@PBDPB_W@Z ; PrintPropPair(CStdOutStream &,char const *,wchar_t const *)
.text:00002B9A
.text:00002B9A loc_2B9A:                               ; CODE XREF: ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)+2Aj
.text:00002B9A                 mov     ecx, [ebp+arg_4] ; this
.text:00002B9D                 call    ?GetWarningFlags@CArcErrorInfo@@QBEIXZ ; CArcErrorInfo::GetWarningFlags(void)
.text:00002BA2                 push    eax             ; unsigned int
.text:00002BA3                 push    offset $SG73284 ; "WARNINGS:"
.text:00002BA8                 mov     eax, [ebp+arg_0]
.text:00002BAB                 push    eax             ; struct CStdOutStream *
.text:00002BAC                 call    ?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z ; PrintErrorFlags(CStdOutStream &,char const *,uint)
.text:00002BB1                 mov     ecx, [ebp+arg_4]
.text:00002BB4                 add     ecx, 24h ; '$'  ; this
.text:00002BB7                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00002BBC                 movzx   ecx, al
.text:00002BBF                 test    ecx, ecx
.text:00002BC1                 jnz     short loc_2BDD
.text:00002BC3                 mov     ecx, [ebp+arg_4]
.text:00002BC6                 add     ecx, 24h ; '$'
.text:00002BC9                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002BCE                 push    eax             ; int
.text:00002BCF                 push    offset $SG73286 ; "WARNING"
.text:00002BD4                 mov     edx, [ebp+arg_0]
.text:00002BD7                 push    edx             ; int
.text:00002BD8                 call    ?PrintPropPair@@YGXAAVCStdOutStream@@PBDPB_W@Z ; PrintPropPair(CStdOutStream &,char const *,wchar_t const *)
.text:00002BDD
.text:00002BDD loc_2BDD:                               ; CODE XREF: ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)+6Dj
.text:00002BDD                 cmp     ebp, esp
.text:00002BDF                 call    __RTC_CheckEsp
.text:00002BE4                 pop     ebp
.text:00002BE5                 retn    8
.text:00002BE5 ?ErrorInfo_Print@@YGXAAVCStdOutStream@@ABUCArcErrorInfo@@@Z endp
.text:00002BE5
.text:00002BE5 ; ---------------------------------------------------------------------------
.text:00002BE8                 db 0Ch dup(0CCh)
.text:00002BF4
.text:00002BF4 ; =============== S U B R O U T I N E =======================================
.text:00002BF4
.text:00002BF4 ; Attributes: bp-based frame
.text:00002BF4
.text:00002BF4 ; __int32 __stdcall Print_OpenArchive_Error(struct CStdOutStream *, const struct CCodecs *, const struct CArchiveLink *)
.text:00002BF4                 public ?Print_OpenArchive_Error@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z
.text:00002BF4 ?Print_OpenArchive_Error@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z proc near
.text:00002BF4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+5D4p
.text:00002BF4
.text:00002BF4 arg_0           = dword ptr  8
.text:00002BF4 arg_4           = dword ptr  0Ch
.text:00002BF4 arg_8           = dword ptr  10h
.text:00002BF4
.text:00002BF4                 push    ebp
.text:00002BF5                 mov     ebp, esp
.text:00002BF7                 mov     eax, [ebp+arg_8]
.text:00002BFA                 movzx   ecx, byte ptr [eax+21h]
.text:00002BFE                 test    ecx, ecx
.text:00002C00                 jz      short loc_2C11
.text:00002C02                 push    offset $SG73355 ; "Can not open encrypted archive. Wrong p"...
.text:00002C07                 mov     ecx, [ebp+arg_0]
.text:00002C0A                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002C0F                 jmp     short loc_2C6A
.text:00002C11 ; ---------------------------------------------------------------------------
.text:00002C11
.text:00002C11 loc_2C11:                               ; CODE XREF: Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &)+Cj
.text:00002C11                 mov     edx, [ebp+arg_8]
.text:00002C14                 cmp     dword ptr [edx+3Ch], 0
.text:00002C18                 jl      short loc_2C5D
.text:00002C1A                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002C1F                 mov     ecx, [ebp+arg_8]
.text:00002C22                 add     ecx, 24h ; '$'
.text:00002C25                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002C2A                 push    eax
.text:00002C2B                 mov     ecx, [ebp+arg_0]
.text:00002C2E                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00002C33                 mov     ecx, eax
.text:00002C35                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002C3A                 push    0
.text:00002C3C                 mov     eax, [ebp+arg_8]
.text:00002C3F                 mov     ecx, [eax+3Ch]
.text:00002C42                 push    ecx
.text:00002C43                 mov     ecx, [ebp+arg_4]
.text:00002C46                 add     ecx, 8
.text:00002C49                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:00002C4E                 add     eax, 0Ch
.text:00002C51                 push    eax
.text:00002C52                 mov     edx, [ebp+arg_0]
.text:00002C55                 push    edx
.text:00002C56                 call    ?PrintArcTypeError@@YGXAAVCStdOutStream@@ABVUString@@_N@Z ; PrintArcTypeError(CStdOutStream &,UString const &,bool)
.text:00002C5B                 jmp     short loc_2C6A
.text:00002C5D ; ---------------------------------------------------------------------------
.text:00002C5D
.text:00002C5D loc_2C5D:                               ; CODE XREF: Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &)+24j
.text:00002C5D                 push    offset $SG73359 ; "Can not open the file as archive"
.text:00002C62                 mov     ecx, [ebp+arg_0]
.text:00002C65                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002C6A
.text:00002C6A loc_2C6A:                               ; CODE XREF: Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &)+1Bj
.text:00002C6A                                         ; Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &)+67j
.text:00002C6A                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002C6F                 mov     ecx, [ebp+arg_0]
.text:00002C72                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002C77                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002C7C                 mov     ecx, [ebp+arg_0]
.text:00002C7F                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002C84                 mov     eax, [ebp+arg_8]
.text:00002C87                 add     eax, 30h ; '0'
.text:00002C8A                 push    eax             ; CArcErrorInfo *
.text:00002C8B                 mov     ecx, [ebp+arg_0]
.text:00002C8E                 push    ecx             ; struct CStdOutStream *
.text:00002C8F                 call    ?ErrorInfo_Print@@YGXAAVCStdOutStream@@ABUCArcErrorInfo@@@Z ; ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)
.text:00002C94                 xor     eax, eax
.text:00002C96                 cmp     ebp, esp
.text:00002C98                 call    __RTC_CheckEsp
.text:00002C9D                 pop     ebp
.text:00002C9E                 retn    0Ch
.text:00002C9E ?Print_OpenArchive_Error@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z endp
.text:00002C9E
.text:00002C9E ; ---------------------------------------------------------------------------
.text:00002CA1                 align 4
.text:00002CA4
.text:00002CA4 ; =============== S U B R O U T I N E =======================================
.text:00002CA4
.text:00002CA4 ; Attributes: bp-based frame
.text:00002CA4
.text:00002CA4 ; int __stdcall ListArchives(struct CCodecs *, int, int, char, int, int, char, char, struct NWildcard::CCensorNode *, char, char, int, int, int, int, int)
.text:00002CA4                 public ?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z
.text:00002CA4 ?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z proc near
.text:00002CA4
.text:00002CA4 var_520         = dword ptr -520h
.text:00002CA4 var_51C         = qword ptr -51Ch
.text:00002CA4 var_514         = dword ptr -514h
.text:00002CA4 var_510         = dword ptr -510h
.text:00002CA4 var_50C         = dword ptr -50Ch
.text:00002CA4 var_508         = dword ptr -508h
.text:00002CA4 var_504         = dword ptr -504h
.text:00002CA4 var_500         = dword ptr -500h
.text:00002CA4 var_4FC         = dword ptr -4FCh
.text:00002CA4 var_4F8         = dword ptr -4F8h
.text:00002CA4 var_4F4         = dword ptr -4F4h
.text:00002CA4 var_4F0         = dword ptr -4F0h
.text:00002CA4 var_4EC         = dword ptr -4ECh
.text:00002CA4 var_4E8         = dword ptr -4E8h
.text:00002CA4 var_4E4         = dword ptr -4E4h
.text:00002CA4 var_4E0         = dword ptr -4E0h
.text:00002CA4 var_4DC         = dword ptr -4DCh
.text:00002CA4 var_4D8         = dword ptr -4D8h
.text:00002CA4 var_4D4         = dword ptr -4D4h
.text:00002CA4 var_4D0         = dword ptr -4D0h
.text:00002CA4 var_4CC         = dword ptr -4CCh
.text:00002CA4 var_4C8         = dword ptr -4C8h
.text:00002CA4 var_4C4         = byte ptr -4C4h
.text:00002CA4 var_4B8         = dword ptr -4B8h
.text:00002CA4 var_4B4         = byte ptr -4B4h
.text:00002CA4 var_4A8         = dword ptr -4A8h
.text:00002CA4 var_4A4         = dword ptr -4A4h
.text:00002CA4 var_4A0         = dword ptr -4A0h
.text:00002CA4 var_49C         = dword ptr -49Ch
.text:00002CA4 var_498         = dword ptr -498h
.text:00002CA4 var_494         = dword ptr -494h
.text:00002CA4 var_48C         = qword ptr -48Ch
.text:00002CA4 var_47C         = qword ptr -47Ch
.text:00002CA4 var_46C         = byte ptr -46Ch
.text:00002CA4 var_45C         = dword ptr -45Ch
.text:00002CA4 var_458         = dword ptr -458h
.text:00002CA4 var_449         = byte ptr -449h
.text:00002CA4 var_444         = dword ptr -444h
.text:00002CA4 var_440         = dword ptr -440h
.text:00002CA4 var_43C         = dword ptr -43Ch
.text:00002CA4 var_431         = byte ptr -431h
.text:00002CA4 var_42C         = dword ptr -42Ch
.text:00002CA4 var_421         = byte ptr -421h
.text:00002CA4 var_41C         = dword ptr -41Ch
.text:00002CA4 var_418         = dword ptr -418h
.text:00002CA4 var_414         = dword ptr -414h
.text:00002CA4 var_40C         = byte ptr -40Ch
.text:00002CA4 var_3F8         = byte ptr -3F8h
.text:00002CA4 var_3B4         = dword ptr -3B4h
.text:00002CA4 var_3AC         = dword ptr -3ACh
.text:00002CA4 var_3A0         = byte ptr -3A0h
.text:00002CA4 var_390         = byte ptr -390h
.text:00002CA4 var_388         = byte ptr -388h
.text:00002CA4 var_368         = byte ptr -368h
.text:00002CA4 var_350         = byte ptr -350h
.text:00002CA4 var_330         = dword ptr -330h
.text:00002CA4 var_32C         = dword ptr -32Ch
.text:00002CA4 var_324         = dword ptr -324h
.text:00002CA4 var_320         = dword ptr -320h
.text:00002CA4 var_31C         = dword ptr -31Ch
.text:00002CA4 var_318         = dword ptr -318h
.text:00002CA4 var_314         = dword ptr -314h
.text:00002CA4 var_310         = dword ptr -310h
.text:00002CA4 var_30C         = dword ptr -30Ch
.text:00002CA4 var_308         = dword ptr -308h
.text:00002CA4 var_304         = dword ptr -304h
.text:00002CA4 var_300         = dword ptr -300h
.text:00002CA4 var_2F8         = dword ptr -2F8h
.text:00002CA4 var_2D0         = dword ptr -2D0h
.text:00002CA4 var_2CC         = dword ptr -2CCh
.text:00002CA4 var_2C8         = dword ptr -2C8h
.text:00002CA4 var_2B8         = dword ptr -2B8h
.text:00002CA4 var_2B4         = byte ptr -2B4h
.text:00002CA4 var_2B0         = byte ptr -2B0h
.text:00002CA4 var_298         = byte ptr -298h
.text:00002CA4 var_1D5         = byte ptr -1D5h
.text:00002CA4 var_1D4         = byte ptr -1D4h
.text:00002CA4 var_1C0         = byte ptr -1C0h
.text:00002CA4 var_1B4         = byte ptr -1B4h
.text:00002CA4 var_1A8         = dword ptr -1A8h
.text:00002CA4 var_1A4         = dword ptr -1A4h
.text:00002CA4 var_19C         = byte ptr -19Ch
.text:00002CA4 var_184         = dword ptr -184h
.text:00002CA4 var_15C         = dword ptr -15Ch
.text:00002CA4 var_154         = dword ptr -154h
.text:00002CA4 var_150         = dword ptr -150h
.text:00002CA4 var_118         = dword ptr -118h
.text:00002CA4 var_114         = dword ptr -114h
.text:00002CA4 var_110         = dword ptr -110h
.text:00002CA4 var_10C         = dword ptr -10Ch
.text:00002CA4 var_108         = dword ptr -108h
.text:00002CA4 var_104         = dword ptr -104h
.text:00002CA4 var_100         = dword ptr -100h
.text:00002CA4 var_FC          = dword ptr -0FCh
.text:00002CA4 var_F8          = dword ptr -0F8h
.text:00002CA4 var_F4          = dword ptr -0F4h
.text:00002CA4 var_F0          = dword ptr -0F0h
.text:00002CA4 var_E8          = byte ptr -0E8h
.text:00002CA4 var_DC          = byte ptr -0DCh
.text:00002CA4 var_5C          = byte ptr -5Ch
.text:00002CA4 var_50          = dword ptr -50h
.text:00002CA4 var_4C          = byte ptr -4Ch
.text:00002CA4 var_48          = byte ptr -48h
.text:00002CA4 var_24          = byte ptr -24h
.text:00002CA4 var_D           = byte ptr -0Dh
.text:00002CA4 var_C           = dword ptr -0Ch
.text:00002CA4 var_4           = dword ptr -4
.text:00002CA4 arg_0           = dword ptr  8
.text:00002CA4 arg_4           = dword ptr  0Ch
.text:00002CA4 arg_8           = dword ptr  10h
.text:00002CA4 arg_C           = byte ptr  14h
.text:00002CA4 arg_10          = dword ptr  18h
.text:00002CA4 arg_14          = dword ptr  1Ch
.text:00002CA4 arg_18          = byte ptr  20h
.text:00002CA4 arg_1C          = byte ptr  24h
.text:00002CA4 arg_20          = dword ptr  28h
.text:00002CA4 arg_24          = byte ptr  2Ch
.text:00002CA4 arg_28          = byte ptr  30h
.text:00002CA4 arg_2C          = dword ptr  34h
.text:00002CA4 arg_30          = dword ptr  38h
.text:00002CA4 arg_34          = dword ptr  3Ch
.text:00002CA4 arg_38          = dword ptr  40h
.text:00002CA4 arg_3C          = dword ptr  44h
.text:00002CA4
.text:00002CA4                 push    ebp
.text:00002CA5                 mov     ebp, esp
.text:00002CA7                 push    0FFFFFFFFh
.text:00002CA9                 push    offset __ehhandler$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z
.text:00002CAE                 mov     eax, large fs:0
.text:00002CB4                 push    eax
.text:00002CB5                 sub     esp, 514h
.text:00002CBB                 push    esi
.text:00002CBC                 push    edi
.text:00002CBD                 lea     edi, [ebp+var_520]
.text:00002CC3                 mov     ecx, 145h
.text:00002CC8                 mov     eax, 0CCCCCCCCh
.text:00002CCD                 rep stosd
.text:00002CCF                 mov     eax, dword ptr ds:___security_cookie
.text:00002CD4                 xor     eax, ebp
.text:00002CD6                 push    eax
.text:00002CD7                 lea     eax, [ebp+var_C]
.text:00002CDA                 mov     large fs:0, eax
.text:00002CE0                 mov     ecx, [ebp+arg_20] ; this
.text:00002CE3                 call    ?AreAllAllowed@CCensorNode@NWildcard@@QBE_NXZ ; NWildcard::CCensorNode::AreAllAllowed(void)
.text:00002CE8                 mov     [ebp+var_D], al
.text:00002CEB                 mov     eax, [ebp+arg_38]
.text:00002CEE                 mov     dword ptr [eax], 0
.text:00002CF4                 mov     dword ptr [eax+4], 0
.text:00002CFB                 mov     ecx, [ebp+arg_3C]
.text:00002CFE                 mov     dword ptr [ecx], 0
.text:00002D04                 mov     dword ptr [ecx+4], 0
.text:00002D0B                 lea     ecx, [ebp+var_5C]
.text:00002D0E                 call    ??0CFieldPrinter@@QAE@XZ ; CFieldPrinter::CFieldPrinter(void)
.text:00002D13                 mov     [ebp+var_4], 0
.text:00002D1A                 movzx   edx, [ebp+arg_28]
.text:00002D1E                 test    edx, edx
.text:00002D20                 jnz     short loc_2D31
.text:00002D22                 push    5               ; unsigned int
.text:00002D24                 push    offset _kStandardFieldTable ; struct CFieldInfoInit *
.text:00002D29                 lea     ecx, [ebp+var_5C] ; this
.text:00002D2C                 call    ?Init@CFieldPrinter@@QAEXPBUCFieldInfoInit@@I@Z ; CFieldPrinter::Init(CFieldInfoInit const *,uint)
.text:00002D31
.text:00002D31 loc_2D31:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+7Cj
.text:00002D31                 lea     ecx, [ebp+var_DC]
.text:00002D37                 call    ??0CListStat2@@QAE@XZ ; CListStat2::CListStat2(void)
.text:00002D3C                 mov     ecx, [ebp+arg_10]
.text:00002D3F                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00002D44                 push    eax
.text:00002D45                 lea     ecx, [ebp+var_E8]
.text:00002D4B                 call    ??0?$CObjArray@_N@@QAE@I@Z ; CObjArray<bool>::CObjArray<bool>(uint)
.text:00002D50                 mov     byte ptr [ebp+var_4], 1
.text:00002D54                 mov     [ebp+var_F0], 0
.text:00002D5E                 jmp     short loc_2D6F
.text:00002D60 ; ---------------------------------------------------------------------------
.text:00002D60
.text:00002D60 loc_2D60:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+F0j
.text:00002D60                 mov     eax, [ebp+var_F0]
.text:00002D66                 add     eax, 1
.text:00002D69                 mov     [ebp+var_F0], eax
.text:00002D6F
.text:00002D6F loc_2D6F:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+BAj
.text:00002D6F                 mov     ecx, [ebp+arg_10]
.text:00002D72                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00002D77                 cmp     [ebp+var_F0], eax
.text:00002D7D                 jnb     short loc_2D96
.text:00002D7F                 lea     ecx, [ebp+var_E8]
.text:00002D85                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00002D8A                 mov     ecx, [ebp+var_F0]
.text:00002D90                 mov     byte ptr [eax+ecx], 0
.text:00002D94                 jmp     short loc_2D60
.text:00002D96 ; ---------------------------------------------------------------------------
.text:00002D96
.text:00002D96 loc_2D96:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+D9j
.text:00002D96                 mov     [ebp+var_F8], 0
.text:00002DA0                 mov     [ebp+var_F4], 0
.text:00002DAA                 mov     [ebp+var_100], 0
.text:00002DB4                 mov     [ebp+var_FC], 0
.text:00002DBE                 mov     [ebp+var_108], 0
.text:00002DC8                 mov     [ebp+var_104], 0
.text:00002DD2                 mov     [ebp+var_10C], 0
.text:00002DDC                 mov     [ebp+var_F0], 0
.text:00002DE6                 jmp     short loc_2DF7
.text:00002DE8 ; ---------------------------------------------------------------------------
.text:00002DE8
.text:00002DE8 loc_2DE8:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+180j
.text:00002DE8                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+2F1j ...
.text:00002DE8                 mov     edx, [ebp+var_F0]
.text:00002DEE                 add     edx, 1
.text:00002DF1                 mov     [ebp+var_F0], edx
.text:00002DF7
.text:00002DF7 loc_2DF7:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+142j
.text:00002DF7                 mov     ecx, [ebp+arg_10]
.text:00002DFA                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00002DFF                 cmp     [ebp+var_F0], eax
.text:00002E05                 jnb     loc_42EF
.text:00002E0B                 lea     ecx, [ebp+var_E8]
.text:00002E11                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00002E16                 mov     ecx, [ebp+var_F0]
.text:00002E1C                 movzx   edx, byte ptr [eax+ecx]
.text:00002E20                 test    edx, edx
.text:00002E22                 jz      short loc_2E26
.text:00002E24                 jmp     short loc_2DE8
.text:00002E26 ; ---------------------------------------------------------------------------
.text:00002E26
.text:00002E26 loc_2E26:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+17Ej
.text:00002E26                 mov     eax, [ebp+var_F0]
.text:00002E2C                 push    eax
.text:00002E2D                 mov     ecx, [ebp+arg_10]
.text:00002E30                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00002E35                 mov     [ebp+var_110], eax
.text:00002E3B                 mov     [ebp+var_118], 0
.text:00002E45                 mov     [ebp+var_114], 0
.text:00002E4F                 movzx   ecx, [ebp+arg_C]
.text:00002E53                 test    ecx, ecx
.text:00002E55                 jnz     loc_3084
.text:00002E5B                 lea     ecx, [ebp+var_154] ; this
.text:00002E61                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:00002E66                 mov     byte ptr [ebp+var_4], 2
.text:00002E6A                 mov     ecx, [ebp+var_110]
.text:00002E70                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002E75                 push    eax             ; wchar_t *
.text:00002E76                 lea     ecx, [ebp+var_154] ; this
.text:00002E7C                 call    ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)
.text:00002E81                 movzx   edx, al
.text:00002E84                 test    edx, edx
.text:00002E86                 jnz     loc_2F9A
.text:00002E8C                 mov     esi, esp
.text:00002E8E                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00002E94                 cmp     esi, esp
.text:00002E96                 call    __RTC_CheckEsp
.text:00002E9B                 mov     [ebp+var_15C], eax
.text:00002EA1                 cmp     [ebp+var_15C], 0
.text:00002EA8                 jnz     short loc_2EB4
.text:00002EAA                 mov     [ebp+var_15C], 2
.text:00002EB4
.text:00002EB4 loc_2EB4:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+204j
.text:00002EB4                 mov     eax, [ebp+var_10C]
.text:00002EBA                 push    eax
.text:00002EBB                 call    _HRESULT_FROM_WIN32@4 ; HRESULT_FROM_WIN32(x)
.text:00002EC0                 mov     [ebp+var_10C], eax
.text:00002EC6                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; this
.text:00002ECB                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00002ED0                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; this
.text:00002ED5                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002EDA                 mov     ecx, [ebp+var_110]
.text:00002EE0                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002EE5                 push    eax
.text:00002EE6                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002EEB                 mov     ecx, [ebp+var_15C]
.text:00002EF1                 push    ecx
.text:00002EF2                 lea     edx, [ebp+var_4B4]
.text:00002EF8                 push    edx
.text:00002EF9                 call    ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage(ulong)
.text:00002EFE                 mov     [ebp+var_508], eax
.text:00002F04                 mov     eax, [ebp+var_508]
.text:00002F0A                 mov     [ebp+var_50C], eax
.text:00002F10                 mov     byte ptr [ebp+var_4], 3
.text:00002F14                 mov     ecx, [ebp+var_50C]
.text:00002F1A                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002F1F                 push    eax
.text:00002F20                 mov     ecx, ds:_kError
.text:00002F26                 push    ecx             ; Str
.text:00002F27                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002F2C                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00002F32                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002F37                 mov     ecx, eax
.text:00002F39                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002F3E                 mov     ecx, eax
.text:00002F40                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00002F45                 mov     ecx, eax
.text:00002F47                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002F4C                 mov     ecx, eax
.text:00002F4E                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00002F53                 mov     ecx, eax
.text:00002F55                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002F5A                 mov     ecx, eax
.text:00002F5C                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002F61                 mov     byte ptr [ebp+var_4], 2
.text:00002F65                 lea     ecx, [ebp+var_4B4] ; this
.text:00002F6B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002F70                 mov     edx, [ebp+arg_38]
.text:00002F73                 mov     eax, [edx]
.text:00002F75                 add     eax, 1
.text:00002F78                 mov     ecx, [edx+4]
.text:00002F7B                 adc     ecx, 0
.text:00002F7E                 mov     edx, [ebp+arg_38]
.text:00002F81                 mov     [edx], eax
.text:00002F83                 mov     [edx+4], ecx
.text:00002F86                 mov     byte ptr [ebp+var_4], 1
.text:00002F8A                 lea     ecx, [ebp+var_154] ; this
.text:00002F90                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00002F95                 jmp     loc_2DE8
.text:00002F9A ; ---------------------------------------------------------------------------
.text:00002F9A
.text:00002F9A loc_2F9A:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1E2j
.text:00002F9A                 lea     ecx, [ebp+var_154] ; this
.text:00002FA0                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:00002FA5                 movzx   eax, al
.text:00002FA8                 test    eax, eax
.text:00002FAA                 jz      loc_3039
.text:00002FB0                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; this
.text:00002FB5                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00002FBA                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002FBF                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002FC4                 push    offset $SG73429 ; " is not a file"
.text:00002FC9                 mov     ecx, [ebp+var_110]
.text:00002FCF                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002FD4                 push    eax             ; Str
.text:00002FD5                 mov     ecx, ds:_kError
.text:00002FDB                 push    ecx             ; Str
.text:00002FDC                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002FE1                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00002FE7                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002FEC                 mov     ecx, eax
.text:00002FEE                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002FF3                 mov     ecx, eax
.text:00002FF5                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00002FFA                 mov     ecx, eax
.text:00002FFC                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00003001                 mov     ecx, eax
.text:00003003                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00003008                 mov     ecx, eax
.text:0000300A                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000300F                 mov     edx, [ebp+arg_38]
.text:00003012                 mov     eax, [edx]
.text:00003014                 add     eax, 1
.text:00003017                 mov     ecx, [edx+4]
.text:0000301A                 adc     ecx, 0
.text:0000301D                 mov     edx, [ebp+arg_38]
.text:00003020                 mov     [edx], eax
.text:00003022                 mov     [edx+4], ecx
.text:00003025                 mov     byte ptr [ebp+var_4], 1
.text:00003029                 lea     ecx, [ebp+var_154] ; this
.text:0000302F                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00003034                 jmp     loc_2DE8
.text:00003039 ; ---------------------------------------------------------------------------
.text:00003039
.text:00003039 loc_3039:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+306j
.text:00003039                 mov     eax, [ebp+var_154]
.text:0000303F                 mov     [ebp+var_118], eax
.text:00003045                 mov     ecx, [ebp+var_150]
.text:0000304B                 mov     [ebp+var_114], ecx
.text:00003051                 mov     edx, [ebp+var_108]
.text:00003057                 add     edx, [ebp+var_118]
.text:0000305D                 mov     eax, [ebp+var_104]
.text:00003063                 adc     eax, [ebp+var_114]
.text:00003069                 mov     [ebp+var_108], edx
.text:0000306F                 mov     [ebp+var_104], eax
.text:00003075                 mov     byte ptr [ebp+var_4], 1
.text:00003079                 lea     ecx, [ebp+var_154] ; this
.text:0000307F                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00003084
.text:00003084 loc_3084:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1B1j
.text:00003084                 lea     ecx, [ebp+var_1C0]
.text:0000308A                 call    ??0CArchiveLink@@QAE@XZ ; CArchiveLink::CArchiveLink(void)
.text:0000308F                 mov     byte ptr [ebp+var_4], 4
.text:00003093                 lea     ecx, [ebp+var_298]
.text:00003099                 call    ??0COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::COpenCallbackConsole(void)
.text:0000309E                 mov     byte ptr [ebp+var_4], 5
.text:000030A2                 push    0               ; struct CStdOutStream *
.text:000030A4                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:000030AA                 push    ecx             ; struct CStdOutStream *
.text:000030AB                 push    offset ?g_StdOut@@3VCStdOutStream@@A ; struct CStdOutStream *
.text:000030B0                 lea     ecx, [ebp+var_298] ; this
.text:000030B6                 call    ?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z ; COpenCallbackConsole::Init(CStdOutStream *,CStdOutStream *,CStdOutStream *)
.text:000030BB                 mov     edx, [ebp+arg_2C]
.text:000030BE                 mov     al, [edx]
.text:000030C0                 mov     [ebp+var_1D5], al
.text:000030C6                 mov     ecx, [ebp+arg_30]
.text:000030C9                 push    ecx
.text:000030CA                 lea     ecx, [ebp+var_1D4]
.text:000030D0                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000030D5                 lea     ecx, [ebp+var_2F8]
.text:000030DB                 call    ??0COpenOptions@@QAE@XZ ; COpenOptions::COpenOptions(void)
.text:000030E0                 mov     byte ptr [ebp+var_4], 6
.text:000030E4                 mov     edx, [ebp+arg_34]
.text:000030E7                 mov     [ebp+var_2B8], edx
.text:000030ED                 mov     eax, [ebp+arg_0]
.text:000030F0                 mov     [ebp+var_2F8], eax
.text:000030F6                 mov     ecx, [ebp+arg_4]
.text:000030F9                 mov     [ebp+var_2D0], ecx
.text:000030FF                 mov     edx, [ebp+arg_8]
.text:00003102                 mov     [ebp+var_2CC], edx
.text:00003108                 mov     al, [ebp+arg_C]
.text:0000310B                 mov     [ebp+var_2B4], al
.text:00003111                 mov     [ebp+var_2C8], 0
.text:0000311B                 mov     ecx, [ebp+var_110]
.text:00003121                 push    ecx
.text:00003122                 lea     ecx, [ebp+var_2B0]
.text:00003128                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000312D                 movzx   edx, [ebp+arg_24]
.text:00003131                 test    edx, edx
.text:00003133                 jz      short loc_317C
.text:00003135                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000313A                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000313F                 mov     ecx, [ebp+var_110]
.text:00003145                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000314A                 push    eax
.text:0000314B                 mov     eax, ds:_kListing
.text:00003150                 push    eax             ; Str
.text:00003151                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00003156                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:0000315B                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00003160                 mov     ecx, eax
.text:00003162                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00003167                 mov     ecx, eax
.text:00003169                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:0000316E                 mov     ecx, eax
.text:00003170                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00003175                 mov     ecx, eax
.text:00003177                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000317C
.text:0000317C loc_317C:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+48Fj
.text:0000317C                 lea     ecx, [ebp+var_298]
.text:00003182                 push    ecx             ; struct IOpenCallbackUI *
.text:00003183                 lea     edx, [ebp+var_2F8]
.text:00003189                 push    edx             ; struct COpenOptions *
.text:0000318A                 lea     ecx, [ebp+var_1C0] ; this
.text:00003190                 call    ?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z ; CArchiveLink::Open3(COpenOptions &,IOpenCallbackUI *)
.text:00003195                 mov     [ebp+var_300], eax
.text:0000319B                 cmp     [ebp+var_300], 0
.text:000031A2                 jz      loc_3363
.text:000031A8                 cmp     [ebp+var_300], 80004004h
.text:000031B2                 jnz     short loc_3216
.text:000031B4                 mov     eax, [ebp+var_300]
.text:000031BA                 mov     [ebp+var_4B8], eax
.text:000031C0                 mov     byte ptr [ebp+var_4], 5
.text:000031C4                 lea     ecx, [ebp+var_2F8] ; this
.text:000031CA                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:000031CF                 mov     byte ptr [ebp+var_4], 4
.text:000031D3                 lea     ecx, [ebp+var_298] ; this
.text:000031D9                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:000031DE                 mov     byte ptr [ebp+var_4], 1
.text:000031E2                 lea     ecx, [ebp+var_1C0] ; this
.text:000031E8                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:000031ED                 mov     byte ptr [ebp+var_4], 0
.text:000031F1                 lea     ecx, [ebp+var_E8]
.text:000031F7                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000031FC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003203                 lea     ecx, [ebp+var_5C] ; this
.text:00003206                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:0000320B                 mov     eax, [ebp+var_4B8]
.text:00003211                 jmp     loc_444E
.text:00003216 ; ---------------------------------------------------------------------------
.text:00003216
.text:00003216 loc_3216:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+50Ej
.text:00003216                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; this
.text:0000321B                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00003220                 push    offset $SG73599 ; " : "
.text:00003225                 mov     ecx, [ebp+var_110]
.text:0000322B                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00003230                 push    eax             ; Str
.text:00003231                 mov     ecx, ds:_kError
.text:00003237                 push    ecx             ; Str
.text:00003238                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000323D                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00003243                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00003248                 mov     ecx, eax
.text:0000324A                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000324F                 mov     ecx, eax
.text:00003251                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00003256                 mov     ecx, eax
.text:00003258                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000325D                 cmp     [ebp+var_300], 1
.text:00003264                 jnz     short loc_3282
.text:00003266                 lea     edx, [ebp+var_1C0]
.text:0000326C                 push    edx             ; struct CArchiveLink *
.text:0000326D                 mov     eax, [ebp+arg_0]
.text:00003270                 push    eax             ; struct CCodecs *
.text:00003271                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00003277                 push    ecx             ; struct CStdOutStream *
.text:00003278                 call    ?Print_OpenArchive_Error@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z ; Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &)
.text:0000327D                 jmp     loc_330B
.text:00003282 ; ---------------------------------------------------------------------------
.text:00003282
.text:00003282 loc_3282:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+5C0j
.text:00003282                 mov     edx, [ebp+var_300]
.text:00003288                 mov     [ebp+var_10C], edx
.text:0000328E                 push    offset $SG73603 ; "opening : "
.text:00003293                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00003299                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000329E                 cmp     [ebp+var_300], 8007000Eh
.text:000032A8                 jnz     short loc_32BC
.text:000032AA                 push    offset $SG73606 ; "Can't allocate required memory"
.text:000032AF                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:000032B5                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000032BA                 jmp     short loc_330B
.text:000032BC ; ---------------------------------------------------------------------------
.text:000032BC
.text:000032BC loc_32BC:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+604j
.text:000032BC                 mov     eax, [ebp+var_300]
.text:000032C2                 push    eax
.text:000032C3                 lea     ecx, [ebp+var_4C4]
.text:000032C9                 push    ecx
.text:000032CA                 call    ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage(ulong)
.text:000032CF                 mov     [ebp+var_510], eax
.text:000032D5                 mov     edx, [ebp+var_510]
.text:000032DB                 mov     [ebp+var_514], edx
.text:000032E1                 mov     byte ptr [ebp+var_4], 7
.text:000032E5                 mov     ecx, [ebp+var_514]
.text:000032EB                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000032F0                 push    eax
.text:000032F1                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:000032F7                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000032FC                 mov     byte ptr [ebp+var_4], 6
.text:00003300                 lea     ecx, [ebp+var_4C4] ; this
.text:00003306                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000330B
.text:0000330B loc_330B:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+5D9j
.text:0000330B                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+616j
.text:0000330B                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00003310                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00003316                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000331B                 mov     eax, [ebp+arg_38]
.text:0000331E                 mov     ecx, [eax]
.text:00003320                 add     ecx, 1
.text:00003323                 mov     edx, [eax+4]
.text:00003326                 adc     edx, 0
.text:00003329                 mov     eax, [ebp+arg_38]
.text:0000332C                 mov     [eax], ecx
.text:0000332E                 mov     [eax+4], edx
.text:00003331                 mov     byte ptr [ebp+var_4], 5
.text:00003335                 lea     ecx, [ebp+var_2F8] ; this
.text:0000333B                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:00003340                 mov     byte ptr [ebp+var_4], 4
.text:00003344                 lea     ecx, [ebp+var_298] ; this
.text:0000334A                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:0000334F                 mov     byte ptr [ebp+var_4], 1
.text:00003353                 lea     ecx, [ebp+var_1C0] ; this
.text:00003359                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:0000335E                 jmp     loc_2DE8
.text:00003363 ; ---------------------------------------------------------------------------
.text:00003363
.text:00003363 loc_3363:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+4FEj
.text:00003363                 cmp     [ebp+var_184], 0
.text:0000336A                 jl      short loc_3382
.text:0000336C                 mov     ecx, [ebp+arg_38]
.text:0000336F                 mov     edx, [ecx]
.text:00003371                 add     edx, 1
.text:00003374                 mov     eax, [ecx+4]
.text:00003377                 adc     eax, 0
.text:0000337A                 mov     ecx, [ebp+arg_38]
.text:0000337D                 mov     [ecx], edx
.text:0000337F                 mov     [ecx+4], eax
.text:00003382
.text:00003382 loc_3382:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+6C6j
.text:00003382                 mov     [ebp+var_304], 0
.text:0000338C                 jmp     short loc_339D
.text:0000338E ; ---------------------------------------------------------------------------
.text:0000338E
.text:0000338E loc_338E:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &):loc_3497j
.text:0000338E                 mov     edx, [ebp+var_304]
.text:00003394                 add     edx, 1
.text:00003397                 mov     [ebp+var_304], edx
.text:0000339D
.text:0000339D loc_339D:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+6E8j
.text:0000339D                 lea     ecx, [ebp+var_1C0]
.text:000033A3                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:000033A8                 cmp     [ebp+var_304], eax
.text:000033AE                 jnb     loc_349C
.text:000033B4                 mov     eax, [ebp+var_304]
.text:000033BA                 push    eax
.text:000033BB                 lea     ecx, [ebp+var_1C0]
.text:000033C1                 call    ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[](uint)
.text:000033C6                 add     eax, 10h
.text:000033C9                 mov     [ebp+var_308], eax
.text:000033CF                 mov     ecx, [ebp+var_308]
.text:000033D5                 add     ecx, 24h ; '$'  ; this
.text:000033D8                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000033DD                 movzx   ecx, al
.text:000033E0                 test    ecx, ecx
.text:000033E2                 jnz     short loc_33FA
.text:000033E4                 mov     edx, [ebp+arg_3C]
.text:000033E7                 mov     eax, [edx]
.text:000033E9                 add     eax, 1
.text:000033EC                 mov     ecx, [edx+4]
.text:000033EF                 adc     ecx, 0
.text:000033F2                 mov     edx, [ebp+arg_3C]
.text:000033F5                 mov     [edx], eax
.text:000033F7                 mov     [edx+4], ecx
.text:000033FA
.text:000033FA loc_33FA:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+73Ej
.text:000033FA                 mov     ecx, [ebp+var_308] ; this
.text:00003400                 call    ?AreThereWarnings@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::AreThereWarnings(void)
.text:00003405                 movzx   eax, al
.text:00003408                 test    eax, eax
.text:0000340A                 jz      short loc_3422
.text:0000340C                 mov     ecx, [ebp+arg_3C]
.text:0000340F                 mov     edx, [ecx]
.text:00003411                 add     edx, 1
.text:00003414                 mov     eax, [ecx+4]
.text:00003417                 adc     eax, 0
.text:0000341A                 mov     ecx, [ebp+arg_3C]
.text:0000341D                 mov     [ecx], edx
.text:0000341F                 mov     [ecx+4], eax
.text:00003422
.text:00003422 loc_3422:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+766j
.text:00003422                 mov     edx, [ebp+var_308]
.text:00003428                 cmp     dword ptr [edx+0Ch], 0
.text:0000342C                 jl      short loc_3444
.text:0000342E                 mov     eax, [ebp+arg_3C]
.text:00003431                 mov     ecx, [eax]
.text:00003433                 add     ecx, 1
.text:00003436                 mov     edx, [eax+4]
.text:00003439                 adc     edx, 0
.text:0000343C                 mov     eax, [ebp+arg_3C]
.text:0000343F                 mov     [eax], ecx
.text:00003441                 mov     [eax+4], edx
.text:00003444
.text:00003444 loc_3444:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+788j
.text:00003444                 mov     ecx, [ebp+var_308] ; this
.text:0000344A                 call    ?AreThereErrors@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::AreThereErrors(void)
.text:0000344F                 movzx   ecx, al
.text:00003452                 test    ecx, ecx
.text:00003454                 jz      short loc_346C
.text:00003456                 mov     edx, [ebp+arg_38]
.text:00003459                 mov     eax, [edx]
.text:0000345B                 add     eax, 1
.text:0000345E                 mov     ecx, [edx+4]
.text:00003461                 adc     ecx, 0
.text:00003464                 mov     edx, [ebp+arg_38]
.text:00003467                 mov     [edx], eax
.text:00003469                 mov     [edx+4], ecx
.text:0000346C
.text:0000346C loc_346C:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+7B0j
.text:0000346C                 mov     ecx, [ebp+var_308]
.text:00003472                 add     ecx, 18h        ; this
.text:00003475                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000347A                 movzx   eax, al
.text:0000347D                 test    eax, eax
.text:0000347F                 jnz     short loc_3497
.text:00003481                 mov     ecx, [ebp+arg_38]
.text:00003484                 mov     edx, [ecx]
.text:00003486                 add     edx, 1
.text:00003489                 mov     eax, [ecx+4]
.text:0000348C                 adc     eax, 0
.text:0000348F                 mov     ecx, [ebp+arg_38]
.text:00003492                 mov     [ecx], edx
.text:00003494                 mov     [ecx+4], eax
.text:00003497
.text:00003497 loc_3497:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+7DBj
.text:00003497                 jmp     loc_338E
.text:0000349C ; ---------------------------------------------------------------------------
.text:0000349C
.text:0000349C loc_349C:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+70Aj
.text:0000349C                 mov     edx, [ebp+var_100]
.text:000034A2                 add     edx, 1
.text:000034A5                 mov     eax, [ebp+var_FC]
.text:000034AB                 adc     eax, 0
.text:000034AE                 mov     [ebp+var_100], edx
.text:000034B4                 mov     [ebp+var_FC], eax
.text:000034BA                 mov     ecx, [ebp+var_F8]
.text:000034C0                 add     ecx, 1
.text:000034C3                 mov     edx, [ebp+var_F4]
.text:000034C9                 adc     edx, 0
.text:000034CC                 mov     [ebp+var_F8], ecx
.text:000034D2                 mov     [ebp+var_F4], edx
.text:000034D8                 movzx   eax, [ebp+arg_C]
.text:000034DC                 test    eax, eax
.text:000034DE                 jnz     loc_35AB
.text:000034E4                 lea     ecx, [ebp+var_1B4]
.text:000034EA                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:000034EF                 xor     ecx, ecx
.text:000034F1                 add     eax, [ebp+var_F8]
.text:000034F7                 adc     ecx, [ebp+var_F4]
.text:000034FD                 mov     [ebp+var_F8], eax
.text:00003503                 mov     [ebp+var_F4], ecx
.text:00003509                 mov     edx, [ebp+var_108]
.text:0000350F                 add     edx, [ebp+var_1A8]
.text:00003515                 mov     eax, [ebp+var_104]
.text:0000351B                 adc     eax, [ebp+var_1A4]
.text:00003521                 mov     [ebp+var_108], edx
.text:00003527                 mov     [ebp+var_104], eax
.text:0000352D                 mov     [ebp+var_30C], 0
.text:00003537                 jmp     short loc_3548
.text:00003539 ; ---------------------------------------------------------------------------
.text:00003539
.text:00003539 loc_3539:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &):loc_35A9j
.text:00003539                 mov     ecx, [ebp+var_30C]
.text:0000353F                 add     ecx, 1
.text:00003542                 mov     [ebp+var_30C], ecx
.text:00003548
.text:00003548 loc_3548:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+893j
.text:00003548                 lea     ecx, [ebp+var_1B4]
.text:0000354E                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00003553                 cmp     [ebp+var_30C], eax
.text:00003559                 jnb     short loc_35AB
.text:0000355B                 mov     edx, [ebp+var_30C]
.text:00003561                 push    edx
.text:00003562                 lea     ecx, [ebp+var_1B4]
.text:00003568                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:0000356D                 push    eax
.text:0000356E                 mov     eax, [ebp+arg_14]
.text:00003571                 push    eax
.text:00003572                 call    ?Find_FileName_InSortedVector@@YGHABV?$CObjectVector@VUString@@@@ABVUString@@@Z ; Find_FileName_InSortedVector(CObjectVector<UString> const &,UString const &)
.text:00003577                 mov     [ebp+var_310], eax
.text:0000357D                 cmp     [ebp+var_310], 0
.text:00003584                 jl      short loc_35A9
.text:00003586                 mov     ecx, [ebp+var_310]
.text:0000358C                 cmp     ecx, [ebp+var_F0]
.text:00003592                 jbe     short loc_35A9
.text:00003594                 lea     ecx, [ebp+var_E8]
.text:0000359A                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:0000359F                 mov     edx, [ebp+var_310]
.text:000035A5                 mov     byte ptr [eax+edx], 1
.text:000035A9
.text:000035A9 loc_35A9:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+8E0j
.text:000035A9                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+8EEj
.text:000035A9                 jmp     short loc_3539
.text:000035AB ; ---------------------------------------------------------------------------
.text:000035AB
.text:000035AB loc_35AB:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+83Aj
.text:000035AB                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+8B5j
.text:000035AB                 movzx   eax, [ebp+arg_24]
.text:000035AF                 test    eax, eax
.text:000035B1                 jz      loc_3663
.text:000035B7                 lea     ecx, [ebp+var_1C0]
.text:000035BD                 push    ecx             ; struct CArchiveLink *
.text:000035BE                 mov     edx, [ebp+arg_0]
.text:000035C1                 push    edx             ; struct CCodecs *
.text:000035C2                 push    offset ?g_StdOut@@3VCStdOutStream@@A ; struct CStdOutStream *
.text:000035C7                 call    ?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)
.text:000035CC                 mov     [ebp+var_314], eax
.text:000035D2                 cmp     [ebp+var_314], 0
.text:000035D9                 jz      short loc_363D
.text:000035DB                 mov     eax, [ebp+var_314]
.text:000035E1                 mov     [ebp+var_4C8], eax
.text:000035E7                 mov     byte ptr [ebp+var_4], 5
.text:000035EB                 lea     ecx, [ebp+var_2F8] ; this
.text:000035F1                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:000035F6                 mov     byte ptr [ebp+var_4], 4
.text:000035FA                 lea     ecx, [ebp+var_298] ; this
.text:00003600                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:00003605                 mov     byte ptr [ebp+var_4], 1
.text:00003609                 lea     ecx, [ebp+var_1C0] ; this
.text:0000360F                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:00003614                 mov     byte ptr [ebp+var_4], 0
.text:00003618                 lea     ecx, [ebp+var_E8]
.text:0000361E                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003623                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000362A                 lea     ecx, [ebp+var_5C] ; this
.text:0000362D                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00003632                 mov     eax, [ebp+var_4C8]
.text:00003638                 jmp     loc_444E
.text:0000363D ; ---------------------------------------------------------------------------
.text:0000363D
.text:0000363D loc_363D:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+935j
.text:0000363D                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00003642                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00003647                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000364C                 movzx   ecx, [ebp+arg_28]
.text:00003650                 test    ecx, ecx
.text:00003652                 jz      short loc_3663
.text:00003654                 push    offset $SG73634 ; "----------\n"
.text:00003659                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:0000365E                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00003663
.text:00003663 loc_3663:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+90Dj
.text:00003663                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+9AEj
.text:00003663                 movzx   edx, [ebp+arg_24]
.text:00003667                 test    edx, edx
.text:00003669                 jz      short loc_36A1
.text:0000366B                 movzx   eax, [ebp+arg_28]
.text:0000366F                 test    eax, eax
.text:00003671                 jnz     short loc_36A1
.text:00003673                 lea     ecx, [ebp+var_5C] ; this
.text:00003676                 call    ?PrintTitle@CFieldPrinter@@QAEXXZ ; CFieldPrinter::PrintTitle(void)
.text:0000367B                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00003680                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00003685                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000368A                 lea     ecx, [ebp+var_5C] ; this
.text:0000368D                 call    ?PrintTitleLines@CFieldPrinter@@QAEXXZ ; CFieldPrinter::PrintTitleLines(void)
.text:00003692                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00003697                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:0000369C                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000036A1
.text:000036A1 loc_36A1:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+9C5j
.text:000036A1                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+9CDj
.text:000036A1                 lea     ecx, [ebp+var_1C0]
.text:000036A7                 call    ?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ ; CObjectVector<CArc>::Back(void)
.text:000036AC                 mov     [ebp+var_318], eax
.text:000036B2                 mov     ecx, [ebp+var_318]
.text:000036B8                 mov     [ebp+var_50], ecx
.text:000036BB                 mov     dl, [ebp+arg_28]
.text:000036BE                 mov     [ebp+var_4C], dl
.text:000036C1                 mov     ecx, [ebp+var_318]
.text:000036C7                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:000036CC                 mov     [ebp+var_31C], eax
.text:000036D2                 movzx   eax, [ebp+arg_28]
.text:000036D6                 test    eax, eax
.text:000036D8                 jz      loc_3804
.text:000036DE                 lea     ecx, [ebp+var_5C] ; this
.text:000036E1                 call    ?Clear@CFieldPrinter@@QAEXXZ ; CFieldPrinter::Clear(void)
.text:000036E6                 mov     ecx, [ebp+var_31C]
.text:000036EC                 push    ecx             ; struct IInArchive *
.text:000036ED                 lea     ecx, [ebp+var_5C] ; this
.text:000036F0                 call    ?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z ; CFieldPrinter::AddMainProps(IInArchive *)
.text:000036F5                 mov     [ebp+var_320], eax
.text:000036FB                 cmp     [ebp+var_320], 0
.text:00003702                 jz      short loc_3766
.text:00003704                 mov     edx, [ebp+var_320]
.text:0000370A                 mov     [ebp+var_4CC], edx
.text:00003710                 mov     byte ptr [ebp+var_4], 5
.text:00003714                 lea     ecx, [ebp+var_2F8] ; this
.text:0000371A                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:0000371F                 mov     byte ptr [ebp+var_4], 4
.text:00003723                 lea     ecx, [ebp+var_298] ; this
.text:00003729                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:0000372E                 mov     byte ptr [ebp+var_4], 1
.text:00003732                 lea     ecx, [ebp+var_1C0] ; this
.text:00003738                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:0000373D                 mov     byte ptr [ebp+var_4], 0
.text:00003741                 lea     ecx, [ebp+var_E8]
.text:00003747                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:0000374C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003753                 lea     ecx, [ebp+var_5C] ; this
.text:00003756                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:0000375B                 mov     eax, [ebp+var_4CC]
.text:00003761                 jmp     loc_444E
.text:00003766 ; ---------------------------------------------------------------------------
.text:00003766
.text:00003766 loc_3766:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+A5Ej
.text:00003766                 mov     ecx, [ebp+var_318]
.text:0000376C                 add     ecx, 8
.text:0000376F                 call    ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *(void)
.text:00003774                 test    eax, eax
.text:00003776                 jz      loc_3804
.text:0000377C                 mov     ecx, [ebp+var_318]
.text:00003782                 add     ecx, 8
.text:00003785                 call    ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *(void)
.text:0000378A                 push    eax             ; struct IArchiveGetRawProps *
.text:0000378B                 lea     ecx, [ebp+var_5C] ; this
.text:0000378E                 call    ?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z ; CFieldPrinter::AddRawProps(IArchiveGetRawProps *)
.text:00003793                 mov     [ebp+var_324], eax
.text:00003799                 cmp     [ebp+var_324], 0
.text:000037A0                 jz      short loc_3804
.text:000037A2                 mov     eax, [ebp+var_324]
.text:000037A8                 mov     [ebp+var_4D0], eax
.text:000037AE                 mov     byte ptr [ebp+var_4], 5
.text:000037B2                 lea     ecx, [ebp+var_2F8] ; this
.text:000037B8                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:000037BD                 mov     byte ptr [ebp+var_4], 4
.text:000037C1                 lea     ecx, [ebp+var_298] ; this
.text:000037C7                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:000037CC                 mov     byte ptr [ebp+var_4], 1
.text:000037D0                 lea     ecx, [ebp+var_1C0] ; this
.text:000037D6                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:000037DB                 mov     byte ptr [ebp+var_4], 0
.text:000037DF                 lea     ecx, [ebp+var_E8]
.text:000037E5                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000037EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000037F1                 lea     ecx, [ebp+var_5C] ; this
.text:000037F4                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:000037F9                 mov     eax, [ebp+var_4D0]
.text:000037FF                 jmp     loc_444E
.text:00003804 ; ---------------------------------------------------------------------------
.text:00003804
.text:00003804 loc_3804:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+A34j
.text:00003804                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+AD2j ...
.text:00003804                 lea     ecx, [ebp+var_3A0]
.text:0000380A                 call    ??0CListStat2@@QAE@XZ ; CListStat2::CListStat2(void)
.text:0000380F                 mov     esi, esp
.text:00003811                 lea     ecx, [ebp+var_3AC]
.text:00003817                 push    ecx
.text:00003818                 mov     edx, [ebp+var_31C]
.text:0000381E                 mov     eax, [edx]
.text:00003820                 mov     ecx, [ebp+var_31C]
.text:00003826                 push    ecx
.text:00003827                 mov     edx, [eax+14h]
.text:0000382A                 call    edx
.text:0000382C                 cmp     esi, esp
.text:0000382E                 call    __RTC_CheckEsp
.text:00003833                 mov     [ebp+var_3B4], eax
.text:00003839                 cmp     [ebp+var_3B4], 0
.text:00003840                 jz      short loc_38A4
.text:00003842                 mov     eax, [ebp+var_3B4]
.text:00003848                 mov     [ebp+var_4D4], eax
.text:0000384E                 mov     byte ptr [ebp+var_4], 5
.text:00003852                 lea     ecx, [ebp+var_2F8] ; this
.text:00003858                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:0000385D                 mov     byte ptr [ebp+var_4], 4
.text:00003861                 lea     ecx, [ebp+var_298] ; this
.text:00003867                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:0000386C                 mov     byte ptr [ebp+var_4], 1
.text:00003870                 lea     ecx, [ebp+var_1C0] ; this
.text:00003876                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:0000387B                 mov     byte ptr [ebp+var_4], 0
.text:0000387F                 lea     ecx, [ebp+var_E8]
.text:00003885                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:0000388A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003891                 lea     ecx, [ebp+var_5C] ; this
.text:00003894                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00003899                 mov     eax, [ebp+var_4D4]
.text:0000389F                 jmp     loc_444E
.text:000038A4 ; ---------------------------------------------------------------------------
.text:000038A4
.text:000038A4 loc_38A4:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+B9Cj
.text:000038A4                 lea     ecx, [ebp+var_3F8] ; this
.text:000038AA                 call    ??0CReadArcItem@@QAE@XZ ; CReadArcItem::CReadArcItem(void)
.text:000038AF                 mov     byte ptr [ebp+var_4], 8
.text:000038B3                 lea     ecx, [ebp+var_40C]
.text:000038B9                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:000038BE                 mov     byte ptr [ebp+var_4], 9
.text:000038C2                 mov     [ebp+var_414], 0
.text:000038CC                 jmp     short loc_38DD
.text:000038CE ; ---------------------------------------------------------------------------
.text:000038CE
.text:000038CE loc_38CE:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+E70j
.text:000038CE                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+F51j ...
.text:000038CE                 mov     ecx, [ebp+var_414]
.text:000038D4                 add     ecx, 1
.text:000038D7                 mov     [ebp+var_414], ecx
.text:000038DD
.text:000038DD loc_38DD:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+C28j
.text:000038DD                 mov     edx, [ebp+var_414]
.text:000038E3                 cmp     edx, [ebp+var_3AC]
.text:000038E9                 jnb     loc_4111
.text:000038EF                 call    ?TestBreakSignal@NConsoleClose@@YG_NXZ ; NConsoleClose::TestBreakSignal(void)
.text:000038F4                 movzx   eax, al
.text:000038F7                 test    eax, eax
.text:000038F9                 jz      short loc_3979
.text:000038FB                 mov     [ebp+var_4D8], 80004004h
.text:00003905                 mov     byte ptr [ebp+var_4], 8
.text:00003909                 lea     ecx, [ebp+var_40C]
.text:0000390F                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00003914                 mov     byte ptr [ebp+var_4], 6
.text:00003918                 lea     ecx, [ebp+var_3F8] ; this
.text:0000391E                 call    ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text:00003923                 mov     byte ptr [ebp+var_4], 5
.text:00003927                 lea     ecx, [ebp+var_2F8] ; this
.text:0000392D                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:00003932                 mov     byte ptr [ebp+var_4], 4
.text:00003936                 lea     ecx, [ebp+var_298] ; this
.text:0000393C                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:00003941                 mov     byte ptr [ebp+var_4], 1
.text:00003945                 lea     ecx, [ebp+var_1C0] ; this
.text:0000394B                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:00003950                 mov     byte ptr [ebp+var_4], 0
.text:00003954                 lea     ecx, [ebp+var_E8]
.text:0000395A                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:0000395F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003966                 lea     ecx, [ebp+var_5C] ; this
.text:00003969                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:0000396E                 mov     eax, [ebp+var_4D8]
.text:00003974                 jmp     loc_444E
.text:00003979 ; ---------------------------------------------------------------------------
.text:00003979
.text:00003979 loc_3979:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+C55j
.text:00003979                 lea     ecx, [ebp+var_48]
.text:0000397C                 push    ecx             ; struct UString *
.text:0000397D                 mov     edx, [ebp+var_414]
.text:00003983                 push    edx             ; unsigned int
.text:00003984                 mov     ecx, [ebp+var_318] ; this
.text:0000398A                 call    ?GetItemPath2@CArc@@QBEJIAAVUString@@@Z ; CArc::GetItemPath2(uint,UString &)
.text:0000398F                 mov     [ebp+var_418], eax
.text:00003995                 movzx   eax, [ebp+arg_C]
.text:00003999                 test    eax, eax
.text:0000399B                 jz      short loc_39AE
.text:0000399D                 cmp     [ebp+var_418], 80070057h
.text:000039A7                 jnz     short loc_39AE
.text:000039A9                 jmp     loc_4111
.text:000039AE ; ---------------------------------------------------------------------------
.text:000039AE
.text:000039AE loc_39AE:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+CF7j
.text:000039AE                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+D03j
.text:000039AE                 mov     ecx, [ebp+var_418]
.text:000039B4                 mov     [ebp+var_41C], ecx
.text:000039BA                 cmp     [ebp+var_41C], 0
.text:000039C1                 jz      loc_3A47
.text:000039C7                 mov     edx, [ebp+var_41C]
.text:000039CD                 mov     [ebp+var_4DC], edx
.text:000039D3                 mov     byte ptr [ebp+var_4], 8
.text:000039D7                 lea     ecx, [ebp+var_40C]
.text:000039DD                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000039E2                 mov     byte ptr [ebp+var_4], 6
.text:000039E6                 lea     ecx, [ebp+var_3F8] ; this
.text:000039EC                 call    ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text:000039F1                 mov     byte ptr [ebp+var_4], 5
.text:000039F5                 lea     ecx, [ebp+var_2F8] ; this
.text:000039FB                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:00003A00                 mov     byte ptr [ebp+var_4], 4
.text:00003A04                 lea     ecx, [ebp+var_298] ; this
.text:00003A0A                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:00003A0F                 mov     byte ptr [ebp+var_4], 1
.text:00003A13                 lea     ecx, [ebp+var_1C0] ; this
.text:00003A19                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:00003A1E                 mov     byte ptr [ebp+var_4], 0
.text:00003A22                 lea     ecx, [ebp+var_E8]
.text:00003A28                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003A2D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003A34                 lea     ecx, [ebp+var_5C] ; this
.text:00003A37                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00003A3C                 mov     eax, [ebp+var_4DC]
.text:00003A42                 jmp     loc_444E
.text:00003A47 ; ---------------------------------------------------------------------------
.text:00003A47
.text:00003A47 loc_3A47:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+D1Dj
.text:00003A47                 mov     eax, [ebp+var_318]
.text:00003A4D                 movzx   ecx, byte ptr [eax+0DDh]
.text:00003A54                 test    ecx, ecx
.text:00003A56                 jz      loc_3B19
.text:00003A5C                 lea     edx, [ebp+var_421]
.text:00003A62                 push    edx             ; bool *
.text:00003A63                 mov     eax, [ebp+var_414]
.text:00003A69                 push    eax             ; unsigned int
.text:00003A6A                 mov     ecx, [ebp+var_31C]
.text:00003A70                 push    ecx             ; struct IInArchive *
.text:00003A71                 call    ?Archive_IsItem_Aux@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Aux(IInArchive *,uint,bool &)
.text:00003A76                 mov     [ebp+var_42C], eax
.text:00003A7C                 cmp     [ebp+var_42C], 0
.text:00003A83                 jz      loc_3B09
.text:00003A89                 mov     edx, [ebp+var_42C]
.text:00003A8F                 mov     [ebp+var_4E0], edx
.text:00003A95                 mov     byte ptr [ebp+var_4], 8
.text:00003A99                 lea     ecx, [ebp+var_40C]
.text:00003A9F                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00003AA4                 mov     byte ptr [ebp+var_4], 6
.text:00003AA8                 lea     ecx, [ebp+var_3F8] ; this
.text:00003AAE                 call    ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text:00003AB3                 mov     byte ptr [ebp+var_4], 5
.text:00003AB7                 lea     ecx, [ebp+var_2F8] ; this
.text:00003ABD                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:00003AC2                 mov     byte ptr [ebp+var_4], 4
.text:00003AC6                 lea     ecx, [ebp+var_298] ; this
.text:00003ACC                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:00003AD1                 mov     byte ptr [ebp+var_4], 1
.text:00003AD5                 lea     ecx, [ebp+var_1C0] ; this
.text:00003ADB                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:00003AE0                 mov     byte ptr [ebp+var_4], 0
.text:00003AE4                 lea     ecx, [ebp+var_E8]
.text:00003AEA                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003AEF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003AF6                 lea     ecx, [ebp+var_5C] ; this
.text:00003AF9                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00003AFE                 mov     eax, [ebp+var_4E0]
.text:00003B04                 jmp     loc_444E
.text:00003B09 ; ---------------------------------------------------------------------------
.text:00003B09
.text:00003B09 loc_3B09:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+DDFj
.text:00003B09                 movzx   eax, [ebp+var_421]
.text:00003B10                 test    eax, eax
.text:00003B12                 jz      short loc_3B19
.text:00003B14                 jmp     loc_38CE
.text:00003B19 ; ---------------------------------------------------------------------------
.text:00003B19
.text:00003B19 loc_3B19:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+DB2j
.text:00003B19                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+E6Ej
.text:00003B19                 mov     [ebp+var_431], 0
.text:00003B20                 mov     ecx, [ebp+var_318]
.text:00003B26                 movzx   edx, byte ptr [ecx+0DCh]
.text:00003B2D                 test    edx, edx
.text:00003B2F                 jz      loc_3BFA
.text:00003B35                 lea     eax, [ebp+var_431]
.text:00003B3B                 push    eax             ; bool *
.text:00003B3C                 mov     ecx, [ebp+var_414]
.text:00003B42                 push    ecx             ; unsigned int
.text:00003B43                 mov     edx, [ebp+var_31C]
.text:00003B49                 push    edx             ; struct IInArchive *
.text:00003B4A                 call    ?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_AltStream(IInArchive *,uint,bool &)
.text:00003B4F                 mov     [ebp+var_43C], eax
.text:00003B55                 cmp     [ebp+var_43C], 0
.text:00003B5C                 jz      loc_3BE2
.text:00003B62                 mov     eax, [ebp+var_43C]
.text:00003B68                 mov     [ebp+var_4E4], eax
.text:00003B6E                 mov     byte ptr [ebp+var_4], 8
.text:00003B72                 lea     ecx, [ebp+var_40C]
.text:00003B78                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00003B7D                 mov     byte ptr [ebp+var_4], 6
.text:00003B81                 lea     ecx, [ebp+var_3F8] ; this
.text:00003B87                 call    ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text:00003B8C                 mov     byte ptr [ebp+var_4], 5
.text:00003B90                 lea     ecx, [ebp+var_2F8] ; this
.text:00003B96                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:00003B9B                 mov     byte ptr [ebp+var_4], 4
.text:00003B9F                 lea     ecx, [ebp+var_298] ; this
.text:00003BA5                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:00003BAA                 mov     byte ptr [ebp+var_4], 1
.text:00003BAE                 lea     ecx, [ebp+var_1C0] ; this
.text:00003BB4                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:00003BB9                 mov     byte ptr [ebp+var_4], 0
.text:00003BBD                 lea     ecx, [ebp+var_E8]
.text:00003BC3                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003BC8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003BCF                 lea     ecx, [ebp+var_5C] ; this
.text:00003BD2                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00003BD7                 mov     eax, [ebp+var_4E4]
.text:00003BDD                 jmp     loc_444E
.text:00003BE2 ; ---------------------------------------------------------------------------
.text:00003BE2
.text:00003BE2 loc_3BE2:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+EB8j
.text:00003BE2                 movzx   ecx, [ebp+var_431]
.text:00003BE9                 test    ecx, ecx
.text:00003BEB                 jz      short loc_3BFA
.text:00003BED                 movzx   edx, [ebp+arg_18]
.text:00003BF1                 test    edx, edx
.text:00003BF3                 jnz     short loc_3BFA
.text:00003BF5                 jmp     loc_38CE
.text:00003BFA ; ---------------------------------------------------------------------------
.text:00003BFA
.text:00003BFA loc_3BFA:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+E8Bj
.text:00003BFA                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+F47j ...
.text:00003BFA                 lea     eax, [ebp+var_24]
.text:00003BFD                 push    eax             ; bool *
.text:00003BFE                 mov     ecx, [ebp+var_414]
.text:00003C04                 push    ecx             ; unsigned int
.text:00003C05                 mov     edx, [ebp+var_31C]
.text:00003C0B                 push    edx             ; struct IInArchive *
.text:00003C0C                 call    ?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Dir(IInArchive *,uint,bool &)
.text:00003C11                 mov     [ebp+var_440], eax
.text:00003C17                 cmp     [ebp+var_440], 0
.text:00003C1E                 jz      loc_3CA4
.text:00003C24                 mov     eax, [ebp+var_440]
.text:00003C2A                 mov     [ebp+var_4E8], eax
.text:00003C30                 mov     byte ptr [ebp+var_4], 8
.text:00003C34                 lea     ecx, [ebp+var_40C]
.text:00003C3A                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00003C3F                 mov     byte ptr [ebp+var_4], 6
.text:00003C43                 lea     ecx, [ebp+var_3F8] ; this
.text:00003C49                 call    ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text:00003C4E                 mov     byte ptr [ebp+var_4], 5
.text:00003C52                 lea     ecx, [ebp+var_2F8] ; this
.text:00003C58                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:00003C5D                 mov     byte ptr [ebp+var_4], 4
.text:00003C61                 lea     ecx, [ebp+var_298] ; this
.text:00003C67                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:00003C6C                 mov     byte ptr [ebp+var_4], 1
.text:00003C70                 lea     ecx, [ebp+var_1C0] ; this
.text:00003C76                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:00003C7B                 mov     byte ptr [ebp+var_4], 0
.text:00003C7F                 lea     ecx, [ebp+var_E8]
.text:00003C85                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003C8A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003C91                 lea     ecx, [ebp+var_5C] ; this
.text:00003C94                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00003C99                 mov     eax, [ebp+var_4E8]
.text:00003C9F                 jmp     loc_444E
.text:00003CA4 ; ---------------------------------------------------------------------------
.text:00003CA4
.text:00003CA4 loc_3CA4:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+F7Aj
.text:00003CA4                 movzx   ecx, [ebp+var_D]
.text:00003CA8                 test    ecx, ecx
.text:00003CAA                 jnz     loc_3DD8
.text:00003CB0                 movzx   edx, [ebp+var_431]
.text:00003CB7                 test    edx, edx
.text:00003CB9                 jz      loc_3D89
.text:00003CBF                 lea     eax, [ebp+var_3F8]
.text:00003CC5                 push    eax             ; struct CReadArcItem *
.text:00003CC6                 mov     ecx, [ebp+var_414]
.text:00003CCC                 push    ecx             ; unsigned int
.text:00003CCD                 mov     ecx, [ebp+var_318] ; this
.text:00003CD3                 call    ?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z ; CArc::GetItem(uint,CReadArcItem &)
.text:00003CD8                 mov     [ebp+var_444], eax
.text:00003CDE                 cmp     [ebp+var_444], 0
.text:00003CE5                 jz      loc_3D6B
.text:00003CEB                 mov     edx, [ebp+var_444]
.text:00003CF1                 mov     [ebp+var_4EC], edx
.text:00003CF7                 mov     byte ptr [ebp+var_4], 8
.text:00003CFB                 lea     ecx, [ebp+var_40C]
.text:00003D01                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00003D06                 mov     byte ptr [ebp+var_4], 6
.text:00003D0A                 lea     ecx, [ebp+var_3F8] ; this
.text:00003D10                 call    ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text:00003D15                 mov     byte ptr [ebp+var_4], 5
.text:00003D19                 lea     ecx, [ebp+var_2F8] ; this
.text:00003D1F                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:00003D24                 mov     byte ptr [ebp+var_4], 4
.text:00003D28                 lea     ecx, [ebp+var_298] ; this
.text:00003D2E                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:00003D33                 mov     byte ptr [ebp+var_4], 1
.text:00003D37                 lea     ecx, [ebp+var_1C0] ; this
.text:00003D3D                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:00003D42                 mov     byte ptr [ebp+var_4], 0
.text:00003D46                 lea     ecx, [ebp+var_E8]
.text:00003D4C                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003D51                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003D58                 lea     ecx, [ebp+var_5C] ; this
.text:00003D5B                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00003D60                 mov     eax, [ebp+var_4EC]
.text:00003D66                 jmp     loc_444E
.text:00003D6B ; ---------------------------------------------------------------------------
.text:00003D6B
.text:00003D6B loc_3D6B:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1041j
.text:00003D6B                 lea     eax, [ebp+var_3F8]
.text:00003D71                 push    eax             ; struct CReadArcItem *
.text:00003D72                 mov     ecx, [ebp+arg_20]
.text:00003D75                 push    ecx             ; struct NWildcard::CCensorNode *
.text:00003D76                 call    ?CensorNode_CheckPath@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@@Z ; CensorNode_CheckPath(NWildcard::CCensorNode const &,CReadArcItem const &)
.text:00003D7B                 movzx   edx, al
.text:00003D7E                 test    edx, edx
.text:00003D80                 jnz     short loc_3D87
.text:00003D82                 jmp     loc_38CE
.text:00003D87 ; ---------------------------------------------------------------------------
.text:00003D87
.text:00003D87 loc_3D87:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+10DCj
.text:00003D87                 jmp     short loc_3DD8
.text:00003D89 ; ---------------------------------------------------------------------------
.text:00003D89
.text:00003D89 loc_3D89:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1015j
.text:00003D89                 lea     eax, [ebp+var_40C]
.text:00003D8F                 push    eax
.text:00003D90                 lea     ecx, [ebp+var_48]
.text:00003D93                 push    ecx
.text:00003D94                 call    ?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; SplitPathToParts(UString const &,CObjectVector<UString> &)
.text:00003D99                 lea     edx, [ebp+var_449]
.text:00003D9F                 push    edx
.text:00003DA0                 movzx   eax, [ebp+var_24]
.text:00003DA4                 test    eax, eax
.text:00003DA6                 setz    cl
.text:00003DA9                 movzx   edx, cl
.text:00003DAC                 push    edx
.text:00003DAD                 lea     eax, [ebp+var_40C]
.text:00003DB3                 push    eax
.text:00003DB4                 mov     ecx, [ebp+arg_20]
.text:00003DB7                 call    ?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z ; NWildcard::CCensorNode::CheckPathVect(CObjectVector<UString> const &,bool,bool &)
.text:00003DBC                 movzx   ecx, al
.text:00003DBF                 test    ecx, ecx
.text:00003DC1                 jnz     short loc_3DC8
.text:00003DC3                 jmp     loc_38CE
.text:00003DC8 ; ---------------------------------------------------------------------------
.text:00003DC8
.text:00003DC8 loc_3DC8:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+111Dj
.text:00003DC8                 movzx   edx, [ebp+var_449]
.text:00003DCF                 test    edx, edx
.text:00003DD1                 jnz     short loc_3DD8
.text:00003DD3                 jmp     loc_38CE
.text:00003DD8 ; ---------------------------------------------------------------------------
.text:00003DD8
.text:00003DD8 loc_3DD8:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1006j
.text:00003DD8                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &):loc_3D87j ...
.text:00003DD8                 lea     ecx, [ebp+var_48C]
.text:00003DDE                 call    ??0CListStat@@QAE@XZ ; CListStat::CListStat(void)
.text:00003DE3                 lea     eax, [ebp+var_48C]
.text:00003DE9                 push    eax             ; unsigned __int64 *
.text:00003DEA                 push    7               ; int
.text:00003DEC                 mov     ecx, [ebp+var_414]
.text:00003DF2                 push    ecx             ; int
.text:00003DF3                 mov     edx, [ebp+var_31C]
.text:00003DF9                 push    edx             ; int
.text:00003DFA                 call    ?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z ; GetUInt64Value(IInArchive *,uint,ulong,CListUInt64Def &)
.text:00003DFF                 mov     [ebp+var_494], eax
.text:00003E05                 cmp     [ebp+var_494], 0
.text:00003E0C                 jz      loc_3E92
.text:00003E12                 mov     eax, [ebp+var_494]
.text:00003E18                 mov     [ebp+var_4F0], eax
.text:00003E1E                 mov     byte ptr [ebp+var_4], 8
.text:00003E22                 lea     ecx, [ebp+var_40C]
.text:00003E28                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00003E2D                 mov     byte ptr [ebp+var_4], 6
.text:00003E31                 lea     ecx, [ebp+var_3F8] ; this
.text:00003E37                 call    ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text:00003E3C                 mov     byte ptr [ebp+var_4], 5
.text:00003E40                 lea     ecx, [ebp+var_2F8] ; this
.text:00003E46                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:00003E4B                 mov     byte ptr [ebp+var_4], 4
.text:00003E4F                 lea     ecx, [ebp+var_298] ; this
.text:00003E55                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:00003E5A                 mov     byte ptr [ebp+var_4], 1
.text:00003E5E                 lea     ecx, [ebp+var_1C0] ; this
.text:00003E64                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:00003E69                 mov     byte ptr [ebp+var_4], 0
.text:00003E6D                 lea     ecx, [ebp+var_E8]
.text:00003E73                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003E78                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003E7F                 lea     ecx, [ebp+var_5C] ; this
.text:00003E82                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00003E87                 mov     eax, [ebp+var_4F0]
.text:00003E8D                 jmp     loc_444E
.text:00003E92 ; ---------------------------------------------------------------------------
.text:00003E92
.text:00003E92 loc_3E92:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1168j
.text:00003E92                 lea     ecx, [ebp+var_47C]
.text:00003E98                 push    ecx             ; unsigned __int64 *
.text:00003E99                 push    8               ; int
.text:00003E9B                 mov     edx, [ebp+var_414]
.text:00003EA1                 push    edx             ; int
.text:00003EA2                 mov     eax, [ebp+var_31C]
.text:00003EA8                 push    eax             ; int
.text:00003EA9                 call    ?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z ; GetUInt64Value(IInArchive *,uint,ulong,CListUInt64Def &)
.text:00003EAE                 mov     [ebp+var_498], eax
.text:00003EB4                 cmp     [ebp+var_498], 0
.text:00003EBB                 jz      loc_3F41
.text:00003EC1                 mov     ecx, [ebp+var_498]
.text:00003EC7                 mov     [ebp+var_4F4], ecx
.text:00003ECD                 mov     byte ptr [ebp+var_4], 8
.text:00003ED1                 lea     ecx, [ebp+var_40C]
.text:00003ED7                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00003EDC                 mov     byte ptr [ebp+var_4], 6
.text:00003EE0                 lea     ecx, [ebp+var_3F8] ; this
.text:00003EE6                 call    ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text:00003EEB                 mov     byte ptr [ebp+var_4], 5
.text:00003EEF                 lea     ecx, [ebp+var_2F8] ; this
.text:00003EF5                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:00003EFA                 mov     byte ptr [ebp+var_4], 4
.text:00003EFE                 lea     ecx, [ebp+var_298] ; this
.text:00003F04                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:00003F09                 mov     byte ptr [ebp+var_4], 1
.text:00003F0D                 lea     ecx, [ebp+var_1C0] ; this
.text:00003F13                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:00003F18                 mov     byte ptr [ebp+var_4], 0
.text:00003F1C                 lea     ecx, [ebp+var_E8]
.text:00003F22                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003F27                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003F2E                 lea     ecx, [ebp+var_5C] ; this
.text:00003F31                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00003F36                 mov     eax, [ebp+var_4F4]
.text:00003F3C                 jmp     loc_444E
.text:00003F41 ; ---------------------------------------------------------------------------
.text:00003F41
.text:00003F41 loc_3F41:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1217j
.text:00003F41                 lea     edx, [ebp+var_46C]
.text:00003F47                 push    edx
.text:00003F48                 mov     eax, [ebp+var_414]
.text:00003F4E                 push    eax
.text:00003F4F                 mov     ecx, [ebp+var_31C]
.text:00003F55                 push    ecx
.text:00003F56                 call    ?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z ; GetItemMTime(IInArchive *,uint,CListFileTimeDef &)
.text:00003F5B                 mov     [ebp+var_49C], eax
.text:00003F61                 cmp     [ebp+var_49C], 0
.text:00003F68                 jz      loc_3FEE
.text:00003F6E                 mov     edx, [ebp+var_49C]
.text:00003F74                 mov     [ebp+var_4F8], edx
.text:00003F7A                 mov     byte ptr [ebp+var_4], 8
.text:00003F7E                 lea     ecx, [ebp+var_40C]
.text:00003F84                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00003F89                 mov     byte ptr [ebp+var_4], 6
.text:00003F8D                 lea     ecx, [ebp+var_3F8] ; this
.text:00003F93                 call    ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text:00003F98                 mov     byte ptr [ebp+var_4], 5
.text:00003F9C                 lea     ecx, [ebp+var_2F8] ; this
.text:00003FA2                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:00003FA7                 mov     byte ptr [ebp+var_4], 4
.text:00003FAB                 lea     ecx, [ebp+var_298] ; this
.text:00003FB1                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:00003FB6                 mov     byte ptr [ebp+var_4], 1
.text:00003FBA                 lea     ecx, [ebp+var_1C0] ; this
.text:00003FC0                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:00003FC5                 mov     byte ptr [ebp+var_4], 0
.text:00003FC9                 lea     ecx, [ebp+var_E8]
.text:00003FCF                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003FD4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003FDB                 lea     ecx, [ebp+var_5C] ; this
.text:00003FDE                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00003FE3                 mov     eax, [ebp+var_4F8]
.text:00003FE9                 jmp     loc_444E
.text:00003FEE ; ---------------------------------------------------------------------------
.text:00003FEE
.text:00003FEE loc_3FEE:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+12C4j
.text:00003FEE                 movzx   eax, [ebp+var_24]
.text:00003FF2                 test    eax, eax
.text:00003FF4                 jz      short loc_4016
.text:00003FF6                 mov     ecx, [ebp+var_330]
.text:00003FFC                 add     ecx, 1
.text:00003FFF                 mov     edx, [ebp+var_32C]
.text:00004005                 adc     edx, 0
.text:00004008                 mov     [ebp+var_330], ecx
.text:0000400E                 mov     [ebp+var_32C], edx
.text:00004014                 jmp     short loc_402A
.text:00004016 ; ---------------------------------------------------------------------------
.text:00004016
.text:00004016 loc_4016:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1350j
.text:00004016                 mov     [ebp+var_45C], 1
.text:00004020                 mov     [ebp+var_458], 0
.text:0000402A
.text:0000402A loc_402A:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1370j
.text:0000402A                 lea     eax, [ebp+var_48C]
.text:00004030                 push    eax             ; struct CListStat *
.text:00004031                 movzx   ecx, [ebp+var_431]
.text:00004038                 push    ecx             ; bool
.text:00004039                 lea     ecx, [ebp+var_3A0] ; this
.text:0000403F                 call    ?GetStat@CListStat2@@QAEAAUCListStat@@_N@Z ; CListStat2::GetStat(bool)
.text:00004044                 mov     ecx, eax        ; this
.text:00004046                 call    ?Update@CListStat@@QAEXABU1@@Z ; CListStat::Update(CListStat const &)
.text:0000404B                 movzx   edx, [ebp+var_431]
.text:00004052                 test    edx, edx
.text:00004054                 jz      short loc_4063
.text:00004056                 movzx   eax, [ebp+arg_1C]
.text:0000405A                 test    eax, eax
.text:0000405C                 jnz     short loc_4063
.text:0000405E                 jmp     loc_38CE
.text:00004063 ; ---------------------------------------------------------------------------
.text:00004063
.text:00004063 loc_4063:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+13B0j
.text:00004063                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+13B8j
.text:00004063                 lea     ecx, [ebp+var_48C]
.text:00004069                 push    ecx             ; struct CListStat *
.text:0000406A                 mov     edx, [ebp+var_414]
.text:00004070                 push    edx             ; unsigned int
.text:00004071                 lea     ecx, [ebp+var_5C] ; this
.text:00004074                 call    ?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)
.text:00004079                 mov     [ebp+var_4A0], eax
.text:0000407F                 cmp     [ebp+var_4A0], 0
.text:00004086                 jz      loc_410C
.text:0000408C                 mov     eax, [ebp+var_4A0]
.text:00004092                 mov     [ebp+var_4FC], eax
.text:00004098                 mov     byte ptr [ebp+var_4], 8
.text:0000409C                 lea     ecx, [ebp+var_40C]
.text:000040A2                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000040A7                 mov     byte ptr [ebp+var_4], 6
.text:000040AB                 lea     ecx, [ebp+var_3F8] ; this
.text:000040B1                 call    ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text:000040B6                 mov     byte ptr [ebp+var_4], 5
.text:000040BA                 lea     ecx, [ebp+var_2F8] ; this
.text:000040C0                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:000040C5                 mov     byte ptr [ebp+var_4], 4
.text:000040C9                 lea     ecx, [ebp+var_298] ; this
.text:000040CF                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:000040D4                 mov     byte ptr [ebp+var_4], 1
.text:000040D8                 lea     ecx, [ebp+var_1C0] ; this
.text:000040DE                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:000040E3                 mov     byte ptr [ebp+var_4], 0
.text:000040E7                 lea     ecx, [ebp+var_E8]
.text:000040ED                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000040F2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000040F9                 lea     ecx, [ebp+var_5C] ; this
.text:000040FC                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00004101                 mov     eax, [ebp+var_4FC]
.text:00004107                 jmp     loc_444E
.text:0000410C ; ---------------------------------------------------------------------------
.text:0000410C
.text:0000410C loc_410C:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+13E2j
.text:0000410C                 jmp     loc_38CE
.text:00004111 ; ---------------------------------------------------------------------------
.text:00004111
.text:00004111 loc_4111:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+C45j
.text:00004111                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+D05j
.text:00004111                 lea     ecx, [ebp+var_3A0] ; this
.text:00004117                 call    ?GetNumStreams@CListStat2@@QBE?B_KXZ ; CListStat2::GetNumStreams(void)
.text:0000411C                 mov     [ebp+var_4A8], eax
.text:00004122                 mov     [ebp+var_4A4], edx
.text:00004128                 movzx   ecx, [ebp+arg_C]
.text:0000412C                 test    ecx, ecx
.text:0000412E                 jnz     loc_41DA
.text:00004134                 movzx   edx, [ebp+var_388]
.text:0000413B                 test    edx, edx
.text:0000413D                 jnz     loc_41DA
.text:00004143                 movzx   eax, [ebp+var_350]
.text:0000414A                 test    eax, eax
.text:0000414C                 jnz     loc_41DA
.text:00004152                 lea     ecx, [ebp+var_1B4]
.text:00004158                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:0000415D                 test    eax, eax
.text:0000415F                 jz      short loc_4185
.text:00004161                 mov     ecx, [ebp+var_118]
.text:00004167                 add     ecx, [ebp+var_1A8]
.text:0000416D                 mov     edx, [ebp+var_114]
.text:00004173                 adc     edx, [ebp+var_1A4]
.text:00004179                 mov     [ebp+var_118], ecx
.text:0000417F                 mov     [ebp+var_114], edx
.text:00004185
.text:00004185 loc_4185:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+14BBj
.text:00004185                 mov     eax, [ebp+var_4A8]
.text:0000418B                 or      eax, [ebp+var_4A4]
.text:00004191                 jnz     short loc_41A9
.text:00004193                 mov     dword ptr [ebp+var_51C], 0
.text:0000419D                 mov     dword ptr [ebp+var_51C+4], 0
.text:000041A7                 jmp     short loc_41C1
.text:000041A9 ; ---------------------------------------------------------------------------
.text:000041A9
.text:000041A9 loc_41A9:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+14EDj
.text:000041A9                 mov     ecx, [ebp+var_118]
.text:000041AF                 mov     dword ptr [ebp+var_51C], ecx
.text:000041B5                 mov     edx, [ebp+var_114]
.text:000041BB                 mov     dword ptr [ebp+var_51C+4], edx
.text:000041C1
.text:000041C1 loc_41C1:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1503j
.text:000041C1                 mov     eax, dword ptr [ebp+var_51C+4]
.text:000041C7                 push    eax
.text:000041C8                 mov     ecx, dword ptr [ebp+var_51C]
.text:000041CE                 push    ecx             ; unsigned __int64
.text:000041CF                 lea     ecx, [ebp+var_390] ; this
.text:000041D5                 call    ?Add@CListUInt64Def@@QAEX_K@Z ; CListUInt64Def::Add(unsigned __int64)
.text:000041DA
.text:000041DA loc_41DA:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+148Aj
.text:000041DA                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1499j ...
.text:000041DA                 lea     ecx, [ebp+var_3A0] ; this
.text:000041E0                 call    ?SetSizeDefIfNoFiles@CListStat@@QAEXXZ ; CListStat::SetSizeDefIfNoFiles(void)
.text:000041E5                 lea     ecx, [ebp+var_368] ; this
.text:000041EB                 call    ?SetSizeDefIfNoFiles@CListStat@@QAEXXZ ; CListStat::SetSizeDefIfNoFiles(void)
.text:000041F0                 movzx   edx, [ebp+arg_24]
.text:000041F4                 test    edx, edx
.text:000041F6                 jz      short loc_4226
.text:000041F8                 movzx   eax, [ebp+arg_28]
.text:000041FC                 test    eax, eax
.text:000041FE                 jnz     short loc_4226
.text:00004200                 lea     ecx, [ebp+var_5C] ; this
.text:00004203                 call    ?PrintTitleLines@CFieldPrinter@@QAEXXZ ; CFieldPrinter::PrintTitleLines(void)
.text:00004208                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000420D                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00004212                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00004217                 lea     ecx, [ebp+var_3A0]
.text:0000421D                 push    ecx             ; struct CListStat2 *
.text:0000421E                 lea     ecx, [ebp+var_5C] ; this
.text:00004221                 call    ?PrintSum@CFieldPrinter@@QAEXABUCListStat2@@@Z ; CFieldPrinter::PrintSum(CListStat2 const &)
.text:00004226
.text:00004226 loc_4226:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1552j
.text:00004226                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+155Aj
.text:00004226                 movzx   edx, [ebp+arg_24]
.text:0000422A                 test    edx, edx
.text:0000422C                 jz      short loc_4283
.text:0000422E                 cmp     [ebp+var_184], 0
.text:00004235                 jl      short loc_4283
.text:00004237                 push    offset $SG73713 ; "----------\n"
.text:0000423C                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00004241                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00004246                 lea     ecx, [ebp+var_19C]
.text:0000424C                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00004251                 push    eax             ; int
.text:00004252                 push    offset $SG73714 ; "Path"
.text:00004257                 push    offset ?g_StdOut@@3VCStdOutStream@@A ; int
.text:0000425C                 call    ?PrintPropPair@@YGXAAVCStdOutStream@@PBDPB_W@Z ; PrintPropPair(CStdOutStream &,char const *,wchar_t const *)
.text:00004261                 push    0
.text:00004263                 mov     eax, [ebp+var_184]
.text:00004269                 push    eax
.text:0000426A                 mov     ecx, [ebp+arg_0]
.text:0000426D                 add     ecx, 8
.text:00004270                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:00004275                 add     eax, 0Ch
.text:00004278                 push    eax
.text:00004279                 push    offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:0000427E                 call    ?PrintArcTypeError@@YGXAAVCStdOutStream@@ABVUString@@_N@Z ; PrintArcTypeError(CStdOutStream &,UString const &,bool)
.text:00004283
.text:00004283 loc_4283:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1588j
.text:00004283                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1591j
.text:00004283                 lea     ecx, [ebp+var_3A0]
.text:00004289                 push    ecx             ; struct CListStat2 *
.text:0000428A                 lea     ecx, [ebp+var_DC] ; this
.text:00004290                 call    ?Update@CListStat2@@QAEXABU1@@Z ; CListStat2::Update(CListStat2 const &)
.text:00004295                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; this
.text:0000429A                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:0000429F                 mov     byte ptr [ebp+var_4], 8
.text:000042A3                 lea     ecx, [ebp+var_40C]
.text:000042A9                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000042AE                 mov     byte ptr [ebp+var_4], 6
.text:000042B2                 lea     ecx, [ebp+var_3F8] ; this
.text:000042B8                 call    ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text:000042BD                 mov     byte ptr [ebp+var_4], 5
.text:000042C1                 lea     ecx, [ebp+var_2F8] ; this
.text:000042C7                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:000042CC                 mov     byte ptr [ebp+var_4], 4
.text:000042D0                 lea     ecx, [ebp+var_298] ; this
.text:000042D6                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:000042DB                 mov     byte ptr [ebp+var_4], 1
.text:000042DF                 lea     ecx, [ebp+var_1C0] ; this
.text:000042E5                 call    ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text:000042EA                 jmp     loc_2DE8
.text:000042EF ; ---------------------------------------------------------------------------
.text:000042EF
.text:000042EF loc_42EF:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+161j
.text:000042EF                 movzx   edx, [ebp+arg_24]
.text:000042F3                 test    edx, edx
.text:000042F5                 jz      loc_43C5
.text:000042FB                 movzx   eax, [ebp+arg_28]
.text:000042FF                 test    eax, eax
.text:00004301                 jnz     loc_43C5
.text:00004307                 mov     ecx, [ebp+arg_10]
.text:0000430A                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:0000430F                 cmp     eax, 1
.text:00004312                 ja      short loc_432A
.text:00004314                 cmp     [ebp+var_F4], 0
.text:0000431B                 ja      short loc_432A
.text:0000431D                 cmp     [ebp+var_F8], 1
.text:00004324                 jbe     loc_43C5
.text:0000432A
.text:0000432A loc_432A:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+166Ej
.text:0000432A                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1677j
.text:0000432A                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000432F                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00004334                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00004339                 lea     ecx, [ebp+var_5C] ; this
.text:0000433C                 call    ?PrintTitleLines@CFieldPrinter@@QAEXXZ ; CFieldPrinter::PrintTitleLines(void)
.text:00004341                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00004346                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:0000434B                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00004350                 lea     ecx, [ebp+var_DC]
.text:00004356                 push    ecx             ; struct CListStat2 *
.text:00004357                 lea     ecx, [ebp+var_5C] ; this
.text:0000435A                 call    ?PrintSum@CFieldPrinter@@QAEXABUCListStat2@@@Z ; CFieldPrinter::PrintSum(CListStat2 const &)
.text:0000435F                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00004364                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00004369                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000436E                 mov     edx, [ebp+var_FC]
.text:00004374                 push    edx             ; int
.text:00004375                 mov     eax, [ebp+var_100]
.text:0000437B                 push    eax             ; int
.text:0000437C                 push    offset $SG73717 ; "Archives"
.text:00004381                 push    offset ?g_StdOut@@3VCStdOutStream@@A ; int
.text:00004386                 call    ?PrintPropNameAndNumber@@YGXAAVCStdOutStream@@PBD_K@Z ; PrintPropNameAndNumber(CStdOutStream &,char const *,unsigned __int64)
.text:0000438B                 mov     ecx, [ebp+var_F4]
.text:00004391                 push    ecx             ; int
.text:00004392                 mov     edx, [ebp+var_F8]
.text:00004398                 push    edx             ; int
.text:00004399                 push    offset $SG73718 ; "Volumes"
.text:0000439E                 push    offset ?g_StdOut@@3VCStdOutStream@@A ; int
.text:000043A3                 call    ?PrintPropNameAndNumber@@YGXAAVCStdOutStream@@PBD_K@Z ; PrintPropNameAndNumber(CStdOutStream &,char const *,unsigned __int64)
.text:000043A8                 mov     eax, [ebp+var_104]
.text:000043AE                 push    eax             ; int
.text:000043AF                 mov     ecx, [ebp+var_108]
.text:000043B5                 push    ecx             ; int
.text:000043B6                 push    offset $SG73719 ; "Total archives size"
.text:000043BB                 push    offset ?g_StdOut@@3VCStdOutStream@@A ; int
.text:000043C0                 call    ?PrintPropNameAndNumber@@YGXAAVCStdOutStream@@PBD_K@Z ; PrintPropNameAndNumber(CStdOutStream &,char const *,unsigned __int64)
.text:000043C5
.text:000043C5 loc_43C5:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1651j
.text:000043C5                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+165Dj ...
.text:000043C5                 mov     edx, [ebp+arg_38]
.text:000043C8                 mov     [ebp+var_520], edx
.text:000043CE                 mov     eax, [ebp+var_520]
.text:000043D4                 cmp     dword ptr [eax], 1
.text:000043D7                 jnz     short loc_4420
.text:000043D9                 mov     ecx, [ebp+var_520]
.text:000043DF                 cmp     dword ptr [ecx+4], 0
.text:000043E3                 jnz     short loc_4420
.text:000043E5                 cmp     [ebp+var_10C], 0
.text:000043EC                 jz      short loc_4420
.text:000043EE                 mov     edx, [ebp+var_10C]
.text:000043F4                 mov     [ebp+var_500], edx
.text:000043FA                 mov     byte ptr [ebp+var_4], 0
.text:000043FE                 lea     ecx, [ebp+var_E8]
.text:00004404                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004409                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004410                 lea     ecx, [ebp+var_5C] ; this
.text:00004413                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00004418                 mov     eax, [ebp+var_500]
.text:0000441E                 jmp     short loc_444E
.text:00004420 ; ---------------------------------------------------------------------------
.text:00004420
.text:00004420 loc_4420:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1733j
.text:00004420                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+173Fj ...
.text:00004420                 mov     [ebp+var_504], 0
.text:0000442A                 mov     byte ptr [ebp+var_4], 0
.text:0000442E                 lea     ecx, [ebp+var_E8]
.text:00004434                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004439                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004440                 lea     ecx, [ebp+var_5C] ; this
.text:00004443                 call    ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text:00004448
.text:00004448 loc_4448:                               ; DATA XREF: .rdata:$SG72554o
.text:00004448                 mov     eax, [ebp+var_504]
.text:0000444E
.text:0000444E loc_444E:                               ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+56Dj
.text:0000444E                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+994j ...
.text:0000444E                 push    edx
.text:0000444F                 mov     ecx, ebp
.text:00004451                 push    eax
.text:00004452                 lea     edx, $LN110
.text:00004458                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000445D                 pop     eax
.text:0000445E                 pop     edx
.text:0000445F                 mov     ecx, [ebp+var_C]
.text:00004462                 mov     large fs:0, ecx
.text:00004469                 pop     ecx
.text:0000446A                 pop     edi
.text:0000446B                 pop     esi
.text:0000446C                 add     esp, 520h
.text:00004472                 cmp     ebp, esp
.text:00004474                 call    __RTC_CheckEsp
.text:00004479                 mov     esp, ebp
.text:0000447B                 pop     ebp
.text:0000447C                 retn    40h
.text:0000447C ?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z endp
.text:0000447C
.text:0000447C ; ---------------------------------------------------------------------------
.text:0000447F                 align 10h
.text:00004480 $LN110          dd 0Fh                  ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+17AEo
.text:00004484                 dd offset $LN109
.text:00004488 $LN109          dd 0FFFFFFA4h, 48h      ; DATA XREF: .text:00004484o
.text:00004490                 dd offset $LN93         ; "fp"
.text:00004494                 dd 0FFFFFF24h, 78h
.text:0000449C                 dd offset $LN94         ; "stat2total"
.text:000044A0                 dd 0FFFFFF18h, 4
.text:000044A8                 dd offset $LN95         ; "skipArcs"
.text:000044AC                 dd 0FFFFFEACh, 38h
.text:000044B4                 dd offset $LN96         ; "fi"
.text:000044B8                 dd 0FFFFFE40h, 60h
.text:000044C0                 dd offset $LN97         ; "arcLink"
.text:000044C4                 dd 0FFFFFD68h, 0D0h
.text:000044CC                 dd offset $LN98         ; "openCallback"
.text:000044D0                 dd 0FFFFFD08h, 58h
.text:000044D8                 dd offset $LN99         ; "options"
.text:000044DC                 dd 0FFFFFC60h, 78h
.text:000044E4                 dd offset $LN100        ; "stat2"
.text:000044E8                 dd 0FFFFFC54h, 4
.text:000044F0                 dd offset $LN101        ; "numItems"
.text:000044F4                 dd 0FFFFFC08h, 40h
.text:000044FC                 dd offset $LN102        ; "item"
.text:00004500                 dd 0FFFFFBF4h, 0Ch
.text:00004508                 dd offset $LN103        ; "pathParts"
.text:0000450C                 dd 0FFFFFBDFh, 1
.text:00004514                 dd offset $LN104        ; "isAux"
.text:00004518                 dd 0FFFFFBCFh, 1
.text:00004520                 dd offset $LN105        ; "isAltStream"
.text:00004524                 dd 0FFFFFBB7h, 1
.text:0000452C                 dd offset $LN106        ; "include"
.text:00004530                 dd 0FFFFFB74h, 38h
.text:00004538                 dd offset $LN107
.text:0000453C $LN107          db 73h, 74h, 0          ; DATA XREF: .text:00004538o
.text:0000453F $LN106          db 'include',0          ; DATA XREF: .text:0000452Co
.text:00004547 $LN105          db 'isAltStream',0      ; DATA XREF: .text:00004520o
.text:00004553 $LN104          db 'isAux',0            ; DATA XREF: .text:00004514o
.text:00004559 $LN103          db 'pathParts',0        ; DATA XREF: .text:00004508o
.text:00004563 $LN102          db 'item',0             ; DATA XREF: .text:000044FCo
.text:00004568 $LN101          db 'numItems',0         ; DATA XREF: .text:000044F0o
.text:00004571 $LN100          db 'stat2',0            ; DATA XREF: .text:000044E4o
.text:00004577 $LN99           db 'options',0          ; DATA XREF: .text:000044D8o
.text:0000457F $LN98           db 'openCallback',0     ; DATA XREF: .text:000044CCo
.text:0000458C $LN97           db 'arcLink',0          ; DATA XREF: .text:000044C0o
.text:00004594 $LN96           db 'fi',0               ; DATA XREF: .text:000044B4o
.text:00004597 $LN95           db 'skipArcs',0         ; DATA XREF: .text:000044A8o
.text:000045A0 $LN94           db 'stat2total',0       ; DATA XREF: .text:0000449Co
.text:000045AB $LN93           db 'fp',0               ; DATA XREF: .text:00004490o
.text:000045AE                 db 6 dup(0CCh)
.text:000045B4
.text:000045B4 ; =============== S U B R O U T I N E =======================================
.text:000045B4
.text:000045B4 ; Attributes: bp-based frame
.text:000045B4
.text:000045B4 ; int __stdcall GetUInt64Value(int, int, int, unsigned __int64 *)
.text:000045B4 ?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z proc near
.text:000045B4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1156p
.text:000045B4                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1205p
.text:000045B4
.text:000045B4 var_30          = dword ptr -30h
.text:000045B4 var_2C          = dword ptr -2Ch
.text:000045B4 var_28          = dword ptr -28h
.text:000045B4 var_24          = dword ptr -24h
.text:000045B4 var_20          = tagPROPVARIANT ptr -20h
.text:000045B4 var_10          = dword ptr -10h
.text:000045B4 var_C           = dword ptr -0Ch
.text:000045B4 var_4           = dword ptr -4
.text:000045B4 arg_0           = dword ptr  8
.text:000045B4 arg_4           = dword ptr  0Ch
.text:000045B4 arg_8           = dword ptr  10h
.text:000045B4 arg_C           = dword ptr  14h
.text:000045B4
.text:000045B4                 push    ebp
.text:000045B5                 mov     ebp, esp
.text:000045B7                 push    0FFFFFFFFh
.text:000045B9                 push    offset __ehhandler$?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z
.text:000045BE                 mov     eax, large fs:0
.text:000045C4                 push    eax
.text:000045C5                 sub     esp, 24h
.text:000045C8                 push    esi
.text:000045C9                 mov     eax, 0CCCCCCCCh
.text:000045CE                 mov     [ebp+var_30], eax
.text:000045D1                 mov     [ebp+var_2C], eax
.text:000045D4                 mov     [ebp+var_28], eax
.text:000045D7                 mov     [ebp+var_24], eax
.text:000045DA                 mov     dword ptr [ebp+var_20.anonymous_0], eax
.text:000045DD                 mov     dword ptr [ebp+var_20.anonymous_0+4], eax
.text:000045E0                 mov     dword ptr [ebp+var_20.anonymous_0+8], eax
.text:000045E3                 mov     dword ptr [ebp+var_20.anonymous_0+0Ch], eax
.text:000045E6                 mov     [ebp+var_10], eax
.text:000045E9                 mov     eax, dword ptr ds:___security_cookie
.text:000045EE                 xor     eax, ebp
.text:000045F0                 push    eax
.text:000045F1                 lea     eax, [ebp+var_C]
.text:000045F4                 mov     large fs:0, eax
.text:000045FA                 mov     eax, [ebp+arg_C]
.text:000045FD                 mov     dword ptr [eax], 0
.text:00004603                 mov     dword ptr [eax+4], 0
.text:0000460A                 mov     ecx, [ebp+arg_C]
.text:0000460D                 mov     byte ptr [ecx+8], 0
.text:00004611                 lea     ecx, [ebp+var_20] ; this
.text:00004614                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00004619                 mov     [ebp+var_4], 0
.text:00004620                 mov     esi, esp
.text:00004622                 lea     edx, [ebp+var_20]
.text:00004625                 push    edx
.text:00004626                 mov     eax, [ebp+arg_8]
.text:00004629                 push    eax
.text:0000462A                 mov     ecx, [ebp+arg_4]
.text:0000462D                 push    ecx
.text:0000462E                 mov     edx, [ebp+arg_0]
.text:00004631                 mov     eax, [edx]
.text:00004633                 mov     ecx, [ebp+arg_0]
.text:00004636                 push    ecx
.text:00004637                 mov     edx, [eax+18h]
.text:0000463A                 call    edx
.text:0000463C                 cmp     esi, esp
.text:0000463E                 call    __RTC_CheckEsp
.text:00004643                 mov     [ebp+var_28], eax
.text:00004646                 cmp     [ebp+var_28], 0
.text:0000464A                 jz      short loc_4666
.text:0000464C                 mov     eax, [ebp+var_28]
.text:0000464F                 mov     [ebp+var_2C], eax
.text:00004652                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004659                 lea     ecx, [ebp+var_20] ; this
.text:0000465C                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00004661                 mov     eax, [ebp+var_2C]
.text:00004664                 jmp     short loc_4692
.text:00004666 ; ---------------------------------------------------------------------------
.text:00004666
.text:00004666 loc_4666:                               ; CODE XREF: GetUInt64Value(IInArchive *,uint,ulong,CListUInt64Def &)+96j
.text:00004666                 mov     ecx, [ebp+arg_C]
.text:00004669                 push    ecx             ; unsigned __int64 *
.text:0000466A                 lea     edx, [ebp+var_20]
.text:0000466D                 push    edx             ; struct tagPROPVARIANT *
.text:0000466E                 call    ?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ; ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)
.text:00004673                 mov     ecx, [ebp+arg_C]
.text:00004676                 mov     [ecx+8], al
.text:00004679                 mov     [ebp+var_30], 0
.text:00004680                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004687                 lea     ecx, [ebp+var_20] ; this
.text:0000468A                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000468F                 mov     eax, [ebp+var_30]
.text:00004692
.text:00004692 loc_4692:                               ; CODE XREF: GetUInt64Value(IInArchive *,uint,ulong,CListUInt64Def &)+B0j
.text:00004692                 push    edx
.text:00004693                 mov     ecx, ebp
.text:00004695                 push    eax
.text:00004696                 lea     edx, $LN8_1
.text:0000469C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000046A1                 pop     eax
.text:000046A2                 pop     edx
.text:000046A3                 mov     ecx, [ebp+var_C]
.text:000046A6                 mov     large fs:0, ecx
.text:000046AD                 pop     ecx
.text:000046AE                 pop     esi
.text:000046AF                 add     esp, 30h
.text:000046B2                 cmp     ebp, esp
.text:000046B4                 call    __RTC_CheckEsp
.text:000046B9                 mov     esp, ebp
.text:000046BB                 pop     ebp
.text:000046BC                 retn    10h
.text:000046BC ?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z endp
.text:000046BC
.text:000046BC ; ---------------------------------------------------------------------------
.text:000046BF                 align 10h
.text:000046C0 $LN8_1          dd 1                    ; DATA XREF: GetUInt64Value(IInArchive *,uint,ulong,CListUInt64Def &)+E2o
.text:000046C4                 dd offset $LN7_3
.text:000046C8 $LN7_3          dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:000046C4o
.text:000046D0                 dd offset $LN5_4        ; "prop"
.text:000046D4 $LN5_4          db 'prop',0             ; DATA XREF: .text:000046D0o
.text:000046D9                 db 0Bh dup(0CCh)
.text:000046E4
.text:000046E4 ; =============== S U B R O U T I N E =======================================
.text:000046E4
.text:000046E4 ; Attributes: bp-based frame
.text:000046E4
.text:000046E4 ; long __stdcall GetItemMTime(struct IInArchive *, unsigned int, struct CListFileTimeDef &)
.text:000046E4 ?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z proc near
.text:000046E4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+12B2p
.text:000046E4
.text:000046E4 var_34          = dword ptr -34h
.text:000046E4 var_30          = dword ptr -30h
.text:000046E4 var_2C          = dword ptr -2Ch
.text:000046E4 var_28          = dword ptr -28h
.text:000046E4 var_20          = word ptr -20h
.text:000046E4 var_18          = dword ptr -18h
.text:000046E4 var_14          = dword ptr -14h
.text:000046E4 var_C           = dword ptr -0Ch
.text:000046E4 var_4           = dword ptr -4
.text:000046E4 arg_0           = dword ptr  8
.text:000046E4 arg_4           = dword ptr  0Ch
.text:000046E4 arg_8           = dword ptr  10h
.text:000046E4
.text:000046E4                 push    ebp
.text:000046E5                 mov     ebp, esp
.text:000046E7                 push    0FFFFFFFFh
.text:000046E9                 push    offset __ehhandler$?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z
.text:000046EE                 mov     eax, large fs:0
.text:000046F4                 push    eax
.text:000046F5                 sub     esp, 28h
.text:000046F8                 push    esi
.text:000046F9                 push    edi
.text:000046FA                 lea     edi, [ebp+var_34]
.text:000046FD                 mov     ecx, 0Ah
.text:00004702                 mov     eax, 0CCCCCCCCh
.text:00004707                 rep stosd
.text:00004709                 mov     eax, dword ptr ds:___security_cookie
.text:0000470E                 xor     eax, ebp
.text:00004710                 push    eax
.text:00004711                 lea     eax, [ebp+var_C]
.text:00004714                 mov     large fs:0, eax
.text:0000471A                 mov     eax, [ebp+arg_8]
.text:0000471D                 mov     dword ptr [eax], 0
.text:00004723                 mov     ecx, [ebp+arg_8]
.text:00004726                 mov     dword ptr [ecx+4], 0
.text:0000472D                 mov     edx, [ebp+arg_8]
.text:00004730                 mov     byte ptr [edx+8], 0
.text:00004734                 lea     ecx, [ebp+var_20] ; this
.text:00004737                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000473C                 mov     [ebp+var_4], 0
.text:00004743                 mov     esi, esp
.text:00004745                 lea     eax, [ebp+var_20]
.text:00004748                 push    eax
.text:00004749                 push    0Ch
.text:0000474B                 mov     ecx, [ebp+arg_4]
.text:0000474E                 push    ecx
.text:0000474F                 mov     edx, [ebp+arg_0]
.text:00004752                 mov     eax, [edx]
.text:00004754                 mov     ecx, [ebp+arg_0]
.text:00004757                 push    ecx
.text:00004758                 mov     edx, [eax+18h]
.text:0000475B                 call    edx
.text:0000475D                 cmp     esi, esp
.text:0000475F                 call    __RTC_CheckEsp
.text:00004764                 mov     [ebp+var_28], eax
.text:00004767                 cmp     [ebp+var_28], 0
.text:0000476B                 jz      short loc_4787
.text:0000476D                 mov     eax, [ebp+var_28]
.text:00004770                 mov     [ebp+var_2C], eax
.text:00004773                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000477A                 lea     ecx, [ebp+var_20] ; this
.text:0000477D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00004782                 mov     eax, [ebp+var_2C]
.text:00004785                 jmp     short loc_47E3
.text:00004787 ; ---------------------------------------------------------------------------
.text:00004787
.text:00004787 loc_4787:                               ; CODE XREF: GetItemMTime(IInArchive *,uint,CListFileTimeDef &)+87j
.text:00004787                 movzx   ecx, [ebp+var_20]
.text:0000478B                 cmp     ecx, 40h ; '@'
.text:0000478E                 jnz     short loc_47A7
.text:00004790                 mov     edx, [ebp+arg_8]
.text:00004793                 mov     eax, [ebp+var_18]
.text:00004796                 mov     [edx], eax
.text:00004798                 mov     ecx, [ebp+var_14]
.text:0000479B                 mov     [edx+4], ecx
.text:0000479E                 mov     edx, [ebp+arg_8]
.text:000047A1                 mov     byte ptr [edx+8], 1
.text:000047A5                 jmp     short loc_47CA
.text:000047A7 ; ---------------------------------------------------------------------------
.text:000047A7
.text:000047A7 loc_47A7:                               ; CODE XREF: GetItemMTime(IInArchive *,uint,CListFileTimeDef &)+AAj
.text:000047A7                 movzx   eax, [ebp+var_20]
.text:000047AB                 test    eax, eax
.text:000047AD                 jz      short loc_47CA
.text:000047AF                 mov     [ebp+var_30], 80004005h
.text:000047B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000047BD                 lea     ecx, [ebp+var_20] ; this
.text:000047C0                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000047C5                 mov     eax, [ebp+var_30]
.text:000047C8                 jmp     short loc_47E3
.text:000047CA ; ---------------------------------------------------------------------------
.text:000047CA
.text:000047CA loc_47CA:                               ; CODE XREF: GetItemMTime(IInArchive *,uint,CListFileTimeDef &)+C1j
.text:000047CA                                         ; GetItemMTime(IInArchive *,uint,CListFileTimeDef &)+C9j
.text:000047CA                 mov     [ebp+var_34], 0
.text:000047D1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000047D8                 lea     ecx, [ebp+var_20] ; this
.text:000047DB                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000047E0                 mov     eax, [ebp+var_34]
.text:000047E3
.text:000047E3 loc_47E3:                               ; CODE XREF: GetItemMTime(IInArchive *,uint,CListFileTimeDef &)+A1j
.text:000047E3                                         ; GetItemMTime(IInArchive *,uint,CListFileTimeDef &)+E4j
.text:000047E3                 push    edx
.text:000047E4                 mov     ecx, ebp
.text:000047E6                 push    eax
.text:000047E7                 lea     edx, $LN11_3
.text:000047ED                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000047F2                 pop     eax
.text:000047F3                 pop     edx
.text:000047F4                 mov     ecx, [ebp+var_C]
.text:000047F7                 mov     large fs:0, ecx
.text:000047FE                 pop     ecx
.text:000047FF                 pop     edi
.text:00004800                 pop     esi
.text:00004801                 add     esp, 34h
.text:00004804                 cmp     ebp, esp
.text:00004806                 call    __RTC_CheckEsp
.text:0000480B                 mov     esp, ebp
.text:0000480D                 pop     ebp
.text:0000480E                 retn    0Ch
.text:0000480E ?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z endp
.text:0000480E
.text:0000480E ; ---------------------------------------------------------------------------
.text:00004811                 align 4
.text:00004814 $LN11_3         dd 1                    ; DATA XREF: GetItemMTime(IInArchive *,uint,CListFileTimeDef &)+103o
.text:00004818                 dd offset $LN10_2
.text:0000481C $LN10_2         dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:00004818o
.text:00004824                 dd offset $LN8_2        ; "prop"
.text:00004828 $LN8_2          db 'prop',0             ; DATA XREF: .text:00004824o
.text:0000482D                 db 7 dup(0CCh)
.text:00004834
.text:00004834 ; =============== S U B R O U T I N E =======================================
.text:00004834
.text:00004834 ; Attributes: bp-based frame
.text:00004834
.text:00004834 ; int __stdcall PrintPropNameAndNumber(int, char *Str, int, int)
.text:00004834 ?PrintPropNameAndNumber@@YGXAAVCStdOutStream@@PBD_K@Z proc near
.text:00004834                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+16E2p
.text:00004834                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+16FFp ...
.text:00004834
.text:00004834 arg_0           = dword ptr  8
.text:00004834 Str             = dword ptr  0Ch
.text:00004834 arg_8           = dword ptr  10h
.text:00004834 arg_C           = dword ptr  14h
.text:00004834
.text:00004834                 push    ebp
.text:00004835                 mov     ebp, esp
.text:00004837                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000483C                 mov     eax, [ebp+arg_C]
.text:0000483F                 push    eax
.text:00004840                 mov     ecx, [ebp+arg_8]
.text:00004843                 push    ecx
.text:00004844                 push    offset $SG73208 ; Str
.text:00004849                 mov     edx, [ebp+Str]
.text:0000484C                 push    edx             ; Str
.text:0000484D                 mov     ecx, [ebp+arg_0]
.text:00004850                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00004855                 mov     ecx, eax
.text:00004857                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000485C                 mov     ecx, eax
.text:0000485E                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:00004863                 mov     ecx, eax
.text:00004865                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000486A                 cmp     ebp, esp
.text:0000486C                 call    __RTC_CheckEsp
.text:00004871                 pop     ebp
.text:00004872                 retn    10h
.text:00004872 ?PrintPropNameAndNumber@@YGXAAVCStdOutStream@@PBD_K@Z endp
.text:00004872
.text:00004872 ; ---------------------------------------------------------------------------
.text:00004875                 align 4
.text:00004875 _text           ends
.text:00004875
.rtc$TMZ:00004878 ; ===========================================================================
.rtc$TMZ:00004878
.rtc$TMZ:00004878 ; Segment type: Pure data
.rtc$TMZ:00004878 ; Segment permissions: Read
.rtc$TMZ:00004878 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00004878                 assume cs:_rtc$TMZ
.rtc$TMZ:00004878                 ;org 4878h
.rtc$TMZ:00004878 ; COMDAT (pick any)
.rtc$TMZ:00004878 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00004878 _rtc$TMZ        ends
.rtc$TMZ:00004878
.rtc$IMZ:0000487C ; ===========================================================================
.rtc$IMZ:0000487C
.rtc$IMZ:0000487C ; Segment type: Pure data
.rtc$IMZ:0000487C ; Segment permissions: Read
.rtc$IMZ:0000487C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000487C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000487C                 ;org 487Ch
.rtc$IMZ:0000487C ; COMDAT (pick any)
.rtc$IMZ:0000487C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000487C _rtc$IMZ        ends
.rtc$IMZ:0000487C
.text:00004880 ; ===========================================================================
.text:00004880
.text:00004880 ; Segment type: Pure code
.text:00004880 ; Segment permissions: Read/Execute
.text:00004880 _text           segment para public 'CODE' use32
.text:00004880                 assume cs:_text
.text:00004880                 ;org 4880h
.text:00004880 ; COMDAT (pick any)
.text:00004880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004880
.text:00004880 ; =============== S U B R O U T I N E =======================================
.text:00004880
.text:00004880 ; Attributes: bp-based frame
.text:00004880
.text:00004880 ; public: class AString & __thiscall AString::operator+=(char)
.text:00004880                 public ??YAString@@QAEAAV0@D@Z
.text:00004880 ??YAString@@QAEAAV0@D@Z proc near       ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+FCp
.text:00004880                                         ; CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+F1p
.text:00004880
.text:00004880 var_C           = dword ptr -0Ch
.text:00004880 var_8           = dword ptr -8
.text:00004880 var_4           = dword ptr -4
.text:00004880 arg_0           = byte ptr  8
.text:00004880
.text:00004880                 push    ebp
.text:00004881                 mov     ebp, esp
.text:00004883                 sub     esp, 0Ch
.text:00004886                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000488D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004894                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000489B                 mov     [ebp+var_4], ecx
.text:0000489E                 mov     eax, [ebp+var_4]
.text:000048A1                 mov     ecx, [ebp+var_4]
.text:000048A4                 mov     edx, [eax+8]
.text:000048A7                 cmp     edx, [ecx+4]
.text:000048AA                 jnz     short loc_48B4
.text:000048AC                 mov     ecx, [ebp+var_4] ; this
.text:000048AF                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:000048B4
.text:000048B4 loc_48B4:                               ; CODE XREF: AString::operator+=(char)+2Aj
.text:000048B4                 mov     eax, [ebp+var_4]
.text:000048B7                 mov     ecx, [eax+4]
.text:000048BA                 mov     [ebp+var_8], ecx
.text:000048BD                 mov     edx, [ebp+var_4]
.text:000048C0                 mov     eax, [edx]
.text:000048C2                 mov     [ebp+var_C], eax
.text:000048C5                 mov     ecx, [ebp+var_C]
.text:000048C8                 add     ecx, [ebp+var_8]
.text:000048CB                 mov     dl, [ebp+arg_0]
.text:000048CE                 mov     [ecx], dl
.text:000048D0                 mov     eax, [ebp+var_8]
.text:000048D3                 add     eax, 1
.text:000048D6                 mov     [ebp+var_8], eax
.text:000048D9                 mov     ecx, [ebp+var_C]
.text:000048DC                 add     ecx, [ebp+var_8]
.text:000048DF                 mov     byte ptr [ecx], 0
.text:000048E2                 mov     edx, [ebp+var_4]
.text:000048E5                 mov     eax, [ebp+var_8]
.text:000048E8                 mov     [edx+4], eax
.text:000048EB                 mov     eax, [ebp+var_4]
.text:000048EE                 add     esp, 0Ch
.text:000048F1                 cmp     ebp, esp
.text:000048F3                 call    __RTC_CheckEsp
.text:000048F8                 mov     esp, ebp
.text:000048FA                 pop     ebp
.text:000048FB                 retn    4
.text:000048FB ??YAString@@QAEAAV0@D@Z endp
.text:000048FB
.text:000048FB ; ---------------------------------------------------------------------------
.text:000048FE                 align 10h
.text:000048FE _text           ends
.text:000048FE
.text:00004900 ; ===========================================================================
.text:00004900
.text:00004900 ; Segment type: Pure code
.text:00004900 ; Segment permissions: Read/Execute
.text:00004900 _text           segment para public 'CODE' use32
.text:00004900                 assume cs:_text
.text:00004900                 ;org 4900h
.text:00004900 ; COMDAT (pick any)
.text:00004900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004900
.text:00004900 ; =============== S U B R O U T I N E =======================================
.text:00004900
.text:00004900 ; Attributes: bp-based frame
.text:00004900
.text:00004900 ; void __thiscall CFieldPrinter::Clear(CFieldPrinter *__hidden this)
.text:00004900                 public ?Clear@CFieldPrinter@@QAEXXZ
.text:00004900 ?Clear@CFieldPrinter@@QAEXXZ proc near  ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+20p
.text:00004900                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+A3Dp
.text:00004900
.text:00004900 var_4           = dword ptr -4
.text:00004900
.text:00004900                 push    ebp
.text:00004901                 mov     ebp, esp
.text:00004903                 push    ecx
.text:00004904                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000490B                 mov     [ebp+var_4], ecx
.text:0000490E                 mov     ecx, [ebp+var_4]
.text:00004911                 call    ?Clear@?$CObjectVector@UCFieldInfo@@@@QAEXXZ ; CObjectVector<CFieldInfo>::Clear(void)
.text:00004916                 mov     ecx, [ebp+var_4]
.text:00004919                 add     ecx, 3Ch ; '<'  ; this
.text:0000491C                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00004921                 add     esp, 4
.text:00004924                 cmp     ebp, esp
.text:00004926                 call    __RTC_CheckEsp
.text:0000492B                 mov     esp, ebp
.text:0000492D                 pop     ebp
.text:0000492E                 retn
.text:0000492E ?Clear@CFieldPrinter@@QAEXXZ endp
.text:0000492E
.text:0000492E ; ---------------------------------------------------------------------------
.text:0000492F                 align 10h
.text:0000492F _text           ends
.text:0000492F
.text:00004930 ; ===========================================================================
.text:00004930
.text:00004930 ; Segment type: Pure code
.text:00004930 ; Segment permissions: Read/Execute
.text:00004930 _text           segment para public 'CODE' use32
.text:00004930                 assume cs:_text
.text:00004930                 ;org 4930h
.text:00004930 ; COMDAT (pick any)
.text:00004930                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004930
.text:00004930 ; =============== S U B R O U T I N E =======================================
.text:00004930
.text:00004930 ; Attributes: bp-based frame
.text:00004930
.text:00004930 ; void __thiscall AString::Empty(AString *__hidden this)
.text:00004930                 public ?Empty@AString@@QAEXXZ
.text:00004930 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: CFieldPrinter::Clear(void)+1Cp
.text:00004930
.text:00004930 var_4           = dword ptr -4
.text:00004930
.text:00004930                 push    ebp
.text:00004931                 mov     ebp, esp
.text:00004933                 push    ecx
.text:00004934                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000493B                 mov     [ebp+var_4], ecx
.text:0000493E                 mov     eax, [ebp+var_4]
.text:00004941                 mov     dword ptr [eax+4], 0
.text:00004948                 mov     ecx, [ebp+var_4]
.text:0000494B                 mov     edx, [ecx]
.text:0000494D                 mov     byte ptr [edx], 0
.text:00004950                 mov     esp, ebp
.text:00004952                 pop     ebp
.text:00004953                 retn
.text:00004953 ?Empty@AString@@QAEXXZ endp
.text:00004953
.text:00004953 _text           ends
.text:00004953
.text$x:00004954 ; ===========================================================================
.text$x:00004954
.text$x:00004954 ; Segment type: Pure code
.text$x:00004954 ; Segment permissions: Read/Execute
.text$x:00004954 _text$x         segment para public 'CODE' use32
.text$x:00004954                 assume cs:_text$x
.text$x:00004954                 ;org 4954h
.text$x:00004954                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004954
.text$x:00004954 ; =============== S U B R O U T I N E =======================================
.text$x:00004954
.text$x:00004954
.text$x:00004954 __unwindfunclet$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z$0 proc near
.text$x:00004954                                         ; DATA XREF: .xdata$x:00004BA0o
.text$x:00004954                 lea     ecx, [ebp-44h]  ; this
.text$x:00004957                 jmp     ??1CFieldInfo@@QAE@XZ ; CFieldInfo::~CFieldInfo(void)
.text$x:00004957 __unwindfunclet$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z$0 endp
.text$x:00004957
.text$x:0000495C
.text$x:0000495C ; =============== S U B R O U T I N E =======================================
.text$x:0000495C
.text$x:0000495C
.text$x:0000495C __unwindfunclet$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z$1 proc near
.text$x:0000495C                                         ; DATA XREF: .xdata$x:00004BA8o
.text$x:0000495C                 lea     ecx, [ebp-5Ch]  ; this
.text$x:0000495F                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000495F __unwindfunclet$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z$1 endp
.text$x:0000495F
.text$x:00004964
.text$x:00004964 ; =============== S U B R O U T I N E =======================================
.text$x:00004964
.text$x:00004964
.text$x:00004964 __ehhandler$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z proc near
.text$x:00004964                                         ; DATA XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+5o
.text$x:00004964
.text$x:00004964 arg_4           = dword ptr  8
.text$x:00004964
.text$x:00004964                 mov     edx, [esp+arg_4]
.text$x:00004968                 lea     eax, [edx+0Ch]
.text$x:0000496B                 mov     ecx, [edx-64h]
.text$x:0000496E                 xor     ecx, eax
.text$x:00004970                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004975                 mov     eax, offset __ehfuncinfo$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z
.text$x:0000497A                 jmp     ___CxxFrameHandler3
.text$x:0000497A __ehhandler$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z endp
.text$x:0000497A
.text$x:0000497F
.text$x:0000497F ; =============== S U B R O U T I N E =======================================
.text$x:0000497F
.text$x:0000497F
.text$x:0000497F __unwindfunclet$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z$0 proc near
.text$x:0000497F                                         ; DATA XREF: .xdata$x:00004BD4o
.text$x:0000497F                 lea     ecx, [ebp-2Ch]  ; this
.text$x:00004982                 jmp     ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text$x:00004982 __unwindfunclet$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z$0 endp
.text$x:00004982
.text$x:00004987
.text$x:00004987 ; =============== S U B R O U T I N E =======================================
.text$x:00004987
.text$x:00004987
.text$x:00004987 __ehhandler$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z proc near
.text$x:00004987                                         ; DATA XREF: CFieldPrinter::AddMainProps(IInArchive *)+5o
.text$x:00004987
.text$x:00004987 arg_4           = dword ptr  8
.text$x:00004987
.text$x:00004987                 mov     edx, [esp+arg_4]
.text$x:0000498B                 lea     eax, [edx+0Ch]
.text$x:0000498E                 mov     ecx, [edx-50h]
.text$x:00004991                 xor     ecx, eax
.text$x:00004993                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004998                 mov     eax, offset __ehfuncinfo$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z
.text$x:0000499D                 jmp     ___CxxFrameHandler3
.text$x:0000499D __ehhandler$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z endp
.text$x:0000499D
.text$x:000049A2
.text$x:000049A2 ; =============== S U B R O U T I N E =======================================
.text$x:000049A2
.text$x:000049A2
.text$x:000049A2 __unwindfunclet$?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z$0 proc near
.text$x:000049A2                                         ; DATA XREF: .xdata$x:00004C00o
.text$x:000049A2                 lea     ecx, [ebp-2Ch]  ; this
.text$x:000049A5                 jmp     ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text$x:000049A5 __unwindfunclet$?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z$0 endp
.text$x:000049A5
.text$x:000049AA
.text$x:000049AA ; =============== S U B R O U T I N E =======================================
.text$x:000049AA
.text$x:000049AA
.text$x:000049AA __ehhandler$?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z proc near
.text$x:000049AA                                         ; DATA XREF: CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+5o
.text$x:000049AA
.text$x:000049AA arg_4           = dword ptr  8
.text$x:000049AA
.text$x:000049AA                 mov     edx, [esp+arg_4]
.text$x:000049AE                 lea     eax, [edx+0Ch]
.text$x:000049B1                 mov     ecx, [edx-44h]
.text$x:000049B4                 xor     ecx, eax
.text$x:000049B6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000049BB                 mov     eax, offset __ehfuncinfo$?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z
.text$x:000049C0                 jmp     ___CxxFrameHandler3
.text$x:000049C0 __ehhandler$?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z endp
.text$x:000049C0
.text$x:000049C5
.text$x:000049C5 ; =============== S U B R O U T I N E =======================================
.text$x:000049C5
.text$x:000049C5
.text$x:000049C5 __unwindfunclet$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z$0 proc near
.text$x:000049C5                                         ; DATA XREF: .xdata$x:00004C2Co
.text$x:000049C5                 lea     ecx, [ebp-0ECh] ; this
.text$x:000049CB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000049CB __unwindfunclet$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z$0 endp
.text$x:000049CB
.text$x:000049D0
.text$x:000049D0 ; =============== S U B R O U T I N E =======================================
.text$x:000049D0
.text$x:000049D0
.text$x:000049D0 __unwindfunclet$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z$1 proc near
.text$x:000049D0                                         ; DATA XREF: .xdata$x:00004C34o
.text$x:000049D0                 lea     ecx, [ebp-194h] ; this
.text$x:000049D6                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:000049D6 __unwindfunclet$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z$1 endp
.text$x:000049D6
.text$x:000049DB
.text$x:000049DB ; =============== S U B R O U T I N E =======================================
.text$x:000049DB
.text$x:000049DB
.text$x:000049DB __ehhandler$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z proc near
.text$x:000049DB                                         ; DATA XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+5o
.text$x:000049DB
.text$x:000049DB arg_4           = dword ptr  8
.text$x:000049DB
.text$x:000049DB                 mov     edx, [esp+arg_4]
.text$x:000049DF                 lea     eax, [edx+0Ch]
.text$x:000049E2                 mov     ecx, [edx-1FCh]
.text$x:000049E8                 xor     ecx, eax
.text$x:000049EA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000049EF                 mov     ecx, [edx-4]
.text$x:000049F2                 xor     ecx, eax
.text$x:000049F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000049F9                 mov     eax, offset __ehfuncinfo$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z
.text$x:000049FE                 jmp     ___CxxFrameHandler3
.text$x:000049FE __ehhandler$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z endp
.text$x:000049FE
.text$x:00004A03
.text$x:00004A03 ; =============== S U B R O U T I N E =======================================
.text$x:00004A03
.text$x:00004A03
.text$x:00004A03 __unwindfunclet$?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z$0 proc near
.text$x:00004A03                                         ; DATA XREF: .xdata$x:00004C60o
.text$x:00004A03                 lea     ecx, [ebp-74h]  ; this
.text$x:00004A06                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00004A06 __unwindfunclet$?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z$0 endp
.text$x:00004A06
.text$x:00004A0B
.text$x:00004A0B ; =============== S U B R O U T I N E =======================================
.text$x:00004A0B
.text$x:00004A0B
.text$x:00004A0B __ehhandler$?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z proc near
.text$x:00004A0B                                         ; DATA XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+5o
.text$x:00004A0B
.text$x:00004A0B arg_4           = dword ptr  8
.text$x:00004A0B
.text$x:00004A0B                 mov     edx, [esp+arg_4]
.text$x:00004A0F                 lea     eax, [edx+0Ch]
.text$x:00004A12                 mov     ecx, [edx-74h]
.text$x:00004A15                 xor     ecx, eax
.text$x:00004A17                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004A1C                 mov     ecx, [edx-4]
.text$x:00004A1F                 xor     ecx, eax
.text$x:00004A21                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004A26                 mov     eax, offset __ehfuncinfo$?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z
.text$x:00004A2B                 jmp     ___CxxFrameHandler3
.text$x:00004A2B __ehhandler$?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z endp
.text$x:00004A2B
.text$x:00004A30
.text$x:00004A30 ; =============== S U B R O U T I N E =======================================
.text$x:00004A30
.text$x:00004A30
.text$x:00004A30 __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$0 proc near
.text$x:00004A30                                         ; DATA XREF: .xdata$x:00004C8Co
.text$x:00004A30                 lea     ecx, [ebp-0CCh] ; this
.text$x:00004A36                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004A36 __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$0 endp
.text$x:00004A36
.text$x:00004A3B
.text$x:00004A3B ; =============== S U B R O U T I N E =======================================
.text$x:00004A3B
.text$x:00004A3B
.text$x:00004A3B __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$1 proc near
.text$x:00004A3B                                         ; DATA XREF: .xdata$x:00004C94o
.text$x:00004A3B                 lea     ecx, [ebp-44h]  ; this
.text$x:00004A3E                 jmp     ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text$x:00004A3E __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$1 endp
.text$x:00004A3E
.text$x:00004A43
.text$x:00004A43 ; =============== S U B R O U T I N E =======================================
.text$x:00004A43
.text$x:00004A43
.text$x:00004A43 __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$2 proc near
.text$x:00004A43                                         ; DATA XREF: .xdata$x:00004C9Co
.text$x:00004A43                 lea     ecx, [ebp-84h]  ; this
.text$x:00004A49                 jmp     ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text$x:00004A49 __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$2 endp
.text$x:00004A49
.text$x:00004A4E
.text$x:00004A4E ; =============== S U B R O U T I N E =======================================
.text$x:00004A4E
.text$x:00004A4E
.text$x:00004A4E __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$3 proc near
.text$x:00004A4E                                         ; DATA XREF: .xdata$x:00004CA4o
.text$x:00004A4E                 lea     ecx, [ebp-0B8h] ; this
.text$x:00004A54                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00004A54 __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$3 endp
.text$x:00004A54
.text$x:00004A59
.text$x:00004A59 ; =============== S U B R O U T I N E =======================================
.text$x:00004A59
.text$x:00004A59
.text$x:00004A59 __ehhandler$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z proc near
.text$x:00004A59                                         ; DATA XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+5o
.text$x:00004A59
.text$x:00004A59 arg_4           = dword ptr  8
.text$x:00004A59
.text$x:00004A59                 mov     edx, [esp+arg_4]
.text$x:00004A5D                 lea     eax, [edx+0Ch]
.text$x:00004A60                 mov     ecx, [edx-0E0h]
.text$x:00004A66                 xor     ecx, eax
.text$x:00004A68                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004A6D                 mov     eax, offset __ehfuncinfo$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z
.text$x:00004A72                 jmp     ___CxxFrameHandler3
.text$x:00004A72 __ehhandler$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z endp
.text$x:00004A72
.text$x:00004A77
.text$x:00004A77 ; =============== S U B R O U T I N E =======================================
.text$x:00004A77
.text$x:00004A77
.text$x:00004A77 __unwindfunclet$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z$0 proc near
.text$x:00004A77                                         ; DATA XREF: .xdata$x:00004CD0o
.text$x:00004A77                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00004A7A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004A7A __unwindfunclet$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z$0 endp
.text$x:00004A7A
.text$x:00004A7F
.text$x:00004A7F ; =============== S U B R O U T I N E =======================================
.text$x:00004A7F
.text$x:00004A7F
.text$x:00004A7F __unwindfunclet$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z$1 proc near
.text$x:00004A7F                                         ; DATA XREF: .xdata$x:00004CD8o
.text$x:00004A7F                 lea     ecx, [ebp-30h]  ; this
.text$x:00004A82                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00004A82 __unwindfunclet$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z$1 endp
.text$x:00004A82
.text$x:00004A87
.text$x:00004A87 ; =============== S U B R O U T I N E =======================================
.text$x:00004A87
.text$x:00004A87
.text$x:00004A87 __unwindfunclet$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z$2 proc near
.text$x:00004A87                                         ; DATA XREF: .xdata$x:00004CE0o
.text$x:00004A87                 lea     ecx, [ebp-44h]  ; this
.text$x:00004A8A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004A8A __unwindfunclet$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z$2 endp
.text$x:00004A8A
.text$x:00004A8F
.text$x:00004A8F ; =============== S U B R O U T I N E =======================================
.text$x:00004A8F
.text$x:00004A8F
.text$x:00004A8F __ehhandler$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z proc near
.text$x:00004A8F                                         ; DATA XREF: PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)+5o
.text$x:00004A8F
.text$x:00004A8F arg_4           = dword ptr  8
.text$x:00004A8F
.text$x:00004A8F                 mov     edx, [esp+arg_4]
.text$x:00004A93                 lea     eax, [edx+0Ch]
.text$x:00004A96                 mov     ecx, [edx-44h]
.text$x:00004A99                 xor     ecx, eax
.text$x:00004A9B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004AA0                 mov     eax, offset __ehfuncinfo$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z
.text$x:00004AA5                 jmp     ___CxxFrameHandler3
.text$x:00004AA5 __ehhandler$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z endp
.text$x:00004AA5
.text$x:00004AAA
.text$x:00004AAA ; =============== S U B R O U T I N E =======================================
.text$x:00004AAA
.text$x:00004AAA
.text$x:00004AAA __unwindfunclet$?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z$0 proc near
.text$x:00004AAA                                         ; DATA XREF: .xdata$x:00004D0Co
.text$x:00004AAA                 lea     ecx, [ebp-20h]  ; this
.text$x:00004AAD                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00004AAD __unwindfunclet$?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z$0 endp
.text$x:00004AAD
.text$x:00004AB2
.text$x:00004AB2 ; =============== S U B R O U T I N E =======================================
.text$x:00004AB2
.text$x:00004AB2
.text$x:00004AB2 __ehhandler$?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z proc near
.text$x:00004AB2                                         ; DATA XREF: PrintArcProp(CStdOutStream &,IInArchive *,ulong,wchar_t const *)+5o
.text$x:00004AB2
.text$x:00004AB2 arg_4           = dword ptr  8
.text$x:00004AB2
.text$x:00004AB2                 mov     edx, [esp+arg_4]
.text$x:00004AB6                 lea     eax, [edx+0Ch]
.text$x:00004AB9                 mov     ecx, [edx-2Ch]
.text$x:00004ABC                 xor     ecx, eax
.text$x:00004ABE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004AC3                 mov     eax, offset __ehfuncinfo$?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z
.text$x:00004AC8                 jmp     ___CxxFrameHandler3
.text$x:00004AC8 __ehhandler$?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z endp
.text$x:00004AC8
.text$x:00004ACD
.text$x:00004ACD ; =============== S U B R O U T I N E =======================================
.text$x:00004ACD
.text$x:00004ACD
.text$x:00004ACD __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$0 proc near
.text$x:00004ACD                                         ; DATA XREF: .xdata$x:00004D5Co
.text$x:00004ACD                 lea     ecx, [ebp-5Ch]  ; this
.text$x:00004AD0                 jmp     ??1CFieldPrinter@@QAE@XZ ; CFieldPrinter::~CFieldPrinter(void)
.text$x:00004AD0 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$0 endp
.text$x:00004AD0
.text$x:00004AD5
.text$x:00004AD5 ; =============== S U B R O U T I N E =======================================
.text$x:00004AD5
.text$x:00004AD5
.text$x:00004AD5 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$1 proc near
.text$x:00004AD5                                         ; DATA XREF: .xdata$x:00004D64o
.text$x:00004AD5                 lea     ecx, [ebp-0E8h]
.text$x:00004ADB                 jmp     ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text$x:00004ADB __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$1 endp
.text$x:00004ADB
.text$x:00004AE0
.text$x:00004AE0 ; =============== S U B R O U T I N E =======================================
.text$x:00004AE0
.text$x:00004AE0
.text$x:00004AE0 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$2 proc near
.text$x:00004AE0                                         ; DATA XREF: .xdata$x:00004D6Co
.text$x:00004AE0                 lea     ecx, [ebp-154h] ; this
.text$x:00004AE6                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00004AE6 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$2 endp
.text$x:00004AE6
.text$x:00004AEB
.text$x:00004AEB ; =============== S U B R O U T I N E =======================================
.text$x:00004AEB
.text$x:00004AEB
.text$x:00004AEB __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$3 proc near
.text$x:00004AEB                                         ; DATA XREF: .xdata$x:00004D74o
.text$x:00004AEB                 lea     ecx, [ebp-4B4h] ; this
.text$x:00004AF1                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004AF1 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$3 endp
.text$x:00004AF1
.text$x:00004AF6
.text$x:00004AF6 ; =============== S U B R O U T I N E =======================================
.text$x:00004AF6
.text$x:00004AF6
.text$x:00004AF6 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$4 proc near
.text$x:00004AF6                                         ; DATA XREF: .xdata$x:00004D7Co
.text$x:00004AF6                 lea     ecx, [ebp-1C0h] ; this
.text$x:00004AFC                 jmp     ??1CArchiveLink@@QAE@XZ ; CArchiveLink::~CArchiveLink(void)
.text$x:00004AFC __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$4 endp
.text$x:00004AFC
.text$x:00004B01
.text$x:00004B01 ; =============== S U B R O U T I N E =======================================
.text$x:00004B01
.text$x:00004B01
.text$x:00004B01 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$5 proc near
.text$x:00004B01                                         ; DATA XREF: .xdata$x:00004D84o
.text$x:00004B01                 lea     ecx, [ebp-298h] ; this
.text$x:00004B07                 jmp     ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text$x:00004B07 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$5 endp
.text$x:00004B07
.text$x:00004B0C
.text$x:00004B0C ; =============== S U B R O U T I N E =======================================
.text$x:00004B0C
.text$x:00004B0C
.text$x:00004B0C __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$6 proc near
.text$x:00004B0C                                         ; DATA XREF: .xdata$x:00004D8Co
.text$x:00004B0C                 lea     ecx, [ebp-2F8h] ; this
.text$x:00004B12                 jmp     ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text$x:00004B12 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$6 endp
.text$x:00004B12
.text$x:00004B17
.text$x:00004B17 ; =============== S U B R O U T I N E =======================================
.text$x:00004B17
.text$x:00004B17
.text$x:00004B17 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$7 proc near
.text$x:00004B17                                         ; DATA XREF: .xdata$x:00004D94o
.text$x:00004B17                 lea     ecx, [ebp-4C4h] ; this
.text$x:00004B1D                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004B1D __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$7 endp
.text$x:00004B1D
.text$x:00004B22
.text$x:00004B22 ; =============== S U B R O U T I N E =======================================
.text$x:00004B22
.text$x:00004B22
.text$x:00004B22 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$8 proc near
.text$x:00004B22                                         ; DATA XREF: .xdata$x:00004D9Co
.text$x:00004B22                 lea     ecx, [ebp-3F8h] ; this
.text$x:00004B28                 jmp     ??1CReadArcItem@@QAE@XZ ; CReadArcItem::~CReadArcItem(void)
.text$x:00004B28 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$8 endp
.text$x:00004B28
.text$x:00004B2D
.text$x:00004B2D ; =============== S U B R O U T I N E =======================================
.text$x:00004B2D
.text$x:00004B2D
.text$x:00004B2D __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$9 proc near
.text$x:00004B2D                                         ; DATA XREF: .xdata$x:00004DA4o
.text$x:00004B2D                 lea     ecx, [ebp-40Ch]
.text$x:00004B33                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00004B33 __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$9 endp
.text$x:00004B33
.text$x:00004B38
.text$x:00004B38 ; =============== S U B R O U T I N E =======================================
.text$x:00004B38
.text$x:00004B38
.text$x:00004B38 __ehhandler$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z proc near
.text$x:00004B38                                         ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+5o
.text$x:00004B38
.text$x:00004B38 arg_4           = dword ptr  8
.text$x:00004B38
.text$x:00004B38                 mov     edx, [esp+arg_4]
.text$x:00004B3C                 lea     eax, [edx+0Ch]
.text$x:00004B3F                 mov     ecx, [edx-520h]
.text$x:00004B45                 xor     ecx, eax
.text$x:00004B47                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004B4C                 mov     eax, offset __ehfuncinfo$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z
.text$x:00004B51                 jmp     ___CxxFrameHandler3
.text$x:00004B51 __ehhandler$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z endp
.text$x:00004B51
.text$x:00004B56
.text$x:00004B56 ; =============== S U B R O U T I N E =======================================
.text$x:00004B56
.text$x:00004B56
.text$x:00004B56 __unwindfunclet$?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z$0 proc near
.text$x:00004B56                                         ; DATA XREF: .xdata$x:00004DACo
.text$x:00004B56                 lea     ecx, [ebp-20h]  ; this
.text$x:00004B59                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00004B59 __unwindfunclet$?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z$0 endp
.text$x:00004B59
.text$x:00004B5E
.text$x:00004B5E ; =============== S U B R O U T I N E =======================================
.text$x:00004B5E
.text$x:00004B5E
.text$x:00004B5E __ehhandler$?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z proc near
.text$x:00004B5E                                         ; DATA XREF: GetUInt64Value(IInArchive *,uint,ulong,CListUInt64Def &)+5o
.text$x:00004B5E
.text$x:00004B5E arg_4           = dword ptr  8
.text$x:00004B5E
.text$x:00004B5E                 mov     edx, [esp+arg_4]
.text$x:00004B62                 lea     eax, [edx+0Ch]
.text$x:00004B65                 mov     ecx, [edx-2Ch]
.text$x:00004B68                 xor     ecx, eax
.text$x:00004B6A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004B6F                 mov     eax, offset __ehfuncinfo$?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z
.text$x:00004B74                 jmp     ___CxxFrameHandler3
.text$x:00004B74 __ehhandler$?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z endp
.text$x:00004B74
.text$x:00004B79
.text$x:00004B79 ; =============== S U B R O U T I N E =======================================
.text$x:00004B79
.text$x:00004B79
.text$x:00004B79 __unwindfunclet$?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z$0 proc near
.text$x:00004B79                                         ; DATA XREF: .xdata$x:00004DD8o
.text$x:00004B79                 lea     ecx, [ebp-20h]  ; this
.text$x:00004B7C                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00004B7C __unwindfunclet$?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z$0 endp
.text$x:00004B7C
.text$x:00004B81
.text$x:00004B81 ; =============== S U B R O U T I N E =======================================
.text$x:00004B81
.text$x:00004B81
.text$x:00004B81 __ehhandler$?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z proc near
.text$x:00004B81                                         ; DATA XREF: GetItemMTime(IInArchive *,uint,CListFileTimeDef &)+5o
.text$x:00004B81
.text$x:00004B81 arg_4           = dword ptr  8
.text$x:00004B81
.text$x:00004B81                 mov     edx, [esp+arg_4]
.text$x:00004B85                 lea     eax, [edx+0Ch]
.text$x:00004B88                 mov     ecx, [edx-34h]
.text$x:00004B8B                 xor     ecx, eax
.text$x:00004B8D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004B92                 mov     eax, offset __ehfuncinfo$?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z
.text$x:00004B97                 jmp     ___CxxFrameHandler3
.text$x:00004B97 __ehhandler$?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z endp
.text$x:00004B97
.text$x:00004B97 _text$x         ends
.text$x:00004B97
.xdata$x:00004B9C ; ===========================================================================
.xdata$x:00004B9C
.xdata$x:00004B9C ; Segment type: Pure data
.xdata$x:00004B9C ; Segment permissions: Read
.xdata$x:00004B9C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004B9C                 assume cs:_xdata$x
.xdata$x:00004B9C                 ;org 4B9Ch
.xdata$x:00004B9C __unwindtable$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z db 0FFh
.xdata$x:00004B9C                                         ; DATA XREF: .xdata$x:00004BB4o
.xdata$x:00004B9D                 db 0FFh
.xdata$x:00004B9E                 db 0FFh
.xdata$x:00004B9F                 db 0FFh
.xdata$x:00004BA0                 dd offset __unwindfunclet$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z$0
.xdata$x:00004BA4                 align 8
.xdata$x:00004BA8                 dd offset __unwindfunclet$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z$1
.xdata$x:00004BAC __ehfuncinfo$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z db  22h ; "
.xdata$x:00004BAC                                         ; DATA XREF: __ehhandler$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z+11o
.xdata$x:00004BAD                 db    5
.xdata$x:00004BAE                 db  93h ; ô
.xdata$x:00004BAF                 db  19h
.xdata$x:00004BB0                 db    2
.xdata$x:00004BB1                 db    0
.xdata$x:00004BB2                 db    0
.xdata$x:00004BB3                 db    0
.xdata$x:00004BB4                 dd offset __unwindtable$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z
.xdata$x:00004BB8                 db    0
.xdata$x:00004BB9                 db    0
.xdata$x:00004BBA                 db    0
.xdata$x:00004BBB                 db    0
.xdata$x:00004BBC                 db    0
.xdata$x:00004BBD                 db    0
.xdata$x:00004BBE                 db    0
.xdata$x:00004BBF                 db    0
.xdata$x:00004BC0                 db    0
.xdata$x:00004BC1                 db    0
.xdata$x:00004BC2                 db    0
.xdata$x:00004BC3                 db    0
.xdata$x:00004BC4                 db    0
.xdata$x:00004BC5                 db    0
.xdata$x:00004BC6                 db    0
.xdata$x:00004BC7                 db    0
.xdata$x:00004BC8                 db    0
.xdata$x:00004BC9                 db    0
.xdata$x:00004BCA                 db    0
.xdata$x:00004BCB                 db    0
.xdata$x:00004BCC                 db    1
.xdata$x:00004BCD                 db    0
.xdata$x:00004BCE                 db    0
.xdata$x:00004BCF                 db    0
.xdata$x:00004BD0 __unwindtable$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z db 0FFh
.xdata$x:00004BD0                                         ; DATA XREF: .xdata$x:00004BE0o
.xdata$x:00004BD1                 db 0FFh
.xdata$x:00004BD2                 db 0FFh
.xdata$x:00004BD3                 db 0FFh
.xdata$x:00004BD4                 dd offset __unwindfunclet$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z$0
.xdata$x:00004BD8 __ehfuncinfo$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z db  22h ; "
.xdata$x:00004BD8                                         ; DATA XREF: __ehhandler$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z+11o
.xdata$x:00004BD9                 db    5
.xdata$x:00004BDA                 db  93h ; ô
.xdata$x:00004BDB                 db  19h
.xdata$x:00004BDC                 db    1
.xdata$x:00004BDD                 db    0
.xdata$x:00004BDE                 db    0
.xdata$x:00004BDF                 db    0
.xdata$x:00004BE0                 dd offset __unwindtable$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z
.xdata$x:00004BE4                 db    0
.xdata$x:00004BE5                 db    0
.xdata$x:00004BE6                 db    0
.xdata$x:00004BE7                 db    0
.xdata$x:00004BE8                 db    0
.xdata$x:00004BE9                 db    0
.xdata$x:00004BEA                 db    0
.xdata$x:00004BEB                 db    0
.xdata$x:00004BEC                 db    0
.xdata$x:00004BED                 db    0
.xdata$x:00004BEE                 db    0
.xdata$x:00004BEF                 db    0
.xdata$x:00004BF0                 db    0
.xdata$x:00004BF1                 db    0
.xdata$x:00004BF2                 db    0
.xdata$x:00004BF3                 db    0
.xdata$x:00004BF4                 db    0
.xdata$x:00004BF5                 db    0
.xdata$x:00004BF6                 db    0
.xdata$x:00004BF7                 db    0
.xdata$x:00004BF8                 db    1
.xdata$x:00004BF9                 db    0
.xdata$x:00004BFA                 db    0
.xdata$x:00004BFB                 db    0
.xdata$x:00004BFC __unwindtable$?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z db 0FFh
.xdata$x:00004BFC                                         ; DATA XREF: .xdata$x:00004C0Co
.xdata$x:00004BFD                 db 0FFh
.xdata$x:00004BFE                 db 0FFh
.xdata$x:00004BFF                 db 0FFh
.xdata$x:00004C00                 dd offset __unwindfunclet$?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z$0
.xdata$x:00004C04 __ehfuncinfo$?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z db  22h ; "
.xdata$x:00004C04                                         ; DATA XREF: __ehhandler$?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z+11o
.xdata$x:00004C05                 db    5
.xdata$x:00004C06                 db  93h ; ô
.xdata$x:00004C07                 db  19h
.xdata$x:00004C08                 db    1
.xdata$x:00004C09                 db    0
.xdata$x:00004C0A                 db    0
.xdata$x:00004C0B                 db    0
.xdata$x:00004C0C                 dd offset __unwindtable$?AddRawProps@CFieldPrinter@@QAEJPAUIArchiveGetRawProps@@@Z
.xdata$x:00004C10                 db    0
.xdata$x:00004C11                 db    0
.xdata$x:00004C12                 db    0
.xdata$x:00004C13                 db    0
.xdata$x:00004C14                 db    0
.xdata$x:00004C15                 db    0
.xdata$x:00004C16                 db    0
.xdata$x:00004C17                 db    0
.xdata$x:00004C18                 db    0
.xdata$x:00004C19                 db    0
.xdata$x:00004C1A                 db    0
.xdata$x:00004C1B                 db    0
.xdata$x:00004C1C                 db    0
.xdata$x:00004C1D                 db    0
.xdata$x:00004C1E                 db    0
.xdata$x:00004C1F                 db    0
.xdata$x:00004C20                 db    0
.xdata$x:00004C21                 db    0
.xdata$x:00004C22                 db    0
.xdata$x:00004C23                 db    0
.xdata$x:00004C24                 db    1
.xdata$x:00004C25                 db    0
.xdata$x:00004C26                 db    0
.xdata$x:00004C27                 db    0
.xdata$x:00004C28 __unwindtable$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z db 0FFh
.xdata$x:00004C28                                         ; DATA XREF: .xdata$x:00004C40o
.xdata$x:00004C29                 db 0FFh
.xdata$x:00004C2A                 db 0FFh
.xdata$x:00004C2B                 db 0FFh
.xdata$x:00004C2C                 dd offset __unwindfunclet$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z$0
.xdata$x:00004C30                 db 0FFh
.xdata$x:00004C31                 db 0FFh
.xdata$x:00004C32                 db 0FFh
.xdata$x:00004C33                 db 0FFh
.xdata$x:00004C34                 dd offset __unwindfunclet$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z$1
.xdata$x:00004C38 __ehfuncinfo$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z db  22h ; "
.xdata$x:00004C38                                         ; DATA XREF: __ehhandler$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z+1Eo
.xdata$x:00004C39                 db    5
.xdata$x:00004C3A                 db  93h ; ô
.xdata$x:00004C3B                 db  19h
.xdata$x:00004C3C                 db    2
.xdata$x:00004C3D                 db    0
.xdata$x:00004C3E                 db    0
.xdata$x:00004C3F                 db    0
.xdata$x:00004C40                 dd offset __unwindtable$?PrintItemInfo@CFieldPrinter@@QAEJIABUCListStat@@@Z
.xdata$x:00004C44                 db    0
.xdata$x:00004C45                 db    0
.xdata$x:00004C46                 db    0
.xdata$x:00004C47                 db    0
.xdata$x:00004C48                 db    0
.xdata$x:00004C49                 db    0
.xdata$x:00004C4A                 db    0
.xdata$x:00004C4B                 db    0
.xdata$x:00004C4C                 db    0
.xdata$x:00004C4D                 db    0
.xdata$x:00004C4E                 db    0
.xdata$x:00004C4F                 db    0
.xdata$x:00004C50                 db    0
.xdata$x:00004C51                 db    0
.xdata$x:00004C52                 db    0
.xdata$x:00004C53                 db    0
.xdata$x:00004C54                 db    0
.xdata$x:00004C55                 db    0
.xdata$x:00004C56                 db    0
.xdata$x:00004C57                 db    0
.xdata$x:00004C58                 db    1
.xdata$x:00004C59                 db    0
.xdata$x:00004C5A                 db    0
.xdata$x:00004C5B                 db    0
.xdata$x:00004C5C __unwindtable$?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z db 0FFh
.xdata$x:00004C5C                                         ; DATA XREF: .xdata$x:00004C6Co
.xdata$x:00004C5D                 db 0FFh
.xdata$x:00004C5E                 db 0FFh
.xdata$x:00004C5F                 db 0FFh
.xdata$x:00004C60                 dd offset __unwindfunclet$?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z$0
.xdata$x:00004C64 __ehfuncinfo$?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z db  22h ; "
.xdata$x:00004C64                                         ; DATA XREF: __ehhandler$?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z+1Bo
.xdata$x:00004C65                 db    5
.xdata$x:00004C66                 db  93h ; ô
.xdata$x:00004C67                 db  19h
.xdata$x:00004C68                 db    1
.xdata$x:00004C69                 db    0
.xdata$x:00004C6A                 db    0
.xdata$x:00004C6B                 db    0
.xdata$x:00004C6C                 dd offset __unwindtable$?PrintSum@CFieldPrinter@@QAEXABUCListStat@@_KPBD@Z
.xdata$x:00004C70                 db    0
.xdata$x:00004C71                 db    0
.xdata$x:00004C72                 db    0
.xdata$x:00004C73                 db    0
.xdata$x:00004C74                 db    0
.xdata$x:00004C75                 db    0
.xdata$x:00004C76                 db    0
.xdata$x:00004C77                 db    0
.xdata$x:00004C78                 db    0
.xdata$x:00004C79                 db    0
.xdata$x:00004C7A                 db    0
.xdata$x:00004C7B                 db    0
.xdata$x:00004C7C                 db    0
.xdata$x:00004C7D                 db    0
.xdata$x:00004C7E                 db    0
.xdata$x:00004C7F                 db    0
.xdata$x:00004C80                 db    0
.xdata$x:00004C81                 db    0
.xdata$x:00004C82                 db    0
.xdata$x:00004C83                 db    0
.xdata$x:00004C84                 db    1
.xdata$x:00004C85                 db    0
.xdata$x:00004C86                 db    0
.xdata$x:00004C87                 db    0
.xdata$x:00004C88 __unwindtable$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z db 0FFh
.xdata$x:00004C88                                         ; DATA XREF: .xdata$x:00004CB0o
.xdata$x:00004C89                 db 0FFh
.xdata$x:00004C8A                 db 0FFh
.xdata$x:00004C8B                 db 0FFh
.xdata$x:00004C8C                 dd offset __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$0
.xdata$x:00004C90                 db 0FFh
.xdata$x:00004C91                 db 0FFh
.xdata$x:00004C92                 db 0FFh
.xdata$x:00004C93                 db 0FFh
.xdata$x:00004C94                 dd offset __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$1
.xdata$x:00004C98                 db 0FFh
.xdata$x:00004C99                 db 0FFh
.xdata$x:00004C9A                 db 0FFh
.xdata$x:00004C9B                 db 0FFh
.xdata$x:00004C9C                 dd offset __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$2
.xdata$x:00004CA0                 db    2
.xdata$x:00004CA1                 db    0
.xdata$x:00004CA2                 db    0
.xdata$x:00004CA3                 db    0
.xdata$x:00004CA4                 dd offset __unwindfunclet$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z$3
.xdata$x:00004CA8 __ehfuncinfo$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z db  22h ; "
.xdata$x:00004CA8                                         ; DATA XREF: __ehhandler$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z+14o
.xdata$x:00004CA9                 db    5
.xdata$x:00004CAA                 db  93h ; ô
.xdata$x:00004CAB                 db  19h
.xdata$x:00004CAC                 db    4
.xdata$x:00004CAD                 db    0
.xdata$x:00004CAE                 db    0
.xdata$x:00004CAF                 db    0
.xdata$x:00004CB0                 dd offset __unwindtable$?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z
.xdata$x:00004CB4                 db    0
.xdata$x:00004CB5                 db    0
.xdata$x:00004CB6                 db    0
.xdata$x:00004CB7                 db    0
.xdata$x:00004CB8                 db    0
.xdata$x:00004CB9                 db    0
.xdata$x:00004CBA                 db    0
.xdata$x:00004CBB                 db    0
.xdata$x:00004CBC                 db    0
.xdata$x:00004CBD                 db    0
.xdata$x:00004CBE                 db    0
.xdata$x:00004CBF                 db    0
.xdata$x:00004CC0                 db    0
.xdata$x:00004CC1                 db    0
.xdata$x:00004CC2                 db    0
.xdata$x:00004CC3                 db    0
.xdata$x:00004CC4                 db    0
.xdata$x:00004CC5                 db    0
.xdata$x:00004CC6                 db    0
.xdata$x:00004CC7                 db    0
.xdata$x:00004CC8                 db    1
.xdata$x:00004CC9                 db    0
.xdata$x:00004CCA                 db    0
.xdata$x:00004CCB                 db    0
.xdata$x:00004CCC __unwindtable$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z db 0FFh
.xdata$x:00004CCC                                         ; DATA XREF: .xdata$x:00004CECo
.xdata$x:00004CCD                 db 0FFh
.xdata$x:00004CCE                 db 0FFh
.xdata$x:00004CCF                 db 0FFh
.xdata$x:00004CD0                 dd offset __unwindfunclet$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z$0
.xdata$x:00004CD4                 align 8
.xdata$x:00004CD8                 dd offset __unwindfunclet$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z$1
.xdata$x:00004CDC                 db    1
.xdata$x:00004CDD                 db    0
.xdata$x:00004CDE                 db    0
.xdata$x:00004CDF                 db    0
.xdata$x:00004CE0                 dd offset __unwindfunclet$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z$2
.xdata$x:00004CE4 __ehfuncinfo$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z db  22h ; "
.xdata$x:00004CE4                                         ; DATA XREF: __ehhandler$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z+11o
.xdata$x:00004CE5                 db    5
.xdata$x:00004CE6                 db  93h ; ô
.xdata$x:00004CE7                 db  19h
.xdata$x:00004CE8                 db    3
.xdata$x:00004CE9                 db    0
.xdata$x:00004CEA                 db    0
.xdata$x:00004CEB                 db    0
.xdata$x:00004CEC                 dd offset __unwindtable$?PrintPropertyPair2@@YGXAAVCStdOutStream@@KPB_WABVCPropVariant@NCOM@NWindows@@@Z
.xdata$x:00004CF0                 db    0
.xdata$x:00004CF1                 db    0
.xdata$x:00004CF2                 db    0
.xdata$x:00004CF3                 db    0
.xdata$x:00004CF4                 db    0
.xdata$x:00004CF5                 db    0
.xdata$x:00004CF6                 db    0
.xdata$x:00004CF7                 db    0
.xdata$x:00004CF8                 db    0
.xdata$x:00004CF9                 db    0
.xdata$x:00004CFA                 db    0
.xdata$x:00004CFB                 db    0
.xdata$x:00004CFC                 db    0
.xdata$x:00004CFD                 db    0
.xdata$x:00004CFE                 db    0
.xdata$x:00004CFF                 db    0
.xdata$x:00004D00                 db    0
.xdata$x:00004D01                 db    0
.xdata$x:00004D02                 db    0
.xdata$x:00004D03                 db    0
.xdata$x:00004D04                 db    1
.xdata$x:00004D05                 db    0
.xdata$x:00004D06                 db    0
.xdata$x:00004D07                 db    0
.xdata$x:00004D08 __unwindtable$?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z db 0FFh
.xdata$x:00004D08                                         ; DATA XREF: .xdata$x:00004D18o
.xdata$x:00004D09                 db 0FFh
.xdata$x:00004D0A                 db 0FFh
.xdata$x:00004D0B                 db 0FFh
.xdata$x:00004D0C                 dd offset __unwindfunclet$?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z$0
.xdata$x:00004D10 __ehfuncinfo$?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z db  22h ; "
.xdata$x:00004D10                                         ; DATA XREF: __ehhandler$?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z+11o
.xdata$x:00004D11                 db    5
.xdata$x:00004D12                 db  93h ; ô
.xdata$x:00004D13                 db  19h
.xdata$x:00004D14                 db    1
.xdata$x:00004D15                 db    0
.xdata$x:00004D16                 db    0
.xdata$x:00004D17                 db    0
.xdata$x:00004D18                 dd offset __unwindtable$?PrintArcProp@@YGJAAVCStdOutStream@@PAUIInArchive@@KPB_W@Z
.xdata$x:00004D1C                 db    0
.xdata$x:00004D1D                 db    0
.xdata$x:00004D1E                 db    0
.xdata$x:00004D1F                 db    0
.xdata$x:00004D20                 db    0
.xdata$x:00004D21                 db    0
.xdata$x:00004D22                 db    0
.xdata$x:00004D23                 db    0
.xdata$x:00004D24                 db    0
.xdata$x:00004D25                 db    0
.xdata$x:00004D26                 db    0
.xdata$x:00004D27                 db    0
.xdata$x:00004D28                 db    0
.xdata$x:00004D29                 db    0
.xdata$x:00004D2A                 db    0
.xdata$x:00004D2B                 db    0
.xdata$x:00004D2C                 db    0
.xdata$x:00004D2D                 db    0
.xdata$x:00004D2E                 db    0
.xdata$x:00004D2F                 db    0
.xdata$x:00004D30                 db    1
.xdata$x:00004D31                 db    0
.xdata$x:00004D32                 db    0
.xdata$x:00004D33                 db    0
.xdata$x:00004D34 __ehfuncinfo$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z db  22h ; "
.xdata$x:00004D34                                         ; DATA XREF: __ehhandler$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z+14o
.xdata$x:00004D35                 db    5
.xdata$x:00004D36                 db  93h ; ô
.xdata$x:00004D37                 db  19h
.xdata$x:00004D38                 db  0Ah
.xdata$x:00004D39                 db    0
.xdata$x:00004D3A                 db    0
.xdata$x:00004D3B                 db    0
.xdata$x:00004D3C                 dd offset __unwindtable$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z
.xdata$x:00004D40                 db    0
.xdata$x:00004D41                 db    0
.xdata$x:00004D42                 db    0
.xdata$x:00004D43                 db    0
.xdata$x:00004D44                 db    0
.xdata$x:00004D45                 db    0
.xdata$x:00004D46                 db    0
.xdata$x:00004D47                 db    0
.xdata$x:00004D48                 db    0
.xdata$x:00004D49                 db    0
.xdata$x:00004D4A                 db    0
.xdata$x:00004D4B                 db    0
.xdata$x:00004D4C                 db    0
.xdata$x:00004D4D                 db    0
.xdata$x:00004D4E                 db    0
.xdata$x:00004D4F                 db    0
.xdata$x:00004D50                 db    0
.xdata$x:00004D51                 db    0
.xdata$x:00004D52                 db    0
.xdata$x:00004D53                 db    0
.xdata$x:00004D54                 db    1
.xdata$x:00004D55                 db    0
.xdata$x:00004D56                 db    0
.xdata$x:00004D57                 db    0
.xdata$x:00004D58 __unwindtable$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z db 0FFh
.xdata$x:00004D58                                         ; DATA XREF: .xdata$x:00004D3Co
.xdata$x:00004D59                 db 0FFh
.xdata$x:00004D5A                 db 0FFh
.xdata$x:00004D5B                 db 0FFh
.xdata$x:00004D5C                 dd offset __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$0
.xdata$x:00004D60                 db    0
.xdata$x:00004D61                 db    0
.xdata$x:00004D62                 db    0
.xdata$x:00004D63                 db    0
.xdata$x:00004D64                 dd offset __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$1
.xdata$x:00004D68                 db    1
.xdata$x:00004D69                 db    0
.xdata$x:00004D6A                 db    0
.xdata$x:00004D6B                 db    0
.xdata$x:00004D6C                 dd offset __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$2
.xdata$x:00004D70                 db    2
.xdata$x:00004D71                 db    0
.xdata$x:00004D72                 db    0
.xdata$x:00004D73                 db    0
.xdata$x:00004D74                 dd offset __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$3
.xdata$x:00004D78                 db    1
.xdata$x:00004D79                 db    0
.xdata$x:00004D7A                 db    0
.xdata$x:00004D7B                 db    0
.xdata$x:00004D7C                 dd offset __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$4
.xdata$x:00004D80                 db    4
.xdata$x:00004D81                 db    0
.xdata$x:00004D82                 db    0
.xdata$x:00004D83                 db    0
.xdata$x:00004D84                 dd offset __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$5
.xdata$x:00004D88                 db    5
.xdata$x:00004D89                 db    0
.xdata$x:00004D8A                 db    0
.xdata$x:00004D8B                 db    0
.xdata$x:00004D8C                 dd offset __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$6
.xdata$x:00004D90                 db    6
.xdata$x:00004D91                 db    0
.xdata$x:00004D92                 db    0
.xdata$x:00004D93                 db    0
.xdata$x:00004D94                 dd offset __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$7
.xdata$x:00004D98                 db    6
.xdata$x:00004D99                 db    0
.xdata$x:00004D9A                 db    0
.xdata$x:00004D9B                 db    0
.xdata$x:00004D9C                 dd offset __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$8
.xdata$x:00004DA0                 db    8
.xdata$x:00004DA1                 db    0
.xdata$x:00004DA2                 db    0
.xdata$x:00004DA3                 db    0
.xdata$x:00004DA4                 dd offset __unwindfunclet$?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z$9
.xdata$x:00004DA8 __unwindtable$?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z db 0FFh
.xdata$x:00004DA8                                         ; DATA XREF: .xdata$x:00004DB8o
.xdata$x:00004DA9                 db 0FFh
.xdata$x:00004DAA                 db 0FFh
.xdata$x:00004DAB                 db 0FFh
.xdata$x:00004DAC                 dd offset __unwindfunclet$?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z$0
.xdata$x:00004DB0 __ehfuncinfo$?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z db  22h ; "
.xdata$x:00004DB0                                         ; DATA XREF: __ehhandler$?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z+11o
.xdata$x:00004DB1                 db    5
.xdata$x:00004DB2                 db  93h ; ô
.xdata$x:00004DB3                 db  19h
.xdata$x:00004DB4                 db    1
.xdata$x:00004DB5                 db    0
.xdata$x:00004DB6                 db    0
.xdata$x:00004DB7                 db    0
.xdata$x:00004DB8                 dd offset __unwindtable$?GetUInt64Value@@YGJPAUIInArchive@@IKAAUCListUInt64Def@@@Z
.xdata$x:00004DBC                 db    0
.xdata$x:00004DBD                 db    0
.xdata$x:00004DBE                 db    0
.xdata$x:00004DBF                 db    0
.xdata$x:00004DC0                 db    0
.xdata$x:00004DC1                 db    0
.xdata$x:00004DC2                 db    0
.xdata$x:00004DC3                 db    0
.xdata$x:00004DC4                 db    0
.xdata$x:00004DC5                 db    0
.xdata$x:00004DC6                 db    0
.xdata$x:00004DC7                 db    0
.xdata$x:00004DC8                 db    0
.xdata$x:00004DC9                 db    0
.xdata$x:00004DCA                 db    0
.xdata$x:00004DCB                 db    0
.xdata$x:00004DCC                 db    0
.xdata$x:00004DCD                 db    0
.xdata$x:00004DCE                 db    0
.xdata$x:00004DCF                 db    0
.xdata$x:00004DD0                 db    1
.xdata$x:00004DD1                 db    0
.xdata$x:00004DD2                 db    0
.xdata$x:00004DD3                 db    0
.xdata$x:00004DD4 __unwindtable$?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z db 0FFh
.xdata$x:00004DD4                                         ; DATA XREF: .xdata$x:00004DE4o
.xdata$x:00004DD5                 db 0FFh
.xdata$x:00004DD6                 db 0FFh
.xdata$x:00004DD7                 db 0FFh
.xdata$x:00004DD8                 dd offset __unwindfunclet$?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z$0
.xdata$x:00004DDC __ehfuncinfo$?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z db  22h ; "
.xdata$x:00004DDC                                         ; DATA XREF: __ehhandler$?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z+11o
.xdata$x:00004DDD                 db    5
.xdata$x:00004DDE                 db  93h ; ô
.xdata$x:00004DDF                 db  19h
.xdata$x:00004DE0                 db    1
.xdata$x:00004DE1                 db    0
.xdata$x:00004DE2                 db    0
.xdata$x:00004DE3                 db    0
.xdata$x:00004DE4                 dd offset __unwindtable$?GetItemMTime@@YGJPAUIInArchive@@IAAUCListFileTimeDef@@@Z
.xdata$x:00004DE8                 db    0
.xdata$x:00004DE9                 db    0
.xdata$x:00004DEA                 db    0
.xdata$x:00004DEB                 db    0
.xdata$x:00004DEC                 db    0
.xdata$x:00004DED                 db    0
.xdata$x:00004DEE                 db    0
.xdata$x:00004DEF                 db    0
.xdata$x:00004DF0                 db    0
.xdata$x:00004DF1                 db    0
.xdata$x:00004DF2                 db    0
.xdata$x:00004DF3                 db    0
.xdata$x:00004DF4                 db    0
.xdata$x:00004DF5                 db    0
.xdata$x:00004DF6                 db    0
.xdata$x:00004DF7                 db    0
.xdata$x:00004DF8                 db    0
.xdata$x:00004DF9                 db    0
.xdata$x:00004DFA                 db    0
.xdata$x:00004DFB                 db    0
.xdata$x:00004DFC                 db    1
.xdata$x:00004DFD                 db    0
.xdata$x:00004DFE                 db    0
.xdata$x:00004DFF                 db    0
.xdata$x:00004DFF _xdata$x        ends
.xdata$x:00004DFF
.text:00004E00 ; ===========================================================================
.text:00004E00
.text:00004E00 ; Segment type: Pure code
.text:00004E00 ; Segment permissions: Read/Execute
.text:00004E00 _text           segment para public 'CODE' use32
.text:00004E00                 assume cs:_text
.text:00004E00                 ;org 4E00h
.text:00004E00 ; COMDAT (pick any)
.text:00004E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E00
.text:00004E00 ; =============== S U B R O U T I N E =======================================
.text:00004E00
.text:00004E00 ; Attributes: bp-based frame
.text:00004E00
.text:00004E00 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00004E00                 public ??1AString@@QAE@XZ
.text:00004E00 ??1AString@@QAE@XZ proc near            ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+118p
.text:00004E00                                         ; CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+185p ...
.text:00004E00
.text:00004E00 var_8           = dword ptr -8
.text:00004E00 var_4           = dword ptr -4
.text:00004E00
.text:00004E00                 push    ebp
.text:00004E01                 mov     ebp, esp
.text:00004E03                 sub     esp, 8
.text:00004E06                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004E0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E14                 mov     [ebp+var_4], ecx
.text:00004E17                 mov     eax, [ebp+var_4]
.text:00004E1A                 mov     ecx, [eax]
.text:00004E1C                 mov     [ebp+var_8], ecx
.text:00004E1F                 mov     edx, [ebp+var_8]
.text:00004E22                 push    edx             ; void *
.text:00004E23                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004E28                 add     esp, 4
.text:00004E2B                 add     esp, 8
.text:00004E2E                 cmp     ebp, esp
.text:00004E30                 call    __RTC_CheckEsp
.text:00004E35                 mov     esp, ebp
.text:00004E37                 pop     ebp
.text:00004E38                 retn
.text:00004E38 ??1AString@@QAE@XZ endp
.text:00004E38
.text:00004E38 ; ---------------------------------------------------------------------------
.text:00004E39                 align 4
.text:00004E39 _text           ends
.text:00004E39
.text:00004E3C ; ===========================================================================
.text:00004E3C
.text:00004E3C ; Segment type: Pure code
.text:00004E3C ; Segment permissions: Read/Execute
.text:00004E3C _text           segment para public 'CODE' use32
.text:00004E3C                 assume cs:_text
.text:00004E3C                 ;org 4E3Ch
.text:00004E3C ; COMDAT (pick any)
.text:00004E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E3C
.text:00004E3C ; =============== S U B R O U T I N E =======================================
.text:00004E3C
.text:00004E3C ; Attributes: bp-based frame
.text:00004E3C
.text:00004E3C ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:00004E3C                 public ?IsEmpty@AString@@QBE_NXZ
.text:00004E3C ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+7Ap
.text:00004E3C                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+EFp ...
.text:00004E3C
.text:00004E3C var_4           = dword ptr -4
.text:00004E3C
.text:00004E3C                 push    ebp
.text:00004E3D                 mov     ebp, esp
.text:00004E3F                 push    ecx
.text:00004E40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E47                 mov     [ebp+var_4], ecx
.text:00004E4A                 mov     eax, [ebp+var_4]
.text:00004E4D                 xor     ecx, ecx
.text:00004E4F                 cmp     dword ptr [eax+4], 0
.text:00004E53                 setz    cl
.text:00004E56                 mov     al, cl
.text:00004E58                 mov     esp, ebp
.text:00004E5A                 pop     ebp
.text:00004E5B                 retn
.text:00004E5B ?IsEmpty@AString@@QBE_NXZ endp
.text:00004E5B
.text:00004E5B _text           ends
.text:00004E5B
.text:00004E5C ; ===========================================================================
.text:00004E5C
.text:00004E5C ; Segment type: Pure code
.text:00004E5C ; Segment permissions: Read/Execute
.text:00004E5C _text           segment para public 'CODE' use32
.text:00004E5C                 assume cs:_text
.text:00004E5C                 ;org 4E5Ch
.text:00004E5C ; COMDAT (pick any)
.text:00004E5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E5C
.text:00004E5C ; =============== S U B R O U T I N E =======================================
.text:00004E5C
.text:00004E5C ; Attributes: bp-based frame
.text:00004E5C
.text:00004E5C ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:00004E5C                 public ?Len@UString@@QBEIXZ
.text:00004E5C ?Len@UString@@QBEIXZ proc near          ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+BFp
.text:00004E5C                                         ; CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+FBp ...
.text:00004E5C
.text:00004E5C var_4           = dword ptr -4
.text:00004E5C
.text:00004E5C                 push    ebp
.text:00004E5D                 mov     ebp, esp
.text:00004E5F                 push    ecx
.text:00004E60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E67                 mov     [ebp+var_4], ecx
.text:00004E6A                 mov     eax, [ebp+var_4]
.text:00004E6D                 mov     eax, [eax+4]
.text:00004E70                 mov     esp, ebp
.text:00004E72                 pop     ebp
.text:00004E73                 retn
.text:00004E73 ?Len@UString@@QBEIXZ endp
.text:00004E73
.text:00004E73 _text           ends
.text:00004E73
.text:00004E74 ; ===========================================================================
.text:00004E74
.text:00004E74 ; Segment type: Pure code
.text:00004E74 ; Segment permissions: Read/Execute
.text:00004E74 _text           segment para public 'CODE' use32
.text:00004E74                 assume cs:_text
.text:00004E74                 ;org 4E74h
.text:00004E74 ; COMDAT (pick any)
.text:00004E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E74
.text:00004E74 ; =============== S U B R O U T I N E =======================================
.text:00004E74
.text:00004E74 ; Attributes: bp-based frame
.text:00004E74
.text:00004E74 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00004E74                 public ??BUString@@QBEPB_WXZ
.text:00004E74 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+CCp
.text:00004E74                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+11Fp ...
.text:00004E74
.text:00004E74 var_4           = dword ptr -4
.text:00004E74
.text:00004E74                 push    ebp
.text:00004E75                 mov     ebp, esp
.text:00004E77                 push    ecx
.text:00004E78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E7F                 mov     [ebp+var_4], ecx
.text:00004E82                 mov     eax, [ebp+var_4]
.text:00004E85                 mov     eax, [eax]
.text:00004E87                 mov     esp, ebp
.text:00004E89                 pop     ebp
.text:00004E8A                 retn
.text:00004E8A ??BUString@@QBEPB_WXZ endp
.text:00004E8A
.text:00004E8A ; ---------------------------------------------------------------------------
.text:00004E8B                 align 4
.text:00004E8B _text           ends
.text:00004E8B
.text:00004E8C ; ===========================================================================
.text:00004E8C
.text:00004E8C ; Segment type: Pure code
.text:00004E8C ; Segment permissions: Read/Execute
.text:00004E8C _text           segment para public 'CODE' use32
.text:00004E8C                 assume cs:_text
.text:00004E8C                 ;org 4E8Ch
.text:00004E8C ; COMDAT (pick any)
.text:00004E8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E8C
.text:00004E8C ; =============== S U B R O U T I N E =======================================
.text:00004E8C
.text:00004E8C ; Attributes: bp-based frame
.text:00004E8C
.text:00004E8C ; _DWORD __thiscall CFieldInfo::CFieldInfo(CFieldInfo *__hidden this)
.text:00004E8C                 public ??0CFieldInfo@@QAE@XZ
.text:00004E8C ??0CFieldInfo@@QAE@XZ proc near         ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+3Dp
.text:00004E8C                                         ; CObjectVector<CFieldInfo>::AddNew(void)+59p
.text:00004E8C
.text:00004E8C var_10          = dword ptr -10h
.text:00004E8C var_C           = dword ptr -0Ch
.text:00004E8C var_4           = dword ptr -4
.text:00004E8C
.text:00004E8C                 push    ebp
.text:00004E8D                 mov     ebp, esp
.text:00004E8F                 push    0FFFFFFFFh
.text:00004E91                 push    offset __ehhandler$??0CFieldInfo@@QAE@XZ
.text:00004E96                 mov     eax, large fs:0
.text:00004E9C                 push    eax
.text:00004E9D                 push    ecx
.text:00004E9E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004EA5                 mov     eax, dword ptr ds:___security_cookie
.text:00004EAA                 xor     eax, ebp
.text:00004EAC                 push    eax
.text:00004EAD                 lea     eax, [ebp+var_C]
.text:00004EB0                 mov     large fs:0, eax
.text:00004EB6                 mov     [ebp+var_10], ecx
.text:00004EB9                 mov     ecx, [ebp+var_10]
.text:00004EBC                 add     ecx, 8
.text:00004EBF                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004EC4                 mov     [ebp+var_4], 0
.text:00004ECB                 mov     ecx, [ebp+var_10]
.text:00004ECE                 add     ecx, 14h
.text:00004ED1                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00004ED6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004EDD                 mov     eax, [ebp+var_10]
.text:00004EE0                 mov     ecx, [ebp+var_C]
.text:00004EE3                 mov     large fs:0, ecx
.text:00004EEA                 pop     ecx
.text:00004EEB                 add     esp, 10h
.text:00004EEE                 cmp     ebp, esp
.text:00004EF0                 call    __RTC_CheckEsp
.text:00004EF5                 mov     esp, ebp
.text:00004EF7                 pop     ebp
.text:00004EF8                 retn
.text:00004EF8 ??0CFieldInfo@@QAE@XZ endp
.text:00004EF8
.text:00004EF8 ; ---------------------------------------------------------------------------
.text:00004EF9                 align 4
.text:00004EF9 _text           ends
.text:00004EF9
.text$x:00004EFC ; ===========================================================================
.text$x:00004EFC
.text$x:00004EFC ; Segment type: Pure code
.text$x:00004EFC ; Segment permissions: Read/Execute
.text$x:00004EFC _text$x         segment para public 'CODE' use32
.text$x:00004EFC                 assume cs:_text$x
.text$x:00004EFC                 ;org 4EFCh
.text$x:00004EFC ; COMDAT (pick associative to section at 4E8C)
.text$x:00004EFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004EFC
.text$x:00004EFC ; =============== S U B R O U T I N E =======================================
.text$x:00004EFC
.text$x:00004EFC
.text$x:00004EFC __unwindfunclet$??0CFieldInfo@@QAE@XZ$0 proc near
.text$x:00004EFC                                         ; DATA XREF: .xdata$x:00004F28o
.text$x:00004EFC                 mov     ecx, [ebp-10h]
.text$x:00004EFF                 add     ecx, 8          ; this
.text$x:00004F02                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004F02 __unwindfunclet$??0CFieldInfo@@QAE@XZ$0 endp
.text$x:00004F02
.text$x:00004F07
.text$x:00004F07 ; =============== S U B R O U T I N E =======================================
.text$x:00004F07
.text$x:00004F07
.text$x:00004F07 __ehhandler$??0CFieldInfo@@QAE@XZ proc near
.text$x:00004F07                                         ; DATA XREF: CFieldInfo::CFieldInfo(void)+5o
.text$x:00004F07
.text$x:00004F07 arg_4           = dword ptr  8
.text$x:00004F07
.text$x:00004F07                 mov     edx, [esp+arg_4]
.text$x:00004F0B                 lea     eax, [edx+0Ch]
.text$x:00004F0E                 mov     ecx, [edx-8]
.text$x:00004F11                 xor     ecx, eax
.text$x:00004F13                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F18                 mov     eax, offset __ehfuncinfo$??0CFieldInfo@@QAE@XZ
.text$x:00004F1D                 jmp     ___CxxFrameHandler3
.text$x:00004F1D __ehhandler$??0CFieldInfo@@QAE@XZ endp
.text$x:00004F1D
.text$x:00004F1D ; ---------------------------------------------------------------------------
.text$x:00004F22                 align 4
.text$x:00004F22 _text$x         ends
.text$x:00004F22
.xdata$x:00004F24 ; ===========================================================================
.xdata$x:00004F24
.xdata$x:00004F24 ; Segment type: Pure data
.xdata$x:00004F24 ; Segment permissions: Read
.xdata$x:00004F24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004F24                 assume cs:_xdata$x
.xdata$x:00004F24                 ;org 4F24h
.xdata$x:00004F24 ; COMDAT (pick associative to section at 4E8C)
.xdata$x:00004F24 __unwindtable$??0CFieldInfo@@QAE@XZ db 0FFh
.xdata$x:00004F24                                         ; DATA XREF: .xdata$x:00004F34o
.xdata$x:00004F25                 db 0FFh
.xdata$x:00004F26                 db 0FFh
.xdata$x:00004F27                 db 0FFh
.xdata$x:00004F28                 dd offset __unwindfunclet$??0CFieldInfo@@QAE@XZ$0
.xdata$x:00004F2C __ehfuncinfo$??0CFieldInfo@@QAE@XZ db  22h ; "
.xdata$x:00004F2C                                         ; DATA XREF: __ehhandler$??0CFieldInfo@@QAE@XZ+11o
.xdata$x:00004F2D                 db    5
.xdata$x:00004F2E                 db  93h ; ô
.xdata$x:00004F2F                 db  19h
.xdata$x:00004F30                 db    1
.xdata$x:00004F31                 db    0
.xdata$x:00004F32                 db    0
.xdata$x:00004F33                 db    0
.xdata$x:00004F34                 dd offset __unwindtable$??0CFieldInfo@@QAE@XZ
.xdata$x:00004F38                 db    0
.xdata$x:00004F39                 db    0
.xdata$x:00004F3A                 db    0
.xdata$x:00004F3B                 db    0
.xdata$x:00004F3C                 db    0
.xdata$x:00004F3D                 db    0
.xdata$x:00004F3E                 db    0
.xdata$x:00004F3F                 db    0
.xdata$x:00004F40                 db    0
.xdata$x:00004F41                 db    0
.xdata$x:00004F42                 db    0
.xdata$x:00004F43                 db    0
.xdata$x:00004F44                 db    0
.xdata$x:00004F45                 db    0
.xdata$x:00004F46                 db    0
.xdata$x:00004F47                 db    0
.xdata$x:00004F48                 db    0
.xdata$x:00004F49                 db    0
.xdata$x:00004F4A                 db    0
.xdata$x:00004F4B                 db    0
.xdata$x:00004F4C                 db    1
.xdata$x:00004F4D                 db    0
.xdata$x:00004F4E                 db    0
.xdata$x:00004F4F                 db    0
.xdata$x:00004F4F _xdata$x        ends
.xdata$x:00004F4F
.text:00004F50 ; ===========================================================================
.text:00004F50
.text:00004F50 ; Segment type: Pure code
.text:00004F50 ; Segment permissions: Read/Execute
.text:00004F50 _text           segment para public 'CODE' use32
.text:00004F50                 assume cs:_text
.text:00004F50                 ;org 4F50h
.text:00004F50 ; COMDAT (pick any)
.text:00004F50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F50
.text:00004F50 ; =============== S U B R O U T I N E =======================================
.text:00004F50
.text:00004F50 ; Attributes: bp-based frame
.text:00004F50
.text:00004F50 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00004F50                 public ??1UString@@QAE@XZ
.text:00004F50 ??1UString@@QAE@XZ proc near            ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+2F0p
.text:00004F50                                         ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+114p ...
.text:00004F50
.text:00004F50 var_8           = dword ptr -8
.text:00004F50 var_4           = dword ptr -4
.text:00004F50
.text:00004F50                 push    ebp
.text:00004F51                 mov     ebp, esp
.text:00004F53                 sub     esp, 8
.text:00004F56                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004F5D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F64                 mov     [ebp+var_4], ecx
.text:00004F67                 mov     eax, [ebp+var_4]
.text:00004F6A                 mov     ecx, [eax]
.text:00004F6C                 mov     [ebp+var_8], ecx
.text:00004F6F                 mov     edx, [ebp+var_8]
.text:00004F72                 push    edx             ; void *
.text:00004F73                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004F78                 add     esp, 4
.text:00004F7B                 add     esp, 8
.text:00004F7E                 cmp     ebp, esp
.text:00004F80                 call    __RTC_CheckEsp
.text:00004F85                 mov     esp, ebp
.text:00004F87                 pop     ebp
.text:00004F88                 retn
.text:00004F88 ??1UString@@QAE@XZ endp
.text:00004F88
.text:00004F88 ; ---------------------------------------------------------------------------
.text:00004F89                 align 4
.text:00004F89 _text           ends
.text:00004F89
.text:00004F8C ; ===========================================================================
.text:00004F8C
.text:00004F8C ; Segment type: Pure code
.text:00004F8C ; Segment permissions: Read/Execute
.text:00004F8C _text           segment para public 'CODE' use32
.text:00004F8C                 assume cs:_text
.text:00004F8C                 ;org 4F8Ch
.text:00004F8C ; COMDAT (pick any)
.text:00004F8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F8C
.text:00004F8C ; =============== S U B R O U T I N E =======================================
.text:00004F8C
.text:00004F8C ; Attributes: bp-based frame
.text:00004F8C
.text:00004F8C ; _DWORD __thiscall CFieldInfo::~CFieldInfo(CFieldInfo *__hidden this)
.text:00004F8C                 public ??1CFieldInfo@@QAE@XZ
.text:00004F8C ??1CFieldInfo@@QAE@XZ proc near         ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+133p
.text:00004F8C                                         ; __unwindfunclet$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z$0+3j ...
.text:00004F8C
.text:00004F8C var_10          = dword ptr -10h
.text:00004F8C var_C           = dword ptr -0Ch
.text:00004F8C var_4           = dword ptr -4
.text:00004F8C
.text:00004F8C                 push    ebp
.text:00004F8D                 mov     ebp, esp
.text:00004F8F                 push    0FFFFFFFFh
.text:00004F91                 push    offset __ehhandler$??1CFieldInfo@@QAE@XZ
.text:00004F96                 mov     eax, large fs:0
.text:00004F9C                 push    eax
.text:00004F9D                 push    ecx
.text:00004F9E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004FA5                 mov     eax, dword ptr ds:___security_cookie
.text:00004FAA                 xor     eax, ebp
.text:00004FAC                 push    eax
.text:00004FAD                 lea     eax, [ebp+var_C]
.text:00004FB0                 mov     large fs:0, eax
.text:00004FB6                 mov     [ebp+var_10], ecx
.text:00004FB9                 mov     [ebp+var_4], 0
.text:00004FC0                 mov     ecx, [ebp+var_10]
.text:00004FC3                 add     ecx, 14h        ; this
.text:00004FC6                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00004FCB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004FD2                 mov     ecx, [ebp+var_10]
.text:00004FD5                 add     ecx, 8          ; this
.text:00004FD8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004FDD                 mov     ecx, [ebp+var_C]
.text:00004FE0                 mov     large fs:0, ecx
.text:00004FE7                 pop     ecx
.text:00004FE8                 add     esp, 10h
.text:00004FEB                 cmp     ebp, esp
.text:00004FED                 call    __RTC_CheckEsp
.text:00004FF2                 mov     esp, ebp
.text:00004FF4                 pop     ebp
.text:00004FF5                 retn
.text:00004FF5 ??1CFieldInfo@@QAE@XZ endp
.text:00004FF5
.text:00004FF5 ; ---------------------------------------------------------------------------
.text:00004FF6                 align 4
.text:00004FF6 _text           ends
.text:00004FF6
.text$x:00004FF8 ; ===========================================================================
.text$x:00004FF8
.text$x:00004FF8 ; Segment type: Pure code
.text$x:00004FF8 ; Segment permissions: Read/Execute
.text$x:00004FF8 _text$x         segment para public 'CODE' use32
.text$x:00004FF8                 assume cs:_text$x
.text$x:00004FF8                 ;org 4FF8h
.text$x:00004FF8 ; COMDAT (pick associative to section at 4F8C)
.text$x:00004FF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004FF8
.text$x:00004FF8 ; =============== S U B R O U T I N E =======================================
.text$x:00004FF8
.text$x:00004FF8
.text$x:00004FF8 __unwindfunclet$??1CFieldInfo@@QAE@XZ$0 proc near
.text$x:00004FF8                                         ; DATA XREF: .xdata$x:00005024o
.text$x:00004FF8                 mov     ecx, [ebp-10h]
.text$x:00004FFB                 add     ecx, 8          ; this
.text$x:00004FFE                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004FFE __unwindfunclet$??1CFieldInfo@@QAE@XZ$0 endp
.text$x:00004FFE
.text$x:00005003
.text$x:00005003 ; =============== S U B R O U T I N E =======================================
.text$x:00005003
.text$x:00005003
.text$x:00005003 __ehhandler$??1CFieldInfo@@QAE@XZ proc near
.text$x:00005003                                         ; DATA XREF: CFieldInfo::~CFieldInfo(void)+5o
.text$x:00005003
.text$x:00005003 arg_4           = dword ptr  8
.text$x:00005003
.text$x:00005003                 mov     edx, [esp+arg_4]
.text$x:00005007                 lea     eax, [edx+0Ch]
.text$x:0000500A                 mov     ecx, [edx-8]
.text$x:0000500D                 xor     ecx, eax
.text$x:0000500F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005014                 mov     eax, offset __ehfuncinfo$??1CFieldInfo@@QAE@XZ
.text$x:00005019                 jmp     ___CxxFrameHandler3
.text$x:00005019 __ehhandler$??1CFieldInfo@@QAE@XZ endp
.text$x:00005019
.text$x:00005019 ; ---------------------------------------------------------------------------
.text$x:0000501E                 align 10h
.text$x:0000501E _text$x         ends
.text$x:0000501E
.xdata$x:00005020 ; ===========================================================================
.xdata$x:00005020
.xdata$x:00005020 ; Segment type: Pure data
.xdata$x:00005020 ; Segment permissions: Read
.xdata$x:00005020 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005020                 assume cs:_xdata$x
.xdata$x:00005020                 ;org 5020h
.xdata$x:00005020 ; COMDAT (pick associative to section at 4F8C)
.xdata$x:00005020 __unwindtable$??1CFieldInfo@@QAE@XZ db 0FFh
.xdata$x:00005020                                         ; DATA XREF: .xdata$x:00005030o
.xdata$x:00005021                 db 0FFh
.xdata$x:00005022                 db 0FFh
.xdata$x:00005023                 db 0FFh
.xdata$x:00005024                 dd offset __unwindfunclet$??1CFieldInfo@@QAE@XZ$0
.xdata$x:00005028 __ehfuncinfo$??1CFieldInfo@@QAE@XZ db  22h ; "
.xdata$x:00005028                                         ; DATA XREF: __ehhandler$??1CFieldInfo@@QAE@XZ+11o
.xdata$x:00005029                 db    5
.xdata$x:0000502A                 db  93h ; ô
.xdata$x:0000502B                 db  19h
.xdata$x:0000502C                 db    1
.xdata$x:0000502D                 db    0
.xdata$x:0000502E                 db    0
.xdata$x:0000502F                 db    0
.xdata$x:00005030                 dd offset __unwindtable$??1CFieldInfo@@QAE@XZ
.xdata$x:00005034                 db    0
.xdata$x:00005035                 db    0
.xdata$x:00005036                 db    0
.xdata$x:00005037                 db    0
.xdata$x:00005038                 db    0
.xdata$x:00005039                 db    0
.xdata$x:0000503A                 db    0
.xdata$x:0000503B                 db    0
.xdata$x:0000503C                 db    0
.xdata$x:0000503D                 db    0
.xdata$x:0000503E                 db    0
.xdata$x:0000503F                 db    0
.xdata$x:00005040                 db    0
.xdata$x:00005041                 db    0
.xdata$x:00005042                 db    0
.xdata$x:00005043                 db    0
.xdata$x:00005044                 db    0
.xdata$x:00005045                 db    0
.xdata$x:00005046                 db    0
.xdata$x:00005047                 db    0
.xdata$x:00005048                 db    1
.xdata$x:00005049                 db    0
.xdata$x:0000504A                 db    0
.xdata$x:0000504B                 db    0
.xdata$x:0000504B _xdata$x        ends
.xdata$x:0000504B
.text:0000504C ; ===========================================================================
.text:0000504C
.text:0000504C ; Segment type: Pure code
.text:0000504C ; Segment permissions: Read/Execute
.text:0000504C _text           segment para public 'CODE' use32
.text:0000504C                 assume cs:_text
.text:0000504C                 ;org 504Ch
.text:0000504C ; COMDAT (pick any)
.text:0000504C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000504C
.text:0000504C ; =============== S U B R O U T I N E =======================================
.text:0000504C
.text:0000504C ; Attributes: bp-based frame
.text:0000504C
.text:0000504C ; _DWORD __thiscall CMyComBSTR::CMyComBSTR(CMyComBSTR *__hidden this)
.text:0000504C                 public ??0CMyComBSTR@@QAE@XZ
.text:0000504C ??0CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: CFieldPrinter::AddMainProps(IInArchive *)+88p
.text:0000504C                                         ; CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+88p ...
.text:0000504C
.text:0000504C var_4           = dword ptr -4
.text:0000504C
.text:0000504C                 push    ebp
.text:0000504D                 mov     ebp, esp
.text:0000504F                 push    ecx
.text:00005050                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005057                 mov     [ebp+var_4], ecx
.text:0000505A                 mov     eax, [ebp+var_4]
.text:0000505D                 mov     dword ptr [eax], 0
.text:00005063                 mov     eax, [ebp+var_4]
.text:00005066                 mov     esp, ebp
.text:00005068                 pop     ebp
.text:00005069                 retn
.text:00005069 ??0CMyComBSTR@@QAE@XZ endp
.text:00005069
.text:00005069 ; ---------------------------------------------------------------------------
.text:0000506A                 align 4
.text:0000506A _text           ends
.text:0000506A
.text:0000506C ; ===========================================================================
.text:0000506C
.text:0000506C ; Segment type: Pure code
.text:0000506C ; Segment permissions: Read/Execute
.text:0000506C _text           segment para public 'CODE' use32
.text:0000506C                 assume cs:_text
.text:0000506C                 ;org 506Ch
.text:0000506C ; COMDAT (pick any)
.text:0000506C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000506C
.text:0000506C ; =============== S U B R O U T I N E =======================================
.text:0000506C
.text:0000506C ; Attributes: bp-based frame
.text:0000506C
.text:0000506C ; _DWORD __thiscall CMyComBSTR::~CMyComBSTR(CMyComBSTR *__hidden this)
.text:0000506C                 public ??1CMyComBSTR@@QAE@XZ
.text:0000506C ??1CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: CFieldPrinter::AddMainProps(IInArchive *)+D9p
.text:0000506C                                         ; CFieldPrinter::AddMainProps(IInArchive *)+104p ...
.text:0000506C
.text:0000506C var_4           = dword ptr -4
.text:0000506C
.text:0000506C                 push    ebp
.text:0000506D                 mov     ebp, esp
.text:0000506F                 push    ecx
.text:00005070                 push    esi
.text:00005071                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005078                 mov     [ebp+var_4], ecx
.text:0000507B                 mov     esi, esp
.text:0000507D                 mov     eax, [ebp+var_4]
.text:00005080                 mov     ecx, [eax]
.text:00005082                 push    ecx             ; bstrString
.text:00005083                 call    dword ptr ds:__imp__SysFreeString@4 ; SysFreeString(x)
.text:00005089                 cmp     esi, esp
.text:0000508B                 call    __RTC_CheckEsp
.text:00005090                 pop     esi
.text:00005091                 add     esp, 4
.text:00005094                 cmp     ebp, esp
.text:00005096                 call    __RTC_CheckEsp
.text:0000509B                 mov     esp, ebp
.text:0000509D                 pop     ebp
.text:0000509E                 retn
.text:0000509E ??1CMyComBSTR@@QAE@XZ endp
.text:0000509E
.text:0000509E ; ---------------------------------------------------------------------------
.text:0000509F                 align 10h
.text:0000509F _text           ends
.text:0000509F
.text:000050A0 ; ===========================================================================
.text:000050A0
.text:000050A0 ; Segment type: Pure code
.text:000050A0 ; Segment permissions: Read/Execute
.text:000050A0 _text           segment para public 'CODE' use32
.text:000050A0                 assume cs:_text
.text:000050A0                 ;org 50A0h
.text:000050A0 ; COMDAT (pick any)
.text:000050A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050A0
.text:000050A0 ; =============== S U B R O U T I N E =======================================
.text:000050A0
.text:000050A0 ; Attributes: bp-based frame
.text:000050A0
.text:000050A0 ; public: wchar_t * * __thiscall CMyComBSTR::operator&(void)
.text:000050A0                 public ??ICMyComBSTR@@QAEPAPA_WXZ
.text:000050A0 ??ICMyComBSTR@@QAEPAPA_WXZ proc near    ; CODE XREF: CFieldPrinter::AddMainProps(IInArchive *)+A1p
.text:000050A0                                         ; CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+9Dp ...
.text:000050A0
.text:000050A0 var_4           = dword ptr -4
.text:000050A0
.text:000050A0                 push    ebp
.text:000050A1                 mov     ebp, esp
.text:000050A3                 push    ecx
.text:000050A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050AB                 mov     [ebp+var_4], ecx
.text:000050AE                 mov     eax, [ebp+var_4]
.text:000050B1                 mov     esp, ebp
.text:000050B3                 pop     ebp
.text:000050B4                 retn
.text:000050B4 ??ICMyComBSTR@@QAEPAPA_WXZ endp
.text:000050B4
.text:000050B4 ; ---------------------------------------------------------------------------
.text:000050B5                 align 4
.text:000050B5 _text           ends
.text:000050B5
.text:000050B8 ; ===========================================================================
.text:000050B8
.text:000050B8 ; Segment type: Pure code
.text:000050B8 ; Segment permissions: Read/Execute
.text:000050B8 _text           segment para public 'CODE' use32
.text:000050B8                 assume cs:_text
.text:000050B8                 ;org 50B8h
.text:000050B8 ; COMDAT (pick any)
.text:000050B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050B8
.text:000050B8 ; =============== S U B R O U T I N E =======================================
.text:000050B8
.text:000050B8 ; Attributes: bp-based frame
.text:000050B8
.text:000050B8 ; public: __thiscall CMyComBSTR::operator wchar_t const *(void)const
.text:000050B8                 public ??BCMyComBSTR@@QBEPB_WXZ
.text:000050B8 ??BCMyComBSTR@@QBEPB_WXZ proc near      ; CODE XREF: CFieldPrinter::AddMainProps(IInArchive *)+ECp
.text:000050B8                                         ; CFieldPrinter::AddRawProps(IArchiveGetRawProps *)+E8p ...
.text:000050B8
.text:000050B8 var_4           = dword ptr -4
.text:000050B8
.text:000050B8                 push    ebp
.text:000050B9                 mov     ebp, esp
.text:000050BB                 push    ecx
.text:000050BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050C3                 mov     [ebp+var_4], ecx
.text:000050C6                 mov     eax, [ebp+var_4]
.text:000050C9                 mov     eax, [eax]
.text:000050CB                 mov     esp, ebp
.text:000050CD                 pop     ebp
.text:000050CE                 retn
.text:000050CE ??BCMyComBSTR@@QBEPB_WXZ endp
.text:000050CE
.text:000050CE ; ---------------------------------------------------------------------------
.text:000050CF                 align 10h
.text:000050CF _text           ends
.text:000050CF
.text:000050D0 ; ===========================================================================
.text:000050D0
.text:000050D0 ; Segment type: Pure code
.text:000050D0 ; Segment permissions: Read/Execute
.text:000050D0 _text           segment para public 'CODE' use32
.text:000050D0                 assume cs:_text
.text:000050D0                 ;org 50D0h
.text:000050D0 ; COMDAT (pick any)
.text:000050D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050D0
.text:000050D0 ; =============== S U B R O U T I N E =======================================
.text:000050D0
.text:000050D0 ; Attributes: bp-based frame
.text:000050D0
.text:000050D0 ; public: __thiscall AString::operator char const *(void)const
.text:000050D0                 public ??BAString@@QBEPBDXZ
.text:000050D0 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: CFieldPrinter::PrintTitle(void)+74p
.text:000050D0                                         ; CFieldPrinter::PrintTitleLines(void)+14p ...
.text:000050D0
.text:000050D0 var_4           = dword ptr -4
.text:000050D0
.text:000050D0                 push    ebp
.text:000050D1                 mov     ebp, esp
.text:000050D3                 push    ecx
.text:000050D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050DB                 mov     [ebp+var_4], ecx
.text:000050DE                 mov     eax, [ebp+var_4]
.text:000050E1                 mov     eax, [eax]
.text:000050E3                 mov     esp, ebp
.text:000050E5                 pop     ebp
.text:000050E6                 retn
.text:000050E6 ??BAString@@QBEPBDXZ endp
.text:000050E6
.text:000050E6 ; ---------------------------------------------------------------------------
.text:000050E7                 align 4
.text:000050E7 _text           ends
.text:000050E7
.text:000050E8 ; ===========================================================================
.text:000050E8
.text:000050E8 ; Segment type: Pure code
.text:000050E8 ; Segment permissions: Read/Execute
.text:000050E8 _text           segment para public 'CODE' use32
.text:000050E8                 assume cs:_text
.text:000050E8                 ;org 50E8h
.text:000050E8 ; COMDAT (pick any)
.text:000050E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050E8
.text:000050E8 ; =============== S U B R O U T I N E =======================================
.text:000050E8
.text:000050E8 ; Attributes: bp-based frame
.text:000050E8
.text:000050E8 ; int __stdcall CStdOutStream::operator<<(char *Str)
.text:000050E8                 public ??6CStdOutStream@@QAEAAV0@PBD@Z
.text:000050E8 ??6CStdOutStream@@QAEAAV0@PBD@Z proc near ; CODE XREF: PrintSpaces(uint)+23p
.text:000050E8                                         ; PrintString(EAdjustment,uint,char const *)+93p ...
.text:000050E8
.text:000050E8 var_4           = dword ptr -4
.text:000050E8 Str             = dword ptr  8
.text:000050E8
.text:000050E8                 push    ebp
.text:000050E9                 mov     ebp, esp
.text:000050EB                 push    ecx
.text:000050EC                 push    esi
.text:000050ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050F4                 mov     [ebp+var_4], ecx
.text:000050F7                 mov     esi, esp
.text:000050F9                 mov     eax, [ebp+var_4]
.text:000050FC                 mov     ecx, [eax]
.text:000050FE                 push    ecx             ; File
.text:000050FF                 mov     edx, [ebp+Str]
.text:00005102                 push    edx             ; Str
.text:00005103                 call    dword ptr ds:__imp__fputs
.text:00005109                 add     esp, 8
.text:0000510C                 cmp     esi, esp
.text:0000510E                 call    __RTC_CheckEsp
.text:00005113                 mov     eax, [ebp+var_4]
.text:00005116                 pop     esi
.text:00005117                 add     esp, 4
.text:0000511A                 cmp     ebp, esp
.text:0000511C                 call    __RTC_CheckEsp
.text:00005121                 mov     esp, ebp
.text:00005123                 pop     ebp
.text:00005124                 retn    4
.text:00005124 ??6CStdOutStream@@QAEAAV0@PBD@Z endp
.text:00005124
.text:00005124 ; ---------------------------------------------------------------------------
.text:00005127                 align 4
.text:00005127 _text           ends
.text:00005127
.text:00005128 ; ===========================================================================
.text:00005128
.text:00005128 ; Segment type: Pure code
.text:00005128 ; Segment permissions: Read/Execute
.text:00005128 _text           segment para public 'CODE' use32
.text:00005128                 assume cs:_text
.text:00005128                 ;org 5128h
.text:00005128 ; COMDAT (pick any)
.text:00005128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005128
.text:00005128 ; =============== S U B R O U T I N E =======================================
.text:00005128
.text:00005128 ; Attributes: bp-based frame
.text:00005128
.text:00005128 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(class CStdOutStream & (__stdcall *)(class CStdOutStream &))
.text:00005128                 public ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z
.text:00005128 ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z proc near
.text:00005128                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+183p
.text:00005128                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+796p ...
.text:00005128
.text:00005128 var_4           = dword ptr -4
.text:00005128
.text:00005128                 push    ebp
.text:00005129                 mov     ebp, esp
.text:0000512B                 push    ecx
.text:0000512C                 push    esi
.text:0000512D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005134                 mov     [ebp+var_4], ecx
.text:00005137                 mov     esi, esp
.text:00005139                 mov     eax, [ebp+var_4]
.text:0000513C                 push    eax
.text:0000513D                 call    ss:$SG72507[ebp]
.text:00005140                 cmp     esi, esp
.text:00005142                 call    __RTC_CheckEsp
.text:00005147                 mov     eax, [ebp+var_4]
.text:0000514A                 pop     esi
.text:0000514B                 add     esp, 4
.text:0000514E                 cmp     ebp, esp
.text:00005150                 call    __RTC_CheckEsp
.text:00005155                 mov     esp, ebp
.text:00005157                 pop     ebp
.text:00005158                 retn    4
.text:00005158 ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z endp
.text:00005158
.text:00005158 ; ---------------------------------------------------------------------------
.text:0000515B                 align 4
.text:0000515B _text           ends
.text:0000515B
.text:0000515C ; ===========================================================================
.text:0000515C
.text:0000515C ; Segment type: Pure code
.text:0000515C ; Segment permissions: Read/Execute
.text:0000515C _text           segment para public 'CODE' use32
.text:0000515C                 assume cs:_text
.text:0000515C                 ;org 515Ch
.text:0000515C ; COMDAT (pick any)
.text:0000515C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000515C
.text:0000515C ; =============== S U B R O U T I N E =======================================
.text:0000515C
.text:0000515C ; Attributes: bp-based frame
.text:0000515C
.text:0000515C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:0000515C                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:0000515C ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:0000515C                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+37Ep
.text:0000515C                                         ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+3DAp ...
.text:0000515C
.text:0000515C var_4           = dword ptr -4
.text:0000515C
.text:0000515C                 push    ebp
.text:0000515D                 mov     ebp, esp
.text:0000515F                 push    ecx
.text:00005160                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005167                 mov     [ebp+var_4], ecx
.text:0000516A                 xor     eax, eax
.text:0000516C                 mov     ecx, [ebp+var_4]
.text:0000516F                 mov     [ecx], ax
.text:00005172                 xor     edx, edx
.text:00005174                 mov     eax, [ebp+var_4]
.text:00005177                 mov     [eax+2], dx
.text:0000517B                 mov     ecx, [ebp+var_4]
.text:0000517E                 mov     dword ptr [ecx+8], 0
.text:00005185                 mov     eax, [ebp+var_4]
.text:00005188                 mov     esp, ebp
.text:0000518A                 pop     ebp
.text:0000518B                 retn
.text:0000518B ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:0000518B
.text:0000518B _text           ends
.text:0000518B
.text:0000518C ; ===========================================================================
.text:0000518C
.text:0000518C ; Segment type: Pure code
.text:0000518C ; Segment permissions: Read/Execute
.text:0000518C _text           segment para public 'CODE' use32
.text:0000518C                 assume cs:_text
.text:0000518C                 ;org 518Ch
.text:0000518C ; COMDAT (pick any)
.text:0000518C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000518C
.text:0000518C ; =============== S U B R O U T I N E =======================================
.text:0000518C
.text:0000518C ; Attributes: bp-based frame
.text:0000518C
.text:0000518C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:0000518C                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:0000518C ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:0000518C                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+489p
.text:0000518C                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+77Cp ...
.text:0000518C
.text:0000518C var_4           = dword ptr -4
.text:0000518C
.text:0000518C                 push    ebp
.text:0000518D                 mov     ebp, esp
.text:0000518F                 push    ecx
.text:00005190                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005197                 mov     [ebp+var_4], ecx
.text:0000519A                 mov     ecx, [ebp+var_4] ; this
.text:0000519D                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:000051A2                 add     esp, 4
.text:000051A5                 cmp     ebp, esp
.text:000051A7                 call    __RTC_CheckEsp
.text:000051AC                 mov     esp, ebp
.text:000051AE                 pop     ebp
.text:000051AF                 retn
.text:000051AF ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:000051AF
.text:000051AF _text           ends
.text:000051AF
.xdata$x:000051B0 ; ===========================================================================
.xdata$x:000051B0
.xdata$x:000051B0 ; Segment type: Pure data
.xdata$x:000051B0 ; Segment permissions: Read
.xdata$x:000051B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000051B0                 assume cs:_xdata$x
.xdata$x:000051B0                 ;org 51B0h
.xdata$x:000051B0 ; COMDAT (pick any)
.xdata$x:000051B0                 public __TI1H
.xdata$x:000051B0 __TI1H          db    0                 ; DATA XREF: PrintTime(char *,_FILETIME const *)+56o
.xdata$x:000051B0                                         ; ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+90o
.xdata$x:000051B1                 db    0
.xdata$x:000051B2                 db    0
.xdata$x:000051B3                 db    0
.xdata$x:000051B4                 db    0
.xdata$x:000051B5                 db    0
.xdata$x:000051B6                 db    0
.xdata$x:000051B7                 db    0
.xdata$x:000051B8                 db    0
.xdata$x:000051B9                 db    0
.xdata$x:000051BA                 db    0
.xdata$x:000051BB                 db    0
.xdata$x:000051BC                 dd offset __CTA1H
.xdata$x:000051BC _xdata$x        ends
.xdata$x:000051BC
.xdata$x:000051C0 ; ===========================================================================
.xdata$x:000051C0
.xdata$x:000051C0 ; Segment type: Pure data
.xdata$x:000051C0 ; Segment permissions: Read
.xdata$x:000051C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000051C0                 assume cs:_xdata$x
.xdata$x:000051C0                 ;org 51C0h
.xdata$x:000051C0 ; COMDAT (pick any)
.xdata$x:000051C0                 public __CTA1H
.xdata$x:000051C0 __CTA1H         db    1                 ; DATA XREF: .xdata$x:000051BCo
.xdata$x:000051C1                 db    0
.xdata$x:000051C2                 db    0
.xdata$x:000051C3                 db    0
.xdata$x:000051C4                 dd offset __CT??_R0H@84
.xdata$x:000051C4 _xdata$x        ends
.xdata$x:000051C4
.xdata$x:000051C8 ; ===========================================================================
.xdata$x:000051C8
.xdata$x:000051C8 ; Segment type: Pure data
.xdata$x:000051C8 ; Segment permissions: Read
.xdata$x:000051C8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000051C8                 assume cs:_xdata$x
.xdata$x:000051C8                 ;org 51C8h
.xdata$x:000051C8 ; COMDAT (pick any)
.xdata$x:000051C8                 public __CT??_R0H@84
.xdata$x:000051C8 __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:000051C4o
.xdata$x:000051C9                 db    0
.xdata$x:000051CA                 db    0
.xdata$x:000051CB                 db    0
.xdata$x:000051CC                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:000051D0                 db    0
.xdata$x:000051D1                 db    0
.xdata$x:000051D2                 db    0
.xdata$x:000051D3                 db    0
.xdata$x:000051D4                 db 0FFh
.xdata$x:000051D5                 db 0FFh
.xdata$x:000051D6                 db 0FFh
.xdata$x:000051D7                 db 0FFh
.xdata$x:000051D8                 db    0
.xdata$x:000051D9                 db    0
.xdata$x:000051DA                 db    0
.xdata$x:000051DB                 db    0
.xdata$x:000051DC                 db    4
.xdata$x:000051DD                 db    0
.xdata$x:000051DE                 db    0
.xdata$x:000051DF                 db    0
.xdata$x:000051E0                 db    0
.xdata$x:000051E1                 db    0
.xdata$x:000051E2                 db    0
.xdata$x:000051E3                 db    0
.xdata$x:000051E3 _xdata$x        ends
.xdata$x:000051E3
.data:000051E4 ; ===========================================================================
.data:000051E4
.data:000051E4 ; Segment type: Pure data
.data:000051E4 ; Segment permissions: Read/Write
.data:000051E4 _data           segment dword public 'DATA' use32
.data:000051E4                 assume cs:_data
.data:000051E4                 ;org 51E4h
.data:000051E4 ; COMDAT (pick any)
.data:000051E4                 public ??_R0H@8
.data:000051E4 ; int `RTTI Type Descriptor'
.data:000051E4 ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:000051CCo
.data:000051E4                                         ; const type_info::`vftable'
.data:000051E8                 db    0
.data:000051E9                 db    0
.data:000051EA                 db    0
.data:000051EB                 db    0
.data:000051EC                 db  2Eh ; .
.data:000051ED                 db  48h ; H
.data:000051EE                 db    0
.data:000051EF                 align 10h
.data:000051EF _data           ends
.data:000051EF
.text:000051F0 ; ===========================================================================
.text:000051F0
.text:000051F0 ; Segment type: Pure code
.text:000051F0 ; Segment permissions: Read/Execute
.text:000051F0 _text           segment para public 'CODE' use32
.text:000051F0                 assume cs:_text
.text:000051F0                 ;org 51F0h
.text:000051F0 ; COMDAT (pick any)
.text:000051F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000051F0
.text:000051F0 ; =============== S U B R O U T I N E =======================================
.text:000051F0
.text:000051F0 ; Attributes: bp-based frame
.text:000051F0
.text:000051F0 ; void __thiscall CListStat::Update(CListStat *this, const struct CListStat *)
.text:000051F0                 public ?Update@CListStat@@QAEXABU1@@Z
.text:000051F0 ?Update@CListStat@@QAEXABU1@@Z proc near
.text:000051F0                                         ; CODE XREF: CFieldPrinter::PrintSum(CListStat2 const &)+7Dp
.text:000051F0                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+13A2p ...
.text:000051F0
.text:000051F0 var_4           = dword ptr -4
.text:000051F0 arg_0           = dword ptr  8
.text:000051F0
.text:000051F0                 push    ebp
.text:000051F1                 mov     ebp, esp
.text:000051F3                 push    ecx
.text:000051F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051FB                 mov     [ebp+var_4], ecx
.text:000051FE                 mov     eax, [ebp+arg_0]
.text:00005201                 push    eax             ; struct CListUInt64Def *
.text:00005202                 mov     ecx, [ebp+var_4] ; this
.text:00005205                 call    ?Add@CListUInt64Def@@QAEXABU1@@Z ; CListUInt64Def::Add(CListUInt64Def const &)
.text:0000520A                 mov     ecx, [ebp+arg_0]
.text:0000520D                 add     ecx, 10h
.text:00005210                 push    ecx             ; struct CListUInt64Def *
.text:00005211                 mov     ecx, [ebp+var_4]
.text:00005214                 add     ecx, 10h        ; this
.text:00005217                 call    ?Add@CListUInt64Def@@QAEXABU1@@Z ; CListUInt64Def::Add(CListUInt64Def const &)
.text:0000521C                 mov     edx, [ebp+arg_0]
.text:0000521F                 add     edx, 20h ; ' '
.text:00005222                 push    edx             ; struct CListFileTimeDef *
.text:00005223                 mov     ecx, [ebp+var_4]
.text:00005226                 add     ecx, 20h ; ' '  ; this
.text:00005229                 call    ?Update@CListFileTimeDef@@QAEXABU1@@Z ; CListFileTimeDef::Update(CListFileTimeDef const &)
.text:0000522E                 mov     eax, [ebp+var_4]
.text:00005231                 mov     ecx, [ebp+arg_0]
.text:00005234                 mov     edx, [eax+30h]
.text:00005237                 add     edx, [ecx+30h]
.text:0000523A                 mov     eax, [eax+34h]
.text:0000523D                 adc     eax, [ecx+34h]
.text:00005240                 mov     ecx, [ebp+var_4]
.text:00005243                 mov     [ecx+30h], edx
.text:00005246                 mov     [ecx+34h], eax
.text:00005249                 add     esp, 4
.text:0000524C                 cmp     ebp, esp
.text:0000524E                 call    __RTC_CheckEsp
.text:00005253                 mov     esp, ebp
.text:00005255                 pop     ebp
.text:00005256                 retn    4
.text:00005256 ?Update@CListStat@@QAEXABU1@@Z endp
.text:00005256
.text:00005256 ; ---------------------------------------------------------------------------
.text:00005259                 align 4
.text:00005259 _text           ends
.text:00005259
.text:0000525C ; ===========================================================================
.text:0000525C
.text:0000525C ; Segment type: Pure code
.text:0000525C ; Segment permissions: Read/Execute
.text:0000525C _text           segment para public 'CODE' use32
.text:0000525C                 assume cs:_text
.text:0000525C                 ;org 525Ch
.text:0000525C ; COMDAT (pick any)
.text:0000525C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000525C
.text:0000525C ; =============== S U B R O U T I N E =======================================
.text:0000525C
.text:0000525C ; Attributes: bp-based frame
.text:0000525C
.text:0000525C ; void __thiscall CListUInt64Def::Add(CListUInt64Def *this, const struct CListUInt64Def *)
.text:0000525C                 public ?Add@CListUInt64Def@@QAEXABU1@@Z
.text:0000525C ?Add@CListUInt64Def@@QAEXABU1@@Z proc near
.text:0000525C                                         ; CODE XREF: CListStat::Update(CListStat const &)+15p
.text:0000525C                                         ; CListStat::Update(CListStat const &)+27p
.text:0000525C
.text:0000525C var_4           = dword ptr -4
.text:0000525C arg_0           = dword ptr  8
.text:0000525C
.text:0000525C                 push    ebp
.text:0000525D                 mov     ebp, esp
.text:0000525F                 push    ecx
.text:00005260                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005267                 mov     [ebp+var_4], ecx
.text:0000526A                 mov     eax, [ebp+arg_0]
.text:0000526D                 movzx   ecx, byte ptr [eax+8]
.text:00005271                 test    ecx, ecx
.text:00005273                 jz      short loc_5287
.text:00005275                 mov     edx, [ebp+arg_0]
.text:00005278                 mov     eax, [edx+4]
.text:0000527B                 push    eax
.text:0000527C                 mov     ecx, [edx]
.text:0000527E                 push    ecx             ; unsigned __int64
.text:0000527F                 mov     ecx, [ebp+var_4] ; this
.text:00005282                 call    ?Add@CListUInt64Def@@QAEX_K@Z ; CListUInt64Def::Add(unsigned __int64)
.text:00005287
.text:00005287 loc_5287:                               ; CODE XREF: CListUInt64Def::Add(CListUInt64Def const &)+17j
.text:00005287                 add     esp, 4
.text:0000528A                 cmp     ebp, esp
.text:0000528C                 call    __RTC_CheckEsp
.text:00005291                 mov     esp, ebp
.text:00005293                 pop     ebp
.text:00005294                 retn    4
.text:00005294 ?Add@CListUInt64Def@@QAEXABU1@@Z endp
.text:00005294
.text:00005294 ; ---------------------------------------------------------------------------
.text:00005297                 align 4
.text:00005297 _text           ends
.text:00005297
.text:00005298 ; ===========================================================================
.text:00005298
.text:00005298 ; Segment type: Pure code
.text:00005298 ; Segment permissions: Read/Execute
.text:00005298 _text           segment para public 'CODE' use32
.text:00005298                 assume cs:_text
.text:00005298                 ;org 5298h
.text:00005298 ; COMDAT (pick any)
.text:00005298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005298
.text:00005298 ; =============== S U B R O U T I N E =======================================
.text:00005298
.text:00005298 ; Attributes: bp-based frame
.text:00005298
.text:00005298 ; void __thiscall CListUInt64Def::Add(CListUInt64Def *this, unsigned __int64)
.text:00005298                 public ?Add@CListUInt64Def@@QAEX_K@Z
.text:00005298 ?Add@CListUInt64Def@@QAEX_K@Z proc near ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1531p
.text:00005298                                         ; CListUInt64Def::Add(CListUInt64Def const &)+26p
.text:00005298
.text:00005298 var_4           = dword ptr -4
.text:00005298 arg_0           = qword ptr  8
.text:00005298
.text:00005298                 push    ebp
.text:00005299                 mov     ebp, esp
.text:0000529B                 push    ecx
.text:0000529C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052A3                 mov     [ebp+var_4], ecx
.text:000052A6                 mov     eax, [ebp+var_4]
.text:000052A9                 mov     ecx, [eax]
.text:000052AB                 add     ecx, dword ptr [ebp+arg_0]
.text:000052AE                 mov     edx, [eax+4]
.text:000052B1                 adc     edx, dword ptr [ebp+arg_0+4]
.text:000052B4                 mov     eax, [ebp+var_4]
.text:000052B7                 mov     [eax], ecx
.text:000052B9                 mov     [eax+4], edx
.text:000052BC                 mov     ecx, [ebp+var_4]
.text:000052BF                 mov     byte ptr [ecx+8], 1
.text:000052C3                 mov     esp, ebp
.text:000052C5                 pop     ebp
.text:000052C6                 retn    8
.text:000052C6 ?Add@CListUInt64Def@@QAEX_K@Z endp
.text:000052C6
.text:000052C6 ; ---------------------------------------------------------------------------
.text:000052C9                 align 4
.text:000052C9 _text           ends
.text:000052C9
.text:000052CC ; ===========================================================================
.text:000052CC
.text:000052CC ; Segment type: Pure code
.text:000052CC ; Segment permissions: Read/Execute
.text:000052CC _text           segment para public 'CODE' use32
.text:000052CC                 assume cs:_text
.text:000052CC                 ;org 52CCh
.text:000052CC ; COMDAT (pick any)
.text:000052CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052CC
.text:000052CC ; =============== S U B R O U T I N E =======================================
.text:000052CC
.text:000052CC ; Attributes: bp-based frame
.text:000052CC
.text:000052CC ; void __thiscall CListFileTimeDef::Update(CListFileTimeDef *this, const struct CListFileTimeDef *)
.text:000052CC                 public ?Update@CListFileTimeDef@@QAEXABU1@@Z
.text:000052CC ?Update@CListFileTimeDef@@QAEXABU1@@Z proc near
.text:000052CC                                         ; CODE XREF: CListStat::Update(CListStat const &)+39p
.text:000052CC
.text:000052CC lpFileTime1     = dword ptr -4
.text:000052CC lpFileTime2     = dword ptr  8
.text:000052CC
.text:000052CC                 push    ebp
.text:000052CD                 mov     ebp, esp
.text:000052CF                 push    ecx
.text:000052D0                 push    esi
.text:000052D1                 mov     [ebp+lpFileTime1], 0CCCCCCCCh
.text:000052D8                 mov     [ebp+lpFileTime1], ecx
.text:000052DB                 mov     eax, [ebp+lpFileTime2]
.text:000052DE                 movzx   ecx, byte ptr [eax+8]
.text:000052E2                 test    ecx, ecx
.text:000052E4                 jz      short loc_5323
.text:000052E6                 mov     edx, [ebp+lpFileTime1]
.text:000052E9                 movzx   eax, byte ptr [edx+8]
.text:000052ED                 test    eax, eax
.text:000052EF                 jz      short loc_530C
.text:000052F1                 mov     esi, esp
.text:000052F3                 mov     ecx, [ebp+lpFileTime2]
.text:000052F6                 push    ecx             ; lpFileTime2
.text:000052F7                 mov     edx, [ebp+lpFileTime1]
.text:000052FA                 push    edx             ; lpFileTime1
.text:000052FB                 call    dword ptr ds:__imp__CompareFileTime@8 ; CompareFileTime(x,x)
.text:00005301                 cmp     esi, esp
.text:00005303                 call    __RTC_CheckEsp
.text:00005308                 test    eax, eax
.text:0000530A                 jge     short loc_5323
.text:0000530C
.text:0000530C loc_530C:                               ; CODE XREF: CListFileTimeDef::Update(CListFileTimeDef const &)+23j
.text:0000530C                 mov     eax, [ebp+lpFileTime2]
.text:0000530F                 mov     ecx, [eax]
.text:00005311                 mov     edx, [eax+4]
.text:00005314                 mov     eax, [ebp+lpFileTime1]
.text:00005317                 mov     [eax], ecx
.text:00005319                 mov     [eax+4], edx
.text:0000531C                 mov     ecx, [ebp+lpFileTime1]
.text:0000531F                 mov     byte ptr [ecx+8], 1
.text:00005323
.text:00005323 loc_5323:                               ; CODE XREF: CListFileTimeDef::Update(CListFileTimeDef const &)+18j
.text:00005323                                         ; CListFileTimeDef::Update(CListFileTimeDef const &)+3Ej
.text:00005323                 pop     esi
.text:00005324                 add     esp, 4
.text:00005327                 cmp     ebp, esp
.text:00005329                 call    __RTC_CheckEsp
.text:0000532E                 mov     esp, ebp
.text:00005330                 pop     ebp
.text:00005331                 retn    4
.text:00005331 ?Update@CListFileTimeDef@@QAEXABU1@@Z endp
.text:00005331
.text:00005331 _text           ends
.text:00005331
.text:00005334 ; ===========================================================================
.text:00005334
.text:00005334 ; Segment type: Pure code
.text:00005334 ; Segment permissions: Read/Execute
.text:00005334 _text           segment para public 'CODE' use32
.text:00005334                 assume cs:_text
.text:00005334                 ;org 5334h
.text:00005334 ; COMDAT (pick any)
.text:00005334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005334
.text:00005334 ; =============== S U B R O U T I N E =======================================
.text:00005334
.text:00005334 ; Attributes: bp-based frame
.text:00005334
.text:00005334 ; const wchar_t *__thiscall CCodecs::GetFormatNamePtr(CCodecs *this, int)
.text:00005334                 public ?GetFormatNamePtr@CCodecs@@QBEPB_WH@Z
.text:00005334 ?GetFormatNamePtr@CCodecs@@QBEPB_WH@Z proc near
.text:00005334                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+DDp
.text:00005334                                         ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+126p
.text:00005334
.text:00005334 var_8           = dword ptr -8
.text:00005334 var_4           = dword ptr -4
.text:00005334 arg_0           = dword ptr  8
.text:00005334
.text:00005334                 push    ebp
.text:00005335                 mov     ebp, esp
.text:00005337                 sub     esp, 8
.text:0000533A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005341                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005348                 mov     [ebp+var_4], ecx
.text:0000534B                 cmp     [ebp+arg_0], 0
.text:0000534F                 jge     short loc_535A
.text:00005351                 mov     [ebp+var_8], offset ??_C@_13GMDMCADD@?$AA?$CD?$AA?$AA@ ; `string'
.text:00005358                 jmp     short loc_5376
.text:0000535A ; ---------------------------------------------------------------------------
.text:0000535A
.text:0000535A loc_535A:                               ; CODE XREF: CCodecs::GetFormatNamePtr(int)+1Bj
.text:0000535A                 mov     eax, [ebp+arg_0]
.text:0000535D                 push    eax
.text:0000535E                 mov     ecx, [ebp+var_4]
.text:00005361                 add     ecx, 8
.text:00005364                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:00005369                 add     eax, 0Ch
.text:0000536C                 mov     ecx, eax
.text:0000536E                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00005373                 mov     [ebp+var_8], eax
.text:00005376
.text:00005376 loc_5376:                               ; CODE XREF: CCodecs::GetFormatNamePtr(int)+24j
.text:00005376                 mov     eax, [ebp+var_8]
.text:00005379                 add     esp, 8
.text:0000537C                 cmp     ebp, esp
.text:0000537E                 call    __RTC_CheckEsp
.text:00005383                 mov     esp, ebp
.text:00005385                 pop     ebp
.text:00005386                 retn    4
.text:00005386 ?GetFormatNamePtr@CCodecs@@QBEPB_WH@Z endp
.text:00005386
.text:00005386 ; ---------------------------------------------------------------------------
.text:00005389                 align 4
.text:00005389 _text           ends
.text:00005389
.rdata:0000538C ; ===========================================================================
.rdata:0000538C
.rdata:0000538C ; Segment type: Pure data
.rdata:0000538C ; Segment permissions: Read
.rdata:0000538C _rdata          segment dword public 'DATA' use32
.rdata:0000538C                 assume cs:_rdata
.rdata:0000538C                 ;org 538Ch
.rdata:0000538C ; COMDAT (pick any)
.rdata:0000538C                 public ??_C@_13GMDMCADD@?$AA?$CD?$AA?$AA@
.rdata:0000538C ; `string'
.rdata:0000538C ??_C@_13GMDMCADD@?$AA?$CD?$AA?$AA@ dd offset off_23
.rdata:0000538C                                         ; DATA XREF: CCodecs::GetFormatNamePtr(int)+1Do
.rdata:0000538C _rdata          ends
.rdata:0000538C
.text:00005390 ; ===========================================================================
.text:00005390
.text:00005390 ; Segment type: Pure code
.text:00005390 ; Segment permissions: Read/Execute
.text:00005390 _text           segment para public 'CODE' use32
.text:00005390                 assume cs:_text
.text:00005390                 ;org 5390h
.text:00005390 ; COMDAT (pick any)
.text:00005390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005390
.text:00005390 ; =============== S U B R O U T I N E =======================================
.text:00005390
.text:00005390 ; Attributes: bp-based frame
.text:00005390
.text:00005390 ; __int64 __thiscall CArc::GetGlobalOffset(CArc *__hidden this)
.text:00005390                 public ?GetGlobalOffset@CArc@@QBE_JXZ
.text:00005390 ?GetGlobalOffset@CArc@@QBE_JXZ proc near
.text:00005390                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+14Ap
.text:00005390
.text:00005390 var_4           = dword ptr -4
.text:00005390
.text:00005390                 push    ebp
.text:00005391                 mov     ebp, esp
.text:00005393                 push    ecx
.text:00005394                 push    esi
.text:00005395                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000539C                 mov     [ebp+var_4], ecx
.text:0000539F                 mov     eax, [ebp+var_4]
.text:000053A2                 mov     ecx, [ebp+var_4]
.text:000053A5                 mov     edx, [eax+0D0h]
.text:000053AB                 add     edx, [ecx+0A8h]
.text:000053B1                 mov     esi, [eax+0D4h]
.text:000053B7                 adc     esi, [ecx+0ACh]
.text:000053BD                 mov     eax, edx
.text:000053BF                 mov     edx, esi
.text:000053C1                 pop     esi
.text:000053C2                 mov     esp, ebp
.text:000053C4                 pop     ebp
.text:000053C5                 retn
.text:000053C5 ?GetGlobalOffset@CArc@@QBE_JXZ endp
.text:000053C5
.text:000053C5 ; ---------------------------------------------------------------------------
.text:000053C6                 align 4
.text:000053C6 _text           ends
.text:000053C6
.text:000053C8 ; ===========================================================================
.text:000053C8
.text:000053C8 ; Segment type: Pure code
.text:000053C8 ; Segment permissions: Read/Execute
.text:000053C8 _text           segment para public 'CODE' use32
.text:000053C8                 assume cs:_text
.text:000053C8                 ;org 53C8h
.text:000053C8 ; COMDAT (pick any)
.text:000053C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000053C8
.text:000053C8 ; =============== S U B R O U T I N E =======================================
.text:000053C8
.text:000053C8 ; Attributes: bp-based frame
.text:000053C8
.text:000053C8 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:000053C8                 public ?IsEmpty@UString@@QBE_NXZ
.text:000053C8 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)+5Ap
.text:000053C8                                         ; ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)+20p ...
.text:000053C8
.text:000053C8 var_4           = dword ptr -4
.text:000053C8
.text:000053C8                 push    ebp
.text:000053C9                 mov     ebp, esp
.text:000053CB                 push    ecx
.text:000053CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053D3                 mov     [ebp+var_4], ecx
.text:000053D6                 mov     eax, [ebp+var_4]
.text:000053D9                 xor     ecx, ecx
.text:000053DB                 cmp     dword ptr [eax+4], 0
.text:000053DF                 setz    cl
.text:000053E2                 mov     al, cl
.text:000053E4                 mov     esp, ebp
.text:000053E6                 pop     ebp
.text:000053E7                 retn
.text:000053E7 ?IsEmpty@UString@@QBE_NXZ endp
.text:000053E7
.text:000053E7 _text           ends
.text:000053E7
.text:000053E8 ; ===========================================================================
.text:000053E8
.text:000053E8 ; Segment type: Pure code
.text:000053E8 ; Segment permissions: Read/Execute
.text:000053E8 _text           segment para public 'CODE' use32
.text:000053E8                 assume cs:_text
.text:000053E8                 ;org 53E8h
.text:000053E8 ; COMDAT (pick any)
.text:000053E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000053E8
.text:000053E8 ; =============== S U B R O U T I N E =======================================
.text:000053E8
.text:000053E8 ; Attributes: bp-based frame
.text:000053E8
.text:000053E8 ; unsigned int __thiscall CArcErrorInfo::GetWarningFlags(CArcErrorInfo *__hidden this)
.text:000053E8                 public ?GetWarningFlags@CArcErrorInfo@@QBEIXZ
.text:000053E8 ?GetWarningFlags@CArcErrorInfo@@QBEIXZ proc near
.text:000053E8                                         ; CODE XREF: ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)+49p
.text:000053E8
.text:000053E8 var_8           = dword ptr -8
.text:000053E8 var_4           = dword ptr -4
.text:000053E8
.text:000053E8                 push    ebp
.text:000053E9                 mov     ebp, esp
.text:000053EB                 sub     esp, 8
.text:000053EE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000053F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053FC                 mov     [ebp+var_4], ecx
.text:000053FF                 mov     eax, [ebp+var_4]
.text:00005402                 mov     ecx, [eax+8]
.text:00005405                 mov     [ebp+var_8], ecx
.text:00005408                 mov     ecx, [ebp+var_4] ; this
.text:0000540B                 call    ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::NeedTailWarning(void)
.text:00005410                 movzx   edx, al
.text:00005413                 test    edx, edx
.text:00005415                 jz      short loc_542B
.text:00005417                 mov     eax, [ebp+var_4]
.text:0000541A                 mov     ecx, [eax+4]
.text:0000541D                 and     ecx, 40h
.text:00005420                 jnz     short loc_542B
.text:00005422                 mov     edx, [ebp+var_8]
.text:00005425                 or      edx, 40h
.text:00005428                 mov     [ebp+var_8], edx
.text:0000542B
.text:0000542B loc_542B:                               ; CODE XREF: CArcErrorInfo::GetWarningFlags(void)+2Dj
.text:0000542B                                         ; CArcErrorInfo::GetWarningFlags(void)+38j
.text:0000542B                 mov     eax, [ebp+var_8]
.text:0000542E                 add     esp, 8
.text:00005431                 cmp     ebp, esp
.text:00005433                 call    __RTC_CheckEsp
.text:00005438                 mov     esp, ebp
.text:0000543A                 pop     ebp
.text:0000543B                 retn
.text:0000543B ?GetWarningFlags@CArcErrorInfo@@QBEIXZ endp
.text:0000543B
.text:0000543B _text           ends
.text:0000543B
.text:0000543C ; ===========================================================================
.text:0000543C
.text:0000543C ; Segment type: Pure code
.text:0000543C ; Segment permissions: Read/Execute
.text:0000543C _text           segment para public 'CODE' use32
.text:0000543C                 assume cs:_text
.text:0000543C                 ;org 543Ch
.text:0000543C ; COMDAT (pick any)
.text:0000543C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000543C
.text:0000543C ; =============== S U B R O U T I N E =======================================
.text:0000543C
.text:0000543C ; Attributes: bp-based frame
.text:0000543C
.text:0000543C ; bool __thiscall CArcErrorInfo::NeedTailWarning(CArcErrorInfo *__hidden this)
.text:0000543C                 public ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ
.text:0000543C ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ proc near
.text:0000543C                                         ; CODE XREF: CArcErrorInfo::GetWarningFlags(void)+23p
.text:0000543C                                         ; CArcErrorInfo::AreThereWarnings(void)+23p
.text:0000543C
.text:0000543C var_8           = dword ptr -8
.text:0000543C var_4           = dword ptr -4
.text:0000543C
.text:0000543C                 push    ebp
.text:0000543D                 mov     ebp, esp
.text:0000543F                 sub     esp, 8
.text:00005442                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005449                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005450                 mov     [ebp+var_4], ecx
.text:00005453                 mov     eax, [ebp+var_4]
.text:00005456                 movzx   ecx, byte ptr [eax+2]
.text:0000545A                 test    ecx, ecx
.text:0000545C                 jnz     short loc_5471
.text:0000545E                 mov     edx, [ebp+var_4]
.text:00005461                 movzx   eax, byte ptr [edx]
.text:00005464                 test    eax, eax
.text:00005466                 jz      short loc_5471
.text:00005468                 mov     [ebp+var_8], 1
.text:0000546F                 jmp     short loc_5478
.text:00005471 ; ---------------------------------------------------------------------------
.text:00005471
.text:00005471 loc_5471:                               ; CODE XREF: CArcErrorInfo::NeedTailWarning(void)+20j
.text:00005471                                         ; CArcErrorInfo::NeedTailWarning(void)+2Aj
.text:00005471                 mov     [ebp+var_8], 0
.text:00005478
.text:00005478 loc_5478:                               ; CODE XREF: CArcErrorInfo::NeedTailWarning(void)+33j
.text:00005478                 mov     al, byte ptr [ebp+var_8]
.text:0000547B                 mov     esp, ebp
.text:0000547D                 pop     ebp
.text:0000547E                 retn
.text:0000547E ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ endp
.text:0000547E
.text:0000547E ; ---------------------------------------------------------------------------
.text:0000547F                 align 10h
.text:0000547F _text           ends
.text:0000547F
.text:00005480 ; ===========================================================================
.text:00005480
.text:00005480 ; Segment type: Pure code
.text:00005480 ; Segment permissions: Read/Execute
.text:00005480 _text           segment para public 'CODE' use32
.text:00005480                 assume cs:_text
.text:00005480                 ;org 5480h
.text:00005480 ; COMDAT (pick any)
.text:00005480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005480
.text:00005480 ; =============== S U B R O U T I N E =======================================
.text:00005480
.text:00005480 ; Attributes: bp-based frame
.text:00005480
.text:00005480 ; unsigned int __thiscall CArcErrorInfo::GetErrorFlags(CArcErrorInfo *__hidden this)
.text:00005480                 public ?GetErrorFlags@CArcErrorInfo@@QBEIXZ
.text:00005480 ?GetErrorFlags@CArcErrorInfo@@QBEIXZ proc near
.text:00005480                                         ; CODE XREF: ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)+6p
.text:00005480
.text:00005480 var_8           = dword ptr -8
.text:00005480 var_4           = dword ptr -4
.text:00005480
.text:00005480                 push    ebp
.text:00005481                 mov     ebp, esp
.text:00005483                 sub     esp, 8
.text:00005486                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000548D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005494                 mov     [ebp+var_4], ecx
.text:00005497                 mov     eax, [ebp+var_4]
.text:0000549A                 mov     ecx, [eax+4]
.text:0000549D                 mov     [ebp+var_8], ecx
.text:000054A0                 mov     edx, [ebp+var_4]
.text:000054A3                 movzx   eax, byte ptr [edx+1]
.text:000054A7                 test    eax, eax
.text:000054A9                 jz      short loc_54B4
.text:000054AB                 mov     ecx, [ebp+var_8]
.text:000054AE                 or      ecx, 20h
.text:000054B1                 mov     [ebp+var_8], ecx
.text:000054B4
.text:000054B4 loc_54B4:                               ; CODE XREF: CArcErrorInfo::GetErrorFlags(void)+29j
.text:000054B4                 mov     eax, [ebp+var_8]
.text:000054B7                 mov     esp, ebp
.text:000054B9                 pop     ebp
.text:000054BA                 retn
.text:000054BA ?GetErrorFlags@CArcErrorInfo@@QBEIXZ endp
.text:000054BA
.text:000054BA ; ---------------------------------------------------------------------------
.text:000054BB                 align 4
.text:000054BB _text           ends
.text:000054BB
.text:000054BC ; ===========================================================================
.text:000054BC
.text:000054BC ; Segment type: Pure code
.text:000054BC ; Segment permissions: Read/Execute
.text:000054BC _text           segment para public 'CODE' use32
.text:000054BC                 assume cs:_text
.text:000054BC                 ;org 54BCh
.text:000054BC ; COMDAT (pick any)
.text:000054BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054BC
.text:000054BC ; =============== S U B R O U T I N E =======================================
.text:000054BC
.text:000054BC ; Attributes: bp-based frame
.text:000054BC
.text:000054BC ; __stdcall HRESULT_FROM_WIN32(x)
.text:000054BC                 public _HRESULT_FROM_WIN32@4
.text:000054BC _HRESULT_FROM_WIN32@4 proc near         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+217p
.text:000054BC
.text:000054BC var_4           = dword ptr -4
.text:000054BC arg_0           = dword ptr  8
.text:000054BC
.text:000054BC                 push    ebp
.text:000054BD                 mov     ebp, esp
.text:000054BF                 push    ecx
.text:000054C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054C7                 cmp     [ebp+arg_0], 0
.text:000054CB                 jg      short loc_54D5
.text:000054CD                 mov     eax, [ebp+arg_0]
.text:000054D0                 mov     [ebp+var_4], eax
.text:000054D3                 jmp     short loc_54ED
.text:000054D5 ; ---------------------------------------------------------------------------
.text:000054D5
.text:000054D5 loc_54D5:                               ; CODE XREF: HRESULT_FROM_WIN32(x)+Fj
.text:000054D5                 mov     ecx, [ebp+arg_0]
.text:000054D8                 and     ecx, 0FFFFh
.text:000054DE                 or      ecx, 70000h
.text:000054E4                 or      ecx, 80000000h
.text:000054EA                 mov     [ebp+var_4], ecx
.text:000054ED
.text:000054ED loc_54ED:                               ; CODE XREF: HRESULT_FROM_WIN32(x)+17j
.text:000054ED                 mov     eax, [ebp+var_4]
.text:000054F0                 mov     esp, ebp
.text:000054F2                 pop     ebp
.text:000054F3                 retn    4
.text:000054F3 _HRESULT_FROM_WIN32@4 endp
.text:000054F3
.text:000054F3 ; ---------------------------------------------------------------------------
.text:000054F6                 align 4
.text:000054F6 _text           ends
.text:000054F6
.text:000054F8 ; ===========================================================================
.text:000054F8
.text:000054F8 ; Segment type: Pure code
.text:000054F8 ; Segment permissions: Read/Execute
.text:000054F8 _text           segment para public 'CODE' use32
.text:000054F8                 assume cs:_text
.text:000054F8                 ;org 54F8h
.text:000054F8 ; COMDAT (pick any)
.text:000054F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054F8
.text:000054F8 ; =============== S U B R O U T I N E =======================================
.text:000054F8
.text:000054F8 ; Attributes: bp-based frame
.text:000054F8
.text:000054F8 ; bool __thiscall NWindows::NFile::NFind::CFileInfoBase::IsDir(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:000054F8                 public ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ
.text:000054F8 ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ proc near
.text:000054F8                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+2FCp
.text:000054F8
.text:000054F8 var_4           = dword ptr -4
.text:000054F8
.text:000054F8                 push    ebp
.text:000054F9                 mov     ebp, esp
.text:000054FB                 push    ecx
.text:000054FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005503                 mov     [ebp+var_4], ecx
.text:00005506                 push    10h             ; unsigned int
.text:00005508                 mov     ecx, [ebp+var_4] ; this
.text:0000550B                 call    ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask(uint)
.text:00005510                 add     esp, 4
.text:00005513                 cmp     ebp, esp
.text:00005515                 call    __RTC_CheckEsp
.text:0000551A                 mov     esp, ebp
.text:0000551C                 pop     ebp
.text:0000551D                 retn
.text:0000551D ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ endp
.text:0000551D
.text:0000551D ; ---------------------------------------------------------------------------
.text:0000551E                 align 10h
.text:0000551E _text           ends
.text:0000551E
.text:00005520 ; ===========================================================================
.text:00005520
.text:00005520 ; Segment type: Pure code
.text:00005520 ; Segment permissions: Read/Execute
.text:00005520 _text           segment para public 'CODE' use32
.text:00005520                 assume cs:_text
.text:00005520                 ;org 5520h
.text:00005520 ; COMDAT (pick any)
.text:00005520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005520
.text:00005520 ; =============== S U B R O U T I N E =======================================
.text:00005520
.text:00005520 ; Attributes: bp-based frame
.text:00005520
.text:00005520 ; bool __thiscall NWindows::NFile::NFind::CFileInfoBase::MatchesMask(NWindows::NFile::NFind::CFileInfoBase *this, unsigned int)
.text:00005520                 public ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z
.text:00005520 ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z proc near
.text:00005520                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfoBase::IsDir(void)+13p
.text:00005520
.text:00005520 var_4           = dword ptr -4
.text:00005520 arg_0           = dword ptr  8
.text:00005520
.text:00005520                 push    ebp
.text:00005521                 mov     ebp, esp
.text:00005523                 push    ecx
.text:00005524                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000552B                 mov     [ebp+var_4], ecx
.text:0000552E                 mov     eax, [ebp+var_4]
.text:00005531                 mov     eax, [eax+20h]
.text:00005534                 and     eax, [ebp+arg_0]
.text:00005537                 neg     eax
.text:00005539                 sbb     eax, eax
.text:0000553B                 neg     eax
.text:0000553D                 mov     esp, ebp
.text:0000553F                 pop     ebp
.text:00005540                 retn    4
.text:00005540 ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z endp
.text:00005540
.text:00005540 ; ---------------------------------------------------------------------------
.text:00005543                 align 4
.text:00005543 _text           ends
.text:00005543
.text:00005544 ; ===========================================================================
.text:00005544
.text:00005544 ; Segment type: Pure code
.text:00005544 ; Segment permissions: Read/Execute
.text:00005544 _text           segment para public 'CODE' use32
.text:00005544                 assume cs:_text
.text:00005544                 ;org 5544h
.text:00005544 ; COMDAT (pick any)
.text:00005544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005544
.text:00005544 ; =============== S U B R O U T I N E =======================================
.text:00005544
.text:00005544 ; Attributes: bp-based frame
.text:00005544
.text:00005544 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfo::CFileInfo(NWindows::NFile::NFind::CFileInfo *__hidden this)
.text:00005544                 public ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
.text:00005544 ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00005544                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1BDp
.text:00005544
.text:00005544 var_4           = dword ptr -4
.text:00005544
.text:00005544                 push    ebp
.text:00005545                 mov     ebp, esp
.text:00005547                 push    ecx
.text:00005548                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000554F                 mov     [ebp+var_4], ecx
.text:00005552                 mov     ecx, [ebp+var_4] ; this
.text:00005555                 call    ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(void)
.text:0000555A                 mov     ecx, [ebp+var_4]
.text:0000555D                 add     ecx, 28h ; '('
.text:00005560                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005565                 mov     eax, [ebp+var_4]
.text:00005568                 add     esp, 4
.text:0000556B                 cmp     ebp, esp
.text:0000556D                 call    __RTC_CheckEsp
.text:00005572                 mov     esp, ebp
.text:00005574                 pop     ebp
.text:00005575                 retn
.text:00005575 ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:00005575
.text:00005575 ; ---------------------------------------------------------------------------
.text:00005576                 align 4
.text:00005576 _text           ends
.text:00005576
.text:00005578 ; ===========================================================================
.text:00005578
.text:00005578 ; Segment type: Pure code
.text:00005578 ; Segment permissions: Read/Execute
.text:00005578 _text           segment para public 'CODE' use32
.text:00005578                 assume cs:_text
.text:00005578                 ;org 5578h
.text:00005578 ; COMDAT (pick any)
.text:00005578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005578
.text:00005578 ; =============== S U B R O U T I N E =======================================
.text:00005578
.text:00005578 ; Attributes: bp-based frame
.text:00005578
.text:00005578 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:00005578                 public ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ
.text:00005578 ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00005578                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::CFileInfo(void)+11p
.text:00005578
.text:00005578 var_4           = dword ptr -4
.text:00005578
.text:00005578                 push    ebp
.text:00005579                 mov     ebp, esp
.text:0000557B                 push    ecx
.text:0000557C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005583                 mov     [ebp+var_4], ecx
.text:00005586                 mov     ecx, [ebp+var_4] ; this
.text:00005589                 call    ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase(void)
.text:0000558E                 mov     eax, [ebp+var_4]
.text:00005591                 add     esp, 4
.text:00005594                 cmp     ebp, esp
.text:00005596                 call    __RTC_CheckEsp
.text:0000559B                 mov     esp, ebp
.text:0000559D                 pop     ebp
.text:0000559E                 retn
.text:0000559E ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ endp
.text:0000559E
.text:0000559E ; ---------------------------------------------------------------------------
.text:0000559F                 align 10h
.text:0000559F _text           ends
.text:0000559F
.text:000055A0 ; ===========================================================================
.text:000055A0
.text:000055A0 ; Segment type: Pure code
.text:000055A0 ; Segment permissions: Read/Execute
.text:000055A0 _text           segment para public 'CODE' use32
.text:000055A0                 assume cs:_text
.text:000055A0                 ;org 55A0h
.text:000055A0 ; COMDAT (pick any)
.text:000055A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000055A0
.text:000055A0 ; =============== S U B R O U T I N E =======================================
.text:000055A0
.text:000055A0 ; Attributes: bp-based frame
.text:000055A0
.text:000055A0 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfo::~CFileInfo(NWindows::NFile::NFind::CFileInfo *__hidden this)
.text:000055A0                 public ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
.text:000055A0 ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:000055A0                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+2ECp
.text:000055A0                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+38Bp ...
.text:000055A0
.text:000055A0 var_4           = dword ptr -4
.text:000055A0
.text:000055A0                 push    ebp
.text:000055A1                 mov     ebp, esp
.text:000055A3                 push    ecx
.text:000055A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055AB                 mov     [ebp+var_4], ecx
.text:000055AE                 mov     ecx, [ebp+var_4]
.text:000055B1                 add     ecx, 28h ; '('  ; this
.text:000055B4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000055B9                 add     esp, 4
.text:000055BC                 cmp     ebp, esp
.text:000055BE                 call    __RTC_CheckEsp
.text:000055C3                 mov     esp, ebp
.text:000055C5                 pop     ebp
.text:000055C6                 retn
.text:000055C6 ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:000055C6
.text:000055C6 ; ---------------------------------------------------------------------------
.text:000055C7                 align 4
.text:000055C7 _text           ends
.text:000055C7
.text:000055C8 ; ===========================================================================
.text:000055C8
.text:000055C8 ; Segment type: Pure code
.text:000055C8 ; Segment permissions: Read/Execute
.text:000055C8 _text           segment para public 'CODE' use32
.text:000055C8                 assume cs:_text
.text:000055C8                 ;org 55C8h
.text:000055C8 ; COMDAT (pick any)
.text:000055C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000055C8
.text:000055C8 ; =============== S U B R O U T I N E =======================================
.text:000055C8
.text:000055C8 ; Attributes: bp-based frame
.text:000055C8
.text:000055C8 ; public: __thiscall COpenOptions::COpenOptions(void)
.text:000055C8                 public ??0COpenOptions@@QAE@XZ
.text:000055C8 ??0COpenOptions@@QAE@XZ proc near       ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+437p
.text:000055C8
.text:000055C8 var_4           = dword ptr -4
.text:000055C8
.text:000055C8                 push    ebp
.text:000055C9                 mov     ebp, esp
.text:000055CB                 push    ecx
.text:000055CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055D3                 mov     [ebp+var_4], ecx
.text:000055D6                 mov     eax, [ebp+var_4]
.text:000055D9                 mov     dword ptr [eax], 0
.text:000055DF                 mov     ecx, [ebp+var_4]
.text:000055E2                 add     ecx, 8          ; this
.text:000055E5                 call    ??0COpenType@@QAE@XZ ; COpenType::COpenType(void)
.text:000055EA                 mov     ecx, [ebp+var_4]
.text:000055ED                 mov     dword ptr [ecx+28h], 0
.text:000055F4                 mov     edx, [ebp+var_4]
.text:000055F7                 mov     dword ptr [edx+2Ch], 0
.text:000055FE                 mov     eax, [ebp+var_4]
.text:00005601                 mov     dword ptr [eax+30h], 0
.text:00005608                 mov     ecx, [ebp+var_4]
.text:0000560B                 mov     dword ptr [ecx+34h], 0
.text:00005612                 mov     edx, [ebp+var_4]
.text:00005615                 mov     dword ptr [edx+38h], 0
.text:0000561C                 mov     eax, [ebp+var_4]
.text:0000561F                 mov     dword ptr [eax+3Ch], 0
.text:00005626                 mov     ecx, [ebp+var_4]
.text:00005629                 mov     byte ptr [ecx+44h], 0
.text:0000562D                 mov     ecx, [ebp+var_4]
.text:00005630                 add     ecx, 48h ; 'H'
.text:00005633                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005638                 mov     eax, [ebp+var_4]
.text:0000563B                 add     esp, 4
.text:0000563E                 cmp     ebp, esp
.text:00005640                 call    __RTC_CheckEsp
.text:00005645                 mov     esp, ebp
.text:00005647                 pop     ebp
.text:00005648                 retn
.text:00005648 ??0COpenOptions@@QAE@XZ endp
.text:00005648
.text:00005648 ; ---------------------------------------------------------------------------
.text:00005649                 align 4
.text:00005649 _text           ends
.text:00005649
.text:0000564C ; ===========================================================================
.text:0000564C
.text:0000564C ; Segment type: Pure code
.text:0000564C ; Segment permissions: Read/Execute
.text:0000564C _text           segment para public 'CODE' use32
.text:0000564C                 assume cs:_text
.text:0000564C                 ;org 564Ch
.text:0000564C ; COMDAT (pick any)
.text:0000564C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000564C
.text:0000564C ; =============== S U B R O U T I N E =======================================
.text:0000564C
.text:0000564C ; Attributes: bp-based frame
.text:0000564C
.text:0000564C ; _DWORD __thiscall COpenType::COpenType(COpenType *__hidden this)
.text:0000564C                 public ??0COpenType@@QAE@XZ
.text:0000564C ??0COpenType@@QAE@XZ proc near          ; CODE XREF: COpenOptions::COpenOptions(void)+1Dp
.text:0000564C
.text:0000564C var_4           = dword ptr -4
.text:0000564C
.text:0000564C                 push    ebp
.text:0000564D                 mov     ebp, esp
.text:0000564F                 push    ecx
.text:00005650                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005657                 mov     [ebp+var_4], ecx
.text:0000565A                 mov     eax, [ebp+var_4]
.text:0000565D                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00005663                 mov     ecx, [ebp+var_4]
.text:00005666                 add     ecx, 4          ; this
.text:00005669                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:0000566E                 mov     ecx, [ebp+var_4]
.text:00005671                 add     ecx, 7          ; this
.text:00005674                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:00005679                 mov     ecx, [ebp+var_4]
.text:0000567C                 add     ecx, 0Ah        ; this
.text:0000567F                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:00005684                 mov     ecx, [ebp+var_4]
.text:00005687                 add     ecx, 0Dh        ; this
.text:0000568A                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:0000568F                 mov     ecx, [ebp+var_4]
.text:00005692                 mov     byte ptr [ecx+10h], 1
.text:00005696                 mov     edx, [ebp+var_4]
.text:00005699                 mov     byte ptr [edx+11h], 1
.text:0000569D                 mov     eax, [ebp+var_4]
.text:000056A0                 mov     byte ptr [eax+12h], 0
.text:000056A4                 mov     ecx, [ebp+var_4]
.text:000056A7                 mov     byte ptr [ecx+13h], 0
.text:000056AB                 mov     edx, [ebp+var_4]
.text:000056AE                 mov     byte ptr [edx+14h], 0
.text:000056B2                 mov     eax, [ebp+var_4]
.text:000056B5                 mov     byte ptr [eax+15h], 0
.text:000056B9                 mov     ecx, [ebp+var_4]
.text:000056BC                 mov     dword ptr [ecx+18h], 0
.text:000056C3                 mov     dword ptr [ecx+1Ch], 0
.text:000056CA                 mov     edx, [ebp+var_4]
.text:000056CD                 mov     byte ptr [edx+4], 1
.text:000056D1                 mov     eax, [ebp+var_4]
.text:000056D4                 mov     byte ptr [eax+5], 1
.text:000056D8                 mov     ecx, [ebp+var_4]
.text:000056DB                 mov     byte ptr [ecx+6], 1
.text:000056DF                 mov     edx, [ebp+var_4]
.text:000056E2                 mov     byte ptr [edx+7], 1
.text:000056E6                 mov     eax, [ebp+var_4]
.text:000056E9                 mov     byte ptr [eax+0Eh], 1
.text:000056ED                 mov     ecx, [ebp+var_4]
.text:000056F0                 mov     byte ptr [ecx+0Fh], 1
.text:000056F4                 mov     edx, [ebp+var_4]
.text:000056F7                 mov     byte ptr [edx+0Dh], 1
.text:000056FB                 mov     eax, [ebp+var_4]
.text:000056FE                 add     esp, 4
.text:00005701                 cmp     ebp, esp
.text:00005703                 call    __RTC_CheckEsp
.text:00005708                 mov     esp, ebp
.text:0000570A                 pop     ebp
.text:0000570B                 retn
.text:0000570B ??0COpenType@@QAE@XZ endp
.text:0000570B
.text:0000570B _text           ends
.text:0000570B
.text:0000570C ; ===========================================================================
.text:0000570C
.text:0000570C ; Segment type: Pure code
.text:0000570C ; Segment permissions: Read/Execute
.text:0000570C _text           segment para public 'CODE' use32
.text:0000570C                 assume cs:_text
.text:0000570C                 ;org 570Ch
.text:0000570C ; COMDAT (pick any)
.text:0000570C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000570C
.text:0000570C ; =============== S U B R O U T I N E =======================================
.text:0000570C
.text:0000570C ; Attributes: bp-based frame
.text:0000570C
.text:0000570C ; _DWORD __thiscall COpenSpecFlags::COpenSpecFlags(COpenSpecFlags *__hidden this)
.text:0000570C                 public ??0COpenSpecFlags@@QAE@XZ
.text:0000570C ??0COpenSpecFlags@@QAE@XZ proc near     ; CODE XREF: COpenType::COpenType(void)+1Dp
.text:0000570C                                         ; COpenType::COpenType(void)+28p ...
.text:0000570C
.text:0000570C var_4           = dword ptr -4
.text:0000570C
.text:0000570C                 push    ebp
.text:0000570D                 mov     ebp, esp
.text:0000570F                 push    ecx
.text:00005710                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005717                 mov     [ebp+var_4], ecx
.text:0000571A                 mov     eax, [ebp+var_4]
.text:0000571D                 mov     byte ptr [eax], 0
.text:00005720                 mov     ecx, [ebp+var_4]
.text:00005723                 mov     byte ptr [ecx+1], 0
.text:00005727                 mov     edx, [ebp+var_4]
.text:0000572A                 mov     byte ptr [edx+2], 0
.text:0000572E                 mov     eax, [ebp+var_4]
.text:00005731                 mov     esp, ebp
.text:00005733                 pop     ebp
.text:00005734                 retn
.text:00005734 ??0COpenSpecFlags@@QAE@XZ endp
.text:00005734
.text:00005734 ; ---------------------------------------------------------------------------
.text:00005735                 align 4
.text:00005735 _text           ends
.text:00005735
.text:00005738 ; ===========================================================================
.text:00005738
.text:00005738 ; Segment type: Pure code
.text:00005738 ; Segment permissions: Read/Execute
.text:00005738 _text           segment para public 'CODE' use32
.text:00005738                 assume cs:_text
.text:00005738                 ;org 5738h
.text:00005738 ; COMDAT (pick any)
.text:00005738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005738
.text:00005738 ; =============== S U B R O U T I N E =======================================
.text:00005738
.text:00005738 ; Attributes: bp-based frame
.text:00005738
.text:00005738 ; bool __thiscall CArcErrorInfo::AreThereErrors(CArcErrorInfo *__hidden this)
.text:00005738                 public ?AreThereErrors@CArcErrorInfo@@QBE_NXZ
.text:00005738 ?AreThereErrors@CArcErrorInfo@@QBE_NXZ proc near
.text:00005738                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+7A6p
.text:00005738
.text:00005738 var_8           = dword ptr -8
.text:00005738 var_4           = dword ptr -4
.text:00005738
.text:00005738                 push    ebp
.text:00005739                 mov     ebp, esp
.text:0000573B                 sub     esp, 8
.text:0000573E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005745                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000574C                 mov     [ebp+var_4], ecx
.text:0000574F                 mov     eax, [ebp+var_4]
.text:00005752                 cmp     dword ptr [eax+4], 0
.text:00005756                 jnz     short loc_576C
.text:00005758                 mov     ecx, [ebp+var_4]
.text:0000575B                 movzx   edx, byte ptr [ecx+1]
.text:0000575F                 test    edx, edx
.text:00005761                 jnz     short loc_576C
.text:00005763                 mov     [ebp+var_8], 0
.text:0000576A                 jmp     short loc_5773
.text:0000576C ; ---------------------------------------------------------------------------
.text:0000576C
.text:0000576C loc_576C:                               ; CODE XREF: CArcErrorInfo::AreThereErrors(void)+1Ej
.text:0000576C                                         ; CArcErrorInfo::AreThereErrors(void)+29j
.text:0000576C                 mov     [ebp+var_8], 1
.text:00005773
.text:00005773 loc_5773:                               ; CODE XREF: CArcErrorInfo::AreThereErrors(void)+32j
.text:00005773                 mov     al, byte ptr [ebp+var_8]
.text:00005776                 mov     esp, ebp
.text:00005778                 pop     ebp
.text:00005779                 retn
.text:00005779 ?AreThereErrors@CArcErrorInfo@@QBE_NXZ endp
.text:00005779
.text:00005779 ; ---------------------------------------------------------------------------
.text:0000577A                 align 4
.text:0000577A _text           ends
.text:0000577A
.text:0000577C ; ===========================================================================
.text:0000577C
.text:0000577C ; Segment type: Pure code
.text:0000577C ; Segment permissions: Read/Execute
.text:0000577C _text           segment para public 'CODE' use32
.text:0000577C                 assume cs:_text
.text:0000577C                 ;org 577Ch
.text:0000577C ; COMDAT (pick any)
.text:0000577C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000577C
.text:0000577C ; =============== S U B R O U T I N E =======================================
.text:0000577C
.text:0000577C ; Attributes: bp-based frame
.text:0000577C
.text:0000577C ; bool __thiscall CArcErrorInfo::AreThereWarnings(CArcErrorInfo *__hidden this)
.text:0000577C                 public ?AreThereWarnings@CArcErrorInfo@@QBE_NXZ
.text:0000577C ?AreThereWarnings@CArcErrorInfo@@QBE_NXZ proc near
.text:0000577C                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+75Cp
.text:0000577C
.text:0000577C var_8           = dword ptr -8
.text:0000577C var_4           = dword ptr -4
.text:0000577C
.text:0000577C                 push    ebp
.text:0000577D                 mov     ebp, esp
.text:0000577F                 sub     esp, 8
.text:00005782                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005789                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005790                 mov     [ebp+var_4], ecx
.text:00005793                 mov     eax, [ebp+var_4]
.text:00005796                 cmp     dword ptr [eax+8], 0
.text:0000579A                 jnz     short loc_57B4
.text:0000579C                 mov     ecx, [ebp+var_4] ; this
.text:0000579F                 call    ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::NeedTailWarning(void)
.text:000057A4                 movzx   ecx, al
.text:000057A7                 test    ecx, ecx
.text:000057A9                 jnz     short loc_57B4
.text:000057AB                 mov     [ebp+var_8], 0
.text:000057B2                 jmp     short loc_57BB
.text:000057B4 ; ---------------------------------------------------------------------------
.text:000057B4
.text:000057B4 loc_57B4:                               ; CODE XREF: CArcErrorInfo::AreThereWarnings(void)+1Ej
.text:000057B4                                         ; CArcErrorInfo::AreThereWarnings(void)+2Dj
.text:000057B4                 mov     [ebp+var_8], 1
.text:000057BB
.text:000057BB loc_57BB:                               ; CODE XREF: CArcErrorInfo::AreThereWarnings(void)+36j
.text:000057BB                 mov     al, byte ptr [ebp+var_8]
.text:000057BE                 add     esp, 8
.text:000057C1                 cmp     ebp, esp
.text:000057C3                 call    __RTC_CheckEsp
.text:000057C8                 mov     esp, ebp
.text:000057CA                 pop     ebp
.text:000057CB                 retn
.text:000057CB ?AreThereWarnings@CArcErrorInfo@@QBE_NXZ endp
.text:000057CB
.text:000057CB _text           ends
.text:000057CB
.text:000057CC ; ===========================================================================
.text:000057CC
.text:000057CC ; Segment type: Pure code
.text:000057CC ; Segment permissions: Read/Execute
.text:000057CC _text           segment para public 'CODE' use32
.text:000057CC                 assume cs:_text
.text:000057CC                 ;org 57CCh
.text:000057CC ; COMDAT (pick any)
.text:000057CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000057CC
.text:000057CC ; =============== S U B R O U T I N E =======================================
.text:000057CC
.text:000057CC ; Attributes: bp-based frame
.text:000057CC
.text:000057CC ; _DWORD __thiscall CReadArcItem::CReadArcItem(CReadArcItem *__hidden this)
.text:000057CC                 public ??0CReadArcItem@@QAE@XZ
.text:000057CC ??0CReadArcItem@@QAE@XZ proc near       ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+C06p
.text:000057CC
.text:000057CC var_10          = dword ptr -10h
.text:000057CC var_C           = dword ptr -0Ch
.text:000057CC var_4           = dword ptr -4
.text:000057CC
.text:000057CC                 push    ebp
.text:000057CD                 mov     ebp, esp
.text:000057CF                 push    0FFFFFFFFh
.text:000057D1                 push    offset __ehhandler$??0CReadArcItem@@QAE@XZ
.text:000057D6                 mov     eax, large fs:0
.text:000057DC                 push    eax
.text:000057DD                 push    ecx
.text:000057DE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000057E5                 mov     eax, dword ptr ds:___security_cookie
.text:000057EA                 xor     eax, ebp
.text:000057EC                 push    eax
.text:000057ED                 lea     eax, [ebp+var_C]
.text:000057F0                 mov     large fs:0, eax
.text:000057F6                 mov     [ebp+var_10], ecx
.text:000057F9                 mov     ecx, [ebp+var_10]
.text:000057FC                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005801                 mov     [ebp+var_4], 0
.text:00005808                 mov     ecx, [ebp+var_10]
.text:0000580B                 add     ecx, 0Ch
.text:0000580E                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00005813                 mov     byte ptr [ebp+var_4], 1
.text:00005817                 mov     ecx, [ebp+var_10]
.text:0000581A                 add     ecx, 18h
.text:0000581D                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005822                 mov     byte ptr [ebp+var_4], 2
.text:00005826                 mov     ecx, [ebp+var_10]
.text:00005829                 add     ecx, 24h ; '$'
.text:0000582C                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005831                 mov     eax, [ebp+var_10]
.text:00005834                 mov     byte ptr [eax+31h], 0
.text:00005838                 mov     ecx, [ebp+var_10]
.text:0000583B                 mov     byte ptr [ecx+38h], 0
.text:0000583F                 mov     edx, [ebp+var_10]
.text:00005842                 mov     dword ptr [edx+3Ch], 0FFFFFFFFh
.text:00005849                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005850                 mov     eax, [ebp+var_10]
.text:00005853                 mov     ecx, [ebp+var_C]
.text:00005856                 mov     large fs:0, ecx
.text:0000585D                 pop     ecx
.text:0000585E                 add     esp, 10h
.text:00005861                 cmp     ebp, esp
.text:00005863                 call    __RTC_CheckEsp
.text:00005868                 mov     esp, ebp
.text:0000586A                 pop     ebp
.text:0000586B                 retn
.text:0000586B ??0CReadArcItem@@QAE@XZ endp
.text:0000586B
.text:0000586B _text           ends
.text:0000586B
.text$x:0000586C ; ===========================================================================
.text$x:0000586C
.text$x:0000586C ; Segment type: Pure code
.text$x:0000586C ; Segment permissions: Read/Execute
.text$x:0000586C _text$x         segment para public 'CODE' use32
.text$x:0000586C                 assume cs:_text$x
.text$x:0000586C                 ;org 586Ch
.text$x:0000586C ; COMDAT (pick associative to section at 57CC)
.text$x:0000586C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000586C
.text$x:0000586C ; =============== S U B R O U T I N E =======================================
.text$x:0000586C
.text$x:0000586C
.text$x:0000586C __unwindfunclet$??0CReadArcItem@@QAE@XZ$0 proc near
.text$x:0000586C                                         ; DATA XREF: .xdata$x:000058ACo
.text$x:0000586C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000586F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000586F __unwindfunclet$??0CReadArcItem@@QAE@XZ$0 endp
.text$x:0000586F
.text$x:00005874
.text$x:00005874 ; =============== S U B R O U T I N E =======================================
.text$x:00005874
.text$x:00005874
.text$x:00005874 __unwindfunclet$??0CReadArcItem@@QAE@XZ$1 proc near
.text$x:00005874                                         ; DATA XREF: .xdata$x:000058B4o
.text$x:00005874                 mov     ecx, [ebp-10h]
.text$x:00005877                 add     ecx, 0Ch
.text$x:0000587A                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:0000587A __unwindfunclet$??0CReadArcItem@@QAE@XZ$1 endp
.text$x:0000587A
.text$x:0000587F
.text$x:0000587F ; =============== S U B R O U T I N E =======================================
.text$x:0000587F
.text$x:0000587F
.text$x:0000587F __unwindfunclet$??0CReadArcItem@@QAE@XZ$2 proc near
.text$x:0000587F                                         ; DATA XREF: .xdata$x:000058BCo
.text$x:0000587F                 mov     ecx, [ebp-10h]
.text$x:00005882                 add     ecx, 18h        ; this
.text$x:00005885                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005885 __unwindfunclet$??0CReadArcItem@@QAE@XZ$2 endp
.text$x:00005885
.text$x:0000588A
.text$x:0000588A ; =============== S U B R O U T I N E =======================================
.text$x:0000588A
.text$x:0000588A
.text$x:0000588A __ehhandler$??0CReadArcItem@@QAE@XZ proc near
.text$x:0000588A                                         ; DATA XREF: CReadArcItem::CReadArcItem(void)+5o
.text$x:0000588A
.text$x:0000588A arg_4           = dword ptr  8
.text$x:0000588A
.text$x:0000588A                 mov     edx, [esp+arg_4]
.text$x:0000588E                 lea     eax, [edx+0Ch]
.text$x:00005891                 mov     ecx, [edx-8]
.text$x:00005894                 xor     ecx, eax
.text$x:00005896                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000589B                 mov     eax, offset __ehfuncinfo$??0CReadArcItem@@QAE@XZ
.text$x:000058A0                 jmp     ___CxxFrameHandler3
.text$x:000058A0 __ehhandler$??0CReadArcItem@@QAE@XZ endp
.text$x:000058A0
.text$x:000058A0 ; ---------------------------------------------------------------------------
.text$x:000058A5                 align 4
.text$x:000058A5 _text$x         ends
.text$x:000058A5
.xdata$x:000058A8 ; ===========================================================================
.xdata$x:000058A8
.xdata$x:000058A8 ; Segment type: Pure data
.xdata$x:000058A8 ; Segment permissions: Read
.xdata$x:000058A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000058A8                 assume cs:_xdata$x
.xdata$x:000058A8                 ;org 58A8h
.xdata$x:000058A8 ; COMDAT (pick associative to section at 57CC)
.xdata$x:000058A8 __unwindtable$??0CReadArcItem@@QAE@XZ db 0FFh
.xdata$x:000058A8                                         ; DATA XREF: .xdata$x:000058C8o
.xdata$x:000058A9                 db 0FFh
.xdata$x:000058AA                 db 0FFh
.xdata$x:000058AB                 db 0FFh
.xdata$x:000058AC                 dd offset __unwindfunclet$??0CReadArcItem@@QAE@XZ$0
.xdata$x:000058B0                 db    0
.xdata$x:000058B1                 db    0
.xdata$x:000058B2                 db    0
.xdata$x:000058B3                 db    0
.xdata$x:000058B4                 dd offset __unwindfunclet$??0CReadArcItem@@QAE@XZ$1
.xdata$x:000058B8                 db    1
.xdata$x:000058B9                 db    0
.xdata$x:000058BA                 db    0
.xdata$x:000058BB                 db    0
.xdata$x:000058BC                 dd offset __unwindfunclet$??0CReadArcItem@@QAE@XZ$2
.xdata$x:000058C0 __ehfuncinfo$??0CReadArcItem@@QAE@XZ db  22h ; "
.xdata$x:000058C0                                         ; DATA XREF: __ehhandler$??0CReadArcItem@@QAE@XZ+11o
.xdata$x:000058C1                 db    5
.xdata$x:000058C2                 db  93h ; ô
.xdata$x:000058C3                 db  19h
.xdata$x:000058C4                 db    3
.xdata$x:000058C5                 db    0
.xdata$x:000058C6                 db    0
.xdata$x:000058C7                 db    0
.xdata$x:000058C8                 dd offset __unwindtable$??0CReadArcItem@@QAE@XZ
.xdata$x:000058CC                 align 20h
.xdata$x:000058E0                 db    1
.xdata$x:000058E1                 db    0
.xdata$x:000058E2                 db    0
.xdata$x:000058E3                 db    0
.xdata$x:000058E3 _xdata$x        ends
.xdata$x:000058E3
.text:000058E4 ; ===========================================================================
.text:000058E4
.text:000058E4 ; Segment type: Pure code
.text:000058E4 ; Segment permissions: Read/Execute
.text:000058E4 _text           segment para public 'CODE' use32
.text:000058E4                 assume cs:_text
.text:000058E4                 ;org 58E4h
.text:000058E4 ; COMDAT (pick any)
.text:000058E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058E4
.text:000058E4 ; =============== S U B R O U T I N E =======================================
.text:000058E4
.text:000058E4 ; Attributes: bp-based frame
.text:000058E4
.text:000058E4 ; public: __thiscall CArchiveLink::CArchiveLink(void)
.text:000058E4                 public ??0CArchiveLink@@QAE@XZ
.text:000058E4 ??0CArchiveLink@@QAE@XZ proc near       ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+3E6p
.text:000058E4
.text:000058E4 var_10          = dword ptr -10h
.text:000058E4 var_C           = dword ptr -0Ch
.text:000058E4 var_4           = dword ptr -4
.text:000058E4
.text:000058E4                 push    ebp
.text:000058E5                 mov     ebp, esp
.text:000058E7                 push    0FFFFFFFFh
.text:000058E9                 push    offset __ehhandler$??0CArchiveLink@@QAE@XZ
.text:000058EE                 mov     eax, large fs:0
.text:000058F4                 push    eax
.text:000058F5                 push    ecx
.text:000058F6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000058FD                 mov     eax, dword ptr ds:___security_cookie
.text:00005902                 xor     eax, ebp
.text:00005904                 push    eax
.text:00005905                 lea     eax, [ebp+var_C]
.text:00005908                 mov     large fs:0, eax
.text:0000590E                 mov     [ebp+var_10], ecx
.text:00005911                 mov     ecx, [ebp+var_10]
.text:00005914                 call    ??0?$CObjectVector@VCArc@@@@QAE@XZ ; CObjectVector<CArc>::CObjectVector<CArc>(void)
.text:00005919                 mov     [ebp+var_4], 0
.text:00005920                 mov     ecx, [ebp+var_10]
.text:00005923                 add     ecx, 0Ch
.text:00005926                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:0000592B                 mov     byte ptr [ebp+var_4], 1
.text:0000592F                 mov     eax, [ebp+var_10]
.text:00005932                 mov     dword ptr [eax+18h], 0
.text:00005939                 mov     dword ptr [eax+1Ch], 0
.text:00005940                 mov     ecx, [ebp+var_10]
.text:00005943                 mov     byte ptr [ecx+20h], 0
.text:00005947                 mov     edx, [ebp+var_10]
.text:0000594A                 mov     byte ptr [edx+21h], 0
.text:0000594E                 mov     ecx, [ebp+var_10]
.text:00005951                 add     ecx, 24h ; '$'
.text:00005954                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005959                 mov     byte ptr [ebp+var_4], 2
.text:0000595D                 mov     ecx, [ebp+var_10]
.text:00005960                 add     ecx, 30h ; '0'
.text:00005963                 call    ??0CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::CArcErrorInfo(void)
.text:00005968                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000596F                 mov     eax, [ebp+var_10]
.text:00005972                 mov     ecx, [ebp+var_C]
.text:00005975                 mov     large fs:0, ecx
.text:0000597C                 pop     ecx
.text:0000597D                 add     esp, 10h
.text:00005980                 cmp     ebp, esp
.text:00005982                 call    __RTC_CheckEsp
.text:00005987                 mov     esp, ebp
.text:00005989                 pop     ebp
.text:0000598A                 retn
.text:0000598A ??0CArchiveLink@@QAE@XZ endp
.text:0000598A
.text:0000598A ; ---------------------------------------------------------------------------
.text:0000598B                 align 4
.text:0000598B _text           ends
.text:0000598B
.text$x:0000598C ; ===========================================================================
.text$x:0000598C
.text$x:0000598C ; Segment type: Pure code
.text$x:0000598C ; Segment permissions: Read/Execute
.text$x:0000598C _text$x         segment para public 'CODE' use32
.text$x:0000598C                 assume cs:_text$x
.text$x:0000598C                 ;org 598Ch
.text$x:0000598C ; COMDAT (pick associative to section at 58E4)
.text$x:0000598C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000598C
.text$x:0000598C ; =============== S U B R O U T I N E =======================================
.text$x:0000598C
.text$x:0000598C
.text$x:0000598C __unwindfunclet$??0CArchiveLink@@QAE@XZ$0 proc near
.text$x:0000598C                                         ; DATA XREF: .xdata$x:000059CCo
.text$x:0000598C                 mov     ecx, [ebp-10h]
.text$x:0000598F                 jmp     ??1?$CObjectVector@VCArc@@@@QAE@XZ ; CObjectVector<CArc>::~CObjectVector<CArc>(void)
.text$x:0000598F __unwindfunclet$??0CArchiveLink@@QAE@XZ$0 endp
.text$x:0000598F
.text$x:00005994
.text$x:00005994 ; =============== S U B R O U T I N E =======================================
.text$x:00005994
.text$x:00005994
.text$x:00005994 __unwindfunclet$??0CArchiveLink@@QAE@XZ$1 proc near
.text$x:00005994                                         ; DATA XREF: .xdata$x:000059D4o
.text$x:00005994                 mov     ecx, [ebp-10h]
.text$x:00005997                 add     ecx, 0Ch
.text$x:0000599A                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:0000599A __unwindfunclet$??0CArchiveLink@@QAE@XZ$1 endp
.text$x:0000599A
.text$x:0000599F
.text$x:0000599F ; =============== S U B R O U T I N E =======================================
.text$x:0000599F
.text$x:0000599F
.text$x:0000599F __unwindfunclet$??0CArchiveLink@@QAE@XZ$2 proc near
.text$x:0000599F                                         ; DATA XREF: .xdata$x:000059DCo
.text$x:0000599F                 mov     ecx, [ebp-10h]
.text$x:000059A2                 add     ecx, 24h ; '$'  ; this
.text$x:000059A5                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000059A5 __unwindfunclet$??0CArchiveLink@@QAE@XZ$2 endp
.text$x:000059A5
.text$x:000059AA
.text$x:000059AA ; =============== S U B R O U T I N E =======================================
.text$x:000059AA
.text$x:000059AA
.text$x:000059AA __ehhandler$??0CArchiveLink@@QAE@XZ proc near
.text$x:000059AA                                         ; DATA XREF: CArchiveLink::CArchiveLink(void)+5o
.text$x:000059AA
.text$x:000059AA arg_4           = dword ptr  8
.text$x:000059AA
.text$x:000059AA                 mov     edx, [esp+arg_4]
.text$x:000059AE                 lea     eax, [edx+0Ch]
.text$x:000059B1                 mov     ecx, [edx-8]
.text$x:000059B4                 xor     ecx, eax
.text$x:000059B6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000059BB                 mov     eax, offset __ehfuncinfo$??0CArchiveLink@@QAE@XZ
.text$x:000059C0                 jmp     ___CxxFrameHandler3
.text$x:000059C0 __ehhandler$??0CArchiveLink@@QAE@XZ endp
.text$x:000059C0
.text$x:000059C0 ; ---------------------------------------------------------------------------
.text$x:000059C5                 align 4
.text$x:000059C5 _text$x         ends
.text$x:000059C5
.xdata$x:000059C8 ; ===========================================================================
.xdata$x:000059C8
.xdata$x:000059C8 ; Segment type: Pure data
.xdata$x:000059C8 ; Segment permissions: Read
.xdata$x:000059C8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000059C8                 assume cs:_xdata$x
.xdata$x:000059C8                 ;org 59C8h
.xdata$x:000059C8 ; COMDAT (pick associative to section at 58E4)
.xdata$x:000059C8 __unwindtable$??0CArchiveLink@@QAE@XZ db 0FFh
.xdata$x:000059C8                                         ; DATA XREF: .xdata$x:000059E8o
.xdata$x:000059C9                 db 0FFh
.xdata$x:000059CA                 db 0FFh
.xdata$x:000059CB                 db 0FFh
.xdata$x:000059CC                 dd offset __unwindfunclet$??0CArchiveLink@@QAE@XZ$0
.xdata$x:000059D0                 db    0
.xdata$x:000059D1                 db    0
.xdata$x:000059D2                 db    0
.xdata$x:000059D3                 db    0
.xdata$x:000059D4                 dd offset __unwindfunclet$??0CArchiveLink@@QAE@XZ$1
.xdata$x:000059D8                 db    1
.xdata$x:000059D9                 db    0
.xdata$x:000059DA                 db    0
.xdata$x:000059DB                 db    0
.xdata$x:000059DC                 dd offset __unwindfunclet$??0CArchiveLink@@QAE@XZ$2
.xdata$x:000059E0 __ehfuncinfo$??0CArchiveLink@@QAE@XZ db  22h ; "
.xdata$x:000059E0                                         ; DATA XREF: __ehhandler$??0CArchiveLink@@QAE@XZ+11o
.xdata$x:000059E1                 db    5
.xdata$x:000059E2                 db  93h ; ô
.xdata$x:000059E3                 db  19h
.xdata$x:000059E4                 db    3
.xdata$x:000059E5                 db    0
.xdata$x:000059E6                 db    0
.xdata$x:000059E7                 db    0
.xdata$x:000059E8                 dd offset __unwindtable$??0CArchiveLink@@QAE@XZ
.xdata$x:000059EC                 align 20h
.xdata$x:00005A00                 db    1
.xdata$x:00005A01                 db    0
.xdata$x:00005A02                 db    0
.xdata$x:00005A03                 db    0
.xdata$x:00005A03 _xdata$x        ends
.xdata$x:00005A03
.text:00005A04 ; ===========================================================================
.text:00005A04
.text:00005A04 ; Segment type: Pure code
.text:00005A04 ; Segment permissions: Read/Execute
.text:00005A04 _text           segment para public 'CODE' use32
.text:00005A04                 assume cs:_text
.text:00005A04                 ;org 5A04h
.text:00005A04 ; COMDAT (pick any)
.text:00005A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005A04
.text:00005A04 ; =============== S U B R O U T I N E =======================================
.text:00005A04
.text:00005A04 ; Attributes: bp-based frame
.text:00005A04
.text:00005A04 ; public: __thiscall CArcErrorInfo::CArcErrorInfo(void)
.text:00005A04                 public ??0CArcErrorInfo@@QAE@XZ
.text:00005A04 ??0CArcErrorInfo@@QAE@XZ proc near      ; CODE XREF: CArchiveLink::CArchiveLink(void)+7Fp
.text:00005A04
.text:00005A04 var_10          = dword ptr -10h
.text:00005A04 var_C           = dword ptr -0Ch
.text:00005A04 var_4           = dword ptr -4
.text:00005A04
.text:00005A04                 push    ebp
.text:00005A05                 mov     ebp, esp
.text:00005A07                 push    0FFFFFFFFh
.text:00005A09                 push    offset __ehhandler$??0CArcErrorInfo@@QAE@XZ
.text:00005A0E                 mov     eax, large fs:0
.text:00005A14                 push    eax
.text:00005A15                 push    ecx
.text:00005A16                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005A1D                 mov     eax, dword ptr ds:___security_cookie
.text:00005A22                 xor     eax, ebp
.text:00005A24                 push    eax
.text:00005A25                 lea     eax, [ebp+var_C]
.text:00005A28                 mov     large fs:0, eax
.text:00005A2E                 mov     [ebp+var_10], ecx
.text:00005A31                 mov     eax, [ebp+var_10]
.text:00005A34                 mov     byte ptr [eax], 0
.text:00005A37                 mov     ecx, [ebp+var_10]
.text:00005A3A                 mov     byte ptr [ecx+1], 0
.text:00005A3E                 mov     edx, [ebp+var_10]
.text:00005A41                 mov     byte ptr [edx+2], 0
.text:00005A45                 mov     eax, [ebp+var_10]
.text:00005A48                 mov     byte ptr [eax+3], 0
.text:00005A4C                 mov     ecx, [ebp+var_10]
.text:00005A4F                 mov     dword ptr [ecx+4], 0
.text:00005A56                 mov     edx, [ebp+var_10]
.text:00005A59                 mov     dword ptr [edx+8], 0
.text:00005A60                 mov     eax, [ebp+var_10]
.text:00005A63                 mov     dword ptr [eax+0Ch], 0FFFFFFFFh
.text:00005A6A                 mov     ecx, [ebp+var_10]
.text:00005A6D                 mov     dword ptr [ecx+10h], 0
.text:00005A74                 mov     dword ptr [ecx+14h], 0
.text:00005A7B                 mov     ecx, [ebp+var_10]
.text:00005A7E                 add     ecx, 18h
.text:00005A81                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005A86                 mov     [ebp+var_4], 0
.text:00005A8D                 mov     ecx, [ebp+var_10]
.text:00005A90                 add     ecx, 24h ; '$'
.text:00005A93                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005A98                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005A9F                 mov     eax, [ebp+var_10]
.text:00005AA2                 mov     ecx, [ebp+var_C]
.text:00005AA5                 mov     large fs:0, ecx
.text:00005AAC                 pop     ecx
.text:00005AAD                 add     esp, 10h
.text:00005AB0                 cmp     ebp, esp
.text:00005AB2                 call    __RTC_CheckEsp
.text:00005AB7                 mov     esp, ebp
.text:00005AB9                 pop     ebp
.text:00005ABA                 retn
.text:00005ABA ??0CArcErrorInfo@@QAE@XZ endp
.text:00005ABA
.text:00005ABA ; ---------------------------------------------------------------------------
.text:00005ABB                 align 4
.text:00005ABB _text           ends
.text:00005ABB
.text$x:00005ABC ; ===========================================================================
.text$x:00005ABC
.text$x:00005ABC ; Segment type: Pure code
.text$x:00005ABC ; Segment permissions: Read/Execute
.text$x:00005ABC _text$x         segment para public 'CODE' use32
.text$x:00005ABC                 assume cs:_text$x
.text$x:00005ABC                 ;org 5ABCh
.text$x:00005ABC ; COMDAT (pick associative to section at 5A04)
.text$x:00005ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005ABC
.text$x:00005ABC ; =============== S U B R O U T I N E =======================================
.text$x:00005ABC
.text$x:00005ABC
.text$x:00005ABC __unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0 proc near
.text$x:00005ABC                                         ; DATA XREF: .xdata$x:00005AE8o
.text$x:00005ABC                 mov     ecx, [ebp-10h]
.text$x:00005ABF                 add     ecx, 18h        ; this
.text$x:00005AC2                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005AC2 __unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0 endp
.text$x:00005AC2
.text$x:00005AC7
.text$x:00005AC7 ; =============== S U B R O U T I N E =======================================
.text$x:00005AC7
.text$x:00005AC7
.text$x:00005AC7 __ehhandler$??0CArcErrorInfo@@QAE@XZ proc near
.text$x:00005AC7                                         ; DATA XREF: CArcErrorInfo::CArcErrorInfo(void)+5o
.text$x:00005AC7
.text$x:00005AC7 arg_4           = dword ptr  8
.text$x:00005AC7
.text$x:00005AC7                 mov     edx, [esp+arg_4]
.text$x:00005ACB                 lea     eax, [edx+0Ch]
.text$x:00005ACE                 mov     ecx, [edx-8]
.text$x:00005AD1                 xor     ecx, eax
.text$x:00005AD3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005AD8                 mov     eax, offset __ehfuncinfo$??0CArcErrorInfo@@QAE@XZ
.text$x:00005ADD                 jmp     ___CxxFrameHandler3
.text$x:00005ADD __ehhandler$??0CArcErrorInfo@@QAE@XZ endp
.text$x:00005ADD
.text$x:00005ADD ; ---------------------------------------------------------------------------
.text$x:00005AE2                 align 4
.text$x:00005AE2 _text$x         ends
.text$x:00005AE2
.xdata$x:00005AE4 ; ===========================================================================
.xdata$x:00005AE4
.xdata$x:00005AE4 ; Segment type: Pure data
.xdata$x:00005AE4 ; Segment permissions: Read
.xdata$x:00005AE4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005AE4                 assume cs:_xdata$x
.xdata$x:00005AE4                 ;org 5AE4h
.xdata$x:00005AE4 ; COMDAT (pick associative to section at 5A04)
.xdata$x:00005AE4 __unwindtable$??0CArcErrorInfo@@QAE@XZ db 0FFh
.xdata$x:00005AE4                                         ; DATA XREF: .xdata$x:00005AF4o
.xdata$x:00005AE5                 db 0FFh
.xdata$x:00005AE6                 db 0FFh
.xdata$x:00005AE7                 db 0FFh
.xdata$x:00005AE8                 dd offset __unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0
.xdata$x:00005AEC __ehfuncinfo$??0CArcErrorInfo@@QAE@XZ db  22h ; "
.xdata$x:00005AEC                                         ; DATA XREF: __ehhandler$??0CArcErrorInfo@@QAE@XZ+11o
.xdata$x:00005AED                 db    5
.xdata$x:00005AEE                 db  93h ; ô
.xdata$x:00005AEF                 db  19h
.xdata$x:00005AF0                 db    1
.xdata$x:00005AF1                 db    0
.xdata$x:00005AF2                 db    0
.xdata$x:00005AF3                 db    0
.xdata$x:00005AF4                 dd offset __unwindtable$??0CArcErrorInfo@@QAE@XZ
.xdata$x:00005AF8                 db    0
.xdata$x:00005AF9                 db    0
.xdata$x:00005AFA                 db    0
.xdata$x:00005AFB                 db    0
.xdata$x:00005AFC                 db    0
.xdata$x:00005AFD                 db    0
.xdata$x:00005AFE                 db    0
.xdata$x:00005AFF                 db    0
.xdata$x:00005B00                 db    0
.xdata$x:00005B01                 db    0
.xdata$x:00005B02                 db    0
.xdata$x:00005B03                 db    0
.xdata$x:00005B04                 db    0
.xdata$x:00005B05                 db    0
.xdata$x:00005B06                 db    0
.xdata$x:00005B07                 db    0
.xdata$x:00005B08                 db    0
.xdata$x:00005B09                 db    0
.xdata$x:00005B0A                 db    0
.xdata$x:00005B0B                 db    0
.xdata$x:00005B0C                 db    1
.xdata$x:00005B0D                 db    0
.xdata$x:00005B0E                 db    0
.xdata$x:00005B0F                 db    0
.xdata$x:00005B0F _xdata$x        ends
.xdata$x:00005B0F
.text:00005B10 ; ===========================================================================
.text:00005B10
.text:00005B10 ; Segment type: Pure code
.text:00005B10 ; Segment permissions: Read/Execute
.text:00005B10 _text           segment para public 'CODE' use32
.text:00005B10                 assume cs:_text
.text:00005B10                 ;org 5B10h
.text:00005B10 ; COMDAT (pick any)
.text:00005B10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B10
.text:00005B10 ; =============== S U B R O U T I N E =======================================
.text:00005B10
.text:00005B10 ; Attributes: bp-based frame
.text:00005B10
.text:00005B10 ; _DWORD __thiscall CArchiveLink::~CArchiveLink(CArchiveLink *__hidden this)
.text:00005B10                 public ??1CArchiveLink@@QAE@XZ
.text:00005B10 ??1CArchiveLink@@QAE@XZ proc near       ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+544p
.text:00005B10                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+6B5p ...
.text:00005B10
.text:00005B10 var_10          = dword ptr -10h
.text:00005B10 var_C           = dword ptr -0Ch
.text:00005B10 var_4           = dword ptr -4
.text:00005B10
.text:00005B10                 push    ebp
.text:00005B11                 mov     ebp, esp
.text:00005B13                 push    0FFFFFFFFh
.text:00005B15                 push    offset __ehhandler$??1CArchiveLink@@QAE@XZ
.text:00005B1A                 mov     eax, large fs:0
.text:00005B20                 push    eax
.text:00005B21                 push    ecx
.text:00005B22                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005B29                 mov     eax, dword ptr ds:___security_cookie
.text:00005B2E                 xor     eax, ebp
.text:00005B30                 push    eax
.text:00005B31                 lea     eax, [ebp+var_C]
.text:00005B34                 mov     large fs:0, eax
.text:00005B3A                 mov     [ebp+var_10], ecx
.text:00005B3D                 mov     [ebp+var_4], 3
.text:00005B44                 mov     ecx, [ebp+var_10] ; this
.text:00005B47                 call    ?Release@CArchiveLink@@QAEXXZ ; CArchiveLink::Release(void)
.text:00005B4C                 mov     byte ptr [ebp+var_4], 2
.text:00005B50                 mov     ecx, [ebp+var_10]
.text:00005B53                 add     ecx, 30h ; '0'  ; this
.text:00005B56                 call    ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text:00005B5B                 mov     byte ptr [ebp+var_4], 1
.text:00005B5F                 mov     ecx, [ebp+var_10]
.text:00005B62                 add     ecx, 24h ; '$'  ; this
.text:00005B65                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005B6A                 mov     byte ptr [ebp+var_4], 0
.text:00005B6E                 mov     ecx, [ebp+var_10]
.text:00005B71                 add     ecx, 0Ch
.text:00005B74                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00005B79                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005B80                 mov     ecx, [ebp+var_10]
.text:00005B83                 call    ??1?$CObjectVector@VCArc@@@@QAE@XZ ; CObjectVector<CArc>::~CObjectVector<CArc>(void)
.text:00005B88                 mov     ecx, [ebp+var_C]
.text:00005B8B                 mov     large fs:0, ecx
.text:00005B92                 pop     ecx
.text:00005B93                 add     esp, 10h
.text:00005B96                 cmp     ebp, esp
.text:00005B98                 call    __RTC_CheckEsp
.text:00005B9D                 mov     esp, ebp
.text:00005B9F                 pop     ebp
.text:00005BA0                 retn
.text:00005BA0 ??1CArchiveLink@@QAE@XZ endp
.text:00005BA0
.text:00005BA0 ; ---------------------------------------------------------------------------
.text:00005BA1                 align 4
.text:00005BA1 _text           ends
.text:00005BA1
.text$x:00005BA4 ; ===========================================================================
.text$x:00005BA4
.text$x:00005BA4 ; Segment type: Pure code
.text$x:00005BA4 ; Segment permissions: Read/Execute
.text$x:00005BA4 _text$x         segment para public 'CODE' use32
.text$x:00005BA4                 assume cs:_text$x
.text$x:00005BA4                 ;org 5BA4h
.text$x:00005BA4 ; COMDAT (pick associative to section at 5B10)
.text$x:00005BA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005BA4
.text$x:00005BA4 ; =============== S U B R O U T I N E =======================================
.text$x:00005BA4
.text$x:00005BA4
.text$x:00005BA4 __unwindfunclet$??1CArchiveLink@@QAE@XZ$0 proc near
.text$x:00005BA4                                         ; DATA XREF: .xdata$x:00005BECo
.text$x:00005BA4                 mov     ecx, [ebp-10h]
.text$x:00005BA7                 jmp     ??1?$CObjectVector@VCArc@@@@QAE@XZ ; CObjectVector<CArc>::~CObjectVector<CArc>(void)
.text$x:00005BA7 __unwindfunclet$??1CArchiveLink@@QAE@XZ$0 endp
.text$x:00005BA7
.text$x:00005BAC
.text$x:00005BAC ; =============== S U B R O U T I N E =======================================
.text$x:00005BAC
.text$x:00005BAC
.text$x:00005BAC __unwindfunclet$??1CArchiveLink@@QAE@XZ$1 proc near
.text$x:00005BAC                                         ; DATA XREF: .xdata$x:00005BF4o
.text$x:00005BAC                 mov     ecx, [ebp-10h]
.text$x:00005BAF                 add     ecx, 0Ch
.text$x:00005BB2                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00005BB2 __unwindfunclet$??1CArchiveLink@@QAE@XZ$1 endp
.text$x:00005BB2
.text$x:00005BB7
.text$x:00005BB7 ; =============== S U B R O U T I N E =======================================
.text$x:00005BB7
.text$x:00005BB7
.text$x:00005BB7 __unwindfunclet$??1CArchiveLink@@QAE@XZ$2 proc near
.text$x:00005BB7                                         ; DATA XREF: .xdata$x:00005BFCo
.text$x:00005BB7                 mov     ecx, [ebp-10h]
.text$x:00005BBA                 add     ecx, 24h ; '$'  ; this
.text$x:00005BBD                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005BBD __unwindfunclet$??1CArchiveLink@@QAE@XZ$2 endp
.text$x:00005BBD
.text$x:00005BC2
.text$x:00005BC2 ; =============== S U B R O U T I N E =======================================
.text$x:00005BC2
.text$x:00005BC2
.text$x:00005BC2 __unwindfunclet$??1CArchiveLink@@QAE@XZ$3 proc near
.text$x:00005BC2                                         ; DATA XREF: .xdata$x:00005C04o
.text$x:00005BC2                 mov     ecx, [ebp-10h]
.text$x:00005BC5                 add     ecx, 30h ; '0'  ; this
.text$x:00005BC8                 jmp     ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text$x:00005BC8 __unwindfunclet$??1CArchiveLink@@QAE@XZ$3 endp
.text$x:00005BC8
.text$x:00005BCD
.text$x:00005BCD ; =============== S U B R O U T I N E =======================================
.text$x:00005BCD
.text$x:00005BCD
.text$x:00005BCD __ehhandler$??1CArchiveLink@@QAE@XZ proc near
.text$x:00005BCD                                         ; DATA XREF: CArchiveLink::~CArchiveLink(void)+5o
.text$x:00005BCD
.text$x:00005BCD arg_4           = dword ptr  8
.text$x:00005BCD
.text$x:00005BCD                 mov     edx, [esp+arg_4]
.text$x:00005BD1                 lea     eax, [edx+0Ch]
.text$x:00005BD4                 mov     ecx, [edx-8]
.text$x:00005BD7                 xor     ecx, eax
.text$x:00005BD9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005BDE                 mov     eax, offset __ehfuncinfo$??1CArchiveLink@@QAE@XZ
.text$x:00005BE3                 jmp     ___CxxFrameHandler3
.text$x:00005BE3 __ehhandler$??1CArchiveLink@@QAE@XZ endp
.text$x:00005BE3
.text$x:00005BE3 _text$x         ends
.text$x:00005BE3
.xdata$x:00005BE8 ; ===========================================================================
.xdata$x:00005BE8
.xdata$x:00005BE8 ; Segment type: Pure data
.xdata$x:00005BE8 ; Segment permissions: Read
.xdata$x:00005BE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005BE8                 assume cs:_xdata$x
.xdata$x:00005BE8                 ;org 5BE8h
.xdata$x:00005BE8 ; COMDAT (pick associative to section at 5B10)
.xdata$x:00005BE8 __unwindtable$??1CArchiveLink@@QAE@XZ db 0FFh
.xdata$x:00005BE8                                         ; DATA XREF: .xdata$x:00005C10o
.xdata$x:00005BE9                 db 0FFh
.xdata$x:00005BEA                 db 0FFh
.xdata$x:00005BEB                 db 0FFh
.xdata$x:00005BEC                 dd offset __unwindfunclet$??1CArchiveLink@@QAE@XZ$0
.xdata$x:00005BF0                 db    0
.xdata$x:00005BF1                 db    0
.xdata$x:00005BF2                 db    0
.xdata$x:00005BF3                 db    0
.xdata$x:00005BF4                 dd offset __unwindfunclet$??1CArchiveLink@@QAE@XZ$1
.xdata$x:00005BF8                 db    1
.xdata$x:00005BF9                 db    0
.xdata$x:00005BFA                 db    0
.xdata$x:00005BFB                 db    0
.xdata$x:00005BFC                 dd offset __unwindfunclet$??1CArchiveLink@@QAE@XZ$2
.xdata$x:00005C00                 db    2
.xdata$x:00005C01                 db    0
.xdata$x:00005C02                 db    0
.xdata$x:00005C03                 db    0
.xdata$x:00005C04                 dd offset __unwindfunclet$??1CArchiveLink@@QAE@XZ$3
.xdata$x:00005C08 __ehfuncinfo$??1CArchiveLink@@QAE@XZ db  22h ; "
.xdata$x:00005C08                                         ; DATA XREF: __ehhandler$??1CArchiveLink@@QAE@XZ+11o
.xdata$x:00005C09                 db    5
.xdata$x:00005C0A                 db  93h ; ô
.xdata$x:00005C0B                 db  19h
.xdata$x:00005C0C                 db    4
.xdata$x:00005C0D                 db    0
.xdata$x:00005C0E                 db    0
.xdata$x:00005C0F                 db    0
.xdata$x:00005C10                 dd offset __unwindtable$??1CArchiveLink@@QAE@XZ
.xdata$x:00005C14                 db    0
.xdata$x:00005C15                 db    0
.xdata$x:00005C16                 db    0
.xdata$x:00005C17                 db    0
.xdata$x:00005C18                 db    0
.xdata$x:00005C19                 db    0
.xdata$x:00005C1A                 db    0
.xdata$x:00005C1B                 db    0
.xdata$x:00005C1C                 db    0
.xdata$x:00005C1D                 db    0
.xdata$x:00005C1E                 db    0
.xdata$x:00005C1F                 db    0
.xdata$x:00005C20                 db    0
.xdata$x:00005C21                 db    0
.xdata$x:00005C22                 db    0
.xdata$x:00005C23                 db    0
.xdata$x:00005C24                 db    0
.xdata$x:00005C25                 db    0
.xdata$x:00005C26                 db    0
.xdata$x:00005C27                 db    0
.xdata$x:00005C28                 db    1
.xdata$x:00005C29                 db    0
.xdata$x:00005C2A                 db    0
.xdata$x:00005C2B                 db    0
.xdata$x:00005C2B _xdata$x        ends
.xdata$x:00005C2B
.text:00005C2C ; ===========================================================================
.text:00005C2C
.text:00005C2C ; Segment type: Pure code
.text:00005C2C ; Segment permissions: Read/Execute
.text:00005C2C _text           segment para public 'CODE' use32
.text:00005C2C                 assume cs:_text
.text:00005C2C                 ;org 5C2Ch
.text:00005C2C ; COMDAT (pick any)
.text:00005C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C2C
.text:00005C2C ; =============== S U B R O U T I N E =======================================
.text:00005C2C
.text:00005C2C ; Attributes: bp-based frame
.text:00005C2C
.text:00005C2C ; _DWORD __thiscall CArcErrorInfo::~CArcErrorInfo(CArcErrorInfo *__hidden this)
.text:00005C2C                 public ??1CArcErrorInfo@@QAE@XZ
.text:00005C2C ??1CArcErrorInfo@@QAE@XZ proc near      ; CODE XREF: CArchiveLink::~CArchiveLink(void)+46p
.text:00005C2C                                         ; __unwindfunclet$??1CArchiveLink@@QAE@XZ$3+6j ...
.text:00005C2C
.text:00005C2C var_10          = dword ptr -10h
.text:00005C2C var_C           = dword ptr -0Ch
.text:00005C2C var_4           = dword ptr -4
.text:00005C2C
.text:00005C2C                 push    ebp
.text:00005C2D                 mov     ebp, esp
.text:00005C2F                 push    0FFFFFFFFh
.text:00005C31                 push    offset __ehhandler$??1CArcErrorInfo@@QAE@XZ
.text:00005C36                 mov     eax, large fs:0
.text:00005C3C                 push    eax
.text:00005C3D                 push    ecx
.text:00005C3E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005C45                 mov     eax, dword ptr ds:___security_cookie
.text:00005C4A                 xor     eax, ebp
.text:00005C4C                 push    eax
.text:00005C4D                 lea     eax, [ebp+var_C]
.text:00005C50                 mov     large fs:0, eax
.text:00005C56                 mov     [ebp+var_10], ecx
.text:00005C59                 mov     [ebp+var_4], 0
.text:00005C60                 mov     ecx, [ebp+var_10]
.text:00005C63                 add     ecx, 24h ; '$'  ; this
.text:00005C66                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005C6B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005C72                 mov     ecx, [ebp+var_10]
.text:00005C75                 add     ecx, 18h        ; this
.text:00005C78                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005C7D                 mov     ecx, [ebp+var_C]
.text:00005C80                 mov     large fs:0, ecx
.text:00005C87                 pop     ecx
.text:00005C88                 add     esp, 10h
.text:00005C8B                 cmp     ebp, esp
.text:00005C8D                 call    __RTC_CheckEsp
.text:00005C92                 mov     esp, ebp
.text:00005C94                 pop     ebp
.text:00005C95                 retn
.text:00005C95 ??1CArcErrorInfo@@QAE@XZ endp
.text:00005C95
.text:00005C95 ; ---------------------------------------------------------------------------
.text:00005C96                 align 4
.text:00005C96 _text           ends
.text:00005C96
.text$x:00005C98 ; ===========================================================================
.text$x:00005C98
.text$x:00005C98 ; Segment type: Pure code
.text$x:00005C98 ; Segment permissions: Read/Execute
.text$x:00005C98 _text$x         segment para public 'CODE' use32
.text$x:00005C98                 assume cs:_text$x
.text$x:00005C98                 ;org 5C98h
.text$x:00005C98 ; COMDAT (pick associative to section at 5C2C)
.text$x:00005C98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005C98
.text$x:00005C98 ; =============== S U B R O U T I N E =======================================
.text$x:00005C98
.text$x:00005C98
.text$x:00005C98 __unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0 proc near
.text$x:00005C98                                         ; DATA XREF: .xdata$x:00005CC4o
.text$x:00005C98                 mov     ecx, [ebp-10h]
.text$x:00005C9B                 add     ecx, 18h        ; this
.text$x:00005C9E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005C9E __unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0 endp
.text$x:00005C9E
.text$x:00005CA3
.text$x:00005CA3 ; =============== S U B R O U T I N E =======================================
.text$x:00005CA3
.text$x:00005CA3
.text$x:00005CA3 __ehhandler$??1CArcErrorInfo@@QAE@XZ proc near
.text$x:00005CA3                                         ; DATA XREF: CArcErrorInfo::~CArcErrorInfo(void)+5o
.text$x:00005CA3
.text$x:00005CA3 arg_4           = dword ptr  8
.text$x:00005CA3
.text$x:00005CA3                 mov     edx, [esp+arg_4]
.text$x:00005CA7                 lea     eax, [edx+0Ch]
.text$x:00005CAA                 mov     ecx, [edx-8]
.text$x:00005CAD                 xor     ecx, eax
.text$x:00005CAF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005CB4                 mov     eax, offset __ehfuncinfo$??1CArcErrorInfo@@QAE@XZ
.text$x:00005CB9                 jmp     ___CxxFrameHandler3
.text$x:00005CB9 __ehhandler$??1CArcErrorInfo@@QAE@XZ endp
.text$x:00005CB9
.text$x:00005CB9 ; ---------------------------------------------------------------------------
.text$x:00005CBE                 align 10h
.text$x:00005CBE _text$x         ends
.text$x:00005CBE
.xdata$x:00005CC0 ; ===========================================================================
.xdata$x:00005CC0
.xdata$x:00005CC0 ; Segment type: Pure data
.xdata$x:00005CC0 ; Segment permissions: Read
.xdata$x:00005CC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005CC0                 assume cs:_xdata$x
.xdata$x:00005CC0                 ;org 5CC0h
.xdata$x:00005CC0 ; COMDAT (pick associative to section at 5C2C)
.xdata$x:00005CC0 __unwindtable$??1CArcErrorInfo@@QAE@XZ db 0FFh
.xdata$x:00005CC0                                         ; DATA XREF: .xdata$x:00005CD0o
.xdata$x:00005CC1                 db 0FFh
.xdata$x:00005CC2                 db 0FFh
.xdata$x:00005CC3                 db 0FFh
.xdata$x:00005CC4                 dd offset __unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0
.xdata$x:00005CC8 __ehfuncinfo$??1CArcErrorInfo@@QAE@XZ db  22h ; "
.xdata$x:00005CC8                                         ; DATA XREF: __ehhandler$??1CArcErrorInfo@@QAE@XZ+11o
.xdata$x:00005CC9                 db    5
.xdata$x:00005CCA                 db  93h ; ô
.xdata$x:00005CCB                 db  19h
.xdata$x:00005CCC                 db    1
.xdata$x:00005CCD                 db    0
.xdata$x:00005CCE                 db    0
.xdata$x:00005CCF                 db    0
.xdata$x:00005CD0                 dd offset __unwindtable$??1CArcErrorInfo@@QAE@XZ
.xdata$x:00005CD4                 db    0
.xdata$x:00005CD5                 db    0
.xdata$x:00005CD6                 db    0
.xdata$x:00005CD7                 db    0
.xdata$x:00005CD8                 db    0
.xdata$x:00005CD9                 db    0
.xdata$x:00005CDA                 db    0
.xdata$x:00005CDB                 db    0
.xdata$x:00005CDC                 db    0
.xdata$x:00005CDD                 db    0
.xdata$x:00005CDE                 db    0
.xdata$x:00005CDF                 db    0
.xdata$x:00005CE0                 db    0
.xdata$x:00005CE1                 db    0
.xdata$x:00005CE2                 db    0
.xdata$x:00005CE3                 db    0
.xdata$x:00005CE4                 db    0
.xdata$x:00005CE5                 db    0
.xdata$x:00005CE6                 db    0
.xdata$x:00005CE7                 db    0
.xdata$x:00005CE8                 db    1
.xdata$x:00005CE9                 db    0
.xdata$x:00005CEA                 db    0
.xdata$x:00005CEB                 db    0
.xdata$x:00005CEB _xdata$x        ends
.xdata$x:00005CEB
.text:00005CEC ; ===========================================================================
.text:00005CEC
.text:00005CEC ; Segment type: Pure code
.text:00005CEC ; Segment permissions: Read/Execute
.text:00005CEC _text           segment para public 'CODE' use32
.text:00005CEC                 assume cs:_text
.text:00005CEC                 ;org 5CECh
.text:00005CEC ; COMDAT (pick any)
.text:00005CEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005CEC
.text:00005CEC ; =============== S U B R O U T I N E =======================================
.text:00005CEC
.text:00005CEC ; Attributes: bp-based frame
.text:00005CEC
.text:00005CEC ; bool NConsoleClose::TestBreakSignal(NConsoleClose *__hidden this)
.text:00005CEC                 public ?TestBreakSignal@NConsoleClose@@YG_NXZ
.text:00005CEC ?TestBreakSignal@NConsoleClose@@YG_NXZ proc near
.text:00005CEC                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+C4Bp
.text:00005CEC
.text:00005CEC this            = dword ptr  8
.text:00005CEC
.text:00005CEC                 push    ebp
.text:00005CED                 mov     ebp, esp
.text:00005CEF                 xor     eax, eax
.text:00005CF1                 cmp     dword ptr ds:?g_BreakCounter@NConsoleClose@@3IA, 0 ; uint NConsoleClose::g_BreakCounter
.text:00005CF8                 setnz   al
.text:00005CFB                 pop     ebp
.text:00005CFC                 retn
.text:00005CFC ?TestBreakSignal@NConsoleClose@@YG_NXZ endp
.text:00005CFC
.text:00005CFC ; ---------------------------------------------------------------------------
.text:00005CFD                 align 10h
.text:00005CFD _text           ends
.text:00005CFD
.text:00005D00 ; ===========================================================================
.text:00005D00
.text:00005D00 ; Segment type: Pure code
.text:00005D00 ; Segment permissions: Read/Execute
.text:00005D00 _text           segment para public 'CODE' use32
.text:00005D00                 assume cs:_text
.text:00005D00                 ;org 5D00h
.text:00005D00 ; COMDAT (pick any)
.text:00005D00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D00
.text:00005D00 ; =============== S U B R O U T I N E =======================================
.text:00005D00
.text:00005D00 ; Attributes: bp-based frame
.text:00005D00
.text:00005D00 ; public: __thiscall COpenCallbackConsole::COpenCallbackConsole(void)
.text:00005D00                 public ??0COpenCallbackConsole@@QAE@XZ
.text:00005D00 ??0COpenCallbackConsole@@QAE@XZ proc near
.text:00005D00                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+3F5p
.text:00005D00
.text:00005D00 var_10          = dword ptr -10h
.text:00005D00 var_C           = dword ptr -0Ch
.text:00005D00 var_4           = dword ptr -4
.text:00005D00
.text:00005D00                 push    ebp
.text:00005D01                 mov     ebp, esp
.text:00005D03                 push    0FFFFFFFFh
.text:00005D05                 push    offset __ehhandler$??0COpenCallbackConsole@@QAE@XZ
.text:00005D0A                 mov     eax, large fs:0
.text:00005D10                 push    eax
.text:00005D11                 push    ecx
.text:00005D12                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005D19                 mov     eax, dword ptr ds:___security_cookie
.text:00005D1E                 xor     eax, ebp
.text:00005D20                 push    eax
.text:00005D21                 lea     eax, [ebp+var_C]
.text:00005D24                 mov     large fs:0, eax
.text:00005D2A                 mov     [ebp+var_10], ecx
.text:00005D2D                 mov     ecx, [ebp+var_10] ; this
.text:00005D30                 call    ??0IOpenCallbackUI@@QAE@XZ ; IOpenCallbackUI::IOpenCallbackUI(void)
.text:00005D35                 mov     eax, [ebp+var_10]
.text:00005D38                 mov     dword ptr [eax], offset ??_7COpenCallbackConsole@@6B@ ; const COpenCallbackConsole::`vftable'
.text:00005D3E                 push    0C8h ; '+'
.text:00005D43                 mov     ecx, [ebp+var_10]
.text:00005D46                 add     ecx, 8
.text:00005D49                 call    ??0CPercentPrinter@@QAE@I@Z ; CPercentPrinter::CPercentPrinter(uint)
.text:00005D4E                 mov     [ebp+var_4], 0
.text:00005D55                 mov     ecx, [ebp+var_10]
.text:00005D58                 mov     byte ptr [ecx+0C0h], 0
.text:00005D5F                 mov     edx, [ebp+var_10]
.text:00005D62                 mov     byte ptr [edx+0C1h], 0
.text:00005D69                 mov     eax, [ebp+var_10]
.text:00005D6C                 mov     byte ptr [eax+0C2h], 0
.text:00005D73                 mov     ecx, [ebp+var_10]
.text:00005D76                 mov     byte ptr [ecx+0C3h], 0
.text:00005D7D                 mov     ecx, [ebp+var_10]
.text:00005D80                 add     ecx, 0C4h ; '-'
.text:00005D86                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005D8B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005D92                 mov     eax, [ebp+var_10]
.text:00005D95                 mov     ecx, [ebp+var_C]
.text:00005D98                 mov     large fs:0, ecx
.text:00005D9F                 pop     ecx
.text:00005DA0                 add     esp, 10h
.text:00005DA3                 cmp     ebp, esp
.text:00005DA5                 call    __RTC_CheckEsp
.text:00005DAA                 mov     esp, ebp
.text:00005DAC                 pop     ebp
.text:00005DAD                 retn
.text:00005DAD ??0COpenCallbackConsole@@QAE@XZ endp
.text:00005DAD
.text:00005DAD ; ---------------------------------------------------------------------------
.text:00005DAE                 align 10h
.text:00005DAE _text           ends
.text:00005DAE
.text$x:00005DB0 ; ===========================================================================
.text$x:00005DB0
.text$x:00005DB0 ; Segment type: Pure code
.text$x:00005DB0 ; Segment permissions: Read/Execute
.text$x:00005DB0 _text$x         segment para public 'CODE' use32
.text$x:00005DB0                 assume cs:_text$x
.text$x:00005DB0                 ;org 5DB0h
.text$x:00005DB0 ; COMDAT (pick associative to section at 5D00)
.text$x:00005DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005DB0
.text$x:00005DB0 ; =============== S U B R O U T I N E =======================================
.text$x:00005DB0
.text$x:00005DB0
.text$x:00005DB0 __unwindfunclet$??0COpenCallbackConsole@@QAE@XZ$0 proc near
.text$x:00005DB0                                         ; DATA XREF: .xdata$x:00005DF4o
.text$x:00005DB0                 mov     ecx, [ebp-10h]
.text$x:00005DB3                 add     ecx, 8          ; this
.text$x:00005DB6                 jmp     ??1CPercentPrinter@@QAE@XZ ; CPercentPrinter::~CPercentPrinter(void)
.text$x:00005DB6 __unwindfunclet$??0COpenCallbackConsole@@QAE@XZ$0 endp
.text$x:00005DB6
.text$x:00005DBB
.text$x:00005DBB ; =============== S U B R O U T I N E =======================================
.text$x:00005DBB
.text$x:00005DBB
.text$x:00005DBB __ehhandler$??0COpenCallbackConsole@@QAE@XZ proc near
.text$x:00005DBB                                         ; DATA XREF: COpenCallbackConsole::COpenCallbackConsole(void)+5o
.text$x:00005DBB
.text$x:00005DBB arg_4           = dword ptr  8
.text$x:00005DBB
.text$x:00005DBB                 mov     edx, [esp+arg_4]
.text$x:00005DBF                 lea     eax, [edx+0Ch]
.text$x:00005DC2                 mov     ecx, [edx-8]
.text$x:00005DC5                 xor     ecx, eax
.text$x:00005DC7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005DCC                 mov     eax, offset __ehfuncinfo$??0COpenCallbackConsole@@QAE@XZ
.text$x:00005DD1                 jmp     ___CxxFrameHandler3
.text$x:00005DD1 __ehhandler$??0COpenCallbackConsole@@QAE@XZ endp
.text$x:00005DD1
.text$x:00005DD1 ; ---------------------------------------------------------------------------
.text$x:00005DD6                 align 4
.text$x:00005DD6 _text$x         ends
.text$x:00005DD6
.rdata:00005DD8 ; ===========================================================================
.rdata:00005DD8
.rdata:00005DD8 ; Segment type: Pure data
.rdata:00005DD8 ; Segment permissions: Read
.rdata:00005DD8 _rdata          segment dword public 'DATA' use32
.rdata:00005DD8                 assume cs:_rdata
.rdata:00005DD8                 ;org 5DD8h
.rdata:00005DD8 ; COMDAT (pick largest)
.rdata:00005DD8                 dd offset ??_R4COpenCallbackConsole@@6B@ ; const COpenCallbackConsole::`RTTI Complete Object Locator'
.rdata:00005DDC                 public ??_7COpenCallbackConsole@@6B@
.rdata:00005DDC ; const COpenCallbackConsole::`vftable'
.rdata:00005DDC ??_7COpenCallbackConsole@@6B@ dd offset ?Open_CheckBreak@COpenCallbackConsole@@UAEJXZ
.rdata:00005DDC                                         ; DATA XREF: COpenCallbackConsole::COpenCallbackConsole(void)+38o
.rdata:00005DDC                                         ; COpenCallbackConsole::Open_CheckBreak(void)
.rdata:00005DE0                 dd offset ?Open_SetTotal@COpenCallbackConsole@@UAEJPB_K0@Z ; COpenCallbackConsole::Open_SetTotal(unsigned __int64 const *,unsigned __int64 const *)
.rdata:00005DE4                 dd offset ?Open_SetCompleted@COpenCallbackConsole@@UAEJPB_K0@Z ; COpenCallbackConsole::Open_SetCompleted(unsigned __int64 const *,unsigned __int64 const *)
.rdata:00005DE8                 dd offset ?Open_Finished@COpenCallbackConsole@@UAEJXZ ; COpenCallbackConsole::Open_Finished(void)
.rdata:00005DEC                 dd offset ?Open_CryptoGetTextPassword@COpenCallbackConsole@@UAEJPAPA_W@Z ; COpenCallbackConsole::Open_CryptoGetTextPassword(wchar_t * *)
.rdata:00005DEC _rdata          ends
.rdata:00005DEC
.xdata$x:00005DF0 ; ===========================================================================
.xdata$x:00005DF0
.xdata$x:00005DF0 ; Segment type: Pure data
.xdata$x:00005DF0 ; Segment permissions: Read
.xdata$x:00005DF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005DF0                 assume cs:_xdata$x
.xdata$x:00005DF0                 ;org 5DF0h
.xdata$x:00005DF0 ; COMDAT (pick associative to section at 5D00)
.xdata$x:00005DF0 __unwindtable$??0COpenCallbackConsole@@QAE@XZ db 0FFh
.xdata$x:00005DF0                                         ; DATA XREF: .xdata$x:00005E00o
.xdata$x:00005DF1                 db 0FFh
.xdata$x:00005DF2                 db 0FFh
.xdata$x:00005DF3                 db 0FFh
.xdata$x:00005DF4                 dd offset __unwindfunclet$??0COpenCallbackConsole@@QAE@XZ$0
.xdata$x:00005DF8 __ehfuncinfo$??0COpenCallbackConsole@@QAE@XZ db  22h ; "
.xdata$x:00005DF8                                         ; DATA XREF: __ehhandler$??0COpenCallbackConsole@@QAE@XZ+11o
.xdata$x:00005DF9                 db    5
.xdata$x:00005DFA                 db  93h ; ô
.xdata$x:00005DFB                 db  19h
.xdata$x:00005DFC                 db    1
.xdata$x:00005DFD                 db    0
.xdata$x:00005DFE                 db    0
.xdata$x:00005DFF                 db    0
.xdata$x:00005E00                 dd offset __unwindtable$??0COpenCallbackConsole@@QAE@XZ
.xdata$x:00005E04                 db    0
.xdata$x:00005E05                 db    0
.xdata$x:00005E06                 db    0
.xdata$x:00005E07                 db    0
.xdata$x:00005E08                 db    0
.xdata$x:00005E09                 db    0
.xdata$x:00005E0A                 db    0
.xdata$x:00005E0B                 db    0
.xdata$x:00005E0C                 db    0
.xdata$x:00005E0D                 db    0
.xdata$x:00005E0E                 db    0
.xdata$x:00005E0F                 db    0
.xdata$x:00005E10                 db    0
.xdata$x:00005E11                 db    0
.xdata$x:00005E12                 db    0
.xdata$x:00005E13                 db    0
.xdata$x:00005E14                 db    0
.xdata$x:00005E15                 db    0
.xdata$x:00005E16                 db    0
.xdata$x:00005E17                 db    0
.xdata$x:00005E18                 db    1
.xdata$x:00005E19                 db    0
.xdata$x:00005E1A                 db    0
.xdata$x:00005E1B                 db    0
.xdata$x:00005E1B _xdata$x        ends
.xdata$x:00005E1B
.rdata$r:00005E1C ; ===========================================================================
.rdata$r:00005E1C
.rdata$r:00005E1C ; Segment type: Pure data
.rdata$r:00005E1C ; Segment permissions: Read
.rdata$r:00005E1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005E1C                 assume cs:_rdata$r
.rdata$r:00005E1C                 ;org 5E1Ch
.rdata$r:00005E1C ; COMDAT (pick any)
.rdata$r:00005E1C                 public ??_R4COpenCallbackConsole@@6B@
.rdata$r:00005E1C ; const COpenCallbackConsole::`RTTI Complete Object Locator'
.rdata$r:00005E1C ??_R4COpenCallbackConsole@@6B@ db    0  ; DATA XREF: .rdata:00005DD8o
.rdata$r:00005E1D                 db    0
.rdata$r:00005E1E                 db    0
.rdata$r:00005E1F                 db    0
.rdata$r:00005E20                 db    0
.rdata$r:00005E21                 db    0
.rdata$r:00005E22                 db    0
.rdata$r:00005E23                 db    0
.rdata$r:00005E24                 db    0
.rdata$r:00005E25                 db    0
.rdata$r:00005E26                 db    0
.rdata$r:00005E27                 db    0
.rdata$r:00005E28                 dd offset ??_R0?AVCOpenCallbackConsole@@@8 ; COpenCallbackConsole `RTTI Type Descriptor'
.rdata$r:00005E2C                 dd offset ??_R3COpenCallbackConsole@@8 ; COpenCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005E2C _rdata$r        ends
.rdata$r:00005E2C
.data:00005E30 ; ===========================================================================
.data:00005E30
.data:00005E30 ; Segment type: Pure data
.data:00005E30 ; Segment permissions: Read/Write
.data:00005E30 _data           segment dword public 'DATA' use32
.data:00005E30                 assume cs:_data
.data:00005E30                 ;org 5E30h
.data:00005E30 ; COMDAT (pick any)
.data:00005E30                 public ??_R0?AVCOpenCallbackConsole@@@8
.data:00005E30 ; class COpenCallbackConsole `RTTI Type Descriptor'
.data:00005E30 ??_R0?AVCOpenCallbackConsole@@@8 dd offset ??_7type_info@@6B@
.data:00005E30                                         ; DATA XREF: .rdata$r:00005E28o
.data:00005E30                                         ; .rdata$r:COpenCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005E30                                         ; const type_info::`vftable'
.data:00005E34                 align 8
.data:00005E38 a_?avcopencallb db '.?AVCOpenCallbackConsole@@',0
.data:00005E53                 align 4
.data:00005E53 _data           ends
.data:00005E53
.rdata$r:00005E54 ; ===========================================================================
.rdata$r:00005E54
.rdata$r:00005E54 ; Segment type: Pure data
.rdata$r:00005E54 ; Segment permissions: Read
.rdata$r:00005E54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005E54                 assume cs:_rdata$r
.rdata$r:00005E54                 ;org 5E54h
.rdata$r:00005E54 ; COMDAT (pick any)
.rdata$r:00005E54                 public ??_R3COpenCallbackConsole@@8
.rdata$r:00005E54 ; COpenCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005E54 ??_R3COpenCallbackConsole@@8 db    0    ; DATA XREF: .rdata$r:00005E2Co
.rdata$r:00005E54                                         ; .rdata$r:00005E88o
.rdata$r:00005E55                 db    0
.rdata$r:00005E56                 db    0
.rdata$r:00005E57                 db    0
.rdata$r:00005E58                 db    0
.rdata$r:00005E59                 db    0
.rdata$r:00005E5A                 db    0
.rdata$r:00005E5B                 db    0
.rdata$r:00005E5C                 db    2
.rdata$r:00005E5D                 db    0
.rdata$r:00005E5E                 db    0
.rdata$r:00005E5F                 db    0
.rdata$r:00005E60                 dd offset ??_R2COpenCallbackConsole@@8 ; COpenCallbackConsole::`RTTI Base Class Array'
.rdata$r:00005E60 _rdata$r        ends
.rdata$r:00005E60
.rdata$r:00005E64 ; ===========================================================================
.rdata$r:00005E64
.rdata$r:00005E64 ; Segment type: Pure data
.rdata$r:00005E64 ; Segment permissions: Read
.rdata$r:00005E64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005E64                 assume cs:_rdata$r
.rdata$r:00005E64                 ;org 5E64h
.rdata$r:00005E64 ; COMDAT (pick any)
.rdata$r:00005E64                 public ??_R2COpenCallbackConsole@@8
.rdata$r:00005E64 ; COpenCallbackConsole::`RTTI Base Class Array'
.rdata$r:00005E64 ??_R2COpenCallbackConsole@@8 dd offset ??_R1A@?0A@EA@COpenCallbackConsole@@8
.rdata$r:00005E64                                         ; DATA XREF: .rdata$r:00005E60o
.rdata$r:00005E64                                         ; COpenCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005E68                 dd offset ??_R1A@?0A@EA@IOpenCallbackUI@@8 ; IOpenCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005E6C                 db    0
.rdata$r:00005E6D                 align 10h
.rdata$r:00005E6D _rdata$r        ends
.rdata$r:00005E6D
.rdata$r:00005E70 ; ===========================================================================
.rdata$r:00005E70
.rdata$r:00005E70 ; Segment type: Pure data
.rdata$r:00005E70 ; Segment permissions: Read
.rdata$r:00005E70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005E70                 assume cs:_rdata$r
.rdata$r:00005E70                 ;org 5E70h
.rdata$r:00005E70 ; COMDAT (pick any)
.rdata$r:00005E70                 public ??_R1A@?0A@EA@COpenCallbackConsole@@8
.rdata$r:00005E70 ; COpenCallbackConsole::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005E70 ??_R1A@?0A@EA@COpenCallbackConsole@@8 dd offset ??_R0?AVCOpenCallbackConsole@@@8
.rdata$r:00005E70                                         ; DATA XREF: .rdata$r:COpenCallbackConsole::`RTTI Base Class Array'o
.rdata$r:00005E70                                         ; COpenCallbackConsole `RTTI Type Descriptor'
.rdata$r:00005E74                 db    1
.rdata$r:00005E75                 db    0
.rdata$r:00005E76                 db    0
.rdata$r:00005E77                 db    0
.rdata$r:00005E78                 db    0
.rdata$r:00005E79                 db    0
.rdata$r:00005E7A                 db    0
.rdata$r:00005E7B                 db    0
.rdata$r:00005E7C                 db 0FFh
.rdata$r:00005E7D                 db 0FFh
.rdata$r:00005E7E                 db 0FFh
.rdata$r:00005E7F                 db 0FFh
.rdata$r:00005E80                 db    0
.rdata$r:00005E81                 db    0
.rdata$r:00005E82                 db    0
.rdata$r:00005E83                 db    0
.rdata$r:00005E84                 db  40h ; @
.rdata$r:00005E85                 db    0
.rdata$r:00005E86                 db    0
.rdata$r:00005E87                 db    0
.rdata$r:00005E88                 dd offset ??_R3COpenCallbackConsole@@8 ; COpenCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005E88 _rdata$r        ends
.rdata$r:00005E88
.rdata$r:00005E8C ; ===========================================================================
.rdata$r:00005E8C
.rdata$r:00005E8C ; Segment type: Pure data
.rdata$r:00005E8C ; Segment permissions: Read
.rdata$r:00005E8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005E8C                 assume cs:_rdata$r
.rdata$r:00005E8C                 ;org 5E8Ch
.rdata$r:00005E8C ; COMDAT (pick any)
.rdata$r:00005E8C                 public ??_R1A@?0A@EA@IOpenCallbackUI@@8
.rdata$r:00005E8C ; IOpenCallbackUI::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005E8C ??_R1A@?0A@EA@IOpenCallbackUI@@8 dd offset ??_R0?AUIOpenCallbackUI@@@8
.rdata$r:00005E8C                                         ; DATA XREF: .rdata$r:00005E68o
.rdata$r:00005E8C                                         ; .rdata$r:IOpenCallbackUI::`RTTI Base Class Array'o
.rdata$r:00005E8C                                         ; IOpenCallbackUI `RTTI Type Descriptor'
.rdata$r:00005E90                 db    0
.rdata$r:00005E91                 db    0
.rdata$r:00005E92                 db    0
.rdata$r:00005E93                 db    0
.rdata$r:00005E94                 db    0
.rdata$r:00005E95                 db    0
.rdata$r:00005E96                 db    0
.rdata$r:00005E97                 db    0
.rdata$r:00005E98                 db 0FFh
.rdata$r:00005E99                 db 0FFh
.rdata$r:00005E9A                 db 0FFh
.rdata$r:00005E9B                 db 0FFh
.rdata$r:00005E9C                 db    0
.rdata$r:00005E9D                 db    0
.rdata$r:00005E9E                 db    0
.rdata$r:00005E9F                 db    0
.rdata$r:00005EA0                 db  40h ; @
.rdata$r:00005EA1                 db    0
.rdata$r:00005EA2                 db    0
.rdata$r:00005EA3                 db    0
.rdata$r:00005EA4                 dd offset ??_R3IOpenCallbackUI@@8 ; IOpenCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005EA4 _rdata$r        ends
.rdata$r:00005EA4
.data:00005EA8 ; ===========================================================================
.data:00005EA8
.data:00005EA8 ; Segment type: Pure data
.data:00005EA8 ; Segment permissions: Read/Write
.data:00005EA8 _data           segment dword public 'DATA' use32
.data:00005EA8                 assume cs:_data
.data:00005EA8                 ;org 5EA8h
.data:00005EA8 ; COMDAT (pick any)
.data:00005EA8                 public ??_R0?AUIOpenCallbackUI@@@8
.data:00005EA8 ; struct IOpenCallbackUI `RTTI Type Descriptor'
.data:00005EA8 ??_R0?AUIOpenCallbackUI@@@8 dd offset ??_7type_info@@6B@
.data:00005EA8                                         ; DATA XREF: .rdata$r:IOpenCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005EA8                                         ; .rdata$r:000062A4o
.data:00005EA8                                         ; const type_info::`vftable'
.data:00005EAC                 align 10h
.data:00005EB0 a_?auiopencallb db '.?AUIOpenCallbackUI@@',0
.data:00005EC6                 align 4
.data:00005EC6 _data           ends
.data:00005EC6
.rdata$r:00005EC8 ; ===========================================================================
.rdata$r:00005EC8
.rdata$r:00005EC8 ; Segment type: Pure data
.rdata$r:00005EC8 ; Segment permissions: Read
.rdata$r:00005EC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005EC8                 assume cs:_rdata$r
.rdata$r:00005EC8                 ;org 5EC8h
.rdata$r:00005EC8 ; COMDAT (pick any)
.rdata$r:00005EC8                 public ??_R3IOpenCallbackUI@@8
.rdata$r:00005EC8 ; IOpenCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005EC8 ??_R3IOpenCallbackUI@@8 db    0         ; DATA XREF: .rdata$r:00005EA4o
.rdata$r:00005EC8                                         ; .rdata$r:000062A8o
.rdata$r:00005EC9                 db    0
.rdata$r:00005ECA                 db    0
.rdata$r:00005ECB                 db    0
.rdata$r:00005ECC                 db    0
.rdata$r:00005ECD                 db    0
.rdata$r:00005ECE                 db    0
.rdata$r:00005ECF                 db    0
.rdata$r:00005ED0                 db    1
.rdata$r:00005ED1                 db    0
.rdata$r:00005ED2                 db    0
.rdata$r:00005ED3                 db    0
.rdata$r:00005ED4                 dd offset ??_R2IOpenCallbackUI@@8 ; IOpenCallbackUI::`RTTI Base Class Array'
.rdata$r:00005ED4 _rdata$r        ends
.rdata$r:00005ED4
.rdata$r:00005ED8 ; ===========================================================================
.rdata$r:00005ED8
.rdata$r:00005ED8 ; Segment type: Pure data
.rdata$r:00005ED8 ; Segment permissions: Read
.rdata$r:00005ED8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005ED8                 assume cs:_rdata$r
.rdata$r:00005ED8                 ;org 5ED8h
.rdata$r:00005ED8 ; COMDAT (pick any)
.rdata$r:00005ED8                 public ??_R2IOpenCallbackUI@@8
.rdata$r:00005ED8 ; IOpenCallbackUI::`RTTI Base Class Array'
.rdata$r:00005ED8 ??_R2IOpenCallbackUI@@8 dd offset ??_R1A@?0A@EA@IOpenCallbackUI@@8
.rdata$r:00005ED8                                         ; DATA XREF: .rdata$r:00005ED4o
.rdata$r:00005ED8                                         ; IOpenCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005EDC                 db    0
.rdata$r:00005EDD                 align 10h
.rdata$r:00005EDD _rdata$r        ends
.rdata$r:00005EDD
.text:00005EE0 ; ===========================================================================
.text:00005EE0
.text:00005EE0 ; Segment type: Pure code
.text:00005EE0 ; Segment permissions: Read/Execute
.text:00005EE0 _text           segment para public 'CODE' use32
.text:00005EE0                 assume cs:_text
.text:00005EE0                 ;org 5EE0h
.text:00005EE0 ; COMDAT (pick any)
.text:00005EE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005EE0
.text:00005EE0 ; =============== S U B R O U T I N E =======================================
.text:00005EE0
.text:00005EE0 ; Attributes: bp-based frame
.text:00005EE0
.text:00005EE0 ; public: __thiscall CPercentPrinter::CPercentPrinter(unsigned int)
.text:00005EE0                 public ??0CPercentPrinter@@QAE@I@Z
.text:00005EE0 ??0CPercentPrinter@@QAE@I@Z proc near   ; CODE XREF: COpenCallbackConsole::COpenCallbackConsole(void)+49p
.text:00005EE0
.text:00005EE0 var_10          = dword ptr -10h
.text:00005EE0 var_C           = dword ptr -0Ch
.text:00005EE0 var_4           = dword ptr -4
.text:00005EE0 arg_0           = dword ptr  8
.text:00005EE0
.text:00005EE0                 push    ebp
.text:00005EE1                 mov     ebp, esp
.text:00005EE3                 push    0FFFFFFFFh
.text:00005EE5                 push    offset __ehhandler$??0CPercentPrinter@@QAE@I@Z
.text:00005EEA                 mov     eax, large fs:0
.text:00005EF0                 push    eax
.text:00005EF1                 push    ecx
.text:00005EF2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005EF9                 mov     eax, dword ptr ds:___security_cookie
.text:00005EFE                 xor     eax, ebp
.text:00005F00                 push    eax
.text:00005F01                 lea     eax, [ebp+var_C]
.text:00005F04                 mov     large fs:0, eax
.text:00005F0A                 mov     [ebp+var_10], ecx
.text:00005F0D                 mov     ecx, [ebp+var_10] ; this
.text:00005F10                 call    ??0CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::CPercentPrinterState(void)
.text:00005F15                 mov     [ebp+var_4], 0
.text:00005F1C                 mov     eax, [ebp+var_10]
.text:00005F1F                 mov     ecx, [ebp+arg_0]
.text:00005F22                 mov     [eax+30h], ecx
.text:00005F25                 mov     edx, [ebp+var_10]
.text:00005F28                 mov     dword ptr [edx+34h], 0
.text:00005F2F                 mov     ecx, [ebp+var_10]
.text:00005F32                 add     ecx, 38h ; '8'
.text:00005F35                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00005F3A                 mov     byte ptr [ebp+var_4], 1
.text:00005F3E                 mov     ecx, [ebp+var_10]
.text:00005F41                 add     ecx, 44h ; 'D'
.text:00005F44                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00005F49                 mov     byte ptr [ebp+var_4], 2
.text:00005F4D                 mov     ecx, [ebp+var_10]
.text:00005F50                 add     ecx, 50h ; 'P'
.text:00005F53                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00005F58                 mov     byte ptr [ebp+var_4], 3
.text:00005F5C                 mov     ecx, [ebp+var_10]
.text:00005F5F                 add     ecx, 5Ch ; '\'
.text:00005F62                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005F67                 mov     byte ptr [ebp+var_4], 4
.text:00005F6B                 mov     ecx, [ebp+var_10]
.text:00005F6E                 add     ecx, 68h ; 'h'  ; this
.text:00005F71                 call    ??0CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::CPercentPrinterState(void)
.text:00005F76                 mov     byte ptr [ebp+var_4], 5
.text:00005F7A                 mov     ecx, [ebp+var_10]
.text:00005F7D                 add     ecx, 98h ; 'ÿ'
.text:00005F83                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00005F88                 mov     eax, [ebp+var_10]
.text:00005F8B                 mov     byte ptr [eax+0A8h], 1
.text:00005F92                 mov     ecx, [ebp+var_10]
.text:00005F95                 mov     dword ptr [ecx+0ACh], 4Fh ; 'O'
.text:00005F9F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005FA6                 mov     eax, [ebp+var_10]
.text:00005FA9                 mov     ecx, [ebp+var_C]
.text:00005FAC                 mov     large fs:0, ecx
.text:00005FB3                 pop     ecx
.text:00005FB4                 add     esp, 10h
.text:00005FB7                 cmp     ebp, esp
.text:00005FB9                 call    __RTC_CheckEsp
.text:00005FBE                 mov     esp, ebp
.text:00005FC0                 pop     ebp
.text:00005FC1                 retn    4
.text:00005FC1 ??0CPercentPrinter@@QAE@I@Z endp
.text:00005FC1
.text:00005FC1 _text           ends
.text:00005FC1
.text$x:00005FC4 ; ===========================================================================
.text$x:00005FC4
.text$x:00005FC4 ; Segment type: Pure code
.text$x:00005FC4 ; Segment permissions: Read/Execute
.text$x:00005FC4 _text$x         segment para public 'CODE' use32
.text$x:00005FC4                 assume cs:_text$x
.text$x:00005FC4                 ;org 5FC4h
.text$x:00005FC4 ; COMDAT (pick associative to section at 5EE0)
.text$x:00005FC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005FC4
.text$x:00005FC4 ; =============== S U B R O U T I N E =======================================
.text$x:00005FC4
.text$x:00005FC4
.text$x:00005FC4 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$0 proc near
.text$x:00005FC4                                         ; DATA XREF: .xdata$x:00006048o
.text$x:00005FC4                 mov     ecx, [ebp-10h]  ; this
.text$x:00005FC7                 jmp     ??1CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::~CPercentPrinterState(void)
.text$x:00005FC7 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$0 endp
.text$x:00005FC7
.text$x:00005FCC
.text$x:00005FCC ; =============== S U B R O U T I N E =======================================
.text$x:00005FCC
.text$x:00005FCC
.text$x:00005FCC __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$1 proc near
.text$x:00005FCC                                         ; DATA XREF: .xdata$x:00006050o
.text$x:00005FCC                 mov     ecx, [ebp-10h]
.text$x:00005FCF                 add     ecx, 38h ; '8'  ; this
.text$x:00005FD2                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00005FD2 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$1 endp
.text$x:00005FD2
.text$x:00005FD7
.text$x:00005FD7 ; =============== S U B R O U T I N E =======================================
.text$x:00005FD7
.text$x:00005FD7
.text$x:00005FD7 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$2 proc near
.text$x:00005FD7                                         ; DATA XREF: .xdata$x:00006058o
.text$x:00005FD7                 mov     ecx, [ebp-10h]
.text$x:00005FDA                 add     ecx, 44h ; 'D'  ; this
.text$x:00005FDD                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00005FDD __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$2 endp
.text$x:00005FDD
.text$x:00005FE2
.text$x:00005FE2 ; =============== S U B R O U T I N E =======================================
.text$x:00005FE2
.text$x:00005FE2
.text$x:00005FE2 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$3 proc near
.text$x:00005FE2                                         ; DATA XREF: .xdata$x:00006060o
.text$x:00005FE2                 mov     ecx, [ebp-10h]
.text$x:00005FE5                 add     ecx, 50h ; 'P'  ; this
.text$x:00005FE8                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00005FE8 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$3 endp
.text$x:00005FE8
.text$x:00005FED
.text$x:00005FED ; =============== S U B R O U T I N E =======================================
.text$x:00005FED
.text$x:00005FED
.text$x:00005FED __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$4 proc near
.text$x:00005FED                                         ; DATA XREF: .xdata$x:00006068o
.text$x:00005FED                 mov     ecx, [ebp-10h]
.text$x:00005FF0                 add     ecx, 5Ch ; '\'  ; this
.text$x:00005FF3                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005FF3 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$4 endp
.text$x:00005FF3
.text$x:00005FF8
.text$x:00005FF8 ; =============== S U B R O U T I N E =======================================
.text$x:00005FF8
.text$x:00005FF8
.text$x:00005FF8 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$5 proc near
.text$x:00005FF8                                         ; DATA XREF: .xdata$x:00006070o
.text$x:00005FF8                 mov     ecx, [ebp-10h]
.text$x:00005FFB                 add     ecx, 68h ; 'h'  ; this
.text$x:00005FFE                 jmp     ??1CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::~CPercentPrinterState(void)
.text$x:00005FFE __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$5 endp
.text$x:00005FFE
.text$x:00006003
.text$x:00006003 ; =============== S U B R O U T I N E =======================================
.text$x:00006003
.text$x:00006003
.text$x:00006003 __ehhandler$??0CPercentPrinter@@QAE@I@Z proc near
.text$x:00006003                                         ; DATA XREF: CPercentPrinter::CPercentPrinter(uint)+5o
.text$x:00006003
.text$x:00006003 arg_4           = dword ptr  8
.text$x:00006003
.text$x:00006003                 mov     edx, [esp+arg_4]
.text$x:00006007                 lea     eax, [edx+0Ch]
.text$x:0000600A                 mov     ecx, [edx-8]
.text$x:0000600D                 xor     ecx, eax
.text$x:0000600F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006014                 mov     eax, offset __ehfuncinfo$??0CPercentPrinter@@QAE@I@Z
.text$x:00006019                 jmp     ___CxxFrameHandler3
.text$x:00006019 __ehhandler$??0CPercentPrinter@@QAE@I@Z endp
.text$x:00006019
.text$x:00006019 ; ---------------------------------------------------------------------------
.text$x:0000601E                 align 10h
.text$x:0000601E _text$x         ends
.text$x:0000601E
.xdata$x:00006020 ; ===========================================================================
.xdata$x:00006020
.xdata$x:00006020 ; Segment type: Pure data
.xdata$x:00006020 ; Segment permissions: Read
.xdata$x:00006020 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006020                 assume cs:_xdata$x
.xdata$x:00006020                 ;org 6020h
.xdata$x:00006020 ; COMDAT (pick associative to section at 5EE0)
.xdata$x:00006020 __ehfuncinfo$??0CPercentPrinter@@QAE@I@Z db  22h ; "
.xdata$x:00006020                                         ; DATA XREF: __ehhandler$??0CPercentPrinter@@QAE@I@Z+11o
.xdata$x:00006021                 db    5
.xdata$x:00006022                 db  93h ; ô
.xdata$x:00006023                 db  19h
.xdata$x:00006024                 db    6
.xdata$x:00006025                 db    0
.xdata$x:00006026                 db    0
.xdata$x:00006027                 db    0
.xdata$x:00006028                 dd offset __unwindtable$??0CPercentPrinter@@QAE@I@Z
.xdata$x:0000602C                 align 20h
.xdata$x:00006040                 db    1
.xdata$x:00006041                 db    0
.xdata$x:00006042                 db    0
.xdata$x:00006043                 db    0
.xdata$x:00006044 __unwindtable$??0CPercentPrinter@@QAE@I@Z db 0FFh
.xdata$x:00006044                                         ; DATA XREF: .xdata$x:00006028o
.xdata$x:00006045                 db 0FFh
.xdata$x:00006046                 db 0FFh
.xdata$x:00006047                 db 0FFh
.xdata$x:00006048                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$0
.xdata$x:0000604C                 align 10h
.xdata$x:00006050                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$1
.xdata$x:00006054                 db    1
.xdata$x:00006055                 db    0
.xdata$x:00006056                 db    0
.xdata$x:00006057                 db    0
.xdata$x:00006058                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$2
.xdata$x:0000605C                 db    2
.xdata$x:0000605D                 db    0
.xdata$x:0000605E                 db    0
.xdata$x:0000605F                 db    0
.xdata$x:00006060                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$3
.xdata$x:00006064                 db    3
.xdata$x:00006065                 db    0
.xdata$x:00006066                 db    0
.xdata$x:00006067                 db    0
.xdata$x:00006068                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$4
.xdata$x:0000606C                 db    4
.xdata$x:0000606D                 db    0
.xdata$x:0000606E                 db    0
.xdata$x:0000606F                 db    0
.xdata$x:00006070                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$5
.xdata$x:00006070 _xdata$x        ends
.xdata$x:00006070
.text:00006074 ; ===========================================================================
.text:00006074
.text:00006074 ; Segment type: Pure code
.text:00006074 ; Segment permissions: Read/Execute
.text:00006074 _text           segment para public 'CODE' use32
.text:00006074                 assume cs:_text
.text:00006074                 ;org 6074h
.text:00006074 ; COMDAT (pick any)
.text:00006074                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006074
.text:00006074 ; =============== S U B R O U T I N E =======================================
.text:00006074
.text:00006074 ; Attributes: bp-based frame
.text:00006074
.text:00006074 ; _DWORD __thiscall CPercentPrinterState::CPercentPrinterState(CPercentPrinterState *__hidden this)
.text:00006074                 public ??0CPercentPrinterState@@QAE@XZ
.text:00006074 ??0CPercentPrinterState@@QAE@XZ proc near
.text:00006074                                         ; CODE XREF: CPercentPrinter::CPercentPrinter(uint)+30p
.text:00006074                                         ; CPercentPrinter::CPercentPrinter(uint)+91p
.text:00006074
.text:00006074 var_10          = dword ptr -10h
.text:00006074 var_C           = dword ptr -0Ch
.text:00006074 var_4           = dword ptr -4
.text:00006074
.text:00006074                 push    ebp
.text:00006075                 mov     ebp, esp
.text:00006077                 push    0FFFFFFFFh
.text:00006079                 push    offset __ehhandler$??0CPercentPrinterState@@QAE@XZ
.text:0000607E                 mov     eax, large fs:0
.text:00006084                 push    eax
.text:00006085                 push    ecx
.text:00006086                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000608D                 mov     eax, dword ptr ds:___security_cookie
.text:00006092                 xor     eax, ebp
.text:00006094                 push    eax
.text:00006095                 lea     eax, [ebp+var_C]
.text:00006098                 mov     large fs:0, eax
.text:0000609E                 mov     [ebp+var_10], ecx
.text:000060A1                 mov     eax, [ebp+var_10]
.text:000060A4                 mov     dword ptr [eax], 0
.text:000060AA                 mov     dword ptr [eax+4], 0
.text:000060B1                 mov     ecx, [ebp+var_10]
.text:000060B4                 mov     dword ptr [ecx+8], 0FFFFFFFFh
.text:000060BB                 mov     dword ptr [ecx+0Ch], 0FFFFFFFFh
.text:000060C2                 mov     edx, [ebp+var_10]
.text:000060C5                 mov     dword ptr [edx+10h], 0
.text:000060CC                 mov     dword ptr [edx+14h], 0
.text:000060D3                 mov     ecx, [ebp+var_10]
.text:000060D6                 add     ecx, 18h
.text:000060D9                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000060DE                 mov     [ebp+var_4], 0
.text:000060E5                 mov     ecx, [ebp+var_10]
.text:000060E8                 add     ecx, 24h ; '$'
.text:000060EB                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000060F0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000060F7                 mov     eax, [ebp+var_10]
.text:000060FA                 mov     ecx, [ebp+var_C]
.text:000060FD                 mov     large fs:0, ecx
.text:00006104                 pop     ecx
.text:00006105                 add     esp, 10h
.text:00006108                 cmp     ebp, esp
.text:0000610A                 call    __RTC_CheckEsp
.text:0000610F                 mov     esp, ebp
.text:00006111                 pop     ebp
.text:00006112                 retn
.text:00006112 ??0CPercentPrinterState@@QAE@XZ endp
.text:00006112
.text:00006112 ; ---------------------------------------------------------------------------
.text:00006113                 align 4
.text:00006113 _text           ends
.text:00006113
.text$x:00006114 ; ===========================================================================
.text$x:00006114
.text$x:00006114 ; Segment type: Pure code
.text$x:00006114 ; Segment permissions: Read/Execute
.text$x:00006114 _text$x         segment para public 'CODE' use32
.text$x:00006114                 assume cs:_text$x
.text$x:00006114                 ;org 6114h
.text$x:00006114 ; COMDAT (pick associative to section at 6074)
.text$x:00006114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006114
.text$x:00006114 ; =============== S U B R O U T I N E =======================================
.text$x:00006114
.text$x:00006114
.text$x:00006114 __unwindfunclet$??0CPercentPrinterState@@QAE@XZ$0 proc near
.text$x:00006114                                         ; DATA XREF: .xdata$x:00006140o
.text$x:00006114                 mov     ecx, [ebp-10h]
.text$x:00006117                 add     ecx, 18h        ; this
.text$x:0000611A                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000611A __unwindfunclet$??0CPercentPrinterState@@QAE@XZ$0 endp
.text$x:0000611A
.text$x:0000611F
.text$x:0000611F ; =============== S U B R O U T I N E =======================================
.text$x:0000611F
.text$x:0000611F
.text$x:0000611F __ehhandler$??0CPercentPrinterState@@QAE@XZ proc near
.text$x:0000611F                                         ; DATA XREF: CPercentPrinterState::CPercentPrinterState(void)+5o
.text$x:0000611F
.text$x:0000611F arg_4           = dword ptr  8
.text$x:0000611F
.text$x:0000611F                 mov     edx, [esp+arg_4]
.text$x:00006123                 lea     eax, [edx+0Ch]
.text$x:00006126                 mov     ecx, [edx-8]
.text$x:00006129                 xor     ecx, eax
.text$x:0000612B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006130                 mov     eax, offset __ehfuncinfo$??0CPercentPrinterState@@QAE@XZ
.text$x:00006135                 jmp     ___CxxFrameHandler3
.text$x:00006135 __ehhandler$??0CPercentPrinterState@@QAE@XZ endp
.text$x:00006135
.text$x:00006135 ; ---------------------------------------------------------------------------
.text$x:0000613A                 align 4
.text$x:0000613A _text$x         ends
.text$x:0000613A
.xdata$x:0000613C ; ===========================================================================
.xdata$x:0000613C
.xdata$x:0000613C ; Segment type: Pure data
.xdata$x:0000613C ; Segment permissions: Read
.xdata$x:0000613C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000613C                 assume cs:_xdata$x
.xdata$x:0000613C                 ;org 613Ch
.xdata$x:0000613C ; COMDAT (pick associative to section at 6074)
.xdata$x:0000613C __unwindtable$??0CPercentPrinterState@@QAE@XZ db 0FFh
.xdata$x:0000613C                                         ; DATA XREF: .xdata$x:0000614Co
.xdata$x:0000613D                 db 0FFh
.xdata$x:0000613E                 db 0FFh
.xdata$x:0000613F                 db 0FFh
.xdata$x:00006140                 dd offset __unwindfunclet$??0CPercentPrinterState@@QAE@XZ$0
.xdata$x:00006144 __ehfuncinfo$??0CPercentPrinterState@@QAE@XZ db  22h ; "
.xdata$x:00006144                                         ; DATA XREF: __ehhandler$??0CPercentPrinterState@@QAE@XZ+11o
.xdata$x:00006145                 db    5
.xdata$x:00006146                 db  93h ; ô
.xdata$x:00006147                 db  19h
.xdata$x:00006148                 db    1
.xdata$x:00006149                 db    0
.xdata$x:0000614A                 db    0
.xdata$x:0000614B                 db    0
.xdata$x:0000614C                 dd offset __unwindtable$??0CPercentPrinterState@@QAE@XZ
.xdata$x:00006150                 db    0
.xdata$x:00006151                 db    0
.xdata$x:00006152                 db    0
.xdata$x:00006153                 db    0
.xdata$x:00006154                 db    0
.xdata$x:00006155                 db    0
.xdata$x:00006156                 db    0
.xdata$x:00006157                 db    0
.xdata$x:00006158                 db    0
.xdata$x:00006159                 db    0
.xdata$x:0000615A                 db    0
.xdata$x:0000615B                 db    0
.xdata$x:0000615C                 db    0
.xdata$x:0000615D                 db    0
.xdata$x:0000615E                 db    0
.xdata$x:0000615F                 db    0
.xdata$x:00006160                 db    0
.xdata$x:00006161                 db    0
.xdata$x:00006162                 db    0
.xdata$x:00006163                 db    0
.xdata$x:00006164                 db    1
.xdata$x:00006165                 db    0
.xdata$x:00006166                 db    0
.xdata$x:00006167                 db    0
.xdata$x:00006167 _xdata$x        ends
.xdata$x:00006167
.text:00006168 ; ===========================================================================
.text:00006168
.text:00006168 ; Segment type: Pure code
.text:00006168 ; Segment permissions: Read/Execute
.text:00006168 _text           segment para public 'CODE' use32
.text:00006168                 assume cs:_text
.text:00006168                 ;org 6168h
.text:00006168 ; COMDAT (pick any)
.text:00006168                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006168
.text:00006168 ; =============== S U B R O U T I N E =======================================
.text:00006168
.text:00006168 ; Attributes: bp-based frame
.text:00006168
.text:00006168 ; _DWORD __thiscall CPercentPrinterState::~CPercentPrinterState(CPercentPrinterState *__hidden this)
.text:00006168                 public ??1CPercentPrinterState@@QAE@XZ
.text:00006168 ??1CPercentPrinterState@@QAE@XZ proc near
.text:00006168                                         ; CODE XREF: __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$0+3j
.text:00006168                                         ; __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$5+6j
.text:00006168
.text:00006168 var_10          = dword ptr -10h
.text:00006168 var_C           = dword ptr -0Ch
.text:00006168 var_4           = dword ptr -4
.text:00006168
.text:00006168                 push    ebp
.text:00006169                 mov     ebp, esp
.text:0000616B                 push    0FFFFFFFFh
.text:0000616D                 push    offset __ehhandler$??1CPercentPrinterState@@QAE@XZ
.text:00006172                 mov     eax, large fs:0
.text:00006178                 push    eax
.text:00006179                 push    ecx
.text:0000617A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006181                 mov     eax, dword ptr ds:___security_cookie
.text:00006186                 xor     eax, ebp
.text:00006188                 push    eax
.text:00006189                 lea     eax, [ebp+var_C]
.text:0000618C                 mov     large fs:0, eax
.text:00006192                 mov     [ebp+var_10], ecx
.text:00006195                 mov     [ebp+var_4], 0
.text:0000619C                 mov     ecx, [ebp+var_10]
.text:0000619F                 add     ecx, 24h ; '$'  ; this
.text:000061A2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000061A7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000061AE                 mov     ecx, [ebp+var_10]
.text:000061B1                 add     ecx, 18h        ; this
.text:000061B4                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000061B9                 mov     ecx, [ebp+var_C]
.text:000061BC                 mov     large fs:0, ecx
.text:000061C3                 pop     ecx
.text:000061C4                 add     esp, 10h
.text:000061C7                 cmp     ebp, esp
.text:000061C9                 call    __RTC_CheckEsp
.text:000061CE                 mov     esp, ebp
.text:000061D0                 pop     ebp
.text:000061D1                 retn
.text:000061D1 ??1CPercentPrinterState@@QAE@XZ endp
.text:000061D1
.text:000061D1 ; ---------------------------------------------------------------------------
.text:000061D2                 align 4
.text:000061D2 _text           ends
.text:000061D2
.text$x:000061D4 ; ===========================================================================
.text$x:000061D4
.text$x:000061D4 ; Segment type: Pure code
.text$x:000061D4 ; Segment permissions: Read/Execute
.text$x:000061D4 _text$x         segment para public 'CODE' use32
.text$x:000061D4                 assume cs:_text$x
.text$x:000061D4                 ;org 61D4h
.text$x:000061D4 ; COMDAT (pick associative to section at 6168)
.text$x:000061D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000061D4
.text$x:000061D4 ; =============== S U B R O U T I N E =======================================
.text$x:000061D4
.text$x:000061D4
.text$x:000061D4 __unwindfunclet$??1CPercentPrinterState@@QAE@XZ$0 proc near
.text$x:000061D4                                         ; DATA XREF: .xdata$x:00006200o
.text$x:000061D4                 mov     ecx, [ebp-10h]
.text$x:000061D7                 add     ecx, 18h        ; this
.text$x:000061DA                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000061DA __unwindfunclet$??1CPercentPrinterState@@QAE@XZ$0 endp
.text$x:000061DA
.text$x:000061DF
.text$x:000061DF ; =============== S U B R O U T I N E =======================================
.text$x:000061DF
.text$x:000061DF
.text$x:000061DF __ehhandler$??1CPercentPrinterState@@QAE@XZ proc near
.text$x:000061DF                                         ; DATA XREF: CPercentPrinterState::~CPercentPrinterState(void)+5o
.text$x:000061DF
.text$x:000061DF arg_4           = dword ptr  8
.text$x:000061DF
.text$x:000061DF                 mov     edx, [esp+arg_4]
.text$x:000061E3                 lea     eax, [edx+0Ch]
.text$x:000061E6                 mov     ecx, [edx-8]
.text$x:000061E9                 xor     ecx, eax
.text$x:000061EB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000061F0                 mov     eax, offset __ehfuncinfo$??1CPercentPrinterState@@QAE@XZ
.text$x:000061F5                 jmp     ___CxxFrameHandler3
.text$x:000061F5 __ehhandler$??1CPercentPrinterState@@QAE@XZ endp
.text$x:000061F5
.text$x:000061F5 ; ---------------------------------------------------------------------------
.text$x:000061FA                 align 4
.text$x:000061FA _text$x         ends
.text$x:000061FA
.xdata$x:000061FC ; ===========================================================================
.xdata$x:000061FC
.xdata$x:000061FC ; Segment type: Pure data
.xdata$x:000061FC ; Segment permissions: Read
.xdata$x:000061FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000061FC                 assume cs:_xdata$x
.xdata$x:000061FC                 ;org 61FCh
.xdata$x:000061FC ; COMDAT (pick associative to section at 6168)
.xdata$x:000061FC __unwindtable$??1CPercentPrinterState@@QAE@XZ db 0FFh
.xdata$x:000061FC                                         ; DATA XREF: .xdata$x:0000620Co
.xdata$x:000061FD                 db 0FFh
.xdata$x:000061FE                 db 0FFh
.xdata$x:000061FF                 db 0FFh
.xdata$x:00006200                 dd offset __unwindfunclet$??1CPercentPrinterState@@QAE@XZ$0
.xdata$x:00006204 __ehfuncinfo$??1CPercentPrinterState@@QAE@XZ db  22h ; "
.xdata$x:00006204                                         ; DATA XREF: __ehhandler$??1CPercentPrinterState@@QAE@XZ+11o
.xdata$x:00006205                 db    5
.xdata$x:00006206                 db  93h ; ô
.xdata$x:00006207                 db  19h
.xdata$x:00006208                 db    1
.xdata$x:00006209                 db    0
.xdata$x:0000620A                 db    0
.xdata$x:0000620B                 db    0
.xdata$x:0000620C                 dd offset __unwindtable$??1CPercentPrinterState@@QAE@XZ
.xdata$x:00006210                 db    0
.xdata$x:00006211                 db    0
.xdata$x:00006212                 db    0
.xdata$x:00006213                 db    0
.xdata$x:00006214                 db    0
.xdata$x:00006215                 db    0
.xdata$x:00006216                 db    0
.xdata$x:00006217                 db    0
.xdata$x:00006218                 db    0
.xdata$x:00006219                 db    0
.xdata$x:0000621A                 db    0
.xdata$x:0000621B                 db    0
.xdata$x:0000621C                 db    0
.xdata$x:0000621D                 db    0
.xdata$x:0000621E                 db    0
.xdata$x:0000621F                 db    0
.xdata$x:00006220                 db    0
.xdata$x:00006221                 db    0
.xdata$x:00006222                 db    0
.xdata$x:00006223                 db    0
.xdata$x:00006224                 db    1
.xdata$x:00006225                 db    0
.xdata$x:00006226                 db    0
.xdata$x:00006227                 db    0
.xdata$x:00006227 _xdata$x        ends
.xdata$x:00006227
.text:00006228 ; ===========================================================================
.text:00006228
.text:00006228 ; Segment type: Pure code
.text:00006228 ; Segment permissions: Read/Execute
.text:00006228 _text           segment para public 'CODE' use32
.text:00006228                 assume cs:_text
.text:00006228                 ;org 6228h
.text:00006228 ; COMDAT (pick any)
.text:00006228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006228
.text:00006228 ; =============== S U B R O U T I N E =======================================
.text:00006228
.text:00006228 ; Attributes: bp-based frame
.text:00006228
.text:00006228 ; void __thiscall COpenCallbackConsole::Init(COpenCallbackConsole *this, struct CStdOutStream *, struct CStdOutStream *, struct CStdOutStream *)
.text:00006228                 public ?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z
.text:00006228 ?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z proc near
.text:00006228                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+412p
.text:00006228
.text:00006228 var_4           = dword ptr -4
.text:00006228 arg_0           = dword ptr  8
.text:00006228 arg_4           = dword ptr  0Ch
.text:00006228 arg_8           = dword ptr  10h
.text:00006228
.text:00006228                 push    ebp
.text:00006229                 mov     ebp, esp
.text:0000622B                 push    ecx
.text:0000622C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006233                 mov     [ebp+var_4], ecx
.text:00006236                 mov     eax, [ebp+var_4]
.text:00006239                 mov     ecx, [ebp+arg_0]
.text:0000623C                 mov     [eax+0B8h], ecx
.text:00006242                 mov     edx, [ebp+var_4]
.text:00006245                 mov     eax, [ebp+arg_4]
.text:00006248                 mov     [edx+0BCh], eax
.text:0000624E                 mov     ecx, [ebp+var_4]
.text:00006251                 mov     edx, [ebp+arg_8]
.text:00006254                 mov     [ecx+0ACh], edx
.text:0000625A                 mov     esp, ebp
.text:0000625C                 pop     ebp
.text:0000625D                 retn    0Ch
.text:0000625D ?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z endp
.text:0000625D
.text:0000625D _text           ends
.text:0000625D
.text:00006260 ; ===========================================================================
.text:00006260
.text:00006260 ; Segment type: Pure code
.text:00006260 ; Segment permissions: Read/Execute
.text:00006260 _text           segment para public 'CODE' use32
.text:00006260                 assume cs:_text
.text:00006260                 ;org 6260h
.text:00006260 ; COMDAT (pick any)
.text:00006260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006260
.text:00006260 ; =============== S U B R O U T I N E =======================================
.text:00006260
.text:00006260 ; Attributes: bp-based frame
.text:00006260
.text:00006260 ; _DWORD __thiscall IOpenCallbackUI::IOpenCallbackUI(IOpenCallbackUI *__hidden this)
.text:00006260                 public ??0IOpenCallbackUI@@QAE@XZ
.text:00006260 ??0IOpenCallbackUI@@QAE@XZ proc near    ; CODE XREF: COpenCallbackConsole::COpenCallbackConsole(void)+30p
.text:00006260
.text:00006260 var_4           = dword ptr -4
.text:00006260
.text:00006260                 push    ebp
.text:00006261                 mov     ebp, esp
.text:00006263                 push    ecx
.text:00006264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000626B                 mov     [ebp+var_4], ecx
.text:0000626E                 mov     eax, [ebp+var_4]
.text:00006271                 mov     dword ptr [eax], offset ??_7IOpenCallbackUI@@6B@ ; const IOpenCallbackUI::`vftable'
.text:00006277                 mov     eax, [ebp+var_4]
.text:0000627A                 mov     esp, ebp
.text:0000627C                 pop     ebp
.text:0000627D                 retn
.text:0000627D ??0IOpenCallbackUI@@QAE@XZ endp
.text:0000627D
.text:0000627D ; ---------------------------------------------------------------------------
.text:0000627E                 align 10h
.text:0000627E _text           ends
.text:0000627E
.rdata:00006280 ; ===========================================================================
.rdata:00006280
.rdata:00006280 ; Segment type: Pure data
.rdata:00006280 ; Segment permissions: Read
.rdata:00006280 _rdata          segment dword public 'DATA' use32
.rdata:00006280                 assume cs:_rdata
.rdata:00006280                 ;org 6280h
.rdata:00006280 ; COMDAT (pick largest)
.rdata:00006280                 dd offset ??_R4IOpenCallbackUI@@6B@ ; const IOpenCallbackUI::`RTTI Complete Object Locator'
.rdata:00006284                 public ??_7IOpenCallbackUI@@6B@
.rdata:00006284 ; const IOpenCallbackUI::`vftable'
.rdata:00006284 ??_7IOpenCallbackUI@@6B@ dd offset __purecall
.rdata:00006284                                         ; DATA XREF: IOpenCallbackUI::IOpenCallbackUI(void)+11o
.rdata:00006288                 dd offset __purecall
.rdata:0000628C                 dd offset __purecall
.rdata:00006290                 dd offset __purecall
.rdata:00006294                 dd offset __purecall
.rdata:00006294 _rdata          ends
.rdata:00006294
.rdata$r:00006298 ; ===========================================================================
.rdata$r:00006298
.rdata$r:00006298 ; Segment type: Pure data
.rdata$r:00006298 ; Segment permissions: Read
.rdata$r:00006298 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006298                 assume cs:_rdata$r
.rdata$r:00006298                 ;org 6298h
.rdata$r:00006298 ; COMDAT (pick any)
.rdata$r:00006298                 public ??_R4IOpenCallbackUI@@6B@
.rdata$r:00006298 ; const IOpenCallbackUI::`RTTI Complete Object Locator'
.rdata$r:00006298 ??_R4IOpenCallbackUI@@6B@ db    0       ; DATA XREF: .rdata:00006280o
.rdata$r:00006299                 db    0
.rdata$r:0000629A                 db    0
.rdata$r:0000629B                 db    0
.rdata$r:0000629C                 db    0
.rdata$r:0000629D                 db    0
.rdata$r:0000629E                 db    0
.rdata$r:0000629F                 db    0
.rdata$r:000062A0                 db    0
.rdata$r:000062A1                 db    0
.rdata$r:000062A2                 db    0
.rdata$r:000062A3                 db    0
.rdata$r:000062A4                 dd offset ??_R0?AUIOpenCallbackUI@@@8 ; IOpenCallbackUI `RTTI Type Descriptor'
.rdata$r:000062A8                 dd offset ??_R3IOpenCallbackUI@@8 ; IOpenCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:000062A8 _rdata$r        ends
.rdata$r:000062A8
.text:000062AC ; ===========================================================================
.text:000062AC
.text:000062AC ; Segment type: Pure code
.text:000062AC ; Segment permissions: Read/Execute
.text:000062AC _text           segment para public 'CODE' use32
.text:000062AC                 assume cs:_text
.text:000062AC                 ;org 62ACh
.text:000062AC ; COMDAT (pick any)
.text:000062AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000062AC
.text:000062AC ; =============== S U B R O U T I N E =======================================
.text:000062AC
.text:000062AC ; Attributes: bp-based frame
.text:000062AC
.text:000062AC ; public: __thiscall CListStat::CListStat(void)
.text:000062AC                 public ??0CListStat@@QAE@XZ
.text:000062AC ??0CListStat@@QAE@XZ proc near          ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+113Ap
.text:000062AC                                         ; CListStat2::CListStat2(void)+11p ...
.text:000062AC
.text:000062AC var_4           = dword ptr -4
.text:000062AC
.text:000062AC                 push    ebp
.text:000062AD                 mov     ebp, esp
.text:000062AF                 push    ecx
.text:000062B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062B7                 mov     [ebp+var_4], ecx
.text:000062BA                 mov     ecx, [ebp+var_4]
.text:000062BD                 call    ??0CListUInt64Def@@QAE@XZ ; CListUInt64Def::CListUInt64Def(void)
.text:000062C2                 mov     ecx, [ebp+var_4]
.text:000062C5                 add     ecx, 10h
.text:000062C8                 call    ??0CListUInt64Def@@QAE@XZ ; CListUInt64Def::CListUInt64Def(void)
.text:000062CD                 mov     ecx, [ebp+var_4]
.text:000062D0                 add     ecx, 20h ; ' '  ; this
.text:000062D3                 call    ??0CListFileTimeDef@@QAE@XZ ; CListFileTimeDef::CListFileTimeDef(void)
.text:000062D8                 mov     eax, [ebp+var_4]
.text:000062DB                 mov     dword ptr [eax+30h], 0
.text:000062E2                 mov     dword ptr [eax+34h], 0
.text:000062E9                 mov     eax, [ebp+var_4]
.text:000062EC                 add     esp, 4
.text:000062EF                 cmp     ebp, esp
.text:000062F1                 call    __RTC_CheckEsp
.text:000062F6                 mov     esp, ebp
.text:000062F8                 pop     ebp
.text:000062F9                 retn
.text:000062F9 ??0CListStat@@QAE@XZ endp
.text:000062F9
.text:000062F9 ; ---------------------------------------------------------------------------
.text:000062FA                 align 4
.text:000062FA _text           ends
.text:000062FA
.text:000062FC ; ===========================================================================
.text:000062FC
.text:000062FC ; Segment type: Pure code
.text:000062FC ; Segment permissions: Read/Execute
.text:000062FC _text           segment para public 'CODE' use32
.text:000062FC                 assume cs:_text
.text:000062FC                 ;org 62FCh
.text:000062FC ; COMDAT (pick any)
.text:000062FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000062FC
.text:000062FC ; =============== S U B R O U T I N E =======================================
.text:000062FC
.text:000062FC ; Attributes: bp-based frame
.text:000062FC
.text:000062FC ; public: __thiscall CListUInt64Def::CListUInt64Def(void)
.text:000062FC                 public ??0CListUInt64Def@@QAE@XZ
.text:000062FC ??0CListUInt64Def@@QAE@XZ proc near     ; CODE XREF: CListStat::CListStat(void)+11p
.text:000062FC                                         ; CListStat::CListStat(void)+1Cp
.text:000062FC
.text:000062FC var_4           = dword ptr -4
.text:000062FC
.text:000062FC                 push    ebp
.text:000062FD                 mov     ebp, esp
.text:000062FF                 push    ecx
.text:00006300                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006307                 mov     [ebp+var_4], ecx
.text:0000630A                 mov     eax, [ebp+var_4]
.text:0000630D                 mov     dword ptr [eax], 0
.text:00006313                 mov     dword ptr [eax+4], 0
.text:0000631A                 mov     ecx, [ebp+var_4]
.text:0000631D                 mov     byte ptr [ecx+8], 0
.text:00006321                 mov     eax, [ebp+var_4]
.text:00006324                 mov     esp, ebp
.text:00006326                 pop     ebp
.text:00006327                 retn
.text:00006327 ??0CListUInt64Def@@QAE@XZ endp
.text:00006327
.text:00006327 _text           ends
.text:00006327
.text:00006328 ; ===========================================================================
.text:00006328
.text:00006328 ; Segment type: Pure code
.text:00006328 ; Segment permissions: Read/Execute
.text:00006328 _text           segment para public 'CODE' use32
.text:00006328                 assume cs:_text
.text:00006328                 ;org 6328h
.text:00006328 ; COMDAT (pick any)
.text:00006328                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006328
.text:00006328 ; =============== S U B R O U T I N E =======================================
.text:00006328
.text:00006328 ; Attributes: bp-based frame
.text:00006328
.text:00006328 ; _DWORD __thiscall CListFileTimeDef::CListFileTimeDef(CListFileTimeDef *__hidden this)
.text:00006328                 public ??0CListFileTimeDef@@QAE@XZ
.text:00006328 ??0CListFileTimeDef@@QAE@XZ proc near   ; CODE XREF: CListStat::CListStat(void)+27p
.text:00006328
.text:00006328 var_4           = dword ptr -4
.text:00006328
.text:00006328                 push    ebp
.text:00006329                 mov     ebp, esp
.text:0000632B                 push    ecx
.text:0000632C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006333                 mov     [ebp+var_4], ecx
.text:00006336                 mov     eax, [ebp+var_4]
.text:00006339                 mov     byte ptr [eax+8], 0
.text:0000633D                 mov     ecx, [ebp+var_4]
.text:00006340                 mov     dword ptr [ecx], 0
.text:00006346                 mov     edx, [ebp+var_4]
.text:00006349                 mov     dword ptr [edx+4], 0
.text:00006350                 mov     eax, [ebp+var_4]
.text:00006353                 mov     esp, ebp
.text:00006355                 pop     ebp
.text:00006356                 retn
.text:00006356 ??0CListFileTimeDef@@QAE@XZ endp
.text:00006356
.text:00006356 ; ---------------------------------------------------------------------------
.text:00006357                 align 4
.text:00006357 _text           ends
.text:00006357
.text:00006358 ; ===========================================================================
.text:00006358
.text:00006358 ; Segment type: Pure code
.text:00006358 ; Segment permissions: Read/Execute
.text:00006358 _text           segment para public 'CODE' use32
.text:00006358                 assume cs:_text
.text:00006358                 ;org 6358h
.text:00006358 ; COMDAT (pick any)
.text:00006358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006358
.text:00006358 ; =============== S U B R O U T I N E =======================================
.text:00006358
.text:00006358 ; Attributes: bp-based frame
.text:00006358
.text:00006358 ; void __thiscall CListStat::SetSizeDefIfNoFiles(CListStat *__hidden this)
.text:00006358                 public ?SetSizeDefIfNoFiles@CListStat@@QAEXXZ
.text:00006358 ?SetSizeDefIfNoFiles@CListStat@@QAEXXZ proc near
.text:00006358                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+153Cp
.text:00006358                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1547p
.text:00006358
.text:00006358 var_8           = dword ptr -8
.text:00006358 var_4           = dword ptr -4
.text:00006358
.text:00006358                 push    ebp
.text:00006359                 mov     ebp, esp
.text:0000635B                 sub     esp, 8
.text:0000635E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006365                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000636C                 mov     [ebp+var_4], ecx
.text:0000636F                 mov     eax, [ebp+var_4]
.text:00006372                 mov     [ebp+var_8], eax
.text:00006375                 mov     ecx, [ebp+var_8]
.text:00006378                 mov     edx, [ebp+var_8]
.text:0000637B                 mov     eax, [ecx+30h]
.text:0000637E                 or      eax, [edx+34h]
.text:00006381                 jnz     short loc_638A
.text:00006383                 mov     ecx, [ebp+var_4]
.text:00006386                 mov     byte ptr [ecx+8], 1
.text:0000638A
.text:0000638A loc_638A:                               ; CODE XREF: CListStat::SetSizeDefIfNoFiles(void)+29j
.text:0000638A                 mov     esp, ebp
.text:0000638C                 pop     ebp
.text:0000638D                 retn
.text:0000638D ?SetSizeDefIfNoFiles@CListStat@@QAEXXZ endp
.text:0000638D
.text:0000638D ; ---------------------------------------------------------------------------
.text:0000638E                 align 10h
.text:0000638E _text           ends
.text:0000638E
.text:00006390 ; ===========================================================================
.text:00006390
.text:00006390 ; Segment type: Pure code
.text:00006390 ; Segment permissions: Read/Execute
.text:00006390 _text           segment para public 'CODE' use32
.text:00006390                 assume cs:_text
.text:00006390                 ;org 6390h
.text:00006390 ; COMDAT (pick any)
.text:00006390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006390
.text:00006390 ; =============== S U B R O U T I N E =======================================
.text:00006390
.text:00006390 ; Attributes: bp-based frame
.text:00006390
.text:00006390 ; public: __thiscall CListStat2::CListStat2(void)
.text:00006390                 public ??0CListStat2@@QAE@XZ
.text:00006390 ??0CListStat2@@QAE@XZ proc near         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+93p
.text:00006390                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+B66p
.text:00006390
.text:00006390 var_4           = dword ptr -4
.text:00006390
.text:00006390                 push    ebp
.text:00006391                 mov     ebp, esp
.text:00006393                 push    ecx
.text:00006394                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000639B                 mov     [ebp+var_4], ecx
.text:0000639E                 mov     ecx, [ebp+var_4]
.text:000063A1                 call    ??0CListStat@@QAE@XZ ; CListStat::CListStat(void)
.text:000063A6                 mov     ecx, [ebp+var_4]
.text:000063A9                 add     ecx, 38h ; '8'
.text:000063AC                 call    ??0CListStat@@QAE@XZ ; CListStat::CListStat(void)
.text:000063B1                 mov     eax, [ebp+var_4]
.text:000063B4                 mov     dword ptr [eax+70h], 0
.text:000063BB                 mov     dword ptr [eax+74h], 0
.text:000063C2                 mov     eax, [ebp+var_4]
.text:000063C5                 add     esp, 4
.text:000063C8                 cmp     ebp, esp
.text:000063CA                 call    __RTC_CheckEsp
.text:000063CF                 mov     esp, ebp
.text:000063D1                 pop     ebp
.text:000063D2                 retn
.text:000063D2 ??0CListStat2@@QAE@XZ endp
.text:000063D2
.text:000063D2 ; ---------------------------------------------------------------------------
.text:000063D3                 align 4
.text:000063D3 _text           ends
.text:000063D3
.text:000063D4 ; ===========================================================================
.text:000063D4
.text:000063D4 ; Segment type: Pure code
.text:000063D4 ; Segment permissions: Read/Execute
.text:000063D4 _text           segment para public 'CODE' use32
.text:000063D4                 assume cs:_text
.text:000063D4                 ;org 63D4h
.text:000063D4 ; COMDAT (pick any)
.text:000063D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000063D4
.text:000063D4 ; =============== S U B R O U T I N E =======================================
.text:000063D4
.text:000063D4 ; Attributes: bp-based frame
.text:000063D4
.text:000063D4 ; void __thiscall CListStat2::Update(CListStat2 *this, const struct CListStat2 *)
.text:000063D4                 public ?Update@CListStat2@@QAEXABU1@@Z
.text:000063D4 ?Update@CListStat2@@QAEXABU1@@Z proc near
.text:000063D4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+15ECp
.text:000063D4
.text:000063D4 var_4           = dword ptr -4
.text:000063D4 arg_0           = dword ptr  8
.text:000063D4
.text:000063D4                 push    ebp
.text:000063D5                 mov     ebp, esp
.text:000063D7                 push    ecx
.text:000063D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063DF                 mov     [ebp+var_4], ecx
.text:000063E2                 mov     eax, [ebp+arg_0]
.text:000063E5                 push    eax             ; struct CListStat *
.text:000063E6                 mov     ecx, [ebp+var_4] ; this
.text:000063E9                 call    ?Update@CListStat@@QAEXABU1@@Z ; CListStat::Update(CListStat const &)
.text:000063EE                 mov     ecx, [ebp+arg_0]
.text:000063F1                 add     ecx, 38h ; '8'
.text:000063F4                 push    ecx             ; struct CListStat *
.text:000063F5                 mov     ecx, [ebp+var_4]
.text:000063F8                 add     ecx, 38h ; '8'  ; this
.text:000063FB                 call    ?Update@CListStat@@QAEXABU1@@Z ; CListStat::Update(CListStat const &)
.text:00006400                 mov     edx, [ebp+var_4]
.text:00006403                 mov     eax, [ebp+arg_0]
.text:00006406                 mov     ecx, [edx+70h]
.text:00006409                 add     ecx, [eax+70h]
.text:0000640C                 mov     edx, [edx+74h]
.text:0000640F                 adc     edx, [eax+74h]
.text:00006412                 mov     eax, [ebp+var_4]
.text:00006415                 mov     [eax+70h], ecx
.text:00006418                 mov     [eax+74h], edx
.text:0000641B                 add     esp, 4
.text:0000641E                 cmp     ebp, esp
.text:00006420                 call    __RTC_CheckEsp
.text:00006425                 mov     esp, ebp
.text:00006427                 pop     ebp
.text:00006428                 retn    4
.text:00006428 ?Update@CListStat2@@QAEXABU1@@Z endp
.text:00006428
.text:00006428 ; ---------------------------------------------------------------------------
.text:0000642B                 align 4
.text:0000642B _text           ends
.text:0000642B
.text:0000642C ; ===========================================================================
.text:0000642C
.text:0000642C ; Segment type: Pure code
.text:0000642C ; Segment permissions: Read/Execute
.text:0000642C _text           segment para public 'CODE' use32
.text:0000642C                 assume cs:_text
.text:0000642C                 ;org 642Ch
.text:0000642C ; COMDAT (pick any)
.text:0000642C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000642C
.text:0000642C ; =============== S U B R O U T I N E =======================================
.text:0000642C
.text:0000642C ; Attributes: bp-based frame
.text:0000642C
.text:0000642C ; unsigned __int64 __thiscall CListStat2::GetNumStreams(CListStat2 *__hidden this)
.text:0000642C                 public ?GetNumStreams@CListStat2@@QBE?B_KXZ
.text:0000642C ?GetNumStreams@CListStat2@@QBE?B_KXZ proc near
.text:0000642C                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1473p
.text:0000642C
.text:0000642C var_4           = dword ptr -4
.text:0000642C
.text:0000642C                 push    ebp
.text:0000642D                 mov     ebp, esp
.text:0000642F                 push    ecx
.text:00006430                 push    esi
.text:00006431                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006438                 mov     [ebp+var_4], ecx
.text:0000643B                 mov     eax, [ebp+var_4]
.text:0000643E                 mov     ecx, [ebp+var_4]
.text:00006441                 mov     edx, [eax+30h]
.text:00006444                 add     edx, [ecx+68h]
.text:00006447                 mov     esi, [eax+34h]
.text:0000644A                 adc     esi, [ecx+6Ch]
.text:0000644D                 mov     eax, edx
.text:0000644F                 mov     edx, esi
.text:00006451                 pop     esi
.text:00006452                 mov     esp, ebp
.text:00006454                 pop     ebp
.text:00006455                 retn
.text:00006455 ?GetNumStreams@CListStat2@@QBE?B_KXZ endp
.text:00006455
.text:00006455 ; ---------------------------------------------------------------------------
.text:00006456                 align 4
.text:00006456 _text           ends
.text:00006456
.text:00006458 ; ===========================================================================
.text:00006458
.text:00006458 ; Segment type: Pure code
.text:00006458 ; Segment permissions: Read/Execute
.text:00006458 _text           segment para public 'CODE' use32
.text:00006458                 assume cs:_text
.text:00006458                 ;org 6458h
.text:00006458 ; COMDAT (pick any)
.text:00006458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006458
.text:00006458 ; =============== S U B R O U T I N E =======================================
.text:00006458
.text:00006458 ; Attributes: bp-based frame
.text:00006458
.text:00006458 ; struct CListStat *__thiscall CListStat2::GetStat(CListStat2 *this, bool)
.text:00006458                 public ?GetStat@CListStat2@@QAEAAUCListStat@@_N@Z
.text:00006458 ?GetStat@CListStat2@@QAEAAUCListStat@@_N@Z proc near
.text:00006458                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+139Bp
.text:00006458
.text:00006458 var_C           = dword ptr -0Ch
.text:00006458 var_8           = dword ptr -8
.text:00006458 var_4           = dword ptr -4
.text:00006458 arg_0           = byte ptr  8
.text:00006458
.text:00006458                 push    ebp
.text:00006459                 mov     ebp, esp
.text:0000645B                 sub     esp, 0Ch
.text:0000645E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006465                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000646C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006473                 mov     [ebp+var_4], ecx
.text:00006476                 movzx   eax, [ebp+arg_0]
.text:0000647A                 test    eax, eax
.text:0000647C                 jz      short loc_6489
.text:0000647E                 mov     ecx, [ebp+var_4]
.text:00006481                 add     ecx, 38h ; '8'
.text:00006484                 mov     [ebp+var_C], ecx
.text:00006487                 jmp     short loc_648F
.text:00006489 ; ---------------------------------------------------------------------------
.text:00006489
.text:00006489 loc_6489:                               ; CODE XREF: CListStat2::GetStat(bool)+24j
.text:00006489                 mov     edx, [ebp+var_4]
.text:0000648C                 mov     [ebp+var_C], edx
.text:0000648F
.text:0000648F loc_648F:                               ; CODE XREF: CListStat2::GetStat(bool)+2Fj
.text:0000648F                 mov     eax, [ebp+var_C]
.text:00006492                 mov     [ebp+var_8], eax
.text:00006495                 mov     eax, [ebp+var_8]
.text:00006498                 mov     esp, ebp
.text:0000649A                 pop     ebp
.text:0000649B                 retn    4
.text:0000649B ?GetStat@CListStat2@@QAEAAUCListStat@@_N@Z endp
.text:0000649B
.text:0000649B ; ---------------------------------------------------------------------------
.text:0000649E                 align 10h
.text:0000649E _text           ends
.text:0000649E
.text:000064A0 ; ===========================================================================
.text:000064A0
.text:000064A0 ; Segment type: Pure code
.text:000064A0 ; Segment permissions: Read/Execute
.text:000064A0 _text           segment para public 'CODE' use32
.text:000064A0                 assume cs:_text
.text:000064A0                 ;org 64A0h
.text:000064A0 ; COMDAT (pick any)
.text:000064A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000064A0
.text:000064A0 ; =============== S U B R O U T I N E =======================================
.text:000064A0
.text:000064A0 ; Attributes: bp-based frame
.text:000064A0
.text:000064A0 ; bool __stdcall ConvertPropVariantToUInt64(const struct tagPROPVARIANT *, unsigned __int64 *)
.text:000064A0                 public ?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z
.text:000064A0 ?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z proc near
.text:000064A0                                         ; CODE XREF: GetUInt64Value(IInArchive *,uint,ulong,CListUInt64Def &)+BAp
.text:000064A0
.text:000064A0 var_8           = dword ptr -8
.text:000064A0 var_4           = dword ptr -4
.text:000064A0 arg_0           = dword ptr  8
.text:000064A0 arg_4           = dword ptr  0Ch
.text:000064A0
.text:000064A0                 push    ebp
.text:000064A1                 mov     ebp, esp
.text:000064A3                 sub     esp, 8
.text:000064A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000064AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000064B4                 mov     eax, [ebp+arg_0]
.text:000064B7                 movzx   ecx, word ptr [eax]
.text:000064BA                 mov     [ebp+var_8], ecx
.text:000064BD                 cmp     [ebp+var_8], 15h ; switch 22 cases
.text:000064C1                 ja      short $LN1      ; jumptable 000064CD default case
.text:000064C3                 mov     edx, [ebp+var_8]
.text:000064C6                 movzx   eax, ds:$LN11_2[edx]
.text:000064CD                 jmp     ds:$LN12_1[eax*4] ; switch jump
.text:000064D4 ; ---------------------------------------------------------------------------
.text:000064D4
.text:000064D4 $LN6_4:                                 ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:000064D4                                         ; DATA XREF: .text:$LN12_1o
.text:000064D4                 mov     ecx, [ebp+arg_4] ; jumptable 000064CD case 21
.text:000064D7                 mov     edx, [ebp+arg_0]
.text:000064DA                 mov     eax, [edx+8]
.text:000064DD                 mov     [ecx], eax
.text:000064DF                 mov     edx, [edx+0Ch]
.text:000064E2                 mov     [ecx+4], edx
.text:000064E5                 mov     al, 1
.text:000064E7                 jmp     short loc_653E
.text:000064E9 ; ---------------------------------------------------------------------------
.text:000064E9
.text:000064E9 $LN5_5:                                 ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:000064E9                                         ; DATA XREF: .text:$LN12_1o
.text:000064E9                 mov     eax, [ebp+arg_0] ; jumptable 000064CD case 19
.text:000064EC                 mov     ecx, [eax+8]
.text:000064EF                 xor     edx, edx
.text:000064F1                 mov     eax, [ebp+arg_4]
.text:000064F4                 mov     [eax], ecx
.text:000064F6                 mov     [eax+4], edx
.text:000064F9                 mov     al, 1
.text:000064FB                 jmp     short loc_653E
.text:000064FD ; ---------------------------------------------------------------------------
.text:000064FD
.text:000064FD $LN4_1:                                 ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:000064FD                                         ; DATA XREF: .text:$LN12_1o
.text:000064FD                 mov     ecx, [ebp+arg_0] ; jumptable 000064CD case 18
.text:00006500                 movzx   eax, word ptr [ecx+8]
.text:00006504                 cdq
.text:00006505                 mov     ecx, [ebp+arg_4]
.text:00006508                 mov     [ecx], eax
.text:0000650A                 mov     [ecx+4], edx
.text:0000650D                 mov     al, 1
.text:0000650F                 jmp     short loc_653E
.text:00006511 ; ---------------------------------------------------------------------------
.text:00006511
.text:00006511 $LN3:                                   ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:00006511                                         ; DATA XREF: .text:$LN12_1o
.text:00006511                 mov     edx, [ebp+arg_0] ; jumptable 000064CD case 17
.text:00006514                 movzx   eax, byte ptr [edx+8]
.text:00006518                 cdq
.text:00006519                 mov     ecx, [ebp+arg_4]
.text:0000651C                 mov     [ecx], eax
.text:0000651E                 mov     [ecx+4], edx
.text:00006521                 mov     al, 1
.text:00006523                 jmp     short loc_653E
.text:00006525 ; ---------------------------------------------------------------------------
.text:00006525
.text:00006525 $LN2:                                   ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:00006525                                         ; DATA XREF: .text:$LN12_1o
.text:00006525                 xor     al, al          ; jumptable 000064CD case 0
.text:00006527                 jmp     short loc_653E
.text:00006529 ; ---------------------------------------------------------------------------
.text:00006529
.text:00006529 $LN1:                                   ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+21j
.text:00006529                                         ; ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:00006529                                         ; DATA XREF: ...
.text:00006529                 mov     [ebp+var_4], 24E9Fh ; jumptable 000064CD default case
.text:00006530                 push    offset __TI1H
.text:00006535                 lea     edx, [ebp+var_4]
.text:00006538                 push    edx
.text:00006539                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000653E ; ---------------------------------------------------------------------------
.text:0000653E
.text:0000653E loc_653E:                               ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+47j
.text:0000653E                                         ; ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+5Bj ...
.text:0000653E                 add     esp, 8
.text:00006541                 cmp     ebp, esp
.text:00006543                 call    __RTC_CheckEsp
.text:00006548                 mov     esp, ebp
.text:0000654A                 pop     ebp
.text:0000654B                 retn    8
.text:0000654B ?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z endp
.text:0000654B
.text:0000654B ; ---------------------------------------------------------------------------
.text:0000654E                 align 10h
.text:00006550 $LN12_1         dd offset $LN2          ; DATA XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dr
.text:00006550                 dd offset $LN3          ; jump table for switch statement
.text:00006550                 dd offset $LN4_1
.text:00006550                 dd offset $LN5_5
.text:00006550                 dd offset $LN6_4
.text:00006550                 dd offset $LN1
.text:00006568 $LN11_2         db      0,     5,     5,     5
.text:00006568                                         ; DATA XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+26r
.text:00006568                 db      5,     5,     5,     5 ; indirect table for switch statement
.text:00006568                 db      5,     5,     5,     5
.text:00006568                 db      5,     5,     5,     5
.text:00006568                 db      5,     1,     2,     3
.text:00006568                 db      5,     4
.text:0000657E                 align 10h
.text:0000657E _text           ends
.text:0000657E
.text:00006580 ; ===========================================================================
.text:00006580
.text:00006580 ; Segment type: Pure code
.text:00006580 ; Segment permissions: Read/Execute
.text:00006580 _text           segment para public 'CODE' use32
.text:00006580                 assume cs:_text
.text:00006580                 ;org 6580h
.text:00006580 ; COMDAT (pick any)
.text:00006580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006580
.text:00006580 ; =============== S U B R O U T I N E =======================================
.text:00006580
.text:00006580 ; Attributes: bp-based frame
.text:00006580
.text:00006580 ; public: __thiscall CFieldPrinter::CFieldPrinter(void)
.text:00006580                 public ??0CFieldPrinter@@QAE@XZ
.text:00006580 ??0CFieldPrinter@@QAE@XZ proc near      ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+6Ap
.text:00006580
.text:00006580 var_10          = dword ptr -10h
.text:00006580 var_C           = dword ptr -0Ch
.text:00006580 var_4           = dword ptr -4
.text:00006580
.text:00006580                 push    ebp
.text:00006581                 mov     ebp, esp
.text:00006583                 push    0FFFFFFFFh
.text:00006585                 push    offset __ehhandler$??0CFieldPrinter@@QAE@XZ
.text:0000658A                 mov     eax, large fs:0
.text:00006590                 push    eax
.text:00006591                 push    ecx
.text:00006592                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006599                 mov     eax, dword ptr ds:___security_cookie
.text:0000659E                 xor     eax, ebp
.text:000065A0                 push    eax
.text:000065A1                 lea     eax, [ebp+var_C]
.text:000065A4                 mov     large fs:0, eax
.text:000065AA                 mov     [ebp+var_10], ecx
.text:000065AD                 mov     ecx, [ebp+var_10]
.text:000065B0                 call    ??0?$CObjectVector@UCFieldInfo@@@@QAE@XZ ; CObjectVector<CFieldInfo>::CObjectVector<CFieldInfo>(void)
.text:000065B5                 mov     [ebp+var_4], 0
.text:000065BC                 mov     ecx, [ebp+var_10]
.text:000065BF                 add     ecx, 14h
.text:000065C2                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000065C7                 mov     byte ptr [ebp+var_4], 1
.text:000065CB                 mov     ecx, [ebp+var_10]
.text:000065CE                 add     ecx, 20h ; ' '
.text:000065D1                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000065D6                 mov     byte ptr [ebp+var_4], 2
.text:000065DA                 mov     ecx, [ebp+var_10]
.text:000065DD                 add     ecx, 2Ch ; ','
.text:000065E0                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000065E5                 mov     byte ptr [ebp+var_4], 3
.text:000065E9                 mov     ecx, [ebp+var_10]
.text:000065EC                 add     ecx, 3Ch ; '<'
.text:000065EF                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000065F4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000065FB                 mov     eax, [ebp+var_10]
.text:000065FE                 mov     ecx, [ebp+var_C]
.text:00006601                 mov     large fs:0, ecx
.text:00006608                 pop     ecx
.text:00006609                 add     esp, 10h
.text:0000660C                 cmp     ebp, esp
.text:0000660E                 call    __RTC_CheckEsp
.text:00006613                 mov     esp, ebp
.text:00006615                 pop     ebp
.text:00006616                 retn
.text:00006616 ??0CFieldPrinter@@QAE@XZ endp
.text:00006616
.text:00006616 ; ---------------------------------------------------------------------------
.text:00006617                 align 4
.text:00006617 _text           ends
.text:00006617
.text$x:00006618 ; ===========================================================================
.text$x:00006618
.text$x:00006618 ; Segment type: Pure code
.text$x:00006618 ; Segment permissions: Read/Execute
.text$x:00006618 _text$x         segment para public 'CODE' use32
.text$x:00006618                 assume cs:_text$x
.text$x:00006618                 ;org 6618h
.text$x:00006618 ; COMDAT (pick associative to section at 6580)
.text$x:00006618                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006618
.text$x:00006618 ; =============== S U B R O U T I N E =======================================
.text$x:00006618
.text$x:00006618
.text$x:00006618 __unwindfunclet$??0CFieldPrinter@@QAE@XZ$0 proc near
.text$x:00006618                                         ; DATA XREF: .xdata$x:00006660o
.text$x:00006618                 mov     ecx, [ebp-10h]
.text$x:0000661B                 jmp     ??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ ; CObjectVector<CFieldInfo>::~CObjectVector<CFieldInfo>(void)
.text$x:0000661B __unwindfunclet$??0CFieldPrinter@@QAE@XZ$0 endp
.text$x:0000661B
.text$x:00006620
.text$x:00006620 ; =============== S U B R O U T I N E =======================================
.text$x:00006620
.text$x:00006620
.text$x:00006620 __unwindfunclet$??0CFieldPrinter@@QAE@XZ$1 proc near
.text$x:00006620                                         ; DATA XREF: .xdata$x:00006668o
.text$x:00006620                 mov     ecx, [ebp-10h]
.text$x:00006623                 add     ecx, 14h        ; this
.text$x:00006626                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006626 __unwindfunclet$??0CFieldPrinter@@QAE@XZ$1 endp
.text$x:00006626
.text$x:0000662B
.text$x:0000662B ; =============== S U B R O U T I N E =======================================
.text$x:0000662B
.text$x:0000662B
.text$x:0000662B __unwindfunclet$??0CFieldPrinter@@QAE@XZ$2 proc near
.text$x:0000662B                                         ; DATA XREF: .xdata$x:00006670o
.text$x:0000662B                 mov     ecx, [ebp-10h]
.text$x:0000662E                 add     ecx, 20h ; ' '  ; this
.text$x:00006631                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00006631 __unwindfunclet$??0CFieldPrinter@@QAE@XZ$2 endp
.text$x:00006631
.text$x:00006636
.text$x:00006636 ; =============== S U B R O U T I N E =======================================
.text$x:00006636
.text$x:00006636
.text$x:00006636 __unwindfunclet$??0CFieldPrinter@@QAE@XZ$3 proc near
.text$x:00006636                                         ; DATA XREF: .xdata$x:00006678o
.text$x:00006636                 mov     ecx, [ebp-10h]
.text$x:00006639                 add     ecx, 2Ch ; ','  ; this
.text$x:0000663C                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000663C __unwindfunclet$??0CFieldPrinter@@QAE@XZ$3 endp
.text$x:0000663C
.text$x:00006641
.text$x:00006641 ; =============== S U B R O U T I N E =======================================
.text$x:00006641
.text$x:00006641
.text$x:00006641 __ehhandler$??0CFieldPrinter@@QAE@XZ proc near
.text$x:00006641                                         ; DATA XREF: CFieldPrinter::CFieldPrinter(void)+5o
.text$x:00006641
.text$x:00006641 arg_4           = dword ptr  8
.text$x:00006641
.text$x:00006641                 mov     edx, [esp+arg_4]
.text$x:00006645                 lea     eax, [edx+0Ch]
.text$x:00006648                 mov     ecx, [edx-8]
.text$x:0000664B                 xor     ecx, eax
.text$x:0000664D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006652                 mov     eax, offset __ehfuncinfo$??0CFieldPrinter@@QAE@XZ
.text$x:00006657                 jmp     ___CxxFrameHandler3
.text$x:00006657 __ehhandler$??0CFieldPrinter@@QAE@XZ endp
.text$x:00006657
.text$x:00006657 _text$x         ends
.text$x:00006657
.xdata$x:0000665C ; ===========================================================================
.xdata$x:0000665C
.xdata$x:0000665C ; Segment type: Pure data
.xdata$x:0000665C ; Segment permissions: Read
.xdata$x:0000665C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000665C                 assume cs:_xdata$x
.xdata$x:0000665C                 ;org 665Ch
.xdata$x:0000665C ; COMDAT (pick associative to section at 6580)
.xdata$x:0000665C __unwindtable$??0CFieldPrinter@@QAE@XZ db 0FFh
.xdata$x:0000665C                                         ; DATA XREF: .xdata$x:00006684o
.xdata$x:0000665D                 db 0FFh
.xdata$x:0000665E                 db 0FFh
.xdata$x:0000665F                 db 0FFh
.xdata$x:00006660                 dd offset __unwindfunclet$??0CFieldPrinter@@QAE@XZ$0
.xdata$x:00006664                 align 8
.xdata$x:00006668                 dd offset __unwindfunclet$??0CFieldPrinter@@QAE@XZ$1
.xdata$x:0000666C                 db    1
.xdata$x:0000666D                 db    0
.xdata$x:0000666E                 db    0
.xdata$x:0000666F                 db    0
.xdata$x:00006670                 dd offset __unwindfunclet$??0CFieldPrinter@@QAE@XZ$2
.xdata$x:00006674                 db    2
.xdata$x:00006675                 db    0
.xdata$x:00006676                 db    0
.xdata$x:00006677                 db    0
.xdata$x:00006678                 dd offset __unwindfunclet$??0CFieldPrinter@@QAE@XZ$3
.xdata$x:0000667C __ehfuncinfo$??0CFieldPrinter@@QAE@XZ db  22h ; "
.xdata$x:0000667C                                         ; DATA XREF: __ehhandler$??0CFieldPrinter@@QAE@XZ+11o
.xdata$x:0000667D                 db    5
.xdata$x:0000667E                 db  93h ; ô
.xdata$x:0000667F                 db  19h
.xdata$x:00006680                 db    4
.xdata$x:00006681                 db    0
.xdata$x:00006682                 db    0
.xdata$x:00006683                 db    0
.xdata$x:00006684                 dd offset __unwindtable$??0CFieldPrinter@@QAE@XZ
.xdata$x:00006688                 db    0
.xdata$x:00006689                 db    0
.xdata$x:0000668A                 db    0
.xdata$x:0000668B                 db    0
.xdata$x:0000668C                 db    0
.xdata$x:0000668D                 db    0
.xdata$x:0000668E                 db    0
.xdata$x:0000668F                 db    0
.xdata$x:00006690                 db    0
.xdata$x:00006691                 db    0
.xdata$x:00006692                 db    0
.xdata$x:00006693                 db    0
.xdata$x:00006694                 db    0
.xdata$x:00006695                 db    0
.xdata$x:00006696                 db    0
.xdata$x:00006697                 db    0
.xdata$x:00006698                 db    0
.xdata$x:00006699                 db    0
.xdata$x:0000669A                 db    0
.xdata$x:0000669B                 db    0
.xdata$x:0000669C                 db    1
.xdata$x:0000669D                 db    0
.xdata$x:0000669E                 db    0
.xdata$x:0000669F                 db    0
.xdata$x:0000669F _xdata$x        ends
.xdata$x:0000669F
.text:000066A0 ; ===========================================================================
.text:000066A0
.text:000066A0 ; Segment type: Pure code
.text:000066A0 ; Segment permissions: Read/Execute
.text:000066A0 _text           segment para public 'CODE' use32
.text:000066A0                 assume cs:_text
.text:000066A0                 ;org 66A0h
.text:000066A0 ; COMDAT (pick any)
.text:000066A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000066A0
.text:000066A0 ; =============== S U B R O U T I N E =======================================
.text:000066A0
.text:000066A0 ; Attributes: bp-based frame
.text:000066A0
.text:000066A0 ; _DWORD __thiscall CFieldPrinter::~CFieldPrinter(CFieldPrinter *__hidden this)
.text:000066A0                 public ??1CFieldPrinter@@QAE@XZ
.text:000066A0 ??1CFieldPrinter@@QAE@XZ proc near      ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+562p
.text:000066A0                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+989p ...
.text:000066A0
.text:000066A0 var_10          = dword ptr -10h
.text:000066A0 var_C           = dword ptr -0Ch
.text:000066A0 var_4           = dword ptr -4
.text:000066A0
.text:000066A0                 push    ebp
.text:000066A1                 mov     ebp, esp
.text:000066A3                 push    0FFFFFFFFh
.text:000066A5                 push    offset __ehhandler$??1CFieldPrinter@@QAE@XZ
.text:000066AA                 mov     eax, large fs:0
.text:000066B0                 push    eax
.text:000066B1                 push    ecx
.text:000066B2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000066B9                 mov     eax, dword ptr ds:___security_cookie
.text:000066BE                 xor     eax, ebp
.text:000066C0                 push    eax
.text:000066C1                 lea     eax, [ebp+var_C]
.text:000066C4                 mov     large fs:0, eax
.text:000066CA                 mov     [ebp+var_10], ecx
.text:000066CD                 mov     [ebp+var_4], 3
.text:000066D4                 mov     ecx, [ebp+var_10]
.text:000066D7                 add     ecx, 3Ch ; '<'  ; this
.text:000066DA                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000066DF                 mov     byte ptr [ebp+var_4], 2
.text:000066E3                 mov     ecx, [ebp+var_10]
.text:000066E6                 add     ecx, 2Ch ; ','  ; this
.text:000066E9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000066EE                 mov     byte ptr [ebp+var_4], 1
.text:000066F2                 mov     ecx, [ebp+var_10]
.text:000066F5                 add     ecx, 20h ; ' '  ; this
.text:000066F8                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000066FD                 mov     byte ptr [ebp+var_4], 0
.text:00006701                 mov     ecx, [ebp+var_10]
.text:00006704                 add     ecx, 14h        ; this
.text:00006707                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000670C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006713                 mov     ecx, [ebp+var_10]
.text:00006716                 call    ??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ ; CObjectVector<CFieldInfo>::~CObjectVector<CFieldInfo>(void)
.text:0000671B                 mov     ecx, [ebp+var_C]
.text:0000671E                 mov     large fs:0, ecx
.text:00006725                 pop     ecx
.text:00006726                 add     esp, 10h
.text:00006729                 cmp     ebp, esp
.text:0000672B                 call    __RTC_CheckEsp
.text:00006730                 mov     esp, ebp
.text:00006732                 pop     ebp
.text:00006733                 retn
.text:00006733 ??1CFieldPrinter@@QAE@XZ endp
.text:00006733
.text:00006733 _text           ends
.text:00006733
.text$x:00006734 ; ===========================================================================
.text$x:00006734
.text$x:00006734 ; Segment type: Pure code
.text$x:00006734 ; Segment permissions: Read/Execute
.text$x:00006734 _text$x         segment para public 'CODE' use32
.text$x:00006734                 assume cs:_text$x
.text$x:00006734                 ;org 6734h
.text$x:00006734 ; COMDAT (pick associative to section at 66A0)
.text$x:00006734                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006734
.text$x:00006734 ; =============== S U B R O U T I N E =======================================
.text$x:00006734
.text$x:00006734
.text$x:00006734 __unwindfunclet$??1CFieldPrinter@@QAE@XZ$0 proc near
.text$x:00006734                                         ; DATA XREF: .xdata$x:0000677Co
.text$x:00006734                 mov     ecx, [ebp-10h]
.text$x:00006737                 jmp     ??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ ; CObjectVector<CFieldInfo>::~CObjectVector<CFieldInfo>(void)
.text$x:00006737 __unwindfunclet$??1CFieldPrinter@@QAE@XZ$0 endp
.text$x:00006737
.text$x:0000673C
.text$x:0000673C ; =============== S U B R O U T I N E =======================================
.text$x:0000673C
.text$x:0000673C
.text$x:0000673C __unwindfunclet$??1CFieldPrinter@@QAE@XZ$1 proc near
.text$x:0000673C                                         ; DATA XREF: .xdata$x:00006784o
.text$x:0000673C                 mov     ecx, [ebp-10h]
.text$x:0000673F                 add     ecx, 14h        ; this
.text$x:00006742                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006742 __unwindfunclet$??1CFieldPrinter@@QAE@XZ$1 endp
.text$x:00006742
.text$x:00006747
.text$x:00006747 ; =============== S U B R O U T I N E =======================================
.text$x:00006747
.text$x:00006747
.text$x:00006747 __unwindfunclet$??1CFieldPrinter@@QAE@XZ$2 proc near
.text$x:00006747                                         ; DATA XREF: .xdata$x:0000678Co
.text$x:00006747                 mov     ecx, [ebp-10h]
.text$x:0000674A                 add     ecx, 20h ; ' '  ; this
.text$x:0000674D                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000674D __unwindfunclet$??1CFieldPrinter@@QAE@XZ$2 endp
.text$x:0000674D
.text$x:00006752
.text$x:00006752 ; =============== S U B R O U T I N E =======================================
.text$x:00006752
.text$x:00006752
.text$x:00006752 __unwindfunclet$??1CFieldPrinter@@QAE@XZ$3 proc near
.text$x:00006752                                         ; DATA XREF: .xdata$x:00006794o
.text$x:00006752                 mov     ecx, [ebp-10h]
.text$x:00006755                 add     ecx, 2Ch ; ','  ; this
.text$x:00006758                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006758 __unwindfunclet$??1CFieldPrinter@@QAE@XZ$3 endp
.text$x:00006758
.text$x:0000675D
.text$x:0000675D ; =============== S U B R O U T I N E =======================================
.text$x:0000675D
.text$x:0000675D
.text$x:0000675D __ehhandler$??1CFieldPrinter@@QAE@XZ proc near
.text$x:0000675D                                         ; DATA XREF: CFieldPrinter::~CFieldPrinter(void)+5o
.text$x:0000675D
.text$x:0000675D arg_4           = dword ptr  8
.text$x:0000675D
.text$x:0000675D                 mov     edx, [esp+arg_4]
.text$x:00006761                 lea     eax, [edx+0Ch]
.text$x:00006764                 mov     ecx, [edx-8]
.text$x:00006767                 xor     ecx, eax
.text$x:00006769                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000676E                 mov     eax, offset __ehfuncinfo$??1CFieldPrinter@@QAE@XZ
.text$x:00006773                 jmp     ___CxxFrameHandler3
.text$x:00006773 __ehhandler$??1CFieldPrinter@@QAE@XZ endp
.text$x:00006773
.text$x:00006773 _text$x         ends
.text$x:00006773
.xdata$x:00006778 ; ===========================================================================
.xdata$x:00006778
.xdata$x:00006778 ; Segment type: Pure data
.xdata$x:00006778 ; Segment permissions: Read
.xdata$x:00006778 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006778                 assume cs:_xdata$x
.xdata$x:00006778                 ;org 6778h
.xdata$x:00006778 ; COMDAT (pick associative to section at 66A0)
.xdata$x:00006778 __unwindtable$??1CFieldPrinter@@QAE@XZ db 0FFh
.xdata$x:00006778                                         ; DATA XREF: .xdata$x:000067A0o
.xdata$x:00006779                 db 0FFh
.xdata$x:0000677A                 db 0FFh
.xdata$x:0000677B                 db 0FFh
.xdata$x:0000677C                 dd offset __unwindfunclet$??1CFieldPrinter@@QAE@XZ$0
.xdata$x:00006780                 db    0
.xdata$x:00006781                 db    0
.xdata$x:00006782                 db    0
.xdata$x:00006783                 db    0
.xdata$x:00006784                 dd offset __unwindfunclet$??1CFieldPrinter@@QAE@XZ$1
.xdata$x:00006788                 db    1
.xdata$x:00006789                 db    0
.xdata$x:0000678A                 db    0
.xdata$x:0000678B                 db    0
.xdata$x:0000678C                 dd offset __unwindfunclet$??1CFieldPrinter@@QAE@XZ$2
.xdata$x:00006790                 db    2
.xdata$x:00006791                 db    0
.xdata$x:00006792                 db    0
.xdata$x:00006793                 db    0
.xdata$x:00006794                 dd offset __unwindfunclet$??1CFieldPrinter@@QAE@XZ$3
.xdata$x:00006798 __ehfuncinfo$??1CFieldPrinter@@QAE@XZ db  22h ; "
.xdata$x:00006798                                         ; DATA XREF: __ehhandler$??1CFieldPrinter@@QAE@XZ+11o
.xdata$x:00006799                 db    5
.xdata$x:0000679A                 db  93h ; ô
.xdata$x:0000679B                 db  19h
.xdata$x:0000679C                 db    4
.xdata$x:0000679D                 db    0
.xdata$x:0000679E                 db    0
.xdata$x:0000679F                 db    0
.xdata$x:000067A0                 dd offset __unwindtable$??1CFieldPrinter@@QAE@XZ
.xdata$x:000067A4                 db    0
.xdata$x:000067A5                 db    0
.xdata$x:000067A6                 db    0
.xdata$x:000067A7                 db    0
.xdata$x:000067A8                 db    0
.xdata$x:000067A9                 db    0
.xdata$x:000067AA                 db    0
.xdata$x:000067AB                 db    0
.xdata$x:000067AC                 db    0
.xdata$x:000067AD                 db    0
.xdata$x:000067AE                 db    0
.xdata$x:000067AF                 db    0
.xdata$x:000067B0                 db    0
.xdata$x:000067B1                 db    0
.xdata$x:000067B2                 db    0
.xdata$x:000067B3                 db    0
.xdata$x:000067B4                 db    0
.xdata$x:000067B5                 db    0
.xdata$x:000067B6                 db    0
.xdata$x:000067B7                 db    0
.xdata$x:000067B8                 db    1
.xdata$x:000067B9                 db    0
.xdata$x:000067BA                 db    0
.xdata$x:000067BB                 db    0
.xdata$x:000067BB _xdata$x        ends
.xdata$x:000067BB
.text:000067BC ; ===========================================================================
.text:000067BC
.text:000067BC ; Segment type: Pure code
.text:000067BC ; Segment permissions: Read/Execute
.text:000067BC _text           segment para public 'CODE' use32
.text:000067BC                 assume cs:_text
.text:000067BC                 ;org 67BCh
.text:000067BC ; COMDAT (pick any)
.text:000067BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000067BC
.text:000067BC ; =============== S U B R O U T I N E =======================================
.text:000067BC
.text:000067BC ; Attributes: bp-based frame
.text:000067BC
.text:000067BC ; _DWORD __thiscall COpenCallbackConsole::~COpenCallbackConsole(COpenCallbackConsole *__hidden this)
.text:000067BC                 public ??1COpenCallbackConsole@@QAE@XZ
.text:000067BC ??1COpenCallbackConsole@@QAE@XZ proc near
.text:000067BC                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+535p
.text:000067BC                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+6A6p ...
.text:000067BC
.text:000067BC var_10          = dword ptr -10h
.text:000067BC var_C           = dword ptr -0Ch
.text:000067BC var_4           = dword ptr -4
.text:000067BC
.text:000067BC                 push    ebp
.text:000067BD                 mov     ebp, esp
.text:000067BF                 push    0FFFFFFFFh
.text:000067C1                 push    offset __ehhandler$??1COpenCallbackConsole@@QAE@XZ
.text:000067C6                 mov     eax, large fs:0
.text:000067CC                 push    eax
.text:000067CD                 push    ecx
.text:000067CE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000067D5                 mov     eax, dword ptr ds:___security_cookie
.text:000067DA                 xor     eax, ebp
.text:000067DC                 push    eax
.text:000067DD                 lea     eax, [ebp+var_C]
.text:000067E0                 mov     large fs:0, eax
.text:000067E6                 mov     [ebp+var_10], ecx
.text:000067E9                 mov     [ebp+var_4], 0
.text:000067F0                 mov     ecx, [ebp+var_10]
.text:000067F3                 add     ecx, 0C4h ; '-' ; this
.text:000067F9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000067FE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006805                 mov     ecx, [ebp+var_10]
.text:00006808                 add     ecx, 8          ; this
.text:0000680B                 call    ??1CPercentPrinter@@QAE@XZ ; CPercentPrinter::~CPercentPrinter(void)
.text:00006810                 mov     ecx, [ebp+var_C]
.text:00006813                 mov     large fs:0, ecx
.text:0000681A                 pop     ecx
.text:0000681B                 add     esp, 10h
.text:0000681E                 cmp     ebp, esp
.text:00006820                 call    __RTC_CheckEsp
.text:00006825                 mov     esp, ebp
.text:00006827                 pop     ebp
.text:00006828                 retn
.text:00006828 ??1COpenCallbackConsole@@QAE@XZ endp
.text:00006828
.text:00006828 ; ---------------------------------------------------------------------------
.text:00006829                 align 4
.text:00006829 _text           ends
.text:00006829
.text$x:0000682C ; ===========================================================================
.text$x:0000682C
.text$x:0000682C ; Segment type: Pure code
.text$x:0000682C ; Segment permissions: Read/Execute
.text$x:0000682C _text$x         segment para public 'CODE' use32
.text$x:0000682C                 assume cs:_text$x
.text$x:0000682C                 ;org 682Ch
.text$x:0000682C ; COMDAT (pick associative to section at 67BC)
.text$x:0000682C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000682C
.text$x:0000682C ; =============== S U B R O U T I N E =======================================
.text$x:0000682C
.text$x:0000682C
.text$x:0000682C __unwindfunclet$??1COpenCallbackConsole@@QAE@XZ$0 proc near
.text$x:0000682C                                         ; DATA XREF: .xdata$x:00006858o
.text$x:0000682C                 mov     ecx, [ebp-10h]
.text$x:0000682F                 add     ecx, 8          ; this
.text$x:00006832                 jmp     ??1CPercentPrinter@@QAE@XZ ; CPercentPrinter::~CPercentPrinter(void)
.text$x:00006832 __unwindfunclet$??1COpenCallbackConsole@@QAE@XZ$0 endp
.text$x:00006832
.text$x:00006837
.text$x:00006837 ; =============== S U B R O U T I N E =======================================
.text$x:00006837
.text$x:00006837
.text$x:00006837 __ehhandler$??1COpenCallbackConsole@@QAE@XZ proc near
.text$x:00006837                                         ; DATA XREF: COpenCallbackConsole::~COpenCallbackConsole(void)+5o
.text$x:00006837
.text$x:00006837 arg_4           = dword ptr  8
.text$x:00006837
.text$x:00006837                 mov     edx, [esp+arg_4]
.text$x:0000683B                 lea     eax, [edx+0Ch]
.text$x:0000683E                 mov     ecx, [edx-8]
.text$x:00006841                 xor     ecx, eax
.text$x:00006843                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006848                 mov     eax, offset __ehfuncinfo$??1COpenCallbackConsole@@QAE@XZ
.text$x:0000684D                 jmp     ___CxxFrameHandler3
.text$x:0000684D __ehhandler$??1COpenCallbackConsole@@QAE@XZ endp
.text$x:0000684D
.text$x:0000684D ; ---------------------------------------------------------------------------
.text$x:00006852                 align 4
.text$x:00006852 _text$x         ends
.text$x:00006852
.xdata$x:00006854 ; ===========================================================================
.xdata$x:00006854
.xdata$x:00006854 ; Segment type: Pure data
.xdata$x:00006854 ; Segment permissions: Read
.xdata$x:00006854 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006854                 assume cs:_xdata$x
.xdata$x:00006854                 ;org 6854h
.xdata$x:00006854 ; COMDAT (pick associative to section at 67BC)
.xdata$x:00006854 __unwindtable$??1COpenCallbackConsole@@QAE@XZ db 0FFh
.xdata$x:00006854                                         ; DATA XREF: .xdata$x:00006864o
.xdata$x:00006855                 db 0FFh
.xdata$x:00006856                 db 0FFh
.xdata$x:00006857                 db 0FFh
.xdata$x:00006858                 dd offset __unwindfunclet$??1COpenCallbackConsole@@QAE@XZ$0
.xdata$x:0000685C __ehfuncinfo$??1COpenCallbackConsole@@QAE@XZ db  22h ; "
.xdata$x:0000685C                                         ; DATA XREF: __ehhandler$??1COpenCallbackConsole@@QAE@XZ+11o
.xdata$x:0000685D                 db    5
.xdata$x:0000685E                 db  93h ; ô
.xdata$x:0000685F                 db  19h
.xdata$x:00006860                 db    1
.xdata$x:00006861                 db    0
.xdata$x:00006862                 db    0
.xdata$x:00006863                 db    0
.xdata$x:00006864                 dd offset __unwindtable$??1COpenCallbackConsole@@QAE@XZ
.xdata$x:00006868                 db    0
.xdata$x:00006869                 db    0
.xdata$x:0000686A                 db    0
.xdata$x:0000686B                 db    0
.xdata$x:0000686C                 db    0
.xdata$x:0000686D                 db    0
.xdata$x:0000686E                 db    0
.xdata$x:0000686F                 db    0
.xdata$x:00006870                 db    0
.xdata$x:00006871                 db    0
.xdata$x:00006872                 db    0
.xdata$x:00006873                 db    0
.xdata$x:00006874                 db    0
.xdata$x:00006875                 db    0
.xdata$x:00006876                 db    0
.xdata$x:00006877                 db    0
.xdata$x:00006878                 db    0
.xdata$x:00006879                 db    0
.xdata$x:0000687A                 db    0
.xdata$x:0000687B                 db    0
.xdata$x:0000687C                 db    1
.xdata$x:0000687D                 db    0
.xdata$x:0000687E                 db    0
.xdata$x:0000687F                 db    0
.xdata$x:0000687F _xdata$x        ends
.xdata$x:0000687F
.text:00006880 ; ===========================================================================
.text:00006880
.text:00006880 ; Segment type: Pure code
.text:00006880 ; Segment permissions: Read/Execute
.text:00006880 _text           segment para public 'CODE' use32
.text:00006880                 assume cs:_text
.text:00006880                 ;org 6880h
.text:00006880 ; COMDAT (pick any)
.text:00006880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006880
.text:00006880 ; =============== S U B R O U T I N E =======================================
.text:00006880
.text:00006880 ; Attributes: bp-based frame
.text:00006880
.text:00006880 ; _DWORD __thiscall COpenOptions::~COpenOptions(COpenOptions *__hidden this)
.text:00006880                 public ??1COpenOptions@@QAE@XZ
.text:00006880 ??1COpenOptions@@QAE@XZ proc near       ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+526p
.text:00006880                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+697p ...
.text:00006880
.text:00006880 var_4           = dword ptr -4
.text:00006880
.text:00006880                 push    ebp
.text:00006881                 mov     ebp, esp
.text:00006883                 push    ecx
.text:00006884                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000688B                 mov     [ebp+var_4], ecx
.text:0000688E                 mov     ecx, [ebp+var_4]
.text:00006891                 add     ecx, 48h ; 'H'  ; this
.text:00006894                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00006899                 add     esp, 4
.text:0000689C                 cmp     ebp, esp
.text:0000689E                 call    __RTC_CheckEsp
.text:000068A3                 mov     esp, ebp
.text:000068A5                 pop     ebp
.text:000068A6                 retn
.text:000068A6 ??1COpenOptions@@QAE@XZ endp
.text:000068A6
.text:000068A6 ; ---------------------------------------------------------------------------
.text:000068A7                 align 4
.text:000068A7 _text           ends
.text:000068A7
.text:000068A8 ; ===========================================================================
.text:000068A8
.text:000068A8 ; Segment type: Pure code
.text:000068A8 ; Segment permissions: Read/Execute
.text:000068A8 _text           segment para public 'CODE' use32
.text:000068A8                 assume cs:_text
.text:000068A8                 ;org 68A8h
.text:000068A8 ; COMDAT (pick any)
.text:000068A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000068A8
.text:000068A8 ; =============== S U B R O U T I N E =======================================
.text:000068A8
.text:000068A8 ; Attributes: bp-based frame
.text:000068A8
.text:000068A8 ; _DWORD __thiscall CReadArcItem::~CReadArcItem(CReadArcItem *__hidden this)
.text:000068A8                 public ??1CReadArcItem@@QAE@XZ
.text:000068A8 ??1CReadArcItem@@QAE@XZ proc near       ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+C7Ap
.text:000068A8                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+D48p ...
.text:000068A8
.text:000068A8 var_10          = dword ptr -10h
.text:000068A8 var_C           = dword ptr -0Ch
.text:000068A8 var_4           = dword ptr -4
.text:000068A8
.text:000068A8                 push    ebp
.text:000068A9                 mov     ebp, esp
.text:000068AB                 push    0FFFFFFFFh
.text:000068AD                 push    offset __ehhandler$??1CReadArcItem@@QAE@XZ
.text:000068B2                 mov     eax, large fs:0
.text:000068B8                 push    eax
.text:000068B9                 push    ecx
.text:000068BA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000068C1                 mov     eax, dword ptr ds:___security_cookie
.text:000068C6                 xor     eax, ebp
.text:000068C8                 push    eax
.text:000068C9                 lea     eax, [ebp+var_C]
.text:000068CC                 mov     large fs:0, eax
.text:000068D2                 mov     [ebp+var_10], ecx
.text:000068D5                 mov     [ebp+var_4], 2
.text:000068DC                 mov     ecx, [ebp+var_10]
.text:000068DF                 add     ecx, 24h ; '$'  ; this
.text:000068E2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000068E7                 mov     byte ptr [ebp+var_4], 1
.text:000068EB                 mov     ecx, [ebp+var_10]
.text:000068EE                 add     ecx, 18h        ; this
.text:000068F1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000068F6                 mov     byte ptr [ebp+var_4], 0
.text:000068FA                 mov     ecx, [ebp+var_10]
.text:000068FD                 add     ecx, 0Ch
.text:00006900                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00006905                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000690C                 mov     ecx, [ebp+var_10] ; this
.text:0000690F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00006914                 mov     ecx, [ebp+var_C]
.text:00006917                 mov     large fs:0, ecx
.text:0000691E                 pop     ecx
.text:0000691F                 add     esp, 10h
.text:00006922                 cmp     ebp, esp
.text:00006924                 call    __RTC_CheckEsp
.text:00006929                 mov     esp, ebp
.text:0000692B                 pop     ebp
.text:0000692C                 retn
.text:0000692C ??1CReadArcItem@@QAE@XZ endp
.text:0000692C
.text:0000692C ; ---------------------------------------------------------------------------
.text:0000692D                 align 10h
.text:0000692D _text           ends
.text:0000692D
.text$x:00006930 ; ===========================================================================
.text$x:00006930
.text$x:00006930 ; Segment type: Pure code
.text$x:00006930 ; Segment permissions: Read/Execute
.text$x:00006930 _text$x         segment para public 'CODE' use32
.text$x:00006930                 assume cs:_text$x
.text$x:00006930                 ;org 6930h
.text$x:00006930 ; COMDAT (pick associative to section at 68A8)
.text$x:00006930                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006930
.text$x:00006930 ; =============== S U B R O U T I N E =======================================
.text$x:00006930
.text$x:00006930
.text$x:00006930 __unwindfunclet$??1CReadArcItem@@QAE@XZ$0 proc near
.text$x:00006930                                         ; DATA XREF: .xdata$x:00006970o
.text$x:00006930                 mov     ecx, [ebp-10h]  ; this
.text$x:00006933                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006933 __unwindfunclet$??1CReadArcItem@@QAE@XZ$0 endp
.text$x:00006933
.text$x:00006938
.text$x:00006938 ; =============== S U B R O U T I N E =======================================
.text$x:00006938
.text$x:00006938
.text$x:00006938 __unwindfunclet$??1CReadArcItem@@QAE@XZ$1 proc near
.text$x:00006938                                         ; DATA XREF: .xdata$x:00006978o
.text$x:00006938                 mov     ecx, [ebp-10h]
.text$x:0000693B                 add     ecx, 0Ch
.text$x:0000693E                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:0000693E __unwindfunclet$??1CReadArcItem@@QAE@XZ$1 endp
.text$x:0000693E
.text$x:00006943
.text$x:00006943 ; =============== S U B R O U T I N E =======================================
.text$x:00006943
.text$x:00006943
.text$x:00006943 __unwindfunclet$??1CReadArcItem@@QAE@XZ$2 proc near
.text$x:00006943                                         ; DATA XREF: .xdata$x:00006980o
.text$x:00006943                 mov     ecx, [ebp-10h]
.text$x:00006946                 add     ecx, 18h        ; this
.text$x:00006949                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006949 __unwindfunclet$??1CReadArcItem@@QAE@XZ$2 endp
.text$x:00006949
.text$x:0000694E
.text$x:0000694E ; =============== S U B R O U T I N E =======================================
.text$x:0000694E
.text$x:0000694E
.text$x:0000694E __ehhandler$??1CReadArcItem@@QAE@XZ proc near
.text$x:0000694E                                         ; DATA XREF: CReadArcItem::~CReadArcItem(void)+5o
.text$x:0000694E
.text$x:0000694E arg_4           = dword ptr  8
.text$x:0000694E
.text$x:0000694E                 mov     edx, [esp+arg_4]
.text$x:00006952                 lea     eax, [edx+0Ch]
.text$x:00006955                 mov     ecx, [edx-8]
.text$x:00006958                 xor     ecx, eax
.text$x:0000695A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000695F                 mov     eax, offset __ehfuncinfo$??1CReadArcItem@@QAE@XZ
.text$x:00006964                 jmp     ___CxxFrameHandler3
.text$x:00006964 __ehhandler$??1CReadArcItem@@QAE@XZ endp
.text$x:00006964
.text$x:00006964 ; ---------------------------------------------------------------------------
.text$x:00006969                 align 4
.text$x:00006969 _text$x         ends
.text$x:00006969
.xdata$x:0000696C ; ===========================================================================
.xdata$x:0000696C
.xdata$x:0000696C ; Segment type: Pure data
.xdata$x:0000696C ; Segment permissions: Read
.xdata$x:0000696C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000696C                 assume cs:_xdata$x
.xdata$x:0000696C                 ;org 696Ch
.xdata$x:0000696C ; COMDAT (pick associative to section at 68A8)
.xdata$x:0000696C __unwindtable$??1CReadArcItem@@QAE@XZ db 0FFh
.xdata$x:0000696C                                         ; DATA XREF: .xdata$x:0000698Co
.xdata$x:0000696D                 db 0FFh
.xdata$x:0000696E                 db 0FFh
.xdata$x:0000696F                 db 0FFh
.xdata$x:00006970                 dd offset __unwindfunclet$??1CReadArcItem@@QAE@XZ$0
.xdata$x:00006974                 align 8
.xdata$x:00006978                 dd offset __unwindfunclet$??1CReadArcItem@@QAE@XZ$1
.xdata$x:0000697C                 db    1
.xdata$x:0000697D                 db    0
.xdata$x:0000697E                 db    0
.xdata$x:0000697F                 db    0
.xdata$x:00006980                 dd offset __unwindfunclet$??1CReadArcItem@@QAE@XZ$2
.xdata$x:00006984 __ehfuncinfo$??1CReadArcItem@@QAE@XZ db  22h ; "
.xdata$x:00006984                                         ; DATA XREF: __ehhandler$??1CReadArcItem@@QAE@XZ+11o
.xdata$x:00006985                 db    5
.xdata$x:00006986                 db  93h ; ô
.xdata$x:00006987                 db  19h
.xdata$x:00006988                 db    3
.xdata$x:00006989                 db    0
.xdata$x:0000698A                 db    0
.xdata$x:0000698B                 db    0
.xdata$x:0000698C                 dd offset __unwindtable$??1CReadArcItem@@QAE@XZ
.xdata$x:00006990                 db    0
.xdata$x:00006991                 db    0
.xdata$x:00006992                 db    0
.xdata$x:00006993                 db    0
.xdata$x:00006994                 db    0
.xdata$x:00006995                 db    0
.xdata$x:00006996                 db    0
.xdata$x:00006997                 db    0
.xdata$x:00006998                 db    0
.xdata$x:00006999                 db    0
.xdata$x:0000699A                 db    0
.xdata$x:0000699B                 db    0
.xdata$x:0000699C                 db    0
.xdata$x:0000699D                 db    0
.xdata$x:0000699E                 db    0
.xdata$x:0000699F                 db    0
.xdata$x:000069A0                 db    0
.xdata$x:000069A1                 db    0
.xdata$x:000069A2                 db    0
.xdata$x:000069A3                 db    0
.xdata$x:000069A4                 db    1
.xdata$x:000069A5                 db    0
.xdata$x:000069A6                 db    0
.xdata$x:000069A7                 db    0
.xdata$x:000069A7 _xdata$x        ends
.xdata$x:000069A7
.text:000069A8 ; ===========================================================================
.text:000069A8
.text:000069A8 ; Segment type: Pure code
.text:000069A8 ; Segment permissions: Read/Execute
.text:000069A8 _text           segment para public 'CODE' use32
.text:000069A8                 assume cs:_text
.text:000069A8                 ;org 69A8h
.text:000069A8 ; COMDAT (pick any)
.text:000069A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000069A8
.text:000069A8 ; =============== S U B R O U T I N E =======================================
.text:000069A8
.text:000069A8 ; Attributes: bp-based frame
.text:000069A8
.text:000069A8 ; public: unsigned int __thiscall CObjectVector<class UString>::Size(void)const
.text:000069A8                 public ?Size@?$CObjectVector@VUString@@@@QBEIXZ
.text:000069A8 ?Size@?$CObjectVector@VUString@@@@QBEIXZ proc near
.text:000069A8                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+9Bp
.text:000069A8                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+CEp ...
.text:000069A8
.text:000069A8 var_4           = dword ptr -4
.text:000069A8
.text:000069A8                 push    ebp
.text:000069A9                 mov     ebp, esp
.text:000069AB                 push    ecx
.text:000069AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069B3                 mov     [ebp+var_4], ecx
.text:000069B6                 mov     ecx, [ebp+var_4]
.text:000069B9                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000069BE                 add     esp, 4
.text:000069C1                 cmp     ebp, esp
.text:000069C3                 call    __RTC_CheckEsp
.text:000069C8                 mov     esp, ebp
.text:000069CA                 pop     ebp
.text:000069CB                 retn
.text:000069CB ?Size@?$CObjectVector@VUString@@@@QBEIXZ endp
.text:000069CB
.text:000069CB _text           ends
.text:000069CB
.text:000069CC ; ===========================================================================
.text:000069CC
.text:000069CC ; Segment type: Pure code
.text:000069CC ; Segment permissions: Read/Execute
.text:000069CC _text           segment para public 'CODE' use32
.text:000069CC                 assume cs:_text
.text:000069CC                 ;org 69CCh
.text:000069CC ; COMDAT (pick any)
.text:000069CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000069CC
.text:000069CC ; =============== S U B R O U T I N E =======================================
.text:000069CC
.text:000069CC ; Attributes: bp-based frame
.text:000069CC
.text:000069CC ; public: __thiscall CObjectVector<class UString>::CObjectVector<class UString>(void)
.text:000069CC                 public ??0?$CObjectVector@VUString@@@@QAE@XZ
.text:000069CC ??0?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:000069CC                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+C15p
.text:000069CC                                         ; CReadArcItem::CReadArcItem(void)+42p ...
.text:000069CC
.text:000069CC var_4           = dword ptr -4
.text:000069CC
.text:000069CC                 push    ebp
.text:000069CD                 mov     ebp, esp
.text:000069CF                 push    ecx
.text:000069D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069D7                 mov     [ebp+var_4], ecx
.text:000069DA                 mov     ecx, [ebp+var_4]
.text:000069DD                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000069E2                 mov     eax, [ebp+var_4]
.text:000069E5                 add     esp, 4
.text:000069E8                 cmp     ebp, esp
.text:000069EA                 call    __RTC_CheckEsp
.text:000069EF                 mov     esp, ebp
.text:000069F1                 pop     ebp
.text:000069F2                 retn
.text:000069F2 ??0?$CObjectVector@VUString@@@@QAE@XZ endp
.text:000069F2
.text:000069F2 ; ---------------------------------------------------------------------------
.text:000069F3                 align 4
.text:000069F3 _text           ends
.text:000069F3
.text:000069F4 ; ===========================================================================
.text:000069F4
.text:000069F4 ; Segment type: Pure code
.text:000069F4 ; Segment permissions: Read/Execute
.text:000069F4 _text           segment para public 'CODE' use32
.text:000069F4                 assume cs:_text
.text:000069F4                 ;org 69F4h
.text:000069F4 ; COMDAT (pick any)
.text:000069F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000069F4
.text:000069F4 ; =============== S U B R O U T I N E =======================================
.text:000069F4
.text:000069F4 ; Attributes: bp-based frame
.text:000069F4
.text:000069F4 ; public: class UString & __thiscall CObjectVector<class UString>::operator[](unsigned int)
.text:000069F4                 public ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
.text:000069F4 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z proc near
.text:000069F4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+18Cp
.text:000069F4                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+8C4p
.text:000069F4
.text:000069F4 var_4           = dword ptr -4
.text:000069F4 arg_0           = dword ptr  8
.text:000069F4
.text:000069F4                 push    ebp
.text:000069F5                 mov     ebp, esp
.text:000069F7                 push    ecx
.text:000069F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069FF                 mov     [ebp+var_4], ecx
.text:00006A02                 mov     eax, [ebp+arg_0]
.text:00006A05                 push    eax
.text:00006A06                 mov     ecx, [ebp+var_4]
.text:00006A09                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006A0E                 mov     eax, [eax]
.text:00006A10                 add     esp, 4
.text:00006A13                 cmp     ebp, esp
.text:00006A15                 call    __RTC_CheckEsp
.text:00006A1A                 mov     esp, ebp
.text:00006A1C                 pop     ebp
.text:00006A1D                 retn    4
.text:00006A1D ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z endp
.text:00006A1D
.text:00006A1D _text           ends
.text:00006A1D
.text:00006A20 ; ===========================================================================
.text:00006A20
.text:00006A20 ; Segment type: Pure code
.text:00006A20 ; Segment permissions: Read/Execute
.text:00006A20 _text           segment para public 'CODE' use32
.text:00006A20                 assume cs:_text
.text:00006A20                 ;org 6A20h
.text:00006A20 ; COMDAT (pick any)
.text:00006A20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A20
.text:00006A20 ; =============== S U B R O U T I N E =======================================
.text:00006A20
.text:00006A20 ; Attributes: bp-based frame
.text:00006A20
.text:00006A20 ; public: __thiscall CObjectVector<class UString>::~CObjectVector<class UString>(void)
.text:00006A20                 public ??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00006A20 ??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:00006A20                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+C6Bp
.text:00006A20                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+D39p ...
.text:00006A20
.text:00006A20 var_20          = dword ptr -20h
.text:00006A20 var_1C          = dword ptr -1Ch
.text:00006A20 var_18          = dword ptr -18h
.text:00006A20 var_14          = dword ptr -14h
.text:00006A20 var_10          = dword ptr -10h
.text:00006A20 var_C           = dword ptr -0Ch
.text:00006A20 var_4           = dword ptr -4
.text:00006A20
.text:00006A20                 push    ebp
.text:00006A21                 mov     ebp, esp
.text:00006A23                 push    0FFFFFFFFh
.text:00006A25                 push    offset __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00006A2A                 mov     eax, large fs:0
.text:00006A30                 push    eax
.text:00006A31                 sub     esp, 14h
.text:00006A34                 mov     eax, 0CCCCCCCCh
.text:00006A39                 mov     [ebp+var_20], eax
.text:00006A3C                 mov     [ebp+var_1C], eax
.text:00006A3F                 mov     [ebp+var_18], eax
.text:00006A42                 mov     [ebp+var_14], eax
.text:00006A45                 mov     [ebp+var_10], eax
.text:00006A48                 mov     eax, dword ptr ds:___security_cookie
.text:00006A4D                 xor     eax, ebp
.text:00006A4F                 push    eax
.text:00006A50                 lea     eax, [ebp+var_C]
.text:00006A53                 mov     large fs:0, eax
.text:00006A59                 mov     [ebp+var_10], ecx
.text:00006A5C                 mov     [ebp+var_4], 0
.text:00006A63                 mov     ecx, [ebp+var_10]
.text:00006A66                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006A6B                 mov     [ebp+var_14], eax
.text:00006A6E
.text:00006A6E loc_6A6E:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void):loc_6AB0j
.text:00006A6E                 cmp     [ebp+var_14], 0
.text:00006A72                 jz      short loc_6AB2
.text:00006A74                 mov     eax, [ebp+var_14]
.text:00006A77                 sub     eax, 1
.text:00006A7A                 mov     [ebp+var_14], eax
.text:00006A7D                 mov     ecx, [ebp+var_14]
.text:00006A80                 push    ecx
.text:00006A81                 mov     ecx, [ebp+var_10]
.text:00006A84                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006A89                 mov     edx, [eax]
.text:00006A8B                 mov     [ebp+var_1C], edx
.text:00006A8E                 mov     eax, [ebp+var_1C]
.text:00006A91                 mov     [ebp+var_18], eax
.text:00006A94                 cmp     [ebp+var_18], 0
.text:00006A98                 jz      short loc_6AA9
.text:00006A9A                 push    1
.text:00006A9C                 mov     ecx, [ebp+var_18]
.text:00006A9F                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:00006AA4                 mov     [ebp+var_20], eax
.text:00006AA7                 jmp     short loc_6AB0
.text:00006AA9 ; ---------------------------------------------------------------------------
.text:00006AA9
.text:00006AA9 loc_6AA9:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+78j
.text:00006AA9                 mov     [ebp+var_20], 0
.text:00006AB0
.text:00006AB0 loc_6AB0:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+87j
.text:00006AB0                 jmp     short loc_6A6E
.text:00006AB2 ; ---------------------------------------------------------------------------
.text:00006AB2
.text:00006AB2 loc_6AB2:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+52j
.text:00006AB2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006AB9                 mov     ecx, [ebp+var_10]
.text:00006ABC                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006AC1                 mov     ecx, [ebp+var_C]
.text:00006AC4                 mov     large fs:0, ecx
.text:00006ACB                 pop     ecx
.text:00006ACC                 add     esp, 20h
.text:00006ACF                 cmp     ebp, esp
.text:00006AD1                 call    __RTC_CheckEsp
.text:00006AD6                 mov     esp, ebp
.text:00006AD8                 pop     ebp
.text:00006AD9                 retn
.text:00006AD9 ??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text:00006AD9
.text:00006AD9 ; ---------------------------------------------------------------------------
.text:00006ADA                 align 4
.text:00006ADA _text           ends
.text:00006ADA
.text$x:00006ADC ; ===========================================================================
.text$x:00006ADC
.text$x:00006ADC ; Segment type: Pure code
.text$x:00006ADC ; Segment permissions: Read/Execute
.text$x:00006ADC _text$x         segment para public 'CODE' use32
.text$x:00006ADC                 assume cs:_text$x
.text$x:00006ADC                 ;org 6ADCh
.text$x:00006ADC ; COMDAT (pick associative to section at 6A20)
.text$x:00006ADC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006ADC
.text$x:00006ADC ; =============== S U B R O U T I N E =======================================
.text$x:00006ADC
.text$x:00006ADC
.text$x:00006ADC __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 proc near
.text$x:00006ADC                                         ; DATA XREF: .xdata$x:00006B04o
.text$x:00006ADC                 mov     ecx, [ebp-10h]
.text$x:00006ADF                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00006ADF __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 endp
.text$x:00006ADF
.text$x:00006AE4
.text$x:00006AE4 ; =============== S U B R O U T I N E =======================================
.text$x:00006AE4
.text$x:00006AE4
.text$x:00006AE4 __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text$x:00006AE4                                         ; DATA XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+5o
.text$x:00006AE4
.text$x:00006AE4 arg_4           = dword ptr  8
.text$x:00006AE4
.text$x:00006AE4                 mov     edx, [esp+arg_4]
.text$x:00006AE8                 lea     eax, [edx+0Ch]
.text$x:00006AEB                 mov     ecx, [edx-18h]
.text$x:00006AEE                 xor     ecx, eax
.text$x:00006AF0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006AF5                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
.text$x:00006AFA                 jmp     ___CxxFrameHandler3
.text$x:00006AFA __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text$x:00006AFA
.text$x:00006AFA ; ---------------------------------------------------------------------------
.text$x:00006AFF                 align 10h
.text$x:00006AFF _text$x         ends
.text$x:00006AFF
.xdata$x:00006B00 ; ===========================================================================
.xdata$x:00006B00
.xdata$x:00006B00 ; Segment type: Pure data
.xdata$x:00006B00 ; Segment permissions: Read
.xdata$x:00006B00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006B00                 assume cs:_xdata$x
.xdata$x:00006B00                 ;org 6B00h
.xdata$x:00006B00 ; COMDAT (pick associative to section at 6A20)
.xdata$x:00006B00 __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ db 0FFh
.xdata$x:00006B00                                         ; DATA XREF: .xdata$x:00006B10o
.xdata$x:00006B01                 db 0FFh
.xdata$x:00006B02                 db 0FFh
.xdata$x:00006B03                 db 0FFh
.xdata$x:00006B04                 dd offset __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
.xdata$x:00006B08 __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ db  22h ; "
.xdata$x:00006B08                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ+11o
.xdata$x:00006B09                 db    5
.xdata$x:00006B0A                 db  93h ; ô
.xdata$x:00006B0B                 db  19h
.xdata$x:00006B0C                 db    1
.xdata$x:00006B0D                 db    0
.xdata$x:00006B0E                 db    0
.xdata$x:00006B0F                 db    0
.xdata$x:00006B10                 dd offset __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
.xdata$x:00006B14                 db    0
.xdata$x:00006B15                 db    0
.xdata$x:00006B16                 db    0
.xdata$x:00006B17                 db    0
.xdata$x:00006B18                 db    0
.xdata$x:00006B19                 db    0
.xdata$x:00006B1A                 db    0
.xdata$x:00006B1B                 db    0
.xdata$x:00006B1C                 db    0
.xdata$x:00006B1D                 db    0
.xdata$x:00006B1E                 db    0
.xdata$x:00006B1F                 db    0
.xdata$x:00006B20                 db    0
.xdata$x:00006B21                 db    0
.xdata$x:00006B22                 db    0
.xdata$x:00006B23                 db    0
.xdata$x:00006B24                 db    0
.xdata$x:00006B25                 db    0
.xdata$x:00006B26                 db    0
.xdata$x:00006B27                 db    0
.xdata$x:00006B28                 db    1
.xdata$x:00006B29                 db    0
.xdata$x:00006B2A                 db    0
.xdata$x:00006B2B                 db    0
.xdata$x:00006B2B _xdata$x        ends
.xdata$x:00006B2B
.text:00006B2C ; ===========================================================================
.text:00006B2C
.text:00006B2C ; Segment type: Pure code
.text:00006B2C ; Segment permissions: Read/Execute
.text:00006B2C _text           segment para public 'CODE' use32
.text:00006B2C                 assume cs:_text
.text:00006B2C                 ;org 6B2Ch
.text:00006B2C ; COMDAT (pick any)
.text:00006B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B2C
.text:00006B2C ; =============== S U B R O U T I N E =======================================
.text:00006B2C
.text:00006B2C ; Attributes: bp-based frame
.text:00006B2C
.text:00006B2C ; public: struct CArcInfoEx const & __thiscall CObjectVector<struct CArcInfoEx>::operator[](unsigned int)const
.text:00006B2C                 public ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z
.text:00006B2C ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z proc near
.text:00006B2C                                         ; CODE XREF: Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &)+55p
.text:00006B2C                                         ; CCodecs::GetFormatNamePtr(int)+30p
.text:00006B2C
.text:00006B2C var_4           = dword ptr -4
.text:00006B2C arg_0           = dword ptr  8
.text:00006B2C
.text:00006B2C                 push    ebp
.text:00006B2D                 mov     ebp, esp
.text:00006B2F                 push    ecx
.text:00006B30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B37                 mov     [ebp+var_4], ecx
.text:00006B3A                 mov     eax, [ebp+arg_0]
.text:00006B3D                 push    eax
.text:00006B3E                 mov     ecx, [ebp+var_4]
.text:00006B41                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006B46                 mov     eax, [eax]
.text:00006B48                 add     esp, 4
.text:00006B4B                 cmp     ebp, esp
.text:00006B4D                 call    __RTC_CheckEsp
.text:00006B52                 mov     esp, ebp
.text:00006B54                 pop     ebp
.text:00006B55                 retn    4
.text:00006B55 ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z endp
.text:00006B55
.text:00006B55 _text           ends
.text:00006B55
.text:00006B58 ; ===========================================================================
.text:00006B58
.text:00006B58 ; Segment type: Pure code
.text:00006B58 ; Segment permissions: Read/Execute
.text:00006B58 _text           segment para public 'CODE' use32
.text:00006B58                 assume cs:_text
.text:00006B58                 ;org 6B58h
.text:00006B58 ; COMDAT (pick any)
.text:00006B58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B58
.text:00006B58 ; =============== S U B R O U T I N E =======================================
.text:00006B58
.text:00006B58 ; Attributes: bp-based frame
.text:00006B58
.text:00006B58 ; public: struct CArcInfoEx & __thiscall CObjectVector<struct CArcInfoEx>::operator[](unsigned int)
.text:00006B58                 public ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z
.text:00006B58 ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z proc near
.text:00006B58                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+15CCp
.text:00006B58
.text:00006B58 var_4           = dword ptr -4
.text:00006B58 arg_0           = dword ptr  8
.text:00006B58
.text:00006B58                 push    ebp
.text:00006B59                 mov     ebp, esp
.text:00006B5B                 push    ecx
.text:00006B5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B63                 mov     [ebp+var_4], ecx
.text:00006B66                 mov     eax, [ebp+arg_0]
.text:00006B69                 push    eax
.text:00006B6A                 mov     ecx, [ebp+var_4]
.text:00006B6D                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006B72                 mov     eax, [eax]
.text:00006B74                 add     esp, 4
.text:00006B77                 cmp     ebp, esp
.text:00006B79                 call    __RTC_CheckEsp
.text:00006B7E                 mov     esp, ebp
.text:00006B80                 pop     ebp
.text:00006B81                 retn    4
.text:00006B81 ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z endp
.text:00006B81
.text:00006B81 _text           ends
.text:00006B81
.text:00006B84 ; ===========================================================================
.text:00006B84
.text:00006B84 ; Segment type: Pure code
.text:00006B84 ; Segment permissions: Read/Execute
.text:00006B84 _text           segment para public 'CODE' use32
.text:00006B84                 assume cs:_text
.text:00006B84                 ;org 6B84h
.text:00006B84 ; COMDAT (pick any)
.text:00006B84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B84
.text:00006B84 ; =============== S U B R O U T I N E =======================================
.text:00006B84
.text:00006B84 ; Attributes: bp-based frame
.text:00006B84
.text:00006B84 ; public: __thiscall CMyComPtr<struct IInArchive>::operator struct IInArchive *(void)const
.text:00006B84                 public ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
.text:00006B84 ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ proc near
.text:00006B84                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+173p
.text:00006B84                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+A23p
.text:00006B84
.text:00006B84 var_4           = dword ptr -4
.text:00006B84
.text:00006B84                 push    ebp
.text:00006B85                 mov     ebp, esp
.text:00006B87                 push    ecx
.text:00006B88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B8F                 mov     [ebp+var_4], ecx
.text:00006B92                 mov     eax, [ebp+var_4]
.text:00006B95                 mov     eax, [eax]
.text:00006B97                 mov     esp, ebp
.text:00006B99                 pop     ebp
.text:00006B9A                 retn
.text:00006B9A ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ endp
.text:00006B9A
.text:00006B9A ; ---------------------------------------------------------------------------
.text:00006B9B                 align 4
.text:00006B9B _text           ends
.text:00006B9B
.text:00006B9C ; ===========================================================================
.text:00006B9C
.text:00006B9C ; Segment type: Pure code
.text:00006B9C ; Segment permissions: Read/Execute
.text:00006B9C _text           segment para public 'CODE' use32
.text:00006B9C                 assume cs:_text
.text:00006B9C                 ;org 6B9Ch
.text:00006B9C ; COMDAT (pick any)
.text:00006B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B9C
.text:00006B9C ; =============== S U B R O U T I N E =======================================
.text:00006B9C
.text:00006B9C ; Attributes: bp-based frame
.text:00006B9C
.text:00006B9C ; public: struct IInArchive * __thiscall CMyComPtr<struct IInArchive>::operator->(void)const
.text:00006B9C                 public ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
.text:00006B9C ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ proc near
.text:00006B9C                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+425p
.text:00006B9C
.text:00006B9C var_4           = dword ptr -4
.text:00006B9C
.text:00006B9C                 push    ebp
.text:00006B9D                 mov     ebp, esp
.text:00006B9F                 push    ecx
.text:00006BA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BA7                 mov     [ebp+var_4], ecx
.text:00006BAA                 mov     eax, [ebp+var_4]
.text:00006BAD                 mov     eax, [eax]
.text:00006BAF                 mov     esp, ebp
.text:00006BB1                 pop     ebp
.text:00006BB2                 retn
.text:00006BB2 ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ endp
.text:00006BB2
.text:00006BB2 ; ---------------------------------------------------------------------------
.text:00006BB3                 align 4
.text:00006BB3 _text           ends
.text:00006BB3
.text:00006BB4 ; ===========================================================================
.text:00006BB4
.text:00006BB4 ; Segment type: Pure code
.text:00006BB4 ; Segment permissions: Read/Execute
.text:00006BB4 _text           segment para public 'CODE' use32
.text:00006BB4                 assume cs:_text
.text:00006BB4                 ;org 6BB4h
.text:00006BB4 ; COMDAT (pick any)
.text:00006BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006BB4
.text:00006BB4 ; =============== S U B R O U T I N E =======================================
.text:00006BB4
.text:00006BB4 ; Attributes: bp-based frame
.text:00006BB4
.text:00006BB4 ; public: __thiscall CMyComPtr<struct IArchiveGetRawProps>::operator struct IArchiveGetRawProps *(void)const
.text:00006BB4                 public ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ
.text:00006BB4 ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ proc near
.text:00006BB4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+ACBp
.text:00006BB4                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+AE1p
.text:00006BB4
.text:00006BB4 var_4           = dword ptr -4
.text:00006BB4
.text:00006BB4                 push    ebp
.text:00006BB5                 mov     ebp, esp
.text:00006BB7                 push    ecx
.text:00006BB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BBF                 mov     [ebp+var_4], ecx
.text:00006BC2                 mov     eax, [ebp+var_4]
.text:00006BC5                 mov     eax, [eax]
.text:00006BC7                 mov     esp, ebp
.text:00006BC9                 pop     ebp
.text:00006BCA                 retn
.text:00006BCA ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ endp
.text:00006BCA
.text:00006BCA ; ---------------------------------------------------------------------------
.text:00006BCB                 align 4
.text:00006BCB _text           ends
.text:00006BCB
.text:00006BCC ; ===========================================================================
.text:00006BCC
.text:00006BCC ; Segment type: Pure code
.text:00006BCC ; Segment permissions: Read/Execute
.text:00006BCC _text           segment para public 'CODE' use32
.text:00006BCC                 assume cs:_text
.text:00006BCC                 ;org 6BCCh
.text:00006BCC ; COMDAT (pick any)
.text:00006BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006BCC
.text:00006BCC ; =============== S U B R O U T I N E =======================================
.text:00006BCC
.text:00006BCC ; Attributes: bp-based frame
.text:00006BCC
.text:00006BCC ; public: struct IArchiveGetRawProps * __thiscall CMyComPtr<struct IArchiveGetRawProps>::operator->(void)const
.text:00006BCC                 public ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ
.text:00006BCC ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ proc near
.text:00006BCC                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+1B7p
.text:00006BCC
.text:00006BCC var_4           = dword ptr -4
.text:00006BCC
.text:00006BCC                 push    ebp
.text:00006BCD                 mov     ebp, esp
.text:00006BCF                 push    ecx
.text:00006BD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BD7                 mov     [ebp+var_4], ecx
.text:00006BDA                 mov     eax, [ebp+var_4]
.text:00006BDD                 mov     eax, [eax]
.text:00006BDF                 mov     esp, ebp
.text:00006BE1                 pop     ebp
.text:00006BE2                 retn
.text:00006BE2 ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ endp
.text:00006BE2
.text:00006BE2 ; ---------------------------------------------------------------------------
.text:00006BE3                 align 4
.text:00006BE3 _text           ends
.text:00006BE3
.text:00006BE4 ; ===========================================================================
.text:00006BE4
.text:00006BE4 ; Segment type: Pure code
.text:00006BE4 ; Segment permissions: Read/Execute
.text:00006BE4 _text           segment para public 'CODE' use32
.text:00006BE4                 assume cs:_text
.text:00006BE4                 ;org 6BE4h
.text:00006BE4 ; COMDAT (pick any)
.text:00006BE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006BE4
.text:00006BE4 ; =============== S U B R O U T I N E =======================================
.text:00006BE4
.text:00006BE4 ; Attributes: bp-based frame
.text:00006BE4
.text:00006BE4 ; public: unsigned int __thiscall CObjectVector<class CArc>::Size(void)const
.text:00006BE4                 public ?Size@?$CObjectVector@VCArc@@@@QBEIXZ
.text:00006BE4 ?Size@?$CObjectVector@VCArc@@@@QBEIXZ proc near
.text:00006BE4                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+51p
.text:00006BE4                                         ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+2DEp ...
.text:00006BE4
.text:00006BE4 var_4           = dword ptr -4
.text:00006BE4
.text:00006BE4                 push    ebp
.text:00006BE5                 mov     ebp, esp
.text:00006BE7                 push    ecx
.text:00006BE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BEF                 mov     [ebp+var_4], ecx
.text:00006BF2                 mov     ecx, [ebp+var_4]
.text:00006BF5                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006BFA                 add     esp, 4
.text:00006BFD                 cmp     ebp, esp
.text:00006BFF                 call    __RTC_CheckEsp
.text:00006C04                 mov     esp, ebp
.text:00006C06                 pop     ebp
.text:00006C07                 retn
.text:00006C07 ?Size@?$CObjectVector@VCArc@@@@QBEIXZ endp
.text:00006C07
.text:00006C07 _text           ends
.text:00006C07
.text:00006C08 ; ===========================================================================
.text:00006C08
.text:00006C08 ; Segment type: Pure code
.text:00006C08 ; Segment permissions: Read/Execute
.text:00006C08 _text           segment para public 'CODE' use32
.text:00006C08                 assume cs:_text
.text:00006C08                 ;org 6C08h
.text:00006C08 ; COMDAT (pick any)
.text:00006C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C08
.text:00006C08 ; =============== S U B R O U T I N E =======================================
.text:00006C08
.text:00006C08 ; Attributes: bp-based frame
.text:00006C08
.text:00006C08 ; public: __thiscall CObjectVector<class CArc>::CObjectVector<class CArc>(void)
.text:00006C08                 public ??0?$CObjectVector@VCArc@@@@QAE@XZ
.text:00006C08 ??0?$CObjectVector@VCArc@@@@QAE@XZ proc near
.text:00006C08                                         ; CODE XREF: CArchiveLink::CArchiveLink(void)+30p
.text:00006C08
.text:00006C08 var_4           = dword ptr -4
.text:00006C08
.text:00006C08                 push    ebp
.text:00006C09                 mov     ebp, esp
.text:00006C0B                 push    ecx
.text:00006C0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C13                 mov     [ebp+var_4], ecx
.text:00006C16                 mov     ecx, [ebp+var_4]
.text:00006C19                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006C1E                 mov     eax, [ebp+var_4]
.text:00006C21                 add     esp, 4
.text:00006C24                 cmp     ebp, esp
.text:00006C26                 call    __RTC_CheckEsp
.text:00006C2B                 mov     esp, ebp
.text:00006C2D                 pop     ebp
.text:00006C2E                 retn
.text:00006C2E ??0?$CObjectVector@VCArc@@@@QAE@XZ endp
.text:00006C2E
.text:00006C2E ; ---------------------------------------------------------------------------
.text:00006C2F                 align 10h
.text:00006C2F _text           ends
.text:00006C2F
.text:00006C30 ; ===========================================================================
.text:00006C30
.text:00006C30 ; Segment type: Pure code
.text:00006C30 ; Segment permissions: Read/Execute
.text:00006C30 _text           segment para public 'CODE' use32
.text:00006C30                 assume cs:_text
.text:00006C30                 ;org 6C30h
.text:00006C30 ; COMDAT (pick any)
.text:00006C30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C30
.text:00006C30 ; =============== S U B R O U T I N E =======================================
.text:00006C30
.text:00006C30 ; Attributes: bp-based frame
.text:00006C30
.text:00006C30 ; public: class CArc const & __thiscall CObjectVector<class CArc>::operator[](unsigned int)const
.text:00006C30                 public ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z
.text:00006C30 ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z proc near
.text:00006C30                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+66p
.text:00006C30                                         ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+329p
.text:00006C30
.text:00006C30 var_4           = dword ptr -4
.text:00006C30 arg_0           = dword ptr  8
.text:00006C30
.text:00006C30                 push    ebp
.text:00006C31                 mov     ebp, esp
.text:00006C33                 push    ecx
.text:00006C34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C3B                 mov     [ebp+var_4], ecx
.text:00006C3E                 mov     eax, [ebp+arg_0]
.text:00006C41                 push    eax
.text:00006C42                 mov     ecx, [ebp+var_4]
.text:00006C45                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006C4A                 mov     eax, [eax]
.text:00006C4C                 add     esp, 4
.text:00006C4F                 cmp     ebp, esp
.text:00006C51                 call    __RTC_CheckEsp
.text:00006C56                 mov     esp, ebp
.text:00006C58                 pop     ebp
.text:00006C59                 retn    4
.text:00006C59 ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z endp
.text:00006C59
.text:00006C59 _text           ends
.text:00006C59
.text:00006C5C ; ===========================================================================
.text:00006C5C
.text:00006C5C ; Segment type: Pure code
.text:00006C5C ; Segment permissions: Read/Execute
.text:00006C5C _text           segment para public 'CODE' use32
.text:00006C5C                 assume cs:_text
.text:00006C5C                 ;org 6C5Ch
.text:00006C5C ; COMDAT (pick any)
.text:00006C5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C5C
.text:00006C5C ; =============== S U B R O U T I N E =======================================
.text:00006C5C
.text:00006C5C ; Attributes: bp-based frame
.text:00006C5C
.text:00006C5C ; public: class CArc & __thiscall CObjectVector<class CArc>::operator[](unsigned int)
.text:00006C5C                 public ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z
.text:00006C5C ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z proc near
.text:00006C5C                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+71Dp
.text:00006C5C                                         ; CObjectVector<CArc>::Back(void)+1Dp
.text:00006C5C
.text:00006C5C var_4           = dword ptr -4
.text:00006C5C arg_0           = dword ptr  8
.text:00006C5C
.text:00006C5C                 push    ebp
.text:00006C5D                 mov     ebp, esp
.text:00006C5F                 push    ecx
.text:00006C60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C67                 mov     [ebp+var_4], ecx
.text:00006C6A                 mov     eax, [ebp+arg_0]
.text:00006C6D                 push    eax
.text:00006C6E                 mov     ecx, [ebp+var_4]
.text:00006C71                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006C76                 mov     eax, [eax]
.text:00006C78                 add     esp, 4
.text:00006C7B                 cmp     ebp, esp
.text:00006C7D                 call    __RTC_CheckEsp
.text:00006C82                 mov     esp, ebp
.text:00006C84                 pop     ebp
.text:00006C85                 retn    4
.text:00006C85 ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z endp
.text:00006C85
.text:00006C85 _text           ends
.text:00006C85
.text:00006C88 ; ===========================================================================
.text:00006C88
.text:00006C88 ; Segment type: Pure code
.text:00006C88 ; Segment permissions: Read/Execute
.text:00006C88 _text           segment para public 'CODE' use32
.text:00006C88                 assume cs:_text
.text:00006C88                 ;org 6C88h
.text:00006C88 ; COMDAT (pick any)
.text:00006C88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C88
.text:00006C88 ; =============== S U B R O U T I N E =======================================
.text:00006C88
.text:00006C88 ; Attributes: bp-based frame
.text:00006C88
.text:00006C88 ; public: class CArc & __thiscall CObjectVector<class CArc>::Back(void)
.text:00006C88                 public ?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ
.text:00006C88 ?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ proc near
.text:00006C88                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+A03p
.text:00006C88
.text:00006C88 var_4           = dword ptr -4
.text:00006C88
.text:00006C88                 push    ebp
.text:00006C89                 mov     ebp, esp
.text:00006C8B                 push    ecx
.text:00006C8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C93                 mov     [ebp+var_4], ecx
.text:00006C96                 mov     ecx, [ebp+var_4]
.text:00006C99                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006C9E                 sub     eax, 1
.text:00006CA1                 push    eax
.text:00006CA2                 mov     ecx, [ebp+var_4]
.text:00006CA5                 call    ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[](uint)
.text:00006CAA                 add     esp, 4
.text:00006CAD                 cmp     ebp, esp
.text:00006CAF                 call    __RTC_CheckEsp
.text:00006CB4                 mov     esp, ebp
.text:00006CB6                 pop     ebp
.text:00006CB7                 retn
.text:00006CB7 ?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ endp
.text:00006CB7
.text:00006CB7 _text           ends
.text:00006CB7
.text:00006CB8 ; ===========================================================================
.text:00006CB8
.text:00006CB8 ; Segment type: Pure code
.text:00006CB8 ; Segment permissions: Read/Execute
.text:00006CB8 _text           segment para public 'CODE' use32
.text:00006CB8                 assume cs:_text
.text:00006CB8                 ;org 6CB8h
.text:00006CB8 ; COMDAT (pick any)
.text:00006CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006CB8
.text:00006CB8 ; =============== S U B R O U T I N E =======================================
.text:00006CB8
.text:00006CB8 ; Attributes: bp-based frame
.text:00006CB8
.text:00006CB8 ; public: __thiscall CObjectVector<class CArc>::~CObjectVector<class CArc>(void)
.text:00006CB8                 public ??1?$CObjectVector@VCArc@@@@QAE@XZ
.text:00006CB8 ??1?$CObjectVector@VCArc@@@@QAE@XZ proc near
.text:00006CB8                                         ; CODE XREF: __unwindfunclet$??0CArchiveLink@@QAE@XZ$0+3j
.text:00006CB8                                         ; CArchiveLink::~CArchiveLink(void)+73p ...
.text:00006CB8
.text:00006CB8 var_20          = dword ptr -20h
.text:00006CB8 var_1C          = dword ptr -1Ch
.text:00006CB8 var_18          = dword ptr -18h
.text:00006CB8 var_14          = dword ptr -14h
.text:00006CB8 var_10          = dword ptr -10h
.text:00006CB8 var_C           = dword ptr -0Ch
.text:00006CB8 var_4           = dword ptr -4
.text:00006CB8
.text:00006CB8                 push    ebp
.text:00006CB9                 mov     ebp, esp
.text:00006CBB                 push    0FFFFFFFFh
.text:00006CBD                 push    offset __ehhandler$??1?$CObjectVector@VCArc@@@@QAE@XZ
.text:00006CC2                 mov     eax, large fs:0
.text:00006CC8                 push    eax
.text:00006CC9                 sub     esp, 14h
.text:00006CCC                 mov     eax, 0CCCCCCCCh
.text:00006CD1                 mov     [ebp+var_20], eax
.text:00006CD4                 mov     [ebp+var_1C], eax
.text:00006CD7                 mov     [ebp+var_18], eax
.text:00006CDA                 mov     [ebp+var_14], eax
.text:00006CDD                 mov     [ebp+var_10], eax
.text:00006CE0                 mov     eax, dword ptr ds:___security_cookie
.text:00006CE5                 xor     eax, ebp
.text:00006CE7                 push    eax
.text:00006CE8                 lea     eax, [ebp+var_C]
.text:00006CEB                 mov     large fs:0, eax
.text:00006CF1                 mov     [ebp+var_10], ecx
.text:00006CF4                 mov     [ebp+var_4], 0
.text:00006CFB                 mov     ecx, [ebp+var_10]
.text:00006CFE                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006D03                 mov     [ebp+var_14], eax
.text:00006D06
.text:00006D06 loc_6D06:                               ; CODE XREF: CObjectVector<CArc>::~CObjectVector<CArc>(void):loc_6D48j
.text:00006D06                 cmp     [ebp+var_14], 0
.text:00006D0A                 jz      short loc_6D4A
.text:00006D0C                 mov     eax, [ebp+var_14]
.text:00006D0F                 sub     eax, 1
.text:00006D12                 mov     [ebp+var_14], eax
.text:00006D15                 mov     ecx, [ebp+var_14]
.text:00006D18                 push    ecx
.text:00006D19                 mov     ecx, [ebp+var_10]
.text:00006D1C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006D21                 mov     edx, [eax]
.text:00006D23                 mov     [ebp+var_1C], edx
.text:00006D26                 mov     eax, [ebp+var_1C]
.text:00006D29                 mov     [ebp+var_18], eax
.text:00006D2C                 cmp     [ebp+var_18], 0
.text:00006D30                 jz      short loc_6D41
.text:00006D32                 push    1
.text:00006D34                 mov     ecx, [ebp+var_18]
.text:00006D37                 call    ??_GCArc@@QAEPAXI@Z ; CArc::`scalar deleting destructor'(uint)
.text:00006D3C                 mov     [ebp+var_20], eax
.text:00006D3F                 jmp     short loc_6D48
.text:00006D41 ; ---------------------------------------------------------------------------
.text:00006D41
.text:00006D41 loc_6D41:                               ; CODE XREF: CObjectVector<CArc>::~CObjectVector<CArc>(void)+78j
.text:00006D41                 mov     [ebp+var_20], 0
.text:00006D48
.text:00006D48 loc_6D48:                               ; CODE XREF: CObjectVector<CArc>::~CObjectVector<CArc>(void)+87j
.text:00006D48                 jmp     short loc_6D06
.text:00006D4A ; ---------------------------------------------------------------------------
.text:00006D4A
.text:00006D4A loc_6D4A:                               ; CODE XREF: CObjectVector<CArc>::~CObjectVector<CArc>(void)+52j
.text:00006D4A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006D51                 mov     ecx, [ebp+var_10]
.text:00006D54                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006D59                 mov     ecx, [ebp+var_C]
.text:00006D5C                 mov     large fs:0, ecx
.text:00006D63                 pop     ecx
.text:00006D64                 add     esp, 20h
.text:00006D67                 cmp     ebp, esp
.text:00006D69                 call    __RTC_CheckEsp
.text:00006D6E                 mov     esp, ebp
.text:00006D70                 pop     ebp
.text:00006D71                 retn
.text:00006D71 ??1?$CObjectVector@VCArc@@@@QAE@XZ endp
.text:00006D71
.text:00006D71 ; ---------------------------------------------------------------------------
.text:00006D72                 align 4
.text:00006D72 _text           ends
.text:00006D72
.text$x:00006D74 ; ===========================================================================
.text$x:00006D74
.text$x:00006D74 ; Segment type: Pure code
.text$x:00006D74 ; Segment permissions: Read/Execute
.text$x:00006D74 _text$x         segment para public 'CODE' use32
.text$x:00006D74                 assume cs:_text$x
.text$x:00006D74                 ;org 6D74h
.text$x:00006D74 ; COMDAT (pick associative to section at 6CB8)
.text$x:00006D74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006D74
.text$x:00006D74 ; =============== S U B R O U T I N E =======================================
.text$x:00006D74
.text$x:00006D74
.text$x:00006D74 __unwindfunclet$??1?$CObjectVector@VCArc@@@@QAE@XZ$0 proc near
.text$x:00006D74                                         ; DATA XREF: .xdata$x:00006D9Co
.text$x:00006D74                 mov     ecx, [ebp-10h]
.text$x:00006D77                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00006D77 __unwindfunclet$??1?$CObjectVector@VCArc@@@@QAE@XZ$0 endp
.text$x:00006D77
.text$x:00006D7C
.text$x:00006D7C ; =============== S U B R O U T I N E =======================================
.text$x:00006D7C
.text$x:00006D7C
.text$x:00006D7C __ehhandler$??1?$CObjectVector@VCArc@@@@QAE@XZ proc near
.text$x:00006D7C                                         ; DATA XREF: CObjectVector<CArc>::~CObjectVector<CArc>(void)+5o
.text$x:00006D7C
.text$x:00006D7C arg_4           = dword ptr  8
.text$x:00006D7C
.text$x:00006D7C                 mov     edx, [esp+arg_4]
.text$x:00006D80                 lea     eax, [edx+0Ch]
.text$x:00006D83                 mov     ecx, [edx-18h]
.text$x:00006D86                 xor     ecx, eax
.text$x:00006D88                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006D8D                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCArc@@@@QAE@XZ
.text$x:00006D92                 jmp     ___CxxFrameHandler3
.text$x:00006D92 __ehhandler$??1?$CObjectVector@VCArc@@@@QAE@XZ endp
.text$x:00006D92
.text$x:00006D92 ; ---------------------------------------------------------------------------
.text$x:00006D97                 align 4
.text$x:00006D97 _text$x         ends
.text$x:00006D97
.xdata$x:00006D98 ; ===========================================================================
.xdata$x:00006D98
.xdata$x:00006D98 ; Segment type: Pure data
.xdata$x:00006D98 ; Segment permissions: Read
.xdata$x:00006D98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006D98                 assume cs:_xdata$x
.xdata$x:00006D98                 ;org 6D98h
.xdata$x:00006D98 ; COMDAT (pick associative to section at 6CB8)
.xdata$x:00006D98 __unwindtable$??1?$CObjectVector@VCArc@@@@QAE@XZ db 0FFh
.xdata$x:00006D98                                         ; DATA XREF: .xdata$x:00006DA8o
.xdata$x:00006D99                 db 0FFh
.xdata$x:00006D9A                 db 0FFh
.xdata$x:00006D9B                 db 0FFh
.xdata$x:00006D9C                 dd offset __unwindfunclet$??1?$CObjectVector@VCArc@@@@QAE@XZ$0
.xdata$x:00006DA0 __ehfuncinfo$??1?$CObjectVector@VCArc@@@@QAE@XZ db  22h ; "
.xdata$x:00006DA0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCArc@@@@QAE@XZ+11o
.xdata$x:00006DA1                 db    5
.xdata$x:00006DA2                 db  93h ; ô
.xdata$x:00006DA3                 db  19h
.xdata$x:00006DA4                 db    1
.xdata$x:00006DA5                 db    0
.xdata$x:00006DA6                 db    0
.xdata$x:00006DA7                 db    0
.xdata$x:00006DA8                 dd offset __unwindtable$??1?$CObjectVector@VCArc@@@@QAE@XZ
.xdata$x:00006DAC                 align 20h
.xdata$x:00006DC0                 db    1
.xdata$x:00006DC1                 db    0
.xdata$x:00006DC2                 db    0
.xdata$x:00006DC3                 db    0
.xdata$x:00006DC3 _xdata$x        ends
.xdata$x:00006DC3
.text:00006DC4 ; ===========================================================================
.text:00006DC4
.text:00006DC4 ; Segment type: Pure code
.text:00006DC4 ; Segment permissions: Read/Execute
.text:00006DC4 _text           segment para public 'CODE' use32
.text:00006DC4                 assume cs:_text
.text:00006DC4                 ;org 6DC4h
.text:00006DC4 ; COMDAT (pick any)
.text:00006DC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DC4
.text:00006DC4 ; =============== S U B R O U T I N E =======================================
.text:00006DC4
.text:00006DC4 ; Attributes: bp-based frame
.text:00006DC4
.text:00006DC4 ; public: unsigned int __thiscall CObjectVector<struct CFieldInfo>::Size(void)const
.text:00006DC4                 public ?Size@?$CObjectVector@UCFieldInfo@@@@QBEIXZ
.text:00006DC4 ?Size@?$CObjectVector@UCFieldInfo@@@@QBEIXZ proc near
.text:00006DC4                                         ; CODE XREF: CFieldPrinter::PrintTitle(void)+2Fp
.text:00006DC4                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+78p ...
.text:00006DC4
.text:00006DC4 var_4           = dword ptr -4
.text:00006DC4
.text:00006DC4                 push    ebp
.text:00006DC5                 mov     ebp, esp
.text:00006DC7                 push    ecx
.text:00006DC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DCF                 mov     [ebp+var_4], ecx
.text:00006DD2                 mov     ecx, [ebp+var_4]
.text:00006DD5                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006DDA                 add     esp, 4
.text:00006DDD                 cmp     ebp, esp
.text:00006DDF                 call    __RTC_CheckEsp
.text:00006DE4                 mov     esp, ebp
.text:00006DE6                 pop     ebp
.text:00006DE7                 retn
.text:00006DE7 ?Size@?$CObjectVector@UCFieldInfo@@@@QBEIXZ endp
.text:00006DE7
.text:00006DE7 _text           ends
.text:00006DE7
.text:00006DE8 ; ===========================================================================
.text:00006DE8
.text:00006DE8 ; Segment type: Pure code
.text:00006DE8 ; Segment permissions: Read/Execute
.text:00006DE8 _text           segment para public 'CODE' use32
.text:00006DE8                 assume cs:_text
.text:00006DE8                 ;org 6DE8h
.text:00006DE8 ; COMDAT (pick any)
.text:00006DE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DE8
.text:00006DE8 ; =============== S U B R O U T I N E =======================================
.text:00006DE8
.text:00006DE8 ; Attributes: bp-based frame
.text:00006DE8
.text:00006DE8 ; public: __thiscall CObjectVector<struct CFieldInfo>::CObjectVector<struct CFieldInfo>(void)
.text:00006DE8                 public ??0?$CObjectVector@UCFieldInfo@@@@QAE@XZ
.text:00006DE8 ??0?$CObjectVector@UCFieldInfo@@@@QAE@XZ proc near
.text:00006DE8                                         ; CODE XREF: CFieldPrinter::CFieldPrinter(void)+30p
.text:00006DE8
.text:00006DE8 var_4           = dword ptr -4
.text:00006DE8
.text:00006DE8                 push    ebp
.text:00006DE9                 mov     ebp, esp
.text:00006DEB                 push    ecx
.text:00006DEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DF3                 mov     [ebp+var_4], ecx
.text:00006DF6                 mov     ecx, [ebp+var_4]
.text:00006DF9                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006DFE                 mov     eax, [ebp+var_4]
.text:00006E01                 add     esp, 4
.text:00006E04                 cmp     ebp, esp
.text:00006E06                 call    __RTC_CheckEsp
.text:00006E0B                 mov     esp, ebp
.text:00006E0D                 pop     ebp
.text:00006E0E                 retn
.text:00006E0E ??0?$CObjectVector@UCFieldInfo@@@@QAE@XZ endp
.text:00006E0E
.text:00006E0E ; ---------------------------------------------------------------------------
.text:00006E0F                 align 10h
.text:00006E0F _text           ends
.text:00006E0F
.text:00006E10 ; ===========================================================================
.text:00006E10
.text:00006E10 ; Segment type: Pure code
.text:00006E10 ; Segment permissions: Read/Execute
.text:00006E10 _text           segment para public 'CODE' use32
.text:00006E10                 assume cs:_text
.text:00006E10                 ;org 6E10h
.text:00006E10 ; COMDAT (pick any)
.text:00006E10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E10
.text:00006E10 ; =============== S U B R O U T I N E =======================================
.text:00006E10
.text:00006E10 ; Attributes: bp-based frame
.text:00006E10
.text:00006E10 ; public: struct CFieldInfo & __thiscall CObjectVector<struct CFieldInfo>::operator[](unsigned int)
.text:00006E10                 public ??A?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@I@Z
.text:00006E10 ??A?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@I@Z proc near
.text:00006E10                                         ; CODE XREF: CFieldPrinter::PrintTitle(void)+40p
.text:00006E10                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+93p ...
.text:00006E10
.text:00006E10 var_4           = dword ptr -4
.text:00006E10 arg_0           = dword ptr  8
.text:00006E10
.text:00006E10                 push    ebp
.text:00006E11                 mov     ebp, esp
.text:00006E13                 push    ecx
.text:00006E14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E1B                 mov     [ebp+var_4], ecx
.text:00006E1E                 mov     eax, [ebp+arg_0]
.text:00006E21                 push    eax
.text:00006E22                 mov     ecx, [ebp+var_4]
.text:00006E25                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006E2A                 mov     eax, [eax]
.text:00006E2C                 add     esp, 4
.text:00006E2F                 cmp     ebp, esp
.text:00006E31                 call    __RTC_CheckEsp
.text:00006E36                 mov     esp, ebp
.text:00006E38                 pop     ebp
.text:00006E39                 retn    4
.text:00006E39 ??A?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@I@Z endp
.text:00006E39
.text:00006E39 _text           ends
.text:00006E39
.text:00006E3C ; ===========================================================================
.text:00006E3C
.text:00006E3C ; Segment type: Pure code
.text:00006E3C ; Segment permissions: Read/Execute
.text:00006E3C _text           segment para public 'CODE' use32
.text:00006E3C                 assume cs:_text
.text:00006E3C                 ;org 6E3Ch
.text:00006E3C ; COMDAT (pick any)
.text:00006E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E3C
.text:00006E3C ; =============== S U B R O U T I N E =======================================
.text:00006E3C
.text:00006E3C ; Attributes: bp-based frame
.text:00006E3C
.text:00006E3C ; public: unsigned int __thiscall CObjectVector<struct CFieldInfo>::Add(struct CFieldInfo const &)
.text:00006E3C                 public ?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z
.text:00006E3C ?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z proc near
.text:00006E3C                                         ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+124p
.text:00006E3C
.text:00006E3C var_1C          = dword ptr -1Ch
.text:00006E3C var_18          = dword ptr -18h
.text:00006E3C var_14          = dword ptr -14h
.text:00006E3C var_10          = dword ptr -10h
.text:00006E3C var_C           = dword ptr -0Ch
.text:00006E3C var_4           = dword ptr -4
.text:00006E3C arg_0           = dword ptr  8
.text:00006E3C
.text:00006E3C                 push    ebp
.text:00006E3D                 mov     ebp, esp
.text:00006E3F                 push    0FFFFFFFFh
.text:00006E41                 push    offset __ehhandler$?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z
.text:00006E46                 mov     eax, large fs:0
.text:00006E4C                 push    eax
.text:00006E4D                 sub     esp, 10h
.text:00006E50                 mov     eax, 0CCCCCCCCh
.text:00006E55                 mov     [ebp+var_1C], eax
.text:00006E58                 mov     [ebp+var_18], eax
.text:00006E5B                 mov     [ebp+var_14], eax
.text:00006E5E                 mov     [ebp+var_10], eax
.text:00006E61                 mov     eax, dword ptr ds:___security_cookie
.text:00006E66                 xor     eax, ebp
.text:00006E68                 push    eax
.text:00006E69                 lea     eax, [ebp+var_C]
.text:00006E6C
.text:00006E6C loc_6E6C:                               ; DATA XREF: .rdata:off_23o
.text:00006E6C                 mov     large fs:0, eax
.text:00006E72                 mov     [ebp+var_10], ecx
.text:00006E75                 push    30h ; '0'       ; unsigned int
.text:00006E77                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006E7C                 add     esp, 4
.text:00006E7F                 mov     [ebp+var_18], eax
.text:00006E82                 mov     [ebp+var_4], 0
.text:00006E89                 cmp     [ebp+var_18], 0
.text:00006E8D                 jz      short loc_6EA0
.text:00006E8F                 mov     eax, [ebp+arg_0]
.text:00006E92                 push    eax
.text:00006E93                 mov     ecx, [ebp+var_18]
.text:00006E96                 call    ??0CFieldInfo@@QAE@ABU0@@Z ; CFieldInfo::CFieldInfo(CFieldInfo const &)
.text:00006E9B                 mov     [ebp+var_1C], eax
.text:00006E9E                 jmp     short loc_6EA7
.text:00006EA0 ; ---------------------------------------------------------------------------
.text:00006EA0
.text:00006EA0 loc_6EA0:                               ; CODE XREF: CObjectVector<CFieldInfo>::Add(CFieldInfo const &)+51j
.text:00006EA0                 mov     [ebp+var_1C], 0
.text:00006EA7
.text:00006EA7 loc_6EA7:                               ; CODE XREF: CObjectVector<CFieldInfo>::Add(CFieldInfo const &)+62j
.text:00006EA7                 mov     ecx, [ebp+var_1C]
.text:00006EAA                 mov     [ebp+var_14], ecx
.text:00006EAD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006EB4                 mov     edx, [ebp+var_14]
.text:00006EB7                 push    edx
.text:00006EB8                 mov     ecx, [ebp+var_10]
.text:00006EBB                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00006EC0                 mov     ecx, [ebp+var_C]
.text:00006EC3                 mov     large fs:0, ecx
.text:00006ECA                 pop     ecx
.text:00006ECB                 add     esp, 1Ch
.text:00006ECE                 cmp     ebp, esp
.text:00006ED0                 call    __RTC_CheckEsp
.text:00006ED5                 mov     esp, ebp
.text:00006ED7                 pop     ebp
.text:00006ED8                 retn    4
.text:00006ED8 ?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z endp
.text:00006ED8
.text:00006ED8 ; ---------------------------------------------------------------------------
.text:00006EDB                 align 4
.text:00006EDB _text           ends
.text:00006EDB
.text$x:00006EDC ; ===========================================================================
.text$x:00006EDC
.text$x:00006EDC ; Segment type: Pure code
.text$x:00006EDC ; Segment permissions: Read/Execute
.text$x:00006EDC _text$x         segment para public 'CODE' use32
.text$x:00006EDC                 assume cs:_text$x
.text$x:00006EDC                 ;org 6EDCh
.text$x:00006EDC ; COMDAT (pick associative to section at 6E3C)
.text$x:00006EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006EDC
.text$x:00006EDC ; =============== S U B R O U T I N E =======================================
.text$x:00006EDC
.text$x:00006EDC
.text$x:00006EDC __unwindfunclet$?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z$0 proc near
.text$x:00006EDC                                         ; DATA XREF: .xdata$x:00006F08o
.text$x:00006EDC                 mov     eax, [ebp-18h]
.text$x:00006EDF                 push    eax             ; void *
.text$x:00006EE0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006EE5                 pop     ecx
.text$x:00006EE6                 retn
.text$x:00006EE6 __unwindfunclet$?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z$0 endp
.text$x:00006EE6
.text$x:00006EE7
.text$x:00006EE7 ; =============== S U B R O U T I N E =======================================
.text$x:00006EE7
.text$x:00006EE7
.text$x:00006EE7 __ehhandler$?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z proc near
.text$x:00006EE7                                         ; DATA XREF: CObjectVector<CFieldInfo>::Add(CFieldInfo const &)+5o
.text$x:00006EE7
.text$x:00006EE7 arg_4           = dword ptr  8
.text$x:00006EE7
.text$x:00006EE7                 mov     edx, [esp+arg_4]
.text$x:00006EEB                 lea     eax, [edx+0Ch]
.text$x:00006EEE                 mov     ecx, [edx-14h]
.text$x:00006EF1                 xor     ecx, eax
.text$x:00006EF3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006EF8                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z
.text$x:00006EFD                 jmp     ___CxxFrameHandler3
.text$x:00006EFD __ehhandler$?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z endp
.text$x:00006EFD
.text$x:00006EFD ; ---------------------------------------------------------------------------
.text$x:00006F02                 align 4
.text$x:00006F02 _text$x         ends
.text$x:00006F02
.xdata$x:00006F04 ; ===========================================================================
.xdata$x:00006F04
.xdata$x:00006F04 ; Segment type: Pure data
.xdata$x:00006F04 ; Segment permissions: Read
.xdata$x:00006F04 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006F04                 assume cs:_xdata$x
.xdata$x:00006F04                 ;org 6F04h
.xdata$x:00006F04 ; COMDAT (pick associative to section at 6E3C)
.xdata$x:00006F04 __unwindtable$?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z db 0FFh
.xdata$x:00006F04                                         ; DATA XREF: .xdata$x:00006F14o
.xdata$x:00006F05                 db 0FFh
.xdata$x:00006F06                 db 0FFh
.xdata$x:00006F07                 db 0FFh
.xdata$x:00006F08                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z$0
.xdata$x:00006F0C __ehfuncinfo$?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z db  22h ; "
.xdata$x:00006F0C                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z+11o
.xdata$x:00006F0D                 db    5
.xdata$x:00006F0E                 db  93h ; ô
.xdata$x:00006F0F                 db  19h
.xdata$x:00006F10                 db    1
.xdata$x:00006F11                 db    0
.xdata$x:00006F12                 db    0
.xdata$x:00006F13                 db    0
.xdata$x:00006F14                 dd offset __unwindtable$?Add@?$CObjectVector@UCFieldInfo@@@@QAEIABUCFieldInfo@@@Z
.xdata$x:00006F18                 db    0
.xdata$x:00006F19                 db    0
.xdata$x:00006F1A                 db    0
.xdata$x:00006F1B                 db    0
.xdata$x:00006F1C                 db    0
.xdata$x:00006F1D                 db    0
.xdata$x:00006F1E                 db    0
.xdata$x:00006F1F                 db    0
.xdata$x:00006F20                 db    0
.xdata$x:00006F21                 db    0
.xdata$x:00006F22                 db    0
.xdata$x:00006F23                 db    0
.xdata$x:00006F24                 db    0
.xdata$x:00006F25                 db    0
.xdata$x:00006F26                 db    0
.xdata$x:00006F27                 db    0
.xdata$x:00006F28                 db    0
.xdata$x:00006F29                 db    0
.xdata$x:00006F2A                 db    0
.xdata$x:00006F2B                 db    0
.xdata$x:00006F2C                 db    1
.xdata$x:00006F2D                 db    0
.xdata$x:00006F2E                 db    0
.xdata$x:00006F2F                 db    0
.xdata$x:00006F2F _xdata$x        ends
.xdata$x:00006F2F
.text:00006F30 ; ===========================================================================
.text:00006F30
.text:00006F30 ; Segment type: Pure code
.text:00006F30 ; Segment permissions: Read/Execute
.text:00006F30 _text           segment para public 'CODE' use32
.text:00006F30                 assume cs:_text
.text:00006F30                 ;org 6F30h
.text:00006F30 ; COMDAT (pick any)
.text:00006F30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006F30
.text:00006F30 ; =============== S U B R O U T I N E =======================================
.text:00006F30
.text:00006F30 ; Attributes: bp-based frame
.text:00006F30
.text:00006F30 ; public: struct CFieldInfo & __thiscall CObjectVector<struct CFieldInfo>::AddNew(void)
.text:00006F30                 public ?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ
.text:00006F30 ?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ proc near
.text:00006F30                                         ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+46p
.text:00006F30
.text:00006F30 var_20          = dword ptr -20h
.text:00006F30 var_1C          = dword ptr -1Ch
.text:00006F30 var_18          = dword ptr -18h
.text:00006F30 var_14          = dword ptr -14h
.text:00006F30 var_10          = dword ptr -10h
.text:00006F30 var_C           = dword ptr -0Ch
.text:00006F30 var_4           = dword ptr -4
.text:00006F30
.text:00006F30                 push    ebp
.text:00006F31                 mov     ebp, esp
.text:00006F33                 push    0FFFFFFFFh
.text:00006F35                 push    offset __ehhandler$?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ
.text:00006F3A                 mov     eax, large fs:0
.text:00006F40                 push    eax
.text:00006F41                 sub     esp, 14h
.text:00006F44                 mov     eax, 0CCCCCCCCh
.text:00006F49                 mov     [ebp+var_20], eax
.text:00006F4C                 mov     [ebp+var_1C], eax
.text:00006F4F                 mov     [ebp+var_18], eax
.text:00006F52                 mov     [ebp+var_14], eax
.text:00006F55                 mov     [ebp+var_10], eax
.text:00006F58                 mov     eax, dword ptr ds:___security_cookie
.text:00006F5D                 xor     eax, ebp
.text:00006F5F                 push    eax
.text:00006F60                 lea     eax, [ebp+var_C]
.text:00006F63                 mov     large fs:0, eax
.text:00006F69                 mov     [ebp+var_10], ecx
.text:00006F6C                 push    30h ; '0'       ; unsigned int
.text:00006F6E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006F73                 add     esp, 4
.text:00006F76                 mov     [ebp+var_1C], eax
.text:00006F79                 mov     [ebp+var_4], 0
.text:00006F80                 cmp     [ebp+var_1C], 0
.text:00006F84                 jz      short loc_6F93
.text:00006F86                 mov     ecx, [ebp+var_1C] ; this
.text:00006F89                 call    ??0CFieldInfo@@QAE@XZ ; CFieldInfo::CFieldInfo(void)
.text:00006F8E                 mov     [ebp+var_20], eax
.text:00006F91                 jmp     short loc_6F9A
.text:00006F93 ; ---------------------------------------------------------------------------
.text:00006F93
.text:00006F93 loc_6F93:                               ; CODE XREF: CObjectVector<CFieldInfo>::AddNew(void)+54j
.text:00006F93                 mov     [ebp+var_20], 0
.text:00006F9A
.text:00006F9A loc_6F9A:                               ; CODE XREF: CObjectVector<CFieldInfo>::AddNew(void)+61j
.text:00006F9A                 mov     eax, [ebp+var_20]
.text:00006F9D                 mov     [ebp+var_18], eax
.text:00006FA0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006FA7                 mov     ecx, [ebp+var_18]
.text:00006FAA                 mov     [ebp+var_14], ecx
.text:00006FAD                 mov     edx, [ebp+var_14]
.text:00006FB0                 push    edx
.text:00006FB1                 mov     ecx, [ebp+var_10]
.text:00006FB4                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00006FB9                 mov     eax, [ebp+var_14]
.text:00006FBC                 mov     ecx, [ebp+var_C]
.text:00006FBF                 mov     large fs:0, ecx
.text:00006FC6                 pop     ecx
.text:00006FC7                 add     esp, 20h
.text:00006FCA                 cmp     ebp, esp
.text:00006FCC                 call    __RTC_CheckEsp
.text:00006FD1                 mov     esp, ebp
.text:00006FD3                 pop     ebp
.text:00006FD4                 retn
.text:00006FD4 ?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ endp
.text:00006FD4
.text:00006FD4 ; ---------------------------------------------------------------------------
.text:00006FD5                 align 4
.text:00006FD5 _text           ends
.text:00006FD5
.text$x:00006FD8 ; ===========================================================================
.text$x:00006FD8
.text$x:00006FD8 ; Segment type: Pure code
.text$x:00006FD8 ; Segment permissions: Read/Execute
.text$x:00006FD8 _text$x         segment para public 'CODE' use32
.text$x:00006FD8                 assume cs:_text$x
.text$x:00006FD8                 ;org 6FD8h
.text$x:00006FD8 ; COMDAT (pick associative to section at 6F30)
.text$x:00006FD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006FD8
.text$x:00006FD8 ; =============== S U B R O U T I N E =======================================
.text$x:00006FD8
.text$x:00006FD8
.text$x:00006FD8 __unwindfunclet$?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ$0 proc near
.text$x:00006FD8                                         ; DATA XREF: .xdata$x:00007004o
.text$x:00006FD8                 mov     eax, [ebp-1Ch]
.text$x:00006FDB                 push    eax             ; void *
.text$x:00006FDC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006FE1                 pop     ecx
.text$x:00006FE2                 retn
.text$x:00006FE2 __unwindfunclet$?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ$0 endp
.text$x:00006FE2
.text$x:00006FE3
.text$x:00006FE3 ; =============== S U B R O U T I N E =======================================
.text$x:00006FE3
.text$x:00006FE3
.text$x:00006FE3 __ehhandler$?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ proc near
.text$x:00006FE3                                         ; DATA XREF: CObjectVector<CFieldInfo>::AddNew(void)+5o
.text$x:00006FE3
.text$x:00006FE3 arg_4           = dword ptr  8
.text$x:00006FE3
.text$x:00006FE3                 mov     edx, [esp+arg_4]
.text$x:00006FE7                 lea     eax, [edx+0Ch]
.text$x:00006FEA                 mov     ecx, [edx-18h]
.text$x:00006FED                 xor     ecx, eax
.text$x:00006FEF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006FF4                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ
.text$x:00006FF9                 jmp     ___CxxFrameHandler3
.text$x:00006FF9 __ehhandler$?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ endp
.text$x:00006FF9
.text$x:00006FF9 ; ---------------------------------------------------------------------------
.text$x:00006FFE                 align 10h
.text$x:00006FFE _text$x         ends
.text$x:00006FFE
.xdata$x:00007000 ; ===========================================================================
.xdata$x:00007000
.xdata$x:00007000 ; Segment type: Pure data
.xdata$x:00007000 ; Segment permissions: Read
.xdata$x:00007000 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007000                 assume cs:_xdata$x
.xdata$x:00007000                 ;org 7000h
.xdata$x:00007000 ; COMDAT (pick associative to section at 6F30)
.xdata$x:00007000 __unwindtable$?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ db 0FFh
.xdata$x:00007000                                         ; DATA XREF: .xdata$x:00007010o
.xdata$x:00007001                 db 0FFh
.xdata$x:00007002                 db 0FFh
.xdata$x:00007003                 db 0FFh
.xdata$x:00007004                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ$0
.xdata$x:00007008 __ehfuncinfo$?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ db  22h ; "
.xdata$x:00007008                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ+11o
.xdata$x:00007009                 db    5
.xdata$x:0000700A                 db  93h ; ô
.xdata$x:0000700B                 db  19h
.xdata$x:0000700C                 db    1
.xdata$x:0000700D                 db    0
.xdata$x:0000700E                 db    0
.xdata$x:0000700F                 db    0
.xdata$x:00007010                 dd offset __unwindtable$?AddNew@?$CObjectVector@UCFieldInfo@@@@QAEAAUCFieldInfo@@XZ
.xdata$x:00007014                 db    0
.xdata$x:00007015                 db    0
.xdata$x:00007016                 db    0
.xdata$x:00007017                 db    0
.xdata$x:00007018                 db    0
.xdata$x:00007019                 db    0
.xdata$x:0000701A                 db    0
.xdata$x:0000701B                 db    0
.xdata$x:0000701C                 db    0
.xdata$x:0000701D                 db    0
.xdata$x:0000701E                 db    0
.xdata$x:0000701F                 db    0
.xdata$x:00007020                 db    0
.xdata$x:00007021                 db    0
.xdata$x:00007022                 db    0
.xdata$x:00007023                 db    0
.xdata$x:00007024                 db    0
.xdata$x:00007025                 db    0
.xdata$x:00007026                 db    0
.xdata$x:00007027                 db    0
.xdata$x:00007028                 db    1
.xdata$x:00007029                 db    0
.xdata$x:0000702A                 db    0
.xdata$x:0000702B                 db    0
.xdata$x:0000702B _xdata$x        ends
.xdata$x:0000702B
.text:0000702C ; ===========================================================================
.text:0000702C
.text:0000702C ; Segment type: Pure code
.text:0000702C ; Segment permissions: Read/Execute
.text:0000702C _text           segment para public 'CODE' use32
.text:0000702C                 assume cs:_text
.text:0000702C                 ;org 702Ch
.text:0000702C ; COMDAT (pick any)
.text:0000702C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000702C
.text:0000702C ; =============== S U B R O U T I N E =======================================
.text:0000702C
.text:0000702C ; Attributes: bp-based frame
.text:0000702C
.text:0000702C ; public: __thiscall CObjectVector<struct CFieldInfo>::~CObjectVector<struct CFieldInfo>(void)
.text:0000702C                 public ??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ
.text:0000702C ??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ proc near
.text:0000702C                                         ; CODE XREF: __unwindfunclet$??0CFieldPrinter@@QAE@XZ$0+3j
.text:0000702C                                         ; CFieldPrinter::~CFieldPrinter(void)+76p ...
.text:0000702C
.text:0000702C var_20          = dword ptr -20h
.text:0000702C var_1C          = dword ptr -1Ch
.text:0000702C var_18          = dword ptr -18h
.text:0000702C var_14          = dword ptr -14h
.text:0000702C var_10          = dword ptr -10h
.text:0000702C var_C           = dword ptr -0Ch
.text:0000702C var_4           = dword ptr -4
.text:0000702C
.text:0000702C                 push    ebp
.text:0000702D                 mov     ebp, esp
.text:0000702F                 push    0FFFFFFFFh
.text:00007031                 push    offset __ehhandler$??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ
.text:00007036                 mov     eax, large fs:0
.text:0000703C                 push    eax
.text:0000703D                 sub     esp, 14h
.text:00007040                 mov     eax, 0CCCCCCCCh
.text:00007045                 mov     [ebp+var_20], eax
.text:00007048                 mov     [ebp+var_1C], eax
.text:0000704B                 mov     [ebp+var_18], eax
.text:0000704E                 mov     [ebp+var_14], eax
.text:00007051                 mov     [ebp+var_10], eax
.text:00007054                 mov     eax, dword ptr ds:___security_cookie
.text:00007059                 xor     eax, ebp
.text:0000705B                 push    eax
.text:0000705C                 lea     eax, [ebp+var_C]
.text:0000705F                 mov     large fs:0, eax
.text:00007065                 mov     [ebp+var_10], ecx
.text:00007068                 mov     [ebp+var_4], 0
.text:0000706F                 mov     ecx, [ebp+var_10]
.text:00007072                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00007077                 mov     [ebp+var_14], eax
.text:0000707A
.text:0000707A loc_707A:                               ; CODE XREF: CObjectVector<CFieldInfo>::~CObjectVector<CFieldInfo>(void):loc_70BCj
.text:0000707A                 cmp     [ebp+var_14], 0
.text:0000707E                 jz      short loc_70BE
.text:00007080                 mov     eax, [ebp+var_14]
.text:00007083                 sub     eax, 1
.text:00007086                 mov     [ebp+var_14], eax
.text:00007089                 mov     ecx, [ebp+var_14]
.text:0000708C                 push    ecx
.text:0000708D                 mov     ecx, [ebp+var_10]
.text:00007090                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007095                 mov     edx, [eax]
.text:00007097                 mov     [ebp+var_1C], edx
.text:0000709A                 mov     eax, [ebp+var_1C]
.text:0000709D                 mov     [ebp+var_18], eax
.text:000070A0                 cmp     [ebp+var_18], 0
.text:000070A4                 jz      short loc_70B5
.text:000070A6                 push    1
.text:000070A8                 mov     ecx, [ebp+var_18]
.text:000070AB                 call    ??_GCFieldInfo@@QAEPAXI@Z ; CFieldInfo::`scalar deleting destructor'(uint)
.text:000070B0                 mov     [ebp+var_20], eax
.text:000070B3                 jmp     short loc_70BC
.text:000070B5 ; ---------------------------------------------------------------------------
.text:000070B5
.text:000070B5 loc_70B5:                               ; CODE XREF: CObjectVector<CFieldInfo>::~CObjectVector<CFieldInfo>(void)+78j
.text:000070B5                 mov     [ebp+var_20], 0
.text:000070BC
.text:000070BC loc_70BC:                               ; CODE XREF: CObjectVector<CFieldInfo>::~CObjectVector<CFieldInfo>(void)+87j
.text:000070BC                 jmp     short loc_707A
.text:000070BE ; ---------------------------------------------------------------------------
.text:000070BE
.text:000070BE loc_70BE:                               ; CODE XREF: CObjectVector<CFieldInfo>::~CObjectVector<CFieldInfo>(void)+52j
.text:000070BE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000070C5                 mov     ecx, [ebp+var_10]
.text:000070C8                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000070CD                 mov     ecx, [ebp+var_C]
.text:000070D0                 mov     large fs:0, ecx
.text:000070D7                 pop     ecx
.text:000070D8                 add     esp, 20h
.text:000070DB                 cmp     ebp, esp
.text:000070DD                 call    __RTC_CheckEsp
.text:000070E2                 mov     esp, ebp
.text:000070E4                 pop     ebp
.text:000070E5                 retn
.text:000070E5 ??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ endp
.text:000070E5
.text:000070E5 ; ---------------------------------------------------------------------------
.text:000070E6                 align 4
.text:000070E6 _text           ends
.text:000070E6
.text$x:000070E8 ; ===========================================================================
.text$x:000070E8
.text$x:000070E8 ; Segment type: Pure code
.text$x:000070E8 ; Segment permissions: Read/Execute
.text$x:000070E8 _text$x         segment para public 'CODE' use32
.text$x:000070E8                 assume cs:_text$x
.text$x:000070E8                 ;org 70E8h
.text$x:000070E8 ; COMDAT (pick associative to section at 702C)
.text$x:000070E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000070E8
.text$x:000070E8 ; =============== S U B R O U T I N E =======================================
.text$x:000070E8
.text$x:000070E8
.text$x:000070E8 __unwindfunclet$??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ$0 proc near
.text$x:000070E8                                         ; DATA XREF: .xdata$x:00007110o
.text$x:000070E8                 mov     ecx, [ebp-10h]
.text$x:000070EB                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000070EB __unwindfunclet$??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ$0 endp
.text$x:000070EB
.text$x:000070F0
.text$x:000070F0 ; =============== S U B R O U T I N E =======================================
.text$x:000070F0
.text$x:000070F0
.text$x:000070F0 __ehhandler$??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ proc near
.text$x:000070F0                                         ; DATA XREF: CObjectVector<CFieldInfo>::~CObjectVector<CFieldInfo>(void)+5o
.text$x:000070F0
.text$x:000070F0 arg_4           = dword ptr  8
.text$x:000070F0
.text$x:000070F0                 mov     edx, [esp+arg_4]
.text$x:000070F4                 lea     eax, [edx+0Ch]
.text$x:000070F7                 mov     ecx, [edx-18h]
.text$x:000070FA                 xor     ecx, eax
.text$x:000070FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007101                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ
.text$x:00007106                 jmp     ___CxxFrameHandler3
.text$x:00007106 __ehhandler$??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ endp
.text$x:00007106
.text$x:00007106 ; ---------------------------------------------------------------------------
.text$x:0000710B                 align 4
.text$x:0000710B _text$x         ends
.text$x:0000710B
.xdata$x:0000710C ; ===========================================================================
.xdata$x:0000710C
.xdata$x:0000710C ; Segment type: Pure data
.xdata$x:0000710C ; Segment permissions: Read
.xdata$x:0000710C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000710C                 assume cs:_xdata$x
.xdata$x:0000710C                 ;org 710Ch
.xdata$x:0000710C ; COMDAT (pick associative to section at 702C)
.xdata$x:0000710C __unwindtable$??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ db 0FFh
.xdata$x:0000710C                                         ; DATA XREF: .xdata$x:0000711Co
.xdata$x:0000710D                 db 0FFh
.xdata$x:0000710E                 db 0FFh
.xdata$x:0000710F                 db 0FFh
.xdata$x:00007110                 dd offset __unwindfunclet$??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ$0
.xdata$x:00007114 __ehfuncinfo$??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ db  22h ; "
.xdata$x:00007114                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ+11o
.xdata$x:00007115                 db    5
.xdata$x:00007116                 db  93h ; ô
.xdata$x:00007117                 db  19h
.xdata$x:00007118                 db    1
.xdata$x:00007119                 db    0
.xdata$x:0000711A                 db    0
.xdata$x:0000711B                 db    0
.xdata$x:0000711C                 dd offset __unwindtable$??1?$CObjectVector@UCFieldInfo@@@@QAE@XZ
.xdata$x:00007120                 db    0
.xdata$x:00007121                 db    0
.xdata$x:00007122                 db    0
.xdata$x:00007123                 db    0
.xdata$x:00007124                 db    0
.xdata$x:00007125                 db    0
.xdata$x:00007126                 db    0
.xdata$x:00007127                 db    0
.xdata$x:00007128                 db    0
.xdata$x:00007129                 db    0
.xdata$x:0000712A                 db    0
.xdata$x:0000712B                 db    0
.xdata$x:0000712C                 db    0
.xdata$x:0000712D                 db    0
.xdata$x:0000712E                 db    0
.xdata$x:0000712F                 db    0
.xdata$x:00007130                 db    0
.xdata$x:00007131                 db    0
.xdata$x:00007132                 db    0
.xdata$x:00007133                 db    0
.xdata$x:00007134                 db    1
.xdata$x:00007135                 db    0
.xdata$x:00007136                 db    0
.xdata$x:00007137                 db    0
.xdata$x:00007137 _xdata$x        ends
.xdata$x:00007137
.text:00007138 ; ===========================================================================
.text:00007138
.text:00007138 ; Segment type: Pure code
.text:00007138 ; Segment permissions: Read/Execute
.text:00007138 _text           segment para public 'CODE' use32
.text:00007138                 assume cs:_text
.text:00007138                 ;org 7138h
.text:00007138 ; COMDAT (pick any)
.text:00007138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007138
.text:00007138 ; =============== S U B R O U T I N E =======================================
.text:00007138
.text:00007138 ; Attributes: bp-based frame
.text:00007138
.text:00007138 ; public: void __thiscall CObjectVector<struct CFieldInfo>::Clear(void)
.text:00007138                 public ?Clear@?$CObjectVector@UCFieldInfo@@@@QAEXXZ
.text:00007138 ?Clear@?$CObjectVector@UCFieldInfo@@@@QAEXXZ proc near
.text:00007138                                         ; CODE XREF: CFieldPrinter::Clear(void)+11p
.text:00007138
.text:00007138 var_14          = dword ptr -14h
.text:00007138 var_10          = dword ptr -10h
.text:00007138 var_C           = dword ptr -0Ch
.text:00007138 var_8           = dword ptr -8
.text:00007138 var_4           = dword ptr -4
.text:00007138
.text:00007138                 push    ebp
.text:00007139                 mov     ebp, esp
.text:0000713B                 sub     esp, 14h
.text:0000713E                 mov     eax, 0CCCCCCCCh
.text:00007143                 mov     [ebp+var_14], eax
.text:00007146                 mov     [ebp+var_10], eax
.text:00007149                 mov     [ebp+var_C], eax
.text:0000714C                 mov     [ebp+var_8], eax
.text:0000714F                 mov     [ebp+var_4], eax
.text:00007152                 mov     [ebp+var_4], ecx
.text:00007155                 mov     ecx, [ebp+var_4]
.text:00007158                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000715D                 mov     [ebp+var_8], eax
.text:00007160
.text:00007160 loc_7160:                               ; CODE XREF: CObjectVector<CFieldInfo>::Clear(void):loc_71A2j
.text:00007160                 cmp     [ebp+var_8], 0
.text:00007164                 jz      short loc_71A4
.text:00007166                 mov     eax, [ebp+var_8]
.text:00007169                 sub     eax, 1
.text:0000716C                 mov     [ebp+var_8], eax
.text:0000716F                 mov     ecx, [ebp+var_8]
.text:00007172                 push    ecx
.text:00007173                 mov     ecx, [ebp+var_4]
.text:00007176                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000717B                 mov     edx, [eax]
.text:0000717D                 mov     [ebp+var_10], edx
.text:00007180                 mov     eax, [ebp+var_10]
.text:00007183                 mov     [ebp+var_C], eax
.text:00007186                 cmp     [ebp+var_C], 0
.text:0000718A                 jz      short loc_719B
.text:0000718C                 push    1
.text:0000718E                 mov     ecx, [ebp+var_C]
.text:00007191                 call    ??_GCFieldInfo@@QAEPAXI@Z ; CFieldInfo::`scalar deleting destructor'(uint)
.text:00007196                 mov     [ebp+var_14], eax
.text:00007199                 jmp     short loc_71A2
.text:0000719B ; ---------------------------------------------------------------------------
.text:0000719B
.text:0000719B loc_719B:                               ; CODE XREF: CObjectVector<CFieldInfo>::Clear(void)+52j
.text:0000719B                 mov     [ebp+var_14], 0
.text:000071A2
.text:000071A2 loc_71A2:                               ; CODE XREF: CObjectVector<CFieldInfo>::Clear(void)+61j
.text:000071A2                 jmp     short loc_7160
.text:000071A4 ; ---------------------------------------------------------------------------
.text:000071A4
.text:000071A4 loc_71A4:                               ; CODE XREF: CObjectVector<CFieldInfo>::Clear(void)+2Cj
.text:000071A4                 mov     ecx, [ebp+var_4]
.text:000071A7                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:000071AC                 add     esp, 14h
.text:000071AF                 cmp     ebp, esp
.text:000071B1                 call    __RTC_CheckEsp
.text:000071B6                 mov     esp, ebp
.text:000071B8                 pop     ebp
.text:000071B9                 retn
.text:000071B9 ?Clear@?$CObjectVector@UCFieldInfo@@@@QAEXXZ endp
.text:000071B9
.text:000071B9 ; ---------------------------------------------------------------------------
.text:000071BA                 align 4
.text:000071BA _text           ends
.text:000071BA
.text:000071BC ; ===========================================================================
.text:000071BC
.text:000071BC ; Segment type: Pure code
.text:000071BC ; Segment permissions: Read/Execute
.text:000071BC _text           segment para public 'CODE' use32
.text:000071BC                 assume cs:_text
.text:000071BC                 ;org 71BCh
.text:000071BC ; COMDAT (pick any)
.text:000071BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000071BC
.text:000071BC ; =============== S U B R O U T I N E =======================================
.text:000071BC
.text:000071BC ; Attributes: bp-based frame
.text:000071BC
.text:000071BC ; public: __thiscall CObjArray<bool>::CObjArray<bool>(unsigned int)
.text:000071BC                 public ??0?$CObjArray@_N@@QAE@I@Z
.text:000071BC ??0?$CObjArray@_N@@QAE@I@Z proc near    ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+A7p
.text:000071BC
.text:000071BC var_8           = dword ptr -8
.text:000071BC var_4           = dword ptr -4
.text:000071BC arg_0           = dword ptr  8
.text:000071BC
.text:000071BC                 push    ebp
.text:000071BD                 mov     ebp, esp
.text:000071BF                 sub     esp, 8
.text:000071C2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000071C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000071D0                 mov     [ebp+var_4], ecx
.text:000071D3                 mov     eax, [ebp+var_4]
.text:000071D6                 mov     dword ptr [eax], 0
.text:000071DC                 cmp     [ebp+arg_0], 0
.text:000071E0                 jz      short loc_71F9
.text:000071E2                 mov     ecx, [ebp+arg_0]
.text:000071E5                 push    ecx             ; unsigned int
.text:000071E6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000071EB                 add     esp, 4
.text:000071EE                 mov     [ebp+var_8], eax
.text:000071F1                 mov     edx, [ebp+var_4]
.text:000071F4                 mov     eax, [ebp+var_8]
.text:000071F7                 mov     [edx], eax
.text:000071F9
.text:000071F9 loc_71F9:                               ; CODE XREF: CObjArray<bool>::CObjArray<bool>(uint)+24j
.text:000071F9                 mov     eax, [ebp+var_4]
.text:000071FC                 add     esp, 8
.text:000071FF                 cmp     ebp, esp
.text:00007201                 call    __RTC_CheckEsp
.text:00007206                 mov     esp, ebp
.text:00007208                 pop     ebp
.text:00007209                 retn    4
.text:00007209 ??0?$CObjArray@_N@@QAE@I@Z endp
.text:00007209
.text:00007209 _text           ends
.text:00007209
.text:0000720C ; ===========================================================================
.text:0000720C
.text:0000720C ; Segment type: Pure code
.text:0000720C ; Segment permissions: Read/Execute
.text:0000720C _text           segment para public 'CODE' use32
.text:0000720C                 assume cs:_text
.text:0000720C                 ;org 720Ch
.text:0000720C ; COMDAT (pick any)
.text:0000720C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000720C
.text:0000720C ; =============== S U B R O U T I N E =======================================
.text:0000720C
.text:0000720C ; Attributes: bp-based frame
.text:0000720C
.text:0000720C ; public: __thiscall CObjArray<bool>::~CObjArray<bool>(void)
.text:0000720C                 public ??1?$CObjArray@_N@@QAE@XZ
.text:0000720C ??1?$CObjArray@_N@@QAE@XZ proc near     ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+553p
.text:0000720C                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+97Ap ...
.text:0000720C
.text:0000720C var_8           = dword ptr -8
.text:0000720C var_4           = dword ptr -4
.text:0000720C
.text:0000720C                 push    ebp
.text:0000720D                 mov     ebp, esp
.text:0000720F                 sub     esp, 8
.text:00007212                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007219                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007220                 mov     [ebp+var_4], ecx
.text:00007223                 mov     eax, [ebp+var_4]
.text:00007226                 mov     ecx, [eax]
.text:00007228                 mov     [ebp+var_8], ecx
.text:0000722B                 mov     edx, [ebp+var_8]
.text:0000722E                 push    edx             ; void *
.text:0000722F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007234                 add     esp, 4
.text:00007237                 add     esp, 8
.text:0000723A                 cmp     ebp, esp
.text:0000723C                 call    __RTC_CheckEsp
.text:00007241                 mov     esp, ebp
.text:00007243                 pop     ebp
.text:00007244                 retn
.text:00007244 ??1?$CObjArray@_N@@QAE@XZ endp
.text:00007244
.text:00007244 ; ---------------------------------------------------------------------------
.text:00007245                 align 4
.text:00007245 _text           ends
.text:00007245
.text:00007248 ; ===========================================================================
.text:00007248
.text:00007248 ; Segment type: Pure code
.text:00007248 ; Segment permissions: Read/Execute
.text:00007248 _text           segment para public 'CODE' use32
.text:00007248                 assume cs:_text
.text:00007248                 ;org 7248h
.text:00007248 ; COMDAT (pick any)
.text:00007248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007248
.text:00007248 ; =============== S U B R O U T I N E =======================================
.text:00007248
.text:00007248 ; Attributes: bp-based frame
.text:00007248
.text:00007248 ; public: __thiscall CObjArray<bool>::operator bool *(void)
.text:00007248                 public ??B?$CObjArray@_N@@QAEPA_NXZ
.text:00007248 ??B?$CObjArray@_N@@QAEPA_NXZ proc near  ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+E1p
.text:00007248                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+16Dp ...
.text:00007248
.text:00007248 var_4           = dword ptr -4
.text:00007248
.text:00007248                 push    ebp
.text:00007249                 mov     ebp, esp
.text:0000724B                 push    ecx
.text:0000724C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007253                 mov     [ebp+var_4], ecx
.text:00007256                 mov     eax, [ebp+var_4]
.text:00007259                 mov     eax, [eax]
.text:0000725B                 mov     esp, ebp
.text:0000725D                 pop     ebp
.text:0000725E                 retn
.text:0000725E ??B?$CObjArray@_N@@QAEPA_NXZ endp
.text:0000725E
.text:0000725E ; ---------------------------------------------------------------------------
.text:0000725F                 align 10h
.text:0000725F _text           ends
.text:0000725F
.text:00007260 ; ===========================================================================
.text:00007260
.text:00007260 ; Segment type: Pure code
.text:00007260 ; Segment permissions: Read/Execute
.text:00007260 _text           segment para public 'CODE' use32
.text:00007260                 assume cs:_text
.text:00007260                 ;org 7260h
.text:00007260 ; COMDAT (pick any)
.text:00007260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007260
.text:00007260 ; =============== S U B R O U T I N E =======================================
.text:00007260
.text:00007260 ; Attributes: bp-based frame
.text:00007260
.text:00007260 ; public: void * __thiscall UString::`scalar deleting destructor'(unsigned int)
.text:00007260                 public ??_GUString@@QAEPAXI@Z
.text:00007260 ??_GUString@@QAEPAXI@Z proc near        ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+7Fp
.text:00007260
.text:00007260 var_4           = dword ptr -4
.text:00007260 arg_0           = dword ptr  8
.text:00007260
.text:00007260                 push    ebp
.text:00007261                 mov     ebp, esp
.text:00007263                 push    ecx
.text:00007264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000726B                 mov     [ebp+var_4], ecx
.text:0000726E                 mov     ecx, [ebp+var_4] ; this
.text:00007271                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007276                 mov     eax, [ebp+arg_0]
.text:00007279                 and     eax, 1
.text:0000727C                 jz      short loc_728A
.text:0000727E                 mov     ecx, [ebp+var_4]
.text:00007281                 push    ecx             ; void *
.text:00007282                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007287                 add     esp, 4
.text:0000728A
.text:0000728A loc_728A:                               ; CODE XREF: UString::`scalar deleting destructor'(uint)+1Cj
.text:0000728A                 mov     eax, [ebp+var_4]
.text:0000728D                 add     esp, 4
.text:00007290                 cmp     ebp, esp
.text:00007292                 call    __RTC_CheckEsp
.text:00007297                 mov     esp, ebp
.text:00007299                 pop     ebp
.text:0000729A                 retn    4
.text:0000729A ??_GUString@@QAEPAXI@Z endp
.text:0000729A
.text:0000729A ; ---------------------------------------------------------------------------
.text:0000729D                 align 10h
.text:0000729D _text           ends
.text:0000729D
.text:000072A0 ; ===========================================================================
.text:000072A0
.text:000072A0 ; Segment type: Pure code
.text:000072A0 ; Segment permissions: Read/Execute
.text:000072A0 _text           segment para public 'CODE' use32
.text:000072A0                 assume cs:_text
.text:000072A0                 ;org 72A0h
.text:000072A0 ; COMDAT (pick any)
.text:000072A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000072A0
.text:000072A0 ; =============== S U B R O U T I N E =======================================
.text:000072A0
.text:000072A0 ; Attributes: bp-based frame
.text:000072A0
.text:000072A0 ; public: void * __thiscall CArc::`scalar deleting destructor'(unsigned int)
.text:000072A0                 public ??_GCArc@@QAEPAXI@Z
.text:000072A0 ??_GCArc@@QAEPAXI@Z proc near           ; CODE XREF: CObjectVector<CArc>::~CObjectVector<CArc>(void)+7Fp
.text:000072A0
.text:000072A0 var_4           = dword ptr -4
.text:000072A0 arg_0           = dword ptr  8
.text:000072A0
.text:000072A0                 push    ebp
.text:000072A1                 mov     ebp, esp
.text:000072A3                 push    ecx
.text:000072A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000072AB                 mov     [ebp+var_4], ecx
.text:000072AE                 mov     ecx, [ebp+var_4] ; this
.text:000072B1                 call    ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text:000072B6                 mov     eax, [ebp+arg_0]
.text:000072B9                 and     eax, 1
.text:000072BC                 jz      short loc_72CA
.text:000072BE                 mov     ecx, [ebp+var_4]
.text:000072C1                 push    ecx             ; void *
.text:000072C2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000072C7                 add     esp, 4
.text:000072CA
.text:000072CA loc_72CA:                               ; CODE XREF: CArc::`scalar deleting destructor'(uint)+1Cj
.text:000072CA                 mov     eax, [ebp+var_4]
.text:000072CD                 add     esp, 4
.text:000072D0                 cmp     ebp, esp
.text:000072D2                 call    __RTC_CheckEsp
.text:000072D7                 mov     esp, ebp
.text:000072D9                 pop     ebp
.text:000072DA                 retn    4
.text:000072DA ??_GCArc@@QAEPAXI@Z endp
.text:000072DA
.text:000072DA ; ---------------------------------------------------------------------------
.text:000072DD                 align 10h
.text:000072DD _text           ends
.text:000072DD
.text:000072E0 ; ===========================================================================
.text:000072E0
.text:000072E0 ; Segment type: Pure code
.text:000072E0 ; Segment permissions: Read/Execute
.text:000072E0 _text           segment para public 'CODE' use32
.text:000072E0                 assume cs:_text
.text:000072E0                 ;org 72E0h
.text:000072E0 ; COMDAT (pick any)
.text:000072E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000072E0
.text:000072E0 ; =============== S U B R O U T I N E =======================================
.text:000072E0
.text:000072E0 ; Attributes: bp-based frame
.text:000072E0
.text:000072E0 ; public: __thiscall CFieldInfo::CFieldInfo(struct CFieldInfo const &)
.text:000072E0                 public ??0CFieldInfo@@QAE@ABU0@@Z
.text:000072E0 ??0CFieldInfo@@QAE@ABU0@@Z proc near    ; CODE XREF: CObjectVector<CFieldInfo>::Add(CFieldInfo const &)+5Ap
.text:000072E0
.text:000072E0 var_10          = dword ptr -10h
.text:000072E0 var_C           = dword ptr -0Ch
.text:000072E0 var_4           = dword ptr -4
.text:000072E0 arg_0           = dword ptr  8
.text:000072E0
.text:000072E0                 push    ebp
.text:000072E1                 mov     ebp, esp
.text:000072E3                 push    0FFFFFFFFh
.text:000072E5                 push    offset __ehhandler$??0CFieldInfo@@QAE@ABU0@@Z
.text:000072EA                 mov     eax, large fs:0
.text:000072F0                 push    eax
.text:000072F1                 push    ecx
.text:000072F2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000072F9                 mov     eax, dword ptr ds:___security_cookie
.text:000072FE                 xor     eax, ebp
.text:00007300                 push    eax
.text:00007301                 lea     eax, [ebp+var_C]
.text:00007304                 mov     large fs:0, eax
.text:0000730A                 mov     [ebp+var_10], ecx
.text:0000730D                 mov     eax, [ebp+var_10]
.text:00007310                 mov     ecx, [ebp+arg_0]
.text:00007313                 mov     edx, [ecx]
.text:00007315                 mov     [eax], edx
.text:00007317                 mov     eax, [ebp+var_10]
.text:0000731A                 mov     ecx, [ebp+arg_0]
.text:0000731D                 mov     dl, [ecx+4]
.text:00007320                 mov     [eax+4], dl
.text:00007323                 mov     eax, [ebp+arg_0]
.text:00007326                 add     eax, 8
.text:00007329                 push    eax
.text:0000732A                 mov     ecx, [ebp+var_10]
.text:0000732D                 add     ecx, 8
.text:00007330                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00007335                 mov     [ebp+var_4], 0
.text:0000733C                 mov     ecx, [ebp+arg_0]
.text:0000733F                 add     ecx, 14h
.text:00007342                 push    ecx
.text:00007343                 mov     ecx, [ebp+var_10]
.text:00007346                 add     ecx, 14h
.text:00007349                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:0000734E                 mov     edx, [ebp+var_10]
.text:00007351                 mov     eax, [ebp+arg_0]
.text:00007354                 mov     ecx, [eax+20h]
.text:00007357                 mov     [edx+20h], ecx
.text:0000735A                 mov     edx, [ebp+var_10]
.text:0000735D                 mov     eax, [ebp+arg_0]
.text:00007360                 mov     ecx, [eax+24h]
.text:00007363                 mov     [edx+24h], ecx
.text:00007366                 mov     edx, [ebp+var_10]
.text:00007369                 mov     eax, [ebp+arg_0]
.text:0000736C                 mov     ecx, [eax+28h]
.text:0000736F                 mov     [edx+28h], ecx
.text:00007372                 mov     edx, [ebp+var_10]
.text:00007375                 mov     eax, [ebp+arg_0]
.text:00007378                 mov     ecx, [eax+2Ch]
.text:0000737B                 mov     [edx+2Ch], ecx
.text:0000737E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007385                 mov     eax, [ebp+var_10]
.text:00007388                 mov     ecx, [ebp+var_C]
.text:0000738B                 mov     large fs:0, ecx
.text:00007392                 pop     ecx
.text:00007393                 add     esp, 10h
.text:00007396                 cmp     ebp, esp
.text:00007398                 call    __RTC_CheckEsp
.text:0000739D                 mov     esp, ebp
.text:0000739F                 pop     ebp
.text:000073A0                 retn    4
.text:000073A0 ??0CFieldInfo@@QAE@ABU0@@Z endp
.text:000073A0
.text:000073A0 ; ---------------------------------------------------------------------------
.text:000073A3                 align 4
.text:000073A3 _text           ends
.text:000073A3
.text$x:000073A4 ; ===========================================================================
.text$x:000073A4
.text$x:000073A4 ; Segment type: Pure code
.text$x:000073A4 ; Segment permissions: Read/Execute
.text$x:000073A4 _text$x         segment para public 'CODE' use32
.text$x:000073A4                 assume cs:_text$x
.text$x:000073A4                 ;org 73A4h
.text$x:000073A4 ; COMDAT (pick associative to section at 72E0)
.text$x:000073A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000073A4
.text$x:000073A4 ; =============== S U B R O U T I N E =======================================
.text$x:000073A4
.text$x:000073A4
.text$x:000073A4 __unwindfunclet$??0CFieldInfo@@QAE@ABU0@@Z$0 proc near
.text$x:000073A4                                         ; DATA XREF: .xdata$x:000073D0o
.text$x:000073A4                 mov     ecx, [ebp-10h]
.text$x:000073A7                 add     ecx, 8          ; this
.text$x:000073AA                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000073AA __unwindfunclet$??0CFieldInfo@@QAE@ABU0@@Z$0 endp
.text$x:000073AA
.text$x:000073AF
.text$x:000073AF ; =============== S U B R O U T I N E =======================================
.text$x:000073AF
.text$x:000073AF
.text$x:000073AF __ehhandler$??0CFieldInfo@@QAE@ABU0@@Z proc near
.text$x:000073AF                                         ; DATA XREF: CFieldInfo::CFieldInfo(CFieldInfo const &)+5o
.text$x:000073AF
.text$x:000073AF arg_4           = dword ptr  8
.text$x:000073AF
.text$x:000073AF                 mov     edx, [esp+arg_4]
.text$x:000073B3                 lea     eax, [edx+0Ch]
.text$x:000073B6                 mov     ecx, [edx-8]
.text$x:000073B9                 xor     ecx, eax
.text$x:000073BB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000073C0                 mov     eax, offset __ehfuncinfo$??0CFieldInfo@@QAE@ABU0@@Z
.text$x:000073C5                 jmp     ___CxxFrameHandler3
.text$x:000073C5 __ehhandler$??0CFieldInfo@@QAE@ABU0@@Z endp
.text$x:000073C5
.text$x:000073C5 ; ---------------------------------------------------------------------------
.text$x:000073CA                 align 4
.text$x:000073CA _text$x         ends
.text$x:000073CA
.xdata$x:000073CC ; ===========================================================================
.xdata$x:000073CC
.xdata$x:000073CC ; Segment type: Pure data
.xdata$x:000073CC ; Segment permissions: Read
.xdata$x:000073CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000073CC                 assume cs:_xdata$x
.xdata$x:000073CC                 ;org 73CCh
.xdata$x:000073CC ; COMDAT (pick associative to section at 72E0)
.xdata$x:000073CC __unwindtable$??0CFieldInfo@@QAE@ABU0@@Z db 0FFh
.xdata$x:000073CC                                         ; DATA XREF: .xdata$x:000073DCo
.xdata$x:000073CD                 db 0FFh
.xdata$x:000073CE                 db 0FFh
.xdata$x:000073CF                 db 0FFh
.xdata$x:000073D0                 dd offset __unwindfunclet$??0CFieldInfo@@QAE@ABU0@@Z$0
.xdata$x:000073D4 __ehfuncinfo$??0CFieldInfo@@QAE@ABU0@@Z db  22h ; "
.xdata$x:000073D4                                         ; DATA XREF: __ehhandler$??0CFieldInfo@@QAE@ABU0@@Z+11o
.xdata$x:000073D5                 db    5
.xdata$x:000073D6                 db  93h ; ô
.xdata$x:000073D7                 db  19h
.xdata$x:000073D8                 db    1
.xdata$x:000073D9                 db    0
.xdata$x:000073DA                 db    0
.xdata$x:000073DB                 db    0
.xdata$x:000073DC                 dd offset __unwindtable$??0CFieldInfo@@QAE@ABU0@@Z
.xdata$x:000073E0                 db    0
.xdata$x:000073E1                 db    0
.xdata$x:000073E2                 db    0
.xdata$x:000073E3                 db    0
.xdata$x:000073E4                 db    0
.xdata$x:000073E5                 db    0
.xdata$x:000073E6                 db    0
.xdata$x:000073E7                 db    0
.xdata$x:000073E8                 db    0
.xdata$x:000073E9                 db    0
.xdata$x:000073EA                 db    0
.xdata$x:000073EB                 db    0
.xdata$x:000073EC                 db    0
.xdata$x:000073ED                 db    0
.xdata$x:000073EE                 db    0
.xdata$x:000073EF                 db    0
.xdata$x:000073F0                 db    0
.xdata$x:000073F1                 db    0
.xdata$x:000073F2                 db    0
.xdata$x:000073F3                 db    0
.xdata$x:000073F4                 db    1
.xdata$x:000073F5                 db    0
.xdata$x:000073F6                 db    0
.xdata$x:000073F7                 db    0
.xdata$x:000073F7 _xdata$x        ends
.xdata$x:000073F7
.text:000073F8 ; ===========================================================================
.text:000073F8
.text:000073F8 ; Segment type: Pure code
.text:000073F8 ; Segment permissions: Read/Execute
.text:000073F8 _text           segment para public 'CODE' use32
.text:000073F8                 assume cs:_text
.text:000073F8                 ;org 73F8h
.text:000073F8 ; COMDAT (pick any)
.text:000073F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000073F8
.text:000073F8 ; =============== S U B R O U T I N E =======================================
.text:000073F8
.text:000073F8 ; Attributes: bp-based frame
.text:000073F8
.text:000073F8 ; public: void * __thiscall CFieldInfo::`scalar deleting destructor'(unsigned int)
.text:000073F8                 public ??_GCFieldInfo@@QAEPAXI@Z
.text:000073F8 ??_GCFieldInfo@@QAEPAXI@Z proc near     ; CODE XREF: CObjectVector<CFieldInfo>::~CObjectVector<CFieldInfo>(void)+7Fp
.text:000073F8                                         ; CObjectVector<CFieldInfo>::Clear(void)+59p
.text:000073F8
.text:000073F8 var_4           = dword ptr -4
.text:000073F8 arg_0           = dword ptr  8
.text:000073F8
.text:000073F8                 push    ebp
.text:000073F9                 mov     ebp, esp
.text:000073FB                 push    ecx
.text:000073FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007403                 mov     [ebp+var_4], ecx
.text:00007406                 mov     ecx, [ebp+var_4] ; this
.text:00007409                 call    ??1CFieldInfo@@QAE@XZ ; CFieldInfo::~CFieldInfo(void)
.text:0000740E                 mov     eax, [ebp+arg_0]
.text:00007411                 and     eax, 1
.text:00007414                 jz      short loc_7422
.text:00007416                 mov     ecx, [ebp+var_4]
.text:00007419                 push    ecx             ; void *
.text:0000741A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000741F                 add     esp, 4
.text:00007422
.text:00007422 loc_7422:                               ; CODE XREF: CFieldInfo::`scalar deleting destructor'(uint)+1Cj
.text:00007422                 mov     eax, [ebp+var_4]
.text:00007425                 add     esp, 4
.text:00007428                 cmp     ebp, esp
.text:0000742A                 call    __RTC_CheckEsp
.text:0000742F                 mov     esp, ebp
.text:00007431                 pop     ebp
.text:00007432                 retn    4
.text:00007432 ??_GCFieldInfo@@QAEPAXI@Z endp
.text:00007432
.text:00007432 ; ---------------------------------------------------------------------------
.text:00007435                 align 4
.text:00007435 _text           ends
.text:00007435
.text:00007438 ; ===========================================================================
.text:00007438
.text:00007438 ; Segment type: Pure code
.text:00007438 ; Segment permissions: Read/Execute
.text:00007438 _text           segment para public 'CODE' use32
.text:00007438                 assume cs:_text
.text:00007438                 ;org 7438h
.text:00007438 ; COMDAT (pick any)
.text:00007438                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007438
.text:00007438 ; =============== S U B R O U T I N E =======================================
.text:00007438
.text:00007438 ; Attributes: bp-based frame
.text:00007438
.text:00007438 ; _DWORD __thiscall CArc::~CArc(CArc *__hidden this)
.text:00007438                 public ??1CArc@@QAE@XZ
.text:00007438 ??1CArc@@QAE@XZ proc near               ; CODE XREF: CArc::`scalar deleting destructor'(uint)+11p
.text:00007438
.text:00007438 var_10          = dword ptr -10h
.text:00007438 var_C           = dword ptr -0Ch
.text:00007438 var_4           = dword ptr -4
.text:00007438
.text:00007438                 push    ebp
.text:00007439                 mov     ebp, esp
.text:0000743B                 push    0FFFFFFFFh
.text:0000743D                 push    offset __ehhandler$??1CArc@@QAE@XZ
.text:00007442                 mov     eax, large fs:0
.text:00007448                 push    eax
.text:00007449                 push    ecx
.text:0000744A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007451                 mov     eax, dword ptr ds:___security_cookie
.text:00007456                 xor     eax, ebp
.text:00007458                 push    eax
.text:00007459                 lea     eax, [ebp+var_C]
.text:0000745C                 mov     large fs:0, eax
.text:00007462                 mov     [ebp+var_10], ecx
.text:00007465                 mov     [ebp+var_4], 7
.text:0000746C                 mov     ecx, [ebp+var_10]
.text:0000746F                 add     ecx, 88h ; 'ê'  ; this
.text:00007475                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000747A                 mov     byte ptr [ebp+var_4], 6
.text:0000747E                 mov     ecx, [ebp+var_10]
.text:00007481                 add     ecx, 7Ch ; '|'  ; this
.text:00007484                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007489                 mov     byte ptr [ebp+var_4], 5
.text:0000748D                 mov     ecx, [ebp+var_10]
.text:00007490                 add     ecx, 70h ; 'p'  ; this
.text:00007493                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007498                 mov     byte ptr [ebp+var_4], 4
.text:0000749C                 mov     ecx, [ebp+var_10]
.text:0000749F                 add     ecx, 40h ; '@'  ; this
.text:000074A2                 call    ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text:000074A7                 mov     byte ptr [ebp+var_4], 3
.text:000074AB                 mov     ecx, [ebp+var_10]
.text:000074AE                 add     ecx, 10h        ; this
.text:000074B1                 call    ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text:000074B6                 mov     byte ptr [ebp+var_4], 2
.text:000074BA                 mov     ecx, [ebp+var_10]
.text:000074BD                 add     ecx, 0Ch
.text:000074C0                 call    ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>(void)
.text:000074C5                 mov     byte ptr [ebp+var_4], 1
.text:000074C9                 mov     ecx, [ebp+var_10]
.text:000074CC                 add     ecx, 8
.text:000074CF                 call    ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>(void)
.text:000074D4                 mov     byte ptr [ebp+var_4], 0
.text:000074D8                 mov     ecx, [ebp+var_10]
.text:000074DB                 add     ecx, 4
.text:000074DE                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:000074E3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000074EA                 mov     ecx, [ebp+var_10]
.text:000074ED                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:000074F2                 mov     ecx, [ebp+var_C]
.text:000074F5                 mov     large fs:0, ecx
.text:000074FC                 pop     ecx
.text:000074FD                 add     esp, 10h
.text:00007500                 cmp     ebp, esp
.text:00007502                 call    __RTC_CheckEsp
.text:00007507                 mov     esp, ebp
.text:00007509                 pop     ebp
.text:0000750A                 retn
.text:0000750A ??1CArc@@QAE@XZ endp
.text:0000750A
.text:0000750A ; ---------------------------------------------------------------------------
.text:0000750B                 align 4
.text:0000750B _text           ends
.text:0000750B
.text$x:0000750C ; ===========================================================================
.text$x:0000750C
.text$x:0000750C ; Segment type: Pure code
.text$x:0000750C ; Segment permissions: Read/Execute
.text$x:0000750C _text$x         segment para public 'CODE' use32
.text$x:0000750C                 assume cs:_text$x
.text$x:0000750C                 ;org 750Ch
.text$x:0000750C ; COMDAT (pick associative to section at 7438)
.text$x:0000750C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000750C
.text$x:0000750C ; =============== S U B R O U T I N E =======================================
.text$x:0000750C
.text$x:0000750C
.text$x:0000750C __unwindfunclet$??1CArc@@QAE@XZ$0 proc near ; DATA XREF: .xdata$x:000075A4o
.text$x:0000750C                 mov     ecx, [ebp-10h]
.text$x:0000750F                 jmp     ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text$x:0000750F __unwindfunclet$??1CArc@@QAE@XZ$0 endp
.text$x:0000750F
.text$x:00007514
.text$x:00007514 ; =============== S U B R O U T I N E =======================================
.text$x:00007514
.text$x:00007514
.text$x:00007514 __unwindfunclet$??1CArc@@QAE@XZ$1 proc near ; DATA XREF: .xdata$x:000075ACo
.text$x:00007514                 mov     ecx, [ebp-10h]
.text$x:00007517                 add     ecx, 4
.text$x:0000751A                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:0000751A __unwindfunclet$??1CArc@@QAE@XZ$1 endp
.text$x:0000751A
.text$x:0000751F
.text$x:0000751F ; =============== S U B R O U T I N E =======================================
.text$x:0000751F
.text$x:0000751F
.text$x:0000751F __unwindfunclet$??1CArc@@QAE@XZ$2 proc near ; DATA XREF: .xdata$x:000075B4o
.text$x:0000751F                 mov     ecx, [ebp-10h]
.text$x:00007522                 add     ecx, 8
.text$x:00007525                 jmp     ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>(void)
.text$x:00007525 __unwindfunclet$??1CArc@@QAE@XZ$2 endp
.text$x:00007525
.text$x:0000752A
.text$x:0000752A ; =============== S U B R O U T I N E =======================================
.text$x:0000752A
.text$x:0000752A
.text$x:0000752A __unwindfunclet$??1CArc@@QAE@XZ$3 proc near ; DATA XREF: .xdata$x:000075BCo
.text$x:0000752A                 mov     ecx, [ebp-10h]
.text$x:0000752D                 add     ecx, 0Ch
.text$x:00007530                 jmp     ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>(void)
.text$x:00007530 __unwindfunclet$??1CArc@@QAE@XZ$3 endp
.text$x:00007530
.text$x:00007535
.text$x:00007535 ; =============== S U B R O U T I N E =======================================
.text$x:00007535
.text$x:00007535
.text$x:00007535 __unwindfunclet$??1CArc@@QAE@XZ$4 proc near ; DATA XREF: .xdata$x:000075C4o
.text$x:00007535                 mov     ecx, [ebp-10h]
.text$x:00007538                 add     ecx, 10h        ; this
.text$x:0000753B                 jmp     ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text$x:0000753B __unwindfunclet$??1CArc@@QAE@XZ$4 endp
.text$x:0000753B
.text$x:00007540
.text$x:00007540 ; =============== S U B R O U T I N E =======================================
.text$x:00007540
.text$x:00007540
.text$x:00007540 __unwindfunclet$??1CArc@@QAE@XZ$5 proc near ; DATA XREF: .xdata$x:000075CCo
.text$x:00007540                 mov     ecx, [ebp-10h]
.text$x:00007543                 add     ecx, 40h ; '@'  ; this
.text$x:00007546                 jmp     ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text$x:00007546 __unwindfunclet$??1CArc@@QAE@XZ$5 endp
.text$x:00007546
.text$x:0000754B
.text$x:0000754B ; =============== S U B R O U T I N E =======================================
.text$x:0000754B
.text$x:0000754B
.text$x:0000754B __unwindfunclet$??1CArc@@QAE@XZ$6 proc near ; DATA XREF: .xdata$x:000075D4o
.text$x:0000754B                 mov     ecx, [ebp-10h]
.text$x:0000754E                 add     ecx, 70h ; 'p'  ; this
.text$x:00007551                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00007551 __unwindfunclet$??1CArc@@QAE@XZ$6 endp
.text$x:00007551
.text$x:00007556
.text$x:00007556 ; =============== S U B R O U T I N E =======================================
.text$x:00007556
.text$x:00007556
.text$x:00007556 __unwindfunclet$??1CArc@@QAE@XZ$7 proc near ; DATA XREF: .xdata$x:000075DCo
.text$x:00007556                 mov     ecx, [ebp-10h]
.text$x:00007559                 add     ecx, 7Ch ; '|'  ; this
.text$x:0000755C                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000755C __unwindfunclet$??1CArc@@QAE@XZ$7 endp
.text$x:0000755C
.text$x:00007561
.text$x:00007561 ; =============== S U B R O U T I N E =======================================
.text$x:00007561
.text$x:00007561
.text$x:00007561 __ehhandler$??1CArc@@QAE@XZ proc near   ; DATA XREF: CArc::~CArc(void)+5o
.text$x:00007561
.text$x:00007561 arg_4           = dword ptr  8
.text$x:00007561
.text$x:00007561                 mov     edx, [esp+arg_4]
.text$x:00007565                 lea     eax, [edx+0Ch]
.text$x:00007568                 mov     ecx, [edx-8]
.text$x:0000756B                 xor     ecx, eax
.text$x:0000756D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007572                 mov     eax, offset __ehfuncinfo$??1CArc@@QAE@XZ
.text$x:00007577                 jmp     ___CxxFrameHandler3
.text$x:00007577 __ehhandler$??1CArc@@QAE@XZ endp
.text$x:00007577
.text$x:00007577 _text$x         ends
.text$x:00007577
.xdata$x:0000757C ; ===========================================================================
.xdata$x:0000757C
.xdata$x:0000757C ; Segment type: Pure data
.xdata$x:0000757C ; Segment permissions: Read
.xdata$x:0000757C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000757C                 assume cs:_xdata$x
.xdata$x:0000757C                 ;org 757Ch
.xdata$x:0000757C ; COMDAT (pick associative to section at 7438)
.xdata$x:0000757C __ehfuncinfo$??1CArc@@QAE@XZ db  22h ; "
.xdata$x:0000757C                                         ; DATA XREF: __ehhandler$??1CArc@@QAE@XZ+11o
.xdata$x:0000757D                 db    5
.xdata$x:0000757E                 db  93h ; ô
.xdata$x:0000757F                 db  19h
.xdata$x:00007580                 db    8
.xdata$x:00007581                 db    0
.xdata$x:00007582                 db    0
.xdata$x:00007583                 db    0
.xdata$x:00007584                 dd offset __unwindtable$??1CArc@@QAE@XZ
.xdata$x:00007588                 db    0
.xdata$x:00007589                 db    0
.xdata$x:0000758A                 db    0
.xdata$x:0000758B                 db    0
.xdata$x:0000758C                 db    0
.xdata$x:0000758D                 db    0
.xdata$x:0000758E                 db    0
.xdata$x:0000758F                 db    0
.xdata$x:00007590                 db    0
.xdata$x:00007591                 db    0
.xdata$x:00007592                 db    0
.xdata$x:00007593                 db    0
.xdata$x:00007594                 db    0
.xdata$x:00007595                 db    0
.xdata$x:00007596                 db    0
.xdata$x:00007597                 db    0
.xdata$x:00007598                 db    0
.xdata$x:00007599                 db    0
.xdata$x:0000759A                 db    0
.xdata$x:0000759B                 db    0
.xdata$x:0000759C                 db    1
.xdata$x:0000759D                 db    0
.xdata$x:0000759E                 db    0
.xdata$x:0000759F                 db    0
.xdata$x:000075A0 __unwindtable$??1CArc@@QAE@XZ db 0FFh   ; DATA XREF: .xdata$x:00007584o
.xdata$x:000075A1                 db 0FFh
.xdata$x:000075A2                 db 0FFh
.xdata$x:000075A3                 db 0FFh
.xdata$x:000075A4                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$0
.xdata$x:000075A8                 db    0
.xdata$x:000075A9                 db    0
.xdata$x:000075AA                 db    0
.xdata$x:000075AB                 db    0
.xdata$x:000075AC                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$1
.xdata$x:000075B0                 db    1
.xdata$x:000075B1                 db    0
.xdata$x:000075B2                 db    0
.xdata$x:000075B3                 db    0
.xdata$x:000075B4                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$2
.xdata$x:000075B8                 db    2
.xdata$x:000075B9                 db    0
.xdata$x:000075BA                 db    0
.xdata$x:000075BB                 db    0
.xdata$x:000075BC                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$3
.xdata$x:000075C0                 db    3
.xdata$x:000075C1                 db    0
.xdata$x:000075C2                 db    0
.xdata$x:000075C3                 db    0
.xdata$x:000075C4                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$4
.xdata$x:000075C8                 db    4
.xdata$x:000075C9                 db    0
.xdata$x:000075CA                 db    0
.xdata$x:000075CB                 db    0
.xdata$x:000075CC                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$5
.xdata$x:000075D0                 db    5
.xdata$x:000075D1                 db    0
.xdata$x:000075D2                 db    0
.xdata$x:000075D3                 db    0
.xdata$x:000075D4                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$6
.xdata$x:000075D8                 db    6
.xdata$x:000075D9                 db    0
.xdata$x:000075DA                 db    0
.xdata$x:000075DB                 db    0
.xdata$x:000075DC                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$7
.xdata$x:000075DC _xdata$x        ends
.xdata$x:000075DC
.text:000075E0 ; ===========================================================================
.text:000075E0
.text:000075E0 ; Segment type: Pure code
.text:000075E0 ; Segment permissions: Read/Execute
.text:000075E0 _text           segment para public 'CODE' use32
.text:000075E0                 assume cs:_text
.text:000075E0                 ;org 75E0h
.text:000075E0 ; COMDAT (pick any)
.text:000075E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000075E0
.text:000075E0 ; =============== S U B R O U T I N E =======================================
.text:000075E0
.text:000075E0 ; Attributes: bp-based frame
.text:000075E0
.text:000075E0 ; public: __thiscall CMyComPtr<struct IInArchive>::~CMyComPtr<struct IInArchive>(void)
.text:000075E0                 public ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ
.text:000075E0 ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ proc near
.text:000075E0                                         ; CODE XREF: CArc::~CArc(void)+B5p
.text:000075E0                                         ; __unwindfunclet$??1CArc@@QAE@XZ$0+3j
.text:000075E0
.text:000075E0 var_4           = dword ptr -4
.text:000075E0
.text:000075E0                 push    ebp
.text:000075E1                 mov     ebp, esp
.text:000075E3                 push    ecx
.text:000075E4                 push    esi
.text:000075E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000075EC                 mov     [ebp+var_4], ecx
.text:000075EF                 mov     eax, [ebp+var_4]
.text:000075F2                 cmp     dword ptr [eax], 0
.text:000075F5                 jz      short loc_7612
.text:000075F7                 mov     ecx, [ebp+var_4]
.text:000075FA                 mov     edx, [ecx]
.text:000075FC                 mov     eax, [ebp+var_4]
.text:000075FF                 mov     ecx, [eax]
.text:00007601                 mov     edx, [edx]
.text:00007603                 mov     esi, esp
.text:00007605                 push    ecx
.text:00007606                 mov     eax, [edx+8]
.text:00007609                 call    eax
.text:0000760B                 cmp     esi, esp
.text:0000760D                 call    __RTC_CheckEsp
.text:00007612
.text:00007612 loc_7612:                               ; CODE XREF: CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)+15j
.text:00007612                 pop     esi
.text:00007613                 add     esp, 4
.text:00007616                 cmp     ebp, esp
.text:00007618                 call    __RTC_CheckEsp
.text:0000761D                 mov     esp, ebp
.text:0000761F                 pop     ebp
.text:00007620                 retn
.text:00007620 ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ endp
.text:00007620
.text:00007620 ; ---------------------------------------------------------------------------
.text:00007621                 align 4
.text:00007621 _text           ends
.text:00007621
.text:00007624 ; ===========================================================================
.text:00007624
.text:00007624 ; Segment type: Pure code
.text:00007624 ; Segment permissions: Read/Execute
.text:00007624 _text           segment para public 'CODE' use32
.text:00007624                 assume cs:_text
.text:00007624                 ;org 7624h
.text:00007624 ; COMDAT (pick any)
.text:00007624                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007624
.text:00007624 ; =============== S U B R O U T I N E =======================================
.text:00007624
.text:00007624 ; Attributes: bp-based frame
.text:00007624
.text:00007624 ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:00007624                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00007624 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00007624                                         ; CODE XREF: CArc::~CArc(void)+A6p
.text:00007624                                         ; __unwindfunclet$??1CArc@@QAE@XZ$1+6j
.text:00007624
.text:00007624 var_4           = dword ptr -4
.text:00007624
.text:00007624                 push    ebp
.text:00007625                 mov     ebp, esp
.text:00007627                 push    ecx
.text:00007628                 push    esi
.text:00007629                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007630                 mov     [ebp+var_4], ecx
.text:00007633                 mov     eax, [ebp+var_4]
.text:00007636                 cmp     dword ptr [eax], 0
.text:00007639                 jz      short loc_7656
.text:0000763B                 mov     ecx, [ebp+var_4]
.text:0000763E                 mov     edx, [ecx]
.text:00007640                 mov     eax, [ebp+var_4]
.text:00007643                 mov     ecx, [eax]
.text:00007645                 mov     edx, [edx]
.text:00007647                 mov     esi, esp
.text:00007649                 push    ecx
.text:0000764A                 mov     eax, [edx+8]
.text:0000764D                 call    eax
.text:0000764F                 cmp     esi, esp
.text:00007651                 call    __RTC_CheckEsp
.text:00007656
.text:00007656 loc_7656:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:00007656                 pop     esi
.text:00007657                 add     esp, 4
.text:0000765A                 cmp     ebp, esp
.text:0000765C                 call    __RTC_CheckEsp
.text:00007661                 mov     esp, ebp
.text:00007663                 pop     ebp
.text:00007664                 retn
.text:00007664 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00007664
.text:00007664 ; ---------------------------------------------------------------------------
.text:00007665                 align 4
.text:00007665 _text           ends
.text:00007665
.text:00007668 ; ===========================================================================
.text:00007668
.text:00007668 ; Segment type: Pure code
.text:00007668 ; Segment permissions: Read/Execute
.text:00007668 _text           segment para public 'CODE' use32
.text:00007668                 assume cs:_text
.text:00007668                 ;org 7668h
.text:00007668 ; COMDAT (pick any)
.text:00007668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007668
.text:00007668 ; =============== S U B R O U T I N E =======================================
.text:00007668
.text:00007668 ; Attributes: bp-based frame
.text:00007668
.text:00007668 ; public: __thiscall CMyComPtr<struct IArchiveGetRawProps>::~CMyComPtr<struct IArchiveGetRawProps>(void)
.text:00007668                 public ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ
.text:00007668 ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ proc near
.text:00007668                                         ; CODE XREF: CArc::~CArc(void)+97p
.text:00007668                                         ; __unwindfunclet$??1CArc@@QAE@XZ$2+6j
.text:00007668
.text:00007668 var_4           = dword ptr -4
.text:00007668
.text:00007668                 push    ebp
.text:00007669                 mov     ebp, esp
.text:0000766B                 push    ecx
.text:0000766C                 push    esi
.text:0000766D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007674                 mov     [ebp+var_4], ecx
.text:00007677                 mov     eax, [ebp+var_4]
.text:0000767A                 cmp     dword ptr [eax], 0
.text:0000767D                 jz      short loc_769A
.text:0000767F                 mov     ecx, [ebp+var_4]
.text:00007682                 mov     edx, [ecx]
.text:00007684                 mov     eax, [ebp+var_4]
.text:00007687                 mov     ecx, [eax]
.text:00007689                 mov     edx, [edx]
.text:0000768B                 mov     esi, esp
.text:0000768D                 push    ecx
.text:0000768E                 mov     eax, [edx+8]
.text:00007691                 call    eax
.text:00007693                 cmp     esi, esp
.text:00007695                 call    __RTC_CheckEsp
.text:0000769A
.text:0000769A loc_769A:                               ; CODE XREF: CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>(void)+15j
.text:0000769A                 pop     esi
.text:0000769B                 add     esp, 4
.text:0000769E                 cmp     ebp, esp
.text:000076A0                 call    __RTC_CheckEsp
.text:000076A5                 mov     esp, ebp
.text:000076A7                 pop     ebp
.text:000076A8                 retn
.text:000076A8 ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ endp
.text:000076A8
.text:000076A8 ; ---------------------------------------------------------------------------
.text:000076A9                 align 4
.text:000076A9 _text           ends
.text:000076A9
.text:000076AC ; ===========================================================================
.text:000076AC
.text:000076AC ; Segment type: Pure code
.text:000076AC ; Segment permissions: Read/Execute
.text:000076AC _text           segment para public 'CODE' use32
.text:000076AC                 assume cs:_text
.text:000076AC                 ;org 76ACh
.text:000076AC ; COMDAT (pick any)
.text:000076AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000076AC
.text:000076AC ; =============== S U B R O U T I N E =======================================
.text:000076AC
.text:000076AC ; Attributes: bp-based frame
.text:000076AC
.text:000076AC ; public: __thiscall CMyComPtr<struct IArchiveGetRootProps>::~CMyComPtr<struct IArchiveGetRootProps>(void)
.text:000076AC                 public ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ
.text:000076AC ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ proc near
.text:000076AC                                         ; CODE XREF: CArc::~CArc(void)+88p
.text:000076AC                                         ; __unwindfunclet$??1CArc@@QAE@XZ$3+6j
.text:000076AC
.text:000076AC var_4           = dword ptr -4
.text:000076AC
.text:000076AC                 push    ebp
.text:000076AD                 mov     ebp, esp
.text:000076AF                 push    ecx
.text:000076B0                 push    esi
.text:000076B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000076B8                 mov     [ebp+var_4], ecx
.text:000076BB                 mov     eax, [ebp+var_4]
.text:000076BE                 cmp     dword ptr [eax], 0
.text:000076C1                 jz      short loc_76DE
.text:000076C3                 mov     ecx, [ebp+var_4]
.text:000076C6                 mov     edx, [ecx]
.text:000076C8                 mov     eax, [ebp+var_4]
.text:000076CB                 mov     ecx, [eax]
.text:000076CD                 mov     edx, [edx]
.text:000076CF                 mov     esi, esp
.text:000076D1                 push    ecx
.text:000076D2                 mov     eax, [edx+8]
.text:000076D5                 call    eax
.text:000076D7                 cmp     esi, esp
.text:000076D9                 call    __RTC_CheckEsp
.text:000076DE
.text:000076DE loc_76DE:                               ; CODE XREF: CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>(void)+15j
.text:000076DE                 pop     esi
.text:000076DF                 add     esp, 4
.text:000076E2                 cmp     ebp, esp
.text:000076E4                 call    __RTC_CheckEsp
.text:000076E9                 mov     esp, ebp
.text:000076EB                 pop     ebp
.text:000076EC                 retn
.text:000076EC ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ endp
.text:000076EC
.text:000076EC ; ---------------------------------------------------------------------------
.text:000076ED                 align 10h
.text:000076ED _text           ends
.text:000076ED
.text:000076F0 ; ===========================================================================
.text:000076F0
.text:000076F0 ; Segment type: Pure code
.text:000076F0 ; Segment permissions: Read/Execute
.text:000076F0 _text           segment para public 'CODE' use32
.text:000076F0                 assume cs:_text
.text:000076F0                 ;org 76F0h
.text:000076F0 ; COMDAT (pick any)
.text:000076F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000076F0
.text:000076F0 ; =============== S U B R O U T I N E =======================================
.text:000076F0
.text:000076F0 ; Attributes: bp-based frame
.text:000076F0
.text:000076F0 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:000076F0                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:000076F0 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:000076F0                                         ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(void)+11p
.text:000076F0                                         ; CObjectVector<CArc>::CObjectVector<CArc>(void)+11p ...
.text:000076F0
.text:000076F0 var_4           = dword ptr -4
.text:000076F0
.text:000076F0                 push    ebp
.text:000076F1                 mov     ebp, esp
.text:000076F3                 push    ecx
.text:000076F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000076FB                 mov     [ebp+var_4], ecx
.text:000076FE                 mov     eax, [ebp+var_4]
.text:00007701                 mov     dword ptr [eax], 0
.text:00007707                 mov     ecx, [ebp+var_4]
.text:0000770A                 mov     dword ptr [ecx+4], 0
.text:00007711                 mov     edx, [ebp+var_4]
.text:00007714                 mov     dword ptr [edx+8], 0
.text:0000771B                 mov     eax, [ebp+var_4]
.text:0000771E                 mov     esp, ebp
.text:00007720                 pop     ebp
.text:00007721                 retn
.text:00007721 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00007721
.text:00007721 ; ---------------------------------------------------------------------------
.text:00007722                 align 4
.text:00007722 _text           ends
.text:00007722
.text:00007724 ; ===========================================================================
.text:00007724
.text:00007724 ; Segment type: Pure code
.text:00007724 ; Segment permissions: Read/Execute
.text:00007724 _text           segment para public 'CODE' use32
.text:00007724                 assume cs:_text
.text:00007724                 ;org 7724h
.text:00007724 ; COMDAT (pick any)
.text:00007724                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007724
.text:00007724 ; =============== S U B R O U T I N E =======================================
.text:00007724
.text:00007724 ; Attributes: bp-based frame
.text:00007724
.text:00007724 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00007724                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00007724 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00007724                                         ; CODE XREF: CObjectVector<UString>::Size(void)+11p
.text:00007724                                         ; CObjectVector<UString>::~CObjectVector<UString>(void)+46p ...
.text:00007724
.text:00007724 var_4           = dword ptr -4
.text:00007724
.text:00007724                 push    ebp
.text:00007725                 mov     ebp, esp
.text:00007727                 push    ecx
.text:00007728                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000772F                 mov     [ebp+var_4], ecx
.text:00007732                 mov     eax, [ebp+var_4]
.text:00007735                 mov     eax, [eax+4]
.text:00007738                 mov     esp, ebp
.text:0000773A                 pop     ebp
.text:0000773B                 retn
.text:0000773B ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:0000773B
.text:0000773B _text           ends
.text:0000773B
.text:0000773C ; ===========================================================================
.text:0000773C
.text:0000773C ; Segment type: Pure code
.text:0000773C ; Segment permissions: Read/Execute
.text:0000773C _text           segment para public 'CODE' use32
.text:0000773C                 assume cs:_text
.text:0000773C                 ;org 773Ch
.text:0000773C ; COMDAT (pick any)
.text:0000773C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000773C
.text:0000773C ; =============== S U B R O U T I N E =======================================
.text:0000773C
.text:0000773C ; Attributes: bp-based frame
.text:0000773C
.text:0000773C ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000773C                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:0000773C ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000773C                                         ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+9Cp
.text:0000773C                                         ; __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0+3j ...
.text:0000773C
.text:0000773C var_8           = dword ptr -8
.text:0000773C var_4           = dword ptr -4
.text:0000773C
.text:0000773C                 push    ebp
.text:0000773D                 mov     ebp, esp
.text:0000773F                 sub     esp, 8
.text:00007742                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007749                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007750                 mov     [ebp+var_4], ecx
.text:00007753                 mov     eax, [ebp+var_4]
.text:00007756                 mov     ecx, [eax]
.text:00007758                 mov     [ebp+var_8], ecx
.text:0000775B                 mov     edx, [ebp+var_8]
.text:0000775E                 push    edx             ; void *
.text:0000775F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007764                 add     esp, 4
.text:00007767                 add     esp, 8
.text:0000776A                 cmp     ebp, esp
.text:0000776C                 call    __RTC_CheckEsp
.text:00007771                 mov     esp, ebp
.text:00007773                 pop     ebp
.text:00007774                 retn
.text:00007774 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00007774
.text:00007774 ; ---------------------------------------------------------------------------
.text:00007775                 align 4
.text:00007775 _text           ends
.text:00007775
.text:00007778 ; ===========================================================================
.text:00007778
.text:00007778 ; Segment type: Pure code
.text:00007778 ; Segment permissions: Read/Execute
.text:00007778 _text           segment para public 'CODE' use32
.text:00007778                 assume cs:_text
.text:00007778                 ;org 7778h
.text:00007778 ; COMDAT (pick any)
.text:00007778                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007778
.text:00007778 ; =============== S U B R O U T I N E =======================================
.text:00007778
.text:00007778 ; Attributes: bp-based frame
.text:00007778
.text:00007778 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:00007778                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:00007778 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00007778                                         ; CODE XREF: CObjectVector<CFieldInfo>::Clear(void)+6Fp
.text:00007778
.text:00007778 var_4           = dword ptr -4
.text:00007778
.text:00007778                 push    ebp
.text:00007779                 mov     ebp, esp
.text:0000777B                 push    ecx
.text:0000777C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007783                 mov     [ebp+var_4], ecx
.text:00007786                 mov     eax, [ebp+var_4]
.text:00007789                 mov     dword ptr [eax+4], 0
.text:00007790                 mov     esp, ebp
.text:00007792                 pop     ebp
.text:00007793                 retn
.text:00007793 ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:00007793
.text:00007793 _text           ends
.text:00007793
.text:00007794 ; ===========================================================================
.text:00007794
.text:00007794 ; Segment type: Pure code
.text:00007794 ; Segment permissions: Read/Execute
.text:00007794 _text           segment para public 'CODE' use32
.text:00007794                 assume cs:_text
.text:00007794                 ;org 7794h
.text:00007794 ; COMDAT (pick any)
.text:00007794                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007794
.text:00007794 ; =============== S U B R O U T I N E =======================================
.text:00007794
.text:00007794 ; Attributes: bp-based frame
.text:00007794
.text:00007794 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00007794                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00007794 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00007794                                         ; CODE XREF: CObjectVector<CFieldInfo>::Add(CFieldInfo const &)+7Fp
.text:00007794                                         ; CObjectVector<CFieldInfo>::AddNew(void)+84p
.text:00007794
.text:00007794 var_8           = dword ptr -8
.text:00007794 var_4           = dword ptr -4
.text:00007794 arg_0           = dword ptr  8
.text:00007794
.text:00007794                 push    ebp
.text:00007795                 mov     ebp, esp
.text:00007797                 sub     esp, 8
.text:0000779A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000077A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000077A8                 mov     [ebp+var_4], ecx
.text:000077AB                 mov     ecx, [ebp+var_4]
.text:000077AE                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:000077B3                 mov     eax, [ebp+var_4]
.text:000077B6                 mov     ecx, [eax+4]
.text:000077B9                 mov     edx, [ebp+var_4]
.text:000077BC                 mov     eax, [edx]
.text:000077BE                 mov     edx, [ebp+arg_0]
.text:000077C1                 mov     [eax+ecx*4], edx
.text:000077C4                 mov     eax, [ebp+var_4]
.text:000077C7                 mov     ecx, [eax+4]
.text:000077CA                 mov     [ebp+var_8], ecx
.text:000077CD                 mov     edx, [ebp+var_4]
.text:000077D0                 mov     eax, [edx+4]
.text:000077D3                 add     eax, 1
.text:000077D6                 mov     ecx, [ebp+var_4]
.text:000077D9                 mov     [ecx+4], eax
.text:000077DC                 mov     eax, [ebp+var_8]
.text:000077DF                 add     esp, 8
.text:000077E2                 cmp     ebp, esp
.text:000077E4                 call    __RTC_CheckEsp
.text:000077E9                 mov     esp, ebp
.text:000077EB                 pop     ebp
.text:000077EC                 retn    4
.text:000077EC ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:000077EC
.text:000077EC ; ---------------------------------------------------------------------------
.text:000077EF                 align 10h
.text:000077EF _text           ends
.text:000077EF
.text:000077F0 ; ===========================================================================
.text:000077F0
.text:000077F0 ; Segment type: Pure code
.text:000077F0 ; Segment permissions: Read/Execute
.text:000077F0 _text           segment para public 'CODE' use32
.text:000077F0                 assume cs:_text
.text:000077F0                 ;org 77F0h
.text:000077F0 ; COMDAT (pick any)
.text:000077F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000077F0
.text:000077F0 ; =============== S U B R O U T I N E =======================================
.text:000077F0
.text:000077F0 ; Attributes: bp-based frame
.text:000077F0
.text:000077F0 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:000077F0                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:000077F0 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:000077F0                                         ; CODE XREF: CObjectVector<CArcInfoEx>::operator[](uint)+15p
.text:000077F0                                         ; CObjectVector<CArc>::operator[](uint)+15p
.text:000077F0
.text:000077F0 var_4           = dword ptr -4
.text:000077F0 arg_0           = dword ptr  8
.text:000077F0
.text:000077F0                 push    ebp
.text:000077F1                 mov     ebp, esp
.text:000077F3                 push    ecx
.text:000077F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000077FB                 mov     [ebp+var_4], ecx
.text:000077FE                 mov     eax, [ebp+var_4]
.text:00007801                 mov     ecx, [eax]
.text:00007803                 mov     edx, [ebp+arg_0]
.text:00007806                 lea     eax, [ecx+edx*4]
.text:00007809                 mov     esp, ebp
.text:0000780B                 pop     ebp
.text:0000780C                 retn    4
.text:0000780C ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:0000780C
.text:0000780C ; ---------------------------------------------------------------------------
.text:0000780F                 align 10h
.text:0000780F _text           ends
.text:0000780F
.text:00007810 ; ===========================================================================
.text:00007810
.text:00007810 ; Segment type: Pure code
.text:00007810 ; Segment permissions: Read/Execute
.text:00007810 _text           segment para public 'CODE' use32
.text:00007810                 assume cs:_text
.text:00007810                 ;org 7810h
.text:00007810 ; COMDAT (pick any)
.text:00007810                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007810
.text:00007810 ; =============== S U B R O U T I N E =======================================
.text:00007810
.text:00007810 ; Attributes: bp-based frame
.text:00007810
.text:00007810 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00007810                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00007810 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00007810                                         ; CODE XREF: CObjectVector<UString>::operator[](uint)+15p
.text:00007810                                         ; CObjectVector<UString>::~CObjectVector<UString>(void)+64p ...
.text:00007810
.text:00007810 var_4           = dword ptr -4
.text:00007810 arg_0           = dword ptr  8
.text:00007810
.text:00007810                 push    ebp
.text:00007811                 mov     ebp, esp
.text:00007813                 push    ecx
.text:00007814                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000781B                 mov     [ebp+var_4], ecx
.text:0000781E                 mov     eax, [ebp+var_4]
.text:00007821                 mov     ecx, [eax]
.text:00007823                 mov     edx, [ebp+arg_0]
.text:00007826                 lea     eax, [ecx+edx*4]
.text:00007829                 mov     esp, ebp
.text:0000782B                 pop     ebp
.text:0000782C                 retn    4
.text:0000782C ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:0000782C
.text:0000782C ; ---------------------------------------------------------------------------
.text:0000782F                 align 10h
.text:0000782F _text           ends
.text:0000782F
.text:00007830 ; ===========================================================================
.text:00007830
.text:00007830 ; Segment type: Pure code
.text:00007830 ; Segment permissions: Read/Execute
.text:00007830 _text           segment para public 'CODE' use32
.text:00007830                 assume cs:_text
.text:00007830                 ;org 7830h
.text:00007830 ; COMDAT (pick any)
.text:00007830                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007830
.text:00007830 ; =============== S U B R O U T I N E =======================================
.text:00007830
.text:00007830 ; Attributes: bp-based frame
.text:00007830
.text:00007830 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00007830                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00007830 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00007830                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00007830
.text:00007830 var_14          = dword ptr -14h
.text:00007830 var_10          = dword ptr -10h
.text:00007830 Dst             = dword ptr -0Ch
.text:00007830 var_8           = dword ptr -8
.text:00007830 var_4           = dword ptr -4
.text:00007830
.text:00007830                 push    ebp
.text:00007831                 mov     ebp, esp
.text:00007833                 sub     esp, 14h
.text:00007836                 mov     eax, 0CCCCCCCCh
.text:0000783B                 mov     [ebp+var_14], eax
.text:0000783E                 mov     [ebp+var_10], eax
.text:00007841                 mov     [ebp+Dst], eax
.text:00007844                 mov     [ebp+var_8], eax
.text:00007847                 mov     [ebp+var_4], eax
.text:0000784A                 mov     [ebp+var_4], ecx
.text:0000784D                 mov     eax, [ebp+var_4]
.text:00007850                 mov     ecx, [ebp+var_4]
.text:00007853                 mov     edx, [eax+4]
.text:00007856                 cmp     edx, [ecx+8]
.text:00007859                 jnz     loc_78E4
.text:0000785F                 mov     eax, [ebp+var_4]
.text:00007862                 mov     ecx, [eax+8]
.text:00007865                 shr     ecx, 2
.text:00007868                 mov     edx, [ebp+var_4]
.text:0000786B                 mov     eax, [edx+8]
.text:0000786E                 lea     ecx, [eax+ecx+1]
.text:00007872                 mov     [ebp+var_8], ecx
.text:00007875                 xor     ecx, ecx
.text:00007877                 mov     eax, [ebp+var_8]
.text:0000787A                 mov     edx, 4
.text:0000787F                 mul     edx
.text:00007881                 seto    cl
.text:00007884                 neg     ecx
.text:00007886                 or      ecx, eax
.text:00007888                 push    ecx             ; unsigned int
.text:00007889                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000788E                 add     esp, 4
.text:00007891                 mov     [ebp+var_10], eax
.text:00007894                 mov     eax, [ebp+var_10]
.text:00007897                 mov     [ebp+Dst], eax
.text:0000789A                 mov     ecx, [ebp+var_4]
.text:0000789D                 cmp     dword ptr [ecx+4], 0
.text:000078A1                 jz      short loc_78BF
.text:000078A3                 mov     edx, [ebp+var_4]
.text:000078A6                 mov     eax, [edx+4]
.text:000078A9                 shl     eax, 2
.text:000078AC                 push    eax             ; Size
.text:000078AD                 mov     ecx, [ebp+var_4]
.text:000078B0                 mov     edx, [ecx]
.text:000078B2                 push    edx             ; Src
.text:000078B3                 mov     eax, [ebp+Dst]
.text:000078B6                 push    eax             ; Dst
.text:000078B7                 call    _memcpy
.text:000078BC                 add     esp, 0Ch
.text:000078BF
.text:000078BF loc_78BF:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:000078BF                 mov     ecx, [ebp+var_4]
.text:000078C2                 mov     edx, [ecx]
.text:000078C4                 mov     [ebp+var_14], edx
.text:000078C7                 mov     eax, [ebp+var_14]
.text:000078CA                 push    eax             ; void *
.text:000078CB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000078D0                 add     esp, 4
.text:000078D3                 mov     ecx, [ebp+var_4]
.text:000078D6                 mov     edx, [ebp+Dst]
.text:000078D9                 mov     [ecx], edx
.text:000078DB                 mov     eax, [ebp+var_4]
.text:000078DE                 mov     ecx, [ebp+var_8]
.text:000078E1                 mov     [eax+8], ecx
.text:000078E4
.text:000078E4 loc_78E4:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:000078E4                 add     esp, 14h
.text:000078E7                 cmp     ebp, esp
.text:000078E9                 call    __RTC_CheckEsp
.text:000078EE                 mov     esp, ebp
.text:000078F0                 pop     ebp
.text:000078F1                 retn
.text:000078F1 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:000078F1
.text:000078F1 _text           ends
.text:000078F1
UNDEF:00007900 ; ===========================================================================
UNDEF:00007900
UNDEF:00007900 ; Segment type: Externs
UNDEF:00007900 ; UNDEF
UNDEF:00007900 ; void __thiscall AString::Add_Space(AString *__hidden this)
UNDEF:00007900                 extrn ?Add_Space@AString@@QAEXXZ:near
UNDEF:00007900                                         ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+D0p
UNDEF:00007904 ; public: class AString & __thiscall AString::operator=(char const *)
UNDEF:00007904                 extrn ??4AString@@QAEAAV0@PBD@Z:near
UNDEF:00007904                                         ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+78p
UNDEF:00007904                                         ; GetPropName(ulong,wchar_t const *,AString &,UString &)+3Ep ...
UNDEF:00007908                 extrn __RTC_CheckEsp:near
UNDEF:00007908                                         ; CODE XREF: CFieldPrinter::Init(CFieldInfoInit const *,uint)+10Dp
UNDEF:00007908                                         ; CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+15Ap ...
UNDEF:0000790C                 extrn __RTC_Shutdown:near
UNDEF:0000790C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00007910                 extrn __RTC_InitBase:near
UNDEF:00007910                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00007914 ; void __thiscall AString::Grow_1(AString *__hidden this)
UNDEF:00007914                 extrn ?Grow_1@AString@@AAEXXZ:near
UNDEF:00007914                                         ; CODE XREF: AString::operator+=(char)+2Fp
UNDEF:00007918 ; public: class AString & __thiscall AString::operator=(class AString const &)
UNDEF:00007918                 extrn ??4AString@@QAEAAV0@ABV0@@Z:near
UNDEF:00007918                                         ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+10Cp
UNDEF:0000791C ; public: __thiscall AString::AString(void)
UNDEF:0000791C                 extrn ??0AString@@QAE@XZ:near
UNDEF:0000791C                                         ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+A1p
UNDEF:0000791C                                         ; CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+114p ...
UNDEF:00007920 ; public: class AString & __thiscall AString::operator+=(char const *)
UNDEF:00007920                 extrn ??YAString@@QAEAAV0@PBD@Z:near
UNDEF:00007920                                         ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+8Ep
UNDEF:00007920                                         ; CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+148p
UNDEF:00007924 ; void __thiscall UString::AddAscii(UString *__hidden this, const char *)
UNDEF:00007924                 extrn ?AddAscii@UString@@QAEXPBD@Z:near
UNDEF:00007924                                         ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+72p
UNDEF:00007928                 extrn ___security_cookie:near
UNDEF:00007928                                         ; DATA XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+26r
UNDEF:00007928                                         ; GetPropName(ulong,wchar_t const *,AString &,UString &)+20r ...
UNDEF:0000792C                 extrn ___CxxFrameHandler3:near
UNDEF:0000792C                                         ; CODE XREF: __ehhandler$?AddProp@CFieldPrinter@@AAEXPB_WK_N@Z+16j
UNDEF:0000792C                                         ; __ehhandler$?AddMainProps@CFieldPrinter@@QAEJPAUIInArchive@@@Z+16j ...
UNDEF:00007930 ; __fastcall __security_check_cookie(x)
UNDEF:00007930                 extrn @__security_check_cookie@4:near
UNDEF:00007930                                         ; CODE XREF: GetPropName(ulong,wchar_t const *,AString &,UString &)+88p
UNDEF:00007930                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+7D4p ...
UNDEF:00007934 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00007934                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00007934                                         ; CODE XREF: CFieldPrinter::AddProp(wchar_t const *,ulong,bool)+142p
UNDEF:00007934                                         ; GetPropName(ulong,wchar_t const *,AString &,UString &)+7Cp ...
UNDEF:00007938 ; void __cdecl operator delete(void *)
UNDEF:00007938                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:00007938                                         ; UString::~UString(void)+23p ...
UNDEF:0000793C ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:0000793C                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:0000793C                                         ; CODE XREF: GetPropName(ulong,wchar_t const *,AString &,UString &)+61p
UNDEF:0000793C                                         ; PrintPropName_and_Eq(CStdOutStream &,ulong)+4Ap
UNDEF:00007940 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:00007940                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:00007940                                         ; CODE XREF: GetPropName(ulong,wchar_t const *,AString &,UString &)+52p
UNDEF:00007944 ; public: __thiscall UString::UString(void)
UNDEF:00007944                 extrn ??0UString@@QAE@XZ:near
UNDEF:00007944                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+297p
UNDEF:00007944                                         ; PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)+38p ...
UNDEF:00007948 ; void __stdcall SysFreeString(BSTR bstrString)
UNDEF:00007948                 extrn __imp__SysFreeString@4:near
UNDEF:00007948                                         ; CODE XREF: CMyComBSTR::~CMyComBSTR(void)+17p
UNDEF:00007948                                         ; DATA XREF: CMyComBSTR::~CMyComBSTR(void)+17r
UNDEF:0000794C ; CStdOutStream g_StdOut
UNDEF:0000794C                 extrn ?g_StdOut@@3VCStdOutStream@@A:near
UNDEF:0000794C                                         ; DATA XREF: PrintSpaces(uint)+1Eo
UNDEF:0000794C                                         ; PrintString(EAdjustment,uint,char const *)+8Eo ...
UNDEF:00007950 ; int __cdecl _fputs(const char *Str, FILE *File)
UNDEF:00007950                 extrn __imp__fputs:near ; CODE XREF: CStdOutStream::operator<<(char const *)+1Bp
UNDEF:00007950                                         ; DATA XREF: CStdOutStream::operator<<(char const *)+1Br
UNDEF:00007954 ; size_t __cdecl strlen(const char *Str)
UNDEF:00007954                 extrn _strlen:near      ; CODE XREF: PrintString(EAdjustment,uint,char const *)+22p
UNDEF:00007954                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+543p ...
UNDEF:00007958 ; void __stdcall ConvertPropertyToShortString(char *, const struct tagPROPVARIANT *, unsigned __int32, bool)
UNDEF:00007958                 extrn ?ConvertPropertyToShortString@@YGXPADABUtagPROPVARIANT@@K_N@Z:near
UNDEF:00007958                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+6FFp
UNDEF:0000795C ; void __thiscall UString::SetFromBstr(UString *__hidden this, wchar_t *)
UNDEF:0000795C                 extrn ?SetFromBstr@UString@@QAEXPA_W@Z:near
UNDEF:0000795C                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+693p
UNDEF:00007960 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(struct _FILETIME const &)
UNDEF:00007960                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z:near
UNDEF:00007960                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+418p
UNDEF:00007964 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:00007964                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:00007964                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+3D0p
UNDEF:00007964                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+3F6p
UNDEF:00007968 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(unsigned int)
UNDEF:00007968                 extrn ??6CStdOutStream@@QAEAAV0@I@Z:near
UNDEF:00007968                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+341p
UNDEF:0000796C ; bool __stdcall ConvertNtReparseToString(const unsigned __int8 *, unsigned int, struct UString *)
UNDEF:0000796C                 extrn ?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z:near
UNDEF:0000796C                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+2B8p
UNDEF:00007970 ; void __stdcall ConvertNtSecureToString(const unsigned __int8 *, unsigned int, struct AString *)
UNDEF:00007970                 extrn ?ConvertNtSecureToString@@YGXPBEIAAVAString@@@Z:near
UNDEF:00007970                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+262p
UNDEF:00007974 ; NConsoleClose endl
UNDEF:00007974                 extrn ?endl@@YGAAVCStdOutStream@@AAV1@@Z:near
UNDEF:00007974                                         ; DATA XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+179o
UNDEF:00007974                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+78Co ...
UNDEF:00007978 ; void __thiscall CStdOutStream::PrintUString(CStdOutStream *__hidden this, const struct UString *, struct AString *)
UNDEF:00007978                 extrn ?PrintUString@CStdOutStream@@QAEXABVUString@@AAVAString@@@Z:near
UNDEF:00007978                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+169p
UNDEF:00007978                                         ; CFieldPrinter::PrintItemInfo(uint,CListStat const &)+2DEp ...
UNDEF:0000797C ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(wchar_t const *)
UNDEF:0000797C                 extrn ??6CStdOutStream@@QAEAAV0@PB_W@Z:near
UNDEF:0000797C                                         ; CODE XREF: CFieldPrinter::PrintItemInfo(uint,CListStat const &)+12Ap
UNDEF:0000797C                                         ; PrintPropPair(CStdOutStream &,char const *,wchar_t const *)+26p ...
UNDEF:00007980 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00007980                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00007980                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00007984 ; void __stdcall ConvertWinAttribToString(char *, unsigned int)
UNDEF:00007984                 extrn ?ConvertWinAttribToString@@YGXPADI@Z:near
UNDEF:00007984                                         ; CODE XREF: GetAttribString(uint,bool,bool,char *)+24p
UNDEF:00007988 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00007988                 extrn _memcpy:near      ; CODE XREF: PrintStringToString(char *,EAdjustment,uint,char const *)+A3p
UNDEF:00007988                                         ; CRecordVector<void *>::ReserveOnePosition(void)+87p
UNDEF:0000798C ; bool __stdcall ConvertFileTimeToString(const struct _FILETIME *, char *, bool, bool)
UNDEF:0000798C                 extrn ?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z:near
UNDEF:0000798C                                         ; CODE XREF: PrintTime(char *,_FILETIME const *)+70p
UNDEF:00007990 ; BOOL __stdcall FileTimeToLocalFileTime(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime)
UNDEF:00007990                 extrn __imp__FileTimeToLocalFileTime@8:near
UNDEF:00007990                                         ; CODE XREF: PrintTime(char *,_FILETIME const *)+3Ep
UNDEF:00007990                                         ; DATA XREF: PrintTime(char *,_FILETIME const *)+3Er
UNDEF:00007994 ; __stdcall _CxxThrowException(x, x)
UNDEF:00007994                 extrn __CxxThrowException@8:near
UNDEF:00007994                                         ; CODE XREF: PrintTime(char *,_FILETIME const *)+5Fp
UNDEF:00007994                                         ; ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+99p
UNDEF:00007998 ; const type_info::`vftable'
UNDEF:00007998                 extrn ??_7type_info@@6B@:near
UNDEF:00007998                                         ; DATA XREF: .data:int `RTTI Type Descriptor'o
UNDEF:00007998                                         ; .data:COpenCallbackConsole `RTTI Type Descriptor'o ...
UNDEF:0000799C ; void __stdcall Print_UInt64_and_String(struct AString *, unsigned __int64, const char *)
UNDEF:0000799C                 extrn ?Print_UInt64_and_String@@YGXAAVAString@@_KPBD@Z:near
UNDEF:0000799C                                         ; CODE XREF: CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+133p
UNDEF:0000799C                                         ; CFieldPrinter::PrintSum(CListStat const &,unsigned __int64,char const *)+15Fp
UNDEF:000079A0 ; void __stdcall ConvertUInt64ToString(unsigned __int64, char *)
UNDEF:000079A0                 extrn ?ConvertUInt64ToString@@YGX_KPAD@Z:near
UNDEF:000079A0                                         ; CODE XREF: PrintNumber(EAdjustment,uint,CListUInt64Def const &)+3Dp
UNDEF:000079A4 ; LONG __stdcall CompareFileTime(const FILETIME *lpFileTime1, const FILETIME *lpFileTime2)
UNDEF:000079A4                 extrn __imp__CompareFileTime@8:near
UNDEF:000079A4                                         ; CODE XREF: CListFileTimeDef::Update(CListFileTimeDef const &)+2Fp
UNDEF:000079A4                                         ; DATA XREF: CListFileTimeDef::Update(CListFileTimeDef const &)+2Fr
UNDEF:000079A8 ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:000079A8                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:000079A8                                         ; CODE XREF: Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)+E9p
UNDEF:000079AC ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(unsigned __int64)
UNDEF:000079AC                 extrn ??6CStdOutStream@@QAEAAV0@_K@Z:near
UNDEF:000079AC                                         ; CODE XREF: PrintPropNameAndNumber(CStdOutStream &,ulong,unsigned __int64)+20p
UNDEF:000079AC                                         ; PrintPropNameAndNumber(CStdOutStream &,char const *,unsigned __int64)+2Ap
UNDEF:000079B0 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(__int64)
UNDEF:000079B0                 extrn ??6CStdOutStream@@QAEAAV0@_J@Z:near
UNDEF:000079B0                                         ; CODE XREF: PrintPropNameAndNumber_Signed(CStdOutStream &,ulong,__int64)+20p
UNDEF:000079B4 ; void __stdcall ConvertPropertyToString(struct UString *, const struct tagPROPVARIANT *, unsigned __int32, bool)
UNDEF:000079B4                 extrn ?ConvertPropertyToString@@YGXAAVUString@@ABUtagPROPVARIANT@@K_N@Z:near
UNDEF:000079B4                                         ; CODE XREF: PrintPropertyPair2(CStdOutStream &,ulong,wchar_t const *,NWindows::NCOM::CPropVariant const &)+52p
UNDEF:000079B8 ; void __stdcall PrintErrorFlags(struct CStdOutStream *, const char *, unsigned int)
UNDEF:000079B8                 extrn ?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z:near
UNDEF:000079B8                                         ; CODE XREF: ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)+15p
UNDEF:000079B8                                         ; ErrorInfo_Print(CStdOutStream &,CArcErrorInfo const &)+58p
UNDEF:000079BC ; public: bool __thiscall NWildcard::CCensorNode::CheckPathVect(class CObjectVector<class UString> const &, bool, bool &)const
UNDEF:000079BC                 extrn ?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z:near
UNDEF:000079BC                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1113p
UNDEF:000079C0 ; void __stdcall SplitPathToParts(class UString const &, class CObjectVector<class UString> &)
UNDEF:000079C0                 extrn ?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z:near
UNDEF:000079C0                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+10F0p
UNDEF:000079C4 ; bool __stdcall CensorNode_CheckPath(const struct NWildcard::CCensorNode *, const struct CReadArcItem *)
UNDEF:000079C4                 extrn ?CensorNode_CheckPath@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@@Z:near
UNDEF:000079C4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+10D2p
UNDEF:000079C8 ; __int32 __thiscall CArc::GetItem(CArc *__hidden this, unsigned int, struct CReadArcItem *)
UNDEF:000079C8                 extrn ?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z:near
UNDEF:000079C8                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+102Fp
UNDEF:000079CC ; __int32 __stdcall Archive_IsItem_Dir(struct IInArchive *, unsigned int, bool *)
UNDEF:000079CC                 extrn ?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z:near
UNDEF:000079CC                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+F68p
UNDEF:000079D0 ; __int32 __stdcall Archive_IsItem_AltStream(struct IInArchive *, unsigned int, bool *)
UNDEF:000079D0                 extrn ?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z:near
UNDEF:000079D0                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+EA6p
UNDEF:000079D4 ; __int32 __stdcall Archive_IsItem_Aux(struct IInArchive *, unsigned int, bool *)
UNDEF:000079D4                 extrn ?Archive_IsItem_Aux@@YGJPAUIInArchive@@IAA_N@Z:near
UNDEF:000079D4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+DCDp
UNDEF:000079D8 ; __int32 __thiscall CArc::GetItemPath2(CArc *__hidden this, unsigned int, struct UString *)
UNDEF:000079D8                 extrn ?GetItemPath2@CArc@@QBEJIAAVUString@@@Z:near
UNDEF:000079D8                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+CE6p
UNDEF:000079DC ; int __stdcall Find_FileName_InSortedVector(class CObjectVector<class UString> const &, class UString const &)
UNDEF:000079DC                 extrn ?Find_FileName_InSortedVector@@YGHABV?$CObjectVector@VUString@@@@ABVUString@@@Z:near
UNDEF:000079DC                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+8CEp
UNDEF:000079E0 ; __int32 __thiscall CArchiveLink::Open3(CArchiveLink *__hidden this, struct COpenOptions *, struct IOpenCallbackUI *)
UNDEF:000079E0                 extrn ?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z:near
UNDEF:000079E0                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+4ECp
UNDEF:000079E4 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:000079E4                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:000079E4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+42Cp
UNDEF:000079E4                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+484p
UNDEF:000079E8 ; struct CStdOutStream *g_ErrStream
UNDEF:000079E8                 extrn ?g_ErrStream@@3PAVCStdOutStream@@A:near
UNDEF:000079E8                                         ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+288r
UNDEF:000079E8                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+33Dr ...
UNDEF:000079EC ; struct UString __stdcall __high NWindows::NError::MyFormatMessage(unsigned __int32)
UNDEF:000079EC                 extrn ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z:near
UNDEF:000079EC                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+255p
UNDEF:000079EC                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+626p
UNDEF:000079F0 ; bool __thiscall CStdOutStream::Flush(CStdOutStream *__hidden this)
UNDEF:000079F0                 extrn ?Flush@CStdOutStream@@QAE_NXZ:near
UNDEF:000079F0                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+227p
UNDEF:000079F0                                         ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+311p ...
UNDEF:000079F4 ; DWORD __stdcall GetLastError()
UNDEF:000079F4                 extrn __imp__GetLastError@0:near
UNDEF:000079F4                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1EAp
UNDEF:000079F4                                         ; DATA XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1EAr
UNDEF:000079F8 ; bool __thiscall NWindows::NFile::NFind::CFileInfo::Find(NWindows::NFile::NFind::CFileInfo *__hidden this, const wchar_t *)
UNDEF:000079F8                 extrn ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z:near
UNDEF:000079F8                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+1D8p
UNDEF:000079FC ; bool __thiscall NWildcard::CCensorNode::AreAllAllowed(NWildcard::CCensorNode *__hidden this)
UNDEF:000079FC                 extrn ?AreAllAllowed@CCensorNode@NWildcard@@QBE_NXZ:near
UNDEF:000079FC                                         ; CODE XREF: ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)+3Fp
UNDEF:00007A00 ; void __thiscall NWindows::NFile::NFind::CFileInfoBase::ClearBase(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
UNDEF:00007A00                 extrn ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ:near
UNDEF:00007A00                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(void)+11p
UNDEF:00007A04 ; void __thiscall CArchiveLink::Release(CArchiveLink *__hidden this)
UNDEF:00007A04                 extrn ?Release@CArchiveLink@@QAEXXZ:near
UNDEF:00007A04                                         ; CODE XREF: CArchiveLink::~CArchiveLink(void)+37p
UNDEF:00007A08 ; unsigned int NConsoleClose::g_BreakCounter
UNDEF:00007A08                 extrn ?g_BreakCounter@NConsoleClose@@3IA:near
UNDEF:00007A08                                         ; DATA XREF: NConsoleClose::TestBreakSignal(void)+5r
UNDEF:00007A0C ; _DWORD __thiscall CPercentPrinter::~CPercentPrinter(CPercentPrinter *__hidden this)
UNDEF:00007A0C                 extrn ??1CPercentPrinter@@QAE@XZ:near
UNDEF:00007A0C                                         ; CODE XREF: __unwindfunclet$??0COpenCallbackConsole@@QAE@XZ$0+6j
UNDEF:00007A0C                                         ; COpenCallbackConsole::~COpenCallbackConsole(void)+4Fp ...
UNDEF:00007A10 ; public: virtual long __thiscall COpenCallbackConsole::Open_CheckBreak(void)
UNDEF:00007A10                 extrn ?Open_CheckBreak@COpenCallbackConsole@@UAEJXZ:near
UNDEF:00007A10                                         ; DATA XREF: .rdata:const COpenCallbackConsole::`vftable'o
UNDEF:00007A14 ; public: virtual long __thiscall COpenCallbackConsole::Open_SetTotal(unsigned __int64 const *, unsigned __int64 const *)
UNDEF:00007A14                 extrn ?Open_SetTotal@COpenCallbackConsole@@UAEJPB_K0@Z:near
UNDEF:00007A14                                         ; DATA XREF: .rdata:00005DE0o
UNDEF:00007A18 ; public: virtual long __thiscall COpenCallbackConsole::Open_SetCompleted(unsigned __int64 const *, unsigned __int64 const *)
UNDEF:00007A18                 extrn ?Open_SetCompleted@COpenCallbackConsole@@UAEJPB_K0@Z:near
UNDEF:00007A18                                         ; DATA XREF: .rdata:00005DE4o
UNDEF:00007A1C ; public: virtual long __thiscall COpenCallbackConsole::Open_Finished(void)
UNDEF:00007A1C                 extrn ?Open_Finished@COpenCallbackConsole@@UAEJXZ:near
UNDEF:00007A1C                                         ; DATA XREF: .rdata:00005DE8o
UNDEF:00007A20 ; public: virtual long __thiscall COpenCallbackConsole::Open_CryptoGetTextPassword(wchar_t * *)
UNDEF:00007A20                 extrn ?Open_CryptoGetTextPassword@COpenCallbackConsole@@UAEJPAPA_W@Z:near
UNDEF:00007A20                                         ; DATA XREF: .rdata:00005DECo
UNDEF:00007A24                 extrn __purecall:near   ; DATA XREF: .rdata:const IOpenCallbackUI::`vftable'o
UNDEF:00007A24                                         ; .rdata:00006288o ...
UNDEF:00007A28 ; void *__cdecl operator new(unsigned int)
UNDEF:00007A28                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CObjectVector<CFieldInfo>::Add(CFieldInfo const &)+3Bp
UNDEF:00007A28                                         ; CObjectVector<CFieldInfo>::AddNew(void)+3Ep ...
UNDEF:00007A2C ; public: __thiscall AString::AString(class AString const &)
UNDEF:00007A2C                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:00007A2C                                         ; CODE XREF: CFieldInfo::CFieldInfo(CFieldInfo const &)+69p
UNDEF:00007A30 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00007A30                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00007A30                                         ; CODE XREF: CFieldInfo::CFieldInfo(CFieldInfo const &)+50p
UNDEF:00007A30
UNDEF:00007A30
UNDEF:00007A30                 end