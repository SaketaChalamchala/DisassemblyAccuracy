.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 313D36D16FC56FCFF0ED16DEE534D6A7
.text:00000000 ; Input CRC32 : BBBFE74F
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\XzCrc64.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __fastcall Crc64Update(x, x, x, x)
.text:00000000                 public @Crc64Update@16
.text:00000000 @Crc64Update@16 proc near
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 push    esi
.text:00000007                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000015                 mov     [ebp+var_8], edx
.text:00000018                 mov     [ebp+var_4], ecx
.text:0000001B                 mov     esi, esp
.text:0000001D                 push    offset _g_Crc64Table
.text:00000022                 mov     eax, [ebp+arg_4]
.text:00000025                 push    eax
.text:00000026                 mov     ecx, [ebp+arg_0]
.text:00000029                 push    ecx
.text:0000002A                 mov     edx, [ebp+var_8]
.text:0000002D                 mov     ecx, [ebp+var_4]
.text:00000030                 call    ds:_g_Crc64Update
.text:00000036                 cmp     esi, esp
.text:00000038                 call    __RTC_CheckEsp
.text:0000003D                 pop     esi
.text:0000003E                 add     esp, 8
.text:00000041                 cmp     ebp, esp
.text:00000043                 call    __RTC_CheckEsp
.text:00000048                 mov     esp, ebp
.text:0000004A                 pop     ebp
.text:0000004B                 retn    8
.text:0000004B @Crc64Update@16 endp
.text:0000004B
.text:0000004B ; ---------------------------------------------------------------------------
.text:0000004E                 align 10h
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; __fastcall Crc64Calc(x, x)
.text:00000050                 public @Crc64Calc@8
.text:00000050 @Crc64Calc@8    proc near
.text:00000050
.text:00000050 var_8           = dword ptr -8
.text:00000050 var_4           = dword ptr -4
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 sub     esp, 8
.text:00000056                 push    esi
.text:00000057                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000005E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000065                 mov     [ebp+var_8], edx
.text:00000068                 mov     [ebp+var_4], ecx
.text:0000006B                 mov     esi, esp
.text:0000006D                 push    offset _g_Crc64Table
.text:00000072                 push    0FFFFFFFFh
.text:00000074                 push    0FFFFFFFFh
.text:00000076                 mov     edx, [ebp+var_8]
.text:00000079                 mov     ecx, [ebp+var_4]
.text:0000007C                 call    ds:_g_Crc64Update
.text:00000082                 cmp     esi, esp
.text:00000084                 call    __RTC_CheckEsp
.text:00000089                 xor     eax, 0FFFFFFFFh
.text:0000008C                 xor     edx, 0FFFFFFFFh
.text:0000008F                 pop     esi
.text:00000090                 add     esp, 8
.text:00000093                 cmp     ebp, esp
.text:00000095                 call    __RTC_CheckEsp
.text:0000009A                 mov     esp, ebp
.text:0000009C                 pop     ebp
.text:0000009D                 retn
.text:0000009D @Crc64Calc@8    endp
.text:0000009D
.text:0000009D ; ---------------------------------------------------------------------------
.text:0000009E                 align 10h
.text:000000A0
.text:000000A0 ; =============== S U B R O U T I N E =======================================
.text:000000A0
.text:000000A0 ; Attributes: bp-based frame
.text:000000A0
.text:000000A0 ; _DWORD __cdecl Crc64GenerateTable()
.text:000000A0                 public @Crc64GenerateTable@0
.text:000000A0 @Crc64GenerateTable@0 proc near
.text:000000A0
.text:000000A0 var_18          = dword ptr -18h
.text:000000A0 var_14          = dword ptr -14h
.text:000000A0 var_10          = dword ptr -10h
.text:000000A0 var_C           = dword ptr -0Ch
.text:000000A0 var_8           = dword ptr -8
.text:000000A0 var_4           = dword ptr -4
.text:000000A0
.text:000000A0                 push    ebp
.text:000000A1                 mov     ebp, esp
.text:000000A3                 sub     esp, 18h
.text:000000A6                 push    esi
.text:000000A7                 mov     eax, 0CCCCCCCCh
.text:000000AC                 mov     [ebp+var_18], eax
.text:000000AF                 mov     [ebp+var_14], eax
.text:000000B2                 mov     [ebp+var_10], eax
.text:000000B5                 mov     [ebp+var_C], eax
.text:000000B8                 mov     [ebp+var_8], eax
.text:000000BB                 mov     [ebp+var_4], eax
.text:000000BE                 mov     [ebp+var_4], 0
.text:000000C5                 jmp     short loc_D0
.text:000000C7 ; ---------------------------------------------------------------------------
.text:000000C7
.text:000000C7 loc_C7:                                 ; CODE XREF: Crc64GenerateTable()+AEj
.text:000000C7                 mov     eax, [ebp+var_4]
.text:000000CA                 add     eax, 1
.text:000000CD                 mov     [ebp+var_4], eax
.text:000000D0
.text:000000D0 loc_D0:                                 ; CODE XREF: Crc64GenerateTable()+25j
.text:000000D0                 cmp     [ebp+var_4], 100h
.text:000000D7                 jnb     short loc_153
.text:000000D9                 mov     ecx, [ebp+var_4]
.text:000000DC                 xor     edx, edx
.text:000000DE                 mov     [ebp+var_C], ecx
.text:000000E1                 mov     [ebp+var_8], edx
.text:000000E4                 mov     [ebp+var_10], 0
.text:000000EB                 jmp     short loc_F6
.text:000000ED ; ---------------------------------------------------------------------------
.text:000000ED
.text:000000ED loc_ED:                                 ; CODE XREF: Crc64GenerateTable()+95j
.text:000000ED                 mov     eax, [ebp+var_10]
.text:000000F0                 add     eax, 1
.text:000000F3                 mov     [ebp+var_10], eax
.text:000000F6
.text:000000F6 loc_F6:                                 ; CODE XREF: Crc64GenerateTable()+4Bj
.text:000000F6                 cmp     [ebp+var_10], 8
.text:000000FA                 jnb     short loc_137
.text:000000FC                 mov     eax, [ebp+var_C]
.text:000000FF                 mov     edx, [ebp+var_8]
.text:00000102                 mov     cl, 1
.text:00000104                 call    __aullshr
.text:00000109                 mov     ecx, [ebp+var_C]
.text:0000010C                 and     ecx, 1
.text:0000010F                 mov     esi, [ebp+var_8]
.text:00000112                 and     esi, 0
.text:00000115                 sub     ecx, 1
.text:00000118                 sbb     esi, 0
.text:0000011B                 not     ecx
.text:0000011D                 not     esi
.text:0000011F                 and     ecx, 0D7870F42h
.text:00000125                 and     esi, 0C96C5795h
.text:0000012B                 xor     eax, ecx
.text:0000012D                 xor     edx, esi
.text:0000012F                 mov     [ebp+var_C], eax
.text:00000132                 mov     [ebp+var_8], edx
.text:00000135                 jmp     short loc_ED
.text:00000137 ; ---------------------------------------------------------------------------
.text:00000137
.text:00000137 loc_137:                                ; CODE XREF: Crc64GenerateTable()+5Aj
.text:00000137                 mov     edx, [ebp+var_4]
.text:0000013A                 mov     eax, [ebp+var_C]
.text:0000013D                 mov     dword ptr ds:_g_Crc64Table[edx*8], eax
.text:00000144                 mov     ecx, [ebp+var_8]
.text:00000147                 mov     dword ptr ds:(_g_Crc64Table+4)[edx*8], ecx
.text:0000014E                 jmp     loc_C7
.text:00000153 ; ---------------------------------------------------------------------------
.text:00000153
.text:00000153 loc_153:                                ; CODE XREF: Crc64GenerateTable()+37j
.text:00000153                 jmp     short loc_15E
.text:00000155 ; ---------------------------------------------------------------------------
.text:00000155
.text:00000155 loc_155:                                ; CODE XREF: Crc64GenerateTable()+123j
.text:00000155                 mov     edx, [ebp+var_4]
.text:00000158                 add     edx, 1
.text:0000015B                 mov     [ebp+var_4], edx
.text:0000015E
.text:0000015E loc_15E:                                ; CODE XREF: Crc64GenerateTable():loc_153j
.text:0000015E                 cmp     [ebp+var_4], 400h
.text:00000165                 jnb     short loc_1C5
.text:00000167                 mov     eax, [ebp+var_4]
.text:0000016A                 mov     ecx, dword ptr (_g_Crc64Table-800h)[eax*8]
.text:00000171                 mov     [ebp+var_18], ecx
.text:00000174                 mov     edx, dword ptr (_g_Crc64Table-7FCh)[eax*8]
.text:0000017B                 mov     [ebp+var_14], edx
.text:0000017E                 mov     eax, [ebp+var_18]
.text:00000181                 and     eax, 0FFh
.text:00000186                 mov     ecx, [ebp+var_14]
.text:00000189                 and     ecx, 0
.text:0000018C                 push    0
.text:0000018E                 push    8
.text:00000190                 push    ecx
.text:00000191                 push    eax
.text:00000192                 call    __allmul
.text:00000197                 mov     esi, eax
.text:00000199                 mov     eax, [ebp+var_18]
.text:0000019C                 mov     edx, [ebp+var_14]
.text:0000019F                 mov     cl, 8
.text:000001A1                 call    __aullshr
.text:000001A6                 xor     eax, dword ptr ds:_g_Crc64Table[esi]
.text:000001AC                 xor     edx, dword ptr ds:(_g_Crc64Table+4)[esi]
.text:000001B2                 mov     ecx, [ebp+var_4]
.text:000001B5                 mov     dword ptr ds:_g_Crc64Table[ecx*8], eax
.text:000001BC                 mov     dword ptr ds:(_g_Crc64Table+4)[ecx*8], edx
.text:000001C3                 jmp     short loc_155
.text:000001C5 ; ---------------------------------------------------------------------------
.text:000001C5
.text:000001C5 loc_1C5:                                ; CODE XREF: Crc64GenerateTable()+C5j
.text:000001C5                 mov     ds:_g_Crc64Update, offset @XzCrc64UpdateT4@20 ; XzCrc64UpdateT4(x,x,x,x,x)
.text:000001CF                 pop     esi
.text:000001D0                 add     esp, 18h
.text:000001D3                 cmp     ebp, esp
.text:000001D5                 call    __RTC_CheckEsp
.text:000001DA                 mov     esp, ebp
.text:000001DC                 pop     ebp
.text:000001DD                 retn
.text:000001DD @Crc64GenerateTable@0 endp
.text:000001DD
.text:000001DD ; ---------------------------------------------------------------------------
.text:000001DE                 align 10h
.text:000001DE _text           ends
.text:000001DE
.bss:000001E0 ; ===========================================================================
.bss:000001E0
.bss:000001E0 ; Segment type: Uninitialized
.bss:000001E0 ; Segment permissions: Read/Write
.bss:000001E0 _bss            segment dword public 'BSS' use32
.bss:000001E0                 assume cs:_bss
.bss:000001E0                 ;org 1E0h
.bss:000001E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.bss:000001E0 _g_Crc64Update  dd ?                    ; DATA XREF: Crc64Update(x,x,x,x)+30r
.bss:000001E0                                         ; Crc64Calc(x,x)+2Cr ...
.bss:000001E0 _bss            ends
.bss:000001E0
.rtc$TMZ:000001E4 ; ===========================================================================
.rtc$TMZ:000001E4
.rtc$TMZ:000001E4 ; Segment type: Pure data
.rtc$TMZ:000001E4 ; Segment permissions: Read
.rtc$TMZ:000001E4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000001E4                 assume cs:_rtc$TMZ
.rtc$TMZ:000001E4                 ;org 1E4h
.rtc$TMZ:000001E4 ; COMDAT (pick any)
.rtc$TMZ:000001E4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000001E4 _rtc$TMZ        ends
.rtc$TMZ:000001E4
.rtc$IMZ:000001E8 ; ===========================================================================
.rtc$IMZ:000001E8
.rtc$IMZ:000001E8 ; Segment type: Pure data
.rtc$IMZ:000001E8 ; Segment permissions: Read
.rtc$IMZ:000001E8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000001E8                 assume cs:_rtc$IMZ
.rtc$IMZ:000001E8                 ;org 1E8h
.rtc$IMZ:000001E8 ; COMDAT (pick any)
.rtc$IMZ:000001E8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000001E8 _rtc$IMZ        ends
.rtc$IMZ:000001E8
UNDEF:000001F0 ; ===========================================================================
UNDEF:000001F0
UNDEF:000001F0 ; Segment type: Externs
UNDEF:000001F0 ; UNDEF
UNDEF:000001F0                 extrn _g_Crc64Table:near
UNDEF:000001F0                                         ; DATA XREF: Crc64Update(x,x,x,x)+1Do
UNDEF:000001F0                                         ; Crc64Calc(x,x)+1Do ...
UNDEF:000001F4                 extrn __RTC_CheckEsp:near
UNDEF:000001F4                                         ; CODE XREF: Crc64Update(x,x,x,x)+38p
UNDEF:000001F4                                         ; Crc64Update(x,x,x,x)+43p ...
UNDEF:000001F8                 extrn __RTC_Shutdown:near
UNDEF:000001F8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000001FC                 extrn __RTC_InitBase:near
UNDEF:000001FC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000200 ; __fastcall XzCrc64UpdateT4(x, x, x, x, x)
UNDEF:00000200                 extrn @XzCrc64UpdateT4@20:near
UNDEF:00000200                                         ; DATA XREF: Crc64GenerateTable():loc_1C5o
UNDEF:00000204                 extrn __allmul:near     ; CODE XREF: Crc64GenerateTable()+F2p
UNDEF:00000208                 extrn __aullshr:near    ; CODE XREF: Crc64GenerateTable()+64p
UNDEF:00000208                                         ; Crc64GenerateTable()+101p
UNDEF:00000208
UNDEF:00000208
UNDEF:00000208                 end