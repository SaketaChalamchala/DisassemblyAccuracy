.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : DCA772C4004C9FB52C155F2694077BAC
.text:00000000 ; Input CRC32 : CF65F65C
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Sort.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall HeapSort(x, x)
.text:00000000                 public _HeapSort@8
.text:00000000 _HeapSort@8     proc near
.text:00000000
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 20h
.text:00000006                 push    esi
.text:00000007                 mov     eax, 0CCCCCCCCh
.text:0000000C                 mov     [ebp+var_20], eax
.text:0000000F                 mov     [ebp+var_1C], eax
.text:00000012                 mov     [ebp+var_18], eax
.text:00000015                 mov     [ebp+var_14], eax
.text:00000018                 mov     [ebp+var_10], eax
.text:0000001B                 mov     [ebp+var_C], eax
.text:0000001E                 mov     [ebp+var_8], eax
.text:00000021                 mov     [ebp+var_4], eax
.text:00000024                 cmp     [ebp+arg_4], 1
.text:00000028                 ja      short loc_2F
.text:0000002A                 jmp     loc_1E1
.text:0000002F ; ---------------------------------------------------------------------------
.text:0000002F
.text:0000002F loc_2F:                                 ; CODE XREF: HeapSort(x,x)+28j
.text:0000002F                 mov     eax, [ebp+arg_0]
.text:00000032                 sub     eax, 4
.text:00000035                 mov     [ebp+arg_0], eax
.text:00000038                 mov     ecx, [ebp+arg_4]
.text:0000003B                 shr     ecx, 1
.text:0000003D                 mov     [ebp+var_4], ecx
.text:00000040
.text:00000040 loc_40:                                 ; CODE XREF: HeapSort(x,x)+C9j
.text:00000040                 mov     edx, [ebp+var_4]
.text:00000043                 mov     eax, [ebp+arg_0]
.text:00000046                 mov     ecx, [eax+edx*4]
.text:00000049                 mov     [ebp+var_8], ecx
.text:0000004C                 mov     edx, [ebp+var_4]
.text:0000004F                 mov     [ebp+var_C], edx
.text:00000052
.text:00000052 loc_52:                                 ; CODE XREF: HeapSort(x,x)+B2j
.text:00000052                 mov     eax, [ebp+var_C]
.text:00000055                 shl     eax, 1
.text:00000057                 mov     [ebp+var_10], eax
.text:0000005A                 mov     ecx, [ebp+var_10]
.text:0000005D                 cmp     ecx, [ebp+arg_4]
.text:00000060                 jbe     short loc_64
.text:00000062                 jmp     short loc_B4
.text:00000064 ; ---------------------------------------------------------------------------
.text:00000064
.text:00000064 loc_64:                                 ; CODE XREF: HeapSort(x,x)+60j
.text:00000064                 mov     edx, [ebp+var_10]
.text:00000067                 cmp     edx, [ebp+arg_4]
.text:0000006A                 jnb     short loc_8A
.text:0000006C                 mov     eax, [ebp+var_10]
.text:0000006F                 mov     ecx, [ebp+arg_0]
.text:00000072                 mov     edx, [ebp+var_10]
.text:00000075                 mov     esi, [ebp+arg_0]
.text:00000078                 mov     eax, [ecx+eax*4+4]
.text:0000007C                 cmp     eax, [esi+edx*4]
.text:0000007F                 jbe     short loc_8A
.text:00000081                 mov     ecx, [ebp+var_10]
.text:00000084                 add     ecx, 1
.text:00000087                 mov     [ebp+var_10], ecx
.text:0000008A
.text:0000008A loc_8A:                                 ; CODE XREF: HeapSort(x,x)+6Aj
.text:0000008A                                         ; HeapSort(x,x)+7Fj
.text:0000008A                 mov     edx, [ebp+var_10]
.text:0000008D                 mov     eax, [ebp+arg_0]
.text:00000090                 mov     ecx, [ebp+var_8]
.text:00000093                 cmp     ecx, [eax+edx*4]
.text:00000096                 jb      short loc_9A
.text:00000098                 jmp     short loc_B4
.text:0000009A ; ---------------------------------------------------------------------------
.text:0000009A
.text:0000009A loc_9A:                                 ; CODE XREF: HeapSort(x,x)+96j
.text:0000009A                 mov     edx, [ebp+var_C]
.text:0000009D                 mov     eax, [ebp+arg_0]
.text:000000A0                 mov     ecx, [ebp+var_10]
.text:000000A3                 mov     esi, [ebp+arg_0]
.text:000000A6                 mov     ecx, [esi+ecx*4]
.text:000000A9                 mov     [eax+edx*4], ecx
.text:000000AC                 mov     edx, [ebp+var_10]
.text:000000AF                 mov     [ebp+var_C], edx
.text:000000B2                 jmp     short loc_52
.text:000000B4 ; ---------------------------------------------------------------------------
.text:000000B4
.text:000000B4 loc_B4:                                 ; CODE XREF: HeapSort(x,x)+62j
.text:000000B4                                         ; HeapSort(x,x)+98j
.text:000000B4                 mov     eax, [ebp+var_C]
.text:000000B7                 mov     ecx, [ebp+arg_0]
.text:000000BA                 mov     edx, [ebp+var_8]
.text:000000BD                 mov     [ecx+eax*4], edx
.text:000000C0                 mov     eax, [ebp+var_4]
.text:000000C3                 sub     eax, 1
.text:000000C6                 mov     [ebp+var_4], eax
.text:000000C9                 jnz     loc_40
.text:000000CF
.text:000000CF loc_CF:                                 ; CODE XREF: HeapSort(x,x)+190j
.text:000000CF                 cmp     [ebp+arg_4], 3
.text:000000D3                 jbe     loc_195
.text:000000D9                 mov     ecx, [ebp+arg_4]
.text:000000DC                 mov     edx, [ebp+arg_0]
.text:000000DF                 mov     eax, [edx+ecx*4]
.text:000000E2                 mov     [ebp+var_14], eax
.text:000000E5                 mov     ecx, [ebp+arg_0]
.text:000000E8                 mov     edx, [ebp+arg_0]
.text:000000EB                 mov     eax, [ecx+0Ch]
.text:000000EE                 cmp     [edx+8], eax
.text:000000F1                 sbb     ecx, ecx
.text:000000F3                 neg     ecx
.text:000000F5                 add     ecx, 2
.text:000000F8                 mov     [ebp+var_18], ecx
.text:000000FB                 mov     edx, [ebp+arg_4]
.text:000000FE                 mov     eax, [ebp+arg_0]
.text:00000101                 mov     ecx, [ebp+arg_0]
.text:00000104                 mov     ecx, [ecx+4]
.text:00000107                 mov     [eax+edx*4], ecx
.text:0000010A                 mov     edx, [ebp+arg_4]
.text:0000010D                 sub     edx, 1
.text:00000110                 mov     [ebp+arg_4], edx
.text:00000113                 mov     eax, [ebp+arg_0]
.text:00000116                 mov     ecx, [ebp+var_18]
.text:00000119                 mov     edx, [ebp+arg_0]
.text:0000011C                 mov     ecx, [edx+ecx*4]
.text:0000011F                 mov     [eax+4], ecx
.text:00000122
.text:00000122 loc_122:                                ; CODE XREF: HeapSort(x,x)+182j
.text:00000122                 mov     edx, [ebp+var_18]
.text:00000125                 shl     edx, 1
.text:00000127                 mov     [ebp+var_1C], edx
.text:0000012A                 mov     eax, [ebp+var_1C]
.text:0000012D                 cmp     eax, [ebp+arg_4]
.text:00000130                 jbe     short loc_134
.text:00000132                 jmp     short loc_184
.text:00000134 ; ---------------------------------------------------------------------------
.text:00000134
.text:00000134 loc_134:                                ; CODE XREF: HeapSort(x,x)+130j
.text:00000134                 mov     ecx, [ebp+var_1C]
.text:00000137                 cmp     ecx, [ebp+arg_4]
.text:0000013A                 jnb     short loc_15A
.text:0000013C                 mov     edx, [ebp+var_1C]
.text:0000013F                 mov     eax, [ebp+arg_0]
.text:00000142                 mov     ecx, [ebp+var_1C]
.text:00000145                 mov     esi, [ebp+arg_0]
.text:00000148                 mov     edx, [eax+edx*4+4]
.text:0000014C                 cmp     edx, [esi+ecx*4]
.text:0000014F                 jbe     short loc_15A
.text:00000151                 mov     eax, [ebp+var_1C]
.text:00000154                 add     eax, 1
.text:00000157                 mov     [ebp+var_1C], eax
.text:0000015A
.text:0000015A loc_15A:                                ; CODE XREF: HeapSort(x,x)+13Aj
.text:0000015A                                         ; HeapSort(x,x)+14Fj
.text:0000015A                 mov     ecx, [ebp+var_1C]
.text:0000015D                 mov     edx, [ebp+arg_0]
.text:00000160                 mov     eax, [ebp+var_14]
.text:00000163                 cmp     eax, [edx+ecx*4]
.text:00000166                 jb      short loc_16A
.text:00000168                 jmp     short loc_184
.text:0000016A ; ---------------------------------------------------------------------------
.text:0000016A
.text:0000016A loc_16A:                                ; CODE XREF: HeapSort(x,x)+166j
.text:0000016A                 mov     ecx, [ebp+var_18]
.text:0000016D                 mov     edx, [ebp+arg_0]
.text:00000170                 mov     eax, [ebp+var_1C]
.text:00000173                 mov     esi, [ebp+arg_0]
.text:00000176                 mov     eax, [esi+eax*4]
.text:00000179                 mov     [edx+ecx*4], eax
.text:0000017C                 mov     ecx, [ebp+var_1C]
.text:0000017F                 mov     [ebp+var_18], ecx
.text:00000182                 jmp     short loc_122
.text:00000184 ; ---------------------------------------------------------------------------
.text:00000184
.text:00000184 loc_184:                                ; CODE XREF: HeapSort(x,x)+132j
.text:00000184                                         ; HeapSort(x,x)+168j
.text:00000184                 mov     edx, [ebp+var_18]
.text:00000187                 mov     eax, [ebp+arg_0]
.text:0000018A                 mov     ecx, [ebp+var_14]
.text:0000018D                 mov     [eax+edx*4], ecx
.text:00000190                 jmp     loc_CF
.text:00000195 ; ---------------------------------------------------------------------------
.text:00000195
.text:00000195 loc_195:                                ; CODE XREF: HeapSort(x,x)+D3j
.text:00000195                 mov     edx, [ebp+arg_4]
.text:00000198                 mov     eax, [ebp+arg_0]
.text:0000019B                 mov     ecx, [eax+edx*4]
.text:0000019E                 mov     [ebp+var_20], ecx
.text:000001A1                 mov     edx, [ebp+arg_4]
.text:000001A4                 mov     eax, [ebp+arg_0]
.text:000001A7                 mov     ecx, [ebp+arg_0]
.text:000001AA                 mov     ecx, [ecx+4]
.text:000001AD                 mov     [eax+edx*4], ecx
.text:000001B0                 cmp     [ebp+arg_4], 2
.text:000001B4                 jbe     short loc_1D8
.text:000001B6                 mov     edx, [ebp+arg_0]
.text:000001B9                 mov     eax, [edx+8]
.text:000001BC                 cmp     eax, [ebp+var_20]
.text:000001BF                 jnb     short loc_1D8
.text:000001C1                 mov     ecx, [ebp+arg_0]
.text:000001C4                 mov     edx, [ebp+arg_0]
.text:000001C7                 mov     eax, [edx+8]
.text:000001CA                 mov     [ecx+4], eax
.text:000001CD                 mov     ecx, [ebp+arg_0]
.text:000001D0                 mov     edx, [ebp+var_20]
.text:000001D3                 mov     [ecx+8], edx
.text:000001D6                 jmp     short loc_1E1
.text:000001D8 ; ---------------------------------------------------------------------------
.text:000001D8
.text:000001D8 loc_1D8:                                ; CODE XREF: HeapSort(x,x)+1B4j
.text:000001D8                                         ; HeapSort(x,x)+1BFj
.text:000001D8                 mov     eax, [ebp+arg_0]
.text:000001DB                 mov     ecx, [ebp+var_20]
.text:000001DE                 mov     [eax+4], ecx
.text:000001E1
.text:000001E1 loc_1E1:                                ; CODE XREF: HeapSort(x,x)+2Aj
.text:000001E1                                         ; HeapSort(x,x)+1D6j
.text:000001E1                 pop     esi
.text:000001E2                 mov     esp, ebp
.text:000001E4                 pop     ebp
.text:000001E5                 retn    8
.text:000001E5 _HeapSort@8     endp
.text:000001E5
.text:000001E5 ; ---------------------------------------------------------------------------
.text:000001E8                 align 10h
.text:000001F0
.text:000001F0 ; =============== S U B R O U T I N E =======================================
.text:000001F0
.text:000001F0 ; Attributes: bp-based frame
.text:000001F0
.text:000001F0 ; __stdcall HeapSort64(x, x)
.text:000001F0                 public _HeapSort64@8
.text:000001F0 _HeapSort64@8   proc near
.text:000001F0
.text:000001F0 var_6C          = dword ptr -6Ch
.text:000001F0 var_68          = dword ptr -68h
.text:000001F0 var_64          = dword ptr -64h
.text:000001F0 var_60          = dword ptr -60h
.text:000001F0 var_5C          = dword ptr -5Ch
.text:000001F0 var_58          = dword ptr -58h
.text:000001F0 var_54          = dword ptr -54h
.text:000001F0 var_50          = dword ptr -50h
.text:000001F0 var_4C          = dword ptr -4Ch
.text:000001F0 var_48          = dword ptr -48h
.text:000001F0 var_44          = dword ptr -44h
.text:000001F0 var_40          = dword ptr -40h
.text:000001F0 var_3C          = dword ptr -3Ch
.text:000001F0 var_38          = dword ptr -38h
.text:000001F0 var_34          = dword ptr -34h
.text:000001F0 var_30          = dword ptr -30h
.text:000001F0 var_2C          = dword ptr -2Ch
.text:000001F0 var_28          = dword ptr -28h
.text:000001F0 var_24          = dword ptr -24h
.text:000001F0 var_20          = dword ptr -20h
.text:000001F0 var_1C          = dword ptr -1Ch
.text:000001F0 var_18          = dword ptr -18h
.text:000001F0 var_14          = dword ptr -14h
.text:000001F0 var_10          = dword ptr -10h
.text:000001F0 var_C           = dword ptr -0Ch
.text:000001F0 var_8           = dword ptr -8
.text:000001F0 var_4           = dword ptr -4
.text:000001F0 arg_0           = dword ptr  8
.text:000001F0 arg_4           = dword ptr  0Ch
.text:000001F0
.text:000001F0                 push    ebp
.text:000001F1                 mov     ebp, esp
.text:000001F3                 sub     esp, 6Ch
.text:000001F6                 push    esi
.text:000001F7                 push    edi
.text:000001F8                 lea     edi, [ebp+var_6C]
.text:000001FB                 mov     ecx, 1Bh
.text:00000200                 mov     eax, 0CCCCCCCCh
.text:00000205                 rep stosd
.text:00000207                 cmp     [ebp+arg_4], 1
.text:0000020B                 ja      short loc_212
.text:0000020D                 jmp     loc_501
.text:00000212 ; ---------------------------------------------------------------------------
.text:00000212
.text:00000212 loc_212:                                ; CODE XREF: HeapSort64(x,x)+1Bj
.text:00000212                 mov     eax, [ebp+arg_0]
.text:00000215                 sub     eax, 8
.text:00000218                 mov     [ebp+arg_0], eax
.text:0000021B                 mov     ecx, [ebp+arg_4]
.text:0000021E                 shr     ecx, 1
.text:00000220                 mov     [ebp+var_4], ecx
.text:00000223
.text:00000223 loc_223:                                ; CODE XREF: HeapSort64(x,x)+125j
.text:00000223                 mov     edx, [ebp+var_4]
.text:00000226                 mov     eax, [ebp+arg_0]
.text:00000229                 mov     ecx, [eax+edx*8]
.text:0000022C                 mov     [ebp+var_C], ecx
.text:0000022F                 mov     edx, [eax+edx*8+4]
.text:00000233                 mov     [ebp+var_8], edx
.text:00000236                 mov     eax, [ebp+var_4]
.text:00000239                 mov     [ebp+var_10], eax
.text:0000023C
.text:0000023C loc_23C:                                ; CODE XREF: HeapSort64(x,x)+104j
.text:0000023C                 mov     ecx, [ebp+var_10]
.text:0000023F                 shl     ecx, 1
.text:00000241                 mov     [ebp+var_14], ecx
.text:00000244                 mov     edx, [ebp+var_14]
.text:00000247                 cmp     edx, [ebp+arg_4]
.text:0000024A                 jbe     short loc_251
.text:0000024C                 jmp     loc_2F9
.text:00000251 ; ---------------------------------------------------------------------------
.text:00000251
.text:00000251 loc_251:                                ; CODE XREF: HeapSort64(x,x)+5Aj
.text:00000251                 mov     eax, [ebp+var_14]
.text:00000254                 cmp     eax, [ebp+arg_4]
.text:00000257                 jnb     short loc_2A7
.text:00000259                 mov     ecx, [ebp+var_14]
.text:0000025C                 mov     edx, [ebp+arg_0]
.text:0000025F                 mov     eax, [ebp+var_14]
.text:00000262                 mov     esi, [ebp+arg_0]
.text:00000265                 mov     [ebp+var_30], edx
.text:00000268                 mov     [ebp+var_34], ecx
.text:0000026B                 mov     [ebp+var_38], esi
.text:0000026E                 mov     [ebp+var_3C], eax
.text:00000271                 mov     ecx, [ebp+var_34]
.text:00000274                 mov     edx, [ebp+var_30]
.text:00000277                 mov     eax, [ebp+var_3C]
.text:0000027A                 mov     esi, [ebp+var_38]
.text:0000027D                 mov     ecx, [edx+ecx*8+0Ch]
.text:00000281                 cmp     ecx, [esi+eax*8+4]
.text:00000285                 jb      short loc_2A7
.text:00000287                 ja      short loc_29E
.text:00000289                 mov     edx, [ebp+var_34]
.text:0000028C                 mov     eax, [ebp+var_30]
.text:0000028F                 mov     ecx, [ebp+var_3C]
.text:00000292                 mov     esi, [ebp+var_38]
.text:00000295                 mov     edx, [eax+edx*8+8]
.text:00000299                 cmp     edx, [esi+ecx*8]
.text:0000029C                 jbe     short loc_2A7
.text:0000029E
.text:0000029E loc_29E:                                ; CODE XREF: HeapSort64(x,x)+97j
.text:0000029E                 mov     eax, [ebp+var_14]
.text:000002A1                 add     eax, 1
.text:000002A4                 mov     [ebp+var_14], eax
.text:000002A7
.text:000002A7 loc_2A7:                                ; CODE XREF: HeapSort64(x,x)+67j
.text:000002A7                                         ; HeapSort64(x,x)+95j ...
.text:000002A7                 mov     ecx, [ebp+var_14]
.text:000002AA                 mov     edx, [ebp+arg_0]
.text:000002AD                 mov     [ebp+var_40], edx
.text:000002B0                 mov     [ebp+var_44], ecx
.text:000002B3                 mov     eax, [ebp+var_44]
.text:000002B6                 mov     ecx, [ebp+var_40]
.text:000002B9                 mov     edx, [ebp+var_8]
.text:000002BC                 cmp     edx, [ecx+eax*8+4]
.text:000002C0                 jb      short loc_2D4
.text:000002C2                 ja      short loc_2D2
.text:000002C4                 mov     eax, [ebp+var_44]
.text:000002C7                 mov     ecx, [ebp+var_40]
.text:000002CA                 mov     edx, [ebp+var_C]
.text:000002CD                 cmp     edx, [ecx+eax*8]
.text:000002D0                 jb      short loc_2D4
.text:000002D2
.text:000002D2 loc_2D2:                                ; CODE XREF: HeapSort64(x,x)+D2j
.text:000002D2                 jmp     short loc_2F9
.text:000002D4 ; ---------------------------------------------------------------------------
.text:000002D4
.text:000002D4 loc_2D4:                                ; CODE XREF: HeapSort64(x,x)+D0j
.text:000002D4                                         ; HeapSort64(x,x)+E0j
.text:000002D4                 mov     eax, [ebp+var_10]
.text:000002D7                 mov     ecx, [ebp+arg_0]
.text:000002DA                 mov     edx, [ebp+var_14]
.text:000002DD                 mov     esi, [ebp+arg_0]
.text:000002E0                 mov     edi, [esi+edx*8]
.text:000002E3                 mov     [ecx+eax*8], edi
.text:000002E6                 mov     edx, [esi+edx*8+4]
.text:000002EA                 mov     [ecx+eax*8+4], edx
.text:000002EE                 mov     eax, [ebp+var_14]
.text:000002F1                 mov     [ebp+var_10], eax
.text:000002F4                 jmp     loc_23C
.text:000002F9 ; ---------------------------------------------------------------------------
.text:000002F9
.text:000002F9 loc_2F9:                                ; CODE XREF: HeapSort64(x,x)+5Cj
.text:000002F9                                         ; HeapSort64(x,x):loc_2D2j
.text:000002F9                 mov     ecx, [ebp+var_10]
.text:000002FC                 mov     edx, [ebp+arg_0]
.text:000002FF                 mov     eax, [ebp+var_C]
.text:00000302                 mov     [edx+ecx*8], eax
.text:00000305                 mov     eax, [ebp+var_8]
.text:00000308                 mov     [edx+ecx*8+4], eax
.text:0000030C                 mov     ecx, [ebp+var_4]
.text:0000030F                 sub     ecx, 1
.text:00000312                 mov     [ebp+var_4], ecx
.text:00000315                 jnz     loc_223
.text:0000031B
.text:0000031B loc_31B:                                ; CODE XREF: HeapSort64(x,x)+28Dj
.text:0000031B                 cmp     [ebp+arg_4], 3
.text:0000031F                 jbe     loc_482
.text:00000325                 mov     edx, [ebp+arg_4]
.text:00000328                 mov     eax, [ebp+arg_0]
.text:0000032B                 mov     ecx, [eax+edx*8]
.text:0000032E                 mov     [ebp+var_1C], ecx
.text:00000331                 mov     edx, [eax+edx*8+4]
.text:00000335                 mov     [ebp+var_18], edx
.text:00000338                 mov     eax, [ebp+arg_0]
.text:0000033B                 mov     ecx, [ebp+arg_0]
.text:0000033E                 mov     [ebp+var_48], eax
.text:00000341                 mov     [ebp+var_4C], ecx
.text:00000344                 mov     edx, [ebp+var_48]
.text:00000347                 mov     eax, [ebp+var_4C]
.text:0000034A                 mov     ecx, [edx+1Ch]
.text:0000034D                 cmp     ecx, [eax+14h]
.text:00000350                 jb      short loc_36B
.text:00000352                 ja      short loc_362
.text:00000354                 mov     edx, [ebp+var_48]
.text:00000357                 mov     eax, [ebp+var_4C]
.text:0000035A                 mov     ecx, [edx+18h]
.text:0000035D                 cmp     ecx, [eax+10h]
.text:00000360                 jbe     short loc_36B
.text:00000362
.text:00000362 loc_362:                                ; CODE XREF: HeapSort64(x,x)+162j
.text:00000362                 mov     [ebp+var_50], 3
.text:00000369                 jmp     short loc_372
.text:0000036B ; ---------------------------------------------------------------------------
.text:0000036B
.text:0000036B loc_36B:                                ; CODE XREF: HeapSort64(x,x)+160j
.text:0000036B                                         ; HeapSort64(x,x)+170j
.text:0000036B                 mov     [ebp+var_50], 2
.text:00000372
.text:00000372 loc_372:                                ; CODE XREF: HeapSort64(x,x)+179j
.text:00000372                 mov     edx, [ebp+var_50]
.text:00000375                 mov     [ebp+var_20], edx
.text:00000378                 mov     eax, [ebp+arg_4]
.text:0000037B                 mov     ecx, [ebp+arg_0]
.text:0000037E                 mov     edx, [ebp+arg_0]
.text:00000381                 mov     esi, [edx+8]
.text:00000384                 mov     [ecx+eax*8], esi
.text:00000387                 mov     edx, [edx+0Ch]
.text:0000038A                 mov     [ecx+eax*8+4], edx
.text:0000038E                 mov     eax, [ebp+arg_4]
.text:00000391                 sub     eax, 1
.text:00000394                 mov     [ebp+arg_4], eax
.text:00000397                 mov     ecx, [ebp+arg_0]
.text:0000039A                 mov     edx, [ebp+var_20]
.text:0000039D                 mov     eax, [ebp+arg_0]
.text:000003A0                 mov     esi, [eax+edx*8]
.text:000003A3                 mov     [ecx+8], esi
.text:000003A6                 mov     edx, [eax+edx*8+4]
.text:000003AA                 mov     [ecx+0Ch], edx
.text:000003AD
.text:000003AD loc_3AD:                                ; CODE XREF: HeapSort64(x,x)+275j
.text:000003AD                 mov     eax, [ebp+var_20]
.text:000003B0                 shl     eax, 1
.text:000003B2                 mov     [ebp+var_24], eax
.text:000003B5                 mov     ecx, [ebp+var_24]
.text:000003B8                 cmp     ecx, [ebp+arg_4]
.text:000003BB                 jbe     short loc_3C2
.text:000003BD                 jmp     loc_46A
.text:000003C2 ; ---------------------------------------------------------------------------
.text:000003C2
.text:000003C2 loc_3C2:                                ; CODE XREF: HeapSort64(x,x)+1CBj
.text:000003C2                 mov     edx, [ebp+var_24]
.text:000003C5                 cmp     edx, [ebp+arg_4]
.text:000003C8                 jnb     short loc_418
.text:000003CA                 mov     eax, [ebp+var_24]
.text:000003CD                 mov     ecx, [ebp+arg_0]
.text:000003D0                 mov     edx, [ebp+var_24]
.text:000003D3                 mov     esi, [ebp+arg_0]
.text:000003D6                 mov     [ebp+var_54], ecx
.text:000003D9                 mov     [ebp+var_58], eax
.text:000003DC                 mov     [ebp+var_5C], esi
.text:000003DF                 mov     [ebp+var_60], edx
.text:000003E2                 mov     eax, [ebp+var_58]
.text:000003E5                 mov     ecx, [ebp+var_54]
.text:000003E8                 mov     edx, [ebp+var_60]
.text:000003EB                 mov     esi, [ebp+var_5C]
.text:000003EE                 mov     eax, [ecx+eax*8+0Ch]
.text:000003F2                 cmp     eax, [esi+edx*8+4]
.text:000003F6                 jb      short loc_418
.text:000003F8                 ja      short loc_40F
.text:000003FA                 mov     ecx, [ebp+var_58]
.text:000003FD                 mov     edx, [ebp+var_54]
.text:00000400                 mov     eax, [ebp+var_60]
.text:00000403                 mov     esi, [ebp+var_5C]
.text:00000406                 mov     ecx, [edx+ecx*8+8]
.text:0000040A                 cmp     ecx, [esi+eax*8]
.text:0000040D                 jbe     short loc_418
.text:0000040F
.text:0000040F loc_40F:                                ; CODE XREF: HeapSort64(x,x)+208j
.text:0000040F                 mov     edx, [ebp+var_24]
.text:00000412                 add     edx, 1
.text:00000415                 mov     [ebp+var_24], edx
.text:00000418
.text:00000418 loc_418:                                ; CODE XREF: HeapSort64(x,x)+1D8j
.text:00000418                                         ; HeapSort64(x,x)+206j ...
.text:00000418                 mov     eax, [ebp+var_24]
.text:0000041B                 mov     ecx, [ebp+arg_0]
.text:0000041E                 mov     [ebp+var_64], ecx
.text:00000421                 mov     [ebp+var_68], eax
.text:00000424                 mov     edx, [ebp+var_68]
.text:00000427                 mov     eax, [ebp+var_64]
.text:0000042A                 mov     ecx, [ebp+var_18]
.text:0000042D                 cmp     ecx, [eax+edx*8+4]
.text:00000431                 jb      short loc_445
.text:00000433                 ja      short loc_443
.text:00000435                 mov     edx, [ebp+var_68]
.text:00000438                 mov     eax, [ebp+var_64]
.text:0000043B                 mov     ecx, [ebp+var_1C]
.text:0000043E                 cmp     ecx, [eax+edx*8]
.text:00000441                 jb      short loc_445
.text:00000443
.text:00000443 loc_443:                                ; CODE XREF: HeapSort64(x,x)+243j
.text:00000443                 jmp     short loc_46A
.text:00000445 ; ---------------------------------------------------------------------------
.text:00000445
.text:00000445 loc_445:                                ; CODE XREF: HeapSort64(x,x)+241j
.text:00000445                                         ; HeapSort64(x,x)+251j
.text:00000445                 mov     edx, [ebp+var_20]
.text:00000448                 mov     eax, [ebp+arg_0]
.text:0000044B                 mov     ecx, [ebp+var_24]
.text:0000044E                 mov     esi, [ebp+arg_0]
.text:00000451                 mov     edi, [esi+ecx*8]
.text:00000454                 mov     [eax+edx*8], edi
.text:00000457                 mov     ecx, [esi+ecx*8+4]
.text:0000045B                 mov     [eax+edx*8+4], ecx
.text:0000045F                 mov     edx, [ebp+var_24]
.text:00000462                 mov     [ebp+var_20], edx
.text:00000465                 jmp     loc_3AD
.text:0000046A ; ---------------------------------------------------------------------------
.text:0000046A
.text:0000046A loc_46A:                                ; CODE XREF: HeapSort64(x,x)+1CDj
.text:0000046A                                         ; HeapSort64(x,x):loc_443j
.text:0000046A                 mov     eax, [ebp+var_20]
.text:0000046D                 mov     ecx, [ebp+arg_0]
.text:00000470                 mov     edx, [ebp+var_1C]
.text:00000473                 mov     [ecx+eax*8], edx
.text:00000476                 mov     edx, [ebp+var_18]
.text:00000479                 mov     [ecx+eax*8+4], edx
.text:0000047D                 jmp     loc_31B
.text:00000482 ; ---------------------------------------------------------------------------
.text:00000482
.text:00000482 loc_482:                                ; CODE XREF: HeapSort64(x,x)+12Fj
.text:00000482                 mov     eax, [ebp+arg_4]
.text:00000485                 mov     ecx, [ebp+arg_0]
.text:00000488                 mov     edx, [ecx+eax*8]
.text:0000048B                 mov     [ebp+var_2C], edx
.text:0000048E                 mov     eax, [ecx+eax*8+4]
.text:00000492                 mov     [ebp+var_28], eax
.text:00000495                 mov     ecx, [ebp+arg_4]
.text:00000498                 mov     edx, [ebp+arg_0]
.text:0000049B                 mov     eax, [ebp+arg_0]
.text:0000049E                 mov     esi, [eax+8]
.text:000004A1                 mov     [edx+ecx*8], esi
.text:000004A4                 mov     eax, [eax+0Ch]
.text:000004A7                 mov     [edx+ecx*8+4], eax
.text:000004AB                 cmp     [ebp+arg_4], 2
.text:000004AF                 jbe     short loc_4F2
.text:000004B1                 mov     ecx, [ebp+arg_0]
.text:000004B4                 mov     [ebp+var_6C], ecx
.text:000004B7                 mov     edx, [ebp+var_6C]
.text:000004BA                 mov     eax, [edx+14h]
.text:000004BD                 cmp     eax, [ebp+var_28]
.text:000004C0                 ja      short loc_4F2
.text:000004C2                 jb      short loc_4CF
.text:000004C4                 mov     ecx, [ebp+var_6C]
.text:000004C7                 mov     edx, [ecx+10h]
.text:000004CA                 cmp     edx, [ebp+var_2C]
.text:000004CD                 jnb     short loc_4F2
.text:000004CF
.text:000004CF loc_4CF:                                ; CODE XREF: HeapSort64(x,x)+2D2j
.text:000004CF                 mov     eax, [ebp+arg_0]
.text:000004D2                 mov     ecx, [ebp+arg_0]
.text:000004D5                 mov     edx, [ecx+10h]
.text:000004D8                 mov     [eax+8], edx
.text:000004DB                 mov     ecx, [ecx+14h]
.text:000004DE                 mov     [eax+0Ch], ecx
.text:000004E1                 mov     edx, [ebp+arg_0]
.text:000004E4                 mov     eax, [ebp+var_2C]
.text:000004E7                 mov     [edx+10h], eax
.text:000004EA                 mov     ecx, [ebp+var_28]
.text:000004ED                 mov     [edx+14h], ecx
.text:000004F0                 jmp     short loc_501
.text:000004F2 ; ---------------------------------------------------------------------------
.text:000004F2
.text:000004F2 loc_4F2:                                ; CODE XREF: HeapSort64(x,x)+2BFj
.text:000004F2                                         ; HeapSort64(x,x)+2D0j ...
.text:000004F2                 mov     edx, [ebp+arg_0]
.text:000004F5                 mov     eax, [ebp+var_2C]
.text:000004F8                 mov     [edx+8], eax
.text:000004FB                 mov     ecx, [ebp+var_28]
.text:000004FE                 mov     [edx+0Ch], ecx
.text:00000501
.text:00000501 loc_501:                                ; CODE XREF: HeapSort64(x,x)+1Dj
.text:00000501                                         ; HeapSort64(x,x)+300j
.text:00000501                 pop     edi
.text:00000502                 pop     esi
.text:00000503                 mov     esp, ebp
.text:00000505                 pop     ebp
.text:00000506                 retn    8
.text:00000506 _HeapSort64@8   endp
.text:00000506
.text:00000506 ; ---------------------------------------------------------------------------
.text:00000509                 align 4
.text:00000509 _text           ends
.text:00000509
.rtc$TMZ:0000050C ; ===========================================================================
.rtc$TMZ:0000050C
.rtc$TMZ:0000050C ; Segment type: Pure data
.rtc$TMZ:0000050C ; Segment permissions: Read
.rtc$TMZ:0000050C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000050C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000050C                 ;org 50Ch
.rtc$TMZ:0000050C ; COMDAT (pick any)
.rtc$TMZ:0000050C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000050C _rtc$TMZ        ends
.rtc$TMZ:0000050C
.rtc$IMZ:00000510 ; ===========================================================================
.rtc$IMZ:00000510
.rtc$IMZ:00000510 ; Segment type: Pure data
.rtc$IMZ:00000510 ; Segment permissions: Read
.rtc$IMZ:00000510 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000510                 assume cs:_rtc$IMZ
.rtc$IMZ:00000510                 ;org 510h
.rtc$IMZ:00000510 ; COMDAT (pick any)
.rtc$IMZ:00000510 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000510 _rtc$IMZ        ends
.rtc$IMZ:00000510
UNDEF:00000520 ; ===========================================================================
UNDEF:00000520
UNDEF:00000520 ; Segment type: Externs
UNDEF:00000520 ; UNDEF
UNDEF:00000520                 extrn __RTC_Shutdown:near
UNDEF:00000520                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000524                 extrn __RTC_InitBase:near
UNDEF:00000524                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000524
UNDEF:00000524
UNDEF:00000524                 end