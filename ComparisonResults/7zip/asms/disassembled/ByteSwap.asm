.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : D32BA9D795B40DEBB680C4A31AA8B342
.rdata:00000000 ; Input CRC32 : 8F86796F
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ByteSwap.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG66556        db 'Swap2',0            ; DATA XREF: .rdata:00000020o
.rdata:00000006                 align 4
.rdata:00000008 $SG66557        db 'Swap4',0            ; DATA XREF: .rdata:00000040o
.rdata:0000000E                 align 10h
.rdata:00000010 _g_CodecsInfo   dd offset ?CreateFilter2@@YGPAXXZ
.rdata:00000010                                         ; DATA XREF: CRegisterCodecsByteSwap::CRegisterCodecsByteSwap(void)+35o
.rdata:00000010                                         ; CreateFilter2(void)
.rdata:00000014                 dd offset ?CreateFilter2@@YGPAXXZ ; CreateFilter2(void)
.rdata:00000018                 db    2
.rdata:00000019                 db    3
.rdata:0000001A                 db    2
.rdata:0000001B                 db    0
.rdata:0000001C                 db    0
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020                 dd offset $SG66556      ; "Swap2"
.rdata:00000024                 db    1
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000028                 db    1
.rdata:00000029                 db    0
.rdata:0000002A                 db    0
.rdata:0000002B                 db    0
.rdata:0000002C                 db    0
.rdata:0000002D                 db    0
.rdata:0000002E                 db    0
.rdata:0000002F                 db    0
.rdata:00000030                 dd offset ?CreateFilter4@@YGPAXXZ ; CreateFilter4(void)
.rdata:00000034                 dd offset ?CreateFilter4@@YGPAXXZ ; CreateFilter4(void)
.rdata:00000038                 db    4
.rdata:00000039                 db    3
.rdata:0000003A                 db    2
.rdata:0000003B                 db    0
.rdata:0000003C                 db    0
.rdata:0000003D                 db    0
.rdata:0000003E                 db    0
.rdata:0000003F                 db    0
.rdata:00000040                 dd offset $SG66557      ; "Swap4"
.rdata:00000044                 db    1
.rdata:00000045                 db    0
.rdata:00000046                 db    0
.rdata:00000047                 db    0
.rdata:00000048                 db    1
.rdata:00000049                 db    0
.rdata:0000004A                 db    0
.rdata:0000004B                 db    0
.rdata:0000004C                 db    0
.rdata:0000004D                 db    0
.rdata:0000004E                 db    0
.rdata:0000004F                 db    0
.rdata:0000004F _rdata          ends
.rdata:0000004F
.text:00000050 ; ===========================================================================
.text:00000050
.text:00000050 ; Segment type: Pure code
.text:00000050 ; Segment permissions: Read/Execute
.text:00000050 _text           segment para public 'CODE' use32
.text:00000050                 assume cs:_text
.text:00000050                 ;org 50h
.text:00000050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; __int32 __stdcall CByteSwap2::Init(CByteSwap2 *this)
.text:00000050                 public ?Init@CByteSwap2@@UAGJXZ
.text:00000050 ?Init@CByteSwap2@@UAGJXZ proc near      ; DATA XREF: .rdata:000003BCo
.text:00000050
.text:00000050 this            = dword ptr  8
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 xor     eax, eax
.text:00000055                 pop     ebp
.text:00000056                 retn    4
.text:00000056 ?Init@CByteSwap2@@UAGJXZ endp
.text:00000056
.text:00000056 ; ---------------------------------------------------------------------------
.text:00000059                 align 10h
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060 ; public: virtual unsigned int __stdcall CByteSwap2::Filter(unsigned char *, unsigned int)
.text:00000060                 public ?Filter@CByteSwap2@@UAGIPAEI@Z
.text:00000060 ?Filter@CByteSwap2@@UAGIPAEI@Z proc near ; DATA XREF: .rdata:000003C0o
.text:00000060
.text:00000060 var_C           = dword ptr -0Ch
.text:00000060 var_8           = dword ptr -8
.text:00000060 var_4           = dword ptr -4
.text:00000060 arg_4           = dword ptr  0Ch
.text:00000060 arg_8           = dword ptr  10h
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 sub     esp, 0Ch
.text:00000066                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000006D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000074                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000007B                 mov     [ebp+var_4], 2
.text:00000082                 cmp     [ebp+arg_8], 2
.text:00000086                 jnb     short loc_8C
.text:00000088                 xor     eax, eax
.text:0000008A                 jmp     short loc_CE
.text:0000008C ; ---------------------------------------------------------------------------
.text:0000008C
.text:0000008C loc_8C:                                 ; CODE XREF: CByteSwap2::Filter(uchar *,uint)+26j
.text:0000008C                 mov     eax, [ebp+arg_8]
.text:0000008F                 and     eax, 0FFFFFFFEh
.text:00000092                 mov     [ebp+arg_8], eax
.text:00000095                 mov     ecx, [ebp+arg_4]
.text:00000098                 add     ecx, [ebp+arg_8]
.text:0000009B                 mov     [ebp+var_8], ecx
.text:0000009E
.text:0000009E loc_9E:                                 ; CODE XREF: CByteSwap2::Filter(uchar *,uint)+69j
.text:0000009E                 mov     edx, [ebp+arg_4]
.text:000000A1                 mov     al, [edx]
.text:000000A3                 mov     byte ptr [ebp+var_C+3], al
.text:000000A6                 mov     ecx, [ebp+arg_4]
.text:000000A9                 mov     edx, [ebp+arg_4]
.text:000000AC                 mov     al, [edx+1]
.text:000000AF                 mov     [ecx], al
.text:000000B1                 mov     ecx, [ebp+arg_4]
.text:000000B4                 mov     dl, byte ptr [ebp+var_C+3]
.text:000000B7                 mov     [ecx+1], dl
.text:000000BA                 mov     eax, [ebp+arg_4]
.text:000000BD                 add     eax, 2
.text:000000C0                 mov     [ebp+arg_4], eax
.text:000000C3                 mov     ecx, [ebp+arg_4]
.text:000000C6                 cmp     ecx, [ebp+var_8]
.text:000000C9                 jnz     short loc_9E
.text:000000CB                 mov     eax, [ebp+arg_8]
.text:000000CE
.text:000000CE loc_CE:                                 ; CODE XREF: CByteSwap2::Filter(uchar *,uint)+2Aj
.text:000000CE                 mov     esp, ebp
.text:000000D0                 pop     ebp
.text:000000D1                 retn    0Ch
.text:000000D1 ?Filter@CByteSwap2@@UAGIPAEI@Z endp
.text:000000D1
.text:000000D1 ; ---------------------------------------------------------------------------
.text:000000D4                 align 10h
.text:000000E0
.text:000000E0 ; =============== S U B R O U T I N E =======================================
.text:000000E0
.text:000000E0 ; Attributes: bp-based frame
.text:000000E0
.text:000000E0 ; __int32 __stdcall CByteSwap4::Init(CByteSwap4 *this)
.text:000000E0                 public ?Init@CByteSwap4@@UAGJXZ
.text:000000E0 ?Init@CByteSwap4@@UAGJXZ proc near      ; DATA XREF: .rdata:0000073Co
.text:000000E0
.text:000000E0 this            = dword ptr  8
.text:000000E0
.text:000000E0                 push    ebp
.text:000000E1                 mov     ebp, esp
.text:000000E3                 xor     eax, eax
.text:000000E5                 pop     ebp
.text:000000E6                 retn    4
.text:000000E6 ?Init@CByteSwap4@@UAGJXZ endp
.text:000000E6
.text:000000E6 ; ---------------------------------------------------------------------------
.text:000000E9                 align 10h
.text:000000F0
.text:000000F0 ; =============== S U B R O U T I N E =======================================
.text:000000F0
.text:000000F0 ; Attributes: bp-based frame
.text:000000F0
.text:000000F0 ; public: virtual unsigned int __stdcall CByteSwap4::Filter(unsigned char *, unsigned int)
.text:000000F0                 public ?Filter@CByteSwap4@@UAGIPAEI@Z
.text:000000F0 ?Filter@CByteSwap4@@UAGIPAEI@Z proc near ; DATA XREF: .rdata:00000740o
.text:000000F0
.text:000000F0 var_C           = dword ptr -0Ch
.text:000000F0 var_8           = dword ptr -8
.text:000000F0 var_4           = dword ptr -4
.text:000000F0 arg_4           = dword ptr  0Ch
.text:000000F0 arg_8           = dword ptr  10h
.text:000000F0
.text:000000F0                 push    ebp
.text:000000F1                 mov     ebp, esp
.text:000000F3                 sub     esp, 0Ch
.text:000000F6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000000FD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000104                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000010B                 mov     [ebp+var_4], 4
.text:00000112                 cmp     [ebp+arg_8], 4
.text:00000116                 jnb     short loc_11C
.text:00000118                 xor     eax, eax
.text:0000011A                 jmp     short loc_17C
.text:0000011C ; ---------------------------------------------------------------------------
.text:0000011C
.text:0000011C loc_11C:                                ; CODE XREF: CByteSwap4::Filter(uchar *,uint)+26j
.text:0000011C                 mov     eax, [ebp+arg_8]
.text:0000011F                 and     eax, 0FFFFFFFCh
.text:00000122                 mov     [ebp+arg_8], eax
.text:00000125                 mov     ecx, [ebp+arg_4]
.text:00000128                 add     ecx, [ebp+arg_8]
.text:0000012B                 mov     [ebp+var_8], ecx
.text:0000012E
.text:0000012E loc_12E:                                ; CODE XREF: CByteSwap4::Filter(uchar *,uint)+87j
.text:0000012E                 mov     edx, [ebp+arg_4]
.text:00000131                 mov     al, [edx]
.text:00000133                 mov     byte ptr [ebp+var_C+3], al
.text:00000136                 mov     ecx, [ebp+arg_4]
.text:00000139                 mov     dl, [ecx+1]
.text:0000013C                 mov     byte ptr [ebp+var_C+2], dl
.text:0000013F                 mov     eax, [ebp+arg_4]
.text:00000142                 mov     ecx, [ebp+arg_4]
.text:00000145                 mov     dl, [ecx+3]
.text:00000148                 mov     [eax], dl
.text:0000014A                 mov     eax, [ebp+arg_4]
.text:0000014D                 mov     ecx, [ebp+arg_4]
.text:00000150                 mov     dl, [ecx+2]
.text:00000153                 mov     [eax+1], dl
.text:00000156                 mov     eax, [ebp+arg_4]
.text:00000159                 mov     cl, byte ptr [ebp+var_C+2]
.text:0000015C                 mov     [eax+2], cl
.text:0000015F                 mov     edx, [ebp+arg_4]
.text:00000162                 mov     al, byte ptr [ebp+var_C+3]
.text:00000165                 mov     [edx+3], al
.text:00000168                 mov     ecx, [ebp+arg_4]
.text:0000016B                 add     ecx, 4
.text:0000016E                 mov     [ebp+arg_4], ecx
.text:00000171                 mov     edx, [ebp+arg_4]
.text:00000174                 cmp     edx, [ebp+var_8]
.text:00000177                 jnz     short loc_12E
.text:00000179                 mov     eax, [ebp+arg_8]
.text:0000017C
.text:0000017C loc_17C:                                ; CODE XREF: CByteSwap4::Filter(uchar *,uint)+2Aj
.text:0000017C                 mov     esp, ebp
.text:0000017E                 pop     ebp
.text:0000017F                 retn    0Ch
.text:0000017F ?Filter@CByteSwap4@@UAGIPAEI@Z endp
.text:0000017F
.text:0000017F ; ---------------------------------------------------------------------------
.text:00000182                 align 10h
.text:00000190
.text:00000190 ; =============== S U B R O U T I N E =======================================
.text:00000190
.text:00000190 ; Attributes: bp-based frame
.text:00000190
.text:00000190 ; void * __stdcall CreateFilter2(void)
.text:00000190 ?CreateFilter2@@YGPAXXZ proc near       ; DATA XREF: .rdata:_g_CodecsInfoo
.text:00000190                                         ; .rdata:00000014o
.text:00000190
.text:00000190 var_18          = dword ptr -18h
.text:00000190 var_14          = dword ptr -14h
.text:00000190 var_10          = dword ptr -10h
.text:00000190 var_C           = dword ptr -0Ch
.text:00000190 var_4           = dword ptr -4
.text:00000190
.text:00000190                 push    ebp
.text:00000191                 mov     ebp, esp
.text:00000193                 push    0FFFFFFFFh
.text:00000195                 push    offset __ehhandler$?CreateFilter2@@YGPAXXZ
.text:0000019A                 mov     eax, large fs:0
.text:000001A0                 push    eax
.text:000001A1                 sub     esp, 0Ch
.text:000001A4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000001AB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000001B2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000001B9                 mov     eax, dword ptr ds:___security_cookie
.text:000001BE                 xor     eax, ebp
.text:000001C0                 push    eax
.text:000001C1                 lea     eax, [ebp+var_C]
.text:000001C4                 mov     large fs:0, eax
.text:000001CA                 push    8               ; unsigned int
.text:000001CC                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000001D1                 add     esp, 4
.text:000001D4                 mov     [ebp+var_14], eax
.text:000001D7                 mov     [ebp+var_4], 0
.text:000001DE                 cmp     [ebp+var_14], 0
.text:000001E2                 jz      short loc_1F1
.text:000001E4                 mov     ecx, [ebp+var_14]
.text:000001E7                 call    ??0CByteSwap2@@QAE@XZ ; CByteSwap2::CByteSwap2(void)
.text:000001EC                 mov     [ebp+var_18], eax
.text:000001EF                 jmp     short loc_1F8
.text:000001F1 ; ---------------------------------------------------------------------------
.text:000001F1
.text:000001F1 loc_1F1:                                ; CODE XREF: CreateFilter2(void)+52j
.text:000001F1                 mov     [ebp+var_18], 0
.text:000001F8
.text:000001F8 loc_1F8:                                ; CODE XREF: CreateFilter2(void)+5Fj
.text:000001F8                 mov     eax, [ebp+var_18]
.text:000001FB                 mov     [ebp+var_10], eax
.text:000001FE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000205                 mov     eax, [ebp+var_10]
.text:00000208                 mov     ecx, [ebp+var_C]
.text:0000020B                 mov     large fs:0, ecx
.text:00000212                 pop     ecx
.text:00000213                 add     esp, 18h
.text:00000216                 cmp     ebp, esp
.text:00000218                 call    __RTC_CheckEsp
.text:0000021D                 mov     esp, ebp
.text:0000021F                 pop     ebp
.text:00000220                 retn
.text:00000220 ?CreateFilter2@@YGPAXXZ endp
.text:00000220
.text:00000220 ; ---------------------------------------------------------------------------
.text:00000221                 align 10h
.text:00000230
.text:00000230 ; =============== S U B R O U T I N E =======================================
.text:00000230
.text:00000230 ; Attributes: bp-based frame
.text:00000230
.text:00000230 ; void * __stdcall CreateFilter4(void)
.text:00000230 ?CreateFilter4@@YGPAXXZ proc near       ; DATA XREF: .rdata:00000030o
.text:00000230                                         ; .rdata:00000034o
.text:00000230
.text:00000230 var_18          = dword ptr -18h
.text:00000230 var_14          = dword ptr -14h
.text:00000230 var_10          = dword ptr -10h
.text:00000230 var_C           = dword ptr -0Ch
.text:00000230 var_4           = dword ptr -4
.text:00000230
.text:00000230                 push    ebp
.text:00000231                 mov     ebp, esp
.text:00000233                 push    0FFFFFFFFh
.text:00000235                 push    offset __ehhandler$?CreateFilter4@@YGPAXXZ
.text:0000023A                 mov     eax, large fs:0
.text:00000240                 push    eax
.text:00000241                 sub     esp, 0Ch
.text:00000244                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000024B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000252                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000259                 mov     eax, dword ptr ds:___security_cookie
.text:0000025E                 xor     eax, ebp
.text:00000260                 push    eax
.text:00000261                 lea     eax, [ebp+var_C]
.text:00000264                 mov     large fs:0, eax
.text:0000026A                 push    8               ; unsigned int
.text:0000026C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000271                 add     esp, 4
.text:00000274                 mov     [ebp+var_14], eax
.text:00000277                 mov     [ebp+var_4], 0
.text:0000027E                 cmp     [ebp+var_14], 0
.text:00000282                 jz      short loc_291
.text:00000284                 mov     ecx, [ebp+var_14]
.text:00000287                 call    ??0CByteSwap4@@QAE@XZ ; CByteSwap4::CByteSwap4(void)
.text:0000028C                 mov     [ebp+var_18], eax
.text:0000028F                 jmp     short loc_298
.text:00000291 ; ---------------------------------------------------------------------------
.text:00000291
.text:00000291 loc_291:                                ; CODE XREF: CreateFilter4(void)+52j
.text:00000291                 mov     [ebp+var_18], 0
.text:00000298
.text:00000298 loc_298:                                ; CODE XREF: CreateFilter4(void)+5Fj
.text:00000298                 mov     eax, [ebp+var_18]
.text:0000029B                 mov     [ebp+var_10], eax
.text:0000029E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002A5                 mov     eax, [ebp+var_10]
.text:000002A8                 mov     ecx, [ebp+var_C]
.text:000002AB                 mov     large fs:0, ecx
.text:000002B2                 pop     ecx
.text:000002B3                 add     esp, 18h
.text:000002B6                 cmp     ebp, esp
.text:000002B8                 call    __RTC_CheckEsp
.text:000002BD                 mov     esp, ebp
.text:000002BF                 pop     ebp
.text:000002C0                 retn
.text:000002C0 ?CreateFilter4@@YGPAXXZ endp
.text:000002C0
.text:000002C0 ; ---------------------------------------------------------------------------
.text:000002C1                 align 4
.text:000002C1 _text           ends
.text:000002C1
.rtc$TMZ:000002C4 ; ===========================================================================
.rtc$TMZ:000002C4
.rtc$TMZ:000002C4 ; Segment type: Pure data
.rtc$TMZ:000002C4 ; Segment permissions: Read
.rtc$TMZ:000002C4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000002C4                 assume cs:_rtc$TMZ
.rtc$TMZ:000002C4                 ;org 2C4h
.rtc$TMZ:000002C4 ; COMDAT (pick any)
.rtc$TMZ:000002C4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000002C4 _rtc$TMZ        ends
.rtc$TMZ:000002C4
.rtc$IMZ:000002C8 ; ===========================================================================
.rtc$IMZ:000002C8
.rtc$IMZ:000002C8 ; Segment type: Pure data
.rtc$IMZ:000002C8 ; Segment permissions: Read
.rtc$IMZ:000002C8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000002C8                 assume cs:_rtc$IMZ
.rtc$IMZ:000002C8                 ;org 2C8h
.rtc$IMZ:000002C8 ; COMDAT (pick any)
.rtc$IMZ:000002C8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000002C8 _rtc$IMZ        ends
.rtc$IMZ:000002C8
.text$x:000002CC ; ===========================================================================
.text$x:000002CC
.text$x:000002CC ; Segment type: Pure code
.text$x:000002CC ; Segment permissions: Read/Execute
.text$x:000002CC _text$x         segment para public 'CODE' use32
.text$x:000002CC                 assume cs:_text$x
.text$x:000002CC                 ;org 2CCh
.text$x:000002CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000002CC
.text$x:000002CC ; =============== S U B R O U T I N E =======================================
.text$x:000002CC
.text$x:000002CC
.text$x:000002CC __unwindfunclet$?CreateFilter2@@YGPAXXZ$0 proc near
.text$x:000002CC                                         ; DATA XREF: .xdata$x:0000031Co
.text$x:000002CC                 mov     eax, [ebp-14h]
.text$x:000002CF                 push    eax             ; void *
.text$x:000002D0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000002D5                 pop     ecx
.text$x:000002D6                 retn
.text$x:000002D6 __unwindfunclet$?CreateFilter2@@YGPAXXZ$0 endp
.text$x:000002D6
.text$x:000002D7
.text$x:000002D7 ; =============== S U B R O U T I N E =======================================
.text$x:000002D7
.text$x:000002D7
.text$x:000002D7 __ehhandler$?CreateFilter2@@YGPAXXZ proc near
.text$x:000002D7                                         ; DATA XREF: CreateFilter2(void)+5o
.text$x:000002D7
.text$x:000002D7 arg_4           = dword ptr  8
.text$x:000002D7
.text$x:000002D7                 mov     edx, [esp+arg_4]
.text$x:000002DB                 lea     eax, [edx+0Ch]
.text$x:000002DE                 mov     ecx, [edx-10h]
.text$x:000002E1                 xor     ecx, eax
.text$x:000002E3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000002E8                 mov     eax, offset __ehfuncinfo$?CreateFilter2@@YGPAXXZ
.text$x:000002ED                 jmp     ___CxxFrameHandler3
.text$x:000002ED __ehhandler$?CreateFilter2@@YGPAXXZ endp
.text$x:000002ED
.text$x:000002F2
.text$x:000002F2 ; =============== S U B R O U T I N E =======================================
.text$x:000002F2
.text$x:000002F2
.text$x:000002F2 __unwindfunclet$?CreateFilter4@@YGPAXXZ$0 proc near
.text$x:000002F2                                         ; DATA XREF: .xdata$x:00000348o
.text$x:000002F2                 mov     eax, [ebp-14h]
.text$x:000002F5                 push    eax             ; void *
.text$x:000002F6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000002FB                 pop     ecx
.text$x:000002FC                 retn
.text$x:000002FC __unwindfunclet$?CreateFilter4@@YGPAXXZ$0 endp
.text$x:000002FC
.text$x:000002FD
.text$x:000002FD ; =============== S U B R O U T I N E =======================================
.text$x:000002FD
.text$x:000002FD
.text$x:000002FD __ehhandler$?CreateFilter4@@YGPAXXZ proc near
.text$x:000002FD                                         ; DATA XREF: CreateFilter4(void)+5o
.text$x:000002FD
.text$x:000002FD arg_4           = dword ptr  8
.text$x:000002FD
.text$x:000002FD                 mov     edx, [esp+arg_4]
.text$x:00000301                 lea     eax, [edx+0Ch]
.text$x:00000304                 mov     ecx, [edx-10h]
.text$x:00000307                 xor     ecx, eax
.text$x:00000309                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000030E                 mov     eax, offset __ehfuncinfo$?CreateFilter4@@YGPAXXZ
.text$x:00000313                 jmp     ___CxxFrameHandler3
.text$x:00000313 __ehhandler$?CreateFilter4@@YGPAXXZ endp
.text$x:00000313
.text$x:00000313 _text$x         ends
.text$x:00000313
.xdata$x:00000318 ; ===========================================================================
.xdata$x:00000318
.xdata$x:00000318 ; Segment type: Pure data
.xdata$x:00000318 ; Segment permissions: Read
.xdata$x:00000318 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000318                 assume cs:_xdata$x
.xdata$x:00000318                 ;org 318h
.xdata$x:00000318 __unwindtable$?CreateFilter2@@YGPAXXZ db 0FFh
.xdata$x:00000318                                         ; DATA XREF: .xdata$x:00000328o
.xdata$x:00000319                 db 0FFh
.xdata$x:0000031A                 db 0FFh
.xdata$x:0000031B                 db 0FFh
.xdata$x:0000031C                 dd offset __unwindfunclet$?CreateFilter2@@YGPAXXZ$0
.xdata$x:00000320 __ehfuncinfo$?CreateFilter2@@YGPAXXZ db  22h ; "
.xdata$x:00000320                                         ; DATA XREF: __ehhandler$?CreateFilter2@@YGPAXXZ+11o
.xdata$x:00000321                 db    5
.xdata$x:00000322                 db  93h ; ô
.xdata$x:00000323                 db  19h
.xdata$x:00000324                 db    1
.xdata$x:00000325                 db    0
.xdata$x:00000326                 db    0
.xdata$x:00000327                 db    0
.xdata$x:00000328                 dd offset __unwindtable$?CreateFilter2@@YGPAXXZ
.xdata$x:0000032C                 align 20h
.xdata$x:00000340                 db    1
.xdata$x:00000341                 db    0
.xdata$x:00000342                 db    0
.xdata$x:00000343                 db    0
.xdata$x:00000344 __unwindtable$?CreateFilter4@@YGPAXXZ db 0FFh
.xdata$x:00000344                                         ; DATA XREF: .xdata$x:00000354o
.xdata$x:00000345                 db 0FFh
.xdata$x:00000346                 db 0FFh
.xdata$x:00000347                 db 0FFh
.xdata$x:00000348                 dd offset __unwindfunclet$?CreateFilter4@@YGPAXXZ$0
.xdata$x:0000034C __ehfuncinfo$?CreateFilter4@@YGPAXXZ db  22h ; "
.xdata$x:0000034C                                         ; DATA XREF: __ehhandler$?CreateFilter4@@YGPAXXZ+11o
.xdata$x:0000034D                 db    5
.xdata$x:0000034E                 db  93h ; ô
.xdata$x:0000034F                 db  19h
.xdata$x:00000350                 db    1
.xdata$x:00000351                 db    0
.xdata$x:00000352                 db    0
.xdata$x:00000353                 db    0
.xdata$x:00000354                 dd offset __unwindtable$?CreateFilter4@@YGPAXXZ
.xdata$x:00000358                 db    0
.xdata$x:00000359                 db    0
.xdata$x:0000035A                 db    0
.xdata$x:0000035B                 db    0
.xdata$x:0000035C                 db    0
.xdata$x:0000035D                 db    0
.xdata$x:0000035E                 db    0
.xdata$x:0000035F                 db    0
.xdata$x:00000360                 db    0
.xdata$x:00000361                 db    0
.xdata$x:00000362                 db    0
.xdata$x:00000363                 db    0
.xdata$x:00000364                 db    0
.xdata$x:00000365                 db    0
.xdata$x:00000366                 db    0
.xdata$x:00000367                 db    0
.xdata$x:00000368                 db    0
.xdata$x:00000369                 db    0
.xdata$x:0000036A                 db    0
.xdata$x:0000036B                 db    0
.xdata$x:0000036C                 db    1
.xdata$x:0000036D                 db    0
.xdata$x:0000036E                 db    0
.xdata$x:0000036F                 db    0
.xdata$x:0000036F _xdata$x        ends
.xdata$x:0000036F
.text:00000370 ; ===========================================================================
.text:00000370
.text:00000370 ; Segment type: Pure code
.text:00000370 ; Segment permissions: Read/Execute
.text:00000370 _text           segment para public 'CODE' use32
.text:00000370                 assume cs:_text
.text:00000370                 ;org 370h
.text:00000370 ; COMDAT (pick any)
.text:00000370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000370
.text:00000370 ; =============== S U B R O U T I N E =======================================
.text:00000370
.text:00000370 ; Attributes: bp-based frame
.text:00000370
.text:00000370 ; public: __thiscall CByteSwap2::CByteSwap2(void)
.text:00000370                 public ??0CByteSwap2@@QAE@XZ
.text:00000370 ??0CByteSwap2@@QAE@XZ proc near         ; CODE XREF: CreateFilter2(void)+57p
.text:00000370
.text:00000370 var_4           = dword ptr -4
.text:00000370
.text:00000370                 push    ebp
.text:00000371                 mov     ebp, esp
.text:00000373                 push    ecx
.text:00000374                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000037B                 mov     [ebp+var_4], ecx
.text:0000037E                 mov     ecx, [ebp+var_4] ; this
.text:00000381                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:00000386                 mov     ecx, [ebp+var_4]
.text:00000389                 add     ecx, 4          ; this
.text:0000038C                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000391                 mov     eax, [ebp+var_4]
.text:00000394                 mov     dword ptr [eax], offset ??_7CByteSwap2@@6B@ ; const CByteSwap2::`vftable'
.text:0000039A                 mov     eax, [ebp+var_4]
.text:0000039D                 add     esp, 4
.text:000003A0                 cmp     ebp, esp
.text:000003A2                 call    __RTC_CheckEsp
.text:000003A7                 mov     esp, ebp
.text:000003A9                 pop     ebp
.text:000003AA                 retn
.text:000003AA ??0CByteSwap2@@QAE@XZ endp
.text:000003AA
.text:000003AA ; ---------------------------------------------------------------------------
.text:000003AB                 align 4
.text:000003AB _text           ends
.text:000003AB
.rdata:000003AC ; ===========================================================================
.rdata:000003AC
.rdata:000003AC ; Segment type: Pure data
.rdata:000003AC ; Segment permissions: Read
.rdata:000003AC _rdata          segment dword public 'DATA' use32
.rdata:000003AC                 assume cs:_rdata
.rdata:000003AC                 ;org 3ACh
.rdata:000003AC ; COMDAT (pick largest)
.rdata:000003AC                 dd offset ??_R4CByteSwap2@@6B@ ; const CByteSwap2::`RTTI Complete Object Locator'
.rdata:000003B0                 public ??_7CByteSwap2@@6B@
.rdata:000003B0 ; const CByteSwap2::`vftable'
.rdata:000003B0 ??_7CByteSwap2@@6B@ dd offset ?QueryInterface@CByteSwap2@@UAGJABU_GUID@@PAPAX@Z
.rdata:000003B0                                         ; DATA XREF: CByteSwap2::CByteSwap2(void)+24o
.rdata:000003B0                                         ; CByteSwap2::QueryInterface(_GUID const &,void * *)
.rdata:000003B4                 dd offset ?AddRef@CByteSwap2@@UAGKXZ ; CByteSwap2::AddRef(void)
.rdata:000003B8                 dd offset ?Release@CByteSwap2@@UAGKXZ ; CByteSwap2::Release(void)
.rdata:000003BC                 dd offset ?Init@CByteSwap2@@UAGJXZ ; CByteSwap2::Init(void)
.rdata:000003C0                 dd offset ?Filter@CByteSwap2@@UAGIPAEI@Z ; CByteSwap2::Filter(uchar *,uint)
.rdata:000003C0 _rdata          ends
.rdata:000003C0
.rdata$r:000003C4 ; ===========================================================================
.rdata$r:000003C4
.rdata$r:000003C4 ; Segment type: Pure data
.rdata$r:000003C4 ; Segment permissions: Read
.rdata$r:000003C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003C4                 assume cs:_rdata$r
.rdata$r:000003C4                 ;org 3C4h
.rdata$r:000003C4 ; COMDAT (pick any)
.rdata$r:000003C4                 public ??_R4CByteSwap2@@6B@
.rdata$r:000003C4 ; const CByteSwap2::`RTTI Complete Object Locator'
.rdata$r:000003C4 ??_R4CByteSwap2@@6B@ db    0            ; DATA XREF: .rdata:000003ACo
.rdata$r:000003C5                 db    0
.rdata$r:000003C6                 db    0
.rdata$r:000003C7                 db    0
.rdata$r:000003C8                 db    0
.rdata$r:000003C9                 db    0
.rdata$r:000003CA                 db    0
.rdata$r:000003CB                 db    0
.rdata$r:000003CC                 db    0
.rdata$r:000003CD                 db    0
.rdata$r:000003CE                 db    0
.rdata$r:000003CF                 db    0
.rdata$r:000003D0                 dd offset ??_R0?AVCByteSwap2@@@8 ; CByteSwap2 `RTTI Type Descriptor'
.rdata$r:000003D4                 dd offset ??_R3CByteSwap2@@8 ; CByteSwap2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003D4 _rdata$r        ends
.rdata$r:000003D4
.data:000003D8 ; ===========================================================================
.data:000003D8
.data:000003D8 ; Segment type: Pure data
.data:000003D8 ; Segment permissions: Read/Write
.data:000003D8 _data           segment dword public 'DATA' use32
.data:000003D8                 assume cs:_data
.data:000003D8                 ;org 3D8h
.data:000003D8 ; COMDAT (pick any)
.data:000003D8                 public ??_R0?AVCByteSwap2@@@8
.data:000003D8 ; class CByteSwap2 `RTTI Type Descriptor'
.data:000003D8 ??_R0?AVCByteSwap2@@@8 dd offset ??_7type_info@@6B@
.data:000003D8                                         ; DATA XREF: .rdata$r:000003D0o
.data:000003D8                                         ; .rdata$r:CByteSwap2::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000003D8                                         ; const type_info::`vftable'
.data:000003DC                 align 10h
.data:000003E0 a_?avcbyteswap2 db '.?AVCByteSwap2@@',0
.data:000003F1                 align 4
.data:000003F1 _data           ends
.data:000003F1
.rdata$r:000003F4 ; ===========================================================================
.rdata$r:000003F4
.rdata$r:000003F4 ; Segment type: Pure data
.rdata$r:000003F4 ; Segment permissions: Read
.rdata$r:000003F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003F4                 assume cs:_rdata$r
.rdata$r:000003F4                 ;org 3F4h
.rdata$r:000003F4 ; COMDAT (pick any)
.rdata$r:000003F4                 public ??_R3CByteSwap2@@8
.rdata$r:000003F4 ; CByteSwap2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003F4 ??_R3CByteSwap2@@8 db    0              ; DATA XREF: .rdata$r:000003D4o
.rdata$r:000003F4                                         ; .rdata$r:00000430o
.rdata$r:000003F5                 db    0
.rdata$r:000003F6                 db    0
.rdata$r:000003F7                 db    0
.rdata$r:000003F8                 db    1
.rdata$r:000003F9                 db    0
.rdata$r:000003FA                 db    0
.rdata$r:000003FB                 db    0
.rdata$r:000003FC                 db    4
.rdata$r:000003FD                 db    0
.rdata$r:000003FE                 db    0
.rdata$r:000003FF                 db    0
.rdata$r:00000400                 dd offset ??_R2CByteSwap2@@8 ; CByteSwap2::`RTTI Base Class Array'
.rdata$r:00000400 _rdata$r        ends
.rdata$r:00000400
.rdata$r:00000404 ; ===========================================================================
.rdata$r:00000404
.rdata$r:00000404 ; Segment type: Pure data
.rdata$r:00000404 ; Segment permissions: Read
.rdata$r:00000404 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000404                 assume cs:_rdata$r
.rdata$r:00000404                 ;org 404h
.rdata$r:00000404 ; COMDAT (pick any)
.rdata$r:00000404                 public ??_R2CByteSwap2@@8
.rdata$r:00000404 ; CByteSwap2::`RTTI Base Class Array'
.rdata$r:00000404 ??_R2CByteSwap2@@8 dd offset ??_R1A@?0A@EA@CByteSwap2@@8
.rdata$r:00000404                                         ; DATA XREF: .rdata$r:00000400o
.rdata$r:00000404                                         ; CByteSwap2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000408                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000040C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000410                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000414                 db    0
.rdata$r:00000415                 align 4
.rdata$r:00000415 _rdata$r        ends
.rdata$r:00000415
.rdata$r:00000418 ; ===========================================================================
.rdata$r:00000418
.rdata$r:00000418 ; Segment type: Pure data
.rdata$r:00000418 ; Segment permissions: Read
.rdata$r:00000418 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000418                 assume cs:_rdata$r
.rdata$r:00000418                 ;org 418h
.rdata$r:00000418 ; COMDAT (pick any)
.rdata$r:00000418                 public ??_R1A@?0A@EA@CByteSwap2@@8
.rdata$r:00000418 ; CByteSwap2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000418 ??_R1A@?0A@EA@CByteSwap2@@8 dd offset ??_R0?AVCByteSwap2@@@8
.rdata$r:00000418                                         ; DATA XREF: .rdata$r:CByteSwap2::`RTTI Base Class Array'o
.rdata$r:00000418                                         ; CByteSwap2 `RTTI Type Descriptor'
.rdata$r:0000041C                 db    3
.rdata$r:0000041D                 db    0
.rdata$r:0000041E                 db    0
.rdata$r:0000041F                 db    0
.rdata$r:00000420                 db    0
.rdata$r:00000421                 db    0
.rdata$r:00000422                 db    0
.rdata$r:00000423                 db    0
.rdata$r:00000424                 db 0FFh
.rdata$r:00000425                 db 0FFh
.rdata$r:00000426                 db 0FFh
.rdata$r:00000427                 db 0FFh
.rdata$r:00000428                 db    0
.rdata$r:00000429                 db    0
.rdata$r:0000042A                 db    0
.rdata$r:0000042B                 db    0
.rdata$r:0000042C                 db  40h ; @
.rdata$r:0000042D                 db    0
.rdata$r:0000042E                 db    0
.rdata$r:0000042F                 db    0
.rdata$r:00000430                 dd offset ??_R3CByteSwap2@@8 ; CByteSwap2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000430 _rdata$r        ends
.rdata$r:00000430
.rdata$r:00000434 ; ===========================================================================
.rdata$r:00000434
.rdata$r:00000434 ; Segment type: Pure data
.rdata$r:00000434 ; Segment permissions: Read
.rdata$r:00000434 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000434                 assume cs:_rdata$r
.rdata$r:00000434                 ;org 434h
.rdata$r:00000434 ; COMDAT (pick any)
.rdata$r:00000434                 public ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00000434 ; ICompressFilter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000434 ??_R1A@?0A@EA@ICompressFilter@@8 dd offset ??_R0?AUICompressFilter@@@8
.rdata$r:00000434                                         ; DATA XREF: .rdata$r:00000408o
.rdata$r:00000434                                         ; .rdata$r:ICompressFilter::`RTTI Base Class Array'o ...
.rdata$r:00000434                                         ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:00000438                 db    1
.rdata$r:00000439                 db    0
.rdata$r:0000043A                 db    0
.rdata$r:0000043B                 db    0
.rdata$r:0000043C                 db    0
.rdata$r:0000043D                 db    0
.rdata$r:0000043E                 db    0
.rdata$r:0000043F                 db    0
.rdata$r:00000440                 db 0FFh
.rdata$r:00000441                 db 0FFh
.rdata$r:00000442                 db 0FFh
.rdata$r:00000443                 db 0FFh
.rdata$r:00000444                 db    0
.rdata$r:00000445                 db    0
.rdata$r:00000446                 db    0
.rdata$r:00000447                 db    0
.rdata$r:00000448                 db  40h ; @
.rdata$r:00000449                 db    0
.rdata$r:0000044A                 db    0
.rdata$r:0000044B                 db    0
.rdata$r:0000044C                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000044C _rdata$r        ends
.rdata$r:0000044C
.data:00000450 ; ===========================================================================
.data:00000450
.data:00000450 ; Segment type: Pure data
.data:00000450 ; Segment permissions: Read/Write
.data:00000450 _data           segment dword public 'DATA' use32
.data:00000450                 assume cs:_data
.data:00000450                 ;org 450h
.data:00000450 ; COMDAT (pick any)
.data:00000450                 public ??_R0?AUICompressFilter@@@8
.data:00000450 ; struct ICompressFilter `RTTI Type Descriptor'
.data:00000450 ??_R0?AUICompressFilter@@@8 dd offset ??_7type_info@@6B@
.data:00000450                                         ; DATA XREF: .rdata$r:ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000450                                         ; .rdata$r:000006D0o
.data:00000450                                         ; const type_info::`vftable'
.data:00000454                 align 8
.data:00000458 a_?auicompressf db '.?AUICompressFilter@@',0
.data:0000046E                 align 10h
.data:0000046E _data           ends
.data:0000046E
.rdata$r:00000470 ; ===========================================================================
.rdata$r:00000470
.rdata$r:00000470 ; Segment type: Pure data
.rdata$r:00000470 ; Segment permissions: Read
.rdata$r:00000470 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000470                 assume cs:_rdata$r
.rdata$r:00000470                 ;org 470h
.rdata$r:00000470 ; COMDAT (pick any)
.rdata$r:00000470                 public ??_R3ICompressFilter@@8
.rdata$r:00000470 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000470 ??_R3ICompressFilter@@8 db    0         ; DATA XREF: .rdata$r:0000044Co
.rdata$r:00000470                                         ; .rdata$r:000006D4o
.rdata$r:00000471                 db    0
.rdata$r:00000472                 db    0
.rdata$r:00000473                 db    0
.rdata$r:00000474                 db    0
.rdata$r:00000475                 db    0
.rdata$r:00000476                 db    0
.rdata$r:00000477                 db    0
.rdata$r:00000478                 db    2
.rdata$r:00000479                 db    0
.rdata$r:0000047A                 db    0
.rdata$r:0000047B                 db    0
.rdata$r:0000047C                 dd offset ??_R2ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:0000047C _rdata$r        ends
.rdata$r:0000047C
.rdata$r:00000480 ; ===========================================================================
.rdata$r:00000480
.rdata$r:00000480 ; Segment type: Pure data
.rdata$r:00000480 ; Segment permissions: Read
.rdata$r:00000480 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000480                 assume cs:_rdata$r
.rdata$r:00000480                 ;org 480h
.rdata$r:00000480 ; COMDAT (pick any)
.rdata$r:00000480                 public ??_R2ICompressFilter@@8
.rdata$r:00000480 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:00000480 ??_R2ICompressFilter@@8 dd offset ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00000480                                         ; DATA XREF: .rdata$r:0000047Co
.rdata$r:00000480                                         ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000484                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000488                 db    0
.rdata$r:00000489                 align 4
.rdata$r:00000489 _rdata$r        ends
.rdata$r:00000489
.rdata$r:0000048C ; ===========================================================================
.rdata$r:0000048C
.rdata$r:0000048C ; Segment type: Pure data
.rdata$r:0000048C ; Segment permissions: Read
.rdata$r:0000048C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000048C                 assume cs:_rdata$r
.rdata$r:0000048C                 ;org 48Ch
.rdata$r:0000048C ; COMDAT (pick any)
.rdata$r:0000048C                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000048C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000048C ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000048C                                         ; DATA XREF: .rdata$r:0000040Co
.rdata$r:0000048C                                         ; .rdata$r:00000484o ...
.rdata$r:0000048C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000490                 db    0
.rdata$r:00000491                 db    0
.rdata$r:00000492                 db    0
.rdata$r:00000493                 db    0
.rdata$r:00000494                 db    0
.rdata$r:00000495                 db    0
.rdata$r:00000496                 db    0
.rdata$r:00000497                 db    0
.rdata$r:00000498                 db 0FFh
.rdata$r:00000499                 db 0FFh
.rdata$r:0000049A                 db 0FFh
.rdata$r:0000049B                 db 0FFh
.rdata$r:0000049C                 db    0
.rdata$r:0000049D                 db    0
.rdata$r:0000049E                 db    0
.rdata$r:0000049F                 db    0
.rdata$r:000004A0                 db  40h ; @
.rdata$r:000004A1                 db    0
.rdata$r:000004A2                 db    0
.rdata$r:000004A3                 db    0
.rdata$r:000004A4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004A4 _rdata$r        ends
.rdata$r:000004A4
.data:000004A8 ; ===========================================================================
.data:000004A8
.data:000004A8 ; Segment type: Pure data
.data:000004A8 ; Segment permissions: Read/Write
.data:000004A8 _data           segment dword public 'DATA' use32
.data:000004A8                 assume cs:_data
.data:000004A8                 ;org 4A8h
.data:000004A8 ; COMDAT (pick any)
.data:000004A8                 public ??_R0?AUIUnknown@@@8
.data:000004A8 ; struct IUnknown `RTTI Type Descriptor'
.data:000004A8 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000004A8                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000004A8                                         ; const type_info::`vftable'
.data:000004AC                 align 10h
.data:000004B0 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:000004BF                 align 10h
.data:000004BF _data           ends
.data:000004BF
.rdata$r:000004C0 ; ===========================================================================
.rdata$r:000004C0
.rdata$r:000004C0 ; Segment type: Pure data
.rdata$r:000004C0 ; Segment permissions: Read
.rdata$r:000004C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004C0                 assume cs:_rdata$r
.rdata$r:000004C0                 ;org 4C0h
.rdata$r:000004C0 ; COMDAT (pick any)
.rdata$r:000004C0                 public ??_R3IUnknown@@8
.rdata$r:000004C0 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004C0 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000004A4o
.rdata$r:000004C1                 db    0
.rdata$r:000004C2                 db    0
.rdata$r:000004C3                 db    0
.rdata$r:000004C4                 db    0
.rdata$r:000004C5                 db    0
.rdata$r:000004C6                 db    0
.rdata$r:000004C7                 db    0
.rdata$r:000004C8                 db    1
.rdata$r:000004C9                 db    0
.rdata$r:000004CA                 db    0
.rdata$r:000004CB                 db    0
.rdata$r:000004CC                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000004CC _rdata$r        ends
.rdata$r:000004CC
.rdata$r:000004D0 ; ===========================================================================
.rdata$r:000004D0
.rdata$r:000004D0 ; Segment type: Pure data
.rdata$r:000004D0 ; Segment permissions: Read
.rdata$r:000004D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004D0                 assume cs:_rdata$r
.rdata$r:000004D0                 ;org 4D0h
.rdata$r:000004D0 ; COMDAT (pick any)
.rdata$r:000004D0                 public ??_R2IUnknown@@8
.rdata$r:000004D0 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000004D0 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000004D0                                         ; DATA XREF: .rdata$r:000004CCo
.rdata$r:000004D0                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004D4                 db    0
.rdata$r:000004D5                 align 4
.rdata$r:000004D5 _rdata$r        ends
.rdata$r:000004D5
.rdata$r:000004D8 ; ===========================================================================
.rdata$r:000004D8
.rdata$r:000004D8 ; Segment type: Pure data
.rdata$r:000004D8 ; Segment permissions: Read
.rdata$r:000004D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004D8                 assume cs:_rdata$r
.rdata$r:000004D8                 ;org 4D8h
.rdata$r:000004D8 ; COMDAT (pick any)
.rdata$r:000004D8                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:000004D8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000004D8 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000004D8                                         ; DATA XREF: .rdata$r:00000410o
.rdata$r:000004D8                                         ; .rdata$r:00000790o
.rdata$r:000004D8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000004DC                 align 10h
.rdata$r:000004E0                 db    4
.rdata$r:000004E1                 db    0
.rdata$r:000004E2                 db    0
.rdata$r:000004E3                 db    0
.rdata$r:000004E4                 db 0FFh
.rdata$r:000004E5                 db 0FFh
.rdata$r:000004E6                 db 0FFh
.rdata$r:000004E7                 db 0FFh
.rdata$r:000004E8                 db    0
.rdata$r:000004E9                 db    0
.rdata$r:000004EA                 db    0
.rdata$r:000004EB                 db    0
.rdata$r:000004EC                 db  40h ; @
.rdata$r:000004ED                 db    0
.rdata$r:000004EE                 db    0
.rdata$r:000004EF                 db    0
.rdata$r:000004F0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004F0 _rdata$r        ends
.rdata$r:000004F0
.data:000004F4 ; ===========================================================================
.data:000004F4
.data:000004F4 ; Segment type: Pure data
.data:000004F4 ; Segment permissions: Read/Write
.data:000004F4 _data           segment dword public 'DATA' use32
.data:000004F4                 assume cs:_data
.data:000004F4                 ;org 4F4h
.data:000004F4 ; COMDAT (pick any)
.data:000004F4                 public ??_R0?AVCMyUnknownImp@@@8
.data:000004F4 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000004F4 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000004F4                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000004F4                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000004F4                                         ; const type_info::`vftable'
.data:000004F8                 db    0
.data:000004F9                 db    0
.data:000004FA                 db    0
.data:000004FB                 db    0
.data:000004FC                 db  2Eh ; .
.data:000004FD                 db  3Fh ; ?
.data:000004FE                 db  41h ; A
.data:000004FF                 db  56h ; V
.data:00000500                 db  43h ; C
.data:00000501                 db  4Dh ; M
.data:00000502                 db  79h ; y
.data:00000503                 db  55h ; U
.data:00000504                 db  6Eh ; n
.data:00000505                 db  6Bh ; k
.data:00000506                 db  6Eh ; n
.data:00000507                 db  6Fh ; o
.data:00000508                 db  77h ; w
.data:00000509                 db  6Eh ; n
.data:0000050A                 db  49h ; I
.data:0000050B                 db  6Dh ; m
.data:0000050C                 db  70h ; p
.data:0000050D                 db  40h ; @
.data:0000050E                 db  40h ; @
.data:0000050F                 db    0
.data:0000050F _data           ends
.data:0000050F
.rdata$r:00000510 ; ===========================================================================
.rdata$r:00000510
.rdata$r:00000510 ; Segment type: Pure data
.rdata$r:00000510 ; Segment permissions: Read
.rdata$r:00000510 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000510                 assume cs:_rdata$r
.rdata$r:00000510                 ;org 510h
.rdata$r:00000510 ; COMDAT (pick any)
.rdata$r:00000510                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000510 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000510 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000004F0o
.rdata$r:00000510                                         ; .rdata$r:00000540o
.rdata$r:00000511                 db    0
.rdata$r:00000512                 db    0
.rdata$r:00000513                 db    0
.rdata$r:00000514                 db    0
.rdata$r:00000515                 db    0
.rdata$r:00000516                 db    0
.rdata$r:00000517                 db    0
.rdata$r:00000518                 db    1
.rdata$r:00000519                 db    0
.rdata$r:0000051A                 db    0
.rdata$r:0000051B                 db    0
.rdata$r:0000051C                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000051C _rdata$r        ends
.rdata$r:0000051C
.rdata$r:00000520 ; ===========================================================================
.rdata$r:00000520
.rdata$r:00000520 ; Segment type: Pure data
.rdata$r:00000520 ; Segment permissions: Read
.rdata$r:00000520 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000520                 assume cs:_rdata$r
.rdata$r:00000520                 ;org 520h
.rdata$r:00000520 ; COMDAT (pick any)
.rdata$r:00000520                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000520 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000520 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000520                                         ; DATA XREF: .rdata$r:0000051Co
.rdata$r:00000520                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000524                 db    0
.rdata$r:00000525                 align 4
.rdata$r:00000525 _rdata$r        ends
.rdata$r:00000525
.rdata$r:00000528 ; ===========================================================================
.rdata$r:00000528
.rdata$r:00000528 ; Segment type: Pure data
.rdata$r:00000528 ; Segment permissions: Read
.rdata$r:00000528 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000528                 assume cs:_rdata$r
.rdata$r:00000528                 ;org 528h
.rdata$r:00000528 ; COMDAT (pick any)
.rdata$r:00000528                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000528 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000528 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000528                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000528                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000052C                 db    0
.rdata$r:0000052D                 db    0
.rdata$r:0000052E                 db    0
.rdata$r:0000052F                 db    0
.rdata$r:00000530                 db    0
.rdata$r:00000531                 db    0
.rdata$r:00000532                 db    0
.rdata$r:00000533                 db    0
.rdata$r:00000534                 db 0FFh
.rdata$r:00000535                 db 0FFh
.rdata$r:00000536                 db 0FFh
.rdata$r:00000537                 db 0FFh
.rdata$r:00000538                 db    0
.rdata$r:00000539                 db    0
.rdata$r:0000053A                 db    0
.rdata$r:0000053B                 db    0
.rdata$r:0000053C                 db  40h ; @
.rdata$r:0000053D                 db    0
.rdata$r:0000053E                 db    0
.rdata$r:0000053F                 db    0
.rdata$r:00000540                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000540 _rdata$r        ends
.rdata$r:00000540
.text:00000544 ; ===========================================================================
.text:00000544
.text:00000544 ; Segment type: Pure code
.text:00000544 ; Segment permissions: Read/Execute
.text:00000544 _text           segment para public 'CODE' use32
.text:00000544                 assume cs:_text
.text:00000544                 ;org 544h
.text:00000544 ; COMDAT (pick any)
.text:00000544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000544
.text:00000544 ; =============== S U B R O U T I N E =======================================
.text:00000544
.text:00000544 ; Attributes: bp-based frame
.text:00000544
.text:00000544 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000544                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000544 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CByteSwap2::CByteSwap2(void)+1Cp
.text:00000544                                         ; CByteSwap4::CByteSwap4(void)+1Cp
.text:00000544
.text:00000544 var_4           = dword ptr -4
.text:00000544
.text:00000544                 push    ebp
.text:00000545                 mov     ebp, esp
.text:00000547                 push    ecx
.text:00000548                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000054F                 mov     [ebp+var_4], ecx
.text:00000552                 mov     eax, [ebp+var_4]
.text:00000555                 mov     dword ptr [eax], 0
.text:0000055B                 mov     eax, [ebp+var_4]
.text:0000055E                 mov     esp, ebp
.text:00000560                 pop     ebp
.text:00000561                 retn
.text:00000561 ??0CMyUnknownImp@@QAE@XZ endp
.text:00000561
.text:00000561 ; ---------------------------------------------------------------------------
.text:00000562                 align 4
.text:00000562 _text           ends
.text:00000562
.text:00000564 ; ===========================================================================
.text:00000564
.text:00000564 ; Segment type: Pure code
.text:00000564 ; Segment permissions: Read/Execute
.text:00000564 _text           segment para public 'CODE' use32
.text:00000564                 assume cs:_text
.text:00000564                 ;org 564h
.text:00000564 ; COMDAT (pick any)
.text:00000564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000564
.text:00000564 ; =============== S U B R O U T I N E =======================================
.text:00000564
.text:00000564 ; Attributes: bp-based frame
.text:00000564
.text:00000564 ; __int32 __stdcall CByteSwap2::QueryInterface(CByteSwap2 *this, const struct _GUID *Buf1, void **)
.text:00000564                 public ?QueryInterface@CByteSwap2@@UAGJABU_GUID@@PAPAX@Z
.text:00000564 ?QueryInterface@CByteSwap2@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000564                                         ; DATA XREF: .rdata:const CByteSwap2::`vftable'o
.text:00000564
.text:00000564 this            = dword ptr  8
.text:00000564 Buf1            = dword ptr  0Ch
.text:00000564 arg_8           = dword ptr  10h
.text:00000564
.text:00000564                 push    ebp
.text:00000565                 mov     ebp, esp
.text:00000567                 mov     eax, [ebp+arg_8]
.text:0000056A                 mov     dword ptr [eax], 0
.text:00000570                 push    offset _IID_IUnknown ; Buf2
.text:00000575                 mov     ecx, [ebp+Buf1]
.text:00000578                 push    ecx             ; Buf1
.text:00000579                 call    ___@8           ; __(x,x)
.text:0000057E                 test    eax, eax
.text:00000580                 jz      short loc_58C
.text:00000582                 mov     edx, [ebp+arg_8]
.text:00000585                 mov     eax, [ebp+this]
.text:00000588                 mov     [edx], eax
.text:0000058A                 jmp     short loc_593
.text:0000058C ; ---------------------------------------------------------------------------
.text:0000058C
.text:0000058C loc_58C:                                ; CODE XREF: CByteSwap2::QueryInterface(_GUID const &,void * *)+1Cj
.text:0000058C                 mov     eax, 80004002h
.text:00000591                 jmp     short loc_5A4
.text:00000593 ; ---------------------------------------------------------------------------
.text:00000593
.text:00000593 loc_593:                                ; CODE XREF: CByteSwap2::QueryInterface(_GUID const &,void * *)+26j
.text:00000593                 mov     ecx, [ebp+this]
.text:00000596                 mov     edx, [ecx+4]
.text:00000599                 add     edx, 1
.text:0000059C                 mov     eax, [ebp+this]
.text:0000059F                 mov     [eax+4], edx
.text:000005A2                 xor     eax, eax
.text:000005A4
.text:000005A4 loc_5A4:                                ; CODE XREF: CByteSwap2::QueryInterface(_GUID const &,void * *)+2Dj
.text:000005A4                 cmp     ebp, esp
.text:000005A6                 call    __RTC_CheckEsp
.text:000005AB                 pop     ebp
.text:000005AC                 retn    0Ch
.text:000005AC ?QueryInterface@CByteSwap2@@UAGJABU_GUID@@PAPAX@Z endp
.text:000005AC
.text:000005AC ; ---------------------------------------------------------------------------
.text:000005AF                 align 10h
.text:000005AF _text           ends
.text:000005AF
.text:000005B0 ; ===========================================================================
.text:000005B0
.text:000005B0 ; Segment type: Pure code
.text:000005B0 ; Segment permissions: Read/Execute
.text:000005B0 _text           segment para public 'CODE' use32
.text:000005B0                 assume cs:_text
.text:000005B0                 ;org 5B0h
.text:000005B0 ; COMDAT (pick any)
.text:000005B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000005B0
.text:000005B0 ; =============== S U B R O U T I N E =======================================
.text:000005B0
.text:000005B0 ; Attributes: bp-based frame
.text:000005B0
.text:000005B0 ; unsigned __int32 __stdcall CByteSwap2::AddRef(CByteSwap2 *this)
.text:000005B0                 public ?AddRef@CByteSwap2@@UAGKXZ
.text:000005B0 ?AddRef@CByteSwap2@@UAGKXZ proc near    ; DATA XREF: .rdata:000003B4o
.text:000005B0
.text:000005B0 var_4           = dword ptr -4
.text:000005B0 this            = dword ptr  8
.text:000005B0
.text:000005B0                 push    ebp
.text:000005B1                 mov     ebp, esp
.text:000005B3                 push    ecx
.text:000005B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005BB                 mov     eax, [ebp+this]
.text:000005BE                 mov     ecx, [eax+4]
.text:000005C1                 add     ecx, 1
.text:000005C4                 mov     [ebp+var_4], ecx
.text:000005C7                 mov     edx, [ebp+this]
.text:000005CA                 mov     eax, [ebp+var_4]
.text:000005CD                 mov     [edx+4], eax
.text:000005D0                 mov     eax, [ebp+var_4]
.text:000005D3                 mov     esp, ebp
.text:000005D5                 pop     ebp
.text:000005D6                 retn    4
.text:000005D6 ?AddRef@CByteSwap2@@UAGKXZ endp
.text:000005D6
.text:000005D6 ; ---------------------------------------------------------------------------
.text:000005D9                 align 4
.text:000005D9 _text           ends
.text:000005D9
.text:000005DC ; ===========================================================================
.text:000005DC
.text:000005DC ; Segment type: Pure code
.text:000005DC ; Segment permissions: Read/Execute
.text:000005DC _text           segment para public 'CODE' use32
.text:000005DC                 assume cs:_text
.text:000005DC                 ;org 5DCh
.text:000005DC ; COMDAT (pick any)
.text:000005DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000005DC
.text:000005DC ; =============== S U B R O U T I N E =======================================
.text:000005DC
.text:000005DC ; Attributes: bp-based frame
.text:000005DC
.text:000005DC ; unsigned __int32 __stdcall CByteSwap2::Release(CByteSwap2 *this)
.text:000005DC                 public ?Release@CByteSwap2@@UAGKXZ
.text:000005DC ?Release@CByteSwap2@@UAGKXZ proc near   ; DATA XREF: .rdata:000003B8o
.text:000005DC
.text:000005DC var_8           = dword ptr -8
.text:000005DC var_4           = dword ptr -4
.text:000005DC this            = dword ptr  8
.text:000005DC
.text:000005DC                 push    ebp
.text:000005DD                 mov     ebp, esp
.text:000005DF                 sub     esp, 8
.text:000005E2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005F0                 mov     eax, [ebp+this]
.text:000005F3                 mov     ecx, [eax+4]
.text:000005F6                 sub     ecx, 1
.text:000005F9                 mov     [ebp+var_8], ecx
.text:000005FC                 mov     edx, [ebp+this]
.text:000005FF                 mov     eax, [ebp+var_8]
.text:00000602                 mov     [edx+4], eax
.text:00000605                 cmp     [ebp+var_8], 0
.text:00000609                 jz      short loc_613
.text:0000060B                 mov     ecx, [ebp+this]
.text:0000060E                 mov     eax, [ecx+4]
.text:00000611                 jmp     short loc_627
.text:00000613 ; ---------------------------------------------------------------------------
.text:00000613
.text:00000613 loc_613:                                ; CODE XREF: CByteSwap2::Release(void)+2Dj
.text:00000613                 mov     edx, [ebp+this]
.text:00000616                 mov     [ebp+var_4], edx
.text:00000619                 mov     eax, [ebp+var_4]
.text:0000061C                 push    eax             ; void *
.text:0000061D                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000622                 add     esp, 4
.text:00000625                 xor     eax, eax
.text:00000627
.text:00000627 loc_627:                                ; CODE XREF: CByteSwap2::Release(void)+35j
.text:00000627                 add     esp, 8
.text:0000062A                 cmp     ebp, esp
.text:0000062C                 call    __RTC_CheckEsp
.text:00000631                 mov     esp, ebp
.text:00000633                 pop     ebp
.text:00000634                 retn    4
.text:00000634 ?Release@CByteSwap2@@UAGKXZ endp
.text:00000634
.text:00000634 ; ---------------------------------------------------------------------------
.text:00000637                 align 4
.text:00000637 _text           ends
.text:00000637
.text:00000638 ; ===========================================================================
.text:00000638
.text:00000638 ; Segment type: Pure code
.text:00000638 ; Segment permissions: Read/Execute
.text:00000638 _text           segment para public 'CODE' use32
.text:00000638                 assume cs:_text
.text:00000638                 ;org 638h
.text:00000638 ; COMDAT (pick any)
.text:00000638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000638
.text:00000638 ; =============== S U B R O U T I N E =======================================
.text:00000638
.text:00000638 ; Attributes: bp-based frame
.text:00000638
.text:00000638 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000638                 public ___@8
.text:00000638 ___@8           proc near               ; CODE XREF: CByteSwap2::QueryInterface(_GUID const &,void * *)+15p
.text:00000638                                         ; CByteSwap4::QueryInterface(_GUID const &,void * *)+15p
.text:00000638
.text:00000638 Buf1            = dword ptr  8
.text:00000638 Buf2            = dword ptr  0Ch
.text:00000638
.text:00000638                 push    ebp
.text:00000639                 mov     ebp, esp
.text:0000063B                 mov     eax, [ebp+Buf2]
.text:0000063E                 push    eax             ; Buf2
.text:0000063F                 mov     ecx, [ebp+Buf1]
.text:00000642                 push    ecx             ; Buf1
.text:00000643                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000648                 cmp     ebp, esp
.text:0000064A                 call    __RTC_CheckEsp
.text:0000064F                 pop     ebp
.text:00000650                 retn    8
.text:00000650 ___@8           endp
.text:00000650
.text:00000650 ; ---------------------------------------------------------------------------
.text:00000653                 align 4
.text:00000653 _text           ends
.text:00000653
.text:00000654 ; ===========================================================================
.text:00000654
.text:00000654 ; Segment type: Pure code
.text:00000654 ; Segment permissions: Read/Execute
.text:00000654 _text           segment para public 'CODE' use32
.text:00000654                 assume cs:_text
.text:00000654                 ;org 654h
.text:00000654 ; COMDAT (pick any)
.text:00000654                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000654
.text:00000654 ; =============== S U B R O U T I N E =======================================
.text:00000654
.text:00000654 ; Attributes: bp-based frame
.text:00000654
.text:00000654 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000654                 public _IsEqualGUID@8
.text:00000654 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000654
.text:00000654 Buf1            = dword ptr  8
.text:00000654 Buf2            = dword ptr  0Ch
.text:00000654
.text:00000654                 push    ebp
.text:00000655                 mov     ebp, esp
.text:00000657                 push    10h             ; Size
.text:00000659                 mov     eax, [ebp+Buf2]
.text:0000065C                 push    eax             ; Buf2
.text:0000065D                 mov     ecx, [ebp+Buf1]
.text:00000660                 push    ecx             ; Buf1
.text:00000661                 call    _memcmp
.text:00000666                 add     esp, 0Ch
.text:00000669                 neg     eax
.text:0000066B                 sbb     eax, eax
.text:0000066D                 add     eax, 1
.text:00000670                 cmp     ebp, esp
.text:00000672                 call    __RTC_CheckEsp
.text:00000677                 pop     ebp
.text:00000678                 retn    8
.text:00000678 _IsEqualGUID@8  endp
.text:00000678
.text:00000678 ; ---------------------------------------------------------------------------
.text:0000067B                 align 4
.text:0000067B _text           ends
.text:0000067B
.text:0000067C ; ===========================================================================
.text:0000067C
.text:0000067C ; Segment type: Pure code
.text:0000067C ; Segment permissions: Read/Execute
.text:0000067C _text           segment para public 'CODE' use32
.text:0000067C                 assume cs:_text
.text:0000067C                 ;org 67Ch
.text:0000067C ; COMDAT (pick any)
.text:0000067C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000067C
.text:0000067C ; =============== S U B R O U T I N E =======================================
.text:0000067C
.text:0000067C ; Attributes: bp-based frame
.text:0000067C
.text:0000067C ; _DWORD __thiscall ICompressFilter::ICompressFilter(ICompressFilter *__hidden this)
.text:0000067C                 public ??0ICompressFilter@@QAE@XZ
.text:0000067C ??0ICompressFilter@@QAE@XZ proc near    ; CODE XREF: CByteSwap2::CByteSwap2(void)+11p
.text:0000067C                                         ; CByteSwap4::CByteSwap4(void)+11p
.text:0000067C
.text:0000067C var_4           = dword ptr -4
.text:0000067C
.text:0000067C                 push    ebp
.text:0000067D                 mov     ebp, esp
.text:0000067F                 push    ecx
.text:00000680                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000687                 mov     [ebp+var_4], ecx
.text:0000068A                 mov     ecx, [ebp+var_4]
.text:0000068D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000692                 mov     eax, [ebp+var_4]
.text:00000695                 mov     dword ptr [eax], offset ??_7ICompressFilter@@6B@ ; const ICompressFilter::`vftable'
.text:0000069B                 mov     eax, [ebp+var_4]
.text:0000069E                 add     esp, 4
.text:000006A1                 cmp     ebp, esp
.text:000006A3                 call    __RTC_CheckEsp
.text:000006A8                 mov     esp, ebp
.text:000006AA                 pop     ebp
.text:000006AB                 retn
.text:000006AB ??0ICompressFilter@@QAE@XZ endp
.text:000006AB
.text:000006AB _text           ends
.text:000006AB
.rdata:000006AC ; ===========================================================================
.rdata:000006AC
.rdata:000006AC ; Segment type: Pure data
.rdata:000006AC ; Segment permissions: Read
.rdata:000006AC _rdata          segment dword public 'DATA' use32
.rdata:000006AC                 assume cs:_rdata
.rdata:000006AC                 ;org 6ACh
.rdata:000006AC ; COMDAT (pick largest)
.rdata:000006AC                 dd offset ??_R4ICompressFilter@@6B@ ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata:000006B0                 public ??_7ICompressFilter@@6B@
.rdata:000006B0 ; const ICompressFilter::`vftable'
.rdata:000006B0 ??_7ICompressFilter@@6B@ dd offset __purecall
.rdata:000006B0                                         ; DATA XREF: ICompressFilter::ICompressFilter(void)+19o
.rdata:000006B4                 dd offset __purecall
.rdata:000006B8                 dd offset __purecall
.rdata:000006BC                 dd offset __purecall
.rdata:000006C0                 dd offset __purecall
.rdata:000006C0 _rdata          ends
.rdata:000006C0
.rdata$r:000006C4 ; ===========================================================================
.rdata$r:000006C4
.rdata$r:000006C4 ; Segment type: Pure data
.rdata$r:000006C4 ; Segment permissions: Read
.rdata$r:000006C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006C4                 assume cs:_rdata$r
.rdata$r:000006C4                 ;org 6C4h
.rdata$r:000006C4 ; COMDAT (pick any)
.rdata$r:000006C4                 public ??_R4ICompressFilter@@6B@
.rdata$r:000006C4 ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata$r:000006C4 ??_R4ICompressFilter@@6B@ db    0       ; DATA XREF: .rdata:000006ACo
.rdata$r:000006C5                 db    0
.rdata$r:000006C6                 db    0
.rdata$r:000006C7                 db    0
.rdata$r:000006C8                 db    0
.rdata$r:000006C9                 db    0
.rdata$r:000006CA                 db    0
.rdata$r:000006CB                 db    0
.rdata$r:000006CC                 db    0
.rdata$r:000006CD                 db    0
.rdata$r:000006CE                 db    0
.rdata$r:000006CF                 db    0
.rdata$r:000006D0                 dd offset ??_R0?AUICompressFilter@@@8 ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:000006D4                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006D4 _rdata$r        ends
.rdata$r:000006D4
.text:000006D8 ; ===========================================================================
.text:000006D8
.text:000006D8 ; Segment type: Pure code
.text:000006D8 ; Segment permissions: Read/Execute
.text:000006D8 _text           segment para public 'CODE' use32
.text:000006D8                 assume cs:_text
.text:000006D8                 ;org 6D8h
.text:000006D8 ; COMDAT (pick any)
.text:000006D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000006D8
.text:000006D8 ; =============== S U B R O U T I N E =======================================
.text:000006D8
.text:000006D8 ; Attributes: bp-based frame
.text:000006D8
.text:000006D8 ; public: __thiscall IUnknown::IUnknown(void)
.text:000006D8                 public ??0IUnknown@@QAE@XZ
.text:000006D8 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressFilter::ICompressFilter(void)+11p
.text:000006D8
.text:000006D8 var_4           = dword ptr -4
.text:000006D8
.text:000006D8                 push    ebp
.text:000006D9                 mov     ebp, esp
.text:000006DB                 push    ecx
.text:000006DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006E3                 mov     [ebp+var_4], ecx
.text:000006E6                 mov     eax, [ebp+var_4]
.text:000006E9                 mov     esp, ebp
.text:000006EB                 pop     ebp
.text:000006EC                 retn
.text:000006EC ??0IUnknown@@QAE@XZ endp
.text:000006EC
.text:000006EC ; ---------------------------------------------------------------------------
.text:000006ED                 align 10h
.text:000006ED _text           ends
.text:000006ED
.text:000006F0 ; ===========================================================================
.text:000006F0
.text:000006F0 ; Segment type: Pure code
.text:000006F0 ; Segment permissions: Read/Execute
.text:000006F0 _text           segment para public 'CODE' use32
.text:000006F0                 assume cs:_text
.text:000006F0                 ;org 6F0h
.text:000006F0 ; COMDAT (pick any)
.text:000006F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000006F0
.text:000006F0 ; =============== S U B R O U T I N E =======================================
.text:000006F0
.text:000006F0 ; Attributes: bp-based frame
.text:000006F0
.text:000006F0 ; public: __thiscall CByteSwap4::CByteSwap4(void)
.text:000006F0                 public ??0CByteSwap4@@QAE@XZ
.text:000006F0 ??0CByteSwap4@@QAE@XZ proc near         ; CODE XREF: CreateFilter4(void)+57p
.text:000006F0
.text:000006F0 var_4           = dword ptr -4
.text:000006F0
.text:000006F0                 push    ebp
.text:000006F1                 mov     ebp, esp
.text:000006F3                 push    ecx
.text:000006F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006FB                 mov     [ebp+var_4], ecx
.text:000006FE                 mov     ecx, [ebp+var_4] ; this
.text:00000701                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:00000706                 mov     ecx, [ebp+var_4]
.text:00000709                 add     ecx, 4          ; this
.text:0000070C                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000711                 mov     eax, [ebp+var_4]
.text:00000714                 mov     dword ptr [eax], offset ??_7CByteSwap4@@6B@ ; const CByteSwap4::`vftable'
.text:0000071A                 mov     eax, [ebp+var_4]
.text:0000071D                 add     esp, 4
.text:00000720                 cmp     ebp, esp
.text:00000722                 call    __RTC_CheckEsp
.text:00000727                 mov     esp, ebp
.text:00000729                 pop     ebp
.text:0000072A                 retn
.text:0000072A ??0CByteSwap4@@QAE@XZ endp
.text:0000072A
.text:0000072A ; ---------------------------------------------------------------------------
.text:0000072B                 align 4
.text:0000072B _text           ends
.text:0000072B
.rdata:0000072C ; ===========================================================================
.rdata:0000072C
.rdata:0000072C ; Segment type: Pure data
.rdata:0000072C ; Segment permissions: Read
.rdata:0000072C _rdata          segment dword public 'DATA' use32
.rdata:0000072C                 assume cs:_rdata
.rdata:0000072C                 ;org 72Ch
.rdata:0000072C ; COMDAT (pick largest)
.rdata:0000072C                 dd offset ??_R4CByteSwap4@@6B@ ; const CByteSwap4::`RTTI Complete Object Locator'
.rdata:00000730                 public ??_7CByteSwap4@@6B@
.rdata:00000730 ; const CByteSwap4::`vftable'
.rdata:00000730 ??_7CByteSwap4@@6B@ dd offset ?QueryInterface@CByteSwap4@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000730                                         ; DATA XREF: CByteSwap4::CByteSwap4(void)+24o
.rdata:00000730                                         ; CByteSwap4::QueryInterface(_GUID const &,void * *)
.rdata:00000734                 dd offset ?AddRef@CByteSwap4@@UAGKXZ ; CByteSwap4::AddRef(void)
.rdata:00000738                 dd offset ?Release@CByteSwap4@@UAGKXZ ; CByteSwap4::Release(void)
.rdata:0000073C                 dd offset ?Init@CByteSwap4@@UAGJXZ ; CByteSwap4::Init(void)
.rdata:00000740                 dd offset ?Filter@CByteSwap4@@UAGIPAEI@Z ; CByteSwap4::Filter(uchar *,uint)
.rdata:00000740 _rdata          ends
.rdata:00000740
.rdata$r:00000744 ; ===========================================================================
.rdata$r:00000744
.rdata$r:00000744 ; Segment type: Pure data
.rdata$r:00000744 ; Segment permissions: Read
.rdata$r:00000744 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000744                 assume cs:_rdata$r
.rdata$r:00000744                 ;org 744h
.rdata$r:00000744 ; COMDAT (pick any)
.rdata$r:00000744                 public ??_R4CByteSwap4@@6B@
.rdata$r:00000744 ; const CByteSwap4::`RTTI Complete Object Locator'
.rdata$r:00000744 ??_R4CByteSwap4@@6B@ db    0            ; DATA XREF: .rdata:0000072Co
.rdata$r:00000745                 db    0
.rdata$r:00000746                 db    0
.rdata$r:00000747                 db    0
.rdata$r:00000748                 db    0
.rdata$r:00000749                 db    0
.rdata$r:0000074A                 db    0
.rdata$r:0000074B                 db    0
.rdata$r:0000074C                 db    0
.rdata$r:0000074D                 db    0
.rdata$r:0000074E                 db    0
.rdata$r:0000074F                 db    0
.rdata$r:00000750                 dd offset ??_R0?AVCByteSwap4@@@8 ; CByteSwap4 `RTTI Type Descriptor'
.rdata$r:00000754                 dd offset ??_R3CByteSwap4@@8 ; CByteSwap4::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000754 _rdata$r        ends
.rdata$r:00000754
.data:00000758 ; ===========================================================================
.data:00000758
.data:00000758 ; Segment type: Pure data
.data:00000758 ; Segment permissions: Read/Write
.data:00000758 _data           segment dword public 'DATA' use32
.data:00000758                 assume cs:_data
.data:00000758                 ;org 758h
.data:00000758 ; COMDAT (pick any)
.data:00000758                 public ??_R0?AVCByteSwap4@@@8
.data:00000758 ; class CByteSwap4 `RTTI Type Descriptor'
.data:00000758 ??_R0?AVCByteSwap4@@@8 dd offset ??_7type_info@@6B@
.data:00000758                                         ; DATA XREF: .rdata$r:00000750o
.data:00000758                                         ; .rdata$r:CByteSwap4::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000758                                         ; const type_info::`vftable'
.data:0000075C                 align 10h
.data:00000760 a_?avcbyteswap4 db '.?AVCByteSwap4@@',0
.data:00000771                 align 4
.data:00000771 _data           ends
.data:00000771
.rdata$r:00000774 ; ===========================================================================
.rdata$r:00000774
.rdata$r:00000774 ; Segment type: Pure data
.rdata$r:00000774 ; Segment permissions: Read
.rdata$r:00000774 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000774                 assume cs:_rdata$r
.rdata$r:00000774                 ;org 774h
.rdata$r:00000774 ; COMDAT (pick any)
.rdata$r:00000774                 public ??_R3CByteSwap4@@8
.rdata$r:00000774 ; CByteSwap4::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000774 ??_R3CByteSwap4@@8 db    0              ; DATA XREF: .rdata$r:00000754o
.rdata$r:00000774                                         ; .rdata$r:000007B0o
.rdata$r:00000775                 db    0
.rdata$r:00000776                 db    0
.rdata$r:00000777                 db    0
.rdata$r:00000778                 db    1
.rdata$r:00000779                 db    0
.rdata$r:0000077A                 db    0
.rdata$r:0000077B                 db    0
.rdata$r:0000077C                 db    4
.rdata$r:0000077D                 db    0
.rdata$r:0000077E                 db    0
.rdata$r:0000077F                 db    0
.rdata$r:00000780                 dd offset ??_R2CByteSwap4@@8 ; CByteSwap4::`RTTI Base Class Array'
.rdata$r:00000780 _rdata$r        ends
.rdata$r:00000780
.rdata$r:00000784 ; ===========================================================================
.rdata$r:00000784
.rdata$r:00000784 ; Segment type: Pure data
.rdata$r:00000784 ; Segment permissions: Read
.rdata$r:00000784 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000784                 assume cs:_rdata$r
.rdata$r:00000784                 ;org 784h
.rdata$r:00000784 ; COMDAT (pick any)
.rdata$r:00000784                 public ??_R2CByteSwap4@@8
.rdata$r:00000784 ; CByteSwap4::`RTTI Base Class Array'
.rdata$r:00000784 ??_R2CByteSwap4@@8 dd offset ??_R1A@?0A@EA@CByteSwap4@@8
.rdata$r:00000784                                         ; DATA XREF: .rdata$r:00000780o
.rdata$r:00000784                                         ; CByteSwap4::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000788                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000078C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000790                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000794                 db    0
.rdata$r:00000795                 align 4
.rdata$r:00000795 _rdata$r        ends
.rdata$r:00000795
.rdata$r:00000798 ; ===========================================================================
.rdata$r:00000798
.rdata$r:00000798 ; Segment type: Pure data
.rdata$r:00000798 ; Segment permissions: Read
.rdata$r:00000798 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000798                 assume cs:_rdata$r
.rdata$r:00000798                 ;org 798h
.rdata$r:00000798 ; COMDAT (pick any)
.rdata$r:00000798                 public ??_R1A@?0A@EA@CByteSwap4@@8
.rdata$r:00000798 ; CByteSwap4::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000798 ??_R1A@?0A@EA@CByteSwap4@@8 dd offset ??_R0?AVCByteSwap4@@@8
.rdata$r:00000798                                         ; DATA XREF: .rdata$r:CByteSwap4::`RTTI Base Class Array'o
.rdata$r:00000798                                         ; CByteSwap4 `RTTI Type Descriptor'
.rdata$r:0000079C                 db    3
.rdata$r:0000079D                 db    0
.rdata$r:0000079E                 db    0
.rdata$r:0000079F                 db    0
.rdata$r:000007A0                 db    0
.rdata$r:000007A1                 db    0
.rdata$r:000007A2                 db    0
.rdata$r:000007A3                 db    0
.rdata$r:000007A4                 db 0FFh
.rdata$r:000007A5                 db 0FFh
.rdata$r:000007A6                 db 0FFh
.rdata$r:000007A7                 db 0FFh
.rdata$r:000007A8                 db    0
.rdata$r:000007A9                 db    0
.rdata$r:000007AA                 db    0
.rdata$r:000007AB                 db    0
.rdata$r:000007AC                 db  40h ; @
.rdata$r:000007AD                 db    0
.rdata$r:000007AE                 db    0
.rdata$r:000007AF                 db    0
.rdata$r:000007B0                 dd offset ??_R3CByteSwap4@@8 ; CByteSwap4::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007B0 _rdata$r        ends
.rdata$r:000007B0
.text:000007B4 ; ===========================================================================
.text:000007B4
.text:000007B4 ; Segment type: Pure code
.text:000007B4 ; Segment permissions: Read/Execute
.text:000007B4 _text           segment para public 'CODE' use32
.text:000007B4                 assume cs:_text
.text:000007B4                 ;org 7B4h
.text:000007B4 ; COMDAT (pick any)
.text:000007B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007B4
.text:000007B4 ; =============== S U B R O U T I N E =======================================
.text:000007B4
.text:000007B4 ; Attributes: bp-based frame
.text:000007B4
.text:000007B4 ; __int32 __stdcall CByteSwap4::QueryInterface(CByteSwap4 *this, const struct _GUID *Buf1, void **)
.text:000007B4                 public ?QueryInterface@CByteSwap4@@UAGJABU_GUID@@PAPAX@Z
.text:000007B4 ?QueryInterface@CByteSwap4@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000007B4                                         ; DATA XREF: .rdata:const CByteSwap4::`vftable'o
.text:000007B4
.text:000007B4 this            = dword ptr  8
.text:000007B4 Buf1            = dword ptr  0Ch
.text:000007B4 arg_8           = dword ptr  10h
.text:000007B4
.text:000007B4                 push    ebp
.text:000007B5                 mov     ebp, esp
.text:000007B7                 mov     eax, [ebp+arg_8]
.text:000007BA                 mov     dword ptr [eax], 0
.text:000007C0                 push    offset _IID_IUnknown ; Buf2
.text:000007C5                 mov     ecx, [ebp+Buf1]
.text:000007C8                 push    ecx             ; Buf1
.text:000007C9                 call    ___@8           ; __(x,x)
.text:000007CE                 test    eax, eax
.text:000007D0                 jz      short loc_7DC
.text:000007D2                 mov     edx, [ebp+arg_8]
.text:000007D5                 mov     eax, [ebp+this]
.text:000007D8                 mov     [edx], eax
.text:000007DA                 jmp     short loc_7E3
.text:000007DC ; ---------------------------------------------------------------------------
.text:000007DC
.text:000007DC loc_7DC:                                ; CODE XREF: CByteSwap4::QueryInterface(_GUID const &,void * *)+1Cj
.text:000007DC                 mov     eax, 80004002h
.text:000007E1                 jmp     short loc_7F4
.text:000007E3 ; ---------------------------------------------------------------------------
.text:000007E3
.text:000007E3 loc_7E3:                                ; CODE XREF: CByteSwap4::QueryInterface(_GUID const &,void * *)+26j
.text:000007E3                 mov     ecx, [ebp+this]
.text:000007E6                 mov     edx, [ecx+4]
.text:000007E9                 add     edx, 1
.text:000007EC                 mov     eax, [ebp+this]
.text:000007EF                 mov     [eax+4], edx
.text:000007F2                 xor     eax, eax
.text:000007F4
.text:000007F4 loc_7F4:                                ; CODE XREF: CByteSwap4::QueryInterface(_GUID const &,void * *)+2Dj
.text:000007F4                 cmp     ebp, esp
.text:000007F6                 call    __RTC_CheckEsp
.text:000007FB                 pop     ebp
.text:000007FC                 retn    0Ch
.text:000007FC ?QueryInterface@CByteSwap4@@UAGJABU_GUID@@PAPAX@Z endp
.text:000007FC
.text:000007FC ; ---------------------------------------------------------------------------
.text:000007FF                 align 10h
.text:000007FF _text           ends
.text:000007FF
.text:00000800 ; ===========================================================================
.text:00000800
.text:00000800 ; Segment type: Pure code
.text:00000800 ; Segment permissions: Read/Execute
.text:00000800 _text           segment para public 'CODE' use32
.text:00000800                 assume cs:_text
.text:00000800                 ;org 800h
.text:00000800 ; COMDAT (pick any)
.text:00000800                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000800
.text:00000800 ; =============== S U B R O U T I N E =======================================
.text:00000800
.text:00000800 ; Attributes: bp-based frame
.text:00000800
.text:00000800 ; unsigned __int32 __stdcall CByteSwap4::AddRef(CByteSwap4 *this)
.text:00000800                 public ?AddRef@CByteSwap4@@UAGKXZ
.text:00000800 ?AddRef@CByteSwap4@@UAGKXZ proc near    ; DATA XREF: .rdata:00000734o
.text:00000800
.text:00000800 var_4           = dword ptr -4
.text:00000800 this            = dword ptr  8
.text:00000800
.text:00000800                 push    ebp
.text:00000801                 mov     ebp, esp
.text:00000803                 push    ecx
.text:00000804                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000080B                 mov     eax, [ebp+this]
.text:0000080E                 mov     ecx, [eax+4]
.text:00000811                 add     ecx, 1
.text:00000814                 mov     [ebp+var_4], ecx
.text:00000817                 mov     edx, [ebp+this]
.text:0000081A                 mov     eax, [ebp+var_4]
.text:0000081D                 mov     [edx+4], eax
.text:00000820                 mov     eax, [ebp+var_4]
.text:00000823                 mov     esp, ebp
.text:00000825                 pop     ebp
.text:00000826                 retn    4
.text:00000826 ?AddRef@CByteSwap4@@UAGKXZ endp
.text:00000826
.text:00000826 ; ---------------------------------------------------------------------------
.text:00000829                 align 4
.text:00000829 _text           ends
.text:00000829
.text:0000082C ; ===========================================================================
.text:0000082C
.text:0000082C ; Segment type: Pure code
.text:0000082C ; Segment permissions: Read/Execute
.text:0000082C _text           segment para public 'CODE' use32
.text:0000082C                 assume cs:_text
.text:0000082C                 ;org 82Ch
.text:0000082C ; COMDAT (pick any)
.text:0000082C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000082C
.text:0000082C ; =============== S U B R O U T I N E =======================================
.text:0000082C
.text:0000082C ; Attributes: bp-based frame
.text:0000082C
.text:0000082C ; unsigned __int32 __stdcall CByteSwap4::Release(CByteSwap4 *this)
.text:0000082C                 public ?Release@CByteSwap4@@UAGKXZ
.text:0000082C ?Release@CByteSwap4@@UAGKXZ proc near   ; DATA XREF: .rdata:00000738o
.text:0000082C
.text:0000082C var_8           = dword ptr -8
.text:0000082C var_4           = dword ptr -4
.text:0000082C this            = dword ptr  8
.text:0000082C
.text:0000082C                 push    ebp
.text:0000082D                 mov     ebp, esp
.text:0000082F                 sub     esp, 8
.text:00000832                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000839                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000840                 mov     eax, [ebp+this]
.text:00000843                 mov     ecx, [eax+4]
.text:00000846                 sub     ecx, 1
.text:00000849                 mov     [ebp+var_8], ecx
.text:0000084C                 mov     edx, [ebp+this]
.text:0000084F                 mov     eax, [ebp+var_8]
.text:00000852                 mov     [edx+4], eax
.text:00000855                 cmp     [ebp+var_8], 0
.text:00000859                 jz      short loc_863
.text:0000085B                 mov     ecx, [ebp+this]
.text:0000085E                 mov     eax, [ecx+4]
.text:00000861                 jmp     short loc_877
.text:00000863 ; ---------------------------------------------------------------------------
.text:00000863
.text:00000863 loc_863:                                ; CODE XREF: CByteSwap4::Release(void)+2Dj
.text:00000863                 mov     edx, [ebp+this]
.text:00000866                 mov     [ebp+var_4], edx
.text:00000869                 mov     eax, [ebp+var_4]
.text:0000086C                 push    eax             ; void *
.text:0000086D                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000872                 add     esp, 4
.text:00000875                 xor     eax, eax
.text:00000877
.text:00000877 loc_877:                                ; CODE XREF: CByteSwap4::Release(void)+35j
.text:00000877                 add     esp, 8
.text:0000087A                 cmp     ebp, esp
.text:0000087C                 call    __RTC_CheckEsp
.text:00000881                 mov     esp, ebp
.text:00000883                 pop     ebp
.text:00000884                 retn    4
.text:00000884 ?Release@CByteSwap4@@UAGKXZ endp
.text:00000884
.text:00000884 ; ---------------------------------------------------------------------------
.text:00000887                 align 4
.text:00000887 _text           ends
.text:00000887
.text$yc:00000888 ; ===========================================================================
.text$yc:00000888
.text$yc:00000888 ; Segment type: Pure code
.text$yc:00000888 ; Segment permissions: Read/Execute
.text$yc:00000888 _text$yc        segment para public 'CODE' use32
.text$yc:00000888                 assume cs:_text$yc
.text$yc:00000888                 ;org 888h
.text$yc:00000888 ; COMDAT (pick any)
.text$yc:00000888                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00000888
.text$yc:00000888 ; =============== S U B R O U T I N E =======================================
.text$yc:00000888
.text$yc:00000888 ; Attributes: bp-based frame
.text$yc:00000888
.text$yc:00000888 ; void __cdecl `dynamic initializer for 'g_RegisterCodecs''(void)
.text$yc:00000888 ??__Eg_RegisterCodecs@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:_g_RegisterCodecs$initializer$o
.text$yc:00000888                 push    ebp
.text$yc:00000889                 mov     ebp, esp
.text$yc:0000088B                 mov     ecx, offset _g_RegisterCodecs ; this
.text$yc:00000890                 call    ??0CRegisterCodecsByteSwap@@QAE@XZ ; CRegisterCodecsByteSwap::CRegisterCodecsByteSwap(void)
.text$yc:00000895                 cmp     ebp, esp
.text$yc:00000897                 call    __RTC_CheckEsp
.text$yc:0000089C                 pop     ebp
.text$yc:0000089D                 retn
.text$yc:0000089D ??__Eg_RegisterCodecs@@YAXXZ endp
.text$yc:0000089D
.text$yc:0000089D ; ---------------------------------------------------------------------------
.text$yc:0000089E                 align 10h
.text$yc:0000089E _text$yc        ends
.text$yc:0000089E
.text:000008A0 ; ===========================================================================
.text:000008A0
.text:000008A0 ; Segment type: Pure code
.text:000008A0 ; Segment permissions: Read/Execute
.text:000008A0 _text           segment para public 'CODE' use32
.text:000008A0                 assume cs:_text
.text:000008A0                 ;org 8A0h
.text:000008A0 ; COMDAT (pick any)
.text:000008A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008A0
.text:000008A0 ; =============== S U B R O U T I N E =======================================
.text:000008A0
.text:000008A0 ; Attributes: bp-based frame
.text:000008A0
.text:000008A0 ; _DWORD __thiscall CRegisterCodecsByteSwap::CRegisterCodecsByteSwap(CRegisterCodecsByteSwap *__hidden this)
.text:000008A0                 public ??0CRegisterCodecsByteSwap@@QAE@XZ
.text:000008A0 ??0CRegisterCodecsByteSwap@@QAE@XZ proc near
.text:000008A0                                         ; CODE XREF: `dynamic initializer for 'g_RegisterCodecs''(void)+8p
.text:000008A0
.text:000008A0 var_8           = dword ptr -8
.text:000008A0 var_4           = dword ptr -4
.text:000008A0
.text:000008A0                 push    ebp
.text:000008A1                 mov     ebp, esp
.text:000008A3                 sub     esp, 8
.text:000008A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000008AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008B4                 mov     [ebp+var_4], ecx
.text:000008B7                 mov     [ebp+var_8], 0
.text:000008BE                 jmp     short loc_8C9
.text:000008C0 ; ---------------------------------------------------------------------------
.text:000008C0
.text:000008C0 loc_8C0:                                ; CODE XREF: CRegisterCodecsByteSwap::CRegisterCodecsByteSwap(void)+41j
.text:000008C0                 mov     eax, [ebp+var_8]
.text:000008C3                 add     eax, 1
.text:000008C6                 mov     [ebp+var_8], eax
.text:000008C9
.text:000008C9 loc_8C9:                                ; CODE XREF: CRegisterCodecsByteSwap::CRegisterCodecsByteSwap(void)+1Ej
.text:000008C9                 cmp     [ebp+var_8], 2
.text:000008CD                 jnb     short loc_8E3
.text:000008CF                 mov     ecx, [ebp+var_8]
.text:000008D2                 shl     ecx, 5
.text:000008D5                 add     ecx, offset _g_CodecsInfo
.text:000008DB                 push    ecx             ; struct CCodecInfo *
.text:000008DC                 call    ?RegisterCodec@@YGXPBUCCodecInfo@@@Z ; RegisterCodec(CCodecInfo const *)
.text:000008E1                 jmp     short loc_8C0
.text:000008E3 ; ---------------------------------------------------------------------------
.text:000008E3
.text:000008E3 loc_8E3:                                ; CODE XREF: CRegisterCodecsByteSwap::CRegisterCodecsByteSwap(void)+2Dj
.text:000008E3                 mov     eax, [ebp+var_4]
.text:000008E6                 add     esp, 8
.text:000008E9                 cmp     ebp, esp
.text:000008EB                 call    __RTC_CheckEsp
.text:000008F0                 mov     esp, ebp
.text:000008F2                 pop     ebp
.text:000008F3                 retn
.text:000008F3 ??0CRegisterCodecsByteSwap@@QAE@XZ endp
.text:000008F3
.text:000008F3 _text           ends
.text:000008F3
.bss:000008F4 ; ===========================================================================
.bss:000008F4
.bss:000008F4 ; Segment type: Uninitialized
.bss:000008F4 ; Segment permissions: Read/Write
.bss:000008F4 _bss            segment byte public 'BSS' use32
.bss:000008F4                 assume cs:_bss
.bss:000008F4                 ;org 8F4h
.bss:000008F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000008F4 ; CRegisterCodecsByteSwap g_RegisterCodecs
.bss:000008F4 _g_RegisterCodecs db    ? ;             ; DATA XREF: `dynamic initializer for 'g_RegisterCodecs''(void)+3o
.bss:000008F5                 align 4
.bss:000008F5 _bss            ends
.bss:000008F5
.CRT$XCU:000008F8 ; ===========================================================================
.CRT$XCU:000008F8
.CRT$XCU:000008F8 ; Segment type: Pure data
.CRT$XCU:000008F8 ; Segment permissions: Read
.CRT$XCU:000008F8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000008F8                 assume cs:_CRT$XCU
.CRT$XCU:000008F8                 ;org 8F8h
.CRT$XCU:000008F8 _g_RegisterCodecs$initializer$ dd offset ??__Eg_RegisterCodecs@@YAXXZ ; `dynamic initializer for 'g_RegisterCodecs''(void)
.CRT$XCU:000008F8 _CRT$XCU        ends
.CRT$XCU:000008F8
UNDEF:00000900 ; ===========================================================================
UNDEF:00000900
UNDEF:00000900 ; Segment type: Externs
UNDEF:00000900 ; UNDEF
UNDEF:00000900                 extrn __RTC_Shutdown:near
UNDEF:00000900                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000904                 extrn __RTC_InitBase:near
UNDEF:00000904                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000908 ; void __cdecl operator delete(void *)
UNDEF:00000908                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateFilter2@@YGPAXXZ$0+4p
UNDEF:00000908                                         ; __unwindfunclet$?CreateFilter4@@YGPAXXZ$0+4p ...
UNDEF:0000090C ; void *__cdecl operator new(unsigned int)
UNDEF:0000090C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateFilter2(void)+3Cp
UNDEF:0000090C                                         ; CreateFilter4(void)+3Cp
UNDEF:00000910                 extrn ___security_cookie:near
UNDEF:00000910                                         ; DATA XREF: CreateFilter2(void)+29r
UNDEF:00000910                                         ; CreateFilter4(void)+29r
UNDEF:00000914                 extrn ___CxxFrameHandler3:near
UNDEF:00000914                                         ; CODE XREF: __ehhandler$?CreateFilter2@@YGPAXXZ+16j
UNDEF:00000914                                         ; __ehhandler$?CreateFilter4@@YGPAXXZ+16j
UNDEF:00000918 ; __fastcall __security_check_cookie(x)
UNDEF:00000918                 extrn @__security_check_cookie@4:near
UNDEF:00000918                                         ; CODE XREF: __ehhandler$?CreateFilter2@@YGPAXXZ+Cp
UNDEF:00000918                                         ; __ehhandler$?CreateFilter4@@YGPAXXZ+Cp
UNDEF:0000091C                 extrn __RTC_CheckEsp:near
UNDEF:0000091C                                         ; CODE XREF: CreateFilter2(void)+88p
UNDEF:0000091C                                         ; CreateFilter4(void)+88p ...
UNDEF:00000920 ; const type_info::`vftable'
UNDEF:00000920                 extrn ??_7type_info@@6B@:near
UNDEF:00000920                                         ; DATA XREF: .data:CByteSwap2 `RTTI Type Descriptor'o
UNDEF:00000920                                         ; .data:ICompressFilter `RTTI Type Descriptor'o ...
UNDEF:00000924 ; const IID IID_IUnknown
UNDEF:00000924                 extrn _IID_IUnknown:near
UNDEF:00000924                                         ; DATA XREF: CByteSwap2::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00000924                                         ; CByteSwap4::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00000928 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000928                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:0000092C                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressFilter::`vftable'o
UNDEF:0000092C                                         ; .rdata:000006B4o ...
UNDEF:00000930 ; void __stdcall RegisterCodec(const struct CCodecInfo *)
UNDEF:00000930                 extrn ?RegisterCodec@@YGXPBUCCodecInfo@@@Z:near
UNDEF:00000930                                         ; CODE XREF: CRegisterCodecsByteSwap::CRegisterCodecsByteSwap(void)+3Cp
UNDEF:00000930
UNDEF:00000930
UNDEF:00000930                 end