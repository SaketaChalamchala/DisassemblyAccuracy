.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 5332FFB124C522FB5ADAA3AF39FB5B8B
.rdata:00000000 ; Input CRC32 : B217844D
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\BraIA64.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000 .intel_syntax noprefix
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kBranchTable   db 0                    ; DATA XREF: _IA64_Convert@16+5Cr
.rdata:00000001                 align 10h
.rdata:00000010                 db    4
.rdata:00000011                 db    4
.rdata:00000012                 db    6
.rdata:00000013                 db    6
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    7
.rdata:00000017                 db    7
.rdata:00000018                 db    4
.rdata:00000019                 db    4
.rdata:0000001A                 db    0
.rdata:0000001B                 db    0
.rdata:0000001C                 db    4
.rdata:0000001D                 db    4
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:0000001F _rdata          ends
.rdata:0000001F
.text:00000020 ; ===========================================================================
.text:00000020
.text:00000020 ; Segment type: Pure code
.text:00000020 ; Segment permissions: Read/Execute
.text:00000020 _text           segment para public 'CODE' use32
.text:00000020                 assume cs:_text
.text:00000020                 ;org 20h
.text:00000020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020                 public _IA64_Convert@16
.text:00000020 _IA64_Convert@16 proc near
.text:00000020
.text:00000020 var_48          = dword ptr -48h
.text:00000020 var_44          = dword ptr -44h
.text:00000020 var_40          = dword ptr -40h
.text:00000020 var_3C          = dword ptr -3Ch
.text:00000020 var_38          = dword ptr -38h
.text:00000020 var_34          = dword ptr -34h
.text:00000020 var_30          = dword ptr -30h
.text:00000020 var_2C          = dword ptr -2Ch
.text:00000020 var_28          = dword ptr -28h
.text:00000020 var_24          = dword ptr -24h
.text:00000020 var_20          = dword ptr -20h
.text:00000020 var_1C          = dword ptr -1Ch
.text:00000020 var_18          = dword ptr -18h
.text:00000020 var_14          = dword ptr -14h
.text:00000020 var_10          = dword ptr -10h
.text:00000020 var_C           = dword ptr -0Ch
.text:00000020 var_8           = dword ptr -8
.text:00000020 var_4           = dword ptr -4
.text:00000020 arg_0           = dword ptr  8
.text:00000020 arg_4           = dword ptr  0Ch
.text:00000020 arg_8           = dword ptr  10h
.text:00000020 arg_C           = dword ptr  14h
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 sub     esp, 48h
.text:00000026                 push    edi
.text:00000027                 lea     edi, [ebp+var_48]
.text:0000002A                 mov     ecx, 12h
.text:0000002F                 mov     eax, 0CCCCCCCCh
.text:00000034                 rep stosd
.text:00000036                 cmp     [ebp+arg_4], 10h
.text:0000003A                 jnb     short loc_43
.text:0000003C                 xor     eax, eax
.text:0000003E                 jmp     loc_2B7
.text:00000043 ; ---------------------------------------------------------------------------
.text:00000043
.text:00000043 loc_43:                                 ; CODE XREF: _IA64_Convert@16+1Aj
.text:00000043                 mov     eax, [ebp+arg_4]
.text:00000046                 sub     eax, 10h
.text:00000049                 mov     [ebp+arg_4], eax
.text:0000004C                 mov     [ebp+var_4], 0
.text:00000053                 jmp     short loc_5E
.text:00000055 ; ---------------------------------------------------------------------------
.text:00000055
.text:00000055 loc_55:                                 ; CODE XREF: _IA64_Convert@16:loc_2AFj
.text:00000055                 mov     ecx, [ebp+var_4]
.text:00000058                 add     ecx, 10h
.text:0000005B                 mov     [ebp+var_4], ecx
.text:0000005E
.text:0000005E loc_5E:                                 ; CODE XREF: _IA64_Convert@16+33j
.text:0000005E                 mov     edx, [ebp+var_4]
.text:00000061                 cmp     edx, [ebp+arg_4]
.text:00000064                 ja      loc_2B4
.text:0000006A                 mov     eax, [ebp+arg_0]
.text:0000006D                 add     eax, [ebp+var_4]
.text:00000070                 movzx   ecx, byte ptr [eax]
.text:00000073                 and     ecx, 1Fh
.text:00000076                 mov     [ebp+var_8], ecx
.text:00000079                 mov     edx, [ebp+var_8]
.text:0000007C                 movzx   eax, _kBranchTable[edx]
.text:00000083                 mov     [ebp+var_C], eax
.text:00000086                 mov     [ebp+var_10], 5
.text:0000008D                 mov     [ebp+var_14], 0
.text:00000094                 jmp     short loc_A8
.text:00000096 ; ---------------------------------------------------------------------------
.text:00000096
.text:00000096 loc_96:                                 ; CODE XREF: _IA64_Convert@16+9Fj
.text:00000096                                         ; _IA64_Convert@16:loc_2AAj
.text:00000096                 mov     ecx, [ebp+var_14]
.text:00000099                 add     ecx, 1
.text:0000009C                 mov     [ebp+var_14], ecx
.text:0000009F                 mov     edx, [ebp+var_10]
.text:000000A2                 add     edx, 29h ; ')'
.text:000000A5                 mov     [ebp+var_10], edx
.text:000000A8
.text:000000A8 loc_A8:                                 ; CODE XREF: _IA64_Convert@16+74j
.text:000000A8                 cmp     [ebp+var_14], 3
.text:000000AC                 jge     loc_2AF
.text:000000B2                 mov     eax, [ebp+var_C]
.text:000000B5                 mov     ecx, [ebp+var_14]
.text:000000B8                 shr     eax, cl
.text:000000BA                 and     eax, 1
.text:000000BD                 jnz     short loc_C1
.text:000000BF                 jmp     short loc_96
.text:000000C1 ; ---------------------------------------------------------------------------
.text:000000C1
.text:000000C1 loc_C1:                                 ; CODE XREF: _IA64_Convert@16+9Dj
.text:000000C1                 mov     ecx, [ebp+var_10]
.text:000000C4                 shr     ecx, 3
.text:000000C7                 mov     [ebp+var_18], ecx
.text:000000CA                 mov     edx, [ebp+var_10]
.text:000000CD                 and     edx, 7
.text:000000D0                 mov     [ebp+var_1C], edx
.text:000000D3                 mov     [ebp+var_24], 0
.text:000000DA                 mov     [ebp+var_20], 0
.text:000000E1                 mov     [ebp+var_30], 0
.text:000000E8                 jmp     short loc_F3
.text:000000EA ; ---------------------------------------------------------------------------
.text:000000EA
.text:000000EA loc_EA:                                 ; CODE XREF: _IA64_Convert@16+101j
.text:000000EA                 mov     eax, [ebp+var_30]
.text:000000ED                 add     eax, 1
.text:000000F0                 mov     [ebp+var_30], eax
.text:000000F3
.text:000000F3 loc_F3:                                 ; CODE XREF: _IA64_Convert@16+C8j
.text:000000F3                 cmp     [ebp+var_30], 6
.text:000000F7                 jge     short loc_123
.text:000000F9                 mov     ecx, [ebp+var_4]
.text:000000FC                 add     ecx, [ebp+var_30]
.text:000000FF                 add     ecx, [ebp+var_18]
.text:00000102                 mov     edx, [ebp+arg_0]
.text:00000105                 movzx   eax, byte ptr [edx+ecx]
.text:00000109                 cdq
.text:0000010A                 mov     ecx, [ebp+var_30]
.text:0000010D                 shl     ecx, 3
.text:00000110                 call    __allshl
.text:00000115                 add     eax, [ebp+var_24]
.text:00000118                 adc     edx, [ebp+var_20]
.text:0000011B                 mov     [ebp+var_24], eax
.text:0000011E                 mov     [ebp+var_20], edx
.text:00000121                 jmp     short loc_EA
.text:00000123 ; ---------------------------------------------------------------------------
.text:00000123
.text:00000123 loc_123:                                ; CODE XREF: _IA64_Convert@16+D7j
.text:00000123                 mov     eax, [ebp+var_24]
.text:00000126                 mov     edx, [ebp+var_20]
.text:00000129                 mov     ecx, [ebp+var_1C]
.text:0000012C                 call    __aullshr
.text:00000131                 mov     [ebp+var_2C], eax
.text:00000134                 mov     [ebp+var_28], edx
.text:00000137                 mov     eax, [ebp+var_2C]
.text:0000013A                 mov     edx, [ebp+var_28]
.text:0000013D                 mov     cl, 25h ; '%'
.text:0000013F                 call    __aullshr
.text:00000144                 and     eax, 0Fh
.text:00000147                 and     edx, 0
.text:0000014A                 mov     [ebp+var_40], eax
.text:0000014D                 mov     [ebp+var_3C], edx
.text:00000150                 cmp     [ebp+var_40], 5
.text:00000154                 jnz     loc_2AA
.text:0000015A                 cmp     [ebp+var_3C], 0
.text:0000015E                 jnz     loc_2AA
.text:00000164                 mov     eax, [ebp+var_2C]
.text:00000167                 mov     edx, [ebp+var_28]
.text:0000016A                 mov     cl, 9
.text:0000016C                 call    __aullshr
.text:00000171                 and     eax, 7
.text:00000174                 and     edx, 0
.text:00000177                 mov     [ebp+var_48], eax
.text:0000017A                 mov     [ebp+var_44], edx
.text:0000017D                 mov     eax, [ebp+var_48]
.text:00000180                 or      eax, [ebp+var_44]
.text:00000183                 jnz     loc_2AA
.text:00000189                 mov     eax, [ebp+var_2C]
.text:0000018C                 mov     edx, [ebp+var_28]
.text:0000018F                 mov     cl, 0Dh
.text:00000191                 call    __aullshr
.text:00000196                 and     eax, 0FFFFFh
.text:0000019B                 and     edx, 0
.text:0000019E                 mov     [ebp+var_34], eax
.text:000001A1                 mov     eax, [ebp+var_2C]
.text:000001A4                 mov     edx, [ebp+var_28]
.text:000001A7                 mov     cl, 24h ; '$'
.text:000001A9                 call    __aullshr
.text:000001AE                 and     eax, 1
.text:000001B1                 shl     eax, 14h
.text:000001B4                 or      eax, [ebp+var_34]
.text:000001B7                 mov     [ebp+var_34], eax
.text:000001BA                 mov     ecx, [ebp+var_34]
.text:000001BD                 shl     ecx, 4
.text:000001C0                 mov     [ebp+var_34], ecx
.text:000001C3                 cmp     [ebp+arg_C], 0
.text:000001C7                 jz      short loc_1D7
.text:000001C9                 mov     edx, [ebp+arg_8]
.text:000001CC                 add     edx, [ebp+var_4]
.text:000001CF                 add     edx, [ebp+var_34]
.text:000001D2                 mov     [ebp+var_38], edx
.text:000001D5                 jmp     short loc_1E5
.text:000001D7 ; ---------------------------------------------------------------------------
.text:000001D7
.text:000001D7 loc_1D7:                                ; CODE XREF: _IA64_Convert@16+1A7j
.text:000001D7                 mov     eax, [ebp+arg_8]
.text:000001DA                 add     eax, [ebp+var_4]
.text:000001DD                 mov     ecx, [ebp+var_34]
.text:000001E0                 sub     ecx, eax
.text:000001E2                 mov     [ebp+var_38], ecx
.text:000001E5
.text:000001E5 loc_1E5:                                ; CODE XREF: _IA64_Convert@16+1B5j
.text:000001E5                 mov     edx, [ebp+var_38]
.text:000001E8                 shr     edx, 4
.text:000001EB                 mov     [ebp+var_38], edx
.text:000001EE                 mov     eax, [ebp+var_2C]
.text:000001F1                 and     eax, 1FFFh
.text:000001F6                 mov     ecx, [ebp+var_28]
.text:000001F9                 and     ecx, 0FFFFFFEEh
.text:000001FC                 mov     [ebp+var_2C], eax
.text:000001FF                 mov     [ebp+var_28], ecx
.text:00000202                 mov     eax, [ebp+var_38]
.text:00000205                 and     eax, 0FFFFFh
.text:0000020A                 xor     edx, edx
.text:0000020C                 mov     cl, 0Dh
.text:0000020E                 call    __allshl
.text:00000213                 or      eax, [ebp+var_2C]
.text:00000216                 or      edx, [ebp+var_28]
.text:00000219                 mov     [ebp+var_2C], eax
.text:0000021C                 mov     [ebp+var_28], edx
.text:0000021F                 mov     eax, [ebp+var_38]
.text:00000222                 and     eax, 100000h
.text:00000227                 xor     edx, edx
.text:00000229                 mov     cl, 10h
.text:0000022B                 call    __allshl
.text:00000230                 or      eax, [ebp+var_2C]
.text:00000233                 or      edx, [ebp+var_28]
.text:00000236                 mov     [ebp+var_2C], eax
.text:00000239                 mov     [ebp+var_28], edx
.text:0000023C                 mov     eax, 1
.text:00000241                 mov     ecx, [ebp+var_1C]
.text:00000244                 shl     eax, cl
.text:00000246                 sub     eax, 1
.text:00000249                 cdq
.text:0000024A                 and     eax, [ebp+var_24]
.text:0000024D                 and     edx, [ebp+var_20]
.text:00000250                 mov     [ebp+var_24], eax
.text:00000253                 mov     [ebp+var_20], edx
.text:00000256                 mov     eax, [ebp+var_2C]
.text:00000259                 mov     edx, [ebp+var_28]
.text:0000025C                 mov     ecx, [ebp+var_1C]
.text:0000025F                 call    __allshl
.text:00000264                 or      eax, [ebp+var_24]
.text:00000267                 or      edx, [ebp+var_20]
.text:0000026A                 mov     [ebp+var_24], eax
.text:0000026D                 mov     [ebp+var_20], edx
.text:00000270                 mov     [ebp+var_30], 0
.text:00000277                 jmp     short loc_282
.text:00000279 ; ---------------------------------------------------------------------------
.text:00000279
.text:00000279 loc_279:                                ; CODE XREF: _IA64_Convert@16+288j
.text:00000279                 mov     edx, [ebp+var_30]
.text:0000027C                 add     edx, 1
.text:0000027F                 mov     [ebp+var_30], edx
.text:00000282
.text:00000282 loc_282:                                ; CODE XREF: _IA64_Convert@16+257j
.text:00000282                 cmp     [ebp+var_30], 6
.text:00000286                 jge     short loc_2AA
.text:00000288                 mov     ecx, [ebp+var_30]
.text:0000028B                 shl     ecx, 3
.text:0000028E                 mov     eax, [ebp+var_24]
.text:00000291                 mov     edx, [ebp+var_20]
.text:00000294                 call    __aullshr
.text:00000299                 mov     ecx, [ebp+var_4]
.text:0000029C                 add     ecx, [ebp+var_30]
.text:0000029F                 add     ecx, [ebp+var_18]
.text:000002A2                 mov     edx, [ebp+arg_0]
.text:000002A5                 mov     [edx+ecx], al
.text:000002A8                 jmp     short loc_279
.text:000002AA ; ---------------------------------------------------------------------------
.text:000002AA
.text:000002AA loc_2AA:                                ; CODE XREF: _IA64_Convert@16+134j
.text:000002AA                                         ; _IA64_Convert@16+13Ej ...
.text:000002AA                 jmp     loc_96
.text:000002AF ; ---------------------------------------------------------------------------
.text:000002AF
.text:000002AF loc_2AF:                                ; CODE XREF: _IA64_Convert@16+8Cj
.text:000002AF                 jmp     loc_55
.text:000002B4 ; ---------------------------------------------------------------------------
.text:000002B4
.text:000002B4 loc_2B4:                                ; CODE XREF: _IA64_Convert@16+44j
.text:000002B4                 mov     eax, [ebp+var_4]
.text:000002B7
.text:000002B7 loc_2B7:                                ; CODE XREF: _IA64_Convert@16+1Ej
.text:000002B7                 pop     edi
.text:000002B8                 add     esp, 48h
.text:000002BB                 cmp     ebp, esp
.text:000002BD                 call    __RTC_CheckEsp
.text:000002C2                 mov     esp, ebp
.text:000002C4                 pop     ebp
.text:000002C5                 retn    10h
.text:000002C5 _IA64_Convert@16 endp
.text:000002C5
.text:000002C5 _text           ends
.text:000002C5
.rtc$TMZ:000002C8 ; ===========================================================================
.rtc$TMZ:000002C8
.rtc$TMZ:000002C8 ; Segment type: Pure data
.rtc$TMZ:000002C8 ; Segment permissions: Read
.rtc$TMZ:000002C8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000002C8                 assume cs:_rtc$TMZ
.rtc$TMZ:000002C8                 ;org 2C8h
.rtc$TMZ:000002C8 ; COMDAT (pick any)
.rtc$TMZ:000002C8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000002C8 _rtc$TMZ        ends
.rtc$TMZ:000002C8
.rtc$IMZ:000002CC ; ===========================================================================
.rtc$IMZ:000002CC
.rtc$IMZ:000002CC ; Segment type: Pure data
.rtc$IMZ:000002CC ; Segment permissions: Read
.rtc$IMZ:000002CC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000002CC                 assume cs:_rtc$IMZ
.rtc$IMZ:000002CC                 ;org 2CCh
.rtc$IMZ:000002CC ; COMDAT (pick any)
.rtc$IMZ:000002CC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000002CC _rtc$IMZ        ends
.rtc$IMZ:000002CC
UNDEF:000002D0 ; ===========================================================================
UNDEF:000002D0
UNDEF:000002D0 ; Segment type: Externs
UNDEF:000002D0 ; UNDEF
UNDEF:000002D0                 extrn __RTC_CheckEsp:near ; CODE XREF: _IA64_Convert@16+29Dp
UNDEF:000002D4                 extrn __aullshr:near    ; CODE XREF: _IA64_Convert@16+10Cp
UNDEF:000002D4                                         ; _IA64_Convert@16+11Fp ...
UNDEF:000002D8                 extrn __allshl:near     ; CODE XREF: _IA64_Convert@16+F0p
UNDEF:000002D8                                         ; _IA64_Convert@16+1EEp ...
UNDEF:000002DC                 extrn __RTC_Shutdown:near
UNDEF:000002DC                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000002E0                 extrn __RTC_InitBase:near
UNDEF:000002E0                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000002E0
UNDEF:000002E0
UNDEF:000002E0                 end