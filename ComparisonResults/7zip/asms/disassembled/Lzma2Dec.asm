.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : C78516E992078BE7D8BA2F92E1CED679
.text:00000000 ; Input CRC32 : 8606955F
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Lzma2Dec.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall Lzma2Dec_AllocateProbs(x, x, x)
.text:00000000                 public _Lzma2Dec_AllocateProbs@12
.text:00000000 _Lzma2Dec_AllocateProbs@12 proc near    ; CODE XREF: Lzma2Decode(x,x,x,x,x,x,x,x)+78p
.text:00000000
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = byte ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 18h
.text:00000006                 mov     eax, 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_18], eax
.text:0000000E                 mov     [ebp+var_14], eax
.text:00000011                 mov     [ebp+var_10], eax
.text:00000014                 mov     [ebp+var_C], eax
.text:00000017                 mov     [ebp+var_8], eax
.text:0000001A                 mov     [ebp+var_4], eax
.text:0000001D                 mov     eax, dword ptr ds:___security_cookie
.text:00000022                 xor     eax, ebp
.text:00000024                 mov     [ebp+var_4], eax
.text:00000027                 lea     eax, [ebp+var_10]
.text:0000002A                 push    eax
.text:0000002B                 movzx   ecx, [ebp+arg_4]
.text:0000002F                 push    ecx
.text:00000030                 call    _Lzma2Dec_GetOldProps@8 ; Lzma2Dec_GetOldProps(x,x)
.text:00000035                 mov     [ebp+var_18], eax
.text:00000038                 cmp     [ebp+var_18], 0
.text:0000003C                 jz      short loc_43
.text:0000003E                 mov     eax, [ebp+var_18]
.text:00000041                 jmp     short loc_56
.text:00000043 ; ---------------------------------------------------------------------------
.text:00000043
.text:00000043 loc_43:                                 ; CODE XREF: Lzma2Dec_AllocateProbs(x,x,x)+3Cj
.text:00000043                 mov     edx, [ebp+arg_8]
.text:00000046                 push    edx
.text:00000047                 push    5
.text:00000049                 lea     eax, [ebp+var_10]
.text:0000004C                 push    eax
.text:0000004D                 mov     ecx, [ebp+arg_0]
.text:00000050                 push    ecx
.text:00000051                 call    _LzmaDec_AllocateProbs@16 ; LzmaDec_AllocateProbs(x,x,x,x)
.text:00000056
.text:00000056 loc_56:                                 ; CODE XREF: Lzma2Dec_AllocateProbs(x,x,x)+41j
.text:00000056                 push    edx
.text:00000057                 mov     ecx, ebp
.text:00000059                 push    eax
.text:0000005A                 lea     edx, $LN6
.text:00000060                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000065                 pop     eax
.text:00000066                 pop     edx
.text:00000067                 mov     ecx, [ebp+var_4]
.text:0000006A                 xor     ecx, ebp
.text:0000006C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000071                 add     esp, 18h
.text:00000074                 cmp     ebp, esp
.text:00000076                 call    __RTC_CheckEsp
.text:0000007B                 mov     esp, ebp
.text:0000007D                 pop     ebp
.text:0000007E                 retn    0Ch
.text:0000007E _Lzma2Dec_AllocateProbs@12 endp
.text:0000007E
.text:0000007E ; ---------------------------------------------------------------------------
.text:00000081                 align 4
.text:00000084 $LN6            dd 1                    ; DATA XREF: Lzma2Dec_AllocateProbs(x,x,x)+5Ao
.text:00000088                 dd offset $LN5
.text:0000008C $LN5            dd 0FFFFFFF0h, 5        ; DATA XREF: .text:00000088o
.text:00000094                 dd offset $LN4          ; "props"
.text:00000098 $LN4            db 'props',0            ; DATA XREF: .text:00000094o
.text:0000009E                 align 10h
.text:000000A0
.text:000000A0 ; =============== S U B R O U T I N E =======================================
.text:000000A0
.text:000000A0 ; Attributes: bp-based frame
.text:000000A0
.text:000000A0 ; __stdcall Lzma2Dec_GetOldProps(x, x)
.text:000000A0 _Lzma2Dec_GetOldProps@8 proc near       ; CODE XREF: Lzma2Dec_AllocateProbs(x,x,x)+30p
.text:000000A0                                         ; Lzma2Dec_Allocate(x,x,x)+30p
.text:000000A0
.text:000000A0 var_8           = dword ptr -8
.text:000000A0 var_4           = dword ptr -4
.text:000000A0 arg_0           = byte ptr  8
.text:000000A0 arg_4           = dword ptr  0Ch
.text:000000A0
.text:000000A0                 push    ebp
.text:000000A1                 mov     ebp, esp
.text:000000A3                 sub     esp, 8
.text:000000A6                 push    esi
.text:000000A7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000000AE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000B5                 movzx   eax, [ebp+arg_0]
.text:000000B9                 cmp     eax, 28h ; '('
.text:000000BC                 jle     short loc_C5
.text:000000BE                 mov     eax, 4
.text:000000C3                 jmp     short loc_12F
.text:000000C5 ; ---------------------------------------------------------------------------
.text:000000C5
.text:000000C5 loc_C5:                                 ; CODE XREF: Lzma2Dec_GetOldProps(x,x)+1Cj
.text:000000C5                 movzx   ecx, [ebp+arg_0]
.text:000000C9                 cmp     ecx, 28h ; '('
.text:000000CC                 jnz     short loc_D7
.text:000000CE                 mov     [ebp+var_8], 0FFFFFFFFh
.text:000000D5                 jmp     short loc_F4
.text:000000D7 ; ---------------------------------------------------------------------------
.text:000000D7
.text:000000D7 loc_D7:                                 ; CODE XREF: Lzma2Dec_GetOldProps(x,x)+2Cj
.text:000000D7                 movzx   esi, [ebp+arg_0]
.text:000000DB                 and     esi, 1
.text:000000DE                 or      esi, 2
.text:000000E1                 movzx   eax, [ebp+arg_0]
.text:000000E5                 cdq
.text:000000E6                 sub     eax, edx
.text:000000E8                 sar     eax, 1
.text:000000EA                 add     eax, 0Bh
.text:000000ED                 mov     ecx, eax
.text:000000EF                 shl     esi, cl
.text:000000F1                 mov     [ebp+var_8], esi
.text:000000F4
.text:000000F4 loc_F4:                                 ; CODE XREF: Lzma2Dec_GetOldProps(x,x)+35j
.text:000000F4                 mov     edx, [ebp+var_8]
.text:000000F7                 mov     [ebp+var_4], edx
.text:000000FA                 mov     eax, [ebp+arg_4]
.text:000000FD                 mov     byte ptr [eax], 4
.text:00000100                 mov     ecx, [ebp+arg_4]
.text:00000103                 mov     dl, byte ptr [ebp+var_4]
.text:00000106                 mov     [ecx+1], dl
.text:00000109                 mov     eax, [ebp+var_4]
.text:0000010C                 shr     eax, 8
.text:0000010F                 mov     ecx, [ebp+arg_4]
.text:00000112                 mov     [ecx+2], al
.text:00000115                 mov     edx, [ebp+var_4]
.text:00000118                 shr     edx, 10h
.text:0000011B                 mov     eax, [ebp+arg_4]
.text:0000011E                 mov     [eax+3], dl
.text:00000121                 mov     ecx, [ebp+var_4]
.text:00000124                 shr     ecx, 18h
.text:00000127                 mov     edx, [ebp+arg_4]
.text:0000012A                 mov     [edx+4], cl
.text:0000012D                 xor     eax, eax
.text:0000012F
.text:0000012F loc_12F:                                ; CODE XREF: Lzma2Dec_GetOldProps(x,x)+23j
.text:0000012F                 pop     esi
.text:00000130                 mov     esp, ebp
.text:00000132                 pop     ebp
.text:00000133                 retn    8
.text:00000133 _Lzma2Dec_GetOldProps@8 endp
.text:00000133
.text:00000133 ; ---------------------------------------------------------------------------
.text:00000136                 align 10h
.text:00000140
.text:00000140 ; =============== S U B R O U T I N E =======================================
.text:00000140
.text:00000140 ; Attributes: bp-based frame
.text:00000140
.text:00000140 ; __stdcall Lzma2Dec_Allocate(x, x, x)
.text:00000140                 public _Lzma2Dec_Allocate@12
.text:00000140 _Lzma2Dec_Allocate@12 proc near
.text:00000140
.text:00000140 var_18          = dword ptr -18h
.text:00000140 var_14          = dword ptr -14h
.text:00000140 var_10          = dword ptr -10h
.text:00000140 var_C           = dword ptr -0Ch
.text:00000140 var_8           = dword ptr -8
.text:00000140 var_4           = dword ptr -4
.text:00000140 arg_0           = dword ptr  8
.text:00000140 arg_4           = byte ptr  0Ch
.text:00000140 arg_8           = dword ptr  10h
.text:00000140
.text:00000140                 push    ebp
.text:00000141                 mov     ebp, esp
.text:00000143                 sub     esp, 18h
.text:00000146                 mov     eax, 0CCCCCCCCh
.text:0000014B                 mov     [ebp+var_18], eax
.text:0000014E                 mov     [ebp+var_14], eax
.text:00000151                 mov     [ebp+var_10], eax
.text:00000154                 mov     [ebp+var_C], eax
.text:00000157                 mov     [ebp+var_8], eax
.text:0000015A                 mov     [ebp+var_4], eax
.text:0000015D                 mov     eax, dword ptr ds:___security_cookie
.text:00000162                 xor     eax, ebp
.text:00000164                 mov     [ebp+var_4], eax
.text:00000167                 lea     eax, [ebp+var_10]
.text:0000016A                 push    eax
.text:0000016B                 movzx   ecx, [ebp+arg_4]
.text:0000016F                 push    ecx
.text:00000170                 call    _Lzma2Dec_GetOldProps@8 ; Lzma2Dec_GetOldProps(x,x)
.text:00000175                 mov     [ebp+var_18], eax
.text:00000178                 cmp     [ebp+var_18], 0
.text:0000017C                 jz      short loc_183
.text:0000017E                 mov     eax, [ebp+var_18]
.text:00000181                 jmp     short loc_196
.text:00000183 ; ---------------------------------------------------------------------------
.text:00000183
.text:00000183 loc_183:                                ; CODE XREF: Lzma2Dec_Allocate(x,x,x)+3Cj
.text:00000183                 mov     edx, [ebp+arg_8]
.text:00000186                 push    edx
.text:00000187                 push    5
.text:00000189                 lea     eax, [ebp+var_10]
.text:0000018C                 push    eax
.text:0000018D                 mov     ecx, [ebp+arg_0]
.text:00000190                 push    ecx
.text:00000191                 call    _LzmaDec_Allocate@16 ; LzmaDec_Allocate(x,x,x,x)
.text:00000196
.text:00000196 loc_196:                                ; CODE XREF: Lzma2Dec_Allocate(x,x,x)+41j
.text:00000196                 push    edx
.text:00000197                 mov     ecx, ebp
.text:00000199                 push    eax
.text:0000019A                 lea     edx, $LN6_0
.text:000001A0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001A5                 pop     eax
.text:000001A6                 pop     edx
.text:000001A7                 mov     ecx, [ebp+var_4]
.text:000001AA                 xor     ecx, ebp
.text:000001AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000001B1                 add     esp, 18h
.text:000001B4                 cmp     ebp, esp
.text:000001B6                 call    __RTC_CheckEsp
.text:000001BB                 mov     esp, ebp
.text:000001BD                 pop     ebp
.text:000001BE                 retn    0Ch
.text:000001BE _Lzma2Dec_Allocate@12 endp
.text:000001BE
.text:000001BE ; ---------------------------------------------------------------------------
.text:000001C1                 align 4
.text:000001C4 $LN6_0          dd 1                    ; DATA XREF: Lzma2Dec_Allocate(x,x,x)+5Ao
.text:000001C8                 dd offset $LN5_0
.text:000001CC $LN5_0          dd 0FFFFFFF0h, 5        ; DATA XREF: .text:000001C8o
.text:000001D4                 dd offset $LN4_0        ; "props"
.text:000001D8 $LN4_0          db 'props',0            ; DATA XREF: .text:000001D4o
.text:000001DE                 align 10h
.text:000001E0
.text:000001E0 ; =============== S U B R O U T I N E =======================================
.text:000001E0
.text:000001E0 ; Attributes: bp-based frame
.text:000001E0
.text:000001E0 ; __stdcall Lzma2Dec_Init(x)
.text:000001E0                 public _Lzma2Dec_Init@4
.text:000001E0 _Lzma2Dec_Init@4 proc near              ; CODE XREF: Lzma2Decode(x,x,x,x,x,x,x,x)+ADp
.text:000001E0
.text:000001E0 arg_0           = dword ptr  8
.text:000001E0
.text:000001E0                 push    ebp
.text:000001E1                 mov     ebp, esp
.text:000001E3                 mov     eax, [ebp+arg_0]
.text:000001E6                 mov     dword ptr [eax+78h], 0
.text:000001ED                 mov     ecx, [ebp+arg_0]
.text:000001F0                 mov     dword ptr [ecx+80h], 1
.text:000001FA                 mov     edx, [ebp+arg_0]
.text:000001FD                 mov     dword ptr [edx+84h], 1
.text:00000207                 mov     eax, [ebp+arg_0]
.text:0000020A                 mov     dword ptr [eax+88h], 1
.text:00000214                 mov     ecx, [ebp+arg_0]
.text:00000217                 push    ecx
.text:00000218                 call    _LzmaDec_Init@4 ; LzmaDec_Init(x)
.text:0000021D                 cmp     ebp, esp
.text:0000021F                 call    __RTC_CheckEsp
.text:00000224                 pop     ebp
.text:00000225                 retn    4
.text:00000225 _Lzma2Dec_Init@4 endp
.text:00000225
.text:00000225 ; ---------------------------------------------------------------------------
.text:00000228                 align 10h
.text:00000230
.text:00000230 ; =============== S U B R O U T I N E =======================================
.text:00000230
.text:00000230 ; Attributes: bp-based frame
.text:00000230
.text:00000230 ; int __stdcall Lzma2Dec_DecodeToDic(int, int, void *Src, int, int, int)
.text:00000230                 public _Lzma2Dec_DecodeToDic@24
.text:00000230 _Lzma2Dec_DecodeToDic@24 proc near      ; CODE XREF: Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)+B6p
.text:00000230                                         ; Lzma2Decode(x,x,x,x,x,x,x,x)+DBp
.text:00000230
.text:00000230 var_3C          = byte ptr -3Ch
.text:00000230 var_39          = byte ptr -39h
.text:00000230 var_38          = dword ptr -38h
.text:00000230 var_34          = dword ptr -34h
.text:00000230 var_30          = dword ptr -30h
.text:00000230 var_2C          = dword ptr -2Ch
.text:00000230 var_28          = dword ptr -28h
.text:00000230 var_24          = dword ptr -24h
.text:00000230 var_20          = dword ptr -20h
.text:00000230 var_1C          = dword ptr -1Ch
.text:00000230 Size            = dword ptr -14h
.text:00000230 var_C           = dword ptr -0Ch
.text:00000230 var_8           = dword ptr -8
.text:00000230 var_4           = dword ptr -4
.text:00000230 arg_0           = dword ptr  8
.text:00000230 arg_4           = dword ptr  0Ch
.text:00000230 Src             = dword ptr  10h
.text:00000230 arg_C           = dword ptr  14h
.text:00000230 arg_10          = dword ptr  18h
.text:00000230 arg_14          = dword ptr  1Ch
.text:00000230
.text:00000230                 push    ebp
.text:00000231                 mov     ebp, esp
.text:00000233                 sub     esp, 3Ch
.text:00000236                 push    edi
.text:00000237                 lea     edi, [ebp+var_3C]
.text:0000023A                 mov     ecx, 0Fh
.text:0000023F                 mov     eax, 0CCCCCCCCh
.text:00000244                 rep stosd
.text:00000246                 mov     eax, [ebp+arg_C]
.text:00000249                 mov     ecx, [eax]
.text:0000024B                 mov     [ebp+var_4], ecx
.text:0000024E                 mov     edx, [ebp+arg_C]
.text:00000251                 mov     dword ptr [edx], 0
.text:00000257                 mov     eax, [ebp+arg_14]
.text:0000025A                 mov     dword ptr [eax], 0
.text:00000260
.text:00000260 loc_260:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x):loc_32Aj
.text:00000260                                         ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x):loc_608j
.text:00000260                 mov     ecx, [ebp+arg_0]
.text:00000263                 cmp     dword ptr [ecx+78h], 8
.text:00000267                 jz      loc_60D
.text:0000026D                 mov     edx, [ebp+arg_0]
.text:00000270                 mov     eax, [edx+24h]
.text:00000273                 mov     [ebp+var_8], eax
.text:00000276                 mov     ecx, [ebp+arg_0]
.text:00000279                 cmp     dword ptr [ecx+78h], 9
.text:0000027D                 jnz     short loc_289
.text:0000027F                 mov     eax, 1
.text:00000284                 jmp     loc_618
.text:00000289 ; ---------------------------------------------------------------------------
.text:00000289
.text:00000289 loc_289:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+4Dj
.text:00000289                 mov     edx, [ebp+var_8]
.text:0000028C                 cmp     edx, [ebp+arg_4]
.text:0000028F                 jnz     short loc_2A7
.text:00000291                 cmp     [ebp+arg_10], 0
.text:00000295                 jnz     short loc_2A7
.text:00000297                 mov     eax, [ebp+arg_14]
.text:0000029A                 mov     dword ptr [eax], 2
.text:000002A0                 xor     eax, eax
.text:000002A2                 jmp     loc_618
.text:000002A7 ; ---------------------------------------------------------------------------
.text:000002A7
.text:000002A7 loc_2A7:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+5Fj
.text:000002A7                                         ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+65j
.text:000002A7                 mov     ecx, [ebp+arg_0]
.text:000002AA                 cmp     dword ptr [ecx+78h], 6
.text:000002AE                 jz      short loc_32F
.text:000002B0                 mov     edx, [ebp+arg_0]
.text:000002B3                 cmp     dword ptr [edx+78h], 7
.text:000002B7                 jz      short loc_32F
.text:000002B9                 mov     eax, [ebp+arg_C]
.text:000002BC                 mov     ecx, [eax]
.text:000002BE                 cmp     ecx, [ebp+var_4]
.text:000002C1                 jnz     short loc_2D3
.text:000002C3                 mov     edx, [ebp+arg_14]
.text:000002C6                 mov     dword ptr [edx], 3
.text:000002CC                 xor     eax, eax
.text:000002CE                 jmp     loc_618
.text:000002D3 ; ---------------------------------------------------------------------------
.text:000002D3
.text:000002D3 loc_2D3:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+91j
.text:000002D3                 mov     eax, [ebp+arg_C]
.text:000002D6                 mov     ecx, [eax]
.text:000002D8                 add     ecx, 1
.text:000002DB                 mov     edx, [ebp+arg_C]
.text:000002DE                 mov     [edx], ecx
.text:000002E0                 mov     eax, [ebp+Src]
.text:000002E3                 mov     cl, [eax]
.text:000002E5                 mov     [ebp+var_39], cl
.text:000002E8                 mov     edx, [ebp+Src]
.text:000002EB                 add     edx, 1
.text:000002EE                 mov     [ebp+Src], edx
.text:000002F1                 movzx   eax, [ebp+var_39]
.text:000002F5                 push    eax
.text:000002F6                 mov     ecx, [ebp+arg_0]
.text:000002F9                 push    ecx
.text:000002FA                 call    _Lzma2Dec_UpdateState@8 ; Lzma2Dec_UpdateState(x,x)
.text:000002FF                 mov     edx, [ebp+arg_0]
.text:00000302                 mov     [edx+78h], eax
.text:00000305                 mov     eax, [ebp+var_8]
.text:00000308                 cmp     eax, [ebp+arg_4]
.text:0000030B                 jnz     short loc_32A
.text:0000030D                 mov     ecx, [ebp+arg_0]
.text:00000310                 cmp     dword ptr [ecx+78h], 8
.text:00000314                 jz      short loc_32A
.text:00000316                 mov     edx, [ebp+arg_0]
.text:00000319                 mov     dword ptr [edx+78h], 9
.text:00000320                 mov     eax, 1
.text:00000325                 jmp     loc_618
.text:0000032A ; ---------------------------------------------------------------------------
.text:0000032A
.text:0000032A loc_32A:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+DBj
.text:0000032A                                         ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+E4j
.text:0000032A                 jmp     loc_260
.text:0000032F ; ---------------------------------------------------------------------------
.text:0000032F
.text:0000032F loc_32F:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+7Ej
.text:0000032F                                         ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+87j
.text:0000032F                 mov     eax, [ebp+arg_4]
.text:00000332                 sub     eax, [ebp+var_8]
.text:00000335                 mov     [ebp+var_C], eax
.text:00000338                 mov     ecx, [ebp+arg_C]
.text:0000033B                 mov     edx, [ebp+var_4]
.text:0000033E                 sub     edx, [ecx]
.text:00000340                 mov     [ebp+Size], edx
.text:00000343                 mov     [ebp+var_1C], 0
.text:0000034A                 mov     eax, [ebp+arg_0]
.text:0000034D                 mov     ecx, [eax+74h]
.text:00000350                 cmp     ecx, [ebp+var_C]
.text:00000353                 ja      short loc_365
.text:00000355                 mov     edx, [ebp+arg_0]
.text:00000358                 mov     eax, [edx+74h]
.text:0000035B                 mov     [ebp+var_C], eax
.text:0000035E                 mov     [ebp+var_1C], 1
.text:00000365
.text:00000365 loc_365:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+123j
.text:00000365                 mov     ecx, [ebp+arg_0]
.text:00000368                 movzx   edx, byte ptr [ecx+7Ch]
.text:0000036C                 and     edx, 80h
.text:00000372                 jnz     loc_47F
.text:00000378                 mov     eax, [ebp+arg_C]
.text:0000037B                 mov     ecx, [eax]
.text:0000037D                 cmp     ecx, [ebp+var_4]
.text:00000380                 jnz     short loc_392
.text:00000382                 mov     edx, [ebp+arg_14]
.text:00000385                 mov     dword ptr [edx], 3
.text:0000038B                 xor     eax, eax
.text:0000038D                 jmp     loc_618
.text:00000392 ; ---------------------------------------------------------------------------
.text:00000392
.text:00000392 loc_392:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+150j
.text:00000392                 mov     eax, [ebp+arg_0]
.text:00000395                 cmp     dword ptr [eax+78h], 6
.text:00000399                 jnz     short loc_409
.text:0000039B                 mov     ecx, [ebp+arg_0]
.text:0000039E                 movzx   edx, byte ptr [ecx+7Ch]
.text:000003A2                 sub     edx, 1
.text:000003A5                 neg     edx
.text:000003A7                 sbb     edx, edx
.text:000003A9                 add     edx, 1
.text:000003AC                 mov     [ebp+var_20], edx
.text:000003AF                 jz      short loc_3CD
.text:000003B1                 mov     eax, [ebp+arg_0]
.text:000003B4                 mov     dword ptr [eax+84h], 1
.text:000003BE                 mov     ecx, [ebp+arg_0]
.text:000003C1                 mov     dword ptr [ecx+88h], 1
.text:000003CB                 jmp     short loc_3ED
.text:000003CD ; ---------------------------------------------------------------------------
.text:000003CD
.text:000003CD loc_3CD:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+17Fj
.text:000003CD                 mov     edx, [ebp+arg_0]
.text:000003D0                 cmp     dword ptr [edx+80h], 0
.text:000003D7                 jz      short loc_3ED
.text:000003D9                 mov     eax, [ebp+arg_0]
.text:000003DC                 mov     dword ptr [eax+78h], 9
.text:000003E3                 mov     eax, 1
.text:000003E8                 jmp     loc_618
.text:000003ED ; ---------------------------------------------------------------------------
.text:000003ED
.text:000003ED loc_3ED:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+19Bj
.text:000003ED                                         ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+1A7j
.text:000003ED                 mov     ecx, [ebp+arg_0]
.text:000003F0                 mov     dword ptr [ecx+80h], 0
.text:000003FA                 push    0
.text:000003FC                 mov     edx, [ebp+var_20]
.text:000003FF                 push    edx
.text:00000400                 mov     eax, [ebp+arg_0]
.text:00000403                 push    eax
.text:00000404                 call    _LzmaDec_InitDicAndState@12 ; LzmaDec_InitDicAndState(x,x,x)
.text:00000409
.text:00000409 loc_409:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+169j
.text:00000409                 mov     ecx, [ebp+Size]
.text:0000040C                 cmp     ecx, [ebp+var_C]
.text:0000040F                 jbe     short loc_417
.text:00000411                 mov     edx, [ebp+var_C]
.text:00000414                 mov     [ebp+Size], edx
.text:00000417
.text:00000417 loc_417:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+1DFj
.text:00000417                 cmp     [ebp+Size], 0
.text:0000041B                 jnz     short loc_431
.text:0000041D                 mov     eax, [ebp+arg_0]
.text:00000420                 mov     dword ptr [eax+78h], 9
.text:00000427                 mov     eax, 1
.text:0000042C                 jmp     loc_618
.text:00000431 ; ---------------------------------------------------------------------------
.text:00000431
.text:00000431 loc_431:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+1EBj
.text:00000431                 mov     ecx, [ebp+Size]
.text:00000434                 push    ecx             ; Size
.text:00000435                 mov     edx, [ebp+Src]
.text:00000438                 push    edx             ; Src
.text:00000439                 mov     eax, [ebp+arg_0]
.text:0000043C                 push    eax             ; int
.text:0000043D                 call    _LzmaDec_UpdateWithUncompressed@12 ; LzmaDec_UpdateWithUncompressed(x,x,x)
.text:00000442                 mov     ecx, [ebp+Src]
.text:00000445                 add     ecx, [ebp+Size]
.text:00000448                 mov     [ebp+Src], ecx
.text:0000044B                 mov     edx, [ebp+arg_C]
.text:0000044E                 mov     eax, [edx]
.text:00000450                 add     eax, [ebp+Size]
.text:00000453                 mov     ecx, [ebp+arg_C]
.text:00000456                 mov     [ecx], eax
.text:00000458                 mov     edx, [ebp+arg_0]
.text:0000045B                 mov     eax, [edx+74h]
.text:0000045E                 sub     eax, [ebp+Size]
.text:00000461                 mov     ecx, [ebp+arg_0]
.text:00000464                 mov     [ecx+74h], eax
.text:00000467                 mov     edx, [ebp+arg_0]
.text:0000046A                 mov     eax, [edx+74h]
.text:0000046D                 neg     eax
.text:0000046F                 sbb     eax, eax
.text:00000471                 and     eax, 7
.text:00000474                 mov     ecx, [ebp+arg_0]
.text:00000477                 mov     [ecx+78h], eax
.text:0000047A                 jmp     loc_608
.text:0000047F ; ---------------------------------------------------------------------------
.text:0000047F
.text:0000047F loc_47F:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+142j
.text:0000047F                 mov     edx, [ebp+arg_0]
.text:00000482                 cmp     dword ptr [edx+78h], 6
.text:00000486                 jnz     loc_521
.text:0000048C                 mov     eax, [ebp+arg_0]
.text:0000048F                 movzx   ecx, byte ptr [eax+7Ch]
.text:00000493                 sar     ecx, 5
.text:00000496                 and     ecx, 3
.text:00000499                 mov     [ebp+var_2C], ecx
.text:0000049C                 xor     edx, edx
.text:0000049E                 cmp     [ebp+var_2C], 3
.text:000004A2                 setz    dl
.text:000004A5                 mov     [ebp+var_30], edx
.text:000004A8                 xor     eax, eax
.text:000004AA                 cmp     [ebp+var_2C], 0
.text:000004AE                 setnz   al
.text:000004B1                 mov     [ebp+var_34], eax
.text:000004B4                 cmp     [ebp+var_30], 0
.text:000004B8                 jnz     short loc_4C6
.text:000004BA                 mov     ecx, [ebp+arg_0]
.text:000004BD                 cmp     dword ptr [ecx+80h], 0
.text:000004C4                 jnz     short loc_4D8
.text:000004C6
.text:000004C6 loc_4C6:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+288j
.text:000004C6                 cmp     [ebp+var_34], 0
.text:000004CA                 jnz     short loc_4EC
.text:000004CC                 mov     edx, [ebp+arg_0]
.text:000004CF                 cmp     dword ptr [edx+84h], 0
.text:000004D6                 jz      short loc_4EC
.text:000004D8
.text:000004D8 loc_4D8:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+294j
.text:000004D8                 mov     eax, [ebp+arg_0]
.text:000004DB                 mov     dword ptr [eax+78h], 9
.text:000004E2                 mov     eax, 1
.text:000004E7                 jmp     loc_618
.text:000004EC ; ---------------------------------------------------------------------------
.text:000004EC
.text:000004EC loc_4EC:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+29Aj
.text:000004EC                                         ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+2A6j
.text:000004EC                 mov     ecx, [ebp+var_34]
.text:000004EF                 push    ecx
.text:000004F0                 mov     edx, [ebp+var_30]
.text:000004F3                 push    edx
.text:000004F4                 mov     eax, [ebp+arg_0]
.text:000004F7                 push    eax
.text:000004F8                 call    _LzmaDec_InitDicAndState@12 ; LzmaDec_InitDicAndState(x,x,x)
.text:000004FD                 mov     ecx, [ebp+arg_0]
.text:00000500                 mov     dword ptr [ecx+80h], 0
.text:0000050A                 mov     edx, [ebp+arg_0]
.text:0000050D                 mov     dword ptr [edx+84h], 0
.text:00000517                 mov     eax, [ebp+arg_0]
.text:0000051A                 mov     dword ptr [eax+78h], 7
.text:00000521
.text:00000521 loc_521:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+256j
.text:00000521                 mov     ecx, [ebp+arg_0]
.text:00000524                 mov     edx, [ebp+Size]
.text:00000527                 cmp     edx, [ecx+70h]
.text:0000052A                 jbe     short loc_535
.text:0000052C                 mov     eax, [ebp+arg_0]
.text:0000052F                 mov     ecx, [eax+70h]
.text:00000532                 mov     [ebp+Size], ecx
.text:00000535
.text:00000535 loc_535:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+2FAj
.text:00000535                 mov     edx, [ebp+arg_14]
.text:00000538                 push    edx
.text:00000539                 mov     eax, [ebp+var_1C]
.text:0000053C                 push    eax
.text:0000053D                 lea     ecx, [ebp+Size]
.text:00000540                 push    ecx
.text:00000541                 mov     edx, [ebp+Src]
.text:00000544                 push    edx
.text:00000545                 mov     eax, [ebp+var_8]
.text:00000548                 add     eax, [ebp+var_C]
.text:0000054B                 push    eax
.text:0000054C                 mov     ecx, [ebp+arg_0]
.text:0000054F                 push    ecx
.text:00000550                 call    _LzmaDec_DecodeToDic@24 ; LzmaDec_DecodeToDic(x,x,x,x,x,x)
.text:00000555                 mov     [ebp+var_28], eax
.text:00000558                 mov     edx, [ebp+Src]
.text:0000055B                 add     edx, [ebp+Size]
.text:0000055E                 mov     [ebp+Src], edx
.text:00000561                 mov     eax, [ebp+arg_C]
.text:00000564                 mov     ecx, [eax]
.text:00000566                 add     ecx, [ebp+Size]
.text:00000569                 mov     edx, [ebp+arg_C]
.text:0000056C                 mov     [edx], ecx
.text:0000056E                 mov     eax, [ebp+arg_0]
.text:00000571                 mov     ecx, [eax+70h]
.text:00000574                 sub     ecx, [ebp+Size]
.text:00000577                 mov     edx, [ebp+arg_0]
.text:0000057A                 mov     [edx+70h], ecx
.text:0000057D                 mov     eax, [ebp+arg_0]
.text:00000580                 mov     ecx, [eax+24h]
.text:00000583                 sub     ecx, [ebp+var_8]
.text:00000586                 mov     [ebp+var_24], ecx
.text:00000589                 mov     edx, [ebp+arg_0]
.text:0000058C                 mov     eax, [edx+74h]
.text:0000058F                 sub     eax, [ebp+var_24]
.text:00000592                 mov     ecx, [ebp+arg_0]
.text:00000595                 mov     [ecx+74h], eax
.text:00000598                 mov     edx, [ebp+var_28]
.text:0000059B                 mov     [ebp+var_38], edx
.text:0000059E                 cmp     [ebp+var_38], 0
.text:000005A2                 jz      short loc_5A9
.text:000005A4                 mov     eax, [ebp+var_38]
.text:000005A7                 jmp     short loc_618
.text:000005A9 ; ---------------------------------------------------------------------------
.text:000005A9
.text:000005A9 loc_5A9:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+372j
.text:000005A9                 mov     eax, [ebp+arg_14]
.text:000005AC                 cmp     dword ptr [eax], 3
.text:000005AF                 jnz     short loc_5B6
.text:000005B1                 mov     eax, [ebp+var_28]
.text:000005B4                 jmp     short loc_618
.text:000005B6 ; ---------------------------------------------------------------------------
.text:000005B6
.text:000005B6 loc_5B6:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+37Fj
.text:000005B6                 cmp     [ebp+Size], 0
.text:000005BA                 jnz     short loc_5F7
.text:000005BC                 cmp     [ebp+var_24], 0
.text:000005C0                 jnz     short loc_5F7
.text:000005C2                 mov     ecx, [ebp+arg_14]
.text:000005C5                 cmp     dword ptr [ecx], 4
.text:000005C8                 jnz     short loc_5DC
.text:000005CA                 mov     edx, [ebp+arg_0]
.text:000005CD                 cmp     dword ptr [edx+74h], 0
.text:000005D1                 jnz     short loc_5DC
.text:000005D3                 mov     eax, [ebp+arg_0]
.text:000005D6                 cmp     dword ptr [eax+70h], 0
.text:000005DA                 jz      short loc_5ED
.text:000005DC
.text:000005DC loc_5DC:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+398j
.text:000005DC                                         ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+3A1j
.text:000005DC                 mov     ecx, [ebp+arg_0]
.text:000005DF                 mov     dword ptr [ecx+78h], 9
.text:000005E6                 mov     eax, 1
.text:000005EB                 jmp     short loc_618
.text:000005ED ; ---------------------------------------------------------------------------
.text:000005ED
.text:000005ED loc_5ED:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+3AAj
.text:000005ED                 mov     edx, [ebp+arg_0]
.text:000005F0                 mov     dword ptr [edx+78h], 0
.text:000005F7
.text:000005F7 loc_5F7:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+38Aj
.text:000005F7                                         ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+390j
.text:000005F7                 mov     eax, [ebp+arg_14]
.text:000005FA                 cmp     dword ptr [eax], 4
.text:000005FD                 jnz     short loc_608
.text:000005FF                 mov     ecx, [ebp+arg_14]
.text:00000602                 mov     dword ptr [ecx], 2
.text:00000608
.text:00000608 loc_608:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+24Aj
.text:00000608                                         ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+3CDj
.text:00000608                 jmp     loc_260
.text:0000060D ; ---------------------------------------------------------------------------
.text:0000060D
.text:0000060D loc_60D:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+37j
.text:0000060D                 mov     edx, [ebp+arg_14]
.text:00000610                 mov     dword ptr [edx], 1
.text:00000616                 xor     eax, eax
.text:00000618
.text:00000618 loc_618:                                ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+54j
.text:00000618                                         ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+72j ...
.text:00000618                 push    edx
.text:00000619                 mov     ecx, ebp
.text:0000061B                 push    eax
.text:0000061C                 lea     edx, $LN34
.text:00000622                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000627                 pop     eax
.text:00000628                 pop     edx
.text:00000629                 pop     edi
.text:0000062A                 add     esp, 3Ch
.text:0000062D                 cmp     ebp, esp
.text:0000062F                 call    __RTC_CheckEsp
.text:00000634                 mov     esp, ebp
.text:00000636                 pop     ebp
.text:00000637                 retn    18h
.text:00000637 _Lzma2Dec_DecodeToDic@24 endp
.text:00000637
.text:00000637 ; ---------------------------------------------------------------------------
.text:0000063A                 align 4
.text:0000063C $LN34           dd 1                    ; DATA XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+3ECo
.text:00000640                 dd offset $LN33
.text:00000644 $LN33           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00000640o
.text:0000064C                 dd offset $LN32         ; "srcSizeCur"
.text:00000650 $LN32           db 'srcSizeCur',0       ; DATA XREF: .text:0000064Co
.text:0000065B                 align 10h
.text:00000660
.text:00000660 ; =============== S U B R O U T I N E =======================================
.text:00000660
.text:00000660 ; Attributes: bp-based frame
.text:00000660
.text:00000660 ; __stdcall Lzma2Dec_UpdateState(x, x)
.text:00000660 _Lzma2Dec_UpdateState@8 proc near       ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+CAp
.text:00000660
.text:00000660 var_10          = dword ptr -10h
.text:00000660 var_C           = dword ptr -0Ch
.text:00000660 var_8           = dword ptr -8
.text:00000660 var_4           = dword ptr -4
.text:00000660 arg_0           = dword ptr  8
.text:00000660 arg_4           = byte ptr  0Ch
.text:00000660
.text:00000660                 push    ebp
.text:00000661                 mov     ebp, esp
.text:00000663                 sub     esp, 10h
.text:00000666                 mov     eax, 0CCCCCCCCh
.text:0000066B                 mov     [ebp+var_10], eax
.text:0000066E                 mov     [ebp+var_C], eax
.text:00000671                 mov     [ebp+var_8], eax
.text:00000674                 mov     [ebp+var_4], eax
.text:00000677                 mov     eax, [ebp+arg_0]
.text:0000067A                 mov     ecx, [eax+78h]
.text:0000067D                 mov     [ebp+var_C], ecx
.text:00000680                 cmp     [ebp+var_C], 5  ; switch 6 cases
.text:00000684                 ja      loc_852         ; jumptable 0000068D default case
.text:0000068A                 mov     edx, [ebp+var_C]
.text:0000068D                 jmp     ds:$LN19[edx*4] ; switch jump
.text:00000694 ; ---------------------------------------------------------------------------
.text:00000694
.text:00000694 $LN12:                                  ; CODE XREF: Lzma2Dec_UpdateState(x,x)+2Dj
.text:00000694                                         ; DATA XREF: .text:$LN19o
.text:00000694                 mov     eax, [ebp+arg_0] ; jumptable 0000068D case 0
.text:00000697                 mov     cl, [ebp+arg_4]
.text:0000069A                 mov     [eax+7Ch], cl
.text:0000069D                 mov     edx, [ebp+arg_0]
.text:000006A0                 movzx   eax, byte ptr [edx+7Ch]
.text:000006A4                 test    eax, eax
.text:000006A6                 jnz     short loc_6B2
.text:000006A8                 mov     eax, 8
.text:000006AD                 jmp     loc_857
.text:000006B2 ; ---------------------------------------------------------------------------
.text:000006B2
.text:000006B2 loc_6B2:                                ; CODE XREF: Lzma2Dec_UpdateState(x,x)+46j
.text:000006B2                 mov     ecx, [ebp+arg_0]
.text:000006B5                 movzx   edx, byte ptr [ecx+7Ch]
.text:000006B9                 and     edx, 80h
.text:000006BF                 jnz     short loc_6E6
.text:000006C1                 mov     eax, [ebp+arg_0]
.text:000006C4                 movzx   ecx, byte ptr [eax+7Ch]
.text:000006C8                 and     ecx, 7Fh
.text:000006CB                 cmp     ecx, 2
.text:000006CE                 jle     short loc_6DA
.text:000006D0                 mov     eax, 9
.text:000006D5                 jmp     loc_857
.text:000006DA ; ---------------------------------------------------------------------------
.text:000006DA
.text:000006DA loc_6DA:                                ; CODE XREF: Lzma2Dec_UpdateState(x,x)+6Ej
.text:000006DA                 mov     edx, [ebp+arg_0]
.text:000006DD                 mov     dword ptr [edx+74h], 0
.text:000006E4                 jmp     short loc_6F9
.text:000006E6 ; ---------------------------------------------------------------------------
.text:000006E6
.text:000006E6 loc_6E6:                                ; CODE XREF: Lzma2Dec_UpdateState(x,x)+5Fj
.text:000006E6                 mov     eax, [ebp+arg_0]
.text:000006E9                 movzx   ecx, byte ptr [eax+7Ch]
.text:000006ED                 and     ecx, 1Fh
.text:000006F0                 shl     ecx, 10h
.text:000006F3                 mov     edx, [ebp+arg_0]
.text:000006F6                 mov     [edx+74h], ecx
.text:000006F9
.text:000006F9 loc_6F9:                                ; CODE XREF: Lzma2Dec_UpdateState(x,x)+84j
.text:000006F9                 mov     eax, 1
.text:000006FE                 jmp     loc_857
.text:00000703 ; ---------------------------------------------------------------------------
.text:00000703
.text:00000703 $LN7:                                   ; CODE XREF: Lzma2Dec_UpdateState(x,x)+2Dj
.text:00000703                                         ; DATA XREF: .text:$LN19o
.text:00000703                 movzx   eax, [ebp+arg_4] ; jumptable 0000068D case 1
.text:00000707                 shl     eax, 8
.text:0000070A                 mov     ecx, [ebp+arg_0]
.text:0000070D                 or      eax, [ecx+74h]
.text:00000710                 mov     edx, [ebp+arg_0]
.text:00000713                 mov     [edx+74h], eax
.text:00000716                 mov     eax, 2
.text:0000071B                 jmp     loc_857
.text:00000720 ; ---------------------------------------------------------------------------
.text:00000720
.text:00000720 $LN6_1:                                 ; CODE XREF: Lzma2Dec_UpdateState(x,x)+2Dj
.text:00000720                                         ; DATA XREF: .text:$LN19o
.text:00000720                 movzx   eax, [ebp+arg_4] ; jumptable 0000068D case 2
.text:00000724                 mov     ecx, [ebp+arg_0]
.text:00000727                 or      eax, [ecx+74h]
.text:0000072A                 mov     edx, [ebp+arg_0]
.text:0000072D                 mov     [edx+74h], eax
.text:00000730                 mov     eax, [ebp+arg_0]
.text:00000733                 mov     ecx, [eax+74h]
.text:00000736                 add     ecx, 1
.text:00000739                 mov     edx, [ebp+arg_0]
.text:0000073C                 mov     [edx+74h], ecx
.text:0000073F                 mov     eax, [ebp+arg_0]
.text:00000742                 movzx   eax, byte ptr [eax+7Ch]
.text:00000746                 and     eax, 80h
.text:0000074B                 neg     eax
.text:0000074D                 sbb     eax, eax
.text:0000074F                 and     eax, 0FFFFFFFDh
.text:00000752                 add     eax, 6
.text:00000755                 jmp     loc_857
.text:0000075A ; ---------------------------------------------------------------------------
.text:0000075A
.text:0000075A $LN5_1:                                 ; CODE XREF: Lzma2Dec_UpdateState(x,x)+2Dj
.text:0000075A                                         ; DATA XREF: .text:$LN19o
.text:0000075A                 movzx   ecx, [ebp+arg_4] ; jumptable 0000068D case 3
.text:0000075E                 shl     ecx, 8
.text:00000761                 mov     edx, [ebp+arg_0]
.text:00000764                 mov     [edx+70h], ecx
.text:00000767                 mov     eax, 4
.text:0000076C                 jmp     loc_857
.text:00000771 ; ---------------------------------------------------------------------------
.text:00000771
.text:00000771 $LN4_1:                                 ; CODE XREF: Lzma2Dec_UpdateState(x,x)+2Dj
.text:00000771                                         ; DATA XREF: .text:$LN19o
.text:00000771                 movzx   eax, [ebp+arg_4] ; jumptable 0000068D case 4
.text:00000775                 mov     ecx, [ebp+arg_0]
.text:00000778                 or      eax, [ecx+70h]
.text:0000077B                 mov     edx, [ebp+arg_0]
.text:0000077E                 mov     [edx+70h], eax
.text:00000781                 mov     eax, [ebp+arg_0]
.text:00000784                 mov     ecx, [eax+70h]
.text:00000787                 add     ecx, 1
.text:0000078A                 mov     edx, [ebp+arg_0]
.text:0000078D                 mov     [edx+70h], ecx
.text:00000790                 mov     eax, [ebp+arg_0]
.text:00000793                 movzx   ecx, byte ptr [eax+7Ch]
.text:00000797                 sar     ecx, 5
.text:0000079A                 and     ecx, 3
.text:0000079D                 cmp     ecx, 2
.text:000007A0                 jl      short loc_7AB
.text:000007A2                 mov     [ebp+var_10], 5
.text:000007A9                 jmp     short loc_7C1
.text:000007AB ; ---------------------------------------------------------------------------
.text:000007AB
.text:000007AB loc_7AB:                                ; CODE XREF: Lzma2Dec_UpdateState(x,x)+140j
.text:000007AB                 mov     edx, [ebp+arg_0]
.text:000007AE                 mov     eax, [edx+88h]
.text:000007B4                 neg     eax
.text:000007B6                 sbb     eax, eax
.text:000007B8                 and     eax, 3
.text:000007BB                 add     eax, 6
.text:000007BE                 mov     [ebp+var_10], eax
.text:000007C1
.text:000007C1 loc_7C1:                                ; CODE XREF: Lzma2Dec_UpdateState(x,x)+149j
.text:000007C1                 mov     eax, [ebp+var_10]
.text:000007C4                 jmp     loc_857
.text:000007C9 ; ---------------------------------------------------------------------------
.text:000007C9
.text:000007C9 $LN3:                                   ; CODE XREF: Lzma2Dec_UpdateState(x,x)+2Dj
.text:000007C9                                         ; DATA XREF: .text:$LN19o
.text:000007C9                 movzx   ecx, [ebp+arg_4] ; jumptable 0000068D case 5
.text:000007CD                 cmp     ecx, 0E1h ; 'ß'
.text:000007D3                 jl      short loc_7DC
.text:000007D5                 mov     eax, 9
.text:000007DA                 jmp     short loc_857
.text:000007DC ; ---------------------------------------------------------------------------
.text:000007DC
.text:000007DC loc_7DC:                                ; CODE XREF: Lzma2Dec_UpdateState(x,x)+173j
.text:000007DC                 movzx   eax, [ebp+arg_4]
.text:000007E0                 cdq
.text:000007E1                 mov     ecx, 9
.text:000007E6                 idiv    ecx
.text:000007E8                 mov     [ebp+var_4], edx
.text:000007EB                 movzx   eax, [ebp+arg_4]
.text:000007EF                 cdq
.text:000007F0                 mov     ecx, 9
.text:000007F5                 idiv    ecx
.text:000007F7                 mov     [ebp+arg_4], al
.text:000007FA                 movzx   eax, [ebp+arg_4]
.text:000007FE                 cdq
.text:000007FF                 mov     ecx, 5
.text:00000804                 idiv    ecx
.text:00000806                 mov     edx, [ebp+arg_0]
.text:00000809                 mov     [edx+8], eax
.text:0000080C                 movzx   eax, [ebp+arg_4]
.text:00000810                 cdq
.text:00000811                 mov     ecx, 5
.text:00000816                 idiv    ecx
.text:00000818                 mov     [ebp+var_8], edx
.text:0000081B                 mov     edx, [ebp+var_4]
.text:0000081E                 add     edx, [ebp+var_8]
.text:00000821                 cmp     edx, 4
.text:00000824                 jbe     short loc_82D
.text:00000826                 mov     eax, 9
.text:0000082B                 jmp     short loc_857
.text:0000082D ; ---------------------------------------------------------------------------
.text:0000082D
.text:0000082D loc_82D:                                ; CODE XREF: Lzma2Dec_UpdateState(x,x)+1C4j
.text:0000082D                 mov     eax, [ebp+arg_0]
.text:00000830                 mov     ecx, [ebp+var_4]
.text:00000833                 mov     [eax], ecx
.text:00000835                 mov     edx, [ebp+arg_0]
.text:00000838                 mov     eax, [ebp+var_8]
.text:0000083B                 mov     [edx+4], eax
.text:0000083E                 mov     ecx, [ebp+arg_0]
.text:00000841                 mov     dword ptr [ecx+88h], 0
.text:0000084B                 mov     eax, 6
.text:00000850                 jmp     short loc_857
.text:00000852 ; ---------------------------------------------------------------------------
.text:00000852
.text:00000852 loc_852:                                ; CODE XREF: Lzma2Dec_UpdateState(x,x)+24j
.text:00000852                 mov     eax, 9          ; jumptable 0000068D default case
.text:00000857
.text:00000857 loc_857:                                ; CODE XREF: Lzma2Dec_UpdateState(x,x)+4Dj
.text:00000857                                         ; Lzma2Dec_UpdateState(x,x)+75j ...
.text:00000857                 mov     esp, ebp
.text:00000859                 pop     ebp
.text:0000085A                 retn    8
.text:0000085A _Lzma2Dec_UpdateState@8 endp
.text:0000085A
.text:0000085A ; ---------------------------------------------------------------------------
.text:0000085D                 align 10h
.text:00000860 $LN19           dd offset $LN12         ; DATA XREF: Lzma2Dec_UpdateState(x,x)+2Dr
.text:00000860                 dd offset $LN7          ; jump table for switch statement
.text:00000860                 dd offset $LN6_1
.text:00000860                 dd offset $LN5_1
.text:00000860                 dd offset $LN4_1
.text:00000860                 dd offset $LN3
.text:00000878                 align 10h
.text:00000880
.text:00000880 ; =============== S U B R O U T I N E =======================================
.text:00000880
.text:00000880 ; Attributes: bp-based frame
.text:00000880
.text:00000880 ; int __stdcall LzmaDec_UpdateWithUncompressed(int, void *Src, size_t Size)
.text:00000880 _LzmaDec_UpdateWithUncompressed@12 proc near
.text:00000880                                         ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+20Dp
.text:00000880
.text:00000880 arg_0           = dword ptr  8
.text:00000880 Src             = dword ptr  0Ch
.text:00000880 Size            = dword ptr  10h
.text:00000880
.text:00000880                 push    ebp
.text:00000881                 mov     ebp, esp
.text:00000883                 mov     eax, [ebp+Size]
.text:00000886                 push    eax             ; Size
.text:00000887                 mov     ecx, [ebp+Src]
.text:0000088A                 push    ecx             ; Src
.text:0000088B                 mov     edx, [ebp+arg_0]
.text:0000088E                 mov     eax, [edx+14h]
.text:00000891                 mov     ecx, [ebp+arg_0]
.text:00000894                 add     eax, [ecx+24h]
.text:00000897                 push    eax             ; Dst
.text:00000898                 call    _memcpy
.text:0000089D                 add     esp, 0Ch
.text:000008A0                 mov     edx, [ebp+arg_0]
.text:000008A3                 mov     eax, [edx+24h]
.text:000008A6                 add     eax, [ebp+Size]
.text:000008A9                 mov     ecx, [ebp+arg_0]
.text:000008AC                 mov     [ecx+24h], eax
.text:000008AF                 mov     edx, [ebp+arg_0]
.text:000008B2                 cmp     dword ptr [edx+30h], 0
.text:000008B6                 jnz     short loc_8D5
.text:000008B8                 mov     eax, [ebp+arg_0]
.text:000008BB                 mov     ecx, [ebp+arg_0]
.text:000008BE                 mov     edx, [eax+0Ch]
.text:000008C1                 sub     edx, [ecx+2Ch]
.text:000008C4                 cmp     edx, [ebp+Size]
.text:000008C7                 ja      short loc_8D5
.text:000008C9                 mov     eax, [ebp+arg_0]
.text:000008CC                 mov     ecx, [ebp+arg_0]
.text:000008CF                 mov     edx, [ecx+0Ch]
.text:000008D2                 mov     [eax+30h], edx
.text:000008D5
.text:000008D5 loc_8D5:                                ; CODE XREF: LzmaDec_UpdateWithUncompressed(x,x,x)+36j
.text:000008D5                                         ; LzmaDec_UpdateWithUncompressed(x,x,x)+47j
.text:000008D5                 mov     eax, [ebp+arg_0]
.text:000008D8                 mov     ecx, [eax+2Ch]
.text:000008DB                 add     ecx, [ebp+Size]
.text:000008DE                 mov     edx, [ebp+arg_0]
.text:000008E1                 mov     [edx+2Ch], ecx
.text:000008E4                 cmp     ebp, esp
.text:000008E6                 call    __RTC_CheckEsp
.text:000008EB                 pop     ebp
.text:000008EC                 retn    0Ch
.text:000008EC _LzmaDec_UpdateWithUncompressed@12 endp
.text:000008EC
.text:000008EC ; ---------------------------------------------------------------------------
.text:000008EF                 align 10h
.text:000008F0
.text:000008F0 ; =============== S U B R O U T I N E =======================================
.text:000008F0
.text:000008F0 ; Attributes: bp-based frame
.text:000008F0
.text:000008F0 ; int __stdcall Lzma2Dec_DecodeToBuf(int, void *Dst, int, void *Src, int, int, int)
.text:000008F0                 public _Lzma2Dec_DecodeToBuf@28
.text:000008F0 _Lzma2Dec_DecodeToBuf@28 proc near
.text:000008F0
.text:000008F0 var_24          = dword ptr -24h
.text:000008F0 var_20          = dword ptr -20h
.text:000008F0 var_1C          = dword ptr -1Ch
.text:000008F0 Size            = dword ptr -18h
.text:000008F0 var_14          = dword ptr -14h
.text:000008F0 var_10          = dword ptr -10h
.text:000008F0 var_C           = dword ptr -0Ch
.text:000008F0 var_8           = dword ptr -8
.text:000008F0 var_4           = dword ptr -4
.text:000008F0 arg_0           = dword ptr  8
.text:000008F0 Dst             = dword ptr  0Ch
.text:000008F0 arg_8           = dword ptr  10h
.text:000008F0 Src             = dword ptr  14h
.text:000008F0 arg_10          = dword ptr  18h
.text:000008F0 arg_14          = dword ptr  1Ch
.text:000008F0 arg_18          = dword ptr  20h
.text:000008F0
.text:000008F0                 push    ebp
.text:000008F1                 mov     ebp, esp
.text:000008F3                 sub     esp, 24h
.text:000008F6                 mov     eax, 0CCCCCCCCh
.text:000008FB                 mov     [ebp+var_24], eax
.text:000008FE                 mov     [ebp+var_20], eax
.text:00000901                 mov     [ebp+var_1C], eax
.text:00000904                 mov     [ebp+Size], eax
.text:00000907                 mov     [ebp+var_14], eax
.text:0000090A                 mov     [ebp+var_10], eax
.text:0000090D                 mov     [ebp+var_C], eax
.text:00000910                 mov     [ebp+var_8], eax
.text:00000913                 mov     [ebp+var_4], eax
.text:00000916                 mov     eax, [ebp+arg_8]
.text:00000919                 mov     ecx, [eax]
.text:0000091B                 mov     [ebp+var_4], ecx
.text:0000091E                 mov     edx, [ebp+arg_10]
.text:00000921                 mov     eax, [edx]
.text:00000923                 mov     [ebp+var_8], eax
.text:00000926                 mov     ecx, [ebp+arg_8]
.text:00000929                 mov     dword ptr [ecx], 0
.text:0000092F                 mov     edx, [ebp+arg_10]
.text:00000932                 mov     dword ptr [edx], 0
.text:00000938
.text:00000938 loc_938:                                ; CODE XREF: Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x):loc_A2Dj
.text:00000938                 mov     eax, [ebp+var_8]
.text:0000093B                 mov     [ebp+var_10], eax
.text:0000093E                 mov     ecx, [ebp+arg_0]
.text:00000941                 mov     edx, [ebp+arg_0]
.text:00000944                 mov     eax, [ecx+24h]
.text:00000947                 cmp     eax, [edx+28h]
.text:0000094A                 jnz     short loc_956
.text:0000094C                 mov     ecx, [ebp+arg_0]
.text:0000094F                 mov     dword ptr [ecx+24h], 0
.text:00000956
.text:00000956 loc_956:                                ; CODE XREF: Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)+5Aj
.text:00000956                 mov     edx, [ebp+arg_0]
.text:00000959                 mov     eax, [edx+24h]
.text:0000095C                 mov     [ebp+var_1C], eax
.text:0000095F                 mov     ecx, [ebp+arg_0]
.text:00000962                 mov     edx, [ecx+28h]
.text:00000965                 sub     edx, [ebp+var_1C]
.text:00000968                 cmp     [ebp+var_4], edx
.text:0000096B                 jbe     short loc_97F
.text:0000096D                 mov     eax, [ebp+arg_0]
.text:00000970                 mov     ecx, [eax+28h]
.text:00000973                 mov     [ebp+Size], ecx
.text:00000976                 mov     [ebp+var_20], 0
.text:0000097D                 jmp     short loc_98E
.text:0000097F ; ---------------------------------------------------------------------------
.text:0000097F
.text:0000097F loc_97F:                                ; CODE XREF: Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)+7Bj
.text:0000097F                 mov     edx, [ebp+var_1C]
.text:00000982                 add     edx, [ebp+var_4]
.text:00000985                 mov     [ebp+Size], edx
.text:00000988                 mov     eax, [ebp+arg_14]
.text:0000098B                 mov     [ebp+var_20], eax
.text:0000098E
.text:0000098E loc_98E:                                ; CODE XREF: Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)+8Dj
.text:0000098E                 mov     ecx, [ebp+arg_18]
.text:00000991                 push    ecx             ; int
.text:00000992                 mov     edx, [ebp+var_20]
.text:00000995                 push    edx             ; int
.text:00000996                 lea     eax, [ebp+var_10]
.text:00000999                 push    eax             ; int
.text:0000099A                 mov     ecx, [ebp+Src]
.text:0000099D                 push    ecx             ; Src
.text:0000099E                 mov     edx, [ebp+Size]
.text:000009A1                 push    edx             ; int
.text:000009A2                 mov     eax, [ebp+arg_0]
.text:000009A5                 push    eax             ; int
.text:000009A6                 call    _Lzma2Dec_DecodeToDic@24 ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)
.text:000009AB                 mov     [ebp+var_24], eax
.text:000009AE                 mov     ecx, [ebp+Src]
.text:000009B1                 add     ecx, [ebp+var_10]
.text:000009B4                 mov     [ebp+Src], ecx
.text:000009B7                 mov     edx, [ebp+var_8]
.text:000009BA                 sub     edx, [ebp+var_10]
.text:000009BD                 mov     [ebp+var_8], edx
.text:000009C0                 mov     eax, [ebp+arg_10]
.text:000009C3                 mov     ecx, [eax]
.text:000009C5                 add     ecx, [ebp+var_10]
.text:000009C8                 mov     edx, [ebp+arg_10]
.text:000009CB                 mov     [edx], ecx
.text:000009CD                 mov     eax, [ebp+arg_0]
.text:000009D0                 mov     ecx, [eax+24h]
.text:000009D3                 sub     ecx, [ebp+var_1C]
.text:000009D6                 mov     [ebp+Size], ecx
.text:000009D9                 mov     edx, [ebp+Size]
.text:000009DC                 push    edx             ; Size
.text:000009DD                 mov     eax, [ebp+arg_0]
.text:000009E0                 mov     ecx, [eax+14h]
.text:000009E3                 add     ecx, [ebp+var_1C]
.text:000009E6                 push    ecx             ; Src
.text:000009E7                 mov     edx, [ebp+Dst]
.text:000009EA                 push    edx             ; Dst
.text:000009EB                 call    _memcpy
.text:000009F0                 add     esp, 0Ch
.text:000009F3                 mov     eax, [ebp+Dst]
.text:000009F6                 add     eax, [ebp+Size]
.text:000009F9                 mov     [ebp+Dst], eax
.text:000009FC                 mov     ecx, [ebp+var_4]
.text:000009FF                 sub     ecx, [ebp+Size]
.text:00000A02                 mov     [ebp+var_4], ecx
.text:00000A05                 mov     edx, [ebp+arg_8]
.text:00000A08                 mov     eax, [edx]
.text:00000A0A                 add     eax, [ebp+Size]
.text:00000A0D                 mov     ecx, [ebp+arg_8]
.text:00000A10                 mov     [ecx], eax
.text:00000A12                 cmp     [ebp+var_24], 0
.text:00000A16                 jz      short loc_A1D
.text:00000A18                 mov     eax, [ebp+var_24]
.text:00000A1B                 jmp     short loc_A32
.text:00000A1D ; ---------------------------------------------------------------------------
.text:00000A1D
.text:00000A1D loc_A1D:                                ; CODE XREF: Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)+126j
.text:00000A1D                 cmp     [ebp+Size], 0
.text:00000A21                 jz      short loc_A29
.text:00000A23                 cmp     [ebp+var_4], 0
.text:00000A27                 jnz     short loc_A2D
.text:00000A29
.text:00000A29 loc_A29:                                ; CODE XREF: Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)+131j
.text:00000A29                 xor     eax, eax
.text:00000A2B                 jmp     short loc_A32
.text:00000A2D ; ---------------------------------------------------------------------------
.text:00000A2D
.text:00000A2D loc_A2D:                                ; CODE XREF: Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)+137j
.text:00000A2D                 jmp     loc_938
.text:00000A32 ; ---------------------------------------------------------------------------
.text:00000A32
.text:00000A32 loc_A32:                                ; CODE XREF: Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)+12Bj
.text:00000A32                                         ; Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)+13Bj
.text:00000A32                 push    edx
.text:00000A33                 mov     ecx, ebp
.text:00000A35                 push    eax
.text:00000A36                 lea     edx, $LN13
.text:00000A3C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000A41                 pop     eax
.text:00000A42                 pop     edx
.text:00000A43                 add     esp, 24h
.text:00000A46                 cmp     ebp, esp
.text:00000A48                 call    __RTC_CheckEsp
.text:00000A4D                 mov     esp, ebp
.text:00000A4F                 pop     ebp
.text:00000A50                 retn    1Ch
.text:00000A50 _Lzma2Dec_DecodeToBuf@28 endp
.text:00000A50
.text:00000A50 ; ---------------------------------------------------------------------------
.text:00000A53                 align 4
.text:00000A54 $LN13           dd 1                    ; DATA XREF: Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)+146o
.text:00000A58                 dd offset $LN12_0
.text:00000A5C $LN12_0         dd 0FFFFFFF0h, 4        ; DATA XREF: .text:00000A58o
.text:00000A64                 dd offset $LN11         ; "srcSizeCur"
.text:00000A68 $LN11           db 'srcSizeCur',0       ; DATA XREF: .text:00000A64o
.text:00000A73                 align 10h
.text:00000A80
.text:00000A80 ; =============== S U B R O U T I N E =======================================
.text:00000A80
.text:00000A80 ; Attributes: bp-based frame
.text:00000A80
.text:00000A80 ; int __stdcall Lzma2Decode(int, int, void *Src, int, char, int, int, int)
.text:00000A80                 public _Lzma2Decode@32
.text:00000A80 _Lzma2Decode@32 proc near
.text:00000A80
.text:00000A80 var_A8          = dword ptr -0A8h
.text:00000A80 var_A4          = dword ptr -0A4h
.text:00000A80 var_A0          = dword ptr -0A0h
.text:00000A80 var_9C          = dword ptr -9Ch
.text:00000A80 var_94          = dword ptr -94h
.text:00000A80 var_84          = dword ptr -84h
.text:00000A80 var_80          = dword ptr -80h
.text:00000A80 var_70          = dword ptr -70h
.text:00000A80 var_6C          = dword ptr -6Ch
.text:00000A80 var_4           = dword ptr -4
.text:00000A80 arg_0           = dword ptr  8
.text:00000A80 arg_4           = dword ptr  0Ch
.text:00000A80 Src             = dword ptr  10h
.text:00000A80 arg_C           = dword ptr  14h
.text:00000A80 arg_10          = byte ptr  18h
.text:00000A80 arg_14          = dword ptr  1Ch
.text:00000A80 arg_18          = dword ptr  20h
.text:00000A80 arg_1C          = dword ptr  24h
.text:00000A80
.text:00000A80                 push    ebp
.text:00000A81                 mov     ebp, esp
.text:00000A83                 sub     esp, 0A8h
.text:00000A89                 push    edi
.text:00000A8A                 lea     edi, [ebp+var_A8]
.text:00000A90                 mov     ecx, 2Ah ; '*'
.text:00000A95                 mov     eax, 0CCCCCCCCh
.text:00000A9A                 rep stosd
.text:00000A9C                 mov     eax, dword ptr ds:___security_cookie
.text:00000AA1                 xor     eax, ebp
.text:00000AA3                 mov     [ebp+var_4], eax
.text:00000AA6                 mov     eax, [ebp+arg_4]
.text:00000AA9                 mov     ecx, [eax]
.text:00000AAB                 mov     [ebp+var_A0], ecx
.text:00000AB1                 mov     edx, [ebp+arg_C]
.text:00000AB4                 mov     eax, [edx]
.text:00000AB6                 mov     [ebp+var_A4], eax
.text:00000ABC                 mov     ecx, [ebp+arg_C]
.text:00000ABF                 mov     dword ptr [ecx], 0
.text:00000AC5                 mov     edx, [ebp+arg_4]
.text:00000AC8                 mov     dword ptr [edx], 0
.text:00000ACE                 mov     eax, [ebp+arg_18]
.text:00000AD1                 mov     dword ptr [eax], 0
.text:00000AD7                 mov     [ebp+var_80], 0
.text:00000ADE                 mov     [ebp+var_84], 0
.text:00000AE8                 mov     ecx, [ebp+arg_1C]
.text:00000AEB                 push    ecx
.text:00000AEC                 movzx   edx, [ebp+arg_10]
.text:00000AF0                 push    edx
.text:00000AF1                 lea     eax, [ebp+var_94]
.text:00000AF7                 push    eax
.text:00000AF8                 call    _Lzma2Dec_AllocateProbs@12 ; Lzma2Dec_AllocateProbs(x,x,x)
.text:00000AFD                 mov     [ebp+var_A8], eax
.text:00000B03                 cmp     [ebp+var_A8], 0
.text:00000B0A                 jz      short loc_B17
.text:00000B0C                 mov     eax, [ebp+var_A8]
.text:00000B12                 jmp     loc_B9F
.text:00000B17 ; ---------------------------------------------------------------------------
.text:00000B17
.text:00000B17 loc_B17:                                ; CODE XREF: Lzma2Decode(x,x,x,x,x,x,x,x)+8Aj
.text:00000B17                 mov     ecx, [ebp+arg_0]
.text:00000B1A                 mov     [ebp+var_80], ecx
.text:00000B1D                 mov     edx, [ebp+var_A0]
.text:00000B23                 mov     [ebp+var_6C], edx
.text:00000B26                 lea     eax, [ebp+var_94]
.text:00000B2C                 push    eax
.text:00000B2D                 call    _Lzma2Dec_Init@4 ; Lzma2Dec_Init(x)
.text:00000B32                 mov     ecx, [ebp+arg_C]
.text:00000B35                 mov     edx, [ebp+var_A4]
.text:00000B3B                 mov     [ecx], edx
.text:00000B3D                 mov     eax, [ebp+arg_18]
.text:00000B40                 push    eax             ; int
.text:00000B41                 mov     ecx, [ebp+arg_14]
.text:00000B44                 push    ecx             ; int
.text:00000B45                 mov     edx, [ebp+arg_C]
.text:00000B48                 push    edx             ; int
.text:00000B49                 mov     eax, [ebp+Src]
.text:00000B4C                 push    eax             ; Src
.text:00000B4D                 mov     ecx, [ebp+var_A0]
.text:00000B53                 push    ecx             ; int
.text:00000B54                 lea     edx, [ebp+var_94]
.text:00000B5A                 push    edx             ; int
.text:00000B5B                 call    _Lzma2Dec_DecodeToDic@24 ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)
.text:00000B60                 mov     [ebp+var_9C], eax
.text:00000B66                 mov     eax, [ebp+arg_4]
.text:00000B69                 mov     ecx, [ebp+var_70]
.text:00000B6C                 mov     [eax], ecx
.text:00000B6E                 cmp     [ebp+var_9C], 0
.text:00000B75                 jnz     short loc_B89
.text:00000B77                 mov     edx, [ebp+arg_18]
.text:00000B7A                 cmp     dword ptr [edx], 3
.text:00000B7D                 jnz     short loc_B89
.text:00000B7F                 mov     [ebp+var_9C], 6
.text:00000B89
.text:00000B89 loc_B89:                                ; CODE XREF: Lzma2Decode(x,x,x,x,x,x,x,x)+F5j
.text:00000B89                                         ; Lzma2Decode(x,x,x,x,x,x,x,x)+FDj
.text:00000B89                 mov     eax, [ebp+arg_1C]
.text:00000B8C                 push    eax
.text:00000B8D                 lea     ecx, [ebp+var_94]
.text:00000B93                 push    ecx
.text:00000B94                 call    _LzmaDec_FreeProbs@8 ; LzmaDec_FreeProbs(x,x)
.text:00000B99                 mov     eax, [ebp+var_9C]
.text:00000B9F
.text:00000B9F loc_B9F:                                ; CODE XREF: Lzma2Decode(x,x,x,x,x,x,x,x)+92j
.text:00000B9F                 push    edx
.text:00000BA0                 mov     ecx, ebp
.text:00000BA2                 push    eax
.text:00000BA3                 lea     edx, $LN7_0
.text:00000BA9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BAE                 pop     eax
.text:00000BAF                 pop     edx
.text:00000BB0                 pop     edi
.text:00000BB1                 mov     ecx, [ebp+var_4]
.text:00000BB4                 xor     ecx, ebp
.text:00000BB6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000BBB                 add     esp, 0A8h
.text:00000BC1                 cmp     ebp, esp
.text:00000BC3                 call    __RTC_CheckEsp
.text:00000BC8                 mov     esp, ebp
.text:00000BCA                 pop     ebp
.text:00000BCB                 retn    20h
.text:00000BCB _Lzma2Decode@32 endp
.text:00000BCB
.text:00000BCB ; ---------------------------------------------------------------------------
.text:00000BCE                 align 10h
.text:00000BD0 $LN7_0          dd 1                    ; DATA XREF: Lzma2Decode(x,x,x,x,x,x,x,x)+123o
.text:00000BD4                 dd offset $LN6_2
.text:00000BD8 $LN6_2          dd 0FFFFFF6Ch, 8Ch      ; DATA XREF: .text:00000BD4o
.text:00000BE0                 dd offset $LN5_2
.text:00000BE4 $LN5_2          db 70h, 0               ; DATA XREF: .text:00000BE0o
.text:00000BE6                 align 4
.text:00000BE6 _text           ends
.text:00000BE6
.rtc$TMZ:00000BE8 ; ===========================================================================
.rtc$TMZ:00000BE8
.rtc$TMZ:00000BE8 ; Segment type: Pure data
.rtc$TMZ:00000BE8 ; Segment permissions: Read
.rtc$TMZ:00000BE8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000BE8                 assume cs:_rtc$TMZ
.rtc$TMZ:00000BE8                 ;org 0BE8h
.rtc$TMZ:00000BE8 ; COMDAT (pick any)
.rtc$TMZ:00000BE8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000BE8 _rtc$TMZ        ends
.rtc$TMZ:00000BE8
.rtc$IMZ:00000BEC ; ===========================================================================
.rtc$IMZ:00000BEC
.rtc$IMZ:00000BEC ; Segment type: Pure data
.rtc$IMZ:00000BEC ; Segment permissions: Read
.rtc$IMZ:00000BEC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000BEC                 assume cs:_rtc$IMZ
.rtc$IMZ:00000BEC                 ;org 0BECh
.rtc$IMZ:00000BEC ; COMDAT (pick any)
.rtc$IMZ:00000BEC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000BEC _rtc$IMZ        ends
.rtc$IMZ:00000BEC
UNDEF:00000BF0 ; ===========================================================================
UNDEF:00000BF0
UNDEF:00000BF0 ; Segment type: Externs
UNDEF:00000BF0 ; UNDEF
UNDEF:00000BF0 ; __stdcall LzmaDec_AllocateProbs(x, x, x, x)
UNDEF:00000BF0                 extrn _LzmaDec_AllocateProbs@16:near
UNDEF:00000BF0                                         ; CODE XREF: Lzma2Dec_AllocateProbs(x,x,x)+51p
UNDEF:00000BF4                 extrn ___security_cookie:near
UNDEF:00000BF4                                         ; DATA XREF: Lzma2Dec_AllocateProbs(x,x,x)+1Dr
UNDEF:00000BF4                                         ; Lzma2Dec_Allocate(x,x,x)+1Dr ...
UNDEF:00000BF8                 extrn __RTC_CheckEsp:near
UNDEF:00000BF8                                         ; CODE XREF: Lzma2Dec_AllocateProbs(x,x,x)+76p
UNDEF:00000BF8                                         ; Lzma2Dec_Allocate(x,x,x)+76p ...
UNDEF:00000BFC ; __fastcall __security_check_cookie(x)
UNDEF:00000BFC                 extrn @__security_check_cookie@4:near
UNDEF:00000BFC                                         ; CODE XREF: Lzma2Dec_AllocateProbs(x,x,x)+6Cp
UNDEF:00000BFC                                         ; Lzma2Dec_Allocate(x,x,x)+6Cp ...
UNDEF:00000C00 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000C00                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000C00                                         ; CODE XREF: Lzma2Dec_AllocateProbs(x,x,x)+60p
UNDEF:00000C00                                         ; Lzma2Dec_Allocate(x,x,x)+60p ...
UNDEF:00000C04                 extrn __RTC_Shutdown:near
UNDEF:00000C04                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000C08                 extrn __RTC_InitBase:near
UNDEF:00000C08                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000C0C ; __stdcall LzmaDec_Allocate(x, x, x, x)
UNDEF:00000C0C                 extrn _LzmaDec_Allocate@16:near
UNDEF:00000C0C                                         ; CODE XREF: Lzma2Dec_Allocate(x,x,x)+51p
UNDEF:00000C10 ; __stdcall LzmaDec_Init(x)
UNDEF:00000C10                 extrn _LzmaDec_Init@4:near ; CODE XREF: Lzma2Dec_Init(x)+38p
UNDEF:00000C14 ; __stdcall LzmaDec_DecodeToDic(x, x, x, x, x, x)
UNDEF:00000C14                 extrn _LzmaDec_DecodeToDic@24:near
UNDEF:00000C14                                         ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+320p
UNDEF:00000C18 ; __stdcall LzmaDec_InitDicAndState(x, x, x)
UNDEF:00000C18                 extrn _LzmaDec_InitDicAndState@12:near
UNDEF:00000C18                                         ; CODE XREF: Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+1D4p
UNDEF:00000C18                                         ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)+2C8p
UNDEF:00000C1C ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00000C1C                 extrn _memcpy:near      ; CODE XREF: LzmaDec_UpdateWithUncompressed(x,x,x)+18p
UNDEF:00000C1C                                         ; Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)+FBp
UNDEF:00000C20 ; __stdcall LzmaDec_FreeProbs(x, x)
UNDEF:00000C20                 extrn _LzmaDec_FreeProbs@8:near
UNDEF:00000C20                                         ; CODE XREF: Lzma2Decode(x,x,x,x,x,x,x,x)+114p
UNDEF:00000C20
UNDEF:00000C20
UNDEF:00000C20                 end