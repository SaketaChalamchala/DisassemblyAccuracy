.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : FED65F2A7E635731F7E76CFE3E314861
.rdata:00000000 ; Input CRC32 : 5816F07A
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\CabIn.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG69230        db '[ERROR-LONG-PATH]',0
.rdata:00000000                                         ; DATA XREF: NArchive::NCab::CInArchive::ReadName(AString &)+116o
.rdata:00000012                 align 4
.rdata:00000012 _rdata          ends
.rdata:00000012
.text:00000014 ; ===========================================================================
.text:00000014
.text:00000014 ; Segment type: Pure code
.text:00000014 ; Segment permissions: Read/Execute
.text:00000014 _text           segment para public 'CODE' use32
.text:00000014                 assume cs:_text
.text:00000014                 ;org 14h
.text:00000014                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000014
.text:00000014 ; =============== S U B R O U T I N E =======================================
.text:00000014
.text:00000014 ; Attributes: bp-based frame
.text:00000014
.text:00000014 ; void __thiscall NArchive::NCab::CInArchive::Skip(NArchive::NCab::CInArchive *this, unsigned int)
.text:00000014                 public ?Skip@CInArchive@NCab@NArchive@@AAEXI@Z
.text:00000014 ?Skip@CInArchive@NCab@NArchive@@AAEXI@Z proc near
.text:00000014                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+617p
.text:00000014                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+6DEp
.text:00000014
.text:00000014 var_8           = dword ptr -8
.text:00000014 var_4           = dword ptr -4
.text:00000014 arg_0           = dword ptr  8
.text:00000014
.text:00000014                 push    ebp
.text:00000015                 mov     ebp, esp
.text:00000017                 sub     esp, 8
.text:0000001A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000021                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000028                 mov     [ebp+var_4], ecx
.text:0000002B                 mov     eax, [ebp+arg_0]
.text:0000002E                 push    eax             ; unsigned int
.text:0000002F                 mov     ecx, [ebp+var_4] ; this
.text:00000032                 call    ?Skip@CInBufferBase@@QAEII@Z ; CInBufferBase::Skip(uint)
.text:00000037                 cmp     eax, [ebp+arg_0]
.text:0000003A                 jz      short loc_55
.text:0000003C                 xor     ecx, ecx
.text:0000003E                 mov     byte ptr [ebp+var_8+2], cl
.text:00000041                 mov     dl, byte ptr [ebp+var_8+2]
.text:00000044                 mov     byte ptr [ebp+var_8+3], dl
.text:00000047                 push    offset __TI1?AUCUnexpectedEndException@NCab@NArchive@@
.text:0000004C                 lea     eax, [ebp+var_8+3]
.text:0000004F                 push    eax
.text:00000050                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000055 ; ---------------------------------------------------------------------------
.text:00000055
.text:00000055 loc_55:                                 ; CODE XREF: NArchive::NCab::CInArchive::Skip(uint)+26j
.text:00000055                 add     esp, 8
.text:00000058                 cmp     ebp, esp
.text:0000005A                 call    __RTC_CheckEsp
.text:0000005F                 mov     esp, ebp
.text:00000061                 pop     ebp
.text:00000062                 retn    4
.text:00000062 ?Skip@CInArchive@NCab@NArchive@@AAEXI@Z endp
.text:00000062
.text:00000062 ; ---------------------------------------------------------------------------
.text:00000065                 db 0Fh dup(0CCh)
.text:00000074
.text:00000074 ; =============== S U B R O U T I N E =======================================
.text:00000074
.text:00000074 ; Attributes: bp-based frame
.text:00000074
.text:00000074 ; void __thiscall NArchive::NCab::CInArchive::Read(NArchive::NCab::CInArchive *this, unsigned __int8 *, unsigned int)
.text:00000074                 public ?Read@CInArchive@NCab@NArchive@@AAEXPAEI@Z
.text:00000074 ?Read@CInArchive@NCab@NArchive@@AAEXPAEI@Z proc near
.text:00000074                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+5B8p
.text:00000074                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+69Cp ...
.text:00000074
.text:00000074 var_8           = dword ptr -8
.text:00000074 var_4           = dword ptr -4
.text:00000074 arg_0           = dword ptr  8
.text:00000074 arg_4           = dword ptr  0Ch
.text:00000074
.text:00000074                 push    ebp
.text:00000075                 mov     ebp, esp
.text:00000077                 sub     esp, 8
.text:0000007A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000081                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000088                 mov     [ebp+var_4], ecx
.text:0000008B                 mov     eax, [ebp+arg_4]
.text:0000008E                 push    eax             ; unsigned int
.text:0000008F                 mov     ecx, [ebp+arg_0]
.text:00000092                 push    ecx             ; unsigned __int8 *
.text:00000093                 mov     ecx, [ebp+var_4] ; this
.text:00000096                 call    ?ReadBytes@CInBufferBase@@QAEIPAEI@Z ; CInBufferBase::ReadBytes(uchar *,uint)
.text:0000009B                 cmp     eax, [ebp+arg_4]
.text:0000009E                 jz      short loc_B9
.text:000000A0                 xor     edx, edx
.text:000000A2                 mov     byte ptr [ebp+var_8+2], dl
.text:000000A5                 mov     al, byte ptr [ebp+var_8+2]
.text:000000A8                 mov     byte ptr [ebp+var_8+3], al
.text:000000AB                 push    offset __TI1?AUCUnexpectedEndException@NCab@NArchive@@
.text:000000B0                 lea     ecx, [ebp+var_8+3]
.text:000000B3                 push    ecx
.text:000000B4                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000000B9 ; ---------------------------------------------------------------------------
.text:000000B9
.text:000000B9 loc_B9:                                 ; CODE XREF: NArchive::NCab::CInArchive::Read(uchar *,uint)+2Aj
.text:000000B9                 add     esp, 8
.text:000000BC                 cmp     ebp, esp
.text:000000BE                 call    __RTC_CheckEsp
.text:000000C3                 mov     esp, ebp
.text:000000C5                 pop     ebp
.text:000000C6                 retn    8
.text:000000C6 ?Read@CInArchive@NCab@NArchive@@AAEXPAEI@Z endp
.text:000000C6
.text:000000C6 ; ---------------------------------------------------------------------------
.text:000000C9                 db 0Bh dup(0CCh)
.text:000000D4
.text:000000D4 ; =============== S U B R O U T I N E =======================================
.text:000000D4
.text:000000D4 ; Attributes: bp-based frame
.text:000000D4
.text:000000D4 ; void __thiscall NArchive::NCab::CInArchive::ReadName(NArchive::NCab::CInArchive *this, struct AString *)
.text:000000D4                 public ?ReadName@CInArchive@NCab@NArchive@@AAEXAAVAString@@@Z
.text:000000D4 ?ReadName@CInArchive@NCab@NArchive@@AAEXAAVAString@@@Z proc near
.text:000000D4                                         ; CODE XREF: NArchive::NCab::CInArchive::ReadOtherArc(NArchive::NCab::COtherArc &)+15p
.text:000000D4                                         ; NArchive::NCab::CInArchive::ReadOtherArc(NArchive::NCab::COtherArc &)+24p ...
.text:000000D4
.text:000000D4 var_24          = dword ptr -24h
.text:000000D4 var_20          = dword ptr -20h
.text:000000D4 var_1C          = byte ptr -1Ch
.text:000000D4 var_18          = dword ptr -18h
.text:000000D4 var_14          = dword ptr -14h
.text:000000D4 var_10          = byte ptr -10h
.text:000000D4 var_C           = dword ptr -0Ch
.text:000000D4 var_8           = dword ptr -8
.text:000000D4 var_4           = dword ptr -4
.text:000000D4 arg_0           = dword ptr  8
.text:000000D4
.text:000000D4                 push    ebp
.text:000000D5                 mov     ebp, esp
.text:000000D7                 sub     esp, 24h
.text:000000DA                 mov     eax, 0CCCCCCCCh
.text:000000DF                 mov     [ebp+var_24], eax
.text:000000E2                 mov     [ebp+var_20], eax
.text:000000E5                 mov     dword ptr [ebp+var_1C], eax
.text:000000E8                 mov     [ebp+var_18], eax
.text:000000EB                 mov     [ebp+var_14], eax
.text:000000EE                 mov     dword ptr [ebp+var_10], eax
.text:000000F1                 mov     [ebp+var_C], eax
.text:000000F4                 mov     [ebp+var_8], eax
.text:000000F7                 mov     [ebp+var_4], eax
.text:000000FA                 mov     [ebp+var_4], ecx
.text:000000FD                 mov     [ebp+var_8], 0
.text:00000104                 jmp     short loc_10F
.text:00000106 ; ---------------------------------------------------------------------------
.text:00000106
.text:00000106 loc_106:                                ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+D2j
.text:00000106                 mov     eax, [ebp+var_8]
.text:00000109                 add     eax, 1
.text:0000010C                 mov     [ebp+var_8], eax
.text:0000010F
.text:0000010F loc_10F:                                ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+30j
.text:0000010F                 cmp     [ebp+var_8], 2000h
.text:00000116                 jnb     loc_1AB
.text:0000011C                 lea     ecx, [ebp+var_10+3]
.text:0000011F                 push    ecx             ; unsigned __int8 *
.text:00000120                 mov     ecx, [ebp+var_4] ; this
.text:00000123                 call    ?ReadByte@CInBufferBase@@QAE_NAAE@Z ; CInBufferBase::ReadByte(uchar &)
.text:00000128                 movzx   edx, al
.text:0000012B                 test    edx, edx
.text:0000012D                 jnz     short loc_148
.text:0000012F                 xor     eax, eax
.text:00000131                 mov     byte ptr [ebp+var_24+2], al
.text:00000134                 mov     cl, byte ptr [ebp+var_24+2]
.text:00000137                 mov     byte ptr [ebp+var_24+3], cl
.text:0000013A                 push    offset __TI1?AUCUnexpectedEndException@NCab@NArchive@@
.text:0000013F                 lea     edx, [ebp+var_24+3]
.text:00000142                 push    edx
.text:00000143                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000148 ; ---------------------------------------------------------------------------
.text:00000148
.text:00000148 loc_148:                                ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+59j
.text:00000148                 movzx   eax, [ebp+var_10+3]
.text:0000014C                 test    eax, eax
.text:0000014E                 jnz     short loc_16D
.text:00000150                 mov     ecx, [ebp+var_8]
.text:00000153                 push    ecx             ; unsigned int
.text:00000154                 mov     ecx, [ebp+var_4]
.text:00000157                 add     ecx, 28h ; '('
.text:0000015A                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:0000015F                 push    eax             ; char *
.text:00000160                 mov     ecx, [ebp+arg_0] ; this
.text:00000163                 call    ?SetFrom@AString@@QAEXPBDI@Z ; AString::SetFrom(char const *,uint)
.text:00000168                 jmp     loc_1F7
.text:0000016D ; ---------------------------------------------------------------------------
.text:0000016D
.text:0000016D loc_16D:                                ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+7Aj
.text:0000016D                 mov     ecx, [ebp+var_4]
.text:00000170                 add     ecx, 28h ; '('
.text:00000173                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000178                 cmp     eax, [ebp+var_8]
.text:0000017B                 jnz     short loc_192
.text:0000017D                 mov     edx, [ebp+var_8]
.text:00000180                 push    edx
.text:00000181                 mov     eax, [ebp+var_8]
.text:00000184                 shl     eax, 1
.text:00000186                 push    eax
.text:00000187                 mov     ecx, [ebp+var_4]
.text:0000018A                 add     ecx, 28h ; '('
.text:0000018D                 call    ?ChangeSize_KeepData@?$CBuffer@E@@QAEXII@Z ; CBuffer<uchar>::ChangeSize_KeepData(uint,uint)
.text:00000192
.text:00000192 loc_192:                                ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+A7j
.text:00000192                 mov     ecx, [ebp+var_4]
.text:00000195                 add     ecx, 28h ; '('
.text:00000198                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:0000019D                 mov     ecx, [ebp+var_8]
.text:000001A0                 mov     dl, [ebp+var_10+3]
.text:000001A3                 mov     [eax+ecx], dl
.text:000001A6                 jmp     loc_106
.text:000001AB ; ---------------------------------------------------------------------------
.text:000001AB
.text:000001AB loc_1AB:                                ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+42j
.text:000001AB                                         ; NArchive::NCab::CInArchive::ReadName(AString &):loc_1E1j
.text:000001AB                 lea     eax, [ebp+var_1C+3]
.text:000001AE                 push    eax             ; unsigned __int8 *
.text:000001AF                 mov     ecx, [ebp+var_4] ; this
.text:000001B2                 call    ?ReadByte@CInBufferBase@@QAE_NAAE@Z ; CInBufferBase::ReadByte(uchar &)
.text:000001B7                 movzx   ecx, al
.text:000001BA                 test    ecx, ecx
.text:000001BC                 jnz     short loc_1D7
.text:000001BE                 xor     edx, edx
.text:000001C0                 mov     byte ptr [ebp+var_24], dl
.text:000001C3                 mov     al, byte ptr [ebp+var_24]
.text:000001C6                 mov     byte ptr [ebp+var_24+1], al
.text:000001C9                 push    offset __TI1?AUCUnexpectedEndException@NCab@NArchive@@
.text:000001CE                 lea     ecx, [ebp+var_24+1]
.text:000001D1                 push    ecx
.text:000001D2                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000001D7 ; ---------------------------------------------------------------------------
.text:000001D7
.text:000001D7 loc_1D7:                                ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+E8j
.text:000001D7                 movzx   edx, [ebp+var_1C+3]
.text:000001DB                 test    edx, edx
.text:000001DD                 jnz     short loc_1E1
.text:000001DF                 jmp     short loc_1E3
.text:000001E1 ; ---------------------------------------------------------------------------
.text:000001E1
.text:000001E1 loc_1E1:                                ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+109j
.text:000001E1                 jmp     short loc_1AB
.text:000001E3 ; ---------------------------------------------------------------------------
.text:000001E3
.text:000001E3 loc_1E3:                                ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+10Bj
.text:000001E3                 mov     eax, [ebp+var_4]
.text:000001E6                 mov     byte ptr [eax+31h], 1
.text:000001EA                 push    offset $SG69230 ; "[ERROR-LONG-PATH]"
.text:000001EF                 mov     ecx, [ebp+arg_0]
.text:000001F2                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:000001F7
.text:000001F7 loc_1F7:                                ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+94j
.text:000001F7                 push    edx
.text:000001F8                 mov     ecx, ebp
.text:000001FA                 push    eax
.text:000001FB                 lea     edx, $LN16
.text:00000201                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000206                 pop     eax
.text:00000207                 pop     edx
.text:00000208                 add     esp, 24h
.text:0000020B                 cmp     ebp, esp
.text:0000020D                 call    __RTC_CheckEsp
.text:00000212                 mov     esp, ebp
.text:00000214                 pop     ebp
.text:00000215                 retn    4
.text:00000215 ?ReadName@CInArchive@NCab@NArchive@@AAEXAAVAString@@@Z endp
.text:00000215
.text:00000215 ; ---------------------------------------------------------------------------
.text:00000218 $LN16           dd 2                    ; DATA XREF: NArchive::NCab::CInArchive::ReadName(AString &)+127o
.text:0000021C                 dd offset $LN15
.text:00000220 $LN15           dd 0FFFFFFF3h, 1        ; DATA XREF: .text:0000021Co
.text:00000228                 dd offset $LN13
.text:0000022C                 dd 0FFFFFFE7h, 1
.text:00000234                 dd offset $LN14
.text:00000238 $LN14           db 62h, 0               ; DATA XREF: .text:00000234o
.text:0000023A $LN13           dw 62h                  ; DATA XREF: .text:00000228o
.text:0000023C                 db 8 dup(0CCh)
.text:00000244
.text:00000244 ; =============== S U B R O U T I N E =======================================
.text:00000244
.text:00000244 ; Attributes: bp-based frame
.text:00000244
.text:00000244 ; void __thiscall NArchive::NCab::CInArchive::ReadOtherArc(NArchive::NCab::CInArchive *this, struct NArchive::NCab::COtherArc *)
.text:00000244                 public ?ReadOtherArc@CInArchive@NCab@NArchive@@AAEXAAUCOtherArc@23@@Z
.text:00000244 ?ReadOtherArc@CInArchive@NCab@NArchive@@AAEXAAUCOtherArc@23@@Z proc near
.text:00000244                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+635p
.text:00000244                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+653p
.text:00000244
.text:00000244 var_4           = dword ptr -4
.text:00000244 arg_0           = dword ptr  8
.text:00000244
.text:00000244                 push    ebp
.text:00000245                 mov     ebp, esp
.text:00000247                 push    ecx
.text:00000248                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000024F                 mov     [ebp+var_4], ecx
.text:00000252                 mov     eax, [ebp+arg_0]
.text:00000255                 push    eax             ; struct AString *
.text:00000256                 mov     ecx, [ebp+var_4] ; this
.text:00000259                 call    ?ReadName@CInArchive@NCab@NArchive@@AAEXAAVAString@@@Z ; NArchive::NCab::CInArchive::ReadName(AString &)
.text:0000025E                 mov     ecx, [ebp+arg_0]
.text:00000261                 add     ecx, 0Ch
.text:00000264                 push    ecx             ; struct AString *
.text:00000265                 mov     ecx, [ebp+var_4] ; this
.text:00000268                 call    ?ReadName@CInArchive@NCab@NArchive@@AAEXAAVAString@@@Z ; NArchive::NCab::CInArchive::ReadName(AString &)
.text:0000026D                 add     esp, 4
.text:00000270                 cmp     ebp, esp
.text:00000272                 call    __RTC_CheckEsp
.text:00000277                 mov     esp, ebp
.text:00000279                 pop     ebp
.text:0000027A                 retn    4
.text:0000027A ?ReadOtherArc@CInArchive@NCab@NArchive@@AAEXAAUCOtherArc@23@@Z endp
.text:0000027A
.text:0000027A ; ---------------------------------------------------------------------------
.text:0000027D                 db 7 dup(0CCh)
.text:00000284
.text:00000284 ; =============== S U B R O U T I N E =======================================
.text:00000284
.text:00000284 ; Attributes: bp-based frame
.text:00000284
.text:00000284 ; __int32 __thiscall NArchive::NCab::CSignatureFinder::Find(NArchive::NCab::CSignatureFinder *__hidden this)
.text:00000284                 public ?Find@CSignatureFinder@NCab@NArchive@@QAEJXZ
.text:00000284 ?Find@CSignatureFinder@NCab@NArchive@@QAEJXZ proc near
.text:00000284                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+3BCp
.text:00000284
.text:00000284 var_48          = dword ptr -48h
.text:00000284 var_44          = dword ptr -44h
.text:00000284 var_40          = dword ptr -40h
.text:00000284 var_3C          = dword ptr -3Ch
.text:00000284 var_38          = dword ptr -38h
.text:00000284 var_34          = dword ptr -34h
.text:00000284 var_30          = dword ptr -30h
.text:00000284 var_28          = dword ptr -28h
.text:00000284 var_20          = dword ptr -20h
.text:00000284 var_1C          = dword ptr -1Ch
.text:00000284 var_18          = dword ptr -18h
.text:00000284 var_14          = dword ptr -14h
.text:00000284 var_10          = dword ptr -10h
.text:00000284 var_9           = byte ptr -9
.text:00000284 var_8           = dword ptr -8
.text:00000284 var_4           = dword ptr -4
.text:00000284
.text:00000284                 push    ebp
.text:00000285                 mov     ebp, esp
.text:00000287                 sub     esp, 48h
.text:0000028A                 push    esi
.text:0000028B                 push    edi
.text:0000028C                 push    ecx
.text:0000028D                 lea     edi, [ebp+var_48]
.text:00000290                 mov     ecx, 12h
.text:00000295                 mov     eax, 0CCCCCCCCh
.text:0000029A                 rep stosd
.text:0000029C                 pop     ecx
.text:0000029D                 mov     [ebp+var_4], ecx
.text:000002A0
.text:000002A0 loc_2A0:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+2ECj
.text:000002A0                 mov     eax, [ebp+var_4]
.text:000002A3                 mov     ecx, [eax+0Ch]
.text:000002A6                 mov     edx, [ebp+var_4]
.text:000002A9                 mov     eax, [edx]
.text:000002AB                 mov     edx, [ebp+var_4]
.text:000002AE                 mov     edx, [edx+8]
.text:000002B1                 mov     cl, [ecx]
.text:000002B3                 mov     [eax+edx], cl
.text:000002B6
.text:000002B6 loc_2B6:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+12Aj
.text:000002B6                 mov     edx, [ebp+var_4]
.text:000002B9                 mov     eax, [ebp+var_4]
.text:000002BC                 mov     ecx, [edx+8]
.text:000002BF                 sub     ecx, [eax+4]
.text:000002C2                 mov     edx, [ebp+var_4]
.text:000002C5                 cmp     ecx, [edx+14h]
.text:000002C8                 jb      loc_3B3
.text:000002CE                 mov     eax, [ebp+var_4]
.text:000002D1                 mov     ecx, [eax]
.text:000002D3                 mov     edx, [ebp+var_4]
.text:000002D6                 add     ecx, [edx+4]
.text:000002D9                 mov     [ebp+var_8], ecx
.text:000002DC                 mov     eax, [ebp+var_4]
.text:000002DF                 mov     ecx, [eax+0Ch]
.text:000002E2                 mov     dl, [ecx]
.text:000002E4                 mov     [ebp+var_9], dl
.text:000002E7
.text:000002E7 loc_2E7:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+95j
.text:000002E7                 mov     eax, [ebp+var_8]
.text:000002EA                 movzx   ecx, byte ptr [eax]
.text:000002ED                 movzx   edx, [ebp+var_9]
.text:000002F1                 cmp     ecx, edx
.text:000002F3                 jnz     short loc_2F7
.text:000002F5                 jmp     short loc_31B
.text:000002F7 ; ---------------------------------------------------------------------------
.text:000002F7
.text:000002F7 loc_2F7:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+6Fj
.text:000002F7                 mov     eax, [ebp+var_8]
.text:000002FA                 add     eax, 1
.text:000002FD                 mov     [ebp+var_8], eax
.text:00000300                 mov     ecx, [ebp+var_8]
.text:00000303                 movzx   edx, byte ptr [ecx]
.text:00000306                 movzx   eax, [ebp+var_9]
.text:0000030A                 cmp     edx, eax
.text:0000030C                 jnz     short loc_310
.text:0000030E                 jmp     short loc_31B
.text:00000310 ; ---------------------------------------------------------------------------
.text:00000310
.text:00000310 loc_310:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+88j
.text:00000310                 mov     ecx, [ebp+var_8]
.text:00000313                 add     ecx, 1
.text:00000316                 mov     [ebp+var_8], ecx
.text:00000319                 jmp     short loc_2E7
.text:0000031B ; ---------------------------------------------------------------------------
.text:0000031B
.text:0000031B loc_31B:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+71j
.text:0000031B                                         ; NArchive::NCab::CSignatureFinder::Find(void)+8Aj
.text:0000031B                 mov     edx, [ebp+var_4]
.text:0000031E                 mov     eax, [ebp+var_8]
.text:00000321                 sub     eax, [edx]
.text:00000323                 mov     ecx, [ebp+var_4]
.text:00000326                 mov     [ecx+4], eax
.text:00000329                 mov     edx, [ebp+var_4]
.text:0000032C                 mov     eax, [ebp+var_4]
.text:0000032F                 mov     ecx, [edx+8]
.text:00000332                 sub     ecx, [eax+4]
.text:00000335                 mov     edx, [ebp+var_4]
.text:00000338                 cmp     ecx, [edx+14h]
.text:0000033B                 jnb     short loc_354
.text:0000033D                 mov     eax, [ebp+var_4]
.text:00000340                 mov     ecx, [ebp+var_4]
.text:00000343                 mov     edx, [eax+8]
.text:00000346                 sub     edx, [ecx+14h]
.text:00000349                 add     edx, 1
.text:0000034C                 mov     eax, [ebp+var_4]
.text:0000034F                 mov     [eax+4], edx
.text:00000352                 jmp     short loc_3B3
.text:00000354 ; ---------------------------------------------------------------------------
.text:00000354
.text:00000354 loc_354:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+B7j
.text:00000354                 mov     [ebp+var_10], 1
.text:0000035B                 jmp     short loc_366
.text:0000035D ; ---------------------------------------------------------------------------
.text:0000035D
.text:0000035D loc_35D:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+107j
.text:0000035D                 mov     ecx, [ebp+var_10]
.text:00000360                 add     ecx, 1
.text:00000363                 mov     [ebp+var_10], ecx
.text:00000366
.text:00000366 loc_366:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+D7j
.text:00000366                 mov     edx, [ebp+var_4]
.text:00000369                 mov     eax, [ebp+var_10]
.text:0000036C                 cmp     eax, [edx+10h]
.text:0000036F                 jnb     short loc_38D
.text:00000371                 mov     ecx, [ebp+var_8]
.text:00000374                 add     ecx, [ebp+var_10]
.text:00000377                 movzx   edx, byte ptr [ecx]
.text:0000037A                 mov     eax, [ebp+var_4]
.text:0000037D                 mov     ecx, [eax+0Ch]
.text:00000380                 mov     eax, [ebp+var_10]
.text:00000383                 movzx   ecx, byte ptr [ecx+eax]
.text:00000387                 cmp     edx, ecx
.text:00000389                 jnz     short loc_38D
.text:0000038B                 jmp     short loc_35D
.text:0000038D ; ---------------------------------------------------------------------------
.text:0000038D
.text:0000038D loc_38D:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+EBj
.text:0000038D                                         ; NArchive::NCab::CSignatureFinder::Find(void)+105j
.text:0000038D                 mov     edx, [ebp+var_4]
.text:00000390                 mov     eax, [ebp+var_10]
.text:00000393                 cmp     eax, [edx+10h]
.text:00000396                 jnz     short loc_39F
.text:00000398                 xor     eax, eax
.text:0000039A                 jmp     loc_575
.text:0000039F ; ---------------------------------------------------------------------------
.text:0000039F
.text:0000039F loc_39F:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+112j
.text:0000039F                 mov     ecx, [ebp+var_4]
.text:000003A2                 mov     edx, [ecx+4]
.text:000003A5                 add     edx, 1
.text:000003A8                 mov     eax, [ebp+var_4]
.text:000003AB                 mov     [eax+4], edx
.text:000003AE                 jmp     loc_2B6
.text:000003B3 ; ---------------------------------------------------------------------------
.text:000003B3
.text:000003B3 loc_3B3:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+44j
.text:000003B3                                         ; NArchive::NCab::CSignatureFinder::Find(void)+CEj
.text:000003B3                 mov     ecx, [ebp+var_4]
.text:000003B6                 mov     edx, [ebp+var_4]
.text:000003B9                 mov     eax, [ecx+4]
.text:000003BC                 cmp     eax, [edx+18h]
.text:000003BF                 jb      short loc_432
.text:000003C1                 mov     ecx, [ebp+var_4]
.text:000003C4                 mov     edx, [ecx+18h]
.text:000003C7                 sub     edx, 1
.text:000003CA                 not     edx
.text:000003CC                 mov     eax, [ebp+var_4]
.text:000003CF                 and     edx, [eax+4]
.text:000003D2                 mov     [ebp+var_14], edx
.text:000003D5                 mov     ecx, [ebp+var_14]
.text:000003D8                 xor     edx, edx
.text:000003DA                 mov     eax, [ebp+var_4]
.text:000003DD                 add     ecx, [eax+28h]
.text:000003E0                 adc     edx, [eax+2Ch]
.text:000003E3                 mov     eax, [ebp+var_4]
.text:000003E6                 mov     [eax+28h], ecx
.text:000003E9                 mov     [eax+2Ch], edx
.text:000003EC                 mov     ecx, [ebp+var_4]
.text:000003EF                 mov     edx, [ecx+4]
.text:000003F2                 sub     edx, [ebp+var_14]
.text:000003F5                 mov     eax, [ebp+var_4]
.text:000003F8                 mov     [eax+4], edx
.text:000003FB                 mov     ecx, [ebp+var_4]
.text:000003FE                 mov     edx, [ecx+8]
.text:00000401                 sub     edx, [ebp+var_14]
.text:00000404                 mov     eax, [ebp+var_4]
.text:00000407                 mov     [eax+8], edx
.text:0000040A                 mov     esi, esp
.text:0000040C                 mov     ecx, [ebp+var_4]
.text:0000040F                 mov     edx, [ecx+8]
.text:00000412                 push    edx             ; Size
.text:00000413                 mov     eax, [ebp+var_4]
.text:00000416                 mov     ecx, [eax]
.text:00000418                 add     ecx, [ebp+var_14]
.text:0000041B                 push    ecx             ; Src
.text:0000041C                 mov     edx, [ebp+var_4]
.text:0000041F                 mov     eax, [edx]
.text:00000421                 push    eax             ; Dst
.text:00000422                 call    dword ptr ds:__imp__memmove
.text:00000428                 add     esp, 0Ch
.text:0000042B                 cmp     esi, esp
.text:0000042D                 call    __RTC_CheckEsp
.text:00000432
.text:00000432 loc_432:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+13Bj
.text:00000432                 mov     ecx, [ebp+var_4]
.text:00000435                 mov     edx, [ebp+var_4]
.text:00000438                 mov     eax, [ecx+1Ch]
.text:0000043B                 sub     eax, [edx+8]
.text:0000043E                 mov     [ebp+var_18], eax
.text:00000441                 mov     ecx, [ebp+var_4]
.text:00000444                 cmp     dword ptr [ecx+30h], 0
.text:00000448                 jz      loc_4E4
.text:0000044E                 mov     edx, [ebp+var_4]
.text:00000451                 mov     eax, [edx+4]
.text:00000454                 xor     ecx, ecx
.text:00000456                 mov     edx, [ebp+var_4]
.text:00000459                 add     eax, [edx+28h]
.text:0000045C                 adc     ecx, [edx+2Ch]
.text:0000045F                 mov     edx, [ebp+var_4]
.text:00000462                 mov     edx, [edx+30h]
.text:00000465                 mov     [ebp+var_38], eax
.text:00000468                 mov     [ebp+var_34], ecx
.text:0000046B                 mov     [ebp+var_3C], edx
.text:0000046E                 mov     eax, [ebp+var_3C]
.text:00000471                 mov     ecx, [ebp+var_34]
.text:00000474                 cmp     ecx, [eax+4]
.text:00000477                 jb      short loc_48F
.text:00000479                 ja      short loc_485
.text:0000047B                 mov     edx, [ebp+var_3C]
.text:0000047E                 mov     eax, [ebp+var_38]
.text:00000481                 cmp     eax, [edx]
.text:00000483                 jbe     short loc_48F
.text:00000485
.text:00000485 loc_485:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+1F5j
.text:00000485                 mov     eax, 1
.text:0000048A                 jmp     loc_575
.text:0000048F ; ---------------------------------------------------------------------------
.text:0000048F
.text:0000048F loc_48F:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+1F3j
.text:0000048F                                         ; NArchive::NCab::CSignatureFinder::Find(void)+1FFj
.text:0000048F                 mov     ecx, [ebp+var_4]
.text:00000492                 mov     edx, [ecx+30h]
.text:00000495                 mov     eax, [ebp+var_4]
.text:00000498                 mov     ecx, [eax+8]
.text:0000049B                 xor     eax, eax
.text:0000049D                 mov     esi, [ebp+var_4]
.text:000004A0                 add     ecx, [esi+28h]
.text:000004A3                 adc     eax, [esi+2Ch]
.text:000004A6                 mov     esi, [edx]
.text:000004A8                 sub     esi, ecx
.text:000004AA                 mov     ecx, [edx+4]
.text:000004AD                 sbb     ecx, eax
.text:000004AF                 mov     edx, [ebp+var_4]
.text:000004B2                 mov     eax, [edx+14h]
.text:000004B5                 xor     edx, edx
.text:000004B7                 add     esi, eax
.text:000004B9                 adc     ecx, edx
.text:000004BB                 mov     [ebp+var_20], esi
.text:000004BE                 mov     [ebp+var_1C], ecx
.text:000004C1                 mov     eax, [ebp+var_18]
.text:000004C4                 xor     ecx, ecx
.text:000004C6                 mov     [ebp+var_44], eax
.text:000004C9                 mov     [ebp+var_40], ecx
.text:000004CC                 mov     edx, [ebp+var_40]
.text:000004CF                 cmp     edx, [ebp+var_1C]
.text:000004D2                 jb      short loc_4E4
.text:000004D4                 ja      short loc_4DE
.text:000004D6                 mov     eax, [ebp+var_44]
.text:000004D9                 cmp     eax, [ebp+var_20]
.text:000004DC                 jbe     short loc_4E4
.text:000004DE
.text:000004DE loc_4DE:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+250j
.text:000004DE                 mov     ecx, [ebp+var_20]
.text:000004E1                 mov     [ebp+var_18], ecx
.text:000004E4
.text:000004E4 loc_4E4:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+1C4j
.text:000004E4                                         ; NArchive::NCab::CSignatureFinder::Find(void)+24Ej ...
.text:000004E4                 mov     edx, [ebp+var_4]
.text:000004E7                 mov     [ebp+var_48], edx
.text:000004EA                 mov     eax, [ebp+var_48]
.text:000004ED                 mov     ecx, [ebp+var_48]
.text:000004F0                 mov     edx, [eax+28h]
.text:000004F3                 or      edx, [ecx+2Ch]
.text:000004F6                 jnz     short loc_515
.text:000004F8                 mov     eax, [ebp+var_4]
.text:000004FB                 mov     ecx, [ebp+var_4]
.text:000004FE                 mov     edx, [eax+1Ch]
.text:00000501                 sub     edx, [ecx+14h]
.text:00000504                 cmp     [ebp+var_18], edx
.text:00000507                 jnz     short loc_515
.text:00000509                 mov     eax, [ebp+var_4]
.text:0000050C                 mov     ecx, [ebp+var_18]
.text:0000050F                 sub     ecx, [eax+18h]
.text:00000512                 mov     [ebp+var_18], ecx
.text:00000515
.text:00000515 loc_515:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+272j
.text:00000515                                         ; NArchive::NCab::CSignatureFinder::Find(void)+283j
.text:00000515                 mov     esi, esp
.text:00000517                 lea     edx, [ebp+var_28]
.text:0000051A                 push    edx
.text:0000051B                 mov     eax, [ebp+var_18]
.text:0000051E                 push    eax
.text:0000051F                 mov     ecx, [ebp+var_4]
.text:00000522                 mov     edx, [ecx]
.text:00000524                 mov     eax, [ebp+var_4]
.text:00000527                 add     edx, [eax+8]
.text:0000052A                 push    edx
.text:0000052B                 mov     ecx, [ebp+var_4]
.text:0000052E                 mov     edx, [ecx+20h]
.text:00000531                 mov     eax, [ebp+var_4]
.text:00000534                 mov     ecx, [eax+20h]
.text:00000537                 mov     edx, [edx]
.text:00000539                 push    ecx
.text:0000053A                 mov     eax, [edx+0Ch]
.text:0000053D                 call    eax
.text:0000053F                 cmp     esi, esp
.text:00000541                 call    __RTC_CheckEsp
.text:00000546                 mov     [ebp+var_30], eax
.text:00000549                 cmp     [ebp+var_30], 0
.text:0000054D                 jz      short loc_554
.text:0000054F                 mov     eax, [ebp+var_30]
.text:00000552                 jmp     short loc_575
.text:00000554 ; ---------------------------------------------------------------------------
.text:00000554
.text:00000554 loc_554:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+2C9j
.text:00000554                 cmp     [ebp+var_28], 0
.text:00000558                 jnz     short loc_561
.text:0000055A                 mov     eax, 1
.text:0000055F                 jmp     short loc_575
.text:00000561 ; ---------------------------------------------------------------------------
.text:00000561
.text:00000561 loc_561:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+2D4j
.text:00000561                 mov     ecx, [ebp+var_4]
.text:00000564                 mov     edx, [ecx+8]
.text:00000567                 add     edx, [ebp+var_28]
.text:0000056A                 mov     eax, [ebp+var_4]
.text:0000056D                 mov     [eax+8], edx
.text:00000570                 jmp     loc_2A0
.text:00000575 ; ---------------------------------------------------------------------------
.text:00000575
.text:00000575 loc_575:                                ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+116j
.text:00000575                                         ; NArchive::NCab::CSignatureFinder::Find(void)+206j ...
.text:00000575                 push    edx
.text:00000576                 mov     ecx, ebp
.text:00000578                 push    eax
.text:00000579                 lea     edx, $LN27
.text:0000057F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000584                 pop     eax
.text:00000585                 pop     edx
.text:00000586                 pop     edi
.text:00000587                 pop     esi
.text:00000588                 add     esp, 48h
.text:0000058B                 cmp     ebp, esp
.text:0000058D                 call    __RTC_CheckEsp
.text:00000592                 mov     esp, ebp
.text:00000594                 pop     ebp
.text:00000595                 retn
.text:00000595 ?Find@CSignatureFinder@NCab@NArchive@@QAEJXZ endp
.text:00000595
.text:00000595 ; ---------------------------------------------------------------------------
.text:00000596                 align 4
.text:00000598 $LN27           dd 1                    ; DATA XREF: NArchive::NCab::CSignatureFinder::Find(void)+2F5o
.text:0000059C                 dd offset $LN26
.text:000005A0 $LN26           dd 0FFFFFFD8h, 4        ; DATA XREF: .text:0000059Co
.text:000005A8                 dd offset $LN25         ; "processedSize"
.text:000005AC $LN25           db 'processedSize',0    ; DATA XREF: .text:000005A8o
.text:000005BA                 db 0Ah dup(0CCh)
.text:000005C4
.text:000005C4 ; =============== S U B R O U T I N E =======================================
.text:000005C4
.text:000005C4 ; Attributes: bp-based frame
.text:000005C4
.text:000005C4 ; bool __thiscall NArchive::NCab::CInArcInfo::Parse(NArchive::NCab::CInArcInfo *this, const unsigned __int8 *)
.text:000005C4                 public ?Parse@CInArcInfo@NCab@NArchive@@QAE_NPBE@Z
.text:000005C4 ?Parse@CInArcInfo@NCab@NArchive@@QAE_NPBE@Z proc near
.text:000005C4                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+16Cp
.text:000005C4                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+412p
.text:000005C4
.text:000005C4 var_4           = dword ptr -4
.text:000005C4 arg_0           = dword ptr  8
.text:000005C4
.text:000005C4                 push    ebp
.text:000005C5                 mov     ebp, esp
.text:000005C7                 push    ecx
.text:000005C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005CF                 mov     [ebp+var_4], ecx
.text:000005D2                 mov     eax, [ebp+arg_0]
.text:000005D5                 cmp     dword ptr [eax+0Ch], 0
.text:000005D9                 jnz     short loc_5E4
.text:000005DB                 mov     ecx, [ebp+arg_0]
.text:000005DE                 cmp     dword ptr [ecx+14h], 0
.text:000005E2                 jz      short loc_5EB
.text:000005E4
.text:000005E4 loc_5E4:                                ; CODE XREF: NArchive::NCab::CInArcInfo::Parse(uchar const *)+15j
.text:000005E4                 xor     al, al
.text:000005E6                 jmp     loc_678
.text:000005EB ; ---------------------------------------------------------------------------
.text:000005EB
.text:000005EB loc_5EB:                                ; CODE XREF: NArchive::NCab::CInArcInfo::Parse(uchar const *)+1Ej
.text:000005EB                 mov     edx, [ebp+var_4]
.text:000005EE                 mov     eax, [ebp+arg_0]
.text:000005F1                 mov     ecx, [eax+8]
.text:000005F4                 mov     [edx+4Ch], ecx
.text:000005F7                 mov     edx, [ebp+var_4]
.text:000005FA                 cmp     dword ptr [edx+4Ch], 24h ; '$'
.text:000005FE                 jnb     short loc_604
.text:00000600                 xor     al, al
.text:00000602                 jmp     short loc_678
.text:00000604 ; ---------------------------------------------------------------------------
.text:00000604
.text:00000604 loc_604:                                ; CODE XREF: NArchive::NCab::CInArcInfo::Parse(uchar const *)+3Aj
.text:00000604                 mov     eax, [ebp+arg_0]
.text:00000607                 movzx   ecx, word ptr [eax+1Eh]
.text:0000060B                 mov     edx, [ebp+var_4]
.text:0000060E                 mov     [edx+0Ch], ecx
.text:00000611                 mov     eax, [ebp+var_4]
.text:00000614                 cmp     dword ptr [eax+0Ch], 7
.text:00000618                 jbe     short loc_61E
.text:0000061A                 xor     al, al
.text:0000061C                 jmp     short loc_678
.text:0000061E ; ---------------------------------------------------------------------------
.text:0000061E
.text:0000061E loc_61E:                                ; CODE XREF: NArchive::NCab::CInArcInfo::Parse(uchar const *)+54j
.text:0000061E                 mov     ecx, [ebp+var_4]
.text:00000621                 mov     edx, [ebp+arg_0]
.text:00000624                 mov     eax, [edx+10h]
.text:00000627                 mov     [ecx+50h], eax
.text:0000062A                 mov     ecx, [ebp+var_4]
.text:0000062D                 cmp     dword ptr [ecx+50h], 0
.text:00000631                 jz      short loc_645
.text:00000633                 mov     edx, [ebp+var_4]
.text:00000636                 mov     eax, [ebp+var_4]
.text:00000639                 mov     ecx, [edx+50h]
.text:0000063C                 cmp     ecx, [eax+4Ch]
.text:0000063F                 jbe     short loc_645
.text:00000641                 xor     al, al
.text:00000643                 jmp     short loc_678
.text:00000645 ; ---------------------------------------------------------------------------
.text:00000645
.text:00000645 loc_645:                                ; CODE XREF: NArchive::NCab::CInArcInfo::Parse(uchar const *)+6Dj
.text:00000645                                         ; NArchive::NCab::CInArcInfo::Parse(uchar const *)+7Bj
.text:00000645                 mov     edx, [ebp+var_4]
.text:00000648                 mov     eax, [ebp+arg_0]
.text:0000064B                 mov     cl, [eax+18h]
.text:0000064E                 mov     [edx], cl
.text:00000650                 mov     edx, [ebp+var_4]
.text:00000653                 mov     eax, [ebp+arg_0]
.text:00000656                 mov     cl, [eax+19h]
.text:00000659                 mov     [edx+1], cl
.text:0000065C                 mov     edx, [ebp+arg_0]
.text:0000065F                 movzx   eax, word ptr [edx+1Ah]
.text:00000663                 mov     ecx, [ebp+var_4]
.text:00000666                 mov     [ecx+4], eax
.text:00000669                 mov     edx, [ebp+arg_0]
.text:0000066C                 movzx   eax, word ptr [edx+1Ch]
.text:00000670                 mov     ecx, [ebp+var_4]
.text:00000673                 mov     [ecx+8], eax
.text:00000676                 mov     al, 1
.text:00000678
.text:00000678 loc_678:                                ; CODE XREF: NArchive::NCab::CInArcInfo::Parse(uchar const *)+22j
.text:00000678                                         ; NArchive::NCab::CInArcInfo::Parse(uchar const *)+3Ej ...
.text:00000678                 mov     esp, ebp
.text:0000067A                 pop     ebp
.text:0000067B                 retn    4
.text:0000067B ?Parse@CInArcInfo@NCab@NArchive@@QAE_NPBE@Z endp
.text:0000067B
.text:0000067B ; ---------------------------------------------------------------------------
.text:0000067E                 db 6 dup(0CCh)
.text:00000684
.text:00000684 ; =============== S U B R O U T I N E =======================================
.text:00000684
.text:00000684 ; Attributes: bp-based frame
.text:00000684
.text:00000684 ; __int32 __thiscall NArchive::NCab::CInArchive::Open2(NArchive::NCab::CInArchive *this, struct NArchive::NCab::CDatabaseEx *, const unsigned __int64 *)
.text:00000684                 public ?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z
.text:00000684 ?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z proc near
.text:00000684                                         ; CODE XREF: NArchive::NCab::CInArchive::Open(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+5Bp
.text:00000684
.text:00000684 var_164         = dword ptr -164h
.text:00000684 var_160         = dword ptr -160h
.text:00000684 var_15C         = dword ptr -15Ch
.text:00000684 var_158         = dword ptr -158h
.text:00000684 var_154         = dword ptr -154h
.text:00000684 var_150         = dword ptr -150h
.text:00000684 var_14C         = dword ptr -14Ch
.text:00000684 var_148         = dword ptr -148h
.text:00000684 var_144         = dword ptr -144h
.text:00000684 var_140         = dword ptr -140h
.text:00000684 var_13C         = dword ptr -13Ch
.text:00000684 var_138         = dword ptr -138h
.text:00000684 var_134         = dword ptr -134h
.text:00000684 var_130         = dword ptr -130h
.text:00000684 var_12C         = dword ptr -12Ch
.text:00000684 var_128         = dword ptr -128h
.text:00000684 var_124         = dword ptr -124h
.text:00000684 var_120         = dword ptr -120h
.text:00000684 var_11C         = dword ptr -11Ch
.text:00000684 var_118         = dword ptr -118h
.text:00000684 var_114         = dword ptr -114h
.text:00000684 var_110         = word ptr -110h
.text:00000684 var_10C         = word ptr -10Ch
.text:00000684 var_108         = dword ptr -108h
.text:00000684 var_104         = dword ptr -104h
.text:00000684 var_FC          = dword ptr -0FCh
.text:00000684 var_F8          = dword ptr -0F8h
.text:00000684 var_F0          = dword ptr -0F0h
.text:00000684 var_EC          = dword ptr -0ECh
.text:00000684 var_E4          = byte ptr -0E4h
.text:00000684 var_E0          = dword ptr -0E0h
.text:00000684 var_DC          = word ptr -0DCh
.text:00000684 var_DA          = word ptr -0DAh
.text:00000684 var_D8          = word ptr -0D8h
.text:00000684 var_D6          = word ptr -0D6h
.text:00000684 var_D0          = dword ptr -0D0h
.text:00000684 var_CC          = dword ptr -0CCh
.text:00000684 var_C4          = dword ptr -0C4h
.text:00000684 var_C0          = dword ptr -0C0h
.text:00000684 var_BC          = dword ptr -0BCh
.text:00000684 var_B8          = dword ptr -0B8h
.text:00000684 var_B4          = dword ptr -0B4h
.text:00000684 var_A4          = dword ptr -0A4h
.text:00000684 var_9C          = dword ptr -9Ch
.text:00000684 var_98          = dword ptr -98h
.text:00000684 var_94          = dword ptr -94h
.text:00000684 var_88          = dword ptr -88h
.text:00000684 var_80          = dword ptr -80h
.text:00000684 var_78          = dword ptr -78h
.text:00000684 var_74          = dword ptr -74h
.text:00000684 Buf1            = byte ptr -6Ch
.text:00000684 var_48          = dword ptr -48h
.text:00000684 var_40          = byte ptr -40h
.text:00000684 var_38          = dword ptr -38h
.text:00000684 var_34          = dword ptr -34h
.text:00000684 var_30          = dword ptr -30h
.text:00000684 var_2C          = dword ptr -2Ch
.text:00000684 var_24          = byte ptr -24h
.text:00000684 var_18          = dword ptr -18h
.text:00000684 var_14          = dword ptr -14h
.text:00000684 var_10          = dword ptr -10h
.text:00000684 var_C           = dword ptr -0Ch
.text:00000684 var_4           = dword ptr -4
.text:00000684 arg_0           = dword ptr  8
.text:00000684 arg_4           = dword ptr  0Ch
.text:00000684
.text:00000684                 push    ebp
.text:00000685                 mov     ebp, esp
.text:00000687                 push    0FFFFFFFFh
.text:00000689                 push    offset __ehhandler$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z
.text:0000068E                 mov     eax, large fs:0
.text:00000694                 push    eax
.text:00000695                 sub     esp, 158h
.text:0000069B                 push    esi
.text:0000069C                 push    edi
.text:0000069D                 push    ecx
.text:0000069E                 lea     edi, [ebp+var_164]
.text:000006A4                 mov     ecx, 56h ; 'V'
.text:000006A9                 mov     eax, 0CCCCCCCCh
.text:000006AE                 rep stosd
.text:000006B0                 pop     ecx
.text:000006B1                 mov     eax, dword ptr ds:___security_cookie
.text:000006B6                 xor     eax, ebp
.text:000006B8                 mov     [ebp+var_10], eax
.text:000006BB                 push    eax
.text:000006BC                 lea     eax, [ebp+var_C]
.text:000006BF                 mov     large fs:0, eax
.text:000006C5                 mov     [ebp+var_14], ecx
.text:000006C8                 mov     eax, [ebp+var_14]
.text:000006CB                 mov     byte ptr [eax+30h], 0
.text:000006CF                 mov     ecx, [ebp+var_14]
.text:000006D2                 mov     byte ptr [ecx+31h], 0
.text:000006D6                 mov     edx, [ebp+var_14]
.text:000006D9                 mov     byte ptr [edx+32h], 0
.text:000006DD                 mov     eax, [ebp+var_14]
.text:000006E0                 mov     byte ptr [eax+33h], 0
.text:000006E4                 mov     ecx, [ebp+arg_0] ; this
.text:000006E7                 call    ?Clear@CDatabase@NCab@NArchive@@QAEXXZ ; NArchive::NCab::CDatabase::Clear(void)
.text:000006EC                 mov     ecx, [ebp+arg_0]
.text:000006EF                 add     ecx, 78h ; 'x'
.text:000006F2                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:000006F7                 mov     [ebp+var_140], eax
.text:000006FD                 mov     ecx, [ebp+arg_0]
.text:00000700                 add     ecx, 18h
.text:00000703                 mov     esi, esp
.text:00000705                 push    ecx
.text:00000706                 push    1
.text:00000708                 push    0
.text:0000070A                 push    0
.text:0000070C                 mov     edx, [ebp+var_140]
.text:00000712                 push    edx
.text:00000713                 mov     eax, [ebp+var_140]
.text:00000719                 mov     ecx, [eax]
.text:0000071B                 mov     edx, [ecx+10h]
.text:0000071E                 call    edx
.text:00000720                 cmp     esi, esp
.text:00000722                 call    __RTC_CheckEsp
.text:00000727                 mov     [ebp+var_18], eax
.text:0000072A                 cmp     [ebp+var_18], 0
.text:0000072E                 jz      short loc_738
.text:00000730                 mov     eax, [ebp+var_18]
.text:00000733                 jmp     loc_FE3
.text:00000738 ; ---------------------------------------------------------------------------
.text:00000738
.text:00000738 loc_738:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+AAj
.text:00000738                 lea     ecx, [ebp+var_24]
.text:0000073B                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00000740                 mov     [ebp+var_4], 0
.text:00000747                 mov     eax, [ebp+arg_0]
.text:0000074A                 add     eax, 20h ; ' '
.text:0000074D                 mov     [ebp+var_2C], eax
.text:00000750                 mov     [ebp+var_34], 0
.text:00000757                 mov     [ebp+var_30], 0
.text:0000075E                 mov     [ebp+var_38], 0
.text:00000765                 lea     ecx, [ebp+var_40]
.text:00000768                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000076D                 mov     byte ptr [ebp+var_4], 1
.text:00000771                 mov     [ebp+var_48], 20h ; ' '
.text:00000778                 mov     [ebp+var_74], 8000h
.text:0000077F                 push    20h ; ' '       ; unsigned int
.text:00000781                 lea     ecx, [ebp+Buf1]
.text:00000784                 push    ecx             ; void *
.text:00000785                 mov     ecx, [ebp+arg_0]
.text:00000788                 add     ecx, 78h ; 'x'
.text:0000078B                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00000790                 push    eax             ; struct ISequentialInStream *
.text:00000791                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:00000796                 mov     [ebp+var_78], eax
.text:00000799                 cmp     [ebp+var_78], 0
.text:0000079D                 jz      short loc_7CE
.text:0000079F                 mov     edx, [ebp+var_78]
.text:000007A2                 mov     [ebp+var_114], edx
.text:000007A8                 mov     byte ptr [ebp+var_4], 0
.text:000007AC                 lea     ecx, [ebp+var_40]
.text:000007AF                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000007B4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000007BB                 lea     ecx, [ebp+var_24]
.text:000007BE                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000007C3                 mov     eax, [ebp+var_114]
.text:000007C9                 jmp     loc_FE3
.text:000007CE ; ---------------------------------------------------------------------------
.text:000007CE
.text:000007CE loc_7CE:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+119j
.text:000007CE                 push    8               ; Size
.text:000007D0                 push    offset ?kMarker@NHeader@NCab@NArchive@@3QBEB ; Buf2
.text:000007D5                 lea     eax, [ebp+Buf1]
.text:000007D8                 push    eax             ; Buf1
.text:000007D9                 call    _memcmp
.text:000007DE                 add     esp, 0Ch
.text:000007E1                 test    eax, eax
.text:000007E3                 jnz     loc_951
.text:000007E9                 lea     ecx, [ebp+Buf1]
.text:000007EC                 push    ecx             ; unsigned __int8 *
.text:000007ED                 mov     ecx, [ebp+var_2C] ; this
.text:000007F0                 call    ?Parse@CInArcInfo@NCab@NArchive@@QAE_NPBE@Z ; NArchive::NCab::CInArcInfo::Parse(uchar const *)
.text:000007F5                 movzx   edx, al
.text:000007F8                 test    edx, edx
.text:000007FA                 jz      loc_951
.text:00000800                 push    28h ; '('       ; unsigned int
.text:00000802                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000807                 add     esp, 4
.text:0000080A                 mov     [ebp+var_11C], eax
.text:00000810                 mov     byte ptr [ebp+var_4], 2
.text:00000814                 cmp     [ebp+var_11C], 0
.text:0000081B                 jz      short loc_830
.text:0000081D                 mov     ecx, [ebp+var_11C]
.text:00000823                 call    ??0CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:00000828                 mov     [ebp+var_144], eax
.text:0000082E                 jmp     short loc_83A
.text:00000830 ; ---------------------------------------------------------------------------
.text:00000830
.text:00000830 loc_830:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+197j
.text:00000830                 mov     [ebp+var_144], 0
.text:0000083A
.text:0000083A loc_83A:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+1AAj
.text:0000083A                 mov     eax, [ebp+var_144]
.text:00000840                 mov     [ebp+var_118], eax
.text:00000846                 mov     byte ptr [ebp+var_4], 1
.text:0000084A                 mov     ecx, [ebp+var_118]
.text:00000850                 mov     [ebp+var_38], ecx
.text:00000853                 mov     edx, [ebp+var_38]
.text:00000856                 push    edx
.text:00000857                 lea     ecx, [ebp+var_40]
.text:0000085A                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:0000085F                 mov     ecx, [ebp+arg_0]
.text:00000862                 add     ecx, 78h ; 'x'
.text:00000865                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000086A                 push    eax             ; struct ISequentialInStream *
.text:0000086B                 mov     ecx, [ebp+var_38] ; this
.text:0000086E                 call    ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream(ISequentialInStream *)
.text:00000873                 mov     eax, [ebp+var_2C]
.text:00000876                 mov     ecx, [eax+4Ch]
.text:00000879                 sub     ecx, 8
.text:0000087C                 xor     edx, edx
.text:0000087E                 push    edx
.text:0000087F                 push    ecx             ; unsigned __int64
.text:00000880                 mov     ecx, [ebp+var_38] ; this
.text:00000883                 call    ?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init(unsigned __int64)
.text:00000888                 push    8000h
.text:0000088D                 lea     ecx, [ebp+var_24]
.text:00000890                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00000895                 push    20h ; ' '       ; Size
.text:00000897                 lea     eax, [ebp+Buf1]
.text:0000089A                 push    eax             ; Src
.text:0000089B                 lea     ecx, [ebp+var_24]
.text:0000089E                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000008A3                 push    eax             ; Dst
.text:000008A4                 call    _memcpy
.text:000008A9                 add     esp, 0Ch
.text:000008AC                 lea     ecx, [ebp+var_40]
.text:000008AF                 call    ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->(void)
.text:000008B4                 mov     [ebp+var_148], eax
.text:000008BA                 mov     esi, esp
.text:000008BC                 lea     ecx, [ebp+var_80]
.text:000008BF                 push    ecx
.text:000008C0                 push    7FE0h
.text:000008C5                 lea     ecx, [ebp+var_24]
.text:000008C8                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000008CD                 add     eax, 20h ; ' '
.text:000008D0                 push    eax
.text:000008D1                 mov     edx, [ebp+var_148]
.text:000008D7                 push    edx
.text:000008D8                 mov     eax, [ebp+var_148]
.text:000008DE                 mov     ecx, [eax]
.text:000008E0                 mov     edx, [ecx+0Ch]
.text:000008E3                 call    edx
.text:000008E5                 cmp     esi, esp
.text:000008E7                 call    __RTC_CheckEsp
.text:000008EC                 mov     [ebp+var_88], eax
.text:000008F2                 cmp     [ebp+var_88], 0
.text:000008F9                 jz      short loc_92D
.text:000008FB                 mov     eax, [ebp+var_88]
.text:00000901                 mov     [ebp+var_120], eax
.text:00000907                 mov     byte ptr [ebp+var_4], 0
.text:0000090B                 lea     ecx, [ebp+var_40]
.text:0000090E                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000913                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000091A                 lea     ecx, [ebp+var_24]
.text:0000091D                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000922                 mov     eax, [ebp+var_120]
.text:00000928                 jmp     loc_FE3
.text:0000092D ; ---------------------------------------------------------------------------
.text:0000092D
.text:0000092D loc_92D:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+275j
.text:0000092D                 push    20h ; ' '       ; unsigned int
.text:0000092F                 mov     ecx, [ebp+var_80]
.text:00000932                 add     ecx, 20h ; ' '
.text:00000935                 push    ecx             ; unsigned int
.text:00000936                 push    8000h           ; unsigned int
.text:0000093B                 lea     ecx, [ebp+var_24]
.text:0000093E                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000943                 push    eax             ; unsigned __int8 *
.text:00000944                 mov     ecx, [ebp+var_14] ; this
.text:00000947                 call    ?SetBuf@CInBufferBase@@QAEXPAEIII@Z ; CInBufferBase::SetBuf(uchar *,uint,uint,uint)
.text:0000094C                 jmp     loc_BD9
.text:00000951 ; ---------------------------------------------------------------------------
.text:00000951
.text:00000951 loc_951:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+15Fj
.text:00000951                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+176j
.text:00000951                 cmp     [ebp+arg_4], 0
.text:00000955                 jz      short loc_9A3
.text:00000957                 mov     edx, [ebp+arg_4]
.text:0000095A                 mov     [ebp+var_14C], edx
.text:00000960                 mov     eax, [ebp+var_14C]
.text:00000966                 mov     ecx, [ebp+var_14C]
.text:0000096C                 mov     edx, [eax]
.text:0000096E                 or      edx, [ecx+4]
.text:00000971                 jnz     short loc_9A3
.text:00000973                 mov     [ebp+var_124], 1
.text:0000097D                 mov     byte ptr [ebp+var_4], 0
.text:00000981                 lea     ecx, [ebp+var_40]
.text:00000984                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000989                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000990                 lea     ecx, [ebp+var_24]
.text:00000993                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000998                 mov     eax, [ebp+var_124]
.text:0000099E                 jmp     loc_FE3
.text:000009A3 ; ---------------------------------------------------------------------------
.text:000009A3
.text:000009A3 loc_9A3:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+2D1j
.text:000009A3                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+2EDj
.text:000009A3                 mov     ecx, [ebp+arg_0]
.text:000009A6                 add     ecx, 78h ; 'x'
.text:000009A9                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000009AE                 mov     [ebp+var_A4], eax
.text:000009B4                 mov     [ebp+var_B8], offset ?kMarker@NHeader@NCab@NArchive@@3QBEB ; uchar const * const NArchive::NCab::NHeader::kMarker
.text:000009BE                 mov     [ebp+var_B4], 8
.text:000009C8                 mov     eax, [ebp+arg_4]
.text:000009CB                 mov     [ebp+var_94], eax
.text:000009D1                 push    20h ; ' '       ; unsigned int
.text:000009D3                 push    8000h           ; unsigned int
.text:000009D8                 lea     ecx, [ebp+var_C4] ; this
.text:000009DE                 call    ?GetTotalCapacity@CSignatureFinder@NCab@NArchive@@QAEIII@Z ; NArchive::NCab::CSignatureFinder::GetTotalCapacity(uint,uint)
.text:000009E3                 push    eax
.text:000009E4                 lea     ecx, [ebp+var_24]
.text:000009E7                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:000009EC                 lea     ecx, [ebp+var_24]
.text:000009EF                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000009F4                 mov     [ebp+var_C4], eax
.text:000009FA                 push    20h ; ' '       ; Size
.text:000009FC                 lea     ecx, [ebp+Buf1]
.text:000009FF                 push    ecx             ; Src
.text:00000A00                 lea     ecx, [ebp+var_24]
.text:00000A03                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000A08                 push    eax             ; Dst
.text:00000A09                 call    _memcpy
.text:00000A0E                 add     esp, 0Ch
.text:00000A11                 mov     edx, [ebp+arg_0]
.text:00000A14                 mov     eax, [edx+18h]
.text:00000A17                 mov     [ebp+var_9C], eax
.text:00000A1D                 mov     ecx, [edx+1Ch]
.text:00000A20                 mov     [ebp+var_98], ecx
.text:00000A26                 mov     [ebp+var_BC], 20h ; ' '
.text:00000A30                 mov     [ebp+var_C0], 1
.text:00000A3A
.text:00000A3A loc_A3A:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+550j
.text:00000A3A                 lea     ecx, [ebp+var_C4] ; this
.text:00000A40                 call    ?Find@CSignatureFinder@NCab@NArchive@@QAEJXZ ; NArchive::NCab::CSignatureFinder::Find(void)
.text:00000A45                 mov     [ebp+var_CC], eax
.text:00000A4B                 cmp     [ebp+var_CC], 0
.text:00000A52                 jz      short loc_A86
.text:00000A54                 mov     edx, [ebp+var_CC]
.text:00000A5A                 mov     [ebp+var_128], edx
.text:00000A60                 mov     byte ptr [ebp+var_4], 0
.text:00000A64                 lea     ecx, [ebp+var_40]
.text:00000A67                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000A6C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A73                 lea     ecx, [ebp+var_24]
.text:00000A76                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000A7B                 mov     eax, [ebp+var_128]
.text:00000A81                 jmp     loc_FE3
.text:00000A86 ; ---------------------------------------------------------------------------
.text:00000A86
.text:00000A86 loc_A86:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+3CEj
.text:00000A86                 mov     eax, [ebp+var_C4]
.text:00000A8C                 add     eax, [ebp+var_C0]
.text:00000A92                 push    eax             ; unsigned __int8 *
.text:00000A93                 mov     ecx, [ebp+var_2C] ; this
.text:00000A96                 call    ?Parse@CInArcInfo@NCab@NArchive@@QAE_NPBE@Z ; NArchive::NCab::CInArcInfo::Parse(uchar const *)
.text:00000A9B                 movzx   ecx, al
.text:00000A9E                 test    ecx, ecx
.text:00000AA0                 jz      loc_BC5
.text:00000AA6                 mov     edx, [ebp+var_C0]
.text:00000AAC                 xor     eax, eax
.text:00000AAE                 add     edx, [ebp+var_9C]
.text:00000AB4                 adc     eax, [ebp+var_98]
.text:00000ABA                 mov     ecx, [ebp+arg_0]
.text:00000ABD                 mov     [ecx+18h], edx
.text:00000AC0                 mov     [ecx+1Ch], eax
.text:00000AC3                 push    28h ; '('       ; unsigned int
.text:00000AC5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000ACA                 add     esp, 4
.text:00000ACD                 mov     [ebp+var_130], eax
.text:00000AD3                 mov     byte ptr [ebp+var_4], 3
.text:00000AD7                 cmp     [ebp+var_130], 0
.text:00000ADE                 jz      short loc_AF3
.text:00000AE0                 mov     ecx, [ebp+var_130]
.text:00000AE6                 call    ??0CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:00000AEB                 mov     [ebp+var_150], eax
.text:00000AF1                 jmp     short loc_AFD
.text:00000AF3 ; ---------------------------------------------------------------------------
.text:00000AF3
.text:00000AF3 loc_AF3:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+45Aj
.text:00000AF3                 mov     [ebp+var_150], 0
.text:00000AFD
.text:00000AFD loc_AFD:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+46Dj
.text:00000AFD                 mov     edx, [ebp+var_150]
.text:00000B03                 mov     [ebp+var_12C], edx
.text:00000B09                 mov     byte ptr [ebp+var_4], 1
.text:00000B0D                 mov     eax, [ebp+var_12C]
.text:00000B13                 mov     [ebp+var_38], eax
.text:00000B16                 mov     ecx, [ebp+arg_0]
.text:00000B19                 add     ecx, 78h ; 'x'
.text:00000B1C                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00000B21                 push    eax             ; struct ISequentialInStream *
.text:00000B22                 mov     ecx, [ebp+var_38] ; this
.text:00000B25                 call    ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream(ISequentialInStream *)
.text:00000B2A                 mov     ecx, [ebp+var_38]
.text:00000B2D                 push    ecx
.text:00000B2E                 lea     ecx, [ebp+var_40]
.text:00000B31                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00000B36                 mov     edx, [ebp+var_BC]
.text:00000B3C                 sub     edx, [ebp+var_C0]
.text:00000B42                 mov     [ebp+var_D0], edx
.text:00000B48                 mov     eax, [ebp+var_2C]
.text:00000B4B                 mov     ecx, [eax+4Ch]
.text:00000B4E                 cmp     ecx, [ebp+var_D0]
.text:00000B54                 ja      short loc_B76
.text:00000B56                 push    0
.text:00000B58                 push    0               ; unsigned __int64
.text:00000B5A                 mov     ecx, [ebp+var_38] ; this
.text:00000B5D                 call    ?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init(unsigned __int64)
.text:00000B62                 mov     edx, [ebp+var_2C]
.text:00000B65                 mov     eax, [ebp+var_C0]
.text:00000B6B                 add     eax, [edx+4Ch]
.text:00000B6E                 mov     [ebp+var_BC], eax
.text:00000B74                 jmp     short loc_B8E
.text:00000B76 ; ---------------------------------------------------------------------------
.text:00000B76
.text:00000B76 loc_B76:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+4D0j
.text:00000B76                 mov     ecx, [ebp+var_2C]
.text:00000B79                 mov     edx, [ecx+4Ch]
.text:00000B7C                 sub     edx, [ebp+var_D0]
.text:00000B82                 xor     eax, eax
.text:00000B84                 push    eax
.text:00000B85                 push    edx             ; unsigned __int64
.text:00000B86                 mov     ecx, [ebp+var_38] ; this
.text:00000B89                 call    ?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init(unsigned __int64)
.text:00000B8E
.text:00000B8E loc_B8E:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+4F0j
.text:00000B8E                 mov     ecx, [ebp+var_C0]
.text:00000B94                 xor     edx, edx
.text:00000B96                 mov     [ebp+var_34], ecx
.text:00000B99                 mov     [ebp+var_30], edx
.text:00000B9C                 mov     eax, [ebp+var_C0]
.text:00000BA2                 add     eax, 20h ; ' '
.text:00000BA5                 push    eax             ; unsigned int
.text:00000BA6                 mov     ecx, [ebp+var_BC]
.text:00000BAC                 push    ecx             ; unsigned int
.text:00000BAD                 push    8000h           ; unsigned int
.text:00000BB2                 lea     ecx, [ebp+var_24]
.text:00000BB5                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000BBA                 push    eax             ; unsigned __int8 *
.text:00000BBB                 mov     ecx, [ebp+var_14] ; this
.text:00000BBE                 call    ?SetBuf@CInBufferBase@@QAEXPAEIII@Z ; CInBufferBase::SetBuf(uchar *,uint,uint,uint)
.text:00000BC3                 jmp     short loc_BD9
.text:00000BC5 ; ---------------------------------------------------------------------------
.text:00000BC5
.text:00000BC5 loc_BC5:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+41Cj
.text:00000BC5                 mov     edx, [ebp+var_C0]
.text:00000BCB                 add     edx, 1
.text:00000BCE                 mov     [ebp+var_C0], edx
.text:00000BD4                 jmp     loc_A3A
.text:00000BD9 ; ---------------------------------------------------------------------------
.text:00000BD9
.text:00000BD9 loc_BD9:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+2C8j
.text:00000BD9                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+53Fj
.text:00000BD9                 mov     eax, [ebp+var_14]
.text:00000BDC                 mov     byte ptr [eax+30h], 1
.text:00000BE0                 lea     ecx, [ebp+var_40]
.text:00000BE3                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00000BE8                 push    eax             ; struct ISequentialInStream *
.text:00000BE9                 mov     ecx, [ebp+var_14] ; this
.text:00000BEC                 call    ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream(ISequentialInStream *)
.text:00000BF1                 mov     ecx, [ebp+var_14]
.text:00000BF4                 add     ecx, 28h ; '('
.text:00000BF7                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000BFC                 test    eax, eax
.text:00000BFE                 jnz     short loc_C10
.text:00000C00                 push    1000h
.text:00000C05                 mov     ecx, [ebp+var_14]
.text:00000C08                 add     ecx, 28h ; '('
.text:00000C0B                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00000C10
.text:00000C10 loc_C10:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+57Aj
.text:00000C10                 mov     ecx, [ebp+var_2C] ; this
.text:00000C13                 call    ?ReserveBlockPresent@CArchInfo@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CArchInfo::ReserveBlockPresent(void)
.text:00000C18                 movzx   ecx, al
.text:00000C1B                 neg     ecx
.text:00000C1D                 sbb     ecx, ecx
.text:00000C1F                 and     ecx, 4
.text:00000C22                 add     ecx, 4
.text:00000C25                 mov     [ebp+var_EC], ecx
.text:00000C2B                 mov     edx, [ebp+var_EC]
.text:00000C31                 push    edx             ; unsigned int
.text:00000C32                 lea     eax, [ebp+var_E4]
.text:00000C38                 push    eax             ; unsigned __int8 *
.text:00000C39                 mov     ecx, [ebp+var_14] ; this
.text:00000C3C                 call    ?Read@CInArchive@NCab@NArchive@@AAEXPAEI@Z ; NArchive::NCab::CInArchive::Read(uchar *,uint)
.text:00000C41                 movzx   ecx, word ptr [ebp+var_E4]
.text:00000C48                 mov     edx, [ebp+var_2C]
.text:00000C4B                 mov     [edx+10h], ecx
.text:00000C4E                 movzx   eax, word ptr [ebp+var_E4+2]
.text:00000C55                 mov     ecx, [ebp+var_2C]
.text:00000C58                 mov     [ecx+14h], eax
.text:00000C5B                 mov     ecx, [ebp+var_2C] ; this
.text:00000C5E                 call    ?ReserveBlockPresent@CArchInfo@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CArchInfo::ReserveBlockPresent(void)
.text:00000C63                 movzx   edx, al
.text:00000C66                 test    edx, edx
.text:00000C68                 jz      short loc_CA0
.text:00000C6A                 mov     eax, [ebp+var_2C]
.text:00000C6D                 mov     cx, word ptr [ebp+var_E0]
.text:00000C74                 mov     [eax+18h], cx
.text:00000C78                 mov     edx, [ebp+var_2C]
.text:00000C7B                 mov     al, byte ptr [ebp+var_E0+2]
.text:00000C81                 mov     [edx+1Ah], al
.text:00000C84                 mov     ecx, [ebp+var_2C]
.text:00000C87                 mov     dl, byte ptr [ebp+var_E0+3]
.text:00000C8D                 mov     [ecx+1Bh], dl
.text:00000C90                 mov     eax, [ebp+var_2C]
.text:00000C93                 movzx   ecx, word ptr [eax+18h]
.text:00000C97                 push    ecx             ; unsigned int
.text:00000C98                 mov     ecx, [ebp+var_14] ; this
.text:00000C9B                 call    ?Skip@CInArchive@NCab@NArchive@@AAEXI@Z ; NArchive::NCab::CInArchive::Skip(uint)
.text:00000CA0
.text:00000CA0 loc_CA0:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+5E4j
.text:00000CA0                 mov     ecx, [ebp+var_2C] ; this
.text:00000CA3                 call    ?IsTherePrev@CArchInfo@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CArchInfo::IsTherePrev(void)
.text:00000CA8                 movzx   edx, al
.text:00000CAB                 test    edx, edx
.text:00000CAD                 jz      short loc_CBE
.text:00000CAF                 mov     eax, [ebp+var_2C]
.text:00000CB2                 add     eax, 1Ch
.text:00000CB5                 push    eax             ; struct NArchive::NCab::COtherArc *
.text:00000CB6                 mov     ecx, [ebp+var_14] ; this
.text:00000CB9                 call    ?ReadOtherArc@CInArchive@NCab@NArchive@@AAEXAAUCOtherArc@23@@Z ; NArchive::NCab::CInArchive::ReadOtherArc(NArchive::NCab::COtherArc &)
.text:00000CBE
.text:00000CBE loc_CBE:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+629j
.text:00000CBE                 mov     ecx, [ebp+var_2C] ; this
.text:00000CC1                 call    ?IsThereNext@CArchInfo@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CArchInfo::IsThereNext(void)
.text:00000CC6                 movzx   ecx, al
.text:00000CC9                 test    ecx, ecx
.text:00000CCB                 jz      short loc_CDC
.text:00000CCD                 mov     edx, [ebp+var_2C]
.text:00000CD0                 add     edx, 34h ; '4'
.text:00000CD3                 push    edx             ; struct NArchive::NCab::COtherArc *
.text:00000CD4                 mov     ecx, [ebp+var_14] ; this
.text:00000CD7                 call    ?ReadOtherArc@CInArchive@NCab@NArchive@@AAEXAAUCOtherArc@23@@Z ; NArchive::NCab::CInArchive::ReadOtherArc(NArchive::NCab::COtherArc &)
.text:00000CDC
.text:00000CDC loc_CDC:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+647j
.text:00000CDC                 mov     eax, [ebp+var_2C]
.text:00000CDF                 mov     ecx, [eax+4]
.text:00000CE2                 push    ecx
.text:00000CE3                 mov     ecx, [ebp+arg_0]
.text:00000CE6                 call    ?ClearAndReserve@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::NCab::CFolder>::ClearAndReserve(uint)
.text:00000CEB                 mov     [ebp+var_F0], 0
.text:00000CF5                 jmp     short loc_D06
.text:00000CF7 ; ---------------------------------------------------------------------------
.text:00000CF7
.text:00000CF7 loc_CF7:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+6F9j
.text:00000CF7                 mov     edx, [ebp+var_F0]
.text:00000CFD                 add     edx, 1
.text:00000D00                 mov     [ebp+var_F0], edx
.text:00000D06
.text:00000D06 loc_D06:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+671j
.text:00000D06                 mov     eax, [ebp+var_2C]
.text:00000D09                 mov     ecx, [ebp+var_F0]
.text:00000D0F                 cmp     ecx, [eax+4]
.text:00000D12                 jnb     short loc_D82
.text:00000D14                 push    8               ; unsigned int
.text:00000D16                 lea     edx, [ebp+var_E4]
.text:00000D1C                 push    edx             ; unsigned __int8 *
.text:00000D1D                 mov     ecx, [ebp+var_14] ; this
.text:00000D20                 call    ?Read@CInArchive@NCab@NArchive@@AAEXPAEI@Z ; NArchive::NCab::CInArchive::Read(uchar *,uint)
.text:00000D25                 mov     eax, dword ptr [ebp+var_E4]
.text:00000D2B                 mov     [ebp+var_FC], eax
.text:00000D31                 mov     cx, word ptr [ebp+var_E0]
.text:00000D38                 mov     word ptr [ebp+var_F8], cx
.text:00000D3F                 mov     dl, byte ptr [ebp+var_E0+2]
.text:00000D45                 mov     byte ptr [ebp+var_F8+2], dl
.text:00000D4B                 mov     al, byte ptr [ebp+var_E0+3]
.text:00000D51                 mov     byte ptr [ebp+var_F8+3], al
.text:00000D57                 mov     ecx, [ebp+var_2C]
.text:00000D5A                 movzx   edx, byte ptr [ecx+1Ah]
.text:00000D5E                 push    edx             ; unsigned int
.text:00000D5F                 mov     ecx, [ebp+var_14] ; this
.text:00000D62                 call    ?Skip@CInArchive@NCab@NArchive@@AAEXI@Z ; NArchive::NCab::CInArchive::Skip(uint)
.text:00000D67                 mov     eax, [ebp+var_F8]
.text:00000D6D                 push    eax
.text:00000D6E                 mov     ecx, [ebp+var_FC]
.text:00000D74                 push    ecx
.text:00000D75                 mov     ecx, [ebp+arg_0]
.text:00000D78                 call    ?AddInReserved@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXUCFolder@NCab@NArchive@@@Z ; CRecordVector<NArchive::NCab::CFolder>::AddInReserved(NArchive::NCab::CFolder)
.text:00000D7D                 jmp     loc_CF7
.text:00000D82 ; ---------------------------------------------------------------------------
.text:00000D82
.text:00000D82 loc_D82:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+68Ej
.text:00000D82                 mov     ecx, [ebp+var_14] ; this
.text:00000D85                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:00000D8A                 sub     eax, [ebp+var_34]
.text:00000D8D                 sbb     edx, [ebp+var_30]
.text:00000D90                 mov     ecx, [ebp+var_2C]
.text:00000D93                 mov     ecx, [ecx+50h]
.text:00000D96                 xor     esi, esi
.text:00000D98                 mov     [ebp+var_158], eax
.text:00000D9E                 mov     [ebp+var_154], edx
.text:00000DA4                 mov     [ebp+var_160], ecx
.text:00000DAA                 mov     [ebp+var_15C], esi
.text:00000DB0                 mov     edx, [ebp+var_158]
.text:00000DB6                 cmp     edx, [ebp+var_160]
.text:00000DBC                 jnz     short loc_DD0
.text:00000DBE                 mov     eax, [ebp+var_154]
.text:00000DC4                 cmp     eax, [ebp+var_15C]
.text:00000DCA                 jz      loc_E76
.text:00000DD0
.text:00000DD0 loc_DD0:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+738j
.text:00000DD0                 mov     ecx, [ebp+arg_0]
.text:00000DD3                 add     ecx, 78h ; 'x'
.text:00000DD6                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00000DDB                 mov     [ebp+var_164], eax
.text:00000DE1                 mov     esi, esp
.text:00000DE3                 push    0
.text:00000DE5                 push    0
.text:00000DE7                 mov     ecx, [ebp+var_2C]
.text:00000DEA                 mov     edx, [ecx+50h]
.text:00000DED                 xor     eax, eax
.text:00000DEF                 mov     ecx, [ebp+arg_0]
.text:00000DF2                 add     edx, [ecx+18h]
.text:00000DF5                 adc     eax, [ecx+1Ch]
.text:00000DF8                 push    eax
.text:00000DF9                 push    edx
.text:00000DFA                 mov     edx, [ebp+var_164]
.text:00000E00                 push    edx
.text:00000E01                 mov     eax, [ebp+var_164]
.text:00000E07                 mov     ecx, [eax]
.text:00000E09                 mov     edx, [ecx+10h]
.text:00000E0C                 call    edx
.text:00000E0E                 cmp     esi, esp
.text:00000E10                 call    __RTC_CheckEsp
.text:00000E15                 mov     [ebp+var_104], eax
.text:00000E1B                 cmp     [ebp+var_104], 0
.text:00000E22                 jz      short loc_E56
.text:00000E24                 mov     eax, [ebp+var_104]
.text:00000E2A                 mov     [ebp+var_134], eax
.text:00000E30                 mov     byte ptr [ebp+var_4], 0
.text:00000E34                 lea     ecx, [ebp+var_40]
.text:00000E37                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000E3C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E43                 lea     ecx, [ebp+var_24]
.text:00000E46                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000E4B                 mov     eax, [ebp+var_134]
.text:00000E51                 jmp     loc_FE3
.text:00000E56 ; ---------------------------------------------------------------------------
.text:00000E56
.text:00000E56 loc_E56:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+79Ej
.text:00000E56                 mov     ecx, [ebp+var_2C]
.text:00000E59                 mov     edx, [ebp+var_2C]
.text:00000E5C                 mov     eax, [ecx+4Ch]
.text:00000E5F                 sub     eax, [edx+50h]
.text:00000E62                 xor     ecx, ecx
.text:00000E64                 push    ecx
.text:00000E65                 push    eax             ; unsigned __int64
.text:00000E66                 mov     ecx, [ebp+var_38] ; this
.text:00000E69                 call    ?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init(unsigned __int64)
.text:00000E6E                 mov     ecx, [ebp+var_14] ; this
.text:00000E71                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:00000E76
.text:00000E76 loc_E76:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+746j
.text:00000E76                 mov     edx, [ebp+var_2C]
.text:00000E79                 mov     eax, [edx+8]
.text:00000E7C                 push    eax
.text:00000E7D                 mov     ecx, [ebp+arg_0]
.text:00000E80                 add     ecx, 0Ch
.text:00000E83                 call    ?ClearAndReserve@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEXI@Z ; CObjectVector<NArchive::NCab::CItem>::ClearAndReserve(uint)
.text:00000E88                 mov     [ebp+var_F0], 0
.text:00000E92                 jmp     short loc_EA3
.text:00000E94 ; ---------------------------------------------------------------------------
.text:00000E94
.text:00000E94 loc_E94:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *):loc_FB3j
.text:00000E94                 mov     ecx, [ebp+var_F0]
.text:00000E9A                 add     ecx, 1
.text:00000E9D                 mov     [ebp+var_F0], ecx
.text:00000EA3
.text:00000EA3 loc_EA3:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+80Ej
.text:00000EA3                 mov     edx, [ebp+var_2C]
.text:00000EA6                 mov     eax, [ebp+var_F0]
.text:00000EAC                 cmp     eax, [edx+8]
.text:00000EAF                 jnb     loc_FB8
.text:00000EB5                 push    10h             ; unsigned int
.text:00000EB7                 lea     ecx, [ebp+var_E4]
.text:00000EBD                 push    ecx             ; unsigned __int8 *
.text:00000EBE                 mov     ecx, [ebp+var_14] ; this
.text:00000EC1                 call    ?Read@CInArchive@NCab@NArchive@@AAEXPAEI@Z ; NArchive::NCab::CInArchive::Read(uchar *,uint)
.text:00000EC6                 mov     ecx, [ebp+arg_0]
.text:00000EC9                 add     ecx, 0Ch
.text:00000ECC                 call    ?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ ; CObjectVector<NArchive::NCab::CItem>::AddNewInReserved(void)
.text:00000ED1                 mov     [ebp+var_108], eax
.text:00000ED7                 mov     edx, [ebp+var_108]
.text:00000EDD                 mov     eax, dword ptr [ebp+var_E4]
.text:00000EE3                 mov     [edx+10h], eax
.text:00000EE6                 mov     ecx, [ebp+var_108]
.text:00000EEC                 mov     edx, [ebp+var_E0]
.text:00000EF2                 mov     [ecx+0Ch], edx
.text:00000EF5                 movzx   eax, [ebp+var_DC]
.text:00000EFC                 mov     ecx, [ebp+var_108]
.text:00000F02                 mov     [ecx+18h], eax
.text:00000F05                 mov     dx, [ebp+var_DA]
.text:00000F0C                 mov     [ebp+var_10C], dx
.text:00000F13                 mov     ax, [ebp+var_D8]
.text:00000F1A                 mov     [ebp+var_110], ax
.text:00000F21                 movzx   ecx, [ebp+var_10C]
.text:00000F28                 shl     ecx, 10h
.text:00000F2B                 movzx   edx, [ebp+var_110]
.text:00000F32                 or      ecx, edx
.text:00000F34                 mov     eax, [ebp+var_108]
.text:00000F3A                 mov     [eax+14h], ecx
.text:00000F3D                 mov     ecx, [ebp+var_108]
.text:00000F43                 mov     dx, [ebp+var_D6]
.text:00000F4A                 mov     [ecx+1Eh], dx
.text:00000F4E                 mov     eax, [ebp+var_108]
.text:00000F54                 push    eax             ; struct AString *
.text:00000F55                 mov     ecx, [ebp+var_14] ; this
.text:00000F58                 call    ?ReadName@CInArchive@NCab@NArchive@@AAEXAAVAString@@@Z ; NArchive::NCab::CInArchive::ReadName(AString &)
.text:00000F5D                 mov     ecx, [ebp+arg_0]
.text:00000F60                 call    ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CFolder>::Size(void)
.text:00000F65                 push    eax             ; unsigned int
.text:00000F66                 mov     ecx, [ebp+var_108] ; this
.text:00000F6C                 call    ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z ; NArchive::NCab::CItem::GetFolderIndex(uint)
.text:00000F71                 mov     esi, eax
.text:00000F73                 mov     ecx, [ebp+arg_0]
.text:00000F76                 call    ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CFolder>::Size(void)
.text:00000F7B                 cmp     esi, eax
.text:00000F7D                 jl      short loc_FB3
.text:00000F7F                 mov     ecx, [ebp+var_14]
.text:00000F82                 mov     byte ptr [ecx+33h], 1
.text:00000F86                 mov     [ebp+var_138], 1
.text:00000F90                 mov     byte ptr [ebp+var_4], 0
.text:00000F94                 lea     ecx, [ebp+var_40]
.text:00000F97                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000F9C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FA3                 lea     ecx, [ebp+var_24]
.text:00000FA6                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000FAB                 mov     eax, [ebp+var_138]
.text:00000FB1                 jmp     short loc_FE3
.text:00000FB3 ; ---------------------------------------------------------------------------
.text:00000FB3
.text:00000FB3 loc_FB3:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+8F9j
.text:00000FB3                 jmp     loc_E94
.text:00000FB8 ; ---------------------------------------------------------------------------
.text:00000FB8
.text:00000FB8 loc_FB8:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+82Bj
.text:00000FB8                 mov     [ebp+var_13C], 0
.text:00000FC2                 mov     byte ptr [ebp+var_4], 0
.text:00000FC6                 lea     ecx, [ebp+var_40]
.text:00000FC9                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000FCE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FD5                 lea     ecx, [ebp+var_24]
.text:00000FD8                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000FDD                 mov     eax, [ebp+var_13C]
.text:00000FE3
.text:00000FE3 loc_FE3:                                ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+AFj
.text:00000FE3                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+145j ...
.text:00000FE3                 push    edx
.text:00000FE4                 mov     ecx, ebp
.text:00000FE6                 push    eax
.text:00000FE7                 lea     edx, $LN46
.text:00000FED                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000FF2                 pop     eax
.text:00000FF3                 pop     edx
.text:00000FF4                 mov     ecx, [ebp+var_C]
.text:00000FF7                 mov     large fs:0, ecx
.text:00000FFE                 pop     ecx
.text:00000FFF                 pop     edi
.text:00001000                 pop     esi
.text:00001001                 mov     ecx, [ebp+var_10]
.text:00001004                 xor     ecx, ebp
.text:00001006                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000100B                 add     esp, 164h
.text:00001011                 cmp     ebp, esp
.text:00001013                 call    __RTC_CheckEsp
.text:00001018                 mov     esp, ebp
.text:0000101A                 pop     ebp
.text:0000101B                 retn    8
.text:0000101B ?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z endp
.text:0000101B
.text:0000101B ; ---------------------------------------------------------------------------
.text:0000101E                 align 10h
.text:00001020 $LN46           dd 7                    ; DATA XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+963o
.text:00001024                 dd offset $LN45
.text:00001028 $LN45           dd 0FFFFFFDCh, 8        ; DATA XREF: .text:00001024o
.text:00001030                 dd offset $LN37         ; "buffer"
.text:00001034                 dd 0FFFFFFC0h, 4
.text:0000103C                 dd offset $LN38         ; "limitedStream"
.text:00001040                 dd 0FFFFFF94h, 20h
.text:00001048                 dd offset $LN39         ; "header"
.text:0000104C                 dd 0FFFFFF80h, 4
.text:00001054                 dd offset $LN40         ; "numProcessedBytes"
.text:00001058                 dd 0FFFFFF3Ch, 38h
.text:00001060                 dd offset $LN41         ; "finder"
.text:00001064                 dd 0FFFFFF1Ch, 10h
.text:0000106C                 dd offset $LN42         ; "p"
.text:00001070                 dd 0FFFFFF04h, 8
.text:00001078                 dd offset $LN43         ; "folder"
.text:0000107C $LN43           db 'folder',0           ; DATA XREF: .text:00001078o
.text:00001083 $LN42           db 'p',0                ; DATA XREF: .text:0000106Co
.text:00001085 $LN41           db 'finder',0           ; DATA XREF: .text:00001060o
.text:0000108C $LN40           db 'numProcessedBytes',0 ; DATA XREF: .text:00001054o
.text:0000109E $LN39           db 'header',0           ; DATA XREF: .text:00001048o
.text:000010A5 $LN38           db 'limitedStream',0    ; DATA XREF: .text:0000103Co
.text:000010B3 $LN37           db 'buffer',0           ; DATA XREF: .text:00001030o
.text:000010BA                 db 0Ah dup(0CCh)
.text:000010C4
.text:000010C4 ; =============== S U B R O U T I N E =======================================
.text:000010C4
.text:000010C4 ; Attributes: bp-based frame
.text:000010C4
.text:000010C4 ; __int32 __thiscall NArchive::NCab::CInArchive::Open(NArchive::NCab::CInArchive *this, struct NArchive::NCab::CDatabaseEx *, const unsigned __int64 *)
.text:000010C4                 public ?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z
.text:000010C4 ?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z proc near
.text:000010C4
.text:000010C4 var_2C          = dword ptr -2Ch
.text:000010C4 var_28          = dword ptr -28h
.text:000010C4 var_24          = dword ptr -24h
.text:000010C4 var_20          = dword ptr -20h
.text:000010C4 var_1C          = dword ptr -1Ch
.text:000010C4 var_18          = dword ptr -18h
.text:000010C4 var_14          = dword ptr -14h
.text:000010C4 var_10          = dword ptr -10h
.text:000010C4 var_C           = dword ptr -0Ch
.text:000010C4 var_4           = dword ptr -4
.text:000010C4 arg_0           = dword ptr  8
.text:000010C4 arg_4           = dword ptr  0Ch
.text:000010C4
.text:000010C4 ; FUNCTION CHUNK AT .text:0000117B SIZE 0000002F BYTES
.text:000010C4
.text:000010C4                 push    ebp
.text:000010C5                 mov     ebp, esp
.text:000010C7                 push    0FFFFFFFFh
.text:000010C9                 push    offset __ehhandler$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z
.text:000010CE                 mov     eax, large fs:0
.text:000010D4                 push    eax
.text:000010D5                 push    ecx
.text:000010D6                 sub     esp, 1Ch
.text:000010D9                 push    ebx
.text:000010DA                 push    esi
.text:000010DB                 push    edi
.text:000010DC                 mov     eax, 0CCCCCCCCh
.text:000010E1                 mov     [ebp+var_2C], eax
.text:000010E4                 mov     [ebp+var_28], eax
.text:000010E7                 mov     [ebp+var_24], eax
.text:000010EA                 mov     [ebp+var_20], eax
.text:000010ED                 mov     [ebp+var_1C], eax
.text:000010F0                 mov     [ebp+var_18], eax
.text:000010F3                 mov     [ebp+var_14], eax
.text:000010F6                 mov     eax, dword ptr ds:___security_cookie
.text:000010FB                 xor     eax, ebp
.text:000010FD                 push    eax
.text:000010FE                 lea     eax, [ebp+var_C]
.text:00001101                 mov     large fs:0, eax
.text:00001107                 mov     [ebp+var_10], esp
.text:0000110A                 mov     [ebp+var_14], ecx
.text:0000110D                 mov     [ebp+var_4], 0
.text:00001114                 mov     eax, [ebp+arg_4]
.text:00001117                 push    eax             ; unsigned __int64 *
.text:00001118                 mov     ecx, [ebp+arg_0]
.text:0000111B                 push    ecx             ; struct NArchive::NCab::CDatabaseEx *
.text:0000111C                 mov     ecx, [ebp+var_14] ; this
.text:0000111F                 call    ?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)
.text:00001124                 mov     [ebp+var_2C], eax
.text:00001127                 mov     eax, [ebp+var_2C]
.text:0000112A                 jmp     short loc_117B
.text:0000112A ?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z endp
.text:0000112A
.text:0000112C
.text:0000112C ; =============== S U B R O U T I N E =======================================
.text:0000112C
.text:0000112C
.text:0000112C __catch$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$0 proc near
.text:0000112C                                         ; DATA XREF: .xdata$x:00001A60o
.text:0000112C                 mov     edx, [ebp-1Ch]
.text:0000112F                 mov     eax, [edx]
.text:00001131                 mov     [ebp-24h], eax
.text:00001134                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000113B                 mov     eax, offset $LN8
.text:00001140                 retn
.text:00001140 __catch$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$0 endp
.text:00001140
.text:00001141 ; ---------------------------------------------------------------------------
.text:00001141                 mov     eax, offset __tryend$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$2
.text:00001146                 retn
.text:00001147
.text:00001147 ; =============== S U B R O U T I N E =======================================
.text:00001147
.text:00001147
.text:00001147 __catch$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$1 proc near
.text:00001147                                         ; DATA XREF: .xdata$x:00001A70o
.text:00001147                 mov     ecx, [ebp-14h]
.text:0000114A                 mov     byte ptr [ecx+32h], 1
.text:0000114E                 mov     dword ptr [ebp-28h], 1
.text:00001155                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000115C                 mov     eax, offset $LN10
.text:00001161                 retn
.text:00001161 __catch$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$1 endp
.text:00001161
.text:00001162 ; ---------------------------------------------------------------------------
.text:00001162                 mov     eax, offset __tryend$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$2
.text:00001167                 retn
.text:00001168 ; ---------------------------------------------------------------------------
.text:00001168
.text:00001168 __tryend$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$2:
.text:00001168                                         ; DATA XREF: .text:00001141o
.text:00001168                                         ; .text:00001162o
.text:00001168                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000116F                 jmp     short loc_1176
.text:00001171 ; ---------------------------------------------------------------------------
.text:00001171
.text:00001171 $LN10:                                  ; DATA XREF: __catch$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$1+15o
.text:00001171                 mov     eax, [ebp-28h]
.text:00001174                 jmp     short loc_117B
.text:00001176 ; ---------------------------------------------------------------------------
.text:00001176
.text:00001176 loc_1176:                               ; CODE XREF: .text:0000116Fj
.text:00001176                 jmp     short loc_117B
.text:00001178 ; ---------------------------------------------------------------------------
.text:00001178
.text:00001178 $LN8:                                   ; DATA XREF: __catch$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$0+Fo
.text:00001178                 mov     eax, [ebp-24h]
.text:0000117B ; START OF FUNCTION CHUNK FOR ?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z
.text:0000117B
.text:0000117B loc_117B:                               ; CODE XREF: NArchive::NCab::CInArchive::Open(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+66j
.text:0000117B                                         ; .text:00001174j ...
.text:0000117B                 push    edx
.text:0000117C                 mov     ecx, ebp
.text:0000117E                 push    eax
.text:0000117F                 lea     edx, $LN16_0
.text:00001185                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000118A                 pop     eax
.text:0000118B                 pop     edx
.text:0000118C                 mov     ecx, [ebp+var_C]
.text:0000118F                 mov     large fs:0, ecx
.text:00001196                 pop     ecx
.text:00001197                 pop     edi
.text:00001198                 pop     esi
.text:00001199                 pop     ebx
.text:0000119A                 add     esp, 2Ch
.text:0000119D                 cmp     ebp, esp
.text:0000119F                 call    __RTC_CheckEsp
.text:000011A4                 mov     esp, ebp
.text:000011A6                 pop     ebp
.text:000011A7                 retn    8
.text:000011A7 ; END OF FUNCTION CHUNK FOR ?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z
.text:000011A7 ; ---------------------------------------------------------------------------
.text:000011AA                 align 4
.text:000011AC $LN16_0         dd 1                    ; DATA XREF: NArchive::NCab::CInArchive::Open(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+BBo
.text:000011B0                 dd offset $LN15_0
.text:000011B4 $LN15_0         dd 0FFFFFFE4h, 4        ; DATA XREF: .text:000011B0o
.text:000011BC                 dd offset $LN13_0
.text:000011C0 $LN13_0         dd 0CCCC0065h           ; DATA XREF: .text:000011BCo
.text:000011C4
.text:000011C4 ; =============== S U B R O U T I N E =======================================
.text:000011C4
.text:000011C4 ; Attributes: bp-based frame
.text:000011C4
.text:000011C4 ; bool __thiscall NArchive::NCab::CMvDatabaseEx::AreItemsEqual(NArchive::NCab::CMvDatabaseEx *this, unsigned int, unsigned int)
.text:000011C4                 public ?AreItemsEqual@CMvDatabaseEx@NCab@NArchive@@AAE_NII@Z
.text:000011C4 ?AreItemsEqual@CMvDatabaseEx@NCab@NArchive@@AAE_NII@Z proc near
.text:000011C4                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+158p
.text:000011C4
.text:000011C4 var_20          = dword ptr -20h
.text:000011C4 var_1C          = dword ptr -1Ch
.text:000011C4 var_18          = dword ptr -18h
.text:000011C4 var_14          = dword ptr -14h
.text:000011C4 var_10          = dword ptr -10h
.text:000011C4 var_C           = dword ptr -0Ch
.text:000011C4 var_8           = dword ptr -8
.text:000011C4 var_4           = dword ptr -4
.text:000011C4 arg_0           = dword ptr  8
.text:000011C4 arg_4           = dword ptr  0Ch
.text:000011C4
.text:000011C4                 push    ebp
.text:000011C5                 mov     ebp, esp
.text:000011C7                 sub     esp, 20h
.text:000011CA                 push    esi
.text:000011CB                 mov     eax, 0CCCCCCCCh
.text:000011D0                 mov     [ebp+var_20], eax
.text:000011D3                 mov     [ebp+var_1C], eax
.text:000011D6                 mov     [ebp+var_18], eax
.text:000011D9                 mov     [ebp+var_14], eax
.text:000011DC                 mov     [ebp+var_10], eax
.text:000011DF                 mov     [ebp+var_C], eax
.text:000011E2                 mov     [ebp+var_8], eax
.text:000011E5                 mov     [ebp+var_4], eax
.text:000011E8                 mov     [ebp+var_4], ecx
.text:000011EB                 mov     eax, [ebp+arg_0]
.text:000011EE                 push    eax
.text:000011EF                 mov     ecx, [ebp+var_4]
.text:000011F2                 add     ecx, 0Ch
.text:000011F5                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:000011FA                 mov     [ebp+var_8], eax
.text:000011FD                 mov     ecx, [ebp+arg_4]
.text:00001200                 push    ecx
.text:00001201                 mov     ecx, [ebp+var_4]
.text:00001204                 add     ecx, 0Ch
.text:00001207                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:0000120C                 mov     [ebp+var_C], eax
.text:0000120F                 mov     edx, [ebp+var_8]
.text:00001212                 mov     eax, [edx]
.text:00001214                 push    eax
.text:00001215                 mov     ecx, [ebp+var_4]
.text:00001218                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:0000121D                 mov     [ebp+var_10], eax
.text:00001220                 mov     ecx, [ebp+var_C]
.text:00001223                 mov     edx, [ecx]
.text:00001225                 push    edx
.text:00001226                 mov     ecx, [ebp+var_4]
.text:00001229                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:0000122E                 mov     [ebp+var_14], eax
.text:00001231                 mov     eax, [ebp+var_8]
.text:00001234                 mov     ecx, [eax+4]
.text:00001237                 push    ecx
.text:00001238                 mov     ecx, [ebp+var_10]
.text:0000123B                 add     ecx, 0Ch
.text:0000123E                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00001243                 mov     [ebp+var_18], eax
.text:00001246                 mov     edx, [ebp+var_C]
.text:00001249                 mov     eax, [edx+4]
.text:0000124C                 push    eax
.text:0000124D                 mov     ecx, [ebp+var_14]
.text:00001250                 add     ecx, 0Ch
.text:00001253                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00001258                 mov     [ebp+var_1C], eax
.text:0000125B                 mov     ecx, [ebp+var_8]
.text:0000125E                 push    ecx             ; struct NArchive::NCab::CMvItem *
.text:0000125F                 mov     ecx, [ebp+var_4] ; this
.text:00001262                 call    ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)
.text:00001267                 mov     esi, eax
.text:00001269                 mov     edx, [ebp+var_C]
.text:0000126C                 push    edx             ; struct NArchive::NCab::CMvItem *
.text:0000126D                 mov     ecx, [ebp+var_4] ; this
.text:00001270                 call    ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)
.text:00001275                 cmp     esi, eax
.text:00001277                 jnz     short loc_12B2
.text:00001279                 mov     eax, [ebp+var_18]
.text:0000127C                 mov     ecx, [ebp+var_1C]
.text:0000127F                 mov     edx, [eax+0Ch]
.text:00001282                 cmp     edx, [ecx+0Ch]
.text:00001285                 jnz     short loc_12B2
.text:00001287                 mov     eax, [ebp+var_18]
.text:0000128A                 mov     ecx, [ebp+var_1C]
.text:0000128D                 mov     edx, [eax+10h]
.text:00001290                 cmp     edx, [ecx+10h]
.text:00001293                 jnz     short loc_12B2
.text:00001295                 mov     eax, [ebp+var_1C]
.text:00001298                 push    eax             ; AString *
.text:00001299                 mov     ecx, [ebp+var_18]
.text:0000129C                 push    ecx             ; AString *
.text:0000129D                 call    ??8@YG_NABVAString@@0@Z ; operator==(AString const &,AString const &)
.text:000012A2                 movzx   edx, al
.text:000012A5                 test    edx, edx
.text:000012A7                 jz      short loc_12B2
.text:000012A9                 mov     [ebp+var_20], 1
.text:000012B0                 jmp     short loc_12B9
.text:000012B2 ; ---------------------------------------------------------------------------
.text:000012B2
.text:000012B2 loc_12B2:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+B3j
.text:000012B2                                         ; NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+C1j ...
.text:000012B2                 mov     [ebp+var_20], 0
.text:000012B9
.text:000012B9 loc_12B9:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+ECj
.text:000012B9                 mov     al, byte ptr [ebp+var_20]
.text:000012BC                 pop     esi
.text:000012BD                 add     esp, 20h
.text:000012C0                 cmp     ebp, esp
.text:000012C2                 call    __RTC_CheckEsp
.text:000012C7                 mov     esp, ebp
.text:000012C9                 pop     ebp
.text:000012CA                 retn    8
.text:000012CA ?AreItemsEqual@CMvDatabaseEx@NCab@NArchive@@AAE_NII@Z endp
.text:000012CA
.text:000012CA ; ---------------------------------------------------------------------------
.text:000012CD                 db 7 dup(0CCh)
.text:000012D4
.text:000012D4 ; =============== S U B R O U T I N E =======================================
.text:000012D4
.text:000012D4 ; Attributes: bp-based frame
.text:000012D4
.text:000012D4 ; void __thiscall NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(NArchive::NCab::CMvDatabaseEx *__hidden this)
.text:000012D4                 public ?FillSortAndShrink@CMvDatabaseEx@NCab@NArchive@@QAEXXZ
.text:000012D4 ?FillSortAndShrink@CMvDatabaseEx@NCab@NArchive@@QAEXXZ proc near
.text:000012D4
.text:000012D4 var_3C          = dword ptr -3Ch
.text:000012D4 var_38          = dword ptr -38h
.text:000012D4 var_34          = dword ptr -34h
.text:000012D4 var_30          = dword ptr -30h
.text:000012D4 var_2C          = dword ptr -2Ch
.text:000012D4 var_28          = dword ptr -28h
.text:000012D4 var_20          = dword ptr -20h
.text:000012D4 var_1C          = dword ptr -1Ch
.text:000012D4 var_14          = dword ptr -14h
.text:000012D4 var_10          = dword ptr -10h
.text:000012D4 var_C           = dword ptr -0Ch
.text:000012D4 var_8           = dword ptr -8
.text:000012D4 var_4           = dword ptr -4
.text:000012D4
.text:000012D4                 push    ebp
.text:000012D5                 mov     ebp, esp
.text:000012D7                 sub     esp, 3Ch
.text:000012DA                 push    esi
.text:000012DB                 push    edi
.text:000012DC                 push    ecx
.text:000012DD                 lea     edi, [ebp+var_3C]
.text:000012E0                 mov     ecx, 0Fh
.text:000012E5                 mov     eax, 0CCCCCCCCh
.text:000012EA                 rep stosd
.text:000012EC                 pop     ecx
.text:000012ED                 mov     [ebp+var_4], ecx
.text:000012F0                 mov     ecx, [ebp+var_4]
.text:000012F3                 add     ecx, 0Ch
.text:000012F6                 call    ?Clear@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::NCab::CMvItem>::Clear(void)
.text:000012FB                 mov     ecx, [ebp+var_4]
.text:000012FE                 add     ecx, 18h
.text:00001301                 call    ?Clear@?$CRecordVector@H@@QAEXXZ ; CRecordVector<int>::Clear(void)
.text:00001306                 mov     ecx, [ebp+var_4]
.text:00001309                 add     ecx, 24h ; '$'
.text:0000130C                 call    ?Clear@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::Clear(void)
.text:00001311                 mov     [ebp+var_8], 0
.text:00001318                 mov     [ebp+var_C], 0
.text:0000131F                 jmp     short loc_132A
.text:00001321 ; ---------------------------------------------------------------------------
.text:00001321
.text:00001321 loc_1321:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void):loc_13C8j
.text:00001321                 mov     eax, [ebp+var_C]
.text:00001324                 add     eax, 1
.text:00001327                 mov     [ebp+var_C], eax
.text:0000132A
.text:0000132A loc_132A:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+4Bj
.text:0000132A                 mov     ecx, [ebp+var_4]
.text:0000132D                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:00001332                 cmp     [ebp+var_C], eax
.text:00001335                 jnb     loc_13CD
.text:0000133B                 mov     ecx, [ebp+var_C]
.text:0000133E                 push    ecx
.text:0000133F                 mov     ecx, [ebp+var_4]
.text:00001342                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00001347                 mov     [ebp+var_10], eax
.text:0000134A                 mov     edx, [ebp+var_8]
.text:0000134D                 mov     [ebp+var_14], edx
.text:00001350                 mov     ecx, [ebp+var_10] ; this
.text:00001353                 call    ?IsTherePrevFolder@CDatabase@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CDatabase::IsTherePrevFolder(void)
.text:00001358                 movzx   eax, al
.text:0000135B                 test    eax, eax
.text:0000135D                 jz      short loc_1368
.text:0000135F                 mov     ecx, [ebp+var_14]
.text:00001362                 sub     ecx, 1
.text:00001365                 mov     [ebp+var_14], ecx
.text:00001368
.text:00001368 loc_1368:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+89j
.text:00001368                 mov     edx, [ebp+var_14]
.text:0000136B                 push    edx
.text:0000136C                 mov     ecx, [ebp+var_4]
.text:0000136F                 add     ecx, 18h
.text:00001372                 call    ?Add@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::Add(int)
.text:00001377                 mov     ecx, [ebp+var_10] ; this
.text:0000137A                 call    ?GetNumberOfNewFolders@CDatabase@NCab@NArchive@@QBEHXZ ; NArchive::NCab::CDatabase::GetNumberOfNewFolders(void)
.text:0000137F                 add     eax, [ebp+var_8]
.text:00001382                 mov     [ebp+var_8], eax
.text:00001385                 mov     eax, [ebp+var_C]
.text:00001388                 mov     [ebp+var_20], eax
.text:0000138B                 mov     [ebp+var_28], 0
.text:00001392                 jmp     short loc_139D
.text:00001394 ; ---------------------------------------------------------------------------
.text:00001394
.text:00001394 loc_1394:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+F2j
.text:00001394                 mov     ecx, [ebp+var_28]
.text:00001397                 add     ecx, 1
.text:0000139A                 mov     [ebp+var_28], ecx
.text:0000139D
.text:0000139D loc_139D:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+BEj
.text:0000139D                 mov     ecx, [ebp+var_10]
.text:000013A0                 add     ecx, 0Ch
.text:000013A3                 call    ?Size@?$CObjectVector@UCItem@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CItem>::Size(void)
.text:000013A8                 cmp     [ebp+var_28], eax
.text:000013AB                 jnb     short loc_13C8
.text:000013AD                 mov     edx, [ebp+var_28]
.text:000013B0                 mov     [ebp+var_1C], edx
.text:000013B3                 mov     eax, [ebp+var_1C]
.text:000013B6                 push    eax
.text:000013B7                 mov     ecx, [ebp+var_20]
.text:000013BA                 push    ecx
.text:000013BB                 mov     ecx, [ebp+var_4]
.text:000013BE                 add     ecx, 0Ch
.text:000013C1                 call    ?Add@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEIUCMvItem@NCab@NArchive@@@Z ; CRecordVector<NArchive::NCab::CMvItem>::Add(NArchive::NCab::CMvItem)
.text:000013C6                 jmp     short loc_1394
.text:000013C8 ; ---------------------------------------------------------------------------
.text:000013C8
.text:000013C8 loc_13C8:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+D7j
.text:000013C8                 jmp     loc_1321
.text:000013CD ; ---------------------------------------------------------------------------
.text:000013CD
.text:000013CD loc_13CD:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+61j
.text:000013CD                 mov     ecx, [ebp+var_4]
.text:000013D0                 add     ecx, 0Ch
.text:000013D3                 call    ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CMvItem>::Size(void)
.text:000013D8                 cmp     eax, 1
.text:000013DB                 jbe     loc_1482
.text:000013E1                 mov     edx, [ebp+var_4]
.text:000013E4                 push    edx
.text:000013E5                 push    offset ?CompareMvItems@NCab@NArchive@@YGHPBUCMvItem@12@0PAX@Z ; NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)
.text:000013EA                 mov     ecx, [ebp+var_4]
.text:000013ED                 add     ecx, 0Ch
.text:000013F0                 call    ?Sort@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXP6GHPBUCMvItem@NCab@NArchive@@0PAX@Z1@Z ; CRecordVector<NArchive::NCab::CMvItem>::Sort(int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)
.text:000013F5                 mov     [ebp+var_2C], 1
.text:000013FC                 mov     [ebp+var_30], 1
.text:00001403                 jmp     short loc_140E
.text:00001405 ; ---------------------------------------------------------------------------
.text:00001405
.text:00001405 loc_1405:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void):loc_1471j
.text:00001405                 mov     eax, [ebp+var_30]
.text:00001408                 add     eax, 1
.text:0000140B                 mov     [ebp+var_30], eax
.text:0000140E
.text:0000140E loc_140E:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+12Fj
.text:0000140E                 mov     ecx, [ebp+var_4]
.text:00001411                 add     ecx, 0Ch
.text:00001414                 call    ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CMvItem>::Size(void)
.text:00001419                 cmp     [ebp+var_30], eax
.text:0000141C                 jnb     short loc_1473
.text:0000141E                 mov     ecx, [ebp+var_30]
.text:00001421                 sub     ecx, 1
.text:00001424                 push    ecx             ; unsigned int
.text:00001425                 mov     edx, [ebp+var_30]
.text:00001428                 push    edx             ; unsigned int
.text:00001429                 mov     ecx, [ebp+var_4] ; this
.text:0000142C                 call    ?AreItemsEqual@CMvDatabaseEx@NCab@NArchive@@AAE_NII@Z ; NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)
.text:00001431                 movzx   eax, al
.text:00001434                 test    eax, eax
.text:00001436                 jnz     short loc_1471
.text:00001438                 mov     ecx, [ebp+var_2C]
.text:0000143B                 mov     [ebp+var_3C], ecx
.text:0000143E                 mov     edx, [ebp+var_2C]
.text:00001441                 add     edx, 1
.text:00001444                 mov     [ebp+var_2C], edx
.text:00001447                 mov     eax, [ebp+var_3C]
.text:0000144A                 push    eax
.text:0000144B                 mov     ecx, [ebp+var_4]
.text:0000144E                 add     ecx, 0Ch
.text:00001451                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:00001456                 mov     esi, eax
.text:00001458                 mov     ecx, [ebp+var_30]
.text:0000145B                 push    ecx
.text:0000145C                 mov     ecx, [ebp+var_4]
.text:0000145F                 add     ecx, 0Ch
.text:00001462                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:00001467                 mov     edx, [eax]
.text:00001469                 mov     eax, [eax+4]
.text:0000146C                 mov     [esi], edx
.text:0000146E                 mov     [esi+4], eax
.text:00001471
.text:00001471 loc_1471:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+162j
.text:00001471                 jmp     short loc_1405
.text:00001473 ; ---------------------------------------------------------------------------
.text:00001473
.text:00001473 loc_1473:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+148j
.text:00001473                 mov     ecx, [ebp+var_2C]
.text:00001476                 push    ecx
.text:00001477                 mov     ecx, [ebp+var_4]
.text:0000147A                 add     ecx, 0Ch
.text:0000147D                 call    ?DeleteFrom@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::NCab::CMvItem>::DeleteFrom(uint)
.text:00001482
.text:00001482 loc_1482:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+107j
.text:00001482                 mov     [ebp+var_34], 0
.text:00001489                 jmp     short loc_1494
.text:0000148B ; ---------------------------------------------------------------------------
.text:0000148B
.text:0000148B loc_148B:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void):loc_14DEj
.text:0000148B                 mov     edx, [ebp+var_34]
.text:0000148E                 add     edx, 1
.text:00001491                 mov     [ebp+var_34], edx
.text:00001494
.text:00001494 loc_1494:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+1B5j
.text:00001494                 mov     ecx, [ebp+var_4]
.text:00001497                 add     ecx, 0Ch
.text:0000149A                 call    ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CMvItem>::Size(void)
.text:0000149F                 cmp     [ebp+var_34], eax
.text:000014A2                 jnb     short loc_14E0
.text:000014A4                 mov     eax, [ebp+var_34]
.text:000014A7                 push    eax
.text:000014A8                 mov     ecx, [ebp+var_4]
.text:000014AB                 add     ecx, 0Ch
.text:000014AE                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:000014B3                 push    eax             ; struct NArchive::NCab::CMvItem *
.text:000014B4                 mov     ecx, [ebp+var_4] ; this
.text:000014B7                 call    ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)
.text:000014BC                 mov     [ebp+var_38], eax
.text:000014BF                 mov     ecx, [ebp+var_4]
.text:000014C2                 add     ecx, 24h ; '$'
.text:000014C5                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:000014CA                 cmp     [ebp+var_38], eax
.text:000014CD                 jl      short loc_14DE
.text:000014CF                 mov     ecx, [ebp+var_34]
.text:000014D2                 push    ecx
.text:000014D3                 mov     ecx, [ebp+var_4]
.text:000014D6                 add     ecx, 24h ; '$'
.text:000014D9                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:000014DE
.text:000014DE loc_14DE:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+1F9j
.text:000014DE                 jmp     short loc_148B
.text:000014E0 ; ---------------------------------------------------------------------------
.text:000014E0
.text:000014E0 loc_14E0:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+1CEj
.text:000014E0                 push    edx
.text:000014E1                 mov     ecx, ebp
.text:000014E3                 push    eax
.text:000014E4                 lea     edx, $LN21
.text:000014EA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000014EF                 pop     eax
.text:000014F0                 pop     edx
.text:000014F1                 pop     edi
.text:000014F2                 pop     esi
.text:000014F3                 add     esp, 3Ch
.text:000014F6                 cmp     ebp, esp
.text:000014F8                 call    __RTC_CheckEsp
.text:000014FD                 mov     esp, ebp
.text:000014FF                 pop     ebp
.text:00001500                 retn
.text:00001500 ?FillSortAndShrink@CMvDatabaseEx@NCab@NArchive@@QAEXXZ endp
.text:00001500
.text:00001500 ; ---------------------------------------------------------------------------
.text:00001501                 align 4
.text:00001504 $LN21           dd 1                    ; DATA XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+210o
.text:00001508                 dd offset $LN20
.text:0000150C $LN20           dd 0FFFFFFE0h, 8        ; DATA XREF: .text:00001508o
.text:00001514                 dd offset $LN19         ; "mvItem"
.text:00001518 $LN19           db 'mvItem',0           ; DATA XREF: .text:00001514o
.text:0000151F                 db 5 dup(0CCh)
.text:00001524
.text:00001524 ; =============== S U B R O U T I N E =======================================
.text:00001524
.text:00001524 ; Attributes: bp-based frame
.text:00001524
.text:00001524 ; int __stdcall NArchive::NCab::CompareMvItems(struct NArchive::NCab::CMvItem *, struct NArchive::NCab::CMvItem *, int)
.text:00001524 ?CompareMvItems@NCab@NArchive@@YGHPBUCMvItem@12@0PAX@Z proc near
.text:00001524                                         ; DATA XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+111o
.text:00001524
.text:00001524 var_30          = dword ptr -30h
.text:00001524 var_2C          = dword ptr -2Ch
.text:00001524 var_28          = dword ptr -28h
.text:00001524 var_24          = dword ptr -24h
.text:00001524 var_20          = dword ptr -20h
.text:00001524 var_1C          = dword ptr -1Ch
.text:00001524 var_16          = byte ptr -16h
.text:00001524 var_15          = byte ptr -15h
.text:00001524 var_14          = dword ptr -14h
.text:00001524 var_10          = dword ptr -10h
.text:00001524 var_C           = dword ptr -0Ch
.text:00001524 var_8           = dword ptr -8
.text:00001524 var_4           = dword ptr -4
.text:00001524 arg_0           = dword ptr  8
.text:00001524 arg_4           = dword ptr  0Ch
.text:00001524 arg_8           = dword ptr  10h
.text:00001524
.text:00001524                 push    ebp
.text:00001525                 mov     ebp, esp
.text:00001527                 sub     esp, 30h
.text:0000152A                 push    edi
.text:0000152B                 lea     edi, [ebp+var_30]
.text:0000152E                 mov     ecx, 0Ch
.text:00001533                 mov     eax, 0CCCCCCCCh
.text:00001538                 rep stosd
.text:0000153A                 mov     eax, [ebp+arg_8]
.text:0000153D                 mov     [ebp+var_4], eax
.text:00001540                 mov     ecx, [ebp+arg_0]
.text:00001543                 mov     edx, [ecx]
.text:00001545                 push    edx
.text:00001546                 mov     ecx, [ebp+var_4]
.text:00001549                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:0000154E                 mov     [ebp+var_8], eax
.text:00001551                 mov     eax, [ebp+arg_4]
.text:00001554                 mov     ecx, [eax]
.text:00001556                 push    ecx
.text:00001557                 mov     ecx, [ebp+var_4]
.text:0000155A                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:0000155F                 mov     [ebp+var_C], eax
.text:00001562                 mov     edx, [ebp+arg_0]
.text:00001565                 mov     eax, [edx+4]
.text:00001568                 push    eax
.text:00001569                 mov     ecx, [ebp+var_8]
.text:0000156C                 add     ecx, 0Ch
.text:0000156F                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00001574                 mov     [ebp+var_10], eax
.text:00001577                 mov     ecx, [ebp+arg_4]
.text:0000157A                 mov     edx, [ecx+4]
.text:0000157D                 push    edx
.text:0000157E                 mov     ecx, [ebp+var_C]
.text:00001581                 add     ecx, 0Ch
.text:00001584                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00001589                 mov     [ebp+var_14], eax
.text:0000158C                 mov     ecx, [ebp+var_10] ; this
.text:0000158F                 call    ?IsDir@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::IsDir(void)
.text:00001594                 mov     [ebp+var_15], al
.text:00001597                 mov     ecx, [ebp+var_14] ; this
.text:0000159A                 call    ?IsDir@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::IsDir(void)
.text:0000159F                 mov     [ebp+var_16], al
.text:000015A2                 movzx   eax, [ebp+var_15]
.text:000015A6                 test    eax, eax
.text:000015A8                 jz      short loc_15BA
.text:000015AA                 movzx   ecx, [ebp+var_16]
.text:000015AE                 test    ecx, ecx
.text:000015B0                 jnz     short loc_15BA
.text:000015B2                 or      eax, 0FFFFFFFFh
.text:000015B5                 jmp     loc_1681
.text:000015BA ; ---------------------------------------------------------------------------
.text:000015BA
.text:000015BA loc_15BA:                               ; CODE XREF: NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+84j
.text:000015BA                                         ; NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+8Cj
.text:000015BA                 movzx   edx, [ebp+var_16]
.text:000015BE                 test    edx, edx
.text:000015C0                 jz      short loc_15D4
.text:000015C2                 movzx   eax, [ebp+var_15]
.text:000015C6                 test    eax, eax
.text:000015C8                 jnz     short loc_15D4
.text:000015CA                 mov     eax, 1
.text:000015CF                 jmp     loc_1681
.text:000015D4 ; ---------------------------------------------------------------------------
.text:000015D4
.text:000015D4 loc_15D4:                               ; CODE XREF: NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+9Cj
.text:000015D4                                         ; NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+A4j
.text:000015D4                 mov     ecx, [ebp+arg_0]
.text:000015D7                 push    ecx             ; struct NArchive::NCab::CMvItem *
.text:000015D8                 mov     ecx, [ebp+var_4] ; this
.text:000015DB                 call    ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)
.text:000015E0                 mov     [ebp+var_1C], eax
.text:000015E3                 mov     edx, [ebp+arg_4]
.text:000015E6                 push    edx             ; struct NArchive::NCab::CMvItem *
.text:000015E7                 mov     ecx, [ebp+var_4] ; this
.text:000015EA                 call    ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)
.text:000015EF                 mov     [ebp+var_20], eax
.text:000015F2                 mov     eax, [ebp+var_20]
.text:000015F5                 push    eax
.text:000015F6                 mov     ecx, [ebp+var_1C]
.text:000015F9                 push    ecx
.text:000015FA                 call    ??$MyCompare@H@@YGHHH@Z ; MyCompare<int>(int,int)
.text:000015FF                 mov     [ebp+var_24], eax
.text:00001602                 cmp     [ebp+var_24], 0
.text:00001606                 jz      short loc_160D
.text:00001608                 mov     eax, [ebp+var_24]
.text:0000160B                 jmp     short loc_1681
.text:0000160D ; ---------------------------------------------------------------------------
.text:0000160D
.text:0000160D loc_160D:                               ; CODE XREF: NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+E2j
.text:0000160D                 mov     edx, [ebp+var_14]
.text:00001610                 mov     eax, [edx+0Ch]
.text:00001613                 push    eax
.text:00001614                 mov     ecx, [ebp+var_10]
.text:00001617                 mov     edx, [ecx+0Ch]
.text:0000161A                 push    edx
.text:0000161B                 call    ??$MyCompare@I@@YGHII@Z ; MyCompare<uint>(uint,uint)
.text:00001620                 mov     [ebp+var_28], eax
.text:00001623                 cmp     [ebp+var_28], 0
.text:00001627                 jz      short loc_162E
.text:00001629                 mov     eax, [ebp+var_28]
.text:0000162C                 jmp     short loc_1681
.text:0000162E ; ---------------------------------------------------------------------------
.text:0000162E
.text:0000162E loc_162E:                               ; CODE XREF: NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+103j
.text:0000162E                 mov     eax, [ebp+var_14]
.text:00001631                 mov     ecx, [eax+10h]
.text:00001634                 push    ecx
.text:00001635                 mov     edx, [ebp+var_10]
.text:00001638                 mov     eax, [edx+10h]
.text:0000163B                 push    eax
.text:0000163C                 call    ??$MyCompare@I@@YGHII@Z ; MyCompare<uint>(uint,uint)
.text:00001641                 mov     [ebp+var_2C], eax
.text:00001644                 cmp     [ebp+var_2C], 0
.text:00001648                 jz      short loc_164F
.text:0000164A                 mov     eax, [ebp+var_2C]
.text:0000164D                 jmp     short loc_1681
.text:0000164F ; ---------------------------------------------------------------------------
.text:0000164F
.text:0000164F loc_164F:                               ; CODE XREF: NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+124j
.text:0000164F                 mov     ecx, [ebp+arg_4]
.text:00001652                 mov     edx, [ecx]
.text:00001654                 push    edx
.text:00001655                 mov     eax, [ebp+arg_0]
.text:00001658                 mov     ecx, [eax]
.text:0000165A                 push    ecx
.text:0000165B                 call    ??$MyCompare@I@@YGHII@Z ; MyCompare<uint>(uint,uint)
.text:00001660                 mov     [ebp+var_30], eax
.text:00001663                 cmp     [ebp+var_30], 0
.text:00001667                 jz      short loc_166E
.text:00001669                 mov     eax, [ebp+var_30]
.text:0000166C                 jmp     short loc_1681
.text:0000166E ; ---------------------------------------------------------------------------
.text:0000166E
.text:0000166E loc_166E:                               ; CODE XREF: NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+143j
.text:0000166E                 mov     edx, [ebp+arg_4]
.text:00001671                 mov     eax, [edx+4]
.text:00001674                 push    eax
.text:00001675                 mov     ecx, [ebp+arg_0]
.text:00001678                 mov     edx, [ecx+4]
.text:0000167B                 push    edx
.text:0000167C                 call    ??$MyCompare@I@@YGHII@Z ; MyCompare<uint>(uint,uint)
.text:00001681
.text:00001681 loc_1681:                               ; CODE XREF: NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+91j
.text:00001681                                         ; NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+ABj ...
.text:00001681                 pop     edi
.text:00001682                 add     esp, 30h
.text:00001685                 cmp     ebp, esp
.text:00001687                 call    __RTC_CheckEsp
.text:0000168C                 mov     esp, ebp
.text:0000168E                 pop     ebp
.text:0000168F                 retn    0Ch
.text:0000168F ?CompareMvItems@NCab@NArchive@@YGHPBUCMvItem@12@0PAX@Z endp
.text:0000168F
.text:0000168F ; ---------------------------------------------------------------------------
.text:00001692                 align 4
.text:00001694
.text:00001694 ; =============== S U B R O U T I N E =======================================
.text:00001694
.text:00001694 ; Attributes: bp-based frame
.text:00001694
.text:00001694 ; bool __thiscall NArchive::NCab::CMvDatabaseEx::Check(NArchive::NCab::CMvDatabaseEx *__hidden this)
.text:00001694                 public ?Check@CMvDatabaseEx@NCab@NArchive@@QAE_NXZ
.text:00001694 ?Check@CMvDatabaseEx@NCab@NArchive@@QAE_NXZ proc near
.text:00001694
.text:00001694 var_4C          = dword ptr -4Ch
.text:00001694 var_48          = dword ptr -48h
.text:00001694 var_44          = dword ptr -44h
.text:00001694 var_40          = dword ptr -40h
.text:00001694 var_3C          = dword ptr -3Ch
.text:00001694 var_38          = dword ptr -38h
.text:00001694 var_34          = dword ptr -34h
.text:00001694 var_30          = dword ptr -30h
.text:00001694 var_2C          = dword ptr -2Ch
.text:00001694 var_28          = dword ptr -28h
.text:00001694 var_24          = dword ptr -24h
.text:00001694 var_20          = dword ptr -20h
.text:00001694 var_1C          = dword ptr -1Ch
.text:00001694 var_18          = dword ptr -18h
.text:00001694 var_14          = dword ptr -14h
.text:00001694 var_10          = dword ptr -10h
.text:00001694 var_C           = dword ptr -0Ch
.text:00001694 var_8           = dword ptr -8
.text:00001694 var_4           = dword ptr -4
.text:00001694
.text:00001694                 push    ebp
.text:00001695                 mov     ebp, esp
.text:00001697                 sub     esp, 4Ch
.text:0000169A                 push    edi
.text:0000169B                 push    ecx
.text:0000169C                 lea     edi, [ebp+var_4C]
.text:0000169F                 mov     ecx, 13h
.text:000016A4                 mov     eax, 0CCCCCCCCh
.text:000016A9                 rep stosd
.text:000016AB                 pop     ecx
.text:000016AC                 mov     [ebp+var_4], ecx
.text:000016AF                 mov     [ebp+var_8], 1
.text:000016B6                 jmp     short loc_16C1
.text:000016B8 ; ---------------------------------------------------------------------------
.text:000016B8
.text:000016B8 loc_16B8:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void):loc_1768j
.text:000016B8                 mov     eax, [ebp+var_8]
.text:000016BB                 add     eax, 1
.text:000016BE                 mov     [ebp+var_8], eax
.text:000016C1
.text:000016C1 loc_16C1:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+22j
.text:000016C1                 mov     ecx, [ebp+var_4]
.text:000016C4                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:000016C9                 cmp     [ebp+var_8], eax
.text:000016CC                 jnb     loc_176D
.text:000016D2                 mov     ecx, [ebp+var_8]
.text:000016D5                 push    ecx
.text:000016D6                 mov     ecx, [ebp+var_4]
.text:000016D9                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:000016DE                 mov     [ebp+var_C], eax
.text:000016E1                 mov     ecx, [ebp+var_C] ; this
.text:000016E4                 call    ?IsTherePrevFolder@CDatabase@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CDatabase::IsTherePrevFolder(void)
.text:000016E9                 movzx   edx, al
.text:000016EC                 test    edx, edx
.text:000016EE                 jz      short loc_1768
.text:000016F0                 mov     eax, [ebp+var_8]
.text:000016F3                 sub     eax, 1
.text:000016F6                 push    eax
.text:000016F7                 mov     ecx, [ebp+var_4]
.text:000016FA                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:000016FF                 mov     [ebp+var_10], eax
.text:00001702                 mov     ecx, [ebp+var_10]
.text:00001705                 call    ?IsEmpty@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::NCab::CFolder>::IsEmpty(void)
.text:0000170A                 movzx   ecx, al
.text:0000170D                 test    ecx, ecx
.text:0000170F                 jnz     short loc_1720
.text:00001711                 mov     ecx, [ebp+var_C]
.text:00001714                 call    ?IsEmpty@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::NCab::CFolder>::IsEmpty(void)
.text:00001719                 movzx   edx, al
.text:0000171C                 test    edx, edx
.text:0000171E                 jz      short loc_1727
.text:00001720
.text:00001720 loc_1720:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+7Bj
.text:00001720                 xor     al, al
.text:00001722                 jmp     loc_18A7
.text:00001727 ; ---------------------------------------------------------------------------
.text:00001727
.text:00001727 loc_1727:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+8Aj
.text:00001727                 mov     ecx, [ebp+var_10]
.text:0000172A                 call    ?Back@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@XZ ; CRecordVector<NArchive::NCab::CFolder>::Back(void)
.text:0000172F                 mov     [ebp+var_14], eax
.text:00001732                 mov     ecx, [ebp+var_C]
.text:00001735                 call    ?Front@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@XZ ; CRecordVector<NArchive::NCab::CFolder>::Front(void)
.text:0000173A                 mov     [ebp+var_18], eax
.text:0000173D                 mov     eax, [ebp+var_14]
.text:00001740                 movzx   ecx, byte ptr [eax+6]
.text:00001744                 mov     edx, [ebp+var_18]
.text:00001747                 movzx   eax, byte ptr [edx+6]
.text:0000174B                 cmp     ecx, eax
.text:0000174D                 jnz     short loc_1761
.text:0000174F                 mov     ecx, [ebp+var_14]
.text:00001752                 movzx   edx, byte ptr [ecx+7]
.text:00001756                 mov     eax, [ebp+var_18]
.text:00001759                 movzx   ecx, byte ptr [eax+7]
.text:0000175D                 cmp     edx, ecx
.text:0000175F                 jz      short loc_1768
.text:00001761
.text:00001761 loc_1761:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+B9j
.text:00001761                 xor     al, al
.text:00001763                 jmp     loc_18A7
.text:00001768 ; ---------------------------------------------------------------------------
.text:00001768
.text:00001768 loc_1768:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+5Aj
.text:00001768                                         ; NArchive::NCab::CMvDatabaseEx::Check(void)+CBj
.text:00001768                 jmp     loc_16B8
.text:0000176D ; ---------------------------------------------------------------------------
.text:0000176D
.text:0000176D loc_176D:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+38j
.text:0000176D                 mov     [ebp+var_1C], 0
.text:00001774                 mov     [ebp+var_24], 0
.text:0000177B                 mov     [ebp+var_20], 0
.text:00001782                 mov     [ebp+var_28], 0FFFFFFFEh
.text:00001789                 mov     [ebp+var_2C], 0
.text:00001790                 jmp     short loc_179B
.text:00001792 ; ---------------------------------------------------------------------------
.text:00001792
.text:00001792 loc_1792:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+184j
.text:00001792                                         ; NArchive::NCab::CMvDatabaseEx::Check(void)+20Cj
.text:00001792                 mov     edx, [ebp+var_2C]
.text:00001795                 add     edx, 1
.text:00001798                 mov     [ebp+var_2C], edx
.text:0000179B
.text:0000179B loc_179B:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+FCj
.text:0000179B                 mov     ecx, [ebp+var_4]
.text:0000179E                 add     ecx, 0Ch
.text:000017A1                 call    ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CMvItem>::Size(void)
.text:000017A6                 cmp     [ebp+var_2C], eax
.text:000017A9                 jnb     loc_18A5
.text:000017AF                 mov     eax, [ebp+var_2C]
.text:000017B2                 push    eax
.text:000017B3                 mov     ecx, [ebp+var_4]
.text:000017B6                 add     ecx, 0Ch
.text:000017B9                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:000017BE                 mov     [ebp+var_30], eax
.text:000017C1                 mov     ecx, [ebp+var_30]
.text:000017C4                 push    ecx             ; struct NArchive::NCab::CMvItem *
.text:000017C5                 mov     ecx, [ebp+var_4] ; this
.text:000017C8                 call    ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)
.text:000017CD                 mov     [ebp+var_34], eax
.text:000017D0                 mov     ecx, [ebp+var_4]
.text:000017D3                 add     ecx, 24h ; '$'
.text:000017D6                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:000017DB                 cmp     [ebp+var_34], eax
.text:000017DE                 jl      short loc_17E7
.text:000017E0                 xor     al, al
.text:000017E2                 jmp     loc_18A7
.text:000017E7 ; ---------------------------------------------------------------------------
.text:000017E7
.text:000017E7 loc_17E7:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+14Aj
.text:000017E7                 mov     edx, [ebp+var_30]
.text:000017EA                 mov     eax, [edx+4]
.text:000017ED                 push    eax
.text:000017EE                 mov     ecx, [ebp+var_30]
.text:000017F1                 mov     edx, [ecx]
.text:000017F3                 push    edx
.text:000017F4                 mov     ecx, [ebp+var_4]
.text:000017F7                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:000017FC                 add     eax, 0Ch
.text:000017FF                 mov     ecx, eax
.text:00001801                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00001806                 mov     [ebp+var_38], eax
.text:00001809                 mov     ecx, [ebp+var_38] ; this
.text:0000180C                 call    ?IsDir@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::IsDir(void)
.text:00001811                 movzx   eax, al
.text:00001814                 test    eax, eax
.text:00001816                 jz      short loc_181D
.text:00001818                 jmp     loc_1792
.text:0000181D ; ---------------------------------------------------------------------------
.text:0000181D
.text:0000181D loc_181D:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+182j
.text:0000181D                 mov     ecx, [ebp+var_30]
.text:00001820                 push    ecx             ; struct NArchive::NCab::CMvItem *
.text:00001821                 mov     ecx, [ebp+var_4] ; this
.text:00001824                 call    ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)
.text:00001829                 mov     [ebp+var_3C], eax
.text:0000182C                 mov     edx, [ebp+var_3C]
.text:0000182F                 cmp     edx, [ebp+var_28]
.text:00001832                 jz      short loc_183C
.text:00001834                 mov     eax, [ebp+var_3C]
.text:00001837                 mov     [ebp+var_28], eax
.text:0000183A                 jmp     short loc_1889
.text:0000183C ; ---------------------------------------------------------------------------
.text:0000183C
.text:0000183C loc_183C:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+19Ej
.text:0000183C                 mov     ecx, [ebp+var_38]
.text:0000183F                 mov     edx, [ecx+0Ch]
.text:00001842                 xor     eax, eax
.text:00001844                 mov     [ebp+var_44], edx
.text:00001847                 mov     [ebp+var_40], eax
.text:0000184A                 mov     ecx, [ebp+var_40]
.text:0000184D                 cmp     ecx, [ebp+var_20]
.text:00001850                 ja      short loc_1889
.text:00001852                 jb      short loc_185C
.text:00001854                 mov     edx, [ebp+var_44]
.text:00001857                 cmp     edx, [ebp+var_24]
.text:0000185A                 jnb     short loc_1889
.text:0000185C
.text:0000185C loc_185C:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+1BEj
.text:0000185C                 mov     eax, [ebp+var_38]
.text:0000185F                 mov     ecx, [eax+0Ch]
.text:00001862                 cmp     ecx, [ebp+var_1C]
.text:00001865                 jnz     short loc_1885
.text:00001867                 mov     ecx, [ebp+var_38] ; this
.text:0000186A                 call    ?GetEndOffset@CItem@NCab@NArchive@@QBE_KXZ ; NArchive::NCab::CItem::GetEndOffset(void)
.text:0000186F                 mov     [ebp+var_4C], eax
.text:00001872                 mov     [ebp+var_48], edx
.text:00001875                 mov     edx, [ebp+var_4C]
.text:00001878                 cmp     edx, [ebp+var_24]
.text:0000187B                 jnz     short loc_1885
.text:0000187D                 mov     eax, [ebp+var_48]
.text:00001880                 cmp     eax, [ebp+var_20]
.text:00001883                 jz      short loc_1889
.text:00001885
.text:00001885 loc_1885:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+1D1j
.text:00001885                                         ; NArchive::NCab::CMvDatabaseEx::Check(void)+1E7j
.text:00001885                 xor     al, al
.text:00001887                 jmp     short loc_18A7
.text:00001889 ; ---------------------------------------------------------------------------
.text:00001889
.text:00001889 loc_1889:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+1A6j
.text:00001889                                         ; NArchive::NCab::CMvDatabaseEx::Check(void)+1BCj ...
.text:00001889                 mov     ecx, [ebp+var_38]
.text:0000188C                 mov     edx, [ecx+0Ch]
.text:0000188F                 mov     [ebp+var_1C], edx
.text:00001892                 mov     ecx, [ebp+var_38] ; this
.text:00001895                 call    ?GetEndOffset@CItem@NCab@NArchive@@QBE_KXZ ; NArchive::NCab::CItem::GetEndOffset(void)
.text:0000189A                 mov     [ebp+var_24], eax
.text:0000189D                 mov     [ebp+var_20], edx
.text:000018A0                 jmp     loc_1792
.text:000018A5 ; ---------------------------------------------------------------------------
.text:000018A5
.text:000018A5 loc_18A5:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+115j
.text:000018A5                 mov     al, 1
.text:000018A7
.text:000018A7 loc_18A7:                               ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+8Ej
.text:000018A7                                         ; NArchive::NCab::CMvDatabaseEx::Check(void)+CFj ...
.text:000018A7                 pop     edi
.text:000018A8                 add     esp, 4Ch
.text:000018AB                 cmp     ebp, esp
.text:000018AD                 call    __RTC_CheckEsp
.text:000018B2                 mov     esp, ebp
.text:000018B4                 pop     ebp
.text:000018B5                 retn
.text:000018B5 ?Check@CMvDatabaseEx@NCab@NArchive@@QAE_NXZ endp
.text:000018B5
.text:000018B5 ; ---------------------------------------------------------------------------
.text:000018B6                 align 4
.text:000018B6 _text           ends
.text:000018B6
.xdata$x:000018B8 ; ===========================================================================
.xdata$x:000018B8
.xdata$x:000018B8 ; Segment type: Pure data
.xdata$x:000018B8 ; Segment permissions: Read
.xdata$x:000018B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000018B8                 assume cs:_xdata$x
.xdata$x:000018B8                 ;org 18B8h
.xdata$x:000018B8 ; COMDAT (pick any)
.xdata$x:000018B8                 public __TI1?AUCUnexpectedEndException@NCab@NArchive@@
.xdata$x:000018B8 __TI1?AUCUnexpectedEndException@NCab@NArchive@@ db    0
.xdata$x:000018B8                                         ; DATA XREF: NArchive::NCab::CInArchive::Skip(uint)+33o
.xdata$x:000018B8                                         ; NArchive::NCab::CInArchive::Read(uchar *,uint)+37o ...
.xdata$x:000018B9                 db    0
.xdata$x:000018BA                 db    0
.xdata$x:000018BB                 db    0
.xdata$x:000018BC                 db    0
.xdata$x:000018BD                 db    0
.xdata$x:000018BE                 db    0
.xdata$x:000018BF                 db    0
.xdata$x:000018C0                 db    0
.xdata$x:000018C1                 db    0
.xdata$x:000018C2                 db    0
.xdata$x:000018C3                 db    0
.xdata$x:000018C4                 dd offset __CTA1?AUCUnexpectedEndException@NCab@NArchive@@
.xdata$x:000018C4 _xdata$x        ends
.xdata$x:000018C4
.rtc$TMZ:000018C8 ; ===========================================================================
.rtc$TMZ:000018C8
.rtc$TMZ:000018C8 ; Segment type: Pure data
.rtc$TMZ:000018C8 ; Segment permissions: Read
.rtc$TMZ:000018C8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000018C8                 assume cs:_rtc$TMZ
.rtc$TMZ:000018C8                 ;org 18C8h
.rtc$TMZ:000018C8 ; COMDAT (pick any)
.rtc$TMZ:000018C8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000018C8 _rtc$TMZ        ends
.rtc$TMZ:000018C8
.rtc$IMZ:000018CC ; ===========================================================================
.rtc$IMZ:000018CC
.rtc$IMZ:000018CC ; Segment type: Pure data
.rtc$IMZ:000018CC ; Segment permissions: Read
.rtc$IMZ:000018CC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000018CC                 assume cs:_rtc$IMZ
.rtc$IMZ:000018CC                 ;org 18CCh
.rtc$IMZ:000018CC ; COMDAT (pick any)
.rtc$IMZ:000018CC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000018CC _rtc$IMZ        ends
.rtc$IMZ:000018CC
.xdata$x:000018D0 ; ===========================================================================
.xdata$x:000018D0
.xdata$x:000018D0 ; Segment type: Pure data
.xdata$x:000018D0 ; Segment permissions: Read
.xdata$x:000018D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000018D0                 assume cs:_xdata$x
.xdata$x:000018D0                 ;org 18D0h
.xdata$x:000018D0 ; COMDAT (pick any)
.xdata$x:000018D0                 public __CTA1?AUCUnexpectedEndException@NCab@NArchive@@
.xdata$x:000018D0 __CTA1?AUCUnexpectedEndException@NCab@NArchive@@ db    1
.xdata$x:000018D0                                         ; DATA XREF: .xdata$x:000018C4o
.xdata$x:000018D1                 db    0
.xdata$x:000018D2                 db    0
.xdata$x:000018D3                 db    0
.xdata$x:000018D4                 dd offset __CT??_R0?AUCUnexpectedEndException@NCab@NArchive@@@81
.xdata$x:000018D4 _xdata$x        ends
.xdata$x:000018D4
.xdata$x:000018D8 ; ===========================================================================
.xdata$x:000018D8
.xdata$x:000018D8 ; Segment type: Pure data
.xdata$x:000018D8 ; Segment permissions: Read
.xdata$x:000018D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000018D8                 assume cs:_xdata$x
.xdata$x:000018D8                 ;org 18D8h
.xdata$x:000018D8 ; COMDAT (pick any)
.xdata$x:000018D8                 public __CT??_R0?AUCUnexpectedEndException@NCab@NArchive@@@81
.xdata$x:000018D8 __CT??_R0?AUCUnexpectedEndException@NCab@NArchive@@@81 db    0
.xdata$x:000018D8                                         ; DATA XREF: .xdata$x:000018D4o
.xdata$x:000018D9                 db    0
.xdata$x:000018DA                 db    0
.xdata$x:000018DB                 db    0
.xdata$x:000018DC                 dd offset ??_R0?AUCUnexpectedEndException@NCab@NArchive@@@8 ; NArchive::NCab::CUnexpectedEndException `RTTI Type Descriptor'
.xdata$x:000018E0                 db    0
.xdata$x:000018E1                 db    0
.xdata$x:000018E2                 db    0
.xdata$x:000018E3                 db    0
.xdata$x:000018E4                 db 0FFh
.xdata$x:000018E5                 db 0FFh
.xdata$x:000018E6                 db 0FFh
.xdata$x:000018E7                 db 0FFh
.xdata$x:000018E8                 db    0
.xdata$x:000018E9                 db    0
.xdata$x:000018EA                 db    0
.xdata$x:000018EB                 db    0
.xdata$x:000018EC                 db    1
.xdata$x:000018ED                 db    0
.xdata$x:000018EE                 db    0
.xdata$x:000018EF                 db    0
.xdata$x:000018F0                 db    0
.xdata$x:000018F1                 db    0
.xdata$x:000018F2                 db    0
.xdata$x:000018F3                 db    0
.xdata$x:000018F3 _xdata$x        ends
.xdata$x:000018F3
.data:000018F4 ; ===========================================================================
.data:000018F4
.data:000018F4 ; Segment type: Pure data
.data:000018F4 ; Segment permissions: Read/Write
.data:000018F4 _data           segment dword public 'DATA' use32
.data:000018F4                 assume cs:_data
.data:000018F4                 ;org 18F4h
.data:000018F4 ; COMDAT (pick any)
.data:000018F4                 public ??_R0?AUCUnexpectedEndException@NCab@NArchive@@@8
.data:000018F4 ; struct NArchive::NCab::CUnexpectedEndException `RTTI Type Descriptor'
.data:000018F4 ??_R0?AUCUnexpectedEndException@NCab@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:000018F4                                         ; DATA XREF: .xdata$x:000018DCo
.data:000018F4                                         ; .xdata$x:00001A68o
.data:000018F4                                         ; const type_info::`vftable'
.data:000018F8                 db    0
.data:000018F9                 db    0
.data:000018FA                 db    0
.data:000018FB                 db    0
.data:000018FC                 db  2Eh ; .
.data:000018FD                 db  3Fh ; ?
.data:000018FE                 db  41h ; A
.data:000018FF                 db  55h ; U
.data:00001900                 db  43h ; C
.data:00001901                 db  55h ; U
.data:00001902                 db  6Eh ; n
.data:00001903                 db  65h ; e
.data:00001904                 db  78h ; x
.data:00001905                 db  70h ; p
.data:00001906                 db  65h ; e
.data:00001907                 db  63h ; c
.data:00001908                 db  74h ; t
.data:00001909                 db  65h ; e
.data:0000190A                 db  64h ; d
.data:0000190B                 db  45h ; E
.data:0000190C                 db  6Eh ; n
.data:0000190D                 db  64h ; d
.data:0000190E                 db  45h ; E
.data:0000190F                 db  78h ; x
.data:00001910                 db  63h ; c
.data:00001911                 db  65h ; e
.data:00001912                 db  70h ; p
.data:00001913                 db  74h ; t
.data:00001914                 db  69h ; i
.data:00001915                 db  6Fh ; o
.data:00001916                 db  6Eh ; n
.data:00001917                 db  40h ; @
.data:00001918                 db  4Eh ; N
.data:00001919                 db  43h ; C
.data:0000191A                 db  61h ; a
.data:0000191B                 db  62h ; b
.data:0000191C                 db  40h ; @
.data:0000191D                 db  4Eh ; N
.data:0000191E                 db  41h ; A
.data:0000191F                 db  72h ; r
.data:00001920                 db  63h ; c
.data:00001921                 db  68h ; h
.data:00001922                 db  69h ; i
.data:00001923                 db  76h ; v
.data:00001924                 db  65h ; e
.data:00001925                 db  40h ; @
.data:00001926                 db  40h ; @
.data:00001927                 db    0
.data:00001927 _data           ends
.data:00001927
.text:00001928 ; ===========================================================================
.text:00001928
.text:00001928 ; Segment type: Pure code
.text:00001928 ; Segment permissions: Read/Execute
.text:00001928 _text           segment para public 'CODE' use32
.text:00001928                 assume cs:_text
.text:00001928                 ;org 1928h
.text:00001928 ; COMDAT (pick any)
.text:00001928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001928
.text:00001928 ; =============== S U B R O U T I N E =======================================
.text:00001928
.text:00001928 ; Attributes: bp-based frame
.text:00001928
.text:00001928 ; bool __thiscall CInBufferBase::ReadByte(CInBufferBase *this, unsigned __int8 *)
.text:00001928                 public ?ReadByte@CInBufferBase@@QAE_NAAE@Z
.text:00001928 ?ReadByte@CInBufferBase@@QAE_NAAE@Z proc near
.text:00001928                                         ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+4Fp
.text:00001928                                         ; NArchive::NCab::CInArchive::ReadName(AString &)+DEp
.text:00001928
.text:00001928 var_4           = dword ptr -4
.text:00001928 arg_0           = dword ptr  8
.text:00001928
.text:00001928                 push    ebp
.text:00001929                 mov     ebp, esp
.text:0000192B                 push    ecx
.text:0000192C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001933                 mov     [ebp+var_4], ecx
.text:00001936                 mov     eax, [ebp+var_4]
.text:00001939                 mov     ecx, [ebp+var_4]
.text:0000193C                 mov     edx, [eax]
.text:0000193E                 cmp     edx, [ecx+4]
.text:00001941                 jb      short loc_1951
.text:00001943                 mov     eax, [ebp+arg_0]
.text:00001946                 push    eax             ; unsigned __int8 *
.text:00001947                 mov     ecx, [ebp+var_4] ; this
.text:0000194A                 call    ?ReadByte_FromNewBlock@CInBufferBase@@IAE_NAAE@Z ; CInBufferBase::ReadByte_FromNewBlock(uchar &)
.text:0000194F                 jmp     short loc_196C
.text:00001951 ; ---------------------------------------------------------------------------
.text:00001951
.text:00001951 loc_1951:                               ; CODE XREF: CInBufferBase::ReadByte(uchar &)+19j
.text:00001951                 mov     ecx, [ebp+var_4]
.text:00001954                 mov     edx, [ecx]
.text:00001956                 mov     eax, [ebp+arg_0]
.text:00001959                 mov     cl, [edx]
.text:0000195B                 mov     [eax], cl
.text:0000195D                 mov     edx, [ebp+var_4]
.text:00001960                 mov     eax, [edx]
.text:00001962                 add     eax, 1
.text:00001965                 mov     ecx, [ebp+var_4]
.text:00001968                 mov     [ecx], eax
.text:0000196A                 mov     al, 1
.text:0000196C
.text:0000196C loc_196C:                               ; CODE XREF: CInBufferBase::ReadByte(uchar &)+27j
.text:0000196C                 add     esp, 4
.text:0000196F                 cmp     ebp, esp
.text:00001971                 call    __RTC_CheckEsp
.text:00001976                 mov     esp, ebp
.text:00001978                 pop     ebp
.text:00001979                 retn    4
.text:00001979 ?ReadByte@CInBufferBase@@QAE_NAAE@Z endp
.text:00001979
.text:00001979 _text           ends
.text:00001979
.text$x:0000197C ; ===========================================================================
.text$x:0000197C
.text$x:0000197C ; Segment type: Pure code
.text$x:0000197C ; Segment permissions: Read/Execute
.text$x:0000197C _text$x         segment para public 'CODE' use32
.text$x:0000197C                 assume cs:_text$x
.text$x:0000197C                 ;org 197Ch
.text$x:0000197C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000197C
.text$x:0000197C ; =============== S U B R O U T I N E =======================================
.text$x:0000197C
.text$x:0000197C
.text$x:0000197C __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$0 proc near
.text$x:0000197C                                         ; DATA XREF: .xdata$x:000019F0o
.text$x:0000197C                 lea     ecx, [ebp-24h]
.text$x:0000197F                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:0000197F __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$0 endp
.text$x:0000197F
.text$x:00001984
.text$x:00001984 ; =============== S U B R O U T I N E =======================================
.text$x:00001984
.text$x:00001984
.text$x:00001984 __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$1 proc near
.text$x:00001984                                         ; DATA XREF: .xdata$x:000019F8o
.text$x:00001984                 lea     ecx, [ebp-40h]
.text$x:00001987                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00001987 __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$1 endp
.text$x:00001987
.text$x:0000198C
.text$x:0000198C ; =============== S U B R O U T I N E =======================================
.text$x:0000198C
.text$x:0000198C
.text$x:0000198C __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$2 proc near
.text$x:0000198C                                         ; DATA XREF: .xdata$x:00001A00o
.text$x:0000198C                 mov     eax, [ebp-11Ch]
.text$x:00001992                 push    eax             ; void *
.text$x:00001993                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001998                 pop     ecx
.text$x:00001999                 retn
.text$x:00001999 __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$2 endp
.text$x:00001999
.text$x:0000199A
.text$x:0000199A ; =============== S U B R O U T I N E =======================================
.text$x:0000199A
.text$x:0000199A
.text$x:0000199A __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$3 proc near
.text$x:0000199A                                         ; DATA XREF: .xdata$x:00001A08o
.text$x:0000199A                 mov     eax, [ebp-130h]
.text$x:000019A0                 push    eax             ; void *
.text$x:000019A1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000019A6                 pop     ecx
.text$x:000019A7                 retn
.text$x:000019A7 __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$3 endp
.text$x:000019A7
.text$x:000019A8
.text$x:000019A8 ; =============== S U B R O U T I N E =======================================
.text$x:000019A8
.text$x:000019A8
.text$x:000019A8 __ehhandler$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z proc near
.text$x:000019A8                                         ; DATA XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+5o
.text$x:000019A8
.text$x:000019A8 arg_4           = dword ptr  8
.text$x:000019A8
.text$x:000019A8                 mov     edx, [esp+arg_4]
.text$x:000019AC                 lea     eax, [edx+0Ch]
.text$x:000019AF                 mov     ecx, [edx-164h]
.text$x:000019B5                 xor     ecx, eax
.text$x:000019B7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000019BC                 mov     ecx, [edx-4]
.text$x:000019BF                 xor     ecx, eax
.text$x:000019C1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000019C6                 mov     eax, offset __ehfuncinfo$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z
.text$x:000019CB                 jmp     ___CxxFrameHandler3
.text$x:000019CB __ehhandler$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z endp
.text$x:000019CB
.text$x:000019D0
.text$x:000019D0 ; =============== S U B R O U T I N E =======================================
.text$x:000019D0
.text$x:000019D0
.text$x:000019D0 __ehhandler$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z proc near
.text$x:000019D0                                         ; DATA XREF: NArchive::NCab::CInArchive::Open(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+5o
.text$x:000019D0
.text$x:000019D0 arg_4           = dword ptr  8
.text$x:000019D0
.text$x:000019D0                 mov     edx, [esp+arg_4]
.text$x:000019D4                 lea     eax, [edx+0Ch]
.text$x:000019D7                 mov     ecx, [edx-30h]
.text$x:000019DA                 xor     ecx, eax
.text$x:000019DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000019E1                 mov     eax, offset __ehfuncinfo$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z
.text$x:000019E6                 jmp     ___CxxFrameHandler3
.text$x:000019E6 __ehhandler$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z endp
.text$x:000019E6
.text$x:000019E6 ; ---------------------------------------------------------------------------
.text$x:000019EB                 align 4
.text$x:000019EB _text$x         ends
.text$x:000019EB
.xdata$x:000019EC ; ===========================================================================
.xdata$x:000019EC
.xdata$x:000019EC ; Segment type: Pure data
.xdata$x:000019EC ; Segment permissions: Read
.xdata$x:000019EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000019EC                 assume cs:_xdata$x
.xdata$x:000019EC                 ;org 19ECh
.xdata$x:000019EC __unwindtable$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z db 0FFh
.xdata$x:000019EC                                         ; DATA XREF: .xdata$x:00001A14o
.xdata$x:000019ED                 db 0FFh
.xdata$x:000019EE                 db 0FFh
.xdata$x:000019EF                 db 0FFh
.xdata$x:000019F0                 dd offset __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$0
.xdata$x:000019F4                 align 8
.xdata$x:000019F8                 dd offset __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$1
.xdata$x:000019FC                 db    1
.xdata$x:000019FD                 db    0
.xdata$x:000019FE                 db    0
.xdata$x:000019FF                 db    0
.xdata$x:00001A00                 dd offset __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$2
.xdata$x:00001A04                 db    1
.xdata$x:00001A05                 db    0
.xdata$x:00001A06                 db    0
.xdata$x:00001A07                 db    0
.xdata$x:00001A08                 dd offset __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$3
.xdata$x:00001A0C __ehfuncinfo$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z db  22h ; "
.xdata$x:00001A0C                                         ; DATA XREF: __ehhandler$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z+1Eo
.xdata$x:00001A0D                 db    5
.xdata$x:00001A0E                 db  93h ; ô
.xdata$x:00001A0F                 db  19h
.xdata$x:00001A10                 db    4
.xdata$x:00001A11                 db    0
.xdata$x:00001A12                 db    0
.xdata$x:00001A13                 db    0
.xdata$x:00001A14                 dd offset __unwindtable$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z
.xdata$x:00001A18                 db    0
.xdata$x:00001A19                 db    0
.xdata$x:00001A1A                 db    0
.xdata$x:00001A1B                 db    0
.xdata$x:00001A1C                 db    0
.xdata$x:00001A1D                 db    0
.xdata$x:00001A1E                 db    0
.xdata$x:00001A1F                 db    0
.xdata$x:00001A20                 db    0
.xdata$x:00001A21                 db    0
.xdata$x:00001A22                 db    0
.xdata$x:00001A23                 db    0
.xdata$x:00001A24                 db    0
.xdata$x:00001A25                 db    0
.xdata$x:00001A26                 db    0
.xdata$x:00001A27                 db    0
.xdata$x:00001A28                 db    0
.xdata$x:00001A29                 db    0
.xdata$x:00001A2A                 db    0
.xdata$x:00001A2B                 db    0
.xdata$x:00001A2C                 db    1
.xdata$x:00001A2D                 db    0
.xdata$x:00001A2E                 db    0
.xdata$x:00001A2F                 db    0
.xdata$x:00001A30 __unwindtable$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z db 0FFh
.xdata$x:00001A30                                         ; DATA XREF: .xdata$x:00001A7Co
.xdata$x:00001A31                 db 0FFh
.xdata$x:00001A32                 db 0FFh
.xdata$x:00001A33                 db 0FFh
.xdata$x:00001A34                 db    0
.xdata$x:00001A35                 db    0
.xdata$x:00001A36                 db    0
.xdata$x:00001A37                 db    0
.xdata$x:00001A38                 db 0FFh
.xdata$x:00001A39                 db 0FFh
.xdata$x:00001A3A                 db 0FFh
.xdata$x:00001A3B                 db 0FFh
.xdata$x:00001A3C                 db    0
.xdata$x:00001A3D                 db    0
.xdata$x:00001A3E                 db    0
.xdata$x:00001A3F                 db    0
.xdata$x:00001A40 __tryblocktable$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z db    0
.xdata$x:00001A40                                         ; DATA XREF: .xdata$x:00001A84o
.xdata$x:00001A41                 db    0
.xdata$x:00001A42                 db    0
.xdata$x:00001A43                 db    0
.xdata$x:00001A44                 db    0
.xdata$x:00001A45                 db    0
.xdata$x:00001A46                 db    0
.xdata$x:00001A47                 db    0
.xdata$x:00001A48                 db    1
.xdata$x:00001A49                 db    0
.xdata$x:00001A4A                 db    0
.xdata$x:00001A4B                 db    0
.xdata$x:00001A4C                 db    2
.xdata$x:00001A4D                 db    0
.xdata$x:00001A4E                 db    0
.xdata$x:00001A4F                 db    0
.xdata$x:00001A50                 dd offset __catchsym$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$3
.xdata$x:00001A54 __catchsym$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$3 db    9
.xdata$x:00001A54                                         ; DATA XREF: .xdata$x:00001A50o
.xdata$x:00001A55                 db    0
.xdata$x:00001A56                 db    0
.xdata$x:00001A57                 db    0
.xdata$x:00001A58                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:00001A5C                 db 0E4h ; S
.xdata$x:00001A5D                 db 0FFh
.xdata$x:00001A5E                 db 0FFh
.xdata$x:00001A5F                 db 0FFh
.xdata$x:00001A60                 dd offset __catch$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$0
.xdata$x:00001A64                 db    8
.xdata$x:00001A65                 db    0
.xdata$x:00001A66                 db    0
.xdata$x:00001A67                 db    0
.xdata$x:00001A68                 dd offset ??_R0?AUCUnexpectedEndException@NCab@NArchive@@@8 ; NArchive::NCab::CUnexpectedEndException `RTTI Type Descriptor'
.xdata$x:00001A6C                 align 10h
.xdata$x:00001A70                 dd offset __catch$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z$1
.xdata$x:00001A74 __ehfuncinfo$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z db  22h ; "
.xdata$x:00001A74                                         ; DATA XREF: __ehhandler$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z+11o
.xdata$x:00001A75                 db    5
.xdata$x:00001A76                 db  93h ; ô
.xdata$x:00001A77                 db  19h
.xdata$x:00001A78                 db    2
.xdata$x:00001A79                 db    0
.xdata$x:00001A7A                 db    0
.xdata$x:00001A7B                 db    0
.xdata$x:00001A7C                 dd offset __unwindtable$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z
.xdata$x:00001A80                 db    1
.xdata$x:00001A81                 db    0
.xdata$x:00001A82                 db    0
.xdata$x:00001A83                 db    0
.xdata$x:00001A84                 dd offset __tryblocktable$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z
.xdata$x:00001A88                 db    0
.xdata$x:00001A89                 db    0
.xdata$x:00001A8A                 db    0
.xdata$x:00001A8B                 db    0
.xdata$x:00001A8C                 db    0
.xdata$x:00001A8D                 db    0
.xdata$x:00001A8E                 db    0
.xdata$x:00001A8F                 db    0
.xdata$x:00001A90                 db    0
.xdata$x:00001A91                 db    0
.xdata$x:00001A92                 db    0
.xdata$x:00001A93                 db    0
.xdata$x:00001A94                 db    1
.xdata$x:00001A95                 db    0
.xdata$x:00001A96                 db    0
.xdata$x:00001A97                 db    0
.xdata$x:00001A97 _xdata$x        ends
.xdata$x:00001A97
.text:00001A98 ; ===========================================================================
.text:00001A98
.text:00001A98 ; Segment type: Pure code
.text:00001A98 ; Segment permissions: Read/Execute
.text:00001A98 _text           segment para public 'CODE' use32
.text:00001A98                 assume cs:_text
.text:00001A98                 ;org 1A98h
.text:00001A98 ; COMDAT (pick any)
.text:00001A98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A98
.text:00001A98 ; =============== S U B R O U T I N E =======================================
.text:00001A98
.text:00001A98 ; Attributes: bp-based frame
.text:00001A98
.text:00001A98 ; void __thiscall CLimitedSequentialInStream::SetStream(CLimitedSequentialInStream *this, struct ISequentialInStream *)
.text:00001A98                 public ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
.text:00001A98 ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z proc near
.text:00001A98                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+1EAp
.text:00001A98                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+4A1p
.text:00001A98
.text:00001A98 var_4           = dword ptr -4
.text:00001A98 arg_0           = dword ptr  8
.text:00001A98
.text:00001A98                 push    ebp
.text:00001A99                 mov     ebp, esp
.text:00001A9B                 push    ecx
.text:00001A9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AA3                 mov     [ebp+var_4], ecx
.text:00001AA6                 mov     eax, [ebp+arg_0]
.text:00001AA9                 push    eax
.text:00001AAA                 mov     ecx, [ebp+var_4]
.text:00001AAD                 add     ecx, 8
.text:00001AB0                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00001AB5                 add     esp, 4
.text:00001AB8                 cmp     ebp, esp
.text:00001ABA                 call    __RTC_CheckEsp
.text:00001ABF                 mov     esp, ebp
.text:00001AC1                 pop     ebp
.text:00001AC2                 retn    4
.text:00001AC2 ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z endp
.text:00001AC2
.text:00001AC2 ; ---------------------------------------------------------------------------
.text:00001AC5                 align 4
.text:00001AC5 _text           ends
.text:00001AC5
.text:00001AC8 ; ===========================================================================
.text:00001AC8
.text:00001AC8 ; Segment type: Pure code
.text:00001AC8 ; Segment permissions: Read/Execute
.text:00001AC8 _text           segment para public 'CODE' use32
.text:00001AC8                 assume cs:_text
.text:00001AC8                 ;org 1AC8h
.text:00001AC8 ; COMDAT (pick any)
.text:00001AC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AC8
.text:00001AC8 ; =============== S U B R O U T I N E =======================================
.text:00001AC8
.text:00001AC8 ; Attributes: bp-based frame
.text:00001AC8
.text:00001AC8 ; void __thiscall CLimitedSequentialInStream::Init(CLimitedSequentialInStream *this, unsigned __int64)
.text:00001AC8                 public ?Init@CLimitedSequentialInStream@@QAEX_K@Z
.text:00001AC8 ?Init@CLimitedSequentialInStream@@QAEX_K@Z proc near
.text:00001AC8                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+1FFp
.text:00001AC8                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+4D9p ...
.text:00001AC8
.text:00001AC8 var_4           = dword ptr -4
.text:00001AC8 arg_0           = qword ptr  8
.text:00001AC8
.text:00001AC8                 push    ebp
.text:00001AC9                 mov     ebp, esp
.text:00001ACB                 push    ecx
.text:00001ACC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AD3                 mov     [ebp+var_4], ecx
.text:00001AD6                 mov     eax, [ebp+var_4]
.text:00001AD9                 mov     ecx, dword ptr [ebp+arg_0]
.text:00001ADC                 mov     [eax+10h], ecx
.text:00001ADF                 mov     edx, dword ptr [ebp+arg_0+4]
.text:00001AE2                 mov     [eax+14h], edx
.text:00001AE5                 mov     eax, [ebp+var_4]
.text:00001AE8                 mov     dword ptr [eax+18h], 0
.text:00001AEF                 mov     dword ptr [eax+1Ch], 0
.text:00001AF6                 mov     ecx, [ebp+var_4]
.text:00001AF9                 mov     byte ptr [ecx+20h], 0
.text:00001AFD                 mov     esp, ebp
.text:00001AFF                 pop     ebp
.text:00001B00                 retn    8
.text:00001B00 ?Init@CLimitedSequentialInStream@@QAEX_K@Z endp
.text:00001B00
.text:00001B00 ; ---------------------------------------------------------------------------
.text:00001B03                 align 4
.text:00001B03 _text           ends
.text:00001B03
.text:00001B04 ; ===========================================================================
.text:00001B04
.text:00001B04 ; Segment type: Pure code
.text:00001B04 ; Segment permissions: Read/Execute
.text:00001B04 _text           segment para public 'CODE' use32
.text:00001B04                 assume cs:_text
.text:00001B04                 ;org 1B04h
.text:00001B04 ; COMDAT (pick any)
.text:00001B04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B04
.text:00001B04 ; =============== S U B R O U T I N E =======================================
.text:00001B04
.text:00001B04 ; Attributes: bp-based frame
.text:00001B04
.text:00001B04 ; unsigned __int64 __thiscall CInBufferBase::GetProcessedSize(CInBufferBase *__hidden this)
.text:00001B04                 public ?GetProcessedSize@CInBufferBase@@QBE_KXZ
.text:00001B04 ?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
.text:00001B04                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+701p
.text:00001B04
.text:00001B04 var_4           = dword ptr -4
.text:00001B04
.text:00001B04                 push    ebp
.text:00001B05                 mov     ebp, esp
.text:00001B07                 push    ecx
.text:00001B08                 push    esi
.text:00001B09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B10                 mov     [ebp+var_4], ecx
.text:00001B13                 mov     eax, [ebp+var_4]
.text:00001B16                 mov     ecx, [eax+20h]
.text:00001B19                 xor     esi, esi
.text:00001B1B                 mov     edx, [ebp+var_4]
.text:00001B1E                 add     ecx, [edx+10h]
.text:00001B21                 adc     esi, [edx+14h]
.text:00001B24                 mov     eax, [ebp+var_4]
.text:00001B27                 mov     edx, [ebp+var_4]
.text:00001B2A                 mov     eax, [eax]
.text:00001B2C                 sub     eax, [edx+8]
.text:00001B2F                 cdq
.text:00001B30                 add     ecx, eax
.text:00001B32                 adc     esi, edx
.text:00001B34                 mov     eax, ecx
.text:00001B36                 mov     edx, esi
.text:00001B38                 pop     esi
.text:00001B39                 mov     esp, ebp
.text:00001B3B                 pop     ebp
.text:00001B3C                 retn
.text:00001B3C ?GetProcessedSize@CInBufferBase@@QBE_KXZ endp
.text:00001B3C
.text:00001B3C ; ---------------------------------------------------------------------------
.text:00001B3D                 align 10h
.text:00001B3D _text           ends
.text:00001B3D
.text:00001B40 ; ===========================================================================
.text:00001B40
.text:00001B40 ; Segment type: Pure code
.text:00001B40 ; Segment permissions: Read/Execute
.text:00001B40 _text           segment para public 'CODE' use32
.text:00001B40                 assume cs:_text
.text:00001B40                 ;org 1B40h
.text:00001B40 ; COMDAT (pick any)
.text:00001B40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B40
.text:00001B40 ; =============== S U B R O U T I N E =======================================
.text:00001B40
.text:00001B40 ; Attributes: bp-based frame
.text:00001B40
.text:00001B40 ; void __thiscall CInBufferBase::SetStream(CInBufferBase *this, struct ISequentialInStream *)
.text:00001B40                 public ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
.text:00001B40 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z proc near
.text:00001B40                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+568p
.text:00001B40
.text:00001B40 var_4           = dword ptr -4
.text:00001B40 arg_0           = dword ptr  8
.text:00001B40
.text:00001B40                 push    ebp
.text:00001B41                 mov     ebp, esp
.text:00001B43                 push    ecx
.text:00001B44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B4B                 mov     [ebp+var_4], ecx
.text:00001B4E                 mov     eax, [ebp+var_4]
.text:00001B51                 mov     ecx, [ebp+arg_0]
.text:00001B54                 mov     [eax+0Ch], ecx
.text:00001B57                 mov     esp, ebp
.text:00001B59                 pop     ebp
.text:00001B5A                 retn    4
.text:00001B5A ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z endp
.text:00001B5A
.text:00001B5A ; ---------------------------------------------------------------------------
.text:00001B5D                 align 10h
.text:00001B5D _text           ends
.text:00001B5D
.text:00001B60 ; ===========================================================================
.text:00001B60
.text:00001B60 ; Segment type: Pure code
.text:00001B60 ; Segment permissions: Read/Execute
.text:00001B60 _text           segment para public 'CODE' use32
.text:00001B60                 assume cs:_text
.text:00001B60                 ;org 1B60h
.text:00001B60 ; COMDAT (pick any)
.text:00001B60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B60
.text:00001B60 ; =============== S U B R O U T I N E =======================================
.text:00001B60
.text:00001B60 ; Attributes: bp-based frame
.text:00001B60
.text:00001B60 ; void __thiscall CInBufferBase::SetBuf(CInBufferBase *this, unsigned __int8 *, unsigned int, unsigned int, unsigned int)
.text:00001B60                 public ?SetBuf@CInBufferBase@@QAEXPAEIII@Z
.text:00001B60 ?SetBuf@CInBufferBase@@QAEXPAEIII@Z proc near
.text:00001B60                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+2C3p
.text:00001B60                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+53Ap
.text:00001B60
.text:00001B60 var_4           = dword ptr -4
.text:00001B60 arg_0           = dword ptr  8
.text:00001B60 arg_4           = dword ptr  0Ch
.text:00001B60 arg_8           = dword ptr  10h
.text:00001B60 arg_C           = dword ptr  14h
.text:00001B60
.text:00001B60                 push    ebp
.text:00001B61                 mov     ebp, esp
.text:00001B63                 push    ecx
.text:00001B64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B6B                 mov     [ebp+var_4], ecx
.text:00001B6E                 mov     eax, [ebp+var_4]
.text:00001B71                 mov     ecx, [ebp+arg_0]
.text:00001B74                 mov     [eax+8], ecx
.text:00001B77                 mov     edx, [ebp+var_4]
.text:00001B7A                 mov     eax, [ebp+arg_4]
.text:00001B7D                 mov     [edx+18h], eax
.text:00001B80                 mov     ecx, [ebp+var_4]
.text:00001B83                 mov     dword ptr [ecx+10h], 0
.text:00001B8A                 mov     dword ptr [ecx+14h], 0
.text:00001B91                 mov     edx, [ebp+arg_0]
.text:00001B94                 add     edx, [ebp+arg_C]
.text:00001B97                 mov     eax, [ebp+var_4]
.text:00001B9A                 mov     [eax], edx
.text:00001B9C                 mov     ecx, [ebp+arg_0]
.text:00001B9F                 add     ecx, [ebp+arg_8]
.text:00001BA2                 mov     edx, [ebp+var_4]
.text:00001BA5                 mov     [edx+4], ecx
.text:00001BA8                 mov     eax, [ebp+var_4]
.text:00001BAB                 mov     byte ptr [eax+1Ch], 0
.text:00001BAF                 mov     ecx, [ebp+var_4]
.text:00001BB2                 mov     dword ptr [ecx+20h], 0
.text:00001BB9                 mov     esp, ebp
.text:00001BBB                 pop     ebp
.text:00001BBC                 retn    10h
.text:00001BBC ?SetBuf@CInBufferBase@@QAEXPAEIII@Z endp
.text:00001BBC
.text:00001BBC ; ---------------------------------------------------------------------------
.text:00001BBF                 align 10h
.text:00001BBF _text           ends
.text:00001BBF
.text:00001BC0 ; ===========================================================================
.text:00001BC0
.text:00001BC0 ; Segment type: Pure code
.text:00001BC0 ; Segment permissions: Read/Execute
.text:00001BC0 _text           segment para public 'CODE' use32
.text:00001BC0                 assume cs:_text
.text:00001BC0                 ;org 1BC0h
.text:00001BC0 ; COMDAT (pick any)
.text:00001BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BC0
.text:00001BC0 ; =============== S U B R O U T I N E =======================================
.text:00001BC0
.text:00001BC0 ; Attributes: bp-based frame
.text:00001BC0
.text:00001BC0 ; int __thiscall NArchive::NCab::CItem::GetFolderIndex(NArchive::NCab::CItem *this, unsigned int)
.text:00001BC0                 public ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z
.text:00001BC0 ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z proc near
.text:00001BC0                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+8E8p
.text:00001BC0                                         ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)+59p
.text:00001BC0
.text:00001BC0 var_4           = dword ptr -4
.text:00001BC0 arg_0           = dword ptr  8
.text:00001BC0
.text:00001BC0                 push    ebp
.text:00001BC1                 mov     ebp, esp
.text:00001BC3                 push    ecx
.text:00001BC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001BCB                 mov     [ebp+var_4], ecx
.text:00001BCE                 mov     ecx, [ebp+var_4] ; this
.text:00001BD1                 call    ?ContinuedFromPrev@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::ContinuedFromPrev(void)
.text:00001BD6                 movzx   eax, al
.text:00001BD9                 test    eax, eax
.text:00001BDB                 jz      short loc_1BE1
.text:00001BDD                 xor     eax, eax
.text:00001BDF                 jmp     short loc_1BFE
.text:00001BE1 ; ---------------------------------------------------------------------------
.text:00001BE1
.text:00001BE1 loc_1BE1:                               ; CODE XREF: NArchive::NCab::CItem::GetFolderIndex(uint)+1Bj
.text:00001BE1                 mov     ecx, [ebp+var_4] ; this
.text:00001BE4                 call    ?ContinuedToNext@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::ContinuedToNext(void)
.text:00001BE9                 movzx   ecx, al
.text:00001BEC                 test    ecx, ecx
.text:00001BEE                 jz      short loc_1BF8
.text:00001BF0                 mov     eax, [ebp+arg_0]
.text:00001BF3                 sub     eax, 1
.text:00001BF6                 jmp     short loc_1BFE
.text:00001BF8 ; ---------------------------------------------------------------------------
.text:00001BF8
.text:00001BF8 loc_1BF8:                               ; CODE XREF: NArchive::NCab::CItem::GetFolderIndex(uint)+2Ej
.text:00001BF8                 mov     edx, [ebp+var_4]
.text:00001BFB                 mov     eax, [edx+18h]
.text:00001BFE
.text:00001BFE loc_1BFE:                               ; CODE XREF: NArchive::NCab::CItem::GetFolderIndex(uint)+1Fj
.text:00001BFE                                         ; NArchive::NCab::CItem::GetFolderIndex(uint)+36j
.text:00001BFE                 add     esp, 4
.text:00001C01                 cmp     ebp, esp
.text:00001C03                 call    __RTC_CheckEsp
.text:00001C08                 mov     esp, ebp
.text:00001C0A                 pop     ebp
.text:00001C0B                 retn    4
.text:00001C0B ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z endp
.text:00001C0B
.text:00001C0B ; ---------------------------------------------------------------------------
.text:00001C0E                 align 10h
.text:00001C0E _text           ends
.text:00001C0E
.text:00001C10 ; ===========================================================================
.text:00001C10
.text:00001C10 ; Segment type: Pure code
.text:00001C10 ; Segment permissions: Read/Execute
.text:00001C10 _text           segment para public 'CODE' use32
.text:00001C10                 assume cs:_text
.text:00001C10                 ;org 1C10h
.text:00001C10 ; COMDAT (pick any)
.text:00001C10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C10
.text:00001C10 ; =============== S U B R O U T I N E =======================================
.text:00001C10
.text:00001C10 ; Attributes: bp-based frame
.text:00001C10
.text:00001C10 ; bool __thiscall NArchive::NCab::CItem::ContinuedFromPrev(NArchive::NCab::CItem *__hidden this)
.text:00001C10                 public ?ContinuedFromPrev@CItem@NCab@NArchive@@QBE_NXZ
.text:00001C10 ?ContinuedFromPrev@CItem@NCab@NArchive@@QBE_NXZ proc near
.text:00001C10                                         ; CODE XREF: NArchive::NCab::CItem::GetFolderIndex(uint)+11p
.text:00001C10                                         ; NArchive::NCab::CDatabase::IsTherePrevFolder(void)+4Ap
.text:00001C10
.text:00001C10 var_8           = dword ptr -8
.text:00001C10 var_4           = dword ptr -4
.text:00001C10
.text:00001C10                 push    ebp
.text:00001C11                 mov     ebp, esp
.text:00001C13                 sub     esp, 8
.text:00001C16                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001C1D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C24                 mov     [ebp+var_4], ecx
.text:00001C27                 mov     eax, [ebp+var_4]
.text:00001C2A                 cmp     dword ptr [eax+18h], 0FFFDh
.text:00001C31                 jz      short loc_1C48
.text:00001C33                 mov     ecx, [ebp+var_4]
.text:00001C36                 cmp     dword ptr [ecx+18h], 0FFFFh
.text:00001C3D                 jz      short loc_1C48
.text:00001C3F                 mov     [ebp+var_8], 0
.text:00001C46                 jmp     short loc_1C4F
.text:00001C48 ; ---------------------------------------------------------------------------
.text:00001C48
.text:00001C48 loc_1C48:                               ; CODE XREF: NArchive::NCab::CItem::ContinuedFromPrev(void)+21j
.text:00001C48                                         ; NArchive::NCab::CItem::ContinuedFromPrev(void)+2Dj
.text:00001C48                 mov     [ebp+var_8], 1
.text:00001C4F
.text:00001C4F loc_1C4F:                               ; CODE XREF: NArchive::NCab::CItem::ContinuedFromPrev(void)+36j
.text:00001C4F                 mov     al, byte ptr [ebp+var_8]
.text:00001C52                 mov     esp, ebp
.text:00001C54                 pop     ebp
.text:00001C55                 retn
.text:00001C55 ?ContinuedFromPrev@CItem@NCab@NArchive@@QBE_NXZ endp
.text:00001C55
.text:00001C55 ; ---------------------------------------------------------------------------
.text:00001C56                 align 4
.text:00001C56 _text           ends
.text:00001C56
.text:00001C58 ; ===========================================================================
.text:00001C58
.text:00001C58 ; Segment type: Pure code
.text:00001C58 ; Segment permissions: Read/Execute
.text:00001C58 _text           segment para public 'CODE' use32
.text:00001C58                 assume cs:_text
.text:00001C58                 ;org 1C58h
.text:00001C58 ; COMDAT (pick any)
.text:00001C58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C58
.text:00001C58 ; =============== S U B R O U T I N E =======================================
.text:00001C58
.text:00001C58 ; Attributes: bp-based frame
.text:00001C58
.text:00001C58 ; bool __thiscall NArchive::NCab::CItem::ContinuedToNext(NArchive::NCab::CItem *__hidden this)
.text:00001C58                 public ?ContinuedToNext@CItem@NCab@NArchive@@QBE_NXZ
.text:00001C58 ?ContinuedToNext@CItem@NCab@NArchive@@QBE_NXZ proc near
.text:00001C58                                         ; CODE XREF: NArchive::NCab::CItem::GetFolderIndex(uint)+24p
.text:00001C58
.text:00001C58 var_8           = dword ptr -8
.text:00001C58 var_4           = dword ptr -4
.text:00001C58
.text:00001C58                 push    ebp
.text:00001C59                 mov     ebp, esp
.text:00001C5B                 sub     esp, 8
.text:00001C5E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001C65                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C6C                 mov     [ebp+var_4], ecx
.text:00001C6F                 mov     eax, [ebp+var_4]
.text:00001C72                 cmp     dword ptr [eax+18h], 0FFFEh
.text:00001C79                 jz      short loc_1C90
.text:00001C7B                 mov     ecx, [ebp+var_4]
.text:00001C7E                 cmp     dword ptr [ecx+18h], 0FFFFh
.text:00001C85                 jz      short loc_1C90
.text:00001C87                 mov     [ebp+var_8], 0
.text:00001C8E                 jmp     short loc_1C97
.text:00001C90 ; ---------------------------------------------------------------------------
.text:00001C90
.text:00001C90 loc_1C90:                               ; CODE XREF: NArchive::NCab::CItem::ContinuedToNext(void)+21j
.text:00001C90                                         ; NArchive::NCab::CItem::ContinuedToNext(void)+2Dj
.text:00001C90                 mov     [ebp+var_8], 1
.text:00001C97
.text:00001C97 loc_1C97:                               ; CODE XREF: NArchive::NCab::CItem::ContinuedToNext(void)+36j
.text:00001C97                 mov     al, byte ptr [ebp+var_8]
.text:00001C9A                 mov     esp, ebp
.text:00001C9C                 pop     ebp
.text:00001C9D                 retn
.text:00001C9D ?ContinuedToNext@CItem@NCab@NArchive@@QBE_NXZ endp
.text:00001C9D
.text:00001C9D ; ---------------------------------------------------------------------------
.text:00001C9E                 align 10h
.text:00001C9E _text           ends
.text:00001C9E
.text:00001CA0 ; ===========================================================================
.text:00001CA0
.text:00001CA0 ; Segment type: Pure code
.text:00001CA0 ; Segment permissions: Read/Execute
.text:00001CA0 _text           segment para public 'CODE' use32
.text:00001CA0                 assume cs:_text
.text:00001CA0                 ;org 1CA0h
.text:00001CA0 ; COMDAT (pick any)
.text:00001CA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001CA0
.text:00001CA0 ; =============== S U B R O U T I N E =======================================
.text:00001CA0
.text:00001CA0 ; Attributes: bp-based frame
.text:00001CA0
.text:00001CA0 ; bool __thiscall NArchive::NCab::CArchInfo::ReserveBlockPresent(NArchive::NCab::CArchInfo *__hidden this)
.text:00001CA0                 public ?ReserveBlockPresent@CArchInfo@NCab@NArchive@@QBE_NXZ
.text:00001CA0 ?ReserveBlockPresent@CArchInfo@NCab@NArchive@@QBE_NXZ proc near
.text:00001CA0                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+58Fp
.text:00001CA0                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+5DAp
.text:00001CA0
.text:00001CA0 var_4           = dword ptr -4
.text:00001CA0
.text:00001CA0                 push    ebp
.text:00001CA1                 mov     ebp, esp
.text:00001CA3                 push    ecx
.text:00001CA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001CAB                 mov     [ebp+var_4], ecx
.text:00001CAE                 mov     eax, [ebp+var_4]
.text:00001CB1                 mov     eax, [eax+0Ch]
.text:00001CB4                 and     eax, 4
.text:00001CB7                 neg     eax
.text:00001CB9                 sbb     eax, eax
.text:00001CBB                 neg     eax
.text:00001CBD                 mov     esp, ebp
.text:00001CBF                 pop     ebp
.text:00001CC0                 retn
.text:00001CC0 ?ReserveBlockPresent@CArchInfo@NCab@NArchive@@QBE_NXZ endp
.text:00001CC0
.text:00001CC0 ; ---------------------------------------------------------------------------
.text:00001CC1                 align 4
.text:00001CC1 _text           ends
.text:00001CC1
.text:00001CC4 ; ===========================================================================
.text:00001CC4
.text:00001CC4 ; Segment type: Pure code
.text:00001CC4 ; Segment permissions: Read/Execute
.text:00001CC4 _text           segment para public 'CODE' use32
.text:00001CC4                 assume cs:_text
.text:00001CC4                 ;org 1CC4h
.text:00001CC4 ; COMDAT (pick any)
.text:00001CC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001CC4
.text:00001CC4 ; =============== S U B R O U T I N E =======================================
.text:00001CC4
.text:00001CC4 ; Attributes: bp-based frame
.text:00001CC4
.text:00001CC4 ; bool __thiscall NArchive::NCab::CArchInfo::IsTherePrev(NArchive::NCab::CArchInfo *__hidden this)
.text:00001CC4                 public ?IsTherePrev@CArchInfo@NCab@NArchive@@QBE_NXZ
.text:00001CC4 ?IsTherePrev@CArchInfo@NCab@NArchive@@QBE_NXZ proc near
.text:00001CC4                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+61Fp
.text:00001CC4
.text:00001CC4 var_4           = dword ptr -4
.text:00001CC4
.text:00001CC4                 push    ebp
.text:00001CC5                 mov     ebp, esp
.text:00001CC7                 push    ecx
.text:00001CC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001CCF                 mov     [ebp+var_4], ecx
.text:00001CD2                 mov     eax, [ebp+var_4]
.text:00001CD5                 mov     eax, [eax+0Ch]
.text:00001CD8                 and     eax, 1
.text:00001CDB                 neg     eax
.text:00001CDD                 sbb     eax, eax
.text:00001CDF                 neg     eax
.text:00001CE1                 mov     esp, ebp
.text:00001CE3                 pop     ebp
.text:00001CE4                 retn
.text:00001CE4 ?IsTherePrev@CArchInfo@NCab@NArchive@@QBE_NXZ endp
.text:00001CE4
.text:00001CE4 ; ---------------------------------------------------------------------------
.text:00001CE5                 align 4
.text:00001CE5 _text           ends
.text:00001CE5
.text:00001CE8 ; ===========================================================================
.text:00001CE8
.text:00001CE8 ; Segment type: Pure code
.text:00001CE8 ; Segment permissions: Read/Execute
.text:00001CE8 _text           segment para public 'CODE' use32
.text:00001CE8                 assume cs:_text
.text:00001CE8                 ;org 1CE8h
.text:00001CE8 ; COMDAT (pick any)
.text:00001CE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001CE8
.text:00001CE8 ; =============== S U B R O U T I N E =======================================
.text:00001CE8
.text:00001CE8 ; Attributes: bp-based frame
.text:00001CE8
.text:00001CE8 ; bool __thiscall NArchive::NCab::CArchInfo::IsThereNext(NArchive::NCab::CArchInfo *__hidden this)
.text:00001CE8                 public ?IsThereNext@CArchInfo@NCab@NArchive@@QBE_NXZ
.text:00001CE8 ?IsThereNext@CArchInfo@NCab@NArchive@@QBE_NXZ proc near
.text:00001CE8                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+63Dp
.text:00001CE8
.text:00001CE8 var_4           = dword ptr -4
.text:00001CE8
.text:00001CE8                 push    ebp
.text:00001CE9                 mov     ebp, esp
.text:00001CEB                 push    ecx
.text:00001CEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001CF3                 mov     [ebp+var_4], ecx
.text:00001CF6                 mov     eax, [ebp+var_4]
.text:00001CF9                 mov     eax, [eax+0Ch]
.text:00001CFC                 and     eax, 2
.text:00001CFF                 neg     eax
.text:00001D01                 sbb     eax, eax
.text:00001D03                 neg     eax
.text:00001D05                 mov     esp, ebp
.text:00001D07                 pop     ebp
.text:00001D08                 retn
.text:00001D08 ?IsThereNext@CArchInfo@NCab@NArchive@@QBE_NXZ endp
.text:00001D08
.text:00001D08 ; ---------------------------------------------------------------------------
.text:00001D09                 align 4
.text:00001D09 _text           ends
.text:00001D09
.text:00001D0C ; ===========================================================================
.text:00001D0C
.text:00001D0C ; Segment type: Pure code
.text:00001D0C ; Segment permissions: Read/Execute
.text:00001D0C _text           segment para public 'CODE' use32
.text:00001D0C                 assume cs:_text
.text:00001D0C                 ;org 1D0Ch
.text:00001D0C ; COMDAT (pick any)
.text:00001D0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001D0C
.text:00001D0C ; =============== S U B R O U T I N E =======================================
.text:00001D0C
.text:00001D0C ; Attributes: bp-based frame
.text:00001D0C
.text:00001D0C ; void __thiscall NArchive::NCab::CDatabase::Clear(NArchive::NCab::CDatabase *__hidden this)
.text:00001D0C                 public ?Clear@CDatabase@NCab@NArchive@@QAEXXZ
.text:00001D0C ?Clear@CDatabase@NCab@NArchive@@QAEXXZ proc near
.text:00001D0C                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+63p
.text:00001D0C
.text:00001D0C var_4           = dword ptr -4
.text:00001D0C
.text:00001D0C                 push    ebp
.text:00001D0D                 mov     ebp, esp
.text:00001D0F                 push    ecx
.text:00001D10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D17                 mov     [ebp+var_4], ecx
.text:00001D1A                 mov     ecx, [ebp+var_4]
.text:00001D1D                 add     ecx, 20h ; ' '  ; this
.text:00001D20                 call    ?Clear@CArchInfo@NCab@NArchive@@QAEXXZ ; NArchive::NCab::CArchInfo::Clear(void)
.text:00001D25                 mov     ecx, [ebp+var_4]
.text:00001D28                 call    ?Clear@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::NCab::CFolder>::Clear(void)
.text:00001D2D                 mov     ecx, [ebp+var_4]
.text:00001D30                 add     ecx, 0Ch
.text:00001D33                 call    ?Clear@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NCab::CItem>::Clear(void)
.text:00001D38                 add     esp, 4
.text:00001D3B                 cmp     ebp, esp
.text:00001D3D                 call    __RTC_CheckEsp
.text:00001D42                 mov     esp, ebp
.text:00001D44                 pop     ebp
.text:00001D45                 retn
.text:00001D45 ?Clear@CDatabase@NCab@NArchive@@QAEXXZ endp
.text:00001D45
.text:00001D45 ; ---------------------------------------------------------------------------
.text:00001D46                 align 4
.text:00001D46 _text           ends
.text:00001D46
.text:00001D48 ; ===========================================================================
.text:00001D48
.text:00001D48 ; Segment type: Pure code
.text:00001D48 ; Segment permissions: Read/Execute
.text:00001D48 _text           segment para public 'CODE' use32
.text:00001D48                 assume cs:_text
.text:00001D48                 ;org 1D48h
.text:00001D48 ; COMDAT (pick any)
.text:00001D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001D48
.text:00001D48 ; =============== S U B R O U T I N E =======================================
.text:00001D48
.text:00001D48 ; Attributes: bp-based frame
.text:00001D48
.text:00001D48 ; void __thiscall NArchive::NCab::CArchInfo::Clear(NArchive::NCab::CArchInfo *__hidden this)
.text:00001D48                 public ?Clear@CArchInfo@NCab@NArchive@@QAEXXZ
.text:00001D48 ?Clear@CArchInfo@NCab@NArchive@@QAEXXZ proc near
.text:00001D48                                         ; CODE XREF: NArchive::NCab::CDatabase::Clear(void)+14p
.text:00001D48
.text:00001D48 var_4           = dword ptr -4
.text:00001D48
.text:00001D48                 push    ebp
.text:00001D49                 mov     ebp, esp
.text:00001D4B                 push    ecx
.text:00001D4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D53                 mov     [ebp+var_4], ecx
.text:00001D56                 xor     eax, eax
.text:00001D58                 mov     ecx, [ebp+var_4]
.text:00001D5B                 mov     [ecx+18h], ax
.text:00001D5F                 mov     edx, [ebp+var_4]
.text:00001D62                 mov     byte ptr [edx+1Ah], 0
.text:00001D66                 mov     eax, [ebp+var_4]
.text:00001D69                 mov     byte ptr [eax+1Bh], 0
.text:00001D6D                 mov     ecx, [ebp+var_4]
.text:00001D70                 add     ecx, 1Ch        ; this
.text:00001D73                 call    ?Clear@COtherArc@NCab@NArchive@@QAEXXZ ; NArchive::NCab::COtherArc::Clear(void)
.text:00001D78                 mov     ecx, [ebp+var_4]
.text:00001D7B                 add     ecx, 34h ; '4'  ; this
.text:00001D7E                 call    ?Clear@COtherArc@NCab@NArchive@@QAEXXZ ; NArchive::NCab::COtherArc::Clear(void)
.text:00001D83                 add     esp, 4
.text:00001D86                 cmp     ebp, esp
.text:00001D88                 call    __RTC_CheckEsp
.text:00001D8D                 mov     esp, ebp
.text:00001D8F                 pop     ebp
.text:00001D90                 retn
.text:00001D90 ?Clear@CArchInfo@NCab@NArchive@@QAEXXZ endp
.text:00001D90
.text:00001D90 ; ---------------------------------------------------------------------------
.text:00001D91                 align 4
.text:00001D91 _text           ends
.text:00001D91
.text:00001D94 ; ===========================================================================
.text:00001D94
.text:00001D94 ; Segment type: Pure code
.text:00001D94 ; Segment permissions: Read/Execute
.text:00001D94 _text           segment para public 'CODE' use32
.text:00001D94                 assume cs:_text
.text:00001D94                 ;org 1D94h
.text:00001D94 ; COMDAT (pick any)
.text:00001D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001D94
.text:00001D94 ; =============== S U B R O U T I N E =======================================
.text:00001D94
.text:00001D94 ; Attributes: bp-based frame
.text:00001D94
.text:00001D94 ; void __thiscall NArchive::NCab::COtherArc::Clear(NArchive::NCab::COtherArc *__hidden this)
.text:00001D94                 public ?Clear@COtherArc@NCab@NArchive@@QAEXXZ
.text:00001D94 ?Clear@COtherArc@NCab@NArchive@@QAEXXZ proc near
.text:00001D94                                         ; CODE XREF: NArchive::NCab::CArchInfo::Clear(void)+2Bp
.text:00001D94                                         ; NArchive::NCab::CArchInfo::Clear(void)+36p
.text:00001D94
.text:00001D94 var_4           = dword ptr -4
.text:00001D94
.text:00001D94                 push    ebp
.text:00001D95                 mov     ebp, esp
.text:00001D97                 push    ecx
.text:00001D98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D9F                 mov     [ebp+var_4], ecx
.text:00001DA2                 mov     ecx, [ebp+var_4] ; this
.text:00001DA5                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00001DAA                 mov     ecx, [ebp+var_4]
.text:00001DAD                 add     ecx, 0Ch        ; this
.text:00001DB0                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00001DB5                 add     esp, 4
.text:00001DB8                 cmp     ebp, esp
.text:00001DBA                 call    __RTC_CheckEsp
.text:00001DBF                 mov     esp, ebp
.text:00001DC1                 pop     ebp
.text:00001DC2                 retn
.text:00001DC2 ?Clear@COtherArc@NCab@NArchive@@QAEXXZ endp
.text:00001DC2
.text:00001DC2 ; ---------------------------------------------------------------------------
.text:00001DC3                 align 4
.text:00001DC3 _text           ends
.text:00001DC3
.text:00001DC4 ; ===========================================================================
.text:00001DC4
.text:00001DC4 ; Segment type: Pure code
.text:00001DC4 ; Segment permissions: Read/Execute
.text:00001DC4 _text           segment para public 'CODE' use32
.text:00001DC4                 assume cs:_text
.text:00001DC4                 ;org 1DC4h
.text:00001DC4 ; COMDAT (pick any)
.text:00001DC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001DC4
.text:00001DC4 ; =============== S U B R O U T I N E =======================================
.text:00001DC4
.text:00001DC4 ; Attributes: bp-based frame
.text:00001DC4
.text:00001DC4 ; void __thiscall AString::Empty(AString *__hidden this)
.text:00001DC4                 public ?Empty@AString@@QAEXXZ
.text:00001DC4 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: NArchive::NCab::COtherArc::Clear(void)+11p
.text:00001DC4                                         ; NArchive::NCab::COtherArc::Clear(void)+1Cp
.text:00001DC4
.text:00001DC4 var_4           = dword ptr -4
.text:00001DC4
.text:00001DC4                 push    ebp
.text:00001DC5                 mov     ebp, esp
.text:00001DC7                 push    ecx
.text:00001DC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001DCF                 mov     [ebp+var_4], ecx
.text:00001DD2                 mov     eax, [ebp+var_4]
.text:00001DD5                 mov     dword ptr [eax+4], 0
.text:00001DDC                 mov     ecx, [ebp+var_4]
.text:00001DDF                 mov     edx, [ecx]
.text:00001DE1                 mov     byte ptr [edx], 0
.text:00001DE4                 mov     esp, ebp
.text:00001DE6                 pop     ebp
.text:00001DE7                 retn
.text:00001DE7 ?Empty@AString@@QAEXXZ endp
.text:00001DE7
.text:00001DE7 _text           ends
.text:00001DE7
.text:00001DE8 ; ===========================================================================
.text:00001DE8
.text:00001DE8 ; Segment type: Pure code
.text:00001DE8 ; Segment permissions: Read/Execute
.text:00001DE8 _text           segment para public 'CODE' use32
.text:00001DE8                 assume cs:_text
.text:00001DE8                 ;org 1DE8h
.text:00001DE8 ; COMDAT (pick any)
.text:00001DE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001DE8
.text:00001DE8 ; =============== S U B R O U T I N E =======================================
.text:00001DE8
.text:00001DE8 ; Attributes: bp-based frame
.text:00001DE8
.text:00001DE8 ; unsigned int __thiscall NArchive::NCab::CSignatureFinder::GetTotalCapacity(NArchive::NCab::CSignatureFinder *this, unsigned int, unsigned int)
.text:00001DE8                 public ?GetTotalCapacity@CSignatureFinder@NCab@NArchive@@QAEIII@Z
.text:00001DE8 ?GetTotalCapacity@CSignatureFinder@NCab@NArchive@@QAEIII@Z proc near
.text:00001DE8                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+35Ap
.text:00001DE8
.text:00001DE8 var_4           = dword ptr -4
.text:00001DE8 arg_0           = dword ptr  8
.text:00001DE8 arg_4           = dword ptr  0Ch
.text:00001DE8
.text:00001DE8                 push    ebp
.text:00001DE9                 mov     ebp, esp
.text:00001DEB                 push    ecx
.text:00001DEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001DF3                 mov     [ebp+var_4], ecx
.text:00001DF6                 mov     eax, [ebp+var_4]
.text:00001DF9                 mov     ecx, [ebp+arg_4]
.text:00001DFC                 mov     [eax+14h], ecx
.text:00001DFF                 mov     edx, [ebp+var_4]
.text:00001E02                 mov     dword ptr [edx+18h], 20h ; ' '
.text:00001E09                 jmp     short loc_1E19
.text:00001E0B ; ---------------------------------------------------------------------------
.text:00001E0B
.text:00001E0B loc_1E0B:                               ; CODE XREF: NArchive::NCab::CSignatureFinder::GetTotalCapacity(uint,uint)+3Fj
.text:00001E0B                 mov     eax, [ebp+var_4]
.text:00001E0E                 mov     ecx, [eax+18h]
.text:00001E11                 shl     ecx, 1
.text:00001E13                 mov     edx, [ebp+var_4]
.text:00001E16                 mov     [edx+18h], ecx
.text:00001E19
.text:00001E19 loc_1E19:                               ; CODE XREF: NArchive::NCab::CSignatureFinder::GetTotalCapacity(uint,uint)+21j
.text:00001E19                 mov     eax, [ebp+var_4]
.text:00001E1C                 mov     ecx, [ebp+var_4]
.text:00001E1F                 mov     edx, [eax+18h]
.text:00001E22                 cmp     edx, [ecx+14h]
.text:00001E25                 jnb     short loc_1E29
.text:00001E27                 jmp     short loc_1E0B
.text:00001E29 ; ---------------------------------------------------------------------------
.text:00001E29
.text:00001E29 loc_1E29:                               ; CODE XREF: NArchive::NCab::CSignatureFinder::GetTotalCapacity(uint,uint)+3Dj
.text:00001E29                 mov     eax, [ebp+var_4]
.text:00001E2C                 mov     ecx, [ebp+arg_0]
.text:00001E2F                 add     ecx, [eax+18h]
.text:00001E32                 mov     edx, [ebp+var_4]
.text:00001E35                 mov     [edx+1Ch], ecx
.text:00001E38                 mov     eax, [ebp+var_4]
.text:00001E3B                 mov     eax, [eax+1Ch]
.text:00001E3E                 add     eax, 10h
.text:00001E41                 mov     esp, ebp
.text:00001E43                 pop     ebp
.text:00001E44                 retn    8
.text:00001E44 ?GetTotalCapacity@CSignatureFinder@NCab@NArchive@@QAEIII@Z endp
.text:00001E44
.text:00001E44 ; ---------------------------------------------------------------------------
.text:00001E47                 align 4
.text:00001E47 _text           ends
.text:00001E47
.text:00001E48 ; ===========================================================================
.text:00001E48
.text:00001E48 ; Segment type: Pure code
.text:00001E48 ; Segment permissions: Read/Execute
.text:00001E48 _text           segment para public 'CODE' use32
.text:00001E48                 assume cs:_text
.text:00001E48                 ;org 1E48h
.text:00001E48 ; COMDAT (pick any)
.text:00001E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001E48
.text:00001E48 ; =============== S U B R O U T I N E =======================================
.text:00001E48
.text:00001E48 ; Attributes: bp-based frame
.text:00001E48
.text:00001E48 ; public: __thiscall CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:00001E48                 public ??0CLimitedSequentialInStream@@QAE@XZ
.text:00001E48 ??0CLimitedSequentialInStream@@QAE@XZ proc near
.text:00001E48                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+19Fp
.text:00001E48                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+462p
.text:00001E48
.text:00001E48 var_4           = dword ptr -4
.text:00001E48
.text:00001E48                 push    ebp
.text:00001E49                 mov     ebp, esp
.text:00001E4B                 push    ecx
.text:00001E4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E53                 mov     [ebp+var_4], ecx
.text:00001E56                 mov     ecx, [ebp+var_4] ; this
.text:00001E59                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00001E5E                 mov     ecx, [ebp+var_4]
.text:00001E61                 add     ecx, 4          ; this
.text:00001E64                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00001E69                 mov     eax, [ebp+var_4]
.text:00001E6C                 mov     dword ptr [eax], offset ??_7CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`vftable'
.text:00001E72                 mov     ecx, [ebp+var_4]
.text:00001E75                 add     ecx, 8
.text:00001E78                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00001E7D                 mov     eax, [ebp+var_4]
.text:00001E80                 add     esp, 4
.text:00001E83                 cmp     ebp, esp
.text:00001E85                 call    __RTC_CheckEsp
.text:00001E8A                 mov     esp, ebp
.text:00001E8C                 pop     ebp
.text:00001E8D                 retn
.text:00001E8D ??0CLimitedSequentialInStream@@QAE@XZ endp
.text:00001E8D
.text:00001E8D ; ---------------------------------------------------------------------------
.text:00001E8E                 align 10h
.text:00001E8E _text           ends
.text:00001E8E
.rdata:00001E90 ; ===========================================================================
.rdata:00001E90
.rdata:00001E90 ; Segment type: Pure data
.rdata:00001E90 ; Segment permissions: Read
.rdata:00001E90 _rdata          segment dword public 'DATA' use32
.rdata:00001E90                 assume cs:_rdata
.rdata:00001E90                 ;org 1E90h
.rdata:00001E90 ; COMDAT (pick largest)
.rdata:00001E90                 dd offset ??_R4CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata:00001E94                 public ??_7CLimitedSequentialInStream@@6B@
.rdata:00001E94 ; const CLimitedSequentialInStream::`vftable'
.rdata:00001E94 ??_7CLimitedSequentialInStream@@6B@ dd offset ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00001E94                                         ; DATA XREF: CLimitedSequentialInStream::CLimitedSequentialInStream(void)+24o
.rdata:00001E94                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)
.rdata:00001E98                 dd offset ?AddRef@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::AddRef(void)
.rdata:00001E9C                 dd offset ?Release@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::Release(void)
.rdata:00001EA0                 dd offset ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z ; CLimitedSequentialInStream::Read(void *,uint,uint *)
.rdata:00001EA0 _rdata          ends
.rdata:00001EA0
.rdata$r:00001EA4 ; ===========================================================================
.rdata$r:00001EA4
.rdata$r:00001EA4 ; Segment type: Pure data
.rdata$r:00001EA4 ; Segment permissions: Read
.rdata$r:00001EA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EA4                 assume cs:_rdata$r
.rdata$r:00001EA4                 ;org 1EA4h
.rdata$r:00001EA4 ; COMDAT (pick any)
.rdata$r:00001EA4                 public ??_R4CLimitedSequentialInStream@@6B@
.rdata$r:00001EA4 ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00001EA4 ??_R4CLimitedSequentialInStream@@6B@ db    0 ; DATA XREF: .rdata:00001E90o
.rdata$r:00001EA5                 db    0
.rdata$r:00001EA6                 db    0
.rdata$r:00001EA7                 db    0
.rdata$r:00001EA8                 db    0
.rdata$r:00001EA9                 db    0
.rdata$r:00001EAA                 db    0
.rdata$r:00001EAB                 db    0
.rdata$r:00001EAC                 db    0
.rdata$r:00001EAD                 db    0
.rdata$r:00001EAE                 db    0
.rdata$r:00001EAF                 db    0
.rdata$r:00001EB0                 dd offset ??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:00001EB4                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001EB4 _rdata$r        ends
.rdata$r:00001EB4
.data:00001EB8 ; ===========================================================================
.data:00001EB8
.data:00001EB8 ; Segment type: Pure data
.data:00001EB8 ; Segment permissions: Read/Write
.data:00001EB8 _data           segment dword public 'DATA' use32
.data:00001EB8                 assume cs:_data
.data:00001EB8                 ;org 1EB8h
.data:00001EB8 ; COMDAT (pick any)
.data:00001EB8                 public ??_R0?AVCLimitedSequentialInStream@@@8
.data:00001EB8 ; class CLimitedSequentialInStream `RTTI Type Descriptor'
.data:00001EB8 ??_R0?AVCLimitedSequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00001EB8                                         ; DATA XREF: .rdata$r:00001EB0o
.data:00001EB8                                         ; .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001EB8                                         ; const type_info::`vftable'
.data:00001EBC                 align 10h
.data:00001EC0 a_?avclimitedse db '.?AVCLimitedSequentialInStream@@',0
.data:00001EE1                 align 4
.data:00001EE1 _data           ends
.data:00001EE1
.rdata$r:00001EE4 ; ===========================================================================
.rdata$r:00001EE4
.rdata$r:00001EE4 ; Segment type: Pure data
.rdata$r:00001EE4 ; Segment permissions: Read
.rdata$r:00001EE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EE4                 assume cs:_rdata$r
.rdata$r:00001EE4                 ;org 1EE4h
.rdata$r:00001EE4 ; COMDAT (pick any)
.rdata$r:00001EE4                 public ??_R3CLimitedSequentialInStream@@8
.rdata$r:00001EE4 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001EE4 ??_R3CLimitedSequentialInStream@@8 db    0 ; DATA XREF: .rdata$r:00001EB4o
.rdata$r:00001EE4                                         ; .rdata$r:00001F20o
.rdata$r:00001EE5                 db    0
.rdata$r:00001EE6                 db    0
.rdata$r:00001EE7                 db    0
.rdata$r:00001EE8                 db    1
.rdata$r:00001EE9                 db    0
.rdata$r:00001EEA                 db    0
.rdata$r:00001EEB                 db    0
.rdata$r:00001EEC                 db    4
.rdata$r:00001EED                 db    0
.rdata$r:00001EEE                 db    0
.rdata$r:00001EEF                 db    0
.rdata$r:00001EF0                 dd offset ??_R2CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:00001EF0 _rdata$r        ends
.rdata$r:00001EF0
.rdata$r:00001EF4 ; ===========================================================================
.rdata$r:00001EF4
.rdata$r:00001EF4 ; Segment type: Pure data
.rdata$r:00001EF4 ; Segment permissions: Read
.rdata$r:00001EF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EF4                 assume cs:_rdata$r
.rdata$r:00001EF4                 ;org 1EF4h
.rdata$r:00001EF4 ; COMDAT (pick any)
.rdata$r:00001EF4                 public ??_R2CLimitedSequentialInStream@@8
.rdata$r:00001EF4 ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:00001EF4 ??_R2CLimitedSequentialInStream@@8 dd offset ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:00001EF4                                         ; DATA XREF: .rdata$r:00001EF0o
.rdata$r:00001EF4                                         ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001EF8                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001EFC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F00                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00001F04                 db    0
.rdata$r:00001F05                 align 4
.rdata$r:00001F05 _rdata$r        ends
.rdata$r:00001F05
.rdata$r:00001F08 ; ===========================================================================
.rdata$r:00001F08
.rdata$r:00001F08 ; Segment type: Pure data
.rdata$r:00001F08 ; Segment permissions: Read
.rdata$r:00001F08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F08                 assume cs:_rdata$r
.rdata$r:00001F08                 ;org 1F08h
.rdata$r:00001F08 ; COMDAT (pick any)
.rdata$r:00001F08                 public ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:00001F08 ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001F08 ??_R1A@?0A@EA@CLimitedSequentialInStream@@8 dd offset ??_R0?AVCLimitedSequentialInStream@@@8
.rdata$r:00001F08                                         ; DATA XREF: .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Array'o
.rdata$r:00001F08                                         ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:00001F0C                 db    3
.rdata$r:00001F0D                 db    0
.rdata$r:00001F0E                 db    0
.rdata$r:00001F0F                 db    0
.rdata$r:00001F10                 db    0
.rdata$r:00001F11                 db    0
.rdata$r:00001F12                 db    0
.rdata$r:00001F13                 db    0
.rdata$r:00001F14                 db 0FFh
.rdata$r:00001F15                 db 0FFh
.rdata$r:00001F16                 db 0FFh
.rdata$r:00001F17                 db 0FFh
.rdata$r:00001F18                 db    0
.rdata$r:00001F19                 db    0
.rdata$r:00001F1A                 db    0
.rdata$r:00001F1B                 db    0
.rdata$r:00001F1C                 db  40h ; @
.rdata$r:00001F1D                 db    0
.rdata$r:00001F1E                 db    0
.rdata$r:00001F1F                 db    0
.rdata$r:00001F20                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F20 _rdata$r        ends
.rdata$r:00001F20
.rdata$r:00001F24 ; ===========================================================================
.rdata$r:00001F24
.rdata$r:00001F24 ; Segment type: Pure data
.rdata$r:00001F24 ; Segment permissions: Read
.rdata$r:00001F24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F24                 assume cs:_rdata$r
.rdata$r:00001F24                 ;org 1F24h
.rdata$r:00001F24 ; COMDAT (pick any)
.rdata$r:00001F24                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00001F24 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001F24 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00001F24                                         ; DATA XREF: .rdata$r:00001EF8o
.rdata$r:00001F24                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00001F24                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00001F28                 db    1
.rdata$r:00001F29                 db    0
.rdata$r:00001F2A                 db    0
.rdata$r:00001F2B                 db    0
.rdata$r:00001F2C                 db    0
.rdata$r:00001F2D                 db    0
.rdata$r:00001F2E                 db    0
.rdata$r:00001F2F                 db    0
.rdata$r:00001F30                 db 0FFh
.rdata$r:00001F31                 db 0FFh
.rdata$r:00001F32                 db 0FFh
.rdata$r:00001F33                 db 0FFh
.rdata$r:00001F34                 db    0
.rdata$r:00001F35                 db    0
.rdata$r:00001F36                 db    0
.rdata$r:00001F37                 db    0
.rdata$r:00001F38                 db  40h ; @
.rdata$r:00001F39                 db    0
.rdata$r:00001F3A                 db    0
.rdata$r:00001F3B                 db    0
.rdata$r:00001F3C                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F3C _rdata$r        ends
.rdata$r:00001F3C
.data:00001F40 ; ===========================================================================
.data:00001F40
.data:00001F40 ; Segment type: Pure data
.data:00001F40 ; Segment permissions: Read/Write
.data:00001F40 _data           segment dword public 'DATA' use32
.data:00001F40                 assume cs:_data
.data:00001F40                 ;org 1F40h
.data:00001F40 ; COMDAT (pick any)
.data:00001F40                 public ??_R0?AUISequentialInStream@@@8
.data:00001F40 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00001F40 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00001F40                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001F40                                         ; .rdata$r:0000225Co
.data:00001F40                                         ; const type_info::`vftable'
.data:00001F44                 align 8
.data:00001F48 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:00001F62                 align 4
.data:00001F62 _data           ends
.data:00001F62
.rdata$r:00001F64 ; ===========================================================================
.rdata$r:00001F64
.rdata$r:00001F64 ; Segment type: Pure data
.rdata$r:00001F64 ; Segment permissions: Read
.rdata$r:00001F64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F64                 assume cs:_rdata$r
.rdata$r:00001F64                 ;org 1F64h
.rdata$r:00001F64 ; COMDAT (pick any)
.rdata$r:00001F64                 public ??_R3ISequentialInStream@@8
.rdata$r:00001F64 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F64 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00001F3Co
.rdata$r:00001F64                                         ; .rdata$r:00002260o
.rdata$r:00001F65                 db    0
.rdata$r:00001F66                 db    0
.rdata$r:00001F67                 db    0
.rdata$r:00001F68                 db    0
.rdata$r:00001F69                 db    0
.rdata$r:00001F6A                 db    0
.rdata$r:00001F6B                 db    0
.rdata$r:00001F6C                 db    2
.rdata$r:00001F6D                 db    0
.rdata$r:00001F6E                 db    0
.rdata$r:00001F6F                 db    0
.rdata$r:00001F70                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00001F70 _rdata$r        ends
.rdata$r:00001F70
.rdata$r:00001F74 ; ===========================================================================
.rdata$r:00001F74
.rdata$r:00001F74 ; Segment type: Pure data
.rdata$r:00001F74 ; Segment permissions: Read
.rdata$r:00001F74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F74                 assume cs:_rdata$r
.rdata$r:00001F74                 ;org 1F74h
.rdata$r:00001F74 ; COMDAT (pick any)
.rdata$r:00001F74                 public ??_R2ISequentialInStream@@8
.rdata$r:00001F74 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00001F74 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00001F74                                         ; DATA XREF: .rdata$r:00001F70o
.rdata$r:00001F74                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F78                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F7C                 db    0
.rdata$r:00001F7D                 align 10h
.rdata$r:00001F7D _rdata$r        ends
.rdata$r:00001F7D
.rdata$r:00001F80 ; ===========================================================================
.rdata$r:00001F80
.rdata$r:00001F80 ; Segment type: Pure data
.rdata$r:00001F80 ; Segment permissions: Read
.rdata$r:00001F80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F80                 assume cs:_rdata$r
.rdata$r:00001F80                 ;org 1F80h
.rdata$r:00001F80 ; COMDAT (pick any)
.rdata$r:00001F80                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001F80 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001F80 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001F80                                         ; DATA XREF: .rdata$r:00001EFCo
.rdata$r:00001F80                                         ; .rdata$r:00001F78o ...
.rdata$r:00001F80                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001F84                 db    0
.rdata$r:00001F85                 db    0
.rdata$r:00001F86                 db    0
.rdata$r:00001F87                 db    0
.rdata$r:00001F88                 db    0
.rdata$r:00001F89                 db    0
.rdata$r:00001F8A                 db    0
.rdata$r:00001F8B                 db    0
.rdata$r:00001F8C                 db 0FFh
.rdata$r:00001F8D                 db 0FFh
.rdata$r:00001F8E                 db 0FFh
.rdata$r:00001F8F                 db 0FFh
.rdata$r:00001F90                 db    0
.rdata$r:00001F91                 db    0
.rdata$r:00001F92                 db    0
.rdata$r:00001F93                 db    0
.rdata$r:00001F94                 db  40h ; @
.rdata$r:00001F95                 db    0
.rdata$r:00001F96                 db    0
.rdata$r:00001F97                 db    0
.rdata$r:00001F98                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F98 _rdata$r        ends
.rdata$r:00001F98
.data:00001F9C ; ===========================================================================
.data:00001F9C
.data:00001F9C ; Segment type: Pure data
.data:00001F9C ; Segment permissions: Read/Write
.data:00001F9C _data           segment dword public 'DATA' use32
.data:00001F9C                 assume cs:_data
.data:00001F9C                 ;org 1F9Ch
.data:00001F9C ; COMDAT (pick any)
.data:00001F9C                 public ??_R0?AUIUnknown@@@8
.data:00001F9C ; struct IUnknown `RTTI Type Descriptor'
.data:00001F9C ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00001F9C                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001F9C                                         ; const type_info::`vftable'
.data:00001FA0                 db    0
.data:00001FA1                 db    0
.data:00001FA2                 db    0
.data:00001FA3                 db    0
.data:00001FA4                 db  2Eh ; .
.data:00001FA5                 db  3Fh ; ?
.data:00001FA6                 db  41h ; A
.data:00001FA7                 db  55h ; U
.data:00001FA8                 db  49h ; I
.data:00001FA9                 db  55h ; U
.data:00001FAA                 db  6Eh ; n
.data:00001FAB                 db  6Bh ; k
.data:00001FAC                 db  6Eh ; n
.data:00001FAD                 db  6Fh ; o
.data:00001FAE                 db  77h ; w
.data:00001FAF                 db  6Eh ; n
.data:00001FB0                 db  40h ; @
.data:00001FB1                 db  40h ; @
.data:00001FB2                 db    0
.data:00001FB3                 align 4
.data:00001FB3 _data           ends
.data:00001FB3
.rdata$r:00001FB4 ; ===========================================================================
.rdata$r:00001FB4
.rdata$r:00001FB4 ; Segment type: Pure data
.rdata$r:00001FB4 ; Segment permissions: Read
.rdata$r:00001FB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FB4                 assume cs:_rdata$r
.rdata$r:00001FB4                 ;org 1FB4h
.rdata$r:00001FB4 ; COMDAT (pick any)
.rdata$r:00001FB4                 public ??_R3IUnknown@@8
.rdata$r:00001FB4 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FB4 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00001F98o
.rdata$r:00001FB5                 db    0
.rdata$r:00001FB6                 db    0
.rdata$r:00001FB7                 db    0
.rdata$r:00001FB8                 db    0
.rdata$r:00001FB9                 db    0
.rdata$r:00001FBA                 db    0
.rdata$r:00001FBB                 db    0
.rdata$r:00001FBC                 db    1
.rdata$r:00001FBD                 db    0
.rdata$r:00001FBE                 db    0
.rdata$r:00001FBF                 db    0
.rdata$r:00001FC0                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001FC0 _rdata$r        ends
.rdata$r:00001FC0
.rdata$r:00001FC4 ; ===========================================================================
.rdata$r:00001FC4
.rdata$r:00001FC4 ; Segment type: Pure data
.rdata$r:00001FC4 ; Segment permissions: Read
.rdata$r:00001FC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FC4                 assume cs:_rdata$r
.rdata$r:00001FC4                 ;org 1FC4h
.rdata$r:00001FC4 ; COMDAT (pick any)
.rdata$r:00001FC4                 public ??_R2IUnknown@@8
.rdata$r:00001FC4 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001FC4 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001FC4                                         ; DATA XREF: .rdata$r:00001FC0o
.rdata$r:00001FC4                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001FC8                 db    0
.rdata$r:00001FC9                 align 4
.rdata$r:00001FC9 _rdata$r        ends
.rdata$r:00001FC9
.rdata$r:00001FCC ; ===========================================================================
.rdata$r:00001FCC
.rdata$r:00001FCC ; Segment type: Pure data
.rdata$r:00001FCC ; Segment permissions: Read
.rdata$r:00001FCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FCC                 assume cs:_rdata$r
.rdata$r:00001FCC                 ;org 1FCCh
.rdata$r:00001FCC ; COMDAT (pick any)
.rdata$r:00001FCC                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00001FCC ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00001FCC ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00001FCC                                         ; DATA XREF: .rdata$r:00001F00o
.rdata$r:00001FCC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00001FD0                 db    0
.rdata$r:00001FD1                 db    0
.rdata$r:00001FD2                 db    0
.rdata$r:00001FD3                 db    0
.rdata$r:00001FD4                 db    4
.rdata$r:00001FD5                 db    0
.rdata$r:00001FD6                 db    0
.rdata$r:00001FD7                 db    0
.rdata$r:00001FD8                 db 0FFh
.rdata$r:00001FD9                 db 0FFh
.rdata$r:00001FDA                 db 0FFh
.rdata$r:00001FDB                 db 0FFh
.rdata$r:00001FDC                 db    0
.rdata$r:00001FDD                 db    0
.rdata$r:00001FDE                 db    0
.rdata$r:00001FDF                 db    0
.rdata$r:00001FE0                 db  40h ; @
.rdata$r:00001FE1                 db    0
.rdata$r:00001FE2                 db    0
.rdata$r:00001FE3                 db    0
.rdata$r:00001FE4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FE4 _rdata$r        ends
.rdata$r:00001FE4
.data:00001FE8 ; ===========================================================================
.data:00001FE8
.data:00001FE8 ; Segment type: Pure data
.data:00001FE8 ; Segment permissions: Read/Write
.data:00001FE8 _data           segment dword public 'DATA' use32
.data:00001FE8                 assume cs:_data
.data:00001FE8                 ;org 1FE8h
.data:00001FE8 ; COMDAT (pick any)
.data:00001FE8                 public ??_R0?AVCMyUnknownImp@@@8
.data:00001FE8 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00001FE8 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00001FE8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00001FE8                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001FE8                                         ; const type_info::`vftable'
.data:00001FEC                 align 10h
.data:00001FF0 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00001FF0 _data           ends
.data:00001FF0
.rdata$r:00002004 ; ===========================================================================
.rdata$r:00002004
.rdata$r:00002004 ; Segment type: Pure data
.rdata$r:00002004 ; Segment permissions: Read
.rdata$r:00002004 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002004                 assume cs:_rdata$r
.rdata$r:00002004                 ;org 2004h
.rdata$r:00002004 ; COMDAT (pick any)
.rdata$r:00002004                 public ??_R3CMyUnknownImp@@8
.rdata$r:00002004 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002004 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00001FE4o
.rdata$r:00002004                                         ; .rdata$r:00002034o
.rdata$r:00002005                 db    0
.rdata$r:00002006                 db    0
.rdata$r:00002007                 db    0
.rdata$r:00002008                 db    0
.rdata$r:00002009                 db    0
.rdata$r:0000200A                 db    0
.rdata$r:0000200B                 db    0
.rdata$r:0000200C                 db    1
.rdata$r:0000200D                 db    0
.rdata$r:0000200E                 db    0
.rdata$r:0000200F                 db    0
.rdata$r:00002010                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002010 _rdata$r        ends
.rdata$r:00002010
.rdata$r:00002014 ; ===========================================================================
.rdata$r:00002014
.rdata$r:00002014 ; Segment type: Pure data
.rdata$r:00002014 ; Segment permissions: Read
.rdata$r:00002014 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002014                 assume cs:_rdata$r
.rdata$r:00002014                 ;org 2014h
.rdata$r:00002014 ; COMDAT (pick any)
.rdata$r:00002014                 public ??_R2CMyUnknownImp@@8
.rdata$r:00002014 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002014 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002014                                         ; DATA XREF: .rdata$r:00002010o
.rdata$r:00002014                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002018                 db    0
.rdata$r:00002019                 align 4
.rdata$r:00002019 _rdata$r        ends
.rdata$r:00002019
.rdata$r:0000201C ; ===========================================================================
.rdata$r:0000201C
.rdata$r:0000201C ; Segment type: Pure data
.rdata$r:0000201C ; Segment permissions: Read
.rdata$r:0000201C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000201C                 assume cs:_rdata$r
.rdata$r:0000201C                 ;org 201Ch
.rdata$r:0000201C ; COMDAT (pick any)
.rdata$r:0000201C                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000201C ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000201C ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000201C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:0000201C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002020                 db    0
.rdata$r:00002021                 db    0
.rdata$r:00002022                 db    0
.rdata$r:00002023                 db    0
.rdata$r:00002024                 db    0
.rdata$r:00002025                 db    0
.rdata$r:00002026                 db    0
.rdata$r:00002027                 db    0
.rdata$r:00002028                 db 0FFh
.rdata$r:00002029                 db 0FFh
.rdata$r:0000202A                 db 0FFh
.rdata$r:0000202B                 db 0FFh
.rdata$r:0000202C                 db    0
.rdata$r:0000202D                 db    0
.rdata$r:0000202E                 db    0
.rdata$r:0000202F                 db    0
.rdata$r:00002030                 db  40h ; @
.rdata$r:00002031                 db    0
.rdata$r:00002032                 db    0
.rdata$r:00002033                 db    0
.rdata$r:00002034                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002034 _rdata$r        ends
.rdata$r:00002034
.text:00002038 ; ===========================================================================
.text:00002038
.text:00002038 ; Segment type: Pure code
.text:00002038 ; Segment permissions: Read/Execute
.text:00002038 _text           segment para public 'CODE' use32
.text:00002038                 assume cs:_text
.text:00002038                 ;org 2038h
.text:00002038 ; COMDAT (pick any)
.text:00002038                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002038
.text:00002038 ; =============== S U B R O U T I N E =======================================
.text:00002038
.text:00002038 ; Attributes: bp-based frame
.text:00002038
.text:00002038 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00002038                 public ??0CMyUnknownImp@@QAE@XZ
.text:00002038 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CLimitedSequentialInStream::CLimitedSequentialInStream(void)+1Cp
.text:00002038
.text:00002038 var_4           = dword ptr -4
.text:00002038
.text:00002038                 push    ebp
.text:00002039                 mov     ebp, esp
.text:0000203B                 push    ecx
.text:0000203C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002043                 mov     [ebp+var_4], ecx
.text:00002046                 mov     eax, [ebp+var_4]
.text:00002049                 mov     dword ptr [eax], 0
.text:0000204F                 mov     eax, [ebp+var_4]
.text:00002052                 mov     esp, ebp
.text:00002054                 pop     ebp
.text:00002055                 retn
.text:00002055 ??0CMyUnknownImp@@QAE@XZ endp
.text:00002055
.text:00002055 ; ---------------------------------------------------------------------------
.text:00002056                 align 4
.text:00002056 _text           ends
.text:00002056
.text:00002058 ; ===========================================================================
.text:00002058
.text:00002058 ; Segment type: Pure code
.text:00002058 ; Segment permissions: Read/Execute
.text:00002058 _text           segment para public 'CODE' use32
.text:00002058                 assume cs:_text
.text:00002058                 ;org 2058h
.text:00002058 ; COMDAT (pick any)
.text:00002058                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002058
.text:00002058 ; =============== S U B R O U T I N E =======================================
.text:00002058
.text:00002058 ; Attributes: bp-based frame
.text:00002058
.text:00002058 ; __int32 __stdcall CLimitedSequentialInStream::QueryInterface(CLimitedSequentialInStream *this, const struct _GUID *Buf1, void **)
.text:00002058                 public ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.text:00002058 ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00002058                                         ; DATA XREF: .rdata:const CLimitedSequentialInStream::`vftable'o
.text:00002058
.text:00002058 this            = dword ptr  8
.text:00002058 Buf1            = dword ptr  0Ch
.text:00002058 arg_8           = dword ptr  10h
.text:00002058
.text:00002058                 push    ebp
.text:00002059                 mov     ebp, esp
.text:0000205B                 mov     eax, [ebp+arg_8]
.text:0000205E                 mov     dword ptr [eax], 0
.text:00002064                 push    offset _IID_IUnknown ; Buf2
.text:00002069                 mov     ecx, [ebp+Buf1]
.text:0000206C                 push    ecx             ; Buf1
.text:0000206D                 call    ___@8           ; __(x,x)
.text:00002072                 test    eax, eax
.text:00002074                 jz      short loc_2080
.text:00002076                 mov     edx, [ebp+arg_8]
.text:00002079                 mov     eax, [ebp+this]
.text:0000207C                 mov     [edx], eax
.text:0000207E                 jmp     short loc_20A3
.text:00002080 ; ---------------------------------------------------------------------------
.text:00002080
.text:00002080 loc_2080:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00002080                 push    offset _IID_ISequentialInStream ; Buf2
.text:00002085                 mov     ecx, [ebp+Buf1]
.text:00002088                 push    ecx             ; Buf1
.text:00002089                 call    ___@8           ; __(x,x)
.text:0000208E                 test    eax, eax
.text:00002090                 jz      short loc_209C
.text:00002092                 mov     edx, [ebp+arg_8]
.text:00002095                 mov     eax, [ebp+this]
.text:00002098                 mov     [edx], eax
.text:0000209A                 jmp     short loc_20A3
.text:0000209C ; ---------------------------------------------------------------------------
.text:0000209C
.text:0000209C loc_209C:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+38j
.text:0000209C                 mov     eax, 80004002h
.text:000020A1                 jmp     short loc_20B4
.text:000020A3 ; ---------------------------------------------------------------------------
.text:000020A3
.text:000020A3 loc_20A3:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+26j
.text:000020A3                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+42j
.text:000020A3                 mov     ecx, [ebp+this]
.text:000020A6                 mov     edx, [ecx+4]
.text:000020A9                 add     edx, 1
.text:000020AC                 mov     eax, [ebp+this]
.text:000020AF                 mov     [eax+4], edx
.text:000020B2                 xor     eax, eax
.text:000020B4
.text:000020B4 loc_20B4:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+49j
.text:000020B4                 cmp     ebp, esp
.text:000020B6                 call    __RTC_CheckEsp
.text:000020BB                 pop     ebp
.text:000020BC                 retn    0Ch
.text:000020BC ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:000020BC
.text:000020BC ; ---------------------------------------------------------------------------
.text:000020BF                 align 10h
.text:000020BF _text           ends
.text:000020BF
.text:000020C0 ; ===========================================================================
.text:000020C0
.text:000020C0 ; Segment type: Pure code
.text:000020C0 ; Segment permissions: Read/Execute
.text:000020C0 _text           segment para public 'CODE' use32
.text:000020C0                 assume cs:_text
.text:000020C0                 ;org 20C0h
.text:000020C0 ; COMDAT (pick any)
.text:000020C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000020C0
.text:000020C0 ; =============== S U B R O U T I N E =======================================
.text:000020C0
.text:000020C0 ; Attributes: bp-based frame
.text:000020C0
.text:000020C0 ; unsigned __int32 __stdcall CLimitedSequentialInStream::AddRef(CLimitedSequentialInStream *this)
.text:000020C0                 public ?AddRef@CLimitedSequentialInStream@@UAGKXZ
.text:000020C0 ?AddRef@CLimitedSequentialInStream@@UAGKXZ proc near
.text:000020C0                                         ; DATA XREF: .rdata:00001E98o
.text:000020C0
.text:000020C0 var_4           = dword ptr -4
.text:000020C0 this            = dword ptr  8
.text:000020C0
.text:000020C0                 push    ebp
.text:000020C1                 mov     ebp, esp
.text:000020C3                 push    ecx
.text:000020C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000020CB                 mov     eax, [ebp+this]
.text:000020CE                 mov     ecx, [eax+4]
.text:000020D1                 add     ecx, 1
.text:000020D4                 mov     [ebp+var_4], ecx
.text:000020D7                 mov     edx, [ebp+this]
.text:000020DA                 mov     eax, [ebp+var_4]
.text:000020DD                 mov     [edx+4], eax
.text:000020E0                 mov     eax, [ebp+var_4]
.text:000020E3                 mov     esp, ebp
.text:000020E5                 pop     ebp
.text:000020E6                 retn    4
.text:000020E6 ?AddRef@CLimitedSequentialInStream@@UAGKXZ endp
.text:000020E6
.text:000020E6 ; ---------------------------------------------------------------------------
.text:000020E9                 align 4
.text:000020E9 _text           ends
.text:000020E9
.text:000020EC ; ===========================================================================
.text:000020EC
.text:000020EC ; Segment type: Pure code
.text:000020EC ; Segment permissions: Read/Execute
.text:000020EC _text           segment para public 'CODE' use32
.text:000020EC                 assume cs:_text
.text:000020EC                 ;org 20ECh
.text:000020EC ; COMDAT (pick any)
.text:000020EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000020EC
.text:000020EC ; =============== S U B R O U T I N E =======================================
.text:000020EC
.text:000020EC ; Attributes: bp-based frame
.text:000020EC
.text:000020EC ; unsigned __int32 __stdcall CLimitedSequentialInStream::Release(CLimitedSequentialInStream *this)
.text:000020EC                 public ?Release@CLimitedSequentialInStream@@UAGKXZ
.text:000020EC ?Release@CLimitedSequentialInStream@@UAGKXZ proc near
.text:000020EC                                         ; DATA XREF: .rdata:00001E9Co
.text:000020EC
.text:000020EC var_10          = dword ptr -10h
.text:000020EC var_C           = dword ptr -0Ch
.text:000020EC var_8           = dword ptr -8
.text:000020EC var_4           = dword ptr -4
.text:000020EC this            = dword ptr  8
.text:000020EC
.text:000020EC                 push    ebp
.text:000020ED                 mov     ebp, esp
.text:000020EF                 sub     esp, 10h
.text:000020F2                 mov     eax, 0CCCCCCCCh
.text:000020F7                 mov     [ebp+var_10], eax
.text:000020FA                 mov     [ebp+var_C], eax
.text:000020FD                 mov     [ebp+var_8], eax
.text:00002100                 mov     [ebp+var_4], eax
.text:00002103                 mov     eax, [ebp+this]
.text:00002106                 mov     ecx, [eax+4]
.text:00002109                 sub     ecx, 1
.text:0000210C                 mov     [ebp+var_C], ecx
.text:0000210F                 mov     edx, [ebp+this]
.text:00002112                 mov     eax, [ebp+var_C]
.text:00002115                 mov     [edx+4], eax
.text:00002118                 cmp     [ebp+var_C], 0
.text:0000211C                 jz      short loc_2126
.text:0000211E                 mov     ecx, [ebp+this]
.text:00002121                 mov     eax, [ecx+4]
.text:00002124                 jmp     short loc_2150
.text:00002126 ; ---------------------------------------------------------------------------
.text:00002126
.text:00002126 loc_2126:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+30j
.text:00002126                 mov     edx, [ebp+this]
.text:00002129                 mov     [ebp+var_8], edx
.text:0000212C                 mov     eax, [ebp+var_8]
.text:0000212F                 mov     [ebp+var_4], eax
.text:00002132                 cmp     [ebp+var_4], 0
.text:00002136                 jz      short loc_2147
.text:00002138                 push    1
.text:0000213A                 mov     ecx, [ebp+var_4]
.text:0000213D                 call    ??_GCLimitedSequentialInStream@@QAEPAXI@Z ; CLimitedSequentialInStream::`scalar deleting destructor'(uint)
.text:00002142                 mov     [ebp+var_10], eax
.text:00002145                 jmp     short loc_214E
.text:00002147 ; ---------------------------------------------------------------------------
.text:00002147
.text:00002147 loc_2147:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+4Aj
.text:00002147                 mov     [ebp+var_10], 0
.text:0000214E
.text:0000214E loc_214E:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+59j
.text:0000214E                 xor     eax, eax
.text:00002150
.text:00002150 loc_2150:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+38j
.text:00002150                 add     esp, 10h
.text:00002153                 cmp     ebp, esp
.text:00002155                 call    __RTC_CheckEsp
.text:0000215A                 mov     esp, ebp
.text:0000215C                 pop     ebp
.text:0000215D                 retn    4
.text:0000215D ?Release@CLimitedSequentialInStream@@UAGKXZ endp
.text:0000215D
.text:0000215D _text           ends
.text:0000215D
.text:00002160 ; ===========================================================================
.text:00002160
.text:00002160 ; Segment type: Pure code
.text:00002160 ; Segment permissions: Read/Execute
.text:00002160 _text           segment para public 'CODE' use32
.text:00002160                 assume cs:_text
.text:00002160                 ;org 2160h
.text:00002160 ; COMDAT (pick any)
.text:00002160                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002160
.text:00002160 ; =============== S U B R O U T I N E =======================================
.text:00002160
.text:00002160 ; Attributes: bp-based frame
.text:00002160
.text:00002160 ; public: void * __thiscall CLimitedSequentialInStream::`scalar deleting destructor'(unsigned int)
.text:00002160                 public ??_GCLimitedSequentialInStream@@QAEPAXI@Z
.text:00002160 ??_GCLimitedSequentialInStream@@QAEPAXI@Z proc near
.text:00002160                                         ; CODE XREF: CLimitedSequentialInStream::Release(void)+51p
.text:00002160
.text:00002160 var_4           = dword ptr -4
.text:00002160 arg_0           = dword ptr  8
.text:00002160
.text:00002160                 push    ebp
.text:00002161                 mov     ebp, esp
.text:00002163                 push    ecx
.text:00002164                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000216B                 mov     [ebp+var_4], ecx
.text:0000216E                 mov     ecx, [ebp+var_4] ; this
.text:00002171                 call    ??1CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::~CLimitedSequentialInStream(void)
.text:00002176                 mov     eax, [ebp+arg_0]
.text:00002179                 and     eax, 1
.text:0000217C                 jz      short loc_218A
.text:0000217E                 mov     ecx, [ebp+var_4]
.text:00002181                 push    ecx             ; void *
.text:00002182                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002187                 add     esp, 4
.text:0000218A
.text:0000218A loc_218A:                               ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+1Cj
.text:0000218A                 mov     eax, [ebp+var_4]
.text:0000218D                 add     esp, 4
.text:00002190                 cmp     ebp, esp
.text:00002192                 call    __RTC_CheckEsp
.text:00002197                 mov     esp, ebp
.text:00002199                 pop     ebp
.text:0000219A                 retn    4
.text:0000219A ??_GCLimitedSequentialInStream@@QAEPAXI@Z endp
.text:0000219A
.text:0000219A ; ---------------------------------------------------------------------------
.text:0000219D                 align 10h
.text:0000219D _text           ends
.text:0000219D
.text:000021A0 ; ===========================================================================
.text:000021A0
.text:000021A0 ; Segment type: Pure code
.text:000021A0 ; Segment permissions: Read/Execute
.text:000021A0 _text           segment para public 'CODE' use32
.text:000021A0                 assume cs:_text
.text:000021A0                 ;org 21A0h
.text:000021A0 ; COMDAT (pick any)
.text:000021A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000021A0
.text:000021A0 ; =============== S U B R O U T I N E =======================================
.text:000021A0
.text:000021A0 ; Attributes: bp-based frame
.text:000021A0
.text:000021A0 ; _DWORD __thiscall CLimitedSequentialInStream::~CLimitedSequentialInStream(CLimitedSequentialInStream *__hidden this)
.text:000021A0                 public ??1CLimitedSequentialInStream@@QAE@XZ
.text:000021A0 ??1CLimitedSequentialInStream@@QAE@XZ proc near
.text:000021A0                                         ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+11p
.text:000021A0
.text:000021A0 var_4           = dword ptr -4
.text:000021A0
.text:000021A0                 push    ebp
.text:000021A1                 mov     ebp, esp
.text:000021A3                 push    ecx
.text:000021A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021AB                 mov     [ebp+var_4], ecx
.text:000021AE                 mov     ecx, [ebp+var_4]
.text:000021B1                 add     ecx, 8
.text:000021B4                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000021B9                 add     esp, 4
.text:000021BC                 cmp     ebp, esp
.text:000021BE                 call    __RTC_CheckEsp
.text:000021C3                 mov     esp, ebp
.text:000021C5                 pop     ebp
.text:000021C6                 retn
.text:000021C6 ??1CLimitedSequentialInStream@@QAE@XZ endp
.text:000021C6
.text:000021C6 ; ---------------------------------------------------------------------------
.text:000021C7                 align 4
.text:000021C7 _text           ends
.text:000021C7
.text:000021C8 ; ===========================================================================
.text:000021C8
.text:000021C8 ; Segment type: Pure code
.text:000021C8 ; Segment permissions: Read/Execute
.text:000021C8 _text           segment para public 'CODE' use32
.text:000021C8                 assume cs:_text
.text:000021C8                 ;org 21C8h
.text:000021C8 ; COMDAT (pick any)
.text:000021C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000021C8
.text:000021C8 ; =============== S U B R O U T I N E =======================================
.text:000021C8
.text:000021C8 ; Attributes: bp-based frame
.text:000021C8
.text:000021C8 ; int __stdcall __(void *Buf1, void *Buf2)
.text:000021C8                 public ___@8
.text:000021C8 ___@8           proc near               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+15p
.text:000021C8                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+31p
.text:000021C8
.text:000021C8 Buf1            = dword ptr  8
.text:000021C8 Buf2            = dword ptr  0Ch
.text:000021C8
.text:000021C8                 push    ebp
.text:000021C9                 mov     ebp, esp
.text:000021CB                 mov     eax, [ebp+Buf2]
.text:000021CE                 push    eax             ; Buf2
.text:000021CF                 mov     ecx, [ebp+Buf1]
.text:000021D2                 push    ecx             ; Buf1
.text:000021D3                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000021D8                 cmp     ebp, esp
.text:000021DA                 call    __RTC_CheckEsp
.text:000021DF                 pop     ebp
.text:000021E0                 retn    8
.text:000021E0 ___@8           endp
.text:000021E0
.text:000021E0 ; ---------------------------------------------------------------------------
.text:000021E3                 align 4
.text:000021E3 _text           ends
.text:000021E3
.text:000021E4 ; ===========================================================================
.text:000021E4
.text:000021E4 ; Segment type: Pure code
.text:000021E4 ; Segment permissions: Read/Execute
.text:000021E4 _text           segment para public 'CODE' use32
.text:000021E4                 assume cs:_text
.text:000021E4                 ;org 21E4h
.text:000021E4 ; COMDAT (pick any)
.text:000021E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000021E4
.text:000021E4 ; =============== S U B R O U T I N E =======================================
.text:000021E4
.text:000021E4 ; Attributes: bp-based frame
.text:000021E4
.text:000021E4 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000021E4                 public _IsEqualGUID@8
.text:000021E4 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000021E4
.text:000021E4 Buf1            = dword ptr  8
.text:000021E4 Buf2            = dword ptr  0Ch
.text:000021E4
.text:000021E4                 push    ebp
.text:000021E5                 mov     ebp, esp
.text:000021E7                 push    10h             ; Size
.text:000021E9                 mov     eax, [ebp+Buf2]
.text:000021EC                 push    eax             ; Buf2
.text:000021ED                 mov     ecx, [ebp+Buf1]
.text:000021F0                 push    ecx             ; Buf1
.text:000021F1                 call    _memcmp
.text:000021F6                 add     esp, 0Ch
.text:000021F9                 neg     eax
.text:000021FB                 sbb     eax, eax
.text:000021FD                 add     eax, 1
.text:00002200                 cmp     ebp, esp
.text:00002202                 call    __RTC_CheckEsp
.text:00002207                 pop     ebp
.text:00002208                 retn    8
.text:00002208 _IsEqualGUID@8  endp
.text:00002208
.text:00002208 ; ---------------------------------------------------------------------------
.text:0000220B                 align 4
.text:0000220B _text           ends
.text:0000220B
.text:0000220C ; ===========================================================================
.text:0000220C
.text:0000220C ; Segment type: Pure code
.text:0000220C ; Segment permissions: Read/Execute
.text:0000220C _text           segment para public 'CODE' use32
.text:0000220C                 assume cs:_text
.text:0000220C                 ;org 220Ch
.text:0000220C ; COMDAT (pick any)
.text:0000220C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000220C
.text:0000220C ; =============== S U B R O U T I N E =======================================
.text:0000220C
.text:0000220C ; Attributes: bp-based frame
.text:0000220C
.text:0000220C ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:0000220C                 public ??0ISequentialInStream@@QAE@XZ
.text:0000220C ??0ISequentialInStream@@QAE@XZ proc near
.text:0000220C                                         ; CODE XREF: CLimitedSequentialInStream::CLimitedSequentialInStream(void)+11p
.text:0000220C
.text:0000220C var_4           = dword ptr -4
.text:0000220C
.text:0000220C                 push    ebp
.text:0000220D                 mov     ebp, esp
.text:0000220F                 push    ecx
.text:00002210                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002217                 mov     [ebp+var_4], ecx
.text:0000221A                 mov     ecx, [ebp+var_4]
.text:0000221D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002222                 mov     eax, [ebp+var_4]
.text:00002225                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:0000222B                 mov     eax, [ebp+var_4]
.text:0000222E                 add     esp, 4
.text:00002231                 cmp     ebp, esp
.text:00002233                 call    __RTC_CheckEsp
.text:00002238                 mov     esp, ebp
.text:0000223A                 pop     ebp
.text:0000223B                 retn
.text:0000223B ??0ISequentialInStream@@QAE@XZ endp
.text:0000223B
.text:0000223B _text           ends
.text:0000223B
.rdata:0000223C ; ===========================================================================
.rdata:0000223C
.rdata:0000223C ; Segment type: Pure data
.rdata:0000223C ; Segment permissions: Read
.rdata:0000223C _rdata          segment dword public 'DATA' use32
.rdata:0000223C                 assume cs:_rdata
.rdata:0000223C                 ;org 223Ch
.rdata:0000223C ; COMDAT (pick largest)
.rdata:0000223C                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00002240                 public ??_7ISequentialInStream@@6B@
.rdata:00002240 ; const ISequentialInStream::`vftable'
.rdata:00002240 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00002240                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00002244                 dd offset __purecall
.rdata:00002248                 dd offset __purecall
.rdata:0000224C                 dd offset __purecall
.rdata:0000224C _rdata          ends
.rdata:0000224C
.rdata$r:00002250 ; ===========================================================================
.rdata$r:00002250
.rdata$r:00002250 ; Segment type: Pure data
.rdata$r:00002250 ; Segment permissions: Read
.rdata$r:00002250 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002250                 assume cs:_rdata$r
.rdata$r:00002250                 ;org 2250h
.rdata$r:00002250 ; COMDAT (pick any)
.rdata$r:00002250                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00002250 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00002250 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:0000223Co
.rdata$r:00002251                 db    0
.rdata$r:00002252                 db    0
.rdata$r:00002253                 db    0
.rdata$r:00002254                 db    0
.rdata$r:00002255                 db    0
.rdata$r:00002256                 db    0
.rdata$r:00002257                 db    0
.rdata$r:00002258                 db    0
.rdata$r:00002259                 db    0
.rdata$r:0000225A                 db    0
.rdata$r:0000225B                 db    0
.rdata$r:0000225C                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00002260                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002260 _rdata$r        ends
.rdata$r:00002260
.text:00002264 ; ===========================================================================
.text:00002264
.text:00002264 ; Segment type: Pure code
.text:00002264 ; Segment permissions: Read/Execute
.text:00002264 _text           segment para public 'CODE' use32
.text:00002264                 assume cs:_text
.text:00002264                 ;org 2264h
.text:00002264 ; COMDAT (pick any)
.text:00002264                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002264
.text:00002264 ; =============== S U B R O U T I N E =======================================
.text:00002264
.text:00002264 ; Attributes: bp-based frame
.text:00002264
.text:00002264 ; public: __thiscall IUnknown::IUnknown(void)
.text:00002264                 public ??0IUnknown@@QAE@XZ
.text:00002264 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ISequentialInStream::ISequentialInStream(void)+11p
.text:00002264
.text:00002264 var_4           = dword ptr -4
.text:00002264
.text:00002264                 push    ebp
.text:00002265                 mov     ebp, esp
.text:00002267                 push    ecx
.text:00002268                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000226F                 mov     [ebp+var_4], ecx
.text:00002272                 mov     eax, [ebp+var_4]
.text:00002275                 mov     esp, ebp
.text:00002277                 pop     ebp
.text:00002278                 retn
.text:00002278 ??0IUnknown@@QAE@XZ endp
.text:00002278
.text:00002278 ; ---------------------------------------------------------------------------
.text:00002279                 align 4
.text:00002279 _text           ends
.text:00002279
.data:0000227C ; ===========================================================================
.data:0000227C
.data:0000227C ; Segment type: Pure data
.data:0000227C ; Segment permissions: Read/Write
.data:0000227C _data           segment dword public 'DATA' use32
.data:0000227C                 assume cs:_data
.data:0000227C                 ;org 227Ch
.data:0000227C ; COMDAT (pick any)
.data:0000227C                 public ??_R0?AUCInBufferException@@@8
.data:0000227C ; struct CInBufferException `RTTI Type Descriptor'
.data:0000227C ??_R0?AUCInBufferException@@@8 dd offset ??_7type_info@@6B@
.data:0000227C                                         ; DATA XREF: .xdata$x:00001A58o
.data:0000227C                                         ; const type_info::`vftable'
.data:00002280                 db    0
.data:00002281                 db    0
.data:00002282                 db    0
.data:00002283                 db    0
.data:00002284                 db  2Eh ; .
.data:00002285                 db  3Fh ; ?
.data:00002286                 db  41h ; A
.data:00002287                 db  55h ; U
.data:00002288                 db  43h ; C
.data:00002289                 db  49h ; I
.data:0000228A                 db  6Eh ; n
.data:0000228B                 db  42h ; B
.data:0000228C                 db  75h ; u
.data:0000228D                 db  66h ; f
.data:0000228E                 db  66h ; f
.data:0000228F                 db  65h ; e
.data:00002290                 db  72h ; r
.data:00002291                 db  45h ; E
.data:00002292                 db  78h ; x
.data:00002293                 db  63h ; c
.data:00002294                 db  65h ; e
.data:00002295                 db  70h ; p
.data:00002296                 db  74h ; t
.data:00002297                 db  69h ; i
.data:00002298                 db  6Fh ; o
.data:00002299                 db  6Eh ; n
.data:0000229A                 db  40h ; @
.data:0000229B                 db  40h ; @
.data:0000229C                 db    0
.data:0000229D                 align 10h
.data:0000229D _data           ends
.data:0000229D
.text:000022A0 ; ===========================================================================
.text:000022A0
.text:000022A0 ; Segment type: Pure code
.text:000022A0 ; Segment permissions: Read/Execute
.text:000022A0 _text           segment para public 'CODE' use32
.text:000022A0                 assume cs:_text
.text:000022A0                 ;org 22A0h
.text:000022A0 ; COMDAT (pick any)
.text:000022A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000022A0
.text:000022A0 ; =============== S U B R O U T I N E =======================================
.text:000022A0
.text:000022A0 ; Attributes: bp-based frame
.text:000022A0
.text:000022A0 ; int __stdcall operator==(AString *, AString *)
.text:000022A0                 public ??8@YG_NABVAString@@0@Z
.text:000022A0 ??8@YG_NABVAString@@0@Z proc near       ; CODE XREF: NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+D9p
.text:000022A0
.text:000022A0 var_4           = dword ptr -4
.text:000022A0 arg_0           = dword ptr  8
.text:000022A0 arg_4           = dword ptr  0Ch
.text:000022A0
.text:000022A0                 push    ebp
.text:000022A1                 mov     ebp, esp
.text:000022A3                 push    ecx
.text:000022A4                 push    esi
.text:000022A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000022AC                 mov     ecx, [ebp+arg_0] ; this
.text:000022AF                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000022B4                 mov     esi, eax
.text:000022B6                 mov     ecx, [ebp+arg_4] ; this
.text:000022B9                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000022BE                 cmp     esi, eax
.text:000022C0                 jnz     short loc_22E9
.text:000022C2                 mov     ecx, [ebp+arg_4]
.text:000022C5                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000022CA                 push    eax             ; Str2
.text:000022CB                 mov     ecx, [ebp+arg_0]
.text:000022CE                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000022D3                 push    eax             ; Str1
.text:000022D4                 call    _strcmp
.text:000022D9                 add     esp, 8
.text:000022DC                 test    eax, eax
.text:000022DE                 jnz     short loc_22E9
.text:000022E0                 mov     [ebp+var_4], 1
.text:000022E7                 jmp     short loc_22F0
.text:000022E9 ; ---------------------------------------------------------------------------
.text:000022E9
.text:000022E9 loc_22E9:                               ; CODE XREF: operator==(AString const &,AString const &)+20j
.text:000022E9                                         ; operator==(AString const &,AString const &)+3Ej
.text:000022E9                 mov     [ebp+var_4], 0
.text:000022F0
.text:000022F0 loc_22F0:                               ; CODE XREF: operator==(AString const &,AString const &)+47j
.text:000022F0                 mov     al, byte ptr [ebp+var_4]
.text:000022F3                 pop     esi
.text:000022F4                 add     esp, 4
.text:000022F7                 cmp     ebp, esp
.text:000022F9                 call    __RTC_CheckEsp
.text:000022FE                 mov     esp, ebp
.text:00002300                 pop     ebp
.text:00002301                 retn    8
.text:00002301 ??8@YG_NABVAString@@0@Z endp
.text:00002301
.text:00002301 _text           ends
.text:00002301
.text:00002304 ; ===========================================================================
.text:00002304
.text:00002304 ; Segment type: Pure code
.text:00002304 ; Segment permissions: Read/Execute
.text:00002304 _text           segment para public 'CODE' use32
.text:00002304                 assume cs:_text
.text:00002304                 ;org 2304h
.text:00002304 ; COMDAT (pick any)
.text:00002304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002304
.text:00002304 ; =============== S U B R O U T I N E =======================================
.text:00002304
.text:00002304 ; Attributes: bp-based frame
.text:00002304
.text:00002304 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00002304                 public ?Len@AString@@QBEIXZ
.text:00002304 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: operator==(AString const &,AString const &)+Fp
.text:00002304                                         ; operator==(AString const &,AString const &)+19p
.text:00002304
.text:00002304 var_4           = dword ptr -4
.text:00002304
.text:00002304                 push    ebp
.text:00002305                 mov     ebp, esp
.text:00002307                 push    ecx
.text:00002308                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000230F                 mov     [ebp+var_4], ecx
.text:00002312                 mov     eax, [ebp+var_4]
.text:00002315                 mov     eax, [eax+4]
.text:00002318                 mov     esp, ebp
.text:0000231A                 pop     ebp
.text:0000231B                 retn
.text:0000231B ?Len@AString@@QBEIXZ endp
.text:0000231B
.text:0000231B _text           ends
.text:0000231B
.text:0000231C ; ===========================================================================
.text:0000231C
.text:0000231C ; Segment type: Pure code
.text:0000231C ; Segment permissions: Read/Execute
.text:0000231C _text           segment para public 'CODE' use32
.text:0000231C                 assume cs:_text
.text:0000231C                 ;org 231Ch
.text:0000231C ; COMDAT (pick any)
.text:0000231C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000231C
.text:0000231C ; =============== S U B R O U T I N E =======================================
.text:0000231C
.text:0000231C ; Attributes: bp-based frame
.text:0000231C
.text:0000231C ; public: __thiscall AString::operator char const *(void)const
.text:0000231C                 public ??BAString@@QBEPBDXZ
.text:0000231C ??BAString@@QBEPBDXZ proc near          ; CODE XREF: operator==(AString const &,AString const &)+25p
.text:0000231C                                         ; operator==(AString const &,AString const &)+2Ep
.text:0000231C
.text:0000231C var_4           = dword ptr -4
.text:0000231C
.text:0000231C                 push    ebp
.text:0000231D                 mov     ebp, esp
.text:0000231F                 push    ecx
.text:00002320                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002327                 mov     [ebp+var_4], ecx
.text:0000232A                 mov     eax, [ebp+var_4]
.text:0000232D                 mov     eax, [eax]
.text:0000232F                 mov     esp, ebp
.text:00002331                 pop     ebp
.text:00002332                 retn
.text:00002332 ??BAString@@QBEPBDXZ endp
.text:00002332
.text:00002332 ; ---------------------------------------------------------------------------
.text:00002333                 align 4
.text:00002333 _text           ends
.text:00002333
.text:00002334 ; ===========================================================================
.text:00002334
.text:00002334 ; Segment type: Pure code
.text:00002334 ; Segment permissions: Read/Execute
.text:00002334 _text           segment para public 'CODE' use32
.text:00002334                 assume cs:_text
.text:00002334                 ;org 2334h
.text:00002334 ; COMDAT (pick any)
.text:00002334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002334
.text:00002334 ; =============== S U B R O U T I N E =======================================
.text:00002334
.text:00002334 ; Attributes: bp-based frame
.text:00002334
.text:00002334 ; int __thiscall NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvDatabaseEx *this, const struct NArchive::NCab::CMvItem *)
.text:00002334                 public ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z
.text:00002334 ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z proc near
.text:00002334                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+9Ep
.text:00002334                                         ; NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+ACp ...
.text:00002334
.text:00002334 var_8           = dword ptr -8
.text:00002334 var_4           = dword ptr -4
.text:00002334 arg_0           = dword ptr  8
.text:00002334
.text:00002334                 push    ebp
.text:00002335                 mov     ebp, esp
.text:00002337                 sub     esp, 8
.text:0000233A                 push    esi
.text:0000233B                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002342                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002349                 mov     [ebp+var_4], ecx
.text:0000234C                 mov     eax, [ebp+arg_0]
.text:0000234F                 mov     ecx, [eax]
.text:00002351                 push    ecx
.text:00002352                 mov     ecx, [ebp+var_4]
.text:00002355                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:0000235A                 mov     [ebp+var_8], eax
.text:0000235D                 mov     edx, [ebp+arg_0]
.text:00002360                 mov     eax, [edx]
.text:00002362                 push    eax
.text:00002363                 mov     ecx, [ebp+var_4]
.text:00002366                 add     ecx, 18h
.text:00002369                 call    ??A?$CRecordVector@H@@QBEABHI@Z ; CRecordVector<int>::operator[](uint)
.text:0000236E                 mov     esi, eax
.text:00002370                 mov     ecx, [ebp+var_8]
.text:00002373                 call    ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CFolder>::Size(void)
.text:00002378                 push    eax             ; unsigned int
.text:00002379                 mov     ecx, [ebp+arg_0]
.text:0000237C                 mov     edx, [ecx+4]
.text:0000237F                 push    edx
.text:00002380                 mov     ecx, [ebp+var_8]
.text:00002383                 add     ecx, 0Ch
.text:00002386                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:0000238B                 mov     ecx, eax        ; this
.text:0000238D                 call    ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z ; NArchive::NCab::CItem::GetFolderIndex(uint)
.text:00002392                 add     eax, [esi]
.text:00002394                 pop     esi
.text:00002395                 add     esp, 8
.text:00002398                 cmp     ebp, esp
.text:0000239A                 call    __RTC_CheckEsp
.text:0000239F                 mov     esp, ebp
.text:000023A1                 pop     ebp
.text:000023A2                 retn    4
.text:000023A2 ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z endp
.text:000023A2
.text:000023A2 ; ---------------------------------------------------------------------------
.text:000023A5                 align 4
.text:000023A5 _text           ends
.text:000023A5
.text:000023A8 ; ===========================================================================
.text:000023A8
.text:000023A8 ; Segment type: Pure code
.text:000023A8 ; Segment permissions: Read/Execute
.text:000023A8 _text           segment para public 'CODE' use32
.text:000023A8                 assume cs:_text
.text:000023A8                 ;org 23A8h
.text:000023A8 ; COMDAT (pick any)
.text:000023A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000023A8
.text:000023A8 ; =============== S U B R O U T I N E =======================================
.text:000023A8
.text:000023A8 ; Attributes: bp-based frame
.text:000023A8
.text:000023A8 ; bool __thiscall NArchive::NCab::CDatabase::IsTherePrevFolder(NArchive::NCab::CDatabase *__hidden this)
.text:000023A8                 public ?IsTherePrevFolder@CDatabase@NCab@NArchive@@QBE_NXZ
.text:000023A8 ?IsTherePrevFolder@CDatabase@NCab@NArchive@@QBE_NXZ proc near
.text:000023A8                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+7Fp
.text:000023A8                                         ; NArchive::NCab::CMvDatabaseEx::Check(void)+50p ...
.text:000023A8
.text:000023A8 var_8           = dword ptr -8
.text:000023A8 var_4           = dword ptr -4
.text:000023A8
.text:000023A8                 push    ebp
.text:000023A9                 mov     ebp, esp
.text:000023AB                 sub     esp, 8
.text:000023AE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000023B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023BC                 mov     [ebp+var_4], ecx
.text:000023BF                 mov     [ebp+var_8], 0
.text:000023C6                 jmp     short loc_23D1
.text:000023C8 ; ---------------------------------------------------------------------------
.text:000023C8
.text:000023C8 loc_23C8:                               ; CODE XREF: NArchive::NCab::CDatabase::IsTherePrevFolder(void):loc_2402j
.text:000023C8                 mov     eax, [ebp+var_8]
.text:000023CB                 add     eax, 1
.text:000023CE                 mov     [ebp+var_8], eax
.text:000023D1
.text:000023D1 loc_23D1:                               ; CODE XREF: NArchive::NCab::CDatabase::IsTherePrevFolder(void)+1Ej
.text:000023D1                 mov     ecx, [ebp+var_4]
.text:000023D4                 add     ecx, 0Ch
.text:000023D7                 call    ?Size@?$CObjectVector@UCItem@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CItem>::Size(void)
.text:000023DC                 cmp     [ebp+var_8], eax
.text:000023DF                 jnb     short loc_2404
.text:000023E1                 mov     ecx, [ebp+var_8]
.text:000023E4                 push    ecx
.text:000023E5                 mov     ecx, [ebp+var_4]
.text:000023E8                 add     ecx, 0Ch
.text:000023EB                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:000023F0                 mov     ecx, eax        ; this
.text:000023F2                 call    ?ContinuedFromPrev@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::ContinuedFromPrev(void)
.text:000023F7                 movzx   edx, al
.text:000023FA                 test    edx, edx
.text:000023FC                 jz      short loc_2402
.text:000023FE                 mov     al, 1
.text:00002400                 jmp     short loc_2406
.text:00002402 ; ---------------------------------------------------------------------------
.text:00002402
.text:00002402 loc_2402:                               ; CODE XREF: NArchive::NCab::CDatabase::IsTherePrevFolder(void)+54j
.text:00002402                 jmp     short loc_23C8
.text:00002404 ; ---------------------------------------------------------------------------
.text:00002404
.text:00002404 loc_2404:                               ; CODE XREF: NArchive::NCab::CDatabase::IsTherePrevFolder(void)+37j
.text:00002404                 xor     al, al
.text:00002406
.text:00002406 loc_2406:                               ; CODE XREF: NArchive::NCab::CDatabase::IsTherePrevFolder(void)+58j
.text:00002406                 add     esp, 8
.text:00002409                 cmp     ebp, esp
.text:0000240B                 call    __RTC_CheckEsp
.text:00002410                 mov     esp, ebp
.text:00002412                 pop     ebp
.text:00002413                 retn
.text:00002413 ?IsTherePrevFolder@CDatabase@NCab@NArchive@@QBE_NXZ endp
.text:00002413
.text:00002413 _text           ends
.text:00002413
.text:00002414 ; ===========================================================================
.text:00002414
.text:00002414 ; Segment type: Pure code
.text:00002414 ; Segment permissions: Read/Execute
.text:00002414 _text           segment para public 'CODE' use32
.text:00002414                 assume cs:_text
.text:00002414                 ;org 2414h
.text:00002414 ; COMDAT (pick any)
.text:00002414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002414
.text:00002414 ; =============== S U B R O U T I N E =======================================
.text:00002414
.text:00002414 ; Attributes: bp-based frame
.text:00002414
.text:00002414 ; int __thiscall NArchive::NCab::CDatabase::GetNumberOfNewFolders(NArchive::NCab::CDatabase *__hidden this)
.text:00002414                 public ?GetNumberOfNewFolders@CDatabase@NCab@NArchive@@QBEHXZ
.text:00002414 ?GetNumberOfNewFolders@CDatabase@NCab@NArchive@@QBEHXZ proc near
.text:00002414                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+A6p
.text:00002414
.text:00002414 var_8           = dword ptr -8
.text:00002414 var_4           = dword ptr -4
.text:00002414
.text:00002414                 push    ebp
.text:00002415                 mov     ebp, esp
.text:00002417                 sub     esp, 8
.text:0000241A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002421                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002428                 mov     [ebp+var_4], ecx
.text:0000242B                 mov     ecx, [ebp+var_4]
.text:0000242E                 call    ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CFolder>::Size(void)
.text:00002433                 mov     [ebp+var_8], eax
.text:00002436                 mov     ecx, [ebp+var_4] ; this
.text:00002439                 call    ?IsTherePrevFolder@CDatabase@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CDatabase::IsTherePrevFolder(void)
.text:0000243E                 movzx   eax, al
.text:00002441                 test    eax, eax
.text:00002443                 jz      short loc_244E
.text:00002445                 mov     ecx, [ebp+var_8]
.text:00002448                 sub     ecx, 1
.text:0000244B                 mov     [ebp+var_8], ecx
.text:0000244E
.text:0000244E loc_244E:                               ; CODE XREF: NArchive::NCab::CDatabase::GetNumberOfNewFolders(void)+2Fj
.text:0000244E                 mov     eax, [ebp+var_8]
.text:00002451                 add     esp, 8
.text:00002454                 cmp     ebp, esp
.text:00002456                 call    __RTC_CheckEsp
.text:0000245B                 mov     esp, ebp
.text:0000245D                 pop     ebp
.text:0000245E                 retn
.text:0000245E ?GetNumberOfNewFolders@CDatabase@NCab@NArchive@@QBEHXZ endp
.text:0000245E
.text:0000245E ; ---------------------------------------------------------------------------
.text:0000245F                 align 10h
.text:0000245F _text           ends
.text:0000245F
.text:00002460 ; ===========================================================================
.text:00002460
.text:00002460 ; Segment type: Pure code
.text:00002460 ; Segment permissions: Read/Execute
.text:00002460 _text           segment para public 'CODE' use32
.text:00002460                 assume cs:_text
.text:00002460                 ;org 2460h
.text:00002460 ; COMDAT (pick any)
.text:00002460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002460
.text:00002460 ; =============== S U B R O U T I N E =======================================
.text:00002460
.text:00002460 ; Attributes: bp-based frame
.text:00002460
.text:00002460 ; bool __thiscall NArchive::NCab::CItem::IsDir(NArchive::NCab::CItem *__hidden this)
.text:00002460                 public ?IsDir@CItem@NCab@NArchive@@QBE_NXZ
.text:00002460 ?IsDir@CItem@NCab@NArchive@@QBE_NXZ proc near
.text:00002460                                         ; CODE XREF: NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+6Bp
.text:00002460                                         ; NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+76p ...
.text:00002460
.text:00002460 var_4           = dword ptr -4
.text:00002460
.text:00002460                 push    ebp
.text:00002461                 mov     ebp, esp
.text:00002463                 push    ecx
.text:00002464                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000246B                 mov     [ebp+var_4], ecx
.text:0000246E                 mov     eax, [ebp+var_4]
.text:00002471                 movzx   eax, word ptr [eax+1Eh]
.text:00002475                 and     eax, 10h
.text:00002478                 neg     eax
.text:0000247A                 sbb     eax, eax
.text:0000247C                 neg     eax
.text:0000247E                 mov     esp, ebp
.text:00002480                 pop     ebp
.text:00002481                 retn
.text:00002481 ?IsDir@CItem@NCab@NArchive@@QBE_NXZ endp
.text:00002481
.text:00002481 ; ---------------------------------------------------------------------------
.text:00002482                 align 4
.text:00002482 _text           ends
.text:00002482
.text:00002484 ; ===========================================================================
.text:00002484
.text:00002484 ; Segment type: Pure code
.text:00002484 ; Segment permissions: Read/Execute
.text:00002484 _text           segment para public 'CODE' use32
.text:00002484                 assume cs:_text
.text:00002484                 ;org 2484h
.text:00002484 ; COMDAT (pick any)
.text:00002484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002484
.text:00002484 ; =============== S U B R O U T I N E =======================================
.text:00002484
.text:00002484 ; Attributes: bp-based frame
.text:00002484
.text:00002484 ; unsigned __int64 __thiscall NArchive::NCab::CItem::GetEndOffset(NArchive::NCab::CItem *__hidden this)
.text:00002484                 public ?GetEndOffset@CItem@NCab@NArchive@@QBE_KXZ
.text:00002484 ?GetEndOffset@CItem@NCab@NArchive@@QBE_KXZ proc near
.text:00002484                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+1D6p
.text:00002484                                         ; NArchive::NCab::CMvDatabaseEx::Check(void)+201p
.text:00002484
.text:00002484 var_4           = dword ptr -4
.text:00002484
.text:00002484                 push    ebp
.text:00002485                 mov     ebp, esp
.text:00002487                 push    ecx
.text:00002488                 push    esi
.text:00002489                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002490                 mov     [ebp+var_4], ecx
.text:00002493                 mov     eax, [ebp+var_4]
.text:00002496                 mov     eax, [eax+0Ch]
.text:00002499                 xor     edx, edx
.text:0000249B                 mov     ecx, [ebp+var_4]
.text:0000249E                 mov     ecx, [ecx+10h]
.text:000024A1                 xor     esi, esi
.text:000024A3                 add     eax, ecx
.text:000024A5                 adc     edx, esi
.text:000024A7                 pop     esi
.text:000024A8                 mov     esp, ebp
.text:000024AA                 pop     ebp
.text:000024AB                 retn
.text:000024AB ?GetEndOffset@CItem@NCab@NArchive@@QBE_KXZ endp
.text:000024AB
.text:000024AB _text           ends
.text:000024AB
.text:000024AC ; ===========================================================================
.text:000024AC
.text:000024AC ; Segment type: Pure code
.text:000024AC ; Segment permissions: Read/Execute
.text:000024AC _text           segment para public 'CODE' use32
.text:000024AC                 assume cs:_text
.text:000024AC                 ;org 24ACh
.text:000024AC ; COMDAT (pick any)
.text:000024AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024AC
.text:000024AC ; =============== S U B R O U T I N E =======================================
.text:000024AC
.text:000024AC ; Attributes: bp-based frame
.text:000024AC
.text:000024AC ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:000024AC                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:000024AC ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:000024AC                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+E4p
.text:000024AC                                         ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)+30p
.text:000024AC
.text:000024AC var_4           = dword ptr -4
.text:000024AC
.text:000024AC                 push    ebp
.text:000024AD                 mov     ebp, esp
.text:000024AF                 push    ecx
.text:000024B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024B7                 mov     [ebp+var_4], ecx
.text:000024BA                 mov     eax, [ebp+var_4]
.text:000024BD                 mov     dword ptr [eax], 0
.text:000024C3                 mov     eax, [ebp+var_4]
.text:000024C6                 mov     esp, ebp
.text:000024C8                 pop     ebp
.text:000024C9                 retn
.text:000024C9 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000024C9
.text:000024C9 ; ---------------------------------------------------------------------------
.text:000024CA                 align 4
.text:000024CA _text           ends
.text:000024CA
.text:000024CC ; ===========================================================================
.text:000024CC
.text:000024CC ; Segment type: Pure code
.text:000024CC ; Segment permissions: Read/Execute
.text:000024CC _text           segment para public 'CODE' use32
.text:000024CC                 assume cs:_text
.text:000024CC                 ;org 24CCh
.text:000024CC ; COMDAT (pick any)
.text:000024CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024CC
.text:000024CC ; =============== S U B R O U T I N E =======================================
.text:000024CC
.text:000024CC ; Attributes: bp-based frame
.text:000024CC
.text:000024CC ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:000024CC                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:000024CC ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:000024CC                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+12Bp
.text:000024CC                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+28Ap ...
.text:000024CC
.text:000024CC var_4           = dword ptr -4
.text:000024CC
.text:000024CC                 push    ebp
.text:000024CD                 mov     ebp, esp
.text:000024CF                 push    ecx
.text:000024D0                 push    esi
.text:000024D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024D8                 mov     [ebp+var_4], ecx
.text:000024DB                 mov     eax, [ebp+var_4]
.text:000024DE                 cmp     dword ptr [eax], 0
.text:000024E1                 jz      short loc_24FE
.text:000024E3                 mov     ecx, [ebp+var_4]
.text:000024E6                 mov     edx, [ecx]
.text:000024E8                 mov     eax, [ebp+var_4]
.text:000024EB                 mov     ecx, [eax]
.text:000024ED                 mov     edx, [edx]
.text:000024EF                 mov     esi, esp
.text:000024F1                 push    ecx
.text:000024F2                 mov     eax, [edx+8]
.text:000024F5                 call    eax
.text:000024F7                 cmp     esi, esp
.text:000024F9                 call    __RTC_CheckEsp
.text:000024FE
.text:000024FE loc_24FE:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:000024FE                 pop     esi
.text:000024FF                 add     esp, 4
.text:00002502                 cmp     ebp, esp
.text:00002504                 call    __RTC_CheckEsp
.text:00002509                 mov     esp, ebp
.text:0000250B                 pop     ebp
.text:0000250C                 retn
.text:0000250C ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:0000250C
.text:0000250C ; ---------------------------------------------------------------------------
.text:0000250D                 align 10h
.text:0000250D _text           ends
.text:0000250D
.text:00002510 ; ===========================================================================
.text:00002510
.text:00002510 ; Segment type: Pure code
.text:00002510 ; Segment permissions: Read/Execute
.text:00002510 _text           segment para public 'CODE' use32
.text:00002510                 assume cs:_text
.text:00002510                 ;org 2510h
.text:00002510 ; COMDAT (pick any)
.text:00002510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002510
.text:00002510 ; =============== S U B R O U T I N E =======================================
.text:00002510
.text:00002510 ; Attributes: bp-based frame
.text:00002510
.text:00002510 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:00002510                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00002510 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00002510                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+55Fp
.text:00002510
.text:00002510 var_4           = dword ptr -4
.text:00002510
.text:00002510                 push    ebp
.text:00002511                 mov     ebp, esp
.text:00002513                 push    ecx
.text:00002514                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000251B                 mov     [ebp+var_4], ecx
.text:0000251E                 mov     eax, [ebp+var_4]
.text:00002521                 mov     eax, [eax]
.text:00002523                 mov     esp, ebp
.text:00002525                 pop     ebp
.text:00002526                 retn
.text:00002526 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00002526
.text:00002526 ; ---------------------------------------------------------------------------
.text:00002527                 align 4
.text:00002527 _text           ends
.text:00002527
.text:00002528 ; ===========================================================================
.text:00002528
.text:00002528 ; Segment type: Pure code
.text:00002528 ; Segment permissions: Read/Execute
.text:00002528 _text           segment para public 'CODE' use32
.text:00002528                 assume cs:_text
.text:00002528                 ;org 2528h
.text:00002528 ; COMDAT (pick any)
.text:00002528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002528
.text:00002528 ; =============== S U B R O U T I N E =======================================
.text:00002528
.text:00002528 ; Attributes: bp-based frame
.text:00002528
.text:00002528 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator->(void)const
.text:00002528                 public ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00002528 ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00002528                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+22Bp
.text:00002528
.text:00002528 var_4           = dword ptr -4
.text:00002528
.text:00002528                 push    ebp
.text:00002529                 mov     ebp, esp
.text:0000252B                 push    ecx
.text:0000252C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002533                 mov     [ebp+var_4], ecx
.text:00002536                 mov     eax, [ebp+var_4]
.text:00002539                 mov     eax, [eax]
.text:0000253B                 mov     esp, ebp
.text:0000253D                 pop     ebp
.text:0000253E                 retn
.text:0000253E ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:0000253E
.text:0000253E ; ---------------------------------------------------------------------------
.text:0000253F                 align 10h
.text:0000253F _text           ends
.text:0000253F
.text:00002540 ; ===========================================================================
.text:00002540
.text:00002540 ; Segment type: Pure code
.text:00002540 ; Segment permissions: Read/Execute
.text:00002540 _text           segment para public 'CODE' use32
.text:00002540                 assume cs:_text
.text:00002540                 ;org 2540h
.text:00002540 ; COMDAT (pick any)
.text:00002540                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002540
.text:00002540 ; =============== S U B R O U T I N E =======================================
.text:00002540
.text:00002540 ; Attributes: bp-based frame
.text:00002540
.text:00002540 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00002540                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00002540 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00002540                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+1D6p
.text:00002540                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+4ADp ...
.text:00002540
.text:00002540 var_4           = dword ptr -4
.text:00002540 arg_0           = dword ptr  8
.text:00002540
.text:00002540                 push    ebp
.text:00002541                 mov     ebp, esp
.text:00002543                 push    ecx
.text:00002544                 push    esi
.text:00002545                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000254C                 mov     [ebp+var_4], ecx
.text:0000254F                 cmp     [ebp+arg_0], 0
.text:00002553                 jz      short loc_256C
.text:00002555                 mov     eax, [ebp+arg_0]
.text:00002558                 mov     ecx, [eax]
.text:0000255A                 mov     esi, esp
.text:0000255C                 mov     edx, [ebp+arg_0]
.text:0000255F                 push    edx
.text:00002560                 mov     eax, [ecx+4]
.text:00002563                 call    eax
.text:00002565                 cmp     esi, esp
.text:00002567                 call    __RTC_CheckEsp
.text:0000256C
.text:0000256C loc_256C:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:0000256C                 mov     ecx, [ebp+var_4]
.text:0000256F                 cmp     dword ptr [ecx], 0
.text:00002572                 jz      short loc_258F
.text:00002574                 mov     edx, [ebp+var_4]
.text:00002577                 mov     eax, [edx]
.text:00002579                 mov     ecx, [ebp+var_4]
.text:0000257C                 mov     edx, [ecx]
.text:0000257E                 mov     eax, [eax]
.text:00002580                 mov     esi, esp
.text:00002582                 push    edx
.text:00002583                 mov     ecx, [eax+8]
.text:00002586                 call    ecx
.text:00002588                 cmp     esi, esp
.text:0000258A                 call    __RTC_CheckEsp
.text:0000258F
.text:0000258F loc_258F:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:0000258F                 mov     edx, [ebp+var_4]
.text:00002592                 mov     eax, [ebp+arg_0]
.text:00002595                 mov     [edx], eax
.text:00002597                 mov     eax, [ebp+arg_0]
.text:0000259A                 pop     esi
.text:0000259B                 add     esp, 4
.text:0000259E                 cmp     ebp, esp
.text:000025A0                 call    __RTC_CheckEsp
.text:000025A5                 mov     esp, ebp
.text:000025A7                 pop     ebp
.text:000025A8                 retn    4
.text:000025A8 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:000025A8
.text:000025A8 ; ---------------------------------------------------------------------------
.text:000025AB                 align 4
.text:000025AB _text           ends
.text:000025AB
.text:000025AC ; ===========================================================================
.text:000025AC
.text:000025AC ; Segment type: Pure code
.text:000025AC ; Segment permissions: Read/Execute
.text:000025AC _text           segment para public 'CODE' use32
.text:000025AC                 assume cs:_text
.text:000025AC                 ;org 25ACh
.text:000025AC ; COMDAT (pick any)
.text:000025AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025AC
.text:000025AC ; =============== S U B R O U T I N E =======================================
.text:000025AC
.text:000025AC ; Attributes: bp-based frame
.text:000025AC
.text:000025AC ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:000025AC                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000025AC ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000025AC                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+107p
.text:000025AC                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+1E1p ...
.text:000025AC
.text:000025AC var_4           = dword ptr -4
.text:000025AC
.text:000025AC                 push    ebp
.text:000025AD                 mov     ebp, esp
.text:000025AF                 push    ecx
.text:000025B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025B7                 mov     [ebp+var_4], ecx
.text:000025BA                 mov     eax, [ebp+var_4]
.text:000025BD                 mov     eax, [eax]
.text:000025BF                 mov     esp, ebp
.text:000025C1                 pop     ebp
.text:000025C2                 retn
.text:000025C2 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000025C2
.text:000025C2 ; ---------------------------------------------------------------------------
.text:000025C3                 align 4
.text:000025C3 _text           ends
.text:000025C3
.text:000025C4 ; ===========================================================================
.text:000025C4
.text:000025C4 ; Segment type: Pure code
.text:000025C4 ; Segment permissions: Read/Execute
.text:000025C4 _text           segment para public 'CODE' use32
.text:000025C4                 assume cs:_text
.text:000025C4                 ;org 25C4h
.text:000025C4 ; COMDAT (pick any)
.text:000025C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025C4
.text:000025C4 ; =============== S U B R O U T I N E =======================================
.text:000025C4
.text:000025C4 ; Attributes: bp-based frame
.text:000025C4
.text:000025C4 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:000025C4                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000025C4 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000025C4                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+6Ep
.text:000025C4                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+752p
.text:000025C4
.text:000025C4 var_4           = dword ptr -4
.text:000025C4
.text:000025C4                 push    ebp
.text:000025C5                 mov     ebp, esp
.text:000025C7                 push    ecx
.text:000025C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025CF                 mov     [ebp+var_4], ecx
.text:000025D2                 mov     eax, [ebp+var_4]
.text:000025D5                 mov     eax, [eax]
.text:000025D7                 mov     esp, ebp
.text:000025D9                 pop     ebp
.text:000025DA                 retn
.text:000025DA ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000025DA
.text:000025DA ; ---------------------------------------------------------------------------
.text:000025DB                 align 4
.text:000025DB _text           ends
.text:000025DB
.text:000025DC ; ===========================================================================
.text:000025DC
.text:000025DC ; Segment type: Pure code
.text:000025DC ; Segment permissions: Read/Execute
.text:000025DC _text           segment para public 'CODE' use32
.text:000025DC                 assume cs:_text
.text:000025DC                 ;org 25DCh
.text:000025DC ; COMDAT (pick any)
.text:000025DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025DC
.text:000025DC ; =============== S U B R O U T I N E =======================================
.text:000025DC
.text:000025DC ; Attributes: bp-based frame
.text:000025DC
.text:000025DC ; public: unsigned int __thiscall CRecordVector<unsigned int>::Size(void)const
.text:000025DC                 public ?Size@?$CRecordVector@I@@QBEIXZ
.text:000025DC ?Size@?$CRecordVector@I@@QBEIXZ proc near
.text:000025DC                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+1F1p
.text:000025DC                                         ; NArchive::NCab::CMvDatabaseEx::Check(void)+142p
.text:000025DC
.text:000025DC var_4           = dword ptr -4
.text:000025DC
.text:000025DC                 push    ebp
.text:000025DD                 mov     ebp, esp
.text:000025DF                 push    ecx
.text:000025E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025E7                 mov     [ebp+var_4], ecx
.text:000025EA                 mov     eax, [ebp+var_4]
.text:000025ED                 mov     eax, [eax+4]
.text:000025F0                 mov     esp, ebp
.text:000025F2                 pop     ebp
.text:000025F3                 retn
.text:000025F3 ?Size@?$CRecordVector@I@@QBEIXZ endp
.text:000025F3
.text:000025F3 _text           ends
.text:000025F3
.text:000025F4 ; ===========================================================================
.text:000025F4
.text:000025F4 ; Segment type: Pure code
.text:000025F4 ; Segment permissions: Read/Execute
.text:000025F4 _text           segment para public 'CODE' use32
.text:000025F4                 assume cs:_text
.text:000025F4                 ;org 25F4h
.text:000025F4 ; COMDAT (pick any)
.text:000025F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025F4
.text:000025F4 ; =============== S U B R O U T I N E =======================================
.text:000025F4
.text:000025F4 ; Attributes: bp-based frame
.text:000025F4
.text:000025F4 ; public: void __thiscall CRecordVector<unsigned int>::Clear(void)
.text:000025F4                 public ?Clear@?$CRecordVector@I@@QAEXXZ
.text:000025F4 ?Clear@?$CRecordVector@I@@QAEXXZ proc near
.text:000025F4                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+38p
.text:000025F4
.text:000025F4 var_4           = dword ptr -4
.text:000025F4
.text:000025F4                 push    ebp
.text:000025F5                 mov     ebp, esp
.text:000025F7                 push    ecx
.text:000025F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025FF                 mov     [ebp+var_4], ecx
.text:00002602                 mov     eax, [ebp+var_4]
.text:00002605                 mov     dword ptr [eax+4], 0
.text:0000260C                 mov     esp, ebp
.text:0000260E                 pop     ebp
.text:0000260F                 retn
.text:0000260F ?Clear@?$CRecordVector@I@@QAEXXZ endp
.text:0000260F
.text:0000260F _text           ends
.text:0000260F
.text:00002610 ; ===========================================================================
.text:00002610
.text:00002610 ; Segment type: Pure code
.text:00002610 ; Segment permissions: Read/Execute
.text:00002610 _text           segment para public 'CODE' use32
.text:00002610                 assume cs:_text
.text:00002610                 ;org 2610h
.text:00002610 ; COMDAT (pick any)
.text:00002610                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002610
.text:00002610 ; =============== S U B R O U T I N E =======================================
.text:00002610
.text:00002610 ; Attributes: bp-based frame
.text:00002610
.text:00002610 ; public: unsigned int __thiscall CRecordVector<unsigned int>::Add(unsigned int)
.text:00002610                 public ?Add@?$CRecordVector@I@@QAEII@Z
.text:00002610 ?Add@?$CRecordVector@I@@QAEII@Z proc near
.text:00002610                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+205p
.text:00002610
.text:00002610 var_8           = dword ptr -8
.text:00002610 var_4           = dword ptr -4
.text:00002610 arg_0           = dword ptr  8
.text:00002610
.text:00002610                 push    ebp
.text:00002611                 mov     ebp, esp
.text:00002613                 sub     esp, 8
.text:00002616                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000261D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002624                 mov     [ebp+var_4], ecx
.text:00002627                 mov     ecx, [ebp+var_4]
.text:0000262A                 call    ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<uint>::ReserveOnePosition(void)
.text:0000262F                 mov     eax, [ebp+var_4]
.text:00002632                 mov     ecx, [eax+4]
.text:00002635                 mov     edx, [ebp+var_4]
.text:00002638                 mov     eax, [edx]
.text:0000263A                 mov     edx, [ebp+arg_0]
.text:0000263D                 mov     [eax+ecx*4], edx
.text:00002640                 mov     eax, [ebp+var_4]
.text:00002643                 mov     ecx, [eax+4]
.text:00002646                 mov     [ebp+var_8], ecx
.text:00002649                 mov     edx, [ebp+var_4]
.text:0000264C                 mov     eax, [edx+4]
.text:0000264F                 add     eax, 1
.text:00002652                 mov     ecx, [ebp+var_4]
.text:00002655                 mov     [ecx+4], eax
.text:00002658                 mov     eax, [ebp+var_8]
.text:0000265B                 add     esp, 8
.text:0000265E                 cmp     ebp, esp
.text:00002660                 call    __RTC_CheckEsp
.text:00002665                 mov     esp, ebp
.text:00002667                 pop     ebp
.text:00002668                 retn    4
.text:00002668 ?Add@?$CRecordVector@I@@QAEII@Z endp
.text:00002668
.text:00002668 ; ---------------------------------------------------------------------------
.text:0000266B                 align 4
.text:0000266B _text           ends
.text:0000266B
.text:0000266C ; ===========================================================================
.text:0000266C
.text:0000266C ; Segment type: Pure code
.text:0000266C ; Segment permissions: Read/Execute
.text:0000266C _text           segment para public 'CODE' use32
.text:0000266C                 assume cs:_text
.text:0000266C                 ;org 266Ch
.text:0000266C ; COMDAT (pick any)
.text:0000266C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000266C
.text:0000266C ; =============== S U B R O U T I N E =======================================
.text:0000266C
.text:0000266C ; Attributes: bp-based frame
.text:0000266C
.text:0000266C ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:0000266C                 public ??0?$CBuffer@E@@QAE@XZ
.text:0000266C ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+B7p
.text:0000266C
.text:0000266C var_4           = dword ptr -4
.text:0000266C
.text:0000266C                 push    ebp
.text:0000266D                 mov     ebp, esp
.text:0000266F                 push    ecx
.text:00002670                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002677                 mov     [ebp+var_4], ecx
.text:0000267A                 mov     eax, [ebp+var_4]
.text:0000267D                 mov     dword ptr [eax], 0
.text:00002683                 mov     ecx, [ebp+var_4]
.text:00002686                 mov     dword ptr [ecx+4], 0
.text:0000268D                 mov     eax, [ebp+var_4]
.text:00002690                 mov     esp, ebp
.text:00002692                 pop     ebp
.text:00002693                 retn
.text:00002693 ??0?$CBuffer@E@@QAE@XZ endp
.text:00002693
.text:00002693 _text           ends
.text:00002693
.text:00002694 ; ===========================================================================
.text:00002694
.text:00002694 ; Segment type: Pure code
.text:00002694 ; Segment permissions: Read/Execute
.text:00002694 _text           segment para public 'CODE' use32
.text:00002694                 assume cs:_text
.text:00002694                 ;org 2694h
.text:00002694 ; COMDAT (pick any)
.text:00002694                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002694
.text:00002694 ; =============== S U B R O U T I N E =======================================
.text:00002694
.text:00002694 ; Attributes: bp-based frame
.text:00002694
.text:00002694 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:00002694                 public ??1?$CBuffer@E@@QAE@XZ
.text:00002694 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+13Ap
.text:00002694                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+299p ...
.text:00002694
.text:00002694 var_8           = dword ptr -8
.text:00002694 var_4           = dword ptr -4
.text:00002694
.text:00002694                 push    ebp
.text:00002695                 mov     ebp, esp
.text:00002697                 sub     esp, 8
.text:0000269A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000026A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026A8                 mov     [ebp+var_4], ecx
.text:000026AB                 mov     eax, [ebp+var_4]
.text:000026AE                 mov     ecx, [eax]
.text:000026B0                 mov     [ebp+var_8], ecx
.text:000026B3                 mov     edx, [ebp+var_8]
.text:000026B6                 push    edx             ; void *
.text:000026B7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000026BC                 add     esp, 4
.text:000026BF                 add     esp, 8
.text:000026C2                 cmp     ebp, esp
.text:000026C4                 call    __RTC_CheckEsp
.text:000026C9                 mov     esp, ebp
.text:000026CB                 pop     ebp
.text:000026CC                 retn
.text:000026CC ??1?$CBuffer@E@@QAE@XZ endp
.text:000026CC
.text:000026CC ; ---------------------------------------------------------------------------
.text:000026CD                 align 10h
.text:000026CD _text           ends
.text:000026CD
.text:000026D0 ; ===========================================================================
.text:000026D0
.text:000026D0 ; Segment type: Pure code
.text:000026D0 ; Segment permissions: Read/Execute
.text:000026D0 _text           segment para public 'CODE' use32
.text:000026D0                 assume cs:_text
.text:000026D0                 ;org 26D0h
.text:000026D0 ; COMDAT (pick any)
.text:000026D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000026D0
.text:000026D0 ; =============== S U B R O U T I N E =======================================
.text:000026D0
.text:000026D0 ; Attributes: bp-based frame
.text:000026D0
.text:000026D0 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:000026D0                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:000026D0 ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+86p
.text:000026D0                                         ; NArchive::NCab::CInArchive::ReadName(AString &)+C4p ...
.text:000026D0
.text:000026D0 var_4           = dword ptr -4
.text:000026D0
.text:000026D0                 push    ebp
.text:000026D1                 mov     ebp, esp
.text:000026D3                 push    ecx
.text:000026D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026DB                 mov     [ebp+var_4], ecx
.text:000026DE                 mov     eax, [ebp+var_4]
.text:000026E1                 mov     eax, [eax]
.text:000026E3                 mov     esp, ebp
.text:000026E5                 pop     ebp
.text:000026E6                 retn
.text:000026E6 ??B?$CBuffer@E@@QAEPAEXZ endp
.text:000026E6
.text:000026E6 ; ---------------------------------------------------------------------------
.text:000026E7                 align 4
.text:000026E7 _text           ends
.text:000026E7
.text:000026E8 ; ===========================================================================
.text:000026E8
.text:000026E8 ; Segment type: Pure code
.text:000026E8 ; Segment permissions: Read/Execute
.text:000026E8 _text           segment para public 'CODE' use32
.text:000026E8                 assume cs:_text
.text:000026E8                 ;org 26E8h
.text:000026E8 ; COMDAT (pick any)
.text:000026E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000026E8
.text:000026E8 ; =============== S U B R O U T I N E =======================================
.text:000026E8
.text:000026E8 ; Attributes: bp-based frame
.text:000026E8
.text:000026E8 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:000026E8                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:000026E8 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+9Fp
.text:000026E8                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+573p
.text:000026E8
.text:000026E8 var_4           = dword ptr -4
.text:000026E8
.text:000026E8                 push    ebp
.text:000026E9                 mov     ebp, esp
.text:000026EB                 push    ecx
.text:000026EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026F3                 mov     [ebp+var_4], ecx
.text:000026F6                 mov     eax, [ebp+var_4]
.text:000026F9                 mov     eax, [eax+4]
.text:000026FC                 mov     esp, ebp
.text:000026FE                 pop     ebp
.text:000026FF                 retn
.text:000026FF ?Size@?$CBuffer@E@@QBEIXZ endp
.text:000026FF
.text:000026FF _text           ends
.text:000026FF
.text:00002700 ; ===========================================================================
.text:00002700
.text:00002700 ; Segment type: Pure code
.text:00002700 ; Segment permissions: Read/Execute
.text:00002700 _text           segment para public 'CODE' use32
.text:00002700                 assume cs:_text
.text:00002700                 ;org 2700h
.text:00002700 ; COMDAT (pick any)
.text:00002700                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002700
.text:00002700 ; =============== S U B R O U T I N E =======================================
.text:00002700
.text:00002700 ; Attributes: bp-based frame
.text:00002700
.text:00002700 ; public: void __thiscall CBuffer<unsigned char>::Alloc(unsigned int)
.text:00002700                 public ?Alloc@?$CBuffer@E@@QAEXI@Z
.text:00002700 ?Alloc@?$CBuffer@E@@QAEXI@Z proc near   ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+20Cp
.text:00002700                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+363p ...
.text:00002700
.text:00002700 var_8           = dword ptr -8
.text:00002700 var_4           = dword ptr -4
.text:00002700 arg_0           = dword ptr  8
.text:00002700
.text:00002700                 push    ebp
.text:00002701                 mov     ebp, esp
.text:00002703                 sub     esp, 8
.text:00002706                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000270D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002714                 mov     [ebp+var_4], ecx
.text:00002717                 mov     eax, [ebp+var_4]
.text:0000271A                 mov     ecx, [ebp+arg_0]
.text:0000271D                 cmp     ecx, [eax+4]
.text:00002720                 jz      short loc_2750
.text:00002722                 mov     ecx, [ebp+var_4]
.text:00002725                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:0000272A                 cmp     [ebp+arg_0], 0
.text:0000272E                 jz      short loc_2750
.text:00002730                 mov     edx, [ebp+arg_0]
.text:00002733                 push    edx             ; unsigned int
.text:00002734                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002739                 add     esp, 4
.text:0000273C                 mov     [ebp+var_8], eax
.text:0000273F                 mov     eax, [ebp+var_4]
.text:00002742                 mov     ecx, [ebp+var_8]
.text:00002745                 mov     [eax], ecx
.text:00002747                 mov     edx, [ebp+var_4]
.text:0000274A                 mov     eax, [ebp+arg_0]
.text:0000274D                 mov     [edx+4], eax
.text:00002750
.text:00002750 loc_2750:                               ; CODE XREF: CBuffer<uchar>::Alloc(uint)+20j
.text:00002750                                         ; CBuffer<uchar>::Alloc(uint)+2Ej
.text:00002750                 add     esp, 8
.text:00002753                 cmp     ebp, esp
.text:00002755                 call    __RTC_CheckEsp
.text:0000275A                 mov     esp, ebp
.text:0000275C                 pop     ebp
.text:0000275D                 retn    4
.text:0000275D ?Alloc@?$CBuffer@E@@QAEXI@Z endp
.text:0000275D
.text:0000275D _text           ends
.text:0000275D
.text:00002760 ; ===========================================================================
.text:00002760
.text:00002760 ; Segment type: Pure code
.text:00002760 ; Segment permissions: Read/Execute
.text:00002760 _text           segment para public 'CODE' use32
.text:00002760                 assume cs:_text
.text:00002760                 ;org 2760h
.text:00002760 ; COMDAT (pick any)
.text:00002760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002760
.text:00002760 ; =============== S U B R O U T I N E =======================================
.text:00002760
.text:00002760 ; Attributes: bp-based frame
.text:00002760
.text:00002760 ; public: void __thiscall CBuffer<unsigned char>::ChangeSize_KeepData(unsigned int, unsigned int)
.text:00002760                 public ?ChangeSize_KeepData@?$CBuffer@E@@QAEXII@Z
.text:00002760 ?ChangeSize_KeepData@?$CBuffer@E@@QAEXII@Z proc near
.text:00002760                                         ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+B9p
.text:00002760
.text:00002760 var_10          = dword ptr -10h
.text:00002760 var_C           = dword ptr -0Ch
.text:00002760 Dst             = dword ptr -8
.text:00002760 var_4           = dword ptr -4
.text:00002760 arg_0           = dword ptr  8
.text:00002760 arg_4           = dword ptr  0Ch
.text:00002760
.text:00002760                 push    ebp
.text:00002761                 mov     ebp, esp
.text:00002763                 sub     esp, 10h
.text:00002766                 mov     eax, 0CCCCCCCCh
.text:0000276B                 mov     [ebp+var_10], eax
.text:0000276E                 mov     [ebp+var_C], eax
.text:00002771                 mov     [ebp+Dst], eax
.text:00002774                 mov     [ebp+var_4], eax
.text:00002777                 mov     [ebp+var_4], ecx
.text:0000277A                 mov     eax, [ebp+var_4]
.text:0000277D                 mov     ecx, [ebp+arg_0]
.text:00002780                 cmp     ecx, [eax+4]
.text:00002783                 jnz     short loc_2787
.text:00002785                 jmp     short loc_2804
.text:00002787 ; ---------------------------------------------------------------------------
.text:00002787
.text:00002787 loc_2787:                               ; CODE XREF: CBuffer<uchar>::ChangeSize_KeepData(uint,uint)+23j
.text:00002787                 mov     [ebp+Dst], 0
.text:0000278E                 cmp     [ebp+arg_0], 0
.text:00002792                 jz      short loc_27DF
.text:00002794                 mov     edx, [ebp+arg_0]
.text:00002797                 push    edx             ; unsigned int
.text:00002798                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000279D                 add     esp, 4
.text:000027A0                 mov     [ebp+var_C], eax
.text:000027A3                 mov     eax, [ebp+var_C]
.text:000027A6                 mov     [ebp+Dst], eax
.text:000027A9                 mov     ecx, [ebp+var_4]
.text:000027AC                 cmp     dword ptr [ecx+4], 0
.text:000027B0                 jz      short loc_27DF
.text:000027B2                 mov     edx, [ebp+arg_0]
.text:000027B5                 push    edx
.text:000027B6                 mov     eax, [ebp+arg_4]
.text:000027B9                 push    eax
.text:000027BA                 mov     ecx, [ebp+var_4]
.text:000027BD                 mov     edx, [ecx+4]
.text:000027C0                 push    edx
.text:000027C1                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:000027C6                 push    eax
.text:000027C7                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:000027CC                 push    eax             ; Size
.text:000027CD                 mov     eax, [ebp+var_4]
.text:000027D0                 mov     ecx, [eax]
.text:000027D2                 push    ecx             ; Src
.text:000027D3                 mov     edx, [ebp+Dst]
.text:000027D6                 push    edx             ; Dst
.text:000027D7                 call    _memcpy
.text:000027DC                 add     esp, 0Ch
.text:000027DF
.text:000027DF loc_27DF:                               ; CODE XREF: CBuffer<uchar>::ChangeSize_KeepData(uint,uint)+32j
.text:000027DF                                         ; CBuffer<uchar>::ChangeSize_KeepData(uint,uint)+50j
.text:000027DF                 mov     eax, [ebp+var_4]
.text:000027E2                 mov     ecx, [eax]
.text:000027E4                 mov     [ebp+var_10], ecx
.text:000027E7                 mov     edx, [ebp+var_10]
.text:000027EA                 push    edx             ; void *
.text:000027EB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000027F0                 add     esp, 4
.text:000027F3                 mov     eax, [ebp+var_4]
.text:000027F6                 mov     ecx, [ebp+Dst]
.text:000027F9                 mov     [eax], ecx
.text:000027FB                 mov     edx, [ebp+var_4]
.text:000027FE                 mov     eax, [ebp+arg_0]
.text:00002801                 mov     [edx+4], eax
.text:00002804
.text:00002804 loc_2804:                               ; CODE XREF: CBuffer<uchar>::ChangeSize_KeepData(uint,uint)+25j
.text:00002804                 add     esp, 10h
.text:00002807                 cmp     ebp, esp
.text:00002809                 call    __RTC_CheckEsp
.text:0000280E                 mov     esp, ebp
.text:00002810                 pop     ebp
.text:00002811                 retn    8
.text:00002811 ?ChangeSize_KeepData@?$CBuffer@E@@QAEXII@Z endp
.text:00002811
.text:00002811 _text           ends
.text:00002811
.text:00002814 ; ===========================================================================
.text:00002814
.text:00002814 ; Segment type: Pure code
.text:00002814 ; Segment permissions: Read/Execute
.text:00002814 _text           segment para public 'CODE' use32
.text:00002814                 assume cs:_text
.text:00002814                 ;org 2814h
.text:00002814 ; COMDAT (pick any)
.text:00002814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002814
.text:00002814 ; =============== S U B R O U T I N E =======================================
.text:00002814
.text:00002814 ; Attributes: bp-based frame
.text:00002814
.text:00002814 ; public: unsigned int __thiscall CRecordVector<struct NArchive::NCab::CFolder>::Size(void)const
.text:00002814                 public ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ
.text:00002814 ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ proc near
.text:00002814                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+8DCp
.text:00002814                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+8F2p ...
.text:00002814
.text:00002814 var_4           = dword ptr -4
.text:00002814
.text:00002814                 push    ebp
.text:00002815                 mov     ebp, esp
.text:00002817                 push    ecx
.text:00002818                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000281F                 mov     [ebp+var_4], ecx
.text:00002822                 mov     eax, [ebp+var_4]
.text:00002825                 mov     eax, [eax+4]
.text:00002828                 mov     esp, ebp
.text:0000282A                 pop     ebp
.text:0000282B                 retn
.text:0000282B ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ endp
.text:0000282B
.text:0000282B _text           ends
.text:0000282B
.text:0000282C ; ===========================================================================
.text:0000282C
.text:0000282C ; Segment type: Pure code
.text:0000282C ; Segment permissions: Read/Execute
.text:0000282C _text           segment para public 'CODE' use32
.text:0000282C                 assume cs:_text
.text:0000282C                 ;org 282Ch
.text:0000282C ; COMDAT (pick any)
.text:0000282C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000282C
.text:0000282C ; =============== S U B R O U T I N E =======================================
.text:0000282C
.text:0000282C ; Attributes: bp-based frame
.text:0000282C
.text:0000282C ; public: bool __thiscall CRecordVector<struct NArchive::NCab::CFolder>::IsEmpty(void)const
.text:0000282C                 public ?IsEmpty@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBE_NXZ
.text:0000282C ?IsEmpty@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBE_NXZ proc near
.text:0000282C                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+71p
.text:0000282C                                         ; NArchive::NCab::CMvDatabaseEx::Check(void)+80p
.text:0000282C
.text:0000282C var_4           = dword ptr -4
.text:0000282C
.text:0000282C                 push    ebp
.text:0000282D                 mov     ebp, esp
.text:0000282F                 push    ecx
.text:00002830                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002837                 mov     [ebp+var_4], ecx
.text:0000283A                 mov     eax, [ebp+var_4]
.text:0000283D                 xor     ecx, ecx
.text:0000283F                 cmp     dword ptr [eax+4], 0
.text:00002843                 setz    cl
.text:00002846                 mov     al, cl
.text:00002848                 mov     esp, ebp
.text:0000284A                 pop     ebp
.text:0000284B                 retn
.text:0000284B ?IsEmpty@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBE_NXZ endp
.text:0000284B
.text:0000284B _text           ends
.text:0000284B
.text:0000284C ; ===========================================================================
.text:0000284C
.text:0000284C ; Segment type: Pure code
.text:0000284C ; Segment permissions: Read/Execute
.text:0000284C _text           segment para public 'CODE' use32
.text:0000284C                 assume cs:_text
.text:0000284C                 ;org 284Ch
.text:0000284C ; COMDAT (pick any)
.text:0000284C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000284C
.text:0000284C ; =============== S U B R O U T I N E =======================================
.text:0000284C
.text:0000284C ; Attributes: bp-based frame
.text:0000284C
.text:0000284C ; public: void __thiscall CRecordVector<struct NArchive::NCab::CFolder>::ClearAndReserve(unsigned int)
.text:0000284C                 public ?ClearAndReserve@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXI@Z
.text:0000284C ?ClearAndReserve@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXI@Z proc near
.text:0000284C                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+662p
.text:0000284C
.text:0000284C var_C           = dword ptr -0Ch
.text:0000284C var_8           = dword ptr -8
.text:0000284C var_4           = dword ptr -4
.text:0000284C arg_0           = dword ptr  8
.text:0000284C
.text:0000284C                 push    ebp
.text:0000284D                 mov     ebp, esp
.text:0000284F                 sub     esp, 0Ch
.text:00002852                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002859                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002860                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002867                 mov     [ebp+var_4], ecx
.text:0000286A                 mov     ecx, [ebp+var_4]
.text:0000286D                 call    ?Clear@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::NCab::CFolder>::Clear(void)
.text:00002872                 mov     eax, [ebp+var_4]
.text:00002875                 mov     ecx, [ebp+arg_0]
.text:00002878                 cmp     ecx, [eax+8]
.text:0000287B                 jbe     short loc_28D4
.text:0000287D                 mov     edx, [ebp+var_4]
.text:00002880                 mov     eax, [edx]
.text:00002882                 mov     [ebp+var_8], eax
.text:00002885                 mov     ecx, [ebp+var_8]
.text:00002888                 push    ecx             ; void *
.text:00002889                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000288E                 add     esp, 4
.text:00002891                 mov     edx, [ebp+var_4]
.text:00002894                 mov     dword ptr [edx], 0
.text:0000289A                 mov     eax, [ebp+var_4]
.text:0000289D                 mov     dword ptr [eax+8], 0
.text:000028A4                 xor     ecx, ecx
.text:000028A6                 mov     eax, [ebp+arg_0]
.text:000028A9                 mov     edx, 8
.text:000028AE                 mul     edx
.text:000028B0                 seto    cl
.text:000028B3                 neg     ecx
.text:000028B5                 or      ecx, eax
.text:000028B7                 push    ecx             ; unsigned int
.text:000028B8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000028BD                 add     esp, 4
.text:000028C0                 mov     [ebp+var_C], eax
.text:000028C3                 mov     eax, [ebp+var_4]
.text:000028C6                 mov     ecx, [ebp+var_C]
.text:000028C9                 mov     [eax], ecx
.text:000028CB                 mov     edx, [ebp+var_4]
.text:000028CE                 mov     eax, [ebp+arg_0]
.text:000028D1                 mov     [edx+8], eax
.text:000028D4
.text:000028D4 loc_28D4:                               ; CODE XREF: CRecordVector<NArchive::NCab::CFolder>::ClearAndReserve(uint)+2Fj
.text:000028D4                 add     esp, 0Ch
.text:000028D7                 cmp     ebp, esp
.text:000028D9                 call    __RTC_CheckEsp
.text:000028DE                 mov     esp, ebp
.text:000028E0                 pop     ebp
.text:000028E1                 retn    4
.text:000028E1 ?ClearAndReserve@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXI@Z endp
.text:000028E1
.text:000028E1 _text           ends
.text:000028E1
.text:000028E4 ; ===========================================================================
.text:000028E4
.text:000028E4 ; Segment type: Pure code
.text:000028E4 ; Segment permissions: Read/Execute
.text:000028E4 _text           segment para public 'CODE' use32
.text:000028E4                 assume cs:_text
.text:000028E4                 ;org 28E4h
.text:000028E4 ; COMDAT (pick any)
.text:000028E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000028E4
.text:000028E4 ; =============== S U B R O U T I N E =======================================
.text:000028E4
.text:000028E4 ; Attributes: bp-based frame
.text:000028E4
.text:000028E4 ; public: void __thiscall CRecordVector<struct NArchive::NCab::CFolder>::Clear(void)
.text:000028E4                 public ?Clear@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXXZ
.text:000028E4 ?Clear@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXXZ proc near
.text:000028E4                                         ; CODE XREF: NArchive::NCab::CDatabase::Clear(void)+1Cp
.text:000028E4                                         ; CRecordVector<NArchive::NCab::CFolder>::ClearAndReserve(uint)+21p
.text:000028E4
.text:000028E4 var_4           = dword ptr -4
.text:000028E4
.text:000028E4                 push    ebp
.text:000028E5                 mov     ebp, esp
.text:000028E7                 push    ecx
.text:000028E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000028EF                 mov     [ebp+var_4], ecx
.text:000028F2                 mov     eax, [ebp+var_4]
.text:000028F5                 mov     dword ptr [eax+4], 0
.text:000028FC                 mov     esp, ebp
.text:000028FE                 pop     ebp
.text:000028FF                 retn
.text:000028FF ?Clear@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXXZ endp
.text:000028FF
.text:000028FF _text           ends
.text:000028FF
.text:00002900 ; ===========================================================================
.text:00002900
.text:00002900 ; Segment type: Pure code
.text:00002900 ; Segment permissions: Read/Execute
.text:00002900 _text           segment para public 'CODE' use32
.text:00002900                 assume cs:_text
.text:00002900                 ;org 2900h
.text:00002900 ; COMDAT (pick any)
.text:00002900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002900
.text:00002900 ; =============== S U B R O U T I N E =======================================
.text:00002900
.text:00002900 ; Attributes: bp-based frame
.text:00002900
.text:00002900 ; public: void __thiscall CRecordVector<struct NArchive::NCab::CFolder>::AddInReserved(struct NArchive::NCab::CFolder)
.text:00002900                 public ?AddInReserved@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXUCFolder@NCab@NArchive@@@Z
.text:00002900 ?AddInReserved@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXUCFolder@NCab@NArchive@@@Z proc near
.text:00002900                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+6F4p
.text:00002900
.text:00002900 var_4           = dword ptr -4
.text:00002900 arg_0           = dword ptr  8
.text:00002900 arg_4           = dword ptr  0Ch
.text:00002900
.text:00002900                 push    ebp
.text:00002901                 mov     ebp, esp
.text:00002903                 push    ecx
.text:00002904                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000290B                 mov     [ebp+var_4], ecx
.text:0000290E                 mov     eax, [ebp+var_4]
.text:00002911                 mov     ecx, [eax+4]
.text:00002914                 mov     edx, [ebp+var_4]
.text:00002917                 mov     eax, [edx]
.text:00002919                 mov     edx, [ebp+arg_0]
.text:0000291C                 mov     [eax+ecx*8], edx
.text:0000291F                 mov     edx, [ebp+arg_4]
.text:00002922                 mov     [eax+ecx*8+4], edx
.text:00002926                 mov     eax, [ebp+var_4]
.text:00002929                 mov     ecx, [eax+4]
.text:0000292C                 add     ecx, 1
.text:0000292F                 mov     edx, [ebp+var_4]
.text:00002932                 mov     [edx+4], ecx
.text:00002935                 mov     esp, ebp
.text:00002937                 pop     ebp
.text:00002938                 retn    8
.text:00002938 ?AddInReserved@?$CRecordVector@UCFolder@NCab@NArchive@@@@QAEXUCFolder@NCab@NArchive@@@Z endp
.text:00002938
.text:00002938 ; ---------------------------------------------------------------------------
.text:0000293B                 align 4
.text:0000293B _text           ends
.text:0000293B
.text:0000293C ; ===========================================================================
.text:0000293C
.text:0000293C ; Segment type: Pure code
.text:0000293C ; Segment permissions: Read/Execute
.text:0000293C _text           segment para public 'CODE' use32
.text:0000293C                 assume cs:_text
.text:0000293C                 ;org 293Ch
.text:0000293C ; COMDAT (pick any)
.text:0000293C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000293C
.text:0000293C ; =============== S U B R O U T I N E =======================================
.text:0000293C
.text:0000293C ; Attributes: bp-based frame
.text:0000293C
.text:0000293C ; public: struct NArchive::NCab::CFolder const & __thiscall CRecordVector<struct NArchive::NCab::CFolder>::Front(void)const
.text:0000293C                 public ?Front@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@XZ
.text:0000293C ?Front@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@XZ proc near
.text:0000293C                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+A1p
.text:0000293C
.text:0000293C var_4           = dword ptr -4
.text:0000293C
.text:0000293C                 push    ebp
.text:0000293D                 mov     ebp, esp
.text:0000293F                 push    ecx
.text:00002940                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002947                 mov     [ebp+var_4], ecx
.text:0000294A                 mov     eax, [ebp+var_4]
.text:0000294D                 mov     eax, [eax]
.text:0000294F                 mov     esp, ebp
.text:00002951                 pop     ebp
.text:00002952                 retn
.text:00002952 ?Front@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@XZ endp
.text:00002952
.text:00002952 ; ---------------------------------------------------------------------------
.text:00002953                 align 4
.text:00002953 _text           ends
.text:00002953
.text:00002954 ; ===========================================================================
.text:00002954
.text:00002954 ; Segment type: Pure code
.text:00002954 ; Segment permissions: Read/Execute
.text:00002954 _text           segment para public 'CODE' use32
.text:00002954                 assume cs:_text
.text:00002954                 ;org 2954h
.text:00002954 ; COMDAT (pick any)
.text:00002954                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002954
.text:00002954 ; =============== S U B R O U T I N E =======================================
.text:00002954
.text:00002954 ; Attributes: bp-based frame
.text:00002954
.text:00002954 ; public: struct NArchive::NCab::CFolder const & __thiscall CRecordVector<struct NArchive::NCab::CFolder>::Back(void)const
.text:00002954                 public ?Back@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@XZ
.text:00002954 ?Back@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@XZ proc near
.text:00002954                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+96p
.text:00002954
.text:00002954 var_4           = dword ptr -4
.text:00002954
.text:00002954                 push    ebp
.text:00002955                 mov     ebp, esp
.text:00002957                 push    ecx
.text:00002958                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000295F                 mov     [ebp+var_4], ecx
.text:00002962                 mov     eax, [ebp+var_4]
.text:00002965                 mov     ecx, [eax+4]
.text:00002968                 mov     edx, [ebp+var_4]
.text:0000296B                 mov     eax, [edx]
.text:0000296D                 lea     eax, [eax+ecx*8-8]
.text:00002971                 mov     esp, ebp
.text:00002973                 pop     ebp
.text:00002974                 retn
.text:00002974 ?Back@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@XZ endp
.text:00002974
.text:00002974 ; ---------------------------------------------------------------------------
.text:00002975                 align 4
.text:00002975 _text           ends
.text:00002975
.text:00002978 ; ===========================================================================
.text:00002978
.text:00002978 ; Segment type: Pure code
.text:00002978 ; Segment permissions: Read/Execute
.text:00002978 _text           segment para public 'CODE' use32
.text:00002978                 assume cs:_text
.text:00002978                 ;org 2978h
.text:00002978 ; COMDAT (pick any)
.text:00002978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002978
.text:00002978 ; =============== S U B R O U T I N E =======================================
.text:00002978
.text:00002978 ; Attributes: bp-based frame
.text:00002978
.text:00002978 ; public: unsigned int __thiscall CObjectVector<struct NArchive::NCab::CItem>::Size(void)const
.text:00002978                 public ?Size@?$CObjectVector@UCItem@NCab@NArchive@@@@QBEIXZ
.text:00002978 ?Size@?$CObjectVector@UCItem@NCab@NArchive@@@@QBEIXZ proc near
.text:00002978                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+CFp
.text:00002978                                         ; NArchive::NCab::CDatabase::IsTherePrevFolder(void)+2Fp
.text:00002978
.text:00002978 var_4           = dword ptr -4
.text:00002978
.text:00002978                 push    ebp
.text:00002979                 mov     ebp, esp
.text:0000297B                 push    ecx
.text:0000297C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002983                 mov     [ebp+var_4], ecx
.text:00002986                 mov     ecx, [ebp+var_4]
.text:00002989                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000298E                 add     esp, 4
.text:00002991                 cmp     ebp, esp
.text:00002993                 call    __RTC_CheckEsp
.text:00002998                 mov     esp, ebp
.text:0000299A                 pop     ebp
.text:0000299B                 retn
.text:0000299B ?Size@?$CObjectVector@UCItem@NCab@NArchive@@@@QBEIXZ endp
.text:0000299B
.text:0000299B _text           ends
.text:0000299B
.text:0000299C ; ===========================================================================
.text:0000299C
.text:0000299C ; Segment type: Pure code
.text:0000299C ; Segment permissions: Read/Execute
.text:0000299C _text           segment para public 'CODE' use32
.text:0000299C                 assume cs:_text
.text:0000299C                 ;org 299Ch
.text:0000299C ; COMDAT (pick any)
.text:0000299C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000299C
.text:0000299C ; =============== S U B R O U T I N E =======================================
.text:0000299C
.text:0000299C ; Attributes: bp-based frame
.text:0000299C
.text:0000299C ; public: void __thiscall CObjectVector<struct NArchive::NCab::CItem>::ClearAndReserve(unsigned int)
.text:0000299C                 public ?ClearAndReserve@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEXI@Z
.text:0000299C ?ClearAndReserve@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEXI@Z proc near
.text:0000299C                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+7FFp
.text:0000299C
.text:0000299C var_4           = dword ptr -4
.text:0000299C arg_0           = dword ptr  8
.text:0000299C
.text:0000299C                 push    ebp
.text:0000299D                 mov     ebp, esp
.text:0000299F                 push    ecx
.text:000029A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000029A7                 mov     [ebp+var_4], ecx
.text:000029AA                 mov     ecx, [ebp+var_4]
.text:000029AD                 call    ?Clear@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NCab::CItem>::Clear(void)
.text:000029B2                 mov     eax, [ebp+arg_0]
.text:000029B5                 push    eax
.text:000029B6                 mov     ecx, [ebp+var_4]
.text:000029B9                 call    ?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ClearAndReserve(uint)
.text:000029BE                 add     esp, 4
.text:000029C1                 cmp     ebp, esp
.text:000029C3                 call    __RTC_CheckEsp
.text:000029C8                 mov     esp, ebp
.text:000029CA                 pop     ebp
.text:000029CB                 retn    4
.text:000029CB ?ClearAndReserve@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEXI@Z endp
.text:000029CB
.text:000029CB ; ---------------------------------------------------------------------------
.text:000029CE                 align 10h
.text:000029CE _text           ends
.text:000029CE
.text:000029D0 ; ===========================================================================
.text:000029D0
.text:000029D0 ; Segment type: Pure code
.text:000029D0 ; Segment permissions: Read/Execute
.text:000029D0 _text           segment para public 'CODE' use32
.text:000029D0                 assume cs:_text
.text:000029D0                 ;org 29D0h
.text:000029D0 ; COMDAT (pick any)
.text:000029D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000029D0
.text:000029D0 ; =============== S U B R O U T I N E =======================================
.text:000029D0
.text:000029D0 ; Attributes: bp-based frame
.text:000029D0
.text:000029D0 ; public: struct NArchive::NCab::CItem const & __thiscall CObjectVector<struct NArchive::NCab::CItem>::operator[](unsigned int)const
.text:000029D0                 public ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z
.text:000029D0 ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z proc near
.text:000029D0                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+7Ap
.text:000029D0                                         ; NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+8Fp ...
.text:000029D0
.text:000029D0 var_4           = dword ptr -4
.text:000029D0 arg_0           = dword ptr  8
.text:000029D0
.text:000029D0                 push    ebp
.text:000029D1                 mov     ebp, esp
.text:000029D3                 push    ecx
.text:000029D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000029DB                 mov     [ebp+var_4], ecx
.text:000029DE                 mov     eax, [ebp+arg_0]
.text:000029E1                 push    eax
.text:000029E2                 mov     ecx, [ebp+var_4]
.text:000029E5                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000029EA                 mov     eax, [eax]
.text:000029EC                 add     esp, 4
.text:000029EF                 cmp     ebp, esp
.text:000029F1                 call    __RTC_CheckEsp
.text:000029F6                 mov     esp, ebp
.text:000029F8                 pop     ebp
.text:000029F9                 retn    4
.text:000029F9 ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z endp
.text:000029F9
.text:000029F9 _text           ends
.text:000029F9
.text:000029FC ; ===========================================================================
.text:000029FC
.text:000029FC ; Segment type: Pure code
.text:000029FC ; Segment permissions: Read/Execute
.text:000029FC _text           segment para public 'CODE' use32
.text:000029FC                 assume cs:_text
.text:000029FC                 ;org 29FCh
.text:000029FC ; COMDAT (pick any)
.text:000029FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000029FC
.text:000029FC ; =============== S U B R O U T I N E =======================================
.text:000029FC
.text:000029FC ; Attributes: bp-based frame
.text:000029FC
.text:000029FC ; public: struct NArchive::NCab::CItem & __thiscall CObjectVector<struct NArchive::NCab::CItem>::operator[](unsigned int)
.text:000029FC                 public ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@I@Z
.text:000029FC ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@I@Z proc near
.text:000029FC                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Check(void)+16Dp
.text:000029FC
.text:000029FC var_4           = dword ptr -4
.text:000029FC arg_0           = dword ptr  8
.text:000029FC
.text:000029FC                 push    ebp
.text:000029FD                 mov     ebp, esp
.text:000029FF                 push    ecx
.text:00002A00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A07                 mov     [ebp+var_4], ecx
.text:00002A0A                 mov     eax, [ebp+arg_0]
.text:00002A0D                 push    eax
.text:00002A0E                 mov     ecx, [ebp+var_4]
.text:00002A11                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00002A16                 mov     eax, [eax]
.text:00002A18                 add     esp, 4
.text:00002A1B                 cmp     ebp, esp
.text:00002A1D                 call    __RTC_CheckEsp
.text:00002A22                 mov     esp, ebp
.text:00002A24                 pop     ebp
.text:00002A25                 retn    4
.text:00002A25 ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@I@Z endp
.text:00002A25
.text:00002A25 _text           ends
.text:00002A25
.text:00002A28 ; ===========================================================================
.text:00002A28
.text:00002A28 ; Segment type: Pure code
.text:00002A28 ; Segment permissions: Read/Execute
.text:00002A28 _text           segment para public 'CODE' use32
.text:00002A28                 assume cs:_text
.text:00002A28                 ;org 2A28h
.text:00002A28 ; COMDAT (pick any)
.text:00002A28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A28
.text:00002A28 ; =============== S U B R O U T I N E =======================================
.text:00002A28
.text:00002A28 ; Attributes: bp-based frame
.text:00002A28
.text:00002A28 ; public: struct NArchive::NCab::CItem & __thiscall CObjectVector<struct NArchive::NCab::CItem>::AddNewInReserved(void)
.text:00002A28                 public ?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ
.text:00002A28 ?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ proc near
.text:00002A28                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+848p
.text:00002A28
.text:00002A28 var_20          = dword ptr -20h
.text:00002A28 var_1C          = dword ptr -1Ch
.text:00002A28 var_18          = dword ptr -18h
.text:00002A28 var_14          = dword ptr -14h
.text:00002A28 var_10          = dword ptr -10h
.text:00002A28 var_C           = dword ptr -0Ch
.text:00002A28 var_4           = dword ptr -4
.text:00002A28
.text:00002A28                 push    ebp
.text:00002A29                 mov     ebp, esp
.text:00002A2B                 push    0FFFFFFFFh
.text:00002A2D                 push    offset __ehhandler$?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ
.text:00002A32                 mov     eax, large fs:0
.text:00002A38                 push    eax
.text:00002A39                 sub     esp, 14h
.text:00002A3C                 mov     eax, 0CCCCCCCCh
.text:00002A41                 mov     [ebp+var_20], eax
.text:00002A44                 mov     [ebp+var_1C], eax
.text:00002A47                 mov     [ebp+var_18], eax
.text:00002A4A                 mov     [ebp+var_14], eax
.text:00002A4D                 mov     [ebp+var_10], eax
.text:00002A50                 mov     eax, dword ptr ds:___security_cookie
.text:00002A55                 xor     eax, ebp
.text:00002A57                 push    eax
.text:00002A58                 lea     eax, [ebp+var_C]
.text:00002A5B                 mov     large fs:0, eax
.text:00002A61                 mov     [ebp+var_10], ecx
.text:00002A64                 push    20h ; ' '       ; unsigned int
.text:00002A66                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002A6B                 add     esp, 4
.text:00002A6E                 mov     [ebp+var_1C], eax
.text:00002A71                 mov     [ebp+var_4], 0
.text:00002A78                 cmp     [ebp+var_1C], 0
.text:00002A7C                 jz      short loc_2A8B
.text:00002A7E                 mov     ecx, [ebp+var_1C] ; this
.text:00002A81                 call    ??0CItem@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CItem::CItem(void)
.text:00002A86                 mov     [ebp+var_20], eax
.text:00002A89                 jmp     short loc_2A92
.text:00002A8B ; ---------------------------------------------------------------------------
.text:00002A8B
.text:00002A8B loc_2A8B:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::AddNewInReserved(void)+54j
.text:00002A8B                 mov     [ebp+var_20], 0
.text:00002A92
.text:00002A92 loc_2A92:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::AddNewInReserved(void)+61j
.text:00002A92                 mov     eax, [ebp+var_20]
.text:00002A95                 mov     [ebp+var_18], eax
.text:00002A98                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002A9F                 mov     ecx, [ebp+var_18]
.text:00002AA2                 mov     [ebp+var_14], ecx
.text:00002AA5                 mov     edx, [ebp+var_14]
.text:00002AA8                 push    edx
.text:00002AA9                 mov     ecx, [ebp+var_10]
.text:00002AAC                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00002AB1                 mov     eax, [ebp+var_14]
.text:00002AB4                 mov     ecx, [ebp+var_C]
.text:00002AB7                 mov     large fs:0, ecx
.text:00002ABE                 pop     ecx
.text:00002ABF                 add     esp, 20h
.text:00002AC2                 cmp     ebp, esp
.text:00002AC4                 call    __RTC_CheckEsp
.text:00002AC9                 mov     esp, ebp
.text:00002ACB                 pop     ebp
.text:00002ACC                 retn
.text:00002ACC ?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ endp
.text:00002ACC
.text:00002ACC ; ---------------------------------------------------------------------------
.text:00002ACD                 align 10h
.text:00002ACD _text           ends
.text:00002ACD
.text$x:00002AD0 ; ===========================================================================
.text$x:00002AD0
.text$x:00002AD0 ; Segment type: Pure code
.text$x:00002AD0 ; Segment permissions: Read/Execute
.text$x:00002AD0 _text$x         segment para public 'CODE' use32
.text$x:00002AD0                 assume cs:_text$x
.text$x:00002AD0                 ;org 2AD0h
.text$x:00002AD0 ; COMDAT (pick associative to section at 2A28)
.text$x:00002AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002AD0
.text$x:00002AD0 ; =============== S U B R O U T I N E =======================================
.text$x:00002AD0
.text$x:00002AD0
.text$x:00002AD0 __unwindfunclet$?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ$0 proc near
.text$x:00002AD0                                         ; DATA XREF: .xdata$x:00002AFCo
.text$x:00002AD0                 mov     eax, [ebp-1Ch]
.text$x:00002AD3                 push    eax             ; void *
.text$x:00002AD4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002AD9                 pop     ecx
.text$x:00002ADA                 retn
.text$x:00002ADA __unwindfunclet$?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ$0 endp
.text$x:00002ADA
.text$x:00002ADB
.text$x:00002ADB ; =============== S U B R O U T I N E =======================================
.text$x:00002ADB
.text$x:00002ADB
.text$x:00002ADB __ehhandler$?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ proc near
.text$x:00002ADB                                         ; DATA XREF: CObjectVector<NArchive::NCab::CItem>::AddNewInReserved(void)+5o
.text$x:00002ADB
.text$x:00002ADB arg_4           = dword ptr  8
.text$x:00002ADB
.text$x:00002ADB                 mov     edx, [esp+arg_4]
.text$x:00002ADF                 lea     eax, [edx+0Ch]
.text$x:00002AE2                 mov     ecx, [edx-18h]
.text$x:00002AE5                 xor     ecx, eax
.text$x:00002AE7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002AEC                 mov     eax, offset __ehfuncinfo$?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ
.text$x:00002AF1                 jmp     ___CxxFrameHandler3
.text$x:00002AF1 __ehhandler$?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ endp
.text$x:00002AF1
.text$x:00002AF1 ; ---------------------------------------------------------------------------
.text$x:00002AF6                 align 4
.text$x:00002AF6 _text$x         ends
.text$x:00002AF6
.xdata$x:00002AF8 ; ===========================================================================
.xdata$x:00002AF8
.xdata$x:00002AF8 ; Segment type: Pure data
.xdata$x:00002AF8 ; Segment permissions: Read
.xdata$x:00002AF8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002AF8                 assume cs:_xdata$x
.xdata$x:00002AF8                 ;org 2AF8h
.xdata$x:00002AF8 ; COMDAT (pick associative to section at 2A28)
.xdata$x:00002AF8 __unwindtable$?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ db 0FFh
.xdata$x:00002AF8                                         ; DATA XREF: .xdata$x:00002B08o
.xdata$x:00002AF9                 db 0FFh
.xdata$x:00002AFA                 db 0FFh
.xdata$x:00002AFB                 db 0FFh
.xdata$x:00002AFC                 dd offset __unwindfunclet$?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ$0
.xdata$x:00002B00 __ehfuncinfo$?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ db  22h ; "
.xdata$x:00002B00                                         ; DATA XREF: __ehhandler$?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ+11o
.xdata$x:00002B01                 db    5
.xdata$x:00002B02                 db  93h ; ô
.xdata$x:00002B03                 db  19h
.xdata$x:00002B04                 db    1
.xdata$x:00002B05                 db    0
.xdata$x:00002B06                 db    0
.xdata$x:00002B07                 db    0
.xdata$x:00002B08                 dd offset __unwindtable$?AddNewInReserved@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@XZ
.xdata$x:00002B0C                 align 20h
.xdata$x:00002B20                 db    1
.xdata$x:00002B21                 db    0
.xdata$x:00002B22                 db    0
.xdata$x:00002B23                 db    0
.xdata$x:00002B23 _xdata$x        ends
.xdata$x:00002B23
.text:00002B24 ; ===========================================================================
.text:00002B24
.text:00002B24 ; Segment type: Pure code
.text:00002B24 ; Segment permissions: Read/Execute
.text:00002B24 _text           segment para public 'CODE' use32
.text:00002B24                 assume cs:_text
.text:00002B24                 ;org 2B24h
.text:00002B24 ; COMDAT (pick any)
.text:00002B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B24
.text:00002B24 ; =============== S U B R O U T I N E =======================================
.text:00002B24
.text:00002B24 ; Attributes: bp-based frame
.text:00002B24
.text:00002B24 ; public: void __thiscall CObjectVector<struct NArchive::NCab::CItem>::Clear(void)
.text:00002B24                 public ?Clear@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEXXZ
.text:00002B24 ?Clear@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEXXZ proc near
.text:00002B24                                         ; CODE XREF: NArchive::NCab::CDatabase::Clear(void)+27p
.text:00002B24                                         ; CObjectVector<NArchive::NCab::CItem>::ClearAndReserve(uint)+11p
.text:00002B24
.text:00002B24 var_14          = dword ptr -14h
.text:00002B24 var_10          = dword ptr -10h
.text:00002B24 var_C           = dword ptr -0Ch
.text:00002B24 var_8           = dword ptr -8
.text:00002B24 var_4           = dword ptr -4
.text:00002B24
.text:00002B24                 push    ebp
.text:00002B25                 mov     ebp, esp
.text:00002B27                 sub     esp, 14h
.text:00002B2A                 mov     eax, 0CCCCCCCCh
.text:00002B2F                 mov     [ebp+var_14], eax
.text:00002B32                 mov     [ebp+var_10], eax
.text:00002B35                 mov     [ebp+var_C], eax
.text:00002B38                 mov     [ebp+var_8], eax
.text:00002B3B                 mov     [ebp+var_4], eax
.text:00002B3E                 mov     [ebp+var_4], ecx
.text:00002B41                 mov     ecx, [ebp+var_4]
.text:00002B44                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00002B49                 mov     [ebp+var_8], eax
.text:00002B4C
.text:00002B4C loc_2B4C:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::Clear(void):loc_2B8Ej
.text:00002B4C                 cmp     [ebp+var_8], 0
.text:00002B50                 jz      short loc_2B90
.text:00002B52                 mov     eax, [ebp+var_8]
.text:00002B55                 sub     eax, 1
.text:00002B58                 mov     [ebp+var_8], eax
.text:00002B5B                 mov     ecx, [ebp+var_8]
.text:00002B5E                 push    ecx
.text:00002B5F                 mov     ecx, [ebp+var_4]
.text:00002B62                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00002B67                 mov     edx, [eax]
.text:00002B69                 mov     [ebp+var_10], edx
.text:00002B6C                 mov     eax, [ebp+var_10]
.text:00002B6F                 mov     [ebp+var_C], eax
.text:00002B72                 cmp     [ebp+var_C], 0
.text:00002B76                 jz      short loc_2B87
.text:00002B78                 push    1
.text:00002B7A                 mov     ecx, [ebp+var_C]
.text:00002B7D                 call    ??_GCItem@NCab@NArchive@@QAEPAXI@Z ; NArchive::NCab::CItem::`scalar deleting destructor'(uint)
.text:00002B82                 mov     [ebp+var_14], eax
.text:00002B85                 jmp     short loc_2B8E
.text:00002B87 ; ---------------------------------------------------------------------------
.text:00002B87
.text:00002B87 loc_2B87:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::Clear(void)+52j
.text:00002B87                 mov     [ebp+var_14], 0
.text:00002B8E
.text:00002B8E loc_2B8E:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::Clear(void)+61j
.text:00002B8E                 jmp     short loc_2B4C
.text:00002B90 ; ---------------------------------------------------------------------------
.text:00002B90
.text:00002B90 loc_2B90:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::Clear(void)+2Cj
.text:00002B90                 mov     ecx, [ebp+var_4]
.text:00002B93                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00002B98                 add     esp, 14h
.text:00002B9B                 cmp     ebp, esp
.text:00002B9D                 call    __RTC_CheckEsp
.text:00002BA2                 mov     esp, ebp
.text:00002BA4                 pop     ebp
.text:00002BA5                 retn
.text:00002BA5 ?Clear@?$CObjectVector@UCItem@NCab@NArchive@@@@QAEXXZ endp
.text:00002BA5
.text:00002BA5 ; ---------------------------------------------------------------------------
.text:00002BA6                 align 4
.text:00002BA6 _text           ends
.text:00002BA6
.text:00002BA8 ; ===========================================================================
.text:00002BA8
.text:00002BA8 ; Segment type: Pure code
.text:00002BA8 ; Segment permissions: Read/Execute
.text:00002BA8 _text           segment para public 'CODE' use32
.text:00002BA8                 assume cs:_text
.text:00002BA8                 ;org 2BA8h
.text:00002BA8 ; COMDAT (pick any)
.text:00002BA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BA8
.text:00002BA8 ; =============== S U B R O U T I N E =======================================
.text:00002BA8
.text:00002BA8 ; Attributes: bp-based frame
.text:00002BA8
.text:00002BA8 ; public: unsigned int __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::Size(void)const
.text:00002BA8                 public ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ
.text:00002BA8 ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ proc near
.text:00002BA8                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+59p
.text:00002BA8                                         ; NArchive::NCab::CMvDatabaseEx::Check(void)+30p
.text:00002BA8
.text:00002BA8 var_4           = dword ptr -4
.text:00002BA8
.text:00002BA8                 push    ebp
.text:00002BA9                 mov     ebp, esp
.text:00002BAB                 push    ecx
.text:00002BAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BB3                 mov     [ebp+var_4], ecx
.text:00002BB6                 mov     ecx, [ebp+var_4]
.text:00002BB9                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00002BBE                 add     esp, 4
.text:00002BC1                 cmp     ebp, esp
.text:00002BC3                 call    __RTC_CheckEsp
.text:00002BC8                 mov     esp, ebp
.text:00002BCA                 pop     ebp
.text:00002BCB                 retn
.text:00002BCB ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ endp
.text:00002BCB
.text:00002BCB _text           ends
.text:00002BCB
.text:00002BCC ; ===========================================================================
.text:00002BCC
.text:00002BCC ; Segment type: Pure code
.text:00002BCC ; Segment permissions: Read/Execute
.text:00002BCC _text           segment para public 'CODE' use32
.text:00002BCC                 assume cs:_text
.text:00002BCC                 ;org 2BCCh
.text:00002BCC ; COMDAT (pick any)
.text:00002BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BCC
.text:00002BCC ; =============== S U B R O U T I N E =======================================
.text:00002BCC
.text:00002BCC ; Attributes: bp-based frame
.text:00002BCC
.text:00002BCC ; public: struct NArchive::NCab::CDatabaseEx const & __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::operator[](unsigned int)const
.text:00002BCC                 public ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z
.text:00002BCC ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z proc near
.text:00002BCC                                         ; CODE XREF: NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+25p
.text:00002BCC                                         ; NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+36p ...
.text:00002BCC
.text:00002BCC var_4           = dword ptr -4
.text:00002BCC arg_0           = dword ptr  8
.text:00002BCC
.text:00002BCC                 push    ebp
.text:00002BCD                 mov     ebp, esp
.text:00002BCF                 push    ecx
.text:00002BD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BD7                 mov     [ebp+var_4], ecx
.text:00002BDA                 mov     eax, [ebp+arg_0]
.text:00002BDD                 push    eax
.text:00002BDE                 mov     ecx, [ebp+var_4]
.text:00002BE1                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00002BE6                 mov     eax, [eax]
.text:00002BE8                 add     esp, 4
.text:00002BEB                 cmp     ebp, esp
.text:00002BED                 call    __RTC_CheckEsp
.text:00002BF2                 mov     esp, ebp
.text:00002BF4                 pop     ebp
.text:00002BF5                 retn    4
.text:00002BF5 ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z endp
.text:00002BF5
.text:00002BF5 _text           ends
.text:00002BF5
.text:00002BF8 ; ===========================================================================
.text:00002BF8
.text:00002BF8 ; Segment type: Pure code
.text:00002BF8 ; Segment permissions: Read/Execute
.text:00002BF8 _text           segment para public 'CODE' use32
.text:00002BF8                 assume cs:_text
.text:00002BF8                 ;org 2BF8h
.text:00002BF8 ; COMDAT (pick any)
.text:00002BF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BF8
.text:00002BF8 ; =============== S U B R O U T I N E =======================================
.text:00002BF8
.text:00002BF8 ; Attributes: bp-based frame
.text:00002BF8
.text:00002BF8 ; public: struct NArchive::NCab::CDatabaseEx & __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::operator[](unsigned int)
.text:00002BF8                 public ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z
.text:00002BF8 ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z proc near
.text:00002BF8                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+54p
.text:00002BF8                                         ; NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+65p ...
.text:00002BF8
.text:00002BF8 var_4           = dword ptr -4
.text:00002BF8 arg_0           = dword ptr  8
.text:00002BF8
.text:00002BF8                 push    ebp
.text:00002BF9                 mov     ebp, esp
.text:00002BFB                 push    ecx
.text:00002BFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C03                 mov     [ebp+var_4], ecx
.text:00002C06                 mov     eax, [ebp+arg_0]
.text:00002C09                 push    eax
.text:00002C0A                 mov     ecx, [ebp+var_4]
.text:00002C0D                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00002C12                 mov     eax, [eax]
.text:00002C14                 add     esp, 4
.text:00002C17                 cmp     ebp, esp
.text:00002C19                 call    __RTC_CheckEsp
.text:00002C1E                 mov     esp, ebp
.text:00002C20                 pop     ebp
.text:00002C21                 retn    4
.text:00002C21 ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z endp
.text:00002C21
.text:00002C21 _text           ends
.text:00002C21
.text:00002C24 ; ===========================================================================
.text:00002C24
.text:00002C24 ; Segment type: Pure code
.text:00002C24 ; Segment permissions: Read/Execute
.text:00002C24 _text           segment para public 'CODE' use32
.text:00002C24                 assume cs:_text
.text:00002C24                 ;org 2C24h
.text:00002C24 ; COMDAT (pick any)
.text:00002C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C24
.text:00002C24 ; =============== S U B R O U T I N E =======================================
.text:00002C24
.text:00002C24 ; Attributes: bp-based frame
.text:00002C24
.text:00002C24 ; public: unsigned int __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::Size(void)const
.text:00002C24                 public ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ
.text:00002C24 ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ proc near
.text:00002C24                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+FFp
.text:00002C24                                         ; NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+140p ...
.text:00002C24
.text:00002C24 var_4           = dword ptr -4
.text:00002C24
.text:00002C24                 push    ebp
.text:00002C25                 mov     ebp, esp
.text:00002C27                 push    ecx
.text:00002C28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C2F                 mov     [ebp+var_4], ecx
.text:00002C32                 mov     eax, [ebp+var_4]
.text:00002C35                 mov     eax, [eax+4]
.text:00002C38                 mov     esp, ebp
.text:00002C3A                 pop     ebp
.text:00002C3B                 retn
.text:00002C3B ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ endp
.text:00002C3B
.text:00002C3B _text           ends
.text:00002C3B
.text:00002C3C ; ===========================================================================
.text:00002C3C
.text:00002C3C ; Segment type: Pure code
.text:00002C3C ; Segment permissions: Read/Execute
.text:00002C3C _text           segment para public 'CODE' use32
.text:00002C3C                 assume cs:_text
.text:00002C3C                 ;org 2C3Ch
.text:00002C3C ; COMDAT (pick any)
.text:00002C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C3C
.text:00002C3C ; =============== S U B R O U T I N E =======================================
.text:00002C3C
.text:00002C3C ; Attributes: bp-based frame
.text:00002C3C
.text:00002C3C ; public: void __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::Clear(void)
.text:00002C3C                 public ?Clear@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXXZ
.text:00002C3C ?Clear@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXXZ proc near
.text:00002C3C                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+22p
.text:00002C3C
.text:00002C3C var_4           = dword ptr -4
.text:00002C3C
.text:00002C3C                 push    ebp
.text:00002C3D                 mov     ebp, esp
.text:00002C3F                 push    ecx
.text:00002C40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C47                 mov     [ebp+var_4], ecx
.text:00002C4A                 mov     eax, [ebp+var_4]
.text:00002C4D                 mov     dword ptr [eax+4], 0
.text:00002C54                 mov     esp, ebp
.text:00002C56                 pop     ebp
.text:00002C57                 retn
.text:00002C57 ?Clear@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXXZ endp
.text:00002C57
.text:00002C57 _text           ends
.text:00002C57
.text:00002C58 ; ===========================================================================
.text:00002C58
.text:00002C58 ; Segment type: Pure code
.text:00002C58 ; Segment permissions: Read/Execute
.text:00002C58 _text           segment para public 'CODE' use32
.text:00002C58                 assume cs:_text
.text:00002C58                 ;org 2C58h
.text:00002C58 ; COMDAT (pick any)
.text:00002C58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C58
.text:00002C58 ; =============== S U B R O U T I N E =======================================
.text:00002C58
.text:00002C58 ; Attributes: bp-based frame
.text:00002C58
.text:00002C58 ; public: void __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::DeleteFrom(unsigned int)
.text:00002C58                 public ?DeleteFrom@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXI@Z
.text:00002C58 ?DeleteFrom@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXI@Z proc near
.text:00002C58                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+1A9p
.text:00002C58
.text:00002C58 var_4           = dword ptr -4
.text:00002C58 arg_0           = dword ptr  8
.text:00002C58
.text:00002C58                 push    ebp
.text:00002C59                 mov     ebp, esp
.text:00002C5B                 push    ecx
.text:00002C5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C63                 mov     [ebp+var_4], ecx
.text:00002C66                 mov     eax, [ebp+var_4]
.text:00002C69                 mov     ecx, [ebp+arg_0]
.text:00002C6C                 mov     [eax+4], ecx
.text:00002C6F                 mov     esp, ebp
.text:00002C71                 pop     ebp
.text:00002C72                 retn    4
.text:00002C72 ?DeleteFrom@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXI@Z endp
.text:00002C72
.text:00002C72 ; ---------------------------------------------------------------------------
.text:00002C75                 align 4
.text:00002C75 _text           ends
.text:00002C75
.text:00002C78 ; ===========================================================================
.text:00002C78
.text:00002C78 ; Segment type: Pure code
.text:00002C78 ; Segment permissions: Read/Execute
.text:00002C78 _text           segment para public 'CODE' use32
.text:00002C78                 assume cs:_text
.text:00002C78                 ;org 2C78h
.text:00002C78 ; COMDAT (pick any)
.text:00002C78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C78
.text:00002C78 ; =============== S U B R O U T I N E =======================================
.text:00002C78
.text:00002C78 ; Attributes: bp-based frame
.text:00002C78
.text:00002C78 ; public: unsigned int __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::Add(struct NArchive::NCab::CMvItem)
.text:00002C78                 public ?Add@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEIUCMvItem@NCab@NArchive@@@Z
.text:00002C78 ?Add@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEIUCMvItem@NCab@NArchive@@@Z proc near
.text:00002C78                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+EDp
.text:00002C78
.text:00002C78 var_8           = dword ptr -8
.text:00002C78 var_4           = dword ptr -4
.text:00002C78 arg_0           = dword ptr  8
.text:00002C78 arg_4           = dword ptr  0Ch
.text:00002C78
.text:00002C78                 push    ebp
.text:00002C79                 mov     ebp, esp
.text:00002C7B                 sub     esp, 8
.text:00002C7E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002C85                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C8C                 mov     [ebp+var_4], ecx
.text:00002C8F                 mov     ecx, [ebp+var_4]
.text:00002C92                 call    ?ReserveOnePosition@?$CRecordVector@UCMvItem@NCab@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::NCab::CMvItem>::ReserveOnePosition(void)
.text:00002C97                 mov     eax, [ebp+var_4]
.text:00002C9A                 mov     ecx, [eax+4]
.text:00002C9D                 mov     edx, [ebp+var_4]
.text:00002CA0                 mov     eax, [edx]
.text:00002CA2                 mov     edx, [ebp+arg_0]
.text:00002CA5                 mov     [eax+ecx*8], edx
.text:00002CA8                 mov     edx, [ebp+arg_4]
.text:00002CAB                 mov     [eax+ecx*8+4], edx
.text:00002CAF                 mov     eax, [ebp+var_4]
.text:00002CB2                 mov     ecx, [eax+4]
.text:00002CB5                 mov     [ebp+var_8], ecx
.text:00002CB8                 mov     edx, [ebp+var_4]
.text:00002CBB                 mov     eax, [edx+4]
.text:00002CBE                 add     eax, 1
.text:00002CC1                 mov     ecx, [ebp+var_4]
.text:00002CC4                 mov     [ecx+4], eax
.text:00002CC7                 mov     eax, [ebp+var_8]
.text:00002CCA                 add     esp, 8
.text:00002CCD                 cmp     ebp, esp
.text:00002CCF                 call    __RTC_CheckEsp
.text:00002CD4                 mov     esp, ebp
.text:00002CD6                 pop     ebp
.text:00002CD7                 retn    8
.text:00002CD7 ?Add@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEIUCMvItem@NCab@NArchive@@@Z endp
.text:00002CD7
.text:00002CD7 ; ---------------------------------------------------------------------------
.text:00002CDA                 align 4
.text:00002CDA _text           ends
.text:00002CDA
.text:00002CDC ; ===========================================================================
.text:00002CDC
.text:00002CDC ; Segment type: Pure code
.text:00002CDC ; Segment permissions: Read/Execute
.text:00002CDC _text           segment para public 'CODE' use32
.text:00002CDC                 assume cs:_text
.text:00002CDC                 ;org 2CDCh
.text:00002CDC ; COMDAT (pick any)
.text:00002CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002CDC
.text:00002CDC ; =============== S U B R O U T I N E =======================================
.text:00002CDC
.text:00002CDC ; Attributes: bp-based frame
.text:00002CDC
.text:00002CDC ; public: struct NArchive::NCab::CMvItem & __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::operator[](unsigned int)
.text:00002CDC                 public ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z
.text:00002CDC ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z proc near
.text:00002CDC                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+31p
.text:00002CDC                                         ; NArchive::NCab::CMvDatabaseEx::AreItemsEqual(uint,uint)+43p ...
.text:00002CDC
.text:00002CDC var_4           = dword ptr -4
.text:00002CDC arg_0           = dword ptr  8
.text:00002CDC
.text:00002CDC                 push    ebp
.text:00002CDD                 mov     ebp, esp
.text:00002CDF                 push    ecx
.text:00002CE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CE7                 mov     [ebp+var_4], ecx
.text:00002CEA                 mov     eax, [ebp+var_4]
.text:00002CED                 mov     ecx, [eax]
.text:00002CEF                 mov     edx, [ebp+arg_0]
.text:00002CF2                 lea     eax, [ecx+edx*8]
.text:00002CF5                 mov     esp, ebp
.text:00002CF7                 pop     ebp
.text:00002CF8                 retn    4
.text:00002CF8 ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z endp
.text:00002CF8
.text:00002CF8 ; ---------------------------------------------------------------------------
.text:00002CFB                 align 4
.text:00002CFB _text           ends
.text:00002CFB
.text:00002CFC ; ===========================================================================
.text:00002CFC
.text:00002CFC ; Segment type: Pure code
.text:00002CFC ; Segment permissions: Read/Execute
.text:00002CFC _text           segment para public 'CODE' use32
.text:00002CFC                 assume cs:_text
.text:00002CFC                 ;org 2CFCh
.text:00002CFC ; COMDAT (pick any)
.text:00002CFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002CFC
.text:00002CFC ; =============== S U B R O U T I N E =======================================
.text:00002CFC
.text:00002CFC ; Attributes: bp-based frame
.text:00002CFC
.text:00002CFC ; public: void __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::Sort(int (__stdcall *)(struct NArchive::NCab::CMvItem const *, struct NArchive::NCab::CMvItem const *, void *), void *)
.text:00002CFC                 public ?Sort@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXP6GHPBUCMvItem@NCab@NArchive@@0PAX@Z1@Z
.text:00002CFC ?Sort@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXP6GHPBUCMvItem@NCab@NArchive@@0PAX@Z1@Z proc near
.text:00002CFC                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+11Cp
.text:00002CFC
.text:00002CFC var_20          = dword ptr -20h
.text:00002CFC var_1C          = dword ptr -1Ch
.text:00002CFC var_18          = dword ptr -18h
.text:00002CFC var_14          = dword ptr -14h
.text:00002CFC var_10          = dword ptr -10h
.text:00002CFC var_C           = dword ptr -0Ch
.text:00002CFC var_8           = dword ptr -8
.text:00002CFC var_4           = dword ptr -4
.text:00002CFC arg_0           = dword ptr  8
.text:00002CFC arg_4           = dword ptr  0Ch
.text:00002CFC
.text:00002CFC                 push    ebp
.text:00002CFD                 mov     ebp, esp
.text:00002CFF                 sub     esp, 20h
.text:00002D02                 push    esi
.text:00002D03                 mov     eax, 0CCCCCCCCh
.text:00002D08                 mov     [ebp+var_20], eax
.text:00002D0B                 mov     [ebp+var_1C], eax
.text:00002D0E                 mov     [ebp+var_18], eax
.text:00002D11                 mov     [ebp+var_14], eax
.text:00002D14                 mov     [ebp+var_10], eax
.text:00002D17                 mov     [ebp+var_C], eax
.text:00002D1A                 mov     [ebp+var_8], eax
.text:00002D1D                 mov     [ebp+var_4], eax
.text:00002D20                 mov     [ebp+var_4], ecx
.text:00002D23                 mov     eax, [ebp+var_4]
.text:00002D26                 mov     ecx, [eax+4]
.text:00002D29                 mov     [ebp+var_8], ecx
.text:00002D2C                 cmp     [ebp+var_8], 1
.text:00002D30                 ja      short loc_2D37
.text:00002D32                 jmp     loc_2DCF
.text:00002D37 ; ---------------------------------------------------------------------------
.text:00002D37
.text:00002D37 loc_2D37:                               ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::Sort(int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+34j
.text:00002D37                 mov     ecx, [ebp+var_4]
.text:00002D3A                 call    ?Front@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@XZ ; CRecordVector<NArchive::NCab::CMvItem>::Front(void)
.text:00002D3F                 sub     eax, 8
.text:00002D42                 mov     [ebp+var_C], eax
.text:00002D45                 mov     edx, [ebp+var_8]
.text:00002D48                 shr     edx, 1
.text:00002D4A                 mov     [ebp+var_10], edx
.text:00002D4D
.text:00002D4D loc_2D4D:                               ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::Sort(int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+73j
.text:00002D4D                 mov     eax, [ebp+arg_4]
.text:00002D50                 push    eax
.text:00002D51                 mov     ecx, [ebp+arg_0]
.text:00002D54                 push    ecx
.text:00002D55                 mov     edx, [ebp+var_8]
.text:00002D58                 push    edx
.text:00002D59                 mov     eax, [ebp+var_10]
.text:00002D5C                 push    eax
.text:00002D5D                 mov     ecx, [ebp+var_C]
.text:00002D60                 push    ecx
.text:00002D61                 call    ?SortRefDown@?$CRecordVector@UCMvItem@NCab@NArchive@@@@SGXPAUCMvItem@NCab@NArchive@@IIP6GHPBU234@1PAX@Z2@Z ; CRecordVector<NArchive::NCab::CMvItem>::SortRefDown(NArchive::NCab::CMvItem *,uint,uint,int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)
.text:00002D66                 mov     edx, [ebp+var_10]
.text:00002D69                 sub     edx, 1
.text:00002D6C                 mov     [ebp+var_10], edx
.text:00002D6F                 jnz     short loc_2D4D
.text:00002D71
.text:00002D71 loc_2D71:                               ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::Sort(int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+D1j
.text:00002D71                 mov     eax, [ebp+var_8]
.text:00002D74                 mov     ecx, [ebp+var_C]
.text:00002D77                 mov     edx, [ecx+eax*8]
.text:00002D7A                 mov     eax, [ecx+eax*8+4]
.text:00002D7E                 mov     [ebp+var_1C], edx
.text:00002D81                 mov     [ebp+var_18], eax
.text:00002D84                 mov     ecx, [ebp+var_C]
.text:00002D87                 mov     edx, [ecx+8]
.text:00002D8A                 mov     eax, [ecx+0Ch]
.text:00002D8D                 mov     ecx, [ebp+var_8]
.text:00002D90                 mov     esi, [ebp+var_C]
.text:00002D93                 mov     [esi+ecx*8], edx
.text:00002D96                 mov     [esi+ecx*8+4], eax
.text:00002D9A                 mov     edx, [ebp+var_8]
.text:00002D9D                 sub     edx, 1
.text:00002DA0                 mov     [ebp+var_8], edx
.text:00002DA3                 mov     eax, [ebp+var_C]
.text:00002DA6                 mov     ecx, [ebp+var_1C]
.text:00002DA9                 mov     [eax+8], ecx
.text:00002DAC                 mov     edx, [ebp+var_18]
.text:00002DAF                 mov     [eax+0Ch], edx
.text:00002DB2                 mov     eax, [ebp+arg_4]
.text:00002DB5                 push    eax
.text:00002DB6                 mov     ecx, [ebp+arg_0]
.text:00002DB9                 push    ecx
.text:00002DBA                 mov     edx, [ebp+var_8]
.text:00002DBD                 push    edx
.text:00002DBE                 push    1
.text:00002DC0                 mov     eax, [ebp+var_C]
.text:00002DC3                 push    eax
.text:00002DC4                 call    ?SortRefDown@?$CRecordVector@UCMvItem@NCab@NArchive@@@@SGXPAUCMvItem@NCab@NArchive@@IIP6GHPBU234@1PAX@Z2@Z ; CRecordVector<NArchive::NCab::CMvItem>::SortRefDown(NArchive::NCab::CMvItem *,uint,uint,int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)
.text:00002DC9                 cmp     [ebp+var_8], 1
.text:00002DCD                 ja      short loc_2D71
.text:00002DCF
.text:00002DCF loc_2DCF:                               ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::Sort(int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+36j
.text:00002DCF                 push    edx
.text:00002DD0                 mov     ecx, ebp
.text:00002DD2                 push    eax
.text:00002DD3                 lea     edx, $LN12
.text:00002DD9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002DDE                 pop     eax
.text:00002DDF                 pop     edx
.text:00002DE0                 pop     esi
.text:00002DE1                 add     esp, 20h
.text:00002DE4                 cmp     ebp, esp
.text:00002DE6                 call    __RTC_CheckEsp
.text:00002DEB                 mov     esp, ebp
.text:00002DED                 pop     ebp
.text:00002DEE                 retn    8
.text:00002DEE ?Sort@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXP6GHPBUCMvItem@NCab@NArchive@@0PAX@Z1@Z endp
.text:00002DEE
.text:00002DEE ; ---------------------------------------------------------------------------
.text:00002DF1                 align 4
.text:00002DF4 $LN12           dd 1                    ; DATA XREF: CRecordVector<NArchive::NCab::CMvItem>::Sort(int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+D7o
.text:00002DF8                 dd offset $LN11
.text:00002DFC $LN11           dd 0FFFFFFE4h, 8        ; DATA XREF: .text:00002DF8o
.text:00002E04                 dd offset $LN10_0       ; "temp"
.text:00002E08 $LN10_0         db 'temp',0             ; DATA XREF: .text:00002E04o
.text:00002E0D                 align 10h
.text:00002E0D _text           ends
.text:00002E0D
.text:00002E10 ; ===========================================================================
.text:00002E10
.text:00002E10 ; Segment type: Pure code
.text:00002E10 ; Segment permissions: Read/Execute
.text:00002E10 _text           segment para public 'CODE' use32
.text:00002E10                 assume cs:_text
.text:00002E10                 ;org 2E10h
.text:00002E10 ; COMDAT (pick any)
.text:00002E10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E10
.text:00002E10 ; =============== S U B R O U T I N E =======================================
.text:00002E10
.text:00002E10 ; Attributes: bp-based frame
.text:00002E10
.text:00002E10 ; public: void __thiscall CRecordVector<int>::Clear(void)
.text:00002E10                 public ?Clear@?$CRecordVector@H@@QAEXXZ
.text:00002E10 ?Clear@?$CRecordVector@H@@QAEXXZ proc near
.text:00002E10                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+2Dp
.text:00002E10
.text:00002E10 var_4           = dword ptr -4
.text:00002E10
.text:00002E10                 push    ebp
.text:00002E11                 mov     ebp, esp
.text:00002E13                 push    ecx
.text:00002E14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E1B                 mov     [ebp+var_4], ecx
.text:00002E1E                 mov     eax, [ebp+var_4]
.text:00002E21                 mov     dword ptr [eax+4], 0
.text:00002E28                 mov     esp, ebp
.text:00002E2A                 pop     ebp
.text:00002E2B                 retn
.text:00002E2B ?Clear@?$CRecordVector@H@@QAEXXZ endp
.text:00002E2B
.text:00002E2B _text           ends
.text:00002E2B
.text:00002E2C ; ===========================================================================
.text:00002E2C
.text:00002E2C ; Segment type: Pure code
.text:00002E2C ; Segment permissions: Read/Execute
.text:00002E2C _text           segment para public 'CODE' use32
.text:00002E2C                 assume cs:_text
.text:00002E2C                 ;org 2E2Ch
.text:00002E2C ; COMDAT (pick any)
.text:00002E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E2C
.text:00002E2C ; =============== S U B R O U T I N E =======================================
.text:00002E2C
.text:00002E2C ; Attributes: bp-based frame
.text:00002E2C
.text:00002E2C ; public: unsigned int __thiscall CRecordVector<int>::Add(int)
.text:00002E2C                 public ?Add@?$CRecordVector@H@@QAEIH@Z
.text:00002E2C ?Add@?$CRecordVector@H@@QAEIH@Z proc near
.text:00002E2C                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)+9Ep
.text:00002E2C
.text:00002E2C var_8           = dword ptr -8
.text:00002E2C var_4           = dword ptr -4
.text:00002E2C arg_0           = dword ptr  8
.text:00002E2C
.text:00002E2C                 push    ebp
.text:00002E2D                 mov     ebp, esp
.text:00002E2F                 sub     esp, 8
.text:00002E32                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002E39                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E40                 mov     [ebp+var_4], ecx
.text:00002E43                 mov     ecx, [ebp+var_4]
.text:00002E46                 call    ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ; CRecordVector<int>::ReserveOnePosition(void)
.text:00002E4B                 mov     eax, [ebp+var_4]
.text:00002E4E                 mov     ecx, [eax+4]
.text:00002E51                 mov     edx, [ebp+var_4]
.text:00002E54                 mov     eax, [edx]
.text:00002E56                 mov     edx, [ebp+arg_0]
.text:00002E59                 mov     [eax+ecx*4], edx
.text:00002E5C                 mov     eax, [ebp+var_4]
.text:00002E5F                 mov     ecx, [eax+4]
.text:00002E62                 mov     [ebp+var_8], ecx
.text:00002E65                 mov     edx, [ebp+var_4]
.text:00002E68                 mov     eax, [edx+4]
.text:00002E6B                 add     eax, 1
.text:00002E6E                 mov     ecx, [ebp+var_4]
.text:00002E71                 mov     [ecx+4], eax
.text:00002E74                 mov     eax, [ebp+var_8]
.text:00002E77                 add     esp, 8
.text:00002E7A                 cmp     ebp, esp
.text:00002E7C                 call    __RTC_CheckEsp
.text:00002E81                 mov     esp, ebp
.text:00002E83                 pop     ebp
.text:00002E84                 retn    4
.text:00002E84 ?Add@?$CRecordVector@H@@QAEIH@Z endp
.text:00002E84
.text:00002E84 ; ---------------------------------------------------------------------------
.text:00002E87                 align 4
.text:00002E87 _text           ends
.text:00002E87
.text:00002E88 ; ===========================================================================
.text:00002E88
.text:00002E88 ; Segment type: Pure code
.text:00002E88 ; Segment permissions: Read/Execute
.text:00002E88 _text           segment para public 'CODE' use32
.text:00002E88                 assume cs:_text
.text:00002E88                 ;org 2E88h
.text:00002E88 ; COMDAT (pick any)
.text:00002E88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E88
.text:00002E88 ; =============== S U B R O U T I N E =======================================
.text:00002E88
.text:00002E88 ; Attributes: bp-based frame
.text:00002E88
.text:00002E88 ; public: int const & __thiscall CRecordVector<int>::operator[](unsigned int)const
.text:00002E88                 public ??A?$CRecordVector@H@@QBEABHI@Z
.text:00002E88 ??A?$CRecordVector@H@@QBEABHI@Z proc near
.text:00002E88                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)+35p
.text:00002E88
.text:00002E88 var_4           = dword ptr -4
.text:00002E88 arg_0           = dword ptr  8
.text:00002E88
.text:00002E88                 push    ebp
.text:00002E89                 mov     ebp, esp
.text:00002E8B                 push    ecx
.text:00002E8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E93                 mov     [ebp+var_4], ecx
.text:00002E96                 mov     eax, [ebp+var_4]
.text:00002E99                 mov     ecx, [eax]
.text:00002E9B                 mov     edx, [ebp+arg_0]
.text:00002E9E                 lea     eax, [ecx+edx*4]
.text:00002EA1                 mov     esp, ebp
.text:00002EA3                 pop     ebp
.text:00002EA4                 retn    4
.text:00002EA4 ??A?$CRecordVector@H@@QBEABHI@Z endp
.text:00002EA4
.text:00002EA4 ; ---------------------------------------------------------------------------
.text:00002EA7                 align 4
.text:00002EA7 _text           ends
.text:00002EA7
.text:00002EA8 ; ===========================================================================
.text:00002EA8
.text:00002EA8 ; Segment type: Pure code
.text:00002EA8 ; Segment permissions: Read/Execute
.text:00002EA8 _text           segment para public 'CODE' use32
.text:00002EA8                 assume cs:_text
.text:00002EA8                 ;org 2EA8h
.text:00002EA8 ; COMDAT (pick any)
.text:00002EA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002EA8
.text:00002EA8 ; =============== S U B R O U T I N E =======================================
.text:00002EA8
.text:00002EA8 ; Attributes: bp-based frame
.text:00002EA8
.text:00002EA8 ; _DWORD __thiscall NArchive::NCab::CItem::CItem(NArchive::NCab::CItem *__hidden this)
.text:00002EA8                 public ??0CItem@NCab@NArchive@@QAE@XZ
.text:00002EA8 ??0CItem@NCab@NArchive@@QAE@XZ proc near
.text:00002EA8                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::AddNewInReserved(void)+59p
.text:00002EA8
.text:00002EA8 var_4           = dword ptr -4
.text:00002EA8
.text:00002EA8                 push    ebp
.text:00002EA9                 mov     ebp, esp
.text:00002EAB                 push    ecx
.text:00002EAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EB3                 mov     [ebp+var_4], ecx
.text:00002EB6                 mov     ecx, [ebp+var_4]
.text:00002EB9                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00002EBE                 mov     eax, [ebp+var_4]
.text:00002EC1                 add     esp, 4
.text:00002EC4                 cmp     ebp, esp
.text:00002EC6                 call    __RTC_CheckEsp
.text:00002ECB                 mov     esp, ebp
.text:00002ECD                 pop     ebp
.text:00002ECE                 retn
.text:00002ECE ??0CItem@NCab@NArchive@@QAE@XZ endp
.text:00002ECE
.text:00002ECE ; ---------------------------------------------------------------------------
.text:00002ECF                 align 10h
.text:00002ECF _text           ends
.text:00002ECF
.text:00002ED0 ; ===========================================================================
.text:00002ED0
.text:00002ED0 ; Segment type: Pure code
.text:00002ED0 ; Segment permissions: Read/Execute
.text:00002ED0 _text           segment para public 'CODE' use32
.text:00002ED0                 assume cs:_text
.text:00002ED0                 ;org 2ED0h
.text:00002ED0 ; COMDAT (pick any)
.text:00002ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002ED0
.text:00002ED0 ; =============== S U B R O U T I N E =======================================
.text:00002ED0
.text:00002ED0 ; Attributes: bp-based frame
.text:00002ED0
.text:00002ED0 ; public: void * __thiscall NArchive::NCab::CItem::`scalar deleting destructor'(unsigned int)
.text:00002ED0                 public ??_GCItem@NCab@NArchive@@QAEPAXI@Z
.text:00002ED0 ??_GCItem@NCab@NArchive@@QAEPAXI@Z proc near
.text:00002ED0                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::Clear(void)+59p
.text:00002ED0
.text:00002ED0 var_4           = dword ptr -4
.text:00002ED0 arg_0           = dword ptr  8
.text:00002ED0
.text:00002ED0                 push    ebp
.text:00002ED1                 mov     ebp, esp
.text:00002ED3                 push    ecx
.text:00002ED4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EDB                 mov     [ebp+var_4], ecx
.text:00002EDE                 mov     ecx, [ebp+var_4] ; this
.text:00002EE1                 call    ??1CItem@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CItem::~CItem(void)
.text:00002EE6                 mov     eax, [ebp+arg_0]
.text:00002EE9                 and     eax, 1
.text:00002EEC                 jz      short loc_2EFA
.text:00002EEE                 mov     ecx, [ebp+var_4]
.text:00002EF1                 push    ecx             ; void *
.text:00002EF2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002EF7                 add     esp, 4
.text:00002EFA
.text:00002EFA loc_2EFA:                               ; CODE XREF: NArchive::NCab::CItem::`scalar deleting destructor'(uint)+1Cj
.text:00002EFA                 mov     eax, [ebp+var_4]
.text:00002EFD                 add     esp, 4
.text:00002F00                 cmp     ebp, esp
.text:00002F02                 call    __RTC_CheckEsp
.text:00002F07                 mov     esp, ebp
.text:00002F09                 pop     ebp
.text:00002F0A                 retn    4
.text:00002F0A ??_GCItem@NCab@NArchive@@QAEPAXI@Z endp
.text:00002F0A
.text:00002F0A ; ---------------------------------------------------------------------------
.text:00002F0D                 align 10h
.text:00002F0D _text           ends
.text:00002F0D
.text:00002F10 ; ===========================================================================
.text:00002F10
.text:00002F10 ; Segment type: Pure code
.text:00002F10 ; Segment permissions: Read/Execute
.text:00002F10 _text           segment para public 'CODE' use32
.text:00002F10                 assume cs:_text
.text:00002F10                 ;org 2F10h
.text:00002F10 ; COMDAT (pick any)
.text:00002F10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F10
.text:00002F10 ; =============== S U B R O U T I N E =======================================
.text:00002F10
.text:00002F10 ; Attributes: bp-based frame
.text:00002F10
.text:00002F10 ; _DWORD __thiscall NArchive::NCab::CItem::~CItem(NArchive::NCab::CItem *__hidden this)
.text:00002F10                 public ??1CItem@NCab@NArchive@@QAE@XZ
.text:00002F10 ??1CItem@NCab@NArchive@@QAE@XZ proc near
.text:00002F10                                         ; CODE XREF: NArchive::NCab::CItem::`scalar deleting destructor'(uint)+11p
.text:00002F10
.text:00002F10 var_4           = dword ptr -4
.text:00002F10
.text:00002F10                 push    ebp
.text:00002F11                 mov     ebp, esp
.text:00002F13                 push    ecx
.text:00002F14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F1B                 mov     [ebp+var_4], ecx
.text:00002F1E                 mov     ecx, [ebp+var_4] ; this
.text:00002F21                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00002F26                 add     esp, 4
.text:00002F29                 cmp     ebp, esp
.text:00002F2B                 call    __RTC_CheckEsp
.text:00002F30                 mov     esp, ebp
.text:00002F32                 pop     ebp
.text:00002F33                 retn
.text:00002F33 ??1CItem@NCab@NArchive@@QAE@XZ endp
.text:00002F33
.text:00002F33 _text           ends
.text:00002F33
.text:00002F34 ; ===========================================================================
.text:00002F34
.text:00002F34 ; Segment type: Pure code
.text:00002F34 ; Segment permissions: Read/Execute
.text:00002F34 _text           segment para public 'CODE' use32
.text:00002F34                 assume cs:_text
.text:00002F34                 ;org 2F34h
.text:00002F34 ; COMDAT (pick any)
.text:00002F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F34
.text:00002F34 ; =============== S U B R O U T I N E =======================================
.text:00002F34
.text:00002F34 ; Attributes: bp-based frame
.text:00002F34
.text:00002F34 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00002F34                 public ??1AString@@QAE@XZ
.text:00002F34 ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::NCab::CItem::~CItem(void)+11p
.text:00002F34
.text:00002F34 var_8           = dword ptr -8
.text:00002F34 var_4           = dword ptr -4
.text:00002F34
.text:00002F34                 push    ebp
.text:00002F35                 mov     ebp, esp
.text:00002F37                 sub     esp, 8
.text:00002F3A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002F41                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F48                 mov     [ebp+var_4], ecx
.text:00002F4B                 mov     eax, [ebp+var_4]
.text:00002F4E                 mov     ecx, [eax]
.text:00002F50                 mov     [ebp+var_8], ecx
.text:00002F53                 mov     edx, [ebp+var_8]
.text:00002F56                 push    edx             ; void *
.text:00002F57                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002F5C                 add     esp, 4
.text:00002F5F                 add     esp, 8
.text:00002F62                 cmp     ebp, esp
.text:00002F64                 call    __RTC_CheckEsp
.text:00002F69                 mov     esp, ebp
.text:00002F6B                 pop     ebp
.text:00002F6C                 retn
.text:00002F6C ??1AString@@QAE@XZ endp
.text:00002F6C
.text:00002F6C ; ---------------------------------------------------------------------------
.text:00002F6D                 align 10h
.text:00002F6D _text           ends
.text:00002F6D
.text:00002F70 ; ===========================================================================
.text:00002F70
.text:00002F70 ; Segment type: Pure code
.text:00002F70 ; Segment permissions: Read/Execute
.text:00002F70 _text           segment para public 'CODE' use32
.text:00002F70                 assume cs:_text
.text:00002F70                 ;org 2F70h
.text:00002F70 ; COMDAT (pick any)
.text:00002F70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F70
.text:00002F70 ; =============== S U B R O U T I N E =======================================
.text:00002F70
.text:00002F70 ; Attributes: bp-based frame
.text:00002F70
.text:00002F70 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00002F70                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00002F70 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00002F70                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::Size(void)+11p
.text:00002F70                                         ; CObjectVector<NArchive::NCab::CItem>::Clear(void)+20p ...
.text:00002F70
.text:00002F70 var_4           = dword ptr -4
.text:00002F70
.text:00002F70                 push    ebp
.text:00002F71                 mov     ebp, esp
.text:00002F73                 push    ecx
.text:00002F74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F7B                 mov     [ebp+var_4], ecx
.text:00002F7E                 mov     eax, [ebp+var_4]
.text:00002F81                 mov     eax, [eax+4]
.text:00002F84                 mov     esp, ebp
.text:00002F86                 pop     ebp
.text:00002F87                 retn
.text:00002F87 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00002F87
.text:00002F87 _text           ends
.text:00002F87
.text:00002F88 ; ===========================================================================
.text:00002F88
.text:00002F88 ; Segment type: Pure code
.text:00002F88 ; Segment permissions: Read/Execute
.text:00002F88 _text           segment para public 'CODE' use32
.text:00002F88                 assume cs:_text
.text:00002F88                 ;org 2F88h
.text:00002F88 ; COMDAT (pick any)
.text:00002F88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F88
.text:00002F88 ; =============== S U B R O U T I N E =======================================
.text:00002F88
.text:00002F88 ; Attributes: bp-based frame
.text:00002F88
.text:00002F88 ; public: void __thiscall CRecordVector<void *>::ClearAndReserve(unsigned int)
.text:00002F88                 public ?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z
.text:00002F88 ?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00002F88                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::ClearAndReserve(uint)+1Dp
.text:00002F88
.text:00002F88 var_C           = dword ptr -0Ch
.text:00002F88 var_8           = dword ptr -8
.text:00002F88 var_4           = dword ptr -4
.text:00002F88 arg_0           = dword ptr  8
.text:00002F88
.text:00002F88                 push    ebp
.text:00002F89                 mov     ebp, esp
.text:00002F8B                 sub     esp, 0Ch
.text:00002F8E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002F95                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002F9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FA3                 mov     [ebp+var_4], ecx
.text:00002FA6                 mov     ecx, [ebp+var_4]
.text:00002FA9                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00002FAE                 mov     eax, [ebp+var_4]
.text:00002FB1                 mov     ecx, [ebp+arg_0]
.text:00002FB4                 cmp     ecx, [eax+8]
.text:00002FB7                 jbe     short loc_3010
.text:00002FB9                 mov     edx, [ebp+var_4]
.text:00002FBC                 mov     eax, [edx]
.text:00002FBE                 mov     [ebp+var_8], eax
.text:00002FC1                 mov     ecx, [ebp+var_8]
.text:00002FC4                 push    ecx             ; void *
.text:00002FC5                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002FCA                 add     esp, 4
.text:00002FCD                 mov     edx, [ebp+var_4]
.text:00002FD0                 mov     dword ptr [edx], 0
.text:00002FD6                 mov     eax, [ebp+var_4]
.text:00002FD9                 mov     dword ptr [eax+8], 0
.text:00002FE0                 xor     ecx, ecx
.text:00002FE2                 mov     eax, [ebp+arg_0]
.text:00002FE5                 mov     edx, 4
.text:00002FEA                 mul     edx
.text:00002FEC                 seto    cl
.text:00002FEF                 neg     ecx
.text:00002FF1                 or      ecx, eax
.text:00002FF3                 push    ecx             ; unsigned int
.text:00002FF4                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002FF9                 add     esp, 4
.text:00002FFC                 mov     [ebp+var_C], eax
.text:00002FFF                 mov     eax, [ebp+var_4]
.text:00003002                 mov     ecx, [ebp+var_C]
.text:00003005                 mov     [eax], ecx
.text:00003007                 mov     edx, [ebp+var_4]
.text:0000300A                 mov     eax, [ebp+arg_0]
.text:0000300D                 mov     [edx+8], eax
.text:00003010
.text:00003010 loc_3010:                               ; CODE XREF: CRecordVector<void *>::ClearAndReserve(uint)+2Fj
.text:00003010                 add     esp, 0Ch
.text:00003013                 cmp     ebp, esp
.text:00003015                 call    __RTC_CheckEsp
.text:0000301A                 mov     esp, ebp
.text:0000301C                 pop     ebp
.text:0000301D                 retn    4
.text:0000301D ?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:0000301D
.text:0000301D _text           ends
.text:0000301D
.text:00003020 ; ===========================================================================
.text:00003020
.text:00003020 ; Segment type: Pure code
.text:00003020 ; Segment permissions: Read/Execute
.text:00003020 _text           segment para public 'CODE' use32
.text:00003020                 assume cs:_text
.text:00003020                 ;org 3020h
.text:00003020 ; COMDAT (pick any)
.text:00003020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003020
.text:00003020 ; =============== S U B R O U T I N E =======================================
.text:00003020
.text:00003020 ; Attributes: bp-based frame
.text:00003020
.text:00003020 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:00003020                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:00003020 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00003020                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::Clear(void)+6Fp
.text:00003020                                         ; CRecordVector<void *>::ClearAndReserve(uint)+21p
.text:00003020
.text:00003020 var_4           = dword ptr -4
.text:00003020
.text:00003020                 push    ebp
.text:00003021                 mov     ebp, esp
.text:00003023                 push    ecx
.text:00003024                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000302B                 mov     [ebp+var_4], ecx
.text:0000302E                 mov     eax, [ebp+var_4]
.text:00003031                 mov     dword ptr [eax+4], 0
.text:00003038                 mov     esp, ebp
.text:0000303A                 pop     ebp
.text:0000303B                 retn
.text:0000303B ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:0000303B
.text:0000303B _text           ends
.text:0000303B
.text:0000303C ; ===========================================================================
.text:0000303C
.text:0000303C ; Segment type: Pure code
.text:0000303C ; Segment permissions: Read/Execute
.text:0000303C _text           segment para public 'CODE' use32
.text:0000303C                 assume cs:_text
.text:0000303C                 ;org 303Ch
.text:0000303C ; COMDAT (pick any)
.text:0000303C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000303C
.text:0000303C ; =============== S U B R O U T I N E =======================================
.text:0000303C
.text:0000303C ; Attributes: bp-based frame
.text:0000303C
.text:0000303C ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:0000303C                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:0000303C ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:0000303C                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::AddNewInReserved(void)+84p
.text:0000303C
.text:0000303C var_4           = dword ptr -4
.text:0000303C arg_0           = dword ptr  8
.text:0000303C
.text:0000303C                 push    ebp
.text:0000303D                 mov     ebp, esp
.text:0000303F                 push    ecx
.text:00003040                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003047                 mov     [ebp+var_4], ecx
.text:0000304A                 mov     eax, [ebp+var_4]
.text:0000304D                 mov     ecx, [eax+4]
.text:00003050                 mov     edx, [ebp+var_4]
.text:00003053                 mov     eax, [edx]
.text:00003055                 mov     edx, [ebp+arg_0]
.text:00003058                 mov     [eax+ecx*4], edx
.text:0000305B                 mov     eax, [ebp+var_4]
.text:0000305E                 mov     ecx, [eax+4]
.text:00003061                 add     ecx, 1
.text:00003064                 mov     edx, [ebp+var_4]
.text:00003067                 mov     [edx+4], ecx
.text:0000306A                 mov     esp, ebp
.text:0000306C                 pop     ebp
.text:0000306D                 retn    4
.text:0000306D ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:0000306D
.text:0000306D _text           ends
.text:0000306D
.text:00003070 ; ===========================================================================
.text:00003070
.text:00003070 ; Segment type: Pure code
.text:00003070 ; Segment permissions: Read/Execute
.text:00003070 _text           segment para public 'CODE' use32
.text:00003070                 assume cs:_text
.text:00003070                 ;org 3070h
.text:00003070 ; COMDAT (pick any)
.text:00003070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003070
.text:00003070 ; =============== S U B R O U T I N E =======================================
.text:00003070
.text:00003070 ; Attributes: bp-based frame
.text:00003070
.text:00003070 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00003070                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00003070 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00003070                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::operator[](uint)+15p
.text:00003070                                         ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)+15p
.text:00003070
.text:00003070 var_4           = dword ptr -4
.text:00003070 arg_0           = dword ptr  8
.text:00003070
.text:00003070                 push    ebp
.text:00003071                 mov     ebp, esp
.text:00003073                 push    ecx
.text:00003074                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000307B                 mov     [ebp+var_4], ecx
.text:0000307E                 mov     eax, [ebp+var_4]
.text:00003081                 mov     ecx, [eax]
.text:00003083                 mov     edx, [ebp+arg_0]
.text:00003086                 lea     eax, [ecx+edx*4]
.text:00003089                 mov     esp, ebp
.text:0000308B                 pop     ebp
.text:0000308C                 retn    4
.text:0000308C ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:0000308C
.text:0000308C ; ---------------------------------------------------------------------------
.text:0000308F                 align 10h
.text:0000308F _text           ends
.text:0000308F
.text:00003090 ; ===========================================================================
.text:00003090
.text:00003090 ; Segment type: Pure code
.text:00003090 ; Segment permissions: Read/Execute
.text:00003090 _text           segment para public 'CODE' use32
.text:00003090                 assume cs:_text
.text:00003090                 ;org 3090h
.text:00003090 ; COMDAT (pick any)
.text:00003090                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003090
.text:00003090 ; =============== S U B R O U T I N E =======================================
.text:00003090
.text:00003090 ; Attributes: bp-based frame
.text:00003090
.text:00003090 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00003090                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00003090 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00003090                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::operator[](uint)+15p
.text:00003090                                         ; CObjectVector<NArchive::NCab::CItem>::Clear(void)+3Ep ...
.text:00003090
.text:00003090 var_4           = dword ptr -4
.text:00003090 arg_0           = dword ptr  8
.text:00003090
.text:00003090                 push    ebp
.text:00003091                 mov     ebp, esp
.text:00003093                 push    ecx
.text:00003094                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000309B                 mov     [ebp+var_4], ecx
.text:0000309E                 mov     eax, [ebp+var_4]
.text:000030A1                 mov     ecx, [eax]
.text:000030A3                 mov     edx, [ebp+arg_0]
.text:000030A6                 lea     eax, [ecx+edx*4]
.text:000030A9                 mov     esp, ebp
.text:000030AB                 pop     ebp
.text:000030AC                 retn    4
.text:000030AC ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:000030AC
.text:000030AC ; ---------------------------------------------------------------------------
.text:000030AF                 align 10h
.text:000030AF _text           ends
.text:000030AF
.text:000030B0 ; ===========================================================================
.text:000030B0
.text:000030B0 ; Segment type: Pure code
.text:000030B0 ; Segment permissions: Read/Execute
.text:000030B0 _text           segment para public 'CODE' use32
.text:000030B0                 assume cs:_text
.text:000030B0                 ;org 30B0h
.text:000030B0 ; COMDAT (pick any)
.text:000030B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000030B0
.text:000030B0 ; =============== S U B R O U T I N E =======================================
.text:000030B0
.text:000030B0 ; Attributes: bp-based frame
.text:000030B0
.text:000030B0 ; private: void __thiscall CRecordVector<unsigned int>::ReserveOnePosition(void)
.text:000030B0                 public ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
.text:000030B0 ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ proc near
.text:000030B0                                         ; CODE XREF: CRecordVector<uint>::Add(uint)+1Ap
.text:000030B0
.text:000030B0 var_14          = dword ptr -14h
.text:000030B0 var_10          = dword ptr -10h
.text:000030B0 Dst             = dword ptr -0Ch
.text:000030B0 var_8           = dword ptr -8
.text:000030B0 var_4           = dword ptr -4
.text:000030B0
.text:000030B0                 push    ebp
.text:000030B1                 mov     ebp, esp
.text:000030B3                 sub     esp, 14h
.text:000030B6                 mov     eax, 0CCCCCCCCh
.text:000030BB                 mov     [ebp+var_14], eax
.text:000030BE                 mov     [ebp+var_10], eax
.text:000030C1                 mov     [ebp+Dst], eax
.text:000030C4                 mov     [ebp+var_8], eax
.text:000030C7                 mov     [ebp+var_4], eax
.text:000030CA                 mov     [ebp+var_4], ecx
.text:000030CD                 mov     eax, [ebp+var_4]
.text:000030D0                 mov     ecx, [ebp+var_4]
.text:000030D3                 mov     edx, [eax+4]
.text:000030D6                 cmp     edx, [ecx+8]
.text:000030D9                 jnz     loc_3164
.text:000030DF                 mov     eax, [ebp+var_4]
.text:000030E2                 mov     ecx, [eax+8]
.text:000030E5                 shr     ecx, 2
.text:000030E8                 mov     edx, [ebp+var_4]
.text:000030EB                 mov     eax, [edx+8]
.text:000030EE                 lea     ecx, [eax+ecx+1]
.text:000030F2                 mov     [ebp+var_8], ecx
.text:000030F5                 xor     ecx, ecx
.text:000030F7                 mov     eax, [ebp+var_8]
.text:000030FA                 mov     edx, 4
.text:000030FF                 mul     edx
.text:00003101                 seto    cl
.text:00003104                 neg     ecx
.text:00003106                 or      ecx, eax
.text:00003108                 push    ecx             ; unsigned int
.text:00003109                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000310E                 add     esp, 4
.text:00003111                 mov     [ebp+var_10], eax
.text:00003114                 mov     eax, [ebp+var_10]
.text:00003117                 mov     [ebp+Dst], eax
.text:0000311A                 mov     ecx, [ebp+var_4]
.text:0000311D                 cmp     dword ptr [ecx+4], 0
.text:00003121                 jz      short loc_313F
.text:00003123                 mov     edx, [ebp+var_4]
.text:00003126                 mov     eax, [edx+4]
.text:00003129                 shl     eax, 2
.text:0000312C                 push    eax             ; Size
.text:0000312D                 mov     ecx, [ebp+var_4]
.text:00003130                 mov     edx, [ecx]
.text:00003132                 push    edx             ; Src
.text:00003133                 mov     eax, [ebp+Dst]
.text:00003136                 push    eax             ; Dst
.text:00003137                 call    _memcpy
.text:0000313C                 add     esp, 0Ch
.text:0000313F
.text:0000313F loc_313F:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+71j
.text:0000313F                 mov     ecx, [ebp+var_4]
.text:00003142                 mov     edx, [ecx]
.text:00003144                 mov     [ebp+var_14], edx
.text:00003147                 mov     eax, [ebp+var_14]
.text:0000314A                 push    eax             ; void *
.text:0000314B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003150                 add     esp, 4
.text:00003153                 mov     ecx, [ebp+var_4]
.text:00003156                 mov     edx, [ebp+Dst]
.text:00003159                 mov     [ecx], edx
.text:0000315B                 mov     eax, [ebp+var_4]
.text:0000315E                 mov     ecx, [ebp+var_8]
.text:00003161                 mov     [eax+8], ecx
.text:00003164
.text:00003164 loc_3164:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+29j
.text:00003164                 add     esp, 14h
.text:00003167                 cmp     ebp, esp
.text:00003169                 call    __RTC_CheckEsp
.text:0000316E                 mov     esp, ebp
.text:00003170                 pop     ebp
.text:00003171                 retn
.text:00003171 ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ endp
.text:00003171
.text:00003171 ; ---------------------------------------------------------------------------
.text:00003172                 align 4
.text:00003172 _text           ends
.text:00003172
.text:00003174 ; ===========================================================================
.text:00003174
.text:00003174 ; Segment type: Pure code
.text:00003174 ; Segment permissions: Read/Execute
.text:00003174 _text           segment para public 'CODE' use32
.text:00003174                 assume cs:_text
.text:00003174                 ;org 3174h
.text:00003174 ; COMDAT (pick any)
.text:00003174                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003174
.text:00003174 ; =============== S U B R O U T I N E =======================================
.text:00003174
.text:00003174 ; Attributes: bp-based frame
.text:00003174
.text:00003174 ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:00003174                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:00003174 ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: CBuffer<uchar>::Alloc(uint)+25p
.text:00003174
.text:00003174 var_8           = dword ptr -8
.text:00003174 var_4           = dword ptr -4
.text:00003174
.text:00003174                 push    ebp
.text:00003175                 mov     ebp, esp
.text:00003177                 sub     esp, 8
.text:0000317A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003181                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003188                 mov     [ebp+var_4], ecx
.text:0000318B                 mov     eax, [ebp+var_4]
.text:0000318E                 cmp     dword ptr [eax], 0
.text:00003191                 jz      short loc_31B0
.text:00003193                 mov     ecx, [ebp+var_4]
.text:00003196                 mov     edx, [ecx]
.text:00003198                 mov     [ebp+var_8], edx
.text:0000319B                 mov     eax, [ebp+var_8]
.text:0000319E                 push    eax             ; void *
.text:0000319F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000031A4                 add     esp, 4
.text:000031A7                 mov     ecx, [ebp+var_4]
.text:000031AA                 mov     dword ptr [ecx], 0
.text:000031B0
.text:000031B0 loc_31B0:                               ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:000031B0                 mov     edx, [ebp+var_4]
.text:000031B3                 mov     dword ptr [edx+4], 0
.text:000031BA                 add     esp, 8
.text:000031BD                 cmp     ebp, esp
.text:000031BF                 call    __RTC_CheckEsp
.text:000031C4                 mov     esp, ebp
.text:000031C6                 pop     ebp
.text:000031C7                 retn
.text:000031C7 ?Free@?$CBuffer@E@@QAEXXZ endp
.text:000031C7
.text:000031C7 _text           ends
.text:000031C7
.text:000031C8 ; ===========================================================================
.text:000031C8
.text:000031C8 ; Segment type: Pure code
.text:000031C8 ; Segment permissions: Read/Execute
.text:000031C8 _text           segment para public 'CODE' use32
.text:000031C8                 assume cs:_text
.text:000031C8                 ;org 31C8h
.text:000031C8 ; COMDAT (pick any)
.text:000031C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031C8
.text:000031C8 ; =============== S U B R O U T I N E =======================================
.text:000031C8
.text:000031C8 ; Attributes: bp-based frame
.text:000031C8
.text:000031C8 ; private: void __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::ReserveOnePosition(void)
.text:000031C8                 public ?ReserveOnePosition@?$CRecordVector@UCMvItem@NCab@NArchive@@@@AAEXXZ
.text:000031C8 ?ReserveOnePosition@?$CRecordVector@UCMvItem@NCab@NArchive@@@@AAEXXZ proc near
.text:000031C8                                         ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::Add(NArchive::NCab::CMvItem)+1Ap
.text:000031C8
.text:000031C8 var_14          = dword ptr -14h
.text:000031C8 var_10          = dword ptr -10h
.text:000031C8 Dst             = dword ptr -0Ch
.text:000031C8 var_8           = dword ptr -8
.text:000031C8 var_4           = dword ptr -4
.text:000031C8
.text:000031C8                 push    ebp
.text:000031C9                 mov     ebp, esp
.text:000031CB                 sub     esp, 14h
.text:000031CE                 mov     eax, 0CCCCCCCCh
.text:000031D3                 mov     [ebp+var_14], eax
.text:000031D6                 mov     [ebp+var_10], eax
.text:000031D9                 mov     [ebp+Dst], eax
.text:000031DC                 mov     [ebp+var_8], eax
.text:000031DF                 mov     [ebp+var_4], eax
.text:000031E2                 mov     [ebp+var_4], ecx
.text:000031E5                 mov     eax, [ebp+var_4]
.text:000031E8                 mov     ecx, [ebp+var_4]
.text:000031EB                 mov     edx, [eax+4]
.text:000031EE                 cmp     edx, [ecx+8]
.text:000031F1                 jnz     loc_327C
.text:000031F7                 mov     eax, [ebp+var_4]
.text:000031FA                 mov     ecx, [eax+8]
.text:000031FD                 shr     ecx, 2
.text:00003200                 mov     edx, [ebp+var_4]
.text:00003203                 mov     eax, [edx+8]
.text:00003206                 lea     ecx, [eax+ecx+1]
.text:0000320A                 mov     [ebp+var_8], ecx
.text:0000320D                 xor     ecx, ecx
.text:0000320F                 mov     eax, [ebp+var_8]
.text:00003212                 mov     edx, 8
.text:00003217                 mul     edx
.text:00003219                 seto    cl
.text:0000321C                 neg     ecx
.text:0000321E                 or      ecx, eax
.text:00003220                 push    ecx             ; unsigned int
.text:00003221                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003226                 add     esp, 4
.text:00003229                 mov     [ebp+var_10], eax
.text:0000322C                 mov     eax, [ebp+var_10]
.text:0000322F                 mov     [ebp+Dst], eax
.text:00003232                 mov     ecx, [ebp+var_4]
.text:00003235                 cmp     dword ptr [ecx+4], 0
.text:00003239                 jz      short loc_3257
.text:0000323B                 mov     edx, [ebp+var_4]
.text:0000323E                 mov     eax, [edx+4]
.text:00003241                 shl     eax, 3
.text:00003244                 push    eax             ; Size
.text:00003245                 mov     ecx, [ebp+var_4]
.text:00003248                 mov     edx, [ecx]
.text:0000324A                 push    edx             ; Src
.text:0000324B                 mov     eax, [ebp+Dst]
.text:0000324E                 push    eax             ; Dst
.text:0000324F                 call    _memcpy
.text:00003254                 add     esp, 0Ch
.text:00003257
.text:00003257 loc_3257:                               ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::ReserveOnePosition(void)+71j
.text:00003257                 mov     ecx, [ebp+var_4]
.text:0000325A                 mov     edx, [ecx]
.text:0000325C                 mov     [ebp+var_14], edx
.text:0000325F                 mov     eax, [ebp+var_14]
.text:00003262                 push    eax             ; void *
.text:00003263                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003268                 add     esp, 4
.text:0000326B                 mov     ecx, [ebp+var_4]
.text:0000326E                 mov     edx, [ebp+Dst]
.text:00003271                 mov     [ecx], edx
.text:00003273                 mov     eax, [ebp+var_4]
.text:00003276                 mov     ecx, [ebp+var_8]
.text:00003279                 mov     [eax+8], ecx
.text:0000327C
.text:0000327C loc_327C:                               ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::ReserveOnePosition(void)+29j
.text:0000327C                 add     esp, 14h
.text:0000327F                 cmp     ebp, esp
.text:00003281                 call    __RTC_CheckEsp
.text:00003286                 mov     esp, ebp
.text:00003288                 pop     ebp
.text:00003289                 retn
.text:00003289 ?ReserveOnePosition@?$CRecordVector@UCMvItem@NCab@NArchive@@@@AAEXXZ endp
.text:00003289
.text:00003289 ; ---------------------------------------------------------------------------
.text:0000328A                 align 4
.text:0000328A _text           ends
.text:0000328A
.text:0000328C ; ===========================================================================
.text:0000328C
.text:0000328C ; Segment type: Pure code
.text:0000328C ; Segment permissions: Read/Execute
.text:0000328C _text           segment para public 'CODE' use32
.text:0000328C                 assume cs:_text
.text:0000328C                 ;org 328Ch
.text:0000328C ; COMDAT (pick any)
.text:0000328C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000328C
.text:0000328C ; =============== S U B R O U T I N E =======================================
.text:0000328C
.text:0000328C ; Attributes: bp-based frame
.text:0000328C
.text:0000328C ; public: struct NArchive::NCab::CMvItem & __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::Front(void)
.text:0000328C                 public ?Front@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@XZ
.text:0000328C ?Front@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@XZ proc near
.text:0000328C                                         ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::Sort(int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+3Ep
.text:0000328C
.text:0000328C var_4           = dword ptr -4
.text:0000328C
.text:0000328C                 push    ebp
.text:0000328D                 mov     ebp, esp
.text:0000328F                 push    ecx
.text:00003290                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003297                 mov     [ebp+var_4], ecx
.text:0000329A                 mov     eax, [ebp+var_4]
.text:0000329D                 mov     eax, [eax]
.text:0000329F                 mov     esp, ebp
.text:000032A1                 pop     ebp
.text:000032A2                 retn
.text:000032A2 ?Front@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@XZ endp
.text:000032A2
.text:000032A2 ; ---------------------------------------------------------------------------
.text:000032A3                 align 4
.text:000032A3 _text           ends
.text:000032A3
.text:000032A4 ; ===========================================================================
.text:000032A4
.text:000032A4 ; Segment type: Pure code
.text:000032A4 ; Segment permissions: Read/Execute
.text:000032A4 _text           segment para public 'CODE' use32
.text:000032A4                 assume cs:_text
.text:000032A4                 ;org 32A4h
.text:000032A4 ; COMDAT (pick any)
.text:000032A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000032A4
.text:000032A4 ; =============== S U B R O U T I N E =======================================
.text:000032A4
.text:000032A4 ; Attributes: bp-based frame
.text:000032A4
.text:000032A4 ; public: static void __stdcall CRecordVector<struct NArchive::NCab::CMvItem>::SortRefDown(struct NArchive::NCab::CMvItem *, unsigned int, unsigned int, int (__stdcall *)(struct NArchive::NCab::CMvItem const *, struct NArchive::NCab::CMvItem const *, void *), void *)
.text:000032A4                 public ?SortRefDown@?$CRecordVector@UCMvItem@NCab@NArchive@@@@SGXPAUCMvItem@NCab@NArchive@@IIP6GHPBU234@1PAX@Z2@Z
.text:000032A4 ?SortRefDown@?$CRecordVector@UCMvItem@NCab@NArchive@@@@SGXPAUCMvItem@NCab@NArchive@@IIP6GHPBU234@1PAX@Z2@Z proc near
.text:000032A4                                         ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::Sort(int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+65p
.text:000032A4                                         ; CRecordVector<NArchive::NCab::CMvItem>::Sort(int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+C8p
.text:000032A4
.text:000032A4 var_14          = dword ptr -14h
.text:000032A4 var_10          = dword ptr -10h
.text:000032A4 var_C           = dword ptr -0Ch
.text:000032A4 var_8           = dword ptr -8
.text:000032A4 var_4           = dword ptr -4
.text:000032A4 arg_0           = dword ptr  8
.text:000032A4 arg_4           = dword ptr  0Ch
.text:000032A4 arg_8           = dword ptr  10h
.text:000032A4 arg_C           = dword ptr  14h
.text:000032A4 arg_10          = dword ptr  18h
.text:000032A4
.text:000032A4                 push    ebp
.text:000032A5                 mov     ebp, esp
.text:000032A7                 sub     esp, 14h
.text:000032AA                 push    esi
.text:000032AB                 mov     eax, 0CCCCCCCCh
.text:000032B0                 mov     [ebp+var_14], eax
.text:000032B3                 mov     [ebp+var_10], eax
.text:000032B6                 mov     [ebp+var_C], eax
.text:000032B9                 mov     [ebp+var_8], eax
.text:000032BC                 mov     [ebp+var_4], eax
.text:000032BF                 mov     eax, [ebp+arg_4]
.text:000032C2                 mov     ecx, [ebp+arg_0]
.text:000032C5                 mov     edx, [ecx+eax*8]
.text:000032C8                 mov     eax, [ecx+eax*8+4]
.text:000032CC                 mov     [ebp+var_C], edx
.text:000032CF                 mov     [ebp+var_8], eax
.text:000032D2
.text:000032D2 loc_32D2:                               ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::SortRefDown(NArchive::NCab::CMvItem *,uint,uint,int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+C1j
.text:000032D2                 mov     ecx, [ebp+arg_4]
.text:000032D5                 shl     ecx, 1
.text:000032D7                 mov     [ebp+var_14], ecx
.text:000032DA                 mov     edx, [ebp+var_14]
.text:000032DD                 cmp     edx, [ebp+arg_8]
.text:000032E0                 jbe     short loc_32E7
.text:000032E2                 jmp     loc_336A
.text:000032E7 ; ---------------------------------------------------------------------------
.text:000032E7
.text:000032E7 loc_32E7:                               ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::SortRefDown(NArchive::NCab::CMvItem *,uint,uint,int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+3Cj
.text:000032E7                 mov     eax, [ebp+var_14]
.text:000032EA                 cmp     eax, [ebp+arg_8]
.text:000032ED                 jnb     short loc_3321
.text:000032EF                 mov     esi, esp
.text:000032F1                 mov     ecx, [ebp+arg_10]
.text:000032F4                 push    ecx
.text:000032F5                 mov     edx, [ebp+var_14]
.text:000032F8                 mov     eax, [ebp+arg_0]
.text:000032FB                 lea     ecx, [eax+edx*8]
.text:000032FE                 push    ecx
.text:000032FF                 mov     edx, [ebp+var_14]
.text:00003302                 mov     eax, [ebp+arg_0]
.text:00003305                 lea     ecx, [eax+edx*8+8]
.text:00003309                 push    ecx
.text:0000330A                 call    [ebp+arg_C]
.text:0000330D                 cmp     esi, esp
.text:0000330F                 call    __RTC_CheckEsp
.text:00003314                 test    eax, eax
.text:00003316                 jle     short loc_3321
.text:00003318                 mov     edx, [ebp+var_14]
.text:0000331B                 add     edx, 1
.text:0000331E                 mov     [ebp+var_14], edx
.text:00003321
.text:00003321 loc_3321:                               ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::SortRefDown(NArchive::NCab::CMvItem *,uint,uint,int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+49j
.text:00003321                                         ; CRecordVector<NArchive::NCab::CMvItem>::SortRefDown(NArchive::NCab::CMvItem *,uint,uint,int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+72j
.text:00003321                 mov     esi, esp
.text:00003323                 mov     eax, [ebp+arg_10]
.text:00003326                 push    eax
.text:00003327                 mov     ecx, [ebp+var_14]
.text:0000332A                 mov     edx, [ebp+arg_0]
.text:0000332D                 lea     eax, [edx+ecx*8]
.text:00003330                 push    eax
.text:00003331                 lea     ecx, [ebp+var_C]
.text:00003334                 push    ecx
.text:00003335                 call    [ebp+arg_C]
.text:00003338                 cmp     esi, esp
.text:0000333A                 call    __RTC_CheckEsp
.text:0000333F                 test    eax, eax
.text:00003341                 jl      short loc_3345
.text:00003343                 jmp     short loc_336A
.text:00003345 ; ---------------------------------------------------------------------------
.text:00003345
.text:00003345 loc_3345:                               ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::SortRefDown(NArchive::NCab::CMvItem *,uint,uint,int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+9Dj
.text:00003345                 mov     edx, [ebp+var_14]
.text:00003348                 mov     eax, [ebp+arg_0]
.text:0000334B                 mov     ecx, [eax+edx*8]
.text:0000334E                 mov     edx, [eax+edx*8+4]
.text:00003352                 mov     eax, [ebp+arg_4]
.text:00003355                 mov     esi, [ebp+arg_0]
.text:00003358                 mov     [esi+eax*8], ecx
.text:0000335B                 mov     [esi+eax*8+4], edx
.text:0000335F                 mov     ecx, [ebp+var_14]
.text:00003362                 mov     [ebp+arg_4], ecx
.text:00003365                 jmp     loc_32D2
.text:0000336A ; ---------------------------------------------------------------------------
.text:0000336A
.text:0000336A loc_336A:                               ; CODE XREF: CRecordVector<NArchive::NCab::CMvItem>::SortRefDown(NArchive::NCab::CMvItem *,uint,uint,int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+3Ej
.text:0000336A                                         ; CRecordVector<NArchive::NCab::CMvItem>::SortRefDown(NArchive::NCab::CMvItem *,uint,uint,int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+9Fj
.text:0000336A                 mov     edx, [ebp+arg_4]
.text:0000336D                 mov     eax, [ebp+arg_0]
.text:00003370                 mov     ecx, [ebp+var_C]
.text:00003373                 mov     [eax+edx*8], ecx
.text:00003376                 mov     ecx, [ebp+var_8]
.text:00003379                 mov     [eax+edx*8+4], ecx
.text:0000337D                 push    edx
.text:0000337E                 mov     ecx, ebp
.text:00003380                 push    eax
.text:00003381                 lea     edx, $LN10_1
.text:00003387                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000338C                 pop     eax
.text:0000338D                 pop     edx
.text:0000338E                 pop     esi
.text:0000338F                 add     esp, 14h
.text:00003392                 cmp     ebp, esp
.text:00003394                 call    __RTC_CheckEsp
.text:00003399                 mov     esp, ebp
.text:0000339B                 pop     ebp
.text:0000339C                 retn    14h
.text:0000339C ?SortRefDown@?$CRecordVector@UCMvItem@NCab@NArchive@@@@SGXPAUCMvItem@NCab@NArchive@@IIP6GHPBU234@1PAX@Z2@Z endp
.text:0000339C
.text:0000339C ; ---------------------------------------------------------------------------
.text:0000339F                 align 10h
.text:000033A0 $LN10_1         dd 1                    ; DATA XREF: CRecordVector<NArchive::NCab::CMvItem>::SortRefDown(NArchive::NCab::CMvItem *,uint,uint,int (*)(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *),void *)+DDo
.text:000033A4                 dd offset $LN9
.text:000033A8 $LN9            dd 0FFFFFFF4h, 8        ; DATA XREF: .text:000033A4o
.text:000033B0                 dd offset $LN8_0        ; "temp"
.text:000033B4 $LN8_0          db 'temp',0             ; DATA XREF: .text:000033B0o
.text:000033B9                 align 4
.text:000033B9 _text           ends
.text:000033B9
.text:000033BC ; ===========================================================================
.text:000033BC
.text:000033BC ; Segment type: Pure code
.text:000033BC ; Segment permissions: Read/Execute
.text:000033BC _text           segment para public 'CODE' use32
.text:000033BC                 assume cs:_text
.text:000033BC                 ;org 33BCh
.text:000033BC ; COMDAT (pick any)
.text:000033BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033BC
.text:000033BC ; =============== S U B R O U T I N E =======================================
.text:000033BC
.text:000033BC ; Attributes: bp-based frame
.text:000033BC
.text:000033BC ; private: void __thiscall CRecordVector<int>::ReserveOnePosition(void)
.text:000033BC                 public ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ
.text:000033BC ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ proc near
.text:000033BC                                         ; CODE XREF: CRecordVector<int>::Add(int)+1Ap
.text:000033BC
.text:000033BC var_14          = dword ptr -14h
.text:000033BC var_10          = dword ptr -10h
.text:000033BC Dst             = dword ptr -0Ch
.text:000033BC var_8           = dword ptr -8
.text:000033BC var_4           = dword ptr -4
.text:000033BC
.text:000033BC                 push    ebp
.text:000033BD                 mov     ebp, esp
.text:000033BF                 sub     esp, 14h
.text:000033C2                 mov     eax, 0CCCCCCCCh
.text:000033C7                 mov     [ebp+var_14], eax
.text:000033CA                 mov     [ebp+var_10], eax
.text:000033CD                 mov     [ebp+Dst], eax
.text:000033D0                 mov     [ebp+var_8], eax
.text:000033D3                 mov     [ebp+var_4], eax
.text:000033D6                 mov     [ebp+var_4], ecx
.text:000033D9                 mov     eax, [ebp+var_4]
.text:000033DC                 mov     ecx, [ebp+var_4]
.text:000033DF                 mov     edx, [eax+4]
.text:000033E2                 cmp     edx, [ecx+8]
.text:000033E5                 jnz     loc_3470
.text:000033EB                 mov     eax, [ebp+var_4]
.text:000033EE                 mov     ecx, [eax+8]
.text:000033F1                 shr     ecx, 2
.text:000033F4                 mov     edx, [ebp+var_4]
.text:000033F7                 mov     eax, [edx+8]
.text:000033FA                 lea     ecx, [eax+ecx+1]
.text:000033FE                 mov     [ebp+var_8], ecx
.text:00003401                 xor     ecx, ecx
.text:00003403                 mov     eax, [ebp+var_8]
.text:00003406                 mov     edx, 4
.text:0000340B                 mul     edx
.text:0000340D                 seto    cl
.text:00003410                 neg     ecx
.text:00003412                 or      ecx, eax
.text:00003414                 push    ecx             ; unsigned int
.text:00003415                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000341A                 add     esp, 4
.text:0000341D                 mov     [ebp+var_10], eax
.text:00003420                 mov     eax, [ebp+var_10]
.text:00003423                 mov     [ebp+Dst], eax
.text:00003426                 mov     ecx, [ebp+var_4]
.text:00003429                 cmp     dword ptr [ecx+4], 0
.text:0000342D                 jz      short loc_344B
.text:0000342F                 mov     edx, [ebp+var_4]
.text:00003432                 mov     eax, [edx+4]
.text:00003435                 shl     eax, 2
.text:00003438                 push    eax             ; Size
.text:00003439                 mov     ecx, [ebp+var_4]
.text:0000343C                 mov     edx, [ecx]
.text:0000343E                 push    edx             ; Src
.text:0000343F                 mov     eax, [ebp+Dst]
.text:00003442                 push    eax             ; Dst
.text:00003443                 call    _memcpy
.text:00003448                 add     esp, 0Ch
.text:0000344B
.text:0000344B loc_344B:                               ; CODE XREF: CRecordVector<int>::ReserveOnePosition(void)+71j
.text:0000344B                 mov     ecx, [ebp+var_4]
.text:0000344E                 mov     edx, [ecx]
.text:00003450                 mov     [ebp+var_14], edx
.text:00003453                 mov     eax, [ebp+var_14]
.text:00003456                 push    eax             ; void *
.text:00003457                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000345C                 add     esp, 4
.text:0000345F                 mov     ecx, [ebp+var_4]
.text:00003462                 mov     edx, [ebp+Dst]
.text:00003465                 mov     [ecx], edx
.text:00003467                 mov     eax, [ebp+var_4]
.text:0000346A                 mov     ecx, [ebp+var_8]
.text:0000346D                 mov     [eax+8], ecx
.text:00003470
.text:00003470 loc_3470:                               ; CODE XREF: CRecordVector<int>::ReserveOnePosition(void)+29j
.text:00003470                 add     esp, 14h
.text:00003473                 cmp     ebp, esp
.text:00003475                 call    __RTC_CheckEsp
.text:0000347A                 mov     esp, ebp
.text:0000347C                 pop     ebp
.text:0000347D                 retn
.text:0000347D ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ endp
.text:0000347D
.text:0000347D ; ---------------------------------------------------------------------------
.text:0000347E                 align 10h
.text:0000347E _text           ends
.text:0000347E
.text:00003480 ; ===========================================================================
.text:00003480
.text:00003480 ; Segment type: Pure code
.text:00003480 ; Segment permissions: Read/Execute
.text:00003480 _text           segment para public 'CODE' use32
.text:00003480                 assume cs:_text
.text:00003480                 ;org 3480h
.text:00003480 ; COMDAT (pick any)
.text:00003480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003480
.text:00003480 ; =============== S U B R O U T I N E =======================================
.text:00003480
.text:00003480 ; Attributes: bp-based frame
.text:00003480
.text:00003480 ; int __stdcall MyCompare<int>(int, int)
.text:00003480                 public ??$MyCompare@H@@YGHHH@Z
.text:00003480 ??$MyCompare@H@@YGHHH@Z proc near       ; CODE XREF: NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+D6p
.text:00003480
.text:00003480 var_4           = dword ptr -4
.text:00003480 arg_0           = dword ptr  8
.text:00003480 arg_4           = dword ptr  0Ch
.text:00003480
.text:00003480                 push    ebp
.text:00003481                 mov     ebp, esp
.text:00003483                 push    ecx
.text:00003484                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000348B                 mov     eax, [ebp+arg_0]
.text:0000348E                 cmp     eax, [ebp+arg_4]
.text:00003491                 jge     short loc_349C
.text:00003493                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000349A                 jmp     short loc_34AA
.text:0000349C ; ---------------------------------------------------------------------------
.text:0000349C
.text:0000349C loc_349C:                               ; CODE XREF: MyCompare<int>(int,int)+11j
.text:0000349C                 mov     ecx, [ebp+arg_0]
.text:0000349F                 xor     edx, edx
.text:000034A1                 cmp     ecx, [ebp+arg_4]
.text:000034A4                 setnz   dl
.text:000034A7                 mov     [ebp+var_4], edx
.text:000034AA
.text:000034AA loc_34AA:                               ; CODE XREF: MyCompare<int>(int,int)+1Aj
.text:000034AA                 mov     eax, [ebp+var_4]
.text:000034AD                 mov     esp, ebp
.text:000034AF                 pop     ebp
.text:000034B0                 retn    8
.text:000034B0 ??$MyCompare@H@@YGHHH@Z endp
.text:000034B0
.text:000034B0 ; ---------------------------------------------------------------------------
.text:000034B3                 align 4
.text:000034B3 _text           ends
.text:000034B3
.text:000034B4 ; ===========================================================================
.text:000034B4
.text:000034B4 ; Segment type: Pure code
.text:000034B4 ; Segment permissions: Read/Execute
.text:000034B4 _text           segment para public 'CODE' use32
.text:000034B4                 assume cs:_text
.text:000034B4                 ;org 34B4h
.text:000034B4 ; COMDAT (pick any)
.text:000034B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034B4
.text:000034B4 ; =============== S U B R O U T I N E =======================================
.text:000034B4
.text:000034B4 ; Attributes: bp-based frame
.text:000034B4
.text:000034B4 ; int __stdcall MyCompare<unsigned int>(unsigned int, unsigned int)
.text:000034B4                 public ??$MyCompare@I@@YGHII@Z
.text:000034B4 ??$MyCompare@I@@YGHII@Z proc near       ; CODE XREF: NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+F7p
.text:000034B4                                         ; NArchive::NCab::CompareMvItems(NArchive::NCab::CMvItem const *,NArchive::NCab::CMvItem const *,void *)+118p ...
.text:000034B4
.text:000034B4 var_4           = dword ptr -4
.text:000034B4 arg_0           = dword ptr  8
.text:000034B4 arg_4           = dword ptr  0Ch
.text:000034B4
.text:000034B4                 push    ebp
.text:000034B5                 mov     ebp, esp
.text:000034B7                 push    ecx
.text:000034B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034BF                 mov     eax, [ebp+arg_0]
.text:000034C2                 cmp     eax, [ebp+arg_4]
.text:000034C5                 jnb     short loc_34D0
.text:000034C7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000034CE                 jmp     short loc_34DE
.text:000034D0 ; ---------------------------------------------------------------------------
.text:000034D0
.text:000034D0 loc_34D0:                               ; CODE XREF: MyCompare<uint>(uint,uint)+11j
.text:000034D0                 mov     ecx, [ebp+arg_0]
.text:000034D3                 xor     edx, edx
.text:000034D5                 cmp     ecx, [ebp+arg_4]
.text:000034D8                 setnz   dl
.text:000034DB                 mov     [ebp+var_4], edx
.text:000034DE
.text:000034DE loc_34DE:                               ; CODE XREF: MyCompare<uint>(uint,uint)+1Aj
.text:000034DE                 mov     eax, [ebp+var_4]
.text:000034E1                 mov     esp, ebp
.text:000034E3                 pop     ebp
.text:000034E4                 retn    8
.text:000034E4 ??$MyCompare@I@@YGHII@Z endp
.text:000034E4
.text:000034E4 ; ---------------------------------------------------------------------------
.text:000034E7                 align 4
.text:000034E7 _text           ends
.text:000034E7
.text:000034E8 ; ===========================================================================
.text:000034E8
.text:000034E8 ; Segment type: Pure code
.text:000034E8 ; Segment permissions: Read/Execute
.text:000034E8 _text           segment para public 'CODE' use32
.text:000034E8                 assume cs:_text
.text:000034E8                 ;org 34E8h
.text:000034E8 ; COMDAT (pick any)
.text:000034E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034E8
.text:000034E8 ; =============== S U B R O U T I N E =======================================
.text:000034E8
.text:000034E8 ; Attributes: bp-based frame
.text:000034E8
.text:000034E8 ; unsigned int __stdcall MyMin<unsigned int>(unsigned int, unsigned int)
.text:000034E8                 public ??$MyMin@I@@YGIII@Z
.text:000034E8 ??$MyMin@I@@YGIII@Z proc near           ; CODE XREF: CBuffer<uchar>::ChangeSize_KeepData(uint,uint)+61p
.text:000034E8                                         ; CBuffer<uchar>::ChangeSize_KeepData(uint,uint)+67p
.text:000034E8
.text:000034E8 var_4           = dword ptr -4
.text:000034E8 arg_0           = dword ptr  8
.text:000034E8 arg_4           = dword ptr  0Ch
.text:000034E8
.text:000034E8                 push    ebp
.text:000034E9                 mov     ebp, esp
.text:000034EB                 push    ecx
.text:000034EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034F3                 mov     eax, [ebp+arg_0]
.text:000034F6                 cmp     eax, [ebp+arg_4]
.text:000034F9                 jnb     short loc_3503
.text:000034FB                 mov     ecx, [ebp+arg_0]
.text:000034FE                 mov     [ebp+var_4], ecx
.text:00003501                 jmp     short loc_3509
.text:00003503 ; ---------------------------------------------------------------------------
.text:00003503
.text:00003503 loc_3503:                               ; CODE XREF: MyMin<uint>(uint,uint)+11j
.text:00003503                 mov     edx, [ebp+arg_4]
.text:00003506                 mov     [ebp+var_4], edx
.text:00003509
.text:00003509 loc_3509:                               ; CODE XREF: MyMin<uint>(uint,uint)+19j
.text:00003509                 mov     eax, [ebp+var_4]
.text:0000350C                 mov     esp, ebp
.text:0000350E                 pop     ebp
.text:0000350F                 retn    8
.text:0000350F ??$MyMin@I@@YGIII@Z endp
.text:0000350F
.text:0000350F _text           ends
.text:0000350F
UNDEF:00003520 ; ===========================================================================
UNDEF:00003520
UNDEF:00003520 ; Segment type: Externs
UNDEF:00003520 ; UNDEF
UNDEF:00003520 ; unsigned int __thiscall CInBufferBase::Skip(CInBufferBase *__hidden this, unsigned int)
UNDEF:00003520                 extrn ?Skip@CInBufferBase@@QAEII@Z:near
UNDEF:00003520                                         ; CODE XREF: NArchive::NCab::CInArchive::Skip(uint)+1Ep
UNDEF:00003524                 extrn __RTC_CheckEsp:near
UNDEF:00003524                                         ; CODE XREF: NArchive::NCab::CInArchive::Skip(uint)+46p
UNDEF:00003524                                         ; NArchive::NCab::CInArchive::Read(uchar *,uint)+4Ap ...
UNDEF:00003528                 extrn __RTC_Shutdown:near
UNDEF:00003528                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000352C                 extrn __RTC_InitBase:near
UNDEF:0000352C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00003530 ; __stdcall _CxxThrowException(x, x)
UNDEF:00003530                 extrn __CxxThrowException@8:near
UNDEF:00003530                                         ; CODE XREF: NArchive::NCab::CInArchive::Skip(uint)+3Cp
UNDEF:00003530                                         ; NArchive::NCab::CInArchive::Read(uchar *,uint)+40p ...
UNDEF:00003534 ; const type_info::`vftable'
UNDEF:00003534                 extrn ??_7type_info@@6B@:near
UNDEF:00003534                                         ; DATA XREF: .data:NArchive::NCab::CUnexpectedEndException `RTTI Type Descriptor'o
UNDEF:00003534                                         ; .data:CLimitedSequentialInStream `RTTI Type Descriptor'o ...
UNDEF:00003538 ; unsigned int __thiscall CInBufferBase::ReadBytes(CInBufferBase *__hidden this, unsigned __int8 *, unsigned int)
UNDEF:00003538                 extrn ?ReadBytes@CInBufferBase@@QAEIPAEI@Z:near
UNDEF:00003538                                         ; CODE XREF: NArchive::NCab::CInArchive::Read(uchar *,uint)+22p
UNDEF:0000353C ; public: class AString & __thiscall AString::operator=(char const *)
UNDEF:0000353C                 extrn ??4AString@@QAEAAV0@PBD@Z:near
UNDEF:0000353C                                         ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+11Ep
UNDEF:00003540 ; void __thiscall AString::SetFrom(AString *__hidden this, const char *, unsigned int)
UNDEF:00003540                 extrn ?SetFrom@AString@@QAEXPBDI@Z:near
UNDEF:00003540                                         ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+8Fp
UNDEF:00003544 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00003544                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00003544                                         ; CODE XREF: NArchive::NCab::CInArchive::ReadName(AString &)+12Dp
UNDEF:00003544                                         ; NArchive::NCab::CSignatureFinder::Find(void)+2FBp ...
UNDEF:00003548 ; bool __thiscall CInBufferBase::ReadByte_FromNewBlock(CInBufferBase *__hidden this, unsigned __int8 *)
UNDEF:00003548                 extrn ?ReadByte_FromNewBlock@CInBufferBase@@IAE_NAAE@Z:near
UNDEF:00003548                                         ; CODE XREF: CInBufferBase::ReadByte(uchar &)+22p
UNDEF:0000354C ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000354C                 extrn __imp__memmove:near
UNDEF:0000354C                                         ; CODE XREF: NArchive::NCab::CSignatureFinder::Find(void)+19Ep
UNDEF:0000354C                                         ; DATA XREF: NArchive::NCab::CSignatureFinder::Find(void)+19Er
UNDEF:00003550 ; void __cdecl operator delete(void *)
UNDEF:00003550                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$2+7p
UNDEF:00003550                                         ; __unwindfunclet$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z$3+7p ...
UNDEF:00003554 ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
UNDEF:00003554                 extrn ?Init@CInBufferBase@@QAEXXZ:near
UNDEF:00003554                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+7EDp
UNDEF:00003558 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00003558                 extrn _memcpy:near      ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+220p
UNDEF:00003558                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+385p ...
UNDEF:0000355C ; void *__cdecl operator new(unsigned int)
UNDEF:0000355C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+17Ep
UNDEF:0000355C                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+441p ...
UNDEF:00003560 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00003560                 extrn _memcmp:near      ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+155p
UNDEF:00003560                                         ; IsEqualGUID(x,x)+Dp
UNDEF:00003564 ; unsigned char const * const NArchive::NCab::NHeader::kMarker
UNDEF:00003564                 extrn ?kMarker@NHeader@NCab@NArchive@@3QBEB:near
UNDEF:00003564                                         ; DATA XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+14Co
UNDEF:00003564                                         ; NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+330o
UNDEF:00003568 ; __int32 __stdcall ReadStream_FALSE(struct ISequentialInStream *, void *, unsigned int)
UNDEF:00003568                 extrn ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:00003568                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+10Dp
UNDEF:0000356C                 extrn ___security_cookie:near
UNDEF:0000356C                                         ; DATA XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+2Dr
UNDEF:0000356C                                         ; NArchive::NCab::CInArchive::Open(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+32r ...
UNDEF:00003570                 extrn ___CxxFrameHandler3:near
UNDEF:00003570                                         ; CODE XREF: __ehhandler$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z+23j
UNDEF:00003570                                         ; __ehhandler$?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z+16j ...
UNDEF:00003574 ; __fastcall __security_check_cookie(x)
UNDEF:00003574                 extrn @__security_check_cookie@4:near
UNDEF:00003574                                         ; CODE XREF: NArchive::NCab::CInArchive::Open2(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)+982p
UNDEF:00003574                                         ; __ehhandler$?Open2@CInArchive@NCab@NArchive@@AAEJAAUCDatabaseEx@23@PB_K@Z+Fp ...
UNDEF:00003578 ; public: virtual long __stdcall CLimitedSequentialInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:00003578                 extrn ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:near
UNDEF:00003578                                         ; DATA XREF: .rdata:00001EA0o
UNDEF:0000357C                 extrn _IID_ISequentialInStream:near
UNDEF:0000357C                                         ; DATA XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *):loc_2080o
UNDEF:00003580 ; const IID IID_IUnknown
UNDEF:00003580                 extrn _IID_IUnknown:near
UNDEF:00003580                                         ; DATA XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00003584                 extrn __purecall:near   ; DATA XREF: .rdata:const ISequentialInStream::`vftable'o
UNDEF:00003584                                         ; .rdata:00002244o ...
UNDEF:00003588 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00003588                 extrn _strcmp:near      ; CODE XREF: operator==(AString const &,AString const &)+34p
UNDEF:0000358C ; public: __thiscall AString::AString(void)
UNDEF:0000358C                 extrn ??0AString@@QAE@XZ:near
UNDEF:0000358C                                         ; CODE XREF: NArchive::NCab::CItem::CItem(void)+11p
UNDEF:0000358C
UNDEF:0000358C