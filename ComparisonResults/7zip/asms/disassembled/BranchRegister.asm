.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 5A71DB401ABDA10EA95159EF0FFD29D5
.rdata:00000000 ; Input CRC32 : D67FD7AB
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\BranchRegister.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG66593        db  50h ; P             ; DATA XREF: .rdata:00000030o
.rdata:00000001                 db  50h ; P
.rdata:00000002                 db  43h ; C
.rdata:00000003                 db    0
.rdata:00000004 $SG66594        db 'IA64',0             ; DATA XREF: .rdata:00000050o
.rdata:00000009                 align 4
.rdata:0000000C $SG66595        db 'ARM',0              ; DATA XREF: .rdata:00000070o
.rdata:00000010 $SG66596        db 'ARMT',0             ; DATA XREF: .rdata:00000090o
.rdata:00000015                 align 4
.rdata:00000018 $SG66597        db 'SPARC',0            ; DATA XREF: .rdata:000000B0o
.rdata:0000001E                 align 10h
.rdata:00000020 _g_CodecsInfo   dd offset ?CreateBra_Decoder_PPC@@YGPAXXZ
.rdata:00000020                                         ; DATA XREF: CRegisterCodecsBranch::CRegisterCodecsBranch(void)+35o
.rdata:00000020                                         ; CreateBra_Decoder_PPC(void)
.rdata:00000024                 dd offset ?CreateBra_Encoder_PPC@@YGPAXXZ ; CreateBra_Encoder_PPC(void)
.rdata:00000028                 db    5
.rdata:00000029                 db    2
.rdata:0000002A                 db    3
.rdata:0000002B                 db    3
.rdata:0000002C                 db    0
.rdata:0000002D                 db    0
.rdata:0000002E                 db    0
.rdata:0000002F                 db    0
.rdata:00000030                 dd offset $SG66593
.rdata:00000034                 db    1
.rdata:00000035                 db    0
.rdata:00000036                 db    0
.rdata:00000037                 db    0
.rdata:00000038                 db    1
.rdata:00000039                 db    0
.rdata:0000003A                 db    0
.rdata:0000003B                 db    0
.rdata:0000003C                 db    0
.rdata:0000003D                 db    0
.rdata:0000003E                 db    0
.rdata:0000003F                 db    0
.rdata:00000040                 dd offset ?CreateBra_Decoder_IA64@@YGPAXXZ ; CreateBra_Decoder_IA64(void)
.rdata:00000044                 dd offset ?CreateBra_Encoder_IA64@@YGPAXXZ ; CreateBra_Encoder_IA64(void)
.rdata:00000048                 db    1
.rdata:00000049                 db    4
.rdata:0000004A                 db    3
.rdata:0000004B                 db    3
.rdata:0000004C                 db    0
.rdata:0000004D                 db    0
.rdata:0000004E                 db    0
.rdata:0000004F                 db    0
.rdata:00000050                 dd offset $SG66594      ; "IA64"
.rdata:00000054                 db    1
.rdata:00000055                 db    0
.rdata:00000056                 db    0
.rdata:00000057                 db    0
.rdata:00000058                 db    1
.rdata:00000059                 db    0
.rdata:0000005A                 db    0
.rdata:0000005B                 db    0
.rdata:0000005C                 db    0
.rdata:0000005D                 db    0
.rdata:0000005E                 db    0
.rdata:0000005F                 db    0
.rdata:00000060                 dd offset ?CreateBra_Decoder_ARM@@YGPAXXZ ; CreateBra_Decoder_ARM(void)
.rdata:00000064                 dd offset ?CreateBra_Encoder_ARM@@YGPAXXZ ; CreateBra_Encoder_ARM(void)
.rdata:00000068                 db    1
.rdata:00000069                 db    5
.rdata:0000006A                 db    3
.rdata:0000006B                 db    3
.rdata:0000006C                 db    0
.rdata:0000006D                 db    0
.rdata:0000006E                 db    0
.rdata:0000006F                 db    0
.rdata:00000070                 dd offset $SG66595      ; "ARM"
.rdata:00000074                 db    1
.rdata:00000075                 db    0
.rdata:00000076                 db    0
.rdata:00000077                 db    0
.rdata:00000078                 db    1
.rdata:00000079                 db    0
.rdata:0000007A                 db    0
.rdata:0000007B                 db    0
.rdata:0000007C                 db    0
.rdata:0000007D                 db    0
.rdata:0000007E                 db    0
.rdata:0000007F                 db    0
.rdata:00000080                 dd offset ?CreateBra_Decoder_ARMT@@YGPAXXZ ; CreateBra_Decoder_ARMT(void)
.rdata:00000084                 dd offset ?CreateBra_Encoder_ARMT@@YGPAXXZ ; CreateBra_Encoder_ARMT(void)
.rdata:00000088                 db    1
.rdata:00000089                 db    7
.rdata:0000008A                 db    3
.rdata:0000008B                 db    3
.rdata:0000008C                 db    0
.rdata:0000008D                 db    0
.rdata:0000008E                 db    0
.rdata:0000008F                 db    0
.rdata:00000090                 dd offset $SG66596      ; "ARMT"
.rdata:00000094                 db    1
.rdata:00000095                 db    0
.rdata:00000096                 db    0
.rdata:00000097                 db    0
.rdata:00000098                 db    1
.rdata:00000099                 db    0
.rdata:0000009A                 db    0
.rdata:0000009B                 db    0
.rdata:0000009C                 db    0
.rdata:0000009D                 db    0
.rdata:0000009E                 db    0
.rdata:0000009F                 db    0
.rdata:000000A0                 dd offset ?CreateBra_Decoder_SPARC@@YGPAXXZ ; CreateBra_Decoder_SPARC(void)
.rdata:000000A4                 dd offset ?CreateBra_Encoder_SPARC@@YGPAXXZ ; CreateBra_Encoder_SPARC(void)
.rdata:000000A8                 db    5
.rdata:000000A9                 db    8
.rdata:000000AA                 db    3
.rdata:000000AB                 db    3
.rdata:000000AC                 db    0
.rdata:000000AD                 db    0
.rdata:000000AE                 db    0
.rdata:000000AF                 db    0
.rdata:000000B0                 dd offset $SG66597      ; "SPARC"
.rdata:000000B4                 db    1
.rdata:000000B5                 db    0
.rdata:000000B6                 db    0
.rdata:000000B7                 db    0
.rdata:000000B8                 db    1
.rdata:000000B9                 db    0
.rdata:000000BA                 db    0
.rdata:000000BB                 db    0
.rdata:000000BC                 db    0
.rdata:000000BD                 db    0
.rdata:000000BE                 db    0
.rdata:000000BF                 db    0
.rdata:000000BF _rdata          ends
.rdata:000000BF
.text:000000C0 ; ===========================================================================
.text:000000C0
.text:000000C0 ; Segment type: Pure code
.text:000000C0 ; Segment permissions: Read/Execute
.text:000000C0 _text           segment para public 'CODE' use32
.text:000000C0                 assume cs:_text
.text:000000C0                 ;org 0C0h
.text:000000C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; void * __stdcall CreateBra_Decoder_PPC(void)
.text:000000C0 ?CreateBra_Decoder_PPC@@YGPAXXZ proc near ; DATA XREF: .rdata:_g_CodecsInfoo
.text:000000C0
.text:000000C0 var_18          = dword ptr -18h
.text:000000C0 var_14          = dword ptr -14h
.text:000000C0 var_10          = dword ptr -10h
.text:000000C0 var_C           = dword ptr -0Ch
.text:000000C0 var_4           = dword ptr -4
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 push    0FFFFFFFFh
.text:000000C5                 push    offset __ehhandler$?CreateBra_Decoder_PPC@@YGPAXXZ
.text:000000CA                 mov     eax, large fs:0
.text:000000D0                 push    eax
.text:000000D1                 sub     esp, 0Ch
.text:000000D4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000000DB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000000E2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000E9                 mov     eax, dword ptr ds:___security_cookie
.text:000000EE                 xor     eax, ebp
.text:000000F0                 push    eax
.text:000000F1                 lea     eax, [ebp+var_C]
.text:000000F4                 mov     large fs:0, eax
.text:000000FA                 push    14h             ; unsigned int
.text:000000FC                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000101                 add     esp, 4
.text:00000104                 mov     [ebp+var_14], eax
.text:00000107                 mov     [ebp+var_4], 0
.text:0000010E                 cmp     [ebp+var_14], 0
.text:00000112                 jz      short loc_128
.text:00000114                 push    0
.text:00000116                 push    offset _PPC_Convert@16 ; PPC_Convert(x,x,x,x)
.text:0000011B                 mov     ecx, [ebp+var_14]
.text:0000011E                 call    ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z ; CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)
.text:00000123                 mov     [ebp+var_18], eax
.text:00000126                 jmp     short loc_12F
.text:00000128 ; ---------------------------------------------------------------------------
.text:00000128
.text:00000128 loc_128:                                ; CODE XREF: CreateBra_Decoder_PPC(void)+52j
.text:00000128                 mov     [ebp+var_18], 0
.text:0000012F
.text:0000012F loc_12F:                                ; CODE XREF: CreateBra_Decoder_PPC(void)+66j
.text:0000012F                 mov     eax, [ebp+var_18]
.text:00000132                 mov     [ebp+var_10], eax
.text:00000135                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000013C                 mov     eax, [ebp+var_10]
.text:0000013F                 mov     ecx, [ebp+var_C]
.text:00000142                 mov     large fs:0, ecx
.text:00000149                 pop     ecx
.text:0000014A                 add     esp, 18h
.text:0000014D                 cmp     ebp, esp
.text:0000014F                 call    __RTC_CheckEsp
.text:00000154                 mov     esp, ebp
.text:00000156                 pop     ebp
.text:00000157                 retn
.text:00000157 ?CreateBra_Decoder_PPC@@YGPAXXZ endp
.text:00000157
.text:00000157 ; ---------------------------------------------------------------------------
.text:00000158                 align 10h
.text:00000160
.text:00000160 ; =============== S U B R O U T I N E =======================================
.text:00000160
.text:00000160 ; Attributes: bp-based frame
.text:00000160
.text:00000160 ; void * __stdcall CreateBra_Encoder_PPC(void)
.text:00000160 ?CreateBra_Encoder_PPC@@YGPAXXZ proc near ; DATA XREF: .rdata:00000024o
.text:00000160
.text:00000160 var_18          = dword ptr -18h
.text:00000160 var_14          = dword ptr -14h
.text:00000160 var_10          = dword ptr -10h
.text:00000160 var_C           = dword ptr -0Ch
.text:00000160 var_4           = dword ptr -4
.text:00000160
.text:00000160                 push    ebp
.text:00000161                 mov     ebp, esp
.text:00000163                 push    0FFFFFFFFh
.text:00000165                 push    offset __ehhandler$?CreateBra_Encoder_PPC@@YGPAXXZ
.text:0000016A                 mov     eax, large fs:0
.text:00000170                 push    eax
.text:00000171                 sub     esp, 0Ch
.text:00000174                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000017B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000182                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000189                 mov     eax, dword ptr ds:___security_cookie
.text:0000018E                 xor     eax, ebp
.text:00000190                 push    eax
.text:00000191                 lea     eax, [ebp+var_C]
.text:00000194                 mov     large fs:0, eax
.text:0000019A                 push    14h             ; unsigned int
.text:0000019C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000001A1                 add     esp, 4
.text:000001A4                 mov     [ebp+var_14], eax
.text:000001A7                 mov     [ebp+var_4], 0
.text:000001AE                 cmp     [ebp+var_14], 0
.text:000001B2                 jz      short loc_1C8
.text:000001B4                 push    1
.text:000001B6                 push    offset _PPC_Convert@16 ; PPC_Convert(x,x,x,x)
.text:000001BB                 mov     ecx, [ebp+var_14]
.text:000001BE                 call    ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z ; CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)
.text:000001C3                 mov     [ebp+var_18], eax
.text:000001C6                 jmp     short loc_1CF
.text:000001C8 ; ---------------------------------------------------------------------------
.text:000001C8
.text:000001C8 loc_1C8:                                ; CODE XREF: CreateBra_Encoder_PPC(void)+52j
.text:000001C8                 mov     [ebp+var_18], 0
.text:000001CF
.text:000001CF loc_1CF:                                ; CODE XREF: CreateBra_Encoder_PPC(void)+66j
.text:000001CF                 mov     eax, [ebp+var_18]
.text:000001D2                 mov     [ebp+var_10], eax
.text:000001D5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001DC                 mov     eax, [ebp+var_10]
.text:000001DF                 mov     ecx, [ebp+var_C]
.text:000001E2                 mov     large fs:0, ecx
.text:000001E9                 pop     ecx
.text:000001EA                 add     esp, 18h
.text:000001ED                 cmp     ebp, esp
.text:000001EF                 call    __RTC_CheckEsp
.text:000001F4                 mov     esp, ebp
.text:000001F6                 pop     ebp
.text:000001F7                 retn
.text:000001F7 ?CreateBra_Encoder_PPC@@YGPAXXZ endp
.text:000001F7
.text:000001F7 ; ---------------------------------------------------------------------------
.text:000001F8                 align 10h
.text:00000200
.text:00000200 ; =============== S U B R O U T I N E =======================================
.text:00000200
.text:00000200 ; Attributes: bp-based frame
.text:00000200
.text:00000200 ; void * __stdcall CreateBra_Decoder_IA64(void)
.text:00000200 ?CreateBra_Decoder_IA64@@YGPAXXZ proc near ; DATA XREF: .rdata:00000040o
.text:00000200
.text:00000200 var_18          = dword ptr -18h
.text:00000200 var_14          = dword ptr -14h
.text:00000200 var_10          = dword ptr -10h
.text:00000200 var_C           = dword ptr -0Ch
.text:00000200 var_4           = dword ptr -4
.text:00000200
.text:00000200                 push    ebp
.text:00000201                 mov     ebp, esp
.text:00000203                 push    0FFFFFFFFh
.text:00000205                 push    offset __ehhandler$?CreateBra_Decoder_IA64@@YGPAXXZ
.text:0000020A                 mov     eax, large fs:0
.text:00000210                 push    eax
.text:00000211                 sub     esp, 0Ch
.text:00000214                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000021B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000222                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000229                 mov     eax, dword ptr ds:___security_cookie
.text:0000022E                 xor     eax, ebp
.text:00000230                 push    eax
.text:00000231                 lea     eax, [ebp+var_C]
.text:00000234                 mov     large fs:0, eax
.text:0000023A                 push    14h             ; unsigned int
.text:0000023C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000241                 add     esp, 4
.text:00000244                 mov     [ebp+var_14], eax
.text:00000247                 mov     [ebp+var_4], 0
.text:0000024E                 cmp     [ebp+var_14], 0
.text:00000252                 jz      short loc_268
.text:00000254                 push    0
.text:00000256                 push    offset _IA64_Convert@16 ; IA64_Convert(x,x,x,x)
.text:0000025B                 mov     ecx, [ebp+var_14]
.text:0000025E                 call    ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z ; CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)
.text:00000263                 mov     [ebp+var_18], eax
.text:00000266                 jmp     short loc_26F
.text:00000268 ; ---------------------------------------------------------------------------
.text:00000268
.text:00000268 loc_268:                                ; CODE XREF: CreateBra_Decoder_IA64(void)+52j
.text:00000268                 mov     [ebp+var_18], 0
.text:0000026F
.text:0000026F loc_26F:                                ; CODE XREF: CreateBra_Decoder_IA64(void)+66j
.text:0000026F                 mov     eax, [ebp+var_18]
.text:00000272                 mov     [ebp+var_10], eax
.text:00000275                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000027C                 mov     eax, [ebp+var_10]
.text:0000027F                 mov     ecx, [ebp+var_C]
.text:00000282                 mov     large fs:0, ecx
.text:00000289                 pop     ecx
.text:0000028A                 add     esp, 18h
.text:0000028D                 cmp     ebp, esp
.text:0000028F                 call    __RTC_CheckEsp
.text:00000294                 mov     esp, ebp
.text:00000296                 pop     ebp
.text:00000297                 retn
.text:00000297 ?CreateBra_Decoder_IA64@@YGPAXXZ endp
.text:00000297
.text:00000297 ; ---------------------------------------------------------------------------
.text:00000298                 align 10h
.text:000002A0
.text:000002A0 ; =============== S U B R O U T I N E =======================================
.text:000002A0
.text:000002A0 ; Attributes: bp-based frame
.text:000002A0
.text:000002A0 ; void * __stdcall CreateBra_Encoder_IA64(void)
.text:000002A0 ?CreateBra_Encoder_IA64@@YGPAXXZ proc near ; DATA XREF: .rdata:00000044o
.text:000002A0
.text:000002A0 var_18          = dword ptr -18h
.text:000002A0 var_14          = dword ptr -14h
.text:000002A0 var_10          = dword ptr -10h
.text:000002A0 var_C           = dword ptr -0Ch
.text:000002A0 var_4           = dword ptr -4
.text:000002A0
.text:000002A0                 push    ebp
.text:000002A1                 mov     ebp, esp
.text:000002A3                 push    0FFFFFFFFh
.text:000002A5                 push    offset __ehhandler$?CreateBra_Encoder_IA64@@YGPAXXZ
.text:000002AA                 mov     eax, large fs:0
.text:000002B0                 push    eax
.text:000002B1                 sub     esp, 0Ch
.text:000002B4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000002BB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000002C2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000002C9                 mov     eax, dword ptr ds:___security_cookie
.text:000002CE                 xor     eax, ebp
.text:000002D0                 push    eax
.text:000002D1                 lea     eax, [ebp+var_C]
.text:000002D4                 mov     large fs:0, eax
.text:000002DA                 push    14h             ; unsigned int
.text:000002DC                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000002E1                 add     esp, 4
.text:000002E4                 mov     [ebp+var_14], eax
.text:000002E7                 mov     [ebp+var_4], 0
.text:000002EE                 cmp     [ebp+var_14], 0
.text:000002F2                 jz      short loc_308
.text:000002F4                 push    1
.text:000002F6                 push    offset _IA64_Convert@16 ; IA64_Convert(x,x,x,x)
.text:000002FB                 mov     ecx, [ebp+var_14]
.text:000002FE                 call    ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z ; CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)
.text:00000303                 mov     [ebp+var_18], eax
.text:00000306                 jmp     short loc_30F
.text:00000308 ; ---------------------------------------------------------------------------
.text:00000308
.text:00000308 loc_308:                                ; CODE XREF: CreateBra_Encoder_IA64(void)+52j
.text:00000308                 mov     [ebp+var_18], 0
.text:0000030F
.text:0000030F loc_30F:                                ; CODE XREF: CreateBra_Encoder_IA64(void)+66j
.text:0000030F                 mov     eax, [ebp+var_18]
.text:00000312                 mov     [ebp+var_10], eax
.text:00000315                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000031C                 mov     eax, [ebp+var_10]
.text:0000031F                 mov     ecx, [ebp+var_C]
.text:00000322                 mov     large fs:0, ecx
.text:00000329                 pop     ecx
.text:0000032A                 add     esp, 18h
.text:0000032D                 cmp     ebp, esp
.text:0000032F                 call    __RTC_CheckEsp
.text:00000334                 mov     esp, ebp
.text:00000336                 pop     ebp
.text:00000337                 retn
.text:00000337 ?CreateBra_Encoder_IA64@@YGPAXXZ endp
.text:00000337
.text:00000337 ; ---------------------------------------------------------------------------
.text:00000338                 align 10h
.text:00000340
.text:00000340 ; =============== S U B R O U T I N E =======================================
.text:00000340
.text:00000340 ; Attributes: bp-based frame
.text:00000340
.text:00000340 ; void * __stdcall CreateBra_Decoder_ARM(void)
.text:00000340 ?CreateBra_Decoder_ARM@@YGPAXXZ proc near ; DATA XREF: .rdata:00000060o
.text:00000340
.text:00000340 var_18          = dword ptr -18h
.text:00000340 var_14          = dword ptr -14h
.text:00000340 var_10          = dword ptr -10h
.text:00000340 var_C           = dword ptr -0Ch
.text:00000340 var_4           = dword ptr -4
.text:00000340
.text:00000340                 push    ebp
.text:00000341                 mov     ebp, esp
.text:00000343                 push    0FFFFFFFFh
.text:00000345                 push    offset __ehhandler$?CreateBra_Decoder_ARM@@YGPAXXZ
.text:0000034A                 mov     eax, large fs:0
.text:00000350                 push    eax
.text:00000351                 sub     esp, 0Ch
.text:00000354                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000035B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000362                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000369                 mov     eax, dword ptr ds:___security_cookie
.text:0000036E                 xor     eax, ebp
.text:00000370                 push    eax
.text:00000371                 lea     eax, [ebp+var_C]
.text:00000374                 mov     large fs:0, eax
.text:0000037A                 push    14h             ; unsigned int
.text:0000037C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000381                 add     esp, 4
.text:00000384                 mov     [ebp+var_14], eax
.text:00000387                 mov     [ebp+var_4], 0
.text:0000038E                 cmp     [ebp+var_14], 0
.text:00000392                 jz      short loc_3A8
.text:00000394                 push    0
.text:00000396                 push    offset _ARM_Convert@16 ; ARM_Convert(x,x,x,x)
.text:0000039B                 mov     ecx, [ebp+var_14]
.text:0000039E                 call    ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z ; CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)
.text:000003A3                 mov     [ebp+var_18], eax
.text:000003A6                 jmp     short loc_3AF
.text:000003A8 ; ---------------------------------------------------------------------------
.text:000003A8
.text:000003A8 loc_3A8:                                ; CODE XREF: CreateBra_Decoder_ARM(void)+52j
.text:000003A8                 mov     [ebp+var_18], 0
.text:000003AF
.text:000003AF loc_3AF:                                ; CODE XREF: CreateBra_Decoder_ARM(void)+66j
.text:000003AF                 mov     eax, [ebp+var_18]
.text:000003B2                 mov     [ebp+var_10], eax
.text:000003B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000003BC                 mov     eax, [ebp+var_10]
.text:000003BF                 mov     ecx, [ebp+var_C]
.text:000003C2                 mov     large fs:0, ecx
.text:000003C9                 pop     ecx
.text:000003CA                 add     esp, 18h
.text:000003CD                 cmp     ebp, esp
.text:000003CF                 call    __RTC_CheckEsp
.text:000003D4                 mov     esp, ebp
.text:000003D6                 pop     ebp
.text:000003D7                 retn
.text:000003D7 ?CreateBra_Decoder_ARM@@YGPAXXZ endp
.text:000003D7
.text:000003D7 ; ---------------------------------------------------------------------------
.text:000003D8                 align 10h
.text:000003E0
.text:000003E0 ; =============== S U B R O U T I N E =======================================
.text:000003E0
.text:000003E0 ; Attributes: bp-based frame
.text:000003E0
.text:000003E0 ; void * __stdcall CreateBra_Encoder_ARM(void)
.text:000003E0 ?CreateBra_Encoder_ARM@@YGPAXXZ proc near ; DATA XREF: .rdata:00000064o
.text:000003E0
.text:000003E0 var_18          = dword ptr -18h
.text:000003E0 var_14          = dword ptr -14h
.text:000003E0 var_10          = dword ptr -10h
.text:000003E0 var_C           = dword ptr -0Ch
.text:000003E0 var_4           = dword ptr -4
.text:000003E0
.text:000003E0                 push    ebp
.text:000003E1                 mov     ebp, esp
.text:000003E3                 push    0FFFFFFFFh
.text:000003E5                 push    offset __ehhandler$?CreateBra_Encoder_ARM@@YGPAXXZ
.text:000003EA                 mov     eax, large fs:0
.text:000003F0                 push    eax
.text:000003F1                 sub     esp, 0Ch
.text:000003F4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000003FB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000402                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000409                 mov     eax, dword ptr ds:___security_cookie
.text:0000040E                 xor     eax, ebp
.text:00000410                 push    eax
.text:00000411                 lea     eax, [ebp+var_C]
.text:00000414                 mov     large fs:0, eax
.text:0000041A                 push    14h             ; unsigned int
.text:0000041C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000421                 add     esp, 4
.text:00000424                 mov     [ebp+var_14], eax
.text:00000427                 mov     [ebp+var_4], 0
.text:0000042E                 cmp     [ebp+var_14], 0
.text:00000432                 jz      short loc_448
.text:00000434                 push    1
.text:00000436                 push    offset _ARM_Convert@16 ; ARM_Convert(x,x,x,x)
.text:0000043B                 mov     ecx, [ebp+var_14]
.text:0000043E                 call    ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z ; CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)
.text:00000443                 mov     [ebp+var_18], eax
.text:00000446                 jmp     short loc_44F
.text:00000448 ; ---------------------------------------------------------------------------
.text:00000448
.text:00000448 loc_448:                                ; CODE XREF: CreateBra_Encoder_ARM(void)+52j
.text:00000448                 mov     [ebp+var_18], 0
.text:0000044F
.text:0000044F loc_44F:                                ; CODE XREF: CreateBra_Encoder_ARM(void)+66j
.text:0000044F                 mov     eax, [ebp+var_18]
.text:00000452                 mov     [ebp+var_10], eax
.text:00000455                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000045C                 mov     eax, [ebp+var_10]
.text:0000045F                 mov     ecx, [ebp+var_C]
.text:00000462                 mov     large fs:0, ecx
.text:00000469                 pop     ecx
.text:0000046A                 add     esp, 18h
.text:0000046D                 cmp     ebp, esp
.text:0000046F                 call    __RTC_CheckEsp
.text:00000474                 mov     esp, ebp
.text:00000476                 pop     ebp
.text:00000477                 retn
.text:00000477 ?CreateBra_Encoder_ARM@@YGPAXXZ endp
.text:00000477
.text:00000477 ; ---------------------------------------------------------------------------
.text:00000478                 align 10h
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 ; void * __stdcall CreateBra_Decoder_ARMT(void)
.text:00000480 ?CreateBra_Decoder_ARMT@@YGPAXXZ proc near ; DATA XREF: .rdata:00000080o
.text:00000480
.text:00000480 var_18          = dword ptr -18h
.text:00000480 var_14          = dword ptr -14h
.text:00000480 var_10          = dword ptr -10h
.text:00000480 var_C           = dword ptr -0Ch
.text:00000480 var_4           = dword ptr -4
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 push    0FFFFFFFFh
.text:00000485                 push    offset __ehhandler$?CreateBra_Decoder_ARMT@@YGPAXXZ
.text:0000048A                 mov     eax, large fs:0
.text:00000490                 push    eax
.text:00000491                 sub     esp, 0Ch
.text:00000494                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000049B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000004A2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000004A9                 mov     eax, dword ptr ds:___security_cookie
.text:000004AE                 xor     eax, ebp
.text:000004B0                 push    eax
.text:000004B1                 lea     eax, [ebp+var_C]
.text:000004B4                 mov     large fs:0, eax
.text:000004BA                 push    14h             ; unsigned int
.text:000004BC                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000004C1                 add     esp, 4
.text:000004C4                 mov     [ebp+var_14], eax
.text:000004C7                 mov     [ebp+var_4], 0
.text:000004CE                 cmp     [ebp+var_14], 0
.text:000004D2                 jz      short loc_4E8
.text:000004D4                 push    0
.text:000004D6                 push    offset _ARMT_Convert@16 ; ARMT_Convert(x,x,x,x)
.text:000004DB                 mov     ecx, [ebp+var_14]
.text:000004DE                 call    ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z ; CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)
.text:000004E3                 mov     [ebp+var_18], eax
.text:000004E6                 jmp     short loc_4EF
.text:000004E8 ; ---------------------------------------------------------------------------
.text:000004E8
.text:000004E8 loc_4E8:                                ; CODE XREF: CreateBra_Decoder_ARMT(void)+52j
.text:000004E8                 mov     [ebp+var_18], 0
.text:000004EF
.text:000004EF loc_4EF:                                ; CODE XREF: CreateBra_Decoder_ARMT(void)+66j
.text:000004EF                 mov     eax, [ebp+var_18]
.text:000004F2                 mov     [ebp+var_10], eax
.text:000004F5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000004FC                 mov     eax, [ebp+var_10]
.text:000004FF                 mov     ecx, [ebp+var_C]
.text:00000502                 mov     large fs:0, ecx
.text:00000509                 pop     ecx
.text:0000050A                 add     esp, 18h
.text:0000050D                 cmp     ebp, esp
.text:0000050F                 call    __RTC_CheckEsp
.text:00000514                 mov     esp, ebp
.text:00000516                 pop     ebp
.text:00000517                 retn
.text:00000517 ?CreateBra_Decoder_ARMT@@YGPAXXZ endp
.text:00000517
.text:00000517 ; ---------------------------------------------------------------------------
.text:00000518                 align 10h
.text:00000520
.text:00000520 ; =============== S U B R O U T I N E =======================================
.text:00000520
.text:00000520 ; Attributes: bp-based frame
.text:00000520
.text:00000520 ; void * __stdcall CreateBra_Encoder_ARMT(void)
.text:00000520 ?CreateBra_Encoder_ARMT@@YGPAXXZ proc near ; DATA XREF: .rdata:00000084o
.text:00000520
.text:00000520 var_18          = dword ptr -18h
.text:00000520 var_14          = dword ptr -14h
.text:00000520 var_10          = dword ptr -10h
.text:00000520 var_C           = dword ptr -0Ch
.text:00000520 var_4           = dword ptr -4
.text:00000520
.text:00000520                 push    ebp
.text:00000521                 mov     ebp, esp
.text:00000523                 push    0FFFFFFFFh
.text:00000525                 push    offset __ehhandler$?CreateBra_Encoder_ARMT@@YGPAXXZ
.text:0000052A                 mov     eax, large fs:0
.text:00000530                 push    eax
.text:00000531                 sub     esp, 0Ch
.text:00000534                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000053B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000542                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000549                 mov     eax, dword ptr ds:___security_cookie
.text:0000054E                 xor     eax, ebp
.text:00000550                 push    eax
.text:00000551                 lea     eax, [ebp+var_C]
.text:00000554                 mov     large fs:0, eax
.text:0000055A                 push    14h             ; unsigned int
.text:0000055C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000561                 add     esp, 4
.text:00000564                 mov     [ebp+var_14], eax
.text:00000567                 mov     [ebp+var_4], 0
.text:0000056E                 cmp     [ebp+var_14], 0
.text:00000572                 jz      short loc_588
.text:00000574                 push    1
.text:00000576                 push    offset _ARMT_Convert@16 ; ARMT_Convert(x,x,x,x)
.text:0000057B                 mov     ecx, [ebp+var_14]
.text:0000057E                 call    ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z ; CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)
.text:00000583                 mov     [ebp+var_18], eax
.text:00000586                 jmp     short loc_58F
.text:00000588 ; ---------------------------------------------------------------------------
.text:00000588
.text:00000588 loc_588:                                ; CODE XREF: CreateBra_Encoder_ARMT(void)+52j
.text:00000588                 mov     [ebp+var_18], 0
.text:0000058F
.text:0000058F loc_58F:                                ; CODE XREF: CreateBra_Encoder_ARMT(void)+66j
.text:0000058F                 mov     eax, [ebp+var_18]
.text:00000592                 mov     [ebp+var_10], eax
.text:00000595                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000059C                 mov     eax, [ebp+var_10]
.text:0000059F                 mov     ecx, [ebp+var_C]
.text:000005A2                 mov     large fs:0, ecx
.text:000005A9                 pop     ecx
.text:000005AA                 add     esp, 18h
.text:000005AD                 cmp     ebp, esp
.text:000005AF                 call    __RTC_CheckEsp
.text:000005B4                 mov     esp, ebp
.text:000005B6                 pop     ebp
.text:000005B7                 retn
.text:000005B7 ?CreateBra_Encoder_ARMT@@YGPAXXZ endp
.text:000005B7
.text:000005B7 ; ---------------------------------------------------------------------------
.text:000005B8                 align 10h
.text:000005C0
.text:000005C0 ; =============== S U B R O U T I N E =======================================
.text:000005C0
.text:000005C0 ; Attributes: bp-based frame
.text:000005C0
.text:000005C0 ; void * __stdcall CreateBra_Decoder_SPARC(void)
.text:000005C0 ?CreateBra_Decoder_SPARC@@YGPAXXZ proc near ; DATA XREF: .rdata:000000A0o
.text:000005C0
.text:000005C0 var_18          = dword ptr -18h
.text:000005C0 var_14          = dword ptr -14h
.text:000005C0 var_10          = dword ptr -10h
.text:000005C0 var_C           = dword ptr -0Ch
.text:000005C0 var_4           = dword ptr -4
.text:000005C0
.text:000005C0                 push    ebp
.text:000005C1                 mov     ebp, esp
.text:000005C3                 push    0FFFFFFFFh
.text:000005C5                 push    offset __ehhandler$?CreateBra_Decoder_SPARC@@YGPAXXZ
.text:000005CA                 mov     eax, large fs:0
.text:000005D0                 push    eax
.text:000005D1                 sub     esp, 0Ch
.text:000005D4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000005DB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000005E2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000005E9                 mov     eax, dword ptr ds:___security_cookie
.text:000005EE                 xor     eax, ebp
.text:000005F0                 push    eax
.text:000005F1                 lea     eax, [ebp+var_C]
.text:000005F4                 mov     large fs:0, eax
.text:000005FA                 push    14h             ; unsigned int
.text:000005FC                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000601                 add     esp, 4
.text:00000604                 mov     [ebp+var_14], eax
.text:00000607                 mov     [ebp+var_4], 0
.text:0000060E                 cmp     [ebp+var_14], 0
.text:00000612                 jz      short loc_628
.text:00000614                 push    0
.text:00000616                 push    offset _SPARC_Convert@16 ; SPARC_Convert(x,x,x,x)
.text:0000061B                 mov     ecx, [ebp+var_14]
.text:0000061E                 call    ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z ; CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)
.text:00000623                 mov     [ebp+var_18], eax
.text:00000626                 jmp     short loc_62F
.text:00000628 ; ---------------------------------------------------------------------------
.text:00000628
.text:00000628 loc_628:                                ; CODE XREF: CreateBra_Decoder_SPARC(void)+52j
.text:00000628                 mov     [ebp+var_18], 0
.text:0000062F
.text:0000062F loc_62F:                                ; CODE XREF: CreateBra_Decoder_SPARC(void)+66j
.text:0000062F                 mov     eax, [ebp+var_18]
.text:00000632                 mov     [ebp+var_10], eax
.text:00000635                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000063C                 mov     eax, [ebp+var_10]
.text:0000063F                 mov     ecx, [ebp+var_C]
.text:00000642                 mov     large fs:0, ecx
.text:00000649                 pop     ecx
.text:0000064A                 add     esp, 18h
.text:0000064D                 cmp     ebp, esp
.text:0000064F                 call    __RTC_CheckEsp
.text:00000654                 mov     esp, ebp
.text:00000656                 pop     ebp
.text:00000657                 retn
.text:00000657 ?CreateBra_Decoder_SPARC@@YGPAXXZ endp
.text:00000657
.text:00000657 ; ---------------------------------------------------------------------------
.text:00000658                 align 10h
.text:00000660
.text:00000660 ; =============== S U B R O U T I N E =======================================
.text:00000660
.text:00000660 ; Attributes: bp-based frame
.text:00000660
.text:00000660 ; void * __stdcall CreateBra_Encoder_SPARC(void)
.text:00000660 ?CreateBra_Encoder_SPARC@@YGPAXXZ proc near ; DATA XREF: .rdata:000000A4o
.text:00000660
.text:00000660 var_18          = dword ptr -18h
.text:00000660 var_14          = dword ptr -14h
.text:00000660 var_10          = dword ptr -10h
.text:00000660 var_C           = dword ptr -0Ch
.text:00000660 var_4           = dword ptr -4
.text:00000660
.text:00000660                 push    ebp
.text:00000661                 mov     ebp, esp
.text:00000663                 push    0FFFFFFFFh
.text:00000665                 push    offset __ehhandler$?CreateBra_Encoder_SPARC@@YGPAXXZ
.text:0000066A                 mov     eax, large fs:0
.text:00000670                 push    eax
.text:00000671                 sub     esp, 0Ch
.text:00000674                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000067B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000682                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000689                 mov     eax, dword ptr ds:___security_cookie
.text:0000068E                 xor     eax, ebp
.text:00000690                 push    eax
.text:00000691                 lea     eax, [ebp+var_C]
.text:00000694                 mov     large fs:0, eax
.text:0000069A                 push    14h             ; unsigned int
.text:0000069C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000006A1                 add     esp, 4
.text:000006A4                 mov     [ebp+var_14], eax
.text:000006A7                 mov     [ebp+var_4], 0
.text:000006AE                 cmp     [ebp+var_14], 0
.text:000006B2                 jz      short loc_6C8
.text:000006B4                 push    1
.text:000006B6                 push    offset _SPARC_Convert@16 ; SPARC_Convert(x,x,x,x)
.text:000006BB                 mov     ecx, [ebp+var_14]
.text:000006BE                 call    ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z ; CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)
.text:000006C3                 mov     [ebp+var_18], eax
.text:000006C6                 jmp     short loc_6CF
.text:000006C8 ; ---------------------------------------------------------------------------
.text:000006C8
.text:000006C8 loc_6C8:                                ; CODE XREF: CreateBra_Encoder_SPARC(void)+52j
.text:000006C8                 mov     [ebp+var_18], 0
.text:000006CF
.text:000006CF loc_6CF:                                ; CODE XREF: CreateBra_Encoder_SPARC(void)+66j
.text:000006CF                 mov     eax, [ebp+var_18]
.text:000006D2                 mov     [ebp+var_10], eax
.text:000006D5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006DC                 mov     eax, [ebp+var_10]
.text:000006DF                 mov     ecx, [ebp+var_C]
.text:000006E2                 mov     large fs:0, ecx
.text:000006E9                 pop     ecx
.text:000006EA                 add     esp, 18h
.text:000006ED                 cmp     ebp, esp
.text:000006EF                 call    __RTC_CheckEsp
.text:000006F4                 mov     esp, ebp
.text:000006F6                 pop     ebp
.text:000006F7                 retn
.text:000006F7 ?CreateBra_Encoder_SPARC@@YGPAXXZ endp
.text:000006F7
.text:000006F7 _text           ends
.text:000006F7
.text$x:000006F8 ; ===========================================================================
.text$x:000006F8
.text$x:000006F8 ; Segment type: Pure code
.text$x:000006F8 ; Segment permissions: Read/Execute
.text$x:000006F8 _text$x         segment para public 'CODE' use32
.text$x:000006F8                 assume cs:_text$x
.text$x:000006F8                 ;org 6F8h
.text$x:000006F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000006F8
.text$x:000006F8 ; =============== S U B R O U T I N E =======================================
.text$x:000006F8
.text$x:000006F8
.text$x:000006F8 __unwindfunclet$?CreateBra_Decoder_PPC@@YGPAXXZ$0 proc near
.text$x:000006F8                                         ; DATA XREF: .xdata$x:00000878o
.text$x:000006F8                 mov     eax, [ebp-14h]
.text$x:000006FB                 push    eax             ; void *
.text$x:000006FC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000701                 pop     ecx
.text$x:00000702                 retn
.text$x:00000702 __unwindfunclet$?CreateBra_Decoder_PPC@@YGPAXXZ$0 endp
.text$x:00000702
.text$x:00000703
.text$x:00000703 ; =============== S U B R O U T I N E =======================================
.text$x:00000703
.text$x:00000703
.text$x:00000703 __ehhandler$?CreateBra_Decoder_PPC@@YGPAXXZ proc near
.text$x:00000703                                         ; DATA XREF: CreateBra_Decoder_PPC(void)+5o
.text$x:00000703
.text$x:00000703 arg_4           = dword ptr  8
.text$x:00000703
.text$x:00000703                 mov     edx, [esp+arg_4]
.text$x:00000707                 lea     eax, [edx+0Ch]
.text$x:0000070A                 mov     ecx, [edx-10h]
.text$x:0000070D                 xor     ecx, eax
.text$x:0000070F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000714                 mov     eax, offset __ehfuncinfo$?CreateBra_Decoder_PPC@@YGPAXXZ
.text$x:00000719                 jmp     ___CxxFrameHandler3
.text$x:00000719 __ehhandler$?CreateBra_Decoder_PPC@@YGPAXXZ endp
.text$x:00000719
.text$x:0000071E
.text$x:0000071E ; =============== S U B R O U T I N E =======================================
.text$x:0000071E
.text$x:0000071E
.text$x:0000071E __unwindfunclet$?CreateBra_Encoder_PPC@@YGPAXXZ$0 proc near
.text$x:0000071E                                         ; DATA XREF: .xdata$x:000008A4o
.text$x:0000071E                 mov     eax, [ebp-14h]
.text$x:00000721                 push    eax             ; void *
.text$x:00000722                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000727                 pop     ecx
.text$x:00000728                 retn
.text$x:00000728 __unwindfunclet$?CreateBra_Encoder_PPC@@YGPAXXZ$0 endp
.text$x:00000728
.text$x:00000729
.text$x:00000729 ; =============== S U B R O U T I N E =======================================
.text$x:00000729
.text$x:00000729
.text$x:00000729 __ehhandler$?CreateBra_Encoder_PPC@@YGPAXXZ proc near
.text$x:00000729                                         ; DATA XREF: CreateBra_Encoder_PPC(void)+5o
.text$x:00000729
.text$x:00000729 arg_4           = dword ptr  8
.text$x:00000729
.text$x:00000729                 mov     edx, [esp+arg_4]
.text$x:0000072D                 lea     eax, [edx+0Ch]
.text$x:00000730                 mov     ecx, [edx-10h]
.text$x:00000733                 xor     ecx, eax
.text$x:00000735                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000073A                 mov     eax, offset __ehfuncinfo$?CreateBra_Encoder_PPC@@YGPAXXZ
.text$x:0000073F                 jmp     ___CxxFrameHandler3
.text$x:0000073F __ehhandler$?CreateBra_Encoder_PPC@@YGPAXXZ endp
.text$x:0000073F
.text$x:00000744
.text$x:00000744 ; =============== S U B R O U T I N E =======================================
.text$x:00000744
.text$x:00000744
.text$x:00000744 __unwindfunclet$?CreateBra_Decoder_IA64@@YGPAXXZ$0 proc near
.text$x:00000744                                         ; DATA XREF: .xdata$x:000008D0o
.text$x:00000744                 mov     eax, [ebp-14h]
.text$x:00000747                 push    eax             ; void *
.text$x:00000748                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000074D                 pop     ecx
.text$x:0000074E                 retn
.text$x:0000074E __unwindfunclet$?CreateBra_Decoder_IA64@@YGPAXXZ$0 endp
.text$x:0000074E
.text$x:0000074F
.text$x:0000074F ; =============== S U B R O U T I N E =======================================
.text$x:0000074F
.text$x:0000074F
.text$x:0000074F __ehhandler$?CreateBra_Decoder_IA64@@YGPAXXZ proc near
.text$x:0000074F                                         ; DATA XREF: CreateBra_Decoder_IA64(void)+5o
.text$x:0000074F
.text$x:0000074F arg_4           = dword ptr  8
.text$x:0000074F
.text$x:0000074F                 mov     edx, [esp+arg_4]
.text$x:00000753                 lea     eax, [edx+0Ch]
.text$x:00000756                 mov     ecx, [edx-10h]
.text$x:00000759                 xor     ecx, eax
.text$x:0000075B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000760                 mov     eax, offset __ehfuncinfo$?CreateBra_Decoder_IA64@@YGPAXXZ
.text$x:00000765                 jmp     ___CxxFrameHandler3
.text$x:00000765 __ehhandler$?CreateBra_Decoder_IA64@@YGPAXXZ endp
.text$x:00000765
.text$x:0000076A
.text$x:0000076A ; =============== S U B R O U T I N E =======================================
.text$x:0000076A
.text$x:0000076A
.text$x:0000076A __unwindfunclet$?CreateBra_Encoder_IA64@@YGPAXXZ$0 proc near
.text$x:0000076A                                         ; DATA XREF: .xdata$x:000008FCo
.text$x:0000076A                 mov     eax, [ebp-14h]
.text$x:0000076D                 push    eax             ; void *
.text$x:0000076E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000773                 pop     ecx
.text$x:00000774                 retn
.text$x:00000774 __unwindfunclet$?CreateBra_Encoder_IA64@@YGPAXXZ$0 endp
.text$x:00000774
.text$x:00000775
.text$x:00000775 ; =============== S U B R O U T I N E =======================================
.text$x:00000775
.text$x:00000775
.text$x:00000775 __ehhandler$?CreateBra_Encoder_IA64@@YGPAXXZ proc near
.text$x:00000775                                         ; DATA XREF: CreateBra_Encoder_IA64(void)+5o
.text$x:00000775
.text$x:00000775 arg_4           = dword ptr  8
.text$x:00000775
.text$x:00000775                 mov     edx, [esp+arg_4]
.text$x:00000779                 lea     eax, [edx+0Ch]
.text$x:0000077C                 mov     ecx, [edx-10h]
.text$x:0000077F                 xor     ecx, eax
.text$x:00000781                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000786                 mov     eax, offset __ehfuncinfo$?CreateBra_Encoder_IA64@@YGPAXXZ
.text$x:0000078B                 jmp     ___CxxFrameHandler3
.text$x:0000078B __ehhandler$?CreateBra_Encoder_IA64@@YGPAXXZ endp
.text$x:0000078B
.text$x:00000790
.text$x:00000790 ; =============== S U B R O U T I N E =======================================
.text$x:00000790
.text$x:00000790
.text$x:00000790 __unwindfunclet$?CreateBra_Decoder_ARM@@YGPAXXZ$0 proc near
.text$x:00000790                                         ; DATA XREF: .xdata$x:00000928o
.text$x:00000790                 mov     eax, [ebp-14h]
.text$x:00000793                 push    eax             ; void *
.text$x:00000794                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000799                 pop     ecx
.text$x:0000079A                 retn
.text$x:0000079A __unwindfunclet$?CreateBra_Decoder_ARM@@YGPAXXZ$0 endp
.text$x:0000079A
.text$x:0000079B
.text$x:0000079B ; =============== S U B R O U T I N E =======================================
.text$x:0000079B
.text$x:0000079B
.text$x:0000079B __ehhandler$?CreateBra_Decoder_ARM@@YGPAXXZ proc near
.text$x:0000079B                                         ; DATA XREF: CreateBra_Decoder_ARM(void)+5o
.text$x:0000079B
.text$x:0000079B arg_4           = dword ptr  8
.text$x:0000079B
.text$x:0000079B                 mov     edx, [esp+arg_4]
.text$x:0000079F                 lea     eax, [edx+0Ch]
.text$x:000007A2                 mov     ecx, [edx-10h]
.text$x:000007A5                 xor     ecx, eax
.text$x:000007A7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000007AC                 mov     eax, offset __ehfuncinfo$?CreateBra_Decoder_ARM@@YGPAXXZ
.text$x:000007B1                 jmp     ___CxxFrameHandler3
.text$x:000007B1 __ehhandler$?CreateBra_Decoder_ARM@@YGPAXXZ endp
.text$x:000007B1
.text$x:000007B6
.text$x:000007B6 ; =============== S U B R O U T I N E =======================================
.text$x:000007B6
.text$x:000007B6
.text$x:000007B6 __unwindfunclet$?CreateBra_Encoder_ARM@@YGPAXXZ$0 proc near
.text$x:000007B6                                         ; DATA XREF: .xdata$x:00000954o
.text$x:000007B6                 mov     eax, [ebp-14h]
.text$x:000007B9                 push    eax             ; void *
.text$x:000007BA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000007BF                 pop     ecx
.text$x:000007C0                 retn
.text$x:000007C0 __unwindfunclet$?CreateBra_Encoder_ARM@@YGPAXXZ$0 endp
.text$x:000007C0
.text$x:000007C1
.text$x:000007C1 ; =============== S U B R O U T I N E =======================================
.text$x:000007C1
.text$x:000007C1
.text$x:000007C1 __ehhandler$?CreateBra_Encoder_ARM@@YGPAXXZ proc near
.text$x:000007C1                                         ; DATA XREF: CreateBra_Encoder_ARM(void)+5o
.text$x:000007C1
.text$x:000007C1 arg_4           = dword ptr  8
.text$x:000007C1
.text$x:000007C1                 mov     edx, [esp+arg_4]
.text$x:000007C5                 lea     eax, [edx+0Ch]
.text$x:000007C8                 mov     ecx, [edx-10h]
.text$x:000007CB                 xor     ecx, eax
.text$x:000007CD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000007D2                 mov     eax, offset __ehfuncinfo$?CreateBra_Encoder_ARM@@YGPAXXZ
.text$x:000007D7                 jmp     ___CxxFrameHandler3
.text$x:000007D7 __ehhandler$?CreateBra_Encoder_ARM@@YGPAXXZ endp
.text$x:000007D7
.text$x:000007DC
.text$x:000007DC ; =============== S U B R O U T I N E =======================================
.text$x:000007DC
.text$x:000007DC
.text$x:000007DC __unwindfunclet$?CreateBra_Decoder_ARMT@@YGPAXXZ$0 proc near
.text$x:000007DC                                         ; DATA XREF: .xdata$x:00000980o
.text$x:000007DC                 mov     eax, [ebp-14h]
.text$x:000007DF                 push    eax             ; void *
.text$x:000007E0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000007E5                 pop     ecx
.text$x:000007E6                 retn
.text$x:000007E6 __unwindfunclet$?CreateBra_Decoder_ARMT@@YGPAXXZ$0 endp
.text$x:000007E6
.text$x:000007E7
.text$x:000007E7 ; =============== S U B R O U T I N E =======================================
.text$x:000007E7
.text$x:000007E7
.text$x:000007E7 __ehhandler$?CreateBra_Decoder_ARMT@@YGPAXXZ proc near
.text$x:000007E7                                         ; DATA XREF: CreateBra_Decoder_ARMT(void)+5o
.text$x:000007E7
.text$x:000007E7 arg_4           = dword ptr  8
.text$x:000007E7
.text$x:000007E7                 mov     edx, [esp+arg_4]
.text$x:000007EB                 lea     eax, [edx+0Ch]
.text$x:000007EE                 mov     ecx, [edx-10h]
.text$x:000007F1                 xor     ecx, eax
.text$x:000007F3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000007F8                 mov     eax, offset __ehfuncinfo$?CreateBra_Decoder_ARMT@@YGPAXXZ
.text$x:000007FD                 jmp     ___CxxFrameHandler3
.text$x:000007FD __ehhandler$?CreateBra_Decoder_ARMT@@YGPAXXZ endp
.text$x:000007FD
.text$x:00000802
.text$x:00000802 ; =============== S U B R O U T I N E =======================================
.text$x:00000802
.text$x:00000802
.text$x:00000802 __unwindfunclet$?CreateBra_Encoder_ARMT@@YGPAXXZ$0 proc near
.text$x:00000802                                         ; DATA XREF: .xdata$x:000009ACo
.text$x:00000802                 mov     eax, [ebp-14h]
.text$x:00000805                 push    eax             ; void *
.text$x:00000806                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000080B                 pop     ecx
.text$x:0000080C                 retn
.text$x:0000080C __unwindfunclet$?CreateBra_Encoder_ARMT@@YGPAXXZ$0 endp
.text$x:0000080C
.text$x:0000080D
.text$x:0000080D ; =============== S U B R O U T I N E =======================================
.text$x:0000080D
.text$x:0000080D
.text$x:0000080D __ehhandler$?CreateBra_Encoder_ARMT@@YGPAXXZ proc near
.text$x:0000080D                                         ; DATA XREF: CreateBra_Encoder_ARMT(void)+5o
.text$x:0000080D
.text$x:0000080D arg_4           = dword ptr  8
.text$x:0000080D
.text$x:0000080D                 mov     edx, [esp+arg_4]
.text$x:00000811                 lea     eax, [edx+0Ch]
.text$x:00000814                 mov     ecx, [edx-10h]
.text$x:00000817                 xor     ecx, eax
.text$x:00000819                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000081E                 mov     eax, offset __ehfuncinfo$?CreateBra_Encoder_ARMT@@YGPAXXZ
.text$x:00000823                 jmp     ___CxxFrameHandler3
.text$x:00000823 __ehhandler$?CreateBra_Encoder_ARMT@@YGPAXXZ endp
.text$x:00000823
.text$x:00000828
.text$x:00000828 ; =============== S U B R O U T I N E =======================================
.text$x:00000828
.text$x:00000828
.text$x:00000828 __unwindfunclet$?CreateBra_Decoder_SPARC@@YGPAXXZ$0 proc near
.text$x:00000828                                         ; DATA XREF: .xdata$x:000009D8o
.text$x:00000828                 mov     eax, [ebp-14h]
.text$x:0000082B                 push    eax             ; void *
.text$x:0000082C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000831                 pop     ecx
.text$x:00000832                 retn
.text$x:00000832 __unwindfunclet$?CreateBra_Decoder_SPARC@@YGPAXXZ$0 endp
.text$x:00000832
.text$x:00000833
.text$x:00000833 ; =============== S U B R O U T I N E =======================================
.text$x:00000833
.text$x:00000833
.text$x:00000833 __ehhandler$?CreateBra_Decoder_SPARC@@YGPAXXZ proc near
.text$x:00000833                                         ; DATA XREF: CreateBra_Decoder_SPARC(void)+5o
.text$x:00000833
.text$x:00000833 arg_4           = dword ptr  8
.text$x:00000833
.text$x:00000833                 mov     edx, [esp+arg_4]
.text$x:00000837                 lea     eax, [edx+0Ch]
.text$x:0000083A                 mov     ecx, [edx-10h]
.text$x:0000083D                 xor     ecx, eax
.text$x:0000083F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000844                 mov     eax, offset __ehfuncinfo$?CreateBra_Decoder_SPARC@@YGPAXXZ
.text$x:00000849                 jmp     ___CxxFrameHandler3
.text$x:00000849 __ehhandler$?CreateBra_Decoder_SPARC@@YGPAXXZ endp
.text$x:00000849
.text$x:0000084E
.text$x:0000084E ; =============== S U B R O U T I N E =======================================
.text$x:0000084E
.text$x:0000084E
.text$x:0000084E __unwindfunclet$?CreateBra_Encoder_SPARC@@YGPAXXZ$0 proc near
.text$x:0000084E                                         ; DATA XREF: .xdata$x:00000A04o
.text$x:0000084E                 mov     eax, [ebp-14h]
.text$x:00000851                 push    eax             ; void *
.text$x:00000852                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000857                 pop     ecx
.text$x:00000858                 retn
.text$x:00000858 __unwindfunclet$?CreateBra_Encoder_SPARC@@YGPAXXZ$0 endp
.text$x:00000858
.text$x:00000859
.text$x:00000859 ; =============== S U B R O U T I N E =======================================
.text$x:00000859
.text$x:00000859
.text$x:00000859 __ehhandler$?CreateBra_Encoder_SPARC@@YGPAXXZ proc near
.text$x:00000859                                         ; DATA XREF: CreateBra_Encoder_SPARC(void)+5o
.text$x:00000859
.text$x:00000859 arg_4           = dword ptr  8
.text$x:00000859
.text$x:00000859                 mov     edx, [esp+arg_4]
.text$x:0000085D                 lea     eax, [edx+0Ch]
.text$x:00000860                 mov     ecx, [edx-10h]
.text$x:00000863                 xor     ecx, eax
.text$x:00000865                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000086A                 mov     eax, offset __ehfuncinfo$?CreateBra_Encoder_SPARC@@YGPAXXZ
.text$x:0000086F                 jmp     ___CxxFrameHandler3
.text$x:0000086F __ehhandler$?CreateBra_Encoder_SPARC@@YGPAXXZ endp
.text$x:0000086F
.text$x:0000086F _text$x         ends
.text$x:0000086F
.xdata$x:00000874 ; ===========================================================================
.xdata$x:00000874
.xdata$x:00000874 ; Segment type: Pure data
.xdata$x:00000874 ; Segment permissions: Read
.xdata$x:00000874 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000874                 assume cs:_xdata$x
.xdata$x:00000874                 ;org 874h
.xdata$x:00000874 __unwindtable$?CreateBra_Decoder_PPC@@YGPAXXZ db 0FFh
.xdata$x:00000874                                         ; DATA XREF: .xdata$x:00000884o
.xdata$x:00000875                 db 0FFh
.xdata$x:00000876                 db 0FFh
.xdata$x:00000877                 db 0FFh
.xdata$x:00000878                 dd offset __unwindfunclet$?CreateBra_Decoder_PPC@@YGPAXXZ$0
.xdata$x:0000087C __ehfuncinfo$?CreateBra_Decoder_PPC@@YGPAXXZ db  22h ; "
.xdata$x:0000087C                                         ; DATA XREF: __ehhandler$?CreateBra_Decoder_PPC@@YGPAXXZ+11o
.xdata$x:0000087D                 db    5
.xdata$x:0000087E                 db  93h ; ô
.xdata$x:0000087F                 db  19h
.xdata$x:00000880                 db    1
.xdata$x:00000881                 db    0
.xdata$x:00000882                 db    0
.xdata$x:00000883                 db    0
.xdata$x:00000884                 dd offset __unwindtable$?CreateBra_Decoder_PPC@@YGPAXXZ
.xdata$x:00000888                 db    0
.xdata$x:00000889                 db    0
.xdata$x:0000088A                 db    0
.xdata$x:0000088B                 db    0
.xdata$x:0000088C                 db    0
.xdata$x:0000088D                 db    0
.xdata$x:0000088E                 db    0
.xdata$x:0000088F                 db    0
.xdata$x:00000890                 db    0
.xdata$x:00000891                 db    0
.xdata$x:00000892                 db    0
.xdata$x:00000893                 db    0
.xdata$x:00000894                 db    0
.xdata$x:00000895                 db    0
.xdata$x:00000896                 db    0
.xdata$x:00000897                 db    0
.xdata$x:00000898                 db    0
.xdata$x:00000899                 db    0
.xdata$x:0000089A                 db    0
.xdata$x:0000089B                 db    0
.xdata$x:0000089C                 db    1
.xdata$x:0000089D                 db    0
.xdata$x:0000089E                 db    0
.xdata$x:0000089F                 db    0
.xdata$x:000008A0 __unwindtable$?CreateBra_Encoder_PPC@@YGPAXXZ db 0FFh
.xdata$x:000008A0                                         ; DATA XREF: .xdata$x:000008B0o
.xdata$x:000008A1                 db 0FFh
.xdata$x:000008A2                 db 0FFh
.xdata$x:000008A3                 db 0FFh
.xdata$x:000008A4                 dd offset __unwindfunclet$?CreateBra_Encoder_PPC@@YGPAXXZ$0
.xdata$x:000008A8 __ehfuncinfo$?CreateBra_Encoder_PPC@@YGPAXXZ db  22h ; "
.xdata$x:000008A8                                         ; DATA XREF: __ehhandler$?CreateBra_Encoder_PPC@@YGPAXXZ+11o
.xdata$x:000008A9                 db    5
.xdata$x:000008AA                 db  93h ; ô
.xdata$x:000008AB                 db  19h
.xdata$x:000008AC                 db    1
.xdata$x:000008AD                 db    0
.xdata$x:000008AE                 db    0
.xdata$x:000008AF                 db    0
.xdata$x:000008B0                 dd offset __unwindtable$?CreateBra_Encoder_PPC@@YGPAXXZ
.xdata$x:000008B4                 db    0
.xdata$x:000008B5                 db    0
.xdata$x:000008B6                 db    0
.xdata$x:000008B7                 db    0
.xdata$x:000008B8                 db    0
.xdata$x:000008B9                 db    0
.xdata$x:000008BA                 db    0
.xdata$x:000008BB                 db    0
.xdata$x:000008BC                 db    0
.xdata$x:000008BD                 db    0
.xdata$x:000008BE                 db    0
.xdata$x:000008BF                 db    0
.xdata$x:000008C0                 db    0
.xdata$x:000008C1                 db    0
.xdata$x:000008C2                 db    0
.xdata$x:000008C3                 db    0
.xdata$x:000008C4                 db    0
.xdata$x:000008C5                 db    0
.xdata$x:000008C6                 db    0
.xdata$x:000008C7                 db    0
.xdata$x:000008C8                 db    1
.xdata$x:000008C9                 db    0
.xdata$x:000008CA                 db    0
.xdata$x:000008CB                 db    0
.xdata$x:000008CC __unwindtable$?CreateBra_Decoder_IA64@@YGPAXXZ db 0FFh
.xdata$x:000008CC                                         ; DATA XREF: .xdata$x:000008DCo
.xdata$x:000008CD                 db 0FFh
.xdata$x:000008CE                 db 0FFh
.xdata$x:000008CF                 db 0FFh
.xdata$x:000008D0                 dd offset __unwindfunclet$?CreateBra_Decoder_IA64@@YGPAXXZ$0
.xdata$x:000008D4 __ehfuncinfo$?CreateBra_Decoder_IA64@@YGPAXXZ db  22h ; "
.xdata$x:000008D4                                         ; DATA XREF: __ehhandler$?CreateBra_Decoder_IA64@@YGPAXXZ+11o
.xdata$x:000008D5                 db    5
.xdata$x:000008D6                 db  93h ; ô
.xdata$x:000008D7                 db  19h
.xdata$x:000008D8                 db    1
.xdata$x:000008D9                 db    0
.xdata$x:000008DA                 db    0
.xdata$x:000008DB                 db    0
.xdata$x:000008DC                 dd offset __unwindtable$?CreateBra_Decoder_IA64@@YGPAXXZ
.xdata$x:000008E0                 db    0
.xdata$x:000008E1                 db    0
.xdata$x:000008E2                 db    0
.xdata$x:000008E3                 db    0
.xdata$x:000008E4                 db    0
.xdata$x:000008E5                 db    0
.xdata$x:000008E6                 db    0
.xdata$x:000008E7                 db    0
.xdata$x:000008E8                 db    0
.xdata$x:000008E9                 db    0
.xdata$x:000008EA                 db    0
.xdata$x:000008EB                 db    0
.xdata$x:000008EC                 db    0
.xdata$x:000008ED                 db    0
.xdata$x:000008EE                 db    0
.xdata$x:000008EF                 db    0
.xdata$x:000008F0                 db    0
.xdata$x:000008F1                 db    0
.xdata$x:000008F2                 db    0
.xdata$x:000008F3                 db    0
.xdata$x:000008F4                 db    1
.xdata$x:000008F5                 db    0
.xdata$x:000008F6                 db    0
.xdata$x:000008F7                 db    0
.xdata$x:000008F8 __unwindtable$?CreateBra_Encoder_IA64@@YGPAXXZ db 0FFh
.xdata$x:000008F8                                         ; DATA XREF: .xdata$x:00000908o
.xdata$x:000008F9                 db 0FFh
.xdata$x:000008FA                 db 0FFh
.xdata$x:000008FB                 db 0FFh
.xdata$x:000008FC                 dd offset __unwindfunclet$?CreateBra_Encoder_IA64@@YGPAXXZ$0
.xdata$x:00000900 __ehfuncinfo$?CreateBra_Encoder_IA64@@YGPAXXZ db  22h ; "
.xdata$x:00000900                                         ; DATA XREF: __ehhandler$?CreateBra_Encoder_IA64@@YGPAXXZ+11o
.xdata$x:00000901                 db    5
.xdata$x:00000902                 db  93h ; ô
.xdata$x:00000903                 db  19h
.xdata$x:00000904                 db    1
.xdata$x:00000905                 db    0
.xdata$x:00000906                 db    0
.xdata$x:00000907                 db    0
.xdata$x:00000908                 dd offset __unwindtable$?CreateBra_Encoder_IA64@@YGPAXXZ
.xdata$x:0000090C                 align 20h
.xdata$x:00000920                 db    1
.xdata$x:00000921                 db    0
.xdata$x:00000922                 db    0
.xdata$x:00000923                 db    0
.xdata$x:00000924 __unwindtable$?CreateBra_Decoder_ARM@@YGPAXXZ db 0FFh
.xdata$x:00000924                                         ; DATA XREF: .xdata$x:00000934o
.xdata$x:00000925                 db 0FFh
.xdata$x:00000926                 db 0FFh
.xdata$x:00000927                 db 0FFh
.xdata$x:00000928                 dd offset __unwindfunclet$?CreateBra_Decoder_ARM@@YGPAXXZ$0
.xdata$x:0000092C __ehfuncinfo$?CreateBra_Decoder_ARM@@YGPAXXZ db  22h ; "
.xdata$x:0000092C                                         ; DATA XREF: __ehhandler$?CreateBra_Decoder_ARM@@YGPAXXZ+11o
.xdata$x:0000092D                 db    5
.xdata$x:0000092E                 db  93h ; ô
.xdata$x:0000092F                 db  19h
.xdata$x:00000930                 db    1
.xdata$x:00000931                 db    0
.xdata$x:00000932                 db    0
.xdata$x:00000933                 db    0
.xdata$x:00000934                 dd offset __unwindtable$?CreateBra_Decoder_ARM@@YGPAXXZ
.xdata$x:00000938                 db    0
.xdata$x:00000939                 db    0
.xdata$x:0000093A                 db    0
.xdata$x:0000093B                 db    0
.xdata$x:0000093C                 db    0
.xdata$x:0000093D                 db    0
.xdata$x:0000093E                 db    0
.xdata$x:0000093F                 db    0
.xdata$x:00000940                 db    0
.xdata$x:00000941                 db    0
.xdata$x:00000942                 db    0
.xdata$x:00000943                 db    0
.xdata$x:00000944                 db    0
.xdata$x:00000945                 db    0
.xdata$x:00000946                 db    0
.xdata$x:00000947                 db    0
.xdata$x:00000948                 db    0
.xdata$x:00000949                 db    0
.xdata$x:0000094A                 db    0
.xdata$x:0000094B                 db    0
.xdata$x:0000094C                 db    1
.xdata$x:0000094D                 db    0
.xdata$x:0000094E                 db    0
.xdata$x:0000094F                 db    0
.xdata$x:00000950 __unwindtable$?CreateBra_Encoder_ARM@@YGPAXXZ db 0FFh
.xdata$x:00000950                                         ; DATA XREF: .xdata$x:00000960o
.xdata$x:00000951                 db 0FFh
.xdata$x:00000952                 db 0FFh
.xdata$x:00000953                 db 0FFh
.xdata$x:00000954                 dd offset __unwindfunclet$?CreateBra_Encoder_ARM@@YGPAXXZ$0
.xdata$x:00000958 __ehfuncinfo$?CreateBra_Encoder_ARM@@YGPAXXZ db  22h ; "
.xdata$x:00000958                                         ; DATA XREF: __ehhandler$?CreateBra_Encoder_ARM@@YGPAXXZ+11o
.xdata$x:00000959                 db    5
.xdata$x:0000095A                 db  93h ; ô
.xdata$x:0000095B                 db  19h
.xdata$x:0000095C                 db    1
.xdata$x:0000095D                 db    0
.xdata$x:0000095E                 db    0
.xdata$x:0000095F                 db    0
.xdata$x:00000960                 dd offset __unwindtable$?CreateBra_Encoder_ARM@@YGPAXXZ
.xdata$x:00000964                 db    0
.xdata$x:00000965                 db    0
.xdata$x:00000966                 db    0
.xdata$x:00000967                 db    0
.xdata$x:00000968                 db    0
.xdata$x:00000969                 db    0
.xdata$x:0000096A                 db    0
.xdata$x:0000096B                 db    0
.xdata$x:0000096C                 db    0
.xdata$x:0000096D                 db    0
.xdata$x:0000096E                 db    0
.xdata$x:0000096F                 db    0
.xdata$x:00000970                 db    0
.xdata$x:00000971                 db    0
.xdata$x:00000972                 db    0
.xdata$x:00000973                 db    0
.xdata$x:00000974                 db    0
.xdata$x:00000975                 db    0
.xdata$x:00000976                 db    0
.xdata$x:00000977                 db    0
.xdata$x:00000978                 db    1
.xdata$x:00000979                 db    0
.xdata$x:0000097A                 db    0
.xdata$x:0000097B                 db    0
.xdata$x:0000097C __unwindtable$?CreateBra_Decoder_ARMT@@YGPAXXZ db 0FFh
.xdata$x:0000097C                                         ; DATA XREF: .xdata$x:0000098Co
.xdata$x:0000097D                 db 0FFh
.xdata$x:0000097E                 db 0FFh
.xdata$x:0000097F                 db 0FFh
.xdata$x:00000980                 dd offset __unwindfunclet$?CreateBra_Decoder_ARMT@@YGPAXXZ$0
.xdata$x:00000984 __ehfuncinfo$?CreateBra_Decoder_ARMT@@YGPAXXZ db  22h ; "
.xdata$x:00000984                                         ; DATA XREF: __ehhandler$?CreateBra_Decoder_ARMT@@YGPAXXZ+11o
.xdata$x:00000985                 db    5
.xdata$x:00000986                 db  93h ; ô
.xdata$x:00000987                 db  19h
.xdata$x:00000988                 db    1
.xdata$x:00000989                 db    0
.xdata$x:0000098A                 db    0
.xdata$x:0000098B                 db    0
.xdata$x:0000098C                 dd offset __unwindtable$?CreateBra_Decoder_ARMT@@YGPAXXZ
.xdata$x:00000990                 db    0
.xdata$x:00000991                 db    0
.xdata$x:00000992                 db    0
.xdata$x:00000993                 db    0
.xdata$x:00000994                 db    0
.xdata$x:00000995                 db    0
.xdata$x:00000996                 db    0
.xdata$x:00000997                 db    0
.xdata$x:00000998                 db    0
.xdata$x:00000999                 db    0
.xdata$x:0000099A                 db    0
.xdata$x:0000099B                 db    0
.xdata$x:0000099C                 db    0
.xdata$x:0000099D                 db    0
.xdata$x:0000099E                 db    0
.xdata$x:0000099F                 db    0
.xdata$x:000009A0                 db    0
.xdata$x:000009A1                 db    0
.xdata$x:000009A2                 db    0
.xdata$x:000009A3                 db    0
.xdata$x:000009A4                 db    1
.xdata$x:000009A5                 db    0
.xdata$x:000009A6                 db    0
.xdata$x:000009A7                 db    0
.xdata$x:000009A8 __unwindtable$?CreateBra_Encoder_ARMT@@YGPAXXZ db 0FFh
.xdata$x:000009A8                                         ; DATA XREF: .xdata$x:000009B8o
.xdata$x:000009A9                 db 0FFh
.xdata$x:000009AA                 db 0FFh
.xdata$x:000009AB                 db 0FFh
.xdata$x:000009AC                 dd offset __unwindfunclet$?CreateBra_Encoder_ARMT@@YGPAXXZ$0
.xdata$x:000009B0 __ehfuncinfo$?CreateBra_Encoder_ARMT@@YGPAXXZ db  22h ; "
.xdata$x:000009B0                                         ; DATA XREF: __ehhandler$?CreateBra_Encoder_ARMT@@YGPAXXZ+11o
.xdata$x:000009B1                 db    5
.xdata$x:000009B2                 db  93h ; ô
.xdata$x:000009B3                 db  19h
.xdata$x:000009B4                 db    1
.xdata$x:000009B5                 db    0
.xdata$x:000009B6                 db    0
.xdata$x:000009B7                 db    0
.xdata$x:000009B8                 dd offset __unwindtable$?CreateBra_Encoder_ARMT@@YGPAXXZ
.xdata$x:000009BC                 db    0
.xdata$x:000009BD                 db    0
.xdata$x:000009BE                 db    0
.xdata$x:000009BF                 db    0
.xdata$x:000009C0                 db    0
.xdata$x:000009C1                 db    0
.xdata$x:000009C2                 db    0
.xdata$x:000009C3                 db    0
.xdata$x:000009C4                 db    0
.xdata$x:000009C5                 db    0
.xdata$x:000009C6                 db    0
.xdata$x:000009C7                 db    0
.xdata$x:000009C8                 db    0
.xdata$x:000009C9                 db    0
.xdata$x:000009CA                 db    0
.xdata$x:000009CB                 db    0
.xdata$x:000009CC                 db    0
.xdata$x:000009CD                 db    0
.xdata$x:000009CE                 db    0
.xdata$x:000009CF                 db    0
.xdata$x:000009D0                 db    1
.xdata$x:000009D1                 db    0
.xdata$x:000009D2                 db    0
.xdata$x:000009D3                 db    0
.xdata$x:000009D4 __unwindtable$?CreateBra_Decoder_SPARC@@YGPAXXZ db 0FFh
.xdata$x:000009D4                                         ; DATA XREF: .xdata$x:000009E4o
.xdata$x:000009D5                 db 0FFh
.xdata$x:000009D6                 db 0FFh
.xdata$x:000009D7                 db 0FFh
.xdata$x:000009D8                 dd offset __unwindfunclet$?CreateBra_Decoder_SPARC@@YGPAXXZ$0
.xdata$x:000009DC __ehfuncinfo$?CreateBra_Decoder_SPARC@@YGPAXXZ db  22h ; "
.xdata$x:000009DC                                         ; DATA XREF: __ehhandler$?CreateBra_Decoder_SPARC@@YGPAXXZ+11o
.xdata$x:000009DD                 db    5
.xdata$x:000009DE                 db  93h ; ô
.xdata$x:000009DF                 db  19h
.xdata$x:000009E0                 db    1
.xdata$x:000009E1                 db    0
.xdata$x:000009E2                 db    0
.xdata$x:000009E3                 db    0
.xdata$x:000009E4                 dd offset __unwindtable$?CreateBra_Decoder_SPARC@@YGPAXXZ
.xdata$x:000009E8                 db    0
.xdata$x:000009E9                 db    0
.xdata$x:000009EA                 db    0
.xdata$x:000009EB                 db    0
.xdata$x:000009EC                 db    0
.xdata$x:000009ED                 db    0
.xdata$x:000009EE                 db    0
.xdata$x:000009EF                 db    0
.xdata$x:000009F0                 db    0
.xdata$x:000009F1                 db    0
.xdata$x:000009F2                 db    0
.xdata$x:000009F3                 db    0
.xdata$x:000009F4                 db    0
.xdata$x:000009F5                 db    0
.xdata$x:000009F6                 db    0
.xdata$x:000009F7                 db    0
.xdata$x:000009F8                 db    0
.xdata$x:000009F9                 db    0
.xdata$x:000009FA                 db    0
.xdata$x:000009FB                 db    0
.xdata$x:000009FC                 db    1
.xdata$x:000009FD                 db    0
.xdata$x:000009FE                 db    0
.xdata$x:000009FF                 db    0
.xdata$x:00000A00 __unwindtable$?CreateBra_Encoder_SPARC@@YGPAXXZ db 0FFh
.xdata$x:00000A00                                         ; DATA XREF: .xdata$x:00000A10o
.xdata$x:00000A01                 db 0FFh
.xdata$x:00000A02                 db 0FFh
.xdata$x:00000A03                 db 0FFh
.xdata$x:00000A04                 dd offset __unwindfunclet$?CreateBra_Encoder_SPARC@@YGPAXXZ$0
.xdata$x:00000A08 __ehfuncinfo$?CreateBra_Encoder_SPARC@@YGPAXXZ db  22h ; "
.xdata$x:00000A08                                         ; DATA XREF: __ehhandler$?CreateBra_Encoder_SPARC@@YGPAXXZ+11o
.xdata$x:00000A09                 db    5
.xdata$x:00000A0A                 db  93h ; ô
.xdata$x:00000A0B                 db  19h
.xdata$x:00000A0C                 db    1
.xdata$x:00000A0D                 db    0
.xdata$x:00000A0E                 db    0
.xdata$x:00000A0F                 db    0
.xdata$x:00000A10                 dd offset __unwindtable$?CreateBra_Encoder_SPARC@@YGPAXXZ
.xdata$x:00000A14                 db    0
.xdata$x:00000A15                 db    0
.xdata$x:00000A16                 db    0
.xdata$x:00000A17                 db    0
.xdata$x:00000A18                 db    0
.xdata$x:00000A19                 db    0
.xdata$x:00000A1A                 db    0
.xdata$x:00000A1B                 db    0
.xdata$x:00000A1C                 db    0
.xdata$x:00000A1D                 db    0
.xdata$x:00000A1E                 db    0
.xdata$x:00000A1F                 db    0
.xdata$x:00000A20                 db    0
.xdata$x:00000A21                 db    0
.xdata$x:00000A22                 db    0
.xdata$x:00000A23                 db    0
.xdata$x:00000A24                 db    0
.xdata$x:00000A25                 db    0
.xdata$x:00000A26                 db    0
.xdata$x:00000A27                 db    0
.xdata$x:00000A28                 db    1
.xdata$x:00000A29                 db    0
.xdata$x:00000A2A                 db    0
.xdata$x:00000A2B                 db    0
.xdata$x:00000A2B _xdata$x        ends
.xdata$x:00000A2B
.rtc$TMZ:00000A2C ; ===========================================================================
.rtc$TMZ:00000A2C
.rtc$TMZ:00000A2C ; Segment type: Pure data
.rtc$TMZ:00000A2C ; Segment permissions: Read
.rtc$TMZ:00000A2C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000A2C                 assume cs:_rtc$TMZ
.rtc$TMZ:00000A2C                 ;org 0A2Ch
.rtc$TMZ:00000A2C ; COMDAT (pick any)
.rtc$TMZ:00000A2C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000A2C _rtc$TMZ        ends
.rtc$TMZ:00000A2C
.rtc$IMZ:00000A30 ; ===========================================================================
.rtc$IMZ:00000A30
.rtc$IMZ:00000A30 ; Segment type: Pure data
.rtc$IMZ:00000A30 ; Segment permissions: Read
.rtc$IMZ:00000A30 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000A30                 assume cs:_rtc$IMZ
.rtc$IMZ:00000A30                 ;org 0A30h
.rtc$IMZ:00000A30 ; COMDAT (pick any)
.rtc$IMZ:00000A30 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000A30 _rtc$IMZ        ends
.rtc$IMZ:00000A30
.text:00000A34 ; ===========================================================================
.text:00000A34
.text:00000A34 ; Segment type: Pure code
.text:00000A34 ; Segment permissions: Read/Execute
.text:00000A34 _text           segment para public 'CODE' use32
.text:00000A34                 assume cs:_text
.text:00000A34                 ;org 0A34h
.text:00000A34 ; COMDAT (pick any)
.text:00000A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A34
.text:00000A34 ; =============== S U B R O U T I N E =======================================
.text:00000A34
.text:00000A34 ; Attributes: bp-based frame
.text:00000A34
.text:00000A34 ; public: __thiscall CBranchCoder::CBranchCoder(unsigned int (__stdcall *)(unsigned char *, unsigned int, unsigned int, int), int)
.text:00000A34                 public ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z
.text:00000A34 ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z proc near
.text:00000A34                                         ; CODE XREF: CreateBra_Decoder_PPC(void)+5Ep
.text:00000A34                                         ; CreateBra_Encoder_PPC(void)+5Ep ...
.text:00000A34
.text:00000A34 var_4           = dword ptr -4
.text:00000A34 arg_0           = dword ptr  8
.text:00000A34 arg_4           = dword ptr  0Ch
.text:00000A34
.text:00000A34                 push    ebp
.text:00000A35                 mov     ebp, esp
.text:00000A37                 push    ecx
.text:00000A38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A3F                 mov     [ebp+var_4], ecx
.text:00000A42                 mov     ecx, [ebp+var_4] ; this
.text:00000A45                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:00000A4A                 mov     ecx, [ebp+var_4]
.text:00000A4D                 add     ecx, 4          ; this
.text:00000A50                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000A55                 mov     eax, [ebp+var_4]
.text:00000A58                 mov     dword ptr [eax], offset ??_7CBranchCoder@@6B@ ; const CBranchCoder::`vftable'
.text:00000A5E                 mov     ecx, [ebp+var_4]
.text:00000A61                 mov     dword ptr [ecx+8], 0
.text:00000A68                 mov     edx, [ebp+var_4]
.text:00000A6B                 mov     eax, [ebp+arg_4]
.text:00000A6E                 mov     [edx+0Ch], eax
.text:00000A71                 mov     ecx, [ebp+var_4]
.text:00000A74                 mov     edx, [ebp+arg_0]
.text:00000A77                 mov     [ecx+10h], edx
.text:00000A7A                 mov     eax, [ebp+var_4]
.text:00000A7D                 add     esp, 4
.text:00000A80                 cmp     ebp, esp
.text:00000A82                 call    __RTC_CheckEsp
.text:00000A87                 mov     esp, ebp
.text:00000A89                 pop     ebp
.text:00000A8A                 retn    8
.text:00000A8A ??0CBranchCoder@@QAE@P6GIPAEIIH@ZH@Z endp
.text:00000A8A
.text:00000A8A ; ---------------------------------------------------------------------------
.text:00000A8D                 align 10h
.text:00000A8D _text           ends
.text:00000A8D
.rdata:00000A90 ; ===========================================================================
.rdata:00000A90
.rdata:00000A90 ; Segment type: Pure data
.rdata:00000A90 ; Segment permissions: Read
.rdata:00000A90 _rdata          segment dword public 'DATA' use32
.rdata:00000A90                 assume cs:_rdata
.rdata:00000A90                 ;org 0A90h
.rdata:00000A90 ; COMDAT (pick largest)
.rdata:00000A90                 dd offset ??_R4CBranchCoder@@6B@ ; const CBranchCoder::`RTTI Complete Object Locator'
.rdata:00000A94                 public ??_7CBranchCoder@@6B@
.rdata:00000A94 ; const CBranchCoder::`vftable'
.rdata:00000A94 ??_7CBranchCoder@@6B@ dd offset ?QueryInterface@CBranchCoder@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000A94                                         ; DATA XREF: CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)+24o
.rdata:00000A94                                         ; CBranchCoder::QueryInterface(_GUID const &,void * *)
.rdata:00000A98                 dd offset ?AddRef@CBranchCoder@@UAGKXZ ; CBranchCoder::AddRef(void)
.rdata:00000A9C                 dd offset ?Release@CBranchCoder@@UAGKXZ ; CBranchCoder::Release(void)
.rdata:00000AA0                 dd offset ?Init@CBranchCoder@@UAGJXZ ; CBranchCoder::Init(void)
.rdata:00000AA4                 dd offset ?Filter@CBranchCoder@@UAGIPAEI@Z ; CBranchCoder::Filter(uchar *,uint)
.rdata:00000AA4 _rdata          ends
.rdata:00000AA4
.rdata$r:00000AA8 ; ===========================================================================
.rdata$r:00000AA8
.rdata$r:00000AA8 ; Segment type: Pure data
.rdata$r:00000AA8 ; Segment permissions: Read
.rdata$r:00000AA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AA8                 assume cs:_rdata$r
.rdata$r:00000AA8                 ;org 0AA8h
.rdata$r:00000AA8 ; COMDAT (pick any)
.rdata$r:00000AA8                 public ??_R4CBranchCoder@@6B@
.rdata$r:00000AA8 ; const CBranchCoder::`RTTI Complete Object Locator'
.rdata$r:00000AA8 ??_R4CBranchCoder@@6B@ db    0          ; DATA XREF: .rdata:00000A90o
.rdata$r:00000AA9                 db    0
.rdata$r:00000AAA                 db    0
.rdata$r:00000AAB                 db    0
.rdata$r:00000AAC                 db    0
.rdata$r:00000AAD                 db    0
.rdata$r:00000AAE                 db    0
.rdata$r:00000AAF                 db    0
.rdata$r:00000AB0                 db    0
.rdata$r:00000AB1                 db    0
.rdata$r:00000AB2                 db    0
.rdata$r:00000AB3                 db    0
.rdata$r:00000AB4                 dd offset ??_R0?AVCBranchCoder@@@8 ; CBranchCoder `RTTI Type Descriptor'
.rdata$r:00000AB8                 dd offset ??_R3CBranchCoder@@8 ; CBranchCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000AB8 _rdata$r        ends
.rdata$r:00000AB8
.data:00000ABC ; ===========================================================================
.data:00000ABC
.data:00000ABC ; Segment type: Pure data
.data:00000ABC ; Segment permissions: Read/Write
.data:00000ABC _data           segment dword public 'DATA' use32
.data:00000ABC                 assume cs:_data
.data:00000ABC                 ;org 0ABCh
.data:00000ABC ; COMDAT (pick any)
.data:00000ABC                 public ??_R0?AVCBranchCoder@@@8
.data:00000ABC ; class CBranchCoder `RTTI Type Descriptor'
.data:00000ABC ??_R0?AVCBranchCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000ABC                                         ; DATA XREF: .rdata$r:00000AB4o
.data:00000ABC                                         ; .rdata$r:CBranchCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000ABC                                         ; const type_info::`vftable'
.data:00000AC0                 db    0
.data:00000AC1                 db    0
.data:00000AC2                 db    0
.data:00000AC3                 db    0
.data:00000AC4                 db  2Eh ; .
.data:00000AC5                 db  3Fh ; ?
.data:00000AC6                 db  41h ; A
.data:00000AC7                 db  56h ; V
.data:00000AC8                 db  43h ; C
.data:00000AC9                 db  42h ; B
.data:00000ACA                 db  72h ; r
.data:00000ACB                 db  61h ; a
.data:00000ACC                 db  6Eh ; n
.data:00000ACD                 db  63h ; c
.data:00000ACE                 db  68h ; h
.data:00000ACF                 db  43h ; C
.data:00000AD0                 db  6Fh ; o
.data:00000AD1                 db  64h ; d
.data:00000AD2                 db  65h ; e
.data:00000AD3                 db  72h ; r
.data:00000AD4                 db  40h ; @
.data:00000AD5                 db  40h ; @
.data:00000AD6                 db    0
.data:00000AD7                 align 4
.data:00000AD7 _data           ends
.data:00000AD7
.rdata$r:00000AD8 ; ===========================================================================
.rdata$r:00000AD8
.rdata$r:00000AD8 ; Segment type: Pure data
.rdata$r:00000AD8 ; Segment permissions: Read
.rdata$r:00000AD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AD8                 assume cs:_rdata$r
.rdata$r:00000AD8                 ;org 0AD8h
.rdata$r:00000AD8 ; COMDAT (pick any)
.rdata$r:00000AD8                 public ??_R3CBranchCoder@@8
.rdata$r:00000AD8 ; CBranchCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000AD8 ??_R3CBranchCoder@@8 db    0            ; DATA XREF: .rdata$r:00000AB8o
.rdata$r:00000AD8                                         ; .rdata$r:00000B14o
.rdata$r:00000AD9                 db    0
.rdata$r:00000ADA                 db    0
.rdata$r:00000ADB                 db    0
.rdata$r:00000ADC                 db    1
.rdata$r:00000ADD                 db    0
.rdata$r:00000ADE                 db    0
.rdata$r:00000ADF                 db    0
.rdata$r:00000AE0                 db    4
.rdata$r:00000AE1                 db    0
.rdata$r:00000AE2                 db    0
.rdata$r:00000AE3                 db    0
.rdata$r:00000AE4                 dd offset ??_R2CBranchCoder@@8 ; CBranchCoder::`RTTI Base Class Array'
.rdata$r:00000AE4 _rdata$r        ends
.rdata$r:00000AE4
.rdata$r:00000AE8 ; ===========================================================================
.rdata$r:00000AE8
.rdata$r:00000AE8 ; Segment type: Pure data
.rdata$r:00000AE8 ; Segment permissions: Read
.rdata$r:00000AE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AE8                 assume cs:_rdata$r
.rdata$r:00000AE8                 ;org 0AE8h
.rdata$r:00000AE8 ; COMDAT (pick any)
.rdata$r:00000AE8                 public ??_R2CBranchCoder@@8
.rdata$r:00000AE8 ; CBranchCoder::`RTTI Base Class Array'
.rdata$r:00000AE8 ??_R2CBranchCoder@@8 dd offset ??_R1A@?0A@EA@CBranchCoder@@8
.rdata$r:00000AE8                                         ; DATA XREF: .rdata$r:00000AE4o
.rdata$r:00000AE8                                         ; CBranchCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000AEC                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000AF0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000AF4                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000AF8                 db    0
.rdata$r:00000AF9                 align 4
.rdata$r:00000AF9 _rdata$r        ends
.rdata$r:00000AF9
.rdata$r:00000AFC ; ===========================================================================
.rdata$r:00000AFC
.rdata$r:00000AFC ; Segment type: Pure data
.rdata$r:00000AFC ; Segment permissions: Read
.rdata$r:00000AFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AFC                 assume cs:_rdata$r
.rdata$r:00000AFC                 ;org 0AFCh
.rdata$r:00000AFC ; COMDAT (pick any)
.rdata$r:00000AFC                 public ??_R1A@?0A@EA@CBranchCoder@@8
.rdata$r:00000AFC ; CBranchCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000AFC ??_R1A@?0A@EA@CBranchCoder@@8 dd offset ??_R0?AVCBranchCoder@@@8
.rdata$r:00000AFC                                         ; DATA XREF: .rdata$r:CBranchCoder::`RTTI Base Class Array'o
.rdata$r:00000AFC                                         ; CBranchCoder `RTTI Type Descriptor'
.rdata$r:00000B00                 db    3
.rdata$r:00000B01                 db    0
.rdata$r:00000B02                 db    0
.rdata$r:00000B03                 db    0
.rdata$r:00000B04                 db    0
.rdata$r:00000B05                 db    0
.rdata$r:00000B06                 db    0
.rdata$r:00000B07                 db    0
.rdata$r:00000B08                 db 0FFh
.rdata$r:00000B09                 db 0FFh
.rdata$r:00000B0A                 db 0FFh
.rdata$r:00000B0B                 db 0FFh
.rdata$r:00000B0C                 db    0
.rdata$r:00000B0D                 db    0
.rdata$r:00000B0E                 db    0
.rdata$r:00000B0F                 db    0
.rdata$r:00000B10                 db  40h ; @
.rdata$r:00000B11                 db    0
.rdata$r:00000B12                 db    0
.rdata$r:00000B13                 db    0
.rdata$r:00000B14                 dd offset ??_R3CBranchCoder@@8 ; CBranchCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B14 _rdata$r        ends
.rdata$r:00000B14
.rdata$r:00000B18 ; ===========================================================================
.rdata$r:00000B18
.rdata$r:00000B18 ; Segment type: Pure data
.rdata$r:00000B18 ; Segment permissions: Read
.rdata$r:00000B18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B18                 assume cs:_rdata$r
.rdata$r:00000B18                 ;org 0B18h
.rdata$r:00000B18 ; COMDAT (pick any)
.rdata$r:00000B18                 public ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00000B18 ; ICompressFilter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000B18 ??_R1A@?0A@EA@ICompressFilter@@8 dd offset ??_R0?AUICompressFilter@@@8
.rdata$r:00000B18                                         ; DATA XREF: .rdata$r:00000AECo
.rdata$r:00000B18                                         ; .rdata$r:ICompressFilter::`RTTI Base Class Array'o
.rdata$r:00000B18                                         ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:00000B1C                 db    1
.rdata$r:00000B1D                 db    0
.rdata$r:00000B1E                 db    0
.rdata$r:00000B1F                 db    0
.rdata$r:00000B20                 db    0
.rdata$r:00000B21                 db    0
.rdata$r:00000B22                 db    0
.rdata$r:00000B23                 db    0
.rdata$r:00000B24                 db 0FFh
.rdata$r:00000B25                 db 0FFh
.rdata$r:00000B26                 db 0FFh
.rdata$r:00000B27                 db 0FFh
.rdata$r:00000B28                 db    0
.rdata$r:00000B29                 db    0
.rdata$r:00000B2A                 db    0
.rdata$r:00000B2B                 db    0
.rdata$r:00000B2C                 db  40h ; @
.rdata$r:00000B2D                 db    0
.rdata$r:00000B2E                 db    0
.rdata$r:00000B2F                 db    0
.rdata$r:00000B30                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B30 _rdata$r        ends
.rdata$r:00000B30
.data:00000B34 ; ===========================================================================
.data:00000B34
.data:00000B34 ; Segment type: Pure data
.data:00000B34 ; Segment permissions: Read/Write
.data:00000B34 _data           segment dword public 'DATA' use32
.data:00000B34                 assume cs:_data
.data:00000B34                 ;org 0B34h
.data:00000B34 ; COMDAT (pick any)
.data:00000B34                 public ??_R0?AUICompressFilter@@@8
.data:00000B34 ; struct ICompressFilter `RTTI Type Descriptor'
.data:00000B34 ??_R0?AUICompressFilter@@@8 dd offset ??_7type_info@@6B@
.data:00000B34                                         ; DATA XREF: .rdata$r:ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000B34                                         ; .rdata$r:00000D70o
.data:00000B34                                         ; const type_info::`vftable'
.data:00000B38                 db    0
.data:00000B39                 db    0
.data:00000B3A                 db    0
.data:00000B3B                 db    0
.data:00000B3C                 db  2Eh ; .
.data:00000B3D                 db  3Fh ; ?
.data:00000B3E                 db  41h ; A
.data:00000B3F                 db  55h ; U
.data:00000B40                 db  49h ; I
.data:00000B41                 db  43h ; C
.data:00000B42                 db  6Fh ; o
.data:00000B43                 db  6Dh ; m
.data:00000B44                 db  70h ; p
.data:00000B45                 db  72h ; r
.data:00000B46                 db  65h ; e
.data:00000B47                 db  73h ; s
.data:00000B48                 db  73h ; s
.data:00000B49                 db  46h ; F
.data:00000B4A                 db  69h ; i
.data:00000B4B                 db  6Ch ; l
.data:00000B4C                 db  74h ; t
.data:00000B4D                 db  65h ; e
.data:00000B4E                 db  72h ; r
.data:00000B4F                 db  40h ; @
.data:00000B50                 db  40h ; @
.data:00000B51                 db    0
.data:00000B52                 align 4
.data:00000B52 _data           ends
.data:00000B52
.rdata$r:00000B54 ; ===========================================================================
.rdata$r:00000B54
.rdata$r:00000B54 ; Segment type: Pure data
.rdata$r:00000B54 ; Segment permissions: Read
.rdata$r:00000B54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B54                 assume cs:_rdata$r
.rdata$r:00000B54                 ;org 0B54h
.rdata$r:00000B54 ; COMDAT (pick any)
.rdata$r:00000B54                 public ??_R3ICompressFilter@@8
.rdata$r:00000B54 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B54 ??_R3ICompressFilter@@8 db    0         ; DATA XREF: .rdata$r:00000B30o
.rdata$r:00000B54                                         ; .rdata$r:00000D74o
.rdata$r:00000B55                 db    0
.rdata$r:00000B56                 db    0
.rdata$r:00000B57                 db    0
.rdata$r:00000B58                 db    0
.rdata$r:00000B59                 db    0
.rdata$r:00000B5A                 db    0
.rdata$r:00000B5B                 db    0
.rdata$r:00000B5C                 db    2
.rdata$r:00000B5D                 db    0
.rdata$r:00000B5E                 db    0
.rdata$r:00000B5F                 db    0
.rdata$r:00000B60                 dd offset ??_R2ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:00000B60 _rdata$r        ends
.rdata$r:00000B60
.rdata$r:00000B64 ; ===========================================================================
.rdata$r:00000B64
.rdata$r:00000B64 ; Segment type: Pure data
.rdata$r:00000B64 ; Segment permissions: Read
.rdata$r:00000B64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B64                 assume cs:_rdata$r
.rdata$r:00000B64                 ;org 0B64h
.rdata$r:00000B64 ; COMDAT (pick any)
.rdata$r:00000B64                 public ??_R2ICompressFilter@@8
.rdata$r:00000B64 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:00000B64 ??_R2ICompressFilter@@8 dd offset ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00000B64                                         ; DATA XREF: .rdata$r:00000B60o
.rdata$r:00000B64                                         ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000B68                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000B6C                 db    0
.rdata$r:00000B6D                 align 10h
.rdata$r:00000B6D _rdata$r        ends
.rdata$r:00000B6D
.rdata$r:00000B70 ; ===========================================================================
.rdata$r:00000B70
.rdata$r:00000B70 ; Segment type: Pure data
.rdata$r:00000B70 ; Segment permissions: Read
.rdata$r:00000B70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B70                 assume cs:_rdata$r
.rdata$r:00000B70                 ;org 0B70h
.rdata$r:00000B70 ; COMDAT (pick any)
.rdata$r:00000B70                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000B70 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000B70 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000B70                                         ; DATA XREF: .rdata$r:00000AF0o
.rdata$r:00000B70                                         ; .rdata$r:00000B68o ...
.rdata$r:00000B70                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000B74                 db    0
.rdata$r:00000B75                 db    0
.rdata$r:00000B76                 db    0
.rdata$r:00000B77                 db    0
.rdata$r:00000B78                 db    0
.rdata$r:00000B79                 db    0
.rdata$r:00000B7A                 db    0
.rdata$r:00000B7B                 db    0
.rdata$r:00000B7C                 db 0FFh
.rdata$r:00000B7D                 db 0FFh
.rdata$r:00000B7E                 db 0FFh
.rdata$r:00000B7F                 db 0FFh
.rdata$r:00000B80                 db    0
.rdata$r:00000B81                 db    0
.rdata$r:00000B82                 db    0
.rdata$r:00000B83                 db    0
.rdata$r:00000B84                 db  40h ; @
.rdata$r:00000B85                 db    0
.rdata$r:00000B86                 db    0
.rdata$r:00000B87                 db    0
.rdata$r:00000B88                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B88 _rdata$r        ends
.rdata$r:00000B88
.data:00000B8C ; ===========================================================================
.data:00000B8C
.data:00000B8C ; Segment type: Pure data
.data:00000B8C ; Segment permissions: Read/Write
.data:00000B8C _data           segment dword public 'DATA' use32
.data:00000B8C                 assume cs:_data
.data:00000B8C                 ;org 0B8Ch
.data:00000B8C ; COMDAT (pick any)
.data:00000B8C                 public ??_R0?AUIUnknown@@@8
.data:00000B8C ; struct IUnknown `RTTI Type Descriptor'
.data:00000B8C ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000B8C                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000B8C                                         ; const type_info::`vftable'
.data:00000B90                 db    0
.data:00000B91                 db    0
.data:00000B92                 db    0
.data:00000B93                 db    0
.data:00000B94                 db  2Eh ; .
.data:00000B95                 db  3Fh ; ?
.data:00000B96                 db  41h ; A
.data:00000B97                 db  55h ; U
.data:00000B98                 db  49h ; I
.data:00000B99                 db  55h ; U
.data:00000B9A                 db  6Eh ; n
.data:00000B9B                 db  6Bh ; k
.data:00000B9C                 db  6Eh ; n
.data:00000B9D                 db  6Fh ; o
.data:00000B9E                 db  77h ; w
.data:00000B9F                 db  6Eh ; n
.data:00000BA0                 db  40h ; @
.data:00000BA1                 db  40h ; @
.data:00000BA2                 db    0
.data:00000BA3                 align 4
.data:00000BA3 _data           ends
.data:00000BA3
.rdata$r:00000BA4 ; ===========================================================================
.rdata$r:00000BA4
.rdata$r:00000BA4 ; Segment type: Pure data
.rdata$r:00000BA4 ; Segment permissions: Read
.rdata$r:00000BA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BA4                 assume cs:_rdata$r
.rdata$r:00000BA4                 ;org 0BA4h
.rdata$r:00000BA4 ; COMDAT (pick any)
.rdata$r:00000BA4                 public ??_R3IUnknown@@8
.rdata$r:00000BA4 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000BA4 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000B88o
.rdata$r:00000BA5                 db    0
.rdata$r:00000BA6                 db    0
.rdata$r:00000BA7                 db    0
.rdata$r:00000BA8                 db    0
.rdata$r:00000BA9                 db    0
.rdata$r:00000BAA                 db    0
.rdata$r:00000BAB                 db    0
.rdata$r:00000BAC                 db    1
.rdata$r:00000BAD                 db    0
.rdata$r:00000BAE                 db    0
.rdata$r:00000BAF                 db    0
.rdata$r:00000BB0                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000BB0 _rdata$r        ends
.rdata$r:00000BB0
.rdata$r:00000BB4 ; ===========================================================================
.rdata$r:00000BB4
.rdata$r:00000BB4 ; Segment type: Pure data
.rdata$r:00000BB4 ; Segment permissions: Read
.rdata$r:00000BB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BB4                 assume cs:_rdata$r
.rdata$r:00000BB4                 ;org 0BB4h
.rdata$r:00000BB4 ; COMDAT (pick any)
.rdata$r:00000BB4                 public ??_R2IUnknown@@8
.rdata$r:00000BB4 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000BB4 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000BB4                                         ; DATA XREF: .rdata$r:00000BB0o
.rdata$r:00000BB4                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000BB8                 db    0
.rdata$r:00000BB9                 align 4
.rdata$r:00000BB9 _rdata$r        ends
.rdata$r:00000BB9
.rdata$r:00000BBC ; ===========================================================================
.rdata$r:00000BBC
.rdata$r:00000BBC ; Segment type: Pure data
.rdata$r:00000BBC ; Segment permissions: Read
.rdata$r:00000BBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BBC                 assume cs:_rdata$r
.rdata$r:00000BBC                 ;org 0BBCh
.rdata$r:00000BBC ; COMDAT (pick any)
.rdata$r:00000BBC                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00000BBC ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000BBC ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000BBC                                         ; DATA XREF: .rdata$r:00000AF4o
.rdata$r:00000BBC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000BC0                 db    0
.rdata$r:00000BC1                 db    0
.rdata$r:00000BC2                 db    0
.rdata$r:00000BC3                 db    0
.rdata$r:00000BC4                 db    4
.rdata$r:00000BC5                 db    0
.rdata$r:00000BC6                 db    0
.rdata$r:00000BC7                 db    0
.rdata$r:00000BC8                 db 0FFh
.rdata$r:00000BC9                 db 0FFh
.rdata$r:00000BCA                 db 0FFh
.rdata$r:00000BCB                 db 0FFh
.rdata$r:00000BCC                 db    0
.rdata$r:00000BCD                 db    0
.rdata$r:00000BCE                 db    0
.rdata$r:00000BCF                 db    0
.rdata$r:00000BD0                 db  40h ; @
.rdata$r:00000BD1                 db    0
.rdata$r:00000BD2                 db    0
.rdata$r:00000BD3                 db    0
.rdata$r:00000BD4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000BD4 _rdata$r        ends
.rdata$r:00000BD4
.data:00000BD8 ; ===========================================================================
.data:00000BD8
.data:00000BD8 ; Segment type: Pure data
.data:00000BD8 ; Segment permissions: Read/Write
.data:00000BD8 _data           segment dword public 'DATA' use32
.data:00000BD8                 assume cs:_data
.data:00000BD8                 ;org 0BD8h
.data:00000BD8 ; COMDAT (pick any)
.data:00000BD8                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000BD8 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000BD8 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000BD8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000BD8                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000BD8                                         ; const type_info::`vftable'
.data:00000BDC                 align 10h
.data:00000BE0 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00000BE0 _data           ends
.data:00000BE0
.rdata$r:00000BF4 ; ===========================================================================
.rdata$r:00000BF4
.rdata$r:00000BF4 ; Segment type: Pure data
.rdata$r:00000BF4 ; Segment permissions: Read
.rdata$r:00000BF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BF4                 assume cs:_rdata$r
.rdata$r:00000BF4                 ;org 0BF4h
.rdata$r:00000BF4 ; COMDAT (pick any)
.rdata$r:00000BF4                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000BF4 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000BF4 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000BD4o
.rdata$r:00000BF4                                         ; .rdata$r:00000C24o
.rdata$r:00000BF5                 db    0
.rdata$r:00000BF6                 db    0
.rdata$r:00000BF7                 db    0
.rdata$r:00000BF8                 db    0
.rdata$r:00000BF9                 db    0
.rdata$r:00000BFA                 db    0
.rdata$r:00000BFB                 db    0
.rdata$r:00000BFC                 db    1
.rdata$r:00000BFD                 db    0
.rdata$r:00000BFE                 db    0
.rdata$r:00000BFF                 db    0
.rdata$r:00000C00                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000C00 _rdata$r        ends
.rdata$r:00000C00
.rdata$r:00000C04 ; ===========================================================================
.rdata$r:00000C04
.rdata$r:00000C04 ; Segment type: Pure data
.rdata$r:00000C04 ; Segment permissions: Read
.rdata$r:00000C04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C04                 assume cs:_rdata$r
.rdata$r:00000C04                 ;org 0C04h
.rdata$r:00000C04 ; COMDAT (pick any)
.rdata$r:00000C04                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000C04 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000C04 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000C04                                         ; DATA XREF: .rdata$r:00000C00o
.rdata$r:00000C04                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000C08                 db    0
.rdata$r:00000C09                 align 4
.rdata$r:00000C09 _rdata$r        ends
.rdata$r:00000C09
.rdata$r:00000C0C ; ===========================================================================
.rdata$r:00000C0C
.rdata$r:00000C0C ; Segment type: Pure data
.rdata$r:00000C0C ; Segment permissions: Read
.rdata$r:00000C0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C0C                 assume cs:_rdata$r
.rdata$r:00000C0C                 ;org 0C0Ch
.rdata$r:00000C0C ; COMDAT (pick any)
.rdata$r:00000C0C                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000C0C ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000C0C ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000C0C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000C0C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000C10                 db    0
.rdata$r:00000C11                 db    0
.rdata$r:00000C12                 db    0
.rdata$r:00000C13                 db    0
.rdata$r:00000C14                 db    0
.rdata$r:00000C15                 db    0
.rdata$r:00000C16                 db    0
.rdata$r:00000C17                 db    0
.rdata$r:00000C18                 db 0FFh
.rdata$r:00000C19                 db 0FFh
.rdata$r:00000C1A                 db 0FFh
.rdata$r:00000C1B                 db 0FFh
.rdata$r:00000C1C                 db    0
.rdata$r:00000C1D                 db    0
.rdata$r:00000C1E                 db    0
.rdata$r:00000C1F                 db    0
.rdata$r:00000C20                 db  40h ; @
.rdata$r:00000C21                 db    0
.rdata$r:00000C22                 db    0
.rdata$r:00000C23                 db    0
.rdata$r:00000C24                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C24 _rdata$r        ends
.rdata$r:00000C24
.text:00000C28 ; ===========================================================================
.text:00000C28
.text:00000C28 ; Segment type: Pure code
.text:00000C28 ; Segment permissions: Read/Execute
.text:00000C28 _text           segment para public 'CODE' use32
.text:00000C28                 assume cs:_text
.text:00000C28                 ;org 0C28h
.text:00000C28 ; COMDAT (pick any)
.text:00000C28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C28
.text:00000C28 ; =============== S U B R O U T I N E =======================================
.text:00000C28
.text:00000C28 ; Attributes: bp-based frame
.text:00000C28
.text:00000C28 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000C28                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000C28 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)+1Cp
.text:00000C28
.text:00000C28 var_4           = dword ptr -4
.text:00000C28
.text:00000C28                 push    ebp
.text:00000C29                 mov     ebp, esp
.text:00000C2B                 push    ecx
.text:00000C2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C33                 mov     [ebp+var_4], ecx
.text:00000C36                 mov     eax, [ebp+var_4]
.text:00000C39                 mov     dword ptr [eax], 0
.text:00000C3F                 mov     eax, [ebp+var_4]
.text:00000C42                 mov     esp, ebp
.text:00000C44                 pop     ebp
.text:00000C45                 retn
.text:00000C45 ??0CMyUnknownImp@@QAE@XZ endp
.text:00000C45
.text:00000C45 ; ---------------------------------------------------------------------------
.text:00000C46                 align 4
.text:00000C46 _text           ends
.text:00000C46
.text:00000C48 ; ===========================================================================
.text:00000C48
.text:00000C48 ; Segment type: Pure code
.text:00000C48 ; Segment permissions: Read/Execute
.text:00000C48 _text           segment para public 'CODE' use32
.text:00000C48                 assume cs:_text
.text:00000C48                 ;org 0C48h
.text:00000C48 ; COMDAT (pick any)
.text:00000C48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C48
.text:00000C48 ; =============== S U B R O U T I N E =======================================
.text:00000C48
.text:00000C48 ; Attributes: bp-based frame
.text:00000C48
.text:00000C48 ; __int32 __stdcall CBranchCoder::QueryInterface(CBranchCoder *this, const struct _GUID *Buf1, void **)
.text:00000C48                 public ?QueryInterface@CBranchCoder@@UAGJABU_GUID@@PAPAX@Z
.text:00000C48 ?QueryInterface@CBranchCoder@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000C48                                         ; DATA XREF: .rdata:const CBranchCoder::`vftable'o
.text:00000C48
.text:00000C48 this            = dword ptr  8
.text:00000C48 Buf1            = dword ptr  0Ch
.text:00000C48 arg_8           = dword ptr  10h
.text:00000C48
.text:00000C48                 push    ebp
.text:00000C49                 mov     ebp, esp
.text:00000C4B                 mov     eax, [ebp+arg_8]
.text:00000C4E                 mov     dword ptr [eax], 0
.text:00000C54                 push    offset _IID_IUnknown ; Buf2
.text:00000C59                 mov     ecx, [ebp+Buf1]
.text:00000C5C                 push    ecx             ; Buf1
.text:00000C5D                 call    ___@8           ; __(x,x)
.text:00000C62                 test    eax, eax
.text:00000C64                 jz      short loc_C70
.text:00000C66                 mov     edx, [ebp+arg_8]
.text:00000C69                 mov     eax, [ebp+this]
.text:00000C6C                 mov     [edx], eax
.text:00000C6E                 jmp     short loc_C77
.text:00000C70 ; ---------------------------------------------------------------------------
.text:00000C70
.text:00000C70 loc_C70:                                ; CODE XREF: CBranchCoder::QueryInterface(_GUID const &,void * *)+1Cj
.text:00000C70                 mov     eax, 80004002h
.text:00000C75                 jmp     short loc_C88
.text:00000C77 ; ---------------------------------------------------------------------------
.text:00000C77
.text:00000C77 loc_C77:                                ; CODE XREF: CBranchCoder::QueryInterface(_GUID const &,void * *)+26j
.text:00000C77                 mov     ecx, [ebp+this]
.text:00000C7A                 mov     edx, [ecx+4]
.text:00000C7D                 add     edx, 1
.text:00000C80                 mov     eax, [ebp+this]
.text:00000C83                 mov     [eax+4], edx
.text:00000C86                 xor     eax, eax
.text:00000C88
.text:00000C88 loc_C88:                                ; CODE XREF: CBranchCoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00000C88                 cmp     ebp, esp
.text:00000C8A                 call    __RTC_CheckEsp
.text:00000C8F                 pop     ebp
.text:00000C90                 retn    0Ch
.text:00000C90 ?QueryInterface@CBranchCoder@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000C90
.text:00000C90 ; ---------------------------------------------------------------------------
.text:00000C93                 align 4
.text:00000C93 _text           ends
.text:00000C93
.text:00000C94 ; ===========================================================================
.text:00000C94
.text:00000C94 ; Segment type: Pure code
.text:00000C94 ; Segment permissions: Read/Execute
.text:00000C94 _text           segment para public 'CODE' use32
.text:00000C94                 assume cs:_text
.text:00000C94                 ;org 0C94h
.text:00000C94 ; COMDAT (pick any)
.text:00000C94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C94
.text:00000C94 ; =============== S U B R O U T I N E =======================================
.text:00000C94
.text:00000C94 ; Attributes: bp-based frame
.text:00000C94
.text:00000C94 ; unsigned __int32 __stdcall CBranchCoder::AddRef(CBranchCoder *this)
.text:00000C94                 public ?AddRef@CBranchCoder@@UAGKXZ
.text:00000C94 ?AddRef@CBranchCoder@@UAGKXZ proc near  ; DATA XREF: .rdata:00000A98o
.text:00000C94
.text:00000C94 var_4           = dword ptr -4
.text:00000C94 this            = dword ptr  8
.text:00000C94
.text:00000C94                 push    ebp
.text:00000C95                 mov     ebp, esp
.text:00000C97                 push    ecx
.text:00000C98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C9F                 mov     eax, [ebp+this]
.text:00000CA2                 mov     ecx, [eax+4]
.text:00000CA5                 add     ecx, 1
.text:00000CA8                 mov     [ebp+var_4], ecx
.text:00000CAB                 mov     edx, [ebp+this]
.text:00000CAE                 mov     eax, [ebp+var_4]
.text:00000CB1                 mov     [edx+4], eax
.text:00000CB4                 mov     eax, [ebp+var_4]
.text:00000CB7                 mov     esp, ebp
.text:00000CB9                 pop     ebp
.text:00000CBA                 retn    4
.text:00000CBA ?AddRef@CBranchCoder@@UAGKXZ endp
.text:00000CBA
.text:00000CBA ; ---------------------------------------------------------------------------
.text:00000CBD                 align 10h
.text:00000CBD _text           ends
.text:00000CBD
.text:00000CC0 ; ===========================================================================
.text:00000CC0
.text:00000CC0 ; Segment type: Pure code
.text:00000CC0 ; Segment permissions: Read/Execute
.text:00000CC0 _text           segment para public 'CODE' use32
.text:00000CC0                 assume cs:_text
.text:00000CC0                 ;org 0CC0h
.text:00000CC0 ; COMDAT (pick any)
.text:00000CC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CC0
.text:00000CC0 ; =============== S U B R O U T I N E =======================================
.text:00000CC0
.text:00000CC0 ; Attributes: bp-based frame
.text:00000CC0
.text:00000CC0 ; unsigned __int32 __stdcall CBranchCoder::Release(CBranchCoder *this)
.text:00000CC0                 public ?Release@CBranchCoder@@UAGKXZ
.text:00000CC0 ?Release@CBranchCoder@@UAGKXZ proc near ; DATA XREF: .rdata:00000A9Co
.text:00000CC0
.text:00000CC0 var_8           = dword ptr -8
.text:00000CC0 var_4           = dword ptr -4
.text:00000CC0 this            = dword ptr  8
.text:00000CC0
.text:00000CC0                 push    ebp
.text:00000CC1                 mov     ebp, esp
.text:00000CC3                 sub     esp, 8
.text:00000CC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000CCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CD4                 mov     eax, [ebp+this]
.text:00000CD7                 mov     ecx, [eax+4]
.text:00000CDA                 sub     ecx, 1
.text:00000CDD                 mov     [ebp+var_8], ecx
.text:00000CE0                 mov     edx, [ebp+this]
.text:00000CE3                 mov     eax, [ebp+var_8]
.text:00000CE6                 mov     [edx+4], eax
.text:00000CE9                 cmp     [ebp+var_8], 0
.text:00000CED                 jz      short loc_CF7
.text:00000CEF                 mov     ecx, [ebp+this]
.text:00000CF2                 mov     eax, [ecx+4]
.text:00000CF5                 jmp     short loc_D0B
.text:00000CF7 ; ---------------------------------------------------------------------------
.text:00000CF7
.text:00000CF7 loc_CF7:                                ; CODE XREF: CBranchCoder::Release(void)+2Dj
.text:00000CF7                 mov     edx, [ebp+this]
.text:00000CFA                 mov     [ebp+var_4], edx
.text:00000CFD                 mov     eax, [ebp+var_4]
.text:00000D00                 push    eax             ; void *
.text:00000D01                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000D06                 add     esp, 4
.text:00000D09                 xor     eax, eax
.text:00000D0B
.text:00000D0B loc_D0B:                                ; CODE XREF: CBranchCoder::Release(void)+35j
.text:00000D0B                 add     esp, 8
.text:00000D0E                 cmp     ebp, esp
.text:00000D10                 call    __RTC_CheckEsp
.text:00000D15                 mov     esp, ebp
.text:00000D17                 pop     ebp
.text:00000D18                 retn    4
.text:00000D18 ?Release@CBranchCoder@@UAGKXZ endp
.text:00000D18
.text:00000D18 ; ---------------------------------------------------------------------------
.text:00000D1B                 align 4
.text:00000D1B _text           ends
.text:00000D1B
.text:00000D1C ; ===========================================================================
.text:00000D1C
.text:00000D1C ; Segment type: Pure code
.text:00000D1C ; Segment permissions: Read/Execute
.text:00000D1C _text           segment para public 'CODE' use32
.text:00000D1C                 assume cs:_text
.text:00000D1C                 ;org 0D1Ch
.text:00000D1C ; COMDAT (pick any)
.text:00000D1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D1C
.text:00000D1C ; =============== S U B R O U T I N E =======================================
.text:00000D1C
.text:00000D1C ; Attributes: bp-based frame
.text:00000D1C
.text:00000D1C ; _DWORD __thiscall ICompressFilter::ICompressFilter(ICompressFilter *__hidden this)
.text:00000D1C                 public ??0ICompressFilter@@QAE@XZ
.text:00000D1C ??0ICompressFilter@@QAE@XZ proc near    ; CODE XREF: CBranchCoder::CBranchCoder(uint (*)(uchar *,uint,uint,int),int)+11p
.text:00000D1C
.text:00000D1C var_4           = dword ptr -4
.text:00000D1C
.text:00000D1C                 push    ebp
.text:00000D1D                 mov     ebp, esp
.text:00000D1F                 push    ecx
.text:00000D20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D27                 mov     [ebp+var_4], ecx
.text:00000D2A                 mov     ecx, [ebp+var_4]
.text:00000D2D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000D32                 mov     eax, [ebp+var_4]
.text:00000D35                 mov     dword ptr [eax], offset ??_7ICompressFilter@@6B@ ; const ICompressFilter::`vftable'
.text:00000D3B                 mov     eax, [ebp+var_4]
.text:00000D3E                 add     esp, 4
.text:00000D41                 cmp     ebp, esp
.text:00000D43                 call    __RTC_CheckEsp
.text:00000D48                 mov     esp, ebp
.text:00000D4A                 pop     ebp
.text:00000D4B                 retn
.text:00000D4B ??0ICompressFilter@@QAE@XZ endp
.text:00000D4B
.text:00000D4B _text           ends
.text:00000D4B
.rdata:00000D4C ; ===========================================================================
.rdata:00000D4C
.rdata:00000D4C ; Segment type: Pure data
.rdata:00000D4C ; Segment permissions: Read
.rdata:00000D4C _rdata          segment dword public 'DATA' use32
.rdata:00000D4C                 assume cs:_rdata
.rdata:00000D4C                 ;org 0D4Ch
.rdata:00000D4C ; COMDAT (pick largest)
.rdata:00000D4C                 dd offset ??_R4ICompressFilter@@6B@ ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata:00000D50                 public ??_7ICompressFilter@@6B@
.rdata:00000D50 ; const ICompressFilter::`vftable'
.rdata:00000D50 ??_7ICompressFilter@@6B@ dd offset __purecall
.rdata:00000D50                                         ; DATA XREF: ICompressFilter::ICompressFilter(void)+19o
.rdata:00000D54                 dd offset __purecall
.rdata:00000D58                 dd offset __purecall
.rdata:00000D5C                 dd offset __purecall
.rdata:00000D60                 dd offset __purecall
.rdata:00000D60 _rdata          ends
.rdata:00000D60
.rdata$r:00000D64 ; ===========================================================================
.rdata$r:00000D64
.rdata$r:00000D64 ; Segment type: Pure data
.rdata$r:00000D64 ; Segment permissions: Read
.rdata$r:00000D64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D64                 assume cs:_rdata$r
.rdata$r:00000D64                 ;org 0D64h
.rdata$r:00000D64 ; COMDAT (pick any)
.rdata$r:00000D64                 public ??_R4ICompressFilter@@6B@
.rdata$r:00000D64 ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata$r:00000D64 ??_R4ICompressFilter@@6B@ db    0       ; DATA XREF: .rdata:00000D4Co
.rdata$r:00000D65                 db    0
.rdata$r:00000D66                 db    0
.rdata$r:00000D67                 db    0
.rdata$r:00000D68                 db    0
.rdata$r:00000D69                 db    0
.rdata$r:00000D6A                 db    0
.rdata$r:00000D6B                 db    0
.rdata$r:00000D6C                 db    0
.rdata$r:00000D6D                 db    0
.rdata$r:00000D6E                 db    0
.rdata$r:00000D6F                 db    0
.rdata$r:00000D70                 dd offset ??_R0?AUICompressFilter@@@8 ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:00000D74                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000D74 _rdata$r        ends
.rdata$r:00000D74
.text:00000D78 ; ===========================================================================
.text:00000D78
.text:00000D78 ; Segment type: Pure code
.text:00000D78 ; Segment permissions: Read/Execute
.text:00000D78 _text           segment para public 'CODE' use32
.text:00000D78                 assume cs:_text
.text:00000D78                 ;org 0D78h
.text:00000D78 ; COMDAT (pick any)
.text:00000D78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D78
.text:00000D78 ; =============== S U B R O U T I N E =======================================
.text:00000D78
.text:00000D78 ; Attributes: bp-based frame
.text:00000D78
.text:00000D78 ; public: __thiscall IUnknown::IUnknown(void)
.text:00000D78                 public ??0IUnknown@@QAE@XZ
.text:00000D78 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressFilter::ICompressFilter(void)+11p
.text:00000D78
.text:00000D78 var_4           = dword ptr -4
.text:00000D78
.text:00000D78                 push    ebp
.text:00000D79                 mov     ebp, esp
.text:00000D7B                 push    ecx
.text:00000D7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D83                 mov     [ebp+var_4], ecx
.text:00000D86                 mov     eax, [ebp+var_4]
.text:00000D89                 mov     esp, ebp
.text:00000D8B                 pop     ebp
.text:00000D8C                 retn
.text:00000D8C ??0IUnknown@@QAE@XZ endp
.text:00000D8C
.text:00000D8C ; ---------------------------------------------------------------------------
.text:00000D8D                 align 10h
.text:00000D8D _text           ends
.text:00000D8D
.text:00000D90 ; ===========================================================================
.text:00000D90
.text:00000D90 ; Segment type: Pure code
.text:00000D90 ; Segment permissions: Read/Execute
.text:00000D90 _text           segment para public 'CODE' use32
.text:00000D90                 assume cs:_text
.text:00000D90                 ;org 0D90h
.text:00000D90 ; COMDAT (pick any)
.text:00000D90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D90
.text:00000D90 ; =============== S U B R O U T I N E =======================================
.text:00000D90
.text:00000D90 ; Attributes: bp-based frame
.text:00000D90
.text:00000D90 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000D90                 public ___@8
.text:00000D90 ___@8           proc near               ; CODE XREF: CBranchCoder::QueryInterface(_GUID const &,void * *)+15p
.text:00000D90
.text:00000D90 Buf1            = dword ptr  8
.text:00000D90 Buf2            = dword ptr  0Ch
.text:00000D90
.text:00000D90                 push    ebp
.text:00000D91                 mov     ebp, esp
.text:00000D93                 mov     eax, [ebp+Buf2]
.text:00000D96                 push    eax             ; Buf2
.text:00000D97                 mov     ecx, [ebp+Buf1]
.text:00000D9A                 push    ecx             ; Buf1
.text:00000D9B                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000DA0                 cmp     ebp, esp
.text:00000DA2                 call    __RTC_CheckEsp
.text:00000DA7                 pop     ebp
.text:00000DA8                 retn    8
.text:00000DA8 ___@8           endp
.text:00000DA8
.text:00000DA8 ; ---------------------------------------------------------------------------
.text:00000DAB                 align 4
.text:00000DAB _text           ends
.text:00000DAB
.text:00000DAC ; ===========================================================================
.text:00000DAC
.text:00000DAC ; Segment type: Pure code
.text:00000DAC ; Segment permissions: Read/Execute
.text:00000DAC _text           segment para public 'CODE' use32
.text:00000DAC                 assume cs:_text
.text:00000DAC                 ;org 0DACh
.text:00000DAC ; COMDAT (pick any)
.text:00000DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000DAC
.text:00000DAC ; =============== S U B R O U T I N E =======================================
.text:00000DAC
.text:00000DAC ; Attributes: bp-based frame
.text:00000DAC
.text:00000DAC ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000DAC                 public _IsEqualGUID@8
.text:00000DAC _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000DAC
.text:00000DAC Buf1            = dword ptr  8
.text:00000DAC Buf2            = dword ptr  0Ch
.text:00000DAC
.text:00000DAC                 push    ebp
.text:00000DAD                 mov     ebp, esp
.text:00000DAF                 push    10h             ; Size
.text:00000DB1                 mov     eax, [ebp+Buf2]
.text:00000DB4                 push    eax             ; Buf2
.text:00000DB5                 mov     ecx, [ebp+Buf1]
.text:00000DB8                 push    ecx             ; Buf1
.text:00000DB9                 call    _memcmp
.text:00000DBE                 add     esp, 0Ch
.text:00000DC1                 neg     eax
.text:00000DC3                 sbb     eax, eax
.text:00000DC5                 add     eax, 1
.text:00000DC8                 cmp     ebp, esp
.text:00000DCA                 call    __RTC_CheckEsp
.text:00000DCF                 pop     ebp
.text:00000DD0                 retn    8
.text:00000DD0 _IsEqualGUID@8  endp
.text:00000DD0
.text:00000DD0 ; ---------------------------------------------------------------------------
.text:00000DD3                 align 4
.text:00000DD3 _text           ends
.text:00000DD3
.text$yc:00000DD4 ; ===========================================================================
.text$yc:00000DD4
.text$yc:00000DD4 ; Segment type: Pure code
.text$yc:00000DD4 ; Segment permissions: Read/Execute
.text$yc:00000DD4 _text$yc        segment para public 'CODE' use32
.text$yc:00000DD4                 assume cs:_text$yc
.text$yc:00000DD4                 ;org 0DD4h
.text$yc:00000DD4 ; COMDAT (pick any)
.text$yc:00000DD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00000DD4
.text$yc:00000DD4 ; =============== S U B R O U T I N E =======================================
.text$yc:00000DD4
.text$yc:00000DD4 ; Attributes: bp-based frame
.text$yc:00000DD4
.text$yc:00000DD4 ; void __cdecl `dynamic initializer for 'g_RegisterCodecs''(void)
.text$yc:00000DD4 ??__Eg_RegisterCodecs@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:_g_RegisterCodecs$initializer$o
.text$yc:00000DD4                 push    ebp
.text$yc:00000DD5                 mov     ebp, esp
.text$yc:00000DD7                 mov     ecx, offset _g_RegisterCodecs ; this
.text$yc:00000DDC                 call    ??0CRegisterCodecsBranch@@QAE@XZ ; CRegisterCodecsBranch::CRegisterCodecsBranch(void)
.text$yc:00000DE1                 cmp     ebp, esp
.text$yc:00000DE3                 call    __RTC_CheckEsp
.text$yc:00000DE8                 pop     ebp
.text$yc:00000DE9                 retn
.text$yc:00000DE9 ??__Eg_RegisterCodecs@@YAXXZ endp
.text$yc:00000DE9
.text$yc:00000DE9 ; ---------------------------------------------------------------------------
.text$yc:00000DEA                 align 4
.text$yc:00000DEA _text$yc        ends
.text$yc:00000DEA
.text:00000DEC ; ===========================================================================
.text:00000DEC
.text:00000DEC ; Segment type: Pure code
.text:00000DEC ; Segment permissions: Read/Execute
.text:00000DEC _text           segment para public 'CODE' use32
.text:00000DEC                 assume cs:_text
.text:00000DEC                 ;org 0DECh
.text:00000DEC ; COMDAT (pick any)
.text:00000DEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000DEC
.text:00000DEC ; =============== S U B R O U T I N E =======================================
.text:00000DEC
.text:00000DEC ; Attributes: bp-based frame
.text:00000DEC
.text:00000DEC ; _DWORD __thiscall CRegisterCodecsBranch::CRegisterCodecsBranch(CRegisterCodecsBranch *__hidden this)
.text:00000DEC                 public ??0CRegisterCodecsBranch@@QAE@XZ
.text:00000DEC ??0CRegisterCodecsBranch@@QAE@XZ proc near
.text:00000DEC                                         ; CODE XREF: `dynamic initializer for 'g_RegisterCodecs''(void)+8p
.text:00000DEC
.text:00000DEC var_8           = dword ptr -8
.text:00000DEC var_4           = dword ptr -4
.text:00000DEC
.text:00000DEC                 push    ebp
.text:00000DED                 mov     ebp, esp
.text:00000DEF                 sub     esp, 8
.text:00000DF2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000DF9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E00                 mov     [ebp+var_4], ecx
.text:00000E03                 mov     [ebp+var_8], 0
.text:00000E0A                 jmp     short loc_E15
.text:00000E0C ; ---------------------------------------------------------------------------
.text:00000E0C
.text:00000E0C loc_E0C:                                ; CODE XREF: CRegisterCodecsBranch::CRegisterCodecsBranch(void)+41j
.text:00000E0C                 mov     eax, [ebp+var_8]
.text:00000E0F                 add     eax, 1
.text:00000E12                 mov     [ebp+var_8], eax
.text:00000E15
.text:00000E15 loc_E15:                                ; CODE XREF: CRegisterCodecsBranch::CRegisterCodecsBranch(void)+1Ej
.text:00000E15                 cmp     [ebp+var_8], 5
.text:00000E19                 jnb     short loc_E2F
.text:00000E1B                 mov     ecx, [ebp+var_8]
.text:00000E1E                 shl     ecx, 5
.text:00000E21                 add     ecx, offset _g_CodecsInfo
.text:00000E27                 push    ecx             ; struct CCodecInfo *
.text:00000E28                 call    ?RegisterCodec@@YGXPBUCCodecInfo@@@Z ; RegisterCodec(CCodecInfo const *)
.text:00000E2D                 jmp     short loc_E0C
.text:00000E2F ; ---------------------------------------------------------------------------
.text:00000E2F
.text:00000E2F loc_E2F:                                ; CODE XREF: CRegisterCodecsBranch::CRegisterCodecsBranch(void)+2Dj
.text:00000E2F                 mov     eax, [ebp+var_4]
.text:00000E32                 add     esp, 8
.text:00000E35                 cmp     ebp, esp
.text:00000E37                 call    __RTC_CheckEsp
.text:00000E3C                 mov     esp, ebp
.text:00000E3E                 pop     ebp
.text:00000E3F                 retn
.text:00000E3F ??0CRegisterCodecsBranch@@QAE@XZ endp
.text:00000E3F
.text:00000E3F _text           ends
.text:00000E3F
.bss:00000E40 ; ===========================================================================
.bss:00000E40
.bss:00000E40 ; Segment type: Uninitialized
.bss:00000E40 ; Segment permissions: Read/Write
.bss:00000E40 _bss            segment byte public 'BSS' use32
.bss:00000E40                 assume cs:_bss
.bss:00000E40                 ;org 0E40h
.bss:00000E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000E40 ; CRegisterCodecsBranch g_RegisterCodecs
.bss:00000E40 _g_RegisterCodecs db    ? ;             ; DATA XREF: `dynamic initializer for 'g_RegisterCodecs''(void)+3o
.bss:00000E41                 align 4
.bss:00000E41 _bss            ends
.bss:00000E41
.CRT$XCU:00000E44 ; ===========================================================================
.CRT$XCU:00000E44
.CRT$XCU:00000E44 ; Segment type: Pure data
.CRT$XCU:00000E44 ; Segment permissions: Read
.CRT$XCU:00000E44 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00000E44                 assume cs:_CRT$XCU
.CRT$XCU:00000E44                 ;org 0E44h
.CRT$XCU:00000E44 _g_RegisterCodecs$initializer$ dd offset ??__Eg_RegisterCodecs@@YAXXZ ; `dynamic initializer for 'g_RegisterCodecs''(void)
.CRT$XCU:00000E44 _CRT$XCU        ends
.CRT$XCU:00000E44
UNDEF:00000E50 ; ===========================================================================
UNDEF:00000E50
UNDEF:00000E50 ; Segment type: Externs
UNDEF:00000E50 ; UNDEF
UNDEF:00000E50 ; void __cdecl operator delete(void *)
UNDEF:00000E50                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateBra_Decoder_PPC@@YGPAXXZ$0+4p
UNDEF:00000E50                                         ; __unwindfunclet$?CreateBra_Encoder_PPC@@YGPAXXZ$0+4p ...
UNDEF:00000E54 ; __stdcall PPC_Convert(x, x, x, x)
UNDEF:00000E54                 extrn _PPC_Convert@16:near
UNDEF:00000E54                                         ; DATA XREF: CreateBra_Decoder_PPC(void)+56o
UNDEF:00000E54                                         ; CreateBra_Encoder_PPC(void)+56o
UNDEF:00000E58 ; void *__cdecl operator new(unsigned int)
UNDEF:00000E58                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateBra_Decoder_PPC(void)+3Cp
UNDEF:00000E58                                         ; CreateBra_Encoder_PPC(void)+3Cp ...
UNDEF:00000E5C                 extrn ___security_cookie:near
UNDEF:00000E5C                                         ; DATA XREF: CreateBra_Decoder_PPC(void)+29r
UNDEF:00000E5C                                         ; CreateBra_Encoder_PPC(void)+29r ...
UNDEF:00000E60                 extrn ___CxxFrameHandler3:near
UNDEF:00000E60                                         ; CODE XREF: __ehhandler$?CreateBra_Decoder_PPC@@YGPAXXZ+16j
UNDEF:00000E60                                         ; __ehhandler$?CreateBra_Encoder_PPC@@YGPAXXZ+16j ...
UNDEF:00000E64 ; __fastcall __security_check_cookie(x)
UNDEF:00000E64                 extrn @__security_check_cookie@4:near
UNDEF:00000E64                                         ; CODE XREF: __ehhandler$?CreateBra_Decoder_PPC@@YGPAXXZ+Cp
UNDEF:00000E64                                         ; __ehhandler$?CreateBra_Encoder_PPC@@YGPAXXZ+Cp ...
UNDEF:00000E68                 extrn __RTC_CheckEsp:near
UNDEF:00000E68                                         ; CODE XREF: CreateBra_Decoder_PPC(void)+8Fp
UNDEF:00000E68                                         ; CreateBra_Encoder_PPC(void)+8Fp ...
UNDEF:00000E6C                 extrn __RTC_Shutdown:near
UNDEF:00000E6C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000E70                 extrn __RTC_InitBase:near
UNDEF:00000E70                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000E74 ; const type_info::`vftable'
UNDEF:00000E74                 extrn ??_7type_info@@6B@:near
UNDEF:00000E74                                         ; DATA XREF: .data:CBranchCoder `RTTI Type Descriptor'o
UNDEF:00000E74                                         ; .data:ICompressFilter `RTTI Type Descriptor'o ...
UNDEF:00000E78 ; public: virtual long __stdcall CBranchCoder::Init(void)
UNDEF:00000E78                 extrn ?Init@CBranchCoder@@UAGJXZ:near
UNDEF:00000E78                                         ; DATA XREF: .rdata:00000AA0o
UNDEF:00000E7C ; public: virtual unsigned int __stdcall CBranchCoder::Filter(unsigned char *, unsigned int)
UNDEF:00000E7C                 extrn ?Filter@CBranchCoder@@UAGIPAEI@Z:near
UNDEF:00000E7C                                         ; DATA XREF: .rdata:00000AA4o
UNDEF:00000E80 ; const IID IID_IUnknown
UNDEF:00000E80                 extrn _IID_IUnknown:near
UNDEF:00000E80                                         ; DATA XREF: CBranchCoder::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00000E84                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressFilter::`vftable'o
UNDEF:00000E84                                         ; .rdata:00000D54o ...
UNDEF:00000E88 ; __stdcall IA64_Convert(x, x, x, x)
UNDEF:00000E88                 extrn _IA64_Convert@16:near
UNDEF:00000E88                                         ; DATA XREF: CreateBra_Decoder_IA64(void)+56o
UNDEF:00000E88                                         ; CreateBra_Encoder_IA64(void)+56o
UNDEF:00000E8C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000E8C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00000E90 ; __stdcall ARM_Convert(x, x, x, x)
UNDEF:00000E90                 extrn _ARM_Convert@16:near
UNDEF:00000E90                                         ; DATA XREF: CreateBra_Decoder_ARM(void)+56o
UNDEF:00000E90                                         ; CreateBra_Encoder_ARM(void)+56o
UNDEF:00000E94 ; __stdcall ARMT_Convert(x, x, x, x)
UNDEF:00000E94                 extrn _ARMT_Convert@16:near
UNDEF:00000E94                                         ; DATA XREF: CreateBra_Decoder_ARMT(void)+56o
UNDEF:00000E94                                         ; CreateBra_Encoder_ARMT(void)+56o
UNDEF:00000E98 ; __stdcall SPARC_Convert(x, x, x, x)
UNDEF:00000E98                 extrn _SPARC_Convert@16:near
UNDEF:00000E98                                         ; DATA XREF: CreateBra_Decoder_SPARC(void)+56o
UNDEF:00000E98                                         ; CreateBra_Encoder_SPARC(void)+56o
UNDEF:00000E9C ; void __stdcall RegisterCodec(const struct CCodecInfo *)
UNDEF:00000E9C                 extrn ?RegisterCodec@@YGXPBUCCodecInfo@@@Z:near
UNDEF:00000E9C                                         ; CODE XREF: CRegisterCodecsBranch::CRegisterCodecsBranch(void)+3Cp
UNDEF:00000E9C
UNDEF:00000E9C
UNDEF:00000E9C                 end