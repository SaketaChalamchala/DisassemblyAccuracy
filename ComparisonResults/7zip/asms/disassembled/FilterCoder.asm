.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : C75A92983F33D3178BE745632B839429
.text:00000000 ; Input CRC32 : 0FEEEA2E
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\FilterCoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall CFilterCoder::SetInBufSize(CFilterCoder *this, unsigned int, unsigned int)
.text:00000000                 public ?SetInBufSize@CFilterCoder@@UAGJII@Z
.text:00000000 ?SetInBufSize@CFilterCoder@@UAGJII@Z proc near ; DATA XREF: .rdata:000016C0o
.text:00000000
.text:00000000 this            = dword ptr  8
.text:00000000 arg_8           = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 mov     eax, [ebp+this]
.text:00000006                 mov     ecx, [ebp+arg_8]
.text:00000009                 mov     [eax+2Ch], ecx
.text:0000000C                 xor     eax, eax
.text:0000000E                 pop     ebp
.text:0000000F                 retn    0Ch
.text:0000000F ?SetInBufSize@CFilterCoder@@UAGJII@Z endp
.text:0000000F
.text:0000000F ; ---------------------------------------------------------------------------
.text:00000012                 align 10h
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020 ; __int32 __stdcall CFilterCoder::SetOutBufSize(CFilterCoder *this, unsigned int, unsigned int)
.text:00000020                 public ?SetOutBufSize@CFilterCoder@@UAGJII@Z
.text:00000020 ?SetOutBufSize@CFilterCoder@@UAGJII@Z proc near ; DATA XREF: .rdata:000016C4o
.text:00000020                                         ; .rdata$r:00001914o ...
.text:00000020
.text:00000020 this            = dword ptr  8
.text:00000020 arg_8           = dword ptr  10h
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 mov     eax, [ebp+this]
.text:00000026                 mov     ecx, [ebp+arg_8]
.text:00000029                 mov     [eax+30h], ecx
.text:0000002C
.text:0000002C loc_2C:                                 ; DATA XREF: .rdata$r:00002038o
.text:0000002C                 xor     eax, eax
.text:0000002E                 pop     ebp
.text:0000002F                 retn    0Ch
.text:0000002F ?SetOutBufSize@CFilterCoder@@UAGJII@Z endp
.text:0000002F
.text:0000002F ; ---------------------------------------------------------------------------
.text:00000032                 db 0Ah dup(0CCh)
.text:0000003C unk_3C          db 0CCh ; ¦             ; DATA XREF: .rdata$r:00002228o
.text:0000003D                 db 0CCh ; ¦
.text:0000003E                 db 0CCh ; ¦
.text:0000003F                 db 0CCh ; ¦
.text:00000040
.text:00000040 ; =============== S U B R O U T I N E =======================================
.text:00000040
.text:00000040 ; Attributes: bp-based frame
.text:00000040
.text:00000040 ; __int32 __thiscall CFilterCoder::Alloc(CFilterCoder *__hidden this)
.text:00000040                 public ?Alloc@CFilterCoder@@AAEJXZ
.text:00000040 ?Alloc@CFilterCoder@@AAEJXZ proc near   ; CODE XREF: CFilterCoder::Init_and_Alloc(void)+58p
.text:00000040                                         ; CFilterCoder::Init_NoSubFilterInit(void)+19p
.text:00000040
.text:00000040 var_C           = dword ptr -0Ch
.text:00000040 var_8           = dword ptr -8
.text:00000040 var_4           = dword ptr -4
.text:00000040
.text:00000040                 push    ebp
.text:00000041                 mov     ebp, esp
.text:00000043                 sub     esp, 0Ch
.text:00000046                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000004D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000054                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000005B                 mov     [ebp+var_4], ecx
.text:0000005E                 mov     eax, [ebp+var_4]
.text:00000061                 mov     ecx, [eax+50h]
.text:00000064                 push    ecx
.text:00000065                 mov     edx, [ebp+var_4]
.text:00000068                 mov     eax, [edx+4Ch]
.text:0000006B                 push    eax
.text:0000006C                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:00000071                 mov     [ebp+var_8], eax
.text:00000074                 mov     [ebp+var_C], 1000h
.text:0000007B                 mov     ecx, [ebp+var_8]
.text:0000007E                 and     ecx, 0FFFFF000h
.text:00000084                 mov     [ebp+var_8], ecx
.text:00000087                 cmp     [ebp+var_8], 1000h
.text:0000008E                 jnb     short loc_97
.text:00000090                 mov     [ebp+var_8], 1000h
.text:00000097
.text:00000097 loc_97:                                 ; CODE XREF: CFilterCoder::Alloc(void)+4Ej
.text:00000097                 mov     edx, [ebp+var_4]
.text:0000009A                 cmp     dword ptr [edx+44h], 0
.text:0000009E                 jz      short loc_AB
.text:000000A0                 mov     eax, [ebp+var_4]
.text:000000A3                 mov     ecx, [eax+48h]
.text:000000A6                 cmp     ecx, [ebp+var_8]
.text:000000A9                 jz      short loc_D5
.text:000000AB
.text:000000AB loc_AB:                                 ; CODE XREF: CFilterCoder::Alloc(void)+5Ej
.text:000000AB                 push    0Fh             ; unsigned int
.text:000000AD                 mov     edx, [ebp+var_8]
.text:000000B0                 push    edx             ; unsigned int
.text:000000B1                 mov     ecx, [ebp+var_4]
.text:000000B4                 add     ecx, 40h ; '@'  ; this
.text:000000B7                 call    ?AllocAlignedMask@CAlignedMidBuffer@@QAEXII@Z ; CAlignedMidBuffer::AllocAlignedMask(uint,uint)
.text:000000BC                 mov     eax, [ebp+var_4]
.text:000000BF                 cmp     dword ptr [eax+44h], 0
.text:000000C3                 jnz     short loc_CC
.text:000000C5                 mov     eax, 8007000Eh
.text:000000CA                 jmp     short loc_D7
.text:000000CC ; ---------------------------------------------------------------------------
.text:000000CC
.text:000000CC loc_CC:                                 ; CODE XREF: CFilterCoder::Alloc(void)+83j
.text:000000CC                 mov     ecx, [ebp+var_4]
.text:000000CF                 mov     edx, [ebp+var_8]
.text:000000D2                 mov     [ecx+48h], edx
.text:000000D5
.text:000000D5 loc_D5:                                 ; CODE XREF: CFilterCoder::Alloc(void)+69j
.text:000000D5                 xor     eax, eax
.text:000000D7
.text:000000D7 loc_D7:                                 ; CODE XREF: CFilterCoder::Alloc(void)+8Aj
.text:000000D7                 add     esp, 0Ch
.text:000000DA                 cmp     ebp, esp
.text:000000DC                 call    __RTC_CheckEsp
.text:000000E1                 mov     esp, ebp
.text:000000E3                 pop     ebp
.text:000000E4                 retn
.text:000000E4 ?Alloc@CFilterCoder@@AAEJXZ endp
.text:000000E4
.text:000000E4 ; ---------------------------------------------------------------------------
.text:000000E5                 align 10h
.text:000000F0
.text:000000F0 ; =============== S U B R O U T I N E =======================================
.text:000000F0
.text:000000F0 ; Attributes: bp-based frame
.text:000000F0
.text:000000F0 ; __int32 __thiscall CFilterCoder::Init_and_Alloc(CFilterCoder *__hidden this)
.text:000000F0                 public ?Init_and_Alloc@CFilterCoder@@AAEJXZ
.text:000000F0 ?Init_and_Alloc@CFilterCoder@@AAEJXZ proc near
.text:000000F0                                         ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1Ap
.text:000000F0                                         ; CFilterCoder::InitEncoder(void)+14p ...
.text:000000F0
.text:000000F0 var_C           = dword ptr -0Ch
.text:000000F0 var_8           = dword ptr -8
.text:000000F0 var_4           = dword ptr -4
.text:000000F0
.text:000000F0                 push    ebp
.text:000000F1                 mov     ebp, esp
.text:000000F3                 sub     esp, 0Ch
.text:000000F6                 push    esi
.text:000000F7                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000000FE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000105                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000010C                 mov     [ebp+var_4], ecx
.text:0000010F                 mov     ecx, [ebp+var_4]
.text:00000112                 add     ecx, 94h ; 'ö'
.text:00000118                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:0000011D                 mov     [ebp+var_C], eax
.text:00000120                 mov     eax, [ebp+var_C]
.text:00000123                 mov     ecx, [eax]
.text:00000125                 mov     esi, esp
.text:00000127                 mov     edx, [ebp+var_C]
.text:0000012A                 push    edx
.text:0000012B                 mov     eax, [ecx+0Ch]
.text:0000012E                 call    eax
.text:00000130                 cmp     esi, esp
.text:00000132                 call    __RTC_CheckEsp
.text:00000137                 mov     [ebp+var_8], eax
.text:0000013A                 cmp     [ebp+var_8], 0
.text:0000013E                 jz      short loc_145
.text:00000140                 mov     eax, [ebp+var_8]
.text:00000143                 jmp     short loc_14D
.text:00000145 ; ---------------------------------------------------------------------------
.text:00000145
.text:00000145 loc_145:                                ; CODE XREF: CFilterCoder::Init_and_Alloc(void)+4Ej
.text:00000145                 mov     ecx, [ebp+var_4] ; this
.text:00000148                 call    ?Alloc@CFilterCoder@@AAEJXZ ; CFilterCoder::Alloc(void)
.text:0000014D
.text:0000014D loc_14D:                                ; CODE XREF: CFilterCoder::Init_and_Alloc(void)+53j
.text:0000014D                 pop     esi
.text:0000014E                 add     esp, 0Ch
.text:00000151                 cmp     ebp, esp
.text:00000153                 call    __RTC_CheckEsp
.text:00000158                 mov     esp, ebp
.text:0000015A                 pop     ebp
.text:0000015B                 retn
.text:0000015B ?Init_and_Alloc@CFilterCoder@@AAEJXZ endp
.text:0000015B
.text:0000015B ; ---------------------------------------------------------------------------
.text:0000015C                 align 10h
.text:00000160
.text:00000160 ; =============== S U B R O U T I N E =======================================
.text:00000160
.text:00000160 ; Attributes: bp-based frame
.text:00000160
.text:00000160 ; public: __thiscall CFilterCoder::CFilterCoder(bool)
.text:00000160                 public ??0CFilterCoder@@QAE@_N@Z
.text:00000160 ??0CFilterCoder@@QAE@_N@Z proc near
.text:00000160
.text:00000160 var_10          = dword ptr -10h
.text:00000160 var_C           = dword ptr -0Ch
.text:00000160 var_4           = dword ptr -4
.text:00000160 arg_0           = byte ptr  8
.text:00000160
.text:00000160                 push    ebp
.text:00000161                 mov     ebp, esp
.text:00000163                 push    0FFFFFFFFh
.text:00000165                 push    offset __ehhandler$??0CFilterCoder@@QAE@_N@Z
.text:0000016A                 mov     eax, large fs:0
.text:00000170                 push    eax
.text:00000171                 push    ecx
.text:00000172                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000179                 mov     eax, dword ptr ds:___security_cookie
.text:0000017E                 xor     eax, ebp
.text:00000180                 push    eax
.text:00000181                 lea     eax, [ebp+var_C]
.text:00000184                 mov     large fs:0, eax
.text:0000018A                 mov     [ebp+var_10], ecx
.text:0000018D                 mov     ecx, [ebp+var_10] ; this
.text:00000190                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000195                 mov     ecx, [ebp+var_10]
.text:00000198                 add     ecx, 4          ; this
.text:0000019B                 call    ??0ICompressSetOutStreamSize@@QAE@XZ ; ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)
.text:000001A0                 mov     ecx, [ebp+var_10]
.text:000001A3                 add     ecx, 8          ; this
.text:000001A6                 call    ??0ICompressInitEncoder@@QAE@XZ ; ICompressInitEncoder::ICompressInitEncoder(void)
.text:000001AB                 mov     ecx, [ebp+var_10]
.text:000001AE                 add     ecx, 0Ch        ; this
.text:000001B1                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:000001B6                 mov     ecx, [ebp+var_10]
.text:000001B9                 add     ecx, 10h        ; this
.text:000001BC                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:000001C1                 mov     ecx, [ebp+var_10]
.text:000001C4                 add     ecx, 14h        ; this
.text:000001C7                 call    ??0ICompressSetOutStream@@QAE@XZ ; ICompressSetOutStream::ICompressSetOutStream(void)
.text:000001CC                 mov     ecx, [ebp+var_10]
.text:000001CF                 add     ecx, 18h        ; this
.text:000001D2                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:000001D7                 mov     ecx, [ebp+var_10]
.text:000001DA                 add     ecx, 1Ch        ; this
.text:000001DD                 call    ??0IOutStreamFinish@@QAE@XZ ; IOutStreamFinish::IOutStreamFinish(void)
.text:000001E2                 mov     ecx, [ebp+var_10]
.text:000001E5                 add     ecx, 20h ; ' '  ; this
.text:000001E8                 call    ??0ICompressSetBufSize@@QAE@XZ ; ICompressSetBufSize::ICompressSetBufSize(void)
.text:000001ED                 mov     ecx, [ebp+var_10]
.text:000001F0                 add     ecx, 24h ; '$'  ; this
.text:000001F3                 call    ??0ICryptoSetPassword@@QAE@XZ ; ICryptoSetPassword::ICryptoSetPassword(void)
.text:000001F8                 mov     ecx, [ebp+var_10]
.text:000001FB                 add     ecx, 28h ; '('  ; this
.text:000001FE                 call    ??0ICryptoProperties@@QAE@XZ ; ICryptoProperties::ICryptoProperties(void)
.text:00000203                 mov     ecx, [ebp+var_10]
.text:00000206                 add     ecx, 2Ch ; ','  ; this
.text:00000209                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:0000020E                 mov     ecx, [ebp+var_10]
.text:00000211                 add     ecx, 30h ; '0'  ; this
.text:00000214                 call    ??0ICompressWriteCoderProperties@@QAE@XZ ; ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)
.text:00000219                 mov     ecx, [ebp+var_10]
.text:0000021C                 add     ecx, 34h ; '4'  ; this
.text:0000021F                 call    ??0ICryptoResetInitVector@@QAE@XZ ; ICryptoResetInitVector::ICryptoResetInitVector(void)
.text:00000224                 mov     ecx, [ebp+var_10]
.text:00000227                 add     ecx, 38h ; '8'  ; this
.text:0000022A                 call    ??0ICompressSetDecoderProperties2@@QAE@XZ ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)
.text:0000022F                 mov     ecx, [ebp+var_10]
.text:00000232                 add     ecx, 3Ch ; '<'  ; this
.text:00000235                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000023A                 mov     ecx, [ebp+var_10]
.text:0000023D                 add     ecx, 40h ; '@'  ; this
.text:00000240                 call    ??0CAlignedMidBuffer@@QAE@XZ ; CAlignedMidBuffer::CAlignedMidBuffer(void)
.text:00000245                 mov     [ebp+var_4], 0
.text:0000024C                 mov     eax, [ebp+var_10]
.text:0000024F                 mov     dword ptr [eax], offset ??_7CFilterCoder@@6BICompressCoder@@@ ; const CFilterCoder::`vftable'{for `ICompressCoder'}
.text:00000255                 mov     ecx, [ebp+var_10]
.text:00000258                 mov     dword ptr [ecx+4], offset ??_7CFilterCoder@@6BICompressSetOutStreamSize@@@ ; const CFilterCoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:0000025F                 mov     edx, [ebp+var_10]
.text:00000262                 mov     dword ptr [edx+8], offset ??_7CFilterCoder@@6BICompressInitEncoder@@@ ; const CFilterCoder::`vftable'{for `ICompressInitEncoder'}
.text:00000269                 mov     eax, [ebp+var_10]
.text:0000026C                 mov     dword ptr [eax+0Ch], offset ??_7CFilterCoder@@6BICompressSetInStream@@@ ; const CFilterCoder::`vftable'{for `ICompressSetInStream'}
.text:00000273                 mov     ecx, [ebp+var_10]
.text:00000276                 mov     dword ptr [ecx+10h], offset ??_7CFilterCoder@@6BISequentialInStream@@@ ; const CFilterCoder::`vftable'{for `ISequentialInStream'}
.text:0000027D                 mov     edx, [ebp+var_10]
.text:00000280                 mov     dword ptr [edx+14h], offset ??_7CFilterCoder@@6BICompressSetOutStream@@@ ; const CFilterCoder::`vftable'{for `ICompressSetOutStream'}
.text:00000287                 mov     eax, [ebp+var_10]
.text:0000028A                 mov     dword ptr [eax+18h], offset ??_7CFilterCoder@@6BISequentialOutStream@@@ ; const CFilterCoder::`vftable'{for `ISequentialOutStream'}
.text:00000291                 mov     ecx, [ebp+var_10]
.text:00000294                 mov     dword ptr [ecx+1Ch], offset ??_7CFilterCoder@@6BIOutStreamFinish@@@ ; const CFilterCoder::`vftable'{for `IOutStreamFinish'}
.text:0000029B                 mov     edx, [ebp+var_10]
.text:0000029E                 mov     dword ptr [edx+20h], offset ??_7CFilterCoder@@6BICompressSetBufSize@@@ ; const CFilterCoder::`vftable'{for `ICompressSetBufSize'}
.text:000002A5                 mov     eax, [ebp+var_10]
.text:000002A8                 mov     dword ptr [eax+24h], offset ??_7CFilterCoder@@6BICryptoSetPassword@@@ ; const CFilterCoder::`vftable'{for `ICryptoSetPassword'}
.text:000002AF                 mov     ecx, [ebp+var_10]
.text:000002B2                 mov     dword ptr [ecx+28h], offset ??_7CFilterCoder@@6BICryptoProperties@@@ ; const CFilterCoder::`vftable'{for `ICryptoProperties'}
.text:000002B9                 mov     edx, [ebp+var_10]
.text:000002BC                 mov     dword ptr [edx+2Ch], offset ??_7CFilterCoder@@6BICompressSetCoderProperties@@@ ; const CFilterCoder::`vftable'{for `ICompressSetCoderProperties'}
.text:000002C3                 mov     eax, [ebp+var_10]
.text:000002C6                 mov     dword ptr [eax+30h], offset ??_7CFilterCoder@@6BICompressWriteCoderProperties@@@ ; const CFilterCoder::`vftable'{for `ICompressWriteCoderProperties'}
.text:000002CD                 mov     ecx, [ebp+var_10]
.text:000002D0                 mov     dword ptr [ecx+34h], offset ??_7CFilterCoder@@6BICryptoResetInitVector@@@ ; const CFilterCoder::`vftable'{for `ICryptoResetInitVector'}
.text:000002D7                 mov     edx, [ebp+var_10]
.text:000002DA                 mov     dword ptr [edx+38h], offset ??_7CFilterCoder@@6BICompressSetDecoderProperties2@@@ ; const CFilterCoder::`vftable'{for `ICompressSetDecoderProperties2'}
.text:000002E1                 mov     eax, [ebp+var_10]
.text:000002E4                 mov     dword ptr [eax+48h], 0
.text:000002EB                 mov     ecx, [ebp+var_10]
.text:000002EE                 mov     dword ptr [ecx+4Ch], 100000h
.text:000002F5                 mov     edx, [ebp+var_10]
.text:000002F8                 mov     dword ptr [edx+50h], 100000h
.text:000002FF                 mov     eax, [ebp+var_10]
.text:00000302                 mov     cl, [ebp+arg_0]
.text:00000305                 mov     [eax+54h], cl
.text:00000308                 mov     edx, [ebp+var_10]
.text:0000030B                 mov     byte ptr [edx+55h], 0
.text:0000030F                 mov     eax, [ebp+var_10]
.text:00000312                 mov     dword ptr [eax+58h], 0
.text:00000319                 mov     dword ptr [eax+5Ch], 0
.text:00000320                 mov     ecx, [ebp+var_10]
.text:00000323                 mov     dword ptr [ecx+60h], 0
.text:0000032A                 mov     dword ptr [ecx+64h], 0
.text:00000331                 mov     ecx, [ebp+var_10]
.text:00000334                 add     ecx, 68h ; 'h'
.text:00000337                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000033C                 mov     byte ptr [ebp+var_4], 1
.text:00000340                 mov     ecx, [ebp+var_10]
.text:00000343                 add     ecx, 6Ch ; 'l'
.text:00000346                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:0000034B                 mov     byte ptr [ebp+var_4], 2
.text:0000034F                 mov     ecx, [ebp+var_10]
.text:00000352                 add     ecx, 7Ch ; '|'
.text:00000355                 call    ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>(void)
.text:0000035A                 mov     byte ptr [ebp+var_4], 3
.text:0000035E                 mov     ecx, [ebp+var_10]
.text:00000361                 add     ecx, 80h ; 'Ç'
.text:00000367                 call    ??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::CMyComPtr<ICryptoProperties>(void)
.text:0000036C                 mov     byte ptr [ebp+var_4], 4
.text:00000370                 mov     ecx, [ebp+var_10]
.text:00000373                 add     ecx, 84h ; 'ä'
.text:00000379                 call    ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>(void)
.text:0000037E                 mov     byte ptr [ebp+var_4], 5
.text:00000382                 mov     ecx, [ebp+var_10]
.text:00000385                 add     ecx, 88h ; 'ê'
.text:0000038B                 call    ??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::CMyComPtr<ICompressWriteCoderProperties>(void)
.text:00000390                 mov     byte ptr [ebp+var_4], 6
.text:00000394                 mov     ecx, [ebp+var_10]
.text:00000397                 add     ecx, 8Ch ; 'î'
.text:0000039D                 call    ??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::CMyComPtr<ICryptoResetInitVector>(void)
.text:000003A2                 mov     byte ptr [ebp+var_4], 7
.text:000003A6                 mov     ecx, [ebp+var_10]
.text:000003A9                 add     ecx, 90h ; 'É'
.text:000003AF                 call    ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:000003B4                 mov     byte ptr [ebp+var_4], 8
.text:000003B8                 mov     ecx, [ebp+var_10]
.text:000003BB                 add     ecx, 94h ; 'ö'
.text:000003C1                 call    ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>(void)
.text:000003C6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000003CD                 mov     eax, [ebp+var_10]
.text:000003D0                 mov     ecx, [ebp+var_C]
.text:000003D3                 mov     large fs:0, ecx
.text:000003DA                 pop     ecx
.text:000003DB                 add     esp, 10h
.text:000003DE                 cmp     ebp, esp
.text:000003E0                 call    __RTC_CheckEsp
.text:000003E5                 mov     esp, ebp
.text:000003E7                 pop     ebp
.text:000003E8                 retn    4
.text:000003E8 ??0CFilterCoder@@QAE@_N@Z endp
.text:000003E8
.text:000003E8 ; ---------------------------------------------------------------------------
.text:000003EB                 align 10h
.text:000003F0
.text:000003F0 ; =============== S U B R O U T I N E =======================================
.text:000003F0
.text:000003F0 ; Attributes: bp-based frame
.text:000003F0
.text:000003F0 ; _DWORD __thiscall CFilterCoder::~CFilterCoder(CFilterCoder *__hidden this)
.text:000003F0                 public ??1CFilterCoder@@QAE@XZ
.text:000003F0 ??1CFilterCoder@@QAE@XZ proc near       ; CODE XREF: CFilterCoder::`scalar deleting destructor'(uint)+11p
.text:000003F0
.text:000003F0 var_10          = dword ptr -10h
.text:000003F0 var_C           = dword ptr -0Ch
.text:000003F0 var_4           = dword ptr -4
.text:000003F0
.text:000003F0                 push    ebp
.text:000003F1                 mov     ebp, esp
.text:000003F3                 push    0FFFFFFFFh
.text:000003F5                 push    offset __ehhandler$??1CFilterCoder@@QAE@XZ
.text:000003FA                 mov     eax, large fs:0
.text:00000400                 push    eax
.text:00000401                 push    ecx
.text:00000402                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000409                 mov     eax, dword ptr ds:___security_cookie
.text:0000040E                 xor     eax, ebp
.text:00000410                 push    eax
.text:00000411                 lea     eax, [ebp+var_C]
.text:00000414                 mov     large fs:0, eax
.text:0000041A                 mov     [ebp+var_10], ecx
.text:0000041D                 mov     eax, [ebp+var_10]
.text:00000420                 mov     dword ptr [eax], offset ??_7CFilterCoder@@6BICompressCoder@@@ ; const CFilterCoder::`vftable'{for `ICompressCoder'}
.text:00000426                 mov     ecx, [ebp+var_10]
.text:00000429                 mov     dword ptr [ecx+4], offset ??_7CFilterCoder@@6BICompressSetOutStreamSize@@@ ; const CFilterCoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:00000430                 mov     edx, [ebp+var_10]
.text:00000433                 mov     dword ptr [edx+8], offset ??_7CFilterCoder@@6BICompressInitEncoder@@@ ; const CFilterCoder::`vftable'{for `ICompressInitEncoder'}
.text:0000043A                 mov     eax, [ebp+var_10]
.text:0000043D                 mov     dword ptr [eax+0Ch], offset ??_7CFilterCoder@@6BICompressSetInStream@@@ ; const CFilterCoder::`vftable'{for `ICompressSetInStream'}
.text:00000444                 mov     ecx, [ebp+var_10]
.text:00000447                 mov     dword ptr [ecx+10h], offset ??_7CFilterCoder@@6BISequentialInStream@@@ ; const CFilterCoder::`vftable'{for `ISequentialInStream'}
.text:0000044E                 mov     edx, [ebp+var_10]
.text:00000451                 mov     dword ptr [edx+14h], offset ??_7CFilterCoder@@6BICompressSetOutStream@@@ ; const CFilterCoder::`vftable'{for `ICompressSetOutStream'}
.text:00000458                 mov     eax, [ebp+var_10]
.text:0000045B                 mov     dword ptr [eax+18h], offset ??_7CFilterCoder@@6BISequentialOutStream@@@ ; const CFilterCoder::`vftable'{for `ISequentialOutStream'}
.text:00000462                 mov     ecx, [ebp+var_10]
.text:00000465                 mov     dword ptr [ecx+1Ch], offset ??_7CFilterCoder@@6BIOutStreamFinish@@@ ; const CFilterCoder::`vftable'{for `IOutStreamFinish'}
.text:0000046C                 mov     edx, [ebp+var_10]
.text:0000046F                 mov     dword ptr [edx+20h], offset ??_7CFilterCoder@@6BICompressSetBufSize@@@ ; const CFilterCoder::`vftable'{for `ICompressSetBufSize'}
.text:00000476                 mov     eax, [ebp+var_10]
.text:00000479                 mov     dword ptr [eax+24h], offset ??_7CFilterCoder@@6BICryptoSetPassword@@@ ; const CFilterCoder::`vftable'{for `ICryptoSetPassword'}
.text:00000480                 mov     ecx, [ebp+var_10]
.text:00000483                 mov     dword ptr [ecx+28h], offset ??_7CFilterCoder@@6BICryptoProperties@@@ ; const CFilterCoder::`vftable'{for `ICryptoProperties'}
.text:0000048A                 mov     edx, [ebp+var_10]
.text:0000048D                 mov     dword ptr [edx+2Ch], offset ??_7CFilterCoder@@6BICompressSetCoderProperties@@@ ; const CFilterCoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000494                 mov     eax, [ebp+var_10]
.text:00000497                 mov     dword ptr [eax+30h], offset ??_7CFilterCoder@@6BICompressWriteCoderProperties@@@ ; const CFilterCoder::`vftable'{for `ICompressWriteCoderProperties'}
.text:0000049E                 mov     ecx, [ebp+var_10]
.text:000004A1                 mov     dword ptr [ecx+34h], offset ??_7CFilterCoder@@6BICryptoResetInitVector@@@ ; const CFilterCoder::`vftable'{for `ICryptoResetInitVector'}
.text:000004A8                 mov     edx, [ebp+var_10]
.text:000004AB                 mov     dword ptr [edx+38h], offset ??_7CFilterCoder@@6BICompressSetDecoderProperties2@@@ ; const CFilterCoder::`vftable'{for `ICompressSetDecoderProperties2'}
.text:000004B2                 mov     [ebp+var_4], 8
.text:000004B9                 mov     ecx, [ebp+var_10]
.text:000004BC                 add     ecx, 94h ; 'ö'
.text:000004C2                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:000004C7                 mov     byte ptr [ebp+var_4], 7
.text:000004CB                 mov     ecx, [ebp+var_10]
.text:000004CE                 add     ecx, 90h ; 'É'
.text:000004D4                 call    ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:000004D9                 mov     byte ptr [ebp+var_4], 6
.text:000004DD                 mov     ecx, [ebp+var_10]
.text:000004E0                 add     ecx, 8Ch ; 'î'
.text:000004E6                 call    ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>(void)
.text:000004EB                 mov     byte ptr [ebp+var_4], 5
.text:000004EF                 mov     ecx, [ebp+var_10]
.text:000004F2                 add     ecx, 88h ; 'ê'
.text:000004F8                 call    ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>(void)
.text:000004FD                 mov     byte ptr [ebp+var_4], 4
.text:00000501                 mov     ecx, [ebp+var_10]
.text:00000504                 add     ecx, 84h ; 'ä'
.text:0000050A                 call    ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)
.text:0000050F                 mov     byte ptr [ebp+var_4], 3
.text:00000513                 mov     ecx, [ebp+var_10]
.text:00000516                 add     ecx, 80h ; 'Ç'
.text:0000051C                 call    ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>(void)
.text:00000521                 mov     byte ptr [ebp+var_4], 2
.text:00000525                 mov     ecx, [ebp+var_10]
.text:00000528                 add     ecx, 7Ch ; '|'
.text:0000052B                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:00000530                 mov     byte ptr [ebp+var_4], 1
.text:00000534                 mov     ecx, [ebp+var_10]
.text:00000537                 add     ecx, 6Ch ; 'l'
.text:0000053A                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000053F                 mov     byte ptr [ebp+var_4], 0
.text:00000543                 mov     ecx, [ebp+var_10]
.text:00000546                 add     ecx, 68h ; 'h'
.text:00000549                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000054E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000555                 mov     ecx, [ebp+var_10]
.text:00000558                 add     ecx, 40h ; '@'  ; this
.text:0000055B                 call    ??1CAlignedMidBuffer@@QAE@XZ ; CAlignedMidBuffer::~CAlignedMidBuffer(void)
.text:00000560                 mov     ecx, [ebp+var_C]
.text:00000563                 mov     large fs:0, ecx
.text:0000056A                 pop     ecx
.text:0000056B                 add     esp, 10h
.text:0000056E                 cmp     ebp, esp
.text:00000570                 call    __RTC_CheckEsp
.text:00000575                 mov     esp, ebp
.text:00000577                 pop     ebp
.text:00000578                 retn
.text:00000578 ??1CFilterCoder@@QAE@XZ endp
.text:00000578
.text:00000578 ; ---------------------------------------------------------------------------
.text:00000579                 align 10h
.text:00000580
.text:00000580 ; =============== S U B R O U T I N E =======================================
.text:00000580
.text:00000580 ; Attributes: bp-based frame
.text:00000580
.text:00000580 ; __int32 __stdcall CFilterCoder::Code(CFilterCoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000580                 public ?Code@CFilterCoder@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000580 ?Code@CFilterCoder@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000580                                         ; DATA XREF: .rdata:0000176Co
.text:00000580
.text:00000580 var_60          = dword ptr -60h
.text:00000580 var_5C          = dword ptr -5Ch
.text:00000580 var_58          = dword ptr -58h
.text:00000580 var_54          = dword ptr -54h
.text:00000580 var_50          = dword ptr -50h
.text:00000580 var_4C          = dword ptr -4Ch
.text:00000580 var_48          = dword ptr -48h
.text:00000580 var_44          = dword ptr -44h
.text:00000580 var_40          = dword ptr -40h
.text:00000580 var_3C          = dword ptr -3Ch
.text:00000580 var_38          = dword ptr -38h
.text:00000580 var_34          = dword ptr -34h
.text:00000580 var_30          = dword ptr -30h
.text:00000580 var_28          = dword ptr -28h
.text:00000580 var_20          = dword ptr -20h
.text:00000580 var_1C          = dword ptr -1Ch
.text:00000580 var_15          = byte ptr -15h
.text:00000580 var_10          = dword ptr -10h
.text:00000580 var_C           = dword ptr -0Ch
.text:00000580 var_4           = dword ptr -4
.text:00000580 this            = dword ptr  8
.text:00000580 arg_4           = dword ptr  0Ch
.text:00000580 arg_8           = dword ptr  10h
.text:00000580 arg_10          = dword ptr  18h
.text:00000580 arg_14          = dword ptr  1Ch
.text:00000580
.text:00000580                 push    ebp
.text:00000581                 mov     ebp, esp
.text:00000583                 sub     esp, 60h
.text:00000586                 push    esi
.text:00000587                 push    edi
.text:00000588                 lea     edi, [ebp+var_60]
.text:0000058B                 mov     ecx, 18h
.text:00000590                 mov     eax, 0CCCCCCCCh
.text:00000595                 rep stosd
.text:00000597                 mov     ecx, [ebp+this] ; this
.text:0000059A                 call    ?Init_and_Alloc@CFilterCoder@@AAEJXZ ; CFilterCoder::Init_and_Alloc(void)
.text:0000059F                 mov     [ebp+var_4], eax
.text:000005A2                 cmp     [ebp+var_4], 0
.text:000005A6                 jz      short loc_5B0
.text:000005A8                 mov     eax, [ebp+var_4]
.text:000005AB                 jmp     loc_843
.text:000005B0 ; ---------------------------------------------------------------------------
.text:000005B0
.text:000005B0 loc_5B0:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+26j
.text:000005B0                 mov     [ebp+var_10], 0
.text:000005B7                 mov     [ebp+var_C], 0
.text:000005BE                 mov     [ebp+var_15], 0
.text:000005C2                 mov     [ebp+var_1C], 0
.text:000005C9
.text:000005C9 loc_5C9:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2BCj
.text:000005C9                 cmp     [ebp+arg_10], 0
.text:000005CD                 jz      short loc_5F4
.text:000005CF                 mov     eax, [ebp+arg_10]
.text:000005D2                 mov     [ebp+var_4C], eax
.text:000005D5                 mov     ecx, [ebp+var_4C]
.text:000005D8                 mov     edx, [ebp+var_C]
.text:000005DB                 cmp     edx, [ecx+4]
.text:000005DE                 ja      loc_841
.text:000005E4                 jb      short loc_5F4
.text:000005E6                 mov     eax, [ebp+var_4C]
.text:000005E9                 mov     ecx, [ebp+var_10]
.text:000005EC                 cmp     ecx, [eax]
.text:000005EE                 jnb     loc_841
.text:000005F4
.text:000005F4 loc_5F4:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+4Dj
.text:000005F4                                         ; CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+64j
.text:000005F4                 mov     edx, [ebp+var_1C]
.text:000005F7                 mov     [ebp+var_20], edx
.text:000005FA                 movzx   eax, [ebp+var_15]
.text:000005FE                 test    eax, eax
.text:00000600                 jnz     short loc_650
.text:00000602                 mov     ecx, [ebp+this]
.text:00000605                 mov     edx, [ecx+48h]
.text:00000608                 sub     edx, [ebp+var_1C]
.text:0000060B                 mov     [ebp+var_28], edx
.text:0000060E                 lea     eax, [ebp+var_28]
.text:00000611                 push    eax             ; unsigned int *
.text:00000612                 mov     ecx, [ebp+this]
.text:00000615                 mov     edx, [ecx+44h]
.text:00000618                 add     edx, [ebp+var_1C]
.text:0000061B                 push    edx             ; void *
.text:0000061C                 mov     eax, [ebp+arg_4]
.text:0000061F                 push    eax             ; struct ISequentialInStream *
.text:00000620                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:00000625                 mov     [ebp+var_30], eax
.text:00000628                 cmp     [ebp+var_30], 0
.text:0000062C                 jz      short loc_636
.text:0000062E                 mov     eax, [ebp+var_30]
.text:00000631                 jmp     loc_843
.text:00000636 ; ---------------------------------------------------------------------------
.text:00000636
.text:00000636 loc_636:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+ACj
.text:00000636                 mov     ecx, [ebp+var_1C]
.text:00000639                 add     ecx, [ebp+var_28]
.text:0000063C                 mov     [ebp+var_20], ecx
.text:0000063F                 mov     edx, [ebp+this]
.text:00000642                 mov     eax, [ebp+var_20]
.text:00000645                 xor     ecx, ecx
.text:00000647                 cmp     eax, [edx+48h]
.text:0000064A                 setnz   cl
.text:0000064D                 mov     [ebp+var_15], cl
.text:00000650
.text:00000650 loc_650:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+80j
.text:00000650                 mov     ecx, [ebp+this]
.text:00000653                 add     ecx, 94h ; 'ö'
.text:00000659                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:0000065E                 mov     [ebp+var_50], eax
.text:00000661                 mov     esi, esp
.text:00000663                 mov     edx, [ebp+var_20]
.text:00000666                 push    edx
.text:00000667                 mov     eax, [ebp+this]
.text:0000066A                 mov     ecx, [eax+44h]
.text:0000066D                 push    ecx
.text:0000066E                 mov     edx, [ebp+var_50]
.text:00000671                 push    edx
.text:00000672                 mov     eax, [ebp+var_50]
.text:00000675                 mov     ecx, [eax]
.text:00000677                 mov     edx, [ecx+10h]
.text:0000067A                 call    edx
.text:0000067C                 cmp     esi, esp
.text:0000067E                 call    __RTC_CheckEsp
.text:00000683                 mov     [ebp+var_1C], eax
.text:00000686                 mov     eax, [ebp+var_1C]
.text:00000689                 cmp     eax, [ebp+var_20]
.text:0000068C                 jbe     loc_724
.text:00000692                 movzx   ecx, [ebp+var_15]
.text:00000696                 test    ecx, ecx
.text:00000698                 jz      short loc_6A5
.text:0000069A                 mov     edx, [ebp+this]
.text:0000069D                 mov     eax, [ebp+var_1C]
.text:000006A0                 cmp     eax, [edx+48h]
.text:000006A3                 jbe     short loc_6AF
.text:000006A5
.text:000006A5 loc_6A5:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+118j
.text:000006A5                 mov     eax, 80004005h
.text:000006AA                 jmp     loc_843
.text:000006AF ; ---------------------------------------------------------------------------
.text:000006AF
.text:000006AF loc_6AF:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+123j
.text:000006AF                 mov     ecx, [ebp+this]
.text:000006B2                 movzx   edx, byte ptr [ecx+54h]
.text:000006B6                 test    edx, edx
.text:000006B8                 jnz     short loc_6C4
.text:000006BA                 mov     eax, 1
.text:000006BF                 jmp     loc_843
.text:000006C4 ; ---------------------------------------------------------------------------
.text:000006C4
.text:000006C4 loc_6C4:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+138j
.text:000006C4                                         ; CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+160j
.text:000006C4                 mov     eax, [ebp+this]
.text:000006C7                 mov     ecx, [eax+44h]
.text:000006CA                 mov     edx, [ebp+var_20]
.text:000006CD                 mov     byte ptr [ecx+edx], 0
.text:000006D1                 mov     eax, [ebp+var_20]
.text:000006D4                 add     eax, 1
.text:000006D7                 mov     [ebp+var_20], eax
.text:000006DA                 mov     ecx, [ebp+var_20]
.text:000006DD                 cmp     ecx, [ebp+var_1C]
.text:000006E0                 jnz     short loc_6C4
.text:000006E2                 mov     ecx, [ebp+this]
.text:000006E5                 add     ecx, 94h ; 'ö'
.text:000006EB                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:000006F0                 mov     [ebp+var_54], eax
.text:000006F3                 mov     esi, esp
.text:000006F5                 mov     edx, [ebp+var_1C]
.text:000006F8                 push    edx
.text:000006F9                 mov     eax, [ebp+this]
.text:000006FC                 mov     ecx, [eax+44h]
.text:000006FF                 push    ecx
.text:00000700                 mov     edx, [ebp+var_54]
.text:00000703                 push    edx
.text:00000704                 mov     eax, [ebp+var_54]
.text:00000707                 mov     ecx, [eax]
.text:00000709                 mov     edx, [ecx+10h]
.text:0000070C                 call    edx
.text:0000070E                 cmp     esi, esp
.text:00000710                 call    __RTC_CheckEsp
.text:00000715                 cmp     [ebp+var_1C], eax
.text:00000718                 jz      short loc_724
.text:0000071A                 mov     eax, 80004005h
.text:0000071F                 jmp     loc_843
.text:00000724 ; ---------------------------------------------------------------------------
.text:00000724
.text:00000724 loc_724:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+10Cj
.text:00000724                                         ; CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+198j
.text:00000724                 cmp     [ebp+var_20], 0
.text:00000728                 jnz     short loc_731
.text:0000072A                 xor     eax, eax
.text:0000072C                 jmp     loc_843
.text:00000731 ; ---------------------------------------------------------------------------
.text:00000731
.text:00000731 loc_731:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1A8j
.text:00000731                 cmp     [ebp+var_1C], 0
.text:00000735                 jz      short loc_73F
.text:00000737                 mov     eax, [ebp+var_1C]
.text:0000073A                 mov     [ebp+var_58], eax
.text:0000073D                 jmp     short loc_745
.text:0000073F ; ---------------------------------------------------------------------------
.text:0000073F
.text:0000073F loc_73F:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1B5j
.text:0000073F                 mov     ecx, [ebp+var_20]
.text:00000742                 mov     [ebp+var_58], ecx
.text:00000745
.text:00000745 loc_745:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1BDj
.text:00000745                 mov     edx, [ebp+var_58]
.text:00000748                 mov     [ebp+var_34], edx
.text:0000074B                 cmp     [ebp+arg_10], 0
.text:0000074F                 jz      short loc_788
.text:00000751                 mov     eax, [ebp+arg_10]
.text:00000754                 mov     ecx, [eax]
.text:00000756                 sub     ecx, [ebp+var_10]
.text:00000759                 mov     edx, [eax+4]
.text:0000075C                 sbb     edx, [ebp+var_C]
.text:0000075F                 mov     [ebp+var_3C], ecx
.text:00000762                 mov     [ebp+var_38], edx
.text:00000765                 mov     eax, [ebp+var_34]
.text:00000768                 xor     ecx, ecx
.text:0000076A                 mov     [ebp+var_60], eax
.text:0000076D                 mov     [ebp+var_5C], ecx
.text:00000770                 mov     edx, [ebp+var_5C]
.text:00000773                 cmp     edx, [ebp+var_38]
.text:00000776                 jb      short loc_788
.text:00000778                 ja      short loc_782
.text:0000077A                 mov     eax, [ebp+var_60]
.text:0000077D                 cmp     eax, [ebp+var_3C]
.text:00000780                 jbe     short loc_788
.text:00000782
.text:00000782 loc_782:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1F8j
.text:00000782                 mov     ecx, [ebp+var_3C]
.text:00000785                 mov     [ebp+var_34], ecx
.text:00000788
.text:00000788 loc_788:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1CFj
.text:00000788                                         ; CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1F6j ...
.text:00000788                 mov     edx, [ebp+var_34]
.text:0000078B                 push    edx             ; unsigned int
.text:0000078C                 mov     eax, [ebp+this]
.text:0000078F                 mov     ecx, [eax+44h]
.text:00000792                 push    ecx             ; void *
.text:00000793                 mov     edx, [ebp+arg_8]
.text:00000796                 push    edx             ; struct ISequentialOutStream *
.text:00000797                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:0000079C                 mov     [ebp+var_40], eax
.text:0000079F                 cmp     [ebp+var_40], 0
.text:000007A3                 jz      short loc_7AD
.text:000007A5                 mov     eax, [ebp+var_40]
.text:000007A8                 jmp     loc_843
.text:000007AD ; ---------------------------------------------------------------------------
.text:000007AD
.text:000007AD loc_7AD:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+223j
.text:000007AD                 mov     eax, [ebp+var_34]
.text:000007B0                 xor     ecx, ecx
.text:000007B2                 add     eax, [ebp+var_10]
.text:000007B5                 adc     ecx, [ebp+var_C]
.text:000007B8                 mov     [ebp+var_10], eax
.text:000007BB                 mov     [ebp+var_C], ecx
.text:000007BE                 cmp     [ebp+var_1C], 0
.text:000007C2                 jnz     short loc_7C8
.text:000007C4                 xor     eax, eax
.text:000007C6                 jmp     short loc_843
.text:000007C8 ; ---------------------------------------------------------------------------
.text:000007C8
.text:000007C8 loc_7C8:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+242j
.text:000007C8                 cmp     [ebp+arg_14], 0
.text:000007CC                 jz      short loc_7FB
.text:000007CE                 mov     esi, esp
.text:000007D0                 lea     edx, [ebp+var_10]
.text:000007D3                 push    edx
.text:000007D4                 lea     eax, [ebp+var_10]
.text:000007D7                 push    eax
.text:000007D8                 mov     ecx, [ebp+arg_14]
.text:000007DB                 mov     edx, [ecx]
.text:000007DD                 mov     eax, [ebp+arg_14]
.text:000007E0                 push    eax
.text:000007E1                 mov     ecx, [edx+0Ch]
.text:000007E4                 call    ecx
.text:000007E6                 cmp     esi, esp
.text:000007E8                 call    __RTC_CheckEsp
.text:000007ED                 mov     [ebp+var_44], eax
.text:000007F0                 cmp     [ebp+var_44], 0
.text:000007F4                 jz      short loc_7FB
.text:000007F6                 mov     eax, [ebp+var_44]
.text:000007F9                 jmp     short loc_843
.text:000007FB ; ---------------------------------------------------------------------------
.text:000007FB
.text:000007FB loc_7FB:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+24Cj
.text:000007FB                                         ; CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+274j
.text:000007FB                 mov     [ebp+var_48], 0
.text:00000802
.text:00000802 loc_802:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2B4j
.text:00000802                 mov     edx, [ebp+var_1C]
.text:00000805                 cmp     edx, [ebp+var_20]
.text:00000808                 jnb     short loc_836
.text:0000080A                 mov     eax, [ebp+this]
.text:0000080D                 mov     ecx, [eax+44h]
.text:00000810                 mov     edx, [ebp+this]
.text:00000813                 mov     eax, [edx+44h]
.text:00000816                 mov     edx, [ebp+var_48]
.text:00000819                 mov     esi, [ebp+var_1C]
.text:0000081C                 mov     cl, [ecx+esi]
.text:0000081F                 mov     [eax+edx], cl
.text:00000822                 mov     edx, [ebp+var_48]
.text:00000825                 add     edx, 1
.text:00000828                 mov     [ebp+var_48], edx
.text:0000082B                 mov     eax, [ebp+var_1C]
.text:0000082E                 add     eax, 1
.text:00000831                 mov     [ebp+var_1C], eax
.text:00000834                 jmp     short loc_802
.text:00000836 ; ---------------------------------------------------------------------------
.text:00000836
.text:00000836 loc_836:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+288j
.text:00000836                 mov     ecx, [ebp+var_48]
.text:00000839                 mov     [ebp+var_1C], ecx
.text:0000083C                 jmp     loc_5C9
.text:00000841 ; ---------------------------------------------------------------------------
.text:00000841
.text:00000841 loc_841:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5Ej
.text:00000841                                         ; CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+6Ej
.text:00000841                 xor     eax, eax
.text:00000843
.text:00000843 loc_843:                                ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2Bj
.text:00000843                                         ; CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+B1j ...
.text:00000843                 push    edx
.text:00000844                 mov     ecx, ebp
.text:00000846                 push    eax
.text:00000847                 lea     edx, $LN33
.text:0000084D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000852                 pop     eax
.text:00000853                 pop     edx
.text:00000854                 pop     edi
.text:00000855                 pop     esi
.text:00000856                 add     esp, 60h
.text:00000859                 cmp     ebp, esp
.text:0000085B                 call    __RTC_CheckEsp
.text:00000860                 mov     esp, ebp
.text:00000862                 pop     ebp
.text:00000863                 retn    18h
.text:00000863 ?Code@CFilterCoder@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00000863
.text:00000863 ; ---------------------------------------------------------------------------
.text:00000866                 align 4
.text:00000868 $LN33           dd 2                    ; DATA XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2C7o
.text:0000086C                 dd offset $LN32
.text:00000870 $LN32           dd 0FFFFFFF0h, 8        ; DATA XREF: .text:0000086Co
.text:00000878                 dd offset $LN30         ; "nowPos64"
.text:0000087C                 dd 0FFFFFFD8h, 4
.text:00000884                 dd offset $LN31         ; "processedSize"
.text:00000888 $LN31           db 'processedSize',0    ; DATA XREF: .text:00000884o
.text:00000896 $LN30           db 'nowPos64',0         ; DATA XREF: .text:00000878o
.text:0000089F                 align 10h
.text:000008A0
.text:000008A0 ; =============== S U B R O U T I N E =======================================
.text:000008A0
.text:000008A0 ; Attributes: bp-based frame
.text:000008A0
.text:000008A0 ; __int32 __stdcall CFilterCoder::SetOutStream(CFilterCoder *this, struct ISequentialOutStream *)
.text:000008A0                 public ?SetOutStream@CFilterCoder@@UAGJPAUISequentialOutStream@@@Z
.text:000008A0 ?SetOutStream@CFilterCoder@@UAGJPAUISequentialOutStream@@@Z proc near
.text:000008A0                                         ; DATA XREF: .rdata:00001700o
.text:000008A0
.text:000008A0 this            = dword ptr  8
.text:000008A0 arg_4           = dword ptr  0Ch
.text:000008A0
.text:000008A0                 push    ebp
.text:000008A1                 mov     ebp, esp
.text:000008A3                 mov     eax, [ebp+arg_4]
.text:000008A6                 push    eax
.text:000008A7                 mov     ecx, [ebp+this]
.text:000008AA                 add     ecx, 58h ; 'X'
.text:000008AD                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:000008B2                 xor     eax, eax
.text:000008B4                 cmp     ebp, esp
.text:000008B6                 call    __RTC_CheckEsp
.text:000008BB                 pop     ebp
.text:000008BC                 retn    8
.text:000008BC ?SetOutStream@CFilterCoder@@UAGJPAUISequentialOutStream@@@Z endp
.text:000008BC
.text:000008BC ; ---------------------------------------------------------------------------
.text:000008BF                 align 10h
.text:000008C0
.text:000008C0 ; =============== S U B R O U T I N E =======================================
.text:000008C0
.text:000008C0 ; Attributes: bp-based frame
.text:000008C0
.text:000008C0 ; __int32 __stdcall CFilterCoder::ReleaseOutStream(CFilterCoder *this)
.text:000008C0                 public ?ReleaseOutStream@CFilterCoder@@UAGJXZ
.text:000008C0 ?ReleaseOutStream@CFilterCoder@@UAGJXZ proc near
.text:000008C0                                         ; DATA XREF: .rdata:00001704o
.text:000008C0
.text:000008C0 this            = dword ptr  8
.text:000008C0
.text:000008C0                 push    ebp
.text:000008C1                 mov     ebp, esp
.text:000008C3                 mov     ecx, [ebp+this]
.text:000008C6                 add     ecx, 58h ; 'X'
.text:000008C9                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:000008CE                 xor     eax, eax
.text:000008D0                 cmp     ebp, esp
.text:000008D2                 call    __RTC_CheckEsp
.text:000008D7                 pop     ebp
.text:000008D8                 retn    4
.text:000008D8 ?ReleaseOutStream@CFilterCoder@@UAGJXZ endp
.text:000008D8
.text:000008D8 ; ---------------------------------------------------------------------------
.text:000008DB                 align 10h
.text:000008E0
.text:000008E0 ; =============== S U B R O U T I N E =======================================
.text:000008E0
.text:000008E0 ; Attributes: bp-based frame
.text:000008E0
.text:000008E0 ; __int32 __thiscall CFilterCoder::Flush2(CFilterCoder *__hidden this)
.text:000008E0                 public ?Flush2@CFilterCoder@@AAEJXZ
.text:000008E0 ?Flush2@CFilterCoder@@AAEJXZ proc near  ; CODE XREF: CFilterCoder::Write(void const *,uint,uint *)+3Bp
.text:000008E0                                         ; CFilterCoder::OutStreamFinish(void)+2Dp
.text:000008E0
.text:000008E0 var_3C          = dword ptr -3Ch
.text:000008E0 var_38          = dword ptr -38h
.text:000008E0 var_34          = dword ptr -34h
.text:000008E0 var_30          = dword ptr -30h
.text:000008E0 var_2C          = dword ptr -2Ch
.text:000008E0 var_28          = dword ptr -28h
.text:000008E0 var_24          = dword ptr -24h
.text:000008E0 var_20          = dword ptr -20h
.text:000008E0 var_18          = dword ptr -18h
.text:000008E0 var_10          = dword ptr -10h
.text:000008E0 var_C           = dword ptr -0Ch
.text:000008E0 var_8           = dword ptr -8
.text:000008E0 var_4           = dword ptr -4
.text:000008E0
.text:000008E0                 push    ebp
.text:000008E1                 mov     ebp, esp
.text:000008E3                 sub     esp, 3Ch
.text:000008E6                 push    esi
.text:000008E7                 push    edi
.text:000008E8                 push    ecx
.text:000008E9                 lea     edi, [ebp+var_3C]
.text:000008EC                 mov     ecx, 0Fh
.text:000008F1                 mov     eax, 0CCCCCCCCh
.text:000008F6                 rep stosd
.text:000008F8                 pop     ecx
.text:000008F9                 mov     [ebp+var_4], ecx
.text:000008FC
.text:000008FC loc_8FC:                                ; CODE XREF: CFilterCoder::Flush2(void):loc_A15j
.text:000008FC                 mov     eax, [ebp+var_4]
.text:000008FF                 cmp     dword ptr [eax+78h], 0
.text:00000903                 jz      loc_A1A
.text:00000909                 mov     ecx, [ebp+var_4]
.text:0000090C                 mov     edx, [ecx+78h]
.text:0000090F                 mov     [ebp+var_8], edx
.text:00000912                 mov     eax, [ebp+var_4]
.text:00000915                 movzx   ecx, byte ptr [eax+55h]
.text:00000919                 test    ecx, ecx
.text:0000091B                 jz      short loc_968
.text:0000091D                 mov     edx, [ebp+var_4]
.text:00000920                 mov     eax, [ebp+var_4]
.text:00000923                 mov     ecx, [edx+58h]
.text:00000926                 sub     ecx, [eax+60h]
.text:00000929                 mov     edx, [edx+5Ch]
.text:0000092C                 sbb     edx, [eax+64h]
.text:0000092F                 mov     [ebp+var_10], ecx
.text:00000932                 mov     [ebp+var_C], edx
.text:00000935                 mov     eax, [ebp+var_8]
.text:00000938                 xor     ecx, ecx
.text:0000093A                 mov     [ebp+var_34], eax
.text:0000093D                 mov     [ebp+var_30], ecx
.text:00000940                 mov     edx, [ebp+var_30]
.text:00000943                 cmp     edx, [ebp+var_C]
.text:00000946                 jb      short loc_958
.text:00000948                 ja      short loc_952
.text:0000094A                 mov     eax, [ebp+var_34]
.text:0000094D                 cmp     eax, [ebp+var_10]
.text:00000950                 jbe     short loc_958
.text:00000952
.text:00000952 loc_952:                                ; CODE XREF: CFilterCoder::Flush2(void)+68j
.text:00000952                 mov     ecx, [ebp+var_10]
.text:00000955                 mov     [ebp+var_8], ecx
.text:00000958
.text:00000958 loc_958:                                ; CODE XREF: CFilterCoder::Flush2(void)+66j
.text:00000958                                         ; CFilterCoder::Flush2(void)+70j
.text:00000958                 cmp     [ebp+var_8], 0
.text:0000095C                 jnz     short loc_968
.text:0000095E                 mov     eax, 20000010h
.text:00000963                 jmp     loc_A81
.text:00000968 ; ---------------------------------------------------------------------------
.text:00000968
.text:00000968 loc_968:                                ; CODE XREF: CFilterCoder::Flush2(void)+3Bj
.text:00000968                                         ; CFilterCoder::Flush2(void)+7Cj
.text:00000968                 mov     [ebp+var_18], 0
.text:0000096F                 mov     ecx, [ebp+var_4]
.text:00000972                 add     ecx, 6Ch ; 'l'
.text:00000975                 call    ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->(void)
.text:0000097A                 mov     [ebp+var_38], eax
.text:0000097D                 mov     esi, esp
.text:0000097F                 lea     edx, [ebp+var_18]
.text:00000982                 push    edx
.text:00000983                 mov     eax, [ebp+var_8]
.text:00000986                 push    eax
.text:00000987                 mov     ecx, [ebp+var_4]
.text:0000098A                 mov     edx, [ecx+44h]
.text:0000098D                 mov     eax, [ebp+var_4]
.text:00000990                 add     edx, [eax+74h]
.text:00000993                 push    edx
.text:00000994                 mov     ecx, [ebp+var_38]
.text:00000997                 push    ecx
.text:00000998                 mov     edx, [ebp+var_38]
.text:0000099B                 mov     eax, [edx]
.text:0000099D                 mov     ecx, [eax+0Ch]
.text:000009A0                 call    ecx
.text:000009A2                 cmp     esi, esp
.text:000009A4                 call    __RTC_CheckEsp
.text:000009A9                 mov     [ebp+var_20], eax
.text:000009AC                 cmp     [ebp+var_18], 0
.text:000009B0                 jnz     short loc_9CF
.text:000009B2                 cmp     [ebp+var_20], 0
.text:000009B6                 jz      short loc_9C0
.text:000009B8                 mov     edx, [ebp+var_20]
.text:000009BB                 mov     [ebp+var_3C], edx
.text:000009BE                 jmp     short loc_9C7
.text:000009C0 ; ---------------------------------------------------------------------------
.text:000009C0
.text:000009C0 loc_9C0:                                ; CODE XREF: CFilterCoder::Flush2(void)+D6j
.text:000009C0                 mov     [ebp+var_3C], 80004005h
.text:000009C7
.text:000009C7 loc_9C7:                                ; CODE XREF: CFilterCoder::Flush2(void)+DEj
.text:000009C7                 mov     eax, [ebp+var_3C]
.text:000009CA                 jmp     loc_A81
.text:000009CF ; ---------------------------------------------------------------------------
.text:000009CF
.text:000009CF loc_9CF:                                ; CODE XREF: CFilterCoder::Flush2(void)+D0j
.text:000009CF                 mov     eax, [ebp+var_4]
.text:000009D2                 mov     ecx, [eax+74h]
.text:000009D5                 add     ecx, [ebp+var_18]
.text:000009D8                 mov     edx, [ebp+var_4]
.text:000009DB                 mov     [edx+74h], ecx
.text:000009DE                 mov     eax, [ebp+var_4]
.text:000009E1                 mov     ecx, [eax+78h]
.text:000009E4                 sub     ecx, [ebp+var_18]
.text:000009E7                 mov     edx, [ebp+var_4]
.text:000009EA                 mov     [edx+78h], ecx
.text:000009ED                 mov     eax, [ebp+var_18]
.text:000009F0                 xor     ecx, ecx
.text:000009F2                 mov     edx, [ebp+var_4]
.text:000009F5                 add     eax, [edx+60h]
.text:000009F8                 adc     ecx, [edx+64h]
.text:000009FB                 mov     edx, [ebp+var_4]
.text:000009FE                 mov     [edx+60h], eax
.text:00000A01                 mov     [edx+64h], ecx
.text:00000A04                 mov     eax, [ebp+var_20]
.text:00000A07                 mov     [ebp+var_24], eax
.text:00000A0A                 cmp     [ebp+var_24], 0
.text:00000A0E                 jz      short loc_A15
.text:00000A10                 mov     eax, [ebp+var_24]
.text:00000A13                 jmp     short loc_A81
.text:00000A15 ; ---------------------------------------------------------------------------
.text:00000A15
.text:00000A15 loc_A15:                                ; CODE XREF: CFilterCoder::Flush2(void)+12Ej
.text:00000A15                 jmp     loc_8FC
.text:00000A1A ; ---------------------------------------------------------------------------
.text:00000A1A
.text:00000A1A loc_A1A:                                ; CODE XREF: CFilterCoder::Flush2(void)+23j
.text:00000A1A                 mov     ecx, [ebp+var_4]
.text:00000A1D                 cmp     dword ptr [ecx+74h], 0
.text:00000A21                 jz      short loc_A7F
.text:00000A23                 mov     edx, [ebp+var_4]
.text:00000A26                 mov     eax, [ebp+var_4]
.text:00000A29                 mov     ecx, [edx+70h]
.text:00000A2C                 sub     ecx, [eax+74h]
.text:00000A2F                 mov     [ebp+var_28], ecx
.text:00000A32                 mov     [ebp+var_2C], 0
.text:00000A39                 jmp     short loc_A44
.text:00000A3B ; ---------------------------------------------------------------------------
.text:00000A3B
.text:00000A3B loc_A3B:                                ; CODE XREF: CFilterCoder::Flush2(void)+18Aj
.text:00000A3B                 mov     edx, [ebp+var_2C]
.text:00000A3E                 add     edx, 1
.text:00000A41                 mov     [ebp+var_2C], edx
.text:00000A44
.text:00000A44 loc_A44:                                ; CODE XREF: CFilterCoder::Flush2(void)+159j
.text:00000A44                 mov     eax, [ebp+var_2C]
.text:00000A47                 cmp     eax, [ebp+var_28]
.text:00000A4A                 jnb     short loc_A6C
.text:00000A4C                 mov     ecx, [ebp+var_4]
.text:00000A4F                 mov     edx, [ecx+74h]
.text:00000A52                 add     edx, [ebp+var_2C]
.text:00000A55                 mov     eax, [ebp+var_4]
.text:00000A58                 mov     ecx, [eax+44h]
.text:00000A5B                 mov     eax, [ebp+var_4]
.text:00000A5E                 mov     eax, [eax+44h]
.text:00000A61                 mov     esi, [ebp+var_2C]
.text:00000A64                 mov     cl, [edx+ecx]
.text:00000A67                 mov     [eax+esi], cl
.text:00000A6A                 jmp     short loc_A3B
.text:00000A6C ; ---------------------------------------------------------------------------
.text:00000A6C
.text:00000A6C loc_A6C:                                ; CODE XREF: CFilterCoder::Flush2(void)+16Aj
.text:00000A6C                 mov     edx, [ebp+var_4]
.text:00000A6F                 mov     eax, [ebp+var_28]
.text:00000A72                 mov     [edx+70h], eax
.text:00000A75                 mov     ecx, [ebp+var_4]
.text:00000A78                 mov     dword ptr [ecx+74h], 0
.text:00000A7F
.text:00000A7F loc_A7F:                                ; CODE XREF: CFilterCoder::Flush2(void)+141j
.text:00000A7F                 xor     eax, eax
.text:00000A81
.text:00000A81 loc_A81:                                ; CODE XREF: CFilterCoder::Flush2(void)+83j
.text:00000A81                                         ; CFilterCoder::Flush2(void)+EAj ...
.text:00000A81                 push    edx
.text:00000A82                 mov     ecx, ebp
.text:00000A84                 push    eax
.text:00000A85                 lea     edx, $LN19
.text:00000A8B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000A90                 pop     eax
.text:00000A91                 pop     edx
.text:00000A92                 pop     edi
.text:00000A93                 pop     esi
.text:00000A94                 add     esp, 3Ch
.text:00000A97                 cmp     ebp, esp
.text:00000A99                 call    __RTC_CheckEsp
.text:00000A9E                 mov     esp, ebp
.text:00000AA0                 pop     ebp
.text:00000AA1                 retn
.text:00000AA1 ?Flush2@CFilterCoder@@AAEJXZ endp
.text:00000AA1
.text:00000AA1 ; ---------------------------------------------------------------------------
.text:00000AA2                 align 4
.text:00000AA4 $LN19           dd 1                    ; DATA XREF: CFilterCoder::Flush2(void)+1A5o
.text:00000AA8                 dd offset $LN18
.text:00000AAC $LN18           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000AA8o
.text:00000AB4                 dd offset $LN17         ; "processed"
.text:00000AB8 $LN17           db 'processed',0        ; DATA XREF: .text:00000AB4o
.text:00000AC2                 align 10h
.text:00000AD0
.text:00000AD0 ; =============== S U B R O U T I N E =======================================
.text:00000AD0
.text:00000AD0 ; Attributes: bp-based frame
.text:00000AD0
.text:00000AD0 ; __int32 __stdcall CFilterCoder::Write(CFilterCoder *this, const void *Src, unsigned int, unsigned int *)
.text:00000AD0                 public ?Write@CFilterCoder@@UAGJPBXIPAI@Z
.text:00000AD0 ?Write@CFilterCoder@@UAGJPBXIPAI@Z proc near ; DATA XREF: .rdata:000016ECo
.text:00000AD0
.text:00000AD0 var_C           = dword ptr -0Ch
.text:00000AD0 Size            = dword ptr -8
.text:00000AD0 var_4           = dword ptr -4
.text:00000AD0 this            = dword ptr  8
.text:00000AD0 Src             = dword ptr  0Ch
.text:00000AD0 arg_8           = dword ptr  10h
.text:00000AD0 arg_C           = dword ptr  14h
.text:00000AD0
.text:00000AD0                 push    ebp
.text:00000AD1                 mov     ebp, esp
.text:00000AD3                 sub     esp, 0Ch
.text:00000AD6                 push    esi
.text:00000AD7                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000ADE                 mov     [ebp+Size], 0CCCCCCCCh
.text:00000AE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AEC                 cmp     [ebp+arg_C], 0
.text:00000AF0                 jz      short loc_AFB
.text:00000AF2                 mov     eax, [ebp+arg_C]
.text:00000AF5                 mov     dword ptr [eax], 0
.text:00000AFB
.text:00000AFB loc_AFB:                                ; CODE XREF: CFilterCoder::Write(void const *,uint,uint *)+20j
.text:00000AFB                                         ; CFilterCoder::Write(void const *,uint,uint *)+D7j ...
.text:00000AFB                 cmp     [ebp+arg_8], 0
.text:00000AFF                 jz      loc_C14
.text:00000B05                 mov     ecx, [ebp+this]
.text:00000B08                 sub     ecx, 18h        ; this
.text:00000B0B                 call    ?Flush2@CFilterCoder@@AAEJXZ ; CFilterCoder::Flush2(void)
.text:00000B10                 mov     [ebp+var_4], eax
.text:00000B13                 cmp     [ebp+var_4], 0
.text:00000B17                 jz      short loc_B21
.text:00000B19                 mov     eax, [ebp+var_4]
.text:00000B1C                 jmp     loc_C16
.text:00000B21 ; ---------------------------------------------------------------------------
.text:00000B21
.text:00000B21 loc_B21:                                ; CODE XREF: CFilterCoder::Write(void const *,uint,uint *)+47j
.text:00000B21                 mov     ecx, [ebp+this]
.text:00000B24                 mov     edx, [ebp+this]
.text:00000B27                 mov     eax, [ecx+58h]
.text:00000B2A                 cmp     eax, [edx+30h]
.text:00000B2D                 jz      short loc_BAC
.text:00000B2F                 mov     ecx, [ebp+this]
.text:00000B32                 mov     edx, [ebp+this]
.text:00000B35                 mov     eax, [ecx+30h]
.text:00000B38                 sub     eax, [edx+58h]
.text:00000B3B                 push    eax
.text:00000B3C                 mov     ecx, [ebp+arg_8]
.text:00000B3F                 push    ecx
.text:00000B40                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:00000B45                 mov     [ebp+Size], eax
.text:00000B48                 mov     edx, [ebp+Size]
.text:00000B4B                 push    edx             ; Size
.text:00000B4C                 mov     eax, [ebp+Src]
.text:00000B4F                 push    eax             ; Src
.text:00000B50                 mov     ecx, [ebp+this]
.text:00000B53                 mov     edx, [ecx+2Ch]
.text:00000B56                 mov     eax, [ebp+this]
.text:00000B59                 add     edx, [eax+58h]
.text:00000B5C                 push    edx             ; Dst
.text:00000B5D                 call    _memcpy
.text:00000B62                 add     esp, 0Ch
.text:00000B65                 mov     ecx, [ebp+arg_8]
.text:00000B68                 sub     ecx, [ebp+Size]
.text:00000B6B                 mov     [ebp+arg_8], ecx
.text:00000B6E                 mov     edx, [ebp+Src]
.text:00000B71                 add     edx, [ebp+Size]
.text:00000B74                 mov     [ebp+Src], edx
.text:00000B77                 cmp     [ebp+arg_C], 0
.text:00000B7B                 jz      short loc_B8A
.text:00000B7D                 mov     eax, [ebp+arg_C]
.text:00000B80                 mov     ecx, [eax]
.text:00000B82                 add     ecx, [ebp+Size]
.text:00000B85                 mov     edx, [ebp+arg_C]
.text:00000B88                 mov     [edx], ecx
.text:00000B8A
.text:00000B8A loc_B8A:                                ; CODE XREF: CFilterCoder::Write(void const *,uint,uint *)+ABj
.text:00000B8A                 mov     eax, [ebp+this]
.text:00000B8D                 mov     ecx, [eax+58h]
.text:00000B90                 add     ecx, [ebp+Size]
.text:00000B93                 mov     edx, [ebp+this]
.text:00000B96                 mov     [edx+58h], ecx
.text:00000B99                 mov     eax, [ebp+this]
.text:00000B9C                 mov     ecx, [ebp+this]
.text:00000B9F                 mov     edx, [eax+58h]
.text:00000BA2                 cmp     edx, [ecx+30h]
.text:00000BA5                 jz      short loc_BAC
.text:00000BA7                 jmp     loc_AFB
.text:00000BAC ; ---------------------------------------------------------------------------
.text:00000BAC
.text:00000BAC loc_BAC:                                ; CODE XREF: CFilterCoder::Write(void const *,uint,uint *)+5Dj
.text:00000BAC                                         ; CFilterCoder::Write(void const *,uint,uint *)+D5j
.text:00000BAC                 mov     ecx, [ebp+this]
.text:00000BAF                 add     ecx, 7Ch ; '|'
.text:00000BB2                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:00000BB7                 mov     [ebp+var_C], eax
.text:00000BBA                 mov     esi, esp
.text:00000BBC                 mov     eax, [ebp+this]
.text:00000BBF                 mov     ecx, [eax+58h]
.text:00000BC2                 push    ecx
.text:00000BC3                 mov     edx, [ebp+this]
.text:00000BC6                 mov     eax, [edx+2Ch]
.text:00000BC9                 push    eax
.text:00000BCA                 mov     ecx, [ebp+var_C]
.text:00000BCD                 push    ecx
.text:00000BCE                 mov     edx, [ebp+var_C]
.text:00000BD1                 mov     eax, [edx]
.text:00000BD3                 mov     ecx, [eax+10h]
.text:00000BD6                 call    ecx
.text:00000BD8                 cmp     esi, esp
.text:00000BDA                 call    __RTC_CheckEsp
.text:00000BDF                 mov     edx, [ebp+this]
.text:00000BE2                 mov     [edx+60h], eax
.text:00000BE5                 mov     eax, [ebp+this]
.text:00000BE8                 cmp     dword ptr [eax+60h], 0
.text:00000BEC                 jnz     short loc_BF0
.text:00000BEE                 jmp     short loc_C14
.text:00000BF0 ; ---------------------------------------------------------------------------
.text:00000BF0
.text:00000BF0 loc_BF0:                                ; CODE XREF: CFilterCoder::Write(void const *,uint,uint *)+11Cj
.text:00000BF0                 mov     ecx, [ebp+this]
.text:00000BF3                 mov     edx, [ebp+this]
.text:00000BF6                 mov     eax, [ecx+60h]
.text:00000BF9                 cmp     eax, [edx+58h]
.text:00000BFC                 jbe     short loc_C0F
.text:00000BFE                 mov     ecx, [ebp+this]
.text:00000C01                 mov     dword ptr [ecx+60h], 0
.text:00000C08                 mov     eax, 80004005h
.text:00000C0D                 jmp     short loc_C16
.text:00000C0F ; ---------------------------------------------------------------------------
.text:00000C0F
.text:00000C0F loc_C0F:                                ; CODE XREF: CFilterCoder::Write(void const *,uint,uint *)+12Cj
.text:00000C0F                 jmp     loc_AFB
.text:00000C14 ; ---------------------------------------------------------------------------
.text:00000C14
.text:00000C14 loc_C14:                                ; CODE XREF: CFilterCoder::Write(void const *,uint,uint *)+2Fj
.text:00000C14                                         ; CFilterCoder::Write(void const *,uint,uint *)+11Ej
.text:00000C14                 xor     eax, eax
.text:00000C16
.text:00000C16 loc_C16:                                ; CODE XREF: CFilterCoder::Write(void const *,uint,uint *)+4Cj
.text:00000C16                                         ; CFilterCoder::Write(void const *,uint,uint *)+13Dj
.text:00000C16                 pop     esi
.text:00000C17                 add     esp, 0Ch
.text:00000C1A                 cmp     ebp, esp
.text:00000C1C                 call    __RTC_CheckEsp
.text:00000C21                 mov     esp, ebp
.text:00000C23                 pop     ebp
.text:00000C24                 retn    10h
.text:00000C24 ?Write@CFilterCoder@@UAGJPBXIPAI@Z endp
.text:00000C24
.text:00000C24 ; ---------------------------------------------------------------------------
.text:00000C27                 align 10h
.text:00000C30
.text:00000C30 ; =============== S U B R O U T I N E =======================================
.text:00000C30
.text:00000C30 ; Attributes: bp-based frame
.text:00000C30
.text:00000C30 ; __int32 __stdcall CFilterCoder::OutStreamFinish(CFilterCoder *this)
.text:00000C30                 public ?OutStreamFinish@CFilterCoder@@UAGJXZ
.text:00000C30 ?OutStreamFinish@CFilterCoder@@UAGJXZ proc near ; DATA XREF: .rdata:000016D8o
.text:00000C30
.text:00000C30 var_24          = dword ptr -24h
.text:00000C30 var_20          = dword ptr -20h
.text:00000C30 var_1C          = dword ptr -1Ch
.text:00000C30 var_18          = dword ptr -18h
.text:00000C30 var_14          = dword ptr -14h
.text:00000C30 var_10          = dword ptr -10h
.text:00000C30 var_C           = dword ptr -0Ch
.text:00000C30 var_8           = dword ptr -8
.text:00000C30 var_4           = dword ptr -4
.text:00000C30 this            = dword ptr  8
.text:00000C30
.text:00000C30                 push    ebp
.text:00000C31                 mov     ebp, esp
.text:00000C33                 sub     esp, 24h
.text:00000C36                 push    esi
.text:00000C37                 mov     eax, 0CCCCCCCCh
.text:00000C3C                 mov     [ebp+var_24], eax
.text:00000C3F                 mov     [ebp+var_20], eax
.text:00000C42                 mov     [ebp+var_1C], eax
.text:00000C45                 mov     [ebp+var_18], eax
.text:00000C48                 mov     [ebp+var_14], eax
.text:00000C4B                 mov     [ebp+var_10], eax
.text:00000C4E                 mov     [ebp+var_C], eax
.text:00000C51                 mov     [ebp+var_8], eax
.text:00000C54                 mov     [ebp+var_4], eax
.text:00000C57
.text:00000C57 loc_C57:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void):loc_DA6j
.text:00000C57                 mov     ecx, [ebp+this]
.text:00000C5A                 sub     ecx, 1Ch        ; this
.text:00000C5D                 call    ?Flush2@CFilterCoder@@AAEJXZ ; CFilterCoder::Flush2(void)
.text:00000C62                 mov     [ebp+var_4], eax
.text:00000C65                 cmp     [ebp+var_4], 0
.text:00000C69                 jz      short loc_C73
.text:00000C6B                 mov     eax, [ebp+var_4]
.text:00000C6E                 jmp     loc_E1C
.text:00000C73 ; ---------------------------------------------------------------------------
.text:00000C73
.text:00000C73 loc_C73:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void)+39j
.text:00000C73                 mov     eax, [ebp+this]
.text:00000C76                 cmp     dword ptr [eax+54h], 0
.text:00000C7A                 jnz     short loc_C81
.text:00000C7C                 jmp     loc_DAB
.text:00000C81 ; ---------------------------------------------------------------------------
.text:00000C81
.text:00000C81 loc_C81:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void)+4Aj
.text:00000C81                 mov     ecx, [ebp+this]
.text:00000C84                 add     ecx, 78h ; 'x'
.text:00000C87                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:00000C8C                 mov     [ebp+var_1C], eax
.text:00000C8F                 mov     esi, esp
.text:00000C91                 mov     ecx, [ebp+this]
.text:00000C94                 mov     edx, [ecx+54h]
.text:00000C97                 push    edx
.text:00000C98                 mov     eax, [ebp+this]
.text:00000C9B                 mov     ecx, [eax+28h]
.text:00000C9E                 push    ecx
.text:00000C9F                 mov     edx, [ebp+var_1C]
.text:00000CA2                 push    edx
.text:00000CA3                 mov     eax, [ebp+var_1C]
.text:00000CA6                 mov     ecx, [eax]
.text:00000CA8                 mov     edx, [ecx+10h]
.text:00000CAB                 call    edx
.text:00000CAD                 cmp     esi, esp
.text:00000CAF                 call    __RTC_CheckEsp
.text:00000CB4                 mov     ecx, [ebp+this]
.text:00000CB7                 mov     [ecx+5Ch], eax
.text:00000CBA                 mov     edx, [ebp+this]
.text:00000CBD                 cmp     dword ptr [edx+5Ch], 0
.text:00000CC1                 jnz     short loc_CD4
.text:00000CC3                 mov     eax, [ebp+this]
.text:00000CC6                 mov     ecx, [ebp+this]
.text:00000CC9                 mov     edx, [ecx+54h]
.text:00000CCC                 mov     [eax+5Ch], edx
.text:00000CCF                 jmp     loc_DA6
.text:00000CD4 ; ---------------------------------------------------------------------------
.text:00000CD4
.text:00000CD4 loc_CD4:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void)+91j
.text:00000CD4                 mov     eax, [ebp+this]
.text:00000CD7                 mov     ecx, [ebp+this]
.text:00000CDA                 mov     edx, [eax+5Ch]
.text:00000CDD                 cmp     edx, [ecx+54h]
.text:00000CE0                 jbe     loc_DA6
.text:00000CE6                 mov     eax, [ebp+this]
.text:00000CE9                 mov     ecx, [ebp+this]
.text:00000CEC                 mov     edx, [eax+5Ch]
.text:00000CEF                 cmp     edx, [ecx+2Ch]
.text:00000CF2                 jbe     short loc_D08
.text:00000CF4                 mov     eax, [ebp+this]
.text:00000CF7                 mov     dword ptr [eax+5Ch], 0
.text:00000CFE                 mov     eax, 80004005h
.text:00000D03                 jmp     loc_E1C
.text:00000D08 ; ---------------------------------------------------------------------------
.text:00000D08
.text:00000D08 loc_D08:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void)+C2j
.text:00000D08                 mov     ecx, [ebp+this]
.text:00000D0B                 movzx   edx, byte ptr [ecx+38h]
.text:00000D0F                 test    edx, edx
.text:00000D11                 jnz     short loc_D27
.text:00000D13                 mov     eax, [ebp+this]
.text:00000D16                 mov     dword ptr [eax+5Ch], 0
.text:00000D1D                 mov     eax, 1
.text:00000D22                 jmp     loc_E1C
.text:00000D27 ; ---------------------------------------------------------------------------
.text:00000D27
.text:00000D27 loc_D27:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void)+E1j
.text:00000D27                 jmp     short loc_D38
.text:00000D29 ; ---------------------------------------------------------------------------
.text:00000D29
.text:00000D29 loc_D29:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void)+126j
.text:00000D29                 mov     ecx, [ebp+this]
.text:00000D2C                 mov     edx, [ecx+54h]
.text:00000D2F                 add     edx, 1
.text:00000D32                 mov     eax, [ebp+this]
.text:00000D35                 mov     [eax+54h], edx
.text:00000D38
.text:00000D38 loc_D38:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void):loc_D27j
.text:00000D38                 mov     ecx, [ebp+this]
.text:00000D3B                 mov     edx, [ebp+this]
.text:00000D3E                 mov     eax, [ecx+54h]
.text:00000D41                 cmp     eax, [edx+5Ch]
.text:00000D44                 jnb     short loc_D58
.text:00000D46                 mov     ecx, [ebp+this]
.text:00000D49                 mov     edx, [ecx+28h]
.text:00000D4C                 mov     eax, [ebp+this]
.text:00000D4F                 mov     ecx, [eax+54h]
.text:00000D52                 mov     byte ptr [edx+ecx], 0
.text:00000D56                 jmp     short loc_D29
.text:00000D58 ; ---------------------------------------------------------------------------
.text:00000D58
.text:00000D58 loc_D58:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void)+114j
.text:00000D58                 mov     ecx, [ebp+this]
.text:00000D5B                 add     ecx, 78h ; 'x'
.text:00000D5E                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:00000D63                 mov     [ebp+var_20], eax
.text:00000D66                 mov     esi, esp
.text:00000D68                 mov     edx, [ebp+this]
.text:00000D6B                 mov     eax, [edx+54h]
.text:00000D6E                 push    eax
.text:00000D6F                 mov     ecx, [ebp+this]
.text:00000D72                 mov     edx, [ecx+28h]
.text:00000D75                 push    edx
.text:00000D76                 mov     eax, [ebp+var_20]
.text:00000D79                 push    eax
.text:00000D7A                 mov     ecx, [ebp+var_20]
.text:00000D7D                 mov     edx, [ecx]
.text:00000D7F                 mov     eax, [edx+10h]
.text:00000D82                 call    eax
.text:00000D84                 cmp     esi, esp
.text:00000D86                 call    __RTC_CheckEsp
.text:00000D8B                 mov     ecx, [ebp+this]
.text:00000D8E                 mov     [ecx+5Ch], eax
.text:00000D91                 mov     edx, [ebp+this]
.text:00000D94                 mov     eax, [ebp+this]
.text:00000D97                 mov     ecx, [edx+5Ch]
.text:00000D9A                 cmp     ecx, [eax+54h]
.text:00000D9D                 jz      short loc_DA6
.text:00000D9F                 mov     eax, 80004005h
.text:00000DA4                 jmp     short loc_E1C
.text:00000DA6 ; ---------------------------------------------------------------------------
.text:00000DA6
.text:00000DA6 loc_DA6:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void)+9Fj
.text:00000DA6                                         ; CFilterCoder::OutStreamFinish(void)+B0j ...
.text:00000DA6                 jmp     loc_C57
.text:00000DAB ; ---------------------------------------------------------------------------
.text:00000DAB
.text:00000DAB loc_DAB:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void)+4Cj
.text:00000DAB                 lea     ecx, [ebp+var_C]
.text:00000DAE                 call    ??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::CMyComPtr<IOutStreamFinish>(void)
.text:00000DB3                 lea     ecx, [ebp+var_C]
.text:00000DB6                 call    ??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator&(void)
.text:00000DBB                 push    eax
.text:00000DBC                 push    offset _IID_IOutStreamFinish
.text:00000DC1                 mov     ecx, [ebp+this]
.text:00000DC4                 add     ecx, 50h ; 'P'
.text:00000DC7                 call    ??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z ; CMyComPtr<ISequentialOutStream>::QueryInterface<IOutStreamFinish>(_GUID const &,IOutStreamFinish * *)
.text:00000DCC                 lea     ecx, [ebp+var_C]
.text:00000DCF                 call    ??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator IOutStreamFinish *(void)
.text:00000DD4                 test    eax, eax
.text:00000DD6                 jz      short loc_E0A
.text:00000DD8                 lea     ecx, [ebp+var_C]
.text:00000DDB                 call    ??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator->(void)
.text:00000DE0                 mov     [ebp+var_24], eax
.text:00000DE3                 mov     edx, [ebp+var_24]
.text:00000DE6                 mov     eax, [edx]
.text:00000DE8                 mov     esi, esp
.text:00000DEA                 mov     ecx, [ebp+var_24]
.text:00000DED                 push    ecx
.text:00000DEE                 mov     edx, [eax+0Ch]
.text:00000DF1                 call    edx
.text:00000DF3                 cmp     esi, esp
.text:00000DF5                 call    __RTC_CheckEsp
.text:00000DFA                 mov     [ebp+var_14], eax
.text:00000DFD                 lea     ecx, [ebp+var_C]
.text:00000E00                 call    ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>(void)
.text:00000E05                 mov     eax, [ebp+var_14]
.text:00000E08                 jmp     short loc_E1C
.text:00000E0A ; ---------------------------------------------------------------------------
.text:00000E0A
.text:00000E0A loc_E0A:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void)+1A6j
.text:00000E0A                 mov     [ebp+var_18], 0
.text:00000E11                 lea     ecx, [ebp+var_C]
.text:00000E14                 call    ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>(void)
.text:00000E19                 mov     eax, [ebp+var_18]
.text:00000E1C
.text:00000E1C loc_E1C:                                ; CODE XREF: CFilterCoder::OutStreamFinish(void)+3Ej
.text:00000E1C                                         ; CFilterCoder::OutStreamFinish(void)+D3j ...
.text:00000E1C                 push    edx
.text:00000E1D                 mov     ecx, ebp
.text:00000E1F                 push    eax
.text:00000E20                 lea     edx, $LN19_0
.text:00000E26                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000E2B                 pop     eax
.text:00000E2C                 pop     edx
.text:00000E2D                 pop     esi
.text:00000E2E                 add     esp, 24h
.text:00000E31                 cmp     ebp, esp
.text:00000E33                 call    __RTC_CheckEsp
.text:00000E38                 mov     esp, ebp
.text:00000E3A                 pop     ebp
.text:00000E3B                 retn    4
.text:00000E3B ?OutStreamFinish@CFilterCoder@@UAGJXZ endp
.text:00000E3B
.text:00000E3B ; ---------------------------------------------------------------------------
.text:00000E3E                 align 10h
.text:00000E40 $LN19_0         dd 1                    ; DATA XREF: CFilterCoder::OutStreamFinish(void)+1F0o
.text:00000E44                 dd offset $LN18_0
.text:00000E48 $LN18_0         dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000E44o
.text:00000E50                 dd offset $LN17_0       ; "finish"
.text:00000E54 $LN17_0         db 'finish',0           ; DATA XREF: .text:00000E50o
.text:00000E5B                 align 10h
.text:00000E60
.text:00000E60 ; =============== S U B R O U T I N E =======================================
.text:00000E60
.text:00000E60 ; Attributes: bp-based frame
.text:00000E60
.text:00000E60 ; __int32 __stdcall CFilterCoder::InitEncoder(CFilterCoder *this)
.text:00000E60                 public ?InitEncoder@CFilterCoder@@UAGJXZ
.text:00000E60 ?InitEncoder@CFilterCoder@@UAGJXZ proc near ; DATA XREF: .rdata:00001744o
.text:00000E60
.text:00000E60 this            = dword ptr  8
.text:00000E60
.text:00000E60                 push    ebp
.text:00000E61                 mov     ebp, esp
.text:00000E63                 mov     ecx, [ebp+this]
.text:00000E66                 sub     ecx, 8          ; this
.text:00000E69                 call    ?InitSpecVars@CFilterCoder@@AAEXXZ ; CFilterCoder::InitSpecVars(void)
.text:00000E6E                 mov     ecx, [ebp+this]
.text:00000E71                 sub     ecx, 8          ; this
.text:00000E74                 call    ?Init_and_Alloc@CFilterCoder@@AAEJXZ ; CFilterCoder::Init_and_Alloc(void)
.text:00000E79                 cmp     ebp, esp
.text:00000E7B                 call    __RTC_CheckEsp
.text:00000E80                 pop     ebp
.text:00000E81                 retn    4
.text:00000E81 ?InitEncoder@CFilterCoder@@UAGJXZ endp
.text:00000E81
.text:00000E81 ; ---------------------------------------------------------------------------
.text:00000E84                 align 10h
.text:00000E90
.text:00000E90 ; =============== S U B R O U T I N E =======================================
.text:00000E90
.text:00000E90 ; Attributes: bp-based frame
.text:00000E90
.text:00000E90 ; __int32 __thiscall CFilterCoder::Init_NoSubFilterInit(CFilterCoder *__hidden this)
.text:00000E90                 public ?Init_NoSubFilterInit@CFilterCoder@@QAEJXZ
.text:00000E90 ?Init_NoSubFilterInit@CFilterCoder@@QAEJXZ proc near
.text:00000E90
.text:00000E90 var_4           = dword ptr -4
.text:00000E90
.text:00000E90                 push    ebp
.text:00000E91                 mov     ebp, esp
.text:00000E93                 push    ecx
.text:00000E94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E9B                 mov     [ebp+var_4], ecx
.text:00000E9E                 mov     ecx, [ebp+var_4] ; this
.text:00000EA1                 call    ?InitSpecVars@CFilterCoder@@AAEXXZ ; CFilterCoder::InitSpecVars(void)
.text:00000EA6                 mov     ecx, [ebp+var_4] ; this
.text:00000EA9                 call    ?Alloc@CFilterCoder@@AAEJXZ ; CFilterCoder::Alloc(void)
.text:00000EAE                 add     esp, 4
.text:00000EB1                 cmp     ebp, esp
.text:00000EB3                 call    __RTC_CheckEsp
.text:00000EB8                 mov     esp, ebp
.text:00000EBA                 pop     ebp
.text:00000EBB                 retn
.text:00000EBB ?Init_NoSubFilterInit@CFilterCoder@@QAEJXZ endp
.text:00000EBB
.text:00000EBB ; ---------------------------------------------------------------------------
.text:00000EBC                 align 10h
.text:00000EC0
.text:00000EC0 ; =============== S U B R O U T I N E =======================================
.text:00000EC0
.text:00000EC0 ; Attributes: bp-based frame
.text:00000EC0
.text:00000EC0 ; __int32 __stdcall CFilterCoder::SetOutStreamSize(CFilterCoder *this, const unsigned __int64 *)
.text:00000EC0                 public ?SetOutStreamSize@CFilterCoder@@UAGJPB_K@Z
.text:00000EC0 ?SetOutStreamSize@CFilterCoder@@UAGJPB_K@Z proc near
.text:00000EC0                                         ; DATA XREF: .rdata:00001758o
.text:00000EC0
.text:00000EC0 this            = dword ptr  8
.text:00000EC0 arg_4           = dword ptr  0Ch
.text:00000EC0
.text:00000EC0                 push    ebp
.text:00000EC1                 mov     ebp, esp
.text:00000EC3                 mov     ecx, [ebp+this]
.text:00000EC6                 sub     ecx, 4          ; this
.text:00000EC9                 call    ?InitSpecVars@CFilterCoder@@AAEXXZ ; CFilterCoder::InitSpecVars(void)
.text:00000ECE                 cmp     [ebp+arg_4], 0
.text:00000ED2                 jz      short loc_EEC
.text:00000ED4                 mov     eax, [ebp+this]
.text:00000ED7                 mov     ecx, [ebp+arg_4]
.text:00000EDA                 mov     edx, [ecx]
.text:00000EDC                 mov     [eax+54h], edx
.text:00000EDF                 mov     ecx, [ecx+4]
.text:00000EE2                 mov     [eax+58h], ecx
.text:00000EE5                 mov     edx, [ebp+this]
.text:00000EE8                 mov     byte ptr [edx+51h], 1
.text:00000EEC
.text:00000EEC loc_EEC:                                ; CODE XREF: CFilterCoder::SetOutStreamSize(unsigned __int64 const *)+12j
.text:00000EEC                 mov     ecx, [ebp+this]
.text:00000EEF                 sub     ecx, 4          ; this
.text:00000EF2                 call    ?Init_and_Alloc@CFilterCoder@@AAEJXZ ; CFilterCoder::Init_and_Alloc(void)
.text:00000EF7                 cmp     ebp, esp
.text:00000EF9                 call    __RTC_CheckEsp
.text:00000EFE                 pop     ebp
.text:00000EFF                 retn    8
.text:00000EFF ?SetOutStreamSize@CFilterCoder@@UAGJPB_K@Z endp
.text:00000EFF
.text:00000EFF ; ---------------------------------------------------------------------------
.text:00000F02                 align 10h
.text:00000F10
.text:00000F10 ; =============== S U B R O U T I N E =======================================
.text:00000F10
.text:00000F10 ; Attributes: bp-based frame
.text:00000F10
.text:00000F10 ; __int32 __stdcall CFilterCoder::SetInStream(CFilterCoder *this, struct ISequentialInStream *)
.text:00000F10                 public ?SetInStream@CFilterCoder@@UAGJPAUISequentialInStream@@@Z
.text:00000F10 ?SetInStream@CFilterCoder@@UAGJPAUISequentialInStream@@@Z proc near
.text:00000F10                                         ; DATA XREF: .rdata:0000172Co
.text:00000F10
.text:00000F10 this            = dword ptr  8
.text:00000F10 arg_4           = dword ptr  0Ch
.text:00000F10
.text:00000F10                 push    ebp
.text:00000F11                 mov     ebp, esp
.text:00000F13                 mov     eax, [ebp+arg_4]
.text:00000F16                 push    eax
.text:00000F17                 mov     ecx, [ebp+this]
.text:00000F1A                 add     ecx, 5Ch ; '\'
.text:00000F1D                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00000F22                 xor     eax, eax
.text:00000F24                 cmp     ebp, esp
.text:00000F26                 call    __RTC_CheckEsp
.text:00000F2B                 pop     ebp
.text:00000F2C                 retn    8
.text:00000F2C ?SetInStream@CFilterCoder@@UAGJPAUISequentialInStream@@@Z endp
.text:00000F2C
.text:00000F2C ; ---------------------------------------------------------------------------
.text:00000F2F                 align 10h
.text:00000F30
.text:00000F30 ; =============== S U B R O U T I N E =======================================
.text:00000F30
.text:00000F30 ; Attributes: bp-based frame
.text:00000F30
.text:00000F30 ; __int32 __stdcall CFilterCoder::ReleaseInStream(CFilterCoder *this)
.text:00000F30                 public ?ReleaseInStream@CFilterCoder@@UAGJXZ
.text:00000F30 ?ReleaseInStream@CFilterCoder@@UAGJXZ proc near ; DATA XREF: .rdata:00001730o
.text:00000F30
.text:00000F30 this            = dword ptr  8
.text:00000F30
.text:00000F30                 push    ebp
.text:00000F31                 mov     ebp, esp
.text:00000F33                 mov     ecx, [ebp+this]
.text:00000F36                 add     ecx, 5Ch ; '\'
.text:00000F39                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:00000F3E                 xor     eax, eax
.text:00000F40                 cmp     ebp, esp
.text:00000F42                 call    __RTC_CheckEsp
.text:00000F47                 pop     ebp
.text:00000F48                 retn    4
.text:00000F48 ?ReleaseInStream@CFilterCoder@@UAGJXZ endp
.text:00000F48
.text:00000F48 ; ---------------------------------------------------------------------------
.text:00000F4B                 align 10h
.text:00000F50
.text:00000F50 ; =============== S U B R O U T I N E =======================================
.text:00000F50
.text:00000F50 ; Attributes: bp-based frame
.text:00000F50
.text:00000F50 ; __int32 __stdcall CFilterCoder::Read(CFilterCoder *this, void *Dst, size_t Size, unsigned int *)
.text:00000F50                 public ?Read@CFilterCoder@@UAGJPAXIPAI@Z
.text:00000F50 ?Read@CFilterCoder@@UAGJPAXIPAI@Z proc near ; DATA XREF: .rdata:00001718o
.text:00000F50
.text:00000F50 var_38          = dword ptr -38h
.text:00000F50 var_34          = dword ptr -34h
.text:00000F50 var_30          = dword ptr -30h
.text:00000F50 var_2C          = dword ptr -2Ch
.text:00000F50 var_28          = dword ptr -28h
.text:00000F50 var_24          = dword ptr -24h
.text:00000F50 var_20          = dword ptr -20h
.text:00000F50 var_18          = dword ptr -18h
.text:00000F50 var_10          = dword ptr -10h
.text:00000F50 var_C           = dword ptr -0Ch
.text:00000F50 var_8           = dword ptr -8
.text:00000F50 var_4           = dword ptr -4
.text:00000F50 this            = dword ptr  8
.text:00000F50 Dst             = dword ptr  0Ch
.text:00000F50 Size            = dword ptr  10h
.text:00000F50 arg_C           = dword ptr  14h
.text:00000F50
.text:00000F50                 push    ebp
.text:00000F51                 mov     ebp, esp
.text:00000F53                 sub     esp, 38h
.text:00000F56                 push    esi
.text:00000F57                 push    edi
.text:00000F58                 lea     edi, [ebp+var_38]
.text:00000F5B                 mov     ecx, 0Eh
.text:00000F60                 mov     eax, 0CCCCCCCCh
.text:00000F65                 rep stosd
.text:00000F67                 cmp     [ebp+arg_C], 0
.text:00000F6B                 jz      short loc_F76
.text:00000F6D                 mov     eax, [ebp+arg_C]
.text:00000F70                 mov     dword ptr [eax], 0
.text:00000F76
.text:00000F76 loc_F76:                                ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+1Bj
.text:00000F76                                         ; CFilterCoder::Read(void *,uint,uint *)+217j ...
.text:00000F76                 cmp     [ebp+Size], 0
.text:00000F7A                 jz      loc_1231
.text:00000F80                 mov     ecx, [ebp+this]
.text:00000F83                 cmp     dword ptr [ecx+68h], 0
.text:00000F87                 jz      loc_104C
.text:00000F8D                 mov     edx, [ebp+this]
.text:00000F90                 mov     eax, [ebp+Size]
.text:00000F93                 cmp     eax, [edx+68h]
.text:00000F96                 jbe     short loc_FA1
.text:00000F98                 mov     ecx, [ebp+this]
.text:00000F9B                 mov     edx, [ecx+68h]
.text:00000F9E                 mov     [ebp+Size], edx
.text:00000FA1
.text:00000FA1 loc_FA1:                                ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+46j
.text:00000FA1                 mov     eax, [ebp+this]
.text:00000FA4                 movzx   ecx, byte ptr [eax+45h]
.text:00000FA8                 test    ecx, ecx
.text:00000FAA                 jz      short loc_FE7
.text:00000FAC                 mov     edx, [ebp+this]
.text:00000FAF                 mov     eax, [ebp+this]
.text:00000FB2                 mov     ecx, [edx+48h]
.text:00000FB5                 sub     ecx, [eax+50h]
.text:00000FB8                 mov     edx, [edx+4Ch]
.text:00000FBB                 sbb     edx, [eax+54h]
.text:00000FBE                 mov     [ebp+var_8], ecx
.text:00000FC1                 mov     [ebp+var_4], edx
.text:00000FC4                 mov     eax, [ebp+Size]
.text:00000FC7                 xor     ecx, ecx
.text:00000FC9                 mov     [ebp+var_2C], eax
.text:00000FCC                 mov     [ebp+var_28], ecx
.text:00000FCF                 mov     edx, [ebp+var_28]
.text:00000FD2                 cmp     edx, [ebp+var_4]
.text:00000FD5                 jb      short loc_FE7
.text:00000FD7                 ja      short loc_FE1
.text:00000FD9                 mov     eax, [ebp+var_2C]
.text:00000FDC                 cmp     eax, [ebp+var_8]
.text:00000FDF                 jbe     short loc_FE7
.text:00000FE1
.text:00000FE1 loc_FE1:                                ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+87j
.text:00000FE1                 mov     ecx, [ebp+var_8]
.text:00000FE4                 mov     [ebp+Size], ecx
.text:00000FE7
.text:00000FE7 loc_FE7:                                ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+5Aj
.text:00000FE7                                         ; CFilterCoder::Read(void *,uint,uint *)+85j ...
.text:00000FE7                 mov     edx, [ebp+Size]
.text:00000FEA                 push    edx             ; Size
.text:00000FEB                 mov     eax, [ebp+this]
.text:00000FEE                 mov     ecx, [eax+34h]
.text:00000FF1                 mov     edx, [ebp+this]
.text:00000FF4                 add     ecx, [edx+64h]
.text:00000FF7                 push    ecx             ; Src
.text:00000FF8                 mov     eax, [ebp+Dst]
.text:00000FFB                 push    eax             ; Dst
.text:00000FFC                 call    _memcpy
.text:00001001                 add     esp, 0Ch
.text:00001004                 mov     ecx, [ebp+this]
.text:00001007                 mov     edx, [ecx+64h]
.text:0000100A                 add     edx, [ebp+Size]
.text:0000100D                 mov     eax, [ebp+this]
.text:00001010                 mov     [eax+64h], edx
.text:00001013                 mov     ecx, [ebp+this]
.text:00001016                 mov     edx, [ecx+68h]
.text:00001019                 sub     edx, [ebp+Size]
.text:0000101C                 mov     eax, [ebp+this]
.text:0000101F                 mov     [eax+68h], edx
.text:00001022                 mov     ecx, [ebp+Size]
.text:00001025                 xor     edx, edx
.text:00001027                 mov     eax, [ebp+this]
.text:0000102A                 add     ecx, [eax+50h]
.text:0000102D                 adc     edx, [eax+54h]
.text:00001030                 mov     eax, [ebp+this]
.text:00001033                 mov     [eax+50h], ecx
.text:00001036                 mov     [eax+54h], edx
.text:00001039                 cmp     [ebp+arg_C], 0
.text:0000103D                 jz      short loc_1047
.text:0000103F                 mov     ecx, [ebp+arg_C]
.text:00001042                 mov     edx, [ebp+Size]
.text:00001045                 mov     [ecx], edx
.text:00001047
.text:00001047 loc_1047:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+EDj
.text:00001047                 jmp     loc_1231
.text:0000104C ; ---------------------------------------------------------------------------
.text:0000104C
.text:0000104C loc_104C:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+37j
.text:0000104C                 mov     eax, [ebp+this]
.text:0000104F                 cmp     dword ptr [eax+64h], 0
.text:00001053                 jz      short loc_10B1
.text:00001055                 mov     ecx, [ebp+this]
.text:00001058                 mov     edx, [ebp+this]
.text:0000105B                 mov     eax, [ecx+60h]
.text:0000105E                 sub     eax, [edx+64h]
.text:00001061                 mov     [ebp+var_C], eax
.text:00001064                 mov     [ebp+var_10], 0
.text:0000106B                 jmp     short loc_1076
.text:0000106D ; ---------------------------------------------------------------------------
.text:0000106D
.text:0000106D loc_106D:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+14Cj
.text:0000106D                 mov     ecx, [ebp+var_10]
.text:00001070                 add     ecx, 1
.text:00001073                 mov     [ebp+var_10], ecx
.text:00001076
.text:00001076 loc_1076:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+11Bj
.text:00001076                 mov     edx, [ebp+var_10]
.text:00001079                 cmp     edx, [ebp+var_C]
.text:0000107C                 jnb     short loc_109E
.text:0000107E                 mov     eax, [ebp+this]
.text:00001081                 mov     ecx, [eax+64h]
.text:00001084                 add     ecx, [ebp+var_10]
.text:00001087                 mov     edx, [ebp+this]
.text:0000108A                 mov     eax, [edx+34h]
.text:0000108D                 mov     edx, [ebp+this]
.text:00001090                 mov     edx, [edx+34h]
.text:00001093                 mov     esi, [ebp+var_10]
.text:00001096                 mov     al, [ecx+eax]
.text:00001099                 mov     [edx+esi], al
.text:0000109C                 jmp     short loc_106D
.text:0000109E ; ---------------------------------------------------------------------------
.text:0000109E
.text:0000109E loc_109E:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+12Cj
.text:0000109E                 mov     ecx, [ebp+this]
.text:000010A1                 mov     edx, [ebp+var_C]
.text:000010A4                 mov     [ecx+60h], edx
.text:000010A7                 mov     eax, [ebp+this]
.text:000010AA                 mov     dword ptr [eax+64h], 0
.text:000010B1
.text:000010B1 loc_10B1:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+103j
.text:000010B1                 mov     ecx, [ebp+this]
.text:000010B4                 mov     edx, [ebp+this]
.text:000010B7                 mov     eax, [ecx+38h]
.text:000010BA                 sub     eax, [edx+60h]
.text:000010BD                 mov     [ebp+var_18], eax
.text:000010C0                 lea     ecx, [ebp+var_18]
.text:000010C3                 push    ecx             ; unsigned int *
.text:000010C4                 mov     edx, [ebp+this]
.text:000010C7                 mov     eax, [edx+34h]
.text:000010CA                 mov     ecx, [ebp+this]
.text:000010CD                 add     eax, [ecx+60h]
.text:000010D0                 push    eax             ; void *
.text:000010D1                 mov     ecx, [ebp+this]
.text:000010D4                 add     ecx, 58h ; 'X'
.text:000010D7                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:000010DC                 push    eax             ; struct ISequentialInStream *
.text:000010DD                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:000010E2                 mov     [ebp+var_20], eax
.text:000010E5                 mov     edx, [ebp+this]
.text:000010E8                 mov     eax, [edx+60h]
.text:000010EB                 add     eax, [ebp+var_18]
.text:000010EE                 mov     ecx, [ebp+this]
.text:000010F1                 mov     [ecx+60h], eax
.text:000010F4                 mov     edx, [ebp+var_20]
.text:000010F7                 mov     [ebp+var_24], edx
.text:000010FA                 cmp     [ebp+var_24], 0
.text:000010FE                 jz      short loc_1108
.text:00001100                 mov     eax, [ebp+var_24]
.text:00001103                 jmp     loc_1233
.text:00001108 ; ---------------------------------------------------------------------------
.text:00001108
.text:00001108 loc_1108:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+1AEj
.text:00001108                 mov     ecx, [ebp+this]
.text:0000110B                 add     ecx, 84h ; 'ä'
.text:00001111                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:00001116                 mov     [ebp+var_30], eax
.text:00001119                 mov     esi, esp
.text:0000111B                 mov     eax, [ebp+this]
.text:0000111E                 mov     ecx, [eax+60h]
.text:00001121                 push    ecx
.text:00001122                 mov     edx, [ebp+this]
.text:00001125                 mov     eax, [edx+34h]
.text:00001128                 push    eax
.text:00001129                 mov     ecx, [ebp+var_30]
.text:0000112C                 push    ecx
.text:0000112D                 mov     edx, [ebp+var_30]
.text:00001130                 mov     eax, [edx]
.text:00001132                 mov     ecx, [eax+10h]
.text:00001135                 call    ecx
.text:00001137                 cmp     esi, esp
.text:00001139                 call    __RTC_CheckEsp
.text:0000113E                 mov     edx, [ebp+this]
.text:00001141                 mov     [edx+68h], eax
.text:00001144                 mov     eax, [ebp+this]
.text:00001147                 cmp     dword ptr [eax+68h], 0
.text:0000114B                 jnz     short loc_116C
.text:0000114D                 mov     ecx, [ebp+this]
.text:00001150                 cmp     dword ptr [ecx+60h], 0
.text:00001154                 jnz     short loc_115B
.text:00001156                 jmp     loc_1231
.text:0000115B ; ---------------------------------------------------------------------------
.text:0000115B
.text:0000115B loc_115B:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+204j
.text:0000115B                 mov     edx, [ebp+this]
.text:0000115E                 mov     eax, [ebp+this]
.text:00001161                 mov     ecx, [eax+60h]
.text:00001164                 mov     [edx+68h], ecx
.text:00001167                 jmp     loc_F76
.text:0000116C ; ---------------------------------------------------------------------------
.text:0000116C
.text:0000116C loc_116C:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+1FBj
.text:0000116C                 mov     edx, [ebp+this]
.text:0000116F                 mov     eax, [ebp+this]
.text:00001172                 mov     ecx, [edx+68h]
.text:00001175                 cmp     ecx, [eax+60h]
.text:00001178                 jbe     loc_122C
.text:0000117E                 mov     edx, [ebp+this]
.text:00001181                 mov     eax, [ebp+this]
.text:00001184                 mov     ecx, [edx+68h]
.text:00001187                 cmp     ecx, [eax+38h]
.text:0000118A                 jbe     short loc_1196
.text:0000118C                 mov     eax, 80004005h
.text:00001191                 jmp     loc_1233
.text:00001196 ; ---------------------------------------------------------------------------
.text:00001196
.text:00001196 loc_1196:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+23Aj
.text:00001196                 mov     edx, [ebp+this]
.text:00001199                 movzx   eax, byte ptr [edx+44h]
.text:0000119D                 test    eax, eax
.text:0000119F                 jnz     short loc_11AB
.text:000011A1                 mov     eax, 1
.text:000011A6                 jmp     loc_1233
.text:000011AB ; ---------------------------------------------------------------------------
.text:000011AB
.text:000011AB loc_11AB:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+24Fj
.text:000011AB                                         ; CFilterCoder::Read(void *,uint,uint *)+289j
.text:000011AB                 mov     ecx, [ebp+this]
.text:000011AE                 mov     edx, [ecx+34h]
.text:000011B1                 mov     eax, [ebp+this]
.text:000011B4                 mov     ecx, [eax+60h]
.text:000011B7                 mov     byte ptr [edx+ecx], 0
.text:000011BB                 mov     edx, [ebp+this]
.text:000011BE                 mov     eax, [edx+60h]
.text:000011C1                 add     eax, 1
.text:000011C4                 mov     [ebp+var_34], eax
.text:000011C7                 mov     ecx, [ebp+this]
.text:000011CA                 mov     edx, [ebp+var_34]
.text:000011CD                 mov     [ecx+60h], edx
.text:000011D0                 mov     eax, [ebp+this]
.text:000011D3                 mov     ecx, [ebp+var_34]
.text:000011D6                 cmp     ecx, [eax+68h]
.text:000011D9                 jnz     short loc_11AB
.text:000011DB                 mov     ecx, [ebp+this]
.text:000011DE                 add     ecx, 84h ; 'ä'
.text:000011E4                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:000011E9                 mov     [ebp+var_38], eax
.text:000011EC                 mov     esi, esp
.text:000011EE                 mov     edx, [ebp+this]
.text:000011F1                 mov     eax, [edx+68h]
.text:000011F4                 push    eax
.text:000011F5                 mov     ecx, [ebp+this]
.text:000011F8                 mov     edx, [ecx+34h]
.text:000011FB                 push    edx
.text:000011FC                 mov     eax, [ebp+var_38]
.text:000011FF                 push    eax
.text:00001200                 mov     ecx, [ebp+var_38]
.text:00001203                 mov     edx, [ecx]
.text:00001205                 mov     eax, [edx+10h]
.text:00001208                 call    eax
.text:0000120A                 cmp     esi, esp
.text:0000120C                 call    __RTC_CheckEsp
.text:00001211                 mov     ecx, [ebp+this]
.text:00001214                 mov     [ecx+68h], eax
.text:00001217                 mov     edx, [ebp+this]
.text:0000121A                 mov     eax, [ebp+this]
.text:0000121D                 mov     ecx, [edx+68h]
.text:00001220                 cmp     ecx, [eax+60h]
.text:00001223                 jz      short loc_122C
.text:00001225                 mov     eax, 80004005h
.text:0000122A                 jmp     short loc_1233
.text:0000122C ; ---------------------------------------------------------------------------
.text:0000122C
.text:0000122C loc_122C:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+228j
.text:0000122C                                         ; CFilterCoder::Read(void *,uint,uint *)+2D3j
.text:0000122C                 jmp     loc_F76
.text:00001231 ; ---------------------------------------------------------------------------
.text:00001231
.text:00001231 loc_1231:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+2Aj
.text:00001231                                         ; CFilterCoder::Read(void *,uint,uint *):loc_1047j ...
.text:00001231                 xor     eax, eax
.text:00001233
.text:00001233 loc_1233:                               ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+1B3j
.text:00001233                                         ; CFilterCoder::Read(void *,uint,uint *)+241j ...
.text:00001233                 push    edx
.text:00001234                 mov     ecx, ebp
.text:00001236                 push    eax
.text:00001237                 lea     edx, $LN29
.text:0000123D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001242                 pop     eax
.text:00001243                 pop     edx
.text:00001244                 pop     edi
.text:00001245                 pop     esi
.text:00001246                 add     esp, 38h
.text:00001249                 cmp     ebp, esp
.text:0000124B                 call    __RTC_CheckEsp
.text:00001250                 mov     esp, ebp
.text:00001252                 pop     ebp
.text:00001253                 retn    10h
.text:00001253 ?Read@CFilterCoder@@UAGJPAXIPAI@Z endp
.text:00001253
.text:00001253 ; ---------------------------------------------------------------------------
.text:00001256                 align 4
.text:00001258 $LN29           dd 1                    ; DATA XREF: CFilterCoder::Read(void *,uint,uint *)+2E7o
.text:0000125C                 dd offset $LN28
.text:00001260 $LN28           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:0000125Co
.text:00001268                 dd offset $LN27         ; "readSize"
.text:0000126C $LN27           db 'readSize',0         ; DATA XREF: .text:00001268o
.text:00001275                 align 10h
.text:00001280
.text:00001280 ; =============== S U B R O U T I N E =======================================
.text:00001280
.text:00001280 ; Attributes: bp-based frame
.text:00001280
.text:00001280 ; __int32 __stdcall CFilterCoder::CryptoSetPassword(CFilterCoder *this, const unsigned __int8 *, unsigned int)
.text:00001280                 public ?CryptoSetPassword@CFilterCoder@@UAGJPBEI@Z
.text:00001280 ?CryptoSetPassword@CFilterCoder@@UAGJPBEI@Z proc near
.text:00001280                                         ; DATA XREF: .rdata:000016ACo
.text:00001280
.text:00001280 var_4           = dword ptr -4
.text:00001280 this            = dword ptr  8
.text:00001280 arg_4           = dword ptr  0Ch
.text:00001280 arg_8           = dword ptr  10h
.text:00001280
.text:00001280                 push    ebp
.text:00001281                 mov     ebp, esp
.text:00001283                 push    ecx
.text:00001284                 push    esi
.text:00001285                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000128C                 mov     ecx, [ebp+this]
.text:0000128F                 add     ecx, 58h ; 'X'
.text:00001292                 call    ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->(void)
.text:00001297                 mov     [ebp+var_4], eax
.text:0000129A                 mov     esi, esp
.text:0000129C                 mov     eax, [ebp+arg_8]
.text:0000129F                 push    eax
.text:000012A0                 mov     ecx, [ebp+arg_4]
.text:000012A3                 push    ecx
.text:000012A4                 mov     edx, [ebp+var_4]
.text:000012A7                 push    edx
.text:000012A8                 mov     eax, [ebp+var_4]
.text:000012AB                 mov     ecx, [eax]
.text:000012AD                 mov     edx, [ecx+0Ch]
.text:000012B0                 call    edx
.text:000012B2                 cmp     esi, esp
.text:000012B4                 call    __RTC_CheckEsp
.text:000012B9                 pop     esi
.text:000012BA                 add     esp, 4
.text:000012BD                 cmp     ebp, esp
.text:000012BF                 call    __RTC_CheckEsp
.text:000012C4                 mov     esp, ebp
.text:000012C6                 pop     ebp
.text:000012C7                 retn    0Ch
.text:000012C7 ?CryptoSetPassword@CFilterCoder@@UAGJPBEI@Z endp
.text:000012C7
.text:000012C7 ; ---------------------------------------------------------------------------
.text:000012CA                 align 10h
.text:000012D0
.text:000012D0 ; =============== S U B R O U T I N E =======================================
.text:000012D0
.text:000012D0 ; Attributes: bp-based frame
.text:000012D0
.text:000012D0 ; __int32 __stdcall CFilterCoder::SetKey(CFilterCoder *this, const unsigned __int8 *, unsigned int)
.text:000012D0                 public ?SetKey@CFilterCoder@@UAGJPBEI@Z
.text:000012D0 ?SetKey@CFilterCoder@@UAGJPBEI@Z proc near ; DATA XREF: .rdata:00001694o
.text:000012D0
.text:000012D0 var_4           = dword ptr -4
.text:000012D0 this            = dword ptr  8
.text:000012D0 arg_4           = dword ptr  0Ch
.text:000012D0 arg_8           = dword ptr  10h
.text:000012D0
.text:000012D0                 push    ebp
.text:000012D1                 mov     ebp, esp
.text:000012D3                 push    ecx
.text:000012D4                 push    esi
.text:000012D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012DC                 mov     ecx, [ebp+this]
.text:000012DF                 add     ecx, 58h ; 'X'
.text:000012E2                 call    ??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator->(void)
.text:000012E7                 mov     [ebp+var_4], eax
.text:000012EA                 mov     esi, esp
.text:000012EC                 mov     eax, [ebp+arg_8]
.text:000012EF                 push    eax
.text:000012F0                 mov     ecx, [ebp+arg_4]
.text:000012F3                 push    ecx
.text:000012F4                 mov     edx, [ebp+var_4]
.text:000012F7                 push    edx
.text:000012F8                 mov     eax, [ebp+var_4]
.text:000012FB                 mov     ecx, [eax]
.text:000012FD                 mov     edx, [ecx+0Ch]
.text:00001300                 call    edx
.text:00001302                 cmp     esi, esp
.text:00001304                 call    __RTC_CheckEsp
.text:00001309                 pop     esi
.text:0000130A                 add     esp, 4
.text:0000130D                 cmp     ebp, esp
.text:0000130F                 call    __RTC_CheckEsp
.text:00001314                 mov     esp, ebp
.text:00001316                 pop     ebp
.text:00001317                 retn    0Ch
.text:00001317 ?SetKey@CFilterCoder@@UAGJPBEI@Z endp
.text:00001317
.text:00001317 ; ---------------------------------------------------------------------------
.text:0000131A                 align 10h
.text:00001320
.text:00001320 ; =============== S U B R O U T I N E =======================================
.text:00001320
.text:00001320 ; Attributes: bp-based frame
.text:00001320
.text:00001320 ; __int32 __stdcall CFilterCoder::SetInitVector(CFilterCoder *this, const unsigned __int8 *, unsigned int)
.text:00001320                 public ?SetInitVector@CFilterCoder@@UAGJPBEI@Z
.text:00001320 ?SetInitVector@CFilterCoder@@UAGJPBEI@Z proc near
.text:00001320                                         ; DATA XREF: .rdata:00001698o
.text:00001320
.text:00001320 var_4           = dword ptr -4
.text:00001320 this            = dword ptr  8
.text:00001320 arg_4           = dword ptr  0Ch
.text:00001320 arg_8           = dword ptr  10h
.text:00001320
.text:00001320                 push    ebp
.text:00001321                 mov     ebp, esp
.text:00001323                 push    ecx
.text:00001324                 push    esi
.text:00001325                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000132C                 mov     ecx, [ebp+this]
.text:0000132F                 add     ecx, 58h ; 'X'
.text:00001332                 call    ??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator->(void)
.text:00001337                 mov     [ebp+var_4], eax
.text:0000133A                 mov     esi, esp
.text:0000133C                 mov     eax, [ebp+arg_8]
.text:0000133F                 push    eax
.text:00001340                 mov     ecx, [ebp+arg_4]
.text:00001343                 push    ecx
.text:00001344                 mov     edx, [ebp+var_4]
.text:00001347                 push    edx
.text:00001348                 mov     eax, [ebp+var_4]
.text:0000134B                 mov     ecx, [eax]
.text:0000134D                 mov     edx, [ecx+10h]
.text:00001350                 call    edx
.text:00001352                 cmp     esi, esp
.text:00001354                 call    __RTC_CheckEsp
.text:00001359                 pop     esi
.text:0000135A                 add     esp, 4
.text:0000135D                 cmp     ebp, esp
.text:0000135F                 call    __RTC_CheckEsp
.text:00001364                 mov     esp, ebp
.text:00001366                 pop     ebp
.text:00001367                 retn    0Ch
.text:00001367 ?SetInitVector@CFilterCoder@@UAGJPBEI@Z endp
.text:00001367
.text:00001367 ; ---------------------------------------------------------------------------
.text:0000136A                 align 10h
.text:00001370
.text:00001370 ; =============== S U B R O U T I N E =======================================
.text:00001370
.text:00001370 ; Attributes: bp-based frame
.text:00001370
.text:00001370 ; __int32 __stdcall CFilterCoder::SetCoderProperties(CFilterCoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:00001370                 public ?SetCoderProperties@CFilterCoder@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:00001370 ?SetCoderProperties@CFilterCoder@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:00001370                                         ; DATA XREF: .rdata:00001680o
.text:00001370
.text:00001370 var_4           = dword ptr -4
.text:00001370 this            = dword ptr  8
.text:00001370 arg_4           = dword ptr  0Ch
.text:00001370 arg_8           = dword ptr  10h
.text:00001370 arg_C           = dword ptr  14h
.text:00001370
.text:00001370                 push    ebp
.text:00001371                 mov     ebp, esp
.text:00001373                 push    ecx
.text:00001374                 push    esi
.text:00001375                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000137C                 mov     ecx, [ebp+this]
.text:0000137F                 add     ecx, 58h ; 'X'
.text:00001382                 call    ??C?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator->(void)
.text:00001387                 mov     [ebp+var_4], eax
.text:0000138A                 mov     esi, esp
.text:0000138C                 mov     eax, [ebp+arg_C]
.text:0000138F                 push    eax
.text:00001390                 mov     ecx, [ebp+arg_8]
.text:00001393                 push    ecx
.text:00001394                 mov     edx, [ebp+arg_4]
.text:00001397                 push    edx
.text:00001398                 mov     eax, [ebp+var_4]
.text:0000139B                 push    eax
.text:0000139C                 mov     ecx, [ebp+var_4]
.text:0000139F                 mov     edx, [ecx]
.text:000013A1                 mov     eax, [edx+0Ch]
.text:000013A4                 call    eax
.text:000013A6                 cmp     esi, esp
.text:000013A8                 call    __RTC_CheckEsp
.text:000013AD                 pop     esi
.text:000013AE                 add     esp, 4
.text:000013B1                 cmp     ebp, esp
.text:000013B3                 call    __RTC_CheckEsp
.text:000013B8                 mov     esp, ebp
.text:000013BA                 pop     ebp
.text:000013BB                 retn    10h
.text:000013BB ?SetCoderProperties@CFilterCoder@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:000013BB
.text:000013BB ; ---------------------------------------------------------------------------
.text:000013BE                 align 10h
.text:000013C0
.text:000013C0 ; =============== S U B R O U T I N E =======================================
.text:000013C0
.text:000013C0 ; Attributes: bp-based frame
.text:000013C0
.text:000013C0 ; __int32 __stdcall CFilterCoder::WriteCoderProperties(CFilterCoder *this, struct ISequentialOutStream *)
.text:000013C0                 public ?WriteCoderProperties@CFilterCoder@@UAGJPAUISequentialOutStream@@@Z
.text:000013C0 ?WriteCoderProperties@CFilterCoder@@UAGJPAUISequentialOutStream@@@Z proc near
.text:000013C0                                         ; DATA XREF: .rdata:0000166Co
.text:000013C0
.text:000013C0 var_4           = dword ptr -4
.text:000013C0 this            = dword ptr  8
.text:000013C0 arg_4           = dword ptr  0Ch
.text:000013C0
.text:000013C0                 push    ebp
.text:000013C1                 mov     ebp, esp
.text:000013C3                 push    ecx
.text:000013C4                 push    esi
.text:000013C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013CC                 mov     ecx, [ebp+this]
.text:000013CF                 add     ecx, 58h ; 'X'
.text:000013D2                 call    ??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator->(void)
.text:000013D7                 mov     [ebp+var_4], eax
.text:000013DA                 mov     esi, esp
.text:000013DC                 mov     eax, [ebp+arg_4]
.text:000013DF                 push    eax
.text:000013E0                 mov     ecx, [ebp+var_4]
.text:000013E3                 push    ecx
.text:000013E4                 mov     edx, [ebp+var_4]
.text:000013E7                 mov     eax, [edx]
.text:000013E9                 mov     ecx, [eax+0Ch]
.text:000013EC                 call    ecx
.text:000013EE                 cmp     esi, esp
.text:000013F0                 call    __RTC_CheckEsp
.text:000013F5                 pop     esi
.text:000013F6                 add     esp, 4
.text:000013F9                 cmp     ebp, esp
.text:000013FB                 call    __RTC_CheckEsp
.text:00001400                 mov     esp, ebp
.text:00001402                 pop     ebp
.text:00001403                 retn    8
.text:00001403 ?WriteCoderProperties@CFilterCoder@@UAGJPAUISequentialOutStream@@@Z endp
.text:00001403
.text:00001403 ; ---------------------------------------------------------------------------
.text:00001406                 align 10h
.text:00001410
.text:00001410 ; =============== S U B R O U T I N E =======================================
.text:00001410
.text:00001410 ; Attributes: bp-based frame
.text:00001410
.text:00001410 ; __int32 __stdcall CFilterCoder::ResetInitVector(CFilterCoder *this)
.text:00001410                 public ?ResetInitVector@CFilterCoder@@UAGJXZ
.text:00001410 ?ResetInitVector@CFilterCoder@@UAGJXZ proc near ; DATA XREF: .rdata:00001658o
.text:00001410
.text:00001410 var_4           = dword ptr -4
.text:00001410 this            = dword ptr  8
.text:00001410
.text:00001410                 push    ebp
.text:00001411                 mov     ebp, esp
.text:00001413                 push    ecx
.text:00001414                 push    esi
.text:00001415                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000141C                 mov     ecx, [ebp+this]
.text:0000141F                 add     ecx, 58h ; 'X'
.text:00001422                 call    ??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ ; CMyComPtr<ICryptoResetInitVector>::operator->(void)
.text:00001427                 mov     [ebp+var_4], eax
.text:0000142A                 mov     eax, [ebp+var_4]
.text:0000142D                 mov     ecx, [eax]
.text:0000142F                 mov     esi, esp
.text:00001431                 mov     edx, [ebp+var_4]
.text:00001434                 push    edx
.text:00001435                 mov     eax, [ecx+0Ch]
.text:00001438                 call    eax
.text:0000143A                 cmp     esi, esp
.text:0000143C                 call    __RTC_CheckEsp
.text:00001441                 pop     esi
.text:00001442                 add     esp, 4
.text:00001445                 cmp     ebp, esp
.text:00001447                 call    __RTC_CheckEsp
.text:0000144C                 mov     esp, ebp
.text:0000144E                 pop     ebp
.text:0000144F                 retn    4
.text:0000144F ?ResetInitVector@CFilterCoder@@UAGJXZ endp
.text:0000144F
.text:0000144F ; ---------------------------------------------------------------------------
.text:00001452                 align 10h
.text:00001460
.text:00001460 ; =============== S U B R O U T I N E =======================================
.text:00001460
.text:00001460 ; Attributes: bp-based frame
.text:00001460
.text:00001460 ; __int32 __stdcall CFilterCoder::SetDecoderProperties2(CFilterCoder *this, const unsigned __int8 *, unsigned int)
.text:00001460                 public ?SetDecoderProperties2@CFilterCoder@@UAGJPBEI@Z
.text:00001460 ?SetDecoderProperties2@CFilterCoder@@UAGJPBEI@Z proc near
.text:00001460                                         ; DATA XREF: .rdata:00001644o
.text:00001460
.text:00001460 var_4           = dword ptr -4
.text:00001460 this            = dword ptr  8
.text:00001460 arg_4           = dword ptr  0Ch
.text:00001460 arg_8           = dword ptr  10h
.text:00001460
.text:00001460                 push    ebp
.text:00001461                 mov     ebp, esp
.text:00001463                 push    ecx
.text:00001464                 push    esi
.text:00001465                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000146C                 mov     ecx, [ebp+this]
.text:0000146F                 add     ecx, 58h ; 'X'
.text:00001472                 call    ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->(void)
.text:00001477                 mov     [ebp+var_4], eax
.text:0000147A                 mov     esi, esp
.text:0000147C                 mov     eax, [ebp+arg_8]
.text:0000147F                 push    eax
.text:00001480                 mov     ecx, [ebp+arg_4]
.text:00001483                 push    ecx
.text:00001484                 mov     edx, [ebp+var_4]
.text:00001487                 push    edx
.text:00001488                 mov     eax, [ebp+var_4]
.text:0000148B                 mov     ecx, [eax]
.text:0000148D                 mov     edx, [ecx+0Ch]
.text:00001490                 call    edx
.text:00001492                 cmp     esi, esp
.text:00001494                 call    __RTC_CheckEsp
.text:00001499                 pop     esi
.text:0000149A                 add     esp, 4
.text:0000149D                 cmp     ebp, esp
.text:0000149F                 call    __RTC_CheckEsp
.text:000014A4                 mov     esp, ebp
.text:000014A6                 pop     ebp
.text:000014A7                 retn    0Ch
.text:000014A7 ?SetDecoderProperties2@CFilterCoder@@UAGJPBEI@Z endp
.text:000014A7
.text:000014A7 ; ---------------------------------------------------------------------------
.text:000014AA                 align 4
.text:000014AA _text           ends
.text:000014AA
.rtc$TMZ:000014AC ; ===========================================================================
.rtc$TMZ:000014AC
.rtc$TMZ:000014AC ; Segment type: Pure data
.rtc$TMZ:000014AC ; Segment permissions: Read
.rtc$TMZ:000014AC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000014AC                 assume cs:_rtc$TMZ
.rtc$TMZ:000014AC                 ;org 14ACh
.rtc$TMZ:000014AC ; COMDAT (pick any)
.rtc$TMZ:000014AC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000014AC _rtc$TMZ        ends
.rtc$TMZ:000014AC
.rtc$IMZ:000014B0 ; ===========================================================================
.rtc$IMZ:000014B0
.rtc$IMZ:000014B0 ; Segment type: Pure data
.rtc$IMZ:000014B0 ; Segment permissions: Read
.rtc$IMZ:000014B0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000014B0                 assume cs:_rtc$IMZ
.rtc$IMZ:000014B0                 ;org 14B0h
.rtc$IMZ:000014B0 ; COMDAT (pick any)
.rtc$IMZ:000014B0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000014B0 _rtc$IMZ        ends
.rtc$IMZ:000014B0
.text:000014B4 ; ===========================================================================
.text:000014B4
.text:000014B4 ; Segment type: Pure code
.text:000014B4 ; Segment permissions: Read/Execute
.text:000014B4 _text           segment para public 'CODE' use32
.text:000014B4                 assume cs:_text
.text:000014B4                 ;org 14B4h
.text:000014B4 ; COMDAT (pick any)
.text:000014B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000014B4
.text:000014B4 ; =============== S U B R O U T I N E =======================================
.text:000014B4
.text:000014B4 ; Attributes: bp-based frame
.text:000014B4
.text:000014B4 ; void __thiscall CAlignedMidBuffer::AllocAlignedMask(CAlignedMidBuffer *this, unsigned int, unsigned int)
.text:000014B4                 public ?AllocAlignedMask@CAlignedMidBuffer@@QAEXII@Z
.text:000014B4 ?AllocAlignedMask@CAlignedMidBuffer@@QAEXII@Z proc near
.text:000014B4                                         ; CODE XREF: CFilterCoder::Alloc(void)+77p
.text:000014B4
.text:000014B4 var_4           = dword ptr -4
.text:000014B4 arg_0           = dword ptr  8
.text:000014B4 arg_4           = dword ptr  0Ch
.text:000014B4
.text:000014B4                 push    ebp
.text:000014B5                 mov     ebp, esp
.text:000014B7                 push    ecx
.text:000014B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014BF                 mov     [ebp+var_4], ecx
.text:000014C2                 mov     eax, [ebp+var_4]
.text:000014C5                 mov     ecx, [eax]
.text:000014C7                 push    ecx
.text:000014C8                 call    _MidFree@4      ; MidFree(x)
.text:000014CD                 mov     edx, [ebp+var_4]
.text:000014D0                 mov     dword ptr [edx+4], 0
.text:000014D7                 mov     eax, [ebp+arg_0]
.text:000014DA                 add     eax, [ebp+arg_4]
.text:000014DD                 push    eax
.text:000014DE                 call    _MidAlloc@4     ; MidAlloc(x)
.text:000014E3                 mov     ecx, [ebp+var_4]
.text:000014E6                 mov     [ecx], eax
.text:000014E8                 mov     edx, [ebp+var_4]
.text:000014EB                 cmp     dword ptr [edx], 0
.text:000014EE                 jz      short loc_1505
.text:000014F0                 mov     eax, [ebp+var_4]
.text:000014F3                 mov     ecx, [eax]
.text:000014F5                 add     ecx, [ebp+arg_4]
.text:000014F8                 mov     edx, [ebp+arg_4]
.text:000014FB                 not     edx
.text:000014FD                 and     ecx, edx
.text:000014FF                 mov     eax, [ebp+var_4]
.text:00001502                 mov     [eax+4], ecx
.text:00001505
.text:00001505 loc_1505:                               ; CODE XREF: CAlignedMidBuffer::AllocAlignedMask(uint,uint)+3Aj
.text:00001505                 add     esp, 4
.text:00001508                 cmp     ebp, esp
.text:0000150A                 call    __RTC_CheckEsp
.text:0000150F                 mov     esp, ebp
.text:00001511                 pop     ebp
.text:00001512                 retn    8
.text:00001512 ?AllocAlignedMask@CAlignedMidBuffer@@QAEXII@Z endp
.text:00001512
.text:00001512 ; ---------------------------------------------------------------------------
.text:00001515                 align 4
.text:00001515 _text           ends
.text:00001515
.text$x:00001518 ; ===========================================================================
.text$x:00001518
.text$x:00001518 ; Segment type: Pure code
.text$x:00001518 ; Segment permissions: Read/Execute
.text$x:00001518 _text$x         segment para public 'CODE' use32
.text$x:00001518                 assume cs:_text$x
.text$x:00001518                 ;org 1518h
.text$x:00001518                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00001518
.text$x:00001518 ; =============== S U B R O U T I N E =======================================
.text$x:00001518
.text$x:00001518
.text$x:00001518 __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$0 proc near
.text$x:00001518                                         ; DATA XREF: .xdata$x:00001798o
.text$x:00001518                 mov     ecx, [ebp-10h]
.text$x:0000151B                 add     ecx, 40h ; '@'  ; this
.text$x:0000151E                 jmp     ??1CAlignedMidBuffer@@QAE@XZ ; CAlignedMidBuffer::~CAlignedMidBuffer(void)
.text$x:0000151E __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$0 endp
.text$x:0000151E
.text$x:00001523
.text$x:00001523 ; =============== S U B R O U T I N E =======================================
.text$x:00001523
.text$x:00001523
.text$x:00001523 __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$1 proc near
.text$x:00001523                                         ; DATA XREF: .xdata$x:000017A0o
.text$x:00001523                 mov     ecx, [ebp-10h]
.text$x:00001526                 add     ecx, 68h ; 'h'
.text$x:00001529                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00001529 __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$1 endp
.text$x:00001529
.text$x:0000152E
.text$x:0000152E ; =============== S U B R O U T I N E =======================================
.text$x:0000152E
.text$x:0000152E
.text$x:0000152E __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$2 proc near
.text$x:0000152E                                         ; DATA XREF: .xdata$x:000017A8o
.text$x:0000152E                 mov     ecx, [ebp-10h]
.text$x:00001531                 add     ecx, 6Ch ; 'l'
.text$x:00001534                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00001534 __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$2 endp
.text$x:00001534
.text$x:00001539
.text$x:00001539 ; =============== S U B R O U T I N E =======================================
.text$x:00001539
.text$x:00001539
.text$x:00001539 __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$3 proc near
.text$x:00001539                                         ; DATA XREF: .xdata$x:000017B0o
.text$x:00001539                 mov     ecx, [ebp-10h]
.text$x:0000153C                 add     ecx, 7Ch ; '|'
.text$x:0000153F                 jmp     ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text$x:0000153F __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$3 endp
.text$x:0000153F
.text$x:00001544
.text$x:00001544 ; =============== S U B R O U T I N E =======================================
.text$x:00001544
.text$x:00001544
.text$x:00001544 __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$4 proc near
.text$x:00001544                                         ; DATA XREF: .xdata$x:000017B8o
.text$x:00001544                 mov     ecx, [ebp-10h]
.text$x:00001547                 add     ecx, 80h ; 'Ç'
.text$x:0000154D                 jmp     ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>(void)
.text$x:0000154D __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$4 endp
.text$x:0000154D
.text$x:00001552
.text$x:00001552 ; =============== S U B R O U T I N E =======================================
.text$x:00001552
.text$x:00001552
.text$x:00001552 __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$5 proc near
.text$x:00001552                                         ; DATA XREF: .xdata$x:000017C0o
.text$x:00001552                 mov     ecx, [ebp-10h]
.text$x:00001555                 add     ecx, 84h ; 'ä'
.text$x:0000155B                 jmp     ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)
.text$x:0000155B __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$5 endp
.text$x:0000155B
.text$x:00001560
.text$x:00001560 ; =============== S U B R O U T I N E =======================================
.text$x:00001560
.text$x:00001560
.text$x:00001560 __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$6 proc near
.text$x:00001560                                         ; DATA XREF: .xdata$x:000017C8o
.text$x:00001560                 mov     ecx, [ebp-10h]
.text$x:00001563                 add     ecx, 88h ; 'ê'
.text$x:00001569                 jmp     ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>(void)
.text$x:00001569 __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$6 endp
.text$x:00001569
.text$x:0000156E
.text$x:0000156E ; =============== S U B R O U T I N E =======================================
.text$x:0000156E
.text$x:0000156E
.text$x:0000156E __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$7 proc near
.text$x:0000156E                                         ; DATA XREF: .xdata$x:000017D0o
.text$x:0000156E                 mov     ecx, [ebp-10h]
.text$x:00001571                 add     ecx, 8Ch ; 'î'
.text$x:00001577                 jmp     ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>(void)
.text$x:00001577 __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$7 endp
.text$x:00001577
.text$x:0000157C
.text$x:0000157C ; =============== S U B R O U T I N E =======================================
.text$x:0000157C
.text$x:0000157C
.text$x:0000157C __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$8 proc near
.text$x:0000157C                                         ; DATA XREF: .xdata$x:000017D8o
.text$x:0000157C                 mov     ecx, [ebp-10h]
.text$x:0000157F                 add     ecx, 90h ; 'É'
.text$x:00001585                 jmp     ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text$x:00001585 __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$8 endp
.text$x:00001585
.text$x:0000158A
.text$x:0000158A ; =============== S U B R O U T I N E =======================================
.text$x:0000158A
.text$x:0000158A
.text$x:0000158A __ehhandler$??0CFilterCoder@@QAE@_N@Z proc near
.text$x:0000158A                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+5o
.text$x:0000158A
.text$x:0000158A arg_4           = dword ptr  8
.text$x:0000158A
.text$x:0000158A                 mov     edx, [esp+arg_4]
.text$x:0000158E                 lea     eax, [edx+0Ch]
.text$x:00001591                 mov     ecx, [edx-8]
.text$x:00001594                 xor     ecx, eax
.text$x:00001596                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000159B                 mov     eax, offset __ehfuncinfo$??0CFilterCoder@@QAE@_N@Z
.text$x:000015A0                 jmp     ___CxxFrameHandler3
.text$x:000015A0 __ehhandler$??0CFilterCoder@@QAE@_N@Z endp
.text$x:000015A0
.text$x:000015A5
.text$x:000015A5 ; =============== S U B R O U T I N E =======================================
.text$x:000015A5
.text$x:000015A5
.text$x:000015A5 __unwindfunclet$??1CFilterCoder@@QAE@XZ$0 proc near
.text$x:000015A5                                         ; DATA XREF: .xdata$x:00001804o
.text$x:000015A5                 mov     ecx, [ebp-10h]
.text$x:000015A8                 add     ecx, 40h ; '@'  ; this
.text$x:000015AB                 jmp     ??1CAlignedMidBuffer@@QAE@XZ ; CAlignedMidBuffer::~CAlignedMidBuffer(void)
.text$x:000015AB __unwindfunclet$??1CFilterCoder@@QAE@XZ$0 endp
.text$x:000015AB
.text$x:000015B0
.text$x:000015B0 ; =============== S U B R O U T I N E =======================================
.text$x:000015B0
.text$x:000015B0
.text$x:000015B0 __unwindfunclet$??1CFilterCoder@@QAE@XZ$1 proc near
.text$x:000015B0                                         ; DATA XREF: .xdata$x:0000180Co
.text$x:000015B0                 mov     ecx, [ebp-10h]
.text$x:000015B3                 add     ecx, 68h ; 'h'
.text$x:000015B6                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000015B6 __unwindfunclet$??1CFilterCoder@@QAE@XZ$1 endp
.text$x:000015B6
.text$x:000015BB
.text$x:000015BB ; =============== S U B R O U T I N E =======================================
.text$x:000015BB
.text$x:000015BB
.text$x:000015BB __unwindfunclet$??1CFilterCoder@@QAE@XZ$2 proc near
.text$x:000015BB                                         ; DATA XREF: .xdata$x:00001814o
.text$x:000015BB                 mov     ecx, [ebp-10h]
.text$x:000015BE                 add     ecx, 6Ch ; 'l'
.text$x:000015C1                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000015C1 __unwindfunclet$??1CFilterCoder@@QAE@XZ$2 endp
.text$x:000015C1
.text$x:000015C6
.text$x:000015C6 ; =============== S U B R O U T I N E =======================================
.text$x:000015C6
.text$x:000015C6
.text$x:000015C6 __unwindfunclet$??1CFilterCoder@@QAE@XZ$3 proc near
.text$x:000015C6                                         ; DATA XREF: .xdata$x:0000181Co
.text$x:000015C6                 mov     ecx, [ebp-10h]
.text$x:000015C9                 add     ecx, 7Ch ; '|'
.text$x:000015CC                 jmp     ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text$x:000015CC __unwindfunclet$??1CFilterCoder@@QAE@XZ$3 endp
.text$x:000015CC
.text$x:000015D1
.text$x:000015D1 ; =============== S U B R O U T I N E =======================================
.text$x:000015D1
.text$x:000015D1
.text$x:000015D1 __unwindfunclet$??1CFilterCoder@@QAE@XZ$4 proc near
.text$x:000015D1                                         ; DATA XREF: .xdata$x:00001824o
.text$x:000015D1                 mov     ecx, [ebp-10h]
.text$x:000015D4                 add     ecx, 80h ; 'Ç'
.text$x:000015DA                 jmp     ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>(void)
.text$x:000015DA __unwindfunclet$??1CFilterCoder@@QAE@XZ$4 endp
.text$x:000015DA
.text$x:000015DF
.text$x:000015DF ; =============== S U B R O U T I N E =======================================
.text$x:000015DF
.text$x:000015DF
.text$x:000015DF __unwindfunclet$??1CFilterCoder@@QAE@XZ$5 proc near
.text$x:000015DF                                         ; DATA XREF: .xdata$x:0000182Co
.text$x:000015DF                 mov     ecx, [ebp-10h]
.text$x:000015E2                 add     ecx, 84h ; 'ä'
.text$x:000015E8                 jmp     ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)
.text$x:000015E8 __unwindfunclet$??1CFilterCoder@@QAE@XZ$5 endp
.text$x:000015E8
.text$x:000015ED
.text$x:000015ED ; =============== S U B R O U T I N E =======================================
.text$x:000015ED
.text$x:000015ED
.text$x:000015ED __unwindfunclet$??1CFilterCoder@@QAE@XZ$6 proc near
.text$x:000015ED                                         ; DATA XREF: .xdata$x:00001834o
.text$x:000015ED                 mov     ecx, [ebp-10h]
.text$x:000015F0                 add     ecx, 88h ; 'ê'
.text$x:000015F6                 jmp     ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>(void)
.text$x:000015F6 __unwindfunclet$??1CFilterCoder@@QAE@XZ$6 endp
.text$x:000015F6
.text$x:000015FB
.text$x:000015FB ; =============== S U B R O U T I N E =======================================
.text$x:000015FB
.text$x:000015FB
.text$x:000015FB __unwindfunclet$??1CFilterCoder@@QAE@XZ$7 proc near
.text$x:000015FB                                         ; DATA XREF: .xdata$x:0000183Co
.text$x:000015FB                 mov     ecx, [ebp-10h]
.text$x:000015FE                 add     ecx, 8Ch ; 'î'
.text$x:00001604                 jmp     ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>(void)
.text$x:00001604 __unwindfunclet$??1CFilterCoder@@QAE@XZ$7 endp
.text$x:00001604
.text$x:00001609
.text$x:00001609 ; =============== S U B R O U T I N E =======================================
.text$x:00001609
.text$x:00001609
.text$x:00001609 __unwindfunclet$??1CFilterCoder@@QAE@XZ$8 proc near
.text$x:00001609                                         ; DATA XREF: .xdata$x:00001844o
.text$x:00001609                 mov     ecx, [ebp-10h]
.text$x:0000160C                 add     ecx, 90h ; 'É'
.text$x:00001612                 jmp     ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text$x:00001612 __unwindfunclet$??1CFilterCoder@@QAE@XZ$8 endp
.text$x:00001612
.text$x:00001617
.text$x:00001617 ; =============== S U B R O U T I N E =======================================
.text$x:00001617
.text$x:00001617
.text$x:00001617 __ehhandler$??1CFilterCoder@@QAE@XZ proc near
.text$x:00001617                                         ; DATA XREF: CFilterCoder::~CFilterCoder(void)+5o
.text$x:00001617
.text$x:00001617 arg_4           = dword ptr  8
.text$x:00001617
.text$x:00001617                 mov     edx, [esp+arg_4]
.text$x:0000161B                 lea     eax, [edx+0Ch]
.text$x:0000161E                 mov     ecx, [edx-8]
.text$x:00001621                 xor     ecx, eax
.text$x:00001623                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001628                 mov     eax, offset __ehfuncinfo$??1CFilterCoder@@QAE@XZ
.text$x:0000162D                 jmp     ___CxxFrameHandler3
.text$x:0000162D __ehhandler$??1CFilterCoder@@QAE@XZ endp
.text$x:0000162D
.text$x:0000162D ; ---------------------------------------------------------------------------
.text$x:00001632                 align 4
.text$x:00001632 _text$x         ends
.text$x:00001632
.rdata:00001634 ; ===========================================================================
.rdata:00001634
.rdata:00001634 ; Segment type: Pure data
.rdata:00001634 ; Segment permissions: Read
.rdata:00001634 _rdata          segment dword public 'DATA' use32
.rdata:00001634                 assume cs:_rdata
.rdata:00001634                 ;org 1634h
.rdata:00001634 ; COMDAT (pick largest)
.rdata:00001634                 dd offset ??_R4CFilterCoder@@6BICompressSetDecoderProperties2@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata:00001638                 public ??_7CFilterCoder@@6BICompressSetDecoderProperties2@@@
.rdata:00001638 ; const CFilterCoder::`vftable'{for `ICompressSetDecoderProperties2'}
.rdata:00001638 ??_7CFilterCoder@@6BICompressSetDecoderProperties2@@@ dd offset ?QueryInterface@CFilterCoder@@WDI@AGJABU_GUID@@PAPAX@Z
.rdata:00001638                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+17Ao
.rdata:00001638                                         ; CFilterCoder::~CFilterCoder(void)+BBo
.rdata:00001638                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{56}' (_GUID const &,void * *)
.rdata:0000163C                 dd offset ?AddRef@CFilterCoder@@WDI@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{56}' (void)
.rdata:00001640                 dd offset ?Release@CFilterCoder@@WDI@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{56}' (void)
.rdata:00001644                 dd offset ?SetDecoderProperties2@CFilterCoder@@UAGJPBEI@Z ; CFilterCoder::SetDecoderProperties2(uchar const *,uint)
.rdata:00001644 _rdata          ends
.rdata:00001644
.rdata:00001648 ; ===========================================================================
.rdata:00001648
.rdata:00001648 ; Segment type: Pure data
.rdata:00001648 ; Segment permissions: Read
.rdata:00001648 _rdata          segment dword public 'DATA' use32
.rdata:00001648                 assume cs:_rdata
.rdata:00001648                 ;org 1648h
.rdata:00001648 ; COMDAT (pick largest)
.rdata:00001648                 dd offset ??_R4CFilterCoder@@6BICryptoResetInitVector@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICryptoResetInitVector'}
.rdata:0000164C                 public ??_7CFilterCoder@@6BICryptoResetInitVector@@@
.rdata:0000164C ; const CFilterCoder::`vftable'{for `ICryptoResetInitVector'}
.rdata:0000164C ??_7CFilterCoder@@6BICryptoResetInitVector@@@ dd offset ?QueryInterface@CFilterCoder@@WDE@AGJABU_GUID@@PAPAX@Z
.rdata:0000164C                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+170o
.rdata:0000164C                                         ; CFilterCoder::~CFilterCoder(void)+B1o
.rdata:0000164C                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{52}' (_GUID const &,void * *)
.rdata:00001650                 dd offset ?AddRef@CFilterCoder@@WDE@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{52}' (void)
.rdata:00001654                 dd offset ?Release@CFilterCoder@@WDE@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{52}' (void)
.rdata:00001658                 dd offset ?ResetInitVector@CFilterCoder@@UAGJXZ ; CFilterCoder::ResetInitVector(void)
.rdata:00001658 _rdata          ends
.rdata:00001658
.rdata:0000165C ; ===========================================================================
.rdata:0000165C
.rdata:0000165C ; Segment type: Pure data
.rdata:0000165C ; Segment permissions: Read
.rdata:0000165C _rdata          segment dword public 'DATA' use32
.rdata:0000165C                 assume cs:_rdata
.rdata:0000165C                 ;org 165Ch
.rdata:0000165C ; COMDAT (pick largest)
.rdata:0000165C                 dd offset ??_R4CFilterCoder@@6BICompressWriteCoderProperties@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata:00001660                 public ??_7CFilterCoder@@6BICompressWriteCoderProperties@@@
.rdata:00001660 ; const CFilterCoder::`vftable'{for `ICompressWriteCoderProperties'}
.rdata:00001660 ??_7CFilterCoder@@6BICompressWriteCoderProperties@@@ dd offset ?QueryInterface@CFilterCoder@@WDA@AGJABU_GUID@@PAPAX@Z
.rdata:00001660                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+166o
.rdata:00001660                                         ; CFilterCoder::~CFilterCoder(void)+A7o
.rdata:00001660                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{48}' (_GUID const &,void * *)
.rdata:00001664                 dd offset ?AddRef@CFilterCoder@@WDA@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{48}' (void)
.rdata:00001668                 dd offset ?Release@CFilterCoder@@WDA@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{48}' (void)
.rdata:0000166C                 dd offset ?WriteCoderProperties@CFilterCoder@@UAGJPAUISequentialOutStream@@@Z ; CFilterCoder::WriteCoderProperties(ISequentialOutStream *)
.rdata:0000166C _rdata          ends
.rdata:0000166C
.rdata:00001670 ; ===========================================================================
.rdata:00001670
.rdata:00001670 ; Segment type: Pure data
.rdata:00001670 ; Segment permissions: Read
.rdata:00001670 _rdata          segment dword public 'DATA' use32
.rdata:00001670                 assume cs:_rdata
.rdata:00001670                 ;org 1670h
.rdata:00001670 ; COMDAT (pick largest)
.rdata:00001670                 dd offset ??_R4CFilterCoder@@6BICompressSetCoderProperties@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00001674                 public ??_7CFilterCoder@@6BICompressSetCoderProperties@@@
.rdata:00001674 ; const CFilterCoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00001674 ??_7CFilterCoder@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CFilterCoder@@WCM@AGJABU_GUID@@PAPAX@Z
.rdata:00001674                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+15Co
.rdata:00001674                                         ; CFilterCoder::~CFilterCoder(void)+9Do
.rdata:00001674                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{44}' (_GUID const &,void * *)
.rdata:00001678                 dd offset ?AddRef@CFilterCoder@@WCM@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{44}' (void)
.rdata:0000167C                 dd offset ?Release@CFilterCoder@@WCM@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{44}' (void)
.rdata:00001680                 dd offset ?SetCoderProperties@CFilterCoder@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; CFilterCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00001680 _rdata          ends
.rdata:00001680
.rdata:00001684 ; ===========================================================================
.rdata:00001684
.rdata:00001684 ; Segment type: Pure data
.rdata:00001684 ; Segment permissions: Read
.rdata:00001684 _rdata          segment dword public 'DATA' use32
.rdata:00001684                 assume cs:_rdata
.rdata:00001684                 ;org 1684h
.rdata:00001684 ; COMDAT (pick largest)
.rdata:00001684                 dd offset ??_R4CFilterCoder@@6BICryptoProperties@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata:00001688                 public ??_7CFilterCoder@@6BICryptoProperties@@@
.rdata:00001688 ; const CFilterCoder::`vftable'{for `ICryptoProperties'}
.rdata:00001688 ??_7CFilterCoder@@6BICryptoProperties@@@ dd offset ?QueryInterface@CFilterCoder@@WCI@AGJABU_GUID@@PAPAX@Z
.rdata:00001688                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+152o
.rdata:00001688                                         ; CFilterCoder::~CFilterCoder(void)+93o
.rdata:00001688                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{40}' (_GUID const &,void * *)
.rdata:0000168C                 dd offset ?AddRef@CFilterCoder@@WCI@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{40}' (void)
.rdata:00001690                 dd offset ?Release@CFilterCoder@@WCI@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{40}' (void)
.rdata:00001694                 dd offset ?SetKey@CFilterCoder@@UAGJPBEI@Z ; CFilterCoder::SetKey(uchar const *,uint)
.rdata:00001698                 dd offset ?SetInitVector@CFilterCoder@@UAGJPBEI@Z ; CFilterCoder::SetInitVector(uchar const *,uint)
.rdata:00001698 _rdata          ends
.rdata:00001698
.rdata:0000169C ; ===========================================================================
.rdata:0000169C
.rdata:0000169C ; Segment type: Pure data
.rdata:0000169C ; Segment permissions: Read
.rdata:0000169C _rdata          segment dword public 'DATA' use32
.rdata:0000169C                 assume cs:_rdata
.rdata:0000169C                 ;org 169Ch
.rdata:0000169C ; COMDAT (pick largest)
.rdata:0000169C                 dd offset ??_R4CFilterCoder@@6BICryptoSetPassword@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:000016A0                 public ??_7CFilterCoder@@6BICryptoSetPassword@@@
.rdata:000016A0 ; const CFilterCoder::`vftable'{for `ICryptoSetPassword'}
.rdata:000016A0 ??_7CFilterCoder@@6BICryptoSetPassword@@@ dd offset ?QueryInterface@CFilterCoder@@WCE@AGJABU_GUID@@PAPAX@Z
.rdata:000016A0                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+148o
.rdata:000016A0                                         ; CFilterCoder::~CFilterCoder(void)+89o
.rdata:000016A0                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{36}' (_GUID const &,void * *)
.rdata:000016A4                 dd offset ?AddRef@CFilterCoder@@WCE@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{36}' (void)
.rdata:000016A8                 dd offset ?Release@CFilterCoder@@WCE@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{36}' (void)
.rdata:000016AC                 dd offset ?CryptoSetPassword@CFilterCoder@@UAGJPBEI@Z ; CFilterCoder::CryptoSetPassword(uchar const *,uint)
.rdata:000016AC _rdata          ends
.rdata:000016AC
.rdata:000016B0 ; ===========================================================================
.rdata:000016B0
.rdata:000016B0 ; Segment type: Pure data
.rdata:000016B0 ; Segment permissions: Read
.rdata:000016B0 _rdata          segment dword public 'DATA' use32
.rdata:000016B0                 assume cs:_rdata
.rdata:000016B0                 ;org 16B0h
.rdata:000016B0 ; COMDAT (pick largest)
.rdata:000016B0                 dd offset ??_R4CFilterCoder@@6BICompressSetBufSize@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetBufSize'}
.rdata:000016B4                 public ??_7CFilterCoder@@6BICompressSetBufSize@@@
.rdata:000016B4 ; const CFilterCoder::`vftable'{for `ICompressSetBufSize'}
.rdata:000016B4 ??_7CFilterCoder@@6BICompressSetBufSize@@@ dd offset ?QueryInterface@CFilterCoder@@WCA@AGJABU_GUID@@PAPAX@Z
.rdata:000016B4                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+13Eo
.rdata:000016B4                                         ; CFilterCoder::~CFilterCoder(void)+7Fo
.rdata:000016B4                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{32}' (_GUID const &,void * *)
.rdata:000016B8                 dd offset ?AddRef@CFilterCoder@@WCA@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{32}' (void)
.rdata:000016BC                 dd offset ?Release@CFilterCoder@@WCA@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{32}' (void)
.rdata:000016C0                 dd offset ?SetInBufSize@CFilterCoder@@UAGJII@Z ; CFilterCoder::SetInBufSize(uint,uint)
.rdata:000016C4                 dd offset ?SetOutBufSize@CFilterCoder@@UAGJII@Z ; CFilterCoder::SetOutBufSize(uint,uint)
.rdata:000016C4 _rdata          ends
.rdata:000016C4
.rdata:000016C8 ; ===========================================================================
.rdata:000016C8
.rdata:000016C8 ; Segment type: Pure data
.rdata:000016C8 ; Segment permissions: Read
.rdata:000016C8 _rdata          segment dword public 'DATA' use32
.rdata:000016C8                 assume cs:_rdata
.rdata:000016C8                 ;org 16C8h
.rdata:000016C8 ; COMDAT (pick largest)
.rdata:000016C8                 dd offset ??_R4CFilterCoder@@6BIOutStreamFinish@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `IOutStreamFinish'}
.rdata:000016CC                 public ??_7CFilterCoder@@6BIOutStreamFinish@@@
.rdata:000016CC ; const CFilterCoder::`vftable'{for `IOutStreamFinish'}
.rdata:000016CC ??_7CFilterCoder@@6BIOutStreamFinish@@@ dd offset ?QueryInterface@CFilterCoder@@WBM@AGJABU_GUID@@PAPAX@Z
.rdata:000016CC                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+134o
.rdata:000016CC                                         ; CFilterCoder::~CFilterCoder(void)+75o
.rdata:000016CC                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{28}' (_GUID const &,void * *)
.rdata:000016D0                 dd offset ?AddRef@CFilterCoder@@WBM@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{28}' (void)
.rdata:000016D4                 dd offset ?Release@CFilterCoder@@WBM@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{28}' (void)
.rdata:000016D8                 dd offset ?OutStreamFinish@CFilterCoder@@UAGJXZ ; CFilterCoder::OutStreamFinish(void)
.rdata:000016D8 _rdata          ends
.rdata:000016D8
.rdata:000016DC ; ===========================================================================
.rdata:000016DC
.rdata:000016DC ; Segment type: Pure data
.rdata:000016DC ; Segment permissions: Read
.rdata:000016DC _rdata          segment dword public 'DATA' use32
.rdata:000016DC                 assume cs:_rdata
.rdata:000016DC                 ;org 16DCh
.rdata:000016DC ; COMDAT (pick largest)
.rdata:000016DC                 dd offset ??_R4CFilterCoder@@6BISequentialOutStream@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ISequentialOutStream'}
.rdata:000016E0                 public ??_7CFilterCoder@@6BISequentialOutStream@@@
.rdata:000016E0 ; const CFilterCoder::`vftable'{for `ISequentialOutStream'}
.rdata:000016E0 ??_7CFilterCoder@@6BISequentialOutStream@@@ dd offset ?QueryInterface@CFilterCoder@@WBI@AGJABU_GUID@@PAPAX@Z
.rdata:000016E0                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+12Ao
.rdata:000016E0                                         ; CFilterCoder::~CFilterCoder(void)+6Bo
.rdata:000016E0                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{24}' (_GUID const &,void * *)
.rdata:000016E4                 dd offset ?AddRef@CFilterCoder@@WBI@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{24}' (void)
.rdata:000016E8                 dd offset ?Release@CFilterCoder@@WBI@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{24}' (void)
.rdata:000016EC                 dd offset ?Write@CFilterCoder@@UAGJPBXIPAI@Z ; CFilterCoder::Write(void const *,uint,uint *)
.rdata:000016EC _rdata          ends
.rdata:000016EC
.rdata:000016F0 ; ===========================================================================
.rdata:000016F0
.rdata:000016F0 ; Segment type: Pure data
.rdata:000016F0 ; Segment permissions: Read
.rdata:000016F0 _rdata          segment dword public 'DATA' use32
.rdata:000016F0                 assume cs:_rdata
.rdata:000016F0                 ;org 16F0h
.rdata:000016F0 ; COMDAT (pick largest)
.rdata:000016F0                 dd offset ??_R4CFilterCoder@@6BICompressSetOutStream@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStream'}
.rdata:000016F4                 public ??_7CFilterCoder@@6BICompressSetOutStream@@@
.rdata:000016F4 ; const CFilterCoder::`vftable'{for `ICompressSetOutStream'}
.rdata:000016F4 ??_7CFilterCoder@@6BICompressSetOutStream@@@ dd offset ?QueryInterface@CFilterCoder@@WBE@AGJABU_GUID@@PAPAX@Z
.rdata:000016F4                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+120o
.rdata:000016F4                                         ; CFilterCoder::~CFilterCoder(void)+61o
.rdata:000016F4                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{20}' (_GUID const &,void * *)
.rdata:000016F8                 dd offset ?AddRef@CFilterCoder@@WBE@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{20}' (void)
.rdata:000016FC                 dd offset ?Release@CFilterCoder@@WBE@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{20}' (void)
.rdata:00001700                 dd offset ?SetOutStream@CFilterCoder@@UAGJPAUISequentialOutStream@@@Z ; CFilterCoder::SetOutStream(ISequentialOutStream *)
.rdata:00001704                 dd offset ?ReleaseOutStream@CFilterCoder@@UAGJXZ ; CFilterCoder::ReleaseOutStream(void)
.rdata:00001704 _rdata          ends
.rdata:00001704
.rdata:00001708 ; ===========================================================================
.rdata:00001708
.rdata:00001708 ; Segment type: Pure data
.rdata:00001708 ; Segment permissions: Read
.rdata:00001708 _rdata          segment dword public 'DATA' use32
.rdata:00001708                 assume cs:_rdata
.rdata:00001708                 ;org 1708h
.rdata:00001708 ; COMDAT (pick largest)
.rdata:00001708                 dd offset ??_R4CFilterCoder@@6BISequentialInStream@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:0000170C                 public ??_7CFilterCoder@@6BISequentialInStream@@@
.rdata:0000170C ; const CFilterCoder::`vftable'{for `ISequentialInStream'}
.rdata:0000170C ??_7CFilterCoder@@6BISequentialInStream@@@ dd offset ?QueryInterface@CFilterCoder@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:0000170C                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+116o
.rdata:0000170C                                         ; CFilterCoder::~CFilterCoder(void)+57o
.rdata:0000170C                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00001710                 dd offset ?AddRef@CFilterCoder@@WBA@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{16}' (void)
.rdata:00001714                 dd offset ?Release@CFilterCoder@@WBA@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{16}' (void)
.rdata:00001718                 dd offset ?Read@CFilterCoder@@UAGJPAXIPAI@Z ; CFilterCoder::Read(void *,uint,uint *)
.rdata:00001718 _rdata          ends
.rdata:00001718
.rdata:0000171C ; ===========================================================================
.rdata:0000171C
.rdata:0000171C ; Segment type: Pure data
.rdata:0000171C ; Segment permissions: Read
.rdata:0000171C _rdata          segment dword public 'DATA' use32
.rdata:0000171C                 assume cs:_rdata
.rdata:0000171C                 ;org 171Ch
.rdata:0000171C ; COMDAT (pick largest)
.rdata:0000171C                 dd offset ??_R4CFilterCoder@@6BICompressSetInStream@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00001720                 public ??_7CFilterCoder@@6BICompressSetInStream@@@
.rdata:00001720 ; const CFilterCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00001720 ??_7CFilterCoder@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CFilterCoder@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00001720                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+10Co
.rdata:00001720                                         ; CFilterCoder::~CFilterCoder(void)+4Do
.rdata:00001720                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00001724                 dd offset ?AddRef@CFilterCoder@@WM@AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{12}' (void)
.rdata:00001728                 dd offset ?Release@CFilterCoder@@WM@AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{12}' (void)
.rdata:0000172C                 dd offset ?SetInStream@CFilterCoder@@UAGJPAUISequentialInStream@@@Z ; CFilterCoder::SetInStream(ISequentialInStream *)
.rdata:00001730                 dd offset ?ReleaseInStream@CFilterCoder@@UAGJXZ ; CFilterCoder::ReleaseInStream(void)
.rdata:00001730 _rdata          ends
.rdata:00001730
.rdata:00001734 ; ===========================================================================
.rdata:00001734
.rdata:00001734 ; Segment type: Pure data
.rdata:00001734 ; Segment permissions: Read
.rdata:00001734 _rdata          segment dword public 'DATA' use32
.rdata:00001734                 assume cs:_rdata
.rdata:00001734                 ;org 1734h
.rdata:00001734 ; COMDAT (pick largest)
.rdata:00001734                 dd offset ??_R4CFilterCoder@@6BICompressInitEncoder@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressInitEncoder'}
.rdata:00001738                 public ??_7CFilterCoder@@6BICompressInitEncoder@@@
.rdata:00001738 ; const CFilterCoder::`vftable'{for `ICompressInitEncoder'}
.rdata:00001738 ??_7CFilterCoder@@6BICompressInitEncoder@@@ dd offset ?QueryInterface@CFilterCoder@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00001738                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+102o
.rdata:00001738                                         ; CFilterCoder::~CFilterCoder(void)+43o
.rdata:00001738                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:0000173C                 dd offset ?AddRef@CFilterCoder@@W7AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{8}' (void)
.rdata:00001740                 dd offset ?Release@CFilterCoder@@W7AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{8}' (void)
.rdata:00001744                 dd offset ?InitEncoder@CFilterCoder@@UAGJXZ ; CFilterCoder::InitEncoder(void)
.rdata:00001744 _rdata          ends
.rdata:00001744
.rdata:00001748 ; ===========================================================================
.rdata:00001748
.rdata:00001748 ; Segment type: Pure data
.rdata:00001748 ; Segment permissions: Read
.rdata:00001748 _rdata          segment dword public 'DATA' use32
.rdata:00001748                 assume cs:_rdata
.rdata:00001748                 ;org 1748h
.rdata:00001748 ; COMDAT (pick largest)
.rdata:00001748                 dd offset ??_R4CFilterCoder@@6BICompressSetOutStreamSize@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:0000174C                 public ??_7CFilterCoder@@6BICompressSetOutStreamSize@@@
.rdata:0000174C ; const CFilterCoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:0000174C ??_7CFilterCoder@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CFilterCoder@@W3AGJABU_GUID@@PAPAX@Z
.rdata:0000174C                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+F8o
.rdata:0000174C                                         ; CFilterCoder::~CFilterCoder(void)+39o
.rdata:0000174C                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00001750                 dd offset ?AddRef@CFilterCoder@@W3AGKXZ ; [thunk]:CFilterCoder::AddRef`adjustor{4}' (void)
.rdata:00001754                 dd offset ?Release@CFilterCoder@@W3AGKXZ ; [thunk]:CFilterCoder::Release`adjustor{4}' (void)
.rdata:00001758                 dd offset ?SetOutStreamSize@CFilterCoder@@UAGJPB_K@Z ; CFilterCoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:00001758 _rdata          ends
.rdata:00001758
.rdata:0000175C ; ===========================================================================
.rdata:0000175C
.rdata:0000175C ; Segment type: Pure data
.rdata:0000175C ; Segment permissions: Read
.rdata:0000175C _rdata          segment dword public 'DATA' use32
.rdata:0000175C                 assume cs:_rdata
.rdata:0000175C                 ;org 175Ch
.rdata:0000175C ; COMDAT (pick largest)
.rdata:0000175C                 dd offset ??_R4CFilterCoder@@6BICompressCoder@@@ ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00001760                 public ??_7CFilterCoder@@6BICompressCoder@@@
.rdata:00001760 ; const CFilterCoder::`vftable'{for `ICompressCoder'}
.rdata:00001760 ??_7CFilterCoder@@6BICompressCoder@@@ dd offset ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z
.rdata:00001760                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+EFo
.rdata:00001760                                         ; CFilterCoder::~CFilterCoder(void)+30o
.rdata:00001760                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.rdata:00001764                 dd offset ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.rdata:00001768                 dd offset ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.rdata:0000176C                 dd offset ?Code@CFilterCoder@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:0000176C _rdata          ends
.rdata:0000176C
.xdata$x:00001770 ; ===========================================================================
.xdata$x:00001770
.xdata$x:00001770 ; Segment type: Pure data
.xdata$x:00001770 ; Segment permissions: Read
.xdata$x:00001770 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001770                 assume cs:_xdata$x
.xdata$x:00001770                 ;org 1770h
.xdata$x:00001770 __ehfuncinfo$??0CFilterCoder@@QAE@_N@Z db  22h ; "
.xdata$x:00001770                                         ; DATA XREF: __ehhandler$??0CFilterCoder@@QAE@_N@Z+11o
.xdata$x:00001771                 db    5
.xdata$x:00001772                 db  93h ; ô
.xdata$x:00001773                 db  19h
.xdata$x:00001774                 db    9
.xdata$x:00001775                 db    0
.xdata$x:00001776                 db    0
.xdata$x:00001777                 db    0
.xdata$x:00001778                 dd offset __unwindtable$??0CFilterCoder@@QAE@_N@Z
.xdata$x:0000177C                 db    0
.xdata$x:0000177D                 db    0
.xdata$x:0000177E                 db    0
.xdata$x:0000177F                 db    0
.xdata$x:00001780                 db    0
.xdata$x:00001781                 db    0
.xdata$x:00001782                 db    0
.xdata$x:00001783                 db    0
.xdata$x:00001784                 db    0
.xdata$x:00001785                 db    0
.xdata$x:00001786                 db    0
.xdata$x:00001787                 db    0
.xdata$x:00001788                 db    0
.xdata$x:00001789                 db    0
.xdata$x:0000178A                 db    0
.xdata$x:0000178B                 db    0
.xdata$x:0000178C                 db    0
.xdata$x:0000178D                 db    0
.xdata$x:0000178E                 db    0
.xdata$x:0000178F                 db    0
.xdata$x:00001790                 db    1
.xdata$x:00001791                 db    0
.xdata$x:00001792                 db    0
.xdata$x:00001793                 db    0
.xdata$x:00001794 __unwindtable$??0CFilterCoder@@QAE@_N@Z db 0FFh
.xdata$x:00001794                                         ; DATA XREF: .xdata$x:00001778o
.xdata$x:00001795                 db 0FFh
.xdata$x:00001796                 db 0FFh
.xdata$x:00001797                 db 0FFh
.xdata$x:00001798                 dd offset __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$0
.xdata$x:0000179C                 align 10h
.xdata$x:000017A0                 dd offset __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$1
.xdata$x:000017A4                 db    1
.xdata$x:000017A5                 db    0
.xdata$x:000017A6                 db    0
.xdata$x:000017A7                 db    0
.xdata$x:000017A8                 dd offset __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$2
.xdata$x:000017AC                 db    2
.xdata$x:000017AD                 db    0
.xdata$x:000017AE                 db    0
.xdata$x:000017AF                 db    0
.xdata$x:000017B0                 dd offset __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$3
.xdata$x:000017B4                 db    3
.xdata$x:000017B5                 db    0
.xdata$x:000017B6                 db    0
.xdata$x:000017B7                 db    0
.xdata$x:000017B8                 dd offset __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$4
.xdata$x:000017BC                 db    4
.xdata$x:000017BD                 db    0
.xdata$x:000017BE                 db    0
.xdata$x:000017BF                 db    0
.xdata$x:000017C0                 dd offset __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$5
.xdata$x:000017C4                 db    5
.xdata$x:000017C5                 db    0
.xdata$x:000017C6                 db    0
.xdata$x:000017C7                 db    0
.xdata$x:000017C8                 dd offset __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$6
.xdata$x:000017CC                 db    6
.xdata$x:000017CD                 db    0
.xdata$x:000017CE                 db    0
.xdata$x:000017CF                 db    0
.xdata$x:000017D0                 dd offset __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$7
.xdata$x:000017D4                 db    7
.xdata$x:000017D5                 db    0
.xdata$x:000017D6                 db    0
.xdata$x:000017D7                 db    0
.xdata$x:000017D8                 dd offset __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$8
.xdata$x:000017DC __ehfuncinfo$??1CFilterCoder@@QAE@XZ db  22h ; "
.xdata$x:000017DC                                         ; DATA XREF: __ehhandler$??1CFilterCoder@@QAE@XZ+11o
.xdata$x:000017DD                 db    5
.xdata$x:000017DE                 db  93h ; ô
.xdata$x:000017DF                 db  19h
.xdata$x:000017E0                 db    9
.xdata$x:000017E1                 db    0
.xdata$x:000017E2                 db    0
.xdata$x:000017E3                 db    0
.xdata$x:000017E4                 dd offset __unwindtable$??1CFilterCoder@@QAE@XZ
.xdata$x:000017E8                 db    0
.xdata$x:000017E9                 db    0
.xdata$x:000017EA                 db    0
.xdata$x:000017EB                 db    0
.xdata$x:000017EC                 db    0
.xdata$x:000017ED                 db    0
.xdata$x:000017EE                 db    0
.xdata$x:000017EF                 db    0
.xdata$x:000017F0                 db    0
.xdata$x:000017F1                 db    0
.xdata$x:000017F2                 db    0
.xdata$x:000017F3                 db    0
.xdata$x:000017F4                 db    0
.xdata$x:000017F5                 db    0
.xdata$x:000017F6                 db    0
.xdata$x:000017F7                 db    0
.xdata$x:000017F8                 db    0
.xdata$x:000017F9                 db    0
.xdata$x:000017FA                 db    0
.xdata$x:000017FB                 db    0
.xdata$x:000017FC                 db    1
.xdata$x:000017FD                 db    0
.xdata$x:000017FE                 db    0
.xdata$x:000017FF                 db    0
.xdata$x:00001800 __unwindtable$??1CFilterCoder@@QAE@XZ db 0FFh
.xdata$x:00001800                                         ; DATA XREF: .xdata$x:000017E4o
.xdata$x:00001801                 db 0FFh
.xdata$x:00001802                 db 0FFh
.xdata$x:00001803                 db 0FFh
.xdata$x:00001804                 dd offset __unwindfunclet$??1CFilterCoder@@QAE@XZ$0
.xdata$x:00001808                 db    0
.xdata$x:00001809                 db    0
.xdata$x:0000180A                 db    0
.xdata$x:0000180B                 db    0
.xdata$x:0000180C                 dd offset __unwindfunclet$??1CFilterCoder@@QAE@XZ$1
.xdata$x:00001810                 db    1
.xdata$x:00001811                 db    0
.xdata$x:00001812                 db    0
.xdata$x:00001813                 db    0
.xdata$x:00001814                 dd offset __unwindfunclet$??1CFilterCoder@@QAE@XZ$2
.xdata$x:00001818                 db    2
.xdata$x:00001819                 db    0
.xdata$x:0000181A                 db    0
.xdata$x:0000181B                 db    0
.xdata$x:0000181C                 dd offset __unwindfunclet$??1CFilterCoder@@QAE@XZ$3
.xdata$x:00001820                 db    3
.xdata$x:00001821                 db    0
.xdata$x:00001822                 db    0
.xdata$x:00001823                 db    0
.xdata$x:00001824                 dd offset __unwindfunclet$??1CFilterCoder@@QAE@XZ$4
.xdata$x:00001828                 db    4
.xdata$x:00001829                 db    0
.xdata$x:0000182A                 db    0
.xdata$x:0000182B                 db    0
.xdata$x:0000182C                 dd offset __unwindfunclet$??1CFilterCoder@@QAE@XZ$5
.xdata$x:00001830                 db    5
.xdata$x:00001831                 db    0
.xdata$x:00001832                 db    0
.xdata$x:00001833                 db    0
.xdata$x:00001834                 dd offset __unwindfunclet$??1CFilterCoder@@QAE@XZ$6
.xdata$x:00001838                 db    6
.xdata$x:00001839                 db    0
.xdata$x:0000183A                 db    0
.xdata$x:0000183B                 db    0
.xdata$x:0000183C                 dd offset __unwindfunclet$??1CFilterCoder@@QAE@XZ$7
.xdata$x:00001840                 db    7
.xdata$x:00001841                 db    0
.xdata$x:00001842                 db    0
.xdata$x:00001843                 db    0
.xdata$x:00001844                 dd offset __unwindfunclet$??1CFilterCoder@@QAE@XZ$8
.xdata$x:00001844 _xdata$x        ends
.xdata$x:00001844
.rdata$r:00001848 ; ===========================================================================
.rdata$r:00001848
.rdata$r:00001848 ; Segment type: Pure data
.rdata$r:00001848 ; Segment permissions: Read
.rdata$r:00001848 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001848                 assume cs:_rdata$r
.rdata$r:00001848                 ;org 1848h
.rdata$r:00001848 ; COMDAT (pick any)
.rdata$r:00001848                 public ??_R4CFilterCoder@@6BICompressCoder@@@
.rdata$r:00001848 ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00001848 ??_R4CFilterCoder@@6BICompressCoder@@@ db    0
.rdata$r:00001848                                         ; DATA XREF: .rdata:0000175Co
.rdata$r:00001849                 db    0
.rdata$r:0000184A                 db    0
.rdata$r:0000184B                 db    0
.rdata$r:0000184C                 db    0
.rdata$r:0000184D                 db    0
.rdata$r:0000184E                 db    0
.rdata$r:0000184F                 db    0
.rdata$r:00001850                 db    0
.rdata$r:00001851                 db    0
.rdata$r:00001852                 db    0
.rdata$r:00001853                 db    0
.rdata$r:00001854                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:00001858                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001858 _rdata$r        ends
.rdata$r:00001858
.data:0000185C ; ===========================================================================
.data:0000185C
.data:0000185C ; Segment type: Pure data
.data:0000185C ; Segment permissions: Read/Write
.data:0000185C _data           segment dword public 'DATA' use32
.data:0000185C                 assume cs:_data
.data:0000185C                 ;org 185Ch
.data:0000185C ; COMDAT (pick any)
.data:0000185C                 public ??_R0?AVCFilterCoder@@@8
.data:0000185C ; class CFilterCoder `RTTI Type Descriptor'
.data:0000185C ??_R0?AVCFilterCoder@@@8 dd offset ??_7type_info@@6B@
.data:0000185C                                         ; DATA XREF: .rdata$r:00001854o
.data:0000185C                                         ; .rdata$r:CFilterCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000185C                                         ; const type_info::`vftable'
.data:00001860                 db    0
.data:00001861                 db    0
.data:00001862                 db    0
.data:00001863                 db    0
.data:00001864                 db  2Eh ; .
.data:00001865                 db  3Fh ; ?
.data:00001866                 db  41h ; A
.data:00001867                 db  56h ; V
.data:00001868                 db  43h ; C
.data:00001869                 db  46h ; F
.data:0000186A                 db  69h ; i
.data:0000186B                 db  6Ch ; l
.data:0000186C                 db  74h ; t
.data:0000186D                 db  65h ; e
.data:0000186E                 db  72h ; r
.data:0000186F                 db  43h ; C
.data:00001870                 db  6Fh ; o
.data:00001871                 db  64h ; d
.data:00001872                 db  65h ; e
.data:00001873                 db  72h ; r
.data:00001874                 db  40h ; @
.data:00001875                 db  40h ; @
.data:00001876                 db    0
.data:00001877                 align 4
.data:00001877 _data           ends
.data:00001877
.rdata$r:00001878 ; ===========================================================================
.rdata$r:00001878
.rdata$r:00001878 ; Segment type: Pure data
.rdata$r:00001878 ; Segment permissions: Read
.rdata$r:00001878 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001878                 assume cs:_rdata$r
.rdata$r:00001878                 ;org 1878h
.rdata$r:00001878 ; COMDAT (pick any)
.rdata$r:00001878                 public ??_R3CFilterCoder@@8
.rdata$r:00001878 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001878 ??_R3CFilterCoder@@8 db    0            ; DATA XREF: .rdata$r:00001858o
.rdata$r:00001878                                         ; .rdata$r:00001928o ...
.rdata$r:00001879                 db    0
.rdata$r:0000187A                 db    0
.rdata$r:0000187B                 db    0
.rdata$r:0000187C                 db    5
.rdata$r:0000187D                 db    0
.rdata$r:0000187E                 db    0
.rdata$r:0000187F                 db    0
.rdata$r:00001880                 db  21h ; !
.rdata$r:00001881                 db    0
.rdata$r:00001882                 db    0
.rdata$r:00001883                 db    0
.rdata$r:00001884                 dd offset ??_R2CFilterCoder@@8 ; CFilterCoder::`RTTI Base Class Array'
.rdata$r:00001884 _rdata$r        ends
.rdata$r:00001884
.rdata$r:00001888 ; ===========================================================================
.rdata$r:00001888
.rdata$r:00001888 ; Segment type: Pure data
.rdata$r:00001888 ; Segment permissions: Read
.rdata$r:00001888 ; Segment alignment 'qword' can not be represented in assembly
.rdata$r:00001888 _rdata$r        segment para public 'DATA' use32
.rdata$r:00001888                 assume cs:_rdata$r
.rdata$r:00001888                 ;org 1888h
.rdata$r:00001888 ; COMDAT (pick any)
.rdata$r:00001888                 public ??_R2CFilterCoder@@8
.rdata$r:00001888 ; CFilterCoder::`RTTI Base Class Array'
.rdata$r:00001888 ??_R2CFilterCoder@@8 dd offset ??_R1A@?0A@EA@CFilterCoder@@8
.rdata$r:00001888                                         ; DATA XREF: .rdata$r:00001884o
.rdata$r:00001888                                         ; CFilterCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000188C                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001890                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00001894                 dd offset ??_R13?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00001898                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000189C                 dd offset ??_R17?0A@EA@ICompressInitEncoder@@8 ; ICompressInitEncoder::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000018A0                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000018A4                 dd offset ??_R1M@?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:000018A8                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:000018AC                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:000018B0                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:000018B4                 dd offset ??_R1BE@?0A@EA@ICompressSetOutStream@@8 ; ICompressSetOutStream::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:000018B8                 dd offset ??_R1BE@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (20,-1,0,66)'
.rdata$r:000018BC                 dd offset ??_R1BI@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (24,-1,0,64)'
.rdata$r:000018C0                 dd offset ??_R1BI@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (24,-1,0,66)'
.rdata$r:000018C4                 dd offset ??_R1BM@?0A@EA@IOutStreamFinish@@8 ; IOutStreamFinish::`RTTI Base Class Descriptor at (28,-1,0,64)'
.rdata$r:000018C8                 dd offset ??_R1BM@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (28,-1,0,66)'
.rdata$r:000018CC                 dd offset ??_R1CA@?0A@EA@ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Base Class Descriptor at (32,-1,0,64)'
.rdata$r:000018D0                 dd offset ??_R1CA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (32,-1,0,66)'
.rdata$r:000018D4                 dd offset ??_R1CE@?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (36,-1,0,64)'
.rdata$r:000018D8                 dd offset ??_R1CE@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (36,-1,0,66)'
.rdata$r:000018DC                 dd offset ??_R1CI@?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (40,-1,0,64)'
.rdata$r:000018E0                 dd offset ??_R1CI@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (40,-1,0,66)'
.rdata$r:000018E4                 dd offset ??_R1CM@?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (44,-1,0,64)'
.rdata$r:000018E8                 dd offset ??_R1CM@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (44,-1,0,66)'
.rdata$r:000018EC                 dd offset ??_R1DA@?0A@EA@ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (48,-1,0,64)'
.rdata$r:000018F0                 dd offset ??_R1DA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (48,-1,0,66)'
.rdata$r:000018F4                 dd offset ??_R1DE@?0A@EA@ICryptoResetInitVector@@8 ; ICryptoResetInitVector::`RTTI Base Class Descriptor at (52,-1,0,64)'
.rdata$r:000018F8                 dd offset ??_R1DE@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (52,-1,0,66)'
.rdata$r:000018FC                 dd offset ??_R1DI@?0A@EA@ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (56,-1,0,64)'
.rdata$r:00001900                 dd offset ??_R1DI@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (56,-1,0,66)'
.rdata$r:00001904                 dd offset ??_R1DM@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (60,-1,0,64)'
.rdata$r:00001908                 dd offset ??_R1EA@?0A@EA@CAlignedMidBuffer@@8 ; CAlignedMidBuffer::`RTTI Base Class Descriptor at (64,-1,0,64)'
.rdata$r:0000190C                 db    0
.rdata$r:0000190D                 align 10h
.rdata$r:0000190D _rdata$r        ends
.rdata$r:0000190D
.rdata$r:00001910 ; ===========================================================================
.rdata$r:00001910
.rdata$r:00001910 ; Segment type: Pure data
.rdata$r:00001910 ; Segment permissions: Read
.rdata$r:00001910 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001910                 assume cs:_rdata$r
.rdata$r:00001910                 ;org 1910h
.rdata$r:00001910 ; COMDAT (pick any)
.rdata$r:00001910                 public ??_R1A@?0A@EA@CFilterCoder@@8
.rdata$r:00001910 ; CFilterCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001910 ??_R1A@?0A@EA@CFilterCoder@@8 dd offset ??_R0?AVCFilterCoder@@@8
.rdata$r:00001910                                         ; DATA XREF: .rdata$r:CFilterCoder::`RTTI Base Class Array'o
.rdata$r:00001910                                         ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:00001914                 dd offset ?SetOutBufSize@CFilterCoder@@UAGJII@Z ; CFilterCoder::SetOutBufSize(uint,uint)
.rdata$r:00001918                 db    0
.rdata$r:00001919                 db    0
.rdata$r:0000191A                 db    0
.rdata$r:0000191B                 db    0
.rdata$r:0000191C                 db 0FFh
.rdata$r:0000191D                 db 0FFh
.rdata$r:0000191E                 db 0FFh
.rdata$r:0000191F                 db 0FFh
.rdata$r:00001920                 db    0
.rdata$r:00001921                 db    0
.rdata$r:00001922                 db    0
.rdata$r:00001923                 db    0
.rdata$r:00001924                 db  40h ; @
.rdata$r:00001925                 db    0
.rdata$r:00001926                 db    0
.rdata$r:00001927                 db    0
.rdata$r:00001928                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001928 _rdata$r        ends
.rdata$r:00001928
.rdata$r:0000192C ; ===========================================================================
.rdata$r:0000192C
.rdata$r:0000192C ; Segment type: Pure data
.rdata$r:0000192C ; Segment permissions: Read
.rdata$r:0000192C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000192C                 assume cs:_rdata$r
.rdata$r:0000192C                 ;org 192Ch
.rdata$r:0000192C ; COMDAT (pick any)
.rdata$r:0000192C                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:0000192C ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000192C ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:0000192C                                         ; DATA XREF: .rdata$r:0000188Co
.rdata$r:0000192C                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:0000192C                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00001930                 db    1
.rdata$r:00001931                 db    0
.rdata$r:00001932                 db    0
.rdata$r:00001933                 db    0
.rdata$r:00001934                 db    0
.rdata$r:00001935                 db    0
.rdata$r:00001936                 db    0
.rdata$r:00001937                 db    0
.rdata$r:00001938                 db 0FFh
.rdata$r:00001939                 db 0FFh
.rdata$r:0000193A                 db 0FFh
.rdata$r:0000193B                 db 0FFh
.rdata$r:0000193C                 db    0
.rdata$r:0000193D                 db    0
.rdata$r:0000193E                 db    0
.rdata$r:0000193F                 db    0
.rdata$r:00001940                 db  40h ; @
.rdata$r:00001941                 db    0
.rdata$r:00001942                 db    0
.rdata$r:00001943                 db    0
.rdata$r:00001944                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001944 _rdata$r        ends
.rdata$r:00001944
.data:00001948 ; ===========================================================================
.data:00001948
.data:00001948 ; Segment type: Pure data
.data:00001948 ; Segment permissions: Read/Write
.data:00001948 _data           segment dword public 'DATA' use32
.data:00001948                 assume cs:_data
.data:00001948                 ;org 1948h
.data:00001948 ; COMDAT (pick any)
.data:00001948                 public ??_R0?AUICompressCoder@@@8
.data:00001948 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00001948 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00001948                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001948                                         ; .rdata$r:00002BD4o
.data:00001948                                         ; const type_info::`vftable'
.data:0000194C                 align 10h
.data:00001950 a_?auicompressc db '.?AUICompressCoder@@',0
.data:00001965                 align 4
.data:00001965 _data           ends
.data:00001965
.rdata$r:00001968 ; ===========================================================================
.rdata$r:00001968
.rdata$r:00001968 ; Segment type: Pure data
.rdata$r:00001968 ; Segment permissions: Read
.rdata$r:00001968 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001968                 assume cs:_rdata$r
.rdata$r:00001968                 ;org 1968h
.rdata$r:00001968 ; COMDAT (pick any)
.rdata$r:00001968                 public ??_R3ICompressCoder@@8
.rdata$r:00001968 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001968 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00001944o
.rdata$r:00001968                                         ; .rdata$r:00002BD8o
.rdata$r:00001969                 db    0
.rdata$r:0000196A                 db    0
.rdata$r:0000196B                 db    0
.rdata$r:0000196C                 db    0
.rdata$r:0000196D                 db    0
.rdata$r:0000196E                 db    0
.rdata$r:0000196F                 db    0
.rdata$r:00001970                 db    2
.rdata$r:00001971                 db    0
.rdata$r:00001972                 db    0
.rdata$r:00001973                 db    0
.rdata$r:00001974                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00001974 _rdata$r        ends
.rdata$r:00001974
.rdata$r:00001978 ; ===========================================================================
.rdata$r:00001978
.rdata$r:00001978 ; Segment type: Pure data
.rdata$r:00001978 ; Segment permissions: Read
.rdata$r:00001978 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001978                 assume cs:_rdata$r
.rdata$r:00001978                 ;org 1978h
.rdata$r:00001978 ; COMDAT (pick any)
.rdata$r:00001978                 public ??_R2ICompressCoder@@8
.rdata$r:00001978 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00001978 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00001978                                         ; DATA XREF: .rdata$r:00001974o
.rdata$r:00001978                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000197C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001980                 db    0
.rdata$r:00001981                 align 4
.rdata$r:00001981 _rdata$r        ends
.rdata$r:00001981
.rdata$r:00001984 ; ===========================================================================
.rdata$r:00001984
.rdata$r:00001984 ; Segment type: Pure data
.rdata$r:00001984 ; Segment permissions: Read
.rdata$r:00001984 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001984                 assume cs:_rdata$r
.rdata$r:00001984                 ;org 1984h
.rdata$r:00001984 ; COMDAT (pick any)
.rdata$r:00001984                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001984 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001984 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001984                                         ; DATA XREF: .rdata$r:0000197Co
.rdata$r:00001984                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00001984                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001988                 align 10h
.rdata$r:00001990                 db 0FFh
.rdata$r:00001991                 db 0FFh
.rdata$r:00001992                 db 0FFh
.rdata$r:00001993                 db 0FFh
.rdata$r:00001994                 db    0
.rdata$r:00001995                 db    0
.rdata$r:00001996                 db    0
.rdata$r:00001997                 db    0
.rdata$r:00001998                 db  40h ; @
.rdata$r:00001999                 db    0
.rdata$r:0000199A                 db    0
.rdata$r:0000199B                 db    0
.rdata$r:0000199C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000199C _rdata$r        ends
.rdata$r:0000199C
.data:000019A0 ; ===========================================================================
.data:000019A0
.data:000019A0 ; Segment type: Pure data
.data:000019A0 ; Segment permissions: Read/Write
.data:000019A0 _data           segment dword public 'DATA' use32
.data:000019A0                 assume cs:_data
.data:000019A0                 ;org 19A0h
.data:000019A0 ; COMDAT (pick any)
.data:000019A0                 public ??_R0?AUIUnknown@@@8
.data:000019A0 ; struct IUnknown `RTTI Type Descriptor'
.data:000019A0 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000019A0                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000019A0                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:000019A0                                         ; const type_info::`vftable'
.data:000019A4                 align 8
.data:000019A8 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:000019B7                 align 4
.data:000019B7 _data           ends
.data:000019B7
.rdata$r:000019B8 ; ===========================================================================
.rdata$r:000019B8
.rdata$r:000019B8 ; Segment type: Pure data
.rdata$r:000019B8 ; Segment permissions: Read
.rdata$r:000019B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000019B8                 assume cs:_rdata$r
.rdata$r:000019B8                 ;org 19B8h
.rdata$r:000019B8 ; COMDAT (pick any)
.rdata$r:000019B8                 public ??_R3IUnknown@@8
.rdata$r:000019B8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000019B8 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:0000199Co
.rdata$r:000019B8                                         ; .rdata$r:000019E8o ...
.rdata$r:000019B9                 db    0
.rdata$r:000019BA                 db    0
.rdata$r:000019BB                 db    0
.rdata$r:000019BC                 db    0
.rdata$r:000019BD                 db    0
.rdata$r:000019BE                 db    0
.rdata$r:000019BF                 db    0
.rdata$r:000019C0                 db    1
.rdata$r:000019C1                 db    0
.rdata$r:000019C2                 db    0
.rdata$r:000019C3                 db    0
.rdata$r:000019C4                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000019C4 _rdata$r        ends
.rdata$r:000019C4
.rdata$r:000019C8 ; ===========================================================================
.rdata$r:000019C8
.rdata$r:000019C8 ; Segment type: Pure data
.rdata$r:000019C8 ; Segment permissions: Read
.rdata$r:000019C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000019C8                 assume cs:_rdata$r
.rdata$r:000019C8                 ;org 19C8h
.rdata$r:000019C8 ; COMDAT (pick any)
.rdata$r:000019C8                 public ??_R2IUnknown@@8
.rdata$r:000019C8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000019C8 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000019C8                                         ; DATA XREF: .rdata$r:000019C4o
.rdata$r:000019C8                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000019CC                 db    0
.rdata$r:000019CD                 align 10h
.rdata$r:000019CD _rdata$r        ends
.rdata$r:000019CD
.rdata$r:000019D0 ; ===========================================================================
.rdata$r:000019D0
.rdata$r:000019D0 ; Segment type: Pure data
.rdata$r:000019D0 ; Segment permissions: Read
.rdata$r:000019D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000019D0                 assume cs:_rdata$r
.rdata$r:000019D0                 ;org 19D0h
.rdata$r:000019D0 ; COMDAT (pick any)
.rdata$r:000019D0                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:000019D0 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:000019D0 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000019D0                                         ; DATA XREF: .rdata$r:00001890o
.rdata$r:000019D0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000019D4                 db    0
.rdata$r:000019D5                 db    0
.rdata$r:000019D6                 db    0
.rdata$r:000019D7                 db    0
.rdata$r:000019D8                 db    0
.rdata$r:000019D9                 db    0
.rdata$r:000019DA                 db    0
.rdata$r:000019DB                 db    0
.rdata$r:000019DC                 db 0FFh
.rdata$r:000019DD                 db 0FFh
.rdata$r:000019DE                 db 0FFh
.rdata$r:000019DF                 db 0FFh
.rdata$r:000019E0                 db    0
.rdata$r:000019E1                 db    0
.rdata$r:000019E2                 db    0
.rdata$r:000019E3                 db    0
.rdata$r:000019E4                 db  42h ; B
.rdata$r:000019E5                 db    0
.rdata$r:000019E6                 db    0
.rdata$r:000019E7                 db    0
.rdata$r:000019E8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000019E8 _rdata$r        ends
.rdata$r:000019E8
.rdata$r:000019EC ; ===========================================================================
.rdata$r:000019EC
.rdata$r:000019EC ; Segment type: Pure data
.rdata$r:000019EC ; Segment permissions: Read
.rdata$r:000019EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000019EC                 assume cs:_rdata$r
.rdata$r:000019EC                 ;org 19ECh
.rdata$r:000019EC ; COMDAT (pick any)
.rdata$r:000019EC                 public ??_R13?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:000019EC ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000019EC ??_R13?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:000019EC                                         ; DATA XREF: .rdata$r:00001894o
.rdata$r:000019EC                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:000019F0                 db    1
.rdata$r:000019F1                 db    0
.rdata$r:000019F2                 db    0
.rdata$r:000019F3                 db    0
.rdata$r:000019F4                 db    4
.rdata$r:000019F5                 db    0
.rdata$r:000019F6                 db    0
.rdata$r:000019F7                 db    0
.rdata$r:000019F8                 db 0FFh
.rdata$r:000019F9                 db 0FFh
.rdata$r:000019FA                 db 0FFh
.rdata$r:000019FB                 db 0FFh
.rdata$r:000019FC                 db    0
.rdata$r:000019FD                 db    0
.rdata$r:000019FE                 db    0
.rdata$r:000019FF                 db    0
.rdata$r:00001A00                 db  40h ; @
.rdata$r:00001A01                 db    0
.rdata$r:00001A02                 db    0
.rdata$r:00001A03                 db    0
.rdata$r:00001A04                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A04 _rdata$r        ends
.rdata$r:00001A04
.data:00001A08 ; ===========================================================================
.data:00001A08
.data:00001A08 ; Segment type: Pure data
.data:00001A08 ; Segment permissions: Read/Write
.data:00001A08 _data           segment dword public 'DATA' use32
.data:00001A08                 assume cs:_data
.data:00001A08                 ;org 1A08h
.data:00001A08 ; COMDAT (pick any)
.data:00001A08                 public ??_R0?AUICompressSetOutStreamSize@@@8
.data:00001A08 ; struct ICompressSetOutStreamSize `RTTI Type Descriptor'
.data:00001A08 ??_R0?AUICompressSetOutStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:00001A08                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00001A08                                         ; .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001A08                                         ; const type_info::`vftable'
.data:00001A0C                 align 10h
.data:00001A10 a_?auicompresss db '.?AUICompressSetOutStreamSize@@',0
.data:00001A10 _data           ends
.data:00001A10
.rdata$r:00001A30 ; ===========================================================================
.rdata$r:00001A30
.rdata$r:00001A30 ; Segment type: Pure data
.rdata$r:00001A30 ; Segment permissions: Read
.rdata$r:00001A30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001A30                 assume cs:_rdata$r
.rdata$r:00001A30                 ;org 1A30h
.rdata$r:00001A30 ; COMDAT (pick any)
.rdata$r:00001A30                 public ??_R3ICompressSetOutStreamSize@@8
.rdata$r:00001A30 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A30 ??_R3ICompressSetOutStreamSize@@8 db    0 ; DATA XREF: .rdata$r:00001A04o
.rdata$r:00001A30                                         ; .rdata$r:00001A64o ...
.rdata$r:00001A31                 db    0
.rdata$r:00001A32                 db    0
.rdata$r:00001A33                 db    0
.rdata$r:00001A34                 db    0
.rdata$r:00001A35                 db    0
.rdata$r:00001A36                 db    0
.rdata$r:00001A37                 db    0
.rdata$r:00001A38                 db    2
.rdata$r:00001A39                 db    0
.rdata$r:00001A3A                 db    0
.rdata$r:00001A3B                 db    0
.rdata$r:00001A3C                 dd offset ??_R2ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00001A3C _rdata$r        ends
.rdata$r:00001A3C
.rdata$r:00001A40 ; ===========================================================================
.rdata$r:00001A40
.rdata$r:00001A40 ; Segment type: Pure data
.rdata$r:00001A40 ; Segment permissions: Read
.rdata$r:00001A40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001A40                 assume cs:_rdata$r
.rdata$r:00001A40                 ;org 1A40h
.rdata$r:00001A40 ; COMDAT (pick any)
.rdata$r:00001A40                 public ??_R2ICompressSetOutStreamSize@@8
.rdata$r:00001A40 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00001A40 ??_R2ICompressSetOutStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00001A40                                         ; DATA XREF: .rdata$r:00001A3Co
.rdata$r:00001A40                                         ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001A44                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001A48                 db    0
.rdata$r:00001A49                 align 4
.rdata$r:00001A49 _rdata$r        ends
.rdata$r:00001A49
.rdata$r:00001A4C ; ===========================================================================
.rdata$r:00001A4C
.rdata$r:00001A4C ; Segment type: Pure data
.rdata$r:00001A4C ; Segment permissions: Read
.rdata$r:00001A4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001A4C                 assume cs:_rdata$r
.rdata$r:00001A4C                 ;org 1A4Ch
.rdata$r:00001A4C ; COMDAT (pick any)
.rdata$r:00001A4C                 public ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00001A4C ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001A4C ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:00001A4C                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Array'o
.rdata$r:00001A4C                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00001A50                 db    1
.rdata$r:00001A51                 db    0
.rdata$r:00001A52                 db    0
.rdata$r:00001A53                 db    0
.rdata$r:00001A54                 db    0
.rdata$r:00001A55                 db    0
.rdata$r:00001A56                 db    0
.rdata$r:00001A57                 db    0
.rdata$r:00001A58                 db 0FFh
.rdata$r:00001A59                 db 0FFh
.rdata$r:00001A5A                 db 0FFh
.rdata$r:00001A5B                 db 0FFh
.rdata$r:00001A5C                 db    0
.rdata$r:00001A5D                 db    0
.rdata$r:00001A5E                 db    0
.rdata$r:00001A5F                 db    0
.rdata$r:00001A60                 db  40h ; @
.rdata$r:00001A61                 db    0
.rdata$r:00001A62                 db    0
.rdata$r:00001A63                 db    0
.rdata$r:00001A64                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A64 _rdata$r        ends
.rdata$r:00001A64
.rdata$r:00001A68 ; ===========================================================================
.rdata$r:00001A68
.rdata$r:00001A68 ; Segment type: Pure data
.rdata$r:00001A68 ; Segment permissions: Read
.rdata$r:00001A68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001A68                 assume cs:_rdata$r
.rdata$r:00001A68                 ;org 1A68h
.rdata$r:00001A68 ; COMDAT (pick any)
.rdata$r:00001A68                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00001A68 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00001A68 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001A68                                         ; DATA XREF: .rdata$r:00001898o
.rdata$r:00001A68                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001A6C                 align 10h
.rdata$r:00001A70                 db    4
.rdata$r:00001A71                 db    0
.rdata$r:00001A72                 db    0
.rdata$r:00001A73                 db    0
.rdata$r:00001A74                 db 0FFh
.rdata$r:00001A75                 db 0FFh
.rdata$r:00001A76                 db 0FFh
.rdata$r:00001A77                 db 0FFh
.rdata$r:00001A78                 db    0
.rdata$r:00001A79                 db    0
.rdata$r:00001A7A                 db    0
.rdata$r:00001A7B                 db    0
.rdata$r:00001A7C                 db  42h ; B
.rdata$r:00001A7D                 db    0
.rdata$r:00001A7E                 db    0
.rdata$r:00001A7F                 db    0
.rdata$r:00001A80                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A80 _rdata$r        ends
.rdata$r:00001A80
.rdata$r:00001A84 ; ===========================================================================
.rdata$r:00001A84
.rdata$r:00001A84 ; Segment type: Pure data
.rdata$r:00001A84 ; Segment permissions: Read
.rdata$r:00001A84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001A84                 assume cs:_rdata$r
.rdata$r:00001A84                 ;org 1A84h
.rdata$r:00001A84 ; COMDAT (pick any)
.rdata$r:00001A84                 public ??_R17?0A@EA@ICompressInitEncoder@@8
.rdata$r:00001A84 ; ICompressInitEncoder::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00001A84 ??_R17?0A@EA@ICompressInitEncoder@@8 dd offset ??_R0?AUICompressInitEncoder@@@8
.rdata$r:00001A84                                         ; DATA XREF: .rdata$r:0000189Co
.rdata$r:00001A84                                         ; ICompressInitEncoder `RTTI Type Descriptor'
.rdata$r:00001A88                 db    1
.rdata$r:00001A89                 db    0
.rdata$r:00001A8A                 db    0
.rdata$r:00001A8B                 db    0
.rdata$r:00001A8C                 db    8
.rdata$r:00001A8D                 db    0
.rdata$r:00001A8E                 db    0
.rdata$r:00001A8F                 db    0
.rdata$r:00001A90                 db 0FFh
.rdata$r:00001A91                 db 0FFh
.rdata$r:00001A92                 db 0FFh
.rdata$r:00001A93                 db 0FFh
.rdata$r:00001A94                 db    0
.rdata$r:00001A95                 db    0
.rdata$r:00001A96                 db    0
.rdata$r:00001A97                 db    0
.rdata$r:00001A98                 db  40h ; @
.rdata$r:00001A99                 db    0
.rdata$r:00001A9A                 db    0
.rdata$r:00001A9B                 db    0
.rdata$r:00001A9C                 dd offset ??_R3ICompressInitEncoder@@8 ; ICompressInitEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A9C _rdata$r        ends
.rdata$r:00001A9C
.data:00001AA0 ; ===========================================================================
.data:00001AA0
.data:00001AA0 ; Segment type: Pure data
.data:00001AA0 ; Segment permissions: Read/Write
.data:00001AA0 _data           segment dword public 'DATA' use32
.data:00001AA0                 assume cs:_data
.data:00001AA0                 ;org 1AA0h
.data:00001AA0 ; COMDAT (pick any)
.data:00001AA0                 public ??_R0?AUICompressInitEncoder@@@8
.data:00001AA0 ; struct ICompressInitEncoder `RTTI Type Descriptor'
.data:00001AA0 ??_R0?AUICompressInitEncoder@@@8 dd offset ??_7type_info@@6B@
.data:00001AA0                                         ; DATA XREF: .rdata$r:ICompressInitEncoder::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00001AA0                                         ; .rdata$r:ICompressInitEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001AA0                                         ; const type_info::`vftable'
.data:00001AA4                 align 8
.data:00001AA8 a_?auicompressi db '.?AUICompressInitEncoder@@',0
.data:00001AC3                 align 4
.data:00001AC3 _data           ends
.data:00001AC3
.rdata$r:00001AC4 ; ===========================================================================
.rdata$r:00001AC4
.rdata$r:00001AC4 ; Segment type: Pure data
.rdata$r:00001AC4 ; Segment permissions: Read
.rdata$r:00001AC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001AC4                 assume cs:_rdata$r
.rdata$r:00001AC4                 ;org 1AC4h
.rdata$r:00001AC4 ; COMDAT (pick any)
.rdata$r:00001AC4                 public ??_R3ICompressInitEncoder@@8
.rdata$r:00001AC4 ; ICompressInitEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001AC4 ??_R3ICompressInitEncoder@@8 db    0    ; DATA XREF: .rdata$r:00001A9Co
.rdata$r:00001AC4                                         ; .rdata$r:00001AF8o ...
.rdata$r:00001AC5                 db    0
.rdata$r:00001AC6                 db    0
.rdata$r:00001AC7                 db    0
.rdata$r:00001AC8                 db    0
.rdata$r:00001AC9                 db    0
.rdata$r:00001ACA                 db    0
.rdata$r:00001ACB                 db    0
.rdata$r:00001ACC                 db    2
.rdata$r:00001ACD                 db    0
.rdata$r:00001ACE                 db    0
.rdata$r:00001ACF                 db    0
.rdata$r:00001AD0                 dd offset ??_R2ICompressInitEncoder@@8 ; ICompressInitEncoder::`RTTI Base Class Array'
.rdata$r:00001AD0 _rdata$r        ends
.rdata$r:00001AD0
.rdata$r:00001AD4 ; ===========================================================================
.rdata$r:00001AD4
.rdata$r:00001AD4 ; Segment type: Pure data
.rdata$r:00001AD4 ; Segment permissions: Read
.rdata$r:00001AD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001AD4                 assume cs:_rdata$r
.rdata$r:00001AD4                 ;org 1AD4h
.rdata$r:00001AD4 ; COMDAT (pick any)
.rdata$r:00001AD4                 public ??_R2ICompressInitEncoder@@8
.rdata$r:00001AD4 ; ICompressInitEncoder::`RTTI Base Class Array'
.rdata$r:00001AD4 ??_R2ICompressInitEncoder@@8 dd offset ??_R1A@?0A@EA@ICompressInitEncoder@@8
.rdata$r:00001AD4                                         ; DATA XREF: .rdata$r:00001AD0o
.rdata$r:00001AD4                                         ; ICompressInitEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001AD8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001ADC                 db    0
.rdata$r:00001ADD                 align 10h
.rdata$r:00001ADD _rdata$r        ends
.rdata$r:00001ADD
.rdata$r:00001AE0 ; ===========================================================================
.rdata$r:00001AE0
.rdata$r:00001AE0 ; Segment type: Pure data
.rdata$r:00001AE0 ; Segment permissions: Read
.rdata$r:00001AE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001AE0                 assume cs:_rdata$r
.rdata$r:00001AE0                 ;org 1AE0h
.rdata$r:00001AE0 ; COMDAT (pick any)
.rdata$r:00001AE0                 public ??_R1A@?0A@EA@ICompressInitEncoder@@8
.rdata$r:00001AE0 ; ICompressInitEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001AE0 ??_R1A@?0A@EA@ICompressInitEncoder@@8 dd offset ??_R0?AUICompressInitEncoder@@@8
.rdata$r:00001AE0                                         ; DATA XREF: .rdata$r:ICompressInitEncoder::`RTTI Base Class Array'o
.rdata$r:00001AE0                                         ; ICompressInitEncoder `RTTI Type Descriptor'
.rdata$r:00001AE4                 db    1
.rdata$r:00001AE5                 db    0
.rdata$r:00001AE6                 db    0
.rdata$r:00001AE7                 db    0
.rdata$r:00001AE8                 db    0
.rdata$r:00001AE9                 db    0
.rdata$r:00001AEA                 db    0
.rdata$r:00001AEB                 db    0
.rdata$r:00001AEC                 db 0FFh
.rdata$r:00001AED                 db 0FFh
.rdata$r:00001AEE                 db 0FFh
.rdata$r:00001AEF                 db 0FFh
.rdata$r:00001AF0                 db    0
.rdata$r:00001AF1                 db    0
.rdata$r:00001AF2                 db    0
.rdata$r:00001AF3                 db    0
.rdata$r:00001AF4                 db  40h ; @
.rdata$r:00001AF5                 db    0
.rdata$r:00001AF6                 db    0
.rdata$r:00001AF7                 db    0
.rdata$r:00001AF8                 dd offset ??_R3ICompressInitEncoder@@8 ; ICompressInitEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001AF8 _rdata$r        ends
.rdata$r:00001AF8
.rdata$r:00001AFC ; ===========================================================================
.rdata$r:00001AFC
.rdata$r:00001AFC ; Segment type: Pure data
.rdata$r:00001AFC ; Segment permissions: Read
.rdata$r:00001AFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001AFC                 assume cs:_rdata$r
.rdata$r:00001AFC                 ;org 1AFCh
.rdata$r:00001AFC ; COMDAT (pick any)
.rdata$r:00001AFC                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00001AFC ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00001AFC ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001AFC                                         ; DATA XREF: .rdata$r:000018A0o
.rdata$r:00001AFC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001B00                 db    0
.rdata$r:00001B01                 db    0
.rdata$r:00001B02                 db    0
.rdata$r:00001B03                 db    0
.rdata$r:00001B04                 db    8
.rdata$r:00001B05                 db    0
.rdata$r:00001B06                 db    0
.rdata$r:00001B07                 db    0
.rdata$r:00001B08                 db 0FFh
.rdata$r:00001B09                 db 0FFh
.rdata$r:00001B0A                 db 0FFh
.rdata$r:00001B0B                 db 0FFh
.rdata$r:00001B0C                 db    0
.rdata$r:00001B0D                 db    0
.rdata$r:00001B0E                 db    0
.rdata$r:00001B0F                 db    0
.rdata$r:00001B10                 db  42h ; B
.rdata$r:00001B11                 db    0
.rdata$r:00001B12                 db    0
.rdata$r:00001B13                 db    0
.rdata$r:00001B14                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B14 _rdata$r        ends
.rdata$r:00001B14
.rdata$r:00001B18 ; ===========================================================================
.rdata$r:00001B18
.rdata$r:00001B18 ; Segment type: Pure data
.rdata$r:00001B18 ; Segment permissions: Read
.rdata$r:00001B18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B18                 assume cs:_rdata$r
.rdata$r:00001B18                 ;org 1B18h
.rdata$r:00001B18 ; COMDAT (pick any)
.rdata$r:00001B18                 public ??_R1M@?0A@EA@ICompressSetInStream@@8
.rdata$r:00001B18 ; ICompressSetInStream::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00001B18 ??_R1M@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00001B18                                         ; DATA XREF: .rdata$r:000018A4o
.rdata$r:00001B18                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00001B1C                 db    1
.rdata$r:00001B1D                 db    0
.rdata$r:00001B1E                 db    0
.rdata$r:00001B1F                 db    0
.rdata$r:00001B20                 db  0Ch
.rdata$r:00001B21                 db    0
.rdata$r:00001B22                 db    0
.rdata$r:00001B23                 db    0
.rdata$r:00001B24                 db 0FFh
.rdata$r:00001B25                 db 0FFh
.rdata$r:00001B26                 db 0FFh
.rdata$r:00001B27                 db 0FFh
.rdata$r:00001B28                 db    0
.rdata$r:00001B29                 db    0
.rdata$r:00001B2A                 db    0
.rdata$r:00001B2B                 db    0
.rdata$r:00001B2C                 db  40h ; @
.rdata$r:00001B2D                 db    0
.rdata$r:00001B2E                 db    0
.rdata$r:00001B2F                 db    0
.rdata$r:00001B30                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B30 _rdata$r        ends
.rdata$r:00001B30
.data:00001B34 ; ===========================================================================
.data:00001B34
.data:00001B34 ; Segment type: Pure data
.data:00001B34 ; Segment permissions: Read/Write
.data:00001B34 _data           segment dword public 'DATA' use32
.data:00001B34                 assume cs:_data
.data:00001B34                 ;org 1B34h
.data:00001B34 ; COMDAT (pick any)
.data:00001B34                 public ??_R0?AUICompressSetInStream@@@8
.data:00001B34 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:00001B34 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:00001B34                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00001B34                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001B34                                         ; const type_info::`vftable'
.data:00001B38                 db    0
.data:00001B39                 db    0
.data:00001B3A                 db    0
.data:00001B3B                 db    0
.data:00001B3C                 db  2Eh ; .
.data:00001B3D                 db  3Fh ; ?
.data:00001B3E                 db  41h ; A
.data:00001B3F                 db  55h ; U
.data:00001B40                 db  49h ; I
.data:00001B41                 db  43h ; C
.data:00001B42                 db  6Fh ; o
.data:00001B43                 db  6Dh ; m
.data:00001B44                 db  70h ; p
.data:00001B45                 db  72h ; r
.data:00001B46                 db  65h ; e
.data:00001B47                 db  73h ; s
.data:00001B48                 db  73h ; s
.data:00001B49                 db  53h ; S
.data:00001B4A                 db  65h ; e
.data:00001B4B                 db  74h ; t
.data:00001B4C                 db  49h ; I
.data:00001B4D                 db  6Eh ; n
.data:00001B4E                 db  53h ; S
.data:00001B4F                 db  74h ; t
.data:00001B50                 db  72h ; r
.data:00001B51                 db  65h ; e
.data:00001B52                 db  61h ; a
.data:00001B53                 db  6Dh ; m
.data:00001B54                 db  40h ; @
.data:00001B55                 db  40h ; @
.data:00001B56                 db    0
.data:00001B57                 align 4
.data:00001B57 _data           ends
.data:00001B57
.rdata$r:00001B58 ; ===========================================================================
.rdata$r:00001B58
.rdata$r:00001B58 ; Segment type: Pure data
.rdata$r:00001B58 ; Segment permissions: Read
.rdata$r:00001B58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B58                 assume cs:_rdata$r
.rdata$r:00001B58                 ;org 1B58h
.rdata$r:00001B58 ; COMDAT (pick any)
.rdata$r:00001B58                 public ??_R3ICompressSetInStream@@8
.rdata$r:00001B58 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B58 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:00001B30o
.rdata$r:00001B58                                         ; .rdata$r:00001B8Co ...
.rdata$r:00001B59                 db    0
.rdata$r:00001B5A                 db    0
.rdata$r:00001B5B                 db    0
.rdata$r:00001B5C                 db    0
.rdata$r:00001B5D                 db    0
.rdata$r:00001B5E                 db    0
.rdata$r:00001B5F                 db    0
.rdata$r:00001B60                 db    2
.rdata$r:00001B61                 db    0
.rdata$r:00001B62                 db    0
.rdata$r:00001B63                 db    0
.rdata$r:00001B64                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00001B64 _rdata$r        ends
.rdata$r:00001B64
.rdata$r:00001B68 ; ===========================================================================
.rdata$r:00001B68
.rdata$r:00001B68 ; Segment type: Pure data
.rdata$r:00001B68 ; Segment permissions: Read
.rdata$r:00001B68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B68                 assume cs:_rdata$r
.rdata$r:00001B68                 ;org 1B68h
.rdata$r:00001B68 ; COMDAT (pick any)
.rdata$r:00001B68                 public ??_R2ICompressSetInStream@@8
.rdata$r:00001B68 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00001B68 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00001B68                                         ; DATA XREF: .rdata$r:00001B64o
.rdata$r:00001B68                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001B6C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001B70                 db    0
.rdata$r:00001B71                 align 4
.rdata$r:00001B71 _rdata$r        ends
.rdata$r:00001B71
.rdata$r:00001B74 ; ===========================================================================
.rdata$r:00001B74
.rdata$r:00001B74 ; Segment type: Pure data
.rdata$r:00001B74 ; Segment permissions: Read
.rdata$r:00001B74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B74                 assume cs:_rdata$r
.rdata$r:00001B74                 ;org 1B74h
.rdata$r:00001B74 ; COMDAT (pick any)
.rdata$r:00001B74                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00001B74 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001B74 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00001B74                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:00001B74                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00001B78                 db    1
.rdata$r:00001B79                 db    0
.rdata$r:00001B7A                 db    0
.rdata$r:00001B7B                 db    0
.rdata$r:00001B7C                 db    0
.rdata$r:00001B7D                 db    0
.rdata$r:00001B7E                 db    0
.rdata$r:00001B7F                 db    0
.rdata$r:00001B80                 db 0FFh
.rdata$r:00001B81                 db 0FFh
.rdata$r:00001B82                 db 0FFh
.rdata$r:00001B83                 db 0FFh
.rdata$r:00001B84                 db    0
.rdata$r:00001B85                 db    0
.rdata$r:00001B86                 db    0
.rdata$r:00001B87                 db    0
.rdata$r:00001B88                 db  40h ; @
.rdata$r:00001B89                 db    0
.rdata$r:00001B8A                 db    0
.rdata$r:00001B8B                 db    0
.rdata$r:00001B8C                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B8C _rdata$r        ends
.rdata$r:00001B8C
.rdata$r:00001B90 ; ===========================================================================
.rdata$r:00001B90
.rdata$r:00001B90 ; Segment type: Pure data
.rdata$r:00001B90 ; Segment permissions: Read
.rdata$r:00001B90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B90                 assume cs:_rdata$r
.rdata$r:00001B90                 ;org 1B90h
.rdata$r:00001B90 ; COMDAT (pick any)
.rdata$r:00001B90                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00001B90 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00001B90 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001B90                                         ; DATA XREF: .rdata$r:000018A8o
.rdata$r:00001B90                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001B94                 align 8
.rdata$r:00001B98                 db  0Ch
.rdata$r:00001B99                 db    0
.rdata$r:00001B9A                 db    0
.rdata$r:00001B9B                 db    0
.rdata$r:00001B9C                 db 0FFh
.rdata$r:00001B9D                 db 0FFh
.rdata$r:00001B9E                 db 0FFh
.rdata$r:00001B9F                 db 0FFh
.rdata$r:00001BA0                 db    0
.rdata$r:00001BA1                 db    0
.rdata$r:00001BA2                 db    0
.rdata$r:00001BA3                 db    0
.rdata$r:00001BA4                 db  42h ; B
.rdata$r:00001BA5                 db    0
.rdata$r:00001BA6                 db    0
.rdata$r:00001BA7                 db    0
.rdata$r:00001BA8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001BA8 _rdata$r        ends
.rdata$r:00001BA8
.rdata$r:00001BAC ; ===========================================================================
.rdata$r:00001BAC
.rdata$r:00001BAC ; Segment type: Pure data
.rdata$r:00001BAC ; Segment permissions: Read
.rdata$r:00001BAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001BAC                 assume cs:_rdata$r
.rdata$r:00001BAC                 ;org 1BACh
.rdata$r:00001BAC ; COMDAT (pick any)
.rdata$r:00001BAC                 public ??_R1BA@?0A@EA@ISequentialInStream@@8
.rdata$r:00001BAC ; ISequentialInStream::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00001BAC ??_R1BA@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00001BAC                                         ; DATA XREF: .rdata$r:000018ACo
.rdata$r:00001BAC                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00001BB0                 db    1
.rdata$r:00001BB1                 db    0
.rdata$r:00001BB2                 db    0
.rdata$r:00001BB3                 db    0
.rdata$r:00001BB4                 db  10h
.rdata$r:00001BB5                 db    0
.rdata$r:00001BB6                 db    0
.rdata$r:00001BB7                 db    0
.rdata$r:00001BB8                 db 0FFh
.rdata$r:00001BB9                 db 0FFh
.rdata$r:00001BBA                 db 0FFh
.rdata$r:00001BBB                 db 0FFh
.rdata$r:00001BBC                 db    0
.rdata$r:00001BBD                 db    0
.rdata$r:00001BBE                 db    0
.rdata$r:00001BBF                 db    0
.rdata$r:00001BC0                 db  40h ; @
.rdata$r:00001BC1                 db    0
.rdata$r:00001BC2                 db    0
.rdata$r:00001BC3                 db    0
.rdata$r:00001BC4                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001BC4 _rdata$r        ends
.rdata$r:00001BC4
.data:00001BC8 ; ===========================================================================
.data:00001BC8
.data:00001BC8 ; Segment type: Pure data
.data:00001BC8 ; Segment permissions: Read/Write
.data:00001BC8 _data           segment dword public 'DATA' use32
.data:00001BC8                 assume cs:_data
.data:00001BC8                 ;org 1BC8h
.data:00001BC8 ; COMDAT (pick any)
.data:00001BC8                 public ??_R0?AUISequentialInStream@@@8
.data:00001BC8 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00001BC8 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00001BC8                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00001BC8                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001BC8                                         ; const type_info::`vftable'
.data:00001BCC                 align 10h
.data:00001BD0 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:00001BEA                 align 4
.data:00001BEA _data           ends
.data:00001BEA
.rdata$r:00001BEC ; ===========================================================================
.rdata$r:00001BEC
.rdata$r:00001BEC ; Segment type: Pure data
.rdata$r:00001BEC ; Segment permissions: Read
.rdata$r:00001BEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001BEC                 assume cs:_rdata$r
.rdata$r:00001BEC                 ;org 1BECh
.rdata$r:00001BEC ; COMDAT (pick any)
.rdata$r:00001BEC                 public ??_R3ISequentialInStream@@8
.rdata$r:00001BEC ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001BEC ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00001BC4o
.rdata$r:00001BEC                                         ; .rdata$r:00001C20o ...
.rdata$r:00001BED                 db    0
.rdata$r:00001BEE                 db    0
.rdata$r:00001BEF                 db    0
.rdata$r:00001BF0                 db    0
.rdata$r:00001BF1                 db    0
.rdata$r:00001BF2                 db    0
.rdata$r:00001BF3                 db    0
.rdata$r:00001BF4                 db    2
.rdata$r:00001BF5                 db    0
.rdata$r:00001BF6                 db    0
.rdata$r:00001BF7                 db    0
.rdata$r:00001BF8                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00001BF8 _rdata$r        ends
.rdata$r:00001BF8
.rdata$r:00001BFC ; ===========================================================================
.rdata$r:00001BFC
.rdata$r:00001BFC ; Segment type: Pure data
.rdata$r:00001BFC ; Segment permissions: Read
.rdata$r:00001BFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001BFC                 assume cs:_rdata$r
.rdata$r:00001BFC                 ;org 1BFCh
.rdata$r:00001BFC ; COMDAT (pick any)
.rdata$r:00001BFC                 public ??_R2ISequentialInStream@@8
.rdata$r:00001BFC ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00001BFC ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00001BFC                                         ; DATA XREF: .rdata$r:00001BF8o
.rdata$r:00001BFC                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001C00                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001C04                 db    0
.rdata$r:00001C05                 align 4
.rdata$r:00001C05 _rdata$r        ends
.rdata$r:00001C05
.rdata$r:00001C08 ; ===========================================================================
.rdata$r:00001C08
.rdata$r:00001C08 ; Segment type: Pure data
.rdata$r:00001C08 ; Segment permissions: Read
.rdata$r:00001C08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C08                 assume cs:_rdata$r
.rdata$r:00001C08                 ;org 1C08h
.rdata$r:00001C08 ; COMDAT (pick any)
.rdata$r:00001C08                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00001C08 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001C08 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00001C08                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00001C08                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00001C0C                 db    1
.rdata$r:00001C0D                 db    0
.rdata$r:00001C0E                 db    0
.rdata$r:00001C0F                 db    0
.rdata$r:00001C10                 db    0
.rdata$r:00001C11                 db    0
.rdata$r:00001C12                 db    0
.rdata$r:00001C13                 db    0
.rdata$r:00001C14                 db 0FFh
.rdata$r:00001C15                 db 0FFh
.rdata$r:00001C16                 db 0FFh
.rdata$r:00001C17                 db 0FFh
.rdata$r:00001C18                 db    0
.rdata$r:00001C19                 db    0
.rdata$r:00001C1A                 db    0
.rdata$r:00001C1B                 db    0
.rdata$r:00001C1C                 db  40h ; @
.rdata$r:00001C1D                 db    0
.rdata$r:00001C1E                 db    0
.rdata$r:00001C1F                 db    0
.rdata$r:00001C20                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001C20 _rdata$r        ends
.rdata$r:00001C20
.rdata$r:00001C24 ; ===========================================================================
.rdata$r:00001C24
.rdata$r:00001C24 ; Segment type: Pure data
.rdata$r:00001C24 ; Segment permissions: Read
.rdata$r:00001C24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C24                 assume cs:_rdata$r
.rdata$r:00001C24                 ;org 1C24h
.rdata$r:00001C24 ; COMDAT (pick any)
.rdata$r:00001C24                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:00001C24 ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:00001C24 ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001C24                                         ; DATA XREF: .rdata$r:000018B0o
.rdata$r:00001C24                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001C28                 db    0
.rdata$r:00001C29                 db    0
.rdata$r:00001C2A                 db    0
.rdata$r:00001C2B                 db    0
.rdata$r:00001C2C                 db  10h
.rdata$r:00001C2D                 db    0
.rdata$r:00001C2E                 db    0
.rdata$r:00001C2F                 db    0
.rdata$r:00001C30                 db 0FFh
.rdata$r:00001C31                 db 0FFh
.rdata$r:00001C32                 db 0FFh
.rdata$r:00001C33                 db 0FFh
.rdata$r:00001C34                 db    0
.rdata$r:00001C35                 db    0
.rdata$r:00001C36                 db    0
.rdata$r:00001C37                 db    0
.rdata$r:00001C38                 db  42h ; B
.rdata$r:00001C39                 db    0
.rdata$r:00001C3A                 db    0
.rdata$r:00001C3B                 db    0
.rdata$r:00001C3C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001C3C _rdata$r        ends
.rdata$r:00001C3C
.rdata$r:00001C40 ; ===========================================================================
.rdata$r:00001C40
.rdata$r:00001C40 ; Segment type: Pure data
.rdata$r:00001C40 ; Segment permissions: Read
.rdata$r:00001C40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C40                 assume cs:_rdata$r
.rdata$r:00001C40                 ;org 1C40h
.rdata$r:00001C40 ; COMDAT (pick any)
.rdata$r:00001C40                 public ??_R1BE@?0A@EA@ICompressSetOutStream@@8
.rdata$r:00001C40 ; ICompressSetOutStream::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:00001C40 ??_R1BE@?0A@EA@ICompressSetOutStream@@8 dd offset ??_R0?AUICompressSetOutStream@@@8
.rdata$r:00001C40                                         ; DATA XREF: .rdata$r:000018B4o
.rdata$r:00001C40                                         ; ICompressSetOutStream `RTTI Type Descriptor'
.rdata$r:00001C44                 db    1
.rdata$r:00001C45                 db    0
.rdata$r:00001C46                 db    0
.rdata$r:00001C47                 db    0
.rdata$r:00001C48                 db  14h
.rdata$r:00001C49                 db    0
.rdata$r:00001C4A                 db    0
.rdata$r:00001C4B                 db    0
.rdata$r:00001C4C                 db 0FFh
.rdata$r:00001C4D                 db 0FFh
.rdata$r:00001C4E                 db 0FFh
.rdata$r:00001C4F                 db 0FFh
.rdata$r:00001C50                 db    0
.rdata$r:00001C51                 db    0
.rdata$r:00001C52                 db    0
.rdata$r:00001C53                 db    0
.rdata$r:00001C54                 db  40h ; @
.rdata$r:00001C55                 db    0
.rdata$r:00001C56                 db    0
.rdata$r:00001C57                 db    0
.rdata$r:00001C58                 dd offset ??_R3ICompressSetOutStream@@8 ; ICompressSetOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001C58 _rdata$r        ends
.rdata$r:00001C58
.data:00001C5C ; ===========================================================================
.data:00001C5C
.data:00001C5C ; Segment type: Pure data
.data:00001C5C ; Segment permissions: Read/Write
.data:00001C5C _data           segment dword public 'DATA' use32
.data:00001C5C                 assume cs:_data
.data:00001C5C                 ;org 1C5Ch
.data:00001C5C ; COMDAT (pick any)
.data:00001C5C                 public ??_R0?AUICompressSetOutStream@@@8
.data:00001C5C ; struct ICompressSetOutStream `RTTI Type Descriptor'
.data:00001C5C ??_R0?AUICompressSetOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00001C5C                                         ; DATA XREF: .rdata$r:ICompressSetOutStream::`RTTI Base Class Descriptor at (20,-1,0,64)'o
.data:00001C5C                                         ; .rdata$r:ICompressSetOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001C5C                                         ; const type_info::`vftable'
.data:00001C60                 db    0
.data:00001C61                 db    0
.data:00001C62                 db    0
.data:00001C63                 db    0
.data:00001C64                 db  2Eh ; .
.data:00001C65                 db  3Fh ; ?
.data:00001C66                 db  41h ; A
.data:00001C67                 db  55h ; U
.data:00001C68                 db  49h ; I
.data:00001C69                 db  43h ; C
.data:00001C6A                 db  6Fh ; o
.data:00001C6B                 db  6Dh ; m
.data:00001C6C                 db  70h ; p
.data:00001C6D                 db  72h ; r
.data:00001C6E                 db  65h ; e
.data:00001C6F                 db  73h ; s
.data:00001C70                 db  73h ; s
.data:00001C71                 db  53h ; S
.data:00001C72                 db  65h ; e
.data:00001C73                 db  74h ; t
.data:00001C74                 db  4Fh ; O
.data:00001C75                 db  75h ; u
.data:00001C76                 db  74h ; t
.data:00001C77                 db  53h ; S
.data:00001C78                 db  74h ; t
.data:00001C79                 db  72h ; r
.data:00001C7A                 db  65h ; e
.data:00001C7B                 db  61h ; a
.data:00001C7C                 db  6Dh ; m
.data:00001C7D                 db  40h ; @
.data:00001C7E                 db  40h ; @
.data:00001C7F                 db    0
.data:00001C7F _data           ends
.data:00001C7F
.rdata$r:00001C80 ; ===========================================================================
.rdata$r:00001C80
.rdata$r:00001C80 ; Segment type: Pure data
.rdata$r:00001C80 ; Segment permissions: Read
.rdata$r:00001C80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C80                 assume cs:_rdata$r
.rdata$r:00001C80                 ;org 1C80h
.rdata$r:00001C80 ; COMDAT (pick any)
.rdata$r:00001C80                 public ??_R3ICompressSetOutStream@@8
.rdata$r:00001C80 ; ICompressSetOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001C80 ??_R3ICompressSetOutStream@@8 db    0   ; DATA XREF: .rdata$r:00001C58o
.rdata$r:00001C80                                         ; .rdata$r:00001CB4o ...
.rdata$r:00001C81                 db    0
.rdata$r:00001C82                 db    0
.rdata$r:00001C83                 db    0
.rdata$r:00001C84                 db    0
.rdata$r:00001C85                 db    0
.rdata$r:00001C86                 db    0
.rdata$r:00001C87                 db    0
.rdata$r:00001C88                 db    2
.rdata$r:00001C89                 db    0
.rdata$r:00001C8A                 db    0
.rdata$r:00001C8B                 db    0
.rdata$r:00001C8C                 dd offset ??_R2ICompressSetOutStream@@8 ; ICompressSetOutStream::`RTTI Base Class Array'
.rdata$r:00001C8C _rdata$r        ends
.rdata$r:00001C8C
.rdata$r:00001C90 ; ===========================================================================
.rdata$r:00001C90
.rdata$r:00001C90 ; Segment type: Pure data
.rdata$r:00001C90 ; Segment permissions: Read
.rdata$r:00001C90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C90                 assume cs:_rdata$r
.rdata$r:00001C90                 ;org 1C90h
.rdata$r:00001C90 ; COMDAT (pick any)
.rdata$r:00001C90                 public ??_R2ICompressSetOutStream@@8
.rdata$r:00001C90 ; ICompressSetOutStream::`RTTI Base Class Array'
.rdata$r:00001C90 ??_R2ICompressSetOutStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStream@@8
.rdata$r:00001C90                                         ; DATA XREF: .rdata$r:00001C8Co
.rdata$r:00001C90                                         ; ICompressSetOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001C94                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001C98                 db    0
.rdata$r:00001C99                 align 4
.rdata$r:00001C99 _rdata$r        ends
.rdata$r:00001C99
.rdata$r:00001C9C ; ===========================================================================
.rdata$r:00001C9C
.rdata$r:00001C9C ; Segment type: Pure data
.rdata$r:00001C9C ; Segment permissions: Read
.rdata$r:00001C9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C9C                 assume cs:_rdata$r
.rdata$r:00001C9C                 ;org 1C9Ch
.rdata$r:00001C9C ; COMDAT (pick any)
.rdata$r:00001C9C                 public ??_R1A@?0A@EA@ICompressSetOutStream@@8
.rdata$r:00001C9C ; ICompressSetOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001C9C ??_R1A@?0A@EA@ICompressSetOutStream@@8 dd offset ??_R0?AUICompressSetOutStream@@@8
.rdata$r:00001C9C                                         ; DATA XREF: .rdata$r:ICompressSetOutStream::`RTTI Base Class Array'o
.rdata$r:00001C9C                                         ; ICompressSetOutStream `RTTI Type Descriptor'
.rdata$r:00001CA0                 db    1
.rdata$r:00001CA1                 db    0
.rdata$r:00001CA2                 db    0
.rdata$r:00001CA3                 db    0
.rdata$r:00001CA4                 db    0
.rdata$r:00001CA5                 db    0
.rdata$r:00001CA6                 db    0
.rdata$r:00001CA7                 db    0
.rdata$r:00001CA8                 db 0FFh
.rdata$r:00001CA9                 db 0FFh
.rdata$r:00001CAA                 db 0FFh
.rdata$r:00001CAB                 db 0FFh
.rdata$r:00001CAC                 db    0
.rdata$r:00001CAD                 db    0
.rdata$r:00001CAE                 db    0
.rdata$r:00001CAF                 db    0
.rdata$r:00001CB0                 db  40h ; @
.rdata$r:00001CB1                 db    0
.rdata$r:00001CB2                 db    0
.rdata$r:00001CB3                 db    0
.rdata$r:00001CB4                 dd offset ??_R3ICompressSetOutStream@@8 ; ICompressSetOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001CB4 _rdata$r        ends
.rdata$r:00001CB4
.rdata$r:00001CB8 ; ===========================================================================
.rdata$r:00001CB8
.rdata$r:00001CB8 ; Segment type: Pure data
.rdata$r:00001CB8 ; Segment permissions: Read
.rdata$r:00001CB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001CB8                 assume cs:_rdata$r
.rdata$r:00001CB8                 ;org 1CB8h
.rdata$r:00001CB8 ; COMDAT (pick any)
.rdata$r:00001CB8                 public ??_R1BE@?0A@EC@IUnknown@@8
.rdata$r:00001CB8 ; IUnknown::`RTTI Base Class Descriptor at (20, -1, 0, 66)'
.rdata$r:00001CB8 ??_R1BE@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001CB8                                         ; DATA XREF: .rdata$r:000018B8o
.rdata$r:00001CB8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001CBC                 align 10h
.rdata$r:00001CC0                 db  14h
.rdata$r:00001CC1                 db    0
.rdata$r:00001CC2                 db    0
.rdata$r:00001CC3                 db    0
.rdata$r:00001CC4                 db 0FFh
.rdata$r:00001CC5                 db 0FFh
.rdata$r:00001CC6                 db 0FFh
.rdata$r:00001CC7                 db 0FFh
.rdata$r:00001CC8                 db    0
.rdata$r:00001CC9                 db    0
.rdata$r:00001CCA                 db    0
.rdata$r:00001CCB                 db    0
.rdata$r:00001CCC                 db  42h ; B
.rdata$r:00001CCD                 db    0
.rdata$r:00001CCE                 db    0
.rdata$r:00001CCF                 db    0
.rdata$r:00001CD0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001CD0 _rdata$r        ends
.rdata$r:00001CD0
.rdata$r:00001CD4 ; ===========================================================================
.rdata$r:00001CD4
.rdata$r:00001CD4 ; Segment type: Pure data
.rdata$r:00001CD4 ; Segment permissions: Read
.rdata$r:00001CD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001CD4                 assume cs:_rdata$r
.rdata$r:00001CD4                 ;org 1CD4h
.rdata$r:00001CD4 ; COMDAT (pick any)
.rdata$r:00001CD4                 public ??_R1BI@?0A@EA@ISequentialOutStream@@8
.rdata$r:00001CD4 ; ISequentialOutStream::`RTTI Base Class Descriptor at (24, -1, 0, 64)'
.rdata$r:00001CD4 ??_R1BI@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:00001CD4                                         ; DATA XREF: .rdata$r:000018BCo
.rdata$r:00001CD4                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00001CD8                 db    1
.rdata$r:00001CD9                 db    0
.rdata$r:00001CDA                 db    0
.rdata$r:00001CDB                 db    0
.rdata$r:00001CDC                 db  18h
.rdata$r:00001CDD                 db    0
.rdata$r:00001CDE                 db    0
.rdata$r:00001CDF                 db    0
.rdata$r:00001CE0                 db 0FFh
.rdata$r:00001CE1                 db 0FFh
.rdata$r:00001CE2                 db 0FFh
.rdata$r:00001CE3                 db 0FFh
.rdata$r:00001CE4                 db    0
.rdata$r:00001CE5                 db    0
.rdata$r:00001CE6                 db    0
.rdata$r:00001CE7                 db    0
.rdata$r:00001CE8                 db  40h ; @
.rdata$r:00001CE9                 db    0
.rdata$r:00001CEA                 db    0
.rdata$r:00001CEB                 db    0
.rdata$r:00001CEC                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001CEC _rdata$r        ends
.rdata$r:00001CEC
.data:00001CF0 ; ===========================================================================
.data:00001CF0
.data:00001CF0 ; Segment type: Pure data
.data:00001CF0 ; Segment permissions: Read/Write
.data:00001CF0 _data           segment dword public 'DATA' use32
.data:00001CF0                 assume cs:_data
.data:00001CF0                 ;org 1CF0h
.data:00001CF0 ; COMDAT (pick any)
.data:00001CF0                 public ??_R0?AUISequentialOutStream@@@8
.data:00001CF0 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:00001CF0 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00001CF0                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (24,-1,0,64)'o
.data:00001CF0                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001CF0                                         ; const type_info::`vftable'
.data:00001CF4                 align 8
.data:00001CF8 a_?auisequent_0 db '.?AUISequentialOutStream@@',0
.data:00001D13                 align 4
.data:00001D13 _data           ends
.data:00001D13
.rdata$r:00001D14 ; ===========================================================================
.rdata$r:00001D14
.rdata$r:00001D14 ; Segment type: Pure data
.rdata$r:00001D14 ; Segment permissions: Read
.rdata$r:00001D14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D14                 assume cs:_rdata$r
.rdata$r:00001D14                 ;org 1D14h
.rdata$r:00001D14 ; COMDAT (pick any)
.rdata$r:00001D14                 public ??_R3ISequentialOutStream@@8
.rdata$r:00001D14 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001D14 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:00001CECo
.rdata$r:00001D14                                         ; .rdata$r:00001D48o ...
.rdata$r:00001D15                 db    0
.rdata$r:00001D16                 db    0
.rdata$r:00001D17                 db    0
.rdata$r:00001D18                 db    0
.rdata$r:00001D19                 db    0
.rdata$r:00001D1A                 db    0
.rdata$r:00001D1B                 db    0
.rdata$r:00001D1C                 db    2
.rdata$r:00001D1D                 db    0
.rdata$r:00001D1E                 db    0
.rdata$r:00001D1F                 db    0
.rdata$r:00001D20                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00001D20 _rdata$r        ends
.rdata$r:00001D20
.rdata$r:00001D24 ; ===========================================================================
.rdata$r:00001D24
.rdata$r:00001D24 ; Segment type: Pure data
.rdata$r:00001D24 ; Segment permissions: Read
.rdata$r:00001D24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D24                 assume cs:_rdata$r
.rdata$r:00001D24                 ;org 1D24h
.rdata$r:00001D24 ; COMDAT (pick any)
.rdata$r:00001D24                 public ??_R2ISequentialOutStream@@8
.rdata$r:00001D24 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00001D24 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00001D24                                         ; DATA XREF: .rdata$r:00001D20o
.rdata$r:00001D24                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001D28                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001D2C                 db    0
.rdata$r:00001D2D                 align 10h
.rdata$r:00001D2D _rdata$r        ends
.rdata$r:00001D2D
.rdata$r:00001D30 ; ===========================================================================
.rdata$r:00001D30
.rdata$r:00001D30 ; Segment type: Pure data
.rdata$r:00001D30 ; Segment permissions: Read
.rdata$r:00001D30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D30                 assume cs:_rdata$r
.rdata$r:00001D30                 ;org 1D30h
.rdata$r:00001D30 ; COMDAT (pick any)
.rdata$r:00001D30                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00001D30 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001D30 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:00001D30                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:00001D30                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00001D34                 db    1
.rdata$r:00001D35                 db    0
.rdata$r:00001D36                 db    0
.rdata$r:00001D37                 db    0
.rdata$r:00001D38                 db    0
.rdata$r:00001D39                 db    0
.rdata$r:00001D3A                 db    0
.rdata$r:00001D3B                 db    0
.rdata$r:00001D3C                 db 0FFh
.rdata$r:00001D3D                 db 0FFh
.rdata$r:00001D3E                 db 0FFh
.rdata$r:00001D3F                 db 0FFh
.rdata$r:00001D40                 db    0
.rdata$r:00001D41                 db    0
.rdata$r:00001D42                 db    0
.rdata$r:00001D43                 db    0
.rdata$r:00001D44                 db  40h ; @
.rdata$r:00001D45                 db    0
.rdata$r:00001D46                 db    0
.rdata$r:00001D47                 db    0
.rdata$r:00001D48                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001D48 _rdata$r        ends
.rdata$r:00001D48
.rdata$r:00001D4C ; ===========================================================================
.rdata$r:00001D4C
.rdata$r:00001D4C ; Segment type: Pure data
.rdata$r:00001D4C ; Segment permissions: Read
.rdata$r:00001D4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D4C                 assume cs:_rdata$r
.rdata$r:00001D4C                 ;org 1D4Ch
.rdata$r:00001D4C ; COMDAT (pick any)
.rdata$r:00001D4C                 public ??_R1BI@?0A@EC@IUnknown@@8
.rdata$r:00001D4C ; IUnknown::`RTTI Base Class Descriptor at (24, -1, 0, 66)'
.rdata$r:00001D4C ??_R1BI@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001D4C                                         ; DATA XREF: .rdata$r:000018C0o
.rdata$r:00001D4C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001D50                 db    0
.rdata$r:00001D51                 db    0
.rdata$r:00001D52                 db    0
.rdata$r:00001D53                 db    0
.rdata$r:00001D54                 db  18h
.rdata$r:00001D55                 db    0
.rdata$r:00001D56                 db    0
.rdata$r:00001D57                 db    0
.rdata$r:00001D58                 db 0FFh
.rdata$r:00001D59                 db 0FFh
.rdata$r:00001D5A                 db 0FFh
.rdata$r:00001D5B                 db 0FFh
.rdata$r:00001D5C                 db    0
.rdata$r:00001D5D                 db    0
.rdata$r:00001D5E                 db    0
.rdata$r:00001D5F                 db    0
.rdata$r:00001D60                 db  42h ; B
.rdata$r:00001D61                 db    0
.rdata$r:00001D62                 db    0
.rdata$r:00001D63                 db    0
.rdata$r:00001D64                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001D64 _rdata$r        ends
.rdata$r:00001D64
.rdata$r:00001D68 ; ===========================================================================
.rdata$r:00001D68
.rdata$r:00001D68 ; Segment type: Pure data
.rdata$r:00001D68 ; Segment permissions: Read
.rdata$r:00001D68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D68                 assume cs:_rdata$r
.rdata$r:00001D68                 ;org 1D68h
.rdata$r:00001D68 ; COMDAT (pick any)
.rdata$r:00001D68                 public ??_R1BM@?0A@EA@IOutStreamFinish@@8
.rdata$r:00001D68 ; IOutStreamFinish::`RTTI Base Class Descriptor at (28, -1, 0, 64)'
.rdata$r:00001D68 ??_R1BM@?0A@EA@IOutStreamFinish@@8 dd offset ??_R0?AUIOutStreamFinish@@@8
.rdata$r:00001D68                                         ; DATA XREF: .rdata$r:000018C4o
.rdata$r:00001D68                                         ; IOutStreamFinish `RTTI Type Descriptor'
.rdata$r:00001D6C                 db    1
.rdata$r:00001D6D                 db    0
.rdata$r:00001D6E                 db    0
.rdata$r:00001D6F                 db    0
.rdata$r:00001D70                 db  1Ch
.rdata$r:00001D71                 db    0
.rdata$r:00001D72                 db    0
.rdata$r:00001D73                 db    0
.rdata$r:00001D74                 db 0FFh
.rdata$r:00001D75                 db 0FFh
.rdata$r:00001D76                 db 0FFh
.rdata$r:00001D77                 db 0FFh
.rdata$r:00001D78                 db    0
.rdata$r:00001D79                 db    0
.rdata$r:00001D7A                 db    0
.rdata$r:00001D7B                 db    0
.rdata$r:00001D7C                 db  40h ; @
.rdata$r:00001D7D                 db    0
.rdata$r:00001D7E                 db    0
.rdata$r:00001D7F                 db    0
.rdata$r:00001D80                 dd offset ??_R3IOutStreamFinish@@8 ; IOutStreamFinish::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001D80 _rdata$r        ends
.rdata$r:00001D80
.data:00001D84 ; ===========================================================================
.data:00001D84
.data:00001D84 ; Segment type: Pure data
.data:00001D84 ; Segment permissions: Read/Write
.data:00001D84 _data           segment dword public 'DATA' use32
.data:00001D84                 assume cs:_data
.data:00001D84                 ;org 1D84h
.data:00001D84 ; COMDAT (pick any)
.data:00001D84                 public ??_R0?AUIOutStreamFinish@@@8
.data:00001D84 ; struct IOutStreamFinish `RTTI Type Descriptor'
.data:00001D84 ??_R0?AUIOutStreamFinish@@@8 dd offset ??_7type_info@@6B@
.data:00001D84                                         ; DATA XREF: .rdata$r:IOutStreamFinish::`RTTI Base Class Descriptor at (28,-1,0,64)'o
.data:00001D84                                         ; .rdata$r:IOutStreamFinish::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001D84                                         ; const type_info::`vftable'
.data:00001D88                 db    0
.data:00001D89                 db    0
.data:00001D8A                 db    0
.data:00001D8B                 db    0
.data:00001D8C                 db  2Eh ; .
.data:00001D8D                 db  3Fh ; ?
.data:00001D8E                 db  41h ; A
.data:00001D8F                 db  55h ; U
.data:00001D90                 db  49h ; I
.data:00001D91                 db  4Fh ; O
.data:00001D92                 db  75h ; u
.data:00001D93                 db  74h ; t
.data:00001D94                 db  53h ; S
.data:00001D95                 db  74h ; t
.data:00001D96                 db  72h ; r
.data:00001D97                 db  65h ; e
.data:00001D98                 db  61h ; a
.data:00001D99                 db  6Dh ; m
.data:00001D9A                 db  46h ; F
.data:00001D9B                 db  69h ; i
.data:00001D9C                 db  6Eh ; n
.data:00001D9D                 db  69h ; i
.data:00001D9E                 db  73h ; s
.data:00001D9F                 db  68h ; h
.data:00001DA0                 db  40h ; @
.data:00001DA1                 db  40h ; @
.data:00001DA2                 db    0
.data:00001DA3                 align 4
.data:00001DA3 _data           ends
.data:00001DA3
.rdata$r:00001DA4 ; ===========================================================================
.rdata$r:00001DA4
.rdata$r:00001DA4 ; Segment type: Pure data
.rdata$r:00001DA4 ; Segment permissions: Read
.rdata$r:00001DA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001DA4                 assume cs:_rdata$r
.rdata$r:00001DA4                 ;org 1DA4h
.rdata$r:00001DA4 ; COMDAT (pick any)
.rdata$r:00001DA4                 public ??_R3IOutStreamFinish@@8
.rdata$r:00001DA4 ; IOutStreamFinish::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001DA4 ??_R3IOutStreamFinish@@8 db    0        ; DATA XREF: .rdata$r:00001D80o
.rdata$r:00001DA4                                         ; .rdata$r:00001DD8o ...
.rdata$r:00001DA5                 db    0
.rdata$r:00001DA6                 db    0
.rdata$r:00001DA7                 db    0
.rdata$r:00001DA8                 db    0
.rdata$r:00001DA9                 db    0
.rdata$r:00001DAA                 db    0
.rdata$r:00001DAB                 db    0
.rdata$r:00001DAC                 db    2
.rdata$r:00001DAD                 db    0
.rdata$r:00001DAE                 db    0
.rdata$r:00001DAF                 db    0
.rdata$r:00001DB0                 dd offset ??_R2IOutStreamFinish@@8 ; IOutStreamFinish::`RTTI Base Class Array'
.rdata$r:00001DB0 _rdata$r        ends
.rdata$r:00001DB0
.rdata$r:00001DB4 ; ===========================================================================
.rdata$r:00001DB4
.rdata$r:00001DB4 ; Segment type: Pure data
.rdata$r:00001DB4 ; Segment permissions: Read
.rdata$r:00001DB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001DB4                 assume cs:_rdata$r
.rdata$r:00001DB4                 ;org 1DB4h
.rdata$r:00001DB4 ; COMDAT (pick any)
.rdata$r:00001DB4                 public ??_R2IOutStreamFinish@@8
.rdata$r:00001DB4 ; IOutStreamFinish::`RTTI Base Class Array'
.rdata$r:00001DB4 ??_R2IOutStreamFinish@@8 dd offset ??_R1A@?0A@EA@IOutStreamFinish@@8
.rdata$r:00001DB4                                         ; DATA XREF: .rdata$r:00001DB0o
.rdata$r:00001DB4                                         ; IOutStreamFinish::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001DB8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001DBC                 db    0
.rdata$r:00001DBD                 align 10h
.rdata$r:00001DBD _rdata$r        ends
.rdata$r:00001DBD
.rdata$r:00001DC0 ; ===========================================================================
.rdata$r:00001DC0
.rdata$r:00001DC0 ; Segment type: Pure data
.rdata$r:00001DC0 ; Segment permissions: Read
.rdata$r:00001DC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001DC0                 assume cs:_rdata$r
.rdata$r:00001DC0                 ;org 1DC0h
.rdata$r:00001DC0 ; COMDAT (pick any)
.rdata$r:00001DC0                 public ??_R1A@?0A@EA@IOutStreamFinish@@8
.rdata$r:00001DC0 ; IOutStreamFinish::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001DC0 ??_R1A@?0A@EA@IOutStreamFinish@@8 dd offset ??_R0?AUIOutStreamFinish@@@8
.rdata$r:00001DC0                                         ; DATA XREF: .rdata$r:IOutStreamFinish::`RTTI Base Class Array'o
.rdata$r:00001DC0                                         ; IOutStreamFinish `RTTI Type Descriptor'
.rdata$r:00001DC4                 db    1
.rdata$r:00001DC5                 db    0
.rdata$r:00001DC6                 db    0
.rdata$r:00001DC7                 db    0
.rdata$r:00001DC8                 db    0
.rdata$r:00001DC9                 db    0
.rdata$r:00001DCA                 db    0
.rdata$r:00001DCB                 db    0
.rdata$r:00001DCC                 db 0FFh
.rdata$r:00001DCD                 db 0FFh
.rdata$r:00001DCE                 db 0FFh
.rdata$r:00001DCF                 db 0FFh
.rdata$r:00001DD0                 db    0
.rdata$r:00001DD1                 db    0
.rdata$r:00001DD2                 db    0
.rdata$r:00001DD3                 db    0
.rdata$r:00001DD4                 db  40h ; @
.rdata$r:00001DD5                 db    0
.rdata$r:00001DD6                 db    0
.rdata$r:00001DD7                 db    0
.rdata$r:00001DD8                 dd offset ??_R3IOutStreamFinish@@8 ; IOutStreamFinish::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001DD8 _rdata$r        ends
.rdata$r:00001DD8
.rdata$r:00001DDC ; ===========================================================================
.rdata$r:00001DDC
.rdata$r:00001DDC ; Segment type: Pure data
.rdata$r:00001DDC ; Segment permissions: Read
.rdata$r:00001DDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001DDC                 assume cs:_rdata$r
.rdata$r:00001DDC                 ;org 1DDCh
.rdata$r:00001DDC ; COMDAT (pick any)
.rdata$r:00001DDC                 public ??_R1BM@?0A@EC@IUnknown@@8
.rdata$r:00001DDC ; IUnknown::`RTTI Base Class Descriptor at (28, -1, 0, 66)'
.rdata$r:00001DDC ??_R1BM@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001DDC                                         ; DATA XREF: .rdata$r:000018C8o
.rdata$r:00001DDC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001DE0                 db    0
.rdata$r:00001DE1                 db    0
.rdata$r:00001DE2                 db    0
.rdata$r:00001DE3                 db    0
.rdata$r:00001DE4                 db  1Ch
.rdata$r:00001DE5                 db    0
.rdata$r:00001DE6                 db    0
.rdata$r:00001DE7                 db    0
.rdata$r:00001DE8                 db 0FFh
.rdata$r:00001DE9                 db 0FFh
.rdata$r:00001DEA                 db 0FFh
.rdata$r:00001DEB                 db 0FFh
.rdata$r:00001DEC                 db    0
.rdata$r:00001DED                 db    0
.rdata$r:00001DEE                 db    0
.rdata$r:00001DEF                 db    0
.rdata$r:00001DF0                 db  42h ; B
.rdata$r:00001DF1                 db    0
.rdata$r:00001DF2                 db    0
.rdata$r:00001DF3                 db    0
.rdata$r:00001DF4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001DF4 _rdata$r        ends
.rdata$r:00001DF4
.rdata$r:00001DF8 ; ===========================================================================
.rdata$r:00001DF8
.rdata$r:00001DF8 ; Segment type: Pure data
.rdata$r:00001DF8 ; Segment permissions: Read
.rdata$r:00001DF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001DF8                 assume cs:_rdata$r
.rdata$r:00001DF8                 ;org 1DF8h
.rdata$r:00001DF8 ; COMDAT (pick any)
.rdata$r:00001DF8                 public ??_R1CA@?0A@EA@ICompressSetBufSize@@8
.rdata$r:00001DF8 ; ICompressSetBufSize::`RTTI Base Class Descriptor at (32, -1, 0, 64)'
.rdata$r:00001DF8 ??_R1CA@?0A@EA@ICompressSetBufSize@@8 dd offset ??_R0?AUICompressSetBufSize@@@8
.rdata$r:00001DF8                                         ; DATA XREF: .rdata$r:000018CCo
.rdata$r:00001DF8                                         ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:00001DFC                 db    1
.rdata$r:00001DFD                 db    0
.rdata$r:00001DFE                 db    0
.rdata$r:00001DFF                 db    0
.rdata$r:00001E00                 db  20h
.rdata$r:00001E01                 db    0
.rdata$r:00001E02                 db    0
.rdata$r:00001E03                 db    0
.rdata$r:00001E04                 db 0FFh
.rdata$r:00001E05                 db 0FFh
.rdata$r:00001E06                 db 0FFh
.rdata$r:00001E07                 db 0FFh
.rdata$r:00001E08                 db    0
.rdata$r:00001E09                 db    0
.rdata$r:00001E0A                 db    0
.rdata$r:00001E0B                 db    0
.rdata$r:00001E0C                 db  40h ; @
.rdata$r:00001E0D                 db    0
.rdata$r:00001E0E                 db    0
.rdata$r:00001E0F                 db    0
.rdata$r:00001E10                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E10 _rdata$r        ends
.rdata$r:00001E10
.data:00001E14 ; ===========================================================================
.data:00001E14
.data:00001E14 ; Segment type: Pure data
.data:00001E14 ; Segment permissions: Read/Write
.data:00001E14 _data           segment dword public 'DATA' use32
.data:00001E14                 assume cs:_data
.data:00001E14                 ;org 1E14h
.data:00001E14 ; COMDAT (pick any)
.data:00001E14                 public ??_R0?AUICompressSetBufSize@@@8
.data:00001E14 ; struct ICompressSetBufSize `RTTI Type Descriptor'
.data:00001E14 ??_R0?AUICompressSetBufSize@@@8 dd offset ??_7type_info@@6B@
.data:00001E14                                         ; DATA XREF: .rdata$r:ICompressSetBufSize::`RTTI Base Class Descriptor at (32,-1,0,64)'o
.data:00001E14                                         ; .rdata$r:ICompressSetBufSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001E14                                         ; const type_info::`vftable'
.data:00001E18                 db    0
.data:00001E19                 db    0
.data:00001E1A                 db    0
.data:00001E1B                 db    0
.data:00001E1C                 db  2Eh ; .
.data:00001E1D                 db  3Fh ; ?
.data:00001E1E                 db  41h ; A
.data:00001E1F                 db  55h ; U
.data:00001E20                 db  49h ; I
.data:00001E21                 db  43h ; C
.data:00001E22                 db  6Fh ; o
.data:00001E23                 db  6Dh ; m
.data:00001E24                 db  70h ; p
.data:00001E25                 db  72h ; r
.data:00001E26                 db  65h ; e
.data:00001E27                 db  73h ; s
.data:00001E28                 db  73h ; s
.data:00001E29                 db  53h ; S
.data:00001E2A                 db  65h ; e
.data:00001E2B                 db  74h ; t
.data:00001E2C                 db  42h ; B
.data:00001E2D                 db  75h ; u
.data:00001E2E                 db  66h ; f
.data:00001E2F                 db  53h ; S
.data:00001E30                 db  69h ; i
.data:00001E31                 db  7Ah ; z
.data:00001E32                 db  65h ; e
.data:00001E33                 db  40h ; @
.data:00001E34                 db  40h ; @
.data:00001E35                 db    0
.data:00001E36                 align 4
.data:00001E36 _data           ends
.data:00001E36
.rdata$r:00001E38 ; ===========================================================================
.rdata$r:00001E38
.rdata$r:00001E38 ; Segment type: Pure data
.rdata$r:00001E38 ; Segment permissions: Read
.rdata$r:00001E38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E38                 assume cs:_rdata$r
.rdata$r:00001E38                 ;org 1E38h
.rdata$r:00001E38 ; COMDAT (pick any)
.rdata$r:00001E38                 public ??_R3ICompressSetBufSize@@8
.rdata$r:00001E38 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E38 ??_R3ICompressSetBufSize@@8 db    0     ; DATA XREF: .rdata$r:00001E10o
.rdata$r:00001E38                                         ; .rdata$r:00001E6Co ...
.rdata$r:00001E39                 db    0
.rdata$r:00001E3A                 db    0
.rdata$r:00001E3B                 db    0
.rdata$r:00001E3C                 db    0
.rdata$r:00001E3D                 db    0
.rdata$r:00001E3E                 db    0
.rdata$r:00001E3F                 db    0
.rdata$r:00001E40                 db    2
.rdata$r:00001E41                 db    0
.rdata$r:00001E42                 db    0
.rdata$r:00001E43                 db    0
.rdata$r:00001E44                 dd offset ??_R2ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Base Class Array'
.rdata$r:00001E44 _rdata$r        ends
.rdata$r:00001E44
.rdata$r:00001E48 ; ===========================================================================
.rdata$r:00001E48
.rdata$r:00001E48 ; Segment type: Pure data
.rdata$r:00001E48 ; Segment permissions: Read
.rdata$r:00001E48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E48                 assume cs:_rdata$r
.rdata$r:00001E48                 ;org 1E48h
.rdata$r:00001E48 ; COMDAT (pick any)
.rdata$r:00001E48                 public ??_R2ICompressSetBufSize@@8
.rdata$r:00001E48 ; ICompressSetBufSize::`RTTI Base Class Array'
.rdata$r:00001E48 ??_R2ICompressSetBufSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetBufSize@@8
.rdata$r:00001E48                                         ; DATA XREF: .rdata$r:00001E44o
.rdata$r:00001E48                                         ; ICompressSetBufSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001E4C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001E50                 db    0
.rdata$r:00001E51                 align 4
.rdata$r:00001E51 _rdata$r        ends
.rdata$r:00001E51
.rdata$r:00001E54 ; ===========================================================================
.rdata$r:00001E54
.rdata$r:00001E54 ; Segment type: Pure data
.rdata$r:00001E54 ; Segment permissions: Read
.rdata$r:00001E54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E54                 assume cs:_rdata$r
.rdata$r:00001E54                 ;org 1E54h
.rdata$r:00001E54 ; COMDAT (pick any)
.rdata$r:00001E54                 public ??_R1A@?0A@EA@ICompressSetBufSize@@8
.rdata$r:00001E54 ; ICompressSetBufSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001E54 ??_R1A@?0A@EA@ICompressSetBufSize@@8 dd offset ??_R0?AUICompressSetBufSize@@@8
.rdata$r:00001E54                                         ; DATA XREF: .rdata$r:ICompressSetBufSize::`RTTI Base Class Array'o
.rdata$r:00001E54                                         ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:00001E58                 db    1
.rdata$r:00001E59                 db    0
.rdata$r:00001E5A                 db    0
.rdata$r:00001E5B                 db    0
.rdata$r:00001E5C                 db    0
.rdata$r:00001E5D                 db    0
.rdata$r:00001E5E                 db    0
.rdata$r:00001E5F                 db    0
.rdata$r:00001E60                 db 0FFh
.rdata$r:00001E61                 db 0FFh
.rdata$r:00001E62                 db 0FFh
.rdata$r:00001E63                 db 0FFh
.rdata$r:00001E64                 db    0
.rdata$r:00001E65                 db    0
.rdata$r:00001E66                 db    0
.rdata$r:00001E67                 db    0
.rdata$r:00001E68                 db  40h ; @
.rdata$r:00001E69                 db    0
.rdata$r:00001E6A                 db    0
.rdata$r:00001E6B                 db    0
.rdata$r:00001E6C                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E6C _rdata$r        ends
.rdata$r:00001E6C
.rdata$r:00001E70 ; ===========================================================================
.rdata$r:00001E70
.rdata$r:00001E70 ; Segment type: Pure data
.rdata$r:00001E70 ; Segment permissions: Read
.rdata$r:00001E70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E70                 assume cs:_rdata$r
.rdata$r:00001E70                 ;org 1E70h
.rdata$r:00001E70 ; COMDAT (pick any)
.rdata$r:00001E70                 public ??_R1CA@?0A@EC@IUnknown@@8
.rdata$r:00001E70 ; IUnknown::`RTTI Base Class Descriptor at (32, -1, 0, 66)'
.rdata$r:00001E70 ??_R1CA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001E70                                         ; DATA XREF: .rdata$r:000018D0o
.rdata$r:00001E70                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001E74                 align 8
.rdata$r:00001E78                 dd offset ?SetOutBufSize@CFilterCoder@@UAGJII@Z ; CFilterCoder::SetOutBufSize(uint,uint)
.rdata$r:00001E7C                 db 0FFh
.rdata$r:00001E7D                 db 0FFh
.rdata$r:00001E7E                 db 0FFh
.rdata$r:00001E7F                 db 0FFh
.rdata$r:00001E80                 db    0
.rdata$r:00001E81                 db    0
.rdata$r:00001E82                 db    0
.rdata$r:00001E83                 db    0
.rdata$r:00001E84                 db  42h ; B
.rdata$r:00001E85                 db    0
.rdata$r:00001E86                 db    0
.rdata$r:00001E87                 db    0
.rdata$r:00001E88                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E88 _rdata$r        ends
.rdata$r:00001E88
.rdata$r:00001E8C ; ===========================================================================
.rdata$r:00001E8C
.rdata$r:00001E8C ; Segment type: Pure data
.rdata$r:00001E8C ; Segment permissions: Read
.rdata$r:00001E8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E8C                 assume cs:_rdata$r
.rdata$r:00001E8C                 ;org 1E8Ch
.rdata$r:00001E8C ; COMDAT (pick any)
.rdata$r:00001E8C                 public ??_R1CE@?0A@EA@ICryptoSetPassword@@8
.rdata$r:00001E8C ; ICryptoSetPassword::`RTTI Base Class Descriptor at (36, -1, 0, 64)'
.rdata$r:00001E8C ??_R1CE@?0A@EA@ICryptoSetPassword@@8 dd offset ??_R0?AUICryptoSetPassword@@@8
.rdata$r:00001E8C                                         ; DATA XREF: .rdata$r:000018D4o
.rdata$r:00001E8C                                         ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:00001E90                 db    1
.rdata$r:00001E91                 db    0
.rdata$r:00001E92                 db    0
.rdata$r:00001E93                 db    0
.rdata$r:00001E94                 db  24h ; $
.rdata$r:00001E95                 db    0
.rdata$r:00001E96                 db    0
.rdata$r:00001E97                 db    0
.rdata$r:00001E98                 db 0FFh
.rdata$r:00001E99                 db 0FFh
.rdata$r:00001E9A                 db 0FFh
.rdata$r:00001E9B                 db 0FFh
.rdata$r:00001E9C                 db    0
.rdata$r:00001E9D                 db    0
.rdata$r:00001E9E                 db    0
.rdata$r:00001E9F                 db    0
.rdata$r:00001EA0                 db  40h ; @
.rdata$r:00001EA1                 db    0
.rdata$r:00001EA2                 db    0
.rdata$r:00001EA3                 db    0
.rdata$r:00001EA4                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001EA4 _rdata$r        ends
.rdata$r:00001EA4
.data:00001EA8 ; ===========================================================================
.data:00001EA8
.data:00001EA8 ; Segment type: Pure data
.data:00001EA8 ; Segment permissions: Read/Write
.data:00001EA8 _data           segment dword public 'DATA' use32
.data:00001EA8                 assume cs:_data
.data:00001EA8                 ;org 1EA8h
.data:00001EA8 ; COMDAT (pick any)
.data:00001EA8                 public ??_R0?AUICryptoSetPassword@@@8
.data:00001EA8 ; struct ICryptoSetPassword `RTTI Type Descriptor'
.data:00001EA8 ??_R0?AUICryptoSetPassword@@@8 dd offset ??_7type_info@@6B@
.data:00001EA8                                         ; DATA XREF: .rdata$r:ICryptoSetPassword::`RTTI Base Class Descriptor at (36,-1,0,64)'o
.data:00001EA8                                         ; .rdata$r:ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001EA8                                         ; const type_info::`vftable'
.data:00001EAC                 align 10h
.data:00001EB0 a_?auicryptoset db '.?AUICryptoSetPassword@@',0
.data:00001EC9                 align 4
.data:00001EC9 _data           ends
.data:00001EC9
.rdata$r:00001ECC ; ===========================================================================
.rdata$r:00001ECC
.rdata$r:00001ECC ; Segment type: Pure data
.rdata$r:00001ECC ; Segment permissions: Read
.rdata$r:00001ECC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001ECC                 assume cs:_rdata$r
.rdata$r:00001ECC                 ;org 1ECCh
.rdata$r:00001ECC ; COMDAT (pick any)
.rdata$r:00001ECC                 public ??_R3ICryptoSetPassword@@8
.rdata$r:00001ECC ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001ECC ??_R3ICryptoSetPassword@@8 db    0      ; DATA XREF: .rdata$r:00001EA4o
.rdata$r:00001ECC                                         ; .rdata$r:00001F00o ...
.rdata$r:00001ECD                 db    0
.rdata$r:00001ECE                 db    0
.rdata$r:00001ECF                 db    0
.rdata$r:00001ED0                 db    0
.rdata$r:00001ED1                 db    0
.rdata$r:00001ED2                 db    0
.rdata$r:00001ED3                 db    0
.rdata$r:00001ED4                 db    2
.rdata$r:00001ED5                 db    0
.rdata$r:00001ED6                 db    0
.rdata$r:00001ED7                 db    0
.rdata$r:00001ED8                 dd offset ??_R2ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Array'
.rdata$r:00001ED8 _rdata$r        ends
.rdata$r:00001ED8
.rdata$r:00001EDC ; ===========================================================================
.rdata$r:00001EDC
.rdata$r:00001EDC ; Segment type: Pure data
.rdata$r:00001EDC ; Segment permissions: Read
.rdata$r:00001EDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EDC                 assume cs:_rdata$r
.rdata$r:00001EDC                 ;org 1EDCh
.rdata$r:00001EDC ; COMDAT (pick any)
.rdata$r:00001EDC                 public ??_R2ICryptoSetPassword@@8
.rdata$r:00001EDC ; ICryptoSetPassword::`RTTI Base Class Array'
.rdata$r:00001EDC ??_R2ICryptoSetPassword@@8 dd offset ??_R1A@?0A@EA@ICryptoSetPassword@@8
.rdata$r:00001EDC                                         ; DATA XREF: .rdata$r:00001ED8o
.rdata$r:00001EDC                                         ; ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001EE0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001EE4                 db    0
.rdata$r:00001EE5                 align 4
.rdata$r:00001EE5 _rdata$r        ends
.rdata$r:00001EE5
.rdata$r:00001EE8 ; ===========================================================================
.rdata$r:00001EE8
.rdata$r:00001EE8 ; Segment type: Pure data
.rdata$r:00001EE8 ; Segment permissions: Read
.rdata$r:00001EE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EE8                 assume cs:_rdata$r
.rdata$r:00001EE8                 ;org 1EE8h
.rdata$r:00001EE8 ; COMDAT (pick any)
.rdata$r:00001EE8                 public ??_R1A@?0A@EA@ICryptoSetPassword@@8
.rdata$r:00001EE8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001EE8 ??_R1A@?0A@EA@ICryptoSetPassword@@8 dd offset ??_R0?AUICryptoSetPassword@@@8
.rdata$r:00001EE8                                         ; DATA XREF: .rdata$r:ICryptoSetPassword::`RTTI Base Class Array'o
.rdata$r:00001EE8                                         ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:00001EEC                 db    1
.rdata$r:00001EED                 db    0
.rdata$r:00001EEE                 db    0
.rdata$r:00001EEF                 db    0
.rdata$r:00001EF0                 db    0
.rdata$r:00001EF1                 db    0
.rdata$r:00001EF2                 db    0
.rdata$r:00001EF3                 db    0
.rdata$r:00001EF4                 db 0FFh
.rdata$r:00001EF5                 db 0FFh
.rdata$r:00001EF6                 db 0FFh
.rdata$r:00001EF7                 db 0FFh
.rdata$r:00001EF8                 db    0
.rdata$r:00001EF9                 db    0
.rdata$r:00001EFA                 db    0
.rdata$r:00001EFB                 db    0
.rdata$r:00001EFC                 db  40h ; @
.rdata$r:00001EFD                 db    0
.rdata$r:00001EFE                 db    0
.rdata$r:00001EFF                 db    0
.rdata$r:00001F00                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F00 _rdata$r        ends
.rdata$r:00001F00
.rdata$r:00001F04 ; ===========================================================================
.rdata$r:00001F04
.rdata$r:00001F04 ; Segment type: Pure data
.rdata$r:00001F04 ; Segment permissions: Read
.rdata$r:00001F04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F04                 assume cs:_rdata$r
.rdata$r:00001F04                 ;org 1F04h
.rdata$r:00001F04 ; COMDAT (pick any)
.rdata$r:00001F04                 public ??_R1CE@?0A@EC@IUnknown@@8
.rdata$r:00001F04 ; IUnknown::`RTTI Base Class Descriptor at (36, -1, 0, 66)'
.rdata$r:00001F04 ??_R1CE@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001F04                                         ; DATA XREF: .rdata$r:000018D8o
.rdata$r:00001F04                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001F08                 db    0
.rdata$r:00001F09                 db    0
.rdata$r:00001F0A                 db    0
.rdata$r:00001F0B                 db    0
.rdata$r:00001F0C                 db  24h ; $
.rdata$r:00001F0D                 db    0
.rdata$r:00001F0E                 db    0
.rdata$r:00001F0F                 db    0
.rdata$r:00001F10                 db 0FFh
.rdata$r:00001F11                 db 0FFh
.rdata$r:00001F12                 db 0FFh
.rdata$r:00001F13                 db 0FFh
.rdata$r:00001F14                 db    0
.rdata$r:00001F15                 db    0
.rdata$r:00001F16                 db    0
.rdata$r:00001F17                 db    0
.rdata$r:00001F18                 db  42h ; B
.rdata$r:00001F19                 db    0
.rdata$r:00001F1A                 db    0
.rdata$r:00001F1B                 db    0
.rdata$r:00001F1C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F1C _rdata$r        ends
.rdata$r:00001F1C
.rdata$r:00001F20 ; ===========================================================================
.rdata$r:00001F20
.rdata$r:00001F20 ; Segment type: Pure data
.rdata$r:00001F20 ; Segment permissions: Read
.rdata$r:00001F20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F20                 assume cs:_rdata$r
.rdata$r:00001F20                 ;org 1F20h
.rdata$r:00001F20 ; COMDAT (pick any)
.rdata$r:00001F20                 public ??_R1CI@?0A@EA@ICryptoProperties@@8
.rdata$r:00001F20 ; ICryptoProperties::`RTTI Base Class Descriptor at (40, -1, 0, 64)'
.rdata$r:00001F20 ??_R1CI@?0A@EA@ICryptoProperties@@8 dd offset ??_R0?AUICryptoProperties@@@8
.rdata$r:00001F20                                         ; DATA XREF: .rdata$r:000018DCo
.rdata$r:00001F20                                         ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:00001F24                 db    1
.rdata$r:00001F25                 db    0
.rdata$r:00001F26                 db    0
.rdata$r:00001F27                 db    0
.rdata$r:00001F28                 db  28h ; (
.rdata$r:00001F29                 db    0
.rdata$r:00001F2A                 db    0
.rdata$r:00001F2B                 db    0
.rdata$r:00001F2C                 db 0FFh
.rdata$r:00001F2D                 db 0FFh
.rdata$r:00001F2E                 db 0FFh
.rdata$r:00001F2F                 db 0FFh
.rdata$r:00001F30                 db    0
.rdata$r:00001F31                 db    0
.rdata$r:00001F32                 db    0
.rdata$r:00001F33                 db    0
.rdata$r:00001F34                 db  40h ; @
.rdata$r:00001F35                 db    0
.rdata$r:00001F36                 db    0
.rdata$r:00001F37                 db    0
.rdata$r:00001F38                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F38 _rdata$r        ends
.rdata$r:00001F38
.data:00001F3C ; ===========================================================================
.data:00001F3C
.data:00001F3C ; Segment type: Pure data
.data:00001F3C ; Segment permissions: Read/Write
.data:00001F3C _data           segment dword public 'DATA' use32
.data:00001F3C                 assume cs:_data
.data:00001F3C                 ;org 1F3Ch
.data:00001F3C ; COMDAT (pick any)
.data:00001F3C                 public ??_R0?AUICryptoProperties@@@8
.data:00001F3C ; struct ICryptoProperties `RTTI Type Descriptor'
.data:00001F3C ??_R0?AUICryptoProperties@@@8 dd offset ??_7type_info@@6B@
.data:00001F3C                                         ; DATA XREF: .rdata$r:ICryptoProperties::`RTTI Base Class Descriptor at (40,-1,0,64)'o
.data:00001F3C                                         ; .rdata$r:ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001F3C                                         ; const type_info::`vftable'
.data:00001F40                 db    0
.data:00001F41                 db    0
.data:00001F42                 db    0
.data:00001F43                 db    0
.data:00001F44                 db  2Eh ; .
.data:00001F45                 db  3Fh ; ?
.data:00001F46                 db  41h ; A
.data:00001F47                 db  55h ; U
.data:00001F48                 db  49h ; I
.data:00001F49                 db  43h ; C
.data:00001F4A                 db  72h ; r
.data:00001F4B                 db  79h ; y
.data:00001F4C                 db  70h ; p
.data:00001F4D                 db  74h ; t
.data:00001F4E                 db  6Fh ; o
.data:00001F4F                 db  50h ; P
.data:00001F50                 db  72h ; r
.data:00001F51                 db  6Fh ; o
.data:00001F52                 db  70h ; p
.data:00001F53                 db  65h ; e
.data:00001F54                 db  72h ; r
.data:00001F55                 db  74h ; t
.data:00001F56                 db  69h ; i
.data:00001F57                 db  65h ; e
.data:00001F58                 db  73h ; s
.data:00001F59                 db  40h ; @
.data:00001F5A                 db  40h ; @
.data:00001F5B                 db    0
.data:00001F5B _data           ends
.data:00001F5B
.rdata$r:00001F5C ; ===========================================================================
.rdata$r:00001F5C
.rdata$r:00001F5C ; Segment type: Pure data
.rdata$r:00001F5C ; Segment permissions: Read
.rdata$r:00001F5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F5C                 assume cs:_rdata$r
.rdata$r:00001F5C                 ;org 1F5Ch
.rdata$r:00001F5C ; COMDAT (pick any)
.rdata$r:00001F5C                 public ??_R3ICryptoProperties@@8
.rdata$r:00001F5C ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F5C ??_R3ICryptoProperties@@8 db    0       ; DATA XREF: .rdata$r:00001F38o
.rdata$r:00001F5C                                         ; .rdata$r:00001F90o ...
.rdata$r:00001F5D                 db    0
.rdata$r:00001F5E                 db    0
.rdata$r:00001F5F                 db    0
.rdata$r:00001F60                 db    0
.rdata$r:00001F61                 db    0
.rdata$r:00001F62                 db    0
.rdata$r:00001F63                 db    0
.rdata$r:00001F64                 db    2
.rdata$r:00001F65                 db    0
.rdata$r:00001F66                 db    0
.rdata$r:00001F67                 db    0
.rdata$r:00001F68                 dd offset ??_R2ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Array'
.rdata$r:00001F68 _rdata$r        ends
.rdata$r:00001F68
.rdata$r:00001F6C ; ===========================================================================
.rdata$r:00001F6C
.rdata$r:00001F6C ; Segment type: Pure data
.rdata$r:00001F6C ; Segment permissions: Read
.rdata$r:00001F6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F6C                 assume cs:_rdata$r
.rdata$r:00001F6C                 ;org 1F6Ch
.rdata$r:00001F6C ; COMDAT (pick any)
.rdata$r:00001F6C                 public ??_R2ICryptoProperties@@8
.rdata$r:00001F6C ; ICryptoProperties::`RTTI Base Class Array'
.rdata$r:00001F6C ??_R2ICryptoProperties@@8 dd offset ??_R1A@?0A@EA@ICryptoProperties@@8
.rdata$r:00001F6C                                         ; DATA XREF: .rdata$r:00001F68o
.rdata$r:00001F6C                                         ; ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F70                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F74                 db    0
.rdata$r:00001F75                 align 4
.rdata$r:00001F75 _rdata$r        ends
.rdata$r:00001F75
.rdata$r:00001F78 ; ===========================================================================
.rdata$r:00001F78
.rdata$r:00001F78 ; Segment type: Pure data
.rdata$r:00001F78 ; Segment permissions: Read
.rdata$r:00001F78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F78                 assume cs:_rdata$r
.rdata$r:00001F78                 ;org 1F78h
.rdata$r:00001F78 ; COMDAT (pick any)
.rdata$r:00001F78                 public ??_R1A@?0A@EA@ICryptoProperties@@8
.rdata$r:00001F78 ; ICryptoProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001F78 ??_R1A@?0A@EA@ICryptoProperties@@8 dd offset ??_R0?AUICryptoProperties@@@8
.rdata$r:00001F78                                         ; DATA XREF: .rdata$r:ICryptoProperties::`RTTI Base Class Array'o
.rdata$r:00001F78                                         ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:00001F7C                 db    1
.rdata$r:00001F7D                 db    0
.rdata$r:00001F7E                 db    0
.rdata$r:00001F7F                 db    0
.rdata$r:00001F80                 db    0
.rdata$r:00001F81                 db    0
.rdata$r:00001F82                 db    0
.rdata$r:00001F83                 db    0
.rdata$r:00001F84                 db 0FFh
.rdata$r:00001F85                 db 0FFh
.rdata$r:00001F86                 db 0FFh
.rdata$r:00001F87                 db 0FFh
.rdata$r:00001F88                 db    0
.rdata$r:00001F89                 db    0
.rdata$r:00001F8A                 db    0
.rdata$r:00001F8B                 db    0
.rdata$r:00001F8C                 db  40h ; @
.rdata$r:00001F8D                 db    0
.rdata$r:00001F8E                 db    0
.rdata$r:00001F8F                 db    0
.rdata$r:00001F90                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F90 _rdata$r        ends
.rdata$r:00001F90
.rdata$r:00001F94 ; ===========================================================================
.rdata$r:00001F94
.rdata$r:00001F94 ; Segment type: Pure data
.rdata$r:00001F94 ; Segment permissions: Read
.rdata$r:00001F94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F94                 assume cs:_rdata$r
.rdata$r:00001F94                 ;org 1F94h
.rdata$r:00001F94 ; COMDAT (pick any)
.rdata$r:00001F94                 public ??_R1CI@?0A@EC@IUnknown@@8
.rdata$r:00001F94 ; IUnknown::`RTTI Base Class Descriptor at (40, -1, 0, 66)'
.rdata$r:00001F94 ??_R1CI@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001F94                                         ; DATA XREF: .rdata$r:000018E0o
.rdata$r:00001F94                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001F98                 db    0
.rdata$r:00001F99                 db    0
.rdata$r:00001F9A                 db    0
.rdata$r:00001F9B                 db    0
.rdata$r:00001F9C                 db  28h ; (
.rdata$r:00001F9D                 db    0
.rdata$r:00001F9E                 db    0
.rdata$r:00001F9F                 db    0
.rdata$r:00001FA0                 db 0FFh
.rdata$r:00001FA1                 db 0FFh
.rdata$r:00001FA2                 db 0FFh
.rdata$r:00001FA3                 db 0FFh
.rdata$r:00001FA4                 db    0
.rdata$r:00001FA5                 db    0
.rdata$r:00001FA6                 db    0
.rdata$r:00001FA7                 db    0
.rdata$r:00001FA8                 db  42h ; B
.rdata$r:00001FA9                 db    0
.rdata$r:00001FAA                 db    0
.rdata$r:00001FAB                 db    0
.rdata$r:00001FAC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FAC _rdata$r        ends
.rdata$r:00001FAC
.rdata$r:00001FB0 ; ===========================================================================
.rdata$r:00001FB0
.rdata$r:00001FB0 ; Segment type: Pure data
.rdata$r:00001FB0 ; Segment permissions: Read
.rdata$r:00001FB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FB0                 assume cs:_rdata$r
.rdata$r:00001FB0                 ;org 1FB0h
.rdata$r:00001FB0 ; COMDAT (pick any)
.rdata$r:00001FB0                 public ??_R1CM@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00001FB0 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (44, -1, 0, 64)'
.rdata$r:00001FB0 ??_R1CM@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00001FB0                                         ; DATA XREF: .rdata$r:000018E4o
.rdata$r:00001FB0                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00001FB4                 db    1
.rdata$r:00001FB5                 db    0
.rdata$r:00001FB6                 db    0
.rdata$r:00001FB7                 db    0
.rdata$r:00001FB8                 db  2Ch ; ,
.rdata$r:00001FB9                 db    0
.rdata$r:00001FBA                 db    0
.rdata$r:00001FBB                 db    0
.rdata$r:00001FBC                 db 0FFh
.rdata$r:00001FBD                 db 0FFh
.rdata$r:00001FBE                 db 0FFh
.rdata$r:00001FBF                 db 0FFh
.rdata$r:00001FC0                 db    0
.rdata$r:00001FC1                 db    0
.rdata$r:00001FC2                 db    0
.rdata$r:00001FC3                 db    0
.rdata$r:00001FC4                 db  40h ; @
.rdata$r:00001FC5                 db    0
.rdata$r:00001FC6                 db    0
.rdata$r:00001FC7                 db    0
.rdata$r:00001FC8                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FC8 _rdata$r        ends
.rdata$r:00001FC8
.data:00001FCC ; ===========================================================================
.data:00001FCC
.data:00001FCC ; Segment type: Pure data
.data:00001FCC ; Segment permissions: Read/Write
.data:00001FCC _data           segment dword public 'DATA' use32
.data:00001FCC                 assume cs:_data
.data:00001FCC                 ;org 1FCCh
.data:00001FCC ; COMDAT (pick any)
.data:00001FCC                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:00001FCC ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:00001FCC ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00001FCC                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (44,-1,0,64)'o
.data:00001FCC                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001FCC                                         ; const type_info::`vftable'
.data:00001FD0                 db    0
.data:00001FD1                 db    0
.data:00001FD2                 db    0
.data:00001FD3                 db    0
.data:00001FD4                 db  2Eh ; .
.data:00001FD5                 db  3Fh ; ?
.data:00001FD6                 db  41h ; A
.data:00001FD7                 db  55h ; U
.data:00001FD8                 db  49h ; I
.data:00001FD9                 db  43h ; C
.data:00001FDA                 db  6Fh ; o
.data:00001FDB                 db  6Dh ; m
.data:00001FDC                 db  70h ; p
.data:00001FDD                 db  72h ; r
.data:00001FDE                 db  65h ; e
.data:00001FDF                 db  73h ; s
.data:00001FE0                 db  73h ; s
.data:00001FE1                 db  53h ; S
.data:00001FE2                 db  65h ; e
.data:00001FE3                 db  74h ; t
.data:00001FE4                 db  43h ; C
.data:00001FE5                 db  6Fh ; o
.data:00001FE6                 db  64h ; d
.data:00001FE7                 db  65h ; e
.data:00001FE8                 db  72h ; r
.data:00001FE9                 db  50h ; P
.data:00001FEA                 db  72h ; r
.data:00001FEB                 db  6Fh ; o
.data:00001FEC                 db  70h ; p
.data:00001FED                 db  65h ; e
.data:00001FEE                 db  72h ; r
.data:00001FEF                 db  74h ; t
.data:00001FF0                 db  69h ; i
.data:00001FF1                 db  65h ; e
.data:00001FF2                 db  73h ; s
.data:00001FF3                 db  40h ; @
.data:00001FF4                 db  40h ; @
.data:00001FF5                 db    0
.data:00001FF6                 align 4
.data:00001FF6 _data           ends
.data:00001FF6
.rdata$r:00001FF8 ; ===========================================================================
.rdata$r:00001FF8
.rdata$r:00001FF8 ; Segment type: Pure data
.rdata$r:00001FF8 ; Segment permissions: Read
.rdata$r:00001FF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FF8                 assume cs:_rdata$r
.rdata$r:00001FF8                 ;org 1FF8h
.rdata$r:00001FF8 ; COMDAT (pick any)
.rdata$r:00001FF8                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:00001FF8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FF8 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:00001FF8                                         ; DATA XREF: .rdata$r:00001FC8o
.rdata$r:00001FF8                                         ; .rdata$r:0000202Co ...
.rdata$r:00001FF9                 db    0
.rdata$r:00001FFA                 db    0
.rdata$r:00001FFB                 db    0
.rdata$r:00001FFC                 db    0
.rdata$r:00001FFD                 db    0
.rdata$r:00001FFE                 db    0
.rdata$r:00001FFF                 db    0
.rdata$r:00002000                 db    2
.rdata$r:00002001                 db    0
.rdata$r:00002002                 db    0
.rdata$r:00002003                 db    0
.rdata$r:00002004                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00002004 _rdata$r        ends
.rdata$r:00002004
.rdata$r:00002008 ; ===========================================================================
.rdata$r:00002008
.rdata$r:00002008 ; Segment type: Pure data
.rdata$r:00002008 ; Segment permissions: Read
.rdata$r:00002008 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002008                 assume cs:_rdata$r
.rdata$r:00002008                 ;org 2008h
.rdata$r:00002008 ; COMDAT (pick any)
.rdata$r:00002008                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00002008 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00002008 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00002008                                         ; DATA XREF: .rdata$r:00002004o
.rdata$r:00002008                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000200C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002010                 db    0
.rdata$r:00002011                 align 4
.rdata$r:00002011 _rdata$r        ends
.rdata$r:00002011
.rdata$r:00002014 ; ===========================================================================
.rdata$r:00002014
.rdata$r:00002014 ; Segment type: Pure data
.rdata$r:00002014 ; Segment permissions: Read
.rdata$r:00002014 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002014                 assume cs:_rdata$r
.rdata$r:00002014                 ;org 2014h
.rdata$r:00002014 ; COMDAT (pick any)
.rdata$r:00002014                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00002014 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002014 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00002014                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:00002014                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00002018                 db    1
.rdata$r:00002019                 db    0
.rdata$r:0000201A                 db    0
.rdata$r:0000201B                 db    0
.rdata$r:0000201C                 db    0
.rdata$r:0000201D                 db    0
.rdata$r:0000201E                 db    0
.rdata$r:0000201F                 db    0
.rdata$r:00002020                 db 0FFh
.rdata$r:00002021                 db 0FFh
.rdata$r:00002022                 db 0FFh
.rdata$r:00002023                 db 0FFh
.rdata$r:00002024                 db    0
.rdata$r:00002025                 db    0
.rdata$r:00002026                 db    0
.rdata$r:00002027                 db    0
.rdata$r:00002028                 db  40h ; @
.rdata$r:00002029                 db    0
.rdata$r:0000202A                 db    0
.rdata$r:0000202B                 db    0
.rdata$r:0000202C                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000202C _rdata$r        ends
.rdata$r:0000202C
.rdata$r:00002030 ; ===========================================================================
.rdata$r:00002030
.rdata$r:00002030 ; Segment type: Pure data
.rdata$r:00002030 ; Segment permissions: Read
.rdata$r:00002030 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002030                 assume cs:_rdata$r
.rdata$r:00002030                 ;org 2030h
.rdata$r:00002030 ; COMDAT (pick any)
.rdata$r:00002030                 public ??_R1CM@?0A@EC@IUnknown@@8
.rdata$r:00002030 ; IUnknown::`RTTI Base Class Descriptor at (44, -1, 0, 66)'
.rdata$r:00002030 ??_R1CM@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002030                                         ; DATA XREF: .rdata$r:000018E8o
.rdata$r:00002030                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002034                 align 8
.rdata$r:00002038                 dd offset loc_2C
.rdata$r:0000203C                 db 0FFh
.rdata$r:0000203D                 db 0FFh
.rdata$r:0000203E                 db 0FFh
.rdata$r:0000203F                 db 0FFh
.rdata$r:00002040                 db    0
.rdata$r:00002041                 db    0
.rdata$r:00002042                 db    0
.rdata$r:00002043                 db    0
.rdata$r:00002044                 db  42h ; B
.rdata$r:00002045                 db    0
.rdata$r:00002046                 db    0
.rdata$r:00002047                 db    0
.rdata$r:00002048                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002048 _rdata$r        ends
.rdata$r:00002048
.rdata$r:0000204C ; ===========================================================================
.rdata$r:0000204C
.rdata$r:0000204C ; Segment type: Pure data
.rdata$r:0000204C ; Segment permissions: Read
.rdata$r:0000204C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000204C                 assume cs:_rdata$r
.rdata$r:0000204C                 ;org 204Ch
.rdata$r:0000204C ; COMDAT (pick any)
.rdata$r:0000204C                 public ??_R1DA@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:0000204C ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (48, -1, 0, 64)'
.rdata$r:0000204C ??_R1DA@?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:0000204C                                         ; DATA XREF: .rdata$r:000018ECo
.rdata$r:0000204C                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00002050                 db    1
.rdata$r:00002051                 db    0
.rdata$r:00002052                 db    0
.rdata$r:00002053                 db    0
.rdata$r:00002054                 db  30h ; 0
.rdata$r:00002055                 db    0
.rdata$r:00002056                 db    0
.rdata$r:00002057                 db    0
.rdata$r:00002058                 db 0FFh
.rdata$r:00002059                 db 0FFh
.rdata$r:0000205A                 db 0FFh
.rdata$r:0000205B                 db 0FFh
.rdata$r:0000205C                 db    0
.rdata$r:0000205D                 db    0
.rdata$r:0000205E                 db    0
.rdata$r:0000205F                 db    0
.rdata$r:00002060                 db  40h ; @
.rdata$r:00002061                 db    0
.rdata$r:00002062                 db    0
.rdata$r:00002063                 db    0
.rdata$r:00002064                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002064 _rdata$r        ends
.rdata$r:00002064
.data:00002068 ; ===========================================================================
.data:00002068
.data:00002068 ; Segment type: Pure data
.data:00002068 ; Segment permissions: Read/Write
.data:00002068 _data           segment dword public 'DATA' use32
.data:00002068                 assume cs:_data
.data:00002068                 ;org 2068h
.data:00002068 ; COMDAT (pick any)
.data:00002068                 public ??_R0?AUICompressWriteCoderProperties@@@8
.data:00002068 ; struct ICompressWriteCoderProperties `RTTI Type Descriptor'
.data:00002068 ??_R0?AUICompressWriteCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00002068                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (48,-1,0,64)'o
.data:00002068                                         ; .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002068                                         ; const type_info::`vftable'
.data:0000206C                 align 10h
.data:00002070 a_?auicompressw db '.?AUICompressWriteCoderProperties@@',0
.data:00002070 _data           ends
.data:00002070
.rdata$r:00002094 ; ===========================================================================
.rdata$r:00002094
.rdata$r:00002094 ; Segment type: Pure data
.rdata$r:00002094 ; Segment permissions: Read
.rdata$r:00002094 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002094                 assume cs:_rdata$r
.rdata$r:00002094                 ;org 2094h
.rdata$r:00002094 ; COMDAT (pick any)
.rdata$r:00002094                 public ??_R3ICompressWriteCoderProperties@@8
.rdata$r:00002094 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002094 ??_R3ICompressWriteCoderProperties@@8 db    0
.rdata$r:00002094                                         ; DATA XREF: .rdata$r:00002064o
.rdata$r:00002094                                         ; .rdata$r:000020C8o ...
.rdata$r:00002095                 db    0
.rdata$r:00002096                 db    0
.rdata$r:00002097                 db    0
.rdata$r:00002098                 db    0
.rdata$r:00002099                 db    0
.rdata$r:0000209A                 db    0
.rdata$r:0000209B                 db    0
.rdata$r:0000209C                 db    2
.rdata$r:0000209D                 db    0
.rdata$r:0000209E                 db    0
.rdata$r:0000209F                 db    0
.rdata$r:000020A0                 dd offset ??_R2ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:000020A0 _rdata$r        ends
.rdata$r:000020A0
.rdata$r:000020A4 ; ===========================================================================
.rdata$r:000020A4
.rdata$r:000020A4 ; Segment type: Pure data
.rdata$r:000020A4 ; Segment permissions: Read
.rdata$r:000020A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020A4                 assume cs:_rdata$r
.rdata$r:000020A4                 ;org 20A4h
.rdata$r:000020A4 ; COMDAT (pick any)
.rdata$r:000020A4                 public ??_R2ICompressWriteCoderProperties@@8
.rdata$r:000020A4 ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:000020A4 ??_R2ICompressWriteCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:000020A4                                         ; DATA XREF: .rdata$r:000020A0o
.rdata$r:000020A4                                         ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000020A8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000020AC                 db    0
.rdata$r:000020AD                 align 10h
.rdata$r:000020AD _rdata$r        ends
.rdata$r:000020AD
.rdata$r:000020B0 ; ===========================================================================
.rdata$r:000020B0
.rdata$r:000020B0 ; Segment type: Pure data
.rdata$r:000020B0 ; Segment permissions: Read
.rdata$r:000020B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020B0                 assume cs:_rdata$r
.rdata$r:000020B0                 ;org 20B0h
.rdata$r:000020B0 ; COMDAT (pick any)
.rdata$r:000020B0                 public ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:000020B0 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000020B0 ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:000020B0                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Array'o
.rdata$r:000020B0                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:000020B4                 db    1
.rdata$r:000020B5                 db    0
.rdata$r:000020B6                 db    0
.rdata$r:000020B7                 db    0
.rdata$r:000020B8                 db    0
.rdata$r:000020B9                 db    0
.rdata$r:000020BA                 db    0
.rdata$r:000020BB                 db    0
.rdata$r:000020BC                 db 0FFh
.rdata$r:000020BD                 db 0FFh
.rdata$r:000020BE                 db 0FFh
.rdata$r:000020BF                 db 0FFh
.rdata$r:000020C0                 db    0
.rdata$r:000020C1                 db    0
.rdata$r:000020C2                 db    0
.rdata$r:000020C3                 db    0
.rdata$r:000020C4                 db  40h ; @
.rdata$r:000020C5                 db    0
.rdata$r:000020C6                 db    0
.rdata$r:000020C7                 db    0
.rdata$r:000020C8                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000020C8 _rdata$r        ends
.rdata$r:000020C8
.rdata$r:000020CC ; ===========================================================================
.rdata$r:000020CC
.rdata$r:000020CC ; Segment type: Pure data
.rdata$r:000020CC ; Segment permissions: Read
.rdata$r:000020CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020CC                 assume cs:_rdata$r
.rdata$r:000020CC                 ;org 20CCh
.rdata$r:000020CC ; COMDAT (pick any)
.rdata$r:000020CC                 public ??_R1DA@?0A@EC@IUnknown@@8
.rdata$r:000020CC ; IUnknown::`RTTI Base Class Descriptor at (48, -1, 0, 66)'
.rdata$r:000020CC ??_R1DA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000020CC                                         ; DATA XREF: .rdata$r:000018F0o
.rdata$r:000020CC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000020D0                 db    0
.rdata$r:000020D1                 db    0
.rdata$r:000020D2                 db    0
.rdata$r:000020D3                 db    0
.rdata$r:000020D4                 db  30h ; 0
.rdata$r:000020D5                 db    0
.rdata$r:000020D6                 db    0
.rdata$r:000020D7                 db    0
.rdata$r:000020D8                 db 0FFh
.rdata$r:000020D9                 db 0FFh
.rdata$r:000020DA                 db 0FFh
.rdata$r:000020DB                 db 0FFh
.rdata$r:000020DC                 db    0
.rdata$r:000020DD                 db    0
.rdata$r:000020DE                 db    0
.rdata$r:000020DF                 db    0
.rdata$r:000020E0                 db  42h ; B
.rdata$r:000020E1                 db    0
.rdata$r:000020E2                 db    0
.rdata$r:000020E3                 db    0
.rdata$r:000020E4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000020E4 _rdata$r        ends
.rdata$r:000020E4
.rdata$r:000020E8 ; ===========================================================================
.rdata$r:000020E8
.rdata$r:000020E8 ; Segment type: Pure data
.rdata$r:000020E8 ; Segment permissions: Read
.rdata$r:000020E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020E8                 assume cs:_rdata$r
.rdata$r:000020E8                 ;org 20E8h
.rdata$r:000020E8 ; COMDAT (pick any)
.rdata$r:000020E8                 public ??_R1DE@?0A@EA@ICryptoResetInitVector@@8
.rdata$r:000020E8 ; ICryptoResetInitVector::`RTTI Base Class Descriptor at (52, -1, 0, 64)'
.rdata$r:000020E8 ??_R1DE@?0A@EA@ICryptoResetInitVector@@8 dd offset ??_R0?AUICryptoResetInitVector@@@8
.rdata$r:000020E8                                         ; DATA XREF: .rdata$r:000018F4o
.rdata$r:000020E8                                         ; ICryptoResetInitVector `RTTI Type Descriptor'
.rdata$r:000020EC                 db    1
.rdata$r:000020ED                 db    0
.rdata$r:000020EE                 db    0
.rdata$r:000020EF                 db    0
.rdata$r:000020F0                 db  34h ; 4
.rdata$r:000020F1                 db    0
.rdata$r:000020F2                 db    0
.rdata$r:000020F3                 db    0
.rdata$r:000020F4                 db 0FFh
.rdata$r:000020F5                 db 0FFh
.rdata$r:000020F6                 db 0FFh
.rdata$r:000020F7                 db 0FFh
.rdata$r:000020F8                 db    0
.rdata$r:000020F9                 db    0
.rdata$r:000020FA                 db    0
.rdata$r:000020FB                 db    0
.rdata$r:000020FC                 db  40h ; @
.rdata$r:000020FD                 db    0
.rdata$r:000020FE                 db    0
.rdata$r:000020FF                 db    0
.rdata$r:00002100                 dd offset ??_R3ICryptoResetInitVector@@8 ; ICryptoResetInitVector::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002100 _rdata$r        ends
.rdata$r:00002100
.data:00002104 ; ===========================================================================
.data:00002104
.data:00002104 ; Segment type: Pure data
.data:00002104 ; Segment permissions: Read/Write
.data:00002104 _data           segment dword public 'DATA' use32
.data:00002104                 assume cs:_data
.data:00002104                 ;org 2104h
.data:00002104 ; COMDAT (pick any)
.data:00002104                 public ??_R0?AUICryptoResetInitVector@@@8
.data:00002104 ; struct ICryptoResetInitVector `RTTI Type Descriptor'
.data:00002104 ??_R0?AUICryptoResetInitVector@@@8 dd offset ??_7type_info@@6B@
.data:00002104                                         ; DATA XREF: .rdata$r:ICryptoResetInitVector::`RTTI Base Class Descriptor at (52,-1,0,64)'o
.data:00002104                                         ; .rdata$r:ICryptoResetInitVector::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002104                                         ; const type_info::`vftable'
.data:00002108                 db    0
.data:00002109                 db    0
.data:0000210A                 db    0
.data:0000210B                 db    0
.data:0000210C                 db  2Eh ; .
.data:0000210D                 db  3Fh ; ?
.data:0000210E                 db  41h ; A
.data:0000210F                 db  55h ; U
.data:00002110                 db  49h ; I
.data:00002111                 db  43h ; C
.data:00002112                 db  72h ; r
.data:00002113                 db  79h ; y
.data:00002114                 db  70h ; p
.data:00002115                 db  74h ; t
.data:00002116                 db  6Fh ; o
.data:00002117                 db  52h ; R
.data:00002118                 db  65h ; e
.data:00002119                 db  73h ; s
.data:0000211A                 db  65h ; e
.data:0000211B                 db  74h ; t
.data:0000211C                 db  49h ; I
.data:0000211D                 db  6Eh ; n
.data:0000211E                 db  69h ; i
.data:0000211F                 db  74h ; t
.data:00002120                 db  56h ; V
.data:00002121                 db  65h ; e
.data:00002122                 db  63h ; c
.data:00002123                 db  74h ; t
.data:00002124                 db  6Fh ; o
.data:00002125                 db  72h ; r
.data:00002126                 db  40h ; @
.data:00002127                 db  40h ; @
.data:00002128                 db    0
.data:00002129                 align 4
.data:00002129 _data           ends
.data:00002129
.rdata$r:0000212C ; ===========================================================================
.rdata$r:0000212C
.rdata$r:0000212C ; Segment type: Pure data
.rdata$r:0000212C ; Segment permissions: Read
.rdata$r:0000212C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000212C                 assume cs:_rdata$r
.rdata$r:0000212C                 ;org 212Ch
.rdata$r:0000212C ; COMDAT (pick any)
.rdata$r:0000212C                 public ??_R3ICryptoResetInitVector@@8
.rdata$r:0000212C ; ICryptoResetInitVector::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000212C ??_R3ICryptoResetInitVector@@8 db    0  ; DATA XREF: .rdata$r:00002100o
.rdata$r:0000212C                                         ; .rdata$r:00002160o ...
.rdata$r:0000212D                 db    0
.rdata$r:0000212E                 db    0
.rdata$r:0000212F                 db    0
.rdata$r:00002130                 db    0
.rdata$r:00002131                 db    0
.rdata$r:00002132                 db    0
.rdata$r:00002133                 db    0
.rdata$r:00002134                 db    2
.rdata$r:00002135                 db    0
.rdata$r:00002136                 db    0
.rdata$r:00002137                 db    0
.rdata$r:00002138                 dd offset ??_R2ICryptoResetInitVector@@8 ; ICryptoResetInitVector::`RTTI Base Class Array'
.rdata$r:00002138 _rdata$r        ends
.rdata$r:00002138
.rdata$r:0000213C ; ===========================================================================
.rdata$r:0000213C
.rdata$r:0000213C ; Segment type: Pure data
.rdata$r:0000213C ; Segment permissions: Read
.rdata$r:0000213C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000213C                 assume cs:_rdata$r
.rdata$r:0000213C                 ;org 213Ch
.rdata$r:0000213C ; COMDAT (pick any)
.rdata$r:0000213C                 public ??_R2ICryptoResetInitVector@@8
.rdata$r:0000213C ; ICryptoResetInitVector::`RTTI Base Class Array'
.rdata$r:0000213C ??_R2ICryptoResetInitVector@@8 dd offset ??_R1A@?0A@EA@ICryptoResetInitVector@@8
.rdata$r:0000213C                                         ; DATA XREF: .rdata$r:00002138o
.rdata$r:0000213C                                         ; ICryptoResetInitVector::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002140                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002144                 db    0
.rdata$r:00002145                 align 4
.rdata$r:00002145 _rdata$r        ends
.rdata$r:00002145
.rdata$r:00002148 ; ===========================================================================
.rdata$r:00002148
.rdata$r:00002148 ; Segment type: Pure data
.rdata$r:00002148 ; Segment permissions: Read
.rdata$r:00002148 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002148                 assume cs:_rdata$r
.rdata$r:00002148                 ;org 2148h
.rdata$r:00002148 ; COMDAT (pick any)
.rdata$r:00002148                 public ??_R1A@?0A@EA@ICryptoResetInitVector@@8
.rdata$r:00002148 ; ICryptoResetInitVector::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002148 ??_R1A@?0A@EA@ICryptoResetInitVector@@8 dd offset ??_R0?AUICryptoResetInitVector@@@8
.rdata$r:00002148                                         ; DATA XREF: .rdata$r:ICryptoResetInitVector::`RTTI Base Class Array'o
.rdata$r:00002148                                         ; ICryptoResetInitVector `RTTI Type Descriptor'
.rdata$r:0000214C                 db    1
.rdata$r:0000214D                 db    0
.rdata$r:0000214E                 db    0
.rdata$r:0000214F                 db    0
.rdata$r:00002150                 db    0
.rdata$r:00002151                 db    0
.rdata$r:00002152                 db    0
.rdata$r:00002153                 db    0
.rdata$r:00002154                 db 0FFh
.rdata$r:00002155                 db 0FFh
.rdata$r:00002156                 db 0FFh
.rdata$r:00002157                 db 0FFh
.rdata$r:00002158                 db    0
.rdata$r:00002159                 db    0
.rdata$r:0000215A                 db    0
.rdata$r:0000215B                 db    0
.rdata$r:0000215C                 db  40h ; @
.rdata$r:0000215D                 db    0
.rdata$r:0000215E                 db    0
.rdata$r:0000215F                 db    0
.rdata$r:00002160                 dd offset ??_R3ICryptoResetInitVector@@8 ; ICryptoResetInitVector::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002160 _rdata$r        ends
.rdata$r:00002160
.rdata$r:00002164 ; ===========================================================================
.rdata$r:00002164
.rdata$r:00002164 ; Segment type: Pure data
.rdata$r:00002164 ; Segment permissions: Read
.rdata$r:00002164 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002164                 assume cs:_rdata$r
.rdata$r:00002164                 ;org 2164h
.rdata$r:00002164 ; COMDAT (pick any)
.rdata$r:00002164                 public ??_R1DE@?0A@EC@IUnknown@@8
.rdata$r:00002164 ; IUnknown::`RTTI Base Class Descriptor at (52, -1, 0, 66)'
.rdata$r:00002164 ??_R1DE@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002164                                         ; DATA XREF: .rdata$r:000018F8o
.rdata$r:00002164                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002168                 db    0
.rdata$r:00002169                 db    0
.rdata$r:0000216A                 db    0
.rdata$r:0000216B                 db    0
.rdata$r:0000216C                 db  34h ; 4
.rdata$r:0000216D                 db    0
.rdata$r:0000216E                 db    0
.rdata$r:0000216F                 db    0
.rdata$r:00002170                 db 0FFh
.rdata$r:00002171                 db 0FFh
.rdata$r:00002172                 db 0FFh
.rdata$r:00002173                 db 0FFh
.rdata$r:00002174                 db    0
.rdata$r:00002175                 db    0
.rdata$r:00002176                 db    0
.rdata$r:00002177                 db    0
.rdata$r:00002178                 db  42h ; B
.rdata$r:00002179                 db    0
.rdata$r:0000217A                 db    0
.rdata$r:0000217B                 db    0
.rdata$r:0000217C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000217C _rdata$r        ends
.rdata$r:0000217C
.rdata$r:00002180 ; ===========================================================================
.rdata$r:00002180
.rdata$r:00002180 ; Segment type: Pure data
.rdata$r:00002180 ; Segment permissions: Read
.rdata$r:00002180 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002180                 assume cs:_rdata$r
.rdata$r:00002180                 ;org 2180h
.rdata$r:00002180 ; COMDAT (pick any)
.rdata$r:00002180                 public ??_R1DI@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00002180 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (56, -1, 0, 64)'
.rdata$r:00002180 ??_R1DI@?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:00002180                                         ; DATA XREF: .rdata$r:000018FCo
.rdata$r:00002180                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00002184                 db    1
.rdata$r:00002185                 db    0
.rdata$r:00002186                 db    0
.rdata$r:00002187                 db    0
.rdata$r:00002188                 db  38h ; 8
.rdata$r:00002189                 db    0
.rdata$r:0000218A                 db    0
.rdata$r:0000218B                 db    0
.rdata$r:0000218C                 db 0FFh
.rdata$r:0000218D                 db 0FFh
.rdata$r:0000218E                 db 0FFh
.rdata$r:0000218F                 db 0FFh
.rdata$r:00002190                 db    0
.rdata$r:00002191                 db    0
.rdata$r:00002192                 db    0
.rdata$r:00002193                 db    0
.rdata$r:00002194                 db  40h ; @
.rdata$r:00002195                 db    0
.rdata$r:00002196                 db    0
.rdata$r:00002197                 db    0
.rdata$r:00002198                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002198 _rdata$r        ends
.rdata$r:00002198
.data:0000219C ; ===========================================================================
.data:0000219C
.data:0000219C ; Segment type: Pure data
.data:0000219C ; Segment permissions: Read/Write
.data:0000219C _data           segment dword public 'DATA' use32
.data:0000219C                 assume cs:_data
.data:0000219C                 ;org 219Ch
.data:0000219C ; COMDAT (pick any)
.data:0000219C                 public ??_R0?AUICompressSetDecoderProperties2@@@8
.data:0000219C ; struct ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.data:0000219C ??_R0?AUICompressSetDecoderProperties2@@@8 dd offset ??_7type_info@@6B@
.data:0000219C                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (56,-1,0,64)'o
.data:0000219C                                         ; .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000219C                                         ; const type_info::`vftable'
.data:000021A0                 db    0
.data:000021A1                 db    0
.data:000021A2                 db    0
.data:000021A3                 db    0
.data:000021A4                 db  2Eh ; .
.data:000021A5                 db  3Fh ; ?
.data:000021A6                 db  41h ; A
.data:000021A7                 db  55h ; U
.data:000021A8                 db  49h ; I
.data:000021A9                 db  43h ; C
.data:000021AA                 db  6Fh ; o
.data:000021AB                 db  6Dh ; m
.data:000021AC                 db  70h ; p
.data:000021AD                 db  72h ; r
.data:000021AE                 db  65h ; e
.data:000021AF                 db  73h ; s
.data:000021B0                 db  73h ; s
.data:000021B1                 db  53h ; S
.data:000021B2                 db  65h ; e
.data:000021B3                 db  74h ; t
.data:000021B4                 db  44h ; D
.data:000021B5                 db  65h ; e
.data:000021B6                 db  63h ; c
.data:000021B7                 db  6Fh ; o
.data:000021B8                 db  64h ; d
.data:000021B9                 db  65h ; e
.data:000021BA                 db  72h ; r
.data:000021BB                 db  50h ; P
.data:000021BC                 db  72h ; r
.data:000021BD                 db  6Fh ; o
.data:000021BE                 db  70h ; p
.data:000021BF                 db  65h ; e
.data:000021C0                 db  72h ; r
.data:000021C1                 db  74h ; t
.data:000021C2                 db  69h ; i
.data:000021C3                 db  65h ; e
.data:000021C4                 db  73h ; s
.data:000021C5                 db  32h ; 2
.data:000021C6                 db  40h ; @
.data:000021C7                 db  40h ; @
.data:000021C8                 db    0
.data:000021C9                 align 4
.data:000021C9 _data           ends
.data:000021C9
.rdata$r:000021CC ; ===========================================================================
.rdata$r:000021CC
.rdata$r:000021CC ; Segment type: Pure data
.rdata$r:000021CC ; Segment permissions: Read
.rdata$r:000021CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000021CC                 assume cs:_rdata$r
.rdata$r:000021CC                 ;org 21CCh
.rdata$r:000021CC ; COMDAT (pick any)
.rdata$r:000021CC                 public ??_R3ICompressSetDecoderProperties2@@8
.rdata$r:000021CC ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000021CC ??_R3ICompressSetDecoderProperties2@@8 db    0
.rdata$r:000021CC                                         ; DATA XREF: .rdata$r:00002198o
.rdata$r:000021CC                                         ; .rdata$r:00002200o ...
.rdata$r:000021CD                 db    0
.rdata$r:000021CE                 db    0
.rdata$r:000021CF                 db    0
.rdata$r:000021D0                 db    0
.rdata$r:000021D1                 db    0
.rdata$r:000021D2                 db    0
.rdata$r:000021D3                 db    0
.rdata$r:000021D4                 db    2
.rdata$r:000021D5                 db    0
.rdata$r:000021D6                 db    0
.rdata$r:000021D7                 db    0
.rdata$r:000021D8                 dd offset ??_R2ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:000021D8 _rdata$r        ends
.rdata$r:000021D8
.rdata$r:000021DC ; ===========================================================================
.rdata$r:000021DC
.rdata$r:000021DC ; Segment type: Pure data
.rdata$r:000021DC ; Segment permissions: Read
.rdata$r:000021DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000021DC                 assume cs:_rdata$r
.rdata$r:000021DC                 ;org 21DCh
.rdata$r:000021DC ; COMDAT (pick any)
.rdata$r:000021DC                 public ??_R2ICompressSetDecoderProperties2@@8
.rdata$r:000021DC ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:000021DC ??_R2ICompressSetDecoderProperties2@@8 dd offset ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:000021DC                                         ; DATA XREF: .rdata$r:000021D8o
.rdata$r:000021DC                                         ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000021E0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000021E4                 db    0
.rdata$r:000021E5                 align 4
.rdata$r:000021E5 _rdata$r        ends
.rdata$r:000021E5
.rdata$r:000021E8 ; ===========================================================================
.rdata$r:000021E8
.rdata$r:000021E8 ; Segment type: Pure data
.rdata$r:000021E8 ; Segment permissions: Read
.rdata$r:000021E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000021E8                 assume cs:_rdata$r
.rdata$r:000021E8                 ;org 21E8h
.rdata$r:000021E8 ; COMDAT (pick any)
.rdata$r:000021E8                 public ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:000021E8 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000021E8 ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:000021E8                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Array'o
.rdata$r:000021E8                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:000021EC                 db    1
.rdata$r:000021ED                 db    0
.rdata$r:000021EE                 db    0
.rdata$r:000021EF                 db    0
.rdata$r:000021F0                 db    0
.rdata$r:000021F1                 db    0
.rdata$r:000021F2                 db    0
.rdata$r:000021F3                 db    0
.rdata$r:000021F4                 db 0FFh
.rdata$r:000021F5                 db 0FFh
.rdata$r:000021F6                 db 0FFh
.rdata$r:000021F7                 db 0FFh
.rdata$r:000021F8                 db    0
.rdata$r:000021F9                 db    0
.rdata$r:000021FA                 db    0
.rdata$r:000021FB                 db    0
.rdata$r:000021FC                 db  40h ; @
.rdata$r:000021FD                 db    0
.rdata$r:000021FE                 db    0
.rdata$r:000021FF                 db    0
.rdata$r:00002200                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002200 _rdata$r        ends
.rdata$r:00002200
.rdata$r:00002204 ; ===========================================================================
.rdata$r:00002204
.rdata$r:00002204 ; Segment type: Pure data
.rdata$r:00002204 ; Segment permissions: Read
.rdata$r:00002204 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002204                 assume cs:_rdata$r
.rdata$r:00002204                 ;org 2204h
.rdata$r:00002204 ; COMDAT (pick any)
.rdata$r:00002204                 public ??_R1DI@?0A@EC@IUnknown@@8
.rdata$r:00002204 ; IUnknown::`RTTI Base Class Descriptor at (56, -1, 0, 66)'
.rdata$r:00002204 ??_R1DI@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002204                                         ; DATA XREF: .rdata$r:00001900o
.rdata$r:00002204                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002208                 db    0
.rdata$r:00002209                 db    0
.rdata$r:0000220A                 db    0
.rdata$r:0000220B                 db    0
.rdata$r:0000220C                 db  38h ; 8
.rdata$r:0000220D                 db    0
.rdata$r:0000220E                 db    0
.rdata$r:0000220F                 db    0
.rdata$r:00002210                 db 0FFh
.rdata$r:00002211                 db 0FFh
.rdata$r:00002212                 db 0FFh
.rdata$r:00002213                 db 0FFh
.rdata$r:00002214                 db    0
.rdata$r:00002215                 db    0
.rdata$r:00002216                 db    0
.rdata$r:00002217                 db    0
.rdata$r:00002218                 db  42h ; B
.rdata$r:00002219                 db    0
.rdata$r:0000221A                 db    0
.rdata$r:0000221B                 db    0
.rdata$r:0000221C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000221C _rdata$r        ends
.rdata$r:0000221C
.rdata$r:00002220 ; ===========================================================================
.rdata$r:00002220
.rdata$r:00002220 ; Segment type: Pure data
.rdata$r:00002220 ; Segment permissions: Read
.rdata$r:00002220 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002220                 assume cs:_rdata$r
.rdata$r:00002220                 ;org 2220h
.rdata$r:00002220 ; COMDAT (pick any)
.rdata$r:00002220                 public ??_R1DM@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002220 ; CMyUnknownImp::`RTTI Base Class Descriptor at (60, -1, 0, 64)'
.rdata$r:00002220 ??_R1DM@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002220                                         ; DATA XREF: .rdata$r:00001904o
.rdata$r:00002220                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002224                 align 8
.rdata$r:00002228                 dd offset unk_3C
.rdata$r:0000222C                 db 0FFh
.rdata$r:0000222D                 db 0FFh
.rdata$r:0000222E                 db 0FFh
.rdata$r:0000222F                 db 0FFh
.rdata$r:00002230                 db    0
.rdata$r:00002231                 db    0
.rdata$r:00002232                 db    0
.rdata$r:00002233                 db    0
.rdata$r:00002234                 db  40h ; @
.rdata$r:00002235                 db    0
.rdata$r:00002236                 db    0
.rdata$r:00002237                 db    0
.rdata$r:00002238                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002238 _rdata$r        ends
.rdata$r:00002238
.data:0000223C ; ===========================================================================
.data:0000223C
.data:0000223C ; Segment type: Pure data
.data:0000223C ; Segment permissions: Read/Write
.data:0000223C _data           segment dword public 'DATA' use32
.data:0000223C                 assume cs:_data
.data:0000223C                 ;org 223Ch
.data:0000223C ; COMDAT (pick any)
.data:0000223C                 public ??_R0?AVCMyUnknownImp@@@8
.data:0000223C ; class CMyUnknownImp `RTTI Type Descriptor'
.data:0000223C ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:0000223C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (60,-1,0,64)'o
.data:0000223C                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000223C                                         ; const type_info::`vftable'
.data:00002240                 db    0
.data:00002241                 db    0
.data:00002242                 db    0
.data:00002243                 db    0
.data:00002244                 db  2Eh ; .
.data:00002245                 db  3Fh ; ?
.data:00002246                 db  41h ; A
.data:00002247                 db  56h ; V
.data:00002248                 db  43h ; C
.data:00002249                 db  4Dh ; M
.data:0000224A                 db  79h ; y
.data:0000224B                 db  55h ; U
.data:0000224C                 db  6Eh ; n
.data:0000224D                 db  6Bh ; k
.data:0000224E                 db  6Eh ; n
.data:0000224F                 db  6Fh ; o
.data:00002250                 db  77h ; w
.data:00002251                 db  6Eh ; n
.data:00002252                 db  49h ; I
.data:00002253                 db  6Dh ; m
.data:00002254                 db  70h ; p
.data:00002255                 db  40h ; @
.data:00002256                 db  40h ; @
.data:00002257                 db    0
.data:00002257 _data           ends
.data:00002257
.rdata$r:00002258 ; ===========================================================================
.rdata$r:00002258
.rdata$r:00002258 ; Segment type: Pure data
.rdata$r:00002258 ; Segment permissions: Read
.rdata$r:00002258 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002258                 assume cs:_rdata$r
.rdata$r:00002258                 ;org 2258h
.rdata$r:00002258 ; COMDAT (pick any)
.rdata$r:00002258                 public ??_R3CMyUnknownImp@@8
.rdata$r:00002258 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002258 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00002238o
.rdata$r:00002258                                         ; .rdata$r:00002288o
.rdata$r:00002259                 db    0
.rdata$r:0000225A                 db    0
.rdata$r:0000225B                 db    0
.rdata$r:0000225C                 db    0
.rdata$r:0000225D                 db    0
.rdata$r:0000225E                 db    0
.rdata$r:0000225F                 db    0
.rdata$r:00002260                 db    1
.rdata$r:00002261                 db    0
.rdata$r:00002262                 db    0
.rdata$r:00002263                 db    0
.rdata$r:00002264                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002264 _rdata$r        ends
.rdata$r:00002264
.rdata$r:00002268 ; ===========================================================================
.rdata$r:00002268
.rdata$r:00002268 ; Segment type: Pure data
.rdata$r:00002268 ; Segment permissions: Read
.rdata$r:00002268 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002268                 assume cs:_rdata$r
.rdata$r:00002268                 ;org 2268h
.rdata$r:00002268 ; COMDAT (pick any)
.rdata$r:00002268                 public ??_R2CMyUnknownImp@@8
.rdata$r:00002268 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002268 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002268                                         ; DATA XREF: .rdata$r:00002264o
.rdata$r:00002268                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000226C                 db    0
.rdata$r:0000226D                 align 10h
.rdata$r:0000226D _rdata$r        ends
.rdata$r:0000226D
.rdata$r:00002270 ; ===========================================================================
.rdata$r:00002270
.rdata$r:00002270 ; Segment type: Pure data
.rdata$r:00002270 ; Segment permissions: Read
.rdata$r:00002270 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002270                 assume cs:_rdata$r
.rdata$r:00002270                 ;org 2270h
.rdata$r:00002270 ; COMDAT (pick any)
.rdata$r:00002270                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002270 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002270 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002270                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00002270                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002274                 db    0
.rdata$r:00002275                 db    0
.rdata$r:00002276                 db    0
.rdata$r:00002277                 db    0
.rdata$r:00002278                 db    0
.rdata$r:00002279                 db    0
.rdata$r:0000227A                 db    0
.rdata$r:0000227B                 db    0
.rdata$r:0000227C                 db 0FFh
.rdata$r:0000227D                 db 0FFh
.rdata$r:0000227E                 db 0FFh
.rdata$r:0000227F                 db 0FFh
.rdata$r:00002280                 db    0
.rdata$r:00002281                 db    0
.rdata$r:00002282                 db    0
.rdata$r:00002283                 db    0
.rdata$r:00002284                 db  40h ; @
.rdata$r:00002285                 db    0
.rdata$r:00002286                 db    0
.rdata$r:00002287                 db    0
.rdata$r:00002288                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002288 _rdata$r        ends
.rdata$r:00002288
.rdata$r:0000228C ; ===========================================================================
.rdata$r:0000228C
.rdata$r:0000228C ; Segment type: Pure data
.rdata$r:0000228C ; Segment permissions: Read
.rdata$r:0000228C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000228C                 assume cs:_rdata$r
.rdata$r:0000228C                 ;org 228Ch
.rdata$r:0000228C ; COMDAT (pick any)
.rdata$r:0000228C                 public ??_R1EA@?0A@EA@CAlignedMidBuffer@@8
.rdata$r:0000228C ; CAlignedMidBuffer::`RTTI Base Class Descriptor at (64, -1, 0, 64)'
.rdata$r:0000228C ??_R1EA@?0A@EA@CAlignedMidBuffer@@8 dd offset ??_R0?AUCAlignedMidBuffer@@@8
.rdata$r:0000228C                                         ; DATA XREF: .rdata$r:00001908o
.rdata$r:0000228C                                         ; CAlignedMidBuffer `RTTI Type Descriptor'
.rdata$r:00002290                 db    0
.rdata$r:00002291                 db    0
.rdata$r:00002292                 db    0
.rdata$r:00002293                 db    0
.rdata$r:00002294                 db  40h ; @
.rdata$r:00002295                 db    0
.rdata$r:00002296                 db    0
.rdata$r:00002297                 db    0
.rdata$r:00002298                 db 0FFh
.rdata$r:00002299                 db 0FFh
.rdata$r:0000229A                 db 0FFh
.rdata$r:0000229B                 db 0FFh
.rdata$r:0000229C                 db    0
.rdata$r:0000229D                 db    0
.rdata$r:0000229E                 db    0
.rdata$r:0000229F                 db    0
.rdata$r:000022A0                 db  40h ; @
.rdata$r:000022A1                 db    0
.rdata$r:000022A2                 db    0
.rdata$r:000022A3                 db    0
.rdata$r:000022A4                 dd offset ??_R3CAlignedMidBuffer@@8 ; CAlignedMidBuffer::`RTTI Class Hierarchy Descriptor'
.rdata$r:000022A4 _rdata$r        ends
.rdata$r:000022A4
.data:000022A8 ; ===========================================================================
.data:000022A8
.data:000022A8 ; Segment type: Pure data
.data:000022A8 ; Segment permissions: Read/Write
.data:000022A8 _data           segment dword public 'DATA' use32
.data:000022A8                 assume cs:_data
.data:000022A8                 ;org 22A8h
.data:000022A8 ; COMDAT (pick any)
.data:000022A8                 public ??_R0?AUCAlignedMidBuffer@@@8
.data:000022A8 ; struct CAlignedMidBuffer `RTTI Type Descriptor'
.data:000022A8 ??_R0?AUCAlignedMidBuffer@@@8 dd offset ??_7type_info@@6B@
.data:000022A8                                         ; DATA XREF: .rdata$r:CAlignedMidBuffer::`RTTI Base Class Descriptor at (64,-1,0,64)'o
.data:000022A8                                         ; .rdata$r:CAlignedMidBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000022A8                                         ; const type_info::`vftable'
.data:000022AC                 align 10h
.data:000022B0 a_?aucalignedmi db '.?AUCAlignedMidBuffer@@',0
.data:000022B0 _data           ends
.data:000022B0
.rdata$r:000022C8 ; ===========================================================================
.rdata$r:000022C8
.rdata$r:000022C8 ; Segment type: Pure data
.rdata$r:000022C8 ; Segment permissions: Read
.rdata$r:000022C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022C8                 assume cs:_rdata$r
.rdata$r:000022C8                 ;org 22C8h
.rdata$r:000022C8 ; COMDAT (pick any)
.rdata$r:000022C8                 public ??_R3CAlignedMidBuffer@@8
.rdata$r:000022C8 ; CAlignedMidBuffer::`RTTI Class Hierarchy Descriptor'
.rdata$r:000022C8 ??_R3CAlignedMidBuffer@@8 db    0       ; DATA XREF: .rdata$r:000022A4o
.rdata$r:000022C8                                         ; .rdata$r:000022F8o
.rdata$r:000022C9                 db    0
.rdata$r:000022CA                 db    0
.rdata$r:000022CB                 db    0
.rdata$r:000022CC                 db    0
.rdata$r:000022CD                 db    0
.rdata$r:000022CE                 db    0
.rdata$r:000022CF                 db    0
.rdata$r:000022D0                 db    1
.rdata$r:000022D1                 db    0
.rdata$r:000022D2                 db    0
.rdata$r:000022D3                 db    0
.rdata$r:000022D4                 dd offset ??_R2CAlignedMidBuffer@@8 ; CAlignedMidBuffer::`RTTI Base Class Array'
.rdata$r:000022D4 _rdata$r        ends
.rdata$r:000022D4
.rdata$r:000022D8 ; ===========================================================================
.rdata$r:000022D8
.rdata$r:000022D8 ; Segment type: Pure data
.rdata$r:000022D8 ; Segment permissions: Read
.rdata$r:000022D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022D8                 assume cs:_rdata$r
.rdata$r:000022D8                 ;org 22D8h
.rdata$r:000022D8 ; COMDAT (pick any)
.rdata$r:000022D8                 public ??_R2CAlignedMidBuffer@@8
.rdata$r:000022D8 ; CAlignedMidBuffer::`RTTI Base Class Array'
.rdata$r:000022D8 ??_R2CAlignedMidBuffer@@8 dd offset ??_R1A@?0A@EA@CAlignedMidBuffer@@8
.rdata$r:000022D8                                         ; DATA XREF: .rdata$r:000022D4o
.rdata$r:000022D8                                         ; CAlignedMidBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000022DC                 db    0
.rdata$r:000022DD                 align 10h
.rdata$r:000022DD _rdata$r        ends
.rdata$r:000022DD
.rdata$r:000022E0 ; ===========================================================================
.rdata$r:000022E0
.rdata$r:000022E0 ; Segment type: Pure data
.rdata$r:000022E0 ; Segment permissions: Read
.rdata$r:000022E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022E0                 assume cs:_rdata$r
.rdata$r:000022E0                 ;org 22E0h
.rdata$r:000022E0 ; COMDAT (pick any)
.rdata$r:000022E0                 public ??_R1A@?0A@EA@CAlignedMidBuffer@@8
.rdata$r:000022E0 ; CAlignedMidBuffer::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000022E0 ??_R1A@?0A@EA@CAlignedMidBuffer@@8 dd offset ??_R0?AUCAlignedMidBuffer@@@8
.rdata$r:000022E0                                         ; DATA XREF: .rdata$r:CAlignedMidBuffer::`RTTI Base Class Array'o
.rdata$r:000022E0                                         ; CAlignedMidBuffer `RTTI Type Descriptor'
.rdata$r:000022E4                 db    0
.rdata$r:000022E5                 db    0
.rdata$r:000022E6                 db    0
.rdata$r:000022E7                 db    0
.rdata$r:000022E8                 db    0
.rdata$r:000022E9                 db    0
.rdata$r:000022EA                 db    0
.rdata$r:000022EB                 db    0
.rdata$r:000022EC                 db 0FFh
.rdata$r:000022ED                 db 0FFh
.rdata$r:000022EE                 db 0FFh
.rdata$r:000022EF                 db 0FFh
.rdata$r:000022F0                 db    0
.rdata$r:000022F1                 db    0
.rdata$r:000022F2                 db    0
.rdata$r:000022F3                 db    0
.rdata$r:000022F4                 db  40h ; @
.rdata$r:000022F5                 db    0
.rdata$r:000022F6                 db    0
.rdata$r:000022F7                 db    0
.rdata$r:000022F8                 dd offset ??_R3CAlignedMidBuffer@@8 ; CAlignedMidBuffer::`RTTI Class Hierarchy Descriptor'
.rdata$r:000022F8 _rdata$r        ends
.rdata$r:000022F8
.rdata$r:000022FC ; ===========================================================================
.rdata$r:000022FC
.rdata$r:000022FC ; Segment type: Pure data
.rdata$r:000022FC ; Segment permissions: Read
.rdata$r:000022FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022FC                 assume cs:_rdata$r
.rdata$r:000022FC                 ;org 22FCh
.rdata$r:000022FC ; COMDAT (pick any)
.rdata$r:000022FC                 public ??_R4CFilterCoder@@6BICompressSetOutStreamSize@@@
.rdata$r:000022FC ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:000022FC ??_R4CFilterCoder@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:000022FC                                         ; DATA XREF: .rdata:00001748o
.rdata$r:000022FD                 db    0
.rdata$r:000022FE                 db    0
.rdata$r:000022FF                 db    0
.rdata$r:00002300                 db    4
.rdata$r:00002301                 db    0
.rdata$r:00002302                 db    0
.rdata$r:00002303                 db    0
.rdata$r:00002304                 db    0
.rdata$r:00002305                 db    0
.rdata$r:00002306                 db    0
.rdata$r:00002307                 db    0
.rdata$r:00002308                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:0000230C                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000230C _rdata$r        ends
.rdata$r:0000230C
.rdata$r:00002310 ; ===========================================================================
.rdata$r:00002310
.rdata$r:00002310 ; Segment type: Pure data
.rdata$r:00002310 ; Segment permissions: Read
.rdata$r:00002310 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002310                 assume cs:_rdata$r
.rdata$r:00002310                 ;org 2310h
.rdata$r:00002310 ; COMDAT (pick any)
.rdata$r:00002310                 public ??_R4CFilterCoder@@6BICompressInitEncoder@@@
.rdata$r:00002310 ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressInitEncoder'}
.rdata$r:00002310 ??_R4CFilterCoder@@6BICompressInitEncoder@@@ db    0
.rdata$r:00002310                                         ; DATA XREF: .rdata:00001734o
.rdata$r:00002311                 db    0
.rdata$r:00002312                 db    0
.rdata$r:00002313                 db    0
.rdata$r:00002314                 db    8
.rdata$r:00002315                 db    0
.rdata$r:00002316                 db    0
.rdata$r:00002317                 db    0
.rdata$r:00002318                 db    0
.rdata$r:00002319                 db    0
.rdata$r:0000231A                 db    0
.rdata$r:0000231B                 db    0
.rdata$r:0000231C                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:00002320                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002320 _rdata$r        ends
.rdata$r:00002320
.rdata$r:00002324 ; ===========================================================================
.rdata$r:00002324
.rdata$r:00002324 ; Segment type: Pure data
.rdata$r:00002324 ; Segment permissions: Read
.rdata$r:00002324 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002324                 assume cs:_rdata$r
.rdata$r:00002324                 ;org 2324h
.rdata$r:00002324 ; COMDAT (pick any)
.rdata$r:00002324                 public ??_R4CFilterCoder@@6BICompressSetInStream@@@
.rdata$r:00002324 ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00002324 ??_R4CFilterCoder@@6BICompressSetInStream@@@ db    0
.rdata$r:00002324                                         ; DATA XREF: .rdata:0000171Co
.rdata$r:00002325                 db    0
.rdata$r:00002326                 db    0
.rdata$r:00002327                 db    0
.rdata$r:00002328                 db  0Ch
.rdata$r:00002329                 db    0
.rdata$r:0000232A                 db    0
.rdata$r:0000232B                 db    0
.rdata$r:0000232C                 db    0
.rdata$r:0000232D                 db    0
.rdata$r:0000232E                 db    0
.rdata$r:0000232F                 db    0
.rdata$r:00002330                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:00002334                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002334 _rdata$r        ends
.rdata$r:00002334
.rdata$r:00002338 ; ===========================================================================
.rdata$r:00002338
.rdata$r:00002338 ; Segment type: Pure data
.rdata$r:00002338 ; Segment permissions: Read
.rdata$r:00002338 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002338                 assume cs:_rdata$r
.rdata$r:00002338                 ;org 2338h
.rdata$r:00002338 ; COMDAT (pick any)
.rdata$r:00002338                 public ??_R4CFilterCoder@@6BISequentialInStream@@@
.rdata$r:00002338 ; const CFilterCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00002338 ??_R4CFilterCoder@@6BISequentialInStream@@@ db    0
.rdata$r:00002338                                         ; DATA XREF: .rdata:00001708o
.rdata$r:00002339                 db    0
.rdata$r:0000233A                 db    0
.rdata$r:0000233B                 db    0
.rdata$r:0000233C                 db  10h
.rdata$r:0000233D                 db    0
.rdata$r:0000233E                 db    0
.rdata$r:0000233F                 db    0
.rdata$r:00002340                 db    0
.rdata$r:00002341                 db    0
.rdata$r:00002342                 db    0
.rdata$r:00002343                 db    0
.rdata$r:00002344                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:00002348                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002348 _rdata$r        ends
.rdata$r:00002348
.rdata$r:0000234C ; ===========================================================================
.rdata$r:0000234C
.rdata$r:0000234C ; Segment type: Pure data
.rdata$r:0000234C ; Segment permissions: Read
.rdata$r:0000234C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000234C                 assume cs:_rdata$r
.rdata$r:0000234C                 ;org 234Ch
.rdata$r:0000234C ; COMDAT (pick any)
.rdata$r:0000234C                 public ??_R4CFilterCoder@@6BICompressSetOutStream@@@
.rdata$r:0000234C ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStream'}
.rdata$r:0000234C ??_R4CFilterCoder@@6BICompressSetOutStream@@@ db    0
.rdata$r:0000234C                                         ; DATA XREF: .rdata:000016F0o
.rdata$r:0000234D                 db    0
.rdata$r:0000234E                 db    0
.rdata$r:0000234F                 db    0
.rdata$r:00002350                 db  14h
.rdata$r:00002351                 db    0
.rdata$r:00002352                 db    0
.rdata$r:00002353                 db    0
.rdata$r:00002354                 db    0
.rdata$r:00002355                 db    0
.rdata$r:00002356                 db    0
.rdata$r:00002357                 db    0
.rdata$r:00002358                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:0000235C                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000235C _rdata$r        ends
.rdata$r:0000235C
.rdata$r:00002360 ; ===========================================================================
.rdata$r:00002360
.rdata$r:00002360 ; Segment type: Pure data
.rdata$r:00002360 ; Segment permissions: Read
.rdata$r:00002360 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002360                 assume cs:_rdata$r
.rdata$r:00002360                 ;org 2360h
.rdata$r:00002360 ; COMDAT (pick any)
.rdata$r:00002360                 public ??_R4CFilterCoder@@6BISequentialOutStream@@@
.rdata$r:00002360 ; const CFilterCoder::`RTTI Complete Object Locator'{for `ISequentialOutStream'}
.rdata$r:00002360 ??_R4CFilterCoder@@6BISequentialOutStream@@@ db    0
.rdata$r:00002360                                         ; DATA XREF: .rdata:000016DCo
.rdata$r:00002361                 db    0
.rdata$r:00002362                 db    0
.rdata$r:00002363                 db    0
.rdata$r:00002364                 db  18h
.rdata$r:00002365                 db    0
.rdata$r:00002366                 db    0
.rdata$r:00002367                 db    0
.rdata$r:00002368                 db    0
.rdata$r:00002369                 db    0
.rdata$r:0000236A                 db    0
.rdata$r:0000236B                 db    0
.rdata$r:0000236C                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:00002370                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002370 _rdata$r        ends
.rdata$r:00002370
.rdata$r:00002374 ; ===========================================================================
.rdata$r:00002374
.rdata$r:00002374 ; Segment type: Pure data
.rdata$r:00002374 ; Segment permissions: Read
.rdata$r:00002374 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002374                 assume cs:_rdata$r
.rdata$r:00002374                 ;org 2374h
.rdata$r:00002374 ; COMDAT (pick any)
.rdata$r:00002374                 public ??_R4CFilterCoder@@6BIOutStreamFinish@@@
.rdata$r:00002374 ; const CFilterCoder::`RTTI Complete Object Locator'{for `IOutStreamFinish'}
.rdata$r:00002374 ??_R4CFilterCoder@@6BIOutStreamFinish@@@ db    0
.rdata$r:00002374                                         ; DATA XREF: .rdata:000016C8o
.rdata$r:00002375                 db    0
.rdata$r:00002376                 db    0
.rdata$r:00002377                 db    0
.rdata$r:00002378                 db  1Ch
.rdata$r:00002379                 db    0
.rdata$r:0000237A                 db    0
.rdata$r:0000237B                 db    0
.rdata$r:0000237C                 db    0
.rdata$r:0000237D                 db    0
.rdata$r:0000237E                 db    0
.rdata$r:0000237F                 db    0
.rdata$r:00002380                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:00002384                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002384 _rdata$r        ends
.rdata$r:00002384
.rdata$r:00002388 ; ===========================================================================
.rdata$r:00002388
.rdata$r:00002388 ; Segment type: Pure data
.rdata$r:00002388 ; Segment permissions: Read
.rdata$r:00002388 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002388                 assume cs:_rdata$r
.rdata$r:00002388                 ;org 2388h
.rdata$r:00002388 ; COMDAT (pick any)
.rdata$r:00002388                 public ??_R4CFilterCoder@@6BICompressSetBufSize@@@
.rdata$r:00002388 ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetBufSize'}
.rdata$r:00002388 ??_R4CFilterCoder@@6BICompressSetBufSize@@@ db    0
.rdata$r:00002388                                         ; DATA XREF: .rdata:000016B0o
.rdata$r:00002389                 db    0
.rdata$r:0000238A                 db    0
.rdata$r:0000238B                 db    0
.rdata$r:0000238C                 db  20h
.rdata$r:0000238D                 db    0
.rdata$r:0000238E                 db    0
.rdata$r:0000238F                 db    0
.rdata$r:00002390                 db    0
.rdata$r:00002391                 db    0
.rdata$r:00002392                 db    0
.rdata$r:00002393                 db    0
.rdata$r:00002394                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:00002398                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002398 _rdata$r        ends
.rdata$r:00002398
.rdata$r:0000239C ; ===========================================================================
.rdata$r:0000239C
.rdata$r:0000239C ; Segment type: Pure data
.rdata$r:0000239C ; Segment permissions: Read
.rdata$r:0000239C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000239C                 assume cs:_rdata$r
.rdata$r:0000239C                 ;org 239Ch
.rdata$r:0000239C ; COMDAT (pick any)
.rdata$r:0000239C                 public ??_R4CFilterCoder@@6BICryptoSetPassword@@@
.rdata$r:0000239C ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:0000239C ??_R4CFilterCoder@@6BICryptoSetPassword@@@ db    0
.rdata$r:0000239C                                         ; DATA XREF: .rdata:0000169Co
.rdata$r:0000239D                 db    0
.rdata$r:0000239E                 db    0
.rdata$r:0000239F                 db    0
.rdata$r:000023A0                 db  24h ; $
.rdata$r:000023A1                 db    0
.rdata$r:000023A2                 db    0
.rdata$r:000023A3                 db    0
.rdata$r:000023A4                 db    0
.rdata$r:000023A5                 db    0
.rdata$r:000023A6                 db    0
.rdata$r:000023A7                 db    0
.rdata$r:000023A8                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:000023AC                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023AC _rdata$r        ends
.rdata$r:000023AC
.rdata$r:000023B0 ; ===========================================================================
.rdata$r:000023B0
.rdata$r:000023B0 ; Segment type: Pure data
.rdata$r:000023B0 ; Segment permissions: Read
.rdata$r:000023B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023B0                 assume cs:_rdata$r
.rdata$r:000023B0                 ;org 23B0h
.rdata$r:000023B0 ; COMDAT (pick any)
.rdata$r:000023B0                 public ??_R4CFilterCoder@@6BICryptoProperties@@@
.rdata$r:000023B0 ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata$r:000023B0 ??_R4CFilterCoder@@6BICryptoProperties@@@ db    0
.rdata$r:000023B0                                         ; DATA XREF: .rdata:00001684o
.rdata$r:000023B1                 db    0
.rdata$r:000023B2                 db    0
.rdata$r:000023B3                 db    0
.rdata$r:000023B4                 db  28h ; (
.rdata$r:000023B5                 db    0
.rdata$r:000023B6                 db    0
.rdata$r:000023B7                 db    0
.rdata$r:000023B8                 db    0
.rdata$r:000023B9                 db    0
.rdata$r:000023BA                 db    0
.rdata$r:000023BB                 db    0
.rdata$r:000023BC                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:000023C0                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023C0 _rdata$r        ends
.rdata$r:000023C0
.rdata$r:000023C4 ; ===========================================================================
.rdata$r:000023C4
.rdata$r:000023C4 ; Segment type: Pure data
.rdata$r:000023C4 ; Segment permissions: Read
.rdata$r:000023C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023C4                 assume cs:_rdata$r
.rdata$r:000023C4                 ;org 23C4h
.rdata$r:000023C4 ; COMDAT (pick any)
.rdata$r:000023C4                 public ??_R4CFilterCoder@@6BICompressSetCoderProperties@@@
.rdata$r:000023C4 ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:000023C4 ??_R4CFilterCoder@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:000023C4                                         ; DATA XREF: .rdata:00001670o
.rdata$r:000023C5                 db    0
.rdata$r:000023C6                 db    0
.rdata$r:000023C7                 db    0
.rdata$r:000023C8                 db  2Ch ; ,
.rdata$r:000023C9                 db    0
.rdata$r:000023CA                 db    0
.rdata$r:000023CB                 db    0
.rdata$r:000023CC                 db    0
.rdata$r:000023CD                 db    0
.rdata$r:000023CE                 db    0
.rdata$r:000023CF                 db    0
.rdata$r:000023D0                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:000023D4                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023D4 _rdata$r        ends
.rdata$r:000023D4
.rdata$r:000023D8 ; ===========================================================================
.rdata$r:000023D8
.rdata$r:000023D8 ; Segment type: Pure data
.rdata$r:000023D8 ; Segment permissions: Read
.rdata$r:000023D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023D8                 assume cs:_rdata$r
.rdata$r:000023D8                 ;org 23D8h
.rdata$r:000023D8 ; COMDAT (pick any)
.rdata$r:000023D8                 public ??_R4CFilterCoder@@6BICompressWriteCoderProperties@@@
.rdata$r:000023D8 ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata$r:000023D8 ??_R4CFilterCoder@@6BICompressWriteCoderProperties@@@ db    0
.rdata$r:000023D8                                         ; DATA XREF: .rdata:0000165Co
.rdata$r:000023D9                 db    0
.rdata$r:000023DA                 db    0
.rdata$r:000023DB                 db    0
.rdata$r:000023DC                 db  30h ; 0
.rdata$r:000023DD                 db    0
.rdata$r:000023DE                 db    0
.rdata$r:000023DF                 db    0
.rdata$r:000023E0                 db    0
.rdata$r:000023E1                 db    0
.rdata$r:000023E2                 db    0
.rdata$r:000023E3                 db    0
.rdata$r:000023E4                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:000023E8                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023E8 _rdata$r        ends
.rdata$r:000023E8
.rdata$r:000023EC ; ===========================================================================
.rdata$r:000023EC
.rdata$r:000023EC ; Segment type: Pure data
.rdata$r:000023EC ; Segment permissions: Read
.rdata$r:000023EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023EC                 assume cs:_rdata$r
.rdata$r:000023EC                 ;org 23ECh
.rdata$r:000023EC ; COMDAT (pick any)
.rdata$r:000023EC                 public ??_R4CFilterCoder@@6BICryptoResetInitVector@@@
.rdata$r:000023EC ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICryptoResetInitVector'}
.rdata$r:000023EC ??_R4CFilterCoder@@6BICryptoResetInitVector@@@ db    0
.rdata$r:000023EC                                         ; DATA XREF: .rdata:00001648o
.rdata$r:000023ED                 db    0
.rdata$r:000023EE                 db    0
.rdata$r:000023EF                 db    0
.rdata$r:000023F0                 db  34h ; 4
.rdata$r:000023F1                 db    0
.rdata$r:000023F2                 db    0
.rdata$r:000023F3                 db    0
.rdata$r:000023F4                 db    0
.rdata$r:000023F5                 db    0
.rdata$r:000023F6                 db    0
.rdata$r:000023F7                 db    0
.rdata$r:000023F8                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:000023FC                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023FC _rdata$r        ends
.rdata$r:000023FC
.rdata$r:00002400 ; ===========================================================================
.rdata$r:00002400
.rdata$r:00002400 ; Segment type: Pure data
.rdata$r:00002400 ; Segment permissions: Read
.rdata$r:00002400 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002400                 assume cs:_rdata$r
.rdata$r:00002400                 ;org 2400h
.rdata$r:00002400 ; COMDAT (pick any)
.rdata$r:00002400                 public ??_R4CFilterCoder@@6BICompressSetDecoderProperties2@@@
.rdata$r:00002400 ; const CFilterCoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata$r:00002400 ??_R4CFilterCoder@@6BICompressSetDecoderProperties2@@@ db    0
.rdata$r:00002400                                         ; DATA XREF: .rdata:00001634o
.rdata$r:00002401                 db    0
.rdata$r:00002402                 db    0
.rdata$r:00002403                 db    0
.rdata$r:00002404                 db  38h ; 8
.rdata$r:00002405                 db    0
.rdata$r:00002406                 db    0
.rdata$r:00002407                 db    0
.rdata$r:00002408                 db    0
.rdata$r:00002409                 db    0
.rdata$r:0000240A                 db    0
.rdata$r:0000240B                 db    0
.rdata$r:0000240C                 dd offset ??_R0?AVCFilterCoder@@@8 ; CFilterCoder `RTTI Type Descriptor'
.rdata$r:00002410                 dd offset ??_R3CFilterCoder@@8 ; CFilterCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002410 _rdata$r        ends
.rdata$r:00002410
.text:00002414 ; ===========================================================================
.text:00002414
.text:00002414 ; Segment type: Pure code
.text:00002414 ; Segment permissions: Read/Execute
.text:00002414 _text           segment para public 'CODE' use32
.text:00002414                 assume cs:_text
.text:00002414                 ;org 2414h
.text:00002414 ; COMDAT (pick any)
.text:00002414                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002414
.text:00002414 ; =============== S U B R O U T I N E =======================================
.text:00002414
.text:00002414 ; Attributes: bp-based frame
.text:00002414
.text:00002414 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00002414                 public ??0CMyUnknownImp@@QAE@XZ
.text:00002414 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CFilterCoder::CFilterCoder(bool)+D5p
.text:00002414
.text:00002414 var_4           = dword ptr -4
.text:00002414
.text:00002414                 push    ebp
.text:00002415                 mov     ebp, esp
.text:00002417                 push    ecx
.text:00002418                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000241F                 mov     [ebp+var_4], ecx
.text:00002422                 mov     eax, [ebp+var_4]
.text:00002425                 mov     dword ptr [eax], 0
.text:0000242B                 mov     eax, [ebp+var_4]
.text:0000242E                 mov     esp, ebp
.text:00002430                 pop     ebp
.text:00002431                 retn
.text:00002431 ??0CMyUnknownImp@@QAE@XZ endp
.text:00002431
.text:00002431 ; ---------------------------------------------------------------------------
.text:00002432                 align 4
.text:00002432 _text           ends
.text:00002432
.text:00002434 ; ===========================================================================
.text:00002434
.text:00002434 ; Segment type: Pure code
.text:00002434 ; Segment permissions: Read/Execute
.text:00002434 _text           segment para public 'CODE' use32
.text:00002434                 assume cs:_text
.text:00002434                 ;org 2434h
.text:00002434 ; COMDAT (pick any)
.text:00002434                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002434
.text:00002434 ; =============== S U B R O U T I N E =======================================
.text:00002434
.text:00002434 ; Attributes: bp-based frame
.text:00002434
.text:00002434 ; _DWORD __thiscall CAlignedMidBuffer::CAlignedMidBuffer(CAlignedMidBuffer *__hidden this)
.text:00002434                 public ??0CAlignedMidBuffer@@QAE@XZ
.text:00002434 ??0CAlignedMidBuffer@@QAE@XZ proc near  ; CODE XREF: CFilterCoder::CFilterCoder(bool)+E0p
.text:00002434
.text:00002434 var_4           = dword ptr -4
.text:00002434
.text:00002434                 push    ebp
.text:00002435                 mov     ebp, esp
.text:00002437                 push    ecx
.text:00002438                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000243F                 mov     [ebp+var_4], ecx
.text:00002442                 mov     eax, [ebp+var_4]
.text:00002445                 mov     dword ptr [eax], 0
.text:0000244B                 mov     ecx, [ebp+var_4]
.text:0000244E                 mov     dword ptr [ecx+4], 0
.text:00002455                 mov     eax, [ebp+var_4]
.text:00002458                 mov     esp, ebp
.text:0000245A                 pop     ebp
.text:0000245B                 retn
.text:0000245B ??0CAlignedMidBuffer@@QAE@XZ endp
.text:0000245B
.text:0000245B _text           ends
.text:0000245B
.text:0000245C ; ===========================================================================
.text:0000245C
.text:0000245C ; Segment type: Pure code
.text:0000245C ; Segment permissions: Read/Execute
.text:0000245C _text           segment para public 'CODE' use32
.text:0000245C                 assume cs:_text
.text:0000245C                 ;org 245Ch
.text:0000245C ; COMDAT (pick any)
.text:0000245C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000245C
.text:0000245C ; =============== S U B R O U T I N E =======================================
.text:0000245C
.text:0000245C ; Attributes: bp-based frame
.text:0000245C
.text:0000245C ; _DWORD __thiscall CAlignedMidBuffer::~CAlignedMidBuffer(CAlignedMidBuffer *__hidden this)
.text:0000245C                 public ??1CAlignedMidBuffer@@QAE@XZ
.text:0000245C ??1CAlignedMidBuffer@@QAE@XZ proc near  ; CODE XREF: CFilterCoder::~CFilterCoder(void)+16Bp
.text:0000245C                                         ; __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$0+6j ...
.text:0000245C
.text:0000245C var_4           = dword ptr -4
.text:0000245C
.text:0000245C                 push    ebp
.text:0000245D                 mov     ebp, esp
.text:0000245F                 push    ecx
.text:00002460                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002467                 mov     [ebp+var_4], ecx
.text:0000246A                 mov     eax, [ebp+var_4]
.text:0000246D                 mov     ecx, [eax]
.text:0000246F                 push    ecx
.text:00002470                 call    _MidFree@4      ; MidFree(x)
.text:00002475                 add     esp, 4
.text:00002478                 cmp     ebp, esp
.text:0000247A                 call    __RTC_CheckEsp
.text:0000247F                 mov     esp, ebp
.text:00002481                 pop     ebp
.text:00002482                 retn
.text:00002482 ??1CAlignedMidBuffer@@QAE@XZ endp
.text:00002482
.text:00002482 ; ---------------------------------------------------------------------------
.text:00002483                 align 4
.text:00002483 _text           ends
.text:00002483
.text:00002484 ; ===========================================================================
.text:00002484
.text:00002484 ; Segment type: Pure code
.text:00002484 ; Segment permissions: Read/Execute
.text:00002484 _text           segment para public 'CODE' use32
.text:00002484                 assume cs:_text
.text:00002484                 ;org 2484h
.text:00002484 ; COMDAT (pick any)
.text:00002484                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002484
.text:00002484 ; =============== S U B R O U T I N E =======================================
.text:00002484
.text:00002484 ; Attributes: bp-based frame
.text:00002484
.text:00002484 ; __int32 __stdcall CFilterCoder::QueryInterface(CFilterCoder *this, const struct _GUID *Buf1, void **)
.text:00002484                 public ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z
.text:00002484 ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00002484                                         ; CODE XREF: [thunk]:CFilterCoder::QueryInterface`adjustor{48}' (_GUID const &,void * *)+5j
.text:00002484                                         ; [thunk]:CFilterCoder::QueryInterface`adjustor{20}' (_GUID const &,void * *)+5j ...
.text:00002484
.text:00002484 var_68          = dword ptr -68h
.text:00002484 var_64          = dword ptr -64h
.text:00002484 var_60          = dword ptr -60h
.text:00002484 var_5C          = dword ptr -5Ch
.text:00002484 var_58          = dword ptr -58h
.text:00002484 var_54          = dword ptr -54h
.text:00002484 var_50          = dword ptr -50h
.text:00002484 var_4C          = dword ptr -4Ch
.text:00002484 var_48          = dword ptr -48h
.text:00002484 var_44          = dword ptr -44h
.text:00002484 var_40          = dword ptr -40h
.text:00002484 var_3C          = dword ptr -3Ch
.text:00002484 var_38          = dword ptr -38h
.text:00002484 var_34          = dword ptr -34h
.text:00002484 var_30          = dword ptr -30h
.text:00002484 var_2C          = dword ptr -2Ch
.text:00002484 var_28          = dword ptr -28h
.text:00002484 var_24          = dword ptr -24h
.text:00002484 var_20          = dword ptr -20h
.text:00002484 var_1C          = dword ptr -1Ch
.text:00002484 var_18          = dword ptr -18h
.text:00002484 var_14          = dword ptr -14h
.text:00002484 var_10          = dword ptr -10h
.text:00002484 var_C           = dword ptr -0Ch
.text:00002484 var_8           = dword ptr -8
.text:00002484 var_4           = dword ptr -4
.text:00002484 this            = dword ptr  8
.text:00002484 Buf1            = dword ptr  0Ch
.text:00002484 arg_8           = dword ptr  10h
.text:00002484
.text:00002484                 push    ebp
.text:00002485                 mov     ebp, esp
.text:00002487                 sub     esp, 68h
.text:0000248A                 push    esi
.text:0000248B                 push    edi
.text:0000248C                 lea     edi, [ebp+var_68]
.text:0000248F                 mov     ecx, 1Ah
.text:00002494                 mov     eax, 0CCCCCCCCh
.text:00002499                 rep stosd
.text:0000249B                 mov     eax, [ebp+arg_8]
.text:0000249E                 mov     dword ptr [eax], 0
.text:000024A4                 push    offset _IID_IUnknown ; Buf2
.text:000024A9                 mov     ecx, [ebp+Buf1]
.text:000024AC                 push    ecx             ; Buf1
.text:000024AD                 call    ___@8           ; __(x,x)
.text:000024B2                 test    eax, eax
.text:000024B4                 jz      short loc_24C3
.text:000024B6                 mov     edx, [ebp+arg_8]
.text:000024B9                 mov     eax, [ebp+this]
.text:000024BC                 mov     [edx], eax
.text:000024BE                 jmp     loc_2A3D
.text:000024C3 ; ---------------------------------------------------------------------------
.text:000024C3
.text:000024C3 loc_24C3:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+30j
.text:000024C3                 push    offset _IID_ICompressCoder ; Buf2
.text:000024C8                 mov     ecx, [ebp+Buf1]
.text:000024CB                 push    ecx             ; Buf1
.text:000024CC                 call    ___@8           ; __(x,x)
.text:000024D1                 test    eax, eax
.text:000024D3                 jz      short loc_24E2
.text:000024D5                 mov     edx, [ebp+arg_8]
.text:000024D8                 mov     eax, [ebp+this]
.text:000024DB                 mov     [edx], eax
.text:000024DD                 jmp     loc_2A3D
.text:000024E2 ; ---------------------------------------------------------------------------
.text:000024E2
.text:000024E2 loc_24E2:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+4Fj
.text:000024E2                 push    offset _IID_ICompressSetOutStreamSize ; Buf2
.text:000024E7                 mov     ecx, [ebp+Buf1]
.text:000024EA                 push    ecx             ; Buf1
.text:000024EB                 call    ___@8           ; __(x,x)
.text:000024F0                 test    eax, eax
.text:000024F2                 jz      short loc_2519
.text:000024F4                 cmp     [ebp+this], 0
.text:000024F8                 jz      short loc_2505
.text:000024FA                 mov     edx, [ebp+this]
.text:000024FD                 add     edx, 4
.text:00002500                 mov     [ebp+var_1C], edx
.text:00002503                 jmp     short loc_250C
.text:00002505 ; ---------------------------------------------------------------------------
.text:00002505
.text:00002505 loc_2505:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+74j
.text:00002505                 mov     [ebp+var_1C], 0
.text:0000250C
.text:0000250C loc_250C:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+7Fj
.text:0000250C                 mov     eax, [ebp+arg_8]
.text:0000250F                 mov     ecx, [ebp+var_1C]
.text:00002512                 mov     [eax], ecx
.text:00002514                 jmp     loc_2A3D
.text:00002519 ; ---------------------------------------------------------------------------
.text:00002519
.text:00002519 loc_2519:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:00002519                 push    offset _IID_ICompressInitEncoder ; Buf2
.text:0000251E                 mov     edx, [ebp+Buf1]
.text:00002521                 push    edx             ; Buf1
.text:00002522                 call    ___@8           ; __(x,x)
.text:00002527                 test    eax, eax
.text:00002529                 jz      short loc_2550
.text:0000252B                 cmp     [ebp+this], 0
.text:0000252F                 jz      short loc_253C
.text:00002531                 mov     eax, [ebp+this]
.text:00002534                 add     eax, 8
.text:00002537                 mov     [ebp+var_20], eax
.text:0000253A                 jmp     short loc_2543
.text:0000253C ; ---------------------------------------------------------------------------
.text:0000253C
.text:0000253C loc_253C:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+ABj
.text:0000253C                 mov     [ebp+var_20], 0
.text:00002543
.text:00002543 loc_2543:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+B6j
.text:00002543                 mov     ecx, [ebp+arg_8]
.text:00002546                 mov     edx, [ebp+var_20]
.text:00002549                 mov     [ecx], edx
.text:0000254B                 jmp     loc_2A3D
.text:00002550 ; ---------------------------------------------------------------------------
.text:00002550
.text:00002550 loc_2550:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+A5j
.text:00002550                 push    offset _IID_ICompressSetInStream ; Buf2
.text:00002555                 mov     eax, [ebp+Buf1]
.text:00002558                 push    eax             ; Buf1
.text:00002559                 call    ___@8           ; __(x,x)
.text:0000255E                 test    eax, eax
.text:00002560                 jz      short loc_2587
.text:00002562                 cmp     [ebp+this], 0
.text:00002566                 jz      short loc_2573
.text:00002568                 mov     ecx, [ebp+this]
.text:0000256B                 add     ecx, 0Ch
.text:0000256E                 mov     [ebp+var_24], ecx
.text:00002571                 jmp     short loc_257A
.text:00002573 ; ---------------------------------------------------------------------------
.text:00002573
.text:00002573 loc_2573:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+E2j
.text:00002573                 mov     [ebp+var_24], 0
.text:0000257A
.text:0000257A loc_257A:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+EDj
.text:0000257A                 mov     edx, [ebp+arg_8]
.text:0000257D                 mov     eax, [ebp+var_24]
.text:00002580                 mov     [edx], eax
.text:00002582                 jmp     loc_2A3D
.text:00002587 ; ---------------------------------------------------------------------------
.text:00002587
.text:00002587 loc_2587:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+DCj
.text:00002587                 push    offset _IID_ISequentialInStream ; Buf2
.text:0000258C                 mov     ecx, [ebp+Buf1]
.text:0000258F                 push    ecx             ; Buf1
.text:00002590                 call    ___@8           ; __(x,x)
.text:00002595                 test    eax, eax
.text:00002597                 jz      short loc_25BE
.text:00002599                 cmp     [ebp+this], 0
.text:0000259D                 jz      short loc_25AA
.text:0000259F                 mov     edx, [ebp+this]
.text:000025A2                 add     edx, 10h
.text:000025A5                 mov     [ebp+var_28], edx
.text:000025A8                 jmp     short loc_25B1
.text:000025AA ; ---------------------------------------------------------------------------
.text:000025AA
.text:000025AA loc_25AA:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+119j
.text:000025AA                 mov     [ebp+var_28], 0
.text:000025B1
.text:000025B1 loc_25B1:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+124j
.text:000025B1                 mov     eax, [ebp+arg_8]
.text:000025B4                 mov     ecx, [ebp+var_28]
.text:000025B7                 mov     [eax], ecx
.text:000025B9                 jmp     loc_2A3D
.text:000025BE ; ---------------------------------------------------------------------------
.text:000025BE
.text:000025BE loc_25BE:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+113j
.text:000025BE                 push    offset _IID_ICompressSetOutStream ; Buf2
.text:000025C3                 mov     edx, [ebp+Buf1]
.text:000025C6                 push    edx             ; Buf1
.text:000025C7                 call    ___@8           ; __(x,x)
.text:000025CC                 test    eax, eax
.text:000025CE                 jz      short loc_25F5
.text:000025D0                 cmp     [ebp+this], 0
.text:000025D4                 jz      short loc_25E1
.text:000025D6                 mov     eax, [ebp+this]
.text:000025D9                 add     eax, 14h
.text:000025DC                 mov     [ebp+var_2C], eax
.text:000025DF                 jmp     short loc_25E8
.text:000025E1 ; ---------------------------------------------------------------------------
.text:000025E1
.text:000025E1 loc_25E1:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+150j
.text:000025E1                 mov     [ebp+var_2C], 0
.text:000025E8
.text:000025E8 loc_25E8:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+15Bj
.text:000025E8                 mov     ecx, [ebp+arg_8]
.text:000025EB                 mov     edx, [ebp+var_2C]
.text:000025EE                 mov     [ecx], edx
.text:000025F0                 jmp     loc_2A3D
.text:000025F5 ; ---------------------------------------------------------------------------
.text:000025F5
.text:000025F5 loc_25F5:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+14Aj
.text:000025F5                 push    offset _IID_ISequentialOutStream ; Buf2
.text:000025FA                 mov     eax, [ebp+Buf1]
.text:000025FD                 push    eax             ; Buf1
.text:000025FE                 call    ___@8           ; __(x,x)
.text:00002603                 test    eax, eax
.text:00002605                 jz      short loc_262C
.text:00002607                 cmp     [ebp+this], 0
.text:0000260B                 jz      short loc_2618
.text:0000260D                 mov     ecx, [ebp+this]
.text:00002610                 add     ecx, 18h
.text:00002613                 mov     [ebp+var_30], ecx
.text:00002616                 jmp     short loc_261F
.text:00002618 ; ---------------------------------------------------------------------------
.text:00002618
.text:00002618 loc_2618:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+187j
.text:00002618                 mov     [ebp+var_30], 0
.text:0000261F
.text:0000261F loc_261F:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+192j
.text:0000261F                 mov     edx, [ebp+arg_8]
.text:00002622                 mov     eax, [ebp+var_30]
.text:00002625                 mov     [edx], eax
.text:00002627                 jmp     loc_2A3D
.text:0000262C ; ---------------------------------------------------------------------------
.text:0000262C
.text:0000262C loc_262C:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+181j
.text:0000262C                 push    offset _IID_IOutStreamFinish ; Buf2
.text:00002631                 mov     ecx, [ebp+Buf1]
.text:00002634                 push    ecx             ; Buf1
.text:00002635                 call    ___@8           ; __(x,x)
.text:0000263A                 test    eax, eax
.text:0000263C                 jz      short loc_2663
.text:0000263E                 cmp     [ebp+this], 0
.text:00002642                 jz      short loc_264F
.text:00002644                 mov     edx, [ebp+this]
.text:00002647                 add     edx, 1Ch
.text:0000264A                 mov     [ebp+var_34], edx
.text:0000264D                 jmp     short loc_2656
.text:0000264F ; ---------------------------------------------------------------------------
.text:0000264F
.text:0000264F loc_264F:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+1BEj
.text:0000264F                 mov     [ebp+var_34], 0
.text:00002656
.text:00002656 loc_2656:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+1C9j
.text:00002656                 mov     eax, [ebp+arg_8]
.text:00002659                 mov     ecx, [ebp+var_34]
.text:0000265C                 mov     [eax], ecx
.text:0000265E                 jmp     loc_2A3D
.text:00002663 ; ---------------------------------------------------------------------------
.text:00002663
.text:00002663 loc_2663:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+1B8j
.text:00002663                 push    offset _IID_ICompressSetBufSize ; Buf2
.text:00002668                 mov     edx, [ebp+Buf1]
.text:0000266B                 push    edx             ; Buf1
.text:0000266C                 call    ___@8           ; __(x,x)
.text:00002671                 test    eax, eax
.text:00002673                 jz      short loc_269A
.text:00002675                 cmp     [ebp+this], 0
.text:00002679                 jz      short loc_2686
.text:0000267B                 mov     eax, [ebp+this]
.text:0000267E                 add     eax, 20h ; ' '
.text:00002681                 mov     [ebp+var_38], eax
.text:00002684                 jmp     short loc_268D
.text:00002686 ; ---------------------------------------------------------------------------
.text:00002686
.text:00002686 loc_2686:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+1F5j
.text:00002686                 mov     [ebp+var_38], 0
.text:0000268D
.text:0000268D loc_268D:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+200j
.text:0000268D                 mov     ecx, [ebp+arg_8]
.text:00002690                 mov     edx, [ebp+var_38]
.text:00002693                 mov     [ecx], edx
.text:00002695                 jmp     loc_2A3D
.text:0000269A ; ---------------------------------------------------------------------------
.text:0000269A
.text:0000269A loc_269A:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+1EFj
.text:0000269A                 push    offset _IID_ICryptoSetPassword ; Buf2
.text:0000269F                 mov     eax, [ebp+Buf1]
.text:000026A2                 push    eax             ; Buf1
.text:000026A3                 call    ___@8           ; __(x,x)
.text:000026A8                 test    eax, eax
.text:000026AA                 jz      loc_2730
.text:000026B0                 mov     ecx, [ebp+this]
.text:000026B3                 add     ecx, 7Ch ; '|'
.text:000026B6                 call    ??7?$CMyComPtr@UICryptoSetPassword@@@@QBE_NXZ ; CMyComPtr<ICryptoSetPassword>::operator!(void)
.text:000026BB                 movzx   ecx, al
.text:000026BE                 test    ecx, ecx
.text:000026C0                 jz      short loc_270B
.text:000026C2                 mov     ecx, [ebp+this]
.text:000026C5                 add     ecx, 94h ; 'ö'
.text:000026CB                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:000026D0                 mov     [ebp+var_3C], eax
.text:000026D3                 mov     ecx, [ebp+this]
.text:000026D6                 add     ecx, 7Ch ; '|'
.text:000026D9                 call    ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&(void)
.text:000026DE                 mov     esi, esp
.text:000026E0                 push    eax
.text:000026E1                 push    offset _IID_ICryptoSetPassword
.text:000026E6                 mov     edx, [ebp+var_3C]
.text:000026E9                 push    edx
.text:000026EA                 mov     eax, [ebp+var_3C]
.text:000026ED                 mov     ecx, [eax]
.text:000026EF                 mov     edx, [ecx]
.text:000026F1                 call    edx
.text:000026F3                 cmp     esi, esp
.text:000026F5                 call    __RTC_CheckEsp
.text:000026FA                 mov     [ebp+var_4], eax
.text:000026FD                 cmp     [ebp+var_4], 0
.text:00002701                 jz      short loc_270B
.text:00002703                 mov     eax, [ebp+var_4]
.text:00002706                 jmp     loc_2A4E
.text:0000270B ; ---------------------------------------------------------------------------
.text:0000270B
.text:0000270B loc_270B:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+23Cj
.text:0000270B                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+27Dj
.text:0000270B                 cmp     [ebp+this], 0
.text:0000270F                 jz      short loc_271C
.text:00002711                 mov     eax, [ebp+this]
.text:00002714                 add     eax, 24h ; '$'
.text:00002717                 mov     [ebp+var_40], eax
.text:0000271A                 jmp     short loc_2723
.text:0000271C ; ---------------------------------------------------------------------------
.text:0000271C
.text:0000271C loc_271C:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+28Bj
.text:0000271C                 mov     [ebp+var_40], 0
.text:00002723
.text:00002723 loc_2723:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+296j
.text:00002723                 mov     ecx, [ebp+arg_8]
.text:00002726                 mov     edx, [ebp+var_40]
.text:00002729                 mov     [ecx], edx
.text:0000272B                 jmp     loc_2A3D
.text:00002730 ; ---------------------------------------------------------------------------
.text:00002730
.text:00002730 loc_2730:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+226j
.text:00002730                 push    offset _IID_ICryptoProperties ; Buf2
.text:00002735                 mov     eax, [ebp+Buf1]
.text:00002738                 push    eax             ; Buf1
.text:00002739                 call    ___@8           ; __(x,x)
.text:0000273E                 test    eax, eax
.text:00002740                 jz      loc_27CC
.text:00002746                 mov     ecx, [ebp+this]
.text:00002749                 add     ecx, 80h ; 'Ç'
.text:0000274F                 call    ??7?$CMyComPtr@UICryptoProperties@@@@QBE_NXZ ; CMyComPtr<ICryptoProperties>::operator!(void)
.text:00002754                 movzx   ecx, al
.text:00002757                 test    ecx, ecx
.text:00002759                 jz      short loc_27A7
.text:0000275B                 mov     ecx, [ebp+this]
.text:0000275E                 add     ecx, 94h ; 'ö'
.text:00002764                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:00002769                 mov     [ebp+var_44], eax
.text:0000276C                 mov     ecx, [ebp+this]
.text:0000276F                 add     ecx, 80h ; 'Ç'
.text:00002775                 call    ??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator&(void)
.text:0000277A                 mov     esi, esp
.text:0000277C                 push    eax
.text:0000277D                 push    offset _IID_ICryptoProperties
.text:00002782                 mov     edx, [ebp+var_44]
.text:00002785                 push    edx
.text:00002786                 mov     eax, [ebp+var_44]
.text:00002789                 mov     ecx, [eax]
.text:0000278B                 mov     edx, [ecx]
.text:0000278D                 call    edx
.text:0000278F                 cmp     esi, esp
.text:00002791                 call    __RTC_CheckEsp
.text:00002796                 mov     [ebp+var_8], eax
.text:00002799                 cmp     [ebp+var_8], 0
.text:0000279D                 jz      short loc_27A7
.text:0000279F                 mov     eax, [ebp+var_8]
.text:000027A2                 jmp     loc_2A4E
.text:000027A7 ; ---------------------------------------------------------------------------
.text:000027A7
.text:000027A7 loc_27A7:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+2D5j
.text:000027A7                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+319j
.text:000027A7                 cmp     [ebp+this], 0
.text:000027AB                 jz      short loc_27B8
.text:000027AD                 mov     eax, [ebp+this]
.text:000027B0                 add     eax, 28h ; '('
.text:000027B3                 mov     [ebp+var_48], eax
.text:000027B6                 jmp     short loc_27BF
.text:000027B8 ; ---------------------------------------------------------------------------
.text:000027B8
.text:000027B8 loc_27B8:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+327j
.text:000027B8                 mov     [ebp+var_48], 0
.text:000027BF
.text:000027BF loc_27BF:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+332j
.text:000027BF                 mov     ecx, [ebp+arg_8]
.text:000027C2                 mov     edx, [ebp+var_48]
.text:000027C5                 mov     [ecx], edx
.text:000027C7                 jmp     loc_2A3D
.text:000027CC ; ---------------------------------------------------------------------------
.text:000027CC
.text:000027CC loc_27CC:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+2BCj
.text:000027CC                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:000027D1                 mov     eax, [ebp+Buf1]
.text:000027D4                 push    eax             ; Buf1
.text:000027D5                 call    ___@8           ; __(x,x)
.text:000027DA                 test    eax, eax
.text:000027DC                 jz      loc_2868
.text:000027E2                 mov     ecx, [ebp+this]
.text:000027E5                 add     ecx, 84h ; 'ä'
.text:000027EB                 call    ??7?$CMyComPtr@UICompressSetCoderProperties@@@@QBE_NXZ ; CMyComPtr<ICompressSetCoderProperties>::operator!(void)
.text:000027F0                 movzx   ecx, al
.text:000027F3                 test    ecx, ecx
.text:000027F5                 jz      short loc_2843
.text:000027F7                 mov     ecx, [ebp+this]
.text:000027FA                 add     ecx, 94h ; 'ö'
.text:00002800                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:00002805                 mov     [ebp+var_4C], eax
.text:00002808                 mov     ecx, [ebp+this]
.text:0000280B                 add     ecx, 84h ; 'ä'
.text:00002811                 call    ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&(void)
.text:00002816                 mov     esi, esp
.text:00002818                 push    eax
.text:00002819                 push    offset _IID_ICompressSetCoderProperties
.text:0000281E                 mov     edx, [ebp+var_4C]
.text:00002821                 push    edx
.text:00002822                 mov     eax, [ebp+var_4C]
.text:00002825                 mov     ecx, [eax]
.text:00002827                 mov     edx, [ecx]
.text:00002829                 call    edx
.text:0000282B                 cmp     esi, esp
.text:0000282D                 call    __RTC_CheckEsp
.text:00002832                 mov     [ebp+var_C], eax
.text:00002835                 cmp     [ebp+var_C], 0
.text:00002839                 jz      short loc_2843
.text:0000283B                 mov     eax, [ebp+var_C]
.text:0000283E                 jmp     loc_2A4E
.text:00002843 ; ---------------------------------------------------------------------------
.text:00002843
.text:00002843 loc_2843:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+371j
.text:00002843                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+3B5j
.text:00002843                 cmp     [ebp+this], 0
.text:00002847                 jz      short loc_2854
.text:00002849                 mov     eax, [ebp+this]
.text:0000284C                 add     eax, 2Ch ; ','
.text:0000284F                 mov     [ebp+var_50], eax
.text:00002852                 jmp     short loc_285B
.text:00002854 ; ---------------------------------------------------------------------------
.text:00002854
.text:00002854 loc_2854:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+3C3j
.text:00002854                 mov     [ebp+var_50], 0
.text:0000285B
.text:0000285B loc_285B:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+3CEj
.text:0000285B                 mov     ecx, [ebp+arg_8]
.text:0000285E                 mov     edx, [ebp+var_50]
.text:00002861                 mov     [ecx], edx
.text:00002863                 jmp     loc_2A3D
.text:00002868 ; ---------------------------------------------------------------------------
.text:00002868
.text:00002868 loc_2868:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+358j
.text:00002868                 push    offset _IID_ICompressWriteCoderProperties ; Buf2
.text:0000286D                 mov     eax, [ebp+Buf1]
.text:00002870                 push    eax             ; Buf1
.text:00002871                 call    ___@8           ; __(x,x)
.text:00002876                 test    eax, eax
.text:00002878                 jz      loc_2904
.text:0000287E                 mov     ecx, [ebp+this]
.text:00002881                 add     ecx, 88h ; 'ê'
.text:00002887                 call    ??7?$CMyComPtr@UICompressWriteCoderProperties@@@@QBE_NXZ ; CMyComPtr<ICompressWriteCoderProperties>::operator!(void)
.text:0000288C                 movzx   ecx, al
.text:0000288F                 test    ecx, ecx
.text:00002891                 jz      short loc_28DF
.text:00002893                 mov     ecx, [ebp+this]
.text:00002896                 add     ecx, 94h ; 'ö'
.text:0000289C                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:000028A1                 mov     [ebp+var_54], eax
.text:000028A4                 mov     ecx, [ebp+this]
.text:000028A7                 add     ecx, 88h ; 'ê'
.text:000028AD                 call    ??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator&(void)
.text:000028B2                 mov     esi, esp
.text:000028B4                 push    eax
.text:000028B5                 push    offset _IID_ICompressWriteCoderProperties
.text:000028BA                 mov     edx, [ebp+var_54]
.text:000028BD                 push    edx
.text:000028BE                 mov     eax, [ebp+var_54]
.text:000028C1                 mov     ecx, [eax]
.text:000028C3                 mov     edx, [ecx]
.text:000028C5                 call    edx
.text:000028C7                 cmp     esi, esp
.text:000028C9                 call    __RTC_CheckEsp
.text:000028CE                 mov     [ebp+var_10], eax
.text:000028D1                 cmp     [ebp+var_10], 0
.text:000028D5                 jz      short loc_28DF
.text:000028D7                 mov     eax, [ebp+var_10]
.text:000028DA                 jmp     loc_2A4E
.text:000028DF ; ---------------------------------------------------------------------------
.text:000028DF
.text:000028DF loc_28DF:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+40Dj
.text:000028DF                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+451j
.text:000028DF                 cmp     [ebp+this], 0
.text:000028E3                 jz      short loc_28F0
.text:000028E5                 mov     eax, [ebp+this]
.text:000028E8                 add     eax, 30h ; '0'
.text:000028EB                 mov     [ebp+var_58], eax
.text:000028EE                 jmp     short loc_28F7
.text:000028F0 ; ---------------------------------------------------------------------------
.text:000028F0
.text:000028F0 loc_28F0:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+45Fj
.text:000028F0                 mov     [ebp+var_58], 0
.text:000028F7
.text:000028F7 loc_28F7:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+46Aj
.text:000028F7                 mov     ecx, [ebp+arg_8]
.text:000028FA                 mov     edx, [ebp+var_58]
.text:000028FD                 mov     [ecx], edx
.text:000028FF                 jmp     loc_2A3D
.text:00002904 ; ---------------------------------------------------------------------------
.text:00002904
.text:00002904 loc_2904:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+3F4j
.text:00002904                 push    offset _IID_ICryptoResetInitVector ; Buf2
.text:00002909                 mov     eax, [ebp+Buf1]
.text:0000290C                 push    eax             ; Buf1
.text:0000290D                 call    ___@8           ; __(x,x)
.text:00002912                 test    eax, eax
.text:00002914                 jz      loc_29A0
.text:0000291A                 mov     ecx, [ebp+this]
.text:0000291D                 add     ecx, 8Ch ; 'î'
.text:00002923                 call    ??7?$CMyComPtr@UICryptoResetInitVector@@@@QBE_NXZ ; CMyComPtr<ICryptoResetInitVector>::operator!(void)
.text:00002928                 movzx   ecx, al
.text:0000292B                 test    ecx, ecx
.text:0000292D                 jz      short loc_297B
.text:0000292F                 mov     ecx, [ebp+this]
.text:00002932                 add     ecx, 94h ; 'ö'
.text:00002938                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:0000293D                 mov     [ebp+var_5C], eax
.text:00002940                 mov     ecx, [ebp+this]
.text:00002943                 add     ecx, 8Ch ; 'î'
.text:00002949                 call    ??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ ; CMyComPtr<ICryptoResetInitVector>::operator&(void)
.text:0000294E                 mov     esi, esp
.text:00002950                 push    eax
.text:00002951                 push    offset _IID_ICryptoResetInitVector
.text:00002956                 mov     edx, [ebp+var_5C]
.text:00002959                 push    edx
.text:0000295A                 mov     eax, [ebp+var_5C]
.text:0000295D                 mov     ecx, [eax]
.text:0000295F                 mov     edx, [ecx]
.text:00002961                 call    edx
.text:00002963                 cmp     esi, esp
.text:00002965                 call    __RTC_CheckEsp
.text:0000296A                 mov     [ebp+var_14], eax
.text:0000296D                 cmp     [ebp+var_14], 0
.text:00002971                 jz      short loc_297B
.text:00002973                 mov     eax, [ebp+var_14]
.text:00002976                 jmp     loc_2A4E
.text:0000297B ; ---------------------------------------------------------------------------
.text:0000297B
.text:0000297B loc_297B:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+4A9j
.text:0000297B                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+4EDj
.text:0000297B                 cmp     [ebp+this], 0
.text:0000297F                 jz      short loc_298C
.text:00002981                 mov     eax, [ebp+this]
.text:00002984                 add     eax, 34h ; '4'
.text:00002987                 mov     [ebp+var_60], eax
.text:0000298A                 jmp     short loc_2993
.text:0000298C ; ---------------------------------------------------------------------------
.text:0000298C
.text:0000298C loc_298C:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+4FBj
.text:0000298C                 mov     [ebp+var_60], 0
.text:00002993
.text:00002993 loc_2993:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+506j
.text:00002993                 mov     ecx, [ebp+arg_8]
.text:00002996                 mov     edx, [ebp+var_60]
.text:00002999                 mov     [ecx], edx
.text:0000299B                 jmp     loc_2A3D
.text:000029A0 ; ---------------------------------------------------------------------------
.text:000029A0
.text:000029A0 loc_29A0:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+490j
.text:000029A0                 push    offset _IID_ICompressSetDecoderProperties2 ; Buf2
.text:000029A5                 mov     eax, [ebp+Buf1]
.text:000029A8                 push    eax             ; Buf1
.text:000029A9                 call    ___@8           ; __(x,x)
.text:000029AE                 test    eax, eax
.text:000029B0                 jz      loc_2A36
.text:000029B6                 mov     ecx, [ebp+this]
.text:000029B9                 add     ecx, 90h ; 'É'
.text:000029BF                 call    ??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator!(void)
.text:000029C4                 movzx   ecx, al
.text:000029C7                 test    ecx, ecx
.text:000029C9                 jz      short loc_2A14
.text:000029CB                 mov     ecx, [ebp+this]
.text:000029CE                 add     ecx, 94h ; 'ö'
.text:000029D4                 call    ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->(void)
.text:000029D9                 mov     [ebp+var_64], eax
.text:000029DC                 mov     ecx, [ebp+this]
.text:000029DF                 add     ecx, 90h ; 'É'
.text:000029E5                 call    ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&(void)
.text:000029EA                 mov     esi, esp
.text:000029EC                 push    eax
.text:000029ED                 push    offset _IID_ICompressSetDecoderProperties2
.text:000029F2                 mov     edx, [ebp+var_64]
.text:000029F5                 push    edx
.text:000029F6                 mov     eax, [ebp+var_64]
.text:000029F9                 mov     ecx, [eax]
.text:000029FB                 mov     edx, [ecx]
.text:000029FD                 call    edx
.text:000029FF                 cmp     esi, esp
.text:00002A01                 call    __RTC_CheckEsp
.text:00002A06                 mov     [ebp+var_18], eax
.text:00002A09                 cmp     [ebp+var_18], 0
.text:00002A0D                 jz      short loc_2A14
.text:00002A0F                 mov     eax, [ebp+var_18]
.text:00002A12                 jmp     short loc_2A4E
.text:00002A14 ; ---------------------------------------------------------------------------
.text:00002A14
.text:00002A14 loc_2A14:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+545j
.text:00002A14                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+589j
.text:00002A14                 cmp     [ebp+this], 0
.text:00002A18                 jz      short loc_2A25
.text:00002A1A                 mov     eax, [ebp+this]
.text:00002A1D                 add     eax, 38h ; '8'
.text:00002A20                 mov     [ebp+var_68], eax
.text:00002A23                 jmp     short loc_2A2C
.text:00002A25 ; ---------------------------------------------------------------------------
.text:00002A25
.text:00002A25 loc_2A25:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+594j
.text:00002A25                 mov     [ebp+var_68], 0
.text:00002A2C
.text:00002A2C loc_2A2C:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+59Fj
.text:00002A2C                 mov     ecx, [ebp+arg_8]
.text:00002A2F                 mov     edx, [ebp+var_68]
.text:00002A32                 mov     [ecx], edx
.text:00002A34                 jmp     short loc_2A3D
.text:00002A36 ; ---------------------------------------------------------------------------
.text:00002A36
.text:00002A36 loc_2A36:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+52Cj
.text:00002A36                 mov     eax, 80004002h
.text:00002A3B                 jmp     short loc_2A4E
.text:00002A3D ; ---------------------------------------------------------------------------
.text:00002A3D
.text:00002A3D loc_2A3D:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+3Aj
.text:00002A3D                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+59j ...
.text:00002A3D                 mov     eax, [ebp+this]
.text:00002A40                 mov     ecx, [eax+3Ch]
.text:00002A43                 add     ecx, 1
.text:00002A46                 mov     edx, [ebp+this]
.text:00002A49                 mov     [edx+3Ch], ecx
.text:00002A4C                 xor     eax, eax
.text:00002A4E
.text:00002A4E loc_2A4E:                               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+282j
.text:00002A4E                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+31Ej ...
.text:00002A4E                 pop     edi
.text:00002A4F                 pop     esi
.text:00002A50                 add     esp, 68h
.text:00002A53                 cmp     ebp, esp
.text:00002A55                 call    __RTC_CheckEsp
.text:00002A5A                 mov     esp, ebp
.text:00002A5C                 pop     ebp
.text:00002A5D                 retn    0Ch
.text:00002A5D ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002A5D
.text:00002A5D _text           ends
.text:00002A5D
.text:00002A60 ; ===========================================================================
.text:00002A60
.text:00002A60 ; Segment type: Pure code
.text:00002A60 ; Segment permissions: Read/Execute
.text:00002A60 _text           segment para public 'CODE' use32
.text:00002A60                 assume cs:_text
.text:00002A60                 ;org 2A60h
.text:00002A60 ; COMDAT (pick any)
.text:00002A60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002A60
.text:00002A60 ; =============== S U B R O U T I N E =======================================
.text:00002A60
.text:00002A60 ; Attributes: bp-based frame
.text:00002A60
.text:00002A60 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00002A60                 public ___@8
.text:00002A60 ___@8           proc near               ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+29p
.text:00002A60                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+48p ...
.text:00002A60
.text:00002A60 Buf1            = dword ptr  8
.text:00002A60 Buf2            = dword ptr  0Ch
.text:00002A60
.text:00002A60                 push    ebp
.text:00002A61                 mov     ebp, esp
.text:00002A63                 mov     eax, [ebp+Buf2]
.text:00002A66                 push    eax             ; Buf2
.text:00002A67                 mov     ecx, [ebp+Buf1]
.text:00002A6A                 push    ecx             ; Buf1
.text:00002A6B                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00002A70                 cmp     ebp, esp
.text:00002A72                 call    __RTC_CheckEsp
.text:00002A77                 pop     ebp
.text:00002A78                 retn    8
.text:00002A78 ___@8           endp
.text:00002A78
.text:00002A78 ; ---------------------------------------------------------------------------
.text:00002A7B                 align 4
.text:00002A7B _text           ends
.text:00002A7B
.text:00002A7C ; ===========================================================================
.text:00002A7C
.text:00002A7C ; Segment type: Pure code
.text:00002A7C ; Segment permissions: Read/Execute
.text:00002A7C _text           segment para public 'CODE' use32
.text:00002A7C                 assume cs:_text
.text:00002A7C                 ;org 2A7Ch
.text:00002A7C ; COMDAT (pick any)
.text:00002A7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002A7C
.text:00002A7C ; =============== S U B R O U T I N E =======================================
.text:00002A7C
.text:00002A7C ; Attributes: bp-based frame
.text:00002A7C
.text:00002A7C ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00002A7C                 public _IsEqualGUID@8
.text:00002A7C _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00002A7C
.text:00002A7C Buf1            = dword ptr  8
.text:00002A7C Buf2            = dword ptr  0Ch
.text:00002A7C
.text:00002A7C                 push    ebp
.text:00002A7D                 mov     ebp, esp
.text:00002A7F                 push    10h             ; Size
.text:00002A81                 mov     eax, [ebp+Buf2]
.text:00002A84                 push    eax             ; Buf2
.text:00002A85                 mov     ecx, [ebp+Buf1]
.text:00002A88                 push    ecx             ; Buf1
.text:00002A89                 call    _memcmp
.text:00002A8E                 add     esp, 0Ch
.text:00002A91                 neg     eax
.text:00002A93                 sbb     eax, eax
.text:00002A95                 add     eax, 1
.text:00002A98                 cmp     ebp, esp
.text:00002A9A                 call    __RTC_CheckEsp
.text:00002A9F                 pop     ebp
.text:00002AA0                 retn    8
.text:00002AA0 _IsEqualGUID@8  endp
.text:00002AA0
.text:00002AA0 ; ---------------------------------------------------------------------------
.text:00002AA3                 align 4
.text:00002AA3 _text           ends
.text:00002AA3
.text:00002AA4 ; ===========================================================================
.text:00002AA4
.text:00002AA4 ; Segment type: Pure code
.text:00002AA4 ; Segment permissions: Read/Execute
.text:00002AA4 _text           segment para public 'CODE' use32
.text:00002AA4                 assume cs:_text
.text:00002AA4                 ;org 2AA4h
.text:00002AA4 ; COMDAT (pick any)
.text:00002AA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002AA4
.text:00002AA4 ; =============== S U B R O U T I N E =======================================
.text:00002AA4
.text:00002AA4 ; Attributes: bp-based frame
.text:00002AA4
.text:00002AA4 ; unsigned __int32 __stdcall CFilterCoder::AddRef(CFilterCoder *this)
.text:00002AA4                 public ?AddRef@CFilterCoder@@UAGKXZ
.text:00002AA4 ?AddRef@CFilterCoder@@UAGKXZ proc near  ; CODE XREF: [thunk]:CFilterCoder::AddRef`adjustor{24}' (void)+5j
.text:00002AA4                                         ; [thunk]:CFilterCoder::AddRef`adjustor{56}' (void)+5j ...
.text:00002AA4
.text:00002AA4 var_4           = dword ptr -4
.text:00002AA4 this            = dword ptr  8
.text:00002AA4
.text:00002AA4                 push    ebp
.text:00002AA5                 mov     ebp, esp
.text:00002AA7                 push    ecx
.text:00002AA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002AAF                 mov     eax, [ebp+this]
.text:00002AB2                 mov     ecx, [eax+3Ch]
.text:00002AB5                 add     ecx, 1
.text:00002AB8                 mov     [ebp+var_4], ecx
.text:00002ABB                 mov     edx, [ebp+this]
.text:00002ABE                 mov     eax, [ebp+var_4]
.text:00002AC1                 mov     [edx+3Ch], eax
.text:00002AC4                 mov     eax, [ebp+var_4]
.text:00002AC7                 mov     esp, ebp
.text:00002AC9                 pop     ebp
.text:00002ACA                 retn    4
.text:00002ACA ?AddRef@CFilterCoder@@UAGKXZ endp
.text:00002ACA
.text:00002ACA ; ---------------------------------------------------------------------------
.text:00002ACD                 align 10h
.text:00002ACD _text           ends
.text:00002ACD
.text:00002AD0 ; ===========================================================================
.text:00002AD0
.text:00002AD0 ; Segment type: Pure code
.text:00002AD0 ; Segment permissions: Read/Execute
.text:00002AD0 _text           segment para public 'CODE' use32
.text:00002AD0                 assume cs:_text
.text:00002AD0                 ;org 2AD0h
.text:00002AD0 ; COMDAT (pick any)
.text:00002AD0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002AD0
.text:00002AD0 ; =============== S U B R O U T I N E =======================================
.text:00002AD0
.text:00002AD0 ; Attributes: bp-based frame
.text:00002AD0
.text:00002AD0 ; unsigned __int32 __stdcall CFilterCoder::Release(CFilterCoder *this)
.text:00002AD0                 public ?Release@CFilterCoder@@UAGKXZ
.text:00002AD0 ?Release@CFilterCoder@@UAGKXZ proc near ; CODE XREF: [thunk]:CFilterCoder::Release`adjustor{32}' (void)+5j
.text:00002AD0                                         ; [thunk]:CFilterCoder::Release`adjustor{4}' (void)+5j ...
.text:00002AD0
.text:00002AD0 var_10          = dword ptr -10h
.text:00002AD0 var_C           = dword ptr -0Ch
.text:00002AD0 var_8           = dword ptr -8
.text:00002AD0 var_4           = dword ptr -4
.text:00002AD0 this            = dword ptr  8
.text:00002AD0
.text:00002AD0                 push    ebp
.text:00002AD1                 mov     ebp, esp
.text:00002AD3                 sub     esp, 10h
.text:00002AD6                 mov     eax, 0CCCCCCCCh
.text:00002ADB                 mov     [ebp+var_10], eax
.text:00002ADE                 mov     [ebp+var_C], eax
.text:00002AE1                 mov     [ebp+var_8], eax
.text:00002AE4                 mov     [ebp+var_4], eax
.text:00002AE7                 mov     eax, [ebp+this]
.text:00002AEA                 mov     ecx, [eax+3Ch]
.text:00002AED                 sub     ecx, 1
.text:00002AF0                 mov     [ebp+var_C], ecx
.text:00002AF3                 mov     edx, [ebp+this]
.text:00002AF6                 mov     eax, [ebp+var_C]
.text:00002AF9                 mov     [edx+3Ch], eax
.text:00002AFC                 cmp     [ebp+var_C], 0
.text:00002B00                 jz      short loc_2B0A
.text:00002B02                 mov     ecx, [ebp+this]
.text:00002B05                 mov     eax, [ecx+3Ch]
.text:00002B08                 jmp     short loc_2B34
.text:00002B0A ; ---------------------------------------------------------------------------
.text:00002B0A
.text:00002B0A loc_2B0A:                               ; CODE XREF: CFilterCoder::Release(void)+30j
.text:00002B0A                 mov     edx, [ebp+this]
.text:00002B0D                 mov     [ebp+var_8], edx
.text:00002B10                 mov     eax, [ebp+var_8]
.text:00002B13                 mov     [ebp+var_4], eax
.text:00002B16                 cmp     [ebp+var_4], 0
.text:00002B1A                 jz      short loc_2B2B
.text:00002B1C                 push    1
.text:00002B1E                 mov     ecx, [ebp+var_4]
.text:00002B21                 call    ??_GCFilterCoder@@QAEPAXI@Z ; CFilterCoder::`scalar deleting destructor'(uint)
.text:00002B26                 mov     [ebp+var_10], eax
.text:00002B29                 jmp     short loc_2B32
.text:00002B2B ; ---------------------------------------------------------------------------
.text:00002B2B
.text:00002B2B loc_2B2B:                               ; CODE XREF: CFilterCoder::Release(void)+4Aj
.text:00002B2B                 mov     [ebp+var_10], 0
.text:00002B32
.text:00002B32 loc_2B32:                               ; CODE XREF: CFilterCoder::Release(void)+59j
.text:00002B32                 xor     eax, eax
.text:00002B34
.text:00002B34 loc_2B34:                               ; CODE XREF: CFilterCoder::Release(void)+38j
.text:00002B34                 add     esp, 10h
.text:00002B37                 cmp     ebp, esp
.text:00002B39                 call    __RTC_CheckEsp
.text:00002B3E                 mov     esp, ebp
.text:00002B40                 pop     ebp
.text:00002B41                 retn    4
.text:00002B41 ?Release@CFilterCoder@@UAGKXZ endp
.text:00002B41
.text:00002B41 _text           ends
.text:00002B41
.text:00002B44 ; ===========================================================================
.text:00002B44
.text:00002B44 ; Segment type: Pure code
.text:00002B44 ; Segment permissions: Read/Execute
.text:00002B44 _text           segment para public 'CODE' use32
.text:00002B44                 assume cs:_text
.text:00002B44                 ;org 2B44h
.text:00002B44 ; COMDAT (pick any)
.text:00002B44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002B44
.text:00002B44 ; =============== S U B R O U T I N E =======================================
.text:00002B44
.text:00002B44 ; Attributes: bp-based frame
.text:00002B44
.text:00002B44 ; public: void * __thiscall CFilterCoder::`scalar deleting destructor'(unsigned int)
.text:00002B44                 public ??_GCFilterCoder@@QAEPAXI@Z
.text:00002B44 ??_GCFilterCoder@@QAEPAXI@Z proc near   ; CODE XREF: CFilterCoder::Release(void)+51p
.text:00002B44
.text:00002B44 var_4           = dword ptr -4
.text:00002B44 arg_0           = dword ptr  8
.text:00002B44
.text:00002B44                 push    ebp
.text:00002B45                 mov     ebp, esp
.text:00002B47                 push    ecx
.text:00002B48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B4F                 mov     [ebp+var_4], ecx
.text:00002B52                 mov     ecx, [ebp+var_4] ; this
.text:00002B55                 call    ??1CFilterCoder@@QAE@XZ ; CFilterCoder::~CFilterCoder(void)
.text:00002B5A                 mov     eax, [ebp+arg_0]
.text:00002B5D                 and     eax, 1
.text:00002B60                 jz      short loc_2B6E
.text:00002B62                 mov     ecx, [ebp+var_4]
.text:00002B65                 push    ecx             ; void *
.text:00002B66                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002B6B                 add     esp, 4
.text:00002B6E
.text:00002B6E loc_2B6E:                               ; CODE XREF: CFilterCoder::`scalar deleting destructor'(uint)+1Cj
.text:00002B6E                 mov     eax, [ebp+var_4]
.text:00002B71                 add     esp, 4
.text:00002B74                 cmp     ebp, esp
.text:00002B76                 call    __RTC_CheckEsp
.text:00002B7B                 mov     esp, ebp
.text:00002B7D                 pop     ebp
.text:00002B7E                 retn    4
.text:00002B7E ??_GCFilterCoder@@QAEPAXI@Z endp
.text:00002B7E
.text:00002B7E ; ---------------------------------------------------------------------------
.text:00002B81                 align 4
.text:00002B81 _text           ends
.text:00002B81
.text:00002B84 ; ===========================================================================
.text:00002B84
.text:00002B84 ; Segment type: Pure code
.text:00002B84 ; Segment permissions: Read/Execute
.text:00002B84 _text           segment para public 'CODE' use32
.text:00002B84                 assume cs:_text
.text:00002B84                 ;org 2B84h
.text:00002B84 ; COMDAT (pick any)
.text:00002B84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002B84
.text:00002B84 ; =============== S U B R O U T I N E =======================================
.text:00002B84
.text:00002B84 ; Attributes: bp-based frame
.text:00002B84
.text:00002B84 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00002B84                 public ??0ICompressCoder@@QAE@XZ
.text:00002B84 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: CFilterCoder::CFilterCoder(bool)+30p
.text:00002B84
.text:00002B84 var_4           = dword ptr -4
.text:00002B84
.text:00002B84                 push    ebp
.text:00002B85                 mov     ebp, esp
.text:00002B87                 push    ecx
.text:00002B88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B8F                 mov     [ebp+var_4], ecx
.text:00002B92                 mov     ecx, [ebp+var_4]
.text:00002B95                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002B9A                 mov     eax, [ebp+var_4]
.text:00002B9D                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:00002BA3                 mov     eax, [ebp+var_4]
.text:00002BA6                 add     esp, 4
.text:00002BA9                 cmp     ebp, esp
.text:00002BAB                 call    __RTC_CheckEsp
.text:00002BB0                 mov     esp, ebp
.text:00002BB2                 pop     ebp
.text:00002BB3                 retn
.text:00002BB3 ??0ICompressCoder@@QAE@XZ endp
.text:00002BB3
.text:00002BB3 _text           ends
.text:00002BB3
.rdata:00002BB4 ; ===========================================================================
.rdata:00002BB4
.rdata:00002BB4 ; Segment type: Pure data
.rdata:00002BB4 ; Segment permissions: Read
.rdata:00002BB4 _rdata          segment dword public 'DATA' use32
.rdata:00002BB4                 assume cs:_rdata
.rdata:00002BB4                 ;org 2BB4h
.rdata:00002BB4 ; COMDAT (pick largest)
.rdata:00002BB4                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00002BB8                 public ??_7ICompressCoder@@6B@
.rdata:00002BB8 ; const ICompressCoder::`vftable'
.rdata:00002BB8 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00002BB8                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00002BBC                 dd offset __purecall
.rdata:00002BC0                 dd offset __purecall
.rdata:00002BC4                 dd offset __purecall
.rdata:00002BC4 _rdata          ends
.rdata:00002BC4
.rdata$r:00002BC8 ; ===========================================================================
.rdata$r:00002BC8
.rdata$r:00002BC8 ; Segment type: Pure data
.rdata$r:00002BC8 ; Segment permissions: Read
.rdata$r:00002BC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002BC8                 assume cs:_rdata$r
.rdata$r:00002BC8                 ;org 2BC8h
.rdata$r:00002BC8 ; COMDAT (pick any)
.rdata$r:00002BC8                 public ??_R4ICompressCoder@@6B@
.rdata$r:00002BC8 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00002BC8 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00002BB4o
.rdata$r:00002BC9                 db    0
.rdata$r:00002BCA                 db    0
.rdata$r:00002BCB                 db    0
.rdata$r:00002BCC                 db    0
.rdata$r:00002BCD                 db    0
.rdata$r:00002BCE                 db    0
.rdata$r:00002BCF                 db    0
.rdata$r:00002BD0                 db    0
.rdata$r:00002BD1                 db    0
.rdata$r:00002BD2                 db    0
.rdata$r:00002BD3                 db    0
.rdata$r:00002BD4                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00002BD8                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002BD8 _rdata$r        ends
.rdata$r:00002BD8
.text:00002BDC ; ===========================================================================
.text:00002BDC
.text:00002BDC ; Segment type: Pure code
.text:00002BDC ; Segment permissions: Read/Execute
.text:00002BDC _text           segment para public 'CODE' use32
.text:00002BDC                 assume cs:_text
.text:00002BDC                 ;org 2BDCh
.text:00002BDC ; COMDAT (pick any)
.text:00002BDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002BDC
.text:00002BDC ; =============== S U B R O U T I N E =======================================
.text:00002BDC
.text:00002BDC ; Attributes: bp-based frame
.text:00002BDC
.text:00002BDC ; _DWORD __thiscall ICompressSetOutStreamSize::ICompressSetOutStreamSize(ICompressSetOutStreamSize *__hidden this)
.text:00002BDC                 public ??0ICompressSetOutStreamSize@@QAE@XZ
.text:00002BDC ??0ICompressSetOutStreamSize@@QAE@XZ proc near
.text:00002BDC                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+3Bp
.text:00002BDC
.text:00002BDC var_4           = dword ptr -4
.text:00002BDC
.text:00002BDC                 push    ebp
.text:00002BDD                 mov     ebp, esp
.text:00002BDF                 push    ecx
.text:00002BE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BE7                 mov     [ebp+var_4], ecx
.text:00002BEA                 mov     ecx, [ebp+var_4]
.text:00002BED                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002BF2                 mov     eax, [ebp+var_4]
.text:00002BF5                 mov     dword ptr [eax], offset ??_7ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`vftable'
.text:00002BFB                 mov     eax, [ebp+var_4]
.text:00002BFE                 add     esp, 4
.text:00002C01                 cmp     ebp, esp
.text:00002C03                 call    __RTC_CheckEsp
.text:00002C08                 mov     esp, ebp
.text:00002C0A                 pop     ebp
.text:00002C0B                 retn
.text:00002C0B ??0ICompressSetOutStreamSize@@QAE@XZ endp
.text:00002C0B
.text:00002C0B _text           ends
.text:00002C0B
.rdata:00002C0C ; ===========================================================================
.rdata:00002C0C
.rdata:00002C0C ; Segment type: Pure data
.rdata:00002C0C ; Segment permissions: Read
.rdata:00002C0C _rdata          segment dword public 'DATA' use32
.rdata:00002C0C                 assume cs:_rdata
.rdata:00002C0C                 ;org 2C0Ch
.rdata:00002C0C ; COMDAT (pick largest)
.rdata:00002C0C                 dd offset ??_R4ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata:00002C10                 public ??_7ICompressSetOutStreamSize@@6B@
.rdata:00002C10 ; const ICompressSetOutStreamSize::`vftable'
.rdata:00002C10 ??_7ICompressSetOutStreamSize@@6B@ dd offset __purecall
.rdata:00002C10                                         ; DATA XREF: ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)+19o
.rdata:00002C14                 dd offset __purecall
.rdata:00002C18                 dd offset __purecall
.rdata:00002C1C                 dd offset __purecall
.rdata:00002C1C _rdata          ends
.rdata:00002C1C
.rdata$r:00002C20 ; ===========================================================================
.rdata$r:00002C20
.rdata$r:00002C20 ; Segment type: Pure data
.rdata$r:00002C20 ; Segment permissions: Read
.rdata$r:00002C20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C20                 assume cs:_rdata$r
.rdata$r:00002C20                 ;org 2C20h
.rdata$r:00002C20 ; COMDAT (pick any)
.rdata$r:00002C20                 public ??_R4ICompressSetOutStreamSize@@6B@
.rdata$r:00002C20 ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata$r:00002C20 ??_R4ICompressSetOutStreamSize@@6B@ db    0 ; DATA XREF: .rdata:00002C0Co
.rdata$r:00002C21                 db    0
.rdata$r:00002C22                 db    0
.rdata$r:00002C23                 db    0
.rdata$r:00002C24                 db    0
.rdata$r:00002C25                 db    0
.rdata$r:00002C26                 db    0
.rdata$r:00002C27                 db    0
.rdata$r:00002C28                 db    0
.rdata$r:00002C29                 db    0
.rdata$r:00002C2A                 db    0
.rdata$r:00002C2B                 db    0
.rdata$r:00002C2C                 dd offset ??_R0?AUICompressSetOutStreamSize@@@8 ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00002C30                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C30 _rdata$r        ends
.rdata$r:00002C30
.text:00002C34 ; ===========================================================================
.text:00002C34
.text:00002C34 ; Segment type: Pure code
.text:00002C34 ; Segment permissions: Read/Execute
.text:00002C34 _text           segment para public 'CODE' use32
.text:00002C34                 assume cs:_text
.text:00002C34                 ;org 2C34h
.text:00002C34 ; COMDAT (pick any)
.text:00002C34                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002C34
.text:00002C34 ; =============== S U B R O U T I N E =======================================
.text:00002C34
.text:00002C34 ; Attributes: bp-based frame
.text:00002C34
.text:00002C34 ; _DWORD __thiscall ICompressInitEncoder::ICompressInitEncoder(ICompressInitEncoder *__hidden this)
.text:00002C34                 public ??0ICompressInitEncoder@@QAE@XZ
.text:00002C34 ??0ICompressInitEncoder@@QAE@XZ proc near
.text:00002C34                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+46p
.text:00002C34
.text:00002C34 var_4           = dword ptr -4
.text:00002C34
.text:00002C34                 push    ebp
.text:00002C35                 mov     ebp, esp
.text:00002C37                 push    ecx
.text:00002C38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C3F                 mov     [ebp+var_4], ecx
.text:00002C42                 mov     ecx, [ebp+var_4]
.text:00002C45                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002C4A                 mov     eax, [ebp+var_4]
.text:00002C4D                 mov     dword ptr [eax], offset ??_7ICompressInitEncoder@@6B@ ; const ICompressInitEncoder::`vftable'
.text:00002C53                 mov     eax, [ebp+var_4]
.text:00002C56                 add     esp, 4
.text:00002C59                 cmp     ebp, esp
.text:00002C5B                 call    __RTC_CheckEsp
.text:00002C60                 mov     esp, ebp
.text:00002C62                 pop     ebp
.text:00002C63                 retn
.text:00002C63 ??0ICompressInitEncoder@@QAE@XZ endp
.text:00002C63
.text:00002C63 _text           ends
.text:00002C63
.rdata:00002C64 ; ===========================================================================
.rdata:00002C64
.rdata:00002C64 ; Segment type: Pure data
.rdata:00002C64 ; Segment permissions: Read
.rdata:00002C64 _rdata          segment dword public 'DATA' use32
.rdata:00002C64                 assume cs:_rdata
.rdata:00002C64                 ;org 2C64h
.rdata:00002C64 ; COMDAT (pick largest)
.rdata:00002C64                 dd offset ??_R4ICompressInitEncoder@@6B@ ; const ICompressInitEncoder::`RTTI Complete Object Locator'
.rdata:00002C68                 public ??_7ICompressInitEncoder@@6B@
.rdata:00002C68 ; const ICompressInitEncoder::`vftable'
.rdata:00002C68 ??_7ICompressInitEncoder@@6B@ dd offset __purecall
.rdata:00002C68                                         ; DATA XREF: ICompressInitEncoder::ICompressInitEncoder(void)+19o
.rdata:00002C6C                 dd offset __purecall
.rdata:00002C70                 dd offset __purecall
.rdata:00002C74                 dd offset __purecall
.rdata:00002C74 _rdata          ends
.rdata:00002C74
.rdata$r:00002C78 ; ===========================================================================
.rdata$r:00002C78
.rdata$r:00002C78 ; Segment type: Pure data
.rdata$r:00002C78 ; Segment permissions: Read
.rdata$r:00002C78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C78                 assume cs:_rdata$r
.rdata$r:00002C78                 ;org 2C78h
.rdata$r:00002C78 ; COMDAT (pick any)
.rdata$r:00002C78                 public ??_R4ICompressInitEncoder@@6B@
.rdata$r:00002C78 ; const ICompressInitEncoder::`RTTI Complete Object Locator'
.rdata$r:00002C78 ??_R4ICompressInitEncoder@@6B@ db    0  ; DATA XREF: .rdata:00002C64o
.rdata$r:00002C79                 db    0
.rdata$r:00002C7A                 db    0
.rdata$r:00002C7B                 db    0
.rdata$r:00002C7C                 db    0
.rdata$r:00002C7D                 db    0
.rdata$r:00002C7E                 db    0
.rdata$r:00002C7F                 db    0
.rdata$r:00002C80                 db    0
.rdata$r:00002C81                 db    0
.rdata$r:00002C82                 db    0
.rdata$r:00002C83                 db    0
.rdata$r:00002C84                 dd offset ??_R0?AUICompressInitEncoder@@@8 ; ICompressInitEncoder `RTTI Type Descriptor'
.rdata$r:00002C88                 dd offset ??_R3ICompressInitEncoder@@8 ; ICompressInitEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C88 _rdata$r        ends
.rdata$r:00002C88
.text:00002C8C ; ===========================================================================
.text:00002C8C
.text:00002C8C ; Segment type: Pure code
.text:00002C8C ; Segment permissions: Read/Execute
.text:00002C8C _text           segment para public 'CODE' use32
.text:00002C8C                 assume cs:_text
.text:00002C8C                 ;org 2C8Ch
.text:00002C8C ; COMDAT (pick any)
.text:00002C8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002C8C
.text:00002C8C ; =============== S U B R O U T I N E =======================================
.text:00002C8C
.text:00002C8C ; Attributes: bp-based frame
.text:00002C8C
.text:00002C8C ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:00002C8C                 public ??0ICompressSetInStream@@QAE@XZ
.text:00002C8C ??0ICompressSetInStream@@QAE@XZ proc near
.text:00002C8C                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+51p
.text:00002C8C
.text:00002C8C var_4           = dword ptr -4
.text:00002C8C
.text:00002C8C                 push    ebp
.text:00002C8D                 mov     ebp, esp
.text:00002C8F                 push    ecx
.text:00002C90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C97                 mov     [ebp+var_4], ecx
.text:00002C9A                 mov     ecx, [ebp+var_4]
.text:00002C9D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002CA2                 mov     eax, [ebp+var_4]
.text:00002CA5                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:00002CAB                 mov     eax, [ebp+var_4]
.text:00002CAE                 add     esp, 4
.text:00002CB1                 cmp     ebp, esp
.text:00002CB3                 call    __RTC_CheckEsp
.text:00002CB8                 mov     esp, ebp
.text:00002CBA                 pop     ebp
.text:00002CBB                 retn
.text:00002CBB ??0ICompressSetInStream@@QAE@XZ endp
.text:00002CBB
.text:00002CBB _text           ends
.text:00002CBB
.rdata:00002CBC ; ===========================================================================
.rdata:00002CBC
.rdata:00002CBC ; Segment type: Pure data
.rdata:00002CBC ; Segment permissions: Read
.rdata:00002CBC _rdata          segment dword public 'DATA' use32
.rdata:00002CBC                 assume cs:_rdata
.rdata:00002CBC                 ;org 2CBCh
.rdata:00002CBC ; COMDAT (pick largest)
.rdata:00002CBC                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:00002CC0                 public ??_7ICompressSetInStream@@6B@
.rdata:00002CC0 ; const ICompressSetInStream::`vftable'
.rdata:00002CC0 ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:00002CC0                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:00002CC4                 dd offset __purecall
.rdata:00002CC8                 dd offset __purecall
.rdata:00002CCC                 dd offset __purecall
.rdata:00002CD0                 dd offset __purecall
.rdata:00002CD0 _rdata          ends
.rdata:00002CD0
.rdata$r:00002CD4 ; ===========================================================================
.rdata$r:00002CD4
.rdata$r:00002CD4 ; Segment type: Pure data
.rdata$r:00002CD4 ; Segment permissions: Read
.rdata$r:00002CD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002CD4                 assume cs:_rdata$r
.rdata$r:00002CD4                 ;org 2CD4h
.rdata$r:00002CD4 ; COMDAT (pick any)
.rdata$r:00002CD4                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:00002CD4 ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:00002CD4 ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:00002CBCo
.rdata$r:00002CD5                 db    0
.rdata$r:00002CD6                 db    0
.rdata$r:00002CD7                 db    0
.rdata$r:00002CD8                 db    0
.rdata$r:00002CD9                 db    0
.rdata$r:00002CDA                 db    0
.rdata$r:00002CDB                 db    0
.rdata$r:00002CDC                 db    0
.rdata$r:00002CDD                 db    0
.rdata$r:00002CDE                 db    0
.rdata$r:00002CDF                 db    0
.rdata$r:00002CE0                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00002CE4                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002CE4 _rdata$r        ends
.rdata$r:00002CE4
.text:00002CE8 ; ===========================================================================
.text:00002CE8
.text:00002CE8 ; Segment type: Pure code
.text:00002CE8 ; Segment permissions: Read/Execute
.text:00002CE8 _text           segment para public 'CODE' use32
.text:00002CE8                 assume cs:_text
.text:00002CE8                 ;org 2CE8h
.text:00002CE8 ; COMDAT (pick any)
.text:00002CE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002CE8
.text:00002CE8 ; =============== S U B R O U T I N E =======================================
.text:00002CE8
.text:00002CE8 ; Attributes: bp-based frame
.text:00002CE8
.text:00002CE8 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00002CE8                 public ??0ISequentialInStream@@QAE@XZ
.text:00002CE8 ??0ISequentialInStream@@QAE@XZ proc near
.text:00002CE8                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+5Cp
.text:00002CE8
.text:00002CE8 var_4           = dword ptr -4
.text:00002CE8
.text:00002CE8                 push    ebp
.text:00002CE9                 mov     ebp, esp
.text:00002CEB                 push    ecx
.text:00002CEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CF3                 mov     [ebp+var_4], ecx
.text:00002CF6                 mov     ecx, [ebp+var_4]
.text:00002CF9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002CFE                 mov     eax, [ebp+var_4]
.text:00002D01                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:00002D07                 mov     eax, [ebp+var_4]
.text:00002D0A                 add     esp, 4
.text:00002D0D                 cmp     ebp, esp
.text:00002D0F                 call    __RTC_CheckEsp
.text:00002D14                 mov     esp, ebp
.text:00002D16                 pop     ebp
.text:00002D17                 retn
.text:00002D17 ??0ISequentialInStream@@QAE@XZ endp
.text:00002D17
.text:00002D17 _text           ends
.text:00002D17
.rdata:00002D18 ; ===========================================================================
.rdata:00002D18
.rdata:00002D18 ; Segment type: Pure data
.rdata:00002D18 ; Segment permissions: Read
.rdata:00002D18 _rdata          segment dword public 'DATA' use32
.rdata:00002D18                 assume cs:_rdata
.rdata:00002D18                 ;org 2D18h
.rdata:00002D18 ; COMDAT (pick largest)
.rdata:00002D18                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00002D1C                 public ??_7ISequentialInStream@@6B@
.rdata:00002D1C ; const ISequentialInStream::`vftable'
.rdata:00002D1C ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00002D1C                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00002D20                 dd offset __purecall
.rdata:00002D24                 dd offset __purecall
.rdata:00002D28                 dd offset __purecall
.rdata:00002D28 _rdata          ends
.rdata:00002D28
.rdata$r:00002D2C ; ===========================================================================
.rdata$r:00002D2C
.rdata$r:00002D2C ; Segment type: Pure data
.rdata$r:00002D2C ; Segment permissions: Read
.rdata$r:00002D2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002D2C                 assume cs:_rdata$r
.rdata$r:00002D2C                 ;org 2D2Ch
.rdata$r:00002D2C ; COMDAT (pick any)
.rdata$r:00002D2C                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00002D2C ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00002D2C ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00002D18o
.rdata$r:00002D2D                 db    0
.rdata$r:00002D2E                 db    0
.rdata$r:00002D2F                 db    0
.rdata$r:00002D30                 db    0
.rdata$r:00002D31                 db    0
.rdata$r:00002D32                 db    0
.rdata$r:00002D33                 db    0
.rdata$r:00002D34                 db    0
.rdata$r:00002D35                 db    0
.rdata$r:00002D36                 db    0
.rdata$r:00002D37                 db    0
.rdata$r:00002D38                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00002D3C                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002D3C _rdata$r        ends
.rdata$r:00002D3C
.text:00002D40 ; ===========================================================================
.text:00002D40
.text:00002D40 ; Segment type: Pure code
.text:00002D40 ; Segment permissions: Read/Execute
.text:00002D40 _text           segment para public 'CODE' use32
.text:00002D40                 assume cs:_text
.text:00002D40                 ;org 2D40h
.text:00002D40 ; COMDAT (pick any)
.text:00002D40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002D40
.text:00002D40 ; =============== S U B R O U T I N E =======================================
.text:00002D40
.text:00002D40 ; Attributes: bp-based frame
.text:00002D40
.text:00002D40 ; _DWORD __thiscall ICompressSetOutStream::ICompressSetOutStream(ICompressSetOutStream *__hidden this)
.text:00002D40                 public ??0ICompressSetOutStream@@QAE@XZ
.text:00002D40 ??0ICompressSetOutStream@@QAE@XZ proc near
.text:00002D40                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+67p
.text:00002D40
.text:00002D40 var_4           = dword ptr -4
.text:00002D40
.text:00002D40                 push    ebp
.text:00002D41                 mov     ebp, esp
.text:00002D43                 push    ecx
.text:00002D44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D4B                 mov     [ebp+var_4], ecx
.text:00002D4E                 mov     ecx, [ebp+var_4]
.text:00002D51                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002D56                 mov     eax, [ebp+var_4]
.text:00002D59                 mov     dword ptr [eax], offset ??_7ICompressSetOutStream@@6B@ ; const ICompressSetOutStream::`vftable'
.text:00002D5F                 mov     eax, [ebp+var_4]
.text:00002D62                 add     esp, 4
.text:00002D65                 cmp     ebp, esp
.text:00002D67                 call    __RTC_CheckEsp
.text:00002D6C                 mov     esp, ebp
.text:00002D6E                 pop     ebp
.text:00002D6F                 retn
.text:00002D6F ??0ICompressSetOutStream@@QAE@XZ endp
.text:00002D6F
.text:00002D6F _text           ends
.text:00002D6F
.rdata:00002D70 ; ===========================================================================
.rdata:00002D70
.rdata:00002D70 ; Segment type: Pure data
.rdata:00002D70 ; Segment permissions: Read
.rdata:00002D70 _rdata          segment dword public 'DATA' use32
.rdata:00002D70                 assume cs:_rdata
.rdata:00002D70                 ;org 2D70h
.rdata:00002D70 ; COMDAT (pick largest)
.rdata:00002D70                 dd offset ??_R4ICompressSetOutStream@@6B@ ; const ICompressSetOutStream::`RTTI Complete Object Locator'
.rdata:00002D74                 public ??_7ICompressSetOutStream@@6B@
.rdata:00002D74 ; const ICompressSetOutStream::`vftable'
.rdata:00002D74 ??_7ICompressSetOutStream@@6B@ dd offset __purecall
.rdata:00002D74                                         ; DATA XREF: ICompressSetOutStream::ICompressSetOutStream(void)+19o
.rdata:00002D78                 dd offset __purecall
.rdata:00002D7C                 dd offset __purecall
.rdata:00002D80                 dd offset __purecall
.rdata:00002D84                 dd offset __purecall
.rdata:00002D84 _rdata          ends
.rdata:00002D84
.rdata$r:00002D88 ; ===========================================================================
.rdata$r:00002D88
.rdata$r:00002D88 ; Segment type: Pure data
.rdata$r:00002D88 ; Segment permissions: Read
.rdata$r:00002D88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002D88                 assume cs:_rdata$r
.rdata$r:00002D88                 ;org 2D88h
.rdata$r:00002D88 ; COMDAT (pick any)
.rdata$r:00002D88                 public ??_R4ICompressSetOutStream@@6B@
.rdata$r:00002D88 ; const ICompressSetOutStream::`RTTI Complete Object Locator'
.rdata$r:00002D88 ??_R4ICompressSetOutStream@@6B@ db    0 ; DATA XREF: .rdata:00002D70o
.rdata$r:00002D89                 db    0
.rdata$r:00002D8A                 db    0
.rdata$r:00002D8B                 db    0
.rdata$r:00002D8C                 db    0
.rdata$r:00002D8D                 db    0
.rdata$r:00002D8E                 db    0
.rdata$r:00002D8F                 db    0
.rdata$r:00002D90                 db    0
.rdata$r:00002D91                 db    0
.rdata$r:00002D92                 db    0
.rdata$r:00002D93                 db    0
.rdata$r:00002D94                 dd offset ??_R0?AUICompressSetOutStream@@@8 ; ICompressSetOutStream `RTTI Type Descriptor'
.rdata$r:00002D98                 dd offset ??_R3ICompressSetOutStream@@8 ; ICompressSetOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002D98 _rdata$r        ends
.rdata$r:00002D98
.text:00002D9C ; ===========================================================================
.text:00002D9C
.text:00002D9C ; Segment type: Pure code
.text:00002D9C ; Segment permissions: Read/Execute
.text:00002D9C _text           segment para public 'CODE' use32
.text:00002D9C                 assume cs:_text
.text:00002D9C                 ;org 2D9Ch
.text:00002D9C ; COMDAT (pick any)
.text:00002D9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002D9C
.text:00002D9C ; =============== S U B R O U T I N E =======================================
.text:00002D9C
.text:00002D9C ; Attributes: bp-based frame
.text:00002D9C
.text:00002D9C ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:00002D9C                 public ??0ISequentialOutStream@@QAE@XZ
.text:00002D9C ??0ISequentialOutStream@@QAE@XZ proc near
.text:00002D9C                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+72p
.text:00002D9C
.text:00002D9C var_4           = dword ptr -4
.text:00002D9C
.text:00002D9C                 push    ebp
.text:00002D9D                 mov     ebp, esp
.text:00002D9F                 push    ecx
.text:00002DA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DA7                 mov     [ebp+var_4], ecx
.text:00002DAA                 mov     ecx, [ebp+var_4]
.text:00002DAD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002DB2                 mov     eax, [ebp+var_4]
.text:00002DB5                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:00002DBB                 mov     eax, [ebp+var_4]
.text:00002DBE                 add     esp, 4
.text:00002DC1                 cmp     ebp, esp
.text:00002DC3                 call    __RTC_CheckEsp
.text:00002DC8                 mov     esp, ebp
.text:00002DCA                 pop     ebp
.text:00002DCB                 retn
.text:00002DCB ??0ISequentialOutStream@@QAE@XZ endp
.text:00002DCB
.text:00002DCB _text           ends
.text:00002DCB
.rdata:00002DCC ; ===========================================================================
.rdata:00002DCC
.rdata:00002DCC ; Segment type: Pure data
.rdata:00002DCC ; Segment permissions: Read
.rdata:00002DCC _rdata          segment dword public 'DATA' use32
.rdata:00002DCC                 assume cs:_rdata
.rdata:00002DCC                 ;org 2DCCh
.rdata:00002DCC ; COMDAT (pick largest)
.rdata:00002DCC                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00002DD0                 public ??_7ISequentialOutStream@@6B@
.rdata:00002DD0 ; const ISequentialOutStream::`vftable'
.rdata:00002DD0 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00002DD0                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00002DD4                 dd offset __purecall
.rdata:00002DD8                 dd offset __purecall
.rdata:00002DDC                 dd offset __purecall
.rdata:00002DDC _rdata          ends
.rdata:00002DDC
.rdata$r:00002DE0 ; ===========================================================================
.rdata$r:00002DE0
.rdata$r:00002DE0 ; Segment type: Pure data
.rdata$r:00002DE0 ; Segment permissions: Read
.rdata$r:00002DE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002DE0                 assume cs:_rdata$r
.rdata$r:00002DE0                 ;org 2DE0h
.rdata$r:00002DE0 ; COMDAT (pick any)
.rdata$r:00002DE0                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00002DE0 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00002DE0 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00002DCCo
.rdata$r:00002DE1                 db    0
.rdata$r:00002DE2                 db    0
.rdata$r:00002DE3                 db    0
.rdata$r:00002DE4                 db    0
.rdata$r:00002DE5                 db    0
.rdata$r:00002DE6                 db    0
.rdata$r:00002DE7                 db    0
.rdata$r:00002DE8                 db    0
.rdata$r:00002DE9                 db    0
.rdata$r:00002DEA                 db    0
.rdata$r:00002DEB                 db    0
.rdata$r:00002DEC                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00002DF0                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002DF0 _rdata$r        ends
.rdata$r:00002DF0
.text:00002DF4 ; ===========================================================================
.text:00002DF4
.text:00002DF4 ; Segment type: Pure code
.text:00002DF4 ; Segment permissions: Read/Execute
.text:00002DF4 _text           segment para public 'CODE' use32
.text:00002DF4                 assume cs:_text
.text:00002DF4                 ;org 2DF4h
.text:00002DF4 ; COMDAT (pick any)
.text:00002DF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002DF4
.text:00002DF4 ; =============== S U B R O U T I N E =======================================
.text:00002DF4
.text:00002DF4 ; Attributes: bp-based frame
.text:00002DF4
.text:00002DF4 ; _DWORD __thiscall IOutStreamFinish::IOutStreamFinish(IOutStreamFinish *__hidden this)
.text:00002DF4                 public ??0IOutStreamFinish@@QAE@XZ
.text:00002DF4 ??0IOutStreamFinish@@QAE@XZ proc near   ; CODE XREF: CFilterCoder::CFilterCoder(bool)+7Dp
.text:00002DF4
.text:00002DF4 var_4           = dword ptr -4
.text:00002DF4
.text:00002DF4                 push    ebp
.text:00002DF5                 mov     ebp, esp
.text:00002DF7                 push    ecx
.text:00002DF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DFF                 mov     [ebp+var_4], ecx
.text:00002E02                 mov     ecx, [ebp+var_4]
.text:00002E05                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002E0A                 mov     eax, [ebp+var_4]
.text:00002E0D                 mov     dword ptr [eax], offset ??_7IOutStreamFinish@@6B@ ; const IOutStreamFinish::`vftable'
.text:00002E13                 mov     eax, [ebp+var_4]
.text:00002E16                 add     esp, 4
.text:00002E19                 cmp     ebp, esp
.text:00002E1B                 call    __RTC_CheckEsp
.text:00002E20                 mov     esp, ebp
.text:00002E22                 pop     ebp
.text:00002E23                 retn
.text:00002E23 ??0IOutStreamFinish@@QAE@XZ endp
.text:00002E23
.text:00002E23 _text           ends
.text:00002E23
.rdata:00002E24 ; ===========================================================================
.rdata:00002E24
.rdata:00002E24 ; Segment type: Pure data
.rdata:00002E24 ; Segment permissions: Read
.rdata:00002E24 _rdata          segment dword public 'DATA' use32
.rdata:00002E24                 assume cs:_rdata
.rdata:00002E24                 ;org 2E24h
.rdata:00002E24 ; COMDAT (pick largest)
.rdata:00002E24                 dd offset ??_R4IOutStreamFinish@@6B@ ; const IOutStreamFinish::`RTTI Complete Object Locator'
.rdata:00002E28                 public ??_7IOutStreamFinish@@6B@
.rdata:00002E28 ; const IOutStreamFinish::`vftable'
.rdata:00002E28 ??_7IOutStreamFinish@@6B@ dd offset __purecall
.rdata:00002E28                                         ; DATA XREF: IOutStreamFinish::IOutStreamFinish(void)+19o
.rdata:00002E2C                 dd offset __purecall
.rdata:00002E30                 dd offset __purecall
.rdata:00002E34                 dd offset __purecall
.rdata:00002E34 _rdata          ends
.rdata:00002E34
.rdata$r:00002E38 ; ===========================================================================
.rdata$r:00002E38
.rdata$r:00002E38 ; Segment type: Pure data
.rdata$r:00002E38 ; Segment permissions: Read
.rdata$r:00002E38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002E38                 assume cs:_rdata$r
.rdata$r:00002E38                 ;org 2E38h
.rdata$r:00002E38 ; COMDAT (pick any)
.rdata$r:00002E38                 public ??_R4IOutStreamFinish@@6B@
.rdata$r:00002E38 ; const IOutStreamFinish::`RTTI Complete Object Locator'
.rdata$r:00002E38 ??_R4IOutStreamFinish@@6B@ db    0      ; DATA XREF: .rdata:00002E24o
.rdata$r:00002E39                 db    0
.rdata$r:00002E3A                 db    0
.rdata$r:00002E3B                 db    0
.rdata$r:00002E3C                 db    0
.rdata$r:00002E3D                 db    0
.rdata$r:00002E3E                 db    0
.rdata$r:00002E3F                 db    0
.rdata$r:00002E40                 db    0
.rdata$r:00002E41                 db    0
.rdata$r:00002E42                 db    0
.rdata$r:00002E43                 db    0
.rdata$r:00002E44                 dd offset ??_R0?AUIOutStreamFinish@@@8 ; IOutStreamFinish `RTTI Type Descriptor'
.rdata$r:00002E48                 dd offset ??_R3IOutStreamFinish@@8 ; IOutStreamFinish::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002E48 _rdata$r        ends
.rdata$r:00002E48
.text:00002E4C ; ===========================================================================
.text:00002E4C
.text:00002E4C ; Segment type: Pure code
.text:00002E4C ; Segment permissions: Read/Execute
.text:00002E4C _text           segment para public 'CODE' use32
.text:00002E4C                 assume cs:_text
.text:00002E4C                 ;org 2E4Ch
.text:00002E4C ; COMDAT (pick any)
.text:00002E4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E4C
.text:00002E4C ; =============== S U B R O U T I N E =======================================
.text:00002E4C
.text:00002E4C ; Attributes: bp-based frame
.text:00002E4C
.text:00002E4C ; _DWORD __thiscall ICompressSetBufSize::ICompressSetBufSize(ICompressSetBufSize *__hidden this)
.text:00002E4C                 public ??0ICompressSetBufSize@@QAE@XZ
.text:00002E4C ??0ICompressSetBufSize@@QAE@XZ proc near
.text:00002E4C                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+88p
.text:00002E4C
.text:00002E4C var_4           = dword ptr -4
.text:00002E4C
.text:00002E4C                 push    ebp
.text:00002E4D                 mov     ebp, esp
.text:00002E4F                 push    ecx
.text:00002E50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E57                 mov     [ebp+var_4], ecx
.text:00002E5A                 mov     ecx, [ebp+var_4]
.text:00002E5D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002E62                 mov     eax, [ebp+var_4]
.text:00002E65                 mov     dword ptr [eax], offset ??_7ICompressSetBufSize@@6B@ ; const ICompressSetBufSize::`vftable'
.text:00002E6B                 mov     eax, [ebp+var_4]
.text:00002E6E                 add     esp, 4
.text:00002E71                 cmp     ebp, esp
.text:00002E73                 call    __RTC_CheckEsp
.text:00002E78                 mov     esp, ebp
.text:00002E7A                 pop     ebp
.text:00002E7B                 retn
.text:00002E7B ??0ICompressSetBufSize@@QAE@XZ endp
.text:00002E7B
.text:00002E7B _text           ends
.text:00002E7B
.rdata:00002E7C ; ===========================================================================
.rdata:00002E7C
.rdata:00002E7C ; Segment type: Pure data
.rdata:00002E7C ; Segment permissions: Read
.rdata:00002E7C _rdata          segment dword public 'DATA' use32
.rdata:00002E7C                 assume cs:_rdata
.rdata:00002E7C                 ;org 2E7Ch
.rdata:00002E7C ; COMDAT (pick largest)
.rdata:00002E7C                 dd offset ??_R4ICompressSetBufSize@@6B@ ; const ICompressSetBufSize::`RTTI Complete Object Locator'
.rdata:00002E80                 public ??_7ICompressSetBufSize@@6B@
.rdata:00002E80 ; const ICompressSetBufSize::`vftable'
.rdata:00002E80 ??_7ICompressSetBufSize@@6B@ dd offset __purecall
.rdata:00002E80                                         ; DATA XREF: ICompressSetBufSize::ICompressSetBufSize(void)+19o
.rdata:00002E84                 dd offset __purecall
.rdata:00002E88                 dd offset __purecall
.rdata:00002E8C                 dd offset __purecall
.rdata:00002E90                 dd offset __purecall
.rdata:00002E90 _rdata          ends
.rdata:00002E90
.rdata$r:00002E94 ; ===========================================================================
.rdata$r:00002E94
.rdata$r:00002E94 ; Segment type: Pure data
.rdata$r:00002E94 ; Segment permissions: Read
.rdata$r:00002E94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002E94                 assume cs:_rdata$r
.rdata$r:00002E94                 ;org 2E94h
.rdata$r:00002E94 ; COMDAT (pick any)
.rdata$r:00002E94                 public ??_R4ICompressSetBufSize@@6B@
.rdata$r:00002E94 ; const ICompressSetBufSize::`RTTI Complete Object Locator'
.rdata$r:00002E94 ??_R4ICompressSetBufSize@@6B@ db    0   ; DATA XREF: .rdata:00002E7Co
.rdata$r:00002E95                 db    0
.rdata$r:00002E96                 db    0
.rdata$r:00002E97                 db    0
.rdata$r:00002E98                 db    0
.rdata$r:00002E99                 db    0
.rdata$r:00002E9A                 db    0
.rdata$r:00002E9B                 db    0
.rdata$r:00002E9C                 db    0
.rdata$r:00002E9D                 db    0
.rdata$r:00002E9E                 db    0
.rdata$r:00002E9F                 db    0
.rdata$r:00002EA0                 dd offset ??_R0?AUICompressSetBufSize@@@8 ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:00002EA4                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002EA4 _rdata$r        ends
.rdata$r:00002EA4
.text:00002EA8 ; ===========================================================================
.text:00002EA8
.text:00002EA8 ; Segment type: Pure code
.text:00002EA8 ; Segment permissions: Read/Execute
.text:00002EA8 _text           segment para public 'CODE' use32
.text:00002EA8                 assume cs:_text
.text:00002EA8                 ;org 2EA8h
.text:00002EA8 ; COMDAT (pick any)
.text:00002EA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002EA8
.text:00002EA8 ; =============== S U B R O U T I N E =======================================
.text:00002EA8
.text:00002EA8 ; Attributes: bp-based frame
.text:00002EA8
.text:00002EA8 ; _DWORD __thiscall ICryptoSetPassword::ICryptoSetPassword(ICryptoSetPassword *__hidden this)
.text:00002EA8                 public ??0ICryptoSetPassword@@QAE@XZ
.text:00002EA8 ??0ICryptoSetPassword@@QAE@XZ proc near ; CODE XREF: CFilterCoder::CFilterCoder(bool)+93p
.text:00002EA8
.text:00002EA8 var_4           = dword ptr -4
.text:00002EA8
.text:00002EA8                 push    ebp
.text:00002EA9                 mov     ebp, esp
.text:00002EAB                 push    ecx
.text:00002EAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EB3                 mov     [ebp+var_4], ecx
.text:00002EB6                 mov     ecx, [ebp+var_4]
.text:00002EB9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002EBE                 mov     eax, [ebp+var_4]
.text:00002EC1                 mov     dword ptr [eax], offset ??_7ICryptoSetPassword@@6B@ ; const ICryptoSetPassword::`vftable'
.text:00002EC7                 mov     eax, [ebp+var_4]
.text:00002ECA                 add     esp, 4
.text:00002ECD                 cmp     ebp, esp
.text:00002ECF                 call    __RTC_CheckEsp
.text:00002ED4                 mov     esp, ebp
.text:00002ED6                 pop     ebp
.text:00002ED7                 retn
.text:00002ED7 ??0ICryptoSetPassword@@QAE@XZ endp
.text:00002ED7
.text:00002ED7 _text           ends
.text:00002ED7
.rdata:00002ED8 ; ===========================================================================
.rdata:00002ED8
.rdata:00002ED8 ; Segment type: Pure data
.rdata:00002ED8 ; Segment permissions: Read
.rdata:00002ED8 _rdata          segment dword public 'DATA' use32
.rdata:00002ED8                 assume cs:_rdata
.rdata:00002ED8                 ;org 2ED8h
.rdata:00002ED8 ; COMDAT (pick largest)
.rdata:00002ED8                 dd offset ??_R4ICryptoSetPassword@@6B@ ; const ICryptoSetPassword::`RTTI Complete Object Locator'
.rdata:00002EDC                 public ??_7ICryptoSetPassword@@6B@
.rdata:00002EDC ; const ICryptoSetPassword::`vftable'
.rdata:00002EDC ??_7ICryptoSetPassword@@6B@ dd offset __purecall
.rdata:00002EDC                                         ; DATA XREF: ICryptoSetPassword::ICryptoSetPassword(void)+19o
.rdata:00002EE0                 dd offset __purecall
.rdata:00002EE4                 dd offset __purecall
.rdata:00002EE8                 dd offset __purecall
.rdata:00002EE8 _rdata          ends
.rdata:00002EE8
.rdata$r:00002EEC ; ===========================================================================
.rdata$r:00002EEC
.rdata$r:00002EEC ; Segment type: Pure data
.rdata$r:00002EEC ; Segment permissions: Read
.rdata$r:00002EEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002EEC                 assume cs:_rdata$r
.rdata$r:00002EEC                 ;org 2EECh
.rdata$r:00002EEC ; COMDAT (pick any)
.rdata$r:00002EEC                 public ??_R4ICryptoSetPassword@@6B@
.rdata$r:00002EEC ; const ICryptoSetPassword::`RTTI Complete Object Locator'
.rdata$r:00002EEC ??_R4ICryptoSetPassword@@6B@ db    0    ; DATA XREF: .rdata:00002ED8o
.rdata$r:00002EED                 db    0
.rdata$r:00002EEE                 db    0
.rdata$r:00002EEF                 db    0
.rdata$r:00002EF0                 db    0
.rdata$r:00002EF1                 db    0
.rdata$r:00002EF2                 db    0
.rdata$r:00002EF3                 db    0
.rdata$r:00002EF4                 db    0
.rdata$r:00002EF5                 db    0
.rdata$r:00002EF6                 db    0
.rdata$r:00002EF7                 db    0
.rdata$r:00002EF8                 dd offset ??_R0?AUICryptoSetPassword@@@8 ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:00002EFC                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002EFC _rdata$r        ends
.rdata$r:00002EFC
.text:00002F00 ; ===========================================================================
.text:00002F00
.text:00002F00 ; Segment type: Pure code
.text:00002F00 ; Segment permissions: Read/Execute
.text:00002F00 _text           segment para public 'CODE' use32
.text:00002F00                 assume cs:_text
.text:00002F00                 ;org 2F00h
.text:00002F00 ; COMDAT (pick any)
.text:00002F00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F00
.text:00002F00 ; =============== S U B R O U T I N E =======================================
.text:00002F00
.text:00002F00 ; Attributes: bp-based frame
.text:00002F00
.text:00002F00 ; _DWORD __thiscall ICryptoProperties::ICryptoProperties(ICryptoProperties *__hidden this)
.text:00002F00                 public ??0ICryptoProperties@@QAE@XZ
.text:00002F00 ??0ICryptoProperties@@QAE@XZ proc near  ; CODE XREF: CFilterCoder::CFilterCoder(bool)+9Ep
.text:00002F00
.text:00002F00 var_4           = dword ptr -4
.text:00002F00
.text:00002F00                 push    ebp
.text:00002F01                 mov     ebp, esp
.text:00002F03                 push    ecx
.text:00002F04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F0B                 mov     [ebp+var_4], ecx
.text:00002F0E                 mov     ecx, [ebp+var_4]
.text:00002F11                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002F16                 mov     eax, [ebp+var_4]
.text:00002F19                 mov     dword ptr [eax], offset ??_7ICryptoProperties@@6B@ ; const ICryptoProperties::`vftable'
.text:00002F1F                 mov     eax, [ebp+var_4]
.text:00002F22                 add     esp, 4
.text:00002F25                 cmp     ebp, esp
.text:00002F27                 call    __RTC_CheckEsp
.text:00002F2C                 mov     esp, ebp
.text:00002F2E                 pop     ebp
.text:00002F2F                 retn
.text:00002F2F ??0ICryptoProperties@@QAE@XZ endp
.text:00002F2F
.text:00002F2F _text           ends
.text:00002F2F
.rdata:00002F30 ; ===========================================================================
.rdata:00002F30
.rdata:00002F30 ; Segment type: Pure data
.rdata:00002F30 ; Segment permissions: Read
.rdata:00002F30 _rdata          segment dword public 'DATA' use32
.rdata:00002F30                 assume cs:_rdata
.rdata:00002F30                 ;org 2F30h
.rdata:00002F30 ; COMDAT (pick largest)
.rdata:00002F30                 dd offset ??_R4ICryptoProperties@@6B@ ; const ICryptoProperties::`RTTI Complete Object Locator'
.rdata:00002F34                 public ??_7ICryptoProperties@@6B@
.rdata:00002F34 ; const ICryptoProperties::`vftable'
.rdata:00002F34 ??_7ICryptoProperties@@6B@ dd offset __purecall
.rdata:00002F34                                         ; DATA XREF: ICryptoProperties::ICryptoProperties(void)+19o
.rdata:00002F38                 dd offset __purecall
.rdata:00002F3C                 dd offset __purecall
.rdata:00002F40                 dd offset __purecall
.rdata:00002F44                 dd offset __purecall
.rdata:00002F44 _rdata          ends
.rdata:00002F44
.rdata$r:00002F48 ; ===========================================================================
.rdata$r:00002F48
.rdata$r:00002F48 ; Segment type: Pure data
.rdata$r:00002F48 ; Segment permissions: Read
.rdata$r:00002F48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002F48                 assume cs:_rdata$r
.rdata$r:00002F48                 ;org 2F48h
.rdata$r:00002F48 ; COMDAT (pick any)
.rdata$r:00002F48                 public ??_R4ICryptoProperties@@6B@
.rdata$r:00002F48 ; const ICryptoProperties::`RTTI Complete Object Locator'
.rdata$r:00002F48 ??_R4ICryptoProperties@@6B@ db    0     ; DATA XREF: .rdata:00002F30o
.rdata$r:00002F49                 db    0
.rdata$r:00002F4A                 db    0
.rdata$r:00002F4B                 db    0
.rdata$r:00002F4C                 db    0
.rdata$r:00002F4D                 db    0
.rdata$r:00002F4E                 db    0
.rdata$r:00002F4F                 db    0
.rdata$r:00002F50                 db    0
.rdata$r:00002F51                 db    0
.rdata$r:00002F52                 db    0
.rdata$r:00002F53                 db    0
.rdata$r:00002F54                 dd offset ??_R0?AUICryptoProperties@@@8 ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:00002F58                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002F58 _rdata$r        ends
.rdata$r:00002F58
.text:00002F5C ; ===========================================================================
.text:00002F5C
.text:00002F5C ; Segment type: Pure code
.text:00002F5C ; Segment permissions: Read/Execute
.text:00002F5C _text           segment para public 'CODE' use32
.text:00002F5C                 assume cs:_text
.text:00002F5C                 ;org 2F5Ch
.text:00002F5C ; COMDAT (pick any)
.text:00002F5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F5C
.text:00002F5C ; =============== S U B R O U T I N E =======================================
.text:00002F5C
.text:00002F5C ; Attributes: bp-based frame
.text:00002F5C
.text:00002F5C ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:00002F5C                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:00002F5C ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:00002F5C                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+A9p
.text:00002F5C
.text:00002F5C var_4           = dword ptr -4
.text:00002F5C
.text:00002F5C                 push    ebp
.text:00002F5D                 mov     ebp, esp
.text:00002F5F                 push    ecx
.text:00002F60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F67                 mov     [ebp+var_4], ecx
.text:00002F6A                 mov     ecx, [ebp+var_4]
.text:00002F6D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002F72                 mov     eax, [ebp+var_4]
.text:00002F75                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:00002F7B                 mov     eax, [ebp+var_4]
.text:00002F7E                 add     esp, 4
.text:00002F81                 cmp     ebp, esp
.text:00002F83                 call    __RTC_CheckEsp
.text:00002F88                 mov     esp, ebp
.text:00002F8A                 pop     ebp
.text:00002F8B                 retn
.text:00002F8B ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:00002F8B
.text:00002F8B _text           ends
.text:00002F8B
.rdata:00002F8C ; ===========================================================================
.rdata:00002F8C
.rdata:00002F8C ; Segment type: Pure data
.rdata:00002F8C ; Segment permissions: Read
.rdata:00002F8C _rdata          segment dword public 'DATA' use32
.rdata:00002F8C                 assume cs:_rdata
.rdata:00002F8C                 ;org 2F8Ch
.rdata:00002F8C ; COMDAT (pick largest)
.rdata:00002F8C                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:00002F90                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:00002F90 ; const ICompressSetCoderProperties::`vftable'
.rdata:00002F90 ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:00002F90                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:00002F94                 dd offset __purecall
.rdata:00002F98                 dd offset __purecall
.rdata:00002F9C                 dd offset __purecall
.rdata:00002F9C _rdata          ends
.rdata:00002F9C
.rdata$r:00002FA0 ; ===========================================================================
.rdata$r:00002FA0
.rdata$r:00002FA0 ; Segment type: Pure data
.rdata$r:00002FA0 ; Segment permissions: Read
.rdata$r:00002FA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002FA0                 assume cs:_rdata$r
.rdata$r:00002FA0                 ;org 2FA0h
.rdata$r:00002FA0 ; COMDAT (pick any)
.rdata$r:00002FA0                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:00002FA0 ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00002FA0 ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:00002FA0                                         ; DATA XREF: .rdata:00002F8Co
.rdata$r:00002FA1                 db    0
.rdata$r:00002FA2                 db    0
.rdata$r:00002FA3                 db    0
.rdata$r:00002FA4                 db    0
.rdata$r:00002FA5                 db    0
.rdata$r:00002FA6                 db    0
.rdata$r:00002FA7                 db    0
.rdata$r:00002FA8                 db    0
.rdata$r:00002FA9                 db    0
.rdata$r:00002FAA                 db    0
.rdata$r:00002FAB                 db    0
.rdata$r:00002FAC                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00002FB0                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002FB0 _rdata$r        ends
.rdata$r:00002FB0
.text:00002FB4 ; ===========================================================================
.text:00002FB4
.text:00002FB4 ; Segment type: Pure code
.text:00002FB4 ; Segment permissions: Read/Execute
.text:00002FB4 _text           segment para public 'CODE' use32
.text:00002FB4                 assume cs:_text
.text:00002FB4                 ;org 2FB4h
.text:00002FB4 ; COMDAT (pick any)
.text:00002FB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002FB4
.text:00002FB4 ; =============== S U B R O U T I N E =======================================
.text:00002FB4
.text:00002FB4 ; Attributes: bp-based frame
.text:00002FB4
.text:00002FB4 ; _DWORD __thiscall ICompressWriteCoderProperties::ICompressWriteCoderProperties(ICompressWriteCoderProperties *__hidden this)
.text:00002FB4                 public ??0ICompressWriteCoderProperties@@QAE@XZ
.text:00002FB4 ??0ICompressWriteCoderProperties@@QAE@XZ proc near
.text:00002FB4                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+B4p
.text:00002FB4
.text:00002FB4 var_4           = dword ptr -4
.text:00002FB4
.text:00002FB4                 push    ebp
.text:00002FB5                 mov     ebp, esp
.text:00002FB7                 push    ecx
.text:00002FB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FBF                 mov     [ebp+var_4], ecx
.text:00002FC2                 mov     ecx, [ebp+var_4]
.text:00002FC5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002FCA                 mov     eax, [ebp+var_4]
.text:00002FCD                 mov     dword ptr [eax], offset ??_7ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`vftable'
.text:00002FD3                 mov     eax, [ebp+var_4]
.text:00002FD6                 add     esp, 4
.text:00002FD9                 cmp     ebp, esp
.text:00002FDB                 call    __RTC_CheckEsp
.text:00002FE0                 mov     esp, ebp
.text:00002FE2                 pop     ebp
.text:00002FE3                 retn
.text:00002FE3 ??0ICompressWriteCoderProperties@@QAE@XZ endp
.text:00002FE3
.text:00002FE3 _text           ends
.text:00002FE3
.rdata:00002FE4 ; ===========================================================================
.rdata:00002FE4
.rdata:00002FE4 ; Segment type: Pure data
.rdata:00002FE4 ; Segment permissions: Read
.rdata:00002FE4 _rdata          segment dword public 'DATA' use32
.rdata:00002FE4                 assume cs:_rdata
.rdata:00002FE4                 ;org 2FE4h
.rdata:00002FE4 ; COMDAT (pick largest)
.rdata:00002FE4                 dd offset ??_R4ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata:00002FE8                 public ??_7ICompressWriteCoderProperties@@6B@
.rdata:00002FE8 ; const ICompressWriteCoderProperties::`vftable'
.rdata:00002FE8 ??_7ICompressWriteCoderProperties@@6B@ dd offset __purecall
.rdata:00002FE8                                         ; DATA XREF: ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)+19o
.rdata:00002FEC                 dd offset __purecall
.rdata:00002FF0                 dd offset __purecall
.rdata:00002FF4                 dd offset __purecall
.rdata:00002FF4 _rdata          ends
.rdata:00002FF4
.rdata$r:00002FF8 ; ===========================================================================
.rdata$r:00002FF8
.rdata$r:00002FF8 ; Segment type: Pure data
.rdata$r:00002FF8 ; Segment permissions: Read
.rdata$r:00002FF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002FF8                 assume cs:_rdata$r
.rdata$r:00002FF8                 ;org 2FF8h
.rdata$r:00002FF8 ; COMDAT (pick any)
.rdata$r:00002FF8                 public ??_R4ICompressWriteCoderProperties@@6B@
.rdata$r:00002FF8 ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00002FF8 ??_R4ICompressWriteCoderProperties@@6B@ db    0
.rdata$r:00002FF8                                         ; DATA XREF: .rdata:00002FE4o
.rdata$r:00002FF9                 db    0
.rdata$r:00002FFA                 db    0
.rdata$r:00002FFB                 db    0
.rdata$r:00002FFC                 db    0
.rdata$r:00002FFD                 db    0
.rdata$r:00002FFE                 db    0
.rdata$r:00002FFF                 db    0
.rdata$r:00003000                 db    0
.rdata$r:00003001                 db    0
.rdata$r:00003002                 db    0
.rdata$r:00003003                 db    0
.rdata$r:00003004                 dd offset ??_R0?AUICompressWriteCoderProperties@@@8 ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00003008                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003008 _rdata$r        ends
.rdata$r:00003008
.text:0000300C ; ===========================================================================
.text:0000300C
.text:0000300C ; Segment type: Pure code
.text:0000300C ; Segment permissions: Read/Execute
.text:0000300C _text           segment para public 'CODE' use32
.text:0000300C                 assume cs:_text
.text:0000300C                 ;org 300Ch
.text:0000300C ; COMDAT (pick any)
.text:0000300C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000300C
.text:0000300C ; =============== S U B R O U T I N E =======================================
.text:0000300C
.text:0000300C ; Attributes: bp-based frame
.text:0000300C
.text:0000300C ; _DWORD __thiscall ICryptoResetInitVector::ICryptoResetInitVector(ICryptoResetInitVector *__hidden this)
.text:0000300C                 public ??0ICryptoResetInitVector@@QAE@XZ
.text:0000300C ??0ICryptoResetInitVector@@QAE@XZ proc near
.text:0000300C                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+BFp
.text:0000300C
.text:0000300C var_4           = dword ptr -4
.text:0000300C
.text:0000300C                 push    ebp
.text:0000300D                 mov     ebp, esp
.text:0000300F                 push    ecx
.text:00003010                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003017                 mov     [ebp+var_4], ecx
.text:0000301A                 mov     ecx, [ebp+var_4]
.text:0000301D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003022                 mov     eax, [ebp+var_4]
.text:00003025                 mov     dword ptr [eax], offset ??_7ICryptoResetInitVector@@6B@ ; const ICryptoResetInitVector::`vftable'
.text:0000302B                 mov     eax, [ebp+var_4]
.text:0000302E                 add     esp, 4
.text:00003031                 cmp     ebp, esp
.text:00003033                 call    __RTC_CheckEsp
.text:00003038                 mov     esp, ebp
.text:0000303A                 pop     ebp
.text:0000303B                 retn
.text:0000303B ??0ICryptoResetInitVector@@QAE@XZ endp
.text:0000303B
.text:0000303B _text           ends
.text:0000303B
.rdata:0000303C ; ===========================================================================
.rdata:0000303C
.rdata:0000303C ; Segment type: Pure data
.rdata:0000303C ; Segment permissions: Read
.rdata:0000303C _rdata          segment dword public 'DATA' use32
.rdata:0000303C                 assume cs:_rdata
.rdata:0000303C                 ;org 303Ch
.rdata:0000303C ; COMDAT (pick largest)
.rdata:0000303C                 dd offset ??_R4ICryptoResetInitVector@@6B@ ; const ICryptoResetInitVector::`RTTI Complete Object Locator'
.rdata:00003040                 public ??_7ICryptoResetInitVector@@6B@
.rdata:00003040 ; const ICryptoResetInitVector::`vftable'
.rdata:00003040 ??_7ICryptoResetInitVector@@6B@ dd offset __purecall
.rdata:00003040                                         ; DATA XREF: ICryptoResetInitVector::ICryptoResetInitVector(void)+19o
.rdata:00003044                 dd offset __purecall
.rdata:00003048                 dd offset __purecall
.rdata:0000304C                 dd offset __purecall
.rdata:0000304C _rdata          ends
.rdata:0000304C
.rdata$r:00003050 ; ===========================================================================
.rdata$r:00003050
.rdata$r:00003050 ; Segment type: Pure data
.rdata$r:00003050 ; Segment permissions: Read
.rdata$r:00003050 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003050                 assume cs:_rdata$r
.rdata$r:00003050                 ;org 3050h
.rdata$r:00003050 ; COMDAT (pick any)
.rdata$r:00003050                 public ??_R4ICryptoResetInitVector@@6B@
.rdata$r:00003050 ; const ICryptoResetInitVector::`RTTI Complete Object Locator'
.rdata$r:00003050 ??_R4ICryptoResetInitVector@@6B@ db    0 ; DATA XREF: .rdata:0000303Co
.rdata$r:00003051                 db    0
.rdata$r:00003052                 db    0
.rdata$r:00003053                 db    0
.rdata$r:00003054                 db    0
.rdata$r:00003055                 db    0
.rdata$r:00003056                 db    0
.rdata$r:00003057                 db    0
.rdata$r:00003058                 db    0
.rdata$r:00003059                 db    0
.rdata$r:0000305A                 db    0
.rdata$r:0000305B                 db    0
.rdata$r:0000305C                 dd offset ??_R0?AUICryptoResetInitVector@@@8 ; ICryptoResetInitVector `RTTI Type Descriptor'
.rdata$r:00003060                 dd offset ??_R3ICryptoResetInitVector@@8 ; ICryptoResetInitVector::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003060 _rdata$r        ends
.rdata$r:00003060
.text:00003064 ; ===========================================================================
.text:00003064
.text:00003064 ; Segment type: Pure code
.text:00003064 ; Segment permissions: Read/Execute
.text:00003064 _text           segment para public 'CODE' use32
.text:00003064                 assume cs:_text
.text:00003064                 ;org 3064h
.text:00003064 ; COMDAT (pick any)
.text:00003064                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003064
.text:00003064 ; =============== S U B R O U T I N E =======================================
.text:00003064
.text:00003064 ; Attributes: bp-based frame
.text:00003064
.text:00003064 ; _DWORD __thiscall ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(ICompressSetDecoderProperties2 *__hidden this)
.text:00003064                 public ??0ICompressSetDecoderProperties2@@QAE@XZ
.text:00003064 ??0ICompressSetDecoderProperties2@@QAE@XZ proc near
.text:00003064                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+CAp
.text:00003064
.text:00003064 var_4           = dword ptr -4
.text:00003064
.text:00003064                 push    ebp
.text:00003065                 mov     ebp, esp
.text:00003067                 push    ecx
.text:00003068                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000306F                 mov     [ebp+var_4], ecx
.text:00003072                 mov     ecx, [ebp+var_4]
.text:00003075                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000307A                 mov     eax, [ebp+var_4]
.text:0000307D                 mov     dword ptr [eax], offset ??_7ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`vftable'
.text:00003083                 mov     eax, [ebp+var_4]
.text:00003086                 add     esp, 4
.text:00003089                 cmp     ebp, esp
.text:0000308B                 call    __RTC_CheckEsp
.text:00003090                 mov     esp, ebp
.text:00003092                 pop     ebp
.text:00003093                 retn
.text:00003093 ??0ICompressSetDecoderProperties2@@QAE@XZ endp
.text:00003093
.text:00003093 _text           ends
.text:00003093
.rdata:00003094 ; ===========================================================================
.rdata:00003094
.rdata:00003094 ; Segment type: Pure data
.rdata:00003094 ; Segment permissions: Read
.rdata:00003094 _rdata          segment dword public 'DATA' use32
.rdata:00003094                 assume cs:_rdata
.rdata:00003094                 ;org 3094h
.rdata:00003094 ; COMDAT (pick largest)
.rdata:00003094                 dd offset ??_R4ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata:00003098                 public ??_7ICompressSetDecoderProperties2@@6B@
.rdata:00003098 ; const ICompressSetDecoderProperties2::`vftable'
.rdata:00003098 ??_7ICompressSetDecoderProperties2@@6B@ dd offset __purecall
.rdata:00003098                                         ; DATA XREF: ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+19o
.rdata:0000309C                 dd offset __purecall
.rdata:000030A0                 dd offset __purecall
.rdata:000030A4                 dd offset __purecall
.rdata:000030A4 _rdata          ends
.rdata:000030A4
.rdata$r:000030A8 ; ===========================================================================
.rdata$r:000030A8
.rdata$r:000030A8 ; Segment type: Pure data
.rdata$r:000030A8 ; Segment permissions: Read
.rdata$r:000030A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000030A8                 assume cs:_rdata$r
.rdata$r:000030A8                 ;org 30A8h
.rdata$r:000030A8 ; COMDAT (pick any)
.rdata$r:000030A8                 public ??_R4ICompressSetDecoderProperties2@@6B@
.rdata$r:000030A8 ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata$r:000030A8 ??_R4ICompressSetDecoderProperties2@@6B@ db    0
.rdata$r:000030A8                                         ; DATA XREF: .rdata:00003094o
.rdata$r:000030A9                 db    0
.rdata$r:000030AA                 db    0
.rdata$r:000030AB                 db    0
.rdata$r:000030AC                 db    0
.rdata$r:000030AD                 db    0
.rdata$r:000030AE                 db    0
.rdata$r:000030AF                 db    0
.rdata$r:000030B0                 db    0
.rdata$r:000030B1                 db    0
.rdata$r:000030B2                 db    0
.rdata$r:000030B3                 db    0
.rdata$r:000030B4                 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8 ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:000030B8                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000030B8 _rdata$r        ends
.rdata$r:000030B8
.text:000030BC ; ===========================================================================
.text:000030BC
.text:000030BC ; Segment type: Pure code
.text:000030BC ; Segment permissions: Read/Execute
.text:000030BC _text           segment para public 'CODE' use32
.text:000030BC                 assume cs:_text
.text:000030BC                 ;org 30BCh
.text:000030BC ; COMDAT (pick any)
.text:000030BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000030BC
.text:000030BC ; =============== S U B R O U T I N E =======================================
.text:000030BC
.text:000030BC ; Attributes: bp-based frame
.text:000030BC
.text:000030BC ; public: __thiscall IUnknown::IUnknown(void)
.text:000030BC                 public ??0IUnknown@@QAE@XZ
.text:000030BC ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:000030BC                                         ; ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)+11p ...
.text:000030BC
.text:000030BC var_4           = dword ptr -4
.text:000030BC
.text:000030BC                 push    ebp
.text:000030BD                 mov     ebp, esp
.text:000030BF                 push    ecx
.text:000030C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030C7                 mov     [ebp+var_4], ecx
.text:000030CA                 mov     eax, [ebp+var_4]
.text:000030CD                 mov     esp, ebp
.text:000030CF                 pop     ebp
.text:000030D0                 retn
.text:000030D0 ??0IUnknown@@QAE@XZ endp
.text:000030D0
.text:000030D0 ; ---------------------------------------------------------------------------
.text:000030D1                 align 4
.text:000030D1 _text           ends
.text:000030D1
.text:000030D4 ; ===========================================================================
.text:000030D4
.text:000030D4 ; Segment type: Pure code
.text:000030D4 ; Segment permissions: Read/Execute
.text:000030D4 _text           segment para public 'CODE' use32
.text:000030D4                 assume cs:_text
.text:000030D4                 ;org 30D4h
.text:000030D4 ; COMDAT (pick any)
.text:000030D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000030D4
.text:000030D4 ; =============== S U B R O U T I N E =======================================
.text:000030D4
.text:000030D4 ; Attributes: bp-based frame
.text:000030D4
.text:000030D4 ; void __thiscall CFilterCoder::InitSpecVars(CFilterCoder *__hidden this)
.text:000030D4                 public ?InitSpecVars@CFilterCoder@@AAEXXZ
.text:000030D4 ?InitSpecVars@CFilterCoder@@AAEXXZ proc near
.text:000030D4                                         ; CODE XREF: CFilterCoder::InitEncoder(void)+9p
.text:000030D4                                         ; CFilterCoder::Init_NoSubFilterInit(void)+11p ...
.text:000030D4
.text:000030D4 var_4           = dword ptr -4
.text:000030D4
.text:000030D4                 push    ebp
.text:000030D5                 mov     ebp, esp
.text:000030D7                 push    ecx
.text:000030D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030DF                 mov     [ebp+var_4], ecx
.text:000030E2                 mov     eax, [ebp+var_4]
.text:000030E5                 mov     dword ptr [eax+70h], 0
.text:000030EC                 mov     ecx, [ebp+var_4]
.text:000030EF                 mov     dword ptr [ecx+74h], 0
.text:000030F6                 mov     edx, [ebp+var_4]
.text:000030F9                 mov     dword ptr [edx+78h], 0
.text:00003100                 mov     eax, [ebp+var_4]
.text:00003103                 mov     byte ptr [eax+55h], 0
.text:00003107                 mov     ecx, [ebp+var_4]
.text:0000310A                 mov     dword ptr [ecx+58h], 0
.text:00003111                 mov     dword ptr [ecx+5Ch], 0
.text:00003118                 mov     edx, [ebp+var_4]
.text:0000311B                 mov     dword ptr [edx+60h], 0
.text:00003122                 mov     dword ptr [edx+64h], 0
.text:00003129                 mov     esp, ebp
.text:0000312B                 pop     ebp
.text:0000312C                 retn
.text:0000312C ?InitSpecVars@CFilterCoder@@AAEXXZ endp
.text:0000312C
.text:0000312C ; ---------------------------------------------------------------------------
.text:0000312D                 align 10h
.text:0000312D _text           ends
.text:0000312D
.text:00003130 ; ===========================================================================
.text:00003130
.text:00003130 ; Segment type: Pure code
.text:00003130 ; Segment permissions: Read/Execute
.text:00003130 _text           segment para public 'CODE' use32
.text:00003130                 assume cs:_text
.text:00003130                 ;org 3130h
.text:00003130 ; COMDAT (pick any)
.text:00003130                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003130
.text:00003130 ; =============== S U B R O U T I N E =======================================
.text:00003130
.text:00003130 ; Attributes: bp-based frame
.text:00003130
.text:00003130 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00003130                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00003130 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00003130                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+1D7p
.text:00003130
.text:00003130 var_4           = dword ptr -4
.text:00003130
.text:00003130                 push    ebp
.text:00003131                 mov     ebp, esp
.text:00003133                 push    ecx
.text:00003134                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000313B                 mov     [ebp+var_4], ecx
.text:0000313E                 mov     eax, [ebp+var_4]
.text:00003141                 mov     dword ptr [eax], 0
.text:00003147                 mov     eax, [ebp+var_4]
.text:0000314A                 mov     esp, ebp
.text:0000314C                 pop     ebp
.text:0000314D                 retn
.text:0000314D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:0000314D
.text:0000314D ; ---------------------------------------------------------------------------
.text:0000314E                 align 10h
.text:0000314E _text           ends
.text:0000314E
.text:00003150 ; ===========================================================================
.text:00003150
.text:00003150 ; Segment type: Pure code
.text:00003150 ; Segment permissions: Read/Execute
.text:00003150 _text           segment para public 'CODE' use32
.text:00003150                 assume cs:_text
.text:00003150                 ;org 3150h
.text:00003150 ; COMDAT (pick any)
.text:00003150                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003150
.text:00003150 ; =============== S U B R O U T I N E =======================================
.text:00003150
.text:00003150 ; Attributes: bp-based frame
.text:00003150
.text:00003150 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00003150                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00003150 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00003150                                         ; CODE XREF: CFilterCoder::~CFilterCoder(void)+159p
.text:00003150                                         ; __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$1+6j ...
.text:00003150
.text:00003150 var_4           = dword ptr -4
.text:00003150
.text:00003150                 push    ebp
.text:00003151                 mov     ebp, esp
.text:00003153                 push    ecx
.text:00003154                 push    esi
.text:00003155                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000315C                 mov     [ebp+var_4], ecx
.text:0000315F                 mov     eax, [ebp+var_4]
.text:00003162                 cmp     dword ptr [eax], 0
.text:00003165                 jz      short loc_3182
.text:00003167                 mov     ecx, [ebp+var_4]
.text:0000316A                 mov     edx, [ecx]
.text:0000316C                 mov     eax, [ebp+var_4]
.text:0000316F                 mov     ecx, [eax]
.text:00003171                 mov     edx, [edx]
.text:00003173                 mov     esi, esp
.text:00003175                 push    ecx
.text:00003176                 mov     eax, [edx+8]
.text:00003179                 call    eax
.text:0000317B                 cmp     esi, esp
.text:0000317D                 call    __RTC_CheckEsp
.text:00003182
.text:00003182 loc_3182:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00003182                 pop     esi
.text:00003183                 add     esp, 4
.text:00003186                 cmp     ebp, esp
.text:00003188                 call    __RTC_CheckEsp
.text:0000318D                 mov     esp, ebp
.text:0000318F                 pop     ebp
.text:00003190                 retn
.text:00003190 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00003190
.text:00003190 ; ---------------------------------------------------------------------------
.text:00003191                 align 4
.text:00003191 _text           ends
.text:00003191
.text:00003194 ; ===========================================================================
.text:00003194
.text:00003194 ; Segment type: Pure code
.text:00003194 ; Segment permissions: Read/Execute
.text:00003194 _text           segment para public 'CODE' use32
.text:00003194                 assume cs:_text
.text:00003194                 ;org 3194h
.text:00003194 ; COMDAT (pick any)
.text:00003194                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003194
.text:00003194 ; =============== S U B R O U T I N E =======================================
.text:00003194
.text:00003194 ; Attributes: bp-based frame
.text:00003194
.text:00003194 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:00003194                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:00003194 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:00003194                                         ; CODE XREF: CFilterCoder::ReleaseInStream(void)+9p
.text:00003194
.text:00003194 var_4           = dword ptr -4
.text:00003194
.text:00003194                 push    ebp
.text:00003195                 mov     ebp, esp
.text:00003197                 push    ecx
.text:00003198                 push    esi
.text:00003199                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031A0                 mov     [ebp+var_4], ecx
.text:000031A3                 mov     eax, [ebp+var_4]
.text:000031A6                 cmp     dword ptr [eax], 0
.text:000031A9                 jz      short loc_31CF
.text:000031AB                 mov     ecx, [ebp+var_4]
.text:000031AE                 mov     edx, [ecx]
.text:000031B0                 mov     eax, [ebp+var_4]
.text:000031B3                 mov     ecx, [eax]
.text:000031B5                 mov     edx, [edx]
.text:000031B7                 mov     esi, esp
.text:000031B9                 push    ecx
.text:000031BA                 mov     eax, [edx+8]
.text:000031BD                 call    eax
.text:000031BF                 cmp     esi, esp
.text:000031C1                 call    __RTC_CheckEsp
.text:000031C6                 mov     ecx, [ebp+var_4]
.text:000031C9                 mov     dword ptr [ecx], 0
.text:000031CF
.text:000031CF loc_31CF:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:000031CF                 pop     esi
.text:000031D0                 add     esp, 4
.text:000031D3                 cmp     ebp, esp
.text:000031D5                 call    __RTC_CheckEsp
.text:000031DA                 mov     esp, ebp
.text:000031DC                 pop     ebp
.text:000031DD                 retn
.text:000031DD ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:000031DD
.text:000031DD ; ---------------------------------------------------------------------------
.text:000031DE                 align 10h
.text:000031DE _text           ends
.text:000031DE
.text:000031E0 ; ===========================================================================
.text:000031E0
.text:000031E0 ; Segment type: Pure code
.text:000031E0 ; Segment permissions: Read/Execute
.text:000031E0 _text           segment para public 'CODE' use32
.text:000031E0                 assume cs:_text
.text:000031E0                 ;org 31E0h
.text:000031E0 ; COMDAT (pick any)
.text:000031E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031E0
.text:000031E0 ; =============== S U B R O U T I N E =======================================
.text:000031E0
.text:000031E0 ; Attributes: bp-based frame
.text:000031E0
.text:000031E0 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:000031E0                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:000031E0 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:000031E0                                         ; CODE XREF: CFilterCoder::Read(void *,uint,uint *)+187p
.text:000031E0
.text:000031E0 var_4           = dword ptr -4
.text:000031E0
.text:000031E0                 push    ebp
.text:000031E1                 mov     ebp, esp
.text:000031E3                 push    ecx
.text:000031E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031EB                 mov     [ebp+var_4], ecx
.text:000031EE                 mov     eax, [ebp+var_4]
.text:000031F1                 mov     eax, [eax]
.text:000031F3                 mov     esp, ebp
.text:000031F5                 pop     ebp
.text:000031F6                 retn
.text:000031F6 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:000031F6
.text:000031F6 ; ---------------------------------------------------------------------------
.text:000031F7                 align 4
.text:000031F7 _text           ends
.text:000031F7
.text:000031F8 ; ===========================================================================
.text:000031F8
.text:000031F8 ; Segment type: Pure code
.text:000031F8 ; Segment permissions: Read/Execute
.text:000031F8 _text           segment para public 'CODE' use32
.text:000031F8                 assume cs:_text
.text:000031F8                 ;org 31F8h
.text:000031F8 ; COMDAT (pick any)
.text:000031F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031F8
.text:000031F8 ; =============== S U B R O U T I N E =======================================
.text:000031F8
.text:000031F8 ; Attributes: bp-based frame
.text:000031F8
.text:000031F8 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:000031F8                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:000031F8 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:000031F8                                         ; CODE XREF: CFilterCoder::SetInStream(ISequentialInStream *)+Dp
.text:000031F8
.text:000031F8 var_4           = dword ptr -4
.text:000031F8 arg_0           = dword ptr  8
.text:000031F8
.text:000031F8                 push    ebp
.text:000031F9                 mov     ebp, esp
.text:000031FB                 push    ecx
.text:000031FC                 push    esi
.text:000031FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003204                 mov     [ebp+var_4], ecx
.text:00003207                 cmp     [ebp+arg_0], 0
.text:0000320B                 jz      short loc_3224
.text:0000320D                 mov     eax, [ebp+arg_0]
.text:00003210                 mov     ecx, [eax]
.text:00003212                 mov     esi, esp
.text:00003214                 mov     edx, [ebp+arg_0]
.text:00003217                 push    edx
.text:00003218                 mov     eax, [ecx+4]
.text:0000321B                 call    eax
.text:0000321D                 cmp     esi, esp
.text:0000321F                 call    __RTC_CheckEsp
.text:00003224
.text:00003224 loc_3224:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00003224                 mov     ecx, [ebp+var_4]
.text:00003227                 cmp     dword ptr [ecx], 0
.text:0000322A                 jz      short loc_3247
.text:0000322C                 mov     edx, [ebp+var_4]
.text:0000322F                 mov     eax, [edx]
.text:00003231                 mov     ecx, [ebp+var_4]
.text:00003234                 mov     edx, [ecx]
.text:00003236                 mov     eax, [eax]
.text:00003238                 mov     esi, esp
.text:0000323A                 push    edx
.text:0000323B                 mov     ecx, [eax+8]
.text:0000323E                 call    ecx
.text:00003240                 cmp     esi, esp
.text:00003242                 call    __RTC_CheckEsp
.text:00003247
.text:00003247 loc_3247:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00003247                 mov     edx, [ebp+var_4]
.text:0000324A                 mov     eax, [ebp+arg_0]
.text:0000324D                 mov     [edx], eax
.text:0000324F                 mov     eax, [ebp+arg_0]
.text:00003252                 pop     esi
.text:00003253                 add     esp, 4
.text:00003256                 cmp     ebp, esp
.text:00003258                 call    __RTC_CheckEsp
.text:0000325D                 mov     esp, ebp
.text:0000325F                 pop     ebp
.text:00003260                 retn    4
.text:00003260 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00003260
.text:00003260 ; ---------------------------------------------------------------------------
.text:00003263                 align 4
.text:00003263 _text           ends
.text:00003263
.text:00003264 ; ===========================================================================
.text:00003264
.text:00003264 ; Segment type: Pure code
.text:00003264 ; Segment permissions: Read/Execute
.text:00003264 _text           segment para public 'CODE' use32
.text:00003264                 assume cs:_text
.text:00003264                 ;org 3264h
.text:00003264 ; COMDAT (pick any)
.text:00003264                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003264
.text:00003264 ; =============== S U B R O U T I N E =======================================
.text:00003264
.text:00003264 ; Attributes: bp-based frame
.text:00003264
.text:00003264 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:00003264                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00003264 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00003264                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+1E6p
.text:00003264
.text:00003264 var_4           = dword ptr -4
.text:00003264
.text:00003264                 push    ebp
.text:00003265                 mov     ebp, esp
.text:00003267                 push    ecx
.text:00003268                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000326F                 mov     [ebp+var_4], ecx
.text:00003272                 mov     eax, [ebp+var_4]
.text:00003275                 mov     dword ptr [eax], 0
.text:0000327B                 mov     eax, [ebp+var_4]
.text:0000327E                 mov     esp, ebp
.text:00003280                 pop     ebp
.text:00003281                 retn
.text:00003281 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00003281
.text:00003281 ; ---------------------------------------------------------------------------
.text:00003282                 align 4
.text:00003282 _text           ends
.text:00003282
.text:00003284 ; ===========================================================================
.text:00003284
.text:00003284 ; Segment type: Pure code
.text:00003284 ; Segment permissions: Read/Execute
.text:00003284 _text           segment para public 'CODE' use32
.text:00003284                 assume cs:_text
.text:00003284                 ;org 3284h
.text:00003284 ; COMDAT (pick any)
.text:00003284                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003284
.text:00003284 ; =============== S U B R O U T I N E =======================================
.text:00003284
.text:00003284 ; Attributes: bp-based frame
.text:00003284
.text:00003284 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:00003284                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00003284 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00003284                                         ; CODE XREF: CFilterCoder::~CFilterCoder(void)+14Ap
.text:00003284                                         ; __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$2+6j ...
.text:00003284
.text:00003284 var_4           = dword ptr -4
.text:00003284
.text:00003284                 push    ebp
.text:00003285                 mov     ebp, esp
.text:00003287                 push    ecx
.text:00003288                 push    esi
.text:00003289                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003290                 mov     [ebp+var_4], ecx
.text:00003293                 mov     eax, [ebp+var_4]
.text:00003296                 cmp     dword ptr [eax], 0
.text:00003299                 jz      short loc_32B6
.text:0000329B                 mov     ecx, [ebp+var_4]
.text:0000329E                 mov     edx, [ecx]
.text:000032A0                 mov     eax, [ebp+var_4]
.text:000032A3                 mov     ecx, [eax]
.text:000032A5                 mov     edx, [edx]
.text:000032A7                 mov     esi, esp
.text:000032A9                 push    ecx
.text:000032AA                 mov     eax, [edx+8]
.text:000032AD                 call    eax
.text:000032AF                 cmp     esi, esp
.text:000032B1                 call    __RTC_CheckEsp
.text:000032B6
.text:000032B6 loc_32B6:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:000032B6                 pop     esi
.text:000032B7                 add     esp, 4
.text:000032BA                 cmp     ebp, esp
.text:000032BC                 call    __RTC_CheckEsp
.text:000032C1                 mov     esp, ebp
.text:000032C3                 pop     ebp
.text:000032C4                 retn
.text:000032C4 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000032C4
.text:000032C4 ; ---------------------------------------------------------------------------
.text:000032C5                 align 4
.text:000032C5 _text           ends
.text:000032C5
.text:000032C8 ; ===========================================================================
.text:000032C8
.text:000032C8 ; Segment type: Pure code
.text:000032C8 ; Segment permissions: Read/Execute
.text:000032C8 _text           segment para public 'CODE' use32
.text:000032C8                 assume cs:_text
.text:000032C8                 ;org 32C8h
.text:000032C8 ; COMDAT (pick any)
.text:000032C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000032C8
.text:000032C8 ; =============== S U B R O U T I N E =======================================
.text:000032C8
.text:000032C8 ; Attributes: bp-based frame
.text:000032C8
.text:000032C8 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:000032C8                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:000032C8 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:000032C8                                         ; CODE XREF: CFilterCoder::ReleaseOutStream(void)+9p
.text:000032C8
.text:000032C8 var_4           = dword ptr -4
.text:000032C8
.text:000032C8                 push    ebp
.text:000032C9                 mov     ebp, esp
.text:000032CB                 push    ecx
.text:000032CC                 push    esi
.text:000032CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000032D4                 mov     [ebp+var_4], ecx
.text:000032D7                 mov     eax, [ebp+var_4]
.text:000032DA                 cmp     dword ptr [eax], 0
.text:000032DD                 jz      short loc_3303
.text:000032DF                 mov     ecx, [ebp+var_4]
.text:000032E2                 mov     edx, [ecx]
.text:000032E4                 mov     eax, [ebp+var_4]
.text:000032E7                 mov     ecx, [eax]
.text:000032E9                 mov     edx, [edx]
.text:000032EB                 mov     esi, esp
.text:000032ED                 push    ecx
.text:000032EE                 mov     eax, [edx+8]
.text:000032F1                 call    eax
.text:000032F3                 cmp     esi, esp
.text:000032F5                 call    __RTC_CheckEsp
.text:000032FA                 mov     ecx, [ebp+var_4]
.text:000032FD                 mov     dword ptr [ecx], 0
.text:00003303
.text:00003303 loc_3303:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:00003303                 pop     esi
.text:00003304                 add     esp, 4
.text:00003307                 cmp     ebp, esp
.text:00003309                 call    __RTC_CheckEsp
.text:0000330E                 mov     esp, ebp
.text:00003310                 pop     ebp
.text:00003311                 retn
.text:00003311 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:00003311
.text:00003311 ; ---------------------------------------------------------------------------
.text:00003312                 align 4
.text:00003312 _text           ends
.text:00003312
.text:00003314 ; ===========================================================================
.text:00003314
.text:00003314 ; Segment type: Pure code
.text:00003314 ; Segment permissions: Read/Execute
.text:00003314 _text           segment para public 'CODE' use32
.text:00003314                 assume cs:_text
.text:00003314                 ;org 3314h
.text:00003314 ; COMDAT (pick any)
.text:00003314                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003314
.text:00003314 ; =============== S U B R O U T I N E =======================================
.text:00003314
.text:00003314 ; Attributes: bp-based frame
.text:00003314
.text:00003314 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator->(void)const
.text:00003314                 public ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00003314 ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00003314                                         ; CODE XREF: CFilterCoder::Flush2(void)+95p
.text:00003314
.text:00003314 var_4           = dword ptr -4
.text:00003314
.text:00003314                 push    ebp
.text:00003315                 mov     ebp, esp
.text:00003317                 push    ecx
.text:00003318                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000331F                 mov     [ebp+var_4], ecx
.text:00003322                 mov     eax, [ebp+var_4]
.text:00003325                 mov     eax, [eax]
.text:00003327                 mov     esp, ebp
.text:00003329                 pop     ebp
.text:0000332A                 retn
.text:0000332A ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:0000332A
.text:0000332A ; ---------------------------------------------------------------------------
.text:0000332B                 align 4
.text:0000332B _text           ends
.text:0000332B
.text:0000332C ; ===========================================================================
.text:0000332C
.text:0000332C ; Segment type: Pure code
.text:0000332C ; Segment permissions: Read/Execute
.text:0000332C _text           segment para public 'CODE' use32
.text:0000332C                 assume cs:_text
.text:0000332C                 ;org 332Ch
.text:0000332C ; COMDAT (pick any)
.text:0000332C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000332C
.text:0000332C ; =============== S U B R O U T I N E =======================================
.text:0000332C
.text:0000332C ; Attributes: bp-based frame
.text:0000332C
.text:0000332C ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:0000332C                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:0000332C ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:0000332C                                         ; CODE XREF: CFilterCoder::SetOutStream(ISequentialOutStream *)+Dp
.text:0000332C
.text:0000332C var_4           = dword ptr -4
.text:0000332C arg_0           = dword ptr  8
.text:0000332C
.text:0000332C                 push    ebp
.text:0000332D                 mov     ebp, esp
.text:0000332F                 push    ecx
.text:00003330                 push    esi
.text:00003331                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003338                 mov     [ebp+var_4], ecx
.text:0000333B                 cmp     [ebp+arg_0], 0
.text:0000333F                 jz      short loc_3358
.text:00003341                 mov     eax, [ebp+arg_0]
.text:00003344                 mov     ecx, [eax]
.text:00003346                 mov     esi, esp
.text:00003348                 mov     edx, [ebp+arg_0]
.text:0000334B                 push    edx
.text:0000334C                 mov     eax, [ecx+4]
.text:0000334F                 call    eax
.text:00003351                 cmp     esi, esp
.text:00003353                 call    __RTC_CheckEsp
.text:00003358
.text:00003358 loc_3358:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:00003358                 mov     ecx, [ebp+var_4]
.text:0000335B                 cmp     dword ptr [ecx], 0
.text:0000335E                 jz      short loc_337B
.text:00003360                 mov     edx, [ebp+var_4]
.text:00003363                 mov     eax, [edx]
.text:00003365                 mov     ecx, [ebp+var_4]
.text:00003368                 mov     edx, [ecx]
.text:0000336A                 mov     eax, [eax]
.text:0000336C                 mov     esi, esp
.text:0000336E                 push    edx
.text:0000336F                 mov     ecx, [eax+8]
.text:00003372                 call    ecx
.text:00003374                 cmp     esi, esp
.text:00003376                 call    __RTC_CheckEsp
.text:0000337B
.text:0000337B loc_337B:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:0000337B                 mov     edx, [ebp+var_4]
.text:0000337E                 mov     eax, [ebp+arg_0]
.text:00003381                 mov     [edx], eax
.text:00003383                 mov     eax, [ebp+arg_0]
.text:00003386                 pop     esi
.text:00003387                 add     esp, 4
.text:0000338A                 cmp     ebp, esp
.text:0000338C                 call    __RTC_CheckEsp
.text:00003391                 mov     esp, ebp
.text:00003393                 pop     ebp
.text:00003394                 retn    4
.text:00003394 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00003394
.text:00003394 ; ---------------------------------------------------------------------------
.text:00003397                 align 4
.text:00003397 _text           ends
.text:00003397
.text:00003398 ; ===========================================================================
.text:00003398
.text:00003398 ; Segment type: Pure code
.text:00003398 ; Segment permissions: Read/Execute
.text:00003398 _text           segment para public 'CODE' use32
.text:00003398                 assume cs:_text
.text:00003398                 ;org 3398h
.text:00003398 ; COMDAT (pick any)
.text:00003398                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003398
.text:00003398 ; =============== S U B R O U T I N E =======================================
.text:00003398
.text:00003398 ; Attributes: bp-based frame
.text:00003398
.text:00003398 ; public: __thiscall CMyComPtr<struct ICryptoSetPassword>::CMyComPtr<struct ICryptoSetPassword>(void)
.text:00003398                 public ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
.text:00003398 ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ proc near
.text:00003398                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+1F5p
.text:00003398
.text:00003398 var_4           = dword ptr -4
.text:00003398
.text:00003398                 push    ebp
.text:00003399                 mov     ebp, esp
.text:0000339B                 push    ecx
.text:0000339C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033A3                 mov     [ebp+var_4], ecx
.text:000033A6                 mov     eax, [ebp+var_4]
.text:000033A9                 mov     dword ptr [eax], 0
.text:000033AF                 mov     eax, [ebp+var_4]
.text:000033B2                 mov     esp, ebp
.text:000033B4                 pop     ebp
.text:000033B5                 retn
.text:000033B5 ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ endp
.text:000033B5
.text:000033B5 ; ---------------------------------------------------------------------------
.text:000033B6                 align 4
.text:000033B6 _text           ends
.text:000033B6
.text:000033B8 ; ===========================================================================
.text:000033B8
.text:000033B8 ; Segment type: Pure code
.text:000033B8 ; Segment permissions: Read/Execute
.text:000033B8 _text           segment para public 'CODE' use32
.text:000033B8                 assume cs:_text
.text:000033B8                 ;org 33B8h
.text:000033B8 ; COMDAT (pick any)
.text:000033B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000033B8
.text:000033B8 ; =============== S U B R O U T I N E =======================================
.text:000033B8
.text:000033B8 ; Attributes: bp-based frame
.text:000033B8
.text:000033B8 ; public: __thiscall CMyComPtr<struct ICryptoSetPassword>::~CMyComPtr<struct ICryptoSetPassword>(void)
.text:000033B8                 public ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
.text:000033B8 ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ proc near
.text:000033B8                                         ; CODE XREF: CFilterCoder::~CFilterCoder(void)+13Bp
.text:000033B8                                         ; __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$3+6j ...
.text:000033B8
.text:000033B8 var_4           = dword ptr -4
.text:000033B8
.text:000033B8                 push    ebp
.text:000033B9                 mov     ebp, esp
.text:000033BB                 push    ecx
.text:000033BC                 push    esi
.text:000033BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033C4                 mov     [ebp+var_4], ecx
.text:000033C7                 mov     eax, [ebp+var_4]
.text:000033CA                 cmp     dword ptr [eax], 0
.text:000033CD                 jz      short loc_33EA
.text:000033CF                 mov     ecx, [ebp+var_4]
.text:000033D2                 mov     edx, [ecx]
.text:000033D4                 mov     eax, [ebp+var_4]
.text:000033D7                 mov     ecx, [eax]
.text:000033D9                 mov     edx, [edx]
.text:000033DB                 mov     esi, esp
.text:000033DD                 push    ecx
.text:000033DE                 mov     eax, [edx+8]
.text:000033E1                 call    eax
.text:000033E3                 cmp     esi, esp
.text:000033E5                 call    __RTC_CheckEsp
.text:000033EA
.text:000033EA loc_33EA:                               ; CODE XREF: CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)+15j
.text:000033EA                 pop     esi
.text:000033EB                 add     esp, 4
.text:000033EE                 cmp     ebp, esp
.text:000033F0                 call    __RTC_CheckEsp
.text:000033F5                 mov     esp, ebp
.text:000033F7                 pop     ebp
.text:000033F8                 retn
.text:000033F8 ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ endp
.text:000033F8
.text:000033F8 ; ---------------------------------------------------------------------------
.text:000033F9                 align 4
.text:000033F9 _text           ends
.text:000033F9
.text:000033FC ; ===========================================================================
.text:000033FC
.text:000033FC ; Segment type: Pure code
.text:000033FC ; Segment permissions: Read/Execute
.text:000033FC _text           segment para public 'CODE' use32
.text:000033FC                 assume cs:_text
.text:000033FC                 ;org 33FCh
.text:000033FC ; COMDAT (pick any)
.text:000033FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000033FC
.text:000033FC ; =============== S U B R O U T I N E =======================================
.text:000033FC
.text:000033FC ; Attributes: bp-based frame
.text:000033FC
.text:000033FC ; public: struct ICryptoSetPassword * * __thiscall CMyComPtr<struct ICryptoSetPassword>::operator&(void)
.text:000033FC                 public ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ
.text:000033FC ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ proc near
.text:000033FC                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+255p
.text:000033FC
.text:000033FC var_4           = dword ptr -4
.text:000033FC
.text:000033FC                 push    ebp
.text:000033FD                 mov     ebp, esp
.text:000033FF                 push    ecx
.text:00003400                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003407                 mov     [ebp+var_4], ecx
.text:0000340A                 mov     eax, [ebp+var_4]
.text:0000340D                 mov     esp, ebp
.text:0000340F                 pop     ebp
.text:00003410                 retn
.text:00003410 ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ endp
.text:00003410
.text:00003410 ; ---------------------------------------------------------------------------
.text:00003411                 align 4
.text:00003411 _text           ends
.text:00003411
.text:00003414 ; ===========================================================================
.text:00003414
.text:00003414 ; Segment type: Pure code
.text:00003414 ; Segment permissions: Read/Execute
.text:00003414 _text           segment para public 'CODE' use32
.text:00003414                 assume cs:_text
.text:00003414                 ;org 3414h
.text:00003414 ; COMDAT (pick any)
.text:00003414                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003414
.text:00003414 ; =============== S U B R O U T I N E =======================================
.text:00003414
.text:00003414 ; Attributes: bp-based frame
.text:00003414
.text:00003414 ; public: struct ICryptoSetPassword * __thiscall CMyComPtr<struct ICryptoSetPassword>::operator->(void)const
.text:00003414                 public ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
.text:00003414 ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ proc near
.text:00003414                                         ; CODE XREF: CFilterCoder::CryptoSetPassword(uchar const *,uint)+12p
.text:00003414
.text:00003414 var_4           = dword ptr -4
.text:00003414
.text:00003414                 push    ebp
.text:00003415                 mov     ebp, esp
.text:00003417                 push    ecx
.text:00003418                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000341F                 mov     [ebp+var_4], ecx
.text:00003422                 mov     eax, [ebp+var_4]
.text:00003425                 mov     eax, [eax]
.text:00003427                 mov     esp, ebp
.text:00003429                 pop     ebp
.text:0000342A                 retn
.text:0000342A ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ endp
.text:0000342A
.text:0000342A ; ---------------------------------------------------------------------------
.text:0000342B                 align 4
.text:0000342B _text           ends
.text:0000342B
.text:0000342C ; ===========================================================================
.text:0000342C
.text:0000342C ; Segment type: Pure code
.text:0000342C ; Segment permissions: Read/Execute
.text:0000342C _text           segment para public 'CODE' use32
.text:0000342C                 assume cs:_text
.text:0000342C                 ;org 342Ch
.text:0000342C ; COMDAT (pick any)
.text:0000342C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000342C
.text:0000342C ; =============== S U B R O U T I N E =======================================
.text:0000342C
.text:0000342C ; Attributes: bp-based frame
.text:0000342C
.text:0000342C ; public: bool __thiscall CMyComPtr<struct ICryptoSetPassword>::operator!(void)const
.text:0000342C                 public ??7?$CMyComPtr@UICryptoSetPassword@@@@QBE_NXZ
.text:0000342C ??7?$CMyComPtr@UICryptoSetPassword@@@@QBE_NXZ proc near
.text:0000342C                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+232p
.text:0000342C
.text:0000342C var_4           = dword ptr -4
.text:0000342C
.text:0000342C                 push    ebp
.text:0000342D                 mov     ebp, esp
.text:0000342F                 push    ecx
.text:00003430                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003437                 mov     [ebp+var_4], ecx
.text:0000343A                 mov     eax, [ebp+var_4]
.text:0000343D                 xor     ecx, ecx
.text:0000343F                 cmp     dword ptr [eax], 0
.text:00003442                 setz    cl
.text:00003445                 mov     al, cl
.text:00003447                 mov     esp, ebp
.text:00003449                 pop     ebp
.text:0000344A                 retn
.text:0000344A ??7?$CMyComPtr@UICryptoSetPassword@@@@QBE_NXZ endp
.text:0000344A
.text:0000344A ; ---------------------------------------------------------------------------
.text:0000344B                 align 4
.text:0000344B _text           ends
.text:0000344B
.text:0000344C ; ===========================================================================
.text:0000344C
.text:0000344C ; Segment type: Pure code
.text:0000344C ; Segment permissions: Read/Execute
.text:0000344C _text           segment para public 'CODE' use32
.text:0000344C                 assume cs:_text
.text:0000344C                 ;org 344Ch
.text:0000344C ; COMDAT (pick any)
.text:0000344C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000344C
.text:0000344C ; =============== S U B R O U T I N E =======================================
.text:0000344C
.text:0000344C ; Attributes: bp-based frame
.text:0000344C
.text:0000344C ; public: __thiscall CMyComPtr<struct ICryptoProperties>::CMyComPtr<struct ICryptoProperties>(void)
.text:0000344C                 public ??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ
.text:0000344C ??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ proc near
.text:0000344C                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+207p
.text:0000344C
.text:0000344C var_4           = dword ptr -4
.text:0000344C
.text:0000344C                 push    ebp
.text:0000344D                 mov     ebp, esp
.text:0000344F                 push    ecx
.text:00003450                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003457                 mov     [ebp+var_4], ecx
.text:0000345A                 mov     eax, [ebp+var_4]
.text:0000345D                 mov     dword ptr [eax], 0
.text:00003463                 mov     eax, [ebp+var_4]
.text:00003466                 mov     esp, ebp
.text:00003468                 pop     ebp
.text:00003469                 retn
.text:00003469 ??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ endp
.text:00003469
.text:00003469 ; ---------------------------------------------------------------------------
.text:0000346A                 align 4
.text:0000346A _text           ends
.text:0000346A
.text:0000346C ; ===========================================================================
.text:0000346C
.text:0000346C ; Segment type: Pure code
.text:0000346C ; Segment permissions: Read/Execute
.text:0000346C _text           segment para public 'CODE' use32
.text:0000346C                 assume cs:_text
.text:0000346C                 ;org 346Ch
.text:0000346C ; COMDAT (pick any)
.text:0000346C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000346C
.text:0000346C ; =============== S U B R O U T I N E =======================================
.text:0000346C
.text:0000346C ; Attributes: bp-based frame
.text:0000346C
.text:0000346C ; public: __thiscall CMyComPtr<struct ICryptoProperties>::~CMyComPtr<struct ICryptoProperties>(void)
.text:0000346C                 public ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ
.text:0000346C ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ proc near
.text:0000346C                                         ; CODE XREF: CFilterCoder::~CFilterCoder(void)+12Cp
.text:0000346C                                         ; __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$4+9j ...
.text:0000346C
.text:0000346C var_4           = dword ptr -4
.text:0000346C
.text:0000346C                 push    ebp
.text:0000346D                 mov     ebp, esp
.text:0000346F                 push    ecx
.text:00003470                 push    esi
.text:00003471                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003478                 mov     [ebp+var_4], ecx
.text:0000347B                 mov     eax, [ebp+var_4]
.text:0000347E                 cmp     dword ptr [eax], 0
.text:00003481                 jz      short loc_349E
.text:00003483                 mov     ecx, [ebp+var_4]
.text:00003486                 mov     edx, [ecx]
.text:00003488                 mov     eax, [ebp+var_4]
.text:0000348B                 mov     ecx, [eax]
.text:0000348D                 mov     edx, [edx]
.text:0000348F                 mov     esi, esp
.text:00003491                 push    ecx
.text:00003492                 mov     eax, [edx+8]
.text:00003495                 call    eax
.text:00003497                 cmp     esi, esp
.text:00003499                 call    __RTC_CheckEsp
.text:0000349E
.text:0000349E loc_349E:                               ; CODE XREF: CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>(void)+15j
.text:0000349E                 pop     esi
.text:0000349F                 add     esp, 4
.text:000034A2                 cmp     ebp, esp
.text:000034A4                 call    __RTC_CheckEsp
.text:000034A9                 mov     esp, ebp
.text:000034AB                 pop     ebp
.text:000034AC                 retn
.text:000034AC ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ endp
.text:000034AC
.text:000034AC ; ---------------------------------------------------------------------------
.text:000034AD                 align 10h
.text:000034AD _text           ends
.text:000034AD
.text:000034B0 ; ===========================================================================
.text:000034B0
.text:000034B0 ; Segment type: Pure code
.text:000034B0 ; Segment permissions: Read/Execute
.text:000034B0 _text           segment para public 'CODE' use32
.text:000034B0                 assume cs:_text
.text:000034B0                 ;org 34B0h
.text:000034B0 ; COMDAT (pick any)
.text:000034B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000034B0
.text:000034B0 ; =============== S U B R O U T I N E =======================================
.text:000034B0
.text:000034B0 ; Attributes: bp-based frame
.text:000034B0
.text:000034B0 ; public: struct ICryptoProperties * * __thiscall CMyComPtr<struct ICryptoProperties>::operator&(void)
.text:000034B0                 public ??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ
.text:000034B0 ??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ proc near
.text:000034B0                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+2F1p
.text:000034B0
.text:000034B0 var_4           = dword ptr -4
.text:000034B0
.text:000034B0                 push    ebp
.text:000034B1                 mov     ebp, esp
.text:000034B3                 push    ecx
.text:000034B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034BB                 mov     [ebp+var_4], ecx
.text:000034BE                 mov     eax, [ebp+var_4]
.text:000034C1                 mov     esp, ebp
.text:000034C3                 pop     ebp
.text:000034C4                 retn
.text:000034C4 ??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ endp
.text:000034C4
.text:000034C4 ; ---------------------------------------------------------------------------
.text:000034C5                 align 4
.text:000034C5 _text           ends
.text:000034C5
.text:000034C8 ; ===========================================================================
.text:000034C8
.text:000034C8 ; Segment type: Pure code
.text:000034C8 ; Segment permissions: Read/Execute
.text:000034C8 _text           segment para public 'CODE' use32
.text:000034C8                 assume cs:_text
.text:000034C8                 ;org 34C8h
.text:000034C8 ; COMDAT (pick any)
.text:000034C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000034C8
.text:000034C8 ; =============== S U B R O U T I N E =======================================
.text:000034C8
.text:000034C8 ; Attributes: bp-based frame
.text:000034C8
.text:000034C8 ; public: struct ICryptoProperties * __thiscall CMyComPtr<struct ICryptoProperties>::operator->(void)const
.text:000034C8                 public ??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ
.text:000034C8 ??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ proc near
.text:000034C8                                         ; CODE XREF: CFilterCoder::SetKey(uchar const *,uint)+12p
.text:000034C8                                         ; CFilterCoder::SetInitVector(uchar const *,uint)+12p
.text:000034C8
.text:000034C8 var_4           = dword ptr -4
.text:000034C8
.text:000034C8                 push    ebp
.text:000034C9                 mov     ebp, esp
.text:000034CB                 push    ecx
.text:000034CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034D3                 mov     [ebp+var_4], ecx
.text:000034D6                 mov     eax, [ebp+var_4]
.text:000034D9                 mov     eax, [eax]
.text:000034DB                 mov     esp, ebp
.text:000034DD                 pop     ebp
.text:000034DE                 retn
.text:000034DE ??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ endp
.text:000034DE
.text:000034DE ; ---------------------------------------------------------------------------
.text:000034DF                 align 10h
.text:000034DF _text           ends
.text:000034DF
.text:000034E0 ; ===========================================================================
.text:000034E0
.text:000034E0 ; Segment type: Pure code
.text:000034E0 ; Segment permissions: Read/Execute
.text:000034E0 _text           segment para public 'CODE' use32
.text:000034E0                 assume cs:_text
.text:000034E0                 ;org 34E0h
.text:000034E0 ; COMDAT (pick any)
.text:000034E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000034E0
.text:000034E0 ; =============== S U B R O U T I N E =======================================
.text:000034E0
.text:000034E0 ; Attributes: bp-based frame
.text:000034E0
.text:000034E0 ; public: bool __thiscall CMyComPtr<struct ICryptoProperties>::operator!(void)const
.text:000034E0                 public ??7?$CMyComPtr@UICryptoProperties@@@@QBE_NXZ
.text:000034E0 ??7?$CMyComPtr@UICryptoProperties@@@@QBE_NXZ proc near
.text:000034E0                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+2CBp
.text:000034E0
.text:000034E0 var_4           = dword ptr -4
.text:000034E0
.text:000034E0                 push    ebp
.text:000034E1                 mov     ebp, esp
.text:000034E3                 push    ecx
.text:000034E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034EB                 mov     [ebp+var_4], ecx
.text:000034EE                 mov     eax, [ebp+var_4]
.text:000034F1                 xor     ecx, ecx
.text:000034F3                 cmp     dword ptr [eax], 0
.text:000034F6                 setz    cl
.text:000034F9                 mov     al, cl
.text:000034FB                 mov     esp, ebp
.text:000034FD                 pop     ebp
.text:000034FE                 retn
.text:000034FE ??7?$CMyComPtr@UICryptoProperties@@@@QBE_NXZ endp
.text:000034FE
.text:000034FE ; ---------------------------------------------------------------------------
.text:000034FF                 align 10h
.text:000034FF _text           ends
.text:000034FF
.text:00003500 ; ===========================================================================
.text:00003500
.text:00003500 ; Segment type: Pure code
.text:00003500 ; Segment permissions: Read/Execute
.text:00003500 _text           segment para public 'CODE' use32
.text:00003500                 assume cs:_text
.text:00003500                 ;org 3500h
.text:00003500 ; COMDAT (pick any)
.text:00003500                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003500
.text:00003500 ; =============== S U B R O U T I N E =======================================
.text:00003500
.text:00003500 ; Attributes: bp-based frame
.text:00003500
.text:00003500 ; public: __thiscall CMyComPtr<struct ICompressSetCoderProperties>::CMyComPtr<struct ICompressSetCoderProperties>(void)
.text:00003500                 public ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
.text:00003500 ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ proc near
.text:00003500                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+219p
.text:00003500
.text:00003500 var_4           = dword ptr -4
.text:00003500
.text:00003500                 push    ebp
.text:00003501                 mov     ebp, esp
.text:00003503                 push    ecx
.text:00003504                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000350B                 mov     [ebp+var_4], ecx
.text:0000350E                 mov     eax, [ebp+var_4]
.text:00003511                 mov     dword ptr [eax], 0
.text:00003517                 mov     eax, [ebp+var_4]
.text:0000351A                 mov     esp, ebp
.text:0000351C                 pop     ebp
.text:0000351D                 retn
.text:0000351D ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ endp
.text:0000351D
.text:0000351D ; ---------------------------------------------------------------------------
.text:0000351E                 align 10h
.text:0000351E _text           ends
.text:0000351E
.text:00003520 ; ===========================================================================
.text:00003520
.text:00003520 ; Segment type: Pure code
.text:00003520 ; Segment permissions: Read/Execute
.text:00003520 _text           segment para public 'CODE' use32
.text:00003520                 assume cs:_text
.text:00003520                 ;org 3520h
.text:00003520 ; COMDAT (pick any)
.text:00003520                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003520
.text:00003520 ; =============== S U B R O U T I N E =======================================
.text:00003520
.text:00003520 ; Attributes: bp-based frame
.text:00003520
.text:00003520 ; public: __thiscall CMyComPtr<struct ICompressSetCoderProperties>::~CMyComPtr<struct ICompressSetCoderProperties>(void)
.text:00003520                 public ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
.text:00003520 ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ proc near
.text:00003520                                         ; CODE XREF: CFilterCoder::~CFilterCoder(void)+11Ap
.text:00003520                                         ; __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$5+9j ...
.text:00003520
.text:00003520 var_4           = dword ptr -4
.text:00003520
.text:00003520                 push    ebp
.text:00003521                 mov     ebp, esp
.text:00003523                 push    ecx
.text:00003524                 push    esi
.text:00003525                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000352C                 mov     [ebp+var_4], ecx
.text:0000352F                 mov     eax, [ebp+var_4]
.text:00003532                 cmp     dword ptr [eax], 0
.text:00003535                 jz      short loc_3552
.text:00003537                 mov     ecx, [ebp+var_4]
.text:0000353A                 mov     edx, [ecx]
.text:0000353C                 mov     eax, [ebp+var_4]
.text:0000353F                 mov     ecx, [eax]
.text:00003541                 mov     edx, [edx]
.text:00003543                 mov     esi, esp
.text:00003545                 push    ecx
.text:00003546                 mov     eax, [edx+8]
.text:00003549                 call    eax
.text:0000354B                 cmp     esi, esp
.text:0000354D                 call    __RTC_CheckEsp
.text:00003552
.text:00003552 loc_3552:                               ; CODE XREF: CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)+15j
.text:00003552                 pop     esi
.text:00003553                 add     esp, 4
.text:00003556                 cmp     ebp, esp
.text:00003558                 call    __RTC_CheckEsp
.text:0000355D                 mov     esp, ebp
.text:0000355F                 pop     ebp
.text:00003560                 retn
.text:00003560 ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ endp
.text:00003560
.text:00003560 ; ---------------------------------------------------------------------------
.text:00003561                 align 4
.text:00003561 _text           ends
.text:00003561
.text:00003564 ; ===========================================================================
.text:00003564
.text:00003564 ; Segment type: Pure code
.text:00003564 ; Segment permissions: Read/Execute
.text:00003564 _text           segment para public 'CODE' use32
.text:00003564                 assume cs:_text
.text:00003564                 ;org 3564h
.text:00003564 ; COMDAT (pick any)
.text:00003564                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003564
.text:00003564 ; =============== S U B R O U T I N E =======================================
.text:00003564
.text:00003564 ; Attributes: bp-based frame
.text:00003564
.text:00003564 ; public: struct ICompressSetCoderProperties * * __thiscall CMyComPtr<struct ICompressSetCoderProperties>::operator&(void)
.text:00003564                 public ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ
.text:00003564 ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ proc near
.text:00003564                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+38Dp
.text:00003564
.text:00003564 var_4           = dword ptr -4
.text:00003564
.text:00003564                 push    ebp
.text:00003565                 mov     ebp, esp
.text:00003567                 push    ecx
.text:00003568                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000356F                 mov     [ebp+var_4], ecx
.text:00003572                 mov     eax, [ebp+var_4]
.text:00003575                 mov     esp, ebp
.text:00003577                 pop     ebp
.text:00003578                 retn
.text:00003578 ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ endp
.text:00003578
.text:00003578 ; ---------------------------------------------------------------------------
.text:00003579                 align 4
.text:00003579 _text           ends
.text:00003579
.text:0000357C ; ===========================================================================
.text:0000357C
.text:0000357C ; Segment type: Pure code
.text:0000357C ; Segment permissions: Read/Execute
.text:0000357C _text           segment para public 'CODE' use32
.text:0000357C                 assume cs:_text
.text:0000357C                 ;org 357Ch
.text:0000357C ; COMDAT (pick any)
.text:0000357C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000357C
.text:0000357C ; =============== S U B R O U T I N E =======================================
.text:0000357C
.text:0000357C ; Attributes: bp-based frame
.text:0000357C
.text:0000357C ; public: struct ICompressSetCoderProperties * __thiscall CMyComPtr<struct ICompressSetCoderProperties>::operator->(void)const
.text:0000357C                 public ??C?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ
.text:0000357C ??C?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ proc near
.text:0000357C                                         ; CODE XREF: CFilterCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+12p
.text:0000357C
.text:0000357C var_4           = dword ptr -4
.text:0000357C
.text:0000357C                 push    ebp
.text:0000357D                 mov     ebp, esp
.text:0000357F                 push    ecx
.text:00003580                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003587                 mov     [ebp+var_4], ecx
.text:0000358A                 mov     eax, [ebp+var_4]
.text:0000358D                 mov     eax, [eax]
.text:0000358F                 mov     esp, ebp
.text:00003591                 pop     ebp
.text:00003592                 retn
.text:00003592 ??C?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ endp
.text:00003592
.text:00003592 ; ---------------------------------------------------------------------------
.text:00003593                 align 4
.text:00003593 _text           ends
.text:00003593
.text:00003594 ; ===========================================================================
.text:00003594
.text:00003594 ; Segment type: Pure code
.text:00003594 ; Segment permissions: Read/Execute
.text:00003594 _text           segment para public 'CODE' use32
.text:00003594                 assume cs:_text
.text:00003594                 ;org 3594h
.text:00003594 ; COMDAT (pick any)
.text:00003594                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003594
.text:00003594 ; =============== S U B R O U T I N E =======================================
.text:00003594
.text:00003594 ; Attributes: bp-based frame
.text:00003594
.text:00003594 ; public: bool __thiscall CMyComPtr<struct ICompressSetCoderProperties>::operator!(void)const
.text:00003594                 public ??7?$CMyComPtr@UICompressSetCoderProperties@@@@QBE_NXZ
.text:00003594 ??7?$CMyComPtr@UICompressSetCoderProperties@@@@QBE_NXZ proc near
.text:00003594                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+367p
.text:00003594
.text:00003594 var_4           = dword ptr -4
.text:00003594
.text:00003594                 push    ebp
.text:00003595                 mov     ebp, esp
.text:00003597                 push    ecx
.text:00003598                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000359F                 mov     [ebp+var_4], ecx
.text:000035A2                 mov     eax, [ebp+var_4]
.text:000035A5                 xor     ecx, ecx
.text:000035A7                 cmp     dword ptr [eax], 0
.text:000035AA                 setz    cl
.text:000035AD                 mov     al, cl
.text:000035AF                 mov     esp, ebp
.text:000035B1                 pop     ebp
.text:000035B2                 retn
.text:000035B2 ??7?$CMyComPtr@UICompressSetCoderProperties@@@@QBE_NXZ endp
.text:000035B2
.text:000035B2 ; ---------------------------------------------------------------------------
.text:000035B3                 align 4
.text:000035B3 _text           ends
.text:000035B3
.text:000035B4 ; ===========================================================================
.text:000035B4
.text:000035B4 ; Segment type: Pure code
.text:000035B4 ; Segment permissions: Read/Execute
.text:000035B4 _text           segment para public 'CODE' use32
.text:000035B4                 assume cs:_text
.text:000035B4                 ;org 35B4h
.text:000035B4 ; COMDAT (pick any)
.text:000035B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035B4
.text:000035B4 ; =============== S U B R O U T I N E =======================================
.text:000035B4
.text:000035B4 ; Attributes: bp-based frame
.text:000035B4
.text:000035B4 ; public: __thiscall CMyComPtr<struct ICompressWriteCoderProperties>::CMyComPtr<struct ICompressWriteCoderProperties>(void)
.text:000035B4                 public ??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ
.text:000035B4 ??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ proc near
.text:000035B4                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+22Bp
.text:000035B4
.text:000035B4 var_4           = dword ptr -4
.text:000035B4
.text:000035B4                 push    ebp
.text:000035B5                 mov     ebp, esp
.text:000035B7                 push    ecx
.text:000035B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035BF                 mov     [ebp+var_4], ecx
.text:000035C2                 mov     eax, [ebp+var_4]
.text:000035C5                 mov     dword ptr [eax], 0
.text:000035CB                 mov     eax, [ebp+var_4]
.text:000035CE                 mov     esp, ebp
.text:000035D0                 pop     ebp
.text:000035D1                 retn
.text:000035D1 ??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ endp
.text:000035D1
.text:000035D1 ; ---------------------------------------------------------------------------
.text:000035D2                 align 4
.text:000035D2 _text           ends
.text:000035D2
.text:000035D4 ; ===========================================================================
.text:000035D4
.text:000035D4 ; Segment type: Pure code
.text:000035D4 ; Segment permissions: Read/Execute
.text:000035D4 _text           segment para public 'CODE' use32
.text:000035D4                 assume cs:_text
.text:000035D4                 ;org 35D4h
.text:000035D4 ; COMDAT (pick any)
.text:000035D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035D4
.text:000035D4 ; =============== S U B R O U T I N E =======================================
.text:000035D4
.text:000035D4 ; Attributes: bp-based frame
.text:000035D4
.text:000035D4 ; public: __thiscall CMyComPtr<struct ICompressWriteCoderProperties>::~CMyComPtr<struct ICompressWriteCoderProperties>(void)
.text:000035D4                 public ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ
.text:000035D4 ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ proc near
.text:000035D4                                         ; CODE XREF: CFilterCoder::~CFilterCoder(void)+108p
.text:000035D4                                         ; __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$6+9j ...
.text:000035D4
.text:000035D4 var_4           = dword ptr -4
.text:000035D4
.text:000035D4                 push    ebp
.text:000035D5                 mov     ebp, esp
.text:000035D7                 push    ecx
.text:000035D8                 push    esi
.text:000035D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035E0                 mov     [ebp+var_4], ecx
.text:000035E3                 mov     eax, [ebp+var_4]
.text:000035E6                 cmp     dword ptr [eax], 0
.text:000035E9                 jz      short loc_3606
.text:000035EB                 mov     ecx, [ebp+var_4]
.text:000035EE                 mov     edx, [ecx]
.text:000035F0                 mov     eax, [ebp+var_4]
.text:000035F3                 mov     ecx, [eax]
.text:000035F5                 mov     edx, [edx]
.text:000035F7                 mov     esi, esp
.text:000035F9                 push    ecx
.text:000035FA                 mov     eax, [edx+8]
.text:000035FD                 call    eax
.text:000035FF                 cmp     esi, esp
.text:00003601                 call    __RTC_CheckEsp
.text:00003606
.text:00003606 loc_3606:                               ; CODE XREF: CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>(void)+15j
.text:00003606                 pop     esi
.text:00003607                 add     esp, 4
.text:0000360A                 cmp     ebp, esp
.text:0000360C                 call    __RTC_CheckEsp
.text:00003611                 mov     esp, ebp
.text:00003613                 pop     ebp
.text:00003614                 retn
.text:00003614 ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ endp
.text:00003614
.text:00003614 ; ---------------------------------------------------------------------------
.text:00003615                 align 4
.text:00003615 _text           ends
.text:00003615
.text:00003618 ; ===========================================================================
.text:00003618
.text:00003618 ; Segment type: Pure code
.text:00003618 ; Segment permissions: Read/Execute
.text:00003618 _text           segment para public 'CODE' use32
.text:00003618                 assume cs:_text
.text:00003618                 ;org 3618h
.text:00003618 ; COMDAT (pick any)
.text:00003618                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003618
.text:00003618 ; =============== S U B R O U T I N E =======================================
.text:00003618
.text:00003618 ; Attributes: bp-based frame
.text:00003618
.text:00003618 ; public: struct ICompressWriteCoderProperties * * __thiscall CMyComPtr<struct ICompressWriteCoderProperties>::operator&(void)
.text:00003618                 public ??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ
.text:00003618 ??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ proc near
.text:00003618                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+429p
.text:00003618
.text:00003618 var_4           = dword ptr -4
.text:00003618
.text:00003618                 push    ebp
.text:00003619                 mov     ebp, esp
.text:0000361B                 push    ecx
.text:0000361C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003623                 mov     [ebp+var_4], ecx
.text:00003626                 mov     eax, [ebp+var_4]
.text:00003629                 mov     esp, ebp
.text:0000362B                 pop     ebp
.text:0000362C                 retn
.text:0000362C ??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ endp
.text:0000362C
.text:0000362C ; ---------------------------------------------------------------------------
.text:0000362D                 align 10h
.text:0000362D _text           ends
.text:0000362D
.text:00003630 ; ===========================================================================
.text:00003630
.text:00003630 ; Segment type: Pure code
.text:00003630 ; Segment permissions: Read/Execute
.text:00003630 _text           segment para public 'CODE' use32
.text:00003630                 assume cs:_text
.text:00003630                 ;org 3630h
.text:00003630 ; COMDAT (pick any)
.text:00003630                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003630
.text:00003630 ; =============== S U B R O U T I N E =======================================
.text:00003630
.text:00003630 ; Attributes: bp-based frame
.text:00003630
.text:00003630 ; public: struct ICompressWriteCoderProperties * __thiscall CMyComPtr<struct ICompressWriteCoderProperties>::operator->(void)const
.text:00003630                 public ??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ
.text:00003630 ??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ proc near
.text:00003630                                         ; CODE XREF: CFilterCoder::WriteCoderProperties(ISequentialOutStream *)+12p
.text:00003630
.text:00003630 var_4           = dword ptr -4
.text:00003630
.text:00003630                 push    ebp
.text:00003631                 mov     ebp, esp
.text:00003633                 push    ecx
.text:00003634                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000363B                 mov     [ebp+var_4], ecx
.text:0000363E                 mov     eax, [ebp+var_4]
.text:00003641                 mov     eax, [eax]
.text:00003643                 mov     esp, ebp
.text:00003645                 pop     ebp
.text:00003646                 retn
.text:00003646 ??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ endp
.text:00003646
.text:00003646 ; ---------------------------------------------------------------------------
.text:00003647                 align 4
.text:00003647 _text           ends
.text:00003647
.text:00003648 ; ===========================================================================
.text:00003648
.text:00003648 ; Segment type: Pure code
.text:00003648 ; Segment permissions: Read/Execute
.text:00003648 _text           segment para public 'CODE' use32
.text:00003648                 assume cs:_text
.text:00003648                 ;org 3648h
.text:00003648 ; COMDAT (pick any)
.text:00003648                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003648
.text:00003648 ; =============== S U B R O U T I N E =======================================
.text:00003648
.text:00003648 ; Attributes: bp-based frame
.text:00003648
.text:00003648 ; public: bool __thiscall CMyComPtr<struct ICompressWriteCoderProperties>::operator!(void)const
.text:00003648                 public ??7?$CMyComPtr@UICompressWriteCoderProperties@@@@QBE_NXZ
.text:00003648 ??7?$CMyComPtr@UICompressWriteCoderProperties@@@@QBE_NXZ proc near
.text:00003648                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+403p
.text:00003648
.text:00003648 var_4           = dword ptr -4
.text:00003648
.text:00003648                 push    ebp
.text:00003649                 mov     ebp, esp
.text:0000364B                 push    ecx
.text:0000364C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003653                 mov     [ebp+var_4], ecx
.text:00003656                 mov     eax, [ebp+var_4]
.text:00003659                 xor     ecx, ecx
.text:0000365B                 cmp     dword ptr [eax], 0
.text:0000365E                 setz    cl
.text:00003661                 mov     al, cl
.text:00003663                 mov     esp, ebp
.text:00003665                 pop     ebp
.text:00003666                 retn
.text:00003666 ??7?$CMyComPtr@UICompressWriteCoderProperties@@@@QBE_NXZ endp
.text:00003666
.text:00003666 ; ---------------------------------------------------------------------------
.text:00003667                 align 4
.text:00003667 _text           ends
.text:00003667
.text:00003668 ; ===========================================================================
.text:00003668
.text:00003668 ; Segment type: Pure code
.text:00003668 ; Segment permissions: Read/Execute
.text:00003668 _text           segment para public 'CODE' use32
.text:00003668                 assume cs:_text
.text:00003668                 ;org 3668h
.text:00003668 ; COMDAT (pick any)
.text:00003668                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003668
.text:00003668 ; =============== S U B R O U T I N E =======================================
.text:00003668
.text:00003668 ; Attributes: bp-based frame
.text:00003668
.text:00003668 ; public: __thiscall CMyComPtr<struct ICryptoResetInitVector>::CMyComPtr<struct ICryptoResetInitVector>(void)
.text:00003668                 public ??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ
.text:00003668 ??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ proc near
.text:00003668                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+23Dp
.text:00003668
.text:00003668 var_4           = dword ptr -4
.text:00003668
.text:00003668                 push    ebp
.text:00003669                 mov     ebp, esp
.text:0000366B                 push    ecx
.text:0000366C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003673                 mov     [ebp+var_4], ecx
.text:00003676                 mov     eax, [ebp+var_4]
.text:00003679                 mov     dword ptr [eax], 0
.text:0000367F                 mov     eax, [ebp+var_4]
.text:00003682                 mov     esp, ebp
.text:00003684                 pop     ebp
.text:00003685                 retn
.text:00003685 ??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ endp
.text:00003685
.text:00003685 ; ---------------------------------------------------------------------------
.text:00003686                 align 4
.text:00003686 _text           ends
.text:00003686
.text:00003688 ; ===========================================================================
.text:00003688
.text:00003688 ; Segment type: Pure code
.text:00003688 ; Segment permissions: Read/Execute
.text:00003688 _text           segment para public 'CODE' use32
.text:00003688                 assume cs:_text
.text:00003688                 ;org 3688h
.text:00003688 ; COMDAT (pick any)
.text:00003688                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003688
.text:00003688 ; =============== S U B R O U T I N E =======================================
.text:00003688
.text:00003688 ; Attributes: bp-based frame
.text:00003688
.text:00003688 ; public: __thiscall CMyComPtr<struct ICryptoResetInitVector>::~CMyComPtr<struct ICryptoResetInitVector>(void)
.text:00003688                 public ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ
.text:00003688 ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ proc near
.text:00003688                                         ; CODE XREF: CFilterCoder::~CFilterCoder(void)+F6p
.text:00003688                                         ; __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$7+9j ...
.text:00003688
.text:00003688 var_4           = dword ptr -4
.text:00003688
.text:00003688                 push    ebp
.text:00003689                 mov     ebp, esp
.text:0000368B                 push    ecx
.text:0000368C                 push    esi
.text:0000368D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003694                 mov     [ebp+var_4], ecx
.text:00003697                 mov     eax, [ebp+var_4]
.text:0000369A                 cmp     dword ptr [eax], 0
.text:0000369D                 jz      short loc_36BA
.text:0000369F                 mov     ecx, [ebp+var_4]
.text:000036A2                 mov     edx, [ecx]
.text:000036A4                 mov     eax, [ebp+var_4]
.text:000036A7                 mov     ecx, [eax]
.text:000036A9                 mov     edx, [edx]
.text:000036AB                 mov     esi, esp
.text:000036AD                 push    ecx
.text:000036AE                 mov     eax, [edx+8]
.text:000036B1                 call    eax
.text:000036B3                 cmp     esi, esp
.text:000036B5                 call    __RTC_CheckEsp
.text:000036BA
.text:000036BA loc_36BA:                               ; CODE XREF: CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>(void)+15j
.text:000036BA                 pop     esi
.text:000036BB                 add     esp, 4
.text:000036BE                 cmp     ebp, esp
.text:000036C0                 call    __RTC_CheckEsp
.text:000036C5                 mov     esp, ebp
.text:000036C7                 pop     ebp
.text:000036C8                 retn
.text:000036C8 ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ endp
.text:000036C8
.text:000036C8 ; ---------------------------------------------------------------------------
.text:000036C9                 align 4
.text:000036C9 _text           ends
.text:000036C9
.text:000036CC ; ===========================================================================
.text:000036CC
.text:000036CC ; Segment type: Pure code
.text:000036CC ; Segment permissions: Read/Execute
.text:000036CC _text           segment para public 'CODE' use32
.text:000036CC                 assume cs:_text
.text:000036CC                 ;org 36CCh
.text:000036CC ; COMDAT (pick any)
.text:000036CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000036CC
.text:000036CC ; =============== S U B R O U T I N E =======================================
.text:000036CC
.text:000036CC ; Attributes: bp-based frame
.text:000036CC
.text:000036CC ; public: struct ICryptoResetInitVector * * __thiscall CMyComPtr<struct ICryptoResetInitVector>::operator&(void)
.text:000036CC                 public ??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ
.text:000036CC ??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ proc near
.text:000036CC                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+4C5p
.text:000036CC
.text:000036CC var_4           = dword ptr -4
.text:000036CC
.text:000036CC                 push    ebp
.text:000036CD                 mov     ebp, esp
.text:000036CF                 push    ecx
.text:000036D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036D7                 mov     [ebp+var_4], ecx
.text:000036DA                 mov     eax, [ebp+var_4]
.text:000036DD                 mov     esp, ebp
.text:000036DF                 pop     ebp
.text:000036E0                 retn
.text:000036E0 ??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ endp
.text:000036E0
.text:000036E0 ; ---------------------------------------------------------------------------
.text:000036E1                 align 4
.text:000036E1 _text           ends
.text:000036E1
.text:000036E4 ; ===========================================================================
.text:000036E4
.text:000036E4 ; Segment type: Pure code
.text:000036E4 ; Segment permissions: Read/Execute
.text:000036E4 _text           segment para public 'CODE' use32
.text:000036E4                 assume cs:_text
.text:000036E4                 ;org 36E4h
.text:000036E4 ; COMDAT (pick any)
.text:000036E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000036E4
.text:000036E4 ; =============== S U B R O U T I N E =======================================
.text:000036E4
.text:000036E4 ; Attributes: bp-based frame
.text:000036E4
.text:000036E4 ; public: struct ICryptoResetInitVector * __thiscall CMyComPtr<struct ICryptoResetInitVector>::operator->(void)const
.text:000036E4                 public ??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ
.text:000036E4 ??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ proc near
.text:000036E4                                         ; CODE XREF: CFilterCoder::ResetInitVector(void)+12p
.text:000036E4
.text:000036E4 var_4           = dword ptr -4
.text:000036E4
.text:000036E4                 push    ebp
.text:000036E5                 mov     ebp, esp
.text:000036E7                 push    ecx
.text:000036E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036EF                 mov     [ebp+var_4], ecx
.text:000036F2                 mov     eax, [ebp+var_4]
.text:000036F5                 mov     eax, [eax]
.text:000036F7                 mov     esp, ebp
.text:000036F9                 pop     ebp
.text:000036FA                 retn
.text:000036FA ??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ endp
.text:000036FA
.text:000036FA ; ---------------------------------------------------------------------------
.text:000036FB                 align 4
.text:000036FB _text           ends
.text:000036FB
.text:000036FC ; ===========================================================================
.text:000036FC
.text:000036FC ; Segment type: Pure code
.text:000036FC ; Segment permissions: Read/Execute
.text:000036FC _text           segment para public 'CODE' use32
.text:000036FC                 assume cs:_text
.text:000036FC                 ;org 36FCh
.text:000036FC ; COMDAT (pick any)
.text:000036FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000036FC
.text:000036FC ; =============== S U B R O U T I N E =======================================
.text:000036FC
.text:000036FC ; Attributes: bp-based frame
.text:000036FC
.text:000036FC ; public: bool __thiscall CMyComPtr<struct ICryptoResetInitVector>::operator!(void)const
.text:000036FC                 public ??7?$CMyComPtr@UICryptoResetInitVector@@@@QBE_NXZ
.text:000036FC ??7?$CMyComPtr@UICryptoResetInitVector@@@@QBE_NXZ proc near
.text:000036FC                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+49Fp
.text:000036FC
.text:000036FC var_4           = dword ptr -4
.text:000036FC
.text:000036FC                 push    ebp
.text:000036FD                 mov     ebp, esp
.text:000036FF                 push    ecx
.text:00003700                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003707                 mov     [ebp+var_4], ecx
.text:0000370A                 mov     eax, [ebp+var_4]
.text:0000370D                 xor     ecx, ecx
.text:0000370F                 cmp     dword ptr [eax], 0
.text:00003712                 setz    cl
.text:00003715                 mov     al, cl
.text:00003717                 mov     esp, ebp
.text:00003719                 pop     ebp
.text:0000371A                 retn
.text:0000371A ??7?$CMyComPtr@UICryptoResetInitVector@@@@QBE_NXZ endp
.text:0000371A
.text:0000371A ; ---------------------------------------------------------------------------
.text:0000371B                 align 4
.text:0000371B _text           ends
.text:0000371B
.text:0000371C ; ===========================================================================
.text:0000371C
.text:0000371C ; Segment type: Pure code
.text:0000371C ; Segment permissions: Read/Execute
.text:0000371C _text           segment para public 'CODE' use32
.text:0000371C                 assume cs:_text
.text:0000371C                 ;org 371Ch
.text:0000371C ; COMDAT (pick any)
.text:0000371C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000371C
.text:0000371C ; =============== S U B R O U T I N E =======================================
.text:0000371C
.text:0000371C ; Attributes: bp-based frame
.text:0000371C
.text:0000371C ; public: __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::CMyComPtr<struct ICompressSetDecoderProperties2>(void)
.text:0000371C                 public ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
.text:0000371C ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ proc near
.text:0000371C                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+24Fp
.text:0000371C
.text:0000371C var_4           = dword ptr -4
.text:0000371C
.text:0000371C                 push    ebp
.text:0000371D                 mov     ebp, esp
.text:0000371F                 push    ecx
.text:00003720                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003727                 mov     [ebp+var_4], ecx
.text:0000372A                 mov     eax, [ebp+var_4]
.text:0000372D                 mov     dword ptr [eax], 0
.text:00003733                 mov     eax, [ebp+var_4]
.text:00003736                 mov     esp, ebp
.text:00003738                 pop     ebp
.text:00003739                 retn
.text:00003739 ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ endp
.text:00003739
.text:00003739 ; ---------------------------------------------------------------------------
.text:0000373A                 align 4
.text:0000373A _text           ends
.text:0000373A
.text:0000373C ; ===========================================================================
.text:0000373C
.text:0000373C ; Segment type: Pure code
.text:0000373C ; Segment permissions: Read/Execute
.text:0000373C _text           segment para public 'CODE' use32
.text:0000373C                 assume cs:_text
.text:0000373C                 ;org 373Ch
.text:0000373C ; COMDAT (pick any)
.text:0000373C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000373C
.text:0000373C ; =============== S U B R O U T I N E =======================================
.text:0000373C
.text:0000373C ; Attributes: bp-based frame
.text:0000373C
.text:0000373C ; public: __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::~CMyComPtr<struct ICompressSetDecoderProperties2>(void)
.text:0000373C                 public ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
.text:0000373C ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ proc near
.text:0000373C                                         ; CODE XREF: CFilterCoder::~CFilterCoder(void)+E4p
.text:0000373C                                         ; __unwindfunclet$??0CFilterCoder@@QAE@_N@Z$8+9j ...
.text:0000373C
.text:0000373C var_4           = dword ptr -4
.text:0000373C
.text:0000373C                 push    ebp
.text:0000373D                 mov     ebp, esp
.text:0000373F                 push    ecx
.text:00003740                 push    esi
.text:00003741                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003748                 mov     [ebp+var_4], ecx
.text:0000374B                 mov     eax, [ebp+var_4]
.text:0000374E                 cmp     dword ptr [eax], 0
.text:00003751                 jz      short loc_376E
.text:00003753                 mov     ecx, [ebp+var_4]
.text:00003756                 mov     edx, [ecx]
.text:00003758                 mov     eax, [ebp+var_4]
.text:0000375B                 mov     ecx, [eax]
.text:0000375D                 mov     edx, [edx]
.text:0000375F                 mov     esi, esp
.text:00003761                 push    ecx
.text:00003762                 mov     eax, [edx+8]
.text:00003765                 call    eax
.text:00003767                 cmp     esi, esp
.text:00003769                 call    __RTC_CheckEsp
.text:0000376E
.text:0000376E loc_376E:                               ; CODE XREF: CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)+15j
.text:0000376E                 pop     esi
.text:0000376F                 add     esp, 4
.text:00003772                 cmp     ebp, esp
.text:00003774                 call    __RTC_CheckEsp
.text:00003779                 mov     esp, ebp
.text:0000377B                 pop     ebp
.text:0000377C                 retn
.text:0000377C ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ endp
.text:0000377C
.text:0000377C ; ---------------------------------------------------------------------------
.text:0000377D                 align 10h
.text:0000377D _text           ends
.text:0000377D
.text:00003780 ; ===========================================================================
.text:00003780
.text:00003780 ; Segment type: Pure code
.text:00003780 ; Segment permissions: Read/Execute
.text:00003780 _text           segment para public 'CODE' use32
.text:00003780                 assume cs:_text
.text:00003780                 ;org 3780h
.text:00003780 ; COMDAT (pick any)
.text:00003780                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003780
.text:00003780 ; =============== S U B R O U T I N E =======================================
.text:00003780
.text:00003780 ; Attributes: bp-based frame
.text:00003780
.text:00003780 ; public: struct ICompressSetDecoderProperties2 * * __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator&(void)
.text:00003780                 public ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ
.text:00003780 ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ proc near
.text:00003780                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+561p
.text:00003780
.text:00003780 var_4           = dword ptr -4
.text:00003780
.text:00003780                 push    ebp
.text:00003781                 mov     ebp, esp
.text:00003783                 push    ecx
.text:00003784                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000378B                 mov     [ebp+var_4], ecx
.text:0000378E                 mov     eax, [ebp+var_4]
.text:00003791                 mov     esp, ebp
.text:00003793                 pop     ebp
.text:00003794                 retn
.text:00003794 ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ endp
.text:00003794
.text:00003794 ; ---------------------------------------------------------------------------
.text:00003795                 align 4
.text:00003795 _text           ends
.text:00003795
.text:00003798 ; ===========================================================================
.text:00003798
.text:00003798 ; Segment type: Pure code
.text:00003798 ; Segment permissions: Read/Execute
.text:00003798 _text           segment para public 'CODE' use32
.text:00003798                 assume cs:_text
.text:00003798                 ;org 3798h
.text:00003798 ; COMDAT (pick any)
.text:00003798                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003798
.text:00003798 ; =============== S U B R O U T I N E =======================================
.text:00003798
.text:00003798 ; Attributes: bp-based frame
.text:00003798
.text:00003798 ; public: struct ICompressSetDecoderProperties2 * __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator->(void)const
.text:00003798                 public ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
.text:00003798 ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ proc near
.text:00003798                                         ; CODE XREF: CFilterCoder::SetDecoderProperties2(uchar const *,uint)+12p
.text:00003798
.text:00003798 var_4           = dword ptr -4
.text:00003798
.text:00003798                 push    ebp
.text:00003799                 mov     ebp, esp
.text:0000379B                 push    ecx
.text:0000379C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037A3                 mov     [ebp+var_4], ecx
.text:000037A6                 mov     eax, [ebp+var_4]
.text:000037A9                 mov     eax, [eax]
.text:000037AB                 mov     esp, ebp
.text:000037AD                 pop     ebp
.text:000037AE                 retn
.text:000037AE ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ endp
.text:000037AE
.text:000037AE ; ---------------------------------------------------------------------------
.text:000037AF                 align 10h
.text:000037AF _text           ends
.text:000037AF
.text:000037B0 ; ===========================================================================
.text:000037B0
.text:000037B0 ; Segment type: Pure code
.text:000037B0 ; Segment permissions: Read/Execute
.text:000037B0 _text           segment para public 'CODE' use32
.text:000037B0                 assume cs:_text
.text:000037B0                 ;org 37B0h
.text:000037B0 ; COMDAT (pick any)
.text:000037B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000037B0
.text:000037B0 ; =============== S U B R O U T I N E =======================================
.text:000037B0
.text:000037B0 ; Attributes: bp-based frame
.text:000037B0
.text:000037B0 ; public: bool __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator!(void)const
.text:000037B0                 public ??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ
.text:000037B0 ??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ proc near
.text:000037B0                                         ; CODE XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+53Bp
.text:000037B0
.text:000037B0 var_4           = dword ptr -4
.text:000037B0
.text:000037B0                 push    ebp
.text:000037B1                 mov     ebp, esp
.text:000037B3                 push    ecx
.text:000037B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037BB                 mov     [ebp+var_4], ecx
.text:000037BE                 mov     eax, [ebp+var_4]
.text:000037C1                 xor     ecx, ecx
.text:000037C3                 cmp     dword ptr [eax], 0
.text:000037C6                 setz    cl
.text:000037C9                 mov     al, cl
.text:000037CB                 mov     esp, ebp
.text:000037CD                 pop     ebp
.text:000037CE                 retn
.text:000037CE ??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ endp
.text:000037CE
.text:000037CE ; ---------------------------------------------------------------------------
.text:000037CF                 align 10h
.text:000037CF _text           ends
.text:000037CF
.text:000037D0 ; ===========================================================================
.text:000037D0
.text:000037D0 ; Segment type: Pure code
.text:000037D0 ; Segment permissions: Read/Execute
.text:000037D0 _text           segment para public 'CODE' use32
.text:000037D0                 assume cs:_text
.text:000037D0                 ;org 37D0h
.text:000037D0 ; COMDAT (pick any)
.text:000037D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000037D0
.text:000037D0 ; =============== S U B R O U T I N E =======================================
.text:000037D0
.text:000037D0 ; Attributes: bp-based frame
.text:000037D0
.text:000037D0 ; public: __thiscall CMyComPtr<struct ICompressFilter>::CMyComPtr<struct ICompressFilter>(void)
.text:000037D0                 public ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ
.text:000037D0 ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ proc near
.text:000037D0                                         ; CODE XREF: CFilterCoder::CFilterCoder(bool)+261p
.text:000037D0
.text:000037D0 var_4           = dword ptr -4
.text:000037D0
.text:000037D0                 push    ebp
.text:000037D1                 mov     ebp, esp
.text:000037D3                 push    ecx
.text:000037D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037DB                 mov     [ebp+var_4], ecx
.text:000037DE                 mov     eax, [ebp+var_4]
.text:000037E1                 mov     dword ptr [eax], 0
.text:000037E7                 mov     eax, [ebp+var_4]
.text:000037EA                 mov     esp, ebp
.text:000037EC                 pop     ebp
.text:000037ED                 retn
.text:000037ED ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ endp
.text:000037ED
.text:000037ED ; ---------------------------------------------------------------------------
.text:000037EE                 align 10h
.text:000037EE _text           ends
.text:000037EE
.text:000037F0 ; ===========================================================================
.text:000037F0
.text:000037F0 ; Segment type: Pure code
.text:000037F0 ; Segment permissions: Read/Execute
.text:000037F0 _text           segment para public 'CODE' use32
.text:000037F0                 assume cs:_text
.text:000037F0                 ;org 37F0h
.text:000037F0 ; COMDAT (pick any)
.text:000037F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000037F0
.text:000037F0 ; =============== S U B R O U T I N E =======================================
.text:000037F0
.text:000037F0 ; Attributes: bp-based frame
.text:000037F0
.text:000037F0 ; public: __thiscall CMyComPtr<struct ICompressFilter>::~CMyComPtr<struct ICompressFilter>(void)
.text:000037F0                 public ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ
.text:000037F0 ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ proc near
.text:000037F0                                         ; CODE XREF: CFilterCoder::~CFilterCoder(void)+D2p
.text:000037F0
.text:000037F0 var_4           = dword ptr -4
.text:000037F0
.text:000037F0                 push    ebp
.text:000037F1                 mov     ebp, esp
.text:000037F3                 push    ecx
.text:000037F4                 push    esi
.text:000037F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037FC                 mov     [ebp+var_4], ecx
.text:000037FF                 mov     eax, [ebp+var_4]
.text:00003802                 cmp     dword ptr [eax], 0
.text:00003805                 jz      short loc_3822
.text:00003807                 mov     ecx, [ebp+var_4]
.text:0000380A                 mov     edx, [ecx]
.text:0000380C                 mov     eax, [ebp+var_4]
.text:0000380F                 mov     ecx, [eax]
.text:00003811                 mov     edx, [edx]
.text:00003813                 mov     esi, esp
.text:00003815                 push    ecx
.text:00003816                 mov     eax, [edx+8]
.text:00003819                 call    eax
.text:0000381B                 cmp     esi, esp
.text:0000381D                 call    __RTC_CheckEsp
.text:00003822
.text:00003822 loc_3822:                               ; CODE XREF: CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)+15j
.text:00003822                 pop     esi
.text:00003823                 add     esp, 4
.text:00003826                 cmp     ebp, esp
.text:00003828                 call    __RTC_CheckEsp
.text:0000382D                 mov     esp, ebp
.text:0000382F                 pop     ebp
.text:00003830                 retn
.text:00003830 ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ endp
.text:00003830
.text:00003830 ; ---------------------------------------------------------------------------
.text:00003831                 align 4
.text:00003831 _text           ends
.text:00003831
.text:00003834 ; ===========================================================================
.text:00003834
.text:00003834 ; Segment type: Pure code
.text:00003834 ; Segment permissions: Read/Execute
.text:00003834 _text           segment para public 'CODE' use32
.text:00003834                 assume cs:_text
.text:00003834                 ;org 3834h
.text:00003834 ; COMDAT (pick any)
.text:00003834                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003834
.text:00003834 ; =============== S U B R O U T I N E =======================================
.text:00003834
.text:00003834 ; Attributes: bp-based frame
.text:00003834
.text:00003834 ; public: struct ICompressFilter * __thiscall CMyComPtr<struct ICompressFilter>::operator->(void)const
.text:00003834                 public ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ
.text:00003834 ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ proc near
.text:00003834                                         ; CODE XREF: CFilterCoder::Init_and_Alloc(void)+28p
.text:00003834                                         ; CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+D9p ...
.text:00003834
.text:00003834 var_4           = dword ptr -4
.text:00003834
.text:00003834                 push    ebp
.text:00003835                 mov     ebp, esp
.text:00003837                 push    ecx
.text:00003838                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000383F                 mov     [ebp+var_4], ecx
.text:00003842                 mov     eax, [ebp+var_4]
.text:00003845                 mov     eax, [eax]
.text:00003847                 mov     esp, ebp
.text:00003849                 pop     ebp
.text:0000384A                 retn
.text:0000384A ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ endp
.text:0000384A
.text:0000384A ; ---------------------------------------------------------------------------
.text:0000384B                 align 4
.text:0000384B _text           ends
.text:0000384B
.text:0000384C ; ===========================================================================
.text:0000384C
.text:0000384C ; Segment type: Pure code
.text:0000384C ; Segment permissions: Read/Execute
.text:0000384C _text           segment para public 'CODE' use32
.text:0000384C                 assume cs:_text
.text:0000384C                 ;org 384Ch
.text:0000384C ; COMDAT (pick any)
.text:0000384C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000384C
.text:0000384C ; =============== S U B R O U T I N E =======================================
.text:0000384C
.text:0000384C ; Attributes: bp-based frame
.text:0000384C
.text:0000384C ; public: __thiscall CMyComPtr<struct IOutStreamFinish>::CMyComPtr<struct IOutStreamFinish>(void)
.text:0000384C                 public ??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ
.text:0000384C ??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ proc near
.text:0000384C                                         ; CODE XREF: CFilterCoder::OutStreamFinish(void)+17Ep
.text:0000384C
.text:0000384C var_4           = dword ptr -4
.text:0000384C
.text:0000384C                 push    ebp
.text:0000384D                 mov     ebp, esp
.text:0000384F                 push    ecx
.text:00003850                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003857                 mov     [ebp+var_4], ecx
.text:0000385A                 mov     eax, [ebp+var_4]
.text:0000385D                 mov     dword ptr [eax], 0
.text:00003863                 mov     eax, [ebp+var_4]
.text:00003866                 mov     esp, ebp
.text:00003868                 pop     ebp
.text:00003869                 retn
.text:00003869 ??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ endp
.text:00003869
.text:00003869 ; ---------------------------------------------------------------------------
.text:0000386A                 align 4
.text:0000386A _text           ends
.text:0000386A
.text:0000386C ; ===========================================================================
.text:0000386C
.text:0000386C ; Segment type: Pure code
.text:0000386C ; Segment permissions: Read/Execute
.text:0000386C _text           segment para public 'CODE' use32
.text:0000386C                 assume cs:_text
.text:0000386C                 ;org 386Ch
.text:0000386C ; COMDAT (pick any)
.text:0000386C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000386C
.text:0000386C ; =============== S U B R O U T I N E =======================================
.text:0000386C
.text:0000386C ; Attributes: bp-based frame
.text:0000386C
.text:0000386C ; public: __thiscall CMyComPtr<struct IOutStreamFinish>::~CMyComPtr<struct IOutStreamFinish>(void)
.text:0000386C                 public ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ
.text:0000386C ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ proc near
.text:0000386C                                         ; CODE XREF: CFilterCoder::OutStreamFinish(void)+1D0p
.text:0000386C                                         ; CFilterCoder::OutStreamFinish(void)+1E4p
.text:0000386C
.text:0000386C var_4           = dword ptr -4
.text:0000386C
.text:0000386C                 push    ebp
.text:0000386D                 mov     ebp, esp
.text:0000386F                 push    ecx
.text:00003870                 push    esi
.text:00003871                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003878                 mov     [ebp+var_4], ecx
.text:0000387B                 mov     eax, [ebp+var_4]
.text:0000387E                 cmp     dword ptr [eax], 0
.text:00003881                 jz      short loc_389E
.text:00003883                 mov     ecx, [ebp+var_4]
.text:00003886                 mov     edx, [ecx]
.text:00003888                 mov     eax, [ebp+var_4]
.text:0000388B                 mov     ecx, [eax]
.text:0000388D                 mov     edx, [edx]
.text:0000388F                 mov     esi, esp
.text:00003891                 push    ecx
.text:00003892                 mov     eax, [edx+8]
.text:00003895                 call    eax
.text:00003897                 cmp     esi, esp
.text:00003899                 call    __RTC_CheckEsp
.text:0000389E
.text:0000389E loc_389E:                               ; CODE XREF: CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>(void)+15j
.text:0000389E                 pop     esi
.text:0000389F                 add     esp, 4
.text:000038A2                 cmp     ebp, esp
.text:000038A4                 call    __RTC_CheckEsp
.text:000038A9                 mov     esp, ebp
.text:000038AB                 pop     ebp
.text:000038AC                 retn
.text:000038AC ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ endp
.text:000038AC
.text:000038AC ; ---------------------------------------------------------------------------
.text:000038AD                 align 10h
.text:000038AD _text           ends
.text:000038AD
.text:000038B0 ; ===========================================================================
.text:000038B0
.text:000038B0 ; Segment type: Pure code
.text:000038B0 ; Segment permissions: Read/Execute
.text:000038B0 _text           segment para public 'CODE' use32
.text:000038B0                 assume cs:_text
.text:000038B0                 ;org 38B0h
.text:000038B0 ; COMDAT (pick any)
.text:000038B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000038B0
.text:000038B0 ; =============== S U B R O U T I N E =======================================
.text:000038B0
.text:000038B0 ; Attributes: bp-based frame
.text:000038B0
.text:000038B0 ; public: __thiscall CMyComPtr<struct IOutStreamFinish>::operator struct IOutStreamFinish *(void)const
.text:000038B0                 public ??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ
.text:000038B0 ??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ proc near
.text:000038B0                                         ; CODE XREF: CFilterCoder::OutStreamFinish(void)+19Fp
.text:000038B0
.text:000038B0 var_4           = dword ptr -4
.text:000038B0
.text:000038B0                 push    ebp
.text:000038B1                 mov     ebp, esp
.text:000038B3                 push    ecx
.text:000038B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038BB                 mov     [ebp+var_4], ecx
.text:000038BE                 mov     eax, [ebp+var_4]
.text:000038C1                 mov     eax, [eax]
.text:000038C3                 mov     esp, ebp
.text:000038C5                 pop     ebp
.text:000038C6                 retn
.text:000038C6 ??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ endp
.text:000038C6
.text:000038C6 ; ---------------------------------------------------------------------------
.text:000038C7                 align 4
.text:000038C7 _text           ends
.text:000038C7
.text:000038C8 ; ===========================================================================
.text:000038C8
.text:000038C8 ; Segment type: Pure code
.text:000038C8 ; Segment permissions: Read/Execute
.text:000038C8 _text           segment para public 'CODE' use32
.text:000038C8                 assume cs:_text
.text:000038C8                 ;org 38C8h
.text:000038C8 ; COMDAT (pick any)
.text:000038C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000038C8
.text:000038C8 ; =============== S U B R O U T I N E =======================================
.text:000038C8
.text:000038C8 ; Attributes: bp-based frame
.text:000038C8
.text:000038C8 ; public: struct IOutStreamFinish * * __thiscall CMyComPtr<struct IOutStreamFinish>::operator&(void)
.text:000038C8                 public ??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ
.text:000038C8 ??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ proc near
.text:000038C8                                         ; CODE XREF: CFilterCoder::OutStreamFinish(void)+186p
.text:000038C8
.text:000038C8 var_4           = dword ptr -4
.text:000038C8
.text:000038C8                 push    ebp
.text:000038C9                 mov     ebp, esp
.text:000038CB                 push    ecx
.text:000038CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038D3                 mov     [ebp+var_4], ecx
.text:000038D6                 mov     eax, [ebp+var_4]
.text:000038D9                 mov     esp, ebp
.text:000038DB                 pop     ebp
.text:000038DC                 retn
.text:000038DC ??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ endp
.text:000038DC
.text:000038DC ; ---------------------------------------------------------------------------
.text:000038DD                 align 10h
.text:000038DD _text           ends
.text:000038DD
.text:000038E0 ; ===========================================================================
.text:000038E0
.text:000038E0 ; Segment type: Pure code
.text:000038E0 ; Segment permissions: Read/Execute
.text:000038E0 _text           segment para public 'CODE' use32
.text:000038E0                 assume cs:_text
.text:000038E0                 ;org 38E0h
.text:000038E0 ; COMDAT (pick any)
.text:000038E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000038E0
.text:000038E0 ; =============== S U B R O U T I N E =======================================
.text:000038E0
.text:000038E0 ; Attributes: bp-based frame
.text:000038E0
.text:000038E0 ; public: struct IOutStreamFinish * __thiscall CMyComPtr<struct IOutStreamFinish>::operator->(void)const
.text:000038E0                 public ??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ
.text:000038E0 ??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ proc near
.text:000038E0                                         ; CODE XREF: CFilterCoder::OutStreamFinish(void)+1ABp
.text:000038E0
.text:000038E0 var_4           = dword ptr -4
.text:000038E0
.text:000038E0                 push    ebp
.text:000038E1                 mov     ebp, esp
.text:000038E3                 push    ecx
.text:000038E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038EB                 mov     [ebp+var_4], ecx
.text:000038EE                 mov     eax, [ebp+var_4]
.text:000038F1                 mov     eax, [eax]
.text:000038F3                 mov     esp, ebp
.text:000038F5                 pop     ebp
.text:000038F6                 retn
.text:000038F6 ??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ endp
.text:000038F6
.text:000038F6 ; ---------------------------------------------------------------------------
.text:000038F7                 align 4
.text:000038F7 _text           ends
.text:000038F7
.text:000038F8 ; ===========================================================================
.text:000038F8
.text:000038F8 ; Segment type: Pure code
.text:000038F8 ; Segment permissions: Read/Execute
.text:000038F8 _text           segment para public 'CODE' use32
.text:000038F8                 assume cs:_text
.text:000038F8                 ;org 38F8h
.text:000038F8 ; COMDAT (pick any)
.text:000038F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000038F8
.text:000038F8 ; =============== S U B R O U T I N E =======================================
.text:000038F8
.text:000038F8 ; Attributes: bp-based frame
.text:000038F8
.text:000038F8 ; unsigned int __stdcall MyMin<unsigned int>(unsigned int, unsigned int)
.text:000038F8                 public ??$MyMin@I@@YGIII@Z
.text:000038F8 ??$MyMin@I@@YGIII@Z proc near           ; CODE XREF: CFilterCoder::Alloc(void)+2Cp
.text:000038F8                                         ; CFilterCoder::Write(void const *,uint,uint *)+70p
.text:000038F8
.text:000038F8 var_4           = dword ptr -4
.text:000038F8 arg_0           = dword ptr  8
.text:000038F8 arg_4           = dword ptr  0Ch
.text:000038F8
.text:000038F8                 push    ebp
.text:000038F9                 mov     ebp, esp
.text:000038FB                 push    ecx
.text:000038FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003903                 mov     eax, [ebp+arg_0]
.text:00003906                 cmp     eax, [ebp+arg_4]
.text:00003909                 jnb     short loc_3913
.text:0000390B                 mov     ecx, [ebp+arg_0]
.text:0000390E                 mov     [ebp+var_4], ecx
.text:00003911                 jmp     short loc_3919
.text:00003913 ; ---------------------------------------------------------------------------
.text:00003913
.text:00003913 loc_3913:                               ; CODE XREF: MyMin<uint>(uint,uint)+11j
.text:00003913                 mov     edx, [ebp+arg_4]
.text:00003916                 mov     [ebp+var_4], edx
.text:00003919
.text:00003919 loc_3919:                               ; CODE XREF: MyMin<uint>(uint,uint)+19j
.text:00003919                 mov     eax, [ebp+var_4]
.text:0000391C                 mov     esp, ebp
.text:0000391E                 pop     ebp
.text:0000391F                 retn    8
.text:0000391F ??$MyMin@I@@YGIII@Z endp
.text:0000391F
.text:0000391F ; ---------------------------------------------------------------------------
.text:00003922                 align 4
.text:00003922 _text           ends
.text:00003922
.text:00003924 ; ===========================================================================
.text:00003924
.text:00003924 ; Segment type: Pure code
.text:00003924 ; Segment permissions: Read/Execute
.text:00003924 _text           segment para public 'CODE' use32
.text:00003924                 assume cs:_text
.text:00003924                 ;org 3924h
.text:00003924 ; COMDAT (pick any)
.text:00003924                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003924
.text:00003924 ; =============== S U B R O U T I N E =======================================
.text:00003924
.text:00003924 ; Attributes: bp-based frame
.text:00003924
.text:00003924 ; public: long __thiscall CMyComPtr<struct ISequentialOutStream>::QueryInterface<struct IOutStreamFinish>(struct _GUID const &, struct IOutStreamFinish * *)const
.text:00003924                 public ??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z
.text:00003924 ??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z proc near
.text:00003924                                         ; CODE XREF: CFilterCoder::OutStreamFinish(void)+197p
.text:00003924
.text:00003924 var_4           = dword ptr -4
.text:00003924 arg_0           = dword ptr  8
.text:00003924 arg_4           = dword ptr  0Ch
.text:00003924
.text:00003924                 push    ebp
.text:00003925                 mov     ebp, esp
.text:00003927                 push    ecx
.text:00003928                 push    esi
.text:00003929                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003930                 mov     [ebp+var_4], ecx
.text:00003933                 mov     esi, esp
.text:00003935                 mov     eax, [ebp+arg_4]
.text:00003938                 push    eax
.text:00003939                 mov     ecx, [ebp+arg_0]
.text:0000393C                 push    ecx
.text:0000393D                 mov     edx, [ebp+var_4]
.text:00003940                 mov     eax, [edx]
.text:00003942                 mov     ecx, [ebp+var_4]
.text:00003945                 mov     edx, [ecx]
.text:00003947                 mov     eax, [eax]
.text:00003949                 push    edx
.text:0000394A                 mov     ecx, [eax]
.text:0000394C                 call    ecx
.text:0000394E                 cmp     esi, esp
.text:00003950                 call    __RTC_CheckEsp
.text:00003955                 pop     esi
.text:00003956                 add     esp, 4
.text:00003959                 cmp     ebp, esp
.text:0000395B                 call    __RTC_CheckEsp
.text:00003960                 mov     esp, ebp
.text:00003962                 pop     ebp
.text:00003963                 retn    8
.text:00003963 ??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z endp
.text:00003963
.text:00003963 ; ---------------------------------------------------------------------------
.text:00003966                 align 4
.text:00003966 _text           ends
.text:00003966
.text:00003968 ; ===========================================================================
.text:00003968
.text:00003968 ; Segment type: Pure code
.text:00003968 ; Segment permissions: Read/Execute
.text:00003968 _text           segment para public 'CODE' use32
.text:00003968                 assume cs:_text
.text:00003968                 ;org 3968h
.text:00003968 ; COMDAT (pick any)
.text:00003968                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003968
.text:00003968 ; =============== S U B R O U T I N E =======================================
.text:00003968
.text:00003968
.text:00003968 ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{48}' (struct _GUID const &, void * *)
.text:00003968                 public ?QueryInterface@CFilterCoder@@WDA@AGJABU_GUID@@PAPAX@Z
.text:00003968 ?QueryInterface@CFilterCoder@@WDA@AGJABU_GUID@@PAPAX@Z proc near
.text:00003968                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ICompressWriteCoderProperties'}o
.text:00003968
.text:00003968 arg_0           = dword ptr  4
.text:00003968
.text:00003968                 sub     [esp+arg_0], 30h ; '0'
.text:0000396D                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:0000396D ?QueryInterface@CFilterCoder@@WDA@AGJABU_GUID@@PAPAX@Z endp
.text:0000396D
.text:0000396D ; ---------------------------------------------------------------------------
.text:00003972                 align 4
.text:00003972 _text           ends
.text:00003972
.text:00003974 ; ===========================================================================
.text:00003974
.text:00003974 ; Segment type: Pure code
.text:00003974 ; Segment permissions: Read/Execute
.text:00003974 _text           segment para public 'CODE' use32
.text:00003974                 assume cs:_text
.text:00003974                 ;org 3974h
.text:00003974 ; COMDAT (pick any)
.text:00003974                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003974
.text:00003974 ; =============== S U B R O U T I N E =======================================
.text:00003974
.text:00003974
.text:00003974 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{32}' (void)
.text:00003974                 public ?Release@CFilterCoder@@WCA@AGKXZ
.text:00003974 ?Release@CFilterCoder@@WCA@AGKXZ proc near ; DATA XREF: .rdata:000016BCo
.text:00003974
.text:00003974 arg_0           = dword ptr  4
.text:00003974
.text:00003974                 sub     [esp+arg_0], 20h ; ' '
.text:00003979                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:00003979 ?Release@CFilterCoder@@WCA@AGKXZ endp
.text:00003979
.text:00003979 ; ---------------------------------------------------------------------------
.text:0000397E                 align 10h
.text:0000397E _text           ends
.text:0000397E
.text:00003980 ; ===========================================================================
.text:00003980
.text:00003980 ; Segment type: Pure code
.text:00003980 ; Segment permissions: Read/Execute
.text:00003980 _text           segment para public 'CODE' use32
.text:00003980                 assume cs:_text
.text:00003980                 ;org 3980h
.text:00003980 ; COMDAT (pick any)
.text:00003980                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003980
.text:00003980 ; =============== S U B R O U T I N E =======================================
.text:00003980
.text:00003980
.text:00003980 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{24}' (void)
.text:00003980                 public ?AddRef@CFilterCoder@@WBI@AGKXZ
.text:00003980 ?AddRef@CFilterCoder@@WBI@AGKXZ proc near ; DATA XREF: .rdata:000016E4o
.text:00003980
.text:00003980 arg_0           = dword ptr  4
.text:00003980
.text:00003980                 sub     [esp+arg_0], 18h
.text:00003985                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003985 ?AddRef@CFilterCoder@@WBI@AGKXZ endp
.text:00003985
.text:00003985 ; ---------------------------------------------------------------------------
.text:0000398A                 align 4
.text:0000398A _text           ends
.text:0000398A
.text:0000398C ; ===========================================================================
.text:0000398C
.text:0000398C ; Segment type: Pure code
.text:0000398C ; Segment permissions: Read/Execute
.text:0000398C _text           segment para public 'CODE' use32
.text:0000398C                 assume cs:_text
.text:0000398C                 ;org 398Ch
.text:0000398C ; COMDAT (pick any)
.text:0000398C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000398C
.text:0000398C ; =============== S U B R O U T I N E =======================================
.text:0000398C
.text:0000398C
.text:0000398C ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{56}' (void)
.text:0000398C                 public ?AddRef@CFilterCoder@@WDI@AGKXZ
.text:0000398C ?AddRef@CFilterCoder@@WDI@AGKXZ proc near ; DATA XREF: .rdata:0000163Co
.text:0000398C
.text:0000398C arg_0           = dword ptr  4
.text:0000398C
.text:0000398C                 sub     [esp+arg_0], 38h ; '8'
.text:00003991                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003991 ?AddRef@CFilterCoder@@WDI@AGKXZ endp
.text:00003991
.text:00003991 ; ---------------------------------------------------------------------------
.text:00003996                 align 4
.text:00003996 _text           ends
.text:00003996
.text:00003998 ; ===========================================================================
.text:00003998
.text:00003998 ; Segment type: Pure code
.text:00003998 ; Segment permissions: Read/Execute
.text:00003998 _text           segment para public 'CODE' use32
.text:00003998                 assume cs:_text
.text:00003998                 ;org 3998h
.text:00003998 ; COMDAT (pick any)
.text:00003998                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003998
.text:00003998 ; =============== S U B R O U T I N E =======================================
.text:00003998
.text:00003998
.text:00003998 ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{20}' (struct _GUID const &, void * *)
.text:00003998                 public ?QueryInterface@CFilterCoder@@WBE@AGJABU_GUID@@PAPAX@Z
.text:00003998 ?QueryInterface@CFilterCoder@@WBE@AGJABU_GUID@@PAPAX@Z proc near
.text:00003998                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ICompressSetOutStream'}o
.text:00003998
.text:00003998 arg_0           = dword ptr  4
.text:00003998
.text:00003998                 sub     [esp+arg_0], 14h
.text:0000399D                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:0000399D ?QueryInterface@CFilterCoder@@WBE@AGJABU_GUID@@PAPAX@Z endp
.text:0000399D
.text:0000399D ; ---------------------------------------------------------------------------
.text:000039A2                 align 4
.text:000039A2 _text           ends
.text:000039A2
.text:000039A4 ; ===========================================================================
.text:000039A4
.text:000039A4 ; Segment type: Pure code
.text:000039A4 ; Segment permissions: Read/Execute
.text:000039A4 _text           segment para public 'CODE' use32
.text:000039A4                 assume cs:_text
.text:000039A4                 ;org 39A4h
.text:000039A4 ; COMDAT (pick any)
.text:000039A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039A4
.text:000039A4 ; =============== S U B R O U T I N E =======================================
.text:000039A4
.text:000039A4
.text:000039A4 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{4}' (void)
.text:000039A4                 public ?Release@CFilterCoder@@W3AGKXZ
.text:000039A4 ?Release@CFilterCoder@@W3AGKXZ proc near ; DATA XREF: .rdata:00001754o
.text:000039A4
.text:000039A4 arg_0           = dword ptr  4
.text:000039A4
.text:000039A4                 sub     [esp+arg_0], 4
.text:000039A9                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:000039A9 ?Release@CFilterCoder@@W3AGKXZ endp
.text:000039A9
.text:000039A9 ; ---------------------------------------------------------------------------
.text:000039AE                 align 10h
.text:000039AE _text           ends
.text:000039AE
.text:000039B0 ; ===========================================================================
.text:000039B0
.text:000039B0 ; Segment type: Pure code
.text:000039B0 ; Segment permissions: Read/Execute
.text:000039B0 _text           segment para public 'CODE' use32
.text:000039B0                 assume cs:_text
.text:000039B0                 ;org 39B0h
.text:000039B0 ; COMDAT (pick any)
.text:000039B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039B0
.text:000039B0 ; =============== S U B R O U T I N E =======================================
.text:000039B0
.text:000039B0
.text:000039B0 ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{52}' (struct _GUID const &, void * *)
.text:000039B0                 public ?QueryInterface@CFilterCoder@@WDE@AGJABU_GUID@@PAPAX@Z
.text:000039B0 ?QueryInterface@CFilterCoder@@WDE@AGJABU_GUID@@PAPAX@Z proc near
.text:000039B0                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ICryptoResetInitVector'}o
.text:000039B0
.text:000039B0 arg_0           = dword ptr  4
.text:000039B0
.text:000039B0                 sub     [esp+arg_0], 34h ; '4'
.text:000039B5                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:000039B5 ?QueryInterface@CFilterCoder@@WDE@AGJABU_GUID@@PAPAX@Z endp
.text:000039B5
.text:000039B5 ; ---------------------------------------------------------------------------
.text:000039BA                 align 4
.text:000039BA _text           ends
.text:000039BA
.text:000039BC ; ===========================================================================
.text:000039BC
.text:000039BC ; Segment type: Pure code
.text:000039BC ; Segment permissions: Read/Execute
.text:000039BC _text           segment para public 'CODE' use32
.text:000039BC                 assume cs:_text
.text:000039BC                 ;org 39BCh
.text:000039BC ; COMDAT (pick any)
.text:000039BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039BC
.text:000039BC ; =============== S U B R O U T I N E =======================================
.text:000039BC
.text:000039BC
.text:000039BC ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{36}' (void)
.text:000039BC                 public ?Release@CFilterCoder@@WCE@AGKXZ
.text:000039BC ?Release@CFilterCoder@@WCE@AGKXZ proc near ; DATA XREF: .rdata:000016A8o
.text:000039BC
.text:000039BC arg_0           = dword ptr  4
.text:000039BC
.text:000039BC                 sub     [esp+arg_0], 24h ; '$'
.text:000039C1                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:000039C1 ?Release@CFilterCoder@@WCE@AGKXZ endp
.text:000039C1
.text:000039C1 ; ---------------------------------------------------------------------------
.text:000039C6                 align 4
.text:000039C6 _text           ends
.text:000039C6
.text:000039C8 ; ===========================================================================
.text:000039C8
.text:000039C8 ; Segment type: Pure code
.text:000039C8 ; Segment permissions: Read/Execute
.text:000039C8 _text           segment para public 'CODE' use32
.text:000039C8                 assume cs:_text
.text:000039C8                 ;org 39C8h
.text:000039C8 ; COMDAT (pick any)
.text:000039C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039C8
.text:000039C8 ; =============== S U B R O U T I N E =======================================
.text:000039C8
.text:000039C8
.text:000039C8 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{28}' (void)
.text:000039C8                 public ?AddRef@CFilterCoder@@WBM@AGKXZ
.text:000039C8 ?AddRef@CFilterCoder@@WBM@AGKXZ proc near ; DATA XREF: .rdata:000016D0o
.text:000039C8
.text:000039C8 arg_0           = dword ptr  4
.text:000039C8
.text:000039C8                 sub     [esp+arg_0], 1Ch
.text:000039CD                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:000039CD ?AddRef@CFilterCoder@@WBM@AGKXZ endp
.text:000039CD
.text:000039CD ; ---------------------------------------------------------------------------
.text:000039D2                 align 4
.text:000039D2 _text           ends
.text:000039D2
.text:000039D4 ; ===========================================================================
.text:000039D4
.text:000039D4 ; Segment type: Pure code
.text:000039D4 ; Segment permissions: Read/Execute
.text:000039D4 _text           segment para public 'CODE' use32
.text:000039D4                 assume cs:_text
.text:000039D4                 ;org 39D4h
.text:000039D4 ; COMDAT (pick any)
.text:000039D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039D4
.text:000039D4 ; =============== S U B R O U T I N E =======================================
.text:000039D4
.text:000039D4
.text:000039D4 ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{24}' (struct _GUID const &, void * *)
.text:000039D4                 public ?QueryInterface@CFilterCoder@@WBI@AGJABU_GUID@@PAPAX@Z
.text:000039D4 ?QueryInterface@CFilterCoder@@WBI@AGJABU_GUID@@PAPAX@Z proc near
.text:000039D4                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ISequentialOutStream'}o
.text:000039D4
.text:000039D4 arg_0           = dword ptr  4
.text:000039D4
.text:000039D4                 sub     [esp+arg_0], 18h
.text:000039D9                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:000039D9 ?QueryInterface@CFilterCoder@@WBI@AGJABU_GUID@@PAPAX@Z endp
.text:000039D9
.text:000039D9 ; ---------------------------------------------------------------------------
.text:000039DE                 align 10h
.text:000039DE _text           ends
.text:000039DE
.text:000039E0 ; ===========================================================================
.text:000039E0
.text:000039E0 ; Segment type: Pure code
.text:000039E0 ; Segment permissions: Read/Execute
.text:000039E0 _text           segment para public 'CODE' use32
.text:000039E0                 assume cs:_text
.text:000039E0                 ;org 39E0h
.text:000039E0 ; COMDAT (pick any)
.text:000039E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039E0
.text:000039E0 ; =============== S U B R O U T I N E =======================================
.text:000039E0
.text:000039E0
.text:000039E0 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{8}' (void)
.text:000039E0                 public ?Release@CFilterCoder@@W7AGKXZ
.text:000039E0 ?Release@CFilterCoder@@W7AGKXZ proc near ; DATA XREF: .rdata:00001740o
.text:000039E0
.text:000039E0 arg_0           = dword ptr  4
.text:000039E0
.text:000039E0                 sub     [esp+arg_0], 8
.text:000039E5                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:000039E5 ?Release@CFilterCoder@@W7AGKXZ endp
.text:000039E5
.text:000039E5 ; ---------------------------------------------------------------------------
.text:000039EA                 align 4
.text:000039EA _text           ends
.text:000039EA
.text:000039EC ; ===========================================================================
.text:000039EC
.text:000039EC ; Segment type: Pure code
.text:000039EC ; Segment permissions: Read/Execute
.text:000039EC _text           segment para public 'CODE' use32
.text:000039EC                 assume cs:_text
.text:000039EC                 ;org 39ECh
.text:000039EC ; COMDAT (pick any)
.text:000039EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039EC
.text:000039EC ; =============== S U B R O U T I N E =======================================
.text:000039EC
.text:000039EC
.text:000039EC ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{56}' (struct _GUID const &, void * *)
.text:000039EC                 public ?QueryInterface@CFilterCoder@@WDI@AGJABU_GUID@@PAPAX@Z
.text:000039EC ?QueryInterface@CFilterCoder@@WDI@AGJABU_GUID@@PAPAX@Z proc near
.text:000039EC                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ICompressSetDecoderProperties2'}o
.text:000039EC
.text:000039EC arg_0           = dword ptr  4
.text:000039EC
.text:000039EC                 sub     [esp+arg_0], 38h ; '8'
.text:000039F1                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:000039F1 ?QueryInterface@CFilterCoder@@WDI@AGJABU_GUID@@PAPAX@Z endp
.text:000039F1
.text:000039F1 ; ---------------------------------------------------------------------------
.text:000039F6                 align 4
.text:000039F6 _text           ends
.text:000039F6
.text:000039F8 ; ===========================================================================
.text:000039F8
.text:000039F8 ; Segment type: Pure code
.text:000039F8 ; Segment permissions: Read/Execute
.text:000039F8 _text           segment para public 'CODE' use32
.text:000039F8                 assume cs:_text
.text:000039F8                 ;org 39F8h
.text:000039F8 ; COMDAT (pick any)
.text:000039F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039F8
.text:000039F8 ; =============== S U B R O U T I N E =======================================
.text:000039F8
.text:000039F8
.text:000039F8 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{40}' (void)
.text:000039F8                 public ?Release@CFilterCoder@@WCI@AGKXZ
.text:000039F8 ?Release@CFilterCoder@@WCI@AGKXZ proc near ; DATA XREF: .rdata:00001690o
.text:000039F8
.text:000039F8 arg_0           = dword ptr  4
.text:000039F8
.text:000039F8                 sub     [esp+arg_0], 28h ; '('
.text:000039FD                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:000039FD ?Release@CFilterCoder@@WCI@AGKXZ endp
.text:000039FD
.text:000039FD ; ---------------------------------------------------------------------------
.text:00003A02                 align 4
.text:00003A02 _text           ends
.text:00003A02
.text:00003A04 ; ===========================================================================
.text:00003A04
.text:00003A04 ; Segment type: Pure code
.text:00003A04 ; Segment permissions: Read/Execute
.text:00003A04 _text           segment para public 'CODE' use32
.text:00003A04                 assume cs:_text
.text:00003A04                 ;org 3A04h
.text:00003A04 ; COMDAT (pick any)
.text:00003A04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A04
.text:00003A04 ; =============== S U B R O U T I N E =======================================
.text:00003A04
.text:00003A04
.text:00003A04 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{32}' (void)
.text:00003A04                 public ?AddRef@CFilterCoder@@WCA@AGKXZ
.text:00003A04 ?AddRef@CFilterCoder@@WCA@AGKXZ proc near ; DATA XREF: .rdata:000016B8o
.text:00003A04
.text:00003A04 arg_0           = dword ptr  4
.text:00003A04
.text:00003A04                 sub     [esp+arg_0], 20h ; ' '
.text:00003A09                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003A09 ?AddRef@CFilterCoder@@WCA@AGKXZ endp
.text:00003A09
.text:00003A09 ; ---------------------------------------------------------------------------
.text:00003A0E                 align 10h
.text:00003A0E _text           ends
.text:00003A0E
.text:00003A10 ; ===========================================================================
.text:00003A10
.text:00003A10 ; Segment type: Pure code
.text:00003A10 ; Segment permissions: Read/Execute
.text:00003A10 _text           segment para public 'CODE' use32
.text:00003A10                 assume cs:_text
.text:00003A10                 ;org 3A10h
.text:00003A10 ; COMDAT (pick any)
.text:00003A10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A10
.text:00003A10 ; =============== S U B R O U T I N E =======================================
.text:00003A10
.text:00003A10
.text:00003A10 ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{28}' (struct _GUID const &, void * *)
.text:00003A10                 public ?QueryInterface@CFilterCoder@@WBM@AGJABU_GUID@@PAPAX@Z
.text:00003A10 ?QueryInterface@CFilterCoder@@WBM@AGJABU_GUID@@PAPAX@Z proc near
.text:00003A10                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `IOutStreamFinish'}o
.text:00003A10
.text:00003A10 arg_0           = dword ptr  4
.text:00003A10
.text:00003A10                 sub     [esp+arg_0], 1Ch
.text:00003A15                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:00003A15 ?QueryInterface@CFilterCoder@@WBM@AGJABU_GUID@@PAPAX@Z endp
.text:00003A15
.text:00003A15 ; ---------------------------------------------------------------------------
.text:00003A1A                 align 4
.text:00003A1A _text           ends
.text:00003A1A
.text:00003A1C ; ===========================================================================
.text:00003A1C
.text:00003A1C ; Segment type: Pure code
.text:00003A1C ; Segment permissions: Read/Execute
.text:00003A1C _text           segment para public 'CODE' use32
.text:00003A1C                 assume cs:_text
.text:00003A1C                 ;org 3A1Ch
.text:00003A1C ; COMDAT (pick any)
.text:00003A1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A1C
.text:00003A1C ; =============== S U B R O U T I N E =======================================
.text:00003A1C
.text:00003A1C
.text:00003A1C ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{12}' (void)
.text:00003A1C                 public ?Release@CFilterCoder@@WM@AGKXZ
.text:00003A1C ?Release@CFilterCoder@@WM@AGKXZ proc near ; DATA XREF: .rdata:00001728o
.text:00003A1C
.text:00003A1C arg_0           = dword ptr  4
.text:00003A1C
.text:00003A1C                 sub     [esp+arg_0], 0Ch
.text:00003A21                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:00003A21 ?Release@CFilterCoder@@WM@AGKXZ endp
.text:00003A21
.text:00003A21 ; ---------------------------------------------------------------------------
.text:00003A26                 align 4
.text:00003A26 _text           ends
.text:00003A26
.text:00003A28 ; ===========================================================================
.text:00003A28
.text:00003A28 ; Segment type: Pure code
.text:00003A28 ; Segment permissions: Read/Execute
.text:00003A28 _text           segment para public 'CODE' use32
.text:00003A28                 assume cs:_text
.text:00003A28                 ;org 3A28h
.text:00003A28 ; COMDAT (pick any)
.text:00003A28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A28
.text:00003A28 ; =============== S U B R O U T I N E =======================================
.text:00003A28
.text:00003A28
.text:00003A28 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{4}' (void)
.text:00003A28                 public ?AddRef@CFilterCoder@@W3AGKXZ
.text:00003A28 ?AddRef@CFilterCoder@@W3AGKXZ proc near ; DATA XREF: .rdata:00001750o
.text:00003A28
.text:00003A28 arg_0           = dword ptr  4
.text:00003A28
.text:00003A28                 sub     [esp+arg_0], 4
.text:00003A2D                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003A2D ?AddRef@CFilterCoder@@W3AGKXZ endp
.text:00003A2D
.text:00003A2D ; ---------------------------------------------------------------------------
.text:00003A32                 align 4
.text:00003A32 _text           ends
.text:00003A32
.text:00003A34 ; ===========================================================================
.text:00003A34
.text:00003A34 ; Segment type: Pure code
.text:00003A34 ; Segment permissions: Read/Execute
.text:00003A34 _text           segment para public 'CODE' use32
.text:00003A34                 assume cs:_text
.text:00003A34                 ;org 3A34h
.text:00003A34 ; COMDAT (pick any)
.text:00003A34                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A34
.text:00003A34 ; =============== S U B R O U T I N E =======================================
.text:00003A34
.text:00003A34
.text:00003A34 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{44}' (void)
.text:00003A34                 public ?Release@CFilterCoder@@WCM@AGKXZ
.text:00003A34 ?Release@CFilterCoder@@WCM@AGKXZ proc near ; DATA XREF: .rdata:0000167Co
.text:00003A34
.text:00003A34 arg_0           = dword ptr  4
.text:00003A34
.text:00003A34                 sub     [esp+arg_0], 2Ch ; ','
.text:00003A39                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:00003A39 ?Release@CFilterCoder@@WCM@AGKXZ endp
.text:00003A39
.text:00003A39 ; ---------------------------------------------------------------------------
.text:00003A3E                 align 10h
.text:00003A3E _text           ends
.text:00003A3E
.text:00003A40 ; ===========================================================================
.text:00003A40
.text:00003A40 ; Segment type: Pure code
.text:00003A40 ; Segment permissions: Read/Execute
.text:00003A40 _text           segment para public 'CODE' use32
.text:00003A40                 assume cs:_text
.text:00003A40                 ;org 3A40h
.text:00003A40 ; COMDAT (pick any)
.text:00003A40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A40
.text:00003A40 ; =============== S U B R O U T I N E =======================================
.text:00003A40
.text:00003A40
.text:00003A40 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{36}' (void)
.text:00003A40                 public ?AddRef@CFilterCoder@@WCE@AGKXZ
.text:00003A40 ?AddRef@CFilterCoder@@WCE@AGKXZ proc near ; DATA XREF: .rdata:000016A4o
.text:00003A40
.text:00003A40 arg_0           = dword ptr  4
.text:00003A40
.text:00003A40                 sub     [esp+arg_0], 24h ; '$'
.text:00003A45                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003A45 ?AddRef@CFilterCoder@@WCE@AGKXZ endp
.text:00003A45
.text:00003A45 ; ---------------------------------------------------------------------------
.text:00003A4A                 align 4
.text:00003A4A _text           ends
.text:00003A4A
.text:00003A4C ; ===========================================================================
.text:00003A4C
.text:00003A4C ; Segment type: Pure code
.text:00003A4C ; Segment permissions: Read/Execute
.text:00003A4C _text           segment para public 'CODE' use32
.text:00003A4C                 assume cs:_text
.text:00003A4C                 ;org 3A4Ch
.text:00003A4C ; COMDAT (pick any)
.text:00003A4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A4C
.text:00003A4C ; =============== S U B R O U T I N E =======================================
.text:00003A4C
.text:00003A4C
.text:00003A4C ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{32}' (struct _GUID const &, void * *)
.text:00003A4C                 public ?QueryInterface@CFilterCoder@@WCA@AGJABU_GUID@@PAPAX@Z
.text:00003A4C ?QueryInterface@CFilterCoder@@WCA@AGJABU_GUID@@PAPAX@Z proc near
.text:00003A4C                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ICompressSetBufSize'}o
.text:00003A4C
.text:00003A4C arg_0           = dword ptr  4
.text:00003A4C
.text:00003A4C                 sub     [esp+arg_0], 20h ; ' '
.text:00003A51                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:00003A51 ?QueryInterface@CFilterCoder@@WCA@AGJABU_GUID@@PAPAX@Z endp
.text:00003A51
.text:00003A51 ; ---------------------------------------------------------------------------
.text:00003A56                 align 4
.text:00003A56 _text           ends
.text:00003A56
.text:00003A58 ; ===========================================================================
.text:00003A58
.text:00003A58 ; Segment type: Pure code
.text:00003A58 ; Segment permissions: Read/Execute
.text:00003A58 _text           segment para public 'CODE' use32
.text:00003A58                 assume cs:_text
.text:00003A58                 ;org 3A58h
.text:00003A58 ; COMDAT (pick any)
.text:00003A58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A58
.text:00003A58 ; =============== S U B R O U T I N E =======================================
.text:00003A58
.text:00003A58
.text:00003A58 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{16}' (void)
.text:00003A58                 public ?Release@CFilterCoder@@WBA@AGKXZ
.text:00003A58 ?Release@CFilterCoder@@WBA@AGKXZ proc near ; DATA XREF: .rdata:00001714o
.text:00003A58
.text:00003A58 arg_0           = dword ptr  4
.text:00003A58
.text:00003A58                 sub     [esp+arg_0], 10h
.text:00003A5D                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:00003A5D ?Release@CFilterCoder@@WBA@AGKXZ endp
.text:00003A5D
.text:00003A5D ; ---------------------------------------------------------------------------
.text:00003A62                 align 4
.text:00003A62 _text           ends
.text:00003A62
.text:00003A64 ; ===========================================================================
.text:00003A64
.text:00003A64 ; Segment type: Pure code
.text:00003A64 ; Segment permissions: Read/Execute
.text:00003A64 _text           segment para public 'CODE' use32
.text:00003A64                 assume cs:_text
.text:00003A64                 ;org 3A64h
.text:00003A64 ; COMDAT (pick any)
.text:00003A64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A64
.text:00003A64 ; =============== S U B R O U T I N E =======================================
.text:00003A64
.text:00003A64
.text:00003A64 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{8}' (void)
.text:00003A64                 public ?AddRef@CFilterCoder@@W7AGKXZ
.text:00003A64 ?AddRef@CFilterCoder@@W7AGKXZ proc near ; DATA XREF: .rdata:0000173Co
.text:00003A64
.text:00003A64 arg_0           = dword ptr  4
.text:00003A64
.text:00003A64                 sub     [esp+arg_0], 8
.text:00003A69                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003A69 ?AddRef@CFilterCoder@@W7AGKXZ endp
.text:00003A69
.text:00003A69 ; ---------------------------------------------------------------------------
.text:00003A6E                 align 10h
.text:00003A6E _text           ends
.text:00003A6E
.text:00003A70 ; ===========================================================================
.text:00003A70
.text:00003A70 ; Segment type: Pure code
.text:00003A70 ; Segment permissions: Read/Execute
.text:00003A70 _text           segment para public 'CODE' use32
.text:00003A70                 assume cs:_text
.text:00003A70                 ;org 3A70h
.text:00003A70 ; COMDAT (pick any)
.text:00003A70                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A70
.text:00003A70 ; =============== S U B R O U T I N E =======================================
.text:00003A70
.text:00003A70
.text:00003A70 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{48}' (void)
.text:00003A70                 public ?Release@CFilterCoder@@WDA@AGKXZ
.text:00003A70 ?Release@CFilterCoder@@WDA@AGKXZ proc near ; DATA XREF: .rdata:00001668o
.text:00003A70
.text:00003A70 arg_0           = dword ptr  4
.text:00003A70
.text:00003A70                 sub     [esp+arg_0], 30h ; '0'
.text:00003A75                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:00003A75 ?Release@CFilterCoder@@WDA@AGKXZ endp
.text:00003A75
.text:00003A75 ; ---------------------------------------------------------------------------
.text:00003A7A                 align 4
.text:00003A7A _text           ends
.text:00003A7A
.text:00003A7C ; ===========================================================================
.text:00003A7C
.text:00003A7C ; Segment type: Pure code
.text:00003A7C ; Segment permissions: Read/Execute
.text:00003A7C _text           segment para public 'CODE' use32
.text:00003A7C                 assume cs:_text
.text:00003A7C                 ;org 3A7Ch
.text:00003A7C ; COMDAT (pick any)
.text:00003A7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A7C
.text:00003A7C ; =============== S U B R O U T I N E =======================================
.text:00003A7C
.text:00003A7C
.text:00003A7C ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{40}' (void)
.text:00003A7C                 public ?AddRef@CFilterCoder@@WCI@AGKXZ
.text:00003A7C ?AddRef@CFilterCoder@@WCI@AGKXZ proc near ; DATA XREF: .rdata:0000168Co
.text:00003A7C
.text:00003A7C arg_0           = dword ptr  4
.text:00003A7C
.text:00003A7C                 sub     [esp+arg_0], 28h ; '('
.text:00003A81                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003A81 ?AddRef@CFilterCoder@@WCI@AGKXZ endp
.text:00003A81
.text:00003A81 ; ---------------------------------------------------------------------------
.text:00003A86                 align 4
.text:00003A86 _text           ends
.text:00003A86
.text:00003A88 ; ===========================================================================
.text:00003A88
.text:00003A88 ; Segment type: Pure code
.text:00003A88 ; Segment permissions: Read/Execute
.text:00003A88 _text           segment para public 'CODE' use32
.text:00003A88                 assume cs:_text
.text:00003A88                 ;org 3A88h
.text:00003A88 ; COMDAT (pick any)
.text:00003A88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A88
.text:00003A88 ; =============== S U B R O U T I N E =======================================
.text:00003A88
.text:00003A88
.text:00003A88 ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00003A88                 public ?QueryInterface@CFilterCoder@@W3AGJABU_GUID@@PAPAX@Z
.text:00003A88 ?QueryInterface@CFilterCoder@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00003A88                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00003A88
.text:00003A88 arg_0           = dword ptr  4
.text:00003A88
.text:00003A88                 sub     [esp+arg_0], 4
.text:00003A8D                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:00003A8D ?QueryInterface@CFilterCoder@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00003A8D
.text:00003A8D ; ---------------------------------------------------------------------------
.text:00003A92                 align 4
.text:00003A92 _text           ends
.text:00003A92
.text:00003A94 ; ===========================================================================
.text:00003A94
.text:00003A94 ; Segment type: Pure code
.text:00003A94 ; Segment permissions: Read/Execute
.text:00003A94 _text           segment para public 'CODE' use32
.text:00003A94                 assume cs:_text
.text:00003A94                 ;org 3A94h
.text:00003A94 ; COMDAT (pick any)
.text:00003A94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A94
.text:00003A94 ; =============== S U B R O U T I N E =======================================
.text:00003A94
.text:00003A94
.text:00003A94 ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{36}' (struct _GUID const &, void * *)
.text:00003A94                 public ?QueryInterface@CFilterCoder@@WCE@AGJABU_GUID@@PAPAX@Z
.text:00003A94 ?QueryInterface@CFilterCoder@@WCE@AGJABU_GUID@@PAPAX@Z proc near
.text:00003A94                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ICryptoSetPassword'}o
.text:00003A94
.text:00003A94 arg_0           = dword ptr  4
.text:00003A94
.text:00003A94                 sub     [esp+arg_0], 24h ; '$'
.text:00003A99                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:00003A99 ?QueryInterface@CFilterCoder@@WCE@AGJABU_GUID@@PAPAX@Z endp
.text:00003A99
.text:00003A99 ; ---------------------------------------------------------------------------
.text:00003A9E                 align 10h
.text:00003A9E _text           ends
.text:00003A9E
.text:00003AA0 ; ===========================================================================
.text:00003AA0
.text:00003AA0 ; Segment type: Pure code
.text:00003AA0 ; Segment permissions: Read/Execute
.text:00003AA0 _text           segment para public 'CODE' use32
.text:00003AA0                 assume cs:_text
.text:00003AA0                 ;org 3AA0h
.text:00003AA0 ; COMDAT (pick any)
.text:00003AA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AA0
.text:00003AA0 ; =============== S U B R O U T I N E =======================================
.text:00003AA0
.text:00003AA0
.text:00003AA0 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{20}' (void)
.text:00003AA0                 public ?Release@CFilterCoder@@WBE@AGKXZ
.text:00003AA0 ?Release@CFilterCoder@@WBE@AGKXZ proc near ; DATA XREF: .rdata:000016FCo
.text:00003AA0
.text:00003AA0 arg_0           = dword ptr  4
.text:00003AA0
.text:00003AA0                 sub     [esp+arg_0], 14h
.text:00003AA5                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:00003AA5 ?Release@CFilterCoder@@WBE@AGKXZ endp
.text:00003AA5
.text:00003AA5 ; ---------------------------------------------------------------------------
.text:00003AAA                 align 4
.text:00003AAA _text           ends
.text:00003AAA
.text:00003AAC ; ===========================================================================
.text:00003AAC
.text:00003AAC ; Segment type: Pure code
.text:00003AAC ; Segment permissions: Read/Execute
.text:00003AAC _text           segment para public 'CODE' use32
.text:00003AAC                 assume cs:_text
.text:00003AAC                 ;org 3AACh
.text:00003AAC ; COMDAT (pick any)
.text:00003AAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AAC
.text:00003AAC ; =============== S U B R O U T I N E =======================================
.text:00003AAC
.text:00003AAC
.text:00003AAC ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{12}' (void)
.text:00003AAC                 public ?AddRef@CFilterCoder@@WM@AGKXZ
.text:00003AAC ?AddRef@CFilterCoder@@WM@AGKXZ proc near ; DATA XREF: .rdata:00001724o
.text:00003AAC
.text:00003AAC arg_0           = dword ptr  4
.text:00003AAC
.text:00003AAC                 sub     [esp+arg_0], 0Ch
.text:00003AB1                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003AB1 ?AddRef@CFilterCoder@@WM@AGKXZ endp
.text:00003AB1
.text:00003AB1 ; ---------------------------------------------------------------------------
.text:00003AB6                 align 4
.text:00003AB6 _text           ends
.text:00003AB6
.text:00003AB8 ; ===========================================================================
.text:00003AB8
.text:00003AB8 ; Segment type: Pure code
.text:00003AB8 ; Segment permissions: Read/Execute
.text:00003AB8 _text           segment para public 'CODE' use32
.text:00003AB8                 assume cs:_text
.text:00003AB8                 ;org 3AB8h
.text:00003AB8 ; COMDAT (pick any)
.text:00003AB8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AB8
.text:00003AB8 ; =============== S U B R O U T I N E =======================================
.text:00003AB8
.text:00003AB8
.text:00003AB8 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{52}' (void)
.text:00003AB8                 public ?Release@CFilterCoder@@WDE@AGKXZ
.text:00003AB8 ?Release@CFilterCoder@@WDE@AGKXZ proc near ; DATA XREF: .rdata:00001654o
.text:00003AB8
.text:00003AB8 arg_0           = dword ptr  4
.text:00003AB8
.text:00003AB8                 sub     [esp+arg_0], 34h ; '4'
.text:00003ABD                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:00003ABD ?Release@CFilterCoder@@WDE@AGKXZ endp
.text:00003ABD
.text:00003ABD ; ---------------------------------------------------------------------------
.text:00003AC2                 align 4
.text:00003AC2 _text           ends
.text:00003AC2
.text:00003AC4 ; ===========================================================================
.text:00003AC4
.text:00003AC4 ; Segment type: Pure code
.text:00003AC4 ; Segment permissions: Read/Execute
.text:00003AC4 _text           segment para public 'CODE' use32
.text:00003AC4                 assume cs:_text
.text:00003AC4                 ;org 3AC4h
.text:00003AC4 ; COMDAT (pick any)
.text:00003AC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AC4
.text:00003AC4 ; =============== S U B R O U T I N E =======================================
.text:00003AC4
.text:00003AC4
.text:00003AC4 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{44}' (void)
.text:00003AC4                 public ?AddRef@CFilterCoder@@WCM@AGKXZ
.text:00003AC4 ?AddRef@CFilterCoder@@WCM@AGKXZ proc near ; DATA XREF: .rdata:00001678o
.text:00003AC4
.text:00003AC4 arg_0           = dword ptr  4
.text:00003AC4
.text:00003AC4                 sub     [esp+arg_0], 2Ch ; ','
.text:00003AC9                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003AC9 ?AddRef@CFilterCoder@@WCM@AGKXZ endp
.text:00003AC9
.text:00003AC9 ; ---------------------------------------------------------------------------
.text:00003ACE                 align 10h
.text:00003ACE _text           ends
.text:00003ACE
.text:00003AD0 ; ===========================================================================
.text:00003AD0
.text:00003AD0 ; Segment type: Pure code
.text:00003AD0 ; Segment permissions: Read/Execute
.text:00003AD0 _text           segment para public 'CODE' use32
.text:00003AD0                 assume cs:_text
.text:00003AD0                 ;org 3AD0h
.text:00003AD0 ; COMDAT (pick any)
.text:00003AD0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AD0
.text:00003AD0 ; =============== S U B R O U T I N E =======================================
.text:00003AD0
.text:00003AD0
.text:00003AD0 ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00003AD0                 public ?QueryInterface@CFilterCoder@@W7AGJABU_GUID@@PAPAX@Z
.text:00003AD0 ?QueryInterface@CFilterCoder@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00003AD0                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ICompressInitEncoder'}o
.text:00003AD0
.text:00003AD0 arg_0           = dword ptr  4
.text:00003AD0
.text:00003AD0                 sub     [esp+arg_0], 8
.text:00003AD5                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:00003AD5 ?QueryInterface@CFilterCoder@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00003AD5
.text:00003AD5 ; ---------------------------------------------------------------------------
.text:00003ADA                 align 4
.text:00003ADA _text           ends
.text:00003ADA
.text:00003ADC ; ===========================================================================
.text:00003ADC
.text:00003ADC ; Segment type: Pure code
.text:00003ADC ; Segment permissions: Read/Execute
.text:00003ADC _text           segment para public 'CODE' use32
.text:00003ADC                 assume cs:_text
.text:00003ADC                 ;org 3ADCh
.text:00003ADC ; COMDAT (pick any)
.text:00003ADC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003ADC
.text:00003ADC ; =============== S U B R O U T I N E =======================================
.text:00003ADC
.text:00003ADC
.text:00003ADC ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{40}' (struct _GUID const &, void * *)
.text:00003ADC                 public ?QueryInterface@CFilterCoder@@WCI@AGJABU_GUID@@PAPAX@Z
.text:00003ADC ?QueryInterface@CFilterCoder@@WCI@AGJABU_GUID@@PAPAX@Z proc near
.text:00003ADC                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ICryptoProperties'}o
.text:00003ADC
.text:00003ADC arg_0           = dword ptr  4
.text:00003ADC
.text:00003ADC                 sub     [esp+arg_0], 28h ; '('
.text:00003AE1                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:00003AE1 ?QueryInterface@CFilterCoder@@WCI@AGJABU_GUID@@PAPAX@Z endp
.text:00003AE1
.text:00003AE1 ; ---------------------------------------------------------------------------
.text:00003AE6                 align 4
.text:00003AE6 _text           ends
.text:00003AE6
.text:00003AE8 ; ===========================================================================
.text:00003AE8
.text:00003AE8 ; Segment type: Pure code
.text:00003AE8 ; Segment permissions: Read/Execute
.text:00003AE8 _text           segment para public 'CODE' use32
.text:00003AE8                 assume cs:_text
.text:00003AE8                 ;org 3AE8h
.text:00003AE8 ; COMDAT (pick any)
.text:00003AE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AE8
.text:00003AE8 ; =============== S U B R O U T I N E =======================================
.text:00003AE8
.text:00003AE8
.text:00003AE8 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{24}' (void)
.text:00003AE8                 public ?Release@CFilterCoder@@WBI@AGKXZ
.text:00003AE8 ?Release@CFilterCoder@@WBI@AGKXZ proc near ; DATA XREF: .rdata:000016E8o
.text:00003AE8
.text:00003AE8 arg_0           = dword ptr  4
.text:00003AE8
.text:00003AE8                 sub     [esp+arg_0], 18h
.text:00003AED                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:00003AED ?Release@CFilterCoder@@WBI@AGKXZ endp
.text:00003AED
.text:00003AED ; ---------------------------------------------------------------------------
.text:00003AF2                 align 4
.text:00003AF2 _text           ends
.text:00003AF2
.text:00003AF4 ; ===========================================================================
.text:00003AF4
.text:00003AF4 ; Segment type: Pure code
.text:00003AF4 ; Segment permissions: Read/Execute
.text:00003AF4 _text           segment para public 'CODE' use32
.text:00003AF4                 assume cs:_text
.text:00003AF4                 ;org 3AF4h
.text:00003AF4 ; COMDAT (pick any)
.text:00003AF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AF4
.text:00003AF4 ; =============== S U B R O U T I N E =======================================
.text:00003AF4
.text:00003AF4
.text:00003AF4 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{16}' (void)
.text:00003AF4                 public ?AddRef@CFilterCoder@@WBA@AGKXZ
.text:00003AF4 ?AddRef@CFilterCoder@@WBA@AGKXZ proc near ; DATA XREF: .rdata:00001710o
.text:00003AF4
.text:00003AF4 arg_0           = dword ptr  4
.text:00003AF4
.text:00003AF4                 sub     [esp+arg_0], 10h
.text:00003AF9                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003AF9 ?AddRef@CFilterCoder@@WBA@AGKXZ endp
.text:00003AF9
.text:00003AF9 ; ---------------------------------------------------------------------------
.text:00003AFE                 align 10h
.text:00003AFE _text           ends
.text:00003AFE
.text:00003B00 ; ===========================================================================
.text:00003B00
.text:00003B00 ; Segment type: Pure code
.text:00003B00 ; Segment permissions: Read/Execute
.text:00003B00 _text           segment para public 'CODE' use32
.text:00003B00                 assume cs:_text
.text:00003B00                 ;org 3B00h
.text:00003B00 ; COMDAT (pick any)
.text:00003B00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B00
.text:00003B00 ; =============== S U B R O U T I N E =======================================
.text:00003B00
.text:00003B00
.text:00003B00 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{56}' (void)
.text:00003B00                 public ?Release@CFilterCoder@@WDI@AGKXZ
.text:00003B00 ?Release@CFilterCoder@@WDI@AGKXZ proc near ; DATA XREF: .rdata:00001640o
.text:00003B00
.text:00003B00 arg_0           = dword ptr  4
.text:00003B00
.text:00003B00                 sub     [esp+arg_0], 38h ; '8'
.text:00003B05                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:00003B05 ?Release@CFilterCoder@@WDI@AGKXZ endp
.text:00003B05
.text:00003B05 ; ---------------------------------------------------------------------------
.text:00003B0A                 align 4
.text:00003B0A _text           ends
.text:00003B0A
.text:00003B0C ; ===========================================================================
.text:00003B0C
.text:00003B0C ; Segment type: Pure code
.text:00003B0C ; Segment permissions: Read/Execute
.text:00003B0C _text           segment para public 'CODE' use32
.text:00003B0C                 assume cs:_text
.text:00003B0C                 ;org 3B0Ch
.text:00003B0C ; COMDAT (pick any)
.text:00003B0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B0C
.text:00003B0C ; =============== S U B R O U T I N E =======================================
.text:00003B0C
.text:00003B0C
.text:00003B0C ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{48}' (void)
.text:00003B0C                 public ?AddRef@CFilterCoder@@WDA@AGKXZ
.text:00003B0C ?AddRef@CFilterCoder@@WDA@AGKXZ proc near ; DATA XREF: .rdata:00001664o
.text:00003B0C
.text:00003B0C arg_0           = dword ptr  4
.text:00003B0C
.text:00003B0C                 sub     [esp+arg_0], 30h ; '0'
.text:00003B11                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003B11 ?AddRef@CFilterCoder@@WDA@AGKXZ endp
.text:00003B11
.text:00003B11 ; ---------------------------------------------------------------------------
.text:00003B16                 align 4
.text:00003B16 _text           ends
.text:00003B16
.text:00003B18 ; ===========================================================================
.text:00003B18
.text:00003B18 ; Segment type: Pure code
.text:00003B18 ; Segment permissions: Read/Execute
.text:00003B18 _text           segment para public 'CODE' use32
.text:00003B18                 assume cs:_text
.text:00003B18                 ;org 3B18h
.text:00003B18 ; COMDAT (pick any)
.text:00003B18                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B18
.text:00003B18 ; =============== S U B R O U T I N E =======================================
.text:00003B18
.text:00003B18
.text:00003B18 ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00003B18                 public ?QueryInterface@CFilterCoder@@WM@AGJABU_GUID@@PAPAX@Z
.text:00003B18 ?QueryInterface@CFilterCoder@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00003B18                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ICompressSetInStream'}o
.text:00003B18
.text:00003B18 arg_0           = dword ptr  4
.text:00003B18
.text:00003B18                 sub     [esp+arg_0], 0Ch
.text:00003B1D                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:00003B1D ?QueryInterface@CFilterCoder@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00003B1D
.text:00003B1D ; ---------------------------------------------------------------------------
.text:00003B22                 align 4
.text:00003B22 _text           ends
.text:00003B22
.text:00003B24 ; ===========================================================================
.text:00003B24
.text:00003B24 ; Segment type: Pure code
.text:00003B24 ; Segment permissions: Read/Execute
.text:00003B24 _text           segment para public 'CODE' use32
.text:00003B24                 assume cs:_text
.text:00003B24                 ;org 3B24h
.text:00003B24 ; COMDAT (pick any)
.text:00003B24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B24
.text:00003B24 ; =============== S U B R O U T I N E =======================================
.text:00003B24
.text:00003B24
.text:00003B24 ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{44}' (struct _GUID const &, void * *)
.text:00003B24                 public ?QueryInterface@CFilterCoder@@WCM@AGJABU_GUID@@PAPAX@Z
.text:00003B24 ?QueryInterface@CFilterCoder@@WCM@AGJABU_GUID@@PAPAX@Z proc near
.text:00003B24                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00003B24
.text:00003B24 arg_0           = dword ptr  4
.text:00003B24
.text:00003B24                 sub     [esp+arg_0], 2Ch ; ','
.text:00003B29                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:00003B29 ?QueryInterface@CFilterCoder@@WCM@AGJABU_GUID@@PAPAX@Z endp
.text:00003B29
.text:00003B29 ; ---------------------------------------------------------------------------
.text:00003B2E                 align 10h
.text:00003B2E _text           ends
.text:00003B2E
.text:00003B30 ; ===========================================================================
.text:00003B30
.text:00003B30 ; Segment type: Pure code
.text:00003B30 ; Segment permissions: Read/Execute
.text:00003B30 _text           segment para public 'CODE' use32
.text:00003B30                 assume cs:_text
.text:00003B30                 ;org 3B30h
.text:00003B30 ; COMDAT (pick any)
.text:00003B30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B30
.text:00003B30 ; =============== S U B R O U T I N E =======================================
.text:00003B30
.text:00003B30
.text:00003B30 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::Release`adjustor{28}' (void)
.text:00003B30                 public ?Release@CFilterCoder@@WBM@AGKXZ
.text:00003B30 ?Release@CFilterCoder@@WBM@AGKXZ proc near ; DATA XREF: .rdata:000016D4o
.text:00003B30
.text:00003B30 arg_0           = dword ptr  4
.text:00003B30
.text:00003B30                 sub     [esp+arg_0], 1Ch
.text:00003B35                 jmp     ?Release@CFilterCoder@@UAGKXZ ; CFilterCoder::Release(void)
.text:00003B35 ?Release@CFilterCoder@@WBM@AGKXZ endp
.text:00003B35
.text:00003B35 ; ---------------------------------------------------------------------------
.text:00003B3A                 align 4
.text:00003B3A _text           ends
.text:00003B3A
.text:00003B3C ; ===========================================================================
.text:00003B3C
.text:00003B3C ; Segment type: Pure code
.text:00003B3C ; Segment permissions: Read/Execute
.text:00003B3C _text           segment para public 'CODE' use32
.text:00003B3C                 assume cs:_text
.text:00003B3C                 ;org 3B3Ch
.text:00003B3C ; COMDAT (pick any)
.text:00003B3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B3C
.text:00003B3C ; =============== S U B R O U T I N E =======================================
.text:00003B3C
.text:00003B3C
.text:00003B3C ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{20}' (void)
.text:00003B3C                 public ?AddRef@CFilterCoder@@WBE@AGKXZ
.text:00003B3C ?AddRef@CFilterCoder@@WBE@AGKXZ proc near ; DATA XREF: .rdata:000016F8o
.text:00003B3C
.text:00003B3C arg_0           = dword ptr  4
.text:00003B3C
.text:00003B3C                 sub     [esp+arg_0], 14h
.text:00003B41                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003B41 ?AddRef@CFilterCoder@@WBE@AGKXZ endp
.text:00003B41
.text:00003B41 ; ---------------------------------------------------------------------------
.text:00003B46                 align 4
.text:00003B46 _text           ends
.text:00003B46
.text:00003B48 ; ===========================================================================
.text:00003B48
.text:00003B48 ; Segment type: Pure code
.text:00003B48 ; Segment permissions: Read/Execute
.text:00003B48 _text           segment para public 'CODE' use32
.text:00003B48                 assume cs:_text
.text:00003B48                 ;org 3B48h
.text:00003B48 ; COMDAT (pick any)
.text:00003B48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B48
.text:00003B48 ; =============== S U B R O U T I N E =======================================
.text:00003B48
.text:00003B48
.text:00003B48 ; [thunk]:public: virtual unsigned long __stdcall CFilterCoder::AddRef`adjustor{52}' (void)
.text:00003B48                 public ?AddRef@CFilterCoder@@WDE@AGKXZ
.text:00003B48 ?AddRef@CFilterCoder@@WDE@AGKXZ proc near ; DATA XREF: .rdata:00001650o
.text:00003B48
.text:00003B48 arg_0           = dword ptr  4
.text:00003B48
.text:00003B48                 sub     [esp+arg_0], 34h ; '4'
.text:00003B4D                 jmp     ?AddRef@CFilterCoder@@UAGKXZ ; CFilterCoder::AddRef(void)
.text:00003B4D ?AddRef@CFilterCoder@@WDE@AGKXZ endp
.text:00003B4D
.text:00003B4D ; ---------------------------------------------------------------------------
.text:00003B52                 align 4
.text:00003B52 _text           ends
.text:00003B52
.text:00003B54 ; ===========================================================================
.text:00003B54
.text:00003B54 ; Segment type: Pure code
.text:00003B54 ; Segment permissions: Read/Execute
.text:00003B54 _text           segment para public 'CODE' use32
.text:00003B54                 assume cs:_text
.text:00003B54                 ;org 3B54h
.text:00003B54 ; COMDAT (pick any)
.text:00003B54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B54
.text:00003B54 ; =============== S U B R O U T I N E =======================================
.text:00003B54
.text:00003B54
.text:00003B54 ; [thunk]:public: virtual long __stdcall CFilterCoder::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:00003B54                 public ?QueryInterface@CFilterCoder@@WBA@AGJABU_GUID@@PAPAX@Z
.text:00003B54 ?QueryInterface@CFilterCoder@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:00003B54                                         ; DATA XREF: .rdata:const CFilterCoder::`vftable'{for `ISequentialInStream'}o
.text:00003B54
.text:00003B54 arg_0           = dword ptr  4
.text:00003B54
.text:00003B54                 sub     [esp+arg_0], 10h
.text:00003B59                 jmp     ?QueryInterface@CFilterCoder@@UAGJABU_GUID@@PAPAX@Z ; CFilterCoder::QueryInterface(_GUID const &,void * *)
.text:00003B59 ?QueryInterface@CFilterCoder@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:00003B59
.text:00003B59 _text           ends
.text:00003B59
UNDEF:00003B60 ; ===========================================================================
UNDEF:00003B60
UNDEF:00003B60 ; Segment type: Externs
UNDEF:00003B60 ; UNDEF
UNDEF:00003B60                 extrn __RTC_Shutdown:near
UNDEF:00003B60                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00003B64                 extrn __RTC_InitBase:near
UNDEF:00003B64                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00003B68                 extrn __RTC_CheckEsp:near
UNDEF:00003B68                                         ; CODE XREF: CFilterCoder::Alloc(void)+9Cp
UNDEF:00003B68                                         ; CFilterCoder::Init_and_Alloc(void)+42p ...
UNDEF:00003B6C ; __stdcall MidAlloc(x)
UNDEF:00003B6C                 extrn _MidAlloc@4:near  ; CODE XREF: CAlignedMidBuffer::AllocAlignedMask(uint,uint)+2Ap
UNDEF:00003B70 ; __stdcall MidFree(x)
UNDEF:00003B70                 extrn _MidFree@4:near   ; CODE XREF: CAlignedMidBuffer::AllocAlignedMask(uint,uint)+14p
UNDEF:00003B70                                         ; CAlignedMidBuffer::~CAlignedMidBuffer(void)+14p
UNDEF:00003B74                 extrn ___security_cookie:near
UNDEF:00003B74                                         ; DATA XREF: CFilterCoder::CFilterCoder(bool)+19r
UNDEF:00003B74                                         ; CFilterCoder::~CFilterCoder(void)+19r
UNDEF:00003B78                 extrn ___CxxFrameHandler3:near
UNDEF:00003B78                                         ; CODE XREF: __ehhandler$??0CFilterCoder@@QAE@_N@Z+16j
UNDEF:00003B78                                         ; __ehhandler$??1CFilterCoder@@QAE@XZ+16j
UNDEF:00003B7C ; __fastcall __security_check_cookie(x)
UNDEF:00003B7C                 extrn @__security_check_cookie@4:near
UNDEF:00003B7C                                         ; CODE XREF: __ehhandler$??0CFilterCoder@@QAE@_N@Z+Cp
UNDEF:00003B7C                                         ; __ehhandler$??1CFilterCoder@@QAE@XZ+Cp
UNDEF:00003B80 ; const type_info::`vftable'
UNDEF:00003B80                 extrn ??_7type_info@@6B@:near
UNDEF:00003B80                                         ; DATA XREF: .data:CFilterCoder `RTTI Type Descriptor'o
UNDEF:00003B80                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00003B84                 extrn _IID_ICompressSetDecoderProperties2:near
UNDEF:00003B84                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_29A0o
UNDEF:00003B84                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+569o
UNDEF:00003B88                 extrn _IID_ICryptoResetInitVector:near
UNDEF:00003B88                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_2904o
UNDEF:00003B88                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+4CDo
UNDEF:00003B8C                 extrn _IID_ICompressWriteCoderProperties:near
UNDEF:00003B8C                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_2868o
UNDEF:00003B8C                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+431o
UNDEF:00003B90                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:00003B90                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_27CCo
UNDEF:00003B90                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+395o
UNDEF:00003B94                 extrn _IID_ICryptoProperties:near
UNDEF:00003B94                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_2730o
UNDEF:00003B94                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+2F9o
UNDEF:00003B98                 extrn _IID_ICryptoSetPassword:near
UNDEF:00003B98                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_269Ao
UNDEF:00003B98                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *)+25Do
UNDEF:00003B9C                 extrn _IID_ICompressSetBufSize:near
UNDEF:00003B9C                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_2663o
UNDEF:00003BA0                 extrn _IID_IOutStreamFinish:near
UNDEF:00003BA0                                         ; DATA XREF: CFilterCoder::OutStreamFinish(void)+18Co
UNDEF:00003BA0                                         ; CFilterCoder::QueryInterface(_GUID const &,void * *):loc_262Co
UNDEF:00003BA4                 extrn _IID_ISequentialOutStream:near
UNDEF:00003BA4                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_25F5o
UNDEF:00003BA8                 extrn _IID_ICompressSetOutStream:near
UNDEF:00003BA8                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_25BEo
UNDEF:00003BAC                 extrn _IID_ISequentialInStream:near
UNDEF:00003BAC                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_2587o
UNDEF:00003BB0                 extrn _IID_ICompressSetInStream:near
UNDEF:00003BB0                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_2550o
UNDEF:00003BB4                 extrn _IID_ICompressInitEncoder:near
UNDEF:00003BB4                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_2519o
UNDEF:00003BB8                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00003BB8                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_24E2o
UNDEF:00003BBC                 extrn _IID_ICompressCoder:near
UNDEF:00003BBC                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *):loc_24C3o
UNDEF:00003BC0 ; const IID IID_IUnknown
UNDEF:00003BC0                 extrn _IID_IUnknown:near
UNDEF:00003BC0                                         ; DATA XREF: CFilterCoder::QueryInterface(_GUID const &,void * *)+20o
UNDEF:00003BC4 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00003BC4                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00003BC8 ; void __cdecl operator delete(void *)
UNDEF:00003BC8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: CFilterCoder::`scalar deleting destructor'(uint)+22p
UNDEF:00003BCC                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00003BCC                                         ; .rdata:00002BBCo ...
UNDEF:00003BD0 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00003BD0                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00003BD0                                         ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+217p
UNDEF:00003BD4 ; __int32 __stdcall ReadStream(struct ISequentialInStream *, void *, unsigned int *)
UNDEF:00003BD4                 extrn ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z:near
UNDEF:00003BD4                                         ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+A0p
UNDEF:00003BD4                                         ; CFilterCoder::Read(void *,uint,uint *)+18Dp
UNDEF:00003BD8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00003BD8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00003BD8                                         ; CODE XREF: CFilterCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2CDp
UNDEF:00003BD8                                         ; CFilterCoder::Flush2(void)+1ABp ...
UNDEF:00003BDC ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00003BDC                 extrn _memcpy:near      ; CODE XREF: CFilterCoder::Write(void const *,uint,uint *)+8Dp
UNDEF:00003BDC                                         ; CFilterCoder::Read(void *,uint,uint *)+ACp
UNDEF:00003BDC
UNDEF:00003BDC
UNDEF:00003BDC                 end