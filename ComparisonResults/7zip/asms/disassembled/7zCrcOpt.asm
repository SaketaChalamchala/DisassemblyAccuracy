.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : D488E55C4C21E348EB1AC412E1034734
.text:00000000 ; Input CRC32 : C96A1769
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zCrcOpt.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __fastcall CrcUpdateT4(x, x, x, x)
.text:00000000                 public @CrcUpdateT4@16
.text:00000000 @CrcUpdateT4@16 proc near
.text:00000000
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 0Ch
.text:00000006                 push    esi
.text:00000007                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000000E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000015                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000001C                 mov     [ebp+var_8], edx
.text:0000001F                 mov     [ebp+var_4], ecx
.text:00000022                 mov     eax, [ebp+var_8]
.text:00000025                 mov     [ebp+var_C], eax
.text:00000028                 jmp     short loc_3C
.text:0000002A ; ---------------------------------------------------------------------------
.text:0000002A
.text:0000002A loc_2A:                                 ; CODE XREF: CrcUpdateT4(x,x,x,x)+68j
.text:0000002A                 mov     ecx, [ebp+arg_0]
.text:0000002D                 sub     ecx, 1
.text:00000030                 mov     [ebp+arg_0], ecx
.text:00000033                 mov     edx, [ebp+var_C]
.text:00000036                 add     edx, 1
.text:00000039                 mov     [ebp+var_C], edx
.text:0000003C
.text:0000003C loc_3C:                                 ; CODE XREF: CrcUpdateT4(x,x,x,x)+28j
.text:0000003C                 cmp     [ebp+arg_0], 0
.text:00000040                 jbe     short loc_6A
.text:00000042                 mov     eax, [ebp+var_C]
.text:00000045                 and     eax, 3
.text:00000048                 jz      short loc_6A
.text:0000004A                 mov     ecx, [ebp+var_C]
.text:0000004D                 movzx   edx, byte ptr [ecx]
.text:00000050                 xor     edx, [ebp+var_4]
.text:00000053                 and     edx, 0FFh
.text:00000059                 mov     eax, [ebp+var_4]
.text:0000005C                 shr     eax, 8
.text:0000005F                 mov     ecx, [ebp+arg_4]
.text:00000062                 xor     eax, [ecx+edx*4]
.text:00000065                 mov     [ebp+var_4], eax
.text:00000068                 jmp     short loc_2A
.text:0000006A ; ---------------------------------------------------------------------------
.text:0000006A
.text:0000006A loc_6A:                                 ; CODE XREF: CrcUpdateT4(x,x,x,x)+40j
.text:0000006A                                         ; CrcUpdateT4(x,x,x,x)+48j
.text:0000006A                 jmp     short loc_7E
.text:0000006C ; ---------------------------------------------------------------------------
.text:0000006C
.text:0000006C loc_6C:                                 ; CODE XREF: CrcUpdateT4(x,x,x,x)+DCj
.text:0000006C                 mov     edx, [ebp+arg_0]
.text:0000006F                 sub     edx, 4
.text:00000072                 mov     [ebp+arg_0], edx
.text:00000075                 mov     eax, [ebp+var_C]
.text:00000078                 add     eax, 4
.text:0000007B                 mov     [ebp+var_C], eax
.text:0000007E
.text:0000007E loc_7E:                                 ; CODE XREF: CrcUpdateT4(x,x,x,x):loc_6Aj
.text:0000007E                 cmp     [ebp+arg_0], 4
.text:00000082                 jb      short loc_DE
.text:00000084                 mov     ecx, [ebp+var_C]
.text:00000087                 mov     edx, [ebp+var_4]
.text:0000008A                 xor     edx, [ecx]
.text:0000008C                 mov     [ebp+var_4], edx
.text:0000008F                 mov     eax, [ebp+var_4]
.text:00000092                 and     eax, 0FFh
.text:00000097                 mov     ecx, [ebp+var_4]
.text:0000009A                 shr     ecx, 8
.text:0000009D                 and     ecx, 0FFh
.text:000000A3                 mov     edx, [ebp+arg_4]
.text:000000A6                 mov     esi, [ebp+arg_4]
.text:000000A9                 mov     eax, [edx+eax*4+0C00h]
.text:000000B0                 xor     eax, [esi+ecx*4+800h]
.text:000000B7                 mov     ecx, [ebp+var_4]
.text:000000BA                 shr     ecx, 10h
.text:000000BD                 and     ecx, 0FFh
.text:000000C3                 mov     edx, [ebp+arg_4]
.text:000000C6                 xor     eax, [edx+ecx*4+400h]
.text:000000CD                 mov     ecx, [ebp+var_4]
.text:000000D0                 shr     ecx, 18h
.text:000000D3                 mov     edx, [ebp+arg_4]
.text:000000D6                 xor     eax, [edx+ecx*4]
.text:000000D9                 mov     [ebp+var_4], eax
.text:000000DC                 jmp     short loc_6C
.text:000000DE ; ---------------------------------------------------------------------------
.text:000000DE
.text:000000DE loc_DE:                                 ; CODE XREF: CrcUpdateT4(x,x,x,x)+82j
.text:000000DE                 jmp     short loc_F2
.text:000000E0 ; ---------------------------------------------------------------------------
.text:000000E0
.text:000000E0 loc_E0:                                 ; CODE XREF: CrcUpdateT4(x,x,x,x)+115j
.text:000000E0                 mov     eax, [ebp+arg_0]
.text:000000E3                 sub     eax, 1
.text:000000E6                 mov     [ebp+arg_0], eax
.text:000000E9                 mov     ecx, [ebp+var_C]
.text:000000EC                 add     ecx, 1
.text:000000EF                 mov     [ebp+var_C], ecx
.text:000000F2
.text:000000F2 loc_F2:                                 ; CODE XREF: CrcUpdateT4(x,x,x,x):loc_DEj
.text:000000F2                 cmp     [ebp+arg_0], 0
.text:000000F6                 jbe     short loc_117
.text:000000F8                 mov     edx, [ebp+var_C]
.text:000000FB                 movzx   eax, byte ptr [edx]
.text:000000FE                 xor     eax, [ebp+var_4]
.text:00000101                 and     eax, 0FFh
.text:00000106                 mov     ecx, [ebp+var_4]
.text:00000109                 shr     ecx, 8
.text:0000010C                 mov     edx, [ebp+arg_4]
.text:0000010F                 xor     ecx, [edx+eax*4]
.text:00000112                 mov     [ebp+var_4], ecx
.text:00000115                 jmp     short loc_E0
.text:00000117 ; ---------------------------------------------------------------------------
.text:00000117
.text:00000117 loc_117:                                ; CODE XREF: CrcUpdateT4(x,x,x,x)+F6j
.text:00000117                 mov     eax, [ebp+var_4]
.text:0000011A                 pop     esi
.text:0000011B                 mov     esp, ebp
.text:0000011D                 pop     ebp
.text:0000011E                 retn    8
.text:0000011E @CrcUpdateT4@16 endp
.text:0000011E
.text:0000011E ; ---------------------------------------------------------------------------
.text:00000121                 align 10h
.text:00000130
.text:00000130 ; =============== S U B R O U T I N E =======================================
.text:00000130
.text:00000130 ; Attributes: bp-based frame
.text:00000130
.text:00000130 ; __fastcall CrcUpdateT8(x, x, x, x)
.text:00000130                 public @CrcUpdateT8@16
.text:00000130 @CrcUpdateT8@16 proc near
.text:00000130
.text:00000130 var_10          = dword ptr -10h
.text:00000130 var_C           = dword ptr -0Ch
.text:00000130 var_8           = dword ptr -8
.text:00000130 var_4           = dword ptr -4
.text:00000130 arg_0           = dword ptr  8
.text:00000130 arg_4           = dword ptr  0Ch
.text:00000130
.text:00000130                 push    ebp
.text:00000131                 mov     ebp, esp
.text:00000133                 sub     esp, 10h
.text:00000136                 push    esi
.text:00000137                 mov     eax, 0CCCCCCCCh
.text:0000013C                 mov     [ebp+var_10], eax
.text:0000013F                 mov     [ebp+var_C], eax
.text:00000142                 mov     [ebp+var_8], eax
.text:00000145                 mov     [ebp+var_4], eax
.text:00000148                 mov     [ebp+var_8], edx
.text:0000014B                 mov     [ebp+var_4], ecx
.text:0000014E                 mov     eax, [ebp+var_8]
.text:00000151                 mov     [ebp+var_C], eax
.text:00000154                 jmp     short loc_168
.text:00000156 ; ---------------------------------------------------------------------------
.text:00000156
.text:00000156 loc_156:                                ; CODE XREF: CrcUpdateT8(x,x,x,x)+64j
.text:00000156                 mov     ecx, [ebp+arg_0]
.text:00000159                 sub     ecx, 1
.text:0000015C                 mov     [ebp+arg_0], ecx
.text:0000015F                 mov     edx, [ebp+var_C]
.text:00000162                 add     edx, 1
.text:00000165                 mov     [ebp+var_C], edx
.text:00000168
.text:00000168 loc_168:                                ; CODE XREF: CrcUpdateT8(x,x,x,x)+24j
.text:00000168                 cmp     [ebp+arg_0], 0
.text:0000016C                 jbe     short loc_196
.text:0000016E                 mov     eax, [ebp+var_C]
.text:00000171                 and     eax, 7
.text:00000174                 jz      short loc_196
.text:00000176                 mov     ecx, [ebp+var_C]
.text:00000179                 movzx   edx, byte ptr [ecx]
.text:0000017C                 xor     edx, [ebp+var_4]
.text:0000017F                 and     edx, 0FFh
.text:00000185                 mov     eax, [ebp+var_4]
.text:00000188                 shr     eax, 8
.text:0000018B                 mov     ecx, [ebp+arg_4]
.text:0000018E                 xor     eax, [ecx+edx*4]
.text:00000191                 mov     [ebp+var_4], eax
.text:00000194                 jmp     short loc_156
.text:00000196 ; ---------------------------------------------------------------------------
.text:00000196
.text:00000196 loc_196:                                ; CODE XREF: CrcUpdateT8(x,x,x,x)+3Cj
.text:00000196                                         ; CrcUpdateT8(x,x,x,x)+44j
.text:00000196                 jmp     short loc_1AA
.text:00000198 ; ---------------------------------------------------------------------------
.text:00000198
.text:00000198 loc_198:                                ; CODE XREF: CrcUpdateT8(x,x,x,x)+138j
.text:00000198                 mov     edx, [ebp+arg_0]
.text:0000019B                 sub     edx, 8
.text:0000019E                 mov     [ebp+arg_0], edx
.text:000001A1                 mov     eax, [ebp+var_C]
.text:000001A4                 add     eax, 8
.text:000001A7                 mov     [ebp+var_C], eax
.text:000001AA
.text:000001AA loc_1AA:                                ; CODE XREF: CrcUpdateT8(x,x,x,x):loc_196j
.text:000001AA                 cmp     [ebp+arg_0], 8
.text:000001AE                 jb      loc_26D
.text:000001B4                 mov     ecx, [ebp+var_C]
.text:000001B7                 mov     edx, [ebp+var_4]
.text:000001BA                 xor     edx, [ecx]
.text:000001BC                 mov     [ebp+var_4], edx
.text:000001BF                 mov     eax, [ebp+var_4]
.text:000001C2                 and     eax, 0FFh
.text:000001C7                 mov     ecx, [ebp+var_4]
.text:000001CA                 shr     ecx, 8
.text:000001CD                 and     ecx, 0FFh
.text:000001D3                 mov     edx, [ebp+arg_4]
.text:000001D6                 mov     esi, [ebp+arg_4]
.text:000001D9                 mov     eax, [edx+eax*4+1C00h]
.text:000001E0                 xor     eax, [esi+ecx*4+1800h]
.text:000001E7                 mov     ecx, [ebp+var_4]
.text:000001EA                 shr     ecx, 10h
.text:000001ED                 and     ecx, 0FFh
.text:000001F3                 mov     edx, [ebp+arg_4]
.text:000001F6                 xor     eax, [edx+ecx*4+1400h]
.text:000001FD                 mov     ecx, [ebp+var_4]
.text:00000200                 shr     ecx, 18h
.text:00000203                 mov     edx, [ebp+arg_4]
.text:00000206                 xor     eax, [edx+ecx*4+1000h]
.text:0000020D                 mov     [ebp+var_4], eax
.text:00000210                 mov     eax, [ebp+var_C]
.text:00000213                 mov     ecx, [eax+4]
.text:00000216                 mov     [ebp+var_10], ecx
.text:00000219                 mov     edx, [ebp+var_10]
.text:0000021C                 and     edx, 0FFh
.text:00000222                 mov     eax, [ebp+var_10]
.text:00000225                 shr     eax, 8
.text:00000228                 and     eax, 0FFh
.text:0000022D                 mov     ecx, [ebp+arg_4]
.text:00000230                 mov     esi, [ebp+arg_4]
.text:00000233                 mov     edx, [ecx+edx*4+0C00h]
.text:0000023A                 xor     edx, [esi+eax*4+800h]
.text:00000241                 mov     eax, [ebp+var_10]
.text:00000244                 shr     eax, 10h
.text:00000247                 and     eax, 0FFh
.text:0000024C                 mov     ecx, [ebp+arg_4]
.text:0000024F                 xor     edx, [ecx+eax*4+400h]
.text:00000256                 mov     eax, [ebp+var_10]
.text:00000259                 shr     eax, 18h
.text:0000025C                 mov     ecx, [ebp+arg_4]
.text:0000025F                 xor     edx, [ecx+eax*4]
.text:00000262                 xor     edx, [ebp+var_4]
.text:00000265                 mov     [ebp+var_4], edx
.text:00000268                 jmp     loc_198
.text:0000026D ; ---------------------------------------------------------------------------
.text:0000026D
.text:0000026D loc_26D:                                ; CODE XREF: CrcUpdateT8(x,x,x,x)+7Ej
.text:0000026D                 jmp     short loc_281
.text:0000026F ; ---------------------------------------------------------------------------
.text:0000026F
.text:0000026F loc_26F:                                ; CODE XREF: CrcUpdateT8(x,x,x,x)+175j
.text:0000026F                 mov     edx, [ebp+arg_0]
.text:00000272                 sub     edx, 1
.text:00000275                 mov     [ebp+arg_0], edx
.text:00000278                 mov     eax, [ebp+var_C]
.text:0000027B                 add     eax, 1
.text:0000027E                 mov     [ebp+var_C], eax
.text:00000281
.text:00000281 loc_281:                                ; CODE XREF: CrcUpdateT8(x,x,x,x):loc_26Dj
.text:00000281                 cmp     [ebp+arg_0], 0
.text:00000285                 jbe     short loc_2A7
.text:00000287                 mov     ecx, [ebp+var_C]
.text:0000028A                 movzx   edx, byte ptr [ecx]
.text:0000028D                 xor     edx, [ebp+var_4]
.text:00000290                 and     edx, 0FFh
.text:00000296                 mov     eax, [ebp+var_4]
.text:00000299                 shr     eax, 8
.text:0000029C                 mov     ecx, [ebp+arg_4]
.text:0000029F                 xor     eax, [ecx+edx*4]
.text:000002A2                 mov     [ebp+var_4], eax
.text:000002A5                 jmp     short loc_26F
.text:000002A7 ; ---------------------------------------------------------------------------
.text:000002A7
.text:000002A7 loc_2A7:                                ; CODE XREF: CrcUpdateT8(x,x,x,x)+155j
.text:000002A7                 mov     eax, [ebp+var_4]
.text:000002AA                 pop     esi
.text:000002AB                 mov     esp, ebp
.text:000002AD                 pop     ebp
.text:000002AE                 retn    8
.text:000002AE @CrcUpdateT8@16 endp
.text:000002AE
.text:000002AE ; ---------------------------------------------------------------------------
.text:000002B1                 align 4
.text:000002B1 _text           ends
.text:000002B1
.rtc$TMZ:000002B4 ; ===========================================================================
.rtc$TMZ:000002B4
.rtc$TMZ:000002B4 ; Segment type: Pure data
.rtc$TMZ:000002B4 ; Segment permissions: Read
.rtc$TMZ:000002B4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000002B4                 assume cs:_rtc$TMZ
.rtc$TMZ:000002B4                 ;org 2B4h
.rtc$TMZ:000002B4 ; COMDAT (pick any)
.rtc$TMZ:000002B4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000002B4 _rtc$TMZ        ends
.rtc$TMZ:000002B4
.rtc$IMZ:000002B8 ; ===========================================================================
.rtc$IMZ:000002B8
.rtc$IMZ:000002B8 ; Segment type: Pure data
.rtc$IMZ:000002B8 ; Segment permissions: Read
.rtc$IMZ:000002B8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000002B8                 assume cs:_rtc$IMZ
.rtc$IMZ:000002B8                 ;org 2B8h
.rtc$IMZ:000002B8 ; COMDAT (pick any)
.rtc$IMZ:000002B8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000002B8 _rtc$IMZ        ends
.rtc$IMZ:000002B8
UNDEF:000002C0 ; ===========================================================================
UNDEF:000002C0
UNDEF:000002C0 ; Segment type: Externs
UNDEF:000002C0 ; UNDEF
UNDEF:000002C0                 extrn __RTC_Shutdown:near
UNDEF:000002C0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000002C4                 extrn __RTC_InitBase:near
UNDEF:000002C4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000002C4
UNDEF:000002C4
UNDEF:000002C4                 end