.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : DA0DE444EC880E7BF4958EDBF61895CB
.rdata:00000000 ; Input CRC32 : 1C87BCA2
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\DeflateRegister.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG67708        db 'Deflate',0          ; DATA XREF: .rdata:00000018o
.rdata:00000008 ; struct CCodecInfo g_CodecInfo
.rdata:00000008 _g_CodecInfo    dd offset ?CreateDec@@YGPAXXZ
.rdata:00000008                                         ; DATA XREF: CRegisterCodecDeflate::CRegisterCodecDeflate(void)+Eo
.rdata:00000008                                         ; CreateDec(void)
.rdata:0000000C                 dd offset ?CreateEnc@@YGPAXXZ ; CreateEnc(void)
.rdata:00000010                 db    8
.rdata:00000011                 db    1
.rdata:00000012                 db    4
.rdata:00000013                 db    0
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 dd offset $SG67708      ; "Deflate"
.rdata:0000001C                 db    1
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020                 db    0
.rdata:00000021                 db    0
.rdata:00000022                 db    0
.rdata:00000023                 db    0
.rdata:00000024                 db    0
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000027 _rdata          ends
.rdata:00000027
.text:00000028 ; ===========================================================================
.text:00000028
.text:00000028 ; Segment type: Pure code
.text:00000028 ; Segment permissions: Read/Execute
.text:00000028 _text           segment para public 'CODE' use32
.text:00000028                 assume cs:_text
.text:00000028                 ;org 28h
.text:00000028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000028
.text:00000028 ; =============== S U B R O U T I N E =======================================
.text:00000028
.text:00000028 ; Attributes: bp-based frame
.text:00000028
.text:00000028 ; void * __stdcall CreateDec(void)
.text:00000028 ?CreateDec@@YGPAXXZ proc near           ; DATA XREF: .rdata:_g_CodecInfoo
.text:00000028
.text:00000028 var_18          = dword ptr -18h
.text:00000028 var_14          = dword ptr -14h
.text:00000028 var_10          = dword ptr -10h
.text:00000028 var_C           = dword ptr -0Ch
.text:00000028 var_4           = dword ptr -4
.text:00000028
.text:00000028                 push    ebp
.text:00000029                 mov     ebp, esp
.text:0000002B                 push    0FFFFFFFFh
.text:0000002D                 push    offset __ehhandler$?CreateDec@@YGPAXXZ
.text:00000032                 mov     eax, large fs:0
.text:00000038                 push    eax
.text:00000039                 sub     esp, 0Ch
.text:0000003C                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00000043                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000004A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000051                 mov     eax, dword ptr ds:___security_cookie
.text:00000056                 xor     eax, ebp
.text:00000058                 push    eax
.text:00000059                 lea     eax, [ebp+var_C]
.text:0000005C                 mov     large fs:0, eax
.text:00000062                 push    0D70h           ; unsigned int
.text:00000067                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000006C                 add     esp, 4
.text:0000006F                 mov     [ebp+var_14], eax
.text:00000072                 mov     [ebp+var_4], 0
.text:00000079                 cmp     [ebp+var_14], 0
.text:0000007D                 jz      short loc_8C
.text:0000007F                 mov     ecx, [ebp+var_14] ; this
.text:00000082                 call    ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)
.text:00000087                 mov     [ebp+var_18], eax
.text:0000008A                 jmp     short loc_93
.text:0000008C ; ---------------------------------------------------------------------------
.text:0000008C
.text:0000008C loc_8C:                                 ; CODE XREF: CreateDec(void)+55j
.text:0000008C                 mov     [ebp+var_18], 0
.text:00000093
.text:00000093 loc_93:                                 ; CODE XREF: CreateDec(void)+62j
.text:00000093                 mov     eax, [ebp+var_18]
.text:00000096                 mov     [ebp+var_10], eax
.text:00000099                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000A0                 mov     eax, [ebp+var_10]
.text:000000A3                 mov     ecx, [ebp+var_C]
.text:000000A6                 mov     large fs:0, ecx
.text:000000AD                 pop     ecx
.text:000000AE                 add     esp, 18h
.text:000000B1                 cmp     ebp, esp
.text:000000B3                 call    __RTC_CheckEsp
.text:000000B8                 mov     esp, ebp
.text:000000BA                 pop     ebp
.text:000000BB                 retn
.text:000000BB ?CreateDec@@YGPAXXZ endp
.text:000000BB
.text:000000BB ; ---------------------------------------------------------------------------
.text:000000BC                 db 0Ch dup(0CCh)
.text:000000C8
.text:000000C8 ; =============== S U B R O U T I N E =======================================
.text:000000C8
.text:000000C8 ; Attributes: bp-based frame
.text:000000C8
.text:000000C8 ; void * __stdcall CreateEnc(void)
.text:000000C8 ?CreateEnc@@YGPAXXZ proc near           ; DATA XREF: .rdata:0000000Co
.text:000000C8
.text:000000C8 var_18          = dword ptr -18h
.text:000000C8 var_14          = dword ptr -14h
.text:000000C8 var_10          = dword ptr -10h
.text:000000C8 var_C           = dword ptr -0Ch
.text:000000C8 var_4           = dword ptr -4
.text:000000C8
.text:000000C8                 push    ebp
.text:000000C9                 mov     ebp, esp
.text:000000CB                 push    0FFFFFFFFh
.text:000000CD                 push    offset __ehhandler$?CreateEnc@@YGPAXXZ
.text:000000D2                 mov     eax, large fs:0
.text:000000D8                 push    eax
.text:000000D9                 sub     esp, 0Ch
.text:000000DC                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000000E3                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000000EA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000F1                 mov     eax, dword ptr ds:___security_cookie
.text:000000F6                 xor     eax, ebp
.text:000000F8                 push    eax
.text:000000F9                 lea     eax, [ebp+var_C]
.text:000000FC                 mov     large fs:0, eax
.text:00000102                 push    9B00h           ; unsigned int
.text:00000107                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000010C                 add     esp, 4
.text:0000010F                 mov     [ebp+var_14], eax
.text:00000112                 mov     [ebp+var_4], 0
.text:00000119                 cmp     [ebp+var_14], 0
.text:0000011D                 jz      short loc_12C
.text:0000011F                 mov     ecx, [ebp+var_14] ; this
.text:00000122                 call    ??0CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)
.text:00000127                 mov     [ebp+var_18], eax
.text:0000012A                 jmp     short loc_133
.text:0000012C ; ---------------------------------------------------------------------------
.text:0000012C
.text:0000012C loc_12C:                                ; CODE XREF: CreateEnc(void)+55j
.text:0000012C                 mov     [ebp+var_18], 0
.text:00000133
.text:00000133 loc_133:                                ; CODE XREF: CreateEnc(void)+62j
.text:00000133                 mov     eax, [ebp+var_18]
.text:00000136                 mov     [ebp+var_10], eax
.text:00000139                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000140                 mov     eax, [ebp+var_10]
.text:00000143                 mov     ecx, [ebp+var_C]
.text:00000146                 mov     large fs:0, ecx
.text:0000014D                 pop     ecx
.text:0000014E                 add     esp, 18h
.text:00000151                 cmp     ebp, esp
.text:00000153                 call    __RTC_CheckEsp
.text:00000158                 mov     esp, ebp
.text:0000015A                 pop     ebp
.text:0000015B                 retn
.text:0000015B ?CreateEnc@@YGPAXXZ endp
.text:0000015B
.text:0000015B _text           ends
.text:0000015B
.text$x:0000015C ; ===========================================================================
.text$x:0000015C
.text$x:0000015C ; Segment type: Pure code
.text$x:0000015C ; Segment permissions: Read/Execute
.text$x:0000015C _text$x         segment para public 'CODE' use32
.text$x:0000015C                 assume cs:_text$x
.text$x:0000015C                 ;org 15Ch
.text$x:0000015C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000015C
.text$x:0000015C ; =============== S U B R O U T I N E =======================================
.text$x:0000015C
.text$x:0000015C
.text$x:0000015C __unwindfunclet$?CreateDec@@YGPAXXZ$0 proc near
.text$x:0000015C                                         ; DATA XREF: .xdata$x:000001ACo
.text$x:0000015C                 mov     eax, [ebp-14h]
.text$x:0000015F                 push    eax             ; void *
.text$x:00000160                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000165                 pop     ecx
.text$x:00000166                 retn
.text$x:00000166 __unwindfunclet$?CreateDec@@YGPAXXZ$0 endp
.text$x:00000166
.text$x:00000167
.text$x:00000167 ; =============== S U B R O U T I N E =======================================
.text$x:00000167
.text$x:00000167
.text$x:00000167 __ehhandler$?CreateDec@@YGPAXXZ proc near ; DATA XREF: CreateDec(void)+5o
.text$x:00000167
.text$x:00000167 arg_4           = dword ptr  8
.text$x:00000167
.text$x:00000167                 mov     edx, [esp+arg_4]
.text$x:0000016B                 lea     eax, [edx+0Ch]
.text$x:0000016E                 mov     ecx, [edx-10h]
.text$x:00000171                 xor     ecx, eax
.text$x:00000173                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000178                 mov     eax, offset __ehfuncinfo$?CreateDec@@YGPAXXZ
.text$x:0000017D                 jmp     ___CxxFrameHandler3
.text$x:0000017D __ehhandler$?CreateDec@@YGPAXXZ endp
.text$x:0000017D
.text$x:00000182
.text$x:00000182 ; =============== S U B R O U T I N E =======================================
.text$x:00000182
.text$x:00000182
.text$x:00000182 __unwindfunclet$?CreateEnc@@YGPAXXZ$0 proc near
.text$x:00000182                                         ; DATA XREF: .xdata$x:000001D8o
.text$x:00000182                 mov     eax, [ebp-14h]
.text$x:00000185                 push    eax             ; void *
.text$x:00000186                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000018B                 pop     ecx
.text$x:0000018C                 retn
.text$x:0000018C __unwindfunclet$?CreateEnc@@YGPAXXZ$0 endp
.text$x:0000018C
.text$x:0000018D
.text$x:0000018D ; =============== S U B R O U T I N E =======================================
.text$x:0000018D
.text$x:0000018D
.text$x:0000018D __ehhandler$?CreateEnc@@YGPAXXZ proc near ; DATA XREF: CreateEnc(void)+5o
.text$x:0000018D
.text$x:0000018D arg_4           = dword ptr  8
.text$x:0000018D
.text$x:0000018D                 mov     edx, [esp+arg_4]
.text$x:00000191                 lea     eax, [edx+0Ch]
.text$x:00000194                 mov     ecx, [edx-10h]
.text$x:00000197                 xor     ecx, eax
.text$x:00000199                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000019E                 mov     eax, offset __ehfuncinfo$?CreateEnc@@YGPAXXZ
.text$x:000001A3                 jmp     ___CxxFrameHandler3
.text$x:000001A3 __ehhandler$?CreateEnc@@YGPAXXZ endp
.text$x:000001A3
.text$x:000001A3 _text$x         ends
.text$x:000001A3
.xdata$x:000001A8 ; ===========================================================================
.xdata$x:000001A8
.xdata$x:000001A8 ; Segment type: Pure data
.xdata$x:000001A8 ; Segment permissions: Read
.xdata$x:000001A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000001A8                 assume cs:_xdata$x
.xdata$x:000001A8                 ;org 1A8h
.xdata$x:000001A8 __unwindtable$?CreateDec@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:000001B8o
.xdata$x:000001A9                 db 0FFh
.xdata$x:000001AA                 db 0FFh
.xdata$x:000001AB                 db 0FFh
.xdata$x:000001AC                 dd offset __unwindfunclet$?CreateDec@@YGPAXXZ$0
.xdata$x:000001B0 __ehfuncinfo$?CreateDec@@YGPAXXZ db  22h ; "
.xdata$x:000001B0                                         ; DATA XREF: __ehhandler$?CreateDec@@YGPAXXZ+11o
.xdata$x:000001B1                 db    5
.xdata$x:000001B2                 db  93h ; ô
.xdata$x:000001B3                 db  19h
.xdata$x:000001B4                 db    1
.xdata$x:000001B5                 db    0
.xdata$x:000001B6                 db    0
.xdata$x:000001B7                 db    0
.xdata$x:000001B8                 dd offset __unwindtable$?CreateDec@@YGPAXXZ
.xdata$x:000001BC                 db    0
.xdata$x:000001BD                 db    0
.xdata$x:000001BE                 db    0
.xdata$x:000001BF                 db    0
.xdata$x:000001C0                 db    0
.xdata$x:000001C1                 db    0
.xdata$x:000001C2                 db    0
.xdata$x:000001C3                 db    0
.xdata$x:000001C4                 db    0
.xdata$x:000001C5                 db    0
.xdata$x:000001C6                 db    0
.xdata$x:000001C7                 db    0
.xdata$x:000001C8                 db    0
.xdata$x:000001C9                 db    0
.xdata$x:000001CA                 db    0
.xdata$x:000001CB                 db    0
.xdata$x:000001CC                 db    0
.xdata$x:000001CD                 db    0
.xdata$x:000001CE                 db    0
.xdata$x:000001CF                 db    0
.xdata$x:000001D0                 db    1
.xdata$x:000001D1                 db    0
.xdata$x:000001D2                 db    0
.xdata$x:000001D3                 db    0
.xdata$x:000001D4 __unwindtable$?CreateEnc@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:000001E4o
.xdata$x:000001D5                 db 0FFh
.xdata$x:000001D6                 db 0FFh
.xdata$x:000001D7                 db 0FFh
.xdata$x:000001D8                 dd offset __unwindfunclet$?CreateEnc@@YGPAXXZ$0
.xdata$x:000001DC __ehfuncinfo$?CreateEnc@@YGPAXXZ db  22h ; "
.xdata$x:000001DC                                         ; DATA XREF: __ehhandler$?CreateEnc@@YGPAXXZ+11o
.xdata$x:000001DD                 db    5
.xdata$x:000001DE                 db  93h ; ô
.xdata$x:000001DF                 db  19h
.xdata$x:000001E0                 db    1
.xdata$x:000001E1                 db    0
.xdata$x:000001E2                 db    0
.xdata$x:000001E3                 db    0
.xdata$x:000001E4                 dd offset __unwindtable$?CreateEnc@@YGPAXXZ
.xdata$x:000001E8                 db    0
.xdata$x:000001E9                 db    0
.xdata$x:000001EA                 db    0
.xdata$x:000001EB                 db    0
.xdata$x:000001EC                 db    0
.xdata$x:000001ED                 db    0
.xdata$x:000001EE                 db    0
.xdata$x:000001EF                 db    0
.xdata$x:000001F0                 db    0
.xdata$x:000001F1                 db    0
.xdata$x:000001F2                 db    0
.xdata$x:000001F3                 db    0
.xdata$x:000001F4                 db    0
.xdata$x:000001F5                 db    0
.xdata$x:000001F6                 db    0
.xdata$x:000001F7                 db    0
.xdata$x:000001F8                 db    0
.xdata$x:000001F9                 db    0
.xdata$x:000001FA                 db    0
.xdata$x:000001FB                 db    0
.xdata$x:000001FC                 db    1
.xdata$x:000001FD                 db    0
.xdata$x:000001FE                 db    0
.xdata$x:000001FF                 db    0
.xdata$x:000001FF _xdata$x        ends
.xdata$x:000001FF
.rtc$TMZ:00000200 ; ===========================================================================
.rtc$TMZ:00000200
.rtc$TMZ:00000200 ; Segment type: Pure data
.rtc$TMZ:00000200 ; Segment permissions: Read
.rtc$TMZ:00000200 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000200                 assume cs:_rtc$TMZ
.rtc$TMZ:00000200                 ;org 200h
.rtc$TMZ:00000200 ; COMDAT (pick any)
.rtc$TMZ:00000200 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000200 _rtc$TMZ        ends
.rtc$TMZ:00000200
.rtc$IMZ:00000204 ; ===========================================================================
.rtc$IMZ:00000204
.rtc$IMZ:00000204 ; Segment type: Pure data
.rtc$IMZ:00000204 ; Segment permissions: Read
.rtc$IMZ:00000204 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000204                 assume cs:_rtc$IMZ
.rtc$IMZ:00000204                 ;org 204h
.rtc$IMZ:00000204 ; COMDAT (pick any)
.rtc$IMZ:00000204 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000204 _rtc$IMZ        ends
.rtc$IMZ:00000204
.text:00000208 ; ===========================================================================
.text:00000208
.text:00000208 ; Segment type: Pure code
.text:00000208 ; Segment permissions: Read/Execute
.text:00000208 _text           segment para public 'CODE' use32
.text:00000208                 assume cs:_text
.text:00000208                 ;org 208h
.text:00000208 ; COMDAT (pick any)
.text:00000208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000208
.text:00000208 ; =============== S U B R O U T I N E =======================================
.text:00000208
.text:00000208 ; Attributes: bp-based frame
.text:00000208
.text:00000208 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(NCompress::NDeflate::NDecoder::CCOMCoder *__hidden this)
.text:00000208                 public ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ
.text:00000208 ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ proc near
.text:00000208                                         ; CODE XREF: CreateDec(void)+5Ap
.text:00000208
.text:00000208 var_4           = dword ptr -4
.text:00000208
.text:00000208                 push    ebp
.text:00000209                 mov     ebp, esp
.text:0000020B                 push    ecx
.text:0000020C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000213                 mov     [ebp+var_4], ecx
.text:00000216                 push    0               ; bool
.text:00000218                 push    0               ; bool
.text:0000021A                 mov     ecx, [ebp+var_4] ; this
.text:0000021D                 call    ??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z ; NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)
.text:00000222                 mov     eax, [ebp+var_4]
.text:00000225                 mov     dword ptr [eax], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressCoder'}
.text:0000022B                 mov     ecx, [ebp+var_4]
.text:0000022E                 mov     dword ptr [ecx+4], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00000235                 mov     edx, [ebp+var_4]
.text:00000238                 mov     dword ptr [edx+8], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetInStream'}
.text:0000023F                 mov     eax, [ebp+var_4]
.text:00000242                 mov     dword ptr [eax+0Ch], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:00000249                 mov     ecx, [ebp+var_4]
.text:0000024C                 mov     dword ptr [ecx+10h], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ISequentialInStream'}
.text:00000253                 mov     eax, [ebp+var_4]
.text:00000256                 add     esp, 4
.text:00000259                 cmp     ebp, esp
.text:0000025B                 call    __RTC_CheckEsp
.text:00000260                 mov     esp, ebp
.text:00000262                 pop     ebp
.text:00000263                 retn
.text:00000263 ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ endp
.text:00000263
.text:00000263 _text           ends
.text:00000263
.rdata:00000264 ; ===========================================================================
.rdata:00000264
.rdata:00000264 ; Segment type: Pure data
.rdata:00000264 ; Segment permissions: Read
.rdata:00000264 _rdata          segment dword public 'DATA' use32
.rdata:00000264                 assume cs:_rdata
.rdata:00000264                 ;org 264h
.rdata:00000264 ; COMDAT (pick largest)
.rdata:00000264                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00000268                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata:00000268 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ISequentialInStream'}
.rdata:00000268 ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00000268                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+44o
.rdata:00000268                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:0000026C                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.rdata:00000270                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.rdata:00000274                 dd offset ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)
.rdata:00000274 _rdata          ends
.rdata:00000274
.rdata:00000278 ; ===========================================================================
.rdata:00000278
.rdata:00000278 ; Segment type: Pure data
.rdata:00000278 ; Segment permissions: Read
.rdata:00000278 _rdata          segment dword public 'DATA' use32
.rdata:00000278                 assume cs:_rdata
.rdata:00000278                 ;org 278h
.rdata:00000278 ; COMDAT (pick largest)
.rdata:00000278                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:0000027C                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:0000027C ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:0000027C ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:0000027C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+3Ao
.rdata:0000027C                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00000280                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.rdata:00000284                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.rdata:00000288                 dd offset ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z ; NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:00000288 _rdata          ends
.rdata:00000288
.rdata:0000028C ; ===========================================================================
.rdata:0000028C
.rdata:0000028C ; Segment type: Pure data
.rdata:0000028C ; Segment permissions: Read
.rdata:0000028C _rdata          segment dword public 'DATA' use32
.rdata:0000028C                 assume cs:_rdata
.rdata:0000028C                 ;org 28Ch
.rdata:0000028C ; COMDAT (pick largest)
.rdata:0000028C                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00000290                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata:00000290 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00000290 ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000290                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+30o
.rdata:00000290                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000294                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.rdata:00000298                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.rdata:0000029C                 dd offset ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NDeflate::NDecoder::CCoder::SetInStream(ISequentialInStream *)
.rdata:000002A0                 dd offset ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ ; NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
.rdata:000002A0 _rdata          ends
.rdata:000002A0
.rdata:000002A4 ; ===========================================================================
.rdata:000002A4
.rdata:000002A4 ; Segment type: Pure data
.rdata:000002A4 ; Segment permissions: Read
.rdata:000002A4 _rdata          segment dword public 'DATA' use32
.rdata:000002A4                 assume cs:_rdata
.rdata:000002A4                 ;org 2A4h
.rdata:000002A4 ; COMDAT (pick largest)
.rdata:000002A4                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:000002A8                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:000002A8 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:000002A8 ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000002A8                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+26o
.rdata:000002A8                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000002AC                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.rdata:000002B0                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.rdata:000002B4                 dd offset ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z ; NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:000002B4 _rdata          ends
.rdata:000002B4
.rdata:000002B8 ; ===========================================================================
.rdata:000002B8
.rdata:000002B8 ; Segment type: Pure data
.rdata:000002B8 ; Segment permissions: Read
.rdata:000002B8 _rdata          segment dword public 'DATA' use32
.rdata:000002B8                 assume cs:_rdata
.rdata:000002B8                 ;org 2B8h
.rdata:000002B8 ; COMDAT (pick largest)
.rdata:000002B8                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:000002BC                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:000002BC ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressCoder'}
.rdata:000002BC ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:000002BC                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+1Do
.rdata:000002BC                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.rdata:000002C0                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.rdata:000002C4                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.rdata:000002C8                 dd offset ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000002CC                 dd offset ??_ECCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z ; NCompress::NDeflate::NDecoder::CCOMCoder::`vector deleting destructor'(uint)
.rdata:000002D0                 dd offset ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000002D0 _rdata          ends
.rdata:000002D0
.rdata$r:000002D4 ; ===========================================================================
.rdata$r:000002D4
.rdata$r:000002D4 ; Segment type: Pure data
.rdata$r:000002D4 ; Segment permissions: Read
.rdata$r:000002D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002D4                 assume cs:_rdata$r
.rdata$r:000002D4                 ;org 2D4h
.rdata$r:000002D4 ; COMDAT (pick any)
.rdata$r:000002D4                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:000002D4 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:000002D4 ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:000002D4                                         ; DATA XREF: .rdata:000002B8o
.rdata$r:000002D5                 db    0
.rdata$r:000002D6                 db    0
.rdata$r:000002D7                 db    0
.rdata$r:000002D8                 db    0
.rdata$r:000002D9                 db    0
.rdata$r:000002DA                 db    0
.rdata$r:000002DB                 db    0
.rdata$r:000002DC                 db    0
.rdata$r:000002DD                 db    0
.rdata$r:000002DE                 db    0
.rdata$r:000002DF                 db    0
.rdata$r:000002E0                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:000002E4                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002E4 _rdata$r        ends
.rdata$r:000002E4
.data:000002E8 ; ===========================================================================
.data:000002E8
.data:000002E8 ; Segment type: Pure data
.data:000002E8 ; Segment permissions: Read/Write
.data:000002E8 _data           segment dword public 'DATA' use32
.data:000002E8                 assume cs:_data
.data:000002E8                 ;org 2E8h
.data:000002E8 ; COMDAT (pick any)
.data:000002E8                 public ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8
.data:000002E8 ; class NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.data:000002E8 ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000002E8                                         ; DATA XREF: .rdata$r:000002E0o
.data:000002E8                                         ; .rdata$r:NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000002E8                                         ; const type_info::`vftable'
.data:000002EC                 align 10h
.data:000002F0 a_?avccomcoder@ db '.?AVCCOMCoder@NDecoder@NDeflate@NCompress@@',0
.data:000002F0 _data           ends
.data:000002F0
.rdata$r:0000031C ; ===========================================================================
.rdata$r:0000031C
.rdata$r:0000031C ; Segment type: Pure data
.rdata$r:0000031C ; Segment permissions: Read
.rdata$r:0000031C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000031C                 assume cs:_rdata$r
.rdata$r:0000031C                 ;org 31Ch
.rdata$r:0000031C ; COMDAT (pick any)
.rdata$r:0000031C                 public ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:0000031C ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000031C ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 db    0
.rdata$r:0000031C                                         ; DATA XREF: .rdata$r:000002E4o
.rdata$r:0000031C                                         ; .rdata$r:0000037Co ...
.rdata$r:0000031D                 db    0
.rdata$r:0000031E                 db    0
.rdata$r:0000031F                 db    0
.rdata$r:00000320                 db    1
.rdata$r:00000321                 db    0
.rdata$r:00000322                 db    0
.rdata$r:00000323                 db    0
.rdata$r:00000324                 db  0Dh
.rdata$r:00000325                 db    0
.rdata$r:00000326                 db    0
.rdata$r:00000327                 db    0
.rdata$r:00000328                 dd offset ??_R2CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Array'
.rdata$r:00000328 _rdata$r        ends
.rdata$r:00000328
.rdata$r:0000032C ; ===========================================================================
.rdata$r:0000032C
.rdata$r:0000032C ; Segment type: Pure data
.rdata$r:0000032C ; Segment permissions: Read
.rdata$r:0000032C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000032C                 assume cs:_rdata$r
.rdata$r:0000032C                 ;org 32Ch
.rdata$r:0000032C ; COMDAT (pick any)
.rdata$r:0000032C                 public ??_R2CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:0000032C ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Array'
.rdata$r:0000032C ??_R2CCOMCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:0000032C                                         ; DATA XREF: .rdata$r:00000328o
.rdata$r:0000032C                                         ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000330                 dd offset ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000334                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000338                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000033C                 dd offset ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000340                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000344                 dd offset ??_R17?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000348                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:0000034C                 dd offset ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000350                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00000354                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000358                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:0000035C                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00000360                 db    0
.rdata$r:00000361                 align 4
.rdata$r:00000361 _rdata$r        ends
.rdata$r:00000361
.rdata$r:00000364 ; ===========================================================================
.rdata$r:00000364
.rdata$r:00000364 ; Segment type: Pure data
.rdata$r:00000364 ; Segment permissions: Read
.rdata$r:00000364 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000364                 assume cs:_rdata$r
.rdata$r:00000364                 ;org 364h
.rdata$r:00000364 ; COMDAT (pick any)
.rdata$r:00000364                 public ??_R1A@?0A@EA@CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00000364 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000364 ??_R1A@?0A@EA@CCOMCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8
.rdata$r:00000364                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Array'o
.rdata$r:00000364                                         ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00000368                 db  0Ch
.rdata$r:00000369                 db    0
.rdata$r:0000036A                 db    0
.rdata$r:0000036B                 db    0
.rdata$r:0000036C                 db    0
.rdata$r:0000036D                 db    0
.rdata$r:0000036E                 db    0
.rdata$r:0000036F                 db    0
.rdata$r:00000370                 db 0FFh
.rdata$r:00000371                 db 0FFh
.rdata$r:00000372                 db 0FFh
.rdata$r:00000373                 db 0FFh
.rdata$r:00000374                 db    0
.rdata$r:00000375                 db    0
.rdata$r:00000376                 db    0
.rdata$r:00000377                 db    0
.rdata$r:00000378                 db  40h ; @
.rdata$r:00000379                 db    0
.rdata$r:0000037A                 db    0
.rdata$r:0000037B                 db    0
.rdata$r:0000037C                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000037C _rdata$r        ends
.rdata$r:0000037C
.rdata$r:00000380 ; ===========================================================================
.rdata$r:00000380
.rdata$r:00000380 ; Segment type: Pure data
.rdata$r:00000380 ; Segment permissions: Read
.rdata$r:00000380 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000380                 assume cs:_rdata$r
.rdata$r:00000380                 ;org 380h
.rdata$r:00000380 ; COMDAT (pick any)
.rdata$r:00000380                 public ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00000380 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000380 ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8
.rdata$r:00000380                                         ; DATA XREF: .rdata$r:00000330o
.rdata$r:00000380                                         ; .rdata$r:NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'o
.rdata$r:00000380                                         ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000384                 db  0Bh
.rdata$r:00000385                 db    0
.rdata$r:00000386                 db    0
.rdata$r:00000387                 db    0
.rdata$r:00000388                 db    0
.rdata$r:00000389                 db    0
.rdata$r:0000038A                 db    0
.rdata$r:0000038B                 db    0
.rdata$r:0000038C                 db 0FFh
.rdata$r:0000038D                 db 0FFh
.rdata$r:0000038E                 db 0FFh
.rdata$r:0000038F                 db 0FFh
.rdata$r:00000390                 db    0
.rdata$r:00000391                 db    0
.rdata$r:00000392                 db    0
.rdata$r:00000393                 db    0
.rdata$r:00000394                 db  40h ; @
.rdata$r:00000395                 db    0
.rdata$r:00000396                 db    0
.rdata$r:00000397                 db    0
.rdata$r:00000398                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000398 _rdata$r        ends
.rdata$r:00000398
.data:0000039C ; ===========================================================================
.data:0000039C
.data:0000039C ; Segment type: Pure data
.data:0000039C ; Segment permissions: Read/Write
.data:0000039C _data           segment dword public 'DATA' use32
.data:0000039C                 assume cs:_data
.data:0000039C                 ;org 39Ch
.data:0000039C ; COMDAT (pick any)
.data:0000039C                 public ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8
.data:0000039C ; class NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.data:0000039C ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:0000039C                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000039C                                         ; .rdata$r:00000C30o ...
.data:0000039C                                         ; const type_info::`vftable'
.data:000003A0                 db    0
.data:000003A1                 db    0
.data:000003A2                 db    0
.data:000003A3                 db    0
.data:000003A4                 db  2Eh ; .
.data:000003A5                 db  3Fh ; ?
.data:000003A6                 db  41h ; A
.data:000003A7                 db  56h ; V
.data:000003A8                 db  43h ; C
.data:000003A9                 db  43h ; C
.data:000003AA                 db  6Fh ; o
.data:000003AB                 db  64h ; d
.data:000003AC                 db  65h ; e
.data:000003AD                 db  72h ; r
.data:000003AE                 db  40h ; @
.data:000003AF                 db  4Eh ; N
.data:000003B0                 db  44h ; D
.data:000003B1                 db  65h ; e
.data:000003B2                 db  63h ; c
.data:000003B3                 db  6Fh ; o
.data:000003B4                 db  64h ; d
.data:000003B5                 db  65h ; e
.data:000003B6                 db  72h ; r
.data:000003B7                 db  40h ; @
.data:000003B8                 db  4Eh ; N
.data:000003B9                 db  44h ; D
.data:000003BA                 db  65h ; e
.data:000003BB                 db  66h ; f
.data:000003BC                 db  6Ch ; l
.data:000003BD                 db  61h ; a
.data:000003BE                 db  74h ; t
.data:000003BF                 db  65h ; e
.data:000003C0                 db  40h ; @
.data:000003C1                 db  4Eh ; N
.data:000003C2                 db  43h ; C
.data:000003C3                 db  6Fh ; o
.data:000003C4                 db  6Dh ; m
.data:000003C5                 db  70h ; p
.data:000003C6                 db  72h ; r
.data:000003C7                 db  65h ; e
.data:000003C8                 db  73h ; s
.data:000003C9                 db  73h ; s
.data:000003CA                 db  40h ; @
.data:000003CB                 db  40h ; @
.data:000003CC                 db    0
.data:000003CD                 align 10h
.data:000003CD _data           ends
.data:000003CD
.rdata$r:000003D0 ; ===========================================================================
.rdata$r:000003D0
.rdata$r:000003D0 ; Segment type: Pure data
.rdata$r:000003D0 ; Segment permissions: Read
.rdata$r:000003D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003D0                 assume cs:_rdata$r
.rdata$r:000003D0                 ;org 3D0h
.rdata$r:000003D0 ; COMDAT (pick any)
.rdata$r:000003D0                 public ??_R3CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000003D0 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003D0 ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 db    0
.rdata$r:000003D0                                         ; DATA XREF: .rdata$r:00000398o
.rdata$r:000003D0                                         ; .rdata$r:00000C34o ...
.rdata$r:000003D1                 db    0
.rdata$r:000003D2                 db    0
.rdata$r:000003D3                 db    0
.rdata$r:000003D4                 db    5
.rdata$r:000003D5                 db    0
.rdata$r:000003D6                 db    0
.rdata$r:000003D7                 db    0
.rdata$r:000003D8                 db  0Ch
.rdata$r:000003D9                 db    0
.rdata$r:000003DA                 db    0
.rdata$r:000003DB                 db    0
.rdata$r:000003DC                 dd offset ??_R2CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:000003DC _rdata$r        ends
.rdata$r:000003DC
.rdata$r:000003E0 ; ===========================================================================
.rdata$r:000003E0
.rdata$r:000003E0 ; Segment type: Pure data
.rdata$r:000003E0 ; Segment permissions: Read
.rdata$r:000003E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003E0                 assume cs:_rdata$r
.rdata$r:000003E0                 ;org 3E0h
.rdata$r:000003E0 ; COMDAT (pick any)
.rdata$r:000003E0                 public ??_R2CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000003E0 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:000003E0 ??_R2CCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000003E0                                         ; DATA XREF: .rdata$r:000003DCo
.rdata$r:000003E0                                         ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003E4                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003E8                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000003EC                 dd offset ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000003F0                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000003F4                 dd offset ??_R17?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000003F8                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000003FC                 dd offset ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000400                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00000404                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000408                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:0000040C                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00000410                 db    0
.rdata$r:00000411                 align 4
.rdata$r:00000411 _rdata$r        ends
.rdata$r:00000411
.rdata$r:00000414 ; ===========================================================================
.rdata$r:00000414
.rdata$r:00000414 ; Segment type: Pure data
.rdata$r:00000414 ; Segment permissions: Read
.rdata$r:00000414 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000414                 assume cs:_rdata$r
.rdata$r:00000414                 ;org 414h
.rdata$r:00000414 ; COMDAT (pick any)
.rdata$r:00000414                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000414 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000414 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000414                                         ; DATA XREF: .rdata$r:00000334o
.rdata$r:00000414                                         ; .rdata$r:000003E4o ...
.rdata$r:00000414                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000418                 db    1
.rdata$r:00000419                 db    0
.rdata$r:0000041A                 db    0
.rdata$r:0000041B                 db    0
.rdata$r:0000041C                 db    0
.rdata$r:0000041D                 db    0
.rdata$r:0000041E                 db    0
.rdata$r:0000041F                 db    0
.rdata$r:00000420                 db 0FFh
.rdata$r:00000421                 db 0FFh
.rdata$r:00000422                 db 0FFh
.rdata$r:00000423                 db 0FFh
.rdata$r:00000424                 db    0
.rdata$r:00000425                 db    0
.rdata$r:00000426                 db    0
.rdata$r:00000427                 db    0
.rdata$r:00000428                 db  40h ; @
.rdata$r:00000429                 db    0
.rdata$r:0000042A                 db    0
.rdata$r:0000042B                 db    0
.rdata$r:0000042C                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000042C _rdata$r        ends
.rdata$r:0000042C
.data:00000430 ; ===========================================================================
.data:00000430
.data:00000430 ; Segment type: Pure data
.data:00000430 ; Segment permissions: Read/Write
.data:00000430 _data           segment dword public 'DATA' use32
.data:00000430                 assume cs:_data
.data:00000430                 ;org 430h
.data:00000430 ; COMDAT (pick any)
.data:00000430                 public ??_R0?AUICompressCoder@@@8
.data:00000430 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00000430 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000430                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000430                                         ; .rdata$r:000011D0o
.data:00000430                                         ; const type_info::`vftable'
.data:00000434                 align 8
.data:00000438 a_?auicompressc db '.?AUICompressCoder@@',0
.data:0000044D                 align 10h
.data:0000044D _data           ends
.data:0000044D
.rdata$r:00000450 ; ===========================================================================
.rdata$r:00000450
.rdata$r:00000450 ; Segment type: Pure data
.rdata$r:00000450 ; Segment permissions: Read
.rdata$r:00000450 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000450                 assume cs:_rdata$r
.rdata$r:00000450                 ;org 450h
.rdata$r:00000450 ; COMDAT (pick any)
.rdata$r:00000450                 public ??_R3ICompressCoder@@8
.rdata$r:00000450 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000450 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:0000042Co
.rdata$r:00000450                                         ; .rdata$r:000011D4o
.rdata$r:00000451                 db    0
.rdata$r:00000452                 db    0
.rdata$r:00000453                 db    0
.rdata$r:00000454                 db    0
.rdata$r:00000455                 db    0
.rdata$r:00000456                 db    0
.rdata$r:00000457                 db    0
.rdata$r:00000458                 db    2
.rdata$r:00000459                 db    0
.rdata$r:0000045A                 db    0
.rdata$r:0000045B                 db    0
.rdata$r:0000045C                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:0000045C _rdata$r        ends
.rdata$r:0000045C
.rdata$r:00000460 ; ===========================================================================
.rdata$r:00000460
.rdata$r:00000460 ; Segment type: Pure data
.rdata$r:00000460 ; Segment permissions: Read
.rdata$r:00000460 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000460                 assume cs:_rdata$r
.rdata$r:00000460                 ;org 460h
.rdata$r:00000460 ; COMDAT (pick any)
.rdata$r:00000460                 public ??_R2ICompressCoder@@8
.rdata$r:00000460 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000460 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000460                                         ; DATA XREF: .rdata$r:0000045Co
.rdata$r:00000460                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000464                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000468                 db    0
.rdata$r:00000469                 align 4
.rdata$r:00000469 _rdata$r        ends
.rdata$r:00000469
.rdata$r:0000046C ; ===========================================================================
.rdata$r:0000046C
.rdata$r:0000046C ; Segment type: Pure data
.rdata$r:0000046C ; Segment permissions: Read
.rdata$r:0000046C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000046C                 assume cs:_rdata$r
.rdata$r:0000046C                 ;org 46Ch
.rdata$r:0000046C ; COMDAT (pick any)
.rdata$r:0000046C                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000046C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000046C ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000046C                                         ; DATA XREF: .rdata$r:00000464o
.rdata$r:0000046C                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:0000046C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000470                 db    0
.rdata$r:00000471                 db    0
.rdata$r:00000472                 db    0
.rdata$r:00000473                 db    0
.rdata$r:00000474                 db    0
.rdata$r:00000475                 db    0
.rdata$r:00000476                 db    0
.rdata$r:00000477                 db    0
.rdata$r:00000478                 db 0FFh
.rdata$r:00000479                 db 0FFh
.rdata$r:0000047A                 db 0FFh
.rdata$r:0000047B                 db 0FFh
.rdata$r:0000047C                 db    0
.rdata$r:0000047D                 db    0
.rdata$r:0000047E                 db    0
.rdata$r:0000047F                 db    0
.rdata$r:00000480                 db  40h ; @
.rdata$r:00000481                 db    0
.rdata$r:00000482                 db    0
.rdata$r:00000483                 db    0
.rdata$r:00000484                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000484 _rdata$r        ends
.rdata$r:00000484
.data:00000488 ; ===========================================================================
.data:00000488
.data:00000488 ; Segment type: Pure data
.data:00000488 ; Segment permissions: Read/Write
.data:00000488 _data           segment dword public 'DATA' use32
.data:00000488                 assume cs:_data
.data:00000488                 ;org 488h
.data:00000488 ; COMDAT (pick any)
.data:00000488                 public ??_R0?AUIUnknown@@@8
.data:00000488 ; struct IUnknown `RTTI Type Descriptor'
.data:00000488 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000488                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000488                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00000488                                         ; const type_info::`vftable'
.data:0000048C                 align 10h
.data:00000490 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:0000049F                 align 10h
.data:0000049F _data           ends
.data:0000049F
.rdata$r:000004A0 ; ===========================================================================
.rdata$r:000004A0
.rdata$r:000004A0 ; Segment type: Pure data
.rdata$r:000004A0 ; Segment permissions: Read
.rdata$r:000004A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004A0                 assume cs:_rdata$r
.rdata$r:000004A0                 ;org 4A0h
.rdata$r:000004A0 ; COMDAT (pick any)
.rdata$r:000004A0                 public ??_R3IUnknown@@8
.rdata$r:000004A0 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004A0 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000484o
.rdata$r:000004A0                                         ; .rdata$r:000004D0o ...
.rdata$r:000004A1                 db    0
.rdata$r:000004A2                 db    0
.rdata$r:000004A3                 db    0
.rdata$r:000004A4                 db    0
.rdata$r:000004A5                 db    0
.rdata$r:000004A6                 db    0
.rdata$r:000004A7                 db    0
.rdata$r:000004A8                 db    1
.rdata$r:000004A9                 db    0
.rdata$r:000004AA                 db    0
.rdata$r:000004AB                 db    0
.rdata$r:000004AC                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000004AC _rdata$r        ends
.rdata$r:000004AC
.rdata$r:000004B0 ; ===========================================================================
.rdata$r:000004B0
.rdata$r:000004B0 ; Segment type: Pure data
.rdata$r:000004B0 ; Segment permissions: Read
.rdata$r:000004B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004B0                 assume cs:_rdata$r
.rdata$r:000004B0                 ;org 4B0h
.rdata$r:000004B0 ; COMDAT (pick any)
.rdata$r:000004B0                 public ??_R2IUnknown@@8
.rdata$r:000004B0 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000004B0 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000004B0                                         ; DATA XREF: .rdata$r:000004ACo
.rdata$r:000004B0                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004B4                 db    0
.rdata$r:000004B5                 align 4
.rdata$r:000004B5 _rdata$r        ends
.rdata$r:000004B5
.rdata$r:000004B8 ; ===========================================================================
.rdata$r:000004B8
.rdata$r:000004B8 ; Segment type: Pure data
.rdata$r:000004B8 ; Segment permissions: Read
.rdata$r:000004B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004B8                 assume cs:_rdata$r
.rdata$r:000004B8                 ;org 4B8h
.rdata$r:000004B8 ; COMDAT (pick any)
.rdata$r:000004B8                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:000004B8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:000004B8 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000004B8                                         ; DATA XREF: .rdata$r:00000338o
.rdata$r:000004B8                                         ; .rdata$r:000003E8o ...
.rdata$r:000004B8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000004BC                 db    0
.rdata$r:000004BD                 db    0
.rdata$r:000004BE                 db    0
.rdata$r:000004BF                 db    0
.rdata$r:000004C0                 db    0
.rdata$r:000004C1                 db    0
.rdata$r:000004C2                 db    0
.rdata$r:000004C3                 db    0
.rdata$r:000004C4                 db 0FFh
.rdata$r:000004C5                 db 0FFh
.rdata$r:000004C6                 db 0FFh
.rdata$r:000004C7                 db 0FFh
.rdata$r:000004C8                 db    0
.rdata$r:000004C9                 db    0
.rdata$r:000004CA                 db    0
.rdata$r:000004CB                 db    0
.rdata$r:000004CC                 db  42h ; B
.rdata$r:000004CD                 db    0
.rdata$r:000004CE                 db    0
.rdata$r:000004CF                 db    0
.rdata$r:000004D0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004D0 _rdata$r        ends
.rdata$r:000004D0
.rdata$r:000004D4 ; ===========================================================================
.rdata$r:000004D4
.rdata$r:000004D4 ; Segment type: Pure data
.rdata$r:000004D4 ; Segment permissions: Read
.rdata$r:000004D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004D4                 assume cs:_rdata$r
.rdata$r:000004D4                 ;org 4D4h
.rdata$r:000004D4 ; COMDAT (pick any)
.rdata$r:000004D4                 public ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:000004D4 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000004D4 ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:000004D4                                         ; DATA XREF: .rdata$r:0000033Co
.rdata$r:000004D4                                         ; .rdata$r:000003ECo
.rdata$r:000004D4                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:000004D8                 db    1
.rdata$r:000004D9                 db    0
.rdata$r:000004DA                 db    0
.rdata$r:000004DB                 db    0
.rdata$r:000004DC                 db    4
.rdata$r:000004DD                 db    0
.rdata$r:000004DE                 db    0
.rdata$r:000004DF                 db    0
.rdata$r:000004E0                 db 0FFh
.rdata$r:000004E1                 db 0FFh
.rdata$r:000004E2                 db 0FFh
.rdata$r:000004E3                 db 0FFh
.rdata$r:000004E4                 db    0
.rdata$r:000004E5                 db    0
.rdata$r:000004E6                 db    0
.rdata$r:000004E7                 db    0
.rdata$r:000004E8                 db  40h ; @
.rdata$r:000004E9                 db    0
.rdata$r:000004EA                 db    0
.rdata$r:000004EB                 db    0
.rdata$r:000004EC                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004EC _rdata$r        ends
.rdata$r:000004EC
.data:000004F0 ; ===========================================================================
.data:000004F0
.data:000004F0 ; Segment type: Pure data
.data:000004F0 ; Segment permissions: Read/Write
.data:000004F0 _data           segment dword public 'DATA' use32
.data:000004F0                 assume cs:_data
.data:000004F0                 ;org 4F0h
.data:000004F0 ; COMDAT (pick any)
.data:000004F0                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:000004F0 ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:000004F0 ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:000004F0                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000004F0                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000004F0                                         ; const type_info::`vftable'
.data:000004F4                 align 8
.data:000004F8 a_?auicompressg db '.?AUICompressGetInStreamProcessedSize@@',0
.data:000004F8 _data           ends
.data:000004F8
.rdata$r:00000520 ; ===========================================================================
.rdata$r:00000520
.rdata$r:00000520 ; Segment type: Pure data
.rdata$r:00000520 ; Segment permissions: Read
.rdata$r:00000520 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000520                 assume cs:_rdata$r
.rdata$r:00000520                 ;org 520h
.rdata$r:00000520 ; COMDAT (pick any)
.rdata$r:00000520                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:00000520 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000520 ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:00000520                                         ; DATA XREF: .rdata$r:000004ECo
.rdata$r:00000520                                         ; .rdata$r:00000554o
.rdata$r:00000521                 db    0
.rdata$r:00000522                 db    0
.rdata$r:00000523                 db    0
.rdata$r:00000524                 db    0
.rdata$r:00000525                 db    0
.rdata$r:00000526                 db    0
.rdata$r:00000527                 db    0
.rdata$r:00000528                 db    2
.rdata$r:00000529                 db    0
.rdata$r:0000052A                 db    0
.rdata$r:0000052B                 db    0
.rdata$r:0000052C                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:0000052C _rdata$r        ends
.rdata$r:0000052C
.rdata$r:00000530 ; ===========================================================================
.rdata$r:00000530
.rdata$r:00000530 ; Segment type: Pure data
.rdata$r:00000530 ; Segment permissions: Read
.rdata$r:00000530 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000530                 assume cs:_rdata$r
.rdata$r:00000530                 ;org 530h
.rdata$r:00000530 ; COMDAT (pick any)
.rdata$r:00000530                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:00000530 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00000530 ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00000530                                         ; DATA XREF: .rdata$r:0000052Co
.rdata$r:00000530                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000534                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000538                 db    0
.rdata$r:00000539                 align 4
.rdata$r:00000539 _rdata$r        ends
.rdata$r:00000539
.rdata$r:0000053C ; ===========================================================================
.rdata$r:0000053C
.rdata$r:0000053C ; Segment type: Pure data
.rdata$r:0000053C ; Segment permissions: Read
.rdata$r:0000053C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000053C                 assume cs:_rdata$r
.rdata$r:0000053C                 ;org 53Ch
.rdata$r:0000053C ; COMDAT (pick any)
.rdata$r:0000053C                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:0000053C ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000053C ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:0000053C                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:0000053C                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00000540                 db    1
.rdata$r:00000541                 db    0
.rdata$r:00000542                 db    0
.rdata$r:00000543                 db    0
.rdata$r:00000544                 db    0
.rdata$r:00000545                 db    0
.rdata$r:00000546                 db    0
.rdata$r:00000547                 db    0
.rdata$r:00000548                 db 0FFh
.rdata$r:00000549                 db 0FFh
.rdata$r:0000054A                 db 0FFh
.rdata$r:0000054B                 db 0FFh
.rdata$r:0000054C                 db    0
.rdata$r:0000054D                 db    0
.rdata$r:0000054E                 db    0
.rdata$r:0000054F                 db    0
.rdata$r:00000550                 db  40h ; @
.rdata$r:00000551                 db    0
.rdata$r:00000552                 db    0
.rdata$r:00000553                 db    0
.rdata$r:00000554                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000554 _rdata$r        ends
.rdata$r:00000554
.rdata$r:00000558 ; ===========================================================================
.rdata$r:00000558
.rdata$r:00000558 ; Segment type: Pure data
.rdata$r:00000558 ; Segment permissions: Read
.rdata$r:00000558 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000558                 assume cs:_rdata$r
.rdata$r:00000558                 ;org 558h
.rdata$r:00000558 ; COMDAT (pick any)
.rdata$r:00000558                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00000558 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00000558 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000558                                         ; DATA XREF: .rdata$r:00000340o
.rdata$r:00000558                                         ; .rdata$r:000003F0o ...
.rdata$r:00000558                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000055C                 align 10h
.rdata$r:00000560                 db    4
.rdata$r:00000561                 db    0
.rdata$r:00000562                 db    0
.rdata$r:00000563                 db    0
.rdata$r:00000564                 db 0FFh
.rdata$r:00000565                 db 0FFh
.rdata$r:00000566                 db 0FFh
.rdata$r:00000567                 db 0FFh
.rdata$r:00000568                 db    0
.rdata$r:00000569                 db    0
.rdata$r:0000056A                 db    0
.rdata$r:0000056B                 db    0
.rdata$r:0000056C                 db  42h ; B
.rdata$r:0000056D                 db    0
.rdata$r:0000056E                 db    0
.rdata$r:0000056F                 db    0
.rdata$r:00000570                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000570 _rdata$r        ends
.rdata$r:00000570
.rdata$r:00000574 ; ===========================================================================
.rdata$r:00000574
.rdata$r:00000574 ; Segment type: Pure data
.rdata$r:00000574 ; Segment permissions: Read
.rdata$r:00000574 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000574                 assume cs:_rdata$r
.rdata$r:00000574                 ;org 574h
.rdata$r:00000574 ; COMDAT (pick any)
.rdata$r:00000574                 public ??_R17?0A@EA@ICompressSetInStream@@8
.rdata$r:00000574 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00000574 ??_R17?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00000574                                         ; DATA XREF: .rdata$r:00000344o
.rdata$r:00000574                                         ; .rdata$r:000003F4o
.rdata$r:00000574                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00000578                 db    1
.rdata$r:00000579                 db    0
.rdata$r:0000057A                 db    0
.rdata$r:0000057B                 db    0
.rdata$r:0000057C                 db    8
.rdata$r:0000057D                 db    0
.rdata$r:0000057E                 db    0
.rdata$r:0000057F                 db    0
.rdata$r:00000580                 db 0FFh
.rdata$r:00000581                 db 0FFh
.rdata$r:00000582                 db 0FFh
.rdata$r:00000583                 db 0FFh
.rdata$r:00000584                 db    0
.rdata$r:00000585                 db    0
.rdata$r:00000586                 db    0
.rdata$r:00000587                 db    0
.rdata$r:00000588                 db  40h ; @
.rdata$r:00000589                 db    0
.rdata$r:0000058A                 db    0
.rdata$r:0000058B                 db    0
.rdata$r:0000058C                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000058C _rdata$r        ends
.rdata$r:0000058C
.data:00000590 ; ===========================================================================
.data:00000590
.data:00000590 ; Segment type: Pure data
.data:00000590 ; Segment permissions: Read/Write
.data:00000590 _data           segment dword public 'DATA' use32
.data:00000590                 assume cs:_data
.data:00000590                 ;org 590h
.data:00000590 ; COMDAT (pick any)
.data:00000590                 public ??_R0?AUICompressSetInStream@@@8
.data:00000590 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:00000590 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:00000590                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00000590                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000590                                         ; const type_info::`vftable'
.data:00000594                 align 8
.data:00000598 a_?auicompresss db '.?AUICompressSetInStream@@',0
.data:000005B3                 align 4
.data:000005B3 _data           ends
.data:000005B3
.rdata$r:000005B4 ; ===========================================================================
.rdata$r:000005B4
.rdata$r:000005B4 ; Segment type: Pure data
.rdata$r:000005B4 ; Segment permissions: Read
.rdata$r:000005B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005B4                 assume cs:_rdata$r
.rdata$r:000005B4                 ;org 5B4h
.rdata$r:000005B4 ; COMDAT (pick any)
.rdata$r:000005B4                 public ??_R3ICompressSetInStream@@8
.rdata$r:000005B4 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005B4 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:0000058Co
.rdata$r:000005B4                                         ; .rdata$r:000005E8o
.rdata$r:000005B5                 db    0
.rdata$r:000005B6                 db    0
.rdata$r:000005B7                 db    0
.rdata$r:000005B8                 db    0
.rdata$r:000005B9                 db    0
.rdata$r:000005BA                 db    0
.rdata$r:000005BB                 db    0
.rdata$r:000005BC                 db    2
.rdata$r:000005BD                 db    0
.rdata$r:000005BE                 db    0
.rdata$r:000005BF                 db    0
.rdata$r:000005C0                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:000005C0 _rdata$r        ends
.rdata$r:000005C0
.rdata$r:000005C4 ; ===========================================================================
.rdata$r:000005C4
.rdata$r:000005C4 ; Segment type: Pure data
.rdata$r:000005C4 ; Segment permissions: Read
.rdata$r:000005C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005C4                 assume cs:_rdata$r
.rdata$r:000005C4                 ;org 5C4h
.rdata$r:000005C4 ; COMDAT (pick any)
.rdata$r:000005C4                 public ??_R2ICompressSetInStream@@8
.rdata$r:000005C4 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:000005C4 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:000005C4                                         ; DATA XREF: .rdata$r:000005C0o
.rdata$r:000005C4                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000005C8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000005CC                 db    0
.rdata$r:000005CD                 align 10h
.rdata$r:000005CD _rdata$r        ends
.rdata$r:000005CD
.rdata$r:000005D0 ; ===========================================================================
.rdata$r:000005D0
.rdata$r:000005D0 ; Segment type: Pure data
.rdata$r:000005D0 ; Segment permissions: Read
.rdata$r:000005D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005D0                 assume cs:_rdata$r
.rdata$r:000005D0                 ;org 5D0h
.rdata$r:000005D0 ; COMDAT (pick any)
.rdata$r:000005D0                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:000005D0 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000005D0 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:000005D0                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:000005D0                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:000005D4                 db    1
.rdata$r:000005D5                 db    0
.rdata$r:000005D6                 db    0
.rdata$r:000005D7                 db    0
.rdata$r:000005D8                 db    0
.rdata$r:000005D9                 db    0
.rdata$r:000005DA                 db    0
.rdata$r:000005DB                 db    0
.rdata$r:000005DC                 db 0FFh
.rdata$r:000005DD                 db 0FFh
.rdata$r:000005DE                 db 0FFh
.rdata$r:000005DF                 db 0FFh
.rdata$r:000005E0                 db    0
.rdata$r:000005E1                 db    0
.rdata$r:000005E2                 db    0
.rdata$r:000005E3                 db    0
.rdata$r:000005E4                 db  40h ; @
.rdata$r:000005E5                 db    0
.rdata$r:000005E6                 db    0
.rdata$r:000005E7                 db    0
.rdata$r:000005E8                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005E8 _rdata$r        ends
.rdata$r:000005E8
.rdata$r:000005EC ; ===========================================================================
.rdata$r:000005EC
.rdata$r:000005EC ; Segment type: Pure data
.rdata$r:000005EC ; Segment permissions: Read
.rdata$r:000005EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005EC                 assume cs:_rdata$r
.rdata$r:000005EC                 ;org 5ECh
.rdata$r:000005EC ; COMDAT (pick any)
.rdata$r:000005EC                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:000005EC ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:000005EC ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000005EC                                         ; DATA XREF: .rdata$r:00000348o
.rdata$r:000005EC                                         ; .rdata$r:000003F8o
.rdata$r:000005EC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000005F0                 db    0
.rdata$r:000005F1                 db    0
.rdata$r:000005F2                 db    0
.rdata$r:000005F3                 db    0
.rdata$r:000005F4                 db    8
.rdata$r:000005F5                 db    0
.rdata$r:000005F6                 db    0
.rdata$r:000005F7                 db    0
.rdata$r:000005F8                 db 0FFh
.rdata$r:000005F9                 db 0FFh
.rdata$r:000005FA                 db 0FFh
.rdata$r:000005FB                 db 0FFh
.rdata$r:000005FC                 db    0
.rdata$r:000005FD                 db    0
.rdata$r:000005FE                 db    0
.rdata$r:000005FF                 db    0
.rdata$r:00000600                 db  42h ; B
.rdata$r:00000601                 db    0
.rdata$r:00000602                 db    0
.rdata$r:00000603                 db    0
.rdata$r:00000604                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000604 _rdata$r        ends
.rdata$r:00000604
.rdata$r:00000608 ; ===========================================================================
.rdata$r:00000608
.rdata$r:00000608 ; Segment type: Pure data
.rdata$r:00000608 ; Segment permissions: Read
.rdata$r:00000608 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000608                 assume cs:_rdata$r
.rdata$r:00000608                 ;org 608h
.rdata$r:00000608 ; COMDAT (pick any)
.rdata$r:00000608                 public ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00000608 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00000608 ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:00000608                                         ; DATA XREF: .rdata$r:0000034Co
.rdata$r:00000608                                         ; .rdata$r:000003FCo
.rdata$r:00000608                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:0000060C                 db    1
.rdata$r:0000060D                 db    0
.rdata$r:0000060E                 db    0
.rdata$r:0000060F                 db    0
.rdata$r:00000610                 db  0Ch
.rdata$r:00000611                 db    0
.rdata$r:00000612                 db    0
.rdata$r:00000613                 db    0
.rdata$r:00000614                 db 0FFh
.rdata$r:00000615                 db 0FFh
.rdata$r:00000616                 db 0FFh
.rdata$r:00000617                 db 0FFh
.rdata$r:00000618                 db    0
.rdata$r:00000619                 db    0
.rdata$r:0000061A                 db    0
.rdata$r:0000061B                 db    0
.rdata$r:0000061C                 db  40h ; @
.rdata$r:0000061D                 db    0
.rdata$r:0000061E                 db    0
.rdata$r:0000061F                 db    0
.rdata$r:00000620                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000620 _rdata$r        ends
.rdata$r:00000620
.data:00000624 ; ===========================================================================
.data:00000624
.data:00000624 ; Segment type: Pure data
.data:00000624 ; Segment permissions: Read/Write
.data:00000624 _data           segment dword public 'DATA' use32
.data:00000624                 assume cs:_data
.data:00000624                 ;org 624h
.data:00000624 ; COMDAT (pick any)
.data:00000624                 public ??_R0?AUICompressSetOutStreamSize@@@8
.data:00000624 ; struct ICompressSetOutStreamSize `RTTI Type Descriptor'
.data:00000624 ??_R0?AUICompressSetOutStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:00000624                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00000624                                         ; .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000624                                         ; const type_info::`vftable'
.data:00000628                 db    0
.data:00000629                 db    0
.data:0000062A                 db    0
.data:0000062B                 db    0
.data:0000062C                 db  2Eh ; .
.data:0000062D                 db  3Fh ; ?
.data:0000062E                 db  41h ; A
.data:0000062F                 db  55h ; U
.data:00000630                 db  49h ; I
.data:00000631                 db  43h ; C
.data:00000632                 db  6Fh ; o
.data:00000633                 db  6Dh ; m
.data:00000634                 db  70h ; p
.data:00000635                 db  72h ; r
.data:00000636                 db  65h ; e
.data:00000637                 db  73h ; s
.data:00000638                 db  73h ; s
.data:00000639                 db  53h ; S
.data:0000063A                 db  65h ; e
.data:0000063B                 db  74h ; t
.data:0000063C                 db  4Fh ; O
.data:0000063D                 db  75h ; u
.data:0000063E                 db  74h ; t
.data:0000063F                 db  53h ; S
.data:00000640                 db  74h ; t
.data:00000641                 db  72h ; r
.data:00000642                 db  65h ; e
.data:00000643                 db  61h ; a
.data:00000644                 db  6Dh ; m
.data:00000645                 db  53h ; S
.data:00000646                 db  69h ; i
.data:00000647                 db  7Ah ; z
.data:00000648                 db  65h ; e
.data:00000649                 db  40h ; @
.data:0000064A                 db  40h ; @
.data:0000064B                 db    0
.data:0000064B _data           ends
.data:0000064B
.rdata$r:0000064C ; ===========================================================================
.rdata$r:0000064C
.rdata$r:0000064C ; Segment type: Pure data
.rdata$r:0000064C ; Segment permissions: Read
.rdata$r:0000064C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000064C                 assume cs:_rdata$r
.rdata$r:0000064C                 ;org 64Ch
.rdata$r:0000064C ; COMDAT (pick any)
.rdata$r:0000064C                 public ??_R3ICompressSetOutStreamSize@@8
.rdata$r:0000064C ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000064C ??_R3ICompressSetOutStreamSize@@8 db    0 ; DATA XREF: .rdata$r:00000620o
.rdata$r:0000064C                                         ; .rdata$r:00000680o
.rdata$r:0000064D                 db    0
.rdata$r:0000064E                 db    0
.rdata$r:0000064F                 db    0
.rdata$r:00000650                 db    0
.rdata$r:00000651                 db    0
.rdata$r:00000652                 db    0
.rdata$r:00000653                 db    0
.rdata$r:00000654                 db    2
.rdata$r:00000655                 db    0
.rdata$r:00000656                 db    0
.rdata$r:00000657                 db    0
.rdata$r:00000658                 dd offset ??_R2ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00000658 _rdata$r        ends
.rdata$r:00000658
.rdata$r:0000065C ; ===========================================================================
.rdata$r:0000065C
.rdata$r:0000065C ; Segment type: Pure data
.rdata$r:0000065C ; Segment permissions: Read
.rdata$r:0000065C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000065C                 assume cs:_rdata$r
.rdata$r:0000065C                 ;org 65Ch
.rdata$r:0000065C ; COMDAT (pick any)
.rdata$r:0000065C                 public ??_R2ICompressSetOutStreamSize@@8
.rdata$r:0000065C ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:0000065C ??_R2ICompressSetOutStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:0000065C                                         ; DATA XREF: .rdata$r:00000658o
.rdata$r:0000065C                                         ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000660                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000664                 db    0
.rdata$r:00000665                 align 4
.rdata$r:00000665 _rdata$r        ends
.rdata$r:00000665
.rdata$r:00000668 ; ===========================================================================
.rdata$r:00000668
.rdata$r:00000668 ; Segment type: Pure data
.rdata$r:00000668 ; Segment permissions: Read
.rdata$r:00000668 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000668                 assume cs:_rdata$r
.rdata$r:00000668                 ;org 668h
.rdata$r:00000668 ; COMDAT (pick any)
.rdata$r:00000668                 public ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00000668 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000668 ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:00000668                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Array'o
.rdata$r:00000668                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:0000066C                 db    1
.rdata$r:0000066D                 db    0
.rdata$r:0000066E                 db    0
.rdata$r:0000066F                 db    0
.rdata$r:00000670                 db    0
.rdata$r:00000671                 db    0
.rdata$r:00000672                 db    0
.rdata$r:00000673                 db    0
.rdata$r:00000674                 db 0FFh
.rdata$r:00000675                 db 0FFh
.rdata$r:00000676                 db 0FFh
.rdata$r:00000677                 db 0FFh
.rdata$r:00000678                 db    0
.rdata$r:00000679                 db    0
.rdata$r:0000067A                 db    0
.rdata$r:0000067B                 db    0
.rdata$r:0000067C                 db  40h ; @
.rdata$r:0000067D                 db    0
.rdata$r:0000067E                 db    0
.rdata$r:0000067F                 db    0
.rdata$r:00000680                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000680 _rdata$r        ends
.rdata$r:00000680
.rdata$r:00000684 ; ===========================================================================
.rdata$r:00000684
.rdata$r:00000684 ; Segment type: Pure data
.rdata$r:00000684 ; Segment permissions: Read
.rdata$r:00000684 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000684                 assume cs:_rdata$r
.rdata$r:00000684                 ;org 684h
.rdata$r:00000684 ; COMDAT (pick any)
.rdata$r:00000684                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00000684 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00000684 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000684                                         ; DATA XREF: .rdata$r:00000350o
.rdata$r:00000684                                         ; .rdata$r:00000400o
.rdata$r:00000684                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000688                 db    0
.rdata$r:00000689                 db    0
.rdata$r:0000068A                 db    0
.rdata$r:0000068B                 db    0
.rdata$r:0000068C                 db  0Ch
.rdata$r:0000068D                 db    0
.rdata$r:0000068E                 db    0
.rdata$r:0000068F                 db    0
.rdata$r:00000690                 db 0FFh
.rdata$r:00000691                 db 0FFh
.rdata$r:00000692                 db 0FFh
.rdata$r:00000693                 db 0FFh
.rdata$r:00000694                 db    0
.rdata$r:00000695                 db    0
.rdata$r:00000696                 db    0
.rdata$r:00000697                 db    0
.rdata$r:00000698                 db  42h ; B
.rdata$r:00000699                 db    0
.rdata$r:0000069A                 db    0
.rdata$r:0000069B                 db    0
.rdata$r:0000069C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000069C _rdata$r        ends
.rdata$r:0000069C
.rdata$r:000006A0 ; ===========================================================================
.rdata$r:000006A0
.rdata$r:000006A0 ; Segment type: Pure data
.rdata$r:000006A0 ; Segment permissions: Read
.rdata$r:000006A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006A0                 assume cs:_rdata$r
.rdata$r:000006A0                 ;org 6A0h
.rdata$r:000006A0 ; COMDAT (pick any)
.rdata$r:000006A0                 public ??_R1BA@?0A@EA@ISequentialInStream@@8
.rdata$r:000006A0 ; ISequentialInStream::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000006A0 ??_R1BA@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:000006A0                                         ; DATA XREF: .rdata$r:00000354o
.rdata$r:000006A0                                         ; .rdata$r:00000404o
.rdata$r:000006A0                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000006A4                 db    1
.rdata$r:000006A5                 db    0
.rdata$r:000006A6                 db    0
.rdata$r:000006A7                 db    0
.rdata$r:000006A8                 db  10h
.rdata$r:000006A9                 db    0
.rdata$r:000006AA                 db    0
.rdata$r:000006AB                 db    0
.rdata$r:000006AC                 db 0FFh
.rdata$r:000006AD                 db 0FFh
.rdata$r:000006AE                 db 0FFh
.rdata$r:000006AF                 db 0FFh
.rdata$r:000006B0                 db    0
.rdata$r:000006B1                 db    0
.rdata$r:000006B2                 db    0
.rdata$r:000006B3                 db    0
.rdata$r:000006B4                 db  40h ; @
.rdata$r:000006B5                 db    0
.rdata$r:000006B6                 db    0
.rdata$r:000006B7                 db    0
.rdata$r:000006B8                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006B8 _rdata$r        ends
.rdata$r:000006B8
.data:000006BC ; ===========================================================================
.data:000006BC
.data:000006BC ; Segment type: Pure data
.data:000006BC ; Segment permissions: Read/Write
.data:000006BC _data           segment dword public 'DATA' use32
.data:000006BC                 assume cs:_data
.data:000006BC                 ;org 6BCh
.data:000006BC ; COMDAT (pick any)
.data:000006BC                 public ??_R0?AUISequentialInStream@@@8
.data:000006BC ; struct ISequentialInStream `RTTI Type Descriptor'
.data:000006BC ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:000006BC                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:000006BC                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000006BC                                         ; const type_info::`vftable'
.data:000006C0                 db    0
.data:000006C1                 db    0
.data:000006C2                 db    0
.data:000006C3                 db    0
.data:000006C4                 db  2Eh ; .
.data:000006C5                 db  3Fh ; ?
.data:000006C6                 db  41h ; A
.data:000006C7                 db  55h ; U
.data:000006C8                 db  49h ; I
.data:000006C9                 db  53h ; S
.data:000006CA                 db  65h ; e
.data:000006CB                 db  71h ; q
.data:000006CC                 db  75h ; u
.data:000006CD                 db  65h ; e
.data:000006CE                 db  6Eh ; n
.data:000006CF                 db  74h ; t
.data:000006D0                 db  69h ; i
.data:000006D1                 db  61h ; a
.data:000006D2                 db  6Ch ; l
.data:000006D3                 db  49h ; I
.data:000006D4                 db  6Eh ; n
.data:000006D5                 db  53h ; S
.data:000006D6                 db  74h ; t
.data:000006D7                 db  72h ; r
.data:000006D8                 db  65h ; e
.data:000006D9                 db  61h ; a
.data:000006DA                 db  6Dh ; m
.data:000006DB                 db  40h ; @
.data:000006DC                 db  40h ; @
.data:000006DD                 db    0
.data:000006DE                 align 10h
.data:000006DE _data           ends
.data:000006DE
.rdata$r:000006E0 ; ===========================================================================
.rdata$r:000006E0
.rdata$r:000006E0 ; Segment type: Pure data
.rdata$r:000006E0 ; Segment permissions: Read
.rdata$r:000006E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006E0                 assume cs:_rdata$r
.rdata$r:000006E0                 ;org 6E0h
.rdata$r:000006E0 ; COMDAT (pick any)
.rdata$r:000006E0                 public ??_R3ISequentialInStream@@8
.rdata$r:000006E0 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006E0 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:000006B8o
.rdata$r:000006E0                                         ; .rdata$r:00000714o
.rdata$r:000006E1                 db    0
.rdata$r:000006E2                 db    0
.rdata$r:000006E3                 db    0
.rdata$r:000006E4                 db    0
.rdata$r:000006E5                 db    0
.rdata$r:000006E6                 db    0
.rdata$r:000006E7                 db    0
.rdata$r:000006E8                 db    2
.rdata$r:000006E9                 db    0
.rdata$r:000006EA                 db    0
.rdata$r:000006EB                 db    0
.rdata$r:000006EC                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:000006EC _rdata$r        ends
.rdata$r:000006EC
.rdata$r:000006F0 ; ===========================================================================
.rdata$r:000006F0
.rdata$r:000006F0 ; Segment type: Pure data
.rdata$r:000006F0 ; Segment permissions: Read
.rdata$r:000006F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006F0                 assume cs:_rdata$r
.rdata$r:000006F0                 ;org 6F0h
.rdata$r:000006F0 ; COMDAT (pick any)
.rdata$r:000006F0                 public ??_R2ISequentialInStream@@8
.rdata$r:000006F0 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:000006F0 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:000006F0                                         ; DATA XREF: .rdata$r:000006ECo
.rdata$r:000006F0                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000006F4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000006F8                 db    0
.rdata$r:000006F9                 align 4
.rdata$r:000006F9 _rdata$r        ends
.rdata$r:000006F9
.rdata$r:000006FC ; ===========================================================================
.rdata$r:000006FC
.rdata$r:000006FC ; Segment type: Pure data
.rdata$r:000006FC ; Segment permissions: Read
.rdata$r:000006FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006FC                 assume cs:_rdata$r
.rdata$r:000006FC                 ;org 6FCh
.rdata$r:000006FC ; COMDAT (pick any)
.rdata$r:000006FC                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:000006FC ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000006FC ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:000006FC                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:000006FC                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000700                 db    1
.rdata$r:00000701                 db    0
.rdata$r:00000702                 db    0
.rdata$r:00000703                 db    0
.rdata$r:00000704                 db    0
.rdata$r:00000705                 db    0
.rdata$r:00000706                 db    0
.rdata$r:00000707                 db    0
.rdata$r:00000708                 db 0FFh
.rdata$r:00000709                 db 0FFh
.rdata$r:0000070A                 db 0FFh
.rdata$r:0000070B                 db 0FFh
.rdata$r:0000070C                 db    0
.rdata$r:0000070D                 db    0
.rdata$r:0000070E                 db    0
.rdata$r:0000070F                 db    0
.rdata$r:00000710                 db  40h ; @
.rdata$r:00000711                 db    0
.rdata$r:00000712                 db    0
.rdata$r:00000713                 db    0
.rdata$r:00000714                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000714 _rdata$r        ends
.rdata$r:00000714
.rdata$r:00000718 ; ===========================================================================
.rdata$r:00000718
.rdata$r:00000718 ; Segment type: Pure data
.rdata$r:00000718 ; Segment permissions: Read
.rdata$r:00000718 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000718                 assume cs:_rdata$r
.rdata$r:00000718                 ;org 718h
.rdata$r:00000718 ; COMDAT (pick any)
.rdata$r:00000718                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:00000718 ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:00000718 ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000718                                         ; DATA XREF: .rdata$r:00000358o
.rdata$r:00000718                                         ; .rdata$r:00000408o
.rdata$r:00000718                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000071C                 align 10h
.rdata$r:00000720                 db  10h
.rdata$r:00000721                 db    0
.rdata$r:00000722                 db    0
.rdata$r:00000723                 db    0
.rdata$r:00000724                 db 0FFh
.rdata$r:00000725                 db 0FFh
.rdata$r:00000726                 db 0FFh
.rdata$r:00000727                 db 0FFh
.rdata$r:00000728                 db    0
.rdata$r:00000729                 db    0
.rdata$r:0000072A                 db    0
.rdata$r:0000072B                 db    0
.rdata$r:0000072C                 db  42h ; B
.rdata$r:0000072D                 db    0
.rdata$r:0000072E                 db    0
.rdata$r:0000072F                 db    0
.rdata$r:00000730                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000730 _rdata$r        ends
.rdata$r:00000730
.rdata$r:00000734 ; ===========================================================================
.rdata$r:00000734
.rdata$r:00000734 ; Segment type: Pure data
.rdata$r:00000734 ; Segment permissions: Read
.rdata$r:00000734 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000734                 assume cs:_rdata$r
.rdata$r:00000734                 ;org 734h
.rdata$r:00000734 ; COMDAT (pick any)
.rdata$r:00000734                 public ??_R1BE@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000734 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:00000734 ??_R1BE@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000734                                         ; DATA XREF: .rdata$r:0000035Co
.rdata$r:00000734                                         ; .rdata$r:0000040Co
.rdata$r:00000734                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000738                 db    0
.rdata$r:00000739                 db    0
.rdata$r:0000073A                 db    0
.rdata$r:0000073B                 db    0
.rdata$r:0000073C                 db  14h
.rdata$r:0000073D                 db    0
.rdata$r:0000073E                 db    0
.rdata$r:0000073F                 db    0
.rdata$r:00000740                 db 0FFh
.rdata$r:00000741                 db 0FFh
.rdata$r:00000742                 db 0FFh
.rdata$r:00000743                 db 0FFh
.rdata$r:00000744                 db    0
.rdata$r:00000745                 db    0
.rdata$r:00000746                 db    0
.rdata$r:00000747                 db    0
.rdata$r:00000748                 db  40h ; @
.rdata$r:00000749                 db    0
.rdata$r:0000074A                 db    0
.rdata$r:0000074B                 db    0
.rdata$r:0000074C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000074C _rdata$r        ends
.rdata$r:0000074C
.data:00000750 ; ===========================================================================
.data:00000750
.data:00000750 ; Segment type: Pure data
.data:00000750 ; Segment permissions: Read/Write
.data:00000750 _data           segment dword public 'DATA' use32
.data:00000750                 assume cs:_data
.data:00000750                 ;org 750h
.data:00000750 ; COMDAT (pick any)
.data:00000750                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000750 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000750 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000750                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'o
.data:00000750                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000750                                         ; const type_info::`vftable'
.data:00000754                 align 8
.data:00000758 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00000758 _data           ends
.data:00000758
.rdata$r:0000076C ; ===========================================================================
.rdata$r:0000076C
.rdata$r:0000076C ; Segment type: Pure data
.rdata$r:0000076C ; Segment permissions: Read
.rdata$r:0000076C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000076C                 assume cs:_rdata$r
.rdata$r:0000076C                 ;org 76Ch
.rdata$r:0000076C ; COMDAT (pick any)
.rdata$r:0000076C                 public ??_R3CMyUnknownImp@@8
.rdata$r:0000076C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000076C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:0000074Co
.rdata$r:0000076C                                         ; .rdata$r:0000079Co ...
.rdata$r:0000076D                 db    0
.rdata$r:0000076E                 db    0
.rdata$r:0000076F                 db    0
.rdata$r:00000770                 db    0
.rdata$r:00000771                 db    0
.rdata$r:00000772                 db    0
.rdata$r:00000773                 db    0
.rdata$r:00000774                 db    1
.rdata$r:00000775                 db    0
.rdata$r:00000776                 db    0
.rdata$r:00000777                 db    0
.rdata$r:00000778                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000778 _rdata$r        ends
.rdata$r:00000778
.rdata$r:0000077C ; ===========================================================================
.rdata$r:0000077C
.rdata$r:0000077C ; Segment type: Pure data
.rdata$r:0000077C ; Segment permissions: Read
.rdata$r:0000077C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000077C                 assume cs:_rdata$r
.rdata$r:0000077C                 ;org 77Ch
.rdata$r:0000077C ; COMDAT (pick any)
.rdata$r:0000077C                 public ??_R2CMyUnknownImp@@8
.rdata$r:0000077C ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000077C ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000077C                                         ; DATA XREF: .rdata$r:00000778o
.rdata$r:0000077C                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000780                 db    0
.rdata$r:00000781                 align 4
.rdata$r:00000781 _rdata$r        ends
.rdata$r:00000781
.rdata$r:00000784 ; ===========================================================================
.rdata$r:00000784
.rdata$r:00000784 ; Segment type: Pure data
.rdata$r:00000784 ; Segment permissions: Read
.rdata$r:00000784 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000784                 assume cs:_rdata$r
.rdata$r:00000784                 ;org 784h
.rdata$r:00000784 ; COMDAT (pick any)
.rdata$r:00000784                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000784 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000784 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000784                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000784                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000788                 align 10h
.rdata$r:00000790                 db 0FFh
.rdata$r:00000791                 db 0FFh
.rdata$r:00000792                 db 0FFh
.rdata$r:00000793                 db 0FFh
.rdata$r:00000794                 db    0
.rdata$r:00000795                 db    0
.rdata$r:00000796                 db    0
.rdata$r:00000797                 db    0
.rdata$r:00000798                 db  40h ; @
.rdata$r:00000799                 db    0
.rdata$r:0000079A                 db    0
.rdata$r:0000079B                 db    0
.rdata$r:0000079C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000079C _rdata$r        ends
.rdata$r:0000079C
.rdata$r:000007A0 ; ===========================================================================
.rdata$r:000007A0
.rdata$r:000007A0 ; Segment type: Pure data
.rdata$r:000007A0 ; Segment permissions: Read
.rdata$r:000007A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007A0                 assume cs:_rdata$r
.rdata$r:000007A0                 ;org 7A0h
.rdata$r:000007A0 ; COMDAT (pick any)
.rdata$r:000007A0                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:000007A0 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:000007A0 ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:000007A0                                         ; DATA XREF: .rdata:000002A4o
.rdata$r:000007A1                 db    0
.rdata$r:000007A2                 db    0
.rdata$r:000007A3                 db    0
.rdata$r:000007A4                 db    4
.rdata$r:000007A5                 db    0
.rdata$r:000007A6                 db    0
.rdata$r:000007A7                 db    0
.rdata$r:000007A8                 db    0
.rdata$r:000007A9                 db    0
.rdata$r:000007AA                 db    0
.rdata$r:000007AB                 db    0
.rdata$r:000007AC                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:000007B0                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007B0 _rdata$r        ends
.rdata$r:000007B0
.rdata$r:000007B4 ; ===========================================================================
.rdata$r:000007B4
.rdata$r:000007B4 ; Segment type: Pure data
.rdata$r:000007B4 ; Segment permissions: Read
.rdata$r:000007B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007B4                 assume cs:_rdata$r
.rdata$r:000007B4                 ;org 7B4h
.rdata$r:000007B4 ; COMDAT (pick any)
.rdata$r:000007B4                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata$r:000007B4 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:000007B4 ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:000007B4                                         ; DATA XREF: .rdata:0000028Co
.rdata$r:000007B5                 db    0
.rdata$r:000007B6                 db    0
.rdata$r:000007B7                 db    0
.rdata$r:000007B8                 db    8
.rdata$r:000007B9                 db    0
.rdata$r:000007BA                 db    0
.rdata$r:000007BB                 db    0
.rdata$r:000007BC                 db    0
.rdata$r:000007BD                 db    0
.rdata$r:000007BE                 db    0
.rdata$r:000007BF                 db    0
.rdata$r:000007C0                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:000007C4                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007C4 _rdata$r        ends
.rdata$r:000007C4
.rdata$r:000007C8 ; ===========================================================================
.rdata$r:000007C8
.rdata$r:000007C8 ; Segment type: Pure data
.rdata$r:000007C8 ; Segment permissions: Read
.rdata$r:000007C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007C8                 assume cs:_rdata$r
.rdata$r:000007C8                 ;org 7C8h
.rdata$r:000007C8 ; COMDAT (pick any)
.rdata$r:000007C8                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:000007C8 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:000007C8 ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:000007C8                                         ; DATA XREF: .rdata:00000278o
.rdata$r:000007C9                 db    0
.rdata$r:000007CA                 db    0
.rdata$r:000007CB                 db    0
.rdata$r:000007CC                 db  0Ch
.rdata$r:000007CD                 db    0
.rdata$r:000007CE                 db    0
.rdata$r:000007CF                 db    0
.rdata$r:000007D0                 db    0
.rdata$r:000007D1                 db    0
.rdata$r:000007D2                 db    0
.rdata$r:000007D3                 db    0
.rdata$r:000007D4                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:000007D8                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007D8 _rdata$r        ends
.rdata$r:000007D8
.rdata$r:000007DC ; ===========================================================================
.rdata$r:000007DC
.rdata$r:000007DC ; Segment type: Pure data
.rdata$r:000007DC ; Segment permissions: Read
.rdata$r:000007DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007DC                 assume cs:_rdata$r
.rdata$r:000007DC                 ;org 7DCh
.rdata$r:000007DC ; COMDAT (pick any)
.rdata$r:000007DC                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata$r:000007DC ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:000007DC ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:000007DC                                         ; DATA XREF: .rdata:00000264o
.rdata$r:000007DD                 db    0
.rdata$r:000007DE                 db    0
.rdata$r:000007DF                 db    0
.rdata$r:000007E0                 db  10h
.rdata$r:000007E1                 db    0
.rdata$r:000007E2                 db    0
.rdata$r:000007E3                 db    0
.rdata$r:000007E4                 db    0
.rdata$r:000007E5                 db    0
.rdata$r:000007E6                 db    0
.rdata$r:000007E7                 db    0
.rdata$r:000007E8                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:000007EC                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007EC _rdata$r        ends
.rdata$r:000007EC
.text:000007F0 ; ===========================================================================
.text:000007F0
.text:000007F0 ; Segment type: Pure code
.text:000007F0 ; Segment permissions: Read/Execute
.text:000007F0 _text           segment para public 'CODE' use32
.text:000007F0                 assume cs:_text
.text:000007F0                 ;org 7F0h
.text:000007F0 ; COMDAT (pick any)
.text:000007F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007F0
.text:000007F0 ; =============== S U B R O U T I N E =======================================
.text:000007F0
.text:000007F0 ; Attributes: bp-based frame
.text:000007F0
.text:000007F0 ; __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface(NCompress::NDeflate::NDecoder::CCoder *this, const struct _GUID *Buf1, void **)
.text:000007F0                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:000007F0 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000007F0                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:000007F0                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:000007F0
.text:000007F0 var_14          = dword ptr -14h
.text:000007F0 var_10          = dword ptr -10h
.text:000007F0 var_C           = dword ptr -0Ch
.text:000007F0 var_8           = dword ptr -8
.text:000007F0 var_4           = dword ptr -4
.text:000007F0 this            = dword ptr  8
.text:000007F0 Buf1            = dword ptr  0Ch
.text:000007F0 arg_8           = dword ptr  10h
.text:000007F0
.text:000007F0                 push    ebp
.text:000007F1                 mov     ebp, esp
.text:000007F3                 sub     esp, 14h
.text:000007F6                 mov     eax, 0CCCCCCCCh
.text:000007FB                 mov     [ebp+var_14], eax
.text:000007FE                 mov     [ebp+var_10], eax
.text:00000801                 mov     [ebp+var_C], eax
.text:00000804                 mov     [ebp+var_8], eax
.text:00000807                 mov     [ebp+var_4], eax
.text:0000080A                 mov     eax, [ebp+arg_8]
.text:0000080D                 mov     dword ptr [eax], 0
.text:00000813                 push    offset _IID_IUnknown ; Buf2
.text:00000818                 mov     ecx, [ebp+Buf1]
.text:0000081B                 push    ecx             ; Buf1
.text:0000081C                 call    ___@8           ; __(x,x)
.text:00000821                 test    eax, eax
.text:00000823                 jz      short loc_84A
.text:00000825                 cmp     [ebp+this], 0
.text:00000829                 jz      short loc_836
.text:0000082B                 mov     edx, [ebp+this]
.text:0000082E                 add     edx, 4
.text:00000831                 mov     [ebp+var_4], edx
.text:00000834                 jmp     short loc_83D
.text:00000836 ; ---------------------------------------------------------------------------
.text:00000836
.text:00000836 loc_836:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+39j
.text:00000836                 mov     [ebp+var_4], 0
.text:0000083D
.text:0000083D loc_83D:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+44j
.text:0000083D                 mov     eax, [ebp+arg_8]
.text:00000840                 mov     ecx, [ebp+var_4]
.text:00000843                 mov     [eax], ecx
.text:00000845                 jmp     loc_924
.text:0000084A ; ---------------------------------------------------------------------------
.text:0000084A
.text:0000084A loc_84A:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+33j
.text:0000084A                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:0000084F                 mov     edx, [ebp+Buf1]
.text:00000852                 push    edx             ; Buf1
.text:00000853                 call    ___@8           ; __(x,x)
.text:00000858                 test    eax, eax
.text:0000085A                 jz      short loc_881
.text:0000085C                 cmp     [ebp+this], 0
.text:00000860                 jz      short loc_86D
.text:00000862                 mov     eax, [ebp+this]
.text:00000865                 add     eax, 4
.text:00000868                 mov     [ebp+var_8], eax
.text:0000086B                 jmp     short loc_874
.text:0000086D ; ---------------------------------------------------------------------------
.text:0000086D
.text:0000086D loc_86D:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+70j
.text:0000086D                 mov     [ebp+var_8], 0
.text:00000874
.text:00000874 loc_874:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+7Bj
.text:00000874                 mov     ecx, [ebp+arg_8]
.text:00000877                 mov     edx, [ebp+var_8]
.text:0000087A                 mov     [ecx], edx
.text:0000087C                 jmp     loc_924
.text:00000881 ; ---------------------------------------------------------------------------
.text:00000881
.text:00000881 loc_881:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+6Aj
.text:00000881                 push    offset _IID_ICompressSetInStream ; Buf2
.text:00000886                 mov     eax, [ebp+Buf1]
.text:00000889                 push    eax             ; Buf1
.text:0000088A                 call    ___@8           ; __(x,x)
.text:0000088F                 test    eax, eax
.text:00000891                 jz      short loc_8B5
.text:00000893                 cmp     [ebp+this], 0
.text:00000897                 jz      short loc_8A4
.text:00000899                 mov     ecx, [ebp+this]
.text:0000089C                 add     ecx, 8
.text:0000089F                 mov     [ebp+var_C], ecx
.text:000008A2                 jmp     short loc_8AB
.text:000008A4 ; ---------------------------------------------------------------------------
.text:000008A4
.text:000008A4 loc_8A4:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+A7j
.text:000008A4                 mov     [ebp+var_C], 0
.text:000008AB
.text:000008AB loc_8AB:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+B2j
.text:000008AB                 mov     edx, [ebp+arg_8]
.text:000008AE                 mov     eax, [ebp+var_C]
.text:000008B1                 mov     [edx], eax
.text:000008B3                 jmp     short loc_924
.text:000008B5 ; ---------------------------------------------------------------------------
.text:000008B5
.text:000008B5 loc_8B5:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+A1j
.text:000008B5                 push    offset _IID_ICompressSetOutStreamSize ; Buf2
.text:000008BA                 mov     ecx, [ebp+Buf1]
.text:000008BD                 push    ecx             ; Buf1
.text:000008BE                 call    ___@8           ; __(x,x)
.text:000008C3                 test    eax, eax
.text:000008C5                 jz      short loc_8E9
.text:000008C7                 cmp     [ebp+this], 0
.text:000008CB                 jz      short loc_8D8
.text:000008CD                 mov     edx, [ebp+this]
.text:000008D0                 add     edx, 0Ch
.text:000008D3                 mov     [ebp+var_10], edx
.text:000008D6                 jmp     short loc_8DF
.text:000008D8 ; ---------------------------------------------------------------------------
.text:000008D8
.text:000008D8 loc_8D8:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+DBj
.text:000008D8                 mov     [ebp+var_10], 0
.text:000008DF
.text:000008DF loc_8DF:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+E6j
.text:000008DF                 mov     eax, [ebp+arg_8]
.text:000008E2                 mov     ecx, [ebp+var_10]
.text:000008E5                 mov     [eax], ecx
.text:000008E7                 jmp     short loc_924
.text:000008E9 ; ---------------------------------------------------------------------------
.text:000008E9
.text:000008E9 loc_8E9:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+D5j
.text:000008E9                 push    offset _IID_ISequentialInStream ; Buf2
.text:000008EE                 mov     edx, [ebp+Buf1]
.text:000008F1                 push    edx             ; Buf1
.text:000008F2                 call    ___@8           ; __(x,x)
.text:000008F7                 test    eax, eax
.text:000008F9                 jz      short loc_91D
.text:000008FB                 cmp     [ebp+this], 0
.text:000008FF                 jz      short loc_90C
.text:00000901                 mov     eax, [ebp+this]
.text:00000904                 add     eax, 10h
.text:00000907                 mov     [ebp+var_14], eax
.text:0000090A                 jmp     short loc_913
.text:0000090C ; ---------------------------------------------------------------------------
.text:0000090C
.text:0000090C loc_90C:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+10Fj
.text:0000090C                 mov     [ebp+var_14], 0
.text:00000913
.text:00000913 loc_913:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+11Aj
.text:00000913                 mov     ecx, [ebp+arg_8]
.text:00000916                 mov     edx, [ebp+var_14]
.text:00000919                 mov     [ecx], edx
.text:0000091B                 jmp     short loc_924
.text:0000091D ; ---------------------------------------------------------------------------
.text:0000091D
.text:0000091D loc_91D:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+109j
.text:0000091D                 mov     eax, 80004002h
.text:00000922                 jmp     short loc_935
.text:00000924 ; ---------------------------------------------------------------------------
.text:00000924
.text:00000924 loc_924:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+55j
.text:00000924                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+8Cj ...
.text:00000924                 mov     eax, [ebp+this]
.text:00000927                 mov     ecx, [eax+14h]
.text:0000092A                 add     ecx, 1
.text:0000092D                 mov     edx, [ebp+this]
.text:00000930                 mov     [edx+14h], ecx
.text:00000933                 xor     eax, eax
.text:00000935
.text:00000935 loc_935:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+132j
.text:00000935                 add     esp, 14h
.text:00000938                 cmp     ebp, esp
.text:0000093A                 call    __RTC_CheckEsp
.text:0000093F                 mov     esp, ebp
.text:00000941                 pop     ebp
.text:00000942                 retn    0Ch
.text:00000942 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000942
.text:00000942 ; ---------------------------------------------------------------------------
.text:00000945                 align 4
.text:00000945 _text           ends
.text:00000945
.text:00000948 ; ===========================================================================
.text:00000948
.text:00000948 ; Segment type: Pure code
.text:00000948 ; Segment permissions: Read/Execute
.text:00000948 _text           segment para public 'CODE' use32
.text:00000948                 assume cs:_text
.text:00000948                 ;org 948h
.text:00000948 ; COMDAT (pick any)
.text:00000948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000948
.text:00000948 ; =============== S U B R O U T I N E =======================================
.text:00000948
.text:00000948 ; Attributes: bp-based frame
.text:00000948
.text:00000948 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000948                 public ___@8
.text:00000948 ___@8           proc near               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+2Cp
.text:00000948                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+63p ...
.text:00000948
.text:00000948 Buf1            = dword ptr  8
.text:00000948 Buf2            = dword ptr  0Ch
.text:00000948
.text:00000948                 push    ebp
.text:00000949                 mov     ebp, esp
.text:0000094B                 mov     eax, [ebp+Buf2]
.text:0000094E                 push    eax             ; Buf2
.text:0000094F                 mov     ecx, [ebp+Buf1]
.text:00000952                 push    ecx             ; Buf1
.text:00000953                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000958                 cmp     ebp, esp
.text:0000095A                 call    __RTC_CheckEsp
.text:0000095F                 pop     ebp
.text:00000960                 retn    8
.text:00000960 ___@8           endp
.text:00000960
.text:00000960 ; ---------------------------------------------------------------------------
.text:00000963                 align 4
.text:00000963 _text           ends
.text:00000963
.text:00000964 ; ===========================================================================
.text:00000964
.text:00000964 ; Segment type: Pure code
.text:00000964 ; Segment permissions: Read/Execute
.text:00000964 _text           segment para public 'CODE' use32
.text:00000964                 assume cs:_text
.text:00000964                 ;org 964h
.text:00000964 ; COMDAT (pick any)
.text:00000964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000964
.text:00000964 ; =============== S U B R O U T I N E =======================================
.text:00000964
.text:00000964 ; Attributes: bp-based frame
.text:00000964
.text:00000964 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000964                 public _IsEqualGUID@8
.text:00000964 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000964
.text:00000964 Buf1            = dword ptr  8
.text:00000964 Buf2            = dword ptr  0Ch
.text:00000964
.text:00000964                 push    ebp
.text:00000965                 mov     ebp, esp
.text:00000967                 push    10h             ; Size
.text:00000969                 mov     eax, [ebp+Buf2]
.text:0000096C                 push    eax             ; Buf2
.text:0000096D                 mov     ecx, [ebp+Buf1]
.text:00000970                 push    ecx             ; Buf1
.text:00000971                 call    _memcmp
.text:00000976                 add     esp, 0Ch
.text:00000979                 neg     eax
.text:0000097B                 sbb     eax, eax
.text:0000097D                 add     eax, 1
.text:00000980                 cmp     ebp, esp
.text:00000982                 call    __RTC_CheckEsp
.text:00000987                 pop     ebp
.text:00000988                 retn    8
.text:00000988 _IsEqualGUID@8  endp
.text:00000988
.text:00000988 ; ---------------------------------------------------------------------------
.text:0000098B                 align 4
.text:0000098B _text           ends
.text:0000098B
.text:0000098C ; ===========================================================================
.text:0000098C
.text:0000098C ; Segment type: Pure code
.text:0000098C ; Segment permissions: Read/Execute
.text:0000098C _text           segment para public 'CODE' use32
.text:0000098C                 assume cs:_text
.text:0000098C                 ;org 98Ch
.text:0000098C ; COMDAT (pick any)
.text:0000098C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000098C
.text:0000098C ; =============== S U B R O U T I N E =======================================
.text:0000098C
.text:0000098C ; Attributes: bp-based frame
.text:0000098C
.text:0000098C ; unsigned __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef(NCompress::NDeflate::NDecoder::CCoder *this)
.text:0000098C                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ
.text:0000098C ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ proc near
.text:0000098C                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)+5j
.text:0000098C                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)+5j ...
.text:0000098C
.text:0000098C var_4           = dword ptr -4
.text:0000098C this            = dword ptr  8
.text:0000098C
.text:0000098C                 push    ebp
.text:0000098D                 mov     ebp, esp
.text:0000098F                 push    ecx
.text:00000990                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000997                 mov     eax, [ebp+this]
.text:0000099A                 mov     ecx, [eax+14h]
.text:0000099D                 add     ecx, 1
.text:000009A0                 mov     [ebp+var_4], ecx
.text:000009A3                 mov     edx, [ebp+this]
.text:000009A6                 mov     eax, [ebp+var_4]
.text:000009A9                 mov     [edx+14h], eax
.text:000009AC                 mov     eax, [ebp+var_4]
.text:000009AF                 mov     esp, ebp
.text:000009B1                 pop     ebp
.text:000009B2                 retn    4
.text:000009B2 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ endp
.text:000009B2
.text:000009B2 ; ---------------------------------------------------------------------------
.text:000009B5                 align 4
.text:000009B5 _text           ends
.text:000009B5
.text:000009B8 ; ===========================================================================
.text:000009B8
.text:000009B8 ; Segment type: Pure code
.text:000009B8 ; Segment permissions: Read/Execute
.text:000009B8 _text           segment para public 'CODE' use32
.text:000009B8                 assume cs:_text
.text:000009B8                 ;org 9B8h
.text:000009B8 ; COMDAT (pick any)
.text:000009B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009B8
.text:000009B8 ; =============== S U B R O U T I N E =======================================
.text:000009B8
.text:000009B8 ; Attributes: bp-based frame
.text:000009B8
.text:000009B8 ; unsigned __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::Release(NCompress::NDeflate::NDecoder::CCoder *this)
.text:000009B8                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ
.text:000009B8 ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ proc near
.text:000009B8                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)+5j
.text:000009B8                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)+5j ...
.text:000009B8
.text:000009B8 var_10          = dword ptr -10h
.text:000009B8 var_C           = dword ptr -0Ch
.text:000009B8 var_8           = dword ptr -8
.text:000009B8 var_4           = dword ptr -4
.text:000009B8 this            = dword ptr  8
.text:000009B8
.text:000009B8                 push    ebp
.text:000009B9                 mov     ebp, esp
.text:000009BB                 sub     esp, 10h
.text:000009BE                 push    esi
.text:000009BF                 mov     eax, 0CCCCCCCCh
.text:000009C4                 mov     [ebp+var_10], eax
.text:000009C7                 mov     [ebp+var_C], eax
.text:000009CA                 mov     [ebp+var_8], eax
.text:000009CD                 mov     [ebp+var_4], eax
.text:000009D0                 mov     eax, [ebp+this]
.text:000009D3                 mov     ecx, [eax+14h]
.text:000009D6                 sub     ecx, 1
.text:000009D9                 mov     [ebp+var_C], ecx
.text:000009DC                 mov     edx, [ebp+this]
.text:000009DF                 mov     eax, [ebp+var_C]
.text:000009E2                 mov     [edx+14h], eax
.text:000009E5                 cmp     [ebp+var_C], 0
.text:000009E9                 jz      short loc_9F3
.text:000009EB                 mov     ecx, [ebp+this]
.text:000009EE                 mov     eax, [ecx+14h]
.text:000009F1                 jmp     short loc_A2B
.text:000009F3 ; ---------------------------------------------------------------------------
.text:000009F3
.text:000009F3 loc_9F3:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+31j
.text:000009F3                 mov     edx, [ebp+this]
.text:000009F6                 mov     [ebp+var_8], edx
.text:000009F9                 mov     eax, [ebp+var_8]
.text:000009FC                 mov     [ebp+var_4], eax
.text:000009FF                 cmp     [ebp+var_4], 0
.text:00000A03                 jz      short loc_A22
.text:00000A05                 mov     esi, esp
.text:00000A07                 push    1
.text:00000A09                 mov     ecx, [ebp+var_4]
.text:00000A0C                 mov     edx, [ecx]
.text:00000A0E                 mov     ecx, [ebp+var_4]
.text:00000A11                 mov     eax, [edx+10h]
.text:00000A14                 call    eax
.text:00000A16                 cmp     esi, esp
.text:00000A18                 call    __RTC_CheckEsp
.text:00000A1D                 mov     [ebp+var_10], eax
.text:00000A20                 jmp     short loc_A29
.text:00000A22 ; ---------------------------------------------------------------------------
.text:00000A22
.text:00000A22 loc_A22:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+4Bj
.text:00000A22                 mov     [ebp+var_10], 0
.text:00000A29
.text:00000A29 loc_A29:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+68j
.text:00000A29                 xor     eax, eax
.text:00000A2B
.text:00000A2B loc_A2B:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+39j
.text:00000A2B                 pop     esi
.text:00000A2C                 add     esp, 10h
.text:00000A2F                 cmp     ebp, esp
.text:00000A31                 call    __RTC_CheckEsp
.text:00000A36                 mov     esp, ebp
.text:00000A38                 pop     ebp
.text:00000A39                 retn    4
.text:00000A39 ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ endp
.text:00000A39
.text:00000A39 _text           ends
.text:00000A39
.text:00000A3C ; ===========================================================================
.text:00000A3C
.text:00000A3C ; Segment type: Pure code
.text:00000A3C ; Segment permissions: Read/Execute
.text:00000A3C _text           segment para public 'CODE' use32
.text:00000A3C                 assume cs:_text
.text:00000A3C                 ;org 0A3Ch
.text:00000A3C ; COMDAT (pick any)
.text:00000A3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A3C
.text:00000A3C ; =============== S U B R O U T I N E =======================================
.text:00000A3C
.text:00000A3C ; Attributes: bp-based frame
.text:00000A3C
.text:00000A3C ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(unsigned int)
.text:00000A3C                 public ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z
.text:00000A3C ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z proc near
.text:00000A3C
.text:00000A3C var_4           = dword ptr -4
.text:00000A3C arg_0           = dword ptr  8
.text:00000A3C
.text:00000A3C                 push    ebp
.text:00000A3D                 mov     ebp, esp
.text:00000A3F                 push    ecx
.text:00000A40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A47                 mov     [ebp+var_4], ecx
.text:00000A4A                 mov     ecx, [ebp+var_4] ; this
.text:00000A4D                 call    ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCOMCoder::~CCOMCoder(void)
.text:00000A52                 mov     eax, [ebp+arg_0]
.text:00000A55                 and     eax, 1
.text:00000A58                 jz      short loc_A66
.text:00000A5A                 mov     ecx, [ebp+var_4]
.text:00000A5D                 push    ecx             ; void *
.text:00000A5E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000A63                 add     esp, 4
.text:00000A66
.text:00000A66 loc_A66:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(uint)+1Cj
.text:00000A66                 mov     eax, [ebp+var_4]
.text:00000A69                 add     esp, 4
.text:00000A6C                 cmp     ebp, esp
.text:00000A6E                 call    __RTC_CheckEsp
.text:00000A73                 mov     esp, ebp
.text:00000A75                 pop     ebp
.text:00000A76                 retn    4
.text:00000A76 ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z endp
.text:00000A76
.text:00000A76 ; ---------------------------------------------------------------------------
.text:00000A79                 align 4
.text:00000A79 _text           ends
.text:00000A79
.text:00000A7C ; ===========================================================================
.text:00000A7C
.text:00000A7C ; Segment type: Pure code
.text:00000A7C ; Segment permissions: Read/Execute
.text:00000A7C _text           segment para public 'CODE' use32
.text:00000A7C                 assume cs:_text
.text:00000A7C                 ;org 0A7Ch
.text:00000A7C ; COMDAT (pick any)
.text:00000A7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A7C
.text:00000A7C ; =============== S U B R O U T I N E =======================================
.text:00000A7C
.text:00000A7C ; Attributes: bp-based frame
.text:00000A7C
.text:00000A7C ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::~CCOMCoder(NCompress::NDeflate::NDecoder::CCOMCoder *__hidden this)
.text:00000A7C                 public ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:00000A7C ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text:00000A7C                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(uint)+11p
.text:00000A7C
.text:00000A7C var_4           = dword ptr -4
.text:00000A7C
.text:00000A7C                 push    ebp
.text:00000A7D                 mov     ebp, esp
.text:00000A7F                 push    ecx
.text:00000A80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A87                 mov     [ebp+var_4], ecx
.text:00000A8A                 mov     ecx, [ebp+var_4] ; this
.text:00000A8D                 call    ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)
.text:00000A92                 add     esp, 4
.text:00000A95                 cmp     ebp, esp
.text:00000A97                 call    __RTC_CheckEsp
.text:00000A9C                 mov     esp, ebp
.text:00000A9E                 pop     ebp
.text:00000A9F                 retn
.text:00000A9F ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text:00000A9F
.text:00000A9F _text           ends
.text:00000A9F
.text:00000AA0 ; ===========================================================================
.text:00000AA0
.text:00000AA0 ; Segment type: Pure code
.text:00000AA0 ; Segment permissions: Read/Execute
.text:00000AA0 _text           segment para public 'CODE' use32
.text:00000AA0                 assume cs:_text
.text:00000AA0                 ;org 0AA0h
.text:00000AA0 ; COMDAT (pick any)
.text:00000AA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000AA0
.text:00000AA0 ; =============== S U B R O U T I N E =======================================
.text:00000AA0
.text:00000AA0 ; Attributes: bp-based frame
.text:00000AA0
.text:00000AA0 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::~CCoder(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:00000AA0                 public ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:00000AA0 ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text:00000AA0                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::~CCOMCoder(void)+11p
.text:00000AA0                                         ; NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(uint)+11p
.text:00000AA0
.text:00000AA0 var_10          = dword ptr -10h
.text:00000AA0 var_C           = dword ptr -0Ch
.text:00000AA0 var_4           = dword ptr -4
.text:00000AA0
.text:00000AA0                 push    ebp
.text:00000AA1                 mov     ebp, esp
.text:00000AA3                 push    0FFFFFFFFh
.text:00000AA5                 push    offset __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:00000AAA                 mov     eax, large fs:0
.text:00000AB0                 push    eax
.text:00000AB1                 push    ecx
.text:00000AB2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000AB9                 mov     eax, dword ptr ds:___security_cookie
.text:00000ABE                 xor     eax, ebp
.text:00000AC0                 push    eax
.text:00000AC1                 lea     eax, [ebp+var_C]
.text:00000AC4                 mov     large fs:0, eax
.text:00000ACA                 mov     [ebp+var_10], ecx
.text:00000ACD                 mov     eax, [ebp+var_10]
.text:00000AD0                 mov     dword ptr [eax], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.text:00000AD6                 mov     ecx, [ebp+var_10]
.text:00000AD9                 mov     dword ptr [ecx+4], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00000AE0                 mov     edx, [ebp+var_10]
.text:00000AE3                 mov     dword ptr [edx+8], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}
.text:00000AEA                 mov     eax, [ebp+var_10]
.text:00000AED                 mov     dword ptr [eax+0Ch], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:00000AF4                 mov     ecx, [ebp+var_10]
.text:00000AF7                 mov     dword ptr [ecx+10h], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}
.text:00000AFE                 mov     [ebp+var_4], 1
.text:00000B05                 mov     ecx, [ebp+var_10]
.text:00000B08                 add     ecx, 48h ; 'H'
.text:00000B0B                 call    ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)
.text:00000B10                 mov     byte ptr [ebp+var_4], 0
.text:00000B14                 mov     ecx, [ebp+var_10]
.text:00000B17                 add     ecx, 40h ; '@'
.text:00000B1A                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000B1F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B26                 mov     ecx, [ebp+var_10]
.text:00000B29                 add     ecx, 18h        ; this
.text:00000B2C                 call    ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text:00000B31                 mov     ecx, [ebp+var_C]
.text:00000B34                 mov     large fs:0, ecx
.text:00000B3B                 pop     ecx
.text:00000B3C                 add     esp, 10h
.text:00000B3F                 cmp     ebp, esp
.text:00000B41                 call    __RTC_CheckEsp
.text:00000B46                 mov     esp, ebp
.text:00000B48                 pop     ebp
.text:00000B49                 retn
.text:00000B49 ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text:00000B49
.text:00000B49 ; ---------------------------------------------------------------------------
.text:00000B4A                 align 4
.text:00000B4A _text           ends
.text:00000B4A
.text$x:00000B4C ; ===========================================================================
.text$x:00000B4C
.text$x:00000B4C ; Segment type: Pure code
.text$x:00000B4C ; Segment permissions: Read/Execute
.text$x:00000B4C _text$x         segment para public 'CODE' use32
.text$x:00000B4C                 assume cs:_text$x
.text$x:00000B4C                 ;org 0B4Ch
.text$x:00000B4C ; COMDAT (pick associative to section at AA0)
.text$x:00000B4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000B4C
.text$x:00000B4C ; =============== S U B R O U T I N E =======================================
.text$x:00000B4C
.text$x:00000B4C
.text$x:00000B4C __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0 proc near
.text$x:00000B4C                                         ; DATA XREF: .xdata$x:00000BF4o
.text$x:00000B4C                 mov     ecx, [ebp-10h]
.text$x:00000B4F                 add     ecx, 18h        ; this
.text$x:00000B52                 jmp     ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text$x:00000B52 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0 endp
.text$x:00000B52
.text$x:00000B57
.text$x:00000B57 ; =============== S U B R O U T I N E =======================================
.text$x:00000B57
.text$x:00000B57
.text$x:00000B57 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1 proc near
.text$x:00000B57                                         ; DATA XREF: .xdata$x:00000BFCo
.text$x:00000B57                 mov     ecx, [ebp-10h]
.text$x:00000B5A                 add     ecx, 40h ; '@'
.text$x:00000B5D                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00000B5D __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1 endp
.text$x:00000B5D
.text$x:00000B62
.text$x:00000B62 ; =============== S U B R O U T I N E =======================================
.text$x:00000B62
.text$x:00000B62
.text$x:00000B62 __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text$x:00000B62                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+5o
.text$x:00000B62
.text$x:00000B62 arg_4           = dword ptr  8
.text$x:00000B62
.text$x:00000B62                 mov     edx, [esp+arg_4]
.text$x:00000B66                 lea     eax, [edx+0Ch]
.text$x:00000B69                 mov     ecx, [edx-8]
.text$x:00000B6C                 xor     ecx, eax
.text$x:00000B6E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000B73                 mov     eax, offset __ehfuncinfo$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text$x:00000B78                 jmp     ___CxxFrameHandler3
.text$x:00000B78 __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text$x:00000B78
.text$x:00000B78 ; ---------------------------------------------------------------------------
.text$x:00000B7D                 align 10h
.text$x:00000B7D _text$x         ends
.text$x:00000B7D
.rdata:00000B80 ; ===========================================================================
.rdata:00000B80
.rdata:00000B80 ; Segment type: Pure data
.rdata:00000B80 ; Segment permissions: Read
.rdata:00000B80 _rdata          segment dword public 'DATA' use32
.rdata:00000B80                 assume cs:_rdata
.rdata:00000B80                 ;org 0B80h
.rdata:00000B80 ; COMDAT (pick largest)
.rdata:00000B80                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00000B84                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata:00000B84 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}
.rdata:00000B84 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00000B84                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+57o
.rdata:00000B84                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00000B88                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.rdata:00000B8C                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.rdata:00000B90                 dd offset ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)
.rdata:00000B90 _rdata          ends
.rdata:00000B90
.rdata:00000B94 ; ===========================================================================
.rdata:00000B94
.rdata:00000B94 ; Segment type: Pure data
.rdata:00000B94 ; Segment permissions: Read
.rdata:00000B94 _rdata          segment dword public 'DATA' use32
.rdata:00000B94                 assume cs:_rdata
.rdata:00000B94                 ;org 0B94h
.rdata:00000B94 ; COMDAT (pick largest)
.rdata:00000B94                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:00000B98                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:00000B98 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:00000B98 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00000B98                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+4Do
.rdata:00000B98                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00000B9C                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.rdata:00000BA0                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.rdata:00000BA4                 dd offset ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z ; NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:00000BA4 _rdata          ends
.rdata:00000BA4
.rdata:00000BA8 ; ===========================================================================
.rdata:00000BA8
.rdata:00000BA8 ; Segment type: Pure data
.rdata:00000BA8 ; Segment permissions: Read
.rdata:00000BA8 _rdata          segment dword public 'DATA' use32
.rdata:00000BA8                 assume cs:_rdata
.rdata:00000BA8                 ;org 0BA8h
.rdata:00000BA8 ; COMDAT (pick largest)
.rdata:00000BA8                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00000BAC                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata:00000BAC ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00000BAC ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000BAC                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+43o
.rdata:00000BAC                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000BB0                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.rdata:00000BB4                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.rdata:00000BB8                 dd offset ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NDeflate::NDecoder::CCoder::SetInStream(ISequentialInStream *)
.rdata:00000BBC                 dd offset ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ ; NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
.rdata:00000BBC _rdata          ends
.rdata:00000BBC
.rdata:00000BC0 ; ===========================================================================
.rdata:00000BC0
.rdata:00000BC0 ; Segment type: Pure data
.rdata:00000BC0 ; Segment permissions: Read
.rdata:00000BC0 _rdata          segment dword public 'DATA' use32
.rdata:00000BC0                 assume cs:_rdata
.rdata:00000BC0                 ;org 0BC0h
.rdata:00000BC0 ; COMDAT (pick largest)
.rdata:00000BC0                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:00000BC4                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:00000BC4 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:00000BC4 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000BC4                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+39o
.rdata:00000BC4                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000BC8                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.rdata:00000BCC                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.rdata:00000BD0                 dd offset ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z ; NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:00000BD0 _rdata          ends
.rdata:00000BD0
.rdata:00000BD4 ; ===========================================================================
.rdata:00000BD4
.rdata:00000BD4 ; Segment type: Pure data
.rdata:00000BD4 ; Segment permissions: Read
.rdata:00000BD4 _rdata          segment dword public 'DATA' use32
.rdata:00000BD4                 assume cs:_rdata
.rdata:00000BD4                 ;org 0BD4h
.rdata:00000BD4 ; COMDAT (pick largest)
.rdata:00000BD4                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00000BD8                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:00000BD8 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.rdata:00000BD8 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000BD8                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+30o
.rdata:00000BD8                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.rdata:00000BDC                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.rdata:00000BE0                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.rdata:00000BE4                 dd offset ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000BE8                 dd offset ??_ECCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z ; NCompress::NDeflate::NDecoder::CCoder::`vector deleting destructor'(uint)
.rdata:00000BEC                 dd offset ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000BEC _rdata          ends
.rdata:00000BEC
.xdata$x:00000BF0 ; ===========================================================================
.xdata$x:00000BF0
.xdata$x:00000BF0 ; Segment type: Pure data
.xdata$x:00000BF0 ; Segment permissions: Read
.xdata$x:00000BF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000BF0                 assume cs:_xdata$x
.xdata$x:00000BF0                 ;org 0BF0h
.xdata$x:00000BF0 ; COMDAT (pick associative to section at AA0)
.xdata$x:00000BF0 __unwindtable$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ db 0FFh
.xdata$x:00000BF0                                         ; DATA XREF: .xdata$x:00000C08o
.xdata$x:00000BF1                 db 0FFh
.xdata$x:00000BF2                 db 0FFh
.xdata$x:00000BF3                 db 0FFh
.xdata$x:00000BF4                 dd offset __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0
.xdata$x:00000BF8                 db    0
.xdata$x:00000BF9                 db    0
.xdata$x:00000BFA                 db    0
.xdata$x:00000BFB                 db    0
.xdata$x:00000BFC                 dd offset __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1
.xdata$x:00000C00 __ehfuncinfo$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ db  22h ; "
.xdata$x:00000C00                                         ; DATA XREF: __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ+11o
.xdata$x:00000C01                 db    5
.xdata$x:00000C02                 db  93h ; ô
.xdata$x:00000C03                 db  19h
.xdata$x:00000C04                 db    2
.xdata$x:00000C05                 db    0
.xdata$x:00000C06                 db    0
.xdata$x:00000C07                 db    0
.xdata$x:00000C08                 dd offset __unwindtable$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.xdata$x:00000C0C                 align 20h
.xdata$x:00000C20                 db    1
.xdata$x:00000C21                 db    0
.xdata$x:00000C22                 db    0
.xdata$x:00000C23                 db    0
.xdata$x:00000C23 _xdata$x        ends
.xdata$x:00000C23
.rdata$r:00000C24 ; ===========================================================================
.rdata$r:00000C24
.rdata$r:00000C24 ; Segment type: Pure data
.rdata$r:00000C24 ; Segment permissions: Read
.rdata$r:00000C24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C24                 assume cs:_rdata$r
.rdata$r:00000C24                 ;org 0C24h
.rdata$r:00000C24 ; COMDAT (pick any)
.rdata$r:00000C24                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:00000C24 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00000C24 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00000C24                                         ; DATA XREF: .rdata:00000BD4o
.rdata$r:00000C25                 db    0
.rdata$r:00000C26                 db    0
.rdata$r:00000C27                 db    0
.rdata$r:00000C28                 db    0
.rdata$r:00000C29                 db    0
.rdata$r:00000C2A                 db    0
.rdata$r:00000C2B                 db    0
.rdata$r:00000C2C                 db    0
.rdata$r:00000C2D                 db    0
.rdata$r:00000C2E                 db    0
.rdata$r:00000C2F                 db    0
.rdata$r:00000C30                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000C34                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C34 _rdata$r        ends
.rdata$r:00000C34
.rdata$r:00000C38 ; ===========================================================================
.rdata$r:00000C38
.rdata$r:00000C38 ; Segment type: Pure data
.rdata$r:00000C38 ; Segment permissions: Read
.rdata$r:00000C38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C38                 assume cs:_rdata$r
.rdata$r:00000C38                 ;org 0C38h
.rdata$r:00000C38 ; COMDAT (pick any)
.rdata$r:00000C38                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:00000C38 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:00000C38 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:00000C38                                         ; DATA XREF: .rdata:00000BC0o
.rdata$r:00000C39                 db    0
.rdata$r:00000C3A                 db    0
.rdata$r:00000C3B                 db    0
.rdata$r:00000C3C                 db    4
.rdata$r:00000C3D                 db    0
.rdata$r:00000C3E                 db    0
.rdata$r:00000C3F                 db    0
.rdata$r:00000C40                 db    0
.rdata$r:00000C41                 db    0
.rdata$r:00000C42                 db    0
.rdata$r:00000C43                 db    0
.rdata$r:00000C44                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000C48                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C48 _rdata$r        ends
.rdata$r:00000C48
.rdata$r:00000C4C ; ===========================================================================
.rdata$r:00000C4C
.rdata$r:00000C4C ; Segment type: Pure data
.rdata$r:00000C4C ; Segment permissions: Read
.rdata$r:00000C4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C4C                 assume cs:_rdata$r
.rdata$r:00000C4C                 ;org 0C4Ch
.rdata$r:00000C4C ; COMDAT (pick any)
.rdata$r:00000C4C                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata$r:00000C4C ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00000C4C ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00000C4C                                         ; DATA XREF: .rdata:00000BA8o
.rdata$r:00000C4D                 db    0
.rdata$r:00000C4E                 db    0
.rdata$r:00000C4F                 db    0
.rdata$r:00000C50                 db    8
.rdata$r:00000C51                 db    0
.rdata$r:00000C52                 db    0
.rdata$r:00000C53                 db    0
.rdata$r:00000C54                 db    0
.rdata$r:00000C55                 db    0
.rdata$r:00000C56                 db    0
.rdata$r:00000C57                 db    0
.rdata$r:00000C58                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000C5C                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C5C _rdata$r        ends
.rdata$r:00000C5C
.rdata$r:00000C60 ; ===========================================================================
.rdata$r:00000C60
.rdata$r:00000C60 ; Segment type: Pure data
.rdata$r:00000C60 ; Segment permissions: Read
.rdata$r:00000C60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C60                 assume cs:_rdata$r
.rdata$r:00000C60                 ;org 0C60h
.rdata$r:00000C60 ; COMDAT (pick any)
.rdata$r:00000C60                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:00000C60 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:00000C60 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:00000C60                                         ; DATA XREF: .rdata:00000B94o
.rdata$r:00000C61                 db    0
.rdata$r:00000C62                 db    0
.rdata$r:00000C63                 db    0
.rdata$r:00000C64                 db  0Ch
.rdata$r:00000C65                 db    0
.rdata$r:00000C66                 db    0
.rdata$r:00000C67                 db    0
.rdata$r:00000C68                 db    0
.rdata$r:00000C69                 db    0
.rdata$r:00000C6A                 db    0
.rdata$r:00000C6B                 db    0
.rdata$r:00000C6C                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000C70                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C70 _rdata$r        ends
.rdata$r:00000C70
.rdata$r:00000C74 ; ===========================================================================
.rdata$r:00000C74
.rdata$r:00000C74 ; Segment type: Pure data
.rdata$r:00000C74 ; Segment permissions: Read
.rdata$r:00000C74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C74                 assume cs:_rdata$r
.rdata$r:00000C74                 ;org 0C74h
.rdata$r:00000C74 ; COMDAT (pick any)
.rdata$r:00000C74                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata$r:00000C74 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00000C74 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00000C74                                         ; DATA XREF: .rdata:00000B80o
.rdata$r:00000C75                 db    0
.rdata$r:00000C76                 db    0
.rdata$r:00000C77                 db    0
.rdata$r:00000C78                 db  10h
.rdata$r:00000C79                 db    0
.rdata$r:00000C7A                 db    0
.rdata$r:00000C7B                 db    0
.rdata$r:00000C7C                 db    0
.rdata$r:00000C7D                 db    0
.rdata$r:00000C7E                 db    0
.rdata$r:00000C7F                 db    0
.rdata$r:00000C80                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000C84                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C84 _rdata$r        ends
.rdata$r:00000C84
.text:00000C88 ; ===========================================================================
.text:00000C88
.text:00000C88 ; Segment type: Pure code
.text:00000C88 ; Segment permissions: Read/Execute
.text:00000C88 _text           segment para public 'CODE' use32
.text:00000C88                 assume cs:_text
.text:00000C88                 ;org 0C88h
.text:00000C88 ; COMDAT (pick any)
.text:00000C88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C88
.text:00000C88 ; =============== S U B R O U T I N E =======================================
.text:00000C88
.text:00000C88 ; Attributes: bp-based frame
.text:00000C88
.text:00000C88 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(unsigned int)
.text:00000C88                 public ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z
.text:00000C88 ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z proc near
.text:00000C88
.text:00000C88 var_4           = dword ptr -4
.text:00000C88 arg_0           = dword ptr  8
.text:00000C88
.text:00000C88                 push    ebp
.text:00000C89                 mov     ebp, esp
.text:00000C8B                 push    ecx
.text:00000C8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C93                 mov     [ebp+var_4], ecx
.text:00000C96                 mov     ecx, [ebp+var_4] ; this
.text:00000C99                 call    ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)
.text:00000C9E                 mov     eax, [ebp+arg_0]
.text:00000CA1                 and     eax, 1
.text:00000CA4                 jz      short loc_CB2
.text:00000CA6                 mov     ecx, [ebp+var_4]
.text:00000CA9                 push    ecx             ; void *
.text:00000CAA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000CAF                 add     esp, 4
.text:00000CB2
.text:00000CB2 loc_CB2:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(uint)+1Cj
.text:00000CB2                 mov     eax, [ebp+var_4]
.text:00000CB5                 add     esp, 4
.text:00000CB8                 cmp     ebp, esp
.text:00000CBA                 call    __RTC_CheckEsp
.text:00000CBF                 mov     esp, ebp
.text:00000CC1                 pop     ebp
.text:00000CC2                 retn    4
.text:00000CC2 ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z endp
.text:00000CC2
.text:00000CC2 ; ---------------------------------------------------------------------------
.text:00000CC5                 align 4
.text:00000CC5 _text           ends
.text:00000CC5
.text:00000CC8 ; ===========================================================================
.text:00000CC8
.text:00000CC8 ; Segment type: Pure code
.text:00000CC8 ; Segment permissions: Read/Execute
.text:00000CC8 _text           segment para public 'CODE' use32
.text:00000CC8                 assume cs:_text
.text:00000CC8                 ;org 0CC8h
.text:00000CC8 ; COMDAT (pick any)
.text:00000CC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CC8
.text:00000CC8 ; =============== S U B R O U T I N E =======================================
.text:00000CC8
.text:00000CC8 ; Attributes: bp-based frame
.text:00000CC8
.text:00000CC8 ; _DWORD __thiscall CLzOutWindow::~CLzOutWindow(CLzOutWindow *__hidden this)
.text:00000CC8                 public ??1CLzOutWindow@@QAE@XZ
.text:00000CC8 ??1CLzOutWindow@@QAE@XZ proc near       ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+8Cp
.text:00000CC8                                         ; __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0+6j
.text:00000CC8
.text:00000CC8 var_4           = dword ptr -4
.text:00000CC8
.text:00000CC8                 push    ebp
.text:00000CC9                 mov     ebp, esp
.text:00000CCB                 push    ecx
.text:00000CCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CD3                 mov     [ebp+var_4], ecx
.text:00000CD6                 mov     ecx, [ebp+var_4] ; this
.text:00000CD9                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00000CDE                 add     esp, 4
.text:00000CE1                 cmp     ebp, esp
.text:00000CE3                 call    __RTC_CheckEsp
.text:00000CE8                 mov     esp, ebp
.text:00000CEA                 pop     ebp
.text:00000CEB                 retn
.text:00000CEB ??1CLzOutWindow@@QAE@XZ endp
.text:00000CEB
.text:00000CEB _text           ends
.text:00000CEB
.text:00000CEC ; ===========================================================================
.text:00000CEC
.text:00000CEC ; Segment type: Pure code
.text:00000CEC ; Segment permissions: Read/Execute
.text:00000CEC _text           segment para public 'CODE' use32
.text:00000CEC                 assume cs:_text
.text:00000CEC                 ;org 0CECh
.text:00000CEC ; COMDAT (pick any)
.text:00000CEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CEC
.text:00000CEC ; =============== S U B R O U T I N E =======================================
.text:00000CEC
.text:00000CEC ; Attributes: bp-based frame
.text:00000CEC
.text:00000CEC ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:00000CEC                 public ??1COutBuffer@@QAE@XZ
.text:00000CEC ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: CLzOutWindow::~CLzOutWindow(void)+11p
.text:00000CEC
.text:00000CEC var_4           = dword ptr -4
.text:00000CEC
.text:00000CEC                 push    ebp
.text:00000CED                 mov     ebp, esp
.text:00000CEF                 push    ecx
.text:00000CF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CF7                 mov     [ebp+var_4], ecx
.text:00000CFA                 mov     ecx, [ebp+var_4] ; this
.text:00000CFD                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:00000D02                 add     esp, 4
.text:00000D05                 cmp     ebp, esp
.text:00000D07                 call    __RTC_CheckEsp
.text:00000D0C                 mov     esp, ebp
.text:00000D0E                 pop     ebp
.text:00000D0F                 retn
.text:00000D0F ??1COutBuffer@@QAE@XZ endp
.text:00000D0F
.text:00000D0F _text           ends
.text:00000D0F
.text:00000D10 ; ===========================================================================
.text:00000D10
.text:00000D10 ; Segment type: Pure code
.text:00000D10 ; Segment permissions: Read/Execute
.text:00000D10 _text           segment para public 'CODE' use32
.text:00000D10                 assume cs:_text
.text:00000D10                 ;org 0D10h
.text:00000D10 ; COMDAT (pick any)
.text:00000D10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D10
.text:00000D10 ; =============== S U B R O U T I N E =======================================
.text:00000D10
.text:00000D10 ; Attributes: bp-based frame
.text:00000D10
.text:00000D10 ; public: __thiscall NBitl::CDecoder<class CInBuffer>::~CDecoder<class CInBuffer>(void)
.text:00000D10                 public ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00000D10 ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00000D10                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+6Bp
.text:00000D10
.text:00000D10 var_4           = dword ptr -4
.text:00000D10
.text:00000D10                 push    ebp
.text:00000D11                 mov     ebp, esp
.text:00000D13                 push    ecx
.text:00000D14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D1B                 mov     [ebp+var_4], ecx
.text:00000D1E                 mov     ecx, [ebp+var_4]
.text:00000D21                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:00000D26                 add     esp, 4
.text:00000D29                 cmp     ebp, esp
.text:00000D2B                 call    __RTC_CheckEsp
.text:00000D30                 mov     esp, ebp
.text:00000D32                 pop     ebp
.text:00000D33                 retn
.text:00000D33 ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00000D33
.text:00000D33 _text           ends
.text:00000D33
.text:00000D34 ; ===========================================================================
.text:00000D34
.text:00000D34 ; Segment type: Pure code
.text:00000D34 ; Segment permissions: Read/Execute
.text:00000D34 _text           segment para public 'CODE' use32
.text:00000D34                 assume cs:_text
.text:00000D34                 ;org 0D34h
.text:00000D34 ; COMDAT (pick any)
.text:00000D34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D34
.text:00000D34 ; =============== S U B R O U T I N E =======================================
.text:00000D34
.text:00000D34 ; Attributes: bp-based frame
.text:00000D34
.text:00000D34 ; public: __thiscall NBitl::CBaseDecoder<class CInBuffer>::~CBaseDecoder<class CInBuffer>(void)
.text:00000D34                 public ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00000D34 ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00000D34                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)+11p
.text:00000D34
.text:00000D34 var_4           = dword ptr -4
.text:00000D34
.text:00000D34                 push    ebp
.text:00000D35                 mov     ebp, esp
.text:00000D37                 push    ecx
.text:00000D38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D3F                 mov     [ebp+var_4], ecx
.text:00000D42                 mov     ecx, [ebp+var_4]
.text:00000D45                 add     ecx, 8          ; this
.text:00000D48                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00000D4D                 add     esp, 4
.text:00000D50                 cmp     ebp, esp
.text:00000D52                 call    __RTC_CheckEsp
.text:00000D57                 mov     esp, ebp
.text:00000D59                 pop     ebp
.text:00000D5A                 retn
.text:00000D5A ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00000D5A
.text:00000D5A ; ---------------------------------------------------------------------------
.text:00000D5B                 align 4
.text:00000D5B _text           ends
.text:00000D5B
.text:00000D5C ; ===========================================================================
.text:00000D5C
.text:00000D5C ; Segment type: Pure code
.text:00000D5C ; Segment permissions: Read/Execute
.text:00000D5C _text           segment para public 'CODE' use32
.text:00000D5C                 assume cs:_text
.text:00000D5C                 ;org 0D5Ch
.text:00000D5C ; COMDAT (pick any)
.text:00000D5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D5C
.text:00000D5C ; =============== S U B R O U T I N E =======================================
.text:00000D5C
.text:00000D5C ; Attributes: bp-based frame
.text:00000D5C
.text:00000D5C ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:00000D5C                 public ??1CInBuffer@@QAE@XZ
.text:00000D5C ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)+14p
.text:00000D5C
.text:00000D5C var_4           = dword ptr -4
.text:00000D5C
.text:00000D5C                 push    ebp
.text:00000D5D                 mov     ebp, esp
.text:00000D5F                 push    ecx
.text:00000D60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D67                 mov     [ebp+var_4], ecx
.text:00000D6A                 mov     ecx, [ebp+var_4] ; this
.text:00000D6D                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:00000D72                 add     esp, 4
.text:00000D75                 cmp     ebp, esp
.text:00000D77                 call    __RTC_CheckEsp
.text:00000D7C                 mov     esp, ebp
.text:00000D7E                 pop     ebp
.text:00000D7F                 retn
.text:00000D7F ??1CInBuffer@@QAE@XZ endp
.text:00000D7F
.text:00000D7F _text           ends
.text:00000D7F
.text:00000D80 ; ===========================================================================
.text:00000D80
.text:00000D80 ; Segment type: Pure code
.text:00000D80 ; Segment permissions: Read/Execute
.text:00000D80 _text           segment para public 'CODE' use32
.text:00000D80                 assume cs:_text
.text:00000D80                 ;org 0D80h
.text:00000D80 ; COMDAT (pick any)
.text:00000D80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D80
.text:00000D80 ; =============== S U B R O U T I N E =======================================
.text:00000D80
.text:00000D80 ; Attributes: bp-based frame
.text:00000D80
.text:00000D80 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(NCompress::NDeflate::NEncoder::CCOMCoder *__hidden this)
.text:00000D80                 public ??0CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ
.text:00000D80 ??0CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ proc near
.text:00000D80                                         ; CODE XREF: CreateEnc(void)+5Ap
.text:00000D80
.text:00000D80 var_4           = dword ptr -4
.text:00000D80
.text:00000D80                 push    ebp
.text:00000D81                 mov     ebp, esp
.text:00000D83                 push    ecx
.text:00000D84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D8B                 mov     [ebp+var_4], ecx
.text:00000D8E                 mov     ecx, [ebp+var_4] ; this
.text:00000D91                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000D96                 mov     ecx, [ebp+var_4]
.text:00000D99                 add     ecx, 4          ; this
.text:00000D9C                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:00000DA1                 mov     ecx, [ebp+var_4]
.text:00000DA4                 add     ecx, 8          ; this
.text:00000DA7                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000DAC                 push    0               ; bool
.text:00000DAE                 mov     ecx, [ebp+var_4]
.text:00000DB1                 add     ecx, 10h        ; this
.text:00000DB4                 call    ??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z ; NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)
.text:00000DB9                 mov     eax, [ebp+var_4]
.text:00000DBC                 mov     dword ptr [eax], offset ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressCoder'}
.text:00000DC2                 mov     ecx, [ebp+var_4]
.text:00000DC5                 mov     dword ptr [ecx+4], offset ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000DCC                 mov     eax, [ebp+var_4]
.text:00000DCF                 add     esp, 4
.text:00000DD2                 cmp     ebp, esp
.text:00000DD4                 call    __RTC_CheckEsp
.text:00000DD9                 mov     esp, ebp
.text:00000DDB                 pop     ebp
.text:00000DDC                 retn
.text:00000DDC ??0CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ endp
.text:00000DDC
.text:00000DDC ; ---------------------------------------------------------------------------
.text:00000DDD                 align 10h
.text:00000DDD _text           ends
.text:00000DDD
.rdata:00000DE0 ; ===========================================================================
.rdata:00000DE0
.rdata:00000DE0 ; Segment type: Pure data
.rdata:00000DE0 ; Segment permissions: Read
.rdata:00000DE0 _rdata          segment dword public 'DATA' use32
.rdata:00000DE0                 assume cs:_rdata
.rdata:00000DE0                 ;org 0DE0h
.rdata:00000DE0 ; COMDAT (pick largest)
.rdata:00000DE0                 dd offset ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00000DE4                 public ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@
.rdata:00000DE4 ; const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00000DE4 ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000DE4                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+45o
.rdata:00000DE4                                         ; [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000DE8                 dd offset ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::AddRef`adjustor{4}' (void)
.rdata:00000DEC                 dd offset ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::Release`adjustor{4}' (void)
.rdata:00000DF0                 dd offset ?SetCoderProperties@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCompress::NDeflate::NEncoder::CCOMCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00000DF0 _rdata          ends
.rdata:00000DF0
.rdata:00000DF4 ; ===========================================================================
.rdata:00000DF4
.rdata:00000DF4 ; Segment type: Pure data
.rdata:00000DF4 ; Segment permissions: Read
.rdata:00000DF4 _rdata          segment dword public 'DATA' use32
.rdata:00000DF4                 assume cs:_rdata
.rdata:00000DF4                 ;org 0DF4h
.rdata:00000DF4 ; COMDAT (pick largest)
.rdata:00000DF4                 dd offset ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00000DF8                 public ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:00000DF8 ; const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressCoder'}
.rdata:00000DF8 ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000DF8                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+3Co
.rdata:00000DF8                                         ; NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)
.rdata:00000DFC                 dd offset ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder::AddRef(void)
.rdata:00000E00                 dd offset ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)
.rdata:00000E04                 dd offset ?Code@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NEncoder::CCOMCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000E04 _rdata          ends
.rdata:00000E04
.rdata$r:00000E08 ; ===========================================================================
.rdata$r:00000E08
.rdata$r:00000E08 ; Segment type: Pure data
.rdata$r:00000E08 ; Segment permissions: Read
.rdata$r:00000E08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E08                 assume cs:_rdata$r
.rdata$r:00000E08                 ;org 0E08h
.rdata$r:00000E08 ; COMDAT (pick any)
.rdata$r:00000E08                 public ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:00000E08 ; const NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00000E08 ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00000E08                                         ; DATA XREF: .rdata:00000DF4o
.rdata$r:00000E09                 db    0
.rdata$r:00000E0A                 db    0
.rdata$r:00000E0B                 db    0
.rdata$r:00000E0C                 db    0
.rdata$r:00000E0D                 db    0
.rdata$r:00000E0E                 db    0
.rdata$r:00000E0F                 db    0
.rdata$r:00000E10                 db    0
.rdata$r:00000E11                 db    0
.rdata$r:00000E12                 db    0
.rdata$r:00000E13                 db    0
.rdata$r:00000E14                 dd offset ??_R0?AVCCOMCoder@NEncoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00000E18                 dd offset ??_R3CCOMCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E18 _rdata$r        ends
.rdata$r:00000E18
.data:00000E1C ; ===========================================================================
.data:00000E1C
.data:00000E1C ; Segment type: Pure data
.data:00000E1C ; Segment permissions: Read/Write
.data:00000E1C _data           segment dword public 'DATA' use32
.data:00000E1C                 assume cs:_data
.data:00000E1C                 ;org 0E1Ch
.data:00000E1C ; COMDAT (pick any)
.data:00000E1C                 public ??_R0?AVCCOMCoder@NEncoder@NDeflate@NCompress@@@8
.data:00000E1C ; class NCompress::NDeflate::NEncoder::CCOMCoder `RTTI Type Descriptor'
.data:00000E1C ??_R0?AVCCOMCoder@NEncoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000E1C                                         ; DATA XREF: .rdata$r:00000E14o
.data:00000E1C                                         ; .rdata$r:NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000E1C                                         ; const type_info::`vftable'
.data:00000E20                 db    0
.data:00000E21                 db    0
.data:00000E22                 db    0
.data:00000E23                 db    0
.data:00000E24                 db  2Eh ; .
.data:00000E25                 db  3Fh ; ?
.data:00000E26                 db  41h ; A
.data:00000E27                 db  56h ; V
.data:00000E28                 db  43h ; C
.data:00000E29                 db  43h ; C
.data:00000E2A                 db  4Fh ; O
.data:00000E2B                 db  4Dh ; M
.data:00000E2C                 db  43h ; C
.data:00000E2D                 db  6Fh ; o
.data:00000E2E                 db  64h ; d
.data:00000E2F                 db  65h ; e
.data:00000E30                 db  72h ; r
.data:00000E31                 db  40h ; @
.data:00000E32                 db  4Eh ; N
.data:00000E33                 db  45h ; E
.data:00000E34                 db  6Eh ; n
.data:00000E35                 db  63h ; c
.data:00000E36                 db  6Fh ; o
.data:00000E37                 db  64h ; d
.data:00000E38                 db  65h ; e
.data:00000E39                 db  72h ; r
.data:00000E3A                 db  40h ; @
.data:00000E3B                 db  4Eh ; N
.data:00000E3C                 db  44h ; D
.data:00000E3D                 db  65h ; e
.data:00000E3E                 db  66h ; f
.data:00000E3F                 db  6Ch ; l
.data:00000E40                 db  61h ; a
.data:00000E41                 db  74h ; t
.data:00000E42                 db  65h ; e
.data:00000E43                 db  40h ; @
.data:00000E44                 db  4Eh ; N
.data:00000E45                 db  43h ; C
.data:00000E46                 db  6Fh ; o
.data:00000E47                 db  6Dh ; m
.data:00000E48                 db  70h ; p
.data:00000E49                 db  72h ; r
.data:00000E4A                 db  65h ; e
.data:00000E4B                 db  73h ; s
.data:00000E4C                 db  73h ; s
.data:00000E4D                 db  40h ; @
.data:00000E4E                 db  40h ; @
.data:00000E4F                 db    0
.data:00000E4F _data           ends
.data:00000E4F
.rdata$r:00000E50 ; ===========================================================================
.rdata$r:00000E50
.rdata$r:00000E50 ; Segment type: Pure data
.rdata$r:00000E50 ; Segment permissions: Read
.rdata$r:00000E50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E50                 assume cs:_rdata$r
.rdata$r:00000E50                 ;org 0E50h
.rdata$r:00000E50 ; COMDAT (pick any)
.rdata$r:00000E50                 public ??_R3CCOMCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000E50 ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E50 ??_R3CCOMCoder@NEncoder@NDeflate@NCompress@@8 db    0
.rdata$r:00000E50                                         ; DATA XREF: .rdata$r:00000E18o
.rdata$r:00000E50                                         ; .rdata$r:00000E98o ...
.rdata$r:00000E51                 db    0
.rdata$r:00000E52                 db    0
.rdata$r:00000E53                 db    0
.rdata$r:00000E54                 db    1
.rdata$r:00000E55                 db    0
.rdata$r:00000E56                 db    0
.rdata$r:00000E57                 db    0
.rdata$r:00000E58                 db    7
.rdata$r:00000E59                 db    0
.rdata$r:00000E5A                 db    0
.rdata$r:00000E5B                 db    0
.rdata$r:00000E5C                 dd offset ??_R2CCOMCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Array'
.rdata$r:00000E5C _rdata$r        ends
.rdata$r:00000E5C
.rdata$r:00000E60 ; ===========================================================================
.rdata$r:00000E60
.rdata$r:00000E60 ; Segment type: Pure data
.rdata$r:00000E60 ; Segment permissions: Read
.rdata$r:00000E60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E60                 assume cs:_rdata$r
.rdata$r:00000E60                 ;org 0E60h
.rdata$r:00000E60 ; COMDAT (pick any)
.rdata$r:00000E60                 public ??_R2CCOMCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000E60 ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Array'
.rdata$r:00000E60 ??_R2CCOMCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCOMCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000E60                                         ; DATA XREF: .rdata$r:00000E5Co
.rdata$r:00000E60                                         ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E64                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E68                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000E6C                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000E70                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000E74                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000E78                 dd offset ??_R1BA@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000E7C                 db    0
.rdata$r:00000E7D                 align 10h
.rdata$r:00000E7D _rdata$r        ends
.rdata$r:00000E7D
.rdata$r:00000E80 ; ===========================================================================
.rdata$r:00000E80
.rdata$r:00000E80 ; Segment type: Pure data
.rdata$r:00000E80 ; Segment permissions: Read
.rdata$r:00000E80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E80                 assume cs:_rdata$r
.rdata$r:00000E80                 ;org 0E80h
.rdata$r:00000E80 ; COMDAT (pick any)
.rdata$r:00000E80                 public ??_R1A@?0A@EA@CCOMCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000E80 ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000E80 ??_R1A@?0A@EA@CCOMCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCOMCoder@NEncoder@NDeflate@NCompress@@@8
.rdata$r:00000E80                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Array'o
.rdata$r:00000E80                                         ; NCompress::NDeflate::NEncoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00000E84                 db    6
.rdata$r:00000E85                 db    0
.rdata$r:00000E86                 db    0
.rdata$r:00000E87                 db    0
.rdata$r:00000E88                 db    0
.rdata$r:00000E89                 db    0
.rdata$r:00000E8A                 db    0
.rdata$r:00000E8B                 db    0
.rdata$r:00000E8C                 db 0FFh
.rdata$r:00000E8D                 db 0FFh
.rdata$r:00000E8E                 db 0FFh
.rdata$r:00000E8F                 db 0FFh
.rdata$r:00000E90                 db    0
.rdata$r:00000E91                 db    0
.rdata$r:00000E92                 db    0
.rdata$r:00000E93                 db    0
.rdata$r:00000E94                 db  40h ; @
.rdata$r:00000E95                 db    0
.rdata$r:00000E96                 db    0
.rdata$r:00000E97                 db    0
.rdata$r:00000E98                 dd offset ??_R3CCOMCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E98 _rdata$r        ends
.rdata$r:00000E98
.rdata$r:00000E9C ; ===========================================================================
.rdata$r:00000E9C
.rdata$r:00000E9C ; Segment type: Pure data
.rdata$r:00000E9C ; Segment permissions: Read
.rdata$r:00000E9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E9C                 assume cs:_rdata$r
.rdata$r:00000E9C                 ;org 0E9Ch
.rdata$r:00000E9C ; COMDAT (pick any)
.rdata$r:00000E9C                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000E9C ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000E9C ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00000E9C                                         ; DATA XREF: .rdata$r:00000E6Co
.rdata$r:00000E9C                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000EA0                 db    1
.rdata$r:00000EA1                 db    0
.rdata$r:00000EA2                 db    0
.rdata$r:00000EA3                 db    0
.rdata$r:00000EA4                 db    4
.rdata$r:00000EA5                 db    0
.rdata$r:00000EA6                 db    0
.rdata$r:00000EA7                 db    0
.rdata$r:00000EA8                 db 0FFh
.rdata$r:00000EA9                 db 0FFh
.rdata$r:00000EAA                 db 0FFh
.rdata$r:00000EAB                 db 0FFh
.rdata$r:00000EAC                 db    0
.rdata$r:00000EAD                 db    0
.rdata$r:00000EAE                 db    0
.rdata$r:00000EAF                 db    0
.rdata$r:00000EB0                 db  40h ; @
.rdata$r:00000EB1                 db    0
.rdata$r:00000EB2                 db    0
.rdata$r:00000EB3                 db    0
.rdata$r:00000EB4                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EB4 _rdata$r        ends
.rdata$r:00000EB4
.data:00000EB8 ; ===========================================================================
.data:00000EB8
.data:00000EB8 ; Segment type: Pure data
.data:00000EB8 ; Segment permissions: Read/Write
.data:00000EB8 _data           segment dword public 'DATA' use32
.data:00000EB8                 assume cs:_data
.data:00000EB8                 ;org 0EB8h
.data:00000EB8 ; COMDAT (pick any)
.data:00000EB8                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:00000EB8 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:00000EB8 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00000EB8                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000EB8                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000EB8                                         ; const type_info::`vftable'
.data:00000EBC                 align 10h
.data:00000EC0 a_?auicompres_0 db '.?AUICompressSetCoderProperties@@',0
.data:00000EE2                 align 4
.data:00000EE2 _data           ends
.data:00000EE2
.rdata$r:00000EE4 ; ===========================================================================
.rdata$r:00000EE4
.rdata$r:00000EE4 ; Segment type: Pure data
.rdata$r:00000EE4 ; Segment permissions: Read
.rdata$r:00000EE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EE4                 assume cs:_rdata$r
.rdata$r:00000EE4                 ;org 0EE4h
.rdata$r:00000EE4 ; COMDAT (pick any)
.rdata$r:00000EE4                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:00000EE4 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EE4 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:00000EE4                                         ; DATA XREF: .rdata$r:00000EB4o
.rdata$r:00000EE4                                         ; .rdata$r:00000F18o ...
.rdata$r:00000EE5                 db    0
.rdata$r:00000EE6                 db    0
.rdata$r:00000EE7                 db    0
.rdata$r:00000EE8                 db    0
.rdata$r:00000EE9                 db    0
.rdata$r:00000EEA                 db    0
.rdata$r:00000EEB                 db    0
.rdata$r:00000EEC                 db    2
.rdata$r:00000EED                 db    0
.rdata$r:00000EEE                 db    0
.rdata$r:00000EEF                 db    0
.rdata$r:00000EF0                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000EF0 _rdata$r        ends
.rdata$r:00000EF0
.rdata$r:00000EF4 ; ===========================================================================
.rdata$r:00000EF4
.rdata$r:00000EF4 ; Segment type: Pure data
.rdata$r:00000EF4 ; Segment permissions: Read
.rdata$r:00000EF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EF4                 assume cs:_rdata$r
.rdata$r:00000EF4                 ;org 0EF4h
.rdata$r:00000EF4 ; COMDAT (pick any)
.rdata$r:00000EF4                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00000EF4 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000EF4 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000EF4                                         ; DATA XREF: .rdata$r:00000EF0o
.rdata$r:00000EF4                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EF8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EFC                 db    0
.rdata$r:00000EFD                 align 10h
.rdata$r:00000EFD _rdata$r        ends
.rdata$r:00000EFD
.rdata$r:00000F00 ; ===========================================================================
.rdata$r:00000F00
.rdata$r:00000F00 ; Segment type: Pure data
.rdata$r:00000F00 ; Segment permissions: Read
.rdata$r:00000F00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F00                 assume cs:_rdata$r
.rdata$r:00000F00                 ;org 0F00h
.rdata$r:00000F00 ; COMDAT (pick any)
.rdata$r:00000F00                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000F00 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000F00 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00000F00                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:00000F00                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000F04                 db    1
.rdata$r:00000F05                 db    0
.rdata$r:00000F06                 db    0
.rdata$r:00000F07                 db    0
.rdata$r:00000F08                 db    0
.rdata$r:00000F09                 db    0
.rdata$r:00000F0A                 db    0
.rdata$r:00000F0B                 db    0
.rdata$r:00000F0C                 db 0FFh
.rdata$r:00000F0D                 db 0FFh
.rdata$r:00000F0E                 db 0FFh
.rdata$r:00000F0F                 db 0FFh
.rdata$r:00000F10                 db    0
.rdata$r:00000F11                 db    0
.rdata$r:00000F12                 db    0
.rdata$r:00000F13                 db    0
.rdata$r:00000F14                 db  40h ; @
.rdata$r:00000F15                 db    0
.rdata$r:00000F16                 db    0
.rdata$r:00000F17                 db    0
.rdata$r:00000F18                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F18 _rdata$r        ends
.rdata$r:00000F18
.rdata$r:00000F1C ; ===========================================================================
.rdata$r:00000F1C
.rdata$r:00000F1C ; Segment type: Pure data
.rdata$r:00000F1C ; Segment permissions: Read
.rdata$r:00000F1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F1C                 assume cs:_rdata$r
.rdata$r:00000F1C                 ;org 0F1Ch
.rdata$r:00000F1C ; COMDAT (pick any)
.rdata$r:00000F1C                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:00000F1C ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00000F1C ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000F1C                                         ; DATA XREF: .rdata$r:00000E74o
.rdata$r:00000F1C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000F20                 db    0
.rdata$r:00000F21                 db    0
.rdata$r:00000F22                 db    0
.rdata$r:00000F23                 db    0
.rdata$r:00000F24                 db    8
.rdata$r:00000F25                 db    0
.rdata$r:00000F26                 db    0
.rdata$r:00000F27                 db    0
.rdata$r:00000F28                 db 0FFh
.rdata$r:00000F29                 db 0FFh
.rdata$r:00000F2A                 db 0FFh
.rdata$r:00000F2B                 db 0FFh
.rdata$r:00000F2C                 db    0
.rdata$r:00000F2D                 db    0
.rdata$r:00000F2E                 db    0
.rdata$r:00000F2F                 db    0
.rdata$r:00000F30                 db  40h ; @
.rdata$r:00000F31                 db    0
.rdata$r:00000F32                 db    0
.rdata$r:00000F33                 db    0
.rdata$r:00000F34                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F34 _rdata$r        ends
.rdata$r:00000F34
.rdata$r:00000F38 ; ===========================================================================
.rdata$r:00000F38
.rdata$r:00000F38 ; Segment type: Pure data
.rdata$r:00000F38 ; Segment permissions: Read
.rdata$r:00000F38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F38                 assume cs:_rdata$r
.rdata$r:00000F38                 ;org 0F38h
.rdata$r:00000F38 ; COMDAT (pick any)
.rdata$r:00000F38                 public ??_R1BA@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000F38 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00000F38 ??_R1BA@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8
.rdata$r:00000F38                                         ; DATA XREF: .rdata$r:00000E78o
.rdata$r:00000F38                                         ; NCompress::NDeflate::NEncoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000F3C                 align 10h
.rdata$r:00000F40                 db  10h
.rdata$r:00000F41                 db    0
.rdata$r:00000F42                 db    0
.rdata$r:00000F43                 db    0
.rdata$r:00000F44                 db 0FFh
.rdata$r:00000F45                 db 0FFh
.rdata$r:00000F46                 db 0FFh
.rdata$r:00000F47                 db 0FFh
.rdata$r:00000F48                 db    0
.rdata$r:00000F49                 db    0
.rdata$r:00000F4A                 db    0
.rdata$r:00000F4B                 db    0
.rdata$r:00000F4C                 db  40h ; @
.rdata$r:00000F4D                 db    0
.rdata$r:00000F4E                 db    0
.rdata$r:00000F4F                 db    0
.rdata$r:00000F50                 dd offset ??_R3CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F50 _rdata$r        ends
.rdata$r:00000F50
.data:00000F54 ; ===========================================================================
.data:00000F54
.data:00000F54 ; Segment type: Pure data
.data:00000F54 ; Segment permissions: Read/Write
.data:00000F54 _data           segment dword public 'DATA' use32
.data:00000F54                 assume cs:_data
.data:00000F54                 ;org 0F54h
.data:00000F54 ; COMDAT (pick any)
.data:00000F54                 public ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8
.data:00000F54 ; class NCompress::NDeflate::NEncoder::CCoder `RTTI Type Descriptor'
.data:00000F54 ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000F54                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00000F54                                         ; .rdata$r:NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000F54                                         ; const type_info::`vftable'
.data:00000F58                 db    0
.data:00000F59                 db    0
.data:00000F5A                 db    0
.data:00000F5B                 db    0
.data:00000F5C                 db  2Eh ; .
.data:00000F5D                 db  3Fh ; ?
.data:00000F5E                 db  41h ; A
.data:00000F5F                 db  56h ; V
.data:00000F60                 db  43h ; C
.data:00000F61                 db  43h ; C
.data:00000F62                 db  6Fh ; o
.data:00000F63                 db  64h ; d
.data:00000F64                 db  65h ; e
.data:00000F65                 db  72h ; r
.data:00000F66                 db  40h ; @
.data:00000F67                 db  4Eh ; N
.data:00000F68                 db  45h ; E
.data:00000F69                 db  6Eh ; n
.data:00000F6A                 db  63h ; c
.data:00000F6B                 db  6Fh ; o
.data:00000F6C                 db  64h ; d
.data:00000F6D                 db  65h ; e
.data:00000F6E                 db  72h ; r
.data:00000F6F                 db  40h ; @
.data:00000F70                 db  4Eh ; N
.data:00000F71                 db  44h ; D
.data:00000F72                 db  65h ; e
.data:00000F73                 db  66h ; f
.data:00000F74                 db  6Ch ; l
.data:00000F75                 db  61h ; a
.data:00000F76                 db  74h ; t
.data:00000F77                 db  65h ; e
.data:00000F78                 db  40h ; @
.data:00000F79                 db  4Eh ; N
.data:00000F7A                 db  43h ; C
.data:00000F7B                 db  6Fh ; o
.data:00000F7C                 db  6Dh ; m
.data:00000F7D                 db  70h ; p
.data:00000F7E                 db  72h ; r
.data:00000F7F                 db  65h ; e
.data:00000F80                 db  73h ; s
.data:00000F81                 db  73h ; s
.data:00000F82                 db  40h ; @
.data:00000F83                 db  40h ; @
.data:00000F84                 db    0
.data:00000F85                 align 4
.data:00000F85 _data           ends
.data:00000F85
.rdata$r:00000F88 ; ===========================================================================
.rdata$r:00000F88
.rdata$r:00000F88 ; Segment type: Pure data
.rdata$r:00000F88 ; Segment permissions: Read
.rdata$r:00000F88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F88                 assume cs:_rdata$r
.rdata$r:00000F88                 ;org 0F88h
.rdata$r:00000F88 ; COMDAT (pick any)
.rdata$r:00000F88                 public ??_R3CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000F88 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F88 ??_R3CCoder@NEncoder@NDeflate@NCompress@@8 db    0
.rdata$r:00000F88                                         ; DATA XREF: .rdata$r:00000F50o
.rdata$r:00000F88                                         ; .rdata$r:00000FB8o
.rdata$r:00000F89                 db    0
.rdata$r:00000F8A                 db    0
.rdata$r:00000F8B                 db    0
.rdata$r:00000F8C                 db    0
.rdata$r:00000F8D                 db    0
.rdata$r:00000F8E                 db    0
.rdata$r:00000F8F                 db    0
.rdata$r:00000F90                 db    1
.rdata$r:00000F91                 db    0
.rdata$r:00000F92                 db    0
.rdata$r:00000F93                 db    0
.rdata$r:00000F94                 dd offset ??_R2CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Array'
.rdata$r:00000F94 _rdata$r        ends
.rdata$r:00000F94
.rdata$r:00000F98 ; ===========================================================================
.rdata$r:00000F98
.rdata$r:00000F98 ; Segment type: Pure data
.rdata$r:00000F98 ; Segment permissions: Read
.rdata$r:00000F98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F98                 assume cs:_rdata$r
.rdata$r:00000F98                 ;org 0F98h
.rdata$r:00000F98 ; COMDAT (pick any)
.rdata$r:00000F98                 public ??_R2CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000F98 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Array'
.rdata$r:00000F98 ??_R2CCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000F98                                         ; DATA XREF: .rdata$r:00000F94o
.rdata$r:00000F98                                         ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F9C                 db    0
.rdata$r:00000F9D                 align 10h
.rdata$r:00000F9D _rdata$r        ends
.rdata$r:00000F9D
.rdata$r:00000FA0 ; ===========================================================================
.rdata$r:00000FA0
.rdata$r:00000FA0 ; Segment type: Pure data
.rdata$r:00000FA0 ; Segment permissions: Read
.rdata$r:00000FA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FA0                 assume cs:_rdata$r
.rdata$r:00000FA0                 ;org 0FA0h
.rdata$r:00000FA0 ; COMDAT (pick any)
.rdata$r:00000FA0                 public ??_R1A@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000FA0 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000FA0 ??_R1A@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8
.rdata$r:00000FA0                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Array'o
.rdata$r:00000FA0                                         ; NCompress::NDeflate::NEncoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000FA4                 db    0
.rdata$r:00000FA5                 db    0
.rdata$r:00000FA6                 db    0
.rdata$r:00000FA7                 db    0
.rdata$r:00000FA8                 db    0
.rdata$r:00000FA9                 db    0
.rdata$r:00000FAA                 db    0
.rdata$r:00000FAB                 db    0
.rdata$r:00000FAC                 db 0FFh
.rdata$r:00000FAD                 db 0FFh
.rdata$r:00000FAE                 db 0FFh
.rdata$r:00000FAF                 db 0FFh
.rdata$r:00000FB0                 db    0
.rdata$r:00000FB1                 db    0
.rdata$r:00000FB2                 db    0
.rdata$r:00000FB3                 db    0
.rdata$r:00000FB4                 db  40h ; @
.rdata$r:00000FB5                 db    0
.rdata$r:00000FB6                 db    0
.rdata$r:00000FB7                 db    0
.rdata$r:00000FB8                 dd offset ??_R3CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000FB8 _rdata$r        ends
.rdata$r:00000FB8
.rdata$r:00000FBC ; ===========================================================================
.rdata$r:00000FBC
.rdata$r:00000FBC ; Segment type: Pure data
.rdata$r:00000FBC ; Segment permissions: Read
.rdata$r:00000FBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FBC                 assume cs:_rdata$r
.rdata$r:00000FBC                 ;org 0FBCh
.rdata$r:00000FBC ; COMDAT (pick any)
.rdata$r:00000FBC                 public ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@
.rdata$r:00000FBC ; const NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00000FBC ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00000FBC                                         ; DATA XREF: .rdata:00000DE0o
.rdata$r:00000FBD                 db    0
.rdata$r:00000FBE                 db    0
.rdata$r:00000FBF                 db    0
.rdata$r:00000FC0                 db    4
.rdata$r:00000FC1                 db    0
.rdata$r:00000FC2                 db    0
.rdata$r:00000FC3                 db    0
.rdata$r:00000FC4                 db    0
.rdata$r:00000FC5                 db    0
.rdata$r:00000FC6                 db    0
.rdata$r:00000FC7                 db    0
.rdata$r:00000FC8                 dd offset ??_R0?AVCCOMCoder@NEncoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00000FCC                 dd offset ??_R3CCOMCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000FCC _rdata$r        ends
.rdata$r:00000FCC
.text:00000FD0 ; ===========================================================================
.text:00000FD0
.text:00000FD0 ; Segment type: Pure code
.text:00000FD0 ; Segment permissions: Read/Execute
.text:00000FD0 _text           segment para public 'CODE' use32
.text:00000FD0                 assume cs:_text
.text:00000FD0                 ;org 0FD0h
.text:00000FD0 ; COMDAT (pick any)
.text:00000FD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FD0
.text:00000FD0 ; =============== S U B R O U T I N E =======================================
.text:00000FD0
.text:00000FD0 ; Attributes: bp-based frame
.text:00000FD0
.text:00000FD0 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000FD0                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000FD0 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+27p
.text:00000FD0
.text:00000FD0 var_4           = dword ptr -4
.text:00000FD0
.text:00000FD0                 push    ebp
.text:00000FD1                 mov     ebp, esp
.text:00000FD3                 push    ecx
.text:00000FD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FDB                 mov     [ebp+var_4], ecx
.text:00000FDE                 mov     eax, [ebp+var_4]
.text:00000FE1                 mov     dword ptr [eax], 0
.text:00000FE7                 mov     eax, [ebp+var_4]
.text:00000FEA                 mov     esp, ebp
.text:00000FEC                 pop     ebp
.text:00000FED                 retn
.text:00000FED ??0CMyUnknownImp@@QAE@XZ endp
.text:00000FED
.text:00000FED ; ---------------------------------------------------------------------------
.text:00000FEE                 align 10h
.text:00000FEE _text           ends
.text:00000FEE
.text:00000FF0 ; ===========================================================================
.text:00000FF0
.text:00000FF0 ; Segment type: Pure code
.text:00000FF0 ; Segment permissions: Read/Execute
.text:00000FF0 _text           segment para public 'CODE' use32
.text:00000FF0                 assume cs:_text
.text:00000FF0                 ;org 0FF0h
.text:00000FF0 ; COMDAT (pick any)
.text:00000FF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FF0
.text:00000FF0 ; =============== S U B R O U T I N E =======================================
.text:00000FF0
.text:00000FF0 ; Attributes: bp-based frame
.text:00000FF0
.text:00000FF0 ; __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(NCompress::NDeflate::NEncoder::CCOMCoder *this, const struct _GUID *Buf1, void **)
.text:00000FF0                 public ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00000FF0 ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000FF0                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00000FF0                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressCoder'}o
.text:00000FF0
.text:00000FF0 var_8           = dword ptr -8
.text:00000FF0 var_4           = dword ptr -4
.text:00000FF0 this            = dword ptr  8
.text:00000FF0 Buf1            = dword ptr  0Ch
.text:00000FF0 arg_8           = dword ptr  10h
.text:00000FF0
.text:00000FF0                 push    ebp
.text:00000FF1                 mov     ebp, esp
.text:00000FF3                 sub     esp, 8
.text:00000FF6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000FFD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001004                 mov     eax, [ebp+arg_8]
.text:00001007                 mov     dword ptr [eax], 0
.text:0000100D                 push    offset _IID_IUnknown ; Buf2
.text:00001012                 mov     ecx, [ebp+Buf1]
.text:00001015                 push    ecx             ; Buf1
.text:00001016                 call    ___@8           ; __(x,x)
.text:0000101B                 test    eax, eax
.text:0000101D                 jz      short loc_1041
.text:0000101F                 cmp     [ebp+this], 0
.text:00001023                 jz      short loc_1030
.text:00001025                 mov     edx, [ebp+this]
.text:00001028                 add     edx, 4
.text:0000102B                 mov     [ebp+var_4], edx
.text:0000102E                 jmp     short loc_1037
.text:00001030 ; ---------------------------------------------------------------------------
.text:00001030
.text:00001030 loc_1030:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+33j
.text:00001030                 mov     [ebp+var_4], 0
.text:00001037
.text:00001037 loc_1037:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:00001037                 mov     eax, [ebp+arg_8]
.text:0000103A                 mov     ecx, [ebp+var_4]
.text:0000103D                 mov     [eax], ecx
.text:0000103F                 jmp     short loc_107C
.text:00001041 ; ---------------------------------------------------------------------------
.text:00001041
.text:00001041 loc_1041:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00001041                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:00001046                 mov     edx, [ebp+Buf1]
.text:00001049                 push    edx             ; Buf1
.text:0000104A                 call    ___@8           ; __(x,x)
.text:0000104F                 test    eax, eax
.text:00001051                 jz      short loc_1075
.text:00001053                 cmp     [ebp+this], 0
.text:00001057                 jz      short loc_1064
.text:00001059                 mov     eax, [ebp+this]
.text:0000105C                 add     eax, 4
.text:0000105F                 mov     [ebp+var_8], eax
.text:00001062                 jmp     short loc_106B
.text:00001064 ; ---------------------------------------------------------------------------
.text:00001064
.text:00001064 loc_1064:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+67j
.text:00001064                 mov     [ebp+var_8], 0
.text:0000106B
.text:0000106B loc_106B:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+72j
.text:0000106B                 mov     ecx, [ebp+arg_8]
.text:0000106E                 mov     edx, [ebp+var_8]
.text:00001071                 mov     [ecx], edx
.text:00001073                 jmp     short loc_107C
.text:00001075 ; ---------------------------------------------------------------------------
.text:00001075
.text:00001075 loc_1075:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+61j
.text:00001075                 mov     eax, 80004002h
.text:0000107A                 jmp     short loc_108D
.text:0000107C ; ---------------------------------------------------------------------------
.text:0000107C
.text:0000107C loc_107C:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+4Fj
.text:0000107C                                         ; NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+83j
.text:0000107C                 mov     eax, [ebp+this]
.text:0000107F                 mov     ecx, [eax+8]
.text:00001082                 add     ecx, 1
.text:00001085                 mov     edx, [ebp+this]
.text:00001088                 mov     [edx+8], ecx
.text:0000108B                 xor     eax, eax
.text:0000108D
.text:0000108D loc_108D:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+8Aj
.text:0000108D                 add     esp, 8
.text:00001090                 cmp     ebp, esp
.text:00001092                 call    __RTC_CheckEsp
.text:00001097                 mov     esp, ebp
.text:00001099                 pop     ebp
.text:0000109A                 retn    0Ch
.text:0000109A ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000109A
.text:0000109A ; ---------------------------------------------------------------------------
.text:0000109D                 align 10h
.text:0000109D _text           ends
.text:0000109D
.text:000010A0 ; ===========================================================================
.text:000010A0
.text:000010A0 ; Segment type: Pure code
.text:000010A0 ; Segment permissions: Read/Execute
.text:000010A0 _text           segment para public 'CODE' use32
.text:000010A0                 assume cs:_text
.text:000010A0                 ;org 10A0h
.text:000010A0 ; COMDAT (pick any)
.text:000010A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010A0
.text:000010A0 ; =============== S U B R O U T I N E =======================================
.text:000010A0
.text:000010A0 ; Attributes: bp-based frame
.text:000010A0
.text:000010A0 ; unsigned __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::AddRef(NCompress::NDeflate::NEncoder::CCOMCoder *this)
.text:000010A0                 public ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ
.text:000010A0 ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ proc near
.text:000010A0                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::AddRef`adjustor{4}' (void)+5j
.text:000010A0                                         ; DATA XREF: .rdata:00000DFCo
.text:000010A0
.text:000010A0 var_4           = dword ptr -4
.text:000010A0 this            = dword ptr  8
.text:000010A0
.text:000010A0                 push    ebp
.text:000010A1                 mov     ebp, esp
.text:000010A3                 push    ecx
.text:000010A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010AB                 mov     eax, [ebp+this]
.text:000010AE                 mov     ecx, [eax+8]
.text:000010B1                 add     ecx, 1
.text:000010B4                 mov     [ebp+var_4], ecx
.text:000010B7                 mov     edx, [ebp+this]
.text:000010BA                 mov     eax, [ebp+var_4]
.text:000010BD                 mov     [edx+8], eax
.text:000010C0                 mov     eax, [ebp+var_4]
.text:000010C3                 mov     esp, ebp
.text:000010C5                 pop     ebp
.text:000010C6                 retn    4
.text:000010C6 ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ endp
.text:000010C6
.text:000010C6 ; ---------------------------------------------------------------------------
.text:000010C9                 align 4
.text:000010C9 _text           ends
.text:000010C9
.text:000010CC ; ===========================================================================
.text:000010CC
.text:000010CC ; Segment type: Pure code
.text:000010CC ; Segment permissions: Read/Execute
.text:000010CC _text           segment para public 'CODE' use32
.text:000010CC                 assume cs:_text
.text:000010CC                 ;org 10CCh
.text:000010CC ; COMDAT (pick any)
.text:000010CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010CC
.text:000010CC ; =============== S U B R O U T I N E =======================================
.text:000010CC
.text:000010CC ; Attributes: bp-based frame
.text:000010CC
.text:000010CC ; unsigned __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::Release(NCompress::NDeflate::NEncoder::CCOMCoder *this)
.text:000010CC                 public ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ
.text:000010CC ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ proc near
.text:000010CC                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::Release`adjustor{4}' (void)+5j
.text:000010CC                                         ; DATA XREF: .rdata:00000E00o
.text:000010CC
.text:000010CC var_10          = dword ptr -10h
.text:000010CC var_C           = dword ptr -0Ch
.text:000010CC var_8           = dword ptr -8
.text:000010CC var_4           = dword ptr -4
.text:000010CC this            = dword ptr  8
.text:000010CC
.text:000010CC                 push    ebp
.text:000010CD                 mov     ebp, esp
.text:000010CF                 sub     esp, 10h
.text:000010D2                 mov     eax, 0CCCCCCCCh
.text:000010D7                 mov     [ebp+var_10], eax
.text:000010DA                 mov     [ebp+var_C], eax
.text:000010DD                 mov     [ebp+var_8], eax
.text:000010E0                 mov     [ebp+var_4], eax
.text:000010E3                 mov     eax, [ebp+this]
.text:000010E6                 mov     ecx, [eax+8]
.text:000010E9                 sub     ecx, 1
.text:000010EC                 mov     [ebp+var_C], ecx
.text:000010EF                 mov     edx, [ebp+this]
.text:000010F2                 mov     eax, [ebp+var_C]
.text:000010F5                 mov     [edx+8], eax
.text:000010F8                 cmp     [ebp+var_C], 0
.text:000010FC                 jz      short loc_1106
.text:000010FE                 mov     ecx, [ebp+this]
.text:00001101                 mov     eax, [ecx+8]
.text:00001104                 jmp     short loc_1130
.text:00001106 ; ---------------------------------------------------------------------------
.text:00001106
.text:00001106 loc_1106:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)+30j
.text:00001106                 mov     edx, [ebp+this]
.text:00001109                 mov     [ebp+var_8], edx
.text:0000110C                 mov     eax, [ebp+var_8]
.text:0000110F                 mov     [ebp+var_4], eax
.text:00001112                 cmp     [ebp+var_4], 0
.text:00001116                 jz      short loc_1127
.text:00001118                 push    1
.text:0000111A                 mov     ecx, [ebp+var_4]
.text:0000111D                 call    ??_GCCOMCoder@NEncoder@NDeflate@NCompress@@QAEPAXI@Z ; NCompress::NDeflate::NEncoder::CCOMCoder::`scalar deleting destructor'(uint)
.text:00001122                 mov     [ebp+var_10], eax
.text:00001125                 jmp     short loc_112E
.text:00001127 ; ---------------------------------------------------------------------------
.text:00001127
.text:00001127 loc_1127:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)+4Aj
.text:00001127                 mov     [ebp+var_10], 0
.text:0000112E
.text:0000112E loc_112E:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)+59j
.text:0000112E                 xor     eax, eax
.text:00001130
.text:00001130 loc_1130:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)+38j
.text:00001130                 add     esp, 10h
.text:00001133                 cmp     ebp, esp
.text:00001135                 call    __RTC_CheckEsp
.text:0000113A                 mov     esp, ebp
.text:0000113C                 pop     ebp
.text:0000113D                 retn    4
.text:0000113D ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ endp
.text:0000113D
.text:0000113D _text           ends
.text:0000113D
.text:00001140 ; ===========================================================================
.text:00001140
.text:00001140 ; Segment type: Pure code
.text:00001140 ; Segment permissions: Read/Execute
.text:00001140 _text           segment para public 'CODE' use32
.text:00001140                 assume cs:_text
.text:00001140                 ;org 1140h
.text:00001140 ; COMDAT (pick any)
.text:00001140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001140
.text:00001140 ; =============== S U B R O U T I N E =======================================
.text:00001140
.text:00001140 ; Attributes: bp-based frame
.text:00001140
.text:00001140 ; public: void * __thiscall NCompress::NDeflate::NEncoder::CCOMCoder::`scalar deleting destructor'(unsigned int)
.text:00001140                 public ??_GCCOMCoder@NEncoder@NDeflate@NCompress@@QAEPAXI@Z
.text:00001140 ??_GCCOMCoder@NEncoder@NDeflate@NCompress@@QAEPAXI@Z proc near
.text:00001140                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)+51p
.text:00001140
.text:00001140 var_4           = dword ptr -4
.text:00001140 arg_0           = dword ptr  8
.text:00001140
.text:00001140                 push    ebp
.text:00001141                 mov     ebp, esp
.text:00001143                 push    ecx
.text:00001144                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000114B                 mov     [ebp+var_4], ecx
.text:0000114E                 mov     ecx, [ebp+var_4] ; this
.text:00001151                 call    ??1CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CCOMCoder::~CCOMCoder(void)
.text:00001156                 mov     eax, [ebp+arg_0]
.text:00001159                 and     eax, 1
.text:0000115C                 jz      short loc_116A
.text:0000115E                 mov     ecx, [ebp+var_4]
.text:00001161                 push    ecx             ; void *
.text:00001162                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001167                 add     esp, 4
.text:0000116A
.text:0000116A loc_116A:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::`scalar deleting destructor'(uint)+1Cj
.text:0000116A                 mov     eax, [ebp+var_4]
.text:0000116D                 add     esp, 4
.text:00001170                 cmp     ebp, esp
.text:00001172                 call    __RTC_CheckEsp
.text:00001177                 mov     esp, ebp
.text:00001179                 pop     ebp
.text:0000117A                 retn    4
.text:0000117A ??_GCCOMCoder@NEncoder@NDeflate@NCompress@@QAEPAXI@Z endp
.text:0000117A
.text:0000117A ; ---------------------------------------------------------------------------
.text:0000117D                 align 10h
.text:0000117D _text           ends
.text:0000117D
.text:00001180 ; ===========================================================================
.text:00001180
.text:00001180 ; Segment type: Pure code
.text:00001180 ; Segment permissions: Read/Execute
.text:00001180 _text           segment para public 'CODE' use32
.text:00001180                 assume cs:_text
.text:00001180                 ;org 1180h
.text:00001180 ; COMDAT (pick any)
.text:00001180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001180
.text:00001180 ; =============== S U B R O U T I N E =======================================
.text:00001180
.text:00001180 ; Attributes: bp-based frame
.text:00001180
.text:00001180 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00001180                 public ??0ICompressCoder@@QAE@XZ
.text:00001180 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+11p
.text:00001180
.text:00001180 var_4           = dword ptr -4
.text:00001180
.text:00001180                 push    ebp
.text:00001181                 mov     ebp, esp
.text:00001183                 push    ecx
.text:00001184                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000118B                 mov     [ebp+var_4], ecx
.text:0000118E                 mov     ecx, [ebp+var_4]
.text:00001191                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001196                 mov     eax, [ebp+var_4]
.text:00001199                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:0000119F                 mov     eax, [ebp+var_4]
.text:000011A2                 add     esp, 4
.text:000011A5                 cmp     ebp, esp
.text:000011A7                 call    __RTC_CheckEsp
.text:000011AC                 mov     esp, ebp
.text:000011AE                 pop     ebp
.text:000011AF                 retn
.text:000011AF ??0ICompressCoder@@QAE@XZ endp
.text:000011AF
.text:000011AF _text           ends
.text:000011AF
.rdata:000011B0 ; ===========================================================================
.rdata:000011B0
.rdata:000011B0 ; Segment type: Pure data
.rdata:000011B0 ; Segment permissions: Read
.rdata:000011B0 _rdata          segment dword public 'DATA' use32
.rdata:000011B0                 assume cs:_rdata
.rdata:000011B0                 ;org 11B0h
.rdata:000011B0 ; COMDAT (pick largest)
.rdata:000011B0                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:000011B4                 public ??_7ICompressCoder@@6B@
.rdata:000011B4 ; const ICompressCoder::`vftable'
.rdata:000011B4 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:000011B4                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:000011B8                 dd offset __purecall
.rdata:000011BC                 dd offset __purecall
.rdata:000011C0                 dd offset __purecall
.rdata:000011C0 _rdata          ends
.rdata:000011C0
.rdata$r:000011C4 ; ===========================================================================
.rdata$r:000011C4
.rdata$r:000011C4 ; Segment type: Pure data
.rdata$r:000011C4 ; Segment permissions: Read
.rdata$r:000011C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011C4                 assume cs:_rdata$r
.rdata$r:000011C4                 ;org 11C4h
.rdata$r:000011C4 ; COMDAT (pick any)
.rdata$r:000011C4                 public ??_R4ICompressCoder@@6B@
.rdata$r:000011C4 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:000011C4 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:000011B0o
.rdata$r:000011C5                 db    0
.rdata$r:000011C6                 db    0
.rdata$r:000011C7                 db    0
.rdata$r:000011C8                 db    0
.rdata$r:000011C9                 db    0
.rdata$r:000011CA                 db    0
.rdata$r:000011CB                 db    0
.rdata$r:000011CC                 db    0
.rdata$r:000011CD                 db    0
.rdata$r:000011CE                 db    0
.rdata$r:000011CF                 db    0
.rdata$r:000011D0                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:000011D4                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011D4 _rdata$r        ends
.rdata$r:000011D4
.text:000011D8 ; ===========================================================================
.text:000011D8
.text:000011D8 ; Segment type: Pure code
.text:000011D8 ; Segment permissions: Read/Execute
.text:000011D8 _text           segment para public 'CODE' use32
.text:000011D8                 assume cs:_text
.text:000011D8                 ;org 11D8h
.text:000011D8 ; COMDAT (pick any)
.text:000011D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011D8
.text:000011D8 ; =============== S U B R O U T I N E =======================================
.text:000011D8
.text:000011D8 ; Attributes: bp-based frame
.text:000011D8
.text:000011D8 ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:000011D8                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:000011D8 ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:000011D8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+1Cp
.text:000011D8
.text:000011D8 var_4           = dword ptr -4
.text:000011D8
.text:000011D8                 push    ebp
.text:000011D9                 mov     ebp, esp
.text:000011DB                 push    ecx
.text:000011DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011E3                 mov     [ebp+var_4], ecx
.text:000011E6                 mov     ecx, [ebp+var_4]
.text:000011E9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000011EE                 mov     eax, [ebp+var_4]
.text:000011F1                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:000011F7                 mov     eax, [ebp+var_4]
.text:000011FA                 add     esp, 4
.text:000011FD                 cmp     ebp, esp
.text:000011FF                 call    __RTC_CheckEsp
.text:00001204                 mov     esp, ebp
.text:00001206                 pop     ebp
.text:00001207                 retn
.text:00001207 ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:00001207
.text:00001207 _text           ends
.text:00001207
.rdata:00001208 ; ===========================================================================
.rdata:00001208
.rdata:00001208 ; Segment type: Pure data
.rdata:00001208 ; Segment permissions: Read
.rdata:00001208 _rdata          segment dword public 'DATA' use32
.rdata:00001208                 assume cs:_rdata
.rdata:00001208                 ;org 1208h
.rdata:00001208 ; COMDAT (pick largest)
.rdata:00001208                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:0000120C                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:0000120C ; const ICompressSetCoderProperties::`vftable'
.rdata:0000120C ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:0000120C                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:00001210                 dd offset __purecall
.rdata:00001214                 dd offset __purecall
.rdata:00001218                 dd offset __purecall
.rdata:00001218 _rdata          ends
.rdata:00001218
.rdata$r:0000121C ; ===========================================================================
.rdata$r:0000121C
.rdata$r:0000121C ; Segment type: Pure data
.rdata$r:0000121C ; Segment permissions: Read
.rdata$r:0000121C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000121C                 assume cs:_rdata$r
.rdata$r:0000121C                 ;org 121Ch
.rdata$r:0000121C ; COMDAT (pick any)
.rdata$r:0000121C                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:0000121C ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:0000121C ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:0000121C                                         ; DATA XREF: .rdata:00001208o
.rdata$r:0000121D                 db    0
.rdata$r:0000121E                 db    0
.rdata$r:0000121F                 db    0
.rdata$r:00001220                 db    0
.rdata$r:00001221                 db    0
.rdata$r:00001222                 db    0
.rdata$r:00001223                 db    0
.rdata$r:00001224                 db    0
.rdata$r:00001225                 db    0
.rdata$r:00001226                 db    0
.rdata$r:00001227                 db    0
.rdata$r:00001228                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:0000122C                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000122C _rdata$r        ends
.rdata$r:0000122C
.text:00001230 ; ===========================================================================
.text:00001230
.text:00001230 ; Segment type: Pure code
.text:00001230 ; Segment permissions: Read/Execute
.text:00001230 _text           segment para public 'CODE' use32
.text:00001230                 assume cs:_text
.text:00001230                 ;org 1230h
.text:00001230 ; COMDAT (pick any)
.text:00001230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001230
.text:00001230 ; =============== S U B R O U T I N E =======================================
.text:00001230
.text:00001230 ; Attributes: bp-based frame
.text:00001230
.text:00001230 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCOMCoder::~CCOMCoder(NCompress::NDeflate::NEncoder::CCOMCoder *__hidden this)
.text:00001230                 public ??1CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ
.text:00001230 ??1CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ proc near
.text:00001230                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::`scalar deleting destructor'(uint)+11p
.text:00001230
.text:00001230 var_4           = dword ptr -4
.text:00001230
.text:00001230                 push    ebp
.text:00001231                 mov     ebp, esp
.text:00001233                 push    ecx
.text:00001234                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000123B                 mov     [ebp+var_4], ecx
.text:0000123E                 mov     ecx, [ebp+var_4]
.text:00001241                 add     ecx, 10h        ; this
.text:00001244                 call    ??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CCoder::~CCoder(void)
.text:00001249                 add     esp, 4
.text:0000124C                 cmp     ebp, esp
.text:0000124E                 call    __RTC_CheckEsp
.text:00001253                 mov     esp, ebp
.text:00001255                 pop     ebp
.text:00001256                 retn
.text:00001256 ??1CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ endp
.text:00001256
.text:00001256 ; ---------------------------------------------------------------------------
.text:00001257                 align 4
.text:00001257 _text           ends
.text:00001257
.text:00001258 ; ===========================================================================
.text:00001258
.text:00001258 ; Segment type: Pure code
.text:00001258 ; Segment permissions: Read/Execute
.text:00001258 _text           segment para public 'CODE' use32
.text:00001258                 assume cs:_text
.text:00001258                 ;org 1258h
.text:00001258 ; COMDAT (pick any)
.text:00001258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001258
.text:00001258 ; =============== S U B R O U T I N E =======================================
.text:00001258
.text:00001258 ; Attributes: bp-based frame
.text:00001258
.text:00001258 ; public: __thiscall IUnknown::IUnknown(void)
.text:00001258                 public ??0IUnknown@@QAE@XZ
.text:00001258 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00001258                                         ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)+11p
.text:00001258
.text:00001258 var_4           = dword ptr -4
.text:00001258
.text:00001258                 push    ebp
.text:00001259                 mov     ebp, esp
.text:0000125B                 push    ecx
.text:0000125C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001263                 mov     [ebp+var_4], ecx
.text:00001266                 mov     eax, [ebp+var_4]
.text:00001269                 mov     esp, ebp
.text:0000126B                 pop     ebp
.text:0000126C                 retn
.text:0000126C ??0IUnknown@@QAE@XZ endp
.text:0000126C
.text:0000126C ; ---------------------------------------------------------------------------
.text:0000126D                 align 10h
.text:0000126D _text           ends
.text:0000126D
.text:00001270 ; ===========================================================================
.text:00001270
.text:00001270 ; Segment type: Pure code
.text:00001270 ; Segment permissions: Read/Execute
.text:00001270 _text           segment para public 'CODE' use32
.text:00001270                 assume cs:_text
.text:00001270                 ;org 1270h
.text:00001270 ; COMDAT (pick any)
.text:00001270                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001270
.text:00001270 ; =============== S U B R O U T I N E =======================================
.text:00001270
.text:00001270 ; Attributes: bp-based frame
.text:00001270
.text:00001270 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00001270                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00001270 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00001270                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+7Ap
.text:00001270                                         ; __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1+6j
.text:00001270
.text:00001270 var_4           = dword ptr -4
.text:00001270
.text:00001270                 push    ebp
.text:00001271                 mov     ebp, esp
.text:00001273                 push    ecx
.text:00001274                 push    esi
.text:00001275                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000127C                 mov     [ebp+var_4], ecx
.text:0000127F                 mov     eax, [ebp+var_4]
.text:00001282                 cmp     dword ptr [eax], 0
.text:00001285                 jz      short loc_12A2
.text:00001287                 mov     ecx, [ebp+var_4]
.text:0000128A                 mov     edx, [ecx]
.text:0000128C                 mov     eax, [ebp+var_4]
.text:0000128F                 mov     ecx, [eax]
.text:00001291                 mov     edx, [edx]
.text:00001293                 mov     esi, esp
.text:00001295                 push    ecx
.text:00001296                 mov     eax, [edx+8]
.text:00001299                 call    eax
.text:0000129B                 cmp     esi, esp
.text:0000129D                 call    __RTC_CheckEsp
.text:000012A2
.text:000012A2 loc_12A2:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:000012A2                 pop     esi
.text:000012A3                 add     esp, 4
.text:000012A6                 cmp     ebp, esp
.text:000012A8                 call    __RTC_CheckEsp
.text:000012AD                 mov     esp, ebp
.text:000012AF                 pop     ebp
.text:000012B0                 retn
.text:000012B0 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000012B0
.text:000012B0 ; ---------------------------------------------------------------------------
.text:000012B1                 align 4
.text:000012B1 _text           ends
.text:000012B1
.text:000012B4 ; ===========================================================================
.text:000012B4
.text:000012B4 ; Segment type: Pure code
.text:000012B4 ; Segment permissions: Read/Execute
.text:000012B4 _text           segment para public 'CODE' use32
.text:000012B4                 assume cs:_text
.text:000012B4                 ;org 12B4h
.text:000012B4 ; COMDAT (pick any)
.text:000012B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012B4
.text:000012B4 ; =============== S U B R O U T I N E =======================================
.text:000012B4
.text:000012B4
.text:000012B4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.text:000012B4                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ
.text:000012B4 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ proc near
.text:000012B4                                         ; DATA XREF: .rdata:00000284o
.text:000012B4                                         ; .rdata:00000BA0o
.text:000012B4
.text:000012B4 arg_0           = dword ptr  4
.text:000012B4
.text:000012B4                 sub     [esp+arg_0], 0Ch
.text:000012B9                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:000012B9 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ endp
.text:000012B9
.text:000012B9 ; ---------------------------------------------------------------------------
.text:000012BE                 align 10h
.text:000012BE _text           ends
.text:000012BE
.text:000012C0 ; ===========================================================================
.text:000012C0
.text:000012C0 ; Segment type: Pure code
.text:000012C0 ; Segment permissions: Read/Execute
.text:000012C0 _text           segment para public 'CODE' use32
.text:000012C0                 assume cs:_text
.text:000012C0                 ;org 12C0h
.text:000012C0 ; COMDAT (pick any)
.text:000012C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012C0
.text:000012C0 ; =============== S U B R O U T I N E =======================================
.text:000012C0
.text:000012C0
.text:000012C0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.text:000012C0                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ
.text:000012C0 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:000012C0                                         ; DATA XREF: .rdata:000002ACo
.text:000012C0                                         ; .rdata:00000BC8o
.text:000012C0
.text:000012C0 arg_0           = dword ptr  4
.text:000012C0
.text:000012C0                 sub     [esp+arg_0], 4
.text:000012C5                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:000012C5 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ endp
.text:000012C5
.text:000012C5 ; ---------------------------------------------------------------------------
.text:000012CA                 align 4
.text:000012CA _text           ends
.text:000012CA
.text:000012CC ; ===========================================================================
.text:000012CC
.text:000012CC ; Segment type: Pure code
.text:000012CC ; Segment permissions: Read/Execute
.text:000012CC _text           segment para public 'CODE' use32
.text:000012CC                 assume cs:_text
.text:000012CC                 ;org 12CCh
.text:000012CC ; COMDAT (pick any)
.text:000012CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012CC
.text:000012CC ; =============== S U B R O U T I N E =======================================
.text:000012CC
.text:000012CC
.text:000012CC ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000012CC                 public ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:000012CC ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000012CC                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:000012CC
.text:000012CC arg_0           = dword ptr  4
.text:000012CC
.text:000012CC                 sub     [esp+arg_0], 4
.text:000012D1                 jmp     ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)
.text:000012D1 ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000012D1
.text:000012D1 ; ---------------------------------------------------------------------------
.text:000012D6                 align 4
.text:000012D6 _text           ends
.text:000012D6
.text:000012D8 ; ===========================================================================
.text:000012D8
.text:000012D8 ; Segment type: Pure code
.text:000012D8 ; Segment permissions: Read/Execute
.text:000012D8 _text           segment para public 'CODE' use32
.text:000012D8                 assume cs:_text
.text:000012D8                 ;org 12D8h
.text:000012D8 ; COMDAT (pick any)
.text:000012D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012D8
.text:000012D8 ; =============== S U B R O U T I N E =======================================
.text:000012D8
.text:000012D8
.text:000012D8 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.text:000012D8                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ
.text:000012D8 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ proc near
.text:000012D8                                         ; DATA XREF: .rdata:00000270o
.text:000012D8                                         ; .rdata:00000B8Co
.text:000012D8
.text:000012D8 arg_0           = dword ptr  4
.text:000012D8
.text:000012D8                 sub     [esp+arg_0], 10h
.text:000012DD                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:000012DD ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ endp
.text:000012DD
.text:000012DD ; ---------------------------------------------------------------------------
.text:000012E2                 align 4
.text:000012E2 _text           ends
.text:000012E2
.text:000012E4 ; ===========================================================================
.text:000012E4
.text:000012E4 ; Segment type: Pure code
.text:000012E4 ; Segment permissions: Read/Execute
.text:000012E4 _text           segment para public 'CODE' use32
.text:000012E4                 assume cs:_text
.text:000012E4                 ;org 12E4h
.text:000012E4 ; COMDAT (pick any)
.text:000012E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012E4
.text:000012E4 ; =============== S U B R O U T I N E =======================================
.text:000012E4
.text:000012E4
.text:000012E4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.text:000012E4                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ
.text:000012E4 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ proc near
.text:000012E4                                         ; DATA XREF: .rdata:00000294o
.text:000012E4                                         ; .rdata:00000BB0o
.text:000012E4
.text:000012E4 arg_0           = dword ptr  4
.text:000012E4
.text:000012E4                 sub     [esp+arg_0], 8
.text:000012E9                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:000012E9 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ endp
.text:000012E9
.text:000012E9 ; ---------------------------------------------------------------------------
.text:000012EE                 align 10h
.text:000012EE _text           ends
.text:000012EE
.text:000012F0 ; ===========================================================================
.text:000012F0
.text:000012F0 ; Segment type: Pure code
.text:000012F0 ; Segment permissions: Read/Execute
.text:000012F0 _text           segment para public 'CODE' use32
.text:000012F0                 assume cs:_text
.text:000012F0                 ;org 12F0h
.text:000012F0 ; COMDAT (pick any)
.text:000012F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012F0
.text:000012F0 ; =============== S U B R O U T I N E =======================================
.text:000012F0
.text:000012F0
.text:000012F0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.text:000012F0                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ
.text:000012F0 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ proc near
.text:000012F0                                         ; DATA XREF: .rdata:00000280o
.text:000012F0                                         ; .rdata:00000B9Co
.text:000012F0
.text:000012F0 arg_0           = dword ptr  4
.text:000012F0
.text:000012F0                 sub     [esp+arg_0], 0Ch
.text:000012F5                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:000012F5 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ endp
.text:000012F5
.text:000012F5 ; ---------------------------------------------------------------------------
.text:000012FA                 align 4
.text:000012FA _text           ends
.text:000012FA
.text:000012FC ; ===========================================================================
.text:000012FC
.text:000012FC ; Segment type: Pure code
.text:000012FC ; Segment permissions: Read/Execute
.text:000012FC _text           segment para public 'CODE' use32
.text:000012FC                 assume cs:_text
.text:000012FC                 ;org 12FCh
.text:000012FC ; COMDAT (pick any)
.text:000012FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012FC
.text:000012FC ; =============== S U B R O U T I N E =======================================
.text:000012FC
.text:000012FC
.text:000012FC ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000012FC                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:000012FC ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000012FC                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:000012FC                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:000012FC
.text:000012FC arg_0           = dword ptr  4
.text:000012FC
.text:000012FC                 sub     [esp+arg_0], 4
.text:00001301                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:00001301 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00001301
.text:00001301 ; ---------------------------------------------------------------------------
.text:00001306                 align 4
.text:00001306 _text           ends
.text:00001306
.text:00001308 ; ===========================================================================
.text:00001308
.text:00001308 ; Segment type: Pure code
.text:00001308 ; Segment permissions: Read/Execute
.text:00001308 _text           segment para public 'CODE' use32
.text:00001308                 assume cs:_text
.text:00001308                 ;org 1308h
.text:00001308 ; COMDAT (pick any)
.text:00001308                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001308
.text:00001308 ; =============== S U B R O U T I N E =======================================
.text:00001308
.text:00001308
.text:00001308 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.text:00001308                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ
.text:00001308 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ proc near
.text:00001308                                         ; DATA XREF: .rdata:0000026Co
.text:00001308                                         ; .rdata:00000B88o
.text:00001308
.text:00001308 arg_0           = dword ptr  4
.text:00001308
.text:00001308                 sub     [esp+arg_0], 10h
.text:0000130D                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:0000130D ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ endp
.text:0000130D
.text:0000130D ; ---------------------------------------------------------------------------
.text:00001312                 align 4
.text:00001312 _text           ends
.text:00001312
.text:00001314 ; ===========================================================================
.text:00001314
.text:00001314 ; Segment type: Pure code
.text:00001314 ; Segment permissions: Read/Execute
.text:00001314 _text           segment para public 'CODE' use32
.text:00001314                 assume cs:_text
.text:00001314                 ;org 1314h
.text:00001314 ; COMDAT (pick any)
.text:00001314                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001314
.text:00001314 ; =============== S U B R O U T I N E =======================================
.text:00001314
.text:00001314
.text:00001314 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00001314                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00001314 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00001314                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetInStream'}o
.text:00001314                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}o
.text:00001314
.text:00001314 arg_0           = dword ptr  4
.text:00001314
.text:00001314                 sub     [esp+arg_0], 8
.text:00001319                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:00001319 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00001319
.text:00001319 ; ---------------------------------------------------------------------------
.text:0000131E                 align 10h
.text:0000131E _text           ends
.text:0000131E
.text:00001320 ; ===========================================================================
.text:00001320
.text:00001320 ; Segment type: Pure code
.text:00001320 ; Segment permissions: Read/Execute
.text:00001320 _text           segment para public 'CODE' use32
.text:00001320                 assume cs:_text
.text:00001320                 ;org 1320h
.text:00001320 ; COMDAT (pick any)
.text:00001320                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001320
.text:00001320 ; =============== S U B R O U T I N E =======================================
.text:00001320
.text:00001320
.text:00001320 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00001320                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:00001320 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00001320                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00001320                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00001320
.text:00001320 arg_0           = dword ptr  4
.text:00001320
.text:00001320                 sub     [esp+arg_0], 0Ch
.text:00001325                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:00001325 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00001325
.text:00001325 ; ---------------------------------------------------------------------------
.text:0000132A                 align 4
.text:0000132A _text           ends
.text:0000132A
.text:0000132C ; ===========================================================================
.text:0000132C
.text:0000132C ; Segment type: Pure code
.text:0000132C ; Segment permissions: Read/Execute
.text:0000132C _text           segment para public 'CODE' use32
.text:0000132C                 assume cs:_text
.text:0000132C                 ;org 132Ch
.text:0000132C ; COMDAT (pick any)
.text:0000132C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000132C
.text:0000132C ; =============== S U B R O U T I N E =======================================
.text:0000132C
.text:0000132C
.text:0000132C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::Release`adjustor{4}' (void)
.text:0000132C                 public ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ
.text:0000132C ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:0000132C                                         ; DATA XREF: .rdata:00000DECo
.text:0000132C
.text:0000132C arg_0           = dword ptr  4
.text:0000132C
.text:0000132C                 sub     [esp+arg_0], 4
.text:00001331                 jmp     ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)
.text:00001331 ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ endp
.text:00001331
.text:00001331 ; ---------------------------------------------------------------------------
.text:00001336                 align 4
.text:00001336 _text           ends
.text:00001336
.text:00001338 ; ===========================================================================
.text:00001338
.text:00001338 ; Segment type: Pure code
.text:00001338 ; Segment permissions: Read/Execute
.text:00001338 _text           segment para public 'CODE' use32
.text:00001338                 assume cs:_text
.text:00001338                 ;org 1338h
.text:00001338 ; COMDAT (pick any)
.text:00001338                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001338
.text:00001338 ; =============== S U B R O U T I N E =======================================
.text:00001338
.text:00001338
.text:00001338 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:00001338                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.text:00001338 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:00001338                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ISequentialInStream'}o
.text:00001338                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}o
.text:00001338
.text:00001338 arg_0           = dword ptr  4
.text:00001338
.text:00001338                 sub     [esp+arg_0], 10h
.text:0000133D                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:0000133D ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:0000133D
.text:0000133D ; ---------------------------------------------------------------------------
.text:00001342                 align 4
.text:00001342 _text           ends
.text:00001342
.text:00001344 ; ===========================================================================
.text:00001344
.text:00001344 ; Segment type: Pure code
.text:00001344 ; Segment permissions: Read/Execute
.text:00001344 _text           segment para public 'CODE' use32
.text:00001344                 assume cs:_text
.text:00001344                 ;org 1344h
.text:00001344 ; COMDAT (pick any)
.text:00001344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001344
.text:00001344 ; =============== S U B R O U T I N E =======================================
.text:00001344
.text:00001344
.text:00001344 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.text:00001344                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ
.text:00001344 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:00001344                                         ; DATA XREF: .rdata:000002B0o
.text:00001344                                         ; .rdata:00000BCCo
.text:00001344
.text:00001344 arg_0           = dword ptr  4
.text:00001344
.text:00001344                 sub     [esp+arg_0], 4
.text:00001349                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00001349 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ endp
.text:00001349
.text:00001349 ; ---------------------------------------------------------------------------
.text:0000134E                 align 10h
.text:0000134E _text           ends
.text:0000134E
.text:00001350 ; ===========================================================================
.text:00001350
.text:00001350 ; Segment type: Pure code
.text:00001350 ; Segment permissions: Read/Execute
.text:00001350 _text           segment para public 'CODE' use32
.text:00001350                 assume cs:_text
.text:00001350                 ;org 1350h
.text:00001350 ; COMDAT (pick any)
.text:00001350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001350
.text:00001350 ; =============== S U B R O U T I N E =======================================
.text:00001350
.text:00001350
.text:00001350 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.text:00001350                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ
.text:00001350 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ proc near
.text:00001350                                         ; DATA XREF: .rdata:00000298o
.text:00001350                                         ; .rdata:00000BB4o
.text:00001350
.text:00001350 arg_0           = dword ptr  4
.text:00001350
.text:00001350                 sub     [esp+arg_0], 8
.text:00001355                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00001355 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ endp
.text:00001355
.text:00001355 ; ---------------------------------------------------------------------------
.text:0000135A                 align 4
.text:0000135A _text           ends
.text:0000135A
.text:0000135C ; ===========================================================================
.text:0000135C
.text:0000135C ; Segment type: Pure code
.text:0000135C ; Segment permissions: Read/Execute
.text:0000135C _text           segment para public 'CODE' use32
.text:0000135C                 assume cs:_text
.text:0000135C                 ;org 135Ch
.text:0000135C ; COMDAT (pick any)
.text:0000135C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000135C
.text:0000135C ; =============== S U B R O U T I N E =======================================
.text:0000135C
.text:0000135C
.text:0000135C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::AddRef`adjustor{4}' (void)
.text:0000135C                 public ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ
.text:0000135C ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:0000135C                                         ; DATA XREF: .rdata:00000DE8o
.text:0000135C
.text:0000135C arg_0           = dword ptr  4
.text:0000135C
.text:0000135C                 sub     [esp+arg_0], 4
.text:00001361                 jmp     ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder::AddRef(void)
.text:00001361 ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ endp
.text:00001361
.text:00001361 ; ---------------------------------------------------------------------------
.text:00001366                 align 4
.text:00001366 _text           ends
.text:00001366
.text$yc:00001368 ; ===========================================================================
.text$yc:00001368
.text$yc:00001368 ; Segment type: Pure code
.text$yc:00001368 ; Segment permissions: Read/Execute
.text$yc:00001368 _text$yc        segment para public 'CODE' use32
.text$yc:00001368                 assume cs:_text$yc
.text$yc:00001368                 ;org 1368h
.text$yc:00001368 ; COMDAT (pick any)
.text$yc:00001368                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00001368
.text$yc:00001368 ; =============== S U B R O U T I N E =======================================
.text$yc:00001368
.text$yc:00001368 ; Attributes: bp-based frame
.text$yc:00001368
.text$yc:00001368 ; void __cdecl `dynamic initializer for 'g_RegisterCodec''(void)
.text$yc:00001368 ??__Eg_RegisterCodec@@YAXXZ proc near   ; DATA XREF: .CRT$XCU:_g_RegisterCodec$initializer$o
.text$yc:00001368                 push    ebp
.text$yc:00001369                 mov     ebp, esp
.text$yc:0000136B                 mov     ecx, offset _g_RegisterCodec ; this
.text$yc:00001370                 call    ??0CRegisterCodecDeflate@@QAE@XZ ; CRegisterCodecDeflate::CRegisterCodecDeflate(void)
.text$yc:00001375                 cmp     ebp, esp
.text$yc:00001377                 call    __RTC_CheckEsp
.text$yc:0000137C                 pop     ebp
.text$yc:0000137D                 retn
.text$yc:0000137D ??__Eg_RegisterCodec@@YAXXZ endp
.text$yc:0000137D
.text$yc:0000137D ; ---------------------------------------------------------------------------
.text$yc:0000137E                 align 10h
.text$yc:0000137E _text$yc        ends
.text$yc:0000137E
.text:00001380 ; ===========================================================================
.text:00001380
.text:00001380 ; Segment type: Pure code
.text:00001380 ; Segment permissions: Read/Execute
.text:00001380 _text           segment para public 'CODE' use32
.text:00001380                 assume cs:_text
.text:00001380                 ;org 1380h
.text:00001380 ; COMDAT (pick any)
.text:00001380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001380
.text:00001380 ; =============== S U B R O U T I N E =======================================
.text:00001380
.text:00001380 ; Attributes: bp-based frame
.text:00001380
.text:00001380 ; _DWORD __thiscall CRegisterCodecDeflate::CRegisterCodecDeflate(CRegisterCodecDeflate *__hidden this)
.text:00001380                 public ??0CRegisterCodecDeflate@@QAE@XZ
.text:00001380 ??0CRegisterCodecDeflate@@QAE@XZ proc near
.text:00001380                                         ; CODE XREF: `dynamic initializer for 'g_RegisterCodec''(void)+8p
.text:00001380
.text:00001380 var_4           = dword ptr -4
.text:00001380
.text:00001380                 push    ebp
.text:00001381                 mov     ebp, esp
.text:00001383                 push    ecx
.text:00001384                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000138B                 mov     [ebp+var_4], ecx
.text:0000138E                 push    offset _g_CodecInfo ; struct CCodecInfo *
.text:00001393                 call    ?RegisterCodec@@YGXPBUCCodecInfo@@@Z ; RegisterCodec(CCodecInfo const *)
.text:00001398                 mov     eax, [ebp+var_4]
.text:0000139B                 add     esp, 4
.text:0000139E                 cmp     ebp, esp
.text:000013A0                 call    __RTC_CheckEsp
.text:000013A5                 mov     esp, ebp
.text:000013A7                 pop     ebp
.text:000013A8                 retn
.text:000013A8 ??0CRegisterCodecDeflate@@QAE@XZ endp
.text:000013A8
.text:000013A8 ; ---------------------------------------------------------------------------
.text:000013A9                 align 4
.text:000013A9 _text           ends
.text:000013A9
.bss:000013AC ; ===========================================================================
.bss:000013AC
.bss:000013AC ; Segment type: Uninitialized
.bss:000013AC ; Segment permissions: Read/Write
.bss:000013AC _bss            segment byte public 'BSS' use32
.bss:000013AC                 assume cs:_bss
.bss:000013AC                 ;org 13ACh
.bss:000013AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000013AC ; CRegisterCodecDeflate g_RegisterCodec
.bss:000013AC _g_RegisterCodec db    ? ;              ; DATA XREF: `dynamic initializer for 'g_RegisterCodec''(void)+3o
.bss:000013AD                 align 10h
.bss:000013AD _bss            ends
.bss:000013AD
.CRT$XCU:000013B0 ; ===========================================================================
.CRT$XCU:000013B0
.CRT$XCU:000013B0 ; Segment type: Pure data
.CRT$XCU:000013B0 ; Segment permissions: Read
.CRT$XCU:000013B0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000013B0                 assume cs:_CRT$XCU
.CRT$XCU:000013B0                 ;org 13B0h
.CRT$XCU:000013B0 _g_RegisterCodec$initializer$ dd offset ??__Eg_RegisterCodec@@YAXXZ ; `dynamic initializer for 'g_RegisterCodec''(void)
.CRT$XCU:000013B0 _CRT$XCU        ends
.CRT$XCU:000013B0
UNDEF:000013C0 ; ===========================================================================
UNDEF:000013C0
UNDEF:000013C0 ; Segment type: Externs
UNDEF:000013C0 ; UNDEF
UNDEF:000013C0 ; void __cdecl operator delete(void *)
UNDEF:000013C0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateDec@@YGPAXXZ$0+4p
UNDEF:000013C0                                         ; __unwindfunclet$?CreateEnc@@YGPAXXZ$0+4p ...
UNDEF:000013C4 ; void *__cdecl operator new(unsigned int)
UNDEF:000013C4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateDec(void)+3Fp
UNDEF:000013C4                                         ; CreateEnc(void)+3Fp
UNDEF:000013C8                 extrn ___security_cookie:near
UNDEF:000013C8                                         ; DATA XREF: CreateDec(void)+29r
UNDEF:000013C8                                         ; CreateEnc(void)+29r ...
UNDEF:000013CC                 extrn ___CxxFrameHandler3:near
UNDEF:000013CC                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+16j
UNDEF:000013CC                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+16j ...
UNDEF:000013D0 ; __fastcall __security_check_cookie(x)
UNDEF:000013D0                 extrn @__security_check_cookie@4:near
UNDEF:000013D0                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+Cp
UNDEF:000013D0                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+Cp ...
UNDEF:000013D4                 extrn __RTC_CheckEsp:near ; CODE XREF: CreateDec(void)+8Bp
UNDEF:000013D4                                         ; CreateEnc(void)+8Bp ...
UNDEF:000013D8                 extrn __RTC_Shutdown:near
UNDEF:000013D8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000013DC                 extrn __RTC_InitBase:near
UNDEF:000013DC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000013E0 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::CCoder(NCompress::NDeflate::NDecoder::CCoder *__hidden this, bool, bool)
UNDEF:000013E0                 extrn ??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z:near
UNDEF:000013E0                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+15p
UNDEF:000013E4 ; const type_info::`vftable'
UNDEF:000013E4                 extrn ??_7type_info@@6B@:near
UNDEF:000013E4                                         ; DATA XREF: .data:NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'o
UNDEF:000013E4                                         ; .data:NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'o ...
UNDEF:000013E8 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:000013E8                 extrn ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:000013E8                                         ; DATA XREF: .rdata:000002C8o
UNDEF:000013E8                                         ; .rdata:00000BE4o
UNDEF:000013EC ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(unsigned int)
UNDEF:000013EC                 extrn ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z_0:near
UNDEF:000013F0 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::`vector deleting destructor'(unsigned int)
UNDEF:000013F0                 extrn ??_ECCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:000013F0                                         ; DATA XREF: .rdata:000002CCo
UNDEF:000013F4 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::CodeResume(struct ISequentialOutStream *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:000013F4                 extrn ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z:near
UNDEF:000013F4                                         ; DATA XREF: .rdata:000002D0o
UNDEF:000013F4                                         ; .rdata:00000BECo
UNDEF:000013F8 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
UNDEF:000013F8                 extrn ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z:near
UNDEF:000013F8                                         ; DATA XREF: .rdata:000002B4o
UNDEF:000013F8                                         ; .rdata:00000BD0o
UNDEF:000013FC ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::SetInStream(struct ISequentialInStream *)
UNDEF:000013FC                 extrn ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:000013FC                                         ; DATA XREF: .rdata:0000029Co
UNDEF:000013FC                                         ; .rdata:00000BB8o
UNDEF:00001400 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
UNDEF:00001400                 extrn ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ:near
UNDEF:00001400                                         ; DATA XREF: .rdata:000002A0o
UNDEF:00001400                                         ; .rdata:00000BBCo
UNDEF:00001404 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
UNDEF:00001404                 extrn ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z:near
UNDEF:00001404                                         ; DATA XREF: .rdata:00000288o
UNDEF:00001404                                         ; .rdata:00000BA4o
UNDEF:00001408 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::Read(void *, unsigned int, unsigned int *)
UNDEF:00001408                 extrn ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:00001408                                         ; DATA XREF: .rdata:00000274o
UNDEF:00001408                                         ; .rdata:00000B90o
UNDEF:0000140C                 extrn _IID_ISequentialInStream:near
UNDEF:0000140C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_8E9o
UNDEF:00001410                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00001410                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_8B5o
UNDEF:00001414                 extrn _IID_ICompressSetInStream:near
UNDEF:00001414                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_881o
UNDEF:00001418                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:00001418                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_84Ao
UNDEF:0000141C ; const IID IID_IUnknown
UNDEF:0000141C                 extrn _IID_IUnknown:near
UNDEF:0000141C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+23o
UNDEF:0000141C                                         ; NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+1Do
UNDEF:00001420 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001420                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001424 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(unsigned int)
UNDEF:00001424                 extrn ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z_0:near
UNDEF:00001428 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`vector deleting destructor'(unsigned int)
UNDEF:00001428                 extrn ??_ECCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00001428                                         ; DATA XREF: .rdata:00000BE8o
UNDEF:0000142C ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:0000142C                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:0000142C                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:00001430 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:00001430                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:00001430                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:00001434 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCoder::CCoder(NCompress::NDeflate::NEncoder::CCoder *__hidden this, bool)
UNDEF:00001434                 extrn ??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z:near
UNDEF:00001434                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+34p
UNDEF:00001438 ; public: virtual long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00001438                 extrn ?Code@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:00001438                                         ; DATA XREF: .rdata:00000E04o
UNDEF:0000143C ; public: virtual long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::SetCoderProperties(unsigned long const *, struct tagPROPVARIANT const *, unsigned int)
UNDEF:0000143C                 extrn ?SetCoderProperties@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z:near
UNDEF:0000143C                                         ; DATA XREF: .rdata:00000DF0o
UNDEF:00001440                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:00001440                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *):loc_1041o
UNDEF:00001444                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00001444                                         ; .rdata:000011B8o ...
UNDEF:00001448 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCoder::~CCoder(NCompress::NDeflate::NEncoder::CCoder *__hidden this)
UNDEF:00001448                 extrn ??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ:near
UNDEF:00001448                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::~CCOMCoder(void)+14p
UNDEF:0000144C ; void __stdcall RegisterCodec(const struct CCodecInfo *)
UNDEF:0000144C                 extrn ?RegisterCodec@@YGXPBUCCodecInfo@@@Z:near
UNDEF:0000144C                                         ; CODE XREF: CRegisterCodecDeflate::CRegisterCodecDeflate(void)+13p
UNDEF:0000144C
UNDEF:0000144C