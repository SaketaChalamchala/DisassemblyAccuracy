.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 0429FF97911096CED7555D6FF9B604C7
.rdata:00000000 ; Input CRC32 : 54B09D04
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Sha256.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _K              dd 428A2F98h            ; DATA XREF: Sha256_WriteByteBlock(x)+141r
.rdata:00000004 dword_4         dd 71374491h            ; DATA XREF: Sha256_WriteByteBlock(x)+1FBr
.rdata:00000008 dword_8         dd 0B5C0FBCFh           ; DATA XREF: Sha256_WriteByteBlock(x)+2B5r
.rdata:0000000C dword_C         dd 0E9B5DBA5h           ; DATA XREF: Sha256_WriteByteBlock(x)+375r
.rdata:00000010 dword_10        dd 3956C25Bh            ; DATA XREF: Sha256_WriteByteBlock(x)+438r
.rdata:00000014 dword_14        dd 59F111F1h            ; DATA XREF: Sha256_WriteByteBlock(x)+4FBr
.rdata:00000018 dword_18        dd 923F82A4h            ; DATA XREF: Sha256_WriteByteBlock(x)+5BEr
.rdata:0000001C dword_1C        dd 0AB1C5ED5h           ; DATA XREF: Sha256_WriteByteBlock(x)+681r
.rdata:00000020 dword_20        dd 0D807AA98h           ; DATA XREF: Sha256_WriteByteBlock(x)+744r
.rdata:00000024 dword_24        dd 12835B01h            ; DATA XREF: Sha256_WriteByteBlock(x)+807r
.rdata:00000028 dword_28        dd 243185BEh            ; DATA XREF: Sha256_WriteByteBlock(x)+8CAr
.rdata:0000002C dword_2C        dd 550C7DC3h            ; DATA XREF: Sha256_WriteByteBlock(x)+98Dr
.rdata:00000030 dword_30        dd 72BE5D74h            ; DATA XREF: Sha256_WriteByteBlock(x)+A50r
.rdata:00000034 dword_34        dd 80DEB1FEh            ; DATA XREF: Sha256_WriteByteBlock(x)+B13r
.rdata:00000038 dword_38        dd 9BDC06A7h            ; DATA XREF: Sha256_WriteByteBlock(x)+BD6r
.rdata:0000003C dword_3C        dd 0C19BF174h           ; DATA XREF: Sha256_WriteByteBlock(x)+C99r
.rdata:00000040                 db 0C1h ; -
.rdata:00000041                 db  69h ; i
.rdata:00000042                 db  9Bh ; ¢
.rdata:00000043                 db 0E4h ; S
.rdata:00000044                 db  86h ; å
.rdata:00000045                 db  47h ; G
.rdata:00000046                 db 0BEh ; +
.rdata:00000047                 db 0EFh ; n
.rdata:00000048                 db 0C6h ; ¦
.rdata:00000049                 db  9Dh ; ¥
.rdata:0000004A                 db 0C1h ; -
.rdata:0000004B                 db  0Fh
.rdata:0000004C                 db 0CCh ; ¦
.rdata:0000004D                 db 0A1h ; í
.rdata:0000004E                 db  0Ch
.rdata:0000004F                 db  24h ; $
.rdata:00000050                 db  6Fh ; o
.rdata:00000051                 db  2Ch ; ,
.rdata:00000052                 db 0E9h ; T
.rdata:00000053                 db  2Dh ; -
.rdata:00000054                 db 0AAh ; ¬
.rdata:00000055                 db  84h ; ä
.rdata:00000056                 db  74h ; t
.rdata:00000057                 db  4Ah ; J
.rdata:00000058                 db 0DCh ; _
.rdata:00000059                 db 0A9h ; ¬
.rdata:0000005A                 db 0B0h ; ¦
.rdata:0000005B                 db  5Ch ; \
.rdata:0000005C                 db 0DAh ; +
.rdata:0000005D                 db  88h ; ê
.rdata:0000005E                 db 0F9h ; ·
.rdata:0000005F                 db  76h ; v
.rdata:00000060                 db  52h ; R
.rdata:00000061                 db  51h ; Q
.rdata:00000062                 db  3Eh ; >
.rdata:00000063                 db  98h ; ÿ
.rdata:00000064                 db  6Dh ; m
.rdata:00000065                 db 0C6h ; ¦
.rdata:00000066                 db  31h ; 1
.rdata:00000067                 db 0A8h ; ¿
.rdata:00000068                 db 0C8h ; +
.rdata:00000069                 db  27h ; '
.rdata:0000006A                 db    3
.rdata:0000006B                 db 0B0h ; ¦
.rdata:0000006C                 db 0C7h ; ¦
.rdata:0000006D                 db  7Fh ; 
.rdata:0000006E                 db  59h ; Y
.rdata:0000006F                 db 0BFh ; +
.rdata:00000070                 db 0F3h ; =
.rdata:00000071                 db  0Bh
.rdata:00000072                 db 0E0h ; a
.rdata:00000073                 db 0C6h ; ¦
.rdata:00000074                 db  47h ; G
.rdata:00000075                 db  91h ; æ
.rdata:00000076                 db 0A7h ; º
.rdata:00000077                 db 0D5h ; +
.rdata:00000078                 db  51h ; Q
.rdata:00000079                 db  63h ; c
.rdata:0000007A                 db 0CAh ; -
.rdata:0000007B                 db    6
.rdata:0000007C                 db  67h ; g
.rdata:0000007D                 db  29h ; )
.rdata:0000007E                 db  29h ; )
.rdata:0000007F                 db  14h
.rdata:00000080                 db  85h ; à
.rdata:00000081                 db  0Ah
.rdata:00000082                 db 0B7h ; +
.rdata:00000083                 db  27h ; '
.rdata:00000084                 db  38h ; 8
.rdata:00000085                 db  21h ; !
.rdata:00000086                 db  1Bh
.rdata:00000087                 db  2Eh ; .
.rdata:00000088                 db 0FCh ; n
.rdata:00000089                 db  6Dh ; m
.rdata:0000008A                 db  2Ch ; ,
.rdata:0000008B                 db  4Dh ; M
.rdata:0000008C                 db  13h
.rdata:0000008D                 db  0Dh
.rdata:0000008E                 db  38h ; 8
.rdata:0000008F                 db  53h ; S
.rdata:00000090                 db  54h ; T
.rdata:00000091                 db  73h ; s
.rdata:00000092                 db  0Ah
.rdata:00000093                 db  65h ; e
.rdata:00000094                 db 0BBh ; +
.rdata:00000095                 db  0Ah
.rdata:00000096                 db  6Ah ; j
.rdata:00000097                 db  76h ; v
.rdata:00000098                 db  2Eh ; .
.rdata:00000099                 db 0C9h ; +
.rdata:0000009A                 db 0C2h ; -
.rdata:0000009B                 db  81h ; ü
.rdata:0000009C                 db  85h ; à
.rdata:0000009D                 db  2Ch ; ,
.rdata:0000009E                 db  72h ; r
.rdata:0000009F                 db  92h ; Æ
.rdata:000000A0                 db 0A1h ; í
.rdata:000000A1                 db 0E8h ; F
.rdata:000000A2                 db 0BFh ; +
.rdata:000000A3                 db 0A2h ; ó
.rdata:000000A4                 db  4Bh ; K
.rdata:000000A5                 db  66h ; f
.rdata:000000A6                 db  1Ah
.rdata:000000A7                 db 0A8h ; ¿
.rdata:000000A8                 db  70h ; p
.rdata:000000A9                 db  8Bh ; ï
.rdata:000000AA                 db  4Bh ; K
.rdata:000000AB                 db 0C2h ; -
.rdata:000000AC                 db 0A3h ; ú
.rdata:000000AD                 db  51h ; Q
.rdata:000000AE                 db  6Ch ; l
.rdata:000000AF                 db 0C7h ; ¦
.rdata:000000B0                 db  19h
.rdata:000000B1                 db 0E8h ; F
.rdata:000000B2                 db  92h ; Æ
.rdata:000000B3                 db 0D1h ; -
.rdata:000000B4                 db  24h ; $
.rdata:000000B5                 db    6
.rdata:000000B6                 db  99h ; Ö
.rdata:000000B7                 db 0D6h ; +
.rdata:000000B8                 db  85h ; à
.rdata:000000B9                 db  35h ; 5
.rdata:000000BA                 db  0Eh
.rdata:000000BB                 db 0F4h ; (
.rdata:000000BC                 db  70h ; p
.rdata:000000BD                 db 0A0h ; á
.rdata:000000BE                 db  6Ah ; j
.rdata:000000BF                 db  10h
.rdata:000000C0                 db  16h
.rdata:000000C1                 db 0C1h ; -
.rdata:000000C2                 db 0A4h ; ñ
.rdata:000000C3                 db  19h
.rdata:000000C4                 db    8
.rdata:000000C5                 db  6Ch ; l
.rdata:000000C6                 db  37h ; 7
.rdata:000000C7                 db  1Eh
.rdata:000000C8                 db  4Ch ; L
.rdata:000000C9                 db  77h ; w
.rdata:000000CA                 db  48h ; H
.rdata:000000CB                 db  27h ; '
.rdata:000000CC                 db 0B5h ; ¦
.rdata:000000CD                 db 0BCh ; +
.rdata:000000CE                 db 0B0h ; ¦
.rdata:000000CF                 db  34h ; 4
.rdata:000000D0                 db 0B3h ; ¦
.rdata:000000D1                 db  0Ch
.rdata:000000D2                 db  1Ch
.rdata:000000D3                 db  39h ; 9
.rdata:000000D4                 db  4Ah ; J
.rdata:000000D5                 db 0AAh ; ¬
.rdata:000000D6                 db 0D8h ; +
.rdata:000000D7                 db  4Eh ; N
.rdata:000000D8                 db  4Fh ; O
.rdata:000000D9                 db 0CAh ; -
.rdata:000000DA                 db  9Ch ; £
.rdata:000000DB                 db  5Bh ; [
.rdata:000000DC                 db 0F3h ; =
.rdata:000000DD                 db  6Fh ; o
.rdata:000000DE                 db  2Eh ; .
.rdata:000000DF                 db  68h ; h
.rdata:000000E0                 db 0EEh ; e
.rdata:000000E1                 db  82h ; é
.rdata:000000E2                 db  8Fh ; Å
.rdata:000000E3                 db  74h ; t
.rdata:000000E4                 db  6Fh ; o
.rdata:000000E5                 db  63h ; c
.rdata:000000E6                 db 0A5h ; Ñ
.rdata:000000E7                 db  78h ; x
.rdata:000000E8                 db  14h
.rdata:000000E9                 db  78h ; x
.rdata:000000EA                 db 0C8h ; +
.rdata:000000EB                 db  84h ; ä
.rdata:000000EC                 db    8
.rdata:000000ED                 db    2
.rdata:000000EE                 db 0C7h ; ¦
.rdata:000000EF                 db  8Ch ; î
.rdata:000000F0                 db 0FAh ; ·
.rdata:000000F1                 db 0FFh
.rdata:000000F2                 db 0BEh ; +
.rdata:000000F3                 db  90h ; É
.rdata:000000F4                 db 0EBh ; d
.rdata:000000F5                 db  6Ch ; l
.rdata:000000F6                 db  50h ; P
.rdata:000000F7                 db 0A4h ; ñ
.rdata:000000F8                 db 0F7h ; ˜
.rdata:000000F9                 db 0A3h ; ú
.rdata:000000FA                 db 0F9h ; ·
.rdata:000000FB                 db 0BEh ; +
.rdata:000000FC                 db 0F2h ; =
.rdata:000000FD                 db  78h ; x
.rdata:000000FE                 db  71h ; q
.rdata:000000FF                 db 0C6h ; ¦
.rdata:000000FF _rdata          ends
.rdata:000000FF
.text:00000100 ; ===========================================================================
.text:00000100
.text:00000100 ; Segment type: Pure code
.text:00000100 ; Segment permissions: Read/Execute
.text:00000100 _text           segment para public 'CODE' use32
.text:00000100                 assume cs:_text
.text:00000100                 ;org 100h
.text:00000100                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000100
.text:00000100 ; =============== S U B R O U T I N E =======================================
.text:00000100
.text:00000100 ; Attributes: bp-based frame
.text:00000100
.text:00000100 ; __stdcall Sha256_Init(x)
.text:00000100                 public _Sha256_Init@4
.text:00000100 _Sha256_Init@4  proc near               ; CODE XREF: Sha256_Final(x,x)+E4p
.text:00000100
.text:00000100 arg_0           = dword ptr  8
.text:00000100
.text:00000100                 push    ebp
.text:00000101                 mov     ebp, esp
.text:00000103                 mov     eax, [ebp+arg_0]
.text:00000106                 mov     dword ptr [eax], 6A09E667h
.text:0000010C                 mov     ecx, [ebp+arg_0]
.text:0000010F                 mov     dword ptr [ecx+4], 0BB67AE85h
.text:00000116                 mov     edx, [ebp+arg_0]
.text:00000119                 mov     dword ptr [edx+8], 3C6EF372h
.text:00000120                 mov     eax, [ebp+arg_0]
.text:00000123                 mov     dword ptr [eax+0Ch], 0A54FF53Ah
.text:0000012A                 mov     ecx, [ebp+arg_0]
.text:0000012D                 mov     dword ptr [ecx+10h], 510E527Fh
.text:00000134                 mov     edx, [ebp+arg_0]
.text:00000137                 mov     dword ptr [edx+14h], 9B05688Ch
.text:0000013E                 mov     eax, [ebp+arg_0]
.text:00000141                 mov     dword ptr [eax+18h], 1F83D9ABh
.text:00000148                 mov     ecx, [ebp+arg_0]
.text:0000014B                 mov     dword ptr [ecx+1Ch], 5BE0CD19h
.text:00000152                 mov     edx, [ebp+arg_0]
.text:00000155                 mov     dword ptr [edx+20h], 0
.text:0000015C                 mov     dword ptr [edx+24h], 0
.text:00000163                 pop     ebp
.text:00000164                 retn    4
.text:00000164 _Sha256_Init@4  endp
.text:00000164
.text:00000164 ; ---------------------------------------------------------------------------
.text:00000167                 align 10h
.text:00000170
.text:00000170 ; =============== S U B R O U T I N E =======================================
.text:00000170
.text:00000170 ; Attributes: bp-based frame
.text:00000170
.text:00000170 ; int __stdcall Sha256_Update(int, void *Src, size_t Size)
.text:00000170                 public _Sha256_Update@12
.text:00000170 _Sha256_Update@12 proc near
.text:00000170
.text:00000170 var_8           = dword ptr -8
.text:00000170 var_4           = dword ptr -4
.text:00000170 arg_0           = dword ptr  8
.text:00000170 Src             = dword ptr  0Ch
.text:00000170 Size            = dword ptr  10h
.text:00000170
.text:00000170                 push    ebp
.text:00000171                 mov     ebp, esp
.text:00000173                 sub     esp, 8
.text:00000176                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000017D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000184                 cmp     [ebp+Size], 0
.text:00000188                 jnz     short loc_18F
.text:0000018A                 jmp     loc_269
.text:0000018F ; ---------------------------------------------------------------------------
.text:0000018F
.text:0000018F loc_18F:                                ; CODE XREF: Sha256_Update(x,x,x)+18j
.text:0000018F                 mov     eax, [ebp+arg_0]
.text:00000192                 mov     ecx, [eax+20h]
.text:00000195                 and     ecx, 3Fh
.text:00000198                 mov     [ebp+var_4], ecx
.text:0000019B                 mov     edx, [ebp+Size]
.text:0000019E                 xor     eax, eax
.text:000001A0                 mov     ecx, [ebp+arg_0]
.text:000001A3                 add     edx, [ecx+20h]
.text:000001A6                 adc     eax, [ecx+24h]
.text:000001A9                 mov     ecx, [ebp+arg_0]
.text:000001AC                 mov     [ecx+20h], edx
.text:000001AF                 mov     [ecx+24h], eax
.text:000001B2                 mov     edx, 40h ; '@'
.text:000001B7                 sub     edx, [ebp+var_4]
.text:000001BA                 mov     [ebp+var_8], edx
.text:000001BD                 mov     eax, [ebp+var_8]
.text:000001C0                 cmp     eax, [ebp+Size]
.text:000001C3                 jbe     short loc_1E5
.text:000001C5                 mov     ecx, [ebp+Size]
.text:000001C8                 push    ecx             ; Size
.text:000001C9                 mov     edx, [ebp+Src]
.text:000001CC                 push    edx             ; Src
.text:000001CD                 mov     eax, [ebp+var_4]
.text:000001D0                 mov     ecx, [ebp+arg_0]
.text:000001D3                 lea     edx, [ecx+eax+28h]
.text:000001D7                 push    edx             ; Dst
.text:000001D8                 call    _memcpy
.text:000001DD                 add     esp, 0Ch
.text:000001E0                 jmp     loc_269
.text:000001E5 ; ---------------------------------------------------------------------------
.text:000001E5
.text:000001E5 loc_1E5:                                ; CODE XREF: Sha256_Update(x,x,x)+53j
.text:000001E5                 mov     eax, [ebp+Size]
.text:000001E8                 sub     eax, [ebp+var_8]
.text:000001EB                 mov     [ebp+Size], eax
.text:000001EE                 mov     ecx, [ebp+var_8]
.text:000001F1                 push    ecx             ; Size
.text:000001F2                 mov     edx, [ebp+Src]
.text:000001F5                 push    edx             ; Src
.text:000001F6                 mov     eax, [ebp+var_4]
.text:000001F9                 mov     ecx, [ebp+arg_0]
.text:000001FC                 lea     edx, [ecx+eax+28h]
.text:00000200                 push    edx             ; Dst
.text:00000201                 call    _memcpy
.text:00000206                 add     esp, 0Ch
.text:00000209                 mov     eax, [ebp+Src]
.text:0000020C                 add     eax, [ebp+var_8]
.text:0000020F                 mov     [ebp+Src], eax
.text:00000212
.text:00000212 loc_212:                                ; CODE XREF: Sha256_Update(x,x,x)+DAj
.text:00000212                 mov     ecx, [ebp+arg_0]
.text:00000215                 push    ecx
.text:00000216                 call    _Sha256_WriteByteBlock@4 ; Sha256_WriteByteBlock(x)
.text:0000021B                 cmp     [ebp+Size], 40h ; '@'
.text:0000021F                 jnb     short loc_223
.text:00000221                 jmp     short loc_24C
.text:00000223 ; ---------------------------------------------------------------------------
.text:00000223
.text:00000223 loc_223:                                ; CODE XREF: Sha256_Update(x,x,x)+AFj
.text:00000223                 mov     edx, [ebp+Size]
.text:00000226                 sub     edx, 40h ; '@'
.text:00000229                 mov     [ebp+Size], edx
.text:0000022C                 push    40h ; '@'       ; Size
.text:0000022E                 mov     eax, [ebp+Src]
.text:00000231                 push    eax             ; Src
.text:00000232                 mov     ecx, [ebp+arg_0]
.text:00000235                 add     ecx, 28h ; '('
.text:00000238                 push    ecx             ; Dst
.text:00000239                 call    _memcpy
.text:0000023E                 add     esp, 0Ch
.text:00000241                 mov     edx, [ebp+Src]
.text:00000244                 add     edx, 40h ; '@'
.text:00000247                 mov     [ebp+Src], edx
.text:0000024A                 jmp     short loc_212
.text:0000024C ; ---------------------------------------------------------------------------
.text:0000024C
.text:0000024C loc_24C:                                ; CODE XREF: Sha256_Update(x,x,x)+B1j
.text:0000024C                 cmp     [ebp+Size], 0
.text:00000250                 jz      short loc_269
.text:00000252                 mov     eax, [ebp+Size]
.text:00000255                 push    eax             ; Size
.text:00000256                 mov     ecx, [ebp+Src]
.text:00000259                 push    ecx             ; Src
.text:0000025A                 mov     edx, [ebp+arg_0]
.text:0000025D                 add     edx, 28h ; '('
.text:00000260                 push    edx             ; Dst
.text:00000261                 call    _memcpy
.text:00000266                 add     esp, 0Ch
.text:00000269
.text:00000269 loc_269:                                ; CODE XREF: Sha256_Update(x,x,x)+1Aj
.text:00000269                                         ; Sha256_Update(x,x,x)+70j ...
.text:00000269                 add     esp, 8
.text:0000026C                 cmp     ebp, esp
.text:0000026E                 call    __RTC_CheckEsp
.text:00000273                 mov     esp, ebp
.text:00000275                 pop     ebp
.text:00000276                 retn    0Ch
.text:00000276 _Sha256_Update@12 endp
.text:00000276
.text:00000276 ; ---------------------------------------------------------------------------
.text:00000279                 align 10h
.text:00000280
.text:00000280 ; =============== S U B R O U T I N E =======================================
.text:00000280
.text:00000280 ; Attributes: bp-based frame
.text:00000280
.text:00000280 ; __stdcall Sha256_WriteByteBlock(x)
.text:00000280 _Sha256_WriteByteBlock@4 proc near      ; CODE XREF: Sha256_Update(x,x,x)+A6p
.text:00000280                                         ; Sha256_Final(x,x)+4Ep ...
.text:00000280
.text:00000280 var_B4          = dword ptr -0B4h
.text:00000280 var_B0          = dword ptr -0B0h
.text:00000280 var_AC          = dword ptr -0ACh
.text:00000280 var_A8          = dword ptr -0A8h
.text:00000280 var_A4          = dword ptr -0A4h
.text:00000280 var_A0          = dword ptr -0A0h
.text:00000280 var_9C          = dword ptr -9Ch
.text:00000280 var_98          = dword ptr -98h
.text:00000280 var_94          = dword ptr -94h
.text:00000280 var_90          = dword ptr -90h
.text:00000280 var_8C          = dword ptr -8Ch
.text:00000280 var_88          = dword ptr -88h
.text:00000280 var_84          = dword ptr -84h
.text:00000280 var_80          = dword ptr -80h
.text:00000280 var_7C          = dword ptr -7Ch
.text:00000280 var_78          = dword ptr -78h
.text:00000280 var_74          = dword ptr -74h
.text:00000280 var_70          = dword ptr -70h
.text:00000280 var_6C          = dword ptr -6Ch
.text:00000280 var_68          = dword ptr -68h
.text:00000280 var_64          = dword ptr -64h
.text:00000280 var_60          = dword ptr -60h
.text:00000280 var_5C          = dword ptr -5Ch
.text:00000280 var_58          = dword ptr -58h
.text:00000280 var_54          = dword ptr -54h
.text:00000280 var_50          = dword ptr -50h
.text:00000280 var_48          = dword ptr -48h
.text:00000280 var_44          = dword ptr -44h
.text:00000280 var_40          = dword ptr -40h
.text:00000280 var_3C          = dword ptr -3Ch
.text:00000280 var_38          = dword ptr -38h
.text:00000280 var_34          = dword ptr -34h
.text:00000280 var_30          = dword ptr -30h
.text:00000280 var_2C          = dword ptr -2Ch
.text:00000280 var_28          = dword ptr -28h
.text:00000280 var_24          = dword ptr -24h
.text:00000280 var_20          = dword ptr -20h
.text:00000280 var_1C          = dword ptr -1Ch
.text:00000280 var_18          = dword ptr -18h
.text:00000280 var_14          = dword ptr -14h
.text:00000280 var_10          = dword ptr -10h
.text:00000280 var_C           = dword ptr -0Ch
.text:00000280 var_4           = dword ptr -4
.text:00000280 arg_0           = dword ptr  8
.text:00000280
.text:00000280                 push    ebp
.text:00000281                 mov     ebp, esp
.text:00000283                 sub     esp, 0B4h
.text:00000289                 push    edi
.text:0000028A                 lea     edi, [ebp+var_B4]
.text:00000290                 mov     ecx, 2Dh ; '-'
.text:00000295                 mov     eax, 0CCCCCCCCh
.text:0000029A                 rep stosd
.text:0000029C                 mov     eax, dword ptr ds:___security_cookie
.text:000002A1                 xor     eax, ebp
.text:000002A3                 mov     [ebp+var_4], eax
.text:000002A6                 mov     eax, [ebp+arg_0]
.text:000002A9                 mov     [ebp+var_54], eax
.text:000002AC                 mov     ecx, [ebp+var_54]
.text:000002AF                 mov     edx, [ecx]
.text:000002B1                 mov     [ebp+var_58], edx
.text:000002B4                 mov     eax, [ebp+var_54]
.text:000002B7                 mov     ecx, [eax+4]
.text:000002BA                 mov     [ebp+var_5C], ecx
.text:000002BD                 mov     edx, [ebp+var_54]
.text:000002C0                 mov     eax, [edx+8]
.text:000002C3                 mov     [ebp+var_60], eax
.text:000002C6                 mov     ecx, [ebp+var_54]
.text:000002C9                 mov     edx, [ecx+0Ch]
.text:000002CC                 mov     [ebp+var_64], edx
.text:000002CF                 mov     eax, [ebp+var_54]
.text:000002D2                 mov     ecx, [eax+10h]
.text:000002D5                 mov     [ebp+var_68], ecx
.text:000002D8                 mov     edx, [ebp+var_54]
.text:000002DB                 mov     eax, [edx+14h]
.text:000002DE                 mov     [ebp+var_6C], eax
.text:000002E1                 mov     ecx, [ebp+var_54]
.text:000002E4                 mov     edx, [ecx+18h]
.text:000002E7                 mov     [ebp+var_70], edx
.text:000002EA                 mov     eax, [ebp+var_54]
.text:000002ED                 mov     ecx, [eax+1Ch]
.text:000002F0                 mov     [ebp+var_74], ecx
.text:000002F3                 mov     [ebp+var_50], 0
.text:000002FA                 jmp     short loc_305
.text:000002FC ; ---------------------------------------------------------------------------
.text:000002FC
.text:000002FC loc_2FC:                                ; CODE XREF: Sha256_WriteByteBlock(x)+B1j
.text:000002FC                 mov     edx, [ebp+var_50]
.text:000002FF                 add     edx, 2
.text:00000302                 mov     [ebp+var_50], edx
.text:00000305
.text:00000305 loc_305:                                ; CODE XREF: Sha256_WriteByteBlock(x)+7Aj
.text:00000305                 cmp     [ebp+var_50], 10h
.text:00000309                 jnb     short loc_333
.text:0000030B                 mov     eax, [ebp+var_50]
.text:0000030E                 mov     ecx, [ebp+arg_0]
.text:00000311                 mov     edx, [ecx+eax*4+28h]
.text:00000315                 bswap   edx
.text:00000317                 mov     eax, [ebp+var_50]
.text:0000031A                 mov     [ebp+eax*4+var_48], edx
.text:0000031E                 mov     ecx, [ebp+var_50]
.text:00000321                 mov     edx, [ebp+arg_0]
.text:00000324                 mov     eax, [edx+ecx*4+2Ch]
.text:00000328                 bswap   eax
.text:0000032A                 mov     ecx, [ebp+var_50]
.text:0000032D                 mov     [ebp+ecx*4+var_44], eax
.text:00000331                 jmp     short loc_2FC
.text:00000333 ; ---------------------------------------------------------------------------
.text:00000333
.text:00000333 loc_333:                                ; CODE XREF: Sha256_WriteByteBlock(x)+89j
.text:00000333                 mov     [ebp+var_50], 0
.text:0000033A                 jmp     short loc_345
.text:0000033C ; ---------------------------------------------------------------------------
.text:0000033C
.text:0000033C loc_33C:                                ; CODE XREF: Sha256_WriteByteBlock(x)+CE4j
.text:0000033C                 mov     edx, [ebp+var_50]
.text:0000033F                 add     edx, 10h
.text:00000342                 mov     [ebp+var_50], edx
.text:00000345
.text:00000345 loc_345:                                ; CODE XREF: Sha256_WriteByteBlock(x)+BAj
.text:00000345                 cmp     [ebp+var_50], 40h ; '@'
.text:00000349                 jnb     loc_F69
.text:0000034F                 cmp     [ebp+var_50], 0
.text:00000353                 jz      short loc_394
.text:00000355                 mov     eax, [ebp+var_10]
.text:00000358                 ror     eax, 11h
.text:0000035B                 mov     ecx, [ebp+var_10]
.text:0000035E                 ror     ecx, 13h
.text:00000361                 xor     eax, ecx
.text:00000363                 mov     edx, [ebp+var_10]
.text:00000366                 shr     edx, 0Ah
.text:00000369                 xor     eax, edx
.text:0000036B                 add     eax, [ebp+var_24]
.text:0000036E                 mov     ecx, [ebp+var_44]
.text:00000371                 ror     ecx, 7
.text:00000374                 mov     edx, [ebp+var_44]
.text:00000377                 ror     edx, 12h
.text:0000037A                 xor     ecx, edx
.text:0000037C                 mov     edx, [ebp+var_44]
.text:0000037F                 shr     edx, 3
.text:00000382                 xor     ecx, edx
.text:00000384                 add     ecx, [ebp+var_48]
.text:00000387                 add     ecx, eax
.text:00000389                 mov     [ebp+var_48], ecx
.text:0000038C                 mov     eax, [ebp+var_48]
.text:0000038F                 mov     [ebp+var_78], eax
.text:00000392                 jmp     short loc_39A
.text:00000394 ; ---------------------------------------------------------------------------
.text:00000394
.text:00000394 loc_394:                                ; CODE XREF: Sha256_WriteByteBlock(x)+D3j
.text:00000394                 mov     ecx, [ebp+var_48]
.text:00000397                 mov     [ebp+var_78], ecx
.text:0000039A
.text:0000039A loc_39A:                                ; CODE XREF: Sha256_WriteByteBlock(x)+112j
.text:0000039A                 mov     edx, [ebp+var_68]
.text:0000039D                 ror     edx, 6
.text:000003A0                 mov     eax, [ebp+var_68]
.text:000003A3                 ror     eax, 0Bh
.text:000003A6                 xor     edx, eax
.text:000003A8                 mov     ecx, [ebp+var_68]
.text:000003AB                 ror     ecx, 19h
.text:000003AE                 xor     edx, ecx
.text:000003B0                 mov     eax, [ebp+var_6C]
.text:000003B3                 xor     eax, [ebp+var_70]
.text:000003B6                 and     eax, [ebp+var_68]
.text:000003B9                 xor     eax, [ebp+var_70]
.text:000003BC                 add     edx, eax
.text:000003BE                 mov     ecx, [ebp+var_50]
.text:000003C1                 add     edx, _K[ecx*4]
.text:000003C8                 add     edx, [ebp+var_78]
.text:000003CB                 add     edx, [ebp+var_74]
.text:000003CE                 mov     [ebp+var_74], edx
.text:000003D1                 mov     edx, [ebp+var_64]
.text:000003D4                 add     edx, [ebp+var_74]
.text:000003D7                 mov     [ebp+var_64], edx
.text:000003DA                 mov     eax, [ebp+var_58]
.text:000003DD                 ror     eax, 2
.text:000003E0                 mov     ecx, [ebp+var_58]
.text:000003E3                 ror     ecx, 0Dh
.text:000003E6                 xor     eax, ecx
.text:000003E8                 mov     edx, [ebp+var_58]
.text:000003EB                 ror     edx, 16h
.text:000003EE                 xor     eax, edx
.text:000003F0                 mov     ecx, [ebp+var_58]
.text:000003F3                 and     ecx, [ebp+var_5C]
.text:000003F6                 mov     edx, [ebp+var_58]
.text:000003F9                 or      edx, [ebp+var_5C]
.text:000003FC                 and     edx, [ebp+var_60]
.text:000003FF                 or      ecx, edx
.text:00000401                 add     ecx, [ebp+var_74]
.text:00000404                 add     ecx, eax
.text:00000406                 mov     [ebp+var_74], ecx
.text:00000409                 cmp     [ebp+var_50], 0
.text:0000040D                 jz      short loc_44E
.text:0000040F                 mov     eax, [ebp+var_C]
.text:00000412                 ror     eax, 11h
.text:00000415                 mov     ecx, [ebp+var_C]
.text:00000418                 ror     ecx, 13h
.text:0000041B                 xor     eax, ecx
.text:0000041D                 mov     edx, [ebp+var_C]
.text:00000420                 shr     edx, 0Ah
.text:00000423                 xor     eax, edx
.text:00000425                 add     eax, [ebp+var_20]
.text:00000428                 mov     ecx, [ebp+var_40]
.text:0000042B                 ror     ecx, 7
.text:0000042E                 mov     edx, [ebp+var_40]
.text:00000431                 ror     edx, 12h
.text:00000434                 xor     ecx, edx
.text:00000436                 mov     edx, [ebp+var_40]
.text:00000439                 shr     edx, 3
.text:0000043C                 xor     ecx, edx
.text:0000043E                 add     ecx, [ebp+var_44]
.text:00000441                 add     ecx, eax
.text:00000443                 mov     [ebp+var_44], ecx
.text:00000446                 mov     eax, [ebp+var_44]
.text:00000449                 mov     [ebp+var_7C], eax
.text:0000044C                 jmp     short loc_454
.text:0000044E ; ---------------------------------------------------------------------------
.text:0000044E
.text:0000044E loc_44E:                                ; CODE XREF: Sha256_WriteByteBlock(x)+18Dj
.text:0000044E                 mov     ecx, [ebp+var_44]
.text:00000451                 mov     [ebp+var_7C], ecx
.text:00000454
.text:00000454 loc_454:                                ; CODE XREF: Sha256_WriteByteBlock(x)+1CCj
.text:00000454                 mov     edx, [ebp+var_64]
.text:00000457                 ror     edx, 6
.text:0000045A                 mov     eax, [ebp+var_64]
.text:0000045D                 ror     eax, 0Bh
.text:00000460                 xor     edx, eax
.text:00000462                 mov     ecx, [ebp+var_64]
.text:00000465                 ror     ecx, 19h
.text:00000468                 xor     edx, ecx
.text:0000046A                 mov     eax, [ebp+var_68]
.text:0000046D                 xor     eax, [ebp+var_6C]
.text:00000470                 and     eax, [ebp+var_64]
.text:00000473                 xor     eax, [ebp+var_6C]
.text:00000476                 add     edx, eax
.text:00000478                 mov     ecx, [ebp+var_50]
.text:0000047B                 add     edx, dword_4[ecx*4]
.text:00000482                 add     edx, [ebp+var_7C]
.text:00000485                 add     edx, [ebp+var_70]
.text:00000488                 mov     [ebp+var_70], edx
.text:0000048B                 mov     edx, [ebp+var_60]
.text:0000048E                 add     edx, [ebp+var_70]
.text:00000491                 mov     [ebp+var_60], edx
.text:00000494                 mov     eax, [ebp+var_74]
.text:00000497                 ror     eax, 2
.text:0000049A                 mov     ecx, [ebp+var_74]
.text:0000049D                 ror     ecx, 0Dh
.text:000004A0                 xor     eax, ecx
.text:000004A2                 mov     edx, [ebp+var_74]
.text:000004A5                 ror     edx, 16h
.text:000004A8                 xor     eax, edx
.text:000004AA                 mov     ecx, [ebp+var_74]
.text:000004AD                 and     ecx, [ebp+var_58]
.text:000004B0                 mov     edx, [ebp+var_74]
.text:000004B3                 or      edx, [ebp+var_58]
.text:000004B6                 and     edx, [ebp+var_5C]
.text:000004B9                 or      ecx, edx
.text:000004BB                 add     ecx, [ebp+var_70]
.text:000004BE                 add     ecx, eax
.text:000004C0                 mov     [ebp+var_70], ecx
.text:000004C3                 cmp     [ebp+var_50], 0
.text:000004C7                 jz      short loc_508
.text:000004C9                 mov     eax, [ebp+var_48]
.text:000004CC                 ror     eax, 11h
.text:000004CF                 mov     ecx, [ebp+var_48]
.text:000004D2                 ror     ecx, 13h
.text:000004D5                 xor     eax, ecx
.text:000004D7                 mov     edx, [ebp+var_48]
.text:000004DA                 shr     edx, 0Ah
.text:000004DD                 xor     eax, edx
.text:000004DF                 add     eax, [ebp+var_1C]
.text:000004E2                 mov     ecx, [ebp+var_3C]
.text:000004E5                 ror     ecx, 7
.text:000004E8                 mov     edx, [ebp+var_3C]
.text:000004EB                 ror     edx, 12h
.text:000004EE                 xor     ecx, edx
.text:000004F0                 mov     edx, [ebp+var_3C]
.text:000004F3                 shr     edx, 3
.text:000004F6                 xor     ecx, edx
.text:000004F8                 add     ecx, [ebp+var_40]
.text:000004FB                 add     ecx, eax
.text:000004FD                 mov     [ebp+var_40], ecx
.text:00000500                 mov     eax, [ebp+var_40]
.text:00000503                 mov     [ebp+var_80], eax
.text:00000506                 jmp     short loc_50E
.text:00000508 ; ---------------------------------------------------------------------------
.text:00000508
.text:00000508 loc_508:                                ; CODE XREF: Sha256_WriteByteBlock(x)+247j
.text:00000508                 mov     ecx, [ebp+var_40]
.text:0000050B                 mov     [ebp+var_80], ecx
.text:0000050E
.text:0000050E loc_50E:                                ; CODE XREF: Sha256_WriteByteBlock(x)+286j
.text:0000050E                 mov     edx, [ebp+var_60]
.text:00000511                 ror     edx, 6
.text:00000514                 mov     eax, [ebp+var_60]
.text:00000517                 ror     eax, 0Bh
.text:0000051A                 xor     edx, eax
.text:0000051C                 mov     ecx, [ebp+var_60]
.text:0000051F                 ror     ecx, 19h
.text:00000522                 xor     edx, ecx
.text:00000524                 mov     eax, [ebp+var_64]
.text:00000527                 xor     eax, [ebp+var_68]
.text:0000052A                 and     eax, [ebp+var_60]
.text:0000052D                 xor     eax, [ebp+var_68]
.text:00000530                 add     edx, eax
.text:00000532                 mov     ecx, [ebp+var_50]
.text:00000535                 add     edx, dword_8[ecx*4]
.text:0000053C                 add     edx, [ebp+var_80]
.text:0000053F                 add     edx, [ebp+var_6C]
.text:00000542                 mov     [ebp+var_6C], edx
.text:00000545                 mov     edx, [ebp+var_5C]
.text:00000548                 add     edx, [ebp+var_6C]
.text:0000054B                 mov     [ebp+var_5C], edx
.text:0000054E                 mov     eax, [ebp+var_70]
.text:00000551                 ror     eax, 2
.text:00000554                 mov     ecx, [ebp+var_70]
.text:00000557                 ror     ecx, 0Dh
.text:0000055A                 xor     eax, ecx
.text:0000055C                 mov     edx, [ebp+var_70]
.text:0000055F                 ror     edx, 16h
.text:00000562                 xor     eax, edx
.text:00000564                 mov     ecx, [ebp+var_70]
.text:00000567                 and     ecx, [ebp+var_74]
.text:0000056A                 mov     edx, [ebp+var_70]
.text:0000056D                 or      edx, [ebp+var_74]
.text:00000570                 and     edx, [ebp+var_58]
.text:00000573                 or      ecx, edx
.text:00000575                 add     ecx, [ebp+var_6C]
.text:00000578                 add     ecx, eax
.text:0000057A                 mov     [ebp+var_6C], ecx
.text:0000057D                 cmp     [ebp+var_50], 0
.text:00000581                 jz      short loc_5C5
.text:00000583                 mov     eax, [ebp+var_44]
.text:00000586                 ror     eax, 11h
.text:00000589                 mov     ecx, [ebp+var_44]
.text:0000058C                 ror     ecx, 13h
.text:0000058F                 xor     eax, ecx
.text:00000591                 mov     edx, [ebp+var_44]
.text:00000594                 shr     edx, 0Ah
.text:00000597                 xor     eax, edx
.text:00000599                 add     eax, [ebp+var_18]
.text:0000059C                 mov     ecx, [ebp+var_38]
.text:0000059F                 ror     ecx, 7
.text:000005A2                 mov     edx, [ebp+var_38]
.text:000005A5                 ror     edx, 12h
.text:000005A8                 xor     ecx, edx
.text:000005AA                 mov     edx, [ebp+var_38]
.text:000005AD                 shr     edx, 3
.text:000005B0                 xor     ecx, edx
.text:000005B2                 add     ecx, [ebp+var_3C]
.text:000005B5                 add     ecx, eax
.text:000005B7                 mov     [ebp+var_3C], ecx
.text:000005BA                 mov     eax, [ebp+var_3C]
.text:000005BD                 mov     [ebp+var_84], eax
.text:000005C3                 jmp     short loc_5CE
.text:000005C5 ; ---------------------------------------------------------------------------
.text:000005C5
.text:000005C5 loc_5C5:                                ; CODE XREF: Sha256_WriteByteBlock(x)+301j
.text:000005C5                 mov     ecx, [ebp+var_3C]
.text:000005C8                 mov     [ebp+var_84], ecx
.text:000005CE
.text:000005CE loc_5CE:                                ; CODE XREF: Sha256_WriteByteBlock(x)+343j
.text:000005CE                 mov     edx, [ebp+var_5C]
.text:000005D1                 ror     edx, 6
.text:000005D4                 mov     eax, [ebp+var_5C]
.text:000005D7                 ror     eax, 0Bh
.text:000005DA                 xor     edx, eax
.text:000005DC                 mov     ecx, [ebp+var_5C]
.text:000005DF                 ror     ecx, 19h
.text:000005E2                 xor     edx, ecx
.text:000005E4                 mov     eax, [ebp+var_60]
.text:000005E7                 xor     eax, [ebp+var_64]
.text:000005EA                 and     eax, [ebp+var_5C]
.text:000005ED                 xor     eax, [ebp+var_64]
.text:000005F0                 add     edx, eax
.text:000005F2                 mov     ecx, [ebp+var_50]
.text:000005F5                 add     edx, dword_C[ecx*4]
.text:000005FC                 add     edx, [ebp+var_84]
.text:00000602                 add     edx, [ebp+var_68]
.text:00000605                 mov     [ebp+var_68], edx
.text:00000608                 mov     edx, [ebp+var_58]
.text:0000060B                 add     edx, [ebp+var_68]
.text:0000060E                 mov     [ebp+var_58], edx
.text:00000611                 mov     eax, [ebp+var_6C]
.text:00000614                 ror     eax, 2
.text:00000617                 mov     ecx, [ebp+var_6C]
.text:0000061A                 ror     ecx, 0Dh
.text:0000061D                 xor     eax, ecx
.text:0000061F                 mov     edx, [ebp+var_6C]
.text:00000622                 ror     edx, 16h
.text:00000625                 xor     eax, edx
.text:00000627                 mov     ecx, [ebp+var_6C]
.text:0000062A                 and     ecx, [ebp+var_70]
.text:0000062D                 mov     edx, [ebp+var_6C]
.text:00000630                 or      edx, [ebp+var_70]
.text:00000633                 and     edx, [ebp+var_74]
.text:00000636                 or      ecx, edx
.text:00000638                 add     ecx, [ebp+var_68]
.text:0000063B                 add     ecx, eax
.text:0000063D                 mov     [ebp+var_68], ecx
.text:00000640                 cmp     [ebp+var_50], 0
.text:00000644                 jz      short loc_688
.text:00000646                 mov     eax, [ebp+var_40]
.text:00000649                 ror     eax, 11h
.text:0000064C                 mov     ecx, [ebp+var_40]
.text:0000064F                 ror     ecx, 13h
.text:00000652                 xor     eax, ecx
.text:00000654                 mov     edx, [ebp+var_40]
.text:00000657                 shr     edx, 0Ah
.text:0000065A                 xor     eax, edx
.text:0000065C                 add     eax, [ebp+var_14]
.text:0000065F                 mov     ecx, [ebp+var_34]
.text:00000662                 ror     ecx, 7
.text:00000665                 mov     edx, [ebp+var_34]
.text:00000668                 ror     edx, 12h
.text:0000066B                 xor     ecx, edx
.text:0000066D                 mov     edx, [ebp+var_34]
.text:00000670                 shr     edx, 3
.text:00000673                 xor     ecx, edx
.text:00000675                 add     ecx, [ebp+var_38]
.text:00000678                 add     ecx, eax
.text:0000067A                 mov     [ebp+var_38], ecx
.text:0000067D                 mov     eax, [ebp+var_38]
.text:00000680                 mov     [ebp+var_88], eax
.text:00000686                 jmp     short loc_691
.text:00000688 ; ---------------------------------------------------------------------------
.text:00000688
.text:00000688 loc_688:                                ; CODE XREF: Sha256_WriteByteBlock(x)+3C4j
.text:00000688                 mov     ecx, [ebp+var_38]
.text:0000068B                 mov     [ebp+var_88], ecx
.text:00000691
.text:00000691 loc_691:                                ; CODE XREF: Sha256_WriteByteBlock(x)+406j
.text:00000691                 mov     edx, [ebp+var_58]
.text:00000694                 ror     edx, 6
.text:00000697                 mov     eax, [ebp+var_58]
.text:0000069A                 ror     eax, 0Bh
.text:0000069D                 xor     edx, eax
.text:0000069F                 mov     ecx, [ebp+var_58]
.text:000006A2                 ror     ecx, 19h
.text:000006A5                 xor     edx, ecx
.text:000006A7                 mov     eax, [ebp+var_5C]
.text:000006AA                 xor     eax, [ebp+var_60]
.text:000006AD                 and     eax, [ebp+var_58]
.text:000006B0                 xor     eax, [ebp+var_60]
.text:000006B3                 add     edx, eax
.text:000006B5                 mov     ecx, [ebp+var_50]
.text:000006B8                 add     edx, dword_10[ecx*4]
.text:000006BF                 add     edx, [ebp+var_88]
.text:000006C5                 add     edx, [ebp+var_64]
.text:000006C8                 mov     [ebp+var_64], edx
.text:000006CB                 mov     edx, [ebp+var_74]
.text:000006CE                 add     edx, [ebp+var_64]
.text:000006D1                 mov     [ebp+var_74], edx
.text:000006D4                 mov     eax, [ebp+var_68]
.text:000006D7                 ror     eax, 2
.text:000006DA                 mov     ecx, [ebp+var_68]
.text:000006DD                 ror     ecx, 0Dh
.text:000006E0                 xor     eax, ecx
.text:000006E2                 mov     edx, [ebp+var_68]
.text:000006E5                 ror     edx, 16h
.text:000006E8                 xor     eax, edx
.text:000006EA                 mov     ecx, [ebp+var_68]
.text:000006ED                 and     ecx, [ebp+var_6C]
.text:000006F0                 mov     edx, [ebp+var_68]
.text:000006F3                 or      edx, [ebp+var_6C]
.text:000006F6                 and     edx, [ebp+var_70]
.text:000006F9                 or      ecx, edx
.text:000006FB                 add     ecx, [ebp+var_64]
.text:000006FE                 add     ecx, eax
.text:00000700                 mov     [ebp+var_64], ecx
.text:00000703                 cmp     [ebp+var_50], 0
.text:00000707                 jz      short loc_74B
.text:00000709                 mov     eax, [ebp+var_3C]
.text:0000070C                 ror     eax, 11h
.text:0000070F                 mov     ecx, [ebp+var_3C]
.text:00000712                 ror     ecx, 13h
.text:00000715                 xor     eax, ecx
.text:00000717                 mov     edx, [ebp+var_3C]
.text:0000071A                 shr     edx, 0Ah
.text:0000071D                 xor     eax, edx
.text:0000071F                 add     eax, [ebp+var_10]
.text:00000722                 mov     ecx, [ebp+var_30]
.text:00000725                 ror     ecx, 7
.text:00000728                 mov     edx, [ebp+var_30]
.text:0000072B                 ror     edx, 12h
.text:0000072E                 xor     ecx, edx
.text:00000730                 mov     edx, [ebp+var_30]
.text:00000733                 shr     edx, 3
.text:00000736                 xor     ecx, edx
.text:00000738                 add     ecx, [ebp+var_34]
.text:0000073B                 add     ecx, eax
.text:0000073D                 mov     [ebp+var_34], ecx
.text:00000740                 mov     eax, [ebp+var_34]
.text:00000743                 mov     [ebp+var_8C], eax
.text:00000749                 jmp     short loc_754
.text:0000074B ; ---------------------------------------------------------------------------
.text:0000074B
.text:0000074B loc_74B:                                ; CODE XREF: Sha256_WriteByteBlock(x)+487j
.text:0000074B                 mov     ecx, [ebp+var_34]
.text:0000074E                 mov     [ebp+var_8C], ecx
.text:00000754
.text:00000754 loc_754:                                ; CODE XREF: Sha256_WriteByteBlock(x)+4C9j
.text:00000754                 mov     edx, [ebp+var_74]
.text:00000757                 ror     edx, 6
.text:0000075A                 mov     eax, [ebp+var_74]
.text:0000075D                 ror     eax, 0Bh
.text:00000760                 xor     edx, eax
.text:00000762                 mov     ecx, [ebp+var_74]
.text:00000765                 ror     ecx, 19h
.text:00000768                 xor     edx, ecx
.text:0000076A                 mov     eax, [ebp+var_58]
.text:0000076D                 xor     eax, [ebp+var_5C]
.text:00000770                 and     eax, [ebp+var_74]
.text:00000773                 xor     eax, [ebp+var_5C]
.text:00000776                 add     edx, eax
.text:00000778                 mov     ecx, [ebp+var_50]
.text:0000077B                 add     edx, dword_14[ecx*4]
.text:00000782                 add     edx, [ebp+var_8C]
.text:00000788                 add     edx, [ebp+var_60]
.text:0000078B                 mov     [ebp+var_60], edx
.text:0000078E                 mov     edx, [ebp+var_70]
.text:00000791                 add     edx, [ebp+var_60]
.text:00000794                 mov     [ebp+var_70], edx
.text:00000797                 mov     eax, [ebp+var_64]
.text:0000079A                 ror     eax, 2
.text:0000079D                 mov     ecx, [ebp+var_64]
.text:000007A0                 ror     ecx, 0Dh
.text:000007A3                 xor     eax, ecx
.text:000007A5                 mov     edx, [ebp+var_64]
.text:000007A8                 ror     edx, 16h
.text:000007AB                 xor     eax, edx
.text:000007AD                 mov     ecx, [ebp+var_64]
.text:000007B0                 and     ecx, [ebp+var_68]
.text:000007B3                 mov     edx, [ebp+var_64]
.text:000007B6                 or      edx, [ebp+var_68]
.text:000007B9                 and     edx, [ebp+var_6C]
.text:000007BC                 or      ecx, edx
.text:000007BE                 add     ecx, [ebp+var_60]
.text:000007C1                 add     ecx, eax
.text:000007C3                 mov     [ebp+var_60], ecx
.text:000007C6                 cmp     [ebp+var_50], 0
.text:000007CA                 jz      short loc_80E
.text:000007CC                 mov     eax, [ebp+var_38]
.text:000007CF                 ror     eax, 11h
.text:000007D2                 mov     ecx, [ebp+var_38]
.text:000007D5                 ror     ecx, 13h
.text:000007D8                 xor     eax, ecx
.text:000007DA                 mov     edx, [ebp+var_38]
.text:000007DD                 shr     edx, 0Ah
.text:000007E0                 xor     eax, edx
.text:000007E2                 add     eax, [ebp+var_C]
.text:000007E5                 mov     ecx, [ebp+var_2C]
.text:000007E8                 ror     ecx, 7
.text:000007EB                 mov     edx, [ebp+var_2C]
.text:000007EE                 ror     edx, 12h
.text:000007F1                 xor     ecx, edx
.text:000007F3                 mov     edx, [ebp+var_2C]
.text:000007F6                 shr     edx, 3
.text:000007F9                 xor     ecx, edx
.text:000007FB                 add     ecx, [ebp+var_30]
.text:000007FE                 add     ecx, eax
.text:00000800                 mov     [ebp+var_30], ecx
.text:00000803                 mov     eax, [ebp+var_30]
.text:00000806                 mov     [ebp+var_90], eax
.text:0000080C                 jmp     short loc_817
.text:0000080E ; ---------------------------------------------------------------------------
.text:0000080E
.text:0000080E loc_80E:                                ; CODE XREF: Sha256_WriteByteBlock(x)+54Aj
.text:0000080E                 mov     ecx, [ebp+var_30]
.text:00000811                 mov     [ebp+var_90], ecx
.text:00000817
.text:00000817 loc_817:                                ; CODE XREF: Sha256_WriteByteBlock(x)+58Cj
.text:00000817                 mov     edx, [ebp+var_70]
.text:0000081A                 ror     edx, 6
.text:0000081D                 mov     eax, [ebp+var_70]
.text:00000820                 ror     eax, 0Bh
.text:00000823                 xor     edx, eax
.text:00000825                 mov     ecx, [ebp+var_70]
.text:00000828                 ror     ecx, 19h
.text:0000082B                 xor     edx, ecx
.text:0000082D                 mov     eax, [ebp+var_74]
.text:00000830                 xor     eax, [ebp+var_58]
.text:00000833                 and     eax, [ebp+var_70]
.text:00000836                 xor     eax, [ebp+var_58]
.text:00000839                 add     edx, eax
.text:0000083B                 mov     ecx, [ebp+var_50]
.text:0000083E                 add     edx, dword_18[ecx*4]
.text:00000845                 add     edx, [ebp+var_90]
.text:0000084B                 add     edx, [ebp+var_5C]
.text:0000084E                 mov     [ebp+var_5C], edx
.text:00000851                 mov     edx, [ebp+var_6C]
.text:00000854                 add     edx, [ebp+var_5C]
.text:00000857                 mov     [ebp+var_6C], edx
.text:0000085A                 mov     eax, [ebp+var_60]
.text:0000085D                 ror     eax, 2
.text:00000860                 mov     ecx, [ebp+var_60]
.text:00000863                 ror     ecx, 0Dh
.text:00000866                 xor     eax, ecx
.text:00000868                 mov     edx, [ebp+var_60]
.text:0000086B                 ror     edx, 16h
.text:0000086E                 xor     eax, edx
.text:00000870                 mov     ecx, [ebp+var_60]
.text:00000873                 and     ecx, [ebp+var_64]
.text:00000876                 mov     edx, [ebp+var_60]
.text:00000879                 or      edx, [ebp+var_64]
.text:0000087C                 and     edx, [ebp+var_68]
.text:0000087F                 or      ecx, edx
.text:00000881                 add     ecx, [ebp+var_5C]
.text:00000884                 add     ecx, eax
.text:00000886                 mov     [ebp+var_5C], ecx
.text:00000889                 cmp     [ebp+var_50], 0
.text:0000088D                 jz      short loc_8D1
.text:0000088F                 mov     eax, [ebp+var_34]
.text:00000892                 ror     eax, 11h
.text:00000895                 mov     ecx, [ebp+var_34]
.text:00000898                 ror     ecx, 13h
.text:0000089B                 xor     eax, ecx
.text:0000089D                 mov     edx, [ebp+var_34]
.text:000008A0                 shr     edx, 0Ah
.text:000008A3                 xor     eax, edx
.text:000008A5                 add     eax, [ebp+var_48]
.text:000008A8                 mov     ecx, [ebp+var_28]
.text:000008AB                 ror     ecx, 7
.text:000008AE                 mov     edx, [ebp+var_28]
.text:000008B1                 ror     edx, 12h
.text:000008B4                 xor     ecx, edx
.text:000008B6                 mov     edx, [ebp+var_28]
.text:000008B9                 shr     edx, 3
.text:000008BC                 xor     ecx, edx
.text:000008BE                 add     ecx, [ebp+var_2C]
.text:000008C1                 add     ecx, eax
.text:000008C3                 mov     [ebp+var_2C], ecx
.text:000008C6                 mov     eax, [ebp+var_2C]
.text:000008C9                 mov     [ebp+var_94], eax
.text:000008CF                 jmp     short loc_8DA
.text:000008D1 ; ---------------------------------------------------------------------------
.text:000008D1
.text:000008D1 loc_8D1:                                ; CODE XREF: Sha256_WriteByteBlock(x)+60Dj
.text:000008D1                 mov     ecx, [ebp+var_2C]
.text:000008D4                 mov     [ebp+var_94], ecx
.text:000008DA
.text:000008DA loc_8DA:                                ; CODE XREF: Sha256_WriteByteBlock(x)+64Fj
.text:000008DA                 mov     edx, [ebp+var_6C]
.text:000008DD                 ror     edx, 6
.text:000008E0                 mov     eax, [ebp+var_6C]
.text:000008E3                 ror     eax, 0Bh
.text:000008E6                 xor     edx, eax
.text:000008E8                 mov     ecx, [ebp+var_6C]
.text:000008EB                 ror     ecx, 19h
.text:000008EE                 xor     edx, ecx
.text:000008F0                 mov     eax, [ebp+var_70]
.text:000008F3                 xor     eax, [ebp+var_74]
.text:000008F6                 and     eax, [ebp+var_6C]
.text:000008F9                 xor     eax, [ebp+var_74]
.text:000008FC                 add     edx, eax
.text:000008FE                 mov     ecx, [ebp+var_50]
.text:00000901                 add     edx, dword_1C[ecx*4]
.text:00000908                 add     edx, [ebp+var_94]
.text:0000090E                 add     edx, [ebp+var_58]
.text:00000911                 mov     [ebp+var_58], edx
.text:00000914                 mov     edx, [ebp+var_68]
.text:00000917                 add     edx, [ebp+var_58]
.text:0000091A                 mov     [ebp+var_68], edx
.text:0000091D                 mov     eax, [ebp+var_5C]
.text:00000920                 ror     eax, 2
.text:00000923                 mov     ecx, [ebp+var_5C]
.text:00000926                 ror     ecx, 0Dh
.text:00000929                 xor     eax, ecx
.text:0000092B                 mov     edx, [ebp+var_5C]
.text:0000092E                 ror     edx, 16h
.text:00000931                 xor     eax, edx
.text:00000933                 mov     ecx, [ebp+var_5C]
.text:00000936                 and     ecx, [ebp+var_60]
.text:00000939                 mov     edx, [ebp+var_5C]
.text:0000093C                 or      edx, [ebp+var_60]
.text:0000093F                 and     edx, [ebp+var_64]
.text:00000942                 or      ecx, edx
.text:00000944                 add     ecx, [ebp+var_58]
.text:00000947                 add     ecx, eax
.text:00000949                 mov     [ebp+var_58], ecx
.text:0000094C                 cmp     [ebp+var_50], 0
.text:00000950                 jz      short loc_994
.text:00000952                 mov     eax, [ebp+var_30]
.text:00000955                 ror     eax, 11h
.text:00000958                 mov     ecx, [ebp+var_30]
.text:0000095B                 ror     ecx, 13h
.text:0000095E                 xor     eax, ecx
.text:00000960                 mov     edx, [ebp+var_30]
.text:00000963                 shr     edx, 0Ah
.text:00000966                 xor     eax, edx
.text:00000968                 add     eax, [ebp+var_44]
.text:0000096B                 mov     ecx, [ebp+var_24]
.text:0000096E                 ror     ecx, 7
.text:00000971                 mov     edx, [ebp+var_24]
.text:00000974                 ror     edx, 12h
.text:00000977                 xor     ecx, edx
.text:00000979                 mov     edx, [ebp+var_24]
.text:0000097C                 shr     edx, 3
.text:0000097F                 xor     ecx, edx
.text:00000981                 add     ecx, [ebp+var_28]
.text:00000984                 add     ecx, eax
.text:00000986                 mov     [ebp+var_28], ecx
.text:00000989                 mov     eax, [ebp+var_28]
.text:0000098C                 mov     [ebp+var_98], eax
.text:00000992                 jmp     short loc_99D
.text:00000994 ; ---------------------------------------------------------------------------
.text:00000994
.text:00000994 loc_994:                                ; CODE XREF: Sha256_WriteByteBlock(x)+6D0j
.text:00000994                 mov     ecx, [ebp+var_28]
.text:00000997                 mov     [ebp+var_98], ecx
.text:0000099D
.text:0000099D loc_99D:                                ; CODE XREF: Sha256_WriteByteBlock(x)+712j
.text:0000099D                 mov     edx, [ebp+var_68]
.text:000009A0                 ror     edx, 6
.text:000009A3                 mov     eax, [ebp+var_68]
.text:000009A6                 ror     eax, 0Bh
.text:000009A9                 xor     edx, eax
.text:000009AB                 mov     ecx, [ebp+var_68]
.text:000009AE                 ror     ecx, 19h
.text:000009B1                 xor     edx, ecx
.text:000009B3                 mov     eax, [ebp+var_6C]
.text:000009B6                 xor     eax, [ebp+var_70]
.text:000009B9                 and     eax, [ebp+var_68]
.text:000009BC                 xor     eax, [ebp+var_70]
.text:000009BF                 add     edx, eax
.text:000009C1                 mov     ecx, [ebp+var_50]
.text:000009C4                 add     edx, dword_20[ecx*4]
.text:000009CB                 add     edx, [ebp+var_98]
.text:000009D1                 add     edx, [ebp+var_74]
.text:000009D4                 mov     [ebp+var_74], edx
.text:000009D7                 mov     edx, [ebp+var_64]
.text:000009DA                 add     edx, [ebp+var_74]
.text:000009DD                 mov     [ebp+var_64], edx
.text:000009E0                 mov     eax, [ebp+var_58]
.text:000009E3                 ror     eax, 2
.text:000009E6                 mov     ecx, [ebp+var_58]
.text:000009E9                 ror     ecx, 0Dh
.text:000009EC                 xor     eax, ecx
.text:000009EE                 mov     edx, [ebp+var_58]
.text:000009F1                 ror     edx, 16h
.text:000009F4                 xor     eax, edx
.text:000009F6                 mov     ecx, [ebp+var_58]
.text:000009F9                 and     ecx, [ebp+var_5C]
.text:000009FC                 mov     edx, [ebp+var_58]
.text:000009FF                 or      edx, [ebp+var_5C]
.text:00000A02                 and     edx, [ebp+var_60]
.text:00000A05                 or      ecx, edx
.text:00000A07                 add     ecx, [ebp+var_74]
.text:00000A0A                 add     ecx, eax
.text:00000A0C                 mov     [ebp+var_74], ecx
.text:00000A0F                 cmp     [ebp+var_50], 0
.text:00000A13                 jz      short loc_A57
.text:00000A15                 mov     eax, [ebp+var_2C]
.text:00000A18                 ror     eax, 11h
.text:00000A1B                 mov     ecx, [ebp+var_2C]
.text:00000A1E                 ror     ecx, 13h
.text:00000A21                 xor     eax, ecx
.text:00000A23                 mov     edx, [ebp+var_2C]
.text:00000A26                 shr     edx, 0Ah
.text:00000A29                 xor     eax, edx
.text:00000A2B                 add     eax, [ebp+var_40]
.text:00000A2E                 mov     ecx, [ebp+var_20]
.text:00000A31                 ror     ecx, 7
.text:00000A34                 mov     edx, [ebp+var_20]
.text:00000A37                 ror     edx, 12h
.text:00000A3A                 xor     ecx, edx
.text:00000A3C                 mov     edx, [ebp+var_20]
.text:00000A3F                 shr     edx, 3
.text:00000A42                 xor     ecx, edx
.text:00000A44                 add     ecx, [ebp+var_24]
.text:00000A47                 add     ecx, eax
.text:00000A49                 mov     [ebp+var_24], ecx
.text:00000A4C                 mov     eax, [ebp+var_24]
.text:00000A4F                 mov     [ebp+var_9C], eax
.text:00000A55                 jmp     short loc_A60
.text:00000A57 ; ---------------------------------------------------------------------------
.text:00000A57
.text:00000A57 loc_A57:                                ; CODE XREF: Sha256_WriteByteBlock(x)+793j
.text:00000A57                 mov     ecx, [ebp+var_24]
.text:00000A5A                 mov     [ebp+var_9C], ecx
.text:00000A60
.text:00000A60 loc_A60:                                ; CODE XREF: Sha256_WriteByteBlock(x)+7D5j
.text:00000A60                 mov     edx, [ebp+var_64]
.text:00000A63                 ror     edx, 6
.text:00000A66                 mov     eax, [ebp+var_64]
.text:00000A69                 ror     eax, 0Bh
.text:00000A6C                 xor     edx, eax
.text:00000A6E                 mov     ecx, [ebp+var_64]
.text:00000A71                 ror     ecx, 19h
.text:00000A74                 xor     edx, ecx
.text:00000A76                 mov     eax, [ebp+var_68]
.text:00000A79                 xor     eax, [ebp+var_6C]
.text:00000A7C                 and     eax, [ebp+var_64]
.text:00000A7F                 xor     eax, [ebp+var_6C]
.text:00000A82                 add     edx, eax
.text:00000A84                 mov     ecx, [ebp+var_50]
.text:00000A87                 add     edx, dword_24[ecx*4]
.text:00000A8E                 add     edx, [ebp+var_9C]
.text:00000A94                 add     edx, [ebp+var_70]
.text:00000A97                 mov     [ebp+var_70], edx
.text:00000A9A                 mov     edx, [ebp+var_60]
.text:00000A9D                 add     edx, [ebp+var_70]
.text:00000AA0                 mov     [ebp+var_60], edx
.text:00000AA3                 mov     eax, [ebp+var_74]
.text:00000AA6                 ror     eax, 2
.text:00000AA9                 mov     ecx, [ebp+var_74]
.text:00000AAC                 ror     ecx, 0Dh
.text:00000AAF                 xor     eax, ecx
.text:00000AB1                 mov     edx, [ebp+var_74]
.text:00000AB4                 ror     edx, 16h
.text:00000AB7                 xor     eax, edx
.text:00000AB9                 mov     ecx, [ebp+var_74]
.text:00000ABC                 and     ecx, [ebp+var_58]
.text:00000ABF                 mov     edx, [ebp+var_74]
.text:00000AC2                 or      edx, [ebp+var_58]
.text:00000AC5                 and     edx, [ebp+var_5C]
.text:00000AC8                 or      ecx, edx
.text:00000ACA                 add     ecx, [ebp+var_70]
.text:00000ACD                 add     ecx, eax
.text:00000ACF                 mov     [ebp+var_70], ecx
.text:00000AD2                 cmp     [ebp+var_50], 0
.text:00000AD6                 jz      short loc_B1A
.text:00000AD8                 mov     eax, [ebp+var_28]
.text:00000ADB                 ror     eax, 11h
.text:00000ADE                 mov     ecx, [ebp+var_28]
.text:00000AE1                 ror     ecx, 13h
.text:00000AE4                 xor     eax, ecx
.text:00000AE6                 mov     edx, [ebp+var_28]
.text:00000AE9                 shr     edx, 0Ah
.text:00000AEC                 xor     eax, edx
.text:00000AEE                 add     eax, [ebp+var_3C]
.text:00000AF1                 mov     ecx, [ebp+var_1C]
.text:00000AF4                 ror     ecx, 7
.text:00000AF7                 mov     edx, [ebp+var_1C]
.text:00000AFA                 ror     edx, 12h
.text:00000AFD                 xor     ecx, edx
.text:00000AFF                 mov     edx, [ebp+var_1C]
.text:00000B02                 shr     edx, 3
.text:00000B05                 xor     ecx, edx
.text:00000B07                 add     ecx, [ebp+var_20]
.text:00000B0A                 add     ecx, eax
.text:00000B0C                 mov     [ebp+var_20], ecx
.text:00000B0F                 mov     eax, [ebp+var_20]
.text:00000B12                 mov     [ebp+var_A0], eax
.text:00000B18                 jmp     short loc_B23
.text:00000B1A ; ---------------------------------------------------------------------------
.text:00000B1A
.text:00000B1A loc_B1A:                                ; CODE XREF: Sha256_WriteByteBlock(x)+856j
.text:00000B1A                 mov     ecx, [ebp+var_20]
.text:00000B1D                 mov     [ebp+var_A0], ecx
.text:00000B23
.text:00000B23 loc_B23:                                ; CODE XREF: Sha256_WriteByteBlock(x)+898j
.text:00000B23                 mov     edx, [ebp+var_60]
.text:00000B26                 ror     edx, 6
.text:00000B29                 mov     eax, [ebp+var_60]
.text:00000B2C                 ror     eax, 0Bh
.text:00000B2F                 xor     edx, eax
.text:00000B31                 mov     ecx, [ebp+var_60]
.text:00000B34                 ror     ecx, 19h
.text:00000B37                 xor     edx, ecx
.text:00000B39                 mov     eax, [ebp+var_64]
.text:00000B3C                 xor     eax, [ebp+var_68]
.text:00000B3F                 and     eax, [ebp+var_60]
.text:00000B42                 xor     eax, [ebp+var_68]
.text:00000B45                 add     edx, eax
.text:00000B47                 mov     ecx, [ebp+var_50]
.text:00000B4A                 add     edx, dword_28[ecx*4]
.text:00000B51                 add     edx, [ebp+var_A0]
.text:00000B57                 add     edx, [ebp+var_6C]
.text:00000B5A                 mov     [ebp+var_6C], edx
.text:00000B5D                 mov     edx, [ebp+var_5C]
.text:00000B60                 add     edx, [ebp+var_6C]
.text:00000B63                 mov     [ebp+var_5C], edx
.text:00000B66                 mov     eax, [ebp+var_70]
.text:00000B69                 ror     eax, 2
.text:00000B6C                 mov     ecx, [ebp+var_70]
.text:00000B6F                 ror     ecx, 0Dh
.text:00000B72                 xor     eax, ecx
.text:00000B74                 mov     edx, [ebp+var_70]
.text:00000B77                 ror     edx, 16h
.text:00000B7A                 xor     eax, edx
.text:00000B7C                 mov     ecx, [ebp+var_70]
.text:00000B7F                 and     ecx, [ebp+var_74]
.text:00000B82                 mov     edx, [ebp+var_70]
.text:00000B85                 or      edx, [ebp+var_74]
.text:00000B88                 and     edx, [ebp+var_58]
.text:00000B8B                 or      ecx, edx
.text:00000B8D                 add     ecx, [ebp+var_6C]
.text:00000B90                 add     ecx, eax
.text:00000B92                 mov     [ebp+var_6C], ecx
.text:00000B95                 cmp     [ebp+var_50], 0
.text:00000B99                 jz      short loc_BDD
.text:00000B9B                 mov     eax, [ebp+var_24]
.text:00000B9E                 ror     eax, 11h
.text:00000BA1                 mov     ecx, [ebp+var_24]
.text:00000BA4                 ror     ecx, 13h
.text:00000BA7                 xor     eax, ecx
.text:00000BA9                 mov     edx, [ebp+var_24]
.text:00000BAC                 shr     edx, 0Ah
.text:00000BAF                 xor     eax, edx
.text:00000BB1                 add     eax, [ebp+var_38]
.text:00000BB4                 mov     ecx, [ebp+var_18]
.text:00000BB7                 ror     ecx, 7
.text:00000BBA                 mov     edx, [ebp+var_18]
.text:00000BBD                 ror     edx, 12h
.text:00000BC0                 xor     ecx, edx
.text:00000BC2                 mov     edx, [ebp+var_18]
.text:00000BC5                 shr     edx, 3
.text:00000BC8                 xor     ecx, edx
.text:00000BCA                 add     ecx, [ebp+var_1C]
.text:00000BCD                 add     ecx, eax
.text:00000BCF                 mov     [ebp+var_1C], ecx
.text:00000BD2                 mov     eax, [ebp+var_1C]
.text:00000BD5                 mov     [ebp+var_A4], eax
.text:00000BDB                 jmp     short loc_BE6
.text:00000BDD ; ---------------------------------------------------------------------------
.text:00000BDD
.text:00000BDD loc_BDD:                                ; CODE XREF: Sha256_WriteByteBlock(x)+919j
.text:00000BDD                 mov     ecx, [ebp+var_1C]
.text:00000BE0                 mov     [ebp+var_A4], ecx
.text:00000BE6
.text:00000BE6 loc_BE6:                                ; CODE XREF: Sha256_WriteByteBlock(x)+95Bj
.text:00000BE6                 mov     edx, [ebp+var_5C]
.text:00000BE9                 ror     edx, 6
.text:00000BEC                 mov     eax, [ebp+var_5C]
.text:00000BEF                 ror     eax, 0Bh
.text:00000BF2                 xor     edx, eax
.text:00000BF4                 mov     ecx, [ebp+var_5C]
.text:00000BF7                 ror     ecx, 19h
.text:00000BFA                 xor     edx, ecx
.text:00000BFC                 mov     eax, [ebp+var_60]
.text:00000BFF                 xor     eax, [ebp+var_64]
.text:00000C02                 and     eax, [ebp+var_5C]
.text:00000C05                 xor     eax, [ebp+var_64]
.text:00000C08                 add     edx, eax
.text:00000C0A                 mov     ecx, [ebp+var_50]
.text:00000C0D                 add     edx, dword_2C[ecx*4]
.text:00000C14                 add     edx, [ebp+var_A4]
.text:00000C1A                 add     edx, [ebp+var_68]
.text:00000C1D                 mov     [ebp+var_68], edx
.text:00000C20                 mov     edx, [ebp+var_58]
.text:00000C23                 add     edx, [ebp+var_68]
.text:00000C26                 mov     [ebp+var_58], edx
.text:00000C29                 mov     eax, [ebp+var_6C]
.text:00000C2C                 ror     eax, 2
.text:00000C2F                 mov     ecx, [ebp+var_6C]
.text:00000C32                 ror     ecx, 0Dh
.text:00000C35                 xor     eax, ecx
.text:00000C37                 mov     edx, [ebp+var_6C]
.text:00000C3A                 ror     edx, 16h
.text:00000C3D                 xor     eax, edx
.text:00000C3F                 mov     ecx, [ebp+var_6C]
.text:00000C42                 and     ecx, [ebp+var_70]
.text:00000C45                 mov     edx, [ebp+var_6C]
.text:00000C48                 or      edx, [ebp+var_70]
.text:00000C4B                 and     edx, [ebp+var_74]
.text:00000C4E                 or      ecx, edx
.text:00000C50                 add     ecx, [ebp+var_68]
.text:00000C53                 add     ecx, eax
.text:00000C55                 mov     [ebp+var_68], ecx
.text:00000C58                 cmp     [ebp+var_50], 0
.text:00000C5C                 jz      short loc_CA0
.text:00000C5E                 mov     eax, [ebp+var_20]
.text:00000C61                 ror     eax, 11h
.text:00000C64                 mov     ecx, [ebp+var_20]
.text:00000C67                 ror     ecx, 13h
.text:00000C6A                 xor     eax, ecx
.text:00000C6C                 mov     edx, [ebp+var_20]
.text:00000C6F                 shr     edx, 0Ah
.text:00000C72                 xor     eax, edx
.text:00000C74                 add     eax, [ebp+var_34]
.text:00000C77                 mov     ecx, [ebp+var_14]
.text:00000C7A                 ror     ecx, 7
.text:00000C7D                 mov     edx, [ebp+var_14]
.text:00000C80                 ror     edx, 12h
.text:00000C83                 xor     ecx, edx
.text:00000C85                 mov     edx, [ebp+var_14]
.text:00000C88                 shr     edx, 3
.text:00000C8B                 xor     ecx, edx
.text:00000C8D                 add     ecx, [ebp+var_18]
.text:00000C90                 add     ecx, eax
.text:00000C92                 mov     [ebp+var_18], ecx
.text:00000C95                 mov     eax, [ebp+var_18]
.text:00000C98                 mov     [ebp+var_A8], eax
.text:00000C9E                 jmp     short loc_CA9
.text:00000CA0 ; ---------------------------------------------------------------------------
.text:00000CA0
.text:00000CA0 loc_CA0:                                ; CODE XREF: Sha256_WriteByteBlock(x)+9DCj
.text:00000CA0                 mov     ecx, [ebp+var_18]
.text:00000CA3                 mov     [ebp+var_A8], ecx
.text:00000CA9
.text:00000CA9 loc_CA9:                                ; CODE XREF: Sha256_WriteByteBlock(x)+A1Ej
.text:00000CA9                 mov     edx, [ebp+var_58]
.text:00000CAC                 ror     edx, 6
.text:00000CAF                 mov     eax, [ebp+var_58]
.text:00000CB2                 ror     eax, 0Bh
.text:00000CB5                 xor     edx, eax
.text:00000CB7                 mov     ecx, [ebp+var_58]
.text:00000CBA                 ror     ecx, 19h
.text:00000CBD                 xor     edx, ecx
.text:00000CBF                 mov     eax, [ebp+var_5C]
.text:00000CC2                 xor     eax, [ebp+var_60]
.text:00000CC5                 and     eax, [ebp+var_58]
.text:00000CC8                 xor     eax, [ebp+var_60]
.text:00000CCB                 add     edx, eax
.text:00000CCD                 mov     ecx, [ebp+var_50]
.text:00000CD0                 add     edx, dword_30[ecx*4]
.text:00000CD7                 add     edx, [ebp+var_A8]
.text:00000CDD                 add     edx, [ebp+var_64]
.text:00000CE0                 mov     [ebp+var_64], edx
.text:00000CE3                 mov     edx, [ebp+var_74]
.text:00000CE6                 add     edx, [ebp+var_64]
.text:00000CE9                 mov     [ebp+var_74], edx
.text:00000CEC                 mov     eax, [ebp+var_68]
.text:00000CEF                 ror     eax, 2
.text:00000CF2                 mov     ecx, [ebp+var_68]
.text:00000CF5                 ror     ecx, 0Dh
.text:00000CF8                 xor     eax, ecx
.text:00000CFA                 mov     edx, [ebp+var_68]
.text:00000CFD                 ror     edx, 16h
.text:00000D00                 xor     eax, edx
.text:00000D02                 mov     ecx, [ebp+var_68]
.text:00000D05                 and     ecx, [ebp+var_6C]
.text:00000D08                 mov     edx, [ebp+var_68]
.text:00000D0B                 or      edx, [ebp+var_6C]
.text:00000D0E                 and     edx, [ebp+var_70]
.text:00000D11                 or      ecx, edx
.text:00000D13                 add     ecx, [ebp+var_64]
.text:00000D16                 add     ecx, eax
.text:00000D18                 mov     [ebp+var_64], ecx
.text:00000D1B                 cmp     [ebp+var_50], 0
.text:00000D1F                 jz      short loc_D63
.text:00000D21                 mov     eax, [ebp+var_1C]
.text:00000D24                 ror     eax, 11h
.text:00000D27                 mov     ecx, [ebp+var_1C]
.text:00000D2A                 ror     ecx, 13h
.text:00000D2D                 xor     eax, ecx
.text:00000D2F                 mov     edx, [ebp+var_1C]
.text:00000D32                 shr     edx, 0Ah
.text:00000D35                 xor     eax, edx
.text:00000D37                 add     eax, [ebp+var_30]
.text:00000D3A                 mov     ecx, [ebp+var_10]
.text:00000D3D                 ror     ecx, 7
.text:00000D40                 mov     edx, [ebp+var_10]
.text:00000D43                 ror     edx, 12h
.text:00000D46                 xor     ecx, edx
.text:00000D48                 mov     edx, [ebp+var_10]
.text:00000D4B                 shr     edx, 3
.text:00000D4E                 xor     ecx, edx
.text:00000D50                 add     ecx, [ebp+var_14]
.text:00000D53                 add     ecx, eax
.text:00000D55                 mov     [ebp+var_14], ecx
.text:00000D58                 mov     eax, [ebp+var_14]
.text:00000D5B                 mov     [ebp+var_AC], eax
.text:00000D61                 jmp     short loc_D6C
.text:00000D63 ; ---------------------------------------------------------------------------
.text:00000D63
.text:00000D63 loc_D63:                                ; CODE XREF: Sha256_WriteByteBlock(x)+A9Fj
.text:00000D63                 mov     ecx, [ebp+var_14]
.text:00000D66                 mov     [ebp+var_AC], ecx
.text:00000D6C
.text:00000D6C loc_D6C:                                ; CODE XREF: Sha256_WriteByteBlock(x)+AE1j
.text:00000D6C                 mov     edx, [ebp+var_74]
.text:00000D6F                 ror     edx, 6
.text:00000D72                 mov     eax, [ebp+var_74]
.text:00000D75                 ror     eax, 0Bh
.text:00000D78                 xor     edx, eax
.text:00000D7A                 mov     ecx, [ebp+var_74]
.text:00000D7D                 ror     ecx, 19h
.text:00000D80                 xor     edx, ecx
.text:00000D82                 mov     eax, [ebp+var_58]
.text:00000D85                 xor     eax, [ebp+var_5C]
.text:00000D88                 and     eax, [ebp+var_74]
.text:00000D8B                 xor     eax, [ebp+var_5C]
.text:00000D8E                 add     edx, eax
.text:00000D90                 mov     ecx, [ebp+var_50]
.text:00000D93                 add     edx, dword_34[ecx*4]
.text:00000D9A                 add     edx, [ebp+var_AC]
.text:00000DA0                 add     edx, [ebp+var_60]
.text:00000DA3                 mov     [ebp+var_60], edx
.text:00000DA6                 mov     edx, [ebp+var_70]
.text:00000DA9                 add     edx, [ebp+var_60]
.text:00000DAC                 mov     [ebp+var_70], edx
.text:00000DAF                 mov     eax, [ebp+var_64]
.text:00000DB2                 ror     eax, 2
.text:00000DB5                 mov     ecx, [ebp+var_64]
.text:00000DB8                 ror     ecx, 0Dh
.text:00000DBB                 xor     eax, ecx
.text:00000DBD                 mov     edx, [ebp+var_64]
.text:00000DC0                 ror     edx, 16h
.text:00000DC3                 xor     eax, edx
.text:00000DC5                 mov     ecx, [ebp+var_64]
.text:00000DC8                 and     ecx, [ebp+var_68]
.text:00000DCB                 mov     edx, [ebp+var_64]
.text:00000DCE                 or      edx, [ebp+var_68]
.text:00000DD1                 and     edx, [ebp+var_6C]
.text:00000DD4                 or      ecx, edx
.text:00000DD6                 add     ecx, [ebp+var_60]
.text:00000DD9                 add     ecx, eax
.text:00000DDB                 mov     [ebp+var_60], ecx
.text:00000DDE                 cmp     [ebp+var_50], 0
.text:00000DE2                 jz      short loc_E26
.text:00000DE4                 mov     eax, [ebp+var_18]
.text:00000DE7                 ror     eax, 11h
.text:00000DEA                 mov     ecx, [ebp+var_18]
.text:00000DED                 ror     ecx, 13h
.text:00000DF0                 xor     eax, ecx
.text:00000DF2                 mov     edx, [ebp+var_18]
.text:00000DF5                 shr     edx, 0Ah
.text:00000DF8                 xor     eax, edx
.text:00000DFA                 add     eax, [ebp+var_2C]
.text:00000DFD                 mov     ecx, [ebp+var_C]
.text:00000E00                 ror     ecx, 7
.text:00000E03                 mov     edx, [ebp+var_C]
.text:00000E06                 ror     edx, 12h
.text:00000E09                 xor     ecx, edx
.text:00000E0B                 mov     edx, [ebp+var_C]
.text:00000E0E                 shr     edx, 3
.text:00000E11                 xor     ecx, edx
.text:00000E13                 add     ecx, [ebp+var_10]
.text:00000E16                 add     ecx, eax
.text:00000E18                 mov     [ebp+var_10], ecx
.text:00000E1B                 mov     eax, [ebp+var_10]
.text:00000E1E                 mov     [ebp+var_B0], eax
.text:00000E24                 jmp     short loc_E2F
.text:00000E26 ; ---------------------------------------------------------------------------
.text:00000E26
.text:00000E26 loc_E26:                                ; CODE XREF: Sha256_WriteByteBlock(x)+B62j
.text:00000E26                 mov     ecx, [ebp+var_10]
.text:00000E29                 mov     [ebp+var_B0], ecx
.text:00000E2F
.text:00000E2F loc_E2F:                                ; CODE XREF: Sha256_WriteByteBlock(x)+BA4j
.text:00000E2F                 mov     edx, [ebp+var_70]
.text:00000E32                 ror     edx, 6
.text:00000E35                 mov     eax, [ebp+var_70]
.text:00000E38                 ror     eax, 0Bh
.text:00000E3B                 xor     edx, eax
.text:00000E3D                 mov     ecx, [ebp+var_70]
.text:00000E40                 ror     ecx, 19h
.text:00000E43                 xor     edx, ecx
.text:00000E45                 mov     eax, [ebp+var_74]
.text:00000E48                 xor     eax, [ebp+var_58]
.text:00000E4B                 and     eax, [ebp+var_70]
.text:00000E4E                 xor     eax, [ebp+var_58]
.text:00000E51                 add     edx, eax
.text:00000E53                 mov     ecx, [ebp+var_50]
.text:00000E56                 add     edx, dword_38[ecx*4]
.text:00000E5D                 add     edx, [ebp+var_B0]
.text:00000E63                 add     edx, [ebp+var_5C]
.text:00000E66                 mov     [ebp+var_5C], edx
.text:00000E69                 mov     edx, [ebp+var_6C]
.text:00000E6C                 add     edx, [ebp+var_5C]
.text:00000E6F                 mov     [ebp+var_6C], edx
.text:00000E72                 mov     eax, [ebp+var_60]
.text:00000E75                 ror     eax, 2
.text:00000E78                 mov     ecx, [ebp+var_60]
.text:00000E7B                 ror     ecx, 0Dh
.text:00000E7E                 xor     eax, ecx
.text:00000E80                 mov     edx, [ebp+var_60]
.text:00000E83                 ror     edx, 16h
.text:00000E86                 xor     eax, edx
.text:00000E88                 mov     ecx, [ebp+var_60]
.text:00000E8B                 and     ecx, [ebp+var_64]
.text:00000E8E                 mov     edx, [ebp+var_60]
.text:00000E91                 or      edx, [ebp+var_64]
.text:00000E94                 and     edx, [ebp+var_68]
.text:00000E97                 or      ecx, edx
.text:00000E99                 add     ecx, [ebp+var_5C]
.text:00000E9C                 add     ecx, eax
.text:00000E9E                 mov     [ebp+var_5C], ecx
.text:00000EA1                 cmp     [ebp+var_50], 0
.text:00000EA5                 jz      short loc_EE9
.text:00000EA7                 mov     eax, [ebp+var_14]
.text:00000EAA                 ror     eax, 11h
.text:00000EAD                 mov     ecx, [ebp+var_14]
.text:00000EB0                 ror     ecx, 13h
.text:00000EB3                 xor     eax, ecx
.text:00000EB5                 mov     edx, [ebp+var_14]
.text:00000EB8                 shr     edx, 0Ah
.text:00000EBB                 xor     eax, edx
.text:00000EBD                 add     eax, [ebp+var_28]
.text:00000EC0                 mov     ecx, [ebp+var_48]
.text:00000EC3                 ror     ecx, 7
.text:00000EC6                 mov     edx, [ebp+var_48]
.text:00000EC9                 ror     edx, 12h
.text:00000ECC                 xor     ecx, edx
.text:00000ECE                 mov     edx, [ebp+var_48]
.text:00000ED1                 shr     edx, 3
.text:00000ED4                 xor     ecx, edx
.text:00000ED6                 add     ecx, [ebp+var_C]
.text:00000ED9                 add     ecx, eax
.text:00000EDB                 mov     [ebp+var_C], ecx
.text:00000EDE                 mov     eax, [ebp+var_C]
.text:00000EE1                 mov     [ebp+var_B4], eax
.text:00000EE7                 jmp     short loc_EF2
.text:00000EE9 ; ---------------------------------------------------------------------------
.text:00000EE9
.text:00000EE9 loc_EE9:                                ; CODE XREF: Sha256_WriteByteBlock(x)+C25j
.text:00000EE9                 mov     ecx, [ebp+var_C]
.text:00000EEC                 mov     [ebp+var_B4], ecx
.text:00000EF2
.text:00000EF2 loc_EF2:                                ; CODE XREF: Sha256_WriteByteBlock(x)+C67j
.text:00000EF2                 mov     edx, [ebp+var_6C]
.text:00000EF5                 ror     edx, 6
.text:00000EF8                 mov     eax, [ebp+var_6C]
.text:00000EFB                 ror     eax, 0Bh
.text:00000EFE                 xor     edx, eax
.text:00000F00                 mov     ecx, [ebp+var_6C]
.text:00000F03                 ror     ecx, 19h
.text:00000F06                 xor     edx, ecx
.text:00000F08                 mov     eax, [ebp+var_70]
.text:00000F0B                 xor     eax, [ebp+var_74]
.text:00000F0E                 and     eax, [ebp+var_6C]
.text:00000F11                 xor     eax, [ebp+var_74]
.text:00000F14                 add     edx, eax
.text:00000F16                 mov     ecx, [ebp+var_50]
.text:00000F19                 add     edx, dword_3C[ecx*4]
.text:00000F20                 add     edx, [ebp+var_B4]
.text:00000F26                 add     edx, [ebp+var_58]
.text:00000F29                 mov     [ebp+var_58], edx
.text:00000F2C                 mov     edx, [ebp+var_68]
.text:00000F2F                 add     edx, [ebp+var_58]
.text:00000F32                 mov     [ebp+var_68], edx
.text:00000F35                 mov     eax, [ebp+var_5C]
.text:00000F38                 ror     eax, 2
.text:00000F3B                 mov     ecx, [ebp+var_5C]
.text:00000F3E                 ror     ecx, 0Dh
.text:00000F41                 xor     eax, ecx
.text:00000F43                 mov     edx, [ebp+var_5C]
.text:00000F46                 ror     edx, 16h
.text:00000F49                 xor     eax, edx
.text:00000F4B                 mov     ecx, [ebp+var_5C]
.text:00000F4E                 and     ecx, [ebp+var_60]
.text:00000F51                 mov     edx, [ebp+var_5C]
.text:00000F54                 or      edx, [ebp+var_60]
.text:00000F57                 and     edx, [ebp+var_64]
.text:00000F5A                 or      ecx, edx
.text:00000F5C                 add     ecx, [ebp+var_58]
.text:00000F5F                 add     ecx, eax
.text:00000F61                 mov     [ebp+var_58], ecx
.text:00000F64                 jmp     loc_33C
.text:00000F69 ; ---------------------------------------------------------------------------
.text:00000F69
.text:00000F69 loc_F69:                                ; CODE XREF: Sha256_WriteByteBlock(x)+C9j
.text:00000F69                 mov     eax, [ebp+var_54]
.text:00000F6C                 mov     ecx, [eax]
.text:00000F6E                 add     ecx, [ebp+var_58]
.text:00000F71                 mov     edx, [ebp+var_54]
.text:00000F74                 mov     [edx], ecx
.text:00000F76                 mov     eax, [ebp+var_54]
.text:00000F79                 mov     ecx, [eax+4]
.text:00000F7C                 add     ecx, [ebp+var_5C]
.text:00000F7F                 mov     edx, [ebp+var_54]
.text:00000F82                 mov     [edx+4], ecx
.text:00000F85                 mov     eax, [ebp+var_54]
.text:00000F88                 mov     ecx, [eax+8]
.text:00000F8B                 add     ecx, [ebp+var_60]
.text:00000F8E                 mov     edx, [ebp+var_54]
.text:00000F91                 mov     [edx+8], ecx
.text:00000F94                 mov     eax, [ebp+var_54]
.text:00000F97                 mov     ecx, [eax+0Ch]
.text:00000F9A                 add     ecx, [ebp+var_64]
.text:00000F9D                 mov     edx, [ebp+var_54]
.text:00000FA0                 mov     [edx+0Ch], ecx
.text:00000FA3                 mov     eax, [ebp+var_54]
.text:00000FA6                 mov     ecx, [eax+10h]
.text:00000FA9                 add     ecx, [ebp+var_68]
.text:00000FAC                 mov     edx, [ebp+var_54]
.text:00000FAF                 mov     [edx+10h], ecx
.text:00000FB2                 mov     eax, [ebp+var_54]
.text:00000FB5                 mov     ecx, [eax+14h]
.text:00000FB8                 add     ecx, [ebp+var_6C]
.text:00000FBB                 mov     edx, [ebp+var_54]
.text:00000FBE                 mov     [edx+14h], ecx
.text:00000FC1                 mov     eax, [ebp+var_54]
.text:00000FC4                 mov     ecx, [eax+18h]
.text:00000FC7                 add     ecx, [ebp+var_70]
.text:00000FCA                 mov     edx, [ebp+var_54]
.text:00000FCD                 mov     [edx+18h], ecx
.text:00000FD0                 mov     eax, [ebp+var_54]
.text:00000FD3                 mov     ecx, [eax+1Ch]
.text:00000FD6                 add     ecx, [ebp+var_74]
.text:00000FD9                 mov     edx, [ebp+var_54]
.text:00000FDC                 mov     [edx+1Ch], ecx
.text:00000FDF                 push    edx
.text:00000FE0                 mov     ecx, ebp
.text:00000FE2                 push    eax
.text:00000FE3                 lea     edx, $LN43
.text:00000FE9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000FEE                 pop     eax
.text:00000FEF                 pop     edx
.text:00000FF0                 pop     edi
.text:00000FF1                 mov     ecx, [ebp+var_4]
.text:00000FF4                 xor     ecx, ebp
.text:00000FF6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000FFB                 mov     esp, ebp
.text:00000FFD                 pop     ebp
.text:00000FFE                 retn    4
.text:00000FFE _Sha256_WriteByteBlock@4 endp
.text:00000FFE
.text:00000FFE ; ---------------------------------------------------------------------------
.text:00001001                 align 4
.text:00001004 $LN43           dd 1                    ; DATA XREF: Sha256_WriteByteBlock(x)+D63o
.text:00001008                 dd offset $LN42
.text:0000100C $LN42           dd 0FFFFFFB8h, 40h      ; DATA XREF: .text:00001008o
.text:00001014                 dd offset $LN41
.text:00001018 $LN41           dd 0CCCC0057h, 0CCCCCCCCh ; DATA XREF: .text:00001014o
.text:00001020
.text:00001020 ; =============== S U B R O U T I N E =======================================
.text:00001020
.text:00001020 ; Attributes: bp-based frame
.text:00001020
.text:00001020 ; __stdcall Sha256_Final(x, x)
.text:00001020                 public _Sha256_Final@8
.text:00001020 _Sha256_Final@8 proc near
.text:00001020
.text:00001020 var_14          = dword ptr -14h
.text:00001020 var_10          = dword ptr -10h
.text:00001020 var_C           = dword ptr -0Ch
.text:00001020 var_8           = dword ptr -8
.text:00001020 var_4           = dword ptr -4
.text:00001020 arg_0           = dword ptr  8
.text:00001020 arg_4           = dword ptr  0Ch
.text:00001020
.text:00001020                 push    ebp
.text:00001021                 mov     ebp, esp
.text:00001023                 sub     esp, 14h
.text:00001026                 mov     eax, 0CCCCCCCCh
.text:0000102B                 mov     [ebp+var_14], eax
.text:0000102E                 mov     [ebp+var_10], eax
.text:00001031                 mov     [ebp+var_C], eax
.text:00001034                 mov     [ebp+var_8], eax
.text:00001037                 mov     [ebp+var_4], eax
.text:0000103A                 mov     eax, [ebp+arg_0]
.text:0000103D                 mov     ecx, [eax+20h]
.text:00001040                 and     ecx, 3Fh
.text:00001043                 mov     [ebp+var_4], ecx
.text:00001046                 mov     edx, [ebp+arg_0]
.text:00001049                 add     edx, [ebp+var_4]
.text:0000104C                 mov     byte ptr [edx+28h], 80h ; 'Ç'
.text:00001050                 mov     eax, [ebp+var_4]
.text:00001053                 add     eax, 1
.text:00001056                 mov     [ebp+var_4], eax
.text:00001059
.text:00001059 loc_1059:                               ; CODE XREF: Sha256_Final(x,x)+66j
.text:00001059                 cmp     [ebp+var_4], 38h ; '8'
.text:0000105D                 jz      short loc_1088
.text:0000105F                 mov     ecx, [ebp+var_4]
.text:00001062                 and     ecx, 3Fh
.text:00001065                 mov     [ebp+var_4], ecx
.text:00001068                 jnz     short loc_1073
.text:0000106A                 mov     edx, [ebp+arg_0]
.text:0000106D                 push    edx
.text:0000106E                 call    _Sha256_WriteByteBlock@4 ; Sha256_WriteByteBlock(x)
.text:00001073
.text:00001073 loc_1073:                               ; CODE XREF: Sha256_Final(x,x)+48j
.text:00001073                 mov     eax, [ebp+arg_0]
.text:00001076                 add     eax, [ebp+var_4]
.text:00001079                 mov     byte ptr [eax+28h], 0
.text:0000107D                 mov     ecx, [ebp+var_4]
.text:00001080                 add     ecx, 1
.text:00001083                 mov     [ebp+var_4], ecx
.text:00001086                 jmp     short loc_1059
.text:00001088 ; ---------------------------------------------------------------------------
.text:00001088
.text:00001088 loc_1088:                               ; CODE XREF: Sha256_Final(x,x)+3Dj
.text:00001088                 mov     edx, [ebp+arg_0]
.text:0000108B                 mov     eax, [edx+20h]
.text:0000108E                 mov     edx, [edx+24h]
.text:00001091                 mov     cl, 3
.text:00001093                 call    __allshl
.text:00001098                 mov     [ebp+var_10], eax
.text:0000109B                 mov     [ebp+var_C], edx
.text:0000109E                 mov     eax, [ebp+var_10]
.text:000010A1                 mov     edx, [ebp+var_C]
.text:000010A4                 mov     cl, 20h ; ' '
.text:000010A6                 call    __aullshr
.text:000010AB                 bswap   eax
.text:000010AD                 mov     ecx, [ebp+arg_0]
.text:000010B0                 mov     [ecx+60h], eax
.text:000010B3                 mov     edx, [ebp+var_10]
.text:000010B6                 bswap   edx
.text:000010B8                 mov     eax, [ebp+arg_0]
.text:000010BB                 mov     [eax+64h], edx
.text:000010BE                 mov     ecx, [ebp+arg_0]
.text:000010C1                 push    ecx
.text:000010C2                 call    _Sha256_WriteByteBlock@4 ; Sha256_WriteByteBlock(x)
.text:000010C7                 mov     [ebp+var_8], 0
.text:000010CE                 jmp     short loc_10D9
.text:000010D0 ; ---------------------------------------------------------------------------
.text:000010D0
.text:000010D0 loc_10D0:                               ; CODE XREF: Sha256_Final(x,x)+DEj
.text:000010D0                 mov     edx, [ebp+var_8]
.text:000010D3                 add     edx, 1
.text:000010D6                 mov     [ebp+var_8], edx
.text:000010D9
.text:000010D9 loc_10D9:                               ; CODE XREF: Sha256_Final(x,x)+AEj
.text:000010D9                 cmp     [ebp+var_8], 8
.text:000010DD                 jnb     short loc_1100
.text:000010DF                 mov     eax, [ebp+var_8]
.text:000010E2                 mov     ecx, [ebp+arg_0]
.text:000010E5                 mov     edx, [ecx+eax*4]
.text:000010E8                 mov     [ebp+var_14], edx
.text:000010EB                 mov     eax, [ebp+var_14]
.text:000010EE                 bswap   eax
.text:000010F0                 mov     ecx, [ebp+arg_4]
.text:000010F3                 mov     [ecx], eax
.text:000010F5                 mov     edx, [ebp+arg_4]
.text:000010F8                 add     edx, 4
.text:000010FB                 mov     [ebp+arg_4], edx
.text:000010FE                 jmp     short loc_10D0
.text:00001100 ; ---------------------------------------------------------------------------
.text:00001100
.text:00001100 loc_1100:                               ; CODE XREF: Sha256_Final(x,x)+BDj
.text:00001100                 mov     eax, [ebp+arg_0]
.text:00001103                 push    eax
.text:00001104                 call    _Sha256_Init@4  ; Sha256_Init(x)
.text:00001109                 add     esp, 14h
.text:0000110C                 cmp     ebp, esp
.text:0000110E                 call    __RTC_CheckEsp
.text:00001113                 mov     esp, ebp
.text:00001115                 pop     ebp
.text:00001116                 retn    8
.text:00001116 _Sha256_Final@8 endp
.text:00001116
.text:00001116 ; ---------------------------------------------------------------------------
.text:00001119                 align 4
.text:00001119 _text           ends
.text:00001119
.rtc$TMZ:0000111C ; ===========================================================================
.rtc$TMZ:0000111C
.rtc$TMZ:0000111C ; Segment type: Pure data
.rtc$TMZ:0000111C ; Segment permissions: Read
.rtc$TMZ:0000111C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000111C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000111C                 ;org 111Ch
.rtc$TMZ:0000111C ; COMDAT (pick any)
.rtc$TMZ:0000111C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000111C _rtc$TMZ        ends
.rtc$TMZ:0000111C
.rtc$IMZ:00001120 ; ===========================================================================
.rtc$IMZ:00001120
.rtc$IMZ:00001120 ; Segment type: Pure data
.rtc$IMZ:00001120 ; Segment permissions: Read
.rtc$IMZ:00001120 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001120                 assume cs:_rtc$IMZ
.rtc$IMZ:00001120                 ;org 1120h
.rtc$IMZ:00001120 ; COMDAT (pick any)
.rtc$IMZ:00001120 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001120 _rtc$IMZ        ends
.rtc$IMZ:00001120
UNDEF:00001130 ; ===========================================================================
UNDEF:00001130
UNDEF:00001130 ; Segment type: Externs
UNDEF:00001130 ; UNDEF
UNDEF:00001130                 extrn __RTC_Shutdown:near
UNDEF:00001130                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001134                 extrn __RTC_InitBase:near
UNDEF:00001134                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001138 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00001138                 extrn _memcpy:near      ; CODE XREF: Sha256_Update(x,x,x)+68p
UNDEF:00001138                                         ; Sha256_Update(x,x,x)+91p ...
UNDEF:0000113C                 extrn __RTC_CheckEsp:near
UNDEF:0000113C                                         ; CODE XREF: Sha256_Update(x,x,x)+FEp
UNDEF:0000113C                                         ; Sha256_Final(x,x)+EEp
UNDEF:00001140                 extrn ___security_cookie:near
UNDEF:00001140                                         ; DATA XREF: Sha256_WriteByteBlock(x)+1Cr
UNDEF:00001144 ; __fastcall __security_check_cookie(x)
UNDEF:00001144                 extrn @__security_check_cookie@4:near
UNDEF:00001144                                         ; CODE XREF: Sha256_WriteByteBlock(x)+D76p
UNDEF:00001148 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001148                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001148                                         ; CODE XREF: Sha256_WriteByteBlock(x)+D69p
UNDEF:0000114C                 extrn __aullshr:near    ; CODE XREF: Sha256_Final(x,x)+86p
UNDEF:00001150                 extrn __allshl:near     ; CODE XREF: Sha256_Final(x,x)+73p
UNDEF:00001150
UNDEF:00001150
UNDEF:00001150                 end