.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 9E9A5D65D68C62ABD3F12A69067CACA5
.text:00000000 ; Input CRC32 : A85CCDD4
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Lzma2Decoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCompress::NLzma2::CDecoder::CDecoder(NCompress::NLzma2::CDecoder *__hidden this)
.text:00000000                 public ??0CDecoder@NLzma2@NCompress@@QAE@XZ
.text:00000000 ??0CDecoder@NLzma2@NCompress@@QAE@XZ proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     ecx, [ebp+var_4] ; this
.text:00000011                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000016                 mov     ecx, [ebp+var_4]
.text:00000019                 add     ecx, 4          ; this
.text:0000001C                 call    ??0ICompressSetDecoderProperties2@@QAE@XZ ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)
.text:00000021                 mov     ecx, [ebp+var_4]
.text:00000024                 add     ecx, 8          ; this
.text:00000027                 call    ??0ICompressSetFinishMode@@QAE@XZ ; ICompressSetFinishMode::ICompressSetFinishMode(void)
.text:0000002C                 mov     ecx, [ebp+var_4]
.text:0000002F                 add     ecx, 0Ch        ; this
.text:00000032                 call    ??0ICompressGetInStreamProcessedSize@@QAE@XZ ; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)
.text:00000037                 mov     ecx, [ebp+var_4]
.text:0000003A                 add     ecx, 10h        ; this
.text:0000003D                 call    ??0ICompressSetBufSize@@QAE@XZ ; ICompressSetBufSize::ICompressSetBufSize(void)
.text:00000042                 mov     ecx, [ebp+var_4]
.text:00000045                 add     ecx, 14h        ; this
.text:00000048                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:0000004D                 mov     ecx, [ebp+var_4]
.text:00000050                 add     ecx, 18h        ; this
.text:00000053                 call    ??0ICompressSetOutStreamSize@@QAE@XZ ; ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)
.text:00000058                 mov     ecx, [ebp+var_4]
.text:0000005B                 add     ecx, 1Ch        ; this
.text:0000005E                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00000063                 mov     ecx, [ebp+var_4]
.text:00000066                 add     ecx, 20h ; ' '  ; this
.text:00000069                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000006E                 mov     eax, [ebp+var_4]
.text:00000071                 mov     dword ptr [eax], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressCoder'}
.text:00000077                 mov     ecx, [ebp+var_4]
.text:0000007A                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.text:00000081                 mov     edx, [ebp+var_4]
.text:00000084                 mov     dword ptr [edx+8], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressSetFinishMode@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetFinishMode'}
.text:0000008B                 mov     eax, [ebp+var_4]
.text:0000008E                 mov     dword ptr [eax+0Ch], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00000095                 mov     ecx, [ebp+var_4]
.text:00000098                 mov     dword ptr [ecx+10h], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressSetBufSize@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetBufSize'}
.text:0000009F                 mov     edx, [ebp+var_4]
.text:000000A2                 mov     dword ptr [edx+14h], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetInStream'}
.text:000000A9                 mov     eax, [ebp+var_4]
.text:000000AC                 mov     dword ptr [eax+18h], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:000000B3                 mov     ecx, [ebp+var_4]
.text:000000B6                 mov     dword ptr [ecx+1Ch], offset ??_7CDecoder@NLzma2@NCompress@@6BISequentialInStream@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ISequentialInStream'}
.text:000000BD                 mov     ecx, [ebp+var_4]
.text:000000C0                 add     ecx, 24h ; '$'
.text:000000C3                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000000C8                 mov     edx, [ebp+var_4]
.text:000000CB                 mov     dword ptr [edx+28h], 0
.text:000000D2                 mov     eax, [ebp+var_4]
.text:000000D5                 mov     byte ptr [eax+34h], 0
.text:000000D9                 mov     ecx, [ebp+var_4]
.text:000000DC                 mov     byte ptr [ecx+35h], 0
.text:000000E0                 mov     edx, [ebp+var_4]
.text:000000E3                 mov     dword ptr [edx+50h], 0
.text:000000EA                 mov     eax, [ebp+var_4]
.text:000000ED                 mov     dword ptr [eax+54h], 100000h
.text:000000F4                 mov     ecx, [ebp+var_4]
.text:000000F7                 mov     dword ptr [ecx+58h], 400000h
.text:000000FE                 mov     edx, [ebp+var_4]
.text:00000101                 mov     dword ptr [edx+70h], 0
.text:00000108                 mov     eax, [ebp+var_4]
.text:0000010B                 mov     dword ptr [eax+6Ch], 0
.text:00000112                 mov     eax, [ebp+var_4]
.text:00000115                 add     esp, 4
.text:00000118                 cmp     ebp, esp
.text:0000011A                 call    __RTC_CheckEsp
.text:0000011F                 mov     esp, ebp
.text:00000121                 pop     ebp
.text:00000122                 retn
.text:00000122 ??0CDecoder@NLzma2@NCompress@@QAE@XZ endp
.text:00000122
.text:00000122 ; ---------------------------------------------------------------------------
.text:00000123                 align 10h
.text:00000130
.text:00000130 ; =============== S U B R O U T I N E =======================================
.text:00000130
.text:00000130 ; Attributes: bp-based frame
.text:00000130
.text:00000130 ; __int32 __stdcall NCompress::NLzma2::CDecoder::SetInBufSize(NCompress::NLzma2::CDecoder *this, unsigned int, unsigned int)
.text:00000130                 public ?SetInBufSize@CDecoder@NLzma2@NCompress@@UAGJII@Z
.text:00000130 ?SetInBufSize@CDecoder@NLzma2@NCompress@@UAGJII@Z proc near
.text:00000130                                         ; DATA XREF: .rdata:00000BE8o
.text:00000130
.text:00000130 this            = dword ptr  8
.text:00000130 arg_8           = dword ptr  10h
.text:00000130
.text:00000130                 push    ebp
.text:00000131                 mov     ebp, esp
.text:00000133                 mov     eax, [ebp+this]
.text:00000136                 mov     ecx, [ebp+arg_8]
.text:00000139                 mov     [eax+44h], ecx
.text:0000013C                 xor     eax, eax
.text:0000013E                 pop     ebp
.text:0000013F                 retn    0Ch
.text:0000013F ?SetInBufSize@CDecoder@NLzma2@NCompress@@UAGJII@Z endp
.text:0000013F
.text:0000013F ; ---------------------------------------------------------------------------
.text:00000142                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; __int32 __stdcall NCompress::NLzma2::CDecoder::SetOutBufSize(NCompress::NLzma2::CDecoder *this, unsigned int, unsigned int)
.text:00000150                 public ?SetOutBufSize@CDecoder@NLzma2@NCompress@@UAGJII@Z
.text:00000150 ?SetOutBufSize@CDecoder@NLzma2@NCompress@@UAGJII@Z proc near
.text:00000150                                         ; DATA XREF: .rdata:00000BECo
.text:00000150
.text:00000150 this            = dword ptr  8
.text:00000150 arg_8           = dword ptr  10h
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 mov     eax, [ebp+this]
.text:00000156                 mov     ecx, [ebp+arg_8]
.text:00000159                 mov     [eax+48h], ecx
.text:0000015C                 xor     eax, eax
.text:0000015E                 pop     ebp
.text:0000015F                 retn    0Ch
.text:0000015F ?SetOutBufSize@CDecoder@NLzma2@NCompress@@UAGJII@Z endp
.text:0000015F
.text:0000015F ; ---------------------------------------------------------------------------
.text:00000162                 align 10h
.text:00000170
.text:00000170 ; =============== S U B R O U T I N E =======================================
.text:00000170
.text:00000170 ; Attributes: bp-based frame
.text:00000170
.text:00000170 ; _DWORD __thiscall NCompress::NLzma2::CDecoder::~CDecoder(NCompress::NLzma2::CDecoder *__hidden this)
.text:00000170                 public ??1CDecoder@NLzma2@NCompress@@UAE@XZ
.text:00000170 ??1CDecoder@NLzma2@NCompress@@UAE@XZ proc near
.text:00000170                                         ; CODE XREF: NCompress::NLzma2::CDecoder::`scalar deleting destructor'(uint)+11p
.text:00000170
.text:00000170 var_4           = dword ptr -4
.text:00000170
.text:00000170                 push    ebp
.text:00000171                 mov     ebp, esp
.text:00000173                 push    ecx
.text:00000174                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000017B                 mov     [ebp+var_4], ecx
.text:0000017E                 mov     eax, [ebp+var_4]
.text:00000181                 mov     dword ptr [eax], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressCoder'}
.text:00000187                 mov     ecx, [ebp+var_4]
.text:0000018A                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.text:00000191                 mov     edx, [ebp+var_4]
.text:00000194                 mov     dword ptr [edx+8], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressSetFinishMode@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetFinishMode'}
.text:0000019B                 mov     eax, [ebp+var_4]
.text:0000019E                 mov     dword ptr [eax+0Ch], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:000001A5                 mov     ecx, [ebp+var_4]
.text:000001A8                 mov     dword ptr [ecx+10h], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressSetBufSize@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetBufSize'}
.text:000001AF                 mov     edx, [ebp+var_4]
.text:000001B2                 mov     dword ptr [edx+14h], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetInStream'}
.text:000001B9                 mov     eax, [ebp+var_4]
.text:000001BC                 mov     dword ptr [eax+18h], offset ??_7CDecoder@NLzma2@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:000001C3                 mov     ecx, [ebp+var_4]
.text:000001C6                 mov     dword ptr [ecx+1Ch], offset ??_7CDecoder@NLzma2@NCompress@@6BISequentialInStream@@@ ; const NCompress::NLzma2::CDecoder::`vftable'{for `ISequentialInStream'}
.text:000001CD                 push    offset _g_Alloc
.text:000001D2                 mov     edx, [ebp+var_4]
.text:000001D5                 add     edx, 5Ch ; '\'
.text:000001D8                 push    edx
.text:000001D9                 call    _LzmaDec_Free@8 ; LzmaDec_Free(x,x)
.text:000001DE                 mov     eax, [ebp+var_4]
.text:000001E1                 mov     ecx, [eax+28h]
.text:000001E4                 push    ecx
.text:000001E5                 call    _MidFree@4      ; MidFree(x)
.text:000001EA                 mov     ecx, [ebp+var_4]
.text:000001ED                 add     ecx, 24h ; '$'
.text:000001F0                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000001F5                 add     esp, 4
.text:000001F8                 cmp     ebp, esp
.text:000001FA                 call    __RTC_CheckEsp
.text:000001FF                 mov     esp, ebp
.text:00000201                 pop     ebp
.text:00000202                 retn
.text:00000202 ??1CDecoder@NLzma2@NCompress@@UAE@XZ endp
.text:00000202
.text:00000202 ; ---------------------------------------------------------------------------
.text:00000203                 align 10h
.text:00000210
.text:00000210 ; =============== S U B R O U T I N E =======================================
.text:00000210
.text:00000210 ; Attributes: bp-based frame
.text:00000210
.text:00000210 ; __int32 __stdcall NCompress::NLzma2::CDecoder::SetDecoderProperties2(NCompress::NLzma2::CDecoder *this, const unsigned __int8 *, unsigned int)
.text:00000210                 public ?SetDecoderProperties2@CDecoder@NLzma2@NCompress@@UAGJPBEI@Z
.text:00000210 ?SetDecoderProperties2@CDecoder@NLzma2@NCompress@@UAGJPBEI@Z proc near
.text:00000210                                         ; DATA XREF: .rdata:00000C28o
.text:00000210
.text:00000210 var_4           = dword ptr -4
.text:00000210 this            = dword ptr  8
.text:00000210 arg_4           = dword ptr  0Ch
.text:00000210 arg_8           = dword ptr  10h
.text:00000210
.text:00000210                 push    ebp
.text:00000211                 mov     ebp, esp
.text:00000213                 push    ecx
.text:00000214                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000021B                 cmp     [ebp+arg_8], 1
.text:0000021F                 jz      short loc_22B
.text:00000221                 mov     eax, 80004001h
.text:00000226                 jmp     loc_2B4
.text:0000022B ; ---------------------------------------------------------------------------
.text:0000022B
.text:0000022B loc_22B:                                ; CODE XREF: NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)+Fj
.text:0000022B                 push    offset _g_Alloc
.text:00000230                 mov     eax, [ebp+arg_4]
.text:00000233                 movzx   ecx, byte ptr [eax]
.text:00000236                 push    ecx
.text:00000237                 mov     edx, [ebp+this]
.text:0000023A                 add     edx, 58h ; 'X'
.text:0000023D                 push    edx
.text:0000023E                 call    _Lzma2Dec_Allocate@12 ; Lzma2Dec_Allocate(x,x,x)
.text:00000243                 push    eax
.text:00000244                 call    ?SResToHRESULT@@YGJH@Z ; SResToHRESULT(int)
.text:00000249                 mov     [ebp+var_4], eax
.text:0000024C                 cmp     [ebp+var_4], 0
.text:00000250                 jz      short loc_257
.text:00000252                 mov     eax, [ebp+var_4]
.text:00000255                 jmp     short loc_2B4
.text:00000257 ; ---------------------------------------------------------------------------
.text:00000257
.text:00000257 loc_257:                                ; CODE XREF: NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)+40j
.text:00000257                 mov     eax, [ebp+this]
.text:0000025A                 cmp     dword ptr [eax+24h], 0
.text:0000025E                 jz      short loc_26E
.text:00000260                 mov     ecx, [ebp+this]
.text:00000263                 mov     edx, [ebp+this]
.text:00000266                 mov     eax, [ecx+4Ch]
.text:00000269                 cmp     eax, [edx+50h]
.text:0000026C                 jz      short loc_2B2
.text:0000026E
.text:0000026E loc_26E:                                ; CODE XREF: NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)+4Ej
.text:0000026E                 mov     ecx, [ebp+this]
.text:00000271                 mov     edx, [ecx+24h]
.text:00000274                 push    edx
.text:00000275                 call    _MidFree@4      ; MidFree(x)
.text:0000027A                 mov     eax, [ebp+this]
.text:0000027D                 mov     dword ptr [eax+4Ch], 0
.text:00000284                 mov     ecx, [ebp+this]
.text:00000287                 mov     edx, [ecx+50h]
.text:0000028A                 push    edx
.text:0000028B                 call    _MidAlloc@4     ; MidAlloc(x)
.text:00000290                 mov     ecx, [ebp+this]
.text:00000293                 mov     [ecx+24h], eax
.text:00000296                 mov     edx, [ebp+this]
.text:00000299                 cmp     dword ptr [edx+24h], 0
.text:0000029D                 jnz     short loc_2A6
.text:0000029F                 mov     eax, 8007000Eh
.text:000002A4                 jmp     short loc_2B4
.text:000002A6 ; ---------------------------------------------------------------------------
.text:000002A6
.text:000002A6 loc_2A6:                                ; CODE XREF: NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)+8Dj
.text:000002A6                 mov     eax, [ebp+this]
.text:000002A9                 mov     ecx, [ebp+this]
.text:000002AC                 mov     edx, [ecx+50h]
.text:000002AF                 mov     [eax+4Ch], edx
.text:000002B2
.text:000002B2 loc_2B2:                                ; CODE XREF: NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)+5Cj
.text:000002B2                 xor     eax, eax
.text:000002B4
.text:000002B4 loc_2B4:                                ; CODE XREF: NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)+16j
.text:000002B4                                         ; NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)+45j ...
.text:000002B4                 add     esp, 4
.text:000002B7                 cmp     ebp, esp
.text:000002B9                 call    __RTC_CheckEsp
.text:000002BE                 mov     esp, ebp
.text:000002C0                 pop     ebp
.text:000002C1                 retn    0Ch
.text:000002C1 ?SetDecoderProperties2@CDecoder@NLzma2@NCompress@@UAGJPBEI@Z endp
.text:000002C1
.text:000002C1 ; ---------------------------------------------------------------------------
.text:000002C4                 align 10h
.text:000002D0
.text:000002D0 ; =============== S U B R O U T I N E =======================================
.text:000002D0
.text:000002D0 ; Attributes: bp-based frame
.text:000002D0
.text:000002D0 ; long __stdcall SResToHRESULT(int)
.text:000002D0 ?SResToHRESULT@@YGJH@Z proc near        ; CODE XREF: NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)+34p
.text:000002D0                                         ; NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+1B8p
.text:000002D0
.text:000002D0 var_4           = dword ptr -4
.text:000002D0 arg_0           = dword ptr  8
.text:000002D0
.text:000002D0                 push    ebp
.text:000002D1                 mov     ebp, esp
.text:000002D3                 push    ecx
.text:000002D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002DB                 mov     eax, [ebp+arg_0]
.text:000002DE                 mov     [ebp+var_4], eax
.text:000002E1                 cmp     [ebp+var_4], 5  ; switch 6 cases
.text:000002E5                 ja      short $LN5      ; jumptable 000002EA default case
.text:000002E7                 mov     ecx, [ebp+var_4]
.text:000002EA                 jmp     ds:$LN9[ecx*4]  ; switch jump
.text:000002F1 ; ---------------------------------------------------------------------------
.text:000002F1
.text:000002F1 $LN4:                                   ; CODE XREF: SResToHRESULT(int)+1Aj
.text:000002F1                                         ; DATA XREF: .text:$LN9o
.text:000002F1                 xor     eax, eax        ; jumptable 000002EA case 0
.text:000002F3                 jmp     short loc_30F
.text:000002F5 ; ---------------------------------------------------------------------------
.text:000002F5
.text:000002F5 $LN3:                                   ; CODE XREF: SResToHRESULT(int)+1Aj
.text:000002F5                                         ; DATA XREF: .text:$LN9o
.text:000002F5                 mov     eax, 8007000Eh  ; jumptable 000002EA case 2
.text:000002FA                 jmp     short loc_30F
.text:000002FC ; ---------------------------------------------------------------------------
.text:000002FC
.text:000002FC $LN2:                                   ; CODE XREF: SResToHRESULT(int)+1Aj
.text:000002FC                                         ; DATA XREF: .text:$LN9o
.text:000002FC                 mov     eax, 80070057h  ; jumptable 000002EA case 5
.text:00000301                 jmp     short loc_30F
.text:00000303 ; ---------------------------------------------------------------------------
.text:00000303
.text:00000303 $LN1:                                   ; CODE XREF: SResToHRESULT(int)+1Aj
.text:00000303                                         ; DATA XREF: .text:$LN9o
.text:00000303                 mov     eax, 1          ; jumptable 000002EA case 1
.text:00000308                 jmp     short loc_30F
.text:0000030A ; ---------------------------------------------------------------------------
.text:0000030A
.text:0000030A $LN5:                                   ; CODE XREF: SResToHRESULT(int)+15j
.text:0000030A                                         ; SResToHRESULT(int)+1Aj
.text:0000030A                                         ; DATA XREF: ...
.text:0000030A                 mov     eax, 80004005h  ; jumptable 000002EA default case
.text:0000030F
.text:0000030F loc_30F:                                ; CODE XREF: SResToHRESULT(int)+23j
.text:0000030F                                         ; SResToHRESULT(int)+2Aj ...
.text:0000030F                 mov     esp, ebp
.text:00000311                 pop     ebp
.text:00000312                 retn    4
.text:00000312 ?SResToHRESULT@@YGJH@Z endp
.text:00000312
.text:00000312 ; ---------------------------------------------------------------------------
.text:00000315                 align 4
.text:00000318 $LN9            dd offset $LN4          ; DATA XREF: SResToHRESULT(int)+1Ar
.text:00000318                 dd offset $LN1          ; jump table for switch statement
.text:00000318                 dd offset $LN3
.text:00000318                 dd offset $LN5
.text:00000318                 dd offset $LN5
.text:00000318                 dd offset $LN2
.text:00000330
.text:00000330 ; =============== S U B R O U T I N E =======================================
.text:00000330
.text:00000330 ; Attributes: bp-based frame
.text:00000330
.text:00000330 ; __int32 __stdcall NCompress::NLzma2::CDecoder::GetInStreamProcessedSize(NCompress::NLzma2::CDecoder *this, unsigned __int64 *)
.text:00000330                 public ?GetInStreamProcessedSize@CDecoder@NLzma2@NCompress@@UAGJPA_K@Z
.text:00000330 ?GetInStreamProcessedSize@CDecoder@NLzma2@NCompress@@UAGJPA_K@Z proc near
.text:00000330                                         ; DATA XREF: .rdata:00000C00o
.text:00000330
.text:00000330 this            = dword ptr  8
.text:00000330 arg_4           = dword ptr  0Ch
.text:00000330
.text:00000330                 push    ebp
.text:00000331                 mov     ebp, esp
.text:00000333                 mov     eax, [ebp+arg_4]
.text:00000336                 mov     ecx, [ebp+this]
.text:00000339                 mov     edx, [ecx+34h]
.text:0000033C                 mov     [eax], edx
.text:0000033E                 mov     ecx, [ecx+38h]
.text:00000341                 mov     [eax+4], ecx
.text:00000344                 xor     eax, eax
.text:00000346                 pop     ebp
.text:00000347                 retn    8
.text:00000347 ?GetInStreamProcessedSize@CDecoder@NLzma2@NCompress@@UAGJPA_K@Z endp
.text:00000347
.text:00000347 ; ---------------------------------------------------------------------------
.text:0000034A                 align 10h
.text:00000350
.text:00000350 ; =============== S U B R O U T I N E =======================================
.text:00000350
.text:00000350 ; Attributes: bp-based frame
.text:00000350
.text:00000350 ; __int32 __stdcall NCompress::NLzma2::CDecoder::SetInStream(NCompress::NLzma2::CDecoder *this, struct ISequentialInStream *)
.text:00000350                 public ?SetInStream@CDecoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@@Z
.text:00000350 ?SetInStream@CDecoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@@Z proc near
.text:00000350                                         ; DATA XREF: .rdata:00000BD0o
.text:00000350
.text:00000350 this            = dword ptr  8
.text:00000350 arg_4           = dword ptr  0Ch
.text:00000350
.text:00000350                 push    ebp
.text:00000351                 mov     ebp, esp
.text:00000353                 mov     eax, [ebp+arg_4]
.text:00000356                 push    eax
.text:00000357                 mov     ecx, [ebp+this]
.text:0000035A                 add     ecx, 10h
.text:0000035D                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00000362                 xor     eax, eax
.text:00000364                 cmp     ebp, esp
.text:00000366                 call    __RTC_CheckEsp
.text:0000036B                 pop     ebp
.text:0000036C                 retn    8
.text:0000036C ?SetInStream@CDecoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@@Z endp
.text:0000036C
.text:0000036C ; ---------------------------------------------------------------------------
.text:0000036F                 align 10h
.text:00000370
.text:00000370 ; =============== S U B R O U T I N E =======================================
.text:00000370
.text:00000370 ; Attributes: bp-based frame
.text:00000370
.text:00000370 ; __int32 __stdcall NCompress::NLzma2::CDecoder::ReleaseInStream(NCompress::NLzma2::CDecoder *this)
.text:00000370                 public ?ReleaseInStream@CDecoder@NLzma2@NCompress@@UAGJXZ
.text:00000370 ?ReleaseInStream@CDecoder@NLzma2@NCompress@@UAGJXZ proc near
.text:00000370                                         ; DATA XREF: .rdata:00000BD4o
.text:00000370
.text:00000370 this            = dword ptr  8
.text:00000370
.text:00000370                 push    ebp
.text:00000371                 mov     ebp, esp
.text:00000373                 mov     ecx, [ebp+this]
.text:00000376                 add     ecx, 10h
.text:00000379                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:0000037E                 xor     eax, eax
.text:00000380                 cmp     ebp, esp
.text:00000382                 call    __RTC_CheckEsp
.text:00000387                 pop     ebp
.text:00000388                 retn    4
.text:00000388 ?ReleaseInStream@CDecoder@NLzma2@NCompress@@UAGJXZ endp
.text:00000388
.text:00000388 ; ---------------------------------------------------------------------------
.text:0000038B                 align 10h
.text:00000390
.text:00000390 ; =============== S U B R O U T I N E =======================================
.text:00000390
.text:00000390 ; Attributes: bp-based frame
.text:00000390
.text:00000390 ; __int32 __stdcall NCompress::NLzma2::CDecoder::SetOutStreamSize(NCompress::NLzma2::CDecoder *this, const unsigned __int64 *)
.text:00000390                 public ?SetOutStreamSize@CDecoder@NLzma2@NCompress@@UAGJPB_K@Z
.text:00000390 ?SetOutStreamSize@CDecoder@NLzma2@NCompress@@UAGJPB_K@Z proc near
.text:00000390                                         ; DATA XREF: .rdata:00000BBCo
.text:00000390
.text:00000390 this            = dword ptr  8
.text:00000390 arg_4           = dword ptr  0Ch
.text:00000390
.text:00000390                 push    ebp
.text:00000391                 mov     ebp, esp
.text:00000393                 xor     eax, eax
.text:00000395                 cmp     [ebp+arg_4], 0
.text:00000399                 setnz   al
.text:0000039C                 mov     ecx, [ebp+this]
.text:0000039F                 mov     [ecx+1Dh], al
.text:000003A2                 mov     edx, [ebp+this]
.text:000003A5                 mov     dword ptr [edx+20h], 0
.text:000003AC                 mov     dword ptr [edx+24h], 0
.text:000003B3                 mov     eax, [ebp+this]
.text:000003B6                 movzx   ecx, byte ptr [eax+1Dh]
.text:000003BA                 test    ecx, ecx
.text:000003BC                 jz      short loc_3CF
.text:000003BE                 mov     edx, [ebp+this]
.text:000003C1                 mov     eax, [ebp+arg_4]
.text:000003C4                 mov     ecx, [eax]
.text:000003C6                 mov     [edx+20h], ecx
.text:000003C9                 mov     eax, [eax+4]
.text:000003CC                 mov     [edx+24h], eax
.text:000003CF
.text:000003CF loc_3CF:                                ; CODE XREF: NCompress::NLzma2::CDecoder::SetOutStreamSize(unsigned __int64 const *)+2Cj
.text:000003CF                 mov     ecx, [ebp+this]
.text:000003D2                 add     ecx, 44h ; 'D'
.text:000003D5                 push    ecx
.text:000003D6                 call    _Lzma2Dec_Init@4 ; Lzma2Dec_Init(x)
.text:000003DB                 mov     edx, [ebp+this]
.text:000003DE                 mov     dword ptr [edx+18h], 0
.text:000003E5                 mov     eax, [ebp+this]
.text:000003E8                 mov     dword ptr [eax+14h], 0
.text:000003EF                 mov     ecx, [ebp+this]
.text:000003F2                 mov     dword ptr [ecx+30h], 0
.text:000003F9                 mov     dword ptr [ecx+34h], 0
.text:00000400                 mov     edx, [ebp+this]
.text:00000403                 mov     dword ptr [edx+28h], 0
.text:0000040A                 mov     dword ptr [edx+2Ch], 0
.text:00000411                 xor     eax, eax
.text:00000413                 cmp     ebp, esp
.text:00000415                 call    __RTC_CheckEsp
.text:0000041A                 pop     ebp
.text:0000041B                 retn    8
.text:0000041B ?SetOutStreamSize@CDecoder@NLzma2@NCompress@@UAGJPB_K@Z endp
.text:0000041B
.text:0000041B ; ---------------------------------------------------------------------------
.text:0000041E                 align 10h
.text:00000420
.text:00000420 ; =============== S U B R O U T I N E =======================================
.text:00000420
.text:00000420 ; Attributes: bp-based frame
.text:00000420
.text:00000420 ; __int32 __stdcall NCompress::NLzma2::CDecoder::SetFinishMode(NCompress::NLzma2::CDecoder *this, unsigned int)
.text:00000420                 public ?SetFinishMode@CDecoder@NLzma2@NCompress@@UAGJI@Z
.text:00000420 ?SetFinishMode@CDecoder@NLzma2@NCompress@@UAGJI@Z proc near
.text:00000420                                         ; DATA XREF: .rdata:00000C14o
.text:00000420
.text:00000420 this            = dword ptr  8
.text:00000420 arg_4           = dword ptr  0Ch
.text:00000420
.text:00000420                 push    ebp
.text:00000421                 mov     ebp, esp
.text:00000423                 xor     eax, eax
.text:00000425                 cmp     [ebp+arg_4], 0
.text:00000429                 setnz   al
.text:0000042C                 mov     ecx, [ebp+this]
.text:0000042F                 mov     [ecx+2Ch], al
.text:00000432                 xor     eax, eax
.text:00000434                 pop     ebp
.text:00000435                 retn    8
.text:00000435 ?SetFinishMode@CDecoder@NLzma2@NCompress@@UAGJI@Z endp
.text:00000435
.text:00000435 ; ---------------------------------------------------------------------------
.text:00000438                 align 10h
.text:00000440
.text:00000440 ; =============== S U B R O U T I N E =======================================
.text:00000440
.text:00000440 ; Attributes: bp-based frame
.text:00000440
.text:00000440 ; __int32 __stdcall NCompress::NLzma2::CDecoder::Code(NCompress::NLzma2::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000440                 public ?Code@CDecoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000440 ?Code@CDecoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000440                                         ; DATA XREF: .rdata:00000C3Co
.text:00000440
.text:00000440 var_84          = dword ptr -84h
.text:00000440 var_80          = dword ptr -80h
.text:00000440 var_7C          = dword ptr -7Ch
.text:00000440 var_78          = dword ptr -78h
.text:00000440 var_74          = dword ptr -74h
.text:00000440 var_70          = dword ptr -70h
.text:00000440 var_6C          = dword ptr -6Ch
.text:00000440 var_68          = dword ptr -68h
.text:00000440 var_64          = dword ptr -64h
.text:00000440 var_60          = dword ptr -60h
.text:00000440 var_5C          = dword ptr -5Ch
.text:00000440 var_58          = dword ptr -58h
.text:00000440 var_54          = dword ptr -54h
.text:00000440 var_50          = dword ptr -50h
.text:00000440 var_4A          = byte ptr -4Ah
.text:00000440 var_49          = byte ptr -49h
.text:00000440 var_48          = dword ptr -48h
.text:00000440 var_44          = dword ptr -44h
.text:00000440 var_3C          = dword ptr -3Ch
.text:00000440 var_30          = dword ptr -30h
.text:00000440 var_28          = dword ptr -28h
.text:00000440 var_24          = dword ptr -24h
.text:00000440 var_20          = dword ptr -20h
.text:00000440 var_1C          = dword ptr -1Ch
.text:00000440 var_18          = dword ptr -18h
.text:00000440 var_14          = dword ptr -14h
.text:00000440 var_10          = dword ptr -10h
.text:00000440 var_C           = dword ptr -0Ch
.text:00000440 var_8           = dword ptr -8
.text:00000440 var_4           = dword ptr -4
.text:00000440 this            = dword ptr  8
.text:00000440 arg_4           = dword ptr  0Ch
.text:00000440 arg_8           = dword ptr  10h
.text:00000440 arg_C           = dword ptr  14h
.text:00000440 arg_10          = dword ptr  18h
.text:00000440 arg_14          = dword ptr  1Ch
.text:00000440
.text:00000440                 push    ebp
.text:00000441                 mov     ebp, esp
.text:00000443                 sub     esp, 84h
.text:00000449                 push    esi
.text:0000044A                 push    edi
.text:0000044B                 lea     edi, [ebp+var_84]
.text:00000451                 mov     ecx, 21h ; '!'
.text:00000456                 mov     eax, 0CCCCCCCCh
.text:0000045B                 rep stosd
.text:0000045D                 mov     eax, [ebp+this]
.text:00000460                 cmp     dword ptr [eax+28h], 0
.text:00000464                 jnz     short loc_470
.text:00000466                 mov     eax, 1
.text:0000046B                 jmp     loc_8A6
.text:00000470 ; ---------------------------------------------------------------------------
.text:00000470
.text:00000470 loc_470:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+24j
.text:00000470                 mov     esi, esp
.text:00000472                 mov     ecx, [ebp+arg_10]
.text:00000475                 push    ecx
.text:00000476                 mov     edx, [ebp+this]
.text:00000479                 add     edx, 18h
.text:0000047C                 mov     eax, [ebp+this]
.text:0000047F                 mov     ecx, [eax+18h]
.text:00000482                 push    edx
.text:00000483                 mov     edx, [ecx+0Ch]
.text:00000486                 call    edx
.text:00000488                 cmp     esi, esp
.text:0000048A                 call    __RTC_CheckEsp
.text:0000048F                 mov     eax, [ebp+this]
.text:00000492                 mov     ecx, [eax+58h]
.text:00000495                 mov     [ebp+var_4], ecx
.text:00000498                 mov     [ebp+var_8], 1000h
.text:0000049F                 cmp     [ebp+var_4], 1000h
.text:000004A6                 jnb     short loc_4AF
.text:000004A8                 mov     [ebp+var_4], 1000h
.text:000004AF
.text:000004AF loc_4AF:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+66j
.text:000004AF                 mov     edx, [ebp+this]
.text:000004B2                 mov     eax, [edx+80h]
.text:000004B8                 mov     [ebp+var_C], eax
.text:000004BB                 mov     ecx, [ebp+this]
.text:000004BE                 mov     edx, [ebp+this]
.text:000004C1                 mov     eax, [ecx+84h]
.text:000004C7                 sub     eax, [edx+80h]
.text:000004CD                 cmp     eax, [ebp+var_4]
.text:000004D0                 jnb     short loc_4E0
.text:000004D2                 mov     ecx, [ebp+this]
.text:000004D5                 mov     edx, [ecx+84h]
.text:000004DB                 mov     [ebp+var_60], edx
.text:000004DE                 jmp     short loc_4EF
.text:000004E0 ; ---------------------------------------------------------------------------
.text:000004E0
.text:000004E0 loc_4E0:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+90j
.text:000004E0                 mov     eax, [ebp+this]
.text:000004E3                 mov     ecx, [eax+80h]
.text:000004E9                 add     ecx, [ebp+var_4]
.text:000004EC                 mov     [ebp+var_60], ecx
.text:000004EF
.text:000004EF loc_4EF:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+9Ej
.text:000004EF                 mov     edx, [ebp+var_60]
.text:000004F2                 mov     [ebp+var_10], edx
.text:000004F5                 mov     [ebp+var_14], 0
.text:000004FC
.text:000004FC loc_4FC:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_870j
.text:000004FC                 mov     eax, [ebp+this]
.text:000004FF                 mov     ecx, [ebp+this]
.text:00000502                 mov     edx, [eax+2Ch]
.text:00000505                 cmp     edx, [ecx+30h]
.text:00000508                 jnz     short loc_558
.text:0000050A                 mov     eax, [ebp+this]
.text:0000050D                 mov     dword ptr [eax+30h], 0
.text:00000514                 mov     ecx, [ebp+this]
.text:00000517                 mov     dword ptr [ecx+2Ch], 0
.text:0000051E                 mov     edx, [ebp+this]
.text:00000521                 add     edx, 30h ; '0'
.text:00000524                 mov     esi, esp
.text:00000526                 push    edx
.text:00000527                 mov     eax, [ebp+this]
.text:0000052A                 mov     ecx, [eax+50h]
.text:0000052D                 push    ecx
.text:0000052E                 mov     edx, [ebp+this]
.text:00000531                 mov     eax, [edx+28h]
.text:00000534                 push    eax
.text:00000535                 mov     ecx, [ebp+arg_4]
.text:00000538                 mov     edx, [ecx]
.text:0000053A                 mov     eax, [ebp+arg_4]
.text:0000053D                 push    eax
.text:0000053E                 mov     ecx, [edx+0Ch]
.text:00000541                 call    ecx
.text:00000543                 cmp     esi, esp
.text:00000545                 call    __RTC_CheckEsp
.text:0000054A                 mov     [ebp+var_14], eax
.text:0000054D                 cmp     [ebp+var_14], 0
.text:00000551                 jz      short loc_558
.text:00000553                 jmp     loc_875
.text:00000558 ; ---------------------------------------------------------------------------
.text:00000558
.text:00000558 loc_558:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+C8j
.text:00000558                                         ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+111j
.text:00000558                 mov     edx, [ebp+this]
.text:0000055B                 mov     eax, [edx+80h]
.text:00000561                 mov     [ebp+var_18], eax
.text:00000564                 mov     ecx, [ebp+var_10]
.text:00000567                 sub     ecx, [ebp+var_18]
.text:0000056A                 mov     [ebp+var_1C], ecx
.text:0000056D                 mov     [ebp+var_20], 0
.text:00000574                 mov     edx, [ebp+this]
.text:00000577                 movzx   eax, byte ptr [edx+35h]
.text:0000057B                 test    eax, eax
.text:0000057D                 jz      short loc_5CC
.text:0000057F                 mov     ecx, [ebp+this]
.text:00000582                 mov     edx, [ebp+this]
.text:00000585                 mov     eax, [ecx+38h]
.text:00000588                 sub     eax, [edx+48h]
.text:0000058B                 mov     ecx, [ecx+3Ch]
.text:0000058E                 sbb     ecx, [edx+4Ch]
.text:00000591                 mov     [ebp+var_28], eax
.text:00000594                 mov     [ebp+var_24], ecx
.text:00000597                 mov     edx, [ebp+var_1C]
.text:0000059A                 xor     eax, eax
.text:0000059C                 mov     [ebp+var_68], edx
.text:0000059F                 mov     [ebp+var_64], eax
.text:000005A2                 mov     ecx, [ebp+var_64]
.text:000005A5                 cmp     ecx, [ebp+var_24]
.text:000005A8                 jb      short loc_5CC
.text:000005AA                 ja      short loc_5B4
.text:000005AC                 mov     edx, [ebp+var_68]
.text:000005AF                 cmp     edx, [ebp+var_28]
.text:000005B2                 jb      short loc_5CC
.text:000005B4
.text:000005B4 loc_5B4:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+16Aj
.text:000005B4                 mov     eax, [ebp+var_28]
.text:000005B7                 mov     [ebp+var_1C], eax
.text:000005BA                 mov     ecx, [ebp+this]
.text:000005BD                 movzx   edx, byte ptr [ecx+34h]
.text:000005C1                 test    edx, edx
.text:000005C3                 jz      short loc_5CC
.text:000005C5                 mov     [ebp+var_20], 1
.text:000005CC
.text:000005CC loc_5CC:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+13Dj
.text:000005CC                                         ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+168j ...
.text:000005CC                 mov     eax, [ebp+this]
.text:000005CF                 mov     ecx, [ebp+this]
.text:000005D2                 mov     edx, [eax+30h]
.text:000005D5                 sub     edx, [ecx+2Ch]
.text:000005D8                 mov     [ebp+var_30], edx
.text:000005DB                 lea     eax, [ebp+var_3C]
.text:000005DE                 push    eax
.text:000005DF                 mov     ecx, [ebp+var_20]
.text:000005E2                 push    ecx
.text:000005E3                 lea     edx, [ebp+var_30]
.text:000005E6                 push    edx
.text:000005E7                 mov     eax, [ebp+this]
.text:000005EA                 mov     ecx, [eax+28h]
.text:000005ED                 mov     edx, [ebp+this]
.text:000005F0                 add     ecx, [edx+2Ch]
.text:000005F3                 push    ecx
.text:000005F4                 mov     eax, [ebp+var_18]
.text:000005F7                 add     eax, [ebp+var_1C]
.text:000005FA                 push    eax
.text:000005FB                 mov     ecx, [ebp+this]
.text:000005FE                 add     ecx, 5Ch ; '\'
.text:00000601                 push    ecx
.text:00000602                 call    _Lzma2Dec_DecodeToDic@24 ; Lzma2Dec_DecodeToDic(x,x,x,x,x,x)
.text:00000607                 mov     [ebp+var_44], eax
.text:0000060A                 mov     edx, [ebp+this]
.text:0000060D                 mov     eax, [edx+2Ch]
.text:00000610                 add     eax, [ebp+var_30]
.text:00000613                 mov     ecx, [ebp+this]
.text:00000616                 mov     [ecx+2Ch], eax
.text:00000619                 mov     edx, [ebp+var_30]
.text:0000061C                 xor     eax, eax
.text:0000061E                 mov     ecx, [ebp+this]
.text:00000621                 add     edx, [ecx+40h]
.text:00000624                 adc     eax, [ecx+44h]
.text:00000627                 mov     ecx, [ebp+this]
.text:0000062A                 mov     [ecx+40h], edx
.text:0000062D                 mov     [ecx+44h], eax
.text:00000630                 mov     edx, [ebp+this]
.text:00000633                 mov     eax, [edx+80h]
.text:00000639                 sub     eax, [ebp+var_18]
.text:0000063C                 mov     [ebp+var_48], eax
.text:0000063F                 mov     ecx, [ebp+var_48]
.text:00000642                 xor     edx, edx
.text:00000644                 mov     eax, [ebp+this]
.text:00000647                 add     ecx, [eax+48h]
.text:0000064A                 adc     edx, [eax+4Ch]
.text:0000064D                 mov     eax, [ebp+this]
.text:00000650                 mov     [eax+48h], ecx
.text:00000653                 mov     [eax+4Ch], edx
.text:00000656                 cmp     [ebp+var_30], 0
.text:0000065A                 jnz     short loc_662
.text:0000065C                 cmp     [ebp+var_48], 0
.text:00000660                 jz      short loc_671
.text:00000662
.text:00000662 loc_662:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+21Aj
.text:00000662                 cmp     [ebp+var_3C], 1
.text:00000666                 jz      short loc_671
.text:00000668                 mov     [ebp+var_6C], 0
.text:0000066F                 jmp     short loc_678
.text:00000671 ; ---------------------------------------------------------------------------
.text:00000671
.text:00000671 loc_671:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+220j
.text:00000671                                         ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+226j
.text:00000671                 mov     [ebp+var_6C], 1
.text:00000678
.text:00000678 loc_678:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+22Fj
.text:00000678                 mov     cl, byte ptr [ebp+var_6C]
.text:0000067B                 mov     [ebp+var_49], cl
.text:0000067E                 mov     edx, [ebp+this]
.text:00000681                 movzx   eax, byte ptr [edx+35h]
.text:00000685                 test    eax, eax
.text:00000687                 jz      short loc_6BC
.text:00000689                 mov     ecx, [ebp+this]
.text:0000068C                 mov     edx, [ebp+this]
.text:0000068F                 mov     [ebp+var_70], ecx
.text:00000692                 mov     [ebp+var_74], edx
.text:00000695                 mov     eax, [ebp+var_70]
.text:00000698                 mov     ecx, [ebp+var_74]
.text:0000069B                 mov     edx, [eax+4Ch]
.text:0000069E                 cmp     edx, [ecx+3Ch]
.text:000006A1                 jb      short loc_6BC
.text:000006A3                 ja      short loc_6B3
.text:000006A5                 mov     eax, [ebp+var_70]
.text:000006A8                 mov     ecx, [ebp+var_74]
.text:000006AB                 mov     edx, [eax+48h]
.text:000006AE                 cmp     edx, [ecx+38h]
.text:000006B1                 jb      short loc_6BC
.text:000006B3
.text:000006B3 loc_6B3:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+263j
.text:000006B3                 mov     [ebp+var_78], 1
.text:000006BA                 jmp     short loc_6C3
.text:000006BC ; ---------------------------------------------------------------------------
.text:000006BC
.text:000006BC loc_6BC:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+247j
.text:000006BC                                         ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+261j ...
.text:000006BC                 mov     [ebp+var_78], 0
.text:000006C3
.text:000006C3 loc_6C3:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+27Aj
.text:000006C3                 mov     al, byte ptr [ebp+var_78]
.text:000006C6                 mov     [ebp+var_4A], al
.text:000006C9                 cmp     [ebp+var_44], 0
.text:000006CD                 jnz     short loc_6F1
.text:000006CF                 mov     ecx, [ebp+this]
.text:000006D2                 mov     edx, [ecx+80h]
.text:000006D8                 cmp     edx, [ebp+var_10]
.text:000006DB                 jnb     short loc_6F1
.text:000006DD                 movzx   eax, [ebp+var_49]
.text:000006E1                 test    eax, eax
.text:000006E3                 jnz     short loc_6F1
.text:000006E5                 movzx   ecx, [ebp+var_4A]
.text:000006E9                 test    ecx, ecx
.text:000006EB                 jz      loc_837
.text:000006F1
.text:000006F1 loc_6F1:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+28Dj
.text:000006F1                                         ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+29Bj ...
.text:000006F1                 mov     edx, [ebp+this]
.text:000006F4                 mov     eax, [edx+80h]
.text:000006FA                 sub     eax, [ebp+var_C]
.text:000006FD                 push    eax             ; unsigned int
.text:000006FE                 mov     ecx, [ebp+this]
.text:00000701                 mov     edx, [ecx+70h]
.text:00000704                 add     edx, [ebp+var_C]
.text:00000707                 push    edx             ; void *
.text:00000708                 mov     eax, [ebp+arg_8]
.text:0000070B                 push    eax             ; struct ISequentialOutStream *
.text:0000070C                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00000711                 mov     [ebp+var_50], eax
.text:00000714                 mov     ecx, [ebp+this]
.text:00000717                 mov     edx, [ebp+this]
.text:0000071A                 mov     eax, [ecx+80h]
.text:00000720                 cmp     eax, [edx+84h]
.text:00000726                 jnz     short loc_735
.text:00000728                 mov     ecx, [ebp+this]
.text:0000072B                 mov     dword ptr [ecx+80h], 0
.text:00000735
.text:00000735 loc_735:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2E6j
.text:00000735                 mov     edx, [ebp+this]
.text:00000738                 mov     eax, [edx+80h]
.text:0000073E                 mov     [ebp+var_C], eax
.text:00000741                 mov     ecx, [ebp+this]
.text:00000744                 mov     edx, [ebp+this]
.text:00000747                 mov     eax, [ecx+84h]
.text:0000074D                 sub     eax, [edx+80h]
.text:00000753                 cmp     eax, [ebp+var_4]
.text:00000756                 jnb     short loc_766
.text:00000758                 mov     ecx, [ebp+this]
.text:0000075B                 mov     edx, [ecx+84h]
.text:00000761                 mov     [ebp+var_7C], edx
.text:00000764                 jmp     short loc_775
.text:00000766 ; ---------------------------------------------------------------------------
.text:00000766
.text:00000766 loc_766:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+316j
.text:00000766                 mov     eax, [ebp+this]
.text:00000769                 mov     ecx, [eax+80h]
.text:0000076F                 add     ecx, [ebp+var_4]
.text:00000772                 mov     [ebp+var_7C], ecx
.text:00000775
.text:00000775 loc_775:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+324j
.text:00000775                 mov     edx, [ebp+var_7C]
.text:00000778                 mov     [ebp+var_10], edx
.text:0000077B                 cmp     [ebp+var_44], 0
.text:0000077F                 jz      short loc_78B
.text:00000781                 mov     eax, 1
.text:00000786                 jmp     loc_8A6
.text:0000078B ; ---------------------------------------------------------------------------
.text:0000078B
.text:0000078B loc_78B:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+33Fj
.text:0000078B                 mov     eax, [ebp+var_50]
.text:0000078E                 mov     [ebp+var_54], eax
.text:00000791                 cmp     [ebp+var_54], 0
.text:00000795                 jz      short loc_79F
.text:00000797                 mov     eax, [ebp+var_54]
.text:0000079A                 jmp     loc_8A6
.text:0000079F ; ---------------------------------------------------------------------------
.text:0000079F
.text:0000079F loc_79F:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+355j
.text:0000079F                 movzx   ecx, [ebp+var_49]
.text:000007A3                 test    ecx, ecx
.text:000007A5                 jz      short loc_825
.text:000007A7                 cmp     [ebp+var_3C], 1
.text:000007AB                 jnz     short loc_817
.text:000007AD                 mov     edx, [ebp+this]
.text:000007B0                 movzx   eax, byte ptr [edx+34h]
.text:000007B4                 test    eax, eax
.text:000007B6                 jz      short loc_7F8
.text:000007B8                 cmp     [ebp+arg_C], 0
.text:000007BC                 jz      short loc_7F8
.text:000007BE                 mov     ecx, [ebp+arg_C]
.text:000007C1                 mov     edx, [ebp+this]
.text:000007C4                 mov     [ebp+var_80], ecx
.text:000007C7                 mov     [ebp+var_84], edx
.text:000007CD                 mov     eax, [ebp+var_80]
.text:000007D0                 mov     ecx, [ebp+var_84]
.text:000007D6                 mov     edx, [eax]
.text:000007D8                 cmp     edx, [ecx+40h]
.text:000007DB                 jnz     short loc_7EE
.text:000007DD                 mov     eax, [ebp+var_80]
.text:000007E0                 mov     ecx, [ebp+var_84]
.text:000007E6                 mov     edx, [eax+4]
.text:000007E9                 cmp     edx, [ecx+44h]
.text:000007EC                 jz      short loc_7F8
.text:000007EE
.text:000007EE loc_7EE:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+39Bj
.text:000007EE                 mov     eax, 1
.text:000007F3                 jmp     loc_8A6
.text:000007F8 ; ---------------------------------------------------------------------------
.text:000007F8
.text:000007F8 loc_7F8:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+376j
.text:000007F8                                         ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+37Cj ...
.text:000007F8                 cmp     [ebp+var_20], 1
.text:000007FC                 jnz     short loc_810
.text:000007FE                 movzx   eax, [ebp+var_4A]
.text:00000802                 test    eax, eax
.text:00000804                 jnz     short loc_810
.text:00000806                 mov     eax, 1
.text:0000080B                 jmp     loc_8A6
.text:00000810 ; ---------------------------------------------------------------------------
.text:00000810
.text:00000810 loc_810:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3BCj
.text:00000810                                         ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3C4j
.text:00000810                 xor     eax, eax
.text:00000812                 jmp     loc_8A6
.text:00000817 ; ---------------------------------------------------------------------------
.text:00000817
.text:00000817 loc_817:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+36Bj
.text:00000817                 xor     eax, eax
.text:00000819                 cmp     [ebp+var_20], 1
.text:0000081D                 setz    al
.text:00000820                 jmp     loc_8A6
.text:00000825 ; ---------------------------------------------------------------------------
.text:00000825
.text:00000825 loc_825:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+365j
.text:00000825                 movzx   ecx, [ebp+var_4A]
.text:00000829                 test    ecx, ecx
.text:0000082B                 jz      short loc_837
.text:0000082D                 cmp     [ebp+var_20], 0
.text:00000831                 jnz     short loc_837
.text:00000833                 xor     eax, eax
.text:00000835                 jmp     short loc_8A6
.text:00000837 ; ---------------------------------------------------------------------------
.text:00000837
.text:00000837 loc_837:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2ABj
.text:00000837                                         ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3EBj ...
.text:00000837                 cmp     [ebp+arg_14], 0
.text:0000083B                 jz      short loc_870
.text:0000083D                 mov     edx, [ebp+this]
.text:00000840                 add     edx, 48h ; 'H'
.text:00000843                 mov     esi, esp
.text:00000845                 push    edx
.text:00000846                 mov     eax, [ebp+this]
.text:00000849                 add     eax, 40h ; '@'
.text:0000084C                 push    eax
.text:0000084D                 mov     ecx, [ebp+arg_14]
.text:00000850                 mov     edx, [ecx]
.text:00000852                 mov     eax, [ebp+arg_14]
.text:00000855                 push    eax
.text:00000856                 mov     ecx, [edx+0Ch]
.text:00000859                 call    ecx
.text:0000085B                 cmp     esi, esp
.text:0000085D                 call    __RTC_CheckEsp
.text:00000862                 mov     [ebp+var_58], eax
.text:00000865                 cmp     [ebp+var_58], 0
.text:00000869                 jz      short loc_870
.text:0000086B                 mov     eax, [ebp+var_58]
.text:0000086E                 jmp     short loc_8A6
.text:00000870 ; ---------------------------------------------------------------------------
.text:00000870
.text:00000870 loc_870:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3FBj
.text:00000870                                         ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+429j
.text:00000870                 jmp     loc_4FC
.text:00000875 ; ---------------------------------------------------------------------------
.text:00000875
.text:00000875 loc_875:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+113j
.text:00000875                 mov     edx, [ebp+this]
.text:00000878                 mov     eax, [edx+80h]
.text:0000087E                 sub     eax, [ebp+var_C]
.text:00000881                 push    eax             ; unsigned int
.text:00000882                 mov     ecx, [ebp+this]
.text:00000885                 mov     edx, [ecx+70h]
.text:00000888                 add     edx, [ebp+var_C]
.text:0000088B                 push    edx             ; void *
.text:0000088C                 mov     eax, [ebp+arg_8]
.text:0000088F                 push    eax             ; struct ISequentialOutStream *
.text:00000890                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00000895                 mov     [ebp+var_5C], eax
.text:00000898                 cmp     [ebp+var_14], 0
.text:0000089C                 jz      short loc_8A3
.text:0000089E                 mov     eax, [ebp+var_14]
.text:000008A1                 jmp     short loc_8A6
.text:000008A3 ; ---------------------------------------------------------------------------
.text:000008A3
.text:000008A3 loc_8A3:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+45Cj
.text:000008A3                 mov     eax, [ebp+var_5C]
.text:000008A6
.text:000008A6 loc_8A6:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2Bj
.text:000008A6                                         ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+346j ...
.text:000008A6                 push    edx
.text:000008A7                 mov     ecx, ebp
.text:000008A9                 push    eax
.text:000008AA                 lea     edx, $LN40
.text:000008B0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008B5                 pop     eax
.text:000008B6                 pop     edx
.text:000008B7                 pop     edi
.text:000008B8                 pop     esi
.text:000008B9                 add     esp, 84h
.text:000008BF                 cmp     ebp, esp
.text:000008C1                 call    __RTC_CheckEsp
.text:000008C6                 mov     esp, ebp
.text:000008C8                 pop     ebp
.text:000008C9                 retn    18h
.text:000008C9 ?Code@CDecoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:000008C9
.text:000008C9 ; ---------------------------------------------------------------------------
.text:000008CC $LN40           dd 2                    ; DATA XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+46Ao
.text:000008D0                 dd offset $LN39
.text:000008D4 $LN39           dd 0FFFFFFD0h, 4        ; DATA XREF: .text:000008D0o
.text:000008DC                 dd offset $LN37         ; "inSizeProcessed"
.text:000008E0                 dd 0FFFFFFC4h, 4
.text:000008E8                 dd offset $LN38         ; "status"
.text:000008EC $LN38           db 'status',0           ; DATA XREF: .text:000008E8o
.text:000008F3 $LN37           db 'inSizeProcessed',0  ; DATA XREF: .text:000008DCo
.text:00000903                 align 10h
.text:00000910
.text:00000910 ; =============== S U B R O U T I N E =======================================
.text:00000910
.text:00000910 ; Attributes: bp-based frame
.text:00000910
.text:00000910 ; __int32 __stdcall NCompress::NLzma2::CDecoder::Read(NCompress::NLzma2::CDecoder *this, void *, unsigned int, unsigned int *)
.text:00000910                 public ?Read@CDecoder@NLzma2@NCompress@@UAGJPAXIPAI@Z
.text:00000910 ?Read@CDecoder@NLzma2@NCompress@@UAGJPAXIPAI@Z proc near
.text:00000910                                         ; DATA XREF: .rdata:00000BA8o
.text:00000910
.text:00000910 var_50          = dword ptr -50h
.text:00000910 var_4C          = dword ptr -4Ch
.text:00000910 var_48          = dword ptr -48h
.text:00000910 var_44          = dword ptr -44h
.text:00000910 var_40          = dword ptr -40h
.text:00000910 var_3C          = dword ptr -3Ch
.text:00000910 var_34          = dword ptr -34h
.text:00000910 var_28          = dword ptr -28h
.text:00000910 var_1C          = dword ptr -1Ch
.text:00000910 var_14          = dword ptr -14h
.text:00000910 var_10          = dword ptr -10h
.text:00000910 var_C           = dword ptr -0Ch
.text:00000910 var_8           = dword ptr -8
.text:00000910 var_4           = dword ptr -4
.text:00000910 this            = dword ptr  8
.text:00000910 arg_4           = dword ptr  0Ch
.text:00000910 arg_8           = dword ptr  10h
.text:00000910 arg_C           = dword ptr  14h
.text:00000910
.text:00000910                 push    ebp
.text:00000911                 mov     ebp, esp
.text:00000913                 sub     esp, 50h
.text:00000916                 push    esi
.text:00000917                 push    edi
.text:00000918                 lea     edi, [ebp+var_50]
.text:0000091B                 mov     ecx, 14h
.text:00000920                 mov     eax, 0CCCCCCCCh
.text:00000925                 rep stosd
.text:00000927                 mov     [ebp+var_4], 0
.text:0000092E                 cmp     [ebp+arg_C], 0
.text:00000932                 jz      short loc_93D
.text:00000934                 mov     eax, [ebp+arg_C]
.text:00000937                 mov     dword ptr [eax], 0
.text:0000093D
.text:0000093D loc_93D:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+22j
.text:0000093D                                         ; NCompress::NLzma2::CDecoder::Read(void *,uint,uint *):loc_B21j
.text:0000093D                 mov     ecx, [ebp+this]
.text:00000940                 mov     edx, [ebp+this]
.text:00000943                 mov     eax, [ecx+10h]
.text:00000946                 cmp     eax, [edx+14h]
.text:00000949                 jnz     short loc_9AA
.text:0000094B                 mov     ecx, [ebp+this]
.text:0000094E                 mov     dword ptr [ecx+14h], 0
.text:00000955                 mov     edx, [ebp+this]
.text:00000958                 mov     dword ptr [edx+10h], 0
.text:0000095F                 mov     ecx, [ebp+this]
.text:00000962                 add     ecx, 8
.text:00000965                 call    ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->(void)
.text:0000096A                 mov     [ebp+var_40], eax
.text:0000096D                 mov     eax, [ebp+this]
.text:00000970                 add     eax, 14h
.text:00000973                 mov     esi, esp
.text:00000975                 push    eax
.text:00000976                 mov     ecx, [ebp+this]
.text:00000979                 mov     edx, [ecx+34h]
.text:0000097C                 push    edx
.text:0000097D                 mov     eax, [ebp+this]
.text:00000980                 mov     ecx, [eax+0Ch]
.text:00000983                 push    ecx
.text:00000984                 mov     edx, [ebp+var_40]
.text:00000987                 push    edx
.text:00000988                 mov     eax, [ebp+var_40]
.text:0000098B                 mov     ecx, [eax]
.text:0000098D                 mov     edx, [ecx+0Ch]
.text:00000990                 call    edx
.text:00000992                 cmp     esi, esp
.text:00000994                 call    __RTC_CheckEsp
.text:00000999                 mov     [ebp+var_8], eax
.text:0000099C                 cmp     [ebp+var_8], 0
.text:000009A0                 jz      short loc_9AA
.text:000009A2                 mov     eax, [ebp+var_8]
.text:000009A5                 jmp     loc_B26
.text:000009AA ; ---------------------------------------------------------------------------
.text:000009AA
.text:000009AA loc_9AA:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+39j
.text:000009AA                                         ; NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+90j
.text:000009AA                 mov     [ebp+var_C], 0
.text:000009B1                 mov     eax, [ebp+this]
.text:000009B4                 movzx   ecx, byte ptr [eax+19h]
.text:000009B8                 test    ecx, ecx
.text:000009BA                 jz      short loc_A09
.text:000009BC                 mov     edx, [ebp+this]
.text:000009BF                 mov     eax, [ebp+this]
.text:000009C2                 mov     ecx, [edx+1Ch]
.text:000009C5                 sub     ecx, [eax+2Ch]
.text:000009C8                 mov     edx, [edx+20h]
.text:000009CB                 sbb     edx, [eax+30h]
.text:000009CE                 mov     [ebp+var_14], ecx
.text:000009D1                 mov     [ebp+var_10], edx
.text:000009D4                 mov     eax, [ebp+arg_8]
.text:000009D7                 xor     ecx, ecx
.text:000009D9                 mov     [ebp+var_48], eax
.text:000009DC                 mov     [ebp+var_44], ecx
.text:000009DF                 mov     edx, [ebp+var_10]
.text:000009E2                 cmp     edx, [ebp+var_44]
.text:000009E5                 ja      short loc_A09
.text:000009E7                 jb      short loc_9F1
.text:000009E9                 mov     eax, [ebp+var_14]
.text:000009EC                 cmp     eax, [ebp+var_48]
.text:000009EF                 ja      short loc_A09
.text:000009F1
.text:000009F1 loc_9F1:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+D7j
.text:000009F1                 mov     ecx, [ebp+var_14]
.text:000009F4                 mov     [ebp+arg_8], ecx
.text:000009F7                 mov     edx, [ebp+this]
.text:000009FA                 movzx   eax, byte ptr [edx+18h]
.text:000009FE                 test    eax, eax
.text:00000A00                 jz      short loc_A09
.text:00000A02                 mov     [ebp+var_C], 1
.text:00000A09
.text:00000A09 loc_A09:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+AAj
.text:00000A09                                         ; NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+D5j ...
.text:00000A09                 mov     ecx, [ebp+arg_8]
.text:00000A0C                 mov     [ebp+var_1C], ecx
.text:00000A0F                 mov     edx, [ebp+this]
.text:00000A12                 mov     eax, [ebp+this]
.text:00000A15                 mov     ecx, [edx+14h]
.text:00000A18                 sub     ecx, [eax+10h]
.text:00000A1B                 mov     [ebp+var_28], ecx
.text:00000A1E                 lea     edx, [ebp+var_34]
.text:00000A21                 push    edx
.text:00000A22                 mov     eax, [ebp+var_C]
.text:00000A25                 push    eax
.text:00000A26                 lea     ecx, [ebp+var_28]
.text:00000A29                 push    ecx
.text:00000A2A                 mov     edx, [ebp+this]
.text:00000A2D                 mov     eax, [edx+0Ch]
.text:00000A30                 mov     ecx, [ebp+this]
.text:00000A33                 add     eax, [ecx+10h]
.text:00000A36                 push    eax
.text:00000A37                 lea     edx, [ebp+var_1C]
.text:00000A3A                 push    edx
.text:00000A3B                 mov     eax, [ebp+arg_4]
.text:00000A3E                 push    eax
.text:00000A3F                 mov     ecx, [ebp+this]
.text:00000A42                 add     ecx, 40h ; '@'
.text:00000A45                 push    ecx
.text:00000A46                 call    _Lzma2Dec_DecodeToBuf@28 ; Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)
.text:00000A4B                 mov     [ebp+var_3C], eax
.text:00000A4E                 mov     edx, [ebp+this]
.text:00000A51                 mov     eax, [edx+10h]
.text:00000A54                 add     eax, [ebp+var_28]
.text:00000A57                 mov     ecx, [ebp+this]
.text:00000A5A                 mov     [ecx+10h], eax
.text:00000A5D                 mov     edx, [ebp+var_28]
.text:00000A60                 xor     eax, eax
.text:00000A62                 mov     ecx, [ebp+this]
.text:00000A65                 add     edx, [ecx+24h]
.text:00000A68                 adc     eax, [ecx+28h]
.text:00000A6B                 mov     ecx, [ebp+this]
.text:00000A6E                 mov     [ecx+24h], edx
.text:00000A71                 mov     [ecx+28h], eax
.text:00000A74                 mov     edx, [ebp+var_1C]
.text:00000A77                 xor     eax, eax
.text:00000A79                 mov     ecx, [ebp+this]
.text:00000A7C                 add     edx, [ecx+2Ch]
.text:00000A7F                 adc     eax, [ecx+30h]
.text:00000A82                 mov     ecx, [ebp+this]
.text:00000A85                 mov     [ecx+2Ch], edx
.text:00000A88                 mov     [ecx+30h], eax
.text:00000A8B                 mov     edx, [ebp+arg_8]
.text:00000A8E                 sub     edx, [ebp+var_1C]
.text:00000A91                 mov     [ebp+arg_8], edx
.text:00000A94                 mov     eax, [ebp+arg_4]
.text:00000A97                 add     eax, [ebp+var_1C]
.text:00000A9A                 mov     [ebp+arg_4], eax
.text:00000A9D                 mov     ecx, [ebp+var_4]
.text:00000AA0                 add     ecx, [ebp+var_1C]
.text:00000AA3                 mov     [ebp+var_4], ecx
.text:00000AA6                 cmp     [ebp+arg_C], 0
.text:00000AAA                 jz      short loc_AB4
.text:00000AAC                 mov     edx, [ebp+arg_C]
.text:00000AAF                 mov     eax, [ebp+var_4]
.text:00000AB2                 mov     [edx], eax
.text:00000AB4
.text:00000AB4 loc_AB4:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+19Aj
.text:00000AB4                 cmp     [ebp+var_3C], 0
.text:00000AB8                 jz      short loc_ACF
.text:00000ABA                 cmp     [ebp+var_4], 0
.text:00000ABE                 jz      short loc_AC4
.text:00000AC0                 xor     eax, eax
.text:00000AC2                 jmp     short loc_B26
.text:00000AC4 ; ---------------------------------------------------------------------------
.text:00000AC4
.text:00000AC4 loc_AC4:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+1AEj
.text:00000AC4                 mov     ecx, [ebp+var_3C]
.text:00000AC7                 push    ecx
.text:00000AC8                 call    ?SResToHRESULT@@YGJH@Z ; SResToHRESULT(int)
.text:00000ACD                 jmp     short loc_B26
.text:00000ACF ; ---------------------------------------------------------------------------
.text:00000ACF
.text:00000ACF loc_ACF:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+1A8j
.text:00000ACF                 cmp     [ebp+var_28], 0
.text:00000AD3                 jnz     short loc_ADF
.text:00000AD5                 cmp     [ebp+var_1C], 0
.text:00000AD9                 jnz     short loc_ADF
.text:00000ADB                 xor     eax, eax
.text:00000ADD                 jmp     short loc_B26
.text:00000ADF ; ---------------------------------------------------------------------------
.text:00000ADF
.text:00000ADF loc_ADF:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+1C3j
.text:00000ADF                                         ; NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+1C9j
.text:00000ADF                 cmp     [ebp+var_34], 1
.text:00000AE3                 jnz     short loc_AE9
.text:00000AE5                 xor     eax, eax
.text:00000AE7                 jmp     short loc_B26
.text:00000AE9 ; ---------------------------------------------------------------------------
.text:00000AE9
.text:00000AE9 loc_AE9:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+1D3j
.text:00000AE9                 cmp     [ebp+var_1C], 0
.text:00000AED                 jz      short loc_B21
.text:00000AEF                 cmp     [ebp+var_C], 1
.text:00000AF3                 jnz     short loc_B1D
.text:00000AF5                 mov     edx, [ebp+this]
.text:00000AF8                 mov     eax, [ebp+this]
.text:00000AFB                 mov     [ebp+var_4C], edx
.text:00000AFE                 mov     [ebp+var_50], eax
.text:00000B01                 mov     ecx, [ebp+var_4C]
.text:00000B04                 mov     edx, [ebp+var_50]
.text:00000B07                 mov     eax, [ecx+1Ch]
.text:00000B0A                 cmp     eax, [edx+2Ch]
.text:00000B0D                 jnz     short loc_B1D
.text:00000B0F                 mov     ecx, [ebp+var_4C]
.text:00000B12                 mov     edx, [ebp+var_50]
.text:00000B15                 mov     eax, [ecx+20h]
.text:00000B18                 cmp     eax, [edx+30h]
.text:00000B1B                 jz      short loc_B21
.text:00000B1D
.text:00000B1D loc_B1D:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+1E3j
.text:00000B1D                                         ; NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+1FDj
.text:00000B1D                 xor     eax, eax
.text:00000B1F                 jmp     short loc_B26
.text:00000B21 ; ---------------------------------------------------------------------------
.text:00000B21
.text:00000B21 loc_B21:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+1DDj
.text:00000B21                                         ; NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+20Bj
.text:00000B21                 jmp     loc_93D
.text:00000B26 ; ---------------------------------------------------------------------------
.text:00000B26
.text:00000B26 loc_B26:                                ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+95j
.text:00000B26                                         ; NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+1B2j ...
.text:00000B26                 push    edx
.text:00000B27                 mov     ecx, ebp
.text:00000B29                 push    eax
.text:00000B2A                 lea     edx, $LN25
.text:00000B30                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000B35                 pop     eax
.text:00000B36                 pop     edx
.text:00000B37                 pop     edi
.text:00000B38                 pop     esi
.text:00000B39                 add     esp, 50h
.text:00000B3C                 cmp     ebp, esp
.text:00000B3E                 call    __RTC_CheckEsp
.text:00000B43                 mov     esp, ebp
.text:00000B45                 pop     ebp
.text:00000B46                 retn    10h
.text:00000B46 ?Read@CDecoder@NLzma2@NCompress@@UAGJPAXIPAI@Z endp
.text:00000B46
.text:00000B46 ; ---------------------------------------------------------------------------
.text:00000B49                 align 4
.text:00000B4C $LN25           dd 3                    ; DATA XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+21Ao
.text:00000B50                 dd offset $LN24
.text:00000B54 $LN24           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00000B50o
.text:00000B5C                 dd offset $LN21         ; "outProcessed"
.text:00000B60                 dd 0FFFFFFD8h, 4
.text:00000B68                 dd offset $LN22         ; "inProcessed"
.text:00000B6C                 db 0CCh
.text:00000B6D                 db 3 dup(0FFh)
.text:00000B70                 dd 4
.text:00000B74                 dd offset $LN23         ; "status"
.text:00000B78 $LN23           db 'status',0           ; DATA XREF: .text:00000B74o
.text:00000B7F $LN22           db 'inProcessed',0      ; DATA XREF: .text:00000B68o
.text:00000B8B $LN21           db 'outProcessed',0     ; DATA XREF: .text:00000B5Co
.text:00000B8B _text           ends
.text:00000B8B
.rdata:00000B98 ; ===========================================================================
.rdata:00000B98
.rdata:00000B98 ; Segment type: Pure data
.rdata:00000B98 ; Segment permissions: Read
.rdata:00000B98 _rdata          segment dword public 'DATA' use32
.rdata:00000B98                 assume cs:_rdata
.rdata:00000B98                 ;org 0B98h
.rdata:00000B98 ; COMDAT (pick largest)
.rdata:00000B98                 dd offset ??_R4CDecoder@NLzma2@NCompress@@6BISequentialInStream@@@ ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00000B9C                 public ??_7CDecoder@NLzma2@NCompress@@6BISequentialInStream@@@
.rdata:00000B9C ; const NCompress::NLzma2::CDecoder::`vftable'{for `ISequentialInStream'}
.rdata:00000B9C ??_7CDecoder@NLzma2@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CDecoder@NLzma2@NCompress@@WBM@AGJABU_GUID@@PAPAX@Z
.rdata:00000B9C                                         ; DATA XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+B6o
.rdata:00000B9C                                         ; NCompress::NLzma2::CDecoder::~CDecoder(void)+56o
.rdata:00000B9C                                         ; [thunk]:NCompress::NLzma2::CDecoder::QueryInterface`adjustor{28}' (_GUID const &,void * *)
.rdata:00000BA0                 dd offset ?AddRef@CDecoder@NLzma2@NCompress@@WBM@AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::AddRef`adjustor{28}' (void)
.rdata:00000BA4                 dd offset ?Release@CDecoder@NLzma2@NCompress@@WBM@AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::Release`adjustor{28}' (void)
.rdata:00000BA8                 dd offset ?Read@CDecoder@NLzma2@NCompress@@UAGJPAXIPAI@Z ; NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)
.rdata:00000BA8 _rdata          ends
.rdata:00000BA8
.rdata:00000BAC ; ===========================================================================
.rdata:00000BAC
.rdata:00000BAC ; Segment type: Pure data
.rdata:00000BAC ; Segment permissions: Read
.rdata:00000BAC _rdata          segment dword public 'DATA' use32
.rdata:00000BAC                 assume cs:_rdata
.rdata:00000BAC                 ;org 0BACh
.rdata:00000BAC ; COMDAT (pick largest)
.rdata:00000BAC                 dd offset ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:00000BB0                 public ??_7CDecoder@NLzma2@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:00000BB0 ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:00000BB0 ??_7CDecoder@NLzma2@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CDecoder@NLzma2@NCompress@@WBI@AGJABU_GUID@@PAPAX@Z
.rdata:00000BB0                                         ; DATA XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+ACo
.rdata:00000BB0                                         ; NCompress::NLzma2::CDecoder::~CDecoder(void)+4Co
.rdata:00000BB0                                         ; [thunk]:NCompress::NLzma2::CDecoder::QueryInterface`adjustor{24}' (_GUID const &,void * *)
.rdata:00000BB4                 dd offset ?AddRef@CDecoder@NLzma2@NCompress@@WBI@AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::AddRef`adjustor{24}' (void)
.rdata:00000BB8                 dd offset ?Release@CDecoder@NLzma2@NCompress@@WBI@AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::Release`adjustor{24}' (void)
.rdata:00000BBC                 dd offset ?SetOutStreamSize@CDecoder@NLzma2@NCompress@@UAGJPB_K@Z ; NCompress::NLzma2::CDecoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:00000BBC _rdata          ends
.rdata:00000BBC
.rdata:00000BC0 ; ===========================================================================
.rdata:00000BC0
.rdata:00000BC0 ; Segment type: Pure data
.rdata:00000BC0 ; Segment permissions: Read
.rdata:00000BC0 _rdata          segment dword public 'DATA' use32
.rdata:00000BC0                 assume cs:_rdata
.rdata:00000BC0                 ;org 0BC0h
.rdata:00000BC0 ; COMDAT (pick largest)
.rdata:00000BC0                 dd offset ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00000BC4                 public ??_7CDecoder@NLzma2@NCompress@@6BICompressSetInStream@@@
.rdata:00000BC4 ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetInStream'}
.rdata:00000BC4 ??_7CDecoder@NLzma2@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CDecoder@NLzma2@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z
.rdata:00000BC4                                         ; DATA XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+A2o
.rdata:00000BC4                                         ; NCompress::NLzma2::CDecoder::~CDecoder(void)+42o
.rdata:00000BC4                                         ; [thunk]:NCompress::NLzma2::CDecoder::QueryInterface`adjustor{20}' (_GUID const &,void * *)
.rdata:00000BC8                 dd offset ?AddRef@CDecoder@NLzma2@NCompress@@WBE@AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::AddRef`adjustor{20}' (void)
.rdata:00000BCC                 dd offset ?Release@CDecoder@NLzma2@NCompress@@WBE@AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::Release`adjustor{20}' (void)
.rdata:00000BD0                 dd offset ?SetInStream@CDecoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NLzma2::CDecoder::SetInStream(ISequentialInStream *)
.rdata:00000BD4                 dd offset ?ReleaseInStream@CDecoder@NLzma2@NCompress@@UAGJXZ ; NCompress::NLzma2::CDecoder::ReleaseInStream(void)
.rdata:00000BD4 _rdata          ends
.rdata:00000BD4
.rdata:00000BD8 ; ===========================================================================
.rdata:00000BD8
.rdata:00000BD8 ; Segment type: Pure data
.rdata:00000BD8 ; Segment permissions: Read
.rdata:00000BD8 _rdata          segment dword public 'DATA' use32
.rdata:00000BD8                 assume cs:_rdata
.rdata:00000BD8                 ;org 0BD8h
.rdata:00000BD8 ; COMDAT (pick largest)
.rdata:00000BD8                 dd offset ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetBufSize@@@ ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetBufSize'}
.rdata:00000BDC                 public ??_7CDecoder@NLzma2@NCompress@@6BICompressSetBufSize@@@
.rdata:00000BDC ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetBufSize'}
.rdata:00000BDC ??_7CDecoder@NLzma2@NCompress@@6BICompressSetBufSize@@@ dd offset ?QueryInterface@CDecoder@NLzma2@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00000BDC                                         ; DATA XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+98o
.rdata:00000BDC                                         ; NCompress::NLzma2::CDecoder::~CDecoder(void)+38o
.rdata:00000BDC                                         ; [thunk]:NCompress::NLzma2::CDecoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00000BE0                 dd offset ?AddRef@CDecoder@NLzma2@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::AddRef`adjustor{16}' (void)
.rdata:00000BE4                 dd offset ?Release@CDecoder@NLzma2@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::Release`adjustor{16}' (void)
.rdata:00000BE8                 dd offset ?SetInBufSize@CDecoder@NLzma2@NCompress@@UAGJII@Z ; NCompress::NLzma2::CDecoder::SetInBufSize(uint,uint)
.rdata:00000BEC                 dd offset ?SetOutBufSize@CDecoder@NLzma2@NCompress@@UAGJII@Z ; NCompress::NLzma2::CDecoder::SetOutBufSize(uint,uint)
.rdata:00000BEC _rdata          ends
.rdata:00000BEC
.rdata:00000BF0 ; ===========================================================================
.rdata:00000BF0
.rdata:00000BF0 ; Segment type: Pure data
.rdata:00000BF0 ; Segment permissions: Read
.rdata:00000BF0 _rdata          segment dword public 'DATA' use32
.rdata:00000BF0                 assume cs:_rdata
.rdata:00000BF0                 ;org 0BF0h
.rdata:00000BF0 ; COMDAT (pick largest)
.rdata:00000BF0                 dd offset ??_R4CDecoder@NLzma2@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:00000BF4                 public ??_7CDecoder@NLzma2@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:00000BF4 ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:00000BF4 ??_7CDecoder@NLzma2@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CDecoder@NLzma2@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00000BF4                                         ; DATA XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+8Eo
.rdata:00000BF4                                         ; NCompress::NLzma2::CDecoder::~CDecoder(void)+2Eo
.rdata:00000BF4                                         ; [thunk]:NCompress::NLzma2::CDecoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00000BF8                 dd offset ?AddRef@CDecoder@NLzma2@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::AddRef`adjustor{12}' (void)
.rdata:00000BFC                 dd offset ?Release@CDecoder@NLzma2@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::Release`adjustor{12}' (void)
.rdata:00000C00                 dd offset ?GetInStreamProcessedSize@CDecoder@NLzma2@NCompress@@UAGJPA_K@Z ; NCompress::NLzma2::CDecoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:00000C00 _rdata          ends
.rdata:00000C00
.rdata:00000C04 ; ===========================================================================
.rdata:00000C04
.rdata:00000C04 ; Segment type: Pure data
.rdata:00000C04 ; Segment permissions: Read
.rdata:00000C04 _rdata          segment dword public 'DATA' use32
.rdata:00000C04                 assume cs:_rdata
.rdata:00000C04                 ;org 0C04h
.rdata:00000C04 ; COMDAT (pick largest)
.rdata:00000C04                 dd offset ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetFinishMode@@@ ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetFinishMode'}
.rdata:00000C08                 public ??_7CDecoder@NLzma2@NCompress@@6BICompressSetFinishMode@@@
.rdata:00000C08 ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetFinishMode'}
.rdata:00000C08 ??_7CDecoder@NLzma2@NCompress@@6BICompressSetFinishMode@@@ dd offset ?QueryInterface@CDecoder@NLzma2@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000C08                                         ; DATA XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+84o
.rdata:00000C08                                         ; NCompress::NLzma2::CDecoder::~CDecoder(void)+24o
.rdata:00000C08                                         ; [thunk]:NCompress::NLzma2::CDecoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000C0C                 dd offset ?AddRef@CDecoder@NLzma2@NCompress@@W7AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::AddRef`adjustor{8}' (void)
.rdata:00000C10                 dd offset ?Release@CDecoder@NLzma2@NCompress@@W7AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::Release`adjustor{8}' (void)
.rdata:00000C14                 dd offset ?SetFinishMode@CDecoder@NLzma2@NCompress@@UAGJI@Z ; NCompress::NLzma2::CDecoder::SetFinishMode(uint)
.rdata:00000C14 _rdata          ends
.rdata:00000C14
.rdata:00000C18 ; ===========================================================================
.rdata:00000C18
.rdata:00000C18 ; Segment type: Pure data
.rdata:00000C18 ; Segment permissions: Read
.rdata:00000C18 _rdata          segment dword public 'DATA' use32
.rdata:00000C18                 assume cs:_rdata
.rdata:00000C18                 ;org 0C18h
.rdata:00000C18 ; COMDAT (pick largest)
.rdata:00000C18                 dd offset ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata:00000C1C                 public ??_7CDecoder@NLzma2@NCompress@@6BICompressSetDecoderProperties2@@@
.rdata:00000C1C ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.rdata:00000C1C ??_7CDecoder@NLzma2@NCompress@@6BICompressSetDecoderProperties2@@@ dd offset ?QueryInterface@CDecoder@NLzma2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000C1C                                         ; DATA XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+7Ao
.rdata:00000C1C                                         ; NCompress::NLzma2::CDecoder::~CDecoder(void)+1Ao
.rdata:00000C1C                                         ; [thunk]:NCompress::NLzma2::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000C20                 dd offset ?AddRef@CDecoder@NLzma2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::AddRef`adjustor{4}' (void)
.rdata:00000C24                 dd offset ?Release@CDecoder@NLzma2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NLzma2::CDecoder::Release`adjustor{4}' (void)
.rdata:00000C28                 dd offset ?SetDecoderProperties2@CDecoder@NLzma2@NCompress@@UAGJPBEI@Z ; NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)
.rdata:00000C28 _rdata          ends
.rdata:00000C28
.rdata:00000C2C ; ===========================================================================
.rdata:00000C2C
.rdata:00000C2C ; Segment type: Pure data
.rdata:00000C2C ; Segment permissions: Read
.rdata:00000C2C _rdata          segment dword public 'DATA' use32
.rdata:00000C2C                 assume cs:_rdata
.rdata:00000C2C                 ;org 0C2Ch
.rdata:00000C2C ; COMDAT (pick largest)
.rdata:00000C2C                 dd offset ??_R4CDecoder@NLzma2@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00000C30                 public ??_7CDecoder@NLzma2@NCompress@@6BICompressCoder@@@
.rdata:00000C30 ; const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressCoder'}
.rdata:00000C30 ??_7CDecoder@NLzma2@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CDecoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000C30                                         ; DATA XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+71o
.rdata:00000C30                                         ; NCompress::NLzma2::CDecoder::~CDecoder(void)+11o
.rdata:00000C30                                         ; NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00000C34                 dd offset ?AddRef@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::AddRef(void)
.rdata:00000C38                 dd offset ?Release@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::Release(void)
.rdata:00000C3C                 dd offset ?Code@CDecoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000C40                 dd offset ??_ECDecoder@NLzma2@NCompress@@UAEPAXI@Z ; NCompress::NLzma2::CDecoder::`vector deleting destructor'(uint)
.rdata:00000C40 _rdata          ends
.rdata:00000C40
.rtc$TMZ:00000C44 ; ===========================================================================
.rtc$TMZ:00000C44
.rtc$TMZ:00000C44 ; Segment type: Pure data
.rtc$TMZ:00000C44 ; Segment permissions: Read
.rtc$TMZ:00000C44 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000C44                 assume cs:_rtc$TMZ
.rtc$TMZ:00000C44                 ;org 0C44h
.rtc$TMZ:00000C44 ; COMDAT (pick any)
.rtc$TMZ:00000C44 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000C44 _rtc$TMZ        ends
.rtc$TMZ:00000C44
.rtc$IMZ:00000C48 ; ===========================================================================
.rtc$IMZ:00000C48
.rtc$IMZ:00000C48 ; Segment type: Pure data
.rtc$IMZ:00000C48 ; Segment permissions: Read
.rtc$IMZ:00000C48 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000C48                 assume cs:_rtc$IMZ
.rtc$IMZ:00000C48                 ;org 0C48h
.rtc$IMZ:00000C48 ; COMDAT (pick any)
.rtc$IMZ:00000C48 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000C48 _rtc$IMZ        ends
.rtc$IMZ:00000C48
.rdata$r:00000C4C ; ===========================================================================
.rdata$r:00000C4C
.rdata$r:00000C4C ; Segment type: Pure data
.rdata$r:00000C4C ; Segment permissions: Read
.rdata$r:00000C4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C4C                 assume cs:_rdata$r
.rdata$r:00000C4C                 ;org 0C4Ch
.rdata$r:00000C4C ; COMDAT (pick any)
.rdata$r:00000C4C                 public ??_R4CDecoder@NLzma2@NCompress@@6BICompressCoder@@@
.rdata$r:00000C4C ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00000C4C ??_R4CDecoder@NLzma2@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00000C4C                                         ; DATA XREF: .rdata:00000C2Co
.rdata$r:00000C4D                 db    0
.rdata$r:00000C4E                 db    0
.rdata$r:00000C4F                 db    0
.rdata$r:00000C50                 db    0
.rdata$r:00000C51                 db    0
.rdata$r:00000C52                 db    0
.rdata$r:00000C53                 db    0
.rdata$r:00000C54                 db    0
.rdata$r:00000C55                 db    0
.rdata$r:00000C56                 db    0
.rdata$r:00000C57                 db    0
.rdata$r:00000C58                 dd offset ??_R0?AVCDecoder@NLzma2@NCompress@@@8 ; NCompress::NLzma2::CDecoder `RTTI Type Descriptor'
.rdata$r:00000C5C                 dd offset ??_R3CDecoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C5C _rdata$r        ends
.rdata$r:00000C5C
.data:00000C60 ; ===========================================================================
.data:00000C60
.data:00000C60 ; Segment type: Pure data
.data:00000C60 ; Segment permissions: Read/Write
.data:00000C60 _data           segment dword public 'DATA' use32
.data:00000C60                 assume cs:_data
.data:00000C60                 ;org 0C60h
.data:00000C60 ; COMDAT (pick any)
.data:00000C60                 public ??_R0?AVCDecoder@NLzma2@NCompress@@@8
.data:00000C60 ; class NCompress::NLzma2::CDecoder `RTTI Type Descriptor'
.data:00000C60 ??_R0?AVCDecoder@NLzma2@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000C60                                         ; DATA XREF: .rdata$r:00000C58o
.data:00000C60                                         ; .rdata$r:NCompress::NLzma2::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000C60                                         ; const type_info::`vftable'
.data:00000C64                 align 8
.data:00000C68 a_?avcdecoder@n db '.?AVCDecoder@NLzma2@NCompress@@',0
.data:00000C68 _data           ends
.data:00000C68
.rdata$r:00000C88 ; ===========================================================================
.rdata$r:00000C88
.rdata$r:00000C88 ; Segment type: Pure data
.rdata$r:00000C88 ; Segment permissions: Read
.rdata$r:00000C88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C88                 assume cs:_rdata$r
.rdata$r:00000C88                 ;org 0C88h
.rdata$r:00000C88 ; COMDAT (pick any)
.rdata$r:00000C88                 public ??_R3CDecoder@NLzma2@NCompress@@8
.rdata$r:00000C88 ; NCompress::NLzma2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C88 ??_R3CDecoder@NLzma2@NCompress@@8 db    0 ; DATA XREF: .rdata$r:00000C5Co
.rdata$r:00000C88                                         ; .rdata$r:00000CFCo ...
.rdata$r:00000C89                 db    0
.rdata$r:00000C8A                 db    0
.rdata$r:00000C8B                 db    0
.rdata$r:00000C8C                 db    5
.rdata$r:00000C8D                 db    0
.rdata$r:00000C8E                 db    0
.rdata$r:00000C8F                 db    0
.rdata$r:00000C90                 db  12h
.rdata$r:00000C91                 db    0
.rdata$r:00000C92                 db    0
.rdata$r:00000C93                 db    0
.rdata$r:00000C94                 dd offset ??_R2CDecoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CDecoder::`RTTI Base Class Array'
.rdata$r:00000C94 _rdata$r        ends
.rdata$r:00000C94
.rdata$r:00000C98 ; ===========================================================================
.rdata$r:00000C98
.rdata$r:00000C98 ; Segment type: Pure data
.rdata$r:00000C98 ; Segment permissions: Read
.rdata$r:00000C98 ; Segment alignment 'qword' can not be represented in assembly
.rdata$r:00000C98 _rdata$r        segment para public 'DATA' use32
.rdata$r:00000C98                 assume cs:_rdata$r
.rdata$r:00000C98                 ;org 0C98h
.rdata$r:00000C98 ; COMDAT (pick any)
.rdata$r:00000C98                 public ??_R2CDecoder@NLzma2@NCompress@@8
.rdata$r:00000C98 ; NCompress::NLzma2::CDecoder::`RTTI Base Class Array'
.rdata$r:00000C98 ??_R2CDecoder@NLzma2@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NLzma2@NCompress@@8
.rdata$r:00000C98                                         ; DATA XREF: .rdata$r:00000C94o
.rdata$r:00000C98                                         ; NCompress::NLzma2::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000C9C                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000CA0                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000CA4                 dd offset ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000CA8                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000CAC                 dd offset ??_R17?0A@EA@ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000CB0                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000CB4                 dd offset ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000CB8                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00000CBC                 dd offset ??_R1BA@?0A@EA@ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000CC0                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:00000CC4                 dd offset ??_R1BE@?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00000CC8                 dd offset ??_R1BE@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (20,-1,0,66)'
.rdata$r:00000CCC                 dd offset ??_R1BI@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (24,-1,0,64)'
.rdata$r:00000CD0                 dd offset ??_R1BI@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (24,-1,0,66)'
.rdata$r:00000CD4                 dd offset ??_R1BM@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (28,-1,0,64)'
.rdata$r:00000CD8                 dd offset ??_R1BM@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (28,-1,0,66)'
.rdata$r:00000CDC                 dd offset ??_R1CA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (32,-1,0,64)'
.rdata$r:00000CE0                 db    0
.rdata$r:00000CE1                 align 4
.rdata$r:00000CE1 _rdata$r        ends
.rdata$r:00000CE1
.rdata$r:00000CE4 ; ===========================================================================
.rdata$r:00000CE4
.rdata$r:00000CE4 ; Segment type: Pure data
.rdata$r:00000CE4 ; Segment permissions: Read
.rdata$r:00000CE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000CE4                 assume cs:_rdata$r
.rdata$r:00000CE4                 ;org 0CE4h
.rdata$r:00000CE4 ; COMDAT (pick any)
.rdata$r:00000CE4                 public ??_R1A@?0A@EA@CDecoder@NLzma2@NCompress@@8
.rdata$r:00000CE4 ; NCompress::NLzma2::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000CE4 ??_R1A@?0A@EA@CDecoder@NLzma2@NCompress@@8 dd offset ??_R0?AVCDecoder@NLzma2@NCompress@@@8
.rdata$r:00000CE4                                         ; DATA XREF: .rdata$r:NCompress::NLzma2::CDecoder::`RTTI Base Class Array'o
.rdata$r:00000CE4                                         ; NCompress::NLzma2::CDecoder `RTTI Type Descriptor'
.rdata$r:00000CE8                 db  11h
.rdata$r:00000CE9                 db    0
.rdata$r:00000CEA                 db    0
.rdata$r:00000CEB                 db    0
.rdata$r:00000CEC                 db    0
.rdata$r:00000CED                 db    0
.rdata$r:00000CEE                 db    0
.rdata$r:00000CEF                 db    0
.rdata$r:00000CF0                 db 0FFh
.rdata$r:00000CF1                 db 0FFh
.rdata$r:00000CF2                 db 0FFh
.rdata$r:00000CF3                 db 0FFh
.rdata$r:00000CF4                 db    0
.rdata$r:00000CF5                 db    0
.rdata$r:00000CF6                 db    0
.rdata$r:00000CF7                 db    0
.rdata$r:00000CF8                 db  40h ; @
.rdata$r:00000CF9                 db    0
.rdata$r:00000CFA                 db    0
.rdata$r:00000CFB                 db    0
.rdata$r:00000CFC                 dd offset ??_R3CDecoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000CFC _rdata$r        ends
.rdata$r:00000CFC
.rdata$r:00000D00 ; ===========================================================================
.rdata$r:00000D00
.rdata$r:00000D00 ; Segment type: Pure data
.rdata$r:00000D00 ; Segment permissions: Read
.rdata$r:00000D00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D00                 assume cs:_rdata$r
.rdata$r:00000D00                 ;org 0D00h
.rdata$r:00000D00 ; COMDAT (pick any)
.rdata$r:00000D00                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000D00 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000D00 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000D00                                         ; DATA XREF: .rdata$r:00000C9Co
.rdata$r:00000D00                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00000D00                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000D04                 db    1
.rdata$r:00000D05                 db    0
.rdata$r:00000D06                 db    0
.rdata$r:00000D07                 db    0
.rdata$r:00000D08                 db    0
.rdata$r:00000D09                 db    0
.rdata$r:00000D0A                 db    0
.rdata$r:00000D0B                 db    0
.rdata$r:00000D0C                 db 0FFh
.rdata$r:00000D0D                 db 0FFh
.rdata$r:00000D0E                 db 0FFh
.rdata$r:00000D0F                 db 0FFh
.rdata$r:00000D10                 db    0
.rdata$r:00000D11                 db    0
.rdata$r:00000D12                 db    0
.rdata$r:00000D13                 db    0
.rdata$r:00000D14                 db  40h ; @
.rdata$r:00000D15                 db    0
.rdata$r:00000D16                 db    0
.rdata$r:00000D17                 db    0
.rdata$r:00000D18                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000D18 _rdata$r        ends
.rdata$r:00000D18
.data:00000D1C ; ===========================================================================
.data:00000D1C
.data:00000D1C ; Segment type: Pure data
.data:00000D1C ; Segment permissions: Read/Write
.data:00000D1C _data           segment dword public 'DATA' use32
.data:00000D1C                 assume cs:_data
.data:00000D1C                 ;org 0D1Ch
.data:00000D1C ; COMDAT (pick any)
.data:00000D1C                 public ??_R0?AUICompressCoder@@@8
.data:00000D1C ; struct ICompressCoder `RTTI Type Descriptor'
.data:00000D1C ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000D1C                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000D1C                                         ; .rdata$r:00001690o
.data:00000D1C                                         ; const type_info::`vftable'
.data:00000D20                 db    0
.data:00000D21                 db    0
.data:00000D22                 db    0
.data:00000D23                 db    0
.data:00000D24                 db  2Eh ; .
.data:00000D25                 db  3Fh ; ?
.data:00000D26                 db  41h ; A
.data:00000D27                 db  55h ; U
.data:00000D28                 db  49h ; I
.data:00000D29                 db  43h ; C
.data:00000D2A                 db  6Fh ; o
.data:00000D2B                 db  6Dh ; m
.data:00000D2C                 db  70h ; p
.data:00000D2D                 db  72h ; r
.data:00000D2E                 db  65h ; e
.data:00000D2F                 db  73h ; s
.data:00000D30                 db  73h ; s
.data:00000D31                 db  43h ; C
.data:00000D32                 db  6Fh ; o
.data:00000D33                 db  64h ; d
.data:00000D34                 db  65h ; e
.data:00000D35                 db  72h ; r
.data:00000D36                 db  40h ; @
.data:00000D37                 db  40h ; @
.data:00000D38                 db    0
.data:00000D39                 align 4
.data:00000D39 _data           ends
.data:00000D39
.rdata$r:00000D3C ; ===========================================================================
.rdata$r:00000D3C
.rdata$r:00000D3C ; Segment type: Pure data
.rdata$r:00000D3C ; Segment permissions: Read
.rdata$r:00000D3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D3C                 assume cs:_rdata$r
.rdata$r:00000D3C                 ;org 0D3Ch
.rdata$r:00000D3C ; COMDAT (pick any)
.rdata$r:00000D3C                 public ??_R3ICompressCoder@@8
.rdata$r:00000D3C ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000D3C ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00000D18o
.rdata$r:00000D3C                                         ; .rdata$r:00001694o
.rdata$r:00000D3D                 db    0
.rdata$r:00000D3E                 db    0
.rdata$r:00000D3F                 db    0
.rdata$r:00000D40                 db    0
.rdata$r:00000D41                 db    0
.rdata$r:00000D42                 db    0
.rdata$r:00000D43                 db    0
.rdata$r:00000D44                 db    2
.rdata$r:00000D45                 db    0
.rdata$r:00000D46                 db    0
.rdata$r:00000D47                 db    0
.rdata$r:00000D48                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000D48 _rdata$r        ends
.rdata$r:00000D48
.rdata$r:00000D4C ; ===========================================================================
.rdata$r:00000D4C
.rdata$r:00000D4C ; Segment type: Pure data
.rdata$r:00000D4C ; Segment permissions: Read
.rdata$r:00000D4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D4C                 assume cs:_rdata$r
.rdata$r:00000D4C                 ;org 0D4Ch
.rdata$r:00000D4C ; COMDAT (pick any)
.rdata$r:00000D4C                 public ??_R2ICompressCoder@@8
.rdata$r:00000D4C ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000D4C ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000D4C                                         ; DATA XREF: .rdata$r:00000D48o
.rdata$r:00000D4C                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000D50                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000D54                 db    0
.rdata$r:00000D55                 align 4
.rdata$r:00000D55 _rdata$r        ends
.rdata$r:00000D55
.rdata$r:00000D58 ; ===========================================================================
.rdata$r:00000D58
.rdata$r:00000D58 ; Segment type: Pure data
.rdata$r:00000D58 ; Segment permissions: Read
.rdata$r:00000D58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D58                 assume cs:_rdata$r
.rdata$r:00000D58                 ;org 0D58h
.rdata$r:00000D58 ; COMDAT (pick any)
.rdata$r:00000D58                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000D58 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000D58 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000D58                                         ; DATA XREF: .rdata$r:00000D50o
.rdata$r:00000D58                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00000D58                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000D5C                 db    0
.rdata$r:00000D5D                 db    0
.rdata$r:00000D5E                 db    0
.rdata$r:00000D5F                 db    0
.rdata$r:00000D60                 db    0
.rdata$r:00000D61                 db    0
.rdata$r:00000D62                 db    0
.rdata$r:00000D63                 db    0
.rdata$r:00000D64                 db 0FFh
.rdata$r:00000D65                 db 0FFh
.rdata$r:00000D66                 db 0FFh
.rdata$r:00000D67                 db 0FFh
.rdata$r:00000D68                 db    0
.rdata$r:00000D69                 db    0
.rdata$r:00000D6A                 db    0
.rdata$r:00000D6B                 db    0
.rdata$r:00000D6C                 db  40h ; @
.rdata$r:00000D6D                 db    0
.rdata$r:00000D6E                 db    0
.rdata$r:00000D6F                 db    0
.rdata$r:00000D70                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000D70 _rdata$r        ends
.rdata$r:00000D70
.data:00000D74 ; ===========================================================================
.data:00000D74
.data:00000D74 ; Segment type: Pure data
.data:00000D74 ; Segment permissions: Read/Write
.data:00000D74 _data           segment dword public 'DATA' use32
.data:00000D74                 assume cs:_data
.data:00000D74                 ;org 0D74h
.data:00000D74 ; COMDAT (pick any)
.data:00000D74                 public ??_R0?AUIUnknown@@@8
.data:00000D74 ; struct IUnknown `RTTI Type Descriptor'
.data:00000D74 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000D74                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000D74                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00000D74                                         ; const type_info::`vftable'
.data:00000D78                 db    0
.data:00000D79                 db    0
.data:00000D7A                 db    0
.data:00000D7B                 db    0
.data:00000D7C                 db  2Eh ; .
.data:00000D7D                 db  3Fh ; ?
.data:00000D7E                 db  41h ; A
.data:00000D7F                 db  55h ; U
.data:00000D80                 db  49h ; I
.data:00000D81                 db  55h ; U
.data:00000D82                 db  6Eh ; n
.data:00000D83                 db  6Bh ; k
.data:00000D84                 db  6Eh ; n
.data:00000D85                 db  6Fh ; o
.data:00000D86                 db  77h ; w
.data:00000D87                 db  6Eh ; n
.data:00000D88                 db  40h ; @
.data:00000D89                 db  40h ; @
.data:00000D8A                 db    0
.data:00000D8B                 align 4
.data:00000D8B _data           ends
.data:00000D8B
.rdata$r:00000D8C ; ===========================================================================
.rdata$r:00000D8C
.rdata$r:00000D8C ; Segment type: Pure data
.rdata$r:00000D8C ; Segment permissions: Read
.rdata$r:00000D8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D8C                 assume cs:_rdata$r
.rdata$r:00000D8C                 ;org 0D8Ch
.rdata$r:00000D8C ; COMDAT (pick any)
.rdata$r:00000D8C                 public ??_R3IUnknown@@8
.rdata$r:00000D8C ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000D8C ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000D70o
.rdata$r:00000D8C                                         ; .rdata$r:00000DBCo ...
.rdata$r:00000D8D                 db    0
.rdata$r:00000D8E                 db    0
.rdata$r:00000D8F                 db    0
.rdata$r:00000D90                 db    0
.rdata$r:00000D91                 db    0
.rdata$r:00000D92                 db    0
.rdata$r:00000D93                 db    0
.rdata$r:00000D94                 db    1
.rdata$r:00000D95                 db    0
.rdata$r:00000D96                 db    0
.rdata$r:00000D97                 db    0
.rdata$r:00000D98                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000D98 _rdata$r        ends
.rdata$r:00000D98
.rdata$r:00000D9C ; ===========================================================================
.rdata$r:00000D9C
.rdata$r:00000D9C ; Segment type: Pure data
.rdata$r:00000D9C ; Segment permissions: Read
.rdata$r:00000D9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D9C                 assume cs:_rdata$r
.rdata$r:00000D9C                 ;org 0D9Ch
.rdata$r:00000D9C ; COMDAT (pick any)
.rdata$r:00000D9C                 public ??_R2IUnknown@@8
.rdata$r:00000D9C ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000D9C ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000D9C                                         ; DATA XREF: .rdata$r:00000D98o
.rdata$r:00000D9C                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000DA0                 db    0
.rdata$r:00000DA1                 align 4
.rdata$r:00000DA1 _rdata$r        ends
.rdata$r:00000DA1
.rdata$r:00000DA4 ; ===========================================================================
.rdata$r:00000DA4
.rdata$r:00000DA4 ; Segment type: Pure data
.rdata$r:00000DA4 ; Segment permissions: Read
.rdata$r:00000DA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000DA4                 assume cs:_rdata$r
.rdata$r:00000DA4                 ;org 0DA4h
.rdata$r:00000DA4 ; COMDAT (pick any)
.rdata$r:00000DA4                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00000DA4 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00000DA4 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000DA4                                         ; DATA XREF: .rdata$r:00000CA0o
.rdata$r:00000DA4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000DA8                 align 10h
.rdata$r:00000DB0                 db 0FFh
.rdata$r:00000DB1                 db 0FFh
.rdata$r:00000DB2                 db 0FFh
.rdata$r:00000DB3                 db 0FFh
.rdata$r:00000DB4                 db    0
.rdata$r:00000DB5                 db    0
.rdata$r:00000DB6                 db    0
.rdata$r:00000DB7                 db    0
.rdata$r:00000DB8                 db  42h ; B
.rdata$r:00000DB9                 db    0
.rdata$r:00000DBA                 db    0
.rdata$r:00000DBB                 db    0
.rdata$r:00000DBC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000DBC _rdata$r        ends
.rdata$r:00000DBC
.rdata$r:00000DC0 ; ===========================================================================
.rdata$r:00000DC0
.rdata$r:00000DC0 ; Segment type: Pure data
.rdata$r:00000DC0 ; Segment permissions: Read
.rdata$r:00000DC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000DC0                 assume cs:_rdata$r
.rdata$r:00000DC0                 ;org 0DC0h
.rdata$r:00000DC0 ; COMDAT (pick any)
.rdata$r:00000DC0                 public ??_R13?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00000DC0 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000DC0 ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:00000DC0                                         ; DATA XREF: .rdata$r:00000CA4o
.rdata$r:00000DC0                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00000DC4                 db    1
.rdata$r:00000DC5                 db    0
.rdata$r:00000DC6                 db    0
.rdata$r:00000DC7                 db    0
.rdata$r:00000DC8                 db    4
.rdata$r:00000DC9                 db    0
.rdata$r:00000DCA                 db    0
.rdata$r:00000DCB                 db    0
.rdata$r:00000DCC                 db 0FFh
.rdata$r:00000DCD                 db 0FFh
.rdata$r:00000DCE                 db 0FFh
.rdata$r:00000DCF                 db 0FFh
.rdata$r:00000DD0                 db    0
.rdata$r:00000DD1                 db    0
.rdata$r:00000DD2                 db    0
.rdata$r:00000DD3                 db    0
.rdata$r:00000DD4                 db  40h ; @
.rdata$r:00000DD5                 db    0
.rdata$r:00000DD6                 db    0
.rdata$r:00000DD7                 db    0
.rdata$r:00000DD8                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000DD8 _rdata$r        ends
.rdata$r:00000DD8
.data:00000DDC ; ===========================================================================
.data:00000DDC
.data:00000DDC ; Segment type: Pure data
.data:00000DDC ; Segment permissions: Read/Write
.data:00000DDC _data           segment dword public 'DATA' use32
.data:00000DDC                 assume cs:_data
.data:00000DDC                 ;org 0DDCh
.data:00000DDC ; COMDAT (pick any)
.data:00000DDC                 public ??_R0?AUICompressSetDecoderProperties2@@@8
.data:00000DDC ; struct ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.data:00000DDC ??_R0?AUICompressSetDecoderProperties2@@@8 dd offset ??_7type_info@@6B@
.data:00000DDC                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000DDC                                         ; .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000DDC                                         ; const type_info::`vftable'
.data:00000DE0                 db    0
.data:00000DE1                 db    0
.data:00000DE2                 db    0
.data:00000DE3                 db    0
.data:00000DE4                 db  2Eh ; .
.data:00000DE5                 db  3Fh ; ?
.data:00000DE6                 db  41h ; A
.data:00000DE7                 db  55h ; U
.data:00000DE8                 db  49h ; I
.data:00000DE9                 db  43h ; C
.data:00000DEA                 db  6Fh ; o
.data:00000DEB                 db  6Dh ; m
.data:00000DEC                 db  70h ; p
.data:00000DED                 db  72h ; r
.data:00000DEE                 db  65h ; e
.data:00000DEF                 db  73h ; s
.data:00000DF0                 db  73h ; s
.data:00000DF1                 db  53h ; S
.data:00000DF2                 db  65h ; e
.data:00000DF3                 db  74h ; t
.data:00000DF4                 db  44h ; D
.data:00000DF5                 db  65h ; e
.data:00000DF6                 db  63h ; c
.data:00000DF7                 db  6Fh ; o
.data:00000DF8                 db  64h ; d
.data:00000DF9                 db  65h ; e
.data:00000DFA                 db  72h ; r
.data:00000DFB                 db  50h ; P
.data:00000DFC                 db  72h ; r
.data:00000DFD                 db  6Fh ; o
.data:00000DFE                 db  70h ; p
.data:00000DFF                 db  65h ; e
.data:00000E00                 db  72h ; r
.data:00000E01                 db  74h ; t
.data:00000E02                 db  69h ; i
.data:00000E03                 db  65h ; e
.data:00000E04                 db  73h ; s
.data:00000E05                 db  32h ; 2
.data:00000E06                 db  40h ; @
.data:00000E07                 db  40h ; @
.data:00000E08                 db    0
.data:00000E09                 align 4
.data:00000E09 _data           ends
.data:00000E09
.rdata$r:00000E0C ; ===========================================================================
.rdata$r:00000E0C
.rdata$r:00000E0C ; Segment type: Pure data
.rdata$r:00000E0C ; Segment permissions: Read
.rdata$r:00000E0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E0C                 assume cs:_rdata$r
.rdata$r:00000E0C                 ;org 0E0Ch
.rdata$r:00000E0C ; COMDAT (pick any)
.rdata$r:00000E0C                 public ??_R3ICompressSetDecoderProperties2@@8
.rdata$r:00000E0C ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E0C ??_R3ICompressSetDecoderProperties2@@8 db    0
.rdata$r:00000E0C                                         ; DATA XREF: .rdata$r:00000DD8o
.rdata$r:00000E0C                                         ; .rdata$r:00000E40o ...
.rdata$r:00000E0D                 db    0
.rdata$r:00000E0E                 db    0
.rdata$r:00000E0F                 db    0
.rdata$r:00000E10                 db    0
.rdata$r:00000E11                 db    0
.rdata$r:00000E12                 db    0
.rdata$r:00000E13                 db    0
.rdata$r:00000E14                 db    2
.rdata$r:00000E15                 db    0
.rdata$r:00000E16                 db    0
.rdata$r:00000E17                 db    0
.rdata$r:00000E18                 dd offset ??_R2ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:00000E18 _rdata$r        ends
.rdata$r:00000E18
.rdata$r:00000E1C ; ===========================================================================
.rdata$r:00000E1C
.rdata$r:00000E1C ; Segment type: Pure data
.rdata$r:00000E1C ; Segment permissions: Read
.rdata$r:00000E1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E1C                 assume cs:_rdata$r
.rdata$r:00000E1C                 ;org 0E1Ch
.rdata$r:00000E1C ; COMDAT (pick any)
.rdata$r:00000E1C                 public ??_R2ICompressSetDecoderProperties2@@8
.rdata$r:00000E1C ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:00000E1C ??_R2ICompressSetDecoderProperties2@@8 dd offset ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00000E1C                                         ; DATA XREF: .rdata$r:00000E18o
.rdata$r:00000E1C                                         ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E20                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E24                 db    0
.rdata$r:00000E25                 align 4
.rdata$r:00000E25 _rdata$r        ends
.rdata$r:00000E25
.rdata$r:00000E28 ; ===========================================================================
.rdata$r:00000E28
.rdata$r:00000E28 ; Segment type: Pure data
.rdata$r:00000E28 ; Segment permissions: Read
.rdata$r:00000E28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E28                 assume cs:_rdata$r
.rdata$r:00000E28                 ;org 0E28h
.rdata$r:00000E28 ; COMDAT (pick any)
.rdata$r:00000E28                 public ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00000E28 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000E28 ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:00000E28                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Array'o
.rdata$r:00000E28                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00000E2C                 db    1
.rdata$r:00000E2D                 db    0
.rdata$r:00000E2E                 db    0
.rdata$r:00000E2F                 db    0
.rdata$r:00000E30                 db    0
.rdata$r:00000E31                 db    0
.rdata$r:00000E32                 db    0
.rdata$r:00000E33                 db    0
.rdata$r:00000E34                 db 0FFh
.rdata$r:00000E35                 db 0FFh
.rdata$r:00000E36                 db 0FFh
.rdata$r:00000E37                 db 0FFh
.rdata$r:00000E38                 db    0
.rdata$r:00000E39                 db    0
.rdata$r:00000E3A                 db    0
.rdata$r:00000E3B                 db    0
.rdata$r:00000E3C                 db  40h ; @
.rdata$r:00000E3D                 db    0
.rdata$r:00000E3E                 db    0
.rdata$r:00000E3F                 db    0
.rdata$r:00000E40                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E40 _rdata$r        ends
.rdata$r:00000E40
.rdata$r:00000E44 ; ===========================================================================
.rdata$r:00000E44
.rdata$r:00000E44 ; Segment type: Pure data
.rdata$r:00000E44 ; Segment permissions: Read
.rdata$r:00000E44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E44                 assume cs:_rdata$r
.rdata$r:00000E44                 ;org 0E44h
.rdata$r:00000E44 ; COMDAT (pick any)
.rdata$r:00000E44                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00000E44 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00000E44 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000E44                                         ; DATA XREF: .rdata$r:00000CA8o
.rdata$r:00000E44                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000E48                 db    0
.rdata$r:00000E49                 db    0
.rdata$r:00000E4A                 db    0
.rdata$r:00000E4B                 db    0
.rdata$r:00000E4C                 db    4
.rdata$r:00000E4D                 db    0
.rdata$r:00000E4E                 db    0
.rdata$r:00000E4F                 db    0
.rdata$r:00000E50                 db 0FFh
.rdata$r:00000E51                 db 0FFh
.rdata$r:00000E52                 db 0FFh
.rdata$r:00000E53                 db 0FFh
.rdata$r:00000E54                 db    0
.rdata$r:00000E55                 db    0
.rdata$r:00000E56                 db    0
.rdata$r:00000E57                 db    0
.rdata$r:00000E58                 db  42h ; B
.rdata$r:00000E59                 db    0
.rdata$r:00000E5A                 db    0
.rdata$r:00000E5B                 db    0
.rdata$r:00000E5C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E5C _rdata$r        ends
.rdata$r:00000E5C
.rdata$r:00000E60 ; ===========================================================================
.rdata$r:00000E60
.rdata$r:00000E60 ; Segment type: Pure data
.rdata$r:00000E60 ; Segment permissions: Read
.rdata$r:00000E60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E60                 assume cs:_rdata$r
.rdata$r:00000E60                 ;org 0E60h
.rdata$r:00000E60 ; COMDAT (pick any)
.rdata$r:00000E60                 public ??_R17?0A@EA@ICompressSetFinishMode@@8
.rdata$r:00000E60 ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00000E60 ??_R17?0A@EA@ICompressSetFinishMode@@8 dd offset ??_R0?AUICompressSetFinishMode@@@8
.rdata$r:00000E60                                         ; DATA XREF: .rdata$r:00000CACo
.rdata$r:00000E60                                         ; ICompressSetFinishMode `RTTI Type Descriptor'
.rdata$r:00000E64                 db    1
.rdata$r:00000E65                 db    0
.rdata$r:00000E66                 db    0
.rdata$r:00000E67                 db    0
.rdata$r:00000E68                 db    8
.rdata$r:00000E69                 db    0
.rdata$r:00000E6A                 db    0
.rdata$r:00000E6B                 db    0
.rdata$r:00000E6C                 db 0FFh
.rdata$r:00000E6D                 db 0FFh
.rdata$r:00000E6E                 db 0FFh
.rdata$r:00000E6F                 db 0FFh
.rdata$r:00000E70                 db    0
.rdata$r:00000E71                 db    0
.rdata$r:00000E72                 db    0
.rdata$r:00000E73                 db    0
.rdata$r:00000E74                 db  40h ; @
.rdata$r:00000E75                 db    0
.rdata$r:00000E76                 db    0
.rdata$r:00000E77                 db    0
.rdata$r:00000E78                 dd offset ??_R3ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E78 _rdata$r        ends
.rdata$r:00000E78
.data:00000E7C ; ===========================================================================
.data:00000E7C
.data:00000E7C ; Segment type: Pure data
.data:00000E7C ; Segment permissions: Read/Write
.data:00000E7C _data           segment dword public 'DATA' use32
.data:00000E7C                 assume cs:_data
.data:00000E7C                 ;org 0E7Ch
.data:00000E7C ; COMDAT (pick any)
.data:00000E7C                 public ??_R0?AUICompressSetFinishMode@@@8
.data:00000E7C ; struct ICompressSetFinishMode `RTTI Type Descriptor'
.data:00000E7C ??_R0?AUICompressSetFinishMode@@@8 dd offset ??_7type_info@@6B@
.data:00000E7C                                         ; DATA XREF: .rdata$r:ICompressSetFinishMode::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00000E7C                                         ; .rdata$r:ICompressSetFinishMode::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000E7C                                         ; const type_info::`vftable'
.data:00000E80                 db    0
.data:00000E81                 db    0
.data:00000E82                 db    0
.data:00000E83                 db    0
.data:00000E84                 db  2Eh ; .
.data:00000E85                 db  3Fh ; ?
.data:00000E86                 db  41h ; A
.data:00000E87                 db  55h ; U
.data:00000E88                 db  49h ; I
.data:00000E89                 db  43h ; C
.data:00000E8A                 db  6Fh ; o
.data:00000E8B                 db  6Dh ; m
.data:00000E8C                 db  70h ; p
.data:00000E8D                 db  72h ; r
.data:00000E8E                 db  65h ; e
.data:00000E8F                 db  73h ; s
.data:00000E90                 db  73h ; s
.data:00000E91                 db  53h ; S
.data:00000E92                 db  65h ; e
.data:00000E93                 db  74h ; t
.data:00000E94                 db  46h ; F
.data:00000E95                 db  69h ; i
.data:00000E96                 db  6Eh ; n
.data:00000E97                 db  69h ; i
.data:00000E98                 db  73h ; s
.data:00000E99                 db  68h ; h
.data:00000E9A                 db  4Dh ; M
.data:00000E9B                 db  6Fh ; o
.data:00000E9C                 db  64h ; d
.data:00000E9D                 db  65h ; e
.data:00000E9E                 db  40h ; @
.data:00000E9F                 db  40h ; @
.data:00000EA0                 db    0
.data:00000EA1                 align 4
.data:00000EA1 _data           ends
.data:00000EA1
.rdata$r:00000EA4 ; ===========================================================================
.rdata$r:00000EA4
.rdata$r:00000EA4 ; Segment type: Pure data
.rdata$r:00000EA4 ; Segment permissions: Read
.rdata$r:00000EA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EA4                 assume cs:_rdata$r
.rdata$r:00000EA4                 ;org 0EA4h
.rdata$r:00000EA4 ; COMDAT (pick any)
.rdata$r:00000EA4                 public ??_R3ICompressSetFinishMode@@8
.rdata$r:00000EA4 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EA4 ??_R3ICompressSetFinishMode@@8 db    0  ; DATA XREF: .rdata$r:00000E78o
.rdata$r:00000EA4                                         ; .rdata$r:00000ED8o ...
.rdata$r:00000EA5                 db    0
.rdata$r:00000EA6                 db    0
.rdata$r:00000EA7                 db    0
.rdata$r:00000EA8                 db    0
.rdata$r:00000EA9                 db    0
.rdata$r:00000EAA                 db    0
.rdata$r:00000EAB                 db    0
.rdata$r:00000EAC                 db    2
.rdata$r:00000EAD                 db    0
.rdata$r:00000EAE                 db    0
.rdata$r:00000EAF                 db    0
.rdata$r:00000EB0                 dd offset ??_R2ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Base Class Array'
.rdata$r:00000EB0 _rdata$r        ends
.rdata$r:00000EB0
.rdata$r:00000EB4 ; ===========================================================================
.rdata$r:00000EB4
.rdata$r:00000EB4 ; Segment type: Pure data
.rdata$r:00000EB4 ; Segment permissions: Read
.rdata$r:00000EB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EB4                 assume cs:_rdata$r
.rdata$r:00000EB4                 ;org 0EB4h
.rdata$r:00000EB4 ; COMDAT (pick any)
.rdata$r:00000EB4                 public ??_R2ICompressSetFinishMode@@8
.rdata$r:00000EB4 ; ICompressSetFinishMode::`RTTI Base Class Array'
.rdata$r:00000EB4 ??_R2ICompressSetFinishMode@@8 dd offset ??_R1A@?0A@EA@ICompressSetFinishMode@@8
.rdata$r:00000EB4                                         ; DATA XREF: .rdata$r:00000EB0o
.rdata$r:00000EB4                                         ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EB8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EBC                 db    0
.rdata$r:00000EBD                 align 10h
.rdata$r:00000EBD _rdata$r        ends
.rdata$r:00000EBD
.rdata$r:00000EC0 ; ===========================================================================
.rdata$r:00000EC0
.rdata$r:00000EC0 ; Segment type: Pure data
.rdata$r:00000EC0 ; Segment permissions: Read
.rdata$r:00000EC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EC0                 assume cs:_rdata$r
.rdata$r:00000EC0                 ;org 0EC0h
.rdata$r:00000EC0 ; COMDAT (pick any)
.rdata$r:00000EC0                 public ??_R1A@?0A@EA@ICompressSetFinishMode@@8
.rdata$r:00000EC0 ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000EC0 ??_R1A@?0A@EA@ICompressSetFinishMode@@8 dd offset ??_R0?AUICompressSetFinishMode@@@8
.rdata$r:00000EC0                                         ; DATA XREF: .rdata$r:ICompressSetFinishMode::`RTTI Base Class Array'o
.rdata$r:00000EC0                                         ; ICompressSetFinishMode `RTTI Type Descriptor'
.rdata$r:00000EC4                 db    1
.rdata$r:00000EC5                 db    0
.rdata$r:00000EC6                 db    0
.rdata$r:00000EC7                 db    0
.rdata$r:00000EC8                 db    0
.rdata$r:00000EC9                 db    0
.rdata$r:00000ECA                 db    0
.rdata$r:00000ECB                 db    0
.rdata$r:00000ECC                 db 0FFh
.rdata$r:00000ECD                 db 0FFh
.rdata$r:00000ECE                 db 0FFh
.rdata$r:00000ECF                 db 0FFh
.rdata$r:00000ED0                 db    0
.rdata$r:00000ED1                 db    0
.rdata$r:00000ED2                 db    0
.rdata$r:00000ED3                 db    0
.rdata$r:00000ED4                 db  40h ; @
.rdata$r:00000ED5                 db    0
.rdata$r:00000ED6                 db    0
.rdata$r:00000ED7                 db    0
.rdata$r:00000ED8                 dd offset ??_R3ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000ED8 _rdata$r        ends
.rdata$r:00000ED8
.rdata$r:00000EDC ; ===========================================================================
.rdata$r:00000EDC
.rdata$r:00000EDC ; Segment type: Pure data
.rdata$r:00000EDC ; Segment permissions: Read
.rdata$r:00000EDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EDC                 assume cs:_rdata$r
.rdata$r:00000EDC                 ;org 0EDCh
.rdata$r:00000EDC ; COMDAT (pick any)
.rdata$r:00000EDC                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00000EDC ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00000EDC ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000EDC                                         ; DATA XREF: .rdata$r:00000CB0o
.rdata$r:00000EDC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000EE0                 db    0
.rdata$r:00000EE1                 db    0
.rdata$r:00000EE2                 db    0
.rdata$r:00000EE3                 db    0
.rdata$r:00000EE4                 db    8
.rdata$r:00000EE5                 db    0
.rdata$r:00000EE6                 db    0
.rdata$r:00000EE7                 db    0
.rdata$r:00000EE8                 db 0FFh
.rdata$r:00000EE9                 db 0FFh
.rdata$r:00000EEA                 db 0FFh
.rdata$r:00000EEB                 db 0FFh
.rdata$r:00000EEC                 db    0
.rdata$r:00000EED                 db    0
.rdata$r:00000EEE                 db    0
.rdata$r:00000EEF                 db    0
.rdata$r:00000EF0                 db  42h ; B
.rdata$r:00000EF1                 db    0
.rdata$r:00000EF2                 db    0
.rdata$r:00000EF3                 db    0
.rdata$r:00000EF4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EF4 _rdata$r        ends
.rdata$r:00000EF4
.rdata$r:00000EF8 ; ===========================================================================
.rdata$r:00000EF8
.rdata$r:00000EF8 ; Segment type: Pure data
.rdata$r:00000EF8 ; Segment permissions: Read
.rdata$r:00000EF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EF8                 assume cs:_rdata$r
.rdata$r:00000EF8                 ;org 0EF8h
.rdata$r:00000EF8 ; COMDAT (pick any)
.rdata$r:00000EF8                 public ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00000EF8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00000EF8 ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00000EF8                                         ; DATA XREF: .rdata$r:00000CB4o
.rdata$r:00000EF8                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00000EFC                 db    1
.rdata$r:00000EFD                 db    0
.rdata$r:00000EFE                 db    0
.rdata$r:00000EFF                 db    0
.rdata$r:00000F00                 db  0Ch
.rdata$r:00000F01                 db    0
.rdata$r:00000F02                 db    0
.rdata$r:00000F03                 db    0
.rdata$r:00000F04                 db 0FFh
.rdata$r:00000F05                 db 0FFh
.rdata$r:00000F06                 db 0FFh
.rdata$r:00000F07                 db 0FFh
.rdata$r:00000F08                 db    0
.rdata$r:00000F09                 db    0
.rdata$r:00000F0A                 db    0
.rdata$r:00000F0B                 db    0
.rdata$r:00000F0C                 db  40h ; @
.rdata$r:00000F0D                 db    0
.rdata$r:00000F0E                 db    0
.rdata$r:00000F0F                 db    0
.rdata$r:00000F10                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F10 _rdata$r        ends
.rdata$r:00000F10
.data:00000F14 ; ===========================================================================
.data:00000F14
.data:00000F14 ; Segment type: Pure data
.data:00000F14 ; Segment permissions: Read/Write
.data:00000F14 _data           segment dword public 'DATA' use32
.data:00000F14                 assume cs:_data
.data:00000F14                 ;org 0F14h
.data:00000F14 ; COMDAT (pick any)
.data:00000F14                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:00000F14 ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:00000F14 ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:00000F14                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00000F14                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000F14                                         ; const type_info::`vftable'
.data:00000F18                 db    0
.data:00000F19                 db    0
.data:00000F1A                 db    0
.data:00000F1B                 db    0
.data:00000F1C                 db  2Eh ; .
.data:00000F1D                 db  3Fh ; ?
.data:00000F1E                 db  41h ; A
.data:00000F1F                 db  55h ; U
.data:00000F20                 db  49h ; I
.data:00000F21                 db  43h ; C
.data:00000F22                 db  6Fh ; o
.data:00000F23                 db  6Dh ; m
.data:00000F24                 db  70h ; p
.data:00000F25                 db  72h ; r
.data:00000F26                 db  65h ; e
.data:00000F27                 db  73h ; s
.data:00000F28                 db  73h ; s
.data:00000F29                 db  47h ; G
.data:00000F2A                 db  65h ; e
.data:00000F2B                 db  74h ; t
.data:00000F2C                 db  49h ; I
.data:00000F2D                 db  6Eh ; n
.data:00000F2E                 db  53h ; S
.data:00000F2F                 db  74h ; t
.data:00000F30                 db  72h ; r
.data:00000F31                 db  65h ; e
.data:00000F32                 db  61h ; a
.data:00000F33                 db  6Dh ; m
.data:00000F34                 db  50h ; P
.data:00000F35                 db  72h ; r
.data:00000F36                 db  6Fh ; o
.data:00000F37                 db  63h ; c
.data:00000F38                 db  65h ; e
.data:00000F39                 db  73h ; s
.data:00000F3A                 db  73h ; s
.data:00000F3B                 db  65h ; e
.data:00000F3C                 db  64h ; d
.data:00000F3D                 db  53h ; S
.data:00000F3E                 db  69h ; i
.data:00000F3F                 db  7Ah ; z
.data:00000F40                 db  65h ; e
.data:00000F41                 db  40h ; @
.data:00000F42                 db  40h ; @
.data:00000F43                 db    0
.data:00000F43 _data           ends
.data:00000F43
.rdata$r:00000F44 ; ===========================================================================
.rdata$r:00000F44
.rdata$r:00000F44 ; Segment type: Pure data
.rdata$r:00000F44 ; Segment permissions: Read
.rdata$r:00000F44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F44                 assume cs:_rdata$r
.rdata$r:00000F44                 ;org 0F44h
.rdata$r:00000F44 ; COMDAT (pick any)
.rdata$r:00000F44                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:00000F44 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F44 ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:00000F44                                         ; DATA XREF: .rdata$r:00000F10o
.rdata$r:00000F44                                         ; .rdata$r:00000F78o ...
.rdata$r:00000F45                 db    0
.rdata$r:00000F46                 db    0
.rdata$r:00000F47                 db    0
.rdata$r:00000F48                 db    0
.rdata$r:00000F49                 db    0
.rdata$r:00000F4A                 db    0
.rdata$r:00000F4B                 db    0
.rdata$r:00000F4C                 db    2
.rdata$r:00000F4D                 db    0
.rdata$r:00000F4E                 db    0
.rdata$r:00000F4F                 db    0
.rdata$r:00000F50                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00000F50 _rdata$r        ends
.rdata$r:00000F50
.rdata$r:00000F54 ; ===========================================================================
.rdata$r:00000F54
.rdata$r:00000F54 ; Segment type: Pure data
.rdata$r:00000F54 ; Segment permissions: Read
.rdata$r:00000F54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F54                 assume cs:_rdata$r
.rdata$r:00000F54                 ;org 0F54h
.rdata$r:00000F54 ; COMDAT (pick any)
.rdata$r:00000F54                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:00000F54 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00000F54 ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00000F54                                         ; DATA XREF: .rdata$r:00000F50o
.rdata$r:00000F54                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F58                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F5C                 db    0
.rdata$r:00000F5D                 align 10h
.rdata$r:00000F5D _rdata$r        ends
.rdata$r:00000F5D
.rdata$r:00000F60 ; ===========================================================================
.rdata$r:00000F60
.rdata$r:00000F60 ; Segment type: Pure data
.rdata$r:00000F60 ; Segment permissions: Read
.rdata$r:00000F60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F60                 assume cs:_rdata$r
.rdata$r:00000F60                 ;org 0F60h
.rdata$r:00000F60 ; COMDAT (pick any)
.rdata$r:00000F60                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00000F60 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000F60 ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00000F60                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:00000F60                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00000F64                 db    1
.rdata$r:00000F65                 db    0
.rdata$r:00000F66                 db    0
.rdata$r:00000F67                 db    0
.rdata$r:00000F68                 db    0
.rdata$r:00000F69                 db    0
.rdata$r:00000F6A                 db    0
.rdata$r:00000F6B                 db    0
.rdata$r:00000F6C                 db 0FFh
.rdata$r:00000F6D                 db 0FFh
.rdata$r:00000F6E                 db 0FFh
.rdata$r:00000F6F                 db 0FFh
.rdata$r:00000F70                 db    0
.rdata$r:00000F71                 db    0
.rdata$r:00000F72                 db    0
.rdata$r:00000F73                 db    0
.rdata$r:00000F74                 db  40h ; @
.rdata$r:00000F75                 db    0
.rdata$r:00000F76                 db    0
.rdata$r:00000F77                 db    0
.rdata$r:00000F78                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F78 _rdata$r        ends
.rdata$r:00000F78
.rdata$r:00000F7C ; ===========================================================================
.rdata$r:00000F7C
.rdata$r:00000F7C ; Segment type: Pure data
.rdata$r:00000F7C ; Segment permissions: Read
.rdata$r:00000F7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F7C                 assume cs:_rdata$r
.rdata$r:00000F7C                 ;org 0F7Ch
.rdata$r:00000F7C ; COMDAT (pick any)
.rdata$r:00000F7C                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00000F7C ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00000F7C ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000F7C                                         ; DATA XREF: .rdata$r:00000CB8o
.rdata$r:00000F7C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000F80                 db    0
.rdata$r:00000F81                 db    0
.rdata$r:00000F82                 db    0
.rdata$r:00000F83                 db    0
.rdata$r:00000F84                 db  0Ch
.rdata$r:00000F85                 db    0
.rdata$r:00000F86                 db    0
.rdata$r:00000F87                 db    0
.rdata$r:00000F88                 db 0FFh
.rdata$r:00000F89                 db 0FFh
.rdata$r:00000F8A                 db 0FFh
.rdata$r:00000F8B                 db 0FFh
.rdata$r:00000F8C                 db    0
.rdata$r:00000F8D                 db    0
.rdata$r:00000F8E                 db    0
.rdata$r:00000F8F                 db    0
.rdata$r:00000F90                 db  42h ; B
.rdata$r:00000F91                 db    0
.rdata$r:00000F92                 db    0
.rdata$r:00000F93                 db    0
.rdata$r:00000F94                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F94 _rdata$r        ends
.rdata$r:00000F94
.rdata$r:00000F98 ; ===========================================================================
.rdata$r:00000F98
.rdata$r:00000F98 ; Segment type: Pure data
.rdata$r:00000F98 ; Segment permissions: Read
.rdata$r:00000F98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F98                 assume cs:_rdata$r
.rdata$r:00000F98                 ;org 0F98h
.rdata$r:00000F98 ; COMDAT (pick any)
.rdata$r:00000F98                 public ??_R1BA@?0A@EA@ICompressSetBufSize@@8
.rdata$r:00000F98 ; ICompressSetBufSize::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00000F98 ??_R1BA@?0A@EA@ICompressSetBufSize@@8 dd offset ??_R0?AUICompressSetBufSize@@@8
.rdata$r:00000F98                                         ; DATA XREF: .rdata$r:00000CBCo
.rdata$r:00000F98                                         ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:00000F9C                 db    1
.rdata$r:00000F9D                 db    0
.rdata$r:00000F9E                 db    0
.rdata$r:00000F9F                 db    0
.rdata$r:00000FA0                 db  10h
.rdata$r:00000FA1                 db    0
.rdata$r:00000FA2                 db    0
.rdata$r:00000FA3                 db    0
.rdata$r:00000FA4                 db 0FFh
.rdata$r:00000FA5                 db 0FFh
.rdata$r:00000FA6                 db 0FFh
.rdata$r:00000FA7                 db 0FFh
.rdata$r:00000FA8                 db    0
.rdata$r:00000FA9                 db    0
.rdata$r:00000FAA                 db    0
.rdata$r:00000FAB                 db    0
.rdata$r:00000FAC                 db  40h ; @
.rdata$r:00000FAD                 db    0
.rdata$r:00000FAE                 db    0
.rdata$r:00000FAF                 db    0
.rdata$r:00000FB0                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000FB0 _rdata$r        ends
.rdata$r:00000FB0
.data:00000FB4 ; ===========================================================================
.data:00000FB4
.data:00000FB4 ; Segment type: Pure data
.data:00000FB4 ; Segment permissions: Read/Write
.data:00000FB4 _data           segment dword public 'DATA' use32
.data:00000FB4                 assume cs:_data
.data:00000FB4                 ;org 0FB4h
.data:00000FB4 ; COMDAT (pick any)
.data:00000FB4                 public ??_R0?AUICompressSetBufSize@@@8
.data:00000FB4 ; struct ICompressSetBufSize `RTTI Type Descriptor'
.data:00000FB4 ??_R0?AUICompressSetBufSize@@@8 dd offset ??_7type_info@@6B@
.data:00000FB4                                         ; DATA XREF: .rdata$r:ICompressSetBufSize::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00000FB4                                         ; .rdata$r:ICompressSetBufSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000FB4                                         ; const type_info::`vftable'
.data:00000FB8                 db    0
.data:00000FB9                 db    0
.data:00000FBA                 db    0
.data:00000FBB                 db    0
.data:00000FBC                 db  2Eh ; .
.data:00000FBD                 db  3Fh ; ?
.data:00000FBE                 db  41h ; A
.data:00000FBF                 db  55h ; U
.data:00000FC0                 db  49h ; I
.data:00000FC1                 db  43h ; C
.data:00000FC2                 db  6Fh ; o
.data:00000FC3                 db  6Dh ; m
.data:00000FC4                 db  70h ; p
.data:00000FC5                 db  72h ; r
.data:00000FC6                 db  65h ; e
.data:00000FC7                 db  73h ; s
.data:00000FC8                 db  73h ; s
.data:00000FC9                 db  53h ; S
.data:00000FCA                 db  65h ; e
.data:00000FCB                 db  74h ; t
.data:00000FCC                 db  42h ; B
.data:00000FCD                 db  75h ; u
.data:00000FCE                 db  66h ; f
.data:00000FCF                 db  53h ; S
.data:00000FD0                 db  69h ; i
.data:00000FD1                 db  7Ah ; z
.data:00000FD2                 db  65h ; e
.data:00000FD3                 db  40h ; @
.data:00000FD4                 db  40h ; @
.data:00000FD5                 db    0
.data:00000FD6                 align 4
.data:00000FD6 _data           ends
.data:00000FD6
.rdata$r:00000FD8 ; ===========================================================================
.rdata$r:00000FD8
.rdata$r:00000FD8 ; Segment type: Pure data
.rdata$r:00000FD8 ; Segment permissions: Read
.rdata$r:00000FD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FD8                 assume cs:_rdata$r
.rdata$r:00000FD8                 ;org 0FD8h
.rdata$r:00000FD8 ; COMDAT (pick any)
.rdata$r:00000FD8                 public ??_R3ICompressSetBufSize@@8
.rdata$r:00000FD8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000FD8 ??_R3ICompressSetBufSize@@8 db    0     ; DATA XREF: .rdata$r:00000FB0o
.rdata$r:00000FD8                                         ; .rdata$r:0000100Co ...
.rdata$r:00000FD9                 db    0
.rdata$r:00000FDA                 db    0
.rdata$r:00000FDB                 db    0
.rdata$r:00000FDC                 db    0
.rdata$r:00000FDD                 db    0
.rdata$r:00000FDE                 db    0
.rdata$r:00000FDF                 db    0
.rdata$r:00000FE0                 db    2
.rdata$r:00000FE1                 db    0
.rdata$r:00000FE2                 db    0
.rdata$r:00000FE3                 db    0
.rdata$r:00000FE4                 dd offset ??_R2ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Base Class Array'
.rdata$r:00000FE4 _rdata$r        ends
.rdata$r:00000FE4
.rdata$r:00000FE8 ; ===========================================================================
.rdata$r:00000FE8
.rdata$r:00000FE8 ; Segment type: Pure data
.rdata$r:00000FE8 ; Segment permissions: Read
.rdata$r:00000FE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FE8                 assume cs:_rdata$r
.rdata$r:00000FE8                 ;org 0FE8h
.rdata$r:00000FE8 ; COMDAT (pick any)
.rdata$r:00000FE8                 public ??_R2ICompressSetBufSize@@8
.rdata$r:00000FE8 ; ICompressSetBufSize::`RTTI Base Class Array'
.rdata$r:00000FE8 ??_R2ICompressSetBufSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetBufSize@@8
.rdata$r:00000FE8                                         ; DATA XREF: .rdata$r:00000FE4o
.rdata$r:00000FE8                                         ; ICompressSetBufSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000FEC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000FF0                 db    0
.rdata$r:00000FF1                 align 4
.rdata$r:00000FF1 _rdata$r        ends
.rdata$r:00000FF1
.rdata$r:00000FF4 ; ===========================================================================
.rdata$r:00000FF4
.rdata$r:00000FF4 ; Segment type: Pure data
.rdata$r:00000FF4 ; Segment permissions: Read
.rdata$r:00000FF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FF4                 assume cs:_rdata$r
.rdata$r:00000FF4                 ;org 0FF4h
.rdata$r:00000FF4 ; COMDAT (pick any)
.rdata$r:00000FF4                 public ??_R1A@?0A@EA@ICompressSetBufSize@@8
.rdata$r:00000FF4 ; ICompressSetBufSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000FF4 ??_R1A@?0A@EA@ICompressSetBufSize@@8 dd offset ??_R0?AUICompressSetBufSize@@@8
.rdata$r:00000FF4                                         ; DATA XREF: .rdata$r:ICompressSetBufSize::`RTTI Base Class Array'o
.rdata$r:00000FF4                                         ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:00000FF8                 db    1
.rdata$r:00000FF9                 db    0
.rdata$r:00000FFA                 db    0
.rdata$r:00000FFB                 db    0
.rdata$r:00000FFC                 db    0
.rdata$r:00000FFD                 db    0
.rdata$r:00000FFE                 db    0
.rdata$r:00000FFF                 db    0
.rdata$r:00001000                 db 0FFh
.rdata$r:00001001                 db 0FFh
.rdata$r:00001002                 db 0FFh
.rdata$r:00001003                 db 0FFh
.rdata$r:00001004                 db    0
.rdata$r:00001005                 db    0
.rdata$r:00001006                 db    0
.rdata$r:00001007                 db    0
.rdata$r:00001008                 db  40h ; @
.rdata$r:00001009                 db    0
.rdata$r:0000100A                 db    0
.rdata$r:0000100B                 db    0
.rdata$r:0000100C                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000100C _rdata$r        ends
.rdata$r:0000100C
.rdata$r:00001010 ; ===========================================================================
.rdata$r:00001010
.rdata$r:00001010 ; Segment type: Pure data
.rdata$r:00001010 ; Segment permissions: Read
.rdata$r:00001010 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001010                 assume cs:_rdata$r
.rdata$r:00001010                 ;org 1010h
.rdata$r:00001010 ; COMDAT (pick any)
.rdata$r:00001010                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:00001010 ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:00001010 ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001010                                         ; DATA XREF: .rdata$r:00000CC0o
.rdata$r:00001010                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001014                 align 8
.rdata$r:00001018                 db  10h
.rdata$r:00001019                 db    0
.rdata$r:0000101A                 db    0
.rdata$r:0000101B                 db    0
.rdata$r:0000101C                 db 0FFh
.rdata$r:0000101D                 db 0FFh
.rdata$r:0000101E                 db 0FFh
.rdata$r:0000101F                 db 0FFh
.rdata$r:00001020                 db    0
.rdata$r:00001021                 db    0
.rdata$r:00001022                 db    0
.rdata$r:00001023                 db    0
.rdata$r:00001024                 db  42h ; B
.rdata$r:00001025                 db    0
.rdata$r:00001026                 db    0
.rdata$r:00001027                 db    0
.rdata$r:00001028                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001028 _rdata$r        ends
.rdata$r:00001028
.rdata$r:0000102C ; ===========================================================================
.rdata$r:0000102C
.rdata$r:0000102C ; Segment type: Pure data
.rdata$r:0000102C ; Segment permissions: Read
.rdata$r:0000102C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000102C                 assume cs:_rdata$r
.rdata$r:0000102C                 ;org 102Ch
.rdata$r:0000102C ; COMDAT (pick any)
.rdata$r:0000102C                 public ??_R1BE@?0A@EA@ICompressSetInStream@@8
.rdata$r:0000102C ; ICompressSetInStream::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:0000102C ??_R1BE@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:0000102C                                         ; DATA XREF: .rdata$r:00000CC4o
.rdata$r:0000102C                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00001030                 db    1
.rdata$r:00001031                 db    0
.rdata$r:00001032                 db    0
.rdata$r:00001033                 db    0
.rdata$r:00001034                 db  14h
.rdata$r:00001035                 db    0
.rdata$r:00001036                 db    0
.rdata$r:00001037                 db    0
.rdata$r:00001038                 db 0FFh
.rdata$r:00001039                 db 0FFh
.rdata$r:0000103A                 db 0FFh
.rdata$r:0000103B                 db 0FFh
.rdata$r:0000103C                 db    0
.rdata$r:0000103D                 db    0
.rdata$r:0000103E                 db    0
.rdata$r:0000103F                 db    0
.rdata$r:00001040                 db  40h ; @
.rdata$r:00001041                 db    0
.rdata$r:00001042                 db    0
.rdata$r:00001043                 db    0
.rdata$r:00001044                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001044 _rdata$r        ends
.rdata$r:00001044
.data:00001048 ; ===========================================================================
.data:00001048
.data:00001048 ; Segment type: Pure data
.data:00001048 ; Segment permissions: Read/Write
.data:00001048 _data           segment dword public 'DATA' use32
.data:00001048                 assume cs:_data
.data:00001048                 ;org 1048h
.data:00001048 ; COMDAT (pick any)
.data:00001048                 public ??_R0?AUICompressSetInStream@@@8
.data:00001048 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:00001048 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:00001048                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (20,-1,0,64)'o
.data:00001048                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001048                                         ; const type_info::`vftable'
.data:0000104C                 align 10h
.data:00001050 a_?auicompresss db '.?AUICompressSetInStream@@',0
.data:0000106B                 align 4
.data:0000106B _data           ends
.data:0000106B
.rdata$r:0000106C ; ===========================================================================
.rdata$r:0000106C
.rdata$r:0000106C ; Segment type: Pure data
.rdata$r:0000106C ; Segment permissions: Read
.rdata$r:0000106C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000106C                 assume cs:_rdata$r
.rdata$r:0000106C                 ;org 106Ch
.rdata$r:0000106C ; COMDAT (pick any)
.rdata$r:0000106C                 public ??_R3ICompressSetInStream@@8
.rdata$r:0000106C ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000106C ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:00001044o
.rdata$r:0000106C                                         ; .rdata$r:000010A0o ...
.rdata$r:0000106D                 db    0
.rdata$r:0000106E                 db    0
.rdata$r:0000106F                 db    0
.rdata$r:00001070                 db    0
.rdata$r:00001071                 db    0
.rdata$r:00001072                 db    0
.rdata$r:00001073                 db    0
.rdata$r:00001074                 db    2
.rdata$r:00001075                 db    0
.rdata$r:00001076                 db    0
.rdata$r:00001077                 db    0
.rdata$r:00001078                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00001078 _rdata$r        ends
.rdata$r:00001078
.rdata$r:0000107C ; ===========================================================================
.rdata$r:0000107C
.rdata$r:0000107C ; Segment type: Pure data
.rdata$r:0000107C ; Segment permissions: Read
.rdata$r:0000107C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000107C                 assume cs:_rdata$r
.rdata$r:0000107C                 ;org 107Ch
.rdata$r:0000107C ; COMDAT (pick any)
.rdata$r:0000107C                 public ??_R2ICompressSetInStream@@8
.rdata$r:0000107C ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:0000107C ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:0000107C                                         ; DATA XREF: .rdata$r:00001078o
.rdata$r:0000107C                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001080                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001084                 db    0
.rdata$r:00001085                 align 4
.rdata$r:00001085 _rdata$r        ends
.rdata$r:00001085
.rdata$r:00001088 ; ===========================================================================
.rdata$r:00001088
.rdata$r:00001088 ; Segment type: Pure data
.rdata$r:00001088 ; Segment permissions: Read
.rdata$r:00001088 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001088                 assume cs:_rdata$r
.rdata$r:00001088                 ;org 1088h
.rdata$r:00001088 ; COMDAT (pick any)
.rdata$r:00001088                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00001088 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001088 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00001088                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:00001088                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:0000108C                 db    1
.rdata$r:0000108D                 db    0
.rdata$r:0000108E                 db    0
.rdata$r:0000108F                 db    0
.rdata$r:00001090                 db    0
.rdata$r:00001091                 db    0
.rdata$r:00001092                 db    0
.rdata$r:00001093                 db    0
.rdata$r:00001094                 db 0FFh
.rdata$r:00001095                 db 0FFh
.rdata$r:00001096                 db 0FFh
.rdata$r:00001097                 db 0FFh
.rdata$r:00001098                 db    0
.rdata$r:00001099                 db    0
.rdata$r:0000109A                 db    0
.rdata$r:0000109B                 db    0
.rdata$r:0000109C                 db  40h ; @
.rdata$r:0000109D                 db    0
.rdata$r:0000109E                 db    0
.rdata$r:0000109F                 db    0
.rdata$r:000010A0                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010A0 _rdata$r        ends
.rdata$r:000010A0
.rdata$r:000010A4 ; ===========================================================================
.rdata$r:000010A4
.rdata$r:000010A4 ; Segment type: Pure data
.rdata$r:000010A4 ; Segment permissions: Read
.rdata$r:000010A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010A4                 assume cs:_rdata$r
.rdata$r:000010A4                 ;org 10A4h
.rdata$r:000010A4 ; COMDAT (pick any)
.rdata$r:000010A4                 public ??_R1BE@?0A@EC@IUnknown@@8
.rdata$r:000010A4 ; IUnknown::`RTTI Base Class Descriptor at (20, -1, 0, 66)'
.rdata$r:000010A4 ??_R1BE@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000010A4                                         ; DATA XREF: .rdata$r:00000CC8o
.rdata$r:000010A4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000010A8                 db    0
.rdata$r:000010A9                 db    0
.rdata$r:000010AA                 db    0
.rdata$r:000010AB                 db    0
.rdata$r:000010AC                 db  14h
.rdata$r:000010AD                 db    0
.rdata$r:000010AE                 db    0
.rdata$r:000010AF                 db    0
.rdata$r:000010B0                 db 0FFh
.rdata$r:000010B1                 db 0FFh
.rdata$r:000010B2                 db 0FFh
.rdata$r:000010B3                 db 0FFh
.rdata$r:000010B4                 db    0
.rdata$r:000010B5                 db    0
.rdata$r:000010B6                 db    0
.rdata$r:000010B7                 db    0
.rdata$r:000010B8                 db  42h ; B
.rdata$r:000010B9                 db    0
.rdata$r:000010BA                 db    0
.rdata$r:000010BB                 db    0
.rdata$r:000010BC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010BC _rdata$r        ends
.rdata$r:000010BC
.rdata$r:000010C0 ; ===========================================================================
.rdata$r:000010C0
.rdata$r:000010C0 ; Segment type: Pure data
.rdata$r:000010C0 ; Segment permissions: Read
.rdata$r:000010C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010C0                 assume cs:_rdata$r
.rdata$r:000010C0                 ;org 10C0h
.rdata$r:000010C0 ; COMDAT (pick any)
.rdata$r:000010C0                 public ??_R1BI@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:000010C0 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (24, -1, 0, 64)'
.rdata$r:000010C0 ??_R1BI@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:000010C0                                         ; DATA XREF: .rdata$r:00000CCCo
.rdata$r:000010C0                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:000010C4                 db    1
.rdata$r:000010C5                 db    0
.rdata$r:000010C6                 db    0
.rdata$r:000010C7                 db    0
.rdata$r:000010C8                 db  18h
.rdata$r:000010C9                 db    0
.rdata$r:000010CA                 db    0
.rdata$r:000010CB                 db    0
.rdata$r:000010CC                 db 0FFh
.rdata$r:000010CD                 db 0FFh
.rdata$r:000010CE                 db 0FFh
.rdata$r:000010CF                 db 0FFh
.rdata$r:000010D0                 db    0
.rdata$r:000010D1                 db    0
.rdata$r:000010D2                 db    0
.rdata$r:000010D3                 db    0
.rdata$r:000010D4                 db  40h ; @
.rdata$r:000010D5                 db    0
.rdata$r:000010D6                 db    0
.rdata$r:000010D7                 db    0
.rdata$r:000010D8                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010D8 _rdata$r        ends
.rdata$r:000010D8
.data:000010DC ; ===========================================================================
.data:000010DC
.data:000010DC ; Segment type: Pure data
.data:000010DC ; Segment permissions: Read/Write
.data:000010DC _data           segment dword public 'DATA' use32
.data:000010DC                 assume cs:_data
.data:000010DC                 ;org 10DCh
.data:000010DC ; COMDAT (pick any)
.data:000010DC                 public ??_R0?AUICompressSetOutStreamSize@@@8
.data:000010DC ; struct ICompressSetOutStreamSize `RTTI Type Descriptor'
.data:000010DC ??_R0?AUICompressSetOutStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:000010DC                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (24,-1,0,64)'o
.data:000010DC                                         ; .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000010DC                                         ; const type_info::`vftable'
.data:000010E0                 db    0
.data:000010E1                 db    0
.data:000010E2                 db    0
.data:000010E3                 db    0
.data:000010E4                 db  2Eh ; .
.data:000010E5                 db  3Fh ; ?
.data:000010E6                 db  41h ; A
.data:000010E7                 db  55h ; U
.data:000010E8                 db  49h ; I
.data:000010E9                 db  43h ; C
.data:000010EA                 db  6Fh ; o
.data:000010EB                 db  6Dh ; m
.data:000010EC                 db  70h ; p
.data:000010ED                 db  72h ; r
.data:000010EE                 db  65h ; e
.data:000010EF                 db  73h ; s
.data:000010F0                 db  73h ; s
.data:000010F1                 db  53h ; S
.data:000010F2                 db  65h ; e
.data:000010F3                 db  74h ; t
.data:000010F4                 db  4Fh ; O
.data:000010F5                 db  75h ; u
.data:000010F6                 db  74h ; t
.data:000010F7                 db  53h ; S
.data:000010F8                 db  74h ; t
.data:000010F9                 db  72h ; r
.data:000010FA                 db  65h ; e
.data:000010FB                 db  61h ; a
.data:000010FC                 db  6Dh ; m
.data:000010FD                 db  53h ; S
.data:000010FE                 db  69h ; i
.data:000010FF                 db  7Ah ; z
.data:00001100                 db  65h ; e
.data:00001101                 db  40h ; @
.data:00001102                 db  40h ; @
.data:00001103                 db    0
.data:00001103 _data           ends
.data:00001103
.rdata$r:00001104 ; ===========================================================================
.rdata$r:00001104
.rdata$r:00001104 ; Segment type: Pure data
.rdata$r:00001104 ; Segment permissions: Read
.rdata$r:00001104 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001104                 assume cs:_rdata$r
.rdata$r:00001104                 ;org 1104h
.rdata$r:00001104 ; COMDAT (pick any)
.rdata$r:00001104                 public ??_R3ICompressSetOutStreamSize@@8
.rdata$r:00001104 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001104 ??_R3ICompressSetOutStreamSize@@8 db    0 ; DATA XREF: .rdata$r:000010D8o
.rdata$r:00001104                                         ; .rdata$r:00001138o ...
.rdata$r:00001105                 db    0
.rdata$r:00001106                 db    0
.rdata$r:00001107                 db    0
.rdata$r:00001108                 db    0
.rdata$r:00001109                 db    0
.rdata$r:0000110A                 db    0
.rdata$r:0000110B                 db    0
.rdata$r:0000110C                 db    2
.rdata$r:0000110D                 db    0
.rdata$r:0000110E                 db    0
.rdata$r:0000110F                 db    0
.rdata$r:00001110                 dd offset ??_R2ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00001110 _rdata$r        ends
.rdata$r:00001110
.rdata$r:00001114 ; ===========================================================================
.rdata$r:00001114
.rdata$r:00001114 ; Segment type: Pure data
.rdata$r:00001114 ; Segment permissions: Read
.rdata$r:00001114 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001114                 assume cs:_rdata$r
.rdata$r:00001114                 ;org 1114h
.rdata$r:00001114 ; COMDAT (pick any)
.rdata$r:00001114                 public ??_R2ICompressSetOutStreamSize@@8
.rdata$r:00001114 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00001114 ??_R2ICompressSetOutStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00001114                                         ; DATA XREF: .rdata$r:00001110o
.rdata$r:00001114                                         ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001118                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000111C                 db    0
.rdata$r:0000111D                 align 10h
.rdata$r:0000111D _rdata$r        ends
.rdata$r:0000111D
.rdata$r:00001120 ; ===========================================================================
.rdata$r:00001120
.rdata$r:00001120 ; Segment type: Pure data
.rdata$r:00001120 ; Segment permissions: Read
.rdata$r:00001120 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001120                 assume cs:_rdata$r
.rdata$r:00001120                 ;org 1120h
.rdata$r:00001120 ; COMDAT (pick any)
.rdata$r:00001120                 public ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00001120 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001120 ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:00001120                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Array'o
.rdata$r:00001120                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00001124                 db    1
.rdata$r:00001125                 db    0
.rdata$r:00001126                 db    0
.rdata$r:00001127                 db    0
.rdata$r:00001128                 db    0
.rdata$r:00001129                 db    0
.rdata$r:0000112A                 db    0
.rdata$r:0000112B                 db    0
.rdata$r:0000112C                 db 0FFh
.rdata$r:0000112D                 db 0FFh
.rdata$r:0000112E                 db 0FFh
.rdata$r:0000112F                 db 0FFh
.rdata$r:00001130                 db    0
.rdata$r:00001131                 db    0
.rdata$r:00001132                 db    0
.rdata$r:00001133                 db    0
.rdata$r:00001134                 db  40h ; @
.rdata$r:00001135                 db    0
.rdata$r:00001136                 db    0
.rdata$r:00001137                 db    0
.rdata$r:00001138                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001138 _rdata$r        ends
.rdata$r:00001138
.rdata$r:0000113C ; ===========================================================================
.rdata$r:0000113C
.rdata$r:0000113C ; Segment type: Pure data
.rdata$r:0000113C ; Segment permissions: Read
.rdata$r:0000113C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000113C                 assume cs:_rdata$r
.rdata$r:0000113C                 ;org 113Ch
.rdata$r:0000113C ; COMDAT (pick any)
.rdata$r:0000113C                 public ??_R1BI@?0A@EC@IUnknown@@8
.rdata$r:0000113C ; IUnknown::`RTTI Base Class Descriptor at (24, -1, 0, 66)'
.rdata$r:0000113C ??_R1BI@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000113C                                         ; DATA XREF: .rdata$r:00000CD0o
.rdata$r:0000113C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001140                 db    0
.rdata$r:00001141                 db    0
.rdata$r:00001142                 db    0
.rdata$r:00001143                 db    0
.rdata$r:00001144                 db  18h
.rdata$r:00001145                 db    0
.rdata$r:00001146                 db    0
.rdata$r:00001147                 db    0
.rdata$r:00001148                 db 0FFh
.rdata$r:00001149                 db 0FFh
.rdata$r:0000114A                 db 0FFh
.rdata$r:0000114B                 db 0FFh
.rdata$r:0000114C                 db    0
.rdata$r:0000114D                 db    0
.rdata$r:0000114E                 db    0
.rdata$r:0000114F                 db    0
.rdata$r:00001150                 db  42h ; B
.rdata$r:00001151                 db    0
.rdata$r:00001152                 db    0
.rdata$r:00001153                 db    0
.rdata$r:00001154                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001154 _rdata$r        ends
.rdata$r:00001154
.rdata$r:00001158 ; ===========================================================================
.rdata$r:00001158
.rdata$r:00001158 ; Segment type: Pure data
.rdata$r:00001158 ; Segment permissions: Read
.rdata$r:00001158 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001158                 assume cs:_rdata$r
.rdata$r:00001158                 ;org 1158h
.rdata$r:00001158 ; COMDAT (pick any)
.rdata$r:00001158                 public ??_R1BM@?0A@EA@ISequentialInStream@@8
.rdata$r:00001158 ; ISequentialInStream::`RTTI Base Class Descriptor at (28, -1, 0, 64)'
.rdata$r:00001158 ??_R1BM@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00001158                                         ; DATA XREF: .rdata$r:00000CD4o
.rdata$r:00001158                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:0000115C                 db    1
.rdata$r:0000115D                 db    0
.rdata$r:0000115E                 db    0
.rdata$r:0000115F                 db    0
.rdata$r:00001160                 db  1Ch
.rdata$r:00001161                 db    0
.rdata$r:00001162                 db    0
.rdata$r:00001163                 db    0
.rdata$r:00001164                 db 0FFh
.rdata$r:00001165                 db 0FFh
.rdata$r:00001166                 db 0FFh
.rdata$r:00001167                 db 0FFh
.rdata$r:00001168                 db    0
.rdata$r:00001169                 db    0
.rdata$r:0000116A                 db    0
.rdata$r:0000116B                 db    0
.rdata$r:0000116C                 db  40h ; @
.rdata$r:0000116D                 db    0
.rdata$r:0000116E                 db    0
.rdata$r:0000116F                 db    0
.rdata$r:00001170                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001170 _rdata$r        ends
.rdata$r:00001170
.data:00001174 ; ===========================================================================
.data:00001174
.data:00001174 ; Segment type: Pure data
.data:00001174 ; Segment permissions: Read/Write
.data:00001174 _data           segment dword public 'DATA' use32
.data:00001174                 assume cs:_data
.data:00001174                 ;org 1174h
.data:00001174 ; COMDAT (pick any)
.data:00001174                 public ??_R0?AUISequentialInStream@@@8
.data:00001174 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00001174 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00001174                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (28,-1,0,64)'o
.data:00001174                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001174                                         ; const type_info::`vftable'
.data:00001178                 db    0
.data:00001179                 db    0
.data:0000117A                 db    0
.data:0000117B                 db    0
.data:0000117C                 db  2Eh ; .
.data:0000117D                 db  3Fh ; ?
.data:0000117E                 db  41h ; A
.data:0000117F                 db  55h ; U
.data:00001180                 db  49h ; I
.data:00001181                 db  53h ; S
.data:00001182                 db  65h ; e
.data:00001183                 db  71h ; q
.data:00001184                 db  75h ; u
.data:00001185                 db  65h ; e
.data:00001186                 db  6Eh ; n
.data:00001187                 db  74h ; t
.data:00001188                 db  69h ; i
.data:00001189                 db  61h ; a
.data:0000118A                 db  6Ch ; l
.data:0000118B                 db  49h ; I
.data:0000118C                 db  6Eh ; n
.data:0000118D                 db  53h ; S
.data:0000118E                 db  74h ; t
.data:0000118F                 db  72h ; r
.data:00001190                 db  65h ; e
.data:00001191                 db  61h ; a
.data:00001192                 db  6Dh ; m
.data:00001193                 db  40h ; @
.data:00001194                 db  40h ; @
.data:00001195                 db    0
.data:00001196                 align 4
.data:00001196 _data           ends
.data:00001196
.rdata$r:00001198 ; ===========================================================================
.rdata$r:00001198
.rdata$r:00001198 ; Segment type: Pure data
.rdata$r:00001198 ; Segment permissions: Read
.rdata$r:00001198 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001198                 assume cs:_rdata$r
.rdata$r:00001198                 ;org 1198h
.rdata$r:00001198 ; COMDAT (pick any)
.rdata$r:00001198                 public ??_R3ISequentialInStream@@8
.rdata$r:00001198 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001198 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00001170o
.rdata$r:00001198                                         ; .rdata$r:000011CCo ...
.rdata$r:00001199                 db    0
.rdata$r:0000119A                 db    0
.rdata$r:0000119B                 db    0
.rdata$r:0000119C                 db    0
.rdata$r:0000119D                 db    0
.rdata$r:0000119E                 db    0
.rdata$r:0000119F                 db    0
.rdata$r:000011A0                 db    2
.rdata$r:000011A1                 db    0
.rdata$r:000011A2                 db    0
.rdata$r:000011A3                 db    0
.rdata$r:000011A4                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:000011A4 _rdata$r        ends
.rdata$r:000011A4
.rdata$r:000011A8 ; ===========================================================================
.rdata$r:000011A8
.rdata$r:000011A8 ; Segment type: Pure data
.rdata$r:000011A8 ; Segment permissions: Read
.rdata$r:000011A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011A8                 assume cs:_rdata$r
.rdata$r:000011A8                 ;org 11A8h
.rdata$r:000011A8 ; COMDAT (pick any)
.rdata$r:000011A8                 public ??_R2ISequentialInStream@@8
.rdata$r:000011A8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:000011A8 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:000011A8                                         ; DATA XREF: .rdata$r:000011A4o
.rdata$r:000011A8                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000011AC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000011B0                 db    0
.rdata$r:000011B1                 align 4
.rdata$r:000011B1 _rdata$r        ends
.rdata$r:000011B1
.rdata$r:000011B4 ; ===========================================================================
.rdata$r:000011B4
.rdata$r:000011B4 ; Segment type: Pure data
.rdata$r:000011B4 ; Segment permissions: Read
.rdata$r:000011B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011B4                 assume cs:_rdata$r
.rdata$r:000011B4                 ;org 11B4h
.rdata$r:000011B4 ; COMDAT (pick any)
.rdata$r:000011B4                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:000011B4 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000011B4 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:000011B4                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:000011B4                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000011B8                 db    1
.rdata$r:000011B9                 db    0
.rdata$r:000011BA                 db    0
.rdata$r:000011BB                 db    0
.rdata$r:000011BC                 db    0
.rdata$r:000011BD                 db    0
.rdata$r:000011BE                 db    0
.rdata$r:000011BF                 db    0
.rdata$r:000011C0                 db 0FFh
.rdata$r:000011C1                 db 0FFh
.rdata$r:000011C2                 db 0FFh
.rdata$r:000011C3                 db 0FFh
.rdata$r:000011C4                 db    0
.rdata$r:000011C5                 db    0
.rdata$r:000011C6                 db    0
.rdata$r:000011C7                 db    0
.rdata$r:000011C8                 db  40h ; @
.rdata$r:000011C9                 db    0
.rdata$r:000011CA                 db    0
.rdata$r:000011CB                 db    0
.rdata$r:000011CC                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011CC _rdata$r        ends
.rdata$r:000011CC
.rdata$r:000011D0 ; ===========================================================================
.rdata$r:000011D0
.rdata$r:000011D0 ; Segment type: Pure data
.rdata$r:000011D0 ; Segment permissions: Read
.rdata$r:000011D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011D0                 assume cs:_rdata$r
.rdata$r:000011D0                 ;org 11D0h
.rdata$r:000011D0 ; COMDAT (pick any)
.rdata$r:000011D0                 public ??_R1BM@?0A@EC@IUnknown@@8
.rdata$r:000011D0 ; IUnknown::`RTTI Base Class Descriptor at (28, -1, 0, 66)'
.rdata$r:000011D0 ??_R1BM@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000011D0                                         ; DATA XREF: .rdata$r:00000CD8o
.rdata$r:000011D0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000011D4                 align 8
.rdata$r:000011D8                 db  1Ch
.rdata$r:000011D9                 db    0
.rdata$r:000011DA                 db    0
.rdata$r:000011DB                 db    0
.rdata$r:000011DC                 db 0FFh
.rdata$r:000011DD                 db 0FFh
.rdata$r:000011DE                 db 0FFh
.rdata$r:000011DF                 db 0FFh
.rdata$r:000011E0                 db    0
.rdata$r:000011E1                 db    0
.rdata$r:000011E2                 db    0
.rdata$r:000011E3                 db    0
.rdata$r:000011E4                 db  42h ; B
.rdata$r:000011E5                 db    0
.rdata$r:000011E6                 db    0
.rdata$r:000011E7                 db    0
.rdata$r:000011E8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011E8 _rdata$r        ends
.rdata$r:000011E8
.rdata$r:000011EC ; ===========================================================================
.rdata$r:000011EC
.rdata$r:000011EC ; Segment type: Pure data
.rdata$r:000011EC ; Segment permissions: Read
.rdata$r:000011EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011EC                 assume cs:_rdata$r
.rdata$r:000011EC                 ;org 11ECh
.rdata$r:000011EC ; COMDAT (pick any)
.rdata$r:000011EC                 public ??_R1CA@?0A@EA@CMyUnknownImp@@8
.rdata$r:000011EC ; CMyUnknownImp::`RTTI Base Class Descriptor at (32, -1, 0, 64)'
.rdata$r:000011EC ??_R1CA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000011EC                                         ; DATA XREF: .rdata$r:00000CDCo
.rdata$r:000011EC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000011F0                 db    0
.rdata$r:000011F1                 db    0
.rdata$r:000011F2                 db    0
.rdata$r:000011F3                 db    0
.rdata$r:000011F4                 db  20h
.rdata$r:000011F5                 db    0
.rdata$r:000011F6                 db    0
.rdata$r:000011F7                 db    0
.rdata$r:000011F8                 db 0FFh
.rdata$r:000011F9                 db 0FFh
.rdata$r:000011FA                 db 0FFh
.rdata$r:000011FB                 db 0FFh
.rdata$r:000011FC                 db    0
.rdata$r:000011FD                 db    0
.rdata$r:000011FE                 db    0
.rdata$r:000011FF                 db    0
.rdata$r:00001200                 db  40h ; @
.rdata$r:00001201                 db    0
.rdata$r:00001202                 db    0
.rdata$r:00001203                 db    0
.rdata$r:00001204                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001204 _rdata$r        ends
.rdata$r:00001204
.data:00001208 ; ===========================================================================
.data:00001208
.data:00001208 ; Segment type: Pure data
.data:00001208 ; Segment permissions: Read/Write
.data:00001208 _data           segment dword public 'DATA' use32
.data:00001208                 assume cs:_data
.data:00001208                 ;org 1208h
.data:00001208 ; COMDAT (pick any)
.data:00001208                 public ??_R0?AVCMyUnknownImp@@@8
.data:00001208 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00001208 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00001208                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (32,-1,0,64)'o
.data:00001208                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001208                                         ; const type_info::`vftable'
.data:0000120C                 align 10h
.data:00001210 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00001210 _data           ends
.data:00001210
.rdata$r:00001224 ; ===========================================================================
.rdata$r:00001224
.rdata$r:00001224 ; Segment type: Pure data
.rdata$r:00001224 ; Segment permissions: Read
.rdata$r:00001224 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001224                 assume cs:_rdata$r
.rdata$r:00001224                 ;org 1224h
.rdata$r:00001224 ; COMDAT (pick any)
.rdata$r:00001224                 public ??_R3CMyUnknownImp@@8
.rdata$r:00001224 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001224 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00001204o
.rdata$r:00001224                                         ; .rdata$r:00001254o
.rdata$r:00001225                 db    0
.rdata$r:00001226                 db    0
.rdata$r:00001227                 db    0
.rdata$r:00001228                 db    0
.rdata$r:00001229                 db    0
.rdata$r:0000122A                 db    0
.rdata$r:0000122B                 db    0
.rdata$r:0000122C                 db    1
.rdata$r:0000122D                 db    0
.rdata$r:0000122E                 db    0
.rdata$r:0000122F                 db    0
.rdata$r:00001230                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00001230 _rdata$r        ends
.rdata$r:00001230
.rdata$r:00001234 ; ===========================================================================
.rdata$r:00001234
.rdata$r:00001234 ; Segment type: Pure data
.rdata$r:00001234 ; Segment permissions: Read
.rdata$r:00001234 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001234                 assume cs:_rdata$r
.rdata$r:00001234                 ;org 1234h
.rdata$r:00001234 ; COMDAT (pick any)
.rdata$r:00001234                 public ??_R2CMyUnknownImp@@8
.rdata$r:00001234 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00001234 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00001234                                         ; DATA XREF: .rdata$r:00001230o
.rdata$r:00001234                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001238                 db    0
.rdata$r:00001239                 align 4
.rdata$r:00001239 _rdata$r        ends
.rdata$r:00001239
.rdata$r:0000123C ; ===========================================================================
.rdata$r:0000123C
.rdata$r:0000123C ; Segment type: Pure data
.rdata$r:0000123C ; Segment permissions: Read
.rdata$r:0000123C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000123C                 assume cs:_rdata$r
.rdata$r:0000123C                 ;org 123Ch
.rdata$r:0000123C ; COMDAT (pick any)
.rdata$r:0000123C                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000123C ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000123C ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000123C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:0000123C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00001240                 db    0
.rdata$r:00001241                 db    0
.rdata$r:00001242                 db    0
.rdata$r:00001243                 db    0
.rdata$r:00001244                 db    0
.rdata$r:00001245                 db    0
.rdata$r:00001246                 db    0
.rdata$r:00001247                 db    0
.rdata$r:00001248                 db 0FFh
.rdata$r:00001249                 db 0FFh
.rdata$r:0000124A                 db 0FFh
.rdata$r:0000124B                 db 0FFh
.rdata$r:0000124C                 db    0
.rdata$r:0000124D                 db    0
.rdata$r:0000124E                 db    0
.rdata$r:0000124F                 db    0
.rdata$r:00001250                 db  40h ; @
.rdata$r:00001251                 db    0
.rdata$r:00001252                 db    0
.rdata$r:00001253                 db    0
.rdata$r:00001254                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001254 _rdata$r        ends
.rdata$r:00001254
.rdata$r:00001258 ; ===========================================================================
.rdata$r:00001258
.rdata$r:00001258 ; Segment type: Pure data
.rdata$r:00001258 ; Segment permissions: Read
.rdata$r:00001258 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001258                 assume cs:_rdata$r
.rdata$r:00001258                 ;org 1258h
.rdata$r:00001258 ; COMDAT (pick any)
.rdata$r:00001258                 public ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetDecoderProperties2@@@
.rdata$r:00001258 ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata$r:00001258 ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetDecoderProperties2@@@ db    0
.rdata$r:00001258                                         ; DATA XREF: .rdata:00000C18o
.rdata$r:00001259                 db    0
.rdata$r:0000125A                 db    0
.rdata$r:0000125B                 db    0
.rdata$r:0000125C                 db    4
.rdata$r:0000125D                 db    0
.rdata$r:0000125E                 db    0
.rdata$r:0000125F                 db    0
.rdata$r:00001260                 db    0
.rdata$r:00001261                 db    0
.rdata$r:00001262                 db    0
.rdata$r:00001263                 db    0
.rdata$r:00001264                 dd offset ??_R0?AVCDecoder@NLzma2@NCompress@@@8 ; NCompress::NLzma2::CDecoder `RTTI Type Descriptor'
.rdata$r:00001268                 dd offset ??_R3CDecoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001268 _rdata$r        ends
.rdata$r:00001268
.rdata$r:0000126C ; ===========================================================================
.rdata$r:0000126C
.rdata$r:0000126C ; Segment type: Pure data
.rdata$r:0000126C ; Segment permissions: Read
.rdata$r:0000126C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000126C                 assume cs:_rdata$r
.rdata$r:0000126C                 ;org 126Ch
.rdata$r:0000126C ; COMDAT (pick any)
.rdata$r:0000126C                 public ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetFinishMode@@@
.rdata$r:0000126C ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetFinishMode'}
.rdata$r:0000126C ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetFinishMode@@@ db    0
.rdata$r:0000126C                                         ; DATA XREF: .rdata:00000C04o
.rdata$r:0000126D                 db    0
.rdata$r:0000126E                 db    0
.rdata$r:0000126F                 db    0
.rdata$r:00001270                 db    8
.rdata$r:00001271                 db    0
.rdata$r:00001272                 db    0
.rdata$r:00001273                 db    0
.rdata$r:00001274                 db    0
.rdata$r:00001275                 db    0
.rdata$r:00001276                 db    0
.rdata$r:00001277                 db    0
.rdata$r:00001278                 dd offset ??_R0?AVCDecoder@NLzma2@NCompress@@@8 ; NCompress::NLzma2::CDecoder `RTTI Type Descriptor'
.rdata$r:0000127C                 dd offset ??_R3CDecoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000127C _rdata$r        ends
.rdata$r:0000127C
.rdata$r:00001280 ; ===========================================================================
.rdata$r:00001280
.rdata$r:00001280 ; Segment type: Pure data
.rdata$r:00001280 ; Segment permissions: Read
.rdata$r:00001280 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001280                 assume cs:_rdata$r
.rdata$r:00001280                 ;org 1280h
.rdata$r:00001280 ; COMDAT (pick any)
.rdata$r:00001280                 public ??_R4CDecoder@NLzma2@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:00001280 ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:00001280 ??_R4CDecoder@NLzma2@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:00001280                                         ; DATA XREF: .rdata:00000BF0o
.rdata$r:00001281                 db    0
.rdata$r:00001282                 db    0
.rdata$r:00001283                 db    0
.rdata$r:00001284                 db  0Ch
.rdata$r:00001285                 db    0
.rdata$r:00001286                 db    0
.rdata$r:00001287                 db    0
.rdata$r:00001288                 db    0
.rdata$r:00001289                 db    0
.rdata$r:0000128A                 db    0
.rdata$r:0000128B                 db    0
.rdata$r:0000128C                 dd offset ??_R0?AVCDecoder@NLzma2@NCompress@@@8 ; NCompress::NLzma2::CDecoder `RTTI Type Descriptor'
.rdata$r:00001290                 dd offset ??_R3CDecoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001290 _rdata$r        ends
.rdata$r:00001290
.rdata$r:00001294 ; ===========================================================================
.rdata$r:00001294
.rdata$r:00001294 ; Segment type: Pure data
.rdata$r:00001294 ; Segment permissions: Read
.rdata$r:00001294 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001294                 assume cs:_rdata$r
.rdata$r:00001294                 ;org 1294h
.rdata$r:00001294 ; COMDAT (pick any)
.rdata$r:00001294                 public ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetBufSize@@@
.rdata$r:00001294 ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetBufSize'}
.rdata$r:00001294 ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetBufSize@@@ db    0
.rdata$r:00001294                                         ; DATA XREF: .rdata:00000BD8o
.rdata$r:00001295                 db    0
.rdata$r:00001296                 db    0
.rdata$r:00001297                 db    0
.rdata$r:00001298                 db  10h
.rdata$r:00001299                 db    0
.rdata$r:0000129A                 db    0
.rdata$r:0000129B                 db    0
.rdata$r:0000129C                 db    0
.rdata$r:0000129D                 db    0
.rdata$r:0000129E                 db    0
.rdata$r:0000129F                 db    0
.rdata$r:000012A0                 dd offset ??_R0?AVCDecoder@NLzma2@NCompress@@@8 ; NCompress::NLzma2::CDecoder `RTTI Type Descriptor'
.rdata$r:000012A4                 dd offset ??_R3CDecoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012A4 _rdata$r        ends
.rdata$r:000012A4
.rdata$r:000012A8 ; ===========================================================================
.rdata$r:000012A8
.rdata$r:000012A8 ; Segment type: Pure data
.rdata$r:000012A8 ; Segment permissions: Read
.rdata$r:000012A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012A8                 assume cs:_rdata$r
.rdata$r:000012A8                 ;org 12A8h
.rdata$r:000012A8 ; COMDAT (pick any)
.rdata$r:000012A8                 public ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetInStream@@@
.rdata$r:000012A8 ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:000012A8 ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:000012A8                                         ; DATA XREF: .rdata:00000BC0o
.rdata$r:000012A9                 db    0
.rdata$r:000012AA                 db    0
.rdata$r:000012AB                 db    0
.rdata$r:000012AC                 db  14h
.rdata$r:000012AD                 db    0
.rdata$r:000012AE                 db    0
.rdata$r:000012AF                 db    0
.rdata$r:000012B0                 db    0
.rdata$r:000012B1                 db    0
.rdata$r:000012B2                 db    0
.rdata$r:000012B3                 db    0
.rdata$r:000012B4                 dd offset ??_R0?AVCDecoder@NLzma2@NCompress@@@8 ; NCompress::NLzma2::CDecoder `RTTI Type Descriptor'
.rdata$r:000012B8                 dd offset ??_R3CDecoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012B8 _rdata$r        ends
.rdata$r:000012B8
.rdata$r:000012BC ; ===========================================================================
.rdata$r:000012BC
.rdata$r:000012BC ; Segment type: Pure data
.rdata$r:000012BC ; Segment permissions: Read
.rdata$r:000012BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012BC                 assume cs:_rdata$r
.rdata$r:000012BC                 ;org 12BCh
.rdata$r:000012BC ; COMDAT (pick any)
.rdata$r:000012BC                 public ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:000012BC ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:000012BC ??_R4CDecoder@NLzma2@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:000012BC                                         ; DATA XREF: .rdata:00000BACo
.rdata$r:000012BD                 db    0
.rdata$r:000012BE                 db    0
.rdata$r:000012BF                 db    0
.rdata$r:000012C0                 db  18h
.rdata$r:000012C1                 db    0
.rdata$r:000012C2                 db    0
.rdata$r:000012C3                 db    0
.rdata$r:000012C4                 db    0
.rdata$r:000012C5                 db    0
.rdata$r:000012C6                 db    0
.rdata$r:000012C7                 db    0
.rdata$r:000012C8                 dd offset ??_R0?AVCDecoder@NLzma2@NCompress@@@8 ; NCompress::NLzma2::CDecoder `RTTI Type Descriptor'
.rdata$r:000012CC                 dd offset ??_R3CDecoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012CC _rdata$r        ends
.rdata$r:000012CC
.rdata$r:000012D0 ; ===========================================================================
.rdata$r:000012D0
.rdata$r:000012D0 ; Segment type: Pure data
.rdata$r:000012D0 ; Segment permissions: Read
.rdata$r:000012D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012D0                 assume cs:_rdata$r
.rdata$r:000012D0                 ;org 12D0h
.rdata$r:000012D0 ; COMDAT (pick any)
.rdata$r:000012D0                 public ??_R4CDecoder@NLzma2@NCompress@@6BISequentialInStream@@@
.rdata$r:000012D0 ; const NCompress::NLzma2::CDecoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:000012D0 ??_R4CDecoder@NLzma2@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:000012D0                                         ; DATA XREF: .rdata:00000B98o
.rdata$r:000012D1                 db    0
.rdata$r:000012D2                 db    0
.rdata$r:000012D3                 db    0
.rdata$r:000012D4                 db  1Ch
.rdata$r:000012D5                 db    0
.rdata$r:000012D6                 db    0
.rdata$r:000012D7                 db    0
.rdata$r:000012D8                 db    0
.rdata$r:000012D9                 db    0
.rdata$r:000012DA                 db    0
.rdata$r:000012DB                 db    0
.rdata$r:000012DC                 dd offset ??_R0?AVCDecoder@NLzma2@NCompress@@@8 ; NCompress::NLzma2::CDecoder `RTTI Type Descriptor'
.rdata$r:000012E0                 dd offset ??_R3CDecoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012E0 _rdata$r        ends
.rdata$r:000012E0
.text:000012E4 ; ===========================================================================
.text:000012E4
.text:000012E4 ; Segment type: Pure code
.text:000012E4 ; Segment permissions: Read/Execute
.text:000012E4 _text           segment para public 'CODE' use32
.text:000012E4                 assume cs:_text
.text:000012E4                 ;org 12E4h
.text:000012E4 ; COMDAT (pick any)
.text:000012E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012E4
.text:000012E4 ; =============== S U B R O U T I N E =======================================
.text:000012E4
.text:000012E4 ; Attributes: bp-based frame
.text:000012E4
.text:000012E4 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000012E4                 public ??0CMyUnknownImp@@QAE@XZ
.text:000012E4 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+69p
.text:000012E4
.text:000012E4 var_4           = dword ptr -4
.text:000012E4
.text:000012E4                 push    ebp
.text:000012E5                 mov     ebp, esp
.text:000012E7                 push    ecx
.text:000012E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012EF                 mov     [ebp+var_4], ecx
.text:000012F2                 mov     eax, [ebp+var_4]
.text:000012F5                 mov     dword ptr [eax], 0
.text:000012FB                 mov     eax, [ebp+var_4]
.text:000012FE                 mov     esp, ebp
.text:00001300                 pop     ebp
.text:00001301                 retn
.text:00001301 ??0CMyUnknownImp@@QAE@XZ endp
.text:00001301
.text:00001301 ; ---------------------------------------------------------------------------
.text:00001302                 align 4
.text:00001302 _text           ends
.text:00001302
.text:00001304 ; ===========================================================================
.text:00001304
.text:00001304 ; Segment type: Pure code
.text:00001304 ; Segment permissions: Read/Execute
.text:00001304 _text           segment para public 'CODE' use32
.text:00001304                 assume cs:_text
.text:00001304                 ;org 1304h
.text:00001304 ; COMDAT (pick any)
.text:00001304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001304
.text:00001304 ; =============== S U B R O U T I N E =======================================
.text:00001304
.text:00001304 ; Attributes: bp-based frame
.text:00001304
.text:00001304 ; __int32 __stdcall NCompress::NLzma2::CDecoder::QueryInterface(NCompress::NLzma2::CDecoder *this, const struct _GUID *Buf1, void **)
.text:00001304                 public ?QueryInterface@CDecoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00001304 ?QueryInterface@CDecoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00001304                                         ; CODE XREF: [thunk]:NCompress::NLzma2::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00001304                                         ; [thunk]:NCompress::NLzma2::CDecoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00001304
.text:00001304 var_1C          = dword ptr -1Ch
.text:00001304 var_18          = dword ptr -18h
.text:00001304 var_14          = dword ptr -14h
.text:00001304 var_10          = dword ptr -10h
.text:00001304 var_C           = dword ptr -0Ch
.text:00001304 var_8           = dword ptr -8
.text:00001304 var_4           = dword ptr -4
.text:00001304 this            = dword ptr  8
.text:00001304 Buf1            = dword ptr  0Ch
.text:00001304 arg_8           = dword ptr  10h
.text:00001304
.text:00001304                 push    ebp
.text:00001305                 mov     ebp, esp
.text:00001307                 sub     esp, 1Ch
.text:0000130A                 mov     eax, 0CCCCCCCCh
.text:0000130F                 mov     [ebp+var_1C], eax
.text:00001312                 mov     [ebp+var_18], eax
.text:00001315                 mov     [ebp+var_14], eax
.text:00001318                 mov     [ebp+var_10], eax
.text:0000131B                 mov     [ebp+var_C], eax
.text:0000131E                 mov     [ebp+var_8], eax
.text:00001321                 mov     [ebp+var_4], eax
.text:00001324                 mov     eax, [ebp+arg_8]
.text:00001327                 mov     dword ptr [eax], 0
.text:0000132D                 push    offset _IID_IUnknown ; Buf2
.text:00001332                 mov     ecx, [ebp+Buf1]
.text:00001335                 push    ecx             ; Buf1
.text:00001336                 call    ___@8           ; __(x,x)
.text:0000133B                 test    eax, eax
.text:0000133D                 jz      short loc_134C
.text:0000133F                 mov     edx, [ebp+arg_8]
.text:00001342                 mov     eax, [ebp+this]
.text:00001345                 mov     [edx], eax
.text:00001347                 jmp     loc_14EA
.text:0000134C ; ---------------------------------------------------------------------------
.text:0000134C
.text:0000134C loc_134C:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+39j
.text:0000134C                 push    offset _IID_ICompressCoder ; Buf2
.text:00001351                 mov     ecx, [ebp+Buf1]
.text:00001354                 push    ecx             ; Buf1
.text:00001355                 call    ___@8           ; __(x,x)
.text:0000135A                 test    eax, eax
.text:0000135C                 jz      short loc_136B
.text:0000135E                 mov     edx, [ebp+arg_8]
.text:00001361                 mov     eax, [ebp+this]
.text:00001364                 mov     [edx], eax
.text:00001366                 jmp     loc_14EA
.text:0000136B ; ---------------------------------------------------------------------------
.text:0000136B
.text:0000136B loc_136B:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+58j
.text:0000136B                 push    offset _IID_ICompressSetDecoderProperties2 ; Buf2
.text:00001370                 mov     ecx, [ebp+Buf1]
.text:00001373                 push    ecx             ; Buf1
.text:00001374                 call    ___@8           ; __(x,x)
.text:00001379                 test    eax, eax
.text:0000137B                 jz      short loc_13A2
.text:0000137D                 cmp     [ebp+this], 0
.text:00001381                 jz      short loc_138E
.text:00001383                 mov     edx, [ebp+this]
.text:00001386                 add     edx, 4
.text:00001389                 mov     [ebp+var_4], edx
.text:0000138C                 jmp     short loc_1395
.text:0000138E ; ---------------------------------------------------------------------------
.text:0000138E
.text:0000138E loc_138E:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+7Dj
.text:0000138E                 mov     [ebp+var_4], 0
.text:00001395
.text:00001395 loc_1395:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+88j
.text:00001395                 mov     eax, [ebp+arg_8]
.text:00001398                 mov     ecx, [ebp+var_4]
.text:0000139B                 mov     [eax], ecx
.text:0000139D                 jmp     loc_14EA
.text:000013A2 ; ---------------------------------------------------------------------------
.text:000013A2
.text:000013A2 loc_13A2:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+77j
.text:000013A2                 push    offset _IID_ICompressSetFinishMode ; Buf2
.text:000013A7                 mov     edx, [ebp+Buf1]
.text:000013AA                 push    edx             ; Buf1
.text:000013AB                 call    ___@8           ; __(x,x)
.text:000013B0                 test    eax, eax
.text:000013B2                 jz      short loc_13D9
.text:000013B4                 cmp     [ebp+this], 0
.text:000013B8                 jz      short loc_13C5
.text:000013BA                 mov     eax, [ebp+this]
.text:000013BD                 add     eax, 8
.text:000013C0                 mov     [ebp+var_8], eax
.text:000013C3                 jmp     short loc_13CC
.text:000013C5 ; ---------------------------------------------------------------------------
.text:000013C5
.text:000013C5 loc_13C5:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+B4j
.text:000013C5                 mov     [ebp+var_8], 0
.text:000013CC
.text:000013CC loc_13CC:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+BFj
.text:000013CC                 mov     ecx, [ebp+arg_8]
.text:000013CF                 mov     edx, [ebp+var_8]
.text:000013D2                 mov     [ecx], edx
.text:000013D4                 jmp     loc_14EA
.text:000013D9 ; ---------------------------------------------------------------------------
.text:000013D9
.text:000013D9 loc_13D9:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+AEj
.text:000013D9                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:000013DE                 mov     eax, [ebp+Buf1]
.text:000013E1                 push    eax             ; Buf1
.text:000013E2                 call    ___@8           ; __(x,x)
.text:000013E7                 test    eax, eax
.text:000013E9                 jz      short loc_1410
.text:000013EB                 cmp     [ebp+this], 0
.text:000013EF                 jz      short loc_13FC
.text:000013F1                 mov     ecx, [ebp+this]
.text:000013F4                 add     ecx, 0Ch
.text:000013F7                 mov     [ebp+var_C], ecx
.text:000013FA                 jmp     short loc_1403
.text:000013FC ; ---------------------------------------------------------------------------
.text:000013FC
.text:000013FC loc_13FC:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+EBj
.text:000013FC                 mov     [ebp+var_C], 0
.text:00001403
.text:00001403 loc_1403:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+F6j
.text:00001403                 mov     edx, [ebp+arg_8]
.text:00001406                 mov     eax, [ebp+var_C]
.text:00001409                 mov     [edx], eax
.text:0000140B                 jmp     loc_14EA
.text:00001410 ; ---------------------------------------------------------------------------
.text:00001410
.text:00001410 loc_1410:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+E5j
.text:00001410                 push    offset _IID_ICompressSetBufSize ; Buf2
.text:00001415                 mov     ecx, [ebp+Buf1]
.text:00001418                 push    ecx             ; Buf1
.text:00001419                 call    ___@8           ; __(x,x)
.text:0000141E                 test    eax, eax
.text:00001420                 jz      short loc_1447
.text:00001422                 cmp     [ebp+this], 0
.text:00001426                 jz      short loc_1433
.text:00001428                 mov     edx, [ebp+this]
.text:0000142B                 add     edx, 10h
.text:0000142E                 mov     [ebp+var_10], edx
.text:00001431                 jmp     short loc_143A
.text:00001433 ; ---------------------------------------------------------------------------
.text:00001433
.text:00001433 loc_1433:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+122j
.text:00001433                 mov     [ebp+var_10], 0
.text:0000143A
.text:0000143A loc_143A:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+12Dj
.text:0000143A                 mov     eax, [ebp+arg_8]
.text:0000143D                 mov     ecx, [ebp+var_10]
.text:00001440                 mov     [eax], ecx
.text:00001442                 jmp     loc_14EA
.text:00001447 ; ---------------------------------------------------------------------------
.text:00001447
.text:00001447 loc_1447:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+11Cj
.text:00001447                 push    offset _IID_ICompressSetInStream ; Buf2
.text:0000144C                 mov     edx, [ebp+Buf1]
.text:0000144F                 push    edx             ; Buf1
.text:00001450                 call    ___@8           ; __(x,x)
.text:00001455                 test    eax, eax
.text:00001457                 jz      short loc_147B
.text:00001459                 cmp     [ebp+this], 0
.text:0000145D                 jz      short loc_146A
.text:0000145F                 mov     eax, [ebp+this]
.text:00001462                 add     eax, 14h
.text:00001465                 mov     [ebp+var_14], eax
.text:00001468                 jmp     short loc_1471
.text:0000146A ; ---------------------------------------------------------------------------
.text:0000146A
.text:0000146A loc_146A:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+159j
.text:0000146A                 mov     [ebp+var_14], 0
.text:00001471
.text:00001471 loc_1471:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+164j
.text:00001471                 mov     ecx, [ebp+arg_8]
.text:00001474                 mov     edx, [ebp+var_14]
.text:00001477                 mov     [ecx], edx
.text:00001479                 jmp     short loc_14EA
.text:0000147B ; ---------------------------------------------------------------------------
.text:0000147B
.text:0000147B loc_147B:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+153j
.text:0000147B                 push    offset _IID_ICompressSetOutStreamSize ; Buf2
.text:00001480                 mov     eax, [ebp+Buf1]
.text:00001483                 push    eax             ; Buf1
.text:00001484                 call    ___@8           ; __(x,x)
.text:00001489                 test    eax, eax
.text:0000148B                 jz      short loc_14AF
.text:0000148D                 cmp     [ebp+this], 0
.text:00001491                 jz      short loc_149E
.text:00001493                 mov     ecx, [ebp+this]
.text:00001496                 add     ecx, 18h
.text:00001499                 mov     [ebp+var_18], ecx
.text:0000149C                 jmp     short loc_14A5
.text:0000149E ; ---------------------------------------------------------------------------
.text:0000149E
.text:0000149E loc_149E:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+18Dj
.text:0000149E                 mov     [ebp+var_18], 0
.text:000014A5
.text:000014A5 loc_14A5:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+198j
.text:000014A5                 mov     edx, [ebp+arg_8]
.text:000014A8                 mov     eax, [ebp+var_18]
.text:000014AB                 mov     [edx], eax
.text:000014AD                 jmp     short loc_14EA
.text:000014AF ; ---------------------------------------------------------------------------
.text:000014AF
.text:000014AF loc_14AF:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+187j
.text:000014AF                 push    offset _IID_ISequentialInStream ; Buf2
.text:000014B4                 mov     ecx, [ebp+Buf1]
.text:000014B7                 push    ecx             ; Buf1
.text:000014B8                 call    ___@8           ; __(x,x)
.text:000014BD                 test    eax, eax
.text:000014BF                 jz      short loc_14E3
.text:000014C1                 cmp     [ebp+this], 0
.text:000014C5                 jz      short loc_14D2
.text:000014C7                 mov     edx, [ebp+this]
.text:000014CA                 add     edx, 1Ch
.text:000014CD                 mov     [ebp+var_1C], edx
.text:000014D0                 jmp     short loc_14D9
.text:000014D2 ; ---------------------------------------------------------------------------
.text:000014D2
.text:000014D2 loc_14D2:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+1C1j
.text:000014D2                 mov     [ebp+var_1C], 0
.text:000014D9
.text:000014D9 loc_14D9:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+1CCj
.text:000014D9                 mov     eax, [ebp+arg_8]
.text:000014DC                 mov     ecx, [ebp+var_1C]
.text:000014DF                 mov     [eax], ecx
.text:000014E1                 jmp     short loc_14EA
.text:000014E3 ; ---------------------------------------------------------------------------
.text:000014E3
.text:000014E3 loc_14E3:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+1BBj
.text:000014E3                 mov     eax, 80004002h
.text:000014E8                 jmp     short loc_14FB
.text:000014EA ; ---------------------------------------------------------------------------
.text:000014EA
.text:000014EA loc_14EA:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+43j
.text:000014EA                                         ; NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+62j ...
.text:000014EA                 mov     edx, [ebp+this]
.text:000014ED                 mov     eax, [edx+20h]
.text:000014F0                 add     eax, 1
.text:000014F3                 mov     ecx, [ebp+this]
.text:000014F6                 mov     [ecx+20h], eax
.text:000014F9                 xor     eax, eax
.text:000014FB
.text:000014FB loc_14FB:                               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+1E4j
.text:000014FB                 add     esp, 1Ch
.text:000014FE                 cmp     ebp, esp
.text:00001500                 call    __RTC_CheckEsp
.text:00001505                 mov     esp, ebp
.text:00001507                 pop     ebp
.text:00001508                 retn    0Ch
.text:00001508 ?QueryInterface@CDecoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001508
.text:00001508 ; ---------------------------------------------------------------------------
.text:0000150B                 align 4
.text:0000150B _text           ends
.text:0000150B
.text:0000150C ; ===========================================================================
.text:0000150C
.text:0000150C ; Segment type: Pure code
.text:0000150C ; Segment permissions: Read/Execute
.text:0000150C _text           segment para public 'CODE' use32
.text:0000150C                 assume cs:_text
.text:0000150C                 ;org 150Ch
.text:0000150C ; COMDAT (pick any)
.text:0000150C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000150C
.text:0000150C ; =============== S U B R O U T I N E =======================================
.text:0000150C
.text:0000150C ; Attributes: bp-based frame
.text:0000150C
.text:0000150C ; unsigned __int32 __stdcall NCompress::NLzma2::CDecoder::AddRef(NCompress::NLzma2::CDecoder *this)
.text:0000150C                 public ?AddRef@CDecoder@NLzma2@NCompress@@UAGKXZ
.text:0000150C ?AddRef@CDecoder@NLzma2@NCompress@@UAGKXZ proc near
.text:0000150C                                         ; CODE XREF: [thunk]:NCompress::NLzma2::CDecoder::AddRef`adjustor{8}' (void)+5j
.text:0000150C                                         ; [thunk]:NCompress::NLzma2::CDecoder::AddRef`adjustor{12}' (void)+5j ...
.text:0000150C
.text:0000150C var_4           = dword ptr -4
.text:0000150C this            = dword ptr  8
.text:0000150C
.text:0000150C                 push    ebp
.text:0000150D                 mov     ebp, esp
.text:0000150F                 push    ecx
.text:00001510                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001517                 mov     eax, [ebp+this]
.text:0000151A                 mov     ecx, [eax+20h]
.text:0000151D                 add     ecx, 1
.text:00001520                 mov     [ebp+var_4], ecx
.text:00001523                 mov     edx, [ebp+this]
.text:00001526                 mov     eax, [ebp+var_4]
.text:00001529                 mov     [edx+20h], eax
.text:0000152C                 mov     eax, [ebp+var_4]
.text:0000152F                 mov     esp, ebp
.text:00001531                 pop     ebp
.text:00001532                 retn    4
.text:00001532 ?AddRef@CDecoder@NLzma2@NCompress@@UAGKXZ endp
.text:00001532
.text:00001532 ; ---------------------------------------------------------------------------
.text:00001535                 align 4
.text:00001535 _text           ends
.text:00001535
.text:00001538 ; ===========================================================================
.text:00001538
.text:00001538 ; Segment type: Pure code
.text:00001538 ; Segment permissions: Read/Execute
.text:00001538 _text           segment para public 'CODE' use32
.text:00001538                 assume cs:_text
.text:00001538                 ;org 1538h
.text:00001538 ; COMDAT (pick any)
.text:00001538                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001538
.text:00001538 ; =============== S U B R O U T I N E =======================================
.text:00001538
.text:00001538 ; Attributes: bp-based frame
.text:00001538
.text:00001538 ; unsigned __int32 __stdcall NCompress::NLzma2::CDecoder::Release(NCompress::NLzma2::CDecoder *this)
.text:00001538                 public ?Release@CDecoder@NLzma2@NCompress@@UAGKXZ
.text:00001538 ?Release@CDecoder@NLzma2@NCompress@@UAGKXZ proc near
.text:00001538                                         ; CODE XREF: [thunk]:NCompress::NLzma2::CDecoder::Release`adjustor{16}' (void)+5j
.text:00001538                                         ; [thunk]:NCompress::NLzma2::CDecoder::Release`adjustor{20}' (void)+5j ...
.text:00001538
.text:00001538 var_10          = dword ptr -10h
.text:00001538 var_C           = dword ptr -0Ch
.text:00001538 var_8           = dword ptr -8
.text:00001538 var_4           = dword ptr -4
.text:00001538 this            = dword ptr  8
.text:00001538
.text:00001538                 push    ebp
.text:00001539                 mov     ebp, esp
.text:0000153B                 sub     esp, 10h
.text:0000153E                 push    esi
.text:0000153F                 mov     eax, 0CCCCCCCCh
.text:00001544                 mov     [ebp+var_10], eax
.text:00001547                 mov     [ebp+var_C], eax
.text:0000154A                 mov     [ebp+var_8], eax
.text:0000154D                 mov     [ebp+var_4], eax
.text:00001550                 mov     eax, [ebp+this]
.text:00001553                 mov     ecx, [eax+20h]
.text:00001556                 sub     ecx, 1
.text:00001559                 mov     [ebp+var_C], ecx
.text:0000155C                 mov     edx, [ebp+this]
.text:0000155F                 mov     eax, [ebp+var_C]
.text:00001562                 mov     [edx+20h], eax
.text:00001565                 cmp     [ebp+var_C], 0
.text:00001569                 jz      short loc_1573
.text:0000156B                 mov     ecx, [ebp+this]
.text:0000156E                 mov     eax, [ecx+20h]
.text:00001571                 jmp     short loc_15AB
.text:00001573 ; ---------------------------------------------------------------------------
.text:00001573
.text:00001573 loc_1573:                               ; CODE XREF: NCompress::NLzma2::CDecoder::Release(void)+31j
.text:00001573                 mov     edx, [ebp+this]
.text:00001576                 mov     [ebp+var_8], edx
.text:00001579                 mov     eax, [ebp+var_8]
.text:0000157C                 mov     [ebp+var_4], eax
.text:0000157F                 cmp     [ebp+var_4], 0
.text:00001583                 jz      short loc_15A2
.text:00001585                 mov     esi, esp
.text:00001587                 push    1
.text:00001589                 mov     ecx, [ebp+var_4]
.text:0000158C                 mov     edx, [ecx]
.text:0000158E                 mov     ecx, [ebp+var_4]
.text:00001591                 mov     eax, [edx+10h]
.text:00001594                 call    eax
.text:00001596                 cmp     esi, esp
.text:00001598                 call    __RTC_CheckEsp
.text:0000159D                 mov     [ebp+var_10], eax
.text:000015A0                 jmp     short loc_15A9
.text:000015A2 ; ---------------------------------------------------------------------------
.text:000015A2
.text:000015A2 loc_15A2:                               ; CODE XREF: NCompress::NLzma2::CDecoder::Release(void)+4Bj
.text:000015A2                 mov     [ebp+var_10], 0
.text:000015A9
.text:000015A9 loc_15A9:                               ; CODE XREF: NCompress::NLzma2::CDecoder::Release(void)+68j
.text:000015A9                 xor     eax, eax
.text:000015AB
.text:000015AB loc_15AB:                               ; CODE XREF: NCompress::NLzma2::CDecoder::Release(void)+39j
.text:000015AB                 pop     esi
.text:000015AC                 add     esp, 10h
.text:000015AF                 cmp     ebp, esp
.text:000015B1                 call    __RTC_CheckEsp
.text:000015B6                 mov     esp, ebp
.text:000015B8                 pop     ebp
.text:000015B9                 retn    4
.text:000015B9 ?Release@CDecoder@NLzma2@NCompress@@UAGKXZ endp
.text:000015B9
.text:000015B9 _text           ends
.text:000015B9
.text:000015BC ; ===========================================================================
.text:000015BC
.text:000015BC ; Segment type: Pure code
.text:000015BC ; Segment permissions: Read/Execute
.text:000015BC _text           segment para public 'CODE' use32
.text:000015BC                 assume cs:_text
.text:000015BC                 ;org 15BCh
.text:000015BC ; COMDAT (pick any)
.text:000015BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000015BC
.text:000015BC ; =============== S U B R O U T I N E =======================================
.text:000015BC
.text:000015BC ; Attributes: bp-based frame
.text:000015BC
.text:000015BC ; int __stdcall __(void *Buf1, void *Buf2)
.text:000015BC                 public ___@8
.text:000015BC ___@8           proc near               ; CODE XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+32p
.text:000015BC                                         ; NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+51p ...
.text:000015BC
.text:000015BC Buf1            = dword ptr  8
.text:000015BC Buf2            = dword ptr  0Ch
.text:000015BC
.text:000015BC                 push    ebp
.text:000015BD                 mov     ebp, esp
.text:000015BF                 mov     eax, [ebp+Buf2]
.text:000015C2                 push    eax             ; Buf2
.text:000015C3                 mov     ecx, [ebp+Buf1]
.text:000015C6                 push    ecx             ; Buf1
.text:000015C7                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000015CC                 cmp     ebp, esp
.text:000015CE                 call    __RTC_CheckEsp
.text:000015D3                 pop     ebp
.text:000015D4                 retn    8
.text:000015D4 ___@8           endp
.text:000015D4
.text:000015D4 ; ---------------------------------------------------------------------------
.text:000015D7                 align 4
.text:000015D7 _text           ends
.text:000015D7
.text:000015D8 ; ===========================================================================
.text:000015D8
.text:000015D8 ; Segment type: Pure code
.text:000015D8 ; Segment permissions: Read/Execute
.text:000015D8 _text           segment para public 'CODE' use32
.text:000015D8                 assume cs:_text
.text:000015D8                 ;org 15D8h
.text:000015D8 ; COMDAT (pick any)
.text:000015D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000015D8
.text:000015D8 ; =============== S U B R O U T I N E =======================================
.text:000015D8
.text:000015D8 ; Attributes: bp-based frame
.text:000015D8
.text:000015D8 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000015D8                 public _IsEqualGUID@8
.text:000015D8 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000015D8
.text:000015D8 Buf1            = dword ptr  8
.text:000015D8 Buf2            = dword ptr  0Ch
.text:000015D8
.text:000015D8                 push    ebp
.text:000015D9                 mov     ebp, esp
.text:000015DB                 push    10h             ; Size
.text:000015DD                 mov     eax, [ebp+Buf2]
.text:000015E0                 push    eax             ; Buf2
.text:000015E1                 mov     ecx, [ebp+Buf1]
.text:000015E4                 push    ecx             ; Buf1
.text:000015E5                 call    _memcmp
.text:000015EA                 add     esp, 0Ch
.text:000015ED                 neg     eax
.text:000015EF                 sbb     eax, eax
.text:000015F1                 add     eax, 1
.text:000015F4                 cmp     ebp, esp
.text:000015F6                 call    __RTC_CheckEsp
.text:000015FB                 pop     ebp
.text:000015FC                 retn    8
.text:000015FC _IsEqualGUID@8  endp
.text:000015FC
.text:000015FC ; ---------------------------------------------------------------------------
.text:000015FF                 align 10h
.text:000015FF _text           ends
.text:000015FF
.text:00001600 ; ===========================================================================
.text:00001600
.text:00001600 ; Segment type: Pure code
.text:00001600 ; Segment permissions: Read/Execute
.text:00001600 _text           segment para public 'CODE' use32
.text:00001600                 assume cs:_text
.text:00001600                 ;org 1600h
.text:00001600 ; COMDAT (pick any)
.text:00001600                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001600
.text:00001600 ; =============== S U B R O U T I N E =======================================
.text:00001600
.text:00001600 ; Attributes: bp-based frame
.text:00001600
.text:00001600 ; public: virtual void * __thiscall NCompress::NLzma2::CDecoder::`scalar deleting destructor'(unsigned int)
.text:00001600                 public ??_GCDecoder@NLzma2@NCompress@@UAEPAXI@Z
.text:00001600 ??_GCDecoder@NLzma2@NCompress@@UAEPAXI@Z proc near
.text:00001600
.text:00001600 var_4           = dword ptr -4
.text:00001600 arg_0           = dword ptr  8
.text:00001600
.text:00001600                 push    ebp
.text:00001601                 mov     ebp, esp
.text:00001603                 push    ecx
.text:00001604                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000160B                 mov     [ebp+var_4], ecx
.text:0000160E                 mov     ecx, [ebp+var_4] ; this
.text:00001611                 call    ??1CDecoder@NLzma2@NCompress@@UAE@XZ ; NCompress::NLzma2::CDecoder::~CDecoder(void)
.text:00001616                 mov     eax, [ebp+arg_0]
.text:00001619                 and     eax, 1
.text:0000161C                 jz      short loc_162A
.text:0000161E                 mov     ecx, [ebp+var_4]
.text:00001621                 push    ecx             ; void *
.text:00001622                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001627                 add     esp, 4
.text:0000162A
.text:0000162A loc_162A:                               ; CODE XREF: NCompress::NLzma2::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:0000162A                 mov     eax, [ebp+var_4]
.text:0000162D                 add     esp, 4
.text:00001630                 cmp     ebp, esp
.text:00001632                 call    __RTC_CheckEsp
.text:00001637                 mov     esp, ebp
.text:00001639                 pop     ebp
.text:0000163A                 retn    4
.text:0000163A ??_GCDecoder@NLzma2@NCompress@@UAEPAXI@Z endp
.text:0000163A
.text:0000163A ; ---------------------------------------------------------------------------
.text:0000163D                 align 10h
.text:0000163D _text           ends
.text:0000163D
.text:00001640 ; ===========================================================================
.text:00001640
.text:00001640 ; Segment type: Pure code
.text:00001640 ; Segment permissions: Read/Execute
.text:00001640 _text           segment para public 'CODE' use32
.text:00001640                 assume cs:_text
.text:00001640                 ;org 1640h
.text:00001640 ; COMDAT (pick any)
.text:00001640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001640
.text:00001640 ; =============== S U B R O U T I N E =======================================
.text:00001640
.text:00001640 ; Attributes: bp-based frame
.text:00001640
.text:00001640 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00001640                 public ??0ICompressCoder@@QAE@XZ
.text:00001640 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+11p
.text:00001640
.text:00001640 var_4           = dword ptr -4
.text:00001640
.text:00001640                 push    ebp
.text:00001641                 mov     ebp, esp
.text:00001643                 push    ecx
.text:00001644                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000164B                 mov     [ebp+var_4], ecx
.text:0000164E                 mov     ecx, [ebp+var_4]
.text:00001651                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001656                 mov     eax, [ebp+var_4]
.text:00001659                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:0000165F                 mov     eax, [ebp+var_4]
.text:00001662                 add     esp, 4
.text:00001665                 cmp     ebp, esp
.text:00001667                 call    __RTC_CheckEsp
.text:0000166C                 mov     esp, ebp
.text:0000166E                 pop     ebp
.text:0000166F                 retn
.text:0000166F ??0ICompressCoder@@QAE@XZ endp
.text:0000166F
.text:0000166F _text           ends
.text:0000166F
.rdata:00001670 ; ===========================================================================
.rdata:00001670
.rdata:00001670 ; Segment type: Pure data
.rdata:00001670 ; Segment permissions: Read
.rdata:00001670 _rdata          segment dword public 'DATA' use32
.rdata:00001670                 assume cs:_rdata
.rdata:00001670                 ;org 1670h
.rdata:00001670 ; COMDAT (pick largest)
.rdata:00001670                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00001674                 public ??_7ICompressCoder@@6B@
.rdata:00001674 ; const ICompressCoder::`vftable'
.rdata:00001674 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00001674                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00001678                 dd offset __purecall
.rdata:0000167C                 dd offset __purecall
.rdata:00001680                 dd offset __purecall
.rdata:00001680 _rdata          ends
.rdata:00001680
.rdata$r:00001684 ; ===========================================================================
.rdata$r:00001684
.rdata$r:00001684 ; Segment type: Pure data
.rdata$r:00001684 ; Segment permissions: Read
.rdata$r:00001684 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001684                 assume cs:_rdata$r
.rdata$r:00001684                 ;org 1684h
.rdata$r:00001684 ; COMDAT (pick any)
.rdata$r:00001684                 public ??_R4ICompressCoder@@6B@
.rdata$r:00001684 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00001684 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00001670o
.rdata$r:00001685                 db    0
.rdata$r:00001686                 db    0
.rdata$r:00001687                 db    0
.rdata$r:00001688                 db    0
.rdata$r:00001689                 db    0
.rdata$r:0000168A                 db    0
.rdata$r:0000168B                 db    0
.rdata$r:0000168C                 db    0
.rdata$r:0000168D                 db    0
.rdata$r:0000168E                 db    0
.rdata$r:0000168F                 db    0
.rdata$r:00001690                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00001694                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001694 _rdata$r        ends
.rdata$r:00001694
.text:00001698 ; ===========================================================================
.text:00001698
.text:00001698 ; Segment type: Pure code
.text:00001698 ; Segment permissions: Read/Execute
.text:00001698 _text           segment para public 'CODE' use32
.text:00001698                 assume cs:_text
.text:00001698                 ;org 1698h
.text:00001698 ; COMDAT (pick any)
.text:00001698                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001698
.text:00001698 ; =============== S U B R O U T I N E =======================================
.text:00001698
.text:00001698 ; Attributes: bp-based frame
.text:00001698
.text:00001698 ; _DWORD __thiscall ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(ICompressSetDecoderProperties2 *__hidden this)
.text:00001698                 public ??0ICompressSetDecoderProperties2@@QAE@XZ
.text:00001698 ??0ICompressSetDecoderProperties2@@QAE@XZ proc near
.text:00001698                                         ; CODE XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+1Cp
.text:00001698
.text:00001698 var_4           = dword ptr -4
.text:00001698
.text:00001698                 push    ebp
.text:00001699                 mov     ebp, esp
.text:0000169B                 push    ecx
.text:0000169C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016A3                 mov     [ebp+var_4], ecx
.text:000016A6                 mov     ecx, [ebp+var_4]
.text:000016A9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000016AE                 mov     eax, [ebp+var_4]
.text:000016B1                 mov     dword ptr [eax], offset ??_7ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`vftable'
.text:000016B7                 mov     eax, [ebp+var_4]
.text:000016BA                 add     esp, 4
.text:000016BD                 cmp     ebp, esp
.text:000016BF                 call    __RTC_CheckEsp
.text:000016C4                 mov     esp, ebp
.text:000016C6                 pop     ebp
.text:000016C7                 retn
.text:000016C7 ??0ICompressSetDecoderProperties2@@QAE@XZ endp
.text:000016C7
.text:000016C7 _text           ends
.text:000016C7
.rdata:000016C8 ; ===========================================================================
.rdata:000016C8
.rdata:000016C8 ; Segment type: Pure data
.rdata:000016C8 ; Segment permissions: Read
.rdata:000016C8 _rdata          segment dword public 'DATA' use32
.rdata:000016C8                 assume cs:_rdata
.rdata:000016C8                 ;org 16C8h
.rdata:000016C8 ; COMDAT (pick largest)
.rdata:000016C8                 dd offset ??_R4ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata:000016CC                 public ??_7ICompressSetDecoderProperties2@@6B@
.rdata:000016CC ; const ICompressSetDecoderProperties2::`vftable'
.rdata:000016CC ??_7ICompressSetDecoderProperties2@@6B@ dd offset __purecall
.rdata:000016CC                                         ; DATA XREF: ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+19o
.rdata:000016D0                 dd offset __purecall
.rdata:000016D4                 dd offset __purecall
.rdata:000016D8                 dd offset __purecall
.rdata:000016D8 _rdata          ends
.rdata:000016D8
.rdata$r:000016DC ; ===========================================================================
.rdata$r:000016DC
.rdata$r:000016DC ; Segment type: Pure data
.rdata$r:000016DC ; Segment permissions: Read
.rdata$r:000016DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000016DC                 assume cs:_rdata$r
.rdata$r:000016DC                 ;org 16DCh
.rdata$r:000016DC ; COMDAT (pick any)
.rdata$r:000016DC                 public ??_R4ICompressSetDecoderProperties2@@6B@
.rdata$r:000016DC ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata$r:000016DC ??_R4ICompressSetDecoderProperties2@@6B@ db    0
.rdata$r:000016DC                                         ; DATA XREF: .rdata:000016C8o
.rdata$r:000016DD                 db    0
.rdata$r:000016DE                 db    0
.rdata$r:000016DF                 db    0
.rdata$r:000016E0                 db    0
.rdata$r:000016E1                 db    0
.rdata$r:000016E2                 db    0
.rdata$r:000016E3                 db    0
.rdata$r:000016E4                 db    0
.rdata$r:000016E5                 db    0
.rdata$r:000016E6                 db    0
.rdata$r:000016E7                 db    0
.rdata$r:000016E8                 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8 ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:000016EC                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000016EC _rdata$r        ends
.rdata$r:000016EC
.text:000016F0 ; ===========================================================================
.text:000016F0
.text:000016F0 ; Segment type: Pure code
.text:000016F0 ; Segment permissions: Read/Execute
.text:000016F0 _text           segment para public 'CODE' use32
.text:000016F0                 assume cs:_text
.text:000016F0                 ;org 16F0h
.text:000016F0 ; COMDAT (pick any)
.text:000016F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016F0
.text:000016F0 ; =============== S U B R O U T I N E =======================================
.text:000016F0
.text:000016F0 ; Attributes: bp-based frame
.text:000016F0
.text:000016F0 ; _DWORD __thiscall ICompressSetFinishMode::ICompressSetFinishMode(ICompressSetFinishMode *__hidden this)
.text:000016F0                 public ??0ICompressSetFinishMode@@QAE@XZ
.text:000016F0 ??0ICompressSetFinishMode@@QAE@XZ proc near
.text:000016F0                                         ; CODE XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+27p
.text:000016F0
.text:000016F0 var_4           = dword ptr -4
.text:000016F0
.text:000016F0                 push    ebp
.text:000016F1                 mov     ebp, esp
.text:000016F3                 push    ecx
.text:000016F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016FB                 mov     [ebp+var_4], ecx
.text:000016FE                 mov     ecx, [ebp+var_4]
.text:00001701                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001706                 mov     eax, [ebp+var_4]
.text:00001709                 mov     dword ptr [eax], offset ??_7ICompressSetFinishMode@@6B@ ; const ICompressSetFinishMode::`vftable'
.text:0000170F                 mov     eax, [ebp+var_4]
.text:00001712                 add     esp, 4
.text:00001715                 cmp     ebp, esp
.text:00001717                 call    __RTC_CheckEsp
.text:0000171C                 mov     esp, ebp
.text:0000171E                 pop     ebp
.text:0000171F                 retn
.text:0000171F ??0ICompressSetFinishMode@@QAE@XZ endp
.text:0000171F
.text:0000171F _text           ends
.text:0000171F
.rdata:00001720 ; ===========================================================================
.rdata:00001720
.rdata:00001720 ; Segment type: Pure data
.rdata:00001720 ; Segment permissions: Read
.rdata:00001720 _rdata          segment dword public 'DATA' use32
.rdata:00001720                 assume cs:_rdata
.rdata:00001720                 ;org 1720h
.rdata:00001720 ; COMDAT (pick largest)
.rdata:00001720                 dd offset ??_R4ICompressSetFinishMode@@6B@ ; const ICompressSetFinishMode::`RTTI Complete Object Locator'
.rdata:00001724                 public ??_7ICompressSetFinishMode@@6B@
.rdata:00001724 ; const ICompressSetFinishMode::`vftable'
.rdata:00001724 ??_7ICompressSetFinishMode@@6B@ dd offset __purecall
.rdata:00001724                                         ; DATA XREF: ICompressSetFinishMode::ICompressSetFinishMode(void)+19o
.rdata:00001728                 dd offset __purecall
.rdata:0000172C                 dd offset __purecall
.rdata:00001730                 dd offset __purecall
.rdata:00001730 _rdata          ends
.rdata:00001730
.rdata$r:00001734 ; ===========================================================================
.rdata$r:00001734
.rdata$r:00001734 ; Segment type: Pure data
.rdata$r:00001734 ; Segment permissions: Read
.rdata$r:00001734 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001734                 assume cs:_rdata$r
.rdata$r:00001734                 ;org 1734h
.rdata$r:00001734 ; COMDAT (pick any)
.rdata$r:00001734                 public ??_R4ICompressSetFinishMode@@6B@
.rdata$r:00001734 ; const ICompressSetFinishMode::`RTTI Complete Object Locator'
.rdata$r:00001734 ??_R4ICompressSetFinishMode@@6B@ db    0 ; DATA XREF: .rdata:00001720o
.rdata$r:00001735                 db    0
.rdata$r:00001736                 db    0
.rdata$r:00001737                 db    0
.rdata$r:00001738                 db    0
.rdata$r:00001739                 db    0
.rdata$r:0000173A                 db    0
.rdata$r:0000173B                 db    0
.rdata$r:0000173C                 db    0
.rdata$r:0000173D                 db    0
.rdata$r:0000173E                 db    0
.rdata$r:0000173F                 db    0
.rdata$r:00001740                 dd offset ??_R0?AUICompressSetFinishMode@@@8 ; ICompressSetFinishMode `RTTI Type Descriptor'
.rdata$r:00001744                 dd offset ??_R3ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001744 _rdata$r        ends
.rdata$r:00001744
.text:00001748 ; ===========================================================================
.text:00001748
.text:00001748 ; Segment type: Pure code
.text:00001748 ; Segment permissions: Read/Execute
.text:00001748 _text           segment para public 'CODE' use32
.text:00001748                 assume cs:_text
.text:00001748                 ;org 1748h
.text:00001748 ; COMDAT (pick any)
.text:00001748                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001748
.text:00001748 ; =============== S U B R O U T I N E =======================================
.text:00001748
.text:00001748 ; Attributes: bp-based frame
.text:00001748
.text:00001748 ; _DWORD __thiscall ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(ICompressGetInStreamProcessedSize *__hidden this)
.text:00001748                 public ??0ICompressGetInStreamProcessedSize@@QAE@XZ
.text:00001748 ??0ICompressGetInStreamProcessedSize@@QAE@XZ proc near
.text:00001748                                         ; CODE XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+32p
.text:00001748
.text:00001748 var_4           = dword ptr -4
.text:00001748
.text:00001748                 push    ebp
.text:00001749                 mov     ebp, esp
.text:0000174B                 push    ecx
.text:0000174C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001753                 mov     [ebp+var_4], ecx
.text:00001756                 mov     ecx, [ebp+var_4]
.text:00001759                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000175E                 mov     eax, [ebp+var_4]
.text:00001761                 mov     dword ptr [eax], offset ??_7ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`vftable'
.text:00001767                 mov     eax, [ebp+var_4]
.text:0000176A                 add     esp, 4
.text:0000176D                 cmp     ebp, esp
.text:0000176F                 call    __RTC_CheckEsp
.text:00001774                 mov     esp, ebp
.text:00001776                 pop     ebp
.text:00001777                 retn
.text:00001777 ??0ICompressGetInStreamProcessedSize@@QAE@XZ endp
.text:00001777
.text:00001777 _text           ends
.text:00001777
.rdata:00001778 ; ===========================================================================
.rdata:00001778
.rdata:00001778 ; Segment type: Pure data
.rdata:00001778 ; Segment permissions: Read
.rdata:00001778 _rdata          segment dword public 'DATA' use32
.rdata:00001778                 assume cs:_rdata
.rdata:00001778                 ;org 1778h
.rdata:00001778 ; COMDAT (pick largest)
.rdata:00001778                 dd offset ??_R4ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata:0000177C                 public ??_7ICompressGetInStreamProcessedSize@@6B@
.rdata:0000177C ; const ICompressGetInStreamProcessedSize::`vftable'
.rdata:0000177C ??_7ICompressGetInStreamProcessedSize@@6B@ dd offset __purecall
.rdata:0000177C                                         ; DATA XREF: ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)+19o
.rdata:00001780                 dd offset __purecall
.rdata:00001784                 dd offset __purecall
.rdata:00001788                 dd offset __purecall
.rdata:00001788 _rdata          ends
.rdata:00001788
.rdata$r:0000178C ; ===========================================================================
.rdata$r:0000178C
.rdata$r:0000178C ; Segment type: Pure data
.rdata$r:0000178C ; Segment permissions: Read
.rdata$r:0000178C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000178C                 assume cs:_rdata$r
.rdata$r:0000178C                 ;org 178Ch
.rdata$r:0000178C ; COMDAT (pick any)
.rdata$r:0000178C                 public ??_R4ICompressGetInStreamProcessedSize@@6B@
.rdata$r:0000178C ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata$r:0000178C ??_R4ICompressGetInStreamProcessedSize@@6B@ db    0
.rdata$r:0000178C                                         ; DATA XREF: .rdata:00001778o
.rdata$r:0000178D                 db    0
.rdata$r:0000178E                 db    0
.rdata$r:0000178F                 db    0
.rdata$r:00001790                 db    0
.rdata$r:00001791                 db    0
.rdata$r:00001792                 db    0
.rdata$r:00001793                 db    0
.rdata$r:00001794                 db    0
.rdata$r:00001795                 db    0
.rdata$r:00001796                 db    0
.rdata$r:00001797                 db    0
.rdata$r:00001798                 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:0000179C                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000179C _rdata$r        ends
.rdata$r:0000179C
.text:000017A0 ; ===========================================================================
.text:000017A0
.text:000017A0 ; Segment type: Pure code
.text:000017A0 ; Segment permissions: Read/Execute
.text:000017A0 _text           segment para public 'CODE' use32
.text:000017A0                 assume cs:_text
.text:000017A0                 ;org 17A0h
.text:000017A0 ; COMDAT (pick any)
.text:000017A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000017A0
.text:000017A0 ; =============== S U B R O U T I N E =======================================
.text:000017A0
.text:000017A0 ; Attributes: bp-based frame
.text:000017A0
.text:000017A0 ; _DWORD __thiscall ICompressSetBufSize::ICompressSetBufSize(ICompressSetBufSize *__hidden this)
.text:000017A0                 public ??0ICompressSetBufSize@@QAE@XZ
.text:000017A0 ??0ICompressSetBufSize@@QAE@XZ proc near
.text:000017A0                                         ; CODE XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+3Dp
.text:000017A0
.text:000017A0 var_4           = dword ptr -4
.text:000017A0
.text:000017A0                 push    ebp
.text:000017A1                 mov     ebp, esp
.text:000017A3                 push    ecx
.text:000017A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017AB                 mov     [ebp+var_4], ecx
.text:000017AE                 mov     ecx, [ebp+var_4]
.text:000017B1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000017B6                 mov     eax, [ebp+var_4]
.text:000017B9                 mov     dword ptr [eax], offset ??_7ICompressSetBufSize@@6B@ ; const ICompressSetBufSize::`vftable'
.text:000017BF                 mov     eax, [ebp+var_4]
.text:000017C2                 add     esp, 4
.text:000017C5                 cmp     ebp, esp
.text:000017C7                 call    __RTC_CheckEsp
.text:000017CC                 mov     esp, ebp
.text:000017CE                 pop     ebp
.text:000017CF                 retn
.text:000017CF ??0ICompressSetBufSize@@QAE@XZ endp
.text:000017CF
.text:000017CF _text           ends
.text:000017CF
.rdata:000017D0 ; ===========================================================================
.rdata:000017D0
.rdata:000017D0 ; Segment type: Pure data
.rdata:000017D0 ; Segment permissions: Read
.rdata:000017D0 _rdata          segment dword public 'DATA' use32
.rdata:000017D0                 assume cs:_rdata
.rdata:000017D0                 ;org 17D0h
.rdata:000017D0 ; COMDAT (pick largest)
.rdata:000017D0                 dd offset ??_R4ICompressSetBufSize@@6B@ ; const ICompressSetBufSize::`RTTI Complete Object Locator'
.rdata:000017D4                 public ??_7ICompressSetBufSize@@6B@
.rdata:000017D4 ; const ICompressSetBufSize::`vftable'
.rdata:000017D4 ??_7ICompressSetBufSize@@6B@ dd offset __purecall
.rdata:000017D4                                         ; DATA XREF: ICompressSetBufSize::ICompressSetBufSize(void)+19o
.rdata:000017D8                 dd offset __purecall
.rdata:000017DC                 dd offset __purecall
.rdata:000017E0                 dd offset __purecall
.rdata:000017E4                 dd offset __purecall
.rdata:000017E4 _rdata          ends
.rdata:000017E4
.rdata$r:000017E8 ; ===========================================================================
.rdata$r:000017E8
.rdata$r:000017E8 ; Segment type: Pure data
.rdata$r:000017E8 ; Segment permissions: Read
.rdata$r:000017E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000017E8                 assume cs:_rdata$r
.rdata$r:000017E8                 ;org 17E8h
.rdata$r:000017E8 ; COMDAT (pick any)
.rdata$r:000017E8                 public ??_R4ICompressSetBufSize@@6B@
.rdata$r:000017E8 ; const ICompressSetBufSize::`RTTI Complete Object Locator'
.rdata$r:000017E8 ??_R4ICompressSetBufSize@@6B@ db    0   ; DATA XREF: .rdata:000017D0o
.rdata$r:000017E9                 db    0
.rdata$r:000017EA                 db    0
.rdata$r:000017EB                 db    0
.rdata$r:000017EC                 db    0
.rdata$r:000017ED                 db    0
.rdata$r:000017EE                 db    0
.rdata$r:000017EF                 db    0
.rdata$r:000017F0                 db    0
.rdata$r:000017F1                 db    0
.rdata$r:000017F2                 db    0
.rdata$r:000017F3                 db    0
.rdata$r:000017F4                 dd offset ??_R0?AUICompressSetBufSize@@@8 ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:000017F8                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000017F8 _rdata$r        ends
.rdata$r:000017F8
.text:000017FC ; ===========================================================================
.text:000017FC
.text:000017FC ; Segment type: Pure code
.text:000017FC ; Segment permissions: Read/Execute
.text:000017FC _text           segment para public 'CODE' use32
.text:000017FC                 assume cs:_text
.text:000017FC                 ;org 17FCh
.text:000017FC ; COMDAT (pick any)
.text:000017FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000017FC
.text:000017FC ; =============== S U B R O U T I N E =======================================
.text:000017FC
.text:000017FC ; Attributes: bp-based frame
.text:000017FC
.text:000017FC ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:000017FC                 public ??0ICompressSetInStream@@QAE@XZ
.text:000017FC ??0ICompressSetInStream@@QAE@XZ proc near
.text:000017FC                                         ; CODE XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+48p
.text:000017FC
.text:000017FC var_4           = dword ptr -4
.text:000017FC
.text:000017FC                 push    ebp
.text:000017FD                 mov     ebp, esp
.text:000017FF                 push    ecx
.text:00001800                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001807                 mov     [ebp+var_4], ecx
.text:0000180A                 mov     ecx, [ebp+var_4]
.text:0000180D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001812                 mov     eax, [ebp+var_4]
.text:00001815                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:0000181B                 mov     eax, [ebp+var_4]
.text:0000181E                 add     esp, 4
.text:00001821                 cmp     ebp, esp
.text:00001823                 call    __RTC_CheckEsp
.text:00001828                 mov     esp, ebp
.text:0000182A                 pop     ebp
.text:0000182B                 retn
.text:0000182B ??0ICompressSetInStream@@QAE@XZ endp
.text:0000182B
.text:0000182B _text           ends
.text:0000182B
.rdata:0000182C ; ===========================================================================
.rdata:0000182C
.rdata:0000182C ; Segment type: Pure data
.rdata:0000182C ; Segment permissions: Read
.rdata:0000182C _rdata          segment dword public 'DATA' use32
.rdata:0000182C                 assume cs:_rdata
.rdata:0000182C                 ;org 182Ch
.rdata:0000182C ; COMDAT (pick largest)
.rdata:0000182C                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:00001830                 public ??_7ICompressSetInStream@@6B@
.rdata:00001830 ; const ICompressSetInStream::`vftable'
.rdata:00001830 ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:00001830                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:00001834                 dd offset __purecall
.rdata:00001838                 dd offset __purecall
.rdata:0000183C                 dd offset __purecall
.rdata:00001840                 dd offset __purecall
.rdata:00001840 _rdata          ends
.rdata:00001840
.rdata$r:00001844 ; ===========================================================================
.rdata$r:00001844
.rdata$r:00001844 ; Segment type: Pure data
.rdata$r:00001844 ; Segment permissions: Read
.rdata$r:00001844 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001844                 assume cs:_rdata$r
.rdata$r:00001844                 ;org 1844h
.rdata$r:00001844 ; COMDAT (pick any)
.rdata$r:00001844                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:00001844 ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:00001844 ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:0000182Co
.rdata$r:00001845                 db    0
.rdata$r:00001846                 db    0
.rdata$r:00001847                 db    0
.rdata$r:00001848                 db    0
.rdata$r:00001849                 db    0
.rdata$r:0000184A                 db    0
.rdata$r:0000184B                 db    0
.rdata$r:0000184C                 db    0
.rdata$r:0000184D                 db    0
.rdata$r:0000184E                 db    0
.rdata$r:0000184F                 db    0
.rdata$r:00001850                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00001854                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001854 _rdata$r        ends
.rdata$r:00001854
.text:00001858 ; ===========================================================================
.text:00001858
.text:00001858 ; Segment type: Pure code
.text:00001858 ; Segment permissions: Read/Execute
.text:00001858 _text           segment para public 'CODE' use32
.text:00001858                 assume cs:_text
.text:00001858                 ;org 1858h
.text:00001858 ; COMDAT (pick any)
.text:00001858                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001858
.text:00001858 ; =============== S U B R O U T I N E =======================================
.text:00001858
.text:00001858 ; Attributes: bp-based frame
.text:00001858
.text:00001858 ; _DWORD __thiscall ICompressSetOutStreamSize::ICompressSetOutStreamSize(ICompressSetOutStreamSize *__hidden this)
.text:00001858                 public ??0ICompressSetOutStreamSize@@QAE@XZ
.text:00001858 ??0ICompressSetOutStreamSize@@QAE@XZ proc near
.text:00001858                                         ; CODE XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+53p
.text:00001858
.text:00001858 var_4           = dword ptr -4
.text:00001858
.text:00001858                 push    ebp
.text:00001859                 mov     ebp, esp
.text:0000185B                 push    ecx
.text:0000185C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001863                 mov     [ebp+var_4], ecx
.text:00001866                 mov     ecx, [ebp+var_4]
.text:00001869                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000186E                 mov     eax, [ebp+var_4]
.text:00001871                 mov     dword ptr [eax], offset ??_7ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`vftable'
.text:00001877                 mov     eax, [ebp+var_4]
.text:0000187A                 add     esp, 4
.text:0000187D                 cmp     ebp, esp
.text:0000187F                 call    __RTC_CheckEsp
.text:00001884                 mov     esp, ebp
.text:00001886                 pop     ebp
.text:00001887                 retn
.text:00001887 ??0ICompressSetOutStreamSize@@QAE@XZ endp
.text:00001887
.text:00001887 _text           ends
.text:00001887
.rdata:00001888 ; ===========================================================================
.rdata:00001888
.rdata:00001888 ; Segment type: Pure data
.rdata:00001888 ; Segment permissions: Read
.rdata:00001888 _rdata          segment dword public 'DATA' use32
.rdata:00001888                 assume cs:_rdata
.rdata:00001888                 ;org 1888h
.rdata:00001888 ; COMDAT (pick largest)
.rdata:00001888                 dd offset ??_R4ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata:0000188C                 public ??_7ICompressSetOutStreamSize@@6B@
.rdata:0000188C ; const ICompressSetOutStreamSize::`vftable'
.rdata:0000188C ??_7ICompressSetOutStreamSize@@6B@ dd offset __purecall
.rdata:0000188C                                         ; DATA XREF: ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)+19o
.rdata:00001890                 dd offset __purecall
.rdata:00001894                 dd offset __purecall
.rdata:00001898                 dd offset __purecall
.rdata:00001898 _rdata          ends
.rdata:00001898
.rdata$r:0000189C ; ===========================================================================
.rdata$r:0000189C
.rdata$r:0000189C ; Segment type: Pure data
.rdata$r:0000189C ; Segment permissions: Read
.rdata$r:0000189C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000189C                 assume cs:_rdata$r
.rdata$r:0000189C                 ;org 189Ch
.rdata$r:0000189C ; COMDAT (pick any)
.rdata$r:0000189C                 public ??_R4ICompressSetOutStreamSize@@6B@
.rdata$r:0000189C ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata$r:0000189C ??_R4ICompressSetOutStreamSize@@6B@ db    0 ; DATA XREF: .rdata:00001888o
.rdata$r:0000189D                 db    0
.rdata$r:0000189E                 db    0
.rdata$r:0000189F                 db    0
.rdata$r:000018A0                 db    0
.rdata$r:000018A1                 db    0
.rdata$r:000018A2                 db    0
.rdata$r:000018A3                 db    0
.rdata$r:000018A4                 db    0
.rdata$r:000018A5                 db    0
.rdata$r:000018A6                 db    0
.rdata$r:000018A7                 db    0
.rdata$r:000018A8                 dd offset ??_R0?AUICompressSetOutStreamSize@@@8 ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:000018AC                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000018AC _rdata$r        ends
.rdata$r:000018AC
.text:000018B0 ; ===========================================================================
.text:000018B0
.text:000018B0 ; Segment type: Pure code
.text:000018B0 ; Segment permissions: Read/Execute
.text:000018B0 _text           segment para public 'CODE' use32
.text:000018B0                 assume cs:_text
.text:000018B0                 ;org 18B0h
.text:000018B0 ; COMDAT (pick any)
.text:000018B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000018B0
.text:000018B0 ; =============== S U B R O U T I N E =======================================
.text:000018B0
.text:000018B0 ; Attributes: bp-based frame
.text:000018B0
.text:000018B0 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:000018B0                 public ??0ISequentialInStream@@QAE@XZ
.text:000018B0 ??0ISequentialInStream@@QAE@XZ proc near
.text:000018B0                                         ; CODE XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+5Ep
.text:000018B0
.text:000018B0 var_4           = dword ptr -4
.text:000018B0
.text:000018B0                 push    ebp
.text:000018B1                 mov     ebp, esp
.text:000018B3                 push    ecx
.text:000018B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018BB                 mov     [ebp+var_4], ecx
.text:000018BE                 mov     ecx, [ebp+var_4]
.text:000018C1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000018C6                 mov     eax, [ebp+var_4]
.text:000018C9                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:000018CF                 mov     eax, [ebp+var_4]
.text:000018D2                 add     esp, 4
.text:000018D5                 cmp     ebp, esp
.text:000018D7                 call    __RTC_CheckEsp
.text:000018DC                 mov     esp, ebp
.text:000018DE                 pop     ebp
.text:000018DF                 retn
.text:000018DF ??0ISequentialInStream@@QAE@XZ endp
.text:000018DF
.text:000018DF _text           ends
.text:000018DF
.rdata:000018E0 ; ===========================================================================
.rdata:000018E0
.rdata:000018E0 ; Segment type: Pure data
.rdata:000018E0 ; Segment permissions: Read
.rdata:000018E0 _rdata          segment dword public 'DATA' use32
.rdata:000018E0                 assume cs:_rdata
.rdata:000018E0                 ;org 18E0h
.rdata:000018E0 ; COMDAT (pick largest)
.rdata:000018E0                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:000018E4                 public ??_7ISequentialInStream@@6B@
.rdata:000018E4 ; const ISequentialInStream::`vftable'
.rdata:000018E4 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:000018E4                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:000018E8                 dd offset __purecall
.rdata:000018EC                 dd offset __purecall
.rdata:000018F0                 dd offset __purecall
.rdata:000018F0 _rdata          ends
.rdata:000018F0
.rdata$r:000018F4 ; ===========================================================================
.rdata$r:000018F4
.rdata$r:000018F4 ; Segment type: Pure data
.rdata$r:000018F4 ; Segment permissions: Read
.rdata$r:000018F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018F4                 assume cs:_rdata$r
.rdata$r:000018F4                 ;org 18F4h
.rdata$r:000018F4 ; COMDAT (pick any)
.rdata$r:000018F4                 public ??_R4ISequentialInStream@@6B@
.rdata$r:000018F4 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:000018F4 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:000018E0o
.rdata$r:000018F5                 db    0
.rdata$r:000018F6                 db    0
.rdata$r:000018F7                 db    0
.rdata$r:000018F8                 db    0
.rdata$r:000018F9                 db    0
.rdata$r:000018FA                 db    0
.rdata$r:000018FB                 db    0
.rdata$r:000018FC                 db    0
.rdata$r:000018FD                 db    0
.rdata$r:000018FE                 db    0
.rdata$r:000018FF                 db    0
.rdata$r:00001900                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00001904                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001904 _rdata$r        ends
.rdata$r:00001904
.text:00001908 ; ===========================================================================
.text:00001908
.text:00001908 ; Segment type: Pure code
.text:00001908 ; Segment permissions: Read/Execute
.text:00001908 _text           segment para public 'CODE' use32
.text:00001908                 assume cs:_text
.text:00001908                 ;org 1908h
.text:00001908 ; COMDAT (pick any)
.text:00001908                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001908
.text:00001908 ; =============== S U B R O U T I N E =======================================
.text:00001908
.text:00001908 ; Attributes: bp-based frame
.text:00001908
.text:00001908 ; public: __thiscall IUnknown::IUnknown(void)
.text:00001908                 public ??0IUnknown@@QAE@XZ
.text:00001908 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00001908                                         ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+11p ...
.text:00001908
.text:00001908 var_4           = dword ptr -4
.text:00001908
.text:00001908                 push    ebp
.text:00001909                 mov     ebp, esp
.text:0000190B                 push    ecx
.text:0000190C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001913                 mov     [ebp+var_4], ecx
.text:00001916                 mov     eax, [ebp+var_4]
.text:00001919                 mov     esp, ebp
.text:0000191B                 pop     ebp
.text:0000191C                 retn
.text:0000191C ??0IUnknown@@QAE@XZ endp
.text:0000191C
.text:0000191C ; ---------------------------------------------------------------------------
.text:0000191D                 align 10h
.text:0000191D _text           ends
.text:0000191D
.text:00001920 ; ===========================================================================
.text:00001920
.text:00001920 ; Segment type: Pure code
.text:00001920 ; Segment permissions: Read/Execute
.text:00001920 _text           segment para public 'CODE' use32
.text:00001920                 assume cs:_text
.text:00001920                 ;org 1920h
.text:00001920 ; COMDAT (pick any)
.text:00001920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001920
.text:00001920 ; =============== S U B R O U T I N E =======================================
.text:00001920
.text:00001920 ; Attributes: bp-based frame
.text:00001920
.text:00001920 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00001920                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00001920 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00001920                                         ; CODE XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+C3p
.text:00001920
.text:00001920 var_4           = dword ptr -4
.text:00001920
.text:00001920                 push    ebp
.text:00001921                 mov     ebp, esp
.text:00001923                 push    ecx
.text:00001924                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000192B                 mov     [ebp+var_4], ecx
.text:0000192E                 mov     eax, [ebp+var_4]
.text:00001931                 mov     dword ptr [eax], 0
.text:00001937                 mov     eax, [ebp+var_4]
.text:0000193A                 mov     esp, ebp
.text:0000193C                 pop     ebp
.text:0000193D                 retn
.text:0000193D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:0000193D
.text:0000193D ; ---------------------------------------------------------------------------
.text:0000193E                 align 10h
.text:0000193E _text           ends
.text:0000193E
.text:00001940 ; ===========================================================================
.text:00001940
.text:00001940 ; Segment type: Pure code
.text:00001940 ; Segment permissions: Read/Execute
.text:00001940 _text           segment para public 'CODE' use32
.text:00001940                 assume cs:_text
.text:00001940                 ;org 1940h
.text:00001940 ; COMDAT (pick any)
.text:00001940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001940
.text:00001940 ; =============== S U B R O U T I N E =======================================
.text:00001940
.text:00001940 ; Attributes: bp-based frame
.text:00001940
.text:00001940 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00001940                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00001940 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00001940                                         ; CODE XREF: NCompress::NLzma2::CDecoder::~CDecoder(void)+80p
.text:00001940
.text:00001940 var_4           = dword ptr -4
.text:00001940
.text:00001940                 push    ebp
.text:00001941                 mov     ebp, esp
.text:00001943                 push    ecx
.text:00001944                 push    esi
.text:00001945                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000194C                 mov     [ebp+var_4], ecx
.text:0000194F                 mov     eax, [ebp+var_4]
.text:00001952                 cmp     dword ptr [eax], 0
.text:00001955                 jz      short loc_1972
.text:00001957                 mov     ecx, [ebp+var_4]
.text:0000195A                 mov     edx, [ecx]
.text:0000195C                 mov     eax, [ebp+var_4]
.text:0000195F                 mov     ecx, [eax]
.text:00001961                 mov     edx, [edx]
.text:00001963                 mov     esi, esp
.text:00001965                 push    ecx
.text:00001966                 mov     eax, [edx+8]
.text:00001969                 call    eax
.text:0000196B                 cmp     esi, esp
.text:0000196D                 call    __RTC_CheckEsp
.text:00001972
.text:00001972 loc_1972:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00001972                 pop     esi
.text:00001973                 add     esp, 4
.text:00001976                 cmp     ebp, esp
.text:00001978                 call    __RTC_CheckEsp
.text:0000197D                 mov     esp, ebp
.text:0000197F                 pop     ebp
.text:00001980                 retn
.text:00001980 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00001980
.text:00001980 ; ---------------------------------------------------------------------------
.text:00001981                 align 4
.text:00001981 _text           ends
.text:00001981
.text:00001984 ; ===========================================================================
.text:00001984
.text:00001984 ; Segment type: Pure code
.text:00001984 ; Segment permissions: Read/Execute
.text:00001984 _text           segment para public 'CODE' use32
.text:00001984                 assume cs:_text
.text:00001984                 ;org 1984h
.text:00001984 ; COMDAT (pick any)
.text:00001984                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001984
.text:00001984 ; =============== S U B R O U T I N E =======================================
.text:00001984
.text:00001984 ; Attributes: bp-based frame
.text:00001984
.text:00001984 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:00001984                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:00001984 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:00001984                                         ; CODE XREF: NCompress::NLzma2::CDecoder::ReleaseInStream(void)+9p
.text:00001984
.text:00001984 var_4           = dword ptr -4
.text:00001984
.text:00001984                 push    ebp
.text:00001985                 mov     ebp, esp
.text:00001987                 push    ecx
.text:00001988                 push    esi
.text:00001989                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001990                 mov     [ebp+var_4], ecx
.text:00001993                 mov     eax, [ebp+var_4]
.text:00001996                 cmp     dword ptr [eax], 0
.text:00001999                 jz      short loc_19BF
.text:0000199B                 mov     ecx, [ebp+var_4]
.text:0000199E                 mov     edx, [ecx]
.text:000019A0                 mov     eax, [ebp+var_4]
.text:000019A3                 mov     ecx, [eax]
.text:000019A5                 mov     edx, [edx]
.text:000019A7                 mov     esi, esp
.text:000019A9                 push    ecx
.text:000019AA                 mov     eax, [edx+8]
.text:000019AD                 call    eax
.text:000019AF                 cmp     esi, esp
.text:000019B1                 call    __RTC_CheckEsp
.text:000019B6                 mov     ecx, [ebp+var_4]
.text:000019B9                 mov     dword ptr [ecx], 0
.text:000019BF
.text:000019BF loc_19BF:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:000019BF                 pop     esi
.text:000019C0                 add     esp, 4
.text:000019C3                 cmp     ebp, esp
.text:000019C5                 call    __RTC_CheckEsp
.text:000019CA                 mov     esp, ebp
.text:000019CC                 pop     ebp
.text:000019CD                 retn
.text:000019CD ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:000019CD
.text:000019CD ; ---------------------------------------------------------------------------
.text:000019CE                 align 10h
.text:000019CE _text           ends
.text:000019CE
.text:000019D0 ; ===========================================================================
.text:000019D0
.text:000019D0 ; Segment type: Pure code
.text:000019D0 ; Segment permissions: Read/Execute
.text:000019D0 _text           segment para public 'CODE' use32
.text:000019D0                 assume cs:_text
.text:000019D0                 ;org 19D0h
.text:000019D0 ; COMDAT (pick any)
.text:000019D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000019D0
.text:000019D0 ; =============== S U B R O U T I N E =======================================
.text:000019D0
.text:000019D0 ; Attributes: bp-based frame
.text:000019D0
.text:000019D0 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator->(void)const
.text:000019D0                 public ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:000019D0 ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:000019D0                                         ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+55p
.text:000019D0
.text:000019D0 var_4           = dword ptr -4
.text:000019D0
.text:000019D0                 push    ebp
.text:000019D1                 mov     ebp, esp
.text:000019D3                 push    ecx
.text:000019D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019DB                 mov     [ebp+var_4], ecx
.text:000019DE                 mov     eax, [ebp+var_4]
.text:000019E1                 mov     eax, [eax]
.text:000019E3                 mov     esp, ebp
.text:000019E5                 pop     ebp
.text:000019E6                 retn
.text:000019E6 ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:000019E6
.text:000019E6 ; ---------------------------------------------------------------------------
.text:000019E7                 align 4
.text:000019E7 _text           ends
.text:000019E7
.text:000019E8 ; ===========================================================================
.text:000019E8
.text:000019E8 ; Segment type: Pure code
.text:000019E8 ; Segment permissions: Read/Execute
.text:000019E8 _text           segment para public 'CODE' use32
.text:000019E8                 assume cs:_text
.text:000019E8                 ;org 19E8h
.text:000019E8 ; COMDAT (pick any)
.text:000019E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000019E8
.text:000019E8 ; =============== S U B R O U T I N E =======================================
.text:000019E8
.text:000019E8 ; Attributes: bp-based frame
.text:000019E8
.text:000019E8 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:000019E8                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:000019E8 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:000019E8                                         ; CODE XREF: NCompress::NLzma2::CDecoder::SetInStream(ISequentialInStream *)+Dp
.text:000019E8
.text:000019E8 var_4           = dword ptr -4
.text:000019E8 arg_0           = dword ptr  8
.text:000019E8
.text:000019E8                 push    ebp
.text:000019E9                 mov     ebp, esp
.text:000019EB                 push    ecx
.text:000019EC                 push    esi
.text:000019ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019F4                 mov     [ebp+var_4], ecx
.text:000019F7                 cmp     [ebp+arg_0], 0
.text:000019FB                 jz      short loc_1A14
.text:000019FD                 mov     eax, [ebp+arg_0]
.text:00001A00                 mov     ecx, [eax]
.text:00001A02                 mov     esi, esp
.text:00001A04                 mov     edx, [ebp+arg_0]
.text:00001A07                 push    edx
.text:00001A08                 mov     eax, [ecx+4]
.text:00001A0B                 call    eax
.text:00001A0D                 cmp     esi, esp
.text:00001A0F                 call    __RTC_CheckEsp
.text:00001A14
.text:00001A14 loc_1A14:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00001A14                 mov     ecx, [ebp+var_4]
.text:00001A17                 cmp     dword ptr [ecx], 0
.text:00001A1A                 jz      short loc_1A37
.text:00001A1C                 mov     edx, [ebp+var_4]
.text:00001A1F                 mov     eax, [edx]
.text:00001A21                 mov     ecx, [ebp+var_4]
.text:00001A24                 mov     edx, [ecx]
.text:00001A26                 mov     eax, [eax]
.text:00001A28                 mov     esi, esp
.text:00001A2A                 push    edx
.text:00001A2B                 mov     ecx, [eax+8]
.text:00001A2E                 call    ecx
.text:00001A30                 cmp     esi, esp
.text:00001A32                 call    __RTC_CheckEsp
.text:00001A37
.text:00001A37 loc_1A37:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00001A37                 mov     edx, [ebp+var_4]
.text:00001A3A                 mov     eax, [ebp+arg_0]
.text:00001A3D                 mov     [edx], eax
.text:00001A3F                 mov     eax, [ebp+arg_0]
.text:00001A42                 pop     esi
.text:00001A43                 add     esp, 4
.text:00001A46                 cmp     ebp, esp
.text:00001A48                 call    __RTC_CheckEsp
.text:00001A4D                 mov     esp, ebp
.text:00001A4F                 pop     ebp
.text:00001A50                 retn    4
.text:00001A50 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00001A50
.text:00001A50 ; ---------------------------------------------------------------------------
.text:00001A53                 align 4
.text:00001A53 _text           ends
.text:00001A53
.text:00001A54 ; ===========================================================================
.text:00001A54
.text:00001A54 ; Segment type: Pure code
.text:00001A54 ; Segment permissions: Read/Execute
.text:00001A54 _text           segment para public 'CODE' use32
.text:00001A54                 assume cs:_text
.text:00001A54                 ;org 1A54h
.text:00001A54 ; COMDAT (pick any)
.text:00001A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A54
.text:00001A54 ; =============== S U B R O U T I N E =======================================
.text:00001A54
.text:00001A54
.text:00001A54 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::Release`adjustor{16}' (void)
.text:00001A54                 public ?Release@CDecoder@NLzma2@NCompress@@WBA@AGKXZ
.text:00001A54 ?Release@CDecoder@NLzma2@NCompress@@WBA@AGKXZ proc near
.text:00001A54                                         ; DATA XREF: .rdata:00000BE4o
.text:00001A54
.text:00001A54 arg_0           = dword ptr  4
.text:00001A54
.text:00001A54                 sub     [esp+arg_0], 10h
.text:00001A59                 jmp     ?Release@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::Release(void)
.text:00001A59 ?Release@CDecoder@NLzma2@NCompress@@WBA@AGKXZ endp
.text:00001A59
.text:00001A59 ; ---------------------------------------------------------------------------
.text:00001A5E                 align 10h
.text:00001A5E _text           ends
.text:00001A5E
.text:00001A60 ; ===========================================================================
.text:00001A60
.text:00001A60 ; Segment type: Pure code
.text:00001A60 ; Segment permissions: Read/Execute
.text:00001A60 _text           segment para public 'CODE' use32
.text:00001A60                 assume cs:_text
.text:00001A60                 ;org 1A60h
.text:00001A60 ; COMDAT (pick any)
.text:00001A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A60
.text:00001A60 ; =============== S U B R O U T I N E =======================================
.text:00001A60
.text:00001A60
.text:00001A60 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::AddRef`adjustor{8}' (void)
.text:00001A60                 public ?AddRef@CDecoder@NLzma2@NCompress@@W7AGKXZ
.text:00001A60 ?AddRef@CDecoder@NLzma2@NCompress@@W7AGKXZ proc near
.text:00001A60                                         ; DATA XREF: .rdata:00000C0Co
.text:00001A60
.text:00001A60 arg_0           = dword ptr  4
.text:00001A60
.text:00001A60                 sub     [esp+arg_0], 8
.text:00001A65                 jmp     ?AddRef@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::AddRef(void)
.text:00001A65 ?AddRef@CDecoder@NLzma2@NCompress@@W7AGKXZ endp
.text:00001A65
.text:00001A65 ; ---------------------------------------------------------------------------
.text:00001A6A                 align 4
.text:00001A6A _text           ends
.text:00001A6A
.text:00001A6C ; ===========================================================================
.text:00001A6C
.text:00001A6C ; Segment type: Pure code
.text:00001A6C ; Segment permissions: Read/Execute
.text:00001A6C _text           segment para public 'CODE' use32
.text:00001A6C                 assume cs:_text
.text:00001A6C                 ;org 1A6Ch
.text:00001A6C ; COMDAT (pick any)
.text:00001A6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A6C
.text:00001A6C ; =============== S U B R O U T I N E =======================================
.text:00001A6C
.text:00001A6C
.text:00001A6C ; [thunk]:public: virtual long __stdcall NCompress::NLzma2::CDecoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00001A6C                 public ?QueryInterface@CDecoder@NLzma2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00001A6C ?QueryInterface@CDecoder@NLzma2@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00001A6C                                         ; DATA XREF: .rdata:const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}o
.text:00001A6C
.text:00001A6C arg_0           = dword ptr  4
.text:00001A6C
.text:00001A6C                 sub     [esp+arg_0], 4
.text:00001A71                 jmp     ?QueryInterface@CDecoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001A71 ?QueryInterface@CDecoder@NLzma2@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00001A71
.text:00001A71 ; ---------------------------------------------------------------------------
.text:00001A76                 align 4
.text:00001A76 _text           ends
.text:00001A76
.text:00001A78 ; ===========================================================================
.text:00001A78
.text:00001A78 ; Segment type: Pure code
.text:00001A78 ; Segment permissions: Read/Execute
.text:00001A78 _text           segment para public 'CODE' use32
.text:00001A78                 assume cs:_text
.text:00001A78                 ;org 1A78h
.text:00001A78 ; COMDAT (pick any)
.text:00001A78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A78
.text:00001A78 ; =============== S U B R O U T I N E =======================================
.text:00001A78
.text:00001A78
.text:00001A78 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::Release`adjustor{20}' (void)
.text:00001A78                 public ?Release@CDecoder@NLzma2@NCompress@@WBE@AGKXZ
.text:00001A78 ?Release@CDecoder@NLzma2@NCompress@@WBE@AGKXZ proc near
.text:00001A78                                         ; DATA XREF: .rdata:00000BCCo
.text:00001A78
.text:00001A78 arg_0           = dword ptr  4
.text:00001A78
.text:00001A78                 sub     [esp+arg_0], 14h
.text:00001A7D                 jmp     ?Release@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::Release(void)
.text:00001A7D ?Release@CDecoder@NLzma2@NCompress@@WBE@AGKXZ endp
.text:00001A7D
.text:00001A7D ; ---------------------------------------------------------------------------
.text:00001A82                 align 4
.text:00001A82 _text           ends
.text:00001A82
.text:00001A84 ; ===========================================================================
.text:00001A84
.text:00001A84 ; Segment type: Pure code
.text:00001A84 ; Segment permissions: Read/Execute
.text:00001A84 _text           segment para public 'CODE' use32
.text:00001A84                 assume cs:_text
.text:00001A84                 ;org 1A84h
.text:00001A84 ; COMDAT (pick any)
.text:00001A84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A84
.text:00001A84 ; =============== S U B R O U T I N E =======================================
.text:00001A84
.text:00001A84
.text:00001A84 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::AddRef`adjustor{12}' (void)
.text:00001A84                 public ?AddRef@CDecoder@NLzma2@NCompress@@WM@AGKXZ
.text:00001A84 ?AddRef@CDecoder@NLzma2@NCompress@@WM@AGKXZ proc near
.text:00001A84                                         ; DATA XREF: .rdata:00000BF8o
.text:00001A84
.text:00001A84 arg_0           = dword ptr  4
.text:00001A84
.text:00001A84                 sub     [esp+arg_0], 0Ch
.text:00001A89                 jmp     ?AddRef@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::AddRef(void)
.text:00001A89 ?AddRef@CDecoder@NLzma2@NCompress@@WM@AGKXZ endp
.text:00001A89
.text:00001A89 ; ---------------------------------------------------------------------------
.text:00001A8E                 align 10h
.text:00001A8E _text           ends
.text:00001A8E
.text:00001A90 ; ===========================================================================
.text:00001A90
.text:00001A90 ; Segment type: Pure code
.text:00001A90 ; Segment permissions: Read/Execute
.text:00001A90 _text           segment para public 'CODE' use32
.text:00001A90                 assume cs:_text
.text:00001A90                 ;org 1A90h
.text:00001A90 ; COMDAT (pick any)
.text:00001A90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A90
.text:00001A90 ; =============== S U B R O U T I N E =======================================
.text:00001A90
.text:00001A90
.text:00001A90 ; [thunk]:public: virtual long __stdcall NCompress::NLzma2::CDecoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00001A90                 public ?QueryInterface@CDecoder@NLzma2@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00001A90 ?QueryInterface@CDecoder@NLzma2@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00001A90                                         ; DATA XREF: .rdata:const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetFinishMode'}o
.text:00001A90
.text:00001A90 arg_0           = dword ptr  4
.text:00001A90
.text:00001A90                 sub     [esp+arg_0], 8
.text:00001A95                 jmp     ?QueryInterface@CDecoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001A95 ?QueryInterface@CDecoder@NLzma2@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00001A95
.text:00001A95 ; ---------------------------------------------------------------------------
.text:00001A9A                 align 4
.text:00001A9A _text           ends
.text:00001A9A
.text:00001A9C ; ===========================================================================
.text:00001A9C
.text:00001A9C ; Segment type: Pure code
.text:00001A9C ; Segment permissions: Read/Execute
.text:00001A9C _text           segment para public 'CODE' use32
.text:00001A9C                 assume cs:_text
.text:00001A9C                 ;org 1A9Ch
.text:00001A9C ; COMDAT (pick any)
.text:00001A9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A9C
.text:00001A9C ; =============== S U B R O U T I N E =======================================
.text:00001A9C
.text:00001A9C
.text:00001A9C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::Release`adjustor{24}' (void)
.text:00001A9C                 public ?Release@CDecoder@NLzma2@NCompress@@WBI@AGKXZ
.text:00001A9C ?Release@CDecoder@NLzma2@NCompress@@WBI@AGKXZ proc near
.text:00001A9C                                         ; DATA XREF: .rdata:00000BB8o
.text:00001A9C
.text:00001A9C arg_0           = dword ptr  4
.text:00001A9C
.text:00001A9C                 sub     [esp+arg_0], 18h
.text:00001AA1                 jmp     ?Release@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::Release(void)
.text:00001AA1 ?Release@CDecoder@NLzma2@NCompress@@WBI@AGKXZ endp
.text:00001AA1
.text:00001AA1 ; ---------------------------------------------------------------------------
.text:00001AA6                 align 4
.text:00001AA6 _text           ends
.text:00001AA6
.text:00001AA8 ; ===========================================================================
.text:00001AA8
.text:00001AA8 ; Segment type: Pure code
.text:00001AA8 ; Segment permissions: Read/Execute
.text:00001AA8 _text           segment para public 'CODE' use32
.text:00001AA8                 assume cs:_text
.text:00001AA8                 ;org 1AA8h
.text:00001AA8 ; COMDAT (pick any)
.text:00001AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AA8
.text:00001AA8 ; =============== S U B R O U T I N E =======================================
.text:00001AA8
.text:00001AA8
.text:00001AA8 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::AddRef`adjustor{16}' (void)
.text:00001AA8                 public ?AddRef@CDecoder@NLzma2@NCompress@@WBA@AGKXZ
.text:00001AA8 ?AddRef@CDecoder@NLzma2@NCompress@@WBA@AGKXZ proc near
.text:00001AA8                                         ; DATA XREF: .rdata:00000BE0o
.text:00001AA8
.text:00001AA8 arg_0           = dword ptr  4
.text:00001AA8
.text:00001AA8                 sub     [esp+arg_0], 10h
.text:00001AAD                 jmp     ?AddRef@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::AddRef(void)
.text:00001AAD ?AddRef@CDecoder@NLzma2@NCompress@@WBA@AGKXZ endp
.text:00001AAD
.text:00001AAD ; ---------------------------------------------------------------------------
.text:00001AB2                 align 4
.text:00001AB2 _text           ends
.text:00001AB2
.text:00001AB4 ; ===========================================================================
.text:00001AB4
.text:00001AB4 ; Segment type: Pure code
.text:00001AB4 ; Segment permissions: Read/Execute
.text:00001AB4 _text           segment para public 'CODE' use32
.text:00001AB4                 assume cs:_text
.text:00001AB4                 ;org 1AB4h
.text:00001AB4 ; COMDAT (pick any)
.text:00001AB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AB4
.text:00001AB4 ; =============== S U B R O U T I N E =======================================
.text:00001AB4
.text:00001AB4
.text:00001AB4 ; [thunk]:public: virtual long __stdcall NCompress::NLzma2::CDecoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00001AB4                 public ?QueryInterface@CDecoder@NLzma2@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:00001AB4 ?QueryInterface@CDecoder@NLzma2@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00001AB4                                         ; DATA XREF: .rdata:const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:00001AB4
.text:00001AB4 arg_0           = dword ptr  4
.text:00001AB4
.text:00001AB4                 sub     [esp+arg_0], 0Ch
.text:00001AB9                 jmp     ?QueryInterface@CDecoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001AB9 ?QueryInterface@CDecoder@NLzma2@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00001AB9
.text:00001AB9 ; ---------------------------------------------------------------------------
.text:00001ABE                 align 10h
.text:00001ABE _text           ends
.text:00001ABE
.text:00001AC0 ; ===========================================================================
.text:00001AC0
.text:00001AC0 ; Segment type: Pure code
.text:00001AC0 ; Segment permissions: Read/Execute
.text:00001AC0 _text           segment para public 'CODE' use32
.text:00001AC0                 assume cs:_text
.text:00001AC0                 ;org 1AC0h
.text:00001AC0 ; COMDAT (pick any)
.text:00001AC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AC0
.text:00001AC0 ; =============== S U B R O U T I N E =======================================
.text:00001AC0
.text:00001AC0
.text:00001AC0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::Release`adjustor{28}' (void)
.text:00001AC0                 public ?Release@CDecoder@NLzma2@NCompress@@WBM@AGKXZ
.text:00001AC0 ?Release@CDecoder@NLzma2@NCompress@@WBM@AGKXZ proc near
.text:00001AC0                                         ; DATA XREF: .rdata:00000BA4o
.text:00001AC0
.text:00001AC0 arg_0           = dword ptr  4
.text:00001AC0
.text:00001AC0                 sub     [esp+arg_0], 1Ch
.text:00001AC5                 jmp     ?Release@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::Release(void)
.text:00001AC5 ?Release@CDecoder@NLzma2@NCompress@@WBM@AGKXZ endp
.text:00001AC5
.text:00001AC5 ; ---------------------------------------------------------------------------
.text:00001ACA                 align 4
.text:00001ACA _text           ends
.text:00001ACA
.text:00001ACC ; ===========================================================================
.text:00001ACC
.text:00001ACC ; Segment type: Pure code
.text:00001ACC ; Segment permissions: Read/Execute
.text:00001ACC _text           segment para public 'CODE' use32
.text:00001ACC                 assume cs:_text
.text:00001ACC                 ;org 1ACCh
.text:00001ACC ; COMDAT (pick any)
.text:00001ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001ACC
.text:00001ACC ; =============== S U B R O U T I N E =======================================
.text:00001ACC
.text:00001ACC
.text:00001ACC ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::AddRef`adjustor{20}' (void)
.text:00001ACC                 public ?AddRef@CDecoder@NLzma2@NCompress@@WBE@AGKXZ
.text:00001ACC ?AddRef@CDecoder@NLzma2@NCompress@@WBE@AGKXZ proc near
.text:00001ACC                                         ; DATA XREF: .rdata:00000BC8o
.text:00001ACC
.text:00001ACC arg_0           = dword ptr  4
.text:00001ACC
.text:00001ACC                 sub     [esp+arg_0], 14h
.text:00001AD1                 jmp     ?AddRef@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::AddRef(void)
.text:00001AD1 ?AddRef@CDecoder@NLzma2@NCompress@@WBE@AGKXZ endp
.text:00001AD1
.text:00001AD1 ; ---------------------------------------------------------------------------
.text:00001AD6                 align 4
.text:00001AD6 _text           ends
.text:00001AD6
.text:00001AD8 ; ===========================================================================
.text:00001AD8
.text:00001AD8 ; Segment type: Pure code
.text:00001AD8 ; Segment permissions: Read/Execute
.text:00001AD8 _text           segment para public 'CODE' use32
.text:00001AD8                 assume cs:_text
.text:00001AD8                 ;org 1AD8h
.text:00001AD8 ; COMDAT (pick any)
.text:00001AD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AD8
.text:00001AD8 ; =============== S U B R O U T I N E =======================================
.text:00001AD8
.text:00001AD8
.text:00001AD8 ; [thunk]:public: virtual long __stdcall NCompress::NLzma2::CDecoder::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:00001AD8                 public ?QueryInterface@CDecoder@NLzma2@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.text:00001AD8 ?QueryInterface@CDecoder@NLzma2@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:00001AD8                                         ; DATA XREF: .rdata:const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetBufSize'}o
.text:00001AD8
.text:00001AD8 arg_0           = dword ptr  4
.text:00001AD8
.text:00001AD8                 sub     [esp+arg_0], 10h
.text:00001ADD                 jmp     ?QueryInterface@CDecoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001ADD ?QueryInterface@CDecoder@NLzma2@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:00001ADD
.text:00001ADD ; ---------------------------------------------------------------------------
.text:00001AE2                 align 4
.text:00001AE2 _text           ends
.text:00001AE2
.text:00001AE4 ; ===========================================================================
.text:00001AE4
.text:00001AE4 ; Segment type: Pure code
.text:00001AE4 ; Segment permissions: Read/Execute
.text:00001AE4 _text           segment para public 'CODE' use32
.text:00001AE4                 assume cs:_text
.text:00001AE4                 ;org 1AE4h
.text:00001AE4 ; COMDAT (pick any)
.text:00001AE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AE4
.text:00001AE4 ; =============== S U B R O U T I N E =======================================
.text:00001AE4
.text:00001AE4
.text:00001AE4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::AddRef`adjustor{24}' (void)
.text:00001AE4                 public ?AddRef@CDecoder@NLzma2@NCompress@@WBI@AGKXZ
.text:00001AE4 ?AddRef@CDecoder@NLzma2@NCompress@@WBI@AGKXZ proc near
.text:00001AE4                                         ; DATA XREF: .rdata:00000BB4o
.text:00001AE4
.text:00001AE4 arg_0           = dword ptr  4
.text:00001AE4
.text:00001AE4                 sub     [esp+arg_0], 18h
.text:00001AE9                 jmp     ?AddRef@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::AddRef(void)
.text:00001AE9 ?AddRef@CDecoder@NLzma2@NCompress@@WBI@AGKXZ endp
.text:00001AE9
.text:00001AE9 ; ---------------------------------------------------------------------------
.text:00001AEE                 align 10h
.text:00001AEE _text           ends
.text:00001AEE
.text:00001AF0 ; ===========================================================================
.text:00001AF0
.text:00001AF0 ; Segment type: Pure code
.text:00001AF0 ; Segment permissions: Read/Execute
.text:00001AF0 _text           segment para public 'CODE' use32
.text:00001AF0                 assume cs:_text
.text:00001AF0                 ;org 1AF0h
.text:00001AF0 ; COMDAT (pick any)
.text:00001AF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AF0
.text:00001AF0 ; =============== S U B R O U T I N E =======================================
.text:00001AF0
.text:00001AF0
.text:00001AF0 ; [thunk]:public: virtual long __stdcall NCompress::NLzma2::CDecoder::QueryInterface`adjustor{20}' (struct _GUID const &, void * *)
.text:00001AF0                 public ?QueryInterface@CDecoder@NLzma2@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z
.text:00001AF0 ?QueryInterface@CDecoder@NLzma2@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z proc near
.text:00001AF0                                         ; DATA XREF: .rdata:const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetInStream'}o
.text:00001AF0
.text:00001AF0 arg_0           = dword ptr  4
.text:00001AF0
.text:00001AF0                 sub     [esp+arg_0], 14h
.text:00001AF5                 jmp     ?QueryInterface@CDecoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001AF5 ?QueryInterface@CDecoder@NLzma2@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z endp
.text:00001AF5
.text:00001AF5 ; ---------------------------------------------------------------------------
.text:00001AFA                 align 4
.text:00001AFA _text           ends
.text:00001AFA
.text:00001AFC ; ===========================================================================
.text:00001AFC
.text:00001AFC ; Segment type: Pure code
.text:00001AFC ; Segment permissions: Read/Execute
.text:00001AFC _text           segment para public 'CODE' use32
.text:00001AFC                 assume cs:_text
.text:00001AFC                 ;org 1AFCh
.text:00001AFC ; COMDAT (pick any)
.text:00001AFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AFC
.text:00001AFC ; =============== S U B R O U T I N E =======================================
.text:00001AFC
.text:00001AFC
.text:00001AFC ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::Release`adjustor{4}' (void)
.text:00001AFC                 public ?Release@CDecoder@NLzma2@NCompress@@W3AGKXZ
.text:00001AFC ?Release@CDecoder@NLzma2@NCompress@@W3AGKXZ proc near
.text:00001AFC                                         ; DATA XREF: .rdata:00000C24o
.text:00001AFC
.text:00001AFC arg_0           = dword ptr  4
.text:00001AFC
.text:00001AFC                 sub     [esp+arg_0], 4
.text:00001B01                 jmp     ?Release@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::Release(void)
.text:00001B01 ?Release@CDecoder@NLzma2@NCompress@@W3AGKXZ endp
.text:00001B01
.text:00001B01 ; ---------------------------------------------------------------------------
.text:00001B06                 align 4
.text:00001B06 _text           ends
.text:00001B06
.text:00001B08 ; ===========================================================================
.text:00001B08
.text:00001B08 ; Segment type: Pure code
.text:00001B08 ; Segment permissions: Read/Execute
.text:00001B08 _text           segment para public 'CODE' use32
.text:00001B08                 assume cs:_text
.text:00001B08                 ;org 1B08h
.text:00001B08 ; COMDAT (pick any)
.text:00001B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B08
.text:00001B08 ; =============== S U B R O U T I N E =======================================
.text:00001B08
.text:00001B08
.text:00001B08 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::AddRef`adjustor{28}' (void)
.text:00001B08                 public ?AddRef@CDecoder@NLzma2@NCompress@@WBM@AGKXZ
.text:00001B08 ?AddRef@CDecoder@NLzma2@NCompress@@WBM@AGKXZ proc near
.text:00001B08                                         ; DATA XREF: .rdata:00000BA0o
.text:00001B08
.text:00001B08 arg_0           = dword ptr  4
.text:00001B08
.text:00001B08                 sub     [esp+arg_0], 1Ch
.text:00001B0D                 jmp     ?AddRef@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::AddRef(void)
.text:00001B0D ?AddRef@CDecoder@NLzma2@NCompress@@WBM@AGKXZ endp
.text:00001B0D
.text:00001B0D ; ---------------------------------------------------------------------------
.text:00001B12                 align 4
.text:00001B12 _text           ends
.text:00001B12
.text:00001B14 ; ===========================================================================
.text:00001B14
.text:00001B14 ; Segment type: Pure code
.text:00001B14 ; Segment permissions: Read/Execute
.text:00001B14 _text           segment para public 'CODE' use32
.text:00001B14                 assume cs:_text
.text:00001B14                 ;org 1B14h
.text:00001B14 ; COMDAT (pick any)
.text:00001B14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B14
.text:00001B14 ; =============== S U B R O U T I N E =======================================
.text:00001B14
.text:00001B14
.text:00001B14 ; [thunk]:public: virtual long __stdcall NCompress::NLzma2::CDecoder::QueryInterface`adjustor{24}' (struct _GUID const &, void * *)
.text:00001B14                 public ?QueryInterface@CDecoder@NLzma2@NCompress@@WBI@AGJABU_GUID@@PAPAX@Z
.text:00001B14 ?QueryInterface@CDecoder@NLzma2@NCompress@@WBI@AGJABU_GUID@@PAPAX@Z proc near
.text:00001B14                                         ; DATA XREF: .rdata:const NCompress::NLzma2::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00001B14
.text:00001B14 arg_0           = dword ptr  4
.text:00001B14
.text:00001B14                 sub     [esp+arg_0], 18h
.text:00001B19                 jmp     ?QueryInterface@CDecoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001B19 ?QueryInterface@CDecoder@NLzma2@NCompress@@WBI@AGJABU_GUID@@PAPAX@Z endp
.text:00001B19
.text:00001B19 ; ---------------------------------------------------------------------------
.text:00001B1E                 align 10h
.text:00001B1E _text           ends
.text:00001B1E
.text:00001B20 ; ===========================================================================
.text:00001B20
.text:00001B20 ; Segment type: Pure code
.text:00001B20 ; Segment permissions: Read/Execute
.text:00001B20 _text           segment para public 'CODE' use32
.text:00001B20                 assume cs:_text
.text:00001B20                 ;org 1B20h
.text:00001B20 ; COMDAT (pick any)
.text:00001B20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B20
.text:00001B20 ; =============== S U B R O U T I N E =======================================
.text:00001B20
.text:00001B20
.text:00001B20 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::Release`adjustor{8}' (void)
.text:00001B20                 public ?Release@CDecoder@NLzma2@NCompress@@W7AGKXZ
.text:00001B20 ?Release@CDecoder@NLzma2@NCompress@@W7AGKXZ proc near
.text:00001B20                                         ; DATA XREF: .rdata:00000C10o
.text:00001B20
.text:00001B20 arg_0           = dword ptr  4
.text:00001B20
.text:00001B20                 sub     [esp+arg_0], 8
.text:00001B25                 jmp     ?Release@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::Release(void)
.text:00001B25 ?Release@CDecoder@NLzma2@NCompress@@W7AGKXZ endp
.text:00001B25
.text:00001B25 ; ---------------------------------------------------------------------------
.text:00001B2A                 align 4
.text:00001B2A _text           ends
.text:00001B2A
.text:00001B2C ; ===========================================================================
.text:00001B2C
.text:00001B2C ; Segment type: Pure code
.text:00001B2C ; Segment permissions: Read/Execute
.text:00001B2C _text           segment para public 'CODE' use32
.text:00001B2C                 assume cs:_text
.text:00001B2C                 ;org 1B2Ch
.text:00001B2C ; COMDAT (pick any)
.text:00001B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B2C
.text:00001B2C ; =============== S U B R O U T I N E =======================================
.text:00001B2C
.text:00001B2C
.text:00001B2C ; [thunk]:public: virtual long __stdcall NCompress::NLzma2::CDecoder::QueryInterface`adjustor{28}' (struct _GUID const &, void * *)
.text:00001B2C                 public ?QueryInterface@CDecoder@NLzma2@NCompress@@WBM@AGJABU_GUID@@PAPAX@Z
.text:00001B2C ?QueryInterface@CDecoder@NLzma2@NCompress@@WBM@AGJABU_GUID@@PAPAX@Z proc near
.text:00001B2C                                         ; DATA XREF: .rdata:const NCompress::NLzma2::CDecoder::`vftable'{for `ISequentialInStream'}o
.text:00001B2C
.text:00001B2C arg_0           = dword ptr  4
.text:00001B2C
.text:00001B2C                 sub     [esp+arg_0], 1Ch
.text:00001B31                 jmp     ?QueryInterface@CDecoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001B31 ?QueryInterface@CDecoder@NLzma2@NCompress@@WBM@AGJABU_GUID@@PAPAX@Z endp
.text:00001B31
.text:00001B31 ; ---------------------------------------------------------------------------
.text:00001B36                 align 4
.text:00001B36 _text           ends
.text:00001B36
.text:00001B38 ; ===========================================================================
.text:00001B38
.text:00001B38 ; Segment type: Pure code
.text:00001B38 ; Segment permissions: Read/Execute
.text:00001B38 _text           segment para public 'CODE' use32
.text:00001B38                 assume cs:_text
.text:00001B38                 ;org 1B38h
.text:00001B38 ; COMDAT (pick any)
.text:00001B38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B38
.text:00001B38 ; =============== S U B R O U T I N E =======================================
.text:00001B38
.text:00001B38
.text:00001B38 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::Release`adjustor{12}' (void)
.text:00001B38                 public ?Release@CDecoder@NLzma2@NCompress@@WM@AGKXZ
.text:00001B38 ?Release@CDecoder@NLzma2@NCompress@@WM@AGKXZ proc near
.text:00001B38                                         ; DATA XREF: .rdata:00000BFCo
.text:00001B38
.text:00001B38 arg_0           = dword ptr  4
.text:00001B38
.text:00001B38                 sub     [esp+arg_0], 0Ch
.text:00001B3D                 jmp     ?Release@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::Release(void)
.text:00001B3D ?Release@CDecoder@NLzma2@NCompress@@WM@AGKXZ endp
.text:00001B3D
.text:00001B3D ; ---------------------------------------------------------------------------
.text:00001B42                 align 4
.text:00001B42 _text           ends
.text:00001B42
.text:00001B44 ; ===========================================================================
.text:00001B44
.text:00001B44 ; Segment type: Pure code
.text:00001B44 ; Segment permissions: Read/Execute
.text:00001B44 _text           segment para public 'CODE' use32
.text:00001B44                 assume cs:_text
.text:00001B44                 ;org 1B44h
.text:00001B44 ; COMDAT (pick any)
.text:00001B44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B44
.text:00001B44 ; =============== S U B R O U T I N E =======================================
.text:00001B44
.text:00001B44
.text:00001B44 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CDecoder::AddRef`adjustor{4}' (void)
.text:00001B44                 public ?AddRef@CDecoder@NLzma2@NCompress@@W3AGKXZ
.text:00001B44 ?AddRef@CDecoder@NLzma2@NCompress@@W3AGKXZ proc near
.text:00001B44                                         ; DATA XREF: .rdata:00000C20o
.text:00001B44
.text:00001B44 arg_0           = dword ptr  4
.text:00001B44
.text:00001B44                 sub     [esp+arg_0], 4
.text:00001B49                 jmp     ?AddRef@CDecoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CDecoder::AddRef(void)
.text:00001B49 ?AddRef@CDecoder@NLzma2@NCompress@@W3AGKXZ endp
.text:00001B49
.text:00001B49 _text           ends
.text:00001B49
UNDEF:00001B50 ; ===========================================================================
UNDEF:00001B50
UNDEF:00001B50 ; Segment type: Externs
UNDEF:00001B50 ; UNDEF
UNDEF:00001B50                 extrn __RTC_CheckEsp:near
UNDEF:00001B50                                         ; CODE XREF: NCompress::NLzma2::CDecoder::CDecoder(void)+11Ap
UNDEF:00001B50                                         ; NCompress::NLzma2::CDecoder::~CDecoder(void)+8Ap ...
UNDEF:00001B54                 extrn __RTC_Shutdown:near
UNDEF:00001B54                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001B58                 extrn __RTC_InitBase:near
UNDEF:00001B58                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001B5C ; const type_info::`vftable'
UNDEF:00001B5C                 extrn ??_7type_info@@6B@:near
UNDEF:00001B5C                                         ; DATA XREF: .data:NCompress::NLzma2::CDecoder `RTTI Type Descriptor'o
UNDEF:00001B5C                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00001B60 ; public: virtual void * __thiscall NCompress::NLzma2::CDecoder::`scalar deleting destructor'(unsigned int)
UNDEF:00001B60                 extrn ??_GCDecoder@NLzma2@NCompress@@UAEPAXI@Z_0:near
UNDEF:00001B64 ; public: virtual void * __thiscall NCompress::NLzma2::CDecoder::`vector deleting destructor'(unsigned int)
UNDEF:00001B64                 extrn ??_ECDecoder@NLzma2@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00001B64                                         ; DATA XREF: .rdata:00000C40o
UNDEF:00001B68                 extrn _IID_ISequentialInStream:near
UNDEF:00001B68                                         ; DATA XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *):loc_14AFo
UNDEF:00001B6C                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00001B6C                                         ; DATA XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *):loc_147Bo
UNDEF:00001B70                 extrn _IID_ICompressSetInStream:near
UNDEF:00001B70                                         ; DATA XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *):loc_1447o
UNDEF:00001B74                 extrn _IID_ICompressSetBufSize:near
UNDEF:00001B74                                         ; DATA XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *):loc_1410o
UNDEF:00001B78                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:00001B78                                         ; DATA XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *):loc_13D9o
UNDEF:00001B7C                 extrn _IID_ICompressSetFinishMode:near
UNDEF:00001B7C                                         ; DATA XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *):loc_13A2o
UNDEF:00001B80                 extrn _IID_ICompressSetDecoderProperties2:near
UNDEF:00001B80                                         ; DATA XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *):loc_136Bo
UNDEF:00001B84                 extrn _IID_ICompressCoder:near
UNDEF:00001B84                                         ; DATA XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *):loc_134Co
UNDEF:00001B88 ; const IID IID_IUnknown
UNDEF:00001B88                 extrn _IID_IUnknown:near
UNDEF:00001B88                                         ; DATA XREF: NCompress::NLzma2::CDecoder::QueryInterface(_GUID const &,void * *)+29o
UNDEF:00001B8C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001B8C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001B90 ; void __cdecl operator delete(void *)
UNDEF:00001B90                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NLzma2::CDecoder::`scalar deleting destructor'(uint)+22p
UNDEF:00001B94                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00001B94                                         ; .rdata:00001678o ...
UNDEF:00001B98 ; __stdcall MidFree(x)
UNDEF:00001B98                 extrn _MidFree@4:near   ; CODE XREF: NCompress::NLzma2::CDecoder::~CDecoder(void)+75p
UNDEF:00001B98                                         ; NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)+65p
UNDEF:00001B9C ; __stdcall LzmaDec_Free(x, x)
UNDEF:00001B9C                 extrn _LzmaDec_Free@8:near
UNDEF:00001B9C                                         ; CODE XREF: NCompress::NLzma2::CDecoder::~CDecoder(void)+69p
UNDEF:00001BA0                 extrn _g_Alloc:near     ; DATA XREF: NCompress::NLzma2::CDecoder::~CDecoder(void)+5Do
UNDEF:00001BA0                                         ; NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint):loc_22Bo
UNDEF:00001BA4 ; __stdcall MidAlloc(x)
UNDEF:00001BA4                 extrn _MidAlloc@4:near  ; CODE XREF: NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)+7Bp
UNDEF:00001BA8 ; __stdcall Lzma2Dec_Allocate(x, x, x)
UNDEF:00001BA8                 extrn _Lzma2Dec_Allocate@12:near
UNDEF:00001BA8                                         ; CODE XREF: NCompress::NLzma2::CDecoder::SetDecoderProperties2(uchar const *,uint)+2Ep
UNDEF:00001BAC ; __stdcall Lzma2Dec_Init(x)
UNDEF:00001BAC                 extrn _Lzma2Dec_Init@4:near
UNDEF:00001BAC                                         ; CODE XREF: NCompress::NLzma2::CDecoder::SetOutStreamSize(unsigned __int64 const *)+46p
UNDEF:00001BB0 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00001BB0                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00001BB0                                         ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2CCp
UNDEF:00001BB0                                         ; NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+450p
UNDEF:00001BB4 ; __stdcall Lzma2Dec_DecodeToDic(x, x, x, x, x, x)
UNDEF:00001BB4                 extrn _Lzma2Dec_DecodeToDic@24:near
UNDEF:00001BB4                                         ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1C2p
UNDEF:00001BB8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001BB8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001BB8                                         ; CODE XREF: NCompress::NLzma2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+470p
UNDEF:00001BB8                                         ; NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+220p
UNDEF:00001BBC ; __stdcall Lzma2Dec_DecodeToBuf(x, x, x, x, x, x, x)
UNDEF:00001BBC                 extrn _Lzma2Dec_DecodeToBuf@28:near
UNDEF:00001BBC                                         ; CODE XREF: NCompress::NLzma2::CDecoder::Read(void *,uint,uint *)+136p
UNDEF:00001BBC
UNDEF:00001BBC