.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 2035A71E6C24ABE5DB8B7F55A2BC5A15
.rdata:00000000 ; Input CRC32 : 2391838C
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\CrcReg.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG66598        db 'CRC32',0            ; DATA XREF: .rdata:00000018o
.rdata:00000006                 align 4
.rdata:00000008 ; struct CHasherInfo g_HasherInfo
.rdata:00000008 _g_HasherInfo   dd offset ?CreateHasherSpec@@YGPAUIHasher@@XZ
.rdata:00000008                                         ; DATA XREF: CRegHasher_CCrcHasher::CRegHasher_CCrcHasher(void)+Eo
.rdata:00000008                                         ; CreateHasherSpec(void)
.rdata:0000000C                 align 10h
.rdata:00000010                 db    1
.rdata:00000011                 db    0
.rdata:00000012                 db    0
.rdata:00000013                 db    0
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 dd offset $SG66598      ; "CRC32"
.rdata:0000001C                 db    4
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:0000001F _rdata          ends
.rdata:0000001F
.text:00000020 ; ===========================================================================
.text:00000020
.text:00000020 ; Segment type: Pure code
.text:00000020 ; Segment permissions: Read/Execute
.text:00000020 _text           segment para public 'CODE' use32
.text:00000020                 assume cs:_text
.text:00000020                 ;org 20h
.text:00000020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020 ; bool __thiscall CCrcHasher::SetFunctions(CCrcHasher *this, unsigned int)
.text:00000020                 public ?SetFunctions@CCrcHasher@@AAE_NI@Z
.text:00000020 ?SetFunctions@CCrcHasher@@AAE_NI@Z proc near
.text:00000020                                         ; CODE XREF: CCrcHasher::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+65p
.text:00000020                                         ; CCrcHasher::CCrcHasher(void)+4Ep
.text:00000020
.text:00000020 var_4           = dword ptr -4
.text:00000020 arg_0           = dword ptr  8
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 push    ecx
.text:00000024                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000002B                 mov     [ebp+var_4], ecx
.text:0000002E                 mov     eax, [ebp+var_4]
.text:00000031                 mov     ecx, dword ptr ds:_g_CrcUpdate
.text:00000037                 mov     [eax+10h], ecx
.text:0000003A                 cmp     [ebp+arg_0], 1
.text:0000003E                 jnz     short loc_4C
.text:00000040                 mov     edx, [ebp+var_4]
.text:00000043                 mov     dword ptr [edx+10h], offset @CrcUpdateT1@16 ; CrcUpdateT1(x,x,x,x)
.text:0000004A                 jmp     short loc_8F
.text:0000004C ; ---------------------------------------------------------------------------
.text:0000004C
.text:0000004C loc_4C:                                 ; CODE XREF: CCrcHasher::SetFunctions(uint)+1Ej
.text:0000004C                 cmp     [ebp+arg_0], 4
.text:00000050                 jnz     short loc_6F
.text:00000052                 cmp     dword ptr ds:_g_CrcUpdateT4, 0
.text:00000059                 jz      short loc_69
.text:0000005B                 mov     eax, [ebp+var_4]
.text:0000005E                 mov     ecx, dword ptr ds:_g_CrcUpdateT4
.text:00000064                 mov     [eax+10h], ecx
.text:00000067                 jmp     short loc_6D
.text:00000069 ; ---------------------------------------------------------------------------
.text:00000069
.text:00000069 loc_69:                                 ; CODE XREF: CCrcHasher::SetFunctions(uint)+39j
.text:00000069                 xor     al, al
.text:0000006B                 jmp     short loc_91
.text:0000006D ; ---------------------------------------------------------------------------
.text:0000006D
.text:0000006D loc_6D:                                 ; CODE XREF: CCrcHasher::SetFunctions(uint)+47j
.text:0000006D                 jmp     short loc_8F
.text:0000006F ; ---------------------------------------------------------------------------
.text:0000006F
.text:0000006F loc_6F:                                 ; CODE XREF: CCrcHasher::SetFunctions(uint)+30j
.text:0000006F                 cmp     [ebp+arg_0], 8
.text:00000073                 jnz     short loc_8F
.text:00000075                 cmp     dword ptr ds:_g_CrcUpdateT8, 0
.text:0000007C                 jz      short loc_8B
.text:0000007E                 mov     edx, [ebp+var_4]
.text:00000081                 mov     eax, dword ptr ds:_g_CrcUpdateT8
.text:00000086                 mov     [edx+10h], eax
.text:00000089                 jmp     short loc_8F
.text:0000008B ; ---------------------------------------------------------------------------
.text:0000008B
.text:0000008B loc_8B:                                 ; CODE XREF: CCrcHasher::SetFunctions(uint)+5Cj
.text:0000008B                 xor     al, al
.text:0000008D                 jmp     short loc_91
.text:0000008F ; ---------------------------------------------------------------------------
.text:0000008F
.text:0000008F loc_8F:                                 ; CODE XREF: CCrcHasher::SetFunctions(uint)+2Aj
.text:0000008F                                         ; CCrcHasher::SetFunctions(uint):loc_6Dj ...
.text:0000008F                 mov     al, 1
.text:00000091
.text:00000091 loc_91:                                 ; CODE XREF: CCrcHasher::SetFunctions(uint)+4Bj
.text:00000091                                         ; CCrcHasher::SetFunctions(uint)+6Dj
.text:00000091                 mov     esp, ebp
.text:00000093                 pop     ebp
.text:00000094                 retn    4
.text:00000094 ?SetFunctions@CCrcHasher@@AAE_NI@Z endp
.text:00000094
.text:00000094 ; ---------------------------------------------------------------------------
.text:00000097                 align 10h
.text:000000A0
.text:000000A0 ; =============== S U B R O U T I N E =======================================
.text:000000A0
.text:000000A0 ; Attributes: bp-based frame
.text:000000A0
.text:000000A0 ; __int32 __stdcall CCrcHasher::SetCoderProperties(CCrcHasher *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:000000A0                 public ?SetCoderProperties@CCrcHasher@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:000000A0 ?SetCoderProperties@CCrcHasher@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:000000A0                                         ; DATA XREF: .rdata:00000334o
.text:000000A0
.text:000000A0 var_8           = dword ptr -8
.text:000000A0 var_4           = dword ptr -4
.text:000000A0 this            = dword ptr  8
.text:000000A0 arg_4           = dword ptr  0Ch
.text:000000A0 arg_8           = dword ptr  10h
.text:000000A0 arg_C           = dword ptr  14h
.text:000000A0
.text:000000A0                 push    ebp
.text:000000A1                 mov     ebp, esp
.text:000000A3                 sub     esp, 8
.text:000000A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000000AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000B4                 mov     [ebp+var_4], 0
.text:000000BB                 jmp     short loc_C6
.text:000000BD ; ---------------------------------------------------------------------------
.text:000000BD
.text:000000BD loc_BD:                                 ; CODE XREF: CCrcHasher::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_118j
.text:000000BD                 mov     eax, [ebp+var_4]
.text:000000C0                 add     eax, 1
.text:000000C3                 mov     [ebp+var_4], eax
.text:000000C6
.text:000000C6 loc_C6:                                 ; CODE XREF: CCrcHasher::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+1Bj
.text:000000C6                 mov     ecx, [ebp+var_4]
.text:000000C9                 cmp     ecx, [ebp+arg_C]
.text:000000CC                 jnb     short loc_11A
.text:000000CE                 mov     edx, [ebp+var_4]
.text:000000D1                 shl     edx, 4
.text:000000D4                 add     edx, [ebp+arg_8]
.text:000000D7                 mov     [ebp+var_8], edx
.text:000000DA                 mov     eax, [ebp+var_4]
.text:000000DD                 mov     ecx, [ebp+arg_4]
.text:000000E0                 cmp     dword ptr [ecx+eax*4], 0
.text:000000E4                 jnz     short loc_118
.text:000000E6                 mov     edx, [ebp+var_8]
.text:000000E9                 movzx   eax, word ptr [edx]
.text:000000EC                 cmp     eax, 13h
.text:000000EF                 jz      short loc_F8
.text:000000F1                 mov     eax, 80070057h
.text:000000F6                 jmp     short loc_11C
.text:000000F8 ; ---------------------------------------------------------------------------
.text:000000F8
.text:000000F8 loc_F8:                                 ; CODE XREF: CCrcHasher::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+4Fj
.text:000000F8                 mov     ecx, [ebp+var_8]
.text:000000FB                 mov     edx, [ecx+8]
.text:000000FE                 push    edx             ; unsigned int
.text:000000FF                 mov     ecx, [ebp+this]
.text:00000102                 sub     ecx, 4          ; this
.text:00000105                 call    ?SetFunctions@CCrcHasher@@AAE_NI@Z ; CCrcHasher::SetFunctions(uint)
.text:0000010A                 movzx   eax, al
.text:0000010D                 test    eax, eax
.text:0000010F                 jnz     short loc_118
.text:00000111                 mov     eax, 80004001h
.text:00000116                 jmp     short loc_11C
.text:00000118 ; ---------------------------------------------------------------------------
.text:00000118
.text:00000118 loc_118:                                ; CODE XREF: CCrcHasher::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+44j
.text:00000118                                         ; CCrcHasher::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+6Fj
.text:00000118                 jmp     short loc_BD
.text:0000011A ; ---------------------------------------------------------------------------
.text:0000011A
.text:0000011A loc_11A:                                ; CODE XREF: CCrcHasher::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+2Cj
.text:0000011A                 xor     eax, eax
.text:0000011C
.text:0000011C loc_11C:                                ; CODE XREF: CCrcHasher::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+56j
.text:0000011C                                         ; CCrcHasher::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+76j
.text:0000011C                 add     esp, 8
.text:0000011F                 cmp     ebp, esp
.text:00000121                 call    __RTC_CheckEsp
.text:00000126                 mov     esp, ebp
.text:00000128                 pop     ebp
.text:00000129                 retn    10h
.text:00000129 ?SetCoderProperties@CCrcHasher@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:00000129
.text:00000129 ; ---------------------------------------------------------------------------
.text:0000012C                 align 10h
.text:00000130
.text:00000130 ; =============== S U B R O U T I N E =======================================
.text:00000130
.text:00000130 ; Attributes: bp-based frame
.text:00000130
.text:00000130 ; void __stdcall CCrcHasher::Init(CCrcHasher *this)
.text:00000130                 public ?Init@CCrcHasher@@UAGXXZ
.text:00000130 ?Init@CCrcHasher@@UAGXXZ proc near      ; DATA XREF: .rdata:00000348o
.text:00000130
.text:00000130 this            = dword ptr  8
.text:00000130
.text:00000130                 push    ebp
.text:00000131                 mov     ebp, esp
.text:00000133                 mov     eax, [ebp+this]
.text:00000136                 mov     dword ptr [eax+0Ch], 0FFFFFFFFh
.text:0000013D                 pop     ebp
.text:0000013E                 retn    4
.text:0000013E ?Init@CCrcHasher@@UAGXXZ endp
.text:0000013E
.text:0000013E ; ---------------------------------------------------------------------------
.text:00000141                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; void __stdcall CCrcHasher::Update(CCrcHasher *this, const void *, unsigned int)
.text:00000150                 public ?Update@CCrcHasher@@UAGXPBXI@Z
.text:00000150 ?Update@CCrcHasher@@UAGXPBXI@Z proc near ; DATA XREF: .rdata:0000034Co
.text:00000150
.text:00000150 this            = dword ptr  8
.text:00000150 arg_4           = dword ptr  0Ch
.text:00000150 arg_8           = dword ptr  10h
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 push    esi
.text:00000154                 mov     esi, esp
.text:00000156                 push    offset _g_CrcTable
.text:0000015B                 mov     eax, [ebp+arg_8]
.text:0000015E                 push    eax
.text:0000015F                 mov     eax, [ebp+this]
.text:00000162                 mov     edx, [ebp+arg_4]
.text:00000165                 mov     ecx, [ebp+this]
.text:00000168                 mov     ecx, [ecx+0Ch]
.text:0000016B                 mov     eax, [eax+10h]
.text:0000016E                 call    eax
.text:00000170                 cmp     esi, esp
.text:00000172                 call    __RTC_CheckEsp
.text:00000177                 mov     ecx, [ebp+this]
.text:0000017A                 mov     [ecx+0Ch], eax
.text:0000017D                 pop     esi
.text:0000017E                 cmp     ebp, esp
.text:00000180                 call    __RTC_CheckEsp
.text:00000185                 pop     ebp
.text:00000186                 retn    0Ch
.text:00000186 ?Update@CCrcHasher@@UAGXPBXI@Z endp
.text:00000186
.text:00000186 ; ---------------------------------------------------------------------------
.text:00000189                 align 10h
.text:00000190
.text:00000190 ; =============== S U B R O U T I N E =======================================
.text:00000190
.text:00000190 ; Attributes: bp-based frame
.text:00000190
.text:00000190 ; void __stdcall CCrcHasher::Final(CCrcHasher *this, unsigned __int8 *)
.text:00000190                 public ?Final@CCrcHasher@@UAGXPAE@Z
.text:00000190 ?Final@CCrcHasher@@UAGXPAE@Z proc near  ; DATA XREF: .rdata:00000350o
.text:00000190
.text:00000190 var_4           = dword ptr -4
.text:00000190 this            = dword ptr  8
.text:00000190 arg_4           = dword ptr  0Ch
.text:00000190
.text:00000190                 push    ebp
.text:00000191                 mov     ebp, esp
.text:00000193                 push    ecx
.text:00000194                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000019B                 mov     eax, [ebp+this]
.text:0000019E                 mov     ecx, [eax+0Ch]
.text:000001A1                 xor     ecx, 0FFFFFFFFh
.text:000001A4                 mov     [ebp+var_4], ecx
.text:000001A7                 mov     edx, [ebp+arg_4]
.text:000001AA                 mov     eax, [ebp+var_4]
.text:000001AD                 mov     [edx], eax
.text:000001AF                 mov     esp, ebp
.text:000001B1                 pop     ebp
.text:000001B2                 retn    8
.text:000001B2 ?Final@CCrcHasher@@UAGXPAE@Z endp
.text:000001B2
.text:000001B2 ; ---------------------------------------------------------------------------
.text:000001B5                 align 10h
.text:000001C0
.text:000001C0 ; =============== S U B R O U T I N E =======================================
.text:000001C0
.text:000001C0 ; Attributes: bp-based frame
.text:000001C0
.text:000001C0 ; unsigned int __stdcall CCrcHasher::GetDigestSize(CCrcHasher *this)
.text:000001C0                 public ?GetDigestSize@CCrcHasher@@UAGIXZ
.text:000001C0 ?GetDigestSize@CCrcHasher@@UAGIXZ proc near ; DATA XREF: .rdata:00000354o
.text:000001C0
.text:000001C0 this            = dword ptr  8
.text:000001C0
.text:000001C0                 push    ebp
.text:000001C1                 mov     ebp, esp
.text:000001C3                 mov     eax, 4
.text:000001C8                 pop     ebp
.text:000001C9                 retn    4
.text:000001C9 ?GetDigestSize@CCrcHasher@@UAGIXZ endp
.text:000001C9
.text:000001C9 ; ---------------------------------------------------------------------------
.text:000001CC                 align 10h
.text:000001D0
.text:000001D0 ; =============== S U B R O U T I N E =======================================
.text:000001D0
.text:000001D0 ; Attributes: bp-based frame
.text:000001D0
.text:000001D0 ; struct IHasher * __stdcall CreateHasherSpec(void)
.text:000001D0 ?CreateHasherSpec@@YGPAUIHasher@@XZ proc near
.text:000001D0                                         ; DATA XREF: .rdata:_g_HasherInfoo
.text:000001D0
.text:000001D0 var_18          = dword ptr -18h
.text:000001D0 var_14          = dword ptr -14h
.text:000001D0 var_10          = dword ptr -10h
.text:000001D0 var_C           = dword ptr -0Ch
.text:000001D0 var_4           = dword ptr -4
.text:000001D0
.text:000001D0                 push    ebp
.text:000001D1                 mov     ebp, esp
.text:000001D3                 push    0FFFFFFFFh
.text:000001D5                 push    offset __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ
.text:000001DA                 mov     eax, large fs:0
.text:000001E0                 push    eax
.text:000001E1                 sub     esp, 0Ch
.text:000001E4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000001EB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000001F2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000001F9                 mov     eax, dword ptr ds:___security_cookie
.text:000001FE                 xor     eax, ebp
.text:00000200                 push    eax
.text:00000201                 lea     eax, [ebp+var_C]
.text:00000204                 mov     large fs:0, eax
.text:0000020A                 push    94h ; 'ö'       ; unsigned int
.text:0000020F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000214                 add     esp, 4
.text:00000217                 mov     [ebp+var_14], eax
.text:0000021A                 mov     [ebp+var_4], 0
.text:00000221                 cmp     [ebp+var_14], 0
.text:00000225                 jz      short loc_234
.text:00000227                 mov     ecx, [ebp+var_14]
.text:0000022A                 call    ??0CCrcHasher@@QAE@XZ ; CCrcHasher::CCrcHasher(void)
.text:0000022F                 mov     [ebp+var_18], eax
.text:00000232                 jmp     short loc_23B
.text:00000234 ; ---------------------------------------------------------------------------
.text:00000234
.text:00000234 loc_234:                                ; CODE XREF: CreateHasherSpec(void)+55j
.text:00000234                 mov     [ebp+var_18], 0
.text:0000023B
.text:0000023B loc_23B:                                ; CODE XREF: CreateHasherSpec(void)+62j
.text:0000023B                 mov     eax, [ebp+var_18]
.text:0000023E                 mov     [ebp+var_10], eax
.text:00000241                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000248                 mov     eax, [ebp+var_10]
.text:0000024B                 mov     ecx, [ebp+var_C]
.text:0000024E                 mov     large fs:0, ecx
.text:00000255                 pop     ecx
.text:00000256                 add     esp, 18h
.text:00000259                 cmp     ebp, esp
.text:0000025B                 call    __RTC_CheckEsp
.text:00000260                 mov     esp, ebp
.text:00000262                 pop     ebp
.text:00000263                 retn
.text:00000263 ?CreateHasherSpec@@YGPAUIHasher@@XZ endp
.text:00000263
.text:00000263 _text           ends
.text:00000263
.rtc$TMZ:00000264 ; ===========================================================================
.rtc$TMZ:00000264
.rtc$TMZ:00000264 ; Segment type: Pure data
.rtc$TMZ:00000264 ; Segment permissions: Read
.rtc$TMZ:00000264 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000264                 assume cs:_rtc$TMZ
.rtc$TMZ:00000264                 ;org 264h
.rtc$TMZ:00000264 ; COMDAT (pick any)
.rtc$TMZ:00000264 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000264 _rtc$TMZ        ends
.rtc$TMZ:00000264
.rtc$IMZ:00000268 ; ===========================================================================
.rtc$IMZ:00000268
.rtc$IMZ:00000268 ; Segment type: Pure data
.rtc$IMZ:00000268 ; Segment permissions: Read
.rtc$IMZ:00000268 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000268                 assume cs:_rtc$IMZ
.rtc$IMZ:00000268                 ;org 268h
.rtc$IMZ:00000268 ; COMDAT (pick any)
.rtc$IMZ:00000268 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000268 _rtc$IMZ        ends
.rtc$IMZ:00000268
.text$x:0000026C ; ===========================================================================
.text$x:0000026C
.text$x:0000026C ; Segment type: Pure code
.text$x:0000026C ; Segment permissions: Read/Execute
.text$x:0000026C _text$x         segment para public 'CODE' use32
.text$x:0000026C                 assume cs:_text$x
.text$x:0000026C                 ;org 26Ch
.text$x:0000026C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000026C
.text$x:0000026C ; =============== S U B R O U T I N E =======================================
.text$x:0000026C
.text$x:0000026C
.text$x:0000026C __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0 proc near
.text$x:0000026C                                         ; DATA XREF: .xdata$x:00000298o
.text$x:0000026C                 mov     eax, [ebp-14h]
.text$x:0000026F                 push    eax             ; void *
.text$x:00000270                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000275                 pop     ecx
.text$x:00000276                 retn
.text$x:00000276 __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0 endp
.text$x:00000276
.text$x:00000277
.text$x:00000277 ; =============== S U B R O U T I N E =======================================
.text$x:00000277
.text$x:00000277
.text$x:00000277 __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ proc near
.text$x:00000277                                         ; DATA XREF: CreateHasherSpec(void)+5o
.text$x:00000277
.text$x:00000277 arg_4           = dword ptr  8
.text$x:00000277
.text$x:00000277                 mov     edx, [esp+arg_4]
.text$x:0000027B                 lea     eax, [edx+0Ch]
.text$x:0000027E                 mov     ecx, [edx-10h]
.text$x:00000281                 xor     ecx, eax
.text$x:00000283                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000288                 mov     eax, offset __ehfuncinfo$?CreateHasherSpec@@YGPAUIHasher@@XZ
.text$x:0000028D                 jmp     ___CxxFrameHandler3
.text$x:0000028D __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ endp
.text$x:0000028D
.text$x:0000028D ; ---------------------------------------------------------------------------
.text$x:00000292                 align 4
.text$x:00000292 _text$x         ends
.text$x:00000292
.xdata$x:00000294 ; ===========================================================================
.xdata$x:00000294
.xdata$x:00000294 ; Segment type: Pure data
.xdata$x:00000294 ; Segment permissions: Read
.xdata$x:00000294 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000294                 assume cs:_xdata$x
.xdata$x:00000294                 ;org 294h
.xdata$x:00000294 __unwindtable$?CreateHasherSpec@@YGPAUIHasher@@XZ db 0FFh
.xdata$x:00000294                                         ; DATA XREF: .xdata$x:000002A4o
.xdata$x:00000295                 db 0FFh
.xdata$x:00000296                 db 0FFh
.xdata$x:00000297                 db 0FFh
.xdata$x:00000298                 dd offset __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0
.xdata$x:0000029C __ehfuncinfo$?CreateHasherSpec@@YGPAUIHasher@@XZ db  22h ; "
.xdata$x:0000029C                                         ; DATA XREF: __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ+11o
.xdata$x:0000029D                 db    5
.xdata$x:0000029E                 db  93h ; ô
.xdata$x:0000029F                 db  19h
.xdata$x:000002A0                 db    1
.xdata$x:000002A1                 db    0
.xdata$x:000002A2                 db    0
.xdata$x:000002A3                 db    0
.xdata$x:000002A4                 dd offset __unwindtable$?CreateHasherSpec@@YGPAUIHasher@@XZ
.xdata$x:000002A8                 db    0
.xdata$x:000002A9                 db    0
.xdata$x:000002AA                 db    0
.xdata$x:000002AB                 db    0
.xdata$x:000002AC                 db    0
.xdata$x:000002AD                 db    0
.xdata$x:000002AE                 db    0
.xdata$x:000002AF                 db    0
.xdata$x:000002B0                 db    0
.xdata$x:000002B1                 db    0
.xdata$x:000002B2                 db    0
.xdata$x:000002B3                 db    0
.xdata$x:000002B4                 db    0
.xdata$x:000002B5                 db    0
.xdata$x:000002B6                 db    0
.xdata$x:000002B7                 db    0
.xdata$x:000002B8                 db    0
.xdata$x:000002B9                 db    0
.xdata$x:000002BA                 db    0
.xdata$x:000002BB                 db    0
.xdata$x:000002BC                 db    1
.xdata$x:000002BD                 db    0
.xdata$x:000002BE                 db    0
.xdata$x:000002BF                 db    0
.xdata$x:000002BF _xdata$x        ends
.xdata$x:000002BF
.text:000002C0 ; ===========================================================================
.text:000002C0
.text:000002C0 ; Segment type: Pure code
.text:000002C0 ; Segment permissions: Read/Execute
.text:000002C0 _text           segment para public 'CODE' use32
.text:000002C0                 assume cs:_text
.text:000002C0                 ;org 2C0h
.text:000002C0 ; COMDAT (pick any)
.text:000002C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000002C0
.text:000002C0 ; =============== S U B R O U T I N E =======================================
.text:000002C0
.text:000002C0 ; Attributes: bp-based frame
.text:000002C0
.text:000002C0 ; public: __thiscall CCrcHasher::CCrcHasher(void)
.text:000002C0                 public ??0CCrcHasher@@QAE@XZ
.text:000002C0 ??0CCrcHasher@@QAE@XZ proc near         ; CODE XREF: CreateHasherSpec(void)+5Ap
.text:000002C0
.text:000002C0 var_4           = dword ptr -4
.text:000002C0
.text:000002C0                 push    ebp
.text:000002C1                 mov     ebp, esp
.text:000002C3                 push    ecx
.text:000002C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002CB                 mov     [ebp+var_4], ecx
.text:000002CE                 mov     ecx, [ebp+var_4] ; this
.text:000002D1                 call    ??0IHasher@@QAE@XZ ; IHasher::IHasher(void)
.text:000002D6                 mov     ecx, [ebp+var_4]
.text:000002D9                 add     ecx, 4          ; this
.text:000002DC                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:000002E1                 mov     ecx, [ebp+var_4]
.text:000002E4                 add     ecx, 8          ; this
.text:000002E7                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000002EC                 mov     eax, [ebp+var_4]
.text:000002EF                 mov     dword ptr [eax], offset ??_7CCrcHasher@@6BIHasher@@@ ; const CCrcHasher::`vftable'{for `IHasher'}
.text:000002F5                 mov     ecx, [ebp+var_4]
.text:000002F8                 mov     dword ptr [ecx+4], offset ??_7CCrcHasher@@6BICompressSetCoderProperties@@@ ; const CCrcHasher::`vftable'{for `ICompressSetCoderProperties'}
.text:000002FF                 mov     edx, [ebp+var_4]
.text:00000302                 mov     dword ptr [edx+0Ch], 0FFFFFFFFh
.text:00000309                 push    0               ; unsigned int
.text:0000030B                 mov     ecx, [ebp+var_4] ; this
.text:0000030E                 call    ?SetFunctions@CCrcHasher@@AAE_NI@Z ; CCrcHasher::SetFunctions(uint)
.text:00000313                 mov     eax, [ebp+var_4]
.text:00000316                 add     esp, 4
.text:00000319                 cmp     ebp, esp
.text:0000031B                 call    __RTC_CheckEsp
.text:00000320                 mov     esp, ebp
.text:00000322                 pop     ebp
.text:00000323                 retn
.text:00000323 ??0CCrcHasher@@QAE@XZ endp
.text:00000323
.text:00000323 _text           ends
.text:00000323
.rdata:00000324 ; ===========================================================================
.rdata:00000324
.rdata:00000324 ; Segment type: Pure data
.rdata:00000324 ; Segment permissions: Read
.rdata:00000324 _rdata          segment dword public 'DATA' use32
.rdata:00000324                 assume cs:_rdata
.rdata:00000324                 ;org 324h
.rdata:00000324 ; COMDAT (pick largest)
.rdata:00000324                 dd offset ??_R4CCrcHasher@@6BICompressSetCoderProperties@@@ ; const CCrcHasher::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00000328                 public ??_7CCrcHasher@@6BICompressSetCoderProperties@@@
.rdata:00000328 ; const CCrcHasher::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00000328 ??_7CCrcHasher@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CCrcHasher@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000328                                         ; DATA XREF: CCrcHasher::CCrcHasher(void)+38o
.rdata:00000328                                         ; [thunk]:CCrcHasher::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000032C                 dd offset ?AddRef@CCrcHasher@@W3AGKXZ ; [thunk]:CCrcHasher::AddRef`adjustor{4}' (void)
.rdata:00000330                 dd offset ?Release@CCrcHasher@@W3AGKXZ ; [thunk]:CCrcHasher::Release`adjustor{4}' (void)
.rdata:00000334                 dd offset ?SetCoderProperties@CCrcHasher@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; CCrcHasher::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00000334 _rdata          ends
.rdata:00000334
.rdata:00000338 ; ===========================================================================
.rdata:00000338
.rdata:00000338 ; Segment type: Pure data
.rdata:00000338 ; Segment permissions: Read
.rdata:00000338 _rdata          segment dword public 'DATA' use32
.rdata:00000338                 assume cs:_rdata
.rdata:00000338                 ;org 338h
.rdata:00000338 ; COMDAT (pick largest)
.rdata:00000338                 dd offset ??_R4CCrcHasher@@6BIHasher@@@ ; const CCrcHasher::`RTTI Complete Object Locator'{for `IHasher'}
.rdata:0000033C                 public ??_7CCrcHasher@@6BIHasher@@@
.rdata:0000033C ; const CCrcHasher::`vftable'{for `IHasher'}
.rdata:0000033C ??_7CCrcHasher@@6BIHasher@@@ dd offset ?QueryInterface@CCrcHasher@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000033C                                         ; DATA XREF: CCrcHasher::CCrcHasher(void)+2Fo
.rdata:0000033C                                         ; CCrcHasher::QueryInterface(_GUID const &,void * *)
.rdata:00000340                 dd offset ?AddRef@CCrcHasher@@UAGKXZ ; CCrcHasher::AddRef(void)
.rdata:00000344                 dd offset ?Release@CCrcHasher@@UAGKXZ ; CCrcHasher::Release(void)
.rdata:00000348                 dd offset ?Init@CCrcHasher@@UAGXXZ ; CCrcHasher::Init(void)
.rdata:0000034C                 dd offset ?Update@CCrcHasher@@UAGXPBXI@Z ; CCrcHasher::Update(void const *,uint)
.rdata:00000350                 dd offset ?Final@CCrcHasher@@UAGXPAE@Z ; CCrcHasher::Final(uchar *)
.rdata:00000354                 dd offset ?GetDigestSize@CCrcHasher@@UAGIXZ ; CCrcHasher::GetDigestSize(void)
.rdata:00000354 _rdata          ends
.rdata:00000354
.rdata$r:00000358 ; ===========================================================================
.rdata$r:00000358
.rdata$r:00000358 ; Segment type: Pure data
.rdata$r:00000358 ; Segment permissions: Read
.rdata$r:00000358 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000358                 assume cs:_rdata$r
.rdata$r:00000358                 ;org 358h
.rdata$r:00000358 ; COMDAT (pick any)
.rdata$r:00000358                 public ??_R4CCrcHasher@@6BIHasher@@@
.rdata$r:00000358 ; const CCrcHasher::`RTTI Complete Object Locator'{for `IHasher'}
.rdata$r:00000358 ??_R4CCrcHasher@@6BIHasher@@@ db    0   ; DATA XREF: .rdata:00000338o
.rdata$r:00000359                 db    0
.rdata$r:0000035A                 db    0
.rdata$r:0000035B                 db    0
.rdata$r:0000035C                 db    0
.rdata$r:0000035D                 db    0
.rdata$r:0000035E                 db    0
.rdata$r:0000035F                 db    0
.rdata$r:00000360                 db    0
.rdata$r:00000361                 db    0
.rdata$r:00000362                 db    0
.rdata$r:00000363                 db    0
.rdata$r:00000364                 dd offset ??_R0?AVCCrcHasher@@@8 ; CCrcHasher `RTTI Type Descriptor'
.rdata$r:00000368                 dd offset ??_R3CCrcHasher@@8 ; CCrcHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000368 _rdata$r        ends
.rdata$r:00000368
.data:0000036C ; ===========================================================================
.data:0000036C
.data:0000036C ; Segment type: Pure data
.data:0000036C ; Segment permissions: Read/Write
.data:0000036C _data           segment dword public 'DATA' use32
.data:0000036C                 assume cs:_data
.data:0000036C                 ;org 36Ch
.data:0000036C ; COMDAT (pick any)
.data:0000036C                 public ??_R0?AVCCrcHasher@@@8
.data:0000036C ; class CCrcHasher `RTTI Type Descriptor'
.data:0000036C ??_R0?AVCCrcHasher@@@8 dd offset ??_7type_info@@6B@
.data:0000036C                                         ; DATA XREF: .rdata$r:00000364o
.data:0000036C                                         ; .rdata$r:CCrcHasher::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000036C                                         ; const type_info::`vftable'
.data:00000370                 db    0
.data:00000371                 db    0
.data:00000372                 db    0
.data:00000373                 db    0
.data:00000374                 db  2Eh ; .
.data:00000375                 db  3Fh ; ?
.data:00000376                 db  41h ; A
.data:00000377                 db  56h ; V
.data:00000378                 db  43h ; C
.data:00000379                 db  43h ; C
.data:0000037A                 db  72h ; r
.data:0000037B                 db  63h ; c
.data:0000037C                 db  48h ; H
.data:0000037D                 db  61h ; a
.data:0000037E                 db  73h ; s
.data:0000037F                 db  68h ; h
.data:00000380                 db  65h ; e
.data:00000381                 db  72h ; r
.data:00000382                 db  40h ; @
.data:00000383                 db  40h ; @
.data:00000384                 db    0
.data:00000385                 align 4
.data:00000385 _data           ends
.data:00000385
.rdata$r:00000388 ; ===========================================================================
.rdata$r:00000388
.rdata$r:00000388 ; Segment type: Pure data
.rdata$r:00000388 ; Segment permissions: Read
.rdata$r:00000388 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000388                 assume cs:_rdata$r
.rdata$r:00000388                 ;org 388h
.rdata$r:00000388 ; COMDAT (pick any)
.rdata$r:00000388                 public ??_R3CCrcHasher@@8
.rdata$r:00000388 ; CCrcHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000388 ??_R3CCrcHasher@@8 db    0              ; DATA XREF: .rdata$r:00000368o
.rdata$r:00000388                                         ; .rdata$r:000003CCo ...
.rdata$r:00000389                 db    0
.rdata$r:0000038A                 db    0
.rdata$r:0000038B                 db    0
.rdata$r:0000038C                 db    5
.rdata$r:0000038D                 db    0
.rdata$r:0000038E                 db    0
.rdata$r:0000038F                 db    0
.rdata$r:00000390                 db    6
.rdata$r:00000391                 db    0
.rdata$r:00000392                 db    0
.rdata$r:00000393                 db    0
.rdata$r:00000394                 dd offset ??_R2CCrcHasher@@8 ; CCrcHasher::`RTTI Base Class Array'
.rdata$r:00000394 _rdata$r        ends
.rdata$r:00000394
.rdata$r:00000398 ; ===========================================================================
.rdata$r:00000398
.rdata$r:00000398 ; Segment type: Pure data
.rdata$r:00000398 ; Segment permissions: Read
.rdata$r:00000398 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000398                 assume cs:_rdata$r
.rdata$r:00000398                 ;org 398h
.rdata$r:00000398 ; COMDAT (pick any)
.rdata$r:00000398                 public ??_R2CCrcHasher@@8
.rdata$r:00000398 ; CCrcHasher::`RTTI Base Class Array'
.rdata$r:00000398 ??_R2CCrcHasher@@8 dd offset ??_R1A@?0A@EA@CCrcHasher@@8
.rdata$r:00000398                                         ; DATA XREF: .rdata$r:00000394o
.rdata$r:00000398                                         ; CCrcHasher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000039C                 dd offset ??_R1A@?0A@EA@IHasher@@8 ; IHasher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003A0                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000003A4                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000003A8                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000003AC                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000003B0                 db    0
.rdata$r:000003B1                 align 4
.rdata$r:000003B1 _rdata$r        ends
.rdata$r:000003B1
.rdata$r:000003B4 ; ===========================================================================
.rdata$r:000003B4
.rdata$r:000003B4 ; Segment type: Pure data
.rdata$r:000003B4 ; Segment permissions: Read
.rdata$r:000003B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003B4                 assume cs:_rdata$r
.rdata$r:000003B4                 ;org 3B4h
.rdata$r:000003B4 ; COMDAT (pick any)
.rdata$r:000003B4                 public ??_R1A@?0A@EA@CCrcHasher@@8
.rdata$r:000003B4 ; CCrcHasher::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000003B4 ??_R1A@?0A@EA@CCrcHasher@@8 dd offset ??_R0?AVCCrcHasher@@@8
.rdata$r:000003B4                                         ; DATA XREF: .rdata$r:CCrcHasher::`RTTI Base Class Array'o
.rdata$r:000003B4                                         ; CCrcHasher `RTTI Type Descriptor'
.rdata$r:000003B8                 db    5
.rdata$r:000003B9                 db    0
.rdata$r:000003BA                 db    0
.rdata$r:000003BB                 db    0
.rdata$r:000003BC                 db    0
.rdata$r:000003BD                 db    0
.rdata$r:000003BE                 db    0
.rdata$r:000003BF                 db    0
.rdata$r:000003C0                 db 0FFh
.rdata$r:000003C1                 db 0FFh
.rdata$r:000003C2                 db 0FFh
.rdata$r:000003C3                 db 0FFh
.rdata$r:000003C4                 db    0
.rdata$r:000003C5                 db    0
.rdata$r:000003C6                 db    0
.rdata$r:000003C7                 db    0
.rdata$r:000003C8                 db  40h ; @
.rdata$r:000003C9                 db    0
.rdata$r:000003CA                 db    0
.rdata$r:000003CB                 db    0
.rdata$r:000003CC                 dd offset ??_R3CCrcHasher@@8 ; CCrcHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003CC _rdata$r        ends
.rdata$r:000003CC
.rdata$r:000003D0 ; ===========================================================================
.rdata$r:000003D0
.rdata$r:000003D0 ; Segment type: Pure data
.rdata$r:000003D0 ; Segment permissions: Read
.rdata$r:000003D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003D0                 assume cs:_rdata$r
.rdata$r:000003D0                 ;org 3D0h
.rdata$r:000003D0 ; COMDAT (pick any)
.rdata$r:000003D0                 public ??_R1A@?0A@EA@IHasher@@8
.rdata$r:000003D0 ; IHasher::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000003D0 ??_R1A@?0A@EA@IHasher@@8 dd offset ??_R0?AUIHasher@@@8
.rdata$r:000003D0                                         ; DATA XREF: .rdata$r:0000039Co
.rdata$r:000003D0                                         ; .rdata$r:IHasher::`RTTI Base Class Array'o
.rdata$r:000003D0                                         ; IHasher `RTTI Type Descriptor'
.rdata$r:000003D4                 db    1
.rdata$r:000003D5                 db    0
.rdata$r:000003D6                 db    0
.rdata$r:000003D7                 db    0
.rdata$r:000003D8                 db    0
.rdata$r:000003D9                 db    0
.rdata$r:000003DA                 db    0
.rdata$r:000003DB                 db    0
.rdata$r:000003DC                 db 0FFh
.rdata$r:000003DD                 db 0FFh
.rdata$r:000003DE                 db 0FFh
.rdata$r:000003DF                 db 0FFh
.rdata$r:000003E0                 db    0
.rdata$r:000003E1                 db    0
.rdata$r:000003E2                 db    0
.rdata$r:000003E3                 db    0
.rdata$r:000003E4                 db  40h ; @
.rdata$r:000003E5                 db    0
.rdata$r:000003E6                 db    0
.rdata$r:000003E7                 db    0
.rdata$r:000003E8                 dd offset ??_R3IHasher@@8 ; IHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003E8 _rdata$r        ends
.rdata$r:000003E8
.data:000003EC ; ===========================================================================
.data:000003EC
.data:000003EC ; Segment type: Pure data
.data:000003EC ; Segment permissions: Read/Write
.data:000003EC _data           segment dword public 'DATA' use32
.data:000003EC                 assume cs:_data
.data:000003EC                 ;org 3ECh
.data:000003EC ; COMDAT (pick any)
.data:000003EC                 public ??_R0?AUIHasher@@@8
.data:000003EC ; struct IHasher `RTTI Type Descriptor'
.data:000003EC ??_R0?AUIHasher@@@8 dd offset ??_7type_info@@6B@
.data:000003EC                                         ; DATA XREF: .rdata$r:IHasher::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000003EC                                         ; .rdata$r:00000758o
.data:000003EC                                         ; const type_info::`vftable'
.data:000003F0                 db    0
.data:000003F1                 db    0
.data:000003F2                 db    0
.data:000003F3                 db    0
.data:000003F4                 db  2Eh ; .
.data:000003F5                 db  3Fh ; ?
.data:000003F6                 db  41h ; A
.data:000003F7                 db  55h ; U
.data:000003F8                 db  49h ; I
.data:000003F9                 db  48h ; H
.data:000003FA                 db  61h ; a
.data:000003FB                 db  73h ; s
.data:000003FC                 db  68h ; h
.data:000003FD                 db  65h ; e
.data:000003FE                 db  72h ; r
.data:000003FF                 db  40h ; @
.data:00000400                 db  40h ; @
.data:00000401                 db    0
.data:00000402                 align 4
.data:00000402 _data           ends
.data:00000402
.rdata$r:00000404 ; ===========================================================================
.rdata$r:00000404
.rdata$r:00000404 ; Segment type: Pure data
.rdata$r:00000404 ; Segment permissions: Read
.rdata$r:00000404 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000404                 assume cs:_rdata$r
.rdata$r:00000404                 ;org 404h
.rdata$r:00000404 ; COMDAT (pick any)
.rdata$r:00000404                 public ??_R3IHasher@@8
.rdata$r:00000404 ; IHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000404 ??_R3IHasher@@8 db    0                 ; DATA XREF: .rdata$r:000003E8o
.rdata$r:00000404                                         ; .rdata$r:0000075Co
.rdata$r:00000405                 db    0
.rdata$r:00000406                 db    0
.rdata$r:00000407                 db    0
.rdata$r:00000408                 db    0
.rdata$r:00000409                 db    0
.rdata$r:0000040A                 db    0
.rdata$r:0000040B                 db    0
.rdata$r:0000040C                 db    2
.rdata$r:0000040D                 db    0
.rdata$r:0000040E                 db    0
.rdata$r:0000040F                 db    0
.rdata$r:00000410                 dd offset ??_R2IHasher@@8 ; IHasher::`RTTI Base Class Array'
.rdata$r:00000410 _rdata$r        ends
.rdata$r:00000410
.rdata$r:00000414 ; ===========================================================================
.rdata$r:00000414
.rdata$r:00000414 ; Segment type: Pure data
.rdata$r:00000414 ; Segment permissions: Read
.rdata$r:00000414 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000414                 assume cs:_rdata$r
.rdata$r:00000414                 ;org 414h
.rdata$r:00000414 ; COMDAT (pick any)
.rdata$r:00000414                 public ??_R2IHasher@@8
.rdata$r:00000414 ; IHasher::`RTTI Base Class Array'
.rdata$r:00000414 ??_R2IHasher@@8 dd offset ??_R1A@?0A@EA@IHasher@@8
.rdata$r:00000414                                         ; DATA XREF: .rdata$r:00000410o
.rdata$r:00000414                                         ; IHasher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000418                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000041C                 db    0
.rdata$r:0000041D                 align 10h
.rdata$r:0000041D _rdata$r        ends
.rdata$r:0000041D
.rdata$r:00000420 ; ===========================================================================
.rdata$r:00000420
.rdata$r:00000420 ; Segment type: Pure data
.rdata$r:00000420 ; Segment permissions: Read
.rdata$r:00000420 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000420                 assume cs:_rdata$r
.rdata$r:00000420                 ;org 420h
.rdata$r:00000420 ; COMDAT (pick any)
.rdata$r:00000420                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000420 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000420 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000420                                         ; DATA XREF: .rdata$r:00000418o
.rdata$r:00000420                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00000420                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000424                 db    0
.rdata$r:00000425                 db    0
.rdata$r:00000426                 db    0
.rdata$r:00000427                 db    0
.rdata$r:00000428                 db    0
.rdata$r:00000429                 db    0
.rdata$r:0000042A                 db    0
.rdata$r:0000042B                 db    0
.rdata$r:0000042C                 db 0FFh
.rdata$r:0000042D                 db 0FFh
.rdata$r:0000042E                 db 0FFh
.rdata$r:0000042F                 db 0FFh
.rdata$r:00000430                 db    0
.rdata$r:00000431                 db    0
.rdata$r:00000432                 db    0
.rdata$r:00000433                 db    0
.rdata$r:00000434                 db  40h ; @
.rdata$r:00000435                 db    0
.rdata$r:00000436                 db    0
.rdata$r:00000437                 db    0
.rdata$r:00000438                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000438 _rdata$r        ends
.rdata$r:00000438
.data:0000043C ; ===========================================================================
.data:0000043C
.data:0000043C ; Segment type: Pure data
.data:0000043C ; Segment permissions: Read/Write
.data:0000043C _data           segment dword public 'DATA' use32
.data:0000043C                 assume cs:_data
.data:0000043C                 ;org 43Ch
.data:0000043C ; COMDAT (pick any)
.data:0000043C                 public ??_R0?AUIUnknown@@@8
.data:0000043C ; struct IUnknown `RTTI Type Descriptor'
.data:0000043C ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:0000043C                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000043C                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:0000043C                                         ; const type_info::`vftable'
.data:00000440                 db    0
.data:00000441                 db    0
.data:00000442                 db    0
.data:00000443                 db    0
.data:00000444                 db  2Eh ; .
.data:00000445                 db  3Fh ; ?
.data:00000446                 db  41h ; A
.data:00000447                 db  55h ; U
.data:00000448                 db  49h ; I
.data:00000449                 db  55h ; U
.data:0000044A                 db  6Eh ; n
.data:0000044B                 db  6Bh ; k
.data:0000044C                 db  6Eh ; n
.data:0000044D                 db  6Fh ; o
.data:0000044E                 db  77h ; w
.data:0000044F                 db  6Eh ; n
.data:00000450                 db  40h ; @
.data:00000451                 db  40h ; @
.data:00000452                 db    0
.data:00000453                 align 4
.data:00000453 _data           ends
.data:00000453
.rdata$r:00000454 ; ===========================================================================
.rdata$r:00000454
.rdata$r:00000454 ; Segment type: Pure data
.rdata$r:00000454 ; Segment permissions: Read
.rdata$r:00000454 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000454                 assume cs:_rdata$r
.rdata$r:00000454                 ;org 454h
.rdata$r:00000454 ; COMDAT (pick any)
.rdata$r:00000454                 public ??_R3IUnknown@@8
.rdata$r:00000454 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000454 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000438o
.rdata$r:00000454                                         ; .rdata$r:00000484o ...
.rdata$r:00000455                 db    0
.rdata$r:00000456                 db    0
.rdata$r:00000457                 db    0
.rdata$r:00000458                 db    0
.rdata$r:00000459                 db    0
.rdata$r:0000045A                 db    0
.rdata$r:0000045B                 db    0
.rdata$r:0000045C                 db    1
.rdata$r:0000045D                 db    0
.rdata$r:0000045E                 db    0
.rdata$r:0000045F                 db    0
.rdata$r:00000460                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000460 _rdata$r        ends
.rdata$r:00000460
.rdata$r:00000464 ; ===========================================================================
.rdata$r:00000464
.rdata$r:00000464 ; Segment type: Pure data
.rdata$r:00000464 ; Segment permissions: Read
.rdata$r:00000464 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000464                 assume cs:_rdata$r
.rdata$r:00000464                 ;org 464h
.rdata$r:00000464 ; COMDAT (pick any)
.rdata$r:00000464                 public ??_R2IUnknown@@8
.rdata$r:00000464 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000464 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000464                                         ; DATA XREF: .rdata$r:00000460o
.rdata$r:00000464                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000468                 db    0
.rdata$r:00000469                 align 4
.rdata$r:00000469 _rdata$r        ends
.rdata$r:00000469
.rdata$r:0000046C ; ===========================================================================
.rdata$r:0000046C
.rdata$r:0000046C ; Segment type: Pure data
.rdata$r:0000046C ; Segment permissions: Read
.rdata$r:0000046C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000046C                 assume cs:_rdata$r
.rdata$r:0000046C                 ;org 46Ch
.rdata$r:0000046C ; COMDAT (pick any)
.rdata$r:0000046C                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:0000046C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:0000046C ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000046C                                         ; DATA XREF: .rdata$r:000003A0o
.rdata$r:0000046C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000470                 db    0
.rdata$r:00000471                 db    0
.rdata$r:00000472                 db    0
.rdata$r:00000473                 db    0
.rdata$r:00000474                 db    0
.rdata$r:00000475                 db    0
.rdata$r:00000476                 db    0
.rdata$r:00000477                 db    0
.rdata$r:00000478                 db 0FFh
.rdata$r:00000479                 db 0FFh
.rdata$r:0000047A                 db 0FFh
.rdata$r:0000047B                 db 0FFh
.rdata$r:0000047C                 db    0
.rdata$r:0000047D                 db    0
.rdata$r:0000047E                 db    0
.rdata$r:0000047F                 db    0
.rdata$r:00000480                 db  42h ; B
.rdata$r:00000481                 db    0
.rdata$r:00000482                 db    0
.rdata$r:00000483                 db    0
.rdata$r:00000484                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000484 _rdata$r        ends
.rdata$r:00000484
.rdata$r:00000488 ; ===========================================================================
.rdata$r:00000488
.rdata$r:00000488 ; Segment type: Pure data
.rdata$r:00000488 ; Segment permissions: Read
.rdata$r:00000488 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000488                 assume cs:_rdata$r
.rdata$r:00000488                 ;org 488h
.rdata$r:00000488 ; COMDAT (pick any)
.rdata$r:00000488                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000488 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000488 ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00000488                                         ; DATA XREF: .rdata$r:000003A4o
.rdata$r:00000488                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:0000048C                 db    1
.rdata$r:0000048D                 db    0
.rdata$r:0000048E                 db    0
.rdata$r:0000048F                 db    0
.rdata$r:00000490                 db    4
.rdata$r:00000491                 db    0
.rdata$r:00000492                 db    0
.rdata$r:00000493                 db    0
.rdata$r:00000494                 db 0FFh
.rdata$r:00000495                 db 0FFh
.rdata$r:00000496                 db 0FFh
.rdata$r:00000497                 db 0FFh
.rdata$r:00000498                 db    0
.rdata$r:00000499                 db    0
.rdata$r:0000049A                 db    0
.rdata$r:0000049B                 db    0
.rdata$r:0000049C                 db  40h ; @
.rdata$r:0000049D                 db    0
.rdata$r:0000049E                 db    0
.rdata$r:0000049F                 db    0
.rdata$r:000004A0                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004A0 _rdata$r        ends
.rdata$r:000004A0
.data:000004A4 ; ===========================================================================
.data:000004A4
.data:000004A4 ; Segment type: Pure data
.data:000004A4 ; Segment permissions: Read/Write
.data:000004A4 _data           segment dword public 'DATA' use32
.data:000004A4                 assume cs:_data
.data:000004A4                 ;org 4A4h
.data:000004A4 ; COMDAT (pick any)
.data:000004A4                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:000004A4 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:000004A4 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:000004A4                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000004A4                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000004A4                                         ; const type_info::`vftable'
.data:000004A8                 db    0
.data:000004A9                 db    0
.data:000004AA                 db    0
.data:000004AB                 db    0
.data:000004AC                 db  2Eh ; .
.data:000004AD                 db  3Fh ; ?
.data:000004AE                 db  41h ; A
.data:000004AF                 db  55h ; U
.data:000004B0                 db  49h ; I
.data:000004B1                 db  43h ; C
.data:000004B2                 db  6Fh ; o
.data:000004B3                 db  6Dh ; m
.data:000004B4                 db  70h ; p
.data:000004B5                 db  72h ; r
.data:000004B6                 db  65h ; e
.data:000004B7                 db  73h ; s
.data:000004B8                 db  73h ; s
.data:000004B9                 db  53h ; S
.data:000004BA                 db  65h ; e
.data:000004BB                 db  74h ; t
.data:000004BC                 db  43h ; C
.data:000004BD                 db  6Fh ; o
.data:000004BE                 db  64h ; d
.data:000004BF                 db  65h ; e
.data:000004C0                 db  72h ; r
.data:000004C1                 db  50h ; P
.data:000004C2                 db  72h ; r
.data:000004C3                 db  6Fh ; o
.data:000004C4                 db  70h ; p
.data:000004C5                 db  65h ; e
.data:000004C6                 db  72h ; r
.data:000004C7                 db  74h ; t
.data:000004C8                 db  69h ; i
.data:000004C9                 db  65h ; e
.data:000004CA                 db  73h ; s
.data:000004CB                 db  40h ; @
.data:000004CC                 db  40h ; @
.data:000004CD                 db    0
.data:000004CE                 align 10h
.data:000004CE _data           ends
.data:000004CE
.rdata$r:000004D0 ; ===========================================================================
.rdata$r:000004D0
.rdata$r:000004D0 ; Segment type: Pure data
.rdata$r:000004D0 ; Segment permissions: Read
.rdata$r:000004D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004D0                 assume cs:_rdata$r
.rdata$r:000004D0                 ;org 4D0h
.rdata$r:000004D0 ; COMDAT (pick any)
.rdata$r:000004D0                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:000004D0 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004D0 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:000004D0                                         ; DATA XREF: .rdata$r:000004A0o
.rdata$r:000004D0                                         ; .rdata$r:00000504o ...
.rdata$r:000004D1                 db    0
.rdata$r:000004D2                 db    0
.rdata$r:000004D3                 db    0
.rdata$r:000004D4                 db    0
.rdata$r:000004D5                 db    0
.rdata$r:000004D6                 db    0
.rdata$r:000004D7                 db    0
.rdata$r:000004D8                 db    2
.rdata$r:000004D9                 db    0
.rdata$r:000004DA                 db    0
.rdata$r:000004DB                 db    0
.rdata$r:000004DC                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:000004DC _rdata$r        ends
.rdata$r:000004DC
.rdata$r:000004E0 ; ===========================================================================
.rdata$r:000004E0
.rdata$r:000004E0 ; Segment type: Pure data
.rdata$r:000004E0 ; Segment permissions: Read
.rdata$r:000004E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004E0                 assume cs:_rdata$r
.rdata$r:000004E0                 ;org 4E0h
.rdata$r:000004E0 ; COMDAT (pick any)
.rdata$r:000004E0                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:000004E0 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:000004E0 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000004E0                                         ; DATA XREF: .rdata$r:000004DCo
.rdata$r:000004E0                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004E4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004E8                 db    0
.rdata$r:000004E9                 align 4
.rdata$r:000004E9 _rdata$r        ends
.rdata$r:000004E9
.rdata$r:000004EC ; ===========================================================================
.rdata$r:000004EC
.rdata$r:000004EC ; Segment type: Pure data
.rdata$r:000004EC ; Segment permissions: Read
.rdata$r:000004EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004EC                 assume cs:_rdata$r
.rdata$r:000004EC                 ;org 4ECh
.rdata$r:000004EC ; COMDAT (pick any)
.rdata$r:000004EC                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000004EC ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000004EC ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:000004EC                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:000004EC                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000004F0                 db    1
.rdata$r:000004F1                 db    0
.rdata$r:000004F2                 db    0
.rdata$r:000004F3                 db    0
.rdata$r:000004F4                 db    0
.rdata$r:000004F5                 db    0
.rdata$r:000004F6                 db    0
.rdata$r:000004F7                 db    0
.rdata$r:000004F8                 db 0FFh
.rdata$r:000004F9                 db 0FFh
.rdata$r:000004FA                 db 0FFh
.rdata$r:000004FB                 db 0FFh
.rdata$r:000004FC                 db    0
.rdata$r:000004FD                 db    0
.rdata$r:000004FE                 db    0
.rdata$r:000004FF                 db    0
.rdata$r:00000500                 db  40h ; @
.rdata$r:00000501                 db    0
.rdata$r:00000502                 db    0
.rdata$r:00000503                 db    0
.rdata$r:00000504                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000504 _rdata$r        ends
.rdata$r:00000504
.rdata$r:00000508 ; ===========================================================================
.rdata$r:00000508
.rdata$r:00000508 ; Segment type: Pure data
.rdata$r:00000508 ; Segment permissions: Read
.rdata$r:00000508 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000508                 assume cs:_rdata$r
.rdata$r:00000508                 ;org 508h
.rdata$r:00000508 ; COMDAT (pick any)
.rdata$r:00000508                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00000508 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00000508 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000508                                         ; DATA XREF: .rdata$r:000003A8o
.rdata$r:00000508                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000050C                 align 10h
.rdata$r:00000510                 db    4
.rdata$r:00000511                 db    0
.rdata$r:00000512                 db    0
.rdata$r:00000513                 db    0
.rdata$r:00000514                 db 0FFh
.rdata$r:00000515                 db 0FFh
.rdata$r:00000516                 db 0FFh
.rdata$r:00000517                 db 0FFh
.rdata$r:00000518                 db    0
.rdata$r:00000519                 db    0
.rdata$r:0000051A                 db    0
.rdata$r:0000051B                 db    0
.rdata$r:0000051C                 db  42h ; B
.rdata$r:0000051D                 db    0
.rdata$r:0000051E                 db    0
.rdata$r:0000051F                 db    0
.rdata$r:00000520                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000520 _rdata$r        ends
.rdata$r:00000520
.rdata$r:00000524 ; ===========================================================================
.rdata$r:00000524
.rdata$r:00000524 ; Segment type: Pure data
.rdata$r:00000524 ; Segment permissions: Read
.rdata$r:00000524 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000524                 assume cs:_rdata$r
.rdata$r:00000524                 ;org 524h
.rdata$r:00000524 ; COMDAT (pick any)
.rdata$r:00000524                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:00000524 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00000524 ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000524                                         ; DATA XREF: .rdata$r:000003ACo
.rdata$r:00000524                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000528                 db    0
.rdata$r:00000529                 db    0
.rdata$r:0000052A                 db    0
.rdata$r:0000052B                 db    0
.rdata$r:0000052C                 db    8
.rdata$r:0000052D                 db    0
.rdata$r:0000052E                 db    0
.rdata$r:0000052F                 db    0
.rdata$r:00000530                 db 0FFh
.rdata$r:00000531                 db 0FFh
.rdata$r:00000532                 db 0FFh
.rdata$r:00000533                 db 0FFh
.rdata$r:00000534                 db    0
.rdata$r:00000535                 db    0
.rdata$r:00000536                 db    0
.rdata$r:00000537                 db    0
.rdata$r:00000538                 db  40h ; @
.rdata$r:00000539                 db    0
.rdata$r:0000053A                 db    0
.rdata$r:0000053B                 db    0
.rdata$r:0000053C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000053C _rdata$r        ends
.rdata$r:0000053C
.data:00000540 ; ===========================================================================
.data:00000540
.data:00000540 ; Segment type: Pure data
.data:00000540 ; Segment permissions: Read/Write
.data:00000540 _data           segment dword public 'DATA' use32
.data:00000540                 assume cs:_data
.data:00000540                 ;org 540h
.data:00000540 ; COMDAT (pick any)
.data:00000540                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000540 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000540 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000540                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00000540                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000540                                         ; const type_info::`vftable'
.data:00000544                 align 8
.data:00000548 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00000548 _data           ends
.data:00000548
.rdata$r:0000055C ; ===========================================================================
.rdata$r:0000055C
.rdata$r:0000055C ; Segment type: Pure data
.rdata$r:0000055C ; Segment permissions: Read
.rdata$r:0000055C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000055C                 assume cs:_rdata$r
.rdata$r:0000055C                 ;org 55Ch
.rdata$r:0000055C ; COMDAT (pick any)
.rdata$r:0000055C                 public ??_R3CMyUnknownImp@@8
.rdata$r:0000055C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000055C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:0000053Co
.rdata$r:0000055C                                         ; .rdata$r:0000058Co
.rdata$r:0000055D                 db    0
.rdata$r:0000055E                 db    0
.rdata$r:0000055F                 db    0
.rdata$r:00000560                 db    0
.rdata$r:00000561                 db    0
.rdata$r:00000562                 db    0
.rdata$r:00000563                 db    0
.rdata$r:00000564                 db    1
.rdata$r:00000565                 db    0
.rdata$r:00000566                 db    0
.rdata$r:00000567                 db    0
.rdata$r:00000568                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000568 _rdata$r        ends
.rdata$r:00000568
.rdata$r:0000056C ; ===========================================================================
.rdata$r:0000056C
.rdata$r:0000056C ; Segment type: Pure data
.rdata$r:0000056C ; Segment permissions: Read
.rdata$r:0000056C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000056C                 assume cs:_rdata$r
.rdata$r:0000056C                 ;org 56Ch
.rdata$r:0000056C ; COMDAT (pick any)
.rdata$r:0000056C                 public ??_R2CMyUnknownImp@@8
.rdata$r:0000056C ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000056C ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000056C                                         ; DATA XREF: .rdata$r:00000568o
.rdata$r:0000056C                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000570                 db    0
.rdata$r:00000571                 align 4
.rdata$r:00000571 _rdata$r        ends
.rdata$r:00000571
.rdata$r:00000574 ; ===========================================================================
.rdata$r:00000574
.rdata$r:00000574 ; Segment type: Pure data
.rdata$r:00000574 ; Segment permissions: Read
.rdata$r:00000574 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000574                 assume cs:_rdata$r
.rdata$r:00000574                 ;org 574h
.rdata$r:00000574 ; COMDAT (pick any)
.rdata$r:00000574                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000574 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000574 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000574                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000574                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000578                 align 10h
.rdata$r:00000580                 db 0FFh
.rdata$r:00000581                 db 0FFh
.rdata$r:00000582                 db 0FFh
.rdata$r:00000583                 db 0FFh
.rdata$r:00000584                 db    0
.rdata$r:00000585                 db    0
.rdata$r:00000586                 db    0
.rdata$r:00000587                 db    0
.rdata$r:00000588                 db  40h ; @
.rdata$r:00000589                 db    0
.rdata$r:0000058A                 db    0
.rdata$r:0000058B                 db    0
.rdata$r:0000058C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000058C _rdata$r        ends
.rdata$r:0000058C
.rdata$r:00000590 ; ===========================================================================
.rdata$r:00000590
.rdata$r:00000590 ; Segment type: Pure data
.rdata$r:00000590 ; Segment permissions: Read
.rdata$r:00000590 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000590                 assume cs:_rdata$r
.rdata$r:00000590                 ;org 590h
.rdata$r:00000590 ; COMDAT (pick any)
.rdata$r:00000590                 public ??_R4CCrcHasher@@6BICompressSetCoderProperties@@@
.rdata$r:00000590 ; const CCrcHasher::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00000590 ??_R4CCrcHasher@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00000590                                         ; DATA XREF: .rdata:00000324o
.rdata$r:00000591                 db    0
.rdata$r:00000592                 db    0
.rdata$r:00000593                 db    0
.rdata$r:00000594                 db    4
.rdata$r:00000595                 db    0
.rdata$r:00000596                 db    0
.rdata$r:00000597                 db    0
.rdata$r:00000598                 db    0
.rdata$r:00000599                 db    0
.rdata$r:0000059A                 db    0
.rdata$r:0000059B                 db    0
.rdata$r:0000059C                 dd offset ??_R0?AVCCrcHasher@@@8 ; CCrcHasher `RTTI Type Descriptor'
.rdata$r:000005A0                 dd offset ??_R3CCrcHasher@@8 ; CCrcHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005A0 _rdata$r        ends
.rdata$r:000005A0
.text:000005A4 ; ===========================================================================
.text:000005A4
.text:000005A4 ; Segment type: Pure code
.text:000005A4 ; Segment permissions: Read/Execute
.text:000005A4 _text           segment para public 'CODE' use32
.text:000005A4                 assume cs:_text
.text:000005A4                 ;org 5A4h
.text:000005A4 ; COMDAT (pick any)
.text:000005A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000005A4
.text:000005A4 ; =============== S U B R O U T I N E =======================================
.text:000005A4
.text:000005A4 ; Attributes: bp-based frame
.text:000005A4
.text:000005A4 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000005A4                 public ??0CMyUnknownImp@@QAE@XZ
.text:000005A4 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CCrcHasher::CCrcHasher(void)+27p
.text:000005A4
.text:000005A4 var_4           = dword ptr -4
.text:000005A4
.text:000005A4                 push    ebp
.text:000005A5                 mov     ebp, esp
.text:000005A7                 push    ecx
.text:000005A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005AF                 mov     [ebp+var_4], ecx
.text:000005B2                 mov     eax, [ebp+var_4]
.text:000005B5                 mov     dword ptr [eax], 0
.text:000005BB                 mov     eax, [ebp+var_4]
.text:000005BE                 mov     esp, ebp
.text:000005C0                 pop     ebp
.text:000005C1                 retn
.text:000005C1 ??0CMyUnknownImp@@QAE@XZ endp
.text:000005C1
.text:000005C1 ; ---------------------------------------------------------------------------
.text:000005C2                 align 4
.text:000005C2 _text           ends
.text:000005C2
.text:000005C4 ; ===========================================================================
.text:000005C4
.text:000005C4 ; Segment type: Pure code
.text:000005C4 ; Segment permissions: Read/Execute
.text:000005C4 _text           segment para public 'CODE' use32
.text:000005C4                 assume cs:_text
.text:000005C4                 ;org 5C4h
.text:000005C4 ; COMDAT (pick any)
.text:000005C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000005C4
.text:000005C4 ; =============== S U B R O U T I N E =======================================
.text:000005C4
.text:000005C4 ; Attributes: bp-based frame
.text:000005C4
.text:000005C4 ; __int32 __stdcall CCrcHasher::QueryInterface(CCrcHasher *this, const struct _GUID *Buf1, void **)
.text:000005C4                 public ?QueryInterface@CCrcHasher@@UAGJABU_GUID@@PAPAX@Z
.text:000005C4 ?QueryInterface@CCrcHasher@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000005C4                                         ; CODE XREF: [thunk]:CCrcHasher::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:000005C4                                         ; DATA XREF: .rdata:const CCrcHasher::`vftable'{for `IHasher'}o
.text:000005C4
.text:000005C4 var_8           = dword ptr -8
.text:000005C4 var_4           = dword ptr -4
.text:000005C4 this            = dword ptr  8
.text:000005C4 Buf1            = dword ptr  0Ch
.text:000005C4 arg_8           = dword ptr  10h
.text:000005C4
.text:000005C4                 push    ebp
.text:000005C5                 mov     ebp, esp
.text:000005C7                 sub     esp, 8
.text:000005CA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005D8                 mov     eax, [ebp+arg_8]
.text:000005DB                 mov     dword ptr [eax], 0
.text:000005E1                 push    offset _IID_IUnknown ; Buf2
.text:000005E6                 mov     ecx, [ebp+Buf1]
.text:000005E9                 push    ecx             ; Buf1
.text:000005EA                 call    ___@8           ; __(x,x)
.text:000005EF                 test    eax, eax
.text:000005F1                 jz      short loc_615
.text:000005F3                 cmp     [ebp+this], 0
.text:000005F7                 jz      short loc_604
.text:000005F9                 mov     edx, [ebp+this]
.text:000005FC                 add     edx, 4
.text:000005FF                 mov     [ebp+var_4], edx
.text:00000602                 jmp     short loc_60B
.text:00000604 ; ---------------------------------------------------------------------------
.text:00000604
.text:00000604 loc_604:                                ; CODE XREF: CCrcHasher::QueryInterface(_GUID const &,void * *)+33j
.text:00000604                 mov     [ebp+var_4], 0
.text:0000060B
.text:0000060B loc_60B:                                ; CODE XREF: CCrcHasher::QueryInterface(_GUID const &,void * *)+3Ej
.text:0000060B                 mov     eax, [ebp+arg_8]
.text:0000060E                 mov     ecx, [ebp+var_4]
.text:00000611                 mov     [eax], ecx
.text:00000613                 jmp     short loc_650
.text:00000615 ; ---------------------------------------------------------------------------
.text:00000615
.text:00000615 loc_615:                                ; CODE XREF: CCrcHasher::QueryInterface(_GUID const &,void * *)+2Dj
.text:00000615                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:0000061A                 mov     edx, [ebp+Buf1]
.text:0000061D                 push    edx             ; Buf1
.text:0000061E                 call    ___@8           ; __(x,x)
.text:00000623                 test    eax, eax
.text:00000625                 jz      short loc_649
.text:00000627                 cmp     [ebp+this], 0
.text:0000062B                 jz      short loc_638
.text:0000062D                 mov     eax, [ebp+this]
.text:00000630                 add     eax, 4
.text:00000633                 mov     [ebp+var_8], eax
.text:00000636                 jmp     short loc_63F
.text:00000638 ; ---------------------------------------------------------------------------
.text:00000638
.text:00000638 loc_638:                                ; CODE XREF: CCrcHasher::QueryInterface(_GUID const &,void * *)+67j
.text:00000638                 mov     [ebp+var_8], 0
.text:0000063F
.text:0000063F loc_63F:                                ; CODE XREF: CCrcHasher::QueryInterface(_GUID const &,void * *)+72j
.text:0000063F                 mov     ecx, [ebp+arg_8]
.text:00000642                 mov     edx, [ebp+var_8]
.text:00000645                 mov     [ecx], edx
.text:00000647                 jmp     short loc_650
.text:00000649 ; ---------------------------------------------------------------------------
.text:00000649
.text:00000649 loc_649:                                ; CODE XREF: CCrcHasher::QueryInterface(_GUID const &,void * *)+61j
.text:00000649                 mov     eax, 80004002h
.text:0000064E                 jmp     short loc_661
.text:00000650 ; ---------------------------------------------------------------------------
.text:00000650
.text:00000650 loc_650:                                ; CODE XREF: CCrcHasher::QueryInterface(_GUID const &,void * *)+4Fj
.text:00000650                                         ; CCrcHasher::QueryInterface(_GUID const &,void * *)+83j
.text:00000650                 mov     eax, [ebp+this]
.text:00000653                 mov     ecx, [eax+8]
.text:00000656                 add     ecx, 1
.text:00000659                 mov     edx, [ebp+this]
.text:0000065C                 mov     [edx+8], ecx
.text:0000065F                 xor     eax, eax
.text:00000661
.text:00000661 loc_661:                                ; CODE XREF: CCrcHasher::QueryInterface(_GUID const &,void * *)+8Aj
.text:00000661                 add     esp, 8
.text:00000664                 cmp     ebp, esp
.text:00000666                 call    __RTC_CheckEsp
.text:0000066B                 mov     esp, ebp
.text:0000066D                 pop     ebp
.text:0000066E                 retn    0Ch
.text:0000066E ?QueryInterface@CCrcHasher@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000066E
.text:0000066E ; ---------------------------------------------------------------------------
.text:00000671                 align 4
.text:00000671 _text           ends
.text:00000671
.text:00000674 ; ===========================================================================
.text:00000674
.text:00000674 ; Segment type: Pure code
.text:00000674 ; Segment permissions: Read/Execute
.text:00000674 _text           segment para public 'CODE' use32
.text:00000674                 assume cs:_text
.text:00000674                 ;org 674h
.text:00000674 ; COMDAT (pick any)
.text:00000674                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000674
.text:00000674 ; =============== S U B R O U T I N E =======================================
.text:00000674
.text:00000674 ; Attributes: bp-based frame
.text:00000674
.text:00000674 ; unsigned __int32 __stdcall CCrcHasher::AddRef(CCrcHasher *this)
.text:00000674                 public ?AddRef@CCrcHasher@@UAGKXZ
.text:00000674 ?AddRef@CCrcHasher@@UAGKXZ proc near    ; CODE XREF: [thunk]:CCrcHasher::AddRef`adjustor{4}' (void)+5j
.text:00000674                                         ; DATA XREF: .rdata:00000340o
.text:00000674
.text:00000674 var_4           = dword ptr -4
.text:00000674 this            = dword ptr  8
.text:00000674
.text:00000674                 push    ebp
.text:00000675                 mov     ebp, esp
.text:00000677                 push    ecx
.text:00000678                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000067F                 mov     eax, [ebp+this]
.text:00000682                 mov     ecx, [eax+8]
.text:00000685                 add     ecx, 1
.text:00000688                 mov     [ebp+var_4], ecx
.text:0000068B                 mov     edx, [ebp+this]
.text:0000068E                 mov     eax, [ebp+var_4]
.text:00000691                 mov     [edx+8], eax
.text:00000694                 mov     eax, [ebp+var_4]
.text:00000697                 mov     esp, ebp
.text:00000699                 pop     ebp
.text:0000069A                 retn    4
.text:0000069A ?AddRef@CCrcHasher@@UAGKXZ endp
.text:0000069A
.text:0000069A ; ---------------------------------------------------------------------------
.text:0000069D                 align 10h
.text:0000069D _text           ends
.text:0000069D
.text:000006A0 ; ===========================================================================
.text:000006A0
.text:000006A0 ; Segment type: Pure code
.text:000006A0 ; Segment permissions: Read/Execute
.text:000006A0 _text           segment para public 'CODE' use32
.text:000006A0                 assume cs:_text
.text:000006A0                 ;org 6A0h
.text:000006A0 ; COMDAT (pick any)
.text:000006A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000006A0
.text:000006A0 ; =============== S U B R O U T I N E =======================================
.text:000006A0
.text:000006A0 ; Attributes: bp-based frame
.text:000006A0
.text:000006A0 ; unsigned __int32 __stdcall CCrcHasher::Release(CCrcHasher *this)
.text:000006A0                 public ?Release@CCrcHasher@@UAGKXZ
.text:000006A0 ?Release@CCrcHasher@@UAGKXZ proc near   ; CODE XREF: [thunk]:CCrcHasher::Release`adjustor{4}' (void)+5j
.text:000006A0                                         ; DATA XREF: .rdata:00000344o
.text:000006A0
.text:000006A0 var_8           = dword ptr -8
.text:000006A0 var_4           = dword ptr -4
.text:000006A0 this            = dword ptr  8
.text:000006A0
.text:000006A0                 push    ebp
.text:000006A1                 mov     ebp, esp
.text:000006A3                 sub     esp, 8
.text:000006A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000006AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006B4                 mov     eax, [ebp+this]
.text:000006B7                 mov     ecx, [eax+8]
.text:000006BA                 sub     ecx, 1
.text:000006BD                 mov     [ebp+var_8], ecx
.text:000006C0                 mov     edx, [ebp+this]
.text:000006C3                 mov     eax, [ebp+var_8]
.text:000006C6                 mov     [edx+8], eax
.text:000006C9                 cmp     [ebp+var_8], 0
.text:000006CD                 jz      short loc_6D7
.text:000006CF                 mov     ecx, [ebp+this]
.text:000006D2                 mov     eax, [ecx+8]
.text:000006D5                 jmp     short loc_6EB
.text:000006D7 ; ---------------------------------------------------------------------------
.text:000006D7
.text:000006D7 loc_6D7:                                ; CODE XREF: CCrcHasher::Release(void)+2Dj
.text:000006D7                 mov     edx, [ebp+this]
.text:000006DA                 mov     [ebp+var_4], edx
.text:000006DD                 mov     eax, [ebp+var_4]
.text:000006E0                 push    eax             ; void *
.text:000006E1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000006E6                 add     esp, 4
.text:000006E9                 xor     eax, eax
.text:000006EB
.text:000006EB loc_6EB:                                ; CODE XREF: CCrcHasher::Release(void)+35j
.text:000006EB                 add     esp, 8
.text:000006EE                 cmp     ebp, esp
.text:000006F0                 call    __RTC_CheckEsp
.text:000006F5                 mov     esp, ebp
.text:000006F7                 pop     ebp
.text:000006F8                 retn    4
.text:000006F8 ?Release@CCrcHasher@@UAGKXZ endp
.text:000006F8
.text:000006F8 ; ---------------------------------------------------------------------------
.text:000006FB                 align 4
.text:000006FB _text           ends
.text:000006FB
.text:000006FC ; ===========================================================================
.text:000006FC
.text:000006FC ; Segment type: Pure code
.text:000006FC ; Segment permissions: Read/Execute
.text:000006FC _text           segment para public 'CODE' use32
.text:000006FC                 assume cs:_text
.text:000006FC                 ;org 6FCh
.text:000006FC ; COMDAT (pick any)
.text:000006FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000006FC
.text:000006FC ; =============== S U B R O U T I N E =======================================
.text:000006FC
.text:000006FC ; Attributes: bp-based frame
.text:000006FC
.text:000006FC ; _DWORD __thiscall IHasher::IHasher(IHasher *__hidden this)
.text:000006FC                 public ??0IHasher@@QAE@XZ
.text:000006FC ??0IHasher@@QAE@XZ proc near            ; CODE XREF: CCrcHasher::CCrcHasher(void)+11p
.text:000006FC
.text:000006FC var_4           = dword ptr -4
.text:000006FC
.text:000006FC                 push    ebp
.text:000006FD                 mov     ebp, esp
.text:000006FF                 push    ecx
.text:00000700                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000707                 mov     [ebp+var_4], ecx
.text:0000070A                 mov     ecx, [ebp+var_4]
.text:0000070D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000712                 mov     eax, [ebp+var_4]
.text:00000715                 mov     dword ptr [eax], offset ??_7IHasher@@6B@ ; const IHasher::`vftable'
.text:0000071B                 mov     eax, [ebp+var_4]
.text:0000071E                 add     esp, 4
.text:00000721                 cmp     ebp, esp
.text:00000723                 call    __RTC_CheckEsp
.text:00000728                 mov     esp, ebp
.text:0000072A                 pop     ebp
.text:0000072B                 retn
.text:0000072B ??0IHasher@@QAE@XZ endp
.text:0000072B
.text:0000072B _text           ends
.text:0000072B
.rdata:0000072C ; ===========================================================================
.rdata:0000072C
.rdata:0000072C ; Segment type: Pure data
.rdata:0000072C ; Segment permissions: Read
.rdata:0000072C _rdata          segment dword public 'DATA' use32
.rdata:0000072C                 assume cs:_rdata
.rdata:0000072C                 ;org 72Ch
.rdata:0000072C ; COMDAT (pick largest)
.rdata:0000072C                 dd offset ??_R4IHasher@@6B@ ; const IHasher::`RTTI Complete Object Locator'
.rdata:00000730                 public ??_7IHasher@@6B@
.rdata:00000730 ; const IHasher::`vftable'
.rdata:00000730 ??_7IHasher@@6B@ dd offset __purecall   ; DATA XREF: IHasher::IHasher(void)+19o
.rdata:00000734                 dd offset __purecall
.rdata:00000738                 dd offset __purecall
.rdata:0000073C                 dd offset __purecall
.rdata:00000740                 dd offset __purecall
.rdata:00000744                 dd offset __purecall
.rdata:00000748                 dd offset __purecall
.rdata:00000748 _rdata          ends
.rdata:00000748
.rdata$r:0000074C ; ===========================================================================
.rdata$r:0000074C
.rdata$r:0000074C ; Segment type: Pure data
.rdata$r:0000074C ; Segment permissions: Read
.rdata$r:0000074C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000074C                 assume cs:_rdata$r
.rdata$r:0000074C                 ;org 74Ch
.rdata$r:0000074C ; COMDAT (pick any)
.rdata$r:0000074C                 public ??_R4IHasher@@6B@
.rdata$r:0000074C ; const IHasher::`RTTI Complete Object Locator'
.rdata$r:0000074C ??_R4IHasher@@6B@ db    0               ; DATA XREF: .rdata:0000072Co
.rdata$r:0000074D                 db    0
.rdata$r:0000074E                 db    0
.rdata$r:0000074F                 db    0
.rdata$r:00000750                 db    0
.rdata$r:00000751                 db    0
.rdata$r:00000752                 db    0
.rdata$r:00000753                 db    0
.rdata$r:00000754                 db    0
.rdata$r:00000755                 db    0
.rdata$r:00000756                 db    0
.rdata$r:00000757                 db    0
.rdata$r:00000758                 dd offset ??_R0?AUIHasher@@@8 ; IHasher `RTTI Type Descriptor'
.rdata$r:0000075C                 dd offset ??_R3IHasher@@8 ; IHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000075C _rdata$r        ends
.rdata$r:0000075C
.text:00000760 ; ===========================================================================
.text:00000760
.text:00000760 ; Segment type: Pure code
.text:00000760 ; Segment permissions: Read/Execute
.text:00000760 _text           segment para public 'CODE' use32
.text:00000760                 assume cs:_text
.text:00000760                 ;org 760h
.text:00000760 ; COMDAT (pick any)
.text:00000760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000760
.text:00000760 ; =============== S U B R O U T I N E =======================================
.text:00000760
.text:00000760 ; Attributes: bp-based frame
.text:00000760
.text:00000760 ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:00000760                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:00000760 ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:00000760                                         ; CODE XREF: CCrcHasher::CCrcHasher(void)+1Cp
.text:00000760
.text:00000760 var_4           = dword ptr -4
.text:00000760
.text:00000760                 push    ebp
.text:00000761                 mov     ebp, esp
.text:00000763                 push    ecx
.text:00000764                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000076B                 mov     [ebp+var_4], ecx
.text:0000076E                 mov     ecx, [ebp+var_4]
.text:00000771                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000776                 mov     eax, [ebp+var_4]
.text:00000779                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:0000077F                 mov     eax, [ebp+var_4]
.text:00000782                 add     esp, 4
.text:00000785                 cmp     ebp, esp
.text:00000787                 call    __RTC_CheckEsp
.text:0000078C                 mov     esp, ebp
.text:0000078E                 pop     ebp
.text:0000078F                 retn
.text:0000078F ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:0000078F
.text:0000078F _text           ends
.text:0000078F
.rdata:00000790 ; ===========================================================================
.rdata:00000790
.rdata:00000790 ; Segment type: Pure data
.rdata:00000790 ; Segment permissions: Read
.rdata:00000790 _rdata          segment dword public 'DATA' use32
.rdata:00000790                 assume cs:_rdata
.rdata:00000790                 ;org 790h
.rdata:00000790 ; COMDAT (pick largest)
.rdata:00000790                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:00000794                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:00000794 ; const ICompressSetCoderProperties::`vftable'
.rdata:00000794 ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:00000794                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:00000798                 dd offset __purecall
.rdata:0000079C                 dd offset __purecall
.rdata:000007A0                 dd offset __purecall
.rdata:000007A0 _rdata          ends
.rdata:000007A0
.rdata$r:000007A4 ; ===========================================================================
.rdata$r:000007A4
.rdata$r:000007A4 ; Segment type: Pure data
.rdata$r:000007A4 ; Segment permissions: Read
.rdata$r:000007A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007A4                 assume cs:_rdata$r
.rdata$r:000007A4                 ;org 7A4h
.rdata$r:000007A4 ; COMDAT (pick any)
.rdata$r:000007A4                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:000007A4 ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:000007A4 ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:000007A4                                         ; DATA XREF: .rdata:00000790o
.rdata$r:000007A5                 db    0
.rdata$r:000007A6                 db    0
.rdata$r:000007A7                 db    0
.rdata$r:000007A8                 db    0
.rdata$r:000007A9                 db    0
.rdata$r:000007AA                 db    0
.rdata$r:000007AB                 db    0
.rdata$r:000007AC                 db    0
.rdata$r:000007AD                 db    0
.rdata$r:000007AE                 db    0
.rdata$r:000007AF                 db    0
.rdata$r:000007B0                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000007B4                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007B4 _rdata$r        ends
.rdata$r:000007B4
.text:000007B8 ; ===========================================================================
.text:000007B8
.text:000007B8 ; Segment type: Pure code
.text:000007B8 ; Segment permissions: Read/Execute
.text:000007B8 _text           segment para public 'CODE' use32
.text:000007B8                 assume cs:_text
.text:000007B8                 ;org 7B8h
.text:000007B8 ; COMDAT (pick any)
.text:000007B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007B8
.text:000007B8 ; =============== S U B R O U T I N E =======================================
.text:000007B8
.text:000007B8 ; Attributes: bp-based frame
.text:000007B8
.text:000007B8 ; public: __thiscall IUnknown::IUnknown(void)
.text:000007B8                 public ??0IUnknown@@QAE@XZ
.text:000007B8 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: IHasher::IHasher(void)+11p
.text:000007B8                                         ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)+11p
.text:000007B8
.text:000007B8 var_4           = dword ptr -4
.text:000007B8
.text:000007B8                 push    ebp
.text:000007B9                 mov     ebp, esp
.text:000007BB                 push    ecx
.text:000007BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007C3                 mov     [ebp+var_4], ecx
.text:000007C6                 mov     eax, [ebp+var_4]
.text:000007C9                 mov     esp, ebp
.text:000007CB                 pop     ebp
.text:000007CC                 retn
.text:000007CC ??0IUnknown@@QAE@XZ endp
.text:000007CC
.text:000007CC ; ---------------------------------------------------------------------------
.text:000007CD                 align 10h
.text:000007CD _text           ends
.text:000007CD
.text:000007D0 ; ===========================================================================
.text:000007D0
.text:000007D0 ; Segment type: Pure code
.text:000007D0 ; Segment permissions: Read/Execute
.text:000007D0 _text           segment para public 'CODE' use32
.text:000007D0                 assume cs:_text
.text:000007D0                 ;org 7D0h
.text:000007D0 ; COMDAT (pick any)
.text:000007D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007D0
.text:000007D0 ; =============== S U B R O U T I N E =======================================
.text:000007D0
.text:000007D0 ; Attributes: bp-based frame
.text:000007D0
.text:000007D0 ; int __stdcall __(void *Buf1, void *Buf2)
.text:000007D0                 public ___@8
.text:000007D0 ___@8           proc near               ; CODE XREF: CCrcHasher::QueryInterface(_GUID const &,void * *)+26p
.text:000007D0                                         ; CCrcHasher::QueryInterface(_GUID const &,void * *)+5Ap
.text:000007D0
.text:000007D0 Buf1            = dword ptr  8
.text:000007D0 Buf2            = dword ptr  0Ch
.text:000007D0
.text:000007D0                 push    ebp
.text:000007D1                 mov     ebp, esp
.text:000007D3                 mov     eax, [ebp+Buf2]
.text:000007D6                 push    eax             ; Buf2
.text:000007D7                 mov     ecx, [ebp+Buf1]
.text:000007DA                 push    ecx             ; Buf1
.text:000007DB                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000007E0                 cmp     ebp, esp
.text:000007E2                 call    __RTC_CheckEsp
.text:000007E7                 pop     ebp
.text:000007E8                 retn    8
.text:000007E8 ___@8           endp
.text:000007E8
.text:000007E8 ; ---------------------------------------------------------------------------
.text:000007EB                 align 4
.text:000007EB _text           ends
.text:000007EB
.text:000007EC ; ===========================================================================
.text:000007EC
.text:000007EC ; Segment type: Pure code
.text:000007EC ; Segment permissions: Read/Execute
.text:000007EC _text           segment para public 'CODE' use32
.text:000007EC                 assume cs:_text
.text:000007EC                 ;org 7ECh
.text:000007EC ; COMDAT (pick any)
.text:000007EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007EC
.text:000007EC ; =============== S U B R O U T I N E =======================================
.text:000007EC
.text:000007EC ; Attributes: bp-based frame
.text:000007EC
.text:000007EC ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000007EC                 public _IsEqualGUID@8
.text:000007EC _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000007EC
.text:000007EC Buf1            = dword ptr  8
.text:000007EC Buf2            = dword ptr  0Ch
.text:000007EC
.text:000007EC                 push    ebp
.text:000007ED                 mov     ebp, esp
.text:000007EF                 push    10h             ; Size
.text:000007F1                 mov     eax, [ebp+Buf2]
.text:000007F4                 push    eax             ; Buf2
.text:000007F5                 mov     ecx, [ebp+Buf1]
.text:000007F8                 push    ecx             ; Buf1
.text:000007F9                 call    _memcmp
.text:000007FE                 add     esp, 0Ch
.text:00000801                 neg     eax
.text:00000803                 sbb     eax, eax
.text:00000805                 add     eax, 1
.text:00000808                 cmp     ebp, esp
.text:0000080A                 call    __RTC_CheckEsp
.text:0000080F                 pop     ebp
.text:00000810                 retn    8
.text:00000810 _IsEqualGUID@8  endp
.text:00000810
.text:00000810 ; ---------------------------------------------------------------------------
.text:00000813                 align 4
.text:00000813 _text           ends
.text:00000813
.text:00000814 ; ===========================================================================
.text:00000814
.text:00000814 ; Segment type: Pure code
.text:00000814 ; Segment permissions: Read/Execute
.text:00000814 _text           segment para public 'CODE' use32
.text:00000814                 assume cs:_text
.text:00000814                 ;org 814h
.text:00000814 ; COMDAT (pick any)
.text:00000814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000814
.text:00000814 ; =============== S U B R O U T I N E =======================================
.text:00000814
.text:00000814
.text:00000814 ; [thunk]:public: virtual unsigned long __stdcall CCrcHasher::Release`adjustor{4}' (void)
.text:00000814                 public ?Release@CCrcHasher@@W3AGKXZ
.text:00000814 ?Release@CCrcHasher@@W3AGKXZ proc near  ; DATA XREF: .rdata:00000330o
.text:00000814
.text:00000814 arg_0           = dword ptr  4
.text:00000814
.text:00000814                 sub     [esp+arg_0], 4
.text:00000819                 jmp     ?Release@CCrcHasher@@UAGKXZ ; CCrcHasher::Release(void)
.text:00000819 ?Release@CCrcHasher@@W3AGKXZ endp
.text:00000819
.text:00000819 ; ---------------------------------------------------------------------------
.text:0000081E                 align 10h
.text:0000081E _text           ends
.text:0000081E
.text:00000820 ; ===========================================================================
.text:00000820
.text:00000820 ; Segment type: Pure code
.text:00000820 ; Segment permissions: Read/Execute
.text:00000820 _text           segment para public 'CODE' use32
.text:00000820                 assume cs:_text
.text:00000820                 ;org 820h
.text:00000820 ; COMDAT (pick any)
.text:00000820                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000820
.text:00000820 ; =============== S U B R O U T I N E =======================================
.text:00000820
.text:00000820
.text:00000820 ; [thunk]:public: virtual unsigned long __stdcall CCrcHasher::AddRef`adjustor{4}' (void)
.text:00000820                 public ?AddRef@CCrcHasher@@W3AGKXZ
.text:00000820 ?AddRef@CCrcHasher@@W3AGKXZ proc near   ; DATA XREF: .rdata:0000032Co
.text:00000820
.text:00000820 arg_0           = dword ptr  4
.text:00000820
.text:00000820                 sub     [esp+arg_0], 4
.text:00000825                 jmp     ?AddRef@CCrcHasher@@UAGKXZ ; CCrcHasher::AddRef(void)
.text:00000825 ?AddRef@CCrcHasher@@W3AGKXZ endp
.text:00000825
.text:00000825 ; ---------------------------------------------------------------------------
.text:0000082A                 align 4
.text:0000082A _text           ends
.text:0000082A
.text:0000082C ; ===========================================================================
.text:0000082C
.text:0000082C ; Segment type: Pure code
.text:0000082C ; Segment permissions: Read/Execute
.text:0000082C _text           segment para public 'CODE' use32
.text:0000082C                 assume cs:_text
.text:0000082C                 ;org 82Ch
.text:0000082C ; COMDAT (pick any)
.text:0000082C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000082C
.text:0000082C ; =============== S U B R O U T I N E =======================================
.text:0000082C
.text:0000082C
.text:0000082C ; [thunk]:public: virtual long __stdcall CCrcHasher::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000082C                 public ?QueryInterface@CCrcHasher@@W3AGJABU_GUID@@PAPAX@Z
.text:0000082C ?QueryInterface@CCrcHasher@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000082C                                         ; DATA XREF: .rdata:const CCrcHasher::`vftable'{for `ICompressSetCoderProperties'}o
.text:0000082C
.text:0000082C arg_0           = dword ptr  4
.text:0000082C
.text:0000082C                 sub     [esp+arg_0], 4
.text:00000831                 jmp     ?QueryInterface@CCrcHasher@@UAGJABU_GUID@@PAPAX@Z ; CCrcHasher::QueryInterface(_GUID const &,void * *)
.text:00000831 ?QueryInterface@CCrcHasher@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00000831
.text:00000831 ; ---------------------------------------------------------------------------
.text:00000836                 align 4
.text:00000836 _text           ends
.text:00000836
.text$yc:00000838 ; ===========================================================================
.text$yc:00000838
.text$yc:00000838 ; Segment type: Pure code
.text$yc:00000838 ; Segment permissions: Read/Execute
.text$yc:00000838 _text$yc        segment para public 'CODE' use32
.text$yc:00000838                 assume cs:_text$yc
.text$yc:00000838                 ;org 838h
.text$yc:00000838 ; COMDAT (pick any)
.text$yc:00000838                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00000838
.text$yc:00000838 ; =============== S U B R O U T I N E =======================================
.text$yc:00000838
.text$yc:00000838 ; Attributes: bp-based frame
.text$yc:00000838
.text$yc:00000838 ; void __cdecl `dynamic initializer for 'g_RegisterHasher''(void)
.text$yc:00000838 ??__Eg_RegisterHasher@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:_g_RegisterHasher$initializer$o
.text$yc:00000838                 push    ebp
.text$yc:00000839                 mov     ebp, esp
.text$yc:0000083B                 mov     ecx, offset _g_RegisterHasher ; this
.text$yc:00000840                 call    ??0CRegHasher_CCrcHasher@@QAE@XZ ; CRegHasher_CCrcHasher::CRegHasher_CCrcHasher(void)
.text$yc:00000845                 cmp     ebp, esp
.text$yc:00000847                 call    __RTC_CheckEsp
.text$yc:0000084C                 pop     ebp
.text$yc:0000084D                 retn
.text$yc:0000084D ??__Eg_RegisterHasher@@YAXXZ endp
.text$yc:0000084D
.text$yc:0000084D ; ---------------------------------------------------------------------------
.text$yc:0000084E                 align 10h
.text$yc:0000084E _text$yc        ends
.text$yc:0000084E
.text:00000850 ; ===========================================================================
.text:00000850
.text:00000850 ; Segment type: Pure code
.text:00000850 ; Segment permissions: Read/Execute
.text:00000850 _text           segment para public 'CODE' use32
.text:00000850                 assume cs:_text
.text:00000850                 ;org 850h
.text:00000850 ; COMDAT (pick any)
.text:00000850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000850
.text:00000850 ; =============== S U B R O U T I N E =======================================
.text:00000850
.text:00000850 ; Attributes: bp-based frame
.text:00000850
.text:00000850 ; _DWORD __thiscall CRegHasher_CCrcHasher::CRegHasher_CCrcHasher(CRegHasher_CCrcHasher *__hidden this)
.text:00000850                 public ??0CRegHasher_CCrcHasher@@QAE@XZ
.text:00000850 ??0CRegHasher_CCrcHasher@@QAE@XZ proc near
.text:00000850                                         ; CODE XREF: `dynamic initializer for 'g_RegisterHasher''(void)+8p
.text:00000850
.text:00000850 var_4           = dword ptr -4
.text:00000850
.text:00000850                 push    ebp
.text:00000851                 mov     ebp, esp
.text:00000853                 push    ecx
.text:00000854                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000085B                 mov     [ebp+var_4], ecx
.text:0000085E                 push    offset _g_HasherInfo ; struct CHasherInfo *
.text:00000863                 call    ?RegisterHasher@@YGXPBUCHasherInfo@@@Z ; RegisterHasher(CHasherInfo const *)
.text:00000868                 mov     eax, [ebp+var_4]
.text:0000086B                 add     esp, 4
.text:0000086E                 cmp     ebp, esp
.text:00000870                 call    __RTC_CheckEsp
.text:00000875                 mov     esp, ebp
.text:00000877                 pop     ebp
.text:00000878                 retn
.text:00000878 ??0CRegHasher_CCrcHasher@@QAE@XZ endp
.text:00000878
.text:00000878 ; ---------------------------------------------------------------------------
.text:00000879                 align 4
.text:00000879 _text           ends
.text:00000879
.bss:0000087C ; ===========================================================================
.bss:0000087C
.bss:0000087C ; Segment type: Uninitialized
.bss:0000087C ; Segment permissions: Read/Write
.bss:0000087C _bss            segment byte public 'BSS' use32
.bss:0000087C                 assume cs:_bss
.bss:0000087C                 ;org 87Ch
.bss:0000087C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000087C ; CRegHasher_CCrcHasher g_RegisterHasher
.bss:0000087C _g_RegisterHasher db    ? ;             ; DATA XREF: `dynamic initializer for 'g_RegisterHasher''(void)+3o
.bss:0000087D                 align 10h
.bss:0000087D _bss            ends
.bss:0000087D
.CRT$XCU:00000880 ; ===========================================================================
.CRT$XCU:00000880
.CRT$XCU:00000880 ; Segment type: Pure data
.CRT$XCU:00000880 ; Segment permissions: Read
.CRT$XCU:00000880 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00000880                 assume cs:_CRT$XCU
.CRT$XCU:00000880                 ;org 880h
.CRT$XCU:00000880 _g_RegisterHasher$initializer$ dd offset ??__Eg_RegisterHasher@@YAXXZ ; `dynamic initializer for 'g_RegisterHasher''(void)
.CRT$XCU:00000880 _CRT$XCU        ends
.CRT$XCU:00000880
UNDEF:00000890 ; ===========================================================================
UNDEF:00000890
UNDEF:00000890 ; Segment type: Externs
UNDEF:00000890 ; UNDEF
UNDEF:00000890                 extrn _g_CrcUpdateT8:near
UNDEF:00000890                                         ; DATA XREF: CCrcHasher::SetFunctions(uint)+55r
UNDEF:00000890                                         ; CCrcHasher::SetFunctions(uint)+61r
UNDEF:00000894                 extrn _g_CrcUpdateT4:near
UNDEF:00000894                                         ; DATA XREF: CCrcHasher::SetFunctions(uint)+32r
UNDEF:00000894                                         ; CCrcHasher::SetFunctions(uint)+3Er
UNDEF:00000898 ; __fastcall CrcUpdateT1(x, x, x, x)
UNDEF:00000898                 extrn @CrcUpdateT1@16:near
UNDEF:00000898                                         ; DATA XREF: CCrcHasher::SetFunctions(uint)+23o
UNDEF:0000089C                 extrn _g_CrcUpdate:near ; DATA XREF: CCrcHasher::SetFunctions(uint)+11r
UNDEF:000008A0                 extrn __RTC_Shutdown:near
UNDEF:000008A0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000008A4                 extrn __RTC_InitBase:near
UNDEF:000008A4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000008A8                 extrn __RTC_CheckEsp:near
UNDEF:000008A8                                         ; CODE XREF: CCrcHasher::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+81p
UNDEF:000008A8                                         ; CCrcHasher::Update(void const *,uint)+22p ...
UNDEF:000008AC                 extrn _g_CrcTable:near  ; DATA XREF: CCrcHasher::Update(void const *,uint)+6o
UNDEF:000008B0 ; void __cdecl operator delete(void *)
UNDEF:000008B0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0+4p
UNDEF:000008B0                                         ; CCrcHasher::Release(void)+41p
UNDEF:000008B4 ; void *__cdecl operator new(unsigned int)
UNDEF:000008B4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateHasherSpec(void)+3Fp
UNDEF:000008B8                 extrn ___security_cookie:near
UNDEF:000008B8                                         ; DATA XREF: CreateHasherSpec(void)+29r
UNDEF:000008BC                 extrn ___CxxFrameHandler3:near
UNDEF:000008BC                                         ; CODE XREF: __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ+16j
UNDEF:000008C0 ; __fastcall __security_check_cookie(x)
UNDEF:000008C0                 extrn @__security_check_cookie@4:near
UNDEF:000008C0                                         ; CODE XREF: __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ+Cp
UNDEF:000008C4 ; const type_info::`vftable'
UNDEF:000008C4                 extrn ??_7type_info@@6B@:near
UNDEF:000008C4                                         ; DATA XREF: .data:CCrcHasher `RTTI Type Descriptor'o
UNDEF:000008C4                                         ; .data:IHasher `RTTI Type Descriptor'o ...
UNDEF:000008C8                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:000008C8                                         ; DATA XREF: CCrcHasher::QueryInterface(_GUID const &,void * *):loc_615o
UNDEF:000008CC ; const IID IID_IUnknown
UNDEF:000008CC                 extrn _IID_IUnknown:near
UNDEF:000008CC                                         ; DATA XREF: CCrcHasher::QueryInterface(_GUID const &,void * *)+1Do
UNDEF:000008D0                 extrn __purecall:near   ; DATA XREF: .rdata:const IHasher::`vftable'o
UNDEF:000008D0                                         ; .rdata:00000734o ...
UNDEF:000008D4 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000008D4                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:000008D8 ; void __stdcall RegisterHasher(const struct CHasherInfo *)
UNDEF:000008D8                 extrn ?RegisterHasher@@YGXPBUCHasherInfo@@@Z:near
UNDEF:000008D8                                         ; CODE XREF: CRegHasher_CCrcHasher::CRegHasher_CCrcHasher(void)+13p
UNDEF:000008D8
UNDEF:000008D8
UNDEF:000008D8                 end