.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 090D9B66F27B049629531C9521547601
.rdata:00000000 ; Input CRC32 : 72D2F4D2
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Bz2Handler.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kProps         db 7                    ; DATA XREF: NArchive::NBz2::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000001 ; struct ICompressProgressInfo unk_1
.rdata:00000001 unk_1           db    8                 ; DATA XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2F5o
.rdata:00000002                 db    0
.rdata:00000003                 db    0
.rdata:00000004 _kArcProps      db 4Ah                  ; DATA XREF: NArchive::NBz2::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000005                 db  26h ; &
.rdata:00000006                 db    0
.rdata:00000007                 db    0
.rdata:00000008 _k_Signature    db  42h ; B             ; DATA XREF: .rdata:off_40o
.rdata:00000009                 db  5Ah ; Z
.rdata:0000000A                 db  68h ; h
.rdata:0000000B                 db    0
.rdata:0000000C $SG71091        db 'bzip2',0            ; DATA XREF: .rdata:00000044o
.rdata:00000012                 align 4
.rdata:00000014 $SG71092        db 'bz2 bzip2 tbz2 tbz',0 ; DATA XREF: .rdata:00000048o
.rdata:00000027                 align 4
.rdata:00000028 $SG71093        db '* * .tar .tar',0    ; DATA XREF: .rdata:0000004Co
.rdata:00000036                 align 4
.rdata:00000038 ; struct CArcInfo g_ArcInfo
.rdata:00000038 _g_ArcInfo      db    1                 ; DATA XREF: NArchive::NBz2::CRegisterArc::CRegisterArc(void)+Eo
.rdata:00000039                 db    0
.rdata:0000003A                 db    2
.rdata:0000003B                 db    3
.rdata:0000003C                 db    0
.rdata:0000003D                 db    0
.rdata:0000003E                 db    0
.rdata:0000003F                 db    0
.rdata:00000040 off_40          dd offset _k_Signature  ; DATA XREF: .xdata$x:__catchsym$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2o
.rdata:00000040                                         ; .xdata$x:__catchsym$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12o ...
.rdata:00000044                 dd offset $SG71091      ; "bzip2"
.rdata:00000048                 dd offset $SG71092      ; "bz2 bzip2 tbz2 tbz"
.rdata:0000004C                 dd offset $SG71093      ; "* * .tar .tar"
.rdata:00000050                 dd offset ?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ ; NArchive::NBz2::CreateArc(void)
.rdata:00000054                 dd offset ?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ ; NArchive::NBz2::CreateArcOut(void)
.rdata:00000058                 dd offset _IsArc_BZip2@8 ; IsArc_BZip2(x,x)
.rdata:00000058 _rdata          ends
.rdata:00000058
.text:0000005C ; ===========================================================================
.text:0000005C
.text:0000005C ; Segment type: Pure code
.text:0000005C ; Segment permissions: Read/Execute
.text:0000005C _text           segment para public 'CODE' use32
.text:0000005C                 assume cs:_text
.text:0000005C                 ;org 5Ch
.text:0000005C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000005C
.text:0000005C ; =============== S U B R O U T I N E =======================================
.text:0000005C
.text:0000005C ; Attributes: bp-based frame
.text:0000005C
.text:0000005C ; __int32 __stdcall NArchive::NBz2::CHandler::GetNumberOfProperties(NArchive::NBz2::CHandler *this, unsigned int *)
.text:0000005C                 public ?GetNumberOfProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z
.text:0000005C ?GetNumberOfProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z proc near
.text:0000005C                                         ; DATA XREF: .rdata:000026DCo
.text:0000005C
.text:0000005C this            = dword ptr  8
.text:0000005C arg_4           = dword ptr  0Ch
.text:0000005C
.text:0000005C                 push    ebp
.text:0000005D                 mov     ebp, esp
.text:0000005F                 mov     eax, [ebp+arg_4]
.text:00000062                 mov     dword ptr [eax], 2
.text:00000068                 xor     eax, eax
.text:0000006A                 pop     ebp
.text:0000006B                 retn    8
.text:0000006B ?GetNumberOfProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z endp
.text:0000006B
.text:0000006B ; ---------------------------------------------------------------------------
.text:0000006E                 db 0Eh dup(0CCh)
.text:0000007C
.text:0000007C ; =============== S U B R O U T I N E =======================================
.text:0000007C
.text:0000007C ; Attributes: bp-based frame
.text:0000007C
.text:0000007C ; __int32 __stdcall NArchive::NBz2::CHandler::GetPropertyInfo(NArchive::NBz2::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:0000007C                 public ?GetPropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:0000007C ?GetPropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:0000007C                                         ; DATA XREF: .rdata:000026E0o
.text:0000007C
.text:0000007C this            = dword ptr  8
.text:0000007C arg_4           = dword ptr  0Ch
.text:0000007C arg_8           = dword ptr  10h
.text:0000007C arg_C           = dword ptr  14h
.text:0000007C arg_10          = dword ptr  18h
.text:0000007C
.text:0000007C                 push    ebp
.text:0000007D                 mov     ebp, esp
.text:0000007F                 cmp     [ebp+arg_4], 2
.text:00000083                 jb      short loc_8C
.text:00000085                 mov     eax, 80070057h
.text:0000008A                 jmp     short loc_B9
.text:0000008C ; ---------------------------------------------------------------------------
.text:0000008C
.text:0000008C loc_8C:                                 ; CODE XREF: NArchive::NBz2::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:0000008C                 mov     eax, [ebp+arg_4]
.text:0000008F                 movzx   ecx, _kProps[eax]
.text:00000096                 mov     edx, [ebp+arg_C]
.text:00000099                 mov     [edx], ecx
.text:0000009B                 mov     eax, [ebp+arg_C]
.text:0000009E                 mov     ecx, [eax]
.text:000000A0                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:000000A8                 mov     eax, [ebp+arg_10]
.text:000000AB                 mov     [eax], dx
.text:000000AE                 mov     ecx, [ebp+arg_8]
.text:000000B1                 mov     dword ptr [ecx], 0
.text:000000B7                 xor     eax, eax
.text:000000B9
.text:000000B9 loc_B9:                                 ; CODE XREF: NArchive::NBz2::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:000000B9                 pop     ebp
.text:000000BA                 retn    14h
.text:000000BA ?GetPropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:000000BA
.text:000000BA ; ---------------------------------------------------------------------------
.text:000000BD                 db 0Fh dup(0CCh)
.text:000000CC
.text:000000CC ; =============== S U B R O U T I N E =======================================
.text:000000CC
.text:000000CC ; Attributes: bp-based frame
.text:000000CC
.text:000000CC ; __int32 __stdcall NArchive::NBz2::CHandler::GetNumberOfArchiveProperties(NArchive::NBz2::CHandler *this, unsigned int *)
.text:000000CC                 public ?GetNumberOfArchiveProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z
.text:000000CC ?GetNumberOfArchiveProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z proc near
.text:000000CC                                         ; DATA XREF: .rdata:000026E4o
.text:000000CC
.text:000000CC this            = dword ptr  8
.text:000000CC arg_4           = dword ptr  0Ch
.text:000000CC
.text:000000CC                 push    ebp
.text:000000CD                 mov     ebp, esp
.text:000000CF                 mov     eax, [ebp+arg_4]
.text:000000D2                 mov     dword ptr [eax], 2
.text:000000D8                 xor     eax, eax
.text:000000DA                 pop     ebp
.text:000000DB                 retn    8
.text:000000DB ?GetNumberOfArchiveProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z endp
.text:000000DB
.text:000000DB ; ---------------------------------------------------------------------------
.text:000000DE                 db 0Eh dup(0CCh)
.text:000000EC
.text:000000EC ; =============== S U B R O U T I N E =======================================
.text:000000EC
.text:000000EC ; Attributes: bp-based frame
.text:000000EC
.text:000000EC ; __int32 __stdcall NArchive::NBz2::CHandler::GetArchivePropertyInfo(NArchive::NBz2::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:000000EC                 public ?GetArchivePropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:000000EC ?GetArchivePropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:000000EC                                         ; DATA XREF: .rdata:000026E8o
.text:000000EC
.text:000000EC this            = dword ptr  8
.text:000000EC arg_4           = dword ptr  0Ch
.text:000000EC arg_8           = dword ptr  10h
.text:000000EC arg_C           = dword ptr  14h
.text:000000EC arg_10          = dword ptr  18h
.text:000000EC
.text:000000EC                 push    ebp
.text:000000ED                 mov     ebp, esp
.text:000000EF                 cmp     [ebp+arg_4], 2
.text:000000F3                 jb      short loc_FC
.text:000000F5                 mov     eax, 80070057h
.text:000000FA                 jmp     short loc_129
.text:000000FC ; ---------------------------------------------------------------------------
.text:000000FC
.text:000000FC loc_FC:                                 ; CODE XREF: NArchive::NBz2::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:000000FC                 mov     eax, [ebp+arg_4]
.text:000000FF                 movzx   ecx, _kArcProps[eax]
.text:00000106                 mov     edx, [ebp+arg_C]
.text:00000109                 mov     [edx], ecx
.text:0000010B                 mov     eax, [ebp+arg_C]
.text:0000010E                 mov     ecx, [eax]
.text:00000110                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:00000118                 mov     eax, [ebp+arg_10]
.text:0000011B                 mov     [eax], dx
.text:0000011E                 mov     ecx, [ebp+arg_8]
.text:00000121                 mov     dword ptr [ecx], 0
.text:00000127                 xor     eax, eax
.text:00000129
.text:00000129 loc_129:                                ; CODE XREF: NArchive::NBz2::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:00000129                 pop     ebp
.text:0000012A                 retn    14h
.text:0000012A ?GetArchivePropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:0000012A
.text:0000012A ; ---------------------------------------------------------------------------
.text:0000012D                 db 0Fh dup(0CCh)
.text:0000013C
.text:0000013C ; =============== S U B R O U T I N E =======================================
.text:0000013C
.text:0000013C ; Attributes: bp-based frame
.text:0000013C
.text:0000013C ; __int32 __stdcall NArchive::NBz2::CHandler::GetArchiveProperty(NArchive::NBz2::CHandler *this, unsigned __int32, struct tagPROPVARIANT *)
.text:0000013C                 public ?GetArchiveProperty@CHandler@NBz2@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:0000013C ?GetArchiveProperty@CHandler@NBz2@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:0000013C                                         ; DATA XREF: .rdata:000026D8o
.text:0000013C
.text:0000013C var_24          = dword ptr -24h
.text:0000013C var_20          = dword ptr -20h
.text:0000013C var_1C          = dword ptr -1Ch
.text:0000013C var_18          = dword ptr -18h
.text:0000013C var_14          = dword ptr -14h
.text:0000013C var_10          = dword ptr -10h
.text:0000013C var_C           = dword ptr -0Ch
.text:0000013C var_8           = dword ptr -8
.text:0000013C var_4           = dword ptr -4
.text:0000013C this            = dword ptr  8
.text:0000013C arg_4           = dword ptr  0Ch
.text:0000013C arg_8           = dword ptr  10h
.text:0000013C
.text:0000013C                 push    ebp
.text:0000013D                 mov     ebp, esp
.text:0000013F                 sub     esp, 24h
.text:00000142                 mov     eax, 0CCCCCCCCh
.text:00000147                 mov     [ebp+var_24], eax
.text:0000014A                 mov     [ebp+var_20], eax
.text:0000014D                 mov     [ebp+var_1C], eax
.text:00000150                 mov     [ebp+var_18], eax
.text:00000153                 mov     [ebp+var_14], eax
.text:00000156                 mov     [ebp+var_10], eax
.text:00000159                 mov     [ebp+var_C], eax
.text:0000015C                 mov     [ebp+var_8], eax
.text:0000015F                 mov     [ebp+var_4], eax
.text:00000162                 lea     ecx, [ebp+var_14] ; this
.text:00000165                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000016A                 mov     eax, [ebp+arg_4]
.text:0000016D                 mov     [ebp+var_24], eax
.text:00000170                 mov     ecx, [ebp+var_24]
.text:00000173                 sub     ecx, 26h ; '&'
.text:00000176                 mov     [ebp+var_24], ecx
.text:00000179                 cmp     [ebp+var_24], 28h ; '(' ; switch 41 cases
.text:0000017D                 ja      $LN13           ; jumptable 0000018D default case
.text:00000183                 mov     edx, [ebp+var_24]
.text:00000186                 movzx   eax, ds:$LN17[edx]
.text:0000018D                 jmp     ds:$LN21[eax*4] ; switch jump
.text:00000194 ; ---------------------------------------------------------------------------
.text:00000194
.text:00000194 $LN12:                                  ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51j
.text:00000194                                         ; DATA XREF: .text:$LN21o
.text:00000194                 mov     ecx, [ebp+this] ; jumptable 0000018D case 6
.text:00000197                 movzx   edx, byte ptr [ecx+20h]
.text:0000019B                 test    edx, edx
.text:0000019D                 jz      short loc_1B2
.text:0000019F                 mov     eax, [ebp+this]
.text:000001A2                 mov     ecx, [eax+2Ch]
.text:000001A5                 push    ecx
.text:000001A6                 mov     edx, [eax+28h]
.text:000001A9                 push    edx
.text:000001AA                 lea     ecx, [ebp+var_14]
.text:000001AD                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000001B2
.text:000001B2 loc_1B2:                                ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+61j
.text:000001B2                 jmp     $LN13           ; jumptable 0000018D default case
.text:000001B7 ; ---------------------------------------------------------------------------
.text:000001B7
.text:000001B7 $LN10:                                  ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51j
.text:000001B7                                         ; DATA XREF: .text:$LN21o
.text:000001B7                 mov     eax, [ebp+this] ; jumptable 0000018D case 40
.text:000001BA                 movzx   ecx, byte ptr [eax+21h]
.text:000001BE                 test    ecx, ecx
.text:000001C0                 jz      short loc_1D5
.text:000001C2                 mov     edx, [ebp+this]
.text:000001C5                 mov     eax, [edx+34h]
.text:000001C8                 push    eax
.text:000001C9                 mov     ecx, [edx+30h]
.text:000001CC                 push    ecx
.text:000001CD                 lea     ecx, [ebp+var_14]
.text:000001D0                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000001D5
.text:000001D5 loc_1D5:                                ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+84j
.text:000001D5                 jmp     $LN13           ; jumptable 0000018D default case
.text:000001DA ; ---------------------------------------------------------------------------
.text:000001DA
.text:000001DA $LN8:                                   ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51j
.text:000001DA                                         ; DATA XREF: .text:$LN21o
.text:000001DA                 mov     edx, [ebp+this] ; jumptable 0000018D case 36
.text:000001DD                 movzx   eax, byte ptr [edx+22h]
.text:000001E1                 test    eax, eax
.text:000001E3                 jz      short loc_1F8
.text:000001E5                 mov     ecx, [ebp+this]
.text:000001E8                 mov     edx, [ecx+3Ch]
.text:000001EB                 push    edx
.text:000001EC                 mov     eax, [ecx+38h]
.text:000001EF                 push    eax
.text:000001F0                 lea     ecx, [ebp+var_14]
.text:000001F3                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000001F8
.text:000001F8 loc_1F8:                                ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+A7j
.text:000001F8                 jmp     short $LN13     ; jumptable 0000018D default case
.text:000001FA ; ---------------------------------------------------------------------------
.text:000001FA
.text:000001FA $LN6:                                   ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51j
.text:000001FA                                         ; DATA XREF: .text:$LN21o
.text:000001FA                 mov     ecx, [ebp+this] ; jumptable 0000018D case 0
.text:000001FD                 movzx   edx, byte ptr [ecx+23h]
.text:00000201                 test    edx, edx
.text:00000203                 jz      short loc_218
.text:00000205                 mov     eax, [ebp+this]
.text:00000208                 mov     ecx, [eax+44h]
.text:0000020B                 push    ecx
.text:0000020C                 mov     edx, [eax+40h]
.text:0000020F                 push    edx
.text:00000210                 lea     ecx, [ebp+var_14]
.text:00000213                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000218
.text:00000218 loc_218:                                ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+C7j
.text:00000218                 jmp     short $LN13     ; jumptable 0000018D default case
.text:0000021A ; ---------------------------------------------------------------------------
.text:0000021A
.text:0000021A $LN4:                                   ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51j
.text:0000021A                                         ; DATA XREF: .text:$LN21o
.text:0000021A                 mov     [ebp+var_1C], 0 ; jumptable 0000018D case 33
.text:00000221                 mov     eax, [ebp+this]
.text:00000224                 movzx   ecx, byte ptr [eax+1Ch]
.text:00000228                 test    ecx, ecx
.text:0000022A                 jnz     short loc_235
.text:0000022C                 mov     edx, [ebp+var_1C]
.text:0000022F                 or      edx, 1
.text:00000232                 mov     [ebp+var_1C], edx
.text:00000235
.text:00000235 loc_235:                                ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+EEj
.text:00000235                 mov     eax, [ebp+this]
.text:00000238                 movzx   ecx, byte ptr [eax+1Fh]
.text:0000023C                 test    ecx, ecx
.text:0000023E                 jz      short loc_249
.text:00000240                 mov     edx, [ebp+var_1C]
.text:00000243                 or      edx, 20h
.text:00000246                 mov     [ebp+var_1C], edx
.text:00000249
.text:00000249 loc_249:                                ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+102j
.text:00000249                 mov     eax, [ebp+this]
.text:0000024C                 movzx   ecx, byte ptr [eax+1Eh]
.text:00000250                 test    ecx, ecx
.text:00000252                 jz      short loc_25D
.text:00000254                 mov     edx, [ebp+var_1C]
.text:00000257                 or      edx, 40h
.text:0000025A                 mov     [ebp+var_1C], edx
.text:0000025D
.text:0000025D loc_25D:                                ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+116j
.text:0000025D                 mov     eax, [ebp+var_1C]
.text:00000260                 push    eax
.text:00000261                 lea     ecx, [ebp+var_14]
.text:00000264                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000269
.text:00000269 $LN13:                                  ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+41j
.text:00000269                                         ; NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51j ...
.text:00000269                 mov     ecx, [ebp+arg_8] ; jumptable 0000018D default case
.text:0000026C                 push    ecx             ; struct tagPROPVARIANT *
.text:0000026D                 lea     ecx, [ebp+var_14] ; this
.text:00000270                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000275                 mov     [ebp+var_20], 0
.text:0000027C                 lea     ecx, [ebp+var_14] ; this
.text:0000027F                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000284                 mov     eax, [ebp+var_20]
.text:00000287                 push    edx
.text:00000288                 mov     ecx, ebp
.text:0000028A                 push    eax
.text:0000028B                 lea     edx, $LN20
.text:00000291                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000296                 pop     eax
.text:00000297                 pop     edx
.text:00000298                 add     esp, 24h
.text:0000029B                 cmp     ebp, esp
.text:0000029D                 call    __RTC_CheckEsp
.text:000002A2                 mov     esp, ebp
.text:000002A4                 pop     ebp
.text:000002A5                 retn    0Ch
.text:000002A5 ?GetArchiveProperty@CHandler@NBz2@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:000002A5
.text:000002A5 ; ---------------------------------------------------------------------------
.text:000002A8 $LN20           dd 1                    ; DATA XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+14Fo
.text:000002AC                 dd offset $LN19
.text:000002B0 $LN19           dd 0FFFFFFECh, 10h      ; DATA XREF: .text:000002ACo
.text:000002B8                 dd offset $LN18         ; "prop"
.text:000002BC $LN18           db 'prop',0             ; DATA XREF: .text:000002B8o
.text:000002C1                 align 4
.text:000002C4 $LN21           dd offset $LN6          ; DATA XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51r
.text:000002C4                 dd offset $LN12         ; jump table for switch statement
.text:000002C4                 dd offset $LN4
.text:000002C4                 dd offset $LN8
.text:000002C4                 dd offset $LN10
.text:000002C4                 dd offset $LN13
.text:000002DC $LN17           db      0,     5,     5,     5
.text:000002DC                                         ; DATA XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Ar
.text:000002DC                 db      5,     5,     1,     5 ; indirect table for switch statement
.text:000002DC                 db      5,     5,     5,     5
.text:000002DC                 db      5,     5,     5,     5
.text:000002DC                 db      5,     5,     5,     5
.text:000002DC                 db      5,     5,     5,     5
.text:000002DC                 db      5,     5,     5,     5
.text:000002DC                 db      5,     5,     5,     5
.text:000002DC                 db      5,     2,     5,     5
.text:000002DC                 db      3,     5,     5,     5
.text:000002DC                 db      4
.text:00000305                 db 7 dup(0CCh)
.text:0000030C
.text:0000030C ; =============== S U B R O U T I N E =======================================
.text:0000030C
.text:0000030C ; Attributes: bp-based frame
.text:0000030C
.text:0000030C ; __int32 __stdcall NArchive::NBz2::CHandler::GetNumberOfItems(NArchive::NBz2::CHandler *this, unsigned int *)
.text:0000030C                 public ?GetNumberOfItems@CHandler@NBz2@NArchive@@UAGJPAI@Z
.text:0000030C ?GetNumberOfItems@CHandler@NBz2@NArchive@@UAGJPAI@Z proc near
.text:0000030C                                         ; DATA XREF: .rdata:000026CCo
.text:0000030C
.text:0000030C this            = dword ptr  8
.text:0000030C arg_4           = dword ptr  0Ch
.text:0000030C
.text:0000030C                 push    ebp
.text:0000030D                 mov     ebp, esp
.text:0000030F                 mov     eax, [ebp+arg_4]
.text:00000312                 mov     dword ptr [eax], 1
.text:00000318                 xor     eax, eax
.text:0000031A                 pop     ebp
.text:0000031B                 retn    8
.text:0000031B ?GetNumberOfItems@CHandler@NBz2@NArchive@@UAGJPAI@Z endp
.text:0000031B
.text:0000031B ; ---------------------------------------------------------------------------
.text:0000031E                 db 0Eh dup(0CCh)
.text:0000032C
.text:0000032C ; =============== S U B R O U T I N E =======================================
.text:0000032C
.text:0000032C ; Attributes: bp-based frame
.text:0000032C
.text:0000032C ; __int32 __stdcall NArchive::NBz2::CHandler::GetProperty(NArchive::NBz2::CHandler *this, unsigned int, unsigned __int32, struct tagPROPVARIANT *)
.text:0000032C                 public ?GetProperty@CHandler@NBz2@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:0000032C ?GetProperty@CHandler@NBz2@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text:0000032C                                         ; DATA XREF: .rdata:000026D0o
.text:0000032C
.text:0000032C var_20          = dword ptr -20h
.text:0000032C var_1C          = dword ptr -1Ch
.text:0000032C var_18          = dword ptr -18h
.text:0000032C var_14          = dword ptr -14h
.text:0000032C var_10          = dword ptr -10h
.text:0000032C var_C           = dword ptr -0Ch
.text:0000032C var_8           = dword ptr -8
.text:0000032C var_4           = dword ptr -4
.text:0000032C this            = dword ptr  8
.text:0000032C arg_8           = dword ptr  10h
.text:0000032C arg_C           = dword ptr  14h
.text:0000032C
.text:0000032C                 push    ebp
.text:0000032D                 mov     ebp, esp
.text:0000032F                 sub     esp, 20h
.text:00000332                 mov     eax, 0CCCCCCCCh
.text:00000337                 mov     [ebp+var_20], eax
.text:0000033A                 mov     [ebp+var_1C], eax
.text:0000033D                 mov     [ebp+var_18], eax
.text:00000340                 mov     [ebp+var_14], eax
.text:00000343                 mov     [ebp+var_10], eax
.text:00000346                 mov     [ebp+var_C], eax
.text:00000349                 mov     [ebp+var_8], eax
.text:0000034C                 mov     [ebp+var_4], eax
.text:0000034F                 lea     ecx, [ebp+var_14] ; this
.text:00000352                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000357                 mov     eax, [ebp+arg_8]
.text:0000035A                 mov     [ebp+var_20], eax
.text:0000035D                 cmp     [ebp+var_20], 7
.text:00000361                 jz      short loc_38B
.text:00000363                 cmp     [ebp+var_20], 8
.text:00000367                 jz      short loc_36B
.text:00000369                 jmp     short loc_3A9
.text:0000036B ; ---------------------------------------------------------------------------
.text:0000036B
.text:0000036B loc_36B:                                ; CODE XREF: NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+3Bj
.text:0000036B                 mov     ecx, [ebp+this]
.text:0000036E                 movzx   edx, byte ptr [ecx+20h]
.text:00000372                 test    edx, edx
.text:00000374                 jz      short loc_389
.text:00000376                 mov     eax, [ebp+this]
.text:00000379                 mov     ecx, [eax+2Ch]
.text:0000037C                 push    ecx
.text:0000037D                 mov     edx, [eax+28h]
.text:00000380                 push    edx
.text:00000381                 lea     ecx, [ebp+var_14]
.text:00000384                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000389
.text:00000389 loc_389:                                ; CODE XREF: NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+48j
.text:00000389                 jmp     short loc_3A9
.text:0000038B ; ---------------------------------------------------------------------------
.text:0000038B
.text:0000038B loc_38B:                                ; CODE XREF: NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+35j
.text:0000038B                 mov     eax, [ebp+this]
.text:0000038E                 movzx   ecx, byte ptr [eax+21h]
.text:00000392                 test    ecx, ecx
.text:00000394                 jz      short loc_3A9
.text:00000396                 mov     edx, [ebp+this]
.text:00000399                 mov     eax, [edx+34h]
.text:0000039C                 push    eax
.text:0000039D                 mov     ecx, [edx+30h]
.text:000003A0                 push    ecx
.text:000003A1                 lea     ecx, [ebp+var_14]
.text:000003A4                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000003A9
.text:000003A9 loc_3A9:                                ; CODE XREF: NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+3Dj
.text:000003A9                                         ; NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_389j ...
.text:000003A9                 mov     edx, [ebp+arg_C]
.text:000003AC                 push    edx             ; struct tagPROPVARIANT *
.text:000003AD                 lea     ecx, [ebp+var_14] ; this
.text:000003B0                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:000003B5                 mov     [ebp+var_1C], 0
.text:000003BC                 lea     ecx, [ebp+var_14] ; this
.text:000003BF                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000003C4                 mov     eax, [ebp+var_1C]
.text:000003C7                 push    edx
.text:000003C8                 mov     ecx, ebp
.text:000003CA                 push    eax
.text:000003CB                 lea     edx, $LN11
.text:000003D1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003D6                 pop     eax
.text:000003D7                 pop     edx
.text:000003D8                 add     esp, 20h
.text:000003DB                 cmp     ebp, esp
.text:000003DD                 call    __RTC_CheckEsp
.text:000003E2                 mov     esp, ebp
.text:000003E4                 pop     ebp
.text:000003E5                 retn    10h
.text:000003E5 ?GetProperty@CHandler@NBz2@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text:000003E5
.text:000003E5 ; ---------------------------------------------------------------------------
.text:000003E8 $LN11           dd 1                    ; DATA XREF: NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+9Fo
.text:000003EC                 dd offset $LN10_0
.text:000003F0 $LN10_0         dd 0FFFFFFECh, 10h      ; DATA XREF: .text:000003ECo
.text:000003F8                 dd offset $LN9          ; "prop"
.text:000003FC $LN9            db 'prop',0             ; DATA XREF: .text:000003F8o
.text:00000401                 db 0Bh dup(0CCh)
.text:0000040C
.text:0000040C ; =============== S U B R O U T I N E =======================================
.text:0000040C
.text:0000040C ; Attributes: bp-based frame
.text:0000040C
.text:0000040C ; __stdcall IsArc_BZip2(x, x)
.text:0000040C _IsArc_BZip2@8  proc near               ; CODE XREF: NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+8Dp
.text:0000040C                                         ; DATA XREF: .rdata:00000058o
.text:0000040C
.text:0000040C arg_0           = dword ptr  8
.text:0000040C arg_4           = dword ptr  0Ch
.text:0000040C
.text:0000040C                 push    ebp             ; unsigned __int8 *
.text:0000040D                 mov     ebp, esp
.text:0000040F                 cmp     [ebp+arg_4], 0Ah
.text:00000413                 jnb     short loc_41C
.text:00000415                 mov     eax, 2
.text:0000041A                 jmp     short loc_494
.text:0000041C ; ---------------------------------------------------------------------------
.text:0000041C
.text:0000041C loc_41C:                                ; CODE XREF: IsArc_BZip2(x,x)+7j
.text:0000041C                 mov     eax, [ebp+arg_0]
.text:0000041F                 movzx   ecx, byte ptr [eax]
.text:00000422                 cmp     ecx, 42h ; 'B'
.text:00000425                 jnz     short loc_457
.text:00000427                 mov     edx, [ebp+arg_0]
.text:0000042A                 movzx   eax, byte ptr [edx+1]
.text:0000042E                 cmp     eax, 5Ah ; 'Z'
.text:00000431                 jnz     short loc_457
.text:00000433                 mov     ecx, [ebp+arg_0]
.text:00000436                 movzx   edx, byte ptr [ecx+2]
.text:0000043A                 cmp     edx, 68h ; 'h'
.text:0000043D                 jnz     short loc_457
.text:0000043F                 mov     eax, [ebp+arg_0]
.text:00000442                 movzx   ecx, byte ptr [eax+3]
.text:00000446                 cmp     ecx, 31h ; '1'
.text:00000449                 jl      short loc_457
.text:0000044B                 mov     edx, [ebp+arg_0]
.text:0000044E                 movzx   eax, byte ptr [edx+3]
.text:00000452                 cmp     eax, 39h ; '9'
.text:00000455                 jle     short loc_45B
.text:00000457
.text:00000457 loc_457:                                ; CODE XREF: IsArc_BZip2(x,x)+19j
.text:00000457                                         ; IsArc_BZip2(x,x)+25j ...
.text:00000457                 xor     eax, eax
.text:00000459                 jmp     short loc_494
.text:0000045B ; ---------------------------------------------------------------------------
.text:0000045B
.text:0000045B loc_45B:                                ; CODE XREF: IsArc_BZip2(x,x)+49j
.text:0000045B                 mov     ecx, [ebp+arg_0]
.text:0000045E                 add     ecx, 4
.text:00000461                 mov     [ebp+arg_0], ecx
.text:00000464                 mov     edx, [ebp+arg_0]
.text:00000467                 push    edx             ; unsigned __int8 *
.text:00000468                 call    ?IsBlockSig@NBZip2@NCompress@@YG_NPBE@Z ; NCompress::NBZip2::IsBlockSig(uchar const *)
.text:0000046D                 movzx   eax, al
.text:00000470                 test    eax, eax
.text:00000472                 jz      short loc_47B
.text:00000474                 mov     eax, 1
.text:00000479                 jmp     short loc_494
.text:0000047B ; ---------------------------------------------------------------------------
.text:0000047B
.text:0000047B loc_47B:                                ; CODE XREF: IsArc_BZip2(x,x)+66j
.text:0000047B                 mov     ecx, [ebp+arg_0]
.text:0000047E                 push    ecx             ; this
.text:0000047F                 call    ?IsEndSig@NBZip2@NCompress@@YG_NPBE@Z ; NCompress::NBZip2::IsEndSig(uchar const *)
.text:00000484                 movzx   edx, al
.text:00000487                 test    edx, edx
.text:00000489                 jz      short loc_492
.text:0000048B                 mov     eax, 1
.text:00000490                 jmp     short loc_494
.text:00000492 ; ---------------------------------------------------------------------------
.text:00000492
.text:00000492 loc_492:                                ; CODE XREF: IsArc_BZip2(x,x)+7Dj
.text:00000492                 xor     eax, eax
.text:00000494
.text:00000494 loc_494:                                ; CODE XREF: IsArc_BZip2(x,x)+Ej
.text:00000494                                         ; IsArc_BZip2(x,x)+4Dj ...
.text:00000494                 cmp     ebp, esp
.text:00000496                 call    __RTC_CheckEsp
.text:0000049B                 pop     ebp
.text:0000049C                 retn    8
.text:0000049C _IsArc_BZip2@8  endp ; sp-analysis failed
.text:0000049C
.text:0000049C ; ---------------------------------------------------------------------------
.text:0000049F                 db 0Dh dup(0CCh)
.text:000004AC
.text:000004AC ; =============== S U B R O U T I N E =======================================
.text:000004AC
.text:000004AC ; Attributes: bp-based frame
.text:000004AC
.text:000004AC ; __int32 __cdecl NArchive::NBz2::CHandler::Open(NArchive::NBz2::CHandler *this, struct IInStream *, const unsigned __int64 *, struct IArchiveOpenCallback *)
.text:000004AC                 public ?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000004AC ?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text:000004AC                                         ; DATA XREF: .rdata:000026C4o
.text:000004AC
.text:000004AC var_30          = dword ptr -30h
.text:000004AC var_2C          = dword ptr -2Ch
.text:000004AC var_28          = dword ptr -28h
.text:000004AC var_24          = dword ptr -24h
.text:000004AC var_20          = dword ptr -20h
.text:000004AC var_1C          = dword ptr -1Ch
.text:000004AC var_18          = dword ptr -18h
.text:000004AC var_14          = dword ptr -14h
.text:000004AC var_10          = dword ptr -10h
.text:000004AC var_C           = dword ptr -0Ch
.text:000004AC var_4           = dword ptr -4
.text:000004AC this            = dword ptr  8
.text:000004AC arg_4           = dword ptr  0Ch
.text:000004AC
.text:000004AC ; FUNCTION CHUNK AT .text:0000059F SIZE 00000039 BYTES
.text:000004AC
.text:000004AC                 push    ebp
.text:000004AD                 mov     ebp, esp
.text:000004AF                 push    0FFFFFFFFh
.text:000004B1                 push    offset __ehhandler$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000004B6                 mov     eax, large fs:0
.text:000004BC                 push    eax
.text:000004BD                 push    ecx
.text:000004BE                 sub     esp, 20h
.text:000004C1                 push    ebx
.text:000004C2                 push    esi
.text:000004C3                 push    edi
.text:000004C4                 mov     eax, 0CCCCCCCCh
.text:000004C9                 mov     [ebp+var_30], eax
.text:000004CC                 mov     [ebp+var_2C], eax
.text:000004CF                 mov     [ebp+var_28], eax
.text:000004D2                 mov     [ebp+var_24], eax
.text:000004D5                 mov     [ebp+var_20], eax
.text:000004D8                 mov     [ebp+var_1C], eax
.text:000004DB                 mov     [ebp+var_18], eax
.text:000004DE                 mov     [ebp+var_14], eax
.text:000004E1                 mov     eax, dword ptr ds:___security_cookie
.text:000004E6                 xor     eax, ebp
.text:000004E8                 mov     [ebp+var_14], eax
.text:000004EB                 push    eax
.text:000004EC                 lea     eax, [ebp+var_C]
.text:000004EF                 mov     large fs:0, eax
.text:000004F5                 mov     [ebp+var_10], esp
.text:000004F8                 mov     [ebp+var_4], 0
.text:000004FF                 mov     esi, esp
.text:00000501                 mov     eax, [ebp+this]
.text:00000504                 push    eax
.text:00000505                 mov     ecx, [ebp+this]
.text:00000508                 mov     edx, [ecx]
.text:0000050A                 mov     eax, [edx+10h]
.text:0000050D                 call    eax
.text:0000050F                 cmp     esi, esp
.text:00000511                 call    __RTC_CheckEsp
.text:00000516                 push    0Ah             ; unsigned int
.text:00000518                 lea     ecx, [ebp+var_24]
.text:0000051B                 push    ecx             ; void *
.text:0000051C                 mov     edx, [ebp+arg_4]
.text:0000051F                 push    edx             ; struct ISequentialInStream *
.text:00000520                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:00000525                 mov     [ebp+var_2C], eax
.text:00000528                 cmp     [ebp+var_2C], 0
.text:0000052C                 jz      short loc_533
.text:0000052E                 mov     eax, [ebp+var_2C]
.text:00000531                 jmp     short loc_59F
.text:00000533 ; ---------------------------------------------------------------------------
.text:00000533
.text:00000533 loc_533:                                ; CODE XREF: NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+80j
.text:00000533                 push    0Ah
.text:00000535                 lea     eax, [ebp+var_24]
.text:00000538                 push    eax
.text:00000539                 call    _IsArc_BZip2@8  ; IsArc_BZip2(x,x)
.text:0000053E                 test    eax, eax
.text:00000540                 jnz     short loc_549
.text:00000542                 mov     eax, 1
.text:00000547                 jmp     short loc_59F
.text:00000549 ; ---------------------------------------------------------------------------
.text:00000549
.text:00000549 loc_549:                                ; CODE XREF: NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+94j
.text:00000549                 mov     ecx, [ebp+this]
.text:0000054C                 mov     byte ptr [ecx+1Ch], 1
.text:00000550                 mov     edx, [ebp+arg_4]
.text:00000553                 push    edx
.text:00000554                 mov     ecx, [ebp+this]
.text:00000557                 add     ecx, 14h
.text:0000055A                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:0000055F                 mov     eax, [ebp+arg_4]
.text:00000562                 push    eax
.text:00000563                 mov     ecx, [ebp+this]
.text:00000566                 add     ecx, 18h
.text:00000569                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:0000056E                 mov     ecx, [ebp+this]
.text:00000571                 mov     byte ptr [ecx+1Dh], 1
.text:00000575                 xor     eax, eax
.text:00000577                 jmp     short loc_59F
.text:00000577 ?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text:00000577
.text:00000579
.text:00000579 ; =============== S U B R O U T I N E =======================================
.text:00000579
.text:00000579
.text:00000579 __catch$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 proc near
.text:00000579                                         ; DATA XREF: .xdata$x:00001DB0o
.text:00000579                 mov     dword ptr [ebp-30h], 8007000Eh
.text:00000580                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000587                 mov     eax, offset $LN9_0
.text:0000058C                 retn
.text:0000058C __catch$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 endp
.text:0000058C
.text:0000058D ; ---------------------------------------------------------------------------
.text:0000058D                 mov     eax, offset __tryend$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
.text:00000592                 retn
.text:00000593 ; ---------------------------------------------------------------------------
.text:00000593
.text:00000593 __tryend$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
.text:00000593                                         ; DATA XREF: .text:0000058Do
.text:00000593                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000059A                 jmp     short loc_59F
.text:0000059C ; ---------------------------------------------------------------------------
.text:0000059C
.text:0000059C $LN9_0:                                 ; DATA XREF: __catch$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0+Eo
.text:0000059C                 mov     eax, [ebp-30h]
.text:0000059F ; START OF FUNCTION CHUNK FOR ?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:0000059F
.text:0000059F loc_59F:                                ; CODE XREF: NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+85j
.text:0000059F                                         ; NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+9Bj ...
.text:0000059F                 push    edx
.text:000005A0                 mov     ecx, ebp
.text:000005A2                 push    eax
.text:000005A3                 lea     edx, $LN14
.text:000005A9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000005AE                 pop     eax
.text:000005AF                 pop     edx
.text:000005B0                 mov     ecx, [ebp+var_C]
.text:000005B3                 mov     large fs:0, ecx
.text:000005BA                 pop     ecx
.text:000005BB                 pop     edi
.text:000005BC                 pop     esi
.text:000005BD                 pop     ebx
.text:000005BE                 mov     ecx, [ebp+var_14]
.text:000005C1                 xor     ecx, ebp
.text:000005C3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000005C8                 add     esp, 30h
.text:000005CB                 cmp     ebp, esp
.text:000005CD                 call    __RTC_CheckEsp
.text:000005D2                 mov     esp, ebp
.text:000005D4                 pop     ebp
.text:000005D5                 retn    10h
.text:000005D5 ; END OF FUNCTION CHUNK FOR ?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000005D5 ; ---------------------------------------------------------------------------
.text:000005D8 $LN14           dd 1                    ; DATA XREF: NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+F7o
.text:000005DC                 dd offset $LN13_0
.text:000005E0 $LN13_0         dd 0FFFFFFDCh, 0Ah      ; DATA XREF: .text:000005DCo
.text:000005E8                 dd offset $LN11_0
.text:000005EC $LN11_0         dd 667562h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000005E8o
.text:000005FC
.text:000005FC ; =============== S U B R O U T I N E =======================================
.text:000005FC
.text:000005FC ; Attributes: bp-based frame
.text:000005FC
.text:000005FC ; __int32 __stdcall NArchive::NBz2::CHandler::OpenSeq(NArchive::NBz2::CHandler *this, struct ISequentialInStream *)
.text:000005FC                 public ?OpenSeq@CHandler@NBz2@NArchive@@UAGJPAUISequentialInStream@@@Z
.text:000005FC ?OpenSeq@CHandler@NBz2@NArchive@@UAGJPAUISequentialInStream@@@Z proc near
.text:000005FC                                         ; DATA XREF: .rdata:000026B0o
.text:000005FC
.text:000005FC this            = dword ptr  8
.text:000005FC arg_4           = dword ptr  0Ch
.text:000005FC
.text:000005FC                 push    ebp
.text:000005FD                 mov     ebp, esp
.text:000005FF                 push    esi
.text:00000600                 mov     eax, [ebp+this]
.text:00000603                 sub     eax, 4
.text:00000606                 mov     ecx, [ebp+this]
.text:00000609                 mov     edx, [ecx-4]
.text:0000060C                 mov     esi, esp
.text:0000060E                 push    eax
.text:0000060F                 mov     eax, [edx+10h]
.text:00000612                 call    eax
.text:00000614                 cmp     esi, esp
.text:00000616                 call    __RTC_CheckEsp
.text:0000061B                 mov     ecx, [ebp+this]
.text:0000061E                 mov     byte ptr [ecx+18h], 1
.text:00000622                 mov     edx, [ebp+arg_4]
.text:00000625                 push    edx
.text:00000626                 mov     ecx, [ebp+this]
.text:00000629                 add     ecx, 14h
.text:0000062C                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00000631                 xor     eax, eax
.text:00000633                 pop     esi
.text:00000634                 cmp     ebp, esp
.text:00000636                 call    __RTC_CheckEsp
.text:0000063B                 pop     ebp
.text:0000063C                 retn    8
.text:0000063C ?OpenSeq@CHandler@NBz2@NArchive@@UAGJPAUISequentialInStream@@@Z endp
.text:0000063C
.text:0000063C ; ---------------------------------------------------------------------------
.text:0000063F                 db 0Dh dup(0CCh)
.text:0000064C
.text:0000064C ; =============== S U B R O U T I N E =======================================
.text:0000064C
.text:0000064C ; Attributes: bp-based frame
.text:0000064C
.text:0000064C ; __int32 __stdcall NArchive::NBz2::CHandler::Close(NArchive::NBz2::CHandler *this)
.text:0000064C                 public ?Close@CHandler@NBz2@NArchive@@UAGJXZ
.text:0000064C ?Close@CHandler@NBz2@NArchive@@UAGJXZ proc near ; DATA XREF: .rdata:000026C8o
.text:0000064C
.text:0000064C this            = dword ptr  8
.text:0000064C
.text:0000064C                 push    ebp
.text:0000064D                 mov     ebp, esp
.text:0000064F                 mov     eax, [ebp+this]
.text:00000652                 mov     byte ptr [eax+1Ch], 0
.text:00000656                 mov     ecx, [ebp+this]
.text:00000659                 mov     byte ptr [ecx+1Dh], 0
.text:0000065D                 mov     edx, [ebp+this]
.text:00000660                 mov     byte ptr [edx+1Eh], 0
.text:00000664                 mov     eax, [ebp+this]
.text:00000667                 mov     byte ptr [eax+1Fh], 0
.text:0000066B                 mov     ecx, [ebp+this]
.text:0000066E                 mov     byte ptr [ecx+20h], 0
.text:00000672                 mov     edx, [ebp+this]
.text:00000675                 mov     byte ptr [edx+21h], 0
.text:00000679                 mov     eax, [ebp+this]
.text:0000067C                 mov     byte ptr [eax+22h], 0
.text:00000680                 mov     ecx, [ebp+this]
.text:00000683                 mov     byte ptr [ecx+23h], 0
.text:00000687                 mov     edx, [ebp+this]
.text:0000068A                 mov     dword ptr [edx+28h], 0
.text:00000691                 mov     dword ptr [edx+2Ch], 0
.text:00000698                 mov     ecx, [ebp+this]
.text:0000069B                 add     ecx, 18h
.text:0000069E                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:000006A3                 mov     ecx, [ebp+this]
.text:000006A6                 add     ecx, 14h
.text:000006A9                 call    ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release(void)
.text:000006AE                 xor     eax, eax
.text:000006B0                 cmp     ebp, esp
.text:000006B2                 call    __RTC_CheckEsp
.text:000006B7                 pop     ebp
.text:000006B8                 retn    4
.text:000006B8 ?Close@CHandler@NBz2@NArchive@@UAGJXZ endp
.text:000006B8
.text:000006B8 ; ---------------------------------------------------------------------------
.text:000006BB                 align 4
.text:000006BC
.text:000006BC ; =============== S U B R O U T I N E =======================================
.text:000006BC
.text:000006BC ; Attributes: bp-based frame
.text:000006BC
.text:000006BC ; __int32 __cdecl NArchive::NBz2::CHandler::Extract(NArchive::NBz2::CHandler *this, const unsigned int *, unsigned int, int, struct IArchiveExtractCallback *)
.text:000006BC                 public ?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000006BC ?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text:000006BC                                         ; DATA XREF: .rdata:000026D4o
.text:000006BC
.text:000006BC var_160         = dword ptr -160h
.text:000006BC var_15C         = dword ptr -15Ch
.text:000006BC var_158         = dword ptr -158h
.text:000006BC var_154         = dword ptr -154h
.text:000006BC var_150         = dword ptr -150h
.text:000006BC var_149         = byte ptr -149h
.text:000006BC var_148         = dword ptr -148h
.text:000006BC var_144         = dword ptr -144h
.text:000006BC var_140         = dword ptr -140h
.text:000006BC var_13C         = dword ptr -13Ch
.text:000006BC var_138         = dword ptr -138h
.text:000006BC var_134         = dword ptr -134h
.text:000006BC var_130         = dword ptr -130h
.text:000006BC var_12C         = dword ptr -12Ch
.text:000006BC var_128         = dword ptr -128h
.text:000006BC var_124         = dword ptr -124h
.text:000006BC var_120         = dword ptr -120h
.text:000006BC var_11C         = dword ptr -11Ch
.text:000006BC var_118         = dword ptr -118h
.text:000006BC var_114         = dword ptr -114h
.text:000006BC var_110         = dword ptr -110h
.text:000006BC var_10C         = dword ptr -10Ch
.text:000006BC var_108         = dword ptr -108h
.text:000006BC var_104         = dword ptr -104h
.text:000006BC var_100         = dword ptr -100h
.text:000006BC var_FC          = dword ptr -0FCh
.text:000006BC var_F8          = dword ptr -0F8h
.text:000006BC var_F4          = dword ptr -0F4h
.text:000006BC var_F0          = dword ptr -0F0h
.text:000006BC var_EA          = byte ptr -0EAh
.text:000006BC var_E9          = byte ptr -0E9h
.text:000006BC var_E8          = dword ptr -0E8h
.text:000006BC var_E4          = dword ptr -0E4h
.text:000006BC var_E0          = dword ptr -0E0h
.text:000006BC var_D8          = dword ptr -0D8h
.text:000006BC var_D0          = dword ptr -0D0h
.text:000006BC var_CC          = dword ptr -0CCh
.text:000006BC var_C8          = dword ptr -0C8h
.text:000006BC var_C4          = dword ptr -0C4h
.text:000006BC var_C0          = dword ptr -0C0h
.text:000006BC var_BC          = dword ptr -0BCh
.text:000006BC var_B8          = dword ptr -0B8h
.text:000006BC var_B4          = dword ptr -0B4h
.text:000006BC var_B0          = dword ptr -0B0h
.text:000006BC var_AC          = dword ptr -0ACh
.text:000006BC var_A8          = dword ptr -0A8h
.text:000006BC var_A4          = dword ptr -0A4h
.text:000006BC var_A0          = dword ptr -0A0h
.text:000006BC var_9C          = dword ptr -9Ch
.text:000006BC var_98          = dword ptr -98h
.text:000006BC var_88          = dword ptr -88h
.text:000006BC var_84          = dword ptr -84h
.text:000006BC var_80          = dword ptr -80h
.text:000006BC var_7C          = dword ptr -7Ch
.text:000006BC var_78          = dword ptr -78h
.text:000006BC var_74          = dword ptr -74h
.text:000006BC var_70          = dword ptr -70h
.text:000006BC var_6C          = dword ptr -6Ch
.text:000006BC var_68          = dword ptr -68h
.text:000006BC var_64          = dword ptr -64h
.text:000006BC var_5C          = byte ptr -5Ch
.text:000006BC var_54          = dword ptr -54h
.text:000006BC var_4C          = byte ptr -4Ch
.text:000006BC var_44          = dword ptr -44h
.text:000006BC var_40          = dword ptr -40h
.text:000006BC var_38          = byte ptr -38h
.text:000006BC var_30          = dword ptr -30h
.text:000006BC var_2C          = dword ptr -2Ch
.text:000006BC var_28          = dword ptr -28h
.text:000006BC var_24          = dword ptr -24h
.text:000006BC var_20          = dword ptr -20h
.text:000006BC var_18          = byte ptr -18h
.text:000006BC var_10          = dword ptr -10h
.text:000006BC var_C           = dword ptr -0Ch
.text:000006BC var_4           = dword ptr -4
.text:000006BC this            = dword ptr  8
.text:000006BC arg_4           = dword ptr  0Ch
.text:000006BC arg_8           = dword ptr  10h
.text:000006BC arg_C           = dword ptr  14h
.text:000006BC arg_10          = dword ptr  18h
.text:000006BC
.text:000006BC ; FUNCTION CHUNK AT .text:00000FD7 SIZE 00000009 BYTES
.text:000006BC ; FUNCTION CHUNK AT .text:00000FF4 SIZE 00000041 BYTES
.text:000006BC ; FUNCTION CHUNK AT .text:00001061 SIZE 00000032 BYTES
.text:000006BC
.text:000006BC                 push    ebp
.text:000006BD                 mov     ebp, esp
.text:000006BF                 push    0FFFFFFFFh
.text:000006C1                 push    offset __ehhandler$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000006C6                 mov     eax, large fs:0
.text:000006CC                 push    eax
.text:000006CD                 push    ecx
.text:000006CE                 sub     esp, 150h
.text:000006D4                 push    ebx
.text:000006D5                 push    esi
.text:000006D6                 push    edi
.text:000006D7                 lea     edi, [ebp+var_160]
.text:000006DD                 mov     ecx, 54h ; 'T'
.text:000006E2                 mov     eax, 0CCCCCCCCh
.text:000006E7                 rep stosd
.text:000006E9                 mov     eax, dword ptr ds:___security_cookie
.text:000006EE                 xor     eax, ebp
.text:000006F0                 push    eax
.text:000006F1                 lea     eax, [ebp+var_C]
.text:000006F4                 mov     large fs:0, eax
.text:000006FA                 mov     [ebp+var_10], esp
.text:000006FD                 mov     [ebp+var_4], 0
.text:00000704                 cmp     [ebp+arg_8], 0
.text:00000708                 jnz     short loc_711
.text:0000070A                 xor     eax, eax
.text:0000070C                 jmp     loc_1061
.text:00000711 ; ---------------------------------------------------------------------------
.text:00000711
.text:00000711 loc_711:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4Cj
.text:00000711                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:00000715                 jz      short loc_72F
.text:00000717                 cmp     [ebp+arg_8], 1
.text:0000071B                 jnz     short loc_725
.text:0000071D                 mov     eax, [ebp+arg_4]
.text:00000720                 cmp     dword ptr [eax], 0
.text:00000723                 jz      short loc_72F
.text:00000725
.text:00000725 loc_725:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5Fj
.text:00000725                 mov     eax, 80070057h
.text:0000072A                 jmp     loc_1061
.text:0000072F ; ---------------------------------------------------------------------------
.text:0000072F
.text:0000072F loc_72F:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+59j
.text:0000072F                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+67j
.text:0000072F                 mov     ecx, [ebp+this]
.text:00000732                 movzx   edx, byte ptr [ecx+20h]
.text:00000736                 test    edx, edx
.text:00000738                 jz      short loc_75C
.text:0000073A                 mov     esi, esp
.text:0000073C                 mov     eax, [ebp+this]
.text:0000073F                 mov     ecx, [eax+2Ch]
.text:00000742                 push    ecx
.text:00000743                 mov     edx, [eax+28h]
.text:00000746                 push    edx
.text:00000747                 mov     eax, [ebp+arg_10]
.text:0000074A                 push    eax
.text:0000074B                 mov     ecx, [ebp+arg_10]
.text:0000074E                 mov     edx, [ecx]
.text:00000750                 mov     eax, [edx+0Ch]
.text:00000753                 call    eax
.text:00000755                 cmp     esi, esp
.text:00000757                 call    __RTC_CheckEsp
.text:0000075C
.text:0000075C loc_75C:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7Cj
.text:0000075C                 lea     ecx, [ebp+var_18]
.text:0000075F                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00000764                 mov     [ebp+var_E0], eax
.text:0000076A                 mov     byte ptr [ebp+var_4], 1
.text:0000076E                 xor     ecx, ecx
.text:00000770                 cmp     [ebp+arg_C], 0
.text:00000774                 setnz   cl
.text:00000777                 mov     [ebp+var_20], ecx
.text:0000077A                 lea     ecx, [ebp+var_18]
.text:0000077D                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00000782                 mov     [ebp+var_E4], eax
.text:00000788                 mov     esi, esp
.text:0000078A                 mov     edx, [ebp+var_20]
.text:0000078D                 push    edx
.text:0000078E                 mov     eax, [ebp+var_E4]
.text:00000794                 push    eax
.text:00000795                 push    0
.text:00000797                 mov     ecx, [ebp+arg_10]
.text:0000079A                 push    ecx
.text:0000079B                 mov     edx, [ebp+arg_10]
.text:0000079E                 mov     eax, [edx]
.text:000007A0                 mov     ecx, [eax+14h]
.text:000007A3                 call    ecx
.text:000007A5                 cmp     esi, esp
.text:000007A7                 call    __RTC_CheckEsp
.text:000007AC                 mov     [ebp+var_E8], eax
.text:000007B2                 mov     edx, [ebp+var_E8]
.text:000007B8                 mov     [ebp+var_24], edx
.text:000007BB                 cmp     [ebp+var_24], 0
.text:000007BF                 jz      short loc_7E1
.text:000007C1                 mov     eax, [ebp+var_24]
.text:000007C4                 mov     [ebp+var_98], eax
.text:000007CA                 mov     byte ptr [ebp+var_4], 0
.text:000007CE                 lea     ecx, [ebp+var_18]
.text:000007D1                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000007D6                 mov     eax, [ebp+var_98]
.text:000007DC                 jmp     loc_1061
.text:000007E1 ; ---------------------------------------------------------------------------
.text:000007E1
.text:000007E1 loc_7E1:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+103j
.text:000007E1                 cmp     [ebp+arg_C], 0
.text:000007E5                 jnz     short loc_821
.text:000007E7                 lea     ecx, [ebp+var_18]
.text:000007EA                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:000007EF                 mov     [ebp+var_E9], al
.text:000007F5                 movzx   ecx, [ebp+var_E9]
.text:000007FC                 test    ecx, ecx
.text:000007FE                 jz      short loc_821
.text:00000800                 mov     [ebp+var_9C], 0
.text:0000080A                 mov     byte ptr [ebp+var_4], 0
.text:0000080E                 lea     ecx, [ebp+var_18]
.text:00000811                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000816                 mov     eax, [ebp+var_9C]
.text:0000081C                 jmp     loc_1061
.text:00000821 ; ---------------------------------------------------------------------------
.text:00000821
.text:00000821 loc_821:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+129j
.text:00000821                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+142j
.text:00000821                 mov     esi, esp
.text:00000823                 mov     edx, [ebp+var_20]
.text:00000826                 push    edx
.text:00000827                 mov     eax, [ebp+arg_10]
.text:0000082A                 push    eax
.text:0000082B                 mov     ecx, [ebp+arg_10]
.text:0000082E                 mov     edx, [ecx]
.text:00000830                 mov     eax, [edx+18h]
.text:00000833                 call    eax
.text:00000835                 cmp     esi, esp
.text:00000837                 call    __RTC_CheckEsp
.text:0000083C                 mov     ecx, [ebp+this]
.text:0000083F                 movzx   edx, byte ptr [ecx+1Dh]
.text:00000843                 test    edx, edx
.text:00000845                 jz      loc_901
.text:0000084B                 mov     ecx, [ebp+this]
.text:0000084E                 add     ecx, 14h
.text:00000851                 call    ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ ; CMyComPtr<IInStream>::operator!(void)
.text:00000856                 mov     [ebp+var_EA], al
.text:0000085C                 movzx   eax, [ebp+var_EA]
.text:00000863                 test    eax, eax
.text:00000865                 jz      short loc_888
.text:00000867                 mov     [ebp+var_A0], 80004005h
.text:00000871                 mov     byte ptr [ebp+var_4], 0
.text:00000875                 lea     ecx, [ebp+var_18]
.text:00000878                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000087D                 mov     eax, [ebp+var_A0]
.text:00000883                 jmp     loc_1061
.text:00000888 ; ---------------------------------------------------------------------------
.text:00000888
.text:00000888 loc_888:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1A9j
.text:00000888                 mov     ecx, [ebp+this]
.text:0000088B                 add     ecx, 14h
.text:0000088E                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00000893                 mov     [ebp+var_F0], eax
.text:00000899                 mov     ecx, [ebp+var_F0]
.text:0000089F                 mov     [ebp+var_F4], ecx
.text:000008A5                 mov     esi, esp
.text:000008A7                 push    0
.text:000008A9                 push    0
.text:000008AB                 push    0
.text:000008AD                 push    0
.text:000008AF                 mov     edx, [ebp+var_F4]
.text:000008B5                 push    edx
.text:000008B6                 mov     eax, [ebp+var_F4]
.text:000008BC                 mov     ecx, [eax]
.text:000008BE                 mov     edx, [ecx+10h]
.text:000008C1                 call    edx
.text:000008C3                 cmp     esi, esp
.text:000008C5                 call    __RTC_CheckEsp
.text:000008CA                 mov     [ebp+var_F8], eax
.text:000008D0                 mov     eax, [ebp+var_F8]
.text:000008D6                 mov     [ebp+var_28], eax
.text:000008D9                 cmp     [ebp+var_28], 0
.text:000008DD                 jz      short loc_8FF
.text:000008DF                 mov     ecx, [ebp+var_28]
.text:000008E2                 mov     [ebp+var_A4], ecx
.text:000008E8                 mov     byte ptr [ebp+var_4], 0
.text:000008EC                 lea     ecx, [ebp+var_18]
.text:000008EF                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000008F4                 mov     eax, [ebp+var_A4]
.text:000008FA                 jmp     loc_1061
.text:000008FF ; ---------------------------------------------------------------------------
.text:000008FF
.text:000008FF loc_8FF:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+221j
.text:000008FF                 jmp     short loc_908
.text:00000901 ; ---------------------------------------------------------------------------
.text:00000901
.text:00000901 loc_901:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+189j
.text:00000901                 mov     edx, [ebp+this]
.text:00000904                 mov     byte ptr [edx+1Dh], 1
.text:00000908
.text:00000908 loc_908:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *):loc_8FFj
.text:00000908                 mov     byte ptr [ebp+var_4], 2
.text:0000090C                 push    7050h           ; unsigned int
.text:00000911                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000916                 add     esp, 4
.text:00000919                 mov     [ebp+var_FC], eax
.text:0000091F                 mov     eax, [ebp+var_FC]
.text:00000925                 mov     [ebp+var_AC], eax
.text:0000092B                 mov     byte ptr [ebp+var_4], 3
.text:0000092F                 cmp     [ebp+var_AC], 0
.text:00000936                 jz      short loc_957
.text:00000938                 mov     ecx, [ebp+var_AC] ; this
.text:0000093E                 call    ??0CDecoder@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CDecoder::CDecoder(void)
.text:00000943                 mov     [ebp+var_100], eax
.text:00000949                 mov     ecx, [ebp+var_100]
.text:0000094F                 mov     [ebp+var_104], ecx
.text:00000955                 jmp     short loc_961
.text:00000957 ; ---------------------------------------------------------------------------
.text:00000957
.text:00000957 loc_957:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+27Aj
.text:00000957                 mov     [ebp+var_104], 0
.text:00000961
.text:00000961 loc_961:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+299j
.text:00000961                 mov     edx, [ebp+var_104]
.text:00000967                 mov     [ebp+var_A8], edx
.text:0000096D                 mov     byte ptr [ebp+var_4], 2
.text:00000971                 mov     eax, [ebp+var_A8]
.text:00000977                 mov     [ebp+var_30], eax
.text:0000097A                 mov     ecx, [ebp+var_30]
.text:0000097D                 push    ecx
.text:0000097E                 lea     ecx, [ebp+var_38]
.text:00000981                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)
.text:00000986                 mov     byte ptr [ebp+var_4], 4
.text:0000098A                 mov     ecx, [ebp+this]
.text:0000098D                 add     ecx, 18h
.text:00000990                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00000995                 mov     [ebp+var_108], eax
.text:0000099B                 mov     esi, esp
.text:0000099D                 mov     edx, [ebp+var_108]
.text:000009A3                 push    edx
.text:000009A4                 mov     eax, [ebp+var_30]
.text:000009A7                 push    eax
.text:000009A8                 mov     ecx, [ebp+var_30]
.text:000009AB                 mov     edx, [ecx]
.text:000009AD                 mov     eax, [edx+10h]
.text:000009B0                 call    eax
.text:000009B2                 cmp     esi, esp
.text:000009B4                 call    __RTC_CheckEsp
.text:000009B9                 mov     esi, esp
.text:000009BB                 mov     ecx, [ebp+this]
.text:000009BE                 mov     edx, [ecx+70h]
.text:000009C1                 push    edx
.text:000009C2                 mov     eax, [ebp+var_30]
.text:000009C5                 add     eax, 4
.text:000009C8                 push    eax
.text:000009C9                 mov     ecx, [ebp+var_30]
.text:000009CC                 mov     edx, [ecx+4]
.text:000009CF                 mov     eax, [edx+0Ch]
.text:000009D2                 call    eax
.text:000009D4                 cmp     esi, esp
.text:000009D6                 call    __RTC_CheckEsp
.text:000009DB                 mov     [ebp+var_10C], eax
.text:000009E1                 mov     ecx, [ebp+var_10C]
.text:000009E7                 mov     [ebp+var_40], ecx
.text:000009EA                 cmp     [ebp+var_40], 0
.text:000009EE                 jz      short loc_A1C
.text:000009F0                 mov     edx, [ebp+var_40]
.text:000009F3                 mov     [ebp+var_B0], edx
.text:000009F9                 mov     byte ptr [ebp+var_4], 2
.text:000009FD                 lea     ecx, [ebp+var_38]
.text:00000A00                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000A05                 mov     byte ptr [ebp+var_4], 0
.text:00000A09                 lea     ecx, [ebp+var_18]
.text:00000A0C                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000A11                 mov     eax, [ebp+var_B0]
.text:00000A17                 jmp     loc_1061
.text:00000A1C ; ---------------------------------------------------------------------------
.text:00000A1C
.text:00000A1C loc_A1C:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+332j
.text:00000A1C                 push    18h             ; unsigned int
.text:00000A1E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000A23                 add     esp, 4
.text:00000A26                 mov     [ebp+var_110], eax
.text:00000A2C                 mov     eax, [ebp+var_110]
.text:00000A32                 mov     [ebp+var_B8], eax
.text:00000A38                 mov     byte ptr [ebp+var_4], 5
.text:00000A3C                 cmp     [ebp+var_B8], 0
.text:00000A43                 jz      short loc_A64
.text:00000A45                 mov     ecx, [ebp+var_B8]
.text:00000A4B                 call    ??0CDummyOutStream@@QAE@XZ ; CDummyOutStream::CDummyOutStream(void)
.text:00000A50                 mov     [ebp+var_114], eax
.text:00000A56                 mov     ecx, [ebp+var_114]
.text:00000A5C                 mov     [ebp+var_118], ecx
.text:00000A62                 jmp     short loc_A6E
.text:00000A64 ; ---------------------------------------------------------------------------
.text:00000A64
.text:00000A64 loc_A64:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+387j
.text:00000A64                 mov     [ebp+var_118], 0
.text:00000A6E
.text:00000A6E loc_A6E:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3A6j
.text:00000A6E                 mov     edx, [ebp+var_118]
.text:00000A74                 mov     [ebp+var_B4], edx
.text:00000A7A                 mov     byte ptr [ebp+var_4], 4
.text:00000A7E                 mov     eax, [ebp+var_B4]
.text:00000A84                 mov     [ebp+var_44], eax
.text:00000A87                 mov     ecx, [ebp+var_44]
.text:00000A8A                 push    ecx
.text:00000A8B                 lea     ecx, [ebp+var_4C]
.text:00000A8E                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:00000A93                 mov     byte ptr [ebp+var_4], 6
.text:00000A97                 lea     ecx, [ebp+var_18]
.text:00000A9A                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00000A9F                 mov     [ebp+var_11C], eax
.text:00000AA5                 mov     edx, [ebp+var_11C]
.text:00000AAB                 push    edx             ; struct ISequentialOutStream *
.text:00000AAC                 mov     ecx, [ebp+var_44] ; this
.text:00000AAF                 call    ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z ; CDummyOutStream::SetStream(ISequentialOutStream *)
.text:00000AB4                 mov     ecx, [ebp+var_44] ; this
.text:00000AB7                 call    ?Init@CDummyOutStream@@QAEXXZ ; CDummyOutStream::Init(void)
.text:00000ABC                 lea     ecx, [ebp+var_18]
.text:00000ABF                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00000AC4                 push    38h ; '8'       ; unsigned int
.text:00000AC6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000ACB                 add     esp, 4
.text:00000ACE                 mov     [ebp+var_120], eax
.text:00000AD4                 mov     eax, [ebp+var_120]
.text:00000ADA                 mov     [ebp+var_C0], eax
.text:00000AE0                 mov     byte ptr [ebp+var_4], 7
.text:00000AE4                 cmp     [ebp+var_C0], 0
.text:00000AEB                 jz      short loc_B0C
.text:00000AED                 mov     ecx, [ebp+var_C0]
.text:00000AF3                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:00000AF8                 mov     [ebp+var_124], eax
.text:00000AFE                 mov     ecx, [ebp+var_124]
.text:00000B04                 mov     [ebp+var_128], ecx
.text:00000B0A                 jmp     short loc_B16
.text:00000B0C ; ---------------------------------------------------------------------------
.text:00000B0C
.text:00000B0C loc_B0C:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+42Fj
.text:00000B0C                 mov     [ebp+var_128], 0
.text:00000B16
.text:00000B16 loc_B16:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+44Ej
.text:00000B16                 mov     edx, [ebp+var_128]
.text:00000B1C                 mov     [ebp+var_BC], edx
.text:00000B22                 mov     byte ptr [ebp+var_4], 6
.text:00000B26                 mov     eax, [ebp+var_BC]
.text:00000B2C                 mov     [ebp+var_54], eax
.text:00000B2F                 mov     ecx, [ebp+var_54]
.text:00000B32                 push    ecx
.text:00000B33                 lea     ecx, [ebp+var_5C]
.text:00000B36                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00000B3B                 mov     byte ptr [ebp+var_4], 8
.text:00000B3F                 push    1               ; bool
.text:00000B41                 mov     edx, [ebp+arg_10]
.text:00000B44                 push    edx             ; struct IProgress *
.text:00000B45                 mov     ecx, [ebp+var_54] ; this
.text:00000B48                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00000B4D                 mov     [ebp+var_68], 0
.text:00000B54                 mov     [ebp+var_64], 0
.text:00000B5B                 mov     [ebp+var_70], 0
.text:00000B62                 mov     [ebp+var_6C], 0
.text:00000B69                 mov     [ebp+var_78], 0
.text:00000B70                 mov     [ebp+var_74], 0
.text:00000B77                 mov     ecx, [ebp+var_30] ; this
.text:00000B7A                 call    ?InitNumBlocks@CDecoder@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CDecoder::InitNumBlocks(void)
.text:00000B7F                 mov     [ebp+var_7C], 0
.text:00000B86
.text:00000B86 loc_B86:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *):loc_E37j
.text:00000B86                 mov     eax, [ebp+var_54]
.text:00000B89                 mov     ecx, [ebp+var_68]
.text:00000B8C                 mov     [eax+20h], ecx
.text:00000B8F                 mov     edx, [ebp+var_64]
.text:00000B92                 mov     [eax+24h], edx
.text:00000B95                 mov     eax, [ebp+var_54]
.text:00000B98                 mov     ecx, [ebp+var_70]
.text:00000B9B                 mov     [eax+28h], ecx
.text:00000B9E                 mov     edx, [ebp+var_6C]
.text:00000BA1                 mov     [eax+2Ch], edx
.text:00000BA4                 mov     ecx, [ebp+var_54] ; this
.text:00000BA7                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:00000BAC                 mov     [ebp+var_12C], eax
.text:00000BB2                 mov     eax, [ebp+var_12C]
.text:00000BB8                 mov     [ebp+var_80], eax
.text:00000BBB                 cmp     [ebp+var_80], 0
.text:00000BBF                 jz      short loc_C05
.text:00000BC1                 mov     ecx, [ebp+var_80]
.text:00000BC4                 mov     [ebp+var_C4], ecx
.text:00000BCA                 mov     byte ptr [ebp+var_4], 6
.text:00000BCE                 lea     ecx, [ebp+var_5C]
.text:00000BD1                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00000BD6                 mov     byte ptr [ebp+var_4], 4
.text:00000BDA                 lea     ecx, [ebp+var_4C]
.text:00000BDD                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000BE2                 mov     byte ptr [ebp+var_4], 2
.text:00000BE6                 lea     ecx, [ebp+var_38]
.text:00000BE9                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000BEE                 mov     byte ptr [ebp+var_4], 0
.text:00000BF2                 lea     ecx, [ebp+var_18]
.text:00000BF5                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000BFA                 mov     eax, [ebp+var_C4]
.text:00000C00                 jmp     loc_1061
.text:00000C05 ; ---------------------------------------------------------------------------
.text:00000C05
.text:00000C05 loc_C05:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+503j
.text:00000C05                 lea     ecx, [ebp+var_5C]
.text:00000C08                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00000C0D                 mov     [ebp+var_130], eax
.text:00000C13                 lea     ecx, [ebp+var_4C]
.text:00000C16                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00000C1B                 mov     [ebp+var_134], eax
.text:00000C21                 mov     edx, [ebp+var_130]
.text:00000C27                 push    edx             ; struct ICompressProgressInfo *
.text:00000C28                 mov     eax, [ebp+var_134]
.text:00000C2E                 push    eax             ; struct ISequentialOutStream *
.text:00000C2F                 mov     ecx, [ebp+var_30] ; this
.text:00000C32                 call    ?CodeResume@CDecoder@NBZip2@NCompress@@QAEJPAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::NBZip2::CDecoder::CodeResume(ISequentialOutStream *,ICompressProgressInfo *)
.text:00000C37                 mov     [ebp+var_138], eax
.text:00000C3D                 mov     ecx, [ebp+var_138]
.text:00000C43                 mov     [ebp+var_7C], ecx
.text:00000C46                 cmp     [ebp+var_7C], 1
.text:00000C4A                 jz      short loc_C96
.text:00000C4C                 cmp     [ebp+var_7C], 0
.text:00000C50                 jz      short loc_C96
.text:00000C52                 mov     edx, [ebp+var_7C]
.text:00000C55                 mov     [ebp+var_C8], edx
.text:00000C5B                 mov     byte ptr [ebp+var_4], 6
.text:00000C5F                 lea     ecx, [ebp+var_5C]
.text:00000C62                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00000C67                 mov     byte ptr [ebp+var_4], 4
.text:00000C6B                 lea     ecx, [ebp+var_4C]
.text:00000C6E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000C73                 mov     byte ptr [ebp+var_4], 2
.text:00000C77                 lea     ecx, [ebp+var_38]
.text:00000C7A                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000C7F                 mov     byte ptr [ebp+var_4], 0
.text:00000C83                 lea     ecx, [ebp+var_18]
.text:00000C86                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000C8B                 mov     eax, [ebp+var_C8]
.text:00000C91                 jmp     loc_1061
.text:00000C96 ; ---------------------------------------------------------------------------
.text:00000C96
.text:00000C96 loc_C96:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+58Ej
.text:00000C96                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+594j
.text:00000C96                 mov     eax, [ebp+var_30]
.text:00000C99                 movzx   ecx, byte ptr [eax+7048h]
.text:00000CA0                 test    ecx, ecx
.text:00000CA2                 jz      short loc_CB8
.text:00000CA4                 mov     edx, [ebp+var_78]
.text:00000CA7                 add     edx, 1
.text:00000CAA                 mov     eax, [ebp+var_74]
.text:00000CAD                 adc     eax, 0
.text:00000CB0                 mov     [ebp+var_78], edx
.text:00000CB3                 mov     [ebp+var_74], eax
.text:00000CB6                 jmp     short loc_CD3
.text:00000CB8 ; ---------------------------------------------------------------------------
.text:00000CB8
.text:00000CB8 loc_CB8:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5E6j
.text:00000CB8                 mov     ecx, [ebp+var_78]
.text:00000CBB                 or      ecx, [ebp+var_74]
.text:00000CBE                 jnz     short loc_CD3
.text:00000CC0                 mov     edx, [ebp+this]
.text:00000CC3                 mov     byte ptr [edx+1Ch], 0
.text:00000CC7                 mov     [ebp+var_7C], 1
.text:00000CCE                 jmp     loc_E3C
.text:00000CD3 ; ---------------------------------------------------------------------------
.text:00000CD3
.text:00000CD3 loc_CD3:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5FAj
.text:00000CD3                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+602j
.text:00000CD3                 mov     ecx, [ebp+var_44] ; this
.text:00000CD6                 call    ?GetSize@CDummyOutStream@@QBE_KXZ ; CDummyOutStream::GetSize(void)
.text:00000CDB                 mov     [ebp+var_140], eax
.text:00000CE1                 mov     [ebp+var_13C], edx
.text:00000CE7                 mov     eax, [ebp+var_140]
.text:00000CED                 mov     [ebp+var_70], eax
.text:00000CF0                 mov     ecx, [ebp+var_13C]
.text:00000CF6                 mov     [ebp+var_6C], ecx
.text:00000CF9                 mov     ecx, [ebp+var_30] ; this
.text:00000CFC                 call    ?GetStreamSize@CDecoder@NBZip2@NCompress@@QBE_KXZ ; NCompress::NBZip2::CDecoder::GetStreamSize(void)
.text:00000D01                 mov     [ebp+var_148], eax
.text:00000D07                 mov     [ebp+var_144], edx
.text:00000D0D                 mov     edx, [ebp+var_148]
.text:00000D13                 mov     [ebp+var_88], edx
.text:00000D19                 mov     eax, [ebp+var_144]
.text:00000D1F                 mov     [ebp+var_84], eax
.text:00000D25                 mov     ecx, [ebp+var_88]
.text:00000D2B                 cmp     ecx, [ebp+var_68]
.text:00000D2E                 jnz     short loc_D47
.text:00000D30                 mov     edx, [ebp+var_84]
.text:00000D36                 cmp     edx, [ebp+var_64]
.text:00000D39                 jnz     short loc_D47
.text:00000D3B                 mov     [ebp+var_7C], 0
.text:00000D42                 jmp     loc_E3C
.text:00000D47 ; ---------------------------------------------------------------------------
.text:00000D47
.text:00000D47 loc_D47:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+672j
.text:00000D47                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+67Dj
.text:00000D47                 mov     eax, [ebp+var_30]
.text:00000D4A                 movzx   ecx, byte ptr [eax+7048h]
.text:00000D51                 test    ecx, ecx
.text:00000D53                 jnz     short loc_D68
.text:00000D55                 mov     edx, [ebp+this]
.text:00000D58                 mov     byte ptr [edx+1Eh], 1
.text:00000D5C                 mov     [ebp+var_7C], 1
.text:00000D63                 jmp     loc_E3C
.text:00000D68 ; ---------------------------------------------------------------------------
.text:00000D68
.text:00000D68 loc_D68:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+697j
.text:00000D68                 mov     ecx, [ebp+var_30]
.text:00000D6B                 add     ecx, 140h
.text:00000D71                 call    ?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ ; NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:00000D76                 mov     [ebp+var_149], al
.text:00000D7C                 movzx   eax, [ebp+var_149]
.text:00000D83                 test    eax, eax
.text:00000D85                 jz      short loc_DAC
.text:00000D87                 mov     ecx, [ebp+this]
.text:00000D8A                 mov     byte ptr [ecx+1Fh], 1
.text:00000D8E                 mov     edx, [ebp+var_88]
.text:00000D94                 mov     [ebp+var_68], edx
.text:00000D97                 mov     eax, [ebp+var_84]
.text:00000D9D                 mov     [ebp+var_64], eax
.text:00000DA0                 mov     [ebp+var_7C], 1
.text:00000DA7                 jmp     loc_E3C
.text:00000DAC ; ---------------------------------------------------------------------------
.text:00000DAC
.text:00000DAC loc_DAC:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6C9j
.text:00000DAC                 mov     ecx, [ebp+var_30] ; this
.text:00000DAF                 call    ?GetInputProcessedSize@CDecoder@NBZip2@NCompress@@QBE_KXZ ; NCompress::NBZip2::CDecoder::GetInputProcessedSize(void)
.text:00000DB4                 mov     [ebp+var_154], eax
.text:00000DBA                 mov     [ebp+var_150], edx
.text:00000DC0                 mov     ecx, [ebp+var_154]
.text:00000DC6                 mov     [ebp+var_68], ecx
.text:00000DC9                 mov     edx, [ebp+var_150]
.text:00000DCF                 mov     [ebp+var_64], edx
.text:00000DD2                 mov     eax, [ebp+var_64]
.text:00000DD5                 cmp     eax, [ebp+var_84]
.text:00000DDB                 jb      short loc_E2F
.text:00000DDD                 ja      short loc_DEA
.text:00000DDF                 mov     ecx, [ebp+var_68]
.text:00000DE2                 cmp     ecx, [ebp+var_88]
.text:00000DE8                 jbe     short loc_E2F
.text:00000DEA
.text:00000DEA loc_DEA:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+721j
.text:00000DEA                 mov     [ebp+var_CC], 80004005h
.text:00000DF4                 mov     byte ptr [ebp+var_4], 6
.text:00000DF8                 lea     ecx, [ebp+var_5C]
.text:00000DFB                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00000E00                 mov     byte ptr [ebp+var_4], 4
.text:00000E04                 lea     ecx, [ebp+var_4C]
.text:00000E07                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000E0C                 mov     byte ptr [ebp+var_4], 2
.text:00000E10                 lea     ecx, [ebp+var_38]
.text:00000E13                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000E18                 mov     byte ptr [ebp+var_4], 0
.text:00000E1C                 lea     ecx, [ebp+var_18]
.text:00000E1F                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000E24                 mov     eax, [ebp+var_CC]
.text:00000E2A                 jmp     loc_1061
.text:00000E2F ; ---------------------------------------------------------------------------
.text:00000E2F
.text:00000E2F loc_E2F:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+71Fj
.text:00000E2F                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+72Cj
.text:00000E2F                 cmp     [ebp+var_7C], 0
.text:00000E33                 jz      short loc_E37
.text:00000E35                 jmp     short loc_E3C
.text:00000E37 ; ---------------------------------------------------------------------------
.text:00000E37
.text:00000E37 loc_E37:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+777j
.text:00000E37                 jmp     loc_B86
.text:00000E3C ; ---------------------------------------------------------------------------
.text:00000E3C
.text:00000E3C loc_E3C:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+612j
.text:00000E3C                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+686j ...
.text:00000E3C                 mov     edx, [ebp+var_78]
.text:00000E3F                 or      edx, [ebp+var_74]
.text:00000E42                 jz      short loc_EB6
.text:00000E44                 mov     eax, [ebp+this]
.text:00000E47                 mov     ecx, [ebp+var_68]
.text:00000E4A                 mov     [eax+28h], ecx
.text:00000E4D                 mov     edx, [ebp+var_64]
.text:00000E50                 mov     [eax+2Ch], edx
.text:00000E53                 mov     eax, [ebp+this]
.text:00000E56                 mov     ecx, [ebp+var_70]
.text:00000E59                 mov     [eax+30h], ecx
.text:00000E5C                 mov     edx, [ebp+var_6C]
.text:00000E5F                 mov     [eax+34h], edx
.text:00000E62                 mov     eax, [ebp+this]
.text:00000E65                 mov     ecx, [ebp+var_78]
.text:00000E68                 mov     [eax+38h], ecx
.text:00000E6B                 mov     edx, [ebp+var_74]
.text:00000E6E                 mov     [eax+3Ch], edx
.text:00000E71                 mov     ecx, [ebp+var_30] ; this
.text:00000E74                 call    ?GetNumBlocks@CDecoder@NBZip2@NCompress@@QBE_KXZ ; NCompress::NBZip2::CDecoder::GetNumBlocks(void)
.text:00000E79                 mov     [ebp+var_15C], eax
.text:00000E7F                 mov     [ebp+var_158], edx
.text:00000E85                 mov     eax, [ebp+this]
.text:00000E88                 mov     ecx, [ebp+var_15C]
.text:00000E8E                 mov     [eax+40h], ecx
.text:00000E91                 mov     edx, [ebp+var_158]
.text:00000E97                 mov     [eax+44h], edx
.text:00000E9A                 mov     eax, [ebp+this]
.text:00000E9D                 mov     byte ptr [eax+20h], 1
.text:00000EA1                 mov     ecx, [ebp+this]
.text:00000EA4                 mov     byte ptr [ecx+21h], 1
.text:00000EA8                 mov     edx, [ebp+this]
.text:00000EAB                 mov     byte ptr [edx+22h], 1
.text:00000EAF                 mov     eax, [ebp+this]
.text:00000EB2                 mov     byte ptr [eax+23h], 1
.text:00000EB6
.text:00000EB6 loc_EB6:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+786j
.text:00000EB6                 mov     esi, esp
.text:00000EB8                 mov     ecx, [ebp+var_30]
.text:00000EBB                 push    ecx
.text:00000EBC                 mov     edx, [ebp+var_30]
.text:00000EBF                 mov     eax, [edx]
.text:00000EC1                 mov     ecx, [eax+14h]
.text:00000EC4                 call    ecx
.text:00000EC6                 cmp     esi, esp
.text:00000EC8                 call    __RTC_CheckEsp
.text:00000ECD                 lea     ecx, [ebp+var_4C]
.text:00000ED0                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00000ED5                 mov     edx, [ebp+this]
.text:00000ED8                 movzx   eax, byte ptr [edx+1Ch]
.text:00000EDC                 test    eax, eax
.text:00000EDE                 jnz     short loc_EEC
.text:00000EE0                 mov     [ebp+var_2C], 7
.text:00000EE7                 jmp     loc_F90
.text:00000EEC ; ---------------------------------------------------------------------------
.text:00000EEC
.text:00000EEC loc_EEC:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+822j
.text:00000EEC                 mov     ecx, [ebp+this]
.text:00000EEF                 movzx   edx, byte ptr [ecx+1Fh]
.text:00000EF3                 test    edx, edx
.text:00000EF5                 jz      short loc_F03
.text:00000EF7                 mov     [ebp+var_2C], 5
.text:00000EFE                 jmp     loc_F90
.text:00000F03 ; ---------------------------------------------------------------------------
.text:00000F03
.text:00000F03 loc_F03:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+839j
.text:00000F03                 mov     eax, [ebp+var_30]
.text:00000F06                 movzx   ecx, byte ptr [eax+704Ah]
.text:00000F0D                 test    ecx, ecx
.text:00000F0F                 jz      short loc_F1A
.text:00000F11                 mov     [ebp+var_2C], 3
.text:00000F18                 jmp     short loc_F90
.text:00000F1A ; ---------------------------------------------------------------------------
.text:00000F1A
.text:00000F1A loc_F1A:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+853j
.text:00000F1A                 mov     edx, [ebp+this]
.text:00000F1D                 movzx   eax, byte ptr [edx+1Eh]
.text:00000F21                 test    eax, eax
.text:00000F23                 jz      short loc_F2E
.text:00000F25                 mov     [ebp+var_2C], 6
.text:00000F2C                 jmp     short loc_F90
.text:00000F2E ; ---------------------------------------------------------------------------
.text:00000F2E
.text:00000F2E loc_F2E:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+867j
.text:00000F2E                 cmp     [ebp+var_7C], 1
.text:00000F32                 jnz     short loc_F3D
.text:00000F34                 mov     [ebp+var_2C], 2
.text:00000F3B                 jmp     short loc_F90
.text:00000F3D ; ---------------------------------------------------------------------------
.text:00000F3D
.text:00000F3D loc_F3D:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+876j
.text:00000F3D                 cmp     [ebp+var_7C], 0
.text:00000F41                 jnz     short loc_F4C
.text:00000F43                 mov     [ebp+var_2C], 0
.text:00000F4A                 jmp     short loc_F90
.text:00000F4C ; ---------------------------------------------------------------------------
.text:00000F4C
.text:00000F4C loc_F4C:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+885j
.text:00000F4C                 mov     ecx, [ebp+var_7C]
.text:00000F4F                 mov     [ebp+var_D0], ecx
.text:00000F55                 mov     byte ptr [ebp+var_4], 6
.text:00000F59                 lea     ecx, [ebp+var_5C]
.text:00000F5C                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00000F61                 mov     byte ptr [ebp+var_4], 4
.text:00000F65                 lea     ecx, [ebp+var_4C]
.text:00000F68                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000F6D                 mov     byte ptr [ebp+var_4], 2
.text:00000F71                 lea     ecx, [ebp+var_38]
.text:00000F74                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000F79                 mov     byte ptr [ebp+var_4], 0
.text:00000F7D                 lea     ecx, [ebp+var_18]
.text:00000F80                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000F85                 mov     eax, [ebp+var_D0]
.text:00000F8B                 jmp     loc_1061
.text:00000F90 ; ---------------------------------------------------------------------------
.text:00000F90
.text:00000F90 loc_F90:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+82Bj
.text:00000F90                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+842j ...
.text:00000F90                 mov     byte ptr [ebp+var_4], 6
.text:00000F94                 lea     ecx, [ebp+var_5C]
.text:00000F97                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00000F9C                 mov     byte ptr [ebp+var_4], 4
.text:00000FA0                 lea     ecx, [ebp+var_4C]
.text:00000FA3                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000FA8                 mov     byte ptr [ebp+var_4], 2
.text:00000FAC                 lea     ecx, [ebp+var_38]
.text:00000FAF                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000FB4                 jmp     short $LN48
.text:00000FB4 ?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text:00000FB4
.text:00000FB6
.text:00000FB6 ; =============== S U B R O U T I N E =======================================
.text:00000FB6
.text:00000FB6
.text:00000FB6 __catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 proc near
.text:00000FB6                                         ; DATA XREF: .xdata$x:00001E18o
.text:00000FB6                 mov     edx, [ebp-90h]
.text:00000FBC                 mov     eax, [edx]
.text:00000FBE                 mov     [ebp-0D4h], eax
.text:00000FC4                 mov     dword ptr [ebp-4], 1
.text:00000FCB                 mov     eax, offset $LN59
.text:00000FD0                 retn
.text:00000FD0 __catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 endp
.text:00000FD0
.text:00000FD1 ; ---------------------------------------------------------------------------
.text:00000FD1                 mov     eax, offset $LN48
.text:00000FD6                 retn
.text:00000FD7 ; ---------------------------------------------------------------------------
.text:00000FD7 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00000FD7
.text:00000FD7 $LN48:                                  ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8F8j
.text:00000FD7                                         ; DATA XREF: .text:00000FD1o
.text:00000FD7                 mov     [ebp+var_4], 1
.text:00000FDE                 jmp     short loc_FF4
.text:00000FDE ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00000FE0
.text:00000FE0 ; =============== S U B R O U T I N E =======================================
.text:00000FE0
.text:00000FE0
.text:00000FE0 $LN59           proc near               ; DATA XREF: __catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+15o
.text:00000FE0                 mov     byte ptr [ebp-4], 0
.text:00000FE4                 lea     ecx, [ebp-18h]
.text:00000FE7                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000FEC                 mov     eax, [ebp-0D4h]
.text:00000FF2                 jmp     short loc_1061
.text:00000FF2 $LN59           endp
.text:00000FF2
.text:00000FF4 ; ---------------------------------------------------------------------------
.text:00000FF4 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00000FF4
.text:00000FF4 loc_FF4:                                ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+922j
.text:00000FF4                 mov     esi, esp
.text:00000FF6                 mov     ecx, [ebp+var_2C]
.text:00000FF9                 push    ecx
.text:00000FFA                 mov     edx, [ebp+arg_10]
.text:00000FFD                 push    edx
.text:00000FFE                 mov     eax, [ebp+arg_10]
.text:00001001                 mov     ecx, [eax]
.text:00001003                 mov     edx, [ecx+1Ch]
.text:00001006                 call    edx
.text:00001008                 cmp     esi, esp
.text:0000100A                 call    __RTC_CheckEsp
.text:0000100F                 mov     [ebp+var_160], eax
.text:00001015                 mov     eax, [ebp+var_160]
.text:0000101B                 mov     [ebp+var_D8], eax
.text:00001021                 mov     byte ptr [ebp+var_4], 0
.text:00001025                 lea     ecx, [ebp+var_18]
.text:00001028                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000102D                 mov     eax, [ebp+var_D8]
.text:00001033                 jmp     short loc_1061
.text:00001033 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001035
.text:00001035 ; =============== S U B R O U T I N E =======================================
.text:00001035
.text:00001035
.text:00001035 __catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 proc near
.text:00001035                                         ; DATA XREF: .xdata$x:00001E08o
.text:00001035                 mov     dword ptr [ebp-0DCh], 8007000Eh
.text:0000103F                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001046                 mov     eax, offset $LN61
.text:0000104B                 retn
.text:0000104B __catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 endp
.text:0000104B
.text:0000104C ; ---------------------------------------------------------------------------
.text:0000104C                 mov     eax, offset __tryend$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
.text:00001051                 retn
.text:00001052 ; ---------------------------------------------------------------------------
.text:00001052
.text:00001052 __tryend$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3:
.text:00001052                                         ; DATA XREF: .text:0000104Co
.text:00001052                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001059                 jmp     short loc_1061
.text:0000105B ; ---------------------------------------------------------------------------
.text:0000105B
.text:0000105B $LN61:                                  ; DATA XREF: __catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2+11o
.text:0000105B                 mov     eax, [ebp-0DCh]
.text:00001061 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001061
.text:00001061 loc_1061:                               ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+50j
.text:00001061                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6Ej ...
.text:00001061                 push    edx
.text:00001062                 mov     ecx, ebp
.text:00001064                 push    eax
.text:00001065                 lea     edx, $LN77
.text:0000106B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001070                 pop     eax
.text:00001071                 pop     edx
.text:00001072                 mov     ecx, [ebp+var_C]
.text:00001075                 mov     large fs:0, ecx
.text:0000107C                 pop     ecx
.text:0000107D                 pop     edi
.text:0000107E                 pop     esi
.text:0000107F                 pop     ebx
.text:00001080                 add     esp, 160h
.text:00001086                 cmp     ebp, esp
.text:00001088                 call    __RTC_CheckEsp
.text:0000108D                 mov     esp, ebp
.text:0000108F                 pop     ebp
.text:00001090                 retn    14h
.text:00001090 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001090 ; ---------------------------------------------------------------------------
.text:00001093                 align 4
.text:00001094 $LN77           dd 5                    ; DATA XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9A9o
.text:00001098                 dd offset $LN76
.text:0000109C $LN76           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00001098o
.text:000010A4                 dd offset $LN70         ; "realOutStream"
.text:000010A8                 dd 0FFFFFFC8h, 4
.text:000010B0                 dd offset $LN71         ; "decoder"
.text:000010B4                 dd 0FFFFFFB4h, 4
.text:000010BC                 dd offset $LN72         ; "outStream"
.text:000010C0                 dd 0FFFFFFA4h, 4
.text:000010C8                 dd offset $LN73         ; "progress"
.text:000010CC                 dd 0FFFFFF70h, 4
.text:000010D4                 dd offset $LN74
.text:000010D8 $LN74           db 65h, 0               ; DATA XREF: .text:000010D4o
.text:000010DA $LN73           db 'progress',0         ; DATA XREF: .text:000010C8o
.text:000010E3 $LN72           db 'outStream',0        ; DATA XREF: .text:000010BCo
.text:000010ED $LN71           db 'decoder',0          ; DATA XREF: .text:000010B0o
.text:000010F5 $LN70           db 'realOutStream',0    ; DATA XREF: .text:000010A4o
.text:00001103                 db 9 dup(0CCh)
.text:0000110C
.text:0000110C ; =============== S U B R O U T I N E =======================================
.text:0000110C
.text:0000110C ; Attributes: bp-based frame
.text:0000110C
.text:0000110C ; __int32 __stdcall NArchive::NBz2::CHandler::GetFileTimeType(NArchive::NBz2::CHandler *this, unsigned int *)
.text:0000110C                 public ?GetFileTimeType@CHandler@NBz2@NArchive@@UAGJPAI@Z
.text:0000110C ?GetFileTimeType@CHandler@NBz2@NArchive@@UAGJPAI@Z proc near
.text:0000110C                                         ; DATA XREF: .rdata:0000269Co
.text:0000110C
.text:0000110C this            = dword ptr  8
.text:0000110C arg_4           = dword ptr  0Ch
.text:0000110C
.text:0000110C                 push    ebp
.text:0000110D                 mov     ebp, esp
.text:0000110F                 mov     eax, [ebp+arg_4]
.text:00001112                 mov     dword ptr [eax], 1
.text:00001118                 xor     eax, eax
.text:0000111A                 pop     ebp
.text:0000111B                 retn    8
.text:0000111B ?GetFileTimeType@CHandler@NBz2@NArchive@@UAGJPAI@Z endp
.text:0000111B
.text:0000111B ; ---------------------------------------------------------------------------
.text:0000111E                 db 0Eh dup(0CCh)
.text:0000112C
.text:0000112C ; =============== S U B R O U T I N E =======================================
.text:0000112C
.text:0000112C ; Attributes: bp-based frame
.text:0000112C
.text:0000112C ; __int32 __cdecl NArchive::NBz2::CHandler::UpdateItems(NArchive::NBz2::CHandler *this, struct ISequentialOutStream *, unsigned int, struct IArchiveUpdateCallback *)
.text:0000112C                 public ?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:0000112C ?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z proc near
.text:0000112C                                         ; DATA XREF: .rdata:00002698o
.text:0000112C
.text:0000112C var_124         = dword ptr -124h
.text:0000112C var_120         = dword ptr -120h
.text:0000112C var_11C         = dword ptr -11Ch
.text:0000112C var_118         = dword ptr -118h
.text:0000112C var_114         = dword ptr -114h
.text:0000112C var_110         = dword ptr -110h
.text:0000112C var_10C         = dword ptr -10Ch
.text:0000112C var_108         = dword ptr -108h
.text:0000112C var_104         = dword ptr -104h
.text:0000112C var_100         = dword ptr -100h
.text:0000112C var_FC          = dword ptr -0FCh
.text:0000112C var_F8          = dword ptr -0F8h
.text:0000112C var_F4          = dword ptr -0F4h
.text:0000112C var_F0          = dword ptr -0F0h
.text:0000112C var_EC          = dword ptr -0ECh
.text:0000112C var_E8          = dword ptr -0E8h
.text:0000112C var_E4          = dword ptr -0E4h
.text:0000112C var_E0          = dword ptr -0E0h
.text:0000112C var_DC          = dword ptr -0DCh
.text:0000112C var_D5          = byte ptr -0D5h
.text:0000112C var_D4          = dword ptr -0D4h
.text:0000112C var_D0          = dword ptr -0D0h
.text:0000112C var_C9          = byte ptr -0C9h
.text:0000112C var_C8          = dword ptr -0C8h
.text:0000112C var_C0          = dword ptr -0C0h
.text:0000112C var_BC          = dword ptr -0BCh
.text:0000112C var_B8          = dword ptr -0B8h
.text:0000112C var_B4          = dword ptr -0B4h
.text:0000112C var_B0          = dword ptr -0B0h
.text:0000112C var_AC          = dword ptr -0ACh
.text:0000112C var_A8          = dword ptr -0A8h
.text:0000112C var_A4          = dword ptr -0A4h
.text:0000112C var_A0          = dword ptr -0A0h
.text:0000112C var_9C          = dword ptr -9Ch
.text:0000112C var_98          = dword ptr -98h
.text:0000112C var_90          = byte ptr -90h
.text:0000112C var_84          = byte ptr -84h
.text:0000112C var_7C          = dword ptr -7Ch
.text:0000112C var_78          = dword ptr -78h
.text:0000112C var_70          = word ptr -70h
.text:0000112C var_68          = dword ptr -68h
.text:0000112C var_64          = dword ptr -64h
.text:0000112C var_5C          = dword ptr -5Ch
.text:0000112C var_58          = dword ptr -58h
.text:0000112C var_54          = dword ptr -54h
.text:0000112C var_4C          = word ptr -4Ch
.text:0000112C var_44          = word ptr -44h
.text:0000112C var_38          = dword ptr -38h
.text:0000112C var_30          = dword ptr -30h
.text:0000112C var_24          = dword ptr -24h
.text:0000112C var_18          = dword ptr -18h
.text:0000112C var_10          = dword ptr -10h
.text:0000112C var_C           = dword ptr -0Ch
.text:0000112C var_4           = dword ptr -4
.text:0000112C this            = dword ptr  8
.text:0000112C arg_4           = dword ptr  0Ch
.text:0000112C arg_8           = dword ptr  10h
.text:0000112C arg_C           = dword ptr  14h
.text:0000112C
.text:0000112C ; FUNCTION CHUNK AT .text:00001672 SIZE 00000032 BYTES
.text:0000112C
.text:0000112C                 push    ebp
.text:0000112D                 mov     ebp, esp
.text:0000112F                 push    0FFFFFFFFh
.text:00001131                 push    offset __ehhandler$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00001136                 mov     eax, large fs:0
.text:0000113C                 push    eax
.text:0000113D                 push    ecx
.text:0000113E                 sub     esp, 114h
.text:00001144                 push    ebx
.text:00001145                 push    esi
.text:00001146                 push    edi
.text:00001147                 lea     edi, [ebp+var_124]
.text:0000114D                 mov     ecx, 45h ; 'E'
.text:00001152                 mov     eax, 0CCCCCCCCh
.text:00001157                 rep stosd
.text:00001159                 mov     eax, dword ptr ds:___security_cookie
.text:0000115E                 xor     eax, ebp
.text:00001160                 push    eax             ; struct ICompressProgressInfo *
.text:00001161                 lea     eax, [ebp+var_C]
.text:00001164                 mov     large fs:0, eax
.text:0000116A                 mov     [ebp+var_10], esp
.text:0000116D                 mov     [ebp+var_4], 0
.text:00001174                 cmp     [ebp+arg_8], 1
.text:00001178                 jz      short loc_1184
.text:0000117A                 mov     eax, 80070057h
.text:0000117F                 jmp     loc_1672
.text:00001184 ; ---------------------------------------------------------------------------
.text:00001184
.text:00001184 loc_1184:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4Cj
.text:00001184                 cmp     [ebp+arg_C], 0
.text:00001188                 jnz     short loc_1194
.text:0000118A                 mov     eax, 80004005h
.text:0000118F                 jmp     loc_1672
.text:00001194 ; ---------------------------------------------------------------------------
.text:00001194
.text:00001194 loc_1194:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5Cj
.text:00001194                 mov     esi, esp
.text:00001196                 lea     eax, [ebp+var_30]
.text:00001199                 push    eax
.text:0000119A                 lea     ecx, [ebp+var_24]
.text:0000119D                 push    ecx
.text:0000119E                 lea     edx, [ebp+var_18]
.text:000011A1                 push    edx
.text:000011A2                 push    0
.text:000011A4                 mov     eax, [ebp+arg_C]
.text:000011A7                 push    eax
.text:000011A8                 mov     ecx, [ebp+arg_C]
.text:000011AB                 mov     edx, [ecx]
.text:000011AD                 mov     eax, [edx+14h]
.text:000011B0                 call    eax
.text:000011B2                 cmp     esi, esp
.text:000011B4                 call    __RTC_CheckEsp
.text:000011B9                 mov     [ebp+var_C8], eax
.text:000011BF                 mov     ecx, [ebp+var_C8]
.text:000011C5                 mov     [ebp+var_38], ecx
.text:000011C8                 cmp     [ebp+var_38], 0
.text:000011CC                 jz      short loc_11D6
.text:000011CE                 mov     eax, [ebp+var_38]
.text:000011D1                 jmp     loc_1672
.text:000011D6 ; ---------------------------------------------------------------------------
.text:000011D6
.text:000011D6 loc_11D6:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A0j
.text:000011D6                 mov     edx, [ebp+var_24]
.text:000011D9                 push    edx             ; int
.text:000011DA                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:000011DF                 mov     [ebp+var_C9], al
.text:000011E5                 movzx   eax, [ebp+var_C9]
.text:000011EC                 test    eax, eax
.text:000011EE                 jz      loc_12A0
.text:000011F4                 lea     ecx, [ebp+var_4C] ; this
.text:000011F7                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000011FC                 mov     [ebp+var_D0], eax
.text:00001202                 mov     byte ptr [ebp+var_4], 1
.text:00001206                 mov     esi, esp
.text:00001208                 lea     ecx, [ebp+var_4C]
.text:0000120B                 push    ecx
.text:0000120C                 push    6
.text:0000120E                 push    0
.text:00001210                 mov     edx, [ebp+arg_C]
.text:00001213                 push    edx
.text:00001214                 mov     eax, [ebp+arg_C]
.text:00001217                 mov     ecx, [eax]
.text:00001219                 mov     edx, [ecx+18h]
.text:0000121C                 call    edx
.text:0000121E                 cmp     esi, esp
.text:00001220                 call    __RTC_CheckEsp
.text:00001225                 mov     [ebp+var_D4], eax
.text:0000122B                 mov     eax, [ebp+var_D4]
.text:00001231                 mov     [ebp+var_54], eax
.text:00001234                 cmp     [ebp+var_54], 0
.text:00001238                 jz      short loc_125A
.text:0000123A                 mov     ecx, [ebp+var_54]
.text:0000123D                 mov     [ebp+var_A0], ecx
.text:00001243                 mov     byte ptr [ebp+var_4], 0
.text:00001247                 lea     ecx, [ebp+var_4C] ; this
.text:0000124A                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000124F                 mov     eax, [ebp+var_A0]
.text:00001255                 jmp     loc_1672
.text:0000125A ; ---------------------------------------------------------------------------
.text:0000125A
.text:0000125A loc_125A:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+10Cj
.text:0000125A                 movzx   edx, [ebp+var_4C]
.text:0000125E                 test    edx, edx
.text:00001260                 jz      short loc_1294
.text:00001262                 movzx   eax, [ebp+var_4C]
.text:00001266                 cmp     eax, 0Bh
.text:00001269                 jnz     short loc_1273
.text:0000126B                 movsx   ecx, [ebp+var_44]
.text:0000126F                 test    ecx, ecx
.text:00001271                 jz      short loc_1294
.text:00001273
.text:00001273 loc_1273:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+13Dj
.text:00001273                 mov     [ebp+var_A4], 80070057h
.text:0000127D                 mov     byte ptr [ebp+var_4], 0
.text:00001281                 lea     ecx, [ebp+var_4C] ; this
.text:00001284                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001289                 mov     eax, [ebp+var_A4]
.text:0000128F                 jmp     loc_1672
.text:00001294 ; ---------------------------------------------------------------------------
.text:00001294
.text:00001294 loc_1294:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+134j
.text:00001294                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+145j
.text:00001294                 mov     byte ptr [ebp+var_4], 0
.text:00001298                 lea     ecx, [ebp+var_4C] ; this
.text:0000129B                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000012A0
.text:000012A0 loc_12A0:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C2j
.text:000012A0                 mov     edx, [ebp+var_18]
.text:000012A3                 push    edx             ; int
.text:000012A4                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:000012A9                 mov     [ebp+var_D5], al
.text:000012AF                 movzx   eax, [ebp+var_D5]
.text:000012B6                 test    eax, eax
.text:000012B8                 jz      loc_1393
.text:000012BE                 lea     ecx, [ebp+var_70] ; this
.text:000012C1                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000012C6                 mov     [ebp+var_DC], eax
.text:000012CC                 mov     byte ptr [ebp+var_4], 2
.text:000012D0                 mov     esi, esp
.text:000012D2                 lea     ecx, [ebp+var_70]
.text:000012D5                 push    ecx
.text:000012D6                 push    7
.text:000012D8                 push    0
.text:000012DA                 mov     edx, [ebp+arg_C]
.text:000012DD                 push    edx
.text:000012DE                 mov     eax, [ebp+arg_C]
.text:000012E1                 mov     ecx, [eax]
.text:000012E3                 mov     edx, [ecx+18h]
.text:000012E6                 call    edx
.text:000012E8                 cmp     esi, esp
.text:000012EA                 call    __RTC_CheckEsp
.text:000012EF                 mov     [ebp+var_E0], eax
.text:000012F5                 mov     eax, [ebp+var_E0]
.text:000012FB                 mov     [ebp+var_78], eax
.text:000012FE                 cmp     [ebp+var_78], 0
.text:00001302                 jz      short loc_1324
.text:00001304                 mov     ecx, [ebp+var_78]
.text:00001307                 mov     [ebp+var_A8], ecx
.text:0000130D                 mov     byte ptr [ebp+var_4], 0
.text:00001311                 lea     ecx, [ebp+var_70] ; this
.text:00001314                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001319                 mov     eax, [ebp+var_A8]
.text:0000131F                 jmp     loc_1672
.text:00001324 ; ---------------------------------------------------------------------------
.text:00001324
.text:00001324 loc_1324:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1D6j
.text:00001324                 movzx   edx, [ebp+var_70]
.text:00001328                 cmp     edx, 15h
.text:0000132B                 jz      short loc_134E
.text:0000132D                 mov     [ebp+var_AC], 80070057h
.text:00001337                 mov     byte ptr [ebp+var_4], 0
.text:0000133B                 lea     ecx, [ebp+var_70] ; this
.text:0000133E                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001343                 mov     eax, [ebp+var_AC]
.text:00001349                 jmp     loc_1672
.text:0000134E ; ---------------------------------------------------------------------------
.text:0000134E
.text:0000134E loc_134E:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1FFj
.text:0000134E                 mov     eax, [ebp+var_68]
.text:00001351                 mov     [ebp+var_5C], eax
.text:00001354                 mov     ecx, [ebp+var_64]
.text:00001357                 mov     [ebp+var_58], ecx
.text:0000135A                 mov     byte ptr [ebp+var_4], 0
.text:0000135E                 lea     ecx, [ebp+var_70] ; this
.text:00001361                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001366                 mov     edx, [ebp+arg_C]
.text:00001369                 push    edx             ; struct IProgress *
.text:0000136A                 mov     eax, [ebp+this]
.text:0000136D                 add     eax, 40h ; '@'
.text:00001370                 push    eax             ; CProps *
.text:00001371                 mov     ecx, [ebp+arg_4]
.text:00001374                 push    ecx             ; int
.text:00001375                 mov     edx, [ebp+var_58]
.text:00001378                 push    edx             ; int
.text:00001379                 mov     eax, [ebp+var_5C]
.text:0000137C                 push    eax             ; int
.text:0000137D                 call    ?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z ; NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)
.text:00001382                 mov     [ebp+var_E4], eax
.text:00001388                 mov     eax, [ebp+var_E4]
.text:0000138E                 jmp     loc_1672
.text:00001393 ; ---------------------------------------------------------------------------
.text:00001393
.text:00001393 loc_1393:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+18Cj
.text:00001393                 cmp     [ebp+var_30], 0
.text:00001397                 jz      short loc_13A3
.text:00001399                 mov     eax, 80070057h
.text:0000139E                 jmp     loc_1672
.text:000013A3 ; ---------------------------------------------------------------------------
.text:000013A3
.text:000013A3 loc_13A3:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+26Bj
.text:000013A3                 push    38h ; '8'       ; unsigned int
.text:000013A5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000013AA                 add     esp, 4
.text:000013AD                 mov     [ebp+var_E8], eax
.text:000013B3                 mov     ecx, [ebp+var_E8]
.text:000013B9                 mov     [ebp+var_B4], ecx
.text:000013BF                 mov     byte ptr [ebp+var_4], 3
.text:000013C3                 cmp     [ebp+var_B4], 0
.text:000013CA                 jz      short loc_13EB
.text:000013CC                 mov     ecx, [ebp+var_B4]
.text:000013D2                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:000013D7                 mov     [ebp+var_EC], eax
.text:000013DD                 mov     edx, [ebp+var_EC]
.text:000013E3                 mov     [ebp+var_F0], edx
.text:000013E9                 jmp     short loc_13F5
.text:000013EB ; ---------------------------------------------------------------------------
.text:000013EB
.text:000013EB loc_13EB:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+29Ej
.text:000013EB                 mov     [ebp+var_F0], 0
.text:000013F5
.text:000013F5 loc_13F5:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2BDj
.text:000013F5                 mov     eax, [ebp+var_F0]
.text:000013FB                 mov     [ebp+var_B0], eax
.text:00001401                 mov     byte ptr [ebp+var_4], 0
.text:00001405                 mov     ecx, [ebp+var_B0]
.text:0000140B                 mov     [ebp+var_7C], ecx
.text:0000140E                 mov     edx, [ebp+var_7C]
.text:00001411                 push    edx
.text:00001412                 lea     ecx, [ebp+var_84]
.text:00001418                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:0000141D                 mov     byte ptr [ebp+var_4], 4
.text:00001421                 push    offset unk_1    ; bool
.text:00001423                 mov     eax, [ebp+arg_C]
.text:00001426                 push    eax             ; struct IProgress *
.text:00001427                 mov     ecx, [ebp+var_7C] ; this
.text:0000142A                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:0000142F                 lea     ecx, [ebp+var_90]
.text:00001435                 call    ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000143A                 mov     [ebp+var_F4], eax
.text:00001440                 mov     byte ptr [ebp+var_4], 5
.text:00001444                 lea     ecx, [ebp+var_90]
.text:0000144A                 call    ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&(void)
.text:0000144F                 mov     [ebp+var_F8], eax
.text:00001455                 mov     esi, esp
.text:00001457                 mov     ecx, [ebp+var_F8]
.text:0000145D                 push    ecx
.text:0000145E                 push    offset _IID_IArchiveUpdateCallbackFile
.text:00001463                 mov     edx, [ebp+arg_C]
.text:00001466                 push    edx
.text:00001467                 mov     eax, [ebp+arg_C]
.text:0000146A                 mov     ecx, [eax]
.text:0000146C                 mov     edx, [ecx]
.text:0000146E                 call    edx
.text:00001470                 cmp     esi, esp
.text:00001472                 call    __RTC_CheckEsp
.text:00001477                 lea     ecx, [ebp+var_90]
.text:0000147D                 call    ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *(void)
.text:00001482                 mov     [ebp+var_FC], eax
.text:00001488                 cmp     [ebp+var_FC], 0
.text:0000148F                 jz      loc_1525
.text:00001495                 lea     ecx, [ebp+var_90]
.text:0000149B                 call    ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->(void)
.text:000014A0                 mov     [ebp+var_100], eax
.text:000014A6                 mov     eax, [ebp+var_100]
.text:000014AC                 mov     [ebp+var_104], eax
.text:000014B2                 mov     esi, esp
.text:000014B4                 push    3
.text:000014B6                 push    0
.text:000014B8                 push    1
.text:000014BA                 mov     ecx, [ebp+var_104]
.text:000014C0                 push    ecx
.text:000014C1                 mov     edx, [ebp+var_104]
.text:000014C7                 mov     eax, [edx]
.text:000014C9                 mov     ecx, [eax+10h]
.text:000014CC                 call    ecx
.text:000014CE                 cmp     esi, esp
.text:000014D0                 call    __RTC_CheckEsp
.text:000014D5                 mov     [ebp+var_108], eax
.text:000014DB                 mov     edx, [ebp+var_108]
.text:000014E1                 mov     [ebp+var_98], edx
.text:000014E7                 cmp     [ebp+var_98], 0
.text:000014EE                 jz      short loc_1525
.text:000014F0                 mov     eax, [ebp+var_98]
.text:000014F6                 mov     [ebp+var_B8], eax
.text:000014FC                 mov     byte ptr [ebp+var_4], 4
.text:00001500                 lea     ecx, [ebp+var_90]
.text:00001506                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000150B                 mov     byte ptr [ebp+var_4], 0
.text:0000150F                 lea     ecx, [ebp+var_84]
.text:00001515                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000151A                 mov     eax, [ebp+var_B8]
.text:00001520                 jmp     loc_1672
.text:00001525 ; ---------------------------------------------------------------------------
.text:00001525
.text:00001525 loc_1525:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+363j
.text:00001525                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3C2j
.text:00001525                 mov     ecx, [ebp+this]
.text:00001528                 add     ecx, 0Ch
.text:0000152B                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00001530                 mov     [ebp+var_10C], eax
.text:00001536                 cmp     [ebp+var_10C], 0
.text:0000153D                 jz      loc_15D5
.text:00001543                 mov     ecx, [ebp+this]
.text:00001546                 add     ecx, 0Ch
.text:00001549                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:0000154E                 mov     [ebp+var_110], eax
.text:00001554                 mov     ecx, [ebp+var_110]
.text:0000155A                 mov     [ebp+var_114], ecx
.text:00001560                 mov     esi, esp
.text:00001562                 push    0
.text:00001564                 push    0
.text:00001566                 push    0
.text:00001568                 push    0
.text:0000156A                 mov     edx, [ebp+var_114]
.text:00001570                 push    edx
.text:00001571                 mov     eax, [ebp+var_114]
.text:00001577                 mov     ecx, [eax]
.text:00001579                 mov     edx, [ecx+10h]
.text:0000157C                 call    edx
.text:0000157E                 cmp     esi, esp
.text:00001580                 call    __RTC_CheckEsp
.text:00001585                 mov     [ebp+var_118], eax
.text:0000158B                 mov     eax, [ebp+var_118]
.text:00001591                 mov     [ebp+var_9C], eax
.text:00001597                 cmp     [ebp+var_9C], 0
.text:0000159E                 jz      short loc_15D5
.text:000015A0                 mov     ecx, [ebp+var_9C]
.text:000015A6                 mov     [ebp+var_BC], ecx
.text:000015AC                 mov     byte ptr [ebp+var_4], 4
.text:000015B0                 lea     ecx, [ebp+var_90]
.text:000015B6                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000015BB                 mov     byte ptr [ebp+var_4], 0
.text:000015BF                 lea     ecx, [ebp+var_84]
.text:000015C5                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000015CA                 mov     eax, [ebp+var_BC]
.text:000015D0                 jmp     loc_1672
.text:000015D5 ; ---------------------------------------------------------------------------
.text:000015D5
.text:000015D5 loc_15D5:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+411j
.text:000015D5                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+472j
.text:000015D5                 lea     ecx, [ebp+var_84]
.text:000015DB                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:000015E0                 mov     [ebp+var_11C], eax
.text:000015E6                 mov     ecx, [ebp+this]
.text:000015E9                 add     ecx, 0Ch
.text:000015EC                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000015F1                 mov     [ebp+var_120], eax
.text:000015F7                 mov     edx, [ebp+var_11C]
.text:000015FD                 push    edx             ; struct ISequentialOutStream *
.text:000015FE                 mov     eax, [ebp+arg_4]
.text:00001601                 push    eax             ; struct ISequentialInStream *
.text:00001602                 mov     ecx, [ebp+var_120]
.text:00001608                 push    ecx             ; this
.text:00001609                 call    ?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)
.text:0000160E                 mov     [ebp+var_124], eax
.text:00001614                 mov     edx, [ebp+var_124]
.text:0000161A                 mov     [ebp+var_C0], edx
.text:00001620                 mov     byte ptr [ebp+var_4], 4
.text:00001624                 lea     ecx, [ebp+var_90]
.text:0000162A                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000162F                 mov     byte ptr [ebp+var_4], 0
.text:00001633                 lea     ecx, [ebp+var_84]
.text:00001639                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000163E                 mov     eax, [ebp+var_C0]
.text:00001644                 jmp     short loc_1672
.text:00001644 ?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z endp ; sp-analysis failed
.text:00001644
.text:00001646
.text:00001646 ; =============== S U B R O U T I N E =======================================
.text:00001646
.text:00001646
.text:00001646 __catch$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0 proc near
.text:00001646                                         ; DATA XREF: .xdata$x:00001ECCo
.text:00001646                 mov     dword ptr [ebp-0C4h], 8007000Eh
.text:00001650                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001657                 mov     eax, offset $LN30
.text:0000165C                 retn
.text:0000165C __catch$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0 endp
.text:0000165C
.text:0000165D ; ---------------------------------------------------------------------------
.text:0000165D                 mov     eax, offset __tryend$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1
.text:00001662                 retn
.text:00001663 ; ---------------------------------------------------------------------------
.text:00001663
.text:00001663 __tryend$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1:
.text:00001663                                         ; DATA XREF: .text:0000165Do
.text:00001663                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000166A                 jmp     short loc_1672
.text:0000166C ; ---------------------------------------------------------------------------
.text:0000166C
.text:0000166C $LN30:                                  ; DATA XREF: __catch$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0+11o
.text:0000166C                 mov     eax, [ebp-0C4h]
.text:00001672 ; START OF FUNCTION CHUNK FOR ?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00001672
.text:00001672 loc_1672:                               ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+53j
.text:00001672                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+63j ...
.text:00001672                 push    edx
.text:00001673                 mov     ecx, ebp
.text:00001675                 push    eax
.text:00001676                 lea     edx, $LN41
.text:0000167C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001681                 pop     eax
.text:00001682                 pop     edx
.text:00001683                 mov     ecx, [ebp+var_C]
.text:00001686                 mov     large fs:0, ecx
.text:0000168D                 pop     ecx
.text:0000168E                 pop     edi
.text:0000168F                 pop     esi
.text:00001690                 pop     ebx
.text:00001691                 add     esp, 124h
.text:00001697                 cmp     ebp, esp
.text:00001699                 call    __RTC_CheckEsp
.text:0000169E                 mov     esp, ebp
.text:000016A0                 pop     ebp
.text:000016A1                 retn    10h
.text:000016A1 ; END OF FUNCTION CHUNK FOR ?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:000016A1 ; ---------------------------------------------------------------------------
.text:000016A4 $LN41           dd 7                    ; DATA XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+54Ao
.text:000016A8                 dd offset $LN40
.text:000016AC $LN40           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000016A8o
.text:000016B4                 dd offset $LN32         ; "newData"
.text:000016B8                 dd 0FFFFFFDCh, 4
.text:000016C0                 dd offset $LN33         ; "newProps"
.text:000016C4                 dd 0FFFFFFD0h, 4
.text:000016CC                 dd offset $LN34         ; "indexInArchive"
.text:000016D0                 dd 0FFFFFFB4h, 10h
.text:000016D8                 dd offset $LN35         ; "prop"
.text:000016DC                 db 90h
.text:000016DD                 db 3 dup(0FFh)
.text:000016E0                 dd 10h
.text:000016E4                 dd offset $LN36         ; "prop"
.text:000016E8                 dd 0FFFFFF7Ch, 4
.text:000016F0                 dd offset $LN37         ; "progress"
.text:000016F4                 dd 0FFFFFF70h, 4
.text:000016FC                 dd offset $LN38         ; "opCallback"
.text:00001700 $LN38           db 'opCallback',0       ; DATA XREF: .text:000016FCo
.text:0000170B $LN37           db 'progress',0         ; DATA XREF: .text:000016F0o
.text:00001714 $LN36           db 'prop',0             ; DATA XREF: .text:000016E4o
.text:00001719 $LN35           db 'prop',0             ; DATA XREF: .text:000016D8o
.text:0000171E $LN34           db 'indexInArchive',0   ; DATA XREF: .text:000016CCo
.text:0000172D $LN33           db 'newProps',0         ; DATA XREF: .text:000016C0o
.text:00001736 $LN32           db 'newData',0          ; DATA XREF: .text:000016B4o
.text:0000173E                 db 0Eh dup(0CCh)
.text:0000174C
.text:0000174C ; =============== S U B R O U T I N E =======================================
.text:0000174C
.text:0000174C ; Attributes: bp-based frame
.text:0000174C
.text:0000174C ; int __stdcall NArchive::NBz2::UpdateArchive(int, int, int, CProps *, struct IProgress *)
.text:0000174C ?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z proc near
.text:0000174C                                         ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+251p
.text:0000174C
.text:0000174C var_78          = dword ptr -78h
.text:0000174C var_74          = dword ptr -74h
.text:0000174C var_70          = dword ptr -70h
.text:0000174C var_6C          = dword ptr -6Ch
.text:0000174C var_68          = dword ptr -68h
.text:0000174C var_64          = dword ptr -64h
.text:0000174C var_60          = dword ptr -60h
.text:0000174C var_5C          = dword ptr -5Ch
.text:0000174C var_58          = dword ptr -58h
.text:0000174C var_54          = dword ptr -54h
.text:0000174C var_50          = dword ptr -50h
.text:0000174C var_4C          = dword ptr -4Ch
.text:0000174C var_48          = dword ptr -48h
.text:0000174C var_44          = dword ptr -44h
.text:0000174C var_3C          = byte ptr -3Ch
.text:0000174C var_34          = dword ptr -34h
.text:0000174C var_2C          = byte ptr -2Ch
.text:0000174C var_24          = dword ptr -24h
.text:0000174C var_20          = dword ptr -20h
.text:0000174C var_18          = byte ptr -18h
.text:0000174C var_10          = dword ptr -10h
.text:0000174C var_C           = dword ptr -0Ch
.text:0000174C var_4           = dword ptr -4
.text:0000174C arg_0           = dword ptr  8
.text:0000174C arg_4           = dword ptr  0Ch
.text:0000174C arg_8           = dword ptr  10h
.text:0000174C arg_C           = dword ptr  14h
.text:0000174C arg_10          = dword ptr  18h
.text:0000174C
.text:0000174C                 push    ebp
.text:0000174D                 mov     ebp, esp
.text:0000174F                 push    0FFFFFFFFh
.text:00001751                 push    offset __ehhandler$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z
.text:00001756                 mov     eax, large fs:0
.text:0000175C                 push    eax
.text:0000175D                 sub     esp, 6Ch
.text:00001760                 push    esi
.text:00001761                 push    edi
.text:00001762                 lea     edi, [ebp+var_78]
.text:00001765                 mov     ecx, 1Bh
.text:0000176A                 mov     eax, 0CCCCCCCCh
.text:0000176F                 rep stosd
.text:00001771                 mov     eax, dword ptr ds:___security_cookie
.text:00001776                 xor     eax, ebp
.text:00001778                 push    eax
.text:00001779                 lea     eax, [ebp+var_C]
.text:0000177C                 mov     large fs:0, eax
.text:00001782                 mov     esi, esp
.text:00001784                 mov     eax, [ebp+arg_4]
.text:00001787                 push    eax
.text:00001788                 mov     ecx, [ebp+arg_0]
.text:0000178B                 push    ecx
.text:0000178C                 mov     edx, [ebp+arg_10]
.text:0000178F                 mov     eax, [edx]
.text:00001791                 mov     ecx, [ebp+arg_10]
.text:00001794                 push    ecx
.text:00001795                 mov     edx, [eax+0Ch]
.text:00001798                 call    edx
.text:0000179A                 cmp     esi, esp
.text:0000179C                 call    __RTC_CheckEsp
.text:000017A1                 mov     [ebp+var_10], eax
.text:000017A4                 cmp     [ebp+var_10], 0
.text:000017A8                 jz      short loc_17B2
.text:000017AA                 mov     eax, [ebp+var_10]
.text:000017AD                 jmp     loc_19D1
.text:000017B2 ; ---------------------------------------------------------------------------
.text:000017B2
.text:000017B2 loc_17B2:                               ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+5Cj
.text:000017B2                 lea     ecx, [ebp+var_18]
.text:000017B5                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000017BA                 mov     [ebp+var_4], 0
.text:000017C1                 lea     ecx, [ebp+var_18]
.text:000017C4                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:000017C9                 mov     esi, esp
.text:000017CB                 push    eax
.text:000017CC                 push    0
.text:000017CE                 mov     eax, [ebp+arg_10]
.text:000017D1                 mov     ecx, [eax]
.text:000017D3                 mov     edx, [ebp+arg_10]
.text:000017D6                 push    edx
.text:000017D7                 mov     eax, [ecx+1Ch]
.text:000017DA                 call    eax
.text:000017DC                 cmp     esi, esp
.text:000017DE                 call    __RTC_CheckEsp
.text:000017E3                 mov     [ebp+var_20], eax
.text:000017E6                 cmp     [ebp+var_20], 0
.text:000017EA                 jz      short loc_1809
.text:000017EC                 mov     ecx, [ebp+var_20]
.text:000017EF                 mov     [ebp+var_4C], ecx
.text:000017F2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000017F9                 lea     ecx, [ebp+var_18]
.text:000017FC                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001801                 mov     eax, [ebp+var_4C]
.text:00001804                 jmp     loc_19D1
.text:00001809 ; ---------------------------------------------------------------------------
.text:00001809
.text:00001809 loc_1809:                               ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+9Ej
.text:00001809                 push    38h ; '8'       ; unsigned int
.text:0000180B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001810                 add     esp, 4
.text:00001813                 mov     [ebp+var_54], eax
.text:00001816                 mov     byte ptr [ebp+var_4], 1
.text:0000181A                 cmp     [ebp+var_54], 0
.text:0000181E                 jz      short loc_182D
.text:00001820                 mov     ecx, [ebp+var_54]
.text:00001823                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:00001828                 mov     [ebp+var_6C], eax
.text:0000182B                 jmp     short loc_1834
.text:0000182D ; ---------------------------------------------------------------------------
.text:0000182D
.text:0000182D loc_182D:                               ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+D2j
.text:0000182D                 mov     [ebp+var_6C], 0
.text:00001834
.text:00001834 loc_1834:                               ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+DFj
.text:00001834                 mov     edx, [ebp+var_6C]
.text:00001837                 mov     [ebp+var_50], edx
.text:0000183A                 mov     byte ptr [ebp+var_4], 0
.text:0000183E                 mov     eax, [ebp+var_50]
.text:00001841                 mov     [ebp+var_24], eax
.text:00001844                 mov     ecx, [ebp+var_24]
.text:00001847                 push    ecx
.text:00001848                 lea     ecx, [ebp+var_2C]
.text:0000184B                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00001850                 mov     byte ptr [ebp+var_4], 2
.text:00001854                 push    1               ; bool
.text:00001856                 mov     edx, [ebp+arg_10]
.text:00001859                 push    edx             ; struct IProgress *
.text:0000185A                 mov     ecx, [ebp+var_24] ; this
.text:0000185D                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00001862                 push    1B8h            ; unsigned int
.text:00001867                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000186C                 add     esp, 4
.text:0000186F                 mov     [ebp+var_5C], eax
.text:00001872                 mov     byte ptr [ebp+var_4], 3
.text:00001876                 cmp     [ebp+var_5C], 0
.text:0000187A                 jz      short loc_1889
.text:0000187C                 mov     ecx, [ebp+var_5C] ; this
.text:0000187F                 call    ??0CEncoder@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CEncoder::CEncoder(void)
.text:00001884                 mov     [ebp+var_70], eax
.text:00001887                 jmp     short loc_1890
.text:00001889 ; ---------------------------------------------------------------------------
.text:00001889
.text:00001889 loc_1889:                               ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+12Ej
.text:00001889                 mov     [ebp+var_70], 0
.text:00001890
.text:00001890 loc_1890:                               ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+13Bj
.text:00001890                 mov     eax, [ebp+var_70]
.text:00001893                 mov     [ebp+var_58], eax
.text:00001896                 mov     byte ptr [ebp+var_4], 2
.text:0000189A                 mov     ecx, [ebp+var_58]
.text:0000189D                 mov     [ebp+var_34], ecx
.text:000018A0                 mov     edx, [ebp+var_34]
.text:000018A3                 push    edx
.text:000018A4                 lea     ecx, [ebp+var_3C]
.text:000018A7                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)
.text:000018AC                 mov     byte ptr [ebp+var_4], 4
.text:000018B0                 cmp     [ebp+var_34], 0
.text:000018B4                 jz      short loc_18C1
.text:000018B6                 mov     eax, [ebp+var_34]
.text:000018B9                 add     eax, 4
.text:000018BC                 mov     [ebp+var_74], eax
.text:000018BF                 jmp     short loc_18C8
.text:000018C1 ; ---------------------------------------------------------------------------
.text:000018C1
.text:000018C1 loc_18C1:                               ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+168j
.text:000018C1                 mov     [ebp+var_74], 0
.text:000018C8
.text:000018C8 loc_18C8:                               ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+173j
.text:000018C8                 push    0               ; unsigned __int64 *
.text:000018CA                 mov     ecx, [ebp+var_74]
.text:000018CD                 push    ecx             ; struct ICompressSetCoderProperties *
.text:000018CE                 mov     ecx, [ebp+arg_C] ; this
.text:000018D1                 call    ?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)
.text:000018D6                 mov     [ebp+var_44], eax
.text:000018D9                 cmp     [ebp+var_44], 0
.text:000018DD                 jz      short loc_1914
.text:000018DF                 mov     edx, [ebp+var_44]
.text:000018E2                 mov     [ebp+var_60], edx
.text:000018E5                 mov     byte ptr [ebp+var_4], 2
.text:000018E9                 lea     ecx, [ebp+var_3C]
.text:000018EC                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000018F1                 mov     byte ptr [ebp+var_4], 0
.text:000018F5                 lea     ecx, [ebp+var_2C]
.text:000018F8                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000018FD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001904                 lea     ecx, [ebp+var_18]
.text:00001907                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000190C                 mov     eax, [ebp+var_60]
.text:0000190F                 jmp     loc_19D1
.text:00001914 ; ---------------------------------------------------------------------------
.text:00001914
.text:00001914 loc_1914:                               ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+191j
.text:00001914                 lea     ecx, [ebp+var_3C]
.text:00001917                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:0000191C                 mov     [ebp+var_78], eax
.text:0000191F                 lea     ecx, [ebp+var_2C]
.text:00001922                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00001927                 mov     esi, esp
.text:00001929                 push    eax
.text:0000192A                 push    0
.text:0000192C                 push    0
.text:0000192E                 mov     eax, [ebp+arg_8]
.text:00001931                 push    eax
.text:00001932                 lea     ecx, [ebp+var_18]
.text:00001935                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000193A                 push    eax
.text:0000193B                 mov     ecx, [ebp+var_78]
.text:0000193E                 push    ecx
.text:0000193F                 mov     edx, [ebp+var_78]
.text:00001942                 mov     eax, [edx]
.text:00001944                 mov     ecx, [eax+0Ch]
.text:00001947                 call    ecx
.text:00001949                 cmp     esi, esp
.text:0000194B                 call    __RTC_CheckEsp
.text:00001950                 mov     [ebp+var_48], eax
.text:00001953                 cmp     [ebp+var_48], 0
.text:00001957                 jz      short loc_198B
.text:00001959                 mov     edx, [ebp+var_48]
.text:0000195C                 mov     [ebp+var_64], edx
.text:0000195F                 mov     byte ptr [ebp+var_4], 2
.text:00001963                 lea     ecx, [ebp+var_3C]
.text:00001966                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000196B                 mov     byte ptr [ebp+var_4], 0
.text:0000196F                 lea     ecx, [ebp+var_2C]
.text:00001972                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001977                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000197E                 lea     ecx, [ebp+var_18]
.text:00001981                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001986                 mov     eax, [ebp+var_64]
.text:00001989                 jmp     short loc_19D1
.text:0000198B ; ---------------------------------------------------------------------------
.text:0000198B
.text:0000198B loc_198B:                               ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+20Bj
.text:0000198B                 mov     esi, esp
.text:0000198D                 push    0
.text:0000198F                 mov     eax, [ebp+arg_10]
.text:00001992                 mov     ecx, [eax]
.text:00001994                 mov     edx, [ebp+arg_10]
.text:00001997                 push    edx
.text:00001998                 mov     eax, [ecx+20h]
.text:0000199B                 call    eax
.text:0000199D                 cmp     esi, esp
.text:0000199F                 call    __RTC_CheckEsp
.text:000019A4                 mov     [ebp+var_68], eax
.text:000019A7                 mov     byte ptr [ebp+var_4], 2
.text:000019AB                 lea     ecx, [ebp+var_3C]
.text:000019AE                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000019B3                 mov     byte ptr [ebp+var_4], 0
.text:000019B7                 lea     ecx, [ebp+var_2C]
.text:000019BA                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000019BF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000019C6                 lea     ecx, [ebp+var_18]
.text:000019C9                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000019CE                 mov     eax, [ebp+var_68]
.text:000019D1
.text:000019D1 loc_19D1:                               ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+61j
.text:000019D1                                         ; NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+B8j ...
.text:000019D1                 push    edx
.text:000019D2                 mov     ecx, ebp
.text:000019D4                 push    eax
.text:000019D5                 lea     edx, $LN23
.text:000019DB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000019E0                 pop     eax
.text:000019E1                 pop     edx
.text:000019E2                 mov     ecx, [ebp+var_C]
.text:000019E5                 mov     large fs:0, ecx
.text:000019EC                 pop     ecx
.text:000019ED                 pop     edi
.text:000019EE                 pop     esi
.text:000019EF                 add     esp, 78h
.text:000019F2                 cmp     ebp, esp
.text:000019F4                 call    __RTC_CheckEsp
.text:000019F9                 mov     esp, ebp
.text:000019FB                 pop     ebp
.text:000019FC                 retn    14h
.text:000019FC ?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z endp
.text:000019FC
.text:000019FC ; ---------------------------------------------------------------------------
.text:000019FF                 align 10h
.text:00001A00 $LN23           dd 3                    ; DATA XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+289o
.text:00001A04                 dd offset $LN22
.text:00001A08 $LN22           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00001A04o
.text:00001A10                 dd offset $LN18_0       ; "fileInStream"
.text:00001A14                 dd 0FFFFFFD4h, 4
.text:00001A1C                 dd offset $LN19_0       ; "localProgress"
.text:00001A20                 dd 0FFFFFFC4h, 4
.text:00001A28                 dd offset $LN20_0       ; "encoder"
.text:00001A2C $LN20_0         db 'encoder',0          ; DATA XREF: .text:00001A28o
.text:00001A34 $LN19_0         db 'localProgress',0    ; DATA XREF: .text:00001A1Co
.text:00001A42 $LN18_0         db 'fileInStream',0     ; DATA XREF: .text:00001A10o
.text:00001A4F                 db 0Dh dup(0CCh)
.text:00001A5C
.text:00001A5C ; =============== S U B R O U T I N E =======================================
.text:00001A5C
.text:00001A5C ; Attributes: bp-based frame
.text:00001A5C
.text:00001A5C ; __int32 __stdcall NArchive::NBz2::CHandler::SetProperties(NArchive::NBz2::CHandler *this, const wchar_t *const *, const struct tagPROPVARIANT *, unsigned int)
.text:00001A5C                 public ?SetProperties@CHandler@NBz2@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:00001A5C ?SetProperties@CHandler@NBz2@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z proc near
.text:00001A5C                                         ; DATA XREF: .rdata:00002684o
.text:00001A5C
.text:00001A5C this            = dword ptr  8
.text:00001A5C arg_4           = dword ptr  0Ch
.text:00001A5C arg_8           = dword ptr  10h
.text:00001A5C arg_C           = dword ptr  14h
.text:00001A5C
.text:00001A5C                 push    ebp
.text:00001A5D                 mov     ebp, esp
.text:00001A5F                 mov     eax, [ebp+arg_C]
.text:00001A62                 push    eax             ; unsigned int
.text:00001A63                 mov     ecx, [ebp+arg_8]
.text:00001A66                 push    ecx             ; struct tagPROPVARIANT *
.text:00001A67                 mov     edx, [ebp+arg_4]
.text:00001A6A                 push    edx             ; wchar_t **
.text:00001A6B                 mov     ecx, [ebp+this]
.text:00001A6E                 add     ecx, 3Ch ; '<'  ; this
.text:00001A71                 call    ?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)
.text:00001A76                 cmp     ebp, esp
.text:00001A78                 call    __RTC_CheckEsp
.text:00001A7D                 pop     ebp
.text:00001A7E                 retn    10h
.text:00001A7E ?SetProperties@CHandler@NBz2@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z endp
.text:00001A7E
.text:00001A7E ; ---------------------------------------------------------------------------
.text:00001A81                 db 0Bh dup(0CCh)
.text:00001A8C
.text:00001A8C ; =============== S U B R O U T I N E =======================================
.text:00001A8C
.text:00001A8C ; Attributes: bp-based frame
.text:00001A8C
.text:00001A8C ; struct IInArchive * __stdcall NArchive::NBz2::CreateArc(void)
.text:00001A8C ?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ proc near
.text:00001A8C                                         ; DATA XREF: .rdata:00000050o
.text:00001A8C
.text:00001A8C var_18          = dword ptr -18h
.text:00001A8C var_14          = dword ptr -14h
.text:00001A8C var_10          = dword ptr -10h
.text:00001A8C var_C           = dword ptr -0Ch
.text:00001A8C var_4           = dword ptr -4
.text:00001A8C
.text:00001A8C                 push    ebp
.text:00001A8D                 mov     ebp, esp
.text:00001A8F                 push    0FFFFFFFFh
.text:00001A91                 push    offset __ehhandler$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ
.text:00001A96                 mov     eax, large fs:0
.text:00001A9C                 push    eax
.text:00001A9D                 sub     esp, 0Ch
.text:00001AA0                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00001AA7                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00001AAE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001AB5                 mov     eax, dword ptr ds:___security_cookie
.text:00001ABA                 xor     eax, ebp
.text:00001ABC                 push    eax
.text:00001ABD                 lea     eax, [ebp+var_C]
.text:00001AC0                 mov     large fs:0, eax
.text:00001AC6                 push    78h ; 'x'       ; unsigned int
.text:00001AC8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001ACD                 add     esp, 4
.text:00001AD0                 mov     [ebp+var_14], eax
.text:00001AD3                 mov     [ebp+var_4], 0
.text:00001ADA                 cmp     [ebp+var_14], 0
.text:00001ADE                 jz      short loc_1AED
.text:00001AE0                 mov     ecx, [ebp+var_14] ; this
.text:00001AE3                 call    ??0CHandler@NBz2@NArchive@@QAE@XZ ; NArchive::NBz2::CHandler::CHandler(void)
.text:00001AE8                 mov     [ebp+var_18], eax
.text:00001AEB                 jmp     short loc_1AF4
.text:00001AED ; ---------------------------------------------------------------------------
.text:00001AED
.text:00001AED loc_1AED:                               ; CODE XREF: NArchive::NBz2::CreateArc(void)+52j
.text:00001AED                 mov     [ebp+var_18], 0
.text:00001AF4
.text:00001AF4 loc_1AF4:                               ; CODE XREF: NArchive::NBz2::CreateArc(void)+5Fj
.text:00001AF4                 mov     eax, [ebp+var_18]
.text:00001AF7                 mov     [ebp+var_10], eax
.text:00001AFA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001B01                 mov     eax, [ebp+var_10]
.text:00001B04                 mov     ecx, [ebp+var_C]
.text:00001B07                 mov     large fs:0, ecx
.text:00001B0E                 pop     ecx
.text:00001B0F                 add     esp, 18h
.text:00001B12                 cmp     ebp, esp
.text:00001B14                 call    __RTC_CheckEsp
.text:00001B19                 mov     esp, ebp
.text:00001B1B                 pop     ebp
.text:00001B1C                 retn
.text:00001B1C ?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ endp
.text:00001B1C
.text:00001B1C ; ---------------------------------------------------------------------------
.text:00001B1D                 db 0Fh dup(0CCh)
.text:00001B2C
.text:00001B2C ; =============== S U B R O U T I N E =======================================
.text:00001B2C
.text:00001B2C ; Attributes: bp-based frame
.text:00001B2C
.text:00001B2C ; struct IOutArchive * __stdcall NArchive::NBz2::CreateArcOut(void)
.text:00001B2C ?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ proc near
.text:00001B2C                                         ; DATA XREF: .rdata:00000054o
.text:00001B2C
.text:00001B2C var_1C          = dword ptr -1Ch
.text:00001B2C var_18          = dword ptr -18h
.text:00001B2C var_14          = dword ptr -14h
.text:00001B2C var_10          = dword ptr -10h
.text:00001B2C var_C           = dword ptr -0Ch
.text:00001B2C var_4           = dword ptr -4
.text:00001B2C
.text:00001B2C                 push    ebp
.text:00001B2D                 mov     ebp, esp
.text:00001B2F                 push    0FFFFFFFFh
.text:00001B31                 push    offset __ehhandler$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ
.text:00001B36                 mov     eax, large fs:0
.text:00001B3C                 push    eax
.text:00001B3D                 sub     esp, 10h
.text:00001B40                 mov     eax, 0CCCCCCCCh
.text:00001B45                 mov     [ebp+var_1C], eax
.text:00001B48                 mov     [ebp+var_18], eax
.text:00001B4B                 mov     [ebp+var_14], eax
.text:00001B4E                 mov     [ebp+var_10], eax
.text:00001B51                 mov     eax, dword ptr ds:___security_cookie
.text:00001B56                 xor     eax, ebp
.text:00001B58                 push    eax
.text:00001B59                 lea     eax, [ebp+var_C]
.text:00001B5C                 mov     large fs:0, eax
.text:00001B62                 push    78h ; 'x'       ; unsigned int
.text:00001B64                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001B69                 add     esp, 4
.text:00001B6C                 mov     [ebp+var_14], eax
.text:00001B6F                 mov     [ebp+var_4], 0
.text:00001B76                 cmp     [ebp+var_14], 0
.text:00001B7A                 jz      short loc_1B89
.text:00001B7C                 mov     ecx, [ebp+var_14] ; this
.text:00001B7F                 call    ??0CHandler@NBz2@NArchive@@QAE@XZ ; NArchive::NBz2::CHandler::CHandler(void)
.text:00001B84                 mov     [ebp+var_18], eax
.text:00001B87                 jmp     short loc_1B90
.text:00001B89 ; ---------------------------------------------------------------------------
.text:00001B89
.text:00001B89 loc_1B89:                               ; CODE XREF: NArchive::NBz2::CreateArcOut(void)+4Ej
.text:00001B89                 mov     [ebp+var_18], 0
.text:00001B90
.text:00001B90 loc_1B90:                               ; CODE XREF: NArchive::NBz2::CreateArcOut(void)+5Bj
.text:00001B90                 mov     eax, [ebp+var_18]
.text:00001B93                 mov     [ebp+var_10], eax
.text:00001B96                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001B9D                 cmp     [ebp+var_10], 0
.text:00001BA1                 jz      short loc_1BAE
.text:00001BA3                 mov     ecx, [ebp+var_10]
.text:00001BA6                 add     ecx, 8
.text:00001BA9                 mov     [ebp+var_1C], ecx
.text:00001BAC                 jmp     short loc_1BB5
.text:00001BAE ; ---------------------------------------------------------------------------
.text:00001BAE
.text:00001BAE loc_1BAE:                               ; CODE XREF: NArchive::NBz2::CreateArcOut(void)+75j
.text:00001BAE                 mov     [ebp+var_1C], 0
.text:00001BB5
.text:00001BB5 loc_1BB5:                               ; CODE XREF: NArchive::NBz2::CreateArcOut(void)+80j
.text:00001BB5                 mov     eax, [ebp+var_1C]
.text:00001BB8                 mov     ecx, [ebp+var_C]
.text:00001BBB                 mov     large fs:0, ecx
.text:00001BC2                 pop     ecx
.text:00001BC3                 add     esp, 1Ch
.text:00001BC6                 cmp     ebp, esp
.text:00001BC8                 call    __RTC_CheckEsp
.text:00001BCD                 mov     esp, ebp
.text:00001BCF                 pop     ebp
.text:00001BD0                 retn
.text:00001BD0 ?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ endp
.text:00001BD0
.text:00001BD0 ; ---------------------------------------------------------------------------
.text:00001BD1                 align 4
.text:00001BD1 _text           ends
.text:00001BD1
.rtc$TMZ:00001BD4 ; ===========================================================================
.rtc$TMZ:00001BD4
.rtc$TMZ:00001BD4 ; Segment type: Pure data
.rtc$TMZ:00001BD4 ; Segment permissions: Read
.rtc$TMZ:00001BD4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001BD4                 assume cs:_rtc$TMZ
.rtc$TMZ:00001BD4                 ;org 1BD4h
.rtc$TMZ:00001BD4 ; COMDAT (pick any)
.rtc$TMZ:00001BD4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001BD4 _rtc$TMZ        ends
.rtc$TMZ:00001BD4
.rtc$IMZ:00001BD8 ; ===========================================================================
.rtc$IMZ:00001BD8
.rtc$IMZ:00001BD8 ; Segment type: Pure data
.rtc$IMZ:00001BD8 ; Segment permissions: Read
.rtc$IMZ:00001BD8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001BD8                 assume cs:_rtc$IMZ
.rtc$IMZ:00001BD8                 ;org 1BD8h
.rtc$IMZ:00001BD8 ; COMDAT (pick any)
.rtc$IMZ:00001BD8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001BD8 _rtc$IMZ        ends
.rtc$IMZ:00001BD8
.text:00001BDC ; ===========================================================================
.text:00001BDC
.text:00001BDC ; Segment type: Pure code
.text:00001BDC ; Segment permissions: Read/Execute
.text:00001BDC _text           segment para public 'CODE' use32
.text:00001BDC                 assume cs:_text
.text:00001BDC                 ;org 1BDCh
.text:00001BDC ; COMDAT (pick any)
.text:00001BDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BDC
.text:00001BDC ; =============== S U B R O U T I N E =======================================
.text:00001BDC
.text:00001BDC ; Attributes: bp-based frame
.text:00001BDC
.text:00001BDC ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00001BDC                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00001BDC ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00001BDC                                         ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+29p
.text:00001BDC                                         ; NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+26p ...
.text:00001BDC
.text:00001BDC var_4           = dword ptr -4
.text:00001BDC
.text:00001BDC                 push    ebp
.text:00001BDD                 mov     ebp, esp
.text:00001BDF                 push    ecx
.text:00001BE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001BE7                 mov     [ebp+var_4], ecx
.text:00001BEA                 xor     eax, eax
.text:00001BEC                 mov     ecx, [ebp+var_4]
.text:00001BEF                 mov     [ecx], ax
.text:00001BF2                 xor     edx, edx
.text:00001BF4                 mov     eax, [ebp+var_4]
.text:00001BF7                 mov     [eax+2], dx
.text:00001BFB                 mov     ecx, [ebp+var_4]
.text:00001BFE                 mov     dword ptr [ecx+8], 0
.text:00001C05                 mov     eax, [ebp+var_4]
.text:00001C08                 mov     esp, ebp
.text:00001C0A                 pop     ebp
.text:00001C0B                 retn
.text:00001C0B ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00001C0B
.text:00001C0B _text           ends
.text:00001C0B
.text:00001C0C ; ===========================================================================
.text:00001C0C
.text:00001C0C ; Segment type: Pure code
.text:00001C0C ; Segment permissions: Read/Execute
.text:00001C0C _text           segment para public 'CODE' use32
.text:00001C0C                 assume cs:_text
.text:00001C0C                 ;org 1C0Ch
.text:00001C0C ; COMDAT (pick any)
.text:00001C0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C0C
.text:00001C0C ; =============== S U B R O U T I N E =======================================
.text:00001C0C
.text:00001C0C ; Attributes: bp-based frame
.text:00001C0C
.text:00001C0C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00001C0C                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00001C0C ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00001C0C                                         ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+143p
.text:00001C0C                                         ; NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+93p ...
.text:00001C0C
.text:00001C0C var_4           = dword ptr -4
.text:00001C0C
.text:00001C0C                 push    ebp
.text:00001C0D                 mov     ebp, esp
.text:00001C0F                 push    ecx
.text:00001C10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C17                 mov     [ebp+var_4], ecx
.text:00001C1A                 mov     ecx, [ebp+var_4] ; this
.text:00001C1D                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00001C22                 add     esp, 4
.text:00001C25                 cmp     ebp, esp
.text:00001C27                 call    __RTC_CheckEsp
.text:00001C2C                 mov     esp, ebp
.text:00001C2E                 pop     ebp
.text:00001C2F                 retn
.text:00001C2F ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00001C2F
.text:00001C2F _text           ends
.text:00001C2F
.text$x:00001C30 ; ===========================================================================
.text$x:00001C30
.text$x:00001C30 ; Segment type: Pure code
.text$x:00001C30 ; Segment permissions: Read/Execute
.text$x:00001C30 _text$x         segment para public 'CODE' use32
.text$x:00001C30                 assume cs:_text$x
.text$x:00001C30                 ;org 1C30h
.text$x:00001C30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001C30
.text$x:00001C30 ; =============== S U B R O U T I N E =======================================
.text$x:00001C30
.text$x:00001C30
.text$x:00001C30 __ehhandler$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text$x:00001C30                                         ; DATA XREF: NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5o
.text$x:00001C30
.text$x:00001C30 arg_4           = dword ptr  8
.text$x:00001C30
.text$x:00001C30                 mov     edx, [esp+arg_4]
.text$x:00001C34                 lea     eax, [edx+0Ch]
.text$x:00001C37                 mov     ecx, [edx-34h]
.text$x:00001C3A                 xor     ecx, eax
.text$x:00001C3C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001C41                 mov     ecx, [edx-8]
.text$x:00001C44                 xor     ecx, eax
.text$x:00001C46                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001C4B                 mov     eax, offset __ehfuncinfo$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text$x:00001C50                 jmp     ___CxxFrameHandler3
.text$x:00001C50 __ehhandler$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text$x:00001C50
.text$x:00001C55
.text$x:00001C55 ; =============== S U B R O U T I N E =======================================
.text$x:00001C55
.text$x:00001C55
.text$x:00001C55 __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 proc near
.text$x:00001C55                                         ; DATA XREF: .xdata$x:00001E74o
.text$x:00001C55                 lea     ecx, [ebp-18h]
.text$x:00001C58                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00001C58 __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 endp
.text$x:00001C58
.text$x:00001C5D
.text$x:00001C5D ; =============== S U B R O U T I N E =======================================
.text$x:00001C5D
.text$x:00001C5D
.text$x:00001C5D __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 proc near
.text$x:00001C5D                                         ; DATA XREF: .xdata$x:00001E84o
.text$x:00001C5D                 mov     eax, [ebp-0ACh]
.text$x:00001C63                 push    eax             ; void *
.text$x:00001C64                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001C69                 pop     ecx
.text$x:00001C6A                 retn
.text$x:00001C6A __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 endp
.text$x:00001C6A
.text$x:00001C6B
.text$x:00001C6B ; =============== S U B R O U T I N E =======================================
.text$x:00001C6B
.text$x:00001C6B
.text$x:00001C6B __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 proc near
.text$x:00001C6B                                         ; DATA XREF: .xdata$x:00001E8Co
.text$x:00001C6B                 lea     ecx, [ebp-38h]
.text$x:00001C6E                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00001C6E __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 endp
.text$x:00001C6E
.text$x:00001C73
.text$x:00001C73 ; =============== S U B R O U T I N E =======================================
.text$x:00001C73
.text$x:00001C73
.text$x:00001C73 __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 proc near
.text$x:00001C73                                         ; DATA XREF: .xdata$x:00001E94o
.text$x:00001C73                 mov     eax, [ebp-0B8h]
.text$x:00001C79                 push    eax             ; void *
.text$x:00001C7A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001C7F                 pop     ecx
.text$x:00001C80                 retn
.text$x:00001C80 __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 endp
.text$x:00001C80
.text$x:00001C81
.text$x:00001C81 ; =============== S U B R O U T I N E =======================================
.text$x:00001C81
.text$x:00001C81
.text$x:00001C81 __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 proc near
.text$x:00001C81                                         ; DATA XREF: .xdata$x:00001E9Co
.text$x:00001C81                 lea     ecx, [ebp-4Ch]
.text$x:00001C84                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00001C84 __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 endp
.text$x:00001C84
.text$x:00001C89
.text$x:00001C89 ; =============== S U B R O U T I N E =======================================
.text$x:00001C89
.text$x:00001C89
.text$x:00001C89 __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 proc near
.text$x:00001C89                                         ; DATA XREF: .xdata$x:00001EA4o
.text$x:00001C89                 mov     eax, [ebp-0C0h]
.text$x:00001C8F                 push    eax             ; void *
.text$x:00001C90                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001C95                 pop     ecx
.text$x:00001C96                 retn
.text$x:00001C96 __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 endp
.text$x:00001C96
.text$x:00001C97
.text$x:00001C97 ; =============== S U B R O U T I N E =======================================
.text$x:00001C97
.text$x:00001C97
.text$x:00001C97 __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10 proc near
.text$x:00001C97                                         ; DATA XREF: .xdata$x:00001EACo
.text$x:00001C97                 lea     ecx, [ebp-5Ch]
.text$x:00001C9A                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00001C9A __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10 endp
.text$x:00001C9A
.text$x:00001C9F
.text$x:00001C9F ; =============== S U B R O U T I N E =======================================
.text$x:00001C9F
.text$x:00001C9F
.text$x:00001C9F __ehhandler$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text$x:00001C9F                                         ; DATA XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5o
.text$x:00001C9F
.text$x:00001C9F arg_4           = dword ptr  8
.text$x:00001C9F
.text$x:00001C9F                 mov     edx, [esp+arg_4]
.text$x:00001CA3                 lea     eax, [edx+0Ch]
.text$x:00001CA6                 mov     ecx, [edx-164h]
.text$x:00001CAC                 xor     ecx, eax
.text$x:00001CAE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001CB3                 mov     eax, offset __ehfuncinfo$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text$x:00001CB8                 jmp     ___CxxFrameHandler3
.text$x:00001CB8 __ehhandler$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text$x:00001CB8
.text$x:00001CBD
.text$x:00001CBD ; =============== S U B R O U T I N E =======================================
.text$x:00001CBD
.text$x:00001CBD
.text$x:00001CBD __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2 proc near
.text$x:00001CBD                                         ; DATA XREF: .xdata$x:00001F14o
.text$x:00001CBD                 lea     ecx, [ebp-4Ch]  ; this
.text$x:00001CC0                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00001CC0 __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2 endp
.text$x:00001CC0
.text$x:00001CC5
.text$x:00001CC5 ; =============== S U B R O U T I N E =======================================
.text$x:00001CC5
.text$x:00001CC5
.text$x:00001CC5 __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3 proc near
.text$x:00001CC5                                         ; DATA XREF: .xdata$x:00001F1Co
.text$x:00001CC5                 lea     ecx, [ebp-70h]  ; this
.text$x:00001CC8                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00001CC8 __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3 endp
.text$x:00001CC8
.text$x:00001CCD
.text$x:00001CCD ; =============== S U B R O U T I N E =======================================
.text$x:00001CCD
.text$x:00001CCD
.text$x:00001CCD __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4 proc near
.text$x:00001CCD                                         ; DATA XREF: .xdata$x:00001F24o
.text$x:00001CCD                 mov     eax, [ebp-0B4h]
.text$x:00001CD3                 push    eax             ; void *
.text$x:00001CD4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001CD9                 pop     ecx
.text$x:00001CDA                 retn
.text$x:00001CDA __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4 endp
.text$x:00001CDA
.text$x:00001CDB
.text$x:00001CDB ; =============== S U B R O U T I N E =======================================
.text$x:00001CDB
.text$x:00001CDB
.text$x:00001CDB __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5 proc near
.text$x:00001CDB                                         ; DATA XREF: .xdata$x:00001F2Co
.text$x:00001CDB                 lea     ecx, [ebp-84h]
.text$x:00001CE1                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00001CE1 __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5 endp
.text$x:00001CE1
.text$x:00001CE6
.text$x:00001CE6 ; =============== S U B R O U T I N E =======================================
.text$x:00001CE6
.text$x:00001CE6
.text$x:00001CE6 __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6 proc near
.text$x:00001CE6                                         ; DATA XREF: .xdata$x:00001F34o
.text$x:00001CE6                 lea     ecx, [ebp-90h]
.text$x:00001CEC                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text$x:00001CEC __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6 endp
.text$x:00001CEC
.text$x:00001CF1
.text$x:00001CF1 ; =============== S U B R O U T I N E =======================================
.text$x:00001CF1
.text$x:00001CF1
.text$x:00001CF1 __ehhandler$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z proc near
.text$x:00001CF1                                         ; DATA XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5o
.text$x:00001CF1
.text$x:00001CF1 arg_4           = dword ptr  8
.text$x:00001CF1
.text$x:00001CF1                 mov     edx, [esp+arg_4]
.text$x:00001CF5                 lea     eax, [edx+0Ch]
.text$x:00001CF8                 mov     ecx, [edx-128h]
.text$x:00001CFE                 xor     ecx, eax
.text$x:00001D00                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001D05                 mov     eax, offset __ehfuncinfo$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text$x:00001D0A                 jmp     ___CxxFrameHandler3
.text$x:00001D0A __ehhandler$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z endp
.text$x:00001D0A
.text$x:00001D0F
.text$x:00001D0F ; =============== S U B R O U T I N E =======================================
.text$x:00001D0F
.text$x:00001D0F
.text$x:00001D0F __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$0 proc near
.text$x:00001D0F                                         ; DATA XREF: .xdata$x:00001F68o
.text$x:00001D0F                 lea     ecx, [ebp-18h]
.text$x:00001D12                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00001D12 __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$0 endp
.text$x:00001D12
.text$x:00001D17
.text$x:00001D17 ; =============== S U B R O U T I N E =======================================
.text$x:00001D17
.text$x:00001D17
.text$x:00001D17 __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$1 proc near
.text$x:00001D17                                         ; DATA XREF: .xdata$x:00001F70o
.text$x:00001D17                 mov     eax, [ebp-54h]
.text$x:00001D1A                 push    eax             ; void *
.text$x:00001D1B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001D20                 pop     ecx
.text$x:00001D21                 retn
.text$x:00001D21 __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$1 endp
.text$x:00001D21
.text$x:00001D22
.text$x:00001D22 ; =============== S U B R O U T I N E =======================================
.text$x:00001D22
.text$x:00001D22
.text$x:00001D22 __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$2 proc near
.text$x:00001D22                                         ; DATA XREF: .xdata$x:00001F78o
.text$x:00001D22                 lea     ecx, [ebp-2Ch]
.text$x:00001D25                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00001D25 __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$2 endp
.text$x:00001D25
.text$x:00001D2A
.text$x:00001D2A ; =============== S U B R O U T I N E =======================================
.text$x:00001D2A
.text$x:00001D2A
.text$x:00001D2A __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$3 proc near
.text$x:00001D2A                                         ; DATA XREF: .xdata$x:00001F80o
.text$x:00001D2A                 mov     eax, [ebp-5Ch]
.text$x:00001D2D                 push    eax             ; void *
.text$x:00001D2E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001D33                 pop     ecx
.text$x:00001D34                 retn
.text$x:00001D34 __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$3 endp
.text$x:00001D34
.text$x:00001D35
.text$x:00001D35 ; =============== S U B R O U T I N E =======================================
.text$x:00001D35
.text$x:00001D35
.text$x:00001D35 __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$4 proc near
.text$x:00001D35                                         ; DATA XREF: .xdata$x:00001F88o
.text$x:00001D35                 lea     ecx, [ebp-3Ch]
.text$x:00001D38                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00001D38 __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$4 endp
.text$x:00001D38
.text$x:00001D3D
.text$x:00001D3D ; =============== S U B R O U T I N E =======================================
.text$x:00001D3D
.text$x:00001D3D
.text$x:00001D3D __ehhandler$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z proc near
.text$x:00001D3D                                         ; DATA XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+5o
.text$x:00001D3D
.text$x:00001D3D arg_4           = dword ptr  8
.text$x:00001D3D
.text$x:00001D3D                 mov     edx, [esp+arg_4]
.text$x:00001D41                 lea     eax, [edx+0Ch]
.text$x:00001D44                 mov     ecx, [edx-78h]
.text$x:00001D47                 xor     ecx, eax
.text$x:00001D49                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001D4E                 mov     eax, offset __ehfuncinfo$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z
.text$x:00001D53                 jmp     ___CxxFrameHandler3
.text$x:00001D53 __ehhandler$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z endp
.text$x:00001D53
.text$x:00001D58
.text$x:00001D58 ; =============== S U B R O U T I N E =======================================
.text$x:00001D58
.text$x:00001D58
.text$x:00001D58 __unwindfunclet$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ$0 proc near
.text$x:00001D58                                         ; DATA XREF: .xdata$x:00001F90o
.text$x:00001D58                 mov     eax, [ebp-14h]
.text$x:00001D5B                 push    eax             ; void *
.text$x:00001D5C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001D61                 pop     ecx
.text$x:00001D62                 retn
.text$x:00001D62 __unwindfunclet$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ$0 endp
.text$x:00001D62
.text$x:00001D63
.text$x:00001D63 ; =============== S U B R O U T I N E =======================================
.text$x:00001D63
.text$x:00001D63
.text$x:00001D63 __ehhandler$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ proc near
.text$x:00001D63                                         ; DATA XREF: NArchive::NBz2::CreateArc(void)+5o
.text$x:00001D63
.text$x:00001D63 arg_4           = dword ptr  8
.text$x:00001D63
.text$x:00001D63                 mov     edx, [esp+arg_4]
.text$x:00001D67                 lea     eax, [edx+0Ch]
.text$x:00001D6A                 mov     ecx, [edx-10h]
.text$x:00001D6D                 xor     ecx, eax
.text$x:00001D6F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001D74                 mov     eax, offset __ehfuncinfo$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ
.text$x:00001D79                 jmp     ___CxxFrameHandler3
.text$x:00001D79 __ehhandler$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ endp
.text$x:00001D79
.text$x:00001D7E
.text$x:00001D7E ; =============== S U B R O U T I N E =======================================
.text$x:00001D7E
.text$x:00001D7E
.text$x:00001D7E __unwindfunclet$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ$0 proc near
.text$x:00001D7E                                         ; DATA XREF: .xdata$x:00001FBCo
.text$x:00001D7E                 mov     eax, [ebp-14h]
.text$x:00001D81                 push    eax             ; void *
.text$x:00001D82                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001D87                 pop     ecx
.text$x:00001D88                 retn
.text$x:00001D88 __unwindfunclet$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ$0 endp
.text$x:00001D88
.text$x:00001D89
.text$x:00001D89 ; =============== S U B R O U T I N E =======================================
.text$x:00001D89
.text$x:00001D89
.text$x:00001D89 __ehhandler$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ proc near
.text$x:00001D89                                         ; DATA XREF: NArchive::NBz2::CreateArcOut(void)+5o
.text$x:00001D89
.text$x:00001D89 arg_4           = dword ptr  8
.text$x:00001D89
.text$x:00001D89                 mov     edx, [esp+arg_4]
.text$x:00001D8D                 lea     eax, [edx+0Ch]
.text$x:00001D90                 mov     ecx, [edx-14h]
.text$x:00001D93                 xor     ecx, eax
.text$x:00001D95                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001D9A                 mov     eax, offset __ehfuncinfo$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ
.text$x:00001D9F                 jmp     ___CxxFrameHandler3
.text$x:00001D9F __ehhandler$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ endp
.text$x:00001D9F
.text$x:00001D9F _text$x         ends
.text$x:00001D9F
.xdata$x:00001DA4 ; ===========================================================================
.xdata$x:00001DA4
.xdata$x:00001DA4 ; Segment type: Pure data
.xdata$x:00001DA4 ; Segment permissions: Read
.xdata$x:00001DA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001DA4                 assume cs:_xdata$x
.xdata$x:00001DA4                 ;org 1DA4h
.xdata$x:00001DA4 __catchsym$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 dd offset off_40
.xdata$x:00001DA4                                         ; DATA XREF: .xdata$x:00001DD4o
.xdata$x:00001DA8                 align 10h
.xdata$x:00001DB0                 dd offset __catch$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
.xdata$x:00001DB4 __unwindtable$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db 0FFh
.xdata$x:00001DB4                                         ; DATA XREF: .xdata$x:00001DE0o
.xdata$x:00001DB5                 db 0FFh
.xdata$x:00001DB6                 db 0FFh
.xdata$x:00001DB7                 db 0FFh
.xdata$x:00001DB8                 db    0
.xdata$x:00001DB9                 db    0
.xdata$x:00001DBA                 db    0
.xdata$x:00001DBB                 db    0
.xdata$x:00001DBC                 db 0FFh
.xdata$x:00001DBD                 db 0FFh
.xdata$x:00001DBE                 db 0FFh
.xdata$x:00001DBF                 db 0FFh
.xdata$x:00001DC0                 db    0
.xdata$x:00001DC1                 db    0
.xdata$x:00001DC2                 db    0
.xdata$x:00001DC3                 db    0
.xdata$x:00001DC4 __tryblocktable$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db    0
.xdata$x:00001DC4                                         ; DATA XREF: .xdata$x:00001DE8o
.xdata$x:00001DC5                 db    0
.xdata$x:00001DC6                 db    0
.xdata$x:00001DC7                 db    0
.xdata$x:00001DC8                 db    0
.xdata$x:00001DC9                 db    0
.xdata$x:00001DCA                 db    0
.xdata$x:00001DCB                 db    0
.xdata$x:00001DCC                 db    1
.xdata$x:00001DCD                 db    0
.xdata$x:00001DCE                 db    0
.xdata$x:00001DCF                 db    0
.xdata$x:00001DD0                 db    1
.xdata$x:00001DD1                 db    0
.xdata$x:00001DD2                 db    0
.xdata$x:00001DD3                 db    0
.xdata$x:00001DD4                 dd offset __catchsym$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
.xdata$x:00001DD8 __ehfuncinfo$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db  22h ; "
.xdata$x:00001DD8                                         ; DATA XREF: __ehhandler$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+1Bo
.xdata$x:00001DD9                 db    5
.xdata$x:00001DDA                 db  93h ; ô
.xdata$x:00001DDB                 db  19h
.xdata$x:00001DDC                 db    2
.xdata$x:00001DDD                 db    0
.xdata$x:00001DDE                 db    0
.xdata$x:00001DDF                 db    0
.xdata$x:00001DE0                 dd offset __unwindtable$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00001DE4                 db    1
.xdata$x:00001DE5                 db    0
.xdata$x:00001DE6                 db    0
.xdata$x:00001DE7                 db    0
.xdata$x:00001DE8                 dd offset __tryblocktable$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00001DEC                 db    0
.xdata$x:00001DED                 db    0
.xdata$x:00001DEE                 db    0
.xdata$x:00001DEF                 db    0
.xdata$x:00001DF0                 db    0
.xdata$x:00001DF1                 db    0
.xdata$x:00001DF2                 db    0
.xdata$x:00001DF3                 db    0
.xdata$x:00001DF4                 db    0
.xdata$x:00001DF5                 db    0
.xdata$x:00001DF6                 db    0
.xdata$x:00001DF7                 db    0
.xdata$x:00001DF8                 db    1
.xdata$x:00001DF9                 db    0
.xdata$x:00001DFA                 db    0
.xdata$x:00001DFB                 db    0
.xdata$x:00001DFC __catchsym$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12 dd offset off_40
.xdata$x:00001DFC                                         ; DATA XREF: .xdata$x:00001E64o
.xdata$x:00001E00                 db    0
.xdata$x:00001E01                 db    0
.xdata$x:00001E02                 db    0
.xdata$x:00001E03                 db    0
.xdata$x:00001E04                 db    0
.xdata$x:00001E05                 db    0
.xdata$x:00001E06                 db    0
.xdata$x:00001E07                 db    0
.xdata$x:00001E08                 dd offset __catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
.xdata$x:00001E0C __catchsym$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11 db    9
.xdata$x:00001E0C                                         ; DATA XREF: .xdata$x:00001E50o
.xdata$x:00001E0D                 db    0
.xdata$x:00001E0E                 db    0
.xdata$x:00001E0F                 db    0
.xdata$x:00001E10                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:00001E14                 db  70h ; p
.xdata$x:00001E15                 db 0FFh
.xdata$x:00001E16                 db 0FFh
.xdata$x:00001E17                 db 0FFh
.xdata$x:00001E18                 dd offset __catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
.xdata$x:00001E1C __ehfuncinfo$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db  22h ; "
.xdata$x:00001E1C                                         ; DATA XREF: __ehhandler$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+14o
.xdata$x:00001E1D                 db    5
.xdata$x:00001E1E                 db  93h ; ô
.xdata$x:00001E1F                 db  19h
.xdata$x:00001E20                 db  0Bh
.xdata$x:00001E21                 db    0
.xdata$x:00001E22                 db    0
.xdata$x:00001E23                 db    0
.xdata$x:00001E24                 dd offset __unwindtable$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:00001E28                 db    2
.xdata$x:00001E29                 db    0
.xdata$x:00001E2A                 db    0
.xdata$x:00001E2B                 db    0
.xdata$x:00001E2C                 dd offset __tryblocktable$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:00001E30                 db    0
.xdata$x:00001E31                 db    0
.xdata$x:00001E32                 db    0
.xdata$x:00001E33                 db    0
.xdata$x:00001E34                 db    0
.xdata$x:00001E35                 db    0
.xdata$x:00001E36                 db    0
.xdata$x:00001E37                 db    0
.xdata$x:00001E38                 db    0
.xdata$x:00001E39                 db    0
.xdata$x:00001E3A                 db    0
.xdata$x:00001E3B                 db    0
.xdata$x:00001E3C                 db    1
.xdata$x:00001E3D                 db    0
.xdata$x:00001E3E                 db    0
.xdata$x:00001E3F                 db    0
.xdata$x:00001E40 __tryblocktable$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db    2
.xdata$x:00001E40                                         ; DATA XREF: .xdata$x:00001E2Co
.xdata$x:00001E41                 db    0
.xdata$x:00001E42                 db    0
.xdata$x:00001E43                 db    0
.xdata$x:00001E44                 db    8
.xdata$x:00001E45                 db    0
.xdata$x:00001E46                 db    0
.xdata$x:00001E47                 db    0
.xdata$x:00001E48                 db    9
.xdata$x:00001E49                 db    0
.xdata$x:00001E4A                 db    0
.xdata$x:00001E4B                 db    0
.xdata$x:00001E4C                 db    1
.xdata$x:00001E4D                 db    0
.xdata$x:00001E4E                 db    0
.xdata$x:00001E4F                 db    0
.xdata$x:00001E50                 dd offset __catchsym$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11
.xdata$x:00001E54                 align 8
.xdata$x:00001E58                 db    9
.xdata$x:00001E59                 db    0
.xdata$x:00001E5A                 db    0
.xdata$x:00001E5B                 db    0
.xdata$x:00001E5C                 db  0Ah
.xdata$x:00001E5D                 db    0
.xdata$x:00001E5E                 db    0
.xdata$x:00001E5F                 db    0
.xdata$x:00001E60                 db    1
.xdata$x:00001E61                 db    0
.xdata$x:00001E62                 db    0
.xdata$x:00001E63                 db    0
.xdata$x:00001E64                 dd offset __catchsym$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12
.xdata$x:00001E68 __unwindtable$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db 0FFh
.xdata$x:00001E68                                         ; DATA XREF: .xdata$x:00001E24o
.xdata$x:00001E69                 db 0FFh
.xdata$x:00001E6A                 db 0FFh
.xdata$x:00001E6B                 db 0FFh
.xdata$x:00001E6C                 db    0
.xdata$x:00001E6D                 db    0
.xdata$x:00001E6E                 db    0
.xdata$x:00001E6F                 db    0
.xdata$x:00001E70                 db    0
.xdata$x:00001E71                 db    0
.xdata$x:00001E72                 db    0
.xdata$x:00001E73                 db    0
.xdata$x:00001E74                 dd offset __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
.xdata$x:00001E78                 db    1
.xdata$x:00001E79                 db    0
.xdata$x:00001E7A                 db    0
.xdata$x:00001E7B                 db    0
.xdata$x:00001E7C                 db    0
.xdata$x:00001E7D                 db    0
.xdata$x:00001E7E                 db    0
.xdata$x:00001E7F                 db    0
.xdata$x:00001E80                 db    2
.xdata$x:00001E81                 db    0
.xdata$x:00001E82                 db    0
.xdata$x:00001E83                 db    0
.xdata$x:00001E84                 dd offset __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
.xdata$x:00001E88                 db    2
.xdata$x:00001E89                 db    0
.xdata$x:00001E8A                 db    0
.xdata$x:00001E8B                 db    0
.xdata$x:00001E8C                 dd offset __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
.xdata$x:00001E90                 db    4
.xdata$x:00001E91                 db    0
.xdata$x:00001E92                 db    0
.xdata$x:00001E93                 db    0
.xdata$x:00001E94                 dd offset __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
.xdata$x:00001E98                 db    4
.xdata$x:00001E99                 db    0
.xdata$x:00001E9A                 db    0
.xdata$x:00001E9B                 db    0
.xdata$x:00001E9C                 dd offset __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
.xdata$x:00001EA0                 db    6
.xdata$x:00001EA1                 db    0
.xdata$x:00001EA2                 db    0
.xdata$x:00001EA3                 db    0
.xdata$x:00001EA4                 dd offset __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9
.xdata$x:00001EA8                 db    6
.xdata$x:00001EA9                 db    0
.xdata$x:00001EAA                 db    0
.xdata$x:00001EAB                 db    0
.xdata$x:00001EAC                 dd offset __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10
.xdata$x:00001EB0                 db    1
.xdata$x:00001EB1                 db    0
.xdata$x:00001EB2                 db    0
.xdata$x:00001EB3                 db    0
.xdata$x:00001EB4                 db    0
.xdata$x:00001EB5                 db    0
.xdata$x:00001EB6                 db    0
.xdata$x:00001EB7                 db    0
.xdata$x:00001EB8                 db 0FFh
.xdata$x:00001EB9                 db 0FFh
.xdata$x:00001EBA                 db 0FFh
.xdata$x:00001EBB                 db 0FFh
.xdata$x:00001EBC                 db    0
.xdata$x:00001EBD                 db    0
.xdata$x:00001EBE                 db    0
.xdata$x:00001EBF                 db    0
.xdata$x:00001EC0 __catchsym$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7 dd offset off_40
.xdata$x:00001EC0                                         ; DATA XREF: .xdata$x:00001EE0o
.xdata$x:00001EC4                 db    0
.xdata$x:00001EC5                 db    0
.xdata$x:00001EC6                 db    0
.xdata$x:00001EC7                 db    0
.xdata$x:00001EC8                 db    0
.xdata$x:00001EC9                 db    0
.xdata$x:00001ECA                 db    0
.xdata$x:00001ECB                 db    0
.xdata$x:00001ECC                 dd offset __catch$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0
.xdata$x:00001ED0 __tryblocktable$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db    0
.xdata$x:00001ED0                                         ; DATA XREF: .xdata$x:00001EF4o
.xdata$x:00001ED1                 db    0
.xdata$x:00001ED2                 db    0
.xdata$x:00001ED3                 db    0
.xdata$x:00001ED4                 db    5
.xdata$x:00001ED5                 db    0
.xdata$x:00001ED6                 db    0
.xdata$x:00001ED7                 db    0
.xdata$x:00001ED8                 db    6
.xdata$x:00001ED9                 db    0
.xdata$x:00001EDA                 db    0
.xdata$x:00001EDB                 db    0
.xdata$x:00001EDC                 db    1
.xdata$x:00001EDD                 db    0
.xdata$x:00001EDE                 db    0
.xdata$x:00001EDF                 db    0
.xdata$x:00001EE0                 dd offset __catchsym$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7
.xdata$x:00001EE4 __ehfuncinfo$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db  22h ; "
.xdata$x:00001EE4                                         ; DATA XREF: __ehhandler$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z+14o
.xdata$x:00001EE5                 db    5
.xdata$x:00001EE6                 db  93h ; ô
.xdata$x:00001EE7                 db  19h
.xdata$x:00001EE8                 db    7
.xdata$x:00001EE9                 db    0
.xdata$x:00001EEA                 db    0
.xdata$x:00001EEB                 db    0
.xdata$x:00001EEC                 dd offset __unwindtable$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.xdata$x:00001EF0                 db    1
.xdata$x:00001EF1                 db    0
.xdata$x:00001EF2                 db    0
.xdata$x:00001EF3                 db    0
.xdata$x:00001EF4                 dd offset __tryblocktable$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.xdata$x:00001EF8                 db    0
.xdata$x:00001EF9                 db    0
.xdata$x:00001EFA                 db    0
.xdata$x:00001EFB                 db    0
.xdata$x:00001EFC                 db    0
.xdata$x:00001EFD                 db    0
.xdata$x:00001EFE                 db    0
.xdata$x:00001EFF                 db    0
.xdata$x:00001F00                 db    0
.xdata$x:00001F01                 db    0
.xdata$x:00001F02                 db    0
.xdata$x:00001F03                 db    0
.xdata$x:00001F04                 db    1
.xdata$x:00001F05                 db    0
.xdata$x:00001F06                 db    0
.xdata$x:00001F07                 db    0
.xdata$x:00001F08 __unwindtable$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db 0FFh
.xdata$x:00001F08                                         ; DATA XREF: .xdata$x:00001EECo
.xdata$x:00001F09                 db 0FFh
.xdata$x:00001F0A                 db 0FFh
.xdata$x:00001F0B                 db 0FFh
.xdata$x:00001F0C                 db    0
.xdata$x:00001F0D                 db    0
.xdata$x:00001F0E                 db    0
.xdata$x:00001F0F                 db    0
.xdata$x:00001F10                 db    0
.xdata$x:00001F11                 db    0
.xdata$x:00001F12                 db    0
.xdata$x:00001F13                 db    0
.xdata$x:00001F14                 dd offset __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2
.xdata$x:00001F18                 db    0
.xdata$x:00001F19                 db    0
.xdata$x:00001F1A                 db    0
.xdata$x:00001F1B                 db    0
.xdata$x:00001F1C                 dd offset __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3
.xdata$x:00001F20                 db    0
.xdata$x:00001F21                 db    0
.xdata$x:00001F22                 db    0
.xdata$x:00001F23                 db    0
.xdata$x:00001F24                 dd offset __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4
.xdata$x:00001F28                 db    0
.xdata$x:00001F29                 db    0
.xdata$x:00001F2A                 db    0
.xdata$x:00001F2B                 db    0
.xdata$x:00001F2C                 dd offset __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5
.xdata$x:00001F30                 db    4
.xdata$x:00001F31                 db    0
.xdata$x:00001F32                 db    0
.xdata$x:00001F33                 db    0
.xdata$x:00001F34                 dd offset __unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6
.xdata$x:00001F38                 db 0FFh
.xdata$x:00001F39                 db 0FFh
.xdata$x:00001F3A                 db 0FFh
.xdata$x:00001F3B                 db 0FFh
.xdata$x:00001F3C                 db    0
.xdata$x:00001F3D                 db    0
.xdata$x:00001F3E                 db    0
.xdata$x:00001F3F                 db    0
.xdata$x:00001F40 __ehfuncinfo$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z db  22h ; "
.xdata$x:00001F40                                         ; DATA XREF: __ehhandler$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z+11o
.xdata$x:00001F41                 db    5
.xdata$x:00001F42                 db  93h ; ô
.xdata$x:00001F43                 db  19h
.xdata$x:00001F44                 db    5
.xdata$x:00001F45                 db    0
.xdata$x:00001F46                 db    0
.xdata$x:00001F47                 db    0
.xdata$x:00001F48                 dd offset __unwindtable$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z
.xdata$x:00001F4C                 align 20h
.xdata$x:00001F60                 db    1
.xdata$x:00001F61                 db    0
.xdata$x:00001F62                 db    0
.xdata$x:00001F63                 db    0
.xdata$x:00001F64 __unwindtable$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z db 0FFh
.xdata$x:00001F64                                         ; DATA XREF: .xdata$x:00001F48o
.xdata$x:00001F65                 db 0FFh
.xdata$x:00001F66                 db 0FFh
.xdata$x:00001F67                 db 0FFh
.xdata$x:00001F68                 dd offset __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$0
.xdata$x:00001F6C                 align 10h
.xdata$x:00001F70                 dd offset __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$1
.xdata$x:00001F74                 align 8
.xdata$x:00001F78                 dd offset __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$2
.xdata$x:00001F7C                 db    2
.xdata$x:00001F7D                 db    0
.xdata$x:00001F7E                 db    0
.xdata$x:00001F7F                 db    0
.xdata$x:00001F80                 dd offset __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$3
.xdata$x:00001F84                 db    2
.xdata$x:00001F85                 db    0
.xdata$x:00001F86                 db    0
.xdata$x:00001F87                 db    0
.xdata$x:00001F88                 dd offset __unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$4
.xdata$x:00001F8C __unwindtable$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ db 0FFh
.xdata$x:00001F8C                                         ; DATA XREF: .xdata$x:00001F9Co
.xdata$x:00001F8D                 db 0FFh
.xdata$x:00001F8E                 db 0FFh
.xdata$x:00001F8F                 db 0FFh
.xdata$x:00001F90                 dd offset __unwindfunclet$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ$0
.xdata$x:00001F94 __ehfuncinfo$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ db  22h ; "
.xdata$x:00001F94                                         ; DATA XREF: __ehhandler$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ+11o
.xdata$x:00001F95                 db    5
.xdata$x:00001F96                 db  93h ; ô
.xdata$x:00001F97                 db  19h
.xdata$x:00001F98                 db    1
.xdata$x:00001F99                 db    0
.xdata$x:00001F9A                 db    0
.xdata$x:00001F9B                 db    0
.xdata$x:00001F9C                 dd offset __unwindtable$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ
.xdata$x:00001FA0                 db    0
.xdata$x:00001FA1                 db    0
.xdata$x:00001FA2                 db    0
.xdata$x:00001FA3                 db    0
.xdata$x:00001FA4                 db    0
.xdata$x:00001FA5                 db    0
.xdata$x:00001FA6                 db    0
.xdata$x:00001FA7                 db    0
.xdata$x:00001FA8                 db    0
.xdata$x:00001FA9                 db    0
.xdata$x:00001FAA                 db    0
.xdata$x:00001FAB                 db    0
.xdata$x:00001FAC                 db    0
.xdata$x:00001FAD                 db    0
.xdata$x:00001FAE                 db    0
.xdata$x:00001FAF                 db    0
.xdata$x:00001FB0                 db    0
.xdata$x:00001FB1                 db    0
.xdata$x:00001FB2                 db    0
.xdata$x:00001FB3                 db    0
.xdata$x:00001FB4                 db    1
.xdata$x:00001FB5                 db    0
.xdata$x:00001FB6                 db    0
.xdata$x:00001FB7                 db    0
.xdata$x:00001FB8 __unwindtable$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ db 0FFh
.xdata$x:00001FB8                                         ; DATA XREF: .xdata$x:00001FC8o
.xdata$x:00001FB9                 db 0FFh
.xdata$x:00001FBA                 db 0FFh
.xdata$x:00001FBB                 db 0FFh
.xdata$x:00001FBC                 dd offset __unwindfunclet$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ$0
.xdata$x:00001FC0 __ehfuncinfo$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ db  22h ; "
.xdata$x:00001FC0                                         ; DATA XREF: __ehhandler$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ+11o
.xdata$x:00001FC1                 db    5
.xdata$x:00001FC2                 db  93h ; ô
.xdata$x:00001FC3                 db  19h
.xdata$x:00001FC4                 db    1
.xdata$x:00001FC5                 db    0
.xdata$x:00001FC6                 db    0
.xdata$x:00001FC7                 db    0
.xdata$x:00001FC8                 dd offset __unwindtable$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ
.xdata$x:00001FCC                 align 20h
.xdata$x:00001FE0                 db    1
.xdata$x:00001FE1                 db    0
.xdata$x:00001FE2                 db    0
.xdata$x:00001FE3                 db    0
.xdata$x:00001FE3 _xdata$x        ends
.xdata$x:00001FE3
.data:00001FE4 ; ===========================================================================
.data:00001FE4
.data:00001FE4 ; Segment type: Pure data
.data:00001FE4 ; Segment permissions: Read/Write
.data:00001FE4 _data           segment dword public 'DATA' use32
.data:00001FE4                 assume cs:_data
.data:00001FE4                 ;org 1FE4h
.data:00001FE4 ; COMDAT (pick any)
.data:00001FE4                 public ??_R0?AUCInBufferException@@@8
.data:00001FE4 ; struct CInBufferException `RTTI Type Descriptor'
.data:00001FE4 ??_R0?AUCInBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00001FE4                                         ; DATA XREF: .xdata$x:00001E10o
.data:00001FE4                                         ; const type_info::`vftable'
.data:00001FE8                 db    0
.data:00001FE9                 db    0
.data:00001FEA                 db    0
.data:00001FEB                 db    0
.data:00001FEC                 db  2Eh ; .
.data:00001FED                 db  3Fh ; ?
.data:00001FEE                 db  41h ; A
.data:00001FEF                 db  55h ; U
.data:00001FF0                 db  43h ; C
.data:00001FF1                 db  49h ; I
.data:00001FF2                 db  6Eh ; n
.data:00001FF3                 db  42h ; B
.data:00001FF4                 db  75h ; u
.data:00001FF5                 db  66h ; f
.data:00001FF6                 db  66h ; f
.data:00001FF7                 db  65h ; e
.data:00001FF8                 db  72h ; r
.data:00001FF9                 db  45h ; E
.data:00001FFA                 db  78h ; x
.data:00001FFB                 db  63h ; c
.data:00001FFC                 db  65h ; e
.data:00001FFD                 db  70h ; p
.data:00001FFE                 db  74h ; t
.data:00001FFF                 db  69h ; i
.data:00002000                 db  6Fh ; o
.data:00002001                 db  6Eh ; n
.data:00002002                 db  40h ; @
.data:00002003                 db  40h ; @
.data:00002004                 db    0
.data:00002005                 align 4
.data:00002005 _data           ends
.data:00002005
.text:00002008 ; ===========================================================================
.text:00002008
.text:00002008 ; Segment type: Pure code
.text:00002008 ; Segment permissions: Read/Execute
.text:00002008 _text           segment para public 'CODE' use32
.text:00002008                 assume cs:_text
.text:00002008                 ;org 2008h
.text:00002008 ; COMDAT (pick any)
.text:00002008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002008
.text:00002008 ; =============== S U B R O U T I N E =======================================
.text:00002008
.text:00002008 ; Attributes: bp-based frame
.text:00002008
.text:00002008 ; unsigned __int64 __thiscall NCompress::NBZip2::CDecoder::GetStreamSize(NCompress::NBZip2::CDecoder *__hidden this)
.text:00002008                 public ?GetStreamSize@CDecoder@NBZip2@NCompress@@QBE_KXZ
.text:00002008 ?GetStreamSize@CDecoder@NBZip2@NCompress@@QBE_KXZ proc near
.text:00002008                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+640p
.text:00002008
.text:00002008 var_4           = dword ptr -4
.text:00002008
.text:00002008                 push    ebp
.text:00002009                 mov     ebp, esp
.text:0000200B                 push    ecx
.text:0000200C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002013                 mov     [ebp+var_4], ecx
.text:00002016                 mov     ecx, [ebp+var_4]
.text:00002019                 add     ecx, 140h
.text:0000201F                 call    ?GetStreamSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ; NBitm::CDecoder<CInBuffer>::GetStreamSize(void)
.text:00002024                 add     esp, 4
.text:00002027                 cmp     ebp, esp
.text:00002029                 call    __RTC_CheckEsp
.text:0000202E                 mov     esp, ebp
.text:00002030                 pop     ebp
.text:00002031                 retn
.text:00002031 ?GetStreamSize@CDecoder@NBZip2@NCompress@@QBE_KXZ endp
.text:00002031
.text:00002031 ; ---------------------------------------------------------------------------
.text:00002032                 align 4
.text:00002032 _text           ends
.text:00002032
.text:00002034 ; ===========================================================================
.text:00002034
.text:00002034 ; Segment type: Pure code
.text:00002034 ; Segment permissions: Read/Execute
.text:00002034 _text           segment para public 'CODE' use32
.text:00002034                 assume cs:_text
.text:00002034                 ;org 2034h
.text:00002034 ; COMDAT (pick any)
.text:00002034                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002034
.text:00002034 ; =============== S U B R O U T I N E =======================================
.text:00002034
.text:00002034 ; Attributes: bp-based frame
.text:00002034
.text:00002034 ; unsigned __int64 __thiscall NCompress::NBZip2::CDecoder::GetInputProcessedSize(NCompress::NBZip2::CDecoder *__hidden this)
.text:00002034                 public ?GetInputProcessedSize@CDecoder@NBZip2@NCompress@@QBE_KXZ
.text:00002034 ?GetInputProcessedSize@CDecoder@NBZip2@NCompress@@QBE_KXZ proc near
.text:00002034                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6F3p
.text:00002034
.text:00002034 var_4           = dword ptr -4
.text:00002034
.text:00002034                 push    ebp
.text:00002035                 mov     ebp, esp
.text:00002037                 push    ecx
.text:00002038                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000203F                 mov     [ebp+var_4], ecx
.text:00002042                 mov     ecx, [ebp+var_4]
.text:00002045                 add     ecx, 140h
.text:0000204B                 call    ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ; NBitm::CDecoder<CInBuffer>::GetProcessedSize(void)
.text:00002050                 add     esp, 4
.text:00002053                 cmp     ebp, esp
.text:00002055                 call    __RTC_CheckEsp
.text:0000205A                 mov     esp, ebp
.text:0000205C                 pop     ebp
.text:0000205D                 retn
.text:0000205D ?GetInputProcessedSize@CDecoder@NBZip2@NCompress@@QBE_KXZ endp
.text:0000205D
.text:0000205D ; ---------------------------------------------------------------------------
.text:0000205E                 align 10h
.text:0000205E _text           ends
.text:0000205E
.text:00002060 ; ===========================================================================
.text:00002060
.text:00002060 ; Segment type: Pure code
.text:00002060 ; Segment permissions: Read/Execute
.text:00002060 _text           segment para public 'CODE' use32
.text:00002060                 assume cs:_text
.text:00002060                 ;org 2060h
.text:00002060 ; COMDAT (pick any)
.text:00002060                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002060
.text:00002060 ; =============== S U B R O U T I N E =======================================
.text:00002060
.text:00002060 ; Attributes: bp-based frame
.text:00002060
.text:00002060 ; void __thiscall NCompress::NBZip2::CDecoder::InitNumBlocks(NCompress::NBZip2::CDecoder *__hidden this)
.text:00002060                 public ?InitNumBlocks@CDecoder@NBZip2@NCompress@@QAEXXZ
.text:00002060 ?InitNumBlocks@CDecoder@NBZip2@NCompress@@QAEXXZ proc near
.text:00002060                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4BEp
.text:00002060
.text:00002060 var_4           = dword ptr -4
.text:00002060
.text:00002060                 push    ebp
.text:00002061                 mov     ebp, esp
.text:00002063                 push    ecx
.text:00002064                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000206B                 mov     [ebp+var_4], ecx
.text:0000206E                 mov     ecx, [ebp+var_4]
.text:00002071                 add     ecx, 138h       ; this
.text:00002077                 call    ?InitNumBlocks@CBase@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CBase::InitNumBlocks(void)
.text:0000207C                 add     esp, 4
.text:0000207F                 cmp     ebp, esp
.text:00002081                 call    __RTC_CheckEsp
.text:00002086                 mov     esp, ebp
.text:00002088                 pop     ebp
.text:00002089                 retn
.text:00002089 ?InitNumBlocks@CDecoder@NBZip2@NCompress@@QAEXXZ endp
.text:00002089
.text:00002089 ; ---------------------------------------------------------------------------
.text:0000208A                 align 4
.text:0000208A _text           ends
.text:0000208A
.text:0000208C ; ===========================================================================
.text:0000208C
.text:0000208C ; Segment type: Pure code
.text:0000208C ; Segment permissions: Read/Execute
.text:0000208C _text           segment para public 'CODE' use32
.text:0000208C                 assume cs:_text
.text:0000208C                 ;org 208Ch
.text:0000208C ; COMDAT (pick any)
.text:0000208C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000208C
.text:0000208C ; =============== S U B R O U T I N E =======================================
.text:0000208C
.text:0000208C ; Attributes: bp-based frame
.text:0000208C
.text:0000208C ; void __thiscall NCompress::NBZip2::CBase::InitNumBlocks(NCompress::NBZip2::CBase *__hidden this)
.text:0000208C                 public ?InitNumBlocks@CBase@NBZip2@NCompress@@QAEXXZ
.text:0000208C ?InitNumBlocks@CBase@NBZip2@NCompress@@QAEXXZ proc near
.text:0000208C                                         ; CODE XREF: NCompress::NBZip2::CDecoder::InitNumBlocks(void)+17p
.text:0000208C
.text:0000208C var_4           = dword ptr -4
.text:0000208C
.text:0000208C                 push    ebp
.text:0000208D                 mov     ebp, esp
.text:0000208F                 push    ecx
.text:00002090                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002097                 mov     [ebp+var_4], ecx
.text:0000209A                 mov     eax, [ebp+var_4]
.text:0000209D                 mov     dword ptr [eax+6EB0h], 0
.text:000020A7                 mov     dword ptr [eax+6EB4h], 0
.text:000020B1                 mov     esp, ebp
.text:000020B3                 pop     ebp
.text:000020B4                 retn
.text:000020B4 ?InitNumBlocks@CBase@NBZip2@NCompress@@QAEXXZ endp
.text:000020B4
.text:000020B4 ; ---------------------------------------------------------------------------
.text:000020B5                 align 4
.text:000020B5 _text           ends
.text:000020B5
.text:000020B8 ; ===========================================================================
.text:000020B8
.text:000020B8 ; Segment type: Pure code
.text:000020B8 ; Segment permissions: Read/Execute
.text:000020B8 _text           segment para public 'CODE' use32
.text:000020B8                 assume cs:_text
.text:000020B8                 ;org 20B8h
.text:000020B8 ; COMDAT (pick any)
.text:000020B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000020B8
.text:000020B8 ; =============== S U B R O U T I N E =======================================
.text:000020B8
.text:000020B8 ; Attributes: bp-based frame
.text:000020B8
.text:000020B8 ; unsigned __int64 __thiscall NCompress::NBZip2::CDecoder::GetNumBlocks(NCompress::NBZip2::CDecoder *__hidden this)
.text:000020B8                 public ?GetNumBlocks@CDecoder@NBZip2@NCompress@@QBE_KXZ
.text:000020B8 ?GetNumBlocks@CDecoder@NBZip2@NCompress@@QBE_KXZ proc near
.text:000020B8                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7B8p
.text:000020B8
.text:000020B8 var_4           = dword ptr -4
.text:000020B8
.text:000020B8                 push    ebp
.text:000020B9                 mov     ebp, esp
.text:000020BB                 push    ecx
.text:000020BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000020C3                 mov     [ebp+var_4], ecx
.text:000020C6                 mov     ecx, [ebp+var_4]
.text:000020C9                 mov     eax, [ecx+6FE8h]
.text:000020CF                 mov     edx, [ecx+6FECh]
.text:000020D5                 mov     esp, ebp
.text:000020D7                 pop     ebp
.text:000020D8                 retn
.text:000020D8 ?GetNumBlocks@CDecoder@NBZip2@NCompress@@QBE_KXZ endp
.text:000020D8
.text:000020D8 ; ---------------------------------------------------------------------------
.text:000020D9                 align 4
.text:000020D9 _text           ends
.text:000020D9
.text:000020DC ; ===========================================================================
.text:000020DC
.text:000020DC ; Segment type: Pure code
.text:000020DC ; Segment permissions: Read/Execute
.text:000020DC _text           segment para public 'CODE' use32
.text:000020DC                 assume cs:_text
.text:000020DC                 ;org 20DCh
.text:000020DC ; COMDAT (pick any)
.text:000020DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000020DC
.text:000020DC ; =============== S U B R O U T I N E =======================================
.text:000020DC
.text:000020DC ; Attributes: bp-based frame
.text:000020DC
.text:000020DC ; void __thiscall CDummyOutStream::SetStream(CDummyOutStream *this, struct ISequentialOutStream *)
.text:000020DC                 public ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z
.text:000020DC ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z proc near
.text:000020DC                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3F3p
.text:000020DC
.text:000020DC var_4           = dword ptr -4
.text:000020DC arg_0           = dword ptr  8
.text:000020DC
.text:000020DC                 push    ebp
.text:000020DD                 mov     ebp, esp
.text:000020DF                 push    ecx
.text:000020E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000020E7                 mov     [ebp+var_4], ecx
.text:000020EA                 mov     eax, [ebp+arg_0]
.text:000020ED                 push    eax
.text:000020EE                 mov     ecx, [ebp+var_4]
.text:000020F1                 add     ecx, 8
.text:000020F4                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:000020F9                 add     esp, 4
.text:000020FC                 cmp     ebp, esp
.text:000020FE                 call    __RTC_CheckEsp
.text:00002103                 mov     esp, ebp
.text:00002105                 pop     ebp
.text:00002106                 retn    4
.text:00002106 ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z endp
.text:00002106
.text:00002106 ; ---------------------------------------------------------------------------
.text:00002109                 align 4
.text:00002109 _text           ends
.text:00002109
.text:0000210C ; ===========================================================================
.text:0000210C
.text:0000210C ; Segment type: Pure code
.text:0000210C ; Segment permissions: Read/Execute
.text:0000210C _text           segment para public 'CODE' use32
.text:0000210C                 assume cs:_text
.text:0000210C                 ;org 210Ch
.text:0000210C ; COMDAT (pick any)
.text:0000210C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000210C
.text:0000210C ; =============== S U B R O U T I N E =======================================
.text:0000210C
.text:0000210C ; Attributes: bp-based frame
.text:0000210C
.text:0000210C ; void __thiscall CDummyOutStream::Init(CDummyOutStream *__hidden this)
.text:0000210C                 public ?Init@CDummyOutStream@@QAEXXZ
.text:0000210C ?Init@CDummyOutStream@@QAEXXZ proc near ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3FBp
.text:0000210C
.text:0000210C var_4           = dword ptr -4
.text:0000210C
.text:0000210C                 push    ebp
.text:0000210D                 mov     ebp, esp
.text:0000210F                 push    ecx
.text:00002110                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002117                 mov     [ebp+var_4], ecx
.text:0000211A                 mov     eax, [ebp+var_4]
.text:0000211D                 mov     dword ptr [eax+10h], 0
.text:00002124                 mov     dword ptr [eax+14h], 0
.text:0000212B                 mov     esp, ebp
.text:0000212D                 pop     ebp
.text:0000212E                 retn
.text:0000212E ?Init@CDummyOutStream@@QAEXXZ endp
.text:0000212E
.text:0000212E ; ---------------------------------------------------------------------------
.text:0000212F                 align 10h
.text:0000212F _text           ends
.text:0000212F
.text:00002130 ; ===========================================================================
.text:00002130
.text:00002130 ; Segment type: Pure code
.text:00002130 ; Segment permissions: Read/Execute
.text:00002130 _text           segment para public 'CODE' use32
.text:00002130                 assume cs:_text
.text:00002130                 ;org 2130h
.text:00002130 ; COMDAT (pick any)
.text:00002130                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002130
.text:00002130 ; =============== S U B R O U T I N E =======================================
.text:00002130
.text:00002130 ; Attributes: bp-based frame
.text:00002130
.text:00002130 ; unsigned __int64 __thiscall CDummyOutStream::GetSize(CDummyOutStream *__hidden this)
.text:00002130                 public ?GetSize@CDummyOutStream@@QBE_KXZ
.text:00002130 ?GetSize@CDummyOutStream@@QBE_KXZ proc near
.text:00002130                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+61Ap
.text:00002130
.text:00002130 var_4           = dword ptr -4
.text:00002130
.text:00002130                 push    ebp
.text:00002131                 mov     ebp, esp
.text:00002133                 push    ecx
.text:00002134                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000213B                 mov     [ebp+var_4], ecx
.text:0000213E                 mov     ecx, [ebp+var_4]
.text:00002141                 mov     eax, [ecx+10h]
.text:00002144                 mov     edx, [ecx+14h]
.text:00002147                 mov     esp, ebp
.text:00002149                 pop     ebp
.text:0000214A                 retn
.text:0000214A ?GetSize@CDummyOutStream@@QBE_KXZ endp
.text:0000214A
.text:0000214A ; ---------------------------------------------------------------------------
.text:0000214B                 align 4
.text:0000214B _text           ends
.text:0000214B
.text:0000214C ; ===========================================================================
.text:0000214C
.text:0000214C ; Segment type: Pure code
.text:0000214C ; Segment permissions: Read/Execute
.text:0000214C _text           segment para public 'CODE' use32
.text:0000214C                 assume cs:_text
.text:0000214C                 ;org 214Ch
.text:0000214C ; COMDAT (pick any)
.text:0000214C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000214C
.text:0000214C ; =============== S U B R O U T I N E =======================================
.text:0000214C
.text:0000214C ; Attributes: bp-based frame
.text:0000214C
.text:0000214C ; public: __thiscall CDummyOutStream::CDummyOutStream(void)
.text:0000214C                 public ??0CDummyOutStream@@QAE@XZ
.text:0000214C ??0CDummyOutStream@@QAE@XZ proc near    ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+38Fp
.text:0000214C
.text:0000214C var_4           = dword ptr -4
.text:0000214C
.text:0000214C                 push    ebp
.text:0000214D                 mov     ebp, esp
.text:0000214F                 push    ecx
.text:00002150                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002157                 mov     [ebp+var_4], ecx
.text:0000215A                 mov     ecx, [ebp+var_4] ; this
.text:0000215D                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00002162                 mov     ecx, [ebp+var_4]
.text:00002165                 add     ecx, 4          ; this
.text:00002168                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000216D                 mov     eax, [ebp+var_4]
.text:00002170                 mov     dword ptr [eax], offset ??_7CDummyOutStream@@6B@ ; const CDummyOutStream::`vftable'
.text:00002176                 mov     ecx, [ebp+var_4]
.text:00002179                 add     ecx, 8
.text:0000217C                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00002181                 mov     eax, [ebp+var_4]
.text:00002184                 add     esp, 4
.text:00002187                 cmp     ebp, esp
.text:00002189                 call    __RTC_CheckEsp
.text:0000218E                 mov     esp, ebp
.text:00002190                 pop     ebp
.text:00002191                 retn
.text:00002191 ??0CDummyOutStream@@QAE@XZ endp
.text:00002191
.text:00002191 ; ---------------------------------------------------------------------------
.text:00002192                 align 4
.text:00002192 _text           ends
.text:00002192
.rdata:00002194 ; ===========================================================================
.rdata:00002194
.rdata:00002194 ; Segment type: Pure data
.rdata:00002194 ; Segment permissions: Read
.rdata:00002194 _rdata          segment dword public 'DATA' use32
.rdata:00002194                 assume cs:_rdata
.rdata:00002194                 ;org 2194h
.rdata:00002194 ; COMDAT (pick largest)
.rdata:00002194                 dd offset ??_R4CDummyOutStream@@6B@ ; const CDummyOutStream::`RTTI Complete Object Locator'
.rdata:00002198                 public ??_7CDummyOutStream@@6B@
.rdata:00002198 ; const CDummyOutStream::`vftable'
.rdata:00002198 ??_7CDummyOutStream@@6B@ dd offset ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002198                                         ; DATA XREF: CDummyOutStream::CDummyOutStream(void)+24o
.rdata:00002198                                         ; CDummyOutStream::QueryInterface(_GUID const &,void * *)
.rdata:0000219C                 dd offset ?AddRef@CDummyOutStream@@UAGKXZ ; CDummyOutStream::AddRef(void)
.rdata:000021A0                 dd offset ?Release@CDummyOutStream@@UAGKXZ ; CDummyOutStream::Release(void)
.rdata:000021A4                 dd offset ?Write@CDummyOutStream@@UAGJPBXIPAI@Z ; CDummyOutStream::Write(void const *,uint,uint *)
.rdata:000021A4 _rdata          ends
.rdata:000021A4
.rdata$r:000021A8 ; ===========================================================================
.rdata$r:000021A8
.rdata$r:000021A8 ; Segment type: Pure data
.rdata$r:000021A8 ; Segment permissions: Read
.rdata$r:000021A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000021A8                 assume cs:_rdata$r
.rdata$r:000021A8                 ;org 21A8h
.rdata$r:000021A8 ; COMDAT (pick any)
.rdata$r:000021A8                 public ??_R4CDummyOutStream@@6B@
.rdata$r:000021A8 ; const CDummyOutStream::`RTTI Complete Object Locator'
.rdata$r:000021A8 ??_R4CDummyOutStream@@6B@ db    0       ; DATA XREF: .rdata:00002194o
.rdata$r:000021A9                 db    0
.rdata$r:000021AA                 db    0
.rdata$r:000021AB                 db    0
.rdata$r:000021AC                 db    0
.rdata$r:000021AD                 db    0
.rdata$r:000021AE                 db    0
.rdata$r:000021AF                 db    0
.rdata$r:000021B0                 db    0
.rdata$r:000021B1                 db    0
.rdata$r:000021B2                 db    0
.rdata$r:000021B3                 db    0
.rdata$r:000021B4                 dd offset ??_R0?AVCDummyOutStream@@@8 ; CDummyOutStream `RTTI Type Descriptor'
.rdata$r:000021B8                 dd offset ??_R3CDummyOutStream@@8 ; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000021B8 _rdata$r        ends
.rdata$r:000021B8
.data:000021BC ; ===========================================================================
.data:000021BC
.data:000021BC ; Segment type: Pure data
.data:000021BC ; Segment permissions: Read/Write
.data:000021BC _data           segment dword public 'DATA' use32
.data:000021BC                 assume cs:_data
.data:000021BC                 ;org 21BCh
.data:000021BC ; COMDAT (pick any)
.data:000021BC                 public ??_R0?AVCDummyOutStream@@@8
.data:000021BC ; class CDummyOutStream `RTTI Type Descriptor'
.data:000021BC ??_R0?AVCDummyOutStream@@@8 dd offset ??_7type_info@@6B@
.data:000021BC                                         ; DATA XREF: .rdata$r:000021B4o
.data:000021BC                                         ; .rdata$r:CDummyOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000021BC                                         ; const type_info::`vftable'
.data:000021C0                 db    0
.data:000021C1                 db    0
.data:000021C2                 db    0
.data:000021C3                 db    0
.data:000021C4                 db  2Eh ; .
.data:000021C5                 db  3Fh ; ?
.data:000021C6                 db  41h ; A
.data:000021C7                 db  56h ; V
.data:000021C8                 db  43h ; C
.data:000021C9                 db  44h ; D
.data:000021CA                 db  75h ; u
.data:000021CB                 db  6Dh ; m
.data:000021CC                 db  6Dh ; m
.data:000021CD                 db  79h ; y
.data:000021CE                 db  4Fh ; O
.data:000021CF                 db  75h ; u
.data:000021D0                 db  74h ; t
.data:000021D1                 db  53h ; S
.data:000021D2                 db  74h ; t
.data:000021D3                 db  72h ; r
.data:000021D4                 db  65h ; e
.data:000021D5                 db  61h ; a
.data:000021D6                 db  6Dh ; m
.data:000021D7                 db  40h ; @
.data:000021D8                 db  40h ; @
.data:000021D9                 db    0
.data:000021DA                 align 4
.data:000021DA _data           ends
.data:000021DA
.rdata$r:000021DC ; ===========================================================================
.rdata$r:000021DC
.rdata$r:000021DC ; Segment type: Pure data
.rdata$r:000021DC ; Segment permissions: Read
.rdata$r:000021DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000021DC                 assume cs:_rdata$r
.rdata$r:000021DC                 ;org 21DCh
.rdata$r:000021DC ; COMDAT (pick any)
.rdata$r:000021DC                 public ??_R3CDummyOutStream@@8
.rdata$r:000021DC ; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000021DC ??_R3CDummyOutStream@@8 db    0         ; DATA XREF: .rdata$r:000021B8o
.rdata$r:000021DC                                         ; .rdata$r:00002218o
.rdata$r:000021DD                 db    0
.rdata$r:000021DE                 db    0
.rdata$r:000021DF                 db    0
.rdata$r:000021E0                 db    1
.rdata$r:000021E1                 db    0
.rdata$r:000021E2                 db    0
.rdata$r:000021E3                 db    0
.rdata$r:000021E4                 db    4
.rdata$r:000021E5                 db    0
.rdata$r:000021E6                 db    0
.rdata$r:000021E7                 db    0
.rdata$r:000021E8                 dd offset ??_R2CDummyOutStream@@8 ; CDummyOutStream::`RTTI Base Class Array'
.rdata$r:000021E8 _rdata$r        ends
.rdata$r:000021E8
.rdata$r:000021EC ; ===========================================================================
.rdata$r:000021EC
.rdata$r:000021EC ; Segment type: Pure data
.rdata$r:000021EC ; Segment permissions: Read
.rdata$r:000021EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000021EC                 assume cs:_rdata$r
.rdata$r:000021EC                 ;org 21ECh
.rdata$r:000021EC ; COMDAT (pick any)
.rdata$r:000021EC                 public ??_R2CDummyOutStream@@8
.rdata$r:000021EC ; CDummyOutStream::`RTTI Base Class Array'
.rdata$r:000021EC ??_R2CDummyOutStream@@8 dd offset ??_R1A@?0A@EA@CDummyOutStream@@8
.rdata$r:000021EC                                         ; DATA XREF: .rdata$r:000021E8o
.rdata$r:000021EC                                         ; CDummyOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000021F0                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000021F4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000021F8                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000021FC                 db    0
.rdata$r:000021FD                 align 10h
.rdata$r:000021FD _rdata$r        ends
.rdata$r:000021FD
.rdata$r:00002200 ; ===========================================================================
.rdata$r:00002200
.rdata$r:00002200 ; Segment type: Pure data
.rdata$r:00002200 ; Segment permissions: Read
.rdata$r:00002200 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002200                 assume cs:_rdata$r
.rdata$r:00002200                 ;org 2200h
.rdata$r:00002200 ; COMDAT (pick any)
.rdata$r:00002200                 public ??_R1A@?0A@EA@CDummyOutStream@@8
.rdata$r:00002200 ; CDummyOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002200 ??_R1A@?0A@EA@CDummyOutStream@@8 dd offset ??_R0?AVCDummyOutStream@@@8
.rdata$r:00002200                                         ; DATA XREF: .rdata$r:CDummyOutStream::`RTTI Base Class Array'o
.rdata$r:00002200                                         ; CDummyOutStream `RTTI Type Descriptor'
.rdata$r:00002204                 db    3
.rdata$r:00002205                 db    0
.rdata$r:00002206                 db    0
.rdata$r:00002207                 db    0
.rdata$r:00002208                 db    0
.rdata$r:00002209                 db    0
.rdata$r:0000220A                 db    0
.rdata$r:0000220B                 db    0
.rdata$r:0000220C                 db 0FFh
.rdata$r:0000220D                 db 0FFh
.rdata$r:0000220E                 db 0FFh
.rdata$r:0000220F                 db 0FFh
.rdata$r:00002210                 db    0
.rdata$r:00002211                 db    0
.rdata$r:00002212                 db    0
.rdata$r:00002213                 db    0
.rdata$r:00002214                 db  40h ; @
.rdata$r:00002215                 db    0
.rdata$r:00002216                 db    0
.rdata$r:00002217                 db    0
.rdata$r:00002218                 dd offset ??_R3CDummyOutStream@@8 ; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002218 _rdata$r        ends
.rdata$r:00002218
.rdata$r:0000221C ; ===========================================================================
.rdata$r:0000221C
.rdata$r:0000221C ; Segment type: Pure data
.rdata$r:0000221C ; Segment permissions: Read
.rdata$r:0000221C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000221C                 assume cs:_rdata$r
.rdata$r:0000221C                 ;org 221Ch
.rdata$r:0000221C ; COMDAT (pick any)
.rdata$r:0000221C                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:0000221C ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000221C ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:0000221C                                         ; DATA XREF: .rdata$r:000021F0o
.rdata$r:0000221C                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:0000221C                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00002220                 db    1
.rdata$r:00002221                 db    0
.rdata$r:00002222                 db    0
.rdata$r:00002223                 db    0
.rdata$r:00002224                 db    0
.rdata$r:00002225                 db    0
.rdata$r:00002226                 db    0
.rdata$r:00002227                 db    0
.rdata$r:00002228                 db 0FFh
.rdata$r:00002229                 db 0FFh
.rdata$r:0000222A                 db 0FFh
.rdata$r:0000222B                 db 0FFh
.rdata$r:0000222C                 db    0
.rdata$r:0000222D                 db    0
.rdata$r:0000222E                 db    0
.rdata$r:0000222F                 db    0
.rdata$r:00002230                 db  40h ; @
.rdata$r:00002231                 db    0
.rdata$r:00002232                 db    0
.rdata$r:00002233                 db    0
.rdata$r:00002234                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002234 _rdata$r        ends
.rdata$r:00002234
.data:00002238 ; ===========================================================================
.data:00002238
.data:00002238 ; Segment type: Pure data
.data:00002238 ; Segment permissions: Read/Write
.data:00002238 _data           segment dword public 'DATA' use32
.data:00002238                 assume cs:_data
.data:00002238                 ;org 2238h
.data:00002238 ; COMDAT (pick any)
.data:00002238                 public ??_R0?AUISequentialOutStream@@@8
.data:00002238 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:00002238 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00002238                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002238                                         ; .rdata$r:00002538o
.data:00002238                                         ; const type_info::`vftable'
.data:0000223C                 align 10h
.data:00002240 a_?auisequentia db '.?AUISequentialOutStream@@',0
.data:0000225B                 align 4
.data:0000225B _data           ends
.data:0000225B
.rdata$r:0000225C ; ===========================================================================
.rdata$r:0000225C
.rdata$r:0000225C ; Segment type: Pure data
.rdata$r:0000225C ; Segment permissions: Read
.rdata$r:0000225C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000225C                 assume cs:_rdata$r
.rdata$r:0000225C                 ;org 225Ch
.rdata$r:0000225C ; COMDAT (pick any)
.rdata$r:0000225C                 public ??_R3ISequentialOutStream@@8
.rdata$r:0000225C ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000225C ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:00002234o
.rdata$r:0000225C                                         ; .rdata$r:0000253Co
.rdata$r:0000225D                 db    0
.rdata$r:0000225E                 db    0
.rdata$r:0000225F                 db    0
.rdata$r:00002260                 db    0
.rdata$r:00002261                 db    0
.rdata$r:00002262                 db    0
.rdata$r:00002263                 db    0
.rdata$r:00002264                 db    2
.rdata$r:00002265                 db    0
.rdata$r:00002266                 db    0
.rdata$r:00002267                 db    0
.rdata$r:00002268                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00002268 _rdata$r        ends
.rdata$r:00002268
.rdata$r:0000226C ; ===========================================================================
.rdata$r:0000226C
.rdata$r:0000226C ; Segment type: Pure data
.rdata$r:0000226C ; Segment permissions: Read
.rdata$r:0000226C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000226C                 assume cs:_rdata$r
.rdata$r:0000226C                 ;org 226Ch
.rdata$r:0000226C ; COMDAT (pick any)
.rdata$r:0000226C                 public ??_R2ISequentialOutStream@@8
.rdata$r:0000226C ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:0000226C ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:0000226C                                         ; DATA XREF: .rdata$r:00002268o
.rdata$r:0000226C                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002270                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002274                 db    0
.rdata$r:00002275                 align 4
.rdata$r:00002275 _rdata$r        ends
.rdata$r:00002275
.rdata$r:00002278 ; ===========================================================================
.rdata$r:00002278
.rdata$r:00002278 ; Segment type: Pure data
.rdata$r:00002278 ; Segment permissions: Read
.rdata$r:00002278 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002278                 assume cs:_rdata$r
.rdata$r:00002278                 ;org 2278h
.rdata$r:00002278 ; COMDAT (pick any)
.rdata$r:00002278                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00002278 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002278 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002278                                         ; DATA XREF: .rdata$r:000021F4o
.rdata$r:00002278                                         ; .rdata$r:00002270o ...
.rdata$r:00002278                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000227C                 db    0
.rdata$r:0000227D                 db    0
.rdata$r:0000227E                 db    0
.rdata$r:0000227F                 db    0
.rdata$r:00002280                 db    0
.rdata$r:00002281                 db    0
.rdata$r:00002282                 db    0
.rdata$r:00002283                 db    0
.rdata$r:00002284                 db 0FFh
.rdata$r:00002285                 db 0FFh
.rdata$r:00002286                 db 0FFh
.rdata$r:00002287                 db 0FFh
.rdata$r:00002288                 db    0
.rdata$r:00002289                 db    0
.rdata$r:0000228A                 db    0
.rdata$r:0000228B                 db    0
.rdata$r:0000228C                 db  40h ; @
.rdata$r:0000228D                 db    0
.rdata$r:0000228E                 db    0
.rdata$r:0000228F                 db    0
.rdata$r:00002290                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002290 _rdata$r        ends
.rdata$r:00002290
.data:00002294 ; ===========================================================================
.data:00002294
.data:00002294 ; Segment type: Pure data
.data:00002294 ; Segment permissions: Read/Write
.data:00002294 _data           segment dword public 'DATA' use32
.data:00002294                 assume cs:_data
.data:00002294                 ;org 2294h
.data:00002294 ; COMDAT (pick any)
.data:00002294                 public ??_R0?AUIUnknown@@@8
.data:00002294 ; struct IUnknown `RTTI Type Descriptor'
.data:00002294 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00002294                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002294                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00002294                                         ; const type_info::`vftable'
.data:00002298                 db    0
.data:00002299                 db    0
.data:0000229A                 db    0
.data:0000229B                 db    0
.data:0000229C                 db  2Eh ; .
.data:0000229D                 db  3Fh ; ?
.data:0000229E                 db  41h ; A
.data:0000229F                 db  55h ; U
.data:000022A0                 db  49h ; I
.data:000022A1                 db  55h ; U
.data:000022A2                 db  6Eh ; n
.data:000022A3                 db  6Bh ; k
.data:000022A4                 db  6Eh ; n
.data:000022A5                 db  6Fh ; o
.data:000022A6                 db  77h ; w
.data:000022A7                 db  6Eh ; n
.data:000022A8                 db  40h ; @
.data:000022A9                 db  40h ; @
.data:000022AA                 db    0
.data:000022AB                 align 4
.data:000022AB _data           ends
.data:000022AB
.rdata$r:000022AC ; ===========================================================================
.rdata$r:000022AC
.rdata$r:000022AC ; Segment type: Pure data
.rdata$r:000022AC ; Segment permissions: Read
.rdata$r:000022AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022AC                 assume cs:_rdata$r
.rdata$r:000022AC                 ;org 22ACh
.rdata$r:000022AC ; COMDAT (pick any)
.rdata$r:000022AC                 public ??_R3IUnknown@@8
.rdata$r:000022AC ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000022AC ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00002290o
.rdata$r:000022AC                                         ; .rdata$r:00002820o ...
.rdata$r:000022AD                 db    0
.rdata$r:000022AE                 db    0
.rdata$r:000022AF                 db    0
.rdata$r:000022B0                 db    0
.rdata$r:000022B1                 db    0
.rdata$r:000022B2                 db    0
.rdata$r:000022B3                 db    0
.rdata$r:000022B4                 db    1
.rdata$r:000022B5                 db    0
.rdata$r:000022B6                 db    0
.rdata$r:000022B7                 db    0
.rdata$r:000022B8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000022B8 _rdata$r        ends
.rdata$r:000022B8
.rdata$r:000022BC ; ===========================================================================
.rdata$r:000022BC
.rdata$r:000022BC ; Segment type: Pure data
.rdata$r:000022BC ; Segment permissions: Read
.rdata$r:000022BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022BC                 assume cs:_rdata$r
.rdata$r:000022BC                 ;org 22BCh
.rdata$r:000022BC ; COMDAT (pick any)
.rdata$r:000022BC                 public ??_R2IUnknown@@8
.rdata$r:000022BC ; IUnknown::`RTTI Base Class Array'
.rdata$r:000022BC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000022BC                                         ; DATA XREF: .rdata$r:000022B8o
.rdata$r:000022BC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000022C0                 db    0
.rdata$r:000022C1                 align 4
.rdata$r:000022C1 _rdata$r        ends
.rdata$r:000022C1
.rdata$r:000022C4 ; ===========================================================================
.rdata$r:000022C4
.rdata$r:000022C4 ; Segment type: Pure data
.rdata$r:000022C4 ; Segment permissions: Read
.rdata$r:000022C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022C4                 assume cs:_rdata$r
.rdata$r:000022C4                 ;org 22C4h
.rdata$r:000022C4 ; COMDAT (pick any)
.rdata$r:000022C4                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:000022C4 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000022C4 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000022C4                                         ; DATA XREF: .rdata$r:000021F8o
.rdata$r:000022C4                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000022C8                 db    0
.rdata$r:000022C9                 db    0
.rdata$r:000022CA                 db    0
.rdata$r:000022CB                 db    0
.rdata$r:000022CC                 db    4
.rdata$r:000022CD                 db    0
.rdata$r:000022CE                 db    0
.rdata$r:000022CF                 db    0
.rdata$r:000022D0                 db 0FFh
.rdata$r:000022D1                 db 0FFh
.rdata$r:000022D2                 db 0FFh
.rdata$r:000022D3                 db 0FFh
.rdata$r:000022D4                 db    0
.rdata$r:000022D5                 db    0
.rdata$r:000022D6                 db    0
.rdata$r:000022D7                 db    0
.rdata$r:000022D8                 db  40h ; @
.rdata$r:000022D9                 db    0
.rdata$r:000022DA                 db    0
.rdata$r:000022DB                 db    0
.rdata$r:000022DC                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000022DC _rdata$r        ends
.rdata$r:000022DC
.data:000022E0 ; ===========================================================================
.data:000022E0
.data:000022E0 ; Segment type: Pure data
.data:000022E0 ; Segment permissions: Read/Write
.data:000022E0 _data           segment dword public 'DATA' use32
.data:000022E0                 assume cs:_data
.data:000022E0                 ;org 22E0h
.data:000022E0 ; COMDAT (pick any)
.data:000022E0                 public ??_R0?AVCMyUnknownImp@@@8
.data:000022E0 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000022E0 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000022E0                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000022E0                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000022E0                                         ; const type_info::`vftable'
.data:000022E4                 align 8
.data:000022E8 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:000022E8 _data           ends
.data:000022E8
.rdata$r:000022FC ; ===========================================================================
.rdata$r:000022FC
.rdata$r:000022FC ; Segment type: Pure data
.rdata$r:000022FC ; Segment permissions: Read
.rdata$r:000022FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022FC                 assume cs:_rdata$r
.rdata$r:000022FC                 ;org 22FCh
.rdata$r:000022FC ; COMDAT (pick any)
.rdata$r:000022FC                 public ??_R3CMyUnknownImp@@8
.rdata$r:000022FC ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000022FC ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000022DCo
.rdata$r:000022FC                                         ; .rdata$r:0000232Co ...
.rdata$r:000022FD                 db    0
.rdata$r:000022FE                 db    0
.rdata$r:000022FF                 db    0
.rdata$r:00002300                 db    0
.rdata$r:00002301                 db    0
.rdata$r:00002302                 db    0
.rdata$r:00002303                 db    0
.rdata$r:00002304                 db    1
.rdata$r:00002305                 db    0
.rdata$r:00002306                 db    0
.rdata$r:00002307                 db    0
.rdata$r:00002308                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002308 _rdata$r        ends
.rdata$r:00002308
.rdata$r:0000230C ; ===========================================================================
.rdata$r:0000230C
.rdata$r:0000230C ; Segment type: Pure data
.rdata$r:0000230C ; Segment permissions: Read
.rdata$r:0000230C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000230C                 assume cs:_rdata$r
.rdata$r:0000230C                 ;org 230Ch
.rdata$r:0000230C ; COMDAT (pick any)
.rdata$r:0000230C                 public ??_R2CMyUnknownImp@@8
.rdata$r:0000230C ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000230C ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000230C                                         ; DATA XREF: .rdata$r:00002308o
.rdata$r:0000230C                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002310                 db    0
.rdata$r:00002311                 align 4
.rdata$r:00002311 _rdata$r        ends
.rdata$r:00002311
.rdata$r:00002314 ; ===========================================================================
.rdata$r:00002314
.rdata$r:00002314 ; Segment type: Pure data
.rdata$r:00002314 ; Segment permissions: Read
.rdata$r:00002314 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002314                 assume cs:_rdata$r
.rdata$r:00002314                 ;org 2314h
.rdata$r:00002314 ; COMDAT (pick any)
.rdata$r:00002314                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002314 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002314 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002314                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00002314                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002318                 align 10h
.rdata$r:00002320                 db 0FFh
.rdata$r:00002321                 db 0FFh
.rdata$r:00002322                 db 0FFh
.rdata$r:00002323                 db 0FFh
.rdata$r:00002324                 db    0
.rdata$r:00002325                 db    0
.rdata$r:00002326                 db    0
.rdata$r:00002327                 db    0
.rdata$r:00002328                 db  40h ; @
.rdata$r:00002329                 db    0
.rdata$r:0000232A                 db    0
.rdata$r:0000232B                 db    0
.rdata$r:0000232C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000232C _rdata$r        ends
.rdata$r:0000232C
.text:00002330 ; ===========================================================================
.text:00002330
.text:00002330 ; Segment type: Pure code
.text:00002330 ; Segment permissions: Read/Execute
.text:00002330 _text           segment para public 'CODE' use32
.text:00002330                 assume cs:_text
.text:00002330                 ;org 2330h
.text:00002330 ; COMDAT (pick any)
.text:00002330                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002330
.text:00002330 ; =============== S U B R O U T I N E =======================================
.text:00002330
.text:00002330 ; Attributes: bp-based frame
.text:00002330
.text:00002330 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00002330                 public ??0CMyUnknownImp@@QAE@XZ
.text:00002330 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CDummyOutStream::CDummyOutStream(void)+1Cp
.text:00002330                                         ; NArchive::NBz2::CHandler::CHandler(void)+5Cp
.text:00002330
.text:00002330 var_4           = dword ptr -4
.text:00002330
.text:00002330                 push    ebp
.text:00002331                 mov     ebp, esp
.text:00002333                 push    ecx
.text:00002334                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000233B                 mov     [ebp+var_4], ecx
.text:0000233E                 mov     eax, [ebp+var_4]
.text:00002341                 mov     dword ptr [eax], 0
.text:00002347                 mov     eax, [ebp+var_4]
.text:0000234A                 mov     esp, ebp
.text:0000234C                 pop     ebp
.text:0000234D                 retn
.text:0000234D ??0CMyUnknownImp@@QAE@XZ endp
.text:0000234D
.text:0000234D ; ---------------------------------------------------------------------------
.text:0000234E                 align 10h
.text:0000234E _text           ends
.text:0000234E
.text:00002350 ; ===========================================================================
.text:00002350
.text:00002350 ; Segment type: Pure code
.text:00002350 ; Segment permissions: Read/Execute
.text:00002350 _text           segment para public 'CODE' use32
.text:00002350                 assume cs:_text
.text:00002350                 ;org 2350h
.text:00002350 ; COMDAT (pick any)
.text:00002350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002350
.text:00002350 ; =============== S U B R O U T I N E =======================================
.text:00002350
.text:00002350 ; Attributes: bp-based frame
.text:00002350
.text:00002350 ; __int32 __stdcall CDummyOutStream::QueryInterface(CDummyOutStream *this, const struct _GUID *Buf1, void **)
.text:00002350                 public ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z
.text:00002350 ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00002350                                         ; DATA XREF: .rdata:const CDummyOutStream::`vftable'o
.text:00002350
.text:00002350 this            = dword ptr  8
.text:00002350 Buf1            = dword ptr  0Ch
.text:00002350 arg_8           = dword ptr  10h
.text:00002350
.text:00002350                 push    ebp
.text:00002351                 mov     ebp, esp
.text:00002353                 mov     eax, [ebp+arg_8]
.text:00002356                 mov     dword ptr [eax], 0
.text:0000235C                 push    offset _IID_IUnknown ; Buf2
.text:00002361                 mov     ecx, [ebp+Buf1]
.text:00002364                 push    ecx             ; Buf1
.text:00002365                 call    ___@8           ; __(x,x)
.text:0000236A                 test    eax, eax
.text:0000236C                 jz      short loc_2378
.text:0000236E                 mov     edx, [ebp+arg_8]
.text:00002371                 mov     eax, [ebp+this]
.text:00002374                 mov     [edx], eax
.text:00002376                 jmp     short loc_237F
.text:00002378 ; ---------------------------------------------------------------------------
.text:00002378
.text:00002378 loc_2378:                               ; CODE XREF: CDummyOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00002378                 mov     eax, 80004002h
.text:0000237D                 jmp     short loc_2390
.text:0000237F ; ---------------------------------------------------------------------------
.text:0000237F
.text:0000237F loc_237F:                               ; CODE XREF: CDummyOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:0000237F                 mov     ecx, [ebp+this]
.text:00002382                 mov     edx, [ecx+4]
.text:00002385                 add     edx, 1
.text:00002388                 mov     eax, [ebp+this]
.text:0000238B                 mov     [eax+4], edx
.text:0000238E                 xor     eax, eax
.text:00002390
.text:00002390 loc_2390:                               ; CODE XREF: CDummyOutStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:00002390                 cmp     ebp, esp
.text:00002392                 call    __RTC_CheckEsp
.text:00002397                 pop     ebp
.text:00002398                 retn    0Ch
.text:00002398 ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002398
.text:00002398 ; ---------------------------------------------------------------------------
.text:0000239B                 align 4
.text:0000239B _text           ends
.text:0000239B
.text:0000239C ; ===========================================================================
.text:0000239C
.text:0000239C ; Segment type: Pure code
.text:0000239C ; Segment permissions: Read/Execute
.text:0000239C _text           segment para public 'CODE' use32
.text:0000239C                 assume cs:_text
.text:0000239C                 ;org 239Ch
.text:0000239C ; COMDAT (pick any)
.text:0000239C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000239C
.text:0000239C ; =============== S U B R O U T I N E =======================================
.text:0000239C
.text:0000239C ; Attributes: bp-based frame
.text:0000239C
.text:0000239C ; int __stdcall __(void *Buf1, void *Buf2)
.text:0000239C                 public ___@8
.text:0000239C ___@8           proc near               ; CODE XREF: CDummyOutStream::QueryInterface(_GUID const &,void * *)+15p
.text:0000239C                                         ; NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+2Dp ...
.text:0000239C
.text:0000239C Buf1            = dword ptr  8
.text:0000239C Buf2            = dword ptr  0Ch
.text:0000239C
.text:0000239C                 push    ebp
.text:0000239D                 mov     ebp, esp
.text:0000239F                 mov     eax, [ebp+Buf2]
.text:000023A2                 push    eax             ; Buf2
.text:000023A3                 mov     ecx, [ebp+Buf1]
.text:000023A6                 push    ecx             ; Buf1
.text:000023A7                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000023AC                 cmp     ebp, esp
.text:000023AE                 call    __RTC_CheckEsp
.text:000023B3                 pop     ebp
.text:000023B4                 retn    8
.text:000023B4 ___@8           endp
.text:000023B4
.text:000023B4 ; ---------------------------------------------------------------------------
.text:000023B7                 align 4
.text:000023B7 _text           ends
.text:000023B7
.text:000023B8 ; ===========================================================================
.text:000023B8
.text:000023B8 ; Segment type: Pure code
.text:000023B8 ; Segment permissions: Read/Execute
.text:000023B8 _text           segment para public 'CODE' use32
.text:000023B8                 assume cs:_text
.text:000023B8                 ;org 23B8h
.text:000023B8 ; COMDAT (pick any)
.text:000023B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000023B8
.text:000023B8 ; =============== S U B R O U T I N E =======================================
.text:000023B8
.text:000023B8 ; Attributes: bp-based frame
.text:000023B8
.text:000023B8 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000023B8                 public _IsEqualGUID@8
.text:000023B8 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000023B8
.text:000023B8 Buf1            = dword ptr  8
.text:000023B8 Buf2            = dword ptr  0Ch
.text:000023B8
.text:000023B8                 push    ebp
.text:000023B9                 mov     ebp, esp
.text:000023BB                 push    10h             ; Size
.text:000023BD                 mov     eax, [ebp+Buf2]
.text:000023C0                 push    eax             ; Buf2
.text:000023C1                 mov     ecx, [ebp+Buf1]
.text:000023C4                 push    ecx             ; Buf1
.text:000023C5                 call    _memcmp
.text:000023CA                 add     esp, 0Ch
.text:000023CD                 neg     eax
.text:000023CF                 sbb     eax, eax
.text:000023D1                 add     eax, 1
.text:000023D4                 cmp     ebp, esp
.text:000023D6                 call    __RTC_CheckEsp
.text:000023DB                 pop     ebp
.text:000023DC                 retn    8
.text:000023DC _IsEqualGUID@8  endp
.text:000023DC
.text:000023DC ; ---------------------------------------------------------------------------
.text:000023DF                 align 10h
.text:000023DF _text           ends
.text:000023DF
.text:000023E0 ; ===========================================================================
.text:000023E0
.text:000023E0 ; Segment type: Pure code
.text:000023E0 ; Segment permissions: Read/Execute
.text:000023E0 _text           segment para public 'CODE' use32
.text:000023E0                 assume cs:_text
.text:000023E0                 ;org 23E0h
.text:000023E0 ; COMDAT (pick any)
.text:000023E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000023E0
.text:000023E0 ; =============== S U B R O U T I N E =======================================
.text:000023E0
.text:000023E0 ; Attributes: bp-based frame
.text:000023E0
.text:000023E0 ; unsigned __int32 __stdcall CDummyOutStream::AddRef(CDummyOutStream *this)
.text:000023E0                 public ?AddRef@CDummyOutStream@@UAGKXZ
.text:000023E0 ?AddRef@CDummyOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:0000219Co
.text:000023E0
.text:000023E0 var_4           = dword ptr -4
.text:000023E0 this            = dword ptr  8
.text:000023E0
.text:000023E0                 push    ebp
.text:000023E1                 mov     ebp, esp
.text:000023E3                 push    ecx
.text:000023E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023EB                 mov     eax, [ebp+this]
.text:000023EE                 mov     ecx, [eax+4]
.text:000023F1                 add     ecx, 1
.text:000023F4                 mov     [ebp+var_4], ecx
.text:000023F7                 mov     edx, [ebp+this]
.text:000023FA                 mov     eax, [ebp+var_4]
.text:000023FD                 mov     [edx+4], eax
.text:00002400                 mov     eax, [ebp+var_4]
.text:00002403                 mov     esp, ebp
.text:00002405                 pop     ebp
.text:00002406                 retn    4
.text:00002406 ?AddRef@CDummyOutStream@@UAGKXZ endp
.text:00002406
.text:00002406 ; ---------------------------------------------------------------------------
.text:00002409                 align 4
.text:00002409 _text           ends
.text:00002409
.text:0000240C ; ===========================================================================
.text:0000240C
.text:0000240C ; Segment type: Pure code
.text:0000240C ; Segment permissions: Read/Execute
.text:0000240C _text           segment para public 'CODE' use32
.text:0000240C                 assume cs:_text
.text:0000240C                 ;org 240Ch
.text:0000240C ; COMDAT (pick any)
.text:0000240C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000240C
.text:0000240C ; =============== S U B R O U T I N E =======================================
.text:0000240C
.text:0000240C ; Attributes: bp-based frame
.text:0000240C
.text:0000240C ; unsigned __int32 __stdcall CDummyOutStream::Release(CDummyOutStream *this)
.text:0000240C                 public ?Release@CDummyOutStream@@UAGKXZ
.text:0000240C ?Release@CDummyOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:000021A0o
.text:0000240C
.text:0000240C var_10          = dword ptr -10h
.text:0000240C var_C           = dword ptr -0Ch
.text:0000240C var_8           = dword ptr -8
.text:0000240C var_4           = dword ptr -4
.text:0000240C this            = dword ptr  8
.text:0000240C
.text:0000240C                 push    ebp
.text:0000240D                 mov     ebp, esp
.text:0000240F                 sub     esp, 10h
.text:00002412                 mov     eax, 0CCCCCCCCh
.text:00002417                 mov     [ebp+var_10], eax
.text:0000241A                 mov     [ebp+var_C], eax
.text:0000241D                 mov     [ebp+var_8], eax
.text:00002420                 mov     [ebp+var_4], eax
.text:00002423                 mov     eax, [ebp+this]
.text:00002426                 mov     ecx, [eax+4]
.text:00002429                 sub     ecx, 1
.text:0000242C                 mov     [ebp+var_C], ecx
.text:0000242F                 mov     edx, [ebp+this]
.text:00002432                 mov     eax, [ebp+var_C]
.text:00002435                 mov     [edx+4], eax
.text:00002438                 cmp     [ebp+var_C], 0
.text:0000243C                 jz      short loc_2446
.text:0000243E                 mov     ecx, [ebp+this]
.text:00002441                 mov     eax, [ecx+4]
.text:00002444                 jmp     short loc_2470
.text:00002446 ; ---------------------------------------------------------------------------
.text:00002446
.text:00002446 loc_2446:                               ; CODE XREF: CDummyOutStream::Release(void)+30j
.text:00002446                 mov     edx, [ebp+this]
.text:00002449                 mov     [ebp+var_8], edx
.text:0000244C                 mov     eax, [ebp+var_8]
.text:0000244F                 mov     [ebp+var_4], eax
.text:00002452                 cmp     [ebp+var_4], 0
.text:00002456                 jz      short loc_2467
.text:00002458                 push    1
.text:0000245A                 mov     ecx, [ebp+var_4]
.text:0000245D                 call    ??_GCDummyOutStream@@QAEPAXI@Z ; CDummyOutStream::`scalar deleting destructor'(uint)
.text:00002462                 mov     [ebp+var_10], eax
.text:00002465                 jmp     short loc_246E
.text:00002467 ; ---------------------------------------------------------------------------
.text:00002467
.text:00002467 loc_2467:                               ; CODE XREF: CDummyOutStream::Release(void)+4Aj
.text:00002467                 mov     [ebp+var_10], 0
.text:0000246E
.text:0000246E loc_246E:                               ; CODE XREF: CDummyOutStream::Release(void)+59j
.text:0000246E                 xor     eax, eax
.text:00002470
.text:00002470 loc_2470:                               ; CODE XREF: CDummyOutStream::Release(void)+38j
.text:00002470                 add     esp, 10h
.text:00002473                 cmp     ebp, esp
.text:00002475                 call    __RTC_CheckEsp
.text:0000247A                 mov     esp, ebp
.text:0000247C                 pop     ebp
.text:0000247D                 retn    4
.text:0000247D ?Release@CDummyOutStream@@UAGKXZ endp
.text:0000247D
.text:0000247D _text           ends
.text:0000247D
.text:00002480 ; ===========================================================================
.text:00002480
.text:00002480 ; Segment type: Pure code
.text:00002480 ; Segment permissions: Read/Execute
.text:00002480 _text           segment para public 'CODE' use32
.text:00002480                 assume cs:_text
.text:00002480                 ;org 2480h
.text:00002480 ; COMDAT (pick any)
.text:00002480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002480
.text:00002480 ; =============== S U B R O U T I N E =======================================
.text:00002480
.text:00002480 ; Attributes: bp-based frame
.text:00002480
.text:00002480 ; public: void * __thiscall CDummyOutStream::`scalar deleting destructor'(unsigned int)
.text:00002480                 public ??_GCDummyOutStream@@QAEPAXI@Z
.text:00002480 ??_GCDummyOutStream@@QAEPAXI@Z proc near
.text:00002480                                         ; CODE XREF: CDummyOutStream::Release(void)+51p
.text:00002480
.text:00002480 var_4           = dword ptr -4
.text:00002480 arg_0           = dword ptr  8
.text:00002480
.text:00002480                 push    ebp
.text:00002481                 mov     ebp, esp
.text:00002483                 push    ecx
.text:00002484                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000248B                 mov     [ebp+var_4], ecx
.text:0000248E                 mov     ecx, [ebp+var_4] ; this
.text:00002491                 call    ??1CDummyOutStream@@QAE@XZ ; CDummyOutStream::~CDummyOutStream(void)
.text:00002496                 mov     eax, [ebp+arg_0]
.text:00002499                 and     eax, 1
.text:0000249C                 jz      short loc_24AA
.text:0000249E                 mov     ecx, [ebp+var_4]
.text:000024A1                 push    ecx             ; void *
.text:000024A2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000024A7                 add     esp, 4
.text:000024AA
.text:000024AA loc_24AA:                               ; CODE XREF: CDummyOutStream::`scalar deleting destructor'(uint)+1Cj
.text:000024AA                 mov     eax, [ebp+var_4]
.text:000024AD                 add     esp, 4
.text:000024B0                 cmp     ebp, esp
.text:000024B2                 call    __RTC_CheckEsp
.text:000024B7                 mov     esp, ebp
.text:000024B9                 pop     ebp
.text:000024BA                 retn    4
.text:000024BA ??_GCDummyOutStream@@QAEPAXI@Z endp
.text:000024BA
.text:000024BA ; ---------------------------------------------------------------------------
.text:000024BD                 align 10h
.text:000024BD _text           ends
.text:000024BD
.text:000024C0 ; ===========================================================================
.text:000024C0
.text:000024C0 ; Segment type: Pure code
.text:000024C0 ; Segment permissions: Read/Execute
.text:000024C0 _text           segment para public 'CODE' use32
.text:000024C0                 assume cs:_text
.text:000024C0                 ;org 24C0h
.text:000024C0 ; COMDAT (pick any)
.text:000024C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024C0
.text:000024C0 ; =============== S U B R O U T I N E =======================================
.text:000024C0
.text:000024C0 ; Attributes: bp-based frame
.text:000024C0
.text:000024C0 ; _DWORD __thiscall CDummyOutStream::~CDummyOutStream(CDummyOutStream *__hidden this)
.text:000024C0                 public ??1CDummyOutStream@@QAE@XZ
.text:000024C0 ??1CDummyOutStream@@QAE@XZ proc near    ; CODE XREF: CDummyOutStream::`scalar deleting destructor'(uint)+11p
.text:000024C0
.text:000024C0 var_4           = dword ptr -4
.text:000024C0
.text:000024C0                 push    ebp
.text:000024C1                 mov     ebp, esp
.text:000024C3                 push    ecx
.text:000024C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024CB                 mov     [ebp+var_4], ecx
.text:000024CE                 mov     ecx, [ebp+var_4]
.text:000024D1                 add     ecx, 8
.text:000024D4                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000024D9                 add     esp, 4
.text:000024DC                 cmp     ebp, esp
.text:000024DE                 call    __RTC_CheckEsp
.text:000024E3                 mov     esp, ebp
.text:000024E5                 pop     ebp
.text:000024E6                 retn
.text:000024E6 ??1CDummyOutStream@@QAE@XZ endp
.text:000024E6
.text:000024E6 ; ---------------------------------------------------------------------------
.text:000024E7                 align 4
.text:000024E7 _text           ends
.text:000024E7
.text:000024E8 ; ===========================================================================
.text:000024E8
.text:000024E8 ; Segment type: Pure code
.text:000024E8 ; Segment permissions: Read/Execute
.text:000024E8 _text           segment para public 'CODE' use32
.text:000024E8                 assume cs:_text
.text:000024E8                 ;org 24E8h
.text:000024E8 ; COMDAT (pick any)
.text:000024E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024E8
.text:000024E8 ; =============== S U B R O U T I N E =======================================
.text:000024E8
.text:000024E8 ; Attributes: bp-based frame
.text:000024E8
.text:000024E8 ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:000024E8                 public ??0ISequentialOutStream@@QAE@XZ
.text:000024E8 ??0ISequentialOutStream@@QAE@XZ proc near
.text:000024E8                                         ; CODE XREF: CDummyOutStream::CDummyOutStream(void)+11p
.text:000024E8
.text:000024E8 var_4           = dword ptr -4
.text:000024E8
.text:000024E8                 push    ebp
.text:000024E9                 mov     ebp, esp
.text:000024EB                 push    ecx
.text:000024EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024F3                 mov     [ebp+var_4], ecx
.text:000024F6                 mov     ecx, [ebp+var_4]
.text:000024F9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000024FE                 mov     eax, [ebp+var_4]
.text:00002501                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:00002507                 mov     eax, [ebp+var_4]
.text:0000250A                 add     esp, 4
.text:0000250D                 cmp     ebp, esp
.text:0000250F                 call    __RTC_CheckEsp
.text:00002514                 mov     esp, ebp
.text:00002516                 pop     ebp
.text:00002517                 retn
.text:00002517 ??0ISequentialOutStream@@QAE@XZ endp
.text:00002517
.text:00002517 _text           ends
.text:00002517
.rdata:00002518 ; ===========================================================================
.rdata:00002518
.rdata:00002518 ; Segment type: Pure data
.rdata:00002518 ; Segment permissions: Read
.rdata:00002518 _rdata          segment dword public 'DATA' use32
.rdata:00002518                 assume cs:_rdata
.rdata:00002518                 ;org 2518h
.rdata:00002518 ; COMDAT (pick largest)
.rdata:00002518                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:0000251C                 public ??_7ISequentialOutStream@@6B@
.rdata:0000251C ; const ISequentialOutStream::`vftable'
.rdata:0000251C ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:0000251C                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00002520                 dd offset __purecall
.rdata:00002524                 dd offset __purecall
.rdata:00002528                 dd offset __purecall
.rdata:00002528 _rdata          ends
.rdata:00002528
.rdata$r:0000252C ; ===========================================================================
.rdata$r:0000252C
.rdata$r:0000252C ; Segment type: Pure data
.rdata$r:0000252C ; Segment permissions: Read
.rdata$r:0000252C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000252C                 assume cs:_rdata$r
.rdata$r:0000252C                 ;org 252Ch
.rdata$r:0000252C ; COMDAT (pick any)
.rdata$r:0000252C                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:0000252C ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:0000252C ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00002518o
.rdata$r:0000252D                 db    0
.rdata$r:0000252E                 db    0
.rdata$r:0000252F                 db    0
.rdata$r:00002530                 db    0
.rdata$r:00002531                 db    0
.rdata$r:00002532                 db    0
.rdata$r:00002533                 db    0
.rdata$r:00002534                 db    0
.rdata$r:00002535                 db    0
.rdata$r:00002536                 db    0
.rdata$r:00002537                 db    0
.rdata$r:00002538                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:0000253C                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000253C _rdata$r        ends
.rdata$r:0000253C
.text:00002540 ; ===========================================================================
.text:00002540
.text:00002540 ; Segment type: Pure code
.text:00002540 ; Segment permissions: Read/Execute
.text:00002540 _text           segment para public 'CODE' use32
.text:00002540                 assume cs:_text
.text:00002540                 ;org 2540h
.text:00002540 ; COMDAT (pick any)
.text:00002540                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002540
.text:00002540 ; =============== S U B R O U T I N E =======================================
.text:00002540
.text:00002540 ; Attributes: bp-based frame
.text:00002540
.text:00002540 ; public: __thiscall IUnknown::IUnknown(void)
.text:00002540                 public ??0IUnknown@@QAE@XZ
.text:00002540 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ISequentialOutStream::ISequentialOutStream(void)+11p
.text:00002540                                         ; IInArchive::IInArchive(void)+11p ...
.text:00002540
.text:00002540 var_4           = dword ptr -4
.text:00002540
.text:00002540                 push    ebp
.text:00002541                 mov     ebp, esp
.text:00002543                 push    ecx
.text:00002544                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000254B                 mov     [ebp+var_4], ecx
.text:0000254E                 mov     eax, [ebp+var_4]
.text:00002551                 mov     esp, ebp
.text:00002553                 pop     ebp
.text:00002554                 retn
.text:00002554 ??0IUnknown@@QAE@XZ endp
.text:00002554
.text:00002554 ; ---------------------------------------------------------------------------
.text:00002555                 align 4
.text:00002555 _text           ends
.text:00002555
.text:00002558 ; ===========================================================================
.text:00002558
.text:00002558 ; Segment type: Pure code
.text:00002558 ; Segment permissions: Read/Execute
.text:00002558 _text           segment para public 'CODE' use32
.text:00002558                 assume cs:_text
.text:00002558                 ;org 2558h
.text:00002558 ; COMDAT (pick any)
.text:00002558                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002558
.text:00002558 ; =============== S U B R O U T I N E =======================================
.text:00002558
.text:00002558 ; Attributes: bp-based frame
.text:00002558
.text:00002558 ; bool __stdcall IntToBool(int)
.text:00002558                 public ?IntToBool@@YG_NH@Z
.text:00002558 ?IntToBool@@YG_NH@Z proc near           ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+AEp
.text:00002558                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+178p
.text:00002558
.text:00002558 arg_0           = dword ptr  8
.text:00002558
.text:00002558                 push    ebp
.text:00002559                 mov     ebp, esp
.text:0000255B                 xor     eax, eax
.text:0000255D                 cmp     [ebp+arg_0], 0
.text:00002561                 setnz   al
.text:00002564                 pop     ebp
.text:00002565                 retn    4
.text:00002565 ?IntToBool@@YG_NH@Z endp
.text:00002565
.text:00002565 _text           ends
.text:00002565
.text:00002568 ; ===========================================================================
.text:00002568
.text:00002568 ; Segment type: Pure code
.text:00002568 ; Segment permissions: Read/Execute
.text:00002568 _text           segment para public 'CODE' use32
.text:00002568                 assume cs:_text
.text:00002568                 ;org 2568h
.text:00002568 ; COMDAT (pick any)
.text:00002568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002568
.text:00002568 ; =============== S U B R O U T I N E =======================================
.text:00002568
.text:00002568 ; Attributes: bp-based frame
.text:00002568
.text:00002568 ; _DWORD __thiscall NArchive::NBz2::CHandler::CHandler(NArchive::NBz2::CHandler *__hidden this)
.text:00002568                 public ??0CHandler@NBz2@NArchive@@QAE@XZ
.text:00002568 ??0CHandler@NBz2@NArchive@@QAE@XZ proc near
.text:00002568                                         ; CODE XREF: NArchive::NBz2::CreateArc(void)+57p
.text:00002568                                         ; NArchive::NBz2::CreateArcOut(void)+53p
.text:00002568
.text:00002568 var_10          = dword ptr -10h
.text:00002568 var_C           = dword ptr -0Ch
.text:00002568 var_4           = dword ptr -4
.text:00002568
.text:00002568                 push    ebp
.text:00002569                 mov     ebp, esp
.text:0000256B                 push    0FFFFFFFFh
.text:0000256D                 push    offset __ehhandler$??0CHandler@NBz2@NArchive@@QAE@XZ
.text:00002572                 mov     eax, large fs:0
.text:00002578                 push    eax
.text:00002579                 push    ecx
.text:0000257A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002581                 mov     eax, dword ptr ds:___security_cookie
.text:00002586                 xor     eax, ebp
.text:00002588                 push    eax
.text:00002589                 lea     eax, [ebp+var_C]
.text:0000258C                 mov     large fs:0, eax
.text:00002592                 mov     [ebp+var_10], ecx
.text:00002595                 mov     ecx, [ebp+var_10] ; this
.text:00002598                 call    ??0IInArchive@@QAE@XZ ; IInArchive::IInArchive(void)
.text:0000259D                 mov     ecx, [ebp+var_10]
.text:000025A0                 add     ecx, 4          ; this
.text:000025A3                 call    ??0IArchiveOpenSeq@@QAE@XZ ; IArchiveOpenSeq::IArchiveOpenSeq(void)
.text:000025A8                 mov     ecx, [ebp+var_10]
.text:000025AB                 add     ecx, 8          ; this
.text:000025AE                 call    ??0IOutArchive@@QAE@XZ ; IOutArchive::IOutArchive(void)
.text:000025B3                 mov     ecx, [ebp+var_10]
.text:000025B6                 add     ecx, 0Ch        ; this
.text:000025B9                 call    ??0ISetProperties@@QAE@XZ ; ISetProperties::ISetProperties(void)
.text:000025BE                 mov     ecx, [ebp+var_10]
.text:000025C1                 add     ecx, 10h        ; this
.text:000025C4                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000025C9                 mov     eax, [ebp+var_10]
.text:000025CC                 mov     dword ptr [eax], offset ??_7CHandler@NBz2@NArchive@@6BIInArchive@@@ ; const NArchive::NBz2::CHandler::`vftable'{for `IInArchive'}
.text:000025D2                 mov     ecx, [ebp+var_10]
.text:000025D5                 mov     dword ptr [ecx+4], offset ??_7CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@ ; const NArchive::NBz2::CHandler::`vftable'{for `IArchiveOpenSeq'}
.text:000025DC                 mov     edx, [ebp+var_10]
.text:000025DF                 mov     dword ptr [edx+8], offset ??_7CHandler@NBz2@NArchive@@6BIOutArchive@@@ ; const NArchive::NBz2::CHandler::`vftable'{for `IOutArchive'}
.text:000025E6                 mov     eax, [ebp+var_10]
.text:000025E9                 mov     dword ptr [eax+0Ch], offset ??_7CHandler@NBz2@NArchive@@6BISetProperties@@@ ; const NArchive::NBz2::CHandler::`vftable'{for `ISetProperties'}
.text:000025F0                 mov     ecx, [ebp+var_10]
.text:000025F3                 add     ecx, 14h
.text:000025F6                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:000025FB                 mov     [ebp+var_4], 0
.text:00002602                 mov     ecx, [ebp+var_10]
.text:00002605                 add     ecx, 18h
.text:00002608                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000260D                 mov     byte ptr [ebp+var_4], 1
.text:00002611                 mov     ecx, [ebp+var_10]
.text:00002614                 add     ecx, 48h ; 'H'  ; this
.text:00002617                 call    ??0CSingleMethodProps@NArchive@@QAE@XZ ; NArchive::CSingleMethodProps::CSingleMethodProps(void)
.text:0000261C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002623                 mov     eax, [ebp+var_10]
.text:00002626                 mov     ecx, [ebp+var_C]
.text:00002629                 mov     large fs:0, ecx
.text:00002630                 pop     ecx
.text:00002631                 add     esp, 10h
.text:00002634                 cmp     ebp, esp
.text:00002636                 call    __RTC_CheckEsp
.text:0000263B                 mov     esp, ebp
.text:0000263D                 pop     ebp
.text:0000263E                 retn
.text:0000263E ??0CHandler@NBz2@NArchive@@QAE@XZ endp
.text:0000263E
.text:0000263E ; ---------------------------------------------------------------------------
.text:0000263F                 align 10h
.text:0000263F _text           ends
.text:0000263F
.text$x:00002640 ; ===========================================================================
.text$x:00002640
.text$x:00002640 ; Segment type: Pure code
.text$x:00002640 ; Segment permissions: Read/Execute
.text$x:00002640 _text$x         segment para public 'CODE' use32
.text$x:00002640                 assume cs:_text$x
.text$x:00002640                 ;org 2640h
.text$x:00002640 ; COMDAT (pick associative to section at 2568)
.text$x:00002640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002640
.text$x:00002640 ; =============== S U B R O U T I N E =======================================
.text$x:00002640
.text$x:00002640
.text$x:00002640 __unwindfunclet$??0CHandler@NBz2@NArchive@@QAE@XZ$0 proc near
.text$x:00002640                                         ; DATA XREF: .xdata$x:000026F0o
.text$x:00002640                 mov     ecx, [ebp-10h]
.text$x:00002643                 add     ecx, 14h
.text$x:00002646                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00002646 __unwindfunclet$??0CHandler@NBz2@NArchive@@QAE@XZ$0 endp
.text$x:00002646
.text$x:0000264B
.text$x:0000264B ; =============== S U B R O U T I N E =======================================
.text$x:0000264B
.text$x:0000264B
.text$x:0000264B __unwindfunclet$??0CHandler@NBz2@NArchive@@QAE@XZ$1 proc near
.text$x:0000264B                                         ; DATA XREF: .xdata$x:000026F8o
.text$x:0000264B                 mov     ecx, [ebp-10h]
.text$x:0000264E                 add     ecx, 18h
.text$x:00002651                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00002651 __unwindfunclet$??0CHandler@NBz2@NArchive@@QAE@XZ$1 endp
.text$x:00002651
.text$x:00002656
.text$x:00002656 ; =============== S U B R O U T I N E =======================================
.text$x:00002656
.text$x:00002656
.text$x:00002656 __ehhandler$??0CHandler@NBz2@NArchive@@QAE@XZ proc near
.text$x:00002656                                         ; DATA XREF: NArchive::NBz2::CHandler::CHandler(void)+5o
.text$x:00002656
.text$x:00002656 arg_4           = dword ptr  8
.text$x:00002656
.text$x:00002656                 mov     edx, [esp+arg_4]
.text$x:0000265A                 lea     eax, [edx+0Ch]
.text$x:0000265D                 mov     ecx, [edx-8]
.text$x:00002660                 xor     ecx, eax
.text$x:00002662                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002667                 mov     eax, offset __ehfuncinfo$??0CHandler@NBz2@NArchive@@QAE@XZ
.text$x:0000266C                 jmp     ___CxxFrameHandler3
.text$x:0000266C __ehhandler$??0CHandler@NBz2@NArchive@@QAE@XZ endp
.text$x:0000266C
.text$x:0000266C ; ---------------------------------------------------------------------------
.text$x:00002671                 align 4
.text$x:00002671 _text$x         ends
.text$x:00002671
.rdata:00002674 ; ===========================================================================
.rdata:00002674
.rdata:00002674 ; Segment type: Pure data
.rdata:00002674 ; Segment permissions: Read
.rdata:00002674 _rdata          segment dword public 'DATA' use32
.rdata:00002674                 assume cs:_rdata
.rdata:00002674                 ;org 2674h
.rdata:00002674 ; COMDAT (pick largest)
.rdata:00002674                 dd offset ??_R4CHandler@NBz2@NArchive@@6BISetProperties@@@ ; const NArchive::NBz2::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata:00002678                 public ??_7CHandler@NBz2@NArchive@@6BISetProperties@@@
.rdata:00002678 ; const NArchive::NBz2::CHandler::`vftable'{for `ISetProperties'}
.rdata:00002678 ??_7CHandler@NBz2@NArchive@@6BISetProperties@@@ dd offset ?QueryInterface@CHandler@NBz2@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00002678                                         ; DATA XREF: NArchive::NBz2::CHandler::CHandler(void)+81o
.rdata:00002678                                         ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:0000267C                 dd offset ?AddRef@CHandler@NBz2@NArchive@@WM@AGKXZ ; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{12}' (void)
.rdata:00002680                 dd offset ?Release@CHandler@NBz2@NArchive@@WM@AGKXZ ; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{12}' (void)
.rdata:00002684                 dd offset ?SetProperties@CHandler@NBz2@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::NBz2::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)
.rdata:00002684 _rdata          ends
.rdata:00002684
.rdata:00002688 ; ===========================================================================
.rdata:00002688
.rdata:00002688 ; Segment type: Pure data
.rdata:00002688 ; Segment permissions: Read
.rdata:00002688 _rdata          segment dword public 'DATA' use32
.rdata:00002688                 assume cs:_rdata
.rdata:00002688                 ;org 2688h
.rdata:00002688 ; COMDAT (pick largest)
.rdata:00002688                 dd offset ??_R4CHandler@NBz2@NArchive@@6BIOutArchive@@@ ; const NArchive::NBz2::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata:0000268C                 public ??_7CHandler@NBz2@NArchive@@6BIOutArchive@@@
.rdata:0000268C ; const NArchive::NBz2::CHandler::`vftable'{for `IOutArchive'}
.rdata:0000268C ??_7CHandler@NBz2@NArchive@@6BIOutArchive@@@ dd offset ?QueryInterface@CHandler@NBz2@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.rdata:0000268C                                         ; DATA XREF: NArchive::NBz2::CHandler::CHandler(void)+77o
.rdata:0000268C                                         ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00002690                 dd offset ?AddRef@CHandler@NBz2@NArchive@@W7AGKXZ ; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{8}' (void)
.rdata:00002694                 dd offset ?Release@CHandler@NBz2@NArchive@@W7AGKXZ ; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{8}' (void)
.rdata:00002698                 dd offset ?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)
.rdata:0000269C                 dd offset ?GetFileTimeType@CHandler@NBz2@NArchive@@UAGJPAI@Z ; NArchive::NBz2::CHandler::GetFileTimeType(uint *)
.rdata:0000269C _rdata          ends
.rdata:0000269C
.rdata:000026A0 ; ===========================================================================
.rdata:000026A0
.rdata:000026A0 ; Segment type: Pure data
.rdata:000026A0 ; Segment permissions: Read
.rdata:000026A0 _rdata          segment dword public 'DATA' use32
.rdata:000026A0                 assume cs:_rdata
.rdata:000026A0                 ;org 26A0h
.rdata:000026A0 ; COMDAT (pick largest)
.rdata:000026A0                 dd offset ??_R4CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@ ; const NArchive::NBz2::CHandler::`RTTI Complete Object Locator'{for `IArchiveOpenSeq'}
.rdata:000026A4                 public ??_7CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@
.rdata:000026A4 ; const NArchive::NBz2::CHandler::`vftable'{for `IArchiveOpenSeq'}
.rdata:000026A4 ??_7CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@ dd offset ?QueryInterface@CHandler@NBz2@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000026A4                                         ; DATA XREF: NArchive::NBz2::CHandler::CHandler(void)+6Do
.rdata:000026A4                                         ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000026A8                 dd offset ?AddRef@CHandler@NBz2@NArchive@@W3AGKXZ ; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{4}' (void)
.rdata:000026AC                 dd offset ?Release@CHandler@NBz2@NArchive@@W3AGKXZ ; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{4}' (void)
.rdata:000026B0                 dd offset ?OpenSeq@CHandler@NBz2@NArchive@@UAGJPAUISequentialInStream@@@Z ; NArchive::NBz2::CHandler::OpenSeq(ISequentialInStream *)
.rdata:000026B0 _rdata          ends
.rdata:000026B0
.rdata:000026B4 ; ===========================================================================
.rdata:000026B4
.rdata:000026B4 ; Segment type: Pure data
.rdata:000026B4 ; Segment permissions: Read
.rdata:000026B4 _rdata          segment dword public 'DATA' use32
.rdata:000026B4                 assume cs:_rdata
.rdata:000026B4                 ;org 26B4h
.rdata:000026B4 ; COMDAT (pick largest)
.rdata:000026B4                 dd offset ??_R4CHandler@NBz2@NArchive@@6BIInArchive@@@ ; const NArchive::NBz2::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata:000026B8                 public ??_7CHandler@NBz2@NArchive@@6BIInArchive@@@
.rdata:000026B8 ; const NArchive::NBz2::CHandler::`vftable'{for `IInArchive'}
.rdata:000026B8 ??_7CHandler@NBz2@NArchive@@6BIInArchive@@@ dd offset ?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:000026B8                                         ; DATA XREF: NArchive::NBz2::CHandler::CHandler(void)+64o
.rdata:000026B8                                         ; NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)
.rdata:000026BC                 dd offset ?AddRef@CHandler@NBz2@NArchive@@UAGKXZ ; NArchive::NBz2::CHandler::AddRef(void)
.rdata:000026C0                 dd offset ?Release@CHandler@NBz2@NArchive@@UAGKXZ ; NArchive::NBz2::CHandler::Release(void)
.rdata:000026C4                 dd offset ?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)
.rdata:000026C8                 dd offset ?Close@CHandler@NBz2@NArchive@@UAGJXZ ; NArchive::NBz2::CHandler::Close(void)
.rdata:000026CC                 dd offset ?GetNumberOfItems@CHandler@NBz2@NArchive@@UAGJPAI@Z ; NArchive::NBz2::CHandler::GetNumberOfItems(uint *)
.rdata:000026D0                 dd offset ?GetProperty@CHandler@NBz2@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)
.rdata:000026D4                 dd offset ?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)
.rdata:000026D8                 dd offset ?GetArchiveProperty@CHandler@NBz2@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)
.rdata:000026DC                 dd offset ?GetNumberOfProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z ; NArchive::NBz2::CHandler::GetNumberOfProperties(uint *)
.rdata:000026E0                 dd offset ?GetPropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NBz2::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:000026E4                 dd offset ?GetNumberOfArchiveProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z ; NArchive::NBz2::CHandler::GetNumberOfArchiveProperties(uint *)
.rdata:000026E8                 dd offset ?GetArchivePropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NBz2::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:000026E8 _rdata          ends
.rdata:000026E8
.xdata$x:000026EC ; ===========================================================================
.xdata$x:000026EC
.xdata$x:000026EC ; Segment type: Pure data
.xdata$x:000026EC ; Segment permissions: Read
.xdata$x:000026EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000026EC                 assume cs:_xdata$x
.xdata$x:000026EC                 ;org 26ECh
.xdata$x:000026EC ; COMDAT (pick associative to section at 2568)
.xdata$x:000026EC __unwindtable$??0CHandler@NBz2@NArchive@@QAE@XZ db 0FFh
.xdata$x:000026EC                                         ; DATA XREF: .xdata$x:00002704o
.xdata$x:000026ED                 db 0FFh
.xdata$x:000026EE                 db 0FFh
.xdata$x:000026EF                 db 0FFh
.xdata$x:000026F0                 dd offset __unwindfunclet$??0CHandler@NBz2@NArchive@@QAE@XZ$0
.xdata$x:000026F4                 align 8
.xdata$x:000026F8                 dd offset __unwindfunclet$??0CHandler@NBz2@NArchive@@QAE@XZ$1
.xdata$x:000026FC __ehfuncinfo$??0CHandler@NBz2@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000026FC                                         ; DATA XREF: __ehhandler$??0CHandler@NBz2@NArchive@@QAE@XZ+11o
.xdata$x:000026FD                 db    5
.xdata$x:000026FE                 db  93h ; ô
.xdata$x:000026FF                 db  19h
.xdata$x:00002700                 db    2
.xdata$x:00002701                 db    0
.xdata$x:00002702                 db    0
.xdata$x:00002703                 db    0
.xdata$x:00002704                 dd offset __unwindtable$??0CHandler@NBz2@NArchive@@QAE@XZ
.xdata$x:00002708                 db    0
.xdata$x:00002709                 db    0
.xdata$x:0000270A                 db    0
.xdata$x:0000270B                 db    0
.xdata$x:0000270C                 db    0
.xdata$x:0000270D                 db    0
.xdata$x:0000270E                 db    0
.xdata$x:0000270F                 db    0
.xdata$x:00002710                 db    0
.xdata$x:00002711                 db    0
.xdata$x:00002712                 db    0
.xdata$x:00002713                 db    0
.xdata$x:00002714                 db    0
.xdata$x:00002715                 db    0
.xdata$x:00002716                 db    0
.xdata$x:00002717                 db    0
.xdata$x:00002718                 db    0
.xdata$x:00002719                 db    0
.xdata$x:0000271A                 db    0
.xdata$x:0000271B                 db    0
.xdata$x:0000271C                 db    1
.xdata$x:0000271D                 db    0
.xdata$x:0000271E                 db    0
.xdata$x:0000271F                 db    0
.xdata$x:0000271F _xdata$x        ends
.xdata$x:0000271F
.rdata$r:00002720 ; ===========================================================================
.rdata$r:00002720
.rdata$r:00002720 ; Segment type: Pure data
.rdata$r:00002720 ; Segment permissions: Read
.rdata$r:00002720 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002720                 assume cs:_rdata$r
.rdata$r:00002720                 ;org 2720h
.rdata$r:00002720 ; COMDAT (pick any)
.rdata$r:00002720                 public ??_R4CHandler@NBz2@NArchive@@6BIInArchive@@@
.rdata$r:00002720 ; const NArchive::NBz2::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata$r:00002720 ??_R4CHandler@NBz2@NArchive@@6BIInArchive@@@ db    0
.rdata$r:00002720                                         ; DATA XREF: .rdata:000026B4o
.rdata$r:00002721                 db    0
.rdata$r:00002722                 db    0
.rdata$r:00002723                 db    0
.rdata$r:00002724                 db    0
.rdata$r:00002725                 db    0
.rdata$r:00002726                 db    0
.rdata$r:00002727                 db    0
.rdata$r:00002728                 db    0
.rdata$r:00002729                 db    0
.rdata$r:0000272A                 db    0
.rdata$r:0000272B                 db    0
.rdata$r:0000272C                 dd offset ??_R0?AVCHandler@NBz2@NArchive@@@8 ; NArchive::NBz2::CHandler `RTTI Type Descriptor'
.rdata$r:00002730                 dd offset ??_R3CHandler@NBz2@NArchive@@8 ; NArchive::NBz2::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002730 _rdata$r        ends
.rdata$r:00002730
.data:00002734 ; ===========================================================================
.data:00002734
.data:00002734 ; Segment type: Pure data
.data:00002734 ; Segment permissions: Read/Write
.data:00002734 _data           segment dword public 'DATA' use32
.data:00002734                 assume cs:_data
.data:00002734                 ;org 2734h
.data:00002734 ; COMDAT (pick any)
.data:00002734                 public ??_R0?AVCHandler@NBz2@NArchive@@@8
.data:00002734 ; class NArchive::NBz2::CHandler `RTTI Type Descriptor'
.data:00002734 ??_R0?AVCHandler@NBz2@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00002734                                         ; DATA XREF: .rdata$r:0000272Co
.data:00002734                                         ; .rdata$r:NArchive::NBz2::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002734                                         ; const type_info::`vftable'
.data:00002738                 db    0
.data:00002739                 db    0
.data:0000273A                 db    0
.data:0000273B                 db    0
.data:0000273C                 db  2Eh ; .
.data:0000273D                 db  3Fh ; ?
.data:0000273E                 db  41h ; A
.data:0000273F                 db  56h ; V
.data:00002740                 db  43h ; C
.data:00002741                 db  48h ; H
.data:00002742                 db  61h ; a
.data:00002743                 db  6Eh ; n
.data:00002744                 db  64h ; d
.data:00002745                 db  6Ch ; l
.data:00002746                 db  65h ; e
.data:00002747                 db  72h ; r
.data:00002748                 db  40h ; @
.data:00002749                 db  4Eh ; N
.data:0000274A                 db  42h ; B
.data:0000274B                 db  7Ah ; z
.data:0000274C                 db  32h ; 2
.data:0000274D                 db  40h ; @
.data:0000274E                 db  4Eh ; N
.data:0000274F                 db  41h ; A
.data:00002750                 db  72h ; r
.data:00002751                 db  63h ; c
.data:00002752                 db  68h ; h
.data:00002753                 db  69h ; i
.data:00002754                 db  76h ; v
.data:00002755                 db  65h ; e
.data:00002756                 db  40h ; @
.data:00002757                 db  40h ; @
.data:00002758                 db    0
.data:00002759                 align 4
.data:00002759 _data           ends
.data:00002759
.rdata$r:0000275C ; ===========================================================================
.rdata$r:0000275C
.rdata$r:0000275C ; Segment type: Pure data
.rdata$r:0000275C ; Segment permissions: Read
.rdata$r:0000275C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000275C                 assume cs:_rdata$r
.rdata$r:0000275C                 ;org 275Ch
.rdata$r:0000275C ; COMDAT (pick any)
.rdata$r:0000275C                 public ??_R3CHandler@NBz2@NArchive@@8
.rdata$r:0000275C ; NArchive::NBz2::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000275C ??_R3CHandler@NBz2@NArchive@@8 db    0  ; DATA XREF: .rdata$r:00002730o
.rdata$r:0000275C                                         ; .rdata$r:000027B0o ...
.rdata$r:0000275D                 db    0
.rdata$r:0000275E                 db    0
.rdata$r:0000275F                 db    0
.rdata$r:00002760                 db    1
.rdata$r:00002761                 db    0
.rdata$r:00002762                 db    0
.rdata$r:00002763                 db    0
.rdata$r:00002764                 db  0Ah
.rdata$r:00002765                 db    0
.rdata$r:00002766                 db    0
.rdata$r:00002767                 db    0
.rdata$r:00002768                 dd offset ??_R2CHandler@NBz2@NArchive@@8 ; NArchive::NBz2::CHandler::`RTTI Base Class Array'
.rdata$r:00002768 _rdata$r        ends
.rdata$r:00002768
.rdata$r:0000276C ; ===========================================================================
.rdata$r:0000276C
.rdata$r:0000276C ; Segment type: Pure data
.rdata$r:0000276C ; Segment permissions: Read
.rdata$r:0000276C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000276C                 assume cs:_rdata$r
.rdata$r:0000276C                 ;org 276Ch
.rdata$r:0000276C ; COMDAT (pick any)
.rdata$r:0000276C                 public ??_R2CHandler@NBz2@NArchive@@8
.rdata$r:0000276C ; NArchive::NBz2::CHandler::`RTTI Base Class Array'
.rdata$r:0000276C ??_R2CHandler@NBz2@NArchive@@8 dd offset ??_R1A@?0A@EA@CHandler@NBz2@NArchive@@8
.rdata$r:0000276C                                         ; DATA XREF: .rdata$r:00002768o
.rdata$r:0000276C                                         ; NArchive::NBz2::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002770                 dd offset ??_R1A@?0A@EA@IInArchive@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002774                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00002778                 dd offset ??_R13?0A@EA@IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000277C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00002780                 dd offset ??_R17?0A@EA@IOutArchive@@8 ; IOutArchive::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00002784                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00002788                 dd offset ??_R1M@?0A@EA@ISetProperties@@8 ; ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:0000278C                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00002790                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00002794                 db    0
.rdata$r:00002795                 align 4
.rdata$r:00002795 _rdata$r        ends
.rdata$r:00002795
.rdata$r:00002798 ; ===========================================================================
.rdata$r:00002798
.rdata$r:00002798 ; Segment type: Pure data
.rdata$r:00002798 ; Segment permissions: Read
.rdata$r:00002798 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002798                 assume cs:_rdata$r
.rdata$r:00002798                 ;org 2798h
.rdata$r:00002798 ; COMDAT (pick any)
.rdata$r:00002798                 public ??_R1A@?0A@EA@CHandler@NBz2@NArchive@@8
.rdata$r:00002798 ; NArchive::NBz2::CHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002798 ??_R1A@?0A@EA@CHandler@NBz2@NArchive@@8 dd offset ??_R0?AVCHandler@NBz2@NArchive@@@8
.rdata$r:00002798                                         ; DATA XREF: .rdata$r:NArchive::NBz2::CHandler::`RTTI Base Class Array'o
.rdata$r:00002798                                         ; NArchive::NBz2::CHandler `RTTI Type Descriptor'
.rdata$r:0000279C                 db    9
.rdata$r:0000279D                 db    0
.rdata$r:0000279E                 db    0
.rdata$r:0000279F                 db    0
.rdata$r:000027A0                 db    0
.rdata$r:000027A1                 db    0
.rdata$r:000027A2                 db    0
.rdata$r:000027A3                 db    0
.rdata$r:000027A4                 db 0FFh
.rdata$r:000027A5                 db 0FFh
.rdata$r:000027A6                 db 0FFh
.rdata$r:000027A7                 db 0FFh
.rdata$r:000027A8                 db    0
.rdata$r:000027A9                 db    0
.rdata$r:000027AA                 db    0
.rdata$r:000027AB                 db    0
.rdata$r:000027AC                 db  40h ; @
.rdata$r:000027AD                 db    0
.rdata$r:000027AE                 db    0
.rdata$r:000027AF                 db    0
.rdata$r:000027B0                 dd offset ??_R3CHandler@NBz2@NArchive@@8 ; NArchive::NBz2::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:000027B0 _rdata$r        ends
.rdata$r:000027B0
.rdata$r:000027B4 ; ===========================================================================
.rdata$r:000027B4
.rdata$r:000027B4 ; Segment type: Pure data
.rdata$r:000027B4 ; Segment permissions: Read
.rdata$r:000027B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000027B4                 assume cs:_rdata$r
.rdata$r:000027B4                 ;org 27B4h
.rdata$r:000027B4 ; COMDAT (pick any)
.rdata$r:000027B4                 public ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:000027B4 ; IInArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000027B4 ??_R1A@?0A@EA@IInArchive@@8 dd offset ??_R0?AUIInArchive@@@8
.rdata$r:000027B4                                         ; DATA XREF: .rdata$r:00002770o
.rdata$r:000027B4                                         ; .rdata$r:IInArchive::`RTTI Base Class Array'o
.rdata$r:000027B4                                         ; IInArchive `RTTI Type Descriptor'
.rdata$r:000027B8                 db    1
.rdata$r:000027B9                 db    0
.rdata$r:000027BA                 db    0
.rdata$r:000027BB                 db    0
.rdata$r:000027BC                 db    0
.rdata$r:000027BD                 db    0
.rdata$r:000027BE                 db    0
.rdata$r:000027BF                 db    0
.rdata$r:000027C0                 db 0FFh
.rdata$r:000027C1                 db 0FFh
.rdata$r:000027C2                 db 0FFh
.rdata$r:000027C3                 db 0FFh
.rdata$r:000027C4                 db    0
.rdata$r:000027C5                 db    0
.rdata$r:000027C6                 db    0
.rdata$r:000027C7                 db    0
.rdata$r:000027C8                 db  40h ; @
.rdata$r:000027C9                 db    0
.rdata$r:000027CA                 db    0
.rdata$r:000027CB                 db    0
.rdata$r:000027CC                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000027CC _rdata$r        ends
.rdata$r:000027CC
.data:000027D0 ; ===========================================================================
.data:000027D0
.data:000027D0 ; Segment type: Pure data
.data:000027D0 ; Segment permissions: Read/Write
.data:000027D0 _data           segment dword public 'DATA' use32
.data:000027D0                 assume cs:_data
.data:000027D0                 ;org 27D0h
.data:000027D0 ; COMDAT (pick any)
.data:000027D0                 public ??_R0?AUIInArchive@@@8
.data:000027D0 ; struct IInArchive `RTTI Type Descriptor'
.data:000027D0 ??_R0?AUIInArchive@@@8 dd offset ??_7type_info@@6B@
.data:000027D0                                         ; DATA XREF: .rdata$r:IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000027D0                                         ; .rdata$r:00003028o
.data:000027D0                                         ; const type_info::`vftable'
.data:000027D4                 align 8
.data:000027D8 a_?auiinarchive db '.?AUIInArchive@@',0
.data:000027E9                 align 4
.data:000027E9 _data           ends
.data:000027E9
.rdata$r:000027EC ; ===========================================================================
.rdata$r:000027EC
.rdata$r:000027EC ; Segment type: Pure data
.rdata$r:000027EC ; Segment permissions: Read
.rdata$r:000027EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000027EC                 assume cs:_rdata$r
.rdata$r:000027EC                 ;org 27ECh
.rdata$r:000027EC ; COMDAT (pick any)
.rdata$r:000027EC                 public ??_R3IInArchive@@8
.rdata$r:000027EC ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000027EC ??_R3IInArchive@@8 db    0              ; DATA XREF: .rdata$r:000027CCo
.rdata$r:000027EC                                         ; .rdata$r:0000302Co
.rdata$r:000027ED                 db    0
.rdata$r:000027EE                 db    0
.rdata$r:000027EF                 db    0
.rdata$r:000027F0                 db    0
.rdata$r:000027F1                 db    0
.rdata$r:000027F2                 db    0
.rdata$r:000027F3                 db    0
.rdata$r:000027F4                 db    2
.rdata$r:000027F5                 db    0
.rdata$r:000027F6                 db    0
.rdata$r:000027F7                 db    0
.rdata$r:000027F8                 dd offset ??_R2IInArchive@@8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:000027F8 _rdata$r        ends
.rdata$r:000027F8
.rdata$r:000027FC ; ===========================================================================
.rdata$r:000027FC
.rdata$r:000027FC ; Segment type: Pure data
.rdata$r:000027FC ; Segment permissions: Read
.rdata$r:000027FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000027FC                 assume cs:_rdata$r
.rdata$r:000027FC                 ;org 27FCh
.rdata$r:000027FC ; COMDAT (pick any)
.rdata$r:000027FC                 public ??_R2IInArchive@@8
.rdata$r:000027FC ; IInArchive::`RTTI Base Class Array'
.rdata$r:000027FC ??_R2IInArchive@@8 dd offset ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:000027FC                                         ; DATA XREF: .rdata$r:000027F8o
.rdata$r:000027FC                                         ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002800                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002804                 db    0
.rdata$r:00002805                 align 4
.rdata$r:00002805 _rdata$r        ends
.rdata$r:00002805
.rdata$r:00002808 ; ===========================================================================
.rdata$r:00002808
.rdata$r:00002808 ; Segment type: Pure data
.rdata$r:00002808 ; Segment permissions: Read
.rdata$r:00002808 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002808                 assume cs:_rdata$r
.rdata$r:00002808                 ;org 2808h
.rdata$r:00002808 ; COMDAT (pick any)
.rdata$r:00002808                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00002808 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00002808 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002808                                         ; DATA XREF: .rdata$r:00002774o
.rdata$r:00002808                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000280C                 db    0
.rdata$r:0000280D                 db    0
.rdata$r:0000280E                 db    0
.rdata$r:0000280F                 db    0
.rdata$r:00002810                 db    0
.rdata$r:00002811                 db    0
.rdata$r:00002812                 db    0
.rdata$r:00002813                 db    0
.rdata$r:00002814                 db 0FFh
.rdata$r:00002815                 db 0FFh
.rdata$r:00002816                 db 0FFh
.rdata$r:00002817                 db 0FFh
.rdata$r:00002818                 db    0
.rdata$r:00002819                 db    0
.rdata$r:0000281A                 db    0
.rdata$r:0000281B                 db    0
.rdata$r:0000281C                 db  42h ; B
.rdata$r:0000281D                 db    0
.rdata$r:0000281E                 db    0
.rdata$r:0000281F                 db    0
.rdata$r:00002820                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002820 _rdata$r        ends
.rdata$r:00002820
.rdata$r:00002824 ; ===========================================================================
.rdata$r:00002824
.rdata$r:00002824 ; Segment type: Pure data
.rdata$r:00002824 ; Segment permissions: Read
.rdata$r:00002824 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002824                 assume cs:_rdata$r
.rdata$r:00002824                 ;org 2824h
.rdata$r:00002824 ; COMDAT (pick any)
.rdata$r:00002824                 public ??_R13?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00002824 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00002824 ??_R13?0A@EA@IArchiveOpenSeq@@8 dd offset ??_R0?AUIArchiveOpenSeq@@@8
.rdata$r:00002824                                         ; DATA XREF: .rdata$r:00002778o
.rdata$r:00002824                                         ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:00002828                 db    1
.rdata$r:00002829                 db    0
.rdata$r:0000282A                 db    0
.rdata$r:0000282B                 db    0
.rdata$r:0000282C                 db    4
.rdata$r:0000282D                 db    0
.rdata$r:0000282E                 db    0
.rdata$r:0000282F                 db    0
.rdata$r:00002830                 db 0FFh
.rdata$r:00002831                 db 0FFh
.rdata$r:00002832                 db 0FFh
.rdata$r:00002833                 db 0FFh
.rdata$r:00002834                 db    0
.rdata$r:00002835                 db    0
.rdata$r:00002836                 db    0
.rdata$r:00002837                 db    0
.rdata$r:00002838                 db  40h ; @
.rdata$r:00002839                 db    0
.rdata$r:0000283A                 db    0
.rdata$r:0000283B                 db    0
.rdata$r:0000283C                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000283C _rdata$r        ends
.rdata$r:0000283C
.data:00002840 ; ===========================================================================
.data:00002840
.data:00002840 ; Segment type: Pure data
.data:00002840 ; Segment permissions: Read/Write
.data:00002840 _data           segment dword public 'DATA' use32
.data:00002840                 assume cs:_data
.data:00002840                 ;org 2840h
.data:00002840 ; COMDAT (pick any)
.data:00002840                 public ??_R0?AUIArchiveOpenSeq@@@8
.data:00002840 ; struct IArchiveOpenSeq `RTTI Type Descriptor'
.data:00002840 ??_R0?AUIArchiveOpenSeq@@@8 dd offset ??_7type_info@@6B@
.data:00002840                                         ; DATA XREF: .rdata$r:IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00002840                                         ; .rdata$r:IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002840                                         ; const type_info::`vftable'
.data:00002844                 align 8
.data:00002848 a_?auiarchiveop db '.?AUIArchiveOpenSeq@@',0
.data:0000285E                 align 10h
.data:0000285E _data           ends
.data:0000285E
.rdata$r:00002860 ; ===========================================================================
.rdata$r:00002860
.rdata$r:00002860 ; Segment type: Pure data
.rdata$r:00002860 ; Segment permissions: Read
.rdata$r:00002860 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002860                 assume cs:_rdata$r
.rdata$r:00002860                 ;org 2860h
.rdata$r:00002860 ; COMDAT (pick any)
.rdata$r:00002860                 public ??_R3IArchiveOpenSeq@@8
.rdata$r:00002860 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002860 ??_R3IArchiveOpenSeq@@8 db    0         ; DATA XREF: .rdata$r:0000283Co
.rdata$r:00002860                                         ; .rdata$r:00002894o ...
.rdata$r:00002861                 db    0
.rdata$r:00002862                 db    0
.rdata$r:00002863                 db    0
.rdata$r:00002864                 db    0
.rdata$r:00002865                 db    0
.rdata$r:00002866                 db    0
.rdata$r:00002867                 db    0
.rdata$r:00002868                 db    2
.rdata$r:00002869                 db    0
.rdata$r:0000286A                 db    0
.rdata$r:0000286B                 db    0
.rdata$r:0000286C                 dd offset ??_R2IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Array'
.rdata$r:0000286C _rdata$r        ends
.rdata$r:0000286C
.rdata$r:00002870 ; ===========================================================================
.rdata$r:00002870
.rdata$r:00002870 ; Segment type: Pure data
.rdata$r:00002870 ; Segment permissions: Read
.rdata$r:00002870 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002870                 assume cs:_rdata$r
.rdata$r:00002870                 ;org 2870h
.rdata$r:00002870 ; COMDAT (pick any)
.rdata$r:00002870                 public ??_R2IArchiveOpenSeq@@8
.rdata$r:00002870 ; IArchiveOpenSeq::`RTTI Base Class Array'
.rdata$r:00002870 ??_R2IArchiveOpenSeq@@8 dd offset ??_R1A@?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00002870                                         ; DATA XREF: .rdata$r:0000286Co
.rdata$r:00002870                                         ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002874                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002878                 db    0
.rdata$r:00002879                 align 4
.rdata$r:00002879 _rdata$r        ends
.rdata$r:00002879
.rdata$r:0000287C ; ===========================================================================
.rdata$r:0000287C
.rdata$r:0000287C ; Segment type: Pure data
.rdata$r:0000287C ; Segment permissions: Read
.rdata$r:0000287C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000287C                 assume cs:_rdata$r
.rdata$r:0000287C                 ;org 287Ch
.rdata$r:0000287C ; COMDAT (pick any)
.rdata$r:0000287C                 public ??_R1A@?0A@EA@IArchiveOpenSeq@@8
.rdata$r:0000287C ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000287C ??_R1A@?0A@EA@IArchiveOpenSeq@@8 dd offset ??_R0?AUIArchiveOpenSeq@@@8
.rdata$r:0000287C                                         ; DATA XREF: .rdata$r:IArchiveOpenSeq::`RTTI Base Class Array'o
.rdata$r:0000287C                                         ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:00002880                 db    1
.rdata$r:00002881                 db    0
.rdata$r:00002882                 db    0
.rdata$r:00002883                 db    0
.rdata$r:00002884                 db    0
.rdata$r:00002885                 db    0
.rdata$r:00002886                 db    0
.rdata$r:00002887                 db    0
.rdata$r:00002888                 db 0FFh
.rdata$r:00002889                 db 0FFh
.rdata$r:0000288A                 db 0FFh
.rdata$r:0000288B                 db 0FFh
.rdata$r:0000288C                 db    0
.rdata$r:0000288D                 db    0
.rdata$r:0000288E                 db    0
.rdata$r:0000288F                 db    0
.rdata$r:00002890                 db  40h ; @
.rdata$r:00002891                 db    0
.rdata$r:00002892                 db    0
.rdata$r:00002893                 db    0
.rdata$r:00002894                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002894 _rdata$r        ends
.rdata$r:00002894
.rdata$r:00002898 ; ===========================================================================
.rdata$r:00002898
.rdata$r:00002898 ; Segment type: Pure data
.rdata$r:00002898 ; Segment permissions: Read
.rdata$r:00002898 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002898                 assume cs:_rdata$r
.rdata$r:00002898                 ;org 2898h
.rdata$r:00002898 ; COMDAT (pick any)
.rdata$r:00002898                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00002898 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00002898 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002898                                         ; DATA XREF: .rdata$r:0000277Co
.rdata$r:00002898                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000289C                 align 10h
.rdata$r:000028A0                 db    4
.rdata$r:000028A1                 db    0
.rdata$r:000028A2                 db    0
.rdata$r:000028A3                 db    0
.rdata$r:000028A4                 db 0FFh
.rdata$r:000028A5                 db 0FFh
.rdata$r:000028A6                 db 0FFh
.rdata$r:000028A7                 db 0FFh
.rdata$r:000028A8                 db    0
.rdata$r:000028A9                 db    0
.rdata$r:000028AA                 db    0
.rdata$r:000028AB                 db    0
.rdata$r:000028AC                 db  42h ; B
.rdata$r:000028AD                 db    0
.rdata$r:000028AE                 db    0
.rdata$r:000028AF                 db    0
.rdata$r:000028B0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028B0 _rdata$r        ends
.rdata$r:000028B0
.rdata$r:000028B4 ; ===========================================================================
.rdata$r:000028B4
.rdata$r:000028B4 ; Segment type: Pure data
.rdata$r:000028B4 ; Segment permissions: Read
.rdata$r:000028B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000028B4                 assume cs:_rdata$r
.rdata$r:000028B4                 ;org 28B4h
.rdata$r:000028B4 ; COMDAT (pick any)
.rdata$r:000028B4                 public ??_R17?0A@EA@IOutArchive@@8
.rdata$r:000028B4 ; IOutArchive::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000028B4 ??_R17?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:000028B4                                         ; DATA XREF: .rdata$r:00002780o
.rdata$r:000028B4                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:000028B8                 db    1
.rdata$r:000028B9                 db    0
.rdata$r:000028BA                 db    0
.rdata$r:000028BB                 db    0
.rdata$r:000028BC                 db    8
.rdata$r:000028BD                 db    0
.rdata$r:000028BE                 db    0
.rdata$r:000028BF                 db    0
.rdata$r:000028C0                 db 0FFh
.rdata$r:000028C1                 db 0FFh
.rdata$r:000028C2                 db 0FFh
.rdata$r:000028C3                 db 0FFh
.rdata$r:000028C4                 db    0
.rdata$r:000028C5                 db    0
.rdata$r:000028C6                 db    0
.rdata$r:000028C7                 db    0
.rdata$r:000028C8                 db  40h ; @
.rdata$r:000028C9                 db    0
.rdata$r:000028CA                 db    0
.rdata$r:000028CB                 db    0
.rdata$r:000028CC                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028CC _rdata$r        ends
.rdata$r:000028CC
.data:000028D0 ; ===========================================================================
.data:000028D0
.data:000028D0 ; Segment type: Pure data
.data:000028D0 ; Segment permissions: Read/Write
.data:000028D0 _data           segment dword public 'DATA' use32
.data:000028D0                 assume cs:_data
.data:000028D0                 ;org 28D0h
.data:000028D0 ; COMDAT (pick any)
.data:000028D0                 public ??_R0?AUIOutArchive@@@8
.data:000028D0 ; struct IOutArchive `RTTI Type Descriptor'
.data:000028D0 ??_R0?AUIOutArchive@@@8 dd offset ??_7type_info@@6B@
.data:000028D0                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000028D0                                         ; .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000028D0                                         ; const type_info::`vftable'
.data:000028D4                 align 8
.data:000028D8 a_?auioutarchiv db '.?AUIOutArchive@@',0
.data:000028EA                 align 4
.data:000028EA _data           ends
.data:000028EA
.rdata$r:000028EC ; ===========================================================================
.rdata$r:000028EC
.rdata$r:000028EC ; Segment type: Pure data
.rdata$r:000028EC ; Segment permissions: Read
.rdata$r:000028EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000028EC                 assume cs:_rdata$r
.rdata$r:000028EC                 ;org 28ECh
.rdata$r:000028EC ; COMDAT (pick any)
.rdata$r:000028EC                 public ??_R3IOutArchive@@8
.rdata$r:000028EC ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028EC ??_R3IOutArchive@@8 db    0             ; DATA XREF: .rdata$r:000028CCo
.rdata$r:000028EC                                         ; .rdata$r:00002920o ...
.rdata$r:000028ED                 db    0
.rdata$r:000028EE                 db    0
.rdata$r:000028EF                 db    0
.rdata$r:000028F0                 db    0
.rdata$r:000028F1                 db    0
.rdata$r:000028F2                 db    0
.rdata$r:000028F3                 db    0
.rdata$r:000028F4                 db    2
.rdata$r:000028F5                 db    0
.rdata$r:000028F6                 db    0
.rdata$r:000028F7                 db    0
.rdata$r:000028F8                 dd offset ??_R2IOutArchive@@8 ; IOutArchive::`RTTI Base Class Array'
.rdata$r:000028F8 _rdata$r        ends
.rdata$r:000028F8
.rdata$r:000028FC ; ===========================================================================
.rdata$r:000028FC
.rdata$r:000028FC ; Segment type: Pure data
.rdata$r:000028FC ; Segment permissions: Read
.rdata$r:000028FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000028FC                 assume cs:_rdata$r
.rdata$r:000028FC                 ;org 28FCh
.rdata$r:000028FC ; COMDAT (pick any)
.rdata$r:000028FC                 public ??_R2IOutArchive@@8
.rdata$r:000028FC ; IOutArchive::`RTTI Base Class Array'
.rdata$r:000028FC ??_R2IOutArchive@@8 dd offset ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:000028FC                                         ; DATA XREF: .rdata$r:000028F8o
.rdata$r:000028FC                                         ; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002900                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002904                 db    0
.rdata$r:00002905                 align 4
.rdata$r:00002905 _rdata$r        ends
.rdata$r:00002905
.rdata$r:00002908 ; ===========================================================================
.rdata$r:00002908
.rdata$r:00002908 ; Segment type: Pure data
.rdata$r:00002908 ; Segment permissions: Read
.rdata$r:00002908 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002908                 assume cs:_rdata$r
.rdata$r:00002908                 ;org 2908h
.rdata$r:00002908 ; COMDAT (pick any)
.rdata$r:00002908                 public ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:00002908 ; IOutArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002908 ??_R1A@?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:00002908                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Array'o
.rdata$r:00002908                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:0000290C                 db    1
.rdata$r:0000290D                 db    0
.rdata$r:0000290E                 db    0
.rdata$r:0000290F                 db    0
.rdata$r:00002910                 db    0
.rdata$r:00002911                 db    0
.rdata$r:00002912                 db    0
.rdata$r:00002913                 db    0
.rdata$r:00002914                 db 0FFh
.rdata$r:00002915                 db 0FFh
.rdata$r:00002916                 db 0FFh
.rdata$r:00002917                 db 0FFh
.rdata$r:00002918                 db    0
.rdata$r:00002919                 db    0
.rdata$r:0000291A                 db    0
.rdata$r:0000291B                 db    0
.rdata$r:0000291C                 db  40h ; @
.rdata$r:0000291D                 db    0
.rdata$r:0000291E                 db    0
.rdata$r:0000291F                 db    0
.rdata$r:00002920                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002920 _rdata$r        ends
.rdata$r:00002920
.rdata$r:00002924 ; ===========================================================================
.rdata$r:00002924
.rdata$r:00002924 ; Segment type: Pure data
.rdata$r:00002924 ; Segment permissions: Read
.rdata$r:00002924 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002924                 assume cs:_rdata$r
.rdata$r:00002924                 ;org 2924h
.rdata$r:00002924 ; COMDAT (pick any)
.rdata$r:00002924                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00002924 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00002924 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002924                                         ; DATA XREF: .rdata$r:00002784o
.rdata$r:00002924                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002928                 db    0
.rdata$r:00002929                 db    0
.rdata$r:0000292A                 db    0
.rdata$r:0000292B                 db    0
.rdata$r:0000292C                 db    8
.rdata$r:0000292D                 db    0
.rdata$r:0000292E                 db    0
.rdata$r:0000292F                 db    0
.rdata$r:00002930                 db 0FFh
.rdata$r:00002931                 db 0FFh
.rdata$r:00002932                 db 0FFh
.rdata$r:00002933                 db 0FFh
.rdata$r:00002934                 db    0
.rdata$r:00002935                 db    0
.rdata$r:00002936                 db    0
.rdata$r:00002937                 db    0
.rdata$r:00002938                 db  42h ; B
.rdata$r:00002939                 db    0
.rdata$r:0000293A                 db    0
.rdata$r:0000293B                 db    0
.rdata$r:0000293C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000293C _rdata$r        ends
.rdata$r:0000293C
.rdata$r:00002940 ; ===========================================================================
.rdata$r:00002940
.rdata$r:00002940 ; Segment type: Pure data
.rdata$r:00002940 ; Segment permissions: Read
.rdata$r:00002940 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002940                 assume cs:_rdata$r
.rdata$r:00002940                 ;org 2940h
.rdata$r:00002940 ; COMDAT (pick any)
.rdata$r:00002940                 public ??_R1M@?0A@EA@ISetProperties@@8
.rdata$r:00002940 ; ISetProperties::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00002940 ??_R1M@?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:00002940                                         ; DATA XREF: .rdata$r:00002788o
.rdata$r:00002940                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:00002944                 db    1
.rdata$r:00002945                 db    0
.rdata$r:00002946                 db    0
.rdata$r:00002947                 db    0
.rdata$r:00002948                 db  0Ch
.rdata$r:00002949                 db    0
.rdata$r:0000294A                 db    0
.rdata$r:0000294B                 db    0
.rdata$r:0000294C                 db 0FFh
.rdata$r:0000294D                 db 0FFh
.rdata$r:0000294E                 db 0FFh
.rdata$r:0000294F                 db 0FFh
.rdata$r:00002950                 db    0
.rdata$r:00002951                 db    0
.rdata$r:00002952                 db    0
.rdata$r:00002953                 db    0
.rdata$r:00002954                 db  40h ; @
.rdata$r:00002955                 db    0
.rdata$r:00002956                 db    0
.rdata$r:00002957                 db    0
.rdata$r:00002958                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002958 _rdata$r        ends
.rdata$r:00002958
.data:0000295C ; ===========================================================================
.data:0000295C
.data:0000295C ; Segment type: Pure data
.data:0000295C ; Segment permissions: Read/Write
.data:0000295C _data           segment dword public 'DATA' use32
.data:0000295C                 assume cs:_data
.data:0000295C                 ;org 295Ch
.data:0000295C ; COMDAT (pick any)
.data:0000295C                 public ??_R0?AUISetProperties@@@8
.data:0000295C ; struct ISetProperties `RTTI Type Descriptor'
.data:0000295C ??_R0?AUISetProperties@@@8 dd offset ??_7type_info@@6B@
.data:0000295C                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:0000295C                                         ; .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000295C                                         ; const type_info::`vftable'
.data:00002960                 db    0
.data:00002961                 db    0
.data:00002962                 db    0
.data:00002963                 db    0
.data:00002964                 db  2Eh ; .
.data:00002965                 db  3Fh ; ?
.data:00002966                 db  41h ; A
.data:00002967                 db  55h ; U
.data:00002968                 db  49h ; I
.data:00002969                 db  53h ; S
.data:0000296A                 db  65h ; e
.data:0000296B                 db  74h ; t
.data:0000296C                 db  50h ; P
.data:0000296D                 db  72h ; r
.data:0000296E                 db  6Fh ; o
.data:0000296F                 db  70h ; p
.data:00002970                 db  65h ; e
.data:00002971                 db  72h ; r
.data:00002972                 db  74h ; t
.data:00002973                 db  69h ; i
.data:00002974                 db  65h ; e
.data:00002975                 db  73h ; s
.data:00002976                 db  40h ; @
.data:00002977                 db  40h ; @
.data:00002978                 db    0
.data:00002979                 align 4
.data:00002979 _data           ends
.data:00002979
.rdata$r:0000297C ; ===========================================================================
.rdata$r:0000297C
.rdata$r:0000297C ; Segment type: Pure data
.rdata$r:0000297C ; Segment permissions: Read
.rdata$r:0000297C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000297C                 assume cs:_rdata$r
.rdata$r:0000297C                 ;org 297Ch
.rdata$r:0000297C ; COMDAT (pick any)
.rdata$r:0000297C                 public ??_R3ISetProperties@@8
.rdata$r:0000297C ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000297C ??_R3ISetProperties@@8 db    0          ; DATA XREF: .rdata$r:00002958o
.rdata$r:0000297C                                         ; .rdata$r:000029B0o ...
.rdata$r:0000297D                 db    0
.rdata$r:0000297E                 db    0
.rdata$r:0000297F                 db    0
.rdata$r:00002980                 db    0
.rdata$r:00002981                 db    0
.rdata$r:00002982                 db    0
.rdata$r:00002983                 db    0
.rdata$r:00002984                 db    2
.rdata$r:00002985                 db    0
.rdata$r:00002986                 db    0
.rdata$r:00002987                 db    0
.rdata$r:00002988                 dd offset ??_R2ISetProperties@@8 ; ISetProperties::`RTTI Base Class Array'
.rdata$r:00002988 _rdata$r        ends
.rdata$r:00002988
.rdata$r:0000298C ; ===========================================================================
.rdata$r:0000298C
.rdata$r:0000298C ; Segment type: Pure data
.rdata$r:0000298C ; Segment permissions: Read
.rdata$r:0000298C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000298C                 assume cs:_rdata$r
.rdata$r:0000298C                 ;org 298Ch
.rdata$r:0000298C ; COMDAT (pick any)
.rdata$r:0000298C                 public ??_R2ISetProperties@@8
.rdata$r:0000298C ; ISetProperties::`RTTI Base Class Array'
.rdata$r:0000298C ??_R2ISetProperties@@8 dd offset ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:0000298C                                         ; DATA XREF: .rdata$r:00002988o
.rdata$r:0000298C                                         ; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002990                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002994                 db    0
.rdata$r:00002995                 align 4
.rdata$r:00002995 _rdata$r        ends
.rdata$r:00002995
.rdata$r:00002998 ; ===========================================================================
.rdata$r:00002998
.rdata$r:00002998 ; Segment type: Pure data
.rdata$r:00002998 ; Segment permissions: Read
.rdata$r:00002998 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002998                 assume cs:_rdata$r
.rdata$r:00002998                 ;org 2998h
.rdata$r:00002998 ; COMDAT (pick any)
.rdata$r:00002998                 public ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:00002998 ; ISetProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002998 ??_R1A@?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:00002998                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Array'o
.rdata$r:00002998                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:0000299C                 db    1
.rdata$r:0000299D                 db    0
.rdata$r:0000299E                 db    0
.rdata$r:0000299F                 db    0
.rdata$r:000029A0                 db    0
.rdata$r:000029A1                 db    0
.rdata$r:000029A2                 db    0
.rdata$r:000029A3                 db    0
.rdata$r:000029A4                 db 0FFh
.rdata$r:000029A5                 db 0FFh
.rdata$r:000029A6                 db 0FFh
.rdata$r:000029A7                 db 0FFh
.rdata$r:000029A8                 db    0
.rdata$r:000029A9                 db    0
.rdata$r:000029AA                 db    0
.rdata$r:000029AB                 db    0
.rdata$r:000029AC                 db  40h ; @
.rdata$r:000029AD                 db    0
.rdata$r:000029AE                 db    0
.rdata$r:000029AF                 db    0
.rdata$r:000029B0                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000029B0 _rdata$r        ends
.rdata$r:000029B0
.rdata$r:000029B4 ; ===========================================================================
.rdata$r:000029B4
.rdata$r:000029B4 ; Segment type: Pure data
.rdata$r:000029B4 ; Segment permissions: Read
.rdata$r:000029B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000029B4                 assume cs:_rdata$r
.rdata$r:000029B4                 ;org 29B4h
.rdata$r:000029B4 ; COMDAT (pick any)
.rdata$r:000029B4                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:000029B4 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:000029B4 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000029B4                                         ; DATA XREF: .rdata$r:0000278Co
.rdata$r:000029B4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000029B8                 db    0
.rdata$r:000029B9                 db    0
.rdata$r:000029BA                 db    0
.rdata$r:000029BB                 db    0
.rdata$r:000029BC                 db  0Ch
.rdata$r:000029BD                 db    0
.rdata$r:000029BE                 db    0
.rdata$r:000029BF                 db    0
.rdata$r:000029C0                 db 0FFh
.rdata$r:000029C1                 db 0FFh
.rdata$r:000029C2                 db 0FFh
.rdata$r:000029C3                 db 0FFh
.rdata$r:000029C4                 db    0
.rdata$r:000029C5                 db    0
.rdata$r:000029C6                 db    0
.rdata$r:000029C7                 db    0
.rdata$r:000029C8                 db  42h ; B
.rdata$r:000029C9                 db    0
.rdata$r:000029CA                 db    0
.rdata$r:000029CB                 db    0
.rdata$r:000029CC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000029CC _rdata$r        ends
.rdata$r:000029CC
.rdata$r:000029D0 ; ===========================================================================
.rdata$r:000029D0
.rdata$r:000029D0 ; Segment type: Pure data
.rdata$r:000029D0 ; Segment permissions: Read
.rdata$r:000029D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000029D0                 assume cs:_rdata$r
.rdata$r:000029D0                 ;org 29D0h
.rdata$r:000029D0 ; COMDAT (pick any)
.rdata$r:000029D0                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:000029D0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000029D0 ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000029D0                                         ; DATA XREF: .rdata$r:00002790o
.rdata$r:000029D0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000029D4                 align 8
.rdata$r:000029D8                 db  10h
.rdata$r:000029D9                 db    0
.rdata$r:000029DA                 db    0
.rdata$r:000029DB                 db    0
.rdata$r:000029DC                 db 0FFh
.rdata$r:000029DD                 db 0FFh
.rdata$r:000029DE                 db 0FFh
.rdata$r:000029DF                 db 0FFh
.rdata$r:000029E0                 db    0
.rdata$r:000029E1                 db    0
.rdata$r:000029E2                 db    0
.rdata$r:000029E3                 db    0
.rdata$r:000029E4                 db  40h ; @
.rdata$r:000029E5                 db    0
.rdata$r:000029E6                 db    0
.rdata$r:000029E7                 db    0
.rdata$r:000029E8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000029E8 _rdata$r        ends
.rdata$r:000029E8
.rdata$r:000029EC ; ===========================================================================
.rdata$r:000029EC
.rdata$r:000029EC ; Segment type: Pure data
.rdata$r:000029EC ; Segment permissions: Read
.rdata$r:000029EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000029EC                 assume cs:_rdata$r
.rdata$r:000029EC                 ;org 29ECh
.rdata$r:000029EC ; COMDAT (pick any)
.rdata$r:000029EC                 public ??_R4CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@
.rdata$r:000029EC ; const NArchive::NBz2::CHandler::`RTTI Complete Object Locator'{for `IArchiveOpenSeq'}
.rdata$r:000029EC ??_R4CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@ db    0
.rdata$r:000029EC                                         ; DATA XREF: .rdata:000026A0o
.rdata$r:000029ED                 db    0
.rdata$r:000029EE                 db    0
.rdata$r:000029EF                 db    0
.rdata$r:000029F0                 db    4
.rdata$r:000029F1                 db    0
.rdata$r:000029F2                 db    0
.rdata$r:000029F3                 db    0
.rdata$r:000029F4                 db    0
.rdata$r:000029F5                 db    0
.rdata$r:000029F6                 db    0
.rdata$r:000029F7                 db    0
.rdata$r:000029F8                 dd offset ??_R0?AVCHandler@NBz2@NArchive@@@8 ; NArchive::NBz2::CHandler `RTTI Type Descriptor'
.rdata$r:000029FC                 dd offset ??_R3CHandler@NBz2@NArchive@@8 ; NArchive::NBz2::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:000029FC _rdata$r        ends
.rdata$r:000029FC
.rdata$r:00002A00 ; ===========================================================================
.rdata$r:00002A00
.rdata$r:00002A00 ; Segment type: Pure data
.rdata$r:00002A00 ; Segment permissions: Read
.rdata$r:00002A00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002A00                 assume cs:_rdata$r
.rdata$r:00002A00                 ;org 2A00h
.rdata$r:00002A00 ; COMDAT (pick any)
.rdata$r:00002A00                 public ??_R4CHandler@NBz2@NArchive@@6BIOutArchive@@@
.rdata$r:00002A00 ; const NArchive::NBz2::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata$r:00002A00 ??_R4CHandler@NBz2@NArchive@@6BIOutArchive@@@ db    0
.rdata$r:00002A00                                         ; DATA XREF: .rdata:00002688o
.rdata$r:00002A01                 db    0
.rdata$r:00002A02                 db    0
.rdata$r:00002A03                 db    0
.rdata$r:00002A04                 db    8
.rdata$r:00002A05                 db    0
.rdata$r:00002A06                 db    0
.rdata$r:00002A07                 db    0
.rdata$r:00002A08                 db    0
.rdata$r:00002A09                 db    0
.rdata$r:00002A0A                 db    0
.rdata$r:00002A0B                 db    0
.rdata$r:00002A0C                 dd offset ??_R0?AVCHandler@NBz2@NArchive@@@8 ; NArchive::NBz2::CHandler `RTTI Type Descriptor'
.rdata$r:00002A10                 dd offset ??_R3CHandler@NBz2@NArchive@@8 ; NArchive::NBz2::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002A10 _rdata$r        ends
.rdata$r:00002A10
.rdata$r:00002A14 ; ===========================================================================
.rdata$r:00002A14
.rdata$r:00002A14 ; Segment type: Pure data
.rdata$r:00002A14 ; Segment permissions: Read
.rdata$r:00002A14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002A14                 assume cs:_rdata$r
.rdata$r:00002A14                 ;org 2A14h
.rdata$r:00002A14 ; COMDAT (pick any)
.rdata$r:00002A14                 public ??_R4CHandler@NBz2@NArchive@@6BISetProperties@@@
.rdata$r:00002A14 ; const NArchive::NBz2::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata$r:00002A14 ??_R4CHandler@NBz2@NArchive@@6BISetProperties@@@ db    0
.rdata$r:00002A14                                         ; DATA XREF: .rdata:00002674o
.rdata$r:00002A15                 db    0
.rdata$r:00002A16                 db    0
.rdata$r:00002A17                 db    0
.rdata$r:00002A18                 db  0Ch
.rdata$r:00002A19                 db    0
.rdata$r:00002A1A                 db    0
.rdata$r:00002A1B                 db    0
.rdata$r:00002A1C                 db    0
.rdata$r:00002A1D                 db    0
.rdata$r:00002A1E                 db    0
.rdata$r:00002A1F                 db    0
.rdata$r:00002A20                 dd offset ??_R0?AVCHandler@NBz2@NArchive@@@8 ; NArchive::NBz2::CHandler `RTTI Type Descriptor'
.rdata$r:00002A24                 dd offset ??_R3CHandler@NBz2@NArchive@@8 ; NArchive::NBz2::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002A24 _rdata$r        ends
.rdata$r:00002A24
.text:00002A28 ; ===========================================================================
.text:00002A28
.text:00002A28 ; Segment type: Pure code
.text:00002A28 ; Segment permissions: Read/Execute
.text:00002A28 _text           segment para public 'CODE' use32
.text:00002A28                 assume cs:_text
.text:00002A28                 ;org 2A28h
.text:00002A28 ; COMDAT (pick any)
.text:00002A28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A28
.text:00002A28 ; =============== S U B R O U T I N E =======================================
.text:00002A28
.text:00002A28 ; Attributes: bp-based frame
.text:00002A28
.text:00002A28 ; _DWORD __thiscall NArchive::CSingleMethodProps::CSingleMethodProps(NArchive::CSingleMethodProps *__hidden this)
.text:00002A28                 public ??0CSingleMethodProps@NArchive@@QAE@XZ
.text:00002A28 ??0CSingleMethodProps@NArchive@@QAE@XZ proc near
.text:00002A28                                         ; CODE XREF: NArchive::NBz2::CHandler::CHandler(void)+AFp
.text:00002A28
.text:00002A28 var_10          = dword ptr -10h
.text:00002A28 var_C           = dword ptr -0Ch
.text:00002A28 var_4           = dword ptr -4
.text:00002A28
.text:00002A28                 push    ebp
.text:00002A29                 mov     ebp, esp
.text:00002A2B                 push    0FFFFFFFFh
.text:00002A2D                 push    offset __ehhandler$??0CSingleMethodProps@NArchive@@QAE@XZ
.text:00002A32                 mov     eax, large fs:0
.text:00002A38                 push    eax
.text:00002A39                 push    ecx
.text:00002A3A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002A41                 mov     eax, dword ptr ds:___security_cookie
.text:00002A46                 xor     eax, ebp
.text:00002A48                 push    eax
.text:00002A49                 lea     eax, [ebp+var_C]
.text:00002A4C                 mov     large fs:0, eax
.text:00002A52                 mov     [ebp+var_10], ecx
.text:00002A55                 mov     ecx, [ebp+var_10] ; this
.text:00002A58                 call    ??0COneMethodInfo@@QAE@XZ ; COneMethodInfo::COneMethodInfo(void)
.text:00002A5D                 mov     [ebp+var_4], 0
.text:00002A64                 mov     ecx, [ebp+var_10] ; this
.text:00002A67                 call    ?Init@CSingleMethodProps@NArchive@@QAEXXZ ; NArchive::CSingleMethodProps::Init(void)
.text:00002A6C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002A73                 mov     eax, [ebp+var_10]
.text:00002A76                 mov     ecx, [ebp+var_C]
.text:00002A79                 mov     large fs:0, ecx
.text:00002A80                 pop     ecx
.text:00002A81                 add     esp, 10h
.text:00002A84                 cmp     ebp, esp
.text:00002A86                 call    __RTC_CheckEsp
.text:00002A8B                 mov     esp, ebp
.text:00002A8D                 pop     ebp
.text:00002A8E                 retn
.text:00002A8E ??0CSingleMethodProps@NArchive@@QAE@XZ endp
.text:00002A8E
.text:00002A8E ; ---------------------------------------------------------------------------
.text:00002A8F                 align 10h
.text:00002A8F _text           ends
.text:00002A8F
.text$x:00002A90 ; ===========================================================================
.text$x:00002A90
.text$x:00002A90 ; Segment type: Pure code
.text$x:00002A90 ; Segment permissions: Read/Execute
.text$x:00002A90 _text$x         segment para public 'CODE' use32
.text$x:00002A90                 assume cs:_text$x
.text$x:00002A90                 ;org 2A90h
.text$x:00002A90 ; COMDAT (pick associative to section at 2A28)
.text$x:00002A90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002A90
.text$x:00002A90 ; =============== S U B R O U T I N E =======================================
.text$x:00002A90
.text$x:00002A90
.text$x:00002A90 __unwindfunclet$??0CSingleMethodProps@NArchive@@QAE@XZ$0 proc near
.text$x:00002A90                                         ; DATA XREF: .xdata$x:00002AB8o
.text$x:00002A90                 mov     ecx, [ebp-10h]  ; this
.text$x:00002A93                 jmp     ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text$x:00002A93 __unwindfunclet$??0CSingleMethodProps@NArchive@@QAE@XZ$0 endp
.text$x:00002A93
.text$x:00002A98
.text$x:00002A98 ; =============== S U B R O U T I N E =======================================
.text$x:00002A98
.text$x:00002A98
.text$x:00002A98 __ehhandler$??0CSingleMethodProps@NArchive@@QAE@XZ proc near
.text$x:00002A98                                         ; DATA XREF: NArchive::CSingleMethodProps::CSingleMethodProps(void)+5o
.text$x:00002A98
.text$x:00002A98 arg_4           = dword ptr  8
.text$x:00002A98
.text$x:00002A98                 mov     edx, [esp+arg_4]
.text$x:00002A9C                 lea     eax, [edx+0Ch]
.text$x:00002A9F                 mov     ecx, [edx-8]
.text$x:00002AA2                 xor     ecx, eax
.text$x:00002AA4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002AA9                 mov     eax, offset __ehfuncinfo$??0CSingleMethodProps@NArchive@@QAE@XZ
.text$x:00002AAE                 jmp     ___CxxFrameHandler3
.text$x:00002AAE __ehhandler$??0CSingleMethodProps@NArchive@@QAE@XZ endp
.text$x:00002AAE
.text$x:00002AAE ; ---------------------------------------------------------------------------
.text$x:00002AB3                 align 4
.text$x:00002AB3 _text$x         ends
.text$x:00002AB3
.xdata$x:00002AB4 ; ===========================================================================
.xdata$x:00002AB4
.xdata$x:00002AB4 ; Segment type: Pure data
.xdata$x:00002AB4 ; Segment permissions: Read
.xdata$x:00002AB4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002AB4                 assume cs:_xdata$x
.xdata$x:00002AB4                 ;org 2AB4h
.xdata$x:00002AB4 ; COMDAT (pick associative to section at 2A28)
.xdata$x:00002AB4 __unwindtable$??0CSingleMethodProps@NArchive@@QAE@XZ db 0FFh
.xdata$x:00002AB4                                         ; DATA XREF: .xdata$x:00002AC4o
.xdata$x:00002AB5                 db 0FFh
.xdata$x:00002AB6                 db 0FFh
.xdata$x:00002AB7                 db 0FFh
.xdata$x:00002AB8                 dd offset __unwindfunclet$??0CSingleMethodProps@NArchive@@QAE@XZ$0
.xdata$x:00002ABC __ehfuncinfo$??0CSingleMethodProps@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00002ABC                                         ; DATA XREF: __ehhandler$??0CSingleMethodProps@NArchive@@QAE@XZ+11o
.xdata$x:00002ABD                 db    5
.xdata$x:00002ABE                 db  93h ; ô
.xdata$x:00002ABF                 db  19h
.xdata$x:00002AC0                 db    1
.xdata$x:00002AC1                 db    0
.xdata$x:00002AC2                 db    0
.xdata$x:00002AC3                 db    0
.xdata$x:00002AC4                 dd offset __unwindtable$??0CSingleMethodProps@NArchive@@QAE@XZ
.xdata$x:00002AC8                 db    0
.xdata$x:00002AC9                 db    0
.xdata$x:00002ACA                 db    0
.xdata$x:00002ACB                 db    0
.xdata$x:00002ACC                 db    0
.xdata$x:00002ACD                 db    0
.xdata$x:00002ACE                 db    0
.xdata$x:00002ACF                 db    0
.xdata$x:00002AD0                 db    0
.xdata$x:00002AD1                 db    0
.xdata$x:00002AD2                 db    0
.xdata$x:00002AD3                 db    0
.xdata$x:00002AD4                 db    0
.xdata$x:00002AD5                 db    0
.xdata$x:00002AD6                 db    0
.xdata$x:00002AD7                 db    0
.xdata$x:00002AD8                 db    0
.xdata$x:00002AD9                 db    0
.xdata$x:00002ADA                 db    0
.xdata$x:00002ADB                 db    0
.xdata$x:00002ADC                 db    1
.xdata$x:00002ADD                 db    0
.xdata$x:00002ADE                 db    0
.xdata$x:00002ADF                 db    0
.xdata$x:00002ADF _xdata$x        ends
.xdata$x:00002ADF
.text:00002AE0 ; ===========================================================================
.text:00002AE0
.text:00002AE0 ; Segment type: Pure code
.text:00002AE0 ; Segment permissions: Read/Execute
.text:00002AE0 _text           segment para public 'CODE' use32
.text:00002AE0                 assume cs:_text
.text:00002AE0                 ;org 2AE0h
.text:00002AE0 ; COMDAT (pick any)
.text:00002AE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002AE0
.text:00002AE0 ; =============== S U B R O U T I N E =======================================
.text:00002AE0
.text:00002AE0 ; Attributes: bp-based frame
.text:00002AE0
.text:00002AE0 ; _DWORD __thiscall COneMethodInfo::COneMethodInfo(COneMethodInfo *__hidden this)
.text:00002AE0                 public ??0COneMethodInfo@@QAE@XZ
.text:00002AE0 ??0COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: NArchive::CSingleMethodProps::CSingleMethodProps(void)+30p
.text:00002AE0
.text:00002AE0 var_10          = dword ptr -10h
.text:00002AE0 var_C           = dword ptr -0Ch
.text:00002AE0 var_4           = dword ptr -4
.text:00002AE0
.text:00002AE0                 push    ebp
.text:00002AE1                 mov     ebp, esp
.text:00002AE3                 push    0FFFFFFFFh
.text:00002AE5                 push    offset __ehhandler$??0COneMethodInfo@@QAE@XZ
.text:00002AEA                 mov     eax, large fs:0
.text:00002AF0                 push    eax
.text:00002AF1                 push    ecx
.text:00002AF2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002AF9                 mov     eax, dword ptr ds:___security_cookie
.text:00002AFE                 xor     eax, ebp
.text:00002B00                 push    eax
.text:00002B01                 lea     eax, [ebp+var_C]
.text:00002B04                 mov     large fs:0, eax
.text:00002B0A                 mov     [ebp+var_10], ecx
.text:00002B0D                 mov     ecx, [ebp+var_10] ; this
.text:00002B10                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:00002B15                 mov     [ebp+var_4], 0
.text:00002B1C                 mov     ecx, [ebp+var_10]
.text:00002B1F                 add     ecx, 0Ch        ; this
.text:00002B22                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00002B27                 mov     byte ptr [ebp+var_4], 1
.text:00002B2B                 mov     ecx, [ebp+var_10]
.text:00002B2E                 add     ecx, 18h        ; this
.text:00002B31                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00002B36                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002B3D                 mov     eax, [ebp+var_10]
.text:00002B40                 mov     ecx, [ebp+var_C]
.text:00002B43                 mov     large fs:0, ecx
.text:00002B4A                 pop     ecx
.text:00002B4B                 add     esp, 10h
.text:00002B4E                 cmp     ebp, esp
.text:00002B50                 call    __RTC_CheckEsp
.text:00002B55                 mov     esp, ebp
.text:00002B57                 pop     ebp
.text:00002B58                 retn
.text:00002B58 ??0COneMethodInfo@@QAE@XZ endp
.text:00002B58
.text:00002B58 ; ---------------------------------------------------------------------------
.text:00002B59                 align 4
.text:00002B59 _text           ends
.text:00002B59
.text$x:00002B5C ; ===========================================================================
.text$x:00002B5C
.text$x:00002B5C ; Segment type: Pure code
.text$x:00002B5C ; Segment permissions: Read/Execute
.text$x:00002B5C _text$x         segment para public 'CODE' use32
.text$x:00002B5C                 assume cs:_text$x
.text$x:00002B5C                 ;org 2B5Ch
.text$x:00002B5C ; COMDAT (pick associative to section at 2AE0)
.text$x:00002B5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002B5C
.text$x:00002B5C ; =============== S U B R O U T I N E =======================================
.text$x:00002B5C
.text$x:00002B5C
.text$x:00002B5C __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 proc near
.text$x:00002B5C                                         ; DATA XREF: .xdata$x:00002B90o
.text$x:00002B5C                 mov     ecx, [ebp-10h]  ; this
.text$x:00002B5F                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:00002B5F __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 endp
.text$x:00002B5F
.text$x:00002B64
.text$x:00002B64 ; =============== S U B R O U T I N E =======================================
.text$x:00002B64
.text$x:00002B64
.text$x:00002B64 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 proc near
.text$x:00002B64                                         ; DATA XREF: .xdata$x:00002B98o
.text$x:00002B64                 mov     ecx, [ebp-10h]
.text$x:00002B67                 add     ecx, 0Ch        ; this
.text$x:00002B6A                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002B6A __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 endp
.text$x:00002B6A
.text$x:00002B6F
.text$x:00002B6F ; =============== S U B R O U T I N E =======================================
.text$x:00002B6F
.text$x:00002B6F
.text$x:00002B6F __ehhandler$??0COneMethodInfo@@QAE@XZ proc near
.text$x:00002B6F                                         ; DATA XREF: COneMethodInfo::COneMethodInfo(void)+5o
.text$x:00002B6F
.text$x:00002B6F arg_4           = dword ptr  8
.text$x:00002B6F
.text$x:00002B6F                 mov     edx, [esp+arg_4]
.text$x:00002B73                 lea     eax, [edx+0Ch]
.text$x:00002B76                 mov     ecx, [edx-8]
.text$x:00002B79                 xor     ecx, eax
.text$x:00002B7B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002B80                 mov     eax, offset __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
.text$x:00002B85                 jmp     ___CxxFrameHandler3
.text$x:00002B85 __ehhandler$??0COneMethodInfo@@QAE@XZ endp
.text$x:00002B85
.text$x:00002B85 ; ---------------------------------------------------------------------------
.text$x:00002B8A                 align 4
.text$x:00002B8A _text$x         ends
.text$x:00002B8A
.xdata$x:00002B8C ; ===========================================================================
.xdata$x:00002B8C
.xdata$x:00002B8C ; Segment type: Pure data
.xdata$x:00002B8C ; Segment permissions: Read
.xdata$x:00002B8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002B8C                 assume cs:_xdata$x
.xdata$x:00002B8C                 ;org 2B8Ch
.xdata$x:00002B8C ; COMDAT (pick associative to section at 2AE0)
.xdata$x:00002B8C __unwindtable$??0COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:00002B8C                                         ; DATA XREF: .xdata$x:00002BA4o
.xdata$x:00002B8D                 db 0FFh
.xdata$x:00002B8E                 db 0FFh
.xdata$x:00002B8F                 db 0FFh
.xdata$x:00002B90                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
.xdata$x:00002B94                 align 8
.xdata$x:00002B98                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
.xdata$x:00002B9C __ehfuncinfo$??0COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:00002B9C                                         ; DATA XREF: __ehhandler$??0COneMethodInfo@@QAE@XZ+11o
.xdata$x:00002B9D                 db    5
.xdata$x:00002B9E                 db  93h ; ô
.xdata$x:00002B9F                 db  19h
.xdata$x:00002BA0                 db    2
.xdata$x:00002BA1                 db    0
.xdata$x:00002BA2                 db    0
.xdata$x:00002BA3                 db    0
.xdata$x:00002BA4                 dd offset __unwindtable$??0COneMethodInfo@@QAE@XZ
.xdata$x:00002BA8                 db    0
.xdata$x:00002BA9                 db    0
.xdata$x:00002BAA                 db    0
.xdata$x:00002BAB                 db    0
.xdata$x:00002BAC                 db    0
.xdata$x:00002BAD                 db    0
.xdata$x:00002BAE                 db    0
.xdata$x:00002BAF                 db    0
.xdata$x:00002BB0                 db    0
.xdata$x:00002BB1                 db    0
.xdata$x:00002BB2                 db    0
.xdata$x:00002BB3                 db    0
.xdata$x:00002BB4                 db    0
.xdata$x:00002BB5                 db    0
.xdata$x:00002BB6                 db    0
.xdata$x:00002BB7                 db    0
.xdata$x:00002BB8                 db    0
.xdata$x:00002BB9                 db    0
.xdata$x:00002BBA                 db    0
.xdata$x:00002BBB                 db    0
.xdata$x:00002BBC                 db    1
.xdata$x:00002BBD                 db    0
.xdata$x:00002BBE                 db    0
.xdata$x:00002BBF                 db    0
.xdata$x:00002BBF _xdata$x        ends
.xdata$x:00002BBF
.text:00002BC0 ; ===========================================================================
.text:00002BC0
.text:00002BC0 ; Segment type: Pure code
.text:00002BC0 ; Segment permissions: Read/Execute
.text:00002BC0 _text           segment para public 'CODE' use32
.text:00002BC0                 assume cs:_text
.text:00002BC0                 ;org 2BC0h
.text:00002BC0 ; COMDAT (pick any)
.text:00002BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BC0
.text:00002BC0 ; =============== S U B R O U T I N E =======================================
.text:00002BC0
.text:00002BC0 ; Attributes: bp-based frame
.text:00002BC0
.text:00002BC0 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00002BC0                 public ??1AString@@QAE@XZ
.text:00002BC0 ??1AString@@QAE@XZ proc near            ; CODE XREF: __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1+6j
.text:00002BC0                                         ; COneMethodInfo::~COneMethodInfo(void)+49p ...
.text:00002BC0
.text:00002BC0 var_8           = dword ptr -8
.text:00002BC0 var_4           = dword ptr -4
.text:00002BC0
.text:00002BC0                 push    ebp
.text:00002BC1                 mov     ebp, esp
.text:00002BC3                 sub     esp, 8
.text:00002BC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002BCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BD4                 mov     [ebp+var_4], ecx
.text:00002BD7                 mov     eax, [ebp+var_4]
.text:00002BDA                 mov     ecx, [eax]
.text:00002BDC                 mov     [ebp+var_8], ecx
.text:00002BDF                 mov     edx, [ebp+var_8]
.text:00002BE2                 push    edx             ; void *
.text:00002BE3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002BE8                 add     esp, 4
.text:00002BEB                 add     esp, 8
.text:00002BEE                 cmp     ebp, esp
.text:00002BF0                 call    __RTC_CheckEsp
.text:00002BF5                 mov     esp, ebp
.text:00002BF7                 pop     ebp
.text:00002BF8                 retn
.text:00002BF8 ??1AString@@QAE@XZ endp
.text:00002BF8
.text:00002BF8 ; ---------------------------------------------------------------------------
.text:00002BF9                 align 4
.text:00002BF9 _text           ends
.text:00002BF9
.text:00002BFC ; ===========================================================================
.text:00002BFC
.text:00002BFC ; Segment type: Pure code
.text:00002BFC ; Segment permissions: Read/Execute
.text:00002BFC _text           segment para public 'CODE' use32
.text:00002BFC                 assume cs:_text
.text:00002BFC                 ;org 2BFCh
.text:00002BFC ; COMDAT (pick any)
.text:00002BFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BFC
.text:00002BFC ; =============== S U B R O U T I N E =======================================
.text:00002BFC
.text:00002BFC ; Attributes: bp-based frame
.text:00002BFC
.text:00002BFC ; _DWORD __thiscall COneMethodInfo::~COneMethodInfo(COneMethodInfo *__hidden this)
.text:00002BFC                 public ??1COneMethodInfo@@QAE@XZ
.text:00002BFC ??1COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0CSingleMethodProps@NArchive@@QAE@XZ$0+3j
.text:00002BFC                                         ; NArchive::CSingleMethodProps::~CSingleMethodProps(void)+11p
.text:00002BFC
.text:00002BFC var_10          = dword ptr -10h
.text:00002BFC var_C           = dword ptr -0Ch
.text:00002BFC var_4           = dword ptr -4
.text:00002BFC
.text:00002BFC                 push    ebp
.text:00002BFD                 mov     ebp, esp
.text:00002BFF                 push    0FFFFFFFFh
.text:00002C01                 push    offset __ehhandler$??1COneMethodInfo@@QAE@XZ
.text:00002C06                 mov     eax, large fs:0
.text:00002C0C                 push    eax
.text:00002C0D                 push    ecx
.text:00002C0E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002C15                 mov     eax, dword ptr ds:___security_cookie
.text:00002C1A                 xor     eax, ebp
.text:00002C1C                 push    eax
.text:00002C1D                 lea     eax, [ebp+var_C]
.text:00002C20                 mov     large fs:0, eax
.text:00002C26                 mov     [ebp+var_10], ecx
.text:00002C29                 mov     [ebp+var_4], 1
.text:00002C30                 mov     ecx, [ebp+var_10]
.text:00002C33                 add     ecx, 18h        ; this
.text:00002C36                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002C3B                 mov     byte ptr [ebp+var_4], 0
.text:00002C3F                 mov     ecx, [ebp+var_10]
.text:00002C42                 add     ecx, 0Ch        ; this
.text:00002C45                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00002C4A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002C51                 mov     ecx, [ebp+var_10] ; this
.text:00002C54                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:00002C59                 mov     ecx, [ebp+var_C]
.text:00002C5C                 mov     large fs:0, ecx
.text:00002C63                 pop     ecx
.text:00002C64                 add     esp, 10h
.text:00002C67                 cmp     ebp, esp
.text:00002C69                 call    __RTC_CheckEsp
.text:00002C6E                 mov     esp, ebp
.text:00002C70                 pop     ebp
.text:00002C71                 retn
.text:00002C71 ??1COneMethodInfo@@QAE@XZ endp
.text:00002C71
.text:00002C71 ; ---------------------------------------------------------------------------
.text:00002C72                 align 4
.text:00002C72 _text           ends
.text:00002C72
.text$x:00002C74 ; ===========================================================================
.text$x:00002C74
.text$x:00002C74 ; Segment type: Pure code
.text$x:00002C74 ; Segment permissions: Read/Execute
.text$x:00002C74 _text$x         segment para public 'CODE' use32
.text$x:00002C74                 assume cs:_text$x
.text$x:00002C74                 ;org 2C74h
.text$x:00002C74 ; COMDAT (pick associative to section at 2BFC)
.text$x:00002C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002C74
.text$x:00002C74 ; =============== S U B R O U T I N E =======================================
.text$x:00002C74
.text$x:00002C74
.text$x:00002C74 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 proc near
.text$x:00002C74                                         ; DATA XREF: .xdata$x:00002CA8o
.text$x:00002C74                 mov     ecx, [ebp-10h]  ; this
.text$x:00002C77                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:00002C77 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 endp
.text$x:00002C77
.text$x:00002C7C
.text$x:00002C7C ; =============== S U B R O U T I N E =======================================
.text$x:00002C7C
.text$x:00002C7C
.text$x:00002C7C __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 proc near
.text$x:00002C7C                                         ; DATA XREF: .xdata$x:00002CB0o
.text$x:00002C7C                 mov     ecx, [ebp-10h]
.text$x:00002C7F                 add     ecx, 0Ch        ; this
.text$x:00002C82                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002C82 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 endp
.text$x:00002C82
.text$x:00002C87
.text$x:00002C87 ; =============== S U B R O U T I N E =======================================
.text$x:00002C87
.text$x:00002C87
.text$x:00002C87 __ehhandler$??1COneMethodInfo@@QAE@XZ proc near
.text$x:00002C87                                         ; DATA XREF: COneMethodInfo::~COneMethodInfo(void)+5o
.text$x:00002C87
.text$x:00002C87 arg_4           = dword ptr  8
.text$x:00002C87
.text$x:00002C87                 mov     edx, [esp+arg_4]
.text$x:00002C8B                 lea     eax, [edx+0Ch]
.text$x:00002C8E                 mov     ecx, [edx-8]
.text$x:00002C91                 xor     ecx, eax
.text$x:00002C93                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002C98                 mov     eax, offset __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
.text$x:00002C9D                 jmp     ___CxxFrameHandler3
.text$x:00002C9D __ehhandler$??1COneMethodInfo@@QAE@XZ endp
.text$x:00002C9D
.text$x:00002C9D ; ---------------------------------------------------------------------------
.text$x:00002CA2                 align 4
.text$x:00002CA2 _text$x         ends
.text$x:00002CA2
.xdata$x:00002CA4 ; ===========================================================================
.xdata$x:00002CA4
.xdata$x:00002CA4 ; Segment type: Pure data
.xdata$x:00002CA4 ; Segment permissions: Read
.xdata$x:00002CA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002CA4                 assume cs:_xdata$x
.xdata$x:00002CA4                 ;org 2CA4h
.xdata$x:00002CA4 ; COMDAT (pick associative to section at 2BFC)
.xdata$x:00002CA4 __unwindtable$??1COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:00002CA4                                         ; DATA XREF: .xdata$x:00002CBCo
.xdata$x:00002CA5                 db 0FFh
.xdata$x:00002CA6                 db 0FFh
.xdata$x:00002CA7                 db 0FFh
.xdata$x:00002CA8                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
.xdata$x:00002CAC                 align 10h
.xdata$x:00002CB0                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
.xdata$x:00002CB4 __ehfuncinfo$??1COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:00002CB4                                         ; DATA XREF: __ehhandler$??1COneMethodInfo@@QAE@XZ+11o
.xdata$x:00002CB5                 db    5
.xdata$x:00002CB6                 db  93h ; ô
.xdata$x:00002CB7                 db  19h
.xdata$x:00002CB8                 db    2
.xdata$x:00002CB9                 db    0
.xdata$x:00002CBA                 db    0
.xdata$x:00002CBB                 db    0
.xdata$x:00002CBC                 dd offset __unwindtable$??1COneMethodInfo@@QAE@XZ
.xdata$x:00002CC0                 db    0
.xdata$x:00002CC1                 db    0
.xdata$x:00002CC2                 db    0
.xdata$x:00002CC3                 db    0
.xdata$x:00002CC4                 db    0
.xdata$x:00002CC5                 db    0
.xdata$x:00002CC6                 db    0
.xdata$x:00002CC7                 db    0
.xdata$x:00002CC8                 db    0
.xdata$x:00002CC9                 db    0
.xdata$x:00002CCA                 db    0
.xdata$x:00002CCB                 db    0
.xdata$x:00002CCC                 db    0
.xdata$x:00002CCD                 db    0
.xdata$x:00002CCE                 db    0
.xdata$x:00002CCF                 db    0
.xdata$x:00002CD0                 db    0
.xdata$x:00002CD1                 db    0
.xdata$x:00002CD2                 db    0
.xdata$x:00002CD3                 db    0
.xdata$x:00002CD4                 db    1
.xdata$x:00002CD5                 db    0
.xdata$x:00002CD6                 db    0
.xdata$x:00002CD7                 db    0
.xdata$x:00002CD7 _xdata$x        ends
.xdata$x:00002CD7
.text:00002CD8 ; ===========================================================================
.text:00002CD8
.text:00002CD8 ; Segment type: Pure code
.text:00002CD8 ; Segment permissions: Read/Execute
.text:00002CD8 _text           segment para public 'CODE' use32
.text:00002CD8                 assume cs:_text
.text:00002CD8                 ;org 2CD8h
.text:00002CD8 ; COMDAT (pick any)
.text:00002CD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002CD8
.text:00002CD8 ; =============== S U B R O U T I N E =======================================
.text:00002CD8
.text:00002CD8 ; Attributes: bp-based frame
.text:00002CD8
.text:00002CD8 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00002CD8                 public ??1UString@@QAE@XZ
.text:00002CD8 ??1UString@@QAE@XZ proc near            ; CODE XREF: COneMethodInfo::~COneMethodInfo(void)+3Ap
.text:00002CD8
.text:00002CD8 var_8           = dword ptr -8
.text:00002CD8 var_4           = dword ptr -4
.text:00002CD8
.text:00002CD8                 push    ebp
.text:00002CD9                 mov     ebp, esp
.text:00002CDB                 sub     esp, 8
.text:00002CDE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002CE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CEC                 mov     [ebp+var_4], ecx
.text:00002CEF                 mov     eax, [ebp+var_4]
.text:00002CF2                 mov     ecx, [eax]
.text:00002CF4                 mov     [ebp+var_8], ecx
.text:00002CF7                 mov     edx, [ebp+var_8]
.text:00002CFA                 push    edx             ; void *
.text:00002CFB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002D00                 add     esp, 4
.text:00002D03                 add     esp, 8
.text:00002D06                 cmp     ebp, esp
.text:00002D08                 call    __RTC_CheckEsp
.text:00002D0D                 mov     esp, ebp
.text:00002D0F                 pop     ebp
.text:00002D10                 retn
.text:00002D10 ??1UString@@QAE@XZ endp
.text:00002D10
.text:00002D10 ; ---------------------------------------------------------------------------
.text:00002D11                 align 4
.text:00002D11 _text           ends
.text:00002D11
.text:00002D14 ; ===========================================================================
.text:00002D14
.text:00002D14 ; Segment type: Pure code
.text:00002D14 ; Segment permissions: Read/Execute
.text:00002D14 _text           segment para public 'CODE' use32
.text:00002D14                 assume cs:_text
.text:00002D14                 ;org 2D14h
.text:00002D14 ; COMDAT (pick any)
.text:00002D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D14
.text:00002D14 ; =============== S U B R O U T I N E =======================================
.text:00002D14
.text:00002D14 ; Attributes: bp-based frame
.text:00002D14
.text:00002D14 ; _DWORD __thiscall CMethodProps::CMethodProps(CMethodProps *__hidden this)
.text:00002D14                 public ??0CMethodProps@@QAE@XZ
.text:00002D14 ??0CMethodProps@@QAE@XZ proc near       ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+30p
.text:00002D14
.text:00002D14 var_4           = dword ptr -4
.text:00002D14
.text:00002D14                 push    ebp
.text:00002D15                 mov     ebp, esp
.text:00002D17                 push    ecx
.text:00002D18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D1F                 mov     [ebp+var_4], ecx
.text:00002D22                 mov     ecx, [ebp+var_4]
.text:00002D25                 call    ??0CProps@@QAE@XZ ; CProps::CProps(void)
.text:00002D2A                 mov     eax, [ebp+var_4]
.text:00002D2D                 add     esp, 4
.text:00002D30                 cmp     ebp, esp
.text:00002D32                 call    __RTC_CheckEsp
.text:00002D37                 mov     esp, ebp
.text:00002D39                 pop     ebp
.text:00002D3A                 retn
.text:00002D3A ??0CMethodProps@@QAE@XZ endp
.text:00002D3A
.text:00002D3A ; ---------------------------------------------------------------------------
.text:00002D3B                 align 4
.text:00002D3B _text           ends
.text:00002D3B
.text:00002D3C ; ===========================================================================
.text:00002D3C
.text:00002D3C ; Segment type: Pure code
.text:00002D3C ; Segment permissions: Read/Execute
.text:00002D3C _text           segment para public 'CODE' use32
.text:00002D3C                 assume cs:_text
.text:00002D3C                 ;org 2D3Ch
.text:00002D3C ; COMDAT (pick any)
.text:00002D3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D3C
.text:00002D3C ; =============== S U B R O U T I N E =======================================
.text:00002D3C
.text:00002D3C ; Attributes: bp-based frame
.text:00002D3C
.text:00002D3C ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:00002D3C                 public ??1CMethodProps@@QAE@XZ
.text:00002D3C ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0+3j
.text:00002D3C                                         ; COneMethodInfo::~COneMethodInfo(void)+58p ...
.text:00002D3C
.text:00002D3C var_4           = dword ptr -4
.text:00002D3C
.text:00002D3C                 push    ebp
.text:00002D3D                 mov     ebp, esp
.text:00002D3F                 push    ecx
.text:00002D40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D47                 mov     [ebp+var_4], ecx
.text:00002D4A                 mov     ecx, [ebp+var_4] ; this
.text:00002D4D                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:00002D52                 add     esp, 4
.text:00002D55                 cmp     ebp, esp
.text:00002D57                 call    __RTC_CheckEsp
.text:00002D5C                 mov     esp, ebp
.text:00002D5E                 pop     ebp
.text:00002D5F                 retn
.text:00002D5F ??1CMethodProps@@QAE@XZ endp
.text:00002D5F
.text:00002D5F _text           ends
.text:00002D5F
.text:00002D60 ; ===========================================================================
.text:00002D60
.text:00002D60 ; Segment type: Pure code
.text:00002D60 ; Segment permissions: Read/Execute
.text:00002D60 _text           segment para public 'CODE' use32
.text:00002D60                 assume cs:_text
.text:00002D60                 ;org 2D60h
.text:00002D60 ; COMDAT (pick any)
.text:00002D60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D60
.text:00002D60 ; =============== S U B R O U T I N E =======================================
.text:00002D60
.text:00002D60 ; Attributes: bp-based frame
.text:00002D60
.text:00002D60 ; public: __thiscall CProps::CProps(void)
.text:00002D60                 public ??0CProps@@QAE@XZ
.text:00002D60 ??0CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::CMethodProps(void)+11p
.text:00002D60
.text:00002D60 var_4           = dword ptr -4
.text:00002D60
.text:00002D60                 push    ebp
.text:00002D61                 mov     ebp, esp
.text:00002D63                 push    ecx
.text:00002D64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D6B                 mov     [ebp+var_4], ecx
.text:00002D6E                 mov     ecx, [ebp+var_4]
.text:00002D71                 call    ??0?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::CObjectVector<CProp>(void)
.text:00002D76                 mov     eax, [ebp+var_4]
.text:00002D79                 add     esp, 4
.text:00002D7C                 cmp     ebp, esp
.text:00002D7E                 call    __RTC_CheckEsp
.text:00002D83                 mov     esp, ebp
.text:00002D85                 pop     ebp
.text:00002D86                 retn
.text:00002D86 ??0CProps@@QAE@XZ endp
.text:00002D86
.text:00002D86 ; ---------------------------------------------------------------------------
.text:00002D87                 align 4
.text:00002D87 _text           ends
.text:00002D87
.text:00002D88 ; ===========================================================================
.text:00002D88
.text:00002D88 ; Segment type: Pure code
.text:00002D88 ; Segment permissions: Read/Execute
.text:00002D88 _text           segment para public 'CODE' use32
.text:00002D88                 assume cs:_text
.text:00002D88                 ;org 2D88h
.text:00002D88 ; COMDAT (pick any)
.text:00002D88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D88
.text:00002D88 ; =============== S U B R O U T I N E =======================================
.text:00002D88
.text:00002D88 ; Attributes: bp-based frame
.text:00002D88
.text:00002D88 ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00002D88                 public ??1CProps@@QAE@XZ
.text:00002D88 ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00002D88
.text:00002D88 var_4           = dword ptr -4
.text:00002D88
.text:00002D88                 push    ebp
.text:00002D89                 mov     ebp, esp
.text:00002D8B                 push    ecx
.text:00002D8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D93                 mov     [ebp+var_4], ecx
.text:00002D96                 mov     ecx, [ebp+var_4]
.text:00002D99                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:00002D9E                 add     esp, 4
.text:00002DA1                 cmp     ebp, esp
.text:00002DA3                 call    __RTC_CheckEsp
.text:00002DA8                 mov     esp, ebp
.text:00002DAA                 pop     ebp
.text:00002DAB                 retn
.text:00002DAB ??1CProps@@QAE@XZ endp
.text:00002DAB
.text:00002DAB _text           ends
.text:00002DAB
.text:00002DAC ; ===========================================================================
.text:00002DAC
.text:00002DAC ; Segment type: Pure code
.text:00002DAC ; Segment permissions: Read/Execute
.text:00002DAC _text           segment para public 'CODE' use32
.text:00002DAC                 assume cs:_text
.text:00002DAC                 ;org 2DACh
.text:00002DAC ; COMDAT (pick any)
.text:00002DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002DAC
.text:00002DAC ; =============== S U B R O U T I N E =======================================
.text:00002DAC
.text:00002DAC ; Attributes: bp-based frame
.text:00002DAC
.text:00002DAC ; __int32 __stdcall NArchive::NBz2::CHandler::QueryInterface(NArchive::NBz2::CHandler *this, const struct _GUID *Buf1, void **)
.text:00002DAC                 public ?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00002DAC ?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00002DAC                                         ; CODE XREF: [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:00002DAC                                         ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{12}' (_GUID const &,void * *)+5j ...
.text:00002DAC
.text:00002DAC var_C           = dword ptr -0Ch
.text:00002DAC var_8           = dword ptr -8
.text:00002DAC var_4           = dword ptr -4
.text:00002DAC this            = dword ptr  8
.text:00002DAC Buf1            = dword ptr  0Ch
.text:00002DAC arg_8           = dword ptr  10h
.text:00002DAC
.text:00002DAC                 push    ebp
.text:00002DAD                 mov     ebp, esp
.text:00002DAF                 sub     esp, 0Ch
.text:00002DB2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002DB9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002DC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DC7                 mov     eax, [ebp+arg_8]
.text:00002DCA                 mov     dword ptr [eax], 0
.text:00002DD0                 push    offset _IID_IUnknown ; Buf2
.text:00002DD5                 mov     ecx, [ebp+Buf1]
.text:00002DD8                 push    ecx             ; Buf1
.text:00002DD9                 call    ___@8           ; __(x,x)
.text:00002DDE                 test    eax, eax
.text:00002DE0                 jz      short loc_2DEF
.text:00002DE2                 mov     edx, [ebp+arg_8]
.text:00002DE5                 mov     eax, [ebp+this]
.text:00002DE8                 mov     [edx], eax
.text:00002DEA                 jmp     loc_2EB1
.text:00002DEF ; ---------------------------------------------------------------------------
.text:00002DEF
.text:00002DEF loc_2DEF:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+34j
.text:00002DEF                 push    offset _IID_IInArchive ; Buf2
.text:00002DF4                 mov     ecx, [ebp+Buf1]
.text:00002DF7                 push    ecx             ; Buf1
.text:00002DF8                 call    ___@8           ; __(x,x)
.text:00002DFD                 test    eax, eax
.text:00002DFF                 jz      short loc_2E0E
.text:00002E01                 mov     edx, [ebp+arg_8]
.text:00002E04                 mov     eax, [ebp+this]
.text:00002E07                 mov     [edx], eax
.text:00002E09                 jmp     loc_2EB1
.text:00002E0E ; ---------------------------------------------------------------------------
.text:00002E0E
.text:00002E0E loc_2E0E:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+53j
.text:00002E0E                 push    offset _IID_IArchiveOpenSeq ; Buf2
.text:00002E13                 mov     ecx, [ebp+Buf1]
.text:00002E16                 push    ecx             ; Buf1
.text:00002E17                 call    ___@8           ; __(x,x)
.text:00002E1C                 test    eax, eax
.text:00002E1E                 jz      short loc_2E42
.text:00002E20                 cmp     [ebp+this], 0
.text:00002E24                 jz      short loc_2E31
.text:00002E26                 mov     edx, [ebp+this]
.text:00002E29                 add     edx, 4
.text:00002E2C                 mov     [ebp+var_4], edx
.text:00002E2F                 jmp     short loc_2E38
.text:00002E31 ; ---------------------------------------------------------------------------
.text:00002E31
.text:00002E31 loc_2E31:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+78j
.text:00002E31                 mov     [ebp+var_4], 0
.text:00002E38
.text:00002E38 loc_2E38:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+83j
.text:00002E38                 mov     eax, [ebp+arg_8]
.text:00002E3B                 mov     ecx, [ebp+var_4]
.text:00002E3E                 mov     [eax], ecx
.text:00002E40                 jmp     short loc_2EB1
.text:00002E42 ; ---------------------------------------------------------------------------
.text:00002E42
.text:00002E42 loc_2E42:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+72j
.text:00002E42                 push    offset _IID_IOutArchive ; Buf2
.text:00002E47                 mov     edx, [ebp+Buf1]
.text:00002E4A                 push    edx             ; Buf1
.text:00002E4B                 call    ___@8           ; __(x,x)
.text:00002E50                 test    eax, eax
.text:00002E52                 jz      short loc_2E76
.text:00002E54                 cmp     [ebp+this], 0
.text:00002E58                 jz      short loc_2E65
.text:00002E5A                 mov     eax, [ebp+this]
.text:00002E5D                 add     eax, 8
.text:00002E60                 mov     [ebp+var_8], eax
.text:00002E63                 jmp     short loc_2E6C
.text:00002E65 ; ---------------------------------------------------------------------------
.text:00002E65
.text:00002E65 loc_2E65:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+ACj
.text:00002E65                 mov     [ebp+var_8], 0
.text:00002E6C
.text:00002E6C loc_2E6C:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+B7j
.text:00002E6C                 mov     ecx, [ebp+arg_8]
.text:00002E6F                 mov     edx, [ebp+var_8]
.text:00002E72                 mov     [ecx], edx
.text:00002E74                 jmp     short loc_2EB1
.text:00002E76 ; ---------------------------------------------------------------------------
.text:00002E76
.text:00002E76 loc_2E76:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+A6j
.text:00002E76                 push    offset _IID_ISetProperties ; Buf2
.text:00002E7B                 mov     eax, [ebp+Buf1]
.text:00002E7E                 push    eax             ; Buf1
.text:00002E7F                 call    ___@8           ; __(x,x)
.text:00002E84                 test    eax, eax
.text:00002E86                 jz      short loc_2EAA
.text:00002E88                 cmp     [ebp+this], 0
.text:00002E8C                 jz      short loc_2E99
.text:00002E8E                 mov     ecx, [ebp+this]
.text:00002E91                 add     ecx, 0Ch
.text:00002E94                 mov     [ebp+var_C], ecx
.text:00002E97                 jmp     short loc_2EA0
.text:00002E99 ; ---------------------------------------------------------------------------
.text:00002E99
.text:00002E99 loc_2E99:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+E0j
.text:00002E99                 mov     [ebp+var_C], 0
.text:00002EA0
.text:00002EA0 loc_2EA0:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+EBj
.text:00002EA0                 mov     edx, [ebp+arg_8]
.text:00002EA3                 mov     eax, [ebp+var_C]
.text:00002EA6                 mov     [edx], eax
.text:00002EA8                 jmp     short loc_2EB1
.text:00002EAA ; ---------------------------------------------------------------------------
.text:00002EAA
.text:00002EAA loc_2EAA:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+DAj
.text:00002EAA                 mov     eax, 80004002h
.text:00002EAF                 jmp     short loc_2EC2
.text:00002EB1 ; ---------------------------------------------------------------------------
.text:00002EB1
.text:00002EB1 loc_2EB1:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+3Ej
.text:00002EB1                                         ; NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:00002EB1                 mov     ecx, [ebp+this]
.text:00002EB4                 mov     edx, [ecx+10h]
.text:00002EB7                 add     edx, 1
.text:00002EBA                 mov     eax, [ebp+this]
.text:00002EBD                 mov     [eax+10h], edx
.text:00002EC0                 xor     eax, eax
.text:00002EC2
.text:00002EC2 loc_2EC2:                               ; CODE XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+103j
.text:00002EC2                 add     esp, 0Ch
.text:00002EC5                 cmp     ebp, esp
.text:00002EC7                 call    __RTC_CheckEsp
.text:00002ECC                 mov     esp, ebp
.text:00002ECE                 pop     ebp
.text:00002ECF                 retn    0Ch
.text:00002ECF ?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002ECF
.text:00002ECF ; ---------------------------------------------------------------------------
.text:00002ED2                 align 4
.text:00002ED2 _text           ends
.text:00002ED2
.text:00002ED4 ; ===========================================================================
.text:00002ED4
.text:00002ED4 ; Segment type: Pure code
.text:00002ED4 ; Segment permissions: Read/Execute
.text:00002ED4 _text           segment para public 'CODE' use32
.text:00002ED4                 assume cs:_text
.text:00002ED4                 ;org 2ED4h
.text:00002ED4 ; COMDAT (pick any)
.text:00002ED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002ED4
.text:00002ED4 ; =============== S U B R O U T I N E =======================================
.text:00002ED4
.text:00002ED4 ; Attributes: bp-based frame
.text:00002ED4
.text:00002ED4 ; unsigned __int32 __stdcall NArchive::NBz2::CHandler::AddRef(NArchive::NBz2::CHandler *this)
.text:00002ED4                 public ?AddRef@CHandler@NBz2@NArchive@@UAGKXZ
.text:00002ED4 ?AddRef@CHandler@NBz2@NArchive@@UAGKXZ proc near
.text:00002ED4                                         ; CODE XREF: [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{12}' (void)+5j
.text:00002ED4                                         ; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{4}' (void)+5j ...
.text:00002ED4
.text:00002ED4 var_4           = dword ptr -4
.text:00002ED4 this            = dword ptr  8
.text:00002ED4
.text:00002ED4                 push    ebp
.text:00002ED5                 mov     ebp, esp
.text:00002ED7                 push    ecx
.text:00002ED8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EDF                 mov     eax, [ebp+this]
.text:00002EE2                 mov     ecx, [eax+10h]
.text:00002EE5                 add     ecx, 1
.text:00002EE8                 mov     [ebp+var_4], ecx
.text:00002EEB                 mov     edx, [ebp+this]
.text:00002EEE                 mov     eax, [ebp+var_4]
.text:00002EF1                 mov     [edx+10h], eax
.text:00002EF4                 mov     eax, [ebp+var_4]
.text:00002EF7                 mov     esp, ebp
.text:00002EF9                 pop     ebp
.text:00002EFA                 retn    4
.text:00002EFA ?AddRef@CHandler@NBz2@NArchive@@UAGKXZ endp
.text:00002EFA
.text:00002EFA ; ---------------------------------------------------------------------------
.text:00002EFD                 align 10h
.text:00002EFD _text           ends
.text:00002EFD
.text:00002F00 ; ===========================================================================
.text:00002F00
.text:00002F00 ; Segment type: Pure code
.text:00002F00 ; Segment permissions: Read/Execute
.text:00002F00 _text           segment para public 'CODE' use32
.text:00002F00                 assume cs:_text
.text:00002F00                 ;org 2F00h
.text:00002F00 ; COMDAT (pick any)
.text:00002F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F00
.text:00002F00 ; =============== S U B R O U T I N E =======================================
.text:00002F00
.text:00002F00 ; Attributes: bp-based frame
.text:00002F00
.text:00002F00 ; unsigned __int32 __stdcall NArchive::NBz2::CHandler::Release(NArchive::NBz2::CHandler *this)
.text:00002F00                 public ?Release@CHandler@NBz2@NArchive@@UAGKXZ
.text:00002F00 ?Release@CHandler@NBz2@NArchive@@UAGKXZ proc near
.text:00002F00                                         ; CODE XREF: [thunk]:NArchive::NBz2::CHandler::Release`adjustor{4}' (void)+5j
.text:00002F00                                         ; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{8}' (void)+5j ...
.text:00002F00
.text:00002F00 var_10          = dword ptr -10h
.text:00002F00 var_C           = dword ptr -0Ch
.text:00002F00 var_8           = dword ptr -8
.text:00002F00 var_4           = dword ptr -4
.text:00002F00 this            = dword ptr  8
.text:00002F00
.text:00002F00                 push    ebp
.text:00002F01                 mov     ebp, esp
.text:00002F03                 sub     esp, 10h
.text:00002F06                 mov     eax, 0CCCCCCCCh
.text:00002F0B                 mov     [ebp+var_10], eax
.text:00002F0E                 mov     [ebp+var_C], eax
.text:00002F11                 mov     [ebp+var_8], eax
.text:00002F14                 mov     [ebp+var_4], eax
.text:00002F17                 mov     eax, [ebp+this]
.text:00002F1A                 mov     ecx, [eax+10h]
.text:00002F1D                 sub     ecx, 1
.text:00002F20                 mov     [ebp+var_C], ecx
.text:00002F23                 mov     edx, [ebp+this]
.text:00002F26                 mov     eax, [ebp+var_C]
.text:00002F29                 mov     [edx+10h], eax
.text:00002F2C                 cmp     [ebp+var_C], 0
.text:00002F30                 jz      short loc_2F3A
.text:00002F32                 mov     ecx, [ebp+this]
.text:00002F35                 mov     eax, [ecx+10h]
.text:00002F38                 jmp     short loc_2F64
.text:00002F3A ; ---------------------------------------------------------------------------
.text:00002F3A
.text:00002F3A loc_2F3A:                               ; CODE XREF: NArchive::NBz2::CHandler::Release(void)+30j
.text:00002F3A                 mov     edx, [ebp+this]
.text:00002F3D                 mov     [ebp+var_8], edx
.text:00002F40                 mov     eax, [ebp+var_8]
.text:00002F43                 mov     [ebp+var_4], eax
.text:00002F46                 cmp     [ebp+var_4], 0
.text:00002F4A                 jz      short loc_2F5B
.text:00002F4C                 push    1
.text:00002F4E                 mov     ecx, [ebp+var_4]
.text:00002F51                 call    ??_GCHandler@NBz2@NArchive@@QAEPAXI@Z ; NArchive::NBz2::CHandler::`scalar deleting destructor'(uint)
.text:00002F56                 mov     [ebp+var_10], eax
.text:00002F59                 jmp     short loc_2F62
.text:00002F5B ; ---------------------------------------------------------------------------
.text:00002F5B
.text:00002F5B loc_2F5B:                               ; CODE XREF: NArchive::NBz2::CHandler::Release(void)+4Aj
.text:00002F5B                 mov     [ebp+var_10], 0
.text:00002F62
.text:00002F62 loc_2F62:                               ; CODE XREF: NArchive::NBz2::CHandler::Release(void)+59j
.text:00002F62                 xor     eax, eax
.text:00002F64
.text:00002F64 loc_2F64:                               ; CODE XREF: NArchive::NBz2::CHandler::Release(void)+38j
.text:00002F64                 add     esp, 10h
.text:00002F67                 cmp     ebp, esp
.text:00002F69                 call    __RTC_CheckEsp
.text:00002F6E                 mov     esp, ebp
.text:00002F70                 pop     ebp
.text:00002F71                 retn    4
.text:00002F71 ?Release@CHandler@NBz2@NArchive@@UAGKXZ endp
.text:00002F71
.text:00002F71 _text           ends
.text:00002F71
.text:00002F74 ; ===========================================================================
.text:00002F74
.text:00002F74 ; Segment type: Pure code
.text:00002F74 ; Segment permissions: Read/Execute
.text:00002F74 _text           segment para public 'CODE' use32
.text:00002F74                 assume cs:_text
.text:00002F74                 ;org 2F74h
.text:00002F74 ; COMDAT (pick any)
.text:00002F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F74
.text:00002F74 ; =============== S U B R O U T I N E =======================================
.text:00002F74
.text:00002F74 ; Attributes: bp-based frame
.text:00002F74
.text:00002F74 ; public: void * __thiscall NArchive::NBz2::CHandler::`scalar deleting destructor'(unsigned int)
.text:00002F74                 public ??_GCHandler@NBz2@NArchive@@QAEPAXI@Z
.text:00002F74 ??_GCHandler@NBz2@NArchive@@QAEPAXI@Z proc near
.text:00002F74                                         ; CODE XREF: NArchive::NBz2::CHandler::Release(void)+51p
.text:00002F74
.text:00002F74 var_4           = dword ptr -4
.text:00002F74 arg_0           = dword ptr  8
.text:00002F74
.text:00002F74                 push    ebp
.text:00002F75                 mov     ebp, esp
.text:00002F77                 push    ecx
.text:00002F78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F7F                 mov     [ebp+var_4], ecx
.text:00002F82                 mov     ecx, [ebp+var_4] ; this
.text:00002F85                 call    ??1CHandler@NBz2@NArchive@@QAE@XZ ; NArchive::NBz2::CHandler::~CHandler(void)
.text:00002F8A                 mov     eax, [ebp+arg_0]
.text:00002F8D                 and     eax, 1
.text:00002F90                 jz      short loc_2F9E
.text:00002F92                 mov     ecx, [ebp+var_4]
.text:00002F95                 push    ecx             ; void *
.text:00002F96                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002F9B                 add     esp, 4
.text:00002F9E
.text:00002F9E loc_2F9E:                               ; CODE XREF: NArchive::NBz2::CHandler::`scalar deleting destructor'(uint)+1Cj
.text:00002F9E                 mov     eax, [ebp+var_4]
.text:00002FA1                 add     esp, 4
.text:00002FA4                 cmp     ebp, esp
.text:00002FA6                 call    __RTC_CheckEsp
.text:00002FAB                 mov     esp, ebp
.text:00002FAD                 pop     ebp
.text:00002FAE                 retn    4
.text:00002FAE ??_GCHandler@NBz2@NArchive@@QAEPAXI@Z endp
.text:00002FAE
.text:00002FAE ; ---------------------------------------------------------------------------
.text:00002FB1                 align 4
.text:00002FB1 _text           ends
.text:00002FB1
.text:00002FB4 ; ===========================================================================
.text:00002FB4
.text:00002FB4 ; Segment type: Pure code
.text:00002FB4 ; Segment permissions: Read/Execute
.text:00002FB4 _text           segment para public 'CODE' use32
.text:00002FB4                 assume cs:_text
.text:00002FB4                 ;org 2FB4h
.text:00002FB4 ; COMDAT (pick any)
.text:00002FB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002FB4
.text:00002FB4 ; =============== S U B R O U T I N E =======================================
.text:00002FB4
.text:00002FB4 ; Attributes: bp-based frame
.text:00002FB4
.text:00002FB4 ; _DWORD __thiscall IInArchive::IInArchive(IInArchive *__hidden this)
.text:00002FB4                 public ??0IInArchive@@QAE@XZ
.text:00002FB4 ??0IInArchive@@QAE@XZ proc near         ; CODE XREF: NArchive::NBz2::CHandler::CHandler(void)+30p
.text:00002FB4
.text:00002FB4 var_4           = dword ptr -4
.text:00002FB4
.text:00002FB4                 push    ebp
.text:00002FB5                 mov     ebp, esp
.text:00002FB7                 push    ecx
.text:00002FB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FBF                 mov     [ebp+var_4], ecx
.text:00002FC2                 mov     ecx, [ebp+var_4]
.text:00002FC5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002FCA                 mov     eax, [ebp+var_4]
.text:00002FCD                 mov     dword ptr [eax], offset ??_7IInArchive@@6B@ ; const IInArchive::`vftable'
.text:00002FD3                 mov     eax, [ebp+var_4]
.text:00002FD6                 add     esp, 4
.text:00002FD9                 cmp     ebp, esp
.text:00002FDB                 call    __RTC_CheckEsp
.text:00002FE0                 mov     esp, ebp
.text:00002FE2                 pop     ebp
.text:00002FE3                 retn
.text:00002FE3 ??0IInArchive@@QAE@XZ endp
.text:00002FE3
.text:00002FE3 _text           ends
.text:00002FE3
.rdata:00002FE4 ; ===========================================================================
.rdata:00002FE4
.rdata:00002FE4 ; Segment type: Pure data
.rdata:00002FE4 ; Segment permissions: Read
.rdata:00002FE4 _rdata          segment dword public 'DATA' use32
.rdata:00002FE4                 assume cs:_rdata
.rdata:00002FE4                 ;org 2FE4h
.rdata:00002FE4 ; COMDAT (pick largest)
.rdata:00002FE4                 dd offset ??_R4IInArchive@@6B@ ; const IInArchive::`RTTI Complete Object Locator'
.rdata:00002FE8                 public ??_7IInArchive@@6B@
.rdata:00002FE8 ; const IInArchive::`vftable'
.rdata:00002FE8 ??_7IInArchive@@6B@ dd offset __purecall
.rdata:00002FE8                                         ; DATA XREF: IInArchive::IInArchive(void)+19o
.rdata:00002FEC                 dd offset __purecall
.rdata:00002FF0                 dd offset __purecall
.rdata:00002FF4                 dd offset __purecall
.rdata:00002FF8                 dd offset __purecall
.rdata:00002FFC                 dd offset __purecall
.rdata:00003000                 dd offset __purecall
.rdata:00003004                 dd offset __purecall
.rdata:00003008                 dd offset __purecall
.rdata:0000300C                 dd offset __purecall
.rdata:00003010                 dd offset __purecall
.rdata:00003014                 dd offset __purecall
.rdata:00003018                 dd offset __purecall
.rdata:00003018 _rdata          ends
.rdata:00003018
.rdata$r:0000301C ; ===========================================================================
.rdata$r:0000301C
.rdata$r:0000301C ; Segment type: Pure data
.rdata$r:0000301C ; Segment permissions: Read
.rdata$r:0000301C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000301C                 assume cs:_rdata$r
.rdata$r:0000301C                 ;org 301Ch
.rdata$r:0000301C ; COMDAT (pick any)
.rdata$r:0000301C                 public ??_R4IInArchive@@6B@
.rdata$r:0000301C ; const IInArchive::`RTTI Complete Object Locator'
.rdata$r:0000301C ??_R4IInArchive@@6B@ db    0            ; DATA XREF: .rdata:00002FE4o
.rdata$r:0000301D                 db    0
.rdata$r:0000301E                 db    0
.rdata$r:0000301F                 db    0
.rdata$r:00003020                 db    0
.rdata$r:00003021                 db    0
.rdata$r:00003022                 db    0
.rdata$r:00003023                 db    0
.rdata$r:00003024                 db    0
.rdata$r:00003025                 db    0
.rdata$r:00003026                 db    0
.rdata$r:00003027                 db    0
.rdata$r:00003028                 dd offset ??_R0?AUIInArchive@@@8 ; IInArchive `RTTI Type Descriptor'
.rdata$r:0000302C                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000302C _rdata$r        ends
.rdata$r:0000302C
.text:00003030 ; ===========================================================================
.text:00003030
.text:00003030 ; Segment type: Pure code
.text:00003030 ; Segment permissions: Read/Execute
.text:00003030 _text           segment para public 'CODE' use32
.text:00003030                 assume cs:_text
.text:00003030                 ;org 3030h
.text:00003030 ; COMDAT (pick any)
.text:00003030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003030
.text:00003030 ; =============== S U B R O U T I N E =======================================
.text:00003030
.text:00003030 ; Attributes: bp-based frame
.text:00003030
.text:00003030 ; _DWORD __thiscall IArchiveOpenSeq::IArchiveOpenSeq(IArchiveOpenSeq *__hidden this)
.text:00003030                 public ??0IArchiveOpenSeq@@QAE@XZ
.text:00003030 ??0IArchiveOpenSeq@@QAE@XZ proc near    ; CODE XREF: NArchive::NBz2::CHandler::CHandler(void)+3Bp
.text:00003030
.text:00003030 var_4           = dword ptr -4
.text:00003030
.text:00003030                 push    ebp
.text:00003031                 mov     ebp, esp
.text:00003033                 push    ecx
.text:00003034                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000303B                 mov     [ebp+var_4], ecx
.text:0000303E                 mov     ecx, [ebp+var_4]
.text:00003041                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003046                 mov     eax, [ebp+var_4]
.text:00003049                 mov     dword ptr [eax], offset ??_7IArchiveOpenSeq@@6B@ ; const IArchiveOpenSeq::`vftable'
.text:0000304F                 mov     eax, [ebp+var_4]
.text:00003052                 add     esp, 4
.text:00003055                 cmp     ebp, esp
.text:00003057                 call    __RTC_CheckEsp
.text:0000305C                 mov     esp, ebp
.text:0000305E                 pop     ebp
.text:0000305F                 retn
.text:0000305F ??0IArchiveOpenSeq@@QAE@XZ endp
.text:0000305F
.text:0000305F _text           ends
.text:0000305F
.rdata:00003060 ; ===========================================================================
.rdata:00003060
.rdata:00003060 ; Segment type: Pure data
.rdata:00003060 ; Segment permissions: Read
.rdata:00003060 _rdata          segment dword public 'DATA' use32
.rdata:00003060                 assume cs:_rdata
.rdata:00003060                 ;org 3060h
.rdata:00003060 ; COMDAT (pick largest)
.rdata:00003060                 dd offset ??_R4IArchiveOpenSeq@@6B@ ; const IArchiveOpenSeq::`RTTI Complete Object Locator'
.rdata:00003064                 public ??_7IArchiveOpenSeq@@6B@
.rdata:00003064 ; const IArchiveOpenSeq::`vftable'
.rdata:00003064 ??_7IArchiveOpenSeq@@6B@ dd offset __purecall
.rdata:00003064                                         ; DATA XREF: IArchiveOpenSeq::IArchiveOpenSeq(void)+19o
.rdata:00003068                 dd offset __purecall
.rdata:0000306C                 dd offset __purecall
.rdata:00003070                 dd offset __purecall
.rdata:00003070 _rdata          ends
.rdata:00003070
.rdata$r:00003074 ; ===========================================================================
.rdata$r:00003074
.rdata$r:00003074 ; Segment type: Pure data
.rdata$r:00003074 ; Segment permissions: Read
.rdata$r:00003074 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003074                 assume cs:_rdata$r
.rdata$r:00003074                 ;org 3074h
.rdata$r:00003074 ; COMDAT (pick any)
.rdata$r:00003074                 public ??_R4IArchiveOpenSeq@@6B@
.rdata$r:00003074 ; const IArchiveOpenSeq::`RTTI Complete Object Locator'
.rdata$r:00003074 ??_R4IArchiveOpenSeq@@6B@ db    0       ; DATA XREF: .rdata:00003060o
.rdata$r:00003075                 db    0
.rdata$r:00003076                 db    0
.rdata$r:00003077                 db    0
.rdata$r:00003078                 db    0
.rdata$r:00003079                 db    0
.rdata$r:0000307A                 db    0
.rdata$r:0000307B                 db    0
.rdata$r:0000307C                 db    0
.rdata$r:0000307D                 db    0
.rdata$r:0000307E                 db    0
.rdata$r:0000307F                 db    0
.rdata$r:00003080                 dd offset ??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:00003084                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003084 _rdata$r        ends
.rdata$r:00003084
.text:00003088 ; ===========================================================================
.text:00003088
.text:00003088 ; Segment type: Pure code
.text:00003088 ; Segment permissions: Read/Execute
.text:00003088 _text           segment para public 'CODE' use32
.text:00003088                 assume cs:_text
.text:00003088                 ;org 3088h
.text:00003088 ; COMDAT (pick any)
.text:00003088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003088
.text:00003088 ; =============== S U B R O U T I N E =======================================
.text:00003088
.text:00003088 ; Attributes: bp-based frame
.text:00003088
.text:00003088 ; _DWORD __thiscall IOutArchive::IOutArchive(IOutArchive *__hidden this)
.text:00003088                 public ??0IOutArchive@@QAE@XZ
.text:00003088 ??0IOutArchive@@QAE@XZ proc near        ; CODE XREF: NArchive::NBz2::CHandler::CHandler(void)+46p
.text:00003088
.text:00003088 var_4           = dword ptr -4
.text:00003088
.text:00003088                 push    ebp
.text:00003089                 mov     ebp, esp
.text:0000308B                 push    ecx
.text:0000308C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003093                 mov     [ebp+var_4], ecx
.text:00003096                 mov     ecx, [ebp+var_4]
.text:00003099                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000309E                 mov     eax, [ebp+var_4]
.text:000030A1                 mov     dword ptr [eax], offset ??_7IOutArchive@@6B@ ; const IOutArchive::`vftable'
.text:000030A7                 mov     eax, [ebp+var_4]
.text:000030AA                 add     esp, 4
.text:000030AD                 cmp     ebp, esp
.text:000030AF                 call    __RTC_CheckEsp
.text:000030B4                 mov     esp, ebp
.text:000030B6                 pop     ebp
.text:000030B7                 retn
.text:000030B7 ??0IOutArchive@@QAE@XZ endp
.text:000030B7
.text:000030B7 _text           ends
.text:000030B7
.rdata:000030B8 ; ===========================================================================
.rdata:000030B8
.rdata:000030B8 ; Segment type: Pure data
.rdata:000030B8 ; Segment permissions: Read
.rdata:000030B8 _rdata          segment dword public 'DATA' use32
.rdata:000030B8                 assume cs:_rdata
.rdata:000030B8                 ;org 30B8h
.rdata:000030B8 ; COMDAT (pick largest)
.rdata:000030B8                 dd offset ??_R4IOutArchive@@6B@ ; const IOutArchive::`RTTI Complete Object Locator'
.rdata:000030BC                 public ??_7IOutArchive@@6B@
.rdata:000030BC ; const IOutArchive::`vftable'
.rdata:000030BC ??_7IOutArchive@@6B@ dd offset __purecall
.rdata:000030BC                                         ; DATA XREF: IOutArchive::IOutArchive(void)+19o
.rdata:000030C0                 dd offset __purecall
.rdata:000030C4                 dd offset __purecall
.rdata:000030C8                 dd offset __purecall
.rdata:000030CC                 dd offset __purecall
.rdata:000030CC _rdata          ends
.rdata:000030CC
.rdata$r:000030D0 ; ===========================================================================
.rdata$r:000030D0
.rdata$r:000030D0 ; Segment type: Pure data
.rdata$r:000030D0 ; Segment permissions: Read
.rdata$r:000030D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000030D0                 assume cs:_rdata$r
.rdata$r:000030D0                 ;org 30D0h
.rdata$r:000030D0 ; COMDAT (pick any)
.rdata$r:000030D0                 public ??_R4IOutArchive@@6B@
.rdata$r:000030D0 ; const IOutArchive::`RTTI Complete Object Locator'
.rdata$r:000030D0 ??_R4IOutArchive@@6B@ db    0           ; DATA XREF: .rdata:000030B8o
.rdata$r:000030D1                 db    0
.rdata$r:000030D2                 db    0
.rdata$r:000030D3                 db    0
.rdata$r:000030D4                 db    0
.rdata$r:000030D5                 db    0
.rdata$r:000030D6                 db    0
.rdata$r:000030D7                 db    0
.rdata$r:000030D8                 db    0
.rdata$r:000030D9                 db    0
.rdata$r:000030DA                 db    0
.rdata$r:000030DB                 db    0
.rdata$r:000030DC                 dd offset ??_R0?AUIOutArchive@@@8 ; IOutArchive `RTTI Type Descriptor'
.rdata$r:000030E0                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000030E0 _rdata$r        ends
.rdata$r:000030E0
.text:000030E4 ; ===========================================================================
.text:000030E4
.text:000030E4 ; Segment type: Pure code
.text:000030E4 ; Segment permissions: Read/Execute
.text:000030E4 _text           segment para public 'CODE' use32
.text:000030E4                 assume cs:_text
.text:000030E4                 ;org 30E4h
.text:000030E4 ; COMDAT (pick any)
.text:000030E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000030E4
.text:000030E4 ; =============== S U B R O U T I N E =======================================
.text:000030E4
.text:000030E4 ; Attributes: bp-based frame
.text:000030E4
.text:000030E4 ; _DWORD __thiscall ISetProperties::ISetProperties(ISetProperties *__hidden this)
.text:000030E4                 public ??0ISetProperties@@QAE@XZ
.text:000030E4 ??0ISetProperties@@QAE@XZ proc near     ; CODE XREF: NArchive::NBz2::CHandler::CHandler(void)+51p
.text:000030E4
.text:000030E4 var_4           = dword ptr -4
.text:000030E4
.text:000030E4                 push    ebp
.text:000030E5                 mov     ebp, esp
.text:000030E7                 push    ecx
.text:000030E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030EF                 mov     [ebp+var_4], ecx
.text:000030F2                 mov     ecx, [ebp+var_4]
.text:000030F5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000030FA                 mov     eax, [ebp+var_4]
.text:000030FD                 mov     dword ptr [eax], offset ??_7ISetProperties@@6B@ ; const ISetProperties::`vftable'
.text:00003103                 mov     eax, [ebp+var_4]
.text:00003106                 add     esp, 4
.text:00003109                 cmp     ebp, esp
.text:0000310B                 call    __RTC_CheckEsp
.text:00003110                 mov     esp, ebp
.text:00003112                 pop     ebp
.text:00003113                 retn
.text:00003113 ??0ISetProperties@@QAE@XZ endp
.text:00003113
.text:00003113 _text           ends
.text:00003113
.rdata:00003114 ; ===========================================================================
.rdata:00003114
.rdata:00003114 ; Segment type: Pure data
.rdata:00003114 ; Segment permissions: Read
.rdata:00003114 _rdata          segment dword public 'DATA' use32
.rdata:00003114                 assume cs:_rdata
.rdata:00003114                 ;org 3114h
.rdata:00003114 ; COMDAT (pick largest)
.rdata:00003114                 dd offset ??_R4ISetProperties@@6B@ ; const ISetProperties::`RTTI Complete Object Locator'
.rdata:00003118                 public ??_7ISetProperties@@6B@
.rdata:00003118 ; const ISetProperties::`vftable'
.rdata:00003118 ??_7ISetProperties@@6B@ dd offset __purecall
.rdata:00003118                                         ; DATA XREF: ISetProperties::ISetProperties(void)+19o
.rdata:0000311C                 dd offset __purecall
.rdata:00003120                 dd offset __purecall
.rdata:00003124                 dd offset __purecall
.rdata:00003124 _rdata          ends
.rdata:00003124
.rdata$r:00003128 ; ===========================================================================
.rdata$r:00003128
.rdata$r:00003128 ; Segment type: Pure data
.rdata$r:00003128 ; Segment permissions: Read
.rdata$r:00003128 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003128                 assume cs:_rdata$r
.rdata$r:00003128                 ;org 3128h
.rdata$r:00003128 ; COMDAT (pick any)
.rdata$r:00003128                 public ??_R4ISetProperties@@6B@
.rdata$r:00003128 ; const ISetProperties::`RTTI Complete Object Locator'
.rdata$r:00003128 ??_R4ISetProperties@@6B@ db    0        ; DATA XREF: .rdata:00003114o
.rdata$r:00003129                 db    0
.rdata$r:0000312A                 db    0
.rdata$r:0000312B                 db    0
.rdata$r:0000312C                 db    0
.rdata$r:0000312D                 db    0
.rdata$r:0000312E                 db    0
.rdata$r:0000312F                 db    0
.rdata$r:00003130                 db    0
.rdata$r:00003131                 db    0
.rdata$r:00003132                 db    0
.rdata$r:00003133                 db    0
.rdata$r:00003134                 dd offset ??_R0?AUISetProperties@@@8 ; ISetProperties `RTTI Type Descriptor'
.rdata$r:00003138                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003138 _rdata$r        ends
.rdata$r:00003138
.text:0000313C ; ===========================================================================
.text:0000313C
.text:0000313C ; Segment type: Pure code
.text:0000313C ; Segment permissions: Read/Execute
.text:0000313C _text           segment para public 'CODE' use32
.text:0000313C                 assume cs:_text
.text:0000313C                 ;org 313Ch
.text:0000313C ; COMDAT (pick any)
.text:0000313C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000313C
.text:0000313C ; =============== S U B R O U T I N E =======================================
.text:0000313C
.text:0000313C ; Attributes: bp-based frame
.text:0000313C
.text:0000313C ; _DWORD __thiscall NArchive::NBz2::CHandler::~CHandler(NArchive::NBz2::CHandler *__hidden this)
.text:0000313C                 public ??1CHandler@NBz2@NArchive@@QAE@XZ
.text:0000313C ??1CHandler@NBz2@NArchive@@QAE@XZ proc near
.text:0000313C                                         ; CODE XREF: NArchive::NBz2::CHandler::`scalar deleting destructor'(uint)+11p
.text:0000313C
.text:0000313C var_10          = dword ptr -10h
.text:0000313C var_C           = dword ptr -0Ch
.text:0000313C var_4           = dword ptr -4
.text:0000313C
.text:0000313C                 push    ebp
.text:0000313D                 mov     ebp, esp
.text:0000313F                 push    0FFFFFFFFh
.text:00003141                 push    offset __ehhandler$??1CHandler@NBz2@NArchive@@QAE@XZ
.text:00003146                 mov     eax, large fs:0
.text:0000314C                 push    eax
.text:0000314D                 push    ecx
.text:0000314E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003155                 mov     eax, dword ptr ds:___security_cookie
.text:0000315A                 xor     eax, ebp
.text:0000315C                 push    eax
.text:0000315D                 lea     eax, [ebp+var_C]
.text:00003160                 mov     large fs:0, eax
.text:00003166                 mov     [ebp+var_10], ecx
.text:00003169                 mov     [ebp+var_4], 1
.text:00003170                 mov     ecx, [ebp+var_10]
.text:00003173                 add     ecx, 48h ; 'H'  ; this
.text:00003176                 call    ??1CSingleMethodProps@NArchive@@QAE@XZ ; NArchive::CSingleMethodProps::~CSingleMethodProps(void)
.text:0000317B                 mov     byte ptr [ebp+var_4], 0
.text:0000317F                 mov     ecx, [ebp+var_10]
.text:00003182                 add     ecx, 18h
.text:00003185                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000318A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003191                 mov     ecx, [ebp+var_10]
.text:00003194                 add     ecx, 14h
.text:00003197                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000319C                 mov     ecx, [ebp+var_C]
.text:0000319F                 mov     large fs:0, ecx
.text:000031A6                 pop     ecx
.text:000031A7                 add     esp, 10h
.text:000031AA                 cmp     ebp, esp
.text:000031AC                 call    __RTC_CheckEsp
.text:000031B1                 mov     esp, ebp
.text:000031B3                 pop     ebp
.text:000031B4                 retn
.text:000031B4 ??1CHandler@NBz2@NArchive@@QAE@XZ endp
.text:000031B4
.text:000031B4 ; ---------------------------------------------------------------------------
.text:000031B5                 align 4
.text:000031B5 _text           ends
.text:000031B5
.text$x:000031B8 ; ===========================================================================
.text$x:000031B8
.text$x:000031B8 ; Segment type: Pure code
.text$x:000031B8 ; Segment permissions: Read/Execute
.text$x:000031B8 _text$x         segment para public 'CODE' use32
.text$x:000031B8                 assume cs:_text$x
.text$x:000031B8                 ;org 31B8h
.text$x:000031B8 ; COMDAT (pick associative to section at 313C)
.text$x:000031B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000031B8
.text$x:000031B8 ; =============== S U B R O U T I N E =======================================
.text$x:000031B8
.text$x:000031B8
.text$x:000031B8 __unwindfunclet$??1CHandler@NBz2@NArchive@@QAE@XZ$0 proc near
.text$x:000031B8                                         ; DATA XREF: .xdata$x:000031F0o
.text$x:000031B8                 mov     ecx, [ebp-10h]
.text$x:000031BB                 add     ecx, 14h
.text$x:000031BE                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:000031BE __unwindfunclet$??1CHandler@NBz2@NArchive@@QAE@XZ$0 endp
.text$x:000031BE
.text$x:000031C3
.text$x:000031C3 ; =============== S U B R O U T I N E =======================================
.text$x:000031C3
.text$x:000031C3
.text$x:000031C3 __unwindfunclet$??1CHandler@NBz2@NArchive@@QAE@XZ$1 proc near
.text$x:000031C3                                         ; DATA XREF: .xdata$x:000031F8o
.text$x:000031C3                 mov     ecx, [ebp-10h]
.text$x:000031C6                 add     ecx, 18h
.text$x:000031C9                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000031C9 __unwindfunclet$??1CHandler@NBz2@NArchive@@QAE@XZ$1 endp
.text$x:000031C9
.text$x:000031CE
.text$x:000031CE ; =============== S U B R O U T I N E =======================================
.text$x:000031CE
.text$x:000031CE
.text$x:000031CE __ehhandler$??1CHandler@NBz2@NArchive@@QAE@XZ proc near
.text$x:000031CE                                         ; DATA XREF: NArchive::NBz2::CHandler::~CHandler(void)+5o
.text$x:000031CE
.text$x:000031CE arg_4           = dword ptr  8
.text$x:000031CE
.text$x:000031CE                 mov     edx, [esp+arg_4]
.text$x:000031D2                 lea     eax, [edx+0Ch]
.text$x:000031D5                 mov     ecx, [edx-8]
.text$x:000031D8                 xor     ecx, eax
.text$x:000031DA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000031DF                 mov     eax, offset __ehfuncinfo$??1CHandler@NBz2@NArchive@@QAE@XZ
.text$x:000031E4                 jmp     ___CxxFrameHandler3
.text$x:000031E4 __ehhandler$??1CHandler@NBz2@NArchive@@QAE@XZ endp
.text$x:000031E4
.text$x:000031E4 ; ---------------------------------------------------------------------------
.text$x:000031E9                 align 4
.text$x:000031E9 _text$x         ends
.text$x:000031E9
.xdata$x:000031EC ; ===========================================================================
.xdata$x:000031EC
.xdata$x:000031EC ; Segment type: Pure data
.xdata$x:000031EC ; Segment permissions: Read
.xdata$x:000031EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000031EC                 assume cs:_xdata$x
.xdata$x:000031EC                 ;org 31ECh
.xdata$x:000031EC ; COMDAT (pick associative to section at 313C)
.xdata$x:000031EC __unwindtable$??1CHandler@NBz2@NArchive@@QAE@XZ db 0FFh
.xdata$x:000031EC                                         ; DATA XREF: .xdata$x:00003204o
.xdata$x:000031ED                 db 0FFh
.xdata$x:000031EE                 db 0FFh
.xdata$x:000031EF                 db 0FFh
.xdata$x:000031F0                 dd offset __unwindfunclet$??1CHandler@NBz2@NArchive@@QAE@XZ$0
.xdata$x:000031F4                 align 8
.xdata$x:000031F8                 dd offset __unwindfunclet$??1CHandler@NBz2@NArchive@@QAE@XZ$1
.xdata$x:000031FC __ehfuncinfo$??1CHandler@NBz2@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000031FC                                         ; DATA XREF: __ehhandler$??1CHandler@NBz2@NArchive@@QAE@XZ+11o
.xdata$x:000031FD                 db    5
.xdata$x:000031FE                 db  93h ; ô
.xdata$x:000031FF                 db  19h
.xdata$x:00003200                 db    2
.xdata$x:00003201                 db    0
.xdata$x:00003202                 db    0
.xdata$x:00003203                 db    0
.xdata$x:00003204                 dd offset __unwindtable$??1CHandler@NBz2@NArchive@@QAE@XZ
.xdata$x:00003208                 db    0
.xdata$x:00003209                 db    0
.xdata$x:0000320A                 db    0
.xdata$x:0000320B                 db    0
.xdata$x:0000320C                 db    0
.xdata$x:0000320D                 db    0
.xdata$x:0000320E                 db    0
.xdata$x:0000320F                 db    0
.xdata$x:00003210                 db    0
.xdata$x:00003211                 db    0
.xdata$x:00003212                 db    0
.xdata$x:00003213                 db    0
.xdata$x:00003214                 db    0
.xdata$x:00003215                 db    0
.xdata$x:00003216                 db    0
.xdata$x:00003217                 db    0
.xdata$x:00003218                 db    0
.xdata$x:00003219                 db    0
.xdata$x:0000321A                 db    0
.xdata$x:0000321B                 db    0
.xdata$x:0000321C                 db    1
.xdata$x:0000321D                 db    0
.xdata$x:0000321E                 db    0
.xdata$x:0000321F                 db    0
.xdata$x:0000321F _xdata$x        ends
.xdata$x:0000321F
.text:00003220 ; ===========================================================================
.text:00003220
.text:00003220 ; Segment type: Pure code
.text:00003220 ; Segment permissions: Read/Execute
.text:00003220 _text           segment para public 'CODE' use32
.text:00003220                 assume cs:_text
.text:00003220                 ;org 3220h
.text:00003220 ; COMDAT (pick any)
.text:00003220                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003220
.text:00003220 ; =============== S U B R O U T I N E =======================================
.text:00003220
.text:00003220 ; Attributes: bp-based frame
.text:00003220
.text:00003220 ; _DWORD __thiscall NArchive::CSingleMethodProps::~CSingleMethodProps(NArchive::CSingleMethodProps *__hidden this)
.text:00003220                 public ??1CSingleMethodProps@NArchive@@QAE@XZ
.text:00003220 ??1CSingleMethodProps@NArchive@@QAE@XZ proc near
.text:00003220                                         ; CODE XREF: NArchive::NBz2::CHandler::~CHandler(void)+3Ap
.text:00003220
.text:00003220 var_4           = dword ptr -4
.text:00003220
.text:00003220                 push    ebp
.text:00003221                 mov     ebp, esp
.text:00003223                 push    ecx
.text:00003224                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000322B                 mov     [ebp+var_4], ecx
.text:0000322E                 mov     ecx, [ebp+var_4] ; this
.text:00003231                 call    ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text:00003236                 add     esp, 4
.text:00003239                 cmp     ebp, esp
.text:0000323B                 call    __RTC_CheckEsp
.text:00003240                 mov     esp, ebp
.text:00003242                 pop     ebp
.text:00003243                 retn
.text:00003243 ??1CSingleMethodProps@NArchive@@QAE@XZ endp
.text:00003243
.text:00003243 _text           ends
.text:00003243
.text:00003244 ; ===========================================================================
.text:00003244
.text:00003244 ; Segment type: Pure code
.text:00003244 ; Segment permissions: Read/Execute
.text:00003244 _text           segment para public 'CODE' use32
.text:00003244                 assume cs:_text
.text:00003244                 ;org 3244h
.text:00003244 ; COMDAT (pick any)
.text:00003244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003244
.text:00003244 ; =============== S U B R O U T I N E =======================================
.text:00003244
.text:00003244 ; Attributes: bp-based frame
.text:00003244
.text:00003244 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:00003244                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:00003244 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:00003244                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+47Ap
.text:00003244                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2ECp ...
.text:00003244
.text:00003244 var_4           = dword ptr -4
.text:00003244 arg_0           = dword ptr  8
.text:00003244
.text:00003244                 push    ebp
.text:00003245                 mov     ebp, esp
.text:00003247                 push    ecx
.text:00003248                 push    esi
.text:00003249                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003250                 mov     [ebp+var_4], ecx
.text:00003253                 mov     eax, [ebp+var_4]
.text:00003256                 mov     ecx, [ebp+arg_0]
.text:00003259                 mov     [eax], ecx
.text:0000325B                 cmp     [ebp+arg_0], 0
.text:0000325F                 jz      short loc_3278
.text:00003261                 mov     edx, [ebp+arg_0]
.text:00003264                 mov     eax, [edx]
.text:00003266                 mov     esi, esp
.text:00003268                 mov     ecx, [ebp+arg_0]
.text:0000326B                 push    ecx
.text:0000326C                 mov     edx, [eax+4]
.text:0000326F                 call    edx
.text:00003271                 cmp     esi, esp
.text:00003273                 call    __RTC_CheckEsp
.text:00003278
.text:00003278 loc_3278:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:00003278                 mov     eax, [ebp+var_4]
.text:0000327B                 pop     esi
.text:0000327C                 add     esp, 4
.text:0000327F                 cmp     ebp, esp
.text:00003281                 call    __RTC_CheckEsp
.text:00003286                 mov     esp, ebp
.text:00003288                 pop     ebp
.text:00003289                 retn    4
.text:00003289 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:00003289
.text:00003289 _text           ends
.text:00003289
.text:0000328C ; ===========================================================================
.text:0000328C
.text:0000328C ; Segment type: Pure code
.text:0000328C ; Segment permissions: Read/Execute
.text:0000328C _text           segment para public 'CODE' use32
.text:0000328C                 assume cs:_text
.text:0000328C                 ;org 328Ch
.text:0000328C ; COMDAT (pick any)
.text:0000328C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000328C
.text:0000328C ; =============== S U B R O U T I N E =======================================
.text:0000328C
.text:0000328C ; Attributes: bp-based frame
.text:0000328C
.text:0000328C ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:0000328C                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:0000328C ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:0000328C                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+515p
.text:0000328C                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5A6p ...
.text:0000328C
.text:0000328C var_4           = dword ptr -4
.text:0000328C
.text:0000328C                 push    ebp
.text:0000328D                 mov     ebp, esp
.text:0000328F                 push    ecx
.text:00003290                 push    esi
.text:00003291                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003298                 mov     [ebp+var_4], ecx
.text:0000329B                 mov     eax, [ebp+var_4]
.text:0000329E                 cmp     dword ptr [eax], 0
.text:000032A1                 jz      short loc_32BE
.text:000032A3                 mov     ecx, [ebp+var_4]
.text:000032A6                 mov     edx, [ecx]
.text:000032A8                 mov     eax, [ebp+var_4]
.text:000032AB                 mov     ecx, [eax]
.text:000032AD                 mov     edx, [edx]
.text:000032AF                 mov     esi, esp
.text:000032B1                 push    ecx
.text:000032B2                 mov     eax, [edx+8]
.text:000032B5                 call    eax
.text:000032B7                 cmp     esi, esp
.text:000032B9                 call    __RTC_CheckEsp
.text:000032BE
.text:000032BE loc_32BE:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:000032BE                 pop     esi
.text:000032BF                 add     esp, 4
.text:000032C2                 cmp     ebp, esp
.text:000032C4                 call    __RTC_CheckEsp
.text:000032C9                 mov     esp, ebp
.text:000032CB                 pop     ebp
.text:000032CC                 retn
.text:000032CC ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:000032CC
.text:000032CC ; ---------------------------------------------------------------------------
.text:000032CD                 align 10h
.text:000032CD _text           ends
.text:000032CD
.text:000032D0 ; ===========================================================================
.text:000032D0
.text:000032D0 ; Segment type: Pure code
.text:000032D0 ; Segment permissions: Read/Execute
.text:000032D0 _text           segment para public 'CODE' use32
.text:000032D0                 assume cs:_text
.text:000032D0                 ;org 32D0h
.text:000032D0 ; COMDAT (pick any)
.text:000032D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000032D0
.text:000032D0 ; =============== S U B R O U T I N E =======================================
.text:000032D0
.text:000032D0 ; Attributes: bp-based frame
.text:000032D0
.text:000032D0 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:000032D0                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:000032D0 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:000032D0                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+54Cp
.text:000032D0                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4AFp ...
.text:000032D0
.text:000032D0 var_4           = dword ptr -4
.text:000032D0
.text:000032D0                 push    ebp
.text:000032D1                 mov     ebp, esp
.text:000032D3                 push    ecx
.text:000032D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000032DB                 mov     [ebp+var_4], ecx
.text:000032DE                 mov     eax, [ebp+var_4]
.text:000032E1                 mov     eax, [eax]
.text:000032E3                 mov     esp, ebp
.text:000032E5                 pop     ebp
.text:000032E6                 retn
.text:000032E6 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:000032E6
.text:000032E6 ; ---------------------------------------------------------------------------
.text:000032E7                 align 4
.text:000032E7 _text           ends
.text:000032E7
.text:000032E8 ; ===========================================================================
.text:000032E8
.text:000032E8 ; Segment type: Pure code
.text:000032E8 ; Segment permissions: Read/Execute
.text:000032E8 _text           segment para public 'CODE' use32
.text:000032E8                 assume cs:_text
.text:000032E8                 ;org 32E8h
.text:000032E8 ; COMDAT (pick any)
.text:000032E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000032E8
.text:000032E8 ; =============== S U B R O U T I N E =======================================
.text:000032E8
.text:000032E8 ; Attributes: bp-based frame
.text:000032E8
.text:000032E8 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:000032E8                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:000032E8 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:000032E8                                         ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+69p
.text:000032E8                                         ; NArchive::NBz2::CHandler::CHandler(void)+A0p
.text:000032E8
.text:000032E8 var_4           = dword ptr -4
.text:000032E8
.text:000032E8                 push    ebp
.text:000032E9                 mov     ebp, esp
.text:000032EB                 push    ecx
.text:000032EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000032F3                 mov     [ebp+var_4], ecx
.text:000032F6                 mov     eax, [ebp+var_4]
.text:000032F9                 mov     dword ptr [eax], 0
.text:000032FF                 mov     eax, [ebp+var_4]
.text:00003302                 mov     esp, ebp
.text:00003304                 pop     ebp
.text:00003305                 retn
.text:00003305 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00003305
.text:00003305 ; ---------------------------------------------------------------------------
.text:00003306                 align 4
.text:00003306 _text           ends
.text:00003306
.text:00003308 ; ===========================================================================
.text:00003308
.text:00003308 ; Segment type: Pure code
.text:00003308 ; Segment permissions: Read/Execute
.text:00003308 _text           segment para public 'CODE' use32
.text:00003308                 assume cs:_text
.text:00003308                 ;org 3308h
.text:00003308 ; COMDAT (pick any)
.text:00003308                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003308
.text:00003308 ; =============== S U B R O U T I N E =======================================
.text:00003308
.text:00003308 ; Attributes: bp-based frame
.text:00003308
.text:00003308 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00003308                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00003308 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00003308                                         ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+B0p
.text:00003308                                         ; NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+1BBp ...
.text:00003308
.text:00003308 var_4           = dword ptr -4
.text:00003308
.text:00003308                 push    ebp
.text:00003309                 mov     ebp, esp
.text:0000330B                 push    ecx
.text:0000330C                 push    esi
.text:0000330D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003314                 mov     [ebp+var_4], ecx
.text:00003317                 mov     eax, [ebp+var_4]
.text:0000331A                 cmp     dword ptr [eax], 0
.text:0000331D                 jz      short loc_333A
.text:0000331F                 mov     ecx, [ebp+var_4]
.text:00003322                 mov     edx, [ecx]
.text:00003324                 mov     eax, [ebp+var_4]
.text:00003327                 mov     ecx, [eax]
.text:00003329                 mov     edx, [edx]
.text:0000332B                 mov     esi, esp
.text:0000332D                 push    ecx
.text:0000332E                 mov     eax, [edx+8]
.text:00003331                 call    eax
.text:00003333                 cmp     esi, esp
.text:00003335                 call    __RTC_CheckEsp
.text:0000333A
.text:0000333A loc_333A:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:0000333A                 pop     esi
.text:0000333B                 add     esp, 4
.text:0000333E                 cmp     ebp, esp
.text:00003340                 call    __RTC_CheckEsp
.text:00003345                 mov     esp, ebp
.text:00003347                 pop     ebp
.text:00003348                 retn
.text:00003348 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00003348
.text:00003348 ; ---------------------------------------------------------------------------
.text:00003349                 align 4
.text:00003349 _text           ends
.text:00003349
.text:0000334C ; ===========================================================================
.text:0000334C
.text:0000334C ; Segment type: Pure code
.text:0000334C ; Segment permissions: Read/Execute
.text:0000334C _text           segment para public 'CODE' use32
.text:0000334C                 assume cs:_text
.text:0000334C                 ;org 334Ch
.text:0000334C ; COMDAT (pick any)
.text:0000334C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000334C
.text:0000334C ; =============== S U B R O U T I N E =======================================
.text:0000334C
.text:0000334C ; Attributes: bp-based frame
.text:0000334C
.text:0000334C ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:0000334C                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:0000334C ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:0000334C                                         ; CODE XREF: NArchive::NBz2::CHandler::Close(void)+52p
.text:0000334C
.text:0000334C var_4           = dword ptr -4
.text:0000334C
.text:0000334C                 push    ebp
.text:0000334D                 mov     ebp, esp
.text:0000334F                 push    ecx
.text:00003350                 push    esi
.text:00003351                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003358                 mov     [ebp+var_4], ecx
.text:0000335B                 mov     eax, [ebp+var_4]
.text:0000335E                 cmp     dword ptr [eax], 0
.text:00003361                 jz      short loc_3387
.text:00003363                 mov     ecx, [ebp+var_4]
.text:00003366                 mov     edx, [ecx]
.text:00003368                 mov     eax, [ebp+var_4]
.text:0000336B                 mov     ecx, [eax]
.text:0000336D                 mov     edx, [edx]
.text:0000336F                 mov     esi, esp
.text:00003371                 push    ecx
.text:00003372                 mov     eax, [edx+8]
.text:00003375                 call    eax
.text:00003377                 cmp     esi, esp
.text:00003379                 call    __RTC_CheckEsp
.text:0000337E                 mov     ecx, [ebp+var_4]
.text:00003381                 mov     dword ptr [ecx], 0
.text:00003387
.text:00003387 loc_3387:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:00003387                 pop     esi
.text:00003388                 add     esp, 4
.text:0000338B                 cmp     ebp, esp
.text:0000338D                 call    __RTC_CheckEsp
.text:00003392                 mov     esp, ebp
.text:00003394                 pop     ebp
.text:00003395                 retn
.text:00003395 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:00003395
.text:00003395 ; ---------------------------------------------------------------------------
.text:00003396                 align 4
.text:00003396 _text           ends
.text:00003396
.text:00003398 ; ===========================================================================
.text:00003398
.text:00003398 ; Segment type: Pure code
.text:00003398 ; Segment permissions: Read/Execute
.text:00003398 _text           segment para public 'CODE' use32
.text:00003398                 assume cs:_text
.text:00003398                 ;org 3398h
.text:00003398 ; COMDAT (pick any)
.text:00003398                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003398
.text:00003398 ; =============== S U B R O U T I N E =======================================
.text:00003398
.text:00003398 ; Attributes: bp-based frame
.text:00003398
.text:00003398 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:00003398                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00003398 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00003398                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2D4p
.text:00003398                                         ; NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+1E9p
.text:00003398
.text:00003398 var_4           = dword ptr -4
.text:00003398
.text:00003398                 push    ebp
.text:00003399                 mov     ebp, esp
.text:0000339B                 push    ecx
.text:0000339C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033A3                 mov     [ebp+var_4], ecx
.text:000033A6                 mov     eax, [ebp+var_4]
.text:000033A9                 mov     eax, [eax]
.text:000033AB                 mov     esp, ebp
.text:000033AD                 pop     ebp
.text:000033AE                 retn
.text:000033AE ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:000033AE
.text:000033AE ; ---------------------------------------------------------------------------
.text:000033AF                 align 10h
.text:000033AF _text           ends
.text:000033AF
.text:000033B0 ; ===========================================================================
.text:000033B0
.text:000033B0 ; Segment type: Pure code
.text:000033B0 ; Segment permissions: Read/Execute
.text:000033B0 _text           segment para public 'CODE' use32
.text:000033B0                 assume cs:_text
.text:000033B0                 ;org 33B0h
.text:000033B0 ; COMDAT (pick any)
.text:000033B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033B0
.text:000033B0 ; =============== S U B R O U T I N E =======================================
.text:000033B0
.text:000033B0 ; Attributes: bp-based frame
.text:000033B0
.text:000033B0 ; public: struct ISequentialInStream * * __thiscall CMyComPtr<struct ISequentialInStream>::operator&(void)
.text:000033B0                 public ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
.text:000033B0 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ proc near
.text:000033B0                                         ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+78p
.text:000033B0
.text:000033B0 var_4           = dword ptr -4
.text:000033B0
.text:000033B0                 push    ebp
.text:000033B1                 mov     ebp, esp
.text:000033B3                 push    ecx
.text:000033B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033BB                 mov     [ebp+var_4], ecx
.text:000033BE                 mov     eax, [ebp+var_4]
.text:000033C1                 mov     esp, ebp
.text:000033C3                 pop     ebp
.text:000033C4                 retn
.text:000033C4 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ endp
.text:000033C4
.text:000033C4 ; ---------------------------------------------------------------------------
.text:000033C5                 align 4
.text:000033C5 _text           ends
.text:000033C5
.text:000033C8 ; ===========================================================================
.text:000033C8
.text:000033C8 ; Segment type: Pure code
.text:000033C8 ; Segment permissions: Read/Execute
.text:000033C8 _text           segment para public 'CODE' use32
.text:000033C8                 assume cs:_text
.text:000033C8                 ;org 33C8h
.text:000033C8 ; COMDAT (pick any)
.text:000033C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033C8
.text:000033C8 ; =============== S U B R O U T I N E =======================================
.text:000033C8
.text:000033C8 ; Attributes: bp-based frame
.text:000033C8
.text:000033C8 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:000033C8                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:000033C8 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:000033C8                                         ; CODE XREF: NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+BDp
.text:000033C8                                         ; NArchive::NBz2::CHandler::OpenSeq(ISequentialInStream *)+30p
.text:000033C8
.text:000033C8 var_4           = dword ptr -4
.text:000033C8 arg_0           = dword ptr  8
.text:000033C8
.text:000033C8                 push    ebp
.text:000033C9                 mov     ebp, esp
.text:000033CB                 push    ecx
.text:000033CC                 push    esi
.text:000033CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033D4                 mov     [ebp+var_4], ecx
.text:000033D7                 cmp     [ebp+arg_0], 0
.text:000033DB                 jz      short loc_33F4
.text:000033DD                 mov     eax, [ebp+arg_0]
.text:000033E0                 mov     ecx, [eax]
.text:000033E2                 mov     esi, esp
.text:000033E4                 mov     edx, [ebp+arg_0]
.text:000033E7                 push    edx
.text:000033E8                 mov     eax, [ecx+4]
.text:000033EB                 call    eax
.text:000033ED                 cmp     esi, esp
.text:000033EF                 call    __RTC_CheckEsp
.text:000033F4
.text:000033F4 loc_33F4:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:000033F4                 mov     ecx, [ebp+var_4]
.text:000033F7                 cmp     dword ptr [ecx], 0
.text:000033FA                 jz      short loc_3417
.text:000033FC                 mov     edx, [ebp+var_4]
.text:000033FF                 mov     eax, [edx]
.text:00003401                 mov     ecx, [ebp+var_4]
.text:00003404                 mov     edx, [ecx]
.text:00003406                 mov     eax, [eax]
.text:00003408                 mov     esi, esp
.text:0000340A                 push    edx
.text:0000340B                 mov     ecx, [eax+8]
.text:0000340E                 call    ecx
.text:00003410                 cmp     esi, esp
.text:00003412                 call    __RTC_CheckEsp
.text:00003417
.text:00003417 loc_3417:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00003417                 mov     edx, [ebp+var_4]
.text:0000341A                 mov     eax, [ebp+arg_0]
.text:0000341D                 mov     [edx], eax
.text:0000341F                 mov     eax, [ebp+arg_0]
.text:00003422                 pop     esi
.text:00003423                 add     esp, 4
.text:00003426                 cmp     ebp, esp
.text:00003428                 call    __RTC_CheckEsp
.text:0000342D                 mov     esp, ebp
.text:0000342F                 pop     ebp
.text:00003430                 retn    4
.text:00003430 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00003430
.text:00003430 ; ---------------------------------------------------------------------------
.text:00003433                 align 4
.text:00003433 _text           ends
.text:00003433
.text:00003434 ; ===========================================================================
.text:00003434
.text:00003434 ; Segment type: Pure code
.text:00003434 ; Segment permissions: Read/Execute
.text:00003434 _text           segment para public 'CODE' use32
.text:00003434                 assume cs:_text
.text:00003434                 ;org 3434h
.text:00003434 ; COMDAT (pick any)
.text:00003434                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003434
.text:00003434 ; =============== S U B R O U T I N E =======================================
.text:00003434
.text:00003434 ; Attributes: bp-based frame
.text:00003434
.text:00003434 ; public: unsigned __int64 __thiscall NBitm::CDecoder<class CInBuffer>::GetStreamSize(void)const
.text:00003434                 public ?GetStreamSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ
.text:00003434 ?GetStreamSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ proc near
.text:00003434                                         ; CODE XREF: NCompress::NBZip2::CDecoder::GetStreamSize(void)+17p
.text:00003434
.text:00003434 var_4           = dword ptr -4
.text:00003434
.text:00003434                 push    ebp
.text:00003435                 mov     ebp, esp
.text:00003437                 push    ecx
.text:00003438                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000343F                 mov     [ebp+var_4], ecx
.text:00003442                 mov     ecx, [ebp+var_4]
.text:00003445                 add     ecx, 8          ; this
.text:00003448                 call    ?GetStreamSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetStreamSize(void)
.text:0000344D                 add     esp, 4
.text:00003450                 cmp     ebp, esp
.text:00003452                 call    __RTC_CheckEsp
.text:00003457                 mov     esp, ebp
.text:00003459                 pop     ebp
.text:0000345A                 retn
.text:0000345A ?GetStreamSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ endp
.text:0000345A
.text:0000345A ; ---------------------------------------------------------------------------
.text:0000345B                 align 4
.text:0000345B _text           ends
.text:0000345B
.text:0000345C ; ===========================================================================
.text:0000345C
.text:0000345C ; Segment type: Pure code
.text:0000345C ; Segment permissions: Read/Execute
.text:0000345C _text           segment para public 'CODE' use32
.text:0000345C                 assume cs:_text
.text:0000345C                 ;org 345Ch
.text:0000345C ; COMDAT (pick any)
.text:0000345C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000345C
.text:0000345C ; =============== S U B R O U T I N E =======================================
.text:0000345C
.text:0000345C ; Attributes: bp-based frame
.text:0000345C
.text:0000345C ; unsigned __int64 __thiscall CInBufferBase::GetStreamSize(CInBufferBase *__hidden this)
.text:0000345C                 public ?GetStreamSize@CInBufferBase@@QBE_KXZ
.text:0000345C ?GetStreamSize@CInBufferBase@@QBE_KXZ proc near
.text:0000345C                                         ; CODE XREF: NBitm::CDecoder<CInBuffer>::GetStreamSize(void)+14p
.text:0000345C
.text:0000345C var_4           = dword ptr -4
.text:0000345C
.text:0000345C                 push    ebp
.text:0000345D                 mov     ebp, esp
.text:0000345F                 push    ecx
.text:00003460                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003467                 mov     [ebp+var_4], ecx
.text:0000346A                 mov     eax, [ebp+var_4]
.text:0000346D                 mov     ecx, [ebp+var_4]
.text:00003470                 mov     eax, [eax]
.text:00003472                 sub     eax, [ecx+8]
.text:00003475                 cdq
.text:00003476                 mov     ecx, [ebp+var_4]
.text:00003479                 add     eax, [ecx+10h]
.text:0000347C                 adc     edx, [ecx+14h]
.text:0000347F                 mov     esp, ebp
.text:00003481                 pop     ebp
.text:00003482                 retn
.text:00003482 ?GetStreamSize@CInBufferBase@@QBE_KXZ endp
.text:00003482
.text:00003482 ; ---------------------------------------------------------------------------
.text:00003483                 align 4
.text:00003483 _text           ends
.text:00003483
.text:00003484 ; ===========================================================================
.text:00003484
.text:00003484 ; Segment type: Pure code
.text:00003484 ; Segment permissions: Read/Execute
.text:00003484 _text           segment para public 'CODE' use32
.text:00003484                 assume cs:_text
.text:00003484                 ;org 3484h
.text:00003484 ; COMDAT (pick any)
.text:00003484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003484
.text:00003484 ; =============== S U B R O U T I N E =======================================
.text:00003484
.text:00003484 ; Attributes: bp-based frame
.text:00003484
.text:00003484 ; public: unsigned __int64 __thiscall NBitm::CDecoder<class CInBuffer>::GetProcessedSize(void)const
.text:00003484                 public ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ
.text:00003484 ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ proc near
.text:00003484                                         ; CODE XREF: NCompress::NBZip2::CDecoder::GetInputProcessedSize(void)+17p
.text:00003484
.text:00003484 var_4           = dword ptr -4
.text:00003484
.text:00003484                 push    ebp
.text:00003485                 mov     ebp, esp
.text:00003487                 push    ecx
.text:00003488                 push    esi
.text:00003489                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003490                 mov     [ebp+var_4], ecx
.text:00003493                 mov     ecx, [ebp+var_4]
.text:00003496                 add     ecx, 8          ; this
.text:00003499                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:0000349E                 mov     ecx, [ebp+var_4]
.text:000034A1                 mov     esi, 20h ; ' '
.text:000034A6                 sub     esi, [ecx]
.text:000034A8                 shr     esi, 3
.text:000034AB                 xor     ecx, ecx
.text:000034AD                 sub     eax, esi
.text:000034AF                 sbb     edx, ecx
.text:000034B1                 pop     esi
.text:000034B2                 add     esp, 4
.text:000034B5                 cmp     ebp, esp
.text:000034B7                 call    __RTC_CheckEsp
.text:000034BC                 mov     esp, ebp
.text:000034BE                 pop     ebp
.text:000034BF                 retn
.text:000034BF ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ endp
.text:000034BF
.text:000034BF _text           ends
.text:000034BF
.text:000034C0 ; ===========================================================================
.text:000034C0
.text:000034C0 ; Segment type: Pure code
.text:000034C0 ; Segment permissions: Read/Execute
.text:000034C0 _text           segment para public 'CODE' use32
.text:000034C0                 assume cs:_text
.text:000034C0                 ;org 34C0h
.text:000034C0 ; COMDAT (pick any)
.text:000034C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034C0
.text:000034C0 ; =============== S U B R O U T I N E =======================================
.text:000034C0
.text:000034C0 ; Attributes: bp-based frame
.text:000034C0
.text:000034C0 ; unsigned __int64 __thiscall CInBufferBase::GetProcessedSize(CInBufferBase *__hidden this)
.text:000034C0                 public ?GetProcessedSize@CInBufferBase@@QBE_KXZ
.text:000034C0 ?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
.text:000034C0                                         ; CODE XREF: NBitm::CDecoder<CInBuffer>::GetProcessedSize(void)+15p
.text:000034C0
.text:000034C0 var_4           = dword ptr -4
.text:000034C0
.text:000034C0                 push    ebp
.text:000034C1                 mov     ebp, esp
.text:000034C3                 push    ecx
.text:000034C4                 push    esi
.text:000034C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034CC                 mov     [ebp+var_4], ecx
.text:000034CF                 mov     eax, [ebp+var_4]
.text:000034D2                 mov     ecx, [eax+20h]
.text:000034D5                 xor     esi, esi
.text:000034D7                 mov     edx, [ebp+var_4]
.text:000034DA                 add     ecx, [edx+10h]
.text:000034DD                 adc     esi, [edx+14h]
.text:000034E0                 mov     eax, [ebp+var_4]
.text:000034E3                 mov     edx, [ebp+var_4]
.text:000034E6                 mov     eax, [eax]
.text:000034E8                 sub     eax, [edx+8]
.text:000034EB                 cdq
.text:000034EC                 add     ecx, eax
.text:000034EE                 adc     esi, edx
.text:000034F0                 mov     eax, ecx
.text:000034F2                 mov     edx, esi
.text:000034F4                 pop     esi
.text:000034F5                 mov     esp, ebp
.text:000034F7                 pop     ebp
.text:000034F8                 retn
.text:000034F8 ?GetProcessedSize@CInBufferBase@@QBE_KXZ endp
.text:000034F8
.text:000034F8 ; ---------------------------------------------------------------------------
.text:000034F9                 align 4
.text:000034F9 _text           ends
.text:000034F9
.text:000034FC ; ===========================================================================
.text:000034FC
.text:000034FC ; Segment type: Pure code
.text:000034FC ; Segment permissions: Read/Execute
.text:000034FC _text           segment para public 'CODE' use32
.text:000034FC                 assume cs:_text
.text:000034FC                 ;org 34FCh
.text:000034FC ; COMDAT (pick any)
.text:000034FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034FC
.text:000034FC ; =============== S U B R O U T I N E =======================================
.text:000034FC
.text:000034FC ; Attributes: bp-based frame
.text:000034FC
.text:000034FC ; public: bool __thiscall NBitm::CDecoder<class CInBuffer>::ExtraBitsWereRead(void)const
.text:000034FC                 public ?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ
.text:000034FC ?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ proc near
.text:000034FC                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6B5p
.text:000034FC
.text:000034FC var_8           = dword ptr -8
.text:000034FC var_4           = dword ptr -4
.text:000034FC
.text:000034FC                 push    ebp
.text:000034FD                 mov     ebp, esp
.text:000034FF                 sub     esp, 8
.text:00003502                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003509                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003510                 mov     [ebp+var_4], ecx
.text:00003513                 mov     eax, [ebp+var_4]
.text:00003516                 cmp     dword ptr [eax+28h], 4
.text:0000351A                 ja      short loc_353C
.text:0000351C                 mov     ecx, [ebp+var_4]
.text:0000351F                 mov     edx, 20h ; ' '
.text:00003524                 sub     edx, [ecx]
.text:00003526                 mov     eax, [ebp+var_4]
.text:00003529                 mov     ecx, [eax+28h]
.text:0000352C                 shl     ecx, 3
.text:0000352F                 cmp     edx, ecx
.text:00003531                 jb      short loc_353C
.text:00003533                 mov     [ebp+var_8], 0
.text:0000353A                 jmp     short loc_3543
.text:0000353C ; ---------------------------------------------------------------------------
.text:0000353C
.text:0000353C loc_353C:                               ; CODE XREF: NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead(void)+1Ej
.text:0000353C                                         ; NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead(void)+35j
.text:0000353C                 mov     [ebp+var_8], 1
.text:00003543
.text:00003543 loc_3543:                               ; CODE XREF: NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead(void)+3Ej
.text:00003543                 mov     al, byte ptr [ebp+var_8]
.text:00003546                 mov     esp, ebp
.text:00003548                 pop     ebp
.text:00003549                 retn
.text:00003549 ?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ endp
.text:00003549
.text:00003549 ; ---------------------------------------------------------------------------
.text:0000354A                 align 4
.text:0000354A _text           ends
.text:0000354A
.text:0000354C ; ===========================================================================
.text:0000354C
.text:0000354C ; Segment type: Pure code
.text:0000354C ; Segment permissions: Read/Execute
.text:0000354C _text           segment para public 'CODE' use32
.text:0000354C                 assume cs:_text
.text:0000354C                 ;org 354Ch
.text:0000354C ; COMDAT (pick any)
.text:0000354C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000354C
.text:0000354C ; =============== S U B R O U T I N E =======================================
.text:0000354C
.text:0000354C ; Attributes: bp-based frame
.text:0000354C
.text:0000354C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:0000354C                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:0000354C ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:0000354C                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A3p
.text:0000354C                                         ; CDummyOutStream::CDummyOutStream(void)+30p
.text:0000354C
.text:0000354C var_4           = dword ptr -4
.text:0000354C
.text:0000354C                 push    ebp
.text:0000354D                 mov     ebp, esp
.text:0000354F                 push    ecx
.text:00003550                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003557                 mov     [ebp+var_4], ecx
.text:0000355A                 mov     eax, [ebp+var_4]
.text:0000355D                 mov     dword ptr [eax], 0
.text:00003563                 mov     eax, [ebp+var_4]
.text:00003566                 mov     esp, ebp
.text:00003568                 pop     ebp
.text:00003569                 retn
.text:00003569 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00003569
.text:00003569 ; ---------------------------------------------------------------------------
.text:0000356A                 align 4
.text:0000356A _text           ends
.text:0000356A
.text:0000356C ; ===========================================================================
.text:0000356C
.text:0000356C ; Segment type: Pure code
.text:0000356C ; Segment permissions: Read/Execute
.text:0000356C _text           segment para public 'CODE' use32
.text:0000356C                 assume cs:_text
.text:0000356C                 ;org 356Ch
.text:0000356C ; COMDAT (pick any)
.text:0000356C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000356C
.text:0000356C ; =============== S U B R O U T I N E =======================================
.text:0000356C
.text:0000356C ; Attributes: bp-based frame
.text:0000356C
.text:0000356C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:0000356C                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:0000356C ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:0000356C                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3D2p
.text:0000356C
.text:0000356C var_4           = dword ptr -4
.text:0000356C arg_0           = dword ptr  8
.text:0000356C
.text:0000356C                 push    ebp
.text:0000356D                 mov     ebp, esp
.text:0000356F                 push    ecx
.text:00003570                 push    esi
.text:00003571                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003578                 mov     [ebp+var_4], ecx
.text:0000357B                 mov     eax, [ebp+var_4]
.text:0000357E                 mov     ecx, [ebp+arg_0]
.text:00003581                 mov     [eax], ecx
.text:00003583                 cmp     [ebp+arg_0], 0
.text:00003587                 jz      short loc_35A0
.text:00003589                 mov     edx, [ebp+arg_0]
.text:0000358C                 mov     eax, [edx]
.text:0000358E                 mov     esi, esp
.text:00003590                 mov     ecx, [ebp+arg_0]
.text:00003593                 push    ecx
.text:00003594                 mov     edx, [eax+4]
.text:00003597                 call    edx
.text:00003599                 cmp     esi, esp
.text:0000359B                 call    __RTC_CheckEsp
.text:000035A0
.text:000035A0 loc_35A0:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:000035A0                 mov     eax, [ebp+var_4]
.text:000035A3                 pop     esi
.text:000035A4                 add     esp, 4
.text:000035A7                 cmp     ebp, esp
.text:000035A9                 call    __RTC_CheckEsp
.text:000035AE                 mov     esp, ebp
.text:000035B0                 pop     ebp
.text:000035B1                 retn    4
.text:000035B1 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:000035B1
.text:000035B1 _text           ends
.text:000035B1
.text:000035B4 ; ===========================================================================
.text:000035B4
.text:000035B4 ; Segment type: Pure code
.text:000035B4 ; Segment permissions: Read/Execute
.text:000035B4 _text           segment para public 'CODE' use32
.text:000035B4                 assume cs:_text
.text:000035B4                 ;org 35B4h
.text:000035B4 ; COMDAT (pick any)
.text:000035B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035B4
.text:000035B4 ; =============== S U B R O U T I N E =======================================
.text:000035B4
.text:000035B4 ; Attributes: bp-based frame
.text:000035B4
.text:000035B4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:000035B4                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000035B4 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000035B4                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+115p
.text:000035B4                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+155p ...
.text:000035B4
.text:000035B4 var_4           = dword ptr -4
.text:000035B4
.text:000035B4                 push    ebp
.text:000035B5                 mov     ebp, esp
.text:000035B7                 push    ecx
.text:000035B8                 push    esi
.text:000035B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035C0                 mov     [ebp+var_4], ecx
.text:000035C3                 mov     eax, [ebp+var_4]
.text:000035C6                 cmp     dword ptr [eax], 0
.text:000035C9                 jz      short loc_35E6
.text:000035CB                 mov     ecx, [ebp+var_4]
.text:000035CE                 mov     edx, [ecx]
.text:000035D0                 mov     eax, [ebp+var_4]
.text:000035D3                 mov     ecx, [eax]
.text:000035D5                 mov     edx, [edx]
.text:000035D7                 mov     esi, esp
.text:000035D9                 push    ecx
.text:000035DA                 mov     eax, [edx+8]
.text:000035DD                 call    eax
.text:000035DF                 cmp     esi, esp
.text:000035E1                 call    __RTC_CheckEsp
.text:000035E6
.text:000035E6 loc_35E6:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:000035E6                 pop     esi
.text:000035E7                 add     esp, 4
.text:000035EA                 cmp     ebp, esp
.text:000035EC                 call    __RTC_CheckEsp
.text:000035F1                 mov     esp, ebp
.text:000035F3                 pop     ebp
.text:000035F4                 retn
.text:000035F4 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000035F4
.text:000035F4 ; ---------------------------------------------------------------------------
.text:000035F5                 align 4
.text:000035F5 _text           ends
.text:000035F5
.text:000035F8 ; ===========================================================================
.text:000035F8
.text:000035F8 ; Segment type: Pure code
.text:000035F8 ; Segment permissions: Read/Execute
.text:000035F8 _text           segment para public 'CODE' use32
.text:000035F8                 assume cs:_text
.text:000035F8                 ;org 35F8h
.text:000035F8 ; COMDAT (pick any)
.text:000035F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035F8
.text:000035F8 ; =============== S U B R O U T I N E =======================================
.text:000035F8
.text:000035F8 ; Attributes: bp-based frame
.text:000035F8
.text:000035F8 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:000035F8                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:000035F8 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:000035F8                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+403p
.text:000035F8                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+814p
.text:000035F8
.text:000035F8 var_4           = dword ptr -4
.text:000035F8
.text:000035F8                 push    ebp
.text:000035F9                 mov     ebp, esp
.text:000035FB                 push    ecx
.text:000035FC                 push    esi
.text:000035FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003604                 mov     [ebp+var_4], ecx
.text:00003607                 mov     eax, [ebp+var_4]
.text:0000360A                 cmp     dword ptr [eax], 0
.text:0000360D                 jz      short loc_3633
.text:0000360F                 mov     ecx, [ebp+var_4]
.text:00003612                 mov     edx, [ecx]
.text:00003614                 mov     eax, [ebp+var_4]
.text:00003617                 mov     ecx, [eax]
.text:00003619                 mov     edx, [edx]
.text:0000361B                 mov     esi, esp
.text:0000361D                 push    ecx
.text:0000361E                 mov     eax, [edx+8]
.text:00003621                 call    eax
.text:00003623                 cmp     esi, esp
.text:00003625                 call    __RTC_CheckEsp
.text:0000362A                 mov     ecx, [ebp+var_4]
.text:0000362D                 mov     dword ptr [ecx], 0
.text:00003633
.text:00003633 loc_3633:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:00003633                 pop     esi
.text:00003634                 add     esp, 4
.text:00003637                 cmp     ebp, esp
.text:00003639                 call    __RTC_CheckEsp
.text:0000363E                 mov     esp, ebp
.text:00003640                 pop     ebp
.text:00003641                 retn
.text:00003641 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:00003641
.text:00003641 ; ---------------------------------------------------------------------------
.text:00003642                 align 4
.text:00003642 _text           ends
.text:00003642
.text:00003644 ; ===========================================================================
.text:00003644
.text:00003644 ; Segment type: Pure code
.text:00003644 ; Segment permissions: Read/Execute
.text:00003644 _text           segment para public 'CODE' use32
.text:00003644                 assume cs:_text
.text:00003644                 ;org 3644h
.text:00003644 ; COMDAT (pick any)
.text:00003644                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003644
.text:00003644 ; =============== S U B R O U T I N E =======================================
.text:00003644
.text:00003644 ; Attributes: bp-based frame
.text:00003644
.text:00003644 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:00003644                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00003644 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00003644                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3DEp
.text:00003644                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+55Ap
.text:00003644
.text:00003644 var_4           = dword ptr -4
.text:00003644
.text:00003644                 push    ebp
.text:00003645                 mov     ebp, esp
.text:00003647                 push    ecx
.text:00003648                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000364F                 mov     [ebp+var_4], ecx
.text:00003652                 mov     eax, [ebp+var_4]
.text:00003655                 mov     eax, [eax]
.text:00003657                 mov     esp, ebp
.text:00003659                 pop     ebp
.text:0000365A                 retn
.text:0000365A ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:0000365A
.text:0000365A ; ---------------------------------------------------------------------------
.text:0000365B                 align 4
.text:0000365B _text           ends
.text:0000365B
.text:0000365C ; ===========================================================================
.text:0000365C
.text:0000365C ; Segment type: Pure code
.text:0000365C ; Segment permissions: Read/Execute
.text:0000365C _text           segment para public 'CODE' use32
.text:0000365C                 assume cs:_text
.text:0000365C                 ;org 365Ch
.text:0000365C ; COMDAT (pick any)
.text:0000365C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000365C
.text:0000365C ; =============== S U B R O U T I N E =======================================
.text:0000365C
.text:0000365C ; Attributes: bp-based frame
.text:0000365C
.text:0000365C ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:0000365C                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:0000365C ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:0000365C                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C1p
.text:0000365C
.text:0000365C var_4           = dword ptr -4
.text:0000365C
.text:0000365C                 push    ebp
.text:0000365D                 mov     ebp, esp
.text:0000365F                 push    ecx
.text:00003660                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003667                 mov     [ebp+var_4], ecx
.text:0000366A                 mov     eax, [ebp+var_4]
.text:0000366D                 mov     esp, ebp
.text:0000366F                 pop     ebp
.text:00003670                 retn
.text:00003670 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:00003670
.text:00003670 ; ---------------------------------------------------------------------------
.text:00003671                 align 4
.text:00003671 _text           ends
.text:00003671
.text:00003674 ; ===========================================================================
.text:00003674
.text:00003674 ; Segment type: Pure code
.text:00003674 ; Segment permissions: Read/Execute
.text:00003674 _text           segment para public 'CODE' use32
.text:00003674                 assume cs:_text
.text:00003674                 ;org 3674h
.text:00003674 ; COMDAT (pick any)
.text:00003674                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003674
.text:00003674 ; =============== S U B R O U T I N E =======================================
.text:00003674
.text:00003674 ; Attributes: bp-based frame
.text:00003674
.text:00003674 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:00003674                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:00003674 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:00003674                                         ; CODE XREF: CDummyOutStream::SetStream(ISequentialOutStream *)+18p
.text:00003674
.text:00003674 var_4           = dword ptr -4
.text:00003674 arg_0           = dword ptr  8
.text:00003674
.text:00003674                 push    ebp
.text:00003675                 mov     ebp, esp
.text:00003677                 push    ecx
.text:00003678                 push    esi
.text:00003679                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003680                 mov     [ebp+var_4], ecx
.text:00003683                 cmp     [ebp+arg_0], 0
.text:00003687                 jz      short loc_36A0
.text:00003689                 mov     eax, [ebp+arg_0]
.text:0000368C                 mov     ecx, [eax]
.text:0000368E                 mov     esi, esp
.text:00003690                 mov     edx, [ebp+arg_0]
.text:00003693                 push    edx
.text:00003694                 mov     eax, [ecx+4]
.text:00003697                 call    eax
.text:00003699                 cmp     esi, esp
.text:0000369B                 call    __RTC_CheckEsp
.text:000036A0
.text:000036A0 loc_36A0:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:000036A0                 mov     ecx, [ebp+var_4]
.text:000036A3                 cmp     dword ptr [ecx], 0
.text:000036A6                 jz      short loc_36C3
.text:000036A8                 mov     edx, [ebp+var_4]
.text:000036AB                 mov     eax, [edx]
.text:000036AD                 mov     ecx, [ebp+var_4]
.text:000036B0                 mov     edx, [ecx]
.text:000036B2                 mov     eax, [eax]
.text:000036B4                 mov     esi, esp
.text:000036B6                 push    edx
.text:000036B7                 mov     ecx, [eax+8]
.text:000036BA                 call    ecx
.text:000036BC                 cmp     esi, esp
.text:000036BE                 call    __RTC_CheckEsp
.text:000036C3
.text:000036C3 loc_36C3:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:000036C3                 mov     edx, [ebp+var_4]
.text:000036C6                 mov     eax, [ebp+arg_0]
.text:000036C9                 mov     [edx], eax
.text:000036CB                 mov     eax, [ebp+arg_0]
.text:000036CE                 pop     esi
.text:000036CF                 add     esp, 4
.text:000036D2                 cmp     ebp, esp
.text:000036D4                 call    __RTC_CheckEsp
.text:000036D9                 mov     esp, ebp
.text:000036DB                 pop     ebp
.text:000036DC                 retn    4
.text:000036DC ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:000036DC
.text:000036DC ; ---------------------------------------------------------------------------
.text:000036DF                 align 10h
.text:000036DF _text           ends
.text:000036DF
.text:000036E0 ; ===========================================================================
.text:000036E0
.text:000036E0 ; Segment type: Pure code
.text:000036E0 ; Segment permissions: Read/Execute
.text:000036E0 _text           segment para public 'CODE' use32
.text:000036E0                 assume cs:_text
.text:000036E0                 ;org 36E0h
.text:000036E0 ; COMDAT (pick any)
.text:000036E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000036E0
.text:000036E0 ; =============== S U B R O U T I N E =======================================
.text:000036E0
.text:000036E0 ; Attributes: bp-based frame
.text:000036E0
.text:000036E0 ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:000036E0                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:000036E0 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:000036E0                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+12Ep
.text:000036E0
.text:000036E0 var_4           = dword ptr -4
.text:000036E0
.text:000036E0                 push    ebp
.text:000036E1                 mov     ebp, esp
.text:000036E3                 push    ecx
.text:000036E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036EB                 mov     [ebp+var_4], ecx
.text:000036EE                 mov     eax, [ebp+var_4]
.text:000036F1                 xor     ecx, ecx
.text:000036F3                 cmp     dword ptr [eax], 0
.text:000036F6                 setz    cl
.text:000036F9                 mov     al, cl
.text:000036FB                 mov     esp, ebp
.text:000036FD                 pop     ebp
.text:000036FE                 retn
.text:000036FE ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:000036FE
.text:000036FE ; ---------------------------------------------------------------------------
.text:000036FF                 align 10h
.text:000036FF _text           ends
.text:000036FF
.text:00003700 ; ===========================================================================
.text:00003700
.text:00003700 ; Segment type: Pure code
.text:00003700 ; Segment permissions: Read/Execute
.text:00003700 _text           segment para public 'CODE' use32
.text:00003700                 assume cs:_text
.text:00003700                 ;org 3700h
.text:00003700 ; COMDAT (pick any)
.text:00003700                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003700
.text:00003700 ; =============== S U B R O U T I N E =======================================
.text:00003700
.text:00003700 ; Attributes: bp-based frame
.text:00003700
.text:00003700 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(void)
.text:00003700                 public ??0?$CObjectVector@UCProp@@@@QAE@XZ
.text:00003700 ??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00003700                                         ; CODE XREF: CProps::CProps(void)+11p
.text:00003700
.text:00003700 var_4           = dword ptr -4
.text:00003700
.text:00003700                 push    ebp
.text:00003701                 mov     ebp, esp
.text:00003703                 push    ecx
.text:00003704                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000370B                 mov     [ebp+var_4], ecx
.text:0000370E                 mov     ecx, [ebp+var_4]
.text:00003711                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00003716                 mov     eax, [ebp+var_4]
.text:00003719                 add     esp, 4
.text:0000371C                 cmp     ebp, esp
.text:0000371E                 call    __RTC_CheckEsp
.text:00003723                 mov     esp, ebp
.text:00003725                 pop     ebp
.text:00003726                 retn
.text:00003726 ??0?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00003726
.text:00003726 ; ---------------------------------------------------------------------------
.text:00003727                 align 4
.text:00003727 _text           ends
.text:00003727
.text:00003728 ; ===========================================================================
.text:00003728
.text:00003728 ; Segment type: Pure code
.text:00003728 ; Segment permissions: Read/Execute
.text:00003728 _text           segment para public 'CODE' use32
.text:00003728                 assume cs:_text
.text:00003728                 ;org 3728h
.text:00003728 ; COMDAT (pick any)
.text:00003728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003728
.text:00003728 ; =============== S U B R O U T I N E =======================================
.text:00003728
.text:00003728 ; Attributes: bp-based frame
.text:00003728
.text:00003728 ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:00003728                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00003728 ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00003728                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:00003728
.text:00003728 var_20          = dword ptr -20h
.text:00003728 var_1C          = dword ptr -1Ch
.text:00003728 var_18          = dword ptr -18h
.text:00003728 var_14          = dword ptr -14h
.text:00003728 var_10          = dword ptr -10h
.text:00003728 var_C           = dword ptr -0Ch
.text:00003728 var_4           = dword ptr -4
.text:00003728
.text:00003728                 push    ebp
.text:00003729                 mov     ebp, esp
.text:0000372B                 push    0FFFFFFFFh
.text:0000372D                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00003732                 mov     eax, large fs:0
.text:00003738                 push    eax
.text:00003739                 sub     esp, 14h
.text:0000373C                 mov     eax, 0CCCCCCCCh
.text:00003741                 mov     [ebp+var_20], eax
.text:00003744                 mov     [ebp+var_1C], eax
.text:00003747                 mov     [ebp+var_18], eax
.text:0000374A                 mov     [ebp+var_14], eax
.text:0000374D                 mov     [ebp+var_10], eax
.text:00003750                 mov     eax, dword ptr ds:___security_cookie
.text:00003755                 xor     eax, ebp
.text:00003757                 push    eax
.text:00003758                 lea     eax, [ebp+var_C]
.text:0000375B                 mov     large fs:0, eax
.text:00003761                 mov     [ebp+var_10], ecx
.text:00003764                 mov     [ebp+var_4], 0
.text:0000376B                 mov     ecx, [ebp+var_10]
.text:0000376E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00003773                 mov     [ebp+var_14], eax
.text:00003776
.text:00003776 loc_3776:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_37B8j
.text:00003776                 cmp     [ebp+var_14], 0
.text:0000377A                 jz      short loc_37BA
.text:0000377C                 mov     eax, [ebp+var_14]
.text:0000377F                 sub     eax, 1
.text:00003782                 mov     [ebp+var_14], eax
.text:00003785                 mov     ecx, [ebp+var_14]
.text:00003788                 push    ecx
.text:00003789                 mov     ecx, [ebp+var_10]
.text:0000378C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00003791                 mov     edx, [eax]
.text:00003793                 mov     [ebp+var_1C], edx
.text:00003796                 mov     eax, [ebp+var_1C]
.text:00003799                 mov     [ebp+var_18], eax
.text:0000379C                 cmp     [ebp+var_18], 0
.text:000037A0                 jz      short loc_37B1
.text:000037A2                 push    1
.text:000037A4                 mov     ecx, [ebp+var_18]
.text:000037A7                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:000037AC                 mov     [ebp+var_20], eax
.text:000037AF                 jmp     short loc_37B8
.text:000037B1 ; ---------------------------------------------------------------------------
.text:000037B1
.text:000037B1 loc_37B1:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:000037B1                 mov     [ebp+var_20], 0
.text:000037B8
.text:000037B8 loc_37B8:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:000037B8                 jmp     short loc_3776
.text:000037BA ; ---------------------------------------------------------------------------
.text:000037BA
.text:000037BA loc_37BA:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:000037BA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000037C1                 mov     ecx, [ebp+var_10]
.text:000037C4                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000037C9                 mov     ecx, [ebp+var_C]
.text:000037CC                 mov     large fs:0, ecx
.text:000037D3                 pop     ecx
.text:000037D4                 add     esp, 20h
.text:000037D7                 cmp     ebp, esp
.text:000037D9                 call    __RTC_CheckEsp
.text:000037DE                 mov     esp, ebp
.text:000037E0                 pop     ebp
.text:000037E1                 retn
.text:000037E1 ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:000037E1
.text:000037E1 ; ---------------------------------------------------------------------------
.text:000037E2                 align 4
.text:000037E2 _text           ends
.text:000037E2
.text$x:000037E4 ; ===========================================================================
.text$x:000037E4
.text$x:000037E4 ; Segment type: Pure code
.text$x:000037E4 ; Segment permissions: Read/Execute
.text$x:000037E4 _text$x         segment para public 'CODE' use32
.text$x:000037E4                 assume cs:_text$x
.text$x:000037E4                 ;org 37E4h
.text$x:000037E4 ; COMDAT (pick associative to section at 3728)
.text$x:000037E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000037E4
.text$x:000037E4 ; =============== S U B R O U T I N E =======================================
.text$x:000037E4
.text$x:000037E4
.text$x:000037E4 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:000037E4                                         ; DATA XREF: .xdata$x:0000380Co
.text$x:000037E4                 mov     ecx, [ebp-10h]
.text$x:000037E7                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000037E7 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:000037E7
.text$x:000037EC
.text$x:000037EC ; =============== S U B R O U T I N E =======================================
.text$x:000037EC
.text$x:000037EC
.text$x:000037EC __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:000037EC                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:000037EC
.text$x:000037EC arg_4           = dword ptr  8
.text$x:000037EC
.text$x:000037EC                 mov     edx, [esp+arg_4]
.text$x:000037F0                 lea     eax, [edx+0Ch]
.text$x:000037F3                 mov     ecx, [edx-18h]
.text$x:000037F6                 xor     ecx, eax
.text$x:000037F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000037FD                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:00003802                 jmp     ___CxxFrameHandler3
.text$x:00003802 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:00003802
.text$x:00003802 ; ---------------------------------------------------------------------------
.text$x:00003807                 align 4
.text$x:00003807 _text$x         ends
.text$x:00003807
.xdata$x:00003808 ; ===========================================================================
.xdata$x:00003808
.xdata$x:00003808 ; Segment type: Pure data
.xdata$x:00003808 ; Segment permissions: Read
.xdata$x:00003808 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003808                 assume cs:_xdata$x
.xdata$x:00003808                 ;org 3808h
.xdata$x:00003808 ; COMDAT (pick associative to section at 3728)
.xdata$x:00003808 __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:00003808                                         ; DATA XREF: .xdata$x:00003818o
.xdata$x:00003809                 db 0FFh
.xdata$x:0000380A                 db 0FFh
.xdata$x:0000380B                 db 0FFh
.xdata$x:0000380C                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:00003810 __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:00003810                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:00003811                 db    5
.xdata$x:00003812                 db  93h ; ô
.xdata$x:00003813                 db  19h
.xdata$x:00003814                 db    1
.xdata$x:00003815                 db    0
.xdata$x:00003816                 db    0
.xdata$x:00003817                 db    0
.xdata$x:00003818                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:0000381C                 db    0
.xdata$x:0000381D                 db    0
.xdata$x:0000381E                 db    0
.xdata$x:0000381F                 db    0
.xdata$x:00003820                 db    0
.xdata$x:00003821                 db    0
.xdata$x:00003822                 db    0
.xdata$x:00003823                 db    0
.xdata$x:00003824                 db    0
.xdata$x:00003825                 db    0
.xdata$x:00003826                 db    0
.xdata$x:00003827                 db    0
.xdata$x:00003828                 db    0
.xdata$x:00003829                 db    0
.xdata$x:0000382A                 db    0
.xdata$x:0000382B                 db    0
.xdata$x:0000382C                 db    0
.xdata$x:0000382D                 db    0
.xdata$x:0000382E                 db    0
.xdata$x:0000382F                 db    0
.xdata$x:00003830                 db    1
.xdata$x:00003831                 db    0
.xdata$x:00003832                 db    0
.xdata$x:00003833                 db    0
.xdata$x:00003833 _xdata$x        ends
.xdata$x:00003833
.text:00003834 ; ===========================================================================
.text:00003834
.text:00003834 ; Segment type: Pure code
.text:00003834 ; Segment permissions: Read/Execute
.text:00003834 _text           segment para public 'CODE' use32
.text:00003834                 assume cs:_text
.text:00003834                 ;org 3834h
.text:00003834 ; COMDAT (pick any)
.text:00003834                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003834
.text:00003834 ; =============== S U B R O U T I N E =======================================
.text:00003834
.text:00003834 ; Attributes: bp-based frame
.text:00003834
.text:00003834 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:00003834                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00003834 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00003834                                         ; CODE XREF: NArchive::NBz2::CHandler::CHandler(void)+8Ep
.text:00003834
.text:00003834 var_4           = dword ptr -4
.text:00003834
.text:00003834                 push    ebp
.text:00003835                 mov     ebp, esp
.text:00003837                 push    ecx
.text:00003838                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000383F                 mov     [ebp+var_4], ecx
.text:00003842                 mov     eax, [ebp+var_4]
.text:00003845                 mov     dword ptr [eax], 0
.text:0000384B                 mov     eax, [ebp+var_4]
.text:0000384E                 mov     esp, ebp
.text:00003850                 pop     ebp
.text:00003851                 retn
.text:00003851 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00003851
.text:00003851 ; ---------------------------------------------------------------------------
.text:00003852                 align 4
.text:00003852 _text           ends
.text:00003852
.text:00003854 ; ===========================================================================
.text:00003854
.text:00003854 ; Segment type: Pure code
.text:00003854 ; Segment permissions: Read/Execute
.text:00003854 _text           segment para public 'CODE' use32
.text:00003854                 assume cs:_text
.text:00003854                 ;org 3854h
.text:00003854 ; COMDAT (pick any)
.text:00003854                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003854
.text:00003854 ; =============== S U B R O U T I N E =======================================
.text:00003854
.text:00003854 ; Attributes: bp-based frame
.text:00003854
.text:00003854 ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:00003854                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00003854 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00003854                                         ; CODE XREF: __unwindfunclet$??0CHandler@NBz2@NArchive@@QAE@XZ$0+6j
.text:00003854                                         ; NArchive::NBz2::CHandler::~CHandler(void)+5Bp ...
.text:00003854
.text:00003854 var_4           = dword ptr -4
.text:00003854
.text:00003854                 push    ebp
.text:00003855                 mov     ebp, esp
.text:00003857                 push    ecx
.text:00003858                 push    esi
.text:00003859                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003860                 mov     [ebp+var_4], ecx
.text:00003863                 mov     eax, [ebp+var_4]
.text:00003866                 cmp     dword ptr [eax], 0
.text:00003869                 jz      short loc_3886
.text:0000386B                 mov     ecx, [ebp+var_4]
.text:0000386E                 mov     edx, [ecx]
.text:00003870                 mov     eax, [ebp+var_4]
.text:00003873                 mov     ecx, [eax]
.text:00003875                 mov     edx, [edx]
.text:00003877                 mov     esi, esp
.text:00003879                 push    ecx
.text:0000387A                 mov     eax, [edx+8]
.text:0000387D                 call    eax
.text:0000387F                 cmp     esi, esp
.text:00003881                 call    __RTC_CheckEsp
.text:00003886
.text:00003886 loc_3886:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:00003886                 pop     esi
.text:00003887                 add     esp, 4
.text:0000388A                 cmp     ebp, esp
.text:0000388C                 call    __RTC_CheckEsp
.text:00003891                 mov     esp, ebp
.text:00003893                 pop     ebp
.text:00003894                 retn
.text:00003894 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00003894
.text:00003894 ; ---------------------------------------------------------------------------
.text:00003895                 align 4
.text:00003895 _text           ends
.text:00003895
.text:00003898 ; ===========================================================================
.text:00003898
.text:00003898 ; Segment type: Pure code
.text:00003898 ; Segment permissions: Read/Execute
.text:00003898 _text           segment para public 'CODE' use32
.text:00003898                 assume cs:_text
.text:00003898                 ;org 3898h
.text:00003898 ; COMDAT (pick any)
.text:00003898                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003898
.text:00003898 ; =============== S U B R O U T I N E =======================================
.text:00003898
.text:00003898 ; Attributes: bp-based frame
.text:00003898
.text:00003898 ; public: void __thiscall CMyComPtr<struct IInStream>::Release(void)
.text:00003898                 public ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
.text:00003898 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ proc near
.text:00003898                                         ; CODE XREF: NArchive::NBz2::CHandler::Close(void)+5Dp
.text:00003898
.text:00003898 var_4           = dword ptr -4
.text:00003898
.text:00003898                 push    ebp
.text:00003899                 mov     ebp, esp
.text:0000389B                 push    ecx
.text:0000389C                 push    esi
.text:0000389D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038A4                 mov     [ebp+var_4], ecx
.text:000038A7                 mov     eax, [ebp+var_4]
.text:000038AA                 cmp     dword ptr [eax], 0
.text:000038AD                 jz      short loc_38D3
.text:000038AF                 mov     ecx, [ebp+var_4]
.text:000038B2                 mov     edx, [ecx]
.text:000038B4                 mov     eax, [ebp+var_4]
.text:000038B7                 mov     ecx, [eax]
.text:000038B9                 mov     edx, [edx]
.text:000038BB                 mov     esi, esp
.text:000038BD                 push    ecx
.text:000038BE                 mov     eax, [edx+8]
.text:000038C1                 call    eax
.text:000038C3                 cmp     esi, esp
.text:000038C5                 call    __RTC_CheckEsp
.text:000038CA                 mov     ecx, [ebp+var_4]
.text:000038CD                 mov     dword ptr [ecx], 0
.text:000038D3
.text:000038D3 loc_38D3:                               ; CODE XREF: CMyComPtr<IInStream>::Release(void)+15j
.text:000038D3                 pop     esi
.text:000038D4                 add     esp, 4
.text:000038D7                 cmp     ebp, esp
.text:000038D9                 call    __RTC_CheckEsp
.text:000038DE                 mov     esp, ebp
.text:000038E0                 pop     ebp
.text:000038E1                 retn
.text:000038E1 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ endp
.text:000038E1
.text:000038E1 ; ---------------------------------------------------------------------------
.text:000038E2                 align 4
.text:000038E2 _text           ends
.text:000038E2
.text:000038E4 ; ===========================================================================
.text:000038E4
.text:000038E4 ; Segment type: Pure code
.text:000038E4 ; Segment permissions: Read/Execute
.text:000038E4 _text           segment para public 'CODE' use32
.text:000038E4                 assume cs:_text
.text:000038E4                 ;org 38E4h
.text:000038E4 ; COMDAT (pick any)
.text:000038E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000038E4
.text:000038E4 ; =============== S U B R O U T I N E =======================================
.text:000038E4
.text:000038E4 ; Attributes: bp-based frame
.text:000038E4
.text:000038E4 ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:000038E4                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000038E4 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000038E4                                         ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3FFp
.text:000038E4                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4C0p
.text:000038E4
.text:000038E4 var_4           = dword ptr -4
.text:000038E4
.text:000038E4                 push    ebp
.text:000038E5                 mov     ebp, esp
.text:000038E7                 push    ecx
.text:000038E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038EF                 mov     [ebp+var_4], ecx
.text:000038F2                 mov     eax, [ebp+var_4]
.text:000038F5                 mov     eax, [eax]
.text:000038F7                 mov     esp, ebp
.text:000038F9                 pop     ebp
.text:000038FA                 retn
.text:000038FA ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000038FA
.text:000038FA ; ---------------------------------------------------------------------------
.text:000038FB                 align 4
.text:000038FB _text           ends
.text:000038FB
.text:000038FC ; ===========================================================================
.text:000038FC
.text:000038FC ; Segment type: Pure code
.text:000038FC ; Segment permissions: Read/Execute
.text:000038FC _text           segment para public 'CODE' use32
.text:000038FC                 assume cs:_text
.text:000038FC                 ;org 38FCh
.text:000038FC ; COMDAT (pick any)
.text:000038FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000038FC
.text:000038FC ; =============== S U B R O U T I N E =======================================
.text:000038FC
.text:000038FC ; Attributes: bp-based frame
.text:000038FC
.text:000038FC ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:000038FC                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000038FC ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000038FC                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1D2p
.text:000038FC                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+41Dp
.text:000038FC
.text:000038FC var_4           = dword ptr -4
.text:000038FC
.text:000038FC                 push    ebp
.text:000038FD                 mov     ebp, esp
.text:000038FF                 push    ecx
.text:00003900                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003907                 mov     [ebp+var_4], ecx
.text:0000390A                 mov     eax, [ebp+var_4]
.text:0000390D                 mov     eax, [eax]
.text:0000390F                 mov     esp, ebp
.text:00003911                 pop     ebp
.text:00003912                 retn
.text:00003912 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00003912
.text:00003912 ; ---------------------------------------------------------------------------
.text:00003913                 align 4
.text:00003913 _text           ends
.text:00003913
.text:00003914 ; ===========================================================================
.text:00003914
.text:00003914 ; Segment type: Pure code
.text:00003914 ; Segment permissions: Read/Execute
.text:00003914 _text           segment para public 'CODE' use32
.text:00003914                 assume cs:_text
.text:00003914                 ;org 3914h
.text:00003914 ; COMDAT (pick any)
.text:00003914                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003914
.text:00003914 ; =============== S U B R O U T I N E =======================================
.text:00003914
.text:00003914 ; Attributes: bp-based frame
.text:00003914
.text:00003914 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:00003914                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:00003914 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:00003914                                         ; CODE XREF: NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+AEp
.text:00003914
.text:00003914 var_4           = dword ptr -4
.text:00003914 arg_0           = dword ptr  8
.text:00003914
.text:00003914                 push    ebp
.text:00003915                 mov     ebp, esp
.text:00003917                 push    ecx
.text:00003918                 push    esi
.text:00003919                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003920                 mov     [ebp+var_4], ecx
.text:00003923                 cmp     [ebp+arg_0], 0
.text:00003927                 jz      short loc_3940
.text:00003929                 mov     eax, [ebp+arg_0]
.text:0000392C                 mov     ecx, [eax]
.text:0000392E                 mov     esi, esp
.text:00003930                 mov     edx, [ebp+arg_0]
.text:00003933                 push    edx
.text:00003934                 mov     eax, [ecx+4]
.text:00003937                 call    eax
.text:00003939                 cmp     esi, esp
.text:0000393B                 call    __RTC_CheckEsp
.text:00003940
.text:00003940 loc_3940:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:00003940                 mov     ecx, [ebp+var_4]
.text:00003943                 cmp     dword ptr [ecx], 0
.text:00003946                 jz      short loc_3963
.text:00003948                 mov     edx, [ebp+var_4]
.text:0000394B                 mov     eax, [edx]
.text:0000394D                 mov     ecx, [ebp+var_4]
.text:00003950                 mov     edx, [ecx]
.text:00003952                 mov     eax, [eax]
.text:00003954                 mov     esi, esp
.text:00003956                 push    edx
.text:00003957                 mov     ecx, [eax+8]
.text:0000395A                 call    ecx
.text:0000395C                 cmp     esi, esp
.text:0000395E                 call    __RTC_CheckEsp
.text:00003963
.text:00003963 loc_3963:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:00003963                 mov     edx, [ebp+var_4]
.text:00003966                 mov     eax, [ebp+arg_0]
.text:00003969                 mov     [edx], eax
.text:0000396B                 mov     eax, [ebp+arg_0]
.text:0000396E                 pop     esi
.text:0000396F                 add     esp, 4
.text:00003972                 cmp     ebp, esp
.text:00003974                 call    __RTC_CheckEsp
.text:00003979                 mov     esp, ebp
.text:0000397B                 pop     ebp
.text:0000397C                 retn    4
.text:0000397C ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:0000397C
.text:0000397C ; ---------------------------------------------------------------------------
.text:0000397F                 align 10h
.text:0000397F _text           ends
.text:0000397F
.text:00003980 ; ===========================================================================
.text:00003980
.text:00003980 ; Segment type: Pure code
.text:00003980 ; Segment permissions: Read/Execute
.text:00003980 _text           segment para public 'CODE' use32
.text:00003980                 assume cs:_text
.text:00003980                 ;org 3980h
.text:00003980 ; COMDAT (pick any)
.text:00003980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003980
.text:00003980 ; =============== S U B R O U T I N E =======================================
.text:00003980
.text:00003980 ; Attributes: bp-based frame
.text:00003980
.text:00003980 ; public: bool __thiscall CMyComPtr<struct IInStream>::operator!(void)const
.text:00003980                 public ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ
.text:00003980 ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ proc near
.text:00003980                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+195p
.text:00003980
.text:00003980 var_4           = dword ptr -4
.text:00003980
.text:00003980                 push    ebp
.text:00003981                 mov     ebp, esp
.text:00003983                 push    ecx
.text:00003984                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000398B                 mov     [ebp+var_4], ecx
.text:0000398E                 mov     eax, [ebp+var_4]
.text:00003991                 xor     ecx, ecx
.text:00003993                 cmp     dword ptr [eax], 0
.text:00003996                 setz    cl
.text:00003999                 mov     al, cl
.text:0000399B                 mov     esp, ebp
.text:0000399D                 pop     ebp
.text:0000399E                 retn
.text:0000399E ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ endp
.text:0000399E
.text:0000399E ; ---------------------------------------------------------------------------
.text:0000399F                 align 10h
.text:0000399F _text           ends
.text:0000399F
.text:000039A0 ; ===========================================================================
.text:000039A0
.text:000039A0 ; Segment type: Pure code
.text:000039A0 ; Segment permissions: Read/Execute
.text:000039A0 _text           segment para public 'CODE' use32
.text:000039A0                 assume cs:_text
.text:000039A0                 ;org 39A0h
.text:000039A0 ; COMDAT (pick any)
.text:000039A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000039A0
.text:000039A0 ; =============== S U B R O U T I N E =======================================
.text:000039A0
.text:000039A0 ; Attributes: bp-based frame
.text:000039A0
.text:000039A0 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(struct ICompressCoder *)
.text:000039A0                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
.text:000039A0 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z proc near
.text:000039A0                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2C5p
.text:000039A0                                         ; NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+15Bp
.text:000039A0
.text:000039A0 var_4           = dword ptr -4
.text:000039A0 arg_0           = dword ptr  8
.text:000039A0
.text:000039A0                 push    ebp
.text:000039A1                 mov     ebp, esp
.text:000039A3                 push    ecx
.text:000039A4                 push    esi
.text:000039A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039AC                 mov     [ebp+var_4], ecx
.text:000039AF                 mov     eax, [ebp+var_4]
.text:000039B2                 mov     ecx, [ebp+arg_0]
.text:000039B5                 mov     [eax], ecx
.text:000039B7                 cmp     [ebp+arg_0], 0
.text:000039BB                 jz      short loc_39D4
.text:000039BD                 mov     edx, [ebp+arg_0]
.text:000039C0                 mov     eax, [edx]
.text:000039C2                 mov     esi, esp
.text:000039C4                 mov     ecx, [ebp+arg_0]
.text:000039C7                 push    ecx
.text:000039C8                 mov     edx, [eax+4]
.text:000039CB                 call    edx
.text:000039CD                 cmp     esi, esp
.text:000039CF                 call    __RTC_CheckEsp
.text:000039D4
.text:000039D4 loc_39D4:                               ; CODE XREF: CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)+1Bj
.text:000039D4                 mov     eax, [ebp+var_4]
.text:000039D7                 pop     esi
.text:000039D8                 add     esp, 4
.text:000039DB                 cmp     ebp, esp
.text:000039DD                 call    __RTC_CheckEsp
.text:000039E2                 mov     esp, ebp
.text:000039E4                 pop     ebp
.text:000039E5                 retn    4
.text:000039E5 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z endp
.text:000039E5
.text:000039E5 _text           ends
.text:000039E5
.text:000039E8 ; ===========================================================================
.text:000039E8
.text:000039E8 ; Segment type: Pure code
.text:000039E8 ; Segment permissions: Read/Execute
.text:000039E8 _text           segment para public 'CODE' use32
.text:000039E8                 assume cs:_text
.text:000039E8                 ;org 39E8h
.text:000039E8 ; COMDAT (pick any)
.text:000039E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000039E8
.text:000039E8 ; =============== S U B R O U T I N E =======================================
.text:000039E8
.text:000039E8 ; Attributes: bp-based frame
.text:000039E8
.text:000039E8 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:000039E8                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:000039E8 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:000039E8                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+344p
.text:000039E8                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+52Dp ...
.text:000039E8
.text:000039E8 var_4           = dword ptr -4
.text:000039E8
.text:000039E8                 push    ebp
.text:000039E9                 mov     ebp, esp
.text:000039EB                 push    ecx
.text:000039EC                 push    esi
.text:000039ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039F4                 mov     [ebp+var_4], ecx
.text:000039F7                 mov     eax, [ebp+var_4]
.text:000039FA                 cmp     dword ptr [eax], 0
.text:000039FD                 jz      short loc_3A1A
.text:000039FF                 mov     ecx, [ebp+var_4]
.text:00003A02                 mov     edx, [ecx]
.text:00003A04                 mov     eax, [ebp+var_4]
.text:00003A07                 mov     ecx, [eax]
.text:00003A09                 mov     edx, [edx]
.text:00003A0B                 mov     esi, esp
.text:00003A0D                 push    ecx
.text:00003A0E                 mov     eax, [edx+8]
.text:00003A11                 call    eax
.text:00003A13                 cmp     esi, esp
.text:00003A15                 call    __RTC_CheckEsp
.text:00003A1A
.text:00003A1A loc_3A1A:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:00003A1A                 pop     esi
.text:00003A1B                 add     esp, 4
.text:00003A1E                 cmp     ebp, esp
.text:00003A20                 call    __RTC_CheckEsp
.text:00003A25                 mov     esp, ebp
.text:00003A27                 pop     ebp
.text:00003A28                 retn
.text:00003A28 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00003A28
.text:00003A28 ; ---------------------------------------------------------------------------
.text:00003A29                 align 4
.text:00003A29 _text           ends
.text:00003A29
.text:00003A2C ; ===========================================================================
.text:00003A2C
.text:00003A2C ; Segment type: Pure code
.text:00003A2C ; Segment permissions: Read/Execute
.text:00003A2C _text           segment para public 'CODE' use32
.text:00003A2C                 assume cs:_text
.text:00003A2C                 ;org 3A2Ch
.text:00003A2C ; COMDAT (pick any)
.text:00003A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003A2C
.text:00003A2C ; =============== S U B R O U T I N E =======================================
.text:00003A2C
.text:00003A2C ; Attributes: bp-based frame
.text:00003A2C
.text:00003A2C ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator->(void)const
.text:00003A2C                 public ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:00003A2C ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:00003A2C                                         ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+1CBp
.text:00003A2C
.text:00003A2C var_4           = dword ptr -4
.text:00003A2C
.text:00003A2C                 push    ebp
.text:00003A2D                 mov     ebp, esp
.text:00003A2F                 push    ecx
.text:00003A30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A37                 mov     [ebp+var_4], ecx
.text:00003A3A                 mov     eax, [ebp+var_4]
.text:00003A3D                 mov     eax, [eax]
.text:00003A3F                 mov     esp, ebp
.text:00003A41                 pop     ebp
.text:00003A42                 retn
.text:00003A42 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:00003A42
.text:00003A42 ; ---------------------------------------------------------------------------
.text:00003A43                 align 4
.text:00003A43 _text           ends
.text:00003A43
.text:00003A44 ; ===========================================================================
.text:00003A44
.text:00003A44 ; Segment type: Pure code
.text:00003A44 ; Segment permissions: Read/Execute
.text:00003A44 _text           segment para public 'CODE' use32
.text:00003A44                 assume cs:_text
.text:00003A44                 ;org 3A44h
.text:00003A44 ; COMDAT (pick any)
.text:00003A44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003A44
.text:00003A44 ; =============== S U B R O U T I N E =======================================
.text:00003A44
.text:00003A44 ; Attributes: bp-based frame
.text:00003A44
.text:00003A44 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::CMyComPtr<struct IArchiveUpdateCallbackFile>(void)
.text:00003A44                 public ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
.text:00003A44 ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ proc near
.text:00003A44                                         ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+309p
.text:00003A44
.text:00003A44 var_4           = dword ptr -4
.text:00003A44
.text:00003A44                 push    ebp
.text:00003A45                 mov     ebp, esp
.text:00003A47                 push    ecx
.text:00003A48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A4F                 mov     [ebp+var_4], ecx
.text:00003A52                 mov     eax, [ebp+var_4]
.text:00003A55                 mov     dword ptr [eax], 0
.text:00003A5B                 mov     eax, [ebp+var_4]
.text:00003A5E                 mov     esp, ebp
.text:00003A60                 pop     ebp
.text:00003A61                 retn
.text:00003A61 ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ endp
.text:00003A61
.text:00003A61 ; ---------------------------------------------------------------------------
.text:00003A62                 align 4
.text:00003A62 _text           ends
.text:00003A62
.text:00003A64 ; ===========================================================================
.text:00003A64
.text:00003A64 ; Segment type: Pure code
.text:00003A64 ; Segment permissions: Read/Execute
.text:00003A64 _text           segment para public 'CODE' use32
.text:00003A64                 assume cs:_text
.text:00003A64                 ;org 3A64h
.text:00003A64 ; COMDAT (pick any)
.text:00003A64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003A64
.text:00003A64 ; =============== S U B R O U T I N E =======================================
.text:00003A64
.text:00003A64 ; Attributes: bp-based frame
.text:00003A64
.text:00003A64 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::~CMyComPtr<struct IArchiveUpdateCallbackFile>(void)
.text:00003A64                 public ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
.text:00003A64 ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ proc near
.text:00003A64                                         ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3DAp
.text:00003A64                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+48Ap ...
.text:00003A64
.text:00003A64 var_4           = dword ptr -4
.text:00003A64
.text:00003A64                 push    ebp
.text:00003A65                 mov     ebp, esp
.text:00003A67                 push    ecx
.text:00003A68                 push    esi
.text:00003A69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A70                 mov     [ebp+var_4], ecx
.text:00003A73                 mov     eax, [ebp+var_4]
.text:00003A76                 cmp     dword ptr [eax], 0
.text:00003A79                 jz      short loc_3A96
.text:00003A7B                 mov     ecx, [ebp+var_4]
.text:00003A7E                 mov     edx, [ecx]
.text:00003A80                 mov     eax, [ebp+var_4]
.text:00003A83                 mov     ecx, [eax]
.text:00003A85                 mov     edx, [edx]
.text:00003A87                 mov     esi, esp
.text:00003A89                 push    ecx
.text:00003A8A                 mov     eax, [edx+8]
.text:00003A8D                 call    eax
.text:00003A8F                 cmp     esi, esp
.text:00003A91                 call    __RTC_CheckEsp
.text:00003A96
.text:00003A96 loc_3A96:                               ; CODE XREF: CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)+15j
.text:00003A96                 pop     esi
.text:00003A97                 add     esp, 4
.text:00003A9A                 cmp     ebp, esp
.text:00003A9C                 call    __RTC_CheckEsp
.text:00003AA1                 mov     esp, ebp
.text:00003AA3                 pop     ebp
.text:00003AA4                 retn
.text:00003AA4 ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ endp
.text:00003AA4
.text:00003AA4 ; ---------------------------------------------------------------------------
.text:00003AA5                 align 4
.text:00003AA5 _text           ends
.text:00003AA5
.text:00003AA8 ; ===========================================================================
.text:00003AA8
.text:00003AA8 ; Segment type: Pure code
.text:00003AA8 ; Segment permissions: Read/Execute
.text:00003AA8 _text           segment para public 'CODE' use32
.text:00003AA8                 assume cs:_text
.text:00003AA8                 ;org 3AA8h
.text:00003AA8 ; COMDAT (pick any)
.text:00003AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003AA8
.text:00003AA8 ; =============== S U B R O U T I N E =======================================
.text:00003AA8
.text:00003AA8 ; Attributes: bp-based frame
.text:00003AA8
.text:00003AA8 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator struct IArchiveUpdateCallbackFile *(void)const
.text:00003AA8                 public ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
.text:00003AA8 ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:00003AA8                                         ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+351p
.text:00003AA8
.text:00003AA8 var_4           = dword ptr -4
.text:00003AA8
.text:00003AA8                 push    ebp
.text:00003AA9                 mov     ebp, esp
.text:00003AAB                 push    ecx
.text:00003AAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003AB3                 mov     [ebp+var_4], ecx
.text:00003AB6                 mov     eax, [ebp+var_4]
.text:00003AB9                 mov     eax, [eax]
.text:00003ABB                 mov     esp, ebp
.text:00003ABD                 pop     ebp
.text:00003ABE                 retn
.text:00003ABE ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ endp
.text:00003ABE
.text:00003ABE ; ---------------------------------------------------------------------------
.text:00003ABF                 align 10h
.text:00003ABF _text           ends
.text:00003ABF
.text:00003AC0 ; ===========================================================================
.text:00003AC0
.text:00003AC0 ; Segment type: Pure code
.text:00003AC0 ; Segment permissions: Read/Execute
.text:00003AC0 _text           segment para public 'CODE' use32
.text:00003AC0                 assume cs:_text
.text:00003AC0                 ;org 3AC0h
.text:00003AC0 ; COMDAT (pick any)
.text:00003AC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003AC0
.text:00003AC0 ; =============== S U B R O U T I N E =======================================
.text:00003AC0
.text:00003AC0 ; Attributes: bp-based frame
.text:00003AC0
.text:00003AC0 ; public: struct IArchiveUpdateCallbackFile * * __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator&(void)
.text:00003AC0                 public ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ
.text:00003AC0 ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:00003AC0                                         ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+31Ep
.text:00003AC0
.text:00003AC0 var_4           = dword ptr -4
.text:00003AC0
.text:00003AC0                 push    ebp
.text:00003AC1                 mov     ebp, esp
.text:00003AC3                 push    ecx
.text:00003AC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003ACB                 mov     [ebp+var_4], ecx
.text:00003ACE                 mov     eax, [ebp+var_4]
.text:00003AD1                 mov     esp, ebp
.text:00003AD3                 pop     ebp
.text:00003AD4                 retn
.text:00003AD4 ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ endp
.text:00003AD4
.text:00003AD4 ; ---------------------------------------------------------------------------
.text:00003AD5                 align 4
.text:00003AD5 _text           ends
.text:00003AD5
.text:00003AD8 ; ===========================================================================
.text:00003AD8
.text:00003AD8 ; Segment type: Pure code
.text:00003AD8 ; Segment permissions: Read/Execute
.text:00003AD8 _text           segment para public 'CODE' use32
.text:00003AD8                 assume cs:_text
.text:00003AD8                 ;org 3AD8h
.text:00003AD8 ; COMDAT (pick any)
.text:00003AD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003AD8
.text:00003AD8 ; =============== S U B R O U T I N E =======================================
.text:00003AD8
.text:00003AD8 ; Attributes: bp-based frame
.text:00003AD8
.text:00003AD8 ; public: struct IArchiveUpdateCallbackFile * __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator->(void)const
.text:00003AD8                 public ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
.text:00003AD8 ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:00003AD8                                         ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+36Fp
.text:00003AD8
.text:00003AD8 var_4           = dword ptr -4
.text:00003AD8
.text:00003AD8                 push    ebp
.text:00003AD9                 mov     ebp, esp
.text:00003ADB                 push    ecx
.text:00003ADC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003AE3                 mov     [ebp+var_4], ecx
.text:00003AE6                 mov     eax, [ebp+var_4]
.text:00003AE9                 mov     eax, [eax]
.text:00003AEB                 mov     esp, ebp
.text:00003AED                 pop     ebp
.text:00003AEE                 retn
.text:00003AEE ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ endp
.text:00003AEE
.text:00003AEE ; ---------------------------------------------------------------------------
.text:00003AEF                 align 10h
.text:00003AEF _text           ends
.text:00003AEF
.text:00003AF0 ; ===========================================================================
.text:00003AF0
.text:00003AF0 ; Segment type: Pure code
.text:00003AF0 ; Segment permissions: Read/Execute
.text:00003AF0 _text           segment para public 'CODE' use32
.text:00003AF0                 assume cs:_text
.text:00003AF0                 ;org 3AF0h
.text:00003AF0 ; COMDAT (pick any)
.text:00003AF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003AF0
.text:00003AF0 ; =============== S U B R O U T I N E =======================================
.text:00003AF0
.text:00003AF0 ; Attributes: bp-based frame
.text:00003AF0
.text:00003AF0 ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:00003AF0                 public ??_GCProp@@QAEPAXI@Z
.text:00003AF0 ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:00003AF0
.text:00003AF0 var_4           = dword ptr -4
.text:00003AF0 arg_0           = dword ptr  8
.text:00003AF0
.text:00003AF0                 push    ebp
.text:00003AF1                 mov     ebp, esp
.text:00003AF3                 push    ecx
.text:00003AF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003AFB                 mov     [ebp+var_4], ecx
.text:00003AFE                 mov     ecx, [ebp+var_4] ; this
.text:00003B01                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:00003B06                 mov     eax, [ebp+arg_0]
.text:00003B09                 and     eax, 1
.text:00003B0C                 jz      short loc_3B1A
.text:00003B0E                 mov     ecx, [ebp+var_4]
.text:00003B11                 push    ecx             ; void *
.text:00003B12                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003B17                 add     esp, 4
.text:00003B1A
.text:00003B1A loc_3B1A:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:00003B1A                 mov     eax, [ebp+var_4]
.text:00003B1D                 add     esp, 4
.text:00003B20                 cmp     ebp, esp
.text:00003B22                 call    __RTC_CheckEsp
.text:00003B27                 mov     esp, ebp
.text:00003B29                 pop     ebp
.text:00003B2A                 retn    4
.text:00003B2A ??_GCProp@@QAEPAXI@Z endp
.text:00003B2A
.text:00003B2A ; ---------------------------------------------------------------------------
.text:00003B2D                 align 10h
.text:00003B2D _text           ends
.text:00003B2D
.text:00003B30 ; ===========================================================================
.text:00003B30
.text:00003B30 ; Segment type: Pure code
.text:00003B30 ; Segment permissions: Read/Execute
.text:00003B30 _text           segment para public 'CODE' use32
.text:00003B30                 assume cs:_text
.text:00003B30                 ;org 3B30h
.text:00003B30 ; COMDAT (pick any)
.text:00003B30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003B30
.text:00003B30 ; =============== S U B R O U T I N E =======================================
.text:00003B30
.text:00003B30 ; Attributes: bp-based frame
.text:00003B30
.text:00003B30 ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:00003B30                 public ??1CProp@@QAE@XZ
.text:00003B30 ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:00003B30
.text:00003B30 var_4           = dword ptr -4
.text:00003B30
.text:00003B30                 push    ebp
.text:00003B31                 mov     ebp, esp
.text:00003B33                 push    ecx
.text:00003B34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B3B                 mov     [ebp+var_4], ecx
.text:00003B3E                 mov     ecx, [ebp+var_4]
.text:00003B41                 add     ecx, 8          ; this
.text:00003B44                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00003B49                 add     esp, 4
.text:00003B4C                 cmp     ebp, esp
.text:00003B4E                 call    __RTC_CheckEsp
.text:00003B53                 mov     esp, ebp
.text:00003B55                 pop     ebp
.text:00003B56                 retn
.text:00003B56 ??1CProp@@QAE@XZ endp
.text:00003B56
.text:00003B56 ; ---------------------------------------------------------------------------
.text:00003B57                 align 4
.text:00003B57 _text           ends
.text:00003B57
.text:00003B58 ; ===========================================================================
.text:00003B58
.text:00003B58 ; Segment type: Pure code
.text:00003B58 ; Segment permissions: Read/Execute
.text:00003B58 _text           segment para public 'CODE' use32
.text:00003B58                 assume cs:_text
.text:00003B58                 ;org 3B58h
.text:00003B58 ; COMDAT (pick any)
.text:00003B58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003B58
.text:00003B58 ; =============== S U B R O U T I N E =======================================
.text:00003B58
.text:00003B58 ; Attributes: bp-based frame
.text:00003B58
.text:00003B58 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00003B58                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00003B58 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00003B58                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(void)+11p
.text:00003B58
.text:00003B58 var_4           = dword ptr -4
.text:00003B58
.text:00003B58                 push    ebp
.text:00003B59                 mov     ebp, esp
.text:00003B5B                 push    ecx
.text:00003B5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B63                 mov     [ebp+var_4], ecx
.text:00003B66                 mov     eax, [ebp+var_4]
.text:00003B69                 mov     dword ptr [eax], 0
.text:00003B6F                 mov     ecx, [ebp+var_4]
.text:00003B72                 mov     dword ptr [ecx+4], 0
.text:00003B79                 mov     edx, [ebp+var_4]
.text:00003B7C                 mov     dword ptr [edx+8], 0
.text:00003B83                 mov     eax, [ebp+var_4]
.text:00003B86                 mov     esp, ebp
.text:00003B88                 pop     ebp
.text:00003B89                 retn
.text:00003B89 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00003B89
.text:00003B89 ; ---------------------------------------------------------------------------
.text:00003B8A                 align 4
.text:00003B8A _text           ends
.text:00003B8A
.text:00003B8C ; ===========================================================================
.text:00003B8C
.text:00003B8C ; Segment type: Pure code
.text:00003B8C ; Segment permissions: Read/Execute
.text:00003B8C _text           segment para public 'CODE' use32
.text:00003B8C                 assume cs:_text
.text:00003B8C                 ;org 3B8Ch
.text:00003B8C ; COMDAT (pick any)
.text:00003B8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003B8C
.text:00003B8C ; =============== S U B R O U T I N E =======================================
.text:00003B8C
.text:00003B8C ; Attributes: bp-based frame
.text:00003B8C
.text:00003B8C ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00003B8C                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00003B8C ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00003B8C                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+46p
.text:00003B8C
.text:00003B8C var_4           = dword ptr -4
.text:00003B8C
.text:00003B8C                 push    ebp
.text:00003B8D                 mov     ebp, esp
.text:00003B8F                 push    ecx
.text:00003B90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B97                 mov     [ebp+var_4], ecx
.text:00003B9A                 mov     eax, [ebp+var_4]
.text:00003B9D                 mov     eax, [eax+4]
.text:00003BA0                 mov     esp, ebp
.text:00003BA2                 pop     ebp
.text:00003BA3                 retn
.text:00003BA3 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00003BA3
.text:00003BA3 _text           ends
.text:00003BA3
.text:00003BA4 ; ===========================================================================
.text:00003BA4
.text:00003BA4 ; Segment type: Pure code
.text:00003BA4 ; Segment permissions: Read/Execute
.text:00003BA4 _text           segment para public 'CODE' use32
.text:00003BA4                 assume cs:_text
.text:00003BA4                 ;org 3BA4h
.text:00003BA4 ; COMDAT (pick any)
.text:00003BA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003BA4
.text:00003BA4 ; =============== S U B R O U T I N E =======================================
.text:00003BA4
.text:00003BA4 ; Attributes: bp-based frame
.text:00003BA4
.text:00003BA4 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00003BA4                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00003BA4 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00003BA4                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+9Cp
.text:00003BA4                                         ; __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0+3j
.text:00003BA4
.text:00003BA4 var_8           = dword ptr -8
.text:00003BA4 var_4           = dword ptr -4
.text:00003BA4
.text:00003BA4                 push    ebp
.text:00003BA5                 mov     ebp, esp
.text:00003BA7                 sub     esp, 8
.text:00003BAA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003BB1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003BB8                 mov     [ebp+var_4], ecx
.text:00003BBB                 mov     eax, [ebp+var_4]
.text:00003BBE                 mov     ecx, [eax]
.text:00003BC0                 mov     [ebp+var_8], ecx
.text:00003BC3                 mov     edx, [ebp+var_8]
.text:00003BC6                 push    edx             ; void *
.text:00003BC7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003BCC                 add     esp, 4
.text:00003BCF                 add     esp, 8
.text:00003BD2                 cmp     ebp, esp
.text:00003BD4                 call    __RTC_CheckEsp
.text:00003BD9                 mov     esp, ebp
.text:00003BDB                 pop     ebp
.text:00003BDC                 retn
.text:00003BDC ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00003BDC
.text:00003BDC ; ---------------------------------------------------------------------------
.text:00003BDD                 align 10h
.text:00003BDD _text           ends
.text:00003BDD
.text:00003BE0 ; ===========================================================================
.text:00003BE0
.text:00003BE0 ; Segment type: Pure code
.text:00003BE0 ; Segment permissions: Read/Execute
.text:00003BE0 _text           segment para public 'CODE' use32
.text:00003BE0                 assume cs:_text
.text:00003BE0                 ;org 3BE0h
.text:00003BE0 ; COMDAT (pick any)
.text:00003BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003BE0
.text:00003BE0 ; =============== S U B R O U T I N E =======================================
.text:00003BE0
.text:00003BE0 ; Attributes: bp-based frame
.text:00003BE0
.text:00003BE0 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00003BE0                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00003BE0 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00003BE0                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p
.text:00003BE0
.text:00003BE0 var_4           = dword ptr -4
.text:00003BE0 arg_0           = dword ptr  8
.text:00003BE0
.text:00003BE0                 push    ebp
.text:00003BE1                 mov     ebp, esp
.text:00003BE3                 push    ecx
.text:00003BE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003BEB                 mov     [ebp+var_4], ecx
.text:00003BEE                 mov     eax, [ebp+var_4]
.text:00003BF1                 mov     ecx, [eax]
.text:00003BF3                 mov     edx, [ebp+arg_0]
.text:00003BF6                 lea     eax, [ecx+edx*4]
.text:00003BF9                 mov     esp, ebp
.text:00003BFB                 pop     ebp
.text:00003BFC                 retn    4
.text:00003BFC ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00003BFC
.text:00003BFC ; ---------------------------------------------------------------------------
.text:00003BFF                 align 10h
.text:00003BFF _text           ends
.text:00003BFF
.text:00003C00 ; ===========================================================================
.text:00003C00
.text:00003C00 ; Segment type: Pure code
.text:00003C00 ; Segment permissions: Read/Execute
.text:00003C00 _text           segment para public 'CODE' use32
.text:00003C00                 assume cs:_text
.text:00003C00                 ;org 3C00h
.text:00003C00 ; COMDAT (pick any)
.text:00003C00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C00
.text:00003C00 ; =============== S U B R O U T I N E =======================================
.text:00003C00
.text:00003C00
.text:00003C00 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NBz2::CHandler::AddRef`adjustor{12}' (void)
.text:00003C00                 public ?AddRef@CHandler@NBz2@NArchive@@WM@AGKXZ
.text:00003C00 ?AddRef@CHandler@NBz2@NArchive@@WM@AGKXZ proc near
.text:00003C00                                         ; DATA XREF: .rdata:0000267Co
.text:00003C00
.text:00003C00 arg_0           = dword ptr  4
.text:00003C00
.text:00003C00                 sub     [esp+arg_0], 0Ch
.text:00003C05                 jmp     ?AddRef@CHandler@NBz2@NArchive@@UAGKXZ ; NArchive::NBz2::CHandler::AddRef(void)
.text:00003C05 ?AddRef@CHandler@NBz2@NArchive@@WM@AGKXZ endp
.text:00003C05
.text:00003C05 ; ---------------------------------------------------------------------------
.text:00003C0A                 align 4
.text:00003C0A _text           ends
.text:00003C0A
.text:00003C0C ; ===========================================================================
.text:00003C0C
.text:00003C0C ; Segment type: Pure code
.text:00003C0C ; Segment permissions: Read/Execute
.text:00003C0C _text           segment para public 'CODE' use32
.text:00003C0C                 assume cs:_text
.text:00003C0C                 ;org 3C0Ch
.text:00003C0C ; COMDAT (pick any)
.text:00003C0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C0C
.text:00003C0C ; =============== S U B R O U T I N E =======================================
.text:00003C0C
.text:00003C0C
.text:00003C0C ; [thunk]:public: virtual long __stdcall NArchive::NBz2::CHandler::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00003C0C                 public ?QueryInterface@CHandler@NBz2@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.text:00003C0C ?QueryInterface@CHandler@NBz2@NArchive@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00003C0C                                         ; DATA XREF: .rdata:const NArchive::NBz2::CHandler::`vftable'{for `IOutArchive'}o
.text:00003C0C
.text:00003C0C arg_0           = dword ptr  4
.text:00003C0C
.text:00003C0C                 sub     [esp+arg_0], 8
.text:00003C11                 jmp     ?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)
.text:00003C11 ?QueryInterface@CHandler@NBz2@NArchive@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00003C11
.text:00003C11 ; ---------------------------------------------------------------------------
.text:00003C16                 align 4
.text:00003C16 _text           ends
.text:00003C16
.text:00003C18 ; ===========================================================================
.text:00003C18
.text:00003C18 ; Segment type: Pure code
.text:00003C18 ; Segment permissions: Read/Execute
.text:00003C18 _text           segment para public 'CODE' use32
.text:00003C18                 assume cs:_text
.text:00003C18                 ;org 3C18h
.text:00003C18 ; COMDAT (pick any)
.text:00003C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C18
.text:00003C18 ; =============== S U B R O U T I N E =======================================
.text:00003C18
.text:00003C18
.text:00003C18 ; [thunk]:public: virtual long __stdcall NArchive::NBz2::CHandler::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00003C18                 public ?QueryInterface@CHandler@NBz2@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
.text:00003C18 ?QueryInterface@CHandler@NBz2@NArchive@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00003C18                                         ; DATA XREF: .rdata:const NArchive::NBz2::CHandler::`vftable'{for `ISetProperties'}o
.text:00003C18
.text:00003C18 arg_0           = dword ptr  4
.text:00003C18
.text:00003C18                 sub     [esp+arg_0], 0Ch
.text:00003C1D                 jmp     ?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)
.text:00003C1D ?QueryInterface@CHandler@NBz2@NArchive@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00003C1D
.text:00003C1D ; ---------------------------------------------------------------------------
.text:00003C22                 align 4
.text:00003C22 _text           ends
.text:00003C22
.text:00003C24 ; ===========================================================================
.text:00003C24
.text:00003C24 ; Segment type: Pure code
.text:00003C24 ; Segment permissions: Read/Execute
.text:00003C24 _text           segment para public 'CODE' use32
.text:00003C24                 assume cs:_text
.text:00003C24                 ;org 3C24h
.text:00003C24 ; COMDAT (pick any)
.text:00003C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C24
.text:00003C24 ; =============== S U B R O U T I N E =======================================
.text:00003C24
.text:00003C24
.text:00003C24 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NBz2::CHandler::Release`adjustor{4}' (void)
.text:00003C24                 public ?Release@CHandler@NBz2@NArchive@@W3AGKXZ
.text:00003C24 ?Release@CHandler@NBz2@NArchive@@W3AGKXZ proc near
.text:00003C24                                         ; DATA XREF: .rdata:000026ACo
.text:00003C24
.text:00003C24 arg_0           = dword ptr  4
.text:00003C24
.text:00003C24                 sub     [esp+arg_0], 4
.text:00003C29                 jmp     ?Release@CHandler@NBz2@NArchive@@UAGKXZ ; NArchive::NBz2::CHandler::Release(void)
.text:00003C29 ?Release@CHandler@NBz2@NArchive@@W3AGKXZ endp
.text:00003C29
.text:00003C29 ; ---------------------------------------------------------------------------
.text:00003C2E                 align 10h
.text:00003C2E _text           ends
.text:00003C2E
.text:00003C30 ; ===========================================================================
.text:00003C30
.text:00003C30 ; Segment type: Pure code
.text:00003C30 ; Segment permissions: Read/Execute
.text:00003C30 _text           segment para public 'CODE' use32
.text:00003C30                 assume cs:_text
.text:00003C30                 ;org 3C30h
.text:00003C30 ; COMDAT (pick any)
.text:00003C30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C30
.text:00003C30 ; =============== S U B R O U T I N E =======================================
.text:00003C30
.text:00003C30
.text:00003C30 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NBz2::CHandler::Release`adjustor{8}' (void)
.text:00003C30                 public ?Release@CHandler@NBz2@NArchive@@W7AGKXZ
.text:00003C30 ?Release@CHandler@NBz2@NArchive@@W7AGKXZ proc near
.text:00003C30                                         ; DATA XREF: .rdata:00002694o
.text:00003C30
.text:00003C30 arg_0           = dword ptr  4
.text:00003C30
.text:00003C30                 sub     [esp+arg_0], 8
.text:00003C35                 jmp     ?Release@CHandler@NBz2@NArchive@@UAGKXZ ; NArchive::NBz2::CHandler::Release(void)
.text:00003C35 ?Release@CHandler@NBz2@NArchive@@W7AGKXZ endp
.text:00003C35
.text:00003C35 ; ---------------------------------------------------------------------------
.text:00003C3A                 align 4
.text:00003C3A _text           ends
.text:00003C3A
.text:00003C3C ; ===========================================================================
.text:00003C3C
.text:00003C3C ; Segment type: Pure code
.text:00003C3C ; Segment permissions: Read/Execute
.text:00003C3C _text           segment para public 'CODE' use32
.text:00003C3C                 assume cs:_text
.text:00003C3C                 ;org 3C3Ch
.text:00003C3C ; COMDAT (pick any)
.text:00003C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C3C
.text:00003C3C ; =============== S U B R O U T I N E =======================================
.text:00003C3C
.text:00003C3C
.text:00003C3C ; [thunk]:public: virtual unsigned long __stdcall NArchive::NBz2::CHandler::Release`adjustor{12}' (void)
.text:00003C3C                 public ?Release@CHandler@NBz2@NArchive@@WM@AGKXZ
.text:00003C3C ?Release@CHandler@NBz2@NArchive@@WM@AGKXZ proc near
.text:00003C3C                                         ; DATA XREF: .rdata:00002680o
.text:00003C3C
.text:00003C3C arg_0           = dword ptr  4
.text:00003C3C
.text:00003C3C                 sub     [esp+arg_0], 0Ch
.text:00003C41                 jmp     ?Release@CHandler@NBz2@NArchive@@UAGKXZ ; NArchive::NBz2::CHandler::Release(void)
.text:00003C41 ?Release@CHandler@NBz2@NArchive@@WM@AGKXZ endp
.text:00003C41
.text:00003C41 ; ---------------------------------------------------------------------------
.text:00003C46                 align 4
.text:00003C46 _text           ends
.text:00003C46
.text:00003C48 ; ===========================================================================
.text:00003C48
.text:00003C48 ; Segment type: Pure code
.text:00003C48 ; Segment permissions: Read/Execute
.text:00003C48 _text           segment para public 'CODE' use32
.text:00003C48                 assume cs:_text
.text:00003C48                 ;org 3C48h
.text:00003C48 ; COMDAT (pick any)
.text:00003C48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C48
.text:00003C48 ; =============== S U B R O U T I N E =======================================
.text:00003C48
.text:00003C48
.text:00003C48 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NBz2::CHandler::AddRef`adjustor{4}' (void)
.text:00003C48                 public ?AddRef@CHandler@NBz2@NArchive@@W3AGKXZ
.text:00003C48 ?AddRef@CHandler@NBz2@NArchive@@W3AGKXZ proc near
.text:00003C48                                         ; DATA XREF: .rdata:000026A8o
.text:00003C48
.text:00003C48 arg_0           = dword ptr  4
.text:00003C48
.text:00003C48                 sub     [esp+arg_0], 4
.text:00003C4D                 jmp     ?AddRef@CHandler@NBz2@NArchive@@UAGKXZ ; NArchive::NBz2::CHandler::AddRef(void)
.text:00003C4D ?AddRef@CHandler@NBz2@NArchive@@W3AGKXZ endp
.text:00003C4D
.text:00003C4D ; ---------------------------------------------------------------------------
.text:00003C52                 align 4
.text:00003C52 _text           ends
.text:00003C52
.text:00003C54 ; ===========================================================================
.text:00003C54
.text:00003C54 ; Segment type: Pure code
.text:00003C54 ; Segment permissions: Read/Execute
.text:00003C54 _text           segment para public 'CODE' use32
.text:00003C54                 assume cs:_text
.text:00003C54                 ;org 3C54h
.text:00003C54 ; COMDAT (pick any)
.text:00003C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C54
.text:00003C54 ; =============== S U B R O U T I N E =======================================
.text:00003C54
.text:00003C54
.text:00003C54 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NBz2::CHandler::AddRef`adjustor{8}' (void)
.text:00003C54                 public ?AddRef@CHandler@NBz2@NArchive@@W7AGKXZ
.text:00003C54 ?AddRef@CHandler@NBz2@NArchive@@W7AGKXZ proc near
.text:00003C54                                         ; DATA XREF: .rdata:00002690o
.text:00003C54
.text:00003C54 arg_0           = dword ptr  4
.text:00003C54
.text:00003C54                 sub     [esp+arg_0], 8
.text:00003C59                 jmp     ?AddRef@CHandler@NBz2@NArchive@@UAGKXZ ; NArchive::NBz2::CHandler::AddRef(void)
.text:00003C59 ?AddRef@CHandler@NBz2@NArchive@@W7AGKXZ endp
.text:00003C59
.text:00003C59 ; ---------------------------------------------------------------------------
.text:00003C5E                 align 10h
.text:00003C5E _text           ends
.text:00003C5E
.text:00003C60 ; ===========================================================================
.text:00003C60
.text:00003C60 ; Segment type: Pure code
.text:00003C60 ; Segment permissions: Read/Execute
.text:00003C60 _text           segment para public 'CODE' use32
.text:00003C60                 assume cs:_text
.text:00003C60                 ;org 3C60h
.text:00003C60 ; COMDAT (pick any)
.text:00003C60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C60
.text:00003C60 ; =============== S U B R O U T I N E =======================================
.text:00003C60
.text:00003C60
.text:00003C60 ; [thunk]:public: virtual long __stdcall NArchive::NBz2::CHandler::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00003C60                 public ?QueryInterface@CHandler@NBz2@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.text:00003C60 ?QueryInterface@CHandler@NBz2@NArchive@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00003C60                                         ; DATA XREF: .rdata:const NArchive::NBz2::CHandler::`vftable'{for `IArchiveOpenSeq'}o
.text:00003C60
.text:00003C60 arg_0           = dword ptr  4
.text:00003C60
.text:00003C60                 sub     [esp+arg_0], 4
.text:00003C65                 jmp     ?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)
.text:00003C65 ?QueryInterface@CHandler@NBz2@NArchive@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00003C65
.text:00003C65 ; ---------------------------------------------------------------------------
.text:00003C6A                 align 4
.text:00003C6A _text           ends
.text:00003C6A
.text$yc:00003C6C ; ===========================================================================
.text$yc:00003C6C
.text$yc:00003C6C ; Segment type: Pure code
.text$yc:00003C6C ; Segment permissions: Read/Execute
.text$yc:00003C6C _text$yc        segment para public 'CODE' use32
.text$yc:00003C6C                 assume cs:_text$yc
.text$yc:00003C6C                 ;org 3C6Ch
.text$yc:00003C6C ; COMDAT (pick any)
.text$yc:00003C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00003C6C
.text$yc:00003C6C ; =============== S U B R O U T I N E =======================================
.text$yc:00003C6C
.text$yc:00003C6C ; Attributes: bp-based frame
.text$yc:00003C6C
.text$yc:00003C6C ; void __cdecl NArchive::NBz2::`dynamic initializer for 'g_RegisterArc''(void)
.text$yc:00003C6C ??__Eg_RegisterArc@NBz2@NArchive@@YAXXZ proc near
.text$yc:00003C6C                                         ; DATA XREF: .CRT$XCU:_g_RegisterArc$initializer$o
.text$yc:00003C6C                 push    ebp
.text$yc:00003C6D                 mov     ebp, esp
.text$yc:00003C6F                 mov     ecx, offset _g_RegisterArc ; this
.text$yc:00003C74                 call    ??0CRegisterArc@NBz2@NArchive@@QAE@XZ ; NArchive::NBz2::CRegisterArc::CRegisterArc(void)
.text$yc:00003C79                 cmp     ebp, esp
.text$yc:00003C7B                 call    __RTC_CheckEsp
.text$yc:00003C80                 pop     ebp
.text$yc:00003C81                 retn
.text$yc:00003C81 ??__Eg_RegisterArc@NBz2@NArchive@@YAXXZ endp
.text$yc:00003C81
.text$yc:00003C81 ; ---------------------------------------------------------------------------
.text$yc:00003C82                 align 4
.text$yc:00003C82 _text$yc        ends
.text$yc:00003C82
.text:00003C84 ; ===========================================================================
.text:00003C84
.text:00003C84 ; Segment type: Pure code
.text:00003C84 ; Segment permissions: Read/Execute
.text:00003C84 _text           segment para public 'CODE' use32
.text:00003C84                 assume cs:_text
.text:00003C84                 ;org 3C84h
.text:00003C84 ; COMDAT (pick any)
.text:00003C84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C84
.text:00003C84 ; =============== S U B R O U T I N E =======================================
.text:00003C84
.text:00003C84 ; Attributes: bp-based frame
.text:00003C84
.text:00003C84 ; _DWORD __thiscall NArchive::NBz2::CRegisterArc::CRegisterArc(NArchive::NBz2::CRegisterArc *__hidden this)
.text:00003C84                 public ??0CRegisterArc@NBz2@NArchive@@QAE@XZ
.text:00003C84 ??0CRegisterArc@NBz2@NArchive@@QAE@XZ proc near
.text:00003C84                                         ; CODE XREF: NArchive::NBz2::`dynamic initializer for 'g_RegisterArc''(void)+8p
.text:00003C84
.text:00003C84 var_4           = dword ptr -4
.text:00003C84
.text:00003C84                 push    ebp
.text:00003C85                 mov     ebp, esp
.text:00003C87                 push    ecx
.text:00003C88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C8F                 mov     [ebp+var_4], ecx
.text:00003C92                 push    offset _g_ArcInfo ; struct CArcInfo *
.text:00003C97                 call    ?RegisterArc@@YGXPBUCArcInfo@@@Z ; RegisterArc(CArcInfo const *)
.text:00003C9C                 mov     eax, [ebp+var_4]
.text:00003C9F                 add     esp, 4
.text:00003CA2                 cmp     ebp, esp
.text:00003CA4                 call    __RTC_CheckEsp
.text:00003CA9                 mov     esp, ebp
.text:00003CAB                 pop     ebp
.text:00003CAC                 retn
.text:00003CAC ??0CRegisterArc@NBz2@NArchive@@QAE@XZ endp
.text:00003CAC
.text:00003CAC ; ---------------------------------------------------------------------------
.text:00003CAD                 align 10h
.text:00003CAD _text           ends
.text:00003CAD
.bss:00003CB0 ; ===========================================================================
.bss:00003CB0
.bss:00003CB0 ; Segment type: Uninitialized
.bss:00003CB0 ; Segment permissions: Read/Write
.bss:00003CB0 _bss            segment byte public 'BSS' use32
.bss:00003CB0                 assume cs:_bss
.bss:00003CB0                 ;org 3CB0h
.bss:00003CB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00003CB0 ; NArchive::NBz2::CRegisterArc g_RegisterArc
.bss:00003CB0 _g_RegisterArc  db    ? ;               ; DATA XREF: NArchive::NBz2::`dynamic initializer for 'g_RegisterArc''(void)+3o
.bss:00003CB1                 align 4
.bss:00003CB1 _bss            ends
.bss:00003CB1
.CRT$XCU:00003CB4 ; ===========================================================================
.CRT$XCU:00003CB4
.CRT$XCU:00003CB4 ; Segment type: Pure data
.CRT$XCU:00003CB4 ; Segment permissions: Read
.CRT$XCU:00003CB4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00003CB4                 assume cs:_CRT$XCU
.CRT$XCU:00003CB4                 ;org 3CB4h
.CRT$XCU:00003CB4 _g_RegisterArc$initializer$ dd offset ??__Eg_RegisterArc@NBz2@NArchive@@YAXXZ ; NArchive::NBz2::`dynamic initializer for 'g_RegisterArc''(void)
.CRT$XCU:00003CB4 _CRT$XCU        ends
.CRT$XCU:00003CB4
UNDEF:00003CC0 ; ===========================================================================
UNDEF:00003CC0
UNDEF:00003CC0 ; Segment type: Externs
UNDEF:00003CC0 ; UNDEF
UNDEF:00003CC0                 extrn __RTC_Shutdown:near
UNDEF:00003CC0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00003CC4                 extrn __RTC_InitBase:near
UNDEF:00003CC4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00003CC8 ; unsigned char const * const k7z_PROPID_To_VARTYPE
UNDEF:00003CC8                 extrn ?k7z_PROPID_To_VARTYPE@@3QBEB:near
UNDEF:00003CC8                                         ; DATA XREF: NArchive::NBz2::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:00003CC8                                         ; NArchive::NBz2::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:00003CCC ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:00003CCC                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:00003CCC                                         ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+134p
UNDEF:00003CCC                                         ; NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+84p
UNDEF:00003CD0 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:00003CD0                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:00003CD0                                         ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+128p
UNDEF:00003CD4 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:00003CD4                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:00003CD4                                         ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+71p
UNDEF:00003CD4                                         ; NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+94p ...
UNDEF:00003CD8                 extrn __RTC_CheckEsp:near
UNDEF:00003CD8                                         ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+161p
UNDEF:00003CD8                                         ; NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+B1p ...
UNDEF:00003CDC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00003CDC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00003CDC                                         ; CODE XREF: NArchive::NBz2::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+155p
UNDEF:00003CDC                                         ; NArchive::NBz2::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+A5p ...
UNDEF:00003CE0 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00003CE0                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00003CE0                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00003CE4 ; bool NCompress::NBZip2::IsEndSig(NCompress::NBZip2 *__hidden this, const unsigned __int8 *)
UNDEF:00003CE4                 extrn ?IsEndSig@NBZip2@NCompress@@YG_NPBE@Z:near
UNDEF:00003CE4                                         ; CODE XREF: IsArc_BZip2(x,x)+73p
UNDEF:00003CE8 ; bool NCompress::NBZip2::IsBlockSig(NCompress::NBZip2 *__hidden this, const unsigned __int8 *)
UNDEF:00003CE8                 extrn ?IsBlockSig@NBZip2@NCompress@@YG_NPBE@Z:near
UNDEF:00003CE8                                         ; CODE XREF: IsArc_BZip2(x,x)+5Cp
UNDEF:00003CEC ; __int32 __stdcall ReadStream_FALSE(struct ISequentialInStream *, void *, unsigned int)
UNDEF:00003CEC                 extrn ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:00003CEC                                         ; CODE XREF: NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+74p
UNDEF:00003CF0                 extrn ___security_cookie:near
UNDEF:00003CF0                                         ; DATA XREF: NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+35r
UNDEF:00003CF0                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2Dr ...
UNDEF:00003CF4                 extrn ___CxxFrameHandler3:near
UNDEF:00003CF4                                         ; CODE XREF: __ehhandler$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+20j
UNDEF:00003CF4                                         ; __ehhandler$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+19j ...
UNDEF:00003CF8 ; __fastcall __security_check_cookie(x)
UNDEF:00003CF8                 extrn @__security_check_cookie@4:near
UNDEF:00003CF8                                         ; CODE XREF: NArchive::NBz2::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+117p
UNDEF:00003CF8                                         ; __ehhandler$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+Cp ...
UNDEF:00003CFC ; void __cdecl operator delete(void *)
UNDEF:00003CFC                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5+7p
UNDEF:00003CFC                                         ; __unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7+7p ...
UNDEF:00003D00 ; __int32 __thiscall NCompress::NBZip2::CDecoder::CodeResume(NCompress::NBZip2::CDecoder *__hidden this, struct ISequentialOutStream *, struct ICompressProgressInfo *)
UNDEF:00003D00                 extrn ?CodeResume@CDecoder@NBZip2@NCompress@@QAEJPAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:near
UNDEF:00003D00                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+576p
UNDEF:00003D04 ; __int32 __thiscall CLocalProgress::SetCur(CLocalProgress *__hidden this)
UNDEF:00003D04                 extrn ?SetCur@CLocalProgress@@QAEJXZ:near
UNDEF:00003D04                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4EBp
UNDEF:00003D08 ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:00003D08                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:00003D08                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+48Cp
UNDEF:00003D08                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2FEp ...
UNDEF:00003D0C ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:00003D0C                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:00003D0C                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+437p
UNDEF:00003D0C                                         ; NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2A6p ...
UNDEF:00003D10 ; _DWORD __thiscall NCompress::NBZip2::CDecoder::CDecoder(NCompress::NBZip2::CDecoder *__hidden this)
UNDEF:00003D10                 extrn ??0CDecoder@NBZip2@NCompress@@QAE@XZ:near
UNDEF:00003D10                                         ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+282p
UNDEF:00003D14 ; void *__cdecl operator new(unsigned int)
UNDEF:00003D14                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+255p
UNDEF:00003D14                                         ; NArchive::NBz2::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+362p ...
UNDEF:00003D18 ; const type_info::`vftable'
UNDEF:00003D18                 extrn ??_7type_info@@6B@:near
UNDEF:00003D18                                         ; DATA XREF: .data:CInBufferException `RTTI Type Descriptor'o
UNDEF:00003D18                                         ; .data:CDummyOutStream `RTTI Type Descriptor'o ...
UNDEF:00003D1C ; public: virtual long __stdcall CDummyOutStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:00003D1C                 extrn ?Write@CDummyOutStream@@UAGJPBXIPAI@Z:near
UNDEF:00003D1C                                         ; DATA XREF: .rdata:000021A4o
UNDEF:00003D20 ; const IID IID_IUnknown
UNDEF:00003D20                 extrn _IID_IUnknown:near
UNDEF:00003D20                                         ; DATA XREF: CDummyOutStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00003D20                                         ; NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00003D24 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00003D24                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00003D28                 extrn __purecall:near   ; DATA XREF: .rdata:const ISequentialOutStream::`vftable'o
UNDEF:00003D28                                         ; .rdata:00002520o ...
UNDEF:00003D2C ; __int32 NCompress::CopyStream(NCompress *__hidden this, struct ISequentialInStream *, struct ISequentialOutStream *, struct ICompressProgressInfo *)
UNDEF:00003D2C                 extrn ?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:near
UNDEF:00003D2C                                         ; CODE XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4DDp
UNDEF:00003D30                 extrn _IID_IArchiveUpdateCallbackFile:near
UNDEF:00003D30                                         ; DATA XREF: NArchive::NBz2::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+332o
UNDEF:00003D34 ; __int32 __thiscall CProps::SetCoderProps(CProps *__hidden this, struct ICompressSetCoderProperties *, const unsigned __int64 *)
UNDEF:00003D34                 extrn ?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z:near
UNDEF:00003D34                                         ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+185p
UNDEF:00003D38 ; _DWORD __thiscall NCompress::NBZip2::CEncoder::CEncoder(NCompress::NBZip2::CEncoder *__hidden this)
UNDEF:00003D38                 extrn ??0CEncoder@NBZip2@NCompress@@QAE@XZ:near
UNDEF:00003D38                                         ; CODE XREF: NArchive::NBz2::UpdateArchive(unsigned __int64,ISequentialOutStream *,CProps const &,IArchiveUpdateCallback *)+133p
UNDEF:00003D3C ; __int32 __thiscall NArchive::CSingleMethodProps::SetProperties(NArchive::CSingleMethodProps *__hidden this, const wchar_t *const *, const struct tagPROPVARIANT *, unsigned int)
UNDEF:00003D3C                 extrn ?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z:near
UNDEF:00003D3C                                         ; CODE XREF: NArchive::NBz2::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+15p
UNDEF:00003D40 ; void __thiscall NArchive::CSingleMethodProps::Init(NArchive::CSingleMethodProps *__hidden this)
UNDEF:00003D40                 extrn ?Init@CSingleMethodProps@NArchive@@QAEXXZ:near
UNDEF:00003D40                                         ; CODE XREF: NArchive::CSingleMethodProps::CSingleMethodProps(void)+3Fp
UNDEF:00003D44 ; _DWORD __thiscall UString::UString(UString *__hidden this)
UNDEF:00003D44                 extrn ??0UString@@QAE@XZ:near
UNDEF:00003D44                                         ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+51p
UNDEF:00003D48 ; _DWORD __thiscall AString::AString(AString *__hidden this)
UNDEF:00003D48                 extrn ??0AString@@QAE@XZ:near
UNDEF:00003D48                                         ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+42p
UNDEF:00003D4C                 extrn _IID_ISetProperties:near
UNDEF:00003D4C                                         ; DATA XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *):loc_2E76o
UNDEF:00003D50                 extrn _IID_IOutArchive:near
UNDEF:00003D50                                         ; DATA XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *):loc_2E42o
UNDEF:00003D54                 extrn _IID_IArchiveOpenSeq:near
UNDEF:00003D54                                         ; DATA XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *):loc_2E0Eo
UNDEF:00003D58                 extrn _IID_IInArchive:near
UNDEF:00003D58                                         ; DATA XREF: NArchive::NBz2::CHandler::QueryInterface(_GUID const &,void * *):loc_2DEFo
UNDEF:00003D5C ; void __stdcall RegisterArc(const struct CArcInfo *)
UNDEF:00003D5C                 extrn ?RegisterArc@@YGXPBUCArcInfo@@@Z:near
UNDEF:00003D5C                                         ; CODE XREF: NArchive::NBz2::CRegisterArc::CRegisterArc(void)+13p
UNDEF:00003D5C
UNDEF:00003D5C
UNDEF:00003D5C                 end