.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : A79DBE93A2703C6A7FCF52B6669F6C96
.rdata:00000000 ; Input CRC32 : 4B262EA8
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\MemoryLock.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; CHAR _SG65574[]
.rdata:00000000 $SG65574        db 'Advapi32.dll',0     ; DATA XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+27o
.rdata:0000000D                 align 10h
.rdata:00000010 ; CHAR _SG65578[]
.rdata:00000010 $SG65578        db 'OpenProcessToken',0 ; DATA XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+4Bo
.rdata:00000021                 align 4
.rdata:00000024 ; CHAR _SG65581[]
.rdata:00000024 $SG65581        db 'LookupPrivilegeValueA',0
.rdata:00000024                                         ; DATA XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+66o
.rdata:0000003A                 align 4
.rdata:0000003C ; CHAR _SG65584[]
.rdata:0000003C $SG65584        db 'AdjustTokenPrivileges',0
.rdata:0000003C                                         ; DATA XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+81o
.rdata:00000052                 align 4
.rdata:00000052 _rdata          ends
.rdata:00000052
.text:00000054 ; ===========================================================================
.text:00000054
.text:00000054 ; Segment type: Pure code
.text:00000054 ; Segment permissions: Read/Execute
.text:00000054 _text           segment para public 'CODE' use32
.text:00000054                 assume cs:_text
.text:00000054                 ;org 54h
.text:00000054                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000054
.text:00000054 ; =============== S U B R O U T I N E =======================================
.text:00000054
.text:00000054 ; Attributes: bp-based frame
.text:00000054
.text:00000054 ; bool __stdcall NWindows::NSecurity::EnablePrivilege(NWindows::NSecurity *this, const char *, bool)
.text:00000054                 public ?EnablePrivilege@NSecurity@NWindows@@YG_NPBD_N@Z
.text:00000054 ?EnablePrivilege@NSecurity@NWindows@@YG_NPBD_N@Z proc near
.text:00000054
.text:00000054 var_3C          = byte ptr -3Ch
.text:00000054 var_38          = dword ptr -38h
.text:00000054 var_34          = byte ptr -34h
.text:00000054 var_2C          = dword ptr -2Ch
.text:00000054 hObject         = dword ptr -20h
.text:00000054 var_18          = dword ptr -18h
.text:00000054 var_14          = dword ptr -14h
.text:00000054 var_10          = dword ptr -10h
.text:00000054 hModule         = dword ptr -0Ch
.text:00000054 var_5           = byte ptr -5
.text:00000054 var_4           = dword ptr -4
.text:00000054 this            = dword ptr  8
.text:00000054 arg_4           = dword ptr  0Ch
.text:00000054
.text:00000054                 push    ebp
.text:00000055                 mov     ebp, esp
.text:00000057                 sub     esp, 3Ch
.text:0000005A                 push    esi
.text:0000005B                 push    edi
.text:0000005C                 lea     edi, [ebp+var_3C]
.text:0000005F                 mov     ecx, 0Fh
.text:00000064                 mov     eax, 0CCCCCCCCh
.text:00000069                 rep stosd
.text:0000006B                 mov     eax, dword ptr ds:___security_cookie
.text:00000070                 xor     eax, ebp
.text:00000072                 mov     [ebp+var_4], eax
.text:00000075                 mov     [ebp+var_5], 0
.text:00000079                 mov     esi, esp
.text:0000007B                 push    offset $SG65574 ; "Advapi32.dll"
.text:00000080                 call    dword ptr ds:__imp__LoadLibraryA@4 ; LoadLibraryA(x)
.text:00000086                 cmp     esi, esp
.text:00000088                 call    __RTC_CheckEsp
.text:0000008D                 mov     [ebp+hModule], eax
.text:00000090                 cmp     [ebp+hModule], 0
.text:00000094                 jnz     short loc_9D
.text:00000096                 xor     al, al
.text:00000098                 jmp     loc_1C3
.text:0000009D ; ---------------------------------------------------------------------------
.text:0000009D
.text:0000009D loc_9D:                                 ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+40j
.text:0000009D                 mov     esi, esp
.text:0000009F                 push    offset $SG65578 ; "OpenProcessToken"
.text:000000A4                 mov     eax, [ebp+hModule]
.text:000000A7                 push    eax             ; hModule
.text:000000A8                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000000AE                 cmp     esi, esp
.text:000000B0                 call    __RTC_CheckEsp
.text:000000B5                 mov     [ebp+var_10], eax
.text:000000B8                 mov     esi, esp
.text:000000BA                 push    offset $SG65581 ; "LookupPrivilegeValueA"
.text:000000BF                 mov     ecx, [ebp+hModule]
.text:000000C2                 push    ecx             ; hModule
.text:000000C3                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000000C9                 cmp     esi, esp
.text:000000CB                 call    __RTC_CheckEsp
.text:000000D0                 mov     [ebp+var_14], eax
.text:000000D3                 mov     esi, esp
.text:000000D5                 push    offset $SG65584 ; "AdjustTokenPrivileges"
.text:000000DA                 mov     edx, [ebp+hModule]
.text:000000DD                 push    edx             ; hModule
.text:000000DE                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000000E4                 cmp     esi, esp
.text:000000E6                 call    __RTC_CheckEsp
.text:000000EB                 mov     [ebp+var_18], eax
.text:000000EE                 cmp     [ebp+var_10], 0
.text:000000F2                 jz      loc_1AD
.text:000000F8                 cmp     [ebp+var_18], 0
.text:000000FC                 jz      loc_1AD
.text:00000102                 cmp     [ebp+var_14], 0
.text:00000106                 jz      loc_1AD
.text:0000010C                 mov     esi, esp
.text:0000010E                 lea     eax, [ebp+hObject]
.text:00000111                 push    eax
.text:00000112                 push    20h ; ' '
.text:00000114                 mov     edi, esp
.text:00000116                 call    dword ptr ds:__imp__GetCurrentProcess@0 ; GetCurrentProcess()
.text:0000011C                 cmp     edi, esp
.text:0000011E                 call    __RTC_CheckEsp
.text:00000123                 push    eax
.text:00000124                 call    [ebp+var_10]
.text:00000127                 cmp     esi, esp
.text:00000129                 call    __RTC_CheckEsp
.text:0000012E                 test    eax, eax
.text:00000130                 jz      short loc_1AD
.text:00000132                 mov     esi, esp
.text:00000134                 lea     ecx, [ebp+var_34]
.text:00000137                 push    ecx
.text:00000138                 mov     edx, [ebp+this]
.text:0000013B                 push    edx
.text:0000013C                 push    0
.text:0000013E                 call    [ebp+var_14]
.text:00000141                 cmp     esi, esp
.text:00000143                 call    __RTC_CheckEsp
.text:00000148                 test    eax, eax
.text:0000014A                 jz      short loc_19A
.text:0000014C                 mov     [ebp+var_38], 1
.text:00000153                 movzx   eax, byte ptr [ebp+arg_4]
.text:00000157                 neg     eax
.text:00000159                 sbb     eax, eax
.text:0000015B                 and     eax, 2
.text:0000015E                 mov     [ebp+var_2C], eax
.text:00000161                 mov     esi, esp
.text:00000163                 push    0
.text:00000165                 push    0
.text:00000167                 push    0
.text:00000169                 lea     ecx, [ebp+var_38]
.text:0000016C                 push    ecx
.text:0000016D                 push    0
.text:0000016F                 mov     edx, [ebp+hObject]
.text:00000172                 push    edx
.text:00000173                 call    [ebp+var_18]
.text:00000176                 cmp     esi, esp
.text:00000178                 call    __RTC_CheckEsp
.text:0000017D                 test    eax, eax
.text:0000017F                 jz      short loc_19A
.text:00000181                 mov     esi, esp
.text:00000183                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000189                 cmp     esi, esp
.text:0000018B                 call    __RTC_CheckEsp
.text:00000190                 neg     eax
.text:00000192                 sbb     eax, eax
.text:00000194                 add     eax, 1
.text:00000197                 mov     [ebp+var_5], al
.text:0000019A
.text:0000019A loc_19A:                                ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+F6j
.text:0000019A                                         ; NWindows::NSecurity::EnablePrivilege(char const *,bool)+12Bj
.text:0000019A                 mov     esi, esp
.text:0000019C                 mov     eax, [ebp+hObject]
.text:0000019F                 push    eax             ; hObject
.text:000001A0                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:000001A6                 cmp     esi, esp
.text:000001A8                 call    __RTC_CheckEsp
.text:000001AD
.text:000001AD loc_1AD:                                ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+9Ej
.text:000001AD                                         ; NWindows::NSecurity::EnablePrivilege(char const *,bool)+A8j ...
.text:000001AD                 mov     esi, esp
.text:000001AF                 mov     ecx, [ebp+hModule]
.text:000001B2                 push    ecx             ; hLibModule
.text:000001B3                 call    dword ptr ds:__imp__FreeLibrary@4 ; FreeLibrary(x)
.text:000001B9                 cmp     esi, esp
.text:000001BB                 call    __RTC_CheckEsp
.text:000001C0                 mov     al, [ebp+var_5]
.text:000001C3
.text:000001C3 loc_1C3:                                ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+44j
.text:000001C3                 push    edx
.text:000001C4                 mov     ecx, ebp
.text:000001C6                 push    eax
.text:000001C7                 lea     edx, $LN11
.text:000001CD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001D2                 pop     eax
.text:000001D3                 pop     edx
.text:000001D4                 pop     edi
.text:000001D5                 pop     esi
.text:000001D6                 mov     ecx, [ebp+var_4]
.text:000001D9                 xor     ecx, ebp
.text:000001DB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000001E0                 add     esp, 3Ch
.text:000001E3                 cmp     ebp, esp
.text:000001E5                 call    __RTC_CheckEsp
.text:000001EA                 mov     esp, ebp
.text:000001EC                 pop     ebp
.text:000001ED                 retn    8
.text:000001ED ?EnablePrivilege@NSecurity@NWindows@@YG_NPBD_N@Z endp
.text:000001ED
.text:000001ED ; ---------------------------------------------------------------------------
.text:000001F0 $LN11           dd 2                    ; DATA XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+173o
.text:000001F4                 dd offset $LN10
.text:000001F8 $LN10           dd 0FFFFFFE0h, 4        ; DATA XREF: .text:000001F4o
.text:00000200                 dd offset $LN8          ; "token"
.text:00000204                 dd 0FFFFFFC8h, 10h
.text:0000020C                 dd offset $LN9
.text:00000210 $LN9            db 74h, 70h, 0          ; DATA XREF: .text:0000020Co
.text:00000213 $LN8            db 'token',0            ; DATA XREF: .text:00000200o
.text:00000219                 align 4
.text:00000219 _text           ends
.text:00000219
.rtc$TMZ:0000021C ; ===========================================================================
.rtc$TMZ:0000021C
.rtc$TMZ:0000021C ; Segment type: Pure data
.rtc$TMZ:0000021C ; Segment permissions: Read
.rtc$TMZ:0000021C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000021C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000021C                 ;org 21Ch
.rtc$TMZ:0000021C ; COMDAT (pick any)
.rtc$TMZ:0000021C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000021C _rtc$TMZ        ends
.rtc$TMZ:0000021C
.rtc$IMZ:00000220 ; ===========================================================================
.rtc$IMZ:00000220
.rtc$IMZ:00000220 ; Segment type: Pure data
.rtc$IMZ:00000220 ; Segment permissions: Read
.rtc$IMZ:00000220 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000220                 assume cs:_rtc$IMZ
.rtc$IMZ:00000220                 ;org 220h
.rtc$IMZ:00000220 ; COMDAT (pick any)
.rtc$IMZ:00000220 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000220 _rtc$IMZ        ends
.rtc$IMZ:00000220
UNDEF:00000230 ; ===========================================================================
UNDEF:00000230
UNDEF:00000230 ; Segment type: Externs
UNDEF:00000230 ; UNDEF
UNDEF:00000230 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
UNDEF:00000230                 extrn __imp__FreeLibrary@4:near
UNDEF:00000230                                         ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+15Fp
UNDEF:00000230                                         ; DATA XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+15Fr
UNDEF:00000234 ; BOOL __stdcall CloseHandle(HANDLE hObject)
UNDEF:00000234                 extrn __imp__CloseHandle@4:near
UNDEF:00000234                                         ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+14Cp
UNDEF:00000234                                         ; DATA XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+14Cr
UNDEF:00000238 ; DWORD __stdcall GetLastError()
UNDEF:00000238                 extrn __imp__GetLastError@0:near
UNDEF:00000238                                         ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+12Fp
UNDEF:00000238                                         ; DATA XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+12Fr
UNDEF:0000023C ; HANDLE __stdcall GetCurrentProcess()
UNDEF:0000023C                 extrn __imp__GetCurrentProcess@0:near
UNDEF:0000023C                                         ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+C2p
UNDEF:0000023C                                         ; DATA XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+C2r
UNDEF:00000240 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:00000240                 extrn __imp__GetProcAddress@8:near
UNDEF:00000240                                         ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+54p
UNDEF:00000240                                         ; NWindows::NSecurity::EnablePrivilege(char const *,bool)+6Fp ...
UNDEF:00000244 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
UNDEF:00000244                 extrn __imp__LoadLibraryA@4:near
UNDEF:00000244                                         ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+2Cp
UNDEF:00000244                                         ; DATA XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+2Cr
UNDEF:00000248                 extrn ___security_cookie:near
UNDEF:00000248                                         ; DATA XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+17r
UNDEF:0000024C ; __fastcall __security_check_cookie(x)
UNDEF:0000024C                 extrn @__security_check_cookie@4:near
UNDEF:0000024C                                         ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+187p
UNDEF:00000250 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000250                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000250                                         ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+179p
UNDEF:00000254                 extrn __RTC_CheckEsp:near
UNDEF:00000254                                         ; CODE XREF: NWindows::NSecurity::EnablePrivilege(char const *,bool)+34p
UNDEF:00000254                                         ; NWindows::NSecurity::EnablePrivilege(char const *,bool)+5Cp ...
UNDEF:00000258                 extrn __RTC_Shutdown:near
UNDEF:00000258                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000025C                 extrn __RTC_InitBase:near
UNDEF:0000025C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000025C
UNDEF:0000025C
UNDEF:0000025C                 end