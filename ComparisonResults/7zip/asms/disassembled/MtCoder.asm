.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 024B7294FF50FFC2AE5B23736D517C8C
.text:00000000 ; Input CRC32 : 79FF649B
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\MtCoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall LoopThread_Construct(x)
.text:00000000                 public _LoopThread_Construct@4
.text:00000000 _LoopThread_Construct@4 proc near       ; CODE XREF: CMtThread_Construct(x,x)+3Ap
.text:00000000
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 mov     eax, [ebp+arg_0]
.text:00000006                 mov     dword ptr [eax], 0
.text:0000000C                 mov     ecx, [ebp+arg_0]
.text:0000000F                 mov     dword ptr [ecx+4], 0
.text:00000016                 mov     edx, [ebp+arg_0]
.text:00000019                 mov     dword ptr [edx+8], 0
.text:00000020                 pop     ebp
.text:00000021                 retn    4
.text:00000021 _LoopThread_Construct@4 endp
.text:00000021
.text:00000021 ; ---------------------------------------------------------------------------
.text:00000024                 align 10h
.text:00000030
.text:00000030 ; =============== S U B R O U T I N E =======================================
.text:00000030
.text:00000030 ; Attributes: bp-based frame
.text:00000030
.text:00000030 ; __stdcall LoopThread_Close(x)
.text:00000030                 public _LoopThread_Close@4
.text:00000030 _LoopThread_Close@4 proc near           ; CODE XREF: CMtThread_Destruct(x)+29p
.text:00000030
.text:00000030 arg_0           = dword ptr  8
.text:00000030
.text:00000030                 push    ebp
.text:00000031                 mov     ebp, esp
.text:00000033                 mov     eax, [ebp+arg_0]
.text:00000036                 push    eax
.text:00000037                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:0000003C                 mov     ecx, [ebp+arg_0]
.text:0000003F                 add     ecx, 4
.text:00000042                 push    ecx
.text:00000043                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00000048                 mov     edx, [ebp+arg_0]
.text:0000004B                 add     edx, 8
.text:0000004E                 push    edx
.text:0000004F                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00000054                 cmp     ebp, esp
.text:00000056                 call    __RTC_CheckEsp
.text:0000005B                 pop     ebp
.text:0000005C                 retn    4
.text:0000005C _LoopThread_Close@4 endp
.text:0000005C
.text:0000005C ; ---------------------------------------------------------------------------
.text:0000005F                 align 10h
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060 ; __stdcall LoopThread_Create(x)
.text:00000060                 public _LoopThread_Create@4
.text:00000060 _LoopThread_Create@4 proc near          ; CODE XREF: MtCoder_Code(x)+EBp
.text:00000060
.text:00000060 var_8           = dword ptr -8
.text:00000060 var_4           = dword ptr -4
.text:00000060 arg_0           = dword ptr  8
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 sub     esp, 8
.text:00000066                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000006D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000074                 mov     eax, [ebp+arg_0]
.text:00000077                 mov     dword ptr [eax+0Ch], 0
.text:0000007E                 mov     ecx, [ebp+arg_0]
.text:00000081                 add     ecx, 4
.text:00000084                 push    ecx
.text:00000085                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:0000008A                 mov     [ebp+var_4], eax
.text:0000008D                 cmp     [ebp+var_4], 0
.text:00000091                 jz      short loc_98
.text:00000093                 mov     eax, [ebp+var_4]
.text:00000096                 jmp     short loc_C4
.text:00000098 ; ---------------------------------------------------------------------------
.text:00000098
.text:00000098 loc_98:                                 ; CODE XREF: LoopThread_Create(x)+31j
.text:00000098                 mov     edx, [ebp+arg_0]
.text:0000009B                 add     edx, 8
.text:0000009E                 push    edx
.text:0000009F                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:000000A4                 mov     [ebp+var_8], eax
.text:000000A7                 cmp     [ebp+var_8], 0
.text:000000AB                 jz      short loc_B2
.text:000000AD                 mov     eax, [ebp+var_8]
.text:000000B0                 jmp     short loc_C4
.text:000000B2 ; ---------------------------------------------------------------------------
.text:000000B2
.text:000000B2 loc_B2:                                 ; CODE XREF: LoopThread_Create(x)+4Bj
.text:000000B2                 mov     eax, [ebp+arg_0]
.text:000000B5                 push    eax
.text:000000B6                 push    offset _LoopThreadFunc@4 ; LoopThreadFunc(x)
.text:000000BB                 mov     ecx, [ebp+arg_0]
.text:000000BE                 push    ecx
.text:000000BF                 call    _Thread_Create@12 ; Thread_Create(x,x,x)
.text:000000C4
.text:000000C4 loc_C4:                                 ; CODE XREF: LoopThread_Create(x)+36j
.text:000000C4                                         ; LoopThread_Create(x)+50j
.text:000000C4                 add     esp, 8
.text:000000C7                 cmp     ebp, esp
.text:000000C9                 call    __RTC_CheckEsp
.text:000000CE                 mov     esp, ebp
.text:000000D0                 pop     ebp
.text:000000D1                 retn    4
.text:000000D1 _LoopThread_Create@4 endp
.text:000000D1
.text:000000D1 ; ---------------------------------------------------------------------------
.text:000000D4                 align 10h
.text:000000E0
.text:000000E0 ; =============== S U B R O U T I N E =======================================
.text:000000E0
.text:000000E0 ; Attributes: bp-based frame
.text:000000E0
.text:000000E0 ; __stdcall LoopThreadFunc(x)
.text:000000E0 _LoopThreadFunc@4 proc near             ; DATA XREF: LoopThread_Create(x)+56o
.text:000000E0
.text:000000E0 var_4           = dword ptr -4
.text:000000E0 arg_0           = dword ptr  8
.text:000000E0
.text:000000E0                 push    ebp
.text:000000E1                 mov     ebp, esp
.text:000000E3                 push    ecx
.text:000000E4                 push    esi
.text:000000E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000EC                 mov     eax, [ebp+arg_0]
.text:000000EF                 mov     [ebp+var_4], eax
.text:000000F2
.text:000000F2 loc_F2:                                 ; CODE XREF: LoopThreadFunc(x):loc_14Bj
.text:000000F2                 mov     ecx, [ebp+var_4]
.text:000000F5                 mov     edx, [ecx+4]
.text:000000F8                 push    edx
.text:000000F9                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:000000FE                 test    eax, eax
.text:00000100                 jz      short loc_109
.text:00000102                 mov     eax, 0Ch
.text:00000107                 jmp     short loc_14D
.text:00000109 ; ---------------------------------------------------------------------------
.text:00000109
.text:00000109 loc_109:                                ; CODE XREF: LoopThreadFunc(x)+20j
.text:00000109                 mov     eax, [ebp+var_4]
.text:0000010C                 cmp     dword ptr [eax+0Ch], 0
.text:00000110                 jz      short loc_116
.text:00000112                 xor     eax, eax
.text:00000114                 jmp     short loc_14D
.text:00000116 ; ---------------------------------------------------------------------------
.text:00000116
.text:00000116 loc_116:                                ; CODE XREF: LoopThreadFunc(x)+30j
.text:00000116                 mov     esi, esp
.text:00000118                 mov     ecx, [ebp+var_4]
.text:0000011B                 mov     edx, [ecx+14h]
.text:0000011E                 push    edx
.text:0000011F                 mov     eax, [ebp+var_4]
.text:00000122                 mov     ecx, [eax+10h]
.text:00000125                 call    ecx
.text:00000127                 cmp     esi, esp
.text:00000129                 call    __RTC_CheckEsp
.text:0000012E                 mov     edx, [ebp+var_4]
.text:00000131                 mov     [edx+18h], eax
.text:00000134                 mov     eax, [ebp+var_4]
.text:00000137                 add     eax, 8
.text:0000013A                 push    eax
.text:0000013B                 call    _Event_Set@4    ; Event_Set(x)
.text:00000140                 test    eax, eax
.text:00000142                 jz      short loc_14B
.text:00000144                 mov     eax, 0Ch
.text:00000149                 jmp     short loc_14D
.text:0000014B ; ---------------------------------------------------------------------------
.text:0000014B
.text:0000014B loc_14B:                                ; CODE XREF: LoopThreadFunc(x)+62j
.text:0000014B                 jmp     short loc_F2
.text:0000014D ; ---------------------------------------------------------------------------
.text:0000014D
.text:0000014D loc_14D:                                ; CODE XREF: LoopThreadFunc(x)+27j
.text:0000014D                                         ; LoopThreadFunc(x)+34j ...
.text:0000014D                 pop     esi
.text:0000014E                 add     esp, 4
.text:00000151                 cmp     ebp, esp
.text:00000153                 call    __RTC_CheckEsp
.text:00000158                 mov     esp, ebp
.text:0000015A                 pop     ebp
.text:0000015B                 retn    4
.text:0000015B _LoopThreadFunc@4 endp
.text:0000015B
.text:0000015B ; ---------------------------------------------------------------------------
.text:0000015E                 align 10h
.text:00000160
.text:00000160 ; =============== S U B R O U T I N E =======================================
.text:00000160
.text:00000160 ; Attributes: bp-based frame
.text:00000160
.text:00000160 ; __stdcall LoopThread_StopAndWait(x)
.text:00000160                 public _LoopThread_StopAndWait@4
.text:00000160 _LoopThread_StopAndWait@4 proc near     ; CODE XREF: CMtThread_Destruct(x)+1Dp
.text:00000160
.text:00000160 arg_0           = dword ptr  8
.text:00000160
.text:00000160                 push    ebp
.text:00000161                 mov     ebp, esp
.text:00000163                 mov     eax, [ebp+arg_0]
.text:00000166                 mov     dword ptr [eax+0Ch], 1
.text:0000016D                 mov     ecx, [ebp+arg_0]
.text:00000170                 add     ecx, 4
.text:00000173                 push    ecx
.text:00000174                 call    _Event_Set@4    ; Event_Set(x)
.text:00000179                 test    eax, eax
.text:0000017B                 jz      short loc_184
.text:0000017D                 mov     eax, 0Ch
.text:00000182                 jmp     short loc_18F
.text:00000184 ; ---------------------------------------------------------------------------
.text:00000184
.text:00000184 loc_184:                                ; CODE XREF: LoopThread_StopAndWait(x)+1Bj
.text:00000184                 mov     edx, [ebp+arg_0]
.text:00000187                 mov     eax, [edx]
.text:00000189                 push    eax
.text:0000018A                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:0000018F
.text:0000018F loc_18F:                                ; CODE XREF: LoopThread_StopAndWait(x)+22j
.text:0000018F                 cmp     ebp, esp
.text:00000191                 call    __RTC_CheckEsp
.text:00000196                 pop     ebp
.text:00000197                 retn    4
.text:00000197 _LoopThread_StopAndWait@4 endp
.text:00000197
.text:00000197 ; ---------------------------------------------------------------------------
.text:0000019A                 align 10h
.text:000001A0
.text:000001A0 ; =============== S U B R O U T I N E =======================================
.text:000001A0
.text:000001A0 ; Attributes: bp-based frame
.text:000001A0
.text:000001A0 ; __stdcall LoopThread_StartSubThread(x)
.text:000001A0                 public _LoopThread_StartSubThread@4
.text:000001A0 _LoopThread_StartSubThread@4 proc near  ; CODE XREF: MtCoder_Code(x)+13Dp
.text:000001A0
.text:000001A0 arg_0           = dword ptr  8
.text:000001A0
.text:000001A0                 push    ebp
.text:000001A1                 mov     ebp, esp
.text:000001A3                 mov     eax, [ebp+arg_0]
.text:000001A6                 add     eax, 4
.text:000001A9                 push    eax
.text:000001AA                 call    _Event_Set@4    ; Event_Set(x)
.text:000001AF                 cmp     ebp, esp
.text:000001B1                 call    __RTC_CheckEsp
.text:000001B6                 pop     ebp
.text:000001B7                 retn    4
.text:000001B7 _LoopThread_StartSubThread@4 endp
.text:000001B7
.text:000001B7 ; ---------------------------------------------------------------------------
.text:000001BA                 align 10h
.text:000001C0
.text:000001C0 ; =============== S U B R O U T I N E =======================================
.text:000001C0
.text:000001C0 ; Attributes: bp-based frame
.text:000001C0
.text:000001C0 ; __stdcall LoopThread_WaitSubThread(x)
.text:000001C0                 public _LoopThread_WaitSubThread@4
.text:000001C0 _LoopThread_WaitSubThread@4 proc near   ; CODE XREF: MtCoder_Code(x)+1A6p
.text:000001C0
.text:000001C0 arg_0           = dword ptr  8
.text:000001C0
.text:000001C0                 push    ebp
.text:000001C1                 mov     ebp, esp
.text:000001C3                 mov     eax, [ebp+arg_0]
.text:000001C6                 mov     ecx, [eax+8]
.text:000001C9                 push    ecx
.text:000001CA                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:000001CF                 cmp     ebp, esp
.text:000001D1                 call    __RTC_CheckEsp
.text:000001D6                 pop     ebp
.text:000001D7                 retn    4
.text:000001D7 _LoopThread_WaitSubThread@4 endp
.text:000001D7
.text:000001D7 ; ---------------------------------------------------------------------------
.text:000001DA                 align 10h
.text:000001E0
.text:000001E0 ; =============== S U B R O U T I N E =======================================
.text:000001E0
.text:000001E0 ; Attributes: bp-based frame
.text:000001E0
.text:000001E0 ; __stdcall MtProgress_Set(x, x, x, x, x, x)
.text:000001E0                 public _MtProgress_Set@24
.text:000001E0 _MtProgress_Set@24 proc near
.text:000001E0
.text:000001E0 var_4           = dword ptr -4
.text:000001E0 arg_0           = dword ptr  8
.text:000001E0 arg_4           = dword ptr  0Ch
.text:000001E0 arg_8           = dword ptr  10h
.text:000001E0 arg_C           = dword ptr  14h
.text:000001E0 arg_10          = dword ptr  18h
.text:000001E0 arg_14          = dword ptr  1Ch
.text:000001E0
.text:000001E0                 push    ebp
.text:000001E1                 mov     ebp, esp
.text:000001E3                 push    ecx
.text:000001E4                 push    esi
.text:000001E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001EC                 mov     eax, [ebp+arg_0]
.text:000001EF                 add     eax, 18h
.text:000001F2                 mov     esi, esp
.text:000001F4                 push    eax             ; lpCriticalSection
.text:000001F5                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:000001FB                 cmp     esi, esp
.text:000001FD                 call    __RTC_CheckEsp
.text:00000202                 mov     ecx, [ebp+arg_8]
.text:00000205                 and     ecx, [ebp+arg_C]
.text:00000208                 cmp     ecx, 0FFFFFFFFh
.text:0000020B                 jz      short loc_245
.text:0000020D                 mov     edx, [ebp+arg_4]
.text:00000210                 mov     eax, [ebp+arg_0]
.text:00000213                 mov     ecx, [ebp+arg_8]
.text:00000216                 sub     ecx, [eax+edx*8+30h]
.text:0000021A                 mov     esi, [ebp+arg_C]
.text:0000021D                 sbb     esi, [eax+edx*8+34h]
.text:00000221                 mov     edx, [ebp+arg_0]
.text:00000224                 add     ecx, [edx]
.text:00000226                 adc     esi, [edx+4]
.text:00000229                 mov     eax, [ebp+arg_0]
.text:0000022C                 mov     [eax], ecx
.text:0000022E                 mov     [eax+4], esi
.text:00000231                 mov     ecx, [ebp+arg_4]
.text:00000234                 mov     edx, [ebp+arg_0]
.text:00000237                 mov     eax, [ebp+arg_8]
.text:0000023A                 mov     [edx+ecx*8+30h], eax
.text:0000023E                 mov     eax, [ebp+arg_C]
.text:00000241                 mov     [edx+ecx*8+34h], eax
.text:00000245
.text:00000245 loc_245:                                ; CODE XREF: MtProgress_Set(x,x,x,x,x,x)+2Bj
.text:00000245                 mov     ecx, [ebp+arg_10]
.text:00000248                 and     ecx, [ebp+arg_14]
.text:0000024B                 cmp     ecx, 0FFFFFFFFh
.text:0000024E                 jz      short loc_296
.text:00000250                 mov     edx, [ebp+arg_4]
.text:00000253                 mov     eax, [ebp+arg_0]
.text:00000256                 mov     ecx, [ebp+arg_10]
.text:00000259                 sub     ecx, [eax+edx*8+130h]
.text:00000260                 mov     esi, [ebp+arg_14]
.text:00000263                 sbb     esi, [eax+edx*8+134h]
.text:0000026A                 mov     edx, [ebp+arg_0]
.text:0000026D                 add     ecx, [edx+8]
.text:00000270                 adc     esi, [edx+0Ch]
.text:00000273                 mov     eax, [ebp+arg_0]
.text:00000276                 mov     [eax+8], ecx
.text:00000279                 mov     [eax+0Ch], esi
.text:0000027C                 mov     ecx, [ebp+arg_4]
.text:0000027F                 mov     edx, [ebp+arg_0]
.text:00000282                 mov     eax, [ebp+arg_10]
.text:00000285                 mov     [edx+ecx*8+130h], eax
.text:0000028C                 mov     eax, [ebp+arg_14]
.text:0000028F                 mov     [edx+ecx*8+134h], eax
.text:00000296
.text:00000296 loc_296:                                ; CODE XREF: MtProgress_Set(x,x,x,x,x,x)+6Ej
.text:00000296                 mov     ecx, [ebp+arg_0]
.text:00000299                 cmp     dword ptr [ecx+14h], 0
.text:0000029D                 jnz     short loc_2C6
.text:0000029F                 mov     edx, [ebp+arg_0]
.text:000002A2                 mov     eax, [edx+0Ch]
.text:000002A5                 push    eax
.text:000002A6                 mov     ecx, [edx+8]
.text:000002A9                 push    ecx
.text:000002AA                 mov     edx, [ebp+arg_0]
.text:000002AD                 mov     eax, [edx+4]
.text:000002B0                 push    eax
.text:000002B1                 mov     ecx, [edx]
.text:000002B3                 push    ecx
.text:000002B4                 mov     edx, [ebp+arg_0]
.text:000002B7                 mov     eax, [edx+10h]
.text:000002BA                 push    eax
.text:000002BB                 call    _Progress@20    ; Progress(x,x,x,x,x)
.text:000002C0                 mov     ecx, [ebp+arg_0]
.text:000002C3                 mov     [ecx+14h], eax
.text:000002C6
.text:000002C6 loc_2C6:                                ; CODE XREF: MtProgress_Set(x,x,x,x,x,x)+BDj
.text:000002C6                 mov     edx, [ebp+arg_0]
.text:000002C9                 mov     eax, [edx+14h]
.text:000002CC                 mov     [ebp+var_4], eax
.text:000002CF                 mov     ecx, [ebp+arg_0]
.text:000002D2                 add     ecx, 18h
.text:000002D5                 mov     esi, esp
.text:000002D7                 push    ecx             ; lpCriticalSection
.text:000002D8                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:000002DE                 cmp     esi, esp
.text:000002E0                 call    __RTC_CheckEsp
.text:000002E5                 mov     eax, [ebp+var_4]
.text:000002E8                 pop     esi
.text:000002E9                 add     esp, 4
.text:000002EC                 cmp     ebp, esp
.text:000002EE                 call    __RTC_CheckEsp
.text:000002F3                 mov     esp, ebp
.text:000002F5                 pop     ebp
.text:000002F6                 retn    18h
.text:000002F6 _MtProgress_Set@24 endp
.text:000002F6
.text:000002F6 ; ---------------------------------------------------------------------------
.text:000002F9                 align 10h
.text:00000300
.text:00000300 ; =============== S U B R O U T I N E =======================================
.text:00000300
.text:00000300 ; Attributes: bp-based frame
.text:00000300
.text:00000300 ; __stdcall Progress(x, x, x, x, x)
.text:00000300 _Progress@20    proc near               ; CODE XREF: MtProgress_Set(x,x,x,x,x,x)+DBp
.text:00000300
.text:00000300 var_4           = dword ptr -4
.text:00000300 arg_0           = dword ptr  8
.text:00000300 arg_4           = dword ptr  0Ch
.text:00000300 arg_8           = dword ptr  10h
.text:00000300 arg_C           = dword ptr  14h
.text:00000300 arg_10          = dword ptr  18h
.text:00000300
.text:00000300                 push    ebp
.text:00000301                 mov     ebp, esp
.text:00000303                 push    ecx
.text:00000304                 push    esi
.text:00000305                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000030C                 cmp     [ebp+arg_0], 0
.text:00000310                 jz      short loc_343
.text:00000312                 mov     esi, esp
.text:00000314                 mov     eax, [ebp+arg_10]
.text:00000317                 push    eax
.text:00000318                 mov     ecx, [ebp+arg_C]
.text:0000031B                 push    ecx
.text:0000031C                 mov     edx, [ebp+arg_8]
.text:0000031F                 push    edx
.text:00000320                 mov     eax, [ebp+arg_4]
.text:00000323                 push    eax
.text:00000324                 mov     ecx, [ebp+arg_0]
.text:00000327                 push    ecx
.text:00000328                 mov     edx, [ebp+arg_0]
.text:0000032B                 mov     eax, [edx]
.text:0000032D                 call    eax
.text:0000032F                 cmp     esi, esp
.text:00000331                 call    __RTC_CheckEsp
.text:00000336                 test    eax, eax
.text:00000338                 jz      short loc_343
.text:0000033A                 mov     [ebp+var_4], 0Ah
.text:00000341                 jmp     short loc_34A
.text:00000343 ; ---------------------------------------------------------------------------
.text:00000343
.text:00000343 loc_343:                                ; CODE XREF: Progress(x,x,x,x,x)+10j
.text:00000343                                         ; Progress(x,x,x,x,x)+38j
.text:00000343                 mov     [ebp+var_4], 0
.text:0000034A
.text:0000034A loc_34A:                                ; CODE XREF: Progress(x,x,x,x,x)+41j
.text:0000034A                 mov     eax, [ebp+var_4]
.text:0000034D                 pop     esi
.text:0000034E                 add     esp, 4
.text:00000351                 cmp     ebp, esp
.text:00000353                 call    __RTC_CheckEsp
.text:00000358                 mov     esp, ebp
.text:0000035A                 pop     ebp
.text:0000035B                 retn    14h
.text:0000035B _Progress@20    endp
.text:0000035B
.text:0000035B ; ---------------------------------------------------------------------------
.text:0000035E                 align 10h
.text:00000360
.text:00000360 ; =============== S U B R O U T I N E =======================================
.text:00000360
.text:00000360 ; Attributes: bp-based frame
.text:00000360
.text:00000360 ; __stdcall CMtThread_Construct(x, x)
.text:00000360                 public _CMtThread_Construct@8
.text:00000360 _CMtThread_Construct@8 proc near        ; CODE XREF: MtCoder_Construct(x)+5Ap
.text:00000360
.text:00000360 arg_0           = dword ptr  8
.text:00000360 arg_4           = dword ptr  0Ch
.text:00000360
.text:00000360                 push    ebp
.text:00000361                 mov     ebp, esp
.text:00000363                 mov     eax, [ebp+arg_0]
.text:00000366                 mov     ecx, [ebp+arg_4]
.text:00000369                 mov     [eax], ecx
.text:0000036B                 mov     edx, [ebp+arg_0]
.text:0000036E                 mov     dword ptr [edx+4], 0
.text:00000375                 mov     eax, [ebp+arg_0]
.text:00000378                 mov     dword ptr [eax+0Ch], 0
.text:0000037F                 mov     ecx, [ebp+arg_0]
.text:00000382                 mov     dword ptr [ecx+3Ch], 0
.text:00000389                 mov     edx, [ebp+arg_0]
.text:0000038C                 mov     dword ptr [edx+40h], 0
.text:00000393                 mov     eax, [ebp+arg_0]
.text:00000396                 add     eax, 18h
.text:00000399                 push    eax
.text:0000039A                 call    _LoopThread_Construct@4 ; LoopThread_Construct(x)
.text:0000039F                 cmp     ebp, esp
.text:000003A1                 call    __RTC_CheckEsp
.text:000003A6                 pop     ebp
.text:000003A7                 retn    8
.text:000003A7 _CMtThread_Construct@8 endp
.text:000003A7
.text:000003A7 ; ---------------------------------------------------------------------------
.text:000003AA                 align 10h
.text:000003B0
.text:000003B0 ; =============== S U B R O U T I N E =======================================
.text:000003B0
.text:000003B0 ; Attributes: bp-based frame
.text:000003B0
.text:000003B0 ; __stdcall MtCoder_Construct(x)
.text:000003B0                 public _MtCoder_Construct@4
.text:000003B0 _MtCoder_Construct@4 proc near
.text:000003B0
.text:000003B0 var_8           = dword ptr -8
.text:000003B0 var_4           = dword ptr -4
.text:000003B0 arg_0           = dword ptr  8
.text:000003B0
.text:000003B0                 push    ebp
.text:000003B1                 mov     ebp, esp
.text:000003B3                 sub     esp, 8
.text:000003B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000003BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003C4                 mov     eax, [ebp+arg_0]
.text:000003C7                 mov     dword ptr [eax+18h], 0
.text:000003CE                 mov     [ebp+var_4], 0
.text:000003D5                 jmp     short loc_3E0
.text:000003D7 ; ---------------------------------------------------------------------------
.text:000003D7
.text:000003D7 loc_3D7:                                ; CODE XREF: MtCoder_Construct(x)+5Fj
.text:000003D7                 mov     ecx, [ebp+var_4]
.text:000003DA                 add     ecx, 1
.text:000003DD                 mov     [ebp+var_4], ecx
.text:000003E0
.text:000003E0 loc_3E0:                                ; CODE XREF: MtCoder_Construct(x)+25j
.text:000003E0                 cmp     [ebp+var_4], 20h ; ' '
.text:000003E4                 jnb     short loc_411
.text:000003E6                 mov     edx, [ebp+var_4]
.text:000003E9                 imul    edx, 44h
.text:000003EC                 mov     eax, [ebp+arg_0]
.text:000003EF                 lea     ecx, [eax+edx+270h]
.text:000003F6                 mov     [ebp+var_8], ecx
.text:000003F9                 mov     edx, [ebp+var_8]
.text:000003FC                 mov     eax, [ebp+var_4]
.text:000003FF                 mov     [edx+14h], eax
.text:00000402                 mov     ecx, [ebp+arg_0]
.text:00000405                 push    ecx
.text:00000406                 mov     edx, [ebp+var_8]
.text:00000409                 push    edx
.text:0000040A                 call    _CMtThread_Construct@8 ; CMtThread_Construct(x,x)
.text:0000040F                 jmp     short loc_3D7
.text:00000411 ; ---------------------------------------------------------------------------
.text:00000411
.text:00000411 loc_411:                                ; CODE XREF: MtCoder_Construct(x)+34j
.text:00000411                 mov     eax, [ebp+arg_0]
.text:00000414                 add     eax, 20h ; ' '
.text:00000417                 push    eax
.text:00000418                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:0000041D                 mov     ecx, [ebp+arg_0]
.text:00000420                 add     ecx, 58h ; 'X'
.text:00000423                 push    ecx
.text:00000424                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:00000429                 add     esp, 8
.text:0000042C                 cmp     ebp, esp
.text:0000042E                 call    __RTC_CheckEsp
.text:00000433                 mov     esp, ebp
.text:00000435                 pop     ebp
.text:00000436                 retn    4
.text:00000436 _MtCoder_Construct@4 endp
.text:00000436
.text:00000436 ; ---------------------------------------------------------------------------
.text:00000439                 align 10h
.text:00000440
.text:00000440 ; =============== S U B R O U T I N E =======================================
.text:00000440
.text:00000440 ; Attributes: bp-based frame
.text:00000440
.text:00000440 ; __stdcall MtCoder_Destruct(x)
.text:00000440                 public _MtCoder_Destruct@4
.text:00000440 _MtCoder_Destruct@4 proc near
.text:00000440
.text:00000440 var_4           = dword ptr -4
.text:00000440 arg_0           = dword ptr  8
.text:00000440
.text:00000440                 push    ebp
.text:00000441                 mov     ebp, esp
.text:00000443                 push    ecx
.text:00000444                 push    esi
.text:00000445                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000044C                 mov     [ebp+var_4], 0
.text:00000453                 jmp     short loc_45E
.text:00000455 ; ---------------------------------------------------------------------------
.text:00000455
.text:00000455 loc_455:                                ; CODE XREF: MtCoder_Destruct(x)+3Aj
.text:00000455                 mov     eax, [ebp+var_4]
.text:00000458                 add     eax, 1
.text:0000045B                 mov     [ebp+var_4], eax
.text:0000045E
.text:0000045E loc_45E:                                ; CODE XREF: MtCoder_Destruct(x)+13j
.text:0000045E                 cmp     [ebp+var_4], 20h ; ' '
.text:00000462                 jnb     short loc_47C
.text:00000464                 mov     ecx, [ebp+var_4]
.text:00000467                 imul    ecx, 44h
.text:0000046A                 mov     edx, [ebp+arg_0]
.text:0000046D                 lea     eax, [edx+ecx+270h]
.text:00000474                 push    eax
.text:00000475                 call    _CMtThread_Destruct@4 ; CMtThread_Destruct(x)
.text:0000047A                 jmp     short loc_455
.text:0000047C ; ---------------------------------------------------------------------------
.text:0000047C
.text:0000047C loc_47C:                                ; CODE XREF: MtCoder_Destruct(x)+22j
.text:0000047C                 mov     ecx, [ebp+arg_0]
.text:0000047F                 add     ecx, 20h ; ' '
.text:00000482                 mov     esi, esp
.text:00000484                 push    ecx             ; lpCriticalSection
.text:00000485                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:0000048B                 cmp     esi, esp
.text:0000048D                 call    __RTC_CheckEsp
.text:00000492                 mov     edx, [ebp+arg_0]
.text:00000495                 add     edx, 58h ; 'X'
.text:00000498                 mov     esi, esp
.text:0000049A                 push    edx             ; lpCriticalSection
.text:0000049B                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:000004A1                 cmp     esi, esp
.text:000004A3                 call    __RTC_CheckEsp
.text:000004A8                 pop     esi
.text:000004A9                 add     esp, 4
.text:000004AC                 cmp     ebp, esp
.text:000004AE                 call    __RTC_CheckEsp
.text:000004B3                 mov     esp, ebp
.text:000004B5                 pop     ebp
.text:000004B6                 retn    4
.text:000004B6 _MtCoder_Destruct@4 endp
.text:000004B6
.text:000004B6 ; ---------------------------------------------------------------------------
.text:000004B9                 align 10h
.text:000004C0
.text:000004C0 ; =============== S U B R O U T I N E =======================================
.text:000004C0
.text:000004C0 ; Attributes: bp-based frame
.text:000004C0
.text:000004C0 ; __stdcall CMtThread_Destruct(x)
.text:000004C0 _CMtThread_Destruct@4 proc near         ; CODE XREF: MtCoder_Destruct(x)+35p
.text:000004C0
.text:000004C0 arg_0           = dword ptr  8
.text:000004C0
.text:000004C0                 push    ebp
.text:000004C1                 mov     ebp, esp
.text:000004C3                 push    esi
.text:000004C4                 mov     eax, [ebp+arg_0]
.text:000004C7                 push    eax
.text:000004C8                 call    _CMtThread_CloseEvents@4 ; CMtThread_CloseEvents(x)
.text:000004CD                 mov     ecx, [ebp+arg_0]
.text:000004D0                 cmp     dword ptr [ecx+18h], 0
.text:000004D4                 jz      short loc_4EE
.text:000004D6                 mov     edx, [ebp+arg_0]
.text:000004D9                 add     edx, 18h
.text:000004DC                 push    edx
.text:000004DD                 call    _LoopThread_StopAndWait@4 ; LoopThread_StopAndWait(x)
.text:000004E2                 mov     eax, [ebp+arg_0]
.text:000004E5                 add     eax, 18h
.text:000004E8                 push    eax
.text:000004E9                 call    _LoopThread_Close@4 ; LoopThread_Close(x)
.text:000004EE
.text:000004EE loc_4EE:                                ; CODE XREF: CMtThread_Destruct(x)+14j
.text:000004EE                 mov     ecx, [ebp+arg_0]
.text:000004F1                 mov     edx, [ecx]
.text:000004F3                 cmp     dword ptr [edx+18h], 0
.text:000004F7                 jz      short loc_51F
.text:000004F9                 mov     esi, esp
.text:000004FB                 mov     eax, [ebp+arg_0]
.text:000004FE                 mov     ecx, [eax+4]
.text:00000501                 push    ecx
.text:00000502                 mov     edx, [ebp+arg_0]
.text:00000505                 mov     eax, [edx]
.text:00000507                 mov     ecx, [eax+18h]
.text:0000050A                 push    ecx
.text:0000050B                 mov     edx, [ebp+arg_0]
.text:0000050E                 mov     eax, [edx]
.text:00000510                 mov     ecx, [eax+18h]
.text:00000513                 mov     edx, [ecx+4]
.text:00000516                 call    edx
.text:00000518                 cmp     esi, esp
.text:0000051A                 call    __RTC_CheckEsp
.text:0000051F
.text:0000051F loc_51F:                                ; CODE XREF: CMtThread_Destruct(x)+37j
.text:0000051F                 mov     eax, [ebp+arg_0]
.text:00000522                 mov     dword ptr [eax+4], 0
.text:00000529                 mov     ecx, [ebp+arg_0]
.text:0000052C                 mov     edx, [ecx]
.text:0000052E                 cmp     dword ptr [edx+18h], 0
.text:00000532                 jz      short loc_55A
.text:00000534                 mov     esi, esp
.text:00000536                 mov     eax, [ebp+arg_0]
.text:00000539                 mov     ecx, [eax+0Ch]
.text:0000053C                 push    ecx
.text:0000053D                 mov     edx, [ebp+arg_0]
.text:00000540                 mov     eax, [edx]
.text:00000542                 mov     ecx, [eax+18h]
.text:00000545                 push    ecx
.text:00000546                 mov     edx, [ebp+arg_0]
.text:00000549                 mov     eax, [edx]
.text:0000054B                 mov     ecx, [eax+18h]
.text:0000054E                 mov     edx, [ecx+4]
.text:00000551                 call    edx
.text:00000553                 cmp     esi, esp
.text:00000555                 call    __RTC_CheckEsp
.text:0000055A
.text:0000055A loc_55A:                                ; CODE XREF: CMtThread_Destruct(x)+72j
.text:0000055A                 mov     eax, [ebp+arg_0]
.text:0000055D                 mov     dword ptr [eax+0Ch], 0
.text:00000564                 pop     esi
.text:00000565                 cmp     ebp, esp
.text:00000567                 call    __RTC_CheckEsp
.text:0000056C                 pop     ebp
.text:0000056D                 retn    4
.text:0000056D _CMtThread_Destruct@4 endp
.text:0000056D
.text:00000570
.text:00000570 ; =============== S U B R O U T I N E =======================================
.text:00000570
.text:00000570 ; Attributes: bp-based frame
.text:00000570
.text:00000570 ; __stdcall CMtThread_CloseEvents(x)
.text:00000570 _CMtThread_CloseEvents@4 proc near      ; CODE XREF: CMtThread_Destruct(x)+8p
.text:00000570                                         ; MtCoder_Code(x)+1D8p
.text:00000570
.text:00000570 arg_0           = dword ptr  8
.text:00000570
.text:00000570                 push    ebp
.text:00000571                 mov     ebp, esp
.text:00000573                 mov     eax, [ebp+arg_0]
.text:00000576                 add     eax, 3Ch ; '<'
.text:00000579                 push    eax
.text:0000057A                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:0000057F                 mov     ecx, [ebp+arg_0]
.text:00000582                 add     ecx, 40h ; '@'
.text:00000585                 push    ecx
.text:00000586                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:0000058B                 cmp     ebp, esp
.text:0000058D                 call    __RTC_CheckEsp
.text:00000592                 pop     ebp
.text:00000593                 retn    4
.text:00000593 _CMtThread_CloseEvents@4 endp
.text:00000593
.text:00000593 ; ---------------------------------------------------------------------------
.text:00000596                 align 10h
.text:000005A0
.text:000005A0 ; =============== S U B R O U T I N E =======================================
.text:000005A0
.text:000005A0 ; Attributes: bp-based frame
.text:000005A0
.text:000005A0 ; __stdcall MtCoder_Code(x)
.text:000005A0                 public _MtCoder_Code@4
.text:000005A0 _MtCoder_Code@4 proc near
.text:000005A0
.text:000005A0 var_24          = dword ptr -24h
.text:000005A0 var_20          = dword ptr -20h
.text:000005A0 var_1C          = dword ptr -1Ch
.text:000005A0 var_18          = dword ptr -18h
.text:000005A0 var_14          = dword ptr -14h
.text:000005A0 var_10          = dword ptr -10h
.text:000005A0 var_C           = dword ptr -0Ch
.text:000005A0 var_8           = dword ptr -8
.text:000005A0 var_4           = dword ptr -4
.text:000005A0 arg_0           = dword ptr  8
.text:000005A0
.text:000005A0                 push    ebp
.text:000005A1                 mov     ebp, esp
.text:000005A3                 sub     esp, 24h
.text:000005A6                 mov     eax, 0CCCCCCCCh
.text:000005AB                 mov     [ebp+var_24], eax
.text:000005AE                 mov     [ebp+var_20], eax
.text:000005B1                 mov     [ebp+var_1C], eax
.text:000005B4                 mov     [ebp+var_18], eax
.text:000005B7                 mov     [ebp+var_14], eax
.text:000005BA                 mov     [ebp+var_10], eax
.text:000005BD                 mov     [ebp+var_C], eax
.text:000005C0                 mov     [ebp+var_8], eax
.text:000005C3                 mov     [ebp+var_4], eax
.text:000005C6                 mov     eax, [ebp+arg_0]
.text:000005C9                 mov     ecx, [eax+8]
.text:000005CC                 mov     [ebp+var_8], ecx
.text:000005CF                 mov     [ebp+var_C], 0
.text:000005D6                 mov     edx, [ebp+arg_0]
.text:000005D9                 mov     dword ptr [edx+38h], 0
.text:000005E0                 mov     eax, [ebp+arg_0]
.text:000005E3                 mov     ecx, [eax+14h]
.text:000005E6                 push    ecx
.text:000005E7                 mov     edx, [ebp+arg_0]
.text:000005EA                 add     edx, 40h ; '@'
.text:000005ED                 push    edx
.text:000005EE                 call    _MtProgress_Init@8 ; MtProgress_Init(x,x)
.text:000005F3                 mov     [ebp+var_4], 0
.text:000005FA                 jmp     short loc_605
.text:000005FC ; ---------------------------------------------------------------------------
.text:000005FC
.text:000005FC loc_5FC:                                ; CODE XREF: MtCoder_Code(x):loc_634j
.text:000005FC                 mov     eax, [ebp+var_4]
.text:000005FF                 add     eax, 1
.text:00000602                 mov     [ebp+var_4], eax
.text:00000605
.text:00000605 loc_605:                                ; CODE XREF: MtCoder_Code(x)+5Aj
.text:00000605                 mov     ecx, [ebp+var_4]
.text:00000608                 cmp     ecx, [ebp+var_8]
.text:0000060B                 jnb     short loc_636
.text:0000060D                 mov     edx, [ebp+var_4]
.text:00000610                 imul    edx, 44h
.text:00000613                 mov     eax, [ebp+arg_0]
.text:00000616                 lea     ecx, [eax+edx+270h]
.text:0000061D                 push    ecx
.text:0000061E                 call    _CMtThread_Prepare@4 ; CMtThread_Prepare(x)
.text:00000623                 mov     [ebp+var_10], eax
.text:00000626                 cmp     [ebp+var_10], 0
.text:0000062A                 jz      short loc_634
.text:0000062C                 mov     eax, [ebp+var_10]
.text:0000062F                 jmp     loc_799
.text:00000634 ; ---------------------------------------------------------------------------
.text:00000634
.text:00000634 loc_634:                                ; CODE XREF: MtCoder_Code(x)+8Aj
.text:00000634                 jmp     short loc_5FC
.text:00000636 ; ---------------------------------------------------------------------------
.text:00000636
.text:00000636 loc_636:                                ; CODE XREF: MtCoder_Code(x)+6Bj
.text:00000636                 mov     [ebp+var_4], 0
.text:0000063D                 jmp     short loc_648
.text:0000063F ; ---------------------------------------------------------------------------
.text:0000063F
.text:0000063F loc_63F:                                ; CODE XREF: MtCoder_Code(x):loc_69Dj
.text:0000063F                 mov     edx, [ebp+var_4]
.text:00000642                 add     edx, 1
.text:00000645                 mov     [ebp+var_4], edx
.text:00000648
.text:00000648 loc_648:                                ; CODE XREF: MtCoder_Code(x)+9Dj
.text:00000648                 mov     eax, [ebp+var_4]
.text:0000064B                 cmp     eax, [ebp+var_8]
.text:0000064E                 jnb     short loc_69F
.text:00000650                 mov     ecx, [ebp+var_4]
.text:00000653                 imul    ecx, 44h
.text:00000656                 mov     edx, [ebp+arg_0]
.text:00000659                 lea     eax, [edx+ecx+270h]
.text:00000660                 mov     [ebp+var_14], eax
.text:00000663                 mov     ecx, [ebp+var_14]
.text:00000666                 add     ecx, 18h
.text:00000669                 mov     [ebp+var_18], ecx
.text:0000066C                 mov     edx, [ebp+var_18]
.text:0000066F                 cmp     dword ptr [edx], 0
.text:00000672                 jnz     short loc_69D
.text:00000674                 mov     eax, [ebp+var_18]
.text:00000677                 mov     dword ptr [eax+10h], offset _ThreadFunc@4 ; ThreadFunc(x)
.text:0000067E                 mov     ecx, [ebp+var_18]
.text:00000681                 mov     edx, [ebp+var_14]
.text:00000684                 mov     [ecx+14h], edx
.text:00000687                 mov     eax, [ebp+var_18]
.text:0000068A                 push    eax
.text:0000068B                 call    _LoopThread_Create@4 ; LoopThread_Create(x)
.text:00000690                 test    eax, eax
.text:00000692                 jz      short loc_69D
.text:00000694                 mov     [ebp+var_C], 0Ch
.text:0000069B                 jmp     short loc_69F
.text:0000069D ; ---------------------------------------------------------------------------
.text:0000069D
.text:0000069D loc_69D:                                ; CODE XREF: MtCoder_Code(x)+D2j
.text:0000069D                                         ; MtCoder_Code(x)+F2j
.text:0000069D                 jmp     short loc_63F
.text:0000069F ; ---------------------------------------------------------------------------
.text:0000069F
.text:0000069F loc_69F:                                ; CODE XREF: MtCoder_Code(x)+AEj
.text:0000069F                                         ; MtCoder_Code(x)+FBj
.text:0000069F                 cmp     [ebp+var_C], 0
.text:000006A3                 jnz     loc_74D
.text:000006A9                 mov     [ebp+var_4], 0
.text:000006B0                 jmp     short loc_6BB
.text:000006B2 ; ---------------------------------------------------------------------------
.text:000006B2
.text:000006B2 loc_6B2:                                ; CODE XREF: MtCoder_Code(x):loc_6FCj
.text:000006B2                 mov     ecx, [ebp+var_4]
.text:000006B5                 add     ecx, 1
.text:000006B8                 mov     [ebp+var_4], ecx
.text:000006BB
.text:000006BB loc_6BB:                                ; CODE XREF: MtCoder_Code(x)+110j
.text:000006BB                 mov     edx, [ebp+var_4]
.text:000006BE                 cmp     edx, [ebp+var_8]
.text:000006C1                 jnb     short loc_6FE
.text:000006C3                 mov     eax, [ebp+var_4]
.text:000006C6                 imul    eax, 44h
.text:000006C9                 mov     ecx, [ebp+arg_0]
.text:000006CC                 lea     edx, [ecx+eax+270h]
.text:000006D3                 mov     [ebp+var_20], edx
.text:000006D6                 mov     eax, [ebp+var_20]
.text:000006D9                 add     eax, 18h
.text:000006DC                 push    eax
.text:000006DD                 call    _LoopThread_StartSubThread@4 ; LoopThread_StartSubThread(x)
.text:000006E2                 test    eax, eax
.text:000006E4                 jz      short loc_6FC
.text:000006E6                 mov     [ebp+var_C], 0Ch
.text:000006ED                 mov     ecx, [ebp+arg_0]
.text:000006F0                 mov     dword ptr [ecx+2A4h], 1
.text:000006FA                 jmp     short loc_6FE
.text:000006FC ; ---------------------------------------------------------------------------
.text:000006FC
.text:000006FC loc_6FC:                                ; CODE XREF: MtCoder_Code(x)+144j
.text:000006FC                 jmp     short loc_6B2
.text:000006FE ; ---------------------------------------------------------------------------
.text:000006FE
.text:000006FE loc_6FE:                                ; CODE XREF: MtCoder_Code(x)+121j
.text:000006FE                                         ; MtCoder_Code(x)+15Aj
.text:000006FE                 mov     edx, [ebp+arg_0]
.text:00000701                 add     edx, 2B0h
.text:00000707                 push    edx
.text:00000708                 call    _Event_Set@4    ; Event_Set(x)
.text:0000070D                 mov     eax, [ebp+arg_0]
.text:00000710                 add     eax, 2ACh
.text:00000715                 push    eax
.text:00000716                 call    _Event_Set@4    ; Event_Set(x)
.text:0000071B                 mov     [ebp+var_1C], 0
.text:00000722                 jmp     short loc_72D
.text:00000724 ; ---------------------------------------------------------------------------
.text:00000724
.text:00000724 loc_724:                                ; CODE XREF: MtCoder_Code(x)+1ABj
.text:00000724                 mov     ecx, [ebp+var_1C]
.text:00000727                 add     ecx, 1
.text:0000072A                 mov     [ebp+var_1C], ecx
.text:0000072D
.text:0000072D loc_72D:                                ; CODE XREF: MtCoder_Code(x)+182j
.text:0000072D                 mov     edx, [ebp+var_1C]
.text:00000730                 cmp     edx, [ebp+var_4]
.text:00000733                 jnb     short loc_74D
.text:00000735                 mov     eax, [ebp+var_1C]
.text:00000738                 imul    eax, 44h
.text:0000073B                 mov     ecx, [ebp+arg_0]
.text:0000073E                 lea     edx, [ecx+eax+288h]
.text:00000745                 push    edx
.text:00000746                 call    _LoopThread_WaitSubThread@4 ; LoopThread_WaitSubThread(x)
.text:0000074B                 jmp     short loc_724
.text:0000074D ; ---------------------------------------------------------------------------
.text:0000074D
.text:0000074D loc_74D:                                ; CODE XREF: MtCoder_Code(x)+103j
.text:0000074D                                         ; MtCoder_Code(x)+193j
.text:0000074D                 mov     [ebp+var_4], 0
.text:00000754                 jmp     short loc_75F
.text:00000756 ; ---------------------------------------------------------------------------
.text:00000756
.text:00000756 loc_756:                                ; CODE XREF: MtCoder_Code(x)+1DDj
.text:00000756                 mov     eax, [ebp+var_4]
.text:00000759                 add     eax, 1
.text:0000075C                 mov     [ebp+var_4], eax
.text:0000075F
.text:0000075F loc_75F:                                ; CODE XREF: MtCoder_Code(x)+1B4j
.text:0000075F                 mov     ecx, [ebp+var_4]
.text:00000762                 cmp     ecx, [ebp+var_8]
.text:00000765                 jnb     short loc_77F
.text:00000767                 mov     edx, [ebp+var_4]
.text:0000076A                 imul    edx, 44h
.text:0000076D                 mov     eax, [ebp+arg_0]
.text:00000770                 lea     ecx, [eax+edx+270h]
.text:00000777                 push    ecx
.text:00000778                 call    _CMtThread_CloseEvents@4 ; CMtThread_CloseEvents(x)
.text:0000077D                 jmp     short loc_756
.text:0000077F ; ---------------------------------------------------------------------------
.text:0000077F
.text:0000077F loc_77F:                                ; CODE XREF: MtCoder_Code(x)+1C5j
.text:0000077F                 cmp     [ebp+var_C], 0
.text:00000783                 jnz     short loc_790
.text:00000785                 mov     edx, [ebp+arg_0]
.text:00000788                 mov     eax, [edx+38h]
.text:0000078B                 mov     [ebp+var_24], eax
.text:0000078E                 jmp     short loc_796
.text:00000790 ; ---------------------------------------------------------------------------
.text:00000790
.text:00000790 loc_790:                                ; CODE XREF: MtCoder_Code(x)+1E3j
.text:00000790                 mov     ecx, [ebp+var_C]
.text:00000793                 mov     [ebp+var_24], ecx
.text:00000796
.text:00000796 loc_796:                                ; CODE XREF: MtCoder_Code(x)+1EEj
.text:00000796                 mov     eax, [ebp+var_24]
.text:00000799
.text:00000799 loc_799:                                ; CODE XREF: MtCoder_Code(x)+8Fj
.text:00000799                 add     esp, 24h
.text:0000079C                 cmp     ebp, esp
.text:0000079E                 call    __RTC_CheckEsp
.text:000007A3                 mov     esp, ebp
.text:000007A5                 pop     ebp
.text:000007A6                 retn    4
.text:000007A6 _MtCoder_Code@4 endp
.text:000007A6
.text:000007A6 ; ---------------------------------------------------------------------------
.text:000007A9                 align 10h
.text:000007B0
.text:000007B0 ; =============== S U B R O U T I N E =======================================
.text:000007B0
.text:000007B0 ; Attributes: bp-based frame
.text:000007B0
.text:000007B0 ; __stdcall MtProgress_Init(x, x)
.text:000007B0 _MtProgress_Init@8 proc near            ; CODE XREF: MtCoder_Code(x)+4Ep
.text:000007B0
.text:000007B0 var_4           = dword ptr -4
.text:000007B0 arg_0           = dword ptr  8
.text:000007B0 arg_4           = dword ptr  0Ch
.text:000007B0
.text:000007B0                 push    ebp
.text:000007B1                 mov     ebp, esp
.text:000007B3                 push    ecx
.text:000007B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007BB                 mov     [ebp+var_4], 0
.text:000007C2                 jmp     short loc_7CD
.text:000007C4 ; ---------------------------------------------------------------------------
.text:000007C4
.text:000007C4 loc_7C4:                                ; CODE XREF: MtProgress_Init(x,x)+55j
.text:000007C4                 mov     eax, [ebp+var_4]
.text:000007C7                 add     eax, 1
.text:000007CA                 mov     [ebp+var_4], eax
.text:000007CD
.text:000007CD loc_7CD:                                ; CODE XREF: MtProgress_Init(x,x)+12j
.text:000007CD                 cmp     [ebp+var_4], 20h ; ' '
.text:000007D1                 jnb     short loc_807
.text:000007D3                 mov     ecx, [ebp+var_4]
.text:000007D6                 mov     edx, [ebp+arg_0]
.text:000007D9                 mov     dword ptr [edx+ecx*8+130h], 0
.text:000007E4                 mov     dword ptr [edx+ecx*8+134h], 0
.text:000007EF                 mov     eax, [ebp+var_4]
.text:000007F2                 mov     ecx, [ebp+arg_0]
.text:000007F5                 mov     dword ptr [ecx+eax*8+30h], 0
.text:000007FD                 mov     dword ptr [ecx+eax*8+34h], 0
.text:00000805                 jmp     short loc_7C4
.text:00000807 ; ---------------------------------------------------------------------------
.text:00000807
.text:00000807 loc_807:                                ; CODE XREF: MtProgress_Init(x,x)+21j
.text:00000807                 mov     edx, [ebp+arg_0]
.text:0000080A                 mov     dword ptr [edx+8], 0
.text:00000811                 mov     dword ptr [edx+0Ch], 0
.text:00000818                 mov     eax, [ebp+arg_0]
.text:0000081B                 mov     dword ptr [eax], 0
.text:00000821                 mov     dword ptr [eax+4], 0
.text:00000828                 mov     ecx, [ebp+arg_0]
.text:0000082B                 mov     edx, [ebp+arg_4]
.text:0000082E                 mov     [ecx+10h], edx
.text:00000831                 mov     eax, [ebp+arg_0]
.text:00000834                 mov     dword ptr [eax+14h], 0
.text:0000083B                 mov     esp, ebp
.text:0000083D                 pop     ebp
.text:0000083E                 retn    8
.text:0000083E _MtProgress_Init@8 endp
.text:0000083E
.text:0000083E ; ---------------------------------------------------------------------------
.text:00000841                 align 10h
.text:00000850
.text:00000850 ; =============== S U B R O U T I N E =======================================
.text:00000850
.text:00000850 ; Attributes: bp-based frame
.text:00000850
.text:00000850 ; __stdcall CMtThread_Prepare(x)
.text:00000850 _CMtThread_Prepare@4 proc near          ; CODE XREF: MtCoder_Code(x)+7Ep
.text:00000850
.text:00000850 arg_0           = dword ptr  8
.text:00000850
.text:00000850                 push    ebp
.text:00000851                 mov     ebp, esp
.text:00000853                 push    esi
.text:00000854                 mov     eax, [ebp+arg_0]
.text:00000857                 cmp     dword ptr [eax+0Ch], 0
.text:0000085B                 jz      short loc_86C
.text:0000085D                 mov     ecx, [ebp+arg_0]
.text:00000860                 mov     edx, [ecx]
.text:00000862                 mov     eax, [ebp+arg_0]
.text:00000865                 mov     ecx, [eax+10h]
.text:00000868                 cmp     ecx, [edx]
.text:0000086A                 jz      short loc_8DD
.text:0000086C
.text:0000086C loc_86C:                                ; CODE XREF: CMtThread_Prepare(x)+Bj
.text:0000086C                 mov     esi, esp
.text:0000086E                 mov     edx, [ebp+arg_0]
.text:00000871                 mov     eax, [edx+0Ch]
.text:00000874                 push    eax
.text:00000875                 mov     ecx, [ebp+arg_0]
.text:00000878                 mov     edx, [ecx]
.text:0000087A                 mov     eax, [edx+18h]
.text:0000087D                 push    eax
.text:0000087E                 mov     ecx, [ebp+arg_0]
.text:00000881                 mov     edx, [ecx]
.text:00000883                 mov     eax, [edx+18h]
.text:00000886                 mov     ecx, [eax+4]
.text:00000889                 call    ecx
.text:0000088B                 cmp     esi, esp
.text:0000088D                 call    __RTC_CheckEsp
.text:00000892                 mov     edx, [ebp+arg_0]
.text:00000895                 mov     eax, [edx]
.text:00000897                 mov     ecx, [ebp+arg_0]
.text:0000089A                 mov     edx, [eax]
.text:0000089C                 mov     [ecx+10h], edx
.text:0000089F                 mov     esi, esp
.text:000008A1                 mov     eax, [ebp+arg_0]
.text:000008A4                 mov     ecx, [eax+10h]
.text:000008A7                 push    ecx
.text:000008A8                 mov     edx, [ebp+arg_0]
.text:000008AB                 mov     eax, [edx]
.text:000008AD                 mov     ecx, [eax+18h]
.text:000008B0                 push    ecx
.text:000008B1                 mov     edx, [ebp+arg_0]
.text:000008B4                 mov     eax, [edx]
.text:000008B6                 mov     ecx, [eax+18h]
.text:000008B9                 mov     edx, [ecx]
.text:000008BB                 call    edx
.text:000008BD                 cmp     esi, esp
.text:000008BF                 call    __RTC_CheckEsp
.text:000008C4                 mov     ecx, [ebp+arg_0]
.text:000008C7                 mov     [ecx+0Ch], eax
.text:000008CA                 mov     edx, [ebp+arg_0]
.text:000008CD                 cmp     dword ptr [edx+0Ch], 0
.text:000008D1                 jnz     short loc_8DD
.text:000008D3                 mov     eax, 2
.text:000008D8                 jmp     loc_9A9
.text:000008DD ; ---------------------------------------------------------------------------
.text:000008DD
.text:000008DD loc_8DD:                                ; CODE XREF: CMtThread_Prepare(x)+1Aj
.text:000008DD                                         ; CMtThread_Prepare(x)+81j
.text:000008DD                 mov     eax, [ebp+arg_0]
.text:000008E0                 cmp     dword ptr [eax+4], 0
.text:000008E4                 jz      short loc_8F6
.text:000008E6                 mov     ecx, [ebp+arg_0]
.text:000008E9                 mov     edx, [ecx]
.text:000008EB                 mov     eax, [ebp+arg_0]
.text:000008EE                 mov     ecx, [eax+8]
.text:000008F1                 cmp     ecx, [edx+4]
.text:000008F4                 jz      short loc_965
.text:000008F6
.text:000008F6 loc_8F6:                                ; CODE XREF: CMtThread_Prepare(x)+94j
.text:000008F6                 mov     esi, esp
.text:000008F8                 mov     edx, [ebp+arg_0]
.text:000008FB                 mov     eax, [edx+4]
.text:000008FE                 push    eax
.text:000008FF                 mov     ecx, [ebp+arg_0]
.text:00000902                 mov     edx, [ecx]
.text:00000904                 mov     eax, [edx+18h]
.text:00000907                 push    eax
.text:00000908                 mov     ecx, [ebp+arg_0]
.text:0000090B                 mov     edx, [ecx]
.text:0000090D                 mov     eax, [edx+18h]
.text:00000910                 mov     ecx, [eax+4]
.text:00000913                 call    ecx
.text:00000915                 cmp     esi, esp
.text:00000917                 call    __RTC_CheckEsp
.text:0000091C                 mov     edx, [ebp+arg_0]
.text:0000091F                 mov     eax, [edx]
.text:00000921                 mov     ecx, [ebp+arg_0]
.text:00000924                 mov     edx, [eax+4]
.text:00000927                 mov     [ecx+8], edx
.text:0000092A                 mov     esi, esp
.text:0000092C                 mov     eax, [ebp+arg_0]
.text:0000092F                 mov     ecx, [eax+8]
.text:00000932                 push    ecx
.text:00000933                 mov     edx, [ebp+arg_0]
.text:00000936                 mov     eax, [edx]
.text:00000938                 mov     ecx, [eax+18h]
.text:0000093B                 push    ecx
.text:0000093C                 mov     edx, [ebp+arg_0]
.text:0000093F                 mov     eax, [edx]
.text:00000941                 mov     ecx, [eax+18h]
.text:00000944                 mov     edx, [ecx]
.text:00000946                 call    edx
.text:00000948                 cmp     esi, esp
.text:0000094A                 call    __RTC_CheckEsp
.text:0000094F                 mov     ecx, [ebp+arg_0]
.text:00000952                 mov     [ecx+4], eax
.text:00000955                 mov     edx, [ebp+arg_0]
.text:00000958                 cmp     dword ptr [edx+4], 0
.text:0000095C                 jnz     short loc_965
.text:0000095E                 mov     eax, 2
.text:00000963                 jmp     short loc_9A9
.text:00000965 ; ---------------------------------------------------------------------------
.text:00000965
.text:00000965 loc_965:                                ; CODE XREF: CMtThread_Prepare(x)+A4j
.text:00000965                                         ; CMtThread_Prepare(x)+10Cj
.text:00000965                 mov     eax, [ebp+arg_0]
.text:00000968                 mov     dword ptr [eax+34h], 0
.text:0000096F                 mov     ecx, [ebp+arg_0]
.text:00000972                 mov     dword ptr [ecx+38h], 0
.text:00000979                 mov     edx, [ebp+arg_0]
.text:0000097C                 add     edx, 3Ch ; '<'
.text:0000097F                 push    edx
.text:00000980                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:00000985                 test    eax, eax
.text:00000987                 jz      short loc_990
.text:00000989                 mov     eax, 0Ch
.text:0000098E                 jmp     short loc_9A9
.text:00000990 ; ---------------------------------------------------------------------------
.text:00000990
.text:00000990 loc_990:                                ; CODE XREF: CMtThread_Prepare(x)+137j
.text:00000990                 mov     eax, [ebp+arg_0]
.text:00000993                 add     eax, 40h ; '@'
.text:00000996                 push    eax
.text:00000997                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:0000099C                 test    eax, eax
.text:0000099E                 jz      short loc_9A7
.text:000009A0                 mov     eax, 0Ch
.text:000009A5                 jmp     short loc_9A9
.text:000009A7 ; ---------------------------------------------------------------------------
.text:000009A7
.text:000009A7 loc_9A7:                                ; CODE XREF: CMtThread_Prepare(x)+14Ej
.text:000009A7                 xor     eax, eax
.text:000009A9
.text:000009A9 loc_9A9:                                ; CODE XREF: CMtThread_Prepare(x)+88j
.text:000009A9                                         ; CMtThread_Prepare(x)+113j ...
.text:000009A9                 pop     esi
.text:000009AA                 cmp     ebp, esp
.text:000009AC                 call    __RTC_CheckEsp
.text:000009B1                 pop     ebp
.text:000009B2                 retn    4
.text:000009B2 _CMtThread_Prepare@4 endp
.text:000009B2
.text:000009B2 ; ---------------------------------------------------------------------------
.text:000009B5                 align 10h
.text:000009C0
.text:000009C0 ; =============== S U B R O U T I N E =======================================
.text:000009C0
.text:000009C0 ; Attributes: bp-based frame
.text:000009C0
.text:000009C0 ; __stdcall ThreadFunc(x)
.text:000009C0 _ThreadFunc@4   proc near               ; DATA XREF: MtCoder_Code(x)+D7o
.text:000009C0
.text:000009C0 var_1C          = dword ptr -1Ch
.text:000009C0 var_18          = dword ptr -18h
.text:000009C0 var_14          = dword ptr -14h
.text:000009C0 var_10          = dword ptr -10h
.text:000009C0 var_C           = dword ptr -0Ch
.text:000009C0 var_8           = dword ptr -8
.text:000009C0 var_4           = dword ptr -4
.text:000009C0 arg_0           = dword ptr  8
.text:000009C0
.text:000009C0                 push    ebp
.text:000009C1                 mov     ebp, esp
.text:000009C3                 sub     esp, 1Ch
.text:000009C6                 mov     eax, 0CCCCCCCCh
.text:000009CB                 mov     [ebp+var_1C], eax
.text:000009CE                 mov     [ebp+var_18], eax
.text:000009D1                 mov     [ebp+var_14], eax
.text:000009D4                 mov     [ebp+var_10], eax
.text:000009D7                 mov     [ebp+var_C], eax
.text:000009DA                 mov     [ebp+var_8], eax
.text:000009DD                 mov     [ebp+var_4], eax
.text:000009E0                 mov     eax, [ebp+arg_0]
.text:000009E3                 mov     [ebp+var_4], eax
.text:000009E6
.text:000009E6 loc_9E6:                                ; CODE XREF: ThreadFunc(x):loc_A95j
.text:000009E6                 mov     ecx, [ebp+var_4]
.text:000009E9                 mov     edx, [ecx]
.text:000009EB                 mov     eax, [edx+8]
.text:000009EE                 sub     eax, 1
.text:000009F1                 mov     ecx, [ebp+var_4]
.text:000009F4                 cmp     [ecx+14h], eax
.text:000009F7                 jnz     short loc_A02
.text:000009F9                 mov     [ebp+var_1C], 0
.text:00000A00                 jmp     short loc_A0E
.text:00000A02 ; ---------------------------------------------------------------------------
.text:00000A02
.text:00000A02 loc_A02:                                ; CODE XREF: ThreadFunc(x)+37j
.text:00000A02                 mov     edx, [ebp+var_4]
.text:00000A05                 mov     eax, [edx+14h]
.text:00000A08                 add     eax, 1
.text:00000A0B                 mov     [ebp+var_1C], eax
.text:00000A0E
.text:00000A0E loc_A0E:                                ; CODE XREF: ThreadFunc(x)+40j
.text:00000A0E                 mov     ecx, [ebp+var_4]
.text:00000A11                 mov     edx, [ecx]
.text:00000A13                 mov     eax, [ebp+var_1C]
.text:00000A16                 imul    eax, 44h
.text:00000A19                 lea     ecx, [edx+eax+270h]
.text:00000A20                 mov     [ebp+var_14], ecx
.text:00000A23                 lea     edx, [ebp+var_C]
.text:00000A26                 push    edx
.text:00000A27                 mov     eax, [ebp+var_4]
.text:00000A2A                 push    eax
.text:00000A2B                 call    _MtThread_Process@8 ; MtThread_Process(x,x)
.text:00000A30                 mov     [ebp+var_18], eax
.text:00000A33                 cmp     [ebp+var_18], 0
.text:00000A37                 jz      short loc_A8B
.text:00000A39                 mov     ecx, [ebp+var_18]
.text:00000A3C                 push    ecx
.text:00000A3D                 mov     edx, [ebp+var_4]
.text:00000A40                 mov     eax, [edx]
.text:00000A42                 push    eax
.text:00000A43                 call    _MtCoder_SetError@8 ; MtCoder_SetError(x,x)
.text:00000A48                 mov     ecx, [ebp+var_18]
.text:00000A4B                 push    ecx
.text:00000A4C                 mov     edx, [ebp+var_4]
.text:00000A4F                 mov     eax, [edx]
.text:00000A51                 add     eax, 40h ; '@'
.text:00000A54                 push    eax
.text:00000A55                 call    _MtProgress_SetError@8 ; MtProgress_SetError(x,x)
.text:00000A5A                 mov     ecx, [ebp+var_14]
.text:00000A5D                 mov     dword ptr [ecx+34h], 1
.text:00000A64                 mov     edx, [ebp+var_14]
.text:00000A67                 mov     dword ptr [edx+38h], 1
.text:00000A6E                 mov     eax, [ebp+var_14]
.text:00000A71                 add     eax, 3Ch ; '<'
.text:00000A74                 push    eax
.text:00000A75                 call    _Event_Set@4    ; Event_Set(x)
.text:00000A7A                 mov     ecx, [ebp+var_14]
.text:00000A7D                 add     ecx, 40h ; '@'
.text:00000A80                 push    ecx
.text:00000A81                 call    _Event_Set@4    ; Event_Set(x)
.text:00000A86                 mov     eax, [ebp+var_18]
.text:00000A89                 jmp     short loc_A9A
.text:00000A8B ; ---------------------------------------------------------------------------
.text:00000A8B
.text:00000A8B loc_A8B:                                ; CODE XREF: ThreadFunc(x)+77j
.text:00000A8B                 cmp     [ebp+var_C], 0
.text:00000A8F                 jz      short loc_A95
.text:00000A91                 xor     eax, eax
.text:00000A93                 jmp     short loc_A9A
.text:00000A95 ; ---------------------------------------------------------------------------
.text:00000A95
.text:00000A95 loc_A95:                                ; CODE XREF: ThreadFunc(x)+CFj
.text:00000A95                 jmp     loc_9E6
.text:00000A9A ; ---------------------------------------------------------------------------
.text:00000A9A
.text:00000A9A loc_A9A:                                ; CODE XREF: ThreadFunc(x)+C9j
.text:00000A9A                                         ; ThreadFunc(x)+D3j
.text:00000A9A                 push    edx
.text:00000A9B                 mov     ecx, ebp
.text:00000A9D                 push    eax
.text:00000A9E                 lea     edx, $LN11
.text:00000AA4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000AA9                 pop     eax
.text:00000AAA                 pop     edx
.text:00000AAB                 add     esp, 1Ch
.text:00000AAE                 cmp     ebp, esp
.text:00000AB0                 call    __RTC_CheckEsp
.text:00000AB5                 mov     esp, ebp
.text:00000AB7                 pop     ebp
.text:00000AB8                 retn    4
.text:00000AB8 _ThreadFunc@4   endp
.text:00000AB8
.text:00000AB8 ; ---------------------------------------------------------------------------
.text:00000ABB                 align 4
.text:00000ABC $LN11           dd 1                    ; DATA XREF: ThreadFunc(x)+DEo
.text:00000AC0                 dd offset $LN10
.text:00000AC4 $LN10           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000AC0o
.text:00000ACC                 dd offset $LN9          ; "stop"
.text:00000AD0 $LN9            db 'stop',0             ; DATA XREF: .text:00000ACCo
.text:00000AD5                 align 10h
.text:00000AE0
.text:00000AE0 ; =============== S U B R O U T I N E =======================================
.text:00000AE0
.text:00000AE0 ; Attributes: bp-based frame
.text:00000AE0
.text:00000AE0 ; __stdcall MtProgress_SetError(x, x)
.text:00000AE0 _MtProgress_SetError@8 proc near        ; CODE XREF: ThreadFunc(x)+95p
.text:00000AE0
.text:00000AE0 arg_0           = dword ptr  8
.text:00000AE0 arg_4           = dword ptr  0Ch
.text:00000AE0
.text:00000AE0                 push    ebp
.text:00000AE1                 mov     ebp, esp
.text:00000AE3                 push    esi
.text:00000AE4                 mov     eax, [ebp+arg_0]
.text:00000AE7                 add     eax, 18h
.text:00000AEA                 mov     esi, esp
.text:00000AEC                 push    eax             ; lpCriticalSection
.text:00000AED                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00000AF3                 cmp     esi, esp
.text:00000AF5                 call    __RTC_CheckEsp
.text:00000AFA                 mov     ecx, [ebp+arg_0]
.text:00000AFD                 cmp     dword ptr [ecx+14h], 0
.text:00000B01                 jnz     short loc_B0C
.text:00000B03                 mov     edx, [ebp+arg_0]
.text:00000B06                 mov     eax, [ebp+arg_4]
.text:00000B09                 mov     [edx+14h], eax
.text:00000B0C
.text:00000B0C loc_B0C:                                ; CODE XREF: MtProgress_SetError(x,x)+21j
.text:00000B0C                 mov     ecx, [ebp+arg_0]
.text:00000B0F                 add     ecx, 18h
.text:00000B12                 mov     esi, esp
.text:00000B14                 push    ecx             ; lpCriticalSection
.text:00000B15                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00000B1B                 cmp     esi, esp
.text:00000B1D                 call    __RTC_CheckEsp
.text:00000B22                 pop     esi
.text:00000B23                 cmp     ebp, esp
.text:00000B25                 call    __RTC_CheckEsp
.text:00000B2A                 pop     ebp
.text:00000B2B                 retn    8
.text:00000B2B _MtProgress_SetError@8 endp
.text:00000B2B
.text:00000B2B ; ---------------------------------------------------------------------------
.text:00000B2E                 align 10h
.text:00000B30
.text:00000B30 ; =============== S U B R O U T I N E =======================================
.text:00000B30
.text:00000B30 ; Attributes: bp-based frame
.text:00000B30
.text:00000B30 ; __stdcall MtCoder_SetError(x, x)
.text:00000B30 _MtCoder_SetError@8 proc near           ; CODE XREF: ThreadFunc(x)+83p
.text:00000B30
.text:00000B30 arg_0           = dword ptr  8
.text:00000B30 arg_4           = dword ptr  0Ch
.text:00000B30
.text:00000B30                 push    ebp
.text:00000B31                 mov     ebp, esp
.text:00000B33                 push    esi
.text:00000B34                 mov     eax, [ebp+arg_0]
.text:00000B37                 add     eax, 20h ; ' '
.text:00000B3A                 mov     esi, esp
.text:00000B3C                 push    eax             ; lpCriticalSection
.text:00000B3D                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00000B43                 cmp     esi, esp
.text:00000B45                 call    __RTC_CheckEsp
.text:00000B4A                 mov     ecx, [ebp+arg_0]
.text:00000B4D                 cmp     dword ptr [ecx+38h], 0
.text:00000B51                 jnz     short loc_B5C
.text:00000B53                 mov     edx, [ebp+arg_0]
.text:00000B56                 mov     eax, [ebp+arg_4]
.text:00000B59                 mov     [edx+38h], eax
.text:00000B5C
.text:00000B5C loc_B5C:                                ; CODE XREF: MtCoder_SetError(x,x)+21j
.text:00000B5C                 mov     ecx, [ebp+arg_0]
.text:00000B5F                 add     ecx, 20h ; ' '
.text:00000B62                 mov     esi, esp
.text:00000B64                 push    ecx             ; lpCriticalSection
.text:00000B65                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00000B6B                 cmp     esi, esp
.text:00000B6D                 call    __RTC_CheckEsp
.text:00000B72                 pop     esi
.text:00000B73                 cmp     ebp, esp
.text:00000B75                 call    __RTC_CheckEsp
.text:00000B7A                 pop     ebp
.text:00000B7B                 retn    8
.text:00000B7B _MtCoder_SetError@8 endp
.text:00000B7B
.text:00000B7B ; ---------------------------------------------------------------------------
.text:00000B7E                 align 10h
.text:00000B80
.text:00000B80 ; =============== S U B R O U T I N E =======================================
.text:00000B80
.text:00000B80 ; Attributes: bp-based frame
.text:00000B80
.text:00000B80 ; __stdcall MtThread_Process(x, x)
.text:00000B80 _MtThread_Process@8 proc near           ; CODE XREF: ThreadFunc(x)+6Bp
.text:00000B80
.text:00000B80 var_28          = dword ptr -28h
.text:00000B80 var_24          = dword ptr -24h
.text:00000B80 var_20          = dword ptr -20h
.text:00000B80 var_18          = dword ptr -18h
.text:00000B80 var_C           = dword ptr -0Ch
.text:00000B80 var_4           = dword ptr -4
.text:00000B80 arg_0           = dword ptr  8
.text:00000B80 arg_4           = dword ptr  0Ch
.text:00000B80
.text:00000B80                 push    ebp
.text:00000B81                 mov     ebp, esp
.text:00000B83                 sub     esp, 28h
.text:00000B86                 push    esi
.text:00000B87                 push    edi
.text:00000B88                 lea     edi, [ebp+var_28]
.text:00000B8B                 mov     ecx, 0Ah
.text:00000B90                 mov     eax, 0CCCCCCCCh
.text:00000B95                 rep stosd
.text:00000B97                 mov     eax, [ebp+arg_4]
.text:00000B9A                 mov     dword ptr [eax], 1
.text:00000BA0                 mov     ecx, [ebp+arg_0]
.text:00000BA3                 mov     edx, [ecx+3Ch]
.text:00000BA6                 push    edx
.text:00000BA7                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00000BAC                 test    eax, eax
.text:00000BAE                 jz      short loc_BBA
.text:00000BB0                 mov     eax, 0Ch
.text:00000BB5                 jmp     loc_D6E
.text:00000BBA ; ---------------------------------------------------------------------------
.text:00000BBA
.text:00000BBA loc_BBA:                                ; CODE XREF: MtThread_Process(x,x)+2Ej
.text:00000BBA                 mov     eax, [ebp+arg_0]
.text:00000BBD                 mov     ecx, [eax]
.text:00000BBF                 mov     edx, [ecx+8]
.text:00000BC2                 sub     edx, 1
.text:00000BC5                 mov     eax, [ebp+arg_0]
.text:00000BC8                 cmp     [eax+14h], edx
.text:00000BCB                 jnz     short loc_BD6
.text:00000BCD                 mov     [ebp+var_28], 0
.text:00000BD4                 jmp     short loc_BE2
.text:00000BD6 ; ---------------------------------------------------------------------------
.text:00000BD6
.text:00000BD6 loc_BD6:                                ; CODE XREF: MtThread_Process(x,x)+4Bj
.text:00000BD6                 mov     ecx, [ebp+arg_0]
.text:00000BD9                 mov     edx, [ecx+14h]
.text:00000BDC                 add     edx, 1
.text:00000BDF                 mov     [ebp+var_28], edx
.text:00000BE2
.text:00000BE2 loc_BE2:                                ; CODE XREF: MtThread_Process(x,x)+54j
.text:00000BE2                 mov     eax, [ebp+arg_0]
.text:00000BE5                 mov     ecx, [eax]
.text:00000BE7                 mov     edx, [ebp+var_28]
.text:00000BEA                 imul    edx, 44h
.text:00000BED                 lea     eax, [ecx+edx+270h]
.text:00000BF4                 mov     [ebp+var_4], eax
.text:00000BF7                 mov     ecx, [ebp+arg_0]
.text:00000BFA                 cmp     dword ptr [ecx+34h], 0
.text:00000BFE                 jz      short loc_C22
.text:00000C00                 mov     edx, [ebp+var_4]
.text:00000C03                 mov     dword ptr [edx+34h], 1
.text:00000C0A                 mov     eax, [ebp+var_4]
.text:00000C0D                 add     eax, 3Ch ; '<'
.text:00000C10                 push    eax
.text:00000C11                 call    _Event_Set@4    ; Event_Set(x)
.text:00000C16                 neg     eax
.text:00000C18                 sbb     eax, eax
.text:00000C1A                 and     eax, 0Ch
.text:00000C1D                 jmp     loc_D6E
.text:00000C22 ; ---------------------------------------------------------------------------
.text:00000C22
.text:00000C22 loc_C22:                                ; CODE XREF: MtThread_Process(x,x)+7Ej
.text:00000C22                 mov     ecx, [ebp+arg_0]
.text:00000C25                 mov     edx, [ecx]
.text:00000C27                 mov     eax, [edx]
.text:00000C29                 mov     [ebp+var_C], eax
.text:00000C2C                 mov     ecx, [ebp+arg_0]
.text:00000C2F                 mov     edx, [ecx+8]
.text:00000C32                 mov     [ebp+var_18], edx
.text:00000C35                 lea     eax, [ebp+var_C]
.text:00000C38                 push    eax
.text:00000C39                 mov     ecx, [ebp+arg_0]
.text:00000C3C                 mov     edx, [ecx+0Ch]
.text:00000C3F                 push    edx
.text:00000C40                 mov     eax, [ebp+arg_0]
.text:00000C43                 mov     ecx, [eax]
.text:00000C45                 mov     edx, [ecx+0Ch]
.text:00000C48                 push    edx
.text:00000C49                 call    _FullRead@12    ; FullRead(x,x,x)
.text:00000C4E                 mov     [ebp+var_20], eax
.text:00000C51                 cmp     [ebp+var_20], 0
.text:00000C55                 jz      short loc_C5F
.text:00000C57                 mov     eax, [ebp+var_20]
.text:00000C5A                 jmp     loc_D6E
.text:00000C5F ; ---------------------------------------------------------------------------
.text:00000C5F
.text:00000C5F loc_C5F:                                ; CODE XREF: MtThread_Process(x,x)+D5j
.text:00000C5F                 mov     eax, [ebp+arg_0]
.text:00000C62                 mov     ecx, [eax]
.text:00000C64                 mov     edx, [ebp+var_C]
.text:00000C67                 xor     eax, eax
.text:00000C69                 cmp     edx, [ecx]
.text:00000C6B                 setnz   al
.text:00000C6E                 mov     ecx, [ebp+arg_4]
.text:00000C71                 mov     [ecx], eax
.text:00000C73                 mov     edx, [ebp+var_4]
.text:00000C76                 mov     eax, [ebp+arg_4]
.text:00000C79                 mov     ecx, [eax]
.text:00000C7B                 mov     [edx+34h], ecx
.text:00000C7E                 mov     edx, [ebp+var_4]
.text:00000C81                 add     edx, 3Ch ; '<'
.text:00000C84                 push    edx
.text:00000C85                 call    _Event_Set@4    ; Event_Set(x)
.text:00000C8A                 test    eax, eax
.text:00000C8C                 jz      short loc_C98
.text:00000C8E                 mov     eax, 0Ch
.text:00000C93                 jmp     loc_D6E
.text:00000C98 ; ---------------------------------------------------------------------------
.text:00000C98
.text:00000C98 loc_C98:                                ; CODE XREF: MtThread_Process(x,x)+10Cj
.text:00000C98                 mov     esi, esp
.text:00000C9A                 mov     eax, [ebp+arg_4]
.text:00000C9D                 mov     ecx, [eax]
.text:00000C9F                 push    ecx
.text:00000CA0                 mov     edx, [ebp+var_C]
.text:00000CA3                 push    edx
.text:00000CA4                 mov     eax, [ebp+arg_0]
.text:00000CA7                 mov     ecx, [eax+0Ch]
.text:00000CAA                 push    ecx
.text:00000CAB                 lea     edx, [ebp+var_18]
.text:00000CAE                 push    edx
.text:00000CAF                 mov     eax, [ebp+arg_0]
.text:00000CB2                 mov     ecx, [eax+4]
.text:00000CB5                 push    ecx
.text:00000CB6                 mov     edx, [ebp+arg_0]
.text:00000CB9                 mov     eax, [edx+14h]
.text:00000CBC                 push    eax
.text:00000CBD                 mov     ecx, [ebp+arg_0]
.text:00000CC0                 mov     edx, [ecx]
.text:00000CC2                 mov     eax, [edx+1Ch]
.text:00000CC5                 push    eax
.text:00000CC6                 mov     ecx, [ebp+arg_0]
.text:00000CC9                 mov     edx, [ecx]
.text:00000CCB                 mov     eax, [edx+1Ch]
.text:00000CCE                 mov     ecx, [eax]
.text:00000CD0                 call    ecx
.text:00000CD2                 cmp     esi, esp
.text:00000CD4                 call    __RTC_CheckEsp
.text:00000CD9                 mov     [ebp+var_24], eax
.text:00000CDC                 cmp     [ebp+var_24], 0
.text:00000CE0                 jz      short loc_CEA
.text:00000CE2                 mov     eax, [ebp+var_24]
.text:00000CE5                 jmp     loc_D6E
.text:00000CEA ; ---------------------------------------------------------------------------
.text:00000CEA
.text:00000CEA loc_CEA:                                ; CODE XREF: MtThread_Process(x,x)+160j
.text:00000CEA                 mov     edx, [ebp+arg_0]
.text:00000CED                 mov     eax, [edx+14h]
.text:00000CF0                 push    eax
.text:00000CF1                 mov     ecx, [ebp+arg_0]
.text:00000CF4                 mov     edx, [ecx]
.text:00000CF6                 add     edx, 40h ; '@'
.text:00000CF9                 push    edx
.text:00000CFA                 call    _MtProgress_Reinit@8 ; MtProgress_Reinit(x,x)
.text:00000CFF                 mov     eax, [ebp+arg_0]
.text:00000D02                 mov     ecx, [eax+40h]
.text:00000D05                 push    ecx
.text:00000D06                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00000D0B                 test    eax, eax
.text:00000D0D                 jz      short loc_D16
.text:00000D0F                 mov     eax, 0Ch
.text:00000D14                 jmp     short loc_D6E
.text:00000D16 ; ---------------------------------------------------------------------------
.text:00000D16
.text:00000D16 loc_D16:                                ; CODE XREF: MtThread_Process(x,x)+18Dj
.text:00000D16                 mov     edx, [ebp+arg_0]
.text:00000D19                 cmp     dword ptr [edx+38h], 0
.text:00000D1D                 jz      short loc_D26
.text:00000D1F                 mov     eax, 0Bh
.text:00000D24                 jmp     short loc_D6E
.text:00000D26 ; ---------------------------------------------------------------------------
.text:00000D26
.text:00000D26 loc_D26:                                ; CODE XREF: MtThread_Process(x,x)+19Dj
.text:00000D26                 mov     esi, esp
.text:00000D28                 mov     eax, [ebp+var_18]
.text:00000D2B                 push    eax
.text:00000D2C                 mov     ecx, [ebp+arg_0]
.text:00000D2F                 mov     edx, [ecx+4]
.text:00000D32                 push    edx
.text:00000D33                 mov     eax, [ebp+arg_0]
.text:00000D36                 mov     ecx, [eax]
.text:00000D38                 mov     edx, [ecx+10h]
.text:00000D3B                 push    edx
.text:00000D3C                 mov     eax, [ebp+arg_0]
.text:00000D3F                 mov     ecx, [eax]
.text:00000D41                 mov     edx, [ecx+10h]
.text:00000D44                 mov     eax, [edx]
.text:00000D46                 call    eax
.text:00000D48                 cmp     esi, esp
.text:00000D4A                 call    __RTC_CheckEsp
.text:00000D4F                 cmp     eax, [ebp+var_18]
.text:00000D52                 jz      short loc_D5B
.text:00000D54                 mov     eax, 9
.text:00000D59                 jmp     short loc_D6E
.text:00000D5B ; ---------------------------------------------------------------------------
.text:00000D5B
.text:00000D5B loc_D5B:                                ; CODE XREF: MtThread_Process(x,x)+1D2j
.text:00000D5B                 mov     ecx, [ebp+var_4]
.text:00000D5E                 add     ecx, 40h ; '@'
.text:00000D61                 push    ecx
.text:00000D62                 call    _Event_Set@4    ; Event_Set(x)
.text:00000D67                 neg     eax
.text:00000D69                 sbb     eax, eax
.text:00000D6B                 and     eax, 0Ch
.text:00000D6E
.text:00000D6E loc_D6E:                                ; CODE XREF: MtThread_Process(x,x)+35j
.text:00000D6E                                         ; MtThread_Process(x,x)+9Dj ...
.text:00000D6E                 push    edx
.text:00000D6F                 mov     ecx, ebp
.text:00000D71                 push    eax
.text:00000D72                 lea     edx, $LN16
.text:00000D78                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D7D                 pop     eax
.text:00000D7E                 pop     edx
.text:00000D7F                 pop     edi
.text:00000D80                 pop     esi
.text:00000D81                 add     esp, 28h
.text:00000D84                 cmp     ebp, esp
.text:00000D86                 call    __RTC_CheckEsp
.text:00000D8B                 mov     esp, ebp
.text:00000D8D                 pop     ebp
.text:00000D8E                 retn    8
.text:00000D8E _MtThread_Process@8 endp
.text:00000D8E
.text:00000D8E ; ---------------------------------------------------------------------------
.text:00000D91                 align 4
.text:00000D94 $LN16           dd 2                    ; DATA XREF: MtThread_Process(x,x)+1F2o
.text:00000D98                 dd offset $LN15
.text:00000D9C $LN15           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000D98o
.text:00000DA4                 dd offset $LN13         ; "size"
.text:00000DA8                 dd 0FFFFFFE8h, 4
.text:00000DB0                 dd offset $LN14         ; "destSize"
.text:00000DB4 $LN14           db 'destSize',0         ; DATA XREF: .text:00000DB0o
.text:00000DBD $LN13           db 'size',0             ; DATA XREF: .text:00000DA4o
.text:00000DC2                 align 10h
.text:00000DD0
.text:00000DD0 ; =============== S U B R O U T I N E =======================================
.text:00000DD0
.text:00000DD0 ; Attributes: bp-based frame
.text:00000DD0
.text:00000DD0 ; __stdcall MtProgress_Reinit(x, x)
.text:00000DD0 _MtProgress_Reinit@8 proc near          ; CODE XREF: MtThread_Process(x,x)+17Ap
.text:00000DD0
.text:00000DD0 arg_0           = dword ptr  8
.text:00000DD0 arg_4           = dword ptr  0Ch
.text:00000DD0
.text:00000DD0                 push    ebp
.text:00000DD1                 mov     ebp, esp
.text:00000DD3                 mov     eax, [ebp+arg_4]
.text:00000DD6                 mov     ecx, [ebp+arg_0]
.text:00000DD9                 mov     dword ptr [ecx+eax*8+30h], 0
.text:00000DE1                 mov     dword ptr [ecx+eax*8+34h], 0
.text:00000DE9                 mov     edx, [ebp+arg_4]
.text:00000DEC                 mov     eax, [ebp+arg_0]
.text:00000DEF                 mov     dword ptr [eax+edx*8+130h], 0
.text:00000DFA                 mov     dword ptr [eax+edx*8+134h], 0
.text:00000E05                 pop     ebp
.text:00000E06                 retn    8
.text:00000E06 _MtProgress_Reinit@8 endp
.text:00000E06
.text:00000E06 ; ---------------------------------------------------------------------------
.text:00000E09                 align 10h
.text:00000E10
.text:00000E10 ; =============== S U B R O U T I N E =======================================
.text:00000E10
.text:00000E10 ; Attributes: bp-based frame
.text:00000E10
.text:00000E10 ; __stdcall FullRead(x, x, x)
.text:00000E10 _FullRead@12    proc near               ; CODE XREF: MtThread_Process(x,x)+C9p
.text:00000E10
.text:00000E10 var_18          = dword ptr -18h
.text:00000E10 var_14          = dword ptr -14h
.text:00000E10 var_10          = dword ptr -10h
.text:00000E10 var_C           = dword ptr -0Ch
.text:00000E10 var_8           = dword ptr -8
.text:00000E10 var_4           = dword ptr -4
.text:00000E10 arg_0           = dword ptr  8
.text:00000E10 arg_4           = dword ptr  0Ch
.text:00000E10 arg_8           = dword ptr  10h
.text:00000E10
.text:00000E10                 push    ebp
.text:00000E11                 mov     ebp, esp
.text:00000E13                 sub     esp, 18h
.text:00000E16                 push    esi
.text:00000E17                 mov     eax, 0CCCCCCCCh
.text:00000E1C                 mov     [ebp+var_18], eax
.text:00000E1F                 mov     [ebp+var_14], eax
.text:00000E22                 mov     [ebp+var_10], eax
.text:00000E25                 mov     [ebp+var_C], eax
.text:00000E28                 mov     [ebp+var_8], eax
.text:00000E2B                 mov     [ebp+var_4], eax
.text:00000E2E                 mov     eax, [ebp+arg_8]
.text:00000E31                 mov     ecx, [eax]
.text:00000E33                 mov     [ebp+var_4], ecx
.text:00000E36                 mov     edx, [ebp+arg_8]
.text:00000E39                 mov     dword ptr [edx], 0
.text:00000E3F
.text:00000E3F loc_E3F:                                ; CODE XREF: FullRead(x,x,x):loc_EA4j
.text:00000E3F                 cmp     [ebp+var_4], 0
.text:00000E43                 jz      short loc_EA6
.text:00000E45                 mov     eax, [ebp+var_4]
.text:00000E48                 mov     [ebp+var_C], eax
.text:00000E4B                 mov     esi, esp
.text:00000E4D                 lea     ecx, [ebp+var_C]
.text:00000E50                 push    ecx
.text:00000E51                 mov     edx, [ebp+arg_4]
.text:00000E54                 push    edx
.text:00000E55                 mov     eax, [ebp+arg_0]
.text:00000E58                 push    eax
.text:00000E59                 mov     ecx, [ebp+arg_0]
.text:00000E5C                 mov     edx, [ecx]
.text:00000E5E                 call    edx
.text:00000E60                 cmp     esi, esp
.text:00000E62                 call    __RTC_CheckEsp
.text:00000E67                 mov     [ebp+var_14], eax
.text:00000E6A                 mov     eax, [ebp+arg_8]
.text:00000E6D                 mov     ecx, [eax]
.text:00000E6F                 add     ecx, [ebp+var_C]
.text:00000E72                 mov     edx, [ebp+arg_8]
.text:00000E75                 mov     [edx], ecx
.text:00000E77                 mov     eax, [ebp+arg_4]
.text:00000E7A                 add     eax, [ebp+var_C]
.text:00000E7D                 mov     [ebp+arg_4], eax
.text:00000E80                 mov     ecx, [ebp+var_4]
.text:00000E83                 sub     ecx, [ebp+var_C]
.text:00000E86                 mov     [ebp+var_4], ecx
.text:00000E89                 mov     edx, [ebp+var_14]
.text:00000E8C                 mov     [ebp+var_18], edx
.text:00000E8F                 cmp     [ebp+var_18], 0
.text:00000E93                 jz      short loc_E9A
.text:00000E95                 mov     eax, [ebp+var_18]
.text:00000E98                 jmp     short loc_EA8
.text:00000E9A ; ---------------------------------------------------------------------------
.text:00000E9A
.text:00000E9A loc_E9A:                                ; CODE XREF: FullRead(x,x,x)+83j
.text:00000E9A                 cmp     [ebp+var_C], 0
.text:00000E9E                 jnz     short loc_EA4
.text:00000EA0                 xor     eax, eax
.text:00000EA2                 jmp     short loc_EA8
.text:00000EA4 ; ---------------------------------------------------------------------------
.text:00000EA4
.text:00000EA4 loc_EA4:                                ; CODE XREF: FullRead(x,x,x)+8Ej
.text:00000EA4                 jmp     short loc_E3F
.text:00000EA6 ; ---------------------------------------------------------------------------
.text:00000EA6
.text:00000EA6 loc_EA6:                                ; CODE XREF: FullRead(x,x,x)+33j
.text:00000EA6                 xor     eax, eax
.text:00000EA8
.text:00000EA8 loc_EA8:                                ; CODE XREF: FullRead(x,x,x)+88j
.text:00000EA8                                         ; FullRead(x,x,x)+92j
.text:00000EA8                 push    edx
.text:00000EA9                 mov     ecx, ebp
.text:00000EAB                 push    eax
.text:00000EAC                 lea     edx, $LN9_0
.text:00000EB2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000EB7                 pop     eax
.text:00000EB8                 pop     edx
.text:00000EB9                 pop     esi
.text:00000EBA                 add     esp, 18h
.text:00000EBD                 cmp     ebp, esp
.text:00000EBF                 call    __RTC_CheckEsp
.text:00000EC4                 mov     esp, ebp
.text:00000EC6                 pop     ebp
.text:00000EC7                 retn    0Ch
.text:00000EC7 _FullRead@12    endp
.text:00000EC7
.text:00000EC7 ; ---------------------------------------------------------------------------
.text:00000ECA                 align 4
.text:00000ECC $LN9_0          dd 1                    ; DATA XREF: FullRead(x,x,x)+9Co
.text:00000ED0                 dd offset $LN8
.text:00000ED4 $LN8            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000ED0o
.text:00000EDC                 dd offset $LN7          ; "curSize"
.text:00000EE0 $LN7            db 'curSize',0          ; DATA XREF: .text:00000EDCo
.text:00000EE0 _text           ends
.text:00000EE0
.rtc$TMZ:00000EE8 ; ===========================================================================
.rtc$TMZ:00000EE8
.rtc$TMZ:00000EE8 ; Segment type: Pure data
.rtc$TMZ:00000EE8 ; Segment permissions: Read
.rtc$TMZ:00000EE8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000EE8                 assume cs:_rtc$TMZ
.rtc$TMZ:00000EE8                 ;org 0EE8h
.rtc$TMZ:00000EE8 ; COMDAT (pick any)
.rtc$TMZ:00000EE8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000EE8 _rtc$TMZ        ends
.rtc$TMZ:00000EE8
.rtc$IMZ:00000EEC ; ===========================================================================
.rtc$IMZ:00000EEC
.rtc$IMZ:00000EEC ; Segment type: Pure data
.rtc$IMZ:00000EEC ; Segment permissions: Read
.rtc$IMZ:00000EEC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000EEC                 assume cs:_rtc$IMZ
.rtc$IMZ:00000EEC                 ;org 0EECh
.rtc$IMZ:00000EEC ; COMDAT (pick any)
.rtc$IMZ:00000EEC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000EEC _rtc$IMZ        ends
.rtc$IMZ:00000EEC
UNDEF:00000EF0 ; ===========================================================================
UNDEF:00000EF0
UNDEF:00000EF0 ; Segment type: Externs
UNDEF:00000EF0 ; UNDEF
UNDEF:00000EF0                 extrn __RTC_Shutdown:near
UNDEF:00000EF0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000EF4                 extrn __RTC_InitBase:near
UNDEF:00000EF4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000EF8 ; __stdcall HandlePtr_Close(x)
UNDEF:00000EF8                 extrn _HandlePtr_Close@4:near
UNDEF:00000EF8                                         ; CODE XREF: LoopThread_Close(x)+7p
UNDEF:00000EF8                                         ; LoopThread_Close(x)+13p ...
UNDEF:00000EFC                 extrn __RTC_CheckEsp:near
UNDEF:00000EFC                                         ; CODE XREF: LoopThread_Close(x)+26p
UNDEF:00000EFC                                         ; LoopThread_Create(x)+69p ...
UNDEF:00000F00 ; __stdcall Thread_Create(x, x, x)
UNDEF:00000F00                 extrn _Thread_Create@12:near
UNDEF:00000F00                                         ; CODE XREF: LoopThread_Create(x)+5Fp
UNDEF:00000F04 ; __stdcall AutoResetEvent_CreateNotSignaled(x)
UNDEF:00000F04                 extrn _AutoResetEvent_CreateNotSignaled@4:near
UNDEF:00000F04                                         ; CODE XREF: LoopThread_Create(x)+25p
UNDEF:00000F04                                         ; LoopThread_Create(x)+3Fp ...
UNDEF:00000F08 ; __stdcall Event_Set(x)
UNDEF:00000F08                 extrn _Event_Set@4:near ; CODE XREF: LoopThreadFunc(x)+5Bp
UNDEF:00000F08                                         ; LoopThread_StopAndWait(x)+14p ...
UNDEF:00000F0C ; __stdcall Handle_WaitObject(x)
UNDEF:00000F0C                 extrn _Handle_WaitObject@4:near
UNDEF:00000F0C                                         ; CODE XREF: LoopThreadFunc(x)+19p
UNDEF:00000F0C                                         ; LoopThread_StopAndWait(x)+2Ap ...
UNDEF:00000F10 ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00000F10                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:00000F10                                         ; CODE XREF: MtProgress_Set(x,x,x,x,x,x)+F8p
UNDEF:00000F10                                         ; MtProgress_SetError(x,x)+35p ...
UNDEF:00000F14 ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00000F14                 extrn __imp__EnterCriticalSection@4:near
UNDEF:00000F14                                         ; CODE XREF: MtProgress_Set(x,x,x,x,x,x)+15p
UNDEF:00000F14                                         ; MtProgress_SetError(x,x)+Dp ...
UNDEF:00000F18 ; __stdcall CriticalSection_Init(x)
UNDEF:00000F18                 extrn _CriticalSection_Init@4:near
UNDEF:00000F18                                         ; CODE XREF: MtCoder_Construct(x)+68p
UNDEF:00000F18                                         ; MtCoder_Construct(x)+74p
UNDEF:00000F1C ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00000F1C                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:00000F1C                                         ; CODE XREF: MtCoder_Destruct(x)+45p
UNDEF:00000F1C                                         ; MtCoder_Destruct(x)+5Bp
UNDEF:00000F1C                                         ; DATA XREF: ...
UNDEF:00000F20 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000F20                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000F20                                         ; CODE XREF: ThreadFunc(x)+E4p
UNDEF:00000F20                                         ; MtThread_Process(x,x)+1F8p ...
UNDEF:00000F20
UNDEF:00000F20
UNDEF:00000F20                 end