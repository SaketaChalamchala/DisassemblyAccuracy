.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 0D34A491A907DE02B849A13C267E61C1
.text:00000000 ; Input CRC32 : 4372EAFA
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\FindSignature.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall FindSignatureInStream(struct ISequentialInStream *, const unsigned __int8 *Buf2, size_t Size, const unsigned __int64 *, unsigned __int64 *)
.text:00000000                 public ?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z
.text:00000000 ?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z proc near
.text:00000000
.text:00000000 var_7C          = dword ptr -7Ch
.text:00000000 var_78          = dword ptr -78h
.text:00000000 var_74          = dword ptr -74h
.text:00000000 var_70          = dword ptr -70h
.text:00000000 var_6C          = dword ptr -6Ch
.text:00000000 var_68          = dword ptr -68h
.text:00000000 var_64          = dword ptr -64h
.text:00000000 var_60          = dword ptr -60h
.text:00000000 var_59          = byte ptr -59h
.text:00000000 var_58          = dword ptr -58h
.text:00000000 var_54          = dword ptr -54h
.text:00000000 var_50          = dword ptr -50h
.text:00000000 var_48          = dword ptr -48h
.text:00000000 var_40          = dword ptr -40h
.text:00000000 var_3C          = dword ptr -3Ch
.text:00000000 Dst             = dword ptr -38h
.text:00000000 var_30          = byte ptr -30h
.text:00000000 var_24          = dword ptr -24h
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_18          = byte ptr -18h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 Buf2            = dword ptr  0Ch
.text:00000000 Size            = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000 arg_10          = dword ptr  18h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 sub     esp, 70h
.text:00000014                 push    esi
.text:00000015                 push    edi
.text:00000016                 lea     edi, [ebp+var_7C]
.text:00000019                 mov     ecx, 1Ch
.text:0000001E                 mov     eax, 0CCCCCCCCh
.text:00000023                 rep stosd
.text:00000025                 mov     eax, dword ptr ds:___security_cookie
.text:0000002A                 xor     eax, ebp
.text:0000002C                 push    eax
.text:0000002D                 lea     eax, [ebp+var_C]
.text:00000030                 mov     large fs:0, eax
.text:00000036                 mov     eax, [ebp+arg_10]
.text:00000039                 mov     dword ptr [eax], 0
.text:0000003F                 mov     dword ptr [eax+4], 0
.text:00000046                 mov     ecx, [ebp+Size]
.text:00000049                 push    ecx
.text:0000004A                 lea     ecx, [ebp+var_18]
.text:0000004D                 call    ??0?$CBuffer@E@@QAE@I@Z ; CBuffer<uchar>::CBuffer<uchar>(uint)
.text:00000052                 mov     [ebp+var_4], 0
.text:00000059                 mov     edx, [ebp+Size]
.text:0000005C                 push    edx             ; unsigned int
.text:0000005D                 lea     ecx, [ebp+var_18]
.text:00000060                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000065                 push    eax             ; void *
.text:00000066                 mov     eax, [ebp+arg_0]
.text:00000069                 push    eax             ; struct ISequentialInStream *
.text:0000006A                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:0000006F                 mov     [ebp+var_20], eax
.text:00000072                 cmp     [ebp+var_20], 0
.text:00000076                 jz      short loc_95
.text:00000078                 mov     ecx, [ebp+var_20]
.text:0000007B                 mov     [ebp+var_60], ecx
.text:0000007E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000085                 lea     ecx, [ebp+var_18]
.text:00000088                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:0000008D                 mov     eax, [ebp+var_60]
.text:00000090                 jmp     loc_345
.text:00000095 ; ---------------------------------------------------------------------------
.text:00000095
.text:00000095 loc_95:                                 ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+76j
.text:00000095                 mov     edx, [ebp+Size]
.text:00000098                 push    edx             ; Size
.text:00000099                 mov     eax, [ebp+Buf2]
.text:0000009C                 push    eax             ; Buf2
.text:0000009D                 lea     ecx, [ebp+var_18]
.text:000000A0                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000000A5                 push    eax             ; Buf1
.text:000000A6                 call    _memcmp
.text:000000AB                 add     esp, 0Ch
.text:000000AE                 test    eax, eax
.text:000000B0                 jnz     short loc_D0
.text:000000B2                 mov     [ebp+var_64], 0
.text:000000B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000C0                 lea     ecx, [ebp+var_18]
.text:000000C3                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000000C8                 mov     eax, [ebp+var_64]
.text:000000CB                 jmp     loc_345
.text:000000D0 ; ---------------------------------------------------------------------------
.text:000000D0
.text:000000D0 loc_D0:                                 ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+B0j
.text:000000D0                 mov     [ebp+var_24], 10000h
.text:000000D7                 push    10000h
.text:000000DC                 lea     ecx, [ebp+var_30]
.text:000000DF                 call    ??0?$CBuffer@E@@QAE@I@Z ; CBuffer<uchar>::CBuffer<uchar>(uint)
.text:000000E4                 mov     byte ptr [ebp+var_4], 1
.text:000000E8                 lea     ecx, [ebp+var_30]
.text:000000EB                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000000F0                 mov     [ebp+Dst], eax
.text:000000F3                 mov     ecx, [ebp+Size]
.text:000000F6                 sub     ecx, 1
.text:000000F9                 mov     [ebp+var_3C], ecx
.text:000000FC                 mov     edx, [ebp+var_3C]
.text:000000FF                 push    edx             ; Size
.text:00000100                 lea     ecx, [ebp+var_18]
.text:00000103                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000108                 add     eax, 1
.text:0000010B                 push    eax             ; Src
.text:0000010C                 mov     eax, [ebp+Dst]
.text:0000010F                 push    eax             ; Dst
.text:00000110                 call    _memcpy
.text:00000115                 add     esp, 0Ch
.text:00000118                 mov     ecx, [ebp+arg_10]
.text:0000011B                 mov     dword ptr [ecx], 1
.text:00000121                 mov     dword ptr [ecx+4], 0
.text:00000128
.text:00000128 loc_128:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+325j
.text:00000128                 cmp     [ebp+arg_C], 0
.text:0000012C                 jz      short loc_180
.text:0000012E                 mov     edx, [ebp+arg_10]
.text:00000131                 mov     eax, [ebp+arg_C]
.text:00000134                 mov     [ebp+var_78], edx
.text:00000137                 mov     [ebp+var_7C], eax
.text:0000013A                 mov     ecx, [ebp+var_78]
.text:0000013D                 mov     edx, [ebp+var_7C]
.text:00000140                 mov     eax, [ecx+4]
.text:00000143                 cmp     eax, [edx+4]
.text:00000146                 jb      short loc_180
.text:00000148                 ja      short loc_156
.text:0000014A                 mov     ecx, [ebp+var_78]
.text:0000014D                 mov     edx, [ebp+var_7C]
.text:00000150                 mov     eax, [ecx]
.text:00000152                 cmp     eax, [edx]
.text:00000154                 jbe     short loc_180
.text:00000156
.text:00000156 loc_156:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+148j
.text:00000156                 mov     [ebp+var_68], 1
.text:0000015D                 mov     byte ptr [ebp+var_4], 0
.text:00000161                 lea     ecx, [ebp+var_30]
.text:00000164                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000169                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000170                 lea     ecx, [ebp+var_18]
.text:00000173                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000178                 mov     eax, [ebp+var_68]
.text:0000017B                 jmp     loc_345
.text:00000180 ; ---------------------------------------------------------------------------
.text:00000180
.text:00000180 loc_180:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+12Cj
.text:00000180                                         ; FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+146j ...
.text:00000180                 mov     ecx, 10000h
.text:00000185                 sub     ecx, [ebp+var_3C]
.text:00000188                 mov     [ebp+var_40], ecx
.text:0000018B                 mov     esi, esp
.text:0000018D                 lea     edx, [ebp+var_48]
.text:00000190                 push    edx
.text:00000191                 mov     eax, [ebp+var_40]
.text:00000194                 push    eax
.text:00000195                 mov     ecx, [ebp+Dst]
.text:00000198                 add     ecx, [ebp+var_3C]
.text:0000019B                 push    ecx
.text:0000019C                 mov     edx, [ebp+arg_0]
.text:0000019F                 mov     eax, [edx]
.text:000001A1                 mov     ecx, [ebp+arg_0]
.text:000001A4                 push    ecx
.text:000001A5                 mov     edx, [eax+0Ch]
.text:000001A8                 call    edx
.text:000001AA                 cmp     esi, esp
.text:000001AC                 call    __RTC_CheckEsp
.text:000001B1                 mov     [ebp+var_50], eax
.text:000001B4                 cmp     [ebp+var_50], 0
.text:000001B8                 jz      short loc_1E3
.text:000001BA                 mov     eax, [ebp+var_50]
.text:000001BD                 mov     [ebp+var_6C], eax
.text:000001C0                 mov     byte ptr [ebp+var_4], 0
.text:000001C4                 lea     ecx, [ebp+var_30]
.text:000001C7                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000001CC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001D3                 lea     ecx, [ebp+var_18]
.text:000001D6                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000001DB                 mov     eax, [ebp+var_6C]
.text:000001DE                 jmp     loc_345
.text:000001E3 ; ---------------------------------------------------------------------------
.text:000001E3
.text:000001E3 loc_1E3:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+1B8j
.text:000001E3                 mov     ecx, [ebp+var_3C]
.text:000001E6                 add     ecx, [ebp+var_48]
.text:000001E9                 mov     [ebp+var_3C], ecx
.text:000001EC                 cmp     [ebp+var_48], 0
.text:000001F0                 jnz     short loc_21C
.text:000001F2                 mov     [ebp+var_70], 1
.text:000001F9                 mov     byte ptr [ebp+var_4], 0
.text:000001FD                 lea     ecx, [ebp+var_30]
.text:00000200                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000205                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000020C                 lea     ecx, [ebp+var_18]
.text:0000020F                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000214                 mov     eax, [ebp+var_70]
.text:00000217                 jmp     loc_345
.text:0000021C ; ---------------------------------------------------------------------------
.text:0000021C
.text:0000021C loc_21C:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+1F0j
.text:0000021C                 mov     edx, [ebp+var_3C]
.text:0000021F                 cmp     edx, [ebp+Size]
.text:00000222                 jb      loc_180
.text:00000228                 mov     eax, [ebp+var_3C]
.text:0000022B                 sub     eax, [ebp+Size]
.text:0000022E                 add     eax, 1
.text:00000231                 mov     [ebp+var_54], eax
.text:00000234                 mov     [ebp+var_58], 0
.text:0000023B                 jmp     short loc_246
.text:0000023D ; ---------------------------------------------------------------------------
.text:0000023D
.text:0000023D loc_23D:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &):loc_2E1j
.text:0000023D                 mov     ecx, [ebp+var_58]
.text:00000240                 add     ecx, 1
.text:00000243                 mov     [ebp+var_58], ecx
.text:00000246
.text:00000246 loc_246:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+23Bj
.text:00000246                 mov     edx, [ebp+var_58]
.text:00000249                 cmp     edx, [ebp+var_54]
.text:0000024C                 jnb     loc_2E6
.text:00000252                 mov     eax, [ebp+Buf2]
.text:00000255                 mov     cl, [eax]
.text:00000257                 mov     [ebp+var_59], cl
.text:0000025A                 jmp     short loc_265
.text:0000025C ; ---------------------------------------------------------------------------
.text:0000025C
.text:0000025C loc_25C:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+27Ej
.text:0000025C                 mov     edx, [ebp+var_58]
.text:0000025F                 add     edx, 1
.text:00000262                 mov     [ebp+var_58], edx
.text:00000265
.text:00000265 loc_265:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+25Aj
.text:00000265                 mov     eax, [ebp+Dst]
.text:00000268                 add     eax, [ebp+var_58]
.text:0000026B                 movzx   ecx, byte ptr [eax]
.text:0000026E                 movzx   edx, [ebp+var_59]
.text:00000272                 cmp     ecx, edx
.text:00000274                 jz      short loc_280
.text:00000276                 mov     eax, [ebp+var_58]
.text:00000279                 cmp     eax, [ebp+var_54]
.text:0000027C                 jnb     short loc_280
.text:0000027E                 jmp     short loc_25C
.text:00000280 ; ---------------------------------------------------------------------------
.text:00000280
.text:00000280 loc_280:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+274j
.text:00000280                                         ; FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+27Cj
.text:00000280                 mov     ecx, [ebp+var_58]
.text:00000283                 cmp     ecx, [ebp+var_54]
.text:00000286                 jnz     short loc_28A
.text:00000288                 jmp     short loc_2E6
.text:0000028A ; ---------------------------------------------------------------------------
.text:0000028A
.text:0000028A loc_28A:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+286j
.text:0000028A                 mov     edx, [ebp+Size]
.text:0000028D                 push    edx             ; Size
.text:0000028E                 mov     eax, [ebp+Buf2]
.text:00000291                 push    eax             ; Buf2
.text:00000292                 mov     ecx, [ebp+Dst]
.text:00000295                 add     ecx, [ebp+var_58]
.text:00000298                 push    ecx             ; Buf1
.text:00000299                 call    _memcmp
.text:0000029E                 add     esp, 0Ch
.text:000002A1                 test    eax, eax
.text:000002A3                 jnz     short loc_2E1
.text:000002A5                 mov     edx, [ebp+var_58]
.text:000002A8                 xor     eax, eax
.text:000002AA                 mov     ecx, [ebp+arg_10]
.text:000002AD                 add     edx, [ecx]
.text:000002AF                 adc     eax, [ecx+4]
.text:000002B2                 mov     ecx, [ebp+arg_10]
.text:000002B5                 mov     [ecx], edx
.text:000002B7                 mov     [ecx+4], eax
.text:000002BA                 mov     [ebp+var_74], 0
.text:000002C1                 mov     byte ptr [ebp+var_4], 0
.text:000002C5                 lea     ecx, [ebp+var_30]
.text:000002C8                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000002CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002D4                 lea     ecx, [ebp+var_18]
.text:000002D7                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000002DC                 mov     eax, [ebp+var_74]
.text:000002DF                 jmp     short loc_345
.text:000002E1 ; ---------------------------------------------------------------------------
.text:000002E1
.text:000002E1 loc_2E1:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+2A3j
.text:000002E1                 jmp     loc_23D
.text:000002E6 ; ---------------------------------------------------------------------------
.text:000002E6
.text:000002E6 loc_2E6:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+24Cj
.text:000002E6                                         ; FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+288j
.text:000002E6                 mov     edx, [ebp+var_54]
.text:000002E9                 xor     eax, eax
.text:000002EB                 mov     ecx, [ebp+arg_10]
.text:000002EE                 add     edx, [ecx]
.text:000002F0                 adc     eax, [ecx+4]
.text:000002F3                 mov     ecx, [ebp+arg_10]
.text:000002F6                 mov     [ecx], edx
.text:000002F8                 mov     [ecx+4], eax
.text:000002FB                 mov     edx, [ebp+var_3C]
.text:000002FE                 sub     edx, [ebp+var_54]
.text:00000301                 mov     [ebp+var_3C], edx
.text:00000304                 mov     esi, esp
.text:00000306                 mov     eax, [ebp+var_3C]
.text:00000309                 push    eax             ; Size
.text:0000030A                 mov     ecx, [ebp+Dst]
.text:0000030D                 add     ecx, [ebp+var_54]
.text:00000310                 push    ecx             ; Src
.text:00000311                 mov     edx, [ebp+Dst]
.text:00000314                 push    edx             ; Dst
.text:00000315                 call    dword ptr ds:__imp__memmove
.text:0000031B                 add     esp, 0Ch
.text:0000031E                 cmp     esi, esp
.text:00000320                 call    __RTC_CheckEsp
.text:00000325                 jmp     loc_128
.text:0000032A ; ---------------------------------------------------------------------------
.text:0000032A                 mov     byte ptr [ebp+var_4], 0
.text:0000032E                 lea     ecx, [ebp+var_30]
.text:00000331                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000336                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000033D                 lea     ecx, [ebp+var_18]
.text:00000340                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000345
.text:00000345 loc_345:                                ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+90j
.text:00000345                                         ; FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+CBj ...
.text:00000345                 push    edx
.text:00000346                 mov     ecx, ebp
.text:00000348                 push    eax
.text:00000349                 lea     edx, $LN30
.text:0000034F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000354                 pop     eax
.text:00000355                 pop     edx
.text:00000356                 mov     ecx, [ebp+var_C]
.text:00000359                 mov     large fs:0, ecx
.text:00000360                 pop     ecx
.text:00000361                 pop     edi
.text:00000362                 pop     esi
.text:00000363                 add     esp, 7Ch
.text:00000366                 cmp     ebp, esp
.text:00000368                 call    __RTC_CheckEsp
.text:0000036D                 mov     esp, ebp
.text:0000036F                 pop     ebp
.text:00000370                 retn    14h
.text:00000370 ?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z endp
.text:00000370
.text:00000370 ; ---------------------------------------------------------------------------
.text:00000373                 align 4
.text:00000374 $LN30           dd 3                    ; DATA XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+349o
.text:00000378                 dd offset $LN29
.text:0000037C $LN29           dd 0FFFFFFE8h, 8        ; DATA XREF: .text:00000378o
.text:00000384                 dd offset $LN25         ; "byteBuffer2"
.text:00000388                 dd 0FFFFFFD0h, 8
.text:00000390                 dd offset $LN26         ; "byteBuffer"
.text:00000394                 dd 0FFFFFFB8h, 4
.text:0000039C                 dd offset $LN27         ; "processedSize"
.text:000003A0 $LN27           db 'processedSize',0    ; DATA XREF: .text:0000039Co
.text:000003AE $LN26           db 'byteBuffer',0       ; DATA XREF: .text:00000390o
.text:000003B9 $LN25           db 'byteBuffer2',0      ; DATA XREF: .text:00000384o
.text:000003C5                 align 4
.text:000003C5 _text           ends
.text:000003C5
.text$x:000003C8 ; ===========================================================================
.text$x:000003C8
.text$x:000003C8 ; Segment type: Pure code
.text$x:000003C8 ; Segment permissions: Read/Execute
.text$x:000003C8 _text$x         segment para public 'CODE' use32
.text$x:000003C8                 assume cs:_text$x
.text$x:000003C8                 ;org 3C8h
.text$x:000003C8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:000003C8
.text$x:000003C8 ; =============== S U B R O U T I N E =======================================
.text$x:000003C8
.text$x:000003C8
.text$x:000003C8 __unwindfunclet$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z$0 proc near
.text$x:000003C8                                         ; DATA XREF: .xdata$x:000003F8o
.text$x:000003C8                 lea     ecx, [ebp-18h]
.text$x:000003CB                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:000003CB __unwindfunclet$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z$0 endp
.text$x:000003CB
.text$x:000003D0
.text$x:000003D0 ; =============== S U B R O U T I N E =======================================
.text$x:000003D0
.text$x:000003D0
.text$x:000003D0 __unwindfunclet$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z$1 proc near
.text$x:000003D0                                         ; DATA XREF: .xdata$x:00000400o
.text$x:000003D0                 lea     ecx, [ebp-30h]
.text$x:000003D3                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:000003D3 __unwindfunclet$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z$1 endp
.text$x:000003D3
.text$x:000003D8
.text$x:000003D8 ; =============== S U B R O U T I N E =======================================
.text$x:000003D8
.text$x:000003D8
.text$x:000003D8 __ehhandler$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z proc near
.text$x:000003D8                                         ; DATA XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+5o
.text$x:000003D8
.text$x:000003D8 arg_4           = dword ptr  8
.text$x:000003D8
.text$x:000003D8                 mov     edx, [esp+arg_4]
.text$x:000003DC                 lea     eax, [edx+0Ch]
.text$x:000003DF                 mov     ecx, [edx-7Ch]
.text$x:000003E2                 xor     ecx, eax
.text$x:000003E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000003E9                 mov     eax, offset __ehfuncinfo$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z
.text$x:000003EE                 jmp     ___CxxFrameHandler3
.text$x:000003EE __ehhandler$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z endp
.text$x:000003EE
.text$x:000003EE ; ---------------------------------------------------------------------------
.text$x:000003F3                 align 4
.text$x:000003F3 _text$x         ends
.text$x:000003F3
.xdata$x:000003F4 ; ===========================================================================
.xdata$x:000003F4
.xdata$x:000003F4 ; Segment type: Pure data
.xdata$x:000003F4 ; Segment permissions: Read
.xdata$x:000003F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000003F4                 assume cs:_xdata$x
.xdata$x:000003F4                 ;org 3F4h
.xdata$x:000003F4 __unwindtable$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z db 0FFh
.xdata$x:000003F4                                         ; DATA XREF: .xdata$x:0000040Co
.xdata$x:000003F5                 db 0FFh
.xdata$x:000003F6                 db 0FFh
.xdata$x:000003F7                 db 0FFh
.xdata$x:000003F8                 dd offset __unwindfunclet$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z$0
.xdata$x:000003FC                 align 10h
.xdata$x:00000400                 dd offset __unwindfunclet$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z$1
.xdata$x:00000404 __ehfuncinfo$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z db  22h ; "
.xdata$x:00000404                                         ; DATA XREF: __ehhandler$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z+11o
.xdata$x:00000405                 db    5
.xdata$x:00000406                 db  93h ; ô
.xdata$x:00000407                 db  19h
.xdata$x:00000408                 db    2
.xdata$x:00000409                 db    0
.xdata$x:0000040A                 db    0
.xdata$x:0000040B                 db    0
.xdata$x:0000040C                 dd offset __unwindtable$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z
.xdata$x:00000410                 db    0
.xdata$x:00000411                 db    0
.xdata$x:00000412                 db    0
.xdata$x:00000413                 db    0
.xdata$x:00000414                 db    0
.xdata$x:00000415                 db    0
.xdata$x:00000416                 db    0
.xdata$x:00000417                 db    0
.xdata$x:00000418                 db    0
.xdata$x:00000419                 db    0
.xdata$x:0000041A                 db    0
.xdata$x:0000041B                 db    0
.xdata$x:0000041C                 db    0
.xdata$x:0000041D                 db    0
.xdata$x:0000041E                 db    0
.xdata$x:0000041F                 db    0
.xdata$x:00000420                 db    0
.xdata$x:00000421                 db    0
.xdata$x:00000422                 db    0
.xdata$x:00000423                 db    0
.xdata$x:00000424                 db    1
.xdata$x:00000425                 db    0
.xdata$x:00000426                 db    0
.xdata$x:00000427                 db    0
.xdata$x:00000427 _xdata$x        ends
.xdata$x:00000427
.rtc$TMZ:00000428 ; ===========================================================================
.rtc$TMZ:00000428
.rtc$TMZ:00000428 ; Segment type: Pure data
.rtc$TMZ:00000428 ; Segment permissions: Read
.rtc$TMZ:00000428 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000428                 assume cs:_rtc$TMZ
.rtc$TMZ:00000428                 ;org 428h
.rtc$TMZ:00000428 ; COMDAT (pick any)
.rtc$TMZ:00000428 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000428 _rtc$TMZ        ends
.rtc$TMZ:00000428
.rtc$IMZ:0000042C ; ===========================================================================
.rtc$IMZ:0000042C
.rtc$IMZ:0000042C ; Segment type: Pure data
.rtc$IMZ:0000042C ; Segment permissions: Read
.rtc$IMZ:0000042C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000042C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000042C                 ;org 42Ch
.rtc$IMZ:0000042C ; COMDAT (pick any)
.rtc$IMZ:0000042C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000042C _rtc$IMZ        ends
.rtc$IMZ:0000042C
.text:00000430 ; ===========================================================================
.text:00000430
.text:00000430 ; Segment type: Pure code
.text:00000430 ; Segment permissions: Read/Execute
.text:00000430 _text           segment para public 'CODE' use32
.text:00000430                 assume cs:_text
.text:00000430                 ;org 430h
.text:00000430 ; COMDAT (pick any)
.text:00000430                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000430
.text:00000430 ; =============== S U B R O U T I N E =======================================
.text:00000430
.text:00000430 ; Attributes: bp-based frame
.text:00000430
.text:00000430 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(unsigned int)
.text:00000430                 public ??0?$CBuffer@E@@QAE@I@Z
.text:00000430 ??0?$CBuffer@E@@QAE@I@Z proc near       ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+4Dp
.text:00000430                                         ; FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+DFp
.text:00000430
.text:00000430 var_8           = dword ptr -8
.text:00000430 var_4           = dword ptr -4
.text:00000430 arg_0           = dword ptr  8
.text:00000430
.text:00000430                 push    ebp
.text:00000431                 mov     ebp, esp
.text:00000433                 sub     esp, 8
.text:00000436                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000043D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000444                 mov     [ebp+var_4], ecx
.text:00000447                 mov     eax, [ebp+var_4]
.text:0000044A                 mov     dword ptr [eax], 0
.text:00000450                 mov     ecx, [ebp+var_4]
.text:00000453                 mov     dword ptr [ecx+4], 0
.text:0000045A                 mov     edx, [ebp+arg_0]
.text:0000045D                 push    edx             ; unsigned int
.text:0000045E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000463                 add     esp, 4
.text:00000466                 mov     [ebp+var_8], eax
.text:00000469                 mov     eax, [ebp+var_4]
.text:0000046C                 mov     ecx, [ebp+var_8]
.text:0000046F                 mov     [eax], ecx
.text:00000471                 mov     edx, [ebp+var_4]
.text:00000474                 mov     eax, [ebp+arg_0]
.text:00000477                 mov     [edx+4], eax
.text:0000047A                 mov     eax, [ebp+var_4]
.text:0000047D                 add     esp, 8
.text:00000480                 cmp     ebp, esp
.text:00000482                 call    __RTC_CheckEsp
.text:00000487                 mov     esp, ebp
.text:00000489                 pop     ebp
.text:0000048A                 retn    4
.text:0000048A ??0?$CBuffer@E@@QAE@I@Z endp
.text:0000048A
.text:0000048A ; ---------------------------------------------------------------------------
.text:0000048D                 align 10h
.text:0000048D _text           ends
.text:0000048D
.text:00000490 ; ===========================================================================
.text:00000490
.text:00000490 ; Segment type: Pure code
.text:00000490 ; Segment permissions: Read/Execute
.text:00000490 _text           segment para public 'CODE' use32
.text:00000490                 assume cs:_text
.text:00000490                 ;org 490h
.text:00000490 ; COMDAT (pick any)
.text:00000490                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000490
.text:00000490 ; =============== S U B R O U T I N E =======================================
.text:00000490
.text:00000490 ; Attributes: bp-based frame
.text:00000490
.text:00000490 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:00000490                 public ??1?$CBuffer@E@@QAE@XZ
.text:00000490 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+88p
.text:00000490                                         ; FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+C3p ...
.text:00000490
.text:00000490 var_8           = dword ptr -8
.text:00000490 var_4           = dword ptr -4
.text:00000490
.text:00000490                 push    ebp
.text:00000491                 mov     ebp, esp
.text:00000493                 sub     esp, 8
.text:00000496                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000049D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004A4                 mov     [ebp+var_4], ecx
.text:000004A7                 mov     eax, [ebp+var_4]
.text:000004AA                 mov     ecx, [eax]
.text:000004AC                 mov     [ebp+var_8], ecx
.text:000004AF                 mov     edx, [ebp+var_8]
.text:000004B2                 push    edx             ; void *
.text:000004B3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000004B8                 add     esp, 4
.text:000004BB                 add     esp, 8
.text:000004BE                 cmp     ebp, esp
.text:000004C0                 call    __RTC_CheckEsp
.text:000004C5                 mov     esp, ebp
.text:000004C7                 pop     ebp
.text:000004C8                 retn
.text:000004C8 ??1?$CBuffer@E@@QAE@XZ endp
.text:000004C8
.text:000004C8 ; ---------------------------------------------------------------------------
.text:000004C9                 align 4
.text:000004C9 _text           ends
.text:000004C9
.text:000004CC ; ===========================================================================
.text:000004CC
.text:000004CC ; Segment type: Pure code
.text:000004CC ; Segment permissions: Read/Execute
.text:000004CC _text           segment para public 'CODE' use32
.text:000004CC                 assume cs:_text
.text:000004CC                 ;org 4CCh
.text:000004CC ; COMDAT (pick any)
.text:000004CC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000004CC
.text:000004CC ; =============== S U B R O U T I N E =======================================
.text:000004CC
.text:000004CC ; Attributes: bp-based frame
.text:000004CC
.text:000004CC ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:000004CC                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:000004CC ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+60p
.text:000004CC                                         ; FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+A0p ...
.text:000004CC
.text:000004CC var_4           = dword ptr -4
.text:000004CC
.text:000004CC                 push    ebp
.text:000004CD                 mov     ebp, esp
.text:000004CF                 push    ecx
.text:000004D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004D7                 mov     [ebp+var_4], ecx
.text:000004DA                 mov     eax, [ebp+var_4]
.text:000004DD                 mov     eax, [eax]
.text:000004DF                 mov     esp, ebp
.text:000004E1                 pop     ebp
.text:000004E2                 retn
.text:000004E2 ??B?$CBuffer@E@@QAEPAEXZ endp
.text:000004E2
.text:000004E2 _text           ends
.text:000004E2
UNDEF:000004F0 ; ===========================================================================
UNDEF:000004F0
UNDEF:000004F0 ; Segment type: Externs
UNDEF:000004F0 ; UNDEF
UNDEF:000004F0 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:000004F0                 extrn __imp__memmove:near
UNDEF:000004F0                                         ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+315p
UNDEF:000004F0                                         ; DATA XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+315r
UNDEF:000004F4 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000004F4                 extrn _memcpy:near      ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+110p
UNDEF:000004F8 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000004F8                 extrn _memcmp:near      ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+A6p
UNDEF:000004F8                                         ; FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+299p
UNDEF:000004FC ; __int32 __stdcall ReadStream_FALSE(struct ISequentialInStream *, void *, unsigned int)
UNDEF:000004FC                 extrn ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:000004FC                                         ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+6Ap
UNDEF:00000500                 extrn ___security_cookie:near
UNDEF:00000500                                         ; DATA XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+25r
UNDEF:00000504                 extrn ___CxxFrameHandler3:near
UNDEF:00000504                                         ; CODE XREF: __ehhandler$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z+16j
UNDEF:00000508 ; __fastcall __security_check_cookie(x)
UNDEF:00000508                 extrn @__security_check_cookie@4:near
UNDEF:00000508                                         ; CODE XREF: __ehhandler$?FindSignatureInStream@@YGJPAUISequentialInStream@@PBEIPB_KAA_K@Z+Cp
UNDEF:0000050C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000050C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000050C                                         ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+34Fp
UNDEF:00000510                 extrn __RTC_CheckEsp:near
UNDEF:00000510                                         ; CODE XREF: FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+1ACp
UNDEF:00000510                                         ; FindSignatureInStream(ISequentialInStream *,uchar const *,uint,unsigned __int64 const *,unsigned __int64 &)+320p ...
UNDEF:00000514                 extrn __RTC_Shutdown:near
UNDEF:00000514                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000518                 extrn __RTC_InitBase:near
UNDEF:00000518                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000051C ; void *__cdecl operator new(unsigned int)
UNDEF:0000051C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CBuffer<uchar>::CBuffer<uchar>(uint)+2Ep
UNDEF:00000520 ; void __cdecl operator delete(void *)
UNDEF:00000520                 extrn ??3@YAXPAX@Z:near ; CODE XREF: CBuffer<uchar>::~CBuffer<uchar>(void)+23p
UNDEF:00000520
UNDEF:00000520
UNDEF:00000520                 end