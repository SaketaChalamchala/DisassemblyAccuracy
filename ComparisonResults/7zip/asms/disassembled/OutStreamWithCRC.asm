.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 07246E632C88CEEF86351937F025733D
.text:00000000 ; Input CRC32 : 429DAECE
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\OutStreamWithCRC.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall COutStreamWithCRC::Write(COutStreamWithCRC *this, const void *, unsigned int, unsigned int *)
.text:00000000                 public ?Write@COutStreamWithCRC@@UAGJPBXIPAI@Z
.text:00000000 ?Write@COutStreamWithCRC@@UAGJPBXIPAI@Z proc near
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 this            = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 push    esi
.text:00000007                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000015                 mov     [ebp+var_4], 0
.text:0000001C                 mov     ecx, [ebp+this]
.text:0000001F                 add     ecx, 8
.text:00000022                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00000027                 test    eax, eax
.text:00000029                 jz      short loc_5F
.text:0000002B                 mov     ecx, [ebp+this]
.text:0000002E                 add     ecx, 8
.text:00000031                 call    ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->(void)
.text:00000036                 mov     [ebp+var_8], eax
.text:00000039                 mov     esi, esp
.text:0000003B                 lea     eax, [ebp+arg_8]
.text:0000003E                 push    eax
.text:0000003F                 mov     ecx, [ebp+arg_8]
.text:00000042                 push    ecx
.text:00000043                 mov     edx, [ebp+arg_4]
.text:00000046                 push    edx
.text:00000047                 mov     eax, [ebp+var_8]
.text:0000004A                 push    eax
.text:0000004B                 mov     ecx, [ebp+var_8]
.text:0000004E                 mov     edx, [ecx]
.text:00000050                 mov     eax, [edx+0Ch]
.text:00000053                 call    eax
.text:00000055                 cmp     esi, esp
.text:00000057                 call    __RTC_CheckEsp
.text:0000005C                 mov     [ebp+var_4], eax
.text:0000005F
.text:0000005F loc_5F:                                 ; CODE XREF: COutStreamWithCRC::Write(void const *,uint,uint *)+29j
.text:0000005F                 mov     ecx, [ebp+this]
.text:00000062                 movzx   edx, byte ptr [ecx+1Ch]
.text:00000066                 test    edx, edx
.text:00000068                 jz      short loc_82
.text:0000006A                 mov     eax, [ebp+arg_8]
.text:0000006D                 push    eax
.text:0000006E                 mov     edx, [ebp+arg_4]
.text:00000071                 mov     ecx, [ebp+this]
.text:00000074                 mov     ecx, [ecx+18h]
.text:00000077                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:0000007C                 mov     edx, [ebp+this]
.text:0000007F                 mov     [edx+18h], eax
.text:00000082
.text:00000082 loc_82:                                 ; CODE XREF: COutStreamWithCRC::Write(void const *,uint,uint *)+68j
.text:00000082                 mov     eax, [ebp+arg_8]
.text:00000085                 xor     ecx, ecx
.text:00000087                 mov     edx, [ebp+this]
.text:0000008A                 add     eax, [edx+10h]
.text:0000008D                 adc     ecx, [edx+14h]
.text:00000090                 mov     edx, [ebp+this]
.text:00000093                 mov     [edx+10h], eax
.text:00000096                 mov     [edx+14h], ecx
.text:00000099                 cmp     [ebp+arg_C], 0
.text:0000009D                 jz      short loc_A7
.text:0000009F                 mov     eax, [ebp+arg_C]
.text:000000A2                 mov     ecx, [ebp+arg_8]
.text:000000A5                 mov     [eax], ecx
.text:000000A7
.text:000000A7 loc_A7:                                 ; CODE XREF: COutStreamWithCRC::Write(void const *,uint,uint *)+9Dj
.text:000000A7                 mov     eax, [ebp+var_4]
.text:000000AA                 pop     esi
.text:000000AB                 add     esp, 8
.text:000000AE                 cmp     ebp, esp
.text:000000B0                 call    __RTC_CheckEsp
.text:000000B5                 mov     esp, ebp
.text:000000B7                 pop     ebp
.text:000000B8                 retn    10h
.text:000000B8 ?Write@COutStreamWithCRC@@UAGJPBXIPAI@Z endp
.text:000000B8
.text:000000B8 ; ---------------------------------------------------------------------------
.text:000000BB                 align 4
.text:000000BB _text           ends
.text:000000BB
.rtc$TMZ:000000BC ; ===========================================================================
.rtc$TMZ:000000BC
.rtc$TMZ:000000BC ; Segment type: Pure data
.rtc$TMZ:000000BC ; Segment permissions: Read
.rtc$TMZ:000000BC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000000BC                 assume cs:_rtc$TMZ
.rtc$TMZ:000000BC                 ;org 0BCh
.rtc$TMZ:000000BC ; COMDAT (pick any)
.rtc$TMZ:000000BC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000000BC _rtc$TMZ        ends
.rtc$TMZ:000000BC
.rtc$IMZ:000000C0 ; ===========================================================================
.rtc$IMZ:000000C0
.rtc$IMZ:000000C0 ; Segment type: Pure data
.rtc$IMZ:000000C0 ; Segment permissions: Read
.rtc$IMZ:000000C0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000000C0                 assume cs:_rtc$IMZ
.rtc$IMZ:000000C0                 ;org 0C0h
.rtc$IMZ:000000C0 ; COMDAT (pick any)
.rtc$IMZ:000000C0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000000C0 _rtc$IMZ        ends
.rtc$IMZ:000000C0
.text:000000C4 ; ===========================================================================
.text:000000C4
.text:000000C4 ; Segment type: Pure code
.text:000000C4 ; Segment permissions: Read/Execute
.text:000000C4 _text           segment para public 'CODE' use32
.text:000000C4                 assume cs:_text
.text:000000C4                 ;org 0C4h
.text:000000C4 ; COMDAT (pick any)
.text:000000C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000000C4
.text:000000C4 ; =============== S U B R O U T I N E =======================================
.text:000000C4
.text:000000C4 ; Attributes: bp-based frame
.text:000000C4
.text:000000C4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:000000C4                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:000000C4 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:000000C4                                         ; CODE XREF: COutStreamWithCRC::Write(void const *,uint,uint *)+22p
.text:000000C4
.text:000000C4 var_4           = dword ptr -4
.text:000000C4
.text:000000C4                 push    ebp
.text:000000C5                 mov     ebp, esp
.text:000000C7                 push    ecx
.text:000000C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000CF                 mov     [ebp+var_4], ecx
.text:000000D2                 mov     eax, [ebp+var_4]
.text:000000D5                 mov     eax, [eax]
.text:000000D7                 mov     esp, ebp
.text:000000D9                 pop     ebp
.text:000000DA                 retn
.text:000000DA ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:000000DA
.text:000000DA ; ---------------------------------------------------------------------------
.text:000000DB                 align 4
.text:000000DB _text           ends
.text:000000DB
.text:000000DC ; ===========================================================================
.text:000000DC
.text:000000DC ; Segment type: Pure code
.text:000000DC ; Segment permissions: Read/Execute
.text:000000DC _text           segment para public 'CODE' use32
.text:000000DC                 assume cs:_text
.text:000000DC                 ;org 0DCh
.text:000000DC ; COMDAT (pick any)
.text:000000DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000000DC
.text:000000DC ; =============== S U B R O U T I N E =======================================
.text:000000DC
.text:000000DC ; Attributes: bp-based frame
.text:000000DC
.text:000000DC ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator->(void)const
.text:000000DC                 public ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:000000DC ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:000000DC                                         ; CODE XREF: COutStreamWithCRC::Write(void const *,uint,uint *)+31p
.text:000000DC
.text:000000DC var_4           = dword ptr -4
.text:000000DC
.text:000000DC                 push    ebp
.text:000000DD                 mov     ebp, esp
.text:000000DF                 push    ecx
.text:000000E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000E7                 mov     [ebp+var_4], ecx
.text:000000EA                 mov     eax, [ebp+var_4]
.text:000000ED                 mov     eax, [eax]
.text:000000EF                 mov     esp, ebp
.text:000000F1                 pop     ebp
.text:000000F2                 retn
.text:000000F2 ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:000000F2
.text:000000F2 _text           ends
.text:000000F2
UNDEF:00000100 ; ===========================================================================
UNDEF:00000100
UNDEF:00000100 ; Segment type: Externs
UNDEF:00000100 ; UNDEF
UNDEF:00000100 ; __fastcall CrcUpdate(x, x, x)
UNDEF:00000100                 extrn @CrcUpdate@12:near
UNDEF:00000100                                         ; CODE XREF: COutStreamWithCRC::Write(void const *,uint,uint *)+77p
UNDEF:00000104                 extrn __RTC_CheckEsp:near
UNDEF:00000104                                         ; CODE XREF: COutStreamWithCRC::Write(void const *,uint,uint *)+57p
UNDEF:00000104                                         ; COutStreamWithCRC::Write(void const *,uint,uint *)+B0p
UNDEF:00000108                 extrn __RTC_Shutdown:near
UNDEF:00000108                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000010C                 extrn __RTC_InitBase:near
UNDEF:0000010C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000010C
UNDEF:0000010C
UNDEF:0000010C                 end