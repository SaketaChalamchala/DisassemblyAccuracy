.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 1C033002AC71C5E4E67F3370E9E29B23
.rdata:00000000 ; Input CRC32 : 617EF874
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zHandlerOut.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG74019        db 'LZMA',0             ; DATA XREF: .data:_k_LZMA_Nameo
.rdata:00000005                 align 4
.rdata:00000008 $SG74021        db 'LZMA2',0            ; DATA XREF: .data:_kDefaultMethodNameo
.rdata:0000000E                 align 10h
.rdata:00000010 $SG74023        db 'Copy',0             ; DATA XREF: .data:_k_Copy_Nameo
.rdata:00000015                 align 4
.rdata:00000018 $SG74025        db 'BT2',0              ; DATA XREF: .data:_k_MatchFinder_ForHeaderso
.rdata:0000001C ; char _SG74549[]
.rdata:0000001C $SG74549        db 'rsfx',0             ; DATA XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+140o
.rdata:00000021                 align 4
.rdata:00000024 ; char _SG74552[]
.rdata:00000024 $SG74552        dd offset loc_6367+1    ; DATA XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &):loc_253Eo
.rdata:00000028 ; char _SG74555[4]
.rdata:00000028 $SG74555        db 'hcf',0              ; DATA XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &):loc_257Co
.rdata:0000002C ; char _SG74564[]
.rdata:0000002C $SG74564        dd offset loc_6568      ; DATA XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &):loc_25F5o
.rdata:00000030 ; char _SG74571[]
.rdata:00000030 $SG74571        dd offset loc_6372+2    ; DATA XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &):loc_2664o
.rdata:00000034 ; char _SG74574[]
.rdata:00000034 $SG74574        dd offset off_6174      ; DATA XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &):loc_26A2o
.rdata:00000038 ; char _SG74577[]
.rdata:00000038 $SG74577        dd offset loc_6D72+2    ; DATA XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &):loc_26E0o
.rdata:0000003C ; char _SG74580[4]
.rdata:0000003C $SG74580        db 'mtf',0              ; DATA XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &):loc_271Bo
.rdata:0000003C _rdata          ends
.rdata:0000003C
.data:00000040 ; ===========================================================================
.data:00000040
.data:00000040 ; Segment type: Pure data
.data:00000040 ; Segment permissions: Read/Write
.data:00000040 _data           segment dword public 'DATA' use32
.data:00000040                 assume cs:_data
.data:00000040                 ;org 40h
.data:00000040 _k_LZMA_Name    dd offset $SG74019      ; DATA XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+5Br
.data:00000040                                         ; .xdata$x:__catchsym$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$20o ...
.data:00000040                                         ; "LZMA"
.data:00000044 _kDefaultMethodName dd offset $SG74021  ; DATA XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+A7r
.data:00000044                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint):loc_2ECr
.data:00000044                                         ; "LZMA2"
.data:00000048 _k_Copy_Name    dd offset $SG74023      ; DATA XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+E1r
.data:00000048                                         ; "Copy"
.data:0000004C ; char *k_MatchFinder_ForHeaders
.data:0000004C _k_MatchFinder_ForHeaders dd offset $SG74025
.data:0000004C                                         ; DATA XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+6Ar
.data:0000004C _data           ends                    ; "BT2"
.data:0000004C
.text:00000050 ; ===========================================================================
.text:00000050
.text:00000050 ; Segment type: Pure code
.text:00000050 ; Segment permissions: Read/Execute
.text:00000050 _text           segment para public 'CODE' use32
.text:00000050                 assume cs:_text
.text:00000050                 ;org 50h
.text:00000050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; __int32 __stdcall NArchive::N7z::CHandler::GetFileTimeType(NArchive::N7z::CHandler *this, unsigned int *)
.text:00000050                 public ?GetFileTimeType@CHandler@N7z@NArchive@@UAGJPAI@Z
.text:00000050 ?GetFileTimeType@CHandler@N7z@NArchive@@UAGJPAI@Z proc near
.text:00000050
.text:00000050 this            = dword ptr  8
.text:00000050 arg_4           = dword ptr  0Ch
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 mov     eax, [ebp+arg_4]
.text:00000056                 mov     dword ptr [eax], 0
.text:0000005C                 xor     eax, eax
.text:0000005E                 pop     ebp
.text:0000005F                 retn    8
.text:0000005F ?GetFileTimeType@CHandler@N7z@NArchive@@UAGJPAI@Z endp
.text:0000005F
.text:0000005F ; ---------------------------------------------------------------------------
.text:00000062                 align 10h
.text:00000070
.text:00000070 ; =============== S U B R O U T I N E =======================================
.text:00000070
.text:00000070 ; Attributes: bp-based frame
.text:00000070
.text:00000070 ; __int32 __thiscall NArchive::N7z::CHandler::PropsMethod_To_FullMethod(NArchive::N7z::CHandler *this, struct NArchive::N7z::CMethodFull *, const struct COneMethodInfo *)
.text:00000070                 public ?PropsMethod_To_FullMethod@CHandler@N7z@NArchive@@AAEJAAUCMethodFull@23@ABVCOneMethodInfo@@@Z
.text:00000070 ?PropsMethod_To_FullMethod@CHandler@N7z@NArchive@@AAEJAAUCMethodFull@23@ABVCOneMethodInfo@@@Z proc near
.text:00000070                                         ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+C2p
.text:00000070                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+202p
.text:00000070
.text:00000070 var_4           = dword ptr -4
.text:00000070 arg_0           = dword ptr  8
.text:00000070 arg_4           = dword ptr  0Ch
.text:00000070
.text:00000070                 push    ebp
.text:00000071                 mov     ebp, esp
.text:00000073                 push    ecx
.text:00000074                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000007B                 mov     [ebp+var_4], ecx
.text:0000007E                 mov     eax, [ebp+arg_0]
.text:00000081                 add     eax, 18h
.text:00000084                 push    eax             ; unsigned int *
.text:00000085                 mov     ecx, [ebp+arg_0]
.text:00000088                 add     ecx, 10h
.text:0000008B                 push    ecx             ; unsigned __int64 *
.text:0000008C                 mov     edx, [ebp+arg_4]
.text:0000008F                 add     edx, 0Ch
.text:00000092                 push    edx             ; struct AString *
.text:00000093                 call    ?FindMethod@@YG_NABVAString@@AA_KAAI@Z ; FindMethod(AString const &,unsigned __int64 &,uint &)
.text:00000098                 movzx   eax, al
.text:0000009B                 test    eax, eax
.text:0000009D                 jnz     short loc_A6
.text:0000009F                 mov     eax, 80070057h
.text:000000A4                 jmp     short loc_B4
.text:000000A6 ; ---------------------------------------------------------------------------
.text:000000A6
.text:000000A6 loc_A6:                                 ; CODE XREF: NArchive::N7z::CHandler::PropsMethod_To_FullMethod(NArchive::N7z::CMethodFull &,COneMethodInfo const &)+2Dj
.text:000000A6                 mov     ecx, [ebp+arg_4]
.text:000000A9                 push    ecx
.text:000000AA                 mov     ecx, [ebp+arg_0]
.text:000000AD                 call    ??4CProps@@QAEAAU0@ABU0@@Z ; CProps::operator=(CProps const &)
.text:000000B2                 xor     eax, eax
.text:000000B4
.text:000000B4 loc_B4:                                 ; CODE XREF: NArchive::N7z::CHandler::PropsMethod_To_FullMethod(NArchive::N7z::CMethodFull &,COneMethodInfo const &)+34j
.text:000000B4                 add     esp, 4
.text:000000B7                 cmp     ebp, esp
.text:000000B9                 call    __RTC_CheckEsp
.text:000000BE                 mov     esp, ebp
.text:000000C0                 pop     ebp
.text:000000C1                 retn    8
.text:000000C1 ?PropsMethod_To_FullMethod@CHandler@N7z@NArchive@@AAEJAAUCMethodFull@23@ABVCOneMethodInfo@@@Z endp
.text:000000C1
.text:000000C1 ; ---------------------------------------------------------------------------
.text:000000C4                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; __int32 __thiscall NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CHandler *this, struct NArchive::N7z::CCompressionMethodMode *)
.text:000000D0                 public ?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z
.text:000000D0 ?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z proc near
.text:000000D0                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+EE8p
.text:000000D0
.text:000000D0 var_44          = dword ptr -44h
.text:000000D0 var_40          = dword ptr -40h
.text:000000D0 var_38          = byte ptr -38h
.text:000000D0 var_2C          = byte ptr -2Ch
.text:000000D0 var_10          = dword ptr -10h
.text:000000D0 var_C           = dword ptr -0Ch
.text:000000D0 var_4           = dword ptr -4
.text:000000D0 arg_0           = dword ptr  8
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 push    0FFFFFFFFh
.text:000000D5                 push    offset __ehhandler$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z
.text:000000DA                 mov     eax, large fs:0
.text:000000E0                 push    eax
.text:000000E1                 sub     esp, 38h
.text:000000E4                 push    edi
.text:000000E5                 push    ecx
.text:000000E6                 lea     edi, [ebp+var_44]
.text:000000E9                 mov     ecx, 0Eh
.text:000000EE                 mov     eax, 0CCCCCCCCh
.text:000000F3                 rep stosd
.text:000000F5                 pop     ecx
.text:000000F6                 mov     eax, dword ptr ds:___security_cookie
.text:000000FB                 xor     eax, ebp
.text:000000FD                 push    eax
.text:000000FE                 lea     eax, [ebp+var_C]
.text:00000101                 mov     large fs:0, eax
.text:00000107                 mov     [ebp+var_10], ecx
.text:0000010A                 mov     eax, [ebp+var_10]
.text:0000010D                 movzx   ecx, byte ptr [eax+7Ah]
.text:00000111                 test    ecx, ecx
.text:00000113                 jnz     short loc_11C
.text:00000115                 xor     eax, eax
.text:00000117                 jmp     loc_1AC
.text:0000011C ; ---------------------------------------------------------------------------
.text:0000011C
.text:0000011C loc_11C:                                ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+43j
.text:0000011C                 lea     ecx, [ebp+var_38]
.text:0000011F                 call    ??0COneMethodInfo@@QAE@XZ ; COneMethodInfo::COneMethodInfo(void)
.text:00000124                 mov     [ebp+var_4], 0
.text:0000012B                 mov     edx, ds:_k_LZMA_Name
.text:00000131                 push    edx
.text:00000132                 lea     ecx, [ebp+var_2C]
.text:00000135                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:0000013A                 mov     eax, ds:_k_MatchFinder_ForHeaders
.text:0000013F                 push    eax             ; char *
.text:00000140                 push    9               ; unsigned __int32
.text:00000142                 lea     ecx, [ebp+var_38] ; this
.text:00000145                 call    ?AddProp_Ascii@CProps@@QAEXKPBD@Z ; CProps::AddProp_Ascii(ulong,char const *)
.text:0000014A                 push    5               ; unsigned int
.text:0000014C                 lea     ecx, [ebp+var_38] ; this
.text:0000014F                 call    ?AddProp_Level@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_Level(uint)
.text:00000154                 push    111h            ; unsigned int
.text:00000159                 push    8               ; unsigned __int32
.text:0000015B                 lea     ecx, [ebp+var_38] ; this
.text:0000015E                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00000163                 push    100000h         ; unsigned int
.text:00000168                 push    1               ; unsigned __int32
.text:0000016A                 lea     ecx, [ebp+var_38] ; this
.text:0000016D                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00000172                 push    1               ; unsigned int
.text:00000174                 lea     ecx, [ebp+var_38] ; this
.text:00000177                 call    ?AddProp_NumThreads@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_NumThreads(uint)
.text:0000017C                 mov     ecx, [ebp+arg_0]
.text:0000017F                 call    ?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::AddNew(void)
.text:00000184                 mov     [ebp+var_40], eax
.text:00000187                 lea     ecx, [ebp+var_38]
.text:0000018A                 push    ecx             ; struct COneMethodInfo *
.text:0000018B                 mov     edx, [ebp+var_40]
.text:0000018E                 push    edx             ; struct NArchive::N7z::CMethodFull *
.text:0000018F                 mov     ecx, [ebp+var_10] ; this
.text:00000192                 call    ?PropsMethod_To_FullMethod@CHandler@N7z@NArchive@@AAEJAAUCMethodFull@23@ABVCOneMethodInfo@@@Z ; NArchive::N7z::CHandler::PropsMethod_To_FullMethod(NArchive::N7z::CMethodFull &,COneMethodInfo const &)
.text:00000197                 mov     [ebp+var_44], eax
.text:0000019A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001A1                 lea     ecx, [ebp+var_38] ; this
.text:000001A4                 call    ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text:000001A9                 mov     eax, [ebp+var_44]
.text:000001AC
.text:000001AC loc_1AC:                                ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+47j
.text:000001AC                 push    edx
.text:000001AD                 mov     ecx, ebp
.text:000001AF                 push    eax
.text:000001B0                 lea     edx, $LN8
.text:000001B6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001BB                 pop     eax
.text:000001BC                 pop     edx
.text:000001BD                 mov     ecx, [ebp+var_C]
.text:000001C0                 mov     large fs:0, ecx
.text:000001C7                 pop     ecx
.text:000001C8                 pop     edi
.text:000001C9                 add     esp, 44h
.text:000001CC                 cmp     ebp, esp
.text:000001CE                 call    __RTC_CheckEsp
.text:000001D3                 mov     esp, ebp
.text:000001D5                 pop     ebp
.text:000001D6                 retn    4
.text:000001D6 ?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z endp
.text:000001D6
.text:000001D6 ; ---------------------------------------------------------------------------
.text:000001D9                 align 4
.text:000001DC $LN8            dd 1                    ; DATA XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+E0o
.text:000001E0                 dd offset $LN7
.text:000001E4 $LN7            dd 0FFFFFFC8h, 24h      ; DATA XREF: .text:000001E0o
.text:000001EC                 dd offset $LN5
.text:000001F0 $LN5            dd 0CCCC006Dh, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000001ECo
.text:00000200
.text:00000200 ; =============== S U B R O U T I N E =======================================
.text:00000200
.text:00000200 ; Attributes: bp-based frame
.text:00000200
.text:00000200 ; __int32 __thiscall NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CHandler *this, struct NArchive::N7z::CCompressionMethodMode *, unsigned int)
.text:00000200                 public ?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z
.text:00000200 ?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z proc near
.text:00000200                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E62p
.text:00000200
.text:00000200 var_88          = dword ptr -88h
.text:00000200 var_84          = dword ptr -84h
.text:00000200 var_80          = dword ptr -80h
.text:00000200 var_78          = dword ptr -78h
.text:00000200 var_74          = dword ptr -74h
.text:00000200 var_70          = dword ptr -70h
.text:00000200 var_6C          = dword ptr -6Ch
.text:00000200 var_68          = dword ptr -68h
.text:00000200 var_64          = dword ptr -64h
.text:00000200 var_60          = dword ptr -60h
.text:00000200 var_5C          = dword ptr -5Ch
.text:00000200 var_58          = dword ptr -58h
.text:00000200 var_54          = dword ptr -54h
.text:00000200 var_50          = dword ptr -50h
.text:00000200 var_49          = byte ptr -49h
.text:00000200 var_48          = dword ptr -48h
.text:00000200 var_44          = dword ptr -44h
.text:00000200 var_40          = dword ptr -40h
.text:00000200 var_3C          = dword ptr -3Ch
.text:00000200 var_38          = dword ptr -38h
.text:00000200 var_34          = dword ptr -34h
.text:00000200 var_30          = dword ptr -30h
.text:00000200 var_2C          = dword ptr -2Ch
.text:00000200 var_28          = dword ptr -28h
.text:00000200 var_20          = byte ptr -20h
.text:00000200 var_10          = dword ptr -10h
.text:00000200 var_C           = dword ptr -0Ch
.text:00000200 var_4           = dword ptr -4
.text:00000200 arg_0           = dword ptr  8
.text:00000200 arg_4           = dword ptr  0Ch
.text:00000200
.text:00000200                 push    ebp
.text:00000201                 mov     ebp, esp
.text:00000203                 push    0FFFFFFFFh
.text:00000205                 push    offset __ehhandler$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z
.text:0000020A                 mov     eax, large fs:0
.text:00000210                 push    eax
.text:00000211                 sub     esp, 7Ch
.text:00000214                 push    edi
.text:00000215                 push    ecx
.text:00000216                 lea     edi, [ebp+var_88]
.text:0000021C                 mov     ecx, 1Fh
.text:00000221                 mov     eax, 0CCCCCCCCh
.text:00000226                 rep stosd
.text:00000228                 pop     ecx
.text:00000229                 mov     eax, dword ptr ds:___security_cookie
.text:0000022E                 xor     eax, ebp
.text:00000230                 push    eax
.text:00000231                 lea     eax, [ebp+var_C]
.text:00000234                 mov     large fs:0, eax
.text:0000023A                 mov     [ebp+var_10], ecx
.text:0000023D                 mov     eax, [ebp+var_10]
.text:00000240                 add     eax, 1D8h
.text:00000245                 push    eax
.text:00000246                 mov     ecx, [ebp+arg_0]
.text:00000249                 add     ecx, 0Ch
.text:0000024C                 call    ??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)
.text:00000251                 mov     ecx, [ebp+var_10]
.text:00000254                 add     ecx, 2Ch ; ','
.text:00000257                 push    ecx
.text:00000258                 lea     ecx, [ebp+var_20]
.text:0000025B                 call    ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z ; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(CObjectVector<COneMethodInfo> const &)
.text:00000260                 mov     [ebp+var_4], 0
.text:00000267                 mov     [ebp+var_28], 0
.text:0000026E                 jmp     short loc_279
.text:00000270 ; ---------------------------------------------------------------------------
.text:00000270
.text:00000270 loc_270:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint):loc_2B6j
.text:00000270                 mov     edx, [ebp+var_28]
.text:00000273                 add     edx, 1
.text:00000276                 mov     [ebp+var_28], edx
.text:00000279
.text:00000279 loc_279:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+6Ej
.text:00000279                 lea     ecx, [ebp+var_20]
.text:0000027C                 call    ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size(void)
.text:00000281                 cmp     [ebp+var_28], eax
.text:00000284                 jnb     short loc_2B8
.text:00000286                 mov     eax, [ebp+var_28]
.text:00000289                 push    eax
.text:0000028A                 lea     ecx, [ebp+var_20]
.text:0000028D                 call    ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[](uint)
.text:00000292                 add     eax, 0Ch
.text:00000295                 mov     [ebp+var_2C], eax
.text:00000298                 mov     ecx, [ebp+var_2C] ; this
.text:0000029B                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:000002A0                 movzx   ecx, al
.text:000002A3                 test    ecx, ecx
.text:000002A5                 jz      short loc_2B6
.text:000002A7                 mov     edx, ds:_kDefaultMethodName
.text:000002AD                 push    edx
.text:000002AE                 mov     ecx, [ebp+var_2C]
.text:000002B1                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:000002B6
.text:000002B6 loc_2B6:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+A5j
.text:000002B6                 jmp     short loc_270
.text:000002B8 ; ---------------------------------------------------------------------------
.text:000002B8
.text:000002B8 loc_2B8:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+84j
.text:000002B8                 lea     ecx, [ebp+var_20]
.text:000002BB                 call    ?IsEmpty@?$CObjectVector@VCOneMethodInfo@@@@QBE_NXZ ; CObjectVector<COneMethodInfo>::IsEmpty(void)
.text:000002C0                 movzx   eax, al
.text:000002C3                 test    eax, eax
.text:000002C5                 jz      short loc_30B
.text:000002C7                 lea     ecx, [ebp+var_20]
.text:000002CA                 call    ?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ ; CObjectVector<COneMethodInfo>::AddNew(void)
.text:000002CF                 mov     [ebp+var_30], eax
.text:000002D2                 mov     ecx, [ebp+var_10]
.text:000002D5                 add     ecx, 18h        ; this
.text:000002D8                 call    ?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ ; NArchive::CMultiMethodProps::GetLevel(void)
.text:000002DD                 test    eax, eax
.text:000002DF                 jnz     short loc_2EC
.text:000002E1                 mov     ecx, ds:_k_Copy_Name
.text:000002E7                 mov     [ebp+var_6C], ecx
.text:000002EA                 jmp     short loc_2F5
.text:000002EC ; ---------------------------------------------------------------------------
.text:000002EC
.text:000002EC loc_2EC:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+DFj
.text:000002EC                 mov     edx, ds:_kDefaultMethodName
.text:000002F2                 mov     [ebp+var_6C], edx
.text:000002F5
.text:000002F5 loc_2F5:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+EAj
.text:000002F5                 mov     eax, [ebp+var_6C]
.text:000002F8                 push    eax
.text:000002F9                 mov     ecx, [ebp+var_30]
.text:000002FC                 add     ecx, 0Ch
.text:000002FF                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00000304                 mov     ecx, [ebp+arg_0]
.text:00000307                 mov     byte ptr [ecx+18h], 1
.text:0000030B
.text:0000030B loc_30B:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+C5j
.text:0000030B                 mov     ecx, [ebp+var_10]
.text:0000030E                 add     ecx, 44h ; 'D'  ; this
.text:00000311                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00000316                 movzx   edx, al
.text:00000319                 test    edx, edx
.text:0000031B                 jnz     short loc_387
.text:0000031D                 mov     [ebp+var_34], 0
.text:00000324                 jmp     short loc_32F
.text:00000326 ; ---------------------------------------------------------------------------
.text:00000326
.text:00000326 loc_326:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+16Dj
.text:00000326                 mov     eax, [ebp+var_34]
.text:00000329                 add     eax, 1
.text:0000032C                 mov     [ebp+var_34], eax
.text:0000032F
.text:0000032F loc_32F:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+124j
.text:0000032F                 mov     ecx, [ebp+arg_0]
.text:00000332                 add     ecx, 0Ch
.text:00000335                 call    ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size(void)
.text:0000033A                 cmp     [ebp+var_34], eax
.text:0000033D                 jnb     short loc_36F
.text:0000033F                 mov     ecx, [ebp+var_34]
.text:00000342                 push    ecx
.text:00000343                 mov     ecx, [ebp+arg_0]
.text:00000346                 add     ecx, 0Ch
.text:00000349                 call    ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[](uint)
.text:0000034E                 mov     [ebp+var_38], eax
.text:00000351                 mov     edx, [ebp+var_38]
.text:00000354                 mov     eax, [edx+8]
.text:00000357                 add     eax, 1
.text:0000035A                 mov     ecx, [ebp+var_38]
.text:0000035D                 mov     [ecx+8], eax
.text:00000360                 mov     edx, [ebp+var_38]
.text:00000363                 mov     eax, [edx]
.text:00000365                 add     eax, 1
.text:00000368                 mov     ecx, [ebp+var_38]
.text:0000036B                 mov     [ecx], eax
.text:0000036D                 jmp     short loc_326
.text:0000036F ; ---------------------------------------------------------------------------
.text:0000036F
.text:0000036F loc_36F:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+13Dj
.text:0000036F                 mov     edx, [ebp+var_10]
.text:00000372                 add     edx, 38h ; '8'
.text:00000375                 push    edx
.text:00000376                 push    0
.text:00000378                 lea     ecx, [ebp+var_20]
.text:0000037B                 call    ?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z ; CObjectVector<COneMethodInfo>::Insert(uint,COneMethodInfo const &)
.text:00000380                 mov     eax, [ebp+arg_0]
.text:00000383                 mov     byte ptr [eax+19h], 1
.text:00000387
.text:00000387 loc_387:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+11Bj
.text:00000387                 mov     [ebp+var_40], 1000000h
.text:0000038E                 mov     [ebp+var_3C], 0
.text:00000395                 mov     [ebp+var_48], 0FFFFFFFFh
.text:0000039C                 mov     [ebp+var_44], 0
.text:000003A3                 mov     [ebp+var_49], 0
.text:000003A7                 mov     [ebp+var_50], 0
.text:000003AE                 jmp     short loc_3B9
.text:000003B0 ; ---------------------------------------------------------------------------
.text:000003B0
.text:000003B0 loc_3B0:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+250j
.text:000003B0                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint):loc_4E2j ...
.text:000003B0                 mov     ecx, [ebp+var_50]
.text:000003B3                 add     ecx, 1
.text:000003B6                 mov     [ebp+var_50], ecx
.text:000003B9
.text:000003B9 loc_3B9:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+1AEj
.text:000003B9                 lea     ecx, [ebp+var_20]
.text:000003BC                 call    ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size(void)
.text:000003C1                 cmp     [ebp+var_50], eax
.text:000003C4                 jnb     loc_571
.text:000003CA                 mov     edx, [ebp+var_50]
.text:000003CD                 push    edx
.text:000003CE                 lea     ecx, [ebp+var_20]
.text:000003D1                 call    ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[](uint)
.text:000003D6                 mov     [ebp+var_54], eax
.text:000003D9                 mov     eax, [ebp+arg_4]
.text:000003DC                 push    eax             ; unsigned int
.text:000003DD                 mov     ecx, [ebp+var_54]
.text:000003E0                 push    ecx             ; struct COneMethodInfo *
.text:000003E1                 mov     ecx, [ebp+var_10]
.text:000003E4                 add     ecx, 18h        ; this
.text:000003E7                 call    ?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z ; NArchive::CMultiMethodProps::SetGlobalLevelAndThreads(COneMethodInfo &,uint)
.text:000003EC                 mov     ecx, [ebp+arg_0]
.text:000003EF                 call    ?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::AddNew(void)
.text:000003F4                 mov     [ebp+var_58], eax
.text:000003F7                 mov     edx, [ebp+var_54]
.text:000003FA                 push    edx             ; struct COneMethodInfo *
.text:000003FB                 mov     eax, [ebp+var_58]
.text:000003FE                 push    eax             ; struct NArchive::N7z::CMethodFull *
.text:000003FF                 mov     ecx, [ebp+var_10] ; this
.text:00000402                 call    ?PropsMethod_To_FullMethod@CHandler@N7z@NArchive@@AAEJAAUCMethodFull@23@ABVCOneMethodInfo@@@Z ; NArchive::N7z::CHandler::PropsMethod_To_FullMethod(NArchive::N7z::CMethodFull &,COneMethodInfo const &)
.text:00000407                 mov     [ebp+var_5C], eax
.text:0000040A                 cmp     [ebp+var_5C], 0
.text:0000040E                 jz      short loc_42D
.text:00000410                 mov     ecx, [ebp+var_5C]
.text:00000413                 mov     [ebp+var_64], ecx
.text:00000416                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000041D                 lea     ecx, [ebp+var_20]
.text:00000420                 call    ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)
.text:00000425                 mov     eax, [ebp+var_64]
.text:00000428                 jmp     loc_5C8
.text:0000042D ; ---------------------------------------------------------------------------
.text:0000042D
.text:0000042D loc_42D:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+20Ej
.text:0000042D                 mov     edx, [ebp+var_58]
.text:00000430                 mov     [ebp+var_70], edx
.text:00000433                 mov     eax, [ebp+var_70]
.text:00000436                 mov     ecx, [ebp+var_70]
.text:00000439                 mov     edx, [eax+10h]
.text:0000043C                 or      edx, [ecx+14h]
.text:0000043F                 jz      short loc_445
.text:00000441                 mov     [ebp+var_49], 1
.text:00000445
.text:00000445 loc_445:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+23Fj
.text:00000445                 mov     eax, [ebp+var_10]
.text:00000448                 movzx   ecx, byte ptr [eax+78h]
.text:0000044C                 test    ecx, ecx
.text:0000044E                 jz      short loc_455
.text:00000450                 jmp     loc_3B0
.text:00000455 ; ---------------------------------------------------------------------------
.text:00000455
.text:00000455 loc_455:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+24Ej
.text:00000455                 mov     edx, [ebp+var_58]
.text:00000458                 mov     eax, [edx+10h]
.text:0000045B                 mov     [ebp+var_78], eax
.text:0000045E                 mov     ecx, [edx+14h]
.text:00000461                 mov     [ebp+var_74], ecx
.text:00000464                 cmp     [ebp+var_74], 0
.text:00000468                 ja      short loc_4E2
.text:0000046A                 jb      short loc_475
.text:0000046C                 cmp     [ebp+var_78], 40202h
.text:00000473                 ja      short loc_4E2
.text:00000475
.text:00000475 loc_475:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+26Aj
.text:00000475                 mov     edx, [ebp+var_78]
.text:00000478                 mov     [ebp+var_80], edx
.text:0000047B                 cmp     [ebp+var_80], 30401h
.text:00000482                 ja      short loc_49E
.text:00000484                 cmp     [ebp+var_80], 30401h
.text:0000048B                 jz      short loc_4BF
.text:0000048D                 cmp     [ebp+var_80], 21h ; '!'
.text:00000491                 jz      short loc_4B2
.text:00000493                 cmp     [ebp+var_80], 30101h
.text:0000049A                 jz      short loc_4B2
.text:0000049C                 jmp     short loc_4E2
.text:0000049E ; ---------------------------------------------------------------------------
.text:0000049E
.text:0000049E loc_49E:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+282j
.text:0000049E                 cmp     [ebp+var_80], 40108h
.text:000004A5                 jz      short loc_4CC
.text:000004A7                 cmp     [ebp+var_80], 40202h
.text:000004AE                 jz      short loc_4D5
.text:000004B0                 jmp     short loc_4E2
.text:000004B2 ; ---------------------------------------------------------------------------
.text:000004B2
.text:000004B2 loc_4B2:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+291j
.text:000004B2                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+29Aj
.text:000004B2                 mov     ecx, [ebp+var_54] ; this
.text:000004B5                 call    ?Get_Lzma_DicSize@CMethodProps@@QBEIXZ ; CMethodProps::Get_Lzma_DicSize(void)
.text:000004BA                 mov     [ebp+var_60], eax
.text:000004BD                 jmp     short loc_4E7
.text:000004BF ; ---------------------------------------------------------------------------
.text:000004BF
.text:000004BF loc_4BF:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+28Bj
.text:000004BF                 mov     ecx, [ebp+var_54] ; this
.text:000004C2                 call    ?Get_Ppmd_MemSize@CMethodProps@@QBEIXZ ; CMethodProps::Get_Ppmd_MemSize(void)
.text:000004C7                 mov     [ebp+var_60], eax
.text:000004CA                 jmp     short loc_4E7
.text:000004CC ; ---------------------------------------------------------------------------
.text:000004CC
.text:000004CC loc_4CC:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+2A5j
.text:000004CC                 mov     [ebp+var_60], 8000h
.text:000004D3                 jmp     short loc_4E7
.text:000004D5 ; ---------------------------------------------------------------------------
.text:000004D5
.text:000004D5 loc_4D5:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+2AEj
.text:000004D5                 mov     ecx, [ebp+var_54] ; this
.text:000004D8                 call    ?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ ; CMethodProps::Get_BZip2_BlockSize(void)
.text:000004DD                 mov     [ebp+var_60], eax
.text:000004E0                 jmp     short loc_4E7
.text:000004E2 ; ---------------------------------------------------------------------------
.text:000004E2
.text:000004E2 loc_4E2:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+268j
.text:000004E2                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+273j ...
.text:000004E2                 jmp     loc_3B0
.text:000004E7 ; ---------------------------------------------------------------------------
.text:000004E7
.text:000004E7 loc_4E7:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+2BDj
.text:000004E7                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+2CAj ...
.text:000004E7                 mov     eax, [ebp+var_60]
.text:000004EA                 xor     edx, edx
.text:000004EC                 mov     cl, 7
.text:000004EE                 call    __allshl
.text:000004F3                 mov     ecx, [ebp+var_10]
.text:000004F6                 mov     [ecx+70h], eax
.text:000004F9                 mov     [ecx+74h], edx
.text:000004FC                 mov     edx, [ebp+var_10]
.text:000004FF                 mov     [ebp+var_84], edx
.text:00000505                 mov     eax, [ebp+var_84]
.text:0000050B                 cmp     dword ptr [eax+74h], 0
.text:0000050F                 ja      short loc_533
.text:00000511                 jb      short loc_522
.text:00000513                 mov     ecx, [ebp+var_84]
.text:00000519                 cmp     dword ptr [ecx+70h], 1000000h
.text:00000520                 jnb     short loc_533
.text:00000522
.text:00000522 loc_522:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+311j
.text:00000522                 mov     edx, [ebp+var_10]
.text:00000525                 mov     dword ptr [edx+70h], 1000000h
.text:0000052C                 mov     dword ptr [edx+74h], 0
.text:00000533
.text:00000533 loc_533:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+30Fj
.text:00000533                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+320j
.text:00000533                 mov     eax, [ebp+var_10]
.text:00000536                 mov     [ebp+var_88], eax
.text:0000053C                 mov     ecx, [ebp+var_88]
.text:00000542                 cmp     dword ptr [ecx+74h], 0
.text:00000546                 ja      short loc_554
.text:00000548                 mov     edx, [ebp+var_88]
.text:0000054E                 cmp     dword ptr [edx+70h], 0FFFFFFFFh
.text:00000552                 jbe     short loc_565
.text:00000554
.text:00000554 loc_554:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+346j
.text:00000554                 mov     eax, [ebp+var_10]
.text:00000557                 mov     dword ptr [eax+70h], 0FFFFFFFFh
.text:0000055E                 mov     dword ptr [eax+74h], 0
.text:00000565
.text:00000565 loc_565:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+352j
.text:00000565                 mov     ecx, [ebp+var_10]
.text:00000568                 mov     byte ptr [ecx+78h], 1
.text:0000056C                 jmp     loc_3B0
.text:00000571 ; ---------------------------------------------------------------------------
.text:00000571
.text:00000571 loc_571:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+1C4j
.text:00000571                 mov     edx, [ebp+var_10]
.text:00000574                 movzx   eax, byte ptr [edx+78h]
.text:00000578                 test    eax, eax
.text:0000057A                 jnz     short loc_5A8
.text:0000057C                 movzx   ecx, [ebp+var_49]
.text:00000580                 test    ecx, ecx
.text:00000582                 jz      short loc_597
.text:00000584                 mov     edx, [ebp+var_10]
.text:00000587                 mov     dword ptr [edx+70h], 0FFFFFFFFh
.text:0000058E                 mov     dword ptr [edx+74h], 0
.text:00000595                 jmp     short loc_5A8
.text:00000597 ; ---------------------------------------------------------------------------
.text:00000597
.text:00000597 loc_597:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+382j
.text:00000597                 mov     eax, [ebp+var_10]
.text:0000059A                 mov     dword ptr [eax+70h], 0
.text:000005A1                 mov     dword ptr [eax+74h], 0
.text:000005A8
.text:000005A8 loc_5A8:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+37Aj
.text:000005A8                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+395j
.text:000005A8                 mov     ecx, [ebp+var_10]
.text:000005AB                 mov     byte ptr [ecx+78h], 1
.text:000005AF                 mov     [ebp+var_68], 0
.text:000005B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000005BD                 lea     ecx, [ebp+var_20]
.text:000005C0                 call    ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)
.text:000005C5                 mov     eax, [ebp+var_68]
.text:000005C8
.text:000005C8 loc_5C8:                                ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+228j
.text:000005C8                 push    edx
.text:000005C9                 mov     ecx, ebp
.text:000005CB                 push    eax
.text:000005CC                 lea     edx, $LN40
.text:000005D2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000005D7                 pop     eax
.text:000005D8                 pop     edx
.text:000005D9                 mov     ecx, [ebp+var_C]
.text:000005DC                 mov     large fs:0, ecx
.text:000005E3                 pop     ecx
.text:000005E4                 pop     edi
.text:000005E5                 add     esp, 88h
.text:000005EB                 cmp     ebp, esp
.text:000005ED                 call    __RTC_CheckEsp
.text:000005F2                 mov     esp, ebp
.text:000005F4                 pop     ebp
.text:000005F5                 retn    8
.text:000005F5 ?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z endp
.text:000005F5
.text:000005F5 ; ---------------------------------------------------------------------------
.text:000005F8 $LN40           dd 1                    ; DATA XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+3CCo
.text:000005FC                 dd offset $LN39
.text:00000600 $LN39           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:000005FCo
.text:00000608                 dd offset $LN37         ; "methods"
.text:0000060C $LN37           db 'methods',0          ; DATA XREF: .text:00000608o
.text:00000614                 align 10h
.text:00000620
.text:00000620 ; =============== S U B R O U T I N E =======================================
.text:00000620
.text:00000620 ; Attributes: bp-based frame
.text:00000620
.text:00000620 ; __int32 __cdecl NArchive::N7z::CHandler::UpdateItems(NArchive::N7z::CHandler *this, struct ISequentialOutStream *, unsigned int, struct IArchiveUpdateCallback *)
.text:00000620                 public ?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00000620 ?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z proc near
.text:00000620
.text:00000620 var_500         = dword ptr -500h
.text:00000620 var_4FC         = dword ptr -4FCh
.text:00000620 var_4F8         = dword ptr -4F8h
.text:00000620 var_4F4         = dword ptr -4F4h
.text:00000620 var_4F0         = dword ptr -4F0h
.text:00000620 var_4EC         = dword ptr -4ECh
.text:00000620 var_4E8         = dword ptr -4E8h
.text:00000620 var_4E4         = dword ptr -4E4h
.text:00000620 var_4E0         = dword ptr -4E0h
.text:00000620 var_4DC         = dword ptr -4DCh
.text:00000620 var_4D8         = dword ptr -4D8h
.text:00000620 var_4D4         = dword ptr -4D4h
.text:00000620 var_4D0         = dword ptr -4D0h
.text:00000620 var_4CC         = dword ptr -4CCh
.text:00000620 var_4C5         = byte ptr -4C5h
.text:00000620 var_4C4         = dword ptr -4C4h
.text:00000620 var_4C0         = dword ptr -4C0h
.text:00000620 var_4BC         = dword ptr -4BCh
.text:00000620 var_4B8         = dword ptr -4B8h
.text:00000620 var_4B4         = dword ptr -4B4h
.text:00000620 var_4B0         = dword ptr -4B0h
.text:00000620 var_4AC         = dword ptr -4ACh
.text:00000620 var_4A8         = dword ptr -4A8h
.text:00000620 var_4A4         = dword ptr -4A4h
.text:00000620 var_4A0         = dword ptr -4A0h
.text:00000620 var_49C         = dword ptr -49Ch
.text:00000620 var_498         = dword ptr -498h
.text:00000620 var_494         = dword ptr -494h
.text:00000620 var_490         = dword ptr -490h
.text:00000620 var_48C         = dword ptr -48Ch
.text:00000620 var_488         = dword ptr -488h
.text:00000620 var_484         = dword ptr -484h
.text:00000620 var_480         = dword ptr -480h
.text:00000620 var_47C         = dword ptr -47Ch
.text:00000620 var_478         = dword ptr -478h
.text:00000620 var_474         = dword ptr -474h
.text:00000620 var_470         = dword ptr -470h
.text:00000620 var_46C         = dword ptr -46Ch
.text:00000620 var_468         = dword ptr -468h
.text:00000620 var_464         = dword ptr -464h
.text:00000620 var_460         = dword ptr -460h
.text:00000620 var_45C         = dword ptr -45Ch
.text:00000620 var_458         = dword ptr -458h
.text:00000620 var_454         = byte ptr -454h
.text:00000620 var_453         = byte ptr -453h
.text:00000620 var_452         = byte ptr -452h
.text:00000620 var_451         = byte ptr -451h
.text:00000620 var_450         = dword ptr -450h
.text:00000620 var_44C         = dword ptr -44Ch
.text:00000620 var_448         = dword ptr -448h
.text:00000620 var_442         = byte ptr -442h
.text:00000620 var_441         = byte ptr -441h
.text:00000620 var_440         = dword ptr -440h
.text:00000620 var_43C         = dword ptr -43Ch
.text:00000620 var_438         = dword ptr -438h
.text:00000620 var_433         = byte ptr -433h
.text:00000620 var_432         = byte ptr -432h
.text:00000620 var_431         = byte ptr -431h
.text:00000620 var_430         = dword ptr -430h
.text:00000620 var_42C         = dword ptr -42Ch
.text:00000620 var_428         = dword ptr -428h
.text:00000620 var_424         = dword ptr -424h
.text:00000620 var_420         = dword ptr -420h
.text:00000620 var_418         = dword ptr -418h
.text:00000620 var_414         = dword ptr -414h
.text:00000620 var_410         = dword ptr -410h
.text:00000620 var_40C         = dword ptr -40Ch
.text:00000620 var_408         = dword ptr -408h
.text:00000620 var_404         = dword ptr -404h
.text:00000620 var_400         = dword ptr -400h
.text:00000620 var_3FC         = dword ptr -3FCh
.text:00000620 var_3F8         = dword ptr -3F8h
.text:00000620 var_3F4         = dword ptr -3F4h
.text:00000620 var_3F0         = dword ptr -3F0h
.text:00000620 var_3EC         = dword ptr -3ECh
.text:00000620 var_3E8         = byte ptr -3E8h
.text:00000620 var_3DC         = byte ptr -3DCh
.text:00000620 var_3D0         = dword ptr -3D0h
.text:00000620 var_3CC         = dword ptr -3CCh
.text:00000620 var_3C8         = dword ptr -3C8h
.text:00000620 var_3C4         = dword ptr -3C4h
.text:00000620 var_3C0         = dword ptr -3C0h
.text:00000620 var_3BC         = dword ptr -3BCh
.text:00000620 var_3B8         = dword ptr -3B8h
.text:00000620 var_3B4         = dword ptr -3B4h
.text:00000620 var_3B0         = dword ptr -3B0h
.text:00000620 var_3AC         = dword ptr -3ACh
.text:00000620 var_3A8         = dword ptr -3A8h
.text:00000620 var_3A0         = byte ptr -3A0h
.text:00000620 var_394         = byte ptr -394h
.text:00000620 var_2A8         = byte ptr -2A8h
.text:00000620 var_248         = dword ptr -248h
.text:00000620 var_244         = dword ptr -244h
.text:00000620 var_240         = byte ptr -240h
.text:00000620 var_23F         = byte ptr -23Fh
.text:00000620 var_23C         = dword ptr -23Ch
.text:00000620 var_238         = byte ptr -238h
.text:00000620 var_230         = dword ptr -230h
.text:00000620 var_22C         = dword ptr -22Ch
.text:00000620 var_228         = dword ptr -228h
.text:00000620 var_224         = dword ptr -224h
.text:00000620 var_220         = byte ptr -220h
.text:00000620 var_21F         = byte ptr -21Fh
.text:00000620 var_21E         = byte ptr -21Eh
.text:00000620 var_214         = dword ptr -214h
.text:00000620 var_20E         = byte ptr -20Eh
.text:00000620 var_20D         = byte ptr -20Dh
.text:00000620 var_20C         = dword ptr -20Ch
.text:00000620 var_204         = dword ptr -204h
.text:00000620 var_1F8         = byte ptr -1F8h
.text:00000620 var_1EC         = byte ptr -1ECh
.text:00000620 var_1E4         = dword ptr -1E4h
.text:00000620 var_1E0         = dword ptr -1E0h
.text:00000620 var_1DC         = dword ptr -1DCh
.text:00000620 var_1D4         = byte ptr -1D4h
.text:00000620 var_1B8         = dword ptr -1B8h
.text:00000620 var_1B4         = byte ptr -1B4h
.text:00000620 var_1B3         = byte ptr -1B3h
.text:00000620 var_1B0         = byte ptr -1B0h
.text:00000620 var_19C         = byte ptr -19Ch
.text:00000620 var_183         = byte ptr -183h
.text:00000620 var_180         = dword ptr -180h
.text:00000620 var_17C         = byte ptr -17Ch
.text:00000620 var_17B         = byte ptr -17Bh
.text:00000620 var_178         = byte ptr -178h
.text:00000620 var_168         = dword ptr -168h
.text:00000620 var_160         = word ptr -160h
.text:00000620 var_158         = dword ptr -158h
.text:00000620 var_154         = dword ptr -154h
.text:00000620 var_14C         = dword ptr -14Ch
.text:00000620 var_144         = word ptr -144h
.text:00000620 var_13C         = word ptr -13Ch
.text:00000620 var_130         = dword ptr -130h
.text:00000620 var_128         = word ptr -128h
.text:00000620 var_120         = word ptr -120h
.text:00000620 var_114         = dword ptr -114h
.text:00000620 var_10C         = word ptr -10Ch
.text:00000620 var_104         = dword ptr -104h
.text:00000620 var_F8          = dword ptr -0F8h
.text:00000620 var_F4          = dword ptr -0F4h
.text:00000620 var_F0          = dword ptr -0F0h
.text:00000620 var_EC          = dword ptr -0ECh
.text:00000620 var_E4          = word ptr -0E4h
.text:00000620 var_DC          = dword ptr -0DCh
.text:00000620 var_CD          = byte ptr -0CDh
.text:00000620 var_CC          = dword ptr -0CCh
.text:00000620 var_C4          = byte ptr -0C4h
.text:00000620 var_B0          = dword ptr -0B0h
.text:00000620 var_AC          = dword ptr -0ACh
.text:00000620 var_A8          = qword ptr -0A8h
.text:00000620 var_A0          = qword ptr -0A0h
.text:00000620 var_98          = qword ptr -98h
.text:00000620 var_90          = dword ptr -90h
.text:00000620 var_8C          = dword ptr -8Ch
.text:00000620 var_88          = byte ptr -88h
.text:00000620 var_7C          = dword ptr -7Ch
.text:00000620 var_78          = byte ptr -78h
.text:00000620 var_77          = byte ptr -77h
.text:00000620 var_76          = byte ptr -76h
.text:00000620 var_75          = byte ptr -75h
.text:00000620 var_74          = byte ptr -74h
.text:00000620 var_73          = byte ptr -73h
.text:00000620 var_72          = byte ptr -72h
.text:00000620 var_71          = byte ptr -71h
.text:00000620 var_6C          = dword ptr -6Ch
.text:00000620 var_64          = dword ptr -64h
.text:00000620 var_58          = dword ptr -58h
.text:00000620 var_4C          = dword ptr -4Ch
.text:00000620 var_44          = dword ptr -44h
.text:00000620 var_3C          = byte ptr -3Ch
.text:00000620 var_2B          = byte ptr -2Bh
.text:00000620 var_2A          = byte ptr -2Ah
.text:00000620 var_29          = byte ptr -29h
.text:00000620 var_24          = byte ptr -24h
.text:00000620 var_14          = dword ptr -14h
.text:00000620 var_10          = dword ptr -10h
.text:00000620 var_C           = dword ptr -0Ch
.text:00000620 var_4           = dword ptr -4
.text:00000620 this            = dword ptr  8
.text:00000620 arg_4           = dword ptr  0Ch
.text:00000620 arg_8           = dword ptr  10h
.text:00000620 arg_C           = dword ptr  14h
.text:00000620
.text:00000620 ; FUNCTION CHUNK AT .text:00001BD3 SIZE 00000032 BYTES
.text:00000620
.text:00000620                 push    ebp
.text:00000621                 mov     ebp, esp
.text:00000623                 push    0FFFFFFFFh
.text:00000625                 push    offset __ehhandler$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:0000062A                 mov     eax, large fs:0
.text:00000630                 push    eax
.text:00000631                 push    ecx
.text:00000632                 sub     esp, 4F0h
.text:00000638                 push    ebx
.text:00000639                 push    esi
.text:0000063A                 push    edi
.text:0000063B                 lea     edi, [ebp+var_500]
.text:00000641                 mov     ecx, 13Ch
.text:00000646                 mov     eax, 0CCCCCCCCh
.text:0000064B                 rep stosd
.text:0000064D                 mov     eax, dword ptr ds:___security_cookie
.text:00000652                 xor     eax, ebp
.text:00000654                 push    eax
.text:00000655                 lea     eax, [ebp+var_C]
.text:00000658                 mov     large fs:0, eax
.text:0000065E                 mov     [ebp+var_10], esp
.text:00000661                 mov     [ebp+var_4], 0
.text:00000668                 mov     [ebp+var_14], 0
.text:0000066F                 mov     ecx, [ebp+this]
.text:00000672                 add     ecx, 7Ch ; '|'
.text:00000675                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000067A                 mov     [ebp+var_420], eax
.text:00000680                 cmp     [ebp+var_420], 0
.text:00000687                 jz      short loc_694
.text:00000689                 mov     eax, [ebp+this]
.text:0000068C                 add     eax, 84h ; 'ä'
.text:00000691                 mov     [ebp+var_14], eax
.text:00000694
.text:00000694 loc_694:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+67j
.text:00000694                 lea     ecx, [ebp+var_24]
.text:00000697                 call    ??0?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:0000069C                 mov     [ebp+var_424], eax
.text:000006A2                 mov     byte ptr [ebp+var_4], 1
.text:000006A6                 mov     ecx, [ebp+this]
.text:000006A9                 movzx   edx, byte ptr [ecx+72h]
.text:000006AD                 test    edx, edx
.text:000006AF                 jz      short loc_6C8
.text:000006B1                 mov     eax, [ebp+this]
.text:000006B4                 movzx   ecx, byte ptr [eax+71h]
.text:000006B8                 test    ecx, ecx
.text:000006BA                 jz      short loc_6C8
.text:000006BC                 mov     [ebp+var_428], 1
.text:000006C6                 jmp     short loc_6D2
.text:000006C8 ; ---------------------------------------------------------------------------
.text:000006C8
.text:000006C8 loc_6C8:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+8Fj
.text:000006C8                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+9Aj
.text:000006C8                 mov     [ebp+var_428], 0
.text:000006D2
.text:000006D2 loc_6D2:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A6j
.text:000006D2                 mov     dl, byte ptr [ebp+var_428]
.text:000006D8                 mov     [ebp+var_29], dl
.text:000006DB                 mov     eax, [ebp+this]
.text:000006DE                 movzx   ecx, byte ptr [eax+74h]
.text:000006E2                 test    ecx, ecx
.text:000006E4                 jz      short loc_6FD
.text:000006E6                 mov     edx, [ebp+this]
.text:000006E9                 movzx   eax, byte ptr [edx+73h]
.text:000006ED                 test    eax, eax
.text:000006EF                 jz      short loc_6FD
.text:000006F1                 mov     [ebp+var_42C], 1
.text:000006FB                 jmp     short loc_707
.text:000006FD ; ---------------------------------------------------------------------------
.text:000006FD
.text:000006FD loc_6FD:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C4j
.text:000006FD                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+CFj
.text:000006FD                 mov     [ebp+var_42C], 0
.text:00000707
.text:00000707 loc_707:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+DBj
.text:00000707                 mov     cl, byte ptr [ebp+var_42C]
.text:0000070D                 mov     [ebp+var_2A], cl
.text:00000710                 mov     edx, [ebp+this]
.text:00000713                 movzx   eax, byte ptr [edx+76h]
.text:00000717                 test    eax, eax
.text:00000719                 jz      short loc_726
.text:0000071B                 mov     ecx, [ebp+this]
.text:0000071E                 movzx   edx, byte ptr [ecx+75h]
.text:00000722                 test    edx, edx
.text:00000724                 jnz     short loc_73D
.text:00000726
.text:00000726 loc_726:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F9j
.text:00000726                 mov     eax, [ebp+this]
.text:00000729                 movzx   ecx, byte ptr [eax+76h]
.text:0000072D                 test    ecx, ecx
.text:0000072F                 jz      short loc_73D
.text:00000731                 mov     [ebp+var_430], 0
.text:0000073B                 jmp     short loc_747
.text:0000073D ; ---------------------------------------------------------------------------
.text:0000073D
.text:0000073D loc_73D:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+104j
.text:0000073D                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+10Fj
.text:0000073D                 mov     [ebp+var_430], 1
.text:00000747
.text:00000747 loc_747:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+11Bj
.text:00000747                 mov     dl, byte ptr [ebp+var_430]
.text:0000074D                 mov     [ebp+var_2B], dl
.text:00000750                 cmp     [ebp+var_14], 0
.text:00000754                 jz      loc_7E4
.text:0000075A                 mov     eax, [ebp+this]
.text:0000075D                 movzx   ecx, byte ptr [eax+72h]
.text:00000761                 test    ecx, ecx
.text:00000763                 jnz     short loc_787
.text:00000765                 mov     ecx, [ebp+var_14]
.text:00000768                 add     ecx, 64h ; 'd'
.text:0000076B                 call    ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ ; CRecordVector<bool>::IsEmpty(void)
.text:00000770                 mov     [ebp+var_431], al
.text:00000776                 movzx   edx, [ebp+var_431]
.text:0000077D                 neg     edx
.text:0000077F                 sbb     edx, edx
.text:00000781                 add     edx, 1
.text:00000784                 mov     [ebp+var_29], dl
.text:00000787
.text:00000787 loc_787:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+143j
.text:00000787                 mov     eax, [ebp+this]
.text:0000078A                 movzx   ecx, byte ptr [eax+74h]
.text:0000078E                 test    ecx, ecx
.text:00000790                 jnz     short loc_7B4
.text:00000792                 mov     ecx, [ebp+var_14]
.text:00000795                 add     ecx, 7Ch ; '|'
.text:00000798                 call    ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ ; CRecordVector<bool>::IsEmpty(void)
.text:0000079D                 mov     [ebp+var_432], al
.text:000007A3                 movzx   edx, [ebp+var_432]
.text:000007AA                 neg     edx
.text:000007AC                 sbb     edx, edx
.text:000007AE                 add     edx, 1
.text:000007B1                 mov     [ebp+var_2A], dl
.text:000007B4
.text:000007B4 loc_7B4:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+170j
.text:000007B4                 mov     eax, [ebp+this]
.text:000007B7                 movzx   ecx, byte ptr [eax+76h]
.text:000007BB                 test    ecx, ecx
.text:000007BD                 jnz     short loc_7E4
.text:000007BF                 mov     ecx, [ebp+var_14]
.text:000007C2                 add     ecx, 94h ; 'ö'
.text:000007C8                 call    ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ ; CRecordVector<bool>::IsEmpty(void)
.text:000007CD                 mov     [ebp+var_433], al
.text:000007D3                 movzx   edx, [ebp+var_433]
.text:000007DA                 neg     edx
.text:000007DC                 sbb     edx, edx
.text:000007DE                 add     edx, 1
.text:000007E1                 mov     [ebp+var_2B], dl
.text:000007E4
.text:000007E4 loc_7E4:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+134j
.text:000007E4                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+19Dj
.text:000007E4                 lea     ecx, [ebp+var_3C]
.text:000007E7                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000007EC                 mov     [ebp+var_438], eax
.text:000007F2                 mov     byte ptr [ebp+var_4], 2
.text:000007F6                 mov     [ebp+var_44], 0
.text:000007FD                 jmp     short loc_808
.text:000007FF ; ---------------------------------------------------------------------------
.text:000007FF
.text:000007FF loc_7FF:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E1Fj
.text:000007FF                 mov     eax, [ebp+var_44]
.text:00000802                 add     eax, 1
.text:00000805                 mov     [ebp+var_44], eax
.text:00000808
.text:00000808 loc_808:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1DDj
.text:00000808                 mov     ecx, [ebp+var_44]
.text:0000080B                 cmp     ecx, [ebp+arg_8]
.text:0000080E                 jnb     loc_1444
.text:00000814                 cmp     [ebp+arg_C], 0
.text:00000818                 jnz     short loc_847
.text:0000081A                 mov     [ebp+var_3AC], 80004005h
.text:00000824                 mov     byte ptr [ebp+var_4], 1
.text:00000828                 lea     ecx, [ebp+var_3C] ; this
.text:0000082B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000830                 mov     byte ptr [ebp+var_4], 0
.text:00000834                 lea     ecx, [ebp+var_24]
.text:00000837                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:0000083C                 mov     eax, [ebp+var_3AC]
.text:00000842                 jmp     loc_1BD3
.text:00000847 ; ---------------------------------------------------------------------------
.text:00000847
.text:00000847 loc_847:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1F8j
.text:00000847                 mov     esi, esp
.text:00000849                 lea     edx, [ebp+var_64]
.text:0000084C                 push    edx
.text:0000084D                 lea     eax, [ebp+var_58]
.text:00000850                 push    eax
.text:00000851                 lea     ecx, [ebp+var_4C]
.text:00000854                 push    ecx
.text:00000855                 mov     edx, [ebp+var_44]
.text:00000858                 push    edx
.text:00000859                 mov     eax, [ebp+arg_C]
.text:0000085C                 push    eax
.text:0000085D                 mov     ecx, [ebp+arg_C]
.text:00000860                 mov     edx, [ecx]
.text:00000862                 mov     eax, [edx+14h]
.text:00000865                 call    eax
.text:00000867                 cmp     esi, esp
.text:00000869                 call    __RTC_CheckEsp
.text:0000086E                 mov     [ebp+var_43C], eax
.text:00000874                 mov     ecx, [ebp+var_43C]
.text:0000087A                 mov     [ebp+var_6C], ecx
.text:0000087D                 cmp     [ebp+var_6C], 0
.text:00000881                 jz      short loc_8AF
.text:00000883                 mov     edx, [ebp+var_6C]
.text:00000886                 mov     [ebp+var_3B0], edx
.text:0000088C                 mov     byte ptr [ebp+var_4], 1
.text:00000890                 lea     ecx, [ebp+var_3C] ; this
.text:00000893                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000898                 mov     byte ptr [ebp+var_4], 0
.text:0000089C                 lea     ecx, [ebp+var_24]
.text:0000089F                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:000008A4                 mov     eax, [ebp+var_3B0]
.text:000008AA                 jmp     loc_1BD3
.text:000008AF ; ---------------------------------------------------------------------------
.text:000008AF
.text:000008AF loc_8AF:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+261j
.text:000008AF                 lea     ecx, [ebp+var_B0] ; this
.text:000008B5                 call    ??0CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::CUpdateItem(void)
.text:000008BA                 mov     [ebp+var_440], eax
.text:000008C0                 mov     byte ptr [ebp+var_4], 3
.text:000008C4                 mov     eax, [ebp+var_58]
.text:000008C7                 push    eax             ; int
.text:000008C8                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:000008CD                 mov     [ebp+var_441], al
.text:000008D3                 mov     cl, [ebp+var_441]
.text:000008D9                 mov     [ebp+var_77], cl
.text:000008DC                 mov     edx, [ebp+var_4C]
.text:000008DF                 push    edx             ; int
.text:000008E0                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:000008E5                 mov     [ebp+var_442], al
.text:000008EB                 mov     al, [ebp+var_442]
.text:000008F1                 mov     [ebp+var_78], al
.text:000008F4                 mov     ecx, [ebp+var_64]
.text:000008F7                 mov     [ebp+var_B0], ecx
.text:000008FD                 mov     edx, [ebp+var_44]
.text:00000900                 mov     [ebp+var_AC], edx
.text:00000906                 mov     [ebp+var_76], 0
.text:0000090A                 mov     [ebp+var_90], 0
.text:00000914                 mov     [ebp+var_8C], 0
.text:0000091E                 lea     ecx, [ebp+var_C4]
.text:00000924                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000929                 mov     [ebp+var_448], eax
.text:0000092F                 mov     byte ptr [ebp+var_4], 4
.text:00000933                 cmp     [ebp+var_B0], 0FFFFFFFFh
.text:0000093A                 jz      loc_ABC
.text:00000940                 cmp     [ebp+var_14], 0
.text:00000944                 jz      short loc_965
.text:00000946                 mov     ecx, [ebp+var_14]
.text:00000949                 add     ecx, 58h ; 'X'
.text:0000094C                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00000951                 mov     [ebp+var_44C], eax
.text:00000957                 mov     eax, [ebp+var_B0]
.text:0000095D                 cmp     eax, [ebp+var_44C]
.text:00000963                 jb      short loc_9B0
.text:00000965
.text:00000965 loc_965:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+324j
.text:00000965                 mov     [ebp+var_3B4], 80070057h
.text:0000096F                 mov     byte ptr [ebp+var_4], 3
.text:00000973                 lea     ecx, [ebp+var_C4] ; this
.text:00000979                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000097E                 mov     byte ptr [ebp+var_4], 2
.text:00000982                 lea     ecx, [ebp+var_B0] ; this
.text:00000988                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:0000098D                 mov     byte ptr [ebp+var_4], 1
.text:00000991                 lea     ecx, [ebp+var_3C] ; this
.text:00000994                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000999                 mov     byte ptr [ebp+var_4], 0
.text:0000099D                 lea     ecx, [ebp+var_24]
.text:000009A0                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:000009A5                 mov     eax, [ebp+var_3B4]
.text:000009AB                 jmp     loc_1BD3
.text:000009B0 ; ---------------------------------------------------------------------------
.text:000009B0
.text:000009B0 loc_9B0:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+343j
.text:000009B0                 mov     ecx, [ebp+var_B0]
.text:000009B6                 push    ecx
.text:000009B7                 mov     ecx, [ebp+var_14]
.text:000009BA                 add     ecx, 58h ; 'X'
.text:000009BD                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:000009C2                 mov     [ebp+var_450], eax
.text:000009C8                 mov     edx, [ebp+var_450]
.text:000009CE                 mov     [ebp+var_CC], edx
.text:000009D4                 movzx   eax, [ebp+var_77]
.text:000009D8                 test    eax, eax
.text:000009DA                 jnz     short loc_9F8
.text:000009DC                 lea     ecx, [ebp+var_C4]
.text:000009E2                 push    ecx             ; struct UString *
.text:000009E3                 mov     edx, [ebp+var_B0]
.text:000009E9                 push    edx             ; unsigned int
.text:000009EA                 mov     ecx, [ebp+this]
.text:000009ED                 add     ecx, 84h ; 'ä'  ; this
.text:000009F3                 call    ?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z ; NArchive::N7z::CDatabase::GetPath(uint,UString &)
.text:000009F8
.text:000009F8 loc_9F8:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3BAj
.text:000009F8                 mov     eax, [ebp+var_CC]
.text:000009FE                 mov     cl, [eax+11h]
.text:00000A01                 mov     [ebp+var_75], cl
.text:00000A04                 mov     edx, [ebp+var_CC]
.text:00000A0A                 mov     eax, [edx]
.text:00000A0C                 mov     [ebp+var_90], eax
.text:00000A12                 mov     ecx, [edx+4]
.text:00000A15                 mov     [ebp+var_8C], ecx
.text:00000A1B                 mov     edx, [ebp+var_B0]
.text:00000A21                 push    edx             ; unsigned int
.text:00000A22                 mov     ecx, [ebp+var_14] ; this
.text:00000A25                 call    ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CDatabase::IsItemAnti(uint)
.text:00000A2A                 mov     [ebp+var_451], al
.text:00000A30                 mov     al, [ebp+var_451]
.text:00000A36                 mov     [ebp+var_76], al
.text:00000A39                 movzx   ecx, [ebp+var_77]
.text:00000A3D                 test    ecx, ecx
.text:00000A3F                 jnz     short loc_ABC
.text:00000A41                 lea     edx, [ebp+var_A8]
.text:00000A47                 push    edx             ; unsigned __int64 *
.text:00000A48                 mov     eax, [ebp+var_B0]
.text:00000A4E                 push    eax             ; unsigned int
.text:00000A4F                 mov     ecx, [ebp+var_14]
.text:00000A52                 add     ecx, 64h ; 'd'  ; this
.text:00000A55                 call    ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)
.text:00000A5A                 mov     [ebp+var_452], al
.text:00000A60                 mov     cl, [ebp+var_452]
.text:00000A66                 mov     [ebp+var_73], cl
.text:00000A69                 lea     edx, [ebp+var_A0]
.text:00000A6F                 push    edx             ; unsigned __int64 *
.text:00000A70                 mov     eax, [ebp+var_B0]
.text:00000A76                 push    eax             ; unsigned int
.text:00000A77                 mov     ecx, [ebp+var_14]
.text:00000A7A                 add     ecx, 7Ch ; '|'  ; this
.text:00000A7D                 call    ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)
.text:00000A82                 mov     [ebp+var_453], al
.text:00000A88                 mov     cl, [ebp+var_453]
.text:00000A8E                 mov     [ebp+var_72], cl
.text:00000A91                 lea     edx, [ebp+var_98]
.text:00000A97                 push    edx             ; unsigned __int64 *
.text:00000A98                 mov     eax, [ebp+var_B0]
.text:00000A9E                 push    eax             ; unsigned int
.text:00000A9F                 mov     ecx, [ebp+var_14]
.text:00000AA2                 add     ecx, 94h ; 'ö'  ; this
.text:00000AA8                 call    ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)
.text:00000AAD                 mov     [ebp+var_454], al
.text:00000AB3                 mov     cl, [ebp+var_454]
.text:00000AB9                 mov     [ebp+var_71], cl
.text:00000ABC
.text:00000ABC loc_ABC:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+31Aj
.text:00000ABC                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+41Fj
.text:00000ABC                 movzx   edx, [ebp+var_77]
.text:00000AC0                 test    edx, edx
.text:00000AC2                 jz      loc_1247
.text:00000AC8                 lea     ecx, [ebp+var_E4] ; this
.text:00000ACE                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000AD3                 mov     [ebp+var_458], eax
.text:00000AD9                 mov     byte ptr [ebp+var_4], 5
.text:00000ADD                 mov     esi, esp
.text:00000ADF                 lea     eax, [ebp+var_E4]
.text:00000AE5                 push    eax
.text:00000AE6                 push    9
.text:00000AE8                 mov     ecx, [ebp+var_44]
.text:00000AEB                 push    ecx
.text:00000AEC                 mov     edx, [ebp+arg_C]
.text:00000AEF                 push    edx
.text:00000AF0                 mov     eax, [ebp+arg_C]
.text:00000AF3                 mov     ecx, [eax]
.text:00000AF5                 mov     edx, [ecx+18h]
.text:00000AF8                 call    edx
.text:00000AFA                 cmp     esi, esp
.text:00000AFC                 call    __RTC_CheckEsp
.text:00000B01                 mov     [ebp+var_45C], eax
.text:00000B07                 mov     eax, [ebp+var_45C]
.text:00000B0D                 mov     [ebp+var_EC], eax
.text:00000B13                 cmp     [ebp+var_EC], 0
.text:00000B1A                 jz      short loc_B78
.text:00000B1C                 mov     ecx, [ebp+var_EC]
.text:00000B22                 mov     [ebp+var_3B8], ecx
.text:00000B28                 mov     byte ptr [ebp+var_4], 4
.text:00000B2C                 lea     ecx, [ebp+var_E4] ; this
.text:00000B32                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000B37                 mov     byte ptr [ebp+var_4], 3
.text:00000B3B                 lea     ecx, [ebp+var_C4] ; this
.text:00000B41                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000B46                 mov     byte ptr [ebp+var_4], 2
.text:00000B4A                 lea     ecx, [ebp+var_B0] ; this
.text:00000B50                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:00000B55                 mov     byte ptr [ebp+var_4], 1
.text:00000B59                 lea     ecx, [ebp+var_3C] ; this
.text:00000B5C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000B61                 mov     byte ptr [ebp+var_4], 0
.text:00000B65                 lea     ecx, [ebp+var_24]
.text:00000B68                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00000B6D                 mov     eax, [ebp+var_3B8]
.text:00000B73                 jmp     loc_1BD3
.text:00000B78 ; ---------------------------------------------------------------------------
.text:00000B78
.text:00000B78 loc_B78:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4FAj
.text:00000B78                 movzx   edx, [ebp+var_E4]
.text:00000B7F                 test    edx, edx
.text:00000B81                 jnz     short loc_B89
.text:00000B83                 mov     [ebp+var_74], 0
.text:00000B87                 jmp     short loc_BFE
.text:00000B89 ; ---------------------------------------------------------------------------
.text:00000B89
.text:00000B89 loc_B89:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+561j
.text:00000B89                 movzx   eax, [ebp+var_E4]
.text:00000B90                 cmp     eax, 13h
.text:00000B93                 jz      short loc_BF1
.text:00000B95                 mov     [ebp+var_3BC], 80070057h
.text:00000B9F                 mov     byte ptr [ebp+var_4], 4
.text:00000BA3                 lea     ecx, [ebp+var_E4] ; this
.text:00000BA9                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000BAE                 mov     byte ptr [ebp+var_4], 3
.text:00000BB2                 lea     ecx, [ebp+var_C4] ; this
.text:00000BB8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000BBD                 mov     byte ptr [ebp+var_4], 2
.text:00000BC1                 lea     ecx, [ebp+var_B0] ; this
.text:00000BC7                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:00000BCC                 mov     byte ptr [ebp+var_4], 1
.text:00000BD0                 lea     ecx, [ebp+var_3C] ; this
.text:00000BD3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000BD8                 mov     byte ptr [ebp+var_4], 0
.text:00000BDC                 lea     ecx, [ebp+var_24]
.text:00000BDF                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00000BE4                 mov     eax, [ebp+var_3BC]
.text:00000BEA                 jmp     loc_1BD3
.text:00000BEF ; ---------------------------------------------------------------------------
.text:00000BEF                 jmp     short loc_BFE
.text:00000BF1 ; ---------------------------------------------------------------------------
.text:00000BF1
.text:00000BF1 loc_BF1:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+573j
.text:00000BF1                 mov     ecx, [ebp+var_DC]
.text:00000BF7                 mov     [ebp+var_7C], ecx
.text:00000BFA                 mov     [ebp+var_74], 1
.text:00000BFE
.text:00000BFE loc_BFE:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+567j
.text:00000BFE                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5CFj
.text:00000BFE                 mov     byte ptr [ebp+var_4], 4
.text:00000C02                 lea     ecx, [ebp+var_E4] ; this
.text:00000C08                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000C0D                 movzx   edx, [ebp+var_29]
.text:00000C11                 test    edx, edx
.text:00000C13                 jz      loc_C9B
.text:00000C19                 lea     eax, [ebp+var_73]
.text:00000C1C                 push    eax
.text:00000C1D                 lea     ecx, [ebp+var_A8]
.text:00000C23                 push    ecx
.text:00000C24                 push    0Ah
.text:00000C26                 mov     edx, [ebp+var_44]
.text:00000C29                 push    edx
.text:00000C2A                 mov     eax, [ebp+arg_C]
.text:00000C2D                 push    eax
.text:00000C2E                 call    ?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z ; NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)
.text:00000C33                 mov     [ebp+var_460], eax
.text:00000C39                 mov     ecx, [ebp+var_460]
.text:00000C3F                 mov     [ebp+var_F0], ecx
.text:00000C45                 cmp     [ebp+var_F0], 0
.text:00000C4C                 jz      short loc_C9B
.text:00000C4E                 mov     edx, [ebp+var_F0]
.text:00000C54                 mov     [ebp+var_3C0], edx
.text:00000C5A                 mov     byte ptr [ebp+var_4], 3
.text:00000C5E                 lea     ecx, [ebp+var_C4] ; this
.text:00000C64                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000C69                 mov     byte ptr [ebp+var_4], 2
.text:00000C6D                 lea     ecx, [ebp+var_B0] ; this
.text:00000C73                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:00000C78                 mov     byte ptr [ebp+var_4], 1
.text:00000C7C                 lea     ecx, [ebp+var_3C] ; this
.text:00000C7F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000C84                 mov     byte ptr [ebp+var_4], 0
.text:00000C88                 lea     ecx, [ebp+var_24]
.text:00000C8B                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00000C90                 mov     eax, [ebp+var_3C0]
.text:00000C96                 jmp     loc_1BD3
.text:00000C9B ; ---------------------------------------------------------------------------
.text:00000C9B
.text:00000C9B loc_C9B:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5F3j
.text:00000C9B                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+62Cj
.text:00000C9B                 movzx   eax, [ebp+var_2A]
.text:00000C9F                 test    eax, eax
.text:00000CA1                 jz      loc_D29
.text:00000CA7                 lea     ecx, [ebp+var_72]
.text:00000CAA                 push    ecx
.text:00000CAB                 lea     edx, [ebp+var_A0]
.text:00000CB1                 push    edx
.text:00000CB2                 push    0Bh
.text:00000CB4                 mov     eax, [ebp+var_44]
.text:00000CB7                 push    eax
.text:00000CB8                 mov     ecx, [ebp+arg_C]
.text:00000CBB                 push    ecx
.text:00000CBC                 call    ?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z ; NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)
.text:00000CC1                 mov     [ebp+var_464], eax
.text:00000CC7                 mov     edx, [ebp+var_464]
.text:00000CCD                 mov     [ebp+var_F4], edx
.text:00000CD3                 cmp     [ebp+var_F4], 0
.text:00000CDA                 jz      short loc_D29
.text:00000CDC                 mov     eax, [ebp+var_F4]
.text:00000CE2                 mov     [ebp+var_3C4], eax
.text:00000CE8                 mov     byte ptr [ebp+var_4], 3
.text:00000CEC                 lea     ecx, [ebp+var_C4] ; this
.text:00000CF2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000CF7                 mov     byte ptr [ebp+var_4], 2
.text:00000CFB                 lea     ecx, [ebp+var_B0] ; this
.text:00000D01                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:00000D06                 mov     byte ptr [ebp+var_4], 1
.text:00000D0A                 lea     ecx, [ebp+var_3C] ; this
.text:00000D0D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D12                 mov     byte ptr [ebp+var_4], 0
.text:00000D16                 lea     ecx, [ebp+var_24]
.text:00000D19                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00000D1E                 mov     eax, [ebp+var_3C4]
.text:00000D24                 jmp     loc_1BD3
.text:00000D29 ; ---------------------------------------------------------------------------
.text:00000D29
.text:00000D29 loc_D29:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+681j
.text:00000D29                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6BAj
.text:00000D29                 movzx   ecx, [ebp+var_2B]
.text:00000D2D                 test    ecx, ecx
.text:00000D2F                 jz      loc_DB7
.text:00000D35                 lea     edx, [ebp+var_71]
.text:00000D38                 push    edx
.text:00000D39                 lea     eax, [ebp+var_98]
.text:00000D3F                 push    eax
.text:00000D40                 push    0Ch
.text:00000D42                 mov     ecx, [ebp+var_44]
.text:00000D45                 push    ecx
.text:00000D46                 mov     edx, [ebp+arg_C]
.text:00000D49                 push    edx
.text:00000D4A                 call    ?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z ; NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)
.text:00000D4F                 mov     [ebp+var_468], eax
.text:00000D55                 mov     eax, [ebp+var_468]
.text:00000D5B                 mov     [ebp+var_F8], eax
.text:00000D61                 cmp     [ebp+var_F8], 0
.text:00000D68                 jz      short loc_DB7
.text:00000D6A                 mov     ecx, [ebp+var_F8]
.text:00000D70                 mov     [ebp+var_3C8], ecx
.text:00000D76                 mov     byte ptr [ebp+var_4], 3
.text:00000D7A                 lea     ecx, [ebp+var_C4] ; this
.text:00000D80                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D85                 mov     byte ptr [ebp+var_4], 2
.text:00000D89                 lea     ecx, [ebp+var_B0] ; this
.text:00000D8F                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:00000D94                 mov     byte ptr [ebp+var_4], 1
.text:00000D98                 lea     ecx, [ebp+var_3C] ; this
.text:00000D9B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000DA0                 mov     byte ptr [ebp+var_4], 0
.text:00000DA4                 lea     ecx, [ebp+var_24]
.text:00000DA7                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00000DAC                 mov     eax, [ebp+var_3C8]
.text:00000DB2                 jmp     loc_1BD3
.text:00000DB7 ; ---------------------------------------------------------------------------
.text:00000DB7
.text:00000DB7 loc_DB7:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+70Fj
.text:00000DB7                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+748j
.text:00000DB7                 lea     ecx, [ebp+var_10C] ; this
.text:00000DBD                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000DC2                 mov     [ebp+var_46C], eax
.text:00000DC8                 mov     byte ptr [ebp+var_4], 6
.text:00000DCC                 mov     esi, esp
.text:00000DCE                 lea     edx, [ebp+var_10C]
.text:00000DD4                 push    edx
.text:00000DD5                 push    3
.text:00000DD7                 mov     eax, [ebp+var_44]
.text:00000DDA                 push    eax
.text:00000DDB                 mov     ecx, [ebp+arg_C]
.text:00000DDE                 push    ecx
.text:00000DDF                 mov     edx, [ebp+arg_C]
.text:00000DE2                 mov     eax, [edx]
.text:00000DE4                 mov     ecx, [eax+18h]
.text:00000DE7                 call    ecx
.text:00000DE9                 cmp     esi, esp
.text:00000DEB                 call    __RTC_CheckEsp
.text:00000DF0                 mov     [ebp+var_470], eax
.text:00000DF6                 mov     edx, [ebp+var_470]
.text:00000DFC                 mov     [ebp+var_114], edx
.text:00000E02                 cmp     [ebp+var_114], 0
.text:00000E09                 jz      short loc_E67
.text:00000E0B                 mov     eax, [ebp+var_114]
.text:00000E11                 mov     [ebp+var_3CC], eax
.text:00000E17                 mov     byte ptr [ebp+var_4], 4
.text:00000E1B                 lea     ecx, [ebp+var_10C] ; this
.text:00000E21                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000E26                 mov     byte ptr [ebp+var_4], 3
.text:00000E2A                 lea     ecx, [ebp+var_C4] ; this
.text:00000E30                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000E35                 mov     byte ptr [ebp+var_4], 2
.text:00000E39                 lea     ecx, [ebp+var_B0] ; this
.text:00000E3F                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:00000E44                 mov     byte ptr [ebp+var_4], 1
.text:00000E48                 lea     ecx, [ebp+var_3C] ; this
.text:00000E4B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000E50                 mov     byte ptr [ebp+var_4], 0
.text:00000E54                 lea     ecx, [ebp+var_24]
.text:00000E57                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00000E5C                 mov     eax, [ebp+var_3CC]
.text:00000E62                 jmp     loc_1BD3
.text:00000E67 ; ---------------------------------------------------------------------------
.text:00000E67
.text:00000E67 loc_E67:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+7E9j
.text:00000E67                 movzx   ecx, [ebp+var_10C]
.text:00000E6E                 test    ecx, ecx
.text:00000E70                 jnz     short loc_E77
.text:00000E72                 jmp     loc_F54
.text:00000E77 ; ---------------------------------------------------------------------------
.text:00000E77
.text:00000E77 loc_E77:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+850j
.text:00000E77                 movzx   edx, [ebp+var_10C]
.text:00000E7E                 cmp     edx, 8
.text:00000E81                 jz      short loc_EDF
.text:00000E83                 mov     [ebp+var_3D0], 80070057h
.text:00000E8D                 mov     byte ptr [ebp+var_4], 4
.text:00000E91                 lea     ecx, [ebp+var_10C] ; this
.text:00000E97                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000E9C                 mov     byte ptr [ebp+var_4], 3
.text:00000EA0                 lea     ecx, [ebp+var_C4] ; this
.text:00000EA6                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000EAB                 mov     byte ptr [ebp+var_4], 2
.text:00000EAF                 lea     ecx, [ebp+var_B0] ; this
.text:00000EB5                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:00000EBA                 mov     byte ptr [ebp+var_4], 1
.text:00000EBE                 lea     ecx, [ebp+var_3C] ; this
.text:00000EC1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000EC6                 mov     byte ptr [ebp+var_4], 0
.text:00000ECA                 lea     ecx, [ebp+var_24]
.text:00000ECD                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00000ED2                 mov     eax, [ebp+var_3D0]
.text:00000ED8                 jmp     loc_1BD3
.text:00000EDD ; ---------------------------------------------------------------------------
.text:00000EDD                 jmp     short loc_F54
.text:00000EDF ; ---------------------------------------------------------------------------
.text:00000EDF
.text:00000EDF loc_EDF:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+861j
.text:00000EDF                 mov     eax, [ebp+var_104]
.text:00000EE5                 push    eax
.text:00000EE6                 lea     ecx, [ebp+var_3DC]
.text:00000EEC                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000EF1                 mov     [ebp+var_474], eax
.text:00000EF7                 mov     byte ptr [ebp+var_4], 7
.text:00000EFB                 lea     ecx, [ebp+var_3DC]
.text:00000F01                 push    ecx
.text:00000F02                 lea     edx, [ebp+var_3E8]
.text:00000F08                 push    edx
.text:00000F09                 call    ?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ; NArchive::NItemName::MakeLegalName(UString const &)
.text:00000F0E                 mov     [ebp+var_478], eax
.text:00000F14                 mov     eax, [ebp+var_478]
.text:00000F1A                 mov     [ebp+var_47C], eax
.text:00000F20                 mov     byte ptr [ebp+var_4], 8
.text:00000F24                 mov     ecx, [ebp+var_47C]
.text:00000F2A                 push    ecx
.text:00000F2B                 lea     ecx, [ebp+var_C4]
.text:00000F31                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000F36                 mov     byte ptr [ebp+var_4], 7
.text:00000F3A                 lea     ecx, [ebp+var_3E8] ; this
.text:00000F40                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000F45                 mov     byte ptr [ebp+var_4], 6
.text:00000F49                 lea     ecx, [ebp+var_3DC] ; this
.text:00000F4F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000F54
.text:00000F54 loc_F54:                                ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+852j
.text:00000F54                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+8BDj
.text:00000F54                 mov     byte ptr [ebp+var_4], 4
.text:00000F58                 lea     ecx, [ebp+var_10C] ; this
.text:00000F5E                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000F63                 lea     ecx, [ebp+var_128] ; this
.text:00000F69                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000F6E                 mov     [ebp+var_480], eax
.text:00000F74                 mov     byte ptr [ebp+var_4], 9
.text:00000F78                 mov     esi, esp
.text:00000F7A                 lea     edx, [ebp+var_128]
.text:00000F80                 push    edx
.text:00000F81                 push    6
.text:00000F83                 mov     eax, [ebp+var_44]
.text:00000F86                 push    eax
.text:00000F87                 mov     ecx, [ebp+arg_C]
.text:00000F8A                 push    ecx
.text:00000F8B                 mov     edx, [ebp+arg_C]
.text:00000F8E                 mov     eax, [edx]
.text:00000F90                 mov     ecx, [eax+18h]
.text:00000F93                 call    ecx
.text:00000F95                 cmp     esi, esp
.text:00000F97                 call    __RTC_CheckEsp
.text:00000F9C                 mov     [ebp+var_484], eax
.text:00000FA2                 mov     edx, [ebp+var_484]
.text:00000FA8                 mov     [ebp+var_130], edx
.text:00000FAE                 cmp     [ebp+var_130], 0
.text:00000FB5                 jz      short loc_1013
.text:00000FB7                 mov     eax, [ebp+var_130]
.text:00000FBD                 mov     [ebp+var_3EC], eax
.text:00000FC3                 mov     byte ptr [ebp+var_4], 4
.text:00000FC7                 lea     ecx, [ebp+var_128] ; this
.text:00000FCD                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000FD2                 mov     byte ptr [ebp+var_4], 3
.text:00000FD6                 lea     ecx, [ebp+var_C4] ; this
.text:00000FDC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000FE1                 mov     byte ptr [ebp+var_4], 2
.text:00000FE5                 lea     ecx, [ebp+var_B0] ; this
.text:00000FEB                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:00000FF0                 mov     byte ptr [ebp+var_4], 1
.text:00000FF4                 lea     ecx, [ebp+var_3C] ; this
.text:00000FF7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000FFC                 mov     byte ptr [ebp+var_4], 0
.text:00001000                 lea     ecx, [ebp+var_24]
.text:00001003                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00001008                 mov     eax, [ebp+var_3EC]
.text:0000100E                 jmp     loc_1BD3
.text:00001013 ; ---------------------------------------------------------------------------
.text:00001013
.text:00001013 loc_1013:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+995j
.text:00001013                 movzx   ecx, [ebp+var_128]
.text:0000101A                 test    ecx, ecx
.text:0000101C                 jnz     short loc_1027
.text:0000101E                 mov     [ebp+var_CD], 0
.text:00001025                 jmp     short loc_10A6
.text:00001027 ; ---------------------------------------------------------------------------
.text:00001027
.text:00001027 loc_1027:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+9FCj
.text:00001027                 movzx   edx, [ebp+var_128]
.text:0000102E                 cmp     edx, 0Bh
.text:00001031                 jz      short loc_108F
.text:00001033                 mov     [ebp+var_3F0], 80070057h
.text:0000103D                 mov     byte ptr [ebp+var_4], 4
.text:00001041                 lea     ecx, [ebp+var_128] ; this
.text:00001047                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000104C                 mov     byte ptr [ebp+var_4], 3
.text:00001050                 lea     ecx, [ebp+var_C4] ; this
.text:00001056                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000105B                 mov     byte ptr [ebp+var_4], 2
.text:0000105F                 lea     ecx, [ebp+var_B0] ; this
.text:00001065                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:0000106A                 mov     byte ptr [ebp+var_4], 1
.text:0000106E                 lea     ecx, [ebp+var_3C] ; this
.text:00001071                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001076                 mov     byte ptr [ebp+var_4], 0
.text:0000107A                 lea     ecx, [ebp+var_24]
.text:0000107D                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00001082                 mov     eax, [ebp+var_3F0]
.text:00001088                 jmp     loc_1BD3
.text:0000108D ; ---------------------------------------------------------------------------
.text:0000108D                 jmp     short loc_10A6
.text:0000108F ; ---------------------------------------------------------------------------
.text:0000108F
.text:0000108F loc_108F:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A11j
.text:0000108F                 movsx   eax, [ebp+var_120]
.text:00001096                 neg     eax
.text:00001098                 sbb     eax, eax
.text:0000109A                 neg     eax
.text:0000109C                 mov     [ebp+var_75], al
.text:0000109F                 mov     [ebp+var_CD], 1
.text:000010A6
.text:000010A6 loc_10A6:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A05j
.text:000010A6                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A6Dj
.text:000010A6                 mov     byte ptr [ebp+var_4], 4
.text:000010AA                 lea     ecx, [ebp+var_128] ; this
.text:000010B0                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000010B5                 lea     ecx, [ebp+var_144] ; this
.text:000010BB                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000010C0                 mov     [ebp+var_488], eax
.text:000010C6                 mov     byte ptr [ebp+var_4], 0Ah
.text:000010CA                 mov     esi, esp
.text:000010CC                 lea     ecx, [ebp+var_144]
.text:000010D2                 push    ecx
.text:000010D3                 push    15h
.text:000010D5                 mov     edx, [ebp+var_44]
.text:000010D8                 push    edx
.text:000010D9                 mov     eax, [ebp+arg_C]
.text:000010DC                 push    eax
.text:000010DD                 mov     ecx, [ebp+arg_C]
.text:000010E0                 mov     edx, [ecx]
.text:000010E2                 mov     eax, [edx+18h]
.text:000010E5                 call    eax
.text:000010E7                 cmp     esi, esp
.text:000010E9                 call    __RTC_CheckEsp
.text:000010EE                 mov     [ebp+var_48C], eax
.text:000010F4                 mov     ecx, [ebp+var_48C]
.text:000010FA                 mov     [ebp+var_14C], ecx
.text:00001100                 cmp     [ebp+var_14C], 0
.text:00001107                 jz      short loc_1165
.text:00001109                 mov     edx, [ebp+var_14C]
.text:0000110F                 mov     [ebp+var_3F4], edx
.text:00001115                 mov     byte ptr [ebp+var_4], 4
.text:00001119                 lea     ecx, [ebp+var_144] ; this
.text:0000111F                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001124                 mov     byte ptr [ebp+var_4], 3
.text:00001128                 lea     ecx, [ebp+var_C4] ; this
.text:0000112E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001133                 mov     byte ptr [ebp+var_4], 2
.text:00001137                 lea     ecx, [ebp+var_B0] ; this
.text:0000113D                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:00001142                 mov     byte ptr [ebp+var_4], 1
.text:00001146                 lea     ecx, [ebp+var_3C] ; this
.text:00001149                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000114E                 mov     byte ptr [ebp+var_4], 0
.text:00001152                 lea     ecx, [ebp+var_24]
.text:00001155                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:0000115A                 mov     eax, [ebp+var_3F4]
.text:00001160                 jmp     loc_1BD3
.text:00001165 ; ---------------------------------------------------------------------------
.text:00001165
.text:00001165 loc_1165:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+AE7j
.text:00001165                 movzx   eax, [ebp+var_144]
.text:0000116C                 test    eax, eax
.text:0000116E                 jnz     short loc_1176
.text:00001170                 mov     [ebp+var_76], 0
.text:00001174                 jmp     short loc_11EE
.text:00001176 ; ---------------------------------------------------------------------------
.text:00001176
.text:00001176 loc_1176:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B4Ej
.text:00001176                 movzx   ecx, [ebp+var_144]
.text:0000117D                 cmp     ecx, 0Bh
.text:00001180                 jz      short loc_11DE
.text:00001182                 mov     [ebp+var_3F8], 80070057h
.text:0000118C                 mov     byte ptr [ebp+var_4], 4
.text:00001190                 lea     ecx, [ebp+var_144] ; this
.text:00001196                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000119B                 mov     byte ptr [ebp+var_4], 3
.text:0000119F                 lea     ecx, [ebp+var_C4] ; this
.text:000011A5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000011AA                 mov     byte ptr [ebp+var_4], 2
.text:000011AE                 lea     ecx, [ebp+var_B0] ; this
.text:000011B4                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:000011B9                 mov     byte ptr [ebp+var_4], 1
.text:000011BD                 lea     ecx, [ebp+var_3C] ; this
.text:000011C0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000011C5                 mov     byte ptr [ebp+var_4], 0
.text:000011C9                 lea     ecx, [ebp+var_24]
.text:000011CC                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:000011D1                 mov     eax, [ebp+var_3F8]
.text:000011D7                 jmp     loc_1BD3
.text:000011DC ; ---------------------------------------------------------------------------
.text:000011DC                 jmp     short loc_11EE
.text:000011DE ; ---------------------------------------------------------------------------
.text:000011DE
.text:000011DE loc_11DE:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B60j
.text:000011DE                 movsx   edx, [ebp+var_13C]
.text:000011E5                 neg     edx
.text:000011E7                 sbb     edx, edx
.text:000011E9                 neg     edx
.text:000011EB                 mov     [ebp+var_76], dl
.text:000011EE
.text:000011EE loc_11EE:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B54j
.text:000011EE                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+BBCj
.text:000011EE                 mov     byte ptr [ebp+var_4], 4
.text:000011F2                 lea     ecx, [ebp+var_144] ; this
.text:000011F8                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000011FD                 movzx   eax, [ebp+var_76]
.text:00001201                 test    eax, eax
.text:00001203                 jz      short loc_1229
.text:00001205                 mov     [ebp+var_74], 0
.text:00001209                 mov     [ebp+var_73], 0
.text:0000120D                 mov     [ebp+var_72], 0
.text:00001211                 mov     [ebp+var_71], 0
.text:00001215                 mov     [ebp+var_90], 0
.text:0000121F                 mov     [ebp+var_8C], 0
.text:00001229
.text:00001229 loc_1229:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+BE3j
.text:00001229                 movzx   ecx, [ebp+var_CD]
.text:00001230                 test    ecx, ecx
.text:00001232                 jnz     short loc_1247
.text:00001234                 movzx   edx, [ebp+var_74]
.text:00001238                 test    edx, edx
.text:0000123A                 jz      short loc_1247
.text:0000123C                 lea     ecx, [ebp+var_B0] ; this
.text:00001242                 call    ?SetDirStatusFromAttrib@CUpdateItem@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUpdateItem::SetDirStatusFromAttrib(void)
.text:00001247
.text:00001247 loc_1247:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4A2j
.text:00001247                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C12j ...
.text:00001247                 lea     eax, [ebp+var_C4]
.text:0000124D                 push    eax
.text:0000124E                 lea     ecx, [ebp+var_88]
.text:00001254                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00001259                 movzx   ecx, [ebp+var_78]
.text:0000125D                 test    ecx, ecx
.text:0000125F                 jz      loc_1412
.text:00001265                 lea     ecx, [ebp+var_160] ; this
.text:0000126B                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00001270                 mov     [ebp+var_490], eax
.text:00001276                 mov     byte ptr [ebp+var_4], 0Bh
.text:0000127A                 mov     esi, esp
.text:0000127C                 lea     edx, [ebp+var_160]
.text:00001282                 push    edx
.text:00001283                 push    7
.text:00001285                 mov     eax, [ebp+var_44]
.text:00001288                 push    eax
.text:00001289                 mov     ecx, [ebp+arg_C]
.text:0000128C                 push    ecx
.text:0000128D                 mov     edx, [ebp+arg_C]
.text:00001290                 mov     eax, [edx]
.text:00001292                 mov     ecx, [eax+18h]
.text:00001295                 call    ecx
.text:00001297                 cmp     esi, esp
.text:00001299                 call    __RTC_CheckEsp
.text:0000129E                 mov     [ebp+var_494], eax
.text:000012A4                 mov     edx, [ebp+var_494]
.text:000012AA                 mov     [ebp+var_168], edx
.text:000012B0                 cmp     [ebp+var_168], 0
.text:000012B7                 jz      short loc_1315
.text:000012B9                 mov     eax, [ebp+var_168]
.text:000012BF                 mov     [ebp+var_3FC], eax
.text:000012C5                 mov     byte ptr [ebp+var_4], 4
.text:000012C9                 lea     ecx, [ebp+var_160] ; this
.text:000012CF                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000012D4                 mov     byte ptr [ebp+var_4], 3
.text:000012D8                 lea     ecx, [ebp+var_C4] ; this
.text:000012DE                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000012E3                 mov     byte ptr [ebp+var_4], 2
.text:000012E7                 lea     ecx, [ebp+var_B0] ; this
.text:000012ED                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:000012F2                 mov     byte ptr [ebp+var_4], 1
.text:000012F6                 lea     ecx, [ebp+var_3C] ; this
.text:000012F9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000012FE                 mov     byte ptr [ebp+var_4], 0
.text:00001302                 lea     ecx, [ebp+var_24]
.text:00001305                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:0000130A                 mov     eax, [ebp+var_3FC]
.text:00001310                 jmp     loc_1BD3
.text:00001315 ; ---------------------------------------------------------------------------
.text:00001315
.text:00001315 loc_1315:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C97j
.text:00001315                 movzx   ecx, [ebp+var_160]
.text:0000131C                 cmp     ecx, 15h
.text:0000131F                 jz      short loc_137B
.text:00001321                 mov     [ebp+var_400], 80070057h
.text:0000132B                 mov     byte ptr [ebp+var_4], 4
.text:0000132F                 lea     ecx, [ebp+var_160] ; this
.text:00001335                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000133A                 mov     byte ptr [ebp+var_4], 3
.text:0000133E                 lea     ecx, [ebp+var_C4] ; this
.text:00001344                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001349                 mov     byte ptr [ebp+var_4], 2
.text:0000134D                 lea     ecx, [ebp+var_B0] ; this
.text:00001353                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:00001358                 mov     byte ptr [ebp+var_4], 1
.text:0000135C                 lea     ecx, [ebp+var_3C] ; this
.text:0000135F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001364                 mov     byte ptr [ebp+var_4], 0
.text:00001368                 lea     ecx, [ebp+var_24]
.text:0000136B                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00001370                 mov     eax, [ebp+var_400]
.text:00001376                 jmp     loc_1BD3
.text:0000137B ; ---------------------------------------------------------------------------
.text:0000137B
.text:0000137B loc_137B:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+CFFj
.text:0000137B                 mov     edx, [ebp+var_158]
.text:00001381                 mov     [ebp+var_90], edx
.text:00001387                 mov     eax, [ebp+var_154]
.text:0000138D                 mov     [ebp+var_8C], eax
.text:00001393                 mov     ecx, [ebp+var_90]
.text:00001399                 or      ecx, [ebp+var_8C]
.text:0000139F                 jz      short loc_1403
.text:000013A1                 movzx   edx, [ebp+var_76]
.text:000013A5                 test    edx, edx
.text:000013A7                 jz      short loc_1403
.text:000013A9                 mov     [ebp+var_404], 80070057h
.text:000013B3                 mov     byte ptr [ebp+var_4], 4
.text:000013B7                 lea     ecx, [ebp+var_160] ; this
.text:000013BD                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000013C2                 mov     byte ptr [ebp+var_4], 3
.text:000013C6                 lea     ecx, [ebp+var_C4] ; this
.text:000013CC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000013D1                 mov     byte ptr [ebp+var_4], 2
.text:000013D5                 lea     ecx, [ebp+var_B0] ; this
.text:000013DB                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:000013E0                 mov     byte ptr [ebp+var_4], 1
.text:000013E4                 lea     ecx, [ebp+var_3C] ; this
.text:000013E7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000013EC                 mov     byte ptr [ebp+var_4], 0
.text:000013F0                 lea     ecx, [ebp+var_24]
.text:000013F3                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:000013F8                 mov     eax, [ebp+var_404]
.text:000013FE                 jmp     loc_1BD3
.text:00001403 ; ---------------------------------------------------------------------------
.text:00001403
.text:00001403 loc_1403:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+D7Fj
.text:00001403                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+D87j
.text:00001403                 mov     byte ptr [ebp+var_4], 4
.text:00001407                 lea     ecx, [ebp+var_160] ; this
.text:0000140D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001412
.text:00001412 loc_1412:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C3Fj
.text:00001412                 lea     eax, [ebp+var_B0]
.text:00001418                 push    eax             ; struct NArchive::N7z::CUpdateItem *
.text:00001419                 lea     ecx, [ebp+var_24]
.text:0000141C                 call    ?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::Add(NArchive::N7z::CUpdateItem const &)
.text:00001421                 mov     byte ptr [ebp+var_4], 3
.text:00001425                 lea     ecx, [ebp+var_C4] ; this
.text:0000142B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001430                 mov     byte ptr [ebp+var_4], 2
.text:00001434                 lea     ecx, [ebp+var_B0] ; this
.text:0000143A                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:0000143F                 jmp     loc_7FF
.text:00001444 ; ---------------------------------------------------------------------------
.text:00001444
.text:00001444 loc_1444:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1EEj
.text:00001444                 lea     ecx, [ebp+var_19C] ; this
.text:0000144A                 call    ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)
.text:0000144F                 mov     [ebp+var_498], eax
.text:00001455                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001459                 lea     ecx, [ebp+var_1D4] ; this
.text:0000145F                 call    ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)
.text:00001464                 mov     [ebp+var_49C], eax
.text:0000146A                 mov     byte ptr [ebp+var_4], 0Dh
.text:0000146E                 mov     ecx, [ebp+this]
.text:00001471                 mov     edx, [ecx+14h]
.text:00001474                 push    edx             ; unsigned int
.text:00001475                 lea     eax, [ebp+var_19C]
.text:0000147B                 push    eax             ; struct NArchive::N7z::CCompressionMethodMode *
.text:0000147C                 mov     ecx, [ebp+this]
.text:0000147F                 sub     ecx, 0Ch        ; this
.text:00001482                 call    ?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)
.text:00001487                 mov     [ebp+var_4A0], eax
.text:0000148D                 mov     ecx, [ebp+var_4A0]
.text:00001493                 mov     [ebp+var_1DC], ecx
.text:00001499                 mov     edx, [ebp+var_1DC]
.text:0000149F                 mov     [ebp+var_1E0], edx
.text:000014A5                 cmp     [ebp+var_1E0], 0
.text:000014AC                 jz      short loc_14FB
.text:000014AE                 mov     eax, [ebp+var_1E0]
.text:000014B4                 mov     [ebp+var_408], eax
.text:000014BA                 mov     byte ptr [ebp+var_4], 0Ch
.text:000014BE                 lea     ecx, [ebp+var_1D4] ; this
.text:000014C4                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000014C9                 mov     byte ptr [ebp+var_4], 2
.text:000014CD                 lea     ecx, [ebp+var_19C] ; this
.text:000014D3                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000014D8                 mov     byte ptr [ebp+var_4], 1
.text:000014DC                 lea     ecx, [ebp+var_3C] ; this
.text:000014DF                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000014E4                 mov     byte ptr [ebp+var_4], 0
.text:000014E8                 lea     ecx, [ebp+var_24]
.text:000014EB                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:000014F0                 mov     eax, [ebp+var_408]
.text:000014F6                 jmp     loc_1BD3
.text:000014FB ; ---------------------------------------------------------------------------
.text:000014FB
.text:000014FB loc_14FB:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E8Cj
.text:000014FB                 lea     ecx, [ebp+var_1D4]
.text:00001501                 push    ecx             ; struct NArchive::N7z::CCompressionMethodMode *
.text:00001502                 mov     ecx, [ebp+this]
.text:00001505                 sub     ecx, 0Ch        ; this
.text:00001508                 call    ?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z ; NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)
.text:0000150D                 mov     [ebp+var_4A4], eax
.text:00001513                 mov     edx, [ebp+var_4A4]
.text:00001519                 mov     [ebp+var_1E4], edx
.text:0000151F                 cmp     [ebp+var_1E4], 0
.text:00001526                 jz      short loc_1575
.text:00001528                 mov     eax, [ebp+var_1E4]
.text:0000152E                 mov     [ebp+var_40C], eax
.text:00001534                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001538                 lea     ecx, [ebp+var_1D4] ; this
.text:0000153E                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00001543                 mov     byte ptr [ebp+var_4], 2
.text:00001547                 lea     ecx, [ebp+var_19C] ; this
.text:0000154D                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00001552                 mov     byte ptr [ebp+var_4], 1
.text:00001556                 lea     ecx, [ebp+var_3C] ; this
.text:00001559                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000155E                 mov     byte ptr [ebp+var_4], 0
.text:00001562                 lea     ecx, [ebp+var_24]
.text:00001565                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:0000156A                 mov     eax, [ebp+var_40C]
.text:00001570                 jmp     loc_1BD3
.text:00001575 ; ---------------------------------------------------------------------------
.text:00001575
.text:00001575 loc_1575:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F06j
.text:00001575                 mov     ecx, [ebp+this]
.text:00001578                 mov     edx, [ecx+14h]
.text:0000157B                 mov     [ebp+var_180], edx
.text:00001581                 mov     eax, [ebp+this]
.text:00001584                 mov     cl, [eax+77h]
.text:00001587                 mov     [ebp+var_17C], cl
.text:0000158D                 mov     [ebp+var_1B8], 1
.text:00001597                 mov     edx, [ebp+this]
.text:0000159A                 mov     al, [edx+77h]
.text:0000159D                 mov     [ebp+var_1B4], al
.text:000015A3                 lea     ecx, [ebp+var_1EC]
.text:000015A9                 call    ??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::CMyComPtr<ICryptoGetTextPassword2>(void)
.text:000015AE                 mov     [ebp+var_4A8], eax
.text:000015B4                 mov     byte ptr [ebp+var_4], 0Eh
.text:000015B8                 lea     ecx, [ebp+var_1EC]
.text:000015BE                 call    ??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator&(void)
.text:000015C3                 mov     [ebp+var_4AC], eax
.text:000015C9                 mov     esi, esp
.text:000015CB                 mov     ecx, [ebp+var_4AC]
.text:000015D1                 push    ecx
.text:000015D2                 push    offset _IID_ICryptoGetTextPassword2
.text:000015D7                 mov     edx, [ebp+arg_C]
.text:000015DA                 push    edx
.text:000015DB                 mov     eax, [ebp+arg_C]
.text:000015DE                 mov     ecx, [eax]
.text:000015E0                 mov     edx, [ecx]
.text:000015E2                 call    edx
.text:000015E4                 cmp     esi, esp
.text:000015E6                 call    __RTC_CheckEsp
.text:000015EB                 mov     [ebp+var_17B], 0
.text:000015F2                 lea     ecx, [ebp+var_178] ; this
.text:000015F8                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:000015FD                 lea     ecx, [ebp+var_1EC]
.text:00001603                 call    ??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator ICryptoGetTextPassword2 *(void)
.text:00001608                 mov     [ebp+var_4B0], eax
.text:0000160E                 cmp     [ebp+var_4B0], 0
.text:00001615                 jz      loc_1784
.text:0000161B                 lea     ecx, [ebp+var_1F8] ; this
.text:00001621                 call    ??0CMyComBSTR@@QAE@XZ ; CMyComBSTR::CMyComBSTR(void)
.text:00001626                 mov     [ebp+var_4B4], eax
.text:0000162C                 mov     byte ptr [ebp+var_4], 0Fh
.text:00001630                 lea     ecx, [ebp+var_1EC]
.text:00001636                 call    ??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator->(void)
.text:0000163B                 mov     [ebp+var_4B8], eax
.text:00001641                 mov     eax, [ebp+var_4B8]
.text:00001647                 mov     [ebp+var_4BC], eax
.text:0000164D                 lea     ecx, [ebp+var_1F8]
.text:00001653                 call    ??ICMyComBSTR@@QAEPAPA_WXZ ; CMyComBSTR::operator&(void)
.text:00001658                 mov     [ebp+var_4C0], eax
.text:0000165E                 mov     esi, esp
.text:00001660                 mov     ecx, [ebp+var_4C0]
.text:00001666                 push    ecx
.text:00001667                 lea     edx, [ebp+var_204]
.text:0000166D                 push    edx
.text:0000166E                 mov     eax, [ebp+var_4BC]
.text:00001674                 push    eax
.text:00001675                 mov     ecx, [ebp+var_4BC]
.text:0000167B                 mov     edx, [ecx]
.text:0000167D                 mov     eax, [edx+0Ch]
.text:00001680                 call    eax
.text:00001682                 cmp     esi, esp
.text:00001684                 call    __RTC_CheckEsp
.text:00001689                 mov     [ebp+var_4C4], eax
.text:0000168F                 mov     ecx, [ebp+var_4C4]
.text:00001695                 mov     [ebp+var_20C], ecx
.text:0000169B                 cmp     [ebp+var_20C], 0
.text:000016A2                 jz      short loc_170F
.text:000016A4                 mov     edx, [ebp+var_20C]
.text:000016AA                 mov     [ebp+var_410], edx
.text:000016B0                 mov     byte ptr [ebp+var_4], 0Eh
.text:000016B4                 lea     ecx, [ebp+var_1F8] ; this
.text:000016BA                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:000016BF                 mov     byte ptr [ebp+var_4], 0Dh
.text:000016C3                 lea     ecx, [ebp+var_1EC]
.text:000016C9                 call    ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>(void)
.text:000016CE                 mov     byte ptr [ebp+var_4], 0Ch
.text:000016D2                 lea     ecx, [ebp+var_1D4] ; this
.text:000016D8                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000016DD                 mov     byte ptr [ebp+var_4], 2
.text:000016E1                 lea     ecx, [ebp+var_19C] ; this
.text:000016E7                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000016EC                 mov     byte ptr [ebp+var_4], 1
.text:000016F0                 lea     ecx, [ebp+var_3C] ; this
.text:000016F3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000016F8                 mov     byte ptr [ebp+var_4], 0
.text:000016FC                 lea     ecx, [ebp+var_24]
.text:000016FF                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00001704                 mov     eax, [ebp+var_410]
.text:0000170A                 jmp     loc_1BD3
.text:0000170F ; ---------------------------------------------------------------------------
.text:0000170F
.text:0000170F loc_170F:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1082j
.text:0000170F                 mov     eax, [ebp+var_204]
.text:00001715                 push    eax             ; int
.text:00001716                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:0000171B                 mov     [ebp+var_4C5], al
.text:00001721                 mov     cl, [ebp+var_4C5]
.text:00001727                 mov     [ebp+var_17B], cl
.text:0000172D                 movzx   edx, [ebp+var_17B]
.text:00001734                 test    edx, edx
.text:00001736                 jz      short loc_1775
.text:00001738                 lea     ecx, [ebp+var_1F8]
.text:0000173E                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:00001743                 mov     [ebp+var_4CC], eax
.text:00001749                 cmp     [ebp+var_4CC], 0
.text:00001750                 jz      short loc_1775
.text:00001752                 lea     ecx, [ebp+var_1F8]
.text:00001758                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:0000175D                 mov     [ebp+var_4D0], eax
.text:00001763                 mov     eax, [ebp+var_4D0]
.text:00001769                 push    eax
.text:0000176A                 lea     ecx, [ebp+var_178]
.text:00001770                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001775
.text:00001775 loc_1775:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1116j
.text:00001775                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1130j
.text:00001775                 mov     byte ptr [ebp+var_4], 0Eh
.text:00001779                 lea     ecx, [ebp+var_1F8] ; this
.text:0000177F                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00001784
.text:00001784 loc_1784:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+FF5j
.text:00001784                 mov     ecx, [ebp+this]
.text:00001787                 mov     dl, [ecx+6Eh]
.text:0000178A                 mov     [ebp+var_20D], dl
.text:00001790                 mov     [ebp+var_20E], 0
.text:00001797                 movzx   eax, [ebp+var_17B]
.text:0000179E                 test    eax, eax
.text:000017A0                 jnz     short loc_17CB
.text:000017A2                 mov     ecx, [ebp+this]
.text:000017A5                 movzx   edx, byte ptr [ecx+1BDh]
.text:000017AC                 test    edx, edx
.text:000017AE                 jz      short loc_17CB
.text:000017B0                 mov     [ebp+var_17B], 1
.text:000017B7                 mov     eax, [ebp+this]
.text:000017BA                 add     eax, 1C0h
.text:000017BF                 push    eax
.text:000017C0                 lea     ecx, [ebp+var_178]
.text:000017C6                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000017CB
.text:000017CB loc_17CB:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1180j
.text:000017CB                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+118Ej
.text:000017CB                 movzx   ecx, [ebp+var_17B]
.text:000017D2                 test    ecx, ecx
.text:000017D4                 jz      short loc_182E
.text:000017D6                 mov     edx, [ebp+this]
.text:000017D9                 movzx   eax, byte ptr [edx+6Fh]
.text:000017DD                 test    eax, eax
.text:000017DF                 jz      short loc_17EF
.text:000017E1                 mov     ecx, [ebp+this]
.text:000017E4                 mov     dl, [ecx+70h]
.text:000017E7                 mov     [ebp+var_20E], dl
.text:000017ED                 jmp     short loc_17FE
.text:000017EF ; ---------------------------------------------------------------------------
.text:000017EF
.text:000017EF loc_17EF:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+11BFj
.text:000017EF                 mov     eax, [ebp+this]
.text:000017F2                 mov     cl, [eax+1BDh]
.text:000017F8                 mov     [ebp+var_20E], cl
.text:000017FE
.text:000017FE loc_17FE:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+11CDj
.text:000017FE                 mov     [ebp+var_20D], 1
.text:00001805                 movzx   edx, [ebp+var_20E]
.text:0000180C                 test    edx, edx
.text:0000180E                 jz      short loc_182E
.text:00001810                 mov     al, [ebp+var_17B]
.text:00001816                 mov     [ebp+var_1B3], al
.text:0000181C                 lea     ecx, [ebp+var_178]
.text:00001822                 push    ecx
.text:00001823                 lea     ecx, [ebp+var_1B0]
.text:00001829                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000182E
.text:0000182E loc_182E:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+11B4j
.text:0000182E                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+11EEj
.text:0000182E                 cmp     [ebp+arg_8], 2
.text:00001832                 jnb     short loc_183B
.text:00001834                 mov     [ebp+var_20D], 0
.text:0000183B
.text:0000183B loc_183B:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1212j
.text:0000183B                 mov     ecx, [ebp+this]
.text:0000183E                 add     ecx, 0Ch        ; this
.text:00001841                 call    ?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ ; NArchive::CMultiMethodProps::GetLevel(void)
.text:00001846                 mov     [ebp+var_4D4], eax
.text:0000184C                 mov     edx, [ebp+var_4D4]
.text:00001852                 mov     [ebp+var_214], edx
.text:00001858                 lea     ecx, [ebp+var_248] ; this
.text:0000185E                 call    ??0CUpdateOptions@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateOptions::CUpdateOptions(void)
.text:00001863                 lea     eax, [ebp+var_19C]
.text:00001869                 mov     [ebp+var_248], eax
.text:0000186F                 mov     ecx, [ebp+this]
.text:00001872                 movzx   edx, byte ptr [ecx+6Eh]
.text:00001876                 test    edx, edx
.text:00001878                 jnz     short loc_1891
.text:0000187A                 movzx   eax, [ebp+var_20E]
.text:00001881                 test    eax, eax
.text:00001883                 jnz     short loc_1891
.text:00001885                 mov     [ebp+var_4D8], 0
.text:0000188F                 jmp     short loc_189D
.text:00001891 ; ---------------------------------------------------------------------------
.text:00001891
.text:00001891 loc_1891:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1258j
.text:00001891                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1263j
.text:00001891                 lea     ecx, [ebp+var_1D4]
.text:00001897                 mov     [ebp+var_4D8], ecx
.text:0000189D
.text:0000189D loc_189D:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+126Fj
.text:0000189D                 mov     edx, [ebp+var_4D8]
.text:000018A3                 mov     [ebp+var_244], edx
.text:000018A9                 cmp     [ebp+var_214], 0
.text:000018B0                 jz      short loc_18D4
.text:000018B2                 mov     eax, [ebp+this]
.text:000018B5                 movzx   ecx, byte ptr [eax+50h]
.text:000018B9                 test    ecx, ecx
.text:000018BB                 jz      short loc_18D4
.text:000018BD                 movzx   edx, [ebp+var_183]
.text:000018C4                 test    edx, edx
.text:000018C6                 jnz     short loc_18D4
.text:000018C8                 mov     [ebp+var_4DC], 1
.text:000018D2                 jmp     short loc_18DE
.text:000018D4 ; ---------------------------------------------------------------------------
.text:000018D4
.text:000018D4 loc_18D4:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1290j
.text:000018D4                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+129Bj ...
.text:000018D4                 mov     [ebp+var_4DC], 0
.text:000018DE
.text:000018DE loc_18DE:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+12B2j
.text:000018DE                 mov     al, byte ptr [ebp+var_4DC]
.text:000018E4                 mov     [ebp+var_240], al
.text:000018EA                 xor     ecx, ecx
.text:000018EC                 cmp     [ebp+var_214], 8
.text:000018F3                 setnl   cl
.text:000018F6                 mov     [ebp+var_23F], cl
.text:000018FC                 mov     ecx, [ebp+this]
.text:000018FF                 add     ecx, 0Ch        ; this
.text:00001902                 call    ?GetAnalysisLevel@CMultiMethodProps@NArchive@@QBEHXZ ; NArchive::CMultiMethodProps::GetAnalysisLevel(void)
.text:00001907                 mov     [ebp+var_4E0], eax
.text:0000190D                 mov     edx, [ebp+var_4E0]
.text:00001913                 mov     [ebp+var_23C], edx
.text:00001919                 mov     al, [ebp+var_20D]
.text:0000191F                 mov     [ebp+var_238], al
.text:00001925                 mov     ecx, [ebp+this]
.text:00001928                 mov     edx, [ecx+5Ch]
.text:0000192B                 mov     [ebp+var_230], edx
.text:00001931                 mov     eax, [ecx+60h]
.text:00001934                 mov     [ebp+var_22C], eax
.text:0000193A                 mov     ecx, [ebp+this]
.text:0000193D                 mov     edx, [ecx+64h]
.text:00001940                 mov     [ebp+var_228], edx
.text:00001946                 mov     eax, [ecx+68h]
.text:00001949                 mov     [ebp+var_224], eax
.text:0000194F                 mov     ecx, [ebp+this]
.text:00001952                 mov     dl, [ecx+6Dh]
.text:00001955                 mov     [ebp+var_220], dl
.text:0000195B                 mov     eax, [ebp+this]
.text:0000195E                 mov     cl, [eax+54h]
.text:00001961                 mov     [ebp+var_21F], cl
.text:00001967                 mov     edx, [ebp+this]
.text:0000196A                 mov     al, [edx+77h]
.text:0000196D                 mov     [ebp+var_21E], al
.text:00001973                 lea     ecx, [ebp+var_2A8] ; this
.text:00001979                 call    ??0COutArchive@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutArchive::COutArchive(void)
.text:0000197E                 mov     [ebp+var_4E4], eax
.text:00001984                 mov     byte ptr [ebp+var_4], 10h
.text:00001988                 lea     ecx, [ebp+var_394] ; this
.text:0000198E                 call    ??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(void)
.text:00001993                 mov     [ebp+var_4E8], eax
.text:00001999                 mov     byte ptr [ebp+var_4], 11h
.text:0000199D                 lea     ecx, [ebp+var_3A0]
.text:000019A3                 call    ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>(void)
.text:000019A8                 mov     [ebp+var_4EC], eax
.text:000019AE                 mov     byte ptr [ebp+var_4], 12h
.text:000019B2                 lea     ecx, [ebp+var_3A0]
.text:000019B8                 call    ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&(void)
.text:000019BD                 mov     [ebp+var_4F0], eax
.text:000019C3                 mov     esi, esp
.text:000019C5                 mov     ecx, [ebp+var_4F0]
.text:000019CB                 push    ecx
.text:000019CC                 push    offset _IID_ICryptoGetTextPassword
.text:000019D1                 mov     edx, [ebp+arg_C]
.text:000019D4                 push    edx
.text:000019D5                 mov     eax, [ebp+arg_C]
.text:000019D8                 mov     ecx, [eax]
.text:000019DA                 mov     edx, [ecx]
.text:000019DC                 call    edx
.text:000019DE                 cmp     esi, esp
.text:000019E0                 call    __RTC_CheckEsp
.text:000019E5                 lea     ecx, [ebp+var_3A0]
.text:000019EB                 call    ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *(void)
.text:000019F0                 mov     [ebp+var_4F4], eax
.text:000019F6                 mov     ecx, [ebp+this]
.text:000019F9                 add     ecx, 7Ch ; '|'
.text:000019FC                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00001A01                 mov     [ebp+var_4F8], eax
.text:00001A07                 mov     eax, [ebp+var_4F4]
.text:00001A0D                 push    eax
.text:00001A0E                 lea     ecx, [ebp+var_248]
.text:00001A14                 push    ecx
.text:00001A15                 mov     edx, [ebp+arg_C]
.text:00001A18                 push    edx
.text:00001A19                 mov     eax, [ebp+arg_4]
.text:00001A1C                 push    eax
.text:00001A1D                 lea     ecx, [ebp+var_394]
.text:00001A23                 push    ecx
.text:00001A24                 lea     edx, [ebp+var_2A8]
.text:00001A2A                 push    edx
.text:00001A2B                 lea     eax, [ebp+var_24]
.text:00001A2E                 push    eax
.text:00001A2F                 mov     ecx, [ebp+var_14]
.text:00001A32                 push    ecx
.text:00001A33                 mov     edx, [ebp+var_4F8]
.text:00001A39                 push    edx
.text:00001A3A                 call    ?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)
.text:00001A3F                 mov     [ebp+var_4FC], eax
.text:00001A45                 mov     eax, [ebp+var_4FC]
.text:00001A4B                 mov     [ebp+var_1DC], eax
.text:00001A51                 mov     ecx, [ebp+var_1DC]
.text:00001A57                 mov     [ebp+var_3A8], ecx
.text:00001A5D                 cmp     [ebp+var_3A8], 0
.text:00001A64                 jz      loc_1AF3
.text:00001A6A                 mov     edx, [ebp+var_3A8]
.text:00001A70                 mov     [ebp+var_414], edx
.text:00001A76                 mov     byte ptr [ebp+var_4], 11h
.text:00001A7A                 lea     ecx, [ebp+var_3A0]
.text:00001A80                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00001A85                 mov     byte ptr [ebp+var_4], 10h
.text:00001A89                 lea     ecx, [ebp+var_394] ; this
.text:00001A8F                 call    ??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut(void)
.text:00001A94                 mov     byte ptr [ebp+var_4], 0Eh
.text:00001A98                 lea     ecx, [ebp+var_2A8] ; this
.text:00001A9E                 call    ??1COutArchive@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutArchive::~COutArchive(void)
.text:00001AA3                 mov     byte ptr [ebp+var_4], 0Dh
.text:00001AA7                 lea     ecx, [ebp+var_1EC]
.text:00001AAD                 call    ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>(void)
.text:00001AB2                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001AB6                 lea     ecx, [ebp+var_1D4] ; this
.text:00001ABC                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00001AC1                 mov     byte ptr [ebp+var_4], 2
.text:00001AC5                 lea     ecx, [ebp+var_19C] ; this
.text:00001ACB                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00001AD0                 mov     byte ptr [ebp+var_4], 1
.text:00001AD4                 lea     ecx, [ebp+var_3C] ; this
.text:00001AD7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001ADC                 mov     byte ptr [ebp+var_4], 0
.text:00001AE0                 lea     ecx, [ebp+var_24]
.text:00001AE3                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00001AE8                 mov     eax, [ebp+var_414]
.text:00001AEE                 jmp     loc_1BD3
.text:00001AF3 ; ---------------------------------------------------------------------------
.text:00001AF3
.text:00001AF3 loc_1AF3:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1444j
.text:00001AF3                 lea     ecx, [ebp+var_24]
.text:00001AF6                 call    ?ClearAndFree@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::ClearAndFree(void)
.text:00001AFB                 lea     eax, [ebp+var_238]
.text:00001B01                 push    eax             ; struct NArchive::N7z::CHeaderOptions *
.text:00001B02                 mov     ecx, [ebp+var_244]
.text:00001B08                 push    ecx             ; struct NArchive::N7z::CCompressionMethodMode *
.text:00001B09                 lea     edx, [ebp+var_394]
.text:00001B0F                 push    edx             ; struct NArchive::N7z::CArchiveDatabaseOut *
.text:00001B10                 lea     ecx, [ebp+var_2A8] ; this
.text:00001B16                 call    ?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)
.text:00001B1B                 mov     [ebp+var_500], eax
.text:00001B21                 mov     eax, [ebp+var_500]
.text:00001B27                 mov     [ebp+var_418], eax
.text:00001B2D                 mov     byte ptr [ebp+var_4], 11h
.text:00001B31                 lea     ecx, [ebp+var_3A0]
.text:00001B37                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00001B3C                 mov     byte ptr [ebp+var_4], 10h
.text:00001B40                 lea     ecx, [ebp+var_394] ; this
.text:00001B46                 call    ??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut(void)
.text:00001B4B                 mov     byte ptr [ebp+var_4], 0Eh
.text:00001B4F                 lea     ecx, [ebp+var_2A8] ; this
.text:00001B55                 call    ??1COutArchive@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutArchive::~COutArchive(void)
.text:00001B5A                 mov     byte ptr [ebp+var_4], 0Dh
.text:00001B5E                 lea     ecx, [ebp+var_1EC]
.text:00001B64                 call    ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>(void)
.text:00001B69                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001B6D                 lea     ecx, [ebp+var_1D4] ; this
.text:00001B73                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00001B78                 mov     byte ptr [ebp+var_4], 2
.text:00001B7C                 lea     ecx, [ebp+var_19C] ; this
.text:00001B82                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00001B87                 mov     byte ptr [ebp+var_4], 1
.text:00001B8B                 lea     ecx, [ebp+var_3C] ; this
.text:00001B8E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001B93                 mov     byte ptr [ebp+var_4], 0
.text:00001B97                 lea     ecx, [ebp+var_24]
.text:00001B9A                 call    ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text:00001B9F                 mov     eax, [ebp+var_418]
.text:00001BA5                 jmp     short loc_1BD3
.text:00001BA5 ?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z endp
.text:00001BA5
.text:00001BA7
.text:00001BA7 ; =============== S U B R O U T I N E =======================================
.text:00001BA7
.text:00001BA7
.text:00001BA7 __catch$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0 proc near
.text:00001BA7                                         ; DATA XREF: .xdata$x:000030E4o
.text:00001BA7                 mov     dword ptr [ebp-41Ch], 8007000Eh
.text:00001BB1                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001BB8                 mov     eax, offset $LN97
.text:00001BBD                 retn
.text:00001BBD __catch$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0 endp
.text:00001BBD
.text:00001BBE ; ---------------------------------------------------------------------------
.text:00001BBE                 mov     eax, offset __tryend$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1
.text:00001BC3                 retn
.text:00001BC4 ; ---------------------------------------------------------------------------
.text:00001BC4
.text:00001BC4 __tryend$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1:
.text:00001BC4                                         ; DATA XREF: .text:00001BBEo
.text:00001BC4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001BCB                 jmp     short loc_1BD3
.text:00001BCD ; ---------------------------------------------------------------------------
.text:00001BCD
.text:00001BCD $LN97:                                  ; DATA XREF: __catch$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0+11o
.text:00001BCD                 mov     eax, [ebp-41Ch]
.text:00001BD3 ; START OF FUNCTION CHUNK FOR ?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00001BD3
.text:00001BD3 loc_1BD3:                               ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+222j
.text:00001BD3                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+28Aj ...
.text:00001BD3                 push    edx
.text:00001BD4                 mov     ecx, ebp
.text:00001BD6                 push    eax
.text:00001BD7                 lea     edx, $LN122
.text:00001BDD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001BE2                 pop     eax
.text:00001BE3                 pop     edx
.text:00001BE4                 mov     ecx, [ebp+var_C]
.text:00001BE7                 mov     large fs:0, ecx
.text:00001BEE                 pop     ecx
.text:00001BEF                 pop     edi
.text:00001BF0                 pop     esi
.text:00001BF1                 pop     ebx
.text:00001BF2                 add     esp, 500h
.text:00001BF8                 cmp     ebp, esp
.text:00001BFA                 call    __RTC_CheckEsp
.text:00001BFF                 mov     esp, ebp
.text:00001C01                 pop     ebp
.text:00001C02                 retn    10h
.text:00001C02 ; END OF FUNCTION CHUNK FOR ?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00001C02 ; ---------------------------------------------------------------------------
.text:00001C05                 align 4
.text:00001C08 $LN122          dd 15h                  ; DATA XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+15B7o
.text:00001C0C                 dd offset $LN121
.text:00001C10 $LN121          dd 0FFFFFFDCh, 0Ch      ; DATA XREF: .text:00001C0Co
.text:00001C18                 dd offset $LN99         ; "updateItems"
.text:00001C1C                 dd 0FFFFFFC4h, 0Ch
.text:00001C24                 dd offset $LN100        ; "s"
.text:00001C28                 dd 0FFFFFFB4h, 4
.text:00001C30                 dd offset $LN101        ; "newData"
.text:00001C34                 dd 0FFFFFFA8h, 4
.text:00001C3C                 dd offset $LN102        ; "newProps"
.text:00001C40                 dd 0FFFFFF9Ch, 4
.text:00001C48                 dd offset $LN103        ; "indexInArchive"
.text:00001C4C                 dd 0FFFFFF50h, 40h
.text:00001C54                 dd offset $LN104        ; "ui"
.text:00001C58                 dd 0FFFFFF3Ch, 0Ch
.text:00001C60                 dd offset $LN105        ; "name"
.text:00001C64                 dd 0FFFFFF1Ch, 10h
.text:00001C6C                 dd offset $LN106        ; "prop"
.text:00001C70                 dd 0FFFFFEF4h, 10h
.text:00001C78                 dd offset $LN107        ; "prop"
.text:00001C7C                 dd 0FFFFFED8h, 10h
.text:00001C84                 dd offset $LN108        ; "prop"
.text:00001C88                 dd 0FFFFFEBCh, 10h
.text:00001C90                 dd offset $LN109        ; "prop"
.text:00001C94                 dd 0FFFFFEA0h, 10h
.text:00001C9C                 dd offset $LN110        ; "prop"
.text:00001CA0                 dd 0FFFFFE64h, 30h
.text:00001CA8                 dd offset $LN111        ; "methodMode"
.text:00001CAC                 dd 0FFFFFE2Ch, 30h
.text:00001CB4                 dd offset $LN112        ; "headerMethod"
.text:00001CB8                 dd 0FFFFFE14h, 4
.text:00001CC0                 dd offset $LN113        ; "getPassword2"
.text:00001CC4                 dd 0FFFFFE08h, 4
.text:00001CCC                 dd offset $LN114        ; "password"
.text:00001CD0                 dd 0FFFFFDFCh, 4
.text:00001CD8                 dd offset $LN115        ; "passwordIsDefined"
.text:00001CDC                 dd 0FFFFFDB8h, 30h
.text:00001CE4                 dd offset $LN116        ; "options"
.text:00001CE8                 dd 0FFFFFD58h, 58h
.text:00001CF0                 dd offset $LN117        ; "archive"
.text:00001CF4                 dd 0FFFFFC6Ch, 0E4h
.text:00001CFC                 dd offset $LN118        ; "newDatabase"
.text:00001D00                 dd 0FFFFFC60h, 4
.text:00001D08                 dd offset $LN119        ; "getPassword"
.text:00001D0C $LN119          db 'getPassword',0      ; DATA XREF: .text:00001D08o
.text:00001D18 $LN118          db 'newDatabase',0      ; DATA XREF: .text:00001CFCo
.text:00001D24 $LN117          db 'archive',0          ; DATA XREF: .text:00001CF0o
.text:00001D2C $LN116          db 'options',0          ; DATA XREF: .text:00001CE4o
.text:00001D34 $LN115          db 'passwordIsDefined',0 ; DATA XREF: .text:00001CD8o
.text:00001D46 $LN114          db 'password',0         ; DATA XREF: .text:00001CCCo
.text:00001D4F $LN113          db 'getPassword2',0     ; DATA XREF: .text:00001CC0o
.text:00001D5C $LN112          db 'headerMethod',0     ; DATA XREF: .text:00001CB4o
.text:00001D69 $LN111          db 'methodMode',0       ; DATA XREF: .text:00001CA8o
.text:00001D74 $LN110          db 'prop',0             ; DATA XREF: .text:00001C9Co
.text:00001D79 $LN109          db 'prop',0             ; DATA XREF: .text:00001C90o
.text:00001D7E $LN108          db 'prop',0             ; DATA XREF: .text:00001C84o
.text:00001D83 $LN107          db 'prop',0             ; DATA XREF: .text:00001C78o
.text:00001D88 $LN106          db 'prop',0             ; DATA XREF: .text:00001C6Co
.text:00001D8D $LN105          db 'name',0             ; DATA XREF: .text:00001C60o
.text:00001D92 $LN104          db 'ui',0               ; DATA XREF: .text:00001C54o
.text:00001D95 $LN103          db 'indexInArchive',0   ; DATA XREF: .text:00001C48o
.text:00001DA4 $LN102          db 'newProps',0         ; DATA XREF: .text:00001C3Co
.text:00001DAD $LN101          db 'newData',0          ; DATA XREF: .text:00001C30o
.text:00001DB5 $LN100          db 's',0                ; DATA XREF: .text:00001C24o
.text:00001DB7 $LN99           db 'updateItems',0      ; DATA XREF: .text:00001C18o
.text:00001DC3                 align 10h
.text:00001DD0
.text:00001DD0 ; =============== S U B R O U T I N E =======================================
.text:00001DD0
.text:00001DD0 ; Attributes: bp-based frame
.text:00001DD0
.text:00001DD0 ; long __stdcall NArchive::N7z::GetTime(struct IArchiveUpdateCallback *, int, unsigned long, unsigned __int64 &, bool &)
.text:00001DD0 ?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z proc near
.text:00001DD0                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+60Ep
.text:00001DD0                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+69Cp ...
.text:00001DD0
.text:00001DD0 var_34          = dword ptr -34h
.text:00001DD0 var_30          = dword ptr -30h
.text:00001DD0 var_2C          = dword ptr -2Ch
.text:00001DD0 var_28          = dword ptr -28h
.text:00001DD0 var_20          = word ptr -20h
.text:00001DD0 var_18          = dword ptr -18h
.text:00001DD0 var_14          = dword ptr -14h
.text:00001DD0 var_C           = dword ptr -0Ch
.text:00001DD0 var_4           = dword ptr -4
.text:00001DD0 arg_0           = dword ptr  8
.text:00001DD0 arg_4           = dword ptr  0Ch
.text:00001DD0 arg_8           = dword ptr  10h
.text:00001DD0 arg_C           = dword ptr  14h
.text:00001DD0 arg_10          = dword ptr  18h
.text:00001DD0
.text:00001DD0                 push    ebp
.text:00001DD1                 mov     ebp, esp
.text:00001DD3                 push    0FFFFFFFFh
.text:00001DD5                 push    offset __ehhandler$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z
.text:00001DDA                 mov     eax, large fs:0
.text:00001DE0                 push    eax
.text:00001DE1                 sub     esp, 28h
.text:00001DE4                 push    esi
.text:00001DE5                 push    edi
.text:00001DE6                 lea     edi, [ebp+var_34]
.text:00001DE9                 mov     ecx, 0Ah
.text:00001DEE                 mov     eax, 0CCCCCCCCh
.text:00001DF3                 rep stosd
.text:00001DF5                 mov     eax, dword ptr ds:___security_cookie
.text:00001DFA                 xor     eax, ebp
.text:00001DFC                 push    eax
.text:00001DFD                 lea     eax, [ebp+var_C]
.text:00001E00                 mov     large fs:0, eax
.text:00001E06                 lea     ecx, [ebp+var_20] ; this
.text:00001E09                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00001E0E                 mov     [ebp+var_4], 0
.text:00001E15                 mov     esi, esp
.text:00001E17                 lea     eax, [ebp+var_20]
.text:00001E1A                 push    eax
.text:00001E1B                 mov     ecx, [ebp+arg_8]
.text:00001E1E                 push    ecx
.text:00001E1F                 mov     edx, [ebp+arg_4]
.text:00001E22                 push    edx
.text:00001E23                 mov     eax, [ebp+arg_0]
.text:00001E26                 mov     ecx, [eax]
.text:00001E28                 mov     edx, [ebp+arg_0]
.text:00001E2B                 push    edx
.text:00001E2C                 mov     eax, [ecx+18h]
.text:00001E2F                 call    eax
.text:00001E31                 cmp     esi, esp
.text:00001E33                 call    __RTC_CheckEsp
.text:00001E38                 mov     [ebp+var_28], eax
.text:00001E3B                 cmp     [ebp+var_28], 0
.text:00001E3F                 jz      short loc_1E5E
.text:00001E41                 mov     ecx, [ebp+var_28]
.text:00001E44                 mov     [ebp+var_2C], ecx
.text:00001E47                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001E4E                 lea     ecx, [ebp+var_20] ; this
.text:00001E51                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001E56                 mov     eax, [ebp+var_2C]
.text:00001E59                 jmp     loc_1EE0
.text:00001E5E ; ---------------------------------------------------------------------------
.text:00001E5E
.text:00001E5E loc_1E5E:                               ; CODE XREF: NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)+6Fj
.text:00001E5E                 movzx   edx, [ebp+var_20]
.text:00001E62                 cmp     edx, 40h ; '@'
.text:00001E65                 jnz     short loc_1E8C
.text:00001E67                 mov     esi, [ebp+var_18]
.text:00001E6A                 xor     edi, edi
.text:00001E6C                 mov     eax, [ebp+var_14]
.text:00001E6F                 xor     edx, edx
.text:00001E71                 mov     cl, 20h ; ' '
.text:00001E73                 call    __allshl
.text:00001E78                 or      esi, eax
.text:00001E7A                 or      edi, edx
.text:00001E7C                 mov     eax, [ebp+arg_C]
.text:00001E7F                 mov     [eax], esi
.text:00001E81                 mov     [eax+4], edi
.text:00001E84                 mov     ecx, [ebp+arg_10]
.text:00001E87                 mov     byte ptr [ecx], 1
.text:00001E8A                 jmp     short loc_1EC7
.text:00001E8C ; ---------------------------------------------------------------------------
.text:00001E8C
.text:00001E8C loc_1E8C:                               ; CODE XREF: NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)+95j
.text:00001E8C                 movzx   edx, [ebp+var_20]
.text:00001E90                 test    edx, edx
.text:00001E92                 jz      short loc_1EB1
.text:00001E94                 mov     [ebp+var_30], 80070057h
.text:00001E9B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001EA2                 lea     ecx, [ebp+var_20] ; this
.text:00001EA5                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001EAA                 mov     eax, [ebp+var_30]
.text:00001EAD                 jmp     short loc_1EE0
.text:00001EAF ; ---------------------------------------------------------------------------
.text:00001EAF                 jmp     short loc_1EC7
.text:00001EB1 ; ---------------------------------------------------------------------------
.text:00001EB1
.text:00001EB1 loc_1EB1:                               ; CODE XREF: NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)+C2j
.text:00001EB1                 mov     eax, [ebp+arg_C]
.text:00001EB4                 mov     dword ptr [eax], 0
.text:00001EBA                 mov     dword ptr [eax+4], 0
.text:00001EC1                 mov     ecx, [ebp+arg_10]
.text:00001EC4                 mov     byte ptr [ecx], 0
.text:00001EC7
.text:00001EC7 loc_1EC7:                               ; CODE XREF: NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)+BAj
.text:00001EC7                                         ; NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)+DFj
.text:00001EC7                 mov     [ebp+var_34], 0
.text:00001ECE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001ED5                 lea     ecx, [ebp+var_20] ; this
.text:00001ED8                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001EDD                 mov     eax, [ebp+var_34]
.text:00001EE0
.text:00001EE0 loc_1EE0:                               ; CODE XREF: NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)+89j
.text:00001EE0                                         ; NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)+DDj
.text:00001EE0                 push    edx
.text:00001EE1                 mov     ecx, ebp
.text:00001EE3                 push    eax
.text:00001EE4                 lea     edx, $LN12
.text:00001EEA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001EEF                 pop     eax
.text:00001EF0                 pop     edx
.text:00001EF1                 mov     ecx, [ebp+var_C]
.text:00001EF4                 mov     large fs:0, ecx
.text:00001EFB                 pop     ecx
.text:00001EFC                 pop     edi
.text:00001EFD                 pop     esi
.text:00001EFE                 add     esp, 34h
.text:00001F01                 cmp     ebp, esp
.text:00001F03                 call    __RTC_CheckEsp
.text:00001F08                 mov     esp, ebp
.text:00001F0A                 pop     ebp
.text:00001F0B                 retn    14h
.text:00001F0B ?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z endp
.text:00001F0B
.text:00001F0B ; ---------------------------------------------------------------------------
.text:00001F0E                 align 10h
.text:00001F10 $LN12           dd 1                    ; DATA XREF: NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)+114o
.text:00001F14                 dd offset $LN11
.text:00001F18 $LN11           dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:00001F14o
.text:00001F20                 dd offset $LN9          ; "prop"
.text:00001F24 $LN9            db 'prop',0             ; DATA XREF: .text:00001F20o
.text:00001F29                 align 10h
.text:00001F30
.text:00001F30 ; =============== S U B R O U T I N E =======================================
.text:00001F30
.text:00001F30 ; Attributes: bp-based frame
.text:00001F30
.text:00001F30 ; void __thiscall NArchive::N7z::COutHandler::InitProps(NArchive::N7z::COutHandler *__hidden this)
.text:00001F30                 public ?InitProps@COutHandler@N7z@NArchive@@QAEXXZ
.text:00001F30 ?InitProps@COutHandler@N7z@NArchive@@QAEXXZ proc near
.text:00001F30                                         ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+5Fp
.text:00001F30
.text:00001F30 var_4           = dword ptr -4
.text:00001F30
.text:00001F30                 push    ebp
.text:00001F31                 mov     ebp, esp
.text:00001F33                 push    ecx
.text:00001F34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F3B                 mov     [ebp+var_4], ecx
.text:00001F3E                 mov     ecx, [ebp+var_4] ; this
.text:00001F41                 call    ?Init@CMultiMethodProps@NArchive@@QAEXXZ ; NArchive::CMultiMethodProps::Init(void)
.text:00001F46                 mov     eax, [ebp+var_4]
.text:00001F49                 mov     byte ptr [eax+48h], 0
.text:00001F4D                 mov     ecx, [ebp+var_4]
.text:00001F50                 mov     byte ptr [ecx+62h], 1
.text:00001F54                 mov     edx, [ebp+var_4]
.text:00001F57                 mov     byte ptr [edx+63h], 0
.text:00001F5B                 mov     eax, [ebp+var_4]
.text:00001F5E                 mov     byte ptr [eax+64h], 0
.text:00001F62                 mov     ecx, [ebp+var_4]
.text:00001F65                 add     ecx, 65h ; 'e'  ; this
.text:00001F68                 call    ?Init@CBoolPair@@QAEXXZ ; CBoolPair::Init(void)
.text:00001F6D                 mov     ecx, [ebp+var_4]
.text:00001F70                 add     ecx, 67h ; 'g'  ; this
.text:00001F73                 call    ?Init@CBoolPair@@QAEXXZ ; CBoolPair::Init(void)
.text:00001F78                 mov     ecx, [ebp+var_4]
.text:00001F7B                 add     ecx, 69h ; 'i'  ; this
.text:00001F7E                 call    ?Init@CBoolPair@@QAEXXZ ; CBoolPair::Init(void)
.text:00001F83                 mov     ecx, [ebp+var_4]
.text:00001F86                 mov     byte ptr [ecx+6Bh], 1
.text:00001F8A                 mov     ecx, [ebp+var_4] ; this
.text:00001F8D                 call    ?InitSolid@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitSolid(void)
.text:00001F92                 add     esp, 4
.text:00001F95                 cmp     ebp, esp
.text:00001F97                 call    __RTC_CheckEsp
.text:00001F9C                 mov     esp, ebp
.text:00001F9E                 pop     ebp
.text:00001F9F                 retn
.text:00001F9F ?InitProps@COutHandler@N7z@NArchive@@QAEXXZ endp
.text:00001F9F
.text:00001FA0
.text:00001FA0 ; =============== S U B R O U T I N E =======================================
.text:00001FA0
.text:00001FA0 ; Attributes: bp-based frame
.text:00001FA0
.text:00001FA0 ; __int32 __thiscall NArchive::N7z::COutHandler::SetSolidFromString(NArchive::N7z::COutHandler *this, const struct UString *)
.text:00001FA0                 public ?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z
.text:00001FA0 ?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z proc near
.text:00001FA0                                         ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+D1p
.text:00001FA0                                         ; NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+107p
.text:00001FA0
.text:00001FA0 var_60          = dword ptr -60h
.text:00001FA0 var_5C          = dword ptr -5Ch
.text:00001FA0 var_58          = dword ptr -58h
.text:00001FA0 var_54          = dword ptr -54h
.text:00001FA0 var_50          = dword ptr -50h
.text:00001FA0 var_4C          = dword ptr -4Ch
.text:00001FA0 var_48          = dword ptr -48h
.text:00001FA0 var_44          = word ptr -44h
.text:00001FA0 var_40          = dword ptr -40h
.text:00001FA0 var_3C          = dword ptr -3Ch
.text:00001FA0 var_34          = dword ptr -34h
.text:00001FA0 var_2C          = dword ptr -2Ch
.text:00001FA0 var_28          = dword ptr -28h
.text:00001FA0 var_20          = byte ptr -20h
.text:00001FA0 var_10          = dword ptr -10h
.text:00001FA0 var_C           = dword ptr -0Ch
.text:00001FA0 var_4           = dword ptr -4
.text:00001FA0 arg_0           = dword ptr  8
.text:00001FA0
.text:00001FA0                 push    ebp
.text:00001FA1                 mov     ebp, esp
.text:00001FA3                 push    0FFFFFFFFh
.text:00001FA5                 push    offset __ehhandler$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z
.text:00001FAA                 mov     eax, large fs:0
.text:00001FB0                 push    eax
.text:00001FB1                 sub     esp, 54h
.text:00001FB4                 push    edi
.text:00001FB5                 push    ecx
.text:00001FB6                 lea     edi, [ebp+var_60]
.text:00001FB9                 mov     ecx, 15h
.text:00001FBE                 mov     eax, 0CCCCCCCCh
.text:00001FC3                 rep stosd
.text:00001FC5                 pop     ecx
.text:00001FC6                 mov     eax, dword ptr ds:___security_cookie
.text:00001FCB                 xor     eax, ebp
.text:00001FCD                 push    eax
.text:00001FCE                 lea     eax, [ebp+var_C]
.text:00001FD1                 mov     large fs:0, eax
.text:00001FD7                 mov     [ebp+var_10], ecx
.text:00001FDA                 mov     eax, [ebp+arg_0]
.text:00001FDD                 push    eax
.text:00001FDE                 lea     ecx, [ebp+var_20]
.text:00001FE1                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00001FE6                 mov     [ebp+var_4], 0
.text:00001FED                 lea     ecx, [ebp+var_20] ; this
.text:00001FF0                 call    ?MakeLower_Ascii@UString@@QAEXXZ ; UString::MakeLower_Ascii(void)
.text:00001FF5                 mov     [ebp+var_28], 0
.text:00001FFC
.text:00001FFC loc_1FFC:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+F1j
.text:00001FFC                                         ; NArchive::N7z::COutHandler::SetSolidFromString(UString const &):loc_21B1j
.text:00001FFC                 lea     ecx, [ebp+var_20] ; this
.text:00001FFF                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00002004                 cmp     [ebp+var_28], eax
.text:00002007                 jnb     loc_21B6
.text:0000200D                 lea     ecx, [ebp+var_20]
.text:00002010                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002015                 mov     ecx, [ebp+var_28]
.text:00002018                 lea     edx, [eax+ecx*2]
.text:0000201B                 mov     [ebp+var_2C], edx
.text:0000201E                 lea     eax, [ebp+var_34]
.text:00002021                 push    eax             ; wchar_t **
.text:00002022                 mov     ecx, [ebp+var_2C]
.text:00002025                 push    ecx             ; wchar_t *
.text:00002026                 call    ?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z ; ConvertStringToUInt64(wchar_t const *,wchar_t const * *)
.text:0000202B                 mov     [ebp+var_40], eax
.text:0000202E                 mov     [ebp+var_3C], edx
.text:00002031                 mov     edx, [ebp+var_2C]
.text:00002034                 cmp     edx, [ebp+var_34]
.text:00002037                 jnz     short loc_2096
.text:00002039                 lea     ecx, [ebp+var_20]
.text:0000203C                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002041                 mov     ecx, [ebp+var_28]
.text:00002044                 movzx   edx, word ptr [eax+ecx*2]
.text:00002048                 mov     eax, [ebp+var_28]
.text:0000204B                 add     eax, 1
.text:0000204E                 mov     [ebp+var_28], eax
.text:00002051                 cmp     edx, 65h ; 'e'
.text:00002054                 jz      short loc_205F
.text:00002056                 mov     [ebp+var_5C], 1
.text:0000205D                 jmp     short loc_2066
.text:0000205F ; ---------------------------------------------------------------------------
.text:0000205F
.text:0000205F loc_205F:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+B4j
.text:0000205F                 mov     [ebp+var_5C], 0
.text:00002066
.text:00002066 loc_2066:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+BDj
.text:00002066                 cmp     [ebp+var_5C], 0
.text:0000206A                 jz      short loc_208A
.text:0000206C                 mov     [ebp+var_4C], 80070057h
.text:00002073                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000207A                 lea     ecx, [ebp+var_20] ; this
.text:0000207D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002082                 mov     eax, [ebp+var_4C]
.text:00002085                 jmp     loc_21CF
.text:0000208A ; ---------------------------------------------------------------------------
.text:0000208A
.text:0000208A loc_208A:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+CAj
.text:0000208A                 mov     ecx, [ebp+var_10]
.text:0000208D                 mov     byte ptr [ecx+61h], 1
.text:00002091                 jmp     loc_1FFC
.text:00002096 ; ---------------------------------------------------------------------------
.text:00002096
.text:00002096 loc_2096:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+97j
.text:00002096                 mov     edx, [ebp+var_34]
.text:00002099                 sub     edx, [ebp+var_2C]
.text:0000209C                 sar     edx, 1
.text:0000209E                 add     edx, [ebp+var_28]
.text:000020A1                 mov     [ebp+var_28], edx
.text:000020A4                 lea     ecx, [ebp+var_20] ; this
.text:000020A7                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000020AC                 cmp     [ebp+var_28], eax
.text:000020AF                 jnz     short loc_20CF
.text:000020B1                 mov     [ebp+var_50], 80070057h
.text:000020B8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000020BF                 lea     ecx, [ebp+var_20] ; this
.text:000020C2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000020C7                 mov     eax, [ebp+var_50]
.text:000020CA                 jmp     loc_21CF
.text:000020CF ; ---------------------------------------------------------------------------
.text:000020CF
.text:000020CF loc_20CF:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+10Fj
.text:000020CF                 lea     ecx, [ebp+var_20]
.text:000020D2                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000020D7                 mov     ecx, [ebp+var_28]
.text:000020DA                 mov     dx, [eax+ecx*2]
.text:000020DE                 mov     [ebp+var_44], dx
.text:000020E2                 mov     eax, [ebp+var_28]
.text:000020E5                 add     eax, 1
.text:000020E8                 mov     [ebp+var_28], eax
.text:000020EB                 movzx   ecx, [ebp+var_44]
.text:000020EF                 cmp     ecx, 66h ; 'f'
.text:000020F2                 jnz     short loc_2124
.text:000020F4                 cmp     [ebp+var_3C], 0
.text:000020F8                 ja      short loc_2110
.text:000020FA                 jb      short loc_2102
.text:000020FC                 cmp     [ebp+var_40], 1
.text:00002100                 jnb     short loc_2110
.text:00002102
.text:00002102 loc_2102:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+15Aj
.text:00002102                 mov     [ebp+var_40], 1
.text:00002109                 mov     [ebp+var_3C], 0
.text:00002110
.text:00002110 loc_2110:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+158j
.text:00002110                                         ; NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+160j
.text:00002110                 mov     edx, [ebp+var_10]
.text:00002113                 mov     eax, [ebp+var_40]
.text:00002116                 mov     [edx+50h], eax
.text:00002119                 mov     ecx, [ebp+var_3C]
.text:0000211C                 mov     [edx+54h], ecx
.text:0000211F                 jmp     loc_21B1
.text:00002124 ; ---------------------------------------------------------------------------
.text:00002124
.text:00002124 loc_2124:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+152j
.text:00002124                 movzx   edx, [ebp+var_44]
.text:00002128                 mov     [ebp+var_60], edx
.text:0000212B                 mov     eax, [ebp+var_60]
.text:0000212E                 sub     eax, 62h ; 'b'
.text:00002131                 mov     [ebp+var_60], eax
.text:00002134                 cmp     [ebp+var_60], 12h ; switch 19 cases
.text:00002138                 ja      short $LN1      ; jumptable 00002144 default case
.text:0000213A                 mov     ecx, [ebp+var_60]
.text:0000213D                 movzx   edx, ds:$LN24[ecx]
.text:00002144                 jmp     ds:$LN30[edx*4] ; switch jump
.text:0000214B ; ---------------------------------------------------------------------------
.text:0000214B
.text:0000214B $LN6:                                   ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+1A4j
.text:0000214B                                         ; DATA XREF: .text:$LN30o
.text:0000214B                 mov     [ebp+var_48], 0 ; jumptable 00002144 case 0
.text:00002152                 jmp     short loc_2193
.text:00002154 ; ---------------------------------------------------------------------------
.text:00002154
.text:00002154 $LN5_0:                                 ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+1A4j
.text:00002154                                         ; DATA XREF: .text:$LN30o
.text:00002154                 mov     [ebp+var_48], 0Ah ; jumptable 00002144 case 9
.text:0000215B                 jmp     short loc_2193
.text:0000215D ; ---------------------------------------------------------------------------
.text:0000215D
.text:0000215D $LN4:                                   ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+1A4j
.text:0000215D                                         ; DATA XREF: .text:$LN30o
.text:0000215D                 mov     [ebp+var_48], 14h ; jumptable 00002144 case 11
.text:00002164                 jmp     short loc_2193
.text:00002166 ; ---------------------------------------------------------------------------
.text:00002166
.text:00002166 $LN3:                                   ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+1A4j
.text:00002166                                         ; DATA XREF: .text:$LN30o
.text:00002166                 mov     [ebp+var_48], 1Eh ; jumptable 00002144 case 5
.text:0000216D                 jmp     short loc_2193
.text:0000216F ; ---------------------------------------------------------------------------
.text:0000216F
.text:0000216F $LN2:                                   ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+1A4j
.text:0000216F                                         ; DATA XREF: .text:$LN30o
.text:0000216F                 mov     [ebp+var_48], 28h ; '(' ; jumptable 00002144 case 18
.text:00002176                 jmp     short loc_2193
.text:00002178 ; ---------------------------------------------------------------------------
.text:00002178
.text:00002178 $LN1:                                   ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+198j
.text:00002178                                         ; NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+1A4j
.text:00002178                                         ; DATA XREF: ...
.text:00002178                 mov     [ebp+var_54], 80070057h ; jumptable 00002144 default case
.text:0000217F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002186                 lea     ecx, [ebp+var_20] ; this
.text:00002189                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000218E                 mov     eax, [ebp+var_54]
.text:00002191                 jmp     short loc_21CF
.text:00002193 ; ---------------------------------------------------------------------------
.text:00002193
.text:00002193 loc_2193:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+1B2j
.text:00002193                                         ; NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+1BBj ...
.text:00002193                 mov     eax, [ebp+var_40]
.text:00002196                 mov     edx, [ebp+var_3C]
.text:00002199                 mov     ecx, [ebp+var_48]
.text:0000219C                 call    __allshl
.text:000021A1                 mov     ecx, [ebp+var_10]
.text:000021A4                 mov     [ecx+58h], eax
.text:000021A7                 mov     [ecx+5Ch], edx
.text:000021AA                 mov     edx, [ebp+var_10]
.text:000021AD                 mov     byte ptr [edx+60h], 1
.text:000021B1
.text:000021B1 loc_21B1:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+17Fj
.text:000021B1                 jmp     loc_1FFC
.text:000021B6 ; ---------------------------------------------------------------------------
.text:000021B6
.text:000021B6 loc_21B6:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+67j
.text:000021B6                 mov     [ebp+var_58], 0
.text:000021BD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000021C4                 lea     ecx, [ebp+var_20] ; this
.text:000021C7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000021CC                 mov     eax, [ebp+var_58]
.text:000021CF
.text:000021CF loc_21CF:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+E5j
.text:000021CF                                         ; NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+12Aj ...
.text:000021CF                 push    edx
.text:000021D0                 mov     ecx, ebp
.text:000021D2                 push    eax
.text:000021D3                 lea     edx, $LN29
.text:000021D9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000021DE                 pop     eax
.text:000021DF                 pop     edx
.text:000021E0                 mov     ecx, [ebp+var_C]
.text:000021E3                 mov     large fs:0, ecx
.text:000021EA                 pop     ecx
.text:000021EB                 pop     edi
.text:000021EC                 add     esp, 60h
.text:000021EF                 cmp     ebp, esp
.text:000021F1                 call    __RTC_CheckEsp
.text:000021F6                 mov     esp, ebp
.text:000021F8                 pop     ebp
.text:000021F9                 retn    4
.text:000021F9 ?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z endp
.text:000021F9
.text:000021F9 ; ---------------------------------------------------------------------------
.text:000021FC $LN29           dd 2                    ; DATA XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+233o
.text:00002200                 dd offset $LN28
.text:00002204 $LN28           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00002200o
.text:0000220C                 dd offset $LN25
.text:00002210                 db 0CCh
.text:00002211                 db 3 dup(0FFh)
.text:00002214                 dd 4
.text:00002218                 dd offset $LN26
.text:0000221C $LN26           dd 646E65h              ; DATA XREF: .text:00002218o
.text:00002220 $LN25           dd 90003273h            ; DATA XREF: .text:0000220Co
.text:00002224 $LN30           dd offset $LN6          ; DATA XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+1A4r
.text:00002224                 dd offset $LN3          ; jump table for switch statement
.text:00002224                 dd offset $LN5_0
.text:00002224                 dd offset $LN4
.text:00002224                 dd offset $LN2
.text:00002224                 dd offset $LN1
.text:0000223C $LN24           db      0,     5,     5,     5
.text:0000223C                                         ; DATA XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+19Dr
.text:0000223C                 db      5,     1,     5,     5 ; indirect table for switch statement
.text:0000223C                 db      5,     2,     5,     3
.text:0000223C                 db      5,     5,     5,     5
.text:0000223C                 db      5,     5,     4
.text:0000224F                 align 10h
.text:00002250
.text:00002250 ; =============== S U B R O U T I N E =======================================
.text:00002250
.text:00002250 ; Attributes: bp-based frame
.text:00002250
.text:00002250 ; __int32 __thiscall NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(NArchive::N7z::COutHandler *this, const struct tagPROPVARIANT *)
.text:00002250                 public ?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z
.text:00002250 ?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z proc near
.text:00002250                                         ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+B9p
.text:00002250
.text:00002250 var_40          = dword ptr -40h
.text:00002250 var_3C          = byte ptr -3Ch
.text:00002250 var_30          = dword ptr -30h
.text:00002250 var_2C          = byte ptr -2Ch
.text:00002250 var_1D          = byte ptr -1Dh
.text:00002250 var_15          = byte ptr -15h
.text:00002250 var_10          = dword ptr -10h
.text:00002250 var_C           = dword ptr -0Ch
.text:00002250 var_4           = dword ptr -4
.text:00002250 arg_0           = dword ptr  8
.text:00002250
.text:00002250                 push    ebp
.text:00002251                 mov     ebp, esp
.text:00002253                 push    0FFFFFFFFh
.text:00002255                 push    offset __ehhandler$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z
.text:0000225A                 mov     eax, large fs:0
.text:00002260                 push    eax
.text:00002261                 sub     esp, 34h
.text:00002264                 push    edi
.text:00002265                 push    ecx
.text:00002266                 lea     edi, [ebp+var_40]
.text:00002269                 mov     ecx, 0Dh
.text:0000226E                 mov     eax, 0CCCCCCCCh
.text:00002273                 rep stosd
.text:00002275                 pop     ecx
.text:00002276                 mov     eax, dword ptr ds:___security_cookie
.text:0000227B                 xor     eax, ebp
.text:0000227D                 push    eax
.text:0000227E                 lea     eax, [ebp+var_C]
.text:00002281                 mov     large fs:0, eax
.text:00002287                 mov     [ebp+var_10], ecx
.text:0000228A                 mov     eax, [ebp+arg_0]
.text:0000228D                 movzx   ecx, word ptr [eax]
.text:00002290                 mov     [ebp+var_40], ecx
.text:00002293                 cmp     [ebp+var_40], 0
.text:00002297                 jz      short loc_22AA
.text:00002299                 cmp     [ebp+var_40], 8
.text:0000229D                 jz      short loc_22C5
.text:0000229F                 cmp     [ebp+var_40], 0Bh
.text:000022A3                 jz      short loc_22B3
.text:000022A5                 jmp     loc_233D
.text:000022AA ; ---------------------------------------------------------------------------
.text:000022AA
.text:000022AA loc_22AA:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+47j
.text:000022AA                 mov     [ebp+var_15], 1
.text:000022AE                 jmp     loc_2344
.text:000022B3 ; ---------------------------------------------------------------------------
.text:000022B3
.text:000022B3 loc_22B3:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+53j
.text:000022B3                 mov     edx, [ebp+arg_0]
.text:000022B6                 movsx   eax, word ptr [edx+8]
.text:000022BA                 neg     eax
.text:000022BC                 sbb     eax, eax
.text:000022BE                 neg     eax
.text:000022C0                 mov     [ebp+var_15], al
.text:000022C3                 jmp     short loc_2344
.text:000022C5 ; ---------------------------------------------------------------------------
.text:000022C5
.text:000022C5 loc_22C5:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+4Dj
.text:000022C5                 mov     ecx, [ebp+arg_0]
.text:000022C8                 mov     edx, [ecx+8]
.text:000022CB                 push    edx
.text:000022CC                 lea     ecx, [ebp+var_2C]
.text:000022CF                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:000022D4                 mov     [ebp+var_4], 0
.text:000022DB                 lea     eax, [ebp+var_15]
.text:000022DE                 push    eax             ; bool *
.text:000022DF                 lea     ecx, [ebp+var_2C]
.text:000022E2                 push    ecx             ; struct UString *
.text:000022E3                 call    ?StringToBool@@YG_NABVUString@@AA_N@Z ; StringToBool(UString const &,bool &)
.text:000022E8                 mov     [ebp+var_1D], al
.text:000022EB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000022F2                 lea     ecx, [ebp+var_2C] ; this
.text:000022F5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000022FA                 movzx   edx, [ebp+var_1D]
.text:000022FE                 test    edx, edx
.text:00002300                 jz      short loc_2304
.text:00002302                 jmp     short loc_2344
.text:00002304 ; ---------------------------------------------------------------------------
.text:00002304
.text:00002304 loc_2304:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+B0j
.text:00002304                 mov     eax, [ebp+arg_0]
.text:00002307                 mov     ecx, [eax+8]
.text:0000230A                 push    ecx
.text:0000230B                 lea     ecx, [ebp+var_3C]
.text:0000230E                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00002313                 mov     [ebp+var_4], 1
.text:0000231A                 lea     edx, [ebp+var_3C]
.text:0000231D                 push    edx             ; struct UString *
.text:0000231E                 mov     ecx, [ebp+var_10] ; this
.text:00002321                 call    ?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z ; NArchive::N7z::COutHandler::SetSolidFromString(UString const &)
.text:00002326                 mov     [ebp+var_30], eax
.text:00002329                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002330                 lea     ecx, [ebp+var_3C] ; this
.text:00002333                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002338                 mov     eax, [ebp+var_30]
.text:0000233B                 jmp     short loc_2369
.text:0000233D ; ---------------------------------------------------------------------------
.text:0000233D
.text:0000233D loc_233D:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+55j
.text:0000233D                 mov     eax, 80070057h
.text:00002342                 jmp     short loc_2369
.text:00002344 ; ---------------------------------------------------------------------------
.text:00002344
.text:00002344 loc_2344:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+5Ej
.text:00002344                                         ; NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+73j ...
.text:00002344                 movzx   eax, [ebp+var_15]
.text:00002348                 test    eax, eax
.text:0000234A                 jz      short loc_2356
.text:0000234C                 mov     ecx, [ebp+var_10] ; this
.text:0000234F                 call    ?InitSolid@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitSolid(void)
.text:00002354                 jmp     short loc_2367
.text:00002356 ; ---------------------------------------------------------------------------
.text:00002356
.text:00002356 loc_2356:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+FAj
.text:00002356                 mov     ecx, [ebp+var_10]
.text:00002359                 mov     dword ptr [ecx+50h], 1
.text:00002360                 mov     dword ptr [ecx+54h], 0
.text:00002367
.text:00002367 loc_2367:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+104j
.text:00002367                 xor     eax, eax
.text:00002369
.text:00002369 loc_2369:                               ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+EBj
.text:00002369                                         ; NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+F2j
.text:00002369                 push    edx
.text:0000236A                 mov     ecx, ebp
.text:0000236C                 push    eax
.text:0000236D                 lea     edx, $LN17
.text:00002373                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002378                 pop     eax
.text:00002379                 pop     edx
.text:0000237A                 mov     ecx, [ebp+var_C]
.text:0000237D                 mov     large fs:0, ecx
.text:00002384                 pop     ecx
.text:00002385                 pop     edi
.text:00002386                 add     esp, 40h
.text:00002389                 cmp     ebp, esp
.text:0000238B                 call    __RTC_CheckEsp
.text:00002390                 mov     esp, ebp
.text:00002392                 pop     ebp
.text:00002393                 retn    4
.text:00002393 ?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z endp
.text:00002393
.text:00002393 ; ---------------------------------------------------------------------------
.text:00002396                 align 4
.text:00002398 $LN17           dd 1                    ; DATA XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+11Do
.text:0000239C                 dd offset $LN16
.text:000023A0 $LN16           dd 0FFFFFFEBh, 1        ; DATA XREF: .text:0000239Co
.text:000023A8                 dd offset $LN14         ; "isSolid"
.text:000023AC $LN14           db 'isSolid',0          ; DATA XREF: .text:000023A8o
.text:000023B4                 align 10h
.text:000023C0
.text:000023C0 ; =============== S U B R O U T I N E =======================================
.text:000023C0
.text:000023C0 ; Attributes: bp-based frame
.text:000023C0
.text:000023C0 ; __int32 __thiscall NArchive::N7z::COutHandler::SetProperty(NArchive::N7z::COutHandler *this, const wchar_t *, const struct tagPROPVARIANT *)
.text:000023C0                 public ?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
.text:000023C0 ?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z proc near
.text:000023C0                                         ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+2BEp
.text:000023C0
.text:000023C0 var_84          = dword ptr -84h
.text:000023C0 var_80          = dword ptr -80h
.text:000023C0 var_7C          = dword ptr -7Ch
.text:000023C0 var_78          = dword ptr -78h
.text:000023C0 var_74          = dword ptr -74h
.text:000023C0 var_70          = dword ptr -70h
.text:000023C0 var_6C          = dword ptr -6Ch
.text:000023C0 var_68          = dword ptr -68h
.text:000023C0 var_64          = dword ptr -64h
.text:000023C0 var_60          = dword ptr -60h
.text:000023C0 var_5C          = dword ptr -5Ch
.text:000023C0 var_58          = dword ptr -58h
.text:000023C0 var_54          = dword ptr -54h
.text:000023C0 var_50          = dword ptr -50h
.text:000023C0 var_4C          = dword ptr -4Ch
.text:000023C0 var_48          = dword ptr -48h
.text:000023C0 var_44          = dword ptr -44h
.text:000023C0 var_39          = byte ptr -39h
.text:000023C0 var_34          = dword ptr -34h
.text:000023C0 var_2C          = dword ptr -2Ch
.text:000023C0 var_20          = byte ptr -20h
.text:000023C0 var_10          = dword ptr -10h
.text:000023C0 var_C           = dword ptr -0Ch
.text:000023C0 var_4           = dword ptr -4
.text:000023C0 arg_0           = dword ptr  8
.text:000023C0 arg_4           = dword ptr  0Ch
.text:000023C0
.text:000023C0                 push    ebp
.text:000023C1                 mov     ebp, esp
.text:000023C3                 push    0FFFFFFFFh
.text:000023C5                 push    offset __ehhandler$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
.text:000023CA                 mov     eax, large fs:0
.text:000023D0                 push    eax
.text:000023D1                 sub     esp, 78h
.text:000023D4                 push    edi
.text:000023D5                 push    ecx
.text:000023D6                 lea     edi, [ebp+var_84]
.text:000023DC                 mov     ecx, 1Eh
.text:000023E1                 mov     eax, 0CCCCCCCCh
.text:000023E6                 rep stosd
.text:000023E8                 pop     ecx
.text:000023E9                 mov     eax, dword ptr ds:___security_cookie
.text:000023EE                 xor     eax, ebp
.text:000023F0                 push    eax
.text:000023F1                 lea     eax, [ebp+var_C]
.text:000023F4                 mov     large fs:0, eax
.text:000023FA                 mov     [ebp+var_10], ecx
.text:000023FD                 mov     eax, [ebp+arg_0]
.text:00002400                 push    eax
.text:00002401                 lea     ecx, [ebp+var_20]
.text:00002404                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00002409                 mov     [ebp+var_4], 0
.text:00002410                 lea     ecx, [ebp+var_20] ; this
.text:00002413                 call    ?MakeLower_Ascii@UString@@QAEXXZ ; UString::MakeLower_Ascii(void)
.text:00002418                 lea     ecx, [ebp+var_20] ; this
.text:0000241B                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00002420                 movzx   ecx, al
.text:00002423                 test    ecx, ecx
.text:00002425                 jz      short loc_2445
.text:00002427                 mov     [ebp+var_4C], 80070057h
.text:0000242E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002435                 lea     ecx, [ebp+var_20] ; this
.text:00002438                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000243D                 mov     eax, [ebp+var_4C]
.text:00002440                 jmp     loc_2786
.text:00002445 ; ---------------------------------------------------------------------------
.text:00002445
.text:00002445 loc_2445:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+65j
.text:00002445                 lea     ecx, [ebp+var_20]
.text:00002448                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000244D                 movzx   edx, word ptr [eax]
.text:00002450                 cmp     edx, 73h ; 's'
.text:00002453                 jnz     loc_24E6
.text:00002459                 push    0               ; unsigned int
.text:0000245B                 lea     ecx, [ebp+var_20] ; this
.text:0000245E                 call    ?Delete@UString@@QAEXI@Z ; UString::Delete(uint)
.text:00002463                 lea     ecx, [ebp+var_20] ; this
.text:00002466                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000246B                 movzx   eax, al
.text:0000246E                 test    eax, eax
.text:00002470                 jz      short loc_2498
.text:00002472                 mov     ecx, [ebp+arg_4]
.text:00002475                 push    ecx             ; struct tagPROPVARIANT *
.text:00002476                 mov     ecx, [ebp+var_10] ; this
.text:00002479                 call    ?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z ; NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)
.text:0000247E                 mov     [ebp+var_50], eax
.text:00002481                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002488                 lea     ecx, [ebp+var_20] ; this
.text:0000248B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002490                 mov     eax, [ebp+var_50]
.text:00002493                 jmp     loc_2786
.text:00002498 ; ---------------------------------------------------------------------------
.text:00002498
.text:00002498 loc_2498:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+B0j
.text:00002498                 mov     edx, [ebp+arg_4]
.text:0000249B                 movzx   eax, word ptr [edx]
.text:0000249E                 test    eax, eax
.text:000024A0                 jz      short loc_24C0
.text:000024A2                 mov     [ebp+var_54], 80070057h
.text:000024A9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000024B0                 lea     ecx, [ebp+var_20] ; this
.text:000024B3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000024B8                 mov     eax, [ebp+var_54]
.text:000024BB                 jmp     loc_2786
.text:000024C0 ; ---------------------------------------------------------------------------
.text:000024C0
.text:000024C0 loc_24C0:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+E0j
.text:000024C0                 lea     ecx, [ebp+var_20]
.text:000024C3                 push    ecx             ; struct UString *
.text:000024C4                 mov     ecx, [ebp+var_10] ; this
.text:000024C7                 call    ?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z ; NArchive::N7z::COutHandler::SetSolidFromString(UString const &)
.text:000024CC                 mov     [ebp+var_58], eax
.text:000024CF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000024D6                 lea     ecx, [ebp+var_20] ; this
.text:000024D9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000024DE                 mov     eax, [ebp+var_58]
.text:000024E1                 jmp     loc_2786
.text:000024E6 ; ---------------------------------------------------------------------------
.text:000024E6
.text:000024E6 loc_24E6:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+93j
.text:000024E6                 lea     edx, [ebp+var_2C]
.text:000024E9                 push    edx             ; unsigned int *
.text:000024EA                 lea     eax, [ebp+var_20]
.text:000024ED                 push    eax             ; struct UString *
.text:000024EE                 call    ?ParseStringToUInt32@@YGIABVUString@@AAI@Z ; ParseStringToUInt32(UString const &,uint &)
.text:000024F3                 mov     [ebp+var_34], eax
.text:000024F6                 cmp     [ebp+var_34], 0
.text:000024FA                 jnz     loc_2756
.text:00002500                 push    offset $SG74549 ; "rsfx"
.text:00002505                 lea     ecx, [ebp+var_20] ; this
.text:00002508                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:0000250D                 movzx   ecx, al
.text:00002510                 test    ecx, ecx
.text:00002512                 jz      short loc_253E
.text:00002514                 mov     edx, [ebp+var_10]
.text:00002517                 add     edx, 48h ; 'H'
.text:0000251A                 push    edx             ; bool *
.text:0000251B                 mov     eax, [ebp+arg_4]
.text:0000251E                 push    eax             ; struct tagPROPVARIANT *
.text:0000251F                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:00002524                 mov     [ebp+var_5C], eax
.text:00002527                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000252E                 lea     ecx, [ebp+var_20] ; this
.text:00002531                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002536                 mov     eax, [ebp+var_5C]
.text:00002539                 jmp     loc_2786
.text:0000253E ; ---------------------------------------------------------------------------
.text:0000253E
.text:0000253E loc_253E:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+152j
.text:0000253E                 push    offset $SG74552 ; char *
.text:00002543                 lea     ecx, [ebp+var_20] ; this
.text:00002546                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:0000254B                 movzx   ecx, al
.text:0000254E                 test    ecx, ecx
.text:00002550                 jz      short loc_257C
.text:00002552                 mov     edx, [ebp+var_10]
.text:00002555                 add     edx, 62h ; 'b'
.text:00002558                 push    edx             ; bool *
.text:00002559                 mov     eax, [ebp+arg_4]
.text:0000255C                 push    eax             ; struct tagPROPVARIANT *
.text:0000255D                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:00002562                 mov     [ebp+var_60], eax
.text:00002565                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000256C                 lea     ecx, [ebp+var_20] ; this
.text:0000256F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002574                 mov     eax, [ebp+var_60]
.text:00002577                 jmp     loc_2786
.text:0000257C ; ---------------------------------------------------------------------------
.text:0000257C
.text:0000257C loc_257C:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+190j
.text:0000257C                 push    offset $SG74555 ; "hcf"
.text:00002581                 lea     ecx, [ebp+var_20] ; this
.text:00002584                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00002589                 movzx   ecx, al
.text:0000258C                 test    ecx, ecx
.text:0000258E                 jz      short loc_25F5
.text:00002590                 mov     [ebp+var_39], 1
.text:00002594                 lea     edx, [ebp+var_39]
.text:00002597                 push    edx             ; bool *
.text:00002598                 mov     eax, [ebp+arg_4]
.text:0000259B                 push    eax             ; struct tagPROPVARIANT *
.text:0000259C                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:000025A1                 mov     [ebp+var_44], eax
.text:000025A4                 cmp     [ebp+var_44], 0
.text:000025A8                 jz      short loc_25C7
.text:000025AA                 mov     ecx, [ebp+var_44]
.text:000025AD                 mov     [ebp+var_64], ecx
.text:000025B0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000025B7                 lea     ecx, [ebp+var_20] ; this
.text:000025BA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000025BF                 mov     eax, [ebp+var_64]
.text:000025C2                 jmp     loc_2786
.text:000025C7 ; ---------------------------------------------------------------------------
.text:000025C7
.text:000025C7 loc_25C7:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+1E8j
.text:000025C7                 movzx   edx, [ebp+var_39]
.text:000025CB                 neg     edx
.text:000025CD                 sbb     edx, edx
.text:000025CF                 and     edx, 7FF8FFA9h
.text:000025D5                 add     edx, 80070057h
.text:000025DB                 mov     [ebp+var_68], edx
.text:000025DE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000025E5                 lea     ecx, [ebp+var_20] ; this
.text:000025E8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000025ED                 mov     eax, [ebp+var_68]
.text:000025F0                 jmp     loc_2786
.text:000025F5 ; ---------------------------------------------------------------------------
.text:000025F5
.text:000025F5 loc_25F5:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+1CEj
.text:000025F5                 push    offset $SG74564 ; char *
.text:000025FA                 lea     ecx, [ebp+var_20] ; this
.text:000025FD                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00002602                 movzx   eax, al
.text:00002605                 test    eax, eax
.text:00002607                 jz      short loc_2664
.text:00002609                 mov     ecx, [ebp+var_10]
.text:0000260C                 add     ecx, 64h ; 'd'
.text:0000260F                 push    ecx             ; bool *
.text:00002610                 mov     edx, [ebp+arg_4]
.text:00002613                 push    edx             ; struct tagPROPVARIANT *
.text:00002614                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:00002619                 mov     [ebp+var_48], eax
.text:0000261C                 cmp     [ebp+var_48], 0
.text:00002620                 jz      short loc_263F
.text:00002622                 mov     eax, [ebp+var_48]
.text:00002625                 mov     [ebp+var_6C], eax
.text:00002628                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000262F                 lea     ecx, [ebp+var_20] ; this
.text:00002632                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002637                 mov     eax, [ebp+var_6C]
.text:0000263A                 jmp     loc_2786
.text:0000263F ; ---------------------------------------------------------------------------
.text:0000263F
.text:0000263F loc_263F:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+260j
.text:0000263F                 mov     ecx, [ebp+var_10]
.text:00002642                 mov     byte ptr [ecx+63h], 1
.text:00002646                 mov     [ebp+var_70], 0
.text:0000264D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002654                 lea     ecx, [ebp+var_20] ; this
.text:00002657                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000265C                 mov     eax, [ebp+var_70]
.text:0000265F                 jmp     loc_2786
.text:00002664 ; ---------------------------------------------------------------------------
.text:00002664
.text:00002664 loc_2664:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+247j
.text:00002664                 push    offset $SG74571 ; char *
.text:00002669                 lea     ecx, [ebp+var_20] ; this
.text:0000266C                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00002671                 movzx   edx, al
.text:00002674                 test    edx, edx
.text:00002676                 jz      short loc_26A2
.text:00002678                 mov     eax, [ebp+var_10]
.text:0000267B                 add     eax, 65h ; 'e'
.text:0000267E                 push    eax             ; bool *
.text:0000267F                 mov     ecx, [ebp+arg_4]
.text:00002682                 push    ecx             ; struct tagPROPVARIANT *
.text:00002683                 call    ?PROPVARIANT_to_BoolPair@N7z@NArchive@@YGJABUtagPROPVARIANT@@AAUCBoolPair@@@Z ; NArchive::N7z::PROPVARIANT_to_BoolPair(tagPROPVARIANT const &,CBoolPair &)
.text:00002688                 mov     [ebp+var_74], eax
.text:0000268B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002692                 lea     ecx, [ebp+var_20] ; this
.text:00002695                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000269A                 mov     eax, [ebp+var_74]
.text:0000269D                 jmp     loc_2786
.text:000026A2 ; ---------------------------------------------------------------------------
.text:000026A2
.text:000026A2 loc_26A2:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+2B6j
.text:000026A2                 push    offset $SG74574 ; char *
.text:000026A7                 lea     ecx, [ebp+var_20] ; this
.text:000026AA                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:000026AF                 movzx   edx, al
.text:000026B2                 test    edx, edx
.text:000026B4                 jz      short loc_26E0
.text:000026B6                 mov     eax, [ebp+var_10]
.text:000026B9                 add     eax, 67h ; 'g'
.text:000026BC                 push    eax             ; bool *
.text:000026BD                 mov     ecx, [ebp+arg_4]
.text:000026C0                 push    ecx             ; struct tagPROPVARIANT *
.text:000026C1                 call    ?PROPVARIANT_to_BoolPair@N7z@NArchive@@YGJABUtagPROPVARIANT@@AAUCBoolPair@@@Z ; NArchive::N7z::PROPVARIANT_to_BoolPair(tagPROPVARIANT const &,CBoolPair &)
.text:000026C6                 mov     [ebp+var_78], eax
.text:000026C9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000026D0                 lea     ecx, [ebp+var_20] ; this
.text:000026D3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000026D8                 mov     eax, [ebp+var_78]
.text:000026DB                 jmp     loc_2786
.text:000026E0 ; ---------------------------------------------------------------------------
.text:000026E0
.text:000026E0 loc_26E0:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+2F4j
.text:000026E0                 push    offset $SG74577 ; char *
.text:000026E5                 lea     ecx, [ebp+var_20] ; this
.text:000026E8                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:000026ED                 movzx   edx, al
.text:000026F0                 test    edx, edx
.text:000026F2                 jz      short loc_271B
.text:000026F4                 mov     eax, [ebp+var_10]
.text:000026F7                 add     eax, 69h ; 'i'
.text:000026FA                 push    eax             ; bool *
.text:000026FB                 mov     ecx, [ebp+arg_4]
.text:000026FE                 push    ecx             ; struct tagPROPVARIANT *
.text:000026FF                 call    ?PROPVARIANT_to_BoolPair@N7z@NArchive@@YGJABUtagPROPVARIANT@@AAUCBoolPair@@@Z ; NArchive::N7z::PROPVARIANT_to_BoolPair(tagPROPVARIANT const &,CBoolPair &)
.text:00002704                 mov     [ebp+var_7C], eax
.text:00002707                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000270E                 lea     ecx, [ebp+var_20] ; this
.text:00002711                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002716                 mov     eax, [ebp+var_7C]
.text:00002719                 jmp     short loc_2786
.text:0000271B ; ---------------------------------------------------------------------------
.text:0000271B
.text:0000271B loc_271B:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+332j
.text:0000271B                 push    offset $SG74580 ; "mtf"
.text:00002720                 lea     ecx, [ebp+var_20] ; this
.text:00002723                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00002728                 movzx   edx, al
.text:0000272B                 test    edx, edx
.text:0000272D                 jz      short loc_2756
.text:0000272F                 mov     eax, [ebp+var_10]
.text:00002732                 add     eax, 6Bh ; 'k'
.text:00002735                 push    eax             ; bool *
.text:00002736                 mov     ecx, [ebp+arg_4]
.text:00002739                 push    ecx             ; struct tagPROPVARIANT *
.text:0000273A                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:0000273F                 mov     [ebp+var_80], eax
.text:00002742                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002749                 lea     ecx, [ebp+var_20] ; this
.text:0000274C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002751                 mov     eax, [ebp+var_80]
.text:00002754                 jmp     short loc_2786
.text:00002756 ; ---------------------------------------------------------------------------
.text:00002756
.text:00002756 loc_2756:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+13Aj
.text:00002756                                         ; NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+36Dj
.text:00002756                 mov     edx, [ebp+arg_4]
.text:00002759                 push    edx             ; struct tagPROPVARIANT *
.text:0000275A                 lea     ecx, [ebp+var_20]
.text:0000275D                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002762                 push    eax             ; wchar_t *
.text:00002763                 mov     ecx, [ebp+var_10] ; this
.text:00002766                 call    ?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z ; NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)
.text:0000276B                 mov     [ebp+var_84], eax
.text:00002771                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002778                 lea     ecx, [ebp+var_20] ; this
.text:0000277B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002780                 mov     eax, [ebp+var_84]
.text:00002786
.text:00002786 loc_2786:                               ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+80j
.text:00002786                                         ; NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+D3j ...
.text:00002786                 push    edx
.text:00002787                 mov     ecx, ebp
.text:00002789                 push    eax
.text:0000278A                 lea     edx, $LN24_0
.text:00002790                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002795                 pop     eax
.text:00002796                 pop     edx
.text:00002797                 mov     ecx, [ebp+var_C]
.text:0000279A                 mov     large fs:0, ecx
.text:000027A1                 pop     ecx
.text:000027A2                 pop     edi
.text:000027A3                 add     esp, 84h
.text:000027A9                 cmp     ebp, esp
.text:000027AB                 call    __RTC_CheckEsp
.text:000027B0                 mov     esp, ebp
.text:000027B2                 pop     ebp
.text:000027B3                 retn    8
.text:000027B3 ?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z endp
.text:000027B3
.text:000027B3 ; ---------------------------------------------------------------------------
.text:000027B6                 align 4
.text:000027B8 $LN24_0         dd 3                    ; DATA XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+3CAo
.text:000027BC                 dd offset $LN23
.text:000027C0 $LN23           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:000027BCo
.text:000027C8                 dd offset $LN19         ; "name"
.text:000027CC                 dd 0FFFFFFD4h, 4
.text:000027D4                 dd offset $LN20         ; "number"
.text:000027D8                 dd 0FFFFFFC7h, 1
.text:000027E0                 dd offset $LN21         ; "compressHeadersFull"
.text:000027E4 $LN21           db 'compressHeadersFull',0 ; DATA XREF: .text:000027E0o
.text:000027F8 $LN20           db 'number',0           ; DATA XREF: .text:000027D4o
.text:000027FF $LN19           db 'name',0             ; DATA XREF: .text:000027C8o
.text:00002804                 align 10h
.text:00002810
.text:00002810 ; =============== S U B R O U T I N E =======================================
.text:00002810
.text:00002810 ; Attributes: bp-based frame
.text:00002810
.text:00002810 ; int __stdcall NArchive::N7z::PROPVARIANT_to_BoolPair(struct tagPROPVARIANT *, bool *)
.text:00002810 ?PROPVARIANT_to_BoolPair@N7z@NArchive@@YGJABUtagPROPVARIANT@@AAUCBoolPair@@@Z proc near
.text:00002810                                         ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+2C3p
.text:00002810                                         ; NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+301p ...
.text:00002810
.text:00002810 var_4           = dword ptr -4
.text:00002810 arg_0           = dword ptr  8
.text:00002810 arg_4           = dword ptr  0Ch
.text:00002810
.text:00002810                 push    ebp
.text:00002811                 mov     ebp, esp
.text:00002813                 push    ecx
.text:00002814                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000281B                 mov     eax, [ebp+arg_4]
.text:0000281E                 push    eax             ; bool *
.text:0000281F                 mov     ecx, [ebp+arg_0]
.text:00002822                 push    ecx             ; struct tagPROPVARIANT *
.text:00002823                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:00002828                 mov     [ebp+var_4], eax
.text:0000282B                 cmp     [ebp+var_4], 0
.text:0000282F                 jz      short loc_2836
.text:00002831                 mov     eax, [ebp+var_4]
.text:00002834                 jmp     short loc_283F
.text:00002836 ; ---------------------------------------------------------------------------
.text:00002836
.text:00002836 loc_2836:                               ; CODE XREF: NArchive::N7z::PROPVARIANT_to_BoolPair(tagPROPVARIANT const &,CBoolPair &)+1Fj
.text:00002836                 mov     edx, [ebp+arg_4]
.text:00002839                 mov     byte ptr [edx+1], 1
.text:0000283D                 xor     eax, eax
.text:0000283F
.text:0000283F loc_283F:                               ; CODE XREF: NArchive::N7z::PROPVARIANT_to_BoolPair(tagPROPVARIANT const &,CBoolPair &)+24j
.text:0000283F                 add     esp, 4
.text:00002842                 cmp     ebp, esp
.text:00002844                 call    __RTC_CheckEsp
.text:00002849                 mov     esp, ebp
.text:0000284B                 pop     ebp
.text:0000284C                 retn    8
.text:0000284C ?PROPVARIANT_to_BoolPair@N7z@NArchive@@YGJABUtagPROPVARIANT@@AAUCBoolPair@@@Z endp
.text:0000284C
.text:0000284C ; ---------------------------------------------------------------------------
.text:0000284F                 align 10h
.text:00002850
.text:00002850 ; =============== S U B R O U T I N E =======================================
.text:00002850
.text:00002850 ; Attributes: bp-based frame
.text:00002850
.text:00002850 ; __int32 __cdecl NArchive::N7z::CHandler::SetProperties(NArchive::N7z::CHandler *this, const wchar_t *const *, const struct tagPROPVARIANT *, unsigned int)
.text:00002850                 public ?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:00002850 ?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z proc near
.text:00002850
.text:00002850 var_E0          = dword ptr -0E0h
.text:00002850 var_DC          = dword ptr -0DCh
.text:00002850 var_D8          = dword ptr -0D8h
.text:00002850 var_D4          = dword ptr -0D4h
.text:00002850 var_D0          = dword ptr -0D0h
.text:00002850 var_CC          = dword ptr -0CCh
.text:00002850 var_C8          = dword ptr -0C8h
.text:00002850 var_C4          = dword ptr -0C4h
.text:00002850 var_C0          = dword ptr -0C0h
.text:00002850 var_BC          = dword ptr -0BCh
.text:00002850 var_B8          = dword ptr -0B8h
.text:00002850 var_B1          = byte ptr -0B1h
.text:00002850 var_B0          = dword ptr -0B0h
.text:00002850 var_AC          = dword ptr -0ACh
.text:00002850 var_A8          = dword ptr -0A8h
.text:00002850 var_A4          = dword ptr -0A4h
.text:00002850 var_9D          = byte ptr -9Dh
.text:00002850 var_9C          = dword ptr -9Ch
.text:00002850 var_94          = dword ptr -94h
.text:00002850 var_90          = dword ptr -90h
.text:00002850 var_8C          = dword ptr -8Ch
.text:00002850 var_88          = dword ptr -88h
.text:00002850 var_84          = dword ptr -84h
.text:00002850 var_80          = dword ptr -80h
.text:00002850 var_7C          = dword ptr -7Ch
.text:00002850 var_78          = dword ptr -78h
.text:00002850 var_74          = dword ptr -74h
.text:00002850 var_70          = dword ptr -70h
.text:00002850 var_6C          = dword ptr -6Ch
.text:00002850 var_68          = dword ptr -68h
.text:00002850 var_64          = dword ptr -64h
.text:00002850 var_60          = dword ptr -60h
.text:00002850 var_5C          = dword ptr -5Ch
.text:00002850 var_58          = dword ptr -58h
.text:00002850 var_50          = dword ptr -50h
.text:00002850 var_48          = dword ptr -48h
.text:00002850 var_40          = dword ptr -40h
.text:00002850 var_3C          = dword ptr -3Ch
.text:00002850 var_38          = dword ptr -38h
.text:00002850 var_30          = dword ptr -30h
.text:00002850 var_28          = byte ptr -28h
.text:00002850 var_18          = dword ptr -18h
.text:00002850 var_14          = dword ptr -14h
.text:00002850 var_10          = dword ptr -10h
.text:00002850 var_C           = dword ptr -0Ch
.text:00002850 var_4           = dword ptr -4
.text:00002850 this            = dword ptr  8
.text:00002850 arg_4           = dword ptr  0Ch
.text:00002850 arg_8           = dword ptr  10h
.text:00002850 arg_C           = dword ptr  14h
.text:00002850
.text:00002850 ; FUNCTION CHUNK AT .text:00002D3A SIZE 0000003C BYTES
.text:00002850
.text:00002850                 push    ebp
.text:00002851                 mov     ebp, esp
.text:00002853                 push    0FFFFFFFFh
.text:00002855                 push    offset __ehhandler$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:0000285A                 mov     eax, large fs:0
.text:00002860                 push    eax
.text:00002861                 push    ecx
.text:00002862                 sub     esp, 0D0h
.text:00002868                 push    ebx
.text:00002869                 push    esi
.text:0000286A                 push    edi
.text:0000286B                 lea     edi, [ebp+var_E0]
.text:00002871                 mov     ecx, 34h ; '4'
.text:00002876                 mov     eax, 0CCCCCCCCh
.text:0000287B                 rep stosd
.text:0000287D                 mov     eax, dword ptr ds:___security_cookie
.text:00002882                 xor     eax, ebp
.text:00002884                 mov     [ebp+var_14], eax
.text:00002887                 push    eax
.text:00002888                 lea     eax, [ebp+var_C]
.text:0000288B                 mov     large fs:0, eax
.text:00002891                 mov     [ebp+var_10], esp
.text:00002894                 mov     [ebp+var_4], 0
.text:0000289B                 mov     ecx, [ebp+this]
.text:0000289E                 add     ecx, 1D0h
.text:000028A4                 call    ?Clear@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CBond2>::Clear(void)
.text:000028A9                 mov     ecx, [ebp+this]
.text:000028AC                 add     ecx, 10h        ; this
.text:000028AF                 call    ?InitProps@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitProps(void)
.text:000028B4                 mov     [ebp+var_18], 0
.text:000028BB                 jmp     short loc_28C6
.text:000028BD ; ---------------------------------------------------------------------------
.text:000028BD
.text:000028BD loc_28BD:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+29Aj
.text:000028BD                                         ; NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+304j
.text:000028BD                 mov     eax, [ebp+var_18]
.text:000028C0                 add     eax, 1
.text:000028C3                 mov     [ebp+var_18], eax
.text:000028C6
.text:000028C6 loc_28C6:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+6Bj
.text:000028C6                 mov     ecx, [ebp+var_18]
.text:000028C9                 cmp     ecx, [ebp+arg_C]
.text:000028CC                 jnb     loc_2B59
.text:000028D2                 mov     edx, [ebp+var_18]
.text:000028D5                 mov     eax, [ebp+arg_4]
.text:000028D8                 mov     ecx, [eax+edx*4]
.text:000028DB                 push    ecx
.text:000028DC                 lea     ecx, [ebp+var_28]
.text:000028DF                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:000028E4                 mov     [ebp+var_9C], eax
.text:000028EA                 mov     byte ptr [ebp+var_4], 1
.text:000028EE                 lea     ecx, [ebp+var_28] ; this
.text:000028F1                 call    ?MakeLower_Ascii@UString@@QAEXXZ ; UString::MakeLower_Ascii(void)
.text:000028F6                 lea     ecx, [ebp+var_28] ; this
.text:000028F9                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000028FE                 mov     [ebp+var_9D], al
.text:00002904                 movzx   edx, [ebp+var_9D]
.text:0000290B                 test    edx, edx
.text:0000290D                 jz      short loc_292A
.text:0000290F                 mov     [ebp+var_78], 80070057h
.text:00002916                 mov     byte ptr [ebp+var_4], 0
.text:0000291A                 lea     ecx, [ebp+var_28] ; this
.text:0000291D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002922                 mov     eax, [ebp+var_78]
.text:00002925                 jmp     loc_2D3A
.text:0000292A ; ---------------------------------------------------------------------------
.text:0000292A
.text:0000292A loc_292A:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+BDj
.text:0000292A                 mov     eax, [ebp+var_18]
.text:0000292D                 shl     eax, 4
.text:00002930                 add     eax, [ebp+arg_8]
.text:00002933                 mov     [ebp+var_30], eax
.text:00002936                 lea     ecx, [ebp+var_28]
.text:00002939                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000293E                 mov     [ebp+var_A4], eax
.text:00002944                 mov     ecx, [ebp+var_A4]
.text:0000294A                 movzx   edx, word ptr [ecx]
.text:0000294D                 cmp     edx, 62h ; 'b'
.text:00002950                 jnz     loc_2AEF
.text:00002956                 mov     eax, [ebp+var_30]
.text:00002959                 movzx   ecx, word ptr [eax]
.text:0000295C                 test    ecx, ecx
.text:0000295E                 jz      short loc_297B
.text:00002960                 mov     [ebp+var_7C], 80070057h
.text:00002967                 mov     byte ptr [ebp+var_4], 0
.text:0000296B                 lea     ecx, [ebp+var_28] ; this
.text:0000296E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002973                 mov     eax, [ebp+var_7C]
.text:00002976                 jmp     loc_2D3A
.text:0000297B ; ---------------------------------------------------------------------------
.text:0000297B
.text:0000297B loc_297B:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+10Ej
.text:0000297B                 push    0               ; unsigned int
.text:0000297D                 lea     ecx, [ebp+var_28] ; this
.text:00002980                 call    ?Delete@UString@@QAEXI@Z ; UString::Delete(uint)
.text:00002985                 lea     edx, [ebp+var_3C]
.text:00002988                 push    edx             ; unsigned int *
.text:00002989                 lea     eax, [ebp+var_40]
.text:0000298C                 push    eax             ; unsigned int *
.text:0000298D                 lea     ecx, [ebp+var_28]
.text:00002990                 push    ecx             ; struct UString *
.text:00002991                 call    ?ParseBond@N7z@NArchive@@YGJAAVUString@@AAI1@Z ; NArchive::N7z::ParseBond(UString &,uint &,uint &)
.text:00002996                 mov     [ebp+var_A8], eax
.text:0000299C                 mov     edx, [ebp+var_A8]
.text:000029A2                 mov     [ebp+var_48], edx
.text:000029A5                 cmp     [ebp+var_48], 0
.text:000029A9                 jz      short loc_29C5
.text:000029AB                 mov     eax, [ebp+var_48]
.text:000029AE                 mov     [ebp+var_80], eax
.text:000029B1                 mov     byte ptr [ebp+var_4], 0
.text:000029B5                 lea     ecx, [ebp+var_28] ; this
.text:000029B8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000029BD                 mov     eax, [ebp+var_80]
.text:000029C0                 jmp     loc_2D3A
.text:000029C5 ; ---------------------------------------------------------------------------
.text:000029C5
.text:000029C5 loc_29C5:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+159j
.text:000029C5                 lea     ecx, [ebp+var_28]
.text:000029C8                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000029CD                 mov     [ebp+var_AC], eax
.text:000029D3                 mov     ecx, [ebp+var_AC]
.text:000029D9                 movzx   edx, word ptr [ecx]
.text:000029DC                 cmp     edx, 3Ah ; ':'
.text:000029DF                 jz      short loc_2A02
.text:000029E1                 mov     [ebp+var_84], 80070057h
.text:000029EB                 mov     byte ptr [ebp+var_4], 0
.text:000029EF                 lea     ecx, [ebp+var_28] ; this
.text:000029F2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000029F7                 mov     eax, [ebp+var_84]
.text:000029FD                 jmp     loc_2D3A
.text:00002A02 ; ---------------------------------------------------------------------------
.text:00002A02
.text:00002A02 loc_2A02:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+18Fj
.text:00002A02                 push    0               ; unsigned int
.text:00002A04                 lea     ecx, [ebp+var_28] ; this
.text:00002A07                 call    ?Delete@UString@@QAEXI@Z ; UString::Delete(uint)
.text:00002A0C                 mov     [ebp+var_50], 0
.text:00002A13                 lea     eax, [ebp+var_50]
.text:00002A16                 push    eax             ; unsigned int *
.text:00002A17                 lea     ecx, [ebp+var_38]
.text:00002A1A                 push    ecx             ; unsigned int *
.text:00002A1B                 lea     edx, [ebp+var_28]
.text:00002A1E                 push    edx             ; struct UString *
.text:00002A1F                 call    ?ParseBond@N7z@NArchive@@YGJAAVUString@@AAI1@Z ; NArchive::N7z::ParseBond(UString &,uint &,uint &)
.text:00002A24                 mov     [ebp+var_B0], eax
.text:00002A2A                 mov     eax, [ebp+var_B0]
.text:00002A30                 mov     [ebp+var_58], eax
.text:00002A33                 cmp     [ebp+var_58], 0
.text:00002A37                 jz      short loc_2A59
.text:00002A39                 mov     ecx, [ebp+var_58]
.text:00002A3C                 mov     [ebp+var_88], ecx
.text:00002A42                 mov     byte ptr [ebp+var_4], 0
.text:00002A46                 lea     ecx, [ebp+var_28] ; this
.text:00002A49                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002A4E                 mov     eax, [ebp+var_88]
.text:00002A54                 jmp     loc_2D3A
.text:00002A59 ; ---------------------------------------------------------------------------
.text:00002A59
.text:00002A59 loc_2A59:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1E7j
.text:00002A59                 cmp     [ebp+var_50], 0
.text:00002A5D                 jz      short loc_2A80
.text:00002A5F                 mov     [ebp+var_8C], 80070057h
.text:00002A69                 mov     byte ptr [ebp+var_4], 0
.text:00002A6D                 lea     ecx, [ebp+var_28] ; this
.text:00002A70                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002A75                 mov     eax, [ebp+var_8C]
.text:00002A7B                 jmp     loc_2D3A
.text:00002A80 ; ---------------------------------------------------------------------------
.text:00002A80
.text:00002A80 loc_2A80:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+20Dj
.text:00002A80                 lea     ecx, [ebp+var_28] ; this
.text:00002A83                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00002A88                 mov     [ebp+var_B1], al
.text:00002A8E                 movzx   edx, [ebp+var_B1]
.text:00002A95                 test    edx, edx
.text:00002A97                 jnz     short loc_2ABA
.text:00002A99                 mov     [ebp+var_90], 80070057h
.text:00002AA3                 mov     byte ptr [ebp+var_4], 0
.text:00002AA7                 lea     ecx, [ebp+var_28] ; this
.text:00002AAA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002AAF                 mov     eax, [ebp+var_90]
.text:00002AB5                 jmp     loc_2D3A
.text:00002ABA ; ---------------------------------------------------------------------------
.text:00002ABA
.text:00002ABA loc_2ABA:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+247j
.text:00002ABA                 sub     esp, 0Ch
.text:00002ABD                 mov     eax, esp
.text:00002ABF                 mov     ecx, [ebp+var_40]
.text:00002AC2                 mov     [eax], ecx
.text:00002AC4                 mov     edx, [ebp+var_3C]
.text:00002AC7                 mov     [eax+4], edx
.text:00002ACA                 mov     ecx, [ebp+var_38]
.text:00002ACD                 mov     [eax+8], ecx
.text:00002AD0                 mov     ecx, [ebp+this]
.text:00002AD3                 add     ecx, 1D0h
.text:00002AD9                 call    ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add(NArchive::N7z::CBond2)
.text:00002ADE                 mov     byte ptr [ebp+var_4], 0
.text:00002AE2                 lea     ecx, [ebp+var_28] ; this
.text:00002AE5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002AEA                 jmp     loc_28BD
.text:00002AEF ; ---------------------------------------------------------------------------
.text:00002AEF
.text:00002AEF loc_2AEF:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+100j
.text:00002AEF                 lea     ecx, [ebp+var_28]
.text:00002AF2                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002AF7                 mov     [ebp+var_B8], eax
.text:00002AFD                 mov     edx, [ebp+var_30]
.text:00002B00                 push    edx             ; struct tagPROPVARIANT *
.text:00002B01                 mov     eax, [ebp+var_B8]
.text:00002B07                 push    eax             ; wchar_t *
.text:00002B08                 mov     ecx, [ebp+this]
.text:00002B0B                 add     ecx, 10h        ; this
.text:00002B0E                 call    ?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z ; NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)
.text:00002B13                 mov     [ebp+var_BC], eax
.text:00002B19                 mov     ecx, [ebp+var_BC]
.text:00002B1F                 mov     [ebp+var_5C], ecx
.text:00002B22                 cmp     [ebp+var_5C], 0
.text:00002B26                 jz      short loc_2B48
.text:00002B28                 mov     edx, [ebp+var_5C]
.text:00002B2B                 mov     [ebp+var_94], edx
.text:00002B31                 mov     byte ptr [ebp+var_4], 0
.text:00002B35                 lea     ecx, [ebp+var_28] ; this
.text:00002B38                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002B3D                 mov     eax, [ebp+var_94]
.text:00002B43                 jmp     loc_2D3A
.text:00002B48 ; ---------------------------------------------------------------------------
.text:00002B48
.text:00002B48 loc_2B48:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+2D6j
.text:00002B48                 mov     byte ptr [ebp+var_4], 0
.text:00002B4C                 lea     ecx, [ebp+var_28] ; this
.text:00002B4F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002B54                 jmp     loc_28BD
.text:00002B59 ; ---------------------------------------------------------------------------
.text:00002B59
.text:00002B59 loc_2B59:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+7Cj
.text:00002B59                 mov     ecx, [ebp+this]
.text:00002B5C                 add     ecx, 10h        ; this
.text:00002B5F                 call    ?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ ; NArchive::CMultiMethodProps::GetNumEmptyMethods(void)
.text:00002B64                 mov     [ebp+var_C0], eax
.text:00002B6A                 mov     eax, [ebp+var_C0]
.text:00002B70                 mov     [ebp+var_60], eax
.text:00002B73                 cmp     [ebp+var_60], 0
.text:00002B77                 jbe     loc_2C6F
.text:00002B7D                 mov     [ebp+var_64], 0
.text:00002B84                 jmp     short loc_2B8F
.text:00002B86 ; ---------------------------------------------------------------------------
.text:00002B86
.text:00002B86 loc_2B86:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_2BEEj
.text:00002B86                 mov     ecx, [ebp+var_64]
.text:00002B89                 add     ecx, 1
.text:00002B8C                 mov     [ebp+var_64], ecx
.text:00002B8F
.text:00002B8F loc_2B8F:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+334j
.text:00002B8F                 mov     ecx, [ebp+this]
.text:00002B92                 add     ecx, 1D0h
.text:00002B98                 call    ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size(void)
.text:00002B9D                 mov     [ebp+var_C4], eax
.text:00002BA3                 mov     edx, [ebp+var_64]
.text:00002BA6                 cmp     edx, [ebp+var_C4]
.text:00002BAC                 jnb     short loc_2BF0
.text:00002BAE                 mov     eax, [ebp+var_64]
.text:00002BB1                 push    eax
.text:00002BB2                 mov     ecx, [ebp+this]
.text:00002BB5                 add     ecx, 1D0h
.text:00002BBB                 call    ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[](uint)
.text:00002BC0                 mov     [ebp+var_C8], eax
.text:00002BC6                 mov     ecx, [ebp+var_C8]
.text:00002BCC                 mov     [ebp+var_68], ecx
.text:00002BCF                 mov     edx, [ebp+var_68]
.text:00002BD2                 mov     eax, [edx+8]
.text:00002BD5                 cmp     eax, [ebp+var_60]
.text:00002BD8                 jb      short loc_2BE4
.text:00002BDA                 mov     ecx, [ebp+var_68]
.text:00002BDD                 mov     edx, [ecx]
.text:00002BDF                 cmp     edx, [ebp+var_60]
.text:00002BE2                 jnb     short loc_2BEE
.text:00002BE4
.text:00002BE4 loc_2BE4:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+388j
.text:00002BE4                 mov     eax, 80070057h
.text:00002BE9                 jmp     loc_2D3A
.text:00002BEE ; ---------------------------------------------------------------------------
.text:00002BEE
.text:00002BEE loc_2BEE:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+392j
.text:00002BEE                 jmp     short loc_2B86
.text:00002BF0 ; ---------------------------------------------------------------------------
.text:00002BF0
.text:00002BF0 loc_2BF0:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+35Cj
.text:00002BF0                 mov     [ebp+var_64], 0
.text:00002BF7                 jmp     short loc_2C02
.text:00002BF9 ; ---------------------------------------------------------------------------
.text:00002BF9
.text:00002BF9 loc_2BF9:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+40Ej
.text:00002BF9                 mov     eax, [ebp+var_64]
.text:00002BFC                 add     eax, 1
.text:00002BFF                 mov     [ebp+var_64], eax
.text:00002C02
.text:00002C02 loc_2C02:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3A7j
.text:00002C02                 mov     ecx, [ebp+this]
.text:00002C05                 add     ecx, 1D0h
.text:00002C0B                 call    ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size(void)
.text:00002C10                 mov     [ebp+var_CC], eax
.text:00002C16                 mov     ecx, [ebp+var_64]
.text:00002C19                 cmp     ecx, [ebp+var_CC]
.text:00002C1F                 jnb     short loc_2C60
.text:00002C21                 mov     edx, [ebp+var_64]
.text:00002C24                 push    edx
.text:00002C25                 mov     ecx, [ebp+this]
.text:00002C28                 add     ecx, 1D0h
.text:00002C2E                 call    ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[](uint)
.text:00002C33                 mov     [ebp+var_D0], eax
.text:00002C39                 mov     eax, [ebp+var_D0]
.text:00002C3F                 mov     [ebp+var_6C], eax
.text:00002C42                 mov     ecx, [ebp+var_6C]
.text:00002C45                 mov     edx, [ecx+8]
.text:00002C48                 sub     edx, [ebp+var_60]
.text:00002C4B                 mov     eax, [ebp+var_6C]
.text:00002C4E                 mov     [eax+8], edx
.text:00002C51                 mov     ecx, [ebp+var_6C]
.text:00002C54                 mov     edx, [ecx]
.text:00002C56                 sub     edx, [ebp+var_60]
.text:00002C59                 mov     eax, [ebp+var_6C]
.text:00002C5C                 mov     [eax], edx
.text:00002C5E                 jmp     short loc_2BF9
.text:00002C60 ; ---------------------------------------------------------------------------
.text:00002C60
.text:00002C60 loc_2C60:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3CFj
.text:00002C60                 mov     ecx, [ebp+var_60]
.text:00002C63                 push    ecx
.text:00002C64                 mov     ecx, [ebp+this]
.text:00002C67                 add     ecx, 24h ; '$'
.text:00002C6A                 call    ?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z ; CObjectVector<COneMethodInfo>::DeleteFrontal(uint)
.text:00002C6F
.text:00002C6F loc_2C6F:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+327j
.text:00002C6F                 mov     [ebp+var_70], 0
.text:00002C76                 jmp     short loc_2C81
.text:00002C78 ; ---------------------------------------------------------------------------
.text:00002C78
.text:00002C78 loc_2C78:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_2D05j
.text:00002C78                 mov     edx, [ebp+var_70]
.text:00002C7B                 add     edx, 1
.text:00002C7E                 mov     [ebp+var_70], edx
.text:00002C81
.text:00002C81 loc_2C81:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+426j
.text:00002C81                 mov     ecx, [ebp+this]
.text:00002C84                 add     ecx, 1D0h
.text:00002C8A                 call    ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size(void)
.text:00002C8F                 mov     [ebp+var_D4], eax
.text:00002C95                 mov     eax, [ebp+var_70]
.text:00002C98                 cmp     eax, [ebp+var_D4]
.text:00002C9E                 jnb     short loc_2D0A
.text:00002CA0                 mov     ecx, [ebp+var_70]
.text:00002CA3                 push    ecx
.text:00002CA4                 mov     ecx, [ebp+this]
.text:00002CA7                 add     ecx, 1D0h
.text:00002CAD                 call    ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[](uint)
.text:00002CB2                 mov     [ebp+var_D8], eax
.text:00002CB8                 mov     edx, [ebp+var_D8]
.text:00002CBE                 mov     [ebp+var_74], edx
.text:00002CC1                 mov     ecx, [ebp+this]
.text:00002CC4                 add     ecx, 24h ; '$'
.text:00002CC7                 call    ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size(void)
.text:00002CCC                 mov     [ebp+var_DC], eax
.text:00002CD2                 mov     eax, [ebp+var_74]
.text:00002CD5                 mov     ecx, [eax+8]
.text:00002CD8                 cmp     ecx, [ebp+var_DC]
.text:00002CDE                 jnb     short loc_2CFE
.text:00002CE0                 mov     ecx, [ebp+this]
.text:00002CE3                 add     ecx, 24h ; '$'
.text:00002CE6                 call    ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size(void)
.text:00002CEB                 mov     [ebp+var_E0], eax
.text:00002CF1                 mov     edx, [ebp+var_74]
.text:00002CF4                 mov     eax, [edx]
.text:00002CF6                 cmp     eax, [ebp+var_E0]
.text:00002CFC                 jb      short loc_2D05
.text:00002CFE
.text:00002CFE loc_2CFE:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+48Ej
.text:00002CFE                 mov     eax, 80070057h
.text:00002D03                 jmp     short loc_2D3A
.text:00002D05 ; ---------------------------------------------------------------------------
.text:00002D05
.text:00002D05 loc_2D05:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+4ACj
.text:00002D05                 jmp     loc_2C78
.text:00002D0A ; ---------------------------------------------------------------------------
.text:00002D0A
.text:00002D0A loc_2D0A:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+44Ej
.text:00002D0A                 xor     eax, eax
.text:00002D0C                 jmp     short loc_2D3A
.text:00002D0C ?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z endp
.text:00002D0C
.text:00002D0E
.text:00002D0E ; =============== S U B R O U T I N E =======================================
.text:00002D0E
.text:00002D0E
.text:00002D0E __catch$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0 proc near
.text:00002D0E                                         ; DATA XREF: .xdata$x:00003284o
.text:00002D0E                 mov     dword ptr [ebp-98h], 8007000Eh
.text:00002D18                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002D1F                 mov     eax, offset $LN34
.text:00002D24                 retn
.text:00002D24 __catch$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0 endp
.text:00002D24
.text:00002D25 ; ---------------------------------------------------------------------------
.text:00002D25                 mov     eax, offset __tryend$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$1
.text:00002D2A                 retn
.text:00002D2B ; ---------------------------------------------------------------------------
.text:00002D2B
.text:00002D2B __tryend$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$1:
.text:00002D2B                                         ; DATA XREF: .text:00002D25o
.text:00002D2B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002D32                 jmp     short loc_2D3A
.text:00002D34 ; ---------------------------------------------------------------------------
.text:00002D34
.text:00002D34 $LN34:                                  ; DATA XREF: __catch$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0+11o
.text:00002D34                 mov     eax, [ebp-98h]
.text:00002D3A ; START OF FUNCTION CHUNK FOR ?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:00002D3A
.text:00002D3A loc_2D3A:                               ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+D5j
.text:00002D3A                                         ; NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+126j ...
.text:00002D3A                 push    edx
.text:00002D3B                 mov     ecx, ebp
.text:00002D3D                 push    eax
.text:00002D3E                 lea     edx, $LN41
.text:00002D44                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002D49                 pop     eax
.text:00002D4A                 pop     edx
.text:00002D4B                 mov     ecx, [ebp+var_C]
.text:00002D4E                 mov     large fs:0, ecx
.text:00002D55                 pop     ecx
.text:00002D56                 pop     edi
.text:00002D57                 pop     esi
.text:00002D58                 pop     ebx
.text:00002D59                 mov     ecx, [ebp+var_14]
.text:00002D5C                 xor     ecx, ebp
.text:00002D5E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002D63                 add     esp, 0E0h
.text:00002D69                 cmp     ebp, esp
.text:00002D6B                 call    __RTC_CheckEsp
.text:00002D70                 mov     esp, ebp
.text:00002D72                 pop     ebp
.text:00002D73                 retn    10h
.text:00002D73 ; END OF FUNCTION CHUNK FOR ?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:00002D73 ; ---------------------------------------------------------------------------
.text:00002D76                 align 4
.text:00002D78 $LN41           dd 3                    ; DATA XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+4EEo
.text:00002D7C                 dd offset $LN40_0
.text:00002D80 $LN40_0         dd 0FFFFFFD8h, 0Ch      ; DATA XREF: .text:00002D7Co
.text:00002D88                 dd offset $LN36         ; "name"
.text:00002D8C                 dd 0FFFFFFC0h, 0Ch
.text:00002D94                 dd offset $LN37_0       ; "bond"
.text:00002D98                 dd 0FFFFFFB0h, 4
.text:00002DA0                 dd offset $LN38         ; "inStream"
.text:00002DA4 $LN38           db 'inStream',0         ; DATA XREF: .text:00002DA0o
.text:00002DAD $LN37_0         db 'bond',0             ; DATA XREF: .text:00002D94o
.text:00002DB2 $LN36           db 'name',0             ; DATA XREF: .text:00002D88o
.text:00002DB7                 align 10h
.text:00002DC0
.text:00002DC0 ; =============== S U B R O U T I N E =======================================
.text:00002DC0
.text:00002DC0 ; Attributes: bp-based frame
.text:00002DC0
.text:00002DC0 ; int __stdcall NArchive::N7z::ParseBond(struct UString *, unsigned int *, unsigned int *)
.text:00002DC0 ?ParseBond@N7z@NArchive@@YGJAAVUString@@AAI1@Z proc near
.text:00002DC0                                         ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+141p
.text:00002DC0                                         ; NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1CFp
.text:00002DC0
.text:00002DC0 var_8           = dword ptr -8
.text:00002DC0 var_4           = dword ptr -4
.text:00002DC0 arg_0           = dword ptr  8
.text:00002DC0 arg_4           = dword ptr  0Ch
.text:00002DC0 arg_8           = dword ptr  10h
.text:00002DC0
.text:00002DC0                 push    ebp
.text:00002DC1                 mov     ebp, esp
.text:00002DC3                 sub     esp, 8
.text:00002DC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002DCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DD4                 mov     eax, [ebp+arg_8]
.text:00002DD7                 mov     dword ptr [eax], 0
.text:00002DDD                 mov     ecx, [ebp+arg_4]
.text:00002DE0                 push    ecx             ; unsigned int *
.text:00002DE1                 mov     edx, [ebp+arg_0]
.text:00002DE4                 push    edx             ; struct UString *
.text:00002DE5                 call    ?ParseStringToUInt32@@YGIABVUString@@AAI@Z ; ParseStringToUInt32(UString const &,uint &)
.text:00002DEA                 mov     [ebp+var_4], eax
.text:00002DED                 cmp     [ebp+var_4], 0
.text:00002DF1                 jnz     short loc_2DFA
.text:00002DF3                 mov     eax, 80070057h
.text:00002DF8                 jmp     short loc_2E4B
.text:00002DFA ; ---------------------------------------------------------------------------
.text:00002DFA
.text:00002DFA loc_2DFA:                               ; CODE XREF: NArchive::N7z::ParseBond(UString &,uint &,uint &)+31j
.text:00002DFA                 mov     eax, [ebp+var_4]
.text:00002DFD                 push    eax             ; unsigned int
.text:00002DFE                 mov     ecx, [ebp+arg_0] ; this
.text:00002E01                 call    ?DeleteFrontal@UString@@QAEXI@Z ; UString::DeleteFrontal(uint)
.text:00002E06                 mov     ecx, [ebp+arg_0]
.text:00002E09                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002E0E                 movzx   ecx, word ptr [eax]
.text:00002E11                 cmp     ecx, 73h ; 's'
.text:00002E14                 jnz     short loc_2E49
.text:00002E16                 push    0               ; unsigned int
.text:00002E18                 mov     ecx, [ebp+arg_0] ; this
.text:00002E1B                 call    ?Delete@UString@@QAEXI@Z ; UString::Delete(uint)
.text:00002E20                 mov     edx, [ebp+arg_8]
.text:00002E23                 push    edx             ; unsigned int *
.text:00002E24                 mov     eax, [ebp+arg_0]
.text:00002E27                 push    eax             ; struct UString *
.text:00002E28                 call    ?ParseStringToUInt32@@YGIABVUString@@AAI@Z ; ParseStringToUInt32(UString const &,uint &)
.text:00002E2D                 mov     [ebp+var_8], eax
.text:00002E30                 cmp     [ebp+var_8], 0
.text:00002E34                 jnz     short loc_2E3D
.text:00002E36                 mov     eax, 80070057h
.text:00002E3B                 jmp     short loc_2E4B
.text:00002E3D ; ---------------------------------------------------------------------------
.text:00002E3D
.text:00002E3D loc_2E3D:                               ; CODE XREF: NArchive::N7z::ParseBond(UString &,uint &,uint &)+74j
.text:00002E3D                 mov     ecx, [ebp+var_8]
.text:00002E40                 push    ecx             ; unsigned int
.text:00002E41                 mov     ecx, [ebp+arg_0] ; this
.text:00002E44                 call    ?DeleteFrontal@UString@@QAEXI@Z ; UString::DeleteFrontal(uint)
.text:00002E49
.text:00002E49 loc_2E49:                               ; CODE XREF: NArchive::N7z::ParseBond(UString &,uint &,uint &)+54j
.text:00002E49                 xor     eax, eax
.text:00002E4B
.text:00002E4B loc_2E4B:                               ; CODE XREF: NArchive::N7z::ParseBond(UString &,uint &,uint &)+38j
.text:00002E4B                                         ; NArchive::N7z::ParseBond(UString &,uint &,uint &)+7Bj
.text:00002E4B                 add     esp, 8
.text:00002E4E                 cmp     ebp, esp
.text:00002E50                 call    __RTC_CheckEsp
.text:00002E55                 mov     esp, ebp
.text:00002E57                 pop     ebp
.text:00002E58                 retn    0Ch
.text:00002E58 ?ParseBond@N7z@NArchive@@YGJAAVUString@@AAI1@Z endp
.text:00002E58
.text:00002E58 ; ---------------------------------------------------------------------------
.text:00002E5B                 align 4
.text:00002E5B _text           ends
.text:00002E5B
.rtc$TMZ:00002E5C ; ===========================================================================
.rtc$TMZ:00002E5C
.rtc$TMZ:00002E5C ; Segment type: Pure data
.rtc$TMZ:00002E5C ; Segment permissions: Read
.rtc$TMZ:00002E5C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00002E5C                 assume cs:_rtc$TMZ
.rtc$TMZ:00002E5C                 ;org 2E5Ch
.rtc$TMZ:00002E5C ; COMDAT (pick any)
.rtc$TMZ:00002E5C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00002E5C _rtc$TMZ        ends
.rtc$TMZ:00002E5C
.rtc$IMZ:00002E60 ; ===========================================================================
.rtc$IMZ:00002E60
.rtc$IMZ:00002E60 ; Segment type: Pure data
.rtc$IMZ:00002E60 ; Segment permissions: Read
.rtc$IMZ:00002E60 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002E60                 assume cs:_rtc$IMZ
.rtc$IMZ:00002E60                 ;org 2E60h
.rtc$IMZ:00002E60 ; COMDAT (pick any)
.rtc$IMZ:00002E60 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002E60 _rtc$IMZ        ends
.rtc$IMZ:00002E60
.text:00002E64 ; ===========================================================================
.text:00002E64
.text:00002E64 ; Segment type: Pure code
.text:00002E64 ; Segment permissions: Read/Execute
.text:00002E64 _text           segment para public 'CODE' use32
.text:00002E64                 assume cs:_text
.text:00002E64                 ;org 2E64h
.text:00002E64 ; COMDAT (pick any)
.text:00002E64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E64
.text:00002E64 ; =============== S U B R O U T I N E =======================================
.text:00002E64
.text:00002E64 ; Attributes: bp-based frame
.text:00002E64
.text:00002E64 ; public: struct CProps & __thiscall CProps::operator=(struct CProps const &)
.text:00002E64                 public ??4CProps@@QAEAAU0@ABU0@@Z
.text:00002E64 ??4CProps@@QAEAAU0@ABU0@@Z proc near    ; CODE XREF: NArchive::N7z::CHandler::PropsMethod_To_FullMethod(NArchive::N7z::CMethodFull &,COneMethodInfo const &)+3Dp
.text:00002E64
.text:00002E64 var_4           = dword ptr -4
.text:00002E64 arg_0           = dword ptr  8
.text:00002E64
.text:00002E64                 push    ebp
.text:00002E65                 mov     ebp, esp
.text:00002E67                 push    ecx
.text:00002E68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E6F                 mov     [ebp+var_4], ecx
.text:00002E72                 mov     eax, [ebp+arg_0]
.text:00002E75                 push    eax
.text:00002E76                 mov     ecx, [ebp+var_4]
.text:00002E79                 call    ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)
.text:00002E7E                 mov     eax, [ebp+var_4]
.text:00002E81                 add     esp, 4
.text:00002E84                 cmp     ebp, esp
.text:00002E86                 call    __RTC_CheckEsp
.text:00002E8B                 mov     esp, ebp
.text:00002E8D                 pop     ebp
.text:00002E8E                 retn    4
.text:00002E8E ??4CProps@@QAEAAU0@ABU0@@Z endp
.text:00002E8E
.text:00002E8E ; ---------------------------------------------------------------------------
.text:00002E91                 align 4
.text:00002E91 _text           ends
.text:00002E91
.text$x:00002E94 ; ===========================================================================
.text$x:00002E94
.text$x:00002E94 ; Segment type: Pure code
.text$x:00002E94 ; Segment permissions: Read/Execute
.text$x:00002E94 _text$x         segment para public 'CODE' use32
.text$x:00002E94                 assume cs:_text$x
.text$x:00002E94                 ;org 2E94h
.text$x:00002E94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002E94
.text$x:00002E94 ; =============== S U B R O U T I N E =======================================
.text$x:00002E94
.text$x:00002E94
.text$x:00002E94 __unwindfunclet$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z$0 proc near
.text$x:00002E94                                         ; DATA XREF: .xdata$x:00003084o
.text$x:00002E94                 lea     ecx, [ebp-38h]  ; this
.text$x:00002E97                 jmp     ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text$x:00002E97 __unwindfunclet$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z$0 endp
.text$x:00002E97
.text$x:00002E9C
.text$x:00002E9C ; =============== S U B R O U T I N E =======================================
.text$x:00002E9C
.text$x:00002E9C
.text$x:00002E9C __ehhandler$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z proc near
.text$x:00002E9C                                         ; DATA XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+5o
.text$x:00002E9C
.text$x:00002E9C arg_4           = dword ptr  8
.text$x:00002E9C
.text$x:00002E9C                 mov     edx, [esp+arg_4]
.text$x:00002EA0                 lea     eax, [edx+0Ch]
.text$x:00002EA3                 mov     ecx, [edx-40h]
.text$x:00002EA6                 xor     ecx, eax
.text$x:00002EA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002EAD                 mov     eax, offset __ehfuncinfo$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z
.text$x:00002EB2                 jmp     ___CxxFrameHandler3
.text$x:00002EB2 __ehhandler$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z endp
.text$x:00002EB2
.text$x:00002EB7
.text$x:00002EB7 ; =============== S U B R O U T I N E =======================================
.text$x:00002EB7
.text$x:00002EB7
.text$x:00002EB7 __unwindfunclet$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z$0 proc near
.text$x:00002EB7                                         ; DATA XREF: .xdata$x:000030B0o
.text$x:00002EB7                 lea     ecx, [ebp-20h]
.text$x:00002EBA                 jmp     ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)
.text$x:00002EBA __unwindfunclet$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z$0 endp
.text$x:00002EBA
.text$x:00002EBF
.text$x:00002EBF ; =============== S U B R O U T I N E =======================================
.text$x:00002EBF
.text$x:00002EBF
.text$x:00002EBF __ehhandler$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z proc near
.text$x:00002EBF                                         ; DATA XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+5o
.text$x:00002EBF
.text$x:00002EBF arg_4           = dword ptr  8
.text$x:00002EBF
.text$x:00002EBF                 mov     edx, [esp+arg_4]
.text$x:00002EC3                 lea     eax, [edx+0Ch]
.text$x:00002EC6                 mov     ecx, [edx-84h]
.text$x:00002ECC                 xor     ecx, eax
.text$x:00002ECE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002ED3                 mov     eax, offset __ehfuncinfo$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z
.text$x:00002ED8                 jmp     ___CxxFrameHandler3
.text$x:00002ED8 __ehhandler$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z endp
.text$x:00002ED8
.text$x:00002EDD
.text$x:00002EDD ; =============== S U B R O U T I N E =======================================
.text$x:00002EDD
.text$x:00002EDD
.text$x:00002EDD __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2 proc near
.text$x:00002EDD                                         ; DATA XREF: .xdata$x:0000312Co
.text$x:00002EDD                 lea     ecx, [ebp-24h]
.text$x:00002EE0                 jmp     ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)
.text$x:00002EE0 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2 endp
.text$x:00002EE0
.text$x:00002EE5
.text$x:00002EE5 ; =============== S U B R O U T I N E =======================================
.text$x:00002EE5
.text$x:00002EE5
.text$x:00002EE5 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3 proc near
.text$x:00002EE5                                         ; DATA XREF: .xdata$x:00003134o
.text$x:00002EE5                 lea     ecx, [ebp-3Ch]  ; this
.text$x:00002EE8                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00002EE8 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3 endp
.text$x:00002EE8
.text$x:00002EED
.text$x:00002EED ; =============== S U B R O U T I N E =======================================
.text$x:00002EED
.text$x:00002EED
.text$x:00002EED __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4 proc near
.text$x:00002EED                                         ; DATA XREF: .xdata$x:0000313Co
.text$x:00002EED                 lea     ecx, [ebp-0B0h] ; this
.text$x:00002EF3                 jmp     ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text$x:00002EF3 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4 endp
.text$x:00002EF3
.text$x:00002EF8
.text$x:00002EF8 ; =============== S U B R O U T I N E =======================================
.text$x:00002EF8
.text$x:00002EF8
.text$x:00002EF8 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5 proc near
.text$x:00002EF8                                         ; DATA XREF: .xdata$x:00003144o
.text$x:00002EF8                 lea     ecx, [ebp-0C4h] ; this
.text$x:00002EFE                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00002EFE __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5 endp
.text$x:00002EFE
.text$x:00002F03
.text$x:00002F03 ; =============== S U B R O U T I N E =======================================
.text$x:00002F03
.text$x:00002F03
.text$x:00002F03 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6 proc near
.text$x:00002F03                                         ; DATA XREF: .xdata$x:0000314Co
.text$x:00002F03                 lea     ecx, [ebp-0E4h] ; this
.text$x:00002F09                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00002F09 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6 endp
.text$x:00002F09
.text$x:00002F0E
.text$x:00002F0E ; =============== S U B R O U T I N E =======================================
.text$x:00002F0E
.text$x:00002F0E
.text$x:00002F0E __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7 proc near
.text$x:00002F0E                                         ; DATA XREF: .xdata$x:00003154o
.text$x:00002F0E                 lea     ecx, [ebp-10Ch] ; this
.text$x:00002F14                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00002F14 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7 endp
.text$x:00002F14
.text$x:00002F19
.text$x:00002F19 ; =============== S U B R O U T I N E =======================================
.text$x:00002F19
.text$x:00002F19
.text$x:00002F19 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8 proc near
.text$x:00002F19                                         ; DATA XREF: .xdata$x:0000315Co
.text$x:00002F19                 lea     ecx, [ebp-3DCh] ; this
.text$x:00002F1F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00002F1F __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8 endp
.text$x:00002F1F
.text$x:00002F24
.text$x:00002F24 ; =============== S U B R O U T I N E =======================================
.text$x:00002F24
.text$x:00002F24
.text$x:00002F24 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9 proc near
.text$x:00002F24                                         ; DATA XREF: .xdata$x:00003164o
.text$x:00002F24                 lea     ecx, [ebp-3E8h] ; this
.text$x:00002F2A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00002F2A __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9 endp
.text$x:00002F2A
.text$x:00002F2F
.text$x:00002F2F ; =============== S U B R O U T I N E =======================================
.text$x:00002F2F
.text$x:00002F2F
.text$x:00002F2F __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10 proc near
.text$x:00002F2F                                         ; DATA XREF: .xdata$x:0000316Co
.text$x:00002F2F                 lea     ecx, [ebp-128h] ; this
.text$x:00002F35                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00002F35 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10 endp
.text$x:00002F35
.text$x:00002F3A
.text$x:00002F3A ; =============== S U B R O U T I N E =======================================
.text$x:00002F3A
.text$x:00002F3A
.text$x:00002F3A __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11 proc near
.text$x:00002F3A                                         ; DATA XREF: .xdata$x:00003174o
.text$x:00002F3A                 lea     ecx, [ebp-144h] ; this
.text$x:00002F40                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00002F40 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11 endp
.text$x:00002F40
.text$x:00002F45
.text$x:00002F45 ; =============== S U B R O U T I N E =======================================
.text$x:00002F45
.text$x:00002F45
.text$x:00002F45 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12 proc near
.text$x:00002F45                                         ; DATA XREF: .xdata$x:0000317Co
.text$x:00002F45                 lea     ecx, [ebp-160h] ; this
.text$x:00002F4B                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00002F4B __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12 endp
.text$x:00002F4B
.text$x:00002F50
.text$x:00002F50 ; =============== S U B R O U T I N E =======================================
.text$x:00002F50
.text$x:00002F50
.text$x:00002F50 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$13 proc near
.text$x:00002F50                                         ; DATA XREF: .xdata$x:00003184o
.text$x:00002F50                 lea     ecx, [ebp-19Ch] ; this
.text$x:00002F56                 jmp     ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:00002F56 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$13 endp
.text$x:00002F56
.text$x:00002F5B
.text$x:00002F5B ; =============== S U B R O U T I N E =======================================
.text$x:00002F5B
.text$x:00002F5B
.text$x:00002F5B __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$14 proc near
.text$x:00002F5B                                         ; DATA XREF: .xdata$x:0000318Co
.text$x:00002F5B                 lea     ecx, [ebp-1D4h] ; this
.text$x:00002F61                 jmp     ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:00002F61 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$14 endp
.text$x:00002F61
.text$x:00002F66
.text$x:00002F66 ; =============== S U B R O U T I N E =======================================
.text$x:00002F66
.text$x:00002F66
.text$x:00002F66 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$15 proc near
.text$x:00002F66                                         ; DATA XREF: .xdata$x:00003194o
.text$x:00002F66                 lea     ecx, [ebp-1ECh]
.text$x:00002F6C                 jmp     ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>(void)
.text$x:00002F6C __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$15 endp
.text$x:00002F6C
.text$x:00002F71
.text$x:00002F71 ; =============== S U B R O U T I N E =======================================
.text$x:00002F71
.text$x:00002F71
.text$x:00002F71 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$16 proc near
.text$x:00002F71                                         ; DATA XREF: .xdata$x:0000319Co
.text$x:00002F71                 lea     ecx, [ebp-1F8h] ; this
.text$x:00002F77                 jmp     ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text$x:00002F77 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$16 endp
.text$x:00002F77
.text$x:00002F7C
.text$x:00002F7C ; =============== S U B R O U T I N E =======================================
.text$x:00002F7C
.text$x:00002F7C
.text$x:00002F7C __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$17 proc near
.text$x:00002F7C                                         ; DATA XREF: .xdata$x:000031A4o
.text$x:00002F7C                 lea     ecx, [ebp-2A8h] ; this
.text$x:00002F82                 jmp     ??1COutArchive@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutArchive::~COutArchive(void)
.text$x:00002F82 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$17 endp
.text$x:00002F82
.text$x:00002F87
.text$x:00002F87 ; =============== S U B R O U T I N E =======================================
.text$x:00002F87
.text$x:00002F87
.text$x:00002F87 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$18 proc near
.text$x:00002F87                                         ; DATA XREF: .xdata$x:000031ACo
.text$x:00002F87                 lea     ecx, [ebp-394h] ; this
.text$x:00002F8D                 jmp     ??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut(void)
.text$x:00002F8D __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$18 endp
.text$x:00002F8D
.text$x:00002F92
.text$x:00002F92 ; =============== S U B R O U T I N E =======================================
.text$x:00002F92
.text$x:00002F92
.text$x:00002F92 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$19 proc near
.text$x:00002F92                                         ; DATA XREF: .xdata$x:000031B4o
.text$x:00002F92                 lea     ecx, [ebp-3A0h]
.text$x:00002F98                 jmp     ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text$x:00002F98 __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$19 endp
.text$x:00002F98
.text$x:00002F9D
.text$x:00002F9D ; =============== S U B R O U T I N E =======================================
.text$x:00002F9D
.text$x:00002F9D
.text$x:00002F9D __ehhandler$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z proc near
.text$x:00002F9D                                         ; DATA XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5o
.text$x:00002F9D
.text$x:00002F9D arg_4           = dword ptr  8
.text$x:00002F9D
.text$x:00002F9D                 mov     edx, [esp+arg_4]
.text$x:00002FA1                 lea     eax, [edx+0Ch]
.text$x:00002FA4                 mov     ecx, [edx-504h]
.text$x:00002FAA                 xor     ecx, eax
.text$x:00002FAC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002FB1                 mov     eax, offset __ehfuncinfo$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text$x:00002FB6                 jmp     ___CxxFrameHandler3
.text$x:00002FB6 __ehhandler$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z endp
.text$x:00002FB6
.text$x:00002FBB
.text$x:00002FBB ; =============== S U B R O U T I N E =======================================
.text$x:00002FBB
.text$x:00002FBB
.text$x:00002FBB __unwindfunclet$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z$0 proc near
.text$x:00002FBB                                         ; DATA XREF: .xdata$x:000031C4o
.text$x:00002FBB                 lea     ecx, [ebp-20h]  ; this
.text$x:00002FBE                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00002FBE __unwindfunclet$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z$0 endp
.text$x:00002FBE
.text$x:00002FC3
.text$x:00002FC3 ; =============== S U B R O U T I N E =======================================
.text$x:00002FC3
.text$x:00002FC3
.text$x:00002FC3 __ehhandler$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z proc near
.text$x:00002FC3                                         ; DATA XREF: NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)+5o
.text$x:00002FC3
.text$x:00002FC3 arg_4           = dword ptr  8
.text$x:00002FC3
.text$x:00002FC3                 mov     edx, [esp+arg_4]
.text$x:00002FC7                 lea     eax, [edx+0Ch]
.text$x:00002FCA                 mov     ecx, [edx-34h]
.text$x:00002FCD                 xor     ecx, eax
.text$x:00002FCF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002FD4                 mov     eax, offset __ehfuncinfo$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z
.text$x:00002FD9                 jmp     ___CxxFrameHandler3
.text$x:00002FD9 __ehhandler$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z endp
.text$x:00002FD9
.text$x:00002FDE
.text$x:00002FDE ; =============== S U B R O U T I N E =======================================
.text$x:00002FDE
.text$x:00002FDE
.text$x:00002FDE __unwindfunclet$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z$0 proc near
.text$x:00002FDE                                         ; DATA XREF: .xdata$x:000031F0o
.text$x:00002FDE                 lea     ecx, [ebp-20h]  ; this
.text$x:00002FE1                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00002FE1 __unwindfunclet$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z$0 endp
.text$x:00002FE1
.text$x:00002FE6
.text$x:00002FE6 ; =============== S U B R O U T I N E =======================================
.text$x:00002FE6
.text$x:00002FE6
.text$x:00002FE6 __ehhandler$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z proc near
.text$x:00002FE6                                         ; DATA XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+5o
.text$x:00002FE6
.text$x:00002FE6 arg_4           = dword ptr  8
.text$x:00002FE6
.text$x:00002FE6                 mov     edx, [esp+arg_4]
.text$x:00002FEA                 lea     eax, [edx+0Ch]
.text$x:00002FED                 mov     ecx, [edx-5Ch]
.text$x:00002FF0                 xor     ecx, eax
.text$x:00002FF2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002FF7                 mov     eax, offset __ehfuncinfo$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z
.text$x:00002FFC                 jmp     ___CxxFrameHandler3
.text$x:00002FFC __ehhandler$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z endp
.text$x:00002FFC
.text$x:00003001
.text$x:00003001 ; =============== S U B R O U T I N E =======================================
.text$x:00003001
.text$x:00003001
.text$x:00003001 __unwindfunclet$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z$0 proc near
.text$x:00003001                                         ; DATA XREF: .xdata$x:0000321Co
.text$x:00003001                 lea     ecx, [ebp-2Ch]  ; this
.text$x:00003004                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003004 __unwindfunclet$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z$0 endp
.text$x:00003004
.text$x:00003009
.text$x:00003009 ; =============== S U B R O U T I N E =======================================
.text$x:00003009
.text$x:00003009
.text$x:00003009 __unwindfunclet$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z$1 proc near
.text$x:00003009                                         ; DATA XREF: .xdata$x:00003224o
.text$x:00003009                 lea     ecx, [ebp-3Ch]  ; this
.text$x:0000300C                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000300C __unwindfunclet$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z$1 endp
.text$x:0000300C
.text$x:00003011
.text$x:00003011 ; =============== S U B R O U T I N E =======================================
.text$x:00003011
.text$x:00003011
.text$x:00003011 __ehhandler$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z proc near
.text$x:00003011                                         ; DATA XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+5o
.text$x:00003011
.text$x:00003011 arg_4           = dword ptr  8
.text$x:00003011
.text$x:00003011                 mov     edx, [esp+arg_4]
.text$x:00003015                 lea     eax, [edx+0Ch]
.text$x:00003018                 mov     ecx, [edx-3Ch]
.text$x:0000301B                 xor     ecx, eax
.text$x:0000301D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003022                 mov     eax, offset __ehfuncinfo$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z
.text$x:00003027                 jmp     ___CxxFrameHandler3
.text$x:00003027 __ehhandler$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z endp
.text$x:00003027
.text$x:0000302C
.text$x:0000302C ; =============== S U B R O U T I N E =======================================
.text$x:0000302C
.text$x:0000302C
.text$x:0000302C __unwindfunclet$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$0 proc near
.text$x:0000302C                                         ; DATA XREF: .xdata$x:00003250o
.text$x:0000302C                 lea     ecx, [ebp-20h]  ; this
.text$x:0000302F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000302F __unwindfunclet$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$0 endp
.text$x:0000302F
.text$x:00003034
.text$x:00003034 ; =============== S U B R O U T I N E =======================================
.text$x:00003034
.text$x:00003034
.text$x:00003034 __ehhandler$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z proc near
.text$x:00003034                                         ; DATA XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+5o
.text$x:00003034
.text$x:00003034 arg_4           = dword ptr  8
.text$x:00003034
.text$x:00003034                 mov     edx, [esp+arg_4]
.text$x:00003038                 lea     eax, [edx+0Ch]
.text$x:0000303B                 mov     ecx, [edx-80h]
.text$x:0000303E                 xor     ecx, eax
.text$x:00003040                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003045                 mov     eax, offset __ehfuncinfo$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
.text$x:0000304A                 jmp     ___CxxFrameHandler3
.text$x:0000304A __ehhandler$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z endp
.text$x:0000304A
.text$x:0000304F
.text$x:0000304F ; =============== S U B R O U T I N E =======================================
.text$x:0000304F
.text$x:0000304F
.text$x:0000304F __unwindfunclet$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$2 proc near
.text$x:0000304F                                         ; DATA XREF: .xdata$x:000032A8o
.text$x:0000304F                 lea     ecx, [ebp-28h]  ; this
.text$x:00003052                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003052 __unwindfunclet$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$2 endp
.text$x:00003052
.text$x:00003057
.text$x:00003057 ; =============== S U B R O U T I N E =======================================
.text$x:00003057
.text$x:00003057
.text$x:00003057 __ehhandler$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z proc near
.text$x:00003057                                         ; DATA XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+5o
.text$x:00003057
.text$x:00003057 arg_4           = dword ptr  8
.text$x:00003057
.text$x:00003057                 mov     edx, [esp+arg_4]
.text$x:0000305B                 lea     eax, [edx+0Ch]
.text$x:0000305E                 mov     ecx, [edx-0E4h]
.text$x:00003064                 xor     ecx, eax
.text$x:00003066                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000306B                 mov     ecx, [edx-8]
.text$x:0000306E                 xor     ecx, eax
.text$x:00003070                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003075                 mov     eax, offset __ehfuncinfo$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text$x:0000307A                 jmp     ___CxxFrameHandler3
.text$x:0000307A __ehhandler$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z endp
.text$x:0000307A
.text$x:0000307A ; ---------------------------------------------------------------------------
.text$x:0000307F                 align 10h
.text$x:0000307F _text$x         ends
.text$x:0000307F
.xdata$x:00003080 ; ===========================================================================
.xdata$x:00003080
.xdata$x:00003080 ; Segment type: Pure data
.xdata$x:00003080 ; Segment permissions: Read
.xdata$x:00003080 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003080                 assume cs:_xdata$x
.xdata$x:00003080                 ;org 3080h
.xdata$x:00003080 __unwindtable$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z db 0FFh
.xdata$x:00003080                                         ; DATA XREF: .xdata$x:00003090o
.xdata$x:00003081                 db 0FFh
.xdata$x:00003082                 db 0FFh
.xdata$x:00003083                 db 0FFh
.xdata$x:00003084                 dd offset __unwindfunclet$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z$0
.xdata$x:00003088 __ehfuncinfo$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z db  22h ; "
.xdata$x:00003088                                         ; DATA XREF: __ehhandler$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z+11o
.xdata$x:00003089                 db    5
.xdata$x:0000308A                 db  93h ; ô
.xdata$x:0000308B                 db  19h
.xdata$x:0000308C                 db    1
.xdata$x:0000308D                 db    0
.xdata$x:0000308E                 db    0
.xdata$x:0000308F                 db    0
.xdata$x:00003090                 dd offset __unwindtable$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z
.xdata$x:00003094                 db    0
.xdata$x:00003095                 db    0
.xdata$x:00003096                 db    0
.xdata$x:00003097                 db    0
.xdata$x:00003098                 db    0
.xdata$x:00003099                 db    0
.xdata$x:0000309A                 db    0
.xdata$x:0000309B                 db    0
.xdata$x:0000309C                 db    0
.xdata$x:0000309D                 db    0
.xdata$x:0000309E                 db    0
.xdata$x:0000309F                 db    0
.xdata$x:000030A0                 db    0
.xdata$x:000030A1                 db    0
.xdata$x:000030A2                 db    0
.xdata$x:000030A3                 db    0
.xdata$x:000030A4                 db    0
.xdata$x:000030A5                 db    0
.xdata$x:000030A6                 db    0
.xdata$x:000030A7                 db    0
.xdata$x:000030A8                 db    1
.xdata$x:000030A9                 db    0
.xdata$x:000030AA                 db    0
.xdata$x:000030AB                 db    0
.xdata$x:000030AC __unwindtable$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z db 0FFh
.xdata$x:000030AC                                         ; DATA XREF: .xdata$x:000030BCo
.xdata$x:000030AD                 db 0FFh
.xdata$x:000030AE                 db 0FFh
.xdata$x:000030AF                 db 0FFh
.xdata$x:000030B0                 dd offset __unwindfunclet$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z$0
.xdata$x:000030B4 __ehfuncinfo$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z db  22h ; "
.xdata$x:000030B4                                         ; DATA XREF: __ehhandler$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z+14o
.xdata$x:000030B5                 db    5
.xdata$x:000030B6                 db  93h ; ô
.xdata$x:000030B7                 db  19h
.xdata$x:000030B8                 db    1
.xdata$x:000030B9                 db    0
.xdata$x:000030BA                 db    0
.xdata$x:000030BB                 db    0
.xdata$x:000030BC                 dd offset __unwindtable$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z
.xdata$x:000030C0                 db    0
.xdata$x:000030C1                 db    0
.xdata$x:000030C2                 db    0
.xdata$x:000030C3                 db    0
.xdata$x:000030C4                 db    0
.xdata$x:000030C5                 db    0
.xdata$x:000030C6                 db    0
.xdata$x:000030C7                 db    0
.xdata$x:000030C8                 db    0
.xdata$x:000030C9                 db    0
.xdata$x:000030CA                 db    0
.xdata$x:000030CB                 db    0
.xdata$x:000030CC                 db    0
.xdata$x:000030CD                 db    0
.xdata$x:000030CE                 db    0
.xdata$x:000030CF                 db    0
.xdata$x:000030D0                 db    0
.xdata$x:000030D1                 db    0
.xdata$x:000030D2                 db    0
.xdata$x:000030D3                 db    0
.xdata$x:000030D4                 db    1
.xdata$x:000030D5                 db    0
.xdata$x:000030D6                 db    0
.xdata$x:000030D7                 db    0
.xdata$x:000030D8 __catchsym$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$20 dd offset _k_LZMA_Name
.xdata$x:000030D8                                         ; DATA XREF: .xdata$x:000030F8o
.xdata$x:000030DC                 db    0
.xdata$x:000030DD                 db    0
.xdata$x:000030DE                 db    0
.xdata$x:000030DF                 db    0
.xdata$x:000030E0                 db    0
.xdata$x:000030E1                 db    0
.xdata$x:000030E2                 db    0
.xdata$x:000030E3                 db    0
.xdata$x:000030E4                 dd offset __catch$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0
.xdata$x:000030E8 __tryblocktable$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db    0
.xdata$x:000030E8                                         ; DATA XREF: .xdata$x:0000310Co
.xdata$x:000030E9                 db    0
.xdata$x:000030EA                 db    0
.xdata$x:000030EB                 db    0
.xdata$x:000030EC                 db  12h
.xdata$x:000030ED                 db    0
.xdata$x:000030EE                 db    0
.xdata$x:000030EF                 db    0
.xdata$x:000030F0                 db  13h
.xdata$x:000030F1                 db    0
.xdata$x:000030F2                 db    0
.xdata$x:000030F3                 db    0
.xdata$x:000030F4                 db    1
.xdata$x:000030F5                 db    0
.xdata$x:000030F6                 db    0
.xdata$x:000030F7                 db    0
.xdata$x:000030F8                 dd offset __catchsym$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$20
.xdata$x:000030FC __ehfuncinfo$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db  22h ; "
.xdata$x:000030FC                                         ; DATA XREF: __ehhandler$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z+14o
.xdata$x:000030FD                 db    5
.xdata$x:000030FE                 db  93h ; ô
.xdata$x:000030FF                 db  19h
.xdata$x:00003100                 db  14h
.xdata$x:00003101                 db    0
.xdata$x:00003102                 db    0
.xdata$x:00003103                 db    0
.xdata$x:00003104                 dd offset __unwindtable$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.xdata$x:00003108                 db    1
.xdata$x:00003109                 db    0
.xdata$x:0000310A                 db    0
.xdata$x:0000310B                 db    0
.xdata$x:0000310C                 dd offset __tryblocktable$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.xdata$x:00003110                 db    0
.xdata$x:00003111                 db    0
.xdata$x:00003112                 db    0
.xdata$x:00003113                 db    0
.xdata$x:00003114                 db    0
.xdata$x:00003115                 db    0
.xdata$x:00003116                 db    0
.xdata$x:00003117                 db    0
.xdata$x:00003118                 db    0
.xdata$x:00003119                 db    0
.xdata$x:0000311A                 db    0
.xdata$x:0000311B                 db    0
.xdata$x:0000311C                 db    1
.xdata$x:0000311D                 db    0
.xdata$x:0000311E                 db    0
.xdata$x:0000311F                 db    0
.xdata$x:00003120 __unwindtable$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db 0FFh
.xdata$x:00003120                                         ; DATA XREF: .xdata$x:00003104o
.xdata$x:00003121                 db 0FFh
.xdata$x:00003122                 db 0FFh
.xdata$x:00003123                 db 0FFh
.xdata$x:00003124                 db    0
.xdata$x:00003125                 db    0
.xdata$x:00003126                 db    0
.xdata$x:00003127                 db    0
.xdata$x:00003128                 db    0
.xdata$x:00003129                 db    0
.xdata$x:0000312A                 db    0
.xdata$x:0000312B                 db    0
.xdata$x:0000312C                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2
.xdata$x:00003130                 db    1
.xdata$x:00003131                 db    0
.xdata$x:00003132                 db    0
.xdata$x:00003133                 db    0
.xdata$x:00003134                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3
.xdata$x:00003138                 db    2
.xdata$x:00003139                 db    0
.xdata$x:0000313A                 db    0
.xdata$x:0000313B                 db    0
.xdata$x:0000313C                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4
.xdata$x:00003140                 db    3
.xdata$x:00003141                 db    0
.xdata$x:00003142                 db    0
.xdata$x:00003143                 db    0
.xdata$x:00003144                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5
.xdata$x:00003148                 db    4
.xdata$x:00003149                 db    0
.xdata$x:0000314A                 db    0
.xdata$x:0000314B                 db    0
.xdata$x:0000314C                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6
.xdata$x:00003150                 db    4
.xdata$x:00003151                 db    0
.xdata$x:00003152                 db    0
.xdata$x:00003153                 db    0
.xdata$x:00003154                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7
.xdata$x:00003158                 db    6
.xdata$x:00003159                 db    0
.xdata$x:0000315A                 db    0
.xdata$x:0000315B                 db    0
.xdata$x:0000315C                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8
.xdata$x:00003160                 db    7
.xdata$x:00003161                 db    0
.xdata$x:00003162                 db    0
.xdata$x:00003163                 db    0
.xdata$x:00003164                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9
.xdata$x:00003168                 db    4
.xdata$x:00003169                 db    0
.xdata$x:0000316A                 db    0
.xdata$x:0000316B                 db    0
.xdata$x:0000316C                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10
.xdata$x:00003170                 db    4
.xdata$x:00003171                 db    0
.xdata$x:00003172                 db    0
.xdata$x:00003173                 db    0
.xdata$x:00003174                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11
.xdata$x:00003178                 db    4
.xdata$x:00003179                 db    0
.xdata$x:0000317A                 db    0
.xdata$x:0000317B                 db    0
.xdata$x:0000317C                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12
.xdata$x:00003180                 db    2
.xdata$x:00003181                 db    0
.xdata$x:00003182                 db    0
.xdata$x:00003183                 db    0
.xdata$x:00003184                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$13
.xdata$x:00003188                 db  0Ch
.xdata$x:00003189                 db    0
.xdata$x:0000318A                 db    0
.xdata$x:0000318B                 db    0
.xdata$x:0000318C                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$14
.xdata$x:00003190                 db  0Dh
.xdata$x:00003191                 db    0
.xdata$x:00003192                 db    0
.xdata$x:00003193                 db    0
.xdata$x:00003194                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$15
.xdata$x:00003198                 db  0Eh
.xdata$x:00003199                 db    0
.xdata$x:0000319A                 db    0
.xdata$x:0000319B                 db    0
.xdata$x:0000319C                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$16
.xdata$x:000031A0                 db  0Eh
.xdata$x:000031A1                 db    0
.xdata$x:000031A2                 db    0
.xdata$x:000031A3                 db    0
.xdata$x:000031A4                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$17
.xdata$x:000031A8                 db  10h
.xdata$x:000031A9                 db    0
.xdata$x:000031AA                 db    0
.xdata$x:000031AB                 db    0
.xdata$x:000031AC                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$18
.xdata$x:000031B0                 db  11h
.xdata$x:000031B1                 db    0
.xdata$x:000031B2                 db    0
.xdata$x:000031B3                 db    0
.xdata$x:000031B4                 dd offset __unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$19
.xdata$x:000031B8                 db 0FFh
.xdata$x:000031B9                 db 0FFh
.xdata$x:000031BA                 db 0FFh
.xdata$x:000031BB                 db 0FFh
.xdata$x:000031BC                 db    0
.xdata$x:000031BD                 db    0
.xdata$x:000031BE                 db    0
.xdata$x:000031BF                 db    0
.xdata$x:000031C0 __unwindtable$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z db 0FFh
.xdata$x:000031C0                                         ; DATA XREF: .xdata$x:000031D0o
.xdata$x:000031C1                 db 0FFh
.xdata$x:000031C2                 db 0FFh
.xdata$x:000031C3                 db 0FFh
.xdata$x:000031C4                 dd offset __unwindfunclet$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z$0
.xdata$x:000031C8 __ehfuncinfo$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z db  22h ; "
.xdata$x:000031C8                                         ; DATA XREF: __ehhandler$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z+11o
.xdata$x:000031C9                 db    5
.xdata$x:000031CA                 db  93h ; ô
.xdata$x:000031CB                 db  19h
.xdata$x:000031CC                 db    1
.xdata$x:000031CD                 db    0
.xdata$x:000031CE                 db    0
.xdata$x:000031CF                 db    0
.xdata$x:000031D0                 dd offset __unwindtable$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z
.xdata$x:000031D4                 db    0
.xdata$x:000031D5                 db    0
.xdata$x:000031D6                 db    0
.xdata$x:000031D7                 db    0
.xdata$x:000031D8                 db    0
.xdata$x:000031D9                 db    0
.xdata$x:000031DA                 db    0
.xdata$x:000031DB                 db    0
.xdata$x:000031DC                 db    0
.xdata$x:000031DD                 db    0
.xdata$x:000031DE                 db    0
.xdata$x:000031DF                 db    0
.xdata$x:000031E0                 db    0
.xdata$x:000031E1                 db    0
.xdata$x:000031E2                 db    0
.xdata$x:000031E3                 db    0
.xdata$x:000031E4                 db    0
.xdata$x:000031E5                 db    0
.xdata$x:000031E6                 db    0
.xdata$x:000031E7                 db    0
.xdata$x:000031E8                 db    1
.xdata$x:000031E9                 db    0
.xdata$x:000031EA                 db    0
.xdata$x:000031EB                 db    0
.xdata$x:000031EC __unwindtable$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z db 0FFh
.xdata$x:000031EC                                         ; DATA XREF: .xdata$x:000031FCo
.xdata$x:000031ED                 db 0FFh
.xdata$x:000031EE                 db 0FFh
.xdata$x:000031EF                 db 0FFh
.xdata$x:000031F0                 dd offset __unwindfunclet$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z$0
.xdata$x:000031F4 __ehfuncinfo$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z db  22h ; "
.xdata$x:000031F4                                         ; DATA XREF: __ehhandler$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z+11o
.xdata$x:000031F5                 db    5
.xdata$x:000031F6                 db  93h ; ô
.xdata$x:000031F7                 db  19h
.xdata$x:000031F8                 db    1
.xdata$x:000031F9                 db    0
.xdata$x:000031FA                 db    0
.xdata$x:000031FB                 db    0
.xdata$x:000031FC                 dd offset __unwindtable$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z
.xdata$x:00003200                 db    0
.xdata$x:00003201                 db    0
.xdata$x:00003202                 db    0
.xdata$x:00003203                 db    0
.xdata$x:00003204                 db    0
.xdata$x:00003205                 db    0
.xdata$x:00003206                 db    0
.xdata$x:00003207                 db    0
.xdata$x:00003208                 db    0
.xdata$x:00003209                 db    0
.xdata$x:0000320A                 db    0
.xdata$x:0000320B                 db    0
.xdata$x:0000320C                 db    0
.xdata$x:0000320D                 db    0
.xdata$x:0000320E                 db    0
.xdata$x:0000320F                 db    0
.xdata$x:00003210                 db    0
.xdata$x:00003211                 db    0
.xdata$x:00003212                 db    0
.xdata$x:00003213                 db    0
.xdata$x:00003214                 db    1
.xdata$x:00003215                 db    0
.xdata$x:00003216                 db    0
.xdata$x:00003217                 db    0
.xdata$x:00003218 __unwindtable$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:00003218                                         ; DATA XREF: .xdata$x:00003230o
.xdata$x:00003219                 db 0FFh
.xdata$x:0000321A                 db 0FFh
.xdata$x:0000321B                 db 0FFh
.xdata$x:0000321C                 dd offset __unwindfunclet$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z$0
.xdata$x:00003220                 db 0FFh
.xdata$x:00003221                 db 0FFh
.xdata$x:00003222                 db 0FFh
.xdata$x:00003223                 db 0FFh
.xdata$x:00003224                 dd offset __unwindfunclet$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z$1
.xdata$x:00003228 __ehfuncinfo$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00003228                                         ; DATA XREF: __ehhandler$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z+11o
.xdata$x:00003229                 db    5
.xdata$x:0000322A                 db  93h ; ô
.xdata$x:0000322B                 db  19h
.xdata$x:0000322C                 db    2
.xdata$x:0000322D                 db    0
.xdata$x:0000322E                 db    0
.xdata$x:0000322F                 db    0
.xdata$x:00003230                 dd offset __unwindtable$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z
.xdata$x:00003234                 db    0
.xdata$x:00003235                 db    0
.xdata$x:00003236                 db    0
.xdata$x:00003237                 db    0
.xdata$x:00003238                 db    0
.xdata$x:00003239                 db    0
.xdata$x:0000323A                 db    0
.xdata$x:0000323B                 db    0
.xdata$x:0000323C                 db    0
.xdata$x:0000323D                 db    0
.xdata$x:0000323E                 db    0
.xdata$x:0000323F                 db    0
.xdata$x:00003240                 db    0
.xdata$x:00003241                 db    0
.xdata$x:00003242                 db    0
.xdata$x:00003243                 db    0
.xdata$x:00003244                 db    0
.xdata$x:00003245                 db    0
.xdata$x:00003246                 db    0
.xdata$x:00003247                 db    0
.xdata$x:00003248                 db    1
.xdata$x:00003249                 db    0
.xdata$x:0000324A                 db    0
.xdata$x:0000324B                 db    0
.xdata$x:0000324C __unwindtable$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:0000324C                                         ; DATA XREF: .xdata$x:0000325Co
.xdata$x:0000324D                 db 0FFh
.xdata$x:0000324E                 db 0FFh
.xdata$x:0000324F                 db 0FFh
.xdata$x:00003250                 dd offset __unwindfunclet$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$0
.xdata$x:00003254 __ehfuncinfo$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00003254                                         ; DATA XREF: __ehhandler$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z+11o
.xdata$x:00003255                 db    5
.xdata$x:00003256                 db  93h ; ô
.xdata$x:00003257                 db  19h
.xdata$x:00003258                 db    1
.xdata$x:00003259                 db    0
.xdata$x:0000325A                 db    0
.xdata$x:0000325B                 db    0
.xdata$x:0000325C                 dd offset __unwindtable$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
.xdata$x:00003260                 db    0
.xdata$x:00003261                 db    0
.xdata$x:00003262                 db    0
.xdata$x:00003263                 db    0
.xdata$x:00003264                 db    0
.xdata$x:00003265                 db    0
.xdata$x:00003266                 db    0
.xdata$x:00003267                 db    0
.xdata$x:00003268                 db    0
.xdata$x:00003269                 db    0
.xdata$x:0000326A                 db    0
.xdata$x:0000326B                 db    0
.xdata$x:0000326C                 db    0
.xdata$x:0000326D                 db    0
.xdata$x:0000326E                 db    0
.xdata$x:0000326F                 db    0
.xdata$x:00003270                 db    0
.xdata$x:00003271                 db    0
.xdata$x:00003272                 db    0
.xdata$x:00003273                 db    0
.xdata$x:00003274                 db    1
.xdata$x:00003275                 db    0
.xdata$x:00003276                 db    0
.xdata$x:00003277                 db    0
.xdata$x:00003278 __catchsym$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$3 dd offset _k_LZMA_Name
.xdata$x:00003278                                         ; DATA XREF: .xdata$x:00003298o
.xdata$x:0000327C                 db    0
.xdata$x:0000327D                 db    0
.xdata$x:0000327E                 db    0
.xdata$x:0000327F                 db    0
.xdata$x:00003280                 db    0
.xdata$x:00003281                 db    0
.xdata$x:00003282                 db    0
.xdata$x:00003283                 db    0
.xdata$x:00003284                 dd offset __catch$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0
.xdata$x:00003288 __tryblocktable$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z db    0
.xdata$x:00003288                                         ; DATA XREF: .xdata$x:000032C4o
.xdata$x:00003289                 db    0
.xdata$x:0000328A                 db    0
.xdata$x:0000328B                 db    0
.xdata$x:0000328C                 db    1
.xdata$x:0000328D                 db    0
.xdata$x:0000328E                 db    0
.xdata$x:0000328F                 db    0
.xdata$x:00003290                 db    2
.xdata$x:00003291                 db    0
.xdata$x:00003292                 db    0
.xdata$x:00003293                 db    0
.xdata$x:00003294                 db    1
.xdata$x:00003295                 db    0
.xdata$x:00003296                 db    0
.xdata$x:00003297                 db    0
.xdata$x:00003298                 dd offset __catchsym$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$3
.xdata$x:0000329C __unwindtable$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z db 0FFh
.xdata$x:0000329C                                         ; DATA XREF: .xdata$x:000032BCo
.xdata$x:0000329D                 db 0FFh
.xdata$x:0000329E                 db 0FFh
.xdata$x:0000329F                 db 0FFh
.xdata$x:000032A0                 db    0
.xdata$x:000032A1                 db    0
.xdata$x:000032A2                 db    0
.xdata$x:000032A3                 db    0
.xdata$x:000032A4                 db    0
.xdata$x:000032A5                 db    0
.xdata$x:000032A6                 db    0
.xdata$x:000032A7                 db    0
.xdata$x:000032A8                 dd offset __unwindfunclet$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$2
.xdata$x:000032AC                 db 0FFh
.xdata$x:000032AD                 db 0FFh
.xdata$x:000032AE                 db 0FFh
.xdata$x:000032AF                 db 0FFh
.xdata$x:000032B0                 db    0
.xdata$x:000032B1                 db    0
.xdata$x:000032B2                 db    0
.xdata$x:000032B3                 db    0
.xdata$x:000032B4 __ehfuncinfo$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z db  22h ; "
.xdata$x:000032B4                                         ; DATA XREF: __ehhandler$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z+1Eo
.xdata$x:000032B5                 db    5
.xdata$x:000032B6                 db  93h ; ô
.xdata$x:000032B7                 db  19h
.xdata$x:000032B8                 db    3
.xdata$x:000032B9                 db    0
.xdata$x:000032BA                 db    0
.xdata$x:000032BB                 db    0
.xdata$x:000032BC                 dd offset __unwindtable$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.xdata$x:000032C0                 db    1
.xdata$x:000032C1                 db    0
.xdata$x:000032C2                 db    0
.xdata$x:000032C3                 db    0
.xdata$x:000032C4                 dd offset __tryblocktable$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.xdata$x:000032C8                 db    0
.xdata$x:000032C9                 db    0
.xdata$x:000032CA                 db    0
.xdata$x:000032CB                 db    0
.xdata$x:000032CC                 db    0
.xdata$x:000032CD                 db    0
.xdata$x:000032CE                 db    0
.xdata$x:000032CF                 db    0
.xdata$x:000032D0                 db    0
.xdata$x:000032D1                 db    0
.xdata$x:000032D2                 db    0
.xdata$x:000032D3                 db    0
.xdata$x:000032D4                 db    1
.xdata$x:000032D5                 db    0
.xdata$x:000032D6                 db    0
.xdata$x:000032D7                 db    0
.xdata$x:000032D7 _xdata$x        ends
.xdata$x:000032D7
.text:000032D8 ; ===========================================================================
.text:000032D8
.text:000032D8 ; Segment type: Pure code
.text:000032D8 ; Segment permissions: Read/Execute
.text:000032D8 _text           segment para public 'CODE' use32
.text:000032D8                 assume cs:_text
.text:000032D8                 ;org 32D8h
.text:000032D8 ; COMDAT (pick any)
.text:000032D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000032D8
.text:000032D8 ; =============== S U B R O U T I N E =======================================
.text:000032D8
.text:000032D8 ; Attributes: bp-based frame
.text:000032D8
.text:000032D8 ; void __thiscall CProps::AddProp_Ascii(CProps *this, unsigned __int32, const char *)
.text:000032D8                 public ?AddProp_Ascii@CProps@@QAEXKPBD@Z
.text:000032D8 ?AddProp_Ascii@CProps@@QAEXKPBD@Z proc near
.text:000032D8                                         ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+75p
.text:000032D8
.text:000032D8 var_8           = dword ptr -8
.text:000032D8 var_4           = dword ptr -4
.text:000032D8 arg_0           = dword ptr  8
.text:000032D8 arg_4           = dword ptr  0Ch
.text:000032D8
.text:000032D8                 push    ebp
.text:000032D9                 mov     ebp, esp
.text:000032DB                 sub     esp, 8
.text:000032DE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000032E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000032EC                 mov     [ebp+var_4], ecx
.text:000032EF                 mov     ecx, [ebp+var_4]
.text:000032F2                 call    ?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ ; CObjectVector<CProp>::AddNew(void)
.text:000032F7                 mov     [ebp+var_8], eax
.text:000032FA                 mov     eax, [ebp+var_8]
.text:000032FD                 mov     byte ptr [eax+4], 1
.text:00003301                 mov     ecx, [ebp+var_8]
.text:00003304                 mov     edx, [ebp+arg_0]
.text:00003307                 mov     [ecx], edx
.text:00003309                 mov     eax, [ebp+arg_4]
.text:0000330C                 push    eax
.text:0000330D                 mov     ecx, [ebp+var_8]
.text:00003310                 add     ecx, 8
.text:00003313                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:00003318                 add     esp, 8
.text:0000331B                 cmp     ebp, esp
.text:0000331D                 call    __RTC_CheckEsp
.text:00003322                 mov     esp, ebp
.text:00003324                 pop     ebp
.text:00003325                 retn    8
.text:00003325 ?AddProp_Ascii@CProps@@QAEXKPBD@Z endp
.text:00003325
.text:00003325 _text           ends
.text:00003325
.text:00003328 ; ===========================================================================
.text:00003328
.text:00003328 ; Segment type: Pure code
.text:00003328 ; Segment permissions: Read/Execute
.text:00003328 _text           segment para public 'CODE' use32
.text:00003328                 assume cs:_text
.text:00003328                 ;org 3328h
.text:00003328 ; COMDAT (pick any)
.text:00003328                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003328
.text:00003328 ; =============== S U B R O U T I N E =======================================
.text:00003328
.text:00003328 ; Attributes: bp-based frame
.text:00003328
.text:00003328 ; void __thiscall CMethodProps::AddProp_Level(CMethodProps *this, unsigned int)
.text:00003328                 public ?AddProp_Level@CMethodProps@@QAEXI@Z
.text:00003328 ?AddProp_Level@CMethodProps@@QAEXI@Z proc near
.text:00003328                                         ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+7Fp
.text:00003328
.text:00003328 var_4           = dword ptr -4
.text:00003328 arg_0           = dword ptr  8
.text:00003328
.text:00003328                 push    ebp
.text:00003329                 mov     ebp, esp
.text:0000332B                 push    ecx
.text:0000332C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003333                 mov     [ebp+var_4], ecx
.text:00003336                 mov     eax, [ebp+arg_0]
.text:00003339                 push    eax             ; unsigned int
.text:0000333A                 push    0Fh             ; unsigned __int32
.text:0000333C                 mov     ecx, [ebp+var_4] ; this
.text:0000333F                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00003344                 add     esp, 4
.text:00003347                 cmp     ebp, esp
.text:00003349                 call    __RTC_CheckEsp
.text:0000334E                 mov     esp, ebp
.text:00003350                 pop     ebp
.text:00003351                 retn    4
.text:00003351 ?AddProp_Level@CMethodProps@@QAEXI@Z endp
.text:00003351
.text:00003351 _text           ends
.text:00003351
.text:00003354 ; ===========================================================================
.text:00003354
.text:00003354 ; Segment type: Pure code
.text:00003354 ; Segment permissions: Read/Execute
.text:00003354 _text           segment para public 'CODE' use32
.text:00003354                 assume cs:_text
.text:00003354                 ;org 3354h
.text:00003354 ; COMDAT (pick any)
.text:00003354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003354
.text:00003354 ; =============== S U B R O U T I N E =======================================
.text:00003354
.text:00003354 ; Attributes: bp-based frame
.text:00003354
.text:00003354 ; void __thiscall CMethodProps::AddProp_NumThreads(CMethodProps *this, unsigned int)
.text:00003354                 public ?AddProp_NumThreads@CMethodProps@@QAEXI@Z
.text:00003354 ?AddProp_NumThreads@CMethodProps@@QAEXI@Z proc near
.text:00003354                                         ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+A7p
.text:00003354
.text:00003354 var_4           = dword ptr -4
.text:00003354 arg_0           = dword ptr  8
.text:00003354
.text:00003354                 push    ebp
.text:00003355                 mov     ebp, esp
.text:00003357                 push    ecx
.text:00003358                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000335F                 mov     [ebp+var_4], ecx
.text:00003362                 mov     eax, [ebp+arg_0]
.text:00003365                 push    eax             ; unsigned int
.text:00003366                 push    0Dh             ; unsigned __int32
.text:00003368                 mov     ecx, [ebp+var_4] ; this
.text:0000336B                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00003370                 add     esp, 4
.text:00003373                 cmp     ebp, esp
.text:00003375                 call    __RTC_CheckEsp
.text:0000337A                 mov     esp, ebp
.text:0000337C                 pop     ebp
.text:0000337D                 retn    4
.text:0000337D ?AddProp_NumThreads@CMethodProps@@QAEXI@Z endp
.text:0000337D
.text:0000337D _text           ends
.text:0000337D
.text:00003380 ; ===========================================================================
.text:00003380
.text:00003380 ; Segment type: Pure code
.text:00003380 ; Segment permissions: Read/Execute
.text:00003380 _text           segment para public 'CODE' use32
.text:00003380                 assume cs:_text
.text:00003380                 ;org 3380h
.text:00003380 ; COMDAT (pick any)
.text:00003380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003380
.text:00003380 ; =============== S U B R O U T I N E =======================================
.text:00003380
.text:00003380 ; Attributes: bp-based frame
.text:00003380
.text:00003380 ; public: __thiscall COneMethodInfo::COneMethodInfo(void)
.text:00003380                 public ??0COneMethodInfo@@QAE@XZ
.text:00003380 ??0COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+4Fp
.text:00003380                                         ; CObjectVector<COneMethodInfo>::AddNew(void)+59p
.text:00003380
.text:00003380 var_10          = dword ptr -10h
.text:00003380 var_C           = dword ptr -0Ch
.text:00003380 var_4           = dword ptr -4
.text:00003380
.text:00003380                 push    ebp
.text:00003381                 mov     ebp, esp
.text:00003383                 push    0FFFFFFFFh
.text:00003385                 push    offset __ehhandler$??0COneMethodInfo@@QAE@XZ
.text:0000338A                 mov     eax, large fs:0
.text:00003390                 push    eax
.text:00003391                 push    ecx
.text:00003392                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003399                 mov     eax, dword ptr ds:___security_cookie
.text:0000339E                 xor     eax, ebp
.text:000033A0                 push    eax
.text:000033A1                 lea     eax, [ebp+var_C]
.text:000033A4                 mov     large fs:0, eax
.text:000033AA                 mov     [ebp+var_10], ecx
.text:000033AD                 mov     ecx, [ebp+var_10]
.text:000033B0                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:000033B5                 mov     [ebp+var_4], 0
.text:000033BC                 mov     ecx, [ebp+var_10]
.text:000033BF                 add     ecx, 0Ch
.text:000033C2                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000033C7                 mov     byte ptr [ebp+var_4], 1
.text:000033CB                 mov     ecx, [ebp+var_10]
.text:000033CE                 add     ecx, 18h
.text:000033D1                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000033D6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000033DD                 mov     eax, [ebp+var_10]
.text:000033E0                 mov     ecx, [ebp+var_C]
.text:000033E3                 mov     large fs:0, ecx
.text:000033EA                 pop     ecx
.text:000033EB                 add     esp, 10h
.text:000033EE                 cmp     ebp, esp
.text:000033F0                 call    __RTC_CheckEsp
.text:000033F5                 mov     esp, ebp
.text:000033F7                 pop     ebp
.text:000033F8                 retn
.text:000033F8 ??0COneMethodInfo@@QAE@XZ endp
.text:000033F8
.text:000033F8 ; ---------------------------------------------------------------------------
.text:000033F9                 align 4
.text:000033F9 _text           ends
.text:000033F9
.text$x:000033FC ; ===========================================================================
.text$x:000033FC
.text$x:000033FC ; Segment type: Pure code
.text$x:000033FC ; Segment permissions: Read/Execute
.text$x:000033FC _text$x         segment para public 'CODE' use32
.text$x:000033FC                 assume cs:_text$x
.text$x:000033FC                 ;org 33FCh
.text$x:000033FC ; COMDAT (pick associative to section at 3380)
.text$x:000033FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000033FC
.text$x:000033FC ; =============== S U B R O U T I N E =======================================
.text$x:000033FC
.text$x:000033FC
.text$x:000033FC __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 proc near
.text$x:000033FC                                         ; DATA XREF: .xdata$x:00003430o
.text$x:000033FC                 mov     ecx, [ebp-10h]  ; this
.text$x:000033FF                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:000033FF __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 endp
.text$x:000033FF
.text$x:00003404
.text$x:00003404 ; =============== S U B R O U T I N E =======================================
.text$x:00003404
.text$x:00003404
.text$x:00003404 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 proc near
.text$x:00003404                                         ; DATA XREF: .xdata$x:00003438o
.text$x:00003404                 mov     ecx, [ebp-10h]
.text$x:00003407                 add     ecx, 0Ch        ; this
.text$x:0000340A                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000340A __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 endp
.text$x:0000340A
.text$x:0000340F
.text$x:0000340F ; =============== S U B R O U T I N E =======================================
.text$x:0000340F
.text$x:0000340F
.text$x:0000340F __ehhandler$??0COneMethodInfo@@QAE@XZ proc near
.text$x:0000340F                                         ; DATA XREF: COneMethodInfo::COneMethodInfo(void)+5o
.text$x:0000340F
.text$x:0000340F arg_4           = dword ptr  8
.text$x:0000340F
.text$x:0000340F                 mov     edx, [esp+arg_4]
.text$x:00003413                 lea     eax, [edx+0Ch]
.text$x:00003416                 mov     ecx, [edx-8]
.text$x:00003419                 xor     ecx, eax
.text$x:0000341B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003420                 mov     eax, offset __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
.text$x:00003425                 jmp     ___CxxFrameHandler3
.text$x:00003425 __ehhandler$??0COneMethodInfo@@QAE@XZ endp
.text$x:00003425
.text$x:00003425 ; ---------------------------------------------------------------------------
.text$x:0000342A                 align 4
.text$x:0000342A _text$x         ends
.text$x:0000342A
.xdata$x:0000342C ; ===========================================================================
.xdata$x:0000342C
.xdata$x:0000342C ; Segment type: Pure data
.xdata$x:0000342C ; Segment permissions: Read
.xdata$x:0000342C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000342C                 assume cs:_xdata$x
.xdata$x:0000342C                 ;org 342Ch
.xdata$x:0000342C ; COMDAT (pick associative to section at 3380)
.xdata$x:0000342C __unwindtable$??0COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:0000342C                                         ; DATA XREF: .xdata$x:00003444o
.xdata$x:0000342D                 db 0FFh
.xdata$x:0000342E                 db 0FFh
.xdata$x:0000342F                 db 0FFh
.xdata$x:00003430                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
.xdata$x:00003434                 align 8
.xdata$x:00003438                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
.xdata$x:0000343C __ehfuncinfo$??0COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:0000343C                                         ; DATA XREF: __ehhandler$??0COneMethodInfo@@QAE@XZ+11o
.xdata$x:0000343D                 db    5
.xdata$x:0000343E                 db  93h ; ô
.xdata$x:0000343F                 db  19h
.xdata$x:00003440                 db    2
.xdata$x:00003441                 db    0
.xdata$x:00003442                 db    0
.xdata$x:00003443                 db    0
.xdata$x:00003444                 dd offset __unwindtable$??0COneMethodInfo@@QAE@XZ
.xdata$x:00003448                 db    0
.xdata$x:00003449                 db    0
.xdata$x:0000344A                 db    0
.xdata$x:0000344B                 db    0
.xdata$x:0000344C                 db    0
.xdata$x:0000344D                 db    0
.xdata$x:0000344E                 db    0
.xdata$x:0000344F                 db    0
.xdata$x:00003450                 db    0
.xdata$x:00003451                 db    0
.xdata$x:00003452                 db    0
.xdata$x:00003453                 db    0
.xdata$x:00003454                 db    0
.xdata$x:00003455                 db    0
.xdata$x:00003456                 db    0
.xdata$x:00003457                 db    0
.xdata$x:00003458                 db    0
.xdata$x:00003459                 db    0
.xdata$x:0000345A                 db    0
.xdata$x:0000345B                 db    0
.xdata$x:0000345C                 db    1
.xdata$x:0000345D                 db    0
.xdata$x:0000345E                 db    0
.xdata$x:0000345F                 db    0
.xdata$x:0000345F _xdata$x        ends
.xdata$x:0000345F
.text:00003460 ; ===========================================================================
.text:00003460
.text:00003460 ; Segment type: Pure code
.text:00003460 ; Segment permissions: Read/Execute
.text:00003460 _text           segment para public 'CODE' use32
.text:00003460                 assume cs:_text
.text:00003460                 ;org 3460h
.text:00003460 ; COMDAT (pick any)
.text:00003460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003460
.text:00003460 ; =============== S U B R O U T I N E =======================================
.text:00003460
.text:00003460 ; Attributes: bp-based frame
.text:00003460
.text:00003460 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00003460                 public ??1AString@@QAE@XZ
.text:00003460 ??1AString@@QAE@XZ proc near            ; CODE XREF: __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1+6j
.text:00003460                                         ; COneMethodInfo::~COneMethodInfo(void)+49p ...
.text:00003460
.text:00003460 var_8           = dword ptr -8
.text:00003460 var_4           = dword ptr -4
.text:00003460
.text:00003460                 push    ebp
.text:00003461                 mov     ebp, esp
.text:00003463                 sub     esp, 8
.text:00003466                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000346D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003474                 mov     [ebp+var_4], ecx
.text:00003477                 mov     eax, [ebp+var_4]
.text:0000347A                 mov     ecx, [eax]
.text:0000347C                 mov     [ebp+var_8], ecx
.text:0000347F                 mov     edx, [ebp+var_8]
.text:00003482                 push    edx             ; void *
.text:00003483                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003488                 add     esp, 4
.text:0000348B                 add     esp, 8
.text:0000348E                 cmp     ebp, esp
.text:00003490                 call    __RTC_CheckEsp
.text:00003495                 mov     esp, ebp
.text:00003497                 pop     ebp
.text:00003498                 retn
.text:00003498 ??1AString@@QAE@XZ endp
.text:00003498
.text:00003498 ; ---------------------------------------------------------------------------
.text:00003499                 align 4
.text:00003499 _text           ends
.text:00003499
.text:0000349C ; ===========================================================================
.text:0000349C
.text:0000349C ; Segment type: Pure code
.text:0000349C ; Segment permissions: Read/Execute
.text:0000349C _text           segment para public 'CODE' use32
.text:0000349C                 assume cs:_text
.text:0000349C                 ;org 349Ch
.text:0000349C ; COMDAT (pick any)
.text:0000349C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000349C
.text:0000349C ; =============== S U B R O U T I N E =======================================
.text:0000349C
.text:0000349C ; Attributes: bp-based frame
.text:0000349C
.text:0000349C ; _DWORD __thiscall COneMethodInfo::~COneMethodInfo(COneMethodInfo *__hidden this)
.text:0000349C                 public ??1COneMethodInfo@@QAE@XZ
.text:0000349C ??1COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+D4p
.text:0000349C                                         ; __unwindfunclet$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z$0+3j ...
.text:0000349C
.text:0000349C var_10          = dword ptr -10h
.text:0000349C var_C           = dword ptr -0Ch
.text:0000349C var_4           = dword ptr -4
.text:0000349C
.text:0000349C                 push    ebp
.text:0000349D                 mov     ebp, esp
.text:0000349F                 push    0FFFFFFFFh
.text:000034A1                 push    offset __ehhandler$??1COneMethodInfo@@QAE@XZ
.text:000034A6                 mov     eax, large fs:0
.text:000034AC                 push    eax
.text:000034AD                 push    ecx
.text:000034AE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000034B5                 mov     eax, dword ptr ds:___security_cookie
.text:000034BA                 xor     eax, ebp
.text:000034BC                 push    eax
.text:000034BD                 lea     eax, [ebp+var_C]
.text:000034C0                 mov     large fs:0, eax
.text:000034C6                 mov     [ebp+var_10], ecx
.text:000034C9                 mov     [ebp+var_4], 1
.text:000034D0                 mov     ecx, [ebp+var_10]
.text:000034D3                 add     ecx, 18h        ; this
.text:000034D6                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000034DB                 mov     byte ptr [ebp+var_4], 0
.text:000034DF                 mov     ecx, [ebp+var_10]
.text:000034E2                 add     ecx, 0Ch        ; this
.text:000034E5                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000034EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000034F1                 mov     ecx, [ebp+var_10] ; this
.text:000034F4                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:000034F9                 mov     ecx, [ebp+var_C]
.text:000034FC                 mov     large fs:0, ecx
.text:00003503                 pop     ecx
.text:00003504                 add     esp, 10h
.text:00003507                 cmp     ebp, esp
.text:00003509                 call    __RTC_CheckEsp
.text:0000350E                 mov     esp, ebp
.text:00003510                 pop     ebp
.text:00003511                 retn
.text:00003511 ??1COneMethodInfo@@QAE@XZ endp
.text:00003511
.text:00003511 ; ---------------------------------------------------------------------------
.text:00003512                 align 4
.text:00003512 _text           ends
.text:00003512
.text$x:00003514 ; ===========================================================================
.text$x:00003514
.text$x:00003514 ; Segment type: Pure code
.text$x:00003514 ; Segment permissions: Read/Execute
.text$x:00003514 _text$x         segment para public 'CODE' use32
.text$x:00003514                 assume cs:_text$x
.text$x:00003514                 ;org 3514h
.text$x:00003514 ; COMDAT (pick associative to section at 349C)
.text$x:00003514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003514
.text$x:00003514 ; =============== S U B R O U T I N E =======================================
.text$x:00003514
.text$x:00003514
.text$x:00003514 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 proc near
.text$x:00003514                                         ; DATA XREF: .xdata$x:00003548o
.text$x:00003514                 mov     ecx, [ebp-10h]  ; this
.text$x:00003517                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:00003517 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 endp
.text$x:00003517
.text$x:0000351C
.text$x:0000351C ; =============== S U B R O U T I N E =======================================
.text$x:0000351C
.text$x:0000351C
.text$x:0000351C __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 proc near
.text$x:0000351C                                         ; DATA XREF: .xdata$x:00003550o
.text$x:0000351C                 mov     ecx, [ebp-10h]
.text$x:0000351F                 add     ecx, 0Ch        ; this
.text$x:00003522                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003522 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 endp
.text$x:00003522
.text$x:00003527
.text$x:00003527 ; =============== S U B R O U T I N E =======================================
.text$x:00003527
.text$x:00003527
.text$x:00003527 __ehhandler$??1COneMethodInfo@@QAE@XZ proc near
.text$x:00003527                                         ; DATA XREF: COneMethodInfo::~COneMethodInfo(void)+5o
.text$x:00003527
.text$x:00003527 arg_4           = dword ptr  8
.text$x:00003527
.text$x:00003527                 mov     edx, [esp+arg_4]
.text$x:0000352B                 lea     eax, [edx+0Ch]
.text$x:0000352E                 mov     ecx, [edx-8]
.text$x:00003531                 xor     ecx, eax
.text$x:00003533                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003538                 mov     eax, offset __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
.text$x:0000353D                 jmp     ___CxxFrameHandler3
.text$x:0000353D __ehhandler$??1COneMethodInfo@@QAE@XZ endp
.text$x:0000353D
.text$x:0000353D ; ---------------------------------------------------------------------------
.text$x:00003542                 align 4
.text$x:00003542 _text$x         ends
.text$x:00003542
.xdata$x:00003544 ; ===========================================================================
.xdata$x:00003544
.xdata$x:00003544 ; Segment type: Pure data
.xdata$x:00003544 ; Segment permissions: Read
.xdata$x:00003544 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003544                 assume cs:_xdata$x
.xdata$x:00003544                 ;org 3544h
.xdata$x:00003544 ; COMDAT (pick associative to section at 349C)
.xdata$x:00003544 __unwindtable$??1COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:00003544                                         ; DATA XREF: .xdata$x:0000355Co
.xdata$x:00003545                 db 0FFh
.xdata$x:00003546                 db 0FFh
.xdata$x:00003547                 db 0FFh
.xdata$x:00003548                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
.xdata$x:0000354C                 align 10h
.xdata$x:00003550                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
.xdata$x:00003554 __ehfuncinfo$??1COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:00003554                                         ; DATA XREF: __ehhandler$??1COneMethodInfo@@QAE@XZ+11o
.xdata$x:00003555                 db    5
.xdata$x:00003556                 db  93h ; ô
.xdata$x:00003557                 db  19h
.xdata$x:00003558                 db    2
.xdata$x:00003559                 db    0
.xdata$x:0000355A                 db    0
.xdata$x:0000355B                 db    0
.xdata$x:0000355C                 dd offset __unwindtable$??1COneMethodInfo@@QAE@XZ
.xdata$x:00003560                 db    0
.xdata$x:00003561                 db    0
.xdata$x:00003562                 db    0
.xdata$x:00003563                 db    0
.xdata$x:00003564                 db    0
.xdata$x:00003565                 db    0
.xdata$x:00003566                 db    0
.xdata$x:00003567                 db    0
.xdata$x:00003568                 db    0
.xdata$x:00003569                 db    0
.xdata$x:0000356A                 db    0
.xdata$x:0000356B                 db    0
.xdata$x:0000356C                 db    0
.xdata$x:0000356D                 db    0
.xdata$x:0000356E                 db    0
.xdata$x:0000356F                 db    0
.xdata$x:00003570                 db    0
.xdata$x:00003571                 db    0
.xdata$x:00003572                 db    0
.xdata$x:00003573                 db    0
.xdata$x:00003574                 db    1
.xdata$x:00003575                 db    0
.xdata$x:00003576                 db    0
.xdata$x:00003577                 db    0
.xdata$x:00003577 _xdata$x        ends
.xdata$x:00003577
.text:00003578 ; ===========================================================================
.text:00003578
.text:00003578 ; Segment type: Pure code
.text:00003578 ; Segment permissions: Read/Execute
.text:00003578 _text           segment para public 'CODE' use32
.text:00003578                 assume cs:_text
.text:00003578                 ;org 3578h
.text:00003578 ; COMDAT (pick any)
.text:00003578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003578
.text:00003578 ; =============== S U B R O U T I N E =======================================
.text:00003578
.text:00003578 ; Attributes: bp-based frame
.text:00003578
.text:00003578 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00003578                 public ??1UString@@QAE@XZ
.text:00003578 ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+20Bp
.text:00003578                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+273p ...
.text:00003578
.text:00003578 var_8           = dword ptr -8
.text:00003578 var_4           = dword ptr -4
.text:00003578
.text:00003578                 push    ebp
.text:00003579                 mov     ebp, esp
.text:0000357B                 sub     esp, 8
.text:0000357E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003585                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000358C                 mov     [ebp+var_4], ecx
.text:0000358F                 mov     eax, [ebp+var_4]
.text:00003592                 mov     ecx, [eax]
.text:00003594                 mov     [ebp+var_8], ecx
.text:00003597                 mov     edx, [ebp+var_8]
.text:0000359A                 push    edx             ; void *
.text:0000359B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000035A0                 add     esp, 4
.text:000035A3                 add     esp, 8
.text:000035A6                 cmp     ebp, esp
.text:000035A8                 call    __RTC_CheckEsp
.text:000035AD                 mov     esp, ebp
.text:000035AF                 pop     ebp
.text:000035B0                 retn
.text:000035B0 ??1UString@@QAE@XZ endp
.text:000035B0
.text:000035B0 ; ---------------------------------------------------------------------------
.text:000035B1                 align 4
.text:000035B1 _text           ends
.text:000035B1
.text:000035B4 ; ===========================================================================
.text:000035B4
.text:000035B4 ; Segment type: Pure code
.text:000035B4 ; Segment permissions: Read/Execute
.text:000035B4 _text           segment para public 'CODE' use32
.text:000035B4                 assume cs:_text
.text:000035B4                 ;org 35B4h
.text:000035B4 ; COMDAT (pick any)
.text:000035B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035B4
.text:000035B4 ; =============== S U B R O U T I N E =======================================
.text:000035B4
.text:000035B4 ; Attributes: bp-based frame
.text:000035B4
.text:000035B4 ; public: __thiscall CMethodProps::CMethodProps(void)
.text:000035B4                 public ??0CMethodProps@@QAE@XZ
.text:000035B4 ??0CMethodProps@@QAE@XZ proc near       ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+30p
.text:000035B4                                         ; NArchive::N7z::CMethodFull::CMethodFull(void)+11p
.text:000035B4
.text:000035B4 var_4           = dword ptr -4
.text:000035B4
.text:000035B4                 push    ebp
.text:000035B5                 mov     ebp, esp
.text:000035B7                 push    ecx
.text:000035B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035BF                 mov     [ebp+var_4], ecx
.text:000035C2                 mov     ecx, [ebp+var_4]
.text:000035C5                 call    ??0CProps@@QAE@XZ ; CProps::CProps(void)
.text:000035CA                 mov     eax, [ebp+var_4]
.text:000035CD                 add     esp, 4
.text:000035D0                 cmp     ebp, esp
.text:000035D2                 call    __RTC_CheckEsp
.text:000035D7                 mov     esp, ebp
.text:000035D9                 pop     ebp
.text:000035DA                 retn
.text:000035DA ??0CMethodProps@@QAE@XZ endp
.text:000035DA
.text:000035DA ; ---------------------------------------------------------------------------
.text:000035DB                 align 4
.text:000035DB _text           ends
.text:000035DB
.text:000035DC ; ===========================================================================
.text:000035DC
.text:000035DC ; Segment type: Pure code
.text:000035DC ; Segment permissions: Read/Execute
.text:000035DC _text           segment para public 'CODE' use32
.text:000035DC                 assume cs:_text
.text:000035DC                 ;org 35DCh
.text:000035DC ; COMDAT (pick any)
.text:000035DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035DC
.text:000035DC ; =============== S U B R O U T I N E =======================================
.text:000035DC
.text:000035DC ; Attributes: bp-based frame
.text:000035DC
.text:000035DC ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:000035DC                 public ??1CMethodProps@@QAE@XZ
.text:000035DC ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0+3j
.text:000035DC                                         ; COneMethodInfo::~COneMethodInfo(void)+58p ...
.text:000035DC
.text:000035DC var_4           = dword ptr -4
.text:000035DC
.text:000035DC                 push    ebp
.text:000035DD                 mov     ebp, esp
.text:000035DF                 push    ecx
.text:000035E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035E7                 mov     [ebp+var_4], ecx
.text:000035EA                 mov     ecx, [ebp+var_4] ; this
.text:000035ED                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:000035F2                 add     esp, 4
.text:000035F5                 cmp     ebp, esp
.text:000035F7                 call    __RTC_CheckEsp
.text:000035FC                 mov     esp, ebp
.text:000035FE                 pop     ebp
.text:000035FF                 retn
.text:000035FF ??1CMethodProps@@QAE@XZ endp
.text:000035FF
.text:000035FF _text           ends
.text:000035FF
.text:00003600 ; ===========================================================================
.text:00003600
.text:00003600 ; Segment type: Pure code
.text:00003600 ; Segment permissions: Read/Execute
.text:00003600 _text           segment para public 'CODE' use32
.text:00003600                 assume cs:_text
.text:00003600                 ;org 3600h
.text:00003600 ; COMDAT (pick any)
.text:00003600                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003600
.text:00003600 ; =============== S U B R O U T I N E =======================================
.text:00003600
.text:00003600 ; Attributes: bp-based frame
.text:00003600
.text:00003600 ; public: __thiscall CProps::CProps(void)
.text:00003600                 public ??0CProps@@QAE@XZ
.text:00003600 ??0CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::CMethodProps(void)+11p
.text:00003600
.text:00003600 var_4           = dword ptr -4
.text:00003600
.text:00003600                 push    ebp
.text:00003601                 mov     ebp, esp
.text:00003603                 push    ecx
.text:00003604                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000360B                 mov     [ebp+var_4], ecx
.text:0000360E                 mov     ecx, [ebp+var_4]
.text:00003611                 call    ??0?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::CObjectVector<CProp>(void)
.text:00003616                 mov     eax, [ebp+var_4]
.text:00003619                 add     esp, 4
.text:0000361C                 cmp     ebp, esp
.text:0000361E                 call    __RTC_CheckEsp
.text:00003623                 mov     esp, ebp
.text:00003625                 pop     ebp
.text:00003626                 retn
.text:00003626 ??0CProps@@QAE@XZ endp
.text:00003626
.text:00003626 ; ---------------------------------------------------------------------------
.text:00003627                 align 4
.text:00003627 _text           ends
.text:00003627
.text:00003628 ; ===========================================================================
.text:00003628
.text:00003628 ; Segment type: Pure code
.text:00003628 ; Segment permissions: Read/Execute
.text:00003628 _text           segment para public 'CODE' use32
.text:00003628                 assume cs:_text
.text:00003628                 ;org 3628h
.text:00003628 ; COMDAT (pick any)
.text:00003628                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003628
.text:00003628 ; =============== S U B R O U T I N E =======================================
.text:00003628
.text:00003628 ; Attributes: bp-based frame
.text:00003628
.text:00003628 ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00003628                 public ??1CProps@@QAE@XZ
.text:00003628 ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00003628
.text:00003628 var_4           = dword ptr -4
.text:00003628
.text:00003628                 push    ebp
.text:00003629                 mov     ebp, esp
.text:0000362B                 push    ecx
.text:0000362C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003633                 mov     [ebp+var_4], ecx
.text:00003636                 mov     ecx, [ebp+var_4]
.text:00003639                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:0000363E                 add     esp, 4
.text:00003641                 cmp     ebp, esp
.text:00003643                 call    __RTC_CheckEsp
.text:00003648                 mov     esp, ebp
.text:0000364A                 pop     ebp
.text:0000364B                 retn
.text:0000364B ??1CProps@@QAE@XZ endp
.text:0000364B
.text:0000364B _text           ends
.text:0000364B
.text:0000364C ; ===========================================================================
.text:0000364C
.text:0000364C ; Segment type: Pure code
.text:0000364C ; Segment permissions: Read/Execute
.text:0000364C _text           segment para public 'CODE' use32
.text:0000364C                 assume cs:_text
.text:0000364C                 ;org 364Ch
.text:0000364C ; COMDAT (pick any)
.text:0000364C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000364C
.text:0000364C ; =============== S U B R O U T I N E =======================================
.text:0000364C
.text:0000364C ; Attributes: bp-based frame
.text:0000364C
.text:0000364C ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:0000364C                 public ?IsEmpty@AString@@QBE_NXZ
.text:0000364C ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+9Bp
.text:0000364C                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+111p ...
.text:0000364C
.text:0000364C var_4           = dword ptr -4
.text:0000364C
.text:0000364C                 push    ebp
.text:0000364D                 mov     ebp, esp
.text:0000364F                 push    ecx
.text:00003650                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003657                 mov     [ebp+var_4], ecx
.text:0000365A                 mov     eax, [ebp+var_4]
.text:0000365D                 xor     ecx, ecx
.text:0000365F                 cmp     dword ptr [eax+4], 0
.text:00003663                 setz    cl
.text:00003666                 mov     al, cl
.text:00003668                 mov     esp, ebp
.text:0000366A                 pop     ebp
.text:0000366B                 retn
.text:0000366B ?IsEmpty@AString@@QBE_NXZ endp
.text:0000366B
.text:0000366B _text           ends
.text:0000366B
.text:0000366C ; ===========================================================================
.text:0000366C
.text:0000366C ; Segment type: Pure code
.text:0000366C ; Segment permissions: Read/Execute
.text:0000366C _text           segment para public 'CODE' use32
.text:0000366C                 assume cs:_text
.text:0000366C                 ;org 366Ch
.text:0000366C ; COMDAT (pick any)
.text:0000366C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000366C
.text:0000366C ; =============== S U B R O U T I N E =======================================
.text:0000366C
.text:0000366C ; Attributes: bp-based frame
.text:0000366C
.text:0000366C ; unsigned int __thiscall CMethodProps::Get_Lzma_DicSize(CMethodProps *__hidden this)
.text:0000366C                 public ?Get_Lzma_DicSize@CMethodProps@@QBEIXZ
.text:0000366C ?Get_Lzma_DicSize@CMethodProps@@QBEIXZ proc near
.text:0000366C                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+2B5p
.text:0000366C
.text:0000366C var_10          = dword ptr -10h
.text:0000366C var_C           = dword ptr -0Ch
.text:0000366C var_8           = dword ptr -8
.text:0000366C var_4           = dword ptr -4
.text:0000366C
.text:0000366C                 push    ebp
.text:0000366D                 mov     ebp, esp
.text:0000366F                 sub     esp, 10h
.text:00003672                 mov     eax, 0CCCCCCCCh
.text:00003677                 mov     [ebp+var_10], eax
.text:0000367A                 mov     [ebp+var_C], eax
.text:0000367D                 mov     [ebp+var_8], eax
.text:00003680                 mov     [ebp+var_4], eax
.text:00003683                 mov     [ebp+var_4], ecx
.text:00003686                 push    1               ; unsigned __int32
.text:00003688                 mov     ecx, [ebp+var_4] ; this
.text:0000368B                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:00003690                 mov     [ebp+var_8], eax
.text:00003693                 cmp     [ebp+var_8], 0
.text:00003697                 jl      short loc_36BF
.text:00003699                 mov     eax, [ebp+var_8]
.text:0000369C                 push    eax
.text:0000369D                 mov     ecx, [ebp+var_4]
.text:000036A0                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:000036A5                 movzx   ecx, word ptr [eax+8]
.text:000036A9                 cmp     ecx, 13h
.text:000036AC                 jnz     short loc_36BF
.text:000036AE                 mov     edx, [ebp+var_8]
.text:000036B1                 push    edx
.text:000036B2                 mov     ecx, [ebp+var_4]
.text:000036B5                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:000036BA                 mov     eax, [eax+10h]
.text:000036BD                 jmp     short loc_36FD
.text:000036BF ; ---------------------------------------------------------------------------
.text:000036BF
.text:000036BF loc_36BF:                               ; CODE XREF: CMethodProps::Get_Lzma_DicSize(void)+2Bj
.text:000036BF                                         ; CMethodProps::Get_Lzma_DicSize(void)+40j
.text:000036BF                 mov     ecx, [ebp+var_4] ; this
.text:000036C2                 call    ?GetLevel@CMethodProps@@QBEHXZ ; CMethodProps::GetLevel(void)
.text:000036C7                 mov     [ebp+var_C], eax
.text:000036CA                 cmp     [ebp+var_C], 5
.text:000036CE                 jg      short loc_36E3
.text:000036D0                 mov     eax, [ebp+var_C]
.text:000036D3                 lea     ecx, [eax+eax+0Eh]
.text:000036D7                 mov     edx, 1
.text:000036DC                 shl     edx, cl
.text:000036DE                 mov     [ebp+var_10], edx
.text:000036E1                 jmp     short loc_36FA
.text:000036E3 ; ---------------------------------------------------------------------------
.text:000036E3
.text:000036E3 loc_36E3:                               ; CODE XREF: CMethodProps::Get_Lzma_DicSize(void)+62j
.text:000036E3                 mov     eax, [ebp+var_C]
.text:000036E6                 sub     eax, 6
.text:000036E9                 neg     eax
.text:000036EB                 sbb     eax, eax
.text:000036ED                 and     eax, 2000000h
.text:000036F2                 add     eax, 2000000h
.text:000036F7                 mov     [ebp+var_10], eax
.text:000036FA
.text:000036FA loc_36FA:                               ; CODE XREF: CMethodProps::Get_Lzma_DicSize(void)+75j
.text:000036FA                 mov     eax, [ebp+var_10]
.text:000036FD
.text:000036FD loc_36FD:                               ; CODE XREF: CMethodProps::Get_Lzma_DicSize(void)+51j
.text:000036FD                 add     esp, 10h
.text:00003700                 cmp     ebp, esp
.text:00003702                 call    __RTC_CheckEsp
.text:00003707                 mov     esp, ebp
.text:00003709                 pop     ebp
.text:0000370A                 retn
.text:0000370A ?Get_Lzma_DicSize@CMethodProps@@QBEIXZ endp
.text:0000370A
.text:0000370A ; ---------------------------------------------------------------------------
.text:0000370B                 align 4
.text:0000370B _text           ends
.text:0000370B
.text:0000370C ; ===========================================================================
.text:0000370C
.text:0000370C ; Segment type: Pure code
.text:0000370C ; Segment permissions: Read/Execute
.text:0000370C _text           segment para public 'CODE' use32
.text:0000370C                 assume cs:_text
.text:0000370C                 ;org 370Ch
.text:0000370C ; COMDAT (pick any)
.text:0000370C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000370C
.text:0000370C ; =============== S U B R O U T I N E =======================================
.text:0000370C
.text:0000370C ; Attributes: bp-based frame
.text:0000370C
.text:0000370C ; unsigned int __thiscall CMethodProps::Get_BZip2_BlockSize(CMethodProps *__hidden this)
.text:0000370C                 public ?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ
.text:0000370C ?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ proc near
.text:0000370C                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+2D8p
.text:0000370C
.text:0000370C var_20          = dword ptr -20h
.text:0000370C var_1C          = dword ptr -1Ch
.text:0000370C var_18          = dword ptr -18h
.text:0000370C var_14          = dword ptr -14h
.text:0000370C var_10          = dword ptr -10h
.text:0000370C var_C           = dword ptr -0Ch
.text:0000370C var_8           = dword ptr -8
.text:0000370C var_4           = dword ptr -4
.text:0000370C
.text:0000370C                 push    ebp
.text:0000370D                 mov     ebp, esp
.text:0000370F                 sub     esp, 20h
.text:00003712                 mov     eax, 0CCCCCCCCh
.text:00003717                 mov     [ebp+var_20], eax
.text:0000371A                 mov     [ebp+var_1C], eax
.text:0000371D                 mov     [ebp+var_18], eax
.text:00003720                 mov     [ebp+var_14], eax
.text:00003723                 mov     [ebp+var_10], eax
.text:00003726                 mov     [ebp+var_C], eax
.text:00003729                 mov     [ebp+var_8], eax
.text:0000372C                 mov     [ebp+var_4], eax
.text:0000372F                 mov     [ebp+var_4], ecx
.text:00003732                 push    1               ; unsigned __int32
.text:00003734                 mov     ecx, [ebp+var_4] ; this
.text:00003737                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:0000373C                 mov     [ebp+var_8], eax
.text:0000373F                 cmp     [ebp+var_8], 0
.text:00003743                 jl      short loc_379F
.text:00003745                 mov     eax, [ebp+var_8]
.text:00003748                 push    eax
.text:00003749                 mov     ecx, [ebp+var_4]
.text:0000374C                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00003751                 movzx   ecx, word ptr [eax+8]
.text:00003755                 cmp     ecx, 13h
.text:00003758                 jnz     short loc_379F
.text:0000375A                 mov     edx, [ebp+var_8]
.text:0000375D                 push    edx
.text:0000375E                 mov     ecx, [ebp+var_4]
.text:00003761                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00003766                 mov     eax, [eax+10h]
.text:00003769                 mov     [ebp+var_C], eax
.text:0000376C                 mov     [ebp+var_10], 186A0h
.text:00003773                 mov     [ebp+var_14], 0DBBA0h
.text:0000377A                 cmp     [ebp+var_C], 186A0h
.text:00003781                 jnb     short loc_378A
.text:00003783                 mov     [ebp+var_C], 186A0h
.text:0000378A
.text:0000378A loc_378A:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+75j
.text:0000378A                 cmp     [ebp+var_C], 0DBBA0h
.text:00003791                 jbe     short loc_379A
.text:00003793                 mov     [ebp+var_C], 0DBBA0h
.text:0000379A
.text:0000379A loc_379A:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+85j
.text:0000379A                 mov     eax, [ebp+var_C]
.text:0000379D                 jmp     short loc_37E1
.text:0000379F ; ---------------------------------------------------------------------------
.text:0000379F
.text:0000379F loc_379F:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+37j
.text:0000379F                                         ; CMethodProps::Get_BZip2_BlockSize(void)+4Cj
.text:0000379F                 mov     ecx, [ebp+var_4] ; this
.text:000037A2                 call    ?GetLevel@CMethodProps@@QBEHXZ ; CMethodProps::GetLevel(void)
.text:000037A7                 mov     [ebp+var_18], eax
.text:000037AA                 cmp     [ebp+var_18], 5
.text:000037AE                 jl      short loc_37B9
.text:000037B0                 mov     [ebp+var_1C], 9
.text:000037B7                 jmp     short loc_37D8
.text:000037B9 ; ---------------------------------------------------------------------------
.text:000037B9
.text:000037B9 loc_37B9:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+A2j
.text:000037B9                 cmp     [ebp+var_18], 1
.text:000037BD                 jl      short loc_37CB
.text:000037BF                 mov     ecx, [ebp+var_18]
.text:000037C2                 lea     edx, [ecx+ecx-1]
.text:000037C6                 mov     [ebp+var_20], edx
.text:000037C9                 jmp     short loc_37D2
.text:000037CB ; ---------------------------------------------------------------------------
.text:000037CB
.text:000037CB loc_37CB:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+B1j
.text:000037CB                 mov     [ebp+var_20], 1
.text:000037D2
.text:000037D2 loc_37D2:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+BDj
.text:000037D2                 mov     eax, [ebp+var_20]
.text:000037D5                 mov     [ebp+var_1C], eax
.text:000037D8
.text:000037D8 loc_37D8:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+ABj
.text:000037D8                 mov     eax, [ebp+var_1C]
.text:000037DB                 imul    eax, 186A0h
.text:000037E1
.text:000037E1 loc_37E1:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+91j
.text:000037E1                 add     esp, 20h
.text:000037E4                 cmp     ebp, esp
.text:000037E6                 call    __RTC_CheckEsp
.text:000037EB                 mov     esp, ebp
.text:000037ED                 pop     ebp
.text:000037EE                 retn
.text:000037EE ?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ endp
.text:000037EE
.text:000037EE ; ---------------------------------------------------------------------------
.text:000037EF                 align 10h
.text:000037EF _text           ends
.text:000037EF
.text:000037F0 ; ===========================================================================
.text:000037F0
.text:000037F0 ; Segment type: Pure code
.text:000037F0 ; Segment permissions: Read/Execute
.text:000037F0 _text           segment para public 'CODE' use32
.text:000037F0                 assume cs:_text
.text:000037F0                 ;org 37F0h
.text:000037F0 ; COMDAT (pick any)
.text:000037F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037F0
.text:000037F0 ; =============== S U B R O U T I N E =======================================
.text:000037F0
.text:000037F0 ; Attributes: bp-based frame
.text:000037F0
.text:000037F0 ; unsigned int __thiscall CMethodProps::Get_Ppmd_MemSize(CMethodProps *__hidden this)
.text:000037F0                 public ?Get_Ppmd_MemSize@CMethodProps@@QBEIXZ
.text:000037F0 ?Get_Ppmd_MemSize@CMethodProps@@QBEIXZ proc near
.text:000037F0                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+2C2p
.text:000037F0
.text:000037F0 var_10          = dword ptr -10h
.text:000037F0 var_C           = dword ptr -0Ch
.text:000037F0 var_8           = dword ptr -8
.text:000037F0 var_4           = dword ptr -4
.text:000037F0
.text:000037F0                 push    ebp
.text:000037F1                 mov     ebp, esp
.text:000037F3                 sub     esp, 10h
.text:000037F6                 mov     eax, 0CCCCCCCCh
.text:000037FB                 mov     [ebp+var_10], eax
.text:000037FE                 mov     [ebp+var_C], eax
.text:00003801                 mov     [ebp+var_8], eax
.text:00003804                 mov     [ebp+var_4], eax
.text:00003807                 mov     [ebp+var_4], ecx
.text:0000380A                 push    2               ; unsigned __int32
.text:0000380C                 mov     ecx, [ebp+var_4] ; this
.text:0000380F                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:00003814                 mov     [ebp+var_8], eax
.text:00003817                 cmp     [ebp+var_8], 0
.text:0000381B                 jl      short loc_3843
.text:0000381D                 mov     eax, [ebp+var_8]
.text:00003820                 push    eax
.text:00003821                 mov     ecx, [ebp+var_4]
.text:00003824                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00003829                 movzx   ecx, word ptr [eax+8]
.text:0000382D                 cmp     ecx, 13h
.text:00003830                 jnz     short loc_3843
.text:00003832                 mov     edx, [ebp+var_8]
.text:00003835                 push    edx
.text:00003836                 mov     ecx, [ebp+var_4]
.text:00003839                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:0000383E                 mov     eax, [eax+10h]
.text:00003841                 jmp     short loc_3870
.text:00003843 ; ---------------------------------------------------------------------------
.text:00003843
.text:00003843 loc_3843:                               ; CODE XREF: CMethodProps::Get_Ppmd_MemSize(void)+2Bj
.text:00003843                                         ; CMethodProps::Get_Ppmd_MemSize(void)+40j
.text:00003843                 mov     ecx, [ebp+var_4] ; this
.text:00003846                 call    ?GetLevel@CMethodProps@@QBEHXZ ; CMethodProps::GetLevel(void)
.text:0000384B                 mov     [ebp+var_C], eax
.text:0000384E                 cmp     [ebp+var_C], 9
.text:00003852                 jl      short loc_385D
.text:00003854                 mov     [ebp+var_10], 0C000000h
.text:0000385B                 jmp     short loc_386D
.text:0000385D ; ---------------------------------------------------------------------------
.text:0000385D
.text:0000385D loc_385D:                               ; CODE XREF: CMethodProps::Get_Ppmd_MemSize(void)+62j
.text:0000385D                 mov     ecx, [ebp+var_C]
.text:00003860                 add     ecx, 13h
.text:00003863                 mov     eax, 1
.text:00003868                 shl     eax, cl
.text:0000386A                 mov     [ebp+var_10], eax
.text:0000386D
.text:0000386D loc_386D:                               ; CODE XREF: CMethodProps::Get_Ppmd_MemSize(void)+6Bj
.text:0000386D                 mov     eax, [ebp+var_10]
.text:00003870
.text:00003870 loc_3870:                               ; CODE XREF: CMethodProps::Get_Ppmd_MemSize(void)+51j
.text:00003870                 add     esp, 10h
.text:00003873                 cmp     ebp, esp
.text:00003875                 call    __RTC_CheckEsp
.text:0000387A                 mov     esp, ebp
.text:0000387C                 pop     ebp
.text:0000387D                 retn
.text:0000387D ?Get_Ppmd_MemSize@CMethodProps@@QBEIXZ endp
.text:0000387D
.text:0000387D ; ---------------------------------------------------------------------------
.text:0000387E                 align 10h
.text:0000387E _text           ends
.text:0000387E
.text:00003880 ; ===========================================================================
.text:00003880
.text:00003880 ; Segment type: Pure code
.text:00003880 ; Segment permissions: Read/Execute
.text:00003880 _text           segment para public 'CODE' use32
.text:00003880                 assume cs:_text
.text:00003880                 ;org 3880h
.text:00003880 ; COMDAT (pick any)
.text:00003880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003880
.text:00003880 ; =============== S U B R O U T I N E =======================================
.text:00003880
.text:00003880 ; Attributes: bp-based frame
.text:00003880
.text:00003880 ; int __thiscall NArchive::CMultiMethodProps::GetLevel(NArchive::CMultiMethodProps *__hidden this)
.text:00003880                 public ?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ
.text:00003880 ?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ proc near
.text:00003880                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+D8p
.text:00003880                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1221p
.text:00003880
.text:00003880 var_8           = dword ptr -8
.text:00003880 var_4           = dword ptr -4
.text:00003880
.text:00003880                 push    ebp
.text:00003881                 mov     ebp, esp
.text:00003883                 sub     esp, 8
.text:00003886                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000388D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003894                 mov     [ebp+var_4], ecx
.text:00003897                 mov     eax, [ebp+var_4]
.text:0000389A                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:0000389D                 jnz     short loc_38A8
.text:0000389F                 mov     [ebp+var_8], 5
.text:000038A6                 jmp     short loc_38B0
.text:000038A8 ; ---------------------------------------------------------------------------
.text:000038A8
.text:000038A8 loc_38A8:                               ; CODE XREF: NArchive::CMultiMethodProps::GetLevel(void)+1Dj
.text:000038A8                 mov     ecx, [ebp+var_4]
.text:000038AB                 mov     edx, [ecx]
.text:000038AD                 mov     [ebp+var_8], edx
.text:000038B0
.text:000038B0 loc_38B0:                               ; CODE XREF: NArchive::CMultiMethodProps::GetLevel(void)+26j
.text:000038B0                 mov     eax, [ebp+var_8]
.text:000038B3                 mov     esp, ebp
.text:000038B5                 pop     ebp
.text:000038B6                 retn
.text:000038B6 ?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ endp
.text:000038B6
.text:000038B6 ; ---------------------------------------------------------------------------
.text:000038B7                 align 4
.text:000038B7 _text           ends
.text:000038B7
.text:000038B8 ; ===========================================================================
.text:000038B8
.text:000038B8 ; Segment type: Pure code
.text:000038B8 ; Segment permissions: Read/Execute
.text:000038B8 _text           segment para public 'CODE' use32
.text:000038B8                 assume cs:_text
.text:000038B8                 ;org 38B8h
.text:000038B8 ; COMDAT (pick any)
.text:000038B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000038B8
.text:000038B8 ; =============== S U B R O U T I N E =======================================
.text:000038B8
.text:000038B8 ; Attributes: bp-based frame
.text:000038B8
.text:000038B8 ; void __thiscall UString::Empty(UString *__hidden this)
.text:000038B8                 public ?Empty@UString@@QAEXXZ
.text:000038B8 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+FD8p
.text:000038B8
.text:000038B8 var_4           = dword ptr -4
.text:000038B8
.text:000038B8                 push    ebp
.text:000038B9                 mov     ebp, esp
.text:000038BB                 push    ecx
.text:000038BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038C3                 mov     [ebp+var_4], ecx
.text:000038C6                 mov     eax, [ebp+var_4]
.text:000038C9                 mov     dword ptr [eax+4], 0
.text:000038D0                 mov     ecx, [ebp+var_4]
.text:000038D3                 mov     edx, [ecx]
.text:000038D5                 xor     eax, eax
.text:000038D7                 mov     [edx], ax
.text:000038DA                 mov     esp, ebp
.text:000038DC                 pop     ebp
.text:000038DD                 retn
.text:000038DD ?Empty@UString@@QAEXXZ endp
.text:000038DD
.text:000038DD ; ---------------------------------------------------------------------------
.text:000038DE                 align 10h
.text:000038DE _text           ends
.text:000038DE
.text:000038E0 ; ===========================================================================
.text:000038E0
.text:000038E0 ; Segment type: Pure code
.text:000038E0 ; Segment permissions: Read/Execute
.text:000038E0 _text           segment para public 'CODE' use32
.text:000038E0                 assume cs:_text
.text:000038E0                 ;org 38E0h
.text:000038E0 ; COMDAT (pick any)
.text:000038E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000038E0
.text:000038E0 ; =============== S U B R O U T I N E =======================================
.text:000038E0
.text:000038E0 ; Attributes: bp-based frame
.text:000038E0
.text:000038E0 ; _DWORD __thiscall CMyComBSTR::CMyComBSTR(CMyComBSTR *__hidden this)
.text:000038E0                 public ??0CMyComBSTR@@QAE@XZ
.text:000038E0 ??0CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1001p
.text:000038E0
.text:000038E0 var_4           = dword ptr -4
.text:000038E0
.text:000038E0                 push    ebp
.text:000038E1                 mov     ebp, esp
.text:000038E3                 push    ecx
.text:000038E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038EB                 mov     [ebp+var_4], ecx
.text:000038EE                 mov     eax, [ebp+var_4]
.text:000038F1                 mov     dword ptr [eax], 0
.text:000038F7                 mov     eax, [ebp+var_4]
.text:000038FA                 mov     esp, ebp
.text:000038FC                 pop     ebp
.text:000038FD                 retn
.text:000038FD ??0CMyComBSTR@@QAE@XZ endp
.text:000038FD
.text:000038FD ; ---------------------------------------------------------------------------
.text:000038FE                 align 10h
.text:000038FE _text           ends
.text:000038FE
.text:00003900 ; ===========================================================================
.text:00003900
.text:00003900 ; Segment type: Pure code
.text:00003900 ; Segment permissions: Read/Execute
.text:00003900 _text           segment para public 'CODE' use32
.text:00003900                 assume cs:_text
.text:00003900                 ;org 3900h
.text:00003900 ; COMDAT (pick any)
.text:00003900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003900
.text:00003900 ; =============== S U B R O U T I N E =======================================
.text:00003900
.text:00003900 ; Attributes: bp-based frame
.text:00003900
.text:00003900 ; _DWORD __thiscall CMyComBSTR::~CMyComBSTR(CMyComBSTR *__hidden this)
.text:00003900                 public ??1CMyComBSTR@@QAE@XZ
.text:00003900 ??1CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+109Ap
.text:00003900                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+115Fp ...
.text:00003900
.text:00003900 var_4           = dword ptr -4
.text:00003900
.text:00003900                 push    ebp
.text:00003901                 mov     ebp, esp
.text:00003903                 push    ecx
.text:00003904                 push    esi
.text:00003905                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000390C                 mov     [ebp+var_4], ecx
.text:0000390F                 mov     esi, esp
.text:00003911                 mov     eax, [ebp+var_4]
.text:00003914                 mov     ecx, [eax]
.text:00003916                 push    ecx             ; bstrString
.text:00003917                 call    dword ptr ds:__imp__SysFreeString@4 ; SysFreeString(x)
.text:0000391D                 cmp     esi, esp
.text:0000391F                 call    __RTC_CheckEsp
.text:00003924                 pop     esi
.text:00003925                 add     esp, 4
.text:00003928                 cmp     ebp, esp
.text:0000392A                 call    __RTC_CheckEsp
.text:0000392F                 mov     esp, ebp
.text:00003931                 pop     ebp
.text:00003932                 retn
.text:00003932 ??1CMyComBSTR@@QAE@XZ endp
.text:00003932
.text:00003932 ; ---------------------------------------------------------------------------
.text:00003933                 align 4
.text:00003933 _text           ends
.text:00003933
.text:00003934 ; ===========================================================================
.text:00003934
.text:00003934 ; Segment type: Pure code
.text:00003934 ; Segment permissions: Read/Execute
.text:00003934 _text           segment para public 'CODE' use32
.text:00003934                 assume cs:_text
.text:00003934                 ;org 3934h
.text:00003934 ; COMDAT (pick any)
.text:00003934                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003934
.text:00003934 ; =============== S U B R O U T I N E =======================================
.text:00003934
.text:00003934 ; Attributes: bp-based frame
.text:00003934
.text:00003934 ; public: wchar_t * * __thiscall CMyComBSTR::operator&(void)
.text:00003934                 public ??ICMyComBSTR@@QAEPAPA_WXZ
.text:00003934 ??ICMyComBSTR@@QAEPAPA_WXZ proc near    ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1033p
.text:00003934
.text:00003934 var_4           = dword ptr -4
.text:00003934
.text:00003934                 push    ebp
.text:00003935                 mov     ebp, esp
.text:00003937                 push    ecx
.text:00003938                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000393F                 mov     [ebp+var_4], ecx
.text:00003942                 mov     eax, [ebp+var_4]
.text:00003945                 mov     esp, ebp
.text:00003947                 pop     ebp
.text:00003948                 retn
.text:00003948 ??ICMyComBSTR@@QAEPAPA_WXZ endp
.text:00003948
.text:00003948 ; ---------------------------------------------------------------------------
.text:00003949                 align 4
.text:00003949 _text           ends
.text:00003949
.text:0000394C ; ===========================================================================
.text:0000394C
.text:0000394C ; Segment type: Pure code
.text:0000394C ; Segment permissions: Read/Execute
.text:0000394C _text           segment para public 'CODE' use32
.text:0000394C                 assume cs:_text
.text:0000394C                 ;org 394Ch
.text:0000394C ; COMDAT (pick any)
.text:0000394C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000394C
.text:0000394C ; =============== S U B R O U T I N E =======================================
.text:0000394C
.text:0000394C ; Attributes: bp-based frame
.text:0000394C
.text:0000394C ; public: __thiscall CMyComBSTR::operator wchar_t const *(void)const
.text:0000394C                 public ??BCMyComBSTR@@QBEPB_WXZ
.text:0000394C ??BCMyComBSTR@@QBEPB_WXZ proc near      ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+111Ep
.text:0000394C                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1138p
.text:0000394C
.text:0000394C var_4           = dword ptr -4
.text:0000394C
.text:0000394C                 push    ebp
.text:0000394D                 mov     ebp, esp
.text:0000394F                 push    ecx
.text:00003950                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003957                 mov     [ebp+var_4], ecx
.text:0000395A                 mov     eax, [ebp+var_4]
.text:0000395D                 mov     eax, [eax]
.text:0000395F                 mov     esp, ebp
.text:00003961                 pop     ebp
.text:00003962                 retn
.text:00003962 ??BCMyComBSTR@@QBEPB_WXZ endp
.text:00003962
.text:00003962 ; ---------------------------------------------------------------------------
.text:00003963                 align 4
.text:00003963 _text           ends
.text:00003963
.text:00003964 ; ===========================================================================
.text:00003964
.text:00003964 ; Segment type: Pure code
.text:00003964 ; Segment permissions: Read/Execute
.text:00003964 _text           segment para public 'CODE' use32
.text:00003964                 assume cs:_text
.text:00003964                 ;org 3964h
.text:00003964 ; COMDAT (pick any)
.text:00003964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003964
.text:00003964 ; =============== S U B R O U T I N E =======================================
.text:00003964
.text:00003964 ; Attributes: bp-based frame
.text:00003964
.text:00003964 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00003964                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00003964 ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00003964                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4AEp
.text:00003964                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+79Dp ...
.text:00003964
.text:00003964 var_4           = dword ptr -4
.text:00003964
.text:00003964                 push    ebp
.text:00003965                 mov     ebp, esp
.text:00003967                 push    ecx
.text:00003968                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000396F                 mov     [ebp+var_4], ecx
.text:00003972                 xor     eax, eax
.text:00003974                 mov     ecx, [ebp+var_4]
.text:00003977                 mov     [ecx], ax
.text:0000397A                 xor     edx, edx
.text:0000397C                 mov     eax, [ebp+var_4]
.text:0000397F                 mov     [eax+2], dx
.text:00003983                 mov     ecx, [ebp+var_4]
.text:00003986                 mov     dword ptr [ecx+8], 0
.text:0000398D                 mov     eax, [ebp+var_4]
.text:00003990                 mov     esp, ebp
.text:00003992                 pop     ebp
.text:00003993                 retn
.text:00003993 ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00003993
.text:00003993 _text           ends
.text:00003993
.text:00003994 ; ===========================================================================
.text:00003994
.text:00003994 ; Segment type: Pure code
.text:00003994 ; Segment permissions: Read/Execute
.text:00003994 _text           segment para public 'CODE' use32
.text:00003994                 assume cs:_text
.text:00003994                 ;org 3994h
.text:00003994 ; COMDAT (pick any)
.text:00003994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003994
.text:00003994 ; =============== S U B R O U T I N E =======================================
.text:00003994
.text:00003994 ; Attributes: bp-based frame
.text:00003994
.text:00003994 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00003994                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00003994 ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00003994                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+512p
.text:00003994                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+589p ...
.text:00003994
.text:00003994 var_4           = dword ptr -4
.text:00003994
.text:00003994                 push    ebp
.text:00003995                 mov     ebp, esp
.text:00003997                 push    ecx
.text:00003998                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000399F                 mov     [ebp+var_4], ecx
.text:000039A2                 mov     ecx, [ebp+var_4] ; this
.text:000039A5                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:000039AA                 add     esp, 4
.text:000039AD                 cmp     ebp, esp
.text:000039AF                 call    __RTC_CheckEsp
.text:000039B4                 mov     esp, ebp
.text:000039B6                 pop     ebp
.text:000039B7                 retn
.text:000039B7 ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:000039B7
.text:000039B7 _text           ends
.text:000039B7
.text:000039B8 ; ===========================================================================
.text:000039B8
.text:000039B8 ; Segment type: Pure code
.text:000039B8 ; Segment permissions: Read/Execute
.text:000039B8 _text           segment para public 'CODE' use32
.text:000039B8                 assume cs:_text
.text:000039B8                 ;org 39B8h
.text:000039B8 ; COMDAT (pick any)
.text:000039B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000039B8
.text:000039B8 ; =============== S U B R O U T I N E =======================================
.text:000039B8
.text:000039B8 ; Attributes: bp-based frame
.text:000039B8
.text:000039B8 ; int __thiscall NArchive::CMultiMethodProps::GetAnalysisLevel(NArchive::CMultiMethodProps *__hidden this)
.text:000039B8                 public ?GetAnalysisLevel@CMultiMethodProps@NArchive@@QBEHXZ
.text:000039B8 ?GetAnalysisLevel@CMultiMethodProps@NArchive@@QBEHXZ proc near
.text:000039B8                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+12E2p
.text:000039B8
.text:000039B8 var_4           = dword ptr -4
.text:000039B8
.text:000039B8                 push    ebp
.text:000039B9                 mov     ebp, esp
.text:000039BB                 push    ecx
.text:000039BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039C3                 mov     [ebp+var_4], ecx
.text:000039C6                 mov     eax, [ebp+var_4]
.text:000039C9                 mov     eax, [eax+4]
.text:000039CC                 mov     esp, ebp
.text:000039CE                 pop     ebp
.text:000039CF                 retn
.text:000039CF ?GetAnalysisLevel@CMultiMethodProps@NArchive@@QBEHXZ endp
.text:000039CF
.text:000039CF _text           ends
.text:000039CF
.text:000039D0 ; ===========================================================================
.text:000039D0
.text:000039D0 ; Segment type: Pure code
.text:000039D0 ; Segment permissions: Read/Execute
.text:000039D0 _text           segment para public 'CODE' use32
.text:000039D0                 assume cs:_text
.text:000039D0                 ;org 39D0h
.text:000039D0 ; COMDAT (pick any)
.text:000039D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000039D0
.text:000039D0 ; =============== S U B R O U T I N E =======================================
.text:000039D0
.text:000039D0 ; Attributes: bp-based frame
.text:000039D0
.text:000039D0 ; _DWORD __thiscall NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode *__hidden this)
.text:000039D0                 public ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:000039D0 ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text:000039D0                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E2Ap
.text:000039D0                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E3Fp
.text:000039D0
.text:000039D0 var_10          = dword ptr -10h
.text:000039D0 var_C           = dword ptr -0Ch
.text:000039D0 var_4           = dword ptr -4
.text:000039D0
.text:000039D0                 push    ebp
.text:000039D1                 mov     ebp, esp
.text:000039D3                 push    0FFFFFFFFh
.text:000039D5                 push    offset __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:000039DA                 mov     eax, large fs:0
.text:000039E0                 push    eax
.text:000039E1                 push    ecx
.text:000039E2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000039E9                 mov     eax, dword ptr ds:___security_cookie
.text:000039EE                 xor     eax, ebp
.text:000039F0                 push    eax
.text:000039F1                 lea     eax, [ebp+var_C]
.text:000039F4                 mov     large fs:0, eax
.text:000039FA                 mov     [ebp+var_10], ecx
.text:000039FD                 mov     ecx, [ebp+var_10]
.text:00003A00                 call    ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(void)
.text:00003A05                 mov     [ebp+var_4], 0
.text:00003A0C                 mov     ecx, [ebp+var_10]
.text:00003A0F                 add     ecx, 0Ch
.text:00003A12                 call    ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>(void)
.text:00003A17                 mov     byte ptr [ebp+var_4], 1
.text:00003A1B                 mov     eax, [ebp+var_10]
.text:00003A1E                 mov     byte ptr [eax+18h], 0
.text:00003A22                 mov     ecx, [ebp+var_10]
.text:00003A25                 mov     byte ptr [ecx+19h], 0
.text:00003A29                 mov     edx, [ebp+var_10]
.text:00003A2C                 mov     dword ptr [edx+1Ch], 1
.text:00003A33                 mov     eax, [ebp+var_10]
.text:00003A36                 mov     byte ptr [eax+20h], 1
.text:00003A3A                 mov     ecx, [ebp+var_10]
.text:00003A3D                 mov     byte ptr [ecx+21h], 0
.text:00003A41                 mov     ecx, [ebp+var_10]
.text:00003A44                 add     ecx, 24h ; '$'
.text:00003A47                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00003A4C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003A53                 mov     eax, [ebp+var_10]
.text:00003A56                 mov     ecx, [ebp+var_C]
.text:00003A59                 mov     large fs:0, ecx
.text:00003A60                 pop     ecx
.text:00003A61                 add     esp, 10h
.text:00003A64                 cmp     ebp, esp
.text:00003A66                 call    __RTC_CheckEsp
.text:00003A6B                 mov     esp, ebp
.text:00003A6D                 pop     ebp
.text:00003A6E                 retn
.text:00003A6E ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text:00003A6E
.text:00003A6E ; ---------------------------------------------------------------------------
.text:00003A6F                 align 10h
.text:00003A6F _text           ends
.text:00003A6F
.text$x:00003A70 ; ===========================================================================
.text$x:00003A70
.text$x:00003A70 ; Segment type: Pure code
.text$x:00003A70 ; Segment permissions: Read/Execute
.text$x:00003A70 _text$x         segment para public 'CODE' use32
.text$x:00003A70                 assume cs:_text$x
.text$x:00003A70                 ;org 3A70h
.text$x:00003A70 ; COMDAT (pick associative to section at 39D0)
.text$x:00003A70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003A70
.text$x:00003A70 ; =============== S U B R O U T I N E =======================================
.text$x:00003A70
.text$x:00003A70
.text$x:00003A70 __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003A70                                         ; DATA XREF: .xdata$x:00003AA4o
.text$x:00003A70                 mov     ecx, [ebp-10h]
.text$x:00003A73                 jmp     ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text$x:00003A73 __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003A73
.text$x:00003A78
.text$x:00003A78 ; =============== S U B R O U T I N E =======================================
.text$x:00003A78
.text$x:00003A78
.text$x:00003A78 __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00003A78                                         ; DATA XREF: .xdata$x:00003AACo
.text$x:00003A78                 mov     ecx, [ebp-10h]
.text$x:00003A7B                 add     ecx, 0Ch
.text$x:00003A7E                 jmp     ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text$x:00003A7E __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003A7E
.text$x:00003A83
.text$x:00003A83 ; =============== S U B R O U T I N E =======================================
.text$x:00003A83
.text$x:00003A83
.text$x:00003A83 __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text$x:00003A83                                         ; DATA XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)+5o
.text$x:00003A83
.text$x:00003A83 arg_4           = dword ptr  8
.text$x:00003A83
.text$x:00003A83                 mov     edx, [esp+arg_4]
.text$x:00003A87                 lea     eax, [edx+0Ch]
.text$x:00003A8A                 mov     ecx, [edx-8]
.text$x:00003A8D                 xor     ecx, eax
.text$x:00003A8F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A94                 mov     eax, offset __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text$x:00003A99                 jmp     ___CxxFrameHandler3
.text$x:00003A99 __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text$x:00003A99
.text$x:00003A99 ; ---------------------------------------------------------------------------
.text$x:00003A9E                 align 10h
.text$x:00003A9E _text$x         ends
.text$x:00003A9E
.xdata$x:00003AA0 ; ===========================================================================
.xdata$x:00003AA0
.xdata$x:00003AA0 ; Segment type: Pure data
.xdata$x:00003AA0 ; Segment permissions: Read
.xdata$x:00003AA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003AA0                 assume cs:_xdata$x
.xdata$x:00003AA0                 ;org 3AA0h
.xdata$x:00003AA0 ; COMDAT (pick associative to section at 39D0)
.xdata$x:00003AA0 __unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003AA0                                         ; DATA XREF: .xdata$x:00003AB8o
.xdata$x:00003AA1                 db 0FFh
.xdata$x:00003AA2                 db 0FFh
.xdata$x:00003AA3                 db 0FFh
.xdata$x:00003AA4                 dd offset __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003AA8                 db    0
.xdata$x:00003AA9                 db    0
.xdata$x:00003AAA                 db    0
.xdata$x:00003AAB                 db    0
.xdata$x:00003AAC                 dd offset __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003AB0 __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003AB0                                         ; DATA XREF: __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003AB1                 db    5
.xdata$x:00003AB2                 db  93h ; ô
.xdata$x:00003AB3                 db  19h
.xdata$x:00003AB4                 db    2
.xdata$x:00003AB5                 db    0
.xdata$x:00003AB6                 db    0
.xdata$x:00003AB7                 db    0
.xdata$x:00003AB8                 dd offset __unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.xdata$x:00003ABC                 db    0
.xdata$x:00003ABD                 db    0
.xdata$x:00003ABE                 db    0
.xdata$x:00003ABF                 db    0
.xdata$x:00003AC0                 db    0
.xdata$x:00003AC1                 db    0
.xdata$x:00003AC2                 db    0
.xdata$x:00003AC3                 db    0
.xdata$x:00003AC4                 db    0
.xdata$x:00003AC5                 db    0
.xdata$x:00003AC6                 db    0
.xdata$x:00003AC7                 db    0
.xdata$x:00003AC8                 db    0
.xdata$x:00003AC9                 db    0
.xdata$x:00003ACA                 db    0
.xdata$x:00003ACB                 db    0
.xdata$x:00003ACC                 db    0
.xdata$x:00003ACD                 db    0
.xdata$x:00003ACE                 db    0
.xdata$x:00003ACF                 db    0
.xdata$x:00003AD0                 db    1
.xdata$x:00003AD1                 db    0
.xdata$x:00003AD2                 db    0
.xdata$x:00003AD3                 db    0
.xdata$x:00003AD3 _xdata$x        ends
.xdata$x:00003AD3
.text:00003AD4 ; ===========================================================================
.text:00003AD4
.text:00003AD4 ; Segment type: Pure code
.text:00003AD4 ; Segment permissions: Read/Execute
.text:00003AD4 _text           segment para public 'CODE' use32
.text:00003AD4                 assume cs:_text
.text:00003AD4                 ;org 3AD4h
.text:00003AD4 ; COMDAT (pick any)
.text:00003AD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003AD4
.text:00003AD4 ; =============== S U B R O U T I N E =======================================
.text:00003AD4
.text:00003AD4 ; Attributes: bp-based frame
.text:00003AD4
.text:00003AD4 ; bool __stdcall IntToBool(int)
.text:00003AD4                 public ?IntToBool@@YG_NH@Z
.text:00003AD4 ?IntToBool@@YG_NH@Z proc near           ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2A8p
.text:00003AD4                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2C0p ...
.text:00003AD4
.text:00003AD4 arg_0           = dword ptr  8
.text:00003AD4
.text:00003AD4                 push    ebp
.text:00003AD5                 mov     ebp, esp
.text:00003AD7                 xor     eax, eax
.text:00003AD9                 cmp     [ebp+arg_0], 0
.text:00003ADD                 setnz   al
.text:00003AE0                 pop     ebp
.text:00003AE1                 retn    4
.text:00003AE1 ?IntToBool@@YG_NH@Z endp
.text:00003AE1
.text:00003AE1 _text           ends
.text:00003AE1
.text:00003AE4 ; ===========================================================================
.text:00003AE4
.text:00003AE4 ; Segment type: Pure code
.text:00003AE4 ; Segment permissions: Read/Execute
.text:00003AE4 _text           segment para public 'CODE' use32
.text:00003AE4                 assume cs:_text
.text:00003AE4                 ;org 3AE4h
.text:00003AE4 ; COMDAT (pick any)
.text:00003AE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003AE4
.text:00003AE4 ; =============== S U B R O U T I N E =======================================
.text:00003AE4
.text:00003AE4 ; Attributes: bp-based frame
.text:00003AE4
.text:00003AE4 ; bool __thiscall NArchive::N7z::CUInt64DefVector::GetItem(NArchive::N7z::CUInt64DefVector *this, unsigned int, unsigned __int64 *)
.text:00003AE4                 public ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z
.text:00003AE4 ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z proc near
.text:00003AE4                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+435p
.text:00003AE4                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+45Dp ...
.text:00003AE4
.text:00003AE4 var_4           = dword ptr -4
.text:00003AE4 arg_0           = dword ptr  8
.text:00003AE4 arg_4           = dword ptr  0Ch
.text:00003AE4
.text:00003AE4                 push    ebp
.text:00003AE5                 mov     ebp, esp
.text:00003AE7                 push    ecx
.text:00003AE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003AEF                 mov     [ebp+var_4], ecx
.text:00003AF2                 mov     ecx, [ebp+var_4]
.text:00003AF5                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00003AFA                 cmp     [ebp+arg_0], eax
.text:00003AFD                 jnb     short loc_3B32
.text:00003AFF                 mov     eax, [ebp+arg_0]
.text:00003B02                 push    eax
.text:00003B03                 mov     ecx, [ebp+var_4]
.text:00003B06                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00003B0B                 movzx   ecx, byte ptr [eax]
.text:00003B0E                 test    ecx, ecx
.text:00003B10                 jz      short loc_3B32
.text:00003B12                 mov     edx, [ebp+arg_0]
.text:00003B15                 push    edx
.text:00003B16                 mov     ecx, [ebp+var_4]
.text:00003B19                 add     ecx, 0Ch
.text:00003B1C                 call    ??A?$CRecordVector@_K@@QBEAB_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00003B21                 mov     ecx, [ebp+arg_4]
.text:00003B24                 mov     edx, [eax]
.text:00003B26                 mov     [ecx], edx
.text:00003B28                 mov     eax, [eax+4]
.text:00003B2B                 mov     [ecx+4], eax
.text:00003B2E                 mov     al, 1
.text:00003B30                 jmp     short loc_3B44
.text:00003B32 ; ---------------------------------------------------------------------------
.text:00003B32
.text:00003B32 loc_3B32:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+19j
.text:00003B32                                         ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+2Cj
.text:00003B32                 mov     ecx, [ebp+arg_4]
.text:00003B35                 mov     dword ptr [ecx], 0
.text:00003B3B                 mov     dword ptr [ecx+4], 0
.text:00003B42                 xor     al, al
.text:00003B44
.text:00003B44 loc_3B44:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+4Cj
.text:00003B44                 add     esp, 4
.text:00003B47                 cmp     ebp, esp
.text:00003B49                 call    __RTC_CheckEsp
.text:00003B4E                 mov     esp, ebp
.text:00003B50                 pop     ebp
.text:00003B51                 retn    8
.text:00003B51 ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z endp
.text:00003B51
.text:00003B51 _text           ends
.text:00003B51
.text:00003B54 ; ===========================================================================
.text:00003B54
.text:00003B54 ; Segment type: Pure code
.text:00003B54 ; Segment permissions: Read/Execute
.text:00003B54 _text           segment para public 'CODE' use32
.text:00003B54                 assume cs:_text
.text:00003B54                 ;org 3B54h
.text:00003B54 ; COMDAT (pick any)
.text:00003B54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003B54
.text:00003B54 ; =============== S U B R O U T I N E =======================================
.text:00003B54
.text:00003B54 ; Attributes: bp-based frame
.text:00003B54
.text:00003B54 ; bool __thiscall NArchive::N7z::CDatabase::IsItemAnti(NArchive::N7z::CDatabase *this, unsigned int)
.text:00003B54                 public ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z
.text:00003B54 ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z proc near
.text:00003B54                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+405p
.text:00003B54
.text:00003B54 var_8           = dword ptr -8
.text:00003B54 var_4           = dword ptr -4
.text:00003B54 arg_0           = dword ptr  8
.text:00003B54
.text:00003B54                 push    ebp
.text:00003B55                 mov     ebp, esp
.text:00003B57                 sub     esp, 8
.text:00003B5A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003B61                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B68                 mov     [ebp+var_4], ecx
.text:00003B6B                 mov     ecx, [ebp+var_4]
.text:00003B6E                 add     ecx, 0C4h ; '-'
.text:00003B74                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00003B79                 cmp     [ebp+arg_0], eax
.text:00003B7C                 jnb     short loc_3BA0
.text:00003B7E                 mov     eax, [ebp+arg_0]
.text:00003B81                 push    eax
.text:00003B82                 mov     ecx, [ebp+var_4]
.text:00003B85                 add     ecx, 0C4h ; '-'
.text:00003B8B                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00003B90                 movzx   ecx, byte ptr [eax]
.text:00003B93                 test    ecx, ecx
.text:00003B95                 jz      short loc_3BA0
.text:00003B97                 mov     [ebp+var_8], 1
.text:00003B9E                 jmp     short loc_3BA7
.text:00003BA0 ; ---------------------------------------------------------------------------
.text:00003BA0
.text:00003BA0 loc_3BA0:                               ; CODE XREF: NArchive::N7z::CDatabase::IsItemAnti(uint)+28j
.text:00003BA0                                         ; NArchive::N7z::CDatabase::IsItemAnti(uint)+41j
.text:00003BA0                 mov     [ebp+var_8], 0
.text:00003BA7
.text:00003BA7 loc_3BA7:                               ; CODE XREF: NArchive::N7z::CDatabase::IsItemAnti(uint)+4Aj
.text:00003BA7                 mov     al, byte ptr [ebp+var_8]
.text:00003BAA                 add     esp, 8
.text:00003BAD                 cmp     ebp, esp
.text:00003BAF                 call    __RTC_CheckEsp
.text:00003BB4                 mov     esp, ebp
.text:00003BB6                 pop     ebp
.text:00003BB7                 retn    4
.text:00003BB7 ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z endp
.text:00003BB7
.text:00003BB7 ; ---------------------------------------------------------------------------
.text:00003BBA                 align 4
.text:00003BBA _text           ends
.text:00003BBA
.text:00003BBC ; ===========================================================================
.text:00003BBC
.text:00003BBC ; Segment type: Pure code
.text:00003BBC ; Segment permissions: Read/Execute
.text:00003BBC _text           segment para public 'CODE' use32
.text:00003BBC                 assume cs:_text
.text:00003BBC                 ;org 3BBCh
.text:00003BBC ; COMDAT (pick any)
.text:00003BBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003BBC
.text:00003BBC ; =============== S U B R O U T I N E =======================================
.text:00003BBC
.text:00003BBC ; Attributes: bp-based frame
.text:00003BBC
.text:00003BBC ; _DWORD __thiscall NArchive::N7z::COutArchive::COutArchive(NArchive::N7z::COutArchive *__hidden this)
.text:00003BBC                 public ??0COutArchive@N7z@NArchive@@QAE@XZ
.text:00003BBC ??0COutArchive@N7z@NArchive@@QAE@XZ proc near
.text:00003BBC                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1359p
.text:00003BBC
.text:00003BBC var_10          = dword ptr -10h
.text:00003BBC var_C           = dword ptr -0Ch
.text:00003BBC var_4           = dword ptr -4
.text:00003BBC
.text:00003BBC                 push    ebp
.text:00003BBD                 mov     ebp, esp
.text:00003BBF                 push    0FFFFFFFFh
.text:00003BC1                 push    offset __ehhandler$??0COutArchive@N7z@NArchive@@QAE@XZ
.text:00003BC6                 mov     eax, large fs:0
.text:00003BCC                 push    eax
.text:00003BCD                 push    ecx
.text:00003BCE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003BD5                 mov     eax, dword ptr ds:___security_cookie
.text:00003BDA                 xor     eax, ebp
.text:00003BDC                 push    eax
.text:00003BDD                 lea     eax, [ebp+var_C]
.text:00003BE0                 mov     large fs:0, eax
.text:00003BE6                 mov     [ebp+var_10], ecx
.text:00003BE9                 mov     ecx, [ebp+var_10]
.text:00003BEC                 add     ecx, 18h        ; this
.text:00003BEF                 call    ??0COutBuffer@@QAE@XZ ; COutBuffer::COutBuffer(void)
.text:00003BF4                 mov     [ebp+var_4], 0
.text:00003BFB                 mov     ecx, [ebp+var_10]
.text:00003BFE                 add     ecx, 40h ; '@'  ; this
.text:00003C01                 call    ??0CWriteBufferLoc@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CWriteBufferLoc::CWriteBufferLoc(void)
.text:00003C06                 mov     ecx, [ebp+var_10]
.text:00003C09                 add     ecx, 50h ; 'P'
.text:00003C0C                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(void)
.text:00003C11                 mov     byte ptr [ebp+var_4], 1
.text:00003C15                 mov     ecx, [ebp+var_10]
.text:00003C18                 add     ecx, 54h ; 'T'
.text:00003C1B                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00003C20                 push    10000h          ; unsigned int
.text:00003C25                 mov     ecx, [ebp+var_10]
.text:00003C28                 add     ecx, 18h        ; this
.text:00003C2B                 call    ?Create@COutBuffer@@QAE_NI@Z ; COutBuffer::Create(uint)
.text:00003C30                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003C37                 mov     eax, [ebp+var_10]
.text:00003C3A                 mov     ecx, [ebp+var_C]
.text:00003C3D                 mov     large fs:0, ecx
.text:00003C44                 pop     ecx
.text:00003C45                 add     esp, 10h
.text:00003C48                 cmp     ebp, esp
.text:00003C4A                 call    __RTC_CheckEsp
.text:00003C4F                 mov     esp, ebp
.text:00003C51                 pop     ebp
.text:00003C52                 retn
.text:00003C52 ??0COutArchive@N7z@NArchive@@QAE@XZ endp
.text:00003C52
.text:00003C52 ; ---------------------------------------------------------------------------
.text:00003C53                 align 4
.text:00003C53 _text           ends
.text:00003C53
.text$x:00003C54 ; ===========================================================================
.text$x:00003C54
.text$x:00003C54 ; Segment type: Pure code
.text$x:00003C54 ; Segment permissions: Read/Execute
.text$x:00003C54 _text$x         segment para public 'CODE' use32
.text$x:00003C54                 assume cs:_text$x
.text$x:00003C54                 ;org 3C54h
.text$x:00003C54 ; COMDAT (pick associative to section at 3BBC)
.text$x:00003C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003C54
.text$x:00003C54 ; =============== S U B R O U T I N E =======================================
.text$x:00003C54
.text$x:00003C54
.text$x:00003C54 __unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003C54                                         ; DATA XREF: .xdata$x:00003C8Co
.text$x:00003C54                 mov     ecx, [ebp-10h]
.text$x:00003C57                 add     ecx, 18h        ; this
.text$x:00003C5A                 jmp     ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text$x:00003C5A __unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003C5A
.text$x:00003C5F
.text$x:00003C5F ; =============== S U B R O U T I N E =======================================
.text$x:00003C5F
.text$x:00003C5F
.text$x:00003C5F __unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00003C5F                                         ; DATA XREF: .xdata$x:00003C94o
.text$x:00003C5F                 mov     ecx, [ebp-10h]
.text$x:00003C62                 add     ecx, 50h ; 'P'
.text$x:00003C65                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00003C65 __unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003C65
.text$x:00003C6A
.text$x:00003C6A ; =============== S U B R O U T I N E =======================================
.text$x:00003C6A
.text$x:00003C6A
.text$x:00003C6A __ehhandler$??0COutArchive@N7z@NArchive@@QAE@XZ proc near
.text$x:00003C6A                                         ; DATA XREF: NArchive::N7z::COutArchive::COutArchive(void)+5o
.text$x:00003C6A
.text$x:00003C6A arg_4           = dword ptr  8
.text$x:00003C6A
.text$x:00003C6A                 mov     edx, [esp+arg_4]
.text$x:00003C6E                 lea     eax, [edx+0Ch]
.text$x:00003C71                 mov     ecx, [edx-8]
.text$x:00003C74                 xor     ecx, eax
.text$x:00003C76                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C7B                 mov     eax, offset __ehfuncinfo$??0COutArchive@N7z@NArchive@@QAE@XZ
.text$x:00003C80                 jmp     ___CxxFrameHandler3
.text$x:00003C80 __ehhandler$??0COutArchive@N7z@NArchive@@QAE@XZ endp
.text$x:00003C80
.text$x:00003C80 ; ---------------------------------------------------------------------------
.text$x:00003C85                 align 4
.text$x:00003C85 _text$x         ends
.text$x:00003C85
.xdata$x:00003C88 ; ===========================================================================
.xdata$x:00003C88
.xdata$x:00003C88 ; Segment type: Pure data
.xdata$x:00003C88 ; Segment permissions: Read
.xdata$x:00003C88 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003C88                 assume cs:_xdata$x
.xdata$x:00003C88                 ;org 3C88h
.xdata$x:00003C88 ; COMDAT (pick associative to section at 3BBC)
.xdata$x:00003C88 __unwindtable$??0COutArchive@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003C88                                         ; DATA XREF: .xdata$x:00003CA0o
.xdata$x:00003C89                 db 0FFh
.xdata$x:00003C8A                 db 0FFh
.xdata$x:00003C8B                 db 0FFh
.xdata$x:00003C8C                 dd offset __unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003C90                 db    0
.xdata$x:00003C91                 db    0
.xdata$x:00003C92                 db    0
.xdata$x:00003C93                 db    0
.xdata$x:00003C94                 dd offset __unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003C98 __ehfuncinfo$??0COutArchive@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003C98                                         ; DATA XREF: __ehhandler$??0COutArchive@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003C99                 db    5
.xdata$x:00003C9A                 db  93h ; ô
.xdata$x:00003C9B                 db  19h
.xdata$x:00003C9C                 db    2
.xdata$x:00003C9D                 db    0
.xdata$x:00003C9E                 db    0
.xdata$x:00003C9F                 db    0
.xdata$x:00003CA0                 dd offset __unwindtable$??0COutArchive@N7z@NArchive@@QAE@XZ
.xdata$x:00003CA4                 db    0
.xdata$x:00003CA5                 db    0
.xdata$x:00003CA6                 db    0
.xdata$x:00003CA7                 db    0
.xdata$x:00003CA8                 db    0
.xdata$x:00003CA9                 db    0
.xdata$x:00003CAA                 db    0
.xdata$x:00003CAB                 db    0
.xdata$x:00003CAC                 db    0
.xdata$x:00003CAD                 db    0
.xdata$x:00003CAE                 db    0
.xdata$x:00003CAF                 db    0
.xdata$x:00003CB0                 db    0
.xdata$x:00003CB1                 db    0
.xdata$x:00003CB2                 db    0
.xdata$x:00003CB3                 db    0
.xdata$x:00003CB4                 db    0
.xdata$x:00003CB5                 db    0
.xdata$x:00003CB6                 db    0
.xdata$x:00003CB7                 db    0
.xdata$x:00003CB8                 db    1
.xdata$x:00003CB9                 db    0
.xdata$x:00003CBA                 db    0
.xdata$x:00003CBB                 db    0
.xdata$x:00003CBB _xdata$x        ends
.xdata$x:00003CBB
.text:00003CBC ; ===========================================================================
.text:00003CBC
.text:00003CBC ; Segment type: Pure code
.text:00003CBC ; Segment permissions: Read/Execute
.text:00003CBC _text           segment para public 'CODE' use32
.text:00003CBC                 assume cs:_text
.text:00003CBC                 ;org 3CBCh
.text:00003CBC ; COMDAT (pick any)
.text:00003CBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003CBC
.text:00003CBC ; =============== S U B R O U T I N E =======================================
.text:00003CBC
.text:00003CBC ; Attributes: bp-based frame
.text:00003CBC
.text:00003CBC ; _DWORD __thiscall COutBuffer::COutBuffer(COutBuffer *__hidden this)
.text:00003CBC                 public ??0COutBuffer@@QAE@XZ
.text:00003CBC ??0COutBuffer@@QAE@XZ proc near         ; CODE XREF: NArchive::N7z::COutArchive::COutArchive(void)+33p
.text:00003CBC
.text:00003CBC var_4           = dword ptr -4
.text:00003CBC
.text:00003CBC                 push    ebp
.text:00003CBD                 mov     ebp, esp
.text:00003CBF                 push    ecx
.text:00003CC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003CC7                 mov     [ebp+var_4], ecx
.text:00003CCA                 mov     eax, [ebp+var_4]
.text:00003CCD                 mov     dword ptr [eax], 0
.text:00003CD3                 mov     ecx, [ebp+var_4]
.text:00003CD6                 mov     dword ptr [ecx+4], 0
.text:00003CDD                 mov     edx, [ebp+var_4]
.text:00003CE0                 mov     dword ptr [edx+14h], 0
.text:00003CE7                 mov     eax, [ebp+var_4]
.text:00003CEA                 mov     dword ptr [eax+20h], 0
.text:00003CF1                 mov     eax, [ebp+var_4]
.text:00003CF4                 mov     esp, ebp
.text:00003CF6                 pop     ebp
.text:00003CF7                 retn
.text:00003CF7 ??0COutBuffer@@QAE@XZ endp
.text:00003CF7
.text:00003CF7 _text           ends
.text:00003CF7
.text:00003CF8 ; ===========================================================================
.text:00003CF8
.text:00003CF8 ; Segment type: Pure code
.text:00003CF8 ; Segment permissions: Read/Execute
.text:00003CF8 _text           segment para public 'CODE' use32
.text:00003CF8                 assume cs:_text
.text:00003CF8                 ;org 3CF8h
.text:00003CF8 ; COMDAT (pick any)
.text:00003CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003CF8
.text:00003CF8 ; =============== S U B R O U T I N E =======================================
.text:00003CF8
.text:00003CF8 ; Attributes: bp-based frame
.text:00003CF8
.text:00003CF8 ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:00003CF8                 public ??1COutBuffer@@QAE@XZ
.text:00003CF8 ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: __unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$0+6j
.text:00003CF8                                         ; NArchive::N7z::COutArchive::~COutArchive(void)+5Bp ...
.text:00003CF8
.text:00003CF8 var_4           = dword ptr -4
.text:00003CF8
.text:00003CF8                 push    ebp
.text:00003CF9                 mov     ebp, esp
.text:00003CFB                 push    ecx
.text:00003CFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D03                 mov     [ebp+var_4], ecx
.text:00003D06                 mov     ecx, [ebp+var_4] ; this
.text:00003D09                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:00003D0E                 add     esp, 4
.text:00003D11                 cmp     ebp, esp
.text:00003D13                 call    __RTC_CheckEsp
.text:00003D18                 mov     esp, ebp
.text:00003D1A                 pop     ebp
.text:00003D1B                 retn
.text:00003D1B ??1COutBuffer@@QAE@XZ endp
.text:00003D1B
.text:00003D1B _text           ends
.text:00003D1B
.text:00003D1C ; ===========================================================================
.text:00003D1C
.text:00003D1C ; Segment type: Pure code
.text:00003D1C ; Segment permissions: Read/Execute
.text:00003D1C _text           segment para public 'CODE' use32
.text:00003D1C                 assume cs:_text
.text:00003D1C                 ;org 3D1Ch
.text:00003D1C ; COMDAT (pick any)
.text:00003D1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D1C
.text:00003D1C ; =============== S U B R O U T I N E =======================================
.text:00003D1C
.text:00003D1C ; Attributes: bp-based frame
.text:00003D1C
.text:00003D1C ; _DWORD __thiscall NArchive::N7z::CWriteBufferLoc::CWriteBufferLoc(NArchive::N7z::CWriteBufferLoc *__hidden this)
.text:00003D1C                 public ??0CWriteBufferLoc@N7z@NArchive@@QAE@XZ
.text:00003D1C ??0CWriteBufferLoc@N7z@NArchive@@QAE@XZ proc near
.text:00003D1C                                         ; CODE XREF: NArchive::N7z::COutArchive::COutArchive(void)+45p
.text:00003D1C
.text:00003D1C var_4           = dword ptr -4
.text:00003D1C
.text:00003D1C                 push    ebp
.text:00003D1D                 mov     ebp, esp
.text:00003D1F                 push    ecx
.text:00003D20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D27                 mov     [ebp+var_4], ecx
.text:00003D2A                 mov     eax, [ebp+var_4]
.text:00003D2D                 mov     dword ptr [eax+4], 0
.text:00003D34                 mov     ecx, [ebp+var_4]
.text:00003D37                 mov     dword ptr [ecx+8], 0
.text:00003D3E                 mov     eax, [ebp+var_4]
.text:00003D41                 mov     esp, ebp
.text:00003D43                 pop     ebp
.text:00003D44                 retn
.text:00003D44 ??0CWriteBufferLoc@N7z@NArchive@@QAE@XZ endp
.text:00003D44
.text:00003D44 ; ---------------------------------------------------------------------------
.text:00003D45                 align 4
.text:00003D45 _text           ends
.text:00003D45
.text:00003D48 ; ===========================================================================
.text:00003D48
.text:00003D48 ; Segment type: Pure code
.text:00003D48 ; Segment permissions: Read/Execute
.text:00003D48 _text           segment para public 'CODE' use32
.text:00003D48                 assume cs:_text
.text:00003D48                 ;org 3D48h
.text:00003D48 ; COMDAT (pick any)
.text:00003D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D48
.text:00003D48 ; =============== S U B R O U T I N E =======================================
.text:00003D48
.text:00003D48 ; Attributes: bp-based frame
.text:00003D48
.text:00003D48 ; _DWORD __thiscall NArchive::N7z::CUpdateItem::CUpdateItem(NArchive::N7z::CUpdateItem *__hidden this)
.text:00003D48                 public ??0CUpdateItem@N7z@NArchive@@QAE@XZ
.text:00003D48 ??0CUpdateItem@N7z@NArchive@@QAE@XZ proc near
.text:00003D48                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+295p
.text:00003D48
.text:00003D48 var_4           = dword ptr -4
.text:00003D48
.text:00003D48                 push    ebp
.text:00003D49                 mov     ebp, esp
.text:00003D4B                 push    ecx
.text:00003D4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D53                 mov     [ebp+var_4], ecx
.text:00003D56                 mov     ecx, [ebp+var_4]
.text:00003D59                 add     ecx, 28h ; '('
.text:00003D5C                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00003D61                 mov     eax, [ebp+var_4]
.text:00003D64                 mov     byte ptr [eax+3Ah], 0
.text:00003D68                 mov     ecx, [ebp+var_4]
.text:00003D6B                 mov     byte ptr [ecx+3Bh], 0
.text:00003D6F                 mov     edx, [ebp+var_4]
.text:00003D72                 mov     byte ptr [edx+3Ch], 0
.text:00003D76                 mov     eax, [ebp+var_4]
.text:00003D79                 mov     byte ptr [eax+3Dh], 0
.text:00003D7D                 mov     ecx, [ebp+var_4]
.text:00003D80                 mov     byte ptr [ecx+3Eh], 0
.text:00003D84                 mov     edx, [ebp+var_4]
.text:00003D87                 mov     byte ptr [edx+3Fh], 0
.text:00003D8B                 mov     eax, [ebp+var_4]
.text:00003D8E                 add     esp, 4
.text:00003D91                 cmp     ebp, esp
.text:00003D93                 call    __RTC_CheckEsp
.text:00003D98                 mov     esp, ebp
.text:00003D9A                 pop     ebp
.text:00003D9B                 retn
.text:00003D9B ??0CUpdateItem@N7z@NArchive@@QAE@XZ endp
.text:00003D9B
.text:00003D9B _text           ends
.text:00003D9B
.text:00003D9C ; ===========================================================================
.text:00003D9C
.text:00003D9C ; Segment type: Pure code
.text:00003D9C ; Segment permissions: Read/Execute
.text:00003D9C _text           segment para public 'CODE' use32
.text:00003D9C                 assume cs:_text
.text:00003D9C                 ;org 3D9Ch
.text:00003D9C ; COMDAT (pick any)
.text:00003D9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D9C
.text:00003D9C ; =============== S U B R O U T I N E =======================================
.text:00003D9C
.text:00003D9C ; Attributes: bp-based frame
.text:00003D9C
.text:00003D9C ; void __thiscall NArchive::N7z::CUpdateItem::SetDirStatusFromAttrib(NArchive::N7z::CUpdateItem *__hidden this)
.text:00003D9C                 public ?SetDirStatusFromAttrib@CUpdateItem@N7z@NArchive@@QAEXXZ
.text:00003D9C ?SetDirStatusFromAttrib@CUpdateItem@N7z@NArchive@@QAEXXZ proc near
.text:00003D9C                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C22p
.text:00003D9C
.text:00003D9C var_4           = dword ptr -4
.text:00003D9C
.text:00003D9C                 push    ebp
.text:00003D9D                 mov     ebp, esp
.text:00003D9F                 push    ecx
.text:00003DA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DA7                 mov     [ebp+var_4], ecx
.text:00003DAA                 mov     eax, [ebp+var_4]
.text:00003DAD                 mov     ecx, [eax+34h]
.text:00003DB0                 and     ecx, 10h
.text:00003DB3                 neg     ecx
.text:00003DB5                 sbb     ecx, ecx
.text:00003DB7                 neg     ecx
.text:00003DB9                 mov     edx, [ebp+var_4]
.text:00003DBC                 mov     [edx+3Bh], cl
.text:00003DBF                 mov     esp, ebp
.text:00003DC1                 pop     ebp
.text:00003DC2                 retn
.text:00003DC2 ?SetDirStatusFromAttrib@CUpdateItem@N7z@NArchive@@QAEXXZ endp
.text:00003DC2
.text:00003DC2 ; ---------------------------------------------------------------------------
.text:00003DC3                 align 4
.text:00003DC3 _text           ends
.text:00003DC3
.text:00003DC4 ; ===========================================================================
.text:00003DC4
.text:00003DC4 ; Segment type: Pure code
.text:00003DC4 ; Segment permissions: Read/Execute
.text:00003DC4 _text           segment para public 'CODE' use32
.text:00003DC4                 assume cs:_text
.text:00003DC4                 ;org 3DC4h
.text:00003DC4 ; COMDAT (pick any)
.text:00003DC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003DC4
.text:00003DC4 ; =============== S U B R O U T I N E =======================================
.text:00003DC4
.text:00003DC4 ; Attributes: bp-based frame
.text:00003DC4
.text:00003DC4 ; _DWORD __thiscall NArchive::N7z::CUpdateOptions::CUpdateOptions(NArchive::N7z::CUpdateOptions *__hidden this)
.text:00003DC4                 public ??0CUpdateOptions@N7z@NArchive@@QAE@XZ
.text:00003DC4 ??0CUpdateOptions@N7z@NArchive@@QAE@XZ proc near
.text:00003DC4                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+123Ep
.text:00003DC4
.text:00003DC4 var_4           = dword ptr -4
.text:00003DC4
.text:00003DC4                 push    ebp
.text:00003DC5                 mov     ebp, esp
.text:00003DC7                 push    ecx
.text:00003DC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DCF                 mov     [ebp+var_4], ecx
.text:00003DD2                 mov     eax, [ebp+var_4]
.text:00003DD5                 mov     dword ptr [eax], 0
.text:00003DDB                 mov     ecx, [ebp+var_4]
.text:00003DDE                 mov     dword ptr [ecx+4], 0
.text:00003DE5                 mov     edx, [ebp+var_4]
.text:00003DE8                 mov     byte ptr [edx+8], 0
.text:00003DEC                 mov     eax, [ebp+var_4]
.text:00003DEF                 mov     byte ptr [eax+9], 0
.text:00003DF3                 mov     ecx, [ebp+var_4]
.text:00003DF6                 mov     dword ptr [ecx+0Ch], 0FFFFFFFFh
.text:00003DFD                 mov     ecx, [ebp+var_4]
.text:00003E00                 add     ecx, 10h        ; this
.text:00003E03                 call    ??0CHeaderOptions@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CHeaderOptions::CHeaderOptions(void)
.text:00003E08                 mov     edx, [ebp+var_4]
.text:00003E0B                 mov     dword ptr [edx+18h], 0FFFFFFFFh
.text:00003E12                 mov     dword ptr [edx+1Ch], 0FFFFFFFFh
.text:00003E19                 mov     eax, [ebp+var_4]
.text:00003E1C                 mov     dword ptr [eax+20h], 0FFFFFFFFh
.text:00003E23                 mov     dword ptr [eax+24h], 0FFFFFFFFh
.text:00003E2A                 mov     ecx, [ebp+var_4]
.text:00003E2D                 mov     byte ptr [ecx+28h], 0
.text:00003E31                 mov     edx, [ebp+var_4]
.text:00003E34                 mov     byte ptr [edx+29h], 0
.text:00003E38                 mov     eax, [ebp+var_4]
.text:00003E3B                 mov     byte ptr [eax+2Ah], 1
.text:00003E3F                 mov     eax, [ebp+var_4]
.text:00003E42                 add     esp, 4
.text:00003E45                 cmp     ebp, esp
.text:00003E47                 call    __RTC_CheckEsp
.text:00003E4C                 mov     esp, ebp
.text:00003E4E                 pop     ebp
.text:00003E4F                 retn
.text:00003E4F ??0CUpdateOptions@N7z@NArchive@@QAE@XZ endp
.text:00003E4F
.text:00003E4F _text           ends
.text:00003E4F
.text:00003E50 ; ===========================================================================
.text:00003E50
.text:00003E50 ; Segment type: Pure code
.text:00003E50 ; Segment permissions: Read/Execute
.text:00003E50 _text           segment para public 'CODE' use32
.text:00003E50                 assume cs:_text
.text:00003E50                 ;org 3E50h
.text:00003E50 ; COMDAT (pick any)
.text:00003E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E50
.text:00003E50 ; =============== S U B R O U T I N E =======================================
.text:00003E50
.text:00003E50 ; Attributes: bp-based frame
.text:00003E50
.text:00003E50 ; _DWORD __thiscall NArchive::N7z::CHeaderOptions::CHeaderOptions(NArchive::N7z::CHeaderOptions *__hidden this)
.text:00003E50                 public ??0CHeaderOptions@N7z@NArchive@@QAE@XZ
.text:00003E50 ??0CHeaderOptions@N7z@NArchive@@QAE@XZ proc near
.text:00003E50                                         ; CODE XREF: NArchive::N7z::CUpdateOptions::CUpdateOptions(void)+3Fp
.text:00003E50
.text:00003E50 var_4           = dword ptr -4
.text:00003E50
.text:00003E50                 push    ebp
.text:00003E51                 mov     ebp, esp
.text:00003E53                 push    ecx
.text:00003E54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E5B                 mov     [ebp+var_4], ecx
.text:00003E5E                 mov     eax, [ebp+var_4]
.text:00003E61                 mov     byte ptr [eax], 1
.text:00003E64                 mov     eax, [ebp+var_4]
.text:00003E67                 mov     esp, ebp
.text:00003E69                 pop     ebp
.text:00003E6A                 retn
.text:00003E6A ??0CHeaderOptions@N7z@NArchive@@QAE@XZ endp
.text:00003E6A
.text:00003E6A ; ---------------------------------------------------------------------------
.text:00003E6B                 align 4
.text:00003E6B _text           ends
.text:00003E6B
.text:00003E6C ; ===========================================================================
.text:00003E6C
.text:00003E6C ; Segment type: Pure code
.text:00003E6C ; Segment permissions: Read/Execute
.text:00003E6C _text           segment para public 'CODE' use32
.text:00003E6C                 assume cs:_text
.text:00003E6C                 ;org 3E6Ch
.text:00003E6C ; COMDAT (pick any)
.text:00003E6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E6C
.text:00003E6C ; =============== S U B R O U T I N E =======================================
.text:00003E6C
.text:00003E6C ; Attributes: bp-based frame
.text:00003E6C
.text:00003E6C ; _DWORD __thiscall NArchive::N7z::CUpdateItem::~CUpdateItem(NArchive::N7z::CUpdateItem *__hidden this)
.text:00003E6C                 public ??1CUpdateItem@N7z@NArchive@@QAE@XZ
.text:00003E6C ??1CUpdateItem@N7z@NArchive@@QAE@XZ proc near
.text:00003E6C                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+368p
.text:00003E6C                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+530p ...
.text:00003E6C
.text:00003E6C var_4           = dword ptr -4
.text:00003E6C
.text:00003E6C                 push    ebp
.text:00003E6D                 mov     ebp, esp
.text:00003E6F                 push    ecx
.text:00003E70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E77                 mov     [ebp+var_4], ecx
.text:00003E7A                 mov     ecx, [ebp+var_4]
.text:00003E7D                 add     ecx, 28h ; '('  ; this
.text:00003E80                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003E85                 add     esp, 4
.text:00003E88                 cmp     ebp, esp
.text:00003E8A                 call    __RTC_CheckEsp
.text:00003E8F                 mov     esp, ebp
.text:00003E91                 pop     ebp
.text:00003E92                 retn
.text:00003E92 ??1CUpdateItem@N7z@NArchive@@QAE@XZ endp
.text:00003E92
.text:00003E92 ; ---------------------------------------------------------------------------
.text:00003E93                 align 4
.text:00003E93 _text           ends
.text:00003E93
.text:00003E94 ; ===========================================================================
.text:00003E94
.text:00003E94 ; Segment type: Pure code
.text:00003E94 ; Segment permissions: Read/Execute
.text:00003E94 _text           segment para public 'CODE' use32
.text:00003E94                 assume cs:_text
.text:00003E94                 ;org 3E94h
.text:00003E94 ; COMDAT (pick any)
.text:00003E94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E94
.text:00003E94 ; =============== S U B R O U T I N E =======================================
.text:00003E94
.text:00003E94 ; Attributes: bp-based frame
.text:00003E94
.text:00003E94 ; _DWORD __thiscall NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode *__hidden this)
.text:00003E94                 public ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:00003E94 ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text:00003E94                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+EA4p
.text:00003E94                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+EB3p ...
.text:00003E94
.text:00003E94 var_10          = dword ptr -10h
.text:00003E94 var_C           = dword ptr -0Ch
.text:00003E94 var_4           = dword ptr -4
.text:00003E94
.text:00003E94                 push    ebp
.text:00003E95                 mov     ebp, esp
.text:00003E97                 push    0FFFFFFFFh
.text:00003E99                 push    offset __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:00003E9E                 mov     eax, large fs:0
.text:00003EA4                 push    eax
.text:00003EA5                 push    ecx
.text:00003EA6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003EAD                 mov     eax, dword ptr ds:___security_cookie
.text:00003EB2                 xor     eax, ebp
.text:00003EB4                 push    eax
.text:00003EB5                 lea     eax, [ebp+var_C]
.text:00003EB8                 mov     large fs:0, eax
.text:00003EBE                 mov     [ebp+var_10], ecx
.text:00003EC1                 mov     [ebp+var_4], 1
.text:00003EC8                 mov     ecx, [ebp+var_10]
.text:00003ECB                 add     ecx, 24h ; '$'  ; this
.text:00003ECE                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003ED3                 mov     byte ptr [ebp+var_4], 0
.text:00003ED7                 mov     ecx, [ebp+var_10]
.text:00003EDA                 add     ecx, 0Ch
.text:00003EDD                 call    ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text:00003EE2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003EE9                 mov     ecx, [ebp+var_10]
.text:00003EEC                 call    ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text:00003EF1                 mov     ecx, [ebp+var_C]
.text:00003EF4                 mov     large fs:0, ecx
.text:00003EFB                 pop     ecx
.text:00003EFC                 add     esp, 10h
.text:00003EFF                 cmp     ebp, esp
.text:00003F01                 call    __RTC_CheckEsp
.text:00003F06                 mov     esp, ebp
.text:00003F08                 pop     ebp
.text:00003F09                 retn
.text:00003F09 ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text:00003F09
.text:00003F09 ; ---------------------------------------------------------------------------
.text:00003F0A                 align 4
.text:00003F0A _text           ends
.text:00003F0A
.text$x:00003F0C ; ===========================================================================
.text$x:00003F0C
.text$x:00003F0C ; Segment type: Pure code
.text$x:00003F0C ; Segment permissions: Read/Execute
.text$x:00003F0C _text$x         segment para public 'CODE' use32
.text$x:00003F0C                 assume cs:_text$x
.text$x:00003F0C                 ;org 3F0Ch
.text$x:00003F0C ; COMDAT (pick associative to section at 3E94)
.text$x:00003F0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003F0C
.text$x:00003F0C ; =============== S U B R O U T I N E =======================================
.text$x:00003F0C
.text$x:00003F0C
.text$x:00003F0C __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003F0C                                         ; DATA XREF: .xdata$x:00003F40o
.text$x:00003F0C                 mov     ecx, [ebp-10h]
.text$x:00003F0F                 jmp     ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text$x:00003F0F __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003F0F
.text$x:00003F14
.text$x:00003F14 ; =============== S U B R O U T I N E =======================================
.text$x:00003F14
.text$x:00003F14
.text$x:00003F14 __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00003F14                                         ; DATA XREF: .xdata$x:00003F48o
.text$x:00003F14                 mov     ecx, [ebp-10h]
.text$x:00003F17                 add     ecx, 0Ch
.text$x:00003F1A                 jmp     ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text$x:00003F1A __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003F1A
.text$x:00003F1F
.text$x:00003F1F ; =============== S U B R O U T I N E =======================================
.text$x:00003F1F
.text$x:00003F1F
.text$x:00003F1F __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text$x:00003F1F                                         ; DATA XREF: NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+5o
.text$x:00003F1F
.text$x:00003F1F arg_4           = dword ptr  8
.text$x:00003F1F
.text$x:00003F1F                 mov     edx, [esp+arg_4]
.text$x:00003F23                 lea     eax, [edx+0Ch]
.text$x:00003F26                 mov     ecx, [edx-8]
.text$x:00003F29                 xor     ecx, eax
.text$x:00003F2B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003F30                 mov     eax, offset __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text$x:00003F35                 jmp     ___CxxFrameHandler3
.text$x:00003F35 __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text$x:00003F35
.text$x:00003F35 ; ---------------------------------------------------------------------------
.text$x:00003F3A                 align 4
.text$x:00003F3A _text$x         ends
.text$x:00003F3A
.xdata$x:00003F3C ; ===========================================================================
.xdata$x:00003F3C
.xdata$x:00003F3C ; Segment type: Pure data
.xdata$x:00003F3C ; Segment permissions: Read
.xdata$x:00003F3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003F3C                 assume cs:_xdata$x
.xdata$x:00003F3C                 ;org 3F3Ch
.xdata$x:00003F3C ; COMDAT (pick associative to section at 3E94)
.xdata$x:00003F3C __unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003F3C                                         ; DATA XREF: .xdata$x:00003F54o
.xdata$x:00003F3D                 db 0FFh
.xdata$x:00003F3E                 db 0FFh
.xdata$x:00003F3F                 db 0FFh
.xdata$x:00003F40                 dd offset __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003F44                 align 8
.xdata$x:00003F48                 dd offset __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003F4C __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003F4C                                         ; DATA XREF: __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003F4D                 db    5
.xdata$x:00003F4E                 db  93h ; ô
.xdata$x:00003F4F                 db  19h
.xdata$x:00003F50                 db    2
.xdata$x:00003F51                 db    0
.xdata$x:00003F52                 db    0
.xdata$x:00003F53                 db    0
.xdata$x:00003F54                 dd offset __unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.xdata$x:00003F58                 db    0
.xdata$x:00003F59                 db    0
.xdata$x:00003F5A                 db    0
.xdata$x:00003F5B                 db    0
.xdata$x:00003F5C                 db    0
.xdata$x:00003F5D                 db    0
.xdata$x:00003F5E                 db    0
.xdata$x:00003F5F                 db    0
.xdata$x:00003F60                 db    0
.xdata$x:00003F61                 db    0
.xdata$x:00003F62                 db    0
.xdata$x:00003F63                 db    0
.xdata$x:00003F64                 db    0
.xdata$x:00003F65                 db    0
.xdata$x:00003F66                 db    0
.xdata$x:00003F67                 db    0
.xdata$x:00003F68                 db    0
.xdata$x:00003F69                 db    0
.xdata$x:00003F6A                 db    0
.xdata$x:00003F6B                 db    0
.xdata$x:00003F6C                 db    1
.xdata$x:00003F6D                 db    0
.xdata$x:00003F6E                 db    0
.xdata$x:00003F6F                 db    0
.xdata$x:00003F6F _xdata$x        ends
.xdata$x:00003F6F
.text:00003F70 ; ===========================================================================
.text:00003F70
.text:00003F70 ; Segment type: Pure code
.text:00003F70 ; Segment permissions: Read/Execute
.text:00003F70 _text           segment para public 'CODE' use32
.text:00003F70                 assume cs:_text
.text:00003F70                 ;org 3F70h
.text:00003F70 ; COMDAT (pick any)
.text:00003F70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003F70
.text:00003F70 ; =============== S U B R O U T I N E =======================================
.text:00003F70
.text:00003F70 ; Attributes: bp-based frame
.text:00003F70
.text:00003F70 ; _DWORD __thiscall NArchive::N7z::COutArchive::~COutArchive(NArchive::N7z::COutArchive *__hidden this)
.text:00003F70                 public ??1COutArchive@N7z@NArchive@@QAE@XZ
.text:00003F70 ??1COutArchive@N7z@NArchive@@QAE@XZ proc near
.text:00003F70                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+147Ep
.text:00003F70                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1535p ...
.text:00003F70
.text:00003F70 var_10          = dword ptr -10h
.text:00003F70 var_C           = dword ptr -0Ch
.text:00003F70 var_4           = dword ptr -4
.text:00003F70
.text:00003F70                 push    ebp
.text:00003F71                 mov     ebp, esp
.text:00003F73                 push    0FFFFFFFFh
.text:00003F75                 push    offset __ehhandler$??1COutArchive@N7z@NArchive@@QAE@XZ
.text:00003F7A                 mov     eax, large fs:0
.text:00003F80                 push    eax
.text:00003F81                 push    ecx
.text:00003F82                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003F89                 mov     eax, dword ptr ds:___security_cookie
.text:00003F8E                 xor     eax, ebp
.text:00003F90                 push    eax
.text:00003F91                 lea     eax, [ebp+var_C]
.text:00003F94                 mov     large fs:0, eax
.text:00003F9A                 mov     [ebp+var_10], ecx
.text:00003F9D                 mov     [ebp+var_4], 1
.text:00003FA4                 mov     ecx, [ebp+var_10]
.text:00003FA7                 add     ecx, 54h ; 'T'
.text:00003FAA                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003FAF                 mov     byte ptr [ebp+var_4], 0
.text:00003FB3                 mov     ecx, [ebp+var_10]
.text:00003FB6                 add     ecx, 50h ; 'P'
.text:00003FB9                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00003FBE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003FC5                 mov     ecx, [ebp+var_10]
.text:00003FC8                 add     ecx, 18h        ; this
.text:00003FCB                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00003FD0                 mov     ecx, [ebp+var_C]
.text:00003FD3                 mov     large fs:0, ecx
.text:00003FDA                 pop     ecx
.text:00003FDB                 add     esp, 10h
.text:00003FDE                 cmp     ebp, esp
.text:00003FE0                 call    __RTC_CheckEsp
.text:00003FE5                 mov     esp, ebp
.text:00003FE7                 pop     ebp
.text:00003FE8                 retn
.text:00003FE8 ??1COutArchive@N7z@NArchive@@QAE@XZ endp
.text:00003FE8
.text:00003FE8 ; ---------------------------------------------------------------------------
.text:00003FE9                 align 4
.text:00003FE9 _text           ends
.text:00003FE9
.text$x:00003FEC ; ===========================================================================
.text$x:00003FEC
.text$x:00003FEC ; Segment type: Pure code
.text$x:00003FEC ; Segment permissions: Read/Execute
.text$x:00003FEC _text$x         segment para public 'CODE' use32
.text$x:00003FEC                 assume cs:_text$x
.text$x:00003FEC                 ;org 3FECh
.text$x:00003FEC ; COMDAT (pick associative to section at 3F70)
.text$x:00003FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003FEC
.text$x:00003FEC ; =============== S U B R O U T I N E =======================================
.text$x:00003FEC
.text$x:00003FEC
.text$x:00003FEC __unwindfunclet$??1COutArchive@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003FEC                                         ; DATA XREF: .xdata$x:00004024o
.text$x:00003FEC                 mov     ecx, [ebp-10h]
.text$x:00003FEF                 add     ecx, 18h        ; this
.text$x:00003FF2                 jmp     ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text$x:00003FF2 __unwindfunclet$??1COutArchive@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003FF2
.text$x:00003FF7
.text$x:00003FF7 ; =============== S U B R O U T I N E =======================================
.text$x:00003FF7
.text$x:00003FF7
.text$x:00003FF7 __unwindfunclet$??1COutArchive@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00003FF7                                         ; DATA XREF: .xdata$x:0000402Co
.text$x:00003FF7                 mov     ecx, [ebp-10h]
.text$x:00003FFA                 add     ecx, 50h ; 'P'
.text$x:00003FFD                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00003FFD __unwindfunclet$??1COutArchive@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003FFD
.text$x:00004002
.text$x:00004002 ; =============== S U B R O U T I N E =======================================
.text$x:00004002
.text$x:00004002
.text$x:00004002 __ehhandler$??1COutArchive@N7z@NArchive@@QAE@XZ proc near
.text$x:00004002                                         ; DATA XREF: NArchive::N7z::COutArchive::~COutArchive(void)+5o
.text$x:00004002
.text$x:00004002 arg_4           = dword ptr  8
.text$x:00004002
.text$x:00004002                 mov     edx, [esp+arg_4]
.text$x:00004006                 lea     eax, [edx+0Ch]
.text$x:00004009                 mov     ecx, [edx-8]
.text$x:0000400C                 xor     ecx, eax
.text$x:0000400E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004013                 mov     eax, offset __ehfuncinfo$??1COutArchive@N7z@NArchive@@QAE@XZ
.text$x:00004018                 jmp     ___CxxFrameHandler3
.text$x:00004018 __ehhandler$??1COutArchive@N7z@NArchive@@QAE@XZ endp
.text$x:00004018
.text$x:00004018 ; ---------------------------------------------------------------------------
.text$x:0000401D                 align 10h
.text$x:0000401D _text$x         ends
.text$x:0000401D
.xdata$x:00004020 ; ===========================================================================
.xdata$x:00004020
.xdata$x:00004020 ; Segment type: Pure data
.xdata$x:00004020 ; Segment permissions: Read
.xdata$x:00004020 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004020                 assume cs:_xdata$x
.xdata$x:00004020                 ;org 4020h
.xdata$x:00004020 ; COMDAT (pick associative to section at 3F70)
.xdata$x:00004020 __unwindtable$??1COutArchive@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004020                                         ; DATA XREF: .xdata$x:00004038o
.xdata$x:00004021                 db 0FFh
.xdata$x:00004022                 db 0FFh
.xdata$x:00004023                 db 0FFh
.xdata$x:00004024                 dd offset __unwindfunclet$??1COutArchive@N7z@NArchive@@QAE@XZ$0
.xdata$x:00004028                 db    0
.xdata$x:00004029                 db    0
.xdata$x:0000402A                 db    0
.xdata$x:0000402B                 db    0
.xdata$x:0000402C                 dd offset __unwindfunclet$??1COutArchive@N7z@NArchive@@QAE@XZ$1
.xdata$x:00004030 __ehfuncinfo$??1COutArchive@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004030                                         ; DATA XREF: __ehhandler$??1COutArchive@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00004031                 db    5
.xdata$x:00004032                 db  93h ; ô
.xdata$x:00004033                 db  19h
.xdata$x:00004034                 db    2
.xdata$x:00004035                 db    0
.xdata$x:00004036                 db    0
.xdata$x:00004037                 db    0
.xdata$x:00004038                 dd offset __unwindtable$??1COutArchive@N7z@NArchive@@QAE@XZ
.xdata$x:0000403C                 db    0
.xdata$x:0000403D                 db    0
.xdata$x:0000403E                 db    0
.xdata$x:0000403F                 db    0
.xdata$x:00004040                 db    0
.xdata$x:00004041                 db    0
.xdata$x:00004042                 db    0
.xdata$x:00004043                 db    0
.xdata$x:00004044                 db    0
.xdata$x:00004045                 db    0
.xdata$x:00004046                 db    0
.xdata$x:00004047                 db    0
.xdata$x:00004048                 db    0
.xdata$x:00004049                 db    0
.xdata$x:0000404A                 db    0
.xdata$x:0000404B                 db    0
.xdata$x:0000404C                 db    0
.xdata$x:0000404D                 db    0
.xdata$x:0000404E                 db    0
.xdata$x:0000404F                 db    0
.xdata$x:00004050                 db    1
.xdata$x:00004051                 db    0
.xdata$x:00004052                 db    0
.xdata$x:00004053                 db    0
.xdata$x:00004053 _xdata$x        ends
.xdata$x:00004053
.text:00004054 ; ===========================================================================
.text:00004054
.text:00004054 ; Segment type: Pure code
.text:00004054 ; Segment permissions: Read/Execute
.text:00004054 _text           segment para public 'CODE' use32
.text:00004054                 assume cs:_text
.text:00004054                 ;org 4054h
.text:00004054 ; COMDAT (pick any)
.text:00004054                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004054
.text:00004054 ; =============== S U B R O U T I N E =======================================
.text:00004054
.text:00004054 ; Attributes: bp-based frame
.text:00004054
.text:00004054 ; _DWORD __thiscall NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(NArchive::N7z::CArchiveDatabaseOut *__hidden this)
.text:00004054                 public ??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
.text:00004054 ??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ proc near
.text:00004054                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+136Ep
.text:00004054
.text:00004054 var_10          = dword ptr -10h
.text:00004054 var_C           = dword ptr -0Ch
.text:00004054 var_4           = dword ptr -4
.text:00004054
.text:00004054                 push    ebp
.text:00004055                 mov     ebp, esp
.text:00004057                 push    0FFFFFFFFh
.text:00004059                 push    offset __ehhandler$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
.text:0000405E                 mov     eax, large fs:0
.text:00004064                 push    eax
.text:00004065                 push    ecx
.text:00004066                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000406D                 mov     eax, dword ptr ds:___security_cookie
.text:00004072                 xor     eax, ebp
.text:00004074                 push    eax
.text:00004075                 lea     eax, [ebp+var_C]
.text:00004078                 mov     large fs:0, eax
.text:0000407E                 mov     [ebp+var_10], ecx
.text:00004081                 mov     ecx, [ebp+var_10] ; this
.text:00004084                 call    ??0COutFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutFolders::COutFolders(void)
.text:00004089                 mov     [ebp+var_4], 0
.text:00004090                 mov     ecx, [ebp+var_10]
.text:00004093                 add     ecx, 30h ; '0'
.text:00004096                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:0000409B                 mov     byte ptr [ebp+var_4], 1
.text:0000409F                 mov     ecx, [ebp+var_10]
.text:000040A2                 add     ecx, 3Ch ; '<'  ; this
.text:000040A5                 call    ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)
.text:000040AA                 mov     byte ptr [ebp+var_4], 2
.text:000040AE                 mov     ecx, [ebp+var_10]
.text:000040B1                 add     ecx, 54h ; 'T'
.text:000040B4                 call    ??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::CObjectVector<NArchive::N7z::CFolder>(void)
.text:000040B9                 mov     byte ptr [ebp+var_4], 3
.text:000040BD                 mov     ecx, [ebp+var_10]
.text:000040C0                 add     ecx, 60h ; '`'
.text:000040C3                 call    ??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::CRecordVector<NArchive::N7z::CFileItem>(void)
.text:000040C8                 mov     byte ptr [ebp+var_4], 4
.text:000040CC                 mov     ecx, [ebp+var_10]
.text:000040CF                 add     ecx, 6Ch ; 'l'
.text:000040D2                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:000040D7                 mov     byte ptr [ebp+var_4], 5
.text:000040DB                 mov     ecx, [ebp+var_10]
.text:000040DE                 add     ecx, 78h ; 'x'  ; this
.text:000040E1                 call    ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::CUInt64DefVector(void)
.text:000040E6                 mov     byte ptr [ebp+var_4], 6
.text:000040EA                 mov     ecx, [ebp+var_10]
.text:000040ED                 add     ecx, 90h ; 'É'  ; this
.text:000040F3                 call    ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::CUInt64DefVector(void)
.text:000040F8                 mov     byte ptr [ebp+var_4], 7
.text:000040FC                 mov     ecx, [ebp+var_10]
.text:000040FF                 add     ecx, 0A8h ; '¿' ; this
.text:00004105                 call    ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::CUInt64DefVector(void)
.text:0000410A                 mov     byte ptr [ebp+var_4], 8
.text:0000410E                 mov     ecx, [ebp+var_10]
.text:00004111                 add     ecx, 0C0h ; '+' ; this
.text:00004117                 call    ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::CUInt64DefVector(void)
.text:0000411C                 mov     byte ptr [ebp+var_4], 9
.text:00004120                 mov     ecx, [ebp+var_10]
.text:00004123                 add     ecx, 0D8h ; '+'
.text:00004129                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:0000412E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004135                 mov     eax, [ebp+var_10]
.text:00004138                 mov     ecx, [ebp+var_C]
.text:0000413B                 mov     large fs:0, ecx
.text:00004142                 pop     ecx
.text:00004143                 add     esp, 10h
.text:00004146                 cmp     ebp, esp
.text:00004148                 call    __RTC_CheckEsp
.text:0000414D                 mov     esp, ebp
.text:0000414F                 pop     ebp
.text:00004150                 retn
.text:00004150 ??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ endp
.text:00004150
.text:00004150 ; ---------------------------------------------------------------------------
.text:00004151                 align 4
.text:00004151 _text           ends
.text:00004151
.text$x:00004154 ; ===========================================================================
.text$x:00004154
.text$x:00004154 ; Segment type: Pure code
.text$x:00004154 ; Segment permissions: Read/Execute
.text$x:00004154 _text$x         segment para public 'CODE' use32
.text$x:00004154                 assume cs:_text$x
.text$x:00004154                 ;org 4154h
.text$x:00004154 ; COMDAT (pick associative to section at 4054)
.text$x:00004154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004154
.text$x:00004154 ; =============== S U B R O U T I N E =======================================
.text$x:00004154
.text$x:00004154
.text$x:00004154 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00004154                                         ; DATA XREF: .xdata$x:0000420Co
.text$x:00004154                 mov     ecx, [ebp-10h]  ; this
.text$x:00004157                 jmp     ??1COutFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutFolders::~COutFolders(void)
.text$x:00004157 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00004157
.text$x:0000415C
.text$x:0000415C ; =============== S U B R O U T I N E =======================================
.text$x:0000415C
.text$x:0000415C
.text$x:0000415C __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:0000415C                                         ; DATA XREF: .xdata$x:00004214o
.text$x:0000415C                 mov     ecx, [ebp-10h]
.text$x:0000415F                 add     ecx, 30h ; '0'
.text$x:00004162                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:00004162 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00004162
.text$x:00004167
.text$x:00004167 ; =============== S U B R O U T I N E =======================================
.text$x:00004167
.text$x:00004167
.text$x:00004167 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:00004167                                         ; DATA XREF: .xdata$x:0000421Co
.text$x:00004167                 mov     ecx, [ebp-10h]
.text$x:0000416A                 add     ecx, 3Ch ; '<'  ; this
.text$x:0000416D                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:0000416D __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$2 endp
.text$x:0000416D
.text$x:00004172
.text$x:00004172 ; =============== S U B R O U T I N E =======================================
.text$x:00004172
.text$x:00004172
.text$x:00004172 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:00004172                                         ; DATA XREF: .xdata$x:00004224o
.text$x:00004172                 mov     ecx, [ebp-10h]
.text$x:00004175                 add     ecx, 54h ; 'T'
.text$x:00004178                 jmp     ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)
.text$x:00004178 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$3 endp
.text$x:00004178
.text$x:0000417D
.text$x:0000417D ; =============== S U B R O U T I N E =======================================
.text$x:0000417D
.text$x:0000417D
.text$x:0000417D __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:0000417D                                         ; DATA XREF: .xdata$x:0000422Co
.text$x:0000417D                 mov     ecx, [ebp-10h]
.text$x:00004180                 add     ecx, 60h ; '`'
.text$x:00004183                 jmp     ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>(void)
.text$x:00004183 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$4 endp
.text$x:00004183
.text$x:00004188
.text$x:00004188 ; =============== S U B R O U T I N E =======================================
.text$x:00004188
.text$x:00004188
.text$x:00004188 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$5 proc near
.text$x:00004188                                         ; DATA XREF: .xdata$x:00004234o
.text$x:00004188                 mov     ecx, [ebp-10h]
.text$x:0000418B                 add     ecx, 6Ch ; 'l'
.text$x:0000418E                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:0000418E __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$5 endp
.text$x:0000418E
.text$x:00004193
.text$x:00004193 ; =============== S U B R O U T I N E =======================================
.text$x:00004193
.text$x:00004193
.text$x:00004193 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$6 proc near
.text$x:00004193                                         ; DATA XREF: .xdata$x:0000423Co
.text$x:00004193                 mov     ecx, [ebp-10h]
.text$x:00004196                 add     ecx, 78h ; 'x'  ; this
.text$x:00004199                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:00004199 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$6 endp
.text$x:00004199
.text$x:0000419E
.text$x:0000419E ; =============== S U B R O U T I N E =======================================
.text$x:0000419E
.text$x:0000419E
.text$x:0000419E __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$7 proc near
.text$x:0000419E                                         ; DATA XREF: .xdata$x:00004244o
.text$x:0000419E                 mov     ecx, [ebp-10h]
.text$x:000041A1                 add     ecx, 90h ; 'É'  ; this
.text$x:000041A7                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:000041A7 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$7 endp
.text$x:000041A7
.text$x:000041AC
.text$x:000041AC ; =============== S U B R O U T I N E =======================================
.text$x:000041AC
.text$x:000041AC
.text$x:000041AC __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$8 proc near
.text$x:000041AC                                         ; DATA XREF: .xdata$x:0000424Co
.text$x:000041AC                 mov     ecx, [ebp-10h]
.text$x:000041AF                 add     ecx, 0A8h ; '¿' ; this
.text$x:000041B5                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:000041B5 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$8 endp
.text$x:000041B5
.text$x:000041BA
.text$x:000041BA ; =============== S U B R O U T I N E =======================================
.text$x:000041BA
.text$x:000041BA
.text$x:000041BA __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$9 proc near
.text$x:000041BA                                         ; DATA XREF: .xdata$x:00004254o
.text$x:000041BA                 mov     ecx, [ebp-10h]
.text$x:000041BD                 add     ecx, 0C0h ; '+' ; this
.text$x:000041C3                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:000041C3 __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$9 endp
.text$x:000041C3
.text$x:000041C8
.text$x:000041C8 ; =============== S U B R O U T I N E =======================================
.text$x:000041C8
.text$x:000041C8
.text$x:000041C8 __ehhandler$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ proc near
.text$x:000041C8                                         ; DATA XREF: NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(void)+5o
.text$x:000041C8
.text$x:000041C8 arg_4           = dword ptr  8
.text$x:000041C8
.text$x:000041C8                 mov     edx, [esp+arg_4]
.text$x:000041CC                 lea     eax, [edx+0Ch]
.text$x:000041CF                 mov     ecx, [edx-8]
.text$x:000041D2                 xor     ecx, eax
.text$x:000041D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000041D9                 mov     eax, offset __ehfuncinfo$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
.text$x:000041DE                 jmp     ___CxxFrameHandler3
.text$x:000041DE __ehhandler$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ endp
.text$x:000041DE
.text$x:000041DE ; ---------------------------------------------------------------------------
.text$x:000041E3                 align 4
.text$x:000041E3 _text$x         ends
.text$x:000041E3
.xdata$x:000041E4 ; ===========================================================================
.xdata$x:000041E4
.xdata$x:000041E4 ; Segment type: Pure data
.xdata$x:000041E4 ; Segment permissions: Read
.xdata$x:000041E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000041E4                 assume cs:_xdata$x
.xdata$x:000041E4                 ;org 41E4h
.xdata$x:000041E4 ; COMDAT (pick associative to section at 4054)
.xdata$x:000041E4 __ehfuncinfo$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000041E4                                         ; DATA XREF: __ehhandler$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ+11o
.xdata$x:000041E5                 db    5
.xdata$x:000041E6                 db  93h ; ô
.xdata$x:000041E7                 db  19h
.xdata$x:000041E8                 db  0Ah
.xdata$x:000041E9                 db    0
.xdata$x:000041EA                 db    0
.xdata$x:000041EB                 db    0
.xdata$x:000041EC                 dd offset __unwindtable$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
.xdata$x:000041F0                 db    0
.xdata$x:000041F1                 db    0
.xdata$x:000041F2                 db    0
.xdata$x:000041F3                 db    0
.xdata$x:000041F4                 db    0
.xdata$x:000041F5                 db    0
.xdata$x:000041F6                 db    0
.xdata$x:000041F7                 db    0
.xdata$x:000041F8                 db    0
.xdata$x:000041F9                 db    0
.xdata$x:000041FA                 db    0
.xdata$x:000041FB                 db    0
.xdata$x:000041FC                 db    0
.xdata$x:000041FD                 db    0
.xdata$x:000041FE                 db    0
.xdata$x:000041FF                 db    0
.xdata$x:00004200                 db    0
.xdata$x:00004201                 db    0
.xdata$x:00004202                 db    0
.xdata$x:00004203                 db    0
.xdata$x:00004204                 db    1
.xdata$x:00004205                 db    0
.xdata$x:00004206                 db    0
.xdata$x:00004207                 db    0
.xdata$x:00004208 __unwindtable$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004208                                         ; DATA XREF: .xdata$x:000041ECo
.xdata$x:00004209                 db 0FFh
.xdata$x:0000420A                 db 0FFh
.xdata$x:0000420B                 db 0FFh
.xdata$x:0000420C                 dd offset __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$0
.xdata$x:00004210                 db    0
.xdata$x:00004211                 db    0
.xdata$x:00004212                 db    0
.xdata$x:00004213                 db    0
.xdata$x:00004214                 dd offset __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$1
.xdata$x:00004218                 db    1
.xdata$x:00004219                 db    0
.xdata$x:0000421A                 db    0
.xdata$x:0000421B                 db    0
.xdata$x:0000421C                 dd offset __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$2
.xdata$x:00004220                 db    2
.xdata$x:00004221                 db    0
.xdata$x:00004222                 db    0
.xdata$x:00004223                 db    0
.xdata$x:00004224                 dd offset __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$3
.xdata$x:00004228                 db    3
.xdata$x:00004229                 db    0
.xdata$x:0000422A                 db    0
.xdata$x:0000422B                 db    0
.xdata$x:0000422C                 dd offset __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$4
.xdata$x:00004230                 db    4
.xdata$x:00004231                 db    0
.xdata$x:00004232                 db    0
.xdata$x:00004233                 db    0
.xdata$x:00004234                 dd offset __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$5
.xdata$x:00004238                 db    5
.xdata$x:00004239                 db    0
.xdata$x:0000423A                 db    0
.xdata$x:0000423B                 db    0
.xdata$x:0000423C                 dd offset __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$6
.xdata$x:00004240                 db    6
.xdata$x:00004241                 db    0
.xdata$x:00004242                 db    0
.xdata$x:00004243                 db    0
.xdata$x:00004244                 dd offset __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$7
.xdata$x:00004248                 db    7
.xdata$x:00004249                 db    0
.xdata$x:0000424A                 db    0
.xdata$x:0000424B                 db    0
.xdata$x:0000424C                 dd offset __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$8
.xdata$x:00004250                 db    8
.xdata$x:00004251                 db    0
.xdata$x:00004252                 db    0
.xdata$x:00004253                 db    0
.xdata$x:00004254                 dd offset __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$9
.xdata$x:00004254 _xdata$x        ends
.xdata$x:00004254
.text:00004258 ; ===========================================================================
.text:00004258
.text:00004258 ; Segment type: Pure code
.text:00004258 ; Segment permissions: Read/Execute
.text:00004258 _text           segment para public 'CODE' use32
.text:00004258                 assume cs:_text
.text:00004258                 ;org 4258h
.text:00004258 ; COMDAT (pick any)
.text:00004258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004258
.text:00004258 ; =============== S U B R O U T I N E =======================================
.text:00004258
.text:00004258 ; Attributes: bp-based frame
.text:00004258
.text:00004258 ; _DWORD __thiscall NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(NArchive::N7z::CUInt64DefVector *__hidden this)
.text:00004258                 public ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text:00004258 ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ proc near
.text:00004258                                         ; CODE XREF: __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$6+6j
.text:00004258                                         ; __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$7+9j ...
.text:00004258
.text:00004258 var_10          = dword ptr -10h
.text:00004258 var_C           = dword ptr -0Ch
.text:00004258 var_4           = dword ptr -4
.text:00004258
.text:00004258                 push    ebp
.text:00004259                 mov     ebp, esp
.text:0000425B                 push    0FFFFFFFFh
.text:0000425D                 push    offset __ehhandler$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text:00004262                 mov     eax, large fs:0
.text:00004268                 push    eax
.text:00004269                 push    ecx
.text:0000426A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004271                 mov     eax, dword ptr ds:___security_cookie
.text:00004276                 xor     eax, ebp
.text:00004278                 push    eax
.text:00004279                 lea     eax, [ebp+var_C]
.text:0000427C                 mov     large fs:0, eax
.text:00004282                 mov     [ebp+var_10], ecx
.text:00004285                 mov     [ebp+var_4], 0
.text:0000428C                 mov     ecx, [ebp+var_10]
.text:0000428F                 add     ecx, 0Ch
.text:00004292                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00004297                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000429E                 mov     ecx, [ebp+var_10]
.text:000042A1                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000042A6                 mov     ecx, [ebp+var_C]
.text:000042A9                 mov     large fs:0, ecx
.text:000042B0                 pop     ecx
.text:000042B1                 add     esp, 10h
.text:000042B4                 cmp     ebp, esp
.text:000042B6                 call    __RTC_CheckEsp
.text:000042BB                 mov     esp, ebp
.text:000042BD                 pop     ebp
.text:000042BE                 retn
.text:000042BE ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ endp
.text:000042BE
.text:000042BE ; ---------------------------------------------------------------------------
.text:000042BF                 align 10h
.text:000042BF _text           ends
.text:000042BF
.text$x:000042C0 ; ===========================================================================
.text$x:000042C0
.text$x:000042C0 ; Segment type: Pure code
.text$x:000042C0 ; Segment permissions: Read/Execute
.text$x:000042C0 _text$x         segment para public 'CODE' use32
.text$x:000042C0                 assume cs:_text$x
.text$x:000042C0                 ;org 42C0h
.text$x:000042C0 ; COMDAT (pick associative to section at 4258)
.text$x:000042C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000042C0
.text$x:000042C0 ; =============== S U B R O U T I N E =======================================
.text$x:000042C0
.text$x:000042C0
.text$x:000042C0 __unwindfunclet$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000042C0                                         ; DATA XREF: .xdata$x:000042E8o
.text$x:000042C0                 mov     ecx, [ebp-10h]
.text$x:000042C3                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000042C3 __unwindfunclet$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000042C3
.text$x:000042C8
.text$x:000042C8 ; =============== S U B R O U T I N E =======================================
.text$x:000042C8
.text$x:000042C8
.text$x:000042C8 __ehhandler$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:000042C8                                         ; DATA XREF: NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)+5o
.text$x:000042C8
.text$x:000042C8 arg_4           = dword ptr  8
.text$x:000042C8
.text$x:000042C8                 mov     edx, [esp+arg_4]
.text$x:000042CC                 lea     eax, [edx+0Ch]
.text$x:000042CF                 mov     ecx, [edx-8]
.text$x:000042D2                 xor     ecx, eax
.text$x:000042D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000042D9                 mov     eax, offset __ehfuncinfo$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text$x:000042DE                 jmp     ___CxxFrameHandler3
.text$x:000042DE __ehhandler$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:000042DE
.text$x:000042DE ; ---------------------------------------------------------------------------
.text$x:000042E3                 align 4
.text$x:000042E3 _text$x         ends
.text$x:000042E3
.xdata$x:000042E4 ; ===========================================================================
.xdata$x:000042E4
.xdata$x:000042E4 ; Segment type: Pure data
.xdata$x:000042E4 ; Segment permissions: Read
.xdata$x:000042E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000042E4                 assume cs:_xdata$x
.xdata$x:000042E4                 ;org 42E4h
.xdata$x:000042E4 ; COMDAT (pick associative to section at 4258)
.xdata$x:000042E4 __unwindtable$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:000042E4                                         ; DATA XREF: .xdata$x:000042F4o
.xdata$x:000042E5                 db 0FFh
.xdata$x:000042E6                 db 0FFh
.xdata$x:000042E7                 db 0FFh
.xdata$x:000042E8                 dd offset __unwindfunclet$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:000042EC __ehfuncinfo$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000042EC                                         ; DATA XREF: __ehhandler$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:000042ED                 db    5
.xdata$x:000042EE                 db  93h ; ô
.xdata$x:000042EF                 db  19h
.xdata$x:000042F0                 db    1
.xdata$x:000042F1                 db    0
.xdata$x:000042F2                 db    0
.xdata$x:000042F3                 db    0
.xdata$x:000042F4                 dd offset __unwindtable$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:000042F8                 db    0
.xdata$x:000042F9                 db    0
.xdata$x:000042FA                 db    0
.xdata$x:000042FB                 db    0
.xdata$x:000042FC                 db    0
.xdata$x:000042FD                 db    0
.xdata$x:000042FE                 db    0
.xdata$x:000042FF                 db    0
.xdata$x:00004300                 db    0
.xdata$x:00004301                 db    0
.xdata$x:00004302                 db    0
.xdata$x:00004303                 db    0
.xdata$x:00004304                 db    0
.xdata$x:00004305                 db    0
.xdata$x:00004306                 db    0
.xdata$x:00004307                 db    0
.xdata$x:00004308                 db    0
.xdata$x:00004309                 db    0
.xdata$x:0000430A                 db    0
.xdata$x:0000430B                 db    0
.xdata$x:0000430C                 db    1
.xdata$x:0000430D                 db    0
.xdata$x:0000430E                 db    0
.xdata$x:0000430F                 db    0
.xdata$x:0000430F _xdata$x        ends
.xdata$x:0000430F
.text:00004310 ; ===========================================================================
.text:00004310
.text:00004310 ; Segment type: Pure code
.text:00004310 ; Segment permissions: Read/Execute
.text:00004310 _text           segment para public 'CODE' use32
.text:00004310                 assume cs:_text
.text:00004310                 ;org 4310h
.text:00004310 ; COMDAT (pick any)
.text:00004310                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004310
.text:00004310 ; =============== S U B R O U T I N E =======================================
.text:00004310
.text:00004310 ; Attributes: bp-based frame
.text:00004310
.text:00004310 ; _DWORD __thiscall NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(NArchive::N7z::CUInt32DefVector *__hidden this)
.text:00004310                 public ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00004310 ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text:00004310                                         ; CODE XREF: __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$2+6j
.text:00004310                                         ; NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut(void)+BEp ...
.text:00004310
.text:00004310 var_10          = dword ptr -10h
.text:00004310 var_C           = dword ptr -0Ch
.text:00004310 var_4           = dword ptr -4
.text:00004310
.text:00004310                 push    ebp
.text:00004311                 mov     ebp, esp
.text:00004313                 push    0FFFFFFFFh
.text:00004315                 push    offset __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:0000431A                 mov     eax, large fs:0
.text:00004320                 push    eax
.text:00004321                 push    ecx
.text:00004322                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004329                 mov     eax, dword ptr ds:___security_cookie
.text:0000432E                 xor     eax, ebp
.text:00004330                 push    eax
.text:00004331                 lea     eax, [ebp+var_C]
.text:00004334                 mov     large fs:0, eax
.text:0000433A                 mov     [ebp+var_10], ecx
.text:0000433D                 mov     [ebp+var_4], 0
.text:00004344                 mov     ecx, [ebp+var_10]
.text:00004347                 add     ecx, 0Ch
.text:0000434A                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000434F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004356                 mov     ecx, [ebp+var_10]
.text:00004359                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:0000435E                 mov     ecx, [ebp+var_C]
.text:00004361                 mov     large fs:0, ecx
.text:00004368                 pop     ecx
.text:00004369                 add     esp, 10h
.text:0000436C                 cmp     ebp, esp
.text:0000436E                 call    __RTC_CheckEsp
.text:00004373                 mov     esp, ebp
.text:00004375                 pop     ebp
.text:00004376                 retn
.text:00004376 ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text:00004376
.text:00004376 ; ---------------------------------------------------------------------------
.text:00004377                 align 4
.text:00004377 _text           ends
.text:00004377
.text$x:00004378 ; ===========================================================================
.text$x:00004378
.text$x:00004378 ; Segment type: Pure code
.text$x:00004378 ; Segment permissions: Read/Execute
.text$x:00004378 _text$x         segment para public 'CODE' use32
.text$x:00004378                 assume cs:_text$x
.text$x:00004378                 ;org 4378h
.text$x:00004378 ; COMDAT (pick associative to section at 4310)
.text$x:00004378                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004378
.text$x:00004378 ; =============== S U B R O U T I N E =======================================
.text$x:00004378
.text$x:00004378
.text$x:00004378 __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00004378                                         ; DATA XREF: .xdata$x:000043A0o
.text$x:00004378                 mov     ecx, [ebp-10h]
.text$x:0000437B                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:0000437B __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000437B
.text$x:00004380
.text$x:00004380 ; =============== S U B R O U T I N E =======================================
.text$x:00004380
.text$x:00004380
.text$x:00004380 __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:00004380                                         ; DATA XREF: NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)+5o
.text$x:00004380
.text$x:00004380 arg_4           = dword ptr  8
.text$x:00004380
.text$x:00004380                 mov     edx, [esp+arg_4]
.text$x:00004384                 lea     eax, [edx+0Ch]
.text$x:00004387                 mov     ecx, [edx-8]
.text$x:0000438A                 xor     ecx, eax
.text$x:0000438C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004391                 mov     eax, offset __ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text$x:00004396                 jmp     ___CxxFrameHandler3
.text$x:00004396 __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:00004396
.text$x:00004396 ; ---------------------------------------------------------------------------
.text$x:0000439B                 align 4
.text$x:0000439B _text$x         ends
.text$x:0000439B
.xdata$x:0000439C ; ===========================================================================
.xdata$x:0000439C
.xdata$x:0000439C ; Segment type: Pure data
.xdata$x:0000439C ; Segment permissions: Read
.xdata$x:0000439C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000439C                 assume cs:_xdata$x
.xdata$x:0000439C                 ;org 439Ch
.xdata$x:0000439C ; COMDAT (pick associative to section at 4310)
.xdata$x:0000439C __unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000439C                                         ; DATA XREF: .xdata$x:000043ACo
.xdata$x:0000439D                 db 0FFh
.xdata$x:0000439E                 db 0FFh
.xdata$x:0000439F                 db 0FFh
.xdata$x:000043A0                 dd offset __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:000043A4 __ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000043A4                                         ; DATA XREF: __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:000043A5                 db    5
.xdata$x:000043A6                 db  93h ; ô
.xdata$x:000043A7                 db  19h
.xdata$x:000043A8                 db    1
.xdata$x:000043A9                 db    0
.xdata$x:000043AA                 db    0
.xdata$x:000043AB                 db    0
.xdata$x:000043AC                 dd offset __unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:000043B0                 db    0
.xdata$x:000043B1                 db    0
.xdata$x:000043B2                 db    0
.xdata$x:000043B3                 db    0
.xdata$x:000043B4                 db    0
.xdata$x:000043B5                 db    0
.xdata$x:000043B6                 db    0
.xdata$x:000043B7                 db    0
.xdata$x:000043B8                 db    0
.xdata$x:000043B9                 db    0
.xdata$x:000043BA                 db    0
.xdata$x:000043BB                 db    0
.xdata$x:000043BC                 db    0
.xdata$x:000043BD                 db    0
.xdata$x:000043BE                 db    0
.xdata$x:000043BF                 db    0
.xdata$x:000043C0                 db    0
.xdata$x:000043C1                 db    0
.xdata$x:000043C2                 db    0
.xdata$x:000043C3                 db    0
.xdata$x:000043C4                 db    1
.xdata$x:000043C5                 db    0
.xdata$x:000043C6                 db    0
.xdata$x:000043C7                 db    0
.xdata$x:000043C7 _xdata$x        ends
.xdata$x:000043C7
.text:000043C8 ; ===========================================================================
.text:000043C8
.text:000043C8 ; Segment type: Pure code
.text:000043C8 ; Segment permissions: Read/Execute
.text:000043C8 _text           segment para public 'CODE' use32
.text:000043C8                 assume cs:_text
.text:000043C8                 ;org 43C8h
.text:000043C8 ; COMDAT (pick any)
.text:000043C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043C8
.text:000043C8 ; =============== S U B R O U T I N E =======================================
.text:000043C8
.text:000043C8 ; Attributes: bp-based frame
.text:000043C8
.text:000043C8 ; _DWORD __thiscall NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut(NArchive::N7z::CArchiveDatabaseOut *__hidden this)
.text:000043C8                 public ??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
.text:000043C8 ??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ proc near
.text:000043C8                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+146Fp
.text:000043C8                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1526p ...
.text:000043C8
.text:000043C8 var_10          = dword ptr -10h
.text:000043C8 var_C           = dword ptr -0Ch
.text:000043C8 var_4           = dword ptr -4
.text:000043C8
.text:000043C8                 push    ebp
.text:000043C9                 mov     ebp, esp
.text:000043CB                 push    0FFFFFFFFh
.text:000043CD                 push    offset __ehhandler$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
.text:000043D2                 mov     eax, large fs:0
.text:000043D8                 push    eax
.text:000043D9                 push    ecx
.text:000043DA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000043E1                 mov     eax, dword ptr ds:___security_cookie
.text:000043E6                 xor     eax, ebp
.text:000043E8                 push    eax
.text:000043E9                 lea     eax, [ebp+var_C]
.text:000043EC                 mov     large fs:0, eax
.text:000043F2                 mov     [ebp+var_10], ecx
.text:000043F5                 mov     [ebp+var_4], 9
.text:000043FC                 mov     ecx, [ebp+var_10]
.text:000043FF                 add     ecx, 0D8h ; '+'
.text:00004405                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:0000440A                 mov     byte ptr [ebp+var_4], 8
.text:0000440E                 mov     ecx, [ebp+var_10]
.text:00004411                 add     ecx, 0C0h ; '+' ; this
.text:00004417                 call    ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text:0000441C                 mov     byte ptr [ebp+var_4], 7
.text:00004420                 mov     ecx, [ebp+var_10]
.text:00004423                 add     ecx, 0A8h ; '¿' ; this
.text:00004429                 call    ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text:0000442E                 mov     byte ptr [ebp+var_4], 6
.text:00004432                 mov     ecx, [ebp+var_10]
.text:00004435                 add     ecx, 90h ; 'É'  ; this
.text:0000443B                 call    ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text:00004440                 mov     byte ptr [ebp+var_4], 5
.text:00004444                 mov     ecx, [ebp+var_10]
.text:00004447                 add     ecx, 78h ; 'x'  ; this
.text:0000444A                 call    ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text:0000444F                 mov     byte ptr [ebp+var_4], 4
.text:00004453                 mov     ecx, [ebp+var_10]
.text:00004456                 add     ecx, 6Ch ; 'l'
.text:00004459                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:0000445E                 mov     byte ptr [ebp+var_4], 3
.text:00004462                 mov     ecx, [ebp+var_10]
.text:00004465                 add     ecx, 60h ; '`'
.text:00004468                 call    ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>(void)
.text:0000446D                 mov     byte ptr [ebp+var_4], 2
.text:00004471                 mov     ecx, [ebp+var_10]
.text:00004474                 add     ecx, 54h ; 'T'
.text:00004477                 call    ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)
.text:0000447C                 mov     byte ptr [ebp+var_4], 1
.text:00004480                 mov     ecx, [ebp+var_10]
.text:00004483                 add     ecx, 3Ch ; '<'  ; this
.text:00004486                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:0000448B                 mov     byte ptr [ebp+var_4], 0
.text:0000448F                 mov     ecx, [ebp+var_10]
.text:00004492                 add     ecx, 30h ; '0'
.text:00004495                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:0000449A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000044A1                 mov     ecx, [ebp+var_10] ; this
.text:000044A4                 call    ??1COutFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutFolders::~COutFolders(void)
.text:000044A9                 mov     ecx, [ebp+var_C]
.text:000044AC                 mov     large fs:0, ecx
.text:000044B3                 pop     ecx
.text:000044B4                 add     esp, 10h
.text:000044B7                 cmp     ebp, esp
.text:000044B9                 call    __RTC_CheckEsp
.text:000044BE                 mov     esp, ebp
.text:000044C0                 pop     ebp
.text:000044C1                 retn
.text:000044C1 ??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ endp
.text:000044C1
.text:000044C1 ; ---------------------------------------------------------------------------
.text:000044C2                 align 4
.text:000044C2 _text           ends
.text:000044C2
.text$x:000044C4 ; ===========================================================================
.text$x:000044C4
.text$x:000044C4 ; Segment type: Pure code
.text$x:000044C4 ; Segment permissions: Read/Execute
.text$x:000044C4 _text$x         segment para public 'CODE' use32
.text$x:000044C4                 assume cs:_text$x
.text$x:000044C4                 ;org 44C4h
.text$x:000044C4 ; COMDAT (pick associative to section at 43C8)
.text$x:000044C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000044C4
.text$x:000044C4 ; =============== S U B R O U T I N E =======================================
.text$x:000044C4
.text$x:000044C4
.text$x:000044C4 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000044C4                                         ; DATA XREF: .xdata$x:0000457Co
.text$x:000044C4                 mov     ecx, [ebp-10h]  ; this
.text$x:000044C7                 jmp     ??1COutFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutFolders::~COutFolders(void)
.text$x:000044C7 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000044C7
.text$x:000044CC
.text$x:000044CC ; =============== S U B R O U T I N E =======================================
.text$x:000044CC
.text$x:000044CC
.text$x:000044CC __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:000044CC                                         ; DATA XREF: .xdata$x:00004584o
.text$x:000044CC                 mov     ecx, [ebp-10h]
.text$x:000044CF                 add     ecx, 30h ; '0'
.text$x:000044D2                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:000044D2 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$1 endp
.text$x:000044D2
.text$x:000044D7
.text$x:000044D7 ; =============== S U B R O U T I N E =======================================
.text$x:000044D7
.text$x:000044D7
.text$x:000044D7 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:000044D7                                         ; DATA XREF: .xdata$x:0000458Co
.text$x:000044D7                 mov     ecx, [ebp-10h]
.text$x:000044DA                 add     ecx, 3Ch ; '<'  ; this
.text$x:000044DD                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:000044DD __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$2 endp
.text$x:000044DD
.text$x:000044E2
.text$x:000044E2 ; =============== S U B R O U T I N E =======================================
.text$x:000044E2
.text$x:000044E2
.text$x:000044E2 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:000044E2                                         ; DATA XREF: .xdata$x:00004594o
.text$x:000044E2                 mov     ecx, [ebp-10h]
.text$x:000044E5                 add     ecx, 54h ; 'T'
.text$x:000044E8                 jmp     ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)
.text$x:000044E8 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$3 endp
.text$x:000044E8
.text$x:000044ED
.text$x:000044ED ; =============== S U B R O U T I N E =======================================
.text$x:000044ED
.text$x:000044ED
.text$x:000044ED __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:000044ED                                         ; DATA XREF: .xdata$x:0000459Co
.text$x:000044ED                 mov     ecx, [ebp-10h]
.text$x:000044F0                 add     ecx, 60h ; '`'
.text$x:000044F3                 jmp     ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>(void)
.text$x:000044F3 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$4 endp
.text$x:000044F3
.text$x:000044F8
.text$x:000044F8 ; =============== S U B R O U T I N E =======================================
.text$x:000044F8
.text$x:000044F8
.text$x:000044F8 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$5 proc near
.text$x:000044F8                                         ; DATA XREF: .xdata$x:000045A4o
.text$x:000044F8                 mov     ecx, [ebp-10h]
.text$x:000044FB                 add     ecx, 6Ch ; 'l'
.text$x:000044FE                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:000044FE __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$5 endp
.text$x:000044FE
.text$x:00004503
.text$x:00004503 ; =============== S U B R O U T I N E =======================================
.text$x:00004503
.text$x:00004503
.text$x:00004503 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$6 proc near
.text$x:00004503                                         ; DATA XREF: .xdata$x:000045ACo
.text$x:00004503                 mov     ecx, [ebp-10h]
.text$x:00004506                 add     ecx, 78h ; 'x'  ; this
.text$x:00004509                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:00004509 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$6 endp
.text$x:00004509
.text$x:0000450E
.text$x:0000450E ; =============== S U B R O U T I N E =======================================
.text$x:0000450E
.text$x:0000450E
.text$x:0000450E __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$7 proc near
.text$x:0000450E                                         ; DATA XREF: .xdata$x:000045B4o
.text$x:0000450E                 mov     ecx, [ebp-10h]
.text$x:00004511                 add     ecx, 90h ; 'É'  ; this
.text$x:00004517                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:00004517 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$7 endp
.text$x:00004517
.text$x:0000451C
.text$x:0000451C ; =============== S U B R O U T I N E =======================================
.text$x:0000451C
.text$x:0000451C
.text$x:0000451C __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$8 proc near
.text$x:0000451C                                         ; DATA XREF: .xdata$x:000045BCo
.text$x:0000451C                 mov     ecx, [ebp-10h]
.text$x:0000451F                 add     ecx, 0A8h ; '¿' ; this
.text$x:00004525                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:00004525 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$8 endp
.text$x:00004525
.text$x:0000452A
.text$x:0000452A ; =============== S U B R O U T I N E =======================================
.text$x:0000452A
.text$x:0000452A
.text$x:0000452A __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$9 proc near
.text$x:0000452A                                         ; DATA XREF: .xdata$x:000045C4o
.text$x:0000452A                 mov     ecx, [ebp-10h]
.text$x:0000452D                 add     ecx, 0C0h ; '+' ; this
.text$x:00004533                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:00004533 __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$9 endp
.text$x:00004533
.text$x:00004538
.text$x:00004538 ; =============== S U B R O U T I N E =======================================
.text$x:00004538
.text$x:00004538
.text$x:00004538 __ehhandler$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ proc near
.text$x:00004538                                         ; DATA XREF: NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut(void)+5o
.text$x:00004538
.text$x:00004538 arg_4           = dword ptr  8
.text$x:00004538
.text$x:00004538                 mov     edx, [esp+arg_4]
.text$x:0000453C                 lea     eax, [edx+0Ch]
.text$x:0000453F                 mov     ecx, [edx-8]
.text$x:00004542                 xor     ecx, eax
.text$x:00004544                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004549                 mov     eax, offset __ehfuncinfo$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
.text$x:0000454E                 jmp     ___CxxFrameHandler3
.text$x:0000454E __ehhandler$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ endp
.text$x:0000454E
.text$x:0000454E ; ---------------------------------------------------------------------------
.text$x:00004553                 align 4
.text$x:00004553 _text$x         ends
.text$x:00004553
.xdata$x:00004554 ; ===========================================================================
.xdata$x:00004554
.xdata$x:00004554 ; Segment type: Pure data
.xdata$x:00004554 ; Segment permissions: Read
.xdata$x:00004554 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004554                 assume cs:_xdata$x
.xdata$x:00004554                 ;org 4554h
.xdata$x:00004554 ; COMDAT (pick associative to section at 43C8)
.xdata$x:00004554 __ehfuncinfo$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004554                                         ; DATA XREF: __ehhandler$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00004555                 db    5
.xdata$x:00004556                 db  93h ; ô
.xdata$x:00004557                 db  19h
.xdata$x:00004558                 db  0Ah
.xdata$x:00004559                 db    0
.xdata$x:0000455A                 db    0
.xdata$x:0000455B                 db    0
.xdata$x:0000455C                 dd offset __unwindtable$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
.xdata$x:00004560                 db    0
.xdata$x:00004561                 db    0
.xdata$x:00004562                 db    0
.xdata$x:00004563                 db    0
.xdata$x:00004564                 db    0
.xdata$x:00004565                 db    0
.xdata$x:00004566                 db    0
.xdata$x:00004567                 db    0
.xdata$x:00004568                 db    0
.xdata$x:00004569                 db    0
.xdata$x:0000456A                 db    0
.xdata$x:0000456B                 db    0
.xdata$x:0000456C                 db    0
.xdata$x:0000456D                 db    0
.xdata$x:0000456E                 db    0
.xdata$x:0000456F                 db    0
.xdata$x:00004570                 db    0
.xdata$x:00004571                 db    0
.xdata$x:00004572                 db    0
.xdata$x:00004573                 db    0
.xdata$x:00004574                 db    1
.xdata$x:00004575                 db    0
.xdata$x:00004576                 db    0
.xdata$x:00004577                 db    0
.xdata$x:00004578 __unwindtable$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004578                                         ; DATA XREF: .xdata$x:0000455Co
.xdata$x:00004579                 db 0FFh
.xdata$x:0000457A                 db 0FFh
.xdata$x:0000457B                 db 0FFh
.xdata$x:0000457C                 dd offset __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$0
.xdata$x:00004580                 db    0
.xdata$x:00004581                 db    0
.xdata$x:00004582                 db    0
.xdata$x:00004583                 db    0
.xdata$x:00004584                 dd offset __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$1
.xdata$x:00004588                 db    1
.xdata$x:00004589                 db    0
.xdata$x:0000458A                 db    0
.xdata$x:0000458B                 db    0
.xdata$x:0000458C                 dd offset __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$2
.xdata$x:00004590                 db    2
.xdata$x:00004591                 db    0
.xdata$x:00004592                 db    0
.xdata$x:00004593                 db    0
.xdata$x:00004594                 dd offset __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$3
.xdata$x:00004598                 db    3
.xdata$x:00004599                 db    0
.xdata$x:0000459A                 db    0
.xdata$x:0000459B                 db    0
.xdata$x:0000459C                 dd offset __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$4
.xdata$x:000045A0                 db    4
.xdata$x:000045A1                 db    0
.xdata$x:000045A2                 db    0
.xdata$x:000045A3                 db    0
.xdata$x:000045A4                 dd offset __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$5
.xdata$x:000045A8                 db    5
.xdata$x:000045A9                 db    0
.xdata$x:000045AA                 db    0
.xdata$x:000045AB                 db    0
.xdata$x:000045AC                 dd offset __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$6
.xdata$x:000045B0                 db    6
.xdata$x:000045B1                 db    0
.xdata$x:000045B2                 db    0
.xdata$x:000045B3                 db    0
.xdata$x:000045B4                 dd offset __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$7
.xdata$x:000045B8                 db    7
.xdata$x:000045B9                 db    0
.xdata$x:000045BA                 db    0
.xdata$x:000045BB                 db    0
.xdata$x:000045BC                 dd offset __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$8
.xdata$x:000045C0                 db    8
.xdata$x:000045C1                 db    0
.xdata$x:000045C2                 db    0
.xdata$x:000045C3                 db    0
.xdata$x:000045C4                 dd offset __unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$9
.xdata$x:000045C4 _xdata$x        ends
.xdata$x:000045C4
.text:000045C8 ; ===========================================================================
.text:000045C8
.text:000045C8 ; Segment type: Pure code
.text:000045C8 ; Segment permissions: Read/Execute
.text:000045C8 _text           segment para public 'CODE' use32
.text:000045C8                 assume cs:_text
.text:000045C8                 ;org 45C8h
.text:000045C8 ; COMDAT (pick any)
.text:000045C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000045C8
.text:000045C8 ; =============== S U B R O U T I N E =======================================
.text:000045C8
.text:000045C8 ; Attributes: bp-based frame
.text:000045C8
.text:000045C8 ; _DWORD __thiscall NArchive::N7z::COutFolders::COutFolders(NArchive::N7z::COutFolders *__hidden this)
.text:000045C8                 public ??0COutFolders@N7z@NArchive@@QAE@XZ
.text:000045C8 ??0COutFolders@N7z@NArchive@@QAE@XZ proc near
.text:000045C8                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(void)+30p
.text:000045C8
.text:000045C8 var_10          = dword ptr -10h
.text:000045C8 var_C           = dword ptr -0Ch
.text:000045C8 var_4           = dword ptr -4
.text:000045C8
.text:000045C8                 push    ebp
.text:000045C9                 mov     ebp, esp
.text:000045CB                 push    0FFFFFFFFh
.text:000045CD                 push    offset __ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ
.text:000045D2                 mov     eax, large fs:0
.text:000045D8                 push    eax
.text:000045D9                 push    ecx
.text:000045DA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000045E1                 mov     eax, dword ptr ds:___security_cookie
.text:000045E6                 xor     eax, ebp
.text:000045E8                 push    eax
.text:000045E9                 lea     eax, [ebp+var_C]
.text:000045EC                 mov     large fs:0, eax
.text:000045F2                 mov     [ebp+var_10], ecx
.text:000045F5                 mov     ecx, [ebp+var_10] ; this
.text:000045F8                 call    ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)
.text:000045FD                 mov     [ebp+var_4], 0
.text:00004604                 mov     ecx, [ebp+var_10]
.text:00004607                 add     ecx, 18h
.text:0000460A                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:0000460F                 mov     byte ptr [ebp+var_4], 1
.text:00004613                 mov     ecx, [ebp+var_10]
.text:00004616                 add     ecx, 24h ; '$'
.text:00004619                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:0000461E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004625                 mov     eax, [ebp+var_10]
.text:00004628                 mov     ecx, [ebp+var_C]
.text:0000462B                 mov     large fs:0, ecx
.text:00004632                 pop     ecx
.text:00004633                 add     esp, 10h
.text:00004636                 cmp     ebp, esp
.text:00004638                 call    __RTC_CheckEsp
.text:0000463D                 mov     esp, ebp
.text:0000463F                 pop     ebp
.text:00004640                 retn
.text:00004640 ??0COutFolders@N7z@NArchive@@QAE@XZ endp
.text:00004640
.text:00004640 ; ---------------------------------------------------------------------------
.text:00004641                 align 4
.text:00004641 _text           ends
.text:00004641
.text$x:00004644 ; ===========================================================================
.text$x:00004644
.text$x:00004644 ; Segment type: Pure code
.text$x:00004644 ; Segment permissions: Read/Execute
.text$x:00004644 _text$x         segment para public 'CODE' use32
.text$x:00004644                 assume cs:_text$x
.text$x:00004644                 ;org 4644h
.text$x:00004644 ; COMDAT (pick associative to section at 45C8)
.text$x:00004644                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004644
.text$x:00004644 ; =============== S U B R O U T I N E =======================================
.text$x:00004644
.text$x:00004644
.text$x:00004644 __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00004644                                         ; DATA XREF: .xdata$x:00004678o
.text$x:00004644                 mov     ecx, [ebp-10h]  ; this
.text$x:00004647                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:00004647 __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00004647
.text$x:0000464C
.text$x:0000464C ; =============== S U B R O U T I N E =======================================
.text$x:0000464C
.text$x:0000464C
.text$x:0000464C __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:0000464C                                         ; DATA XREF: .xdata$x:00004680o
.text$x:0000464C                 mov     ecx, [ebp-10h]
.text$x:0000464F                 add     ecx, 18h
.text$x:00004652                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00004652 __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00004652
.text$x:00004657
.text$x:00004657 ; =============== S U B R O U T I N E =======================================
.text$x:00004657
.text$x:00004657
.text$x:00004657 __ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ proc near
.text$x:00004657                                         ; DATA XREF: NArchive::N7z::COutFolders::COutFolders(void)+5o
.text$x:00004657
.text$x:00004657 arg_4           = dword ptr  8
.text$x:00004657
.text$x:00004657                 mov     edx, [esp+arg_4]
.text$x:0000465B                 lea     eax, [edx+0Ch]
.text$x:0000465E                 mov     ecx, [edx-8]
.text$x:00004661                 xor     ecx, eax
.text$x:00004663                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004668                 mov     eax, offset __ehfuncinfo$??0COutFolders@N7z@NArchive@@QAE@XZ
.text$x:0000466D                 jmp     ___CxxFrameHandler3
.text$x:0000466D __ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ endp
.text$x:0000466D
.text$x:0000466D ; ---------------------------------------------------------------------------
.text$x:00004672                 align 4
.text$x:00004672 _text$x         ends
.text$x:00004672
.xdata$x:00004674 ; ===========================================================================
.xdata$x:00004674
.xdata$x:00004674 ; Segment type: Pure data
.xdata$x:00004674 ; Segment permissions: Read
.xdata$x:00004674 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004674                 assume cs:_xdata$x
.xdata$x:00004674                 ;org 4674h
.xdata$x:00004674 ; COMDAT (pick associative to section at 45C8)
.xdata$x:00004674 __unwindtable$??0COutFolders@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004674                                         ; DATA XREF: .xdata$x:0000468Co
.xdata$x:00004675                 db 0FFh
.xdata$x:00004676                 db 0FFh
.xdata$x:00004677                 db 0FFh
.xdata$x:00004678                 dd offset __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000467C                 align 10h
.xdata$x:00004680                 dd offset __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1
.xdata$x:00004684 __ehfuncinfo$??0COutFolders@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004684                                         ; DATA XREF: __ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00004685                 db    5
.xdata$x:00004686                 db  93h ; ô
.xdata$x:00004687                 db  19h
.xdata$x:00004688                 db    2
.xdata$x:00004689                 db    0
.xdata$x:0000468A                 db    0
.xdata$x:0000468B                 db    0
.xdata$x:0000468C                 dd offset __unwindtable$??0COutFolders@N7z@NArchive@@QAE@XZ
.xdata$x:00004690                 db    0
.xdata$x:00004691                 db    0
.xdata$x:00004692                 db    0
.xdata$x:00004693                 db    0
.xdata$x:00004694                 db    0
.xdata$x:00004695                 db    0
.xdata$x:00004696                 db    0
.xdata$x:00004697                 db    0
.xdata$x:00004698                 db    0
.xdata$x:00004699                 db    0
.xdata$x:0000469A                 db    0
.xdata$x:0000469B                 db    0
.xdata$x:0000469C                 db    0
.xdata$x:0000469D                 db    0
.xdata$x:0000469E                 db    0
.xdata$x:0000469F                 db    0
.xdata$x:000046A0                 db    0
.xdata$x:000046A1                 db    0
.xdata$x:000046A2                 db    0
.xdata$x:000046A3                 db    0
.xdata$x:000046A4                 db    1
.xdata$x:000046A5                 db    0
.xdata$x:000046A6                 db    0
.xdata$x:000046A7                 db    0
.xdata$x:000046A7 _xdata$x        ends
.xdata$x:000046A7
.text:000046A8 ; ===========================================================================
.text:000046A8
.text:000046A8 ; Segment type: Pure code
.text:000046A8 ; Segment permissions: Read/Execute
.text:000046A8 _text           segment para public 'CODE' use32
.text:000046A8                 assume cs:_text
.text:000046A8                 ;org 46A8h
.text:000046A8 ; COMDAT (pick any)
.text:000046A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000046A8
.text:000046A8 ; =============== S U B R O U T I N E =======================================
.text:000046A8
.text:000046A8 ; Attributes: bp-based frame
.text:000046A8
.text:000046A8 ; _DWORD __thiscall NArchive::N7z::COutFolders::~COutFolders(NArchive::N7z::COutFolders *__hidden this)
.text:000046A8                 public ??1COutFolders@N7z@NArchive@@QAE@XZ
.text:000046A8 ??1COutFolders@N7z@NArchive@@QAE@XZ proc near
.text:000046A8                                         ; CODE XREF: __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$0+3j
.text:000046A8                                         ; NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut(void)+DCp ...
.text:000046A8
.text:000046A8 var_10          = dword ptr -10h
.text:000046A8 var_C           = dword ptr -0Ch
.text:000046A8 var_4           = dword ptr -4
.text:000046A8
.text:000046A8                 push    ebp
.text:000046A9                 mov     ebp, esp
.text:000046AB                 push    0FFFFFFFFh
.text:000046AD                 push    offset __ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ
.text:000046B2                 mov     eax, large fs:0
.text:000046B8                 push    eax
.text:000046B9                 push    ecx
.text:000046BA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000046C1                 mov     eax, dword ptr ds:___security_cookie
.text:000046C6                 xor     eax, ebp
.text:000046C8                 push    eax
.text:000046C9                 lea     eax, [ebp+var_C]
.text:000046CC                 mov     large fs:0, eax
.text:000046D2                 mov     [ebp+var_10], ecx
.text:000046D5                 mov     [ebp+var_4], 1
.text:000046DC                 mov     ecx, [ebp+var_10]
.text:000046DF                 add     ecx, 24h ; '$'
.text:000046E2                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000046E7                 mov     byte ptr [ebp+var_4], 0
.text:000046EB                 mov     ecx, [ebp+var_10]
.text:000046EE                 add     ecx, 18h
.text:000046F1                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000046F6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000046FD                 mov     ecx, [ebp+var_10] ; this
.text:00004700                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:00004705                 mov     ecx, [ebp+var_C]
.text:00004708                 mov     large fs:0, ecx
.text:0000470F                 pop     ecx
.text:00004710                 add     esp, 10h
.text:00004713                 cmp     ebp, esp
.text:00004715                 call    __RTC_CheckEsp
.text:0000471A                 mov     esp, ebp
.text:0000471C                 pop     ebp
.text:0000471D                 retn
.text:0000471D ??1COutFolders@N7z@NArchive@@QAE@XZ endp
.text:0000471D
.text:0000471D ; ---------------------------------------------------------------------------
.text:0000471E                 align 10h
.text:0000471E _text           ends
.text:0000471E
.text$x:00004720 ; ===========================================================================
.text$x:00004720
.text$x:00004720 ; Segment type: Pure code
.text$x:00004720 ; Segment permissions: Read/Execute
.text$x:00004720 _text$x         segment para public 'CODE' use32
.text$x:00004720                 assume cs:_text$x
.text$x:00004720                 ;org 4720h
.text$x:00004720 ; COMDAT (pick associative to section at 46A8)
.text$x:00004720                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004720
.text$x:00004720 ; =============== S U B R O U T I N E =======================================
.text$x:00004720
.text$x:00004720
.text$x:00004720 __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00004720                                         ; DATA XREF: .xdata$x:00004754o
.text$x:00004720                 mov     ecx, [ebp-10h]  ; this
.text$x:00004723                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:00004723 __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00004723
.text$x:00004728
.text$x:00004728 ; =============== S U B R O U T I N E =======================================
.text$x:00004728
.text$x:00004728
.text$x:00004728 __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00004728                                         ; DATA XREF: .xdata$x:0000475Co
.text$x:00004728                 mov     ecx, [ebp-10h]
.text$x:0000472B                 add     ecx, 18h
.text$x:0000472E                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000472E __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$1 endp
.text$x:0000472E
.text$x:00004733
.text$x:00004733 ; =============== S U B R O U T I N E =======================================
.text$x:00004733
.text$x:00004733
.text$x:00004733 __ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ proc near
.text$x:00004733                                         ; DATA XREF: NArchive::N7z::COutFolders::~COutFolders(void)+5o
.text$x:00004733
.text$x:00004733 arg_4           = dword ptr  8
.text$x:00004733
.text$x:00004733                 mov     edx, [esp+arg_4]
.text$x:00004737                 lea     eax, [edx+0Ch]
.text$x:0000473A                 mov     ecx, [edx-8]
.text$x:0000473D                 xor     ecx, eax
.text$x:0000473F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004744                 mov     eax, offset __ehfuncinfo$??1COutFolders@N7z@NArchive@@QAE@XZ
.text$x:00004749                 jmp     ___CxxFrameHandler3
.text$x:00004749 __ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ endp
.text$x:00004749
.text$x:00004749 ; ---------------------------------------------------------------------------
.text$x:0000474E                 align 10h
.text$x:0000474E _text$x         ends
.text$x:0000474E
.xdata$x:00004750 ; ===========================================================================
.xdata$x:00004750
.xdata$x:00004750 ; Segment type: Pure data
.xdata$x:00004750 ; Segment permissions: Read
.xdata$x:00004750 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004750                 assume cs:_xdata$x
.xdata$x:00004750                 ;org 4750h
.xdata$x:00004750 ; COMDAT (pick associative to section at 46A8)
.xdata$x:00004750 __unwindtable$??1COutFolders@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004750                                         ; DATA XREF: .xdata$x:00004768o
.xdata$x:00004751                 db 0FFh
.xdata$x:00004752                 db 0FFh
.xdata$x:00004753                 db 0FFh
.xdata$x:00004754                 dd offset __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$0
.xdata$x:00004758                 db    0
.xdata$x:00004759                 db    0
.xdata$x:0000475A                 db    0
.xdata$x:0000475B                 db    0
.xdata$x:0000475C                 dd offset __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$1
.xdata$x:00004760 __ehfuncinfo$??1COutFolders@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004760                                         ; DATA XREF: __ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00004761                 db    5
.xdata$x:00004762                 db  93h ; ô
.xdata$x:00004763                 db  19h
.xdata$x:00004764                 db    2
.xdata$x:00004765                 db    0
.xdata$x:00004766                 db    0
.xdata$x:00004767                 db    0
.xdata$x:00004768                 dd offset __unwindtable$??1COutFolders@N7z@NArchive@@QAE@XZ
.xdata$x:0000476C                 align 20h
.xdata$x:00004780                 db    1
.xdata$x:00004781                 db    0
.xdata$x:00004782                 db    0
.xdata$x:00004783                 db    0
.xdata$x:00004783 _xdata$x        ends
.xdata$x:00004783
.text:00004784 ; ===========================================================================
.text:00004784
.text:00004784 ; Segment type: Pure code
.text:00004784 ; Segment permissions: Read/Execute
.text:00004784 _text           segment para public 'CODE' use32
.text:00004784                 assume cs:_text
.text:00004784                 ;org 4784h
.text:00004784 ; COMDAT (pick any)
.text:00004784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004784
.text:00004784 ; =============== S U B R O U T I N E =======================================
.text:00004784
.text:00004784 ; Attributes: bp-based frame
.text:00004784
.text:00004784 ; _DWORD __thiscall NArchive::N7z::CUInt32DefVector::CUInt32DefVector(NArchive::N7z::CUInt32DefVector *__hidden this)
.text:00004784                 public ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00004784 ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text:00004784                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(void)+51p
.text:00004784                                         ; NArchive::N7z::COutFolders::COutFolders(void)+30p
.text:00004784
.text:00004784 var_10          = dword ptr -10h
.text:00004784 var_C           = dword ptr -0Ch
.text:00004784 var_4           = dword ptr -4
.text:00004784
.text:00004784                 push    ebp
.text:00004785                 mov     ebp, esp
.text:00004787                 push    0FFFFFFFFh
.text:00004789                 push    offset __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:0000478E                 mov     eax, large fs:0
.text:00004794                 push    eax
.text:00004795                 push    ecx
.text:00004796                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000479D                 mov     eax, dword ptr ds:___security_cookie
.text:000047A2                 xor     eax, ebp
.text:000047A4                 push    eax
.text:000047A5                 lea     eax, [ebp+var_C]
.text:000047A8                 mov     large fs:0, eax
.text:000047AE                 mov     [ebp+var_10], ecx
.text:000047B1                 mov     ecx, [ebp+var_10]
.text:000047B4                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:000047B9                 mov     [ebp+var_4], 0
.text:000047C0                 mov     ecx, [ebp+var_10]
.text:000047C3                 add     ecx, 0Ch
.text:000047C6                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:000047CB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000047D2                 mov     eax, [ebp+var_10]
.text:000047D5                 mov     ecx, [ebp+var_C]
.text:000047D8                 mov     large fs:0, ecx
.text:000047DF                 pop     ecx
.text:000047E0                 add     esp, 10h
.text:000047E3                 cmp     ebp, esp
.text:000047E5                 call    __RTC_CheckEsp
.text:000047EA                 mov     esp, ebp
.text:000047EC                 pop     ebp
.text:000047ED                 retn
.text:000047ED ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text:000047ED
.text:000047ED ; ---------------------------------------------------------------------------
.text:000047EE                 align 10h
.text:000047EE _text           ends
.text:000047EE
.text$x:000047F0 ; ===========================================================================
.text$x:000047F0
.text$x:000047F0 ; Segment type: Pure code
.text$x:000047F0 ; Segment permissions: Read/Execute
.text$x:000047F0 _text$x         segment para public 'CODE' use32
.text$x:000047F0                 assume cs:_text$x
.text$x:000047F0                 ;org 47F0h
.text$x:000047F0 ; COMDAT (pick associative to section at 4784)
.text$x:000047F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000047F0
.text$x:000047F0 ; =============== S U B R O U T I N E =======================================
.text$x:000047F0
.text$x:000047F0
.text$x:000047F0 __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000047F0                                         ; DATA XREF: .xdata$x:00004818o
.text$x:000047F0                 mov     ecx, [ebp-10h]
.text$x:000047F3                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000047F3 __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000047F3
.text$x:000047F8
.text$x:000047F8 ; =============== S U B R O U T I N E =======================================
.text$x:000047F8
.text$x:000047F8
.text$x:000047F8 __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:000047F8                                         ; DATA XREF: NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)+5o
.text$x:000047F8
.text$x:000047F8 arg_4           = dword ptr  8
.text$x:000047F8
.text$x:000047F8                 mov     edx, [esp+arg_4]
.text$x:000047FC                 lea     eax, [edx+0Ch]
.text$x:000047FF                 mov     ecx, [edx-8]
.text$x:00004802                 xor     ecx, eax
.text$x:00004804                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004809                 mov     eax, offset __ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text$x:0000480E                 jmp     ___CxxFrameHandler3
.text$x:0000480E __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:0000480E
.text$x:0000480E ; ---------------------------------------------------------------------------
.text$x:00004813                 align 4
.text$x:00004813 _text$x         ends
.text$x:00004813
.xdata$x:00004814 ; ===========================================================================
.xdata$x:00004814
.xdata$x:00004814 ; Segment type: Pure data
.xdata$x:00004814 ; Segment permissions: Read
.xdata$x:00004814 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004814                 assume cs:_xdata$x
.xdata$x:00004814                 ;org 4814h
.xdata$x:00004814 ; COMDAT (pick associative to section at 4784)
.xdata$x:00004814 __unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004814                                         ; DATA XREF: .xdata$x:00004824o
.xdata$x:00004815                 db 0FFh
.xdata$x:00004816                 db 0FFh
.xdata$x:00004817                 db 0FFh
.xdata$x:00004818                 dd offset __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000481C __ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000481C                                         ; DATA XREF: __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000481D                 db    5
.xdata$x:0000481E                 db  93h ; ô
.xdata$x:0000481F                 db  19h
.xdata$x:00004820                 db    1
.xdata$x:00004821                 db    0
.xdata$x:00004822                 db    0
.xdata$x:00004823                 db    0
.xdata$x:00004824                 dd offset __unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:00004828                 db    0
.xdata$x:00004829                 db    0
.xdata$x:0000482A                 db    0
.xdata$x:0000482B                 db    0
.xdata$x:0000482C                 db    0
.xdata$x:0000482D                 db    0
.xdata$x:0000482E                 db    0
.xdata$x:0000482F                 db    0
.xdata$x:00004830                 db    0
.xdata$x:00004831                 db    0
.xdata$x:00004832                 db    0
.xdata$x:00004833                 db    0
.xdata$x:00004834                 db    0
.xdata$x:00004835                 db    0
.xdata$x:00004836                 db    0
.xdata$x:00004837                 db    0
.xdata$x:00004838                 db    0
.xdata$x:00004839                 db    0
.xdata$x:0000483A                 db    0
.xdata$x:0000483B                 db    0
.xdata$x:0000483C                 db    1
.xdata$x:0000483D                 db    0
.xdata$x:0000483E                 db    0
.xdata$x:0000483F                 db    0
.xdata$x:0000483F _xdata$x        ends
.xdata$x:0000483F
.text:00004840 ; ===========================================================================
.text:00004840
.text:00004840 ; Segment type: Pure code
.text:00004840 ; Segment permissions: Read/Execute
.text:00004840 _text           segment para public 'CODE' use32
.text:00004840                 assume cs:_text
.text:00004840                 ;org 4840h
.text:00004840 ; COMDAT (pick any)
.text:00004840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004840
.text:00004840 ; =============== S U B R O U T I N E =======================================
.text:00004840
.text:00004840 ; Attributes: bp-based frame
.text:00004840
.text:00004840 ; _DWORD __thiscall NArchive::N7z::CUInt64DefVector::CUInt64DefVector(NArchive::N7z::CUInt64DefVector *__hidden this)
.text:00004840                 public ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text:00004840 ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ proc near
.text:00004840                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(void)+8Dp
.text:00004840                                         ; NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(void)+9Fp ...
.text:00004840
.text:00004840 var_10          = dword ptr -10h
.text:00004840 var_C           = dword ptr -0Ch
.text:00004840 var_4           = dword ptr -4
.text:00004840
.text:00004840                 push    ebp
.text:00004841                 mov     ebp, esp
.text:00004843                 push    0FFFFFFFFh
.text:00004845                 push    offset __ehhandler$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text:0000484A                 mov     eax, large fs:0
.text:00004850                 push    eax
.text:00004851                 push    ecx
.text:00004852                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004859                 mov     eax, dword ptr ds:___security_cookie
.text:0000485E                 xor     eax, ebp
.text:00004860                 push    eax
.text:00004861                 lea     eax, [ebp+var_C]
.text:00004864                 mov     large fs:0, eax
.text:0000486A                 mov     [ebp+var_10], ecx
.text:0000486D                 mov     ecx, [ebp+var_10]
.text:00004870                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00004875                 mov     [ebp+var_4], 0
.text:0000487C                 mov     ecx, [ebp+var_10]
.text:0000487F                 add     ecx, 0Ch
.text:00004882                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00004887                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000488E                 mov     eax, [ebp+var_10]
.text:00004891                 mov     ecx, [ebp+var_C]
.text:00004894                 mov     large fs:0, ecx
.text:0000489B                 pop     ecx
.text:0000489C                 add     esp, 10h
.text:0000489F                 cmp     ebp, esp
.text:000048A1                 call    __RTC_CheckEsp
.text:000048A6                 mov     esp, ebp
.text:000048A8                 pop     ebp
.text:000048A9                 retn
.text:000048A9 ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ endp
.text:000048A9
.text:000048A9 ; ---------------------------------------------------------------------------
.text:000048AA                 align 4
.text:000048AA _text           ends
.text:000048AA
.text$x:000048AC ; ===========================================================================
.text$x:000048AC
.text$x:000048AC ; Segment type: Pure code
.text$x:000048AC ; Segment permissions: Read/Execute
.text$x:000048AC _text$x         segment para public 'CODE' use32
.text$x:000048AC                 assume cs:_text$x
.text$x:000048AC                 ;org 48ACh
.text$x:000048AC ; COMDAT (pick associative to section at 4840)
.text$x:000048AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000048AC
.text$x:000048AC ; =============== S U B R O U T I N E =======================================
.text$x:000048AC
.text$x:000048AC
.text$x:000048AC __unwindfunclet$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000048AC                                         ; DATA XREF: .xdata$x:000048D4o
.text$x:000048AC                 mov     ecx, [ebp-10h]
.text$x:000048AF                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000048AF __unwindfunclet$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000048AF
.text$x:000048B4
.text$x:000048B4 ; =============== S U B R O U T I N E =======================================
.text$x:000048B4
.text$x:000048B4
.text$x:000048B4 __ehhandler$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:000048B4                                         ; DATA XREF: NArchive::N7z::CUInt64DefVector::CUInt64DefVector(void)+5o
.text$x:000048B4
.text$x:000048B4 arg_4           = dword ptr  8
.text$x:000048B4
.text$x:000048B4                 mov     edx, [esp+arg_4]
.text$x:000048B8                 lea     eax, [edx+0Ch]
.text$x:000048BB                 mov     ecx, [edx-8]
.text$x:000048BE                 xor     ecx, eax
.text$x:000048C0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000048C5                 mov     eax, offset __ehfuncinfo$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text$x:000048CA                 jmp     ___CxxFrameHandler3
.text$x:000048CA __ehhandler$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:000048CA
.text$x:000048CA ; ---------------------------------------------------------------------------
.text$x:000048CF                 align 10h
.text$x:000048CF _text$x         ends
.text$x:000048CF
.xdata$x:000048D0 ; ===========================================================================
.xdata$x:000048D0
.xdata$x:000048D0 ; Segment type: Pure data
.xdata$x:000048D0 ; Segment permissions: Read
.xdata$x:000048D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000048D0                 assume cs:_xdata$x
.xdata$x:000048D0                 ;org 48D0h
.xdata$x:000048D0 ; COMDAT (pick associative to section at 4840)
.xdata$x:000048D0 __unwindtable$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:000048D0                                         ; DATA XREF: .xdata$x:000048E0o
.xdata$x:000048D1                 db 0FFh
.xdata$x:000048D2                 db 0FFh
.xdata$x:000048D3                 db 0FFh
.xdata$x:000048D4                 dd offset __unwindfunclet$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:000048D8 __ehfuncinfo$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000048D8                                         ; DATA XREF: __ehhandler$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:000048D9                 db    5
.xdata$x:000048DA                 db  93h ; ô
.xdata$x:000048DB                 db  19h
.xdata$x:000048DC                 db    1
.xdata$x:000048DD                 db    0
.xdata$x:000048DE                 db    0
.xdata$x:000048DF                 db    0
.xdata$x:000048E0                 dd offset __unwindtable$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:000048E4                 db    0
.xdata$x:000048E5                 db    0
.xdata$x:000048E6                 db    0
.xdata$x:000048E7                 db    0
.xdata$x:000048E8                 db    0
.xdata$x:000048E9                 db    0
.xdata$x:000048EA                 db    0
.xdata$x:000048EB                 db    0
.xdata$x:000048EC                 db    0
.xdata$x:000048ED                 db    0
.xdata$x:000048EE                 db    0
.xdata$x:000048EF                 db    0
.xdata$x:000048F0                 db    0
.xdata$x:000048F1                 db    0
.xdata$x:000048F2                 db    0
.xdata$x:000048F3                 db    0
.xdata$x:000048F4                 db    0
.xdata$x:000048F5                 db    0
.xdata$x:000048F6                 db    0
.xdata$x:000048F7                 db    0
.xdata$x:000048F8                 db    1
.xdata$x:000048F9                 db    0
.xdata$x:000048FA                 db    0
.xdata$x:000048FB                 db    0
.xdata$x:000048FB _xdata$x        ends
.xdata$x:000048FB
.text:000048FC ; ===========================================================================
.text:000048FC
.text:000048FC ; Segment type: Pure code
.text:000048FC ; Segment permissions: Read/Execute
.text:000048FC _text           segment para public 'CODE' use32
.text:000048FC                 assume cs:_text
.text:000048FC                 ;org 48FCh
.text:000048FC ; COMDAT (pick any)
.text:000048FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048FC
.text:000048FC ; =============== S U B R O U T I N E =======================================
.text:000048FC
.text:000048FC ; Attributes: bp-based frame
.text:000048FC
.text:000048FC ; void __thiscall CBoolPair::Init(CBoolPair *__hidden this)
.text:000048FC                 public ?Init@CBoolPair@@QAEXXZ
.text:000048FC ?Init@CBoolPair@@QAEXXZ proc near       ; CODE XREF: NArchive::N7z::COutHandler::InitProps(void)+38p
.text:000048FC                                         ; NArchive::N7z::COutHandler::InitProps(void)+43p ...
.text:000048FC
.text:000048FC var_4           = dword ptr -4
.text:000048FC
.text:000048FC                 push    ebp
.text:000048FD                 mov     ebp, esp
.text:000048FF                 push    ecx
.text:00004900                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004907                 mov     [ebp+var_4], ecx
.text:0000490A                 mov     eax, [ebp+var_4]
.text:0000490D                 mov     byte ptr [eax], 0
.text:00004910                 mov     ecx, [ebp+var_4]
.text:00004913                 mov     byte ptr [ecx+1], 0
.text:00004917                 mov     esp, ebp
.text:00004919                 pop     ebp
.text:0000491A                 retn
.text:0000491A ?Init@CBoolPair@@QAEXXZ endp
.text:0000491A
.text:0000491A ; ---------------------------------------------------------------------------
.text:0000491B                 align 4
.text:0000491B _text           ends
.text:0000491B
.text:0000491C ; ===========================================================================
.text:0000491C
.text:0000491C ; Segment type: Pure code
.text:0000491C ; Segment permissions: Read/Execute
.text:0000491C _text           segment para public 'CODE' use32
.text:0000491C                 assume cs:_text
.text:0000491C                 ;org 491Ch
.text:0000491C ; COMDAT (pick any)
.text:0000491C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000491C
.text:0000491C ; =============== S U B R O U T I N E =======================================
.text:0000491C
.text:0000491C ; Attributes: bp-based frame
.text:0000491C
.text:0000491C ; void __thiscall NArchive::N7z::COutHandler::InitSolid(NArchive::N7z::COutHandler *__hidden this)
.text:0000491C                 public ?InitSolid@COutHandler@N7z@NArchive@@QAEXXZ
.text:0000491C ?InitSolid@COutHandler@N7z@NArchive@@QAEXXZ proc near
.text:0000491C                                         ; CODE XREF: NArchive::N7z::COutHandler::InitProps(void)+5Dp
.text:0000491C                                         ; NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+FFp
.text:0000491C
.text:0000491C var_4           = dword ptr -4
.text:0000491C
.text:0000491C                 push    ebp
.text:0000491D                 mov     ebp, esp
.text:0000491F                 push    ecx
.text:00004920                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004927                 mov     [ebp+var_4], ecx
.text:0000492A                 mov     ecx, [ebp+var_4] ; this
.text:0000492D                 call    ?InitSolidFiles@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitSolidFiles(void)
.text:00004932                 mov     ecx, [ebp+var_4] ; this
.text:00004935                 call    ?InitSolidSize@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitSolidSize(void)
.text:0000493A                 mov     eax, [ebp+var_4]
.text:0000493D                 mov     byte ptr [eax+61h], 0
.text:00004941                 mov     ecx, [ebp+var_4]
.text:00004944                 mov     byte ptr [ecx+60h], 0
.text:00004948                 add     esp, 4
.text:0000494B                 cmp     ebp, esp
.text:0000494D                 call    __RTC_CheckEsp
.text:00004952                 mov     esp, ebp
.text:00004954                 pop     ebp
.text:00004955                 retn
.text:00004955 ?InitSolid@COutHandler@N7z@NArchive@@QAEXXZ endp
.text:00004955
.text:00004955 ; ---------------------------------------------------------------------------
.text:00004956                 align 4
.text:00004956 _text           ends
.text:00004956
.text:00004958 ; ===========================================================================
.text:00004958
.text:00004958 ; Segment type: Pure code
.text:00004958 ; Segment permissions: Read/Execute
.text:00004958 _text           segment para public 'CODE' use32
.text:00004958                 assume cs:_text
.text:00004958                 ;org 4958h
.text:00004958 ; COMDAT (pick any)
.text:00004958                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004958
.text:00004958 ; =============== S U B R O U T I N E =======================================
.text:00004958
.text:00004958 ; Attributes: bp-based frame
.text:00004958
.text:00004958 ; void __thiscall NArchive::N7z::COutHandler::InitSolidFiles(NArchive::N7z::COutHandler *__hidden this)
.text:00004958                 public ?InitSolidFiles@COutHandler@N7z@NArchive@@QAEXXZ
.text:00004958 ?InitSolidFiles@COutHandler@N7z@NArchive@@QAEXXZ proc near
.text:00004958                                         ; CODE XREF: NArchive::N7z::COutHandler::InitSolid(void)+11p
.text:00004958
.text:00004958 var_4           = dword ptr -4
.text:00004958
.text:00004958                 push    ebp
.text:00004959                 mov     ebp, esp
.text:0000495B                 push    ecx
.text:0000495C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004963                 mov     [ebp+var_4], ecx
.text:00004966                 mov     eax, [ebp+var_4]
.text:00004969                 mov     dword ptr [eax+50h], 0FFFFFFFFh
.text:00004970                 mov     dword ptr [eax+54h], 0FFFFFFFFh
.text:00004977                 mov     esp, ebp
.text:00004979                 pop     ebp
.text:0000497A                 retn
.text:0000497A ?InitSolidFiles@COutHandler@N7z@NArchive@@QAEXXZ endp
.text:0000497A
.text:0000497A ; ---------------------------------------------------------------------------
.text:0000497B                 align 4
.text:0000497B _text           ends
.text:0000497B
.text:0000497C ; ===========================================================================
.text:0000497C
.text:0000497C ; Segment type: Pure code
.text:0000497C ; Segment permissions: Read/Execute
.text:0000497C _text           segment para public 'CODE' use32
.text:0000497C                 assume cs:_text
.text:0000497C                 ;org 497Ch
.text:0000497C ; COMDAT (pick any)
.text:0000497C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000497C
.text:0000497C ; =============== S U B R O U T I N E =======================================
.text:0000497C
.text:0000497C ; Attributes: bp-based frame
.text:0000497C
.text:0000497C ; void __thiscall NArchive::N7z::COutHandler::InitSolidSize(NArchive::N7z::COutHandler *__hidden this)
.text:0000497C                 public ?InitSolidSize@COutHandler@N7z@NArchive@@QAEXXZ
.text:0000497C ?InitSolidSize@COutHandler@N7z@NArchive@@QAEXXZ proc near
.text:0000497C                                         ; CODE XREF: NArchive::N7z::COutHandler::InitSolid(void)+19p
.text:0000497C
.text:0000497C var_4           = dword ptr -4
.text:0000497C
.text:0000497C                 push    ebp
.text:0000497D                 mov     ebp, esp
.text:0000497F                 push    ecx
.text:00004980                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004987                 mov     [ebp+var_4], ecx
.text:0000498A                 mov     eax, [ebp+var_4]
.text:0000498D                 mov     dword ptr [eax+58h], 0FFFFFFFFh
.text:00004994                 mov     dword ptr [eax+5Ch], 0FFFFFFFFh
.text:0000499B                 mov     esp, ebp
.text:0000499D                 pop     ebp
.text:0000499E                 retn
.text:0000499E ?InitSolidSize@COutHandler@N7z@NArchive@@QAEXXZ endp
.text:0000499E
.text:0000499E ; ---------------------------------------------------------------------------
.text:0000499F                 align 10h
.text:0000499F _text           ends
.text:0000499F
.text:000049A0 ; ===========================================================================
.text:000049A0
.text:000049A0 ; Segment type: Pure code
.text:000049A0 ; Segment permissions: Read/Execute
.text:000049A0 _text           segment para public 'CODE' use32
.text:000049A0                 assume cs:_text
.text:000049A0                 ;org 49A0h
.text:000049A0 ; COMDAT (pick any)
.text:000049A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049A0
.text:000049A0 ; =============== S U B R O U T I N E =======================================
.text:000049A0
.text:000049A0 ; Attributes: bp-based frame
.text:000049A0
.text:000049A0 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:000049A0                 public ?Len@UString@@QBEIXZ
.text:000049A0 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+5Fp
.text:000049A0                                         ; NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+107p
.text:000049A0
.text:000049A0 var_4           = dword ptr -4
.text:000049A0
.text:000049A0                 push    ebp
.text:000049A1                 mov     ebp, esp
.text:000049A3                 push    ecx
.text:000049A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049AB                 mov     [ebp+var_4], ecx
.text:000049AE                 mov     eax, [ebp+var_4]
.text:000049B1                 mov     eax, [eax+4]
.text:000049B4                 mov     esp, ebp
.text:000049B6                 pop     ebp
.text:000049B7                 retn
.text:000049B7 ?Len@UString@@QBEIXZ endp
.text:000049B7
.text:000049B7 _text           ends
.text:000049B7
.text:000049B8 ; ===========================================================================
.text:000049B8
.text:000049B8 ; Segment type: Pure code
.text:000049B8 ; Segment permissions: Read/Execute
.text:000049B8 _text           segment para public 'CODE' use32
.text:000049B8                 assume cs:_text
.text:000049B8                 ;org 49B8h
.text:000049B8 ; COMDAT (pick any)
.text:000049B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049B8
.text:000049B8 ; =============== S U B R O U T I N E =======================================
.text:000049B8
.text:000049B8 ; Attributes: bp-based frame
.text:000049B8
.text:000049B8 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:000049B8                 public ??BUString@@QBEPB_WXZ
.text:000049B8 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+70p
.text:000049B8                                         ; NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+9Cp ...
.text:000049B8
.text:000049B8 var_4           = dword ptr -4
.text:000049B8
.text:000049B8                 push    ebp
.text:000049B9                 mov     ebp, esp
.text:000049BB                 push    ecx
.text:000049BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049C3                 mov     [ebp+var_4], ecx
.text:000049C6                 mov     eax, [ebp+var_4]
.text:000049C9                 mov     eax, [eax]
.text:000049CB                 mov     esp, ebp
.text:000049CD                 pop     ebp
.text:000049CE                 retn
.text:000049CE ??BUString@@QBEPB_WXZ endp
.text:000049CE
.text:000049CE ; ---------------------------------------------------------------------------
.text:000049CF                 align 10h
.text:000049CF _text           ends
.text:000049CF
.text:000049D0 ; ===========================================================================
.text:000049D0
.text:000049D0 ; Segment type: Pure code
.text:000049D0 ; Segment permissions: Read/Execute
.text:000049D0 _text           segment para public 'CODE' use32
.text:000049D0                 assume cs:_text
.text:000049D0                 ;org 49D0h
.text:000049D0 ; COMDAT (pick any)
.text:000049D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049D0
.text:000049D0 ; =============== S U B R O U T I N E =======================================
.text:000049D0
.text:000049D0 ; Attributes: bp-based frame
.text:000049D0
.text:000049D0 ; void __thiscall UString::MakeLower_Ascii(UString *__hidden this)
.text:000049D0                 public ?MakeLower_Ascii@UString@@QAEXXZ
.text:000049D0 ?MakeLower_Ascii@UString@@QAEXXZ proc near
.text:000049D0                                         ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+50p
.text:000049D0                                         ; NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+53p ...
.text:000049D0
.text:000049D0 var_4           = dword ptr -4
.text:000049D0
.text:000049D0                 push    ebp
.text:000049D1                 mov     ebp, esp
.text:000049D3                 push    ecx
.text:000049D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049DB                 mov     [ebp+var_4], ecx
.text:000049DE                 mov     eax, [ebp+var_4]
.text:000049E1                 mov     ecx, [eax]
.text:000049E3                 push    ecx             ; wchar_t *
.text:000049E4                 call    ?MyStringLower_Ascii@@YGXPA_W@Z ; MyStringLower_Ascii(wchar_t *)
.text:000049E9                 add     esp, 4
.text:000049EC                 cmp     ebp, esp
.text:000049EE                 call    __RTC_CheckEsp
.text:000049F3                 mov     esp, ebp
.text:000049F5                 pop     ebp
.text:000049F6                 retn
.text:000049F6 ?MakeLower_Ascii@UString@@QAEXXZ endp
.text:000049F6
.text:000049F6 ; ---------------------------------------------------------------------------
.text:000049F7                 align 4
.text:000049F7 _text           ends
.text:000049F7
.text:000049F8 ; ===========================================================================
.text:000049F8
.text:000049F8 ; Segment type: Pure code
.text:000049F8 ; Segment permissions: Read/Execute
.text:000049F8 _text           segment para public 'CODE' use32
.text:000049F8                 assume cs:_text
.text:000049F8                 ;org 49F8h
.text:000049F8 ; COMDAT (pick any)
.text:000049F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049F8
.text:000049F8 ; =============== S U B R O U T I N E =======================================
.text:000049F8
.text:000049F8 ; Attributes: bp-based frame
.text:000049F8
.text:000049F8 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:000049F8                 public ?IsEmpty@UString@@QBE_NXZ
.text:000049F8 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+5Bp
.text:000049F8                                         ; NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+A6p ...
.text:000049F8
.text:000049F8 var_4           = dword ptr -4
.text:000049F8
.text:000049F8                 push    ebp
.text:000049F9                 mov     ebp, esp
.text:000049FB                 push    ecx
.text:000049FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A03                 mov     [ebp+var_4], ecx
.text:00004A06                 mov     eax, [ebp+var_4]
.text:00004A09                 xor     ecx, ecx
.text:00004A0B                 cmp     dword ptr [eax+4], 0
.text:00004A0F                 setz    cl
.text:00004A12                 mov     al, cl
.text:00004A14                 mov     esp, ebp
.text:00004A16                 pop     ebp
.text:00004A17                 retn
.text:00004A17 ?IsEmpty@UString@@QBE_NXZ endp
.text:00004A17
.text:00004A17 _text           ends
.text:00004A17
.text:00004A18 ; ===========================================================================
.text:00004A18
.text:00004A18 ; Segment type: Pure code
.text:00004A18 ; Segment permissions: Read/Execute
.text:00004A18 _text           segment para public 'CODE' use32
.text:00004A18                 assume cs:_text
.text:00004A18                 ;org 4A18h
.text:00004A18 ; COMDAT (pick any)
.text:00004A18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A18
.text:00004A18 ; =============== S U B R O U T I N E =======================================
.text:00004A18
.text:00004A18 ; Attributes: bp-based frame
.text:00004A18
.text:00004A18 ; bool __thiscall UString::IsEqualTo(UString *this, const char *)
.text:00004A18                 public ?IsEqualTo@UString@@QBE_NPBD@Z
.text:00004A18 ?IsEqualTo@UString@@QBE_NPBD@Z proc near
.text:00004A18                                         ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+148p
.text:00004A18                                         ; NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+186p ...
.text:00004A18
.text:00004A18 var_4           = dword ptr -4
.text:00004A18 arg_0           = dword ptr  8
.text:00004A18
.text:00004A18                 push    ebp
.text:00004A19                 mov     ebp, esp
.text:00004A1B                 push    ecx
.text:00004A1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A23                 mov     [ebp+var_4], ecx
.text:00004A26                 mov     eax, [ebp+arg_0]
.text:00004A29                 push    eax             ; char *
.text:00004A2A                 mov     ecx, [ebp+var_4]
.text:00004A2D                 mov     edx, [ecx]
.text:00004A2F                 push    edx             ; wchar_t *
.text:00004A30                 call    ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqual_Ascii(wchar_t const *,char const *)
.text:00004A35                 add     esp, 4
.text:00004A38                 cmp     ebp, esp
.text:00004A3A                 call    __RTC_CheckEsp
.text:00004A3F                 mov     esp, ebp
.text:00004A41                 pop     ebp
.text:00004A42                 retn    4
.text:00004A42 ?IsEqualTo@UString@@QBE_NPBD@Z endp
.text:00004A42
.text:00004A42 ; ---------------------------------------------------------------------------
.text:00004A45                 align 4
.text:00004A45 _text           ends
.text:00004A45
.text:00004A48 ; ===========================================================================
.text:00004A48
.text:00004A48 ; Segment type: Pure code
.text:00004A48 ; Segment permissions: Read/Execute
.text:00004A48 _text           segment para public 'CODE' use32
.text:00004A48                 assume cs:_text
.text:00004A48                 ;org 4A48h
.text:00004A48 ; COMDAT (pick any)
.text:00004A48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A48
.text:00004A48 ; =============== S U B R O U T I N E =======================================
.text:00004A48
.text:00004A48 ; Attributes: bp-based frame
.text:00004A48
.text:00004A48 ; unsigned int __thiscall NArchive::CMultiMethodProps::GetNumEmptyMethods(NArchive::CMultiMethodProps *__hidden this)
.text:00004A48                 public ?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ
.text:00004A48 ?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ proc near
.text:00004A48                                         ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+30Fp
.text:00004A48
.text:00004A48 var_8           = dword ptr -8
.text:00004A48 var_4           = dword ptr -4
.text:00004A48
.text:00004A48                 push    ebp
.text:00004A49                 mov     ebp, esp
.text:00004A4B                 sub     esp, 8
.text:00004A4E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004A55                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A5C                 mov     [ebp+var_4], ecx
.text:00004A5F                 mov     [ebp+var_8], 0
.text:00004A66                 jmp     short loc_4A71
.text:00004A68 ; ---------------------------------------------------------------------------
.text:00004A68
.text:00004A68 loc_4A68:                               ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void):loc_4AA0j
.text:00004A68                 mov     eax, [ebp+var_8]
.text:00004A6B                 add     eax, 1
.text:00004A6E                 mov     [ebp+var_8], eax
.text:00004A71
.text:00004A71 loc_4A71:                               ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+1Ej
.text:00004A71                 mov     ecx, [ebp+var_4]
.text:00004A74                 add     ecx, 14h
.text:00004A77                 call    ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size(void)
.text:00004A7C                 cmp     [ebp+var_8], eax
.text:00004A7F                 jnb     short loc_4AA2
.text:00004A81                 mov     ecx, [ebp+var_8]
.text:00004A84                 push    ecx
.text:00004A85                 mov     ecx, [ebp+var_4]
.text:00004A88                 add     ecx, 14h
.text:00004A8B                 call    ??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[](uint)
.text:00004A90                 mov     ecx, eax        ; this
.text:00004A92                 call    ?IsEmpty@COneMethodInfo@@QBE_NXZ ; COneMethodInfo::IsEmpty(void)
.text:00004A97                 movzx   edx, al
.text:00004A9A                 test    edx, edx
.text:00004A9C                 jnz     short loc_4AA0
.text:00004A9E                 jmp     short loc_4AA2
.text:00004AA0 ; ---------------------------------------------------------------------------
.text:00004AA0
.text:00004AA0 loc_4AA0:                               ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+54j
.text:00004AA0                 jmp     short loc_4A68
.text:00004AA2 ; ---------------------------------------------------------------------------
.text:00004AA2
.text:00004AA2 loc_4AA2:                               ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+37j
.text:00004AA2                                         ; NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+56j
.text:00004AA2                 mov     eax, [ebp+var_8]
.text:00004AA5                 add     esp, 8
.text:00004AA8                 cmp     ebp, esp
.text:00004AAA                 call    __RTC_CheckEsp
.text:00004AAF                 mov     esp, ebp
.text:00004AB1                 pop     ebp
.text:00004AB2                 retn
.text:00004AB2 ?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ endp
.text:00004AB2
.text:00004AB2 ; ---------------------------------------------------------------------------
.text:00004AB3                 align 4
.text:00004AB3 _text           ends
.text:00004AB3
.text:00004AB4 ; ===========================================================================
.text:00004AB4
.text:00004AB4 ; Segment type: Pure code
.text:00004AB4 ; Segment permissions: Read/Execute
.text:00004AB4 _text           segment para public 'CODE' use32
.text:00004AB4                 assume cs:_text
.text:00004AB4                 ;org 4AB4h
.text:00004AB4 ; COMDAT (pick any)
.text:00004AB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AB4
.text:00004AB4 ; =============== S U B R O U T I N E =======================================
.text:00004AB4
.text:00004AB4 ; Attributes: bp-based frame
.text:00004AB4
.text:00004AB4 ; bool __thiscall COneMethodInfo::IsEmpty(COneMethodInfo *__hidden this)
.text:00004AB4                 public ?IsEmpty@COneMethodInfo@@QBE_NXZ
.text:00004AB4 ?IsEmpty@COneMethodInfo@@QBE_NXZ proc near
.text:00004AB4                                         ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+4Ap
.text:00004AB4
.text:00004AB4 var_8           = dword ptr -8
.text:00004AB4 var_4           = dword ptr -4
.text:00004AB4
.text:00004AB4                 push    ebp
.text:00004AB5                 mov     ebp, esp
.text:00004AB7                 sub     esp, 8
.text:00004ABA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004AC1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AC8                 mov     [ebp+var_4], ecx
.text:00004ACB                 mov     ecx, [ebp+var_4]
.text:00004ACE                 add     ecx, 0Ch        ; this
.text:00004AD1                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00004AD6                 movzx   eax, al
.text:00004AD9                 test    eax, eax
.text:00004ADB                 jz      short loc_4AF5
.text:00004ADD                 mov     ecx, [ebp+var_4]
.text:00004AE0                 call    ?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ ; CObjectVector<CProp>::IsEmpty(void)
.text:00004AE5                 movzx   ecx, al
.text:00004AE8                 test    ecx, ecx
.text:00004AEA                 jz      short loc_4AF5
.text:00004AEC                 mov     [ebp+var_8], 1
.text:00004AF3                 jmp     short loc_4AFC
.text:00004AF5 ; ---------------------------------------------------------------------------
.text:00004AF5
.text:00004AF5 loc_4AF5:                               ; CODE XREF: COneMethodInfo::IsEmpty(void)+27j
.text:00004AF5                                         ; COneMethodInfo::IsEmpty(void)+36j
.text:00004AF5                 mov     [ebp+var_8], 0
.text:00004AFC
.text:00004AFC loc_4AFC:                               ; CODE XREF: COneMethodInfo::IsEmpty(void)+3Fj
.text:00004AFC                 mov     al, byte ptr [ebp+var_8]
.text:00004AFF                 add     esp, 8
.text:00004B02                 cmp     ebp, esp
.text:00004B04                 call    __RTC_CheckEsp
.text:00004B09                 mov     esp, ebp
.text:00004B0B                 pop     ebp
.text:00004B0C                 retn
.text:00004B0C ?IsEmpty@COneMethodInfo@@QBE_NXZ endp
.text:00004B0C
.text:00004B0C ; ---------------------------------------------------------------------------
.text:00004B0D                 align 10h
.text:00004B0D _text           ends
.text:00004B0D
.text:00004B10 ; ===========================================================================
.text:00004B10
.text:00004B10 ; Segment type: Pure code
.text:00004B10 ; Segment permissions: Read/Execute
.text:00004B10 _text           segment para public 'CODE' use32
.text:00004B10                 assume cs:_text
.text:00004B10                 ;org 4B10h
.text:00004B10 ; COMDAT (pick any)
.text:00004B10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B10
.text:00004B10 ; =============== S U B R O U T I N E =======================================
.text:00004B10
.text:00004B10 ; Attributes: bp-based frame
.text:00004B10
.text:00004B10 ; public: __thiscall CObjectVector<class UString>::CObjectVector<class UString>(void)
.text:00004B10                 public ??0?$CObjectVector@VUString@@@@QAE@XZ
.text:00004B10 ??0?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:00004B10                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(void)+7Ep
.text:00004B10
.text:00004B10 var_4           = dword ptr -4
.text:00004B10
.text:00004B10                 push    ebp
.text:00004B11                 mov     ebp, esp
.text:00004B13                 push    ecx
.text:00004B14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B1B                 mov     [ebp+var_4], ecx
.text:00004B1E                 mov     ecx, [ebp+var_4]
.text:00004B21                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00004B26                 mov     eax, [ebp+var_4]
.text:00004B29                 add     esp, 4
.text:00004B2C                 cmp     ebp, esp
.text:00004B2E                 call    __RTC_CheckEsp
.text:00004B33                 mov     esp, ebp
.text:00004B35                 pop     ebp
.text:00004B36                 retn
.text:00004B36 ??0?$CObjectVector@VUString@@@@QAE@XZ endp
.text:00004B36
.text:00004B36 ; ---------------------------------------------------------------------------
.text:00004B37                 align 4
.text:00004B37 _text           ends
.text:00004B37
.text:00004B38 ; ===========================================================================
.text:00004B38
.text:00004B38 ; Segment type: Pure code
.text:00004B38 ; Segment permissions: Read/Execute
.text:00004B38 _text           segment para public 'CODE' use32
.text:00004B38                 assume cs:_text
.text:00004B38                 ;org 4B38h
.text:00004B38 ; COMDAT (pick any)
.text:00004B38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B38
.text:00004B38 ; =============== S U B R O U T I N E =======================================
.text:00004B38
.text:00004B38 ; Attributes: bp-based frame
.text:00004B38
.text:00004B38 ; public: __thiscall CObjectVector<class UString>::~CObjectVector<class UString>(void)
.text:00004B38                 public ??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00004B38 ??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:00004B38                                         ; CODE XREF: __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$5+6j
.text:00004B38                                         ; NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut(void)+91p ...
.text:00004B38
.text:00004B38 var_20          = dword ptr -20h
.text:00004B38 var_1C          = dword ptr -1Ch
.text:00004B38 var_18          = dword ptr -18h
.text:00004B38 var_14          = dword ptr -14h
.text:00004B38 var_10          = dword ptr -10h
.text:00004B38 var_C           = dword ptr -0Ch
.text:00004B38 var_4           = dword ptr -4
.text:00004B38
.text:00004B38                 push    ebp
.text:00004B39                 mov     ebp, esp
.text:00004B3B                 push    0FFFFFFFFh
.text:00004B3D                 push    offset __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00004B42                 mov     eax, large fs:0
.text:00004B48                 push    eax
.text:00004B49                 sub     esp, 14h
.text:00004B4C                 mov     eax, 0CCCCCCCCh
.text:00004B51                 mov     [ebp+var_20], eax
.text:00004B54                 mov     [ebp+var_1C], eax
.text:00004B57                 mov     [ebp+var_18], eax
.text:00004B5A                 mov     [ebp+var_14], eax
.text:00004B5D                 mov     [ebp+var_10], eax
.text:00004B60                 mov     eax, dword ptr ds:___security_cookie
.text:00004B65                 xor     eax, ebp
.text:00004B67                 push    eax
.text:00004B68                 lea     eax, [ebp+var_C]
.text:00004B6B                 mov     large fs:0, eax
.text:00004B71                 mov     [ebp+var_10], ecx
.text:00004B74                 mov     [ebp+var_4], 0
.text:00004B7B                 mov     ecx, [ebp+var_10]
.text:00004B7E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00004B83                 mov     [ebp+var_14], eax
.text:00004B86
.text:00004B86 loc_4B86:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void):loc_4BC8j
.text:00004B86                 cmp     [ebp+var_14], 0
.text:00004B8A                 jz      short loc_4BCA
.text:00004B8C                 mov     eax, [ebp+var_14]
.text:00004B8F                 sub     eax, 1
.text:00004B92                 mov     [ebp+var_14], eax
.text:00004B95                 mov     ecx, [ebp+var_14]
.text:00004B98                 push    ecx
.text:00004B99                 mov     ecx, [ebp+var_10]
.text:00004B9C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00004BA1                 mov     edx, [eax]
.text:00004BA3                 mov     [ebp+var_1C], edx
.text:00004BA6                 mov     eax, [ebp+var_1C]
.text:00004BA9                 mov     [ebp+var_18], eax
.text:00004BAC                 cmp     [ebp+var_18], 0
.text:00004BB0                 jz      short loc_4BC1
.text:00004BB2                 push    1
.text:00004BB4                 mov     ecx, [ebp+var_18]
.text:00004BB7                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:00004BBC                 mov     [ebp+var_20], eax
.text:00004BBF                 jmp     short loc_4BC8
.text:00004BC1 ; ---------------------------------------------------------------------------
.text:00004BC1
.text:00004BC1 loc_4BC1:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+78j
.text:00004BC1                 mov     [ebp+var_20], 0
.text:00004BC8
.text:00004BC8 loc_4BC8:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+87j
.text:00004BC8                 jmp     short loc_4B86
.text:00004BCA ; ---------------------------------------------------------------------------
.text:00004BCA
.text:00004BCA loc_4BCA:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+52j
.text:00004BCA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004BD1                 mov     ecx, [ebp+var_10]
.text:00004BD4                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00004BD9                 mov     ecx, [ebp+var_C]
.text:00004BDC                 mov     large fs:0, ecx
.text:00004BE3                 pop     ecx
.text:00004BE4                 add     esp, 20h
.text:00004BE7                 cmp     ebp, esp
.text:00004BE9                 call    __RTC_CheckEsp
.text:00004BEE                 mov     esp, ebp
.text:00004BF0                 pop     ebp
.text:00004BF1                 retn
.text:00004BF1 ??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text:00004BF1
.text:00004BF1 ; ---------------------------------------------------------------------------
.text:00004BF2                 align 4
.text:00004BF2 _text           ends
.text:00004BF2
.text$x:00004BF4 ; ===========================================================================
.text$x:00004BF4
.text$x:00004BF4 ; Segment type: Pure code
.text$x:00004BF4 ; Segment permissions: Read/Execute
.text$x:00004BF4 _text$x         segment para public 'CODE' use32
.text$x:00004BF4                 assume cs:_text$x
.text$x:00004BF4                 ;org 4BF4h
.text$x:00004BF4 ; COMDAT (pick associative to section at 4B38)
.text$x:00004BF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004BF4
.text$x:00004BF4 ; =============== S U B R O U T I N E =======================================
.text$x:00004BF4
.text$x:00004BF4
.text$x:00004BF4 __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 proc near
.text$x:00004BF4                                         ; DATA XREF: .xdata$x:00004C1Co
.text$x:00004BF4                 mov     ecx, [ebp-10h]
.text$x:00004BF7                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00004BF7 __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 endp
.text$x:00004BF7
.text$x:00004BFC
.text$x:00004BFC ; =============== S U B R O U T I N E =======================================
.text$x:00004BFC
.text$x:00004BFC
.text$x:00004BFC __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text$x:00004BFC                                         ; DATA XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+5o
.text$x:00004BFC
.text$x:00004BFC arg_4           = dword ptr  8
.text$x:00004BFC
.text$x:00004BFC                 mov     edx, [esp+arg_4]
.text$x:00004C00                 lea     eax, [edx+0Ch]
.text$x:00004C03                 mov     ecx, [edx-18h]
.text$x:00004C06                 xor     ecx, eax
.text$x:00004C08                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C0D                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
.text$x:00004C12                 jmp     ___CxxFrameHandler3
.text$x:00004C12 __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text$x:00004C12
.text$x:00004C12 ; ---------------------------------------------------------------------------
.text$x:00004C17                 align 4
.text$x:00004C17 _text$x         ends
.text$x:00004C17
.xdata$x:00004C18 ; ===========================================================================
.xdata$x:00004C18
.xdata$x:00004C18 ; Segment type: Pure data
.xdata$x:00004C18 ; Segment permissions: Read
.xdata$x:00004C18 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004C18                 assume cs:_xdata$x
.xdata$x:00004C18                 ;org 4C18h
.xdata$x:00004C18 ; COMDAT (pick associative to section at 4B38)
.xdata$x:00004C18 __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ db 0FFh
.xdata$x:00004C18                                         ; DATA XREF: .xdata$x:00004C28o
.xdata$x:00004C19                 db 0FFh
.xdata$x:00004C1A                 db 0FFh
.xdata$x:00004C1B                 db 0FFh
.xdata$x:00004C1C                 dd offset __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
.xdata$x:00004C20 __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ db  22h ; "
.xdata$x:00004C20                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ+11o
.xdata$x:00004C21                 db    5
.xdata$x:00004C22                 db  93h ; ô
.xdata$x:00004C23                 db  19h
.xdata$x:00004C24                 db    1
.xdata$x:00004C25                 db    0
.xdata$x:00004C26                 db    0
.xdata$x:00004C27                 db    0
.xdata$x:00004C28                 dd offset __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
.xdata$x:00004C2C                 align 20h
.xdata$x:00004C40                 db    1
.xdata$x:00004C41                 db    0
.xdata$x:00004C42                 db    0
.xdata$x:00004C43                 db    0
.xdata$x:00004C43 _xdata$x        ends
.xdata$x:00004C43
.text:00004C44 ; ===========================================================================
.text:00004C44
.text:00004C44 ; Segment type: Pure code
.text:00004C44 ; Segment permissions: Read/Execute
.text:00004C44 _text           segment para public 'CODE' use32
.text:00004C44                 assume cs:_text
.text:00004C44                 ;org 4C44h
.text:00004C44 ; COMDAT (pick any)
.text:00004C44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C44
.text:00004C44 ; =============== S U B R O U T I N E =======================================
.text:00004C44
.text:00004C44 ; Attributes: bp-based frame
.text:00004C44
.text:00004C44 ; public: bool __thiscall CObjectVector<struct CProp>::IsEmpty(void)const
.text:00004C44                 public ?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ
.text:00004C44 ?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ proc near
.text:00004C44                                         ; CODE XREF: COneMethodInfo::IsEmpty(void)+2Cp
.text:00004C44
.text:00004C44 var_4           = dword ptr -4
.text:00004C44
.text:00004C44                 push    ebp
.text:00004C45                 mov     ebp, esp
.text:00004C47                 push    ecx
.text:00004C48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C4F                 mov     [ebp+var_4], ecx
.text:00004C52                 mov     ecx, [ebp+var_4]
.text:00004C55                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:00004C5A                 add     esp, 4
.text:00004C5D                 cmp     ebp, esp
.text:00004C5F                 call    __RTC_CheckEsp
.text:00004C64                 mov     esp, ebp
.text:00004C66                 pop     ebp
.text:00004C67                 retn
.text:00004C67 ?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ endp
.text:00004C67
.text:00004C67 _text           ends
.text:00004C67
.text:00004C68 ; ===========================================================================
.text:00004C68
.text:00004C68 ; Segment type: Pure code
.text:00004C68 ; Segment permissions: Read/Execute
.text:00004C68 _text           segment para public 'CODE' use32
.text:00004C68                 assume cs:_text
.text:00004C68                 ;org 4C68h
.text:00004C68 ; COMDAT (pick any)
.text:00004C68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C68
.text:00004C68 ; =============== S U B R O U T I N E =======================================
.text:00004C68
.text:00004C68 ; Attributes: bp-based frame
.text:00004C68
.text:00004C68 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(void)
.text:00004C68                 public ??0?$CObjectVector@UCProp@@@@QAE@XZ
.text:00004C68 ??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00004C68                                         ; CODE XREF: CProps::CProps(void)+11p
.text:00004C68
.text:00004C68 var_4           = dword ptr -4
.text:00004C68
.text:00004C68                 push    ebp
.text:00004C69                 mov     ebp, esp
.text:00004C6B                 push    ecx
.text:00004C6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C73                 mov     [ebp+var_4], ecx
.text:00004C76                 mov     ecx, [ebp+var_4]
.text:00004C79                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00004C7E                 mov     eax, [ebp+var_4]
.text:00004C81                 add     esp, 4
.text:00004C84                 cmp     ebp, esp
.text:00004C86                 call    __RTC_CheckEsp
.text:00004C8B                 mov     esp, ebp
.text:00004C8D                 pop     ebp
.text:00004C8E                 retn
.text:00004C8E ??0?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00004C8E
.text:00004C8E ; ---------------------------------------------------------------------------
.text:00004C8F                 align 10h
.text:00004C8F _text           ends
.text:00004C8F
.text:00004C90 ; ===========================================================================
.text:00004C90
.text:00004C90 ; Segment type: Pure code
.text:00004C90 ; Segment permissions: Read/Execute
.text:00004C90 _text           segment para public 'CODE' use32
.text:00004C90                 assume cs:_text
.text:00004C90                 ;org 4C90h
.text:00004C90 ; COMDAT (pick any)
.text:00004C90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C90
.text:00004C90 ; =============== S U B R O U T I N E =======================================
.text:00004C90
.text:00004C90 ; Attributes: bp-based frame
.text:00004C90
.text:00004C90 ; public: class CObjectVector<struct CProp> & __thiscall CObjectVector<struct CProp>::operator=(class CObjectVector<struct CProp> const &)
.text:00004C90                 public ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.text:00004C90 ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z proc near
.text:00004C90                                         ; CODE XREF: CProps::operator=(CProps const &)+15p
.text:00004C90
.text:00004C90 var_24          = dword ptr -24h
.text:00004C90 var_20          = dword ptr -20h
.text:00004C90 var_1C          = dword ptr -1Ch
.text:00004C90 var_18          = dword ptr -18h
.text:00004C90 var_14          = dword ptr -14h
.text:00004C90 var_10          = dword ptr -10h
.text:00004C90 var_C           = dword ptr -0Ch
.text:00004C90 var_4           = dword ptr -4
.text:00004C90 arg_0           = dword ptr  8
.text:00004C90
.text:00004C90                 push    ebp
.text:00004C91                 mov     ebp, esp
.text:00004C93                 push    0FFFFFFFFh
.text:00004C95                 push    offset __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.text:00004C9A                 mov     eax, large fs:0
.text:00004CA0                 push    eax
.text:00004CA1                 sub     esp, 18h
.text:00004CA4                 mov     eax, 0CCCCCCCCh
.text:00004CA9                 mov     [ebp+var_24], eax
.text:00004CAC                 mov     [ebp+var_20], eax
.text:00004CAF                 mov     [ebp+var_1C], eax
.text:00004CB2                 mov     [ebp+var_18], eax
.text:00004CB5                 mov     [ebp+var_14], eax
.text:00004CB8                 mov     [ebp+var_10], eax
.text:00004CBB                 mov     eax, dword ptr ds:___security_cookie
.text:00004CC0                 xor     eax, ebp
.text:00004CC2                 push    eax
.text:00004CC3                 lea     eax, [ebp+var_C]
.text:00004CC6                 mov     large fs:0, eax
.text:00004CCC                 mov     [ebp+var_10], ecx
.text:00004CCF                 mov     eax, [ebp+arg_0]
.text:00004CD2                 cmp     eax, [ebp+var_10]
.text:00004CD5                 jnz     short loc_4CDF
.text:00004CD7                 mov     eax, [ebp+var_10]
.text:00004CDA                 jmp     loc_4D71
.text:00004CDF ; ---------------------------------------------------------------------------
.text:00004CDF
.text:00004CDF loc_4CDF:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+45j
.text:00004CDF                 mov     ecx, [ebp+var_10]
.text:00004CE2                 call    ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ; CObjectVector<CProp>::Clear(void)
.text:00004CE7                 mov     ecx, [ebp+arg_0]
.text:00004CEA                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:00004CEF                 mov     [ebp+var_14], eax
.text:00004CF2                 mov     ecx, [ebp+var_14]
.text:00004CF5                 push    ecx
.text:00004CF6                 mov     ecx, [ebp+var_10]
.text:00004CF9                 call    ?Reserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Reserve(uint)
.text:00004CFE                 mov     [ebp+var_18], 0
.text:00004D05                 jmp     short loc_4D10
.text:00004D07 ; ---------------------------------------------------------------------------
.text:00004D07
.text:00004D07 loc_4D07:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+DCj
.text:00004D07                 mov     edx, [ebp+var_18]
.text:00004D0A                 add     edx, 1
.text:00004D0D                 mov     [ebp+var_18], edx
.text:00004D10
.text:00004D10 loc_4D10:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+75j
.text:00004D10                 mov     eax, [ebp+var_18]
.text:00004D13                 cmp     eax, [ebp+var_14]
.text:00004D16                 jnb     short loc_4D6E
.text:00004D18                 push    18h             ; unsigned int
.text:00004D1A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00004D1F                 add     esp, 4
.text:00004D22                 mov     [ebp+var_20], eax
.text:00004D25                 mov     [ebp+var_4], 0
.text:00004D2C                 cmp     [ebp+var_20], 0
.text:00004D30                 jz      short loc_4D4C
.text:00004D32                 mov     ecx, [ebp+var_18]
.text:00004D35                 push    ecx
.text:00004D36                 mov     ecx, [ebp+arg_0]
.text:00004D39                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00004D3E                 push    eax
.text:00004D3F                 mov     ecx, [ebp+var_20]
.text:00004D42                 call    ??0CProp@@QAE@ABU0@@Z ; CProp::CProp(CProp const &)
.text:00004D47                 mov     [ebp+var_24], eax
.text:00004D4A                 jmp     short loc_4D53
.text:00004D4C ; ---------------------------------------------------------------------------
.text:00004D4C
.text:00004D4C loc_4D4C:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+A0j
.text:00004D4C                 mov     [ebp+var_24], 0
.text:00004D53
.text:00004D53 loc_4D53:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+BAj
.text:00004D53                 mov     edx, [ebp+var_24]
.text:00004D56                 mov     [ebp+var_1C], edx
.text:00004D59                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004D60                 mov     eax, [ebp+var_1C]
.text:00004D63                 push    eax
.text:00004D64                 mov     ecx, [ebp+var_10]
.text:00004D67                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00004D6C                 jmp     short loc_4D07
.text:00004D6E ; ---------------------------------------------------------------------------
.text:00004D6E
.text:00004D6E loc_4D6E:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+86j
.text:00004D6E                 mov     eax, [ebp+var_10]
.text:00004D71
.text:00004D71 loc_4D71:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+4Aj
.text:00004D71                 mov     ecx, [ebp+var_C]
.text:00004D74                 mov     large fs:0, ecx
.text:00004D7B                 pop     ecx
.text:00004D7C                 add     esp, 24h
.text:00004D7F                 cmp     ebp, esp
.text:00004D81                 call    __RTC_CheckEsp
.text:00004D86                 mov     esp, ebp
.text:00004D88                 pop     ebp
.text:00004D89                 retn    4
.text:00004D89 ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z endp
.text:00004D89
.text:00004D89 _text           ends
.text:00004D89
.text$x:00004D8C ; ===========================================================================
.text$x:00004D8C
.text$x:00004D8C ; Segment type: Pure code
.text$x:00004D8C ; Segment permissions: Read/Execute
.text$x:00004D8C _text$x         segment para public 'CODE' use32
.text$x:00004D8C                 assume cs:_text$x
.text$x:00004D8C                 ;org 4D8Ch
.text$x:00004D8C ; COMDAT (pick associative to section at 4C90)
.text$x:00004D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004D8C
.text$x:00004D8C ; =============== S U B R O U T I N E =======================================
.text$x:00004D8C
.text$x:00004D8C
.text$x:00004D8C __unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0 proc near
.text$x:00004D8C                                         ; DATA XREF: .xdata$x:00004DB8o
.text$x:00004D8C                 mov     eax, [ebp-20h]
.text$x:00004D8F                 push    eax             ; void *
.text$x:00004D90                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004D95                 pop     ecx
.text$x:00004D96                 retn
.text$x:00004D96 __unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0 endp
.text$x:00004D96
.text$x:00004D97
.text$x:00004D97 ; =============== S U B R O U T I N E =======================================
.text$x:00004D97
.text$x:00004D97
.text$x:00004D97 __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z proc near
.text$x:00004D97                                         ; DATA XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+5o
.text$x:00004D97
.text$x:00004D97 arg_4           = dword ptr  8
.text$x:00004D97
.text$x:00004D97                 mov     edx, [esp+arg_4]
.text$x:00004D9B                 lea     eax, [edx+0Ch]
.text$x:00004D9E                 mov     ecx, [edx-1Ch]
.text$x:00004DA1                 xor     ecx, eax
.text$x:00004DA3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004DA8                 mov     eax, offset __ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.text$x:00004DAD                 jmp     ___CxxFrameHandler3
.text$x:00004DAD __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z endp
.text$x:00004DAD
.text$x:00004DAD ; ---------------------------------------------------------------------------
.text$x:00004DB2                 align 4
.text$x:00004DB2 _text$x         ends
.text$x:00004DB2
.xdata$x:00004DB4 ; ===========================================================================
.xdata$x:00004DB4
.xdata$x:00004DB4 ; Segment type: Pure data
.xdata$x:00004DB4 ; Segment permissions: Read
.xdata$x:00004DB4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004DB4                 assume cs:_xdata$x
.xdata$x:00004DB4                 ;org 4DB4h
.xdata$x:00004DB4 ; COMDAT (pick associative to section at 4C90)
.xdata$x:00004DB4 __unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z db 0FFh
.xdata$x:00004DB4                                         ; DATA XREF: .xdata$x:00004DC4o
.xdata$x:00004DB5                 db 0FFh
.xdata$x:00004DB6                 db 0FFh
.xdata$x:00004DB7                 db 0FFh
.xdata$x:00004DB8                 dd offset __unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0
.xdata$x:00004DBC __ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z db  22h ; "
.xdata$x:00004DBC                                         ; DATA XREF: __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z+11o
.xdata$x:00004DBD                 db    5
.xdata$x:00004DBE                 db  93h ; ô
.xdata$x:00004DBF                 db  19h
.xdata$x:00004DC0                 db    1
.xdata$x:00004DC1                 db    0
.xdata$x:00004DC2                 db    0
.xdata$x:00004DC3                 db    0
.xdata$x:00004DC4                 dd offset __unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.xdata$x:00004DC8                 db    0
.xdata$x:00004DC9                 db    0
.xdata$x:00004DCA                 db    0
.xdata$x:00004DCB                 db    0
.xdata$x:00004DCC                 db    0
.xdata$x:00004DCD                 db    0
.xdata$x:00004DCE                 db    0
.xdata$x:00004DCF                 db    0
.xdata$x:00004DD0                 db    0
.xdata$x:00004DD1                 db    0
.xdata$x:00004DD2                 db    0
.xdata$x:00004DD3                 db    0
.xdata$x:00004DD4                 db    0
.xdata$x:00004DD5                 db    0
.xdata$x:00004DD6                 db    0
.xdata$x:00004DD7                 db    0
.xdata$x:00004DD8                 db    0
.xdata$x:00004DD9                 db    0
.xdata$x:00004DDA                 db    0
.xdata$x:00004DDB                 db    0
.xdata$x:00004DDC                 db    1
.xdata$x:00004DDD                 db    0
.xdata$x:00004DDE                 db    0
.xdata$x:00004DDF                 db    0
.xdata$x:00004DDF _xdata$x        ends
.xdata$x:00004DDF
.text:00004DE0 ; ===========================================================================
.text:00004DE0
.text:00004DE0 ; Segment type: Pure code
.text:00004DE0 ; Segment permissions: Read/Execute
.text:00004DE0 _text           segment para public 'CODE' use32
.text:00004DE0                 assume cs:_text
.text:00004DE0                 ;org 4DE0h
.text:00004DE0 ; COMDAT (pick any)
.text:00004DE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DE0
.text:00004DE0 ; =============== S U B R O U T I N E =======================================
.text:00004DE0
.text:00004DE0 ; Attributes: bp-based frame
.text:00004DE0
.text:00004DE0 ; public: unsigned int __thiscall CObjectVector<struct CProp>::Size(void)const
.text:00004DE0                 public ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
.text:00004DE0 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ proc near
.text:00004DE0                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+5Ap
.text:00004DE0                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+51p
.text:00004DE0
.text:00004DE0 var_4           = dword ptr -4
.text:00004DE0
.text:00004DE0                 push    ebp
.text:00004DE1                 mov     ebp, esp
.text:00004DE3                 push    ecx
.text:00004DE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DEB                 mov     [ebp+var_4], ecx
.text:00004DEE                 mov     ecx, [ebp+var_4]
.text:00004DF1                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00004DF6                 add     esp, 4
.text:00004DF9                 cmp     ebp, esp
.text:00004DFB                 call    __RTC_CheckEsp
.text:00004E00                 mov     esp, ebp
.text:00004E02                 pop     ebp
.text:00004E03                 retn
.text:00004E03 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ endp
.text:00004E03
.text:00004E03 _text           ends
.text:00004E03
.text:00004E04 ; ===========================================================================
.text:00004E04
.text:00004E04 ; Segment type: Pure code
.text:00004E04 ; Segment permissions: Read/Execute
.text:00004E04 _text           segment para public 'CODE' use32
.text:00004E04                 assume cs:_text
.text:00004E04                 ;org 4E04h
.text:00004E04 ; COMDAT (pick any)
.text:00004E04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E04
.text:00004E04 ; =============== S U B R O U T I N E =======================================
.text:00004E04
.text:00004E04 ; Attributes: bp-based frame
.text:00004E04
.text:00004E04 ; public: struct CProp const & __thiscall CObjectVector<struct CProp>::operator[](unsigned int)const
.text:00004E04                 public ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
.text:00004E04 ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z proc near
.text:00004E04                                         ; CODE XREF: CMethodProps::Get_Lzma_DicSize(void)+34p
.text:00004E04                                         ; CMethodProps::Get_Lzma_DicSize(void)+49p ...
.text:00004E04
.text:00004E04 var_4           = dword ptr -4
.text:00004E04 arg_0           = dword ptr  8
.text:00004E04
.text:00004E04                 push    ebp
.text:00004E05                 mov     ebp, esp
.text:00004E07                 push    ecx
.text:00004E08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E0F                 mov     [ebp+var_4], ecx
.text:00004E12                 mov     eax, [ebp+arg_0]
.text:00004E15                 push    eax
.text:00004E16                 mov     ecx, [ebp+var_4]
.text:00004E19                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00004E1E                 mov     eax, [eax]
.text:00004E20                 add     esp, 4
.text:00004E23                 cmp     ebp, esp
.text:00004E25                 call    __RTC_CheckEsp
.text:00004E2A                 mov     esp, ebp
.text:00004E2C                 pop     ebp
.text:00004E2D                 retn    4
.text:00004E2D ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z endp
.text:00004E2D
.text:00004E2D _text           ends
.text:00004E2D
.text:00004E30 ; ===========================================================================
.text:00004E30
.text:00004E30 ; Segment type: Pure code
.text:00004E30 ; Segment permissions: Read/Execute
.text:00004E30 _text           segment para public 'CODE' use32
.text:00004E30                 assume cs:_text
.text:00004E30                 ;org 4E30h
.text:00004E30 ; COMDAT (pick any)
.text:00004E30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E30
.text:00004E30 ; =============== S U B R O U T I N E =======================================
.text:00004E30
.text:00004E30 ; Attributes: bp-based frame
.text:00004E30
.text:00004E30 ; public: struct CProp & __thiscall CObjectVector<struct CProp>::AddNew(void)
.text:00004E30                 public ?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
.text:00004E30 ?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ proc near
.text:00004E30                                         ; CODE XREF: CProps::AddProp_Ascii(ulong,char const *)+1Ap
.text:00004E30
.text:00004E30 var_20          = dword ptr -20h
.text:00004E30 var_1C          = dword ptr -1Ch
.text:00004E30 var_18          = dword ptr -18h
.text:00004E30 var_14          = dword ptr -14h
.text:00004E30 var_10          = dword ptr -10h
.text:00004E30 var_C           = dword ptr -0Ch
.text:00004E30 var_4           = dword ptr -4
.text:00004E30
.text:00004E30                 push    ebp
.text:00004E31                 mov     ebp, esp
.text:00004E33                 push    0FFFFFFFFh
.text:00004E35                 push    offset __ehhandler$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
.text:00004E3A                 mov     eax, large fs:0
.text:00004E40                 push    eax
.text:00004E41                 sub     esp, 14h
.text:00004E44                 mov     eax, 0CCCCCCCCh
.text:00004E49                 mov     [ebp+var_20], eax
.text:00004E4C                 mov     [ebp+var_1C], eax
.text:00004E4F                 mov     [ebp+var_18], eax
.text:00004E52                 mov     [ebp+var_14], eax
.text:00004E55                 mov     [ebp+var_10], eax
.text:00004E58                 mov     eax, dword ptr ds:___security_cookie
.text:00004E5D                 xor     eax, ebp
.text:00004E5F                 push    eax
.text:00004E60                 lea     eax, [ebp+var_C]
.text:00004E63                 mov     large fs:0, eax
.text:00004E69                 mov     [ebp+var_10], ecx
.text:00004E6C                 push    18h             ; unsigned int
.text:00004E6E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00004E73                 add     esp, 4
.text:00004E76                 mov     [ebp+var_1C], eax
.text:00004E79                 mov     [ebp+var_4], 0
.text:00004E80                 cmp     [ebp+var_1C], 0
.text:00004E84                 jz      short loc_4E93
.text:00004E86                 mov     ecx, [ebp+var_1C] ; this
.text:00004E89                 call    ??0CProp@@QAE@XZ ; CProp::CProp(void)
.text:00004E8E                 mov     [ebp+var_20], eax
.text:00004E91                 jmp     short loc_4E9A
.text:00004E93 ; ---------------------------------------------------------------------------
.text:00004E93
.text:00004E93 loc_4E93:                               ; CODE XREF: CObjectVector<CProp>::AddNew(void)+54j
.text:00004E93                 mov     [ebp+var_20], 0
.text:00004E9A
.text:00004E9A loc_4E9A:                               ; CODE XREF: CObjectVector<CProp>::AddNew(void)+61j
.text:00004E9A                 mov     eax, [ebp+var_20]
.text:00004E9D                 mov     [ebp+var_18], eax
.text:00004EA0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004EA7                 mov     ecx, [ebp+var_18]
.text:00004EAA                 mov     [ebp+var_14], ecx
.text:00004EAD                 mov     edx, [ebp+var_14]
.text:00004EB0                 push    edx
.text:00004EB1                 mov     ecx, [ebp+var_10]
.text:00004EB4                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00004EB9                 mov     eax, [ebp+var_14]
.text:00004EBC                 mov     ecx, [ebp+var_C]
.text:00004EBF                 mov     large fs:0, ecx
.text:00004EC6                 pop     ecx
.text:00004EC7                 add     esp, 20h
.text:00004ECA                 cmp     ebp, esp
.text:00004ECC                 call    __RTC_CheckEsp
.text:00004ED1                 mov     esp, ebp
.text:00004ED3                 pop     ebp
.text:00004ED4                 retn
.text:00004ED4 ?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ endp
.text:00004ED4
.text:00004ED4 ; ---------------------------------------------------------------------------
.text:00004ED5                 align 4
.text:00004ED5 _text           ends
.text:00004ED5
.text$x:00004ED8 ; ===========================================================================
.text$x:00004ED8
.text$x:00004ED8 ; Segment type: Pure code
.text$x:00004ED8 ; Segment permissions: Read/Execute
.text$x:00004ED8 _text$x         segment para public 'CODE' use32
.text$x:00004ED8                 assume cs:_text$x
.text$x:00004ED8                 ;org 4ED8h
.text$x:00004ED8 ; COMDAT (pick associative to section at 4E30)
.text$x:00004ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004ED8
.text$x:00004ED8 ; =============== S U B R O U T I N E =======================================
.text$x:00004ED8
.text$x:00004ED8
.text$x:00004ED8 __unwindfunclet$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ$0 proc near
.text$x:00004ED8                                         ; DATA XREF: .xdata$x:00004F04o
.text$x:00004ED8                 mov     eax, [ebp-1Ch]
.text$x:00004EDB                 push    eax             ; void *
.text$x:00004EDC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004EE1                 pop     ecx
.text$x:00004EE2                 retn
.text$x:00004EE2 __unwindfunclet$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ$0 endp
.text$x:00004EE2
.text$x:00004EE3
.text$x:00004EE3 ; =============== S U B R O U T I N E =======================================
.text$x:00004EE3
.text$x:00004EE3
.text$x:00004EE3 __ehhandler$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ proc near
.text$x:00004EE3                                         ; DATA XREF: CObjectVector<CProp>::AddNew(void)+5o
.text$x:00004EE3
.text$x:00004EE3 arg_4           = dword ptr  8
.text$x:00004EE3
.text$x:00004EE3                 mov     edx, [esp+arg_4]
.text$x:00004EE7                 lea     eax, [edx+0Ch]
.text$x:00004EEA                 mov     ecx, [edx-18h]
.text$x:00004EED                 xor     ecx, eax
.text$x:00004EEF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004EF4                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
.text$x:00004EF9                 jmp     ___CxxFrameHandler3
.text$x:00004EF9 __ehhandler$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ endp
.text$x:00004EF9
.text$x:00004EF9 ; ---------------------------------------------------------------------------
.text$x:00004EFE                 align 10h
.text$x:00004EFE _text$x         ends
.text$x:00004EFE
.xdata$x:00004F00 ; ===========================================================================
.xdata$x:00004F00
.xdata$x:00004F00 ; Segment type: Pure data
.xdata$x:00004F00 ; Segment permissions: Read
.xdata$x:00004F00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004F00                 assume cs:_xdata$x
.xdata$x:00004F00                 ;org 4F00h
.xdata$x:00004F00 ; COMDAT (pick associative to section at 4E30)
.xdata$x:00004F00 __unwindtable$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ db 0FFh
.xdata$x:00004F00                                         ; DATA XREF: .xdata$x:00004F10o
.xdata$x:00004F01                 db 0FFh
.xdata$x:00004F02                 db 0FFh
.xdata$x:00004F03                 db 0FFh
.xdata$x:00004F04                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ$0
.xdata$x:00004F08 __ehfuncinfo$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ db  22h ; "
.xdata$x:00004F08                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ+11o
.xdata$x:00004F09                 db    5
.xdata$x:00004F0A                 db  93h ; ô
.xdata$x:00004F0B                 db  19h
.xdata$x:00004F0C                 db    1
.xdata$x:00004F0D                 db    0
.xdata$x:00004F0E                 db    0
.xdata$x:00004F0F                 db    0
.xdata$x:00004F10                 dd offset __unwindtable$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
.xdata$x:00004F14                 db    0
.xdata$x:00004F15                 db    0
.xdata$x:00004F16                 db    0
.xdata$x:00004F17                 db    0
.xdata$x:00004F18                 db    0
.xdata$x:00004F19                 db    0
.xdata$x:00004F1A                 db    0
.xdata$x:00004F1B                 db    0
.xdata$x:00004F1C                 db    0
.xdata$x:00004F1D                 db    0
.xdata$x:00004F1E                 db    0
.xdata$x:00004F1F                 db    0
.xdata$x:00004F20                 db    0
.xdata$x:00004F21                 db    0
.xdata$x:00004F22                 db    0
.xdata$x:00004F23                 db    0
.xdata$x:00004F24                 db    0
.xdata$x:00004F25                 db    0
.xdata$x:00004F26                 db    0
.xdata$x:00004F27                 db    0
.xdata$x:00004F28                 db    1
.xdata$x:00004F29                 db    0
.xdata$x:00004F2A                 db    0
.xdata$x:00004F2B                 db    0
.xdata$x:00004F2B _xdata$x        ends
.xdata$x:00004F2B
.text:00004F2C ; ===========================================================================
.text:00004F2C
.text:00004F2C ; Segment type: Pure code
.text:00004F2C ; Segment permissions: Read/Execute
.text:00004F2C _text           segment para public 'CODE' use32
.text:00004F2C                 assume cs:_text
.text:00004F2C                 ;org 4F2Ch
.text:00004F2C ; COMDAT (pick any)
.text:00004F2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F2C
.text:00004F2C ; =============== S U B R O U T I N E =======================================
.text:00004F2C
.text:00004F2C ; Attributes: bp-based frame
.text:00004F2C
.text:00004F2C ; _DWORD __thiscall CProp::CProp(CProp *__hidden this)
.text:00004F2C                 public ??0CProp@@QAE@XZ
.text:00004F2C ??0CProp@@QAE@XZ proc near              ; CODE XREF: CObjectVector<CProp>::AddNew(void)+59p
.text:00004F2C
.text:00004F2C var_4           = dword ptr -4
.text:00004F2C
.text:00004F2C                 push    ebp
.text:00004F2D                 mov     ebp, esp
.text:00004F2F                 push    ecx
.text:00004F30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F37                 mov     [ebp+var_4], ecx
.text:00004F3A                 mov     eax, [ebp+var_4]
.text:00004F3D                 mov     byte ptr [eax+4], 0
.text:00004F41                 mov     ecx, [ebp+var_4]
.text:00004F44                 add     ecx, 8          ; this
.text:00004F47                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00004F4C                 mov     eax, [ebp+var_4]
.text:00004F4F                 add     esp, 4
.text:00004F52                 cmp     ebp, esp
.text:00004F54                 call    __RTC_CheckEsp
.text:00004F59                 mov     esp, ebp
.text:00004F5B                 pop     ebp
.text:00004F5C                 retn
.text:00004F5C ??0CProp@@QAE@XZ endp
.text:00004F5C
.text:00004F5C ; ---------------------------------------------------------------------------
.text:00004F5D                 align 10h
.text:00004F5D _text           ends
.text:00004F5D
.text:00004F60 ; ===========================================================================
.text:00004F60
.text:00004F60 ; Segment type: Pure code
.text:00004F60 ; Segment permissions: Read/Execute
.text:00004F60 _text           segment para public 'CODE' use32
.text:00004F60                 assume cs:_text
.text:00004F60                 ;org 4F60h
.text:00004F60 ; COMDAT (pick any)
.text:00004F60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F60
.text:00004F60 ; =============== S U B R O U T I N E =======================================
.text:00004F60
.text:00004F60 ; Attributes: bp-based frame
.text:00004F60
.text:00004F60 ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:00004F60                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00004F60 ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00004F60                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:00004F60
.text:00004F60 var_20          = dword ptr -20h
.text:00004F60 var_1C          = dword ptr -1Ch
.text:00004F60 var_18          = dword ptr -18h
.text:00004F60 var_14          = dword ptr -14h
.text:00004F60 var_10          = dword ptr -10h
.text:00004F60 var_C           = dword ptr -0Ch
.text:00004F60 var_4           = dword ptr -4
.text:00004F60
.text:00004F60                 push    ebp
.text:00004F61                 mov     ebp, esp
.text:00004F63                 push    0FFFFFFFFh
.text:00004F65                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00004F6A                 mov     eax, large fs:0
.text:00004F70                 push    eax
.text:00004F71                 sub     esp, 14h
.text:00004F74                 mov     eax, 0CCCCCCCCh
.text:00004F79                 mov     [ebp+var_20], eax
.text:00004F7C                 mov     [ebp+var_1C], eax
.text:00004F7F                 mov     [ebp+var_18], eax
.text:00004F82                 mov     [ebp+var_14], eax
.text:00004F85                 mov     [ebp+var_10], eax
.text:00004F88                 mov     eax, dword ptr ds:___security_cookie
.text:00004F8D                 xor     eax, ebp
.text:00004F8F                 push    eax
.text:00004F90                 lea     eax, [ebp+var_C]
.text:00004F93                 mov     large fs:0, eax
.text:00004F99                 mov     [ebp+var_10], ecx
.text:00004F9C                 mov     [ebp+var_4], 0
.text:00004FA3                 mov     ecx, [ebp+var_10]
.text:00004FA6                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00004FAB                 mov     [ebp+var_14], eax
.text:00004FAE
.text:00004FAE loc_4FAE:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_4FF0j
.text:00004FAE                 cmp     [ebp+var_14], 0
.text:00004FB2                 jz      short loc_4FF2
.text:00004FB4                 mov     eax, [ebp+var_14]
.text:00004FB7                 sub     eax, 1
.text:00004FBA                 mov     [ebp+var_14], eax
.text:00004FBD                 mov     ecx, [ebp+var_14]
.text:00004FC0                 push    ecx
.text:00004FC1                 mov     ecx, [ebp+var_10]
.text:00004FC4                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00004FC9                 mov     edx, [eax]
.text:00004FCB                 mov     [ebp+var_1C], edx
.text:00004FCE                 mov     eax, [ebp+var_1C]
.text:00004FD1                 mov     [ebp+var_18], eax
.text:00004FD4                 cmp     [ebp+var_18], 0
.text:00004FD8                 jz      short loc_4FE9
.text:00004FDA                 push    1
.text:00004FDC                 mov     ecx, [ebp+var_18]
.text:00004FDF                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:00004FE4                 mov     [ebp+var_20], eax
.text:00004FE7                 jmp     short loc_4FF0
.text:00004FE9 ; ---------------------------------------------------------------------------
.text:00004FE9
.text:00004FE9 loc_4FE9:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:00004FE9                 mov     [ebp+var_20], 0
.text:00004FF0
.text:00004FF0 loc_4FF0:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:00004FF0                 jmp     short loc_4FAE
.text:00004FF2 ; ---------------------------------------------------------------------------
.text:00004FF2
.text:00004FF2 loc_4FF2:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:00004FF2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004FF9                 mov     ecx, [ebp+var_10]
.text:00004FFC                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00005001                 mov     ecx, [ebp+var_C]
.text:00005004                 mov     large fs:0, ecx
.text:0000500B                 pop     ecx
.text:0000500C                 add     esp, 20h
.text:0000500F                 cmp     ebp, esp
.text:00005011                 call    __RTC_CheckEsp
.text:00005016                 mov     esp, ebp
.text:00005018                 pop     ebp
.text:00005019                 retn
.text:00005019 ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00005019
.text:00005019 ; ---------------------------------------------------------------------------
.text:0000501A                 align 4
.text:0000501A _text           ends
.text:0000501A
.text$x:0000501C ; ===========================================================================
.text$x:0000501C
.text$x:0000501C ; Segment type: Pure code
.text$x:0000501C ; Segment permissions: Read/Execute
.text$x:0000501C _text$x         segment para public 'CODE' use32
.text$x:0000501C                 assume cs:_text$x
.text$x:0000501C                 ;org 501Ch
.text$x:0000501C ; COMDAT (pick associative to section at 4F60)
.text$x:0000501C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000501C
.text$x:0000501C ; =============== S U B R O U T I N E =======================================
.text$x:0000501C
.text$x:0000501C
.text$x:0000501C __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:0000501C                                         ; DATA XREF: .xdata$x:00005044o
.text$x:0000501C                 mov     ecx, [ebp-10h]
.text$x:0000501F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000501F __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:0000501F
.text$x:00005024
.text$x:00005024 ; =============== S U B R O U T I N E =======================================
.text$x:00005024
.text$x:00005024
.text$x:00005024 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:00005024                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:00005024
.text$x:00005024 arg_4           = dword ptr  8
.text$x:00005024
.text$x:00005024                 mov     edx, [esp+arg_4]
.text$x:00005028                 lea     eax, [edx+0Ch]
.text$x:0000502B                 mov     ecx, [edx-18h]
.text$x:0000502E                 xor     ecx, eax
.text$x:00005030                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005035                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:0000503A                 jmp     ___CxxFrameHandler3
.text$x:0000503A __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:0000503A
.text$x:0000503A ; ---------------------------------------------------------------------------
.text$x:0000503F                 align 10h
.text$x:0000503F _text$x         ends
.text$x:0000503F
.xdata$x:00005040 ; ===========================================================================
.xdata$x:00005040
.xdata$x:00005040 ; Segment type: Pure data
.xdata$x:00005040 ; Segment permissions: Read
.xdata$x:00005040 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005040                 assume cs:_xdata$x
.xdata$x:00005040                 ;org 5040h
.xdata$x:00005040 ; COMDAT (pick associative to section at 4F60)
.xdata$x:00005040 __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:00005040                                         ; DATA XREF: .xdata$x:00005050o
.xdata$x:00005041                 db 0FFh
.xdata$x:00005042                 db 0FFh
.xdata$x:00005043                 db 0FFh
.xdata$x:00005044                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:00005048 __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:00005048                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:00005049                 db    5
.xdata$x:0000504A                 db  93h ; ô
.xdata$x:0000504B                 db  19h
.xdata$x:0000504C                 db    1
.xdata$x:0000504D                 db    0
.xdata$x:0000504E                 db    0
.xdata$x:0000504F                 db    0
.xdata$x:00005050                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:00005054                 db    0
.xdata$x:00005055                 db    0
.xdata$x:00005056                 db    0
.xdata$x:00005057                 db    0
.xdata$x:00005058                 db    0
.xdata$x:00005059                 db    0
.xdata$x:0000505A                 db    0
.xdata$x:0000505B                 db    0
.xdata$x:0000505C                 db    0
.xdata$x:0000505D                 db    0
.xdata$x:0000505E                 db    0
.xdata$x:0000505F                 db    0
.xdata$x:00005060                 db    0
.xdata$x:00005061                 db    0
.xdata$x:00005062                 db    0
.xdata$x:00005063                 db    0
.xdata$x:00005064                 db    0
.xdata$x:00005065                 db    0
.xdata$x:00005066                 db    0
.xdata$x:00005067                 db    0
.xdata$x:00005068                 db    1
.xdata$x:00005069                 db    0
.xdata$x:0000506A                 db    0
.xdata$x:0000506B                 db    0
.xdata$x:0000506B _xdata$x        ends
.xdata$x:0000506B
.text:0000506C ; ===========================================================================
.text:0000506C
.text:0000506C ; Segment type: Pure code
.text:0000506C ; Segment permissions: Read/Execute
.text:0000506C _text           segment para public 'CODE' use32
.text:0000506C                 assume cs:_text
.text:0000506C                 ;org 506Ch
.text:0000506C ; COMDAT (pick any)
.text:0000506C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000506C
.text:0000506C ; =============== S U B R O U T I N E =======================================
.text:0000506C
.text:0000506C ; Attributes: bp-based frame
.text:0000506C
.text:0000506C ; public: void __thiscall CObjectVector<struct CProp>::Clear(void)
.text:0000506C                 public ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ
.text:0000506C ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ proc near
.text:0000506C                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+52p
.text:0000506C
.text:0000506C var_14          = dword ptr -14h
.text:0000506C var_10          = dword ptr -10h
.text:0000506C var_C           = dword ptr -0Ch
.text:0000506C var_8           = dword ptr -8
.text:0000506C var_4           = dword ptr -4
.text:0000506C
.text:0000506C                 push    ebp
.text:0000506D                 mov     ebp, esp
.text:0000506F                 sub     esp, 14h
.text:00005072                 mov     eax, 0CCCCCCCCh
.text:00005077                 mov     [ebp+var_14], eax
.text:0000507A                 mov     [ebp+var_10], eax
.text:0000507D                 mov     [ebp+var_C], eax
.text:00005080                 mov     [ebp+var_8], eax
.text:00005083                 mov     [ebp+var_4], eax
.text:00005086                 mov     [ebp+var_4], ecx
.text:00005089                 mov     ecx, [ebp+var_4]
.text:0000508C                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005091                 mov     [ebp+var_8], eax
.text:00005094
.text:00005094 loc_5094:                               ; CODE XREF: CObjectVector<CProp>::Clear(void):loc_50D6j
.text:00005094                 cmp     [ebp+var_8], 0
.text:00005098                 jz      short loc_50D8
.text:0000509A                 mov     eax, [ebp+var_8]
.text:0000509D                 sub     eax, 1
.text:000050A0                 mov     [ebp+var_8], eax
.text:000050A3                 mov     ecx, [ebp+var_8]
.text:000050A6                 push    ecx
.text:000050A7                 mov     ecx, [ebp+var_4]
.text:000050AA                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000050AF                 mov     edx, [eax]
.text:000050B1                 mov     [ebp+var_10], edx
.text:000050B4                 mov     eax, [ebp+var_10]
.text:000050B7                 mov     [ebp+var_C], eax
.text:000050BA                 cmp     [ebp+var_C], 0
.text:000050BE                 jz      short loc_50CF
.text:000050C0                 push    1
.text:000050C2                 mov     ecx, [ebp+var_C]
.text:000050C5                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:000050CA                 mov     [ebp+var_14], eax
.text:000050CD                 jmp     short loc_50D6
.text:000050CF ; ---------------------------------------------------------------------------
.text:000050CF
.text:000050CF loc_50CF:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+52j
.text:000050CF                 mov     [ebp+var_14], 0
.text:000050D6
.text:000050D6 loc_50D6:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+61j
.text:000050D6                 jmp     short loc_5094
.text:000050D8 ; ---------------------------------------------------------------------------
.text:000050D8
.text:000050D8 loc_50D8:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+2Cj
.text:000050D8                 mov     ecx, [ebp+var_4]
.text:000050DB                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:000050E0                 add     esp, 14h
.text:000050E3                 cmp     ebp, esp
.text:000050E5                 call    __RTC_CheckEsp
.text:000050EA                 mov     esp, ebp
.text:000050EC                 pop     ebp
.text:000050ED                 retn
.text:000050ED ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ endp
.text:000050ED
.text:000050ED ; ---------------------------------------------------------------------------
.text:000050EE                 align 10h
.text:000050EE _text           ends
.text:000050EE
.text:000050F0 ; ===========================================================================
.text:000050F0
.text:000050F0 ; Segment type: Pure code
.text:000050F0 ; Segment permissions: Read/Execute
.text:000050F0 _text           segment para public 'CODE' use32
.text:000050F0                 assume cs:_text
.text:000050F0                 ;org 50F0h
.text:000050F0 ; COMDAT (pick any)
.text:000050F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050F0
.text:000050F0 ; =============== S U B R O U T I N E =======================================
.text:000050F0
.text:000050F0 ; Attributes: bp-based frame
.text:000050F0
.text:000050F0 ; public: unsigned int __thiscall CObjectVector<class COneMethodInfo>::Size(void)const
.text:000050F0                 public ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ
.text:000050F0 ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ proc near
.text:000050F0                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+7Cp
.text:000050F0                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+1BCp ...
.text:000050F0
.text:000050F0 var_4           = dword ptr -4
.text:000050F0
.text:000050F0                 push    ebp
.text:000050F1                 mov     ebp, esp
.text:000050F3                 push    ecx
.text:000050F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050FB                 mov     [ebp+var_4], ecx
.text:000050FE                 mov     ecx, [ebp+var_4]
.text:00005101                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005106                 add     esp, 4
.text:00005109                 cmp     ebp, esp
.text:0000510B                 call    __RTC_CheckEsp
.text:00005110                 mov     esp, ebp
.text:00005112                 pop     ebp
.text:00005113                 retn
.text:00005113 ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ endp
.text:00005113
.text:00005113 _text           ends
.text:00005113
.text:00005114 ; ===========================================================================
.text:00005114
.text:00005114 ; Segment type: Pure code
.text:00005114 ; Segment permissions: Read/Execute
.text:00005114 _text           segment para public 'CODE' use32
.text:00005114                 assume cs:_text
.text:00005114                 ;org 5114h
.text:00005114 ; COMDAT (pick any)
.text:00005114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005114
.text:00005114 ; =============== S U B R O U T I N E =======================================
.text:00005114
.text:00005114 ; Attributes: bp-based frame
.text:00005114
.text:00005114 ; public: bool __thiscall CObjectVector<class COneMethodInfo>::IsEmpty(void)const
.text:00005114                 public ?IsEmpty@?$CObjectVector@VCOneMethodInfo@@@@QBE_NXZ
.text:00005114 ?IsEmpty@?$CObjectVector@VCOneMethodInfo@@@@QBE_NXZ proc near
.text:00005114                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+BBp
.text:00005114
.text:00005114 var_4           = dword ptr -4
.text:00005114
.text:00005114                 push    ebp
.text:00005115                 mov     ebp, esp
.text:00005117                 push    ecx
.text:00005118                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000511F                 mov     [ebp+var_4], ecx
.text:00005122                 mov     ecx, [ebp+var_4]
.text:00005125                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:0000512A                 add     esp, 4
.text:0000512D                 cmp     ebp, esp
.text:0000512F                 call    __RTC_CheckEsp
.text:00005134                 mov     esp, ebp
.text:00005136                 pop     ebp
.text:00005137                 retn
.text:00005137 ?IsEmpty@?$CObjectVector@VCOneMethodInfo@@@@QBE_NXZ endp
.text:00005137
.text:00005137 _text           ends
.text:00005137
.text:00005138 ; ===========================================================================
.text:00005138
.text:00005138 ; Segment type: Pure code
.text:00005138 ; Segment permissions: Read/Execute
.text:00005138 _text           segment para public 'CODE' use32
.text:00005138                 assume cs:_text
.text:00005138                 ;org 5138h
.text:00005138 ; COMDAT (pick any)
.text:00005138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005138
.text:00005138 ; =============== S U B R O U T I N E =======================================
.text:00005138
.text:00005138 ; Attributes: bp-based frame
.text:00005138
.text:00005138 ; public: __thiscall CObjectVector<class COneMethodInfo>::CObjectVector<class COneMethodInfo>(class CObjectVector<class COneMethodInfo> const &)
.text:00005138                 public ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z
.text:00005138 ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z proc near
.text:00005138                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+5Bp
.text:00005138
.text:00005138 var_24          = dword ptr -24h
.text:00005138 var_20          = dword ptr -20h
.text:00005138 var_1C          = dword ptr -1Ch
.text:00005138 var_18          = dword ptr -18h
.text:00005138 var_14          = dword ptr -14h
.text:00005138 var_10          = dword ptr -10h
.text:00005138 var_C           = dword ptr -0Ch
.text:00005138 var_4           = dword ptr -4
.text:00005138 arg_0           = dword ptr  8
.text:00005138
.text:00005138                 push    ebp
.text:00005139                 mov     ebp, esp
.text:0000513B                 push    0FFFFFFFFh
.text:0000513D                 push    offset __ehhandler$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z
.text:00005142                 mov     eax, large fs:0
.text:00005148                 push    eax
.text:00005149                 sub     esp, 18h
.text:0000514C                 mov     eax, 0CCCCCCCCh
.text:00005151                 mov     [ebp+var_24], eax
.text:00005154                 mov     [ebp+var_20], eax
.text:00005157                 mov     [ebp+var_1C], eax
.text:0000515A                 mov     [ebp+var_18], eax
.text:0000515D                 mov     [ebp+var_14], eax
.text:00005160                 mov     [ebp+var_10], eax
.text:00005163                 mov     eax, dword ptr ds:___security_cookie
.text:00005168                 xor     eax, ebp
.text:0000516A                 push    eax
.text:0000516B                 lea     eax, [ebp+var_C]
.text:0000516E                 mov     large fs:0, eax
.text:00005174                 mov     [ebp+var_10], ecx
.text:00005177                 mov     ecx, [ebp+var_10]
.text:0000517A                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000517F                 mov     [ebp+var_4], 0
.text:00005186                 mov     ecx, [ebp+arg_0]
.text:00005189                 call    ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size(void)
.text:0000518E                 mov     [ebp+var_14], eax
.text:00005191                 mov     eax, [ebp+var_14]
.text:00005194                 push    eax
.text:00005195                 mov     ecx, [ebp+var_10]
.text:00005198                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:0000519D                 mov     [ebp+var_18], 0
.text:000051A4                 jmp     short loc_51AF
.text:000051A6 ; ---------------------------------------------------------------------------
.text:000051A6
.text:000051A6 loc_51A6:                               ; CODE XREF: CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(CObjectVector<COneMethodInfo> const &)+CDj
.text:000051A6                 mov     ecx, [ebp+var_18]
.text:000051A9                 add     ecx, 1
.text:000051AC                 mov     [ebp+var_18], ecx
.text:000051AF
.text:000051AF loc_51AF:                               ; CODE XREF: CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(CObjectVector<COneMethodInfo> const &)+6Cj
.text:000051AF                 mov     edx, [ebp+var_18]
.text:000051B2                 cmp     edx, [ebp+var_14]
.text:000051B5                 jnb     short loc_5207
.text:000051B7                 push    24h ; '$'       ; unsigned int
.text:000051B9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000051BE                 add     esp, 4
.text:000051C1                 mov     [ebp+var_20], eax
.text:000051C4                 mov     byte ptr [ebp+var_4], 1
.text:000051C8                 cmp     [ebp+var_20], 0
.text:000051CC                 jz      short loc_51E8
.text:000051CE                 mov     eax, [ebp+var_18]
.text:000051D1                 push    eax
.text:000051D2                 mov     ecx, [ebp+arg_0]
.text:000051D5                 call    ??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[](uint)
.text:000051DA                 push    eax
.text:000051DB                 mov     ecx, [ebp+var_20]
.text:000051DE                 call    ??0COneMethodInfo@@QAE@ABV0@@Z ; COneMethodInfo::COneMethodInfo(COneMethodInfo const &)
.text:000051E3                 mov     [ebp+var_24], eax
.text:000051E6                 jmp     short loc_51EF
.text:000051E8 ; ---------------------------------------------------------------------------
.text:000051E8
.text:000051E8 loc_51E8:                               ; CODE XREF: CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(CObjectVector<COneMethodInfo> const &)+94j
.text:000051E8                 mov     [ebp+var_24], 0
.text:000051EF
.text:000051EF loc_51EF:                               ; CODE XREF: CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(CObjectVector<COneMethodInfo> const &)+AEj
.text:000051EF                 mov     ecx, [ebp+var_24]
.text:000051F2                 mov     [ebp+var_1C], ecx
.text:000051F5                 mov     byte ptr [ebp+var_4], 0
.text:000051F9                 mov     edx, [ebp+var_1C]
.text:000051FC                 push    edx
.text:000051FD                 mov     ecx, [ebp+var_10]
.text:00005200                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00005205                 jmp     short loc_51A6
.text:00005207 ; ---------------------------------------------------------------------------
.text:00005207
.text:00005207 loc_5207:                               ; CODE XREF: CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(CObjectVector<COneMethodInfo> const &)+7Dj
.text:00005207                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000520E                 mov     eax, [ebp+var_10]
.text:00005211                 mov     ecx, [ebp+var_C]
.text:00005214                 mov     large fs:0, ecx
.text:0000521B                 pop     ecx
.text:0000521C                 add     esp, 24h
.text:0000521F                 cmp     ebp, esp
.text:00005221                 call    __RTC_CheckEsp
.text:00005226                 mov     esp, ebp
.text:00005228                 pop     ebp
.text:00005229                 retn    4
.text:00005229 ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z endp
.text:00005229
.text:00005229 _text           ends
.text:00005229
.text$x:0000522C ; ===========================================================================
.text$x:0000522C
.text$x:0000522C ; Segment type: Pure code
.text$x:0000522C ; Segment permissions: Read/Execute
.text$x:0000522C _text$x         segment para public 'CODE' use32
.text$x:0000522C                 assume cs:_text$x
.text$x:0000522C                 ;org 522Ch
.text$x:0000522C ; COMDAT (pick associative to section at 5138)
.text$x:0000522C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000522C
.text$x:0000522C ; =============== S U B R O U T I N E =======================================
.text$x:0000522C
.text$x:0000522C
.text$x:0000522C __unwindfunclet$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z$0 proc near
.text$x:0000522C                                         ; DATA XREF: .xdata$x:00005260o
.text$x:0000522C                 mov     ecx, [ebp-10h]
.text$x:0000522F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000522F __unwindfunclet$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z$0 endp
.text$x:0000522F
.text$x:00005234
.text$x:00005234 ; =============== S U B R O U T I N E =======================================
.text$x:00005234
.text$x:00005234
.text$x:00005234 __unwindfunclet$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z$1 proc near
.text$x:00005234                                         ; DATA XREF: .xdata$x:00005268o
.text$x:00005234                 mov     eax, [ebp-20h]
.text$x:00005237                 push    eax             ; void *
.text$x:00005238                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000523D                 pop     ecx
.text$x:0000523E                 retn
.text$x:0000523E __unwindfunclet$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z$1 endp
.text$x:0000523E
.text$x:0000523F
.text$x:0000523F ; =============== S U B R O U T I N E =======================================
.text$x:0000523F
.text$x:0000523F
.text$x:0000523F __ehhandler$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z proc near
.text$x:0000523F                                         ; DATA XREF: CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(CObjectVector<COneMethodInfo> const &)+5o
.text$x:0000523F
.text$x:0000523F arg_4           = dword ptr  8
.text$x:0000523F
.text$x:0000523F                 mov     edx, [esp+arg_4]
.text$x:00005243                 lea     eax, [edx+0Ch]
.text$x:00005246                 mov     ecx, [edx-1Ch]
.text$x:00005249                 xor     ecx, eax
.text$x:0000524B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005250                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z
.text$x:00005255                 jmp     ___CxxFrameHandler3
.text$x:00005255 __ehhandler$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z endp
.text$x:00005255
.text$x:00005255 ; ---------------------------------------------------------------------------
.text$x:0000525A                 align 4
.text$x:0000525A _text$x         ends
.text$x:0000525A
.xdata$x:0000525C ; ===========================================================================
.xdata$x:0000525C
.xdata$x:0000525C ; Segment type: Pure data
.xdata$x:0000525C ; Segment permissions: Read
.xdata$x:0000525C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000525C                 assume cs:_xdata$x
.xdata$x:0000525C                 ;org 525Ch
.xdata$x:0000525C ; COMDAT (pick associative to section at 5138)
.xdata$x:0000525C __unwindtable$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:0000525C                                         ; DATA XREF: .xdata$x:00005274o
.xdata$x:0000525D                 db 0FFh
.xdata$x:0000525E                 db 0FFh
.xdata$x:0000525F                 db 0FFh
.xdata$x:00005260                 dd offset __unwindfunclet$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z$0
.xdata$x:00005264                 align 8
.xdata$x:00005268                 dd offset __unwindfunclet$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z$1
.xdata$x:0000526C __ehfuncinfo$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:0000526C                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z+11o
.xdata$x:0000526D                 db    5
.xdata$x:0000526E                 db  93h ; ô
.xdata$x:0000526F                 db  19h
.xdata$x:00005270                 db    2
.xdata$x:00005271                 db    0
.xdata$x:00005272                 db    0
.xdata$x:00005273                 db    0
.xdata$x:00005274                 dd offset __unwindtable$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z
.xdata$x:00005278                 db    0
.xdata$x:00005279                 db    0
.xdata$x:0000527A                 db    0
.xdata$x:0000527B                 db    0
.xdata$x:0000527C                 db    0
.xdata$x:0000527D                 db    0
.xdata$x:0000527E                 db    0
.xdata$x:0000527F                 db    0
.xdata$x:00005280                 db    0
.xdata$x:00005281                 db    0
.xdata$x:00005282                 db    0
.xdata$x:00005283                 db    0
.xdata$x:00005284                 db    0
.xdata$x:00005285                 db    0
.xdata$x:00005286                 db    0
.xdata$x:00005287                 db    0
.xdata$x:00005288                 db    0
.xdata$x:00005289                 db    0
.xdata$x:0000528A                 db    0
.xdata$x:0000528B                 db    0
.xdata$x:0000528C                 db    1
.xdata$x:0000528D                 db    0
.xdata$x:0000528E                 db    0
.xdata$x:0000528F                 db    0
.xdata$x:0000528F _xdata$x        ends
.xdata$x:0000528F
.text:00005290 ; ===========================================================================
.text:00005290
.text:00005290 ; Segment type: Pure code
.text:00005290 ; Segment permissions: Read/Execute
.text:00005290 _text           segment para public 'CODE' use32
.text:00005290                 assume cs:_text
.text:00005290                 ;org 5290h
.text:00005290 ; COMDAT (pick any)
.text:00005290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005290
.text:00005290 ; =============== S U B R O U T I N E =======================================
.text:00005290
.text:00005290 ; Attributes: bp-based frame
.text:00005290
.text:00005290 ; public: class COneMethodInfo const & __thiscall CObjectVector<class COneMethodInfo>::operator[](unsigned int)const
.text:00005290                 public ??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z
.text:00005290 ??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z proc near
.text:00005290                                         ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+43p
.text:00005290                                         ; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(CObjectVector<COneMethodInfo> const &)+9Dp
.text:00005290
.text:00005290 var_4           = dword ptr -4
.text:00005290 arg_0           = dword ptr  8
.text:00005290
.text:00005290                 push    ebp
.text:00005291                 mov     ebp, esp
.text:00005293                 push    ecx
.text:00005294                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000529B                 mov     [ebp+var_4], ecx
.text:0000529E                 mov     eax, [ebp+arg_0]
.text:000052A1                 push    eax
.text:000052A2                 mov     ecx, [ebp+var_4]
.text:000052A5                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000052AA                 mov     eax, [eax]
.text:000052AC                 add     esp, 4
.text:000052AF                 cmp     ebp, esp
.text:000052B1                 call    __RTC_CheckEsp
.text:000052B6                 mov     esp, ebp
.text:000052B8                 pop     ebp
.text:000052B9                 retn    4
.text:000052B9 ??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z endp
.text:000052B9
.text:000052B9 _text           ends
.text:000052B9
.text:000052BC ; ===========================================================================
.text:000052BC
.text:000052BC ; Segment type: Pure code
.text:000052BC ; Segment permissions: Read/Execute
.text:000052BC _text           segment para public 'CODE' use32
.text:000052BC                 assume cs:_text
.text:000052BC                 ;org 52BCh
.text:000052BC ; COMDAT (pick any)
.text:000052BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052BC
.text:000052BC ; =============== S U B R O U T I N E =======================================
.text:000052BC
.text:000052BC ; Attributes: bp-based frame
.text:000052BC
.text:000052BC ; public: class COneMethodInfo & __thiscall CObjectVector<class COneMethodInfo>::operator[](unsigned int)
.text:000052BC                 public ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z
.text:000052BC ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z proc near
.text:000052BC                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+8Dp
.text:000052BC                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+1D1p
.text:000052BC
.text:000052BC var_4           = dword ptr -4
.text:000052BC arg_0           = dword ptr  8
.text:000052BC
.text:000052BC                 push    ebp
.text:000052BD                 mov     ebp, esp
.text:000052BF                 push    ecx
.text:000052C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052C7                 mov     [ebp+var_4], ecx
.text:000052CA                 mov     eax, [ebp+arg_0]
.text:000052CD                 push    eax
.text:000052CE                 mov     ecx, [ebp+var_4]
.text:000052D1                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000052D6                 mov     eax, [eax]
.text:000052D8                 add     esp, 4
.text:000052DB                 cmp     ebp, esp
.text:000052DD                 call    __RTC_CheckEsp
.text:000052E2                 mov     esp, ebp
.text:000052E4                 pop     ebp
.text:000052E5                 retn    4
.text:000052E5 ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z endp
.text:000052E5
.text:000052E5 _text           ends
.text:000052E5
.text:000052E8 ; ===========================================================================
.text:000052E8
.text:000052E8 ; Segment type: Pure code
.text:000052E8 ; Segment permissions: Read/Execute
.text:000052E8 _text           segment para public 'CODE' use32
.text:000052E8                 assume cs:_text
.text:000052E8                 ;org 52E8h
.text:000052E8 ; COMDAT (pick any)
.text:000052E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052E8
.text:000052E8 ; =============== S U B R O U T I N E =======================================
.text:000052E8
.text:000052E8 ; Attributes: bp-based frame
.text:000052E8
.text:000052E8 ; public: class COneMethodInfo & __thiscall CObjectVector<class COneMethodInfo>::AddNew(void)
.text:000052E8                 public ?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ
.text:000052E8 ?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ proc near
.text:000052E8                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+CAp
.text:000052E8
.text:000052E8 var_20          = dword ptr -20h
.text:000052E8 var_1C          = dword ptr -1Ch
.text:000052E8 var_18          = dword ptr -18h
.text:000052E8 var_14          = dword ptr -14h
.text:000052E8 var_10          = dword ptr -10h
.text:000052E8 var_C           = dword ptr -0Ch
.text:000052E8 var_4           = dword ptr -4
.text:000052E8
.text:000052E8                 push    ebp
.text:000052E9                 mov     ebp, esp
.text:000052EB                 push    0FFFFFFFFh
.text:000052ED                 push    offset __ehhandler$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ
.text:000052F2                 mov     eax, large fs:0
.text:000052F8                 push    eax
.text:000052F9                 sub     esp, 14h
.text:000052FC                 mov     eax, 0CCCCCCCCh
.text:00005301                 mov     [ebp+var_20], eax
.text:00005304                 mov     [ebp+var_1C], eax
.text:00005307                 mov     [ebp+var_18], eax
.text:0000530A                 mov     [ebp+var_14], eax
.text:0000530D                 mov     [ebp+var_10], eax
.text:00005310                 mov     eax, dword ptr ds:___security_cookie
.text:00005315                 xor     eax, ebp
.text:00005317                 push    eax
.text:00005318                 lea     eax, [ebp+var_C]
.text:0000531B                 mov     large fs:0, eax
.text:00005321                 mov     [ebp+var_10], ecx
.text:00005324                 push    24h ; '$'       ; unsigned int
.text:00005326                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000532B                 add     esp, 4
.text:0000532E                 mov     [ebp+var_1C], eax
.text:00005331                 mov     [ebp+var_4], 0
.text:00005338                 cmp     [ebp+var_1C], 0
.text:0000533C                 jz      short loc_534B
.text:0000533E                 mov     ecx, [ebp+var_1C]
.text:00005341                 call    ??0COneMethodInfo@@QAE@XZ ; COneMethodInfo::COneMethodInfo(void)
.text:00005346                 mov     [ebp+var_20], eax
.text:00005349                 jmp     short loc_5352
.text:0000534B ; ---------------------------------------------------------------------------
.text:0000534B
.text:0000534B loc_534B:                               ; CODE XREF: CObjectVector<COneMethodInfo>::AddNew(void)+54j
.text:0000534B                 mov     [ebp+var_20], 0
.text:00005352
.text:00005352 loc_5352:                               ; CODE XREF: CObjectVector<COneMethodInfo>::AddNew(void)+61j
.text:00005352                 mov     eax, [ebp+var_20]
.text:00005355                 mov     [ebp+var_18], eax
.text:00005358                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000535F                 mov     ecx, [ebp+var_18]
.text:00005362                 mov     [ebp+var_14], ecx
.text:00005365                 mov     edx, [ebp+var_14]
.text:00005368                 push    edx
.text:00005369                 mov     ecx, [ebp+var_10]
.text:0000536C                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00005371                 mov     eax, [ebp+var_14]
.text:00005374                 mov     ecx, [ebp+var_C]
.text:00005377                 mov     large fs:0, ecx
.text:0000537E                 pop     ecx
.text:0000537F                 add     esp, 20h
.text:00005382                 cmp     ebp, esp
.text:00005384                 call    __RTC_CheckEsp
.text:00005389                 mov     esp, ebp
.text:0000538B                 pop     ebp
.text:0000538C                 retn
.text:0000538C ?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ endp
.text:0000538C
.text:0000538C ; ---------------------------------------------------------------------------
.text:0000538D                 align 10h
.text:0000538D _text           ends
.text:0000538D
.text$x:00005390 ; ===========================================================================
.text$x:00005390
.text$x:00005390 ; Segment type: Pure code
.text$x:00005390 ; Segment permissions: Read/Execute
.text$x:00005390 _text$x         segment para public 'CODE' use32
.text$x:00005390                 assume cs:_text$x
.text$x:00005390                 ;org 5390h
.text$x:00005390 ; COMDAT (pick associative to section at 52E8)
.text$x:00005390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005390
.text$x:00005390 ; =============== S U B R O U T I N E =======================================
.text$x:00005390
.text$x:00005390
.text$x:00005390 __unwindfunclet$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ$0 proc near
.text$x:00005390                                         ; DATA XREF: .xdata$x:000053BCo
.text$x:00005390                 mov     eax, [ebp-1Ch]
.text$x:00005393                 push    eax             ; void *
.text$x:00005394                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00005399                 pop     ecx
.text$x:0000539A                 retn
.text$x:0000539A __unwindfunclet$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ$0 endp
.text$x:0000539A
.text$x:0000539B
.text$x:0000539B ; =============== S U B R O U T I N E =======================================
.text$x:0000539B
.text$x:0000539B
.text$x:0000539B __ehhandler$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ proc near
.text$x:0000539B                                         ; DATA XREF: CObjectVector<COneMethodInfo>::AddNew(void)+5o
.text$x:0000539B
.text$x:0000539B arg_4           = dword ptr  8
.text$x:0000539B
.text$x:0000539B                 mov     edx, [esp+arg_4]
.text$x:0000539F                 lea     eax, [edx+0Ch]
.text$x:000053A2                 mov     ecx, [edx-18h]
.text$x:000053A5                 xor     ecx, eax
.text$x:000053A7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000053AC                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ
.text$x:000053B1                 jmp     ___CxxFrameHandler3
.text$x:000053B1 __ehhandler$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ endp
.text$x:000053B1
.text$x:000053B1 ; ---------------------------------------------------------------------------
.text$x:000053B6                 align 4
.text$x:000053B6 _text$x         ends
.text$x:000053B6
.xdata$x:000053B8 ; ===========================================================================
.xdata$x:000053B8
.xdata$x:000053B8 ; Segment type: Pure data
.xdata$x:000053B8 ; Segment permissions: Read
.xdata$x:000053B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000053B8                 assume cs:_xdata$x
.xdata$x:000053B8                 ;org 53B8h
.xdata$x:000053B8 ; COMDAT (pick associative to section at 52E8)
.xdata$x:000053B8 __unwindtable$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ db 0FFh
.xdata$x:000053B8                                         ; DATA XREF: .xdata$x:000053C8o
.xdata$x:000053B9                 db 0FFh
.xdata$x:000053BA                 db 0FFh
.xdata$x:000053BB                 db 0FFh
.xdata$x:000053BC                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ$0
.xdata$x:000053C0 __ehfuncinfo$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ db  22h ; "
.xdata$x:000053C0                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ+11o
.xdata$x:000053C1                 db    5
.xdata$x:000053C2                 db  93h ; ô
.xdata$x:000053C3                 db  19h
.xdata$x:000053C4                 db    1
.xdata$x:000053C5                 db    0
.xdata$x:000053C6                 db    0
.xdata$x:000053C7                 db    0
.xdata$x:000053C8                 dd offset __unwindtable$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ
.xdata$x:000053CC                 align 20h
.xdata$x:000053E0                 db    1
.xdata$x:000053E1                 db    0
.xdata$x:000053E2                 db    0
.xdata$x:000053E3                 db    0
.xdata$x:000053E3 _xdata$x        ends
.xdata$x:000053E3
.text:000053E4 ; ===========================================================================
.text:000053E4
.text:000053E4 ; Segment type: Pure code
.text:000053E4 ; Segment permissions: Read/Execute
.text:000053E4 _text           segment para public 'CODE' use32
.text:000053E4                 assume cs:_text
.text:000053E4                 ;org 53E4h
.text:000053E4 ; COMDAT (pick any)
.text:000053E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000053E4
.text:000053E4 ; =============== S U B R O U T I N E =======================================
.text:000053E4
.text:000053E4 ; Attributes: bp-based frame
.text:000053E4
.text:000053E4 ; public: void __thiscall CObjectVector<class COneMethodInfo>::Insert(unsigned int, class COneMethodInfo const &)
.text:000053E4                 public ?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
.text:000053E4 ?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z proc near
.text:000053E4                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+17Bp
.text:000053E4
.text:000053E4 var_1C          = dword ptr -1Ch
.text:000053E4 var_18          = dword ptr -18h
.text:000053E4 var_14          = dword ptr -14h
.text:000053E4 var_10          = dword ptr -10h
.text:000053E4 var_C           = dword ptr -0Ch
.text:000053E4 var_4           = dword ptr -4
.text:000053E4 arg_0           = dword ptr  8
.text:000053E4 arg_4           = dword ptr  0Ch
.text:000053E4
.text:000053E4                 push    ebp
.text:000053E5                 mov     ebp, esp
.text:000053E7                 push    0FFFFFFFFh
.text:000053E9                 push    offset __ehhandler$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
.text:000053EE                 mov     eax, large fs:0
.text:000053F4                 push    eax
.text:000053F5                 sub     esp, 10h
.text:000053F8                 mov     eax, 0CCCCCCCCh
.text:000053FD                 mov     [ebp+var_1C], eax
.text:00005400                 mov     [ebp+var_18], eax
.text:00005403                 mov     [ebp+var_14], eax
.text:00005406                 mov     [ebp+var_10], eax
.text:00005409                 mov     eax, dword ptr ds:___security_cookie
.text:0000540E                 xor     eax, ebp
.text:00005410                 push    eax
.text:00005411                 lea     eax, [ebp+var_C]
.text:00005414                 mov     large fs:0, eax
.text:0000541A                 mov     [ebp+var_10], ecx
.text:0000541D                 push    24h ; '$'       ; unsigned int
.text:0000541F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005424                 add     esp, 4
.text:00005427                 mov     [ebp+var_18], eax
.text:0000542A                 mov     [ebp+var_4], 0
.text:00005431                 cmp     [ebp+var_18], 0
.text:00005435                 jz      short loc_5448
.text:00005437                 mov     eax, [ebp+arg_4]
.text:0000543A                 push    eax
.text:0000543B                 mov     ecx, [ebp+var_18]
.text:0000543E                 call    ??0COneMethodInfo@@QAE@ABV0@@Z ; COneMethodInfo::COneMethodInfo(COneMethodInfo const &)
.text:00005443                 mov     [ebp+var_1C], eax
.text:00005446                 jmp     short loc_544F
.text:00005448 ; ---------------------------------------------------------------------------
.text:00005448
.text:00005448 loc_5448:                               ; CODE XREF: CObjectVector<COneMethodInfo>::Insert(uint,COneMethodInfo const &)+51j
.text:00005448                 mov     [ebp+var_1C], 0
.text:0000544F
.text:0000544F loc_544F:                               ; CODE XREF: CObjectVector<COneMethodInfo>::Insert(uint,COneMethodInfo const &)+62j
.text:0000544F                 mov     ecx, [ebp+var_1C]
.text:00005452                 mov     [ebp+var_14], ecx
.text:00005455                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000545C                 mov     edx, [ebp+var_14]
.text:0000545F                 push    edx
.text:00005460                 mov     eax, [ebp+arg_0]
.text:00005463                 push    eax
.text:00005464                 mov     ecx, [ebp+var_10]
.text:00005467                 call    ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ; CRecordVector<void *>::Insert(uint,void * const)
.text:0000546C                 mov     ecx, [ebp+var_C]
.text:0000546F                 mov     large fs:0, ecx
.text:00005476                 pop     ecx
.text:00005477                 add     esp, 1Ch
.text:0000547A                 cmp     ebp, esp
.text:0000547C                 call    __RTC_CheckEsp
.text:00005481                 mov     esp, ebp
.text:00005483                 pop     ebp
.text:00005484                 retn    8
.text:00005484 ?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z endp
.text:00005484
.text:00005484 ; ---------------------------------------------------------------------------
.text:00005487                 align 4
.text:00005487 _text           ends
.text:00005487
.text$x:00005488 ; ===========================================================================
.text$x:00005488
.text$x:00005488 ; Segment type: Pure code
.text$x:00005488 ; Segment permissions: Read/Execute
.text$x:00005488 _text$x         segment para public 'CODE' use32
.text$x:00005488                 assume cs:_text$x
.text$x:00005488                 ;org 5488h
.text$x:00005488 ; COMDAT (pick associative to section at 53E4)
.text$x:00005488                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005488
.text$x:00005488 ; =============== S U B R O U T I N E =======================================
.text$x:00005488
.text$x:00005488
.text$x:00005488 __unwindfunclet$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z$0 proc near
.text$x:00005488                                         ; DATA XREF: .xdata$x:000054B4o
.text$x:00005488                 mov     eax, [ebp-18h]
.text$x:0000548B                 push    eax             ; void *
.text$x:0000548C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00005491                 pop     ecx
.text$x:00005492                 retn
.text$x:00005492 __unwindfunclet$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z$0 endp
.text$x:00005492
.text$x:00005493
.text$x:00005493 ; =============== S U B R O U T I N E =======================================
.text$x:00005493
.text$x:00005493
.text$x:00005493 __ehhandler$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z proc near
.text$x:00005493                                         ; DATA XREF: CObjectVector<COneMethodInfo>::Insert(uint,COneMethodInfo const &)+5o
.text$x:00005493
.text$x:00005493 arg_4           = dword ptr  8
.text$x:00005493
.text$x:00005493                 mov     edx, [esp+arg_4]
.text$x:00005497                 lea     eax, [edx+0Ch]
.text$x:0000549A                 mov     ecx, [edx-14h]
.text$x:0000549D                 xor     ecx, eax
.text$x:0000549F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000054A4                 mov     eax, offset __ehfuncinfo$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
.text$x:000054A9                 jmp     ___CxxFrameHandler3
.text$x:000054A9 __ehhandler$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z endp
.text$x:000054A9
.text$x:000054A9 ; ---------------------------------------------------------------------------
.text$x:000054AE                 align 10h
.text$x:000054AE _text$x         ends
.text$x:000054AE
.xdata$x:000054B0 ; ===========================================================================
.xdata$x:000054B0
.xdata$x:000054B0 ; Segment type: Pure data
.xdata$x:000054B0 ; Segment permissions: Read
.xdata$x:000054B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000054B0                 assume cs:_xdata$x
.xdata$x:000054B0                 ;org 54B0h
.xdata$x:000054B0 ; COMDAT (pick associative to section at 53E4)
.xdata$x:000054B0 __unwindtable$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z db 0FFh
.xdata$x:000054B0                                         ; DATA XREF: .xdata$x:000054C0o
.xdata$x:000054B1                 db 0FFh
.xdata$x:000054B2                 db 0FFh
.xdata$x:000054B3                 db 0FFh
.xdata$x:000054B4                 dd offset __unwindfunclet$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z$0
.xdata$x:000054B8 __ehfuncinfo$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z db  22h ; "
.xdata$x:000054B8                                         ; DATA XREF: __ehhandler$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z+11o
.xdata$x:000054B9                 db    5
.xdata$x:000054BA                 db  93h ; ô
.xdata$x:000054BB                 db  19h
.xdata$x:000054BC                 db    1
.xdata$x:000054BD                 db    0
.xdata$x:000054BE                 db    0
.xdata$x:000054BF                 db    0
.xdata$x:000054C0                 dd offset __unwindtable$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
.xdata$x:000054C4                 db    0
.xdata$x:000054C5                 db    0
.xdata$x:000054C6                 db    0
.xdata$x:000054C7                 db    0
.xdata$x:000054C8                 db    0
.xdata$x:000054C9                 db    0
.xdata$x:000054CA                 db    0
.xdata$x:000054CB                 db    0
.xdata$x:000054CC                 db    0
.xdata$x:000054CD                 db    0
.xdata$x:000054CE                 db    0
.xdata$x:000054CF                 db    0
.xdata$x:000054D0                 db    0
.xdata$x:000054D1                 db    0
.xdata$x:000054D2                 db    0
.xdata$x:000054D3                 db    0
.xdata$x:000054D4                 db    0
.xdata$x:000054D5                 db    0
.xdata$x:000054D6                 db    0
.xdata$x:000054D7                 db    0
.xdata$x:000054D8                 db    1
.xdata$x:000054D9                 db    0
.xdata$x:000054DA                 db    0
.xdata$x:000054DB                 db    0
.xdata$x:000054DB _xdata$x        ends
.xdata$x:000054DB
.text:000054DC ; ===========================================================================
.text:000054DC
.text:000054DC ; Segment type: Pure code
.text:000054DC ; Segment permissions: Read/Execute
.text:000054DC _text           segment para public 'CODE' use32
.text:000054DC                 assume cs:_text
.text:000054DC                 ;org 54DCh
.text:000054DC ; COMDAT (pick any)
.text:000054DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054DC
.text:000054DC ; =============== S U B R O U T I N E =======================================
.text:000054DC
.text:000054DC ; Attributes: bp-based frame
.text:000054DC
.text:000054DC ; public: __thiscall CObjectVector<class COneMethodInfo>::~CObjectVector<class COneMethodInfo>(void)
.text:000054DC                 public ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.text:000054DC ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ proc near
.text:000054DC                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+220p
.text:000054DC                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+3C0p ...
.text:000054DC
.text:000054DC var_20          = dword ptr -20h
.text:000054DC var_1C          = dword ptr -1Ch
.text:000054DC var_18          = dword ptr -18h
.text:000054DC var_14          = dword ptr -14h
.text:000054DC var_10          = dword ptr -10h
.text:000054DC var_C           = dword ptr -0Ch
.text:000054DC var_4           = dword ptr -4
.text:000054DC
.text:000054DC                 push    ebp
.text:000054DD                 mov     ebp, esp
.text:000054DF                 push    0FFFFFFFFh
.text:000054E1                 push    offset __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.text:000054E6                 mov     eax, large fs:0
.text:000054EC                 push    eax
.text:000054ED                 sub     esp, 14h
.text:000054F0                 mov     eax, 0CCCCCCCCh
.text:000054F5                 mov     [ebp+var_20], eax
.text:000054F8                 mov     [ebp+var_1C], eax
.text:000054FB                 mov     [ebp+var_18], eax
.text:000054FE                 mov     [ebp+var_14], eax
.text:00005501                 mov     [ebp+var_10], eax
.text:00005504                 mov     eax, dword ptr ds:___security_cookie
.text:00005509                 xor     eax, ebp
.text:0000550B                 push    eax
.text:0000550C                 lea     eax, [ebp+var_C]
.text:0000550F                 mov     large fs:0, eax
.text:00005515                 mov     [ebp+var_10], ecx
.text:00005518                 mov     [ebp+var_4], 0
.text:0000551F                 mov     ecx, [ebp+var_10]
.text:00005522                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005527                 mov     [ebp+var_14], eax
.text:0000552A
.text:0000552A loc_552A:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void):loc_556Cj
.text:0000552A                 cmp     [ebp+var_14], 0
.text:0000552E                 jz      short loc_556E
.text:00005530                 mov     eax, [ebp+var_14]
.text:00005533                 sub     eax, 1
.text:00005536                 mov     [ebp+var_14], eax
.text:00005539                 mov     ecx, [ebp+var_14]
.text:0000553C                 push    ecx
.text:0000553D                 mov     ecx, [ebp+var_10]
.text:00005540                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005545                 mov     edx, [eax]
.text:00005547                 mov     [ebp+var_1C], edx
.text:0000554A                 mov     eax, [ebp+var_1C]
.text:0000554D                 mov     [ebp+var_18], eax
.text:00005550                 cmp     [ebp+var_18], 0
.text:00005554                 jz      short loc_5565
.text:00005556                 push    1
.text:00005558                 mov     ecx, [ebp+var_18]
.text:0000555B                 call    ??_GCOneMethodInfo@@QAEPAXI@Z ; COneMethodInfo::`scalar deleting destructor'(uint)
.text:00005560                 mov     [ebp+var_20], eax
.text:00005563                 jmp     short loc_556C
.text:00005565 ; ---------------------------------------------------------------------------
.text:00005565
.text:00005565 loc_5565:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+78j
.text:00005565                 mov     [ebp+var_20], 0
.text:0000556C
.text:0000556C loc_556C:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+87j
.text:0000556C                 jmp     short loc_552A
.text:0000556E ; ---------------------------------------------------------------------------
.text:0000556E
.text:0000556E loc_556E:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+52j
.text:0000556E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005575                 mov     ecx, [ebp+var_10]
.text:00005578                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000557D                 mov     ecx, [ebp+var_C]
.text:00005580                 mov     large fs:0, ecx
.text:00005587                 pop     ecx
.text:00005588                 add     esp, 20h
.text:0000558B                 cmp     ebp, esp
.text:0000558D                 call    __RTC_CheckEsp
.text:00005592                 mov     esp, ebp
.text:00005594                 pop     ebp
.text:00005595                 retn
.text:00005595 ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ endp
.text:00005595
.text:00005595 ; ---------------------------------------------------------------------------
.text:00005596                 align 4
.text:00005596 _text           ends
.text:00005596
.text$x:00005598 ; ===========================================================================
.text$x:00005598
.text$x:00005598 ; Segment type: Pure code
.text$x:00005598 ; Segment permissions: Read/Execute
.text$x:00005598 _text$x         segment para public 'CODE' use32
.text$x:00005598                 assume cs:_text$x
.text$x:00005598                 ;org 5598h
.text$x:00005598 ; COMDAT (pick associative to section at 54DC)
.text$x:00005598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005598
.text$x:00005598 ; =============== S U B R O U T I N E =======================================
.text$x:00005598
.text$x:00005598
.text$x:00005598 __unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0 proc near
.text$x:00005598                                         ; DATA XREF: .xdata$x:000055C0o
.text$x:00005598                 mov     ecx, [ebp-10h]
.text$x:0000559B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000559B __unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0 endp
.text$x:0000559B
.text$x:000055A0
.text$x:000055A0 ; =============== S U B R O U T I N E =======================================
.text$x:000055A0
.text$x:000055A0
.text$x:000055A0 __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ proc near
.text$x:000055A0                                         ; DATA XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+5o
.text$x:000055A0
.text$x:000055A0 arg_4           = dword ptr  8
.text$x:000055A0
.text$x:000055A0                 mov     edx, [esp+arg_4]
.text$x:000055A4                 lea     eax, [edx+0Ch]
.text$x:000055A7                 mov     ecx, [edx-18h]
.text$x:000055AA                 xor     ecx, eax
.text$x:000055AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000055B1                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.text$x:000055B6                 jmp     ___CxxFrameHandler3
.text$x:000055B6 __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ endp
.text$x:000055B6
.text$x:000055B6 ; ---------------------------------------------------------------------------
.text$x:000055BB                 align 4
.text$x:000055BB _text$x         ends
.text$x:000055BB
.xdata$x:000055BC ; ===========================================================================
.xdata$x:000055BC
.xdata$x:000055BC ; Segment type: Pure data
.xdata$x:000055BC ; Segment permissions: Read
.xdata$x:000055BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000055BC                 assume cs:_xdata$x
.xdata$x:000055BC                 ;org 55BCh
.xdata$x:000055BC ; COMDAT (pick associative to section at 54DC)
.xdata$x:000055BC __unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ db 0FFh
.xdata$x:000055BC                                         ; DATA XREF: .xdata$x:000055CCo
.xdata$x:000055BD                 db 0FFh
.xdata$x:000055BE                 db 0FFh
.xdata$x:000055BF                 db 0FFh
.xdata$x:000055C0                 dd offset __unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0
.xdata$x:000055C4 __ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ db  22h ; "
.xdata$x:000055C4                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ+11o
.xdata$x:000055C5                 db    5
.xdata$x:000055C6                 db  93h ; ô
.xdata$x:000055C7                 db  19h
.xdata$x:000055C8                 db    1
.xdata$x:000055C9                 db    0
.xdata$x:000055CA                 db    0
.xdata$x:000055CB                 db    0
.xdata$x:000055CC                 dd offset __unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.xdata$x:000055D0                 db    0
.xdata$x:000055D1                 db    0
.xdata$x:000055D2                 db    0
.xdata$x:000055D3                 db    0
.xdata$x:000055D4                 db    0
.xdata$x:000055D5                 db    0
.xdata$x:000055D6                 db    0
.xdata$x:000055D7                 db    0
.xdata$x:000055D8                 db    0
.xdata$x:000055D9                 db    0
.xdata$x:000055DA                 db    0
.xdata$x:000055DB                 db    0
.xdata$x:000055DC                 db    0
.xdata$x:000055DD                 db    0
.xdata$x:000055DE                 db    0
.xdata$x:000055DF                 db    0
.xdata$x:000055E0                 db    0
.xdata$x:000055E1                 db    0
.xdata$x:000055E2                 db    0
.xdata$x:000055E3                 db    0
.xdata$x:000055E4                 db    1
.xdata$x:000055E5                 db    0
.xdata$x:000055E6                 db    0
.xdata$x:000055E7                 db    0
.xdata$x:000055E7 _xdata$x        ends
.xdata$x:000055E7
.text:000055E8 ; ===========================================================================
.text:000055E8
.text:000055E8 ; Segment type: Pure code
.text:000055E8 ; Segment permissions: Read/Execute
.text:000055E8 _text           segment para public 'CODE' use32
.text:000055E8                 assume cs:_text
.text:000055E8                 ;org 55E8h
.text:000055E8 ; COMDAT (pick any)
.text:000055E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000055E8
.text:000055E8 ; =============== S U B R O U T I N E =======================================
.text:000055E8
.text:000055E8 ; Attributes: bp-based frame
.text:000055E8
.text:000055E8 ; public: void __thiscall CObjectVector<class COneMethodInfo>::DeleteFrontal(unsigned int)
.text:000055E8                 public ?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z
.text:000055E8 ?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z proc near
.text:000055E8                                         ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+41Ap
.text:000055E8
.text:000055E8 var_14          = dword ptr -14h
.text:000055E8 var_10          = dword ptr -10h
.text:000055E8 var_C           = dword ptr -0Ch
.text:000055E8 var_8           = dword ptr -8
.text:000055E8 var_4           = dword ptr -4
.text:000055E8 arg_0           = dword ptr  8
.text:000055E8
.text:000055E8                 push    ebp
.text:000055E9                 mov     ebp, esp
.text:000055EB                 sub     esp, 14h
.text:000055EE                 mov     eax, 0CCCCCCCCh
.text:000055F3                 mov     [ebp+var_14], eax
.text:000055F6                 mov     [ebp+var_10], eax
.text:000055F9                 mov     [ebp+var_C], eax
.text:000055FC                 mov     [ebp+var_8], eax
.text:000055FF                 mov     [ebp+var_4], eax
.text:00005602                 mov     [ebp+var_4], ecx
.text:00005605                 mov     [ebp+var_8], 0
.text:0000560C                 jmp     short loc_5617
.text:0000560E ; ---------------------------------------------------------------------------
.text:0000560E
.text:0000560E loc_560E:                               ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint):loc_5652j
.text:0000560E                 mov     eax, [ebp+var_8]
.text:00005611                 add     eax, 1
.text:00005614                 mov     [ebp+var_8], eax
.text:00005617
.text:00005617 loc_5617:                               ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+24j
.text:00005617                 mov     ecx, [ebp+var_8]
.text:0000561A                 cmp     ecx, [ebp+arg_0]
.text:0000561D                 jnb     short loc_5654
.text:0000561F                 mov     edx, [ebp+var_8]
.text:00005622                 push    edx
.text:00005623                 mov     ecx, [ebp+var_4]
.text:00005626                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000562B                 mov     eax, [eax]
.text:0000562D                 mov     [ebp+var_10], eax
.text:00005630                 mov     ecx, [ebp+var_10]
.text:00005633                 mov     [ebp+var_C], ecx
.text:00005636                 cmp     [ebp+var_C], 0
.text:0000563A                 jz      short loc_564B
.text:0000563C                 push    1
.text:0000563E                 mov     ecx, [ebp+var_C]
.text:00005641                 call    ??_GCOneMethodInfo@@QAEPAXI@Z ; COneMethodInfo::`scalar deleting destructor'(uint)
.text:00005646                 mov     [ebp+var_14], eax
.text:00005649                 jmp     short loc_5652
.text:0000564B ; ---------------------------------------------------------------------------
.text:0000564B
.text:0000564B loc_564B:                               ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+52j
.text:0000564B                 mov     [ebp+var_14], 0
.text:00005652
.text:00005652 loc_5652:                               ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+61j
.text:00005652                 jmp     short loc_560E
.text:00005654 ; ---------------------------------------------------------------------------
.text:00005654
.text:00005654 loc_5654:                               ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+35j
.text:00005654                 mov     edx, [ebp+arg_0]
.text:00005657                 push    edx
.text:00005658                 mov     ecx, [ebp+var_4]
.text:0000565B                 call    ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::DeleteFrontal(uint)
.text:00005660                 add     esp, 14h
.text:00005663                 cmp     ebp, esp
.text:00005665                 call    __RTC_CheckEsp
.text:0000566A                 mov     esp, ebp
.text:0000566C                 pop     ebp
.text:0000566D                 retn    4
.text:0000566D ?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z endp
.text:0000566D
.text:0000566D _text           ends
.text:0000566D
.text:00005670 ; ===========================================================================
.text:00005670
.text:00005670 ; Segment type: Pure code
.text:00005670 ; Segment permissions: Read/Execute
.text:00005670 _text           segment para public 'CODE' use32
.text:00005670                 assume cs:_text
.text:00005670                 ;org 5670h
.text:00005670 ; COMDAT (pick any)
.text:00005670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005670
.text:00005670 ; =============== S U B R O U T I N E =======================================
.text:00005670
.text:00005670 ; Attributes: bp-based frame
.text:00005670
.text:00005670 ; public: __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::CObjectVector<struct NArchive::N7z::CMethodFull>(void)
.text:00005670                 public ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text:00005670 ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ proc near
.text:00005670                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)+30p
.text:00005670
.text:00005670 var_4           = dword ptr -4
.text:00005670
.text:00005670                 push    ebp
.text:00005671                 mov     ebp, esp
.text:00005673                 push    ecx
.text:00005674                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000567B                 mov     [ebp+var_4], ecx
.text:0000567E                 mov     ecx, [ebp+var_4]
.text:00005681                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00005686                 mov     eax, [ebp+var_4]
.text:00005689                 add     esp, 4
.text:0000568C                 cmp     ebp, esp
.text:0000568E                 call    __RTC_CheckEsp
.text:00005693                 mov     esp, ebp
.text:00005695                 pop     ebp
.text:00005696                 retn
.text:00005696 ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ endp
.text:00005696
.text:00005696 ; ---------------------------------------------------------------------------
.text:00005697                 align 4
.text:00005697 _text           ends
.text:00005697
.text:00005698 ; ===========================================================================
.text:00005698
.text:00005698 ; Segment type: Pure code
.text:00005698 ; Segment permissions: Read/Execute
.text:00005698 _text           segment para public 'CODE' use32
.text:00005698                 assume cs:_text
.text:00005698                 ;org 5698h
.text:00005698 ; COMDAT (pick any)
.text:00005698                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005698
.text:00005698 ; =============== S U B R O U T I N E =======================================
.text:00005698
.text:00005698 ; Attributes: bp-based frame
.text:00005698
.text:00005698 ; public: struct NArchive::N7z::CMethodFull & __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::AddNew(void)
.text:00005698                 public ?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ
.text:00005698 ?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ proc near
.text:00005698                                         ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+AFp
.text:00005698                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+1EFp
.text:00005698
.text:00005698 var_20          = dword ptr -20h
.text:00005698 var_1C          = dword ptr -1Ch
.text:00005698 var_18          = dword ptr -18h
.text:00005698 var_14          = dword ptr -14h
.text:00005698 var_10          = dword ptr -10h
.text:00005698 var_C           = dword ptr -0Ch
.text:00005698 var_4           = dword ptr -4
.text:00005698
.text:00005698                 push    ebp
.text:00005699                 mov     ebp, esp
.text:0000569B                 push    0FFFFFFFFh
.text:0000569D                 push    offset __ehhandler$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ
.text:000056A2                 mov     eax, large fs:0
.text:000056A8                 push    eax
.text:000056A9                 sub     esp, 14h
.text:000056AC                 mov     eax, 0CCCCCCCCh
.text:000056B1                 mov     [ebp+var_20], eax
.text:000056B4                 mov     [ebp+var_1C], eax
.text:000056B7                 mov     [ebp+var_18], eax
.text:000056BA                 mov     [ebp+var_14], eax
.text:000056BD                 mov     [ebp+var_10], eax
.text:000056C0                 mov     eax, dword ptr ds:___security_cookie
.text:000056C5                 xor     eax, ebp
.text:000056C7                 push    eax
.text:000056C8                 lea     eax, [ebp+var_C]
.text:000056CB                 mov     large fs:0, eax
.text:000056D1                 mov     [ebp+var_10], ecx
.text:000056D4                 push    20h ; ' '       ; unsigned int
.text:000056D6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000056DB                 add     esp, 4
.text:000056DE                 mov     [ebp+var_1C], eax
.text:000056E1                 mov     [ebp+var_4], 0
.text:000056E8                 cmp     [ebp+var_1C], 0
.text:000056EC                 jz      short loc_56FB
.text:000056EE                 mov     ecx, [ebp+var_1C] ; this
.text:000056F1                 call    ??0CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::CMethodFull(void)
.text:000056F6                 mov     [ebp+var_20], eax
.text:000056F9                 jmp     short loc_5702
.text:000056FB ; ---------------------------------------------------------------------------
.text:000056FB
.text:000056FB loc_56FB:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::AddNew(void)+54j
.text:000056FB                 mov     [ebp+var_20], 0
.text:00005702
.text:00005702 loc_5702:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::AddNew(void)+61j
.text:00005702                 mov     eax, [ebp+var_20]
.text:00005705                 mov     [ebp+var_18], eax
.text:00005708                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000570F                 mov     ecx, [ebp+var_18]
.text:00005712                 mov     [ebp+var_14], ecx
.text:00005715                 mov     edx, [ebp+var_14]
.text:00005718                 push    edx
.text:00005719                 mov     ecx, [ebp+var_10]
.text:0000571C                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00005721                 mov     eax, [ebp+var_14]
.text:00005724                 mov     ecx, [ebp+var_C]
.text:00005727                 mov     large fs:0, ecx
.text:0000572E                 pop     ecx
.text:0000572F                 add     esp, 20h
.text:00005732                 cmp     ebp, esp
.text:00005734                 call    __RTC_CheckEsp
.text:00005739                 mov     esp, ebp
.text:0000573B                 pop     ebp
.text:0000573C                 retn
.text:0000573C ?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ endp
.text:0000573C
.text:0000573C ; ---------------------------------------------------------------------------
.text:0000573D                 align 10h
.text:0000573D _text           ends
.text:0000573D
.text$x:00005740 ; ===========================================================================
.text$x:00005740
.text$x:00005740 ; Segment type: Pure code
.text$x:00005740 ; Segment permissions: Read/Execute
.text$x:00005740 _text$x         segment para public 'CODE' use32
.text$x:00005740                 assume cs:_text$x
.text$x:00005740                 ;org 5740h
.text$x:00005740 ; COMDAT (pick associative to section at 5698)
.text$x:00005740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005740
.text$x:00005740 ; =============== S U B R O U T I N E =======================================
.text$x:00005740
.text$x:00005740
.text$x:00005740 __unwindfunclet$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ$0 proc near
.text$x:00005740                                         ; DATA XREF: .xdata$x:0000576Co
.text$x:00005740                 mov     eax, [ebp-1Ch]
.text$x:00005743                 push    eax             ; void *
.text$x:00005744                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00005749                 pop     ecx
.text$x:0000574A                 retn
.text$x:0000574A __unwindfunclet$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ$0 endp
.text$x:0000574A
.text$x:0000574B
.text$x:0000574B ; =============== S U B R O U T I N E =======================================
.text$x:0000574B
.text$x:0000574B
.text$x:0000574B __ehhandler$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ proc near
.text$x:0000574B                                         ; DATA XREF: CObjectVector<NArchive::N7z::CMethodFull>::AddNew(void)+5o
.text$x:0000574B
.text$x:0000574B arg_4           = dword ptr  8
.text$x:0000574B
.text$x:0000574B                 mov     edx, [esp+arg_4]
.text$x:0000574F                 lea     eax, [edx+0Ch]
.text$x:00005752                 mov     ecx, [edx-18h]
.text$x:00005755                 xor     ecx, eax
.text$x:00005757                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000575C                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ
.text$x:00005761                 jmp     ___CxxFrameHandler3
.text$x:00005761 __ehhandler$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ endp
.text$x:00005761
.text$x:00005761 ; ---------------------------------------------------------------------------
.text$x:00005766                 align 4
.text$x:00005766 _text$x         ends
.text$x:00005766
.xdata$x:00005768 ; ===========================================================================
.xdata$x:00005768
.xdata$x:00005768 ; Segment type: Pure data
.xdata$x:00005768 ; Segment permissions: Read
.xdata$x:00005768 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005768                 assume cs:_xdata$x
.xdata$x:00005768                 ;org 5768h
.xdata$x:00005768 ; COMDAT (pick associative to section at 5698)
.xdata$x:00005768 __unwindtable$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ db 0FFh
.xdata$x:00005768                                         ; DATA XREF: .xdata$x:00005778o
.xdata$x:00005769                 db 0FFh
.xdata$x:0000576A                 db 0FFh
.xdata$x:0000576B                 db 0FFh
.xdata$x:0000576C                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ$0
.xdata$x:00005770 __ehfuncinfo$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ db  22h ; "
.xdata$x:00005770                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ+11o
.xdata$x:00005771                 db    5
.xdata$x:00005772                 db  93h ; ô
.xdata$x:00005773                 db  19h
.xdata$x:00005774                 db    1
.xdata$x:00005775                 db    0
.xdata$x:00005776                 db    0
.xdata$x:00005777                 db    0
.xdata$x:00005778                 dd offset __unwindtable$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ
.xdata$x:0000577C                 db    0
.xdata$x:0000577D                 db    0
.xdata$x:0000577E                 db    0
.xdata$x:0000577F                 db    0
.xdata$x:00005780                 db    0
.xdata$x:00005781                 db    0
.xdata$x:00005782                 db    0
.xdata$x:00005783                 db    0
.xdata$x:00005784                 db    0
.xdata$x:00005785                 db    0
.xdata$x:00005786                 db    0
.xdata$x:00005787                 db    0
.xdata$x:00005788                 db    0
.xdata$x:00005789                 db    0
.xdata$x:0000578A                 db    0
.xdata$x:0000578B                 db    0
.xdata$x:0000578C                 db    0
.xdata$x:0000578D                 db    0
.xdata$x:0000578E                 db    0
.xdata$x:0000578F                 db    0
.xdata$x:00005790                 db    1
.xdata$x:00005791                 db    0
.xdata$x:00005792                 db    0
.xdata$x:00005793                 db    0
.xdata$x:00005793 _xdata$x        ends
.xdata$x:00005793
.text:00005794 ; ===========================================================================
.text:00005794
.text:00005794 ; Segment type: Pure code
.text:00005794 ; Segment permissions: Read/Execute
.text:00005794 _text           segment para public 'CODE' use32
.text:00005794                 assume cs:_text
.text:00005794                 ;org 5794h
.text:00005794 ; COMDAT (pick any)
.text:00005794                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005794
.text:00005794 ; =============== S U B R O U T I N E =======================================
.text:00005794
.text:00005794 ; Attributes: bp-based frame
.text:00005794
.text:00005794 ; public: __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::~CObjectVector<struct NArchive::N7z::CMethodFull>(void)
.text:00005794                 public ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text:00005794 ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ proc near
.text:00005794                                         ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0+3j
.text:00005794                                         ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+58p ...
.text:00005794
.text:00005794 var_20          = dword ptr -20h
.text:00005794 var_1C          = dword ptr -1Ch
.text:00005794 var_18          = dword ptr -18h
.text:00005794 var_14          = dword ptr -14h
.text:00005794 var_10          = dword ptr -10h
.text:00005794 var_C           = dword ptr -0Ch
.text:00005794 var_4           = dword ptr -4
.text:00005794
.text:00005794                 push    ebp
.text:00005795                 mov     ebp, esp
.text:00005797                 push    0FFFFFFFFh
.text:00005799                 push    offset __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text:0000579E                 mov     eax, large fs:0
.text:000057A4                 push    eax
.text:000057A5                 sub     esp, 14h
.text:000057A8                 mov     eax, 0CCCCCCCCh
.text:000057AD                 mov     [ebp+var_20], eax
.text:000057B0                 mov     [ebp+var_1C], eax
.text:000057B3                 mov     [ebp+var_18], eax
.text:000057B6                 mov     [ebp+var_14], eax
.text:000057B9                 mov     [ebp+var_10], eax
.text:000057BC                 mov     eax, dword ptr ds:___security_cookie
.text:000057C1                 xor     eax, ebp
.text:000057C3                 push    eax
.text:000057C4                 lea     eax, [ebp+var_C]
.text:000057C7                 mov     large fs:0, eax
.text:000057CD                 mov     [ebp+var_10], ecx
.text:000057D0                 mov     [ebp+var_4], 0
.text:000057D7                 mov     ecx, [ebp+var_10]
.text:000057DA                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000057DF                 mov     [ebp+var_14], eax
.text:000057E2
.text:000057E2 loc_57E2:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void):loc_5824j
.text:000057E2                 cmp     [ebp+var_14], 0
.text:000057E6                 jz      short loc_5826
.text:000057E8                 mov     eax, [ebp+var_14]
.text:000057EB                 sub     eax, 1
.text:000057EE                 mov     [ebp+var_14], eax
.text:000057F1                 mov     ecx, [ebp+var_14]
.text:000057F4                 push    ecx
.text:000057F5                 mov     ecx, [ebp+var_10]
.text:000057F8                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000057FD                 mov     edx, [eax]
.text:000057FF                 mov     [ebp+var_1C], edx
.text:00005802                 mov     eax, [ebp+var_1C]
.text:00005805                 mov     [ebp+var_18], eax
.text:00005808                 cmp     [ebp+var_18], 0
.text:0000580C                 jz      short loc_581D
.text:0000580E                 push    1
.text:00005810                 mov     ecx, [ebp+var_18]
.text:00005813                 call    ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CMethodFull::`scalar deleting destructor'(uint)
.text:00005818                 mov     [ebp+var_20], eax
.text:0000581B                 jmp     short loc_5824
.text:0000581D ; ---------------------------------------------------------------------------
.text:0000581D
.text:0000581D loc_581D:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+78j
.text:0000581D                 mov     [ebp+var_20], 0
.text:00005824
.text:00005824 loc_5824:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+87j
.text:00005824                 jmp     short loc_57E2
.text:00005826 ; ---------------------------------------------------------------------------
.text:00005826
.text:00005826 loc_5826:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+52j
.text:00005826                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000582D                 mov     ecx, [ebp+var_10]
.text:00005830                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00005835                 mov     ecx, [ebp+var_C]
.text:00005838                 mov     large fs:0, ecx
.text:0000583F                 pop     ecx
.text:00005840                 add     esp, 20h
.text:00005843                 cmp     ebp, esp
.text:00005845                 call    __RTC_CheckEsp
.text:0000584A                 mov     esp, ebp
.text:0000584C                 pop     ebp
.text:0000584D                 retn
.text:0000584D ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ endp
.text:0000584D
.text:0000584D ; ---------------------------------------------------------------------------
.text:0000584E                 align 10h
.text:0000584E _text           ends
.text:0000584E
.text$x:00005850 ; ===========================================================================
.text$x:00005850
.text$x:00005850 ; Segment type: Pure code
.text$x:00005850 ; Segment permissions: Read/Execute
.text$x:00005850 _text$x         segment para public 'CODE' use32
.text$x:00005850                 assume cs:_text$x
.text$x:00005850                 ;org 5850h
.text$x:00005850 ; COMDAT (pick associative to section at 5794)
.text$x:00005850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005850
.text$x:00005850 ; =============== S U B R O U T I N E =======================================
.text$x:00005850
.text$x:00005850
.text$x:00005850 __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0 proc near
.text$x:00005850                                         ; DATA XREF: .xdata$x:00005878o
.text$x:00005850                 mov     ecx, [ebp-10h]
.text$x:00005853                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00005853 __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0 endp
.text$x:00005853
.text$x:00005858
.text$x:00005858 ; =============== S U B R O U T I N E =======================================
.text$x:00005858
.text$x:00005858
.text$x:00005858 __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ proc near
.text$x:00005858                                         ; DATA XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+5o
.text$x:00005858
.text$x:00005858 arg_4           = dword ptr  8
.text$x:00005858
.text$x:00005858                 mov     edx, [esp+arg_4]
.text$x:0000585C                 lea     eax, [edx+0Ch]
.text$x:0000585F                 mov     ecx, [edx-18h]
.text$x:00005862                 xor     ecx, eax
.text$x:00005864                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005869                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text$x:0000586E                 jmp     ___CxxFrameHandler3
.text$x:0000586E __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ endp
.text$x:0000586E
.text$x:0000586E ; ---------------------------------------------------------------------------
.text$x:00005873                 align 4
.text$x:00005873 _text$x         ends
.text$x:00005873
.xdata$x:00005874 ; ===========================================================================
.xdata$x:00005874
.xdata$x:00005874 ; Segment type: Pure data
.xdata$x:00005874 ; Segment permissions: Read
.xdata$x:00005874 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005874                 assume cs:_xdata$x
.xdata$x:00005874                 ;org 5874h
.xdata$x:00005874 ; COMDAT (pick associative to section at 5794)
.xdata$x:00005874 __unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00005874                                         ; DATA XREF: .xdata$x:00005884o
.xdata$x:00005875                 db 0FFh
.xdata$x:00005876                 db 0FFh
.xdata$x:00005877                 db 0FFh
.xdata$x:00005878                 dd offset __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0
.xdata$x:0000587C __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:0000587C                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ+11o
.xdata$x:0000587D                 db    5
.xdata$x:0000587E                 db  93h ; ô
.xdata$x:0000587F                 db  19h
.xdata$x:00005880                 db    1
.xdata$x:00005881                 db    0
.xdata$x:00005882                 db    0
.xdata$x:00005883                 db    0
.xdata$x:00005884                 dd offset __unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.xdata$x:00005888                 db    0
.xdata$x:00005889                 db    0
.xdata$x:0000588A                 db    0
.xdata$x:0000588B                 db    0
.xdata$x:0000588C                 db    0
.xdata$x:0000588D                 db    0
.xdata$x:0000588E                 db    0
.xdata$x:0000588F                 db    0
.xdata$x:00005890                 db    0
.xdata$x:00005891                 db    0
.xdata$x:00005892                 db    0
.xdata$x:00005893                 db    0
.xdata$x:00005894                 db    0
.xdata$x:00005895                 db    0
.xdata$x:00005896                 db    0
.xdata$x:00005897                 db    0
.xdata$x:00005898                 db    0
.xdata$x:00005899                 db    0
.xdata$x:0000589A                 db    0
.xdata$x:0000589B                 db    0
.xdata$x:0000589C                 db    1
.xdata$x:0000589D                 db    0
.xdata$x:0000589E                 db    0
.xdata$x:0000589F                 db    0
.xdata$x:0000589F _xdata$x        ends
.xdata$x:0000589F
.text:000058A0 ; ===========================================================================
.text:000058A0
.text:000058A0 ; Segment type: Pure code
.text:000058A0 ; Segment permissions: Read/Execute
.text:000058A0 _text           segment para public 'CODE' use32
.text:000058A0                 assume cs:_text
.text:000058A0                 ;org 58A0h
.text:000058A0 ; COMDAT (pick any)
.text:000058A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058A0
.text:000058A0 ; =============== S U B R O U T I N E =======================================
.text:000058A0
.text:000058A0 ; Attributes: bp-based frame
.text:000058A0
.text:000058A0 ; public: __thiscall CRecordVector<struct NArchive::N7z::CBond2>::CRecordVector<struct NArchive::N7z::CBond2>(void)
.text:000058A0                 public ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
.text:000058A0 ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ proc near
.text:000058A0                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)+42p
.text:000058A0
.text:000058A0 var_4           = dword ptr -4
.text:000058A0
.text:000058A0                 push    ebp
.text:000058A1                 mov     ebp, esp
.text:000058A3                 push    ecx
.text:000058A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058AB                 mov     [ebp+var_4], ecx
.text:000058AE                 mov     eax, [ebp+var_4]
.text:000058B1                 mov     dword ptr [eax], 0
.text:000058B7                 mov     ecx, [ebp+var_4]
.text:000058BA                 mov     dword ptr [ecx+4], 0
.text:000058C1                 mov     edx, [ebp+var_4]
.text:000058C4                 mov     dword ptr [edx+8], 0
.text:000058CB                 mov     eax, [ebp+var_4]
.text:000058CE                 mov     esp, ebp
.text:000058D0                 pop     ebp
.text:000058D1                 retn
.text:000058D1 ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ endp
.text:000058D1
.text:000058D1 ; ---------------------------------------------------------------------------
.text:000058D2                 align 4
.text:000058D2 _text           ends
.text:000058D2
.text:000058D4 ; ===========================================================================
.text:000058D4
.text:000058D4 ; Segment type: Pure code
.text:000058D4 ; Segment permissions: Read/Execute
.text:000058D4 _text           segment para public 'CODE' use32
.text:000058D4                 assume cs:_text
.text:000058D4                 ;org 58D4h
.text:000058D4 ; COMDAT (pick any)
.text:000058D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058D4
.text:000058D4 ; =============== S U B R O U T I N E =======================================
.text:000058D4
.text:000058D4 ; Attributes: bp-based frame
.text:000058D4
.text:000058D4 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CBond2>::Size(void)const
.text:000058D4                 public ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ
.text:000058D4 ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ proc near
.text:000058D4                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+135p
.text:000058D4                                         ; NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+348p ...
.text:000058D4
.text:000058D4 var_4           = dword ptr -4
.text:000058D4
.text:000058D4                 push    ebp
.text:000058D5                 mov     ebp, esp
.text:000058D7                 push    ecx
.text:000058D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058DF                 mov     [ebp+var_4], ecx
.text:000058E2                 mov     eax, [ebp+var_4]
.text:000058E5                 mov     eax, [eax+4]
.text:000058E8                 mov     esp, ebp
.text:000058EA                 pop     ebp
.text:000058EB                 retn
.text:000058EB ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ endp
.text:000058EB
.text:000058EB _text           ends
.text:000058EB
.text:000058EC ; ===========================================================================
.text:000058EC
.text:000058EC ; Segment type: Pure code
.text:000058EC ; Segment permissions: Read/Execute
.text:000058EC _text           segment para public 'CODE' use32
.text:000058EC                 assume cs:_text
.text:000058EC                 ;org 58ECh
.text:000058EC ; COMDAT (pick any)
.text:000058EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058EC
.text:000058EC ; =============== S U B R O U T I N E =======================================
.text:000058EC
.text:000058EC ; Attributes: bp-based frame
.text:000058EC
.text:000058EC ; public: __thiscall CRecordVector<struct NArchive::N7z::CBond2>::~CRecordVector<struct NArchive::N7z::CBond2>(void)
.text:000058EC                 public ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
.text:000058EC ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ proc near
.text:000058EC                                         ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1+6j
.text:000058EC                                         ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+49p ...
.text:000058EC
.text:000058EC var_8           = dword ptr -8
.text:000058EC var_4           = dword ptr -4
.text:000058EC
.text:000058EC                 push    ebp
.text:000058ED                 mov     ebp, esp
.text:000058EF                 sub     esp, 8
.text:000058F2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000058F9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005900                 mov     [ebp+var_4], ecx
.text:00005903                 mov     eax, [ebp+var_4]
.text:00005906                 mov     ecx, [eax]
.text:00005908                 mov     [ebp+var_8], ecx
.text:0000590B                 mov     edx, [ebp+var_8]
.text:0000590E                 push    edx             ; void *
.text:0000590F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005914                 add     esp, 4
.text:00005917                 add     esp, 8
.text:0000591A                 cmp     ebp, esp
.text:0000591C                 call    __RTC_CheckEsp
.text:00005921                 mov     esp, ebp
.text:00005923                 pop     ebp
.text:00005924                 retn
.text:00005924 ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ endp
.text:00005924
.text:00005924 ; ---------------------------------------------------------------------------
.text:00005925                 align 4
.text:00005925 _text           ends
.text:00005925
.text:00005928 ; ===========================================================================
.text:00005928
.text:00005928 ; Segment type: Pure code
.text:00005928 ; Segment permissions: Read/Execute
.text:00005928 _text           segment para public 'CODE' use32
.text:00005928                 assume cs:_text
.text:00005928                 ;org 5928h
.text:00005928 ; COMDAT (pick any)
.text:00005928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005928
.text:00005928 ; =============== S U B R O U T I N E =======================================
.text:00005928
.text:00005928 ; Attributes: bp-based frame
.text:00005928
.text:00005928 ; public: void __thiscall CRecordVector<struct NArchive::N7z::CBond2>::Clear(void)
.text:00005928                 public ?Clear@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEXXZ
.text:00005928 ?Clear@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEXXZ proc near
.text:00005928                                         ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+54p
.text:00005928
.text:00005928 var_4           = dword ptr -4
.text:00005928
.text:00005928                 push    ebp
.text:00005929                 mov     ebp, esp
.text:0000592B                 push    ecx
.text:0000592C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005933                 mov     [ebp+var_4], ecx
.text:00005936                 mov     eax, [ebp+var_4]
.text:00005939                 mov     dword ptr [eax+4], 0
.text:00005940                 mov     esp, ebp
.text:00005942                 pop     ebp
.text:00005943                 retn
.text:00005943 ?Clear@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEXXZ endp
.text:00005943
.text:00005943 _text           ends
.text:00005943
.text:00005944 ; ===========================================================================
.text:00005944
.text:00005944 ; Segment type: Pure code
.text:00005944 ; Segment permissions: Read/Execute
.text:00005944 _text           segment para public 'CODE' use32
.text:00005944                 assume cs:_text
.text:00005944                 ;org 5944h
.text:00005944 ; COMDAT (pick any)
.text:00005944                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005944
.text:00005944 ; =============== S U B R O U T I N E =======================================
.text:00005944
.text:00005944 ; Attributes: bp-based frame
.text:00005944
.text:00005944 ; public: class CRecordVector<struct NArchive::N7z::CBond2> & __thiscall CRecordVector<struct NArchive::N7z::CBond2>::operator=(class CRecordVector<struct NArchive::N7z::CBond2> const &)
.text:00005944                 public ??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
.text:00005944 ??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z proc near
.text:00005944                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+4Cp
.text:00005944
.text:00005944 var_10          = dword ptr -10h
.text:00005944 var_C           = dword ptr -0Ch
.text:00005944 var_8           = dword ptr -8
.text:00005944 var_4           = dword ptr -4
.text:00005944 arg_0           = dword ptr  8
.text:00005944
.text:00005944                 push    ebp
.text:00005945                 mov     ebp, esp
.text:00005947                 sub     esp, 10h
.text:0000594A                 mov     eax, 0CCCCCCCCh
.text:0000594F                 mov     [ebp+var_10], eax
.text:00005952                 mov     [ebp+var_C], eax
.text:00005955                 mov     [ebp+var_8], eax
.text:00005958                 mov     [ebp+var_4], eax
.text:0000595B                 mov     [ebp+var_4], ecx
.text:0000595E                 mov     eax, [ebp+arg_0]
.text:00005961                 cmp     eax, [ebp+var_4]
.text:00005964                 jnz     short loc_596E
.text:00005966                 mov     eax, [ebp+var_4]
.text:00005969                 jmp     loc_5A12
.text:0000596E ; ---------------------------------------------------------------------------
.text:0000596E
.text:0000596E loc_596E:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)+20j
.text:0000596E                 mov     ecx, [ebp+arg_0]
.text:00005971                 call    ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size(void)
.text:00005976                 mov     [ebp+var_8], eax
.text:00005979                 mov     ecx, [ebp+var_4]
.text:0000597C                 mov     edx, [ebp+var_8]
.text:0000597F                 cmp     edx, [ecx+8]
.text:00005982                 jbe     short loc_59E5
.text:00005984                 mov     eax, [ebp+var_4]
.text:00005987                 mov     ecx, [eax]
.text:00005989                 mov     [ebp+var_C], ecx
.text:0000598C                 mov     edx, [ebp+var_C]
.text:0000598F                 push    edx             ; void *
.text:00005990                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005995                 add     esp, 4
.text:00005998                 mov     eax, [ebp+var_4]
.text:0000599B                 mov     dword ptr [eax+8], 0
.text:000059A2                 mov     ecx, [ebp+var_4]
.text:000059A5                 mov     dword ptr [ecx+4], 0
.text:000059AC                 mov     edx, [ebp+var_4]
.text:000059AF                 mov     dword ptr [edx], 0
.text:000059B5                 xor     ecx, ecx
.text:000059B7                 mov     eax, [ebp+var_8]
.text:000059BA                 mov     edx, 0Ch
.text:000059BF                 mul     edx
.text:000059C1                 seto    cl
.text:000059C4                 neg     ecx
.text:000059C6                 or      ecx, eax
.text:000059C8                 push    ecx             ; unsigned int
.text:000059C9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000059CE                 add     esp, 4
.text:000059D1                 mov     [ebp+var_10], eax
.text:000059D4                 mov     eax, [ebp+var_4]
.text:000059D7                 mov     ecx, [ebp+var_10]
.text:000059DA                 mov     [eax], ecx
.text:000059DC                 mov     edx, [ebp+var_4]
.text:000059DF                 mov     eax, [ebp+var_8]
.text:000059E2                 mov     [edx+8], eax
.text:000059E5
.text:000059E5 loc_59E5:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)+3Ej
.text:000059E5                 mov     ecx, [ebp+var_4]
.text:000059E8                 mov     edx, [ebp+var_8]
.text:000059EB                 mov     [ecx+4], edx
.text:000059EE                 cmp     [ebp+var_8], 0
.text:000059F2                 jz      short loc_5A0F
.text:000059F4                 mov     eax, [ebp+var_8]
.text:000059F7                 imul    eax, 0Ch
.text:000059FA                 push    eax             ; Size
.text:000059FB                 mov     ecx, [ebp+arg_0]
.text:000059FE                 mov     edx, [ecx]
.text:00005A00                 push    edx             ; Src
.text:00005A01                 mov     eax, [ebp+var_4]
.text:00005A04                 mov     ecx, [eax]
.text:00005A06                 push    ecx             ; Dst
.text:00005A07                 call    _memcpy
.text:00005A0C                 add     esp, 0Ch
.text:00005A0F
.text:00005A0F loc_5A0F:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)+AEj
.text:00005A0F                 mov     eax, [ebp+var_4]
.text:00005A12
.text:00005A12 loc_5A12:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)+25j
.text:00005A12                 add     esp, 10h
.text:00005A15                 cmp     ebp, esp
.text:00005A17                 call    __RTC_CheckEsp
.text:00005A1C                 mov     esp, ebp
.text:00005A1E                 pop     ebp
.text:00005A1F                 retn    4
.text:00005A1F ??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z endp
.text:00005A1F
.text:00005A1F ; ---------------------------------------------------------------------------
.text:00005A22                 align 4
.text:00005A22 _text           ends
.text:00005A22
.text:00005A24 ; ===========================================================================
.text:00005A24
.text:00005A24 ; Segment type: Pure code
.text:00005A24 ; Segment permissions: Read/Execute
.text:00005A24 _text           segment para public 'CODE' use32
.text:00005A24                 assume cs:_text
.text:00005A24                 ;org 5A24h
.text:00005A24 ; COMDAT (pick any)
.text:00005A24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005A24
.text:00005A24 ; =============== S U B R O U T I N E =======================================
.text:00005A24
.text:00005A24 ; Attributes: bp-based frame
.text:00005A24
.text:00005A24 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CBond2>::Add(struct NArchive::N7z::CBond2)
.text:00005A24                 public ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z
.text:00005A24 ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z proc near
.text:00005A24                                         ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+289p
.text:00005A24
.text:00005A24 var_14          = dword ptr -14h
.text:00005A24 var_10          = dword ptr -10h
.text:00005A24 var_C           = dword ptr -0Ch
.text:00005A24 var_8           = dword ptr -8
.text:00005A24 var_4           = dword ptr -4
.text:00005A24 arg_0           = dword ptr  8
.text:00005A24 arg_4           = dword ptr  0Ch
.text:00005A24 arg_8           = dword ptr  10h
.text:00005A24
.text:00005A24                 push    ebp
.text:00005A25                 mov     ebp, esp
.text:00005A27                 sub     esp, 14h
.text:00005A2A                 mov     eax, 0CCCCCCCCh
.text:00005A2F                 mov     [ebp+var_14], eax
.text:00005A32                 mov     [ebp+var_10], eax
.text:00005A35                 mov     [ebp+var_C], eax
.text:00005A38                 mov     [ebp+var_8], eax
.text:00005A3B                 mov     [ebp+var_4], eax
.text:00005A3E                 mov     [ebp+var_4], ecx
.text:00005A41                 mov     ecx, [ebp+var_4]
.text:00005A44                 call    ?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition(void)
.text:00005A49                 mov     eax, [ebp+var_4]
.text:00005A4C                 mov     ecx, [eax+4]
.text:00005A4F                 imul    ecx, 0Ch
.text:00005A52                 mov     edx, [ebp+var_4]
.text:00005A55                 mov     eax, [edx]
.text:00005A57                 add     eax, ecx
.text:00005A59                 mov     ecx, [ebp+arg_0]
.text:00005A5C                 mov     [eax], ecx
.text:00005A5E                 mov     edx, [ebp+arg_4]
.text:00005A61                 mov     [eax+4], edx
.text:00005A64                 mov     ecx, [ebp+arg_8]
.text:00005A67                 mov     [eax+8], ecx
.text:00005A6A                 mov     edx, [ebp+var_4]
.text:00005A6D                 mov     eax, [edx+4]
.text:00005A70                 mov     [ebp+var_14], eax
.text:00005A73                 mov     ecx, [ebp+var_4]
.text:00005A76                 mov     edx, [ecx+4]
.text:00005A79                 add     edx, 1
.text:00005A7C                 mov     eax, [ebp+var_4]
.text:00005A7F                 mov     [eax+4], edx
.text:00005A82                 mov     eax, [ebp+var_14]
.text:00005A85                 push    edx
.text:00005A86                 mov     ecx, ebp
.text:00005A88                 push    eax
.text:00005A89                 lea     edx, $LN5_1
.text:00005A8F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005A94                 pop     eax
.text:00005A95                 pop     edx
.text:00005A96                 add     esp, 14h
.text:00005A99                 cmp     ebp, esp
.text:00005A9B                 call    __RTC_CheckEsp
.text:00005AA0                 mov     esp, ebp
.text:00005AA2                 pop     ebp
.text:00005AA3                 retn    0Ch
.text:00005AA3 ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z endp
.text:00005AA3
.text:00005AA3 ; ---------------------------------------------------------------------------
.text:00005AA6                 align 4
.text:00005AA8 $LN5_1          dd 1                    ; DATA XREF: CRecordVector<NArchive::N7z::CBond2>::Add(NArchive::N7z::CBond2)+65o
.text:00005AAC                 dd offset $LN4_0
.text:00005AB0 $LN4_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00005AACo
.text:00005AB8                 dd offset $LN3_0        ; "_$ArrayPad"
.text:00005ABC $LN3_0          db '_$ArrayPad',0       ; DATA XREF: .text:00005AB8o
.text:00005AC7                 align 4
.text:00005AC7 _text           ends
.text:00005AC7
.text:00005AC8 ; ===========================================================================
.text:00005AC8
.text:00005AC8 ; Segment type: Pure code
.text:00005AC8 ; Segment permissions: Read/Execute
.text:00005AC8 _text           segment para public 'CODE' use32
.text:00005AC8                 assume cs:_text
.text:00005AC8                 ;org 5AC8h
.text:00005AC8 ; COMDAT (pick any)
.text:00005AC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005AC8
.text:00005AC8 ; =============== S U B R O U T I N E =======================================
.text:00005AC8
.text:00005AC8 ; Attributes: bp-based frame
.text:00005AC8
.text:00005AC8 ; public: struct NArchive::N7z::CBond2 & __thiscall CRecordVector<struct NArchive::N7z::CBond2>::operator[](unsigned int)
.text:00005AC8                 public ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z
.text:00005AC8 ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z proc near
.text:00005AC8                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+149p
.text:00005AC8                                         ; NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+36Bp ...
.text:00005AC8
.text:00005AC8 var_4           = dword ptr -4
.text:00005AC8 arg_0           = dword ptr  8
.text:00005AC8
.text:00005AC8                 push    ebp
.text:00005AC9                 mov     ebp, esp
.text:00005ACB                 push    ecx
.text:00005ACC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AD3                 mov     [ebp+var_4], ecx
.text:00005AD6                 mov     eax, [ebp+arg_0]
.text:00005AD9                 imul    eax, 0Ch
.text:00005ADC                 mov     ecx, [ebp+var_4]
.text:00005ADF                 add     eax, [ecx]
.text:00005AE1                 mov     esp, ebp
.text:00005AE3                 pop     ebp
.text:00005AE4                 retn    4
.text:00005AE4 ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z endp
.text:00005AE4
.text:00005AE4 ; ---------------------------------------------------------------------------
.text:00005AE7                 align 4
.text:00005AE7 _text           ends
.text:00005AE7
.text:00005AE8 ; ===========================================================================
.text:00005AE8
.text:00005AE8 ; Segment type: Pure code
.text:00005AE8 ; Segment permissions: Read/Execute
.text:00005AE8 _text           segment para public 'CODE' use32
.text:00005AE8                 assume cs:_text
.text:00005AE8                 ;org 5AE8h
.text:00005AE8 ; COMDAT (pick any)
.text:00005AE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005AE8
.text:00005AE8 ; =============== S U B R O U T I N E =======================================
.text:00005AE8
.text:00005AE8 ; Attributes: bp-based frame
.text:00005AE8
.text:00005AE8 ; public: __thiscall CRecordVector<bool>::CRecordVector<bool>(void)
.text:00005AE8                 public ??0?$CRecordVector@_N@@QAE@XZ
.text:00005AE8 ??0?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(void)+D5p
.text:00005AE8                                         ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)+30p ...
.text:00005AE8
.text:00005AE8 var_4           = dword ptr -4
.text:00005AE8
.text:00005AE8                 push    ebp
.text:00005AE9                 mov     ebp, esp
.text:00005AEB                 push    ecx
.text:00005AEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AF3                 mov     [ebp+var_4], ecx
.text:00005AF6                 mov     eax, [ebp+var_4]
.text:00005AF9                 mov     dword ptr [eax], 0
.text:00005AFF                 mov     ecx, [ebp+var_4]
.text:00005B02                 mov     dword ptr [ecx+4], 0
.text:00005B09                 mov     edx, [ebp+var_4]
.text:00005B0C                 mov     dword ptr [edx+8], 0
.text:00005B13                 mov     eax, [ebp+var_4]
.text:00005B16                 mov     esp, ebp
.text:00005B18                 pop     ebp
.text:00005B19                 retn
.text:00005B19 ??0?$CRecordVector@_N@@QAE@XZ endp
.text:00005B19
.text:00005B19 ; ---------------------------------------------------------------------------
.text:00005B1A                 align 4
.text:00005B1A _text           ends
.text:00005B1A
.text:00005B1C ; ===========================================================================
.text:00005B1C
.text:00005B1C ; Segment type: Pure code
.text:00005B1C ; Segment permissions: Read/Execute
.text:00005B1C _text           segment para public 'CODE' use32
.text:00005B1C                 assume cs:_text
.text:00005B1C                 ;org 5B1Ch
.text:00005B1C ; COMDAT (pick any)
.text:00005B1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B1C
.text:00005B1C ; =============== S U B R O U T I N E =======================================
.text:00005B1C
.text:00005B1C ; Attributes: bp-based frame
.text:00005B1C
.text:00005B1C ; public: unsigned int __thiscall CRecordVector<bool>::Size(void)const
.text:00005B1C                 public ?Size@?$CRecordVector@_N@@QBEIXZ
.text:00005B1C ?Size@?$CRecordVector@_N@@QBEIXZ proc near
.text:00005B1C                                         ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+11p
.text:00005B1C                                         ; NArchive::N7z::CDatabase::IsItemAnti(uint)+20p
.text:00005B1C
.text:00005B1C var_4           = dword ptr -4
.text:00005B1C
.text:00005B1C                 push    ebp
.text:00005B1D                 mov     ebp, esp
.text:00005B1F                 push    ecx
.text:00005B20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B27                 mov     [ebp+var_4], ecx
.text:00005B2A                 mov     eax, [ebp+var_4]
.text:00005B2D                 mov     eax, [eax+4]
.text:00005B30                 mov     esp, ebp
.text:00005B32                 pop     ebp
.text:00005B33                 retn
.text:00005B33 ?Size@?$CRecordVector@_N@@QBEIXZ endp
.text:00005B33
.text:00005B33 _text           ends
.text:00005B33
.text:00005B34 ; ===========================================================================
.text:00005B34
.text:00005B34 ; Segment type: Pure code
.text:00005B34 ; Segment permissions: Read/Execute
.text:00005B34 _text           segment para public 'CODE' use32
.text:00005B34                 assume cs:_text
.text:00005B34                 ;org 5B34h
.text:00005B34 ; COMDAT (pick any)
.text:00005B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B34
.text:00005B34 ; =============== S U B R O U T I N E =======================================
.text:00005B34
.text:00005B34 ; Attributes: bp-based frame
.text:00005B34
.text:00005B34 ; public: bool __thiscall CRecordVector<bool>::IsEmpty(void)const
.text:00005B34                 public ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ
.text:00005B34 ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ proc near
.text:00005B34                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+14Bp
.text:00005B34                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+178p ...
.text:00005B34
.text:00005B34 var_4           = dword ptr -4
.text:00005B34
.text:00005B34                 push    ebp
.text:00005B35                 mov     ebp, esp
.text:00005B37                 push    ecx
.text:00005B38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B3F                 mov     [ebp+var_4], ecx
.text:00005B42                 mov     eax, [ebp+var_4]
.text:00005B45                 xor     ecx, ecx
.text:00005B47                 cmp     dword ptr [eax+4], 0
.text:00005B4B                 setz    cl
.text:00005B4E                 mov     al, cl
.text:00005B50                 mov     esp, ebp
.text:00005B52                 pop     ebp
.text:00005B53                 retn
.text:00005B53 ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ endp
.text:00005B53
.text:00005B53 _text           ends
.text:00005B53
.text:00005B54 ; ===========================================================================
.text:00005B54
.text:00005B54 ; Segment type: Pure code
.text:00005B54 ; Segment permissions: Read/Execute
.text:00005B54 _text           segment para public 'CODE' use32
.text:00005B54                 assume cs:_text
.text:00005B54                 ;org 5B54h
.text:00005B54 ; COMDAT (pick any)
.text:00005B54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B54
.text:00005B54 ; =============== S U B R O U T I N E =======================================
.text:00005B54
.text:00005B54 ; Attributes: bp-based frame
.text:00005B54
.text:00005B54 ; public: __thiscall CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00005B54                 public ??1?$CRecordVector@_N@@QAE@XZ
.text:00005B54 ??1?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)+49p
.text:00005B54                                         ; __unwindfunclet$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ$0+3j ...
.text:00005B54
.text:00005B54 var_8           = dword ptr -8
.text:00005B54 var_4           = dword ptr -4
.text:00005B54
.text:00005B54                 push    ebp
.text:00005B55                 mov     ebp, esp
.text:00005B57                 sub     esp, 8
.text:00005B5A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005B61                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B68                 mov     [ebp+var_4], ecx
.text:00005B6B                 mov     eax, [ebp+var_4]
.text:00005B6E                 mov     ecx, [eax]
.text:00005B70                 mov     [ebp+var_8], ecx
.text:00005B73                 mov     edx, [ebp+var_8]
.text:00005B76                 push    edx             ; void *
.text:00005B77                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005B7C                 add     esp, 4
.text:00005B7F                 add     esp, 8
.text:00005B82                 cmp     ebp, esp
.text:00005B84                 call    __RTC_CheckEsp
.text:00005B89                 mov     esp, ebp
.text:00005B8B                 pop     ebp
.text:00005B8C                 retn
.text:00005B8C ??1?$CRecordVector@_N@@QAE@XZ endp
.text:00005B8C
.text:00005B8C ; ---------------------------------------------------------------------------
.text:00005B8D                 align 10h
.text:00005B8D _text           ends
.text:00005B8D
.text:00005B90 ; ===========================================================================
.text:00005B90
.text:00005B90 ; Segment type: Pure code
.text:00005B90 ; Segment permissions: Read/Execute
.text:00005B90 _text           segment para public 'CODE' use32
.text:00005B90                 assume cs:_text
.text:00005B90                 ;org 5B90h
.text:00005B90 ; COMDAT (pick any)
.text:00005B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B90
.text:00005B90 ; =============== S U B R O U T I N E =======================================
.text:00005B90
.text:00005B90 ; Attributes: bp-based frame
.text:00005B90
.text:00005B90 ; public: bool const & __thiscall CRecordVector<bool>::operator[](unsigned int)const
.text:00005B90                 public ??A?$CRecordVector@_N@@QBEAB_NI@Z
.text:00005B90 ??A?$CRecordVector@_N@@QBEAB_NI@Z proc near
.text:00005B90                                         ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+22p
.text:00005B90                                         ; NArchive::N7z::CDatabase::IsItemAnti(uint)+37p
.text:00005B90
.text:00005B90 var_4           = dword ptr -4
.text:00005B90 arg_0           = dword ptr  8
.text:00005B90
.text:00005B90                 push    ebp
.text:00005B91                 mov     ebp, esp
.text:00005B93                 push    ecx
.text:00005B94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B9B                 mov     [ebp+var_4], ecx
.text:00005B9E                 mov     eax, [ebp+var_4]
.text:00005BA1                 mov     eax, [eax]
.text:00005BA3                 add     eax, [ebp+arg_0]
.text:00005BA6                 mov     esp, ebp
.text:00005BA8                 pop     ebp
.text:00005BA9                 retn    4
.text:00005BA9 ??A?$CRecordVector@_N@@QBEAB_NI@Z endp
.text:00005BA9
.text:00005BA9 _text           ends
.text:00005BA9
.text:00005BAC ; ===========================================================================
.text:00005BAC
.text:00005BAC ; Segment type: Pure code
.text:00005BAC ; Segment permissions: Read/Execute
.text:00005BAC _text           segment para public 'CODE' use32
.text:00005BAC                 assume cs:_text
.text:00005BAC                 ;org 5BACh
.text:00005BAC ; COMDAT (pick any)
.text:00005BAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005BAC
.text:00005BAC ; =============== S U B R O U T I N E =======================================
.text:00005BAC
.text:00005BAC ; Attributes: bp-based frame
.text:00005BAC
.text:00005BAC ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:00005BAC                 public ??0?$CRecordVector@I@@QAE@XZ
.text:00005BAC ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::COutFolders::COutFolders(void)+42p
.text:00005BAC                                         ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)+42p
.text:00005BAC
.text:00005BAC var_4           = dword ptr -4
.text:00005BAC
.text:00005BAC                 push    ebp
.text:00005BAD                 mov     ebp, esp
.text:00005BAF                 push    ecx
.text:00005BB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BB7                 mov     [ebp+var_4], ecx
.text:00005BBA                 mov     eax, [ebp+var_4]
.text:00005BBD                 mov     dword ptr [eax], 0
.text:00005BC3                 mov     ecx, [ebp+var_4]
.text:00005BC6                 mov     dword ptr [ecx+4], 0
.text:00005BCD                 mov     edx, [ebp+var_4]
.text:00005BD0                 mov     dword ptr [edx+8], 0
.text:00005BD7                 mov     eax, [ebp+var_4]
.text:00005BDA                 mov     esp, ebp
.text:00005BDC                 pop     ebp
.text:00005BDD                 retn
.text:00005BDD ??0?$CRecordVector@I@@QAE@XZ endp
.text:00005BDD
.text:00005BDD ; ---------------------------------------------------------------------------
.text:00005BDE                 align 10h
.text:00005BDE _text           ends
.text:00005BDE
.text:00005BE0 ; ===========================================================================
.text:00005BE0
.text:00005BE0 ; Segment type: Pure code
.text:00005BE0 ; Segment permissions: Read/Execute
.text:00005BE0 _text           segment para public 'CODE' use32
.text:00005BE0                 assume cs:_text
.text:00005BE0                 ;org 5BE0h
.text:00005BE0 ; COMDAT (pick any)
.text:00005BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005BE0
.text:00005BE0 ; =============== S U B R O U T I N E =======================================
.text:00005BE0
.text:00005BE0 ; Attributes: bp-based frame
.text:00005BE0
.text:00005BE0 ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:00005BE0                 public ??1?$CRecordVector@I@@QAE@XZ
.text:00005BE0 ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)+3Ap
.text:00005BE0                                         ; __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1+6j ...
.text:00005BE0
.text:00005BE0 var_8           = dword ptr -8
.text:00005BE0 var_4           = dword ptr -4
.text:00005BE0
.text:00005BE0                 push    ebp
.text:00005BE1                 mov     ebp, esp
.text:00005BE3                 sub     esp, 8
.text:00005BE6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005BED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BF4                 mov     [ebp+var_4], ecx
.text:00005BF7                 mov     eax, [ebp+var_4]
.text:00005BFA                 mov     ecx, [eax]
.text:00005BFC                 mov     [ebp+var_8], ecx
.text:00005BFF                 mov     edx, [ebp+var_8]
.text:00005C02                 push    edx             ; void *
.text:00005C03                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005C08                 add     esp, 4
.text:00005C0B                 add     esp, 8
.text:00005C0E                 cmp     ebp, esp
.text:00005C10                 call    __RTC_CheckEsp
.text:00005C15                 mov     esp, ebp
.text:00005C17                 pop     ebp
.text:00005C18                 retn
.text:00005C18 ??1?$CRecordVector@I@@QAE@XZ endp
.text:00005C18
.text:00005C18 ; ---------------------------------------------------------------------------
.text:00005C19                 align 4
.text:00005C19 _text           ends
.text:00005C19
.text:00005C1C ; ===========================================================================
.text:00005C1C
.text:00005C1C ; Segment type: Pure code
.text:00005C1C ; Segment permissions: Read/Execute
.text:00005C1C _text           segment para public 'CODE' use32
.text:00005C1C                 assume cs:_text
.text:00005C1C                 ;org 5C1Ch
.text:00005C1C ; COMDAT (pick any)
.text:00005C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C1C
.text:00005C1C ; =============== S U B R O U T I N E =======================================
.text:00005C1C
.text:00005C1C ; Attributes: bp-based frame
.text:00005C1C
.text:00005C1C ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00005C1C                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:00005C1C ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(void)+42p
.text:00005C1C                                         ; NArchive::N7z::COutFolders::COutFolders(void)+51p ...
.text:00005C1C
.text:00005C1C var_4           = dword ptr -4
.text:00005C1C
.text:00005C1C                 push    ebp
.text:00005C1D                 mov     ebp, esp
.text:00005C1F                 push    ecx
.text:00005C20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C27                 mov     [ebp+var_4], ecx
.text:00005C2A                 mov     eax, [ebp+var_4]
.text:00005C2D                 mov     dword ptr [eax], 0
.text:00005C33                 mov     ecx, [ebp+var_4]
.text:00005C36                 mov     dword ptr [ecx+4], 0
.text:00005C3D                 mov     edx, [ebp+var_4]
.text:00005C40                 mov     dword ptr [edx+8], 0
.text:00005C47                 mov     eax, [ebp+var_4]
.text:00005C4A                 mov     esp, ebp
.text:00005C4C                 pop     ebp
.text:00005C4D                 retn
.text:00005C4D ??0?$CRecordVector@_K@@QAE@XZ endp
.text:00005C4D
.text:00005C4D ; ---------------------------------------------------------------------------
.text:00005C4E                 align 10h
.text:00005C4E _text           ends
.text:00005C4E
.text:00005C50 ; ===========================================================================
.text:00005C50
.text:00005C50 ; Segment type: Pure code
.text:00005C50 ; Segment permissions: Read/Execute
.text:00005C50 _text           segment para public 'CODE' use32
.text:00005C50                 assume cs:_text
.text:00005C50                 ;org 5C50h
.text:00005C50 ; COMDAT (pick any)
.text:00005C50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C50
.text:00005C50 ; =============== S U B R O U T I N E =======================================
.text:00005C50
.text:00005C50 ; Attributes: bp-based frame
.text:00005C50
.text:00005C50 ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00005C50                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:00005C50 ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$1+6j
.text:00005C50                                         ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)+3Ap ...
.text:00005C50
.text:00005C50 var_8           = dword ptr -8
.text:00005C50 var_4           = dword ptr -4
.text:00005C50
.text:00005C50                 push    ebp
.text:00005C51                 mov     ebp, esp
.text:00005C53                 sub     esp, 8
.text:00005C56                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005C5D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C64                 mov     [ebp+var_4], ecx
.text:00005C67                 mov     eax, [ebp+var_4]
.text:00005C6A                 mov     ecx, [eax]
.text:00005C6C                 mov     [ebp+var_8], ecx
.text:00005C6F                 mov     edx, [ebp+var_8]
.text:00005C72                 push    edx             ; void *
.text:00005C73                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005C78                 add     esp, 4
.text:00005C7B                 add     esp, 8
.text:00005C7E                 cmp     ebp, esp
.text:00005C80                 call    __RTC_CheckEsp
.text:00005C85                 mov     esp, ebp
.text:00005C87                 pop     ebp
.text:00005C88                 retn
.text:00005C88 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00005C88
.text:00005C88 ; ---------------------------------------------------------------------------
.text:00005C89                 align 4
.text:00005C89 _text           ends
.text:00005C89
.text:00005C8C ; ===========================================================================
.text:00005C8C
.text:00005C8C ; Segment type: Pure code
.text:00005C8C ; Segment permissions: Read/Execute
.text:00005C8C _text           segment para public 'CODE' use32
.text:00005C8C                 assume cs:_text
.text:00005C8C                 ;org 5C8Ch
.text:00005C8C ; COMDAT (pick any)
.text:00005C8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C8C
.text:00005C8C ; =============== S U B R O U T I N E =======================================
.text:00005C8C
.text:00005C8C ; Attributes: bp-based frame
.text:00005C8C
.text:00005C8C ; public: unsigned __int64 const & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)const
.text:00005C8C                 public ??A?$CRecordVector@_K@@QBEAB_KI@Z
.text:00005C8C ??A?$CRecordVector@_K@@QBEAB_KI@Z proc near
.text:00005C8C                                         ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+38p
.text:00005C8C
.text:00005C8C var_4           = dword ptr -4
.text:00005C8C arg_0           = dword ptr  8
.text:00005C8C
.text:00005C8C                 push    ebp
.text:00005C8D                 mov     ebp, esp
.text:00005C8F                 push    ecx
.text:00005C90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C97                 mov     [ebp+var_4], ecx
.text:00005C9A                 mov     eax, [ebp+var_4]
.text:00005C9D                 mov     ecx, [eax]
.text:00005C9F                 mov     edx, [ebp+arg_0]
.text:00005CA2                 lea     eax, [ecx+edx*8]
.text:00005CA5                 mov     esp, ebp
.text:00005CA7                 pop     ebp
.text:00005CA8                 retn    4
.text:00005CA8 ??A?$CRecordVector@_K@@QBEAB_KI@Z endp
.text:00005CA8
.text:00005CA8 ; ---------------------------------------------------------------------------
.text:00005CAB                 align 4
.text:00005CAB _text           ends
.text:00005CAB
.text:00005CAC ; ===========================================================================
.text:00005CAC
.text:00005CAC ; Segment type: Pure code
.text:00005CAC ; Segment permissions: Read/Execute
.text:00005CAC _text           segment para public 'CODE' use32
.text:00005CAC                 assume cs:_text
.text:00005CAC                 ;org 5CACh
.text:00005CAC ; COMDAT (pick any)
.text:00005CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005CAC
.text:00005CAC ; =============== S U B R O U T I N E =======================================
.text:00005CAC
.text:00005CAC ; Attributes: bp-based frame
.text:00005CAC
.text:00005CAC ; public: __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::CRecordVector<struct NArchive::N7z::CFileItem>(void)
.text:00005CAC                 public ??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ
.text:00005CAC ??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ proc near
.text:00005CAC                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(void)+6Fp
.text:00005CAC
.text:00005CAC var_4           = dword ptr -4
.text:00005CAC
.text:00005CAC                 push    ebp
.text:00005CAD                 mov     ebp, esp
.text:00005CAF                 push    ecx
.text:00005CB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CB7                 mov     [ebp+var_4], ecx
.text:00005CBA                 mov     eax, [ebp+var_4]
.text:00005CBD                 mov     dword ptr [eax], 0
.text:00005CC3                 mov     ecx, [ebp+var_4]
.text:00005CC6                 mov     dword ptr [ecx+4], 0
.text:00005CCD                 mov     edx, [ebp+var_4]
.text:00005CD0                 mov     dword ptr [edx+8], 0
.text:00005CD7                 mov     eax, [ebp+var_4]
.text:00005CDA                 mov     esp, ebp
.text:00005CDC                 pop     ebp
.text:00005CDD                 retn
.text:00005CDD ??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ endp
.text:00005CDD
.text:00005CDD ; ---------------------------------------------------------------------------
.text:00005CDE                 align 10h
.text:00005CDE _text           ends
.text:00005CDE
.text:00005CE0 ; ===========================================================================
.text:00005CE0
.text:00005CE0 ; Segment type: Pure code
.text:00005CE0 ; Segment permissions: Read/Execute
.text:00005CE0 _text           segment para public 'CODE' use32
.text:00005CE0                 assume cs:_text
.text:00005CE0                 ;org 5CE0h
.text:00005CE0 ; COMDAT (pick any)
.text:00005CE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005CE0
.text:00005CE0 ; =============== S U B R O U T I N E =======================================
.text:00005CE0
.text:00005CE0 ; Attributes: bp-based frame
.text:00005CE0
.text:00005CE0 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::Size(void)const
.text:00005CE0                 public ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ
.text:00005CE0 ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ proc near
.text:00005CE0                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+32Cp
.text:00005CE0
.text:00005CE0 var_4           = dword ptr -4
.text:00005CE0
.text:00005CE0                 push    ebp
.text:00005CE1                 mov     ebp, esp
.text:00005CE3                 push    ecx
.text:00005CE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CEB                 mov     [ebp+var_4], ecx
.text:00005CEE                 mov     eax, [ebp+var_4]
.text:00005CF1                 mov     eax, [eax+4]
.text:00005CF4                 mov     esp, ebp
.text:00005CF6                 pop     ebp
.text:00005CF7                 retn
.text:00005CF7 ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ endp
.text:00005CF7
.text:00005CF7 _text           ends
.text:00005CF7
.text:00005CF8 ; ===========================================================================
.text:00005CF8
.text:00005CF8 ; Segment type: Pure code
.text:00005CF8 ; Segment permissions: Read/Execute
.text:00005CF8 _text           segment para public 'CODE' use32
.text:00005CF8                 assume cs:_text
.text:00005CF8                 ;org 5CF8h
.text:00005CF8 ; COMDAT (pick any)
.text:00005CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005CF8
.text:00005CF8 ; =============== S U B R O U T I N E =======================================
.text:00005CF8
.text:00005CF8 ; Attributes: bp-based frame
.text:00005CF8
.text:00005CF8 ; public: __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::~CRecordVector<struct NArchive::N7z::CFileItem>(void)
.text:00005CF8                 public ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ
.text:00005CF8 ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ proc near
.text:00005CF8                                         ; CODE XREF: __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$4+6j
.text:00005CF8                                         ; NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut(void)+A0p ...
.text:00005CF8
.text:00005CF8 var_8           = dword ptr -8
.text:00005CF8 var_4           = dword ptr -4
.text:00005CF8
.text:00005CF8                 push    ebp
.text:00005CF9                 mov     ebp, esp
.text:00005CFB                 sub     esp, 8
.text:00005CFE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005D05                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D0C                 mov     [ebp+var_4], ecx
.text:00005D0F                 mov     eax, [ebp+var_4]
.text:00005D12                 mov     ecx, [eax]
.text:00005D14                 mov     [ebp+var_8], ecx
.text:00005D17                 mov     edx, [ebp+var_8]
.text:00005D1A                 push    edx             ; void *
.text:00005D1B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005D20                 add     esp, 4
.text:00005D23                 add     esp, 8
.text:00005D26                 cmp     ebp, esp
.text:00005D28                 call    __RTC_CheckEsp
.text:00005D2D                 mov     esp, ebp
.text:00005D2F                 pop     ebp
.text:00005D30                 retn
.text:00005D30 ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ endp
.text:00005D30
.text:00005D30 ; ---------------------------------------------------------------------------
.text:00005D31                 align 4
.text:00005D31 _text           ends
.text:00005D31
.text:00005D34 ; ===========================================================================
.text:00005D34
.text:00005D34 ; Segment type: Pure code
.text:00005D34 ; Segment permissions: Read/Execute
.text:00005D34 _text           segment para public 'CODE' use32
.text:00005D34                 assume cs:_text
.text:00005D34                 ;org 5D34h
.text:00005D34 ; COMDAT (pick any)
.text:00005D34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D34
.text:00005D34 ; =============== S U B R O U T I N E =======================================
.text:00005D34
.text:00005D34 ; Attributes: bp-based frame
.text:00005D34
.text:00005D34 ; public: struct NArchive::N7z::CFileItem const & __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::operator[](unsigned int)const
.text:00005D34                 public ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z
.text:00005D34 ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z proc near
.text:00005D34                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+39Dp
.text:00005D34
.text:00005D34 var_4           = dword ptr -4
.text:00005D34 arg_0           = dword ptr  8
.text:00005D34
.text:00005D34                 push    ebp
.text:00005D35                 mov     ebp, esp
.text:00005D37                 push    ecx
.text:00005D38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D3F                 mov     [ebp+var_4], ecx
.text:00005D42                 mov     eax, [ebp+arg_0]
.text:00005D45                 imul    eax, 18h
.text:00005D48                 mov     ecx, [ebp+var_4]
.text:00005D4B                 add     eax, [ecx]
.text:00005D4D                 mov     esp, ebp
.text:00005D4F                 pop     ebp
.text:00005D50                 retn    4
.text:00005D50 ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z endp
.text:00005D50
.text:00005D50 ; ---------------------------------------------------------------------------
.text:00005D53                 align 4
.text:00005D53 _text           ends
.text:00005D53
.text:00005D54 ; ===========================================================================
.text:00005D54
.text:00005D54 ; Segment type: Pure code
.text:00005D54 ; Segment permissions: Read/Execute
.text:00005D54 _text           segment para public 'CODE' use32
.text:00005D54                 assume cs:_text
.text:00005D54                 ;org 5D54h
.text:00005D54 ; COMDAT (pick any)
.text:00005D54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D54
.text:00005D54 ; =============== S U B R O U T I N E =======================================
.text:00005D54
.text:00005D54 ; Attributes: bp-based frame
.text:00005D54
.text:00005D54 ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:00005D54                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00005D54 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00005D54                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+55p
.text:00005D54                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+13DCp
.text:00005D54
.text:00005D54 var_4           = dword ptr -4
.text:00005D54
.text:00005D54                 push    ebp
.text:00005D55                 mov     ebp, esp
.text:00005D57                 push    ecx
.text:00005D58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D5F                 mov     [ebp+var_4], ecx
.text:00005D62                 mov     eax, [ebp+var_4]
.text:00005D65                 mov     eax, [eax]
.text:00005D67                 mov     esp, ebp
.text:00005D69                 pop     ebp
.text:00005D6A                 retn
.text:00005D6A ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00005D6A
.text:00005D6A ; ---------------------------------------------------------------------------
.text:00005D6B                 align 4
.text:00005D6B _text           ends
.text:00005D6B
.text:00005D6C ; ===========================================================================
.text:00005D6C
.text:00005D6C ; Segment type: Pure code
.text:00005D6C ; Segment permissions: Read/Execute
.text:00005D6C _text           segment para public 'CODE' use32
.text:00005D6C                 assume cs:_text
.text:00005D6C                 ;org 5D6Ch
.text:00005D6C ; COMDAT (pick any)
.text:00005D6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D6C
.text:00005D6C ; =============== S U B R O U T I N E =======================================
.text:00005D6C
.text:00005D6C ; Attributes: bp-based frame
.text:00005D6C
.text:00005D6C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:00005D6C                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00005D6C ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00005D6C                                         ; CODE XREF: NArchive::N7z::COutArchive::COutArchive(void)+5Fp
.text:00005D6C
.text:00005D6C var_4           = dword ptr -4
.text:00005D6C
.text:00005D6C                 push    ebp
.text:00005D6D                 mov     ebp, esp
.text:00005D6F                 push    ecx
.text:00005D70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D77                 mov     [ebp+var_4], ecx
.text:00005D7A                 mov     eax, [ebp+var_4]
.text:00005D7D                 mov     dword ptr [eax], 0
.text:00005D83                 mov     eax, [ebp+var_4]
.text:00005D86                 mov     esp, ebp
.text:00005D88                 pop     ebp
.text:00005D89                 retn
.text:00005D89 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00005D89
.text:00005D89 ; ---------------------------------------------------------------------------
.text:00005D8A                 align 4
.text:00005D8A _text           ends
.text:00005D8A
.text:00005D8C ; ===========================================================================
.text:00005D8C
.text:00005D8C ; Segment type: Pure code
.text:00005D8C ; Segment permissions: Read/Execute
.text:00005D8C _text           segment para public 'CODE' use32
.text:00005D8C                 assume cs:_text
.text:00005D8C                 ;org 5D8Ch
.text:00005D8C ; COMDAT (pick any)
.text:00005D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D8C
.text:00005D8C ; =============== S U B R O U T I N E =======================================
.text:00005D8C
.text:00005D8C ; Attributes: bp-based frame
.text:00005D8C
.text:00005D8C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:00005D8C                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00005D8C ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00005D8C                                         ; CODE XREF: NArchive::N7z::COutArchive::~COutArchive(void)+3Ap
.text:00005D8C
.text:00005D8C var_4           = dword ptr -4
.text:00005D8C
.text:00005D8C                 push    ebp
.text:00005D8D                 mov     ebp, esp
.text:00005D8F                 push    ecx
.text:00005D90                 push    esi
.text:00005D91                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D98                 mov     [ebp+var_4], ecx
.text:00005D9B                 mov     eax, [ebp+var_4]
.text:00005D9E                 cmp     dword ptr [eax], 0
.text:00005DA1                 jz      short loc_5DBE
.text:00005DA3                 mov     ecx, [ebp+var_4]
.text:00005DA6                 mov     edx, [ecx]
.text:00005DA8                 mov     eax, [ebp+var_4]
.text:00005DAB                 mov     ecx, [eax]
.text:00005DAD                 mov     edx, [edx]
.text:00005DAF                 mov     esi, esp
.text:00005DB1                 push    ecx
.text:00005DB2                 mov     eax, [edx+8]
.text:00005DB5                 call    eax
.text:00005DB7                 cmp     esi, esp
.text:00005DB9                 call    __RTC_CheckEsp
.text:00005DBE
.text:00005DBE loc_5DBE:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:00005DBE                 pop     esi
.text:00005DBF                 add     esp, 4
.text:00005DC2                 cmp     ebp, esp
.text:00005DC4                 call    __RTC_CheckEsp
.text:00005DC9                 mov     esp, ebp
.text:00005DCB                 pop     ebp
.text:00005DCC                 retn
.text:00005DCC ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00005DCC
.text:00005DCC ; ---------------------------------------------------------------------------
.text:00005DCD                 align 10h
.text:00005DCD _text           ends
.text:00005DCD
.text:00005DD0 ; ===========================================================================
.text:00005DD0
.text:00005DD0 ; Segment type: Pure code
.text:00005DD0 ; Segment permissions: Read/Execute
.text:00005DD0 _text           segment para public 'CODE' use32
.text:00005DD0                 assume cs:_text
.text:00005DD0                 ;org 5DD0h
.text:00005DD0 ; COMDAT (pick any)
.text:00005DD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005DD0
.text:00005DD0 ; =============== S U B R O U T I N E =======================================
.text:00005DD0
.text:00005DD0 ; Attributes: bp-based frame
.text:00005DD0
.text:00005DD0 ; public: __thiscall CObjectVector<struct NArchive::N7z::CFolder>::CObjectVector<struct NArchive::N7z::CFolder>(void)
.text:00005DD0                 public ??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
.text:00005DD0 ??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ proc near
.text:00005DD0                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut(void)+60p
.text:00005DD0
.text:00005DD0 var_4           = dword ptr -4
.text:00005DD0
.text:00005DD0                 push    ebp
.text:00005DD1                 mov     ebp, esp
.text:00005DD3                 push    ecx
.text:00005DD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005DDB                 mov     [ebp+var_4], ecx
.text:00005DDE                 mov     ecx, [ebp+var_4]
.text:00005DE1                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00005DE6                 mov     eax, [ebp+var_4]
.text:00005DE9                 add     esp, 4
.text:00005DEC                 cmp     ebp, esp
.text:00005DEE                 call    __RTC_CheckEsp
.text:00005DF3                 mov     esp, ebp
.text:00005DF5                 pop     ebp
.text:00005DF6                 retn
.text:00005DF6 ??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ endp
.text:00005DF6
.text:00005DF6 ; ---------------------------------------------------------------------------
.text:00005DF7                 align 4
.text:00005DF7 _text           ends
.text:00005DF7
.text:00005DF8 ; ===========================================================================
.text:00005DF8
.text:00005DF8 ; Segment type: Pure code
.text:00005DF8 ; Segment permissions: Read/Execute
.text:00005DF8 _text           segment para public 'CODE' use32
.text:00005DF8                 assume cs:_text
.text:00005DF8                 ;org 5DF8h
.text:00005DF8 ; COMDAT (pick any)
.text:00005DF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005DF8
.text:00005DF8 ; =============== S U B R O U T I N E =======================================
.text:00005DF8
.text:00005DF8 ; Attributes: bp-based frame
.text:00005DF8
.text:00005DF8 ; public: __thiscall CObjectVector<struct NArchive::N7z::CFolder>::~CObjectVector<struct NArchive::N7z::CFolder>(void)
.text:00005DF8                 public ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
.text:00005DF8 ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ proc near
.text:00005DF8                                         ; CODE XREF: __unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$3+6j
.text:00005DF8                                         ; NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut(void)+AFp ...
.text:00005DF8
.text:00005DF8 var_20          = dword ptr -20h
.text:00005DF8 var_1C          = dword ptr -1Ch
.text:00005DF8 var_18          = dword ptr -18h
.text:00005DF8 var_14          = dword ptr -14h
.text:00005DF8 var_10          = dword ptr -10h
.text:00005DF8 var_C           = dword ptr -0Ch
.text:00005DF8 var_4           = dword ptr -4
.text:00005DF8
.text:00005DF8                 push    ebp
.text:00005DF9                 mov     ebp, esp
.text:00005DFB                 push    0FFFFFFFFh
.text:00005DFD                 push    offset __ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
.text:00005E02                 mov     eax, large fs:0
.text:00005E08                 push    eax
.text:00005E09                 sub     esp, 14h
.text:00005E0C                 mov     eax, 0CCCCCCCCh
.text:00005E11                 mov     [ebp+var_20], eax
.text:00005E14                 mov     [ebp+var_1C], eax
.text:00005E17                 mov     [ebp+var_18], eax
.text:00005E1A                 mov     [ebp+var_14], eax
.text:00005E1D                 mov     [ebp+var_10], eax
.text:00005E20                 mov     eax, dword ptr ds:___security_cookie
.text:00005E25                 xor     eax, ebp
.text:00005E27                 push    eax
.text:00005E28                 lea     eax, [ebp+var_C]
.text:00005E2B                 mov     large fs:0, eax
.text:00005E31                 mov     [ebp+var_10], ecx
.text:00005E34                 mov     [ebp+var_4], 0
.text:00005E3B                 mov     ecx, [ebp+var_10]
.text:00005E3E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005E43                 mov     [ebp+var_14], eax
.text:00005E46
.text:00005E46 loc_5E46:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void):loc_5E88j
.text:00005E46                 cmp     [ebp+var_14], 0
.text:00005E4A                 jz      short loc_5E8A
.text:00005E4C                 mov     eax, [ebp+var_14]
.text:00005E4F                 sub     eax, 1
.text:00005E52                 mov     [ebp+var_14], eax
.text:00005E55                 mov     ecx, [ebp+var_14]
.text:00005E58                 push    ecx
.text:00005E59                 mov     ecx, [ebp+var_10]
.text:00005E5C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005E61                 mov     edx, [eax]
.text:00005E63                 mov     [ebp+var_1C], edx
.text:00005E66                 mov     eax, [ebp+var_1C]
.text:00005E69                 mov     [ebp+var_18], eax
.text:00005E6C                 cmp     [ebp+var_18], 0
.text:00005E70                 jz      short loc_5E81
.text:00005E72                 push    1
.text:00005E74                 mov     ecx, [ebp+var_18]
.text:00005E77                 call    ??_GCFolder@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CFolder::`scalar deleting destructor'(uint)
.text:00005E7C                 mov     [ebp+var_20], eax
.text:00005E7F                 jmp     short loc_5E88
.text:00005E81 ; ---------------------------------------------------------------------------
.text:00005E81
.text:00005E81 loc_5E81:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)+78j
.text:00005E81                 mov     [ebp+var_20], 0
.text:00005E88
.text:00005E88 loc_5E88:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)+87j
.text:00005E88                 jmp     short loc_5E46
.text:00005E8A ; ---------------------------------------------------------------------------
.text:00005E8A
.text:00005E8A loc_5E8A:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)+52j
.text:00005E8A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005E91                 mov     ecx, [ebp+var_10]
.text:00005E94                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00005E99                 mov     ecx, [ebp+var_C]
.text:00005E9C                 mov     large fs:0, ecx
.text:00005EA3                 pop     ecx
.text:00005EA4                 add     esp, 20h
.text:00005EA7                 cmp     ebp, esp
.text:00005EA9                 call    __RTC_CheckEsp
.text:00005EAE                 mov     esp, ebp
.text:00005EB0                 pop     ebp
.text:00005EB1                 retn
.text:00005EB1 ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ endp
.text:00005EB1
.text:00005EB1 ; ---------------------------------------------------------------------------
.text:00005EB2                 align 4
.text:00005EB2 _text           ends
.text:00005EB2
.text$x:00005EB4 ; ===========================================================================
.text$x:00005EB4
.text$x:00005EB4 ; Segment type: Pure code
.text$x:00005EB4 ; Segment permissions: Read/Execute
.text$x:00005EB4 _text$x         segment para public 'CODE' use32
.text$x:00005EB4                 assume cs:_text$x
.text$x:00005EB4                 ;org 5EB4h
.text$x:00005EB4 ; COMDAT (pick associative to section at 5DF8)
.text$x:00005EB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005EB4
.text$x:00005EB4 ; =============== S U B R O U T I N E =======================================
.text$x:00005EB4
.text$x:00005EB4
.text$x:00005EB4 __unwindfunclet$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ$0 proc near
.text$x:00005EB4                                         ; DATA XREF: .xdata$x:00005EDCo
.text$x:00005EB4                 mov     ecx, [ebp-10h]
.text$x:00005EB7                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00005EB7 __unwindfunclet$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ$0 endp
.text$x:00005EB7
.text$x:00005EBC
.text$x:00005EBC ; =============== S U B R O U T I N E =======================================
.text$x:00005EBC
.text$x:00005EBC
.text$x:00005EBC __ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ proc near
.text$x:00005EBC                                         ; DATA XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)+5o
.text$x:00005EBC
.text$x:00005EBC arg_4           = dword ptr  8
.text$x:00005EBC
.text$x:00005EBC                 mov     edx, [esp+arg_4]
.text$x:00005EC0                 lea     eax, [edx+0Ch]
.text$x:00005EC3                 mov     ecx, [edx-18h]
.text$x:00005EC6                 xor     ecx, eax
.text$x:00005EC8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005ECD                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
.text$x:00005ED2                 jmp     ___CxxFrameHandler3
.text$x:00005ED2 __ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ endp
.text$x:00005ED2
.text$x:00005ED2 ; ---------------------------------------------------------------------------
.text$x:00005ED7                 align 4
.text$x:00005ED7 _text$x         ends
.text$x:00005ED7
.xdata$x:00005ED8 ; ===========================================================================
.xdata$x:00005ED8
.xdata$x:00005ED8 ; Segment type: Pure data
.xdata$x:00005ED8 ; Segment permissions: Read
.xdata$x:00005ED8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005ED8                 assume cs:_xdata$x
.xdata$x:00005ED8                 ;org 5ED8h
.xdata$x:00005ED8 ; COMDAT (pick associative to section at 5DF8)
.xdata$x:00005ED8 __unwindtable$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00005ED8                                         ; DATA XREF: .xdata$x:00005EE8o
.xdata$x:00005ED9                 db 0FFh
.xdata$x:00005EDA                 db 0FFh
.xdata$x:00005EDB                 db 0FFh
.xdata$x:00005EDC                 dd offset __unwindfunclet$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ$0
.xdata$x:00005EE0 __ehfuncinfo$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00005EE0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ+11o
.xdata$x:00005EE1                 db    5
.xdata$x:00005EE2                 db  93h ; ô
.xdata$x:00005EE3                 db  19h
.xdata$x:00005EE4                 db    1
.xdata$x:00005EE5                 db    0
.xdata$x:00005EE6                 db    0
.xdata$x:00005EE7                 db    0
.xdata$x:00005EE8                 dd offset __unwindtable$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
.xdata$x:00005EEC                 align 20h
.xdata$x:00005F00                 db    1
.xdata$x:00005F01                 db    0
.xdata$x:00005F02                 db    0
.xdata$x:00005F03                 db    0
.xdata$x:00005F03 _xdata$x        ends
.xdata$x:00005F03
.text:00005F04 ; ===========================================================================
.text:00005F04
.text:00005F04 ; Segment type: Pure code
.text:00005F04 ; Segment permissions: Read/Execute
.text:00005F04 _text           segment para public 'CODE' use32
.text:00005F04                 assume cs:_text
.text:00005F04                 ;org 5F04h
.text:00005F04 ; COMDAT (pick any)
.text:00005F04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F04
.text:00005F04 ; =============== S U B R O U T I N E =======================================
.text:00005F04
.text:00005F04 ; Attributes: bp-based frame
.text:00005F04
.text:00005F04 ; public: __thiscall CMyComPtr<struct IOutStream>::CMyComPtr<struct IOutStream>(void)
.text:00005F04                 public ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ
.text:00005F04 ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ proc near
.text:00005F04                                         ; CODE XREF: NArchive::N7z::COutArchive::COutArchive(void)+50p
.text:00005F04
.text:00005F04 var_4           = dword ptr -4
.text:00005F04
.text:00005F04                 push    ebp
.text:00005F05                 mov     ebp, esp
.text:00005F07                 push    ecx
.text:00005F08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F0F                 mov     [ebp+var_4], ecx
.text:00005F12                 mov     eax, [ebp+var_4]
.text:00005F15                 mov     dword ptr [eax], 0
.text:00005F1B                 mov     eax, [ebp+var_4]
.text:00005F1E                 mov     esp, ebp
.text:00005F20                 pop     ebp
.text:00005F21                 retn
.text:00005F21 ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ endp
.text:00005F21
.text:00005F21 ; ---------------------------------------------------------------------------
.text:00005F22                 align 4
.text:00005F22 _text           ends
.text:00005F22
.text:00005F24 ; ===========================================================================
.text:00005F24
.text:00005F24 ; Segment type: Pure code
.text:00005F24 ; Segment permissions: Read/Execute
.text:00005F24 _text           segment para public 'CODE' use32
.text:00005F24                 assume cs:_text
.text:00005F24                 ;org 5F24h
.text:00005F24 ; COMDAT (pick any)
.text:00005F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F24
.text:00005F24 ; =============== S U B R O U T I N E =======================================
.text:00005F24
.text:00005F24 ; Attributes: bp-based frame
.text:00005F24
.text:00005F24 ; public: __thiscall CMyComPtr<struct IOutStream>::~CMyComPtr<struct IOutStream>(void)
.text:00005F24                 public ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ
.text:00005F24 ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ proc near
.text:00005F24                                         ; CODE XREF: __unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$1+6j
.text:00005F24                                         ; NArchive::N7z::COutArchive::~COutArchive(void)+49p ...
.text:00005F24
.text:00005F24 var_4           = dword ptr -4
.text:00005F24
.text:00005F24                 push    ebp
.text:00005F25                 mov     ebp, esp
.text:00005F27                 push    ecx
.text:00005F28                 push    esi
.text:00005F29                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F30                 mov     [ebp+var_4], ecx
.text:00005F33                 mov     eax, [ebp+var_4]
.text:00005F36                 cmp     dword ptr [eax], 0
.text:00005F39                 jz      short loc_5F56
.text:00005F3B                 mov     ecx, [ebp+var_4]
.text:00005F3E                 mov     edx, [ecx]
.text:00005F40                 mov     eax, [ebp+var_4]
.text:00005F43                 mov     ecx, [eax]
.text:00005F45                 mov     edx, [edx]
.text:00005F47                 mov     esi, esp
.text:00005F49                 push    ecx
.text:00005F4A                 mov     eax, [edx+8]
.text:00005F4D                 call    eax
.text:00005F4F                 cmp     esi, esp
.text:00005F51                 call    __RTC_CheckEsp
.text:00005F56
.text:00005F56 loc_5F56:                               ; CODE XREF: CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)+15j
.text:00005F56                 pop     esi
.text:00005F57                 add     esp, 4
.text:00005F5A                 cmp     ebp, esp
.text:00005F5C                 call    __RTC_CheckEsp
.text:00005F61                 mov     esp, ebp
.text:00005F63                 pop     ebp
.text:00005F64                 retn
.text:00005F64 ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ endp
.text:00005F64
.text:00005F64 ; ---------------------------------------------------------------------------
.text:00005F65                 align 4
.text:00005F65 _text           ends
.text:00005F65
.text:00005F68 ; ===========================================================================
.text:00005F68
.text:00005F68 ; Segment type: Pure code
.text:00005F68 ; Segment permissions: Read/Execute
.text:00005F68 _text           segment para public 'CODE' use32
.text:00005F68                 assume cs:_text
.text:00005F68                 ;org 5F68h
.text:00005F68 ; COMDAT (pick any)
.text:00005F68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F68
.text:00005F68 ; =============== S U B R O U T I N E =======================================
.text:00005F68
.text:00005F68 ; Attributes: bp-based frame
.text:00005F68
.text:00005F68 ; public: __thiscall CObjectVector<struct NArchive::N7z::CUpdateItem>::CObjectVector<struct NArchive::N7z::CUpdateItem>(void)
.text:00005F68                 public ??0?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ
.text:00005F68 ??0?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ proc near
.text:00005F68                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+77p
.text:00005F68
.text:00005F68 var_4           = dword ptr -4
.text:00005F68
.text:00005F68                 push    ebp
.text:00005F69                 mov     ebp, esp
.text:00005F6B                 push    ecx
.text:00005F6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F73                 mov     [ebp+var_4], ecx
.text:00005F76                 mov     ecx, [ebp+var_4]
.text:00005F79                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00005F7E                 mov     eax, [ebp+var_4]
.text:00005F81                 add     esp, 4
.text:00005F84                 cmp     ebp, esp
.text:00005F86                 call    __RTC_CheckEsp
.text:00005F8B                 mov     esp, ebp
.text:00005F8D                 pop     ebp
.text:00005F8E                 retn
.text:00005F8E ??0?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ endp
.text:00005F8E
.text:00005F8E ; ---------------------------------------------------------------------------
.text:00005F8F                 align 10h
.text:00005F8F _text           ends
.text:00005F8F
.text:00005F90 ; ===========================================================================
.text:00005F90
.text:00005F90 ; Segment type: Pure code
.text:00005F90 ; Segment permissions: Read/Execute
.text:00005F90 _text           segment para public 'CODE' use32
.text:00005F90                 assume cs:_text
.text:00005F90                 ;org 5F90h
.text:00005F90 ; COMDAT (pick any)
.text:00005F90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F90
.text:00005F90 ; =============== S U B R O U T I N E =======================================
.text:00005F90
.text:00005F90 ; Attributes: bp-based frame
.text:00005F90
.text:00005F90 ; int __stdcall CObjectVector<NArchive::N7z::CUpdateItem>::Add(struct NArchive::N7z::CUpdateItem *)
.text:00005F90                 public ?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z
.text:00005F90 ?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z proc near
.text:00005F90                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+DFCp
.text:00005F90
.text:00005F90 var_1C          = dword ptr -1Ch
.text:00005F90 var_18          = dword ptr -18h
.text:00005F90 var_14          = dword ptr -14h
.text:00005F90 var_10          = dword ptr -10h
.text:00005F90 var_C           = dword ptr -0Ch
.text:00005F90 var_4           = dword ptr -4
.text:00005F90 arg_0           = dword ptr  8
.text:00005F90
.text:00005F90                 push    ebp
.text:00005F91                 mov     ebp, esp
.text:00005F93                 push    0FFFFFFFFh
.text:00005F95                 push    offset __ehhandler$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z
.text:00005F9A                 mov     eax, large fs:0
.text:00005FA0                 push    eax
.text:00005FA1                 sub     esp, 10h
.text:00005FA4                 mov     eax, 0CCCCCCCCh
.text:00005FA9                 mov     [ebp+var_1C], eax
.text:00005FAC                 mov     [ebp+var_18], eax
.text:00005FAF                 mov     [ebp+var_14], eax
.text:00005FB2                 mov     [ebp+var_10], eax
.text:00005FB5                 mov     eax, dword ptr ds:___security_cookie
.text:00005FBA                 xor     eax, ebp
.text:00005FBC                 push    eax
.text:00005FBD                 lea     eax, [ebp+var_C]
.text:00005FC0                 mov     large fs:0, eax
.text:00005FC6                 mov     [ebp+var_10], ecx
.text:00005FC9                 push    40h ; '@'       ; unsigned int
.text:00005FCB                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005FD0                 add     esp, 4
.text:00005FD3                 mov     [ebp+var_18], eax
.text:00005FD6                 mov     [ebp+var_4], 0
.text:00005FDD                 cmp     [ebp+var_18], 0
.text:00005FE1                 jz      short loc_5FF4
.text:00005FE3                 mov     eax, [ebp+arg_0]
.text:00005FE6                 push    eax             ; struct NArchive::N7z::CUpdateItem *
.text:00005FE7                 mov     ecx, [ebp+var_18] ; this
.text:00005FEA                 call    ??0CUpdateItem@N7z@NArchive@@QAE@ABU012@@Z ; NArchive::N7z::CUpdateItem::CUpdateItem(NArchive::N7z::CUpdateItem const &)
.text:00005FEF                 mov     [ebp+var_1C], eax
.text:00005FF2                 jmp     short loc_5FFB
.text:00005FF4 ; ---------------------------------------------------------------------------
.text:00005FF4
.text:00005FF4 loc_5FF4:                               ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::Add(NArchive::N7z::CUpdateItem const &)+51j
.text:00005FF4                 mov     [ebp+var_1C], 0
.text:00005FFB
.text:00005FFB loc_5FFB:                               ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::Add(NArchive::N7z::CUpdateItem const &)+62j
.text:00005FFB                 mov     ecx, [ebp+var_1C]
.text:00005FFE                 mov     [ebp+var_14], ecx
.text:00006001                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006008                 mov     edx, [ebp+var_14]
.text:0000600B                 push    edx
.text:0000600C                 mov     ecx, [ebp+var_10]
.text:0000600F                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00006014                 mov     ecx, [ebp+var_C]
.text:00006017                 mov     large fs:0, ecx
.text:0000601E                 pop     ecx
.text:0000601F                 add     esp, 1Ch
.text:00006022                 cmp     ebp, esp
.text:00006024                 call    __RTC_CheckEsp
.text:00006029                 mov     esp, ebp
.text:0000602B                 pop     ebp
.text:0000602C                 retn    4
.text:0000602C ?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z endp
.text:0000602C
.text:0000602C ; ---------------------------------------------------------------------------
.text:0000602F                 align 10h
.text:0000602F _text           ends
.text:0000602F
.text$x:00006030 ; ===========================================================================
.text$x:00006030
.text$x:00006030 ; Segment type: Pure code
.text$x:00006030 ; Segment permissions: Read/Execute
.text$x:00006030 _text$x         segment para public 'CODE' use32
.text$x:00006030                 assume cs:_text$x
.text$x:00006030                 ;org 6030h
.text$x:00006030 ; COMDAT (pick associative to section at 5F90)
.text$x:00006030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006030
.text$x:00006030 ; =============== S U B R O U T I N E =======================================
.text$x:00006030
.text$x:00006030
.text$x:00006030 __unwindfunclet$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z$0 proc near
.text$x:00006030                                         ; DATA XREF: .xdata$x:0000605Co
.text$x:00006030                 mov     eax, [ebp-18h]
.text$x:00006033                 push    eax             ; void *
.text$x:00006034                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006039                 pop     ecx
.text$x:0000603A                 retn
.text$x:0000603A __unwindfunclet$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z$0 endp
.text$x:0000603A
.text$x:0000603B
.text$x:0000603B ; =============== S U B R O U T I N E =======================================
.text$x:0000603B
.text$x:0000603B
.text$x:0000603B __ehhandler$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z proc near
.text$x:0000603B                                         ; DATA XREF: CObjectVector<NArchive::N7z::CUpdateItem>::Add(NArchive::N7z::CUpdateItem const &)+5o
.text$x:0000603B
.text$x:0000603B arg_4           = dword ptr  8
.text$x:0000603B
.text$x:0000603B                 mov     edx, [esp+arg_4]
.text$x:0000603F                 lea     eax, [edx+0Ch]
.text$x:00006042                 mov     ecx, [edx-14h]
.text$x:00006045                 xor     ecx, eax
.text$x:00006047                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000604C                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z
.text$x:00006051                 jmp     ___CxxFrameHandler3
.text$x:00006051 __ehhandler$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z endp
.text$x:00006051
.text$x:00006051 ; ---------------------------------------------------------------------------
.text$x:00006056                 align 4
.text$x:00006056 _text$x         ends
.text$x:00006056
.xdata$x:00006058 ; ===========================================================================
.xdata$x:00006058
.xdata$x:00006058 ; Segment type: Pure data
.xdata$x:00006058 ; Segment permissions: Read
.xdata$x:00006058 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006058                 assume cs:_xdata$x
.xdata$x:00006058                 ;org 6058h
.xdata$x:00006058 ; COMDAT (pick associative to section at 5F90)
.xdata$x:00006058 __unwindtable$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z db 0FFh
.xdata$x:00006058                                         ; DATA XREF: .xdata$x:00006068o
.xdata$x:00006059                 db 0FFh
.xdata$x:0000605A                 db 0FFh
.xdata$x:0000605B                 db 0FFh
.xdata$x:0000605C                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z$0
.xdata$x:00006060 __ehfuncinfo$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z db  22h ; "
.xdata$x:00006060                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z+11o
.xdata$x:00006061                 db    5
.xdata$x:00006062                 db  93h ; ô
.xdata$x:00006063                 db  19h
.xdata$x:00006064                 db    1
.xdata$x:00006065                 db    0
.xdata$x:00006066                 db    0
.xdata$x:00006067                 db    0
.xdata$x:00006068                 dd offset __unwindtable$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z
.xdata$x:0000606C                 align 20h
.xdata$x:00006080                 db    1
.xdata$x:00006081                 db    0
.xdata$x:00006082                 db    0
.xdata$x:00006083                 db    0
.xdata$x:00006083 _xdata$x        ends
.xdata$x:00006083
.text:00006084 ; ===========================================================================
.text:00006084
.text:00006084 ; Segment type: Pure code
.text:00006084 ; Segment permissions: Read/Execute
.text:00006084 _text           segment para public 'CODE' use32
.text:00006084                 assume cs:_text
.text:00006084                 ;org 6084h
.text:00006084 ; COMDAT (pick any)
.text:00006084                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006084
.text:00006084 ; =============== S U B R O U T I N E =======================================
.text:00006084
.text:00006084 ; Attributes: bp-based frame
.text:00006084
.text:00006084 ; public: __thiscall CObjectVector<struct NArchive::N7z::CUpdateItem>::~CObjectVector<struct NArchive::N7z::CUpdateItem>(void)
.text:00006084                 public ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ
.text:00006084 ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ proc near
.text:00006084                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+217p
.text:00006084                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+27Fp ...
.text:00006084
.text:00006084 var_20          = dword ptr -20h
.text:00006084 var_1C          = dword ptr -1Ch
.text:00006084 var_18          = dword ptr -18h
.text:00006084 var_14          = dword ptr -14h
.text:00006084 var_10          = dword ptr -10h
.text:00006084 var_C           = dword ptr -0Ch
.text:00006084 var_4           = dword ptr -4
.text:00006084
.text:00006084                 push    ebp
.text:00006085                 mov     ebp, esp
.text:00006087                 push    0FFFFFFFFh
.text:00006089                 push    offset __ehhandler$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ
.text:0000608E                 mov     eax, large fs:0
.text:00006094                 push    eax
.text:00006095                 sub     esp, 14h
.text:00006098                 mov     eax, 0CCCCCCCCh
.text:0000609D                 mov     [ebp+var_20], eax
.text:000060A0                 mov     [ebp+var_1C], eax
.text:000060A3                 mov     [ebp+var_18], eax
.text:000060A6                 mov     [ebp+var_14], eax
.text:000060A9                 mov     [ebp+var_10], eax
.text:000060AC                 mov     eax, dword ptr ds:___security_cookie
.text:000060B1                 xor     eax, ebp
.text:000060B3                 push    eax
.text:000060B4                 lea     eax, [ebp+var_C]
.text:000060B7                 mov     large fs:0, eax
.text:000060BD                 mov     [ebp+var_10], ecx
.text:000060C0                 mov     [ebp+var_4], 0
.text:000060C7                 mov     ecx, [ebp+var_10]
.text:000060CA                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000060CF                 mov     [ebp+var_14], eax
.text:000060D2
.text:000060D2 loc_60D2:                               ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void):loc_6114j
.text:000060D2                 cmp     [ebp+var_14], 0
.text:000060D6                 jz      short loc_6116
.text:000060D8                 mov     eax, [ebp+var_14]
.text:000060DB                 sub     eax, 1
.text:000060DE                 mov     [ebp+var_14], eax
.text:000060E1                 mov     ecx, [ebp+var_14]
.text:000060E4                 push    ecx
.text:000060E5                 mov     ecx, [ebp+var_10]
.text:000060E8                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000060ED                 mov     edx, [eax]
.text:000060EF                 mov     [ebp+var_1C], edx
.text:000060F2                 mov     eax, [ebp+var_1C]
.text:000060F5                 mov     [ebp+var_18], eax
.text:000060F8                 cmp     [ebp+var_18], 0
.text:000060FC                 jz      short loc_610D
.text:000060FE                 push    1
.text:00006100                 mov     ecx, [ebp+var_18]
.text:00006103                 call    ??_GCUpdateItem@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CUpdateItem::`scalar deleting destructor'(uint)
.text:00006108                 mov     [ebp+var_20], eax
.text:0000610B                 jmp     short loc_6114
.text:0000610D ; ---------------------------------------------------------------------------
.text:0000610D
.text:0000610D loc_610D:                               ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)+78j
.text:0000610D                 mov     [ebp+var_20], 0
.text:00006114
.text:00006114 loc_6114:                               ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)+87j
.text:00006114                 jmp     short loc_60D2
.text:00006116 ; ---------------------------------------------------------------------------
.text:00006116
.text:00006116 loc_6116:                               ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)+52j
.text:00006116                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000611D                 mov     ecx, [ebp+var_10]
.text:00006120                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006125                 mov     ecx, [ebp+var_C]
.text:00006128                 mov     large fs:0, ecx
.text:0000612F                 pop     ecx
.text:00006130                 add     esp, 20h
.text:00006133                 cmp     ebp, esp
.text:00006135                 call    __RTC_CheckEsp
.text:0000613A                 mov     esp, ebp
.text:0000613C                 pop     ebp
.text:0000613D                 retn
.text:0000613D ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ endp
.text:0000613D
.text:0000613D ; ---------------------------------------------------------------------------
.text:0000613E                 align 10h
.text:0000613E _text           ends
.text:0000613E
.text$x:00006140 ; ===========================================================================
.text$x:00006140
.text$x:00006140 ; Segment type: Pure code
.text$x:00006140 ; Segment permissions: Read/Execute
.text$x:00006140 _text$x         segment para public 'CODE' use32
.text$x:00006140                 assume cs:_text$x
.text$x:00006140                 ;org 6140h
.text$x:00006140 ; COMDAT (pick associative to section at 6084)
.text$x:00006140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006140
.text$x:00006140 ; =============== S U B R O U T I N E =======================================
.text$x:00006140
.text$x:00006140
.text$x:00006140 __unwindfunclet$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ$0 proc near
.text$x:00006140                                         ; DATA XREF: .xdata$x:00006168o
.text$x:00006140                 mov     ecx, [ebp-10h]
.text$x:00006143                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00006143 __unwindfunclet$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ$0 endp
.text$x:00006143
.text$x:00006148
.text$x:00006148 ; =============== S U B R O U T I N E =======================================
.text$x:00006148
.text$x:00006148
.text$x:00006148 __ehhandler$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ proc near
.text$x:00006148                                         ; DATA XREF: CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)+5o
.text$x:00006148
.text$x:00006148 arg_4           = dword ptr  8
.text$x:00006148
.text$x:00006148                 mov     edx, [esp+arg_4]
.text$x:0000614C                 lea     eax, [edx+0Ch]
.text$x:0000614F                 mov     ecx, [edx-18h]
.text$x:00006152                 xor     ecx, eax
.text$x:00006154                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006159                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ
.text$x:0000615E                 jmp     ___CxxFrameHandler3
.text$x:0000615E __ehhandler$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ endp
.text$x:0000615E
.text$x:0000615E ; ---------------------------------------------------------------------------
.text$x:00006163                 align 4
.text$x:00006163 _text$x         ends
.text$x:00006163
.xdata$x:00006164 ; ===========================================================================
.xdata$x:00006164
.xdata$x:00006164 ; Segment type: Pure data
.xdata$x:00006164 ; Segment permissions: Read
.xdata$x:00006164 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006164                 assume cs:_xdata$x
.xdata$x:00006164                 ;org 6164h
.xdata$x:00006164 ; COMDAT (pick associative to section at 6084)
.xdata$x:00006164 __unwindtable$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00006164                                         ; DATA XREF: .xdata$x:off_6174o
.xdata$x:00006165                 db 0FFh
.xdata$x:00006166                 db 0FFh
.xdata$x:00006167                 db 0FFh
.xdata$x:00006168                 dd offset __unwindfunclet$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ$0
.xdata$x:0000616C __ehfuncinfo$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:0000616C                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ+11o
.xdata$x:0000616D                 db    5
.xdata$x:0000616E                 db  93h ; ô
.xdata$x:0000616F                 db  19h
.xdata$x:00006170                 db    1
.xdata$x:00006171                 db    0
.xdata$x:00006172                 db    0
.xdata$x:00006173                 db    0
.xdata$x:00006174 off_6174        dd offset __unwindtable$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ
.xdata$x:00006174                                         ; DATA XREF: .rdata:$SG74574o
.xdata$x:00006178                 db    0
.xdata$x:00006179                 db    0
.xdata$x:0000617A                 db    0
.xdata$x:0000617B                 db    0
.xdata$x:0000617C                 db    0
.xdata$x:0000617D                 db    0
.xdata$x:0000617E                 db    0
.xdata$x:0000617F                 db    0
.xdata$x:00006180                 db    0
.xdata$x:00006181                 db    0
.xdata$x:00006182                 db    0
.xdata$x:00006183                 db    0
.xdata$x:00006184                 db    0
.xdata$x:00006185                 db    0
.xdata$x:00006186                 db    0
.xdata$x:00006187                 db    0
.xdata$x:00006188                 db    0
.xdata$x:00006189                 db    0
.xdata$x:0000618A                 db    0
.xdata$x:0000618B                 db    0
.xdata$x:0000618C                 db    1
.xdata$x:0000618D                 db    0
.xdata$x:0000618E                 db    0
.xdata$x:0000618F                 db    0
.xdata$x:0000618F _xdata$x        ends
.xdata$x:0000618F
.text:00006190 ; ===========================================================================
.text:00006190
.text:00006190 ; Segment type: Pure code
.text:00006190 ; Segment permissions: Read/Execute
.text:00006190 _text           segment para public 'CODE' use32
.text:00006190                 assume cs:_text
.text:00006190                 ;org 6190h
.text:00006190 ; COMDAT (pick any)
.text:00006190                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006190
.text:00006190 ; =============== S U B R O U T I N E =======================================
.text:00006190
.text:00006190 ; Attributes: bp-based frame
.text:00006190
.text:00006190 ; public: void __thiscall CObjectVector<struct NArchive::N7z::CUpdateItem>::ClearAndFree(void)
.text:00006190                 public ?ClearAndFree@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ
.text:00006190 ?ClearAndFree@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ proc near
.text:00006190                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+14D6p
.text:00006190
.text:00006190 var_4           = dword ptr -4
.text:00006190
.text:00006190                 push    ebp
.text:00006191                 mov     ebp, esp
.text:00006193                 push    ecx
.text:00006194                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000619B                 mov     [ebp+var_4], ecx
.text:0000619E                 mov     ecx, [ebp+var_4]
.text:000061A1                 call    ?Clear@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Clear(void)
.text:000061A6                 mov     ecx, [ebp+var_4]
.text:000061A9                 call    ?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::ClearAndFree(void)
.text:000061AE                 add     esp, 4
.text:000061B1                 cmp     ebp, esp
.text:000061B3                 call    __RTC_CheckEsp
.text:000061B8                 mov     esp, ebp
.text:000061BA                 pop     ebp
.text:000061BB                 retn
.text:000061BB ?ClearAndFree@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ endp
.text:000061BB
.text:000061BB _text           ends
.text:000061BB
.text:000061BC ; ===========================================================================
.text:000061BC
.text:000061BC ; Segment type: Pure code
.text:000061BC ; Segment permissions: Read/Execute
.text:000061BC _text           segment para public 'CODE' use32
.text:000061BC                 assume cs:_text
.text:000061BC                 ;org 61BCh
.text:000061BC ; COMDAT (pick any)
.text:000061BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061BC
.text:000061BC ; =============== S U B R O U T I N E =======================================
.text:000061BC
.text:000061BC ; Attributes: bp-based frame
.text:000061BC
.text:000061BC ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword2>::CMyComPtr<struct ICryptoGetTextPassword2>(void)
.text:000061BC                 public ??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ
.text:000061BC ??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ proc near
.text:000061BC                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F89p
.text:000061BC
.text:000061BC var_4           = dword ptr -4
.text:000061BC
.text:000061BC                 push    ebp
.text:000061BD                 mov     ebp, esp
.text:000061BF                 push    ecx
.text:000061C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061C7                 mov     [ebp+var_4], ecx
.text:000061CA                 mov     eax, [ebp+var_4]
.text:000061CD                 mov     dword ptr [eax], 0
.text:000061D3                 mov     eax, [ebp+var_4]
.text:000061D6                 mov     esp, ebp
.text:000061D8                 pop     ebp
.text:000061D9                 retn
.text:000061D9 ??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ endp
.text:000061D9
.text:000061D9 ; ---------------------------------------------------------------------------
.text:000061DA                 align 4
.text:000061DA _text           ends
.text:000061DA
.text:000061DC ; ===========================================================================
.text:000061DC
.text:000061DC ; Segment type: Pure code
.text:000061DC ; Segment permissions: Read/Execute
.text:000061DC _text           segment para public 'CODE' use32
.text:000061DC                 assume cs:_text
.text:000061DC                 ;org 61DCh
.text:000061DC ; COMDAT (pick any)
.text:000061DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061DC
.text:000061DC ; =============== S U B R O U T I N E =======================================
.text:000061DC
.text:000061DC ; Attributes: bp-based frame
.text:000061DC
.text:000061DC ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword2>::~CMyComPtr<struct ICryptoGetTextPassword2>(void)
.text:000061DC                 public ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ
.text:000061DC ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ proc near
.text:000061DC                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+10A9p
.text:000061DC                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+148Dp ...
.text:000061DC
.text:000061DC var_4           = dword ptr -4
.text:000061DC
.text:000061DC                 push    ebp
.text:000061DD                 mov     ebp, esp
.text:000061DF                 push    ecx
.text:000061E0                 push    esi
.text:000061E1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061E8                 mov     [ebp+var_4], ecx
.text:000061EB                 mov     eax, [ebp+var_4]
.text:000061EE                 cmp     dword ptr [eax], 0
.text:000061F1                 jz      short loc_620E
.text:000061F3                 mov     ecx, [ebp+var_4]
.text:000061F6                 mov     edx, [ecx]
.text:000061F8                 mov     eax, [ebp+var_4]
.text:000061FB                 mov     ecx, [eax]
.text:000061FD                 mov     edx, [edx]
.text:000061FF                 mov     esi, esp
.text:00006201                 push    ecx
.text:00006202                 mov     eax, [edx+8]
.text:00006205                 call    eax
.text:00006207                 cmp     esi, esp
.text:00006209                 call    __RTC_CheckEsp
.text:0000620E
.text:0000620E loc_620E:                               ; CODE XREF: CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>(void)+15j
.text:0000620E                 pop     esi
.text:0000620F                 add     esp, 4
.text:00006212                 cmp     ebp, esp
.text:00006214                 call    __RTC_CheckEsp
.text:00006219                 mov     esp, ebp
.text:0000621B                 pop     ebp
.text:0000621C                 retn
.text:0000621C ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ endp
.text:0000621C
.text:0000621C ; ---------------------------------------------------------------------------
.text:0000621D                 align 10h
.text:0000621D _text           ends
.text:0000621D
.text:00006220 ; ===========================================================================
.text:00006220
.text:00006220 ; Segment type: Pure code
.text:00006220 ; Segment permissions: Read/Execute
.text:00006220 _text           segment para public 'CODE' use32
.text:00006220                 assume cs:_text
.text:00006220                 ;org 6220h
.text:00006220 ; COMDAT (pick any)
.text:00006220                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006220
.text:00006220 ; =============== S U B R O U T I N E =======================================
.text:00006220
.text:00006220 ; Attributes: bp-based frame
.text:00006220
.text:00006220 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword2>::operator struct ICryptoGetTextPassword2 *(void)const
.text:00006220                 public ??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ
.text:00006220 ??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ proc near
.text:00006220                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+FE3p
.text:00006220
.text:00006220 var_4           = dword ptr -4
.text:00006220
.text:00006220                 push    ebp
.text:00006221                 mov     ebp, esp
.text:00006223                 push    ecx
.text:00006224                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000622B                 mov     [ebp+var_4], ecx
.text:0000622E                 mov     eax, [ebp+var_4]
.text:00006231                 mov     eax, [eax]
.text:00006233                 mov     esp, ebp
.text:00006235                 pop     ebp
.text:00006236                 retn
.text:00006236 ??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ endp
.text:00006236
.text:00006236 ; ---------------------------------------------------------------------------
.text:00006237                 align 4
.text:00006237 _text           ends
.text:00006237
.text:00006238 ; ===========================================================================
.text:00006238
.text:00006238 ; Segment type: Pure code
.text:00006238 ; Segment permissions: Read/Execute
.text:00006238 _text           segment para public 'CODE' use32
.text:00006238                 assume cs:_text
.text:00006238                 ;org 6238h
.text:00006238 ; COMDAT (pick any)
.text:00006238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006238
.text:00006238 ; =============== S U B R O U T I N E =======================================
.text:00006238
.text:00006238 ; Attributes: bp-based frame
.text:00006238
.text:00006238 ; public: struct ICryptoGetTextPassword2 * * __thiscall CMyComPtr<struct ICryptoGetTextPassword2>::operator&(void)
.text:00006238                 public ??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ
.text:00006238 ??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ proc near
.text:00006238                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F9Ep
.text:00006238
.text:00006238 var_4           = dword ptr -4
.text:00006238
.text:00006238                 push    ebp
.text:00006239                 mov     ebp, esp
.text:0000623B                 push    ecx
.text:0000623C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006243                 mov     [ebp+var_4], ecx
.text:00006246                 mov     eax, [ebp+var_4]
.text:00006249                 mov     esp, ebp
.text:0000624B                 pop     ebp
.text:0000624C                 retn
.text:0000624C ??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ endp
.text:0000624C
.text:0000624C ; ---------------------------------------------------------------------------
.text:0000624D                 align 10h
.text:0000624D _text           ends
.text:0000624D
.text:00006250 ; ===========================================================================
.text:00006250
.text:00006250 ; Segment type: Pure code
.text:00006250 ; Segment permissions: Read/Execute
.text:00006250 _text           segment para public 'CODE' use32
.text:00006250                 assume cs:_text
.text:00006250                 ;org 6250h
.text:00006250 ; COMDAT (pick any)
.text:00006250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006250
.text:00006250 ; =============== S U B R O U T I N E =======================================
.text:00006250
.text:00006250 ; Attributes: bp-based frame
.text:00006250
.text:00006250 ; public: struct ICryptoGetTextPassword2 * __thiscall CMyComPtr<struct ICryptoGetTextPassword2>::operator->(void)const
.text:00006250                 public ??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ
.text:00006250 ??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ proc near
.text:00006250                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1016p
.text:00006250
.text:00006250 var_4           = dword ptr -4
.text:00006250
.text:00006250                 push    ebp
.text:00006251                 mov     ebp, esp
.text:00006253                 push    ecx
.text:00006254                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000625B                 mov     [ebp+var_4], ecx
.text:0000625E                 mov     eax, [ebp+var_4]
.text:00006261                 mov     eax, [eax]
.text:00006263                 mov     esp, ebp
.text:00006265                 pop     ebp
.text:00006266                 retn
.text:00006266 ??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ endp
.text:00006266
.text:00006266 ; ---------------------------------------------------------------------------
.text:00006267                 align 4
.text:00006267 _text           ends
.text:00006267
.text:00006268 ; ===========================================================================
.text:00006268
.text:00006268 ; Segment type: Pure code
.text:00006268 ; Segment permissions: Read/Execute
.text:00006268 _text           segment para public 'CODE' use32
.text:00006268                 assume cs:_text
.text:00006268                 ;org 6268h
.text:00006268 ; COMDAT (pick any)
.text:00006268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006268
.text:00006268 ; =============== S U B R O U T I N E =======================================
.text:00006268
.text:00006268 ; Attributes: bp-based frame
.text:00006268
.text:00006268 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00006268                 public ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00006268 ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00006268                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1383p
.text:00006268
.text:00006268 var_4           = dword ptr -4
.text:00006268
.text:00006268                 push    ebp
.text:00006269                 mov     ebp, esp
.text:0000626B                 push    ecx
.text:0000626C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006273                 mov     [ebp+var_4], ecx
.text:00006276                 mov     eax, [ebp+var_4]
.text:00006279                 mov     dword ptr [eax], 0
.text:0000627F                 mov     eax, [ebp+var_4]
.text:00006282                 mov     esp, ebp
.text:00006284                 pop     ebp
.text:00006285                 retn
.text:00006285 ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:00006285
.text:00006285 ; ---------------------------------------------------------------------------
.text:00006286                 align 4
.text:00006286 _text           ends
.text:00006286
.text:00006288 ; ===========================================================================
.text:00006288
.text:00006288 ; Segment type: Pure code
.text:00006288 ; Segment permissions: Read/Execute
.text:00006288 _text           segment para public 'CODE' use32
.text:00006288                 assume cs:_text
.text:00006288                 ;org 6288h
.text:00006288 ; COMDAT (pick any)
.text:00006288                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006288
.text:00006288 ; =============== S U B R O U T I N E =======================================
.text:00006288
.text:00006288 ; Attributes: bp-based frame
.text:00006288
.text:00006288 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::~CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00006288                 public ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00006288 ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00006288                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1460p
.text:00006288                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1517p ...
.text:00006288
.text:00006288 var_4           = dword ptr -4
.text:00006288
.text:00006288                 push    ebp
.text:00006289                 mov     ebp, esp
.text:0000628B                 push    ecx
.text:0000628C                 push    esi
.text:0000628D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006294                 mov     [ebp+var_4], ecx
.text:00006297                 mov     eax, [ebp+var_4]
.text:0000629A                 cmp     dword ptr [eax], 0
.text:0000629D                 jz      short loc_62BA
.text:0000629F                 mov     ecx, [ebp+var_4]
.text:000062A2                 mov     edx, [ecx]
.text:000062A4                 mov     eax, [ebp+var_4]
.text:000062A7                 mov     ecx, [eax]
.text:000062A9                 mov     edx, [edx]
.text:000062AB                 mov     esi, esp
.text:000062AD                 push    ecx
.text:000062AE                 mov     eax, [edx+8]
.text:000062B1                 call    eax
.text:000062B3                 cmp     esi, esp
.text:000062B5                 call    __RTC_CheckEsp
.text:000062BA
.text:000062BA loc_62BA:                               ; CODE XREF: CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)+15j
.text:000062BA                 pop     esi
.text:000062BB                 add     esp, 4
.text:000062BE                 cmp     ebp, esp
.text:000062C0                 call    __RTC_CheckEsp
.text:000062C5                 mov     esp, ebp
.text:000062C7                 pop     ebp
.text:000062C8                 retn
.text:000062C8 ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:000062C8
.text:000062C8 ; ---------------------------------------------------------------------------
.text:000062C9                 align 4
.text:000062C9 _text           ends
.text:000062C9
.text:000062CC ; ===========================================================================
.text:000062CC
.text:000062CC ; Segment type: Pure code
.text:000062CC ; Segment permissions: Read/Execute
.text:000062CC _text           segment para public 'CODE' use32
.text:000062CC                 assume cs:_text
.text:000062CC                 ;org 62CCh
.text:000062CC ; COMDAT (pick any)
.text:000062CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000062CC
.text:000062CC ; =============== S U B R O U T I N E =======================================
.text:000062CC
.text:000062CC ; Attributes: bp-based frame
.text:000062CC
.text:000062CC ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator struct ICryptoGetTextPassword *(void)const
.text:000062CC                 public ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
.text:000062CC ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ proc near
.text:000062CC                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+13CBp
.text:000062CC
.text:000062CC var_4           = dword ptr -4
.text:000062CC
.text:000062CC                 push    ebp
.text:000062CD                 mov     ebp, esp
.text:000062CF                 push    ecx
.text:000062D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062D7                 mov     [ebp+var_4], ecx
.text:000062DA                 mov     eax, [ebp+var_4]
.text:000062DD                 mov     eax, [eax]
.text:000062DF                 mov     esp, ebp
.text:000062E1                 pop     ebp
.text:000062E2                 retn
.text:000062E2 ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ endp
.text:000062E2
.text:000062E2 ; ---------------------------------------------------------------------------
.text:000062E3                 align 4
.text:000062E3 _text           ends
.text:000062E3
.text:000062E4 ; ===========================================================================
.text:000062E4
.text:000062E4 ; Segment type: Pure code
.text:000062E4 ; Segment permissions: Read/Execute
.text:000062E4 _text           segment para public 'CODE' use32
.text:000062E4                 assume cs:_text
.text:000062E4                 ;org 62E4h
.text:000062E4 ; COMDAT (pick any)
.text:000062E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000062E4
.text:000062E4 ; =============== S U B R O U T I N E =======================================
.text:000062E4
.text:000062E4 ; Attributes: bp-based frame
.text:000062E4
.text:000062E4 ; public: struct ICryptoGetTextPassword * * __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator&(void)
.text:000062E4                 public ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ
.text:000062E4 ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ proc near
.text:000062E4                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1398p
.text:000062E4
.text:000062E4 var_4           = dword ptr -4
.text:000062E4
.text:000062E4                 push    ebp
.text:000062E5                 mov     ebp, esp
.text:000062E7                 push    ecx
.text:000062E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062EF                 mov     [ebp+var_4], ecx
.text:000062F2                 mov     eax, [ebp+var_4]
.text:000062F5                 mov     esp, ebp
.text:000062F7                 pop     ebp
.text:000062F8                 retn
.text:000062F8 ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ endp
.text:000062F8
.text:000062F8 ; ---------------------------------------------------------------------------
.text:000062F9                 align 4
.text:000062F9 _text           ends
.text:000062F9
.text:000062FC ; ===========================================================================
.text:000062FC
.text:000062FC ; Segment type: Pure code
.text:000062FC ; Segment permissions: Read/Execute
.text:000062FC _text           segment para public 'CODE' use32
.text:000062FC                 assume cs:_text
.text:000062FC                 ;org 62FCh
.text:000062FC ; COMDAT (pick any)
.text:000062FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000062FC
.text:000062FC ; =============== S U B R O U T I N E =======================================
.text:000062FC
.text:000062FC ; Attributes: bp-based frame
.text:000062FC
.text:000062FC ; public: void * __thiscall UString::`scalar deleting destructor'(unsigned int)
.text:000062FC                 public ??_GUString@@QAEPAXI@Z
.text:000062FC ??_GUString@@QAEPAXI@Z proc near        ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+7Fp
.text:000062FC
.text:000062FC var_4           = dword ptr -4
.text:000062FC arg_0           = dword ptr  8
.text:000062FC
.text:000062FC                 push    ebp
.text:000062FD                 mov     ebp, esp
.text:000062FF                 push    ecx
.text:00006300                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006307                 mov     [ebp+var_4], ecx
.text:0000630A                 mov     ecx, [ebp+var_4] ; this
.text:0000630D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00006312                 mov     eax, [ebp+arg_0]
.text:00006315                 and     eax, 1
.text:00006318                 jz      short loc_6326
.text:0000631A                 mov     ecx, [ebp+var_4]
.text:0000631D                 push    ecx             ; void *
.text:0000631E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006323                 add     esp, 4
.text:00006326
.text:00006326 loc_6326:                               ; CODE XREF: UString::`scalar deleting destructor'(uint)+1Cj
.text:00006326                 mov     eax, [ebp+var_4]
.text:00006329                 add     esp, 4
.text:0000632C                 cmp     ebp, esp
.text:0000632E                 call    __RTC_CheckEsp
.text:00006333                 mov     esp, ebp
.text:00006335                 pop     ebp
.text:00006336                 retn    4
.text:00006336 ??_GUString@@QAEPAXI@Z endp
.text:00006336
.text:00006336 ; ---------------------------------------------------------------------------
.text:00006339                 align 4
.text:00006339 _text           ends
.text:00006339
.text:0000633C ; ===========================================================================
.text:0000633C
.text:0000633C ; Segment type: Pure code
.text:0000633C ; Segment permissions: Read/Execute
.text:0000633C _text           segment para public 'CODE' use32
.text:0000633C                 assume cs:_text
.text:0000633C                 ;org 633Ch
.text:0000633C ; COMDAT (pick any)
.text:0000633C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000633C
.text:0000633C ; =============== S U B R O U T I N E =======================================
.text:0000633C
.text:0000633C ; Attributes: bp-based frame
.text:0000633C
.text:0000633C ; public: __thiscall CProp::CProp(struct CProp const &)
.text:0000633C                 public ??0CProp@@QAE@ABU0@@Z
.text:0000633C ??0CProp@@QAE@ABU0@@Z proc near         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+B2p
.text:0000633C                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+A6p
.text:0000633C
.text:0000633C var_4           = dword ptr -4
.text:0000633C arg_0           = dword ptr  8
.text:0000633C
.text:0000633C                 push    ebp
.text:0000633D                 mov     ebp, esp
.text:0000633F                 push    ecx
.text:00006340                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006347                 mov     [ebp+var_4], ecx
.text:0000634A                 mov     eax, [ebp+var_4]
.text:0000634D                 mov     ecx, [ebp+arg_0]
.text:00006350                 mov     edx, [ecx]
.text:00006352                 mov     [eax], edx
.text:00006354                 mov     eax, [ebp+var_4]
.text:00006357                 mov     ecx, [ebp+arg_0]
.text:0000635A                 mov     dl, [ecx+4]
.text:0000635D                 mov     [eax+4], dl
.text:00006360                 mov     eax, [ebp+arg_0]
.text:00006363                 add     eax, 8
.text:00006366                 push    eax             ; struct NWindows::NCOM::CPropVariant *
.text:00006367
.text:00006367 loc_6367:                               ; DATA XREF: .rdata:$SG74552o
.text:00006367                 mov     ecx, [ebp+var_4]
.text:0000636A                 add     ecx, 8          ; this
.text:0000636D                 call    ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant const &)
.text:00006372
.text:00006372 loc_6372:                               ; DATA XREF: .rdata:$SG74571o
.text:00006372                 mov     eax, [ebp+var_4]
.text:00006375                 add     esp, 4
.text:00006378                 cmp     ebp, esp
.text:0000637A                 call    __RTC_CheckEsp
.text:0000637F                 mov     esp, ebp
.text:00006381                 pop     ebp
.text:00006382                 retn    4
.text:00006382 ??0CProp@@QAE@ABU0@@Z endp
.text:00006382
.text:00006382 ; ---------------------------------------------------------------------------
.text:00006385                 align 4
.text:00006385 _text           ends
.text:00006385
.text:00006388 ; ===========================================================================
.text:00006388
.text:00006388 ; Segment type: Pure code
.text:00006388 ; Segment permissions: Read/Execute
.text:00006388 _text           segment para public 'CODE' use32
.text:00006388                 assume cs:_text
.text:00006388                 ;org 6388h
.text:00006388 ; COMDAT (pick any)
.text:00006388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006388
.text:00006388 ; =============== S U B R O U T I N E =======================================
.text:00006388
.text:00006388 ; Attributes: bp-based frame
.text:00006388
.text:00006388 ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:00006388                 public ??_GCProp@@QAEPAXI@Z
.text:00006388 ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:00006388                                         ; CObjectVector<CProp>::Clear(void)+59p
.text:00006388
.text:00006388 var_4           = dword ptr -4
.text:00006388 arg_0           = dword ptr  8
.text:00006388
.text:00006388                 push    ebp
.text:00006389                 mov     ebp, esp
.text:0000638B                 push    ecx
.text:0000638C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006393                 mov     [ebp+var_4], ecx
.text:00006396                 mov     ecx, [ebp+var_4] ; this
.text:00006399                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:0000639E                 mov     eax, [ebp+arg_0]
.text:000063A1                 and     eax, 1
.text:000063A4                 jz      short loc_63B2
.text:000063A6                 mov     ecx, [ebp+var_4]
.text:000063A9                 push    ecx             ; void *
.text:000063AA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000063AF                 add     esp, 4
.text:000063B2
.text:000063B2 loc_63B2:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:000063B2                 mov     eax, [ebp+var_4]
.text:000063B5                 add     esp, 4
.text:000063B8                 cmp     ebp, esp
.text:000063BA                 call    __RTC_CheckEsp
.text:000063BF                 mov     esp, ebp
.text:000063C1                 pop     ebp
.text:000063C2                 retn    4
.text:000063C2 ??_GCProp@@QAEPAXI@Z endp
.text:000063C2
.text:000063C2 ; ---------------------------------------------------------------------------
.text:000063C5                 align 4
.text:000063C5 _text           ends
.text:000063C5
.text:000063C8 ; ===========================================================================
.text:000063C8
.text:000063C8 ; Segment type: Pure code
.text:000063C8 ; Segment permissions: Read/Execute
.text:000063C8 _text           segment para public 'CODE' use32
.text:000063C8                 assume cs:_text
.text:000063C8                 ;org 63C8h
.text:000063C8 ; COMDAT (pick any)
.text:000063C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000063C8
.text:000063C8 ; =============== S U B R O U T I N E =======================================
.text:000063C8
.text:000063C8 ; Attributes: bp-based frame
.text:000063C8
.text:000063C8 ; public: __thiscall COneMethodInfo::COneMethodInfo(class COneMethodInfo const &)
.text:000063C8                 public ??0COneMethodInfo@@QAE@ABV0@@Z
.text:000063C8 ??0COneMethodInfo@@QAE@ABV0@@Z proc near
.text:000063C8                                         ; CODE XREF: CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(CObjectVector<COneMethodInfo> const &)+A6p
.text:000063C8                                         ; CObjectVector<COneMethodInfo>::Insert(uint,COneMethodInfo const &)+5Ap
.text:000063C8
.text:000063C8 var_10          = dword ptr -10h
.text:000063C8 var_C           = dword ptr -0Ch
.text:000063C8 var_4           = dword ptr -4
.text:000063C8 arg_0           = dword ptr  8
.text:000063C8
.text:000063C8                 push    ebp
.text:000063C9                 mov     ebp, esp
.text:000063CB                 push    0FFFFFFFFh
.text:000063CD                 push    offset __ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z
.text:000063D2                 mov     eax, large fs:0
.text:000063D8                 push    eax
.text:000063D9                 push    ecx
.text:000063DA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000063E1                 mov     eax, dword ptr ds:___security_cookie
.text:000063E6                 xor     eax, ebp
.text:000063E8                 push    eax
.text:000063E9                 lea     eax, [ebp+var_C]
.text:000063EC                 mov     large fs:0, eax
.text:000063F2                 mov     [ebp+var_10], ecx
.text:000063F5                 mov     eax, [ebp+arg_0]
.text:000063F8                 push    eax
.text:000063F9                 mov     ecx, [ebp+var_10]
.text:000063FC                 call    ??0CMethodProps@@QAE@ABV0@@Z ; CMethodProps::CMethodProps(CMethodProps const &)
.text:00006401                 mov     [ebp+var_4], 0
.text:00006408                 mov     ecx, [ebp+arg_0]
.text:0000640B                 add     ecx, 0Ch
.text:0000640E                 push    ecx
.text:0000640F                 mov     ecx, [ebp+var_10]
.text:00006412                 add     ecx, 0Ch
.text:00006415                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:0000641A                 mov     byte ptr [ebp+var_4], 1
.text:0000641E                 mov     edx, [ebp+arg_0]
.text:00006421                 add     edx, 18h
.text:00006424                 push    edx
.text:00006425                 mov     ecx, [ebp+var_10]
.text:00006428                 add     ecx, 18h
.text:0000642B                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00006430                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006437                 mov     eax, [ebp+var_10]
.text:0000643A                 mov     ecx, [ebp+var_C]
.text:0000643D                 mov     large fs:0, ecx
.text:00006444                 pop     ecx
.text:00006445                 add     esp, 10h
.text:00006448                 cmp     ebp, esp
.text:0000644A                 call    __RTC_CheckEsp
.text:0000644F                 mov     esp, ebp
.text:00006451                 pop     ebp
.text:00006452                 retn    4
.text:00006452 ??0COneMethodInfo@@QAE@ABV0@@Z endp
.text:00006452
.text:00006452 ; ---------------------------------------------------------------------------
.text:00006455                 align 4
.text:00006455 _text           ends
.text:00006455
.text$x:00006458 ; ===========================================================================
.text$x:00006458
.text$x:00006458 ; Segment type: Pure code
.text$x:00006458 ; Segment permissions: Read/Execute
.text$x:00006458 _text$x         segment para public 'CODE' use32
.text$x:00006458                 assume cs:_text$x
.text$x:00006458                 ;org 6458h
.text$x:00006458 ; COMDAT (pick associative to section at 63C8)
.text$x:00006458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006458
.text$x:00006458 ; =============== S U B R O U T I N E =======================================
.text$x:00006458
.text$x:00006458
.text$x:00006458 __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0 proc near
.text$x:00006458                                         ; DATA XREF: .xdata$x:0000648Co
.text$x:00006458                 mov     ecx, [ebp-10h]  ; this
.text$x:0000645B                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:0000645B __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0 endp
.text$x:0000645B
.text$x:00006460
.text$x:00006460 ; =============== S U B R O U T I N E =======================================
.text$x:00006460
.text$x:00006460
.text$x:00006460 __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1 proc near
.text$x:00006460                                         ; DATA XREF: .xdata$x:00006494o
.text$x:00006460                 mov     ecx, [ebp-10h]
.text$x:00006463                 add     ecx, 0Ch        ; this
.text$x:00006466                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00006466 __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1 endp
.text$x:00006466
.text$x:0000646B
.text$x:0000646B ; =============== S U B R O U T I N E =======================================
.text$x:0000646B
.text$x:0000646B
.text$x:0000646B __ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z proc near
.text$x:0000646B                                         ; DATA XREF: COneMethodInfo::COneMethodInfo(COneMethodInfo const &)+5o
.text$x:0000646B
.text$x:0000646B arg_4           = dword ptr  8
.text$x:0000646B
.text$x:0000646B                 mov     edx, [esp+arg_4]
.text$x:0000646F                 lea     eax, [edx+0Ch]
.text$x:00006472                 mov     ecx, [edx-8]
.text$x:00006475                 xor     ecx, eax
.text$x:00006477                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000647C                 mov     eax, offset __ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z
.text$x:00006481                 jmp     ___CxxFrameHandler3
.text$x:00006481 __ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z endp
.text$x:00006481
.text$x:00006481 ; ---------------------------------------------------------------------------
.text$x:00006486                 align 4
.text$x:00006486 _text$x         ends
.text$x:00006486
.xdata$x:00006488 ; ===========================================================================
.xdata$x:00006488
.xdata$x:00006488 ; Segment type: Pure data
.xdata$x:00006488 ; Segment permissions: Read
.xdata$x:00006488 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006488                 assume cs:_xdata$x
.xdata$x:00006488                 ;org 6488h
.xdata$x:00006488 ; COMDAT (pick associative to section at 63C8)
.xdata$x:00006488 __unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z db 0FFh
.xdata$x:00006488                                         ; DATA XREF: .xdata$x:000064A0o
.xdata$x:00006489                 db 0FFh
.xdata$x:0000648A                 db 0FFh
.xdata$x:0000648B                 db 0FFh
.xdata$x:0000648C                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0
.xdata$x:00006490                 db    0
.xdata$x:00006491                 db    0
.xdata$x:00006492                 db    0
.xdata$x:00006493                 db    0
.xdata$x:00006494                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1
.xdata$x:00006498 __ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z db  22h ; "
.xdata$x:00006498                                         ; DATA XREF: __ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z+11o
.xdata$x:00006499                 db    5
.xdata$x:0000649A                 db  93h ; ô
.xdata$x:0000649B                 db  19h
.xdata$x:0000649C                 db    2
.xdata$x:0000649D                 db    0
.xdata$x:0000649E                 db    0
.xdata$x:0000649F                 db    0
.xdata$x:000064A0                 dd offset __unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z
.xdata$x:000064A4                 db    0
.xdata$x:000064A5                 db    0
.xdata$x:000064A6                 db    0
.xdata$x:000064A7                 db    0
.xdata$x:000064A8                 db    0
.xdata$x:000064A9                 db    0
.xdata$x:000064AA                 db    0
.xdata$x:000064AB                 db    0
.xdata$x:000064AC                 db    0
.xdata$x:000064AD                 db    0
.xdata$x:000064AE                 db    0
.xdata$x:000064AF                 db    0
.xdata$x:000064B0                 db    0
.xdata$x:000064B1                 db    0
.xdata$x:000064B2                 db    0
.xdata$x:000064B3                 db    0
.xdata$x:000064B4                 db    0
.xdata$x:000064B5                 db    0
.xdata$x:000064B6                 db    0
.xdata$x:000064B7                 db    0
.xdata$x:000064B8                 db    1
.xdata$x:000064B9                 db    0
.xdata$x:000064BA                 db    0
.xdata$x:000064BB                 db    0
.xdata$x:000064BB _xdata$x        ends
.xdata$x:000064BB
.text:000064BC ; ===========================================================================
.text:000064BC
.text:000064BC ; Segment type: Pure code
.text:000064BC ; Segment permissions: Read/Execute
.text:000064BC _text           segment para public 'CODE' use32
.text:000064BC                 assume cs:_text
.text:000064BC                 ;org 64BCh
.text:000064BC ; COMDAT (pick any)
.text:000064BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000064BC
.text:000064BC ; =============== S U B R O U T I N E =======================================
.text:000064BC
.text:000064BC ; Attributes: bp-based frame
.text:000064BC
.text:000064BC ; public: void * __thiscall COneMethodInfo::`scalar deleting destructor'(unsigned int)
.text:000064BC                 public ??_GCOneMethodInfo@@QAEPAXI@Z
.text:000064BC ??_GCOneMethodInfo@@QAEPAXI@Z proc near ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+7Fp
.text:000064BC                                         ; CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+59p
.text:000064BC
.text:000064BC var_4           = dword ptr -4
.text:000064BC arg_0           = dword ptr  8
.text:000064BC
.text:000064BC                 push    ebp
.text:000064BD                 mov     ebp, esp
.text:000064BF                 push    ecx
.text:000064C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000064C7                 mov     [ebp+var_4], ecx
.text:000064CA                 mov     ecx, [ebp+var_4] ; this
.text:000064CD                 call    ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text:000064D2                 mov     eax, [ebp+arg_0]
.text:000064D5                 and     eax, 1
.text:000064D8                 jz      short loc_64E6
.text:000064DA                 mov     ecx, [ebp+var_4]
.text:000064DD                 push    ecx             ; void *
.text:000064DE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000064E3                 add     esp, 4
.text:000064E6
.text:000064E6 loc_64E6:                               ; CODE XREF: COneMethodInfo::`scalar deleting destructor'(uint)+1Cj
.text:000064E6                 mov     eax, [ebp+var_4]
.text:000064E9                 add     esp, 4
.text:000064EC                 cmp     ebp, esp
.text:000064EE                 call    __RTC_CheckEsp
.text:000064F3                 mov     esp, ebp
.text:000064F5                 pop     ebp
.text:000064F6                 retn    4
.text:000064F6 ??_GCOneMethodInfo@@QAEPAXI@Z endp
.text:000064F6
.text:000064F6 ; ---------------------------------------------------------------------------
.text:000064F9                 align 4
.text:000064F9 _text           ends
.text:000064F9
.text:000064FC ; ===========================================================================
.text:000064FC
.text:000064FC ; Segment type: Pure code
.text:000064FC ; Segment permissions: Read/Execute
.text:000064FC _text           segment para public 'CODE' use32
.text:000064FC                 assume cs:_text
.text:000064FC                 ;org 64FCh
.text:000064FC ; COMDAT (pick any)
.text:000064FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000064FC
.text:000064FC ; =============== S U B R O U T I N E =======================================
.text:000064FC
.text:000064FC ; Attributes: bp-based frame
.text:000064FC
.text:000064FC ; _DWORD __thiscall NArchive::N7z::CMethodFull::CMethodFull(NArchive::N7z::CMethodFull *__hidden this)
.text:000064FC                 public ??0CMethodFull@N7z@NArchive@@QAE@XZ
.text:000064FC ??0CMethodFull@N7z@NArchive@@QAE@XZ proc near
.text:000064FC                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::AddNew(void)+59p
.text:000064FC
.text:000064FC var_4           = dword ptr -4
.text:000064FC
.text:000064FC                 push    ebp
.text:000064FD                 mov     ebp, esp
.text:000064FF                 push    ecx
.text:00006500                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006507                 mov     [ebp+var_4], ecx
.text:0000650A                 mov     ecx, [ebp+var_4]
.text:0000650D                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:00006512                 mov     eax, [ebp+var_4]
.text:00006515                 add     esp, 4
.text:00006518                 cmp     ebp, esp
.text:0000651A                 call    __RTC_CheckEsp
.text:0000651F                 mov     esp, ebp
.text:00006521                 pop     ebp
.text:00006522                 retn
.text:00006522 ??0CMethodFull@N7z@NArchive@@QAE@XZ endp
.text:00006522
.text:00006522 ; ---------------------------------------------------------------------------
.text:00006523                 align 4
.text:00006523 _text           ends
.text:00006523
.text:00006524 ; ===========================================================================
.text:00006524
.text:00006524 ; Segment type: Pure code
.text:00006524 ; Segment permissions: Read/Execute
.text:00006524 _text           segment para public 'CODE' use32
.text:00006524                 assume cs:_text
.text:00006524                 ;org 6524h
.text:00006524 ; COMDAT (pick any)
.text:00006524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006524
.text:00006524 ; =============== S U B R O U T I N E =======================================
.text:00006524
.text:00006524 ; Attributes: bp-based frame
.text:00006524
.text:00006524 ; public: void * __thiscall NArchive::N7z::CMethodFull::`scalar deleting destructor'(unsigned int)
.text:00006524                 public ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
.text:00006524 ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z proc near
.text:00006524                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+7Fp
.text:00006524
.text:00006524 var_4           = dword ptr -4
.text:00006524 arg_0           = dword ptr  8
.text:00006524
.text:00006524                 push    ebp
.text:00006525                 mov     ebp, esp
.text:00006527                 push    ecx
.text:00006528                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000652F                 mov     [ebp+var_4], ecx
.text:00006532                 mov     ecx, [ebp+var_4] ; this
.text:00006535                 call    ??1CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::~CMethodFull(void)
.text:0000653A                 mov     eax, [ebp+arg_0]
.text:0000653D                 and     eax, 1
.text:00006540                 jz      short loc_654E
.text:00006542                 mov     ecx, [ebp+var_4]
.text:00006545                 push    ecx             ; void *
.text:00006546                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000654B                 add     esp, 4
.text:0000654E
.text:0000654E loc_654E:                               ; CODE XREF: NArchive::N7z::CMethodFull::`scalar deleting destructor'(uint)+1Cj
.text:0000654E                 mov     eax, [ebp+var_4]
.text:00006551                 add     esp, 4
.text:00006554                 cmp     ebp, esp
.text:00006556                 call    __RTC_CheckEsp
.text:0000655B                 mov     esp, ebp
.text:0000655D                 pop     ebp
.text:0000655E                 retn    4
.text:0000655E ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z endp
.text:0000655E
.text:0000655E ; ---------------------------------------------------------------------------
.text:00006561                 align 4
.text:00006561 _text           ends
.text:00006561
.text:00006564 ; ===========================================================================
.text:00006564
.text:00006564 ; Segment type: Pure code
.text:00006564 ; Segment permissions: Read/Execute
.text:00006564 _text           segment para public 'CODE' use32
.text:00006564                 assume cs:_text
.text:00006564                 ;org 6564h
.text:00006564 ; COMDAT (pick any)
.text:00006564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006564
.text:00006564 ; =============== S U B R O U T I N E =======================================
.text:00006564
.text:00006564 ; Attributes: bp-based frame
.text:00006564
.text:00006564 ; void __stdcall `vector constructor iterator'(void *, unsigned int, int, void * (__thiscall *)(void *))
.text:00006564                 public ??_H@YGXPAXIHP6EPAX0@Z@Z
.text:00006564 ??_H@YGXPAXIHP6EPAX0@Z@Z proc near
.text:00006564
.text:00006564 arg_0           = dword ptr  8
.text:00006564 arg_4           = dword ptr  0Ch
.text:00006564 arg_8           = dword ptr  10h
.text:00006564 arg_C           = dword ptr  14h
.text:00006564
.text:00006564                 push    ebp
.text:00006565                 mov     ebp, esp
.text:00006567                 push    esi
.text:00006568
.text:00006568 loc_6568:                               ; CODE XREF: `vector constructor iterator'(void *,uint,int,void * (*)(void *))+27j
.text:00006568                                         ; DATA XREF: .rdata:$SG74564o
.text:00006568                 mov     eax, [ebp+arg_8]
.text:0000656B                 sub     eax, 1
.text:0000656E                 mov     [ebp+arg_8], eax
.text:00006571                 js      short loc_658D
.text:00006573                 mov     esi, esp
.text:00006575                 mov     ecx, [ebp+arg_0]
.text:00006578                 call    [ebp+arg_C]
.text:0000657B                 cmp     esi, esp
.text:0000657D                 call    __RTC_CheckEsp
.text:00006582                 mov     ecx, [ebp+arg_0]
.text:00006585                 add     ecx, [ebp+arg_4]
.text:00006588                 mov     [ebp+arg_0], ecx
.text:0000658B                 jmp     short loc_6568
.text:0000658D ; ---------------------------------------------------------------------------
.text:0000658D
.text:0000658D loc_658D:                               ; CODE XREF: `vector constructor iterator'(void *,uint,int,void * (*)(void *))+Dj
.text:0000658D                 pop     esi
.text:0000658E                 cmp     ebp, esp
.text:00006590                 call    __RTC_CheckEsp
.text:00006595                 pop     ebp
.text:00006596                 retn    10h
.text:00006596 ??_H@YGXPAXIHP6EPAX0@Z@Z endp
.text:00006596
.text:00006596 ; ---------------------------------------------------------------------------
.text:00006599                 align 4
.text:00006599 _text           ends
.text:00006599
.text:0000659C ; ===========================================================================
.text:0000659C
.text:0000659C ; Segment type: Pure code
.text:0000659C ; Segment permissions: Read/Execute
.text:0000659C _text           segment para public 'CODE' use32
.text:0000659C                 assume cs:_text
.text:0000659C                 ;org 659Ch
.text:0000659C ; COMDAT (pick any)
.text:0000659C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000659C
.text:0000659C ; =============== S U B R O U T I N E =======================================
.text:0000659C
.text:0000659C ; Attributes: bp-based frame
.text:0000659C
.text:0000659C ; public: void * __thiscall NArchive::N7z::CFolder::`scalar deleting destructor'(unsigned int)
.text:0000659C                 public ??_GCFolder@N7z@NArchive@@QAEPAXI@Z
.text:0000659C ??_GCFolder@N7z@NArchive@@QAEPAXI@Z proc near
.text:0000659C                                         ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)+7Fp
.text:0000659C
.text:0000659C var_4           = dword ptr -4
.text:0000659C arg_0           = dword ptr  8
.text:0000659C
.text:0000659C                 push    ebp
.text:0000659D                 mov     ebp, esp
.text:0000659F                 push    ecx
.text:000065A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065A7                 mov     [ebp+var_4], ecx
.text:000065AA                 mov     ecx, [ebp+var_4] ; this
.text:000065AD                 call    ??1CFolder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolder::~CFolder(void)
.text:000065B2                 mov     eax, [ebp+arg_0]
.text:000065B5                 and     eax, 1
.text:000065B8                 jz      short loc_65C6
.text:000065BA                 mov     ecx, [ebp+var_4]
.text:000065BD                 push    ecx             ; void *
.text:000065BE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000065C3                 add     esp, 4
.text:000065C6
.text:000065C6 loc_65C6:                               ; CODE XREF: NArchive::N7z::CFolder::`scalar deleting destructor'(uint)+1Cj
.text:000065C6                 mov     eax, [ebp+var_4]
.text:000065C9                 add     esp, 4
.text:000065CC                 cmp     ebp, esp
.text:000065CE                 call    __RTC_CheckEsp
.text:000065D3                 mov     esp, ebp
.text:000065D5                 pop     ebp
.text:000065D6                 retn    4
.text:000065D6 ??_GCFolder@N7z@NArchive@@QAEPAXI@Z endp
.text:000065D6
.text:000065D6 ; ---------------------------------------------------------------------------
.text:000065D9                 align 4
.text:000065D9 _text           ends
.text:000065D9
.text:000065DC ; ===========================================================================
.text:000065DC
.text:000065DC ; Segment type: Pure code
.text:000065DC ; Segment permissions: Read/Execute
.text:000065DC _text           segment para public 'CODE' use32
.text:000065DC                 assume cs:_text
.text:000065DC                 ;org 65DCh
.text:000065DC ; COMDAT (pick any)
.text:000065DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000065DC
.text:000065DC ; =============== S U B R O U T I N E =======================================
.text:000065DC
.text:000065DC ; Attributes: bp-based frame
.text:000065DC
.text:000065DC ; _DWORD __thiscall NArchive::N7z::CUpdateItem::CUpdateItem(NArchive::N7z::CUpdateItem *this, const struct NArchive::N7z::CUpdateItem *)
.text:000065DC                 public ??0CUpdateItem@N7z@NArchive@@QAE@ABU012@@Z
.text:000065DC ??0CUpdateItem@N7z@NArchive@@QAE@ABU012@@Z proc near
.text:000065DC                                         ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::Add(NArchive::N7z::CUpdateItem const &)+5Ap
.text:000065DC
.text:000065DC var_4           = dword ptr -4
.text:000065DC arg_0           = dword ptr  8
.text:000065DC
.text:000065DC                 push    ebp
.text:000065DD                 mov     ebp, esp
.text:000065DF                 push    ecx
.text:000065E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065E7                 mov     [ebp+var_4], ecx
.text:000065EA                 mov     eax, [ebp+var_4]
.text:000065ED                 mov     ecx, [ebp+arg_0]
.text:000065F0                 mov     edx, [ecx]
.text:000065F2                 mov     [eax], edx
.text:000065F4                 mov     eax, [ebp+var_4]
.text:000065F7                 mov     ecx, [ebp+arg_0]
.text:000065FA                 mov     edx, [ecx+4]
.text:000065FD                 mov     [eax+4], edx
.text:00006600                 mov     eax, [ebp+var_4]
.text:00006603                 mov     ecx, [ebp+arg_0]
.text:00006606                 mov     edx, [ecx+8]
.text:00006609                 mov     [eax+8], edx
.text:0000660C                 mov     ecx, [ecx+0Ch]
.text:0000660F                 mov     [eax+0Ch], ecx
.text:00006612                 mov     edx, [ebp+var_4]
.text:00006615                 mov     eax, [ebp+arg_0]
.text:00006618                 mov     ecx, [eax+10h]
.text:0000661B                 mov     [edx+10h], ecx
.text:0000661E                 mov     eax, [eax+14h]
.text:00006621                 mov     [edx+14h], eax
.text:00006624                 mov     ecx, [ebp+var_4]
.text:00006627                 mov     edx, [ebp+arg_0]
.text:0000662A                 mov     eax, [edx+18h]
.text:0000662D                 mov     [ecx+18h], eax
.text:00006630                 mov     edx, [edx+1Ch]
.text:00006633                 mov     [ecx+1Ch], edx
.text:00006636                 mov     eax, [ebp+var_4]
.text:00006639                 mov     ecx, [ebp+arg_0]
.text:0000663C                 mov     edx, [ecx+20h]
.text:0000663F                 mov     [eax+20h], edx
.text:00006642                 mov     ecx, [ecx+24h]
.text:00006645                 mov     [eax+24h], ecx
.text:00006648                 mov     edx, [ebp+arg_0]
.text:0000664B                 add     edx, 28h ; '('
.text:0000664E                 push    edx
.text:0000664F                 mov     ecx, [ebp+var_4]
.text:00006652                 add     ecx, 28h ; '('
.text:00006655                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000665A                 mov     eax, [ebp+var_4]
.text:0000665D                 mov     ecx, [ebp+arg_0]
.text:00006660                 mov     edx, [ecx+34h]
.text:00006663                 mov     [eax+34h], edx
.text:00006666                 mov     eax, [ebp+var_4]
.text:00006669                 mov     ecx, [ebp+arg_0]
.text:0000666C                 mov     dl, [ecx+38h]
.text:0000666F                 mov     [eax+38h], dl
.text:00006672                 mov     eax, [ebp+var_4]
.text:00006675                 mov     ecx, [ebp+arg_0]
.text:00006678                 mov     dl, [ecx+39h]
.text:0000667B                 mov     [eax+39h], dl
.text:0000667E                 mov     eax, [ebp+var_4]
.text:00006681                 mov     ecx, [ebp+arg_0]
.text:00006684                 mov     dl, [ecx+3Ah]
.text:00006687                 mov     [eax+3Ah], dl
.text:0000668A                 mov     eax, [ebp+var_4]
.text:0000668D                 mov     ecx, [ebp+arg_0]
.text:00006690                 mov     dl, [ecx+3Bh]
.text:00006693                 mov     [eax+3Bh], dl
.text:00006696                 mov     eax, [ebp+var_4]
.text:00006699                 mov     ecx, [ebp+arg_0]
.text:0000669C                 mov     dl, [ecx+3Ch]
.text:0000669F                 mov     [eax+3Ch], dl
.text:000066A2                 mov     eax, [ebp+var_4]
.text:000066A5                 mov     ecx, [ebp+arg_0]
.text:000066A8                 mov     dl, [ecx+3Dh]
.text:000066AB                 mov     [eax+3Dh], dl
.text:000066AE                 mov     eax, [ebp+var_4]
.text:000066B1                 mov     ecx, [ebp+arg_0]
.text:000066B4                 mov     dl, [ecx+3Eh]
.text:000066B7                 mov     [eax+3Eh], dl
.text:000066BA                 mov     eax, [ebp+var_4]
.text:000066BD                 mov     ecx, [ebp+arg_0]
.text:000066C0                 mov     dl, [ecx+3Fh]
.text:000066C3                 mov     [eax+3Fh], dl
.text:000066C6                 mov     eax, [ebp+var_4]
.text:000066C9                 add     esp, 4
.text:000066CC                 cmp     ebp, esp
.text:000066CE                 call    __RTC_CheckEsp
.text:000066D3                 mov     esp, ebp
.text:000066D5                 pop     ebp
.text:000066D6                 retn    4
.text:000066D6 ??0CUpdateItem@N7z@NArchive@@QAE@ABU012@@Z endp
.text:000066D6
.text:000066D6 ; ---------------------------------------------------------------------------
.text:000066D9                 align 4
.text:000066D9 _text           ends
.text:000066D9
.text:000066DC ; ===========================================================================
.text:000066DC
.text:000066DC ; Segment type: Pure code
.text:000066DC ; Segment permissions: Read/Execute
.text:000066DC _text           segment para public 'CODE' use32
.text:000066DC                 assume cs:_text
.text:000066DC                 ;org 66DCh
.text:000066DC ; COMDAT (pick any)
.text:000066DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000066DC
.text:000066DC ; =============== S U B R O U T I N E =======================================
.text:000066DC
.text:000066DC ; Attributes: bp-based frame
.text:000066DC
.text:000066DC ; public: void * __thiscall NArchive::N7z::CUpdateItem::`scalar deleting destructor'(unsigned int)
.text:000066DC                 public ??_GCUpdateItem@N7z@NArchive@@QAEPAXI@Z
.text:000066DC ??_GCUpdateItem@N7z@NArchive@@QAEPAXI@Z proc near
.text:000066DC                                         ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>(void)+7Fp
.text:000066DC                                         ; CObjectVector<NArchive::N7z::CUpdateItem>::Clear(void)+59p
.text:000066DC
.text:000066DC var_4           = dword ptr -4
.text:000066DC arg_0           = dword ptr  8
.text:000066DC
.text:000066DC                 push    ebp
.text:000066DD                 mov     ebp, esp
.text:000066DF                 push    ecx
.text:000066E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066E7                 mov     [ebp+var_4], ecx
.text:000066EA                 mov     ecx, [ebp+var_4] ; this
.text:000066ED                 call    ??1CUpdateItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUpdateItem::~CUpdateItem(void)
.text:000066F2                 mov     eax, [ebp+arg_0]
.text:000066F5                 and     eax, 1
.text:000066F8                 jz      short loc_6706
.text:000066FA                 mov     ecx, [ebp+var_4]
.text:000066FD                 push    ecx             ; void *
.text:000066FE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006703                 add     esp, 4
.text:00006706
.text:00006706 loc_6706:                               ; CODE XREF: NArchive::N7z::CUpdateItem::`scalar deleting destructor'(uint)+1Cj
.text:00006706                 mov     eax, [ebp+var_4]
.text:00006709                 add     esp, 4
.text:0000670C                 cmp     ebp, esp
.text:0000670E                 call    __RTC_CheckEsp
.text:00006713                 mov     esp, ebp
.text:00006715                 pop     ebp
.text:00006716                 retn    4
.text:00006716 ??_GCUpdateItem@N7z@NArchive@@QAEPAXI@Z endp
.text:00006716
.text:00006716 ; ---------------------------------------------------------------------------
.text:00006719                 align 4
.text:00006719 _text           ends
.text:00006719
.text:0000671C ; ===========================================================================
.text:0000671C
.text:0000671C ; Segment type: Pure code
.text:0000671C ; Segment permissions: Read/Execute
.text:0000671C _text           segment para public 'CODE' use32
.text:0000671C                 assume cs:_text
.text:0000671C                 ;org 671Ch
.text:0000671C ; COMDAT (pick any)
.text:0000671C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000671C
.text:0000671C ; =============== S U B R O U T I N E =======================================
.text:0000671C
.text:0000671C ; Attributes: bp-based frame
.text:0000671C
.text:0000671C ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:0000671C                 public ??1CProp@@QAE@XZ
.text:0000671C ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:0000671C
.text:0000671C var_4           = dword ptr -4
.text:0000671C
.text:0000671C                 push    ebp
.text:0000671D                 mov     ebp, esp
.text:0000671F                 push    ecx
.text:00006720                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006727                 mov     [ebp+var_4], ecx
.text:0000672A                 mov     ecx, [ebp+var_4]
.text:0000672D                 add     ecx, 8          ; this
.text:00006730                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00006735                 add     esp, 4
.text:00006738                 cmp     ebp, esp
.text:0000673A                 call    __RTC_CheckEsp
.text:0000673F                 mov     esp, ebp
.text:00006741                 pop     ebp
.text:00006742                 retn
.text:00006742 ??1CProp@@QAE@XZ endp
.text:00006742
.text:00006742 ; ---------------------------------------------------------------------------
.text:00006743                 align 4
.text:00006743 _text           ends
.text:00006743
.text:00006744 ; ===========================================================================
.text:00006744
.text:00006744 ; Segment type: Pure code
.text:00006744 ; Segment permissions: Read/Execute
.text:00006744 _text           segment para public 'CODE' use32
.text:00006744                 assume cs:_text
.text:00006744                 ;org 6744h
.text:00006744 ; COMDAT (pick any)
.text:00006744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006744
.text:00006744 ; =============== S U B R O U T I N E =======================================
.text:00006744
.text:00006744 ; Attributes: bp-based frame
.text:00006744
.text:00006744 ; public: __thiscall CMethodProps::CMethodProps(class CMethodProps const &)
.text:00006744                 public ??0CMethodProps@@QAE@ABV0@@Z
.text:00006744 ??0CMethodProps@@QAE@ABV0@@Z proc near  ; CODE XREF: COneMethodInfo::COneMethodInfo(COneMethodInfo const &)+34p
.text:00006744
.text:00006744 var_4           = dword ptr -4
.text:00006744 arg_0           = dword ptr  8
.text:00006744
.text:00006744                 push    ebp
.text:00006745                 mov     ebp, esp
.text:00006747                 push    ecx
.text:00006748                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000674F                 mov     [ebp+var_4], ecx
.text:00006752                 mov     eax, [ebp+arg_0]
.text:00006755                 push    eax
.text:00006756                 mov     ecx, [ebp+var_4]
.text:00006759                 call    ??0CProps@@QAE@ABU0@@Z ; CProps::CProps(CProps const &)
.text:0000675E                 mov     eax, [ebp+var_4]
.text:00006761                 add     esp, 4
.text:00006764                 cmp     ebp, esp
.text:00006766                 call    __RTC_CheckEsp
.text:0000676B                 mov     esp, ebp
.text:0000676D                 pop     ebp
.text:0000676E                 retn    4
.text:0000676E ??0CMethodProps@@QAE@ABV0@@Z endp
.text:0000676E
.text:0000676E ; ---------------------------------------------------------------------------
.text:00006771                 align 4
.text:00006771 _text           ends
.text:00006771
.text:00006774 ; ===========================================================================
.text:00006774
.text:00006774 ; Segment type: Pure code
.text:00006774 ; Segment permissions: Read/Execute
.text:00006774 _text           segment para public 'CODE' use32
.text:00006774                 assume cs:_text
.text:00006774                 ;org 6774h
.text:00006774 ; COMDAT (pick any)
.text:00006774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006774
.text:00006774 ; =============== S U B R O U T I N E =======================================
.text:00006774
.text:00006774 ; Attributes: bp-based frame
.text:00006774
.text:00006774 ; _DWORD __thiscall NArchive::N7z::CMethodFull::~CMethodFull(NArchive::N7z::CMethodFull *__hidden this)
.text:00006774                 public ??1CMethodFull@N7z@NArchive@@QAE@XZ
.text:00006774 ??1CMethodFull@N7z@NArchive@@QAE@XZ proc near
.text:00006774                                         ; CODE XREF: NArchive::N7z::CMethodFull::`scalar deleting destructor'(uint)+11p
.text:00006774
.text:00006774 var_4           = dword ptr -4
.text:00006774
.text:00006774                 push    ebp
.text:00006775                 mov     ebp, esp
.text:00006777                 push    ecx
.text:00006778                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000677F                 mov     [ebp+var_4], ecx
.text:00006782                 mov     ecx, [ebp+var_4] ; this
.text:00006785                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:0000678A                 add     esp, 4
.text:0000678D                 cmp     ebp, esp
.text:0000678F                 call    __RTC_CheckEsp
.text:00006794                 mov     esp, ebp
.text:00006796                 pop     ebp
.text:00006797                 retn
.text:00006797 ??1CMethodFull@N7z@NArchive@@QAE@XZ endp
.text:00006797
.text:00006797 _text           ends
.text:00006797
.text:00006798 ; ===========================================================================
.text:00006798
.text:00006798 ; Segment type: Pure code
.text:00006798 ; Segment permissions: Read/Execute
.text:00006798 _text           segment para public 'CODE' use32
.text:00006798                 assume cs:_text
.text:00006798                 ;org 6798h
.text:00006798 ; COMDAT (pick any)
.text:00006798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006798
.text:00006798 ; =============== S U B R O U T I N E =======================================
.text:00006798
.text:00006798 ; Attributes: bp-based frame
.text:00006798
.text:00006798 ; _DWORD __thiscall NArchive::N7z::CFolder::~CFolder(NArchive::N7z::CFolder *__hidden this)
.text:00006798                 public ??1CFolder@N7z@NArchive@@QAE@XZ
.text:00006798 ??1CFolder@N7z@NArchive@@QAE@XZ proc near
.text:00006798                                         ; CODE XREF: NArchive::N7z::CFolder::`scalar deleting destructor'(uint)+11p
.text:00006798
.text:00006798 var_10          = dword ptr -10h
.text:00006798 var_C           = dword ptr -0Ch
.text:00006798 var_4           = dword ptr -4
.text:00006798
.text:00006798                 push    ebp
.text:00006799                 mov     ebp, esp
.text:0000679B                 push    0FFFFFFFFh
.text:0000679D                 push    offset __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ
.text:000067A2                 mov     eax, large fs:0
.text:000067A8                 push    eax
.text:000067A9                 push    ecx
.text:000067AA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000067B1                 mov     eax, dword ptr ds:___security_cookie
.text:000067B6                 xor     eax, ebp
.text:000067B8                 push    eax
.text:000067B9                 lea     eax, [ebp+var_C]
.text:000067BC                 mov     large fs:0, eax
.text:000067C2                 mov     [ebp+var_10], ecx
.text:000067C5                 mov     [ebp+var_4], 1
.text:000067CC                 mov     ecx, [ebp+var_10]
.text:000067CF                 add     ecx, 10h
.text:000067D2                 call    ??1?$CObjArray2@I@@QAE@XZ ; CObjArray2<uint>::~CObjArray2<uint>(void)
.text:000067D7                 mov     byte ptr [ebp+var_4], 0
.text:000067DB                 mov     ecx, [ebp+var_10]
.text:000067DE                 add     ecx, 8
.text:000067E1                 call    ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>(void)
.text:000067E6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000067ED                 mov     ecx, [ebp+var_10]
.text:000067F0                 call    ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text:000067F5                 mov     ecx, [ebp+var_C]
.text:000067F8                 mov     large fs:0, ecx
.text:000067FF                 pop     ecx
.text:00006800                 add     esp, 10h
.text:00006803                 cmp     ebp, esp
.text:00006805                 call    __RTC_CheckEsp
.text:0000680A                 mov     esp, ebp
.text:0000680C                 pop     ebp
.text:0000680D                 retn
.text:0000680D ??1CFolder@N7z@NArchive@@QAE@XZ endp
.text:0000680D
.text:0000680D ; ---------------------------------------------------------------------------
.text:0000680E                 align 10h
.text:0000680E _text           ends
.text:0000680E
.text$x:00006810 ; ===========================================================================
.text$x:00006810
.text$x:00006810 ; Segment type: Pure code
.text$x:00006810 ; Segment permissions: Read/Execute
.text$x:00006810 _text$x         segment para public 'CODE' use32
.text$x:00006810                 assume cs:_text$x
.text$x:00006810                 ;org 6810h
.text$x:00006810 ; COMDAT (pick associative to section at 6798)
.text$x:00006810                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006810
.text$x:00006810 ; =============== S U B R O U T I N E =======================================
.text$x:00006810
.text$x:00006810
.text$x:00006810 __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00006810                                         ; DATA XREF: .xdata$x:00006844o
.text$x:00006810                 mov     ecx, [ebp-10h]
.text$x:00006813                 jmp     ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text$x:00006813 __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00006813
.text$x:00006818
.text$x:00006818 ; =============== S U B R O U T I N E =======================================
.text$x:00006818
.text$x:00006818
.text$x:00006818 __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00006818                                         ; DATA XREF: .xdata$x:0000684Co
.text$x:00006818                 mov     ecx, [ebp-10h]
.text$x:0000681B                 add     ecx, 8
.text$x:0000681E                 jmp     ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>(void)
.text$x:0000681E __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1 endp
.text$x:0000681E
.text$x:00006823
.text$x:00006823 ; =============== S U B R O U T I N E =======================================
.text$x:00006823
.text$x:00006823
.text$x:00006823 __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ proc near
.text$x:00006823                                         ; DATA XREF: NArchive::N7z::CFolder::~CFolder(void)+5o
.text$x:00006823
.text$x:00006823 arg_4           = dword ptr  8
.text$x:00006823
.text$x:00006823                 mov     edx, [esp+arg_4]
.text$x:00006827                 lea     eax, [edx+0Ch]
.text$x:0000682A                 mov     ecx, [edx-8]
.text$x:0000682D                 xor     ecx, eax
.text$x:0000682F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006834                 mov     eax, offset __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ
.text$x:00006839                 jmp     ___CxxFrameHandler3
.text$x:00006839 __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ endp
.text$x:00006839
.text$x:00006839 ; ---------------------------------------------------------------------------
.text$x:0000683E                 align 10h
.text$x:0000683E _text$x         ends
.text$x:0000683E
.xdata$x:00006840 ; ===========================================================================
.xdata$x:00006840
.xdata$x:00006840 ; Segment type: Pure data
.xdata$x:00006840 ; Segment permissions: Read
.xdata$x:00006840 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006840                 assume cs:_xdata$x
.xdata$x:00006840                 ;org 6840h
.xdata$x:00006840 ; COMDAT (pick associative to section at 6798)
.xdata$x:00006840 __unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00006840                                         ; DATA XREF: .xdata$x:00006858o
.xdata$x:00006841                 db 0FFh
.xdata$x:00006842                 db 0FFh
.xdata$x:00006843                 db 0FFh
.xdata$x:00006844                 dd offset __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0
.xdata$x:00006848                 db    0
.xdata$x:00006849                 db    0
.xdata$x:0000684A                 db    0
.xdata$x:0000684B                 db    0
.xdata$x:0000684C                 dd offset __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1
.xdata$x:00006850 __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00006850                                         ; DATA XREF: __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00006851                 db    5
.xdata$x:00006852                 db  93h ; ô
.xdata$x:00006853                 db  19h
.xdata$x:00006854                 db    2
.xdata$x:00006855                 db    0
.xdata$x:00006856                 db    0
.xdata$x:00006857                 db    0
.xdata$x:00006858                 dd offset __unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ
.xdata$x:0000685C                 db    0
.xdata$x:0000685D                 db    0
.xdata$x:0000685E                 db    0
.xdata$x:0000685F                 db    0
.xdata$x:00006860                 db    0
.xdata$x:00006861                 db    0
.xdata$x:00006862                 db    0
.xdata$x:00006863                 db    0
.xdata$x:00006864                 db    0
.xdata$x:00006865                 db    0
.xdata$x:00006866                 db    0
.xdata$x:00006867                 db    0
.xdata$x:00006868                 db    0
.xdata$x:00006869                 db    0
.xdata$x:0000686A                 db    0
.xdata$x:0000686B                 db    0
.xdata$x:0000686C                 db    0
.xdata$x:0000686D                 db    0
.xdata$x:0000686E                 db    0
.xdata$x:0000686F                 db    0
.xdata$x:00006870                 db    1
.xdata$x:00006871                 db    0
.xdata$x:00006872                 db    0
.xdata$x:00006873                 db    0
.xdata$x:00006873 _xdata$x        ends
.xdata$x:00006873
.text:00006874 ; ===========================================================================
.text:00006874
.text:00006874 ; Segment type: Pure code
.text:00006874 ; Segment permissions: Read/Execute
.text:00006874 _text           segment para public 'CODE' use32
.text:00006874                 assume cs:_text
.text:00006874                 ;org 6874h
.text:00006874 ; COMDAT (pick any)
.text:00006874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006874
.text:00006874 ; =============== S U B R O U T I N E =======================================
.text:00006874
.text:00006874 ; Attributes: bp-based frame
.text:00006874
.text:00006874 ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::~CObjArray2<struct NArchive::N7z::CCoderInfo>(void)
.text:00006874                 public ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
.text:00006874 ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ proc near
.text:00006874                                         ; CODE XREF: NArchive::N7z::CFolder::~CFolder(void)+58p
.text:00006874                                         ; __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0+3j
.text:00006874
.text:00006874 var_10          = dword ptr -10h
.text:00006874 var_C           = dword ptr -0Ch
.text:00006874 var_8           = dword ptr -8
.text:00006874 var_4           = dword ptr -4
.text:00006874
.text:00006874                 push    ebp
.text:00006875                 mov     ebp, esp
.text:00006877                 sub     esp, 10h
.text:0000687A                 mov     eax, 0CCCCCCCCh
.text:0000687F                 mov     [ebp+var_10], eax
.text:00006882                 mov     [ebp+var_C], eax
.text:00006885                 mov     [ebp+var_8], eax
.text:00006888                 mov     [ebp+var_4], eax
.text:0000688B                 mov     [ebp+var_4], ecx
.text:0000688E                 mov     eax, [ebp+var_4]
.text:00006891                 mov     ecx, [eax]
.text:00006893                 mov     [ebp+var_C], ecx
.text:00006896                 mov     edx, [ebp+var_C]
.text:00006899                 mov     [ebp+var_8], edx
.text:0000689C                 cmp     [ebp+var_8], 0
.text:000068A0                 jz      short loc_68B1
.text:000068A2                 push    3
.text:000068A4                 mov     ecx, [ebp+var_8]
.text:000068A7                 call    ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)
.text:000068AC                 mov     [ebp+var_10], eax
.text:000068AF                 jmp     short loc_68B8
.text:000068B1 ; ---------------------------------------------------------------------------
.text:000068B1
.text:000068B1 loc_68B1:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+2Cj
.text:000068B1                 mov     [ebp+var_10], 0
.text:000068B8
.text:000068B8 loc_68B8:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+3Bj
.text:000068B8                 add     esp, 10h
.text:000068BB                 cmp     ebp, esp
.text:000068BD                 call    __RTC_CheckEsp
.text:000068C2                 mov     esp, ebp
.text:000068C4                 pop     ebp
.text:000068C5                 retn
.text:000068C5 ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ endp
.text:000068C5
.text:000068C5 ; ---------------------------------------------------------------------------
.text:000068C6                 align 4
.text:000068C6 _text           ends
.text:000068C6
.text:000068C8 ; ===========================================================================
.text:000068C8
.text:000068C8 ; Segment type: Pure code
.text:000068C8 ; Segment permissions: Read/Execute
.text:000068C8 _text           segment para public 'CODE' use32
.text:000068C8                 assume cs:_text
.text:000068C8                 ;org 68C8h
.text:000068C8 ; COMDAT (pick any)
.text:000068C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000068C8
.text:000068C8 ; =============== S U B R O U T I N E =======================================
.text:000068C8
.text:000068C8 ; Attributes: bp-based frame
.text:000068C8
.text:000068C8 ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::~CObjArray2<struct NArchive::N7z::CBond>(void)
.text:000068C8                 public ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
.text:000068C8 ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ proc near
.text:000068C8                                         ; CODE XREF: NArchive::N7z::CFolder::~CFolder(void)+49p
.text:000068C8                                         ; __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1+6j
.text:000068C8
.text:000068C8 var_8           = dword ptr -8
.text:000068C8 var_4           = dword ptr -4
.text:000068C8
.text:000068C8                 push    ebp
.text:000068C9                 mov     ebp, esp
.text:000068CB                 sub     esp, 8
.text:000068CE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000068D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068DC                 mov     [ebp+var_4], ecx
.text:000068DF                 mov     eax, [ebp+var_4]
.text:000068E2                 mov     ecx, [eax]
.text:000068E4                 mov     [ebp+var_8], ecx
.text:000068E7                 mov     edx, [ebp+var_8]
.text:000068EA                 push    edx             ; void *
.text:000068EB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000068F0                 add     esp, 4
.text:000068F3                 add     esp, 8
.text:000068F6                 cmp     ebp, esp
.text:000068F8                 call    __RTC_CheckEsp
.text:000068FD                 mov     esp, ebp
.text:000068FF                 pop     ebp
.text:00006900                 retn
.text:00006900 ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ endp
.text:00006900
.text:00006900 ; ---------------------------------------------------------------------------
.text:00006901                 align 4
.text:00006901 _text           ends
.text:00006901
.text:00006904 ; ===========================================================================
.text:00006904
.text:00006904 ; Segment type: Pure code
.text:00006904 ; Segment permissions: Read/Execute
.text:00006904 _text           segment para public 'CODE' use32
.text:00006904                 assume cs:_text
.text:00006904                 ;org 6904h
.text:00006904 ; COMDAT (pick any)
.text:00006904                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006904
.text:00006904 ; =============== S U B R O U T I N E =======================================
.text:00006904
.text:00006904 ; Attributes: bp-based frame
.text:00006904
.text:00006904 ; public: __thiscall CObjArray2<unsigned int>::~CObjArray2<unsigned int>(void)
.text:00006904                 public ??1?$CObjArray2@I@@QAE@XZ
.text:00006904 ??1?$CObjArray2@I@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CFolder::~CFolder(void)+3Ap
.text:00006904
.text:00006904 var_8           = dword ptr -8
.text:00006904 var_4           = dword ptr -4
.text:00006904
.text:00006904                 push    ebp
.text:00006905                 mov     ebp, esp
.text:00006907                 sub     esp, 8
.text:0000690A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006911                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006918                 mov     [ebp+var_4], ecx
.text:0000691B                 mov     eax, [ebp+var_4]
.text:0000691E                 mov     ecx, [eax]
.text:00006920                 mov     [ebp+var_8], ecx
.text:00006923                 mov     edx, [ebp+var_8]
.text:00006926                 push    edx             ; void *
.text:00006927                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000692C                 add     esp, 4
.text:0000692F                 add     esp, 8
.text:00006932                 cmp     ebp, esp
.text:00006934                 call    __RTC_CheckEsp
.text:00006939                 mov     esp, ebp
.text:0000693B                 pop     ebp
.text:0000693C                 retn
.text:0000693C ??1?$CObjArray2@I@@QAE@XZ endp
.text:0000693C
.text:0000693C ; ---------------------------------------------------------------------------
.text:0000693D                 align 10h
.text:0000693D _text           ends
.text:0000693D
.text:00006940 ; ===========================================================================
.text:00006940
.text:00006940 ; Segment type: Pure code
.text:00006940 ; Segment permissions: Read/Execute
.text:00006940 _text           segment para public 'CODE' use32
.text:00006940                 assume cs:_text
.text:00006940                 ;org 6940h
.text:00006940 ; COMDAT (pick any)
.text:00006940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006940
.text:00006940 ; =============== S U B R O U T I N E =======================================
.text:00006940
.text:00006940 ; Attributes: bp-based frame
.text:00006940
.text:00006940 ; public: void * __thiscall NArchive::N7z::CCoderInfo::`vector deleting destructor'(unsigned int)
.text:00006940                 public ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
.text:00006940 ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z proc near
.text:00006940                                         ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+33p
.text:00006940
.text:00006940 var_4           = dword ptr -4
.text:00006940 arg_0           = dword ptr  8
.text:00006940
.text:00006940                 push    ebp
.text:00006941                 mov     ebp, esp
.text:00006943                 push    ecx
.text:00006944                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000694B                 mov     [ebp+var_4], ecx
.text:0000694E                 mov     eax, [ebp+arg_0]
.text:00006951                 and     eax, 2
.text:00006954                 jz      short loc_698C
.text:00006956                 push    offset ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:0000695B                 mov     ecx, [ebp+var_4]
.text:0000695E                 mov     edx, [ecx-4]
.text:00006961                 push    edx
.text:00006962                 push    18h
.text:00006964                 mov     eax, [ebp+var_4]
.text:00006967                 push    eax
.text:00006968                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:0000696D                 mov     ecx, [ebp+arg_0]
.text:00006970                 and     ecx, 1
.text:00006973                 jz      short loc_6984
.text:00006975                 mov     edx, [ebp+var_4]
.text:00006978                 sub     edx, 4
.text:0000697B                 push    edx             ; void *
.text:0000697C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006981                 add     esp, 4
.text:00006984
.text:00006984 loc_6984:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+33j
.text:00006984                 mov     eax, [ebp+var_4]
.text:00006987                 sub     eax, 4
.text:0000698A                 jmp     short loc_69AB
.text:0000698C ; ---------------------------------------------------------------------------
.text:0000698C
.text:0000698C loc_698C:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+14j
.text:0000698C                 mov     ecx, [ebp+var_4] ; this
.text:0000698F                 call    ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:00006994                 mov     eax, [ebp+arg_0]
.text:00006997                 and     eax, 1
.text:0000699A                 jz      short loc_69A8
.text:0000699C                 mov     ecx, [ebp+var_4]
.text:0000699F                 push    ecx             ; void *
.text:000069A0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000069A5                 add     esp, 4
.text:000069A8
.text:000069A8 loc_69A8:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+5Aj
.text:000069A8                 mov     eax, [ebp+var_4]
.text:000069AB
.text:000069AB loc_69AB:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Aj
.text:000069AB                 add     esp, 4
.text:000069AE                 cmp     ebp, esp
.text:000069B0                 call    __RTC_CheckEsp
.text:000069B5                 mov     esp, ebp
.text:000069B7                 pop     ebp
.text:000069B8                 retn    4
.text:000069B8 ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z endp
.text:000069B8
.text:000069B8 ; ---------------------------------------------------------------------------
.text:000069BB                 align 4
.text:000069BB _text           ends
.text:000069BB
.text:000069BC ; ===========================================================================
.text:000069BC
.text:000069BC ; Segment type: Pure code
.text:000069BC ; Segment permissions: Read/Execute
.text:000069BC _text           segment para public 'CODE' use32
.text:000069BC                 assume cs:_text
.text:000069BC                 ;org 69BCh
.text:000069BC ; COMDAT (pick any)
.text:000069BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000069BC
.text:000069BC ; =============== S U B R O U T I N E =======================================
.text:000069BC
.text:000069BC ; Attributes: bp-based frame
.text:000069BC
.text:000069BC ; _DWORD __thiscall NArchive::N7z::CCoderInfo::~CCoderInfo(NArchive::N7z::CCoderInfo *__hidden this)
.text:000069BC                 public ??1CCoderInfo@N7z@NArchive@@QAE@XZ
.text:000069BC ??1CCoderInfo@N7z@NArchive@@QAE@XZ proc near
.text:000069BC                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Fp
.text:000069BC                                         ; DATA XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+16o
.text:000069BC
.text:000069BC var_4           = dword ptr -4
.text:000069BC
.text:000069BC                 push    ebp
.text:000069BD                 mov     ebp, esp
.text:000069BF                 push    ecx
.text:000069C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069C7                 mov     [ebp+var_4], ecx
.text:000069CA                 mov     ecx, [ebp+var_4]
.text:000069CD                 add     ecx, 8
.text:000069D0                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000069D5                 add     esp, 4
.text:000069D8                 cmp     ebp, esp
.text:000069DA                 call    __RTC_CheckEsp
.text:000069DF                 mov     esp, ebp
.text:000069E1                 pop     ebp
.text:000069E2                 retn
.text:000069E2 ??1CCoderInfo@N7z@NArchive@@QAE@XZ endp
.text:000069E2
.text:000069E2 ; ---------------------------------------------------------------------------
.text:000069E3                 align 4
.text:000069E3 _text           ends
.text:000069E3
.text:000069E4 ; ===========================================================================
.text:000069E4
.text:000069E4 ; Segment type: Pure code
.text:000069E4 ; Segment permissions: Read/Execute
.text:000069E4 _text           segment para public 'CODE' use32
.text:000069E4                 assume cs:_text
.text:000069E4                 ;org 69E4h
.text:000069E4 ; COMDAT (pick any)
.text:000069E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000069E4
.text:000069E4 ; =============== S U B R O U T I N E =======================================
.text:000069E4
.text:000069E4 ; Attributes: bp-based frame
.text:000069E4
.text:000069E4 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:000069E4                 public ??1?$CBuffer@E@@QAE@XZ
.text:000069E4 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CCoderInfo::~CCoderInfo(void)+14p
.text:000069E4
.text:000069E4 var_8           = dword ptr -8
.text:000069E4 var_4           = dword ptr -4
.text:000069E4
.text:000069E4                 push    ebp
.text:000069E5                 mov     ebp, esp
.text:000069E7                 sub     esp, 8
.text:000069EA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000069F1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069F8                 mov     [ebp+var_4], ecx
.text:000069FB                 mov     eax, [ebp+var_4]
.text:000069FE                 mov     ecx, [eax]
.text:00006A00                 mov     [ebp+var_8], ecx
.text:00006A03                 mov     edx, [ebp+var_8]
.text:00006A06                 push    edx             ; void *
.text:00006A07                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006A0C                 add     esp, 4
.text:00006A0F                 add     esp, 8
.text:00006A12                 cmp     ebp, esp
.text:00006A14                 call    __RTC_CheckEsp
.text:00006A19                 mov     esp, ebp
.text:00006A1B                 pop     ebp
.text:00006A1C                 retn
.text:00006A1C ??1?$CBuffer@E@@QAE@XZ endp
.text:00006A1C
.text:00006A1C ; ---------------------------------------------------------------------------
.text:00006A1D                 align 10h
.text:00006A1D _text           ends
.text:00006A1D
.text:00006A20 ; ===========================================================================
.text:00006A20
.text:00006A20 ; Segment type: Pure code
.text:00006A20 ; Segment permissions: Read/Execute
.text:00006A20 _text           segment para public 'CODE' use32
.text:00006A20                 assume cs:_text
.text:00006A20                 ;org 6A20h
.text:00006A20 ; COMDAT (pick any)
.text:00006A20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A20
.text:00006A20 ; =============== S U B R O U T I N E =======================================
.text:00006A20
.text:00006A20 ; Attributes: bp-based frame
.text:00006A20
.text:00006A20 ; public: __thiscall CProps::CProps(struct CProps const &)
.text:00006A20                 public ??0CProps@@QAE@ABU0@@Z
.text:00006A20 ??0CProps@@QAE@ABU0@@Z proc near        ; CODE XREF: CMethodProps::CMethodProps(CMethodProps const &)+15p
.text:00006A20
.text:00006A20 var_4           = dword ptr -4
.text:00006A20 arg_0           = dword ptr  8
.text:00006A20
.text:00006A20                 push    ebp
.text:00006A21                 mov     ebp, esp
.text:00006A23                 push    ecx
.text:00006A24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A2B                 mov     [ebp+var_4], ecx
.text:00006A2E                 mov     eax, [ebp+arg_0]
.text:00006A31                 push    eax
.text:00006A32                 mov     ecx, [ebp+var_4]
.text:00006A35                 call    ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)
.text:00006A3A                 mov     eax, [ebp+var_4]
.text:00006A3D                 add     esp, 4
.text:00006A40                 cmp     ebp, esp
.text:00006A42                 call    __RTC_CheckEsp
.text:00006A47                 mov     esp, ebp
.text:00006A49                 pop     ebp
.text:00006A4A                 retn    4
.text:00006A4A ??0CProps@@QAE@ABU0@@Z endp
.text:00006A4A
.text:00006A4A ; ---------------------------------------------------------------------------
.text:00006A4D                 align 10h
.text:00006A4D _text           ends
.text:00006A4D
.text:00006A50 ; ===========================================================================
.text:00006A50
.text:00006A50 ; Segment type: Pure code
.text:00006A50 ; Segment permissions: Read/Execute
.text:00006A50 _text           segment para public 'CODE' use32
.text:00006A50                 assume cs:_text
.text:00006A50                 ;org 6A50h
.text:00006A50 ; COMDAT (pick any)
.text:00006A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A50
.text:00006A50 ; =============== S U B R O U T I N E =======================================
.text:00006A50
.text:00006A50 ; Attributes: bp-based frame
.text:00006A50
.text:00006A50 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006A50                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00006A50 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00006A50                                         ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(void)+11p
.text:00006A50                                         ; CObjectVector<CProp>::CObjectVector<CProp>(void)+11p ...
.text:00006A50
.text:00006A50 var_4           = dword ptr -4
.text:00006A50
.text:00006A50                 push    ebp
.text:00006A51                 mov     ebp, esp
.text:00006A53                 push    ecx
.text:00006A54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A5B                 mov     [ebp+var_4], ecx
.text:00006A5E                 mov     eax, [ebp+var_4]
.text:00006A61                 mov     dword ptr [eax], 0
.text:00006A67                 mov     ecx, [ebp+var_4]
.text:00006A6A                 mov     dword ptr [ecx+4], 0
.text:00006A71                 mov     edx, [ebp+var_4]
.text:00006A74                 mov     dword ptr [edx+8], 0
.text:00006A7B                 mov     eax, [ebp+var_4]
.text:00006A7E                 mov     esp, ebp
.text:00006A80                 pop     ebp
.text:00006A81                 retn
.text:00006A81 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00006A81
.text:00006A81 ; ---------------------------------------------------------------------------
.text:00006A82                 align 4
.text:00006A82 _text           ends
.text:00006A82
.text:00006A84 ; ===========================================================================
.text:00006A84
.text:00006A84 ; Segment type: Pure code
.text:00006A84 ; Segment permissions: Read/Execute
.text:00006A84 _text           segment para public 'CODE' use32
.text:00006A84                 assume cs:_text
.text:00006A84                 ;org 6A84h
.text:00006A84 ; COMDAT (pick any)
.text:00006A84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A84
.text:00006A84 ; =============== S U B R O U T I N E =======================================
.text:00006A84
.text:00006A84 ; Attributes: bp-based frame
.text:00006A84
.text:00006A84 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00006A84                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00006A84 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00006A84                                         ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+46p
.text:00006A84                                         ; CObjectVector<CProp>::Size(void)+11p ...
.text:00006A84
.text:00006A84 var_4           = dword ptr -4
.text:00006A84
.text:00006A84                 push    ebp
.text:00006A85                 mov     ebp, esp
.text:00006A87                 push    ecx
.text:00006A88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A8F                 mov     [ebp+var_4], ecx
.text:00006A92                 mov     eax, [ebp+var_4]
.text:00006A95                 mov     eax, [eax+4]
.text:00006A98                 mov     esp, ebp
.text:00006A9A                 pop     ebp
.text:00006A9B                 retn
.text:00006A9B ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00006A9B
.text:00006A9B _text           ends
.text:00006A9B
.text:00006A9C ; ===========================================================================
.text:00006A9C
.text:00006A9C ; Segment type: Pure code
.text:00006A9C ; Segment permissions: Read/Execute
.text:00006A9C _text           segment para public 'CODE' use32
.text:00006A9C                 assume cs:_text
.text:00006A9C                 ;org 6A9Ch
.text:00006A9C ; COMDAT (pick any)
.text:00006A9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A9C
.text:00006A9C ; =============== S U B R O U T I N E =======================================
.text:00006A9C
.text:00006A9C ; Attributes: bp-based frame
.text:00006A9C
.text:00006A9C ; public: bool __thiscall CRecordVector<void *>::IsEmpty(void)const
.text:00006A9C                 public ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
.text:00006A9C ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ proc near
.text:00006A9C                                         ; CODE XREF: CObjectVector<CProp>::IsEmpty(void)+11p
.text:00006A9C                                         ; CObjectVector<COneMethodInfo>::IsEmpty(void)+11p
.text:00006A9C
.text:00006A9C var_4           = dword ptr -4
.text:00006A9C
.text:00006A9C                 push    ebp
.text:00006A9D                 mov     ebp, esp
.text:00006A9F                 push    ecx
.text:00006AA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AA7                 mov     [ebp+var_4], ecx
.text:00006AAA                 mov     eax, [ebp+var_4]
.text:00006AAD                 xor     ecx, ecx
.text:00006AAF                 cmp     dword ptr [eax+4], 0
.text:00006AB3                 setz    cl
.text:00006AB6                 mov     al, cl
.text:00006AB8                 mov     esp, ebp
.text:00006ABA                 pop     ebp
.text:00006ABB                 retn
.text:00006ABB ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ endp
.text:00006ABB
.text:00006ABB _text           ends
.text:00006ABB
.text:00006ABC ; ===========================================================================
.text:00006ABC
.text:00006ABC ; Segment type: Pure code
.text:00006ABC ; Segment permissions: Read/Execute
.text:00006ABC _text           segment para public 'CODE' use32
.text:00006ABC                 assume cs:_text
.text:00006ABC                 ;org 6ABCh
.text:00006ABC ; COMDAT (pick any)
.text:00006ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006ABC
.text:00006ABC ; =============== S U B R O U T I N E =======================================
.text:00006ABC
.text:00006ABC ; Attributes: bp-based frame
.text:00006ABC
.text:00006ABC ; public: void __thiscall CRecordVector<void *>::ConstructReserve(unsigned int)
.text:00006ABC                 public ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
.text:00006ABC ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00006ABC                                         ; CODE XREF: CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(CObjectVector<COneMethodInfo> const &)+60p
.text:00006ABC                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+60p
.text:00006ABC
.text:00006ABC var_8           = dword ptr -8
.text:00006ABC var_4           = dword ptr -4
.text:00006ABC arg_0           = dword ptr  8
.text:00006ABC
.text:00006ABC                 push    ebp
.text:00006ABD                 mov     ebp, esp
.text:00006ABF                 sub     esp, 8
.text:00006AC2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006AC9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AD0                 mov     [ebp+var_4], ecx
.text:00006AD3                 cmp     [ebp+arg_0], 0
.text:00006AD7                 jz      short loc_6B09
.text:00006AD9                 xor     ecx, ecx
.text:00006ADB                 mov     eax, [ebp+arg_0]
.text:00006ADE                 mov     edx, 4
.text:00006AE3                 mul     edx
.text:00006AE5                 seto    cl
.text:00006AE8                 neg     ecx
.text:00006AEA                 or      ecx, eax
.text:00006AEC                 push    ecx             ; unsigned int
.text:00006AED                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006AF2                 add     esp, 4
.text:00006AF5                 mov     [ebp+var_8], eax
.text:00006AF8                 mov     eax, [ebp+var_4]
.text:00006AFB                 mov     ecx, [ebp+var_8]
.text:00006AFE                 mov     [eax], ecx
.text:00006B00                 mov     edx, [ebp+var_4]
.text:00006B03                 mov     eax, [ebp+arg_0]
.text:00006B06                 mov     [edx+8], eax
.text:00006B09
.text:00006B09 loc_6B09:                               ; CODE XREF: CRecordVector<void *>::ConstructReserve(uint)+1Bj
.text:00006B09                 add     esp, 8
.text:00006B0C                 cmp     ebp, esp
.text:00006B0E                 call    __RTC_CheckEsp
.text:00006B13                 mov     esp, ebp
.text:00006B15                 pop     ebp
.text:00006B16                 retn    4
.text:00006B16 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:00006B16
.text:00006B16 ; ---------------------------------------------------------------------------
.text:00006B19                 align 4
.text:00006B19 _text           ends
.text:00006B19
.text:00006B1C ; ===========================================================================
.text:00006B1C
.text:00006B1C ; Segment type: Pure code
.text:00006B1C ; Segment permissions: Read/Execute
.text:00006B1C _text           segment para public 'CODE' use32
.text:00006B1C                 assume cs:_text
.text:00006B1C                 ;org 6B1Ch
.text:00006B1C ; COMDAT (pick any)
.text:00006B1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B1C
.text:00006B1C ; =============== S U B R O U T I N E =======================================
.text:00006B1C
.text:00006B1C ; Attributes: bp-based frame
.text:00006B1C
.text:00006B1C ; public: void __thiscall CRecordVector<void *>::Reserve(unsigned int)
.text:00006B1C                 public ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
.text:00006B1C ?Reserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00006B1C                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+69p
.text:00006B1C
.text:00006B1C var_10          = dword ptr -10h
.text:00006B1C var_C           = dword ptr -0Ch
.text:00006B1C Dst             = dword ptr -8
.text:00006B1C var_4           = dword ptr -4
.text:00006B1C arg_0           = dword ptr  8
.text:00006B1C
.text:00006B1C                 push    ebp
.text:00006B1D                 mov     ebp, esp
.text:00006B1F                 sub     esp, 10h
.text:00006B22                 mov     eax, 0CCCCCCCCh
.text:00006B27                 mov     [ebp+var_10], eax
.text:00006B2A                 mov     [ebp+var_C], eax
.text:00006B2D                 mov     [ebp+Dst], eax
.text:00006B30                 mov     [ebp+var_4], eax
.text:00006B33                 mov     [ebp+var_4], ecx
.text:00006B36                 mov     eax, [ebp+var_4]
.text:00006B39                 mov     ecx, [ebp+arg_0]
.text:00006B3C                 cmp     ecx, [eax+8]
.text:00006B3F                 jbe     short loc_6BB0
.text:00006B41                 xor     ecx, ecx
.text:00006B43                 mov     eax, [ebp+arg_0]
.text:00006B46                 mov     edx, 4
.text:00006B4B                 mul     edx
.text:00006B4D                 seto    cl
.text:00006B50                 neg     ecx
.text:00006B52                 or      ecx, eax
.text:00006B54                 push    ecx             ; unsigned int
.text:00006B55                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006B5A                 add     esp, 4
.text:00006B5D                 mov     [ebp+var_C], eax
.text:00006B60                 mov     eax, [ebp+var_C]
.text:00006B63                 mov     [ebp+Dst], eax
.text:00006B66                 mov     ecx, [ebp+var_4]
.text:00006B69                 cmp     dword ptr [ecx+4], 0
.text:00006B6D                 jz      short loc_6B8B
.text:00006B6F                 mov     edx, [ebp+var_4]
.text:00006B72                 mov     eax, [edx+4]
.text:00006B75                 shl     eax, 2
.text:00006B78                 push    eax             ; Size
.text:00006B79                 mov     ecx, [ebp+var_4]
.text:00006B7C                 mov     edx, [ecx]
.text:00006B7E                 push    edx             ; Src
.text:00006B7F                 mov     eax, [ebp+Dst]
.text:00006B82                 push    eax             ; Dst
.text:00006B83                 call    _memcpy
.text:00006B88                 add     esp, 0Ch
.text:00006B8B
.text:00006B8B loc_6B8B:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+51j
.text:00006B8B                 mov     ecx, [ebp+var_4]
.text:00006B8E                 mov     edx, [ecx]
.text:00006B90                 mov     [ebp+var_10], edx
.text:00006B93                 mov     eax, [ebp+var_10]
.text:00006B96                 push    eax             ; void *
.text:00006B97                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006B9C                 add     esp, 4
.text:00006B9F                 mov     ecx, [ebp+var_4]
.text:00006BA2                 mov     edx, [ebp+Dst]
.text:00006BA5                 mov     [ecx], edx
.text:00006BA7                 mov     eax, [ebp+var_4]
.text:00006BAA                 mov     ecx, [ebp+arg_0]
.text:00006BAD                 mov     [eax+8], ecx
.text:00006BB0
.text:00006BB0 loc_6BB0:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+23j
.text:00006BB0                 add     esp, 10h
.text:00006BB3                 cmp     ebp, esp
.text:00006BB5                 call    __RTC_CheckEsp
.text:00006BBA                 mov     esp, ebp
.text:00006BBC                 pop     ebp
.text:00006BBD                 retn    4
.text:00006BBD ?Reserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:00006BBD
.text:00006BBD _text           ends
.text:00006BBD
.text:00006BC0 ; ===========================================================================
.text:00006BC0
.text:00006BC0 ; Segment type: Pure code
.text:00006BC0 ; Segment permissions: Read/Execute
.text:00006BC0 _text           segment para public 'CODE' use32
.text:00006BC0                 assume cs:_text
.text:00006BC0                 ;org 6BC0h
.text:00006BC0 ; COMDAT (pick any)
.text:00006BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006BC0
.text:00006BC0 ; =============== S U B R O U T I N E =======================================
.text:00006BC0
.text:00006BC0 ; Attributes: bp-based frame
.text:00006BC0
.text:00006BC0 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006BC0                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00006BC0 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00006BC0                                         ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+9Cp
.text:00006BC0                                         ; __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0+3j ...
.text:00006BC0
.text:00006BC0 var_8           = dword ptr -8
.text:00006BC0 var_4           = dword ptr -4
.text:00006BC0
.text:00006BC0                 push    ebp
.text:00006BC1                 mov     ebp, esp
.text:00006BC3                 sub     esp, 8
.text:00006BC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006BCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BD4                 mov     [ebp+var_4], ecx
.text:00006BD7                 mov     eax, [ebp+var_4]
.text:00006BDA                 mov     ecx, [eax]
.text:00006BDC                 mov     [ebp+var_8], ecx
.text:00006BDF                 mov     edx, [ebp+var_8]
.text:00006BE2                 push    edx             ; void *
.text:00006BE3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006BE8                 add     esp, 4
.text:00006BEB                 add     esp, 8
.text:00006BEE                 cmp     ebp, esp
.text:00006BF0                 call    __RTC_CheckEsp
.text:00006BF5                 mov     esp, ebp
.text:00006BF7                 pop     ebp
.text:00006BF8                 retn
.text:00006BF8 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00006BF8
.text:00006BF8 ; ---------------------------------------------------------------------------
.text:00006BF9                 align 4
.text:00006BF9 _text           ends
.text:00006BF9
.text:00006BFC ; ===========================================================================
.text:00006BFC
.text:00006BFC ; Segment type: Pure code
.text:00006BFC ; Segment permissions: Read/Execute
.text:00006BFC _text           segment para public 'CODE' use32
.text:00006BFC                 assume cs:_text
.text:00006BFC                 ;org 6BFCh
.text:00006BFC ; COMDAT (pick any)
.text:00006BFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006BFC
.text:00006BFC ; =============== S U B R O U T I N E =======================================
.text:00006BFC
.text:00006BFC ; Attributes: bp-based frame
.text:00006BFC
.text:00006BFC ; public: void __thiscall CRecordVector<void *>::ClearAndFree(void)
.text:00006BFC                 public ?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ
.text:00006BFC ?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00006BFC                                         ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::ClearAndFree(void)+19p
.text:00006BFC
.text:00006BFC var_8           = dword ptr -8
.text:00006BFC var_4           = dword ptr -4
.text:00006BFC
.text:00006BFC                 push    ebp
.text:00006BFD                 mov     ebp, esp
.text:00006BFF                 sub     esp, 8
.text:00006C02                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006C09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C10                 mov     [ebp+var_4], ecx
.text:00006C13                 mov     eax, [ebp+var_4]
.text:00006C16                 mov     ecx, [eax]
.text:00006C18                 mov     [ebp+var_8], ecx
.text:00006C1B                 mov     edx, [ebp+var_8]
.text:00006C1E                 push    edx             ; void *
.text:00006C1F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006C24                 add     esp, 4
.text:00006C27                 mov     eax, [ebp+var_4]
.text:00006C2A                 mov     dword ptr [eax], 0
.text:00006C30                 mov     ecx, [ebp+var_4]
.text:00006C33                 mov     dword ptr [ecx+4], 0
.text:00006C3A                 mov     edx, [ebp+var_4]
.text:00006C3D                 mov     dword ptr [edx+8], 0
.text:00006C44                 add     esp, 8
.text:00006C47                 cmp     ebp, esp
.text:00006C49                 call    __RTC_CheckEsp
.text:00006C4E                 mov     esp, ebp
.text:00006C50                 pop     ebp
.text:00006C51                 retn
.text:00006C51 ?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ endp
.text:00006C51
.text:00006C51 ; ---------------------------------------------------------------------------
.text:00006C52                 align 4
.text:00006C52 _text           ends
.text:00006C52
.text:00006C54 ; ===========================================================================
.text:00006C54
.text:00006C54 ; Segment type: Pure code
.text:00006C54 ; Segment permissions: Read/Execute
.text:00006C54 _text           segment para public 'CODE' use32
.text:00006C54                 assume cs:_text
.text:00006C54                 ;org 6C54h
.text:00006C54 ; COMDAT (pick any)
.text:00006C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C54
.text:00006C54 ; =============== S U B R O U T I N E =======================================
.text:00006C54
.text:00006C54 ; Attributes: bp-based frame
.text:00006C54
.text:00006C54 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:00006C54                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:00006C54 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00006C54                                         ; CODE XREF: CObjectVector<CProp>::Clear(void)+6Fp
.text:00006C54                                         ; CObjectVector<NArchive::N7z::CUpdateItem>::Clear(void)+6Fp
.text:00006C54
.text:00006C54 var_4           = dword ptr -4
.text:00006C54
.text:00006C54                 push    ebp
.text:00006C55                 mov     ebp, esp
.text:00006C57                 push    ecx
.text:00006C58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C5F                 mov     [ebp+var_4], ecx
.text:00006C62                 mov     eax, [ebp+var_4]
.text:00006C65                 mov     dword ptr [eax+4], 0
.text:00006C6C                 mov     esp, ebp
.text:00006C6E                 pop     ebp
.text:00006C6F                 retn
.text:00006C6F ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:00006C6F
.text:00006C6F _text           ends
.text:00006C6F
.text:00006C70 ; ===========================================================================
.text:00006C70
.text:00006C70 ; Segment type: Pure code
.text:00006C70 ; Segment permissions: Read/Execute
.text:00006C70 _text           segment para public 'CODE' use32
.text:00006C70                 assume cs:_text
.text:00006C70                 ;org 6C70h
.text:00006C70 ; COMDAT (pick any)
.text:00006C70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C70
.text:00006C70 ; =============== S U B R O U T I N E =======================================
.text:00006C70
.text:00006C70 ; Attributes: bp-based frame
.text:00006C70
.text:00006C70 ; public: void __thiscall CRecordVector<void *>::DeleteFrontal(unsigned int)
.text:00006C70                 public ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z
.text:00006C70 ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00006C70                                         ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+73p
.text:00006C70
.text:00006C70 var_4           = dword ptr -4
.text:00006C70 arg_0           = dword ptr  8
.text:00006C70
.text:00006C70                 push    ebp
.text:00006C71                 mov     ebp, esp
.text:00006C73                 push    ecx
.text:00006C74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C7B                 mov     [ebp+var_4], ecx
.text:00006C7E                 cmp     [ebp+arg_0], 0
.text:00006C82                 jz      short loc_6CA1
.text:00006C84                 mov     eax, [ebp+arg_0]
.text:00006C87                 push    eax
.text:00006C88                 push    0
.text:00006C8A                 mov     ecx, [ebp+var_4]
.text:00006C8D                 call    ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems(uint,uint)
.text:00006C92                 mov     ecx, [ebp+var_4]
.text:00006C95                 mov     edx, [ecx+4]
.text:00006C98                 sub     edx, [ebp+arg_0]
.text:00006C9B                 mov     eax, [ebp+var_4]
.text:00006C9E                 mov     [eax+4], edx
.text:00006CA1
.text:00006CA1 loc_6CA1:                               ; CODE XREF: CRecordVector<void *>::DeleteFrontal(uint)+12j
.text:00006CA1                 add     esp, 4
.text:00006CA4                 cmp     ebp, esp
.text:00006CA6                 call    __RTC_CheckEsp
.text:00006CAB                 mov     esp, ebp
.text:00006CAD                 pop     ebp
.text:00006CAE                 retn    4
.text:00006CAE ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z endp
.text:00006CAE
.text:00006CAE ; ---------------------------------------------------------------------------
.text:00006CB1                 align 4
.text:00006CB1 _text           ends
.text:00006CB1
.text:00006CB4 ; ===========================================================================
.text:00006CB4
.text:00006CB4 ; Segment type: Pure code
.text:00006CB4 ; Segment permissions: Read/Execute
.text:00006CB4 _text           segment para public 'CODE' use32
.text:00006CB4                 assume cs:_text
.text:00006CB4                 ;org 6CB4h
.text:00006CB4 ; COMDAT (pick any)
.text:00006CB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006CB4
.text:00006CB4 ; =============== S U B R O U T I N E =======================================
.text:00006CB4
.text:00006CB4 ; Attributes: bp-based frame
.text:00006CB4
.text:00006CB4 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00006CB4                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00006CB4 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00006CB4                                         ; CODE XREF: CObjectVector<CProp>::AddNew(void)+84p
.text:00006CB4                                         ; CObjectVector<COneMethodInfo>::AddNew(void)+84p ...
.text:00006CB4
.text:00006CB4 var_8           = dword ptr -8
.text:00006CB4 var_4           = dword ptr -4
.text:00006CB4 arg_0           = dword ptr  8
.text:00006CB4
.text:00006CB4                 push    ebp
.text:00006CB5                 mov     ebp, esp
.text:00006CB7                 sub     esp, 8
.text:00006CBA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006CC1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CC8                 mov     [ebp+var_4], ecx
.text:00006CCB                 mov     ecx, [ebp+var_4]
.text:00006CCE                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00006CD3                 mov     eax, [ebp+var_4]
.text:00006CD6                 mov     ecx, [eax+4]
.text:00006CD9                 mov     edx, [ebp+var_4]
.text:00006CDC                 mov     eax, [edx]
.text:00006CDE                 mov     edx, [ebp+arg_0]
.text:00006CE1                 mov     [eax+ecx*4], edx
.text:00006CE4                 mov     eax, [ebp+var_4]
.text:00006CE7                 mov     ecx, [eax+4]
.text:00006CEA                 mov     [ebp+var_8], ecx
.text:00006CED                 mov     edx, [ebp+var_4]
.text:00006CF0                 mov     eax, [edx+4]
.text:00006CF3                 add     eax, 1
.text:00006CF6                 mov     ecx, [ebp+var_4]
.text:00006CF9                 mov     [ecx+4], eax
.text:00006CFC                 mov     eax, [ebp+var_8]
.text:00006CFF                 add     esp, 8
.text:00006D02                 cmp     ebp, esp
.text:00006D04                 call    __RTC_CheckEsp
.text:00006D09                 mov     esp, ebp
.text:00006D0B                 pop     ebp
.text:00006D0C                 retn    4
.text:00006D0C ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00006D0C
.text:00006D0C ; ---------------------------------------------------------------------------
.text:00006D0F                 align 10h
.text:00006D0F _text           ends
.text:00006D0F
.text:00006D10 ; ===========================================================================
.text:00006D10
.text:00006D10 ; Segment type: Pure code
.text:00006D10 ; Segment permissions: Read/Execute
.text:00006D10 _text           segment para public 'CODE' use32
.text:00006D10                 assume cs:_text
.text:00006D10                 ;org 6D10h
.text:00006D10 ; COMDAT (pick any)
.text:00006D10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006D10
.text:00006D10 ; =============== S U B R O U T I N E =======================================
.text:00006D10
.text:00006D10 ; Attributes: bp-based frame
.text:00006D10
.text:00006D10 ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:00006D10                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:00006D10 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:00006D10                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+D7p
.text:00006D10                                         ; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(CObjectVector<COneMethodInfo> const &)+C8p ...
.text:00006D10
.text:00006D10 var_4           = dword ptr -4
.text:00006D10 arg_0           = dword ptr  8
.text:00006D10
.text:00006D10                 push    ebp
.text:00006D11                 mov     ebp, esp
.text:00006D13                 push    ecx
.text:00006D14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D1B                 mov     [ebp+var_4], ecx
.text:00006D1E                 mov     eax, [ebp+var_4]
.text:00006D21                 mov     ecx, [eax+4]
.text:00006D24                 mov     edx, [ebp+var_4]
.text:00006D27                 mov     eax, [edx]
.text:00006D29                 mov     edx, [ebp+arg_0]
.text:00006D2C                 mov     [eax+ecx*4], edx
.text:00006D2F                 mov     eax, [ebp+var_4]
.text:00006D32                 mov     ecx, [eax+4]
.text:00006D35                 add     ecx, 1
.text:00006D38                 mov     edx, [ebp+var_4]
.text:00006D3B                 mov     [edx+4], ecx
.text:00006D3E                 mov     esp, ebp
.text:00006D40                 pop     ebp
.text:00006D41                 retn    4
.text:00006D41 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:00006D41
.text:00006D41 _text           ends
.text:00006D41
.text:00006D44 ; ===========================================================================
.text:00006D44
.text:00006D44 ; Segment type: Pure code
.text:00006D44 ; Segment permissions: Read/Execute
.text:00006D44 _text           segment para public 'CODE' use32
.text:00006D44                 assume cs:_text
.text:00006D44                 ;org 6D44h
.text:00006D44 ; COMDAT (pick any)
.text:00006D44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006D44
.text:00006D44 ; =============== S U B R O U T I N E =======================================
.text:00006D44
.text:00006D44 ; Attributes: bp-based frame
.text:00006D44
.text:00006D44 ; public: void __thiscall CRecordVector<void *>::Insert(unsigned int, void * const)
.text:00006D44                 public ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
.text:00006D44 ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z proc near
.text:00006D44                                         ; CODE XREF: CObjectVector<COneMethodInfo>::Insert(uint,COneMethodInfo const &)+83p
.text:00006D44
.text:00006D44 var_4           = dword ptr -4
.text:00006D44 arg_0           = dword ptr  8
.text:00006D44 arg_4           = dword ptr  0Ch
.text:00006D44
.text:00006D44                 push    ebp
.text:00006D45                 mov     ebp, esp
.text:00006D47                 push    ecx
.text:00006D48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D4F                 mov     [ebp+var_4], ecx
.text:00006D52                 mov     ecx, [ebp+var_4]
.text:00006D55                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00006D5A                 mov     eax, [ebp+arg_0]
.text:00006D5D                 push    eax
.text:00006D5E                 mov     ecx, [ebp+arg_0]
.text:00006D61                 add     ecx, 1
.text:00006D64                 push    ecx
.text:00006D65                 mov     ecx, [ebp+var_4]
.text:00006D68                 call    ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems(uint,uint)
.text:00006D6D                 mov     edx, [ebp+var_4]
.text:00006D70                 mov     eax, [edx]
.text:00006D72
.text:00006D72 loc_6D72:                               ; DATA XREF: .rdata:$SG74577o
.text:00006D72                 mov     ecx, [ebp+arg_0]
.text:00006D75                 mov     edx, [ebp+arg_4]
.text:00006D78                 mov     [eax+ecx*4], edx
.text:00006D7B                 mov     eax, [ebp+var_4]
.text:00006D7E                 mov     ecx, [eax+4]
.text:00006D81                 add     ecx, 1
.text:00006D84                 mov     edx, [ebp+var_4]
.text:00006D87                 mov     [edx+4], ecx
.text:00006D8A                 add     esp, 4
.text:00006D8D                 cmp     ebp, esp
.text:00006D8F                 call    __RTC_CheckEsp
.text:00006D94                 mov     esp, ebp
.text:00006D96                 pop     ebp
.text:00006D97                 retn    8
.text:00006D97 ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z endp
.text:00006D97
.text:00006D97 ; ---------------------------------------------------------------------------
.text:00006D9A                 align 4
.text:00006D9A _text           ends
.text:00006D9A
.text:00006D9C ; ===========================================================================
.text:00006D9C
.text:00006D9C ; Segment type: Pure code
.text:00006D9C ; Segment permissions: Read/Execute
.text:00006D9C _text           segment para public 'CODE' use32
.text:00006D9C                 assume cs:_text
.text:00006D9C                 ;org 6D9Ch
.text:00006D9C ; COMDAT (pick any)
.text:00006D9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006D9C
.text:00006D9C ; =============== S U B R O U T I N E =======================================
.text:00006D9C
.text:00006D9C ; Attributes: bp-based frame
.text:00006D9C
.text:00006D9C ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00006D9C                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00006D9C ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00006D9C                                         ; CODE XREF: CObjectVector<CProp>::operator[](uint)+15p
.text:00006D9C                                         ; CObjectVector<COneMethodInfo>::operator[](uint)+15p
.text:00006D9C
.text:00006D9C var_4           = dword ptr -4
.text:00006D9C arg_0           = dword ptr  8
.text:00006D9C
.text:00006D9C                 push    ebp
.text:00006D9D                 mov     ebp, esp
.text:00006D9F                 push    ecx
.text:00006DA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DA7                 mov     [ebp+var_4], ecx
.text:00006DAA                 mov     eax, [ebp+var_4]
.text:00006DAD                 mov     ecx, [eax]
.text:00006DAF                 mov     edx, [ebp+arg_0]
.text:00006DB2                 lea     eax, [ecx+edx*4]
.text:00006DB5                 mov     esp, ebp
.text:00006DB7                 pop     ebp
.text:00006DB8                 retn    4
.text:00006DB8 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:00006DB8
.text:00006DB8 ; ---------------------------------------------------------------------------
.text:00006DBB                 align 4
.text:00006DBB _text           ends
.text:00006DBB
.text:00006DBC ; ===========================================================================
.text:00006DBC
.text:00006DBC ; Segment type: Pure code
.text:00006DBC ; Segment permissions: Read/Execute
.text:00006DBC _text           segment para public 'CODE' use32
.text:00006DBC                 assume cs:_text
.text:00006DBC                 ;org 6DBCh
.text:00006DBC ; COMDAT (pick any)
.text:00006DBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DBC
.text:00006DBC ; =============== S U B R O U T I N E =======================================
.text:00006DBC
.text:00006DBC ; Attributes: bp-based frame
.text:00006DBC
.text:00006DBC ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00006DBC                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00006DBC ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00006DBC                                         ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+64p
.text:00006DBC                                         ; CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p ...
.text:00006DBC
.text:00006DBC var_4           = dword ptr -4
.text:00006DBC arg_0           = dword ptr  8
.text:00006DBC
.text:00006DBC                 push    ebp
.text:00006DBD                 mov     ebp, esp
.text:00006DBF                 push    ecx
.text:00006DC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DC7                 mov     [ebp+var_4], ecx
.text:00006DCA                 mov     eax, [ebp+var_4]
.text:00006DCD                 mov     ecx, [eax]
.text:00006DCF                 mov     edx, [ebp+arg_0]
.text:00006DD2                 lea     eax, [ecx+edx*4]
.text:00006DD5                 mov     esp, ebp
.text:00006DD7                 pop     ebp
.text:00006DD8                 retn    4
.text:00006DD8 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00006DD8
.text:00006DD8 ; ---------------------------------------------------------------------------
.text:00006DDB                 align 4
.text:00006DDB _text           ends
.text:00006DDB
.text:00006DDC ; ===========================================================================
.text:00006DDC
.text:00006DDC ; Segment type: Pure code
.text:00006DDC ; Segment permissions: Read/Execute
.text:00006DDC _text           segment para public 'CODE' use32
.text:00006DDC                 assume cs:_text
.text:00006DDC                 ;org 6DDCh
.text:00006DDC ; COMDAT (pick any)
.text:00006DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DDC
.text:00006DDC ; =============== S U B R O U T I N E =======================================
.text:00006DDC
.text:00006DDC ; Attributes: bp-based frame
.text:00006DDC
.text:00006DDC ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(class CObjectVector<struct CProp> const &)
.text:00006DDC                 public ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:00006DDC ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text:00006DDC                                         ; CODE XREF: CProps::CProps(CProps const &)+15p
.text:00006DDC
.text:00006DDC var_24          = dword ptr -24h
.text:00006DDC var_20          = dword ptr -20h
.text:00006DDC var_1C          = dword ptr -1Ch
.text:00006DDC var_18          = dword ptr -18h
.text:00006DDC var_14          = dword ptr -14h
.text:00006DDC var_10          = dword ptr -10h
.text:00006DDC var_C           = dword ptr -0Ch
.text:00006DDC var_4           = dword ptr -4
.text:00006DDC arg_0           = dword ptr  8
.text:00006DDC
.text:00006DDC                 push    ebp
.text:00006DDD                 mov     ebp, esp
.text:00006DDF                 push    0FFFFFFFFh
.text:00006DE1                 push    offset __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:00006DE6                 mov     eax, large fs:0
.text:00006DEC                 push    eax
.text:00006DED                 sub     esp, 18h
.text:00006DF0                 mov     eax, 0CCCCCCCCh
.text:00006DF5                 mov     [ebp+var_24], eax
.text:00006DF8                 mov     [ebp+var_20], eax
.text:00006DFB                 mov     [ebp+var_1C], eax
.text:00006DFE                 mov     [ebp+var_18], eax
.text:00006E01                 mov     [ebp+var_14], eax
.text:00006E04                 mov     [ebp+var_10], eax
.text:00006E07                 mov     eax, dword ptr ds:___security_cookie
.text:00006E0C                 xor     eax, ebp
.text:00006E0E                 push    eax
.text:00006E0F                 lea     eax, [ebp+var_C]
.text:00006E12                 mov     large fs:0, eax
.text:00006E18                 mov     [ebp+var_10], ecx
.text:00006E1B                 mov     ecx, [ebp+var_10]
.text:00006E1E                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006E23                 mov     [ebp+var_4], 0
.text:00006E2A                 mov     ecx, [ebp+arg_0]
.text:00006E2D                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:00006E32                 mov     [ebp+var_14], eax
.text:00006E35                 mov     eax, [ebp+var_14]
.text:00006E38                 push    eax
.text:00006E39                 mov     ecx, [ebp+var_10]
.text:00006E3C                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:00006E41                 mov     [ebp+var_18], 0
.text:00006E48                 jmp     short loc_6E53
.text:00006E4A ; ---------------------------------------------------------------------------
.text:00006E4A
.text:00006E4A loc_6E4A:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+CDj
.text:00006E4A                 mov     ecx, [ebp+var_18]
.text:00006E4D                 add     ecx, 1
.text:00006E50                 mov     [ebp+var_18], ecx
.text:00006E53
.text:00006E53 loc_6E53:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+6Cj
.text:00006E53                 mov     edx, [ebp+var_18]
.text:00006E56                 cmp     edx, [ebp+var_14]
.text:00006E59                 jnb     short loc_6EAB
.text:00006E5B                 push    18h             ; unsigned int
.text:00006E5D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006E62                 add     esp, 4
.text:00006E65                 mov     [ebp+var_20], eax
.text:00006E68                 mov     byte ptr [ebp+var_4], 1
.text:00006E6C                 cmp     [ebp+var_20], 0
.text:00006E70                 jz      short loc_6E8C
.text:00006E72                 mov     eax, [ebp+var_18]
.text:00006E75                 push    eax
.text:00006E76                 mov     ecx, [ebp+arg_0]
.text:00006E79                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00006E7E                 push    eax
.text:00006E7F                 mov     ecx, [ebp+var_20]
.text:00006E82                 call    ??0CProp@@QAE@ABU0@@Z ; CProp::CProp(CProp const &)
.text:00006E87                 mov     [ebp+var_24], eax
.text:00006E8A                 jmp     short loc_6E93
.text:00006E8C ; ---------------------------------------------------------------------------
.text:00006E8C
.text:00006E8C loc_6E8C:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+94j
.text:00006E8C                 mov     [ebp+var_24], 0
.text:00006E93
.text:00006E93 loc_6E93:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+AEj
.text:00006E93                 mov     ecx, [ebp+var_24]
.text:00006E96                 mov     [ebp+var_1C], ecx
.text:00006E99                 mov     byte ptr [ebp+var_4], 0
.text:00006E9D                 mov     edx, [ebp+var_1C]
.text:00006EA0                 push    edx
.text:00006EA1                 mov     ecx, [ebp+var_10]
.text:00006EA4                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00006EA9                 jmp     short loc_6E4A
.text:00006EAB ; ---------------------------------------------------------------------------
.text:00006EAB
.text:00006EAB loc_6EAB:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+7Dj
.text:00006EAB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006EB2                 mov     eax, [ebp+var_10]
.text:00006EB5                 mov     ecx, [ebp+var_C]
.text:00006EB8                 mov     large fs:0, ecx
.text:00006EBF                 pop     ecx
.text:00006EC0                 add     esp, 24h
.text:00006EC3                 cmp     ebp, esp
.text:00006EC5                 call    __RTC_CheckEsp
.text:00006ECA                 mov     esp, ebp
.text:00006ECC                 pop     ebp
.text:00006ECD                 retn    4
.text:00006ECD ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text:00006ECD
.text:00006ECD _text           ends
.text:00006ECD
.text$x:00006ED0 ; ===========================================================================
.text$x:00006ED0
.text$x:00006ED0 ; Segment type: Pure code
.text$x:00006ED0 ; Segment permissions: Read/Execute
.text$x:00006ED0 _text$x         segment para public 'CODE' use32
.text$x:00006ED0                 assume cs:_text$x
.text$x:00006ED0                 ;org 6ED0h
.text$x:00006ED0 ; COMDAT (pick associative to section at 6DDC)
.text$x:00006ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006ED0
.text$x:00006ED0 ; =============== S U B R O U T I N E =======================================
.text$x:00006ED0
.text$x:00006ED0
.text$x:00006ED0 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 proc near
.text$x:00006ED0                                         ; DATA XREF: .xdata$x:00006F04o
.text$x:00006ED0                 mov     ecx, [ebp-10h]
.text$x:00006ED3                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00006ED3 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 endp
.text$x:00006ED3
.text$x:00006ED8
.text$x:00006ED8 ; =============== S U B R O U T I N E =======================================
.text$x:00006ED8
.text$x:00006ED8
.text$x:00006ED8 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 proc near
.text$x:00006ED8                                         ; DATA XREF: .xdata$x:00006F0Co
.text$x:00006ED8                 mov     eax, [ebp-20h]
.text$x:00006EDB                 push    eax             ; void *
.text$x:00006EDC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006EE1                 pop     ecx
.text$x:00006EE2                 retn
.text$x:00006EE2 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 endp
.text$x:00006EE2
.text$x:00006EE3
.text$x:00006EE3 ; =============== S U B R O U T I N E =======================================
.text$x:00006EE3
.text$x:00006EE3
.text$x:00006EE3 __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text$x:00006EE3                                         ; DATA XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+5o
.text$x:00006EE3
.text$x:00006EE3 arg_4           = dword ptr  8
.text$x:00006EE3
.text$x:00006EE3                 mov     edx, [esp+arg_4]
.text$x:00006EE7                 lea     eax, [edx+0Ch]
.text$x:00006EEA                 mov     ecx, [edx-1Ch]
.text$x:00006EED                 xor     ecx, eax
.text$x:00006EEF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006EF4                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text$x:00006EF9                 jmp     ___CxxFrameHandler3
.text$x:00006EF9 __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text$x:00006EF9
.text$x:00006EF9 ; ---------------------------------------------------------------------------
.text$x:00006EFE                 align 10h
.text$x:00006EFE _text$x         ends
.text$x:00006EFE
.xdata$x:00006F00 ; ===========================================================================
.xdata$x:00006F00
.xdata$x:00006F00 ; Segment type: Pure data
.xdata$x:00006F00 ; Segment permissions: Read
.xdata$x:00006F00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006F00                 assume cs:_xdata$x
.xdata$x:00006F00                 ;org 6F00h
.xdata$x:00006F00 ; COMDAT (pick associative to section at 6DDC)
.xdata$x:00006F00 __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:00006F00                                         ; DATA XREF: .xdata$x:00006F18o
.xdata$x:00006F01                 db 0FFh
.xdata$x:00006F02                 db 0FFh
.xdata$x:00006F03                 db 0FFh
.xdata$x:00006F04                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
.xdata$x:00006F08                 db    0
.xdata$x:00006F09                 db    0
.xdata$x:00006F0A                 db    0
.xdata$x:00006F0B                 db    0
.xdata$x:00006F0C                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
.xdata$x:00006F10 __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:00006F10                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z+11o
.xdata$x:00006F11                 db    5
.xdata$x:00006F12                 db  93h ; ô
.xdata$x:00006F13                 db  19h
.xdata$x:00006F14                 db    2
.xdata$x:00006F15                 db    0
.xdata$x:00006F16                 db    0
.xdata$x:00006F17                 db    0
.xdata$x:00006F18                 dd offset __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.xdata$x:00006F1C                 db    0
.xdata$x:00006F1D                 db    0
.xdata$x:00006F1E                 db    0
.xdata$x:00006F1F                 db    0
.xdata$x:00006F20                 db    0
.xdata$x:00006F21                 db    0
.xdata$x:00006F22                 db    0
.xdata$x:00006F23                 db    0
.xdata$x:00006F24                 db    0
.xdata$x:00006F25                 db    0
.xdata$x:00006F26                 db    0
.xdata$x:00006F27                 db    0
.xdata$x:00006F28                 db    0
.xdata$x:00006F29                 db    0
.xdata$x:00006F2A                 db    0
.xdata$x:00006F2B                 db    0
.xdata$x:00006F2C                 db    0
.xdata$x:00006F2D                 db    0
.xdata$x:00006F2E                 db    0
.xdata$x:00006F2F                 db    0
.xdata$x:00006F30                 db    1
.xdata$x:00006F31                 db    0
.xdata$x:00006F32                 db    0
.xdata$x:00006F33                 db    0
.xdata$x:00006F33 _xdata$x        ends
.xdata$x:00006F33
.text:00006F34 ; ===========================================================================
.text:00006F34
.text:00006F34 ; Segment type: Pure code
.text:00006F34 ; Segment permissions: Read/Execute
.text:00006F34 _text           segment para public 'CODE' use32
.text:00006F34                 assume cs:_text
.text:00006F34                 ;org 6F34h
.text:00006F34 ; COMDAT (pick any)
.text:00006F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006F34
.text:00006F34 ; =============== S U B R O U T I N E =======================================
.text:00006F34
.text:00006F34 ; Attributes: bp-based frame
.text:00006F34
.text:00006F34 ; private: void __thiscall CRecordVector<struct NArchive::N7z::CBond2>::ReserveOnePosition(void)
.text:00006F34                 public ?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ
.text:00006F34 ?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ proc near
.text:00006F34                                         ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::Add(NArchive::N7z::CBond2)+20p
.text:00006F34
.text:00006F34 var_14          = dword ptr -14h
.text:00006F34 var_10          = dword ptr -10h
.text:00006F34 Dst             = dword ptr -0Ch
.text:00006F34 var_8           = dword ptr -8
.text:00006F34 var_4           = dword ptr -4
.text:00006F34
.text:00006F34                 push    ebp
.text:00006F35                 mov     ebp, esp
.text:00006F37                 sub     esp, 14h
.text:00006F3A                 mov     eax, 0CCCCCCCCh
.text:00006F3F                 mov     [ebp+var_14], eax
.text:00006F42                 mov     [ebp+var_10], eax
.text:00006F45                 mov     [ebp+Dst], eax
.text:00006F48                 mov     [ebp+var_8], eax
.text:00006F4B                 mov     [ebp+var_4], eax
.text:00006F4E                 mov     [ebp+var_4], ecx
.text:00006F51                 mov     eax, [ebp+var_4]
.text:00006F54                 mov     ecx, [ebp+var_4]
.text:00006F57                 mov     edx, [eax+4]
.text:00006F5A                 cmp     edx, [ecx+8]
.text:00006F5D                 jnz     loc_6FE8
.text:00006F63                 mov     eax, [ebp+var_4]
.text:00006F66                 mov     ecx, [eax+8]
.text:00006F69                 shr     ecx, 2
.text:00006F6C                 mov     edx, [ebp+var_4]
.text:00006F6F                 mov     eax, [edx+8]
.text:00006F72                 lea     ecx, [eax+ecx+1]
.text:00006F76                 mov     [ebp+var_8], ecx
.text:00006F79                 xor     ecx, ecx
.text:00006F7B                 mov     eax, [ebp+var_8]
.text:00006F7E                 mov     edx, 0Ch
.text:00006F83                 mul     edx
.text:00006F85                 seto    cl
.text:00006F88                 neg     ecx
.text:00006F8A                 or      ecx, eax
.text:00006F8C                 push    ecx             ; unsigned int
.text:00006F8D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006F92                 add     esp, 4
.text:00006F95                 mov     [ebp+var_10], eax
.text:00006F98                 mov     eax, [ebp+var_10]
.text:00006F9B                 mov     [ebp+Dst], eax
.text:00006F9E                 mov     ecx, [ebp+var_4]
.text:00006FA1                 cmp     dword ptr [ecx+4], 0
.text:00006FA5                 jz      short loc_6FC3
.text:00006FA7                 mov     edx, [ebp+var_4]
.text:00006FAA                 mov     eax, [edx+4]
.text:00006FAD                 imul    eax, 0Ch
.text:00006FB0                 push    eax             ; Size
.text:00006FB1                 mov     ecx, [ebp+var_4]
.text:00006FB4                 mov     edx, [ecx]
.text:00006FB6                 push    edx             ; Src
.text:00006FB7                 mov     eax, [ebp+Dst]
.text:00006FBA                 push    eax             ; Dst
.text:00006FBB                 call    _memcpy
.text:00006FC0                 add     esp, 0Ch
.text:00006FC3
.text:00006FC3 loc_6FC3:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition(void)+71j
.text:00006FC3                 mov     ecx, [ebp+var_4]
.text:00006FC6                 mov     edx, [ecx]
.text:00006FC8                 mov     [ebp+var_14], edx
.text:00006FCB                 mov     eax, [ebp+var_14]
.text:00006FCE                 push    eax             ; void *
.text:00006FCF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006FD4                 add     esp, 4
.text:00006FD7                 mov     ecx, [ebp+var_4]
.text:00006FDA                 mov     edx, [ebp+Dst]
.text:00006FDD                 mov     [ecx], edx
.text:00006FDF                 mov     eax, [ebp+var_4]
.text:00006FE2                 mov     ecx, [ebp+var_8]
.text:00006FE5                 mov     [eax+8], ecx
.text:00006FE8
.text:00006FE8 loc_6FE8:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition(void)+29j
.text:00006FE8                 add     esp, 14h
.text:00006FEB                 cmp     ebp, esp
.text:00006FED                 call    __RTC_CheckEsp
.text:00006FF2                 mov     esp, ebp
.text:00006FF4                 pop     ebp
.text:00006FF5                 retn
.text:00006FF5 ?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ endp
.text:00006FF5
.text:00006FF5 ; ---------------------------------------------------------------------------
.text:00006FF6                 align 4
.text:00006FF6 _text           ends
.text:00006FF6
.text:00006FF8 ; ===========================================================================
.text:00006FF8
.text:00006FF8 ; Segment type: Pure code
.text:00006FF8 ; Segment permissions: Read/Execute
.text:00006FF8 _text           segment para public 'CODE' use32
.text:00006FF8                 assume cs:_text
.text:00006FF8                 ;org 6FF8h
.text:00006FF8 ; COMDAT (pick any)
.text:00006FF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006FF8
.text:00006FF8 ; =============== S U B R O U T I N E =======================================
.text:00006FF8
.text:00006FF8 ; Attributes: bp-based frame
.text:00006FF8
.text:00006FF8 ; public: void __thiscall CObjectVector<struct NArchive::N7z::CUpdateItem>::Clear(void)
.text:00006FF8                 public ?Clear@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ
.text:00006FF8 ?Clear@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ proc near
.text:00006FF8                                         ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::ClearAndFree(void)+11p
.text:00006FF8
.text:00006FF8 var_14          = dword ptr -14h
.text:00006FF8 var_10          = dword ptr -10h
.text:00006FF8 var_C           = dword ptr -0Ch
.text:00006FF8 var_8           = dword ptr -8
.text:00006FF8 var_4           = dword ptr -4
.text:00006FF8
.text:00006FF8                 push    ebp
.text:00006FF9                 mov     ebp, esp
.text:00006FFB                 sub     esp, 14h
.text:00006FFE                 mov     eax, 0CCCCCCCCh
.text:00007003                 mov     [ebp+var_14], eax
.text:00007006                 mov     [ebp+var_10], eax
.text:00007009                 mov     [ebp+var_C], eax
.text:0000700C                 mov     [ebp+var_8], eax
.text:0000700F                 mov     [ebp+var_4], eax
.text:00007012                 mov     [ebp+var_4], ecx
.text:00007015                 mov     ecx, [ebp+var_4]
.text:00007018                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000701D                 mov     [ebp+var_8], eax
.text:00007020
.text:00007020 loc_7020:                               ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::Clear(void):loc_7062j
.text:00007020                 cmp     [ebp+var_8], 0
.text:00007024                 jz      short loc_7064
.text:00007026                 mov     eax, [ebp+var_8]
.text:00007029                 sub     eax, 1
.text:0000702C                 mov     [ebp+var_8], eax
.text:0000702F                 mov     ecx, [ebp+var_8]
.text:00007032                 push    ecx
.text:00007033                 mov     ecx, [ebp+var_4]
.text:00007036                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000703B                 mov     edx, [eax]
.text:0000703D                 mov     [ebp+var_10], edx
.text:00007040                 mov     eax, [ebp+var_10]
.text:00007043                 mov     [ebp+var_C], eax
.text:00007046                 cmp     [ebp+var_C], 0
.text:0000704A                 jz      short loc_705B
.text:0000704C                 push    1
.text:0000704E                 mov     ecx, [ebp+var_C]
.text:00007051                 call    ??_GCUpdateItem@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CUpdateItem::`scalar deleting destructor'(uint)
.text:00007056                 mov     [ebp+var_14], eax
.text:00007059                 jmp     short loc_7062
.text:0000705B ; ---------------------------------------------------------------------------
.text:0000705B
.text:0000705B loc_705B:                               ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::Clear(void)+52j
.text:0000705B                 mov     [ebp+var_14], 0
.text:00007062
.text:00007062 loc_7062:                               ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::Clear(void)+61j
.text:00007062                 jmp     short loc_7020
.text:00007064 ; ---------------------------------------------------------------------------
.text:00007064
.text:00007064 loc_7064:                               ; CODE XREF: CObjectVector<NArchive::N7z::CUpdateItem>::Clear(void)+2Cj
.text:00007064                 mov     ecx, [ebp+var_4]
.text:00007067                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:0000706C                 add     esp, 14h
.text:0000706F                 cmp     ebp, esp
.text:00007071                 call    __RTC_CheckEsp
.text:00007076                 mov     esp, ebp
.text:00007078                 pop     ebp
.text:00007079                 retn
.text:00007079 ?Clear@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ endp
.text:00007079
.text:00007079 ; ---------------------------------------------------------------------------
.text:0000707A                 align 4
.text:0000707A _text           ends
.text:0000707A
.text:0000707C ; ===========================================================================
.text:0000707C
.text:0000707C ; Segment type: Pure code
.text:0000707C ; Segment permissions: Read/Execute
.text:0000707C _text           segment para public 'CODE' use32
.text:0000707C                 assume cs:_text
.text:0000707C                 ;org 707Ch
.text:0000707C ; COMDAT (pick any)
.text:0000707C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000707C
.text:0000707C ; =============== S U B R O U T I N E =======================================
.text:0000707C
.text:0000707C ; Attributes: bp-based frame
.text:0000707C
.text:0000707C ; private: void __thiscall CRecordVector<void *>::MoveItems(unsigned int, unsigned int)
.text:0000707C                 public ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
.text:0000707C ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z proc near
.text:0000707C                                         ; CODE XREF: CRecordVector<void *>::DeleteFrontal(uint)+1Dp
.text:0000707C                                         ; CRecordVector<void *>::Insert(uint,void * const)+24p
.text:0000707C
.text:0000707C var_4           = dword ptr -4
.text:0000707C arg_0           = dword ptr  8
.text:0000707C arg_4           = dword ptr  0Ch
.text:0000707C
.text:0000707C                 push    ebp
.text:0000707D                 mov     ebp, esp
.text:0000707F                 push    ecx
.text:00007080                 push    esi
.text:00007081                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007088                 mov     [ebp+var_4], ecx
.text:0000708B                 mov     eax, [ebp+var_4]
.text:0000708E                 mov     ecx, [eax+4]
.text:00007091                 sub     ecx, [ebp+arg_4]
.text:00007094                 shl     ecx, 2
.text:00007097                 mov     esi, esp
.text:00007099                 push    ecx             ; Size
.text:0000709A                 mov     edx, [ebp+var_4]
.text:0000709D                 mov     eax, [edx]
.text:0000709F                 mov     ecx, [ebp+arg_4]
.text:000070A2                 lea     edx, [eax+ecx*4]
.text:000070A5                 push    edx             ; Src
.text:000070A6                 mov     eax, [ebp+var_4]
.text:000070A9                 mov     ecx, [eax]
.text:000070AB                 mov     edx, [ebp+arg_0]
.text:000070AE                 lea     eax, [ecx+edx*4]
.text:000070B1                 push    eax             ; Dst
.text:000070B2                 call    dword ptr ds:__imp__memmove
.text:000070B8                 add     esp, 0Ch
.text:000070BB                 cmp     esi, esp
.text:000070BD                 call    __RTC_CheckEsp
.text:000070C2                 pop     esi
.text:000070C3                 add     esp, 4
.text:000070C6                 cmp     ebp, esp
.text:000070C8                 call    __RTC_CheckEsp
.text:000070CD                 mov     esp, ebp
.text:000070CF                 pop     ebp
.text:000070D0                 retn    8
.text:000070D0 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z endp
.text:000070D0
.text:000070D0 ; ---------------------------------------------------------------------------
.text:000070D3                 align 4
.text:000070D3 _text           ends
.text:000070D3
.text:000070D4 ; ===========================================================================
.text:000070D4
.text:000070D4 ; Segment type: Pure code
.text:000070D4 ; Segment permissions: Read/Execute
.text:000070D4 _text           segment para public 'CODE' use32
.text:000070D4                 assume cs:_text
.text:000070D4                 ;org 70D4h
.text:000070D4 ; COMDAT (pick any)
.text:000070D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000070D4
.text:000070D4 ; =============== S U B R O U T I N E =======================================
.text:000070D4
.text:000070D4 ; Attributes: bp-based frame
.text:000070D4
.text:000070D4 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:000070D4                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:000070D4 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:000070D4                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:000070D4                                         ; CRecordVector<void *>::Insert(uint,void * const)+11p
.text:000070D4
.text:000070D4 var_14          = dword ptr -14h
.text:000070D4 var_10          = dword ptr -10h
.text:000070D4 Dst             = dword ptr -0Ch
.text:000070D4 var_8           = dword ptr -8
.text:000070D4 var_4           = dword ptr -4
.text:000070D4
.text:000070D4                 push    ebp
.text:000070D5                 mov     ebp, esp
.text:000070D7                 sub     esp, 14h
.text:000070DA                 mov     eax, 0CCCCCCCCh
.text:000070DF                 mov     [ebp+var_14], eax
.text:000070E2                 mov     [ebp+var_10], eax
.text:000070E5                 mov     [ebp+Dst], eax
.text:000070E8                 mov     [ebp+var_8], eax
.text:000070EB                 mov     [ebp+var_4], eax
.text:000070EE                 mov     [ebp+var_4], ecx
.text:000070F1                 mov     eax, [ebp+var_4]
.text:000070F4                 mov     ecx, [ebp+var_4]
.text:000070F7                 mov     edx, [eax+4]
.text:000070FA                 cmp     edx, [ecx+8]
.text:000070FD                 jnz     loc_7188
.text:00007103                 mov     eax, [ebp+var_4]
.text:00007106                 mov     ecx, [eax+8]
.text:00007109                 shr     ecx, 2
.text:0000710C                 mov     edx, [ebp+var_4]
.text:0000710F                 mov     eax, [edx+8]
.text:00007112                 lea     ecx, [eax+ecx+1]
.text:00007116                 mov     [ebp+var_8], ecx
.text:00007119                 xor     ecx, ecx
.text:0000711B                 mov     eax, [ebp+var_8]
.text:0000711E                 mov     edx, 4
.text:00007123                 mul     edx
.text:00007125                 seto    cl
.text:00007128                 neg     ecx
.text:0000712A                 or      ecx, eax
.text:0000712C                 push    ecx             ; unsigned int
.text:0000712D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00007132                 add     esp, 4
.text:00007135                 mov     [ebp+var_10], eax
.text:00007138                 mov     eax, [ebp+var_10]
.text:0000713B                 mov     [ebp+Dst], eax
.text:0000713E                 mov     ecx, [ebp+var_4]
.text:00007141                 cmp     dword ptr [ecx+4], 0
.text:00007145                 jz      short loc_7163
.text:00007147                 mov     edx, [ebp+var_4]
.text:0000714A                 mov     eax, [edx+4]
.text:0000714D                 shl     eax, 2
.text:00007150                 push    eax             ; Size
.text:00007151                 mov     ecx, [ebp+var_4]
.text:00007154                 mov     edx, [ecx]
.text:00007156                 push    edx             ; Src
.text:00007157                 mov     eax, [ebp+Dst]
.text:0000715A                 push    eax             ; Dst
.text:0000715B                 call    _memcpy
.text:00007160                 add     esp, 0Ch
.text:00007163
.text:00007163 loc_7163:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00007163                 mov     ecx, [ebp+var_4]
.text:00007166                 mov     edx, [ecx]
.text:00007168                 mov     [ebp+var_14], edx
.text:0000716B                 mov     eax, [ebp+var_14]
.text:0000716E                 push    eax             ; void *
.text:0000716F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007174                 add     esp, 4
.text:00007177                 mov     ecx, [ebp+var_4]
.text:0000717A                 mov     edx, [ebp+Dst]
.text:0000717D                 mov     [ecx], edx
.text:0000717F                 mov     eax, [ebp+var_4]
.text:00007182                 mov     ecx, [ebp+var_8]
.text:00007185                 mov     [eax+8], ecx
.text:00007188
.text:00007188 loc_7188:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00007188                 add     esp, 14h
.text:0000718B                 cmp     ebp, esp
.text:0000718D                 call    __RTC_CheckEsp
.text:00007192                 mov     esp, ebp
.text:00007194                 pop     ebp
.text:00007195                 retn
.text:00007195 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00007195
.text:00007195 _text           ends
.text:00007195
UNDEF:000071A0 ; ===========================================================================
UNDEF:000071A0
UNDEF:000071A0 ; Segment type: Externs
UNDEF:000071A0 ; UNDEF
UNDEF:000071A0                 extrn __RTC_Shutdown:near
UNDEF:000071A0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000071A4                 extrn __RTC_InitBase:near
UNDEF:000071A4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000071A8 ; bool __stdcall FindMethod(const struct AString *, unsigned __int64 *, unsigned int *)
UNDEF:000071A8                 extrn ?FindMethod@@YG_NABVAString@@AA_KAAI@Z:near
UNDEF:000071A8                                         ; CODE XREF: NArchive::N7z::CHandler::PropsMethod_To_FullMethod(NArchive::N7z::CMethodFull &,COneMethodInfo const &)+23p
UNDEF:000071AC                 extrn __RTC_CheckEsp:near
UNDEF:000071AC                                         ; CODE XREF: NArchive::N7z::CHandler::PropsMethod_To_FullMethod(NArchive::N7z::CMethodFull &,COneMethodInfo const &)+49p
UNDEF:000071AC                                         ; NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+FEp ...
UNDEF:000071B0 ; void __thiscall CProps::AddProp32(CProps *__hidden this, unsigned __int32, unsigned int)
UNDEF:000071B0                 extrn ?AddProp32@CProps@@QAEXKI@Z:near
UNDEF:000071B0                                         ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+8Ep
UNDEF:000071B0                                         ; NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+9Dp ...
UNDEF:000071B4 ; public: class AString & __thiscall AString::operator=(char const *)
UNDEF:000071B4                 extrn ??4AString@@QAEAAV0@PBD@Z:near
UNDEF:000071B4                                         ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+65p
UNDEF:000071B4                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+B1p ...
UNDEF:000071B8                 extrn ___security_cookie:near
UNDEF:000071B8                                         ; DATA XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+26r
UNDEF:000071B8                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+29r ...
UNDEF:000071BC                 extrn ___CxxFrameHandler3:near
UNDEF:000071BC                                         ; CODE XREF: __ehhandler$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z+16j
UNDEF:000071BC                                         ; __ehhandler$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z+19j ...
UNDEF:000071C0 ; __fastcall __security_check_cookie(x)
UNDEF:000071C0                 extrn @__security_check_cookie@4:near
UNDEF:000071C0                                         ; CODE XREF: NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+50Ep
UNDEF:000071C0                                         ; __ehhandler$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z+Cp ...
UNDEF:000071C4 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000071C4                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000071C4                                         ; CODE XREF: NArchive::N7z::CHandler::SetHeaderMethod(NArchive::N7z::CCompressionMethodMode &)+E6p
UNDEF:000071C4                                         ; NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+3D2p ...
UNDEF:000071C8 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(char const *)
UNDEF:000071C8                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:near
UNDEF:000071C8                                         ; CODE XREF: CProps::AddProp_Ascii(ulong,char const *)+3Bp
UNDEF:000071CC ; public: __thiscall UString::UString(void)
UNDEF:000071CC                 extrn ??0UString@@QAE@XZ:near
UNDEF:000071CC                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1C7p
UNDEF:000071CC                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+304p ...
UNDEF:000071D0 ; public: __thiscall AString::AString(void)
UNDEF:000071D0                 extrn ??0AString@@QAE@XZ:near
UNDEF:000071D0                                         ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+42p
UNDEF:000071D4 ; void __cdecl operator delete(void *)
UNDEF:000071D4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:000071D4                                         ; UString::~UString(void)+23p ...
UNDEF:000071D8 ; void __thiscall NArchive::CMultiMethodProps::SetGlobalLevelAndThreads(NArchive::CMultiMethodProps *__hidden this, struct COneMethodInfo *, unsigned int)
UNDEF:000071D8                 extrn ?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z:near
UNDEF:000071D8                                         ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+1E7p
UNDEF:000071DC                 extrn __allshl:near     ; CODE XREF: NArchive::N7z::CHandler::SetMainMethod(NArchive::N7z::CCompressionMethodMode &,uint)+2EEp
UNDEF:000071DC                                         ; NArchive::N7z::GetTime(IArchiveUpdateCallback *,int,ulong,unsigned __int64 &,bool &)+A3p ...
UNDEF:000071E0 ; int __thiscall CMethodProps::GetLevel(CMethodProps *__hidden this)
UNDEF:000071E0                 extrn ?GetLevel@CMethodProps@@QBEHXZ:near
UNDEF:000071E0                                         ; CODE XREF: CMethodProps::Get_Lzma_DicSize(void)+56p
UNDEF:000071E0                                         ; CMethodProps::Get_BZip2_BlockSize(void)+96p ...
UNDEF:000071E4 ; int __thiscall CMethodProps::FindProp(CMethodProps *__hidden this, unsigned __int32)
UNDEF:000071E4                 extrn ?FindProp@CMethodProps@@QBEHK@Z:near
UNDEF:000071E4                                         ; CODE XREF: CMethodProps::Get_Lzma_DicSize(void)+1Fp
UNDEF:000071E4                                         ; CMethodProps::Get_BZip2_BlockSize(void)+2Bp ...
UNDEF:000071E8 ; __int32 __thiscall NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::COutArchive *__hidden this, const struct NArchive::N7z::CArchiveDatabaseOut *, const struct NArchive::N7z::CCompressionMethodMode *, const struct NArchive::N7z::CHeaderOptions *)
UNDEF:000071E8                 extrn ?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z:near
UNDEF:000071E8                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+14F6p
UNDEF:000071EC ; long __stdcall NArchive::N7z::Update(struct IInStream *, struct NArchive::N7z::CDbEx const *, class CObjectVector<struct NArchive::N7z::CUpdateItem> const &, class NArchive::N7z::COutArchive &, struct NArchive::N7z::CArchiveDatabaseOut &, struct ISequentialOutStream *, struct IArchiveUpdateCallback *, struct NArchive::N7z::CUpdateOptions const &, struct ICryptoGetTextPassword *)
UNDEF:000071EC                 extrn ?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z:near
UNDEF:000071EC                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+141Ap
UNDEF:000071F0                 extrn _IID_ICryptoGetTextPassword:near
UNDEF:000071F0                                         ; DATA XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+13ACo
UNDEF:000071F4 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:000071F4                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:000071F4                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1150p
UNDEF:000071F8                 extrn _IID_ICryptoGetTextPassword2:near
UNDEF:000071F8                                         ; DATA XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+FB2o
UNDEF:000071FC ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:000071FC                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:000071FC                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+911p
UNDEF:000071FC                                         ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C34p ...
UNDEF:00007200 ; struct UString __stdcall __high NArchive::NItemName::MakeLegalName(const struct UString *)
UNDEF:00007200                 extrn ?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z:near
UNDEF:00007200                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+8E9p
UNDEF:00007204 ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:00007204                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:00007204                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+8CCp
UNDEF:00007204                                         ; NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+7Fp ...
UNDEF:00007208 ; void __thiscall NArchive::N7z::CDatabase::GetPath(NArchive::N7z::CDatabase *__hidden this, unsigned int, struct UString *)
UNDEF:00007208                 extrn ?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z:near
UNDEF:00007208                                         ; CODE XREF: NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3D3p
UNDEF:0000720C ; void __stdcall SysFreeString(BSTR bstrString)
UNDEF:0000720C                 extrn __imp__SysFreeString@4:near
UNDEF:0000720C                                         ; CODE XREF: CMyComBSTR::~CMyComBSTR(void)+17p
UNDEF:0000720C                                         ; DATA XREF: CMyComBSTR::~CMyComBSTR(void)+17r
UNDEF:00007210 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00007210                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00007210                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00007214 ; bool __thiscall COutBuffer::Create(COutBuffer *__hidden this, unsigned int)
UNDEF:00007214                 extrn ?Create@COutBuffer@@QAE_NI@Z:near
UNDEF:00007214                                         ; CODE XREF: NArchive::N7z::COutArchive::COutArchive(void)+6Fp
UNDEF:00007218 ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:00007218                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:00007218                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:0000721C ; void __thiscall NArchive::CMultiMethodProps::Init(NArchive::CMultiMethodProps *__hidden this)
UNDEF:0000721C                 extrn ?Init@CMultiMethodProps@NArchive@@QAEXXZ:near
UNDEF:0000721C                                         ; CODE XREF: NArchive::N7z::COutHandler::InitProps(void)+11p
UNDEF:00007220 ; unsigned __int64 __stdcall ConvertStringToUInt64(const wchar_t *, const wchar_t **)
UNDEF:00007220                 extrn ?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z:near
UNDEF:00007220                                         ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+86p
UNDEF:00007224 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00007224                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00007224                                         ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromString(UString const &)+41p
UNDEF:00007224                                         ; COneMethodInfo::COneMethodInfo(COneMethodInfo const &)+63p ...
UNDEF:00007228 ; void __stdcall MyStringLower_Ascii(wchar_t *)
UNDEF:00007228                 extrn ?MyStringLower_Ascii@@YGXPA_W@Z:near
UNDEF:00007228                                         ; CODE XREF: UString::MakeLower_Ascii(void)+14p
UNDEF:0000722C ; bool __stdcall StringToBool(const struct UString *, bool *)
UNDEF:0000722C                 extrn ?StringToBool@@YG_NABVUString@@AA_N@Z:near
UNDEF:0000722C                                         ; CODE XREF: NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT(tagPROPVARIANT const &)+93p
UNDEF:00007230 ; __int32 __thiscall NArchive::CMultiMethodProps::SetProperty(NArchive::CMultiMethodProps *__hidden this, const wchar_t *, const struct tagPROPVARIANT *)
UNDEF:00007230                 extrn ?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z:near
UNDEF:00007230                                         ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+3A6p
UNDEF:00007234 ; __int32 __stdcall PROPVARIANT_to_bool(const struct tagPROPVARIANT *, bool *)
UNDEF:00007234                 extrn ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z:near
UNDEF:00007234                                         ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+15Fp
UNDEF:00007234                                         ; NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+19Dp ...
UNDEF:00007238 ; unsigned int __stdcall ParseStringToUInt32(const struct UString *, unsigned int *)
UNDEF:00007238                 extrn ?ParseStringToUInt32@@YGIABVUString@@AAI@Z:near
UNDEF:00007238                                         ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+12Ep
UNDEF:00007238                                         ; NArchive::N7z::ParseBond(UString &,uint &,uint &)+25p ...
UNDEF:0000723C ; void __thiscall UString::Delete(UString *__hidden this, unsigned int)
UNDEF:0000723C                 extrn ?Delete@UString@@QAEXI@Z:near
UNDEF:0000723C                                         ; CODE XREF: NArchive::N7z::COutHandler::SetProperty(wchar_t const *,tagPROPVARIANT const &)+9Ep
UNDEF:0000723C                                         ; NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+130p ...
UNDEF:00007240 ; bool __stdcall StringsAreEqual_Ascii(const wchar_t *, const char *)
UNDEF:00007240                 extrn ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:near
UNDEF:00007240                                         ; CODE XREF: UString::IsEqualTo(char const *)+18p
UNDEF:00007244 ; void __thiscall UString::DeleteFrontal(UString *__hidden this, unsigned int)
UNDEF:00007244                 extrn ?DeleteFrontal@UString@@QAEXI@Z:near
UNDEF:00007244                                         ; CODE XREF: NArchive::N7z::ParseBond(UString &,uint &,uint &)+41p
UNDEF:00007244                                         ; NArchive::N7z::ParseBond(UString &,uint &,uint &)+84p
UNDEF:00007248 ; void *__cdecl operator new(unsigned int)
UNDEF:00007248                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+8Ap
UNDEF:00007248                                         ; CObjectVector<CProp>::AddNew(void)+3Ep ...
UNDEF:0000724C ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000724C                 extrn _memcpy:near      ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)+C3p
UNDEF:0000724C                                         ; CRecordVector<void *>::Reserve(uint)+67p ...
UNDEF:00007250 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this, const struct NWindows::NCOM::CPropVariant *)
UNDEF:00007250                 extrn ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:near
UNDEF:00007250                                         ; CODE XREF: CProp::CProp(CProp const &)+31p
UNDEF:00007254 ; public: __thiscall AString::AString(class AString const &)
UNDEF:00007254                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:00007254                                         ; CODE XREF: COneMethodInfo::COneMethodInfo(COneMethodInfo const &)+4Dp
UNDEF:00007258 ; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
UNDEF:00007258                 extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
UNDEF:00007258                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+28p
UNDEF:0000725C ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000725C                 extrn __imp__memmove:near
UNDEF:0000725C                                         ; CODE XREF: CRecordVector<void *>::MoveItems(uint,uint)+36p
UNDEF:0000725C                                         ; DATA XREF: CRecordVector<void *>::MoveItems(uint,uint)+36r
UNDEF:0000725C
UNDEF:0000725C