.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : A7BD3B14C3EDA05D426CFAAE10D63717
.text:00000000 ; Input CRC32 : 3334EE91
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Threads.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall HandleToWRes(x)
.text:00000000                 public _HandleToWRes@4
.text:00000000 _HandleToWRes@4 proc near               ; CODE XREF: Thread_Create(x,x,x)+4Bp
.text:00000000                                         ; Event_Create(x,x,x)+30p ...
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 cmp     [ebp+arg_0], 0
.text:0000000F                 jz      short loc_1A
.text:00000011                 mov     [ebp+var_4], 0
.text:00000018                 jmp     short loc_22
.text:0000001A ; ---------------------------------------------------------------------------
.text:0000001A
.text:0000001A loc_1A:                                 ; CODE XREF: HandleToWRes(x)+Fj
.text:0000001A                 call    _GetError@0     ; GetError()
.text:0000001F                 mov     [ebp+var_4], eax
.text:00000022
.text:00000022 loc_22:                                 ; CODE XREF: HandleToWRes(x)+18j
.text:00000022                 mov     eax, [ebp+var_4]
.text:00000025                 add     esp, 4
.text:00000028                 cmp     ebp, esp
.text:0000002A                 call    __RTC_CheckEsp
.text:0000002F                 mov     esp, ebp
.text:00000031                 pop     ebp
.text:00000032                 retn    4
.text:00000032 _HandleToWRes@4 endp
.text:00000032
.text:00000032 ; ---------------------------------------------------------------------------
.text:00000035                 align 10h
.text:00000040
.text:00000040 ; =============== S U B R O U T I N E =======================================
.text:00000040
.text:00000040 ; Attributes: bp-based frame
.text:00000040
.text:00000040 ; __stdcall GetError()
.text:00000040 _GetError@0     proc near               ; CODE XREF: HandleToWRes(x):loc_1Ap
.text:00000040                                         ; BOOLToWRes(x):loc_AAp ...
.text:00000040
.text:00000040 var_8           = dword ptr -8
.text:00000040 var_4           = dword ptr -4
.text:00000040
.text:00000040                 push    ebp
.text:00000041                 mov     ebp, esp
.text:00000043                 sub     esp, 8
.text:00000046                 push    esi
.text:00000047                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000004E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000055                 mov     esi, esp
.text:00000057                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000005D                 cmp     esi, esp
.text:0000005F                 call    __RTC_CheckEsp
.text:00000064                 mov     [ebp+var_4], eax
.text:00000067                 cmp     [ebp+var_4], 0
.text:0000006B                 jz      short loc_75
.text:0000006D                 mov     eax, [ebp+var_4]
.text:00000070                 mov     [ebp+var_8], eax
.text:00000073                 jmp     short loc_7C
.text:00000075 ; ---------------------------------------------------------------------------
.text:00000075
.text:00000075 loc_75:                                 ; CODE XREF: GetError()+2Bj
.text:00000075                 mov     [ebp+var_8], 1
.text:0000007C
.text:0000007C loc_7C:                                 ; CODE XREF: GetError()+33j
.text:0000007C                 mov     eax, [ebp+var_8]
.text:0000007F                 pop     esi
.text:00000080                 add     esp, 8
.text:00000083                 cmp     ebp, esp
.text:00000085                 call    __RTC_CheckEsp
.text:0000008A                 mov     esp, ebp
.text:0000008C                 pop     ebp
.text:0000008D                 retn
.text:0000008D _GetError@0     endp
.text:0000008D
.text:0000008D ; ---------------------------------------------------------------------------
.text:0000008E                 align 10h
.text:00000090
.text:00000090 ; =============== S U B R O U T I N E =======================================
.text:00000090
.text:00000090 ; Attributes: bp-based frame
.text:00000090
.text:00000090 ; __stdcall BOOLToWRes(x)
.text:00000090                 public _BOOLToWRes@4
.text:00000090 _BOOLToWRes@4   proc near               ; CODE XREF: Event_Set(x)+1Ap
.text:00000090                                         ; Event_Reset(x)+1Ap ...
.text:00000090
.text:00000090 var_4           = dword ptr -4
.text:00000090 arg_0           = dword ptr  8
.text:00000090
.text:00000090                 push    ebp
.text:00000091                 mov     ebp, esp
.text:00000093                 push    ecx
.text:00000094                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000009B                 cmp     [ebp+arg_0], 0
.text:0000009F                 jz      short loc_AA
.text:000000A1                 mov     [ebp+var_4], 0
.text:000000A8                 jmp     short loc_B2
.text:000000AA ; ---------------------------------------------------------------------------
.text:000000AA
.text:000000AA loc_AA:                                 ; CODE XREF: BOOLToWRes(x)+Fj
.text:000000AA                 call    _GetError@0     ; GetError()
.text:000000AF                 mov     [ebp+var_4], eax
.text:000000B2
.text:000000B2 loc_B2:                                 ; CODE XREF: BOOLToWRes(x)+18j
.text:000000B2                 mov     eax, [ebp+var_4]
.text:000000B5                 add     esp, 4
.text:000000B8                 cmp     ebp, esp
.text:000000BA                 call    __RTC_CheckEsp
.text:000000BF                 mov     esp, ebp
.text:000000C1                 pop     ebp
.text:000000C2                 retn    4
.text:000000C2 _BOOLToWRes@4   endp
.text:000000C2
.text:000000C2 ; ---------------------------------------------------------------------------
.text:000000C5                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; __stdcall HandlePtr_Close(x)
.text:000000D0                 public _HandlePtr_Close@4
.text:000000D0 _HandlePtr_Close@4 proc near
.text:000000D0
.text:000000D0 arg_0           = dword ptr  8
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 push    esi
.text:000000D4                 mov     eax, [ebp+arg_0]
.text:000000D7                 cmp     dword ptr [eax], 0
.text:000000DA                 jz      short loc_FC
.text:000000DC                 mov     esi, esp
.text:000000DE                 mov     ecx, [ebp+arg_0]
.text:000000E1                 mov     edx, [ecx]
.text:000000E3                 push    edx             ; hObject
.text:000000E4                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:000000EA                 cmp     esi, esp
.text:000000EC                 call    __RTC_CheckEsp
.text:000000F1                 test    eax, eax
.text:000000F3                 jnz     short loc_FC
.text:000000F5                 call    _GetError@0     ; GetError()
.text:000000FA                 jmp     short loc_107
.text:000000FC ; ---------------------------------------------------------------------------
.text:000000FC
.text:000000FC loc_FC:                                 ; CODE XREF: HandlePtr_Close(x)+Aj
.text:000000FC                                         ; HandlePtr_Close(x)+23j
.text:000000FC                 mov     eax, [ebp+arg_0]
.text:000000FF                 mov     dword ptr [eax], 0
.text:00000105                 xor     eax, eax
.text:00000107
.text:00000107 loc_107:                                ; CODE XREF: HandlePtr_Close(x)+2Aj
.text:00000107                 pop     esi
.text:00000108                 cmp     ebp, esp
.text:0000010A                 call    __RTC_CheckEsp
.text:0000010F                 pop     ebp
.text:00000110                 retn    4
.text:00000110 _HandlePtr_Close@4 endp
.text:00000110
.text:00000110 ; ---------------------------------------------------------------------------
.text:00000113                 align 10h
.text:00000120
.text:00000120 ; =============== S U B R O U T I N E =======================================
.text:00000120
.text:00000120 ; Attributes: bp-based frame
.text:00000120
.text:00000120 ; int __stdcall Handle_WaitObject(HANDLE hHandle)
.text:00000120                 public _Handle_WaitObject@4
.text:00000120 _Handle_WaitObject@4 proc near
.text:00000120
.text:00000120 hHandle         = dword ptr  8
.text:00000120
.text:00000120                 push    ebp
.text:00000121                 mov     ebp, esp
.text:00000123                 push    esi
.text:00000124                 mov     esi, esp
.text:00000126                 push    0FFFFFFFFh      ; dwMilliseconds
.text:00000128                 mov     eax, [ebp+hHandle]
.text:0000012B                 push    eax             ; hHandle
.text:0000012C                 call    dword ptr ds:__imp__WaitForSingleObject@8 ; WaitForSingleObject(x,x)
.text:00000132                 cmp     esi, esp
.text:00000134                 call    __RTC_CheckEsp
.text:00000139                 pop     esi
.text:0000013A                 cmp     ebp, esp
.text:0000013C                 call    __RTC_CheckEsp
.text:00000141                 pop     ebp
.text:00000142                 retn    4
.text:00000142 _Handle_WaitObject@4 endp
.text:00000142
.text:00000142 ; ---------------------------------------------------------------------------
.text:00000145                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; __stdcall Thread_Create(x, x, x)
.text:00000150                 public _Thread_Create@12
.text:00000150 _Thread_Create@12 proc near
.text:00000150
.text:00000150 var_C           = dword ptr -0Ch
.text:00000150 var_8           = dword ptr -8
.text:00000150 var_4           = dword ptr -4
.text:00000150 arg_0           = dword ptr  8
.text:00000150 arg_4           = dword ptr  0Ch
.text:00000150 arg_8           = dword ptr  10h
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 sub     esp, 0Ch
.text:00000156                 push    esi
.text:00000157                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000015E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000165                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000016C                 mov     esi, esp
.text:0000016E                 lea     eax, [ebp+var_8]
.text:00000171                 push    eax
.text:00000172                 push    0
.text:00000174                 mov     ecx, [ebp+arg_8]
.text:00000177                 push    ecx
.text:00000178                 mov     edx, [ebp+arg_4]
.text:0000017B                 push    edx
.text:0000017C                 push    0
.text:0000017E                 push    0
.text:00000180                 call    dword ptr ds:__imp___beginthreadex
.text:00000186                 add     esp, 18h
.text:00000189                 cmp     esi, esp
.text:0000018B                 call    __RTC_CheckEsp
.text:00000190                 mov     ecx, [ebp+arg_0]
.text:00000193                 mov     [ecx], eax
.text:00000195                 mov     edx, [ebp+arg_0]
.text:00000198                 mov     eax, [edx]
.text:0000019A                 push    eax
.text:0000019B                 call    _HandleToWRes@4 ; HandleToWRes(x)
.text:000001A0                 push    edx
.text:000001A1                 mov     ecx, ebp
.text:000001A3                 push    eax
.text:000001A4                 lea     edx, $LN5
.text:000001AA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001AF                 pop     eax
.text:000001B0                 pop     edx
.text:000001B1                 pop     esi
.text:000001B2                 add     esp, 0Ch
.text:000001B5                 cmp     ebp, esp
.text:000001B7                 call    __RTC_CheckEsp
.text:000001BC                 mov     esp, ebp
.text:000001BE                 pop     ebp
.text:000001BF                 retn    0Ch
.text:000001BF _Thread_Create@12 endp
.text:000001BF
.text:000001BF ; ---------------------------------------------------------------------------
.text:000001C2                 align 4
.text:000001C4 $LN5            dd 1                    ; DATA XREF: Thread_Create(x,x,x)+54o
.text:000001C8                 dd offset $LN4
.text:000001CC $LN4            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000001C8o
.text:000001D4                 dd offset $LN3          ; "threadId"
.text:000001D8 $LN3            db 'threadId',0         ; DATA XREF: .text:000001D4o
.text:000001E1                 align 10h
.text:000001F0
.text:000001F0 ; =============== S U B R O U T I N E =======================================
.text:000001F0
.text:000001F0 ; Attributes: bp-based frame
.text:000001F0
.text:000001F0 ; int __stdcall Event_Create(int, BOOL bManualReset, int)
.text:000001F0                 public _Event_Create@12
.text:000001F0 _Event_Create@12 proc near              ; CODE XREF: ManualResetEvent_Create(x,x)+Dp
.text:000001F0                                         ; AutoResetEvent_Create(x,x)+Dp
.text:000001F0
.text:000001F0 arg_0           = dword ptr  8
.text:000001F0 bManualReset    = dword ptr  0Ch
.text:000001F0 arg_8           = dword ptr  10h
.text:000001F0
.text:000001F0                 push    ebp
.text:000001F1                 mov     ebp, esp
.text:000001F3                 push    esi
.text:000001F4                 mov     esi, esp
.text:000001F6                 push    0               ; lpName
.text:000001F8                 xor     eax, eax
.text:000001FA                 cmp     [ebp+arg_8], 0
.text:000001FE                 setnz   al
.text:00000201                 push    eax             ; bInitialState
.text:00000202                 mov     ecx, [ebp+bManualReset]
.text:00000205                 push    ecx             ; bManualReset
.text:00000206                 push    0               ; lpEventAttributes
.text:00000208                 call    dword ptr ds:__imp__CreateEventA@16 ; CreateEventA(x,x,x,x)
.text:0000020E                 cmp     esi, esp
.text:00000210                 call    __RTC_CheckEsp
.text:00000215                 mov     edx, [ebp+arg_0]
.text:00000218                 mov     [edx], eax
.text:0000021A                 mov     eax, [ebp+arg_0]
.text:0000021D                 mov     ecx, [eax]
.text:0000021F                 push    ecx
.text:00000220                 call    _HandleToWRes@4 ; HandleToWRes(x)
.text:00000225                 pop     esi
.text:00000226                 cmp     ebp, esp
.text:00000228                 call    __RTC_CheckEsp
.text:0000022D                 pop     ebp
.text:0000022E                 retn    0Ch
.text:0000022E _Event_Create@12 endp
.text:0000022E
.text:0000022E ; ---------------------------------------------------------------------------
.text:00000231                 align 10h
.text:00000240
.text:00000240 ; =============== S U B R O U T I N E =======================================
.text:00000240
.text:00000240 ; Attributes: bp-based frame
.text:00000240
.text:00000240 ; __stdcall Event_Set(x)
.text:00000240                 public _Event_Set@4
.text:00000240 _Event_Set@4    proc near
.text:00000240
.text:00000240 arg_0           = dword ptr  8
.text:00000240
.text:00000240                 push    ebp
.text:00000241                 mov     ebp, esp
.text:00000243                 push    esi
.text:00000244                 mov     esi, esp
.text:00000246                 mov     eax, [ebp+arg_0]
.text:00000249                 mov     ecx, [eax]
.text:0000024B                 push    ecx             ; hEvent
.text:0000024C                 call    dword ptr ds:__imp__SetEvent@4 ; SetEvent(x)
.text:00000252                 cmp     esi, esp
.text:00000254                 call    __RTC_CheckEsp
.text:00000259                 push    eax
.text:0000025A                 call    _BOOLToWRes@4   ; BOOLToWRes(x)
.text:0000025F                 pop     esi
.text:00000260                 cmp     ebp, esp
.text:00000262                 call    __RTC_CheckEsp
.text:00000267                 pop     ebp
.text:00000268                 retn    4
.text:00000268 _Event_Set@4    endp
.text:00000268
.text:00000268 ; ---------------------------------------------------------------------------
.text:0000026B                 align 10h
.text:00000270
.text:00000270 ; =============== S U B R O U T I N E =======================================
.text:00000270
.text:00000270 ; Attributes: bp-based frame
.text:00000270
.text:00000270 ; __stdcall Event_Reset(x)
.text:00000270                 public _Event_Reset@4
.text:00000270 _Event_Reset@4  proc near
.text:00000270
.text:00000270 arg_0           = dword ptr  8
.text:00000270
.text:00000270                 push    ebp
.text:00000271                 mov     ebp, esp
.text:00000273                 push    esi
.text:00000274                 mov     esi, esp
.text:00000276                 mov     eax, [ebp+arg_0]
.text:00000279                 mov     ecx, [eax]
.text:0000027B                 push    ecx             ; hEvent
.text:0000027C                 call    dword ptr ds:__imp__ResetEvent@4 ; ResetEvent(x)
.text:00000282                 cmp     esi, esp
.text:00000284                 call    __RTC_CheckEsp
.text:00000289                 push    eax
.text:0000028A                 call    _BOOLToWRes@4   ; BOOLToWRes(x)
.text:0000028F                 pop     esi
.text:00000290                 cmp     ebp, esp
.text:00000292                 call    __RTC_CheckEsp
.text:00000297                 pop     ebp
.text:00000298                 retn    4
.text:00000298 _Event_Reset@4  endp
.text:00000298
.text:00000298 ; ---------------------------------------------------------------------------
.text:0000029B                 align 10h
.text:000002A0
.text:000002A0 ; =============== S U B R O U T I N E =======================================
.text:000002A0
.text:000002A0 ; Attributes: bp-based frame
.text:000002A0
.text:000002A0 ; __stdcall ManualResetEvent_Create(x, x)
.text:000002A0                 public _ManualResetEvent_Create@8
.text:000002A0 _ManualResetEvent_Create@8 proc near    ; CODE XREF: ManualResetEvent_CreateNotSignaled(x)+9p
.text:000002A0
.text:000002A0 arg_0           = dword ptr  8
.text:000002A0 arg_4           = dword ptr  0Ch
.text:000002A0
.text:000002A0                 push    ebp
.text:000002A1                 mov     ebp, esp
.text:000002A3                 mov     eax, [ebp+arg_4]
.text:000002A6                 push    eax             ; int
.text:000002A7                 push    1               ; bManualReset
.text:000002A9                 mov     ecx, [ebp+arg_0]
.text:000002AC                 push    ecx             ; int
.text:000002AD                 call    _Event_Create@12 ; Event_Create(x,x,x)
.text:000002B2                 cmp     ebp, esp
.text:000002B4                 call    __RTC_CheckEsp
.text:000002B9                 pop     ebp
.text:000002BA                 retn    8
.text:000002BA _ManualResetEvent_Create@8 endp
.text:000002BA
.text:000002BA ; ---------------------------------------------------------------------------
.text:000002BD                 align 10h
.text:000002C0
.text:000002C0 ; =============== S U B R O U T I N E =======================================
.text:000002C0
.text:000002C0 ; Attributes: bp-based frame
.text:000002C0
.text:000002C0 ; __stdcall AutoResetEvent_Create(x, x)
.text:000002C0                 public _AutoResetEvent_Create@8
.text:000002C0 _AutoResetEvent_Create@8 proc near      ; CODE XREF: AutoResetEvent_CreateNotSignaled(x)+9p
.text:000002C0
.text:000002C0 arg_0           = dword ptr  8
.text:000002C0 arg_4           = dword ptr  0Ch
.text:000002C0
.text:000002C0                 push    ebp
.text:000002C1                 mov     ebp, esp
.text:000002C3                 mov     eax, [ebp+arg_4]
.text:000002C6                 push    eax             ; int
.text:000002C7                 push    0               ; bManualReset
.text:000002C9                 mov     ecx, [ebp+arg_0]
.text:000002CC                 push    ecx             ; int
.text:000002CD                 call    _Event_Create@12 ; Event_Create(x,x,x)
.text:000002D2                 cmp     ebp, esp
.text:000002D4                 call    __RTC_CheckEsp
.text:000002D9                 pop     ebp
.text:000002DA                 retn    8
.text:000002DA _AutoResetEvent_Create@8 endp
.text:000002DA
.text:000002DA ; ---------------------------------------------------------------------------
.text:000002DD                 align 10h
.text:000002E0
.text:000002E0 ; =============== S U B R O U T I N E =======================================
.text:000002E0
.text:000002E0 ; Attributes: bp-based frame
.text:000002E0
.text:000002E0 ; __stdcall ManualResetEvent_CreateNotSignaled(x)
.text:000002E0                 public _ManualResetEvent_CreateNotSignaled@4
.text:000002E0 _ManualResetEvent_CreateNotSignaled@4 proc near
.text:000002E0
.text:000002E0 arg_0           = dword ptr  8
.text:000002E0
.text:000002E0                 push    ebp
.text:000002E1                 mov     ebp, esp
.text:000002E3                 push    0
.text:000002E5                 mov     eax, [ebp+arg_0]
.text:000002E8                 push    eax
.text:000002E9                 call    _ManualResetEvent_Create@8 ; ManualResetEvent_Create(x,x)
.text:000002EE                 cmp     ebp, esp
.text:000002F0                 call    __RTC_CheckEsp
.text:000002F5                 pop     ebp
.text:000002F6                 retn    4
.text:000002F6 _ManualResetEvent_CreateNotSignaled@4 endp
.text:000002F6
.text:000002F6 ; ---------------------------------------------------------------------------
.text:000002F9                 align 10h
.text:00000300
.text:00000300 ; =============== S U B R O U T I N E =======================================
.text:00000300
.text:00000300 ; Attributes: bp-based frame
.text:00000300
.text:00000300 ; __stdcall AutoResetEvent_CreateNotSignaled(x)
.text:00000300                 public _AutoResetEvent_CreateNotSignaled@4
.text:00000300 _AutoResetEvent_CreateNotSignaled@4 proc near
.text:00000300
.text:00000300 arg_0           = dword ptr  8
.text:00000300
.text:00000300                 push    ebp
.text:00000301                 mov     ebp, esp
.text:00000303                 push    0
.text:00000305                 mov     eax, [ebp+arg_0]
.text:00000308                 push    eax
.text:00000309                 call    _AutoResetEvent_Create@8 ; AutoResetEvent_Create(x,x)
.text:0000030E                 cmp     ebp, esp
.text:00000310                 call    __RTC_CheckEsp
.text:00000315                 pop     ebp
.text:00000316                 retn    4
.text:00000316 _AutoResetEvent_CreateNotSignaled@4 endp
.text:00000316
.text:00000316 ; ---------------------------------------------------------------------------
.text:00000319                 align 10h
.text:00000320
.text:00000320 ; =============== S U B R O U T I N E =======================================
.text:00000320
.text:00000320 ; Attributes: bp-based frame
.text:00000320
.text:00000320 ; int __stdcall Semaphore_Create(int, LONG lInitialCount, LONG lMaximumCount)
.text:00000320                 public _Semaphore_Create@12
.text:00000320 _Semaphore_Create@12 proc near
.text:00000320
.text:00000320 arg_0           = dword ptr  8
.text:00000320 lInitialCount   = dword ptr  0Ch
.text:00000320 lMaximumCount   = dword ptr  10h
.text:00000320
.text:00000320                 push    ebp
.text:00000321                 mov     ebp, esp
.text:00000323                 push    esi
.text:00000324                 mov     esi, esp
.text:00000326                 push    0               ; lpName
.text:00000328                 mov     eax, [ebp+lMaximumCount]
.text:0000032B                 push    eax             ; lMaximumCount
.text:0000032C                 mov     ecx, [ebp+lInitialCount]
.text:0000032F                 push    ecx             ; lInitialCount
.text:00000330                 push    0               ; lpSemaphoreAttributes
.text:00000332                 call    dword ptr ds:__imp__CreateSemaphoreA@16 ; CreateSemaphoreA(x,x,x,x)
.text:00000338                 cmp     esi, esp
.text:0000033A                 call    __RTC_CheckEsp
.text:0000033F                 mov     edx, [ebp+arg_0]
.text:00000342                 mov     [edx], eax
.text:00000344                 mov     eax, [ebp+arg_0]
.text:00000347                 mov     ecx, [eax]
.text:00000349                 push    ecx
.text:0000034A                 call    _HandleToWRes@4 ; HandleToWRes(x)
.text:0000034F                 pop     esi
.text:00000350                 cmp     ebp, esp
.text:00000352                 call    __RTC_CheckEsp
.text:00000357                 pop     ebp
.text:00000358                 retn    0Ch
.text:00000358 _Semaphore_Create@12 endp
.text:00000358
.text:00000358 ; ---------------------------------------------------------------------------
.text:0000035B                 align 10h
.text:00000360
.text:00000360 ; =============== S U B R O U T I N E =======================================
.text:00000360
.text:00000360 ; Attributes: bp-based frame
.text:00000360
.text:00000360 ; int __stdcall Semaphore_ReleaseN(int, LONG lReleaseCount)
.text:00000360                 public _Semaphore_ReleaseN@8
.text:00000360 _Semaphore_ReleaseN@8 proc near         ; CODE XREF: Semaphore_Release1(x)+9p
.text:00000360
.text:00000360 arg_0           = dword ptr  8
.text:00000360 lReleaseCount   = dword ptr  0Ch
.text:00000360
.text:00000360                 push    ebp
.text:00000361                 mov     ebp, esp
.text:00000363                 push    0               ; lpPreviousCount
.text:00000365                 mov     eax, [ebp+lReleaseCount]
.text:00000368                 push    eax             ; lReleaseCount
.text:00000369                 mov     ecx, [ebp+arg_0]
.text:0000036C                 push    ecx             ; int
.text:0000036D                 call    _Semaphore_Release@12 ; Semaphore_Release(x,x,x)
.text:00000372                 cmp     ebp, esp
.text:00000374                 call    __RTC_CheckEsp
.text:00000379                 pop     ebp
.text:0000037A                 retn    8
.text:0000037A _Semaphore_ReleaseN@8 endp
.text:0000037A
.text:0000037A ; ---------------------------------------------------------------------------
.text:0000037D                 align 10h
.text:00000380
.text:00000380 ; =============== S U B R O U T I N E =======================================
.text:00000380
.text:00000380 ; Attributes: bp-based frame
.text:00000380
.text:00000380 ; int __stdcall Semaphore_Release(int, LONG lReleaseCount, LPLONG lpPreviousCount)
.text:00000380 _Semaphore_Release@12 proc near         ; CODE XREF: Semaphore_ReleaseN(x,x)+Dp
.text:00000380
.text:00000380 arg_0           = dword ptr  8
.text:00000380 lReleaseCount   = dword ptr  0Ch
.text:00000380 lpPreviousCount = dword ptr  10h
.text:00000380
.text:00000380                 push    ebp
.text:00000381                 mov     ebp, esp
.text:00000383                 push    esi
.text:00000384                 mov     esi, esp
.text:00000386                 mov     eax, [ebp+lpPreviousCount]
.text:00000389                 push    eax             ; lpPreviousCount
.text:0000038A                 mov     ecx, [ebp+lReleaseCount]
.text:0000038D                 push    ecx             ; lReleaseCount
.text:0000038E                 mov     edx, [ebp+arg_0]
.text:00000391                 mov     eax, [edx]
.text:00000393                 push    eax             ; hSemaphore
.text:00000394                 call    dword ptr ds:__imp__ReleaseSemaphore@12 ; ReleaseSemaphore(x,x,x)
.text:0000039A                 cmp     esi, esp
.text:0000039C                 call    __RTC_CheckEsp
.text:000003A1                 push    eax
.text:000003A2                 call    _BOOLToWRes@4   ; BOOLToWRes(x)
.text:000003A7                 pop     esi
.text:000003A8                 cmp     ebp, esp
.text:000003AA                 call    __RTC_CheckEsp
.text:000003AF                 pop     ebp
.text:000003B0                 retn    0Ch
.text:000003B0 _Semaphore_Release@12 endp
.text:000003B0
.text:000003B0 ; ---------------------------------------------------------------------------
.text:000003B3                 align 10h
.text:000003C0
.text:000003C0 ; =============== S U B R O U T I N E =======================================
.text:000003C0
.text:000003C0 ; Attributes: bp-based frame
.text:000003C0
.text:000003C0 ; __stdcall Semaphore_Release1(x)
.text:000003C0                 public _Semaphore_Release1@4
.text:000003C0 _Semaphore_Release1@4 proc near
.text:000003C0
.text:000003C0 arg_0           = dword ptr  8
.text:000003C0
.text:000003C0                 push    ebp
.text:000003C1                 mov     ebp, esp
.text:000003C3                 push    1               ; lReleaseCount
.text:000003C5                 mov     eax, [ebp+arg_0]
.text:000003C8                 push    eax             ; int
.text:000003C9                 call    _Semaphore_ReleaseN@8 ; Semaphore_ReleaseN(x,x)
.text:000003CE                 cmp     ebp, esp
.text:000003D0                 call    __RTC_CheckEsp
.text:000003D5                 pop     ebp
.text:000003D6                 retn    4
.text:000003D6 _Semaphore_Release1@4 endp
.text:000003D6
.text:000003D6 ; ---------------------------------------------------------------------------
.text:000003D9                 align 10h
.text:000003E0
.text:000003E0 ; =============== S U B R O U T I N E =======================================
.text:000003E0
.text:000003E0 ; Attributes: bp-based frame
.text:000003E0
.text:000003E0 ; int __stdcall CriticalSection_Init(LPCRITICAL_SECTION lpCriticalSection)
.text:000003E0                 public _CriticalSection_Init@4
.text:000003E0 _CriticalSection_Init@4 proc near
.text:000003E0
.text:000003E0 var_1C          = dword ptr -1Ch
.text:000003E0 ms_exc          = CPPEH_RECORD ptr -18h
.text:000003E0 lpCriticalSection= dword ptr  8
.text:000003E0
.text:000003E0                 push    ebp
.text:000003E1                 mov     ebp, esp
.text:000003E3                 push    0FFFFFFFEh
.text:000003E5                 push    offset __sehtable$_CriticalSection_Init@4
.text:000003EA                 push    offset __except_handler4
.text:000003EF                 mov     eax, large fs:0
.text:000003F5                 push    eax
.text:000003F6                 add     esp, 0FFFFFFF4h
.text:000003F9                 push    ebx
.text:000003FA                 push    esi
.text:000003FB                 push    edi
.text:000003FC                 mov     [ebp+var_1C], 0CCCCCCCCh
.text:00000403                 mov     eax, dword ptr ds:___security_cookie
.text:00000408                 xor     [ebp+ms_exc.registration.ScopeTable], eax
.text:0000040B                 xor     eax, ebp
.text:0000040D                 push    eax
.text:0000040E                 lea     eax, [ebp+ms_exc.registration]
.text:00000411                 mov     large fs:0, eax
.text:00000417                 mov     [ebp+ms_exc.old_esp], esp
.text:0000041A                 mov     [ebp+ms_exc.registration.TryLevel], 0
.text:00000421                 mov     esi, esp
.text:00000423                 mov     eax, [ebp+lpCriticalSection]
.text:00000426                 push    eax             ; lpCriticalSection
.text:00000427                 call    dword ptr ds:__imp__InitializeCriticalSection@4 ; InitializeCriticalSection(x)
.text:0000042D                 cmp     esi, esp
.text:0000042F                 call    __RTC_CheckEsp
.text:00000434                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:0000043B                 jmp     short loc_460
.text:0000043D ; ---------------------------------------------------------------------------
.text:0000043D
.text:0000043D $LN10:                                  ; DATA XREF: .xdata$x:__sehtable$_CriticalSection_Init@4o
.text:0000043D                 mov     eax, 1          ; $LN5
.text:00000442
.text:00000442 $LN9:                                   ; $LN7
.text:00000442                 retn
.text:00000443 ; ---------------------------------------------------------------------------
.text:00000443
.text:00000443 $LN6:                                   ; DATA XREF: .xdata$x:__sehtable$_CriticalSection_Init@4o
.text:00000443                 mov     esp, [ebp+ms_exc.old_esp] ; Exception handler 0 for function 3E0
.text:00000446                 mov     [ebp+var_1C], 1
.text:0000044D                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00000454                 mov     eax, [ebp+var_1C]
.text:00000457                 jmp     short loc_462
.text:00000459 ; ---------------------------------------------------------------------------
.text:00000459                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00000460
.text:00000460 loc_460:                                ; CODE XREF: CriticalSection_Init(x)+5Bj
.text:00000460                 xor     eax, eax
.text:00000462
.text:00000462 loc_462:                                ; CODE XREF: CriticalSection_Init(x)+77j
.text:00000462                 mov     ecx, [ebp+ms_exc.registration.Next]
.text:00000465                 mov     large fs:0, ecx
.text:0000046C                 pop     ecx
.text:0000046D                 pop     edi
.text:0000046E                 pop     esi
.text:0000046F                 pop     ebx
.text:00000470                 add     esp, 1Ch
.text:00000473                 cmp     ebp, esp
.text:00000475                 call    __RTC_CheckEsp
.text:0000047A                 mov     esp, ebp
.text:0000047C                 pop     ebp
.text:0000047D                 retn    4
.text:0000047D _CriticalSection_Init@4 endp
.text:0000047D
.text:0000047D _text           ends
.text:0000047D
.rtc$TMZ:00000480 ; ===========================================================================
.rtc$TMZ:00000480
.rtc$TMZ:00000480 ; Segment type: Pure data
.rtc$TMZ:00000480 ; Segment permissions: Read
.rtc$TMZ:00000480 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000480                 assume cs:_rtc$TMZ
.rtc$TMZ:00000480                 ;org 480h
.rtc$TMZ:00000480 ; COMDAT (pick any)
.rtc$TMZ:00000480 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000480 _rtc$TMZ        ends
.rtc$TMZ:00000480
.rtc$IMZ:00000484 ; ===========================================================================
.rtc$IMZ:00000484
.rtc$IMZ:00000484 ; Segment type: Pure data
.rtc$IMZ:00000484 ; Segment permissions: Read
.rtc$IMZ:00000484 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000484                 assume cs:_rtc$IMZ
.rtc$IMZ:00000484                 ;org 484h
.rtc$IMZ:00000484 ; COMDAT (pick any)
.rtc$IMZ:00000484 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000484 _rtc$IMZ        ends
.rtc$IMZ:00000484
.xdata$x:00000488 ; ===========================================================================
.xdata$x:00000488
.xdata$x:00000488 ; Segment type: Pure data
.xdata$x:00000488 ; Segment permissions: Read
.xdata$x:00000488 ; Segment alignment 'qword' can not be represented in assembly
.xdata$x:00000488 _xdata$x        segment para public 'DATA' use32
.xdata$x:00000488                 assume cs:_xdata$x
.xdata$x:00000488                 ;org 488h
.xdata$x:00000488 __sehtable$_CriticalSection_Init@4 dd 0FFFFFFFEh           ; GSCookieOffset
.xdata$x:00000488                                         ; DATA XREF: CriticalSection_Init(x)+5o
.xdata$x:00000488                 dd 0                    ; GSCookieXOROffset ; SEH scope table for function 3E0
.xdata$x:00000488                 dd 0FFFFFFD4h           ; EHCookieOffset
.xdata$x:00000488                 dd 0                    ; EHCookieXOROffset
.xdata$x:00000488                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.xdata$x:00000488                 dd offset $LN10         ; ScopeRecord.FilterFunc
.xdata$x:00000488                 dd offset $LN6          ; ScopeRecord.HandlerFunc
.xdata$x:00000488 _xdata$x        ends
.xdata$x:00000488
UNDEF:000004B0 ; ===========================================================================
UNDEF:000004B0
UNDEF:000004B0 ; Segment type: Externs
UNDEF:000004B0 ; UNDEF
UNDEF:000004B0                 extrn __RTC_CheckEsp:near ; CODE XREF: HandleToWRes(x)+2Ap
UNDEF:000004B0                                         ; GetError()+1Fp ...
UNDEF:000004B4                 extrn __RTC_Shutdown:near
UNDEF:000004B4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000004B8                 extrn __RTC_InitBase:near
UNDEF:000004B8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000004BC ; DWORD __stdcall GetLastError()
UNDEF:000004BC                 extrn __imp__GetLastError@0:near ; CODE XREF: GetError()+17p
UNDEF:000004BC                                         ; DATA XREF: GetError()+17r
UNDEF:000004C0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
UNDEF:000004C0                 extrn __imp__CloseHandle@4:near
UNDEF:000004C0                                         ; CODE XREF: HandlePtr_Close(x)+14p
UNDEF:000004C0                                         ; DATA XREF: HandlePtr_Close(x)+14r
UNDEF:000004C4 ; DWORD __stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
UNDEF:000004C4                 extrn __imp__WaitForSingleObject@8:near
UNDEF:000004C4                                         ; CODE XREF: Handle_WaitObject(x)+Cp
UNDEF:000004C4                                         ; DATA XREF: Handle_WaitObject(x)+Cr
UNDEF:000004C8                 extrn __imp___beginthreadex:near
UNDEF:000004C8                                         ; CODE XREF: Thread_Create(x,x,x)+30p
UNDEF:000004C8                                         ; DATA XREF: Thread_Create(x,x,x)+30r
UNDEF:000004CC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000004CC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000004CC                                         ; CODE XREF: Thread_Create(x,x,x)+5Ap
UNDEF:000004D0 ; HANDLE __stdcall CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName)
UNDEF:000004D0                 extrn __imp__CreateEventA@16:near
UNDEF:000004D0                                         ; CODE XREF: Event_Create(x,x,x)+18p
UNDEF:000004D0                                         ; DATA XREF: Event_Create(x,x,x)+18r
UNDEF:000004D4 ; BOOL __stdcall SetEvent(HANDLE hEvent)
UNDEF:000004D4                 extrn __imp__SetEvent@4:near ; CODE XREF: Event_Set(x)+Cp
UNDEF:000004D4                                         ; DATA XREF: Event_Set(x)+Cr
UNDEF:000004D8 ; BOOL __stdcall ResetEvent(HANDLE hEvent)
UNDEF:000004D8                 extrn __imp__ResetEvent@4:near ; CODE XREF: Event_Reset(x)+Cp
UNDEF:000004D8                                         ; DATA XREF: Event_Reset(x)+Cr
UNDEF:000004DC ; HANDLE __stdcall CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName)
UNDEF:000004DC                 extrn __imp__CreateSemaphoreA@16:near
UNDEF:000004DC                                         ; CODE XREF: Semaphore_Create(x,x,x)+12p
UNDEF:000004DC                                         ; DATA XREF: Semaphore_Create(x,x,x)+12r
UNDEF:000004E0 ; BOOL __stdcall ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount)
UNDEF:000004E0                 extrn __imp__ReleaseSemaphore@12:near
UNDEF:000004E0                                         ; CODE XREF: Semaphore_Release(x,x,x)+14p
UNDEF:000004E0                                         ; DATA XREF: Semaphore_Release(x,x,x)+14r
UNDEF:000004E4 ; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:000004E4                 extrn __imp__InitializeCriticalSection@4:near
UNDEF:000004E4                                         ; CODE XREF: CriticalSection_Init(x)+47p
UNDEF:000004E4                                         ; DATA XREF: CriticalSection_Init(x)+47r
UNDEF:000004E8                 extrn ___security_cookie:near
UNDEF:000004E8                                         ; DATA XREF: CriticalSection_Init(x)+23r
UNDEF:000004EC                 extrn __except_handler4:near
UNDEF:000004EC                                         ; DATA XREF: CriticalSection_Init(x)+Ao
UNDEF:000004EC
UNDEF:000004EC
UNDEF:000004EC                 end