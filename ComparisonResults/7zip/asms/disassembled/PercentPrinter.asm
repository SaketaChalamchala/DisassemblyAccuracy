.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : E2555A2B01EAC10AE70D6373A2A49C2F
.rdata:00000000 ; Input CRC32 : D3ADD44A
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\PercentPrinter.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; wchar_t _SG68331
.rdata:00000000 $SG68331:                               ; DATA XREF: CPercentPrinter::Print(void)+301o
.rdata:00000000                 unicode 0, < . >,0
.rdata:00000000 _rdata          ends
.rdata:00000000
.text:00000008 ; ===========================================================================
.text:00000008
.text:00000008 ; Segment type: Pure code
.text:00000008 ; Segment permissions: Read/Execute
.text:00000008 _text           segment para public 'CODE' use32
.text:00000008                 assume cs:_text
.text:00000008                 ;org 8
.text:00000008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000008
.text:00000008 ; =============== S U B R O U T I N E =======================================
.text:00000008
.text:00000008 ; Attributes: bp-based frame
.text:00000008
.text:00000008 ; _DWORD __thiscall CPercentPrinter::~CPercentPrinter(CPercentPrinter *__hidden this)
.text:00000008                 public ??1CPercentPrinter@@QAE@XZ
.text:00000008 ??1CPercentPrinter@@QAE@XZ proc near
.text:00000008
.text:00000008 var_10          = dword ptr -10h
.text:00000008 var_C           = dword ptr -0Ch
.text:00000008 var_4           = dword ptr -4
.text:00000008
.text:00000008                 push    ebp
.text:00000009                 mov     ebp, esp
.text:0000000B                 push    0FFFFFFFFh
.text:0000000D                 push    offset __ehhandler$??1CPercentPrinter@@QAE@XZ
.text:00000012                 mov     eax, large fs:0
.text:00000018                 push    eax
.text:00000019                 push    ecx
.text:0000001A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000021                 mov     eax, dword ptr ds:___security_cookie
.text:00000026                 xor     eax, ebp
.text:00000028                 push    eax
.text:00000029                 lea     eax, [ebp+var_C]
.text:0000002C                 mov     large fs:0, eax
.text:00000032                 mov     [ebp+var_10], ecx
.text:00000035                 mov     [ebp+var_4], 6
.text:0000003C                 push    0               ; bool
.text:0000003E                 mov     ecx, [ebp+var_10] ; this
.text:00000041                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:00000046                 mov     byte ptr [ebp+var_4], 5
.text:0000004A                 mov     ecx, [ebp+var_10]
.text:0000004D                 add     ecx, 98h ; 'Ã¿'  ; this
.text:00000053                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000058                 mov     byte ptr [ebp+var_4], 4
.text:0000005C                 mov     ecx, [ebp+var_10]
.text:0000005F                 add     ecx, 68h ; 'h'  ; this
.text:00000062                 call    ??1CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::~CPercentPrinterState(void)
.text:00000067                 mov     byte ptr [ebp+var_4], 3
.text:0000006B                 mov     ecx, [ebp+var_10]
.text:0000006E                 add     ecx, 5Ch ; '\'  ; this
.text:00000071                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000076                 mov     byte ptr [ebp+var_4], 2
.text:0000007A                 mov     ecx, [ebp+var_10]
.text:0000007D                 add     ecx, 50h ; 'P'  ; this
.text:00000080                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000085                 mov     byte ptr [ebp+var_4], 1
.text:00000089                 mov     ecx, [ebp+var_10]
.text:0000008C                 add     ecx, 44h ; 'D'  ; this
.text:0000008F                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000094                 mov     byte ptr [ebp+var_4], 0
.text:00000098                 mov     ecx, [ebp+var_10]
.text:0000009B                 add     ecx, 38h ; '8'  ; this
.text:0000009E                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000000A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000AA                 mov     ecx, [ebp+var_10] ; this
.text:000000AD                 call    ??1CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::~CPercentPrinterState(void)
.text:000000B2                 mov     ecx, [ebp+var_C]
.text:000000B5                 mov     large fs:0, ecx
.text:000000BC                 pop     ecx
.text:000000BD                 add     esp, 10h
.text:000000C0                 cmp     ebp, esp
.text:000000C2                 call    __RTC_CheckEsp
.text:000000C7                 mov     esp, ebp
.text:000000C9                 pop     ebp
.text:000000CA                 retn
.text:000000CA ??1CPercentPrinter@@QAE@XZ endp
.text:000000CA
.text:000000CA ; ---------------------------------------------------------------------------
.text:000000CB                 db 0Dh dup(0CCh)
.text:000000D8
.text:000000D8 ; =============== S U B R O U T I N E =======================================
.text:000000D8
.text:000000D8 ; Attributes: bp-based frame
.text:000000D8
.text:000000D8 ; void __thiscall CPercentPrinterState::ClearCurState(CPercentPrinterState *__hidden this)
.text:000000D8                 public ?ClearCurState@CPercentPrinterState@@QAEXXZ
.text:000000D8 ?ClearCurState@CPercentPrinterState@@QAEXXZ proc near
.text:000000D8
.text:000000D8 var_4           = dword ptr -4
.text:000000D8
.text:000000D8                 push    ebp
.text:000000D9                 mov     ebp, esp
.text:000000DB                 push    ecx
.text:000000DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000E3                 mov     [ebp+var_4], ecx
.text:000000E6                 mov     eax, [ebp+var_4]
.text:000000E9                 mov     dword ptr [eax], 0
.text:000000EF                 mov     dword ptr [eax+4], 0
.text:000000F6                 mov     ecx, [ebp+var_4]
.text:000000F9                 mov     dword ptr [ecx+8], 0FFFFFFFFh
.text:00000100                 mov     dword ptr [ecx+0Ch], 0FFFFFFFFh
.text:00000107                 mov     edx, [ebp+var_4]
.text:0000010A                 mov     dword ptr [edx+10h], 0
.text:00000111                 mov     dword ptr [edx+14h], 0
.text:00000118                 mov     ecx, [ebp+var_4]
.text:0000011B                 add     ecx, 18h        ; this
.text:0000011E                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00000123                 mov     ecx, [ebp+var_4]
.text:00000126                 add     ecx, 24h ; '$'  ; this
.text:00000129                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:0000012E                 add     esp, 4
.text:00000131                 cmp     ebp, esp
.text:00000133                 call    __RTC_CheckEsp
.text:00000138                 mov     esp, ebp
.text:0000013A                 pop     ebp
.text:0000013B                 retn
.text:0000013B ?ClearCurState@CPercentPrinterState@@QAEXXZ endp
.text:0000013B
.text:0000013B ; ---------------------------------------------------------------------------
.text:0000013C                 db 0Ch dup(0CCh)
.text:00000148
.text:00000148 ; =============== S U B R O U T I N E =======================================
.text:00000148
.text:00000148 ; Attributes: bp-based frame
.text:00000148
.text:00000148 ; void __thiscall CPercentPrinter::ClosePrint(CPercentPrinter *this, bool)
.text:00000148                 public ?ClosePrint@CPercentPrinter@@QAEX_N@Z
.text:00000148 ?ClosePrint@CPercentPrinter@@QAEX_N@Z proc near
.text:00000148                                         ; CODE XREF: CPercentPrinter::~CPercentPrinter(void)+39p
.text:00000148                                         ; CPercentPrinter::Print(void)+398p
.text:00000148
.text:00000148 var_14          = dword ptr -14h
.text:00000148 var_10          = dword ptr -10h
.text:00000148 var_C           = dword ptr -0Ch
.text:00000148 var_8           = dword ptr -8
.text:00000148 var_4           = dword ptr -4
.text:00000148 arg_0           = byte ptr  8
.text:00000148
.text:00000148                 push    ebp
.text:00000149                 mov     ebp, esp
.text:0000014B                 sub     esp, 14h
.text:0000014E                 mov     eax, 0CCCCCCCCh
.text:00000153                 mov     [ebp+var_14], eax
.text:00000156                 mov     [ebp+var_10], eax
.text:00000159                 mov     [ebp+var_C], eax
.text:0000015C                 mov     [ebp+var_8], eax
.text:0000015F                 mov     [ebp+var_4], eax
.text:00000162                 mov     [ebp+var_4], ecx
.text:00000165                 mov     ecx, [ebp+var_4]
.text:00000168                 add     ecx, 44h ; 'D'  ; this
.text:0000016B                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000170                 mov     [ebp+var_8], eax
.text:00000173                 cmp     [ebp+var_8], 0
.text:00000177                 jz      loc_213
.text:0000017D                 mov     eax, [ebp+var_8]
.text:00000180                 add     eax, 2
.text:00000183                 push    eax             ; unsigned int
.text:00000184                 mov     ecx, [ebp+var_4]
.text:00000187                 add     ecx, 50h ; 'P'  ; this
.text:0000018A                 call    ?GetBuf@AString@@QAEPADI@Z ; AString::GetBuf(uint)
.text:0000018F                 mov     [ebp+var_10], eax
.text:00000192                 mov     ecx, [ebp+var_10]
.text:00000195                 mov     [ebp+var_14], ecx
.text:00000198                 mov     edx, [ebp+var_14]
.text:0000019B                 mov     byte ptr [edx], 0Dh
.text:0000019E                 mov     eax, [ebp+var_14]
.text:000001A1                 add     eax, 1
.text:000001A4                 mov     [ebp+var_14], eax
.text:000001A7                 mov     [ebp+var_C], 0
.text:000001AE                 jmp     short loc_1B9
.text:000001B0 ; ---------------------------------------------------------------------------
.text:000001B0
.text:000001B0 loc_1B0:                                ; CODE XREF: CPercentPrinter::ClosePrint(bool)+88j
.text:000001B0                 mov     ecx, [ebp+var_C]
.text:000001B3                 add     ecx, 1
.text:000001B6                 mov     [ebp+var_C], ecx
.text:000001B9
.text:000001B9 loc_1B9:                                ; CODE XREF: CPercentPrinter::ClosePrint(bool)+66j
.text:000001B9                 mov     edx, [ebp+var_C]
.text:000001BC                 cmp     edx, [ebp+var_8]
.text:000001BF                 jnb     short loc_1D2
.text:000001C1                 mov     eax, [ebp+var_14]
.text:000001C4                 mov     byte ptr [eax], 20h ; ' '
.text:000001C7                 mov     ecx, [ebp+var_14]
.text:000001CA                 add     ecx, 1
.text:000001CD                 mov     [ebp+var_14], ecx
.text:000001D0                 jmp     short loc_1B0
.text:000001D2 ; ---------------------------------------------------------------------------
.text:000001D2
.text:000001D2 loc_1D2:                                ; CODE XREF: CPercentPrinter::ClosePrint(bool)+77j
.text:000001D2                 mov     edx, [ebp+var_14]
.text:000001D5                 mov     byte ptr [edx], 0Dh
.text:000001D8                 mov     eax, [ebp+var_14]
.text:000001DB                 add     eax, 1
.text:000001DE                 mov     [ebp+var_14], eax
.text:000001E1                 mov     ecx, [ebp+var_14]
.text:000001E4                 mov     byte ptr [ecx], 0
.text:000001E7                 mov     edx, [ebp+var_14]
.text:000001EA                 sub     edx, [ebp+var_10]
.text:000001ED                 push    edx             ; unsigned int
.text:000001EE                 mov     ecx, [ebp+var_4]
.text:000001F1                 add     ecx, 50h ; 'P'  ; this
.text:000001F4                 call    ?ReleaseBuf_SetLen@AString@@QAEXI@Z ; AString::ReleaseBuf_SetLen(uint)
.text:000001F9                 mov     ecx, [ebp+var_4]
.text:000001FC                 add     ecx, 50h ; 'P'
.text:000001FF                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000204                 push    eax             ; Str
.text:00000205                 mov     eax, [ebp+var_4]
.text:00000208                 mov     ecx, [eax+0A4h]
.text:0000020E                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000213
.text:00000213 loc_213:                                ; CODE XREF: CPercentPrinter::ClosePrint(bool)+2Fj
.text:00000213                 movzx   ecx, [ebp+arg_0]
.text:00000217                 test    ecx, ecx
.text:00000219                 jz      short loc_229
.text:0000021B                 mov     edx, [ebp+var_4]
.text:0000021E                 mov     ecx, [edx+0A4h] ; this
.text:00000224                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00000229
.text:00000229 loc_229:                                ; CODE XREF: CPercentPrinter::ClosePrint(bool)+D1j
.text:00000229                 mov     ecx, [ebp+var_4]
.text:0000022C                 add     ecx, 44h ; 'D'  ; this
.text:0000022F                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00000234                 add     esp, 14h
.text:00000237                 cmp     ebp, esp
.text:00000239                 call    __RTC_CheckEsp
.text:0000023E                 mov     esp, ebp
.text:00000240                 pop     ebp
.text:00000241                 retn    4
.text:00000241 ?ClosePrint@CPercentPrinter@@QAEX_N@Z endp
.text:00000241
.text:00000241 ; ---------------------------------------------------------------------------
.text:00000244                 align 8
.text:00000248
.text:00000248 ; =============== S U B R O U T I N E =======================================
.text:00000248
.text:00000248 ; Attributes: bp-based frame
.text:00000248
.text:00000248 ; void __thiscall CPercentPrinter::GetPercents(CPercentPrinter *__hidden this)
.text:00000248                 public ?GetPercents@CPercentPrinter@@AAEXXZ
.text:00000248 ?GetPercents@CPercentPrinter@@AAEXXZ proc near
.text:00000248                                         ; CODE XREF: CPercentPrinter::Print(void)+157p
.text:00000248
.text:00000248 var_48          = dword ptr -48h
.text:00000248 var_44          = dword ptr -44h
.text:00000248 var_40          = qword ptr -40h
.text:00000248 var_35          = byte ptr -35h
.text:00000248 var_34          = dword ptr -34h
.text:00000248 Str             = byte ptr -2Ch
.text:00000248 var_8           = dword ptr -8
.text:00000248 var_4           = dword ptr -4
.text:00000248
.text:00000248                 push    ebp
.text:00000249                 mov     ebp, esp
.text:0000024B                 sub     esp, 48h
.text:0000024E                 push    esi
.text:0000024F                 push    edi
.text:00000250                 push    ecx
.text:00000251                 lea     edi, [ebp+var_48]
.text:00000254                 mov     ecx, 12h
.text:00000259                 mov     eax, 0CCCCCCCCh
.text:0000025E                 rep stosd
.text:00000260                 pop     ecx
.text:00000261                 mov     eax, dword ptr ds:___security_cookie
.text:00000266                 xor     eax, ebp
.text:00000268                 mov     [ebp+var_4], eax
.text:0000026B                 mov     [ebp+var_8], ecx
.text:0000026E                 mov     [ebp+var_35], 25h ; '%'
.text:00000272                 mov     dword ptr [ebp+var_40], 0
.text:00000279                 mov     dword ptr [ebp+var_40+4], 0
.text:00000280                 mov     eax, [ebp+var_8]
.text:00000283                 mov     [ebp+var_44], eax
.text:00000286                 mov     ecx, [ebp+var_44]
.text:00000289                 mov     edx, [ebp+var_44]
.text:0000028C                 mov     eax, [ecx+8]
.text:0000028F                 and     eax, [edx+0Ch]
.text:00000292                 cmp     eax, 0FFFFFFFFh
.text:00000295                 jnz     short loc_2B2
.text:00000297                 mov     ecx, [ebp+var_8]
.text:0000029A                 mov     eax, [ecx]
.text:0000029C                 mov     edx, [ecx+4]
.text:0000029F                 mov     cl, 14h
.text:000002A1                 call    __aullshr
.text:000002A6                 mov     dword ptr [ebp+var_40], eax
.text:000002A9                 mov     dword ptr [ebp+var_40+4], edx
.text:000002AC                 mov     [ebp+var_35], 4Dh ; 'M'
.text:000002B0                 jmp     short loc_2F1
.text:000002B2 ; ---------------------------------------------------------------------------
.text:000002B2
.text:000002B2 loc_2B2:                                ; CODE XREF: CPercentPrinter::GetPercents(void)+4Dj
.text:000002B2                 mov     edx, [ebp+var_8]
.text:000002B5                 mov     [ebp+var_48], edx
.text:000002B8                 mov     eax, [ebp+var_48]
.text:000002BB                 mov     ecx, [ebp+var_48]
.text:000002BE                 mov     edx, [eax+8]
.text:000002C1                 or      edx, [ecx+0Ch]
.text:000002C4                 jz      short loc_2F1
.text:000002C6                 mov     eax, [ebp+var_8]
.text:000002C9                 push    0
.text:000002CB                 push    64h ; 'd'
.text:000002CD                 mov     ecx, [eax+4]
.text:000002D0                 push    ecx
.text:000002D1                 mov     edx, [eax]
.text:000002D3                 push    edx
.text:000002D4                 call    __allmul
.text:000002D9                 mov     ecx, [ebp+var_8]
.text:000002DC                 mov     esi, [ecx+0Ch]
.text:000002DF                 push    esi
.text:000002E0                 mov     ecx, [ecx+8]
.text:000002E3                 push    ecx
.text:000002E4                 push    edx
.text:000002E5                 push    eax
.text:000002E6                 call    __aulldiv
.text:000002EB                 mov     dword ptr [ebp+var_40], eax
.text:000002EE                 mov     dword ptr [ebp+var_40+4], edx
.text:000002F1
.text:000002F1 loc_2F1:                                ; CODE XREF: CPercentPrinter::GetPercents(void)+68j
.text:000002F1                                         ; CPercentPrinter::GetPercents(void)+7Cj
.text:000002F1                 lea     edx, [ebp+Str]
.text:000002F4                 push    edx             ; char *
.text:000002F5                 mov     eax, dword ptr [ebp+var_40+4]
.text:000002F8                 push    eax
.text:000002F9                 mov     ecx, dword ptr [ebp+var_40]
.text:000002FC                 push    ecx             ; unsigned __int64
.text:000002FD                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:00000302                 lea     edx, [ebp+Str]
.text:00000305                 push    edx             ; Str
.text:00000306                 call    _strlen
.text:0000030B                 add     esp, 4
.text:0000030E                 mov     [ebp+var_34], eax
.text:00000311                 mov     eax, [ebp+var_34]
.text:00000314                 mov     cl, [ebp+var_35]
.text:00000317                 mov     [ebp+eax+Str], cl
.text:0000031B                 mov     edx, [ebp+var_34]
.text:0000031E                 add     edx, 1
.text:00000321                 mov     [ebp+var_34], edx
.text:00000324                 mov     eax, [ebp+var_34]
.text:00000327                 mov     [ebp+eax+Str], 0
.text:0000032C
.text:0000032C loc_32C:                                ; CODE XREF: CPercentPrinter::GetPercents(void)+100j
.text:0000032C                 cmp     [ebp+var_34], 4
.text:00000330                 jnb     short loc_34A
.text:00000332                 push    20h ; ' '
.text:00000334                 mov     ecx, [ebp+var_8]
.text:00000337                 add     ecx, 38h ; '8'
.text:0000033A                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:0000033F                 mov     ecx, [ebp+var_34]
.text:00000342                 add     ecx, 1
.text:00000345                 mov     [ebp+var_34], ecx
.text:00000348                 jmp     short loc_32C
.text:0000034A ; ---------------------------------------------------------------------------
.text:0000034A
.text:0000034A loc_34A:                                ; CODE XREF: CPercentPrinter::GetPercents(void)+E8j
.text:0000034A                 lea     edx, [ebp+Str]
.text:0000034D                 push    edx
.text:0000034E                 mov     ecx, [ebp+var_8]
.text:00000351                 add     ecx, 38h ; '8'
.text:00000354                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000359                 push    edx
.text:0000035A                 mov     ecx, ebp
.text:0000035C                 push    eax
.text:0000035D                 lea     edx, $LN10
.text:00000363                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000368                 pop     eax
.text:00000369                 pop     edx
.text:0000036A                 pop     edi
.text:0000036B                 pop     esi
.text:0000036C                 mov     ecx, [ebp+var_4]
.text:0000036F                 xor     ecx, ebp
.text:00000371                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000376                 add     esp, 48h
.text:00000379                 cmp     ebp, esp
.text:0000037B                 call    __RTC_CheckEsp
.text:00000380                 mov     esp, ebp
.text:00000382                 pop     ebp
.text:00000383                 retn
.text:00000383 ?GetPercents@CPercentPrinter@@AAEXXZ endp
.text:00000383
.text:00000383 ; ---------------------------------------------------------------------------
.text:00000384 $LN10           dd 1                    ; DATA XREF: CPercentPrinter::GetPercents(void)+115o
.text:00000388                 dd offset $LN9
.text:0000038C $LN9            dd 0FFFFFFD4h, 20h      ; DATA XREF: .text:00000388o
.text:00000394                 dd offset $LN8
.text:00000398 $LN8            dd 0CCCC0073h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000394o
.text:000003A8
.text:000003A8 ; =============== S U B R O U T I N E =======================================
.text:000003A8
.text:000003A8 ; Attributes: bp-based frame
.text:000003A8
.text:000003A8 ; void __thiscall CPercentPrinter::Print(CPercentPrinter *__hidden this)
.text:000003A8                 public ?Print@CPercentPrinter@@QAEXXZ
.text:000003A8 ?Print@CPercentPrinter@@QAEXXZ proc near
.text:000003A8
.text:000003A8 var_60          = dword ptr -60h
.text:000003A8 var_5C          = dword ptr -5Ch
.text:000003A8 var_58          = dword ptr -58h
.text:000003A8 var_54          = dword ptr -54h
.text:000003A8 var_50          = dword ptr -50h
.text:000003A8 var_4C          = dword ptr -4Ch
.text:000003A8 var_48          = dword ptr -48h
.text:000003A8 var_44          = dword ptr -44h
.text:000003A8 var_40          = dword ptr -40h
.text:000003A8 var_38          = byte ptr -38h
.text:000003A8 var_14          = dword ptr -14h
.text:000003A8 var_D           = byte ptr -0Dh
.text:000003A8 var_C           = dword ptr -0Ch
.text:000003A8 var_8           = dword ptr -8
.text:000003A8 var_4           = dword ptr -4
.text:000003A8
.text:000003A8                 push    ebp
.text:000003A9                 mov     ebp, esp
.text:000003AB                 sub     esp, 60h
.text:000003AE                 push    esi
.text:000003AF                 push    edi
.text:000003B0                 push    ecx
.text:000003B1                 lea     edi, [ebp+var_60]
.text:000003B4                 mov     ecx, 18h
.text:000003B9                 mov     eax, 0CCCCCCCCh
.text:000003BE                 rep stosd
.text:000003C0                 pop     ecx
.text:000003C1                 mov     eax, dword ptr ds:___security_cookie
.text:000003C6                 xor     eax, ebp
.text:000003C8                 mov     [ebp+var_4], eax
.text:000003CB                 mov     [ebp+var_8], ecx
.text:000003CE                 mov     [ebp+var_C], 0
.text:000003D5                 mov     eax, [ebp+var_8]
.text:000003D8                 cmp     dword ptr [eax+30h], 0
.text:000003DC                 jz      short loc_3F0
.text:000003DE                 mov     esi, esp
.text:000003E0                 call    dword ptr ds:__imp__GetTickCount@0 ; GetTickCount()
.text:000003E6                 cmp     esi, esp
.text:000003E8                 call    __RTC_CheckEsp
.text:000003ED                 mov     [ebp+var_C], eax
.text:000003F0
.text:000003F0 loc_3F0:                                ; CODE XREF: CPercentPrinter::Print(void)+34j
.text:000003F0                 mov     [ebp+var_D], 0
.text:000003F4                 mov     ecx, [ebp+var_8]
.text:000003F7                 add     ecx, 44h ; 'D'  ; this
.text:000003FA                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:000003FF                 movzx   ecx, al
.text:00000402                 test    ecx, ecx
.text:00000404                 jnz     loc_4F1
.text:0000040A                 mov     edx, [ebp+var_8]
.text:0000040D                 cmp     dword ptr [edx+30h], 0
.text:00000411                 jz      short loc_429
.text:00000413                 mov     eax, [ebp+var_8]
.text:00000416                 mov     ecx, [ebp+var_C]
.text:00000419                 sub     ecx, [eax+34h]
.text:0000041C                 mov     edx, [ebp+var_8]
.text:0000041F                 cmp     ecx, [edx+30h]
.text:00000422                 jnb     short loc_429
.text:00000424                 jmp     loc_7AE
.text:00000429 ; ---------------------------------------------------------------------------
.text:00000429
.text:00000429 loc_429:                                ; CODE XREF: CPercentPrinter::Print(void)+69j
.text:00000429                                         ; CPercentPrinter::Print(void)+7Aj
.text:00000429                 mov     eax, [ebp+var_8]
.text:0000042C                 mov     [ebp+var_14], eax
.text:0000042F                 mov     ecx, [ebp+var_14]
.text:00000432                 add     ecx, 18h
.text:00000435                 push    ecx             ; AString *
.text:00000436                 mov     edx, [ebp+var_8]
.text:00000439                 add     edx, 80h ; 'Ã'
.text:0000043F                 push    edx             ; AString *
.text:00000440                 call    ??8@YG_NABVAString@@0@Z ; operator==(AString const &,AString const &)
.text:00000445                 movzx   eax, al
.text:00000448                 test    eax, eax
.text:0000044A                 jz      loc_4F1
.text:00000450                 mov     ecx, [ebp+var_14]
.text:00000453                 add     ecx, 24h ; '$'
.text:00000456                 push    ecx             ; UString *
.text:00000457                 mov     edx, [ebp+var_8]
.text:0000045A                 add     edx, 8Ch ; 'Ã®'
.text:00000460                 push    edx             ; UString *
.text:00000461                 call    ??8@YG_NABVUString@@0@Z ; operator==(UString const &,UString const &)
.text:00000466                 movzx   eax, al
.text:00000469                 test    eax, eax
.text:0000046B                 jz      loc_4F1
.text:00000471                 mov     ecx, [ebp+var_8]
.text:00000474                 mov     edx, [ebp+var_14]
.text:00000477                 mov     [ebp+var_48], ecx
.text:0000047A                 mov     [ebp+var_4C], edx
.text:0000047D                 mov     eax, [ebp+var_48]
.text:00000480                 mov     ecx, [ebp+var_4C]
.text:00000483                 mov     edx, [eax+78h]
.text:00000486                 cmp     edx, [ecx+10h]
.text:00000489                 jnz     short loc_4F1
.text:0000048B                 mov     eax, [ebp+var_48]
.text:0000048E                 mov     ecx, [ebp+var_4C]
.text:00000491                 mov     edx, [eax+7Ch]
.text:00000494                 cmp     edx, [ecx+14h]
.text:00000497                 jnz     short loc_4F1
.text:00000499                 mov     eax, [ebp+var_8]
.text:0000049C                 mov     ecx, [ebp+var_14]
.text:0000049F                 mov     [ebp+var_50], eax
.text:000004A2                 mov     [ebp+var_54], ecx
.text:000004A5                 mov     edx, [ebp+var_50]
.text:000004A8                 mov     eax, [ebp+var_54]
.text:000004AB                 mov     ecx, [edx+70h]
.text:000004AE                 cmp     ecx, [eax+8]
.text:000004B1                 jnz     short loc_4ED
.text:000004B3                 mov     edx, [ebp+var_50]
.text:000004B6                 mov     eax, [ebp+var_54]
.text:000004B9                 mov     ecx, [edx+74h]
.text:000004BC                 cmp     ecx, [eax+0Ch]
.text:000004BF                 jnz     short loc_4ED
.text:000004C1                 mov     edx, [ebp+var_8]
.text:000004C4                 mov     eax, [ebp+var_14]
.text:000004C7                 mov     [ebp+var_58], edx
.text:000004CA                 mov     [ebp+var_5C], eax
.text:000004CD                 mov     ecx, [ebp+var_58]
.text:000004D0                 mov     edx, [ebp+var_5C]
.text:000004D3                 mov     eax, [ecx+68h]
.text:000004D6                 cmp     eax, [edx]
.text:000004D8                 jnz     short loc_4ED
.text:000004DA                 mov     ecx, [ebp+var_58]
.text:000004DD                 mov     edx, [ebp+var_5C]
.text:000004E0                 mov     eax, [ecx+6Ch]
.text:000004E3                 cmp     eax, [edx+4]
.text:000004E6                 jnz     short loc_4ED
.text:000004E8                 jmp     loc_7AE
.text:000004ED ; ---------------------------------------------------------------------------
.text:000004ED
.text:000004ED loc_4ED:                                ; CODE XREF: CPercentPrinter::Print(void)+109j
.text:000004ED                                         ; CPercentPrinter::Print(void)+117j ...
.text:000004ED                 mov     [ebp+var_D], 1
.text:000004F1
.text:000004F1 loc_4F1:                                ; CODE XREF: CPercentPrinter::Print(void)+5Cj
.text:000004F1                                         ; CPercentPrinter::Print(void)+A2j ...
.text:000004F1                 mov     ecx, [ebp+var_8]
.text:000004F4                 add     ecx, 38h ; '8'  ; this
.text:000004F7                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:000004FC                 mov     ecx, [ebp+var_8] ; this
.text:000004FF                 call    ?GetPercents@CPercentPrinter@@AAEXXZ ; CPercentPrinter::GetPercents(void)
.text:00000504                 movzx   ecx, [ebp+var_D]
.text:00000508                 test    ecx, ecx
.text:0000050A                 jz      short loc_52E
.text:0000050C                 mov     edx, [ebp+var_8]
.text:0000050F                 add     edx, 98h ; 'Ã¿'
.text:00000515                 push    edx             ; AString *
.text:00000516                 mov     eax, [ebp+var_8]
.text:00000519                 add     eax, 38h ; '8'
.text:0000051C                 push    eax             ; AString *
.text:0000051D                 call    ??8@YG_NABVAString@@0@Z ; operator==(AString const &,AString const &)
.text:00000522                 movzx   ecx, al
.text:00000525                 test    ecx, ecx
.text:00000527                 jz      short loc_52E
.text:00000529                 jmp     loc_7AE
.text:0000052E ; ---------------------------------------------------------------------------
.text:0000052E
.text:0000052E loc_52E:                                ; CODE XREF: CPercentPrinter::Print(void)+162j
.text:0000052E                                         ; CPercentPrinter::Print(void)+17Fj
.text:0000052E                 mov     edx, [ebp+var_8]
.text:00000531                 add     edx, 38h ; '8'
.text:00000534                 push    edx
.text:00000535                 mov     ecx, [ebp+var_8]
.text:00000538                 add     ecx, 98h ; 'Ã¿'
.text:0000053E                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00000543                 mov     eax, [ebp+var_8]
.text:00000546                 mov     [ebp+var_60], eax
.text:00000549                 mov     ecx, [ebp+var_60]
.text:0000054C                 mov     edx, [ebp+var_60]
.text:0000054F                 mov     eax, [ecx+10h]
.text:00000552                 or      eax, [edx+14h]
.text:00000555                 jz      short loc_587
.text:00000557                 lea     ecx, [ebp+var_38]
.text:0000055A                 push    ecx             ; char *
.text:0000055B                 mov     edx, [ebp+var_8]
.text:0000055E                 mov     eax, [edx+14h]
.text:00000561                 push    eax
.text:00000562                 mov     ecx, [edx+10h]
.text:00000565                 push    ecx             ; unsigned __int64
.text:00000566                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:0000056B                 push    20h ; ' '
.text:0000056D                 mov     ecx, [ebp+var_8]
.text:00000570                 add     ecx, 38h ; '8'
.text:00000573                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00000578                 lea     edx, [ebp+var_38]
.text:0000057B                 push    edx
.text:0000057C                 mov     ecx, [ebp+var_8]
.text:0000057F                 add     ecx, 38h ; '8'
.text:00000582                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000587
.text:00000587 loc_587:                                ; CODE XREF: CPercentPrinter::Print(void)+1ADj
.text:00000587                 mov     ecx, [ebp+var_8]
.text:0000058A                 add     ecx, 18h        ; this
.text:0000058D                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00000592                 movzx   eax, al
.text:00000595                 test    eax, eax
.text:00000597                 jnz     short loc_5B8
.text:00000599                 push    20h ; ' '
.text:0000059B                 mov     ecx, [ebp+var_8]
.text:0000059E                 add     ecx, 38h ; '8'
.text:000005A1                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:000005A6                 mov     ecx, [ebp+var_8]
.text:000005A9                 add     ecx, 18h
.text:000005AC                 push    ecx
.text:000005AD                 mov     ecx, [ebp+var_8]
.text:000005B0                 add     ecx, 38h ; '8'
.text:000005B3                 call    ??YAString@@QAEAAV0@ABV0@@Z ; AString::operator+=(AString const &)
.text:000005B8
.text:000005B8 loc_5B8:                                ; CODE XREF: CPercentPrinter::Print(void)+1EFj
.text:000005B8                 mov     ecx, [ebp+var_8]
.text:000005BB                 add     ecx, 24h ; '$'  ; this
.text:000005BE                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000005C3                 movzx   edx, al
.text:000005C6                 test    edx, edx
.text:000005C8                 jnz     loc_721
.text:000005CE                 mov     ecx, [ebp+var_8]
.text:000005D1                 add     ecx, 38h ; '8'  ; this
.text:000005D4                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000005D9                 mov     ecx, [ebp+var_8]
.text:000005DC                 cmp     eax, [ecx+0ACh]
.text:000005E2                 jnb     loc_721
.text:000005E8                 push    20h ; ' '
.text:000005EA                 mov     ecx, [ebp+var_8]
.text:000005ED                 add     ecx, 38h ; '8'
.text:000005F0                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:000005F5                 mov     edx, [ebp+var_8]
.text:000005F8                 add     edx, 50h ; 'P'
.text:000005FB                 push    edx             ; struct AString *
.text:000005FC                 mov     eax, [ebp+var_8]
.text:000005FF                 add     eax, 24h ; '$'
.text:00000602                 push    eax             ; struct UString *
.text:00000603                 call    ?StdOut_Convert_UString_to_AString@@YGXABVUString@@AAVAString@@@Z ; StdOut_Convert_UString_to_AString(UString const &,AString &)
.text:00000608                 push    20h ; ' '       ; char
.text:0000060A                 push    0Ah             ; char
.text:0000060C                 mov     ecx, [ebp+var_8]
.text:0000060F                 add     ecx, 50h ; 'P'  ; this
.text:00000612                 call    ?Replace@AString@@QAEXDD@Z ; AString::Replace(char,char)
.text:00000617                 mov     ecx, [ebp+var_8]
.text:0000061A                 add     ecx, 38h ; '8'  ; this
.text:0000061D                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000622                 mov     esi, eax
.text:00000624                 mov     ecx, [ebp+var_8]
.text:00000627                 add     ecx, 50h ; 'P'  ; this
.text:0000062A                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:0000062F                 add     esi, eax
.text:00000631                 mov     ecx, [ebp+var_8]
.text:00000634                 cmp     esi, [ecx+0ACh]
.text:0000063A                 jbe     loc_70F
.text:00000640                 mov     ecx, [ebp+var_8]
.text:00000643                 add     ecx, 24h ; '$'  ; this
.text:00000646                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000064B                 mov     [ebp+var_40], eax
.text:0000064E
.text:0000064E loc_64E:                                ; CODE XREF: CPercentPrinter::Print(void):loc_6F9j
.text:0000064E                 cmp     [ebp+var_40], 0
.text:00000652                 jz      loc_6FE
.text:00000658                 mov     edx, [ebp+var_40]
.text:0000065B                 shr     edx, 3
.text:0000065E                 mov     [ebp+var_44], edx
.text:00000661                 cmp     [ebp+var_44], 0
.text:00000665                 jnz     short loc_66E
.text:00000667                 mov     [ebp+var_44], 1
.text:0000066E
.text:0000066E loc_66E:                                ; CODE XREF: CPercentPrinter::Print(void)+2BDj
.text:0000066E                 mov     eax, [ebp+var_40]
.text:00000671                 sub     eax, [ebp+var_44]
.text:00000674                 mov     [ebp+var_40], eax
.text:00000677                 mov     ecx, [ebp+var_8]
.text:0000067A                 add     ecx, 24h ; '$'
.text:0000067D                 push    ecx
.text:0000067E                 mov     ecx, [ebp+var_8]
.text:00000681                 add     ecx, 5Ch ; '\'
.text:00000684                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000689                 mov     ecx, [ebp+var_8]
.text:0000068C                 add     ecx, 24h ; '$'  ; this
.text:0000068F                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000694                 sub     eax, [ebp+var_40]
.text:00000697                 push    eax             ; unsigned int
.text:00000698                 mov     edx, [ebp+var_40]
.text:0000069B                 shr     edx, 1
.text:0000069D                 push    edx             ; unsigned int
.text:0000069E                 mov     ecx, [ebp+var_8]
.text:000006A1                 add     ecx, 5Ch ; '\'  ; this
.text:000006A4                 call    ?Delete@UString@@QAEXII@Z ; UString::Delete(uint,uint)
.text:000006A9                 push    offset $SG68331 ; " . "
.text:000006AE                 mov     eax, [ebp+var_40]
.text:000006B1                 shr     eax, 1
.text:000006B3                 push    eax             ; unsigned int
.text:000006B4                 mov     ecx, [ebp+var_8]
.text:000006B7                 add     ecx, 5Ch ; '\'  ; this
.text:000006BA                 call    ?Insert@UString@@QAEXIPB_W@Z ; UString::Insert(uint,wchar_t const *)
.text:000006BF                 mov     ecx, [ebp+var_8]
.text:000006C2                 add     ecx, 50h ; 'P'
.text:000006C5                 push    ecx             ; struct AString *
.text:000006C6                 mov     edx, [ebp+var_8]
.text:000006C9                 add     edx, 5Ch ; '\'
.text:000006CC                 push    edx             ; struct UString *
.text:000006CD                 call    ?StdOut_Convert_UString_to_AString@@YGXABVUString@@AAVAString@@@Z ; StdOut_Convert_UString_to_AString(UString const &,AString &)
.text:000006D2                 mov     ecx, [ebp+var_8]
.text:000006D5                 add     ecx, 38h ; '8'  ; this
.text:000006D8                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000006DD                 mov     esi, eax
.text:000006DF                 mov     ecx, [ebp+var_8]
.text:000006E2                 add     ecx, 50h ; 'P'  ; this
.text:000006E5                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000006EA                 add     esi, eax
.text:000006EC                 mov     eax, [ebp+var_8]
.text:000006EF                 cmp     esi, [eax+0ACh]
.text:000006F5                 ja      short loc_6F9
.text:000006F7                 jmp     short loc_6FE
.text:000006F9 ; ---------------------------------------------------------------------------
.text:000006F9
.text:000006F9 loc_6F9:                                ; CODE XREF: CPercentPrinter::Print(void)+34Dj
.text:000006F9                 jmp     loc_64E
.text:000006FE ; ---------------------------------------------------------------------------
.text:000006FE
.text:000006FE loc_6FE:                                ; CODE XREF: CPercentPrinter::Print(void)+2AAj
.text:000006FE                                         ; CPercentPrinter::Print(void)+34Fj
.text:000006FE                 cmp     [ebp+var_40], 0
.text:00000702                 jnz     short loc_70F
.text:00000704                 mov     ecx, [ebp+var_8]
.text:00000707                 add     ecx, 50h ; 'P'  ; this
.text:0000070A                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:0000070F
.text:0000070F loc_70F:                                ; CODE XREF: CPercentPrinter::Print(void)+292j
.text:0000070F                                         ; CPercentPrinter::Print(void)+35Aj
.text:0000070F                 mov     ecx, [ebp+var_8]
.text:00000712                 add     ecx, 50h ; 'P'
.text:00000715                 push    ecx
.text:00000716                 mov     ecx, [ebp+var_8]
.text:00000719                 add     ecx, 38h ; '8'
.text:0000071C                 call    ??YAString@@QAEAAV0@ABV0@@Z ; AString::operator+=(AString const &)
.text:00000721
.text:00000721 loc_721:                                ; CODE XREF: CPercentPrinter::Print(void)+220j
.text:00000721                                         ; CPercentPrinter::Print(void)+23Aj
.text:00000721                 mov     edx, [ebp+var_8]
.text:00000724                 add     edx, 38h ; '8'
.text:00000727                 push    edx             ; AString *
.text:00000728                 mov     eax, [ebp+var_8]
.text:0000072B                 add     eax, 44h ; 'D'
.text:0000072E                 push    eax             ; AString *
.text:0000072F                 call    ??9@YG_NABVAString@@0@Z ; operator!=(AString const &,AString const &)
.text:00000734                 movzx   ecx, al
.text:00000737                 test    ecx, ecx
.text:00000739                 jz      short loc_78D
.text:0000073B                 push    0               ; bool
.text:0000073D                 mov     ecx, [ebp+var_8] ; this
.text:00000740                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:00000745                 mov     ecx, [ebp+var_8]
.text:00000748                 add     ecx, 38h ; '8'
.text:0000074B                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000750                 push    eax             ; Str
.text:00000751                 mov     edx, [ebp+var_8]
.text:00000754                 mov     ecx, [edx+0A4h]
.text:0000075A                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000075F                 mov     eax, [ebp+var_8]
.text:00000762                 movzx   ecx, byte ptr [eax+0A8h]
.text:00000769                 test    ecx, ecx
.text:0000076B                 jz      short loc_77B
.text:0000076D                 mov     edx, [ebp+var_8]
.text:00000770                 mov     ecx, [edx+0A4h] ; this
.text:00000776                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:0000077B
.text:0000077B loc_77B:                                ; CODE XREF: CPercentPrinter::Print(void)+3C3j
.text:0000077B                 mov     eax, [ebp+var_8]
.text:0000077E                 add     eax, 38h ; '8'
.text:00000781                 push    eax
.text:00000782                 mov     ecx, [ebp+var_8]
.text:00000785                 add     ecx, 44h ; 'D'
.text:00000788                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:0000078D
.text:0000078D loc_78D:                                ; CODE XREF: CPercentPrinter::Print(void)+391j
.text:0000078D                 mov     ecx, [ebp+var_8]
.text:00000790                 push    ecx
.text:00000791                 mov     ecx, [ebp+var_8]
.text:00000794                 add     ecx, 68h ; 'h'
.text:00000797                 call    ??4CPercentPrinterState@@QAEAAU0@ABU0@@Z ; CPercentPrinterState::operator=(CPercentPrinterState const &)
.text:0000079C                 mov     edx, [ebp+var_8]
.text:0000079F                 cmp     dword ptr [edx+30h], 0
.text:000007A3                 jz      short loc_7AE
.text:000007A5                 mov     eax, [ebp+var_8]
.text:000007A8                 mov     ecx, [ebp+var_C]
.text:000007AB                 mov     [eax+34h], ecx
.text:000007AE
.text:000007AE loc_7AE:                                ; CODE XREF: CPercentPrinter::Print(void)+7Cj
.text:000007AE                                         ; CPercentPrinter::Print(void)+140j ...
.text:000007AE                 push    edx
.text:000007AF                 mov     ecx, ebp
.text:000007B1                 push    eax
.text:000007B2                 lea     edx, $LN23
.text:000007B8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000007BD                 pop     eax
.text:000007BE                 pop     edx
.text:000007BF                 pop     edi
.text:000007C0                 pop     esi
.text:000007C1                 mov     ecx, [ebp+var_4]
.text:000007C4                 xor     ecx, ebp
.text:000007C6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000007CB                 add     esp, 60h
.text:000007CE                 cmp     ebp, esp
.text:000007D0                 call    __RTC_CheckEsp
.text:000007D5                 mov     esp, ebp
.text:000007D7                 pop     ebp
.text:000007D8                 retn
.text:000007D8 ?Print@CPercentPrinter@@QAEXXZ endp
.text:000007D8
.text:000007D8 ; ---------------------------------------------------------------------------
.text:000007D9                 align 4
.text:000007DC $LN23           dd 1                    ; DATA XREF: CPercentPrinter::Print(void)+40Ao
.text:000007E0                 dd offset $LN22
.text:000007E4 $LN22           dd 0FFFFFFC8h, 20h      ; DATA XREF: .text:000007E0o
.text:000007EC                 dd offset $LN21
.text:000007F0 $LN21           db 73h, 0               ; DATA XREF: .text:000007ECo
.text:000007F2                 align 4
.text:000007F2 _text           ends
.text:000007F2
.text$x:000007F4 ; ===========================================================================
.text$x:000007F4
.text$x:000007F4 ; Segment type: Pure code
.text$x:000007F4 ; Segment permissions: Read/Execute
.text$x:000007F4 _text$x         segment para public 'CODE' use32
.text$x:000007F4                 assume cs:_text$x
.text$x:000007F4                 ;org 7F4h
.text$x:000007F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000007F4
.text$x:000007F4 ; =============== S U B R O U T I N E =======================================
.text$x:000007F4
.text$x:000007F4
.text$x:000007F4 __unwindfunclet$??1CPercentPrinter@@QAE@XZ$0 proc near
.text$x:000007F4                                         ; DATA XREF: .xdata$x:00000884o
.text$x:000007F4                 mov     ecx, [ebp-10h]  ; this
.text$x:000007F7                 jmp     ??1CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::~CPercentPrinterState(void)
.text$x:000007F7 __unwindfunclet$??1CPercentPrinter@@QAE@XZ$0 endp
.text$x:000007F7
.text$x:000007FC
.text$x:000007FC ; =============== S U B R O U T I N E =======================================
.text$x:000007FC
.text$x:000007FC
.text$x:000007FC __unwindfunclet$??1CPercentPrinter@@QAE@XZ$1 proc near
.text$x:000007FC                                         ; DATA XREF: .xdata$x:0000088Co
.text$x:000007FC                 mov     ecx, [ebp-10h]
.text$x:000007FF                 add     ecx, 38h ; '8'  ; this
.text$x:00000802                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00000802 __unwindfunclet$??1CPercentPrinter@@QAE@XZ$1 endp
.text$x:00000802
.text$x:00000807
.text$x:00000807 ; =============== S U B R O U T I N E =======================================
.text$x:00000807
.text$x:00000807
.text$x:00000807 __unwindfunclet$??1CPercentPrinter@@QAE@XZ$2 proc near
.text$x:00000807                                         ; DATA XREF: .xdata$x:00000894o
.text$x:00000807                 mov     ecx, [ebp-10h]
.text$x:0000080A                 add     ecx, 44h ; 'D'  ; this
.text$x:0000080D                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000080D __unwindfunclet$??1CPercentPrinter@@QAE@XZ$2 endp
.text$x:0000080D
.text$x:00000812
.text$x:00000812 ; =============== S U B R O U T I N E =======================================
.text$x:00000812
.text$x:00000812
.text$x:00000812 __unwindfunclet$??1CPercentPrinter@@QAE@XZ$3 proc near
.text$x:00000812                                         ; DATA XREF: .xdata$x:0000089Co
.text$x:00000812                 mov     ecx, [ebp-10h]
.text$x:00000815                 add     ecx, 50h ; 'P'  ; this
.text$x:00000818                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00000818 __unwindfunclet$??1CPercentPrinter@@QAE@XZ$3 endp
.text$x:00000818
.text$x:0000081D
.text$x:0000081D ; =============== S U B R O U T I N E =======================================
.text$x:0000081D
.text$x:0000081D
.text$x:0000081D __unwindfunclet$??1CPercentPrinter@@QAE@XZ$4 proc near
.text$x:0000081D                                         ; DATA XREF: .xdata$x:000008A4o
.text$x:0000081D                 mov     ecx, [ebp-10h]
.text$x:00000820                 add     ecx, 5Ch ; '\'  ; this
.text$x:00000823                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000823 __unwindfunclet$??1CPercentPrinter@@QAE@XZ$4 endp
.text$x:00000823
.text$x:00000828
.text$x:00000828 ; =============== S U B R O U T I N E =======================================
.text$x:00000828
.text$x:00000828
.text$x:00000828 __unwindfunclet$??1CPercentPrinter@@QAE@XZ$5 proc near
.text$x:00000828                                         ; DATA XREF: .xdata$x:000008ACo
.text$x:00000828                 mov     ecx, [ebp-10h]
.text$x:0000082B                 add     ecx, 68h ; 'h'  ; this
.text$x:0000082E                 jmp     ??1CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::~CPercentPrinterState(void)
.text$x:0000082E __unwindfunclet$??1CPercentPrinter@@QAE@XZ$5 endp
.text$x:0000082E
.text$x:00000833
.text$x:00000833 ; =============== S U B R O U T I N E =======================================
.text$x:00000833
.text$x:00000833
.text$x:00000833 __unwindfunclet$??1CPercentPrinter@@QAE@XZ$6 proc near
.text$x:00000833                                         ; DATA XREF: .xdata$x:000008B4o
.text$x:00000833                 mov     ecx, [ebp-10h]
.text$x:00000836                 add     ecx, 98h ; 'Ã¿'  ; this
.text$x:0000083C                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000083C __unwindfunclet$??1CPercentPrinter@@QAE@XZ$6 endp
.text$x:0000083C
.text$x:00000841
.text$x:00000841 ; =============== S U B R O U T I N E =======================================
.text$x:00000841
.text$x:00000841
.text$x:00000841 __ehhandler$??1CPercentPrinter@@QAE@XZ proc near
.text$x:00000841                                         ; DATA XREF: CPercentPrinter::~CPercentPrinter(void)+5o
.text$x:00000841
.text$x:00000841 arg_4           = dword ptr  8
.text$x:00000841
.text$x:00000841                 mov     edx, [esp+arg_4]
.text$x:00000845                 lea     eax, [edx+0Ch]
.text$x:00000848                 mov     ecx, [edx-8]
.text$x:0000084B                 xor     ecx, eax
.text$x:0000084D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000852                 mov     eax, offset __ehfuncinfo$??1CPercentPrinter@@QAE@XZ
.text$x:00000857                 jmp     ___CxxFrameHandler3
.text$x:00000857 __ehhandler$??1CPercentPrinter@@QAE@XZ endp
.text$x:00000857
.text$x:00000857 _text$x         ends
.text$x:00000857
.xdata$x:0000085C ; ===========================================================================
.xdata$x:0000085C
.xdata$x:0000085C ; Segment type: Pure data
.xdata$x:0000085C ; Segment permissions: Read
.xdata$x:0000085C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000085C                 assume cs:_xdata$x
.xdata$x:0000085C                 ;org 85Ch
.xdata$x:0000085C __ehfuncinfo$??1CPercentPrinter@@QAE@XZ db  22h ; "
.xdata$x:0000085C                                         ; DATA XREF: __ehhandler$??1CPercentPrinter@@QAE@XZ+11o
.xdata$x:0000085D                 db    5
.xdata$x:0000085E                 db  93h ; Ã´
.xdata$x:0000085F                 db  19h
.xdata$x:00000860                 db    7
.xdata$x:00000861                 db    0
.xdata$x:00000862                 db    0
.xdata$x:00000863                 db    0
.xdata$x:00000864                 dd offset __unwindtable$??1CPercentPrinter@@QAE@XZ
.xdata$x:00000868                 db    0
.xdata$x:00000869                 db    0
.xdata$x:0000086A                 db    0
.xdata$x:0000086B                 db    0
.xdata$x:0000086C                 db    0
.xdata$x:0000086D                 db    0
.xdata$x:0000086E                 db    0
.xdata$x:0000086F                 db    0
.xdata$x:00000870                 db    0
.xdata$x:00000871                 db    0
.xdata$x:00000872                 db    0
.xdata$x:00000873                 db    0
.xdata$x:00000874                 db    0
.xdata$x:00000875                 db    0
.xdata$x:00000876                 db    0
.xdata$x:00000877                 db    0
.xdata$x:00000878                 db    0
.xdata$x:00000879                 db    0
.xdata$x:0000087A                 db    0
.xdata$x:0000087B                 db    0
.xdata$x:0000087C                 db    1
.xdata$x:0000087D                 db    0
.xdata$x:0000087E                 db    0
.xdata$x:0000087F                 db    0
.xdata$x:00000880 __unwindtable$??1CPercentPrinter@@QAE@XZ db 0FFh
.xdata$x:00000880                                         ; DATA XREF: .xdata$x:00000864o
.xdata$x:00000881                 db 0FFh
.xdata$x:00000882                 db 0FFh
.xdata$x:00000883                 db 0FFh
.xdata$x:00000884                 dd offset __unwindfunclet$??1CPercentPrinter@@QAE@XZ$0
.xdata$x:00000888                 db    0
.xdata$x:00000889                 db    0
.xdata$x:0000088A                 db    0
.xdata$x:0000088B                 db    0
.xdata$x:0000088C                 dd offset __unwindfunclet$??1CPercentPrinter@@QAE@XZ$1
.xdata$x:00000890                 db    1
.xdata$x:00000891                 db    0
.xdata$x:00000892                 db    0
.xdata$x:00000893                 db    0
.xdata$x:00000894                 dd offset __unwindfunclet$??1CPercentPrinter@@QAE@XZ$2
.xdata$x:00000898                 db    2
.xdata$x:00000899                 db    0
.xdata$x:0000089A                 db    0
.xdata$x:0000089B                 db    0
.xdata$x:0000089C                 dd offset __unwindfunclet$??1CPercentPrinter@@QAE@XZ$3
.xdata$x:000008A0                 db    3
.xdata$x:000008A1                 db    0
.xdata$x:000008A2                 db    0
.xdata$x:000008A3                 db    0
.xdata$x:000008A4                 dd offset __unwindfunclet$??1CPercentPrinter@@QAE@XZ$4
.xdata$x:000008A8                 db    4
.xdata$x:000008A9                 db    0
.xdata$x:000008AA                 db    0
.xdata$x:000008AB                 db    0
.xdata$x:000008AC                 dd offset __unwindfunclet$??1CPercentPrinter@@QAE@XZ$5
.xdata$x:000008B0                 db    5
.xdata$x:000008B1                 db    0
.xdata$x:000008B2                 db    0
.xdata$x:000008B3                 db    0
.xdata$x:000008B4                 dd offset __unwindfunclet$??1CPercentPrinter@@QAE@XZ$6
.xdata$x:000008B4 _xdata$x        ends
.xdata$x:000008B4
.rtc$TMZ:000008B8 ; ===========================================================================
.rtc$TMZ:000008B8
.rtc$TMZ:000008B8 ; Segment type: Pure data
.rtc$TMZ:000008B8 ; Segment permissions: Read
.rtc$TMZ:000008B8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000008B8                 assume cs:_rtc$TMZ
.rtc$TMZ:000008B8                 ;org 8B8h
.rtc$TMZ:000008B8 ; COMDAT (pick any)
.rtc$TMZ:000008B8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000008B8 _rtc$TMZ        ends
.rtc$TMZ:000008B8
.rtc$IMZ:000008BC ; ===========================================================================
.rtc$IMZ:000008BC
.rtc$IMZ:000008BC ; Segment type: Pure data
.rtc$IMZ:000008BC ; Segment permissions: Read
.rtc$IMZ:000008BC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000008BC                 assume cs:_rtc$IMZ
.rtc$IMZ:000008BC                 ;org 8BCh
.rtc$IMZ:000008BC ; COMDAT (pick any)
.rtc$IMZ:000008BC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000008BC _rtc$IMZ        ends
.rtc$IMZ:000008BC
.text:000008C0 ; ===========================================================================
.text:000008C0
.text:000008C0 ; Segment type: Pure code
.text:000008C0 ; Segment permissions: Read/Execute
.text:000008C0 _text           segment para public 'CODE' use32
.text:000008C0                 assume cs:_text
.text:000008C0                 ;org 8C0h
.text:000008C0 ; COMDAT (pick any)
.text:000008C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008C0
.text:000008C0 ; =============== S U B R O U T I N E =======================================
.text:000008C0
.text:000008C0 ; Attributes: bp-based frame
.text:000008C0
.text:000008C0 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:000008C0                 public ??1AString@@QAE@XZ
.text:000008C0 ??1AString@@QAE@XZ proc near            ; CODE XREF: CPercentPrinter::~CPercentPrinter(void)+4Bp
.text:000008C0                                         ; CPercentPrinter::~CPercentPrinter(void)+78p ...
.text:000008C0
.text:000008C0 var_8           = dword ptr -8
.text:000008C0 var_4           = dword ptr -4
.text:000008C0
.text:000008C0                 push    ebp
.text:000008C1                 mov     ebp, esp
.text:000008C3                 sub     esp, 8
.text:000008C6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000008CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008D4                 mov     [ebp+var_4], ecx
.text:000008D7                 mov     eax, [ebp+var_4]
.text:000008DA                 mov     ecx, [eax]
.text:000008DC                 mov     [ebp+var_8], ecx
.text:000008DF                 mov     edx, [ebp+var_8]
.text:000008E2                 push    edx             ; void *
.text:000008E3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000008E8                 add     esp, 4
.text:000008EB                 add     esp, 8
.text:000008EE                 cmp     ebp, esp
.text:000008F0                 call    __RTC_CheckEsp
.text:000008F5                 mov     esp, ebp
.text:000008F7                 pop     ebp
.text:000008F8                 retn
.text:000008F8 ??1AString@@QAE@XZ endp
.text:000008F8
.text:000008F8 ; ---------------------------------------------------------------------------
.text:000008F9                 align 4
.text:000008F9 _text           ends
.text:000008F9
.text:000008FC ; ===========================================================================
.text:000008FC
.text:000008FC ; Segment type: Pure code
.text:000008FC ; Segment permissions: Read/Execute
.text:000008FC _text           segment para public 'CODE' use32
.text:000008FC                 assume cs:_text
.text:000008FC                 ;org 8FCh
.text:000008FC ; COMDAT (pick any)
.text:000008FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008FC
.text:000008FC ; =============== S U B R O U T I N E =======================================
.text:000008FC
.text:000008FC ; Attributes: bp-based frame
.text:000008FC
.text:000008FC ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:000008FC                 public ??1UString@@QAE@XZ
.text:000008FC ??1UString@@QAE@XZ proc near            ; CODE XREF: CPercentPrinter::~CPercentPrinter(void)+69p
.text:000008FC                                         ; __unwindfunclet$??1CPercentPrinter@@QAE@XZ$4+6j ...
.text:000008FC
.text:000008FC var_8           = dword ptr -8
.text:000008FC var_4           = dword ptr -4
.text:000008FC
.text:000008FC                 push    ebp
.text:000008FD                 mov     ebp, esp
.text:000008FF                 sub     esp, 8
.text:00000902                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000909                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000910                 mov     [ebp+var_4], ecx
.text:00000913                 mov     eax, [ebp+var_4]
.text:00000916                 mov     ecx, [eax]
.text:00000918                 mov     [ebp+var_8], ecx
.text:0000091B                 mov     edx, [ebp+var_8]
.text:0000091E                 push    edx             ; void *
.text:0000091F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000924                 add     esp, 4
.text:00000927                 add     esp, 8
.text:0000092A                 cmp     ebp, esp
.text:0000092C                 call    __RTC_CheckEsp
.text:00000931                 mov     esp, ebp
.text:00000933                 pop     ebp
.text:00000934                 retn
.text:00000934 ??1UString@@QAE@XZ endp
.text:00000934
.text:00000934 ; ---------------------------------------------------------------------------
.text:00000935                 align 4
.text:00000935 _text           ends
.text:00000935
.text:00000938 ; ===========================================================================
.text:00000938
.text:00000938 ; Segment type: Pure code
.text:00000938 ; Segment permissions: Read/Execute
.text:00000938 _text           segment para public 'CODE' use32
.text:00000938                 assume cs:_text
.text:00000938                 ;org 938h
.text:00000938 ; COMDAT (pick any)
.text:00000938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000938
.text:00000938 ; =============== S U B R O U T I N E =======================================
.text:00000938
.text:00000938 ; Attributes: bp-based frame
.text:00000938
.text:00000938 ; _DWORD __thiscall CPercentPrinterState::~CPercentPrinterState(CPercentPrinterState *__hidden this)
.text:00000938                 public ??1CPercentPrinterState@@QAE@XZ
.text:00000938 ??1CPercentPrinterState@@QAE@XZ proc near
.text:00000938                                         ; CODE XREF: CPercentPrinter::~CPercentPrinter(void)+5Ap
.text:00000938                                         ; CPercentPrinter::~CPercentPrinter(void)+A5p ...
.text:00000938
.text:00000938 var_10          = dword ptr -10h
.text:00000938 var_C           = dword ptr -0Ch
.text:00000938 var_4           = dword ptr -4
.text:00000938
.text:00000938                 push    ebp
.text:00000939                 mov     ebp, esp
.text:0000093B                 push    0FFFFFFFFh
.text:0000093D                 push    offset __ehhandler$??1CPercentPrinterState@@QAE@XZ
.text:00000942                 mov     eax, large fs:0
.text:00000948                 push    eax
.text:00000949                 push    ecx
.text:0000094A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000951                 mov     eax, dword ptr ds:___security_cookie
.text:00000956                 xor     eax, ebp
.text:00000958                 push    eax
.text:00000959                 lea     eax, [ebp+var_C]
.text:0000095C                 mov     large fs:0, eax
.text:00000962                 mov     [ebp+var_10], ecx
.text:00000965                 mov     [ebp+var_4], 0
.text:0000096C                 mov     ecx, [ebp+var_10]
.text:0000096F                 add     ecx, 24h ; '$'  ; this
.text:00000972                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000977                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000097E                 mov     ecx, [ebp+var_10]
.text:00000981                 add     ecx, 18h        ; this
.text:00000984                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000989                 mov     ecx, [ebp+var_C]
.text:0000098C                 mov     large fs:0, ecx
.text:00000993                 pop     ecx
.text:00000994                 add     esp, 10h
.text:00000997                 cmp     ebp, esp
.text:00000999                 call    __RTC_CheckEsp
.text:0000099E                 mov     esp, ebp
.text:000009A0                 pop     ebp
.text:000009A1                 retn
.text:000009A1 ??1CPercentPrinterState@@QAE@XZ endp
.text:000009A1
.text:000009A1 ; ---------------------------------------------------------------------------
.text:000009A2                 align 4
.text:000009A2 _text           ends
.text:000009A2
.text$x:000009A4 ; ===========================================================================
.text$x:000009A4
.text$x:000009A4 ; Segment type: Pure code
.text$x:000009A4 ; Segment permissions: Read/Execute
.text$x:000009A4 _text$x         segment para public 'CODE' use32
.text$x:000009A4                 assume cs:_text$x
.text$x:000009A4                 ;org 9A4h
.text$x:000009A4 ; COMDAT (pick associative to section at 938)
.text$x:000009A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000009A4
.text$x:000009A4 ; =============== S U B R O U T I N E =======================================
.text$x:000009A4
.text$x:000009A4
.text$x:000009A4 __unwindfunclet$??1CPercentPrinterState@@QAE@XZ$0 proc near
.text$x:000009A4                                         ; DATA XREF: .xdata$x:000009D0o
.text$x:000009A4                 mov     ecx, [ebp-10h]
.text$x:000009A7                 add     ecx, 18h        ; this
.text$x:000009AA                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000009AA __unwindfunclet$??1CPercentPrinterState@@QAE@XZ$0 endp
.text$x:000009AA
.text$x:000009AF
.text$x:000009AF ; =============== S U B R O U T I N E =======================================
.text$x:000009AF
.text$x:000009AF
.text$x:000009AF __ehhandler$??1CPercentPrinterState@@QAE@XZ proc near
.text$x:000009AF                                         ; DATA XREF: CPercentPrinterState::~CPercentPrinterState(void)+5o
.text$x:000009AF
.text$x:000009AF arg_4           = dword ptr  8
.text$x:000009AF
.text$x:000009AF                 mov     edx, [esp+arg_4]
.text$x:000009B3                 lea     eax, [edx+0Ch]
.text$x:000009B6                 mov     ecx, [edx-8]
.text$x:000009B9                 xor     ecx, eax
.text$x:000009BB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000009C0                 mov     eax, offset __ehfuncinfo$??1CPercentPrinterState@@QAE@XZ
.text$x:000009C5                 jmp     ___CxxFrameHandler3
.text$x:000009C5 __ehhandler$??1CPercentPrinterState@@QAE@XZ endp
.text$x:000009C5
.text$x:000009C5 ; ---------------------------------------------------------------------------
.text$x:000009CA                 align 4
.text$x:000009CA _text$x         ends
.text$x:000009CA
.xdata$x:000009CC ; ===========================================================================
.xdata$x:000009CC
.xdata$x:000009CC ; Segment type: Pure data
.xdata$x:000009CC ; Segment permissions: Read
.xdata$x:000009CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000009CC                 assume cs:_xdata$x
.xdata$x:000009CC                 ;org 9CCh
.xdata$x:000009CC ; COMDAT (pick associative to section at 938)
.xdata$x:000009CC __unwindtable$??1CPercentPrinterState@@QAE@XZ db 0FFh
.xdata$x:000009CC                                         ; DATA XREF: .xdata$x:000009DCo
.xdata$x:000009CD                 db 0FFh
.xdata$x:000009CE                 db 0FFh
.xdata$x:000009CF                 db 0FFh
.xdata$x:000009D0                 dd offset __unwindfunclet$??1CPercentPrinterState@@QAE@XZ$0
.xdata$x:000009D4 __ehfuncinfo$??1CPercentPrinterState@@QAE@XZ db  22h ; "
.xdata$x:000009D4                                         ; DATA XREF: __ehhandler$??1CPercentPrinterState@@QAE@XZ+11o
.xdata$x:000009D5                 db    5
.xdata$x:000009D6                 db  93h ; Ã´
.xdata$x:000009D7                 db  19h
.xdata$x:000009D8                 db    1
.xdata$x:000009D9                 db    0
.xdata$x:000009DA                 db    0
.xdata$x:000009DB                 db    0
.xdata$x:000009DC                 dd offset __unwindtable$??1CPercentPrinterState@@QAE@XZ
.xdata$x:000009E0                 db    0
.xdata$x:000009E1                 db    0
.xdata$x:000009E2                 db    0
.xdata$x:000009E3                 db    0
.xdata$x:000009E4                 db    0
.xdata$x:000009E5                 db    0
.xdata$x:000009E6                 db    0
.xdata$x:000009E7                 db    0
.xdata$x:000009E8                 db    0
.xdata$x:000009E9                 db    0
.xdata$x:000009EA                 db    0
.xdata$x:000009EB                 db    0
.xdata$x:000009EC                 db    0
.xdata$x:000009ED                 db    0
.xdata$x:000009EE                 db    0
.xdata$x:000009EF                 db    0
.xdata$x:000009F0                 db    0
.xdata$x:000009F1                 db    0
.xdata$x:000009F2                 db    0
.xdata$x:000009F3                 db    0
.xdata$x:000009F4                 db    1
.xdata$x:000009F5                 db    0
.xdata$x:000009F6                 db    0
.xdata$x:000009F7                 db    0
.xdata$x:000009F7 _xdata$x        ends
.xdata$x:000009F7
.text:000009F8 ; ===========================================================================
.text:000009F8
.text:000009F8 ; Segment type: Pure code
.text:000009F8 ; Segment permissions: Read/Execute
.text:000009F8 _text           segment para public 'CODE' use32
.text:000009F8                 assume cs:_text
.text:000009F8                 ;org 9F8h
.text:000009F8 ; COMDAT (pick any)
.text:000009F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009F8
.text:000009F8 ; =============== S U B R O U T I N E =======================================
.text:000009F8
.text:000009F8 ; Attributes: bp-based frame
.text:000009F8
.text:000009F8 ; void __thiscall AString::Empty(AString *__hidden this)
.text:000009F8                 public ?Empty@AString@@QAEXXZ
.text:000009F8 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: CPercentPrinterState::ClearCurState(void)+46p
.text:000009F8                                         ; CPercentPrinter::ClosePrint(bool)+E7p ...
.text:000009F8
.text:000009F8 var_4           = dword ptr -4
.text:000009F8
.text:000009F8                 push    ebp
.text:000009F9                 mov     ebp, esp
.text:000009FB                 push    ecx
.text:000009FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A03                 mov     [ebp+var_4], ecx
.text:00000A06                 mov     eax, [ebp+var_4]
.text:00000A09                 mov     dword ptr [eax+4], 0
.text:00000A10                 mov     ecx, [ebp+var_4]
.text:00000A13                 mov     edx, [ecx]
.text:00000A15                 mov     byte ptr [edx], 0
.text:00000A18                 mov     esp, ebp
.text:00000A1A                 pop     ebp
.text:00000A1B                 retn
.text:00000A1B ?Empty@AString@@QAEXXZ endp
.text:00000A1B
.text:00000A1B _text           ends
.text:00000A1B
.text:00000A1C ; ===========================================================================
.text:00000A1C
.text:00000A1C ; Segment type: Pure code
.text:00000A1C ; Segment permissions: Read/Execute
.text:00000A1C _text           segment para public 'CODE' use32
.text:00000A1C                 assume cs:_text
.text:00000A1C                 ;org 0A1Ch
.text:00000A1C ; COMDAT (pick any)
.text:00000A1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A1C
.text:00000A1C ; =============== S U B R O U T I N E =======================================
.text:00000A1C
.text:00000A1C ; Attributes: bp-based frame
.text:00000A1C
.text:00000A1C ; void __thiscall UString::Empty(UString *__hidden this)
.text:00000A1C                 public ?Empty@UString@@QAEXXZ
.text:00000A1C ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: CPercentPrinterState::ClearCurState(void)+51p
.text:00000A1C
.text:00000A1C var_4           = dword ptr -4
.text:00000A1C
.text:00000A1C                 push    ebp
.text:00000A1D                 mov     ebp, esp
.text:00000A1F                 push    ecx
.text:00000A20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A27                 mov     [ebp+var_4], ecx
.text:00000A2A                 mov     eax, [ebp+var_4]
.text:00000A2D                 mov     dword ptr [eax+4], 0
.text:00000A34                 mov     ecx, [ebp+var_4]
.text:00000A37                 mov     edx, [ecx]
.text:00000A39                 xor     eax, eax
.text:00000A3B                 mov     [edx], ax
.text:00000A3E                 mov     esp, ebp
.text:00000A40                 pop     ebp
.text:00000A41                 retn
.text:00000A41 ?Empty@UString@@QAEXXZ endp
.text:00000A41
.text:00000A41 ; ---------------------------------------------------------------------------
.text:00000A42                 align 4
.text:00000A42 _text           ends
.text:00000A42
.text:00000A44 ; ===========================================================================
.text:00000A44
.text:00000A44 ; Segment type: Pure code
.text:00000A44 ; Segment permissions: Read/Execute
.text:00000A44 _text           segment para public 'CODE' use32
.text:00000A44                 assume cs:_text
.text:00000A44                 ;org 0A44h
.text:00000A44 ; COMDAT (pick any)
.text:00000A44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A44
.text:00000A44 ; =============== S U B R O U T I N E =======================================
.text:00000A44
.text:00000A44 ; Attributes: bp-based frame
.text:00000A44
.text:00000A44 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00000A44                 public ?Len@AString@@QBEIXZ
.text:00000A44 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: CPercentPrinter::ClosePrint(bool)+23p
.text:00000A44                                         ; CPercentPrinter::Print(void)+22Cp ...
.text:00000A44
.text:00000A44 var_4           = dword ptr -4
.text:00000A44
.text:00000A44                 push    ebp
.text:00000A45                 mov     ebp, esp
.text:00000A47                 push    ecx
.text:00000A48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A4F                 mov     [ebp+var_4], ecx
.text:00000A52                 mov     eax, [ebp+var_4]
.text:00000A55                 mov     eax, [eax+4]
.text:00000A58                 mov     esp, ebp
.text:00000A5A                 pop     ebp
.text:00000A5B                 retn
.text:00000A5B ?Len@AString@@QBEIXZ endp
.text:00000A5B
.text:00000A5B _text           ends
.text:00000A5B
.text:00000A5C ; ===========================================================================
.text:00000A5C
.text:00000A5C ; Segment type: Pure code
.text:00000A5C ; Segment permissions: Read/Execute
.text:00000A5C _text           segment para public 'CODE' use32
.text:00000A5C                 assume cs:_text
.text:00000A5C                 ;org 0A5Ch
.text:00000A5C ; COMDAT (pick any)
.text:00000A5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A5C
.text:00000A5C ; =============== S U B R O U T I N E =======================================
.text:00000A5C
.text:00000A5C ; Attributes: bp-based frame
.text:00000A5C
.text:00000A5C ; public: __thiscall AString::operator char const *(void)const
.text:00000A5C                 public ??BAString@@QBEPBDXZ
.text:00000A5C ??BAString@@QBEPBDXZ proc near          ; CODE XREF: CPercentPrinter::ClosePrint(bool)+B7p
.text:00000A5C                                         ; CPercentPrinter::Print(void)+3A3p ...
.text:00000A5C
.text:00000A5C var_4           = dword ptr -4
.text:00000A5C
.text:00000A5C                 push    ebp
.text:00000A5D                 mov     ebp, esp
.text:00000A5F                 push    ecx
.text:00000A60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A67                 mov     [ebp+var_4], ecx
.text:00000A6A                 mov     eax, [ebp+var_4]
.text:00000A6D                 mov     eax, [eax]
.text:00000A6F                 mov     esp, ebp
.text:00000A71                 pop     ebp
.text:00000A72                 retn
.text:00000A72 ??BAString@@QBEPBDXZ endp
.text:00000A72
.text:00000A72 ; ---------------------------------------------------------------------------
.text:00000A73                 align 4
.text:00000A73 _text           ends
.text:00000A73
.text:00000A74 ; ===========================================================================
.text:00000A74
.text:00000A74 ; Segment type: Pure code
.text:00000A74 ; Segment permissions: Read/Execute
.text:00000A74 _text           segment para public 'CODE' use32
.text:00000A74                 assume cs:_text
.text:00000A74                 ;org 0A74h
.text:00000A74 ; COMDAT (pick any)
.text:00000A74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A74
.text:00000A74 ; =============== S U B R O U T I N E =======================================
.text:00000A74
.text:00000A74 ; Attributes: bp-based frame
.text:00000A74
.text:00000A74 ; char *__thiscall AString::GetBuf(AString *this, unsigned int)
.text:00000A74                 public ?GetBuf@AString@@QAEPADI@Z
.text:00000A74 ?GetBuf@AString@@QAEPADI@Z proc near    ; CODE XREF: CPercentPrinter::ClosePrint(bool)+42p
.text:00000A74
.text:00000A74 var_4           = dword ptr -4
.text:00000A74 arg_0           = dword ptr  8
.text:00000A74
.text:00000A74                 push    ebp
.text:00000A75                 mov     ebp, esp
.text:00000A77                 push    ecx
.text:00000A78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A7F                 mov     [ebp+var_4], ecx
.text:00000A82                 mov     eax, [ebp+var_4]
.text:00000A85                 mov     ecx, [ebp+arg_0]
.text:00000A88                 cmp     ecx, [eax+8]
.text:00000A8B                 jbe     short loc_A99
.text:00000A8D                 mov     edx, [ebp+arg_0]
.text:00000A90                 push    edx             ; unsigned int
.text:00000A91                 mov     ecx, [ebp+var_4] ; this
.text:00000A94                 call    ?ReAlloc2@AString@@AAEXI@Z ; AString::ReAlloc2(uint)
.text:00000A99
.text:00000A99 loc_A99:                                ; CODE XREF: AString::GetBuf(uint)+17j
.text:00000A99                 mov     eax, [ebp+var_4]
.text:00000A9C                 mov     eax, [eax]
.text:00000A9E                 add     esp, 4
.text:00000AA1                 cmp     ebp, esp
.text:00000AA3                 call    __RTC_CheckEsp
.text:00000AA8                 mov     esp, ebp
.text:00000AAA                 pop     ebp
.text:00000AAB                 retn    4
.text:00000AAB ?GetBuf@AString@@QAEPADI@Z endp
.text:00000AAB
.text:00000AAB ; ---------------------------------------------------------------------------
.text:00000AAE                 align 10h
.text:00000AAE _text           ends
.text:00000AAE
.text:00000AB0 ; ===========================================================================
.text:00000AB0
.text:00000AB0 ; Segment type: Pure code
.text:00000AB0 ; Segment permissions: Read/Execute
.text:00000AB0 _text           segment para public 'CODE' use32
.text:00000AB0                 assume cs:_text
.text:00000AB0                 ;org 0AB0h
.text:00000AB0 ; COMDAT (pick any)
.text:00000AB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000AB0
.text:00000AB0 ; =============== S U B R O U T I N E =======================================
.text:00000AB0
.text:00000AB0 ; Attributes: bp-based frame
.text:00000AB0
.text:00000AB0 ; void __thiscall AString::ReleaseBuf_SetLen(AString *this, unsigned int)
.text:00000AB0                 public ?ReleaseBuf_SetLen@AString@@QAEXI@Z
.text:00000AB0 ?ReleaseBuf_SetLen@AString@@QAEXI@Z proc near
.text:00000AB0                                         ; CODE XREF: CPercentPrinter::ClosePrint(bool)+ACp
.text:00000AB0
.text:00000AB0 var_4           = dword ptr -4
.text:00000AB0 arg_0           = dword ptr  8
.text:00000AB0
.text:00000AB0                 push    ebp
.text:00000AB1                 mov     ebp, esp
.text:00000AB3                 push    ecx
.text:00000AB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000ABB                 mov     [ebp+var_4], ecx
.text:00000ABE                 mov     eax, [ebp+var_4]
.text:00000AC1                 mov     ecx, [ebp+arg_0]
.text:00000AC4                 mov     [eax+4], ecx
.text:00000AC7                 mov     esp, ebp
.text:00000AC9                 pop     ebp
.text:00000ACA                 retn    4
.text:00000ACA ?ReleaseBuf_SetLen@AString@@QAEXI@Z endp
.text:00000ACA
.text:00000ACA ; ---------------------------------------------------------------------------
.text:00000ACD                 align 10h
.text:00000ACD _text           ends
.text:00000ACD
.text:00000AD0 ; ===========================================================================
.text:00000AD0
.text:00000AD0 ; Segment type: Pure code
.text:00000AD0 ; Segment permissions: Read/Execute
.text:00000AD0 _text           segment para public 'CODE' use32
.text:00000AD0                 assume cs:_text
.text:00000AD0                 ;org 0AD0h
.text:00000AD0 ; COMDAT (pick any)
.text:00000AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000AD0
.text:00000AD0 ; =============== S U B R O U T I N E =======================================
.text:00000AD0
.text:00000AD0 ; Attributes: bp-based frame
.text:00000AD0
.text:00000AD0 ; int __stdcall CStdOutStream::operator<<(char *Str)
.text:00000AD0                 public ??6CStdOutStream@@QAEAAV0@PBD@Z
.text:00000AD0 ??6CStdOutStream@@QAEAAV0@PBD@Z proc near
.text:00000AD0                                         ; CODE XREF: CPercentPrinter::ClosePrint(bool)+C6p
.text:00000AD0                                         ; CPercentPrinter::Print(void)+3B2p
.text:00000AD0
.text:00000AD0 var_4           = dword ptr -4
.text:00000AD0 Str             = dword ptr  8
.text:00000AD0
.text:00000AD0                 push    ebp
.text:00000AD1                 mov     ebp, esp
.text:00000AD3                 push    ecx
.text:00000AD4                 push    esi
.text:00000AD5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000ADC                 mov     [ebp+var_4], ecx
.text:00000ADF                 mov     esi, esp
.text:00000AE1                 mov     eax, [ebp+var_4]
.text:00000AE4                 mov     ecx, [eax]
.text:00000AE6                 push    ecx             ; File
.text:00000AE7                 mov     edx, [ebp+Str]
.text:00000AEA                 push    edx             ; Str
.text:00000AEB                 call    dword ptr ds:__imp__fputs
.text:00000AF1                 add     esp, 8
.text:00000AF4                 cmp     esi, esp
.text:00000AF6                 call    __RTC_CheckEsp
.text:00000AFB                 mov     eax, [ebp+var_4]
.text:00000AFE                 pop     esi
.text:00000AFF                 add     esp, 4
.text:00000B02                 cmp     ebp, esp
.text:00000B04                 call    __RTC_CheckEsp
.text:00000B09                 mov     esp, ebp
.text:00000B0B                 pop     ebp
.text:00000B0C                 retn    4
.text:00000B0C ??6CStdOutStream@@QAEAAV0@PBD@Z endp
.text:00000B0C
.text:00000B0C ; ---------------------------------------------------------------------------
.text:00000B0F                 align 10h
.text:00000B0F _text           ends
.text:00000B0F
.text:00000B10 ; ===========================================================================
.text:00000B10
.text:00000B10 ; Segment type: Pure code
.text:00000B10 ; Segment permissions: Read/Execute
.text:00000B10 _text           segment para public 'CODE' use32
.text:00000B10                 assume cs:_text
.text:00000B10                 ;org 0B10h
.text:00000B10 ; COMDAT (pick any)
.text:00000B10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B10
.text:00000B10 ; =============== S U B R O U T I N E =======================================
.text:00000B10
.text:00000B10 ; Attributes: bp-based frame
.text:00000B10
.text:00000B10 ; public: class AString & __thiscall AString::operator+=(char)
.text:00000B10                 public ??YAString@@QAEAAV0@D@Z
.text:00000B10 ??YAString@@QAEAAV0@D@Z proc near       ; CODE XREF: CPercentPrinter::GetPercents(void)+F2p
.text:00000B10                                         ; CPercentPrinter::Print(void)+1CBp ...
.text:00000B10
.text:00000B10 var_C           = dword ptr -0Ch
.text:00000B10 var_8           = dword ptr -8
.text:00000B10 var_4           = dword ptr -4
.text:00000B10 arg_0           = byte ptr  8
.text:00000B10
.text:00000B10                 push    ebp
.text:00000B11                 mov     ebp, esp
.text:00000B13                 sub     esp, 0Ch
.text:00000B16                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000B1D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B2B                 mov     [ebp+var_4], ecx
.text:00000B2E                 mov     eax, [ebp+var_4]
.text:00000B31                 mov     ecx, [ebp+var_4]
.text:00000B34                 mov     edx, [eax+8]
.text:00000B37                 cmp     edx, [ecx+4]
.text:00000B3A                 jnz     short loc_B44
.text:00000B3C                 mov     ecx, [ebp+var_4] ; this
.text:00000B3F                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:00000B44
.text:00000B44 loc_B44:                                ; CODE XREF: AString::operator+=(char)+2Aj
.text:00000B44                 mov     eax, [ebp+var_4]
.text:00000B47                 mov     ecx, [eax+4]
.text:00000B4A                 mov     [ebp+var_8], ecx
.text:00000B4D                 mov     edx, [ebp+var_4]
.text:00000B50                 mov     eax, [edx]
.text:00000B52                 mov     [ebp+var_C], eax
.text:00000B55                 mov     ecx, [ebp+var_C]
.text:00000B58                 add     ecx, [ebp+var_8]
.text:00000B5B                 mov     dl, [ebp+arg_0]
.text:00000B5E                 mov     [ecx], dl
.text:00000B60                 mov     eax, [ebp+var_8]
.text:00000B63                 add     eax, 1
.text:00000B66                 mov     [ebp+var_8], eax
.text:00000B69                 mov     ecx, [ebp+var_C]
.text:00000B6C                 add     ecx, [ebp+var_8]
.text:00000B6F                 mov     byte ptr [ecx], 0
.text:00000B72                 mov     edx, [ebp+var_4]
.text:00000B75                 mov     eax, [ebp+var_8]
.text:00000B78                 mov     [edx+4], eax
.text:00000B7B                 mov     eax, [ebp+var_4]
.text:00000B7E                 add     esp, 0Ch
.text:00000B81                 cmp     ebp, esp
.text:00000B83                 call    __RTC_CheckEsp
.text:00000B88                 mov     esp, ebp
.text:00000B8A                 pop     ebp
.text:00000B8B                 retn    4
.text:00000B8B ??YAString@@QAEAAV0@D@Z endp
.text:00000B8B
.text:00000B8B ; ---------------------------------------------------------------------------
.text:00000B8E                 align 10h
.text:00000B8E _text           ends
.text:00000B8E
.text:00000B90 ; ===========================================================================
.text:00000B90
.text:00000B90 ; Segment type: Pure code
.text:00000B90 ; Segment permissions: Read/Execute
.text:00000B90 _text           segment para public 'CODE' use32
.text:00000B90                 assume cs:_text
.text:00000B90                 ;org 0B90h
.text:00000B90 ; COMDAT (pick any)
.text:00000B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B90
.text:00000B90 ; =============== S U B R O U T I N E =======================================
.text:00000B90
.text:00000B90 ; Attributes: bp-based frame
.text:00000B90
.text:00000B90 ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:00000B90                 public ?IsEmpty@AString@@QBE_NXZ
.text:00000B90 ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: CPercentPrinter::Print(void)+52p
.text:00000B90                                         ; CPercentPrinter::Print(void)+1E5p
.text:00000B90
.text:00000B90 var_4           = dword ptr -4
.text:00000B90
.text:00000B90                 push    ebp
.text:00000B91                 mov     ebp, esp
.text:00000B93                 push    ecx
.text:00000B94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B9B                 mov     [ebp+var_4], ecx
.text:00000B9E                 mov     eax, [ebp+var_4]
.text:00000BA1                 xor     ecx, ecx
.text:00000BA3                 cmp     dword ptr [eax+4], 0
.text:00000BA7                 setz    cl
.text:00000BAA                 mov     al, cl
.text:00000BAC                 mov     esp, ebp
.text:00000BAE                 pop     ebp
.text:00000BAF                 retn
.text:00000BAF ?IsEmpty@AString@@QBE_NXZ endp
.text:00000BAF
.text:00000BAF _text           ends
.text:00000BAF
.text:00000BB0 ; ===========================================================================
.text:00000BB0
.text:00000BB0 ; Segment type: Pure code
.text:00000BB0 ; Segment permissions: Read/Execute
.text:00000BB0 _text           segment para public 'CODE' use32
.text:00000BB0                 assume cs:_text
.text:00000BB0                 ;org 0BB0h
.text:00000BB0 ; COMDAT (pick any)
.text:00000BB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000BB0
.text:00000BB0 ; =============== S U B R O U T I N E =======================================
.text:00000BB0
.text:00000BB0 ; Attributes: bp-based frame
.text:00000BB0
.text:00000BB0 ; int __stdcall operator==(AString *, AString *)
.text:00000BB0                 public ??8@YG_NABVAString@@0@Z
.text:00000BB0 ??8@YG_NABVAString@@0@Z proc near       ; CODE XREF: CPercentPrinter::Print(void)+98p
.text:00000BB0                                         ; CPercentPrinter::Print(void)+175p
.text:00000BB0
.text:00000BB0 var_4           = dword ptr -4
.text:00000BB0 arg_0           = dword ptr  8
.text:00000BB0 arg_4           = dword ptr  0Ch
.text:00000BB0
.text:00000BB0                 push    ebp
.text:00000BB1                 mov     ebp, esp
.text:00000BB3                 push    ecx
.text:00000BB4                 push    esi
.text:00000BB5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BBC                 mov     ecx, [ebp+arg_0] ; this
.text:00000BBF                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000BC4                 mov     esi, eax
.text:00000BC6                 mov     ecx, [ebp+arg_4] ; this
.text:00000BC9                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000BCE                 cmp     esi, eax
.text:00000BD0                 jnz     short loc_BF9
.text:00000BD2                 mov     ecx, [ebp+arg_4]
.text:00000BD5                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000BDA                 push    eax             ; Str2
.text:00000BDB                 mov     ecx, [ebp+arg_0]
.text:00000BDE                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000BE3                 push    eax             ; Str1
.text:00000BE4                 call    _strcmp
.text:00000BE9                 add     esp, 8
.text:00000BEC                 test    eax, eax
.text:00000BEE                 jnz     short loc_BF9
.text:00000BF0                 mov     [ebp+var_4], 1
.text:00000BF7                 jmp     short loc_C00
.text:00000BF9 ; ---------------------------------------------------------------------------
.text:00000BF9
.text:00000BF9 loc_BF9:                                ; CODE XREF: operator==(AString const &,AString const &)+20j
.text:00000BF9                                         ; operator==(AString const &,AString const &)+3Ej
.text:00000BF9                 mov     [ebp+var_4], 0
.text:00000C00
.text:00000C00 loc_C00:                                ; CODE XREF: operator==(AString const &,AString const &)+47j
.text:00000C00                 mov     al, byte ptr [ebp+var_4]
.text:00000C03                 pop     esi
.text:00000C04                 add     esp, 4
.text:00000C07                 cmp     ebp, esp
.text:00000C09                 call    __RTC_CheckEsp
.text:00000C0E                 mov     esp, ebp
.text:00000C10                 pop     ebp
.text:00000C11                 retn    8
.text:00000C11 ??8@YG_NABVAString@@0@Z endp
.text:00000C11
.text:00000C11 _text           ends
.text:00000C11
.text:00000C14 ; ===========================================================================
.text:00000C14
.text:00000C14 ; Segment type: Pure code
.text:00000C14 ; Segment permissions: Read/Execute
.text:00000C14 _text           segment para public 'CODE' use32
.text:00000C14                 assume cs:_text
.text:00000C14                 ;org 0C14h
.text:00000C14 ; COMDAT (pick any)
.text:00000C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C14
.text:00000C14 ; =============== S U B R O U T I N E =======================================
.text:00000C14
.text:00000C14 ; Attributes: bp-based frame
.text:00000C14
.text:00000C14 ; int __stdcall operator!=(AString *, AString *)
.text:00000C14                 public ??9@YG_NABVAString@@0@Z
.text:00000C14 ??9@YG_NABVAString@@0@Z proc near       ; CODE XREF: CPercentPrinter::Print(void)+387p
.text:00000C14
.text:00000C14 var_4           = dword ptr -4
.text:00000C14 arg_0           = dword ptr  8
.text:00000C14 arg_4           = dword ptr  0Ch
.text:00000C14
.text:00000C14                 push    ebp
.text:00000C15                 mov     ebp, esp
.text:00000C17                 push    ecx
.text:00000C18                 push    esi
.text:00000C19                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C20                 mov     ecx, [ebp+arg_0] ; this
.text:00000C23                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000C28                 mov     esi, eax
.text:00000C2A                 mov     ecx, [ebp+arg_4] ; this
.text:00000C2D                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000C32                 cmp     esi, eax
.text:00000C34                 jnz     short loc_C5D
.text:00000C36                 mov     ecx, [ebp+arg_4]
.text:00000C39                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000C3E                 push    eax             ; Str2
.text:00000C3F                 mov     ecx, [ebp+arg_0]
.text:00000C42                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000C47                 push    eax             ; Str1
.text:00000C48                 call    _strcmp
.text:00000C4D                 add     esp, 8
.text:00000C50                 test    eax, eax
.text:00000C52                 jnz     short loc_C5D
.text:00000C54                 mov     [ebp+var_4], 0
.text:00000C5B                 jmp     short loc_C64
.text:00000C5D ; ---------------------------------------------------------------------------
.text:00000C5D
.text:00000C5D loc_C5D:                                ; CODE XREF: operator!=(AString const &,AString const &)+20j
.text:00000C5D                                         ; operator!=(AString const &,AString const &)+3Ej
.text:00000C5D                 mov     [ebp+var_4], 1
.text:00000C64
.text:00000C64 loc_C64:                                ; CODE XREF: operator!=(AString const &,AString const &)+47j
.text:00000C64                 mov     al, byte ptr [ebp+var_4]
.text:00000C67                 pop     esi
.text:00000C68                 add     esp, 4
.text:00000C6B                 cmp     ebp, esp
.text:00000C6D                 call    __RTC_CheckEsp
.text:00000C72                 mov     esp, ebp
.text:00000C74                 pop     ebp
.text:00000C75                 retn    8
.text:00000C75 ??9@YG_NABVAString@@0@Z endp
.text:00000C75
.text:00000C75 _text           ends
.text:00000C75
.text:00000C78 ; ===========================================================================
.text:00000C78
.text:00000C78 ; Segment type: Pure code
.text:00000C78 ; Segment permissions: Read/Execute
.text:00000C78 _text           segment para public 'CODE' use32
.text:00000C78                 assume cs:_text
.text:00000C78                 ;org 0C78h
.text:00000C78 ; COMDAT (pick any)
.text:00000C78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C78
.text:00000C78 ; =============== S U B R O U T I N E =======================================
.text:00000C78
.text:00000C78 ; Attributes: bp-based frame
.text:00000C78
.text:00000C78 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:00000C78                 public ?Len@UString@@QBEIXZ
.text:00000C78 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: CPercentPrinter::Print(void)+29Ep
.text:00000C78                                         ; CPercentPrinter::Print(void)+2E7p ...
.text:00000C78
.text:00000C78 var_4           = dword ptr -4
.text:00000C78
.text:00000C78                 push    ebp
.text:00000C79                 mov     ebp, esp
.text:00000C7B                 push    ecx
.text:00000C7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C83                 mov     [ebp+var_4], ecx
.text:00000C86                 mov     eax, [ebp+var_4]
.text:00000C89                 mov     eax, [eax+4]
.text:00000C8C                 mov     esp, ebp
.text:00000C8E                 pop     ebp
.text:00000C8F                 retn
.text:00000C8F ?Len@UString@@QBEIXZ endp
.text:00000C8F
.text:00000C8F _text           ends
.text:00000C8F
.text:00000C90 ; ===========================================================================
.text:00000C90
.text:00000C90 ; Segment type: Pure code
.text:00000C90 ; Segment permissions: Read/Execute
.text:00000C90 _text           segment para public 'CODE' use32
.text:00000C90                 assume cs:_text
.text:00000C90                 ;org 0C90h
.text:00000C90 ; COMDAT (pick any)
.text:00000C90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C90
.text:00000C90 ; =============== S U B R O U T I N E =======================================
.text:00000C90
.text:00000C90 ; Attributes: bp-based frame
.text:00000C90
.text:00000C90 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00000C90                 public ?IsEmpty@UString@@QBE_NXZ
.text:00000C90 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: CPercentPrinter::Print(void)+216p
.text:00000C90
.text:00000C90 var_4           = dword ptr -4
.text:00000C90
.text:00000C90                 push    ebp
.text:00000C91                 mov     ebp, esp
.text:00000C93                 push    ecx
.text:00000C94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C9B                 mov     [ebp+var_4], ecx
.text:00000C9E                 mov     eax, [ebp+var_4]
.text:00000CA1                 xor     ecx, ecx
.text:00000CA3                 cmp     dword ptr [eax+4], 0
.text:00000CA7                 setz    cl
.text:00000CAA                 mov     al, cl
.text:00000CAC                 mov     esp, ebp
.text:00000CAE                 pop     ebp
.text:00000CAF                 retn
.text:00000CAF ?IsEmpty@UString@@QBE_NXZ endp
.text:00000CAF
.text:00000CAF _text           ends
.text:00000CAF
.text:00000CB0 ; ===========================================================================
.text:00000CB0
.text:00000CB0 ; Segment type: Pure code
.text:00000CB0 ; Segment permissions: Read/Execute
.text:00000CB0 _text           segment para public 'CODE' use32
.text:00000CB0                 assume cs:_text
.text:00000CB0                 ;org 0CB0h
.text:00000CB0 ; COMDAT (pick any)
.text:00000CB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CB0
.text:00000CB0 ; =============== S U B R O U T I N E =======================================
.text:00000CB0
.text:00000CB0 ; Attributes: bp-based frame
.text:00000CB0
.text:00000CB0 ; int __stdcall operator==(UString *, UString *)
.text:00000CB0                 public ??8@YG_NABVUString@@0@Z
.text:00000CB0 ??8@YG_NABVUString@@0@Z proc near       ; CODE XREF: CPercentPrinter::Print(void)+B9p
.text:00000CB0
.text:00000CB0 var_4           = dword ptr -4
.text:00000CB0 arg_0           = dword ptr  8
.text:00000CB0 arg_4           = dword ptr  0Ch
.text:00000CB0
.text:00000CB0                 push    ebp
.text:00000CB1                 mov     ebp, esp
.text:00000CB3                 push    ecx
.text:00000CB4                 push    esi
.text:00000CB5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CBC                 mov     ecx, [ebp+arg_0] ; this
.text:00000CBF                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000CC4                 mov     esi, eax
.text:00000CC6                 mov     ecx, [ebp+arg_4] ; this
.text:00000CC9                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000CCE                 cmp     esi, eax
.text:00000CD0                 jnz     short loc_D03
.text:00000CD2                 mov     ecx, [ebp+arg_4]
.text:00000CD5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000CDA                 mov     esi, esp
.text:00000CDC                 push    eax             ; Str2
.text:00000CDD                 mov     ecx, [ebp+arg_0]
.text:00000CE0                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000CE5                 push    eax             ; Str1
.text:00000CE6                 call    dword ptr ds:__imp__wcscmp
.text:00000CEC                 add     esp, 8
.text:00000CEF                 cmp     esi, esp
.text:00000CF1                 call    __RTC_CheckEsp
.text:00000CF6                 test    eax, eax
.text:00000CF8                 jnz     short loc_D03
.text:00000CFA                 mov     [ebp+var_4], 1
.text:00000D01                 jmp     short loc_D0A
.text:00000D03 ; ---------------------------------------------------------------------------
.text:00000D03
.text:00000D03 loc_D03:                                ; CODE XREF: operator==(UString const &,UString const &)+20j
.text:00000D03                                         ; operator==(UString const &,UString const &)+48j
.text:00000D03                 mov     [ebp+var_4], 0
.text:00000D0A
.text:00000D0A loc_D0A:                                ; CODE XREF: operator==(UString const &,UString const &)+51j
.text:00000D0A                 mov     al, byte ptr [ebp+var_4]
.text:00000D0D                 pop     esi
.text:00000D0E                 add     esp, 4
.text:00000D11                 cmp     ebp, esp
.text:00000D13                 call    __RTC_CheckEsp
.text:00000D18                 mov     esp, ebp
.text:00000D1A                 pop     ebp
.text:00000D1B                 retn    8
.text:00000D1B ??8@YG_NABVUString@@0@Z endp
.text:00000D1B
.text:00000D1B ; ---------------------------------------------------------------------------
.text:00000D1E                 align 10h
.text:00000D1E _text           ends
.text:00000D1E
.text:00000D20 ; ===========================================================================
.text:00000D20
.text:00000D20 ; Segment type: Pure code
.text:00000D20 ; Segment permissions: Read/Execute
.text:00000D20 _text           segment para public 'CODE' use32
.text:00000D20                 assume cs:_text
.text:00000D20                 ;org 0D20h
.text:00000D20 ; COMDAT (pick any)
.text:00000D20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D20
.text:00000D20 ; =============== S U B R O U T I N E =======================================
.text:00000D20
.text:00000D20 ; Attributes: bp-based frame
.text:00000D20
.text:00000D20 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000D20                 public ??BUString@@QBEPB_WXZ
.text:00000D20 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: operator==(UString const &,UString const &)+25p
.text:00000D20                                         ; operator==(UString const &,UString const &)+30p
.text:00000D20
.text:00000D20 var_4           = dword ptr -4
.text:00000D20
.text:00000D20                 push    ebp
.text:00000D21                 mov     ebp, esp
.text:00000D23                 push    ecx
.text:00000D24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D2B                 mov     [ebp+var_4], ecx
.text:00000D2E                 mov     eax, [ebp+var_4]
.text:00000D31                 mov     eax, [eax]
.text:00000D33                 mov     esp, ebp
.text:00000D35                 pop     ebp
.text:00000D36                 retn
.text:00000D36 ??BUString@@QBEPB_WXZ endp
.text:00000D36
.text:00000D36 ; ---------------------------------------------------------------------------
.text:00000D37                 align 4
.text:00000D37 _text           ends
.text:00000D37
.text:00000D38 ; ===========================================================================
.text:00000D38
.text:00000D38 ; Segment type: Pure code
.text:00000D38 ; Segment permissions: Read/Execute
.text:00000D38 _text           segment para public 'CODE' use32
.text:00000D38                 assume cs:_text
.text:00000D38                 ;org 0D38h
.text:00000D38 ; COMDAT (pick any)
.text:00000D38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D38
.text:00000D38 ; =============== S U B R O U T I N E =======================================
.text:00000D38
.text:00000D38 ; Attributes: bp-based frame
.text:00000D38
.text:00000D38 ; public: struct CPercentPrinterState & __thiscall CPercentPrinterState::operator=(struct CPercentPrinterState const &)
.text:00000D38                 public ??4CPercentPrinterState@@QAEAAU0@ABU0@@Z
.text:00000D38 ??4CPercentPrinterState@@QAEAAU0@ABU0@@Z proc near
.text:00000D38                                         ; CODE XREF: CPercentPrinter::Print(void)+3EFp
.text:00000D38
.text:00000D38 var_4           = dword ptr -4
.text:00000D38 arg_0           = dword ptr  8
.text:00000D38
.text:00000D38                 push    ebp
.text:00000D39                 mov     ebp, esp
.text:00000D3B                 push    ecx
.text:00000D3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D43                 mov     [ebp+var_4], ecx
.text:00000D46                 mov     eax, [ebp+var_4]
.text:00000D49                 mov     ecx, [ebp+arg_0]
.text:00000D4C                 mov     edx, [ecx]
.text:00000D4E                 mov     [eax], edx
.text:00000D50                 mov     ecx, [ecx+4]
.text:00000D53                 mov     [eax+4], ecx
.text:00000D56                 mov     edx, [ebp+var_4]
.text:00000D59                 mov     eax, [ebp+arg_0]
.text:00000D5C                 mov     ecx, [eax+8]
.text:00000D5F                 mov     [edx+8], ecx
.text:00000D62                 mov     eax, [eax+0Ch]
.text:00000D65                 mov     [edx+0Ch], eax
.text:00000D68                 mov     ecx, [ebp+var_4]
.text:00000D6B                 mov     edx, [ebp+arg_0]
.text:00000D6E                 mov     eax, [edx+10h]
.text:00000D71                 mov     [ecx+10h], eax
.text:00000D74                 mov     edx, [edx+14h]
.text:00000D77                 mov     [ecx+14h], edx
.text:00000D7A                 mov     eax, [ebp+arg_0]
.text:00000D7D                 add     eax, 18h
.text:00000D80                 push    eax
.text:00000D81                 mov     ecx, [ebp+var_4]
.text:00000D84                 add     ecx, 18h
.text:00000D87                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00000D8C                 mov     ecx, [ebp+arg_0]
.text:00000D8F                 add     ecx, 24h ; '$'
.text:00000D92                 push    ecx
.text:00000D93                 mov     ecx, [ebp+var_4]
.text:00000D96                 add     ecx, 24h ; '$'
.text:00000D99                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000D9E                 mov     eax, [ebp+var_4]
.text:00000DA1                 add     esp, 4
.text:00000DA4                 cmp     ebp, esp
.text:00000DA6                 call    __RTC_CheckEsp
.text:00000DAB                 mov     esp, ebp
.text:00000DAD                 pop     ebp
.text:00000DAE                 retn    4
.text:00000DAE ??4CPercentPrinterState@@QAEAAU0@ABU0@@Z endp
.text:00000DAE
.text:00000DAE _text           ends
.text:00000DAE
UNDEF:00000DC0 ; ===========================================================================
UNDEF:00000DC0
UNDEF:00000DC0 ; Segment type: Externs
UNDEF:00000DC0 ; UNDEF
UNDEF:00000DC0                 extrn ___security_cookie:near
UNDEF:00000DC0                                         ; DATA XREF: CPercentPrinter::~CPercentPrinter(void)+19r
UNDEF:00000DC0                                         ; CPercentPrinter::GetPercents(void)+19r ...
UNDEF:00000DC4                 extrn ___CxxFrameHandler3:near
UNDEF:00000DC4                                         ; CODE XREF: __ehhandler$??1CPercentPrinter@@QAE@XZ+16j
UNDEF:00000DC4                                         ; __ehhandler$??1CPercentPrinterState@@QAE@XZ+16j
UNDEF:00000DC8 ; __fastcall __security_check_cookie(x)
UNDEF:00000DC8                 extrn @__security_check_cookie@4:near
UNDEF:00000DC8                                         ; CODE XREF: CPercentPrinter::GetPercents(void)+129p
UNDEF:00000DC8                                         ; CPercentPrinter::Print(void)+41Ep ...
UNDEF:00000DCC                 extrn __RTC_CheckEsp:near
UNDEF:00000DCC                                         ; CODE XREF: CPercentPrinter::~CPercentPrinter(void)+BAp
UNDEF:00000DCC                                         ; CPercentPrinterState::ClearCurState(void)+5Bp ...
UNDEF:00000DD0                 extrn __RTC_Shutdown:near
UNDEF:00000DD0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000DD4                 extrn __RTC_InitBase:near
UNDEF:00000DD4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000DD8 ; void __cdecl operator delete(void *)
UNDEF:00000DD8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:00000DD8                                         ; UString::~UString(void)+23p
UNDEF:00000DDC ; bool __thiscall CStdOutStream::Flush(CStdOutStream *__hidden this)
UNDEF:00000DDC                 extrn ?Flush@CStdOutStream@@QAE_NXZ:near
UNDEF:00000DDC                                         ; CODE XREF: CPercentPrinter::ClosePrint(bool)+DCp
UNDEF:00000DDC                                         ; CPercentPrinter::Print(void)+3CEp
UNDEF:00000DE0 ; void __thiscall AString::ReAlloc2(AString *__hidden this, unsigned int)
UNDEF:00000DE0                 extrn ?ReAlloc2@AString@@AAEXI@Z:near
UNDEF:00000DE0                                         ; CODE XREF: AString::GetBuf(uint)+20p
UNDEF:00000DE4 ; int __cdecl _fputs(const char *Str, FILE *File)
UNDEF:00000DE4                 extrn __imp__fputs:near ; CODE XREF: CStdOutStream::operator<<(char const *)+1Bp
UNDEF:00000DE4                                         ; DATA XREF: CStdOutStream::operator<<(char const *)+1Br
UNDEF:00000DE8 ; public: class AString & __thiscall AString::operator+=(char const *)
UNDEF:00000DE8                 extrn ??YAString@@QAEAAV0@PBD@Z:near
UNDEF:00000DE8                                         ; CODE XREF: CPercentPrinter::GetPercents(void)+10Cp
UNDEF:00000DE8                                         ; CPercentPrinter::Print(void)+1DAp
UNDEF:00000DEC ; size_t __cdecl strlen(const char *Str)
UNDEF:00000DEC                 extrn _strlen:near      ; CODE XREF: CPercentPrinter::GetPercents(void)+BEp
UNDEF:00000DF0 ; void __stdcall ConvertUInt64ToString(unsigned __int64, char *)
UNDEF:00000DF0                 extrn ?ConvertUInt64ToString@@YGX_KPAD@Z:near
UNDEF:00000DF0                                         ; CODE XREF: CPercentPrinter::GetPercents(void)+B5p
UNDEF:00000DF0                                         ; CPercentPrinter::Print(void)+1BEp
UNDEF:00000DF4 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000DF4                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000DF4                                         ; CODE XREF: CPercentPrinter::GetPercents(void)+11Bp
UNDEF:00000DF4                                         ; CPercentPrinter::Print(void)+410p
UNDEF:00000DF8                 extrn __aulldiv:near    ; CODE XREF: CPercentPrinter::GetPercents(void)+9Ep
UNDEF:00000DFC                 extrn __allmul:near     ; CODE XREF: CPercentPrinter::GetPercents(void)+8Cp
UNDEF:00000E00                 extrn __aullshr:near    ; CODE XREF: CPercentPrinter::GetPercents(void)+59p
UNDEF:00000E04 ; void __thiscall AString::Grow_1(AString *__hidden this)
UNDEF:00000E04                 extrn ?Grow_1@AString@@AAEXXZ:near
UNDEF:00000E04                                         ; CODE XREF: AString::operator+=(char)+2Fp
UNDEF:00000E08 ; void __thiscall UString::Insert(UString *__hidden this, unsigned int, const wchar_t *)
UNDEF:00000E08                 extrn ?Insert@UString@@QAEXIPB_W@Z:near
UNDEF:00000E08                                         ; CODE XREF: CPercentPrinter::Print(void)+312p
UNDEF:00000E0C ; void __thiscall UString::Delete(UString *__hidden this, unsigned int, unsigned int)
UNDEF:00000E0C                 extrn ?Delete@UString@@QAEXII@Z:near
UNDEF:00000E0C                                         ; CODE XREF: CPercentPrinter::Print(void)+2FCp
UNDEF:00000E10 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:00000E10                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:00000E10                                         ; CODE XREF: CPercentPrinter::Print(void)+2DCp
UNDEF:00000E10                                         ; CPercentPrinterState::operator=(CPercentPrinterState const &)+61p
UNDEF:00000E14 ; void __thiscall AString::Replace(AString *__hidden this, char, char)
UNDEF:00000E14                 extrn ?Replace@AString@@QAEXDD@Z:near
UNDEF:00000E14                                         ; CODE XREF: CPercentPrinter::Print(void)+26Ap
UNDEF:00000E18 ; void __stdcall StdOut_Convert_UString_to_AString(const struct UString *, struct AString *)
UNDEF:00000E18                 extrn ?StdOut_Convert_UString_to_AString@@YGXABVUString@@AAVAString@@@Z:near
UNDEF:00000E18                                         ; CODE XREF: CPercentPrinter::Print(void)+25Bp
UNDEF:00000E18                                         ; CPercentPrinter::Print(void)+325p
UNDEF:00000E1C ; public: class AString & __thiscall AString::operator+=(class AString const &)
UNDEF:00000E1C                 extrn ??YAString@@QAEAAV0@ABV0@@Z:near
UNDEF:00000E1C                                         ; CODE XREF: CPercentPrinter::Print(void)+20Bp
UNDEF:00000E1C                                         ; CPercentPrinter::Print(void)+374p
UNDEF:00000E20 ; public: class AString & __thiscall AString::operator=(class AString const &)
UNDEF:00000E20                 extrn ??4AString@@QAEAAV0@ABV0@@Z:near
UNDEF:00000E20                                         ; CODE XREF: CPercentPrinter::Print(void)+196p
UNDEF:00000E20                                         ; CPercentPrinter::Print(void)+3E0p ...
UNDEF:00000E24 ; DWORD __stdcall GetTickCount()
UNDEF:00000E24                 extrn __imp__GetTickCount@0:near
UNDEF:00000E24                                         ; CODE XREF: CPercentPrinter::Print(void)+38p
UNDEF:00000E24                                         ; DATA XREF: CPercentPrinter::Print(void)+38r
UNDEF:00000E28 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00000E28                 extrn _strcmp:near      ; CODE XREF: operator==(AString const &,AString const &)+34p
UNDEF:00000E28                                         ; operator!=(AString const &,AString const &)+34p
UNDEF:00000E2C ; int __cdecl _wcscmp(const wchar_t *Str1, const wchar_t *Str2)
UNDEF:00000E2C                 extrn __imp__wcscmp:near
UNDEF:00000E2C                                         ; CODE XREF: operator==(UString const &,UString const &)+36p
UNDEF:00000E2C                                         ; DATA XREF: operator==(UString const &,UString const &)+36r
UNDEF:00000E2C
UNDEF:00000E2C
UNDEF:00000E2C                 end