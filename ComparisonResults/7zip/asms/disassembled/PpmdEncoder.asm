.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 9D39DCB4095037D1CC5285F489F12651
.rdata:00000000 ; Input CRC32 : 71606F1C
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\PpmdEncoder.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kOrders        db 3                    ; DATA XREF: NCompress::NPpmd::CEncProps::Normalize(int)+D2r
.rdata:00000001                 db    4
.rdata:00000002                 db    4
.rdata:00000003                 db    5
.rdata:00000004                 db    5
.rdata:00000005                 db    6
.rdata:00000006                 db    8
.rdata:00000007                 db  10h
.rdata:00000008                 db  18h
.rdata:00000009                 db  20h
.rdata:0000000A                 align 4
.rdata:0000000A _rdata          ends
.rdata:0000000A
.text:0000000C ; ===========================================================================
.text:0000000C
.text:0000000C ; Segment type: Pure code
.text:0000000C ; Segment permissions: Read/Execute
.text:0000000C _text           segment para public 'CODE' use32
.text:0000000C                 assume cs:_text
.text:0000000C                 ;org 0Ch
.text:0000000C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000000C
.text:0000000C ; =============== S U B R O U T I N E =======================================
.text:0000000C
.text:0000000C ; Attributes: bp-based frame
.text:0000000C
.text:0000000C ; void __thiscall NCompress::NPpmd::CEncProps::Normalize(NCompress::NPpmd::CEncProps *this, int)
.text:0000000C                 public ?Normalize@CEncProps@NPpmd@NCompress@@QAEXH@Z
.text:0000000C ?Normalize@CEncProps@NPpmd@NCompress@@QAEXH@Z proc near
.text:0000000C                                         ; CODE XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+A8p
.text:0000000C                                         ; NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+13Cp
.text:0000000C
.text:0000000C var_14          = dword ptr -14h
.text:0000000C var_10          = dword ptr -10h
.text:0000000C var_C           = dword ptr -0Ch
.text:0000000C var_8           = dword ptr -8
.text:0000000C var_4           = dword ptr -4
.text:0000000C arg_0           = dword ptr  8
.text:0000000C
.text:0000000C                 push    ebp
.text:0000000D                 mov     ebp, esp
.text:0000000F                 sub     esp, 14h
.text:00000012                 mov     eax, 0CCCCCCCCh
.text:00000017                 mov     [ebp+var_14], eax
.text:0000001A                 mov     [ebp+var_10], eax
.text:0000001D                 mov     [ebp+var_C], eax
.text:00000020                 mov     [ebp+var_8], eax
.text:00000023                 mov     [ebp+var_4], eax
.text:00000026                 mov     [ebp+var_4], ecx
.text:00000029                 cmp     [ebp+arg_0], 0
.text:0000002D                 jge     short loc_36
.text:0000002F                 mov     [ebp+arg_0], 5
.text:00000036
.text:00000036 loc_36:                                 ; CODE XREF: NCompress::NPpmd::CEncProps::Normalize(int)+21j
.text:00000036                 cmp     [ebp+arg_0], 9
.text:0000003A                 jle     short loc_43
.text:0000003C                 mov     [ebp+arg_0], 9
.text:00000043
.text:00000043 loc_43:                                 ; CODE XREF: NCompress::NPpmd::CEncProps::Normalize(int)+2Ej
.text:00000043                 mov     eax, [ebp+var_4]
.text:00000046                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:00000049                 jnz     short loc_72
.text:0000004B                 cmp     [ebp+arg_0], 9
.text:0000004F                 jl      short loc_5A
.text:00000051                 mov     [ebp+var_14], 0C000000h
.text:00000058                 jmp     short loc_6A
.text:0000005A ; ---------------------------------------------------------------------------
.text:0000005A
.text:0000005A loc_5A:                                 ; CODE XREF: NCompress::NPpmd::CEncProps::Normalize(int)+43j
.text:0000005A                 mov     ecx, [ebp+arg_0]
.text:0000005D                 add     ecx, 13h
.text:00000060                 mov     edx, 1
.text:00000065                 shl     edx, cl
.text:00000067                 mov     [ebp+var_14], edx
.text:0000006A
.text:0000006A loc_6A:                                 ; CODE XREF: NCompress::NPpmd::CEncProps::Normalize(int)+4Cj
.text:0000006A                 mov     eax, [ebp+var_4]
.text:0000006D                 mov     ecx, [ebp+var_14]
.text:00000070                 mov     [eax], ecx
.text:00000072
.text:00000072 loc_72:                                 ; CODE XREF: NCompress::NPpmd::CEncProps::Normalize(int)+3Dj
.text:00000072                 mov     [ebp+var_8], 10h
.text:00000079                 mov     edx, [ebp+var_4]
.text:0000007C                 mov     eax, [edx]
.text:0000007E                 shr     eax, 4
.text:00000081                 mov     ecx, [ebp+var_4]
.text:00000084                 cmp     eax, [ecx+4]
.text:00000087                 jbe     short loc_D2
.text:00000089                 mov     [ebp+var_C], 10h
.text:00000090                 jmp     short loc_9B
.text:00000092 ; ---------------------------------------------------------------------------
.text:00000092
.text:00000092 loc_92:                                 ; CODE XREF: NCompress::NPpmd::CEncProps::Normalize(int):loc_D0j
.text:00000092                 mov     edx, [ebp+var_C]
.text:00000095                 add     edx, 1
.text:00000098                 mov     [ebp+var_C], edx
.text:0000009B
.text:0000009B loc_9B:                                 ; CODE XREF: NCompress::NPpmd::CEncProps::Normalize(int)+84j
.text:0000009B                 cmp     [ebp+var_C], 1Fh
.text:0000009F                 ja      short loc_D2
.text:000000A1                 mov     eax, 1
.text:000000A6                 mov     ecx, [ebp+var_C]
.text:000000A9                 shl     eax, cl
.text:000000AB                 mov     [ebp+var_10], eax
.text:000000AE                 mov     ecx, [ebp+var_10]
.text:000000B1                 shr     ecx, 4
.text:000000B4                 mov     edx, [ebp+var_4]
.text:000000B7                 cmp     [edx+4], ecx
.text:000000BA                 ja      short loc_D0
.text:000000BC                 mov     eax, [ebp+var_4]
.text:000000BF                 mov     ecx, [eax]
.text:000000C1                 cmp     ecx, [ebp+var_10]
.text:000000C4                 jbe     short loc_CE
.text:000000C6                 mov     edx, [ebp+var_4]
.text:000000C9                 mov     eax, [ebp+var_10]
.text:000000CC                 mov     [edx], eax
.text:000000CE
.text:000000CE loc_CE:                                 ; CODE XREF: NCompress::NPpmd::CEncProps::Normalize(int)+B8j
.text:000000CE                 jmp     short loc_D2
.text:000000D0 ; ---------------------------------------------------------------------------
.text:000000D0
.text:000000D0 loc_D0:                                 ; CODE XREF: NCompress::NPpmd::CEncProps::Normalize(int)+AEj
.text:000000D0                 jmp     short loc_92
.text:000000D2 ; ---------------------------------------------------------------------------
.text:000000D2
.text:000000D2 loc_D2:                                 ; CODE XREF: NCompress::NPpmd::CEncProps::Normalize(int)+7Bj
.text:000000D2                                         ; NCompress::NPpmd::CEncProps::Normalize(int)+93j ...
.text:000000D2                 mov     ecx, [ebp+var_4]
.text:000000D5                 cmp     dword ptr [ecx+8], 0FFFFFFFFh
.text:000000D9                 jnz     short loc_EB
.text:000000DB                 mov     edx, [ebp+arg_0]
.text:000000DE                 movzx   eax, _kOrders[edx]
.text:000000E5                 mov     ecx, [ebp+var_4]
.text:000000E8                 mov     [ecx+8], eax
.text:000000EB
.text:000000EB loc_EB:                                 ; CODE XREF: NCompress::NPpmd::CEncProps::Normalize(int)+CDj
.text:000000EB                 mov     esp, ebp
.text:000000ED                 pop     ebp
.text:000000EE                 retn    4
.text:000000EE ?Normalize@CEncProps@NPpmd@NCompress@@QAEXH@Z endp
.text:000000EE
.text:000000EE ; ---------------------------------------------------------------------------
.text:000000F1                 db 0Bh dup(0CCh)
.text:000000FC
.text:000000FC ; =============== S U B R O U T I N E =======================================
.text:000000FC
.text:000000FC ; Attributes: bp-based frame
.text:000000FC
.text:000000FC ; _DWORD __thiscall NCompress::NPpmd::CEncoder::CEncoder(NCompress::NPpmd::CEncoder *__hidden this)
.text:000000FC                 public ??0CEncoder@NPpmd@NCompress@@QAE@XZ
.text:000000FC ??0CEncoder@NPpmd@NCompress@@QAE@XZ proc near
.text:000000FC
.text:000000FC var_10          = dword ptr -10h
.text:000000FC var_C           = dword ptr -0Ch
.text:000000FC var_4           = dword ptr -4
.text:000000FC
.text:000000FC                 push    ebp
.text:000000FD                 mov     ebp, esp
.text:000000FF                 push    0FFFFFFFFh
.text:00000101                 push    offset __ehhandler$??0CEncoder@NPpmd@NCompress@@QAE@XZ
.text:00000106                 mov     eax, large fs:0
.text:0000010C                 push    eax
.text:0000010D                 push    ecx
.text:0000010E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000115                 mov     eax, dword ptr ds:___security_cookie
.text:0000011A                 xor     eax, ebp
.text:0000011C                 push    eax
.text:0000011D                 lea     eax, [ebp+var_C]
.text:00000120                 mov     large fs:0, eax
.text:00000126                 mov     [ebp+var_10], ecx
.text:00000129                 mov     ecx, [ebp+var_10] ; this
.text:0000012C                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000131                 mov     ecx, [ebp+var_10]
.text:00000134                 add     ecx, 4          ; this
.text:00000137                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:0000013C                 mov     ecx, [ebp+var_10]
.text:0000013F                 add     ecx, 8          ; this
.text:00000142                 call    ??0ICompressWriteCoderProperties@@QAE@XZ ; ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)
.text:00000147                 mov     ecx, [ebp+var_10]
.text:0000014A                 add     ecx, 0Ch        ; this
.text:0000014D                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000152                 mov     eax, [ebp+var_10]
.text:00000155                 mov     dword ptr [eax], offset ??_7CEncoder@NPpmd@NCompress@@6BICompressCoder@@@ ; const NCompress::NPpmd::CEncoder::`vftable'{for `ICompressCoder'}
.text:0000015B                 mov     ecx, [ebp+var_10]
.text:0000015E                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NPpmd@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NPpmd::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000165                 mov     edx, [ebp+var_10]
.text:00000168                 mov     dword ptr [edx+8], offset ??_7CEncoder@NPpmd@NCompress@@6BICompressWriteCoderProperties@@@ ; const NCompress::NPpmd::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.text:0000016F                 mov     eax, [ebp+var_10]
.text:00000172                 mov     dword ptr [eax+10h], 0
.text:00000179                 mov     ecx, [ebp+var_10]
.text:0000017C                 add     ecx, 18h
.text:0000017F                 call    ??0CByteOutBufWrap@@QAE@XZ ; CByteOutBufWrap::CByteOutBufWrap(void)
.text:00000184                 mov     [ebp+var_4], 0
.text:0000018B                 mov     ecx, [ebp+var_10]
.text:0000018E                 add     ecx, 4B2Ch      ; this
.text:00000194                 call    ??0CEncProps@NPpmd@NCompress@@QAE@XZ ; NCompress::NPpmd::CEncProps::CEncProps(void)
.text:00000199                 push    0FFFFFFFFh      ; int
.text:0000019B                 mov     ecx, [ebp+var_10]
.text:0000019E                 add     ecx, 4B2Ch      ; this
.text:000001A4                 call    ?Normalize@CEncProps@NPpmd@NCompress@@QAEXH@Z ; NCompress::NPpmd::CEncProps::Normalize(int)
.text:000001A9                 mov     ecx, [ebp+var_10]
.text:000001AC                 add     ecx, 18h
.text:000001AF                 mov     edx, [ebp+var_10]
.text:000001B2                 mov     [edx+58h], ecx
.text:000001B5                 mov     eax, [ebp+var_10]
.text:000001B8                 add     eax, 60h ; '`'
.text:000001BB                 push    eax
.text:000001BC                 call    _Ppmd7_Construct@4 ; Ppmd7_Construct(x)
.text:000001C1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001C8                 mov     eax, [ebp+var_10]
.text:000001CB                 mov     ecx, [ebp+var_C]
.text:000001CE                 mov     large fs:0, ecx
.text:000001D5                 pop     ecx
.text:000001D6                 add     esp, 10h
.text:000001D9                 cmp     ebp, esp
.text:000001DB                 call    __RTC_CheckEsp
.text:000001E0                 mov     esp, ebp
.text:000001E2                 pop     ebp
.text:000001E3                 retn
.text:000001E3 ??0CEncoder@NPpmd@NCompress@@QAE@XZ endp
.text:000001E3
.text:000001E3 ; ---------------------------------------------------------------------------
.text:000001E4                 db 8 dup(0CCh)
.text:000001EC
.text:000001EC ; =============== S U B R O U T I N E =======================================
.text:000001EC
.text:000001EC ; Attributes: bp-based frame
.text:000001EC
.text:000001EC ; _DWORD __thiscall NCompress::NPpmd::CEncoder::~CEncoder(NCompress::NPpmd::CEncoder *__hidden this)
.text:000001EC                 public ??1CEncoder@NPpmd@NCompress@@QAE@XZ
.text:000001EC ??1CEncoder@NPpmd@NCompress@@QAE@XZ proc near
.text:000001EC                                         ; CODE XREF: NCompress::NPpmd::CEncoder::`scalar deleting destructor'(uint)+11p
.text:000001EC
.text:000001EC var_4           = dword ptr -4
.text:000001EC
.text:000001EC                 push    ebp
.text:000001ED                 mov     ebp, esp
.text:000001EF                 push    ecx
.text:000001F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001F7                 mov     [ebp+var_4], ecx
.text:000001FA                 mov     eax, [ebp+var_4]
.text:000001FD                 mov     dword ptr [eax], offset ??_7CEncoder@NPpmd@NCompress@@6BICompressCoder@@@ ; const NCompress::NPpmd::CEncoder::`vftable'{for `ICompressCoder'}
.text:00000203                 mov     ecx, [ebp+var_4]
.text:00000206                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NPpmd@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NPpmd::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:0000020D                 mov     edx, [ebp+var_4]
.text:00000210                 mov     dword ptr [edx+8], offset ??_7CEncoder@NPpmd@NCompress@@6BICompressWriteCoderProperties@@@ ; const NCompress::NPpmd::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.text:00000217                 mov     eax, [ebp+var_4]
.text:0000021A                 mov     ecx, [eax+10h]
.text:0000021D                 push    ecx
.text:0000021E                 call    _MidFree@4      ; MidFree(x)
.text:00000223                 push    offset _g_BigAlloc
.text:00000228                 mov     edx, [ebp+var_4]
.text:0000022B                 add     edx, 60h ; '`'
.text:0000022E                 push    edx
.text:0000022F                 call    _Ppmd7_Free@8   ; Ppmd7_Free(x,x)
.text:00000234                 mov     ecx, [ebp+var_4]
.text:00000237                 add     ecx, 18h        ; this
.text:0000023A                 call    ??1CByteOutBufWrap@@QAE@XZ ; CByteOutBufWrap::~CByteOutBufWrap(void)
.text:0000023F                 add     esp, 4
.text:00000242                 cmp     ebp, esp
.text:00000244                 call    __RTC_CheckEsp
.text:00000249                 mov     esp, ebp
.text:0000024B                 pop     ebp
.text:0000024C                 retn
.text:0000024C ??1CEncoder@NPpmd@NCompress@@QAE@XZ endp
.text:0000024C
.text:0000024C ; ---------------------------------------------------------------------------
.text:0000024D                 db 0Fh dup(0CCh)
.text:0000025C
.text:0000025C ; =============== S U B R O U T I N E =======================================
.text:0000025C
.text:0000025C ; Attributes: bp-based frame
.text:0000025C
.text:0000025C ; __int32 __stdcall NCompress::NPpmd::CEncoder::SetCoderProperties(NCompress::NPpmd::CEncoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:0000025C                 public ?SetCoderProperties@CEncoder@NPpmd@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:0000025C ?SetCoderProperties@CEncoder@NPpmd@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:0000025C                                         ; DATA XREF: .rdata:00000750o
.text:0000025C
.text:0000025C var_30          = dword ptr -30h
.text:0000025C var_2C          = dword ptr -2Ch
.text:0000025C var_28          = dword ptr -28h
.text:0000025C var_24          = dword ptr -24h
.text:0000025C var_20          = dword ptr -20h
.text:0000025C var_1C          = dword ptr -1Ch
.text:0000025C var_14          = dword ptr -14h
.text:0000025C var_10          = dword ptr -10h
.text:0000025C var_C           = dword ptr -0Ch
.text:0000025C var_4           = dword ptr -4
.text:0000025C this            = dword ptr  8
.text:0000025C arg_4           = dword ptr  0Ch
.text:0000025C arg_8           = dword ptr  10h
.text:0000025C arg_C           = dword ptr  14h
.text:0000025C
.text:0000025C                 push    ebp
.text:0000025D                 mov     ebp, esp
.text:0000025F                 sub     esp, 30h
.text:00000262                 push    edi
.text:00000263                 lea     edi, [ebp+var_30]
.text:00000266                 mov     ecx, 0Ch
.text:0000026B                 mov     eax, 0CCCCCCCCh
.text:00000270                 rep stosd
.text:00000272                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000279                 lea     ecx, [ebp+var_14] ; this
.text:0000027C                 call    ??0CEncProps@NPpmd@NCompress@@QAE@XZ ; NCompress::NPpmd::CEncProps::CEncProps(void)
.text:00000281                 mov     [ebp+var_1C], 0
.text:00000288                 jmp     short loc_293
.text:0000028A ; ---------------------------------------------------------------------------
.text:0000028A
.text:0000028A loc_28A:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+61j
.text:0000028A                                         ; NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_2F3j ...
.text:0000028A                 mov     eax, [ebp+var_1C]
.text:0000028D                 add     eax, 1
.text:00000290                 mov     [ebp+var_1C], eax
.text:00000293
.text:00000293 loc_293:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+2Cj
.text:00000293                 mov     ecx, [ebp+var_1C]
.text:00000296                 cmp     ecx, [ebp+arg_C]
.text:00000299                 jnb     loc_391
.text:0000029F                 mov     edx, [ebp+var_1C]
.text:000002A2                 shl     edx, 4
.text:000002A5                 add     edx, [ebp+arg_8]
.text:000002A8                 mov     [ebp+var_20], edx
.text:000002AB                 mov     eax, [ebp+var_1C]
.text:000002AE                 mov     ecx, [ebp+arg_4]
.text:000002B1                 mov     edx, [ecx+eax*4]
.text:000002B4                 mov     [ebp+var_24], edx
.text:000002B7                 cmp     [ebp+var_24], 10h
.text:000002BB                 jbe     short loc_2BF
.text:000002BD                 jmp     short loc_28A
.text:000002BF ; ---------------------------------------------------------------------------
.text:000002BF
.text:000002BF loc_2BF:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+5Fj
.text:000002BF                 cmp     [ebp+var_24], 10h
.text:000002C3                 jnz     short loc_2F5
.text:000002C5                 mov     eax, [ebp+var_20]
.text:000002C8                 movzx   ecx, word ptr [eax]
.text:000002CB                 cmp     ecx, 15h
.text:000002CE                 jnz     short loc_2F3
.text:000002D0                 mov     edx, [ebp+var_20]
.text:000002D3                 mov     [ebp+var_2C], edx
.text:000002D6                 mov     eax, [ebp+var_2C]
.text:000002D9                 cmp     dword ptr [eax+0Ch], 0
.text:000002DD                 ja      short loc_2F3
.text:000002DF                 jb      short loc_2EA
.text:000002E1                 mov     ecx, [ebp+var_2C]
.text:000002E4                 cmp     dword ptr [ecx+8], 0FFFFFFFFh
.text:000002E8                 jnb     short loc_2F3
.text:000002EA
.text:000002EA loc_2EA:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+83j
.text:000002EA                 mov     edx, [ebp+var_20]
.text:000002ED                 mov     eax, [edx+8]
.text:000002F0                 mov     [ebp+var_10], eax
.text:000002F3
.text:000002F3 loc_2F3:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+72j
.text:000002F3                                         ; NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+81j ...
.text:000002F3                 jmp     short loc_28A
.text:000002F5 ; ---------------------------------------------------------------------------
.text:000002F5
.text:000002F5 loc_2F5:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+67j
.text:000002F5                 mov     ecx, [ebp+var_20]
.text:000002F8                 movzx   edx, word ptr [ecx]
.text:000002FB                 cmp     edx, 13h
.text:000002FE                 jz      short loc_30A
.text:00000300                 mov     eax, 80070057h
.text:00000305                 jmp     loc_3B9
.text:0000030A ; ---------------------------------------------------------------------------
.text:0000030A
.text:0000030A loc_30A:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A2j
.text:0000030A                 mov     eax, [ebp+var_20]
.text:0000030D                 mov     ecx, [eax+8]
.text:00000310                 mov     [ebp+var_28], ecx
.text:00000313                 mov     edx, [ebp+var_24]
.text:00000316                 mov     [ebp+var_30], edx
.text:00000319                 mov     eax, [ebp+var_30]
.text:0000031C                 sub     eax, 2
.text:0000031F                 mov     [ebp+var_30], eax
.text:00000322                 cmp     [ebp+var_30], 0Dh ; switch 14 cases
.text:00000326                 ja      short $LN1      ; jumptable 00000332 default case
.text:00000328                 mov     ecx, [ebp+var_30]
.text:0000032B                 movzx   edx, ds:$LN22[ecx]
.text:00000332                 jmp     ds:$LN26[edx*4] ; switch jump
.text:00000339 ; ---------------------------------------------------------------------------
.text:00000339
.text:00000339 $LN9:                                   ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6j
.text:00000339                                         ; DATA XREF: .text:$LN26o
.text:00000339                 cmp     [ebp+var_28], 10000h ; jumptable 00000332 case 0
.text:00000340                 jb      short loc_350
.text:00000342                 cmp     [ebp+var_28], 0FFFFFFDBh
.text:00000346                 ja      short loc_350
.text:00000348                 mov     eax, [ebp+var_28]
.text:0000034B                 and     eax, 3
.text:0000034E                 jz      short loc_357
.text:00000350
.text:00000350 loc_350:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+E4j
.text:00000350                                         ; NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+EAj
.text:00000350                 mov     eax, 80070057h
.text:00000355                 jmp     short loc_3B9
.text:00000357 ; ---------------------------------------------------------------------------
.text:00000357
.text:00000357 loc_357:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+F2j
.text:00000357                 mov     ecx, [ebp+var_28]
.text:0000035A                 mov     [ebp+var_14], ecx
.text:0000035D                 jmp     short loc_38C
.text:0000035F ; ---------------------------------------------------------------------------
.text:0000035F
.text:0000035F $LN6:                                   ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6j
.text:0000035F                                         ; DATA XREF: .text:$LN26o
.text:0000035F                 cmp     [ebp+var_28], 2 ; jumptable 00000332 case 1
.text:00000363                 jb      short loc_36B
.text:00000365                 cmp     [ebp+var_28], 20h ; ' '
.text:00000369                 jbe     short loc_372
.text:0000036B
.text:0000036B loc_36B:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+107j
.text:0000036B                 mov     eax, 80070057h
.text:00000370                 jmp     short loc_3B9
.text:00000372 ; ---------------------------------------------------------------------------
.text:00000372
.text:00000372 loc_372:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+10Dj
.text:00000372                 movzx   edx, byte ptr [ebp+var_28]
.text:00000376                 mov     [ebp+var_C], edx
.text:00000379                 jmp     short loc_38C
.text:0000037B ; ---------------------------------------------------------------------------
.text:0000037B
.text:0000037B $LN3:                                   ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6j
.text:0000037B                                         ; DATA XREF: .text:$LN26o
.text:0000037B                 jmp     short loc_38C   ; jumptable 00000332 case 11
.text:0000037D ; ---------------------------------------------------------------------------
.text:0000037D
.text:0000037D $LN2:                                   ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6j
.text:0000037D                                         ; DATA XREF: .text:$LN26o
.text:0000037D                 mov     eax, [ebp+var_28] ; jumptable 00000332 case 13
.text:00000380                 mov     [ebp+var_4], eax
.text:00000383                 jmp     short loc_38C
.text:00000385 ; ---------------------------------------------------------------------------
.text:00000385
.text:00000385 $LN1:                                   ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+CAj
.text:00000385                                         ; NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6j
.text:00000385                                         ; DATA XREF: ...
.text:00000385                 mov     eax, 80070057h  ; jumptable 00000332 default case
.text:0000038A                 jmp     short loc_3B9
.text:0000038C ; ---------------------------------------------------------------------------
.text:0000038C
.text:0000038C loc_38C:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+101j
.text:0000038C                                         ; NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+11Dj ...
.text:0000038C                 jmp     loc_28A
.text:00000391 ; ---------------------------------------------------------------------------
.text:00000391
.text:00000391 loc_391:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+3Dj
.text:00000391                 mov     ecx, [ebp+var_4]
.text:00000394                 push    ecx             ; int
.text:00000395                 lea     ecx, [ebp+var_14] ; this
.text:00000398                 call    ?Normalize@CEncProps@NPpmd@NCompress@@QAEXH@Z ; NCompress::NPpmd::CEncProps::Normalize(int)
.text:0000039D                 mov     edx, [ebp+this]
.text:000003A0                 add     edx, 4B28h
.text:000003A6                 mov     eax, [ebp+var_14]
.text:000003A9                 mov     [edx], eax
.text:000003AB                 mov     ecx, [ebp+var_10]
.text:000003AE                 mov     [edx+4], ecx
.text:000003B1                 mov     eax, [ebp+var_C]
.text:000003B4                 mov     [edx+8], eax
.text:000003B7                 xor     eax, eax
.text:000003B9
.text:000003B9 loc_3B9:                                ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A9j
.text:000003B9                                         ; NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+F9j ...
.text:000003B9                 push    edx
.text:000003BA                 mov     ecx, ebp
.text:000003BC                 push    eax
.text:000003BD                 lea     edx, $LN25
.text:000003C3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003C8                 pop     eax
.text:000003C9                 pop     edx
.text:000003CA                 pop     edi
.text:000003CB                 add     esp, 30h
.text:000003CE                 cmp     ebp, esp
.text:000003D0                 call    __RTC_CheckEsp
.text:000003D5                 mov     esp, ebp
.text:000003D7                 pop     ebp
.text:000003D8                 retn    10h
.text:000003D8 ?SetCoderProperties@CEncoder@NPpmd@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:000003D8
.text:000003D8 ; ---------------------------------------------------------------------------
.text:000003DB                 align 4
.text:000003DC $LN25           dd 1                    ; DATA XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+161o
.text:000003E0                 dd offset $LN24
.text:000003E4 $LN24           dd 0FFFFFFECh, 0Ch      ; DATA XREF: .text:000003E0o
.text:000003EC                 dd offset $LN23         ; "props"
.text:000003F0 $LN23           db 'props',0            ; DATA XREF: .text:000003ECo
.text:000003F6                 align 4
.text:000003F8 $LN26           dd offset $LN9          ; DATA XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6r
.text:000003F8                 dd offset $LN6          ; jump table for switch statement
.text:000003F8                 dd offset $LN3
.text:000003F8                 dd offset $LN2
.text:000003F8                 dd offset $LN1
.text:0000040C $LN22           db      0,     1,     4,     4
.text:0000040C                                         ; DATA XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+CFr
.text:0000040C                 db      4,     4,     4,     4 ; indirect table for switch statement
.text:0000040C                 db      4,     4,     4,     2
.text:0000040C                 db      4,     3
.text:0000041A                 align 4
.text:0000041C
.text:0000041C ; =============== S U B R O U T I N E =======================================
.text:0000041C
.text:0000041C ; Attributes: bp-based frame
.text:0000041C
.text:0000041C ; __int32 __stdcall NCompress::NPpmd::CEncoder::WriteCoderProperties(NCompress::NPpmd::CEncoder *this, struct ISequentialOutStream *)
.text:0000041C                 public ?WriteCoderProperties@CEncoder@NPpmd@NCompress@@UAGJPAUISequentialOutStream@@@Z
.text:0000041C ?WriteCoderProperties@CEncoder@NPpmd@NCompress@@UAGJPAUISequentialOutStream@@@Z proc near
.text:0000041C                                         ; DATA XREF: .rdata:0000073Co
.text:0000041C
.text:0000041C var_18          = dword ptr -18h
.text:0000041C var_14          = dword ptr -14h
.text:0000041C var_10          = dword ptr -10h
.text:0000041C var_C           = dword ptr -0Ch
.text:0000041C var_8           = dword ptr -8
.text:0000041C var_4           = dword ptr -4
.text:0000041C this            = dword ptr  8
.text:0000041C arg_4           = dword ptr  0Ch
.text:0000041C
.text:0000041C                 push    ebp
.text:0000041D                 mov     ebp, esp
.text:0000041F                 sub     esp, 18h
.text:00000422                 mov     eax, 0CCCCCCCCh
.text:00000427                 mov     [ebp+var_18], eax
.text:0000042A                 mov     [ebp+var_14], eax
.text:0000042D                 mov     [ebp+var_10], eax
.text:00000430                 mov     [ebp+var_C], eax
.text:00000433                 mov     [ebp+var_8], eax
.text:00000436                 mov     [ebp+var_4], eax
.text:00000439                 mov     eax, dword ptr ds:___security_cookie
.text:0000043E                 xor     eax, ebp
.text:00000440                 mov     [ebp+var_4], eax
.text:00000443                 mov     [ebp+var_8], 5
.text:0000044A                 mov     eax, [ebp+this]
.text:0000044D                 mov     cl, [eax+4B2Ch]
.text:00000453                 mov     byte ptr [ebp+var_14], cl
.text:00000456                 mov     edx, [ebp+this]
.text:00000459                 mov     eax, [edx+4B24h]
.text:0000045F                 mov     [ebp+var_14+1], eax
.text:00000462                 push    5               ; unsigned int
.text:00000464                 lea     ecx, [ebp+var_14]
.text:00000467                 push    ecx             ; void *
.text:00000468                 mov     edx, [ebp+arg_4]
.text:0000046B                 push    edx             ; struct ISequentialOutStream *
.text:0000046C                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00000471                 push    edx
.text:00000472                 mov     ecx, ebp
.text:00000474                 push    eax
.text:00000475                 lea     edx, $LN5
.text:0000047B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000480                 pop     eax
.text:00000481                 pop     edx
.text:00000482                 mov     ecx, [ebp+var_4]
.text:00000485                 xor     ecx, ebp
.text:00000487                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000048C                 add     esp, 18h
.text:0000048F                 cmp     ebp, esp
.text:00000491                 call    __RTC_CheckEsp
.text:00000496                 mov     esp, ebp
.text:00000498                 pop     ebp
.text:00000499                 retn    8
.text:00000499 ?WriteCoderProperties@CEncoder@NPpmd@NCompress@@UAGJPAUISequentialOutStream@@@Z endp
.text:00000499
.text:00000499 ; ---------------------------------------------------------------------------
.text:0000049C $LN5            dd 1                    ; DATA XREF: NCompress::NPpmd::CEncoder::WriteCoderProperties(ISequentialOutStream *)+59o
.text:000004A0                 dd offset $LN4
.text:000004A4 $LN4            dd 0FFFFFFECh, 5        ; DATA XREF: .text:000004A0o
.text:000004AC                 dd offset $LN3_0        ; "props"
.text:000004B0 $LN3_0          db 'props',0            ; DATA XREF: .text:000004ACo
.text:000004B6                 db 6 dup(0CCh)
.text:000004BC
.text:000004BC ; =============== S U B R O U T I N E =======================================
.text:000004BC
.text:000004BC ; Attributes: bp-based frame
.text:000004BC
.text:000004BC ; __int32 __stdcall NCompress::NPpmd::CEncoder::Code(NCompress::NPpmd::CEncoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:000004BC                 public ?Code@CEncoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000004BC ?Code@CEncoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:000004BC                                         ; DATA XREF: .rdata:00000764o
.text:000004BC
.text:000004BC var_3C          = dword ptr -3Ch
.text:000004BC var_34          = dword ptr -34h
.text:000004BC var_30          = dword ptr -30h
.text:000004BC var_28          = dword ptr -28h
.text:000004BC var_24          = dword ptr -24h
.text:000004BC var_20          = dword ptr -20h
.text:000004BC var_18          = dword ptr -18h
.text:000004BC var_C           = dword ptr -0Ch
.text:000004BC var_8           = dword ptr -8
.text:000004BC this            = dword ptr  8
.text:000004BC arg_4           = dword ptr  0Ch
.text:000004BC arg_8           = dword ptr  10h
.text:000004BC arg_14          = dword ptr  1Ch
.text:000004BC
.text:000004BC                 push    ebp
.text:000004BD                 mov     ebp, esp
.text:000004BF                 sub     esp, 3Ch
.text:000004C2                 push    esi
.text:000004C3                 push    edi
.text:000004C4                 lea     edi, [ebp+var_3C]
.text:000004C7                 mov     ecx, 0Fh
.text:000004CC                 mov     eax, 0CCCCCCCCh
.text:000004D1                 rep stosd
.text:000004D3                 mov     eax, [ebp+this]
.text:000004D6                 cmp     dword ptr [eax+10h], 0
.text:000004DA                 jnz     short loc_4FF
.text:000004DC                 push    100000h
.text:000004E1                 call    _MidAlloc@4     ; MidAlloc(x)
.text:000004E6                 mov     ecx, [ebp+this]
.text:000004E9                 mov     [ecx+10h], eax
.text:000004EC                 mov     edx, [ebp+this]
.text:000004EF                 cmp     dword ptr [edx+10h], 0
.text:000004F3                 jnz     short loc_4FF
.text:000004F5                 mov     eax, 8007000Eh
.text:000004FA                 jmp     loc_692
.text:000004FF ; ---------------------------------------------------------------------------
.text:000004FF
.text:000004FF loc_4FF:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1Ej
.text:000004FF                                         ; NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+37j
.text:000004FF                 push    100000h         ; unsigned int
.text:00000504                 mov     ecx, [ebp+this]
.text:00000507                 add     ecx, 18h        ; this
.text:0000050A                 call    ?Alloc@CByteOutBufWrap@@QAE_NI@Z ; CByteOutBufWrap::Alloc(uint)
.text:0000050F                 movzx   eax, al
.text:00000512                 test    eax, eax
.text:00000514                 jnz     short loc_520
.text:00000516                 mov     eax, 8007000Eh
.text:0000051B                 jmp     loc_692
.text:00000520 ; ---------------------------------------------------------------------------
.text:00000520
.text:00000520 loc_520:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+58j
.text:00000520                 push    offset _g_BigAlloc
.text:00000525                 mov     ecx, [ebp+this]
.text:00000528                 mov     edx, [ecx+4B2Ch]
.text:0000052E                 push    edx
.text:0000052F                 mov     eax, [ebp+this]
.text:00000532                 add     eax, 60h ; '`'
.text:00000535                 push    eax
.text:00000536                 call    _Ppmd7_Alloc@12 ; Ppmd7_Alloc(x,x,x)
.text:0000053B                 test    eax, eax
.text:0000053D                 jnz     short loc_549
.text:0000053F                 mov     eax, 8007000Eh
.text:00000544                 jmp     loc_692
.text:00000549 ; ---------------------------------------------------------------------------
.text:00000549
.text:00000549 loc_549:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+81j
.text:00000549                 mov     ecx, [ebp+this]
.text:0000054C                 mov     edx, [ebp+arg_8]
.text:0000054F                 mov     [ecx+2Ch], edx
.text:00000552                 mov     ecx, [ebp+this]
.text:00000555                 add     ecx, 18h        ; this
.text:00000558                 call    ?Init@CByteOutBufWrap@@QAEXXZ ; CByteOutBufWrap::Init(void)
.text:0000055D                 mov     eax, [ebp+this]
.text:00000560                 add     eax, 40h ; '@'
.text:00000563                 push    eax
.text:00000564                 call    _Ppmd7z_RangeEnc_Init@4 ; Ppmd7z_RangeEnc_Init(x)
.text:00000569                 mov     ecx, [ebp+this]
.text:0000056C                 mov     edx, [ecx+4B34h]
.text:00000572                 push    edx
.text:00000573                 mov     eax, [ebp+this]
.text:00000576                 add     eax, 60h ; '`'
.text:00000579                 push    eax
.text:0000057A                 call    _Ppmd7_Init@8   ; Ppmd7_Init(x,x)
.text:0000057F                 mov     [ebp+var_C], 0
.text:00000586                 mov     [ebp+var_8], 0
.text:0000058D
.text:0000058D loc_58D:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_68Dj
.text:0000058D                 mov     esi, esp
.text:0000058F                 lea     ecx, [ebp+var_18]
.text:00000592                 push    ecx
.text:00000593                 push    100000h
.text:00000598                 mov     edx, [ebp+this]
.text:0000059B                 mov     eax, [edx+10h]
.text:0000059E                 push    eax
.text:0000059F                 mov     ecx, [ebp+arg_4]
.text:000005A2                 mov     edx, [ecx]
.text:000005A4                 mov     eax, [ebp+arg_4]
.text:000005A7                 push    eax
.text:000005A8                 mov     ecx, [edx+0Ch]
.text:000005AB                 call    ecx
.text:000005AD                 cmp     esi, esp
.text:000005AF                 call    __RTC_CheckEsp
.text:000005B4                 mov     [ebp+var_20], eax
.text:000005B7                 cmp     [ebp+var_20], 0
.text:000005BB                 jz      short loc_5C5
.text:000005BD                 mov     eax, [ebp+var_20]
.text:000005C0                 jmp     loc_692
.text:000005C5 ; ---------------------------------------------------------------------------
.text:000005C5
.text:000005C5 loc_5C5:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+FFj
.text:000005C5                 cmp     [ebp+var_18], 0
.text:000005C9                 jnz     short loc_5E7
.text:000005CB                 mov     edx, [ebp+this]
.text:000005CE                 add     edx, 40h ; '@'
.text:000005D1                 push    edx
.text:000005D2                 call    _Ppmd7z_RangeEnc_FlushData@4 ; Ppmd7z_RangeEnc_FlushData(x)
.text:000005D7                 mov     ecx, [ebp+this]
.text:000005DA                 add     ecx, 18h        ; this
.text:000005DD                 call    ?Flush@CByteOutBufWrap@@QAEJXZ ; CByteOutBufWrap::Flush(void)
.text:000005E2                 jmp     loc_692
.text:000005E7 ; ---------------------------------------------------------------------------
.text:000005E7
.text:000005E7 loc_5E7:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+10Dj
.text:000005E7                 mov     [ebp+var_24], 0
.text:000005EE                 jmp     short loc_5F9
.text:000005F0 ; ---------------------------------------------------------------------------
.text:000005F0
.text:000005F0 loc_5F0:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_636j
.text:000005F0                 mov     eax, [ebp+var_24]
.text:000005F3                 add     eax, 1
.text:000005F6                 mov     [ebp+var_24], eax
.text:000005F9
.text:000005F9 loc_5F9:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+132j
.text:000005F9                 mov     ecx, [ebp+var_24]
.text:000005FC                 cmp     ecx, [ebp+var_18]
.text:000005FF                 jnb     short loc_638
.text:00000601                 mov     edx, [ebp+this]
.text:00000604                 mov     eax, [edx+10h]
.text:00000607                 mov     ecx, [ebp+var_24]
.text:0000060A                 movzx   edx, byte ptr [eax+ecx]
.text:0000060E                 push    edx
.text:0000060F                 mov     eax, [ebp+this]
.text:00000612                 add     eax, 40h ; '@'
.text:00000615                 push    eax
.text:00000616                 mov     ecx, [ebp+this]
.text:00000619                 add     ecx, 60h ; '`'
.text:0000061C                 push    ecx
.text:0000061D                 call    _Ppmd7_EncodeSymbol@12 ; Ppmd7_EncodeSymbol(x,x,x)
.text:00000622                 mov     edx, [ebp+this]
.text:00000625                 mov     eax, [edx+38h]
.text:00000628                 mov     [ebp+var_28], eax
.text:0000062B                 cmp     [ebp+var_28], 0
.text:0000062F                 jz      short loc_636
.text:00000631                 mov     eax, [ebp+var_28]
.text:00000634                 jmp     short loc_692
.text:00000636 ; ---------------------------------------------------------------------------
.text:00000636
.text:00000636 loc_636:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+173j
.text:00000636                 jmp     short loc_5F0
.text:00000638 ; ---------------------------------------------------------------------------
.text:00000638
.text:00000638 loc_638:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+143j
.text:00000638                 mov     ecx, [ebp+var_18]
.text:0000063B                 xor     edx, edx
.text:0000063D                 add     ecx, [ebp+var_C]
.text:00000640                 adc     edx, [ebp+var_8]
.text:00000643                 mov     [ebp+var_C], ecx
.text:00000646                 mov     [ebp+var_8], edx
.text:00000649                 cmp     [ebp+arg_14], 0
.text:0000064D                 jz      short loc_68D
.text:0000064F                 mov     ecx, [ebp+this]
.text:00000652                 add     ecx, 18h        ; this
.text:00000655                 call    ?GetProcessed@CByteOutBufWrap@@QBE_KXZ ; CByteOutBufWrap::GetProcessed(void)
.text:0000065A                 mov     [ebp+var_34], eax
.text:0000065D                 mov     [ebp+var_30], edx
.text:00000660                 mov     esi, esp
.text:00000662                 lea     eax, [ebp+var_34]
.text:00000665                 push    eax
.text:00000666                 lea     ecx, [ebp+var_C]
.text:00000669                 push    ecx
.text:0000066A                 mov     edx, [ebp+arg_14]
.text:0000066D                 mov     eax, [edx]
.text:0000066F                 mov     ecx, [ebp+arg_14]
.text:00000672                 push    ecx
.text:00000673                 mov     edx, [eax+0Ch]
.text:00000676                 call    edx
.text:00000678                 cmp     esi, esp
.text:0000067A                 call    __RTC_CheckEsp
.text:0000067F                 mov     [ebp+var_3C], eax
.text:00000682                 cmp     [ebp+var_3C], 0
.text:00000686                 jz      short loc_68D
.text:00000688                 mov     eax, [ebp+var_3C]
.text:0000068B                 jmp     short loc_692
.text:0000068D ; ---------------------------------------------------------------------------
.text:0000068D
.text:0000068D loc_68D:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+191j
.text:0000068D                                         ; NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1CAj
.text:0000068D                 jmp     loc_58D
.text:00000692 ; ---------------------------------------------------------------------------
.text:00000692
.text:00000692 loc_692:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Ej
.text:00000692                                         ; NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5Fj ...
.text:00000692                 push    edx
.text:00000693                 mov     ecx, ebp
.text:00000695                 push    eax
.text:00000696                 lea     edx, $LN21
.text:0000069C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000006A1                 pop     eax
.text:000006A2                 pop     edx
.text:000006A3                 pop     edi
.text:000006A4                 pop     esi
.text:000006A5                 add     esp, 3Ch
.text:000006A8                 cmp     ebp, esp
.text:000006AA                 call    __RTC_CheckEsp
.text:000006AF                 mov     esp, ebp
.text:000006B1                 pop     ebp
.text:000006B2                 retn    18h
.text:000006B2 ?Code@CEncoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:000006B2
.text:000006B2 ; ---------------------------------------------------------------------------
.text:000006B5                 align 4
.text:000006B8 $LN21           dd 3                    ; DATA XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1DAo
.text:000006BC                 dd offset $LN20
.text:000006C0 $LN20           dd 0FFFFFFF4h, 8        ; DATA XREF: .text:000006BCo
.text:000006C8                 dd offset $LN17         ; "processed"
.text:000006CC                 dd 0FFFFFFE8h, 4
.text:000006D4                 dd offset $LN18         ; "size"
.text:000006D8                 db 0CCh
.text:000006D9                 db 3 dup(0FFh)
.text:000006DC                 dd 8
.text:000006E0                 dd offset $LN19         ; "outSize"
.text:000006E4 $LN19           db 'outSize',0          ; DATA XREF: .text:000006E0o
.text:000006EC $LN18           db 'size',0             ; DATA XREF: .text:000006D4o
.text:000006F1 $LN17           db 'processed',0        ; DATA XREF: .text:000006C8o
.text:000006FB                 align 4
.text:000006FB _text           ends
.text:000006FB
.rtc$TMZ:000006FC ; ===========================================================================
.rtc$TMZ:000006FC
.rtc$TMZ:000006FC ; Segment type: Pure data
.rtc$TMZ:000006FC ; Segment permissions: Read
.rtc$TMZ:000006FC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000006FC                 assume cs:_rtc$TMZ
.rtc$TMZ:000006FC                 ;org 6FCh
.rtc$TMZ:000006FC ; COMDAT (pick any)
.rtc$TMZ:000006FC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000006FC _rtc$TMZ        ends
.rtc$TMZ:000006FC
.rtc$IMZ:00000700 ; ===========================================================================
.rtc$IMZ:00000700
.rtc$IMZ:00000700 ; Segment type: Pure data
.rtc$IMZ:00000700 ; Segment permissions: Read
.rtc$IMZ:00000700 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000700                 assume cs:_rtc$IMZ
.rtc$IMZ:00000700                 ;org 700h
.rtc$IMZ:00000700 ; COMDAT (pick any)
.rtc$IMZ:00000700 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000700 _rtc$IMZ        ends
.rtc$IMZ:00000700
.text$x:00000704 ; ===========================================================================
.text$x:00000704
.text$x:00000704 ; Segment type: Pure code
.text$x:00000704 ; Segment permissions: Read/Execute
.text$x:00000704 _text$x         segment para public 'CODE' use32
.text$x:00000704                 assume cs:_text$x
.text$x:00000704                 ;org 704h
.text$x:00000704                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000704
.text$x:00000704 ; =============== S U B R O U T I N E =======================================
.text$x:00000704
.text$x:00000704
.text$x:00000704 __unwindfunclet$??0CEncoder@NPpmd@NCompress@@QAE@XZ$0 proc near
.text$x:00000704                                         ; DATA XREF: .xdata$x:0000076Co
.text$x:00000704                 mov     ecx, [ebp-10h]
.text$x:00000707                 add     ecx, 18h        ; this
.text$x:0000070A                 jmp     ??1CByteOutBufWrap@@QAE@XZ ; CByteOutBufWrap::~CByteOutBufWrap(void)
.text$x:0000070A __unwindfunclet$??0CEncoder@NPpmd@NCompress@@QAE@XZ$0 endp
.text$x:0000070A
.text$x:0000070F
.text$x:0000070F ; =============== S U B R O U T I N E =======================================
.text$x:0000070F
.text$x:0000070F
.text$x:0000070F __ehhandler$??0CEncoder@NPpmd@NCompress@@QAE@XZ proc near
.text$x:0000070F                                         ; DATA XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+5o
.text$x:0000070F
.text$x:0000070F arg_4           = dword ptr  8
.text$x:0000070F
.text$x:0000070F                 mov     edx, [esp+arg_4]
.text$x:00000713                 lea     eax, [edx+0Ch]
.text$x:00000716                 mov     ecx, [edx-8]
.text$x:00000719                 xor     ecx, eax
.text$x:0000071B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000720                 mov     eax, offset __ehfuncinfo$??0CEncoder@NPpmd@NCompress@@QAE@XZ
.text$x:00000725                 jmp     ___CxxFrameHandler3
.text$x:00000725 __ehhandler$??0CEncoder@NPpmd@NCompress@@QAE@XZ endp
.text$x:00000725
.text$x:00000725 ; ---------------------------------------------------------------------------
.text$x:0000072A                 align 4
.text$x:0000072A _text$x         ends
.text$x:0000072A
.rdata:0000072C ; ===========================================================================
.rdata:0000072C
.rdata:0000072C ; Segment type: Pure data
.rdata:0000072C ; Segment permissions: Read
.rdata:0000072C _rdata          segment dword public 'DATA' use32
.rdata:0000072C                 assume cs:_rdata
.rdata:0000072C                 ;org 72Ch
.rdata:0000072C ; COMDAT (pick largest)
.rdata:0000072C                 dd offset ??_R4CEncoder@NPpmd@NCompress@@6BICompressWriteCoderProperties@@@ ; const NCompress::NPpmd::CEncoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata:00000730                 public ??_7CEncoder@NPpmd@NCompress@@6BICompressWriteCoderProperties@@@
.rdata:00000730 ; const NCompress::NPpmd::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.rdata:00000730 ??_7CEncoder@NPpmd@NCompress@@6BICompressWriteCoderProperties@@@ dd offset ?QueryInterface@CEncoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000730                                         ; DATA XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+6Co
.rdata:00000730                                         ; NCompress::NPpmd::CEncoder::~CEncoder(void)+24o
.rdata:00000730                                         ; [thunk]:NCompress::NPpmd::CEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000734                 dd offset ?AddRef@CEncoder@NPpmd@NCompress@@W7AGKXZ ; [thunk]:NCompress::NPpmd::CEncoder::AddRef`adjustor{8}' (void)
.rdata:00000738                 dd offset ?Release@CEncoder@NPpmd@NCompress@@W7AGKXZ ; [thunk]:NCompress::NPpmd::CEncoder::Release`adjustor{8}' (void)
.rdata:0000073C                 dd offset ?WriteCoderProperties@CEncoder@NPpmd@NCompress@@UAGJPAUISequentialOutStream@@@Z ; NCompress::NPpmd::CEncoder::WriteCoderProperties(ISequentialOutStream *)
.rdata:0000073C _rdata          ends
.rdata:0000073C
.rdata:00000740 ; ===========================================================================
.rdata:00000740
.rdata:00000740 ; Segment type: Pure data
.rdata:00000740 ; Segment permissions: Read
.rdata:00000740 _rdata          segment dword public 'DATA' use32
.rdata:00000740                 assume cs:_rdata
.rdata:00000740                 ;org 740h
.rdata:00000740 ; COMDAT (pick largest)
.rdata:00000740                 dd offset ??_R4CEncoder@NPpmd@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NPpmd::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00000744                 public ??_7CEncoder@NPpmd@NCompress@@6BICompressSetCoderProperties@@@
.rdata:00000744 ; const NCompress::NPpmd::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00000744 ??_7CEncoder@NPpmd@NCompress@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CEncoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000744                                         ; DATA XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+62o
.rdata:00000744                                         ; NCompress::NPpmd::CEncoder::~CEncoder(void)+1Ao
.rdata:00000744                                         ; [thunk]:NCompress::NPpmd::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000748                 dd offset ?AddRef@CEncoder@NPpmd@NCompress@@W3AGKXZ ; [thunk]:NCompress::NPpmd::CEncoder::AddRef`adjustor{4}' (void)
.rdata:0000074C                 dd offset ?Release@CEncoder@NPpmd@NCompress@@W3AGKXZ ; [thunk]:NCompress::NPpmd::CEncoder::Release`adjustor{4}' (void)
.rdata:00000750                 dd offset ?SetCoderProperties@CEncoder@NPpmd@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00000750 _rdata          ends
.rdata:00000750
.rdata:00000754 ; ===========================================================================
.rdata:00000754
.rdata:00000754 ; Segment type: Pure data
.rdata:00000754 ; Segment permissions: Read
.rdata:00000754 _rdata          segment dword public 'DATA' use32
.rdata:00000754                 assume cs:_rdata
.rdata:00000754                 ;org 754h
.rdata:00000754 ; COMDAT (pick largest)
.rdata:00000754                 dd offset ??_R4CEncoder@NPpmd@NCompress@@6BICompressCoder@@@ ; const NCompress::NPpmd::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00000758                 public ??_7CEncoder@NPpmd@NCompress@@6BICompressCoder@@@
.rdata:00000758 ; const NCompress::NPpmd::CEncoder::`vftable'{for `ICompressCoder'}
.rdata:00000758 ??_7CEncoder@NPpmd@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CEncoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000758                                         ; DATA XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+59o
.rdata:00000758                                         ; NCompress::NPpmd::CEncoder::~CEncoder(void)+11o
.rdata:00000758                                         ; NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)
.rdata:0000075C                 dd offset ?AddRef@CEncoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CEncoder::AddRef(void)
.rdata:00000760                 dd offset ?Release@CEncoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CEncoder::Release(void)
.rdata:00000764                 dd offset ?Code@CEncoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000764 _rdata          ends
.rdata:00000764
.xdata$x:00000768 ; ===========================================================================
.xdata$x:00000768
.xdata$x:00000768 ; Segment type: Pure data
.xdata$x:00000768 ; Segment permissions: Read
.xdata$x:00000768 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000768                 assume cs:_xdata$x
.xdata$x:00000768                 ;org 768h
.xdata$x:00000768 __unwindtable$??0CEncoder@NPpmd@NCompress@@QAE@XZ db 0FFh
.xdata$x:00000768                                         ; DATA XREF: .xdata$x:00000778o
.xdata$x:00000769                 db 0FFh
.xdata$x:0000076A                 db 0FFh
.xdata$x:0000076B                 db 0FFh
.xdata$x:0000076C                 dd offset __unwindfunclet$??0CEncoder@NPpmd@NCompress@@QAE@XZ$0
.xdata$x:00000770 __ehfuncinfo$??0CEncoder@NPpmd@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00000770                                         ; DATA XREF: __ehhandler$??0CEncoder@NPpmd@NCompress@@QAE@XZ+11o
.xdata$x:00000771                 db    5
.xdata$x:00000772                 db  93h ; ô
.xdata$x:00000773                 db  19h
.xdata$x:00000774                 db    1
.xdata$x:00000775                 db    0
.xdata$x:00000776                 db    0
.xdata$x:00000777                 db    0
.xdata$x:00000778                 dd offset __unwindtable$??0CEncoder@NPpmd@NCompress@@QAE@XZ
.xdata$x:0000077C                 db    0
.xdata$x:0000077D                 db    0
.xdata$x:0000077E                 db    0
.xdata$x:0000077F                 db    0
.xdata$x:00000780                 db    0
.xdata$x:00000781                 db    0
.xdata$x:00000782                 db    0
.xdata$x:00000783                 db    0
.xdata$x:00000784                 db    0
.xdata$x:00000785                 db    0
.xdata$x:00000786                 db    0
.xdata$x:00000787                 db    0
.xdata$x:00000788                 db    0
.xdata$x:00000789                 db    0
.xdata$x:0000078A                 db    0
.xdata$x:0000078B                 db    0
.xdata$x:0000078C                 db    0
.xdata$x:0000078D                 db    0
.xdata$x:0000078E                 db    0
.xdata$x:0000078F                 db    0
.xdata$x:00000790                 db    1
.xdata$x:00000791                 db    0
.xdata$x:00000792                 db    0
.xdata$x:00000793                 db    0
.xdata$x:00000793 _xdata$x        ends
.xdata$x:00000793
.rdata$r:00000794 ; ===========================================================================
.rdata$r:00000794
.rdata$r:00000794 ; Segment type: Pure data
.rdata$r:00000794 ; Segment permissions: Read
.rdata$r:00000794 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000794                 assume cs:_rdata$r
.rdata$r:00000794                 ;org 794h
.rdata$r:00000794 ; COMDAT (pick any)
.rdata$r:00000794                 public ??_R4CEncoder@NPpmd@NCompress@@6BICompressCoder@@@
.rdata$r:00000794 ; const NCompress::NPpmd::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00000794 ??_R4CEncoder@NPpmd@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00000794                                         ; DATA XREF: .rdata:00000754o
.rdata$r:00000795                 db    0
.rdata$r:00000796                 db    0
.rdata$r:00000797                 db    0
.rdata$r:00000798                 db    0
.rdata$r:00000799                 db    0
.rdata$r:0000079A                 db    0
.rdata$r:0000079B                 db    0
.rdata$r:0000079C                 db    0
.rdata$r:0000079D                 db    0
.rdata$r:0000079E                 db    0
.rdata$r:0000079F                 db    0
.rdata$r:000007A0                 dd offset ??_R0?AVCEncoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CEncoder `RTTI Type Descriptor'
.rdata$r:000007A4                 dd offset ??_R3CEncoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007A4 _rdata$r        ends
.rdata$r:000007A4
.data:000007A8 ; ===========================================================================
.data:000007A8
.data:000007A8 ; Segment type: Pure data
.data:000007A8 ; Segment permissions: Read/Write
.data:000007A8 _data           segment dword public 'DATA' use32
.data:000007A8                 assume cs:_data
.data:000007A8                 ;org 7A8h
.data:000007A8 ; COMDAT (pick any)
.data:000007A8                 public ??_R0?AVCEncoder@NPpmd@NCompress@@@8
.data:000007A8 ; class NCompress::NPpmd::CEncoder `RTTI Type Descriptor'
.data:000007A8 ??_R0?AVCEncoder@NPpmd@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000007A8                                         ; DATA XREF: .rdata$r:000007A0o
.data:000007A8                                         ; .rdata$r:NCompress::NPpmd::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000007A8                                         ; const type_info::`vftable'
.data:000007AC                 align 10h
.data:000007B0 a_?avcencoder@n db '.?AVCEncoder@NPpmd@NCompress@@',0
.data:000007CF                 align 10h
.data:000007CF _data           ends
.data:000007CF
.rdata$r:000007D0 ; ===========================================================================
.rdata$r:000007D0
.rdata$r:000007D0 ; Segment type: Pure data
.rdata$r:000007D0 ; Segment permissions: Read
.rdata$r:000007D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007D0                 assume cs:_rdata$r
.rdata$r:000007D0                 ;org 7D0h
.rdata$r:000007D0 ; COMDAT (pick any)
.rdata$r:000007D0                 public ??_R3CEncoder@NPpmd@NCompress@@8
.rdata$r:000007D0 ; NCompress::NPpmd::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007D0 ??_R3CEncoder@NPpmd@NCompress@@8 db    0 ; DATA XREF: .rdata$r:000007A4o
.rdata$r:000007D0                                         ; .rdata$r:0000081Co ...
.rdata$r:000007D1                 db    0
.rdata$r:000007D2                 db    0
.rdata$r:000007D3                 db    0
.rdata$r:000007D4                 db    5
.rdata$r:000007D5                 db    0
.rdata$r:000007D6                 db    0
.rdata$r:000007D7                 db    0
.rdata$r:000007D8                 db    8
.rdata$r:000007D9                 db    0
.rdata$r:000007DA                 db    0
.rdata$r:000007DB                 db    0
.rdata$r:000007DC                 dd offset ??_R2CEncoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CEncoder::`RTTI Base Class Array'
.rdata$r:000007DC _rdata$r        ends
.rdata$r:000007DC
.rdata$r:000007E0 ; ===========================================================================
.rdata$r:000007E0
.rdata$r:000007E0 ; Segment type: Pure data
.rdata$r:000007E0 ; Segment permissions: Read
.rdata$r:000007E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007E0                 assume cs:_rdata$r
.rdata$r:000007E0                 ;org 7E0h
.rdata$r:000007E0 ; COMDAT (pick any)
.rdata$r:000007E0                 public ??_R2CEncoder@NPpmd@NCompress@@8
.rdata$r:000007E0 ; NCompress::NPpmd::CEncoder::`RTTI Base Class Array'
.rdata$r:000007E0 ??_R2CEncoder@NPpmd@NCompress@@8 dd offset ??_R1A@?0A@EA@CEncoder@NPpmd@NCompress@@8
.rdata$r:000007E0                                         ; DATA XREF: .rdata$r:000007DCo
.rdata$r:000007E0                                         ; NCompress::NPpmd::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000007E4                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000007E8                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000007EC                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000007F0                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000007F4                 dd offset ??_R17?0A@EA@ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000007F8                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000007FC                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000800                 db    0
.rdata$r:00000801                 align 4
.rdata$r:00000801 _rdata$r        ends
.rdata$r:00000801
.rdata$r:00000804 ; ===========================================================================
.rdata$r:00000804
.rdata$r:00000804 ; Segment type: Pure data
.rdata$r:00000804 ; Segment permissions: Read
.rdata$r:00000804 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000804                 assume cs:_rdata$r
.rdata$r:00000804                 ;org 804h
.rdata$r:00000804 ; COMDAT (pick any)
.rdata$r:00000804                 public ??_R1A@?0A@EA@CEncoder@NPpmd@NCompress@@8
.rdata$r:00000804 ; NCompress::NPpmd::CEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000804 ??_R1A@?0A@EA@CEncoder@NPpmd@NCompress@@8 dd offset ??_R0?AVCEncoder@NPpmd@NCompress@@@8
.rdata$r:00000804                                         ; DATA XREF: .rdata$r:NCompress::NPpmd::CEncoder::`RTTI Base Class Array'o
.rdata$r:00000804                                         ; NCompress::NPpmd::CEncoder `RTTI Type Descriptor'
.rdata$r:00000808                 db    7
.rdata$r:00000809                 db    0
.rdata$r:0000080A                 db    0
.rdata$r:0000080B                 db    0
.rdata$r:0000080C                 db    0
.rdata$r:0000080D                 db    0
.rdata$r:0000080E                 db    0
.rdata$r:0000080F                 db    0
.rdata$r:00000810                 db 0FFh
.rdata$r:00000811                 db 0FFh
.rdata$r:00000812                 db 0FFh
.rdata$r:00000813                 db 0FFh
.rdata$r:00000814                 db    0
.rdata$r:00000815                 db    0
.rdata$r:00000816                 db    0
.rdata$r:00000817                 db    0
.rdata$r:00000818                 db  40h ; @
.rdata$r:00000819                 db    0
.rdata$r:0000081A                 db    0
.rdata$r:0000081B                 db    0
.rdata$r:0000081C                 dd offset ??_R3CEncoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000081C _rdata$r        ends
.rdata$r:0000081C
.rdata$r:00000820 ; ===========================================================================
.rdata$r:00000820
.rdata$r:00000820 ; Segment type: Pure data
.rdata$r:00000820 ; Segment permissions: Read
.rdata$r:00000820 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000820                 assume cs:_rdata$r
.rdata$r:00000820                 ;org 820h
.rdata$r:00000820 ; COMDAT (pick any)
.rdata$r:00000820                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000820 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000820 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000820                                         ; DATA XREF: .rdata$r:000007E4o
.rdata$r:00000820                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00000820                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000824                 db    1
.rdata$r:00000825                 db    0
.rdata$r:00000826                 db    0
.rdata$r:00000827                 db    0
.rdata$r:00000828                 db    0
.rdata$r:00000829                 db    0
.rdata$r:0000082A                 db    0
.rdata$r:0000082B                 db    0
.rdata$r:0000082C                 db 0FFh
.rdata$r:0000082D                 db 0FFh
.rdata$r:0000082E                 db 0FFh
.rdata$r:0000082F                 db 0FFh
.rdata$r:00000830                 db    0
.rdata$r:00000831                 db    0
.rdata$r:00000832                 db    0
.rdata$r:00000833                 db    0
.rdata$r:00000834                 db  40h ; @
.rdata$r:00000835                 db    0
.rdata$r:00000836                 db    0
.rdata$r:00000837                 db    0
.rdata$r:00000838                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000838 _rdata$r        ends
.rdata$r:00000838
.data:0000083C ; ===========================================================================
.data:0000083C
.data:0000083C ; Segment type: Pure data
.data:0000083C ; Segment permissions: Read/Write
.data:0000083C _data           segment dword public 'DATA' use32
.data:0000083C                 assume cs:_data
.data:0000083C                 ;org 83Ch
.data:0000083C ; COMDAT (pick any)
.data:0000083C                 public ??_R0?AUICompressCoder@@@8
.data:0000083C ; struct ICompressCoder `RTTI Type Descriptor'
.data:0000083C ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:0000083C                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000083C                                         ; .rdata$r:00000D80o
.data:0000083C                                         ; const type_info::`vftable'
.data:00000840                 db    0
.data:00000841                 db    0
.data:00000842                 db    0
.data:00000843                 db    0
.data:00000844                 db  2Eh ; .
.data:00000845                 db  3Fh ; ?
.data:00000846                 db  41h ; A
.data:00000847                 db  55h ; U
.data:00000848                 db  49h ; I
.data:00000849                 db  43h ; C
.data:0000084A                 db  6Fh ; o
.data:0000084B                 db  6Dh ; m
.data:0000084C                 db  70h ; p
.data:0000084D                 db  72h ; r
.data:0000084E                 db  65h ; e
.data:0000084F                 db  73h ; s
.data:00000850                 db  73h ; s
.data:00000851                 db  43h ; C
.data:00000852                 db  6Fh ; o
.data:00000853                 db  64h ; d
.data:00000854                 db  65h ; e
.data:00000855                 db  72h ; r
.data:00000856                 db  40h ; @
.data:00000857                 db  40h ; @
.data:00000858                 db    0
.data:00000859                 align 4
.data:00000859 _data           ends
.data:00000859
.rdata$r:0000085C ; ===========================================================================
.rdata$r:0000085C
.rdata$r:0000085C ; Segment type: Pure data
.rdata$r:0000085C ; Segment permissions: Read
.rdata$r:0000085C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000085C                 assume cs:_rdata$r
.rdata$r:0000085C                 ;org 85Ch
.rdata$r:0000085C ; COMDAT (pick any)
.rdata$r:0000085C                 public ??_R3ICompressCoder@@8
.rdata$r:0000085C ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000085C ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00000838o
.rdata$r:0000085C                                         ; .rdata$r:00000D84o
.rdata$r:0000085D                 db    0
.rdata$r:0000085E                 db    0
.rdata$r:0000085F                 db    0
.rdata$r:00000860                 db    0
.rdata$r:00000861                 db    0
.rdata$r:00000862                 db    0
.rdata$r:00000863                 db    0
.rdata$r:00000864                 db    2
.rdata$r:00000865                 db    0
.rdata$r:00000866                 db    0
.rdata$r:00000867                 db    0
.rdata$r:00000868                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000868 _rdata$r        ends
.rdata$r:00000868
.rdata$r:0000086C ; ===========================================================================
.rdata$r:0000086C
.rdata$r:0000086C ; Segment type: Pure data
.rdata$r:0000086C ; Segment permissions: Read
.rdata$r:0000086C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000086C                 assume cs:_rdata$r
.rdata$r:0000086C                 ;org 86Ch
.rdata$r:0000086C ; COMDAT (pick any)
.rdata$r:0000086C                 public ??_R2ICompressCoder@@8
.rdata$r:0000086C ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:0000086C ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:0000086C                                         ; DATA XREF: .rdata$r:00000868o
.rdata$r:0000086C                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000870                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000874                 db    0
.rdata$r:00000875                 align 4
.rdata$r:00000875 _rdata$r        ends
.rdata$r:00000875
.rdata$r:00000878 ; ===========================================================================
.rdata$r:00000878
.rdata$r:00000878 ; Segment type: Pure data
.rdata$r:00000878 ; Segment permissions: Read
.rdata$r:00000878 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000878                 assume cs:_rdata$r
.rdata$r:00000878                 ;org 878h
.rdata$r:00000878 ; COMDAT (pick any)
.rdata$r:00000878                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000878 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000878 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000878                                         ; DATA XREF: .rdata$r:00000870o
.rdata$r:00000878                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00000878                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000087C                 db    0
.rdata$r:0000087D                 db    0
.rdata$r:0000087E                 db    0
.rdata$r:0000087F                 db    0
.rdata$r:00000880                 db    0
.rdata$r:00000881                 db    0
.rdata$r:00000882                 db    0
.rdata$r:00000883                 db    0
.rdata$r:00000884                 db 0FFh
.rdata$r:00000885                 db 0FFh
.rdata$r:00000886                 db 0FFh
.rdata$r:00000887                 db 0FFh
.rdata$r:00000888                 db    0
.rdata$r:00000889                 db    0
.rdata$r:0000088A                 db    0
.rdata$r:0000088B                 db    0
.rdata$r:0000088C                 db  40h ; @
.rdata$r:0000088D                 db    0
.rdata$r:0000088E                 db    0
.rdata$r:0000088F                 db    0
.rdata$r:00000890                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000890 _rdata$r        ends
.rdata$r:00000890
.data:00000894 ; ===========================================================================
.data:00000894
.data:00000894 ; Segment type: Pure data
.data:00000894 ; Segment permissions: Read/Write
.data:00000894 _data           segment dword public 'DATA' use32
.data:00000894                 assume cs:_data
.data:00000894                 ;org 894h
.data:00000894 ; COMDAT (pick any)
.data:00000894                 public ??_R0?AUIUnknown@@@8
.data:00000894 ; struct IUnknown `RTTI Type Descriptor'
.data:00000894 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000894                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000894                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00000894                                         ; const type_info::`vftable'
.data:00000898                 db    0
.data:00000899                 db    0
.data:0000089A                 db    0
.data:0000089B                 db    0
.data:0000089C                 db  2Eh ; .
.data:0000089D                 db  3Fh ; ?
.data:0000089E                 db  41h ; A
.data:0000089F                 db  55h ; U
.data:000008A0                 db  49h ; I
.data:000008A1                 db  55h ; U
.data:000008A2                 db  6Eh ; n
.data:000008A3                 db  6Bh ; k
.data:000008A4                 db  6Eh ; n
.data:000008A5                 db  6Fh ; o
.data:000008A6                 db  77h ; w
.data:000008A7                 db  6Eh ; n
.data:000008A8                 db  40h ; @
.data:000008A9                 db  40h ; @
.data:000008AA                 db    0
.data:000008AB                 align 4
.data:000008AB _data           ends
.data:000008AB
.rdata$r:000008AC ; ===========================================================================
.rdata$r:000008AC
.rdata$r:000008AC ; Segment type: Pure data
.rdata$r:000008AC ; Segment permissions: Read
.rdata$r:000008AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008AC                 assume cs:_rdata$r
.rdata$r:000008AC                 ;org 8ACh
.rdata$r:000008AC ; COMDAT (pick any)
.rdata$r:000008AC                 public ??_R3IUnknown@@8
.rdata$r:000008AC ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008AC ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000890o
.rdata$r:000008AC                                         ; .rdata$r:000008DCo ...
.rdata$r:000008AD                 db    0
.rdata$r:000008AE                 db    0
.rdata$r:000008AF                 db    0
.rdata$r:000008B0                 db    0
.rdata$r:000008B1                 db    0
.rdata$r:000008B2                 db    0
.rdata$r:000008B3                 db    0
.rdata$r:000008B4                 db    1
.rdata$r:000008B5                 db    0
.rdata$r:000008B6                 db    0
.rdata$r:000008B7                 db    0
.rdata$r:000008B8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000008B8 _rdata$r        ends
.rdata$r:000008B8
.rdata$r:000008BC ; ===========================================================================
.rdata$r:000008BC
.rdata$r:000008BC ; Segment type: Pure data
.rdata$r:000008BC ; Segment permissions: Read
.rdata$r:000008BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008BC                 assume cs:_rdata$r
.rdata$r:000008BC                 ;org 8BCh
.rdata$r:000008BC ; COMDAT (pick any)
.rdata$r:000008BC                 public ??_R2IUnknown@@8
.rdata$r:000008BC ; IUnknown::`RTTI Base Class Array'
.rdata$r:000008BC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000008BC                                         ; DATA XREF: .rdata$r:000008B8o
.rdata$r:000008BC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000008C0                 db    0
.rdata$r:000008C1                 align 4
.rdata$r:000008C1 _rdata$r        ends
.rdata$r:000008C1
.rdata$r:000008C4 ; ===========================================================================
.rdata$r:000008C4
.rdata$r:000008C4 ; Segment type: Pure data
.rdata$r:000008C4 ; Segment permissions: Read
.rdata$r:000008C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008C4                 assume cs:_rdata$r
.rdata$r:000008C4                 ;org 8C4h
.rdata$r:000008C4 ; COMDAT (pick any)
.rdata$r:000008C4                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:000008C4 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:000008C4 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000008C4                                         ; DATA XREF: .rdata$r:000007E8o
.rdata$r:000008C4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000008C8                 align 10h
.rdata$r:000008D0                 db 0FFh
.rdata$r:000008D1                 db 0FFh
.rdata$r:000008D2                 db 0FFh
.rdata$r:000008D3                 db 0FFh
.rdata$r:000008D4                 db    0
.rdata$r:000008D5                 db    0
.rdata$r:000008D6                 db    0
.rdata$r:000008D7                 db    0
.rdata$r:000008D8                 db  42h ; B
.rdata$r:000008D9                 db    0
.rdata$r:000008DA                 db    0
.rdata$r:000008DB                 db    0
.rdata$r:000008DC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008DC _rdata$r        ends
.rdata$r:000008DC
.rdata$r:000008E0 ; ===========================================================================
.rdata$r:000008E0
.rdata$r:000008E0 ; Segment type: Pure data
.rdata$r:000008E0 ; Segment permissions: Read
.rdata$r:000008E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008E0                 assume cs:_rdata$r
.rdata$r:000008E0                 ;org 8E0h
.rdata$r:000008E0 ; COMDAT (pick any)
.rdata$r:000008E0                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000008E0 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000008E0 ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:000008E0                                         ; DATA XREF: .rdata$r:000007ECo
.rdata$r:000008E0                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000008E4                 db    1
.rdata$r:000008E5                 db    0
.rdata$r:000008E6                 db    0
.rdata$r:000008E7                 db    0
.rdata$r:000008E8                 db    4
.rdata$r:000008E9                 db    0
.rdata$r:000008EA                 db    0
.rdata$r:000008EB                 db    0
.rdata$r:000008EC                 db 0FFh
.rdata$r:000008ED                 db 0FFh
.rdata$r:000008EE                 db 0FFh
.rdata$r:000008EF                 db 0FFh
.rdata$r:000008F0                 db    0
.rdata$r:000008F1                 db    0
.rdata$r:000008F2                 db    0
.rdata$r:000008F3                 db    0
.rdata$r:000008F4                 db  40h ; @
.rdata$r:000008F5                 db    0
.rdata$r:000008F6                 db    0
.rdata$r:000008F7                 db    0
.rdata$r:000008F8                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008F8 _rdata$r        ends
.rdata$r:000008F8
.data:000008FC ; ===========================================================================
.data:000008FC
.data:000008FC ; Segment type: Pure data
.data:000008FC ; Segment permissions: Read/Write
.data:000008FC _data           segment dword public 'DATA' use32
.data:000008FC                 assume cs:_data
.data:000008FC                 ;org 8FCh
.data:000008FC ; COMDAT (pick any)
.data:000008FC                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:000008FC ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:000008FC ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:000008FC                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000008FC                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000008FC                                         ; const type_info::`vftable'
.data:00000900                 db    0
.data:00000901                 db    0
.data:00000902                 db    0
.data:00000903                 db    0
.data:00000904                 db  2Eh ; .
.data:00000905                 db  3Fh ; ?
.data:00000906                 db  41h ; A
.data:00000907                 db  55h ; U
.data:00000908                 db  49h ; I
.data:00000909                 db  43h ; C
.data:0000090A                 db  6Fh ; o
.data:0000090B                 db  6Dh ; m
.data:0000090C                 db  70h ; p
.data:0000090D                 db  72h ; r
.data:0000090E                 db  65h ; e
.data:0000090F                 db  73h ; s
.data:00000910                 db  73h ; s
.data:00000911                 db  53h ; S
.data:00000912                 db  65h ; e
.data:00000913                 db  74h ; t
.data:00000914                 db  43h ; C
.data:00000915                 db  6Fh ; o
.data:00000916                 db  64h ; d
.data:00000917                 db  65h ; e
.data:00000918                 db  72h ; r
.data:00000919                 db  50h ; P
.data:0000091A                 db  72h ; r
.data:0000091B                 db  6Fh ; o
.data:0000091C                 db  70h ; p
.data:0000091D                 db  65h ; e
.data:0000091E                 db  72h ; r
.data:0000091F                 db  74h ; t
.data:00000920                 db  69h ; i
.data:00000921                 db  65h ; e
.data:00000922                 db  73h ; s
.data:00000923                 db  40h ; @
.data:00000924                 db  40h ; @
.data:00000925                 db    0
.data:00000926                 align 4
.data:00000926 _data           ends
.data:00000926
.rdata$r:00000928 ; ===========================================================================
.rdata$r:00000928
.rdata$r:00000928 ; Segment type: Pure data
.rdata$r:00000928 ; Segment permissions: Read
.rdata$r:00000928 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000928                 assume cs:_rdata$r
.rdata$r:00000928                 ;org 928h
.rdata$r:00000928 ; COMDAT (pick any)
.rdata$r:00000928                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:00000928 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000928 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:00000928                                         ; DATA XREF: .rdata$r:000008F8o
.rdata$r:00000928                                         ; .rdata$r:0000095Co ...
.rdata$r:00000929                 db    0
.rdata$r:0000092A                 db    0
.rdata$r:0000092B                 db    0
.rdata$r:0000092C                 db    0
.rdata$r:0000092D                 db    0
.rdata$r:0000092E                 db    0
.rdata$r:0000092F                 db    0
.rdata$r:00000930                 db    2
.rdata$r:00000931                 db    0
.rdata$r:00000932                 db    0
.rdata$r:00000933                 db    0
.rdata$r:00000934                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000934 _rdata$r        ends
.rdata$r:00000934
.rdata$r:00000938 ; ===========================================================================
.rdata$r:00000938
.rdata$r:00000938 ; Segment type: Pure data
.rdata$r:00000938 ; Segment permissions: Read
.rdata$r:00000938 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000938                 assume cs:_rdata$r
.rdata$r:00000938                 ;org 938h
.rdata$r:00000938 ; COMDAT (pick any)
.rdata$r:00000938                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00000938 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000938 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000938                                         ; DATA XREF: .rdata$r:00000934o
.rdata$r:00000938                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000093C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000940                 db    0
.rdata$r:00000941                 align 4
.rdata$r:00000941 _rdata$r        ends
.rdata$r:00000941
.rdata$r:00000944 ; ===========================================================================
.rdata$r:00000944
.rdata$r:00000944 ; Segment type: Pure data
.rdata$r:00000944 ; Segment permissions: Read
.rdata$r:00000944 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000944                 assume cs:_rdata$r
.rdata$r:00000944                 ;org 944h
.rdata$r:00000944 ; COMDAT (pick any)
.rdata$r:00000944                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000944 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000944 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00000944                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:00000944                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000948                 db    1
.rdata$r:00000949                 db    0
.rdata$r:0000094A                 db    0
.rdata$r:0000094B                 db    0
.rdata$r:0000094C                 db    0
.rdata$r:0000094D                 db    0
.rdata$r:0000094E                 db    0
.rdata$r:0000094F                 db    0
.rdata$r:00000950                 db 0FFh
.rdata$r:00000951                 db 0FFh
.rdata$r:00000952                 db 0FFh
.rdata$r:00000953                 db 0FFh
.rdata$r:00000954                 db    0
.rdata$r:00000955                 db    0
.rdata$r:00000956                 db    0
.rdata$r:00000957                 db    0
.rdata$r:00000958                 db  40h ; @
.rdata$r:00000959                 db    0
.rdata$r:0000095A                 db    0
.rdata$r:0000095B                 db    0
.rdata$r:0000095C                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000095C _rdata$r        ends
.rdata$r:0000095C
.rdata$r:00000960 ; ===========================================================================
.rdata$r:00000960
.rdata$r:00000960 ; Segment type: Pure data
.rdata$r:00000960 ; Segment permissions: Read
.rdata$r:00000960 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000960                 assume cs:_rdata$r
.rdata$r:00000960                 ;org 960h
.rdata$r:00000960 ; COMDAT (pick any)
.rdata$r:00000960                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00000960 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00000960 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000960                                         ; DATA XREF: .rdata$r:000007F0o
.rdata$r:00000960                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000964                 align 8
.rdata$r:00000968                 db    4
.rdata$r:00000969                 db    0
.rdata$r:0000096A                 db    0
.rdata$r:0000096B                 db    0
.rdata$r:0000096C                 db 0FFh
.rdata$r:0000096D                 db 0FFh
.rdata$r:0000096E                 db 0FFh
.rdata$r:0000096F                 db 0FFh
.rdata$r:00000970                 db    0
.rdata$r:00000971                 db    0
.rdata$r:00000972                 db    0
.rdata$r:00000973                 db    0
.rdata$r:00000974                 db  42h ; B
.rdata$r:00000975                 db    0
.rdata$r:00000976                 db    0
.rdata$r:00000977                 db    0
.rdata$r:00000978                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000978 _rdata$r        ends
.rdata$r:00000978
.rdata$r:0000097C ; ===========================================================================
.rdata$r:0000097C
.rdata$r:0000097C ; Segment type: Pure data
.rdata$r:0000097C ; Segment permissions: Read
.rdata$r:0000097C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000097C                 assume cs:_rdata$r
.rdata$r:0000097C                 ;org 97Ch
.rdata$r:0000097C ; COMDAT (pick any)
.rdata$r:0000097C                 public ??_R17?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:0000097C ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:0000097C ??_R17?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:0000097C                                         ; DATA XREF: .rdata$r:000007F4o
.rdata$r:0000097C                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00000980                 db    1
.rdata$r:00000981                 db    0
.rdata$r:00000982                 db    0
.rdata$r:00000983                 db    0
.rdata$r:00000984                 db    8
.rdata$r:00000985                 db    0
.rdata$r:00000986                 db    0
.rdata$r:00000987                 db    0
.rdata$r:00000988                 db 0FFh
.rdata$r:00000989                 db 0FFh
.rdata$r:0000098A                 db 0FFh
.rdata$r:0000098B                 db 0FFh
.rdata$r:0000098C                 db    0
.rdata$r:0000098D                 db    0
.rdata$r:0000098E                 db    0
.rdata$r:0000098F                 db    0
.rdata$r:00000990                 db  40h ; @
.rdata$r:00000991                 db    0
.rdata$r:00000992                 db    0
.rdata$r:00000993                 db    0
.rdata$r:00000994                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000994 _rdata$r        ends
.rdata$r:00000994
.data:00000998 ; ===========================================================================
.data:00000998
.data:00000998 ; Segment type: Pure data
.data:00000998 ; Segment permissions: Read/Write
.data:00000998 _data           segment dword public 'DATA' use32
.data:00000998                 assume cs:_data
.data:00000998                 ;org 998h
.data:00000998 ; COMDAT (pick any)
.data:00000998                 public ??_R0?AUICompressWriteCoderProperties@@@8
.data:00000998 ; struct ICompressWriteCoderProperties `RTTI Type Descriptor'
.data:00000998 ??_R0?AUICompressWriteCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00000998                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00000998                                         ; .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000998                                         ; const type_info::`vftable'
.data:0000099C                 align 10h
.data:000009A0 a_?auicompressw db '.?AUICompressWriteCoderProperties@@',0
.data:000009A0 _data           ends
.data:000009A0
.rdata$r:000009C4 ; ===========================================================================
.rdata$r:000009C4
.rdata$r:000009C4 ; Segment type: Pure data
.rdata$r:000009C4 ; Segment permissions: Read
.rdata$r:000009C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009C4                 assume cs:_rdata$r
.rdata$r:000009C4                 ;org 9C4h
.rdata$r:000009C4 ; COMDAT (pick any)
.rdata$r:000009C4                 public ??_R3ICompressWriteCoderProperties@@8
.rdata$r:000009C4 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009C4 ??_R3ICompressWriteCoderProperties@@8 db    0
.rdata$r:000009C4                                         ; DATA XREF: .rdata$r:00000994o
.rdata$r:000009C4                                         ; .rdata$r:000009F8o ...
.rdata$r:000009C5                 db    0
.rdata$r:000009C6                 db    0
.rdata$r:000009C7                 db    0
.rdata$r:000009C8                 db    0
.rdata$r:000009C9                 db    0
.rdata$r:000009CA                 db    0
.rdata$r:000009CB                 db    0
.rdata$r:000009CC                 db    2
.rdata$r:000009CD                 db    0
.rdata$r:000009CE                 db    0
.rdata$r:000009CF                 db    0
.rdata$r:000009D0                 dd offset ??_R2ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:000009D0 _rdata$r        ends
.rdata$r:000009D0
.rdata$r:000009D4 ; ===========================================================================
.rdata$r:000009D4
.rdata$r:000009D4 ; Segment type: Pure data
.rdata$r:000009D4 ; Segment permissions: Read
.rdata$r:000009D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009D4                 assume cs:_rdata$r
.rdata$r:000009D4                 ;org 9D4h
.rdata$r:000009D4 ; COMDAT (pick any)
.rdata$r:000009D4                 public ??_R2ICompressWriteCoderProperties@@8
.rdata$r:000009D4 ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:000009D4 ??_R2ICompressWriteCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:000009D4                                         ; DATA XREF: .rdata$r:000009D0o
.rdata$r:000009D4                                         ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000009D8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000009DC                 db    0
.rdata$r:000009DD                 align 10h
.rdata$r:000009DD _rdata$r        ends
.rdata$r:000009DD
.rdata$r:000009E0 ; ===========================================================================
.rdata$r:000009E0
.rdata$r:000009E0 ; Segment type: Pure data
.rdata$r:000009E0 ; Segment permissions: Read
.rdata$r:000009E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009E0                 assume cs:_rdata$r
.rdata$r:000009E0                 ;org 9E0h
.rdata$r:000009E0 ; COMDAT (pick any)
.rdata$r:000009E0                 public ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:000009E0 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000009E0 ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:000009E0                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Array'o
.rdata$r:000009E0                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:000009E4                 db    1
.rdata$r:000009E5                 db    0
.rdata$r:000009E6                 db    0
.rdata$r:000009E7                 db    0
.rdata$r:000009E8                 db    0
.rdata$r:000009E9                 db    0
.rdata$r:000009EA                 db    0
.rdata$r:000009EB                 db    0
.rdata$r:000009EC                 db 0FFh
.rdata$r:000009ED                 db 0FFh
.rdata$r:000009EE                 db 0FFh
.rdata$r:000009EF                 db 0FFh
.rdata$r:000009F0                 db    0
.rdata$r:000009F1                 db    0
.rdata$r:000009F2                 db    0
.rdata$r:000009F3                 db    0
.rdata$r:000009F4                 db  40h ; @
.rdata$r:000009F5                 db    0
.rdata$r:000009F6                 db    0
.rdata$r:000009F7                 db    0
.rdata$r:000009F8                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009F8 _rdata$r        ends
.rdata$r:000009F8
.rdata$r:000009FC ; ===========================================================================
.rdata$r:000009FC
.rdata$r:000009FC ; Segment type: Pure data
.rdata$r:000009FC ; Segment permissions: Read
.rdata$r:000009FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009FC                 assume cs:_rdata$r
.rdata$r:000009FC                 ;org 9FCh
.rdata$r:000009FC ; COMDAT (pick any)
.rdata$r:000009FC                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:000009FC ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:000009FC ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000009FC                                         ; DATA XREF: .rdata$r:000007F8o
.rdata$r:000009FC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000A00                 db    0
.rdata$r:00000A01                 db    0
.rdata$r:00000A02                 db    0
.rdata$r:00000A03                 db    0
.rdata$r:00000A04                 db    8
.rdata$r:00000A05                 db    0
.rdata$r:00000A06                 db    0
.rdata$r:00000A07                 db    0
.rdata$r:00000A08                 db 0FFh
.rdata$r:00000A09                 db 0FFh
.rdata$r:00000A0A                 db 0FFh
.rdata$r:00000A0B                 db 0FFh
.rdata$r:00000A0C                 db    0
.rdata$r:00000A0D                 db    0
.rdata$r:00000A0E                 db    0
.rdata$r:00000A0F                 db    0
.rdata$r:00000A10                 db  42h ; B
.rdata$r:00000A11                 db    0
.rdata$r:00000A12                 db    0
.rdata$r:00000A13                 db    0
.rdata$r:00000A14                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A14 _rdata$r        ends
.rdata$r:00000A14
.rdata$r:00000A18 ; ===========================================================================
.rdata$r:00000A18
.rdata$r:00000A18 ; Segment type: Pure data
.rdata$r:00000A18 ; Segment permissions: Read
.rdata$r:00000A18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A18                 assume cs:_rdata$r
.rdata$r:00000A18                 ;org 0A18h
.rdata$r:00000A18 ; COMDAT (pick any)
.rdata$r:00000A18                 public ??_R1M@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000A18 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00000A18 ??_R1M@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000A18                                         ; DATA XREF: .rdata$r:000007FCo
.rdata$r:00000A18                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000A1C                 align 10h
.rdata$r:00000A20                 db  0Ch
.rdata$r:00000A21                 db    0
.rdata$r:00000A22                 db    0
.rdata$r:00000A23                 db    0
.rdata$r:00000A24                 db 0FFh
.rdata$r:00000A25                 db 0FFh
.rdata$r:00000A26                 db 0FFh
.rdata$r:00000A27                 db 0FFh
.rdata$r:00000A28                 db    0
.rdata$r:00000A29                 db    0
.rdata$r:00000A2A                 db    0
.rdata$r:00000A2B                 db    0
.rdata$r:00000A2C                 db  40h ; @
.rdata$r:00000A2D                 db    0
.rdata$r:00000A2E                 db    0
.rdata$r:00000A2F                 db    0
.rdata$r:00000A30                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A30 _rdata$r        ends
.rdata$r:00000A30
.data:00000A34 ; ===========================================================================
.data:00000A34
.data:00000A34 ; Segment type: Pure data
.data:00000A34 ; Segment permissions: Read/Write
.data:00000A34 _data           segment dword public 'DATA' use32
.data:00000A34                 assume cs:_data
.data:00000A34                 ;org 0A34h
.data:00000A34 ; COMDAT (pick any)
.data:00000A34                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000A34 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000A34 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000A34                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00000A34                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000A34                                         ; const type_info::`vftable'
.data:00000A38                 db    0
.data:00000A39                 db    0
.data:00000A3A                 db    0
.data:00000A3B                 db    0
.data:00000A3C                 db  2Eh ; .
.data:00000A3D                 db  3Fh ; ?
.data:00000A3E                 db  41h ; A
.data:00000A3F                 db  56h ; V
.data:00000A40                 db  43h ; C
.data:00000A41                 db  4Dh ; M
.data:00000A42                 db  79h ; y
.data:00000A43                 db  55h ; U
.data:00000A44                 db  6Eh ; n
.data:00000A45                 db  6Bh ; k
.data:00000A46                 db  6Eh ; n
.data:00000A47                 db  6Fh ; o
.data:00000A48                 db  77h ; w
.data:00000A49                 db  6Eh ; n
.data:00000A4A                 db  49h ; I
.data:00000A4B                 db  6Dh ; m
.data:00000A4C                 db  70h ; p
.data:00000A4D                 db  40h ; @
.data:00000A4E                 db  40h ; @
.data:00000A4F                 db    0
.data:00000A4F _data           ends
.data:00000A4F
.rdata$r:00000A50 ; ===========================================================================
.rdata$r:00000A50
.rdata$r:00000A50 ; Segment type: Pure data
.rdata$r:00000A50 ; Segment permissions: Read
.rdata$r:00000A50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A50                 assume cs:_rdata$r
.rdata$r:00000A50                 ;org 0A50h
.rdata$r:00000A50 ; COMDAT (pick any)
.rdata$r:00000A50                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000A50 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A50 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000A30o
.rdata$r:00000A50                                         ; .rdata$r:00000A80o
.rdata$r:00000A51                 db    0
.rdata$r:00000A52                 db    0
.rdata$r:00000A53                 db    0
.rdata$r:00000A54                 db    0
.rdata$r:00000A55                 db    0
.rdata$r:00000A56                 db    0
.rdata$r:00000A57                 db    0
.rdata$r:00000A58                 db    1
.rdata$r:00000A59                 db    0
.rdata$r:00000A5A                 db    0
.rdata$r:00000A5B                 db    0
.rdata$r:00000A5C                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000A5C _rdata$r        ends
.rdata$r:00000A5C
.rdata$r:00000A60 ; ===========================================================================
.rdata$r:00000A60
.rdata$r:00000A60 ; Segment type: Pure data
.rdata$r:00000A60 ; Segment permissions: Read
.rdata$r:00000A60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A60                 assume cs:_rdata$r
.rdata$r:00000A60                 ;org 0A60h
.rdata$r:00000A60 ; COMDAT (pick any)
.rdata$r:00000A60                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000A60 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000A60 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000A60                                         ; DATA XREF: .rdata$r:00000A5Co
.rdata$r:00000A60                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000A64                 db    0
.rdata$r:00000A65                 align 4
.rdata$r:00000A65 _rdata$r        ends
.rdata$r:00000A65
.rdata$r:00000A68 ; ===========================================================================
.rdata$r:00000A68
.rdata$r:00000A68 ; Segment type: Pure data
.rdata$r:00000A68 ; Segment permissions: Read
.rdata$r:00000A68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A68                 assume cs:_rdata$r
.rdata$r:00000A68                 ;org 0A68h
.rdata$r:00000A68 ; COMDAT (pick any)
.rdata$r:00000A68                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000A68 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000A68 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000A68                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000A68                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000A6C                 db    0
.rdata$r:00000A6D                 db    0
.rdata$r:00000A6E                 db    0
.rdata$r:00000A6F                 db    0
.rdata$r:00000A70                 db    0
.rdata$r:00000A71                 db    0
.rdata$r:00000A72                 db    0
.rdata$r:00000A73                 db    0
.rdata$r:00000A74                 db 0FFh
.rdata$r:00000A75                 db 0FFh
.rdata$r:00000A76                 db 0FFh
.rdata$r:00000A77                 db 0FFh
.rdata$r:00000A78                 db    0
.rdata$r:00000A79                 db    0
.rdata$r:00000A7A                 db    0
.rdata$r:00000A7B                 db    0
.rdata$r:00000A7C                 db  40h ; @
.rdata$r:00000A7D                 db    0
.rdata$r:00000A7E                 db    0
.rdata$r:00000A7F                 db    0
.rdata$r:00000A80                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A80 _rdata$r        ends
.rdata$r:00000A80
.rdata$r:00000A84 ; ===========================================================================
.rdata$r:00000A84
.rdata$r:00000A84 ; Segment type: Pure data
.rdata$r:00000A84 ; Segment permissions: Read
.rdata$r:00000A84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A84                 assume cs:_rdata$r
.rdata$r:00000A84                 ;org 0A84h
.rdata$r:00000A84 ; COMDAT (pick any)
.rdata$r:00000A84                 public ??_R4CEncoder@NPpmd@NCompress@@6BICompressSetCoderProperties@@@
.rdata$r:00000A84 ; const NCompress::NPpmd::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00000A84 ??_R4CEncoder@NPpmd@NCompress@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00000A84                                         ; DATA XREF: .rdata:00000740o
.rdata$r:00000A85                 db    0
.rdata$r:00000A86                 db    0
.rdata$r:00000A87                 db    0
.rdata$r:00000A88                 db    4
.rdata$r:00000A89                 db    0
.rdata$r:00000A8A                 db    0
.rdata$r:00000A8B                 db    0
.rdata$r:00000A8C                 db    0
.rdata$r:00000A8D                 db    0
.rdata$r:00000A8E                 db    0
.rdata$r:00000A8F                 db    0
.rdata$r:00000A90                 dd offset ??_R0?AVCEncoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CEncoder `RTTI Type Descriptor'
.rdata$r:00000A94                 dd offset ??_R3CEncoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A94 _rdata$r        ends
.rdata$r:00000A94
.rdata$r:00000A98 ; ===========================================================================
.rdata$r:00000A98
.rdata$r:00000A98 ; Segment type: Pure data
.rdata$r:00000A98 ; Segment permissions: Read
.rdata$r:00000A98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A98                 assume cs:_rdata$r
.rdata$r:00000A98                 ;org 0A98h
.rdata$r:00000A98 ; COMDAT (pick any)
.rdata$r:00000A98                 public ??_R4CEncoder@NPpmd@NCompress@@6BICompressWriteCoderProperties@@@
.rdata$r:00000A98 ; const NCompress::NPpmd::CEncoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata$r:00000A98 ??_R4CEncoder@NPpmd@NCompress@@6BICompressWriteCoderProperties@@@ db    0
.rdata$r:00000A98                                         ; DATA XREF: .rdata:0000072Co
.rdata$r:00000A99                 db    0
.rdata$r:00000A9A                 db    0
.rdata$r:00000A9B                 db    0
.rdata$r:00000A9C                 db    8
.rdata$r:00000A9D                 db    0
.rdata$r:00000A9E                 db    0
.rdata$r:00000A9F                 db    0
.rdata$r:00000AA0                 db    0
.rdata$r:00000AA1                 db    0
.rdata$r:00000AA2                 db    0
.rdata$r:00000AA3                 db    0
.rdata$r:00000AA4                 dd offset ??_R0?AVCEncoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CEncoder `RTTI Type Descriptor'
.rdata$r:00000AA8                 dd offset ??_R3CEncoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000AA8 _rdata$r        ends
.rdata$r:00000AA8
.text:00000AAC ; ===========================================================================
.text:00000AAC
.text:00000AAC ; Segment type: Pure code
.text:00000AAC ; Segment permissions: Read/Execute
.text:00000AAC _text           segment para public 'CODE' use32
.text:00000AAC                 assume cs:_text
.text:00000AAC                 ;org 0AACh
.text:00000AAC ; COMDAT (pick any)
.text:00000AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000AAC
.text:00000AAC ; =============== S U B R O U T I N E =======================================
.text:00000AAC
.text:00000AAC ; Attributes: bp-based frame
.text:00000AAC
.text:00000AAC ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000AAC                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000AAC ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+51p
.text:00000AAC
.text:00000AAC var_4           = dword ptr -4
.text:00000AAC
.text:00000AAC                 push    ebp
.text:00000AAD                 mov     ebp, esp
.text:00000AAF                 push    ecx
.text:00000AB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AB7                 mov     [ebp+var_4], ecx
.text:00000ABA                 mov     eax, [ebp+var_4]
.text:00000ABD                 mov     dword ptr [eax], 0
.text:00000AC3                 mov     eax, [ebp+var_4]
.text:00000AC6                 mov     esp, ebp
.text:00000AC8                 pop     ebp
.text:00000AC9                 retn
.text:00000AC9 ??0CMyUnknownImp@@QAE@XZ endp
.text:00000AC9
.text:00000AC9 ; ---------------------------------------------------------------------------
.text:00000ACA                 align 4
.text:00000ACA _text           ends
.text:00000ACA
.text:00000ACC ; ===========================================================================
.text:00000ACC
.text:00000ACC ; Segment type: Pure code
.text:00000ACC ; Segment permissions: Read/Execute
.text:00000ACC _text           segment para public 'CODE' use32
.text:00000ACC                 assume cs:_text
.text:00000ACC                 ;org 0ACCh
.text:00000ACC ; COMDAT (pick any)
.text:00000ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000ACC
.text:00000ACC ; =============== S U B R O U T I N E =======================================
.text:00000ACC
.text:00000ACC ; Attributes: bp-based frame
.text:00000ACC
.text:00000ACC ; _DWORD __thiscall CByteOutBufWrap::~CByteOutBufWrap(CByteOutBufWrap *__hidden this)
.text:00000ACC                 public ??1CByteOutBufWrap@@QAE@XZ
.text:00000ACC ??1CByteOutBufWrap@@QAE@XZ proc near    ; CODE XREF: NCompress::NPpmd::CEncoder::~CEncoder(void)+4Ep
.text:00000ACC                                         ; __unwindfunclet$??0CEncoder@NPpmd@NCompress@@QAE@XZ$0+6j
.text:00000ACC
.text:00000ACC var_4           = dword ptr -4
.text:00000ACC
.text:00000ACC                 push    ebp
.text:00000ACD                 mov     ebp, esp
.text:00000ACF                 push    ecx
.text:00000AD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AD7                 mov     [ebp+var_4], ecx
.text:00000ADA                 mov     ecx, [ebp+var_4] ; this
.text:00000ADD                 call    ?Free@CByteOutBufWrap@@QAEXXZ ; CByteOutBufWrap::Free(void)
.text:00000AE2                 add     esp, 4
.text:00000AE5                 cmp     ebp, esp
.text:00000AE7                 call    __RTC_CheckEsp
.text:00000AEC                 mov     esp, ebp
.text:00000AEE                 pop     ebp
.text:00000AEF                 retn
.text:00000AEF ??1CByteOutBufWrap@@QAE@XZ endp
.text:00000AEF
.text:00000AEF _text           ends
.text:00000AEF
.text:00000AF0 ; ===========================================================================
.text:00000AF0
.text:00000AF0 ; Segment type: Pure code
.text:00000AF0 ; Segment permissions: Read/Execute
.text:00000AF0 _text           segment para public 'CODE' use32
.text:00000AF0                 assume cs:_text
.text:00000AF0                 ;org 0AF0h
.text:00000AF0 ; COMDAT (pick any)
.text:00000AF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000AF0
.text:00000AF0 ; =============== S U B R O U T I N E =======================================
.text:00000AF0
.text:00000AF0 ; Attributes: bp-based frame
.text:00000AF0
.text:00000AF0 ; _DWORD __thiscall NCompress::NPpmd::CEncProps::CEncProps(NCompress::NPpmd::CEncProps *__hidden this)
.text:00000AF0                 public ??0CEncProps@NPpmd@NCompress@@QAE@XZ
.text:00000AF0 ??0CEncProps@NPpmd@NCompress@@QAE@XZ proc near
.text:00000AF0                                         ; CODE XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+98p
.text:00000AF0                                         ; NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+20p
.text:00000AF0
.text:00000AF0 var_4           = dword ptr -4
.text:00000AF0
.text:00000AF0                 push    ebp
.text:00000AF1                 mov     ebp, esp
.text:00000AF3                 push    ecx
.text:00000AF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AFB                 mov     [ebp+var_4], ecx
.text:00000AFE                 mov     eax, [ebp+var_4]
.text:00000B01                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00000B07                 mov     ecx, [ebp+var_4]
.text:00000B0A                 mov     dword ptr [ecx+4], 0FFFFFFFFh
.text:00000B11                 mov     edx, [ebp+var_4]
.text:00000B14                 mov     dword ptr [edx+8], 0FFFFFFFFh
.text:00000B1B                 mov     eax, [ebp+var_4]
.text:00000B1E                 mov     esp, ebp
.text:00000B20                 pop     ebp
.text:00000B21                 retn
.text:00000B21 ??0CEncProps@NPpmd@NCompress@@QAE@XZ endp
.text:00000B21
.text:00000B21 ; ---------------------------------------------------------------------------
.text:00000B22                 align 4
.text:00000B22 _text           ends
.text:00000B22
.text:00000B24 ; ===========================================================================
.text:00000B24
.text:00000B24 ; Segment type: Pure code
.text:00000B24 ; Segment permissions: Read/Execute
.text:00000B24 _text           segment para public 'CODE' use32
.text:00000B24                 assume cs:_text
.text:00000B24                 ;org 0B24h
.text:00000B24 ; COMDAT (pick any)
.text:00000B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B24
.text:00000B24 ; =============== S U B R O U T I N E =======================================
.text:00000B24
.text:00000B24 ; Attributes: bp-based frame
.text:00000B24
.text:00000B24 ; __int32 __stdcall NCompress::NPpmd::CEncoder::QueryInterface(NCompress::NPpmd::CEncoder *this, const struct _GUID *Buf1, void **)
.text:00000B24                 public ?QueryInterface@CEncoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00000B24 ?QueryInterface@CEncoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000B24                                         ; CODE XREF: [thunk]:NCompress::NPpmd::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00000B24                                         ; [thunk]:NCompress::NPpmd::CEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:00000B24                                         ; DATA XREF: ...
.text:00000B24
.text:00000B24 var_C           = dword ptr -0Ch
.text:00000B24 var_8           = dword ptr -8
.text:00000B24 var_4           = dword ptr -4
.text:00000B24 this            = dword ptr  8
.text:00000B24 Buf1            = dword ptr  0Ch
.text:00000B24 arg_8           = dword ptr  10h
.text:00000B24
.text:00000B24                 push    ebp
.text:00000B25                 mov     ebp, esp
.text:00000B27                 sub     esp, 0Ch
.text:00000B2A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000B31                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B3F                 mov     eax, [ebp+arg_8]
.text:00000B42                 mov     dword ptr [eax], 0
.text:00000B48                 push    offset _IID_IUnknown ; Buf2
.text:00000B4D                 mov     ecx, [ebp+Buf1]
.text:00000B50                 push    ecx             ; Buf1
.text:00000B51                 call    ___@8           ; __(x,x)
.text:00000B56                 test    eax, eax
.text:00000B58                 jz      short loc_B7C
.text:00000B5A                 cmp     [ebp+this], 0
.text:00000B5E                 jz      short loc_B6B
.text:00000B60                 mov     edx, [ebp+this]
.text:00000B63                 add     edx, 4
.text:00000B66                 mov     [ebp+var_4], edx
.text:00000B69                 jmp     short loc_B72
.text:00000B6B ; ---------------------------------------------------------------------------
.text:00000B6B
.text:00000B6B loc_B6B:                                ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+3Aj
.text:00000B6B                 mov     [ebp+var_4], 0
.text:00000B72
.text:00000B72 loc_B72:                                ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+45j
.text:00000B72                 mov     eax, [ebp+arg_8]
.text:00000B75                 mov     ecx, [ebp+var_4]
.text:00000B78                 mov     [eax], ecx
.text:00000B7A                 jmp     short loc_BEB
.text:00000B7C ; ---------------------------------------------------------------------------
.text:00000B7C
.text:00000B7C loc_B7C:                                ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+34j
.text:00000B7C                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:00000B81                 mov     edx, [ebp+Buf1]
.text:00000B84                 push    edx             ; Buf1
.text:00000B85                 call    ___@8           ; __(x,x)
.text:00000B8A                 test    eax, eax
.text:00000B8C                 jz      short loc_BB0
.text:00000B8E                 cmp     [ebp+this], 0
.text:00000B92                 jz      short loc_B9F
.text:00000B94                 mov     eax, [ebp+this]
.text:00000B97                 add     eax, 4
.text:00000B9A                 mov     [ebp+var_8], eax
.text:00000B9D                 jmp     short loc_BA6
.text:00000B9F ; ---------------------------------------------------------------------------
.text:00000B9F
.text:00000B9F loc_B9F:                                ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:00000B9F                 mov     [ebp+var_8], 0
.text:00000BA6
.text:00000BA6 loc_BA6:                                ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+79j
.text:00000BA6                 mov     ecx, [ebp+arg_8]
.text:00000BA9                 mov     edx, [ebp+var_8]
.text:00000BAC                 mov     [ecx], edx
.text:00000BAE                 jmp     short loc_BEB
.text:00000BB0 ; ---------------------------------------------------------------------------
.text:00000BB0
.text:00000BB0 loc_BB0:                                ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+68j
.text:00000BB0                 push    offset _IID_ICompressWriteCoderProperties ; Buf2
.text:00000BB5                 mov     eax, [ebp+Buf1]
.text:00000BB8                 push    eax             ; Buf1
.text:00000BB9                 call    ___@8           ; __(x,x)
.text:00000BBE                 test    eax, eax
.text:00000BC0                 jz      short loc_BE4
.text:00000BC2                 cmp     [ebp+this], 0
.text:00000BC6                 jz      short loc_BD3
.text:00000BC8                 mov     ecx, [ebp+this]
.text:00000BCB                 add     ecx, 8
.text:00000BCE                 mov     [ebp+var_C], ecx
.text:00000BD1                 jmp     short loc_BDA
.text:00000BD3 ; ---------------------------------------------------------------------------
.text:00000BD3
.text:00000BD3 loc_BD3:                                ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+A2j
.text:00000BD3                 mov     [ebp+var_C], 0
.text:00000BDA
.text:00000BDA loc_BDA:                                ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+ADj
.text:00000BDA                 mov     edx, [ebp+arg_8]
.text:00000BDD                 mov     eax, [ebp+var_C]
.text:00000BE0                 mov     [edx], eax
.text:00000BE2                 jmp     short loc_BEB
.text:00000BE4 ; ---------------------------------------------------------------------------
.text:00000BE4
.text:00000BE4 loc_BE4:                                ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+9Cj
.text:00000BE4                 mov     eax, 80004002h
.text:00000BE9                 jmp     short loc_BFC
.text:00000BEB ; ---------------------------------------------------------------------------
.text:00000BEB
.text:00000BEB loc_BEB:                                ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+56j
.text:00000BEB                                         ; NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+8Aj ...
.text:00000BEB                 mov     ecx, [ebp+this]
.text:00000BEE                 mov     edx, [ecx+0Ch]
.text:00000BF1                 add     edx, 1
.text:00000BF4                 mov     eax, [ebp+this]
.text:00000BF7                 mov     [eax+0Ch], edx
.text:00000BFA                 xor     eax, eax
.text:00000BFC
.text:00000BFC loc_BFC:                                ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+C5j
.text:00000BFC                 add     esp, 0Ch
.text:00000BFF                 cmp     ebp, esp
.text:00000C01                 call    __RTC_CheckEsp
.text:00000C06                 mov     esp, ebp
.text:00000C08                 pop     ebp
.text:00000C09                 retn    0Ch
.text:00000C09 ?QueryInterface@CEncoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000C09
.text:00000C09 _text           ends
.text:00000C09
.text:00000C0C ; ===========================================================================
.text:00000C0C
.text:00000C0C ; Segment type: Pure code
.text:00000C0C ; Segment permissions: Read/Execute
.text:00000C0C _text           segment para public 'CODE' use32
.text:00000C0C                 assume cs:_text
.text:00000C0C                 ;org 0C0Ch
.text:00000C0C ; COMDAT (pick any)
.text:00000C0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C0C
.text:00000C0C ; =============== S U B R O U T I N E =======================================
.text:00000C0C
.text:00000C0C ; Attributes: bp-based frame
.text:00000C0C
.text:00000C0C ; unsigned __int32 __stdcall NCompress::NPpmd::CEncoder::AddRef(NCompress::NPpmd::CEncoder *this)
.text:00000C0C                 public ?AddRef@CEncoder@NPpmd@NCompress@@UAGKXZ
.text:00000C0C ?AddRef@CEncoder@NPpmd@NCompress@@UAGKXZ proc near
.text:00000C0C                                         ; CODE XREF: [thunk]:NCompress::NPpmd::CEncoder::AddRef`adjustor{4}' (void)+5j
.text:00000C0C                                         ; [thunk]:NCompress::NPpmd::CEncoder::AddRef`adjustor{8}' (void)+5j
.text:00000C0C                                         ; DATA XREF: ...
.text:00000C0C
.text:00000C0C var_4           = dword ptr -4
.text:00000C0C this            = dword ptr  8
.text:00000C0C
.text:00000C0C                 push    ebp
.text:00000C0D                 mov     ebp, esp
.text:00000C0F                 push    ecx
.text:00000C10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C17                 mov     eax, [ebp+this]
.text:00000C1A                 mov     ecx, [eax+0Ch]
.text:00000C1D                 add     ecx, 1
.text:00000C20                 mov     [ebp+var_4], ecx
.text:00000C23                 mov     edx, [ebp+this]
.text:00000C26                 mov     eax, [ebp+var_4]
.text:00000C29                 mov     [edx+0Ch], eax
.text:00000C2C                 mov     eax, [ebp+var_4]
.text:00000C2F                 mov     esp, ebp
.text:00000C31                 pop     ebp
.text:00000C32                 retn    4
.text:00000C32 ?AddRef@CEncoder@NPpmd@NCompress@@UAGKXZ endp
.text:00000C32
.text:00000C32 ; ---------------------------------------------------------------------------
.text:00000C35                 align 4
.text:00000C35 _text           ends
.text:00000C35
.text:00000C38 ; ===========================================================================
.text:00000C38
.text:00000C38 ; Segment type: Pure code
.text:00000C38 ; Segment permissions: Read/Execute
.text:00000C38 _text           segment para public 'CODE' use32
.text:00000C38                 assume cs:_text
.text:00000C38                 ;org 0C38h
.text:00000C38 ; COMDAT (pick any)
.text:00000C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C38
.text:00000C38 ; =============== S U B R O U T I N E =======================================
.text:00000C38
.text:00000C38 ; Attributes: bp-based frame
.text:00000C38
.text:00000C38 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000C38                 public ___@8
.text:00000C38 ___@8           proc near               ; CODE XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:00000C38                                         ; NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+61p ...
.text:00000C38
.text:00000C38 Buf1            = dword ptr  8
.text:00000C38 Buf2            = dword ptr  0Ch
.text:00000C38
.text:00000C38                 push    ebp
.text:00000C39                 mov     ebp, esp
.text:00000C3B                 mov     eax, [ebp+Buf2]
.text:00000C3E                 push    eax             ; Buf2
.text:00000C3F                 mov     ecx, [ebp+Buf1]
.text:00000C42                 push    ecx             ; Buf1
.text:00000C43                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000C48                 cmp     ebp, esp
.text:00000C4A                 call    __RTC_CheckEsp
.text:00000C4F                 pop     ebp
.text:00000C50                 retn    8
.text:00000C50 ___@8           endp
.text:00000C50
.text:00000C50 ; ---------------------------------------------------------------------------
.text:00000C53                 align 4
.text:00000C53 _text           ends
.text:00000C53
.text:00000C54 ; ===========================================================================
.text:00000C54
.text:00000C54 ; Segment type: Pure code
.text:00000C54 ; Segment permissions: Read/Execute
.text:00000C54 _text           segment para public 'CODE' use32
.text:00000C54                 assume cs:_text
.text:00000C54                 ;org 0C54h
.text:00000C54 ; COMDAT (pick any)
.text:00000C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C54
.text:00000C54 ; =============== S U B R O U T I N E =======================================
.text:00000C54
.text:00000C54 ; Attributes: bp-based frame
.text:00000C54
.text:00000C54 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000C54                 public _IsEqualGUID@8
.text:00000C54 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000C54
.text:00000C54 Buf1            = dword ptr  8
.text:00000C54 Buf2            = dword ptr  0Ch
.text:00000C54
.text:00000C54                 push    ebp
.text:00000C55                 mov     ebp, esp
.text:00000C57                 push    10h             ; Size
.text:00000C59                 mov     eax, [ebp+Buf2]
.text:00000C5C                 push    eax             ; Buf2
.text:00000C5D                 mov     ecx, [ebp+Buf1]
.text:00000C60                 push    ecx             ; Buf1
.text:00000C61                 call    _memcmp
.text:00000C66                 add     esp, 0Ch
.text:00000C69                 neg     eax
.text:00000C6B                 sbb     eax, eax
.text:00000C6D                 add     eax, 1
.text:00000C70                 cmp     ebp, esp
.text:00000C72                 call    __RTC_CheckEsp
.text:00000C77                 pop     ebp
.text:00000C78                 retn    8
.text:00000C78 _IsEqualGUID@8  endp
.text:00000C78
.text:00000C78 ; ---------------------------------------------------------------------------
.text:00000C7B                 align 4
.text:00000C7B _text           ends
.text:00000C7B
.text:00000C7C ; ===========================================================================
.text:00000C7C
.text:00000C7C ; Segment type: Pure code
.text:00000C7C ; Segment permissions: Read/Execute
.text:00000C7C _text           segment para public 'CODE' use32
.text:00000C7C                 assume cs:_text
.text:00000C7C                 ;org 0C7Ch
.text:00000C7C ; COMDAT (pick any)
.text:00000C7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C7C
.text:00000C7C ; =============== S U B R O U T I N E =======================================
.text:00000C7C
.text:00000C7C ; Attributes: bp-based frame
.text:00000C7C
.text:00000C7C ; unsigned __int32 __stdcall NCompress::NPpmd::CEncoder::Release(NCompress::NPpmd::CEncoder *this)
.text:00000C7C                 public ?Release@CEncoder@NPpmd@NCompress@@UAGKXZ
.text:00000C7C ?Release@CEncoder@NPpmd@NCompress@@UAGKXZ proc near
.text:00000C7C                                         ; CODE XREF: [thunk]:NCompress::NPpmd::CEncoder::Release`adjustor{4}' (void)+5j
.text:00000C7C                                         ; [thunk]:NCompress::NPpmd::CEncoder::Release`adjustor{8}' (void)+5j
.text:00000C7C                                         ; DATA XREF: ...
.text:00000C7C
.text:00000C7C var_10          = dword ptr -10h
.text:00000C7C var_C           = dword ptr -0Ch
.text:00000C7C var_8           = dword ptr -8
.text:00000C7C var_4           = dword ptr -4
.text:00000C7C this            = dword ptr  8
.text:00000C7C
.text:00000C7C                 push    ebp
.text:00000C7D                 mov     ebp, esp
.text:00000C7F                 sub     esp, 10h
.text:00000C82                 mov     eax, 0CCCCCCCCh
.text:00000C87                 mov     [ebp+var_10], eax
.text:00000C8A                 mov     [ebp+var_C], eax
.text:00000C8D                 mov     [ebp+var_8], eax
.text:00000C90                 mov     [ebp+var_4], eax
.text:00000C93                 mov     eax, [ebp+this]
.text:00000C96                 mov     ecx, [eax+0Ch]
.text:00000C99                 sub     ecx, 1
.text:00000C9C                 mov     [ebp+var_C], ecx
.text:00000C9F                 mov     edx, [ebp+this]
.text:00000CA2                 mov     eax, [ebp+var_C]
.text:00000CA5                 mov     [edx+0Ch], eax
.text:00000CA8                 cmp     [ebp+var_C], 0
.text:00000CAC                 jz      short loc_CB6
.text:00000CAE                 mov     ecx, [ebp+this]
.text:00000CB1                 mov     eax, [ecx+0Ch]
.text:00000CB4                 jmp     short loc_CE0
.text:00000CB6 ; ---------------------------------------------------------------------------
.text:00000CB6
.text:00000CB6 loc_CB6:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Release(void)+30j
.text:00000CB6                 mov     edx, [ebp+this]
.text:00000CB9                 mov     [ebp+var_8], edx
.text:00000CBC                 mov     eax, [ebp+var_8]
.text:00000CBF                 mov     [ebp+var_4], eax
.text:00000CC2                 cmp     [ebp+var_4], 0
.text:00000CC6                 jz      short loc_CD7
.text:00000CC8                 push    1
.text:00000CCA                 mov     ecx, [ebp+var_4]
.text:00000CCD                 call    ??_GCEncoder@NPpmd@NCompress@@QAEPAXI@Z ; NCompress::NPpmd::CEncoder::`scalar deleting destructor'(uint)
.text:00000CD2                 mov     [ebp+var_10], eax
.text:00000CD5                 jmp     short loc_CDE
.text:00000CD7 ; ---------------------------------------------------------------------------
.text:00000CD7
.text:00000CD7 loc_CD7:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Release(void)+4Aj
.text:00000CD7                 mov     [ebp+var_10], 0
.text:00000CDE
.text:00000CDE loc_CDE:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Release(void)+59j
.text:00000CDE                 xor     eax, eax
.text:00000CE0
.text:00000CE0 loc_CE0:                                ; CODE XREF: NCompress::NPpmd::CEncoder::Release(void)+38j
.text:00000CE0                 add     esp, 10h
.text:00000CE3                 cmp     ebp, esp
.text:00000CE5                 call    __RTC_CheckEsp
.text:00000CEA                 mov     esp, ebp
.text:00000CEC                 pop     ebp
.text:00000CED                 retn    4
.text:00000CED ?Release@CEncoder@NPpmd@NCompress@@UAGKXZ endp
.text:00000CED
.text:00000CED _text           ends
.text:00000CED
.text:00000CF0 ; ===========================================================================
.text:00000CF0
.text:00000CF0 ; Segment type: Pure code
.text:00000CF0 ; Segment permissions: Read/Execute
.text:00000CF0 _text           segment para public 'CODE' use32
.text:00000CF0                 assume cs:_text
.text:00000CF0                 ;org 0CF0h
.text:00000CF0 ; COMDAT (pick any)
.text:00000CF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CF0
.text:00000CF0 ; =============== S U B R O U T I N E =======================================
.text:00000CF0
.text:00000CF0 ; Attributes: bp-based frame
.text:00000CF0
.text:00000CF0 ; public: void * __thiscall NCompress::NPpmd::CEncoder::`scalar deleting destructor'(unsigned int)
.text:00000CF0                 public ??_GCEncoder@NPpmd@NCompress@@QAEPAXI@Z
.text:00000CF0 ??_GCEncoder@NPpmd@NCompress@@QAEPAXI@Z proc near
.text:00000CF0                                         ; CODE XREF: NCompress::NPpmd::CEncoder::Release(void)+51p
.text:00000CF0
.text:00000CF0 var_4           = dword ptr -4
.text:00000CF0 arg_0           = dword ptr  8
.text:00000CF0
.text:00000CF0                 push    ebp
.text:00000CF1                 mov     ebp, esp
.text:00000CF3                 push    ecx
.text:00000CF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CFB                 mov     [ebp+var_4], ecx
.text:00000CFE                 mov     ecx, [ebp+var_4] ; this
.text:00000D01                 call    ??1CEncoder@NPpmd@NCompress@@QAE@XZ ; NCompress::NPpmd::CEncoder::~CEncoder(void)
.text:00000D06                 mov     eax, [ebp+arg_0]
.text:00000D09                 and     eax, 1
.text:00000D0C                 jz      short loc_D1A
.text:00000D0E                 mov     ecx, [ebp+var_4]
.text:00000D11                 push    ecx             ; void *
.text:00000D12                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000D17                 add     esp, 4
.text:00000D1A
.text:00000D1A loc_D1A:                                ; CODE XREF: NCompress::NPpmd::CEncoder::`scalar deleting destructor'(uint)+1Cj
.text:00000D1A                 mov     eax, [ebp+var_4]
.text:00000D1D                 add     esp, 4
.text:00000D20                 cmp     ebp, esp
.text:00000D22                 call    __RTC_CheckEsp
.text:00000D27                 mov     esp, ebp
.text:00000D29                 pop     ebp
.text:00000D2A                 retn    4
.text:00000D2A ??_GCEncoder@NPpmd@NCompress@@QAEPAXI@Z endp
.text:00000D2A
.text:00000D2A ; ---------------------------------------------------------------------------
.text:00000D2D                 align 10h
.text:00000D2D _text           ends
.text:00000D2D
.text:00000D30 ; ===========================================================================
.text:00000D30
.text:00000D30 ; Segment type: Pure code
.text:00000D30 ; Segment permissions: Read/Execute
.text:00000D30 _text           segment para public 'CODE' use32
.text:00000D30                 assume cs:_text
.text:00000D30                 ;org 0D30h
.text:00000D30 ; COMDAT (pick any)
.text:00000D30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D30
.text:00000D30 ; =============== S U B R O U T I N E =======================================
.text:00000D30
.text:00000D30 ; Attributes: bp-based frame
.text:00000D30
.text:00000D30 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00000D30                 public ??0ICompressCoder@@QAE@XZ
.text:00000D30 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+30p
.text:00000D30
.text:00000D30 var_4           = dword ptr -4
.text:00000D30
.text:00000D30                 push    ebp
.text:00000D31                 mov     ebp, esp
.text:00000D33                 push    ecx
.text:00000D34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D3B                 mov     [ebp+var_4], ecx
.text:00000D3E                 mov     ecx, [ebp+var_4]
.text:00000D41                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000D46                 mov     eax, [ebp+var_4]
.text:00000D49                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:00000D4F                 mov     eax, [ebp+var_4]
.text:00000D52                 add     esp, 4
.text:00000D55                 cmp     ebp, esp
.text:00000D57                 call    __RTC_CheckEsp
.text:00000D5C                 mov     esp, ebp
.text:00000D5E                 pop     ebp
.text:00000D5F                 retn
.text:00000D5F ??0ICompressCoder@@QAE@XZ endp
.text:00000D5F
.text:00000D5F _text           ends
.text:00000D5F
.rdata:00000D60 ; ===========================================================================
.rdata:00000D60
.rdata:00000D60 ; Segment type: Pure data
.rdata:00000D60 ; Segment permissions: Read
.rdata:00000D60 _rdata          segment dword public 'DATA' use32
.rdata:00000D60                 assume cs:_rdata
.rdata:00000D60                 ;org 0D60h
.rdata:00000D60 ; COMDAT (pick largest)
.rdata:00000D60                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00000D64                 public ??_7ICompressCoder@@6B@
.rdata:00000D64 ; const ICompressCoder::`vftable'
.rdata:00000D64 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00000D64                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00000D68                 dd offset __purecall
.rdata:00000D6C                 dd offset __purecall
.rdata:00000D70                 dd offset __purecall
.rdata:00000D70 _rdata          ends
.rdata:00000D70
.rdata$r:00000D74 ; ===========================================================================
.rdata$r:00000D74
.rdata$r:00000D74 ; Segment type: Pure data
.rdata$r:00000D74 ; Segment permissions: Read
.rdata$r:00000D74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D74                 assume cs:_rdata$r
.rdata$r:00000D74                 ;org 0D74h
.rdata$r:00000D74 ; COMDAT (pick any)
.rdata$r:00000D74                 public ??_R4ICompressCoder@@6B@
.rdata$r:00000D74 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00000D74 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00000D60o
.rdata$r:00000D75                 db    0
.rdata$r:00000D76                 db    0
.rdata$r:00000D77                 db    0
.rdata$r:00000D78                 db    0
.rdata$r:00000D79                 db    0
.rdata$r:00000D7A                 db    0
.rdata$r:00000D7B                 db    0
.rdata$r:00000D7C                 db    0
.rdata$r:00000D7D                 db    0
.rdata$r:00000D7E                 db    0
.rdata$r:00000D7F                 db    0
.rdata$r:00000D80                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000D84                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000D84 _rdata$r        ends
.rdata$r:00000D84
.text:00000D88 ; ===========================================================================
.text:00000D88
.text:00000D88 ; Segment type: Pure code
.text:00000D88 ; Segment permissions: Read/Execute
.text:00000D88 _text           segment para public 'CODE' use32
.text:00000D88                 assume cs:_text
.text:00000D88                 ;org 0D88h
.text:00000D88 ; COMDAT (pick any)
.text:00000D88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D88
.text:00000D88 ; =============== S U B R O U T I N E =======================================
.text:00000D88
.text:00000D88 ; Attributes: bp-based frame
.text:00000D88
.text:00000D88 ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:00000D88                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:00000D88 ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:00000D88                                         ; CODE XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+3Bp
.text:00000D88
.text:00000D88 var_4           = dword ptr -4
.text:00000D88
.text:00000D88                 push    ebp
.text:00000D89                 mov     ebp, esp
.text:00000D8B                 push    ecx
.text:00000D8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D93                 mov     [ebp+var_4], ecx
.text:00000D96                 mov     ecx, [ebp+var_4]
.text:00000D99                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000D9E                 mov     eax, [ebp+var_4]
.text:00000DA1                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:00000DA7                 mov     eax, [ebp+var_4]
.text:00000DAA                 add     esp, 4
.text:00000DAD                 cmp     ebp, esp
.text:00000DAF                 call    __RTC_CheckEsp
.text:00000DB4                 mov     esp, ebp
.text:00000DB6                 pop     ebp
.text:00000DB7                 retn
.text:00000DB7 ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:00000DB7
.text:00000DB7 _text           ends
.text:00000DB7
.rdata:00000DB8 ; ===========================================================================
.rdata:00000DB8
.rdata:00000DB8 ; Segment type: Pure data
.rdata:00000DB8 ; Segment permissions: Read
.rdata:00000DB8 _rdata          segment dword public 'DATA' use32
.rdata:00000DB8                 assume cs:_rdata
.rdata:00000DB8                 ;org 0DB8h
.rdata:00000DB8 ; COMDAT (pick largest)
.rdata:00000DB8                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:00000DBC                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:00000DBC ; const ICompressSetCoderProperties::`vftable'
.rdata:00000DBC ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:00000DBC                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:00000DC0                 dd offset __purecall
.rdata:00000DC4                 dd offset __purecall
.rdata:00000DC8                 dd offset __purecall
.rdata:00000DC8 _rdata          ends
.rdata:00000DC8
.rdata$r:00000DCC ; ===========================================================================
.rdata$r:00000DCC
.rdata$r:00000DCC ; Segment type: Pure data
.rdata$r:00000DCC ; Segment permissions: Read
.rdata$r:00000DCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000DCC                 assume cs:_rdata$r
.rdata$r:00000DCC                 ;org 0DCCh
.rdata$r:00000DCC ; COMDAT (pick any)
.rdata$r:00000DCC                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:00000DCC ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00000DCC ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:00000DCC                                         ; DATA XREF: .rdata:00000DB8o
.rdata$r:00000DCD                 db    0
.rdata$r:00000DCE                 db    0
.rdata$r:00000DCF                 db    0
.rdata$r:00000DD0                 db    0
.rdata$r:00000DD1                 db    0
.rdata$r:00000DD2                 db    0
.rdata$r:00000DD3                 db    0
.rdata$r:00000DD4                 db    0
.rdata$r:00000DD5                 db    0
.rdata$r:00000DD6                 db    0
.rdata$r:00000DD7                 db    0
.rdata$r:00000DD8                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000DDC                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000DDC _rdata$r        ends
.rdata$r:00000DDC
.text:00000DE0 ; ===========================================================================
.text:00000DE0
.text:00000DE0 ; Segment type: Pure code
.text:00000DE0 ; Segment permissions: Read/Execute
.text:00000DE0 _text           segment para public 'CODE' use32
.text:00000DE0                 assume cs:_text
.text:00000DE0                 ;org 0DE0h
.text:00000DE0 ; COMDAT (pick any)
.text:00000DE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000DE0
.text:00000DE0 ; =============== S U B R O U T I N E =======================================
.text:00000DE0
.text:00000DE0 ; Attributes: bp-based frame
.text:00000DE0
.text:00000DE0 ; _DWORD __thiscall ICompressWriteCoderProperties::ICompressWriteCoderProperties(ICompressWriteCoderProperties *__hidden this)
.text:00000DE0                 public ??0ICompressWriteCoderProperties@@QAE@XZ
.text:00000DE0 ??0ICompressWriteCoderProperties@@QAE@XZ proc near
.text:00000DE0                                         ; CODE XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+46p
.text:00000DE0
.text:00000DE0 var_4           = dword ptr -4
.text:00000DE0
.text:00000DE0                 push    ebp
.text:00000DE1                 mov     ebp, esp
.text:00000DE3                 push    ecx
.text:00000DE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DEB                 mov     [ebp+var_4], ecx
.text:00000DEE                 mov     ecx, [ebp+var_4]
.text:00000DF1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000DF6                 mov     eax, [ebp+var_4]
.text:00000DF9                 mov     dword ptr [eax], offset ??_7ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`vftable'
.text:00000DFF                 mov     eax, [ebp+var_4]
.text:00000E02                 add     esp, 4
.text:00000E05                 cmp     ebp, esp
.text:00000E07                 call    __RTC_CheckEsp
.text:00000E0C                 mov     esp, ebp
.text:00000E0E                 pop     ebp
.text:00000E0F                 retn
.text:00000E0F ??0ICompressWriteCoderProperties@@QAE@XZ endp
.text:00000E0F
.text:00000E0F _text           ends
.text:00000E0F
.rdata:00000E10 ; ===========================================================================
.rdata:00000E10
.rdata:00000E10 ; Segment type: Pure data
.rdata:00000E10 ; Segment permissions: Read
.rdata:00000E10 _rdata          segment dword public 'DATA' use32
.rdata:00000E10                 assume cs:_rdata
.rdata:00000E10                 ;org 0E10h
.rdata:00000E10 ; COMDAT (pick largest)
.rdata:00000E10                 dd offset ??_R4ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata:00000E14                 public ??_7ICompressWriteCoderProperties@@6B@
.rdata:00000E14 ; const ICompressWriteCoderProperties::`vftable'
.rdata:00000E14 ??_7ICompressWriteCoderProperties@@6B@ dd offset __purecall
.rdata:00000E14                                         ; DATA XREF: ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)+19o
.rdata:00000E18                 dd offset __purecall
.rdata:00000E1C                 dd offset __purecall
.rdata:00000E20                 dd offset __purecall
.rdata:00000E20 _rdata          ends
.rdata:00000E20
.rdata$r:00000E24 ; ===========================================================================
.rdata$r:00000E24
.rdata$r:00000E24 ; Segment type: Pure data
.rdata$r:00000E24 ; Segment permissions: Read
.rdata$r:00000E24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E24                 assume cs:_rdata$r
.rdata$r:00000E24                 ;org 0E24h
.rdata$r:00000E24 ; COMDAT (pick any)
.rdata$r:00000E24                 public ??_R4ICompressWriteCoderProperties@@6B@
.rdata$r:00000E24 ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00000E24 ??_R4ICompressWriteCoderProperties@@6B@ db    0
.rdata$r:00000E24                                         ; DATA XREF: .rdata:00000E10o
.rdata$r:00000E25                 db    0
.rdata$r:00000E26                 db    0
.rdata$r:00000E27                 db    0
.rdata$r:00000E28                 db    0
.rdata$r:00000E29                 db    0
.rdata$r:00000E2A                 db    0
.rdata$r:00000E2B                 db    0
.rdata$r:00000E2C                 db    0
.rdata$r:00000E2D                 db    0
.rdata$r:00000E2E                 db    0
.rdata$r:00000E2F                 db    0
.rdata$r:00000E30                 dd offset ??_R0?AUICompressWriteCoderProperties@@@8 ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00000E34                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E34 _rdata$r        ends
.rdata$r:00000E34
.text:00000E38 ; ===========================================================================
.text:00000E38
.text:00000E38 ; Segment type: Pure code
.text:00000E38 ; Segment permissions: Read/Execute
.text:00000E38 _text           segment para public 'CODE' use32
.text:00000E38                 assume cs:_text
.text:00000E38                 ;org 0E38h
.text:00000E38 ; COMDAT (pick any)
.text:00000E38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E38
.text:00000E38 ; =============== S U B R O U T I N E =======================================
.text:00000E38
.text:00000E38 ; Attributes: bp-based frame
.text:00000E38
.text:00000E38 ; public: __thiscall IUnknown::IUnknown(void)
.text:00000E38                 public ??0IUnknown@@QAE@XZ
.text:00000E38 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00000E38                                         ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)+11p ...
.text:00000E38
.text:00000E38 var_4           = dword ptr -4
.text:00000E38
.text:00000E38                 push    ebp
.text:00000E39                 mov     ebp, esp
.text:00000E3B                 push    ecx
.text:00000E3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E43                 mov     [ebp+var_4], ecx
.text:00000E46                 mov     eax, [ebp+var_4]
.text:00000E49                 mov     esp, ebp
.text:00000E4B                 pop     ebp
.text:00000E4C                 retn
.text:00000E4C ??0IUnknown@@QAE@XZ endp
.text:00000E4C
.text:00000E4C ; ---------------------------------------------------------------------------
.text:00000E4D                 align 10h
.text:00000E4D _text           ends
.text:00000E4D
.text:00000E50 ; ===========================================================================
.text:00000E50
.text:00000E50 ; Segment type: Pure code
.text:00000E50 ; Segment permissions: Read/Execute
.text:00000E50 _text           segment para public 'CODE' use32
.text:00000E50                 assume cs:_text
.text:00000E50                 ;org 0E50h
.text:00000E50 ; COMDAT (pick any)
.text:00000E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E50
.text:00000E50 ; =============== S U B R O U T I N E =======================================
.text:00000E50
.text:00000E50 ; Attributes: bp-based frame
.text:00000E50
.text:00000E50 ; void __thiscall CByteOutBufWrap::Init(CByteOutBufWrap *__hidden this)
.text:00000E50                 public ?Init@CByteOutBufWrap@@QAEXXZ
.text:00000E50 ?Init@CByteOutBufWrap@@QAEXXZ proc near ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+9Cp
.text:00000E50
.text:00000E50 var_4           = dword ptr -4
.text:00000E50
.text:00000E50                 push    ebp
.text:00000E51                 mov     ebp, esp
.text:00000E53                 push    ecx
.text:00000E54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E5B                 mov     [ebp+var_4], ecx
.text:00000E5E                 mov     eax, [ebp+var_4]
.text:00000E61                 mov     ecx, [ebp+var_4]
.text:00000E64                 mov     edx, [ecx+0Ch]
.text:00000E67                 mov     [eax+4], edx
.text:00000E6A                 mov     eax, [ebp+var_4]
.text:00000E6D                 mov     ecx, [eax+0Ch]
.text:00000E70                 mov     edx, [ebp+var_4]
.text:00000E73                 add     ecx, [edx+10h]
.text:00000E76                 mov     eax, [ebp+var_4]
.text:00000E79                 mov     [eax+8], ecx
.text:00000E7C                 mov     ecx, [ebp+var_4]
.text:00000E7F                 mov     dword ptr [ecx+18h], 0
.text:00000E86                 mov     dword ptr [ecx+1Ch], 0
.text:00000E8D                 mov     edx, [ebp+var_4]
.text:00000E90                 mov     dword ptr [edx+20h], 0
.text:00000E97                 mov     esp, ebp
.text:00000E99                 pop     ebp
.text:00000E9A                 retn
.text:00000E9A ?Init@CByteOutBufWrap@@QAEXXZ endp
.text:00000E9A
.text:00000E9A ; ---------------------------------------------------------------------------
.text:00000E9B                 align 4
.text:00000E9B _text           ends
.text:00000E9B
.text:00000E9C ; ===========================================================================
.text:00000E9C
.text:00000E9C ; Segment type: Pure code
.text:00000E9C ; Segment permissions: Read/Execute
.text:00000E9C _text           segment para public 'CODE' use32
.text:00000E9C                 assume cs:_text
.text:00000E9C                 ;org 0E9Ch
.text:00000E9C ; COMDAT (pick any)
.text:00000E9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E9C
.text:00000E9C ; =============== S U B R O U T I N E =======================================
.text:00000E9C
.text:00000E9C ; Attributes: bp-based frame
.text:00000E9C
.text:00000E9C ; unsigned __int64 __thiscall CByteOutBufWrap::GetProcessed(CByteOutBufWrap *__hidden this)
.text:00000E9C                 public ?GetProcessed@CByteOutBufWrap@@QBE_KXZ
.text:00000E9C ?GetProcessed@CByteOutBufWrap@@QBE_KXZ proc near
.text:00000E9C                                         ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+199p
.text:00000E9C
.text:00000E9C var_4           = dword ptr -4
.text:00000E9C
.text:00000E9C                 push    ebp
.text:00000E9D                 mov     ebp, esp
.text:00000E9F                 push    ecx
.text:00000EA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EA7                 mov     [ebp+var_4], ecx
.text:00000EAA                 mov     eax, [ebp+var_4]
.text:00000EAD                 mov     ecx, [ebp+var_4]
.text:00000EB0                 mov     eax, [eax+4]
.text:00000EB3                 sub     eax, [ecx+0Ch]
.text:00000EB6                 cdq
.text:00000EB7                 mov     ecx, [ebp+var_4]
.text:00000EBA                 add     eax, [ecx+18h]
.text:00000EBD                 adc     edx, [ecx+1Ch]
.text:00000EC0                 mov     esp, ebp
.text:00000EC2                 pop     ebp
.text:00000EC3                 retn
.text:00000EC3 ?GetProcessed@CByteOutBufWrap@@QBE_KXZ endp
.text:00000EC3
.text:00000EC3 _text           ends
.text:00000EC3
.text:00000EC4 ; ===========================================================================
.text:00000EC4
.text:00000EC4 ; Segment type: Pure code
.text:00000EC4 ; Segment permissions: Read/Execute
.text:00000EC4 _text           segment para public 'CODE' use32
.text:00000EC4                 assume cs:_text
.text:00000EC4                 ;org 0EC4h
.text:00000EC4 ; COMDAT (pick any)
.text:00000EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000EC4
.text:00000EC4 ; =============== S U B R O U T I N E =======================================
.text:00000EC4
.text:00000EC4
.text:00000EC4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CEncoder::Release`adjustor{4}' (void)
.text:00000EC4                 public ?Release@CEncoder@NPpmd@NCompress@@W3AGKXZ
.text:00000EC4 ?Release@CEncoder@NPpmd@NCompress@@W3AGKXZ proc near
.text:00000EC4                                         ; DATA XREF: .rdata:0000074Co
.text:00000EC4
.text:00000EC4 arg_0           = dword ptr  4
.text:00000EC4
.text:00000EC4                 sub     [esp+arg_0], 4
.text:00000EC9                 jmp     ?Release@CEncoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CEncoder::Release(void)
.text:00000EC9 ?Release@CEncoder@NPpmd@NCompress@@W3AGKXZ endp
.text:00000EC9
.text:00000EC9 ; ---------------------------------------------------------------------------
.text:00000ECE                 align 10h
.text:00000ECE _text           ends
.text:00000ECE
.text:00000ED0 ; ===========================================================================
.text:00000ED0
.text:00000ED0 ; Segment type: Pure code
.text:00000ED0 ; Segment permissions: Read/Execute
.text:00000ED0 _text           segment para public 'CODE' use32
.text:00000ED0                 assume cs:_text
.text:00000ED0                 ;org 0ED0h
.text:00000ED0 ; COMDAT (pick any)
.text:00000ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000ED0
.text:00000ED0 ; =============== S U B R O U T I N E =======================================
.text:00000ED0
.text:00000ED0
.text:00000ED0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CEncoder::Release`adjustor{8}' (void)
.text:00000ED0                 public ?Release@CEncoder@NPpmd@NCompress@@W7AGKXZ
.text:00000ED0 ?Release@CEncoder@NPpmd@NCompress@@W7AGKXZ proc near
.text:00000ED0                                         ; DATA XREF: .rdata:00000738o
.text:00000ED0
.text:00000ED0 arg_0           = dword ptr  4
.text:00000ED0
.text:00000ED0                 sub     [esp+arg_0], 8
.text:00000ED5                 jmp     ?Release@CEncoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CEncoder::Release(void)
.text:00000ED5 ?Release@CEncoder@NPpmd@NCompress@@W7AGKXZ endp
.text:00000ED5
.text:00000ED5 ; ---------------------------------------------------------------------------
.text:00000EDA                 align 4
.text:00000EDA _text           ends
.text:00000EDA
.text:00000EDC ; ===========================================================================
.text:00000EDC
.text:00000EDC ; Segment type: Pure code
.text:00000EDC ; Segment permissions: Read/Execute
.text:00000EDC _text           segment para public 'CODE' use32
.text:00000EDC                 assume cs:_text
.text:00000EDC                 ;org 0EDCh
.text:00000EDC ; COMDAT (pick any)
.text:00000EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000EDC
.text:00000EDC ; =============== S U B R O U T I N E =======================================
.text:00000EDC
.text:00000EDC
.text:00000EDC ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CEncoder::AddRef`adjustor{4}' (void)
.text:00000EDC                 public ?AddRef@CEncoder@NPpmd@NCompress@@W3AGKXZ
.text:00000EDC ?AddRef@CEncoder@NPpmd@NCompress@@W3AGKXZ proc near
.text:00000EDC                                         ; DATA XREF: .rdata:00000748o
.text:00000EDC
.text:00000EDC arg_0           = dword ptr  4
.text:00000EDC
.text:00000EDC                 sub     [esp+arg_0], 4
.text:00000EE1                 jmp     ?AddRef@CEncoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CEncoder::AddRef(void)
.text:00000EE1 ?AddRef@CEncoder@NPpmd@NCompress@@W3AGKXZ endp
.text:00000EE1
.text:00000EE1 ; ---------------------------------------------------------------------------
.text:00000EE6                 align 4
.text:00000EE6 _text           ends
.text:00000EE6
.text:00000EE8 ; ===========================================================================
.text:00000EE8
.text:00000EE8 ; Segment type: Pure code
.text:00000EE8 ; Segment permissions: Read/Execute
.text:00000EE8 _text           segment para public 'CODE' use32
.text:00000EE8                 assume cs:_text
.text:00000EE8                 ;org 0EE8h
.text:00000EE8 ; COMDAT (pick any)
.text:00000EE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000EE8
.text:00000EE8 ; =============== S U B R O U T I N E =======================================
.text:00000EE8
.text:00000EE8
.text:00000EE8 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CEncoder::AddRef`adjustor{8}' (void)
.text:00000EE8                 public ?AddRef@CEncoder@NPpmd@NCompress@@W7AGKXZ
.text:00000EE8 ?AddRef@CEncoder@NPpmd@NCompress@@W7AGKXZ proc near
.text:00000EE8                                         ; DATA XREF: .rdata:00000734o
.text:00000EE8
.text:00000EE8 arg_0           = dword ptr  4
.text:00000EE8
.text:00000EE8                 sub     [esp+arg_0], 8
.text:00000EED                 jmp     ?AddRef@CEncoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CEncoder::AddRef(void)
.text:00000EED ?AddRef@CEncoder@NPpmd@NCompress@@W7AGKXZ endp
.text:00000EED
.text:00000EED ; ---------------------------------------------------------------------------
.text:00000EF2                 align 4
.text:00000EF2 _text           ends
.text:00000EF2
.text:00000EF4 ; ===========================================================================
.text:00000EF4
.text:00000EF4 ; Segment type: Pure code
.text:00000EF4 ; Segment permissions: Read/Execute
.text:00000EF4 _text           segment para public 'CODE' use32
.text:00000EF4                 assume cs:_text
.text:00000EF4                 ;org 0EF4h
.text:00000EF4 ; COMDAT (pick any)
.text:00000EF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000EF4
.text:00000EF4 ; =============== S U B R O U T I N E =======================================
.text:00000EF4
.text:00000EF4
.text:00000EF4 ; [thunk]:public: virtual long __stdcall NCompress::NPpmd::CEncoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00000EF4                 public ?QueryInterface@CEncoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00000EF4 ?QueryInterface@CEncoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00000EF4                                         ; DATA XREF: .rdata:const NCompress::NPpmd::CEncoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00000EF4
.text:00000EF4 arg_0           = dword ptr  4
.text:00000EF4
.text:00000EF4                 sub     [esp+arg_0], 4
.text:00000EF9                 jmp     ?QueryInterface@CEncoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00000EF9 ?QueryInterface@CEncoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00000EF9
.text:00000EF9 ; ---------------------------------------------------------------------------
.text:00000EFE                 align 10h
.text:00000EFE _text           ends
.text:00000EFE
.text:00000F00 ; ===========================================================================
.text:00000F00
.text:00000F00 ; Segment type: Pure code
.text:00000F00 ; Segment permissions: Read/Execute
.text:00000F00 _text           segment para public 'CODE' use32
.text:00000F00                 assume cs:_text
.text:00000F00                 ;org 0F00h
.text:00000F00 ; COMDAT (pick any)
.text:00000F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F00
.text:00000F00 ; =============== S U B R O U T I N E =======================================
.text:00000F00
.text:00000F00
.text:00000F00 ; [thunk]:public: virtual long __stdcall NCompress::NPpmd::CEncoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00000F00                 public ?QueryInterface@CEncoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00000F00 ?QueryInterface@CEncoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00000F00                                         ; DATA XREF: .rdata:const NCompress::NPpmd::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}o
.text:00000F00
.text:00000F00 arg_0           = dword ptr  4
.text:00000F00
.text:00000F00                 sub     [esp+arg_0], 8
.text:00000F05                 jmp     ?QueryInterface@CEncoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00000F05 ?QueryInterface@CEncoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00000F05
.text:00000F05 _text           ends
.text:00000F05
UNDEF:00000F10 ; ===========================================================================
UNDEF:00000F10
UNDEF:00000F10 ; Segment type: Externs
UNDEF:00000F10 ; UNDEF
UNDEF:00000F10                 extrn __RTC_Shutdown:near
UNDEF:00000F10                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000F14                 extrn __RTC_InitBase:near
UNDEF:00000F14                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000F18 ; __stdcall Ppmd7_Construct(x)
UNDEF:00000F18                 extrn _Ppmd7_Construct@4:near
UNDEF:00000F18                                         ; CODE XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+C0p
UNDEF:00000F1C ; public: __thiscall CByteOutBufWrap::CByteOutBufWrap(void)
UNDEF:00000F1C                 extrn ??0CByteOutBufWrap@@QAE@XZ:near
UNDEF:00000F1C                                         ; CODE XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+83p
UNDEF:00000F20                 extrn ___security_cookie:near
UNDEF:00000F20                                         ; DATA XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+19r
UNDEF:00000F20                                         ; NCompress::NPpmd::CEncoder::WriteCoderProperties(ISequentialOutStream *)+1Dr
UNDEF:00000F24                 extrn ___CxxFrameHandler3:near
UNDEF:00000F24                                         ; CODE XREF: __ehhandler$??0CEncoder@NPpmd@NCompress@@QAE@XZ+16j
UNDEF:00000F28 ; __fastcall __security_check_cookie(x)
UNDEF:00000F28                 extrn @__security_check_cookie@4:near
UNDEF:00000F28                                         ; CODE XREF: NCompress::NPpmd::CEncoder::WriteCoderProperties(ISequentialOutStream *)+6Bp
UNDEF:00000F28                                         ; __ehhandler$??0CEncoder@NPpmd@NCompress@@QAE@XZ+Cp
UNDEF:00000F2C                 extrn __RTC_CheckEsp:near
UNDEF:00000F2C                                         ; CODE XREF: NCompress::NPpmd::CEncoder::CEncoder(void)+DFp
UNDEF:00000F2C                                         ; NCompress::NPpmd::CEncoder::~CEncoder(void)+58p ...
UNDEF:00000F30 ; const type_info::`vftable'
UNDEF:00000F30                 extrn ??_7type_info@@6B@:near
UNDEF:00000F30                                         ; DATA XREF: .data:NCompress::NPpmd::CEncoder `RTTI Type Descriptor'o
UNDEF:00000F30                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00000F34 ; void __thiscall CByteOutBufWrap::Free(CByteOutBufWrap *__hidden this)
UNDEF:00000F34                 extrn ?Free@CByteOutBufWrap@@QAEXXZ:near
UNDEF:00000F34                                         ; CODE XREF: CByteOutBufWrap::~CByteOutBufWrap(void)+11p
UNDEF:00000F38                 extrn _IID_ICompressWriteCoderProperties:near
UNDEF:00000F38                                         ; DATA XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *):loc_BB0o
UNDEF:00000F3C                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:00000F3C                                         ; DATA XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *):loc_B7Co
UNDEF:00000F40 ; const IID IID_IUnknown
UNDEF:00000F40                 extrn _IID_IUnknown:near
UNDEF:00000F40                                         ; DATA XREF: NCompress::NPpmd::CEncoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00000F44 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000F44                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00000F48 ; void __cdecl operator delete(void *)
UNDEF:00000F48                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NPpmd::CEncoder::`scalar deleting destructor'(uint)+22p
UNDEF:00000F4C                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00000F4C                                         ; .rdata:00000D68o ...
UNDEF:00000F50 ; __stdcall Ppmd7_Free(x, x)
UNDEF:00000F50                 extrn _Ppmd7_Free@8:near
UNDEF:00000F50                                         ; CODE XREF: NCompress::NPpmd::CEncoder::~CEncoder(void)+43p
UNDEF:00000F54                 extrn _g_BigAlloc:near  ; DATA XREF: NCompress::NPpmd::CEncoder::~CEncoder(void)+37o
UNDEF:00000F54                                         ; NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_520o
UNDEF:00000F58 ; __stdcall MidFree(x)
UNDEF:00000F58                 extrn _MidFree@4:near   ; CODE XREF: NCompress::NPpmd::CEncoder::~CEncoder(void)+32p
UNDEF:00000F5C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000F5C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000F5C                                         ; CODE XREF: NCompress::NPpmd::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+167p
UNDEF:00000F5C                                         ; NCompress::NPpmd::CEncoder::WriteCoderProperties(ISequentialOutStream *)+5Fp ...
UNDEF:00000F60 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00000F60                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00000F60                                         ; CODE XREF: NCompress::NPpmd::CEncoder::WriteCoderProperties(ISequentialOutStream *)+50p
UNDEF:00000F64 ; __stdcall Ppmd7_EncodeSymbol(x, x, x)
UNDEF:00000F64                 extrn _Ppmd7_EncodeSymbol@12:near
UNDEF:00000F64                                         ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+161p
UNDEF:00000F68 ; __int32 __thiscall CByteOutBufWrap::Flush(CByteOutBufWrap *__hidden this)
UNDEF:00000F68                 extrn ?Flush@CByteOutBufWrap@@QAEJXZ:near
UNDEF:00000F68                                         ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+121p
UNDEF:00000F6C ; __stdcall Ppmd7z_RangeEnc_FlushData(x)
UNDEF:00000F6C                 extrn _Ppmd7z_RangeEnc_FlushData@4:near
UNDEF:00000F6C                                         ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+116p
UNDEF:00000F70 ; __stdcall Ppmd7_Init(x, x)
UNDEF:00000F70                 extrn _Ppmd7_Init@8:near
UNDEF:00000F70                                         ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+BEp
UNDEF:00000F74 ; __stdcall Ppmd7z_RangeEnc_Init(x)
UNDEF:00000F74                 extrn _Ppmd7z_RangeEnc_Init@4:near
UNDEF:00000F74                                         ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+A8p
UNDEF:00000F78 ; __stdcall Ppmd7_Alloc(x, x, x)
UNDEF:00000F78                 extrn _Ppmd7_Alloc@12:near
UNDEF:00000F78                                         ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+7Ap
UNDEF:00000F7C ; bool __thiscall CByteOutBufWrap::Alloc(CByteOutBufWrap *__hidden this, unsigned int)
UNDEF:00000F7C                 extrn ?Alloc@CByteOutBufWrap@@QAE_NI@Z:near
UNDEF:00000F7C                                         ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+4Ep
UNDEF:00000F80 ; __stdcall MidAlloc(x)
UNDEF:00000F80                 extrn _MidAlloc@4:near  ; CODE XREF: NCompress::NPpmd::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+25p
UNDEF:00000F80
UNDEF:00000F80