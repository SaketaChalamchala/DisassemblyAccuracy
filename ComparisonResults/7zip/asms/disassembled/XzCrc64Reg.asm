.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 87B8DA809E4C49F1D5B38B26EA62FCB5
.rdata:00000000 ; Input CRC32 : 9A6377E6
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\XzCrc64Reg.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG66540        db 'CRC64',0            ; DATA XREF: .rdata:00000018o
.rdata:00000006                 align 4
.rdata:00000008 ; struct CHasherInfo g_HasherInfo
.rdata:00000008 _g_HasherInfo   dd offset ?CreateHasherSpec@@YGPAUIHasher@@XZ
.rdata:00000008                                         ; DATA XREF: CRegHasher_CXzCrc64Hasher::CRegHasher_CXzCrc64Hasher(void)+Eo
.rdata:00000008                                         ; CreateHasherSpec(void)
.rdata:0000000C                 align 10h
.rdata:00000010                 db    4
.rdata:00000011                 db    0
.rdata:00000012                 db    0
.rdata:00000013                 db    0
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 dd offset $SG66540      ; "CRC64"
.rdata:0000001C                 db    8
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:0000001F _rdata          ends
.rdata:0000001F
.text:00000020 ; ===========================================================================
.text:00000020
.text:00000020 ; Segment type: Pure code
.text:00000020 ; Segment permissions: Read/Execute
.text:00000020 _text           segment para public 'CODE' use32
.text:00000020                 assume cs:_text
.text:00000020                 ;org 20h
.text:00000020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020 ; void __stdcall CXzCrc64Hasher::Init(CXzCrc64Hasher *this)
.text:00000020                 public ?Init@CXzCrc64Hasher@@UAGXXZ
.text:00000020 ?Init@CXzCrc64Hasher@@UAGXXZ proc near  ; DATA XREF: .rdata:0000020Co
.text:00000020
.text:00000020 this            = dword ptr  8
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 mov     eax, [ebp+this]
.text:00000026                 mov     dword ptr [eax+8], 0FFFFFFFFh
.text:0000002D                 mov     dword ptr [eax+0Ch], 0FFFFFFFFh
.text:00000034                 pop     ebp
.text:00000035                 retn    4
.text:00000035 ?Init@CXzCrc64Hasher@@UAGXXZ endp
.text:00000035
.text:00000035 ; ---------------------------------------------------------------------------
.text:00000038                 align 10h
.text:00000040
.text:00000040 ; =============== S U B R O U T I N E =======================================
.text:00000040
.text:00000040 ; Attributes: bp-based frame
.text:00000040
.text:00000040 ; void __stdcall CXzCrc64Hasher::Update(CXzCrc64Hasher *this, const void *, unsigned int)
.text:00000040                 public ?Update@CXzCrc64Hasher@@UAGXPBXI@Z
.text:00000040 ?Update@CXzCrc64Hasher@@UAGXPBXI@Z proc near ; DATA XREF: .rdata:00000210o
.text:00000040
.text:00000040 this            = dword ptr  8
.text:00000040 arg_4           = dword ptr  0Ch
.text:00000040 arg_8           = dword ptr  10h
.text:00000040
.text:00000040                 push    ebp
.text:00000041                 mov     ebp, esp
.text:00000043                 mov     eax, [ebp+this]
.text:00000046                 mov     ecx, [eax+0Ch]
.text:00000049                 push    ecx
.text:0000004A                 mov     edx, [eax+8]
.text:0000004D                 push    edx
.text:0000004E                 mov     edx, [ebp+arg_8]
.text:00000051                 mov     ecx, [ebp+arg_4]
.text:00000054                 call    @Crc64Update@16 ; Crc64Update(x,x,x,x)
.text:00000059                 mov     ecx, [ebp+this]
.text:0000005C                 mov     [ecx+8], eax
.text:0000005F                 mov     [ecx+0Ch], edx
.text:00000062                 cmp     ebp, esp
.text:00000064                 call    __RTC_CheckEsp
.text:00000069                 pop     ebp
.text:0000006A                 retn    0Ch
.text:0000006A ?Update@CXzCrc64Hasher@@UAGXPBXI@Z endp
.text:0000006A
.text:0000006A ; ---------------------------------------------------------------------------
.text:0000006D                 align 10h
.text:00000070
.text:00000070 ; =============== S U B R O U T I N E =======================================
.text:00000070
.text:00000070 ; Attributes: bp-based frame
.text:00000070
.text:00000070 ; void __stdcall CXzCrc64Hasher::Final(CXzCrc64Hasher *this, unsigned __int8 *)
.text:00000070                 public ?Final@CXzCrc64Hasher@@UAGXPAE@Z
.text:00000070 ?Final@CXzCrc64Hasher@@UAGXPAE@Z proc near ; DATA XREF: .rdata:00000214o
.text:00000070
.text:00000070 var_8           = dword ptr -8
.text:00000070 var_4           = dword ptr -4
.text:00000070 this            = dword ptr  8
.text:00000070 arg_4           = dword ptr  0Ch
.text:00000070
.text:00000070                 push    ebp
.text:00000071                 mov     ebp, esp
.text:00000073                 sub     esp, 8
.text:00000076                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000007D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000084                 mov     eax, [ebp+this]
.text:00000087                 mov     ecx, [eax+8]
.text:0000008A                 xor     ecx, 0FFFFFFFFh
.text:0000008D                 mov     edx, [eax+0Ch]
.text:00000090                 xor     edx, 0FFFFFFFFh
.text:00000093                 mov     [ebp+var_8], ecx
.text:00000096                 mov     [ebp+var_4], edx
.text:00000099                 mov     eax, [ebp+arg_4]
.text:0000009C                 mov     ecx, [ebp+var_8]
.text:0000009F                 mov     [eax], ecx
.text:000000A1                 mov     edx, [ebp+var_4]
.text:000000A4                 mov     [eax+4], edx
.text:000000A7                 mov     esp, ebp
.text:000000A9                 pop     ebp
.text:000000AA                 retn    8
.text:000000AA ?Final@CXzCrc64Hasher@@UAGXPAE@Z endp
.text:000000AA
.text:000000AA ; ---------------------------------------------------------------------------
.text:000000AD                 align 10h
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; unsigned int __stdcall CXzCrc64Hasher::GetDigestSize(CXzCrc64Hasher *this)
.text:000000B0                 public ?GetDigestSize@CXzCrc64Hasher@@UAGIXZ
.text:000000B0 ?GetDigestSize@CXzCrc64Hasher@@UAGIXZ proc near ; DATA XREF: .rdata:00000218o
.text:000000B0
.text:000000B0 this            = dword ptr  8
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 mov     eax, 8
.text:000000B8                 pop     ebp
.text:000000B9                 retn    4
.text:000000B9 ?GetDigestSize@CXzCrc64Hasher@@UAGIXZ endp
.text:000000B9
.text:000000B9 ; ---------------------------------------------------------------------------
.text:000000BC                 align 10h
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; struct IHasher * __stdcall CreateHasherSpec(void)
.text:000000C0 ?CreateHasherSpec@@YGPAUIHasher@@XZ proc near
.text:000000C0                                         ; DATA XREF: .rdata:_g_HasherInfoo
.text:000000C0
.text:000000C0 var_18          = dword ptr -18h
.text:000000C0 var_14          = dword ptr -14h
.text:000000C0 var_10          = dword ptr -10h
.text:000000C0 var_C           = dword ptr -0Ch
.text:000000C0 var_4           = dword ptr -4
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 push    0FFFFFFFFh
.text:000000C5                 push    offset __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ
.text:000000CA                 mov     eax, large fs:0
.text:000000D0                 push    eax
.text:000000D1                 sub     esp, 0Ch
.text:000000D4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000000DB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000000E2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000E9                 mov     eax, dword ptr ds:___security_cookie
.text:000000EE                 xor     eax, ebp
.text:000000F0                 push    eax
.text:000000F1                 lea     eax, [ebp+var_C]
.text:000000F4                 mov     large fs:0, eax
.text:000000FA                 push    90h ; 'É'       ; unsigned int
.text:000000FF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000104                 add     esp, 4
.text:00000107                 mov     [ebp+var_14], eax
.text:0000010A                 mov     [ebp+var_4], 0
.text:00000111                 cmp     [ebp+var_14], 0
.text:00000115                 jz      short loc_124
.text:00000117                 mov     ecx, [ebp+var_14]
.text:0000011A                 call    ??0CXzCrc64Hasher@@QAE@XZ ; CXzCrc64Hasher::CXzCrc64Hasher(void)
.text:0000011F                 mov     [ebp+var_18], eax
.text:00000122                 jmp     short loc_12B
.text:00000124 ; ---------------------------------------------------------------------------
.text:00000124
.text:00000124 loc_124:                                ; CODE XREF: CreateHasherSpec(void)+55j
.text:00000124                 mov     [ebp+var_18], 0
.text:0000012B
.text:0000012B loc_12B:                                ; CODE XREF: CreateHasherSpec(void)+62j
.text:0000012B                 mov     eax, [ebp+var_18]
.text:0000012E                 mov     [ebp+var_10], eax
.text:00000131                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000138                 mov     eax, [ebp+var_10]
.text:0000013B                 mov     ecx, [ebp+var_C]
.text:0000013E                 mov     large fs:0, ecx
.text:00000145                 pop     ecx
.text:00000146                 add     esp, 18h
.text:00000149                 cmp     ebp, esp
.text:0000014B                 call    __RTC_CheckEsp
.text:00000150                 mov     esp, ebp
.text:00000152                 pop     ebp
.text:00000153                 retn
.text:00000153 ?CreateHasherSpec@@YGPAUIHasher@@XZ endp
.text:00000153
.text:00000153 _text           ends
.text:00000153
.rtc$TMZ:00000154 ; ===========================================================================
.rtc$TMZ:00000154
.rtc$TMZ:00000154 ; Segment type: Pure data
.rtc$TMZ:00000154 ; Segment permissions: Read
.rtc$TMZ:00000154 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000154                 assume cs:_rtc$TMZ
.rtc$TMZ:00000154                 ;org 154h
.rtc$TMZ:00000154 ; COMDAT (pick any)
.rtc$TMZ:00000154 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000154 _rtc$TMZ        ends
.rtc$TMZ:00000154
.rtc$IMZ:00000158 ; ===========================================================================
.rtc$IMZ:00000158
.rtc$IMZ:00000158 ; Segment type: Pure data
.rtc$IMZ:00000158 ; Segment permissions: Read
.rtc$IMZ:00000158 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000158                 assume cs:_rtc$IMZ
.rtc$IMZ:00000158                 ;org 158h
.rtc$IMZ:00000158 ; COMDAT (pick any)
.rtc$IMZ:00000158 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000158 _rtc$IMZ        ends
.rtc$IMZ:00000158
.text$x:0000015C ; ===========================================================================
.text$x:0000015C
.text$x:0000015C ; Segment type: Pure code
.text$x:0000015C ; Segment permissions: Read/Execute
.text$x:0000015C _text$x         segment para public 'CODE' use32
.text$x:0000015C                 assume cs:_text$x
.text$x:0000015C                 ;org 15Ch
.text$x:0000015C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000015C
.text$x:0000015C ; =============== S U B R O U T I N E =======================================
.text$x:0000015C
.text$x:0000015C
.text$x:0000015C __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0 proc near
.text$x:0000015C                                         ; DATA XREF: .xdata$x:00000188o
.text$x:0000015C                 mov     eax, [ebp-14h]
.text$x:0000015F                 push    eax             ; void *
.text$x:00000160                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000165                 pop     ecx
.text$x:00000166                 retn
.text$x:00000166 __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0 endp
.text$x:00000166
.text$x:00000167
.text$x:00000167 ; =============== S U B R O U T I N E =======================================
.text$x:00000167
.text$x:00000167
.text$x:00000167 __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ proc near
.text$x:00000167                                         ; DATA XREF: CreateHasherSpec(void)+5o
.text$x:00000167
.text$x:00000167 arg_4           = dword ptr  8
.text$x:00000167
.text$x:00000167                 mov     edx, [esp+arg_4]
.text$x:0000016B                 lea     eax, [edx+0Ch]
.text$x:0000016E                 mov     ecx, [edx-10h]
.text$x:00000171                 xor     ecx, eax
.text$x:00000173                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000178                 mov     eax, offset __ehfuncinfo$?CreateHasherSpec@@YGPAUIHasher@@XZ
.text$x:0000017D                 jmp     ___CxxFrameHandler3
.text$x:0000017D __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ endp
.text$x:0000017D
.text$x:0000017D ; ---------------------------------------------------------------------------
.text$x:00000182                 align 4
.text$x:00000182 _text$x         ends
.text$x:00000182
.xdata$x:00000184 ; ===========================================================================
.xdata$x:00000184
.xdata$x:00000184 ; Segment type: Pure data
.xdata$x:00000184 ; Segment permissions: Read
.xdata$x:00000184 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000184                 assume cs:_xdata$x
.xdata$x:00000184                 ;org 184h
.xdata$x:00000184 __unwindtable$?CreateHasherSpec@@YGPAUIHasher@@XZ db 0FFh
.xdata$x:00000184                                         ; DATA XREF: .xdata$x:00000194o
.xdata$x:00000185                 db 0FFh
.xdata$x:00000186                 db 0FFh
.xdata$x:00000187                 db 0FFh
.xdata$x:00000188                 dd offset __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0
.xdata$x:0000018C __ehfuncinfo$?CreateHasherSpec@@YGPAUIHasher@@XZ db  22h ; "
.xdata$x:0000018C                                         ; DATA XREF: __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ+11o
.xdata$x:0000018D                 db    5
.xdata$x:0000018E                 db  93h ; ô
.xdata$x:0000018F                 db  19h
.xdata$x:00000190                 db    1
.xdata$x:00000191                 db    0
.xdata$x:00000192                 db    0
.xdata$x:00000193                 db    0
.xdata$x:00000194                 dd offset __unwindtable$?CreateHasherSpec@@YGPAUIHasher@@XZ
.xdata$x:00000198                 db    0
.xdata$x:00000199                 db    0
.xdata$x:0000019A                 db    0
.xdata$x:0000019B                 db    0
.xdata$x:0000019C                 db    0
.xdata$x:0000019D                 db    0
.xdata$x:0000019E                 db    0
.xdata$x:0000019F                 db    0
.xdata$x:000001A0                 db    0
.xdata$x:000001A1                 db    0
.xdata$x:000001A2                 db    0
.xdata$x:000001A3                 db    0
.xdata$x:000001A4                 db    0
.xdata$x:000001A5                 db    0
.xdata$x:000001A6                 db    0
.xdata$x:000001A7                 db    0
.xdata$x:000001A8                 db    0
.xdata$x:000001A9                 db    0
.xdata$x:000001AA                 db    0
.xdata$x:000001AB                 db    0
.xdata$x:000001AC                 db    1
.xdata$x:000001AD                 db    0
.xdata$x:000001AE                 db    0
.xdata$x:000001AF                 db    0
.xdata$x:000001AF _xdata$x        ends
.xdata$x:000001AF
.text:000001B0 ; ===========================================================================
.text:000001B0
.text:000001B0 ; Segment type: Pure code
.text:000001B0 ; Segment permissions: Read/Execute
.text:000001B0 _text           segment para public 'CODE' use32
.text:000001B0                 assume cs:_text
.text:000001B0                 ;org 1B0h
.text:000001B0 ; COMDAT (pick any)
.text:000001B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000001B0
.text:000001B0 ; =============== S U B R O U T I N E =======================================
.text:000001B0
.text:000001B0 ; Attributes: bp-based frame
.text:000001B0
.text:000001B0 ; public: __thiscall CXzCrc64Hasher::CXzCrc64Hasher(void)
.text:000001B0                 public ??0CXzCrc64Hasher@@QAE@XZ
.text:000001B0 ??0CXzCrc64Hasher@@QAE@XZ proc near     ; CODE XREF: CreateHasherSpec(void)+5Ap
.text:000001B0
.text:000001B0 var_4           = dword ptr -4
.text:000001B0
.text:000001B0                 push    ebp
.text:000001B1                 mov     ebp, esp
.text:000001B3                 push    ecx
.text:000001B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001BB                 mov     [ebp+var_4], ecx
.text:000001BE                 mov     ecx, [ebp+var_4] ; this
.text:000001C1                 call    ??0IHasher@@QAE@XZ ; IHasher::IHasher(void)
.text:000001C6                 mov     ecx, [ebp+var_4]
.text:000001C9                 add     ecx, 4          ; this
.text:000001CC                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000001D1                 mov     eax, [ebp+var_4]
.text:000001D4                 mov     dword ptr [eax], offset ??_7CXzCrc64Hasher@@6B@ ; const CXzCrc64Hasher::`vftable'
.text:000001DA                 mov     ecx, [ebp+var_4]
.text:000001DD                 mov     dword ptr [ecx+8], 0FFFFFFFFh
.text:000001E4                 mov     dword ptr [ecx+0Ch], 0FFFFFFFFh
.text:000001EB                 mov     eax, [ebp+var_4]
.text:000001EE                 add     esp, 4
.text:000001F1                 cmp     ebp, esp
.text:000001F3                 call    __RTC_CheckEsp
.text:000001F8                 mov     esp, ebp
.text:000001FA                 pop     ebp
.text:000001FB                 retn
.text:000001FB ??0CXzCrc64Hasher@@QAE@XZ endp
.text:000001FB
.text:000001FB _text           ends
.text:000001FB
.rdata:000001FC ; ===========================================================================
.rdata:000001FC
.rdata:000001FC ; Segment type: Pure data
.rdata:000001FC ; Segment permissions: Read
.rdata:000001FC _rdata          segment dword public 'DATA' use32
.rdata:000001FC                 assume cs:_rdata
.rdata:000001FC                 ;org 1FCh
.rdata:000001FC ; COMDAT (pick largest)
.rdata:000001FC                 dd offset ??_R4CXzCrc64Hasher@@6B@ ; const CXzCrc64Hasher::`RTTI Complete Object Locator'
.rdata:00000200                 public ??_7CXzCrc64Hasher@@6B@
.rdata:00000200 ; const CXzCrc64Hasher::`vftable'
.rdata:00000200 ??_7CXzCrc64Hasher@@6B@ dd offset ?QueryInterface@CXzCrc64Hasher@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000200                                         ; DATA XREF: CXzCrc64Hasher::CXzCrc64Hasher(void)+24o
.rdata:00000200                                         ; CXzCrc64Hasher::QueryInterface(_GUID const &,void * *)
.rdata:00000204                 dd offset ?AddRef@CXzCrc64Hasher@@UAGKXZ ; CXzCrc64Hasher::AddRef(void)
.rdata:00000208                 dd offset ?Release@CXzCrc64Hasher@@UAGKXZ ; CXzCrc64Hasher::Release(void)
.rdata:0000020C                 dd offset ?Init@CXzCrc64Hasher@@UAGXXZ ; CXzCrc64Hasher::Init(void)
.rdata:00000210                 dd offset ?Update@CXzCrc64Hasher@@UAGXPBXI@Z ; CXzCrc64Hasher::Update(void const *,uint)
.rdata:00000214                 dd offset ?Final@CXzCrc64Hasher@@UAGXPAE@Z ; CXzCrc64Hasher::Final(uchar *)
.rdata:00000218                 dd offset ?GetDigestSize@CXzCrc64Hasher@@UAGIXZ ; CXzCrc64Hasher::GetDigestSize(void)
.rdata:00000218 _rdata          ends
.rdata:00000218
.rdata$r:0000021C ; ===========================================================================
.rdata$r:0000021C
.rdata$r:0000021C ; Segment type: Pure data
.rdata$r:0000021C ; Segment permissions: Read
.rdata$r:0000021C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000021C                 assume cs:_rdata$r
.rdata$r:0000021C                 ;org 21Ch
.rdata$r:0000021C ; COMDAT (pick any)
.rdata$r:0000021C                 public ??_R4CXzCrc64Hasher@@6B@
.rdata$r:0000021C ; const CXzCrc64Hasher::`RTTI Complete Object Locator'
.rdata$r:0000021C ??_R4CXzCrc64Hasher@@6B@ db    0        ; DATA XREF: .rdata:000001FCo
.rdata$r:0000021D                 db    0
.rdata$r:0000021E                 db    0
.rdata$r:0000021F                 db    0
.rdata$r:00000220                 db    0
.rdata$r:00000221                 db    0
.rdata$r:00000222                 db    0
.rdata$r:00000223                 db    0
.rdata$r:00000224                 db    0
.rdata$r:00000225                 db    0
.rdata$r:00000226                 db    0
.rdata$r:00000227                 db    0
.rdata$r:00000228                 dd offset ??_R0?AVCXzCrc64Hasher@@@8 ; CXzCrc64Hasher `RTTI Type Descriptor'
.rdata$r:0000022C                 dd offset ??_R3CXzCrc64Hasher@@8 ; CXzCrc64Hasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000022C _rdata$r        ends
.rdata$r:0000022C
.data:00000230 ; ===========================================================================
.data:00000230
.data:00000230 ; Segment type: Pure data
.data:00000230 ; Segment permissions: Read/Write
.data:00000230 _data           segment dword public 'DATA' use32
.data:00000230                 assume cs:_data
.data:00000230                 ;org 230h
.data:00000230 ; COMDAT (pick any)
.data:00000230                 public ??_R0?AVCXzCrc64Hasher@@@8
.data:00000230 ; class CXzCrc64Hasher `RTTI Type Descriptor'
.data:00000230 ??_R0?AVCXzCrc64Hasher@@@8 dd offset ??_7type_info@@6B@
.data:00000230                                         ; DATA XREF: .rdata$r:00000228o
.data:00000230                                         ; .rdata$r:CXzCrc64Hasher::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000230                                         ; const type_info::`vftable'
.data:00000234                 align 8
.data:00000238 a_?avcxzcrc64ha db '.?AVCXzCrc64Hasher@@',0
.data:0000024D                 align 10h
.data:0000024D _data           ends
.data:0000024D
.rdata$r:00000250 ; ===========================================================================
.rdata$r:00000250
.rdata$r:00000250 ; Segment type: Pure data
.rdata$r:00000250 ; Segment permissions: Read
.rdata$r:00000250 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000250                 assume cs:_rdata$r
.rdata$r:00000250                 ;org 250h
.rdata$r:00000250 ; COMDAT (pick any)
.rdata$r:00000250                 public ??_R3CXzCrc64Hasher@@8
.rdata$r:00000250 ; CXzCrc64Hasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000250 ??_R3CXzCrc64Hasher@@8 db    0          ; DATA XREF: .rdata$r:0000022Co
.rdata$r:00000250                                         ; .rdata$r:0000028Co
.rdata$r:00000251                 db    0
.rdata$r:00000252                 db    0
.rdata$r:00000253                 db    0
.rdata$r:00000254                 db    1
.rdata$r:00000255                 db    0
.rdata$r:00000256                 db    0
.rdata$r:00000257                 db    0
.rdata$r:00000258                 db    4
.rdata$r:00000259                 db    0
.rdata$r:0000025A                 db    0
.rdata$r:0000025B                 db    0
.rdata$r:0000025C                 dd offset ??_R2CXzCrc64Hasher@@8 ; CXzCrc64Hasher::`RTTI Base Class Array'
.rdata$r:0000025C _rdata$r        ends
.rdata$r:0000025C
.rdata$r:00000260 ; ===========================================================================
.rdata$r:00000260
.rdata$r:00000260 ; Segment type: Pure data
.rdata$r:00000260 ; Segment permissions: Read
.rdata$r:00000260 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000260                 assume cs:_rdata$r
.rdata$r:00000260                 ;org 260h
.rdata$r:00000260 ; COMDAT (pick any)
.rdata$r:00000260                 public ??_R2CXzCrc64Hasher@@8
.rdata$r:00000260 ; CXzCrc64Hasher::`RTTI Base Class Array'
.rdata$r:00000260 ??_R2CXzCrc64Hasher@@8 dd offset ??_R1A@?0A@EA@CXzCrc64Hasher@@8
.rdata$r:00000260                                         ; DATA XREF: .rdata$r:0000025Co
.rdata$r:00000260                                         ; CXzCrc64Hasher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000264                 dd offset ??_R1A@?0A@EA@IHasher@@8 ; IHasher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000268                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000026C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000270                 db    0
.rdata$r:00000271                 align 4
.rdata$r:00000271 _rdata$r        ends
.rdata$r:00000271
.rdata$r:00000274 ; ===========================================================================
.rdata$r:00000274
.rdata$r:00000274 ; Segment type: Pure data
.rdata$r:00000274 ; Segment permissions: Read
.rdata$r:00000274 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000274                 assume cs:_rdata$r
.rdata$r:00000274                 ;org 274h
.rdata$r:00000274 ; COMDAT (pick any)
.rdata$r:00000274                 public ??_R1A@?0A@EA@CXzCrc64Hasher@@8
.rdata$r:00000274 ; CXzCrc64Hasher::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000274 ??_R1A@?0A@EA@CXzCrc64Hasher@@8 dd offset ??_R0?AVCXzCrc64Hasher@@@8
.rdata$r:00000274                                         ; DATA XREF: .rdata$r:CXzCrc64Hasher::`RTTI Base Class Array'o
.rdata$r:00000274                                         ; CXzCrc64Hasher `RTTI Type Descriptor'
.rdata$r:00000278                 db    3
.rdata$r:00000279                 db    0
.rdata$r:0000027A                 db    0
.rdata$r:0000027B                 db    0
.rdata$r:0000027C                 db    0
.rdata$r:0000027D                 db    0
.rdata$r:0000027E                 db    0
.rdata$r:0000027F                 db    0
.rdata$r:00000280                 db 0FFh
.rdata$r:00000281                 db 0FFh
.rdata$r:00000282                 db 0FFh
.rdata$r:00000283                 db 0FFh
.rdata$r:00000284                 db    0
.rdata$r:00000285                 db    0
.rdata$r:00000286                 db    0
.rdata$r:00000287                 db    0
.rdata$r:00000288                 db  40h ; @
.rdata$r:00000289                 db    0
.rdata$r:0000028A                 db    0
.rdata$r:0000028B                 db    0
.rdata$r:0000028C                 dd offset ??_R3CXzCrc64Hasher@@8 ; CXzCrc64Hasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000028C _rdata$r        ends
.rdata$r:0000028C
.rdata$r:00000290 ; ===========================================================================
.rdata$r:00000290
.rdata$r:00000290 ; Segment type: Pure data
.rdata$r:00000290 ; Segment permissions: Read
.rdata$r:00000290 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000290                 assume cs:_rdata$r
.rdata$r:00000290                 ;org 290h
.rdata$r:00000290 ; COMDAT (pick any)
.rdata$r:00000290                 public ??_R1A@?0A@EA@IHasher@@8
.rdata$r:00000290 ; IHasher::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000290 ??_R1A@?0A@EA@IHasher@@8 dd offset ??_R0?AUIHasher@@@8
.rdata$r:00000290                                         ; DATA XREF: .rdata$r:00000264o
.rdata$r:00000290                                         ; .rdata$r:IHasher::`RTTI Base Class Array'o
.rdata$r:00000290                                         ; IHasher `RTTI Type Descriptor'
.rdata$r:00000294                 db    1
.rdata$r:00000295                 db    0
.rdata$r:00000296                 db    0
.rdata$r:00000297                 db    0
.rdata$r:00000298                 db    0
.rdata$r:00000299                 db    0
.rdata$r:0000029A                 db    0
.rdata$r:0000029B                 db    0
.rdata$r:0000029C                 db 0FFh
.rdata$r:0000029D                 db 0FFh
.rdata$r:0000029E                 db 0FFh
.rdata$r:0000029F                 db 0FFh
.rdata$r:000002A0                 db    0
.rdata$r:000002A1                 db    0
.rdata$r:000002A2                 db    0
.rdata$r:000002A3                 db    0
.rdata$r:000002A4                 db  40h ; @
.rdata$r:000002A5                 db    0
.rdata$r:000002A6                 db    0
.rdata$r:000002A7                 db    0
.rdata$r:000002A8                 dd offset ??_R3IHasher@@8 ; IHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002A8 _rdata$r        ends
.rdata$r:000002A8
.data:000002AC ; ===========================================================================
.data:000002AC
.data:000002AC ; Segment type: Pure data
.data:000002AC ; Segment permissions: Read/Write
.data:000002AC _data           segment dword public 'DATA' use32
.data:000002AC                 assume cs:_data
.data:000002AC                 ;org 2ACh
.data:000002AC ; COMDAT (pick any)
.data:000002AC                 public ??_R0?AUIHasher@@@8
.data:000002AC ; struct IHasher `RTTI Type Descriptor'
.data:000002AC ??_R0?AUIHasher@@@8 dd offset ??_7type_info@@6B@
.data:000002AC                                         ; DATA XREF: .rdata$r:IHasher::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000002AC                                         ; .rdata$r:000004E8o
.data:000002AC                                         ; const type_info::`vftable'
.data:000002B0                 db    0
.data:000002B1                 db    0
.data:000002B2                 db    0
.data:000002B3                 db    0
.data:000002B4                 db  2Eh ; .
.data:000002B5                 db  3Fh ; ?
.data:000002B6                 db  41h ; A
.data:000002B7                 db  55h ; U
.data:000002B8                 db  49h ; I
.data:000002B9                 db  48h ; H
.data:000002BA                 db  61h ; a
.data:000002BB                 db  73h ; s
.data:000002BC                 db  68h ; h
.data:000002BD                 db  65h ; e
.data:000002BE                 db  72h ; r
.data:000002BF                 db  40h ; @
.data:000002C0                 db  40h ; @
.data:000002C1                 db    0
.data:000002C2                 align 4
.data:000002C2 _data           ends
.data:000002C2
.rdata$r:000002C4 ; ===========================================================================
.rdata$r:000002C4
.rdata$r:000002C4 ; Segment type: Pure data
.rdata$r:000002C4 ; Segment permissions: Read
.rdata$r:000002C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002C4                 assume cs:_rdata$r
.rdata$r:000002C4                 ;org 2C4h
.rdata$r:000002C4 ; COMDAT (pick any)
.rdata$r:000002C4                 public ??_R3IHasher@@8
.rdata$r:000002C4 ; IHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002C4 ??_R3IHasher@@8 db    0                 ; DATA XREF: .rdata$r:000002A8o
.rdata$r:000002C4                                         ; .rdata$r:000004ECo
.rdata$r:000002C5                 db    0
.rdata$r:000002C6                 db    0
.rdata$r:000002C7                 db    0
.rdata$r:000002C8                 db    0
.rdata$r:000002C9                 db    0
.rdata$r:000002CA                 db    0
.rdata$r:000002CB                 db    0
.rdata$r:000002CC                 db    2
.rdata$r:000002CD                 db    0
.rdata$r:000002CE                 db    0
.rdata$r:000002CF                 db    0
.rdata$r:000002D0                 dd offset ??_R2IHasher@@8 ; IHasher::`RTTI Base Class Array'
.rdata$r:000002D0 _rdata$r        ends
.rdata$r:000002D0
.rdata$r:000002D4 ; ===========================================================================
.rdata$r:000002D4
.rdata$r:000002D4 ; Segment type: Pure data
.rdata$r:000002D4 ; Segment permissions: Read
.rdata$r:000002D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002D4                 assume cs:_rdata$r
.rdata$r:000002D4                 ;org 2D4h
.rdata$r:000002D4 ; COMDAT (pick any)
.rdata$r:000002D4                 public ??_R2IHasher@@8
.rdata$r:000002D4 ; IHasher::`RTTI Base Class Array'
.rdata$r:000002D4 ??_R2IHasher@@8 dd offset ??_R1A@?0A@EA@IHasher@@8
.rdata$r:000002D4                                         ; DATA XREF: .rdata$r:000002D0o
.rdata$r:000002D4                                         ; IHasher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002D8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002DC                 db    0
.rdata$r:000002DD                 align 10h
.rdata$r:000002DD _rdata$r        ends
.rdata$r:000002DD
.rdata$r:000002E0 ; ===========================================================================
.rdata$r:000002E0
.rdata$r:000002E0 ; Segment type: Pure data
.rdata$r:000002E0 ; Segment permissions: Read
.rdata$r:000002E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002E0                 assume cs:_rdata$r
.rdata$r:000002E0                 ;org 2E0h
.rdata$r:000002E0 ; COMDAT (pick any)
.rdata$r:000002E0                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000002E0 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000002E0 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000002E0                                         ; DATA XREF: .rdata$r:00000268o
.rdata$r:000002E0                                         ; .rdata$r:000002D8o ...
.rdata$r:000002E0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000002E4                 db    0
.rdata$r:000002E5                 db    0
.rdata$r:000002E6                 db    0
.rdata$r:000002E7                 db    0
.rdata$r:000002E8                 db    0
.rdata$r:000002E9                 db    0
.rdata$r:000002EA                 db    0
.rdata$r:000002EB                 db    0
.rdata$r:000002EC                 db 0FFh
.rdata$r:000002ED                 db 0FFh
.rdata$r:000002EE                 db 0FFh
.rdata$r:000002EF                 db 0FFh
.rdata$r:000002F0                 db    0
.rdata$r:000002F1                 db    0
.rdata$r:000002F2                 db    0
.rdata$r:000002F3                 db    0
.rdata$r:000002F4                 db  40h ; @
.rdata$r:000002F5                 db    0
.rdata$r:000002F6                 db    0
.rdata$r:000002F7                 db    0
.rdata$r:000002F8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002F8 _rdata$r        ends
.rdata$r:000002F8
.data:000002FC ; ===========================================================================
.data:000002FC
.data:000002FC ; Segment type: Pure data
.data:000002FC ; Segment permissions: Read/Write
.data:000002FC _data           segment dword public 'DATA' use32
.data:000002FC                 assume cs:_data
.data:000002FC                 ;org 2FCh
.data:000002FC ; COMDAT (pick any)
.data:000002FC                 public ??_R0?AUIUnknown@@@8
.data:000002FC ; struct IUnknown `RTTI Type Descriptor'
.data:000002FC ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000002FC                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000002FC                                         ; const type_info::`vftable'
.data:00000300                 db    0
.data:00000301                 db    0
.data:00000302                 db    0
.data:00000303                 db    0
.data:00000304                 db  2Eh ; .
.data:00000305                 db  3Fh ; ?
.data:00000306                 db  41h ; A
.data:00000307                 db  55h ; U
.data:00000308                 db  49h ; I
.data:00000309                 db  55h ; U
.data:0000030A                 db  6Eh ; n
.data:0000030B                 db  6Bh ; k
.data:0000030C                 db  6Eh ; n
.data:0000030D                 db  6Fh ; o
.data:0000030E                 db  77h ; w
.data:0000030F                 db  6Eh ; n
.data:00000310                 db  40h ; @
.data:00000311                 db  40h ; @
.data:00000312                 db    0
.data:00000313                 align 4
.data:00000313 _data           ends
.data:00000313
.rdata$r:00000314 ; ===========================================================================
.rdata$r:00000314
.rdata$r:00000314 ; Segment type: Pure data
.rdata$r:00000314 ; Segment permissions: Read
.rdata$r:00000314 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000314                 assume cs:_rdata$r
.rdata$r:00000314                 ;org 314h
.rdata$r:00000314 ; COMDAT (pick any)
.rdata$r:00000314                 public ??_R3IUnknown@@8
.rdata$r:00000314 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000314 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000002F8o
.rdata$r:00000315                 db    0
.rdata$r:00000316                 db    0
.rdata$r:00000317                 db    0
.rdata$r:00000318                 db    0
.rdata$r:00000319                 db    0
.rdata$r:0000031A                 db    0
.rdata$r:0000031B                 db    0
.rdata$r:0000031C                 db    1
.rdata$r:0000031D                 db    0
.rdata$r:0000031E                 db    0
.rdata$r:0000031F                 db    0
.rdata$r:00000320                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000320 _rdata$r        ends
.rdata$r:00000320
.rdata$r:00000324 ; ===========================================================================
.rdata$r:00000324
.rdata$r:00000324 ; Segment type: Pure data
.rdata$r:00000324 ; Segment permissions: Read
.rdata$r:00000324 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000324                 assume cs:_rdata$r
.rdata$r:00000324                 ;org 324h
.rdata$r:00000324 ; COMDAT (pick any)
.rdata$r:00000324                 public ??_R2IUnknown@@8
.rdata$r:00000324 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000324 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000324                                         ; DATA XREF: .rdata$r:00000320o
.rdata$r:00000324                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000328                 db    0
.rdata$r:00000329                 align 4
.rdata$r:00000329 _rdata$r        ends
.rdata$r:00000329
.rdata$r:0000032C ; ===========================================================================
.rdata$r:0000032C
.rdata$r:0000032C ; Segment type: Pure data
.rdata$r:0000032C ; Segment permissions: Read
.rdata$r:0000032C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000032C                 assume cs:_rdata$r
.rdata$r:0000032C                 ;org 32Ch
.rdata$r:0000032C ; COMDAT (pick any)
.rdata$r:0000032C                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:0000032C ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000032C ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000032C                                         ; DATA XREF: .rdata$r:0000026Co
.rdata$r:0000032C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000330                 db    0
.rdata$r:00000331                 db    0
.rdata$r:00000332                 db    0
.rdata$r:00000333                 db    0
.rdata$r:00000334                 db    4
.rdata$r:00000335                 db    0
.rdata$r:00000336                 db    0
.rdata$r:00000337                 db    0
.rdata$r:00000338                 db 0FFh
.rdata$r:00000339                 db 0FFh
.rdata$r:0000033A                 db 0FFh
.rdata$r:0000033B                 db 0FFh
.rdata$r:0000033C                 db    0
.rdata$r:0000033D                 db    0
.rdata$r:0000033E                 db    0
.rdata$r:0000033F                 db    0
.rdata$r:00000340                 db  40h ; @
.rdata$r:00000341                 db    0
.rdata$r:00000342                 db    0
.rdata$r:00000343                 db    0
.rdata$r:00000344                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000344 _rdata$r        ends
.rdata$r:00000344
.data:00000348 ; ===========================================================================
.data:00000348
.data:00000348 ; Segment type: Pure data
.data:00000348 ; Segment permissions: Read/Write
.data:00000348 _data           segment dword public 'DATA' use32
.data:00000348                 assume cs:_data
.data:00000348                 ;org 348h
.data:00000348 ; COMDAT (pick any)
.data:00000348                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000348 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000348 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000348                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000348                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000348                                         ; const type_info::`vftable'
.data:0000034C                 align 10h
.data:00000350 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00000350 _data           ends
.data:00000350
.rdata$r:00000364 ; ===========================================================================
.rdata$r:00000364
.rdata$r:00000364 ; Segment type: Pure data
.rdata$r:00000364 ; Segment permissions: Read
.rdata$r:00000364 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000364                 assume cs:_rdata$r
.rdata$r:00000364                 ;org 364h
.rdata$r:00000364 ; COMDAT (pick any)
.rdata$r:00000364                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000364 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000364 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000344o
.rdata$r:00000364                                         ; .rdata$r:00000394o
.rdata$r:00000365                 db    0
.rdata$r:00000366                 db    0
.rdata$r:00000367                 db    0
.rdata$r:00000368                 db    0
.rdata$r:00000369                 db    0
.rdata$r:0000036A                 db    0
.rdata$r:0000036B                 db    0
.rdata$r:0000036C                 db    1
.rdata$r:0000036D                 db    0
.rdata$r:0000036E                 db    0
.rdata$r:0000036F                 db    0
.rdata$r:00000370                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000370 _rdata$r        ends
.rdata$r:00000370
.rdata$r:00000374 ; ===========================================================================
.rdata$r:00000374
.rdata$r:00000374 ; Segment type: Pure data
.rdata$r:00000374 ; Segment permissions: Read
.rdata$r:00000374 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000374                 assume cs:_rdata$r
.rdata$r:00000374                 ;org 374h
.rdata$r:00000374 ; COMDAT (pick any)
.rdata$r:00000374                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000374 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000374 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000374                                         ; DATA XREF: .rdata$r:00000370o
.rdata$r:00000374                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000378                 db    0
.rdata$r:00000379                 align 4
.rdata$r:00000379 _rdata$r        ends
.rdata$r:00000379
.rdata$r:0000037C ; ===========================================================================
.rdata$r:0000037C
.rdata$r:0000037C ; Segment type: Pure data
.rdata$r:0000037C ; Segment permissions: Read
.rdata$r:0000037C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000037C                 assume cs:_rdata$r
.rdata$r:0000037C                 ;org 37Ch
.rdata$r:0000037C ; COMDAT (pick any)
.rdata$r:0000037C                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000037C ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000037C ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000037C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:0000037C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000380                 db    0
.rdata$r:00000381                 db    0
.rdata$r:00000382                 db    0
.rdata$r:00000383                 db    0
.rdata$r:00000384                 db    0
.rdata$r:00000385                 db    0
.rdata$r:00000386                 db    0
.rdata$r:00000387                 db    0
.rdata$r:00000388                 db 0FFh
.rdata$r:00000389                 db 0FFh
.rdata$r:0000038A                 db 0FFh
.rdata$r:0000038B                 db 0FFh
.rdata$r:0000038C                 db    0
.rdata$r:0000038D                 db    0
.rdata$r:0000038E                 db    0
.rdata$r:0000038F                 db    0
.rdata$r:00000390                 db  40h ; @
.rdata$r:00000391                 db    0
.rdata$r:00000392                 db    0
.rdata$r:00000393                 db    0
.rdata$r:00000394                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000394 _rdata$r        ends
.rdata$r:00000394
.text:00000398 ; ===========================================================================
.text:00000398
.text:00000398 ; Segment type: Pure code
.text:00000398 ; Segment permissions: Read/Execute
.text:00000398 _text           segment para public 'CODE' use32
.text:00000398                 assume cs:_text
.text:00000398                 ;org 398h
.text:00000398 ; COMDAT (pick any)
.text:00000398                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000398
.text:00000398 ; =============== S U B R O U T I N E =======================================
.text:00000398
.text:00000398 ; Attributes: bp-based frame
.text:00000398
.text:00000398 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000398                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000398 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CXzCrc64Hasher::CXzCrc64Hasher(void)+1Cp
.text:00000398
.text:00000398 var_4           = dword ptr -4
.text:00000398
.text:00000398                 push    ebp
.text:00000399                 mov     ebp, esp
.text:0000039B                 push    ecx
.text:0000039C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003A3                 mov     [ebp+var_4], ecx
.text:000003A6                 mov     eax, [ebp+var_4]
.text:000003A9                 mov     dword ptr [eax], 0
.text:000003AF                 mov     eax, [ebp+var_4]
.text:000003B2                 mov     esp, ebp
.text:000003B4                 pop     ebp
.text:000003B5                 retn
.text:000003B5 ??0CMyUnknownImp@@QAE@XZ endp
.text:000003B5
.text:000003B5 ; ---------------------------------------------------------------------------
.text:000003B6                 align 4
.text:000003B6 _text           ends
.text:000003B6
.text:000003B8 ; ===========================================================================
.text:000003B8
.text:000003B8 ; Segment type: Pure code
.text:000003B8 ; Segment permissions: Read/Execute
.text:000003B8 _text           segment para public 'CODE' use32
.text:000003B8                 assume cs:_text
.text:000003B8                 ;org 3B8h
.text:000003B8 ; COMDAT (pick any)
.text:000003B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000003B8
.text:000003B8 ; =============== S U B R O U T I N E =======================================
.text:000003B8
.text:000003B8 ; Attributes: bp-based frame
.text:000003B8
.text:000003B8 ; __int32 __stdcall CXzCrc64Hasher::QueryInterface(CXzCrc64Hasher *this, const struct _GUID *Buf1, void **)
.text:000003B8                 public ?QueryInterface@CXzCrc64Hasher@@UAGJABU_GUID@@PAPAX@Z
.text:000003B8 ?QueryInterface@CXzCrc64Hasher@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000003B8                                         ; DATA XREF: .rdata:const CXzCrc64Hasher::`vftable'o
.text:000003B8
.text:000003B8 this            = dword ptr  8
.text:000003B8 Buf1            = dword ptr  0Ch
.text:000003B8 arg_8           = dword ptr  10h
.text:000003B8
.text:000003B8                 push    ebp
.text:000003B9                 mov     ebp, esp
.text:000003BB                 mov     eax, [ebp+arg_8]
.text:000003BE                 mov     dword ptr [eax], 0
.text:000003C4                 push    offset _IID_IUnknown ; Buf2
.text:000003C9                 mov     ecx, [ebp+Buf1]
.text:000003CC                 push    ecx             ; Buf1
.text:000003CD                 call    ___@8           ; __(x,x)
.text:000003D2                 test    eax, eax
.text:000003D4                 jz      short loc_3E0
.text:000003D6                 mov     edx, [ebp+arg_8]
.text:000003D9                 mov     eax, [ebp+this]
.text:000003DC                 mov     [edx], eax
.text:000003DE                 jmp     short loc_3E7
.text:000003E0 ; ---------------------------------------------------------------------------
.text:000003E0
.text:000003E0 loc_3E0:                                ; CODE XREF: CXzCrc64Hasher::QueryInterface(_GUID const &,void * *)+1Cj
.text:000003E0                 mov     eax, 80004002h
.text:000003E5                 jmp     short loc_3F8
.text:000003E7 ; ---------------------------------------------------------------------------
.text:000003E7
.text:000003E7 loc_3E7:                                ; CODE XREF: CXzCrc64Hasher::QueryInterface(_GUID const &,void * *)+26j
.text:000003E7                 mov     ecx, [ebp+this]
.text:000003EA                 mov     edx, [ecx+4]
.text:000003ED                 add     edx, 1
.text:000003F0                 mov     eax, [ebp+this]
.text:000003F3                 mov     [eax+4], edx
.text:000003F6                 xor     eax, eax
.text:000003F8
.text:000003F8 loc_3F8:                                ; CODE XREF: CXzCrc64Hasher::QueryInterface(_GUID const &,void * *)+2Dj
.text:000003F8                 cmp     ebp, esp
.text:000003FA                 call    __RTC_CheckEsp
.text:000003FF                 pop     ebp
.text:00000400                 retn    0Ch
.text:00000400 ?QueryInterface@CXzCrc64Hasher@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000400
.text:00000400 ; ---------------------------------------------------------------------------
.text:00000403                 align 4
.text:00000403 _text           ends
.text:00000403
.text:00000404 ; ===========================================================================
.text:00000404
.text:00000404 ; Segment type: Pure code
.text:00000404 ; Segment permissions: Read/Execute
.text:00000404 _text           segment para public 'CODE' use32
.text:00000404                 assume cs:_text
.text:00000404                 ;org 404h
.text:00000404 ; COMDAT (pick any)
.text:00000404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000404
.text:00000404 ; =============== S U B R O U T I N E =======================================
.text:00000404
.text:00000404 ; Attributes: bp-based frame
.text:00000404
.text:00000404 ; unsigned __int32 __stdcall CXzCrc64Hasher::AddRef(CXzCrc64Hasher *this)
.text:00000404                 public ?AddRef@CXzCrc64Hasher@@UAGKXZ
.text:00000404 ?AddRef@CXzCrc64Hasher@@UAGKXZ proc near ; DATA XREF: .rdata:00000204o
.text:00000404
.text:00000404 var_4           = dword ptr -4
.text:00000404 this            = dword ptr  8
.text:00000404
.text:00000404                 push    ebp
.text:00000405                 mov     ebp, esp
.text:00000407                 push    ecx
.text:00000408                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000040F                 mov     eax, [ebp+this]
.text:00000412                 mov     ecx, [eax+4]
.text:00000415                 add     ecx, 1
.text:00000418                 mov     [ebp+var_4], ecx
.text:0000041B                 mov     edx, [ebp+this]
.text:0000041E                 mov     eax, [ebp+var_4]
.text:00000421                 mov     [edx+4], eax
.text:00000424                 mov     eax, [ebp+var_4]
.text:00000427                 mov     esp, ebp
.text:00000429                 pop     ebp
.text:0000042A                 retn    4
.text:0000042A ?AddRef@CXzCrc64Hasher@@UAGKXZ endp
.text:0000042A
.text:0000042A ; ---------------------------------------------------------------------------
.text:0000042D                 align 10h
.text:0000042D _text           ends
.text:0000042D
.text:00000430 ; ===========================================================================
.text:00000430
.text:00000430 ; Segment type: Pure code
.text:00000430 ; Segment permissions: Read/Execute
.text:00000430 _text           segment para public 'CODE' use32
.text:00000430                 assume cs:_text
.text:00000430                 ;org 430h
.text:00000430 ; COMDAT (pick any)
.text:00000430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000430
.text:00000430 ; =============== S U B R O U T I N E =======================================
.text:00000430
.text:00000430 ; Attributes: bp-based frame
.text:00000430
.text:00000430 ; unsigned __int32 __stdcall CXzCrc64Hasher::Release(CXzCrc64Hasher *this)
.text:00000430                 public ?Release@CXzCrc64Hasher@@UAGKXZ
.text:00000430 ?Release@CXzCrc64Hasher@@UAGKXZ proc near ; DATA XREF: .rdata:00000208o
.text:00000430
.text:00000430 var_8           = dword ptr -8
.text:00000430 var_4           = dword ptr -4
.text:00000430 this            = dword ptr  8
.text:00000430
.text:00000430                 push    ebp
.text:00000431                 mov     ebp, esp
.text:00000433                 sub     esp, 8
.text:00000436                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000043D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000444                 mov     eax, [ebp+this]
.text:00000447                 mov     ecx, [eax+4]
.text:0000044A                 sub     ecx, 1
.text:0000044D                 mov     [ebp+var_8], ecx
.text:00000450                 mov     edx, [ebp+this]
.text:00000453                 mov     eax, [ebp+var_8]
.text:00000456                 mov     [edx+4], eax
.text:00000459                 cmp     [ebp+var_8], 0
.text:0000045D                 jz      short loc_467
.text:0000045F                 mov     ecx, [ebp+this]
.text:00000462                 mov     eax, [ecx+4]
.text:00000465                 jmp     short loc_47B
.text:00000467 ; ---------------------------------------------------------------------------
.text:00000467
.text:00000467 loc_467:                                ; CODE XREF: CXzCrc64Hasher::Release(void)+2Dj
.text:00000467                 mov     edx, [ebp+this]
.text:0000046A                 mov     [ebp+var_4], edx
.text:0000046D                 mov     eax, [ebp+var_4]
.text:00000470                 push    eax             ; void *
.text:00000471                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000476                 add     esp, 4
.text:00000479                 xor     eax, eax
.text:0000047B
.text:0000047B loc_47B:                                ; CODE XREF: CXzCrc64Hasher::Release(void)+35j
.text:0000047B                 add     esp, 8
.text:0000047E                 cmp     ebp, esp
.text:00000480                 call    __RTC_CheckEsp
.text:00000485                 mov     esp, ebp
.text:00000487                 pop     ebp
.text:00000488                 retn    4
.text:00000488 ?Release@CXzCrc64Hasher@@UAGKXZ endp
.text:00000488
.text:00000488 ; ---------------------------------------------------------------------------
.text:0000048B                 align 4
.text:0000048B _text           ends
.text:0000048B
.text:0000048C ; ===========================================================================
.text:0000048C
.text:0000048C ; Segment type: Pure code
.text:0000048C ; Segment permissions: Read/Execute
.text:0000048C _text           segment para public 'CODE' use32
.text:0000048C                 assume cs:_text
.text:0000048C                 ;org 48Ch
.text:0000048C ; COMDAT (pick any)
.text:0000048C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000048C
.text:0000048C ; =============== S U B R O U T I N E =======================================
.text:0000048C
.text:0000048C ; Attributes: bp-based frame
.text:0000048C
.text:0000048C ; _DWORD __thiscall IHasher::IHasher(IHasher *__hidden this)
.text:0000048C                 public ??0IHasher@@QAE@XZ
.text:0000048C ??0IHasher@@QAE@XZ proc near            ; CODE XREF: CXzCrc64Hasher::CXzCrc64Hasher(void)+11p
.text:0000048C
.text:0000048C var_4           = dword ptr -4
.text:0000048C
.text:0000048C                 push    ebp
.text:0000048D                 mov     ebp, esp
.text:0000048F                 push    ecx
.text:00000490                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000497                 mov     [ebp+var_4], ecx
.text:0000049A                 mov     ecx, [ebp+var_4]
.text:0000049D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000004A2                 mov     eax, [ebp+var_4]
.text:000004A5                 mov     dword ptr [eax], offset ??_7IHasher@@6B@ ; const IHasher::`vftable'
.text:000004AB                 mov     eax, [ebp+var_4]
.text:000004AE                 add     esp, 4
.text:000004B1                 cmp     ebp, esp
.text:000004B3                 call    __RTC_CheckEsp
.text:000004B8                 mov     esp, ebp
.text:000004BA                 pop     ebp
.text:000004BB                 retn
.text:000004BB ??0IHasher@@QAE@XZ endp
.text:000004BB
.text:000004BB _text           ends
.text:000004BB
.rdata:000004BC ; ===========================================================================
.rdata:000004BC
.rdata:000004BC ; Segment type: Pure data
.rdata:000004BC ; Segment permissions: Read
.rdata:000004BC _rdata          segment dword public 'DATA' use32
.rdata:000004BC                 assume cs:_rdata
.rdata:000004BC                 ;org 4BCh
.rdata:000004BC ; COMDAT (pick largest)
.rdata:000004BC                 dd offset ??_R4IHasher@@6B@ ; const IHasher::`RTTI Complete Object Locator'
.rdata:000004C0                 public ??_7IHasher@@6B@
.rdata:000004C0 ; const IHasher::`vftable'
.rdata:000004C0 ??_7IHasher@@6B@ dd offset __purecall   ; DATA XREF: IHasher::IHasher(void)+19o
.rdata:000004C4                 dd offset __purecall
.rdata:000004C8                 dd offset __purecall
.rdata:000004CC                 dd offset __purecall
.rdata:000004D0                 dd offset __purecall
.rdata:000004D4                 dd offset __purecall
.rdata:000004D8                 dd offset __purecall
.rdata:000004D8 _rdata          ends
.rdata:000004D8
.rdata$r:000004DC ; ===========================================================================
.rdata$r:000004DC
.rdata$r:000004DC ; Segment type: Pure data
.rdata$r:000004DC ; Segment permissions: Read
.rdata$r:000004DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004DC                 assume cs:_rdata$r
.rdata$r:000004DC                 ;org 4DCh
.rdata$r:000004DC ; COMDAT (pick any)
.rdata$r:000004DC                 public ??_R4IHasher@@6B@
.rdata$r:000004DC ; const IHasher::`RTTI Complete Object Locator'
.rdata$r:000004DC ??_R4IHasher@@6B@ db    0               ; DATA XREF: .rdata:000004BCo
.rdata$r:000004DD                 db    0
.rdata$r:000004DE                 db    0
.rdata$r:000004DF                 db    0
.rdata$r:000004E0                 db    0
.rdata$r:000004E1                 db    0
.rdata$r:000004E2                 db    0
.rdata$r:000004E3                 db    0
.rdata$r:000004E4                 db    0
.rdata$r:000004E5                 db    0
.rdata$r:000004E6                 db    0
.rdata$r:000004E7                 db    0
.rdata$r:000004E8                 dd offset ??_R0?AUIHasher@@@8 ; IHasher `RTTI Type Descriptor'
.rdata$r:000004EC                 dd offset ??_R3IHasher@@8 ; IHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004EC _rdata$r        ends
.rdata$r:000004EC
.text:000004F0 ; ===========================================================================
.text:000004F0
.text:000004F0 ; Segment type: Pure code
.text:000004F0 ; Segment permissions: Read/Execute
.text:000004F0 _text           segment para public 'CODE' use32
.text:000004F0                 assume cs:_text
.text:000004F0                 ;org 4F0h
.text:000004F0 ; COMDAT (pick any)
.text:000004F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000004F0
.text:000004F0 ; =============== S U B R O U T I N E =======================================
.text:000004F0
.text:000004F0 ; Attributes: bp-based frame
.text:000004F0
.text:000004F0 ; public: __thiscall IUnknown::IUnknown(void)
.text:000004F0                 public ??0IUnknown@@QAE@XZ
.text:000004F0 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: IHasher::IHasher(void)+11p
.text:000004F0
.text:000004F0 var_4           = dword ptr -4
.text:000004F0
.text:000004F0                 push    ebp
.text:000004F1                 mov     ebp, esp
.text:000004F3                 push    ecx
.text:000004F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004FB                 mov     [ebp+var_4], ecx
.text:000004FE                 mov     eax, [ebp+var_4]
.text:00000501                 mov     esp, ebp
.text:00000503                 pop     ebp
.text:00000504                 retn
.text:00000504 ??0IUnknown@@QAE@XZ endp
.text:00000504
.text:00000504 ; ---------------------------------------------------------------------------
.text:00000505                 align 4
.text:00000505 _text           ends
.text:00000505
.text:00000508 ; ===========================================================================
.text:00000508
.text:00000508 ; Segment type: Pure code
.text:00000508 ; Segment permissions: Read/Execute
.text:00000508 _text           segment para public 'CODE' use32
.text:00000508                 assume cs:_text
.text:00000508                 ;org 508h
.text:00000508 ; COMDAT (pick any)
.text:00000508                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000508
.text:00000508 ; =============== S U B R O U T I N E =======================================
.text:00000508
.text:00000508 ; Attributes: bp-based frame
.text:00000508
.text:00000508 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000508                 public ___@8
.text:00000508 ___@8           proc near               ; CODE XREF: CXzCrc64Hasher::QueryInterface(_GUID const &,void * *)+15p
.text:00000508
.text:00000508 Buf1            = dword ptr  8
.text:00000508 Buf2            = dword ptr  0Ch
.text:00000508
.text:00000508                 push    ebp
.text:00000509                 mov     ebp, esp
.text:0000050B                 mov     eax, [ebp+Buf2]
.text:0000050E                 push    eax             ; Buf2
.text:0000050F                 mov     ecx, [ebp+Buf1]
.text:00000512                 push    ecx             ; Buf1
.text:00000513                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000518                 cmp     ebp, esp
.text:0000051A                 call    __RTC_CheckEsp
.text:0000051F                 pop     ebp
.text:00000520                 retn    8
.text:00000520 ___@8           endp
.text:00000520
.text:00000520 ; ---------------------------------------------------------------------------
.text:00000523                 align 4
.text:00000523 _text           ends
.text:00000523
.text:00000524 ; ===========================================================================
.text:00000524
.text:00000524 ; Segment type: Pure code
.text:00000524 ; Segment permissions: Read/Execute
.text:00000524 _text           segment para public 'CODE' use32
.text:00000524                 assume cs:_text
.text:00000524                 ;org 524h
.text:00000524 ; COMDAT (pick any)
.text:00000524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000524
.text:00000524 ; =============== S U B R O U T I N E =======================================
.text:00000524
.text:00000524 ; Attributes: bp-based frame
.text:00000524
.text:00000524 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000524                 public _IsEqualGUID@8
.text:00000524 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000524
.text:00000524 Buf1            = dword ptr  8
.text:00000524 Buf2            = dword ptr  0Ch
.text:00000524
.text:00000524                 push    ebp
.text:00000525                 mov     ebp, esp
.text:00000527                 push    10h             ; Size
.text:00000529                 mov     eax, [ebp+Buf2]
.text:0000052C                 push    eax             ; Buf2
.text:0000052D                 mov     ecx, [ebp+Buf1]
.text:00000530                 push    ecx             ; Buf1
.text:00000531                 call    _memcmp
.text:00000536                 add     esp, 0Ch
.text:00000539                 neg     eax
.text:0000053B                 sbb     eax, eax
.text:0000053D                 add     eax, 1
.text:00000540                 cmp     ebp, esp
.text:00000542                 call    __RTC_CheckEsp
.text:00000547                 pop     ebp
.text:00000548                 retn    8
.text:00000548 _IsEqualGUID@8  endp
.text:00000548
.text:00000548 ; ---------------------------------------------------------------------------
.text:0000054B                 align 4
.text:0000054B _text           ends
.text:0000054B
.text$yc:0000054C ; ===========================================================================
.text$yc:0000054C
.text$yc:0000054C ; Segment type: Pure code
.text$yc:0000054C ; Segment permissions: Read/Execute
.text$yc:0000054C _text$yc        segment para public 'CODE' use32
.text$yc:0000054C                 assume cs:_text$yc
.text$yc:0000054C                 ;org 54Ch
.text$yc:0000054C ; COMDAT (pick any)
.text$yc:0000054C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:0000054C
.text$yc:0000054C ; =============== S U B R O U T I N E =======================================
.text$yc:0000054C
.text$yc:0000054C ; Attributes: bp-based frame
.text$yc:0000054C
.text$yc:0000054C ; void __cdecl `dynamic initializer for 'g_RegisterHasher''(void)
.text$yc:0000054C ??__Eg_RegisterHasher@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:_g_RegisterHasher$initializer$o
.text$yc:0000054C                 push    ebp
.text$yc:0000054D                 mov     ebp, esp
.text$yc:0000054F                 mov     ecx, offset _g_RegisterHasher ; this
.text$yc:00000554                 call    ??0CRegHasher_CXzCrc64Hasher@@QAE@XZ ; CRegHasher_CXzCrc64Hasher::CRegHasher_CXzCrc64Hasher(void)
.text$yc:00000559                 cmp     ebp, esp
.text$yc:0000055B                 call    __RTC_CheckEsp
.text$yc:00000560                 pop     ebp
.text$yc:00000561                 retn
.text$yc:00000561 ??__Eg_RegisterHasher@@YAXXZ endp
.text$yc:00000561
.text$yc:00000561 ; ---------------------------------------------------------------------------
.text$yc:00000562                 align 4
.text$yc:00000562 _text$yc        ends
.text$yc:00000562
.text:00000564 ; ===========================================================================
.text:00000564
.text:00000564 ; Segment type: Pure code
.text:00000564 ; Segment permissions: Read/Execute
.text:00000564 _text           segment para public 'CODE' use32
.text:00000564                 assume cs:_text
.text:00000564                 ;org 564h
.text:00000564 ; COMDAT (pick any)
.text:00000564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000564
.text:00000564 ; =============== S U B R O U T I N E =======================================
.text:00000564
.text:00000564 ; Attributes: bp-based frame
.text:00000564
.text:00000564 ; _DWORD __thiscall CRegHasher_CXzCrc64Hasher::CRegHasher_CXzCrc64Hasher(CRegHasher_CXzCrc64Hasher *__hidden this)
.text:00000564                 public ??0CRegHasher_CXzCrc64Hasher@@QAE@XZ
.text:00000564 ??0CRegHasher_CXzCrc64Hasher@@QAE@XZ proc near
.text:00000564                                         ; CODE XREF: `dynamic initializer for 'g_RegisterHasher''(void)+8p
.text:00000564
.text:00000564 var_4           = dword ptr -4
.text:00000564
.text:00000564                 push    ebp
.text:00000565                 mov     ebp, esp
.text:00000567                 push    ecx
.text:00000568                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000056F                 mov     [ebp+var_4], ecx
.text:00000572                 push    offset _g_HasherInfo ; struct CHasherInfo *
.text:00000577                 call    ?RegisterHasher@@YGXPBUCHasherInfo@@@Z ; RegisterHasher(CHasherInfo const *)
.text:0000057C                 mov     eax, [ebp+var_4]
.text:0000057F                 add     esp, 4
.text:00000582                 cmp     ebp, esp
.text:00000584                 call    __RTC_CheckEsp
.text:00000589                 mov     esp, ebp
.text:0000058B                 pop     ebp
.text:0000058C                 retn
.text:0000058C ??0CRegHasher_CXzCrc64Hasher@@QAE@XZ endp
.text:0000058C
.text:0000058C ; ---------------------------------------------------------------------------
.text:0000058D                 align 10h
.text:0000058D _text           ends
.text:0000058D
.bss:00000590 ; ===========================================================================
.bss:00000590
.bss:00000590 ; Segment type: Uninitialized
.bss:00000590 ; Segment permissions: Read/Write
.bss:00000590 _bss            segment byte public 'BSS' use32
.bss:00000590                 assume cs:_bss
.bss:00000590                 ;org 590h
.bss:00000590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000590 ; CRegHasher_CXzCrc64Hasher g_RegisterHasher
.bss:00000590 _g_RegisterHasher db    ? ;             ; DATA XREF: `dynamic initializer for 'g_RegisterHasher''(void)+3o
.bss:00000591                 align 4
.bss:00000591 _bss            ends
.bss:00000591
.CRT$XCU:00000594 ; ===========================================================================
.CRT$XCU:00000594
.CRT$XCU:00000594 ; Segment type: Pure data
.CRT$XCU:00000594 ; Segment permissions: Read
.CRT$XCU:00000594 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00000594                 assume cs:_CRT$XCU
.CRT$XCU:00000594                 ;org 594h
.CRT$XCU:00000594 _g_RegisterHasher$initializer$ dd offset ??__Eg_RegisterHasher@@YAXXZ ; `dynamic initializer for 'g_RegisterHasher''(void)
.CRT$XCU:00000594 _CRT$XCU        ends
.CRT$XCU:00000594
UNDEF:000005A0 ; ===========================================================================
UNDEF:000005A0
UNDEF:000005A0 ; Segment type: Externs
UNDEF:000005A0 ; UNDEF
UNDEF:000005A0                 extrn __RTC_Shutdown:near
UNDEF:000005A0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000005A4                 extrn __RTC_InitBase:near
UNDEF:000005A4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000005A8 ; __fastcall Crc64Update(x, x, x, x)
UNDEF:000005A8                 extrn @Crc64Update@16:near
UNDEF:000005A8                                         ; CODE XREF: CXzCrc64Hasher::Update(void const *,uint)+14p
UNDEF:000005AC                 extrn __RTC_CheckEsp:near
UNDEF:000005AC                                         ; CODE XREF: CXzCrc64Hasher::Update(void const *,uint)+24p
UNDEF:000005AC                                         ; CreateHasherSpec(void)+8Bp ...
UNDEF:000005B0 ; void __cdecl operator delete(void *)
UNDEF:000005B0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0+4p
UNDEF:000005B0                                         ; CXzCrc64Hasher::Release(void)+41p
UNDEF:000005B4 ; void *__cdecl operator new(unsigned int)
UNDEF:000005B4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateHasherSpec(void)+3Fp
UNDEF:000005B8                 extrn ___security_cookie:near
UNDEF:000005B8                                         ; DATA XREF: CreateHasherSpec(void)+29r
UNDEF:000005BC                 extrn ___CxxFrameHandler3:near
UNDEF:000005BC                                         ; CODE XREF: __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ+16j
UNDEF:000005C0 ; __fastcall __security_check_cookie(x)
UNDEF:000005C0                 extrn @__security_check_cookie@4:near
UNDEF:000005C0                                         ; CODE XREF: __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ+Cp
UNDEF:000005C4 ; const type_info::`vftable'
UNDEF:000005C4                 extrn ??_7type_info@@6B@:near
UNDEF:000005C4                                         ; DATA XREF: .data:CXzCrc64Hasher `RTTI Type Descriptor'o
UNDEF:000005C4                                         ; .data:IHasher `RTTI Type Descriptor'o ...
UNDEF:000005C8 ; const IID IID_IUnknown
UNDEF:000005C8                 extrn _IID_IUnknown:near
UNDEF:000005C8                                         ; DATA XREF: CXzCrc64Hasher::QueryInterface(_GUID const &,void * *)+Co
UNDEF:000005CC                 extrn __purecall:near   ; DATA XREF: .rdata:const IHasher::`vftable'o
UNDEF:000005CC                                         ; .rdata:000004C4o ...
UNDEF:000005D0 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000005D0                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:000005D4 ; void __stdcall RegisterHasher(const struct CHasherInfo *)
UNDEF:000005D4                 extrn ?RegisterHasher@@YGXPBUCHasherInfo@@@Z:near
UNDEF:000005D4                                         ; CODE XREF: CRegHasher_CXzCrc64Hasher::CRegHasher_CXzCrc64Hasher(void)+13p
UNDEF:000005D4
UNDEF:000005D4
UNDEF:000005D4                 end