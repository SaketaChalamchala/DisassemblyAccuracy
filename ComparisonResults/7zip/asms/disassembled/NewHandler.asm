.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 97524592A3361A4AC3A1044E5620EF2D
.text:00000000 ; Input CRC32 : CB273088
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\NewHandler.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void *__cdecl operator new(size_t Size)
.text:00000000                 public ??2@YAPAXI@Z
.text:00000000 ??2@YAPAXI@Z    proc near
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 Size            = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 push    esi
.text:00000007                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000015                 mov     esi, esp
.text:00000017                 mov     eax, [ebp+Size]
.text:0000001A                 push    eax             ; Size
.text:0000001B                 call    dword ptr ds:__imp__malloc
.text:00000021                 add     esp, 4
.text:00000024                 cmp     esi, esp
.text:00000026                 call    __RTC_CheckEsp
.text:0000002B                 mov     [ebp+var_4], eax
.text:0000002E                 cmp     [ebp+var_4], 0
.text:00000032                 jnz     short loc_4D
.text:00000034                 xor     ecx, ecx
.text:00000036                 mov     byte ptr [ebp+var_8+2], cl
.text:00000039                 mov     dl, byte ptr [ebp+var_8+2]
.text:0000003C                 mov     byte ptr [ebp+var_8+3], dl
.text:0000003F                 push    offset __TI1?AVCNewException@@
.text:00000044                 lea     eax, [ebp+var_8+3]
.text:00000047                 push    eax
.text:00000048                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000004D ; ---------------------------------------------------------------------------
.text:0000004D
.text:0000004D loc_4D:                                 ; CODE XREF: operator new(uint)+32j
.text:0000004D                 mov     eax, [ebp+var_4]
.text:00000050                 pop     esi
.text:00000051                 add     esp, 8
.text:00000054                 cmp     ebp, esp
.text:00000056                 call    __RTC_CheckEsp
.text:0000005B                 mov     esp, ebp
.text:0000005D                 pop     ebp
.text:0000005E                 retn
.text:0000005E ??2@YAPAXI@Z    endp
.text:0000005E
.text:0000005E ; ---------------------------------------------------------------------------
.text:0000005F                 align 10h
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060 ; void __cdecl operator delete(void *Memory)
.text:00000060                 public ??3@YAXPAX@Z
.text:00000060 ??3@YAXPAX@Z    proc near
.text:00000060
.text:00000060 Memory          = dword ptr  8
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 push    esi
.text:00000064                 mov     esi, esp
.text:00000066                 mov     eax, [ebp+Memory]
.text:00000069                 push    eax             ; Memory
.text:0000006A                 call    dword ptr ds:__imp__free
.text:00000070                 add     esp, 4
.text:00000073                 cmp     esi, esp
.text:00000075                 call    __RTC_CheckEsp
.text:0000007A                 pop     esi
.text:0000007B                 cmp     ebp, esp
.text:0000007D                 call    __RTC_CheckEsp
.text:00000082                 pop     ebp
.text:00000083                 retn
.text:00000083 ??3@YAXPAX@Z    endp
.text:00000083
.text:00000083 _text           ends
.text:00000083
.xdata$x:00000084 ; ===========================================================================
.xdata$x:00000084
.xdata$x:00000084 ; Segment type: Pure data
.xdata$x:00000084 ; Segment permissions: Read
.xdata$x:00000084 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000084                 assume cs:_xdata$x
.xdata$x:00000084                 ;org 84h
.xdata$x:00000084 ; COMDAT (pick any)
.xdata$x:00000084                 public __TI1?AVCNewException@@
.xdata$x:00000084 __TI1?AVCNewException@@ db    0         ; DATA XREF: operator new(uint)+3Fo
.xdata$x:00000085                 db    0
.xdata$x:00000086                 db    0
.xdata$x:00000087                 db    0
.xdata$x:00000088                 db    0
.xdata$x:00000089                 db    0
.xdata$x:0000008A                 db    0
.xdata$x:0000008B                 db    0
.xdata$x:0000008C                 db    0
.xdata$x:0000008D                 db    0
.xdata$x:0000008E                 db    0
.xdata$x:0000008F                 db    0
.xdata$x:00000090                 dd offset __CTA1?AVCNewException@@
.xdata$x:00000090 _xdata$x        ends
.xdata$x:00000090
.rtc$TMZ:00000094 ; ===========================================================================
.rtc$TMZ:00000094
.rtc$TMZ:00000094 ; Segment type: Pure data
.rtc$TMZ:00000094 ; Segment permissions: Read
.rtc$TMZ:00000094 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000094                 assume cs:_rtc$TMZ
.rtc$TMZ:00000094                 ;org 94h
.rtc$TMZ:00000094 ; COMDAT (pick any)
.rtc$TMZ:00000094 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000094 _rtc$TMZ        ends
.rtc$TMZ:00000094
.rtc$IMZ:00000098 ; ===========================================================================
.rtc$IMZ:00000098
.rtc$IMZ:00000098 ; Segment type: Pure data
.rtc$IMZ:00000098 ; Segment permissions: Read
.rtc$IMZ:00000098 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000098                 assume cs:_rtc$IMZ
.rtc$IMZ:00000098                 ;org 98h
.rtc$IMZ:00000098 ; COMDAT (pick any)
.rtc$IMZ:00000098 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000098 _rtc$IMZ        ends
.rtc$IMZ:00000098
.xdata$x:0000009C ; ===========================================================================
.xdata$x:0000009C
.xdata$x:0000009C ; Segment type: Pure data
.xdata$x:0000009C ; Segment permissions: Read
.xdata$x:0000009C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000009C                 assume cs:_xdata$x
.xdata$x:0000009C                 ;org 9Ch
.xdata$x:0000009C ; COMDAT (pick any)
.xdata$x:0000009C                 public __CTA1?AVCNewException@@
.xdata$x:0000009C __CTA1?AVCNewException@@ db    1        ; DATA XREF: .xdata$x:00000090o
.xdata$x:0000009D                 db    0
.xdata$x:0000009E                 db    0
.xdata$x:0000009F                 db    0
.xdata$x:000000A0                 dd offset __CT??_R0?AVCNewException@@@81
.xdata$x:000000A0 _xdata$x        ends
.xdata$x:000000A0
.xdata$x:000000A4 ; ===========================================================================
.xdata$x:000000A4
.xdata$x:000000A4 ; Segment type: Pure data
.xdata$x:000000A4 ; Segment permissions: Read
.xdata$x:000000A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000000A4                 assume cs:_xdata$x
.xdata$x:000000A4                 ;org 0A4h
.xdata$x:000000A4 ; COMDAT (pick any)
.xdata$x:000000A4                 public __CT??_R0?AVCNewException@@@81
.xdata$x:000000A4 __CT??_R0?AVCNewException@@@81 db    0  ; DATA XREF: .xdata$x:000000A0o
.xdata$x:000000A5                 db    0
.xdata$x:000000A6                 db    0
.xdata$x:000000A7                 db    0
.xdata$x:000000A8                 dd offset ??_R0?AVCNewException@@@8 ; CNewException `RTTI Type Descriptor'
.xdata$x:000000AC                 align 10h
.xdata$x:000000B0                 db 0FFh
.xdata$x:000000B1                 db 0FFh
.xdata$x:000000B2                 db 0FFh
.xdata$x:000000B3                 db 0FFh
.xdata$x:000000B4                 db    0
.xdata$x:000000B5                 db    0
.xdata$x:000000B6                 db    0
.xdata$x:000000B7                 db    0
.xdata$x:000000B8                 db    1
.xdata$x:000000B9                 db    0
.xdata$x:000000BA                 db    0
.xdata$x:000000BB                 db    0
.xdata$x:000000BC                 db    0
.xdata$x:000000BD                 db    0
.xdata$x:000000BE                 db    0
.xdata$x:000000BF                 db    0
.xdata$x:000000BF _xdata$x        ends
.xdata$x:000000BF
.data:000000C0 ; ===========================================================================
.data:000000C0
.data:000000C0 ; Segment type: Pure data
.data:000000C0 ; Segment permissions: Read/Write
.data:000000C0 _data           segment dword public 'DATA' use32
.data:000000C0                 assume cs:_data
.data:000000C0                 ;org 0C0h
.data:000000C0 ; COMDAT (pick any)
.data:000000C0                 public ??_R0?AVCNewException@@@8
.data:000000C0 ; class CNewException `RTTI Type Descriptor'
.data:000000C0 ??_R0?AVCNewException@@@8 dd offset ??_7type_info@@6B@
.data:000000C0                                         ; DATA XREF: .xdata$x:000000A8o
.data:000000C0                                         ; const type_info::`vftable'
.data:000000C4                 align 8
.data:000000C8 a_?avcnewexcept db '.?AVCNewException@@',0
.data:000000C8 _data           ends
.data:000000C8
UNDEF:000000E0 ; ===========================================================================
UNDEF:000000E0
UNDEF:000000E0 ; Segment type: Externs
UNDEF:000000E0 ; UNDEF
UNDEF:000000E0 ; void *__cdecl _malloc(size_t Size)
UNDEF:000000E0                 extrn __imp__malloc:near ; CODE XREF: operator new(uint)+1Bp
UNDEF:000000E0                                         ; DATA XREF: operator new(uint)+1Br
UNDEF:000000E4                 extrn __RTC_CheckEsp:near ; CODE XREF: operator new(uint)+26p
UNDEF:000000E4                                         ; operator new(uint)+56p ...
UNDEF:000000E8                 extrn __RTC_Shutdown:near
UNDEF:000000E8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000000EC                 extrn __RTC_InitBase:near
UNDEF:000000EC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000000F0 ; __stdcall _CxxThrowException(x, x)
UNDEF:000000F0                 extrn __CxxThrowException@8:near
UNDEF:000000F0                                         ; CODE XREF: operator new(uint)+48p
UNDEF:000000F4 ; const type_info::`vftable'
UNDEF:000000F4                 extrn ??_7type_info@@6B@:near
UNDEF:000000F4                                         ; DATA XREF: .data:CNewException `RTTI Type Descriptor'o
UNDEF:000000F8 ; void __cdecl _free(void *Memory)
UNDEF:000000F8                 extrn __imp__free:near  ; CODE XREF: operator delete(void *)+Ap
UNDEF:000000F8                                         ; DATA XREF: operator delete(void *)+Ar
UNDEF:000000F8
UNDEF:000000F8
UNDEF:000000F8                 end