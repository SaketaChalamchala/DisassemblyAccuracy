.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 29E10759B4EAD6EE9155D0661DBED771
.text:00000000 ; Input CRC32 : E0EBC64B
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Bcj2Coder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCompress::NBcj2::CBaseCoder::CBaseCoder(NCompress::NBcj2::CBaseCoder *__hidden this)
.text:00000000                 public ??0CBaseCoder@NBcj2@NCompress@@QAE@XZ
.text:00000000 ??0CBaseCoder@NBcj2@NCompress@@QAE@XZ proc near
.text:00000000                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CEncoder(void)+3Dp
.text:00000000                                         ; NCompress::NBcj2::CDecoder::CDecoder(void)+7Dp
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000014                 mov     [ebp+var_4], ecx
.text:00000017                 mov     [ebp+var_8], 0
.text:0000001E                 jmp     short loc_29
.text:00000020 ; ---------------------------------------------------------------------------
.text:00000020
.text:00000020 loc_20:                                 ; CODE XREF: NCompress::NBcj2::CBaseCoder::CBaseCoder(void)+58j
.text:00000020                 mov     eax, [ebp+var_8]
.text:00000023                 add     eax, 1
.text:00000026                 mov     [ebp+var_8], eax
.text:00000029
.text:00000029 loc_29:                                 ; CODE XREF: NCompress::NBcj2::CBaseCoder::CBaseCoder(void)+1Ej
.text:00000029                 cmp     [ebp+var_8], 5
.text:0000002D                 jge     short loc_5A
.text:0000002F                 mov     ecx, [ebp+var_8]
.text:00000032                 mov     edx, [ebp+var_4]
.text:00000035                 mov     dword ptr [edx+ecx*4], 0
.text:0000003C                 mov     eax, [ebp+var_8]
.text:0000003F
.text:0000003F loc_3F:                                 ; DATA XREF: .xdata$x:__catchsym$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$2o
.text:0000003F                 mov     ecx, [ebp+var_4]
.text:00000042                 mov     dword ptr [ecx+eax*4+14h], 0
.text:0000004A                 mov     edx, [ebp+var_8]
.text:0000004D                 mov     eax, [ebp+var_4]
.text:00000050                 mov     dword ptr [eax+edx*4+28h], 40000h
.text:00000058                 jmp     short loc_20
.text:0000005A ; ---------------------------------------------------------------------------
.text:0000005A
.text:0000005A loc_5A:                                 ; CODE XREF: NCompress::NBcj2::CBaseCoder::CBaseCoder(void)+2Dj
.text:0000005A                 mov     eax, [ebp+var_4]
.text:0000005D                 mov     esp, ebp
.text:0000005F                 pop     ebp
.text:00000060                 retn
.text:00000060 ??0CBaseCoder@NBcj2@NCompress@@QAE@XZ endp
.text:00000060
.text:00000060 ; ---------------------------------------------------------------------------
.text:00000061                 align 10h
.text:00000070
.text:00000070 ; =============== S U B R O U T I N E =======================================
.text:00000070
.text:00000070 ; Attributes: bp-based frame
.text:00000070
.text:00000070 ; _DWORD __thiscall NCompress::NBcj2::CBaseCoder::~CBaseCoder(NCompress::NBcj2::CBaseCoder *__hidden this)
.text:00000070                 public ??1CBaseCoder@NBcj2@NCompress@@QAE@XZ
.text:00000070 ??1CBaseCoder@NBcj2@NCompress@@QAE@XZ proc near
.text:00000070                                         ; CODE XREF: NCompress::NBcj2::CEncoder::~CEncoder(void)+31p
.text:00000070                                         ; __unwindfunclet$??0CDecoder@NBcj2@NCompress@@QAE@XZ$0+6j ...
.text:00000070
.text:00000070 var_8           = dword ptr -8
.text:00000070 var_4           = dword ptr -4
.text:00000070
.text:00000070                 push    ebp
.text:00000071                 mov     ebp, esp
.text:00000073                 sub     esp, 8
.text:00000076                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000007D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000084                 mov     [ebp+var_4], ecx
.text:00000087                 mov     [ebp+var_8], 0
.text:0000008E                 jmp     short loc_99
.text:00000090 ; ---------------------------------------------------------------------------
.text:00000090
.text:00000090 loc_90:                                 ; CODE XREF: NCompress::NBcj2::CBaseCoder::~CBaseCoder(void)+3Ej
.text:00000090                 mov     eax, [ebp+var_8]
.text:00000093                 add     eax, 1
.text:00000096                 mov     [ebp+var_8], eax
.text:00000099
.text:00000099 loc_99:                                 ; CODE XREF: NCompress::NBcj2::CBaseCoder::~CBaseCoder(void)+1Ej
.text:00000099                 cmp     [ebp+var_8], 5
.text:0000009D                 jge     short loc_B0
.text:0000009F                 mov     ecx, [ebp+var_8]
.text:000000A2                 mov     edx, [ebp+var_4]
.text:000000A5                 mov     eax, [edx+ecx*4]
.text:000000A8                 push    eax
.text:000000A9                 call    _MidFree@4      ; MidFree(x)
.text:000000AE                 jmp     short loc_90
.text:000000B0 ; ---------------------------------------------------------------------------
.text:000000B0
.text:000000B0 loc_B0:                                 ; CODE XREF: NCompress::NBcj2::CBaseCoder::~CBaseCoder(void)+2Dj
.text:000000B0                 add     esp, 8
.text:000000B3                 cmp     ebp, esp
.text:000000B5                 call    __RTC_CheckEsp
.text:000000BA                 mov     esp, ebp
.text:000000BC                 pop     ebp
.text:000000BD                 retn
.text:000000BD ??1CBaseCoder@NBcj2@NCompress@@QAE@XZ endp
.text:000000BD
.text:000000BD ; ---------------------------------------------------------------------------
.text:000000BE                 align 10h
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; __int32 __thiscall NCompress::NBcj2::CBaseCoder::Alloc(NCompress::NBcj2::CBaseCoder *this, bool)
.text:000000C0                 public ?Alloc@CBaseCoder@NBcj2@NCompress@@IAEJ_N@Z
.text:000000C0 ?Alloc@CBaseCoder@NBcj2@NCompress@@IAEJ_N@Z proc near
.text:000000C0                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+62p
.text:000000C0                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+3Cp ...
.text:000000C0
.text:000000C0 var_18          = dword ptr -18h
.text:000000C0 var_14          = dword ptr -14h
.text:000000C0 var_10          = dword ptr -10h
.text:000000C0 var_C           = dword ptr -0Ch
.text:000000C0 var_8           = dword ptr -8
.text:000000C0 var_4           = dword ptr -4
.text:000000C0 arg_0           = byte ptr  8
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 sub     esp, 18h
.text:000000C6                 mov     eax, 0CCCCCCCCh
.text:000000CB                 mov     [ebp+var_18], eax
.text:000000CE                 mov     [ebp+var_14], eax
.text:000000D1                 mov     [ebp+var_10], eax
.text:000000D4                 mov     [ebp+var_C], eax
.text:000000D7                 mov     [ebp+var_8], eax
.text:000000DA                 mov     [ebp+var_4], eax
.text:000000DD                 mov     [ebp+var_4], ecx
.text:000000E0                 movzx   eax, [ebp+arg_0]
.text:000000E4                 neg     eax
.text:000000E6                 sbb     eax, eax
.text:000000E8                 neg     eax
.text:000000EA                 add     eax, 4
.text:000000ED                 mov     [ebp+var_8], eax
.text:000000F0                 mov     [ebp+var_C], 0
.text:000000F7                 jmp     short loc_102
.text:000000F9 ; ---------------------------------------------------------------------------
.text:000000F9
.text:000000F9 loc_F9:                                 ; CODE XREF: NCompress::NBcj2::CBaseCoder::Alloc(bool):loc_1B2j
.text:000000F9                 mov     ecx, [ebp+var_C]
.text:000000FC                 add     ecx, 1
.text:000000FF                 mov     [ebp+var_C], ecx
.text:00000102
.text:00000102 loc_102:                                ; CODE XREF: NCompress::NBcj2::CBaseCoder::Alloc(bool)+37j
.text:00000102                 mov     edx, [ebp+var_C]
.text:00000105                 cmp     edx, [ebp+var_8]
.text:00000108                 jnb     loc_1B7
.text:0000010E                 mov     eax, [ebp+var_C]
.text:00000111                 mov     ecx, [ebp+var_4]
.text:00000114                 mov     edx, [ecx+eax*4+28h]
.text:00000118                 mov     [ebp+var_10], edx
.text:0000011B                 mov     [ebp+var_14], 1
.text:00000122                 cmp     [ebp+var_10], 1
.text:00000126                 jnb     short loc_12F
.text:00000128                 mov     [ebp+var_10], 1
.text:0000012F
.text:0000012F loc_12F:                                ; CODE XREF: NCompress::NBcj2::CBaseCoder::Alloc(bool)+66j
.text:0000012F                 mov     eax, [ebp+var_C]
.text:00000132                 mov     ecx, [ebp+var_4]
.text:00000135                 cmp     dword ptr [ecx+eax*4], 0
.text:00000139                 jz      short loc_14A
.text:0000013B                 mov     edx, [ebp+var_C]
.text:0000013E                 mov     eax, [ebp+var_4]
.text:00000141                 mov     ecx, [ebp+var_10]
.text:00000144                 cmp     ecx, [eax+edx*4+14h]
.text:00000148                 jz      short loc_1B2
.text:0000014A
.text:0000014A loc_14A:                                ; CODE XREF: NCompress::NBcj2::CBaseCoder::Alloc(bool)+79j
.text:0000014A                 mov     edx, [ebp+var_C]
.text:0000014D                 mov     eax, [ebp+var_4]
.text:00000150                 cmp     dword ptr [eax+edx*4], 0
.text:00000154                 jz      short loc_172
.text:00000156                 mov     ecx, [ebp+var_C]
.text:00000159                 mov     edx, [ebp+var_4]
.text:0000015C                 mov     eax, [edx+ecx*4]
.text:0000015F                 push    eax
.text:00000160                 call    _MidFree@4      ; MidFree(x)
.text:00000165                 mov     ecx, [ebp+var_C]
.text:00000168                 mov     edx, [ebp+var_4]
.text:0000016B                 mov     dword ptr [edx+ecx*4], 0
.text:00000172
.text:00000172 loc_172:                                ; CODE XREF: NCompress::NBcj2::CBaseCoder::Alloc(bool)+94j
.text:00000172                 mov     eax, [ebp+var_C]
.text:00000175                 mov     ecx, [ebp+var_4]
.text:00000178                 mov     dword ptr [ecx+eax*4+14h], 0
.text:00000180                 mov     edx, [ebp+var_10]
.text:00000183                 push    edx
.text:00000184                 call    _MidAlloc@4     ; MidAlloc(x)
.text:00000189                 mov     [ebp+var_18], eax
.text:0000018C                 mov     eax, [ebp+var_C]
.text:0000018F                 mov     ecx, [ebp+var_4]
.text:00000192                 mov     edx, [ebp+var_18]
.text:00000195                 mov     [ecx+eax*4], edx
.text:00000198                 cmp     [ebp+var_18], 0
.text:0000019C                 jnz     short loc_1A5
.text:0000019E                 mov     eax, 8007000Eh
.text:000001A3                 jmp     short loc_1B9
.text:000001A5 ; ---------------------------------------------------------------------------
.text:000001A5
.text:000001A5 loc_1A5:                                ; CODE XREF: NCompress::NBcj2::CBaseCoder::Alloc(bool)+DCj
.text:000001A5                 mov     eax, [ebp+var_C]
.text:000001A8                 mov     ecx, [ebp+var_4]
.text:000001AB                 mov     edx, [ebp+var_10]
.text:000001AE                 mov     [ecx+eax*4+14h], edx
.text:000001B2
.text:000001B2 loc_1B2:                                ; CODE XREF: NCompress::NBcj2::CBaseCoder::Alloc(bool)+88j
.text:000001B2                 jmp     loc_F9
.text:000001B7 ; ---------------------------------------------------------------------------
.text:000001B7
.text:000001B7 loc_1B7:                                ; CODE XREF: NCompress::NBcj2::CBaseCoder::Alloc(bool)+48j
.text:000001B7                 xor     eax, eax
.text:000001B9
.text:000001B9 loc_1B9:                                ; CODE XREF: NCompress::NBcj2::CBaseCoder::Alloc(bool)+E3j
.text:000001B9                 add     esp, 18h
.text:000001BC                 cmp     ebp, esp
.text:000001BE                 call    __RTC_CheckEsp
.text:000001C3                 mov     esp, ebp
.text:000001C5                 pop     ebp
.text:000001C6                 retn    4
.text:000001C6 ?Alloc@CBaseCoder@NBcj2@NCompress@@IAEJ_N@Z endp
.text:000001C6
.text:000001C6 ; ---------------------------------------------------------------------------
.text:000001C9                 align 10h
.text:000001D0
.text:000001D0 ; =============== S U B R O U T I N E =======================================
.text:000001D0
.text:000001D0 ; Attributes: bp-based frame
.text:000001D0
.text:000001D0 ; _DWORD __thiscall NCompress::NBcj2::CEncoder::CEncoder(NCompress::NBcj2::CEncoder *__hidden this)
.text:000001D0                 public ??0CEncoder@NBcj2@NCompress@@QAE@XZ
.text:000001D0 ??0CEncoder@NBcj2@NCompress@@QAE@XZ proc near
.text:000001D0
.text:000001D0 var_4           = dword ptr -4
.text:000001D0
.text:000001D0                 push    ebp
.text:000001D1                 mov     ebp, esp
.text:000001D3                 push    ecx
.text:000001D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001DB                 mov     [ebp+var_4], ecx
.text:000001DE                 mov     ecx, [ebp+var_4] ; this
.text:000001E1                 call    ??0ICompressCoder2@@QAE@XZ ; ICompressCoder2::ICompressCoder2(void)
.text:000001E6                 mov     ecx, [ebp+var_4]
.text:000001E9                 add     ecx, 4          ; this
.text:000001EC                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:000001F1                 mov     ecx, [ebp+var_4]
.text:000001F4                 add     ecx, 8          ; this
.text:000001F7                 call    ??0ICompressSetBufSize@@QAE@XZ ; ICompressSetBufSize::ICompressSetBufSize(void)
.text:000001FC                 mov     ecx, [ebp+var_4]
.text:000001FF                 add     ecx, 0Ch        ; this
.text:00000202                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000207                 mov     ecx, [ebp+var_4]
.text:0000020A                 add     ecx, 10h        ; this
.text:0000020D                 call    ??0CBaseCoder@NBcj2@NCompress@@QAE@XZ ; NCompress::NBcj2::CBaseCoder::CBaseCoder(void)
.text:00000212                 mov     eax, [ebp+var_4]
.text:00000215                 mov     dword ptr [eax], offset ??_7CEncoder@NBcj2@NCompress@@6BICompressCoder2@@@ ; const NCompress::NBcj2::CEncoder::`vftable'{for `ICompressCoder2'}
.text:0000021B                 mov     ecx, [ebp+var_4]
.text:0000021E                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NBcj2@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NBcj2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000225                 mov     edx, [ebp+var_4]
.text:00000228                 mov     dword ptr [edx+8], offset ??_7CEncoder@NBcj2@NCompress@@6BICompressSetBufSize@@@ ; const NCompress::NBcj2::CEncoder::`vftable'{for `ICompressSetBufSize'}
.text:0000022F                 mov     eax, [ebp+var_4]
.text:00000232                 mov     dword ptr [eax+4Ch], 4000000h
.text:00000239                 mov     eax, [ebp+var_4]
.text:0000023C                 add     esp, 4
.text:0000023F                 cmp     ebp, esp
.text:00000241                 call    __RTC_CheckEsp
.text:00000246                 mov     esp, ebp
.text:00000248                 pop     ebp
.text:00000249                 retn
.text:00000249 ??0CEncoder@NBcj2@NCompress@@QAE@XZ endp
.text:00000249
.text:00000249 ; ---------------------------------------------------------------------------
.text:0000024A                 align 10h
.text:00000250
.text:00000250 ; =============== S U B R O U T I N E =======================================
.text:00000250
.text:00000250 ; Attributes: bp-based frame
.text:00000250
.text:00000250 ; _DWORD __thiscall NCompress::NBcj2::CEncoder::~CEncoder(NCompress::NBcj2::CEncoder *__hidden this)
.text:00000250                 public ??1CEncoder@NBcj2@NCompress@@QAE@XZ
.text:00000250 ??1CEncoder@NBcj2@NCompress@@QAE@XZ proc near
.text:00000250                                         ; CODE XREF: NCompress::NBcj2::CEncoder::`scalar deleting destructor'(uint)+11p
.text:00000250
.text:00000250 var_4           = dword ptr -4
.text:00000250
.text:00000250                 push    ebp
.text:00000251                 mov     ebp, esp
.text:00000253                 push    ecx
.text:00000254                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000025B                 mov     [ebp+var_4], ecx
.text:0000025E                 mov     eax, [ebp+var_4]
.text:00000261                 mov     dword ptr [eax], offset ??_7CEncoder@NBcj2@NCompress@@6BICompressCoder2@@@ ; const NCompress::NBcj2::CEncoder::`vftable'{for `ICompressCoder2'}
.text:00000267                 mov     ecx, [ebp+var_4]
.text:0000026A                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NBcj2@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NBcj2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000271                 mov     edx, [ebp+var_4]
.text:00000274                 mov     dword ptr [edx+8], offset ??_7CEncoder@NBcj2@NCompress@@6BICompressSetBufSize@@@ ; const NCompress::NBcj2::CEncoder::`vftable'{for `ICompressSetBufSize'}
.text:0000027B                 mov     ecx, [ebp+var_4]
.text:0000027E                 add     ecx, 10h        ; this
.text:00000281                 call    ??1CBaseCoder@NBcj2@NCompress@@QAE@XZ ; NCompress::NBcj2::CBaseCoder::~CBaseCoder(void)
.text:00000286                 add     esp, 4
.text:00000289                 cmp     ebp, esp
.text:0000028B                 call    __RTC_CheckEsp
.text:00000290                 mov     esp, ebp
.text:00000292                 pop     ebp
.text:00000293                 retn
.text:00000293 ??1CEncoder@NBcj2@NCompress@@QAE@XZ endp
.text:00000293
.text:00000293 ; ---------------------------------------------------------------------------
.text:00000294                 align 10h
.text:000002A0
.text:000002A0 ; =============== S U B R O U T I N E =======================================
.text:000002A0
.text:000002A0 ; Attributes: bp-based frame
.text:000002A0
.text:000002A0 ; __int32 __stdcall NCompress::NBcj2::CEncoder::SetInBufSize(NCompress::NBcj2::CEncoder *this, unsigned int, unsigned int)
.text:000002A0                 public ?SetInBufSize@CEncoder@NBcj2@NCompress@@UAGJII@Z
.text:000002A0 ?SetInBufSize@CEncoder@NBcj2@NCompress@@UAGJII@Z proc near
.text:000002A0                                         ; DATA XREF: .rdata:00001DE0o
.text:000002A0
.text:000002A0 this            = dword ptr  8
.text:000002A0 arg_8           = dword ptr  10h
.text:000002A0
.text:000002A0                 push    ebp
.text:000002A1                 mov     ebp, esp
.text:000002A3                 mov     eax, [ebp+this]
.text:000002A6                 mov     ecx, [ebp+arg_8]
.text:000002A9                 mov     [eax+40h], ecx
.text:000002AC                 xor     eax, eax
.text:000002AE                 pop     ebp
.text:000002AF                 retn    0Ch
.text:000002AF ?SetInBufSize@CEncoder@NBcj2@NCompress@@UAGJII@Z endp
.text:000002AF
.text:000002AF ; ---------------------------------------------------------------------------
.text:000002B2                 align 10h
.text:000002C0
.text:000002C0 ; =============== S U B R O U T I N E =======================================
.text:000002C0
.text:000002C0 ; Attributes: bp-based frame
.text:000002C0
.text:000002C0 ; __int32 __stdcall NCompress::NBcj2::CEncoder::SetOutBufSize(NCompress::NBcj2::CEncoder *this, unsigned int, unsigned int)
.text:000002C0                 public ?SetOutBufSize@CEncoder@NBcj2@NCompress@@UAGJII@Z
.text:000002C0 ?SetOutBufSize@CEncoder@NBcj2@NCompress@@UAGJII@Z proc near
.text:000002C0                                         ; DATA XREF: .rdata:00001DE4o
.text:000002C0
.text:000002C0 this            = dword ptr  8
.text:000002C0 arg_4           = dword ptr  0Ch
.text:000002C0 arg_8           = dword ptr  10h
.text:000002C0
.text:000002C0                 push    ebp
.text:000002C1                 mov     ebp, esp
.text:000002C3                 mov     eax, [ebp+arg_4]
.text:000002C6                 mov     ecx, [ebp+this]
.text:000002C9                 mov     edx, [ebp+arg_8]
.text:000002CC                 mov     [ecx+eax*4+30h], edx
.text:000002D0                 xor     eax, eax
.text:000002D2                 pop     ebp
.text:000002D3                 retn    0Ch
.text:000002D3 ?SetOutBufSize@CEncoder@NBcj2@NCompress@@UAGJII@Z endp
.text:000002D3
.text:000002D3 ; ---------------------------------------------------------------------------
.text:000002D6                 align 10h
.text:000002E0
.text:000002E0 ; =============== S U B R O U T I N E =======================================
.text:000002E0
.text:000002E0 ; Attributes: bp-based frame
.text:000002E0
.text:000002E0 ; __int32 __stdcall NCompress::NBcj2::CEncoder::SetCoderProperties(NCompress::NBcj2::CEncoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:000002E0                 public ?SetCoderProperties@CEncoder@NBcj2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:000002E0 ?SetCoderProperties@CEncoder@NBcj2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:000002E0                                         ; DATA XREF: .rdata:00001DF8o
.text:000002E0
.text:000002E0 var_14          = dword ptr -14h
.text:000002E0 var_10          = dword ptr -10h
.text:000002E0 var_C           = dword ptr -0Ch
.text:000002E0 var_8           = dword ptr -8
.text:000002E0 var_4           = dword ptr -4
.text:000002E0 this            = dword ptr  8
.text:000002E0 arg_4           = dword ptr  0Ch
.text:000002E0 arg_8           = dword ptr  10h
.text:000002E0 arg_C           = dword ptr  14h
.text:000002E0
.text:000002E0                 push    ebp
.text:000002E1                 mov     ebp, esp
.text:000002E3                 sub     esp, 14h
.text:000002E6                 mov     eax, 0CCCCCCCCh
.text:000002EB                 mov     [ebp+var_14], eax
.text:000002EE                 mov     [ebp+var_10], eax
.text:000002F1                 mov     [ebp+var_C], eax
.text:000002F4                 mov     [ebp+var_8], eax
.text:000002F7                 mov     [ebp+var_4], eax
.text:000002FA                 mov     [ebp+var_4], 4000000h
.text:00000301                 mov     [ebp+var_8], 0
.text:00000308                 jmp     short loc_313
.text:0000030A ; ---------------------------------------------------------------------------
.text:0000030A
.text:0000030A loc_30A:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+59j
.text:0000030A                                         ; NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_382j ...
.text:0000030A                 mov     eax, [ebp+var_8]
.text:0000030D                 add     eax, 1
.text:00000310                 mov     [ebp+var_8], eax
.text:00000313
.text:00000313 loc_313:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+28j
.text:00000313                 mov     ecx, [ebp+var_8]
.text:00000316                 cmp     ecx, [ebp+arg_C]
.text:00000319                 jnb     short loc_392
.text:0000031B                 mov     edx, [ebp+var_8]
.text:0000031E                 shl     edx, 4
.text:00000321                 add     edx, [ebp+arg_8]
.text:00000324                 mov     [ebp+var_C], edx
.text:00000327                 mov     eax, [ebp+var_8]
.text:0000032A                 mov     ecx, [ebp+arg_4]
.text:0000032D                 mov     edx, [ecx+eax*4]
.text:00000330                 mov     [ebp+var_10], edx
.text:00000333                 cmp     [ebp+var_10], 10h
.text:00000337                 jb      short loc_33B
.text:00000339                 jmp     short loc_30A
.text:0000033B ; ---------------------------------------------------------------------------
.text:0000033B
.text:0000033B loc_33B:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+57j
.text:0000033B                 mov     eax, [ebp+var_10]
.text:0000033E                 mov     [ebp+var_14], eax
.text:00000341                 cmp     [ebp+var_14], 1
.text:00000345                 jz      short loc_355
.text:00000347                 cmp     [ebp+var_14], 0Dh
.text:0000034B                 jz      short loc_382
.text:0000034D                 cmp     [ebp+var_14], 0Fh
.text:00000351                 jz      short loc_384
.text:00000353                 jmp     short loc_386
.text:00000355 ; ---------------------------------------------------------------------------
.text:00000355
.text:00000355 loc_355:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+65j
.text:00000355                 mov     ecx, [ebp+var_C]
.text:00000358                 movzx   edx, word ptr [ecx]
.text:0000035B                 cmp     edx, 13h
.text:0000035E                 jz      short loc_367
.text:00000360                 mov     eax, 80070057h
.text:00000365                 jmp     short loc_39D
.text:00000367 ; ---------------------------------------------------------------------------
.text:00000367
.text:00000367 loc_367:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+7Ej
.text:00000367                 mov     eax, [ebp+var_C]
.text:0000036A                 mov     ecx, [eax+8]
.text:0000036D                 mov     [ebp+var_4], ecx
.text:00000370                 cmp     [ebp+var_4], 80000000h
.text:00000377                 jbe     short loc_380
.text:00000379                 mov     eax, 80070057h
.text:0000037E                 jmp     short loc_39D
.text:00000380 ; ---------------------------------------------------------------------------
.text:00000380
.text:00000380 loc_380:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+97j
.text:00000380                 jmp     short loc_38D
.text:00000382 ; ---------------------------------------------------------------------------
.text:00000382
.text:00000382 loc_382:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+6Bj
.text:00000382                 jmp     short loc_30A
.text:00000384 ; ---------------------------------------------------------------------------
.text:00000384
.text:00000384 loc_384:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+71j
.text:00000384                 jmp     short loc_30A
.text:00000386 ; ---------------------------------------------------------------------------
.text:00000386
.text:00000386 loc_386:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+73j
.text:00000386                 mov     eax, 80070057h
.text:0000038B                 jmp     short loc_39D
.text:0000038D ; ---------------------------------------------------------------------------
.text:0000038D
.text:0000038D loc_38D:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_380j
.text:0000038D                 jmp     loc_30A
.text:00000392 ; ---------------------------------------------------------------------------
.text:00000392
.text:00000392 loc_392:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+39j
.text:00000392                 mov     edx, [ebp+this]
.text:00000395                 mov     eax, [ebp+var_4]
.text:00000398                 mov     [edx+48h], eax
.text:0000039B                 xor     eax, eax
.text:0000039D
.text:0000039D loc_39D:                                ; CODE XREF: NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+85j
.text:0000039D                                         ; NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+9Ej ...
.text:0000039D                 mov     esp, ebp
.text:0000039F                 pop     ebp
.text:000003A0                 retn    10h
.text:000003A0 ?SetCoderProperties@CEncoder@NBcj2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:000003A0
.text:000003A0 ; ---------------------------------------------------------------------------
.text:000003A3                 align 10h
.text:000003B0
.text:000003B0 ; =============== S U B R O U T I N E =======================================
.text:000003B0
.text:000003B0 ; Attributes: bp-based frame
.text:000003B0
.text:000003B0 ; __int32 __thiscall NCompress::NBcj2::CEncoder::CodeReal(NCompress::NBcj2::CEncoder *this, struct ISequentialInStream *const *, const unsigned __int64 *const *, unsigned int, struct ISequentialOutStream *const *, const unsigned __int64 *const *, unsigned int, struct ICompressProgressInfo *)
.text:000003B0                 public ?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.text:000003B0 ?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z proc near
.text:000003B0                                         ; CODE XREF: NCompress::NBcj2::CEncoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+60p
.text:000003B0
.text:000003B0 var_388         = dword ptr -388h
.text:000003B0 var_384         = dword ptr -384h
.text:000003B0 var_380         = dword ptr -380h
.text:000003B0 var_37C         = dword ptr -37Ch
.text:000003B0 var_378         = dword ptr -378h
.text:000003B0 var_374         = dword ptr -374h
.text:000003B0 var_370         = dword ptr -370h
.text:000003B0 var_36C         = dword ptr -36Ch
.text:000003B0 var_368         = dword ptr -368h
.text:000003B0 var_364         = dword ptr -364h
.text:000003B0 var_360         = dword ptr -360h
.text:000003B0 var_35C         = dword ptr -35Ch
.text:000003B0 var_358         = dword ptr -358h
.text:000003B0 var_354         = dword ptr -354h
.text:000003B0 var_350         = dword ptr -350h
.text:000003B0 var_34C         = dword ptr -34Ch
.text:000003B0 var_348         = dword ptr -348h
.text:000003B0 var_344         = dword ptr -344h
.text:000003B0 var_340         = dword ptr -340h
.text:000003B0 var_338         = dword ptr -338h
.text:000003B0 var_334         = dword ptr -334h
.text:000003B0 var_32C         = dword ptr -32Ch
.text:000003B0 var_324         = dword ptr -324h
.text:000003B0 var_31C         = dword ptr -31Ch
.text:000003B0 var_318         = dword ptr -318h
.text:000003B0 var_314         = dword ptr -314h
.text:000003B0 var_30D         = byte ptr -30Dh
.text:000003B0 var_30C         = dword ptr -30Ch
.text:000003B0 var_308         = dword ptr -308h
.text:000003B0 var_304         = dword ptr -304h
.text:000003B0 var_2FC         = dword ptr -2FCh
.text:000003B0 var_2F8         = dword ptr -2F8h
.text:000003B0 var_2ED         = byte ptr -2EDh
.text:000003B0 var_2EC         = dword ptr -2ECh
.text:000003B0 var_2E8         = dword ptr -2E8h
.text:000003B0 var_2E4         = dword ptr -2E4h
.text:000003B0 var_2E0         = dword ptr -2E0h
.text:000003B0 var_2D9         = byte ptr -2D9h
.text:000003B0 var_2D8         = dword ptr -2D8h
.text:000003B0 var_2D4         = dword ptr -2D4h
.text:000003B0 var_2CC         = dword ptr -2CCh
.text:000003B0 var_2C8         = dword ptr -2C8h
.text:000003B0 var_2C0         = dword ptr -2C0h
.text:000003B0 var_2BC         = dword ptr -2BCh
.text:000003B0 var_2B8         = dword ptr -2B8h
.text:000003B0 var_2B4         = dword ptr -2B4h
.text:000003B0 var_2B0         = dword ptr -2B0h
.text:000003B0 var_2AC         = dword ptr -2ACh
.text:000003B0 var_2A4         = dword ptr -2A4h
.text:000003B0 var_294         = dword ptr -294h
.text:000003B0 var_284         = dword ptr -284h
.text:000003B0 var_280         = dword ptr -280h
.text:000003B0 var_27C         = dword ptr -27Ch
.text:000003B0 var_278         = dword ptr -278h
.text:000003B0 var_25C         = dword ptr -25Ch
.text:000003B0 var_258         = dword ptr -258h
.text:000003B0 var_254         = dword ptr -254h
.text:000003B0 var_250         = dword ptr -250h
.text:000003B0 var_248         = dword ptr -248h
.text:000003B0 var_23C         = dword ptr -23Ch
.text:000003B0 var_2C          = byte ptr -2Ch
.text:000003B0 var_24          = dword ptr -24h
.text:000003B0 var_20          = dword ptr -20h
.text:000003B0 var_1C          = dword ptr -1Ch
.text:000003B0 var_18          = dword ptr -18h
.text:000003B0 var_14          = dword ptr -14h
.text:000003B0 var_10          = dword ptr -10h
.text:000003B0 var_C           = dword ptr -0Ch
.text:000003B0 var_4           = dword ptr -4
.text:000003B0 arg_0           = dword ptr  8
.text:000003B0 arg_4           = dword ptr  0Ch
.text:000003B0 arg_8           = dword ptr  10h
.text:000003B0 arg_C           = dword ptr  14h
.text:000003B0 arg_14          = dword ptr  1Ch
.text:000003B0 arg_18          = dword ptr  20h
.text:000003B0
.text:000003B0                 push    ebp
.text:000003B1                 mov     ebp, esp
.text:000003B3                 push    0FFFFFFFFh
.text:000003B5                 push    offset __ehhandler$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.text:000003BA                 mov     eax, large fs:0
.text:000003C0                 push    eax
.text:000003C1                 sub     esp, 37Ch
.text:000003C7                 push    esi
.text:000003C8                 push    edi
.text:000003C9                 push    ecx
.text:000003CA                 lea     edi, [ebp+var_388]
.text:000003D0                 mov     ecx, 0DFh ; '¯'
.text:000003D5                 mov     eax, 0CCCCCCCCh
.text:000003DA                 rep stosd
.text:000003DC                 pop     ecx
.text:000003DD                 mov     eax, dword ptr ds:___security_cookie
.text:000003E2                 xor     eax, ebp
.text:000003E4                 mov     [ebp+var_10], eax
.text:000003E7                 push    eax
.text:000003E8                 lea     eax, [ebp+var_C]
.text:000003EB                 mov     large fs:0, eax
.text:000003F1                 mov     [ebp+var_14], ecx
.text:000003F4                 cmp     [ebp+arg_8], 1
.text:000003F8                 jnz     short loc_400
.text:000003FA                 cmp     [ebp+arg_14], 4
.text:000003FE                 jz      short loc_40A
.text:00000400
.text:00000400 loc_400:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+48j
.text:00000400                 mov     eax, 80070057h
.text:00000405                 jmp     loc_D5A
.text:0000040A ; ---------------------------------------------------------------------------
.text:0000040A
.text:0000040A loc_40A:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+4Ej
.text:0000040A                 push    1               ; bool
.text:0000040C                 mov     ecx, [ebp+var_14]
.text:0000040F                 add     ecx, 10h        ; this
.text:00000412                 call    ?Alloc@CBaseCoder@NBcj2@NCompress@@IAEJ_N@Z ; NCompress::NBcj2::CBaseCoder::Alloc(bool)
.text:00000417                 mov     [ebp+var_18], eax
.text:0000041A                 cmp     [ebp+var_18], 0
.text:0000041E                 jz      short loc_428
.text:00000420                 mov     eax, [ebp+var_18]
.text:00000423                 jmp     loc_D5A
.text:00000428 ; ---------------------------------------------------------------------------
.text:00000428
.text:00000428 loc_428:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+6Ej
.text:00000428                 mov     [ebp+var_1C], 0
.text:0000042F                 cmp     [ebp+arg_4], 0
.text:00000433                 jz      short loc_464
.text:00000435                 mov     eax, [ebp+arg_4]
.text:00000438                 cmp     dword ptr [eax], 0
.text:0000043B                 jz      short loc_464
.text:0000043D                 mov     ecx, [ebp+arg_4]
.text:00000440                 mov     edx, [ecx]
.text:00000442                 mov     eax, [edx]
.text:00000444                 mov     [ebp+var_24], eax
.text:00000447                 mov     ecx, [edx+4]
.text:0000044A                 mov     [ebp+var_20], ecx
.text:0000044D                 cmp     [ebp+var_20], 0
.text:00000451                 ja      short loc_464
.text:00000453                 jb      short loc_45E
.text:00000455                 cmp     [ebp+var_24], 80000000h
.text:0000045C                 ja      short loc_464
.text:0000045E
.text:0000045E loc_45E:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+A3j
.text:0000045E                 mov     edx, [ebp+var_24]
.text:00000461                 mov     [ebp+var_1C], edx
.text:00000464
.text:00000464 loc_464:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+83j
.text:00000464                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+8Bj ...
.text:00000464                 lea     ecx, [ebp+var_2C]
.text:00000467                 call    ??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::CMyComPtr<ICompressGetSubStreamSize>(void)
.text:0000046C                 mov     [ebp+var_4], 0
.text:00000473                 lea     ecx, [ebp+var_2C]
.text:00000476                 call    ??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ ; CMyComPtr<ICompressGetSubStreamSize>::operator&(void)
.text:0000047B                 mov     esi, esp
.text:0000047D                 push    eax
.text:0000047E                 push    offset _IID_ICompressGetSubStreamSize
.text:00000483                 mov     eax, [ebp+arg_0]
.text:00000486                 mov     ecx, [eax]
.text:00000488                 mov     edx, [ebp+arg_0]
.text:0000048B                 mov     eax, [edx]
.text:0000048D                 mov     ecx, [ecx]
.text:0000048F                 push    eax
.text:00000490                 mov     edx, [ecx]
.text:00000492                 call    edx
.text:00000494                 cmp     esi, esp
.text:00000496                 call    __RTC_CheckEsp
.text:0000049B                 mov     eax, [ebp+var_14]
.text:0000049E                 mov     ecx, [eax+20h]
.text:000004A1                 mov     [ebp+var_284], ecx
.text:000004A7                 mov     edx, [ebp+var_284]
.text:000004AD                 mov     [ebp+var_280], edx
.text:000004B3                 mov     [ebp+var_2AC], 0
.text:000004BD                 jmp     short loc_4CE
.text:000004BF ; ---------------------------------------------------------------------------
.text:000004BF
.text:000004BF loc_4BF:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+168j
.text:000004BF                 mov     eax, [ebp+var_2AC]
.text:000004C5                 add     eax, 1
.text:000004C8                 mov     [ebp+var_2AC], eax
.text:000004CE
.text:000004CE loc_4CE:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+10Dj
.text:000004CE                 cmp     [ebp+var_2AC], 4
.text:000004D5                 jge     short loc_51A
.text:000004D7                 mov     ecx, [ebp+var_2AC]
.text:000004DD                 mov     edx, [ebp+var_2AC]
.text:000004E3                 mov     eax, [ebp+var_14]
.text:000004E6                 mov     edx, [eax+edx*4+10h]
.text:000004EA                 mov     [ebp+ecx*4+var_2A4], edx
.text:000004F1                 mov     eax, [ebp+var_2AC]
.text:000004F7                 mov     ecx, [ebp+var_14]
.text:000004FA                 mov     edx, [ecx+eax*4+10h]
.text:000004FE                 mov     eax, [ebp+var_2AC]
.text:00000504                 mov     ecx, [ebp+var_14]
.text:00000507                 add     edx, [ecx+eax*4+24h]
.text:0000050B                 mov     eax, [ebp+var_2AC]
.text:00000511                 mov     [ebp+eax*4+var_294], edx
.text:00000518                 jmp     short loc_4BF
.text:0000051A ; ---------------------------------------------------------------------------
.text:0000051A
.text:0000051A loc_51A:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+125j
.text:0000051A                 mov     [ebp+var_2B0], 0
.text:00000524                 mov     [ebp+var_2B8], 0
.text:0000052E                 mov     [ebp+var_2B4], 0
.text:00000538                 mov     [ebp+var_2C0], 0
.text:00000542                 mov     [ebp+var_2BC], 0
.text:0000054C                 mov     [ebp+var_2CC], 0
.text:00000556                 mov     [ebp+var_2C8], 0
.text:00000560                 mov     [ebp+var_2D8], 0
.text:0000056A                 mov     [ebp+var_2D4], 0
.text:00000574                 lea     ecx, [ebp+var_2A4]
.text:0000057A                 push    ecx
.text:0000057B                 call    _Bcj2Enc_Init@4 ; Bcj2Enc_Init(x)
.text:00000580                 mov     [ebp+var_258], 0
.text:0000058A                 mov     edx, [ebp+var_1C]
.text:0000058D                 mov     [ebp+var_254], edx
.text:00000593                 mov     eax, [ebp+var_14]
.text:00000596                 mov     ecx, [eax+4Ch]
.text:00000599                 mov     [ebp+var_250], ecx
.text:0000059F                 mov     [ebp+var_278], 0
.text:000005A9                 mov     [ebp+var_2D9], 0
.text:000005B0                 mov     [ebp+var_2E4], 0
.text:000005BA                 mov     [ebp+var_2E0], 0
.text:000005C4                 mov     [ebp+var_2EC], 0
.text:000005CE                 mov     [ebp+var_2E8], 0
.text:000005D8                 mov     [ebp+var_2ED], 0
.text:000005DF
.text:000005DF loc_5DF:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+715j
.text:000005DF                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+725j ...
.text:000005DF                 movzx   edx, [ebp+var_2D9]
.text:000005E6                 test    edx, edx
.text:000005E8                 jz      loc_89E
.text:000005EE                 lea     ecx, [ebp+var_2C]
.text:000005F1                 call    ??B?$CMyComPtr@UICompressGetSubStreamSize@@@@QBEPAUICompressGetSubStreamSize@@XZ ; CMyComPtr<ICompressGetSubStreamSize>::operator ICompressGetSubStreamSize *(void)
.text:000005F6                 test    eax, eax
.text:000005F8                 jz      loc_89E
.text:000005FE                 mov     [ebp+var_258], 0
.text:00000608                 mov     eax, [ebp+var_1C]
.text:0000060B                 mov     [ebp+var_254], eax
.text:00000611                 mov     [ebp+var_278], 0
.text:0000061B
.text:0000061B loc_61B:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+3C5j
.text:0000061B                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+4E9j
.text:0000061B                 mov     [ebp+var_2FC], 0
.text:00000625                 mov     [ebp+var_2F8], 0
.text:0000062F                 lea     ecx, [ebp+var_2C]
.text:00000632                 call    ??C?$CMyComPtr@UICompressGetSubStreamSize@@@@QBEPAUICompressGetSubStreamSize@@XZ ; CMyComPtr<ICompressGetSubStreamSize>::operator->(void)
.text:00000637                 mov     [ebp+var_36C], eax
.text:0000063D                 mov     esi, esp
.text:0000063F                 lea     ecx, [ebp+var_2FC]
.text:00000645                 push    ecx
.text:00000646                 mov     edx, [ebp+var_2E0]
.text:0000064C                 push    edx
.text:0000064D                 mov     eax, [ebp+var_2E4]
.text:00000653                 push    eax
.text:00000654                 mov     ecx, [ebp+var_36C]
.text:0000065A                 push    ecx
.text:0000065B                 mov     edx, [ebp+var_36C]
.text:00000661                 mov     eax, [edx]
.text:00000663                 mov     ecx, [eax+0Ch]
.text:00000666                 call    ecx
.text:00000668                 cmp     esi, esp
.text:0000066A                 call    __RTC_CheckEsp
.text:0000066F                 mov     [ebp+var_304], eax
.text:00000675                 mov     [ebp+var_2D9], 0
.text:0000067C                 cmp     [ebp+var_304], 0
.text:00000683                 jnz     loc_852
.text:00000689                 mov     edx, [ebp+var_2EC]
.text:0000068F                 add     edx, [ebp+var_2FC]
.text:00000695                 mov     eax, [ebp+var_2E8]
.text:0000069B                 adc     eax, [ebp+var_2F8]
.text:000006A1                 mov     [ebp+var_30C], edx
.text:000006A7                 mov     [ebp+var_308], eax
.text:000006AD                 mov     ecx, [ebp+var_308]
.text:000006B3                 cmp     ecx, [ebp+var_2BC]
.text:000006B9                 jb      short loc_700
.text:000006BB                 ja      short loc_6CB
.text:000006BD                 mov     edx, [ebp+var_30C]
.text:000006C3                 cmp     edx, [ebp+var_2C0]
.text:000006C9                 jb      short loc_700
.text:000006CB
.text:000006CB loc_6CB:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+30Bj
.text:000006CB                 mov     eax, [ebp+var_308]
.text:000006D1                 cmp     eax, [ebp+var_2BC]
.text:000006D7                 ja      short loc_6F4
.text:000006D9                 jb      short loc_6E9
.text:000006DB                 mov     ecx, [ebp+var_30C]
.text:000006E1                 cmp     ecx, [ebp+var_2C0]
.text:000006E7                 ja      short loc_6F4
.text:000006E9
.text:000006E9 loc_6E9:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+329j
.text:000006E9                 movzx   edx, [ebp+var_2ED]
.text:000006F0                 test    edx, edx
.text:000006F2                 jnz     short loc_700
.text:000006F4
.text:000006F4 loc_6F4:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+327j
.text:000006F4                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+337j
.text:000006F4                 mov     [ebp+var_370], 0
.text:000006FE                 jmp     short loc_70A
.text:00000700 ; ---------------------------------------------------------------------------
.text:00000700
.text:00000700 loc_700:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+309j
.text:00000700                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+319j ...
.text:00000700                 mov     [ebp+var_370], 1
.text:0000070A
.text:0000070A loc_70A:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+34Ej
.text:0000070A                 mov     al, byte ptr [ebp+var_370]
.text:00000710                 mov     [ebp+var_30D], al
.text:00000716                 mov     ecx, [ebp+var_308]
.text:0000071C                 cmp     ecx, [ebp+var_2C8]
.text:00000722                 ja      short loc_77A
.text:00000724                 jb      short loc_734
.text:00000726                 mov     edx, [ebp+var_30C]
.text:0000072C                 cmp     edx, [ebp+var_2CC]
.text:00000732                 ja      short loc_77A
.text:00000734
.text:00000734 loc_734:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+374j
.text:00000734                 movzx   eax, [ebp+var_30D]
.text:0000073B                 test    eax, eax
.text:0000073D                 jz      short loc_77A
.text:0000073F                 mov     ecx, [ebp+var_30C]
.text:00000745                 mov     [ebp+var_2EC], ecx
.text:0000074B                 mov     edx, [ebp+var_308]
.text:00000751                 mov     [ebp+var_2E8], edx
.text:00000757                 mov     eax, [ebp+var_2E4]
.text:0000075D                 add     eax, 1
.text:00000760                 mov     ecx, [ebp+var_2E0]
.text:00000766                 adc     ecx, 0
.text:00000769                 mov     [ebp+var_2E4], eax
.text:0000076F                 mov     [ebp+var_2E0], ecx
.text:00000775                 jmp     loc_61B
.text:0000077A ; ---------------------------------------------------------------------------
.text:0000077A
.text:0000077A loc_77A:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+372j
.text:0000077A                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+382j ...
.text:0000077A                 mov     edx, [ebp+var_14]
.text:0000077D                 mov     eax, [edx+20h]
.text:00000780                 add     eax, [ebp+var_2B0]
.text:00000786                 mov     [ebp+var_280], eax
.text:0000078C                 movzx   ecx, [ebp+var_30D]
.text:00000793                 test    ecx, ecx
.text:00000795                 jz      short loc_809
.text:00000797                 mov     edx, [ebp+var_2C0]
.text:0000079D                 sub     edx, [ebp+var_30C]
.text:000007A3                 mov     eax, [ebp+var_2BC]
.text:000007A9                 sbb     eax, [ebp+var_308]
.text:000007AF                 mov     [ebp+var_314], edx
.text:000007B5                 mov     ecx, [ebp+var_280]
.text:000007BB                 sub     ecx, [ebp+var_284]
.text:000007C1                 cmp     ecx, [ebp+var_314]
.text:000007C7                 jnb     short loc_7ED
.text:000007C9                 mov     [ebp+var_34C], 80004005h
.text:000007D3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000007DA                 lea     ecx, [ebp+var_2C]
.text:000007DD                 call    ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)
.text:000007E2                 mov     eax, [ebp+var_34C]
.text:000007E8                 jmp     loc_D5A
.text:000007ED ; ---------------------------------------------------------------------------
.text:000007ED
.text:000007ED loc_7ED:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+417j
.text:000007ED                 mov     edx, [ebp+var_280]
.text:000007F3                 sub     edx, [ebp+var_314]
.text:000007F9                 mov     [ebp+var_280], edx
.text:000007FF                 mov     [ebp+var_278], 1
.text:00000809
.text:00000809 loc_809:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+3E5j
.text:00000809                 cmp     [ebp+var_2F8], 0
.text:00000810                 ja      short loc_850
.text:00000812                 jb      short loc_820
.text:00000814                 cmp     [ebp+var_2FC], 80000000h
.text:0000081E                 ja      short loc_850
.text:00000820
.text:00000820 loc_820:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+462j
.text:00000820                 mov     eax, [ebp+var_2EC]
.text:00000826                 sub     eax, [ebp+var_2CC]
.text:0000082C                 mov     ecx, [ebp+var_2E8]
.text:00000832                 sbb     ecx, [ebp+var_2C8]
.text:00000838                 add     eax, [ebp+var_25C]
.text:0000083E                 mov     [ebp+var_258], eax
.text:00000844                 mov     edx, [ebp+var_2FC]
.text:0000084A                 mov     [ebp+var_254], edx
.text:00000850
.text:00000850 loc_850:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+460j
.text:00000850                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+46Ej
.text:00000850                 jmp     short loc_89E
.text:00000852 ; ---------------------------------------------------------------------------
.text:00000852
.text:00000852 loc_852:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+2D3j
.text:00000852                 cmp     [ebp+var_304], 1
.text:00000859                 jnz     short loc_85D
.text:0000085B                 jmp     short loc_89E
.text:0000085D ; ---------------------------------------------------------------------------
.text:0000085D
.text:0000085D loc_85D:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+4A9j
.text:0000085D                 cmp     [ebp+var_304], 80004001h
.text:00000867                 jnz     short loc_873
.text:00000869                 lea     ecx, [ebp+var_2C]
.text:0000086C                 call    ?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ ; CMyComPtr<ICompressGetSubStreamSize>::Release(void)
.text:00000871                 jmp     short loc_89E
.text:00000873 ; ---------------------------------------------------------------------------
.text:00000873
.text:00000873 loc_873:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+4B7j
.text:00000873                 mov     eax, [ebp+var_304]
.text:00000879                 mov     [ebp+var_350], eax
.text:0000087F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000886                 lea     ecx, [ebp+var_2C]
.text:00000889                 call    ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)
.text:0000088E                 mov     eax, [ebp+var_350]
.text:00000894                 jmp     loc_D5A
.text:00000899 ; ---------------------------------------------------------------------------
.text:00000899                 jmp     loc_61B
.text:0000089E ; ---------------------------------------------------------------------------
.text:0000089E
.text:0000089E loc_89E:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+238j
.text:0000089E                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+248j ...
.text:0000089E                 movzx   ecx, [ebp+var_2ED]
.text:000008A5                 test    ecx, ecx
.text:000008A7                 jz      short loc_913
.text:000008A9                 mov     edx, [ebp+var_2C0]
.text:000008AF                 sub     edx, [ebp+var_2CC]
.text:000008B5                 mov     eax, [ebp+var_2BC]
.text:000008BB                 sbb     eax, [ebp+var_2C8]
.text:000008C1                 mov     ecx, [ebp+var_280]
.text:000008C7                 sub     ecx, [ebp+var_284]
.text:000008CD                 add     ecx, [ebp+var_248]
.text:000008D3                 xor     esi, esi
.text:000008D5                 mov     [ebp+var_378], edx
.text:000008DB                 mov     [ebp+var_374], eax
.text:000008E1                 mov     [ebp+var_380], ecx
.text:000008E7                 mov     [ebp+var_37C], esi
.text:000008ED                 mov     edx, [ebp+var_378]
.text:000008F3                 cmp     edx, [ebp+var_380]
.text:000008F9                 jnz     short loc_913
.text:000008FB                 mov     eax, [ebp+var_374]
.text:00000901                 cmp     eax, [ebp+var_37C]
.text:00000907                 jnz     short loc_913
.text:00000909                 mov     [ebp+var_278], 2
.text:00000913
.text:00000913 loc_913:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+4F7j
.text:00000913                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+549j ...
.text:00000913                 lea     ecx, [ebp+var_2A4]
.text:00000919                 push    ecx
.text:0000091A                 call    _Bcj2Enc_Encode@4 ; Bcj2Enc_Encode(x)
.text:0000091F                 mov     edx, [ebp+var_2B0]
.text:00000925                 xor     eax, eax
.text:00000927                 mov     ecx, [ebp+var_2C0]
.text:0000092D                 sub     ecx, edx
.text:0000092F                 mov     esi, [ebp+var_2BC]
.text:00000935                 sbb     esi, eax
.text:00000937                 mov     edx, [ebp+var_14]
.text:0000093A                 mov     eax, [ebp+var_284]
.text:00000940                 sub     eax, [edx+20h]
.text:00000943                 cdq
.text:00000944                 add     ecx, eax
.text:00000946                 adc     esi, edx
.text:00000948                 mov     eax, [ebp+var_248]
.text:0000094E                 xor     edx, edx
.text:00000950                 sub     ecx, eax
.text:00000952                 sbb     esi, edx
.text:00000954                 mov     [ebp+var_2CC], ecx
.text:0000095A                 mov     [ebp+var_2C8], esi
.text:00000960                 cmp     [ebp+var_23C], 5
.text:00000967                 jnz     short loc_96E
.text:00000969                 jmp     loc_CA5
.text:0000096E ; ---------------------------------------------------------------------------
.text:0000096E
.text:0000096E loc_96E:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+5B7j
.text:0000096E                 cmp     [ebp+var_27C], 4
.text:00000975                 jnb     loc_A66
.text:0000097B                 mov     eax, [ebp+var_27C]
.text:00000981                 mov     ecx, [ebp+var_27C]
.text:00000987                 mov     edx, [ebp+var_14]
.text:0000098A                 mov     eax, [ebp+eax*4+var_2A4]
.text:00000991                 sub     eax, [edx+ecx*4+10h]
.text:00000995                 mov     [ebp+var_318], eax
.text:0000099B                 mov     ecx, [ebp+var_318]
.text:000009A1                 push    ecx             ; unsigned int
.text:000009A2                 mov     edx, [ebp+var_27C]
.text:000009A8                 mov     eax, [ebp+var_14]
.text:000009AB                 mov     ecx, [eax+edx*4+10h]
.text:000009AF                 push    ecx             ; void *
.text:000009B0                 mov     edx, [ebp+var_27C]
.text:000009B6                 mov     eax, [ebp+arg_C]
.text:000009B9                 mov     ecx, [eax+edx*4]
.text:000009BC                 push    ecx             ; struct ISequentialOutStream *
.text:000009BD                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:000009C2                 mov     [ebp+var_31C], eax
.text:000009C8                 cmp     [ebp+var_31C], 0
.text:000009CF                 jz      short loc_9F7
.text:000009D1                 mov     edx, [ebp+var_31C]
.text:000009D7                 mov     [ebp+var_354], edx
.text:000009DD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000009E4                 lea     ecx, [ebp+var_2C]
.text:000009E7                 call    ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)
.text:000009EC                 mov     eax, [ebp+var_354]
.text:000009F2                 jmp     loc_D5A
.text:000009F7 ; ---------------------------------------------------------------------------
.text:000009F7
.text:000009F7 loc_9F7:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+61Fj
.text:000009F7                 cmp     [ebp+var_27C], 3
.text:000009FE                 jnz     short loc_A20
.text:00000A00                 mov     eax, [ebp+var_318]
.text:00000A06                 xor     ecx, ecx
.text:00000A08                 add     eax, [ebp+var_2D8]
.text:00000A0E                 adc     ecx, [ebp+var_2D4]
.text:00000A14                 mov     [ebp+var_2D8], eax
.text:00000A1A                 mov     [ebp+var_2D4], ecx
.text:00000A20
.text:00000A20 loc_A20:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+64Ej
.text:00000A20                 mov     edx, [ebp+var_27C]
.text:00000A26                 mov     eax, [ebp+var_27C]
.text:00000A2C                 mov     ecx, [ebp+var_14]
.text:00000A2F                 mov     eax, [ecx+eax*4+10h]
.text:00000A33                 mov     [ebp+edx*4+var_2A4], eax
.text:00000A3A                 mov     ecx, [ebp+var_27C]
.text:00000A40                 mov     edx, [ebp+var_14]
.text:00000A43                 mov     eax, [edx+ecx*4+10h]
.text:00000A47                 mov     ecx, [ebp+var_27C]
.text:00000A4D                 mov     edx, [ebp+var_14]
.text:00000A50                 add     eax, [edx+ecx*4+24h]
.text:00000A54                 mov     ecx, [ebp+var_27C]
.text:00000A5A                 mov     [ebp+ecx*4+var_294], eax
.text:00000A61                 jmp     loc_BC0
.text:00000A66 ; ---------------------------------------------------------------------------
.text:00000A66
.text:00000A66 loc_A66:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+5C5j
.text:00000A66                 cmp     [ebp+var_27C], 4
.text:00000A6D                 jz      short loc_A98
.text:00000A6F                 mov     [ebp+var_358], 80004005h
.text:00000A79                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A80                 lea     ecx, [ebp+var_2C]
.text:00000A83                 call    ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)
.text:00000A88                 mov     eax, [ebp+var_358]
.text:00000A8E                 jmp     loc_D5A
.text:00000A93 ; ---------------------------------------------------------------------------
.text:00000A93                 jmp     loc_BC0
.text:00000A98 ; ---------------------------------------------------------------------------
.text:00000A98
.text:00000A98 loc_A98:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+6BDj
.text:00000A98                 mov     [ebp+var_2D9], 1
.text:00000A9F                 mov     edx, [ebp+var_14]
.text:00000AA2                 mov     eax, [ebp+var_284]
.text:00000AA8                 sub     eax, [edx+20h]
.text:00000AAB                 cmp     [ebp+var_2B0], eax
.text:00000AB1                 jz      short loc_ACA
.text:00000AB3                 mov     ecx, [ebp+var_14]
.text:00000AB6                 mov     edx, [ecx+20h]
.text:00000AB9                 add     edx, [ebp+var_2B0]
.text:00000ABF                 mov     [ebp+var_280], edx
.text:00000AC5                 jmp     loc_5DF
.text:00000ACA ; ---------------------------------------------------------------------------
.text:00000ACA
.text:00000ACA loc_ACA:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+701j
.text:00000ACA                 movzx   eax, [ebp+var_2ED]
.text:00000AD1                 test    eax, eax
.text:00000AD3                 jz      short loc_ADA
.text:00000AD5                 jmp     loc_5DF
.text:00000ADA ; ---------------------------------------------------------------------------
.text:00000ADA
.text:00000ADA loc_ADA:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+723j
.text:00000ADA                 mov     [ebp+var_2B0], 0
.text:00000AE4                 mov     ecx, [ebp+var_14]
.text:00000AE7                 mov     edx, [ecx+20h]
.text:00000AEA                 mov     [ebp+var_284], edx
.text:00000AF0                 mov     eax, [ebp+var_14]
.text:00000AF3                 mov     ecx, [eax+20h]
.text:00000AF6                 mov     [ebp+var_280], ecx
.text:00000AFC                 mov     edx, [ebp+var_14]
.text:00000AFF                 mov     eax, [edx+34h]
.text:00000B02                 mov     [ebp+var_324], eax
.text:00000B08                 mov     esi, esp
.text:00000B0A                 lea     ecx, [ebp+var_324]
.text:00000B10                 push    ecx
.text:00000B11                 mov     edx, [ebp+var_324]
.text:00000B17                 push    edx
.text:00000B18                 mov     eax, [ebp+var_14]
.text:00000B1B                 mov     ecx, [eax+20h]
.text:00000B1E                 push    ecx
.text:00000B1F                 mov     edx, [ebp+arg_0]
.text:00000B22                 mov     eax, [edx]
.text:00000B24                 mov     ecx, [ebp+arg_0]
.text:00000B27                 mov     edx, [ecx]
.text:00000B29                 mov     eax, [eax]
.text:00000B2B                 push    edx
.text:00000B2C                 mov     ecx, [eax+0Ch]
.text:00000B2F                 call    ecx
.text:00000B31                 cmp     esi, esp
.text:00000B33                 call    __RTC_CheckEsp
.text:00000B38                 mov     [ebp+var_32C], eax
.text:00000B3E                 cmp     [ebp+var_32C], 0
.text:00000B45                 jz      short loc_B6D
.text:00000B47                 mov     edx, [ebp+var_32C]
.text:00000B4D                 mov     [ebp+var_35C], edx
.text:00000B53                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B5A                 lea     ecx, [ebp+var_2C]
.text:00000B5D                 call    ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)
.text:00000B62                 mov     eax, [ebp+var_35C]
.text:00000B68                 jmp     loc_D5A
.text:00000B6D ; ---------------------------------------------------------------------------
.text:00000B6D
.text:00000B6D loc_B6D:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+795j
.text:00000B6D                 cmp     [ebp+var_324], 0
.text:00000B74                 jnz     short loc_B82
.text:00000B76                 mov     [ebp+var_2ED], 1
.text:00000B7D                 jmp     loc_5DF
.text:00000B82 ; ---------------------------------------------------------------------------
.text:00000B82
.text:00000B82 loc_B82:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+7C4j
.text:00000B82                 mov     eax, [ebp+var_324]
.text:00000B88                 mov     [ebp+var_2B0], eax
.text:00000B8E                 mov     ecx, [ebp+var_2B0]
.text:00000B94                 xor     edx, edx
.text:00000B96                 add     ecx, [ebp+var_2C0]
.text:00000B9C                 adc     edx, [ebp+var_2BC]
.text:00000BA2                 mov     [ebp+var_2C0], ecx
.text:00000BA8                 mov     [ebp+var_2BC], edx
.text:00000BAE                 mov     eax, [ebp+var_14]
.text:00000BB1                 mov     ecx, [eax+20h]
.text:00000BB4                 add     ecx, [ebp+var_2B0]
.text:00000BBA                 mov     [ebp+var_280], ecx
.text:00000BC0
.text:00000BC0 loc_BC0:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+6B1j
.text:00000BC0                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+6E3j
.text:00000BC0                 cmp     [ebp+arg_18], 0
.text:00000BC4                 jz      loc_CA0
.text:00000BCA                 mov     edx, [ebp+var_2CC]
.text:00000BD0                 sub     edx, [ebp+var_2B8]
.text:00000BD6                 mov     eax, [ebp+var_2C8]
.text:00000BDC                 sbb     eax, [ebp+var_2B4]
.text:00000BE2                 mov     [ebp+var_388], edx
.text:00000BE8                 mov     [ebp+var_384], eax
.text:00000BEE                 cmp     [ebp+var_384], 0
.text:00000BF5                 ja      short loc_C07
.text:00000BF7                 cmp     [ebp+var_388], 100000h
.text:00000C01                 jb      loc_CA0
.text:00000C07
.text:00000C07 loc_C07:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+845j
.text:00000C07                 mov     ecx, [ebp+var_2CC]
.text:00000C0D                 add     ecx, [ebp+var_2D8]
.text:00000C13                 mov     edx, [ebp+var_2C8]
.text:00000C19                 adc     edx, [ebp+var_2D4]
.text:00000C1F                 mov     eax, ecx
.text:00000C21                 cdq
.text:00000C22                 mov     [ebp+var_338], eax
.text:00000C28                 mov     [ebp+var_334], edx
.text:00000C2E                 mov     eax, [ebp+var_2CC]
.text:00000C34                 mov     [ebp+var_2B8], eax
.text:00000C3A                 mov     ecx, [ebp+var_2C8]
.text:00000C40                 mov     [ebp+var_2B4], ecx
.text:00000C46                 mov     esi, esp
.text:00000C48                 lea     edx, [ebp+var_338]
.text:00000C4E                 push    edx
.text:00000C4F                 lea     eax, [ebp+var_2CC]
.text:00000C55                 push    eax
.text:00000C56                 mov     ecx, [ebp+arg_18]
.text:00000C59                 mov     edx, [ecx]
.text:00000C5B                 mov     eax, [ebp+arg_18]
.text:00000C5E                 push    eax
.text:00000C5F                 mov     ecx, [edx+0Ch]
.text:00000C62                 call    ecx
.text:00000C64                 cmp     esi, esp
.text:00000C66                 call    __RTC_CheckEsp
.text:00000C6B                 mov     [ebp+var_340], eax
.text:00000C71                 cmp     [ebp+var_340], 0
.text:00000C78                 jz      short loc_CA0
.text:00000C7A                 mov     edx, [ebp+var_340]
.text:00000C80                 mov     [ebp+var_360], edx
.text:00000C86                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C8D                 lea     ecx, [ebp+var_2C]
.text:00000C90                 call    ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)
.text:00000C95                 mov     eax, [ebp+var_360]
.text:00000C9B                 jmp     loc_D5A
.text:00000CA0 ; ---------------------------------------------------------------------------
.text:00000CA0
.text:00000CA0 loc_CA0:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+814j
.text:00000CA0                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+851j ...
.text:00000CA0                 jmp     loc_5DF
.text:00000CA5 ; ---------------------------------------------------------------------------
.text:00000CA5
.text:00000CA5 loc_CA5:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+5B9j
.text:00000CA5                 mov     [ebp+var_344], 0
.text:00000CAF                 jmp     short loc_CC0
.text:00000CB1 ; ---------------------------------------------------------------------------
.text:00000CB1
.text:00000CB1 loc_CB1:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *):loc_D36j
.text:00000CB1                 mov     eax, [ebp+var_344]
.text:00000CB7                 add     eax, 1
.text:00000CBA                 mov     [ebp+var_344], eax
.text:00000CC0
.text:00000CC0 loc_CC0:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+8FFj
.text:00000CC0                 cmp     [ebp+var_344], 4
.text:00000CC7                 jge     short loc_D3B
.text:00000CC9                 mov     ecx, [ebp+var_344]
.text:00000CCF                 mov     edx, [ebp+var_344]
.text:00000CD5                 mov     eax, [ebp+var_14]
.text:00000CD8                 mov     ecx, [ebp+ecx*4+var_2A4]
.text:00000CDF                 sub     ecx, [eax+edx*4+10h]
.text:00000CE3                 push    ecx             ; unsigned int
.text:00000CE4                 mov     edx, [ebp+var_344]
.text:00000CEA                 mov     eax, [ebp+var_14]
.text:00000CED                 mov     ecx, [eax+edx*4+10h]
.text:00000CF1                 push    ecx             ; void *
.text:00000CF2                 mov     edx, [ebp+var_344]
.text:00000CF8                 mov     eax, [ebp+arg_C]
.text:00000CFB                 mov     ecx, [eax+edx*4]
.text:00000CFE                 push    ecx             ; struct ISequentialOutStream *
.text:00000CFF                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00000D04                 mov     [ebp+var_348], eax
.text:00000D0A                 cmp     [ebp+var_348], 0
.text:00000D11                 jz      short loc_D36
.text:00000D13                 mov     edx, [ebp+var_348]
.text:00000D19                 mov     [ebp+var_364], edx
.text:00000D1F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D26                 lea     ecx, [ebp+var_2C]
.text:00000D29                 call    ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)
.text:00000D2E                 mov     eax, [ebp+var_364]
.text:00000D34                 jmp     short loc_D5A
.text:00000D36 ; ---------------------------------------------------------------------------
.text:00000D36
.text:00000D36 loc_D36:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+961j
.text:00000D36                 jmp     loc_CB1
.text:00000D3B ; ---------------------------------------------------------------------------
.text:00000D3B
.text:00000D3B loc_D3B:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+917j
.text:00000D3B                 mov     [ebp+var_368], 0
.text:00000D45                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D4C                 lea     ecx, [ebp+var_2C]
.text:00000D4F                 call    ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)
.text:00000D54                 mov     eax, [ebp+var_368]
.text:00000D5A
.text:00000D5A loc_D5A:                                ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+55j
.text:00000D5A                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+73j ...
.text:00000D5A                 push    edx
.text:00000D5B                 mov     ecx, ebp
.text:00000D5D                 push    eax
.text:00000D5E                 lea     edx, $LN62
.text:00000D64                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D69                 pop     eax
.text:00000D6A                 pop     edx
.text:00000D6B                 mov     ecx, [ebp+var_C]
.text:00000D6E                 mov     large fs:0, ecx
.text:00000D75                 pop     ecx
.text:00000D76                 pop     edi
.text:00000D77                 pop     esi
.text:00000D78                 mov     ecx, [ebp+var_10]
.text:00000D7B                 xor     ecx, ebp
.text:00000D7D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000D82                 add     esp, 388h
.text:00000D88                 cmp     ebp, esp
.text:00000D8A                 call    __RTC_CheckEsp
.text:00000D8F                 mov     esp, ebp
.text:00000D91                 pop     ebp
.text:00000D92                 retn    1Ch
.text:00000D92 ?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z endp
.text:00000D92
.text:00000D92 ; ---------------------------------------------------------------------------
.text:00000D95                 align 4
.text:00000D98 $LN62           dd 6                    ; DATA XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+9AEo
.text:00000D9C                 dd offset $LN61
.text:00000DA0 $LN61           dd 0FFFFFFD4h, 4        ; DATA XREF: .text:00000D9Co
.text:00000DA8                 dd offset $LN54         ; "getSubStreamSize"
.text:00000DAC                 dd 0FFFFFD5Ch, 270h
.text:00000DB4                 dd offset $LN55         ; "enc"
.text:00000DB8                 dd 0FFFFFD34h, 8
.text:00000DC0                 dd offset $LN56         ; "currentInPos"
.text:00000DC4                 dd 0FFFFFD04h, 8
.text:00000DCC                 dd offset $LN57         ; "subStreamSize"
.text:00000DD0                 dd 0FFFFFCDCh, 4
.text:00000DD8                 dd offset $LN58         ; "curSize"
.text:00000DDC                 dd 0FFFFFCC8h, 8
.text:00000DE4                 dd offset $LN59         ; "outSize2"
.text:00000DE8 $LN59           db 'outSize2',0         ; DATA XREF: .text:00000DE4o
.text:00000DF1 $LN58           db 'curSize',0          ; DATA XREF: .text:00000DD8o
.text:00000DF9 $LN57           db 'subStreamSize',0    ; DATA XREF: .text:00000DCCo
.text:00000E07 $LN56           db 'currentInPos',0     ; DATA XREF: .text:00000DC0o
.text:00000E14 $LN55           db 'enc',0              ; DATA XREF: .text:00000DB4o
.text:00000E18 $LN54           db 'getSubStreamSize',0 ; DATA XREF: .text:00000DA8o
.text:00000E29                 align 10h
.text:00000E30
.text:00000E30 ; =============== S U B R O U T I N E =======================================
.text:00000E30
.text:00000E30 ; Attributes: bp-based frame
.text:00000E30
.text:00000E30 ; __int32 __cdecl NCompress::NBcj2::CEncoder::Code(NCompress::NBcj2::CEncoder *this, struct ISequentialInStream *const *, const unsigned __int64 *const *, unsigned int, struct ISequentialOutStream *const *, const unsigned __int64 *const *, unsigned int, struct ICompressProgressInfo *)
.text:00000E30                 public ?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.text:00000E30 ?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z proc near
.text:00000E30                                         ; DATA XREF: .rdata:00001E0Co
.text:00000E30
.text:00000E30 var_18          = dword ptr -18h
.text:00000E30 var_14          = dword ptr -14h
.text:00000E30 var_10          = dword ptr -10h
.text:00000E30 var_C           = dword ptr -0Ch
.text:00000E30 var_4           = dword ptr -4
.text:00000E30 this            = dword ptr  8
.text:00000E30 arg_4           = dword ptr  0Ch
.text:00000E30 arg_8           = dword ptr  10h
.text:00000E30 arg_C           = dword ptr  14h
.text:00000E30 arg_10          = dword ptr  18h
.text:00000E30 arg_14          = dword ptr  1Ch
.text:00000E30 arg_18          = dword ptr  20h
.text:00000E30 arg_1C          = dword ptr  24h
.text:00000E30
.text:00000E30 ; FUNCTION CHUNK AT .text:00000EC3 SIZE 0000001E BYTES
.text:00000E30
.text:00000E30                 push    ebp
.text:00000E31                 mov     ebp, esp
.text:00000E33                 push    0FFFFFFFFh
.text:00000E35                 push    offset __ehhandler$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.text:00000E3A                 mov     eax, large fs:0
.text:00000E40                 push    eax
.text:00000E41                 push    ecx
.text:00000E42                 sub     esp, 8
.text:00000E45                 push    ebx
.text:00000E46                 push    esi
.text:00000E47                 push    edi
.text:00000E48                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00000E4F                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000E56                 mov     eax, dword ptr ds:___security_cookie
.text:00000E5B                 xor     eax, ebp
.text:00000E5D                 push    eax
.text:00000E5E                 lea     eax, [ebp+var_C]
.text:00000E61                 mov     large fs:0, eax
.text:00000E67                 mov     [ebp+var_10], esp
.text:00000E6A                 mov     [ebp+var_4], 0
.text:00000E71                 mov     eax, [ebp+arg_1C]
.text:00000E74                 push    eax             ; struct ICompressProgressInfo *
.text:00000E75                 mov     ecx, [ebp+arg_18]
.text:00000E78                 push    ecx             ; unsigned int
.text:00000E79                 mov     edx, [ebp+arg_14]
.text:00000E7C                 push    edx             ; unsigned __int64 **
.text:00000E7D                 mov     eax, [ebp+arg_10]
.text:00000E80                 push    eax             ; struct ISequentialOutStream **
.text:00000E81                 mov     ecx, [ebp+arg_C]
.text:00000E84                 push    ecx             ; unsigned int
.text:00000E85                 mov     edx, [ebp+arg_8]
.text:00000E88                 push    edx             ; unsigned __int64 **
.text:00000E89                 mov     eax, [ebp+arg_4]
.text:00000E8C                 push    eax             ; struct ISequentialInStream **
.text:00000E8D                 mov     ecx, [ebp+this] ; this
.text:00000E90                 call    ?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)
.text:00000E95                 mov     [ebp+var_18], eax
.text:00000E98                 mov     eax, [ebp+var_18]
.text:00000E9B                 jmp     short loc_EC3
.text:00000E9B ?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z endp
.text:00000E9B
.text:00000E9D
.text:00000E9D ; =============== S U B R O U T I N E =======================================
.text:00000E9D
.text:00000E9D
.text:00000E9D __catch$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$0 proc near
.text:00000E9D                                         ; DATA XREF: .xdata$x:0000259Co
.text:00000E9D                 mov     dword ptr [ebp-14h], 80004005h
.text:00000EA4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000EAB                 mov     eax, offset $LN7
.text:00000EB0                 retn
.text:00000EB0 __catch$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$0 endp
.text:00000EB0
.text:00000EB1 ; ---------------------------------------------------------------------------
.text:00000EB1                 mov     eax, offset __tryend$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$1
.text:00000EB6                 retn
.text:00000EB7 ; ---------------------------------------------------------------------------
.text:00000EB7
.text:00000EB7 __tryend$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$1:
.text:00000EB7                                         ; DATA XREF: .text:00000EB1o
.text:00000EB7                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000EBE                 jmp     short loc_EC3
.text:00000EC0 ; ---------------------------------------------------------------------------
.text:00000EC0
.text:00000EC0 $LN7:                                   ; DATA XREF: __catch$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$0+Eo
.text:00000EC0                 mov     eax, [ebp-14h]
.text:00000EC3 ; START OF FUNCTION CHUNK FOR ?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.text:00000EC3
.text:00000EC3 loc_EC3:                                ; CODE XREF: NCompress::NBcj2::CEncoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+6Bj
.text:00000EC3                                         ; .text:00000EBEj
.text:00000EC3                 mov     ecx, [ebp+var_C]
.text:00000EC6                 mov     large fs:0, ecx
.text:00000ECD                 pop     ecx
.text:00000ECE                 pop     edi
.text:00000ECF                 pop     esi
.text:00000ED0                 pop     ebx
.text:00000ED1                 add     esp, 18h
.text:00000ED4                 cmp     ebp, esp
.text:00000ED6                 call    __RTC_CheckEsp
.text:00000EDB                 mov     esp, ebp
.text:00000EDD                 pop     ebp
.text:00000EDE                 retn    20h
.text:00000EDE ; END OF FUNCTION CHUNK FOR ?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.text:00000EDE ; ---------------------------------------------------------------------------
.text:00000EE1                 align 10h
.text:00000EF0
.text:00000EF0 ; =============== S U B R O U T I N E =======================================
.text:00000EF0
.text:00000EF0 ; Attributes: bp-based frame
.text:00000EF0
.text:00000EF0 ; __int32 __stdcall NCompress::NBcj2::CDecoder::SetInBufSize(NCompress::NBcj2::CDecoder *this, unsigned int, unsigned int)
.text:00000EF0                 public ?SetInBufSize@CDecoder@NBcj2@NCompress@@UAGJII@Z
.text:00000EF0 ?SetInBufSize@CDecoder@NBcj2@NCompress@@UAGJII@Z proc near
.text:00000EF0                                         ; DATA XREF: .rdata:00002624o
.text:00000EF0
.text:00000EF0 this            = dword ptr  8
.text:00000EF0 arg_4           = dword ptr  0Ch
.text:00000EF0 arg_8           = dword ptr  10h
.text:00000EF0
.text:00000EF0                 push    ebp
.text:00000EF1                 mov     ebp, esp
.text:00000EF3                 mov     eax, [ebp+arg_4]
.text:00000EF6                 mov     ecx, [ebp+this]
.text:00000EF9                 mov     edx, [ebp+arg_8]
.text:00000EFC                 mov     [ecx+eax*4+30h], edx
.text:00000F00                 xor     eax, eax
.text:00000F02                 pop     ebp
.text:00000F03                 retn    0Ch
.text:00000F03 ?SetInBufSize@CDecoder@NBcj2@NCompress@@UAGJII@Z endp
.text:00000F03
.text:00000F03 ; ---------------------------------------------------------------------------
.text:00000F06                 align 10h
.text:00000F10
.text:00000F10 ; =============== S U B R O U T I N E =======================================
.text:00000F10
.text:00000F10 ; Attributes: bp-based frame
.text:00000F10
.text:00000F10 ; __int32 __stdcall NCompress::NBcj2::CDecoder::SetOutBufSize(NCompress::NBcj2::CDecoder *this, unsigned int, unsigned int)
.text:00000F10                 public ?SetOutBufSize@CDecoder@NBcj2@NCompress@@UAGJII@Z
.text:00000F10 ?SetOutBufSize@CDecoder@NBcj2@NCompress@@UAGJII@Z proc near
.text:00000F10                                         ; DATA XREF: .rdata:00002628o
.text:00000F10
.text:00000F10 this            = dword ptr  8
.text:00000F10 arg_8           = dword ptr  10h
.text:00000F10
.text:00000F10                 push    ebp
.text:00000F11                 mov     ebp, esp
.text:00000F13                 mov     eax, [ebp+this]
.text:00000F16                 mov     ecx, [ebp+arg_8]
.text:00000F19                 mov     [eax+40h], ecx
.text:00000F1C                 xor     eax, eax
.text:00000F1E                 pop     ebp
.text:00000F1F                 retn    0Ch
.text:00000F1F ?SetOutBufSize@CDecoder@NBcj2@NCompress@@UAGJII@Z endp
.text:00000F1F
.text:00000F1F ; ---------------------------------------------------------------------------
.text:00000F22                 align 10h
.text:00000F30
.text:00000F30 ; =============== S U B R O U T I N E =======================================
.text:00000F30
.text:00000F30 ; Attributes: bp-based frame
.text:00000F30
.text:00000F30 ; _DWORD __thiscall NCompress::NBcj2::CDecoder::CDecoder(NCompress::NBcj2::CDecoder *__hidden this)
.text:00000F30                 public ??0CDecoder@NBcj2@NCompress@@QAE@XZ
.text:00000F30 ??0CDecoder@NBcj2@NCompress@@QAE@XZ proc near
.text:00000F30
.text:00000F30 var_10          = dword ptr -10h
.text:00000F30 var_C           = dword ptr -0Ch
.text:00000F30 var_4           = dword ptr -4
.text:00000F30
.text:00000F30                 push    ebp
.text:00000F31                 mov     ebp, esp
.text:00000F33                 push    0FFFFFFFFh
.text:00000F35                 push    offset __ehhandler$??0CDecoder@NBcj2@NCompress@@QAE@XZ
.text:00000F3A                 mov     eax, large fs:0
.text:00000F40                 push    eax
.text:00000F41                 push    ecx
.text:00000F42                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000F49                 mov     eax, dword ptr ds:___security_cookie
.text:00000F4E                 xor     eax, ebp
.text:00000F50                 push    eax
.text:00000F51                 lea     eax, [ebp+var_C]
.text:00000F54                 mov     large fs:0, eax
.text:00000F5A                 mov     [ebp+var_10], ecx
.text:00000F5D                 mov     ecx, [ebp+var_10] ; this
.text:00000F60                 call    ??0ICompressCoder2@@QAE@XZ ; ICompressCoder2::ICompressCoder2(void)
.text:00000F65                 mov     ecx, [ebp+var_10]
.text:00000F68                 add     ecx, 4          ; this
.text:00000F6B                 call    ??0ICompressSetFinishMode@@QAE@XZ ; ICompressSetFinishMode::ICompressSetFinishMode(void)
.text:00000F70                 mov     ecx, [ebp+var_10]
.text:00000F73                 add     ecx, 8          ; this
.text:00000F76                 call    ??0ICompressSetInStream2@@QAE@XZ ; ICompressSetInStream2::ICompressSetInStream2(void)
.text:00000F7B                 mov     ecx, [ebp+var_10]
.text:00000F7E                 add     ecx, 0Ch        ; this
.text:00000F81                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00000F86                 mov     ecx, [ebp+var_10]
.text:00000F89                 add     ecx, 10h        ; this
.text:00000F8C                 call    ??0ICompressSetOutStreamSize@@QAE@XZ ; ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)
.text:00000F91                 mov     ecx, [ebp+var_10]
.text:00000F94                 add     ecx, 14h        ; this
.text:00000F97                 call    ??0ICompressSetBufSize@@QAE@XZ ; ICompressSetBufSize::ICompressSetBufSize(void)
.text:00000F9C                 mov     ecx, [ebp+var_10]
.text:00000F9F                 add     ecx, 18h        ; this
.text:00000FA2                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000FA7                 mov     ecx, [ebp+var_10]
.text:00000FAA                 add     ecx, 1Ch        ; this
.text:00000FAD                 call    ??0CBaseCoder@NBcj2@NCompress@@QAE@XZ ; NCompress::NBcj2::CBaseCoder::CBaseCoder(void)
.text:00000FB2                 mov     [ebp+var_4], 0
.text:00000FB9                 mov     eax, [ebp+var_10]
.text:00000FBC                 mov     dword ptr [eax], offset ??_7CDecoder@NBcj2@NCompress@@6BICompressCoder2@@@ ; const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressCoder2'}
.text:00000FC2                 mov     ecx, [ebp+var_10]
.text:00000FC5                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NBcj2@NCompress@@6BICompressSetFinishMode@@@ ; const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetFinishMode'}
.text:00000FCC                 mov     edx, [ebp+var_10]
.text:00000FCF                 mov     dword ptr [edx+8], offset ??_7CDecoder@NBcj2@NCompress@@6BICompressSetInStream2@@@ ; const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetInStream2'}
.text:00000FD6                 mov     eax, [ebp+var_10]
.text:00000FD9                 mov     dword ptr [eax+0Ch], offset ??_7CDecoder@NBcj2@NCompress@@6BISequentialInStream@@@ ; const NCompress::NBcj2::CDecoder::`vftable'{for `ISequentialInStream'}
.text:00000FE0                 mov     ecx, [ebp+var_10]
.text:00000FE3                 mov     dword ptr [ecx+10h], offset ??_7CDecoder@NBcj2@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:00000FEA                 mov     edx, [ebp+var_10]
.text:00000FED                 mov     dword ptr [edx+14h], offset ??_7CDecoder@NBcj2@NCompress@@6BICompressSetBufSize@@@ ; const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetBufSize'}
.text:00000FF4                 push    offset ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000FF9                 push    offset ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00000FFE                 push    4
.text:00001000                 push    4
.text:00001002                 mov     eax, [ebp+var_10]
.text:00001005                 add     eax, 98h ; 'ÿ'
.text:0000100A                 push    eax
.text:0000100B                 call    ??_L@YGXPAXIHP6EX0@Z1@Z ; `eh vector constructor iterator'(void *,uint,int,void (*)(void *),void (*)(void *))
.text:00001010                 mov     ecx, [ebp+var_10]
.text:00001013                 mov     byte ptr [ecx+0A8h], 0
.text:0000101A                 mov     edx, [ebp+var_10]
.text:0000101D                 mov     byte ptr [edx+0A9h], 0
.text:00001024                 mov     eax, [ebp+var_10]
.text:00001027                 mov     dword ptr [eax+0B0h], 0
.text:00001031                 mov     dword ptr [eax+0B4h], 0
.text:0000103B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001042                 mov     eax, [ebp+var_10]
.text:00001045                 mov     ecx, [ebp+var_C]
.text:00001048                 mov     large fs:0, ecx
.text:0000104F                 pop     ecx
.text:00001050                 add     esp, 10h
.text:00001053                 cmp     ebp, esp
.text:00001055                 call    __RTC_CheckEsp
.text:0000105A                 mov     esp, ebp
.text:0000105C                 pop     ebp
.text:0000105D                 retn
.text:0000105D ??0CDecoder@NBcj2@NCompress@@QAE@XZ endp
.text:0000105D
.text:0000105D ; ---------------------------------------------------------------------------
.text:0000105E                 align 10h
.text:00001060
.text:00001060 ; =============== S U B R O U T I N E =======================================
.text:00001060
.text:00001060 ; Attributes: bp-based frame
.text:00001060
.text:00001060 ; __int32 __stdcall NCompress::NBcj2::CDecoder::SetFinishMode(NCompress::NBcj2::CDecoder *this, unsigned int)
.text:00001060                 public ?SetFinishMode@CDecoder@NBcj2@NCompress@@UAGJI@Z
.text:00001060 ?SetFinishMode@CDecoder@NBcj2@NCompress@@UAGJI@Z proc near
.text:00001060                                         ; DATA XREF: .rdata:0000267Co
.text:00001060
.text:00001060 this            = dword ptr  8
.text:00001060 arg_4           = dword ptr  0Ch
.text:00001060
.text:00001060                 push    ebp
.text:00001061                 mov     ebp, esp
.text:00001063                 xor     eax, eax
.text:00001065                 cmp     [ebp+arg_4], 0
.text:00001069                 setnz   al
.text:0000106C                 mov     ecx, [ebp+this]
.text:0000106F                 mov     [ecx+0A4h], al
.text:00001075                 xor     eax, eax
.text:00001077                 pop     ebp
.text:00001078                 retn    8
.text:00001078 ?SetFinishMode@CDecoder@NBcj2@NCompress@@UAGJI@Z endp
.text:00001078
.text:00001078 ; ---------------------------------------------------------------------------
.text:0000107B                 align 10h
.text:00001080
.text:00001080 ; =============== S U B R O U T I N E =======================================
.text:00001080
.text:00001080 ; Attributes: bp-based frame
.text:00001080
.text:00001080 ; void __thiscall NCompress::NBcj2::CDecoder::InitCommon(NCompress::NBcj2::CDecoder *__hidden this)
.text:00001080                 public ?InitCommon@CDecoder@NBcj2@NCompress@@AAEXXZ
.text:00001080 ?InitCommon@CDecoder@NBcj2@NCompress@@AAEXXZ proc near
.text:00001080                                         ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+55p
.text:00001080                                         ; NCompress::NBcj2::CDecoder::SetOutStreamSize(unsigned __int64 const *)+86p
.text:00001080
.text:00001080 var_C           = dword ptr -0Ch
.text:00001080 var_8           = dword ptr -8
.text:00001080 var_4           = dword ptr -4
.text:00001080
.text:00001080                 push    ebp
.text:00001081                 mov     ebp, esp
.text:00001083                 sub     esp, 0Ch
.text:00001086                 push    esi
.text:00001087                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000108E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001095                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000109C                 mov     [ebp+var_4], ecx
.text:0000109F                 mov     [ebp+var_8], 0
.text:000010A6                 jmp     short loc_10B1
.text:000010A8 ; ---------------------------------------------------------------------------
.text:000010A8
.text:000010A8 loc_10A8:                               ; CODE XREF: NCompress::NBcj2::CDecoder::InitCommon(void)+68j
.text:000010A8                 mov     eax, [ebp+var_8]
.text:000010AB                 add     eax, 1
.text:000010AE                 mov     [ebp+var_8], eax
.text:000010B1
.text:000010B1 loc_10B1:                               ; CODE XREF: NCompress::NBcj2::CDecoder::InitCommon(void)+26j
.text:000010B1                 cmp     [ebp+var_8], 4
.text:000010B5                 jge     short loc_10EA
.text:000010B7                 mov     ecx, [ebp+var_8]
.text:000010BA                 mov     edx, [ebp+var_4]
.text:000010BD                 mov     eax, [ebp+var_8]
.text:000010C0                 mov     esi, [ebp+var_4]
.text:000010C3                 mov     eax, [esi+eax*4+1Ch]
.text:000010C7                 mov     [edx+ecx*4+0C0h], eax
.text:000010CE                 mov     ecx, [ebp+var_8]
.text:000010D1                 mov     edx, [ebp+var_4]
.text:000010D4                 mov     eax, [ebp+var_8]
.text:000010D7                 mov     esi, [ebp+var_4]
.text:000010DA                 mov     eax, [esi+eax*4+0C0h]
.text:000010E1                 mov     [edx+ecx*4+0D0h], eax
.text:000010E8                 jmp     short loc_10A8
.text:000010EA ; ---------------------------------------------------------------------------
.text:000010EA
.text:000010EA loc_10EA:                               ; CODE XREF: NCompress::NBcj2::CDecoder::InitCommon(void)+35j
.text:000010EA                 mov     [ebp+var_C], 0
.text:000010F1                 jmp     short loc_10FC
.text:000010F3 ; ---------------------------------------------------------------------------
.text:000010F3
.text:000010F3 loc_10F3:                               ; CODE XREF: NCompress::NBcj2::CDecoder::InitCommon(void)+B7j
.text:000010F3                 mov     ecx, [ebp+var_C]
.text:000010F6                 add     ecx, 1
.text:000010F9                 mov     [ebp+var_C], ecx
.text:000010FC
.text:000010FC loc_10FC:                               ; CODE XREF: NCompress::NBcj2::CDecoder::InitCommon(void)+71j
.text:000010FC                 cmp     [ebp+var_C], 4
.text:00001100                 jge     short loc_1139
.text:00001102                 mov     edx, [ebp+var_C]
.text:00001105                 mov     eax, [ebp+var_4]
.text:00001108                 mov     dword ptr [eax+edx*4+58h], 0
.text:00001110                 mov     ecx, [ebp+var_C]
.text:00001113                 mov     edx, [ebp+var_4]
.text:00001116                 mov     dword ptr [edx+ecx*8+68h], 0
.text:0000111E                 mov     dword ptr [edx+ecx*8+6Ch], 0
.text:00001126                 mov     eax, [ebp+var_C]
.text:00001129                 mov     ecx, [ebp+var_4]
.text:0000112C                 mov     dword ptr [ecx+eax*4+88h], 0
.text:00001137                 jmp     short loc_10F3
.text:00001139 ; ---------------------------------------------------------------------------
.text:00001139
.text:00001139 loc_1139:                               ; CODE XREF: NCompress::NBcj2::CDecoder::InitCommon(void)+80j
.text:00001139                 mov     edx, [ebp+var_4]
.text:0000113C                 add     edx, 0C0h ; '+'
.text:00001142                 push    edx
.text:00001143                 call    _Bcj2Dec_Init@4 ; Bcj2Dec_Init(x)
.text:00001148                 pop     esi
.text:00001149                 add     esp, 0Ch
.text:0000114C                 cmp     ebp, esp
.text:0000114E                 call    __RTC_CheckEsp
.text:00001153                 mov     esp, ebp
.text:00001155                 pop     ebp
.text:00001156                 retn
.text:00001156 ?InitCommon@CDecoder@NBcj2@NCompress@@AAEXXZ endp
.text:00001156
.text:00001156 ; ---------------------------------------------------------------------------
.text:00001157                 align 10h
.text:00001160
.text:00001160 ; =============== S U B R O U T I N E =======================================
.text:00001160
.text:00001160 ; Attributes: bp-based frame
.text:00001160
.text:00001160 ; __int32 __stdcall NCompress::NBcj2::CDecoder::Code(NCompress::NBcj2::CDecoder *this, struct ISequentialInStream *const *, const unsigned __int64 *const *, unsigned int, struct ISequentialOutStream *const *, const unsigned __int64 *const *, unsigned int, struct ICompressProgressInfo *)
.text:00001160                 public ?Code@CDecoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.text:00001160 ?Code@CDecoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z proc near
.text:00001160                                         ; DATA XREF: .rdata:00002690o
.text:00001160
.text:00001160 var_A0          = dword ptr -0A0h
.text:00001160 var_9C          = dword ptr -9Ch
.text:00001160 var_98          = dword ptr -98h
.text:00001160 var_94          = dword ptr -94h
.text:00001160 var_90          = dword ptr -90h
.text:00001160 var_8C          = dword ptr -8Ch
.text:00001160 var_88          = dword ptr -88h
.text:00001160 var_84          = dword ptr -84h
.text:00001160 var_80          = dword ptr -80h
.text:00001160 var_7C          = dword ptr -7Ch
.text:00001160 var_78          = dword ptr -78h
.text:00001160 var_74          = dword ptr -74h
.text:00001160 var_70          = dword ptr -70h
.text:00001160 var_68          = dword ptr -68h
.text:00001160 var_64          = dword ptr -64h
.text:00001160 var_58          = dword ptr -58h
.text:00001160 var_54          = dword ptr -54h
.text:00001160 var_4C          = dword ptr -4Ch
.text:00001160 var_48          = dword ptr -48h
.text:00001160 var_44          = dword ptr -44h
.text:00001160 var_40          = dword ptr -40h
.text:00001160 var_3C          = dword ptr -3Ch
.text:00001160 var_38          = dword ptr -38h
.text:00001160 var_34          = dword ptr -34h
.text:00001160 var_2C          = dword ptr -2Ch
.text:00001160 var_24          = dword ptr -24h
.text:00001160 var_20          = dword ptr -20h
.text:00001160 var_1C          = dword ptr -1Ch
.text:00001160 var_18          = dword ptr -18h
.text:00001160 var_14          = dword ptr -14h
.text:00001160 var_10          = dword ptr -10h
.text:00001160 var_C           = dword ptr -0Ch
.text:00001160 var_8           = dword ptr -8
.text:00001160 var_4           = dword ptr -4
.text:00001160 this            = dword ptr  8
.text:00001160 arg_4           = dword ptr  0Ch
.text:00001160 arg_8           = dword ptr  10h
.text:00001160 arg_C           = dword ptr  14h
.text:00001160 arg_10          = dword ptr  18h
.text:00001160 arg_14          = dword ptr  1Ch
.text:00001160 arg_18          = dword ptr  20h
.text:00001160 arg_1C          = dword ptr  24h
.text:00001160
.text:00001160                 push    ebp
.text:00001161                 mov     ebp, esp
.text:00001163                 sub     esp, 0A0h
.text:00001169                 push    ebx
.text:0000116A                 push    esi
.text:0000116B                 push    edi
.text:0000116C                 lea     edi, [ebp+var_A0]
.text:00001172                 mov     ecx, 28h ; '('
.text:00001177                 mov     eax, 0CCCCCCCCh
.text:0000117C                 rep stosd
.text:0000117E                 cmp     [ebp+arg_C], 4
.text:00001182                 jnz     short loc_118A
.text:00001184                 cmp     [ebp+arg_18], 1
.text:00001188                 jz      short loc_1194
.text:0000118A
.text:0000118A loc_118A:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+22j
.text:0000118A                 mov     eax, 80070057h
.text:0000118F                 jmp     loc_17BB
.text:00001194 ; ---------------------------------------------------------------------------
.text:00001194
.text:00001194 loc_1194:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+28j
.text:00001194                 push    1               ; bool
.text:00001196                 mov     ecx, [ebp+this]
.text:00001199                 add     ecx, 1Ch        ; this
.text:0000119C                 call    ?Alloc@CBaseCoder@NBcj2@NCompress@@IAEJ_N@Z ; NCompress::NBcj2::CBaseCoder::Alloc(bool)
.text:000011A1                 mov     [ebp+var_4], eax
.text:000011A4                 cmp     [ebp+var_4], 0
.text:000011A8                 jz      short loc_11B2
.text:000011AA                 mov     eax, [ebp+var_4]
.text:000011AD                 jmp     loc_17BB
.text:000011B2 ; ---------------------------------------------------------------------------
.text:000011B2
.text:000011B2 loc_11B2:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+48j
.text:000011B2                 mov     ecx, [ebp+this] ; this
.text:000011B5                 call    ?InitCommon@CDecoder@NBcj2@NCompress@@AAEXXZ ; NCompress::NBcj2::CDecoder::InitCommon(void)
.text:000011BA                 mov     eax, [ebp+this]
.text:000011BD                 mov     ecx, [ebp+this]
.text:000011C0                 mov     edx, [ecx+2Ch]
.text:000011C3                 mov     [eax+0E0h], edx
.text:000011C9                 mov     eax, [ebp+this]
.text:000011CC                 mov     ecx, [ebp+this]
.text:000011CF                 mov     edx, [ecx+0E0h]
.text:000011D5                 mov     [eax+0E4h], edx
.text:000011DB                 mov     [ebp+var_C], 0
.text:000011E2                 mov     [ebp+var_8], 0
.text:000011E9                 mov     [ebp+var_14], 0
.text:000011F0                 mov     [ebp+var_10], 0
.text:000011F7                 mov     [ebp+var_18], 0
.text:000011FE
.text:000011FE loc_11FE:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *):loc_1658j
.text:000011FE                 mov     eax, [ebp+this]
.text:00001201                 add     eax, 0C0h ; '+'
.text:00001206                 push    eax
.text:00001207                 call    _Bcj2Dec_Decode@4 ; Bcj2Dec_Decode(x)
.text:0000120C                 test    eax, eax
.text:0000120E                 jz      short loc_121A
.text:00001210                 mov     eax, 1
.text:00001215                 jmp     loc_17BB
.text:0000121A ; ---------------------------------------------------------------------------
.text:0000121A
.text:0000121A loc_121A:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+AEj
.text:0000121A                 mov     ecx, [ebp+this]
.text:0000121D                 cmp     dword ptr [ecx+0E8h], 4
.text:00001224                 jnb     loc_14BE
.text:0000122A                 mov     edx, [ebp+this]
.text:0000122D                 mov     eax, [edx+0E8h]
.text:00001233                 mov     ecx, [ebp+this]
.text:00001236                 mov     edx, [ecx+eax*4+58h]
.text:0000123A                 mov     [ebp+var_1C], edx
.text:0000123D                 mov     eax, [ebp+this]
.text:00001240                 mov     ecx, [eax+0E8h]
.text:00001246                 mov     edx, [ebp+this]
.text:00001249                 mov     eax, [edx+ecx*4+1Ch]
.text:0000124D                 mov     [ebp+var_20], eax
.text:00001250                 mov     [ebp+var_24], 0
.text:00001257                 jmp     short loc_1262
.text:00001259 ; ---------------------------------------------------------------------------
.text:00001259
.text:00001259 loc_1259:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+12Bj
.text:00001259                 mov     ecx, [ebp+var_24]
.text:0000125C                 add     ecx, 1
.text:0000125F                 mov     [ebp+var_24], ecx
.text:00001262
.text:00001262 loc_1262:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+F7j
.text:00001262                 mov     edx, [ebp+var_24]
.text:00001265                 cmp     edx, [ebp+var_1C]
.text:00001268                 jnb     short loc_128D
.text:0000126A                 mov     eax, [ebp+this]
.text:0000126D                 mov     ecx, [eax+0E8h]
.text:00001273                 mov     edx, [ebp+this]
.text:00001276                 mov     eax, [edx+ecx*4+0C0h]
.text:0000127D                 mov     ecx, [ebp+var_20]
.text:00001280                 add     ecx, [ebp+var_24]
.text:00001283                 mov     edx, [ebp+var_24]
.text:00001286                 mov     al, [eax+edx]
.text:00001289                 mov     [ecx], al
.text:0000128B                 jmp     short loc_1259
.text:0000128D ; ---------------------------------------------------------------------------
.text:0000128D
.text:0000128D loc_128D:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+108j
.text:0000128D                 mov     ecx, [ebp+this]
.text:00001290                 mov     edx, [ecx+0E8h]
.text:00001296                 mov     eax, [ebp+this]
.text:00001299                 mov     ecx, [ebp+var_20]
.text:0000129C                 mov     [eax+edx*4+0C0h], ecx
.text:000012A3                 mov     edx, [ebp+this]
.text:000012A6                 mov     eax, [edx+0E8h]
.text:000012AC                 mov     ecx, [ebp+this]
.text:000012AF                 mov     edx, [ebp+var_20]
.text:000012B2                 mov     [ecx+eax*4+0D0h], edx
.text:000012B9                 mov     eax, [ebp+this]
.text:000012BC                 mov     ecx, [eax+0E8h]
.text:000012C2                 mov     edx, [ebp+this]
.text:000012C5                 cmp     dword ptr [edx+ecx*4+88h], 0
.text:000012CD                 jz      short loc_12EA
.text:000012CF                 mov     eax, [ebp+this]
.text:000012D2                 mov     ecx, [eax+0E8h]
.text:000012D8                 mov     edx, [ebp+this]
.text:000012DB                 mov     eax, [edx+ecx*4+88h]
.text:000012E2                 mov     [ebp+var_18], eax
.text:000012E5                 jmp     loc_165D
.text:000012EA ; ---------------------------------------------------------------------------
.text:000012EA
.text:000012EA loc_12EA:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+16Dj
.text:000012EA                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+25Aj ...
.text:000012EA                 mov     ecx, [ebp+this]
.text:000012ED                 mov     edx, [ecx+0E8h]
.text:000012F3                 mov     eax, [ebp+this]
.text:000012F6                 mov     ecx, [eax+edx*4+30h]
.text:000012FA                 sub     ecx, [ebp+var_1C]
.text:000012FD                 mov     [ebp+var_2C], ecx
.text:00001300                 mov     esi, esp
.text:00001302                 lea     edx, [ebp+var_2C]
.text:00001305                 push    edx
.text:00001306                 mov     eax, [ebp+var_2C]
.text:00001309                 push    eax
.text:0000130A                 mov     ecx, [ebp+this]
.text:0000130D                 mov     edx, [ecx+0E8h]
.text:00001313                 mov     eax, [ebp+this]
.text:00001316                 mov     ecx, [eax+edx*4+1Ch]
.text:0000131A                 add     ecx, [ebp+var_1C]
.text:0000131D                 push    ecx
.text:0000131E                 mov     edx, [ebp+this]
.text:00001321                 mov     eax, [edx+0E8h]
.text:00001327                 mov     ecx, [ebp+arg_4]
.text:0000132A                 mov     edx, [ecx+eax*4]
.text:0000132D                 mov     eax, [ebp+this]
.text:00001330                 mov     ecx, [eax+0E8h]
.text:00001336                 mov     eax, [ebp+arg_4]
.text:00001339                 mov     ecx, [eax+ecx*4]
.text:0000133C                 mov     edx, [edx]
.text:0000133E                 push    ecx
.text:0000133F                 mov     eax, [edx+0Ch]
.text:00001342                 call    eax
.text:00001344                 cmp     esi, esp
.text:00001346                 call    __RTC_CheckEsp
.text:0000134B                 mov     [ebp+var_34], eax
.text:0000134E                 mov     ecx, [ebp+this]
.text:00001351                 mov     edx, [ecx+0E8h]
.text:00001357                 mov     eax, [ebp+this]
.text:0000135A                 mov     ecx, [ebp+var_34]
.text:0000135D                 mov     [eax+edx*4+88h], ecx
.text:00001364                 cmp     [ebp+var_2C], 0
.text:00001368                 jnz     short loc_136C
.text:0000136A                 jmp     short loc_13D0
.text:0000136C ; ---------------------------------------------------------------------------
.text:0000136C
.text:0000136C loc_136C:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+208j
.text:0000136C                 mov     edx, [ebp+this]
.text:0000136F                 mov     eax, [edx+0E8h]
.text:00001375                 mov     ecx, [ebp+var_2C]
.text:00001378                 xor     edx, edx
.text:0000137A                 mov     esi, [ebp+this]
.text:0000137D                 add     ecx, [esi+eax*8+68h]
.text:00001381                 adc     edx, [esi+eax*8+6Ch]
.text:00001385                 mov     eax, [ebp+this]
.text:00001388                 mov     eax, [eax+0E8h]
.text:0000138E                 mov     esi, [ebp+this]
.text:00001391                 mov     [esi+eax*8+68h], ecx
.text:00001395                 mov     [esi+eax*8+6Ch], edx
.text:00001399                 mov     ecx, [ebp+var_1C]
.text:0000139C                 add     ecx, [ebp+var_2C]
.text:0000139F                 mov     [ebp+var_1C], ecx
.text:000013A2                 cmp     [ebp+var_34], 0
.text:000013A6                 jz      short loc_13AA
.text:000013A8                 jmp     short loc_13D0
.text:000013AA ; ---------------------------------------------------------------------------
.text:000013AA
.text:000013AA loc_13AA:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+246j
.text:000013AA                 cmp     [ebp+var_1C], 4
.text:000013AE                 jnb     short loc_13D0
.text:000013B0                 mov     edx, [ebp+this]
.text:000013B3                 cmp     dword ptr [edx+0E8h], 1
.text:000013BA                 jz      loc_12EA
.text:000013C0                 mov     eax, [ebp+this]
.text:000013C3                 cmp     dword ptr [eax+0E8h], 2
.text:000013CA                 jz      loc_12EA
.text:000013D0
.text:000013D0 loc_13D0:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+20Aj
.text:000013D0                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+248j ...
.text:000013D0                 mov     ecx, [ebp+this]
.text:000013D3                 mov     edx, [ecx+0E8h]
.text:000013D9                 mov     eax, [ebp+this]
.text:000013DC                 cmp     dword ptr [eax+edx*4+88h], 0
.text:000013E4                 jz      short loc_13FC
.text:000013E6                 mov     ecx, [ebp+this]
.text:000013E9                 mov     edx, [ecx+0E8h]
.text:000013EF                 mov     eax, [ebp+this]
.text:000013F2                 mov     ecx, [eax+edx*4+88h]
.text:000013F9                 mov     [ebp+var_18], ecx
.text:000013FC
.text:000013FC loc_13FC:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+284j
.text:000013FC                 cmp     [ebp+var_1C], 0
.text:00001400                 jnz     short loc_1407
.text:00001402                 jmp     loc_165D
.text:00001407 ; ---------------------------------------------------------------------------
.text:00001407
.text:00001407 loc_1407:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+2A0j
.text:00001407                 mov     edx, [ebp+this]
.text:0000140A                 cmp     dword ptr [edx+0E8h], 1
.text:00001411                 jz      short loc_141F
.text:00001413                 mov     eax, [ebp+this]
.text:00001416                 cmp     dword ptr [eax+0E8h], 2
.text:0000141D                 jnz     short loc_1493
.text:0000141F
.text:0000141F loc_141F:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+2B1j
.text:0000141F                 mov     ecx, [ebp+var_1C]
.text:00001422                 and     ecx, 3
.text:00001425                 mov     [ebp+var_38], ecx
.text:00001428                 mov     edx, [ebp+this]
.text:0000142B                 mov     eax, [edx+0E8h]
.text:00001431                 mov     ecx, [ebp+this]
.text:00001434                 mov     edx, [ebp+var_38]
.text:00001437                 mov     [ecx+eax*4+58h], edx
.text:0000143B                 cmp     [ebp+var_1C], 4
.text:0000143F                 jnb     short loc_148A
.text:00001441                 mov     eax, [ebp+this]
.text:00001444                 mov     ecx, [eax+0E8h]
.text:0000144A                 mov     edx, [ebp+this]
.text:0000144D                 cmp     dword ptr [edx+ecx*4+88h], 0
.text:00001455                 jz      short loc_1472
.text:00001457                 mov     eax, [ebp+this]
.text:0000145A                 mov     ecx, [eax+0E8h]
.text:00001460                 mov     edx, [ebp+this]
.text:00001463                 mov     eax, [edx+ecx*4+88h]
.text:0000146A                 mov     [ebp+var_84], eax
.text:00001470                 jmp     short loc_147C
.text:00001472 ; ---------------------------------------------------------------------------
.text:00001472
.text:00001472 loc_1472:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+2F5j
.text:00001472                 mov     [ebp+var_84], 1
.text:0000147C
.text:0000147C loc_147C:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+310j
.text:0000147C                 mov     ecx, [ebp+var_84]
.text:00001482                 mov     [ebp+var_18], ecx
.text:00001485                 jmp     loc_165D
.text:0000148A ; ---------------------------------------------------------------------------
.text:0000148A
.text:0000148A loc_148A:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+2DFj
.text:0000148A                 mov     edx, [ebp+var_1C]
.text:0000148D                 sub     edx, [ebp+var_38]
.text:00001490                 mov     [ebp+var_1C], edx
.text:00001493
.text:00001493 loc_1493:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+2BDj
.text:00001493                 mov     eax, [ebp+this]
.text:00001496                 mov     ecx, [eax+0E8h]
.text:0000149C                 mov     edx, [ebp+this]
.text:0000149F                 mov     eax, [edx+ecx*4+1Ch]
.text:000014A3                 add     eax, [ebp+var_1C]
.text:000014A6                 mov     ecx, [ebp+this]
.text:000014A9                 mov     edx, [ecx+0E8h]
.text:000014AF                 mov     ecx, [ebp+this]
.text:000014B2                 mov     [ecx+edx*4+0D0h], eax
.text:000014B9                 jmp     loc_1595
.text:000014BE ; ---------------------------------------------------------------------------
.text:000014BE
.text:000014BE loc_14BE:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+C4j
.text:000014BE                 mov     edx, [ebp+this]
.text:000014C1                 mov     eax, [ebp+this]
.text:000014C4                 mov     ecx, [edx+0E0h]
.text:000014CA                 sub     ecx, [eax+2Ch]
.text:000014CD                 mov     [ebp+var_3C], ecx
.text:000014D0                 jz      short loc_150A
.text:000014D2                 mov     edx, [ebp+var_3C]
.text:000014D5                 xor     eax, eax
.text:000014D7                 add     edx, [ebp+var_C]
.text:000014DA                 adc     eax, [ebp+var_8]
.text:000014DD                 mov     [ebp+var_C], edx
.text:000014E0                 mov     [ebp+var_8], eax
.text:000014E3                 mov     ecx, [ebp+var_3C]
.text:000014E6                 push    ecx             ; unsigned int
.text:000014E7                 mov     edx, [ebp+this]
.text:000014EA                 mov     eax, [edx+2Ch]
.text:000014ED                 push    eax             ; void *
.text:000014EE                 mov     ecx, [ebp+arg_10]
.text:000014F1                 mov     edx, [ecx]
.text:000014F3                 push    edx             ; struct ISequentialOutStream *
.text:000014F4                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:000014F9                 mov     [ebp+var_40], eax
.text:000014FC                 cmp     [ebp+var_40], 0
.text:00001500                 jz      short loc_150A
.text:00001502                 mov     eax, [ebp+var_40]
.text:00001505                 jmp     loc_17BB
.text:0000150A ; ---------------------------------------------------------------------------
.text:0000150A
.text:0000150A loc_150A:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+370j
.text:0000150A                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+3A0j
.text:0000150A                 mov     eax, [ebp+this]
.text:0000150D                 mov     ecx, [ebp+this]
.text:00001510                 mov     edx, [ecx+2Ch]
.text:00001513                 mov     [eax+0E0h], edx
.text:00001519                 mov     eax, [ebp+this]
.text:0000151C                 mov     ecx, [eax+40h]
.text:0000151F                 mov     [ebp+var_44], ecx
.text:00001522                 cmp     [ebp+arg_14], 0
.text:00001526                 jz      short loc_1575
.text:00001528                 mov     edx, [ebp+arg_14]
.text:0000152B                 cmp     dword ptr [edx], 0
.text:0000152E                 jz      short loc_1575
.text:00001530                 mov     eax, [ebp+arg_14]
.text:00001533                 mov     ecx, [eax]
.text:00001535                 mov     edx, [ecx]
.text:00001537                 sub     edx, [ebp+var_C]
.text:0000153A                 mov     eax, [ecx+4]
.text:0000153D                 sbb     eax, [ebp+var_8]
.text:00001540                 mov     [ebp+var_4C], edx
.text:00001543                 mov     [ebp+var_48], eax
.text:00001546                 mov     ecx, [ebp+var_44]
.text:00001549                 xor     edx, edx
.text:0000154B                 mov     [ebp+var_8C], ecx
.text:00001551                 mov     [ebp+var_88], edx
.text:00001557                 mov     eax, [ebp+var_88]
.text:0000155D                 cmp     eax, [ebp+var_48]
.text:00001560                 jb      short loc_1575
.text:00001562                 ja      short loc_156F
.text:00001564                 mov     ecx, [ebp+var_8C]
.text:0000156A                 cmp     ecx, [ebp+var_4C]
.text:0000156D                 jbe     short loc_1575
.text:0000156F
.text:0000156F loc_156F:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+402j
.text:0000156F                 mov     edx, [ebp+var_4C]
.text:00001572                 mov     [ebp+var_44], edx
.text:00001575
.text:00001575 loc_1575:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+3C6j
.text:00001575                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+3CEj ...
.text:00001575                 mov     eax, [ebp+this]
.text:00001578                 mov     ecx, [eax+0E0h]
.text:0000157E                 add     ecx, [ebp+var_44]
.text:00001581                 mov     edx, [ebp+this]
.text:00001584                 mov     [edx+0E4h], ecx
.text:0000158A                 cmp     [ebp+var_44], 0
.text:0000158E                 jnz     short loc_1595
.text:00001590                 jmp     loc_165D
.text:00001595 ; ---------------------------------------------------------------------------
.text:00001595
.text:00001595 loc_1595:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+359j
.text:00001595                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+42Ej
.text:00001595                 cmp     [ebp+arg_1C], 0
.text:00001599                 jz      loc_1658
.text:0000159F                 mov     eax, [ebp+this]
.text:000015A2                 mov     ecx, [ebp+this]
.text:000015A5                 mov     eax, [eax+0E0h]
.text:000015AB                 sub     eax, [ecx+2Ch]
.text:000015AE                 cdq
.text:000015AF                 add     eax, [ebp+var_C]
.text:000015B2                 adc     edx, [ebp+var_8]
.text:000015B5                 mov     [ebp+var_58], eax
.text:000015B8                 mov     [ebp+var_54], edx
.text:000015BB                 mov     edx, [ebp+var_58]
.text:000015BE                 sub     edx, [ebp+var_14]
.text:000015C1                 mov     eax, [ebp+var_54]
.text:000015C4                 sbb     eax, [ebp+var_10]
.text:000015C7                 mov     [ebp+var_94], edx
.text:000015CD                 mov     [ebp+var_90], eax
.text:000015D3                 cmp     [ebp+var_90], 0
.text:000015DA                 ja      short loc_15E8
.text:000015DC                 cmp     [ebp+var_94], 400000h
.text:000015E6                 jb      short loc_1658
.text:000015E8
.text:000015E8 loc_15E8:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+47Aj
.text:000015E8                 mov     ecx, [ebp+this]
.text:000015EB                 mov     esi, [ebp+var_58]
.text:000015EE                 add     esi, [ecx+80h]
.text:000015F4                 mov     edi, [ebp+var_54]
.text:000015F7                 adc     edi, [ecx+84h]
.text:000015FD                 mov     edx, [ebp+this]
.text:00001600                 mov     eax, [ebp+this]
.text:00001603                 mov     ecx, [edx+0DCh]
.text:00001609                 sub     ecx, [eax+0CCh]
.text:0000160F                 mov     eax, ecx
.text:00001611                 cdq
.text:00001612                 sub     esi, eax
.text:00001614                 sbb     edi, edx
.text:00001616                 mov     [ebp+var_68], esi
.text:00001619                 mov     [ebp+var_64], edi
.text:0000161C                 mov     esi, esp
.text:0000161E                 lea     edx, [ebp+var_58]
.text:00001621                 push    edx
.text:00001622                 lea     eax, [ebp+var_68]
.text:00001625                 push    eax
.text:00001626                 mov     ecx, [ebp+arg_1C]
.text:00001629                 mov     edx, [ecx]
.text:0000162B                 mov     eax, [ebp+arg_1C]
.text:0000162E                 push    eax
.text:0000162F                 mov     ecx, [edx+0Ch]
.text:00001632                 call    ecx
.text:00001634                 cmp     esi, esp
.text:00001636                 call    __RTC_CheckEsp
.text:0000163B                 mov     [ebp+var_70], eax
.text:0000163E                 cmp     [ebp+var_70], 0
.text:00001642                 jz      short loc_164C
.text:00001644                 mov     eax, [ebp+var_70]
.text:00001647                 jmp     loc_17BB
.text:0000164C ; ---------------------------------------------------------------------------
.text:0000164C
.text:0000164C loc_164C:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+4E2j
.text:0000164C                 mov     edx, [ebp+var_58]
.text:0000164F                 mov     [ebp+var_14], edx
.text:00001652                 mov     eax, [ebp+var_54]
.text:00001655                 mov     [ebp+var_10], eax
.text:00001658
.text:00001658 loc_1658:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+439j
.text:00001658                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+486j
.text:00001658                 jmp     loc_11FE
.text:0000165D ; ---------------------------------------------------------------------------
.text:0000165D
.text:0000165D loc_165D:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+185j
.text:0000165D                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+2A2j ...
.text:0000165D                 mov     ecx, [ebp+this]
.text:00001660                 mov     edx, [ebp+this]
.text:00001663                 mov     eax, [ecx+0E0h]
.text:00001669                 sub     eax, [edx+2Ch]
.text:0000166C                 mov     [ebp+var_74], eax
.text:0000166F                 jz      short loc_16A9
.text:00001671                 mov     ecx, [ebp+var_74]
.text:00001674                 xor     edx, edx
.text:00001676                 add     ecx, [ebp+var_C]
.text:00001679                 adc     edx, [ebp+var_8]
.text:0000167C                 mov     [ebp+var_C], ecx
.text:0000167F                 mov     [ebp+var_8], edx
.text:00001682                 mov     eax, [ebp+var_74]
.text:00001685                 push    eax             ; unsigned int
.text:00001686                 mov     ecx, [ebp+this]
.text:00001689                 mov     edx, [ecx+2Ch]
.text:0000168C                 push    edx             ; void *
.text:0000168D                 mov     eax, [ebp+arg_10]
.text:00001690                 mov     ecx, [eax]
.text:00001692                 push    ecx             ; struct ISequentialOutStream *
.text:00001693                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00001698                 mov     [ebp+var_78], eax
.text:0000169B                 cmp     [ebp+var_78], 0
.text:0000169F                 jz      short loc_16A9
.text:000016A1                 mov     eax, [ebp+var_78]
.text:000016A4                 jmp     loc_17BB
.text:000016A9 ; ---------------------------------------------------------------------------
.text:000016A9
.text:000016A9 loc_16A9:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+50Fj
.text:000016A9                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+53Fj
.text:000016A9                 cmp     [ebp+var_18], 0
.text:000016AD                 jz      short loc_16B7
.text:000016AF                 mov     eax, [ebp+var_18]
.text:000016B2                 jmp     loc_17BB
.text:000016B7 ; ---------------------------------------------------------------------------
.text:000016B7
.text:000016B7 loc_16B7:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+54Dj
.text:000016B7                 mov     edx, [ebp+this]
.text:000016BA                 movzx   eax, byte ptr [edx+0A8h]
.text:000016C1                 test    eax, eax
.text:000016C3                 jz      loc_17B9
.text:000016C9                 mov     ecx, [ebp+this]
.text:000016CC                 cmp     dword ptr [ecx+0F8h], 0
.text:000016D3                 jz      short loc_16DF
.text:000016D5                 mov     eax, 1
.text:000016DA                 jmp     loc_17BB
.text:000016DF ; ---------------------------------------------------------------------------
.text:000016DF
.text:000016DF loc_16DF:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+573j
.text:000016DF                 mov     edx, [ebp+this]
.text:000016E2                 cmp     dword ptr [edx+0E8h], 0
.text:000016E9                 jz      short loc_1701
.text:000016EB                 mov     eax, [ebp+this]
.text:000016EE                 cmp     dword ptr [eax+0E8h], 8
.text:000016F5                 jz      short loc_1701
.text:000016F7                 mov     eax, 1
.text:000016FC                 jmp     loc_17BB
.text:00001701 ; ---------------------------------------------------------------------------
.text:00001701
.text:00001701 loc_1701:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+589j
.text:00001701                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+595j
.text:00001701                 cmp     [ebp+arg_8], 0
.text:00001705                 jz      loc_17B9
.text:0000170B                 mov     [ebp+var_7C], 0
.text:00001712                 jmp     short loc_171D
.text:00001714 ; ---------------------------------------------------------------------------
.text:00001714
.text:00001714 loc_1714:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *):loc_17B4j
.text:00001714                 mov     ecx, [ebp+var_7C]
.text:00001717                 add     ecx, 1
.text:0000171A                 mov     [ebp+var_7C], ecx
.text:0000171D
.text:0000171D loc_171D:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+5B2j
.text:0000171D                 cmp     [ebp+var_7C], 4
.text:00001721                 jge     loc_17B9
.text:00001727                 mov     edx, [ebp+var_7C]
.text:0000172A                 mov     eax, [ebp+this]
.text:0000172D                 mov     ecx, [ebp+var_7C]
.text:00001730                 mov     esi, [ebp+this]
.text:00001733                 mov     edx, [eax+edx*4+0D0h]
.text:0000173A                 sub     edx, [esi+ecx*4+0C0h]
.text:00001741                 mov     eax, [ebp+var_7C]
.text:00001744                 mov     ecx, [ebp+this]
.text:00001747                 add     edx, [ecx+eax*4+58h]
.text:0000174B                 mov     [ebp+var_80], edx
.text:0000174E                 mov     edx, [ebp+var_7C]
.text:00001751                 mov     eax, [ebp+arg_8]
.text:00001754                 cmp     dword ptr [eax+edx*4], 0
.text:00001758                 jz      short loc_17B4
.text:0000175A                 mov     ecx, [ebp+var_7C]
.text:0000175D                 mov     edx, [ebp+arg_8]
.text:00001760                 mov     eax, [edx+ecx*4]
.text:00001763                 mov     ecx, [ebp+var_80]
.text:00001766                 xor     edx, edx
.text:00001768                 mov     esi, [ebp+var_7C]
.text:0000176B                 mov     edi, [ebp+this]
.text:0000176E                 mov     ebx, [edi+esi*8+68h]
.text:00001772                 sub     ebx, ecx
.text:00001774                 mov     ecx, [edi+esi*8+6Ch]
.text:00001778                 sbb     ecx, edx
.text:0000177A                 mov     [ebp+var_98], eax
.text:00001780                 mov     [ebp+var_A0], ebx
.text:00001786                 mov     [ebp+var_9C], ecx
.text:0000178C                 mov     edx, [ebp+var_98]
.text:00001792                 mov     eax, [edx]
.text:00001794                 cmp     eax, [ebp+var_A0]
.text:0000179A                 jnz     short loc_17AD
.text:0000179C                 mov     ecx, [ebp+var_98]
.text:000017A2                 mov     edx, [ecx+4]
.text:000017A5                 cmp     edx, [ebp+var_9C]
.text:000017AB                 jz      short loc_17B4
.text:000017AD
.text:000017AD loc_17AD:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+63Aj
.text:000017AD                 mov     eax, 1
.text:000017B2                 jmp     short loc_17BB
.text:000017B4 ; ---------------------------------------------------------------------------
.text:000017B4
.text:000017B4 loc_17B4:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+5F8j
.text:000017B4                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+64Bj
.text:000017B4                 jmp     loc_1714
.text:000017B9 ; ---------------------------------------------------------------------------
.text:000017B9
.text:000017B9 loc_17B9:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+563j
.text:000017B9                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+5A5j ...
.text:000017B9                 xor     eax, eax
.text:000017BB
.text:000017BB loc_17BB:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+2Fj
.text:000017BB                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+4Dj ...
.text:000017BB                 push    edx
.text:000017BC                 mov     ecx, ebp
.text:000017BE                 push    eax
.text:000017BF                 lea     edx, $LN55_0
.text:000017C5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000017CA                 pop     eax
.text:000017CB                 pop     edx
.text:000017CC                 pop     edi
.text:000017CD                 pop     esi
.text:000017CE                 pop     ebx
.text:000017CF                 add     esp, 0A0h
.text:000017D5                 cmp     ebp, esp
.text:000017D7                 call    __RTC_CheckEsp
.text:000017DC                 mov     esp, ebp
.text:000017DE                 pop     ebp
.text:000017DF                 retn    20h
.text:000017DF ?Code@CDecoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z endp
.text:000017DF
.text:000017DF ; ---------------------------------------------------------------------------
.text:000017E2                 align 4
.text:000017E4 $LN55_0         dd 3                    ; DATA XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+65Fo
.text:000017E8                 dd offset $LN54_0
.text:000017EC $LN54_0         dd 0FFFFFFD4h, 4        ; DATA XREF: .text:000017E8o
.text:000017F4                 dd offset $LN51         ; "curSize"
.text:000017F8                 dd 0FFFFFFA8h, 8
.text:00001800                 dd offset $LN52         ; "outSize2"
.text:00001804                 dd 0FFFFFF98h, 8
.text:0000180C                 dd offset $LN53         ; "inSize2"
.text:00001810 $LN53           db 'inSize2',0          ; DATA XREF: .text:0000180Co
.text:00001818 $LN52           db 'outSize2',0         ; DATA XREF: .text:00001800o
.text:00001821 $LN51           db 'curSize',0          ; DATA XREF: .text:000017F4o
.text:00001829                 align 10h
.text:00001830
.text:00001830 ; =============== S U B R O U T I N E =======================================
.text:00001830
.text:00001830 ; Attributes: bp-based frame
.text:00001830
.text:00001830 ; __int32 __stdcall NCompress::NBcj2::CDecoder::SetInStream2(NCompress::NBcj2::CDecoder *this, unsigned int, struct ISequentialInStream *)
.text:00001830                 public ?SetInStream2@CDecoder@NBcj2@NCompress@@UAGJIPAUISequentialInStream@@@Z
.text:00001830 ?SetInStream2@CDecoder@NBcj2@NCompress@@UAGJIPAUISequentialInStream@@@Z proc near
.text:00001830                                         ; DATA XREF: .rdata:00002664o
.text:00001830
.text:00001830 this            = dword ptr  8
.text:00001830 arg_4           = dword ptr  0Ch
.text:00001830 arg_8           = dword ptr  10h
.text:00001830
.text:00001830                 push    ebp
.text:00001831                 mov     ebp, esp
.text:00001833                 mov     eax, [ebp+arg_8]
.text:00001836                 push    eax
.text:00001837                 mov     ecx, [ebp+arg_4]
.text:0000183A                 mov     edx, [ebp+this]
.text:0000183D                 lea     ecx, [edx+ecx*4+90h]
.text:00001844                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00001849                 xor     eax, eax
.text:0000184B                 cmp     ebp, esp
.text:0000184D                 call    __RTC_CheckEsp
.text:00001852                 pop     ebp
.text:00001853                 retn    0Ch
.text:00001853 ?SetInStream2@CDecoder@NBcj2@NCompress@@UAGJIPAUISequentialInStream@@@Z endp
.text:00001853
.text:00001853 ; ---------------------------------------------------------------------------
.text:00001856                 align 10h
.text:00001860
.text:00001860 ; =============== S U B R O U T I N E =======================================
.text:00001860
.text:00001860 ; Attributes: bp-based frame
.text:00001860
.text:00001860 ; __int32 __stdcall NCompress::NBcj2::CDecoder::ReleaseInStream2(NCompress::NBcj2::CDecoder *this, unsigned int)
.text:00001860                 public ?ReleaseInStream2@CDecoder@NBcj2@NCompress@@UAGJI@Z
.text:00001860 ?ReleaseInStream2@CDecoder@NBcj2@NCompress@@UAGJI@Z proc near
.text:00001860                                         ; DATA XREF: .rdata:00002668o
.text:00001860
.text:00001860 this            = dword ptr  8
.text:00001860 arg_4           = dword ptr  0Ch
.text:00001860
.text:00001860                 push    ebp
.text:00001861                 mov     ebp, esp
.text:00001863                 mov     eax, [ebp+arg_4]
.text:00001866                 mov     ecx, [ebp+this]
.text:00001869                 lea     ecx, [ecx+eax*4+90h]
.text:00001870                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:00001875                 xor     eax, eax
.text:00001877                 cmp     ebp, esp
.text:00001879                 call    __RTC_CheckEsp
.text:0000187E                 pop     ebp
.text:0000187F                 retn    8
.text:0000187F ?ReleaseInStream2@CDecoder@NBcj2@NCompress@@UAGJI@Z endp
.text:0000187F
.text:0000187F ; ---------------------------------------------------------------------------
.text:00001882                 align 10h
.text:00001890
.text:00001890 ; =============== S U B R O U T I N E =======================================
.text:00001890
.text:00001890 ; Attributes: bp-based frame
.text:00001890
.text:00001890 ; __int32 __stdcall NCompress::NBcj2::CDecoder::SetOutStreamSize(NCompress::NBcj2::CDecoder *this, const unsigned __int64 *)
.text:00001890                 public ?SetOutStreamSize@CDecoder@NBcj2@NCompress@@UAGJPB_K@Z
.text:00001890 ?SetOutStreamSize@CDecoder@NBcj2@NCompress@@UAGJPB_K@Z proc near
.text:00001890                                         ; DATA XREF: .rdata:0000263Co
.text:00001890
.text:00001890 var_4           = dword ptr -4
.text:00001890 this            = dword ptr  8
.text:00001890 arg_4           = dword ptr  0Ch
.text:00001890
.text:00001890                 push    ebp
.text:00001891                 mov     ebp, esp
.text:00001893                 push    ecx
.text:00001894                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000189B                 xor     eax, eax
.text:0000189D                 cmp     [ebp+arg_4], 0
.text:000018A1                 setnz   al
.text:000018A4                 mov     ecx, [ebp+this]
.text:000018A7                 mov     [ecx+99h], al
.text:000018AD                 mov     edx, [ebp+this]
.text:000018B0                 mov     dword ptr [edx+0A0h], 0
.text:000018BA                 mov     dword ptr [edx+0A4h], 0
.text:000018C4                 mov     eax, [ebp+this]
.text:000018C7                 movzx   ecx, byte ptr [eax+99h]
.text:000018CE                 test    ecx, ecx
.text:000018D0                 jz      short loc_18E9
.text:000018D2                 mov     edx, [ebp+this]
.text:000018D5                 mov     eax, [ebp+arg_4]
.text:000018D8                 mov     ecx, [eax]
.text:000018DA                 mov     [edx+0A0h], ecx
.text:000018E0                 mov     eax, [eax+4]
.text:000018E3                 mov     [edx+0A4h], eax
.text:000018E9
.text:000018E9 loc_18E9:                               ; CODE XREF: NCompress::NBcj2::CDecoder::SetOutStreamSize(unsigned __int64 const *)+40j
.text:000018E9                 mov     ecx, [ebp+this]
.text:000018EC                 mov     dword ptr [ecx+0A8h], 0
.text:000018F6                 mov     dword ptr [ecx+0ACh], 0
.text:00001900                 push    0               ; bool
.text:00001902                 mov     ecx, [ebp+this]
.text:00001905                 add     ecx, 0Ch        ; this
.text:00001908                 call    ?Alloc@CBaseCoder@NBcj2@NCompress@@IAEJ_N@Z ; NCompress::NBcj2::CBaseCoder::Alloc(bool)
.text:0000190D                 mov     [ebp+var_4], eax
.text:00001910                 mov     ecx, [ebp+this]
.text:00001913                 sub     ecx, 10h        ; this
.text:00001916                 call    ?InitCommon@CDecoder@NBcj2@NCompress@@AAEXXZ ; NCompress::NBcj2::CDecoder::InitCommon(void)
.text:0000191B                 mov     edx, [ebp+this]
.text:0000191E                 mov     dword ptr [edx+0D0h], 0
.text:00001928                 mov     eax, [ebp+this]
.text:0000192B                 mov     dword ptr [eax+0D4h], 0
.text:00001935                 mov     eax, [ebp+var_4]
.text:00001938                 add     esp, 4
.text:0000193B                 cmp     ebp, esp
.text:0000193D                 call    __RTC_CheckEsp
.text:00001942                 mov     esp, ebp
.text:00001944                 pop     ebp
.text:00001945                 retn    8
.text:00001945 ?SetOutStreamSize@CDecoder@NBcj2@NCompress@@UAGJPB_K@Z endp
.text:00001945
.text:00001945 ; ---------------------------------------------------------------------------
.text:00001948                 align 10h
.text:00001950
.text:00001950 ; =============== S U B R O U T I N E =======================================
.text:00001950
.text:00001950 ; Attributes: bp-based frame
.text:00001950
.text:00001950 ; __int32 __stdcall NCompress::NBcj2::CDecoder::Read(NCompress::NBcj2::CDecoder *this, void *, unsigned int, unsigned int *)
.text:00001950                 public ?Read@CDecoder@NBcj2@NCompress@@UAGJPAXIPAI@Z
.text:00001950 ?Read@CDecoder@NBcj2@NCompress@@UAGJPAXIPAI@Z proc near
.text:00001950                                         ; DATA XREF: .rdata:00002650o
.text:00001950
.text:00001950 var_50          = dword ptr -50h
.text:00001950 var_4C          = dword ptr -4Ch
.text:00001950 var_48          = dword ptr -48h
.text:00001950 var_44          = dword ptr -44h
.text:00001950 var_40          = dword ptr -40h
.text:00001950 var_3C          = dword ptr -3Ch
.text:00001950 var_38          = dword ptr -38h
.text:00001950 var_34          = dword ptr -34h
.text:00001950 var_2C          = dword ptr -2Ch
.text:00001950 var_24          = dword ptr -24h
.text:00001950 var_20          = dword ptr -20h
.text:00001950 var_1C          = dword ptr -1Ch
.text:00001950 var_18          = dword ptr -18h
.text:00001950 var_14          = dword ptr -14h
.text:00001950 var_10          = dword ptr -10h
.text:00001950 var_C           = dword ptr -0Ch
.text:00001950 var_8           = dword ptr -8
.text:00001950 var_4           = dword ptr -4
.text:00001950 this            = dword ptr  8
.text:00001950 arg_4           = dword ptr  0Ch
.text:00001950 arg_8           = dword ptr  10h
.text:00001950 arg_C           = dword ptr  14h
.text:00001950
.text:00001950                 push    ebp
.text:00001951                 mov     ebp, esp
.text:00001953                 sub     esp, 50h
.text:00001956                 push    esi
.text:00001957                 push    edi
.text:00001958                 lea     edi, [ebp+var_50]
.text:0000195B                 mov     ecx, 14h
.text:00001960                 mov     eax, 0CCCCCCCCh
.text:00001965                 rep stosd
.text:00001967                 cmp     [ebp+arg_C], 0
.text:0000196B                 jz      short loc_1976
.text:0000196D                 mov     eax, [ebp+arg_C]
.text:00001970                 mov     dword ptr [eax], 0
.text:00001976
.text:00001976 loc_1976:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+1Bj
.text:00001976                 cmp     [ebp+arg_8], 0
.text:0000197A                 jnz     short loc_1983
.text:0000197C                 xor     eax, eax
.text:0000197E                 jmp     loc_1D89
.text:00001983 ; ---------------------------------------------------------------------------
.text:00001983
.text:00001983 loc_1983:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+2Aj
.text:00001983                 mov     [ebp+var_4], 0
.text:0000198A                 mov     ecx, [ebp+this]
.text:0000198D                 movzx   edx, byte ptr [ecx+9Dh]
.text:00001994                 test    edx, edx
.text:00001996                 jz      short loc_19DF
.text:00001998                 mov     eax, [ebp+this]
.text:0000199B                 mov     ecx, [ebp+this]
.text:0000199E                 mov     edx, [eax+0A4h]
.text:000019A4                 sub     edx, [ecx+0ACh]
.text:000019AA                 mov     eax, [eax+0A8h]
.text:000019B0                 sbb     eax, [ecx+0B0h]
.text:000019B6                 mov     [ebp+var_C], edx
.text:000019B9                 mov     [ebp+var_8], eax
.text:000019BC                 mov     ecx, [ebp+arg_8]
.text:000019BF                 xor     edx, edx
.text:000019C1                 mov     [ebp+var_40], ecx
.text:000019C4                 mov     [ebp+var_3C], edx
.text:000019C7                 mov     eax, [ebp+var_3C]
.text:000019CA                 cmp     eax, [ebp+var_8]
.text:000019CD                 jb      short loc_19DF
.text:000019CF                 ja      short loc_19D9
.text:000019D1                 mov     ecx, [ebp+var_40]
.text:000019D4                 cmp     ecx, [ebp+var_C]
.text:000019D7                 jbe     short loc_19DF
.text:000019D9
.text:000019D9 loc_19D9:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+7Fj
.text:000019D9                 mov     edx, [ebp+var_C]
.text:000019DC                 mov     [ebp+arg_8], edx
.text:000019DF
.text:000019DF loc_19DF:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+46j
.text:000019DF                                         ; NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+7Dj ...
.text:000019DF                 mov     eax, [ebp+this]
.text:000019E2                 mov     ecx, [ebp+arg_4]
.text:000019E5                 mov     [eax+0D4h], ecx
.text:000019EB                 mov     edx, [ebp+arg_4]
.text:000019EE                 add     edx, [ebp+arg_8]
.text:000019F1                 mov     eax, [ebp+this]
.text:000019F4                 mov     [eax+0D8h], edx
.text:000019FA                 mov     [ebp+var_10], 0
.text:00001A01
.text:00001A01 loc_1A01:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+3AFj
.text:00001A01                 mov     ecx, [ebp+this]
.text:00001A04                 add     ecx, 0B4h ; '¦'
.text:00001A0A                 push    ecx
.text:00001A0B                 call    _Bcj2Dec_Decode@4 ; Bcj2Dec_Decode(x)
.text:00001A10                 mov     [ebp+var_14], eax
.text:00001A13                 cmp     [ebp+var_14], 0
.text:00001A17                 jz      short loc_1A23
.text:00001A19                 mov     eax, 1
.text:00001A1E                 jmp     loc_1D89
.text:00001A23 ; ---------------------------------------------------------------------------
.text:00001A23
.text:00001A23 loc_1A23:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+C7j
.text:00001A23                 mov     edx, [ebp+this]
.text:00001A26                 mov     eax, [edx+0D4h]
.text:00001A2C                 sub     eax, [ebp+arg_4]
.text:00001A2F                 mov     [ebp+var_18], eax
.text:00001A32                 jz      short loc_1A80
.text:00001A34                 mov     ecx, [ebp+var_4]
.text:00001A37                 add     ecx, [ebp+var_18]
.text:00001A3A                 mov     [ebp+var_4], ecx
.text:00001A3D                 cmp     [ebp+arg_C], 0
.text:00001A41                 jz      short loc_1A4B
.text:00001A43                 mov     edx, [ebp+arg_C]
.text:00001A46                 mov     eax, [ebp+var_4]
.text:00001A49                 mov     [edx], eax
.text:00001A4B
.text:00001A4B loc_1A4B:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+F1j
.text:00001A4B                 mov     ecx, [ebp+arg_4]
.text:00001A4E                 add     ecx, [ebp+var_18]
.text:00001A51                 mov     [ebp+arg_4], ecx
.text:00001A54                 mov     edx, [ebp+arg_8]
.text:00001A57                 sub     edx, [ebp+var_18]
.text:00001A5A                 mov     [ebp+arg_8], edx
.text:00001A5D                 mov     eax, [ebp+var_18]
.text:00001A60                 xor     ecx, ecx
.text:00001A62                 mov     edx, [ebp+this]
.text:00001A65                 add     eax, [edx+0ACh]
.text:00001A6B                 adc     ecx, [edx+0B0h]
.text:00001A71                 mov     edx, [ebp+this]
.text:00001A74                 mov     [edx+0ACh], eax
.text:00001A7A                 mov     [edx+0B0h], ecx
.text:00001A80
.text:00001A80 loc_1A80:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+E2j
.text:00001A80                 mov     eax, [ebp+this]
.text:00001A83                 cmp     dword ptr [eax+0DCh], 4
.text:00001A8A                 jb      short loc_1A91
.text:00001A8C                 jmp     loc_1D04
.text:00001A91 ; ---------------------------------------------------------------------------
.text:00001A91
.text:00001A91 loc_1A91:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+13Aj
.text:00001A91                 mov     ecx, [ebp+this]
.text:00001A94                 mov     edx, [ecx+0DCh]
.text:00001A9A                 mov     eax, [ebp+this]
.text:00001A9D                 mov     ecx, [eax+edx*4+4Ch]
.text:00001AA1                 mov     [ebp+var_1C], ecx
.text:00001AA4                 mov     edx, [ebp+this]
.text:00001AA7                 mov     eax, [edx+0DCh]
.text:00001AAD                 mov     ecx, [ebp+this]
.text:00001AB0                 mov     edx, [ecx+eax*4+10h]
.text:00001AB4                 mov     [ebp+var_20], edx
.text:00001AB7                 mov     [ebp+var_24], 0
.text:00001ABE                 jmp     short loc_1AC9
.text:00001AC0 ; ---------------------------------------------------------------------------
.text:00001AC0
.text:00001AC0 loc_1AC0:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+1A2j
.text:00001AC0                 mov     eax, [ebp+var_24]
.text:00001AC3                 add     eax, 1
.text:00001AC6                 mov     [ebp+var_24], eax
.text:00001AC9
.text:00001AC9 loc_1AC9:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+16Ej
.text:00001AC9                 mov     ecx, [ebp+var_24]
.text:00001ACC                 cmp     ecx, [ebp+var_1C]
.text:00001ACF                 jnb     short loc_1AF4
.text:00001AD1                 mov     edx, [ebp+this]
.text:00001AD4                 mov     eax, [edx+0DCh]
.text:00001ADA                 mov     ecx, [ebp+this]
.text:00001ADD                 mov     edx, [ecx+eax*4+0B4h]
.text:00001AE4                 mov     eax, [ebp+var_20]
.text:00001AE7                 add     eax, [ebp+var_24]
.text:00001AEA                 mov     ecx, [ebp+var_24]
.text:00001AED                 mov     dl, [edx+ecx]
.text:00001AF0                 mov     [eax], dl
.text:00001AF2                 jmp     short loc_1AC0
.text:00001AF4 ; ---------------------------------------------------------------------------
.text:00001AF4
.text:00001AF4 loc_1AF4:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+17Fj
.text:00001AF4                 mov     eax, [ebp+this]
.text:00001AF7                 mov     ecx, [eax+0DCh]
.text:00001AFD                 mov     edx, [ebp+this]
.text:00001B00                 mov     eax, [ebp+var_20]
.text:00001B03                 mov     [edx+ecx*4+0B4h], eax
.text:00001B0A                 mov     ecx, [ebp+this]
.text:00001B0D                 mov     edx, [ecx+0DCh]
.text:00001B13                 mov     eax, [ebp+this]
.text:00001B16                 mov     ecx, [ebp+var_20]
.text:00001B19                 mov     [eax+edx*4+0C4h], ecx
.text:00001B20                 mov     edx, [ebp+this]
.text:00001B23                 mov     eax, [edx+0DCh]
.text:00001B29                 mov     ecx, [ebp+this]
.text:00001B2C                 cmp     dword ptr [ecx+eax*4+7Ch], 0
.text:00001B31                 jz      short loc_1B48
.text:00001B33                 mov     edx, [ebp+this]
.text:00001B36                 mov     eax, [edx+0DCh]
.text:00001B3C                 mov     ecx, [ebp+this]
.text:00001B3F                 mov     eax, [ecx+eax*4+7Ch]
.text:00001B43                 jmp     loc_1D89
.text:00001B48 ; ---------------------------------------------------------------------------
.text:00001B48
.text:00001B48 loc_1B48:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+1E1j
.text:00001B48                                         ; NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+2C8j ...
.text:00001B48                 mov     edx, [ebp+this]
.text:00001B4B                 mov     eax, [edx+0DCh]
.text:00001B51                 mov     ecx, [ebp+this]
.text:00001B54                 mov     edx, [ecx+eax*4+24h]
.text:00001B58                 sub     edx, [ebp+var_1C]
.text:00001B5B                 mov     [ebp+var_2C], edx
.text:00001B5E                 mov     eax, [ebp+this]
.text:00001B61                 mov     ecx, [eax+0DCh]
.text:00001B67                 mov     edx, [ebp+this]
.text:00001B6A                 lea     ecx, [edx+ecx*4+8Ch]
.text:00001B71                 call    ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->(void)
.text:00001B76                 mov     [ebp+var_44], eax
.text:00001B79                 mov     esi, esp
.text:00001B7B                 lea     eax, [ebp+var_2C]
.text:00001B7E                 push    eax
.text:00001B7F                 mov     ecx, [ebp+var_2C]
.text:00001B82                 push    ecx
.text:00001B83                 mov     edx, [ebp+this]
.text:00001B86                 mov     eax, [edx+0DCh]
.text:00001B8C                 mov     ecx, [ebp+this]
.text:00001B8F                 mov     edx, [ecx+eax*4+10h]
.text:00001B93                 add     edx, [ebp+var_1C]
.text:00001B96                 push    edx
.text:00001B97                 mov     eax, [ebp+var_44]
.text:00001B9A                 push    eax
.text:00001B9B                 mov     ecx, [ebp+var_44]
.text:00001B9E                 mov     edx, [ecx]
.text:00001BA0                 mov     eax, [edx+0Ch]
.text:00001BA3                 call    eax
.text:00001BA5                 cmp     esi, esp
.text:00001BA7                 call    __RTC_CheckEsp
.text:00001BAC                 mov     [ebp+var_34], eax
.text:00001BAF                 mov     ecx, [ebp+this]
.text:00001BB2                 mov     edx, [ecx+0DCh]
.text:00001BB8                 mov     eax, [ebp+this]
.text:00001BBB                 mov     ecx, [ebp+var_34]
.text:00001BBE                 mov     [eax+edx*4+7Ch], ecx
.text:00001BC2                 cmp     [ebp+var_2C], 0
.text:00001BC6                 jnz     short loc_1BCA
.text:00001BC8                 jmp     short loc_1C2E
.text:00001BCA ; ---------------------------------------------------------------------------
.text:00001BCA
.text:00001BCA loc_1BCA:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+276j
.text:00001BCA                 mov     edx, [ebp+this]
.text:00001BCD                 mov     eax, [edx+0DCh]
.text:00001BD3                 mov     ecx, [ebp+var_2C]
.text:00001BD6                 xor     edx, edx
.text:00001BD8                 mov     esi, [ebp+this]
.text:00001BDB                 add     ecx, [esi+eax*8+5Ch]
.text:00001BDF                 adc     edx, [esi+eax*8+60h]
.text:00001BE3                 mov     eax, [ebp+this]
.text:00001BE6                 mov     eax, [eax+0DCh]
.text:00001BEC                 mov     esi, [ebp+this]
.text:00001BEF                 mov     [esi+eax*8+5Ch], ecx
.text:00001BF3                 mov     [esi+eax*8+60h], edx
.text:00001BF7                 mov     ecx, [ebp+var_1C]
.text:00001BFA                 add     ecx, [ebp+var_2C]
.text:00001BFD                 mov     [ebp+var_1C], ecx
.text:00001C00                 cmp     [ebp+var_34], 0
.text:00001C04                 jz      short loc_1C08
.text:00001C06                 jmp     short loc_1C2E
.text:00001C08 ; ---------------------------------------------------------------------------
.text:00001C08
.text:00001C08 loc_1C08:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+2B4j
.text:00001C08                 cmp     [ebp+var_1C], 4
.text:00001C0C                 jnb     short loc_1C2E
.text:00001C0E                 mov     edx, [ebp+this]
.text:00001C11                 cmp     dword ptr [edx+0DCh], 1
.text:00001C18                 jz      loc_1B48
.text:00001C1E                 mov     eax, [ebp+this]
.text:00001C21                 cmp     dword ptr [eax+0DCh], 2
.text:00001C28                 jz      loc_1B48
.text:00001C2E
.text:00001C2E loc_1C2E:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+278j
.text:00001C2E                                         ; NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+2B6j ...
.text:00001C2E                 cmp     [ebp+var_1C], 0
.text:00001C32                 jnz     short loc_1C52
.text:00001C34                 cmp     [ebp+var_4], 0
.text:00001C38                 jnz     short loc_1C4D
.text:00001C3A                 mov     ecx, [ebp+this]
.text:00001C3D                 mov     edx, [ecx+0DCh]
.text:00001C43                 mov     eax, [ebp+this]
.text:00001C46                 mov     ecx, [eax+edx*4+7Ch]
.text:00001C4A                 mov     [ebp+var_10], ecx
.text:00001C4D
.text:00001C4D loc_1C4D:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+2E8j
.text:00001C4D                 jmp     loc_1D04
.text:00001C52 ; ---------------------------------------------------------------------------
.text:00001C52
.text:00001C52 loc_1C52:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+2E2j
.text:00001C52                 mov     edx, [ebp+this]
.text:00001C55                 cmp     dword ptr [edx+0DCh], 1
.text:00001C5C                 jz      short loc_1C6A
.text:00001C5E                 mov     eax, [ebp+this]
.text:00001C61                 cmp     dword ptr [eax+0DCh], 2
.text:00001C68                 jnz     short loc_1CD9
.text:00001C6A
.text:00001C6A loc_1C6A:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+30Cj
.text:00001C6A                 mov     ecx, [ebp+var_1C]
.text:00001C6D                 and     ecx, 3
.text:00001C70                 mov     [ebp+var_38], ecx
.text:00001C73                 mov     edx, [ebp+this]
.text:00001C76                 mov     eax, [edx+0DCh]
.text:00001C7C                 mov     ecx, [ebp+this]
.text:00001C7F                 mov     edx, [ebp+var_38]
.text:00001C82                 mov     [ecx+eax*4+4Ch], edx
.text:00001C86                 cmp     [ebp+var_1C], 4
.text:00001C8A                 jnb     short loc_1CD0
.text:00001C8C                 cmp     [ebp+var_4], 0
.text:00001C90                 jz      short loc_1C99
.text:00001C92                 xor     eax, eax
.text:00001C94                 jmp     loc_1D89
.text:00001C99 ; ---------------------------------------------------------------------------
.text:00001C99
.text:00001C99 loc_1C99:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+340j
.text:00001C99                 mov     eax, [ebp+this]
.text:00001C9C                 mov     ecx, [eax+0DCh]
.text:00001CA2                 mov     edx, [ebp+this]
.text:00001CA5                 cmp     dword ptr [edx+ecx*4+7Ch], 0
.text:00001CAA                 jz      short loc_1CC1
.text:00001CAC                 mov     eax, [ebp+this]
.text:00001CAF                 mov     ecx, [eax+0DCh]
.text:00001CB5                 mov     edx, [ebp+this]
.text:00001CB8                 mov     eax, [edx+ecx*4+7Ch]
.text:00001CBC                 mov     [ebp+var_48], eax
.text:00001CBF                 jmp     short loc_1CC8
.text:00001CC1 ; ---------------------------------------------------------------------------
.text:00001CC1
.text:00001CC1 loc_1CC1:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+35Aj
.text:00001CC1                 mov     [ebp+var_48], 1
.text:00001CC8
.text:00001CC8 loc_1CC8:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+36Fj
.text:00001CC8                 mov     eax, [ebp+var_48]
.text:00001CCB                 jmp     loc_1D89
.text:00001CD0 ; ---------------------------------------------------------------------------
.text:00001CD0
.text:00001CD0 loc_1CD0:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+33Aj
.text:00001CD0                 mov     ecx, [ebp+var_1C]
.text:00001CD3                 sub     ecx, [ebp+var_38]
.text:00001CD6                 mov     [ebp+var_1C], ecx
.text:00001CD9
.text:00001CD9 loc_1CD9:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+318j
.text:00001CD9                 mov     edx, [ebp+this]
.text:00001CDC                 mov     eax, [edx+0DCh]
.text:00001CE2                 mov     ecx, [ebp+this]
.text:00001CE5                 mov     edx, [ecx+eax*4+10h]
.text:00001CE9                 add     edx, [ebp+var_1C]
.text:00001CEC                 mov     eax, [ebp+this]
.text:00001CEF                 mov     ecx, [eax+0DCh]
.text:00001CF5                 mov     eax, [ebp+this]
.text:00001CF8                 mov     [eax+ecx*4+0C4h], edx
.text:00001CFF                 jmp     loc_1A01
.text:00001D04 ; ---------------------------------------------------------------------------
.text:00001D04
.text:00001D04 loc_1D04:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+13Cj
.text:00001D04                                         ; NCompress::NBcj2::CDecoder::Read(void *,uint,uint *):loc_1C4Dj
.text:00001D04                 mov     ecx, [ebp+this]
.text:00001D07                 movzx   edx, byte ptr [ecx+9Ch]
.text:00001D0E                 test    edx, edx
.text:00001D10                 jz      short loc_1D86
.text:00001D12                 mov     eax, [ebp+this]
.text:00001D15                 movzx   ecx, byte ptr [eax+9Dh]
.text:00001D1C                 test    ecx, ecx
.text:00001D1E                 jz      short loc_1D86
.text:00001D20                 mov     edx, [ebp+this]
.text:00001D23                 mov     eax, [ebp+this]
.text:00001D26                 mov     [ebp+var_4C], edx
.text:00001D29                 mov     [ebp+var_50], eax
.text:00001D2C                 mov     ecx, [ebp+var_4C]
.text:00001D2F                 mov     edx, [ebp+var_50]
.text:00001D32                 mov     eax, [ecx+0A4h]
.text:00001D38                 cmp     eax, [edx+0ACh]
.text:00001D3E                 jnz     short loc_1D86
.text:00001D40                 mov     ecx, [ebp+var_4C]
.text:00001D43                 mov     edx, [ebp+var_50]
.text:00001D46                 mov     eax, [ecx+0A8h]
.text:00001D4C                 cmp     eax, [edx+0B0h]
.text:00001D52                 jnz     short loc_1D86
.text:00001D54                 mov     ecx, [ebp+this]
.text:00001D57                 cmp     dword ptr [ecx+0ECh], 0
.text:00001D5E                 jz      short loc_1D67
.text:00001D60                 mov     eax, 1
.text:00001D65                 jmp     short loc_1D89
.text:00001D67 ; ---------------------------------------------------------------------------
.text:00001D67
.text:00001D67 loc_1D67:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+40Ej
.text:00001D67                 mov     edx, [ebp+this]
.text:00001D6A                 cmp     dword ptr [edx+0DCh], 0
.text:00001D71                 jz      short loc_1D86
.text:00001D73                 mov     eax, [ebp+this]
.text:00001D76                 cmp     dword ptr [eax+0DCh], 8
.text:00001D7D                 jz      short loc_1D86
.text:00001D7F                 mov     eax, 1
.text:00001D84                 jmp     short loc_1D89
.text:00001D86 ; ---------------------------------------------------------------------------
.text:00001D86
.text:00001D86 loc_1D86:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+3C0j
.text:00001D86                                         ; NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+3CEj ...
.text:00001D86                 mov     eax, [ebp+var_10]
.text:00001D89
.text:00001D89 loc_1D89:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+2Ej
.text:00001D89                                         ; NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+CEj ...
.text:00001D89                 push    edx
.text:00001D8A                 mov     ecx, ebp
.text:00001D8C                 push    eax
.text:00001D8D                 lea     edx, $LN38
.text:00001D93                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001D98                 pop     eax
.text:00001D99                 pop     edx
.text:00001D9A                 pop     edi
.text:00001D9B                 pop     esi
.text:00001D9C                 add     esp, 50h
.text:00001D9F                 cmp     ebp, esp
.text:00001DA1                 call    __RTC_CheckEsp
.text:00001DA6                 mov     esp, ebp
.text:00001DA8                 pop     ebp
.text:00001DA9                 retn    10h
.text:00001DA9 ?Read@CDecoder@NBcj2@NCompress@@UAGJPAXIPAI@Z endp
.text:00001DA9
.text:00001DA9 ; ---------------------------------------------------------------------------
.text:00001DAC $LN38           dd 1                    ; DATA XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+43Do
.text:00001DB0                 dd offset $LN37
.text:00001DB4 $LN37           dd 0FFFFFFD4h, 4        ; DATA XREF: .text:00001DB0o
.text:00001DBC                 dd offset $LN36         ; "curSize"
.text:00001DC0 $LN36           db 'curSize',0          ; DATA XREF: .text:00001DBCo
.text:00001DC0 _text           ends
.text:00001DC0
.rtc$TMZ:00001DC8 ; ===========================================================================
.rtc$TMZ:00001DC8
.rtc$TMZ:00001DC8 ; Segment type: Pure data
.rtc$TMZ:00001DC8 ; Segment permissions: Read
.rtc$TMZ:00001DC8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001DC8                 assume cs:_rtc$TMZ
.rtc$TMZ:00001DC8                 ;org 1DC8h
.rtc$TMZ:00001DC8 ; COMDAT (pick any)
.rtc$TMZ:00001DC8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001DC8 _rtc$TMZ        ends
.rtc$TMZ:00001DC8
.rtc$IMZ:00001DCC ; ===========================================================================
.rtc$IMZ:00001DCC
.rtc$IMZ:00001DCC ; Segment type: Pure data
.rtc$IMZ:00001DCC ; Segment permissions: Read
.rtc$IMZ:00001DCC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001DCC                 assume cs:_rtc$IMZ
.rtc$IMZ:00001DCC                 ;org 1DCCh
.rtc$IMZ:00001DCC ; COMDAT (pick any)
.rtc$IMZ:00001DCC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001DCC _rtc$IMZ        ends
.rtc$IMZ:00001DCC
.rdata:00001DD0 ; ===========================================================================
.rdata:00001DD0
.rdata:00001DD0 ; Segment type: Pure data
.rdata:00001DD0 ; Segment permissions: Read
.rdata:00001DD0 _rdata          segment dword public 'DATA' use32
.rdata:00001DD0                 assume cs:_rdata
.rdata:00001DD0                 ;org 1DD0h
.rdata:00001DD0 ; COMDAT (pick largest)
.rdata:00001DD0                 dd offset ??_R4CEncoder@NBcj2@NCompress@@6BICompressSetBufSize@@@ ; const NCompress::NBcj2::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetBufSize'}
.rdata:00001DD4                 public ??_7CEncoder@NBcj2@NCompress@@6BICompressSetBufSize@@@
.rdata:00001DD4 ; const NCompress::NBcj2::CEncoder::`vftable'{for `ICompressSetBufSize'}
.rdata:00001DD4 ??_7CEncoder@NBcj2@NCompress@@6BICompressSetBufSize@@@ dd offset ?QueryInterface@CEncoder@NBcj2@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00001DD4                                         ; DATA XREF: NCompress::NBcj2::CEncoder::CEncoder(void)+58o
.rdata:00001DD4                                         ; NCompress::NBcj2::CEncoder::~CEncoder(void)+24o
.rdata:00001DD4                                         ; [thunk]:NCompress::NBcj2::CEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00001DD8                 dd offset ?AddRef@CEncoder@NBcj2@NCompress@@W7AGKXZ ; [thunk]:NCompress::NBcj2::CEncoder::AddRef`adjustor{8}' (void)
.rdata:00001DDC                 dd offset ?Release@CEncoder@NBcj2@NCompress@@W7AGKXZ ; [thunk]:NCompress::NBcj2::CEncoder::Release`adjustor{8}' (void)
.rdata:00001DE0                 dd offset ?SetInBufSize@CEncoder@NBcj2@NCompress@@UAGJII@Z ; NCompress::NBcj2::CEncoder::SetInBufSize(uint,uint)
.rdata:00001DE4                 dd offset ?SetOutBufSize@CEncoder@NBcj2@NCompress@@UAGJII@Z ; NCompress::NBcj2::CEncoder::SetOutBufSize(uint,uint)
.rdata:00001DE4 _rdata          ends
.rdata:00001DE4
.rdata:00001DE8 ; ===========================================================================
.rdata:00001DE8
.rdata:00001DE8 ; Segment type: Pure data
.rdata:00001DE8 ; Segment permissions: Read
.rdata:00001DE8 _rdata          segment dword public 'DATA' use32
.rdata:00001DE8                 assume cs:_rdata
.rdata:00001DE8                 ;org 1DE8h
.rdata:00001DE8 ; COMDAT (pick largest)
.rdata:00001DE8                 dd offset ??_R4CEncoder@NBcj2@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NBcj2::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00001DEC                 public ??_7CEncoder@NBcj2@NCompress@@6BICompressSetCoderProperties@@@
.rdata:00001DEC ; const NCompress::NBcj2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00001DEC ??_7CEncoder@NBcj2@NCompress@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CEncoder@NBcj2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00001DEC                                         ; DATA XREF: NCompress::NBcj2::CEncoder::CEncoder(void)+4Eo
.rdata:00001DEC                                         ; NCompress::NBcj2::CEncoder::~CEncoder(void)+1Ao
.rdata:00001DEC                                         ; [thunk]:NCompress::NBcj2::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00001DF0                 dd offset ?AddRef@CEncoder@NBcj2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NBcj2::CEncoder::AddRef`adjustor{4}' (void)
.rdata:00001DF4                 dd offset ?Release@CEncoder@NBcj2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NBcj2::CEncoder::Release`adjustor{4}' (void)
.rdata:00001DF8                 dd offset ?SetCoderProperties@CEncoder@NBcj2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCompress::NBcj2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00001DF8 _rdata          ends
.rdata:00001DF8
.rdata:00001DFC ; ===========================================================================
.rdata:00001DFC
.rdata:00001DFC ; Segment type: Pure data
.rdata:00001DFC ; Segment permissions: Read
.rdata:00001DFC _rdata          segment dword public 'DATA' use32
.rdata:00001DFC                 assume cs:_rdata
.rdata:00001DFC                 ;org 1DFCh
.rdata:00001DFC ; COMDAT (pick largest)
.rdata:00001DFC                 dd offset ??_R4CEncoder@NBcj2@NCompress@@6BICompressCoder2@@@ ; const NCompress::NBcj2::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder2'}
.rdata:00001E00                 public ??_7CEncoder@NBcj2@NCompress@@6BICompressCoder2@@@
.rdata:00001E00 ; const NCompress::NBcj2::CEncoder::`vftable'{for `ICompressCoder2'}
.rdata:00001E00 ??_7CEncoder@NBcj2@NCompress@@6BICompressCoder2@@@ dd offset ?QueryInterface@CEncoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00001E00                                         ; DATA XREF: NCompress::NBcj2::CEncoder::CEncoder(void)+45o
.rdata:00001E00                                         ; NCompress::NBcj2::CEncoder::~CEncoder(void)+11o
.rdata:00001E00                                         ; NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)
.rdata:00001E04                 dd offset ?AddRef@CEncoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CEncoder::AddRef(void)
.rdata:00001E08                 dd offset ?Release@CEncoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CEncoder::Release(void)
.rdata:00001E0C                 dd offset ?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z ; NCompress::NBcj2::CEncoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)
.rdata:00001E0C _rdata          ends
.rdata:00001E0C
.rdata$r:00001E10 ; ===========================================================================
.rdata$r:00001E10
.rdata$r:00001E10 ; Segment type: Pure data
.rdata$r:00001E10 ; Segment permissions: Read
.rdata$r:00001E10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E10                 assume cs:_rdata$r
.rdata$r:00001E10                 ;org 1E10h
.rdata$r:00001E10 ; COMDAT (pick any)
.rdata$r:00001E10                 public ??_R4CEncoder@NBcj2@NCompress@@6BICompressCoder2@@@
.rdata$r:00001E10 ; const NCompress::NBcj2::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder2'}
.rdata$r:00001E10 ??_R4CEncoder@NBcj2@NCompress@@6BICompressCoder2@@@ db    0
.rdata$r:00001E10                                         ; DATA XREF: .rdata:00001DFCo
.rdata$r:00001E11                 db    0
.rdata$r:00001E12                 db    0
.rdata$r:00001E13                 db    0
.rdata$r:00001E14                 db    0
.rdata$r:00001E15                 db    0
.rdata$r:00001E16                 db    0
.rdata$r:00001E17                 db    0
.rdata$r:00001E18                 db    0
.rdata$r:00001E19                 db    0
.rdata$r:00001E1A                 db    0
.rdata$r:00001E1B                 db    0
.rdata$r:00001E1C                 dd offset ??_R0?AVCEncoder@NBcj2@NCompress@@@8 ; NCompress::NBcj2::CEncoder `RTTI Type Descriptor'
.rdata$r:00001E20                 dd offset ??_R3CEncoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E20 _rdata$r        ends
.rdata$r:00001E20
.data:00001E24 ; ===========================================================================
.data:00001E24
.data:00001E24 ; Segment type: Pure data
.data:00001E24 ; Segment permissions: Read/Write
.data:00001E24 _data           segment dword public 'DATA' use32
.data:00001E24                 assume cs:_data
.data:00001E24                 ;org 1E24h
.data:00001E24 ; COMDAT (pick any)
.data:00001E24                 public ??_R0?AVCEncoder@NBcj2@NCompress@@@8
.data:00001E24 ; class NCompress::NBcj2::CEncoder `RTTI Type Descriptor'
.data:00001E24 ??_R0?AVCEncoder@NBcj2@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00001E24                                         ; DATA XREF: .rdata$r:00001E1Co
.data:00001E24                                         ; .rdata$r:NCompress::NBcj2::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001E24                                         ; const type_info::`vftable'
.data:00001E28                 db    0
.data:00001E29                 db    0
.data:00001E2A                 db    0
.data:00001E2B                 db    0
.data:00001E2C                 db  2Eh ; .
.data:00001E2D                 db  3Fh ; ?
.data:00001E2E                 db  41h ; A
.data:00001E2F                 db  56h ; V
.data:00001E30                 db  43h ; C
.data:00001E31                 db  45h ; E
.data:00001E32                 db  6Eh ; n
.data:00001E33                 db  63h ; c
.data:00001E34                 db  6Fh ; o
.data:00001E35                 db  64h ; d
.data:00001E36                 db  65h ; e
.data:00001E37                 db  72h ; r
.data:00001E38                 db  40h ; @
.data:00001E39                 db  4Eh ; N
.data:00001E3A                 db  42h ; B
.data:00001E3B                 db  63h ; c
.data:00001E3C                 db  6Ah ; j
.data:00001E3D                 db  32h ; 2
.data:00001E3E                 db  40h ; @
.data:00001E3F                 db  4Eh ; N
.data:00001E40                 db  43h ; C
.data:00001E41                 db  6Fh ; o
.data:00001E42                 db  6Dh ; m
.data:00001E43                 db  70h ; p
.data:00001E44                 db  72h ; r
.data:00001E45                 db  65h ; e
.data:00001E46                 db  73h ; s
.data:00001E47                 db  73h ; s
.data:00001E48                 db  40h ; @
.data:00001E49                 db  40h ; @
.data:00001E4A                 db    0
.data:00001E4B                 align 4
.data:00001E4B _data           ends
.data:00001E4B
.rdata$r:00001E4C ; ===========================================================================
.rdata$r:00001E4C
.rdata$r:00001E4C ; Segment type: Pure data
.rdata$r:00001E4C ; Segment permissions: Read
.rdata$r:00001E4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E4C                 assume cs:_rdata$r
.rdata$r:00001E4C                 ;org 1E4Ch
.rdata$r:00001E4C ; COMDAT (pick any)
.rdata$r:00001E4C                 public ??_R3CEncoder@NBcj2@NCompress@@8
.rdata$r:00001E4C ; NCompress::NBcj2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E4C ??_R3CEncoder@NBcj2@NCompress@@8 db    0 ; DATA XREF: .rdata$r:00001E20o
.rdata$r:00001E4C                                         ; .rdata$r:00001E9Co ...
.rdata$r:00001E4D                 db    0
.rdata$r:00001E4E                 db    0
.rdata$r:00001E4F                 db    0
.rdata$r:00001E50                 db    5
.rdata$r:00001E51                 db    0
.rdata$r:00001E52                 db    0
.rdata$r:00001E53                 db    0
.rdata$r:00001E54                 db    9
.rdata$r:00001E55                 db    0
.rdata$r:00001E56                 db    0
.rdata$r:00001E57                 db    0
.rdata$r:00001E58                 dd offset ??_R2CEncoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CEncoder::`RTTI Base Class Array'
.rdata$r:00001E58 _rdata$r        ends
.rdata$r:00001E58
.rdata$r:00001E5C ; ===========================================================================
.rdata$r:00001E5C
.rdata$r:00001E5C ; Segment type: Pure data
.rdata$r:00001E5C ; Segment permissions: Read
.rdata$r:00001E5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E5C                 assume cs:_rdata$r
.rdata$r:00001E5C                 ;org 1E5Ch
.rdata$r:00001E5C ; COMDAT (pick any)
.rdata$r:00001E5C                 public ??_R2CEncoder@NBcj2@NCompress@@8
.rdata$r:00001E5C ; NCompress::NBcj2::CEncoder::`RTTI Base Class Array'
.rdata$r:00001E5C ??_R2CEncoder@NBcj2@NCompress@@8 dd offset ??_R1A@?0A@EA@CEncoder@NBcj2@NCompress@@8
.rdata$r:00001E5C                                         ; DATA XREF: .rdata$r:00001E58o
.rdata$r:00001E5C                                         ; NCompress::NBcj2::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001E60                 dd offset ??_R1A@?0A@EA@ICompressCoder2@@8 ; ICompressCoder2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001E64                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00001E68                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00001E6C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00001E70                 dd offset ??_R17?0A@EA@ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00001E74                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00001E78                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00001E7C                 dd offset ??_R1BA@?0A@EA@CBaseCoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CBaseCoder::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00001E80                 db    0
.rdata$r:00001E81                 align 4
.rdata$r:00001E81 _rdata$r        ends
.rdata$r:00001E81
.rdata$r:00001E84 ; ===========================================================================
.rdata$r:00001E84
.rdata$r:00001E84 ; Segment type: Pure data
.rdata$r:00001E84 ; Segment permissions: Read
.rdata$r:00001E84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E84                 assume cs:_rdata$r
.rdata$r:00001E84                 ;org 1E84h
.rdata$r:00001E84 ; COMDAT (pick any)
.rdata$r:00001E84                 public ??_R1A@?0A@EA@CEncoder@NBcj2@NCompress@@8
.rdata$r:00001E84 ; NCompress::NBcj2::CEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001E84 ??_R1A@?0A@EA@CEncoder@NBcj2@NCompress@@8 dd offset ??_R0?AVCEncoder@NBcj2@NCompress@@@8
.rdata$r:00001E84                                         ; DATA XREF: .rdata$r:NCompress::NBcj2::CEncoder::`RTTI Base Class Array'o
.rdata$r:00001E84                                         ; NCompress::NBcj2::CEncoder `RTTI Type Descriptor'
.rdata$r:00001E88                 db    8
.rdata$r:00001E89                 db    0
.rdata$r:00001E8A                 db    0
.rdata$r:00001E8B                 db    0
.rdata$r:00001E8C                 db    0
.rdata$r:00001E8D                 db    0
.rdata$r:00001E8E                 db    0
.rdata$r:00001E8F                 db    0
.rdata$r:00001E90                 db 0FFh
.rdata$r:00001E91                 db 0FFh
.rdata$r:00001E92                 db 0FFh
.rdata$r:00001E93                 db 0FFh
.rdata$r:00001E94                 db    0
.rdata$r:00001E95                 db    0
.rdata$r:00001E96                 db    0
.rdata$r:00001E97                 db    0
.rdata$r:00001E98                 db  40h ; @
.rdata$r:00001E99                 db    0
.rdata$r:00001E9A                 db    0
.rdata$r:00001E9B                 db    0
.rdata$r:00001E9C                 dd offset ??_R3CEncoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E9C _rdata$r        ends
.rdata$r:00001E9C
.rdata$r:00001EA0 ; ===========================================================================
.rdata$r:00001EA0
.rdata$r:00001EA0 ; Segment type: Pure data
.rdata$r:00001EA0 ; Segment permissions: Read
.rdata$r:00001EA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EA0                 assume cs:_rdata$r
.rdata$r:00001EA0                 ;org 1EA0h
.rdata$r:00001EA0 ; COMDAT (pick any)
.rdata$r:00001EA0                 public ??_R1A@?0A@EA@ICompressCoder2@@8
.rdata$r:00001EA0 ; ICompressCoder2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001EA0 ??_R1A@?0A@EA@ICompressCoder2@@8 dd offset ??_R0?AUICompressCoder2@@@8
.rdata$r:00001EA0                                         ; DATA XREF: .rdata$r:00001E60o
.rdata$r:00001EA0                                         ; .rdata$r:ICompressCoder2::`RTTI Base Class Array'o ...
.rdata$r:00001EA0                                         ; ICompressCoder2 `RTTI Type Descriptor'
.rdata$r:00001EA4                 db    1
.rdata$r:00001EA5                 db    0
.rdata$r:00001EA6                 db    0
.rdata$r:00001EA7                 db    0
.rdata$r:00001EA8                 db    0
.rdata$r:00001EA9                 db    0
.rdata$r:00001EAA                 db    0
.rdata$r:00001EAB                 db    0
.rdata$r:00001EAC                 db 0FFh
.rdata$r:00001EAD                 db 0FFh
.rdata$r:00001EAE                 db 0FFh
.rdata$r:00001EAF                 db 0FFh
.rdata$r:00001EB0                 db    0
.rdata$r:00001EB1                 db    0
.rdata$r:00001EB2                 db    0
.rdata$r:00001EB3                 db    0
.rdata$r:00001EB4                 db  40h ; @
.rdata$r:00001EB5                 db    0
.rdata$r:00001EB6                 db    0
.rdata$r:00001EB7                 db    0
.rdata$r:00001EB8                 dd offset ??_R3ICompressCoder2@@8 ; ICompressCoder2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001EB8 _rdata$r        ends
.rdata$r:00001EB8
.data:00001EBC ; ===========================================================================
.data:00001EBC
.data:00001EBC ; Segment type: Pure data
.data:00001EBC ; Segment permissions: Read/Write
.data:00001EBC _data           segment dword public 'DATA' use32
.data:00001EBC                 assume cs:_data
.data:00001EBC                 ;org 1EBCh
.data:00001EBC ; COMDAT (pick any)
.data:00001EBC                 public ??_R0?AUICompressCoder2@@@8
.data:00001EBC ; struct ICompressCoder2 `RTTI Type Descriptor'
.data:00001EBC ??_R0?AUICompressCoder2@@@8 dd offset ??_7type_info@@6B@
.data:00001EBC                                         ; DATA XREF: .rdata$r:ICompressCoder2::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001EBC                                         ; .rdata$r:0000241Co
.data:00001EBC                                         ; const type_info::`vftable'
.data:00001EC0                 db    0
.data:00001EC1                 db    0
.data:00001EC2                 db    0
.data:00001EC3                 db    0
.data:00001EC4                 db  2Eh ; .
.data:00001EC5                 db  3Fh ; ?
.data:00001EC6                 db  41h ; A
.data:00001EC7                 db  55h ; U
.data:00001EC8                 db  49h ; I
.data:00001EC9                 db  43h ; C
.data:00001ECA                 db  6Fh ; o
.data:00001ECB                 db  6Dh ; m
.data:00001ECC                 db  70h ; p
.data:00001ECD                 db  72h ; r
.data:00001ECE                 db  65h ; e
.data:00001ECF                 db  73h ; s
.data:00001ED0                 db  73h ; s
.data:00001ED1                 db  43h ; C
.data:00001ED2                 db  6Fh ; o
.data:00001ED3                 db  64h ; d
.data:00001ED4                 db  65h ; e
.data:00001ED5                 db  72h ; r
.data:00001ED6                 db  32h ; 2
.data:00001ED7                 db  40h ; @
.data:00001ED8                 db  40h ; @
.data:00001ED9                 db    0
.data:00001EDA                 align 4
.data:00001EDA _data           ends
.data:00001EDA
.rdata$r:00001EDC ; ===========================================================================
.rdata$r:00001EDC
.rdata$r:00001EDC ; Segment type: Pure data
.rdata$r:00001EDC ; Segment permissions: Read
.rdata$r:00001EDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EDC                 assume cs:_rdata$r
.rdata$r:00001EDC                 ;org 1EDCh
.rdata$r:00001EDC ; COMDAT (pick any)
.rdata$r:00001EDC                 public ??_R3ICompressCoder2@@8
.rdata$r:00001EDC ; ICompressCoder2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001EDC ??_R3ICompressCoder2@@8 db    0         ; DATA XREF: .rdata$r:00001EB8o
.rdata$r:00001EDC                                         ; .rdata$r:00002420o
.rdata$r:00001EDD                 db    0
.rdata$r:00001EDE                 db    0
.rdata$r:00001EDF                 db    0
.rdata$r:00001EE0                 db    0
.rdata$r:00001EE1                 db    0
.rdata$r:00001EE2                 db    0
.rdata$r:00001EE3                 db    0
.rdata$r:00001EE4                 db    2
.rdata$r:00001EE5                 db    0
.rdata$r:00001EE6                 db    0
.rdata$r:00001EE7                 db    0
.rdata$r:00001EE8                 dd offset ??_R2ICompressCoder2@@8 ; ICompressCoder2::`RTTI Base Class Array'
.rdata$r:00001EE8 _rdata$r        ends
.rdata$r:00001EE8
.rdata$r:00001EEC ; ===========================================================================
.rdata$r:00001EEC
.rdata$r:00001EEC ; Segment type: Pure data
.rdata$r:00001EEC ; Segment permissions: Read
.rdata$r:00001EEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EEC                 assume cs:_rdata$r
.rdata$r:00001EEC                 ;org 1EECh
.rdata$r:00001EEC ; COMDAT (pick any)
.rdata$r:00001EEC                 public ??_R2ICompressCoder2@@8
.rdata$r:00001EEC ; ICompressCoder2::`RTTI Base Class Array'
.rdata$r:00001EEC ??_R2ICompressCoder2@@8 dd offset ??_R1A@?0A@EA@ICompressCoder2@@8
.rdata$r:00001EEC                                         ; DATA XREF: .rdata$r:00001EE8o
.rdata$r:00001EEC                                         ; ICompressCoder2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001EF0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001EF4                 db    0
.rdata$r:00001EF5                 align 4
.rdata$r:00001EF5 _rdata$r        ends
.rdata$r:00001EF5
.rdata$r:00001EF8 ; ===========================================================================
.rdata$r:00001EF8
.rdata$r:00001EF8 ; Segment type: Pure data
.rdata$r:00001EF8 ; Segment permissions: Read
.rdata$r:00001EF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EF8                 assume cs:_rdata$r
.rdata$r:00001EF8                 ;org 1EF8h
.rdata$r:00001EF8 ; COMDAT (pick any)
.rdata$r:00001EF8                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001EF8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001EF8 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001EF8                                         ; DATA XREF: .rdata$r:00001EF0o
.rdata$r:00001EF8                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00001EF8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001EFC                 db    0
.rdata$r:00001EFD                 db    0
.rdata$r:00001EFE                 db    0
.rdata$r:00001EFF                 db    0
.rdata$r:00001F00                 db    0
.rdata$r:00001F01                 db    0
.rdata$r:00001F02                 db    0
.rdata$r:00001F03                 db    0
.rdata$r:00001F04                 db 0FFh
.rdata$r:00001F05                 db 0FFh
.rdata$r:00001F06                 db 0FFh
.rdata$r:00001F07                 db 0FFh
.rdata$r:00001F08                 db    0
.rdata$r:00001F09                 db    0
.rdata$r:00001F0A                 db    0
.rdata$r:00001F0B                 db    0
.rdata$r:00001F0C                 db  40h ; @
.rdata$r:00001F0D                 db    0
.rdata$r:00001F0E                 db    0
.rdata$r:00001F0F                 db    0
.rdata$r:00001F10                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F10 _rdata$r        ends
.rdata$r:00001F10
.data:00001F14 ; ===========================================================================
.data:00001F14
.data:00001F14 ; Segment type: Pure data
.data:00001F14 ; Segment permissions: Read/Write
.data:00001F14 _data           segment dword public 'DATA' use32
.data:00001F14                 assume cs:_data
.data:00001F14                 ;org 1F14h
.data:00001F14 ; COMDAT (pick any)
.data:00001F14                 public ??_R0?AUIUnknown@@@8
.data:00001F14 ; struct IUnknown `RTTI Type Descriptor'
.data:00001F14 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00001F14                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001F14                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00001F14                                         ; const type_info::`vftable'
.data:00001F18                 db    0
.data:00001F19                 db    0
.data:00001F1A                 db    0
.data:00001F1B                 db    0
.data:00001F1C                 db  2Eh ; .
.data:00001F1D                 db  3Fh ; ?
.data:00001F1E                 db  41h ; A
.data:00001F1F                 db  55h ; U
.data:00001F20                 db  49h ; I
.data:00001F21                 db  55h ; U
.data:00001F22                 db  6Eh ; n
.data:00001F23                 db  6Bh ; k
.data:00001F24                 db  6Eh ; n
.data:00001F25                 db  6Fh ; o
.data:00001F26                 db  77h ; w
.data:00001F27                 db  6Eh ; n
.data:00001F28                 db  40h ; @
.data:00001F29                 db  40h ; @
.data:00001F2A                 db    0
.data:00001F2B                 align 4
.data:00001F2B _data           ends
.data:00001F2B
.rdata$r:00001F2C ; ===========================================================================
.rdata$r:00001F2C
.rdata$r:00001F2C ; Segment type: Pure data
.rdata$r:00001F2C ; Segment permissions: Read
.rdata$r:00001F2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F2C                 assume cs:_rdata$r
.rdata$r:00001F2C                 ;org 1F2Ch
.rdata$r:00001F2C ; COMDAT (pick any)
.rdata$r:00001F2C                 public ??_R3IUnknown@@8
.rdata$r:00001F2C ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F2C ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00001F10o
.rdata$r:00001F2C                                         ; .rdata$r:00001F5Co ...
.rdata$r:00001F2D                 db    0
.rdata$r:00001F2E                 db    0
.rdata$r:00001F2F                 db    0
.rdata$r:00001F30                 db    0
.rdata$r:00001F31                 db    0
.rdata$r:00001F32                 db    0
.rdata$r:00001F33                 db    0
.rdata$r:00001F34                 db    1
.rdata$r:00001F35                 db    0
.rdata$r:00001F36                 db    0
.rdata$r:00001F37                 db    0
.rdata$r:00001F38                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001F38 _rdata$r        ends
.rdata$r:00001F38
.rdata$r:00001F3C ; ===========================================================================
.rdata$r:00001F3C
.rdata$r:00001F3C ; Segment type: Pure data
.rdata$r:00001F3C ; Segment permissions: Read
.rdata$r:00001F3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F3C                 assume cs:_rdata$r
.rdata$r:00001F3C                 ;org 1F3Ch
.rdata$r:00001F3C ; COMDAT (pick any)
.rdata$r:00001F3C                 public ??_R2IUnknown@@8
.rdata$r:00001F3C ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001F3C ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001F3C                                         ; DATA XREF: .rdata$r:00001F38o
.rdata$r:00001F3C                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F40                 db    0
.rdata$r:00001F41                 align 4
.rdata$r:00001F41 _rdata$r        ends
.rdata$r:00001F41
.rdata$r:00001F44 ; ===========================================================================
.rdata$r:00001F44
.rdata$r:00001F44 ; Segment type: Pure data
.rdata$r:00001F44 ; Segment permissions: Read
.rdata$r:00001F44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F44                 assume cs:_rdata$r
.rdata$r:00001F44                 ;org 1F44h
.rdata$r:00001F44 ; COMDAT (pick any)
.rdata$r:00001F44                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00001F44 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00001F44 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001F44                                         ; DATA XREF: .rdata$r:00001E64o
.rdata$r:00001F44                                         ; .rdata$r:000026E8o
.rdata$r:00001F44                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001F48                 align 10h
.rdata$r:00001F50                 db 0FFh
.rdata$r:00001F51                 db 0FFh
.rdata$r:00001F52                 db 0FFh
.rdata$r:00001F53                 db 0FFh
.rdata$r:00001F54                 db    0
.rdata$r:00001F55                 db    0
.rdata$r:00001F56                 db    0
.rdata$r:00001F57                 db    0
.rdata$r:00001F58                 db  42h ; B
.rdata$r:00001F59                 db    0
.rdata$r:00001F5A                 db    0
.rdata$r:00001F5B                 db    0
.rdata$r:00001F5C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F5C _rdata$r        ends
.rdata$r:00001F5C
.rdata$r:00001F60 ; ===========================================================================
.rdata$r:00001F60
.rdata$r:00001F60 ; Segment type: Pure data
.rdata$r:00001F60 ; Segment permissions: Read
.rdata$r:00001F60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F60                 assume cs:_rdata$r
.rdata$r:00001F60                 ;org 1F60h
.rdata$r:00001F60 ; COMDAT (pick any)
.rdata$r:00001F60                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00001F60 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00001F60 ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00001F60                                         ; DATA XREF: .rdata$r:00001E68o
.rdata$r:00001F60                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00001F64                 db    1
.rdata$r:00001F65                 db    0
.rdata$r:00001F66                 db    0
.rdata$r:00001F67                 db    0
.rdata$r:00001F68                 db    4
.rdata$r:00001F69                 db    0
.rdata$r:00001F6A                 db    0
.rdata$r:00001F6B                 db    0
.rdata$r:00001F6C                 db 0FFh
.rdata$r:00001F6D                 db 0FFh
.rdata$r:00001F6E                 db 0FFh
.rdata$r:00001F6F                 db 0FFh
.rdata$r:00001F70                 db    0
.rdata$r:00001F71                 db    0
.rdata$r:00001F72                 db    0
.rdata$r:00001F73                 db    0
.rdata$r:00001F74                 db  40h ; @
.rdata$r:00001F75                 db    0
.rdata$r:00001F76                 db    0
.rdata$r:00001F77                 db    0
.rdata$r:00001F78                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F78 _rdata$r        ends
.rdata$r:00001F78
.data:00001F7C ; ===========================================================================
.data:00001F7C
.data:00001F7C ; Segment type: Pure data
.data:00001F7C ; Segment permissions: Read/Write
.data:00001F7C _data           segment dword public 'DATA' use32
.data:00001F7C                 assume cs:_data
.data:00001F7C                 ;org 1F7Ch
.data:00001F7C ; COMDAT (pick any)
.data:00001F7C                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:00001F7C ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:00001F7C ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00001F7C                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00001F7C                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001F7C                                         ; const type_info::`vftable'
.data:00001F80                 db    0
.data:00001F81                 db    0
.data:00001F82                 db    0
.data:00001F83                 db    0
.data:00001F84                 db  2Eh ; .
.data:00001F85                 db  3Fh ; ?
.data:00001F86                 db  41h ; A
.data:00001F87                 db  55h ; U
.data:00001F88                 db  49h ; I
.data:00001F89                 db  43h ; C
.data:00001F8A                 db  6Fh ; o
.data:00001F8B                 db  6Dh ; m
.data:00001F8C                 db  70h ; p
.data:00001F8D                 db  72h ; r
.data:00001F8E                 db  65h ; e
.data:00001F8F                 db  73h ; s
.data:00001F90                 db  73h ; s
.data:00001F91                 db  53h ; S
.data:00001F92                 db  65h ; e
.data:00001F93                 db  74h ; t
.data:00001F94                 db  43h ; C
.data:00001F95                 db  6Fh ; o
.data:00001F96                 db  64h ; d
.data:00001F97                 db  65h ; e
.data:00001F98                 db  72h ; r
.data:00001F99                 db  50h ; P
.data:00001F9A                 db  72h ; r
.data:00001F9B                 db  6Fh ; o
.data:00001F9C                 db  70h ; p
.data:00001F9D                 db  65h ; e
.data:00001F9E                 db  72h ; r
.data:00001F9F                 db  74h ; t
.data:00001FA0                 db  69h ; i
.data:00001FA1                 db  65h ; e
.data:00001FA2                 db  73h ; s
.data:00001FA3                 db  40h ; @
.data:00001FA4                 db  40h ; @
.data:00001FA5                 db    0
.data:00001FA6                 align 4
.data:00001FA6 _data           ends
.data:00001FA6
.rdata$r:00001FA8 ; ===========================================================================
.rdata$r:00001FA8
.rdata$r:00001FA8 ; Segment type: Pure data
.rdata$r:00001FA8 ; Segment permissions: Read
.rdata$r:00001FA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FA8                 assume cs:_rdata$r
.rdata$r:00001FA8                 ;org 1FA8h
.rdata$r:00001FA8 ; COMDAT (pick any)
.rdata$r:00001FA8                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:00001FA8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FA8 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:00001FA8                                         ; DATA XREF: .rdata$r:00001F78o
.rdata$r:00001FA8                                         ; .rdata$r:00001FDCo ...
.rdata$r:00001FA9                 db    0
.rdata$r:00001FAA                 db    0
.rdata$r:00001FAB                 db    0
.rdata$r:00001FAC                 db    0
.rdata$r:00001FAD                 db    0
.rdata$r:00001FAE                 db    0
.rdata$r:00001FAF                 db    0
.rdata$r:00001FB0                 db    2
.rdata$r:00001FB1                 db    0
.rdata$r:00001FB2                 db    0
.rdata$r:00001FB3                 db    0
.rdata$r:00001FB4                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00001FB4 _rdata$r        ends
.rdata$r:00001FB4
.rdata$r:00001FB8 ; ===========================================================================
.rdata$r:00001FB8
.rdata$r:00001FB8 ; Segment type: Pure data
.rdata$r:00001FB8 ; Segment permissions: Read
.rdata$r:00001FB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FB8                 assume cs:_rdata$r
.rdata$r:00001FB8                 ;org 1FB8h
.rdata$r:00001FB8 ; COMDAT (pick any)
.rdata$r:00001FB8                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00001FB8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00001FB8 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00001FB8                                         ; DATA XREF: .rdata$r:00001FB4o
.rdata$r:00001FB8                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001FBC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001FC0                 db    0
.rdata$r:00001FC1                 align 4
.rdata$r:00001FC1 _rdata$r        ends
.rdata$r:00001FC1
.rdata$r:00001FC4 ; ===========================================================================
.rdata$r:00001FC4
.rdata$r:00001FC4 ; Segment type: Pure data
.rdata$r:00001FC4 ; Segment permissions: Read
.rdata$r:00001FC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FC4                 assume cs:_rdata$r
.rdata$r:00001FC4                 ;org 1FC4h
.rdata$r:00001FC4 ; COMDAT (pick any)
.rdata$r:00001FC4                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00001FC4 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001FC4 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00001FC4                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:00001FC4                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00001FC8                 db    1
.rdata$r:00001FC9                 db    0
.rdata$r:00001FCA                 db    0
.rdata$r:00001FCB                 db    0
.rdata$r:00001FCC                 db    0
.rdata$r:00001FCD                 db    0
.rdata$r:00001FCE                 db    0
.rdata$r:00001FCF                 db    0
.rdata$r:00001FD0                 db 0FFh
.rdata$r:00001FD1                 db 0FFh
.rdata$r:00001FD2                 db 0FFh
.rdata$r:00001FD3                 db 0FFh
.rdata$r:00001FD4                 db    0
.rdata$r:00001FD5                 db    0
.rdata$r:00001FD6                 db    0
.rdata$r:00001FD7                 db    0
.rdata$r:00001FD8                 db  40h ; @
.rdata$r:00001FD9                 db    0
.rdata$r:00001FDA                 db    0
.rdata$r:00001FDB                 db    0
.rdata$r:00001FDC                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FDC _rdata$r        ends
.rdata$r:00001FDC
.rdata$r:00001FE0 ; ===========================================================================
.rdata$r:00001FE0
.rdata$r:00001FE0 ; Segment type: Pure data
.rdata$r:00001FE0 ; Segment permissions: Read
.rdata$r:00001FE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FE0                 assume cs:_rdata$r
.rdata$r:00001FE0                 ;org 1FE0h
.rdata$r:00001FE0 ; COMDAT (pick any)
.rdata$r:00001FE0                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00001FE0 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00001FE0 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001FE0                                         ; DATA XREF: .rdata$r:00001E6Co
.rdata$r:00001FE0                                         ; .rdata$r:000026F0o
.rdata$r:00001FE0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001FE4                 align 8
.rdata$r:00001FE8                 db    4
.rdata$r:00001FE9                 db    0
.rdata$r:00001FEA                 db    0
.rdata$r:00001FEB                 db    0
.rdata$r:00001FEC                 db 0FFh
.rdata$r:00001FED                 db 0FFh
.rdata$r:00001FEE                 db 0FFh
.rdata$r:00001FEF                 db 0FFh
.rdata$r:00001FF0                 db    0
.rdata$r:00001FF1                 db    0
.rdata$r:00001FF2                 db    0
.rdata$r:00001FF3                 db    0
.rdata$r:00001FF4                 db  42h ; B
.rdata$r:00001FF5                 db    0
.rdata$r:00001FF6                 db    0
.rdata$r:00001FF7                 db    0
.rdata$r:00001FF8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FF8 _rdata$r        ends
.rdata$r:00001FF8
.rdata$r:00001FFC ; ===========================================================================
.rdata$r:00001FFC
.rdata$r:00001FFC ; Segment type: Pure data
.rdata$r:00001FFC ; Segment permissions: Read
.rdata$r:00001FFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FFC                 assume cs:_rdata$r
.rdata$r:00001FFC                 ;org 1FFCh
.rdata$r:00001FFC ; COMDAT (pick any)
.rdata$r:00001FFC                 public ??_R17?0A@EA@ICompressSetBufSize@@8
.rdata$r:00001FFC ; ICompressSetBufSize::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00001FFC ??_R17?0A@EA@ICompressSetBufSize@@8 dd offset ??_R0?AUICompressSetBufSize@@@8
.rdata$r:00001FFC                                         ; DATA XREF: .rdata$r:00001E70o
.rdata$r:00001FFC                                         ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:00002000                 db    1
.rdata$r:00002001                 db    0
.rdata$r:00002002                 db    0
.rdata$r:00002003                 db    0
.rdata$r:00002004                 db    8
.rdata$r:00002005                 db    0
.rdata$r:00002006                 db    0
.rdata$r:00002007                 db    0
.rdata$r:00002008                 db 0FFh
.rdata$r:00002009                 db 0FFh
.rdata$r:0000200A                 db 0FFh
.rdata$r:0000200B                 db 0FFh
.rdata$r:0000200C                 db    0
.rdata$r:0000200D                 db    0
.rdata$r:0000200E                 db    0
.rdata$r:0000200F                 db    0
.rdata$r:00002010                 db  40h ; @
.rdata$r:00002011                 db    0
.rdata$r:00002012                 db    0
.rdata$r:00002013                 db    0
.rdata$r:00002014                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002014 _rdata$r        ends
.rdata$r:00002014
.data:00002018 ; ===========================================================================
.data:00002018
.data:00002018 ; Segment type: Pure data
.data:00002018 ; Segment permissions: Read/Write
.data:00002018 _data           segment dword public 'DATA' use32
.data:00002018                 assume cs:_data
.data:00002018                 ;org 2018h
.data:00002018 ; COMDAT (pick any)
.data:00002018                 public ??_R0?AUICompressSetBufSize@@@8
.data:00002018 ; struct ICompressSetBufSize `RTTI Type Descriptor'
.data:00002018 ??_R0?AUICompressSetBufSize@@@8 dd offset ??_7type_info@@6B@
.data:00002018                                         ; DATA XREF: .rdata$r:ICompressSetBufSize::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00002018                                         ; .rdata$r:ICompressSetBufSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002018                                         ; const type_info::`vftable'
.data:0000201C                 align 10h
.data:00002020 a_?auicompresss db '.?AUICompressSetBufSize@@',0
.data:0000203A                 align 4
.data:0000203A _data           ends
.data:0000203A
.rdata$r:0000203C ; ===========================================================================
.rdata$r:0000203C
.rdata$r:0000203C ; Segment type: Pure data
.rdata$r:0000203C ; Segment permissions: Read
.rdata$r:0000203C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000203C                 assume cs:_rdata$r
.rdata$r:0000203C                 ;org 203Ch
.rdata$r:0000203C ; COMDAT (pick any)
.rdata$r:0000203C                 public ??_R3ICompressSetBufSize@@8
.rdata$r:0000203C ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000203C ??_R3ICompressSetBufSize@@8 db    0     ; DATA XREF: .rdata$r:00002014o
.rdata$r:0000203C                                         ; .rdata$r:00002070o ...
.rdata$r:0000203D                 db    0
.rdata$r:0000203E                 db    0
.rdata$r:0000203F                 db    0
.rdata$r:00002040                 db    0
.rdata$r:00002041                 db    0
.rdata$r:00002042                 db    0
.rdata$r:00002043                 db    0
.rdata$r:00002044                 db    2
.rdata$r:00002045                 db    0
.rdata$r:00002046                 db    0
.rdata$r:00002047                 db    0
.rdata$r:00002048                 dd offset ??_R2ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Base Class Array'
.rdata$r:00002048 _rdata$r        ends
.rdata$r:00002048
.rdata$r:0000204C ; ===========================================================================
.rdata$r:0000204C
.rdata$r:0000204C ; Segment type: Pure data
.rdata$r:0000204C ; Segment permissions: Read
.rdata$r:0000204C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000204C                 assume cs:_rdata$r
.rdata$r:0000204C                 ;org 204Ch
.rdata$r:0000204C ; COMDAT (pick any)
.rdata$r:0000204C                 public ??_R2ICompressSetBufSize@@8
.rdata$r:0000204C ; ICompressSetBufSize::`RTTI Base Class Array'
.rdata$r:0000204C ??_R2ICompressSetBufSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetBufSize@@8
.rdata$r:0000204C                                         ; DATA XREF: .rdata$r:00002048o
.rdata$r:0000204C                                         ; ICompressSetBufSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002050                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002054                 db    0
.rdata$r:00002055                 align 4
.rdata$r:00002055 _rdata$r        ends
.rdata$r:00002055
.rdata$r:00002058 ; ===========================================================================
.rdata$r:00002058
.rdata$r:00002058 ; Segment type: Pure data
.rdata$r:00002058 ; Segment permissions: Read
.rdata$r:00002058 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002058                 assume cs:_rdata$r
.rdata$r:00002058                 ;org 2058h
.rdata$r:00002058 ; COMDAT (pick any)
.rdata$r:00002058                 public ??_R1A@?0A@EA@ICompressSetBufSize@@8
.rdata$r:00002058 ; ICompressSetBufSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002058 ??_R1A@?0A@EA@ICompressSetBufSize@@8 dd offset ??_R0?AUICompressSetBufSize@@@8
.rdata$r:00002058                                         ; DATA XREF: .rdata$r:ICompressSetBufSize::`RTTI Base Class Array'o
.rdata$r:00002058                                         ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:0000205C                 db    1
.rdata$r:0000205D                 db    0
.rdata$r:0000205E                 db    0
.rdata$r:0000205F                 db    0
.rdata$r:00002060                 db    0
.rdata$r:00002061                 db    0
.rdata$r:00002062                 db    0
.rdata$r:00002063                 db    0
.rdata$r:00002064                 db 0FFh
.rdata$r:00002065                 db 0FFh
.rdata$r:00002066                 db 0FFh
.rdata$r:00002067                 db 0FFh
.rdata$r:00002068                 db    0
.rdata$r:00002069                 db    0
.rdata$r:0000206A                 db    0
.rdata$r:0000206B                 db    0
.rdata$r:0000206C                 db  40h ; @
.rdata$r:0000206D                 db    0
.rdata$r:0000206E                 db    0
.rdata$r:0000206F                 db    0
.rdata$r:00002070                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002070 _rdata$r        ends
.rdata$r:00002070
.rdata$r:00002074 ; ===========================================================================
.rdata$r:00002074
.rdata$r:00002074 ; Segment type: Pure data
.rdata$r:00002074 ; Segment permissions: Read
.rdata$r:00002074 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002074                 assume cs:_rdata$r
.rdata$r:00002074                 ;org 2074h
.rdata$r:00002074 ; COMDAT (pick any)
.rdata$r:00002074                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00002074 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00002074 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002074                                         ; DATA XREF: .rdata$r:00001E74o
.rdata$r:00002074                                         ; .rdata$r:000026F8o
.rdata$r:00002074                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002078                 db    0
.rdata$r:00002079                 db    0
.rdata$r:0000207A                 db    0
.rdata$r:0000207B                 db    0
.rdata$r:0000207C                 db    8
.rdata$r:0000207D                 db    0
.rdata$r:0000207E                 db    0
.rdata$r:0000207F                 db    0
.rdata$r:00002080                 db 0FFh
.rdata$r:00002081                 db 0FFh
.rdata$r:00002082                 db 0FFh
.rdata$r:00002083                 db 0FFh
.rdata$r:00002084                 db    0
.rdata$r:00002085                 db    0
.rdata$r:00002086                 db    0
.rdata$r:00002087                 db    0
.rdata$r:00002088                 db  42h ; B
.rdata$r:00002089                 db    0
.rdata$r:0000208A                 db    0
.rdata$r:0000208B                 db    0
.rdata$r:0000208C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000208C _rdata$r        ends
.rdata$r:0000208C
.rdata$r:00002090 ; ===========================================================================
.rdata$r:00002090
.rdata$r:00002090 ; Segment type: Pure data
.rdata$r:00002090 ; Segment permissions: Read
.rdata$r:00002090 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002090                 assume cs:_rdata$r
.rdata$r:00002090                 ;org 2090h
.rdata$r:00002090 ; COMDAT (pick any)
.rdata$r:00002090                 public ??_R1M@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002090 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00002090 ??_R1M@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002090                                         ; DATA XREF: .rdata$r:00001E78o
.rdata$r:00002090                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002094                 align 8
.rdata$r:00002098                 db  0Ch
.rdata$r:00002099                 db    0
.rdata$r:0000209A                 db    0
.rdata$r:0000209B                 db    0
.rdata$r:0000209C                 db 0FFh
.rdata$r:0000209D                 db 0FFh
.rdata$r:0000209E                 db 0FFh
.rdata$r:0000209F                 db 0FFh
.rdata$r:000020A0                 db    0
.rdata$r:000020A1                 db    0
.rdata$r:000020A2                 db    0
.rdata$r:000020A3                 db    0
.rdata$r:000020A4                 db  40h ; @
.rdata$r:000020A5                 db    0
.rdata$r:000020A6                 db    0
.rdata$r:000020A7                 db    0
.rdata$r:000020A8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000020A8 _rdata$r        ends
.rdata$r:000020A8
.data:000020AC ; ===========================================================================
.data:000020AC
.data:000020AC ; Segment type: Pure data
.data:000020AC ; Segment permissions: Read/Write
.data:000020AC _data           segment dword public 'DATA' use32
.data:000020AC                 assume cs:_data
.data:000020AC                 ;org 20ACh
.data:000020AC ; COMDAT (pick any)
.data:000020AC                 public ??_R0?AVCMyUnknownImp@@@8
.data:000020AC ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000020AC ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000020AC                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:000020AC                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000020AC                                         ; const type_info::`vftable'
.data:000020B0                 db    0
.data:000020B1                 db    0
.data:000020B2                 db    0
.data:000020B3                 db    0
.data:000020B4                 db  2Eh ; .
.data:000020B5                 db  3Fh ; ?
.data:000020B6                 db  41h ; A
.data:000020B7                 db  56h ; V
.data:000020B8                 db  43h ; C
.data:000020B9                 db  4Dh ; M
.data:000020BA                 db  79h ; y
.data:000020BB                 db  55h ; U
.data:000020BC                 db  6Eh ; n
.data:000020BD                 db  6Bh ; k
.data:000020BE                 db  6Eh ; n
.data:000020BF                 db  6Fh ; o
.data:000020C0                 db  77h ; w
.data:000020C1                 db  6Eh ; n
.data:000020C2                 db  49h ; I
.data:000020C3                 db  6Dh ; m
.data:000020C4                 db  70h ; p
.data:000020C5                 db  40h ; @
.data:000020C6                 db  40h ; @
.data:000020C7                 db    0
.data:000020C7 _data           ends
.data:000020C7
.rdata$r:000020C8 ; ===========================================================================
.rdata$r:000020C8
.rdata$r:000020C8 ; Segment type: Pure data
.rdata$r:000020C8 ; Segment permissions: Read
.rdata$r:000020C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020C8                 assume cs:_rdata$r
.rdata$r:000020C8                 ;org 20C8h
.rdata$r:000020C8 ; COMDAT (pick any)
.rdata$r:000020C8                 public ??_R3CMyUnknownImp@@8
.rdata$r:000020C8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000020C8 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000020A8o
.rdata$r:000020C8                                         ; .rdata$r:000020F8o ...
.rdata$r:000020C9                 db    0
.rdata$r:000020CA                 db    0
.rdata$r:000020CB                 db    0
.rdata$r:000020CC                 db    0
.rdata$r:000020CD                 db    0
.rdata$r:000020CE                 db    0
.rdata$r:000020CF                 db    0
.rdata$r:000020D0                 db    1
.rdata$r:000020D1                 db    0
.rdata$r:000020D2                 db    0
.rdata$r:000020D3                 db    0
.rdata$r:000020D4                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000020D4 _rdata$r        ends
.rdata$r:000020D4
.rdata$r:000020D8 ; ===========================================================================
.rdata$r:000020D8
.rdata$r:000020D8 ; Segment type: Pure data
.rdata$r:000020D8 ; Segment permissions: Read
.rdata$r:000020D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020D8                 assume cs:_rdata$r
.rdata$r:000020D8                 ;org 20D8h
.rdata$r:000020D8 ; COMDAT (pick any)
.rdata$r:000020D8                 public ??_R2CMyUnknownImp@@8
.rdata$r:000020D8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000020D8 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000020D8                                         ; DATA XREF: .rdata$r:000020D4o
.rdata$r:000020D8                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000020DC                 db    0
.rdata$r:000020DD                 align 10h
.rdata$r:000020DD _rdata$r        ends
.rdata$r:000020DD
.rdata$r:000020E0 ; ===========================================================================
.rdata$r:000020E0
.rdata$r:000020E0 ; Segment type: Pure data
.rdata$r:000020E0 ; Segment permissions: Read
.rdata$r:000020E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020E0                 assume cs:_rdata$r
.rdata$r:000020E0                 ;org 20E0h
.rdata$r:000020E0 ; COMDAT (pick any)
.rdata$r:000020E0                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000020E0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000020E0 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000020E0                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000020E0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000020E4                 db    0
.rdata$r:000020E5                 db    0
.rdata$r:000020E6                 db    0
.rdata$r:000020E7                 db    0
.rdata$r:000020E8                 db    0
.rdata$r:000020E9                 db    0
.rdata$r:000020EA                 db    0
.rdata$r:000020EB                 db    0
.rdata$r:000020EC                 db 0FFh
.rdata$r:000020ED                 db 0FFh
.rdata$r:000020EE                 db 0FFh
.rdata$r:000020EF                 db 0FFh
.rdata$r:000020F0                 db    0
.rdata$r:000020F1                 db    0
.rdata$r:000020F2                 db    0
.rdata$r:000020F3                 db    0
.rdata$r:000020F4                 db  40h ; @
.rdata$r:000020F5                 db    0
.rdata$r:000020F6                 db    0
.rdata$r:000020F7                 db    0
.rdata$r:000020F8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000020F8 _rdata$r        ends
.rdata$r:000020F8
.rdata$r:000020FC ; ===========================================================================
.rdata$r:000020FC
.rdata$r:000020FC ; Segment type: Pure data
.rdata$r:000020FC ; Segment permissions: Read
.rdata$r:000020FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020FC                 assume cs:_rdata$r
.rdata$r:000020FC                 ;org 20FCh
.rdata$r:000020FC ; COMDAT (pick any)
.rdata$r:000020FC                 public ??_R1BA@?0A@EA@CBaseCoder@NBcj2@NCompress@@8
.rdata$r:000020FC ; NCompress::NBcj2::CBaseCoder::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000020FC ??_R1BA@?0A@EA@CBaseCoder@NBcj2@NCompress@@8 dd offset ??_R0?AVCBaseCoder@NBcj2@NCompress@@@8
.rdata$r:000020FC                                         ; DATA XREF: .rdata$r:00001E7Co
.rdata$r:000020FC                                         ; NCompress::NBcj2::CBaseCoder `RTTI Type Descriptor'
.rdata$r:00002100                 db    0
.rdata$r:00002101                 db    0
.rdata$r:00002102                 db    0
.rdata$r:00002103                 db    0
.rdata$r:00002104                 db  10h
.rdata$r:00002105                 db    0
.rdata$r:00002106                 db    0
.rdata$r:00002107                 db    0
.rdata$r:00002108                 db 0FFh
.rdata$r:00002109                 db 0FFh
.rdata$r:0000210A                 db 0FFh
.rdata$r:0000210B                 db 0FFh
.rdata$r:0000210C                 db    0
.rdata$r:0000210D                 db    0
.rdata$r:0000210E                 db    0
.rdata$r:0000210F                 db    0
.rdata$r:00002110                 db  40h ; @
.rdata$r:00002111                 db    0
.rdata$r:00002112                 db    0
.rdata$r:00002113                 db    0
.rdata$r:00002114                 dd offset ??_R3CBaseCoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002114 _rdata$r        ends
.rdata$r:00002114
.data:00002118 ; ===========================================================================
.data:00002118
.data:00002118 ; Segment type: Pure data
.data:00002118 ; Segment permissions: Read/Write
.data:00002118 _data           segment dword public 'DATA' use32
.data:00002118                 assume cs:_data
.data:00002118                 ;org 2118h
.data:00002118 ; COMDAT (pick any)
.data:00002118                 public ??_R0?AVCBaseCoder@NBcj2@NCompress@@@8
.data:00002118 ; class NCompress::NBcj2::CBaseCoder `RTTI Type Descriptor'
.data:00002118 ??_R0?AVCBaseCoder@NBcj2@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00002118                                         ; DATA XREF: .rdata$r:NCompress::NBcj2::CBaseCoder::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00002118                                         ; .rdata$r:NCompress::NBcj2::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002118                                         ; const type_info::`vftable'
.data:0000211C                 align 10h
.data:00002120 a_?avcbasecoder db '.?AVCBaseCoder@NBcj2@NCompress@@',0
.data:00002141                 align 4
.data:00002141 _data           ends
.data:00002141
.rdata$r:00002144 ; ===========================================================================
.rdata$r:00002144
.rdata$r:00002144 ; Segment type: Pure data
.rdata$r:00002144 ; Segment permissions: Read
.rdata$r:00002144 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002144                 assume cs:_rdata$r
.rdata$r:00002144                 ;org 2144h
.rdata$r:00002144 ; COMDAT (pick any)
.rdata$r:00002144                 public ??_R3CBaseCoder@NBcj2@NCompress@@8
.rdata$r:00002144 ; NCompress::NBcj2::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002144 ??_R3CBaseCoder@NBcj2@NCompress@@8 db    0 ; DATA XREF: .rdata$r:00002114o
.rdata$r:00002144                                         ; .rdata$r:00002174o ...
.rdata$r:00002145                 db    0
.rdata$r:00002146                 db    0
.rdata$r:00002147                 db    0
.rdata$r:00002148                 db    0
.rdata$r:00002149                 db    0
.rdata$r:0000214A                 db    0
.rdata$r:0000214B                 db    0
.rdata$r:0000214C                 db    1
.rdata$r:0000214D                 db    0
.rdata$r:0000214E                 db    0
.rdata$r:0000214F                 db    0
.rdata$r:00002150                 dd offset ??_R2CBaseCoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CBaseCoder::`RTTI Base Class Array'
.rdata$r:00002150 _rdata$r        ends
.rdata$r:00002150
.rdata$r:00002154 ; ===========================================================================
.rdata$r:00002154
.rdata$r:00002154 ; Segment type: Pure data
.rdata$r:00002154 ; Segment permissions: Read
.rdata$r:00002154 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002154                 assume cs:_rdata$r
.rdata$r:00002154                 ;org 2154h
.rdata$r:00002154 ; COMDAT (pick any)
.rdata$r:00002154                 public ??_R2CBaseCoder@NBcj2@NCompress@@8
.rdata$r:00002154 ; NCompress::NBcj2::CBaseCoder::`RTTI Base Class Array'
.rdata$r:00002154 ??_R2CBaseCoder@NBcj2@NCompress@@8 dd offset ??_R1A@?0A@EA@CBaseCoder@NBcj2@NCompress@@8
.rdata$r:00002154                                         ; DATA XREF: .rdata$r:00002150o
.rdata$r:00002154                                         ; NCompress::NBcj2::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002158                 db    0
.rdata$r:00002159                 align 4
.rdata$r:00002159 _rdata$r        ends
.rdata$r:00002159
.rdata$r:0000215C ; ===========================================================================
.rdata$r:0000215C
.rdata$r:0000215C ; Segment type: Pure data
.rdata$r:0000215C ; Segment permissions: Read
.rdata$r:0000215C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000215C                 assume cs:_rdata$r
.rdata$r:0000215C                 ;org 215Ch
.rdata$r:0000215C ; COMDAT (pick any)
.rdata$r:0000215C                 public ??_R1A@?0A@EA@CBaseCoder@NBcj2@NCompress@@8
.rdata$r:0000215C ; NCompress::NBcj2::CBaseCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000215C ??_R1A@?0A@EA@CBaseCoder@NBcj2@NCompress@@8 dd offset ??_R0?AVCBaseCoder@NBcj2@NCompress@@@8
.rdata$r:0000215C                                         ; DATA XREF: .rdata$r:NCompress::NBcj2::CBaseCoder::`RTTI Base Class Array'o
.rdata$r:0000215C                                         ; NCompress::NBcj2::CBaseCoder `RTTI Type Descriptor'
.rdata$r:00002160                 db    0
.rdata$r:00002161                 db    0
.rdata$r:00002162                 db    0
.rdata$r:00002163                 db    0
.rdata$r:00002164                 db    0
.rdata$r:00002165                 db    0
.rdata$r:00002166                 db    0
.rdata$r:00002167                 db    0
.rdata$r:00002168                 db 0FFh
.rdata$r:00002169                 db 0FFh
.rdata$r:0000216A                 db 0FFh
.rdata$r:0000216B                 db 0FFh
.rdata$r:0000216C                 db    0
.rdata$r:0000216D                 db    0
.rdata$r:0000216E                 db    0
.rdata$r:0000216F                 db    0
.rdata$r:00002170                 db  40h ; @
.rdata$r:00002171                 db    0
.rdata$r:00002172                 db    0
.rdata$r:00002173                 db    0
.rdata$r:00002174                 dd offset ??_R3CBaseCoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002174 _rdata$r        ends
.rdata$r:00002174
.rdata$r:00002178 ; ===========================================================================
.rdata$r:00002178
.rdata$r:00002178 ; Segment type: Pure data
.rdata$r:00002178 ; Segment permissions: Read
.rdata$r:00002178 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002178                 assume cs:_rdata$r
.rdata$r:00002178                 ;org 2178h
.rdata$r:00002178 ; COMDAT (pick any)
.rdata$r:00002178                 public ??_R4CEncoder@NBcj2@NCompress@@6BICompressSetCoderProperties@@@
.rdata$r:00002178 ; const NCompress::NBcj2::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00002178 ??_R4CEncoder@NBcj2@NCompress@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00002178                                         ; DATA XREF: .rdata:00001DE8o
.rdata$r:00002179                 db    0
.rdata$r:0000217A                 db    0
.rdata$r:0000217B                 db    0
.rdata$r:0000217C                 db    4
.rdata$r:0000217D                 db    0
.rdata$r:0000217E                 db    0
.rdata$r:0000217F                 db    0
.rdata$r:00002180                 db    0
.rdata$r:00002181                 db    0
.rdata$r:00002182                 db    0
.rdata$r:00002183                 db    0
.rdata$r:00002184                 dd offset ??_R0?AVCEncoder@NBcj2@NCompress@@@8 ; NCompress::NBcj2::CEncoder `RTTI Type Descriptor'
.rdata$r:00002188                 dd offset ??_R3CEncoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002188 _rdata$r        ends
.rdata$r:00002188
.rdata$r:0000218C ; ===========================================================================
.rdata$r:0000218C
.rdata$r:0000218C ; Segment type: Pure data
.rdata$r:0000218C ; Segment permissions: Read
.rdata$r:0000218C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000218C                 assume cs:_rdata$r
.rdata$r:0000218C                 ;org 218Ch
.rdata$r:0000218C ; COMDAT (pick any)
.rdata$r:0000218C                 public ??_R4CEncoder@NBcj2@NCompress@@6BICompressSetBufSize@@@
.rdata$r:0000218C ; const NCompress::NBcj2::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetBufSize'}
.rdata$r:0000218C ??_R4CEncoder@NBcj2@NCompress@@6BICompressSetBufSize@@@ db    0
.rdata$r:0000218C                                         ; DATA XREF: .rdata:00001DD0o
.rdata$r:0000218D                 db    0
.rdata$r:0000218E                 db    0
.rdata$r:0000218F                 db    0
.rdata$r:00002190                 db    8
.rdata$r:00002191                 db    0
.rdata$r:00002192                 db    0
.rdata$r:00002193                 db    0
.rdata$r:00002194                 db    0
.rdata$r:00002195                 db    0
.rdata$r:00002196                 db    0
.rdata$r:00002197                 db    0
.rdata$r:00002198                 dd offset ??_R0?AVCEncoder@NBcj2@NCompress@@@8 ; NCompress::NBcj2::CEncoder `RTTI Type Descriptor'
.rdata$r:0000219C                 dd offset ??_R3CEncoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000219C _rdata$r        ends
.rdata$r:0000219C
.text:000021A0 ; ===========================================================================
.text:000021A0
.text:000021A0 ; Segment type: Pure code
.text:000021A0 ; Segment permissions: Read/Execute
.text:000021A0 _text           segment para public 'CODE' use32
.text:000021A0                 assume cs:_text
.text:000021A0                 ;org 21A0h
.text:000021A0 ; COMDAT (pick any)
.text:000021A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000021A0
.text:000021A0 ; =============== S U B R O U T I N E =======================================
.text:000021A0
.text:000021A0 ; Attributes: bp-based frame
.text:000021A0
.text:000021A0 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000021A0                 public ??0CMyUnknownImp@@QAE@XZ
.text:000021A0 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NBcj2::CEncoder::CEncoder(void)+32p
.text:000021A0                                         ; NCompress::NBcj2::CDecoder::CDecoder(void)+72p
.text:000021A0
.text:000021A0 var_4           = dword ptr -4
.text:000021A0
.text:000021A0                 push    ebp
.text:000021A1                 mov     ebp, esp
.text:000021A3                 push    ecx
.text:000021A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021AB                 mov     [ebp+var_4], ecx
.text:000021AE                 mov     eax, [ebp+var_4]
.text:000021B1                 mov     dword ptr [eax], 0
.text:000021B7                 mov     eax, [ebp+var_4]
.text:000021BA                 mov     esp, ebp
.text:000021BC                 pop     ebp
.text:000021BD                 retn
.text:000021BD ??0CMyUnknownImp@@QAE@XZ endp
.text:000021BD
.text:000021BD ; ---------------------------------------------------------------------------
.text:000021BE                 align 10h
.text:000021BE _text           ends
.text:000021BE
.text:000021C0 ; ===========================================================================
.text:000021C0
.text:000021C0 ; Segment type: Pure code
.text:000021C0 ; Segment permissions: Read/Execute
.text:000021C0 _text           segment para public 'CODE' use32
.text:000021C0                 assume cs:_text
.text:000021C0                 ;org 21C0h
.text:000021C0 ; COMDAT (pick any)
.text:000021C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000021C0
.text:000021C0 ; =============== S U B R O U T I N E =======================================
.text:000021C0
.text:000021C0 ; Attributes: bp-based frame
.text:000021C0
.text:000021C0 ; __int32 __stdcall NCompress::NBcj2::CEncoder::QueryInterface(NCompress::NBcj2::CEncoder *this, const struct _GUID *Buf1, void **)
.text:000021C0                 public ?QueryInterface@CEncoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:000021C0 ?QueryInterface@CEncoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000021C0                                         ; CODE XREF: [thunk]:NCompress::NBcj2::CEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:000021C0                                         ; [thunk]:NCompress::NBcj2::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:000021C0                                         ; DATA XREF: ...
.text:000021C0
.text:000021C0 var_8           = dword ptr -8
.text:000021C0 var_4           = dword ptr -4
.text:000021C0 this            = dword ptr  8
.text:000021C0 Buf1            = dword ptr  0Ch
.text:000021C0 arg_8           = dword ptr  10h
.text:000021C0
.text:000021C0                 push    ebp
.text:000021C1                 mov     ebp, esp
.text:000021C3                 sub     esp, 8
.text:000021C6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000021CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021D4                 mov     eax, [ebp+arg_8]
.text:000021D7                 mov     dword ptr [eax], 0
.text:000021DD                 push    offset _IID_IUnknown ; Buf2
.text:000021E2                 mov     ecx, [ebp+Buf1]
.text:000021E5                 push    ecx             ; Buf1
.text:000021E6                 call    ___@8           ; __(x,x)
.text:000021EB                 test    eax, eax
.text:000021ED                 jz      short loc_21FC
.text:000021EF                 mov     edx, [ebp+arg_8]
.text:000021F2                 mov     eax, [ebp+this]
.text:000021F5                 mov     [edx], eax
.text:000021F7                 jmp     loc_2287
.text:000021FC ; ---------------------------------------------------------------------------
.text:000021FC
.text:000021FC loc_21FC:                               ; CODE XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:000021FC                 push    offset _IID_ICompressCoder2 ; Buf2
.text:00002201                 mov     ecx, [ebp+Buf1]
.text:00002204                 push    ecx             ; Buf1
.text:00002205                 call    ___@8           ; __(x,x)
.text:0000220A                 test    eax, eax
.text:0000220C                 jz      short loc_2218
.text:0000220E                 mov     edx, [ebp+arg_8]
.text:00002211                 mov     eax, [ebp+this]
.text:00002214                 mov     [edx], eax
.text:00002216                 jmp     short loc_2287
.text:00002218 ; ---------------------------------------------------------------------------
.text:00002218
.text:00002218 loc_2218:                               ; CODE XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+4Cj
.text:00002218                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:0000221D                 mov     ecx, [ebp+Buf1]
.text:00002220                 push    ecx             ; Buf1
.text:00002221                 call    ___@8           ; __(x,x)
.text:00002226                 test    eax, eax
.text:00002228                 jz      short loc_224C
.text:0000222A                 cmp     [ebp+this], 0
.text:0000222E                 jz      short loc_223B
.text:00002230                 mov     edx, [ebp+this]
.text:00002233                 add     edx, 4
.text:00002236                 mov     [ebp+var_4], edx
.text:00002239                 jmp     short loc_2242
.text:0000223B ; ---------------------------------------------------------------------------
.text:0000223B
.text:0000223B loc_223B:                               ; CODE XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:0000223B                 mov     [ebp+var_4], 0
.text:00002242
.text:00002242 loc_2242:                               ; CODE XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+79j
.text:00002242                 mov     eax, [ebp+arg_8]
.text:00002245                 mov     ecx, [ebp+var_4]
.text:00002248                 mov     [eax], ecx
.text:0000224A                 jmp     short loc_2287
.text:0000224C ; ---------------------------------------------------------------------------
.text:0000224C
.text:0000224C loc_224C:                               ; CODE XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+68j
.text:0000224C                 push    offset _IID_ICompressSetBufSize ; Buf2
.text:00002251                 mov     edx, [ebp+Buf1]
.text:00002254                 push    edx             ; Buf1
.text:00002255                 call    ___@8           ; __(x,x)
.text:0000225A                 test    eax, eax
.text:0000225C                 jz      short loc_2280
.text:0000225E                 cmp     [ebp+this], 0
.text:00002262                 jz      short loc_226F
.text:00002264                 mov     eax, [ebp+this]
.text:00002267                 add     eax, 8
.text:0000226A                 mov     [ebp+var_8], eax
.text:0000226D                 jmp     short loc_2276
.text:0000226F ; ---------------------------------------------------------------------------
.text:0000226F
.text:0000226F loc_226F:                               ; CODE XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+A2j
.text:0000226F                 mov     [ebp+var_8], 0
.text:00002276
.text:00002276 loc_2276:                               ; CODE XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+ADj
.text:00002276                 mov     ecx, [ebp+arg_8]
.text:00002279                 mov     edx, [ebp+var_8]
.text:0000227C                 mov     [ecx], edx
.text:0000227E                 jmp     short loc_2287
.text:00002280 ; ---------------------------------------------------------------------------
.text:00002280
.text:00002280 loc_2280:                               ; CODE XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+9Cj
.text:00002280                 mov     eax, 80004002h
.text:00002285                 jmp     short loc_2298
.text:00002287 ; ---------------------------------------------------------------------------
.text:00002287
.text:00002287 loc_2287:                               ; CODE XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+37j
.text:00002287                                         ; NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+56j ...
.text:00002287                 mov     eax, [ebp+this]
.text:0000228A                 mov     ecx, [eax+0Ch]
.text:0000228D                 add     ecx, 1
.text:00002290                 mov     edx, [ebp+this]
.text:00002293                 mov     [edx+0Ch], ecx
.text:00002296                 xor     eax, eax
.text:00002298
.text:00002298 loc_2298:                               ; CODE XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+C5j
.text:00002298                 add     esp, 8
.text:0000229B                 cmp     ebp, esp
.text:0000229D                 call    __RTC_CheckEsp
.text:000022A2                 mov     esp, ebp
.text:000022A4                 pop     ebp
.text:000022A5                 retn    0Ch
.text:000022A5 ?QueryInterface@CEncoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:000022A5
.text:000022A5 _text           ends
.text:000022A5
.text:000022A8 ; ===========================================================================
.text:000022A8
.text:000022A8 ; Segment type: Pure code
.text:000022A8 ; Segment permissions: Read/Execute
.text:000022A8 _text           segment para public 'CODE' use32
.text:000022A8                 assume cs:_text
.text:000022A8                 ;org 22A8h
.text:000022A8 ; COMDAT (pick any)
.text:000022A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000022A8
.text:000022A8 ; =============== S U B R O U T I N E =======================================
.text:000022A8
.text:000022A8 ; Attributes: bp-based frame
.text:000022A8
.text:000022A8 ; unsigned __int32 __stdcall NCompress::NBcj2::CEncoder::AddRef(NCompress::NBcj2::CEncoder *this)
.text:000022A8                 public ?AddRef@CEncoder@NBcj2@NCompress@@UAGKXZ
.text:000022A8 ?AddRef@CEncoder@NBcj2@NCompress@@UAGKXZ proc near
.text:000022A8                                         ; CODE XREF: [thunk]:NCompress::NBcj2::CEncoder::AddRef`adjustor{4}' (void)+5j
.text:000022A8                                         ; [thunk]:NCompress::NBcj2::CEncoder::AddRef`adjustor{8}' (void)+5j
.text:000022A8                                         ; DATA XREF: ...
.text:000022A8
.text:000022A8 var_4           = dword ptr -4
.text:000022A8 this            = dword ptr  8
.text:000022A8
.text:000022A8                 push    ebp
.text:000022A9                 mov     ebp, esp
.text:000022AB                 push    ecx
.text:000022AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000022B3                 mov     eax, [ebp+this]
.text:000022B6                 mov     ecx, [eax+0Ch]
.text:000022B9                 add     ecx, 1
.text:000022BC                 mov     [ebp+var_4], ecx
.text:000022BF                 mov     edx, [ebp+this]
.text:000022C2                 mov     eax, [ebp+var_4]
.text:000022C5                 mov     [edx+0Ch], eax
.text:000022C8                 mov     eax, [ebp+var_4]
.text:000022CB                 mov     esp, ebp
.text:000022CD                 pop     ebp
.text:000022CE                 retn    4
.text:000022CE ?AddRef@CEncoder@NBcj2@NCompress@@UAGKXZ endp
.text:000022CE
.text:000022CE ; ---------------------------------------------------------------------------
.text:000022D1                 align 4
.text:000022D1 _text           ends
.text:000022D1
.text:000022D4 ; ===========================================================================
.text:000022D4
.text:000022D4 ; Segment type: Pure code
.text:000022D4 ; Segment permissions: Read/Execute
.text:000022D4 _text           segment para public 'CODE' use32
.text:000022D4                 assume cs:_text
.text:000022D4                 ;org 22D4h
.text:000022D4 ; COMDAT (pick any)
.text:000022D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000022D4
.text:000022D4 ; =============== S U B R O U T I N E =======================================
.text:000022D4
.text:000022D4 ; Attributes: bp-based frame
.text:000022D4
.text:000022D4 ; unsigned __int32 __stdcall NCompress::NBcj2::CEncoder::Release(NCompress::NBcj2::CEncoder *this)
.text:000022D4                 public ?Release@CEncoder@NBcj2@NCompress@@UAGKXZ
.text:000022D4 ?Release@CEncoder@NBcj2@NCompress@@UAGKXZ proc near
.text:000022D4                                         ; CODE XREF: [thunk]:NCompress::NBcj2::CEncoder::Release`adjustor{4}' (void)+5j
.text:000022D4                                         ; [thunk]:NCompress::NBcj2::CEncoder::Release`adjustor{8}' (void)+5j
.text:000022D4                                         ; DATA XREF: ...
.text:000022D4
.text:000022D4 var_10          = dword ptr -10h
.text:000022D4 var_C           = dword ptr -0Ch
.text:000022D4 var_8           = dword ptr -8
.text:000022D4 var_4           = dword ptr -4
.text:000022D4 this            = dword ptr  8
.text:000022D4
.text:000022D4                 push    ebp
.text:000022D5                 mov     ebp, esp
.text:000022D7                 sub     esp, 10h
.text:000022DA                 mov     eax, 0CCCCCCCCh
.text:000022DF                 mov     [ebp+var_10], eax
.text:000022E2                 mov     [ebp+var_C], eax
.text:000022E5                 mov     [ebp+var_8], eax
.text:000022E8                 mov     [ebp+var_4], eax
.text:000022EB                 mov     eax, [ebp+this]
.text:000022EE                 mov     ecx, [eax+0Ch]
.text:000022F1                 sub     ecx, 1
.text:000022F4                 mov     [ebp+var_C], ecx
.text:000022F7                 mov     edx, [ebp+this]
.text:000022FA                 mov     eax, [ebp+var_C]
.text:000022FD                 mov     [edx+0Ch], eax
.text:00002300                 cmp     [ebp+var_C], 0
.text:00002304                 jz      short loc_230E
.text:00002306                 mov     ecx, [ebp+this]
.text:00002309                 mov     eax, [ecx+0Ch]
.text:0000230C                 jmp     short loc_2338
.text:0000230E ; ---------------------------------------------------------------------------
.text:0000230E
.text:0000230E loc_230E:                               ; CODE XREF: NCompress::NBcj2::CEncoder::Release(void)+30j
.text:0000230E                 mov     edx, [ebp+this]
.text:00002311                 mov     [ebp+var_8], edx
.text:00002314                 mov     eax, [ebp+var_8]
.text:00002317                 mov     [ebp+var_4], eax
.text:0000231A                 cmp     [ebp+var_4], 0
.text:0000231E                 jz      short loc_232F
.text:00002320                 push    1
.text:00002322                 mov     ecx, [ebp+var_4]
.text:00002325                 call    ??_GCEncoder@NBcj2@NCompress@@QAEPAXI@Z ; NCompress::NBcj2::CEncoder::`scalar deleting destructor'(uint)
.text:0000232A                 mov     [ebp+var_10], eax
.text:0000232D                 jmp     short loc_2336
.text:0000232F ; ---------------------------------------------------------------------------
.text:0000232F
.text:0000232F loc_232F:                               ; CODE XREF: NCompress::NBcj2::CEncoder::Release(void)+4Aj
.text:0000232F                 mov     [ebp+var_10], 0
.text:00002336
.text:00002336 loc_2336:                               ; CODE XREF: NCompress::NBcj2::CEncoder::Release(void)+59j
.text:00002336                 xor     eax, eax
.text:00002338
.text:00002338 loc_2338:                               ; CODE XREF: NCompress::NBcj2::CEncoder::Release(void)+38j
.text:00002338                 add     esp, 10h
.text:0000233B                 cmp     ebp, esp
.text:0000233D                 call    __RTC_CheckEsp
.text:00002342                 mov     esp, ebp
.text:00002344                 pop     ebp
.text:00002345                 retn    4
.text:00002345 ?Release@CEncoder@NBcj2@NCompress@@UAGKXZ endp
.text:00002345
.text:00002345 _text           ends
.text:00002345
.text:00002348 ; ===========================================================================
.text:00002348
.text:00002348 ; Segment type: Pure code
.text:00002348 ; Segment permissions: Read/Execute
.text:00002348 _text           segment para public 'CODE' use32
.text:00002348                 assume cs:_text
.text:00002348                 ;org 2348h
.text:00002348 ; COMDAT (pick any)
.text:00002348                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002348
.text:00002348 ; =============== S U B R O U T I N E =======================================
.text:00002348
.text:00002348 ; Attributes: bp-based frame
.text:00002348
.text:00002348 ; public: void * __thiscall NCompress::NBcj2::CEncoder::`scalar deleting destructor'(unsigned int)
.text:00002348                 public ??_GCEncoder@NBcj2@NCompress@@QAEPAXI@Z
.text:00002348 ??_GCEncoder@NBcj2@NCompress@@QAEPAXI@Z proc near
.text:00002348                                         ; CODE XREF: NCompress::NBcj2::CEncoder::Release(void)+51p
.text:00002348
.text:00002348 var_4           = dword ptr -4
.text:00002348 arg_0           = dword ptr  8
.text:00002348
.text:00002348                 push    ebp
.text:00002349                 mov     ebp, esp
.text:0000234B                 push    ecx
.text:0000234C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002353                 mov     [ebp+var_4], ecx
.text:00002356                 mov     ecx, [ebp+var_4] ; this
.text:00002359                 call    ??1CEncoder@NBcj2@NCompress@@QAE@XZ ; NCompress::NBcj2::CEncoder::~CEncoder(void)
.text:0000235E                 mov     eax, [ebp+arg_0]
.text:00002361                 and     eax, 1
.text:00002364                 jz      short loc_2372
.text:00002366                 mov     ecx, [ebp+var_4]
.text:00002369                 push    ecx             ; void *
.text:0000236A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000236F                 add     esp, 4
.text:00002372
.text:00002372 loc_2372:                               ; CODE XREF: NCompress::NBcj2::CEncoder::`scalar deleting destructor'(uint)+1Cj
.text:00002372                 mov     eax, [ebp+var_4]
.text:00002375                 add     esp, 4
.text:00002378                 cmp     ebp, esp
.text:0000237A                 call    __RTC_CheckEsp
.text:0000237F                 mov     esp, ebp
.text:00002381                 pop     ebp
.text:00002382                 retn    4
.text:00002382 ??_GCEncoder@NBcj2@NCompress@@QAEPAXI@Z endp
.text:00002382
.text:00002382 ; ---------------------------------------------------------------------------
.text:00002385                 align 4
.text:00002385 _text           ends
.text:00002385
.text:00002388 ; ===========================================================================
.text:00002388
.text:00002388 ; Segment type: Pure code
.text:00002388 ; Segment permissions: Read/Execute
.text:00002388 _text           segment para public 'CODE' use32
.text:00002388                 assume cs:_text
.text:00002388                 ;org 2388h
.text:00002388 ; COMDAT (pick any)
.text:00002388                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002388
.text:00002388 ; =============== S U B R O U T I N E =======================================
.text:00002388
.text:00002388 ; Attributes: bp-based frame
.text:00002388
.text:00002388 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00002388                 public ___@8
.text:00002388 ___@8           proc near               ; CODE XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+26p
.text:00002388                                         ; NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+45p ...
.text:00002388
.text:00002388 Buf1            = dword ptr  8
.text:00002388 Buf2            = dword ptr  0Ch
.text:00002388
.text:00002388                 push    ebp
.text:00002389                 mov     ebp, esp
.text:0000238B                 mov     eax, [ebp+Buf2]
.text:0000238E                 push    eax             ; Buf2
.text:0000238F                 mov     ecx, [ebp+Buf1]
.text:00002392                 push    ecx             ; Buf1
.text:00002393                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00002398                 cmp     ebp, esp
.text:0000239A                 call    __RTC_CheckEsp
.text:0000239F                 pop     ebp
.text:000023A0                 retn    8
.text:000023A0 ___@8           endp
.text:000023A0
.text:000023A0 ; ---------------------------------------------------------------------------
.text:000023A3                 align 4
.text:000023A3 _text           ends
.text:000023A3
.text:000023A4 ; ===========================================================================
.text:000023A4
.text:000023A4 ; Segment type: Pure code
.text:000023A4 ; Segment permissions: Read/Execute
.text:000023A4 _text           segment para public 'CODE' use32
.text:000023A4                 assume cs:_text
.text:000023A4                 ;org 23A4h
.text:000023A4 ; COMDAT (pick any)
.text:000023A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000023A4
.text:000023A4 ; =============== S U B R O U T I N E =======================================
.text:000023A4
.text:000023A4 ; Attributes: bp-based frame
.text:000023A4
.text:000023A4 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000023A4                 public _IsEqualGUID@8
.text:000023A4 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000023A4
.text:000023A4 Buf1            = dword ptr  8
.text:000023A4 Buf2            = dword ptr  0Ch
.text:000023A4
.text:000023A4                 push    ebp
.text:000023A5                 mov     ebp, esp
.text:000023A7                 push    10h             ; Size
.text:000023A9                 mov     eax, [ebp+Buf2]
.text:000023AC                 push    eax             ; Buf2
.text:000023AD                 mov     ecx, [ebp+Buf1]
.text:000023B0                 push    ecx             ; Buf1
.text:000023B1                 call    _memcmp
.text:000023B6                 add     esp, 0Ch
.text:000023B9                 neg     eax
.text:000023BB                 sbb     eax, eax
.text:000023BD                 add     eax, 1
.text:000023C0                 cmp     ebp, esp
.text:000023C2                 call    __RTC_CheckEsp
.text:000023C7                 pop     ebp
.text:000023C8                 retn    8
.text:000023C8 _IsEqualGUID@8  endp
.text:000023C8
.text:000023C8 ; ---------------------------------------------------------------------------
.text:000023CB                 align 4
.text:000023CB _text           ends
.text:000023CB
.text:000023CC ; ===========================================================================
.text:000023CC
.text:000023CC ; Segment type: Pure code
.text:000023CC ; Segment permissions: Read/Execute
.text:000023CC _text           segment para public 'CODE' use32
.text:000023CC                 assume cs:_text
.text:000023CC                 ;org 23CCh
.text:000023CC ; COMDAT (pick any)
.text:000023CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000023CC
.text:000023CC ; =============== S U B R O U T I N E =======================================
.text:000023CC
.text:000023CC ; Attributes: bp-based frame
.text:000023CC
.text:000023CC ; _DWORD __thiscall ICompressCoder2::ICompressCoder2(ICompressCoder2 *__hidden this)
.text:000023CC                 public ??0ICompressCoder2@@QAE@XZ
.text:000023CC ??0ICompressCoder2@@QAE@XZ proc near    ; CODE XREF: NCompress::NBcj2::CEncoder::CEncoder(void)+11p
.text:000023CC                                         ; NCompress::NBcj2::CDecoder::CDecoder(void)+30p
.text:000023CC
.text:000023CC var_4           = dword ptr -4
.text:000023CC
.text:000023CC                 push    ebp
.text:000023CD                 mov     ebp, esp
.text:000023CF                 push    ecx
.text:000023D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023D7                 mov     [ebp+var_4], ecx
.text:000023DA                 mov     ecx, [ebp+var_4]
.text:000023DD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000023E2                 mov     eax, [ebp+var_4]
.text:000023E5                 mov     dword ptr [eax], offset ??_7ICompressCoder2@@6B@ ; const ICompressCoder2::`vftable'
.text:000023EB                 mov     eax, [ebp+var_4]
.text:000023EE                 add     esp, 4
.text:000023F1                 cmp     ebp, esp
.text:000023F3                 call    __RTC_CheckEsp
.text:000023F8                 mov     esp, ebp
.text:000023FA                 pop     ebp
.text:000023FB                 retn
.text:000023FB ??0ICompressCoder2@@QAE@XZ endp
.text:000023FB
.text:000023FB _text           ends
.text:000023FB
.rdata:000023FC ; ===========================================================================
.rdata:000023FC
.rdata:000023FC ; Segment type: Pure data
.rdata:000023FC ; Segment permissions: Read
.rdata:000023FC _rdata          segment dword public 'DATA' use32
.rdata:000023FC                 assume cs:_rdata
.rdata:000023FC                 ;org 23FCh
.rdata:000023FC ; COMDAT (pick largest)
.rdata:000023FC                 dd offset ??_R4ICompressCoder2@@6B@ ; const ICompressCoder2::`RTTI Complete Object Locator'
.rdata:00002400                 public ??_7ICompressCoder2@@6B@
.rdata:00002400 ; const ICompressCoder2::`vftable'
.rdata:00002400 ??_7ICompressCoder2@@6B@ dd offset __purecall
.rdata:00002400                                         ; DATA XREF: ICompressCoder2::ICompressCoder2(void)+19o
.rdata:00002404                 dd offset __purecall
.rdata:00002408                 dd offset __purecall
.rdata:0000240C                 dd offset __purecall
.rdata:0000240C _rdata          ends
.rdata:0000240C
.rdata$r:00002410 ; ===========================================================================
.rdata$r:00002410
.rdata$r:00002410 ; Segment type: Pure data
.rdata$r:00002410 ; Segment permissions: Read
.rdata$r:00002410 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002410                 assume cs:_rdata$r
.rdata$r:00002410                 ;org 2410h
.rdata$r:00002410 ; COMDAT (pick any)
.rdata$r:00002410                 public ??_R4ICompressCoder2@@6B@
.rdata$r:00002410 ; const ICompressCoder2::`RTTI Complete Object Locator'
.rdata$r:00002410 ??_R4ICompressCoder2@@6B@ db    0       ; DATA XREF: .rdata:000023FCo
.rdata$r:00002411                 db    0
.rdata$r:00002412                 db    0
.rdata$r:00002413                 db    0
.rdata$r:00002414                 db    0
.rdata$r:00002415                 db    0
.rdata$r:00002416                 db    0
.rdata$r:00002417                 db    0
.rdata$r:00002418                 db    0
.rdata$r:00002419                 db    0
.rdata$r:0000241A                 db    0
.rdata$r:0000241B                 db    0
.rdata$r:0000241C                 dd offset ??_R0?AUICompressCoder2@@@8 ; ICompressCoder2 `RTTI Type Descriptor'
.rdata$r:00002420                 dd offset ??_R3ICompressCoder2@@8 ; ICompressCoder2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002420 _rdata$r        ends
.rdata$r:00002420
.text:00002424 ; ===========================================================================
.text:00002424
.text:00002424 ; Segment type: Pure code
.text:00002424 ; Segment permissions: Read/Execute
.text:00002424 _text           segment para public 'CODE' use32
.text:00002424                 assume cs:_text
.text:00002424                 ;org 2424h
.text:00002424 ; COMDAT (pick any)
.text:00002424                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002424
.text:00002424 ; =============== S U B R O U T I N E =======================================
.text:00002424
.text:00002424 ; Attributes: bp-based frame
.text:00002424
.text:00002424 ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:00002424                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:00002424 ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:00002424                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CEncoder(void)+1Cp
.text:00002424
.text:00002424 var_4           = dword ptr -4
.text:00002424
.text:00002424                 push    ebp
.text:00002425                 mov     ebp, esp
.text:00002427                 push    ecx
.text:00002428                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000242F                 mov     [ebp+var_4], ecx
.text:00002432                 mov     ecx, [ebp+var_4]
.text:00002435                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000243A                 mov     eax, [ebp+var_4]
.text:0000243D                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:00002443                 mov     eax, [ebp+var_4]
.text:00002446                 add     esp, 4
.text:00002449                 cmp     ebp, esp
.text:0000244B                 call    __RTC_CheckEsp
.text:00002450                 mov     esp, ebp
.text:00002452                 pop     ebp
.text:00002453                 retn
.text:00002453 ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:00002453
.text:00002453 _text           ends
.text:00002453
.rdata:00002454 ; ===========================================================================
.rdata:00002454
.rdata:00002454 ; Segment type: Pure data
.rdata:00002454 ; Segment permissions: Read
.rdata:00002454 _rdata          segment dword public 'DATA' use32
.rdata:00002454                 assume cs:_rdata
.rdata:00002454                 ;org 2454h
.rdata:00002454 ; COMDAT (pick largest)
.rdata:00002454                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:00002458                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:00002458 ; const ICompressSetCoderProperties::`vftable'
.rdata:00002458 ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:00002458                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:0000245C                 dd offset __purecall
.rdata:00002460                 dd offset __purecall
.rdata:00002464                 dd offset __purecall
.rdata:00002464 _rdata          ends
.rdata:00002464
.rdata$r:00002468 ; ===========================================================================
.rdata$r:00002468
.rdata$r:00002468 ; Segment type: Pure data
.rdata$r:00002468 ; Segment permissions: Read
.rdata$r:00002468 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002468                 assume cs:_rdata$r
.rdata$r:00002468                 ;org 2468h
.rdata$r:00002468 ; COMDAT (pick any)
.rdata$r:00002468                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:00002468 ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00002468 ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:00002468                                         ; DATA XREF: .rdata:00002454o
.rdata$r:00002469                 db    0
.rdata$r:0000246A                 db    0
.rdata$r:0000246B                 db    0
.rdata$r:0000246C                 db    0
.rdata$r:0000246D                 db    0
.rdata$r:0000246E                 db    0
.rdata$r:0000246F                 db    0
.rdata$r:00002470                 db    0
.rdata$r:00002471                 db    0
.rdata$r:00002472                 db    0
.rdata$r:00002473                 db    0
.rdata$r:00002474                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00002478                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002478 _rdata$r        ends
.rdata$r:00002478
.text:0000247C ; ===========================================================================
.text:0000247C
.text:0000247C ; Segment type: Pure code
.text:0000247C ; Segment permissions: Read/Execute
.text:0000247C _text           segment para public 'CODE' use32
.text:0000247C                 assume cs:_text
.text:0000247C                 ;org 247Ch
.text:0000247C ; COMDAT (pick any)
.text:0000247C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000247C
.text:0000247C ; =============== S U B R O U T I N E =======================================
.text:0000247C
.text:0000247C ; Attributes: bp-based frame
.text:0000247C
.text:0000247C ; _DWORD __thiscall ICompressSetBufSize::ICompressSetBufSize(ICompressSetBufSize *__hidden this)
.text:0000247C                 public ??0ICompressSetBufSize@@QAE@XZ
.text:0000247C ??0ICompressSetBufSize@@QAE@XZ proc near
.text:0000247C                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CEncoder(void)+27p
.text:0000247C                                         ; NCompress::NBcj2::CDecoder::CDecoder(void)+67p
.text:0000247C
.text:0000247C var_4           = dword ptr -4
.text:0000247C
.text:0000247C                 push    ebp
.text:0000247D                 mov     ebp, esp
.text:0000247F                 push    ecx
.text:00002480                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002487                 mov     [ebp+var_4], ecx
.text:0000248A                 mov     ecx, [ebp+var_4]
.text:0000248D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002492                 mov     eax, [ebp+var_4]
.text:00002495                 mov     dword ptr [eax], offset ??_7ICompressSetBufSize@@6B@ ; const ICompressSetBufSize::`vftable'
.text:0000249B                 mov     eax, [ebp+var_4]
.text:0000249E                 add     esp, 4
.text:000024A1                 cmp     ebp, esp
.text:000024A3                 call    __RTC_CheckEsp
.text:000024A8                 mov     esp, ebp
.text:000024AA                 pop     ebp
.text:000024AB                 retn
.text:000024AB ??0ICompressSetBufSize@@QAE@XZ endp
.text:000024AB
.text:000024AB _text           ends
.text:000024AB
.rdata:000024AC ; ===========================================================================
.rdata:000024AC
.rdata:000024AC ; Segment type: Pure data
.rdata:000024AC ; Segment permissions: Read
.rdata:000024AC _rdata          segment dword public 'DATA' use32
.rdata:000024AC                 assume cs:_rdata
.rdata:000024AC                 ;org 24ACh
.rdata:000024AC ; COMDAT (pick largest)
.rdata:000024AC                 dd offset ??_R4ICompressSetBufSize@@6B@ ; const ICompressSetBufSize::`RTTI Complete Object Locator'
.rdata:000024B0                 public ??_7ICompressSetBufSize@@6B@
.rdata:000024B0 ; const ICompressSetBufSize::`vftable'
.rdata:000024B0 ??_7ICompressSetBufSize@@6B@ dd offset __purecall
.rdata:000024B0                                         ; DATA XREF: ICompressSetBufSize::ICompressSetBufSize(void)+19o
.rdata:000024B4                 dd offset __purecall
.rdata:000024B8                 dd offset __purecall
.rdata:000024BC                 dd offset __purecall
.rdata:000024C0                 dd offset __purecall
.rdata:000024C0 _rdata          ends
.rdata:000024C0
.rdata$r:000024C4 ; ===========================================================================
.rdata$r:000024C4
.rdata$r:000024C4 ; Segment type: Pure data
.rdata$r:000024C4 ; Segment permissions: Read
.rdata$r:000024C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000024C4                 assume cs:_rdata$r
.rdata$r:000024C4                 ;org 24C4h
.rdata$r:000024C4 ; COMDAT (pick any)
.rdata$r:000024C4                 public ??_R4ICompressSetBufSize@@6B@
.rdata$r:000024C4 ; const ICompressSetBufSize::`RTTI Complete Object Locator'
.rdata$r:000024C4 ??_R4ICompressSetBufSize@@6B@ db    0   ; DATA XREF: .rdata:000024ACo
.rdata$r:000024C5                 db    0
.rdata$r:000024C6                 db    0
.rdata$r:000024C7                 db    0
.rdata$r:000024C8                 db    0
.rdata$r:000024C9                 db    0
.rdata$r:000024CA                 db    0
.rdata$r:000024CB                 db    0
.rdata$r:000024CC                 db    0
.rdata$r:000024CD                 db    0
.rdata$r:000024CE                 db    0
.rdata$r:000024CF                 db    0
.rdata$r:000024D0                 dd offset ??_R0?AUICompressSetBufSize@@@8 ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:000024D4                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000024D4 _rdata$r        ends
.rdata$r:000024D4
.text:000024D8 ; ===========================================================================
.text:000024D8
.text:000024D8 ; Segment type: Pure code
.text:000024D8 ; Segment permissions: Read/Execute
.text:000024D8 _text           segment para public 'CODE' use32
.text:000024D8                 assume cs:_text
.text:000024D8                 ;org 24D8h
.text:000024D8 ; COMDAT (pick any)
.text:000024D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000024D8
.text:000024D8 ; =============== S U B R O U T I N E =======================================
.text:000024D8
.text:000024D8 ; Attributes: bp-based frame
.text:000024D8
.text:000024D8 ; public: __thiscall IUnknown::IUnknown(void)
.text:000024D8                 public ??0IUnknown@@QAE@XZ
.text:000024D8 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder2::ICompressCoder2(void)+11p
.text:000024D8                                         ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)+11p ...
.text:000024D8
.text:000024D8 var_4           = dword ptr -4
.text:000024D8
.text:000024D8                 push    ebp
.text:000024D9                 mov     ebp, esp
.text:000024DB                 push    ecx
.text:000024DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024E3                 mov     [ebp+var_4], ecx
.text:000024E6                 mov     eax, [ebp+var_4]
.text:000024E9                 mov     esp, ebp
.text:000024EB                 pop     ebp
.text:000024EC                 retn
.text:000024EC ??0IUnknown@@QAE@XZ endp
.text:000024EC
.text:000024EC ; ---------------------------------------------------------------------------
.text:000024ED                 align 10h
.text:000024ED _text           ends
.text:000024ED
.text$x:000024F0 ; ===========================================================================
.text$x:000024F0
.text$x:000024F0 ; Segment type: Pure code
.text$x:000024F0 ; Segment permissions: Read/Execute
.text$x:000024F0 _text$x         segment para public 'CODE' use32
.text$x:000024F0                 assume cs:_text$x
.text$x:000024F0                 ;org 24F0h
.text$x:000024F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000024F0
.text$x:000024F0 ; =============== S U B R O U T I N E =======================================
.text$x:000024F0
.text$x:000024F0
.text$x:000024F0 __unwindfunclet$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$0 proc near
.text$x:000024F0                                         ; DATA XREF: .xdata$x:00002568o
.text$x:000024F0                 lea     ecx, [ebp-2Ch]
.text$x:000024F3                 jmp     ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)
.text$x:000024F3 __unwindfunclet$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$0 endp
.text$x:000024F3
.text$x:000024F8
.text$x:000024F8 ; =============== S U B R O U T I N E =======================================
.text$x:000024F8
.text$x:000024F8
.text$x:000024F8 __ehhandler$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z proc near
.text$x:000024F8                                         ; DATA XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+5o
.text$x:000024F8
.text$x:000024F8 arg_4           = dword ptr  8
.text$x:000024F8
.text$x:000024F8                 mov     edx, [esp+arg_4]
.text$x:000024FC                 lea     eax, [edx+0Ch]
.text$x:000024FF                 mov     ecx, [edx-388h]
.text$x:00002505                 xor     ecx, eax
.text$x:00002507                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000250C                 mov     ecx, [edx-4]
.text$x:0000250F                 xor     ecx, eax
.text$x:00002511                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002516                 mov     eax, offset __ehfuncinfo$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.text$x:0000251B                 jmp     ___CxxFrameHandler3
.text$x:0000251B __ehhandler$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z endp
.text$x:0000251B
.text$x:00002520
.text$x:00002520 ; =============== S U B R O U T I N E =======================================
.text$x:00002520
.text$x:00002520
.text$x:00002520 __ehhandler$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z proc near
.text$x:00002520                                         ; DATA XREF: NCompress::NBcj2::CEncoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+5o
.text$x:00002520
.text$x:00002520 arg_4           = dword ptr  8
.text$x:00002520
.text$x:00002520                 mov     edx, [esp+arg_4]
.text$x:00002524                 lea     eax, [edx+0Ch]
.text$x:00002527                 mov     ecx, [edx-1Ch]
.text$x:0000252A                 xor     ecx, eax
.text$x:0000252C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002531                 mov     eax, offset __ehfuncinfo$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.text$x:00002536                 jmp     ___CxxFrameHandler3
.text$x:00002536 __ehhandler$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z endp
.text$x:00002536
.text$x:0000253B
.text$x:0000253B ; =============== S U B R O U T I N E =======================================
.text$x:0000253B
.text$x:0000253B
.text$x:0000253B __unwindfunclet$??0CDecoder@NBcj2@NCompress@@QAE@XZ$0 proc near
.text$x:0000253B                                         ; DATA XREF: .xdata$x:000025ECo
.text$x:0000253B                 mov     ecx, [ebp-10h]
.text$x:0000253E                 add     ecx, 1Ch        ; this
.text$x:00002541                 jmp     ??1CBaseCoder@NBcj2@NCompress@@QAE@XZ ; NCompress::NBcj2::CBaseCoder::~CBaseCoder(void)
.text$x:00002541 __unwindfunclet$??0CDecoder@NBcj2@NCompress@@QAE@XZ$0 endp
.text$x:00002541
.text$x:00002546
.text$x:00002546 ; =============== S U B R O U T I N E =======================================
.text$x:00002546
.text$x:00002546
.text$x:00002546 __ehhandler$??0CDecoder@NBcj2@NCompress@@QAE@XZ proc near
.text$x:00002546                                         ; DATA XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+5o
.text$x:00002546
.text$x:00002546 arg_4           = dword ptr  8
.text$x:00002546
.text$x:00002546                 mov     edx, [esp+arg_4]
.text$x:0000254A                 lea     eax, [edx+0Ch]
.text$x:0000254D                 mov     ecx, [edx-8]
.text$x:00002550                 xor     ecx, eax
.text$x:00002552                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002557                 mov     eax, offset __ehfuncinfo$??0CDecoder@NBcj2@NCompress@@QAE@XZ
.text$x:0000255C                 jmp     ___CxxFrameHandler3
.text$x:0000255C __ehhandler$??0CDecoder@NBcj2@NCompress@@QAE@XZ endp
.text$x:0000255C
.text$x:0000255C ; ---------------------------------------------------------------------------
.text$x:00002561                 align 4
.text$x:00002561 _text$x         ends
.text$x:00002561
.xdata$x:00002564 ; ===========================================================================
.xdata$x:00002564
.xdata$x:00002564 ; Segment type: Pure data
.xdata$x:00002564 ; Segment permissions: Read
.xdata$x:00002564 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002564                 assume cs:_xdata$x
.xdata$x:00002564                 ;org 2564h
.xdata$x:00002564 __unwindtable$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00002564                                         ; DATA XREF: .xdata$x:00002574o
.xdata$x:00002565                 db 0FFh
.xdata$x:00002566                 db 0FFh
.xdata$x:00002567                 db 0FFh
.xdata$x:00002568                 dd offset __unwindfunclet$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$0
.xdata$x:0000256C __ehfuncinfo$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:0000256C                                         ; DATA XREF: __ehhandler$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z+1Eo
.xdata$x:0000256D                 db    5
.xdata$x:0000256E                 db  93h ; ô
.xdata$x:0000256F                 db  19h
.xdata$x:00002570                 db    1
.xdata$x:00002571                 db    0
.xdata$x:00002572                 db    0
.xdata$x:00002573                 db    0
.xdata$x:00002574                 dd offset __unwindtable$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.xdata$x:00002578                 db    0
.xdata$x:00002579                 db    0
.xdata$x:0000257A                 db    0
.xdata$x:0000257B                 db    0
.xdata$x:0000257C                 db    0
.xdata$x:0000257D                 db    0
.xdata$x:0000257E                 db    0
.xdata$x:0000257F                 db    0
.xdata$x:00002580                 db    0
.xdata$x:00002581                 db    0
.xdata$x:00002582                 db    0
.xdata$x:00002583                 db    0
.xdata$x:00002584                 db    0
.xdata$x:00002585                 db    0
.xdata$x:00002586                 db    0
.xdata$x:00002587                 db    0
.xdata$x:00002588                 db    0
.xdata$x:00002589                 db    0
.xdata$x:0000258A                 db    0
.xdata$x:0000258B                 db    0
.xdata$x:0000258C                 db    1
.xdata$x:0000258D                 db    0
.xdata$x:0000258E                 db    0
.xdata$x:0000258F                 db    0
.xdata$x:00002590 __catchsym$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$2 dd offset loc_3F+1
.xdata$x:00002590                                         ; DATA XREF: .xdata$x:000025C0o
.xdata$x:00002594                 db    0
.xdata$x:00002595                 db    0
.xdata$x:00002596                 db    0
.xdata$x:00002597                 db    0
.xdata$x:00002598                 db    0
.xdata$x:00002599                 db    0
.xdata$x:0000259A                 db    0
.xdata$x:0000259B                 db    0
.xdata$x:0000259C                 dd offset __catch$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$0
.xdata$x:000025A0 __unwindtable$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:000025A0                                         ; DATA XREF: .xdata$x:000025CCo
.xdata$x:000025A1                 db 0FFh
.xdata$x:000025A2                 db 0FFh
.xdata$x:000025A3                 db 0FFh
.xdata$x:000025A4                 db    0
.xdata$x:000025A5                 db    0
.xdata$x:000025A6                 db    0
.xdata$x:000025A7                 db    0
.xdata$x:000025A8                 db 0FFh
.xdata$x:000025A9                 db 0FFh
.xdata$x:000025AA                 db 0FFh
.xdata$x:000025AB                 db 0FFh
.xdata$x:000025AC                 db    0
.xdata$x:000025AD                 db    0
.xdata$x:000025AE                 db    0
.xdata$x:000025AF                 db    0
.xdata$x:000025B0 __tryblocktable$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z db    0
.xdata$x:000025B0                                         ; DATA XREF: .xdata$x:000025D4o
.xdata$x:000025B1                 db    0
.xdata$x:000025B2                 db    0
.xdata$x:000025B3                 db    0
.xdata$x:000025B4                 db    0
.xdata$x:000025B5                 db    0
.xdata$x:000025B6                 db    0
.xdata$x:000025B7                 db    0
.xdata$x:000025B8                 db    1
.xdata$x:000025B9                 db    0
.xdata$x:000025BA                 db    0
.xdata$x:000025BB                 db    0
.xdata$x:000025BC                 db    1
.xdata$x:000025BD                 db    0
.xdata$x:000025BE                 db    0
.xdata$x:000025BF                 db    0
.xdata$x:000025C0                 dd offset __catchsym$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z$2
.xdata$x:000025C4 __ehfuncinfo$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:000025C4                                         ; DATA XREF: __ehhandler$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z+11o
.xdata$x:000025C5                 db    5
.xdata$x:000025C6                 db  93h ; ô
.xdata$x:000025C7                 db  19h
.xdata$x:000025C8                 db    2
.xdata$x:000025C9                 db    0
.xdata$x:000025CA                 db    0
.xdata$x:000025CB                 db    0
.xdata$x:000025CC                 dd offset __unwindtable$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.xdata$x:000025D0                 db    1
.xdata$x:000025D1                 db    0
.xdata$x:000025D2                 db    0
.xdata$x:000025D3                 db    0
.xdata$x:000025D4                 dd offset __tryblocktable$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z
.xdata$x:000025D8                 db    0
.xdata$x:000025D9                 db    0
.xdata$x:000025DA                 db    0
.xdata$x:000025DB                 db    0
.xdata$x:000025DC                 db    0
.xdata$x:000025DD                 db    0
.xdata$x:000025DE                 db    0
.xdata$x:000025DF                 db    0
.xdata$x:000025E0                 db    0
.xdata$x:000025E1                 db    0
.xdata$x:000025E2                 db    0
.xdata$x:000025E3                 db    0
.xdata$x:000025E4                 db    1
.xdata$x:000025E5                 db    0
.xdata$x:000025E6                 db    0
.xdata$x:000025E7                 db    0
.xdata$x:000025E8 __unwindtable$??0CDecoder@NBcj2@NCompress@@QAE@XZ db 0FFh
.xdata$x:000025E8                                         ; DATA XREF: .xdata$x:000025F8o
.xdata$x:000025E9                 db 0FFh
.xdata$x:000025EA                 db 0FFh
.xdata$x:000025EB                 db 0FFh
.xdata$x:000025EC                 dd offset __unwindfunclet$??0CDecoder@NBcj2@NCompress@@QAE@XZ$0
.xdata$x:000025F0 __ehfuncinfo$??0CDecoder@NBcj2@NCompress@@QAE@XZ db  22h ; "
.xdata$x:000025F0                                         ; DATA XREF: __ehhandler$??0CDecoder@NBcj2@NCompress@@QAE@XZ+11o
.xdata$x:000025F1                 db    5
.xdata$x:000025F2                 db  93h ; ô
.xdata$x:000025F3                 db  19h
.xdata$x:000025F4                 db    1
.xdata$x:000025F5                 db    0
.xdata$x:000025F6                 db    0
.xdata$x:000025F7                 db    0
.xdata$x:000025F8                 dd offset __unwindtable$??0CDecoder@NBcj2@NCompress@@QAE@XZ
.xdata$x:000025FC                 db    0
.xdata$x:000025FD                 db    0
.xdata$x:000025FE                 db    0
.xdata$x:000025FF                 db    0
.xdata$x:00002600                 db    0
.xdata$x:00002601                 db    0
.xdata$x:00002602                 db    0
.xdata$x:00002603                 db    0
.xdata$x:00002604                 db    0
.xdata$x:00002605                 db    0
.xdata$x:00002606                 db    0
.xdata$x:00002607                 db    0
.xdata$x:00002608                 db    0
.xdata$x:00002609                 db    0
.xdata$x:0000260A                 db    0
.xdata$x:0000260B                 db    0
.xdata$x:0000260C                 db    0
.xdata$x:0000260D                 db    0
.xdata$x:0000260E                 db    0
.xdata$x:0000260F                 db    0
.xdata$x:00002610                 db    1
.xdata$x:00002611                 db    0
.xdata$x:00002612                 db    0
.xdata$x:00002613                 db    0
.xdata$x:00002613 _xdata$x        ends
.xdata$x:00002613
.rdata:00002614 ; ===========================================================================
.rdata:00002614
.rdata:00002614 ; Segment type: Pure data
.rdata:00002614 ; Segment permissions: Read
.rdata:00002614 _rdata          segment dword public 'DATA' use32
.rdata:00002614                 assume cs:_rdata
.rdata:00002614                 ;org 2614h
.rdata:00002614 ; COMDAT (pick largest)
.rdata:00002614                 dd offset ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetBufSize@@@ ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetBufSize'}
.rdata:00002618                 public ??_7CDecoder@NBcj2@NCompress@@6BICompressSetBufSize@@@
.rdata:00002618 ; const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetBufSize'}
.rdata:00002618 ??_7CDecoder@NBcj2@NCompress@@6BICompressSetBufSize@@@ dd offset ?QueryInterface@CDecoder@NBcj2@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z
.rdata:00002618                                         ; DATA XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+BDo
.rdata:00002618                                         ; [thunk]:NCompress::NBcj2::CDecoder::QueryInterface`adjustor{20}' (_GUID const &,void * *)
.rdata:0000261C                 dd offset ?AddRef@CDecoder@NBcj2@NCompress@@WBE@AGKXZ ; [thunk]:NCompress::NBcj2::CDecoder::AddRef`adjustor{20}' (void)
.rdata:00002620                 dd offset ?Release@CDecoder@NBcj2@NCompress@@WBE@AGKXZ ; [thunk]:NCompress::NBcj2::CDecoder::Release`adjustor{20}' (void)
.rdata:00002624                 dd offset ?SetInBufSize@CDecoder@NBcj2@NCompress@@UAGJII@Z ; NCompress::NBcj2::CDecoder::SetInBufSize(uint,uint)
.rdata:00002628                 dd offset ?SetOutBufSize@CDecoder@NBcj2@NCompress@@UAGJII@Z ; NCompress::NBcj2::CDecoder::SetOutBufSize(uint,uint)
.rdata:00002628 _rdata          ends
.rdata:00002628
.rdata:0000262C ; ===========================================================================
.rdata:0000262C
.rdata:0000262C ; Segment type: Pure data
.rdata:0000262C ; Segment permissions: Read
.rdata:0000262C _rdata          segment dword public 'DATA' use32
.rdata:0000262C                 assume cs:_rdata
.rdata:0000262C                 ;org 262Ch
.rdata:0000262C ; COMDAT (pick largest)
.rdata:0000262C                 dd offset ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:00002630                 public ??_7CDecoder@NBcj2@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:00002630 ; const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:00002630 ??_7CDecoder@NBcj2@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CDecoder@NBcj2@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00002630                                         ; DATA XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+B3o
.rdata:00002630                                         ; [thunk]:NCompress::NBcj2::CDecoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00002634                 dd offset ?AddRef@CDecoder@NBcj2@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NBcj2::CDecoder::AddRef`adjustor{16}' (void)
.rdata:00002638                 dd offset ?Release@CDecoder@NBcj2@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NBcj2::CDecoder::Release`adjustor{16}' (void)
.rdata:0000263C                 dd offset ?SetOutStreamSize@CDecoder@NBcj2@NCompress@@UAGJPB_K@Z ; NCompress::NBcj2::CDecoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:0000263C _rdata          ends
.rdata:0000263C
.rdata:00002640 ; ===========================================================================
.rdata:00002640
.rdata:00002640 ; Segment type: Pure data
.rdata:00002640 ; Segment permissions: Read
.rdata:00002640 _rdata          segment dword public 'DATA' use32
.rdata:00002640                 assume cs:_rdata
.rdata:00002640                 ;org 2640h
.rdata:00002640 ; COMDAT (pick largest)
.rdata:00002640                 dd offset ??_R4CDecoder@NBcj2@NCompress@@6BISequentialInStream@@@ ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00002644                 public ??_7CDecoder@NBcj2@NCompress@@6BISequentialInStream@@@
.rdata:00002644 ; const NCompress::NBcj2::CDecoder::`vftable'{for `ISequentialInStream'}
.rdata:00002644 ??_7CDecoder@NBcj2@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CDecoder@NBcj2@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00002644                                         ; DATA XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+A9o
.rdata:00002644                                         ; [thunk]:NCompress::NBcj2::CDecoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00002648                 dd offset ?AddRef@CDecoder@NBcj2@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NBcj2::CDecoder::AddRef`adjustor{12}' (void)
.rdata:0000264C                 dd offset ?Release@CDecoder@NBcj2@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NBcj2::CDecoder::Release`adjustor{12}' (void)
.rdata:00002650                 dd offset ?Read@CDecoder@NBcj2@NCompress@@UAGJPAXIPAI@Z ; NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)
.rdata:00002650 _rdata          ends
.rdata:00002650
.rdata:00002654 ; ===========================================================================
.rdata:00002654
.rdata:00002654 ; Segment type: Pure data
.rdata:00002654 ; Segment permissions: Read
.rdata:00002654 _rdata          segment dword public 'DATA' use32
.rdata:00002654                 assume cs:_rdata
.rdata:00002654                 ;org 2654h
.rdata:00002654 ; COMDAT (pick largest)
.rdata:00002654                 dd offset ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetInStream2@@@ ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetInStream2'}
.rdata:00002658                 public ??_7CDecoder@NBcj2@NCompress@@6BICompressSetInStream2@@@
.rdata:00002658 ; const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetInStream2'}
.rdata:00002658 ??_7CDecoder@NBcj2@NCompress@@6BICompressSetInStream2@@@ dd offset ?QueryInterface@CDecoder@NBcj2@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00002658                                         ; DATA XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+9Fo
.rdata:00002658                                         ; [thunk]:NCompress::NBcj2::CDecoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:0000265C                 dd offset ?AddRef@CDecoder@NBcj2@NCompress@@W7AGKXZ ; [thunk]:NCompress::NBcj2::CDecoder::AddRef`adjustor{8}' (void)
.rdata:00002660                 dd offset ?Release@CDecoder@NBcj2@NCompress@@W7AGKXZ ; [thunk]:NCompress::NBcj2::CDecoder::Release`adjustor{8}' (void)
.rdata:00002664                 dd offset ?SetInStream2@CDecoder@NBcj2@NCompress@@UAGJIPAUISequentialInStream@@@Z ; NCompress::NBcj2::CDecoder::SetInStream2(uint,ISequentialInStream *)
.rdata:00002668                 dd offset ?ReleaseInStream2@CDecoder@NBcj2@NCompress@@UAGJI@Z ; NCompress::NBcj2::CDecoder::ReleaseInStream2(uint)
.rdata:00002668 _rdata          ends
.rdata:00002668
.rdata:0000266C ; ===========================================================================
.rdata:0000266C
.rdata:0000266C ; Segment type: Pure data
.rdata:0000266C ; Segment permissions: Read
.rdata:0000266C _rdata          segment dword public 'DATA' use32
.rdata:0000266C                 assume cs:_rdata
.rdata:0000266C                 ;org 266Ch
.rdata:0000266C ; COMDAT (pick largest)
.rdata:0000266C                 dd offset ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetFinishMode@@@ ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetFinishMode'}
.rdata:00002670                 public ??_7CDecoder@NBcj2@NCompress@@6BICompressSetFinishMode@@@
.rdata:00002670 ; const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetFinishMode'}
.rdata:00002670 ??_7CDecoder@NBcj2@NCompress@@6BICompressSetFinishMode@@@ dd offset ?QueryInterface@CDecoder@NBcj2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00002670                                         ; DATA XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+95o
.rdata:00002670                                         ; [thunk]:NCompress::NBcj2::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00002674                 dd offset ?AddRef@CDecoder@NBcj2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NBcj2::CDecoder::AddRef`adjustor{4}' (void)
.rdata:00002678                 dd offset ?Release@CDecoder@NBcj2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NBcj2::CDecoder::Release`adjustor{4}' (void)
.rdata:0000267C                 dd offset ?SetFinishMode@CDecoder@NBcj2@NCompress@@UAGJI@Z ; NCompress::NBcj2::CDecoder::SetFinishMode(uint)
.rdata:0000267C _rdata          ends
.rdata:0000267C
.rdata:00002680 ; ===========================================================================
.rdata:00002680
.rdata:00002680 ; Segment type: Pure data
.rdata:00002680 ; Segment permissions: Read
.rdata:00002680 _rdata          segment dword public 'DATA' use32
.rdata:00002680                 assume cs:_rdata
.rdata:00002680                 ;org 2680h
.rdata:00002680 ; COMDAT (pick largest)
.rdata:00002680                 dd offset ??_R4CDecoder@NBcj2@NCompress@@6BICompressCoder2@@@ ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder2'}
.rdata:00002684                 public ??_7CDecoder@NBcj2@NCompress@@6BICompressCoder2@@@
.rdata:00002684 ; const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressCoder2'}
.rdata:00002684 ??_7CDecoder@NBcj2@NCompress@@6BICompressCoder2@@@ dd offset ?QueryInterface@CDecoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002684                                         ; DATA XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+8Co
.rdata:00002684                                         ; NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00002688                 dd offset ?AddRef@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::AddRef(void)
.rdata:0000268C                 dd offset ?Release@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::Release(void)
.rdata:00002690                 dd offset ?Code@CDecoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)
.rdata:00002690 _rdata          ends
.rdata:00002690
.rdata$r:00002694 ; ===========================================================================
.rdata$r:00002694
.rdata$r:00002694 ; Segment type: Pure data
.rdata$r:00002694 ; Segment permissions: Read
.rdata$r:00002694 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002694                 assume cs:_rdata$r
.rdata$r:00002694                 ;org 2694h
.rdata$r:00002694 ; COMDAT (pick any)
.rdata$r:00002694                 public ??_R4CDecoder@NBcj2@NCompress@@6BICompressCoder2@@@
.rdata$r:00002694 ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder2'}
.rdata$r:00002694 ??_R4CDecoder@NBcj2@NCompress@@6BICompressCoder2@@@ db    0
.rdata$r:00002694                                         ; DATA XREF: .rdata:00002680o
.rdata$r:00002695                 db    0
.rdata$r:00002696                 db    0
.rdata$r:00002697                 db    0
.rdata$r:00002698                 db    0
.rdata$r:00002699                 db    0
.rdata$r:0000269A                 db    0
.rdata$r:0000269B                 db    0
.rdata$r:0000269C                 db    0
.rdata$r:0000269D                 db    0
.rdata$r:0000269E                 db    0
.rdata$r:0000269F                 db    0
.rdata$r:000026A0                 dd offset ??_R0?AVCDecoder@NBcj2@NCompress@@@8 ; NCompress::NBcj2::CDecoder `RTTI Type Descriptor'
.rdata$r:000026A4                 dd offset ??_R3CDecoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000026A4 _rdata$r        ends
.rdata$r:000026A4
.data:000026A8 ; ===========================================================================
.data:000026A8
.data:000026A8 ; Segment type: Pure data
.data:000026A8 ; Segment permissions: Read/Write
.data:000026A8 _data           segment dword public 'DATA' use32
.data:000026A8                 assume cs:_data
.data:000026A8                 ;org 26A8h
.data:000026A8 ; COMDAT (pick any)
.data:000026A8                 public ??_R0?AVCDecoder@NBcj2@NCompress@@@8
.data:000026A8 ; class NCompress::NBcj2::CDecoder `RTTI Type Descriptor'
.data:000026A8 ??_R0?AVCDecoder@NBcj2@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000026A8                                         ; DATA XREF: .rdata$r:000026A0o
.data:000026A8                                         ; .rdata$r:NCompress::NBcj2::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000026A8                                         ; const type_info::`vftable'
.data:000026AC                 align 10h
.data:000026B0 a_?avcdecoder@n db '.?AVCDecoder@NBcj2@NCompress@@',0
.data:000026CF                 align 10h
.data:000026CF _data           ends
.data:000026CF
.rdata$r:000026D0 ; ===========================================================================
.rdata$r:000026D0
.rdata$r:000026D0 ; Segment type: Pure data
.rdata$r:000026D0 ; Segment permissions: Read
.rdata$r:000026D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000026D0                 assume cs:_rdata$r
.rdata$r:000026D0                 ;org 26D0h
.rdata$r:000026D0 ; COMDAT (pick any)
.rdata$r:000026D0                 public ??_R3CDecoder@NBcj2@NCompress@@8
.rdata$r:000026D0 ; NCompress::NBcj2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000026D0 ??_R3CDecoder@NBcj2@NCompress@@8 db    0 ; DATA XREF: .rdata$r:000026A4o
.rdata$r:000026D0                                         ; .rdata$r:00002738o ...
.rdata$r:000026D1                 db    0
.rdata$r:000026D2                 db    0
.rdata$r:000026D3                 db    0
.rdata$r:000026D4                 db    5
.rdata$r:000026D5                 db    0
.rdata$r:000026D6                 db    0
.rdata$r:000026D7                 db    0
.rdata$r:000026D8                 db  0Fh
.rdata$r:000026D9                 db    0
.rdata$r:000026DA                 db    0
.rdata$r:000026DB                 db    0
.rdata$r:000026DC                 dd offset ??_R2CDecoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CDecoder::`RTTI Base Class Array'
.rdata$r:000026DC _rdata$r        ends
.rdata$r:000026DC
.rdata$r:000026E0 ; ===========================================================================
.rdata$r:000026E0
.rdata$r:000026E0 ; Segment type: Pure data
.rdata$r:000026E0 ; Segment permissions: Read
.rdata$r:000026E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000026E0                 assume cs:_rdata$r
.rdata$r:000026E0                 ;org 26E0h
.rdata$r:000026E0 ; COMDAT (pick any)
.rdata$r:000026E0                 public ??_R2CDecoder@NBcj2@NCompress@@8
.rdata$r:000026E0 ; NCompress::NBcj2::CDecoder::`RTTI Base Class Array'
.rdata$r:000026E0 ??_R2CDecoder@NBcj2@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NBcj2@NCompress@@8
.rdata$r:000026E0                                         ; DATA XREF: .rdata$r:000026DCo
.rdata$r:000026E0                                         ; NCompress::NBcj2::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000026E4                 dd offset ??_R1A@?0A@EA@ICompressCoder2@@8 ; ICompressCoder2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000026E8                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000026EC                 dd offset ??_R13?0A@EA@ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000026F0                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000026F4                 dd offset ??_R17?0A@EA@ICompressSetInStream2@@8 ; ICompressSetInStream2::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000026F8                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000026FC                 dd offset ??_R1M@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00002700                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00002704                 dd offset ??_R1BA@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00002708                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:0000270C                 dd offset ??_R1BE@?0A@EA@ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00002710                 dd offset ??_R1BE@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (20,-1,0,66)'
.rdata$r:00002714                 dd offset ??_R1BI@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (24,-1,0,64)'
.rdata$r:00002718                 dd offset ??_R1BM@?0A@EA@CBaseCoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CBaseCoder::`RTTI Base Class Descriptor at (28,-1,0,64)'
.rdata$r:0000271C                 db    0
.rdata$r:0000271D                 align 10h
.rdata$r:0000271D _rdata$r        ends
.rdata$r:0000271D
.rdata$r:00002720 ; ===========================================================================
.rdata$r:00002720
.rdata$r:00002720 ; Segment type: Pure data
.rdata$r:00002720 ; Segment permissions: Read
.rdata$r:00002720 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002720                 assume cs:_rdata$r
.rdata$r:00002720                 ;org 2720h
.rdata$r:00002720 ; COMDAT (pick any)
.rdata$r:00002720                 public ??_R1A@?0A@EA@CDecoder@NBcj2@NCompress@@8
.rdata$r:00002720 ; NCompress::NBcj2::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002720 ??_R1A@?0A@EA@CDecoder@NBcj2@NCompress@@8 dd offset ??_R0?AVCDecoder@NBcj2@NCompress@@@8
.rdata$r:00002720                                         ; DATA XREF: .rdata$r:NCompress::NBcj2::CDecoder::`RTTI Base Class Array'o
.rdata$r:00002720                                         ; NCompress::NBcj2::CDecoder `RTTI Type Descriptor'
.rdata$r:00002724                 db  0Eh
.rdata$r:00002725                 db    0
.rdata$r:00002726                 db    0
.rdata$r:00002727                 db    0
.rdata$r:00002728                 db    0
.rdata$r:00002729                 db    0
.rdata$r:0000272A                 db    0
.rdata$r:0000272B                 db    0
.rdata$r:0000272C                 db 0FFh
.rdata$r:0000272D                 db 0FFh
.rdata$r:0000272E                 db 0FFh
.rdata$r:0000272F                 db 0FFh
.rdata$r:00002730                 db    0
.rdata$r:00002731                 db    0
.rdata$r:00002732                 db    0
.rdata$r:00002733                 db    0
.rdata$r:00002734                 db  40h ; @
.rdata$r:00002735                 db    0
.rdata$r:00002736                 db    0
.rdata$r:00002737                 db    0
.rdata$r:00002738                 dd offset ??_R3CDecoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002738 _rdata$r        ends
.rdata$r:00002738
.rdata$r:0000273C ; ===========================================================================
.rdata$r:0000273C
.rdata$r:0000273C ; Segment type: Pure data
.rdata$r:0000273C ; Segment permissions: Read
.rdata$r:0000273C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000273C                 assume cs:_rdata$r
.rdata$r:0000273C                 ;org 273Ch
.rdata$r:0000273C ; COMDAT (pick any)
.rdata$r:0000273C                 public ??_R13?0A@EA@ICompressSetFinishMode@@8
.rdata$r:0000273C ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000273C ??_R13?0A@EA@ICompressSetFinishMode@@8 dd offset ??_R0?AUICompressSetFinishMode@@@8
.rdata$r:0000273C                                         ; DATA XREF: .rdata$r:000026ECo
.rdata$r:0000273C                                         ; ICompressSetFinishMode `RTTI Type Descriptor'
.rdata$r:00002740                 db    1
.rdata$r:00002741                 db    0
.rdata$r:00002742                 db    0
.rdata$r:00002743                 db    0
.rdata$r:00002744                 db    4
.rdata$r:00002745                 db    0
.rdata$r:00002746                 db    0
.rdata$r:00002747                 db    0
.rdata$r:00002748                 db 0FFh
.rdata$r:00002749                 db 0FFh
.rdata$r:0000274A                 db 0FFh
.rdata$r:0000274B                 db 0FFh
.rdata$r:0000274C                 db    0
.rdata$r:0000274D                 db    0
.rdata$r:0000274E                 db    0
.rdata$r:0000274F                 db    0
.rdata$r:00002750                 db  40h ; @
.rdata$r:00002751                 db    0
.rdata$r:00002752                 db    0
.rdata$r:00002753                 db    0
.rdata$r:00002754                 dd offset ??_R3ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002754 _rdata$r        ends
.rdata$r:00002754
.data:00002758 ; ===========================================================================
.data:00002758
.data:00002758 ; Segment type: Pure data
.data:00002758 ; Segment permissions: Read/Write
.data:00002758 _data           segment dword public 'DATA' use32
.data:00002758                 assume cs:_data
.data:00002758                 ;org 2758h
.data:00002758 ; COMDAT (pick any)
.data:00002758                 public ??_R0?AUICompressSetFinishMode@@@8
.data:00002758 ; struct ICompressSetFinishMode `RTTI Type Descriptor'
.data:00002758 ??_R0?AUICompressSetFinishMode@@@8 dd offset ??_7type_info@@6B@
.data:00002758                                         ; DATA XREF: .rdata$r:ICompressSetFinishMode::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00002758                                         ; .rdata$r:ICompressSetFinishMode::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002758                                         ; const type_info::`vftable'
.data:0000275C                 align 10h
.data:00002760 a_?auicompres_0 db '.?AUICompressSetFinishMode@@',0
.data:0000277D                 align 10h
.data:0000277D _data           ends
.data:0000277D
.rdata$r:00002780 ; ===========================================================================
.rdata$r:00002780
.rdata$r:00002780 ; Segment type: Pure data
.rdata$r:00002780 ; Segment permissions: Read
.rdata$r:00002780 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002780                 assume cs:_rdata$r
.rdata$r:00002780                 ;org 2780h
.rdata$r:00002780 ; COMDAT (pick any)
.rdata$r:00002780                 public ??_R3ICompressSetFinishMode@@8
.rdata$r:00002780 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002780 ??_R3ICompressSetFinishMode@@8 db    0  ; DATA XREF: .rdata$r:00002754o
.rdata$r:00002780                                         ; .rdata$r:000027B4o ...
.rdata$r:00002781                 db    0
.rdata$r:00002782                 db    0
.rdata$r:00002783                 db    0
.rdata$r:00002784                 db    0
.rdata$r:00002785                 db    0
.rdata$r:00002786                 db    0
.rdata$r:00002787                 db    0
.rdata$r:00002788                 db    2
.rdata$r:00002789                 db    0
.rdata$r:0000278A                 db    0
.rdata$r:0000278B                 db    0
.rdata$r:0000278C                 dd offset ??_R2ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Base Class Array'
.rdata$r:0000278C _rdata$r        ends
.rdata$r:0000278C
.rdata$r:00002790 ; ===========================================================================
.rdata$r:00002790
.rdata$r:00002790 ; Segment type: Pure data
.rdata$r:00002790 ; Segment permissions: Read
.rdata$r:00002790 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002790                 assume cs:_rdata$r
.rdata$r:00002790                 ;org 2790h
.rdata$r:00002790 ; COMDAT (pick any)
.rdata$r:00002790                 public ??_R2ICompressSetFinishMode@@8
.rdata$r:00002790 ; ICompressSetFinishMode::`RTTI Base Class Array'
.rdata$r:00002790 ??_R2ICompressSetFinishMode@@8 dd offset ??_R1A@?0A@EA@ICompressSetFinishMode@@8
.rdata$r:00002790                                         ; DATA XREF: .rdata$r:0000278Co
.rdata$r:00002790                                         ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002794                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002798                 db    0
.rdata$r:00002799                 align 4
.rdata$r:00002799 _rdata$r        ends
.rdata$r:00002799
.rdata$r:0000279C ; ===========================================================================
.rdata$r:0000279C
.rdata$r:0000279C ; Segment type: Pure data
.rdata$r:0000279C ; Segment permissions: Read
.rdata$r:0000279C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000279C                 assume cs:_rdata$r
.rdata$r:0000279C                 ;org 279Ch
.rdata$r:0000279C ; COMDAT (pick any)
.rdata$r:0000279C                 public ??_R1A@?0A@EA@ICompressSetFinishMode@@8
.rdata$r:0000279C ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000279C ??_R1A@?0A@EA@ICompressSetFinishMode@@8 dd offset ??_R0?AUICompressSetFinishMode@@@8
.rdata$r:0000279C                                         ; DATA XREF: .rdata$r:ICompressSetFinishMode::`RTTI Base Class Array'o
.rdata$r:0000279C                                         ; ICompressSetFinishMode `RTTI Type Descriptor'
.rdata$r:000027A0                 db    1
.rdata$r:000027A1                 db    0
.rdata$r:000027A2                 db    0
.rdata$r:000027A3                 db    0
.rdata$r:000027A4                 db    0
.rdata$r:000027A5                 db    0
.rdata$r:000027A6                 db    0
.rdata$r:000027A7                 db    0
.rdata$r:000027A8                 db 0FFh
.rdata$r:000027A9                 db 0FFh
.rdata$r:000027AA                 db 0FFh
.rdata$r:000027AB                 db 0FFh
.rdata$r:000027AC                 db    0
.rdata$r:000027AD                 db    0
.rdata$r:000027AE                 db    0
.rdata$r:000027AF                 db    0
.rdata$r:000027B0                 db  40h ; @
.rdata$r:000027B1                 db    0
.rdata$r:000027B2                 db    0
.rdata$r:000027B3                 db    0
.rdata$r:000027B4                 dd offset ??_R3ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:000027B4 _rdata$r        ends
.rdata$r:000027B4
.rdata$r:000027B8 ; ===========================================================================
.rdata$r:000027B8
.rdata$r:000027B8 ; Segment type: Pure data
.rdata$r:000027B8 ; Segment permissions: Read
.rdata$r:000027B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000027B8                 assume cs:_rdata$r
.rdata$r:000027B8                 ;org 27B8h
.rdata$r:000027B8 ; COMDAT (pick any)
.rdata$r:000027B8                 public ??_R17?0A@EA@ICompressSetInStream2@@8
.rdata$r:000027B8 ; ICompressSetInStream2::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000027B8 ??_R17?0A@EA@ICompressSetInStream2@@8 dd offset ??_R0?AUICompressSetInStream2@@@8
.rdata$r:000027B8                                         ; DATA XREF: .rdata$r:000026F4o
.rdata$r:000027B8                                         ; ICompressSetInStream2 `RTTI Type Descriptor'
.rdata$r:000027BC                 db    1
.rdata$r:000027BD                 db    0
.rdata$r:000027BE                 db    0
.rdata$r:000027BF                 db    0
.rdata$r:000027C0                 db    8
.rdata$r:000027C1                 db    0
.rdata$r:000027C2                 db    0
.rdata$r:000027C3                 db    0
.rdata$r:000027C4                 db 0FFh
.rdata$r:000027C5                 db 0FFh
.rdata$r:000027C6                 db 0FFh
.rdata$r:000027C7                 db 0FFh
.rdata$r:000027C8                 db    0
.rdata$r:000027C9                 db    0
.rdata$r:000027CA                 db    0
.rdata$r:000027CB                 db    0
.rdata$r:000027CC                 db  40h ; @
.rdata$r:000027CD                 db    0
.rdata$r:000027CE                 db    0
.rdata$r:000027CF                 db    0
.rdata$r:000027D0                 dd offset ??_R3ICompressSetInStream2@@8 ; ICompressSetInStream2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000027D0 _rdata$r        ends
.rdata$r:000027D0
.data:000027D4 ; ===========================================================================
.data:000027D4
.data:000027D4 ; Segment type: Pure data
.data:000027D4 ; Segment permissions: Read/Write
.data:000027D4 _data           segment dword public 'DATA' use32
.data:000027D4                 assume cs:_data
.data:000027D4                 ;org 27D4h
.data:000027D4 ; COMDAT (pick any)
.data:000027D4                 public ??_R0?AUICompressSetInStream2@@@8
.data:000027D4 ; struct ICompressSetInStream2 `RTTI Type Descriptor'
.data:000027D4 ??_R0?AUICompressSetInStream2@@@8 dd offset ??_7type_info@@6B@
.data:000027D4                                         ; DATA XREF: .rdata$r:ICompressSetInStream2::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000027D4                                         ; .rdata$r:ICompressSetInStream2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000027D4                                         ; const type_info::`vftable'
.data:000027D8                 db    0
.data:000027D9                 db    0
.data:000027DA                 db    0
.data:000027DB                 db    0
.data:000027DC                 db  2Eh ; .
.data:000027DD                 db  3Fh ; ?
.data:000027DE                 db  41h ; A
.data:000027DF                 db  55h ; U
.data:000027E0                 db  49h ; I
.data:000027E1                 db  43h ; C
.data:000027E2                 db  6Fh ; o
.data:000027E3                 db  6Dh ; m
.data:000027E4                 db  70h ; p
.data:000027E5                 db  72h ; r
.data:000027E6                 db  65h ; e
.data:000027E7                 db  73h ; s
.data:000027E8                 db  73h ; s
.data:000027E9                 db  53h ; S
.data:000027EA                 db  65h ; e
.data:000027EB                 db  74h ; t
.data:000027EC                 db  49h ; I
.data:000027ED                 db  6Eh ; n
.data:000027EE                 db  53h ; S
.data:000027EF                 db  74h ; t
.data:000027F0                 db  72h ; r
.data:000027F1                 db  65h ; e
.data:000027F2                 db  61h ; a
.data:000027F3                 db  6Dh ; m
.data:000027F4                 db  32h ; 2
.data:000027F5                 db  40h ; @
.data:000027F6                 db  40h ; @
.data:000027F7                 db    0
.data:000027F7 _data           ends
.data:000027F7
.rdata$r:000027F8 ; ===========================================================================
.rdata$r:000027F8
.rdata$r:000027F8 ; Segment type: Pure data
.rdata$r:000027F8 ; Segment permissions: Read
.rdata$r:000027F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000027F8                 assume cs:_rdata$r
.rdata$r:000027F8                 ;org 27F8h
.rdata$r:000027F8 ; COMDAT (pick any)
.rdata$r:000027F8                 public ??_R3ICompressSetInStream2@@8
.rdata$r:000027F8 ; ICompressSetInStream2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000027F8 ??_R3ICompressSetInStream2@@8 db    0   ; DATA XREF: .rdata$r:000027D0o
.rdata$r:000027F8                                         ; .rdata$r:0000282Co ...
.rdata$r:000027F9                 db    0
.rdata$r:000027FA                 db    0
.rdata$r:000027FB                 db    0
.rdata$r:000027FC                 db    0
.rdata$r:000027FD                 db    0
.rdata$r:000027FE                 db    0
.rdata$r:000027FF                 db    0
.rdata$r:00002800                 db    2
.rdata$r:00002801                 db    0
.rdata$r:00002802                 db    0
.rdata$r:00002803                 db    0
.rdata$r:00002804                 dd offset ??_R2ICompressSetInStream2@@8 ; ICompressSetInStream2::`RTTI Base Class Array'
.rdata$r:00002804 _rdata$r        ends
.rdata$r:00002804
.rdata$r:00002808 ; ===========================================================================
.rdata$r:00002808
.rdata$r:00002808 ; Segment type: Pure data
.rdata$r:00002808 ; Segment permissions: Read
.rdata$r:00002808 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002808                 assume cs:_rdata$r
.rdata$r:00002808                 ;org 2808h
.rdata$r:00002808 ; COMDAT (pick any)
.rdata$r:00002808                 public ??_R2ICompressSetInStream2@@8
.rdata$r:00002808 ; ICompressSetInStream2::`RTTI Base Class Array'
.rdata$r:00002808 ??_R2ICompressSetInStream2@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream2@@8
.rdata$r:00002808                                         ; DATA XREF: .rdata$r:00002804o
.rdata$r:00002808                                         ; ICompressSetInStream2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000280C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002810                 db    0
.rdata$r:00002811                 align 4
.rdata$r:00002811 _rdata$r        ends
.rdata$r:00002811
.rdata$r:00002814 ; ===========================================================================
.rdata$r:00002814
.rdata$r:00002814 ; Segment type: Pure data
.rdata$r:00002814 ; Segment permissions: Read
.rdata$r:00002814 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002814                 assume cs:_rdata$r
.rdata$r:00002814                 ;org 2814h
.rdata$r:00002814 ; COMDAT (pick any)
.rdata$r:00002814                 public ??_R1A@?0A@EA@ICompressSetInStream2@@8
.rdata$r:00002814 ; ICompressSetInStream2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002814 ??_R1A@?0A@EA@ICompressSetInStream2@@8 dd offset ??_R0?AUICompressSetInStream2@@@8
.rdata$r:00002814                                         ; DATA XREF: .rdata$r:ICompressSetInStream2::`RTTI Base Class Array'o
.rdata$r:00002814                                         ; ICompressSetInStream2 `RTTI Type Descriptor'
.rdata$r:00002818                 db    1
.rdata$r:00002819                 db    0
.rdata$r:0000281A                 db    0
.rdata$r:0000281B                 db    0
.rdata$r:0000281C                 db    0
.rdata$r:0000281D                 db    0
.rdata$r:0000281E                 db    0
.rdata$r:0000281F                 db    0
.rdata$r:00002820                 db 0FFh
.rdata$r:00002821                 db 0FFh
.rdata$r:00002822                 db 0FFh
.rdata$r:00002823                 db 0FFh
.rdata$r:00002824                 db    0
.rdata$r:00002825                 db    0
.rdata$r:00002826                 db    0
.rdata$r:00002827                 db    0
.rdata$r:00002828                 db  40h ; @
.rdata$r:00002829                 db    0
.rdata$r:0000282A                 db    0
.rdata$r:0000282B                 db    0
.rdata$r:0000282C                 dd offset ??_R3ICompressSetInStream2@@8 ; ICompressSetInStream2::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000282C _rdata$r        ends
.rdata$r:0000282C
.rdata$r:00002830 ; ===========================================================================
.rdata$r:00002830
.rdata$r:00002830 ; Segment type: Pure data
.rdata$r:00002830 ; Segment permissions: Read
.rdata$r:00002830 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002830                 assume cs:_rdata$r
.rdata$r:00002830                 ;org 2830h
.rdata$r:00002830 ; COMDAT (pick any)
.rdata$r:00002830                 public ??_R1M@?0A@EA@ISequentialInStream@@8
.rdata$r:00002830 ; ISequentialInStream::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00002830 ??_R1M@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00002830                                         ; DATA XREF: .rdata$r:000026FCo
.rdata$r:00002830                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00002834                 db    1
.rdata$r:00002835                 db    0
.rdata$r:00002836                 db    0
.rdata$r:00002837                 db    0
.rdata$r:00002838                 db  0Ch
.rdata$r:00002839                 db    0
.rdata$r:0000283A                 db    0
.rdata$r:0000283B                 db    0
.rdata$r:0000283C                 db 0FFh
.rdata$r:0000283D                 db 0FFh
.rdata$r:0000283E                 db 0FFh
.rdata$r:0000283F                 db 0FFh
.rdata$r:00002840                 db    0
.rdata$r:00002841                 db    0
.rdata$r:00002842                 db    0
.rdata$r:00002843                 db    0
.rdata$r:00002844                 db  40h ; @
.rdata$r:00002845                 db    0
.rdata$r:00002846                 db    0
.rdata$r:00002847                 db    0
.rdata$r:00002848                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002848 _rdata$r        ends
.rdata$r:00002848
.data:0000284C ; ===========================================================================
.data:0000284C
.data:0000284C ; Segment type: Pure data
.data:0000284C ; Segment permissions: Read/Write
.data:0000284C _data           segment dword public 'DATA' use32
.data:0000284C                 assume cs:_data
.data:0000284C                 ;org 284Ch
.data:0000284C ; COMDAT (pick any)
.data:0000284C                 public ??_R0?AUISequentialInStream@@@8
.data:0000284C ; struct ISequentialInStream `RTTI Type Descriptor'
.data:0000284C ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:0000284C                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:0000284C                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000284C                                         ; const type_info::`vftable'
.data:00002850                 db    0
.data:00002851                 db    0
.data:00002852                 db    0
.data:00002853                 db    0
.data:00002854                 db  2Eh ; .
.data:00002855                 db  3Fh ; ?
.data:00002856                 db  41h ; A
.data:00002857                 db  55h ; U
.data:00002858                 db  49h ; I
.data:00002859                 db  53h ; S
.data:0000285A                 db  65h ; e
.data:0000285B                 db  71h ; q
.data:0000285C                 db  75h ; u
.data:0000285D                 db  65h ; e
.data:0000285E                 db  6Eh ; n
.data:0000285F                 db  74h ; t
.data:00002860                 db  69h ; i
.data:00002861                 db  61h ; a
.data:00002862                 db  6Ch ; l
.data:00002863                 db  49h ; I
.data:00002864                 db  6Eh ; n
.data:00002865                 db  53h ; S
.data:00002866                 db  74h ; t
.data:00002867                 db  72h ; r
.data:00002868                 db  65h ; e
.data:00002869                 db  61h ; a
.data:0000286A                 db  6Dh ; m
.data:0000286B                 db  40h ; @
.data:0000286C                 db  40h ; @
.data:0000286D                 db    0
.data:0000286E                 align 10h
.data:0000286E _data           ends
.data:0000286E
.rdata$r:00002870 ; ===========================================================================
.rdata$r:00002870
.rdata$r:00002870 ; Segment type: Pure data
.rdata$r:00002870 ; Segment permissions: Read
.rdata$r:00002870 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002870                 assume cs:_rdata$r
.rdata$r:00002870                 ;org 2870h
.rdata$r:00002870 ; COMDAT (pick any)
.rdata$r:00002870                 public ??_R3ISequentialInStream@@8
.rdata$r:00002870 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002870 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00002848o
.rdata$r:00002870                                         ; .rdata$r:000028A4o ...
.rdata$r:00002871                 db    0
.rdata$r:00002872                 db    0
.rdata$r:00002873                 db    0
.rdata$r:00002874                 db    0
.rdata$r:00002875                 db    0
.rdata$r:00002876                 db    0
.rdata$r:00002877                 db    0
.rdata$r:00002878                 db    2
.rdata$r:00002879                 db    0
.rdata$r:0000287A                 db    0
.rdata$r:0000287B                 db    0
.rdata$r:0000287C                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:0000287C _rdata$r        ends
.rdata$r:0000287C
.rdata$r:00002880 ; ===========================================================================
.rdata$r:00002880
.rdata$r:00002880 ; Segment type: Pure data
.rdata$r:00002880 ; Segment permissions: Read
.rdata$r:00002880 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002880                 assume cs:_rdata$r
.rdata$r:00002880                 ;org 2880h
.rdata$r:00002880 ; COMDAT (pick any)
.rdata$r:00002880                 public ??_R2ISequentialInStream@@8
.rdata$r:00002880 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00002880 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00002880                                         ; DATA XREF: .rdata$r:0000287Co
.rdata$r:00002880                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002884                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002888                 db    0
.rdata$r:00002889                 align 4
.rdata$r:00002889 _rdata$r        ends
.rdata$r:00002889
.rdata$r:0000288C ; ===========================================================================
.rdata$r:0000288C
.rdata$r:0000288C ; Segment type: Pure data
.rdata$r:0000288C ; Segment permissions: Read
.rdata$r:0000288C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000288C                 assume cs:_rdata$r
.rdata$r:0000288C                 ;org 288Ch
.rdata$r:0000288C ; COMDAT (pick any)
.rdata$r:0000288C                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000288C ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000288C ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:0000288C                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:0000288C                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00002890                 db    1
.rdata$r:00002891                 db    0
.rdata$r:00002892                 db    0
.rdata$r:00002893                 db    0
.rdata$r:00002894                 db    0
.rdata$r:00002895                 db    0
.rdata$r:00002896                 db    0
.rdata$r:00002897                 db    0
.rdata$r:00002898                 db 0FFh
.rdata$r:00002899                 db 0FFh
.rdata$r:0000289A                 db 0FFh
.rdata$r:0000289B                 db 0FFh
.rdata$r:0000289C                 db    0
.rdata$r:0000289D                 db    0
.rdata$r:0000289E                 db    0
.rdata$r:0000289F                 db    0
.rdata$r:000028A0                 db  40h ; @
.rdata$r:000028A1                 db    0
.rdata$r:000028A2                 db    0
.rdata$r:000028A3                 db    0
.rdata$r:000028A4                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028A4 _rdata$r        ends
.rdata$r:000028A4
.rdata$r:000028A8 ; ===========================================================================
.rdata$r:000028A8
.rdata$r:000028A8 ; Segment type: Pure data
.rdata$r:000028A8 ; Segment permissions: Read
.rdata$r:000028A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000028A8                 assume cs:_rdata$r
.rdata$r:000028A8                 ;org 28A8h
.rdata$r:000028A8 ; COMDAT (pick any)
.rdata$r:000028A8                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:000028A8 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:000028A8 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000028A8                                         ; DATA XREF: .rdata$r:00002700o
.rdata$r:000028A8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000028AC                 align 10h
.rdata$r:000028B0                 db  0Ch
.rdata$r:000028B1                 db    0
.rdata$r:000028B2                 db    0
.rdata$r:000028B3                 db    0
.rdata$r:000028B4                 db 0FFh
.rdata$r:000028B5                 db 0FFh
.rdata$r:000028B6                 db 0FFh
.rdata$r:000028B7                 db 0FFh
.rdata$r:000028B8                 db    0
.rdata$r:000028B9                 db    0
.rdata$r:000028BA                 db    0
.rdata$r:000028BB                 db    0
.rdata$r:000028BC                 db  42h ; B
.rdata$r:000028BD                 db    0
.rdata$r:000028BE                 db    0
.rdata$r:000028BF                 db    0
.rdata$r:000028C0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028C0 _rdata$r        ends
.rdata$r:000028C0
.rdata$r:000028C4 ; ===========================================================================
.rdata$r:000028C4
.rdata$r:000028C4 ; Segment type: Pure data
.rdata$r:000028C4 ; Segment permissions: Read
.rdata$r:000028C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000028C4                 assume cs:_rdata$r
.rdata$r:000028C4                 ;org 28C4h
.rdata$r:000028C4 ; COMDAT (pick any)
.rdata$r:000028C4                 public ??_R1BA@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:000028C4 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000028C4 ??_R1BA@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:000028C4                                         ; DATA XREF: .rdata$r:00002704o
.rdata$r:000028C4                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:000028C8                 db    1
.rdata$r:000028C9                 db    0
.rdata$r:000028CA                 db    0
.rdata$r:000028CB                 db    0
.rdata$r:000028CC                 db  10h
.rdata$r:000028CD                 db    0
.rdata$r:000028CE                 db    0
.rdata$r:000028CF                 db    0
.rdata$r:000028D0                 db 0FFh
.rdata$r:000028D1                 db 0FFh
.rdata$r:000028D2                 db 0FFh
.rdata$r:000028D3                 db 0FFh
.rdata$r:000028D4                 db    0
.rdata$r:000028D5                 db    0
.rdata$r:000028D6                 db    0
.rdata$r:000028D7                 db    0
.rdata$r:000028D8                 db  40h ; @
.rdata$r:000028D9                 db    0
.rdata$r:000028DA                 db    0
.rdata$r:000028DB                 db    0
.rdata$r:000028DC                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028DC _rdata$r        ends
.rdata$r:000028DC
.data:000028E0 ; ===========================================================================
.data:000028E0
.data:000028E0 ; Segment type: Pure data
.data:000028E0 ; Segment permissions: Read/Write
.data:000028E0 _data           segment dword public 'DATA' use32
.data:000028E0                 assume cs:_data
.data:000028E0                 ;org 28E0h
.data:000028E0 ; COMDAT (pick any)
.data:000028E0                 public ??_R0?AUICompressSetOutStreamSize@@@8
.data:000028E0 ; struct ICompressSetOutStreamSize `RTTI Type Descriptor'
.data:000028E0 ??_R0?AUICompressSetOutStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:000028E0                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:000028E0                                         ; .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000028E0                                         ; const type_info::`vftable'
.data:000028E4                 align 8
.data:000028E8 a_?auicompres_1 db '.?AUICompressSetOutStreamSize@@',0
.data:000028E8 _data           ends
.data:000028E8
.rdata$r:00002908 ; ===========================================================================
.rdata$r:00002908
.rdata$r:00002908 ; Segment type: Pure data
.rdata$r:00002908 ; Segment permissions: Read
.rdata$r:00002908 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002908                 assume cs:_rdata$r
.rdata$r:00002908                 ;org 2908h
.rdata$r:00002908 ; COMDAT (pick any)
.rdata$r:00002908                 public ??_R3ICompressSetOutStreamSize@@8
.rdata$r:00002908 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002908 ??_R3ICompressSetOutStreamSize@@8 db    0 ; DATA XREF: .rdata$r:000028DCo
.rdata$r:00002908                                         ; .rdata$r:0000293Co ...
.rdata$r:00002909                 db    0
.rdata$r:0000290A                 db    0
.rdata$r:0000290B                 db    0
.rdata$r:0000290C                 db    0
.rdata$r:0000290D                 db    0
.rdata$r:0000290E                 db    0
.rdata$r:0000290F                 db    0
.rdata$r:00002910                 db    2
.rdata$r:00002911                 db    0
.rdata$r:00002912                 db    0
.rdata$r:00002913                 db    0
.rdata$r:00002914                 dd offset ??_R2ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00002914 _rdata$r        ends
.rdata$r:00002914
.rdata$r:00002918 ; ===========================================================================
.rdata$r:00002918
.rdata$r:00002918 ; Segment type: Pure data
.rdata$r:00002918 ; Segment permissions: Read
.rdata$r:00002918 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002918                 assume cs:_rdata$r
.rdata$r:00002918                 ;org 2918h
.rdata$r:00002918 ; COMDAT (pick any)
.rdata$r:00002918                 public ??_R2ICompressSetOutStreamSize@@8
.rdata$r:00002918 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00002918 ??_R2ICompressSetOutStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00002918                                         ; DATA XREF: .rdata$r:00002914o
.rdata$r:00002918                                         ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000291C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002920                 db    0
.rdata$r:00002921                 align 4
.rdata$r:00002921 _rdata$r        ends
.rdata$r:00002921
.rdata$r:00002924 ; ===========================================================================
.rdata$r:00002924
.rdata$r:00002924 ; Segment type: Pure data
.rdata$r:00002924 ; Segment permissions: Read
.rdata$r:00002924 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002924                 assume cs:_rdata$r
.rdata$r:00002924                 ;org 2924h
.rdata$r:00002924 ; COMDAT (pick any)
.rdata$r:00002924                 public ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00002924 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002924 ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:00002924                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Array'o
.rdata$r:00002924                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00002928                 db    1
.rdata$r:00002929                 db    0
.rdata$r:0000292A                 db    0
.rdata$r:0000292B                 db    0
.rdata$r:0000292C                 db    0
.rdata$r:0000292D                 db    0
.rdata$r:0000292E                 db    0
.rdata$r:0000292F                 db    0
.rdata$r:00002930                 db 0FFh
.rdata$r:00002931                 db 0FFh
.rdata$r:00002932                 db 0FFh
.rdata$r:00002933                 db 0FFh
.rdata$r:00002934                 db    0
.rdata$r:00002935                 db    0
.rdata$r:00002936                 db    0
.rdata$r:00002937                 db    0
.rdata$r:00002938                 db  40h ; @
.rdata$r:00002939                 db    0
.rdata$r:0000293A                 db    0
.rdata$r:0000293B                 db    0
.rdata$r:0000293C                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000293C _rdata$r        ends
.rdata$r:0000293C
.rdata$r:00002940 ; ===========================================================================
.rdata$r:00002940
.rdata$r:00002940 ; Segment type: Pure data
.rdata$r:00002940 ; Segment permissions: Read
.rdata$r:00002940 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002940                 assume cs:_rdata$r
.rdata$r:00002940                 ;org 2940h
.rdata$r:00002940 ; COMDAT (pick any)
.rdata$r:00002940                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:00002940 ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:00002940 ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002940                                         ; DATA XREF: .rdata$r:00002708o
.rdata$r:00002940                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002944                 align 8
.rdata$r:00002948                 db  10h
.rdata$r:00002949                 db    0
.rdata$r:0000294A                 db    0
.rdata$r:0000294B                 db    0
.rdata$r:0000294C                 db 0FFh
.rdata$r:0000294D                 db 0FFh
.rdata$r:0000294E                 db 0FFh
.rdata$r:0000294F                 db 0FFh
.rdata$r:00002950                 db    0
.rdata$r:00002951                 db    0
.rdata$r:00002952                 db    0
.rdata$r:00002953                 db    0
.rdata$r:00002954                 db  42h ; B
.rdata$r:00002955                 db    0
.rdata$r:00002956                 db    0
.rdata$r:00002957                 db    0
.rdata$r:00002958                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002958 _rdata$r        ends
.rdata$r:00002958
.rdata$r:0000295C ; ===========================================================================
.rdata$r:0000295C
.rdata$r:0000295C ; Segment type: Pure data
.rdata$r:0000295C ; Segment permissions: Read
.rdata$r:0000295C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000295C                 assume cs:_rdata$r
.rdata$r:0000295C                 ;org 295Ch
.rdata$r:0000295C ; COMDAT (pick any)
.rdata$r:0000295C                 public ??_R1BE@?0A@EA@ICompressSetBufSize@@8
.rdata$r:0000295C ; ICompressSetBufSize::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:0000295C ??_R1BE@?0A@EA@ICompressSetBufSize@@8 dd offset ??_R0?AUICompressSetBufSize@@@8
.rdata$r:0000295C                                         ; DATA XREF: .rdata$r:0000270Co
.rdata$r:0000295C                                         ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:00002960                 db    1
.rdata$r:00002961                 db    0
.rdata$r:00002962                 db    0
.rdata$r:00002963                 db    0
.rdata$r:00002964                 db  14h
.rdata$r:00002965                 db    0
.rdata$r:00002966                 db    0
.rdata$r:00002967                 db    0
.rdata$r:00002968                 db 0FFh
.rdata$r:00002969                 db 0FFh
.rdata$r:0000296A                 db 0FFh
.rdata$r:0000296B                 db 0FFh
.rdata$r:0000296C                 db    0
.rdata$r:0000296D                 db    0
.rdata$r:0000296E                 db    0
.rdata$r:0000296F                 db    0
.rdata$r:00002970                 db  40h ; @
.rdata$r:00002971                 db    0
.rdata$r:00002972                 db    0
.rdata$r:00002973                 db    0
.rdata$r:00002974                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002974 _rdata$r        ends
.rdata$r:00002974
.rdata$r:00002978 ; ===========================================================================
.rdata$r:00002978
.rdata$r:00002978 ; Segment type: Pure data
.rdata$r:00002978 ; Segment permissions: Read
.rdata$r:00002978 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002978                 assume cs:_rdata$r
.rdata$r:00002978                 ;org 2978h
.rdata$r:00002978 ; COMDAT (pick any)
.rdata$r:00002978                 public ??_R1BE@?0A@EC@IUnknown@@8
.rdata$r:00002978 ; IUnknown::`RTTI Base Class Descriptor at (20, -1, 0, 66)'
.rdata$r:00002978 ??_R1BE@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002978                                         ; DATA XREF: .rdata$r:00002710o
.rdata$r:00002978                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000297C                 align 10h
.rdata$r:00002980                 db  14h
.rdata$r:00002981                 db    0
.rdata$r:00002982                 db    0
.rdata$r:00002983                 db    0
.rdata$r:00002984                 db 0FFh
.rdata$r:00002985                 db 0FFh
.rdata$r:00002986                 db 0FFh
.rdata$r:00002987                 db 0FFh
.rdata$r:00002988                 db    0
.rdata$r:00002989                 db    0
.rdata$r:0000298A                 db    0
.rdata$r:0000298B                 db    0
.rdata$r:0000298C                 db  42h ; B
.rdata$r:0000298D                 db    0
.rdata$r:0000298E                 db    0
.rdata$r:0000298F                 db    0
.rdata$r:00002990                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002990 _rdata$r        ends
.rdata$r:00002990
.rdata$r:00002994 ; ===========================================================================
.rdata$r:00002994
.rdata$r:00002994 ; Segment type: Pure data
.rdata$r:00002994 ; Segment permissions: Read
.rdata$r:00002994 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002994                 assume cs:_rdata$r
.rdata$r:00002994                 ;org 2994h
.rdata$r:00002994 ; COMDAT (pick any)
.rdata$r:00002994                 public ??_R1BI@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002994 ; CMyUnknownImp::`RTTI Base Class Descriptor at (24, -1, 0, 64)'
.rdata$r:00002994 ??_R1BI@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002994                                         ; DATA XREF: .rdata$r:00002714o
.rdata$r:00002994                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002998                 db    0
.rdata$r:00002999                 db    0
.rdata$r:0000299A                 db    0
.rdata$r:0000299B                 db    0
.rdata$r:0000299C                 db  18h
.rdata$r:0000299D                 db    0
.rdata$r:0000299E                 db    0
.rdata$r:0000299F                 db    0
.rdata$r:000029A0                 db 0FFh
.rdata$r:000029A1                 db 0FFh
.rdata$r:000029A2                 db 0FFh
.rdata$r:000029A3                 db 0FFh
.rdata$r:000029A4                 db    0
.rdata$r:000029A5                 db    0
.rdata$r:000029A6                 db    0
.rdata$r:000029A7                 db    0
.rdata$r:000029A8                 db  40h ; @
.rdata$r:000029A9                 db    0
.rdata$r:000029AA                 db    0
.rdata$r:000029AB                 db    0
.rdata$r:000029AC                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000029AC _rdata$r        ends
.rdata$r:000029AC
.rdata$r:000029B0 ; ===========================================================================
.rdata$r:000029B0
.rdata$r:000029B0 ; Segment type: Pure data
.rdata$r:000029B0 ; Segment permissions: Read
.rdata$r:000029B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000029B0                 assume cs:_rdata$r
.rdata$r:000029B0                 ;org 29B0h
.rdata$r:000029B0 ; COMDAT (pick any)
.rdata$r:000029B0                 public ??_R1BM@?0A@EA@CBaseCoder@NBcj2@NCompress@@8
.rdata$r:000029B0 ; NCompress::NBcj2::CBaseCoder::`RTTI Base Class Descriptor at (28, -1, 0, 64)'
.rdata$r:000029B0 ??_R1BM@?0A@EA@CBaseCoder@NBcj2@NCompress@@8 dd offset ??_R0?AVCBaseCoder@NBcj2@NCompress@@@8
.rdata$r:000029B0                                         ; DATA XREF: .rdata$r:00002718o
.rdata$r:000029B0                                         ; NCompress::NBcj2::CBaseCoder `RTTI Type Descriptor'
.rdata$r:000029B4                 align 8
.rdata$r:000029B8                 db  1Ch
.rdata$r:000029B9                 db    0
.rdata$r:000029BA                 db    0
.rdata$r:000029BB                 db    0
.rdata$r:000029BC                 db 0FFh
.rdata$r:000029BD                 db 0FFh
.rdata$r:000029BE                 db 0FFh
.rdata$r:000029BF                 db 0FFh
.rdata$r:000029C0                 db    0
.rdata$r:000029C1                 db    0
.rdata$r:000029C2                 db    0
.rdata$r:000029C3                 db    0
.rdata$r:000029C4                 db  40h ; @
.rdata$r:000029C5                 db    0
.rdata$r:000029C6                 db    0
.rdata$r:000029C7                 db    0
.rdata$r:000029C8                 dd offset ??_R3CBaseCoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000029C8 _rdata$r        ends
.rdata$r:000029C8
.rdata$r:000029CC ; ===========================================================================
.rdata$r:000029CC
.rdata$r:000029CC ; Segment type: Pure data
.rdata$r:000029CC ; Segment permissions: Read
.rdata$r:000029CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000029CC                 assume cs:_rdata$r
.rdata$r:000029CC                 ;org 29CCh
.rdata$r:000029CC ; COMDAT (pick any)
.rdata$r:000029CC                 public ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetFinishMode@@@
.rdata$r:000029CC ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetFinishMode'}
.rdata$r:000029CC ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetFinishMode@@@ db    0
.rdata$r:000029CC                                         ; DATA XREF: .rdata:0000266Co
.rdata$r:000029CD                 db    0
.rdata$r:000029CE                 db    0
.rdata$r:000029CF                 db    0
.rdata$r:000029D0                 db    4
.rdata$r:000029D1                 db    0
.rdata$r:000029D2                 db    0
.rdata$r:000029D3                 db    0
.rdata$r:000029D4                 db    0
.rdata$r:000029D5                 db    0
.rdata$r:000029D6                 db    0
.rdata$r:000029D7                 db    0
.rdata$r:000029D8                 dd offset ??_R0?AVCDecoder@NBcj2@NCompress@@@8 ; NCompress::NBcj2::CDecoder `RTTI Type Descriptor'
.rdata$r:000029DC                 dd offset ??_R3CDecoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000029DC _rdata$r        ends
.rdata$r:000029DC
.rdata$r:000029E0 ; ===========================================================================
.rdata$r:000029E0
.rdata$r:000029E0 ; Segment type: Pure data
.rdata$r:000029E0 ; Segment permissions: Read
.rdata$r:000029E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000029E0                 assume cs:_rdata$r
.rdata$r:000029E0                 ;org 29E0h
.rdata$r:000029E0 ; COMDAT (pick any)
.rdata$r:000029E0                 public ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetInStream2@@@
.rdata$r:000029E0 ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetInStream2'}
.rdata$r:000029E0 ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetInStream2@@@ db    0
.rdata$r:000029E0                                         ; DATA XREF: .rdata:00002654o
.rdata$r:000029E1                 db    0
.rdata$r:000029E2                 db    0
.rdata$r:000029E3                 db    0
.rdata$r:000029E4                 db    8
.rdata$r:000029E5                 db    0
.rdata$r:000029E6                 db    0
.rdata$r:000029E7                 db    0
.rdata$r:000029E8                 db    0
.rdata$r:000029E9                 db    0
.rdata$r:000029EA                 db    0
.rdata$r:000029EB                 db    0
.rdata$r:000029EC                 dd offset ??_R0?AVCDecoder@NBcj2@NCompress@@@8 ; NCompress::NBcj2::CDecoder `RTTI Type Descriptor'
.rdata$r:000029F0                 dd offset ??_R3CDecoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000029F0 _rdata$r        ends
.rdata$r:000029F0
.rdata$r:000029F4 ; ===========================================================================
.rdata$r:000029F4
.rdata$r:000029F4 ; Segment type: Pure data
.rdata$r:000029F4 ; Segment permissions: Read
.rdata$r:000029F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000029F4                 assume cs:_rdata$r
.rdata$r:000029F4                 ;org 29F4h
.rdata$r:000029F4 ; COMDAT (pick any)
.rdata$r:000029F4                 public ??_R4CDecoder@NBcj2@NCompress@@6BISequentialInStream@@@
.rdata$r:000029F4 ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:000029F4 ??_R4CDecoder@NBcj2@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:000029F4                                         ; DATA XREF: .rdata:00002640o
.rdata$r:000029F5                 db    0
.rdata$r:000029F6                 db    0
.rdata$r:000029F7                 db    0
.rdata$r:000029F8                 db  0Ch
.rdata$r:000029F9                 db    0
.rdata$r:000029FA                 db    0
.rdata$r:000029FB                 db    0
.rdata$r:000029FC                 db    0
.rdata$r:000029FD                 db    0
.rdata$r:000029FE                 db    0
.rdata$r:000029FF                 db    0
.rdata$r:00002A00                 dd offset ??_R0?AVCDecoder@NBcj2@NCompress@@@8 ; NCompress::NBcj2::CDecoder `RTTI Type Descriptor'
.rdata$r:00002A04                 dd offset ??_R3CDecoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002A04 _rdata$r        ends
.rdata$r:00002A04
.rdata$r:00002A08 ; ===========================================================================
.rdata$r:00002A08
.rdata$r:00002A08 ; Segment type: Pure data
.rdata$r:00002A08 ; Segment permissions: Read
.rdata$r:00002A08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002A08                 assume cs:_rdata$r
.rdata$r:00002A08                 ;org 2A08h
.rdata$r:00002A08 ; COMDAT (pick any)
.rdata$r:00002A08                 public ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:00002A08 ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:00002A08 ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:00002A08                                         ; DATA XREF: .rdata:0000262Co
.rdata$r:00002A09                 db    0
.rdata$r:00002A0A                 db    0
.rdata$r:00002A0B                 db    0
.rdata$r:00002A0C                 db  10h
.rdata$r:00002A0D                 db    0
.rdata$r:00002A0E                 db    0
.rdata$r:00002A0F                 db    0
.rdata$r:00002A10                 db    0
.rdata$r:00002A11                 db    0
.rdata$r:00002A12                 db    0
.rdata$r:00002A13                 db    0
.rdata$r:00002A14                 dd offset ??_R0?AVCDecoder@NBcj2@NCompress@@@8 ; NCompress::NBcj2::CDecoder `RTTI Type Descriptor'
.rdata$r:00002A18                 dd offset ??_R3CDecoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002A18 _rdata$r        ends
.rdata$r:00002A18
.rdata$r:00002A1C ; ===========================================================================
.rdata$r:00002A1C
.rdata$r:00002A1C ; Segment type: Pure data
.rdata$r:00002A1C ; Segment permissions: Read
.rdata$r:00002A1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002A1C                 assume cs:_rdata$r
.rdata$r:00002A1C                 ;org 2A1Ch
.rdata$r:00002A1C ; COMDAT (pick any)
.rdata$r:00002A1C                 public ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetBufSize@@@
.rdata$r:00002A1C ; const NCompress::NBcj2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetBufSize'}
.rdata$r:00002A1C ??_R4CDecoder@NBcj2@NCompress@@6BICompressSetBufSize@@@ db    0
.rdata$r:00002A1C                                         ; DATA XREF: .rdata:00002614o
.rdata$r:00002A1D                 db    0
.rdata$r:00002A1E                 db    0
.rdata$r:00002A1F                 db    0
.rdata$r:00002A20                 db  14h
.rdata$r:00002A21                 db    0
.rdata$r:00002A22                 db    0
.rdata$r:00002A23                 db    0
.rdata$r:00002A24                 db    0
.rdata$r:00002A25                 db    0
.rdata$r:00002A26                 db    0
.rdata$r:00002A27                 db    0
.rdata$r:00002A28                 dd offset ??_R0?AVCDecoder@NBcj2@NCompress@@@8 ; NCompress::NBcj2::CDecoder `RTTI Type Descriptor'
.rdata$r:00002A2C                 dd offset ??_R3CDecoder@NBcj2@NCompress@@8 ; NCompress::NBcj2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002A2C _rdata$r        ends
.rdata$r:00002A2C
.text:00002A30 ; ===========================================================================
.text:00002A30
.text:00002A30 ; Segment type: Pure code
.text:00002A30 ; Segment permissions: Read/Execute
.text:00002A30 _text           segment para public 'CODE' use32
.text:00002A30                 assume cs:_text
.text:00002A30                 ;org 2A30h
.text:00002A30 ; COMDAT (pick any)
.text:00002A30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002A30
.text:00002A30 ; =============== S U B R O U T I N E =======================================
.text:00002A30
.text:00002A30 ; Attributes: bp-based frame
.text:00002A30
.text:00002A30 ; __int32 __stdcall NCompress::NBcj2::CDecoder::QueryInterface(NCompress::NBcj2::CDecoder *this, const struct _GUID *Buf1, void **)
.text:00002A30                 public ?QueryInterface@CDecoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00002A30 ?QueryInterface@CDecoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00002A30                                         ; CODE XREF: [thunk]:NCompress::NBcj2::CDecoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)+5j
.text:00002A30                                         ; [thunk]:NCompress::NBcj2::CDecoder::QueryInterface`adjustor{20}' (_GUID const &,void * *)+5j ...
.text:00002A30
.text:00002A30 var_14          = dword ptr -14h
.text:00002A30 var_10          = dword ptr -10h
.text:00002A30 var_C           = dword ptr -0Ch
.text:00002A30 var_8           = dword ptr -8
.text:00002A30 var_4           = dword ptr -4
.text:00002A30 this            = dword ptr  8
.text:00002A30 Buf1            = dword ptr  0Ch
.text:00002A30 arg_8           = dword ptr  10h
.text:00002A30
.text:00002A30                 push    ebp
.text:00002A31                 mov     ebp, esp
.text:00002A33                 sub     esp, 14h
.text:00002A36                 mov     eax, 0CCCCCCCCh
.text:00002A3B                 mov     [ebp+var_14], eax
.text:00002A3E                 mov     [ebp+var_10], eax
.text:00002A41                 mov     [ebp+var_C], eax
.text:00002A44                 mov     [ebp+var_8], eax
.text:00002A47                 mov     [ebp+var_4], eax
.text:00002A4A                 mov     eax, [ebp+arg_8]
.text:00002A4D                 mov     dword ptr [eax], 0
.text:00002A53                 push    offset _IID_IUnknown ; Buf2
.text:00002A58                 mov     ecx, [ebp+Buf1]
.text:00002A5B                 push    ecx             ; Buf1
.text:00002A5C                 call    ___@8           ; __(x,x)
.text:00002A61                 test    eax, eax
.text:00002A63                 jz      short loc_2A72
.text:00002A65                 mov     edx, [ebp+arg_8]
.text:00002A68                 mov     eax, [ebp+this]
.text:00002A6B                 mov     [edx], eax
.text:00002A6D                 jmp     loc_2BA2
.text:00002A72 ; ---------------------------------------------------------------------------
.text:00002A72
.text:00002A72 loc_2A72:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+33j
.text:00002A72                 push    offset _IID_ICompressCoder2 ; Buf2
.text:00002A77                 mov     ecx, [ebp+Buf1]
.text:00002A7A                 push    ecx             ; Buf1
.text:00002A7B                 call    ___@8           ; __(x,x)
.text:00002A80                 test    eax, eax
.text:00002A82                 jz      short loc_2A91
.text:00002A84                 mov     edx, [ebp+arg_8]
.text:00002A87                 mov     eax, [ebp+this]
.text:00002A8A                 mov     [edx], eax
.text:00002A8C                 jmp     loc_2BA2
.text:00002A91 ; ---------------------------------------------------------------------------
.text:00002A91
.text:00002A91 loc_2A91:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+52j
.text:00002A91                 push    offset _IID_ICompressSetFinishMode ; Buf2
.text:00002A96                 mov     ecx, [ebp+Buf1]
.text:00002A99                 push    ecx             ; Buf1
.text:00002A9A                 call    ___@8           ; __(x,x)
.text:00002A9F                 test    eax, eax
.text:00002AA1                 jz      short loc_2AC8
.text:00002AA3                 cmp     [ebp+this], 0
.text:00002AA7                 jz      short loc_2AB4
.text:00002AA9                 mov     edx, [ebp+this]
.text:00002AAC                 add     edx, 4
.text:00002AAF                 mov     [ebp+var_4], edx
.text:00002AB2                 jmp     short loc_2ABB
.text:00002AB4 ; ---------------------------------------------------------------------------
.text:00002AB4
.text:00002AB4 loc_2AB4:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+77j
.text:00002AB4                 mov     [ebp+var_4], 0
.text:00002ABB
.text:00002ABB loc_2ABB:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+82j
.text:00002ABB                 mov     eax, [ebp+arg_8]
.text:00002ABE                 mov     ecx, [ebp+var_4]
.text:00002AC1                 mov     [eax], ecx
.text:00002AC3                 jmp     loc_2BA2
.text:00002AC8 ; ---------------------------------------------------------------------------
.text:00002AC8
.text:00002AC8 loc_2AC8:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+71j
.text:00002AC8                 push    offset _IID_ICompressSetInStream2 ; Buf2
.text:00002ACD                 mov     edx, [ebp+Buf1]
.text:00002AD0                 push    edx             ; Buf1
.text:00002AD1                 call    ___@8           ; __(x,x)
.text:00002AD6                 test    eax, eax
.text:00002AD8                 jz      short loc_2AFF
.text:00002ADA                 cmp     [ebp+this], 0
.text:00002ADE                 jz      short loc_2AEB
.text:00002AE0                 mov     eax, [ebp+this]
.text:00002AE3                 add     eax, 8
.text:00002AE6                 mov     [ebp+var_8], eax
.text:00002AE9                 jmp     short loc_2AF2
.text:00002AEB ; ---------------------------------------------------------------------------
.text:00002AEB
.text:00002AEB loc_2AEB:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+AEj
.text:00002AEB                 mov     [ebp+var_8], 0
.text:00002AF2
.text:00002AF2 loc_2AF2:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+B9j
.text:00002AF2                 mov     ecx, [ebp+arg_8]
.text:00002AF5                 mov     edx, [ebp+var_8]
.text:00002AF8                 mov     [ecx], edx
.text:00002AFA                 jmp     loc_2BA2
.text:00002AFF ; ---------------------------------------------------------------------------
.text:00002AFF
.text:00002AFF loc_2AFF:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+A8j
.text:00002AFF                 push    offset _IID_ISequentialInStream ; Buf2
.text:00002B04                 mov     eax, [ebp+Buf1]
.text:00002B07                 push    eax             ; Buf1
.text:00002B08                 call    ___@8           ; __(x,x)
.text:00002B0D                 test    eax, eax
.text:00002B0F                 jz      short loc_2B33
.text:00002B11                 cmp     [ebp+this], 0
.text:00002B15                 jz      short loc_2B22
.text:00002B17                 mov     ecx, [ebp+this]
.text:00002B1A                 add     ecx, 0Ch
.text:00002B1D                 mov     [ebp+var_C], ecx
.text:00002B20                 jmp     short loc_2B29
.text:00002B22 ; ---------------------------------------------------------------------------
.text:00002B22
.text:00002B22 loc_2B22:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+E5j
.text:00002B22                 mov     [ebp+var_C], 0
.text:00002B29
.text:00002B29 loc_2B29:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+F0j
.text:00002B29                 mov     edx, [ebp+arg_8]
.text:00002B2C                 mov     eax, [ebp+var_C]
.text:00002B2F                 mov     [edx], eax
.text:00002B31                 jmp     short loc_2BA2
.text:00002B33 ; ---------------------------------------------------------------------------
.text:00002B33
.text:00002B33 loc_2B33:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+DFj
.text:00002B33                 push    offset _IID_ICompressSetOutStreamSize ; Buf2
.text:00002B38                 mov     ecx, [ebp+Buf1]
.text:00002B3B                 push    ecx             ; Buf1
.text:00002B3C                 call    ___@8           ; __(x,x)
.text:00002B41                 test    eax, eax
.text:00002B43                 jz      short loc_2B67
.text:00002B45                 cmp     [ebp+this], 0
.text:00002B49                 jz      short loc_2B56
.text:00002B4B                 mov     edx, [ebp+this]
.text:00002B4E                 add     edx, 10h
.text:00002B51                 mov     [ebp+var_10], edx
.text:00002B54                 jmp     short loc_2B5D
.text:00002B56 ; ---------------------------------------------------------------------------
.text:00002B56
.text:00002B56 loc_2B56:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+119j
.text:00002B56                 mov     [ebp+var_10], 0
.text:00002B5D
.text:00002B5D loc_2B5D:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+124j
.text:00002B5D                 mov     eax, [ebp+arg_8]
.text:00002B60                 mov     ecx, [ebp+var_10]
.text:00002B63                 mov     [eax], ecx
.text:00002B65                 jmp     short loc_2BA2
.text:00002B67 ; ---------------------------------------------------------------------------
.text:00002B67
.text:00002B67 loc_2B67:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+113j
.text:00002B67                 push    offset _IID_ICompressSetBufSize ; Buf2
.text:00002B6C                 mov     edx, [ebp+Buf1]
.text:00002B6F                 push    edx             ; Buf1
.text:00002B70                 call    ___@8           ; __(x,x)
.text:00002B75                 test    eax, eax
.text:00002B77                 jz      short loc_2B9B
.text:00002B79                 cmp     [ebp+this], 0
.text:00002B7D                 jz      short loc_2B8A
.text:00002B7F                 mov     eax, [ebp+this]
.text:00002B82                 add     eax, 14h
.text:00002B85                 mov     [ebp+var_14], eax
.text:00002B88                 jmp     short loc_2B91
.text:00002B8A ; ---------------------------------------------------------------------------
.text:00002B8A
.text:00002B8A loc_2B8A:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+14Dj
.text:00002B8A                 mov     [ebp+var_14], 0
.text:00002B91
.text:00002B91 loc_2B91:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+158j
.text:00002B91                 mov     ecx, [ebp+arg_8]
.text:00002B94                 mov     edx, [ebp+var_14]
.text:00002B97                 mov     [ecx], edx
.text:00002B99                 jmp     short loc_2BA2
.text:00002B9B ; ---------------------------------------------------------------------------
.text:00002B9B
.text:00002B9B loc_2B9B:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+147j
.text:00002B9B                 mov     eax, 80004002h
.text:00002BA0                 jmp     short loc_2BB3
.text:00002BA2 ; ---------------------------------------------------------------------------
.text:00002BA2
.text:00002BA2 loc_2BA2:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+3Dj
.text:00002BA2                                         ; NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+5Cj ...
.text:00002BA2                 mov     eax, [ebp+this]
.text:00002BA5                 mov     ecx, [eax+18h]
.text:00002BA8                 add     ecx, 1
.text:00002BAB                 mov     edx, [ebp+this]
.text:00002BAE                 mov     [edx+18h], ecx
.text:00002BB1                 xor     eax, eax
.text:00002BB3
.text:00002BB3 loc_2BB3:                               ; CODE XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+170j
.text:00002BB3                 add     esp, 14h
.text:00002BB6                 cmp     ebp, esp
.text:00002BB8                 call    __RTC_CheckEsp
.text:00002BBD                 mov     esp, ebp
.text:00002BBF                 pop     ebp
.text:00002BC0                 retn    0Ch
.text:00002BC0 ?QueryInterface@CDecoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002BC0
.text:00002BC0 ; ---------------------------------------------------------------------------
.text:00002BC3                 align 4
.text:00002BC3 _text           ends
.text:00002BC3
.text:00002BC4 ; ===========================================================================
.text:00002BC4
.text:00002BC4 ; Segment type: Pure code
.text:00002BC4 ; Segment permissions: Read/Execute
.text:00002BC4 _text           segment para public 'CODE' use32
.text:00002BC4                 assume cs:_text
.text:00002BC4                 ;org 2BC4h
.text:00002BC4 ; COMDAT (pick any)
.text:00002BC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002BC4
.text:00002BC4 ; =============== S U B R O U T I N E =======================================
.text:00002BC4
.text:00002BC4 ; Attributes: bp-based frame
.text:00002BC4
.text:00002BC4 ; unsigned __int32 __stdcall NCompress::NBcj2::CDecoder::AddRef(NCompress::NBcj2::CDecoder *this)
.text:00002BC4                 public ?AddRef@CDecoder@NBcj2@NCompress@@UAGKXZ
.text:00002BC4 ?AddRef@CDecoder@NBcj2@NCompress@@UAGKXZ proc near
.text:00002BC4                                         ; CODE XREF: [thunk]:NCompress::NBcj2::CDecoder::AddRef`adjustor{4}' (void)+5j
.text:00002BC4                                         ; [thunk]:NCompress::NBcj2::CDecoder::AddRef`adjustor{8}' (void)+5j ...
.text:00002BC4
.text:00002BC4 var_4           = dword ptr -4
.text:00002BC4 this            = dword ptr  8
.text:00002BC4
.text:00002BC4                 push    ebp
.text:00002BC5                 mov     ebp, esp
.text:00002BC7                 push    ecx
.text:00002BC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BCF                 mov     eax, [ebp+this]
.text:00002BD2                 mov     ecx, [eax+18h]
.text:00002BD5                 add     ecx, 1
.text:00002BD8                 mov     [ebp+var_4], ecx
.text:00002BDB                 mov     edx, [ebp+this]
.text:00002BDE                 mov     eax, [ebp+var_4]
.text:00002BE1                 mov     [edx+18h], eax
.text:00002BE4                 mov     eax, [ebp+var_4]
.text:00002BE7                 mov     esp, ebp
.text:00002BE9                 pop     ebp
.text:00002BEA                 retn    4
.text:00002BEA ?AddRef@CDecoder@NBcj2@NCompress@@UAGKXZ endp
.text:00002BEA
.text:00002BEA ; ---------------------------------------------------------------------------
.text:00002BED                 align 10h
.text:00002BED _text           ends
.text:00002BED
.text:00002BF0 ; ===========================================================================
.text:00002BF0
.text:00002BF0 ; Segment type: Pure code
.text:00002BF0 ; Segment permissions: Read/Execute
.text:00002BF0 _text           segment para public 'CODE' use32
.text:00002BF0                 assume cs:_text
.text:00002BF0                 ;org 2BF0h
.text:00002BF0 ; COMDAT (pick any)
.text:00002BF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002BF0
.text:00002BF0 ; =============== S U B R O U T I N E =======================================
.text:00002BF0
.text:00002BF0 ; Attributes: bp-based frame
.text:00002BF0
.text:00002BF0 ; unsigned __int32 __stdcall NCompress::NBcj2::CDecoder::Release(NCompress::NBcj2::CDecoder *this)
.text:00002BF0                 public ?Release@CDecoder@NBcj2@NCompress@@UAGKXZ
.text:00002BF0 ?Release@CDecoder@NBcj2@NCompress@@UAGKXZ proc near
.text:00002BF0                                         ; CODE XREF: [thunk]:NCompress::NBcj2::CDecoder::Release`adjustor{4}' (void)+5j
.text:00002BF0                                         ; [thunk]:NCompress::NBcj2::CDecoder::Release`adjustor{8}' (void)+5j ...
.text:00002BF0
.text:00002BF0 var_10          = dword ptr -10h
.text:00002BF0 var_C           = dword ptr -0Ch
.text:00002BF0 var_8           = dword ptr -8
.text:00002BF0 var_4           = dword ptr -4
.text:00002BF0 this            = dword ptr  8
.text:00002BF0
.text:00002BF0                 push    ebp
.text:00002BF1                 mov     ebp, esp
.text:00002BF3                 sub     esp, 10h
.text:00002BF6                 mov     eax, 0CCCCCCCCh
.text:00002BFB                 mov     [ebp+var_10], eax
.text:00002BFE                 mov     [ebp+var_C], eax
.text:00002C01                 mov     [ebp+var_8], eax
.text:00002C04                 mov     [ebp+var_4], eax
.text:00002C07                 mov     eax, [ebp+this]
.text:00002C0A                 mov     ecx, [eax+18h]
.text:00002C0D                 sub     ecx, 1
.text:00002C10                 mov     [ebp+var_C], ecx
.text:00002C13                 mov     edx, [ebp+this]
.text:00002C16                 mov     eax, [ebp+var_C]
.text:00002C19                 mov     [edx+18h], eax
.text:00002C1C                 cmp     [ebp+var_C], 0
.text:00002C20                 jz      short loc_2C2A
.text:00002C22                 mov     ecx, [ebp+this]
.text:00002C25                 mov     eax, [ecx+18h]
.text:00002C28                 jmp     short loc_2C54
.text:00002C2A ; ---------------------------------------------------------------------------
.text:00002C2A
.text:00002C2A loc_2C2A:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Release(void)+30j
.text:00002C2A                 mov     edx, [ebp+this]
.text:00002C2D                 mov     [ebp+var_8], edx
.text:00002C30                 mov     eax, [ebp+var_8]
.text:00002C33                 mov     [ebp+var_4], eax
.text:00002C36                 cmp     [ebp+var_4], 0
.text:00002C3A                 jz      short loc_2C4B
.text:00002C3C                 push    1
.text:00002C3E                 mov     ecx, [ebp+var_4]
.text:00002C41                 call    ??_GCDecoder@NBcj2@NCompress@@QAEPAXI@Z ; NCompress::NBcj2::CDecoder::`scalar deleting destructor'(uint)
.text:00002C46                 mov     [ebp+var_10], eax
.text:00002C49                 jmp     short loc_2C52
.text:00002C4B ; ---------------------------------------------------------------------------
.text:00002C4B
.text:00002C4B loc_2C4B:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Release(void)+4Aj
.text:00002C4B                 mov     [ebp+var_10], 0
.text:00002C52
.text:00002C52 loc_2C52:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Release(void)+59j
.text:00002C52                 xor     eax, eax
.text:00002C54
.text:00002C54 loc_2C54:                               ; CODE XREF: NCompress::NBcj2::CDecoder::Release(void)+38j
.text:00002C54                 add     esp, 10h
.text:00002C57                 cmp     ebp, esp
.text:00002C59                 call    __RTC_CheckEsp
.text:00002C5E                 mov     esp, ebp
.text:00002C60                 pop     ebp
.text:00002C61                 retn    4
.text:00002C61 ?Release@CDecoder@NBcj2@NCompress@@UAGKXZ endp
.text:00002C61
.text:00002C61 _text           ends
.text:00002C61
.text:00002C64 ; ===========================================================================
.text:00002C64
.text:00002C64 ; Segment type: Pure code
.text:00002C64 ; Segment permissions: Read/Execute
.text:00002C64 _text           segment para public 'CODE' use32
.text:00002C64                 assume cs:_text
.text:00002C64                 ;org 2C64h
.text:00002C64 ; COMDAT (pick any)
.text:00002C64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002C64
.text:00002C64 ; =============== S U B R O U T I N E =======================================
.text:00002C64
.text:00002C64 ; Attributes: bp-based frame
.text:00002C64
.text:00002C64 ; public: void * __thiscall NCompress::NBcj2::CDecoder::`scalar deleting destructor'(unsigned int)
.text:00002C64                 public ??_GCDecoder@NBcj2@NCompress@@QAEPAXI@Z
.text:00002C64 ??_GCDecoder@NBcj2@NCompress@@QAEPAXI@Z proc near
.text:00002C64                                         ; CODE XREF: NCompress::NBcj2::CDecoder::Release(void)+51p
.text:00002C64
.text:00002C64 var_4           = dword ptr -4
.text:00002C64 arg_0           = dword ptr  8
.text:00002C64
.text:00002C64                 push    ebp
.text:00002C65                 mov     ebp, esp
.text:00002C67                 push    ecx
.text:00002C68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C6F                 mov     [ebp+var_4], ecx
.text:00002C72                 mov     ecx, [ebp+var_4] ; this
.text:00002C75                 call    ??1CDecoder@NBcj2@NCompress@@QAE@XZ ; NCompress::NBcj2::CDecoder::~CDecoder(void)
.text:00002C7A                 mov     eax, [ebp+arg_0]
.text:00002C7D                 and     eax, 1
.text:00002C80                 jz      short loc_2C8E
.text:00002C82                 mov     ecx, [ebp+var_4]
.text:00002C85                 push    ecx             ; void *
.text:00002C86                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002C8B                 add     esp, 4
.text:00002C8E
.text:00002C8E loc_2C8E:                               ; CODE XREF: NCompress::NBcj2::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:00002C8E                 mov     eax, [ebp+var_4]
.text:00002C91                 add     esp, 4
.text:00002C94                 cmp     ebp, esp
.text:00002C96                 call    __RTC_CheckEsp
.text:00002C9B                 mov     esp, ebp
.text:00002C9D                 pop     ebp
.text:00002C9E                 retn    4
.text:00002C9E ??_GCDecoder@NBcj2@NCompress@@QAEPAXI@Z endp
.text:00002C9E
.text:00002C9E ; ---------------------------------------------------------------------------
.text:00002CA1                 align 4
.text:00002CA1 _text           ends
.text:00002CA1
.text:00002CA4 ; ===========================================================================
.text:00002CA4
.text:00002CA4 ; Segment type: Pure code
.text:00002CA4 ; Segment permissions: Read/Execute
.text:00002CA4 _text           segment para public 'CODE' use32
.text:00002CA4                 assume cs:_text
.text:00002CA4                 ;org 2CA4h
.text:00002CA4 ; COMDAT (pick any)
.text:00002CA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002CA4
.text:00002CA4 ; =============== S U B R O U T I N E =======================================
.text:00002CA4
.text:00002CA4 ; Attributes: bp-based frame
.text:00002CA4
.text:00002CA4 ; _DWORD __thiscall NCompress::NBcj2::CDecoder::~CDecoder(NCompress::NBcj2::CDecoder *__hidden this)
.text:00002CA4                 public ??1CDecoder@NBcj2@NCompress@@QAE@XZ
.text:00002CA4 ??1CDecoder@NBcj2@NCompress@@QAE@XZ proc near
.text:00002CA4                                         ; CODE XREF: NCompress::NBcj2::CDecoder::`scalar deleting destructor'(uint)+11p
.text:00002CA4
.text:00002CA4 var_10          = dword ptr -10h
.text:00002CA4 var_C           = dword ptr -0Ch
.text:00002CA4 var_4           = dword ptr -4
.text:00002CA4
.text:00002CA4                 push    ebp
.text:00002CA5                 mov     ebp, esp
.text:00002CA7                 push    0FFFFFFFFh
.text:00002CA9                 push    offset __ehhandler$??1CDecoder@NBcj2@NCompress@@QAE@XZ
.text:00002CAE                 mov     eax, large fs:0
.text:00002CB4                 push    eax
.text:00002CB5                 push    ecx
.text:00002CB6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002CBD                 mov     eax, dword ptr ds:___security_cookie
.text:00002CC2                 xor     eax, ebp
.text:00002CC4                 push    eax
.text:00002CC5                 lea     eax, [ebp+var_C]
.text:00002CC8                 mov     large fs:0, eax
.text:00002CCE                 mov     [ebp+var_10], ecx
.text:00002CD1                 mov     [ebp+var_4], 0
.text:00002CD8                 push    offset ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002CDD                 push    4
.text:00002CDF                 push    4
.text:00002CE1                 mov     eax, [ebp+var_10]
.text:00002CE4                 add     eax, 98h ; 'ÿ'
.text:00002CE9                 push    eax
.text:00002CEA                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:00002CEF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002CF6                 mov     ecx, [ebp+var_10]
.text:00002CF9                 add     ecx, 1Ch        ; this
.text:00002CFC                 call    ??1CBaseCoder@NBcj2@NCompress@@QAE@XZ ; NCompress::NBcj2::CBaseCoder::~CBaseCoder(void)
.text:00002D01                 mov     ecx, [ebp+var_C]
.text:00002D04                 mov     large fs:0, ecx
.text:00002D0B                 pop     ecx
.text:00002D0C                 add     esp, 10h
.text:00002D0F                 cmp     ebp, esp
.text:00002D11                 call    __RTC_CheckEsp
.text:00002D16                 mov     esp, ebp
.text:00002D18                 pop     ebp
.text:00002D19                 retn
.text:00002D19 ??1CDecoder@NBcj2@NCompress@@QAE@XZ endp
.text:00002D19
.text:00002D19 ; ---------------------------------------------------------------------------
.text:00002D1A                 align 4
.text:00002D1A _text           ends
.text:00002D1A
.text$x:00002D1C ; ===========================================================================
.text$x:00002D1C
.text$x:00002D1C ; Segment type: Pure code
.text$x:00002D1C ; Segment permissions: Read/Execute
.text$x:00002D1C _text$x         segment para public 'CODE' use32
.text$x:00002D1C                 assume cs:_text$x
.text$x:00002D1C                 ;org 2D1Ch
.text$x:00002D1C ; COMDAT (pick associative to section at 2CA4)
.text$x:00002D1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002D1C
.text$x:00002D1C ; =============== S U B R O U T I N E =======================================
.text$x:00002D1C
.text$x:00002D1C
.text$x:00002D1C __unwindfunclet$??1CDecoder@NBcj2@NCompress@@QAE@XZ$0 proc near
.text$x:00002D1C                                         ; DATA XREF: .xdata$x:00002D48o
.text$x:00002D1C                 mov     ecx, [ebp-10h]
.text$x:00002D1F                 add     ecx, 1Ch        ; this
.text$x:00002D22                 jmp     ??1CBaseCoder@NBcj2@NCompress@@QAE@XZ ; NCompress::NBcj2::CBaseCoder::~CBaseCoder(void)
.text$x:00002D22 __unwindfunclet$??1CDecoder@NBcj2@NCompress@@QAE@XZ$0 endp
.text$x:00002D22
.text$x:00002D27
.text$x:00002D27 ; =============== S U B R O U T I N E =======================================
.text$x:00002D27
.text$x:00002D27
.text$x:00002D27 __ehhandler$??1CDecoder@NBcj2@NCompress@@QAE@XZ proc near
.text$x:00002D27                                         ; DATA XREF: NCompress::NBcj2::CDecoder::~CDecoder(void)+5o
.text$x:00002D27
.text$x:00002D27 arg_4           = dword ptr  8
.text$x:00002D27
.text$x:00002D27                 mov     edx, [esp+arg_4]
.text$x:00002D2B                 lea     eax, [edx+0Ch]
.text$x:00002D2E                 mov     ecx, [edx-8]
.text$x:00002D31                 xor     ecx, eax
.text$x:00002D33                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002D38                 mov     eax, offset __ehfuncinfo$??1CDecoder@NBcj2@NCompress@@QAE@XZ
.text$x:00002D3D                 jmp     ___CxxFrameHandler3
.text$x:00002D3D __ehhandler$??1CDecoder@NBcj2@NCompress@@QAE@XZ endp
.text$x:00002D3D
.text$x:00002D3D ; ---------------------------------------------------------------------------
.text$x:00002D42                 align 4
.text$x:00002D42 _text$x         ends
.text$x:00002D42
.xdata$x:00002D44 ; ===========================================================================
.xdata$x:00002D44
.xdata$x:00002D44 ; Segment type: Pure data
.xdata$x:00002D44 ; Segment permissions: Read
.xdata$x:00002D44 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002D44                 assume cs:_xdata$x
.xdata$x:00002D44                 ;org 2D44h
.xdata$x:00002D44 ; COMDAT (pick associative to section at 2CA4)
.xdata$x:00002D44 __unwindtable$??1CDecoder@NBcj2@NCompress@@QAE@XZ db 0FFh
.xdata$x:00002D44                                         ; DATA XREF: .xdata$x:00002D54o
.xdata$x:00002D45                 db 0FFh
.xdata$x:00002D46                 db 0FFh
.xdata$x:00002D47                 db 0FFh
.xdata$x:00002D48                 dd offset __unwindfunclet$??1CDecoder@NBcj2@NCompress@@QAE@XZ$0
.xdata$x:00002D4C __ehfuncinfo$??1CDecoder@NBcj2@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00002D4C                                         ; DATA XREF: __ehhandler$??1CDecoder@NBcj2@NCompress@@QAE@XZ+11o
.xdata$x:00002D4D                 db    5
.xdata$x:00002D4E                 db  93h ; ô
.xdata$x:00002D4F                 db  19h
.xdata$x:00002D50                 db    1
.xdata$x:00002D51                 db    0
.xdata$x:00002D52                 db    0
.xdata$x:00002D53                 db    0
.xdata$x:00002D54                 dd offset __unwindtable$??1CDecoder@NBcj2@NCompress@@QAE@XZ
.xdata$x:00002D58                 db    0
.xdata$x:00002D59                 db    0
.xdata$x:00002D5A                 db    0
.xdata$x:00002D5B                 db    0
.xdata$x:00002D5C                 db    0
.xdata$x:00002D5D                 db    0
.xdata$x:00002D5E                 db    0
.xdata$x:00002D5F                 db    0
.xdata$x:00002D60                 db    0
.xdata$x:00002D61                 db    0
.xdata$x:00002D62                 db    0
.xdata$x:00002D63                 db    0
.xdata$x:00002D64                 db    0
.xdata$x:00002D65                 db    0
.xdata$x:00002D66                 db    0
.xdata$x:00002D67                 db    0
.xdata$x:00002D68                 db    0
.xdata$x:00002D69                 db    0
.xdata$x:00002D6A                 db    0
.xdata$x:00002D6B                 db    0
.xdata$x:00002D6C                 db    1
.xdata$x:00002D6D                 db    0
.xdata$x:00002D6E                 db    0
.xdata$x:00002D6F                 db    0
.xdata$x:00002D6F _xdata$x        ends
.xdata$x:00002D6F
.text:00002D70 ; ===========================================================================
.text:00002D70
.text:00002D70 ; Segment type: Pure code
.text:00002D70 ; Segment permissions: Read/Execute
.text:00002D70 _text           segment para public 'CODE' use32
.text:00002D70                 assume cs:_text
.text:00002D70                 ;org 2D70h
.text:00002D70 ; COMDAT (pick any)
.text:00002D70                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002D70
.text:00002D70 ; =============== S U B R O U T I N E =======================================
.text:00002D70
.text:00002D70 ; Attributes: bp-based frame
.text:00002D70
.text:00002D70 ; _DWORD __thiscall ICompressSetFinishMode::ICompressSetFinishMode(ICompressSetFinishMode *__hidden this)
.text:00002D70                 public ??0ICompressSetFinishMode@@QAE@XZ
.text:00002D70 ??0ICompressSetFinishMode@@QAE@XZ proc near
.text:00002D70                                         ; CODE XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+3Bp
.text:00002D70
.text:00002D70 var_4           = dword ptr -4
.text:00002D70
.text:00002D70                 push    ebp
.text:00002D71                 mov     ebp, esp
.text:00002D73                 push    ecx
.text:00002D74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D7B                 mov     [ebp+var_4], ecx
.text:00002D7E                 mov     ecx, [ebp+var_4]
.text:00002D81                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002D86                 mov     eax, [ebp+var_4]
.text:00002D89                 mov     dword ptr [eax], offset ??_7ICompressSetFinishMode@@6B@ ; const ICompressSetFinishMode::`vftable'
.text:00002D8F                 mov     eax, [ebp+var_4]
.text:00002D92                 add     esp, 4
.text:00002D95                 cmp     ebp, esp
.text:00002D97                 call    __RTC_CheckEsp
.text:00002D9C                 mov     esp, ebp
.text:00002D9E                 pop     ebp
.text:00002D9F                 retn
.text:00002D9F ??0ICompressSetFinishMode@@QAE@XZ endp
.text:00002D9F
.text:00002D9F _text           ends
.text:00002D9F
.rdata:00002DA0 ; ===========================================================================
.rdata:00002DA0
.rdata:00002DA0 ; Segment type: Pure data
.rdata:00002DA0 ; Segment permissions: Read
.rdata:00002DA0 _rdata          segment dword public 'DATA' use32
.rdata:00002DA0                 assume cs:_rdata
.rdata:00002DA0                 ;org 2DA0h
.rdata:00002DA0 ; COMDAT (pick largest)
.rdata:00002DA0                 dd offset ??_R4ICompressSetFinishMode@@6B@ ; const ICompressSetFinishMode::`RTTI Complete Object Locator'
.rdata:00002DA4                 public ??_7ICompressSetFinishMode@@6B@
.rdata:00002DA4 ; const ICompressSetFinishMode::`vftable'
.rdata:00002DA4 ??_7ICompressSetFinishMode@@6B@ dd offset __purecall
.rdata:00002DA4                                         ; DATA XREF: ICompressSetFinishMode::ICompressSetFinishMode(void)+19o
.rdata:00002DA8                 dd offset __purecall
.rdata:00002DAC                 dd offset __purecall
.rdata:00002DB0                 dd offset __purecall
.rdata:00002DB0 _rdata          ends
.rdata:00002DB0
.rdata$r:00002DB4 ; ===========================================================================
.rdata$r:00002DB4
.rdata$r:00002DB4 ; Segment type: Pure data
.rdata$r:00002DB4 ; Segment permissions: Read
.rdata$r:00002DB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002DB4                 assume cs:_rdata$r
.rdata$r:00002DB4                 ;org 2DB4h
.rdata$r:00002DB4 ; COMDAT (pick any)
.rdata$r:00002DB4                 public ??_R4ICompressSetFinishMode@@6B@
.rdata$r:00002DB4 ; const ICompressSetFinishMode::`RTTI Complete Object Locator'
.rdata$r:00002DB4 ??_R4ICompressSetFinishMode@@6B@ db    0 ; DATA XREF: .rdata:00002DA0o
.rdata$r:00002DB5                 db    0
.rdata$r:00002DB6                 db    0
.rdata$r:00002DB7                 db    0
.rdata$r:00002DB8                 db    0
.rdata$r:00002DB9                 db    0
.rdata$r:00002DBA                 db    0
.rdata$r:00002DBB                 db    0
.rdata$r:00002DBC                 db    0
.rdata$r:00002DBD                 db    0
.rdata$r:00002DBE                 db    0
.rdata$r:00002DBF                 db    0
.rdata$r:00002DC0                 dd offset ??_R0?AUICompressSetFinishMode@@@8 ; ICompressSetFinishMode `RTTI Type Descriptor'
.rdata$r:00002DC4                 dd offset ??_R3ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002DC4 _rdata$r        ends
.rdata$r:00002DC4
.text:00002DC8 ; ===========================================================================
.text:00002DC8
.text:00002DC8 ; Segment type: Pure code
.text:00002DC8 ; Segment permissions: Read/Execute
.text:00002DC8 _text           segment para public 'CODE' use32
.text:00002DC8                 assume cs:_text
.text:00002DC8                 ;org 2DC8h
.text:00002DC8 ; COMDAT (pick any)
.text:00002DC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002DC8
.text:00002DC8 ; =============== S U B R O U T I N E =======================================
.text:00002DC8
.text:00002DC8 ; Attributes: bp-based frame
.text:00002DC8
.text:00002DC8 ; _DWORD __thiscall ICompressSetInStream2::ICompressSetInStream2(ICompressSetInStream2 *__hidden this)
.text:00002DC8                 public ??0ICompressSetInStream2@@QAE@XZ
.text:00002DC8 ??0ICompressSetInStream2@@QAE@XZ proc near
.text:00002DC8                                         ; CODE XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+46p
.text:00002DC8
.text:00002DC8 var_4           = dword ptr -4
.text:00002DC8
.text:00002DC8                 push    ebp
.text:00002DC9                 mov     ebp, esp
.text:00002DCB                 push    ecx
.text:00002DCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DD3                 mov     [ebp+var_4], ecx
.text:00002DD6                 mov     ecx, [ebp+var_4]
.text:00002DD9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002DDE                 mov     eax, [ebp+var_4]
.text:00002DE1                 mov     dword ptr [eax], offset ??_7ICompressSetInStream2@@6B@ ; const ICompressSetInStream2::`vftable'
.text:00002DE7                 mov     eax, [ebp+var_4]
.text:00002DEA                 add     esp, 4
.text:00002DED                 cmp     ebp, esp
.text:00002DEF                 call    __RTC_CheckEsp
.text:00002DF4                 mov     esp, ebp
.text:00002DF6                 pop     ebp
.text:00002DF7                 retn
.text:00002DF7 ??0ICompressSetInStream2@@QAE@XZ endp
.text:00002DF7
.text:00002DF7 _text           ends
.text:00002DF7
.rdata:00002DF8 ; ===========================================================================
.rdata:00002DF8
.rdata:00002DF8 ; Segment type: Pure data
.rdata:00002DF8 ; Segment permissions: Read
.rdata:00002DF8 _rdata          segment dword public 'DATA' use32
.rdata:00002DF8                 assume cs:_rdata
.rdata:00002DF8                 ;org 2DF8h
.rdata:00002DF8 ; COMDAT (pick largest)
.rdata:00002DF8                 dd offset ??_R4ICompressSetInStream2@@6B@ ; const ICompressSetInStream2::`RTTI Complete Object Locator'
.rdata:00002DFC                 public ??_7ICompressSetInStream2@@6B@
.rdata:00002DFC ; const ICompressSetInStream2::`vftable'
.rdata:00002DFC ??_7ICompressSetInStream2@@6B@ dd offset __purecall
.rdata:00002DFC                                         ; DATA XREF: ICompressSetInStream2::ICompressSetInStream2(void)+19o
.rdata:00002E00                 dd offset __purecall
.rdata:00002E04                 dd offset __purecall
.rdata:00002E08                 dd offset __purecall
.rdata:00002E0C                 dd offset __purecall
.rdata:00002E0C _rdata          ends
.rdata:00002E0C
.rdata$r:00002E10 ; ===========================================================================
.rdata$r:00002E10
.rdata$r:00002E10 ; Segment type: Pure data
.rdata$r:00002E10 ; Segment permissions: Read
.rdata$r:00002E10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002E10                 assume cs:_rdata$r
.rdata$r:00002E10                 ;org 2E10h
.rdata$r:00002E10 ; COMDAT (pick any)
.rdata$r:00002E10                 public ??_R4ICompressSetInStream2@@6B@
.rdata$r:00002E10 ; const ICompressSetInStream2::`RTTI Complete Object Locator'
.rdata$r:00002E10 ??_R4ICompressSetInStream2@@6B@ db    0 ; DATA XREF: .rdata:00002DF8o
.rdata$r:00002E11                 db    0
.rdata$r:00002E12                 db    0
.rdata$r:00002E13                 db    0
.rdata$r:00002E14                 db    0
.rdata$r:00002E15                 db    0
.rdata$r:00002E16                 db    0
.rdata$r:00002E17                 db    0
.rdata$r:00002E18                 db    0
.rdata$r:00002E19                 db    0
.rdata$r:00002E1A                 db    0
.rdata$r:00002E1B                 db    0
.rdata$r:00002E1C                 dd offset ??_R0?AUICompressSetInStream2@@@8 ; ICompressSetInStream2 `RTTI Type Descriptor'
.rdata$r:00002E20                 dd offset ??_R3ICompressSetInStream2@@8 ; ICompressSetInStream2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002E20 _rdata$r        ends
.rdata$r:00002E20
.text:00002E24 ; ===========================================================================
.text:00002E24
.text:00002E24 ; Segment type: Pure code
.text:00002E24 ; Segment permissions: Read/Execute
.text:00002E24 _text           segment para public 'CODE' use32
.text:00002E24                 assume cs:_text
.text:00002E24                 ;org 2E24h
.text:00002E24 ; COMDAT (pick any)
.text:00002E24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E24
.text:00002E24 ; =============== S U B R O U T I N E =======================================
.text:00002E24
.text:00002E24 ; Attributes: bp-based frame
.text:00002E24
.text:00002E24 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00002E24                 public ??0ISequentialInStream@@QAE@XZ
.text:00002E24 ??0ISequentialInStream@@QAE@XZ proc near
.text:00002E24                                         ; CODE XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+51p
.text:00002E24
.text:00002E24 var_4           = dword ptr -4
.text:00002E24
.text:00002E24                 push    ebp
.text:00002E25                 mov     ebp, esp
.text:00002E27                 push    ecx
.text:00002E28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E2F                 mov     [ebp+var_4], ecx
.text:00002E32                 mov     ecx, [ebp+var_4]
.text:00002E35                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002E3A                 mov     eax, [ebp+var_4]
.text:00002E3D                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:00002E43                 mov     eax, [ebp+var_4]
.text:00002E46                 add     esp, 4
.text:00002E49                 cmp     ebp, esp
.text:00002E4B                 call    __RTC_CheckEsp
.text:00002E50                 mov     esp, ebp
.text:00002E52                 pop     ebp
.text:00002E53                 retn
.text:00002E53 ??0ISequentialInStream@@QAE@XZ endp
.text:00002E53
.text:00002E53 _text           ends
.text:00002E53
.rdata:00002E54 ; ===========================================================================
.rdata:00002E54
.rdata:00002E54 ; Segment type: Pure data
.rdata:00002E54 ; Segment permissions: Read
.rdata:00002E54 _rdata          segment dword public 'DATA' use32
.rdata:00002E54                 assume cs:_rdata
.rdata:00002E54                 ;org 2E54h
.rdata:00002E54 ; COMDAT (pick largest)
.rdata:00002E54                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00002E58                 public ??_7ISequentialInStream@@6B@
.rdata:00002E58 ; const ISequentialInStream::`vftable'
.rdata:00002E58 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00002E58                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00002E5C                 dd offset __purecall
.rdata:00002E60                 dd offset __purecall
.rdata:00002E64                 dd offset __purecall
.rdata:00002E64 _rdata          ends
.rdata:00002E64
.rdata$r:00002E68 ; ===========================================================================
.rdata$r:00002E68
.rdata$r:00002E68 ; Segment type: Pure data
.rdata$r:00002E68 ; Segment permissions: Read
.rdata$r:00002E68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002E68                 assume cs:_rdata$r
.rdata$r:00002E68                 ;org 2E68h
.rdata$r:00002E68 ; COMDAT (pick any)
.rdata$r:00002E68                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00002E68 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00002E68 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00002E54o
.rdata$r:00002E69                 db    0
.rdata$r:00002E6A                 db    0
.rdata$r:00002E6B                 db    0
.rdata$r:00002E6C                 db    0
.rdata$r:00002E6D                 db    0
.rdata$r:00002E6E                 db    0
.rdata$r:00002E6F                 db    0
.rdata$r:00002E70                 db    0
.rdata$r:00002E71                 db    0
.rdata$r:00002E72                 db    0
.rdata$r:00002E73                 db    0
.rdata$r:00002E74                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00002E78                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002E78 _rdata$r        ends
.rdata$r:00002E78
.text:00002E7C ; ===========================================================================
.text:00002E7C
.text:00002E7C ; Segment type: Pure code
.text:00002E7C ; Segment permissions: Read/Execute
.text:00002E7C _text           segment para public 'CODE' use32
.text:00002E7C                 assume cs:_text
.text:00002E7C                 ;org 2E7Ch
.text:00002E7C ; COMDAT (pick any)
.text:00002E7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E7C
.text:00002E7C ; =============== S U B R O U T I N E =======================================
.text:00002E7C
.text:00002E7C ; Attributes: bp-based frame
.text:00002E7C
.text:00002E7C ; _DWORD __thiscall ICompressSetOutStreamSize::ICompressSetOutStreamSize(ICompressSetOutStreamSize *__hidden this)
.text:00002E7C                 public ??0ICompressSetOutStreamSize@@QAE@XZ
.text:00002E7C ??0ICompressSetOutStreamSize@@QAE@XZ proc near
.text:00002E7C                                         ; CODE XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+5Cp
.text:00002E7C
.text:00002E7C var_4           = dword ptr -4
.text:00002E7C
.text:00002E7C                 push    ebp
.text:00002E7D                 mov     ebp, esp
.text:00002E7F                 push    ecx
.text:00002E80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E87                 mov     [ebp+var_4], ecx
.text:00002E8A                 mov     ecx, [ebp+var_4]
.text:00002E8D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002E92                 mov     eax, [ebp+var_4]
.text:00002E95                 mov     dword ptr [eax], offset ??_7ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`vftable'
.text:00002E9B                 mov     eax, [ebp+var_4]
.text:00002E9E                 add     esp, 4
.text:00002EA1                 cmp     ebp, esp
.text:00002EA3                 call    __RTC_CheckEsp
.text:00002EA8                 mov     esp, ebp
.text:00002EAA                 pop     ebp
.text:00002EAB                 retn
.text:00002EAB ??0ICompressSetOutStreamSize@@QAE@XZ endp
.text:00002EAB
.text:00002EAB _text           ends
.text:00002EAB
.rdata:00002EAC ; ===========================================================================
.rdata:00002EAC
.rdata:00002EAC ; Segment type: Pure data
.rdata:00002EAC ; Segment permissions: Read
.rdata:00002EAC _rdata          segment dword public 'DATA' use32
.rdata:00002EAC                 assume cs:_rdata
.rdata:00002EAC                 ;org 2EACh
.rdata:00002EAC ; COMDAT (pick largest)
.rdata:00002EAC                 dd offset ??_R4ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata:00002EB0                 public ??_7ICompressSetOutStreamSize@@6B@
.rdata:00002EB0 ; const ICompressSetOutStreamSize::`vftable'
.rdata:00002EB0 ??_7ICompressSetOutStreamSize@@6B@ dd offset __purecall
.rdata:00002EB0                                         ; DATA XREF: ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)+19o
.rdata:00002EB4                 dd offset __purecall
.rdata:00002EB8                 dd offset __purecall
.rdata:00002EBC                 dd offset __purecall
.rdata:00002EBC _rdata          ends
.rdata:00002EBC
.rdata$r:00002EC0 ; ===========================================================================
.rdata$r:00002EC0
.rdata$r:00002EC0 ; Segment type: Pure data
.rdata$r:00002EC0 ; Segment permissions: Read
.rdata$r:00002EC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002EC0                 assume cs:_rdata$r
.rdata$r:00002EC0                 ;org 2EC0h
.rdata$r:00002EC0 ; COMDAT (pick any)
.rdata$r:00002EC0                 public ??_R4ICompressSetOutStreamSize@@6B@
.rdata$r:00002EC0 ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata$r:00002EC0 ??_R4ICompressSetOutStreamSize@@6B@ db    0 ; DATA XREF: .rdata:00002EACo
.rdata$r:00002EC1                 db    0
.rdata$r:00002EC2                 db    0
.rdata$r:00002EC3                 db    0
.rdata$r:00002EC4                 db    0
.rdata$r:00002EC5                 db    0
.rdata$r:00002EC6                 db    0
.rdata$r:00002EC7                 db    0
.rdata$r:00002EC8                 db    0
.rdata$r:00002EC9                 db    0
.rdata$r:00002ECA                 db    0
.rdata$r:00002ECB                 db    0
.rdata$r:00002ECC                 dd offset ??_R0?AUICompressSetOutStreamSize@@@8 ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00002ED0                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002ED0 _rdata$r        ends
.rdata$r:00002ED0
.text:00002ED4 ; ===========================================================================
.text:00002ED4
.text:00002ED4 ; Segment type: Pure code
.text:00002ED4 ; Segment permissions: Read/Execute
.text:00002ED4 _text           segment para public 'CODE' use32
.text:00002ED4                 assume cs:_text
.text:00002ED4                 ;org 2ED4h
.text:00002ED4 ; COMDAT (pick any)
.text:00002ED4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002ED4
.text:00002ED4 ; =============== S U B R O U T I N E =======================================
.text:00002ED4
.text:00002ED4 ; Attributes: bp-based frame
.text:00002ED4
.text:00002ED4 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00002ED4                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00002ED4 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00002ED4                                         ; DATA XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+C9o
.text:00002ED4
.text:00002ED4 var_4           = dword ptr -4
.text:00002ED4
.text:00002ED4                 push    ebp
.text:00002ED5                 mov     ebp, esp
.text:00002ED7                 push    ecx
.text:00002ED8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EDF                 mov     [ebp+var_4], ecx
.text:00002EE2                 mov     eax, [ebp+var_4]
.text:00002EE5                 mov     dword ptr [eax], 0
.text:00002EEB                 mov     eax, [ebp+var_4]
.text:00002EEE                 mov     esp, ebp
.text:00002EF0                 pop     ebp
.text:00002EF1                 retn
.text:00002EF1 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00002EF1
.text:00002EF1 ; ---------------------------------------------------------------------------
.text:00002EF2                 align 4
.text:00002EF2 _text           ends
.text:00002EF2
.text:00002EF4 ; ===========================================================================
.text:00002EF4
.text:00002EF4 ; Segment type: Pure code
.text:00002EF4 ; Segment permissions: Read/Execute
.text:00002EF4 _text           segment para public 'CODE' use32
.text:00002EF4                 assume cs:_text
.text:00002EF4                 ;org 2EF4h
.text:00002EF4 ; COMDAT (pick any)
.text:00002EF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002EF4
.text:00002EF4 ; =============== S U B R O U T I N E =======================================
.text:00002EF4
.text:00002EF4 ; Attributes: bp-based frame
.text:00002EF4
.text:00002EF4 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00002EF4                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00002EF4 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00002EF4                                         ; DATA XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+C4o
.text:00002EF4                                         ; NCompress::NBcj2::CDecoder::~CDecoder(void)+34o
.text:00002EF4
.text:00002EF4 var_4           = dword ptr -4
.text:00002EF4
.text:00002EF4                 push    ebp
.text:00002EF5                 mov     ebp, esp
.text:00002EF7                 push    ecx
.text:00002EF8                 push    esi
.text:00002EF9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F00                 mov     [ebp+var_4], ecx
.text:00002F03                 mov     eax, [ebp+var_4]
.text:00002F06                 cmp     dword ptr [eax], 0
.text:00002F09                 jz      short loc_2F26
.text:00002F0B                 mov     ecx, [ebp+var_4]
.text:00002F0E                 mov     edx, [ecx]
.text:00002F10                 mov     eax, [ebp+var_4]
.text:00002F13                 mov     ecx, [eax]
.text:00002F15                 mov     edx, [edx]
.text:00002F17                 mov     esi, esp
.text:00002F19                 push    ecx
.text:00002F1A                 mov     eax, [edx+8]
.text:00002F1D                 call    eax
.text:00002F1F                 cmp     esi, esp
.text:00002F21                 call    __RTC_CheckEsp
.text:00002F26
.text:00002F26 loc_2F26:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00002F26                 pop     esi
.text:00002F27                 add     esp, 4
.text:00002F2A                 cmp     ebp, esp
.text:00002F2C                 call    __RTC_CheckEsp
.text:00002F31                 mov     esp, ebp
.text:00002F33                 pop     ebp
.text:00002F34                 retn
.text:00002F34 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00002F34
.text:00002F34 ; ---------------------------------------------------------------------------
.text:00002F35                 align 4
.text:00002F35 _text           ends
.text:00002F35
.text:00002F38 ; ===========================================================================
.text:00002F38
.text:00002F38 ; Segment type: Pure code
.text:00002F38 ; Segment permissions: Read/Execute
.text:00002F38 _text           segment para public 'CODE' use32
.text:00002F38                 assume cs:_text
.text:00002F38                 ;org 2F38h
.text:00002F38 ; COMDAT (pick any)
.text:00002F38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F38
.text:00002F38 ; =============== S U B R O U T I N E =======================================
.text:00002F38
.text:00002F38 ; Attributes: bp-based frame
.text:00002F38
.text:00002F38 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:00002F38                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:00002F38 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:00002F38                                         ; CODE XREF: NCompress::NBcj2::CDecoder::ReleaseInStream2(uint)+10p
.text:00002F38
.text:00002F38 var_4           = dword ptr -4
.text:00002F38
.text:00002F38                 push    ebp
.text:00002F39                 mov     ebp, esp
.text:00002F3B                 push    ecx
.text:00002F3C                 push    esi
.text:00002F3D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F44                 mov     [ebp+var_4], ecx
.text:00002F47                 mov     eax, [ebp+var_4]
.text:00002F4A                 cmp     dword ptr [eax], 0
.text:00002F4D                 jz      short loc_2F73
.text:00002F4F                 mov     ecx, [ebp+var_4]
.text:00002F52                 mov     edx, [ecx]
.text:00002F54                 mov     eax, [ebp+var_4]
.text:00002F57                 mov     ecx, [eax]
.text:00002F59                 mov     edx, [edx]
.text:00002F5B                 mov     esi, esp
.text:00002F5D                 push    ecx
.text:00002F5E                 mov     eax, [edx+8]
.text:00002F61                 call    eax
.text:00002F63                 cmp     esi, esp
.text:00002F65                 call    __RTC_CheckEsp
.text:00002F6A                 mov     ecx, [ebp+var_4]
.text:00002F6D                 mov     dword ptr [ecx], 0
.text:00002F73
.text:00002F73 loc_2F73:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:00002F73                 pop     esi
.text:00002F74                 add     esp, 4
.text:00002F77                 cmp     ebp, esp
.text:00002F79                 call    __RTC_CheckEsp
.text:00002F7E                 mov     esp, ebp
.text:00002F80                 pop     ebp
.text:00002F81                 retn
.text:00002F81 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:00002F81
.text:00002F81 ; ---------------------------------------------------------------------------
.text:00002F82                 align 4
.text:00002F82 _text           ends
.text:00002F82
.text:00002F84 ; ===========================================================================
.text:00002F84
.text:00002F84 ; Segment type: Pure code
.text:00002F84 ; Segment permissions: Read/Execute
.text:00002F84 _text           segment para public 'CODE' use32
.text:00002F84                 assume cs:_text
.text:00002F84                 ;org 2F84h
.text:00002F84 ; COMDAT (pick any)
.text:00002F84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F84
.text:00002F84 ; =============== S U B R O U T I N E =======================================
.text:00002F84
.text:00002F84 ; Attributes: bp-based frame
.text:00002F84
.text:00002F84 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator->(void)const
.text:00002F84                 public ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00002F84 ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00002F84                                         ; CODE XREF: NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+221p
.text:00002F84
.text:00002F84 var_4           = dword ptr -4
.text:00002F84
.text:00002F84                 push    ebp
.text:00002F85                 mov     ebp, esp
.text:00002F87                 push    ecx
.text:00002F88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F8F                 mov     [ebp+var_4], ecx
.text:00002F92                 mov     eax, [ebp+var_4]
.text:00002F95                 mov     eax, [eax]
.text:00002F97                 mov     esp, ebp
.text:00002F99                 pop     ebp
.text:00002F9A                 retn
.text:00002F9A ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00002F9A
.text:00002F9A ; ---------------------------------------------------------------------------
.text:00002F9B                 align 4
.text:00002F9B _text           ends
.text:00002F9B
.text:00002F9C ; ===========================================================================
.text:00002F9C
.text:00002F9C ; Segment type: Pure code
.text:00002F9C ; Segment permissions: Read/Execute
.text:00002F9C _text           segment para public 'CODE' use32
.text:00002F9C                 assume cs:_text
.text:00002F9C                 ;org 2F9Ch
.text:00002F9C ; COMDAT (pick any)
.text:00002F9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F9C
.text:00002F9C ; =============== S U B R O U T I N E =======================================
.text:00002F9C
.text:00002F9C ; Attributes: bp-based frame
.text:00002F9C
.text:00002F9C ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00002F9C                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00002F9C ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00002F9C                                         ; CODE XREF: NCompress::NBcj2::CDecoder::SetInStream2(uint,ISequentialInStream *)+14p
.text:00002F9C
.text:00002F9C var_4           = dword ptr -4
.text:00002F9C arg_0           = dword ptr  8
.text:00002F9C
.text:00002F9C                 push    ebp
.text:00002F9D                 mov     ebp, esp
.text:00002F9F                 push    ecx
.text:00002FA0                 push    esi
.text:00002FA1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FA8                 mov     [ebp+var_4], ecx
.text:00002FAB                 cmp     [ebp+arg_0], 0
.text:00002FAF                 jz      short loc_2FC8
.text:00002FB1                 mov     eax, [ebp+arg_0]
.text:00002FB4                 mov     ecx, [eax]
.text:00002FB6                 mov     esi, esp
.text:00002FB8                 mov     edx, [ebp+arg_0]
.text:00002FBB                 push    edx
.text:00002FBC                 mov     eax, [ecx+4]
.text:00002FBF                 call    eax
.text:00002FC1                 cmp     esi, esp
.text:00002FC3                 call    __RTC_CheckEsp
.text:00002FC8
.text:00002FC8 loc_2FC8:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00002FC8                 mov     ecx, [ebp+var_4]
.text:00002FCB                 cmp     dword ptr [ecx], 0
.text:00002FCE                 jz      short loc_2FEB
.text:00002FD0                 mov     edx, [ebp+var_4]
.text:00002FD3                 mov     eax, [edx]
.text:00002FD5                 mov     ecx, [ebp+var_4]
.text:00002FD8                 mov     edx, [ecx]
.text:00002FDA                 mov     eax, [eax]
.text:00002FDC                 mov     esi, esp
.text:00002FDE                 push    edx
.text:00002FDF                 mov     ecx, [eax+8]
.text:00002FE2                 call    ecx
.text:00002FE4                 cmp     esi, esp
.text:00002FE6                 call    __RTC_CheckEsp
.text:00002FEB
.text:00002FEB loc_2FEB:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00002FEB                 mov     edx, [ebp+var_4]
.text:00002FEE                 mov     eax, [ebp+arg_0]
.text:00002FF1                 mov     [edx], eax
.text:00002FF3                 mov     eax, [ebp+arg_0]
.text:00002FF6                 pop     esi
.text:00002FF7                 add     esp, 4
.text:00002FFA                 cmp     ebp, esp
.text:00002FFC                 call    __RTC_CheckEsp
.text:00003001                 mov     esp, ebp
.text:00003003                 pop     ebp
.text:00003004                 retn    4
.text:00003004 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00003004
.text:00003004 ; ---------------------------------------------------------------------------
.text:00003007                 align 4
.text:00003007 _text           ends
.text:00003007
.text:00003008 ; ===========================================================================
.text:00003008
.text:00003008 ; Segment type: Pure code
.text:00003008 ; Segment permissions: Read/Execute
.text:00003008 _text           segment para public 'CODE' use32
.text:00003008                 assume cs:_text
.text:00003008                 ;org 3008h
.text:00003008 ; COMDAT (pick any)
.text:00003008                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003008
.text:00003008 ; =============== S U B R O U T I N E =======================================
.text:00003008
.text:00003008 ; Attributes: bp-based frame
.text:00003008
.text:00003008 ; public: __thiscall CMyComPtr<struct ICompressGetSubStreamSize>::CMyComPtr<struct ICompressGetSubStreamSize>(void)
.text:00003008                 public ??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ
.text:00003008 ??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ proc near
.text:00003008                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+B7p
.text:00003008
.text:00003008 var_4           = dword ptr -4
.text:00003008
.text:00003008                 push    ebp
.text:00003009                 mov     ebp, esp
.text:0000300B                 push    ecx
.text:0000300C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003013                 mov     [ebp+var_4], ecx
.text:00003016                 mov     eax, [ebp+var_4]
.text:00003019                 mov     dword ptr [eax], 0
.text:0000301F                 mov     eax, [ebp+var_4]
.text:00003022                 mov     esp, ebp
.text:00003024                 pop     ebp
.text:00003025                 retn
.text:00003025 ??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ endp
.text:00003025
.text:00003025 ; ---------------------------------------------------------------------------
.text:00003026                 align 4
.text:00003026 _text           ends
.text:00003026
.text:00003028 ; ===========================================================================
.text:00003028
.text:00003028 ; Segment type: Pure code
.text:00003028 ; Segment permissions: Read/Execute
.text:00003028 _text           segment para public 'CODE' use32
.text:00003028                 assume cs:_text
.text:00003028                 ;org 3028h
.text:00003028 ; COMDAT (pick any)
.text:00003028                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003028
.text:00003028 ; =============== S U B R O U T I N E =======================================
.text:00003028
.text:00003028 ; Attributes: bp-based frame
.text:00003028
.text:00003028 ; public: __thiscall CMyComPtr<struct ICompressGetSubStreamSize>::~CMyComPtr<struct ICompressGetSubStreamSize>(void)
.text:00003028                 public ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ
.text:00003028 ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ proc near
.text:00003028                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+42Dp
.text:00003028                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+4D9p ...
.text:00003028
.text:00003028 var_4           = dword ptr -4
.text:00003028
.text:00003028                 push    ebp
.text:00003029                 mov     ebp, esp
.text:0000302B                 push    ecx
.text:0000302C                 push    esi
.text:0000302D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003034                 mov     [ebp+var_4], ecx
.text:00003037                 mov     eax, [ebp+var_4]
.text:0000303A                 cmp     dword ptr [eax], 0
.text:0000303D                 jz      short loc_305A
.text:0000303F                 mov     ecx, [ebp+var_4]
.text:00003042                 mov     edx, [ecx]
.text:00003044                 mov     eax, [ebp+var_4]
.text:00003047                 mov     ecx, [eax]
.text:00003049                 mov     edx, [edx]
.text:0000304B                 mov     esi, esp
.text:0000304D                 push    ecx
.text:0000304E                 mov     eax, [edx+8]
.text:00003051                 call    eax
.text:00003053                 cmp     esi, esp
.text:00003055                 call    __RTC_CheckEsp
.text:0000305A
.text:0000305A loc_305A:                               ; CODE XREF: CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)+15j
.text:0000305A                 pop     esi
.text:0000305B                 add     esp, 4
.text:0000305E                 cmp     ebp, esp
.text:00003060                 call    __RTC_CheckEsp
.text:00003065                 mov     esp, ebp
.text:00003067                 pop     ebp
.text:00003068                 retn
.text:00003068 ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ endp
.text:00003068
.text:00003068 ; ---------------------------------------------------------------------------
.text:00003069                 align 4
.text:00003069 _text           ends
.text:00003069
.text:0000306C ; ===========================================================================
.text:0000306C
.text:0000306C ; Segment type: Pure code
.text:0000306C ; Segment permissions: Read/Execute
.text:0000306C _text           segment para public 'CODE' use32
.text:0000306C                 assume cs:_text
.text:0000306C                 ;org 306Ch
.text:0000306C ; COMDAT (pick any)
.text:0000306C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000306C
.text:0000306C ; =============== S U B R O U T I N E =======================================
.text:0000306C
.text:0000306C ; Attributes: bp-based frame
.text:0000306C
.text:0000306C ; public: void __thiscall CMyComPtr<struct ICompressGetSubStreamSize>::Release(void)
.text:0000306C                 public ?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ
.text:0000306C ?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ proc near
.text:0000306C                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+4BCp
.text:0000306C
.text:0000306C var_4           = dword ptr -4
.text:0000306C
.text:0000306C                 push    ebp
.text:0000306D                 mov     ebp, esp
.text:0000306F                 push    ecx
.text:00003070                 push    esi
.text:00003071                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003078                 mov     [ebp+var_4], ecx
.text:0000307B                 mov     eax, [ebp+var_4]
.text:0000307E                 cmp     dword ptr [eax], 0
.text:00003081                 jz      short loc_30A7
.text:00003083                 mov     ecx, [ebp+var_4]
.text:00003086                 mov     edx, [ecx]
.text:00003088                 mov     eax, [ebp+var_4]
.text:0000308B                 mov     ecx, [eax]
.text:0000308D                 mov     edx, [edx]
.text:0000308F                 mov     esi, esp
.text:00003091                 push    ecx
.text:00003092                 mov     eax, [edx+8]
.text:00003095                 call    eax
.text:00003097                 cmp     esi, esp
.text:00003099                 call    __RTC_CheckEsp
.text:0000309E                 mov     ecx, [ebp+var_4]
.text:000030A1                 mov     dword ptr [ecx], 0
.text:000030A7
.text:000030A7 loc_30A7:                               ; CODE XREF: CMyComPtr<ICompressGetSubStreamSize>::Release(void)+15j
.text:000030A7                 pop     esi
.text:000030A8                 add     esp, 4
.text:000030AB                 cmp     ebp, esp
.text:000030AD                 call    __RTC_CheckEsp
.text:000030B2                 mov     esp, ebp
.text:000030B4                 pop     ebp
.text:000030B5                 retn
.text:000030B5 ?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ endp
.text:000030B5
.text:000030B5 ; ---------------------------------------------------------------------------
.text:000030B6                 align 4
.text:000030B6 _text           ends
.text:000030B6
.text:000030B8 ; ===========================================================================
.text:000030B8
.text:000030B8 ; Segment type: Pure code
.text:000030B8 ; Segment permissions: Read/Execute
.text:000030B8 _text           segment para public 'CODE' use32
.text:000030B8                 assume cs:_text
.text:000030B8                 ;org 30B8h
.text:000030B8 ; COMDAT (pick any)
.text:000030B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000030B8
.text:000030B8 ; =============== S U B R O U T I N E =======================================
.text:000030B8
.text:000030B8 ; Attributes: bp-based frame
.text:000030B8
.text:000030B8 ; public: __thiscall CMyComPtr<struct ICompressGetSubStreamSize>::operator struct ICompressGetSubStreamSize *(void)const
.text:000030B8                 public ??B?$CMyComPtr@UICompressGetSubStreamSize@@@@QBEPAUICompressGetSubStreamSize@@XZ
.text:000030B8 ??B?$CMyComPtr@UICompressGetSubStreamSize@@@@QBEPAUICompressGetSubStreamSize@@XZ proc near
.text:000030B8                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+241p
.text:000030B8
.text:000030B8 var_4           = dword ptr -4
.text:000030B8
.text:000030B8                 push    ebp
.text:000030B9                 mov     ebp, esp
.text:000030BB                 push    ecx
.text:000030BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030C3                 mov     [ebp+var_4], ecx
.text:000030C6                 mov     eax, [ebp+var_4]
.text:000030C9                 mov     eax, [eax]
.text:000030CB                 mov     esp, ebp
.text:000030CD                 pop     ebp
.text:000030CE                 retn
.text:000030CE ??B?$CMyComPtr@UICompressGetSubStreamSize@@@@QBEPAUICompressGetSubStreamSize@@XZ endp
.text:000030CE
.text:000030CE ; ---------------------------------------------------------------------------
.text:000030CF                 align 10h
.text:000030CF _text           ends
.text:000030CF
.text:000030D0 ; ===========================================================================
.text:000030D0
.text:000030D0 ; Segment type: Pure code
.text:000030D0 ; Segment permissions: Read/Execute
.text:000030D0 _text           segment para public 'CODE' use32
.text:000030D0                 assume cs:_text
.text:000030D0                 ;org 30D0h
.text:000030D0 ; COMDAT (pick any)
.text:000030D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000030D0
.text:000030D0 ; =============== S U B R O U T I N E =======================================
.text:000030D0
.text:000030D0 ; Attributes: bp-based frame
.text:000030D0
.text:000030D0 ; public: struct ICompressGetSubStreamSize * * __thiscall CMyComPtr<struct ICompressGetSubStreamSize>::operator&(void)
.text:000030D0                 public ??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ
.text:000030D0 ??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ proc near
.text:000030D0                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+C6p
.text:000030D0
.text:000030D0 var_4           = dword ptr -4
.text:000030D0
.text:000030D0                 push    ebp
.text:000030D1                 mov     ebp, esp
.text:000030D3                 push    ecx
.text:000030D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030DB                 mov     [ebp+var_4], ecx
.text:000030DE                 mov     eax, [ebp+var_4]
.text:000030E1                 mov     esp, ebp
.text:000030E3                 pop     ebp
.text:000030E4                 retn
.text:000030E4 ??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ endp
.text:000030E4
.text:000030E4 ; ---------------------------------------------------------------------------
.text:000030E5                 align 4
.text:000030E5 _text           ends
.text:000030E5
.text:000030E8 ; ===========================================================================
.text:000030E8
.text:000030E8 ; Segment type: Pure code
.text:000030E8 ; Segment permissions: Read/Execute
.text:000030E8 _text           segment para public 'CODE' use32
.text:000030E8                 assume cs:_text
.text:000030E8                 ;org 30E8h
.text:000030E8 ; COMDAT (pick any)
.text:000030E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000030E8
.text:000030E8 ; =============== S U B R O U T I N E =======================================
.text:000030E8
.text:000030E8 ; Attributes: bp-based frame
.text:000030E8
.text:000030E8 ; public: struct ICompressGetSubStreamSize * __thiscall CMyComPtr<struct ICompressGetSubStreamSize>::operator->(void)const
.text:000030E8                 public ??C?$CMyComPtr@UICompressGetSubStreamSize@@@@QBEPAUICompressGetSubStreamSize@@XZ
.text:000030E8 ??C?$CMyComPtr@UICompressGetSubStreamSize@@@@QBEPAUICompressGetSubStreamSize@@XZ proc near
.text:000030E8                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+282p
.text:000030E8
.text:000030E8 var_4           = dword ptr -4
.text:000030E8
.text:000030E8                 push    ebp
.text:000030E9                 mov     ebp, esp
.text:000030EB                 push    ecx
.text:000030EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030F3                 mov     [ebp+var_4], ecx
.text:000030F6                 mov     eax, [ebp+var_4]
.text:000030F9                 mov     eax, [eax]
.text:000030FB                 mov     esp, ebp
.text:000030FD                 pop     ebp
.text:000030FE                 retn
.text:000030FE ??C?$CMyComPtr@UICompressGetSubStreamSize@@@@QBEPAUICompressGetSubStreamSize@@XZ endp
.text:000030FE
.text:000030FE ; ---------------------------------------------------------------------------
.text:000030FF                 align 10h
.text:000030FF _text           ends
.text:000030FF
.text:00003100 ; ===========================================================================
.text:00003100
.text:00003100 ; Segment type: Pure code
.text:00003100 ; Segment permissions: Read/Execute
.text:00003100 _text           segment para public 'CODE' use32
.text:00003100                 assume cs:_text
.text:00003100                 ;org 3100h
.text:00003100 ; COMDAT (pick any)
.text:00003100                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003100
.text:00003100 ; =============== S U B R O U T I N E =======================================
.text:00003100
.text:00003100
.text:00003100 ; [thunk]:public: virtual long __stdcall NCompress::NBcj2::CDecoder::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:00003100                 public ?QueryInterface@CDecoder@NBcj2@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.text:00003100 ?QueryInterface@CDecoder@NBcj2@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:00003100                                         ; DATA XREF: .rdata:const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00003100
.text:00003100 arg_0           = dword ptr  4
.text:00003100
.text:00003100                 sub     [esp+arg_0], 10h
.text:00003105                 jmp     ?QueryInterface@CDecoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00003105 ?QueryInterface@CDecoder@NBcj2@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:00003105
.text:00003105 ; ---------------------------------------------------------------------------
.text:0000310A                 align 4
.text:0000310A _text           ends
.text:0000310A
.text:0000310C ; ===========================================================================
.text:0000310C
.text:0000310C ; Segment type: Pure code
.text:0000310C ; Segment permissions: Read/Execute
.text:0000310C _text           segment para public 'CODE' use32
.text:0000310C                 assume cs:_text
.text:0000310C                 ;org 310Ch
.text:0000310C ; COMDAT (pick any)
.text:0000310C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000310C
.text:0000310C ; =============== S U B R O U T I N E =======================================
.text:0000310C
.text:0000310C
.text:0000310C ; [thunk]:public: virtual long __stdcall NCompress::NBcj2::CEncoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:0000310C                 public ?QueryInterface@CEncoder@NBcj2@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:0000310C ?QueryInterface@CEncoder@NBcj2@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:0000310C                                         ; DATA XREF: .rdata:const NCompress::NBcj2::CEncoder::`vftable'{for `ICompressSetBufSize'}o
.text:0000310C
.text:0000310C arg_0           = dword ptr  4
.text:0000310C
.text:0000310C                 sub     [esp+arg_0], 8
.text:00003111                 jmp     ?QueryInterface@CEncoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00003111 ?QueryInterface@CEncoder@NBcj2@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00003111
.text:00003111 ; ---------------------------------------------------------------------------
.text:00003116                 align 4
.text:00003116 _text           ends
.text:00003116
.text:00003118 ; ===========================================================================
.text:00003118
.text:00003118 ; Segment type: Pure code
.text:00003118 ; Segment permissions: Read/Execute
.text:00003118 _text           segment para public 'CODE' use32
.text:00003118                 assume cs:_text
.text:00003118                 ;org 3118h
.text:00003118 ; COMDAT (pick any)
.text:00003118                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003118
.text:00003118 ; =============== S U B R O U T I N E =======================================
.text:00003118
.text:00003118
.text:00003118 ; [thunk]:public: virtual long __stdcall NCompress::NBcj2::CDecoder::QueryInterface`adjustor{20}' (struct _GUID const &, void * *)
.text:00003118                 public ?QueryInterface@CDecoder@NBcj2@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z
.text:00003118 ?QueryInterface@CDecoder@NBcj2@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z proc near
.text:00003118                                         ; DATA XREF: .rdata:const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetBufSize'}o
.text:00003118
.text:00003118 arg_0           = dword ptr  4
.text:00003118
.text:00003118                 sub     [esp+arg_0], 14h
.text:0000311D                 jmp     ?QueryInterface@CDecoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:0000311D ?QueryInterface@CDecoder@NBcj2@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z endp
.text:0000311D
.text:0000311D ; ---------------------------------------------------------------------------
.text:00003122                 align 4
.text:00003122 _text           ends
.text:00003122
.text:00003124 ; ===========================================================================
.text:00003124
.text:00003124 ; Segment type: Pure code
.text:00003124 ; Segment permissions: Read/Execute
.text:00003124 _text           segment para public 'CODE' use32
.text:00003124                 assume cs:_text
.text:00003124                 ;org 3124h
.text:00003124 ; COMDAT (pick any)
.text:00003124                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003124
.text:00003124 ; =============== S U B R O U T I N E =======================================
.text:00003124
.text:00003124
.text:00003124 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CDecoder::Release`adjustor{4}' (void)
.text:00003124                 public ?Release@CDecoder@NBcj2@NCompress@@W3AGKXZ
.text:00003124 ?Release@CDecoder@NBcj2@NCompress@@W3AGKXZ proc near
.text:00003124                                         ; DATA XREF: .rdata:00002678o
.text:00003124
.text:00003124 arg_0           = dword ptr  4
.text:00003124
.text:00003124                 sub     [esp+arg_0], 4
.text:00003129                 jmp     ?Release@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::Release(void)
.text:00003129 ?Release@CDecoder@NBcj2@NCompress@@W3AGKXZ endp
.text:00003129
.text:00003129 ; ---------------------------------------------------------------------------
.text:0000312E                 align 10h
.text:0000312E _text           ends
.text:0000312E
.text:00003130 ; ===========================================================================
.text:00003130
.text:00003130 ; Segment type: Pure code
.text:00003130 ; Segment permissions: Read/Execute
.text:00003130 _text           segment para public 'CODE' use32
.text:00003130                 assume cs:_text
.text:00003130                 ;org 3130h
.text:00003130 ; COMDAT (pick any)
.text:00003130                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003130
.text:00003130 ; =============== S U B R O U T I N E =======================================
.text:00003130
.text:00003130
.text:00003130 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CDecoder::Release`adjustor{8}' (void)
.text:00003130                 public ?Release@CDecoder@NBcj2@NCompress@@W7AGKXZ
.text:00003130 ?Release@CDecoder@NBcj2@NCompress@@W7AGKXZ proc near
.text:00003130                                         ; DATA XREF: .rdata:00002660o
.text:00003130
.text:00003130 arg_0           = dword ptr  4
.text:00003130
.text:00003130                 sub     [esp+arg_0], 8
.text:00003135                 jmp     ?Release@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::Release(void)
.text:00003135 ?Release@CDecoder@NBcj2@NCompress@@W7AGKXZ endp
.text:00003135
.text:00003135 ; ---------------------------------------------------------------------------
.text:0000313A                 align 4
.text:0000313A _text           ends
.text:0000313A
.text:0000313C ; ===========================================================================
.text:0000313C
.text:0000313C ; Segment type: Pure code
.text:0000313C ; Segment permissions: Read/Execute
.text:0000313C _text           segment para public 'CODE' use32
.text:0000313C                 assume cs:_text
.text:0000313C                 ;org 313Ch
.text:0000313C ; COMDAT (pick any)
.text:0000313C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000313C
.text:0000313C ; =============== S U B R O U T I N E =======================================
.text:0000313C
.text:0000313C
.text:0000313C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CDecoder::Release`adjustor{12}' (void)
.text:0000313C                 public ?Release@CDecoder@NBcj2@NCompress@@WM@AGKXZ
.text:0000313C ?Release@CDecoder@NBcj2@NCompress@@WM@AGKXZ proc near
.text:0000313C                                         ; DATA XREF: .rdata:0000264Co
.text:0000313C
.text:0000313C arg_0           = dword ptr  4
.text:0000313C
.text:0000313C                 sub     [esp+arg_0], 0Ch
.text:00003141                 jmp     ?Release@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::Release(void)
.text:00003141 ?Release@CDecoder@NBcj2@NCompress@@WM@AGKXZ endp
.text:00003141
.text:00003141 ; ---------------------------------------------------------------------------
.text:00003146                 align 4
.text:00003146 _text           ends
.text:00003146
.text:00003148 ; ===========================================================================
.text:00003148
.text:00003148 ; Segment type: Pure code
.text:00003148 ; Segment permissions: Read/Execute
.text:00003148 _text           segment para public 'CODE' use32
.text:00003148                 assume cs:_text
.text:00003148                 ;org 3148h
.text:00003148 ; COMDAT (pick any)
.text:00003148                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003148
.text:00003148 ; =============== S U B R O U T I N E =======================================
.text:00003148
.text:00003148
.text:00003148 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CDecoder::AddRef`adjustor{4}' (void)
.text:00003148                 public ?AddRef@CDecoder@NBcj2@NCompress@@W3AGKXZ
.text:00003148 ?AddRef@CDecoder@NBcj2@NCompress@@W3AGKXZ proc near
.text:00003148                                         ; DATA XREF: .rdata:00002674o
.text:00003148
.text:00003148 arg_0           = dword ptr  4
.text:00003148
.text:00003148                 sub     [esp+arg_0], 4
.text:0000314D                 jmp     ?AddRef@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::AddRef(void)
.text:0000314D ?AddRef@CDecoder@NBcj2@NCompress@@W3AGKXZ endp
.text:0000314D
.text:0000314D ; ---------------------------------------------------------------------------
.text:00003152                 align 4
.text:00003152 _text           ends
.text:00003152
.text:00003154 ; ===========================================================================
.text:00003154
.text:00003154 ; Segment type: Pure code
.text:00003154 ; Segment permissions: Read/Execute
.text:00003154 _text           segment para public 'CODE' use32
.text:00003154                 assume cs:_text
.text:00003154                 ;org 3154h
.text:00003154 ; COMDAT (pick any)
.text:00003154                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003154
.text:00003154 ; =============== S U B R O U T I N E =======================================
.text:00003154
.text:00003154
.text:00003154 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CEncoder::Release`adjustor{4}' (void)
.text:00003154                 public ?Release@CEncoder@NBcj2@NCompress@@W3AGKXZ
.text:00003154 ?Release@CEncoder@NBcj2@NCompress@@W3AGKXZ proc near
.text:00003154                                         ; DATA XREF: .rdata:00001DF4o
.text:00003154
.text:00003154 arg_0           = dword ptr  4
.text:00003154
.text:00003154                 sub     [esp+arg_0], 4
.text:00003159                 jmp     ?Release@CEncoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CEncoder::Release(void)
.text:00003159 ?Release@CEncoder@NBcj2@NCompress@@W3AGKXZ endp
.text:00003159
.text:00003159 ; ---------------------------------------------------------------------------
.text:0000315E                 align 10h
.text:0000315E _text           ends
.text:0000315E
.text:00003160 ; ===========================================================================
.text:00003160
.text:00003160 ; Segment type: Pure code
.text:00003160 ; Segment permissions: Read/Execute
.text:00003160 _text           segment para public 'CODE' use32
.text:00003160                 assume cs:_text
.text:00003160                 ;org 3160h
.text:00003160 ; COMDAT (pick any)
.text:00003160                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003160
.text:00003160 ; =============== S U B R O U T I N E =======================================
.text:00003160
.text:00003160
.text:00003160 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CDecoder::Release`adjustor{16}' (void)
.text:00003160                 public ?Release@CDecoder@NBcj2@NCompress@@WBA@AGKXZ
.text:00003160 ?Release@CDecoder@NBcj2@NCompress@@WBA@AGKXZ proc near
.text:00003160                                         ; DATA XREF: .rdata:00002638o
.text:00003160
.text:00003160 arg_0           = dword ptr  4
.text:00003160
.text:00003160                 sub     [esp+arg_0], 10h
.text:00003165                 jmp     ?Release@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::Release(void)
.text:00003165 ?Release@CDecoder@NBcj2@NCompress@@WBA@AGKXZ endp
.text:00003165
.text:00003165 ; ---------------------------------------------------------------------------
.text:0000316A                 align 4
.text:0000316A _text           ends
.text:0000316A
.text:0000316C ; ===========================================================================
.text:0000316C
.text:0000316C ; Segment type: Pure code
.text:0000316C ; Segment permissions: Read/Execute
.text:0000316C _text           segment para public 'CODE' use32
.text:0000316C                 assume cs:_text
.text:0000316C                 ;org 316Ch
.text:0000316C ; COMDAT (pick any)
.text:0000316C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000316C
.text:0000316C ; =============== S U B R O U T I N E =======================================
.text:0000316C
.text:0000316C
.text:0000316C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CDecoder::AddRef`adjustor{8}' (void)
.text:0000316C                 public ?AddRef@CDecoder@NBcj2@NCompress@@W7AGKXZ
.text:0000316C ?AddRef@CDecoder@NBcj2@NCompress@@W7AGKXZ proc near
.text:0000316C                                         ; DATA XREF: .rdata:0000265Co
.text:0000316C
.text:0000316C arg_0           = dword ptr  4
.text:0000316C
.text:0000316C                 sub     [esp+arg_0], 8
.text:00003171                 jmp     ?AddRef@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::AddRef(void)
.text:00003171 ?AddRef@CDecoder@NBcj2@NCompress@@W7AGKXZ endp
.text:00003171
.text:00003171 ; ---------------------------------------------------------------------------
.text:00003176                 align 4
.text:00003176 _text           ends
.text:00003176
.text:00003178 ; ===========================================================================
.text:00003178
.text:00003178 ; Segment type: Pure code
.text:00003178 ; Segment permissions: Read/Execute
.text:00003178 _text           segment para public 'CODE' use32
.text:00003178                 assume cs:_text
.text:00003178                 ;org 3178h
.text:00003178 ; COMDAT (pick any)
.text:00003178                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003178
.text:00003178 ; =============== S U B R O U T I N E =======================================
.text:00003178
.text:00003178
.text:00003178 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CEncoder::Release`adjustor{8}' (void)
.text:00003178                 public ?Release@CEncoder@NBcj2@NCompress@@W7AGKXZ
.text:00003178 ?Release@CEncoder@NBcj2@NCompress@@W7AGKXZ proc near
.text:00003178                                         ; DATA XREF: .rdata:00001DDCo
.text:00003178
.text:00003178 arg_0           = dword ptr  4
.text:00003178
.text:00003178                 sub     [esp+arg_0], 8
.text:0000317D                 jmp     ?Release@CEncoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CEncoder::Release(void)
.text:0000317D ?Release@CEncoder@NBcj2@NCompress@@W7AGKXZ endp
.text:0000317D
.text:0000317D ; ---------------------------------------------------------------------------
.text:00003182                 align 4
.text:00003182 _text           ends
.text:00003182
.text:00003184 ; ===========================================================================
.text:00003184
.text:00003184 ; Segment type: Pure code
.text:00003184 ; Segment permissions: Read/Execute
.text:00003184 _text           segment para public 'CODE' use32
.text:00003184                 assume cs:_text
.text:00003184                 ;org 3184h
.text:00003184 ; COMDAT (pick any)
.text:00003184                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003184
.text:00003184 ; =============== S U B R O U T I N E =======================================
.text:00003184
.text:00003184
.text:00003184 ; [thunk]:public: virtual long __stdcall NCompress::NBcj2::CDecoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00003184                 public ?QueryInterface@CDecoder@NBcj2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00003184 ?QueryInterface@CDecoder@NBcj2@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00003184                                         ; DATA XREF: .rdata:const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetFinishMode'}o
.text:00003184
.text:00003184 arg_0           = dword ptr  4
.text:00003184
.text:00003184                 sub     [esp+arg_0], 4
.text:00003189                 jmp     ?QueryInterface@CDecoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00003189 ?QueryInterface@CDecoder@NBcj2@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00003189
.text:00003189 ; ---------------------------------------------------------------------------
.text:0000318E                 align 10h
.text:0000318E _text           ends
.text:0000318E
.text:00003190 ; ===========================================================================
.text:00003190
.text:00003190 ; Segment type: Pure code
.text:00003190 ; Segment permissions: Read/Execute
.text:00003190 _text           segment para public 'CODE' use32
.text:00003190                 assume cs:_text
.text:00003190                 ;org 3190h
.text:00003190 ; COMDAT (pick any)
.text:00003190                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003190
.text:00003190 ; =============== S U B R O U T I N E =======================================
.text:00003190
.text:00003190
.text:00003190 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CDecoder::Release`adjustor{20}' (void)
.text:00003190                 public ?Release@CDecoder@NBcj2@NCompress@@WBE@AGKXZ
.text:00003190 ?Release@CDecoder@NBcj2@NCompress@@WBE@AGKXZ proc near
.text:00003190                                         ; DATA XREF: .rdata:00002620o
.text:00003190
.text:00003190 arg_0           = dword ptr  4
.text:00003190
.text:00003190                 sub     [esp+arg_0], 14h
.text:00003195                 jmp     ?Release@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::Release(void)
.text:00003195 ?Release@CDecoder@NBcj2@NCompress@@WBE@AGKXZ endp
.text:00003195
.text:00003195 ; ---------------------------------------------------------------------------
.text:0000319A                 align 4
.text:0000319A _text           ends
.text:0000319A
.text:0000319C ; ===========================================================================
.text:0000319C
.text:0000319C ; Segment type: Pure code
.text:0000319C ; Segment permissions: Read/Execute
.text:0000319C _text           segment para public 'CODE' use32
.text:0000319C                 assume cs:_text
.text:0000319C                 ;org 319Ch
.text:0000319C ; COMDAT (pick any)
.text:0000319C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000319C
.text:0000319C ; =============== S U B R O U T I N E =======================================
.text:0000319C
.text:0000319C
.text:0000319C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CDecoder::AddRef`adjustor{12}' (void)
.text:0000319C                 public ?AddRef@CDecoder@NBcj2@NCompress@@WM@AGKXZ
.text:0000319C ?AddRef@CDecoder@NBcj2@NCompress@@WM@AGKXZ proc near
.text:0000319C                                         ; DATA XREF: .rdata:00002648o
.text:0000319C
.text:0000319C arg_0           = dword ptr  4
.text:0000319C
.text:0000319C                 sub     [esp+arg_0], 0Ch
.text:000031A1                 jmp     ?AddRef@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::AddRef(void)
.text:000031A1 ?AddRef@CDecoder@NBcj2@NCompress@@WM@AGKXZ endp
.text:000031A1
.text:000031A1 ; ---------------------------------------------------------------------------
.text:000031A6                 align 4
.text:000031A6 _text           ends
.text:000031A6
.text:000031A8 ; ===========================================================================
.text:000031A8
.text:000031A8 ; Segment type: Pure code
.text:000031A8 ; Segment permissions: Read/Execute
.text:000031A8 _text           segment para public 'CODE' use32
.text:000031A8                 assume cs:_text
.text:000031A8                 ;org 31A8h
.text:000031A8 ; COMDAT (pick any)
.text:000031A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031A8
.text:000031A8 ; =============== S U B R O U T I N E =======================================
.text:000031A8
.text:000031A8
.text:000031A8 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CEncoder::AddRef`adjustor{4}' (void)
.text:000031A8                 public ?AddRef@CEncoder@NBcj2@NCompress@@W3AGKXZ
.text:000031A8 ?AddRef@CEncoder@NBcj2@NCompress@@W3AGKXZ proc near
.text:000031A8                                         ; DATA XREF: .rdata:00001DF0o
.text:000031A8
.text:000031A8 arg_0           = dword ptr  4
.text:000031A8
.text:000031A8                 sub     [esp+arg_0], 4
.text:000031AD                 jmp     ?AddRef@CEncoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CEncoder::AddRef(void)
.text:000031AD ?AddRef@CEncoder@NBcj2@NCompress@@W3AGKXZ endp
.text:000031AD
.text:000031AD ; ---------------------------------------------------------------------------
.text:000031B2                 align 4
.text:000031B2 _text           ends
.text:000031B2
.text:000031B4 ; ===========================================================================
.text:000031B4
.text:000031B4 ; Segment type: Pure code
.text:000031B4 ; Segment permissions: Read/Execute
.text:000031B4 _text           segment para public 'CODE' use32
.text:000031B4                 assume cs:_text
.text:000031B4                 ;org 31B4h
.text:000031B4 ; COMDAT (pick any)
.text:000031B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031B4
.text:000031B4 ; =============== S U B R O U T I N E =======================================
.text:000031B4
.text:000031B4
.text:000031B4 ; [thunk]:public: virtual long __stdcall NCompress::NBcj2::CDecoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:000031B4                 public ?QueryInterface@CDecoder@NBcj2@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:000031B4 ?QueryInterface@CDecoder@NBcj2@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:000031B4                                         ; DATA XREF: .rdata:const NCompress::NBcj2::CDecoder::`vftable'{for `ICompressSetInStream2'}o
.text:000031B4
.text:000031B4 arg_0           = dword ptr  4
.text:000031B4
.text:000031B4                 sub     [esp+arg_0], 8
.text:000031B9                 jmp     ?QueryInterface@CDecoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:000031B9 ?QueryInterface@CDecoder@NBcj2@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:000031B9
.text:000031B9 ; ---------------------------------------------------------------------------
.text:000031BE                 align 10h
.text:000031BE _text           ends
.text:000031BE
.text:000031C0 ; ===========================================================================
.text:000031C0
.text:000031C0 ; Segment type: Pure code
.text:000031C0 ; Segment permissions: Read/Execute
.text:000031C0 _text           segment para public 'CODE' use32
.text:000031C0                 assume cs:_text
.text:000031C0                 ;org 31C0h
.text:000031C0 ; COMDAT (pick any)
.text:000031C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031C0
.text:000031C0 ; =============== S U B R O U T I N E =======================================
.text:000031C0
.text:000031C0
.text:000031C0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CDecoder::AddRef`adjustor{16}' (void)
.text:000031C0                 public ?AddRef@CDecoder@NBcj2@NCompress@@WBA@AGKXZ
.text:000031C0 ?AddRef@CDecoder@NBcj2@NCompress@@WBA@AGKXZ proc near
.text:000031C0                                         ; DATA XREF: .rdata:00002634o
.text:000031C0
.text:000031C0 arg_0           = dword ptr  4
.text:000031C0
.text:000031C0                 sub     [esp+arg_0], 10h
.text:000031C5                 jmp     ?AddRef@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::AddRef(void)
.text:000031C5 ?AddRef@CDecoder@NBcj2@NCompress@@WBA@AGKXZ endp
.text:000031C5
.text:000031C5 ; ---------------------------------------------------------------------------
.text:000031CA                 align 4
.text:000031CA _text           ends
.text:000031CA
.text:000031CC ; ===========================================================================
.text:000031CC
.text:000031CC ; Segment type: Pure code
.text:000031CC ; Segment permissions: Read/Execute
.text:000031CC _text           segment para public 'CODE' use32
.text:000031CC                 assume cs:_text
.text:000031CC                 ;org 31CCh
.text:000031CC ; COMDAT (pick any)
.text:000031CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031CC
.text:000031CC ; =============== S U B R O U T I N E =======================================
.text:000031CC
.text:000031CC
.text:000031CC ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CEncoder::AddRef`adjustor{8}' (void)
.text:000031CC                 public ?AddRef@CEncoder@NBcj2@NCompress@@W7AGKXZ
.text:000031CC ?AddRef@CEncoder@NBcj2@NCompress@@W7AGKXZ proc near
.text:000031CC                                         ; DATA XREF: .rdata:00001DD8o
.text:000031CC
.text:000031CC arg_0           = dword ptr  4
.text:000031CC
.text:000031CC                 sub     [esp+arg_0], 8
.text:000031D1                 jmp     ?AddRef@CEncoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CEncoder::AddRef(void)
.text:000031D1 ?AddRef@CEncoder@NBcj2@NCompress@@W7AGKXZ endp
.text:000031D1
.text:000031D1 ; ---------------------------------------------------------------------------
.text:000031D6                 align 4
.text:000031D6 _text           ends
.text:000031D6
.text:000031D8 ; ===========================================================================
.text:000031D8
.text:000031D8 ; Segment type: Pure code
.text:000031D8 ; Segment permissions: Read/Execute
.text:000031D8 _text           segment para public 'CODE' use32
.text:000031D8                 assume cs:_text
.text:000031D8                 ;org 31D8h
.text:000031D8 ; COMDAT (pick any)
.text:000031D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031D8
.text:000031D8 ; =============== S U B R O U T I N E =======================================
.text:000031D8
.text:000031D8
.text:000031D8 ; [thunk]:public: virtual long __stdcall NCompress::NBcj2::CDecoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:000031D8                 public ?QueryInterface@CDecoder@NBcj2@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:000031D8 ?QueryInterface@CDecoder@NBcj2@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:000031D8                                         ; DATA XREF: .rdata:const NCompress::NBcj2::CDecoder::`vftable'{for `ISequentialInStream'}o
.text:000031D8
.text:000031D8 arg_0           = dword ptr  4
.text:000031D8
.text:000031D8                 sub     [esp+arg_0], 0Ch
.text:000031DD                 jmp     ?QueryInterface@CDecoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:000031DD ?QueryInterface@CDecoder@NBcj2@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:000031DD
.text:000031DD ; ---------------------------------------------------------------------------
.text:000031E2                 align 4
.text:000031E2 _text           ends
.text:000031E2
.text:000031E4 ; ===========================================================================
.text:000031E4
.text:000031E4 ; Segment type: Pure code
.text:000031E4 ; Segment permissions: Read/Execute
.text:000031E4 _text           segment para public 'CODE' use32
.text:000031E4                 assume cs:_text
.text:000031E4                 ;org 31E4h
.text:000031E4 ; COMDAT (pick any)
.text:000031E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031E4
.text:000031E4 ; =============== S U B R O U T I N E =======================================
.text:000031E4
.text:000031E4
.text:000031E4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBcj2::CDecoder::AddRef`adjustor{20}' (void)
.text:000031E4                 public ?AddRef@CDecoder@NBcj2@NCompress@@WBE@AGKXZ
.text:000031E4 ?AddRef@CDecoder@NBcj2@NCompress@@WBE@AGKXZ proc near
.text:000031E4                                         ; DATA XREF: .rdata:0000261Co
.text:000031E4
.text:000031E4 arg_0           = dword ptr  4
.text:000031E4
.text:000031E4                 sub     [esp+arg_0], 14h
.text:000031E9                 jmp     ?AddRef@CDecoder@NBcj2@NCompress@@UAGKXZ ; NCompress::NBcj2::CDecoder::AddRef(void)
.text:000031E9 ?AddRef@CDecoder@NBcj2@NCompress@@WBE@AGKXZ endp
.text:000031E9
.text:000031E9 ; ---------------------------------------------------------------------------
.text:000031EE                 align 10h
.text:000031EE _text           ends
.text:000031EE
.text:000031F0 ; ===========================================================================
.text:000031F0
.text:000031F0 ; Segment type: Pure code
.text:000031F0 ; Segment permissions: Read/Execute
.text:000031F0 _text           segment para public 'CODE' use32
.text:000031F0                 assume cs:_text
.text:000031F0                 ;org 31F0h
.text:000031F0 ; COMDAT (pick any)
.text:000031F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031F0
.text:000031F0 ; =============== S U B R O U T I N E =======================================
.text:000031F0
.text:000031F0
.text:000031F0 ; [thunk]:public: virtual long __stdcall NCompress::NBcj2::CEncoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000031F0                 public ?QueryInterface@CEncoder@NBcj2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:000031F0 ?QueryInterface@CEncoder@NBcj2@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000031F0                                         ; DATA XREF: .rdata:const NCompress::NBcj2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:000031F0
.text:000031F0 arg_0           = dword ptr  4
.text:000031F0
.text:000031F0                 sub     [esp+arg_0], 4
.text:000031F5                 jmp     ?QueryInterface@CEncoder@NBcj2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)
.text:000031F5 ?QueryInterface@CEncoder@NBcj2@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000031F5
.text:000031F5 _text           ends
.text:000031F5
UNDEF:00003200 ; ===========================================================================
UNDEF:00003200
UNDEF:00003200 ; Segment type: Externs
UNDEF:00003200 ; UNDEF
UNDEF:00003200                 extrn __RTC_Shutdown:near
UNDEF:00003200                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00003204                 extrn __RTC_InitBase:near
UNDEF:00003204                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00003208 ; __stdcall MidFree(x)
UNDEF:00003208                 extrn _MidFree@4:near   ; CODE XREF: NCompress::NBcj2::CBaseCoder::~CBaseCoder(void)+39p
UNDEF:00003208                                         ; NCompress::NBcj2::CBaseCoder::Alloc(bool)+A0p
UNDEF:0000320C                 extrn __RTC_CheckEsp:near
UNDEF:0000320C                                         ; CODE XREF: NCompress::NBcj2::CBaseCoder::~CBaseCoder(void)+45p
UNDEF:0000320C                                         ; NCompress::NBcj2::CBaseCoder::Alloc(bool)+FEp ...
UNDEF:00003210 ; __stdcall MidAlloc(x)
UNDEF:00003210                 extrn _MidAlloc@4:near  ; CODE XREF: NCompress::NBcj2::CBaseCoder::Alloc(bool)+C4p
UNDEF:00003214 ; const type_info::`vftable'
UNDEF:00003214                 extrn ??_7type_info@@6B@:near
UNDEF:00003214                                         ; DATA XREF: .data:NCompress::NBcj2::CEncoder `RTTI Type Descriptor'o
UNDEF:00003214                                         ; .data:ICompressCoder2 `RTTI Type Descriptor'o ...
UNDEF:00003218                 extrn _IID_ICompressSetBufSize:near
UNDEF:00003218                                         ; DATA XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *):loc_224Co
UNDEF:00003218                                         ; NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *):loc_2B67o
UNDEF:0000321C                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:0000321C                                         ; DATA XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *):loc_2218o
UNDEF:00003220                 extrn _IID_ICompressCoder2:near
UNDEF:00003220                                         ; DATA XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *):loc_21FCo
UNDEF:00003220                                         ; NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *):loc_2A72o
UNDEF:00003224 ; const IID IID_IUnknown
UNDEF:00003224                 extrn _IID_IUnknown:near
UNDEF:00003224                                         ; DATA XREF: NCompress::NBcj2::CEncoder::QueryInterface(_GUID const &,void * *)+1Do
UNDEF:00003224                                         ; NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *)+23o
UNDEF:00003228 ; void __cdecl operator delete(void *)
UNDEF:00003228                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NBcj2::CEncoder::`scalar deleting destructor'(uint)+22p
UNDEF:00003228                                         ; NCompress::NBcj2::CDecoder::`scalar deleting destructor'(uint)+22p
UNDEF:0000322C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000322C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00003230                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder2::`vftable'o
UNDEF:00003230                                         ; .rdata:00002404o ...
UNDEF:00003234 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00003234                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00003234                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+60Dp
UNDEF:00003234                                         ; NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+94Fp ...
UNDEF:00003238 ; __stdcall Bcj2Enc_Encode(x)
UNDEF:00003238                 extrn _Bcj2Enc_Encode@4:near
UNDEF:00003238                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+56Ap
UNDEF:0000323C ; __stdcall Bcj2Enc_Init(x)
UNDEF:0000323C                 extrn _Bcj2Enc_Init@4:near
UNDEF:0000323C                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+1CBp
UNDEF:00003240                 extrn _IID_ICompressGetSubStreamSize:near
UNDEF:00003240                                         ; DATA XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+CEo
UNDEF:00003244                 extrn ___security_cookie:near
UNDEF:00003244                                         ; DATA XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+2Dr
UNDEF:00003244                                         ; NCompress::NBcj2::CEncoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+26r ...
UNDEF:00003248                 extrn ___CxxFrameHandler3:near
UNDEF:00003248                                         ; CODE XREF: __ehhandler$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z+23j
UNDEF:00003248                                         ; __ehhandler$?Code@CEncoder@NBcj2@NCompress@@UAGJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z+16j ...
UNDEF:0000324C ; __fastcall __security_check_cookie(x)
UNDEF:0000324C                 extrn @__security_check_cookie@4:near
UNDEF:0000324C                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+9CDp
UNDEF:0000324C                                         ; __ehhandler$?CodeReal@CEncoder@NBcj2@NCompress@@AAEJPBQAUISequentialInStream@@PBQB_KIPBQAUISequentialOutStream@@1IPAUICompressProgressInfo@@@Z+Fp ...
UNDEF:00003250 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00003250                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00003250                                         ; CODE XREF: NCompress::NBcj2::CEncoder::CodeReal(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+9B4p
UNDEF:00003250                                         ; NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+665p ...
UNDEF:00003254 ; void __stdcall `eh vector constructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *))
UNDEF:00003254                 extrn ??_L@YGXPAXIHP6EX0@Z1@Z:near
UNDEF:00003254                                         ; CODE XREF: NCompress::NBcj2::CDecoder::CDecoder(void)+DBp
UNDEF:00003258                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00003258                                         ; DATA XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *):loc_2B33o
UNDEF:0000325C                 extrn _IID_ISequentialInStream:near
UNDEF:0000325C                                         ; DATA XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *):loc_2AFFo
UNDEF:00003260                 extrn _IID_ICompressSetInStream2:near
UNDEF:00003260                                         ; DATA XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *):loc_2AC8o
UNDEF:00003264                 extrn _IID_ICompressSetFinishMode:near
UNDEF:00003264                                         ; DATA XREF: NCompress::NBcj2::CDecoder::QueryInterface(_GUID const &,void * *):loc_2A91o
UNDEF:00003268 ; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
UNDEF:00003268                 extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
UNDEF:00003268                                         ; CODE XREF: NCompress::NBcj2::CDecoder::~CDecoder(void)+46p
UNDEF:0000326C ; __stdcall Bcj2Dec_Init(x)
UNDEF:0000326C                 extrn _Bcj2Dec_Init@4:near
UNDEF:0000326C                                         ; CODE XREF: NCompress::NBcj2::CDecoder::InitCommon(void)+C3p
UNDEF:00003270 ; __stdcall Bcj2Dec_Decode(x)
UNDEF:00003270                 extrn _Bcj2Dec_Decode@4:near
UNDEF:00003270                                         ; CODE XREF: NCompress::NBcj2::CDecoder::Code(ISequentialInStream * const *,unsigned __int64 const * const *,uint,ISequentialOutStream * const *,unsigned __int64 const * const *,uint,ICompressProgressInfo *)+A7p
UNDEF:00003270                                         ; NCompress::NBcj2::CDecoder::Read(void *,uint,uint *)+BBp
UNDEF:00003270
UNDEF:00003270