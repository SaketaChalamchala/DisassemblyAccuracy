.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 4C04D3F02F7439251183E47C16B18BB7
.text:00000000 ; Input CRC32 : 8D1E9211
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ImplodeHuffmanDecoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCompress::NImplode::NHuffman::CDecoder::CDecoder(NCompress::NImplode::NHuffman::CDecoder *this, unsigned int)
.text:00000000                 public ??0CDecoder@NHuffman@NImplode@NCompress@@QAE@I@Z
.text:00000000 ??0CDecoder@NHuffman@NImplode@NCompress@@QAE@I@Z proc near
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000014                 mov     [ebp+var_4], ecx
.text:00000017                 mov     eax, [ebp+var_4]
.text:0000001A                 mov     ecx, [ebp+arg_0]
.text:0000001D                 mov     [eax+90h], ecx
.text:00000023                 xor     ecx, ecx
.text:00000025                 mov     edx, [ebp+var_4]
.text:00000028                 mov     eax, [edx+90h]
.text:0000002E                 mov     edx, 4
.text:00000033                 mul     edx
.text:00000035                 seto    cl
.text:00000038                 neg     ecx
.text:0000003A                 or      ecx, eax
.text:0000003C                 push    ecx             ; unsigned int
.text:0000003D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000042                 add     esp, 4
.text:00000045                 mov     [ebp+var_8], eax
.text:00000048                 mov     eax, [ebp+var_4]
.text:0000004B                 mov     ecx, [ebp+var_8]
.text:0000004E                 mov     [eax+94h], ecx
.text:00000054                 mov     eax, [ebp+var_4]
.text:00000057                 add     esp, 8
.text:0000005A                 cmp     ebp, esp
.text:0000005C                 call    __RTC_CheckEsp
.text:00000061                 mov     esp, ebp
.text:00000063                 pop     ebp
.text:00000064                 retn    4
.text:00000064 ??0CDecoder@NHuffman@NImplode@NCompress@@QAE@I@Z endp
.text:00000064
.text:00000064 ; ---------------------------------------------------------------------------
.text:00000067                 align 10h
.text:00000070
.text:00000070 ; =============== S U B R O U T I N E =======================================
.text:00000070
.text:00000070 ; Attributes: bp-based frame
.text:00000070
.text:00000070 ; _DWORD __thiscall NCompress::NImplode::NHuffman::CDecoder::~CDecoder(NCompress::NImplode::NHuffman::CDecoder *__hidden this)
.text:00000070                 public ??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ
.text:00000070 ??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ proc near
.text:00000070
.text:00000070 var_8           = dword ptr -8
.text:00000070 var_4           = dword ptr -4
.text:00000070
.text:00000070                 push    ebp
.text:00000071                 mov     ebp, esp
.text:00000073                 sub     esp, 8
.text:00000076                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000007D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000084                 mov     [ebp+var_4], ecx
.text:00000087                 mov     eax, [ebp+var_4]
.text:0000008A                 mov     ecx, [eax+94h]
.text:00000090                 mov     [ebp+var_8], ecx
.text:00000093                 mov     edx, [ebp+var_8]
.text:00000096                 push    edx             ; void *
.text:00000097                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000009C                 add     esp, 4
.text:0000009F                 add     esp, 8
.text:000000A2                 cmp     ebp, esp
.text:000000A4                 call    __RTC_CheckEsp
.text:000000A9                 mov     esp, ebp
.text:000000AB                 pop     ebp
.text:000000AC                 retn
.text:000000AC ??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ endp
.text:000000AC
.text:000000AC ; ---------------------------------------------------------------------------
.text:000000AD                 align 10h
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; bool __thiscall NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(NCompress::NImplode::NHuffman::CDecoder *this, const unsigned __int8 *)
.text:000000B0                 public ?SetCodeLengths@CDecoder@NHuffman@NImplode@NCompress@@QAE_NPBE@Z
.text:000000B0 ?SetCodeLengths@CDecoder@NHuffman@NImplode@NCompress@@QAE_NPBE@Z proc near
.text:000000B0
.text:000000B0 var_B4          = dword ptr -0B4h
.text:000000B0 var_B0          = dword ptr -0B0h
.text:000000B0 var_AC          = dword ptr -0ACh
.text:000000B0 var_A8          = dword ptr -0A8h
.text:000000B0 var_A0          = dword ptr -0A0h
.text:000000B0 var_54          = dword ptr -54h
.text:000000B0 var_50          = dword ptr -50h
.text:000000B0 var_10          = dword ptr -10h
.text:000000B0 var_8           = dword ptr -8
.text:000000B0 var_4           = dword ptr -4
.text:000000B0 arg_0           = dword ptr  8
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 sub     esp, 0B4h
.text:000000B9                 push    edi
.text:000000BA                 push    ecx
.text:000000BB                 lea     edi, [ebp+var_B4]
.text:000000C1                 mov     ecx, 2Dh ; '-'
.text:000000C6                 mov     eax, 0CCCCCCCCh
.text:000000CB                 rep stosd
.text:000000CD                 pop     ecx
.text:000000CE                 mov     eax, dword ptr ds:___security_cookie
.text:000000D3                 xor     eax, ebp
.text:000000D5                 mov     [ebp+var_4], eax
.text:000000D8                 mov     [ebp+var_8], ecx
.text:000000DB                 mov     [ebp+var_A8], 0
.text:000000E5                 jmp     short loc_F6
.text:000000E7 ; ---------------------------------------------------------------------------
.text:000000E7
.text:000000E7 loc_E7:                                 ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+5Dj
.text:000000E7                 mov     eax, [ebp+var_A8]
.text:000000ED                 add     eax, 1
.text:000000F0                 mov     [ebp+var_A8], eax
.text:000000F6
.text:000000F6 loc_F6:                                 ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+35j
.text:000000F6                 cmp     [ebp+var_A8], 10h
.text:000000FD                 ja      short loc_10F
.text:000000FF                 mov     ecx, [ebp+var_A8]
.text:00000105                 mov     [ebp+ecx*4+var_54], 0
.text:0000010D                 jmp     short loc_E7
.text:0000010F ; ---------------------------------------------------------------------------
.text:0000010F
.text:0000010F loc_10F:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+4Dj
.text:0000010F                 mov     [ebp+var_AC], 0
.text:00000119                 jmp     short loc_12A
.text:0000011B ; ---------------------------------------------------------------------------
.text:0000011B
.text:0000011B loc_11B:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+AEj
.text:0000011B                 mov     edx, [ebp+var_AC]
.text:00000121                 add     edx, 1
.text:00000124                 mov     [ebp+var_AC], edx
.text:0000012A
.text:0000012A loc_12A:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+69j
.text:0000012A                 mov     eax, [ebp+var_8]
.text:0000012D                 mov     ecx, [ebp+var_AC]
.text:00000133                 cmp     ecx, [eax+90h]
.text:00000139                 jnb     short loc_160
.text:0000013B                 mov     edx, [ebp+arg_0]
.text:0000013E                 add     edx, [ebp+var_AC]
.text:00000144                 movzx   eax, byte ptr [edx]
.text:00000147                 mov     ecx, [ebp+eax*4+var_54]
.text:0000014B                 add     ecx, 1
.text:0000014E                 mov     edx, [ebp+arg_0]
.text:00000151                 add     edx, [ebp+var_AC]
.text:00000157                 movzx   eax, byte ptr [edx]
.text:0000015A                 mov     [ebp+eax*4+var_54], ecx
.text:0000015E                 jmp     short loc_11B
.text:00000160 ; ---------------------------------------------------------------------------
.text:00000160
.text:00000160 loc_160:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+89j
.text:00000160                 mov     ecx, [ebp+var_8]
.text:00000163                 mov     dword ptr [ecx+44h], 0
.text:0000016A                 mov     edx, [ebp+var_8]
.text:0000016D                 mov     dword ptr [edx+8Ch], 0
.text:00000177                 mov     [ebp+var_10], 0
.text:0000017E                 mov     [ebp+var_B0], 0
.text:00000188                 mov     [ebp+var_A8], 10h
.text:00000192                 jmp     short loc_1A3
.text:00000194 ; ---------------------------------------------------------------------------
.text:00000194
.text:00000194 loc_194:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+190j
.text:00000194                 mov     eax, [ebp+var_A8]
.text:0000019A                 sub     eax, 1
.text:0000019D                 mov     [ebp+var_A8], eax
.text:000001A3
.text:000001A3 loc_1A3:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+E2j
.text:000001A3                 cmp     [ebp+var_A8], 0
.text:000001AA                 jbe     loc_245
.text:000001B0                 mov     ecx, 10h
.text:000001B5                 sub     ecx, [ebp+var_A8]
.text:000001BB                 mov     edx, [ebp+var_A8]
.text:000001C1                 mov     eax, [ebp+edx*4+var_54]
.text:000001C5                 shl     eax, cl
.text:000001C7                 add     eax, [ebp+var_B0]
.text:000001CD                 mov     [ebp+var_B0], eax
.text:000001D3                 cmp     [ebp+var_B0], 10000h
.text:000001DD                 jbe     short loc_1E6
.text:000001DF                 xor     al, al
.text:000001E1                 jmp     loc_2E5
.text:000001E6 ; ---------------------------------------------------------------------------
.text:000001E6
.text:000001E6 loc_1E6:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+12Dj
.text:000001E6                 mov     ecx, [ebp+var_A8]
.text:000001EC                 mov     edx, [ebp+var_8]
.text:000001EF                 mov     eax, [ebp+var_B0]
.text:000001F5                 mov     [edx+ecx*4], eax
.text:000001F8                 mov     ecx, [ebp+var_A8]
.text:000001FE                 mov     edx, [ebp+var_8]
.text:00000201                 mov     eax, [edx+ecx*4+4Ch]
.text:00000205                 mov     ecx, [ebp+var_A8]
.text:0000020B                 add     eax, [ebp+ecx*4+var_50]
.text:0000020F                 mov     edx, [ebp+var_A8]
.text:00000215                 mov     ecx, [ebp+var_8]
.text:00000218                 mov     [ecx+edx*4+48h], eax
.text:0000021C                 mov     edx, [ebp+var_A8]
.text:00000222                 mov     eax, [ebp+var_8]
.text:00000225                 mov     ecx, [eax+edx*4+48h]
.text:00000229                 mov     edx, [ebp+var_A8]
.text:0000022F                 add     ecx, [ebp+edx*4+var_54]
.text:00000233                 mov     eax, [ebp+var_A8]
.text:00000239                 mov     [ebp+eax*4+var_A0], ecx
.text:00000240                 jmp     loc_194
.text:00000245 ; ---------------------------------------------------------------------------
.text:00000245
.text:00000245 loc_245:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+FAj
.text:00000245                 cmp     [ebp+var_B0], 10000h
.text:0000024F                 jz      short loc_258
.text:00000251                 xor     al, al
.text:00000253                 jmp     loc_2E5
.text:00000258 ; ---------------------------------------------------------------------------
.text:00000258
.text:00000258 loc_258:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+19Fj
.text:00000258                 mov     [ebp+var_AC], 0
.text:00000262                 jmp     short loc_273
.text:00000264 ; ---------------------------------------------------------------------------
.text:00000264
.text:00000264 loc_264:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *):loc_2E1j
.text:00000264                 mov     ecx, [ebp+var_AC]
.text:0000026A                 add     ecx, 1
.text:0000026D                 mov     [ebp+var_AC], ecx
.text:00000273
.text:00000273 loc_273:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+1B2j
.text:00000273                 mov     edx, [ebp+var_8]
.text:00000276                 mov     eax, [ebp+var_AC]
.text:0000027C                 cmp     eax, [edx+90h]
.text:00000282                 jnb     short loc_2E3
.text:00000284                 mov     ecx, [ebp+arg_0]
.text:00000287                 add     ecx, [ebp+var_AC]
.text:0000028D                 movzx   edx, byte ptr [ecx]
.text:00000290                 test    edx, edx
.text:00000292                 jz      short loc_2E1
.text:00000294                 mov     eax, [ebp+arg_0]
.text:00000297                 add     eax, [ebp+var_AC]
.text:0000029D                 movzx   ecx, byte ptr [eax]
.text:000002A0                 mov     edx, [ebp+ecx*4+var_A0]
.text:000002A7                 sub     edx, 1
.text:000002AA                 mov     [ebp+var_B4], edx
.text:000002B0                 mov     eax, [ebp+arg_0]
.text:000002B3                 add     eax, [ebp+var_AC]
.text:000002B9                 movzx   ecx, byte ptr [eax]
.text:000002BC                 mov     edx, [ebp+var_B4]
.text:000002C2                 mov     [ebp+ecx*4+var_A0], edx
.text:000002C9                 mov     eax, [ebp+var_8]
.text:000002CC                 mov     ecx, [eax+94h]
.text:000002D2                 mov     edx, [ebp+var_B4]
.text:000002D8                 mov     eax, [ebp+var_AC]
.text:000002DE                 mov     [ecx+edx*4], eax
.text:000002E1
.text:000002E1 loc_2E1:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+1E2j
.text:000002E1                 jmp     short loc_264
.text:000002E3 ; ---------------------------------------------------------------------------
.text:000002E3
.text:000002E3 loc_2E3:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+1D2j
.text:000002E3                 mov     al, 1
.text:000002E5
.text:000002E5 loc_2E5:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+131j
.text:000002E5                                         ; NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+1A3j
.text:000002E5                 push    edx
.text:000002E6                 mov     ecx, ebp
.text:000002E8                 push    eax
.text:000002E9                 lea     edx, $LN21
.text:000002EF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002F4                 pop     eax
.text:000002F5                 pop     edx
.text:000002F6                 pop     edi
.text:000002F7                 mov     ecx, [ebp+var_4]
.text:000002FA                 xor     ecx, ebp
.text:000002FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000301                 mov     esp, ebp
.text:00000303                 pop     ebp
.text:00000304                 retn    4
.text:00000304 ?SetCodeLengths@CDecoder@NHuffman@NImplode@NCompress@@QAE_NPBE@Z endp
.text:00000304
.text:00000304 ; ---------------------------------------------------------------------------
.text:00000307                 align 4
.text:00000308 $LN21           dd 2                    ; DATA XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+239o
.text:0000030C                 dd offset $LN20
.text:00000310 $LN20           dd 0FFFFFFACh, 48h      ; DATA XREF: .text:0000030Co
.text:00000318                 dd offset $LN18         ; "lenCounts"
.text:0000031C                 dd 0FFFFFF60h, 44h
.text:00000324                 dd offset $LN19         ; "tmpPositions"
.text:00000328 $LN19           db 'tmpPositions',0     ; DATA XREF: .text:00000324o
.text:00000335 $LN18           db 'lenCounts',0        ; DATA XREF: .text:00000318o
.text:0000033F                 align 10h
.text:00000340
.text:00000340 ; =============== S U B R O U T I N E =======================================
.text:00000340
.text:00000340 ; Attributes: bp-based frame
.text:00000340
.text:00000340 ; public: unsigned int __thiscall NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(class NBitl::CDecoder<class CInBuffer> *)
.text:00000340                 public ?DecodeSymbol@CDecoder@NHuffman@NImplode@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z
.text:00000340 ?DecodeSymbol@CDecoder@NHuffman@NImplode@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z proc near
.text:00000340
.text:00000340 var_14          = dword ptr -14h
.text:00000340 var_10          = dword ptr -10h
.text:00000340 var_C           = dword ptr -0Ch
.text:00000340 var_8           = dword ptr -8
.text:00000340 var_4           = dword ptr -4
.text:00000340 arg_0           = dword ptr  8
.text:00000340
.text:00000340                 push    ebp
.text:00000341                 mov     ebp, esp
.text:00000343                 sub     esp, 14h
.text:00000346                 mov     eax, 0CCCCCCCCh
.text:0000034B                 mov     [ebp+var_14], eax
.text:0000034E                 mov     [ebp+var_10], eax
.text:00000351                 mov     [ebp+var_C], eax
.text:00000354                 mov     [ebp+var_8], eax
.text:00000357                 mov     [ebp+var_4], eax
.text:0000035A                 mov     [ebp+var_4], ecx
.text:0000035D                 mov     [ebp+var_8], 0
.text:00000364                 push    10h
.text:00000366                 mov     ecx, [ebp+arg_0]
.text:00000369                 call    ?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::GetValue(uint)
.text:0000036E                 mov     [ebp+var_C], eax
.text:00000371                 mov     [ebp+var_10], 10h
.text:00000378                 jmp     short loc_383
.text:0000037A ; ---------------------------------------------------------------------------
.text:0000037A
.text:0000037A loc_37A:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *):loc_39Fj
.text:0000037A                 mov     eax, [ebp+var_10]
.text:0000037D                 sub     eax, 1
.text:00000380                 mov     [ebp+var_10], eax
.text:00000383
.text:00000383 loc_383:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)+38j
.text:00000383                 cmp     [ebp+var_10], 0
.text:00000387                 jbe     short loc_3A1
.text:00000389                 mov     ecx, [ebp+var_10]
.text:0000038C                 mov     edx, [ebp+var_4]
.text:0000038F                 mov     eax, [ebp+var_C]
.text:00000392                 cmp     eax, [edx+ecx*4]
.text:00000395                 jnb     short loc_39F
.text:00000397                 mov     ecx, [ebp+var_10]
.text:0000039A                 mov     [ebp+var_8], ecx
.text:0000039D                 jmp     short loc_3A1
.text:0000039F ; ---------------------------------------------------------------------------
.text:0000039F
.text:0000039F loc_39F:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)+55j
.text:0000039F                 jmp     short loc_37A
.text:000003A1 ; ---------------------------------------------------------------------------
.text:000003A1
.text:000003A1 loc_3A1:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)+47j
.text:000003A1                                         ; NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)+5Dj
.text:000003A1                 cmp     [ebp+var_10], 0
.text:000003A5                 jnz     short loc_3AC
.text:000003A7                 or      eax, 0FFFFFFFFh
.text:000003AA                 jmp     short loc_3FE
.text:000003AC ; ---------------------------------------------------------------------------
.text:000003AC
.text:000003AC loc_3AC:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)+65j
.text:000003AC                 mov     edx, [ebp+var_8]
.text:000003AF                 push    edx
.text:000003B0                 mov     ecx, [ebp+arg_0]
.text:000003B3                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z ; NBitl::CDecoder<CInBuffer>::MovePos(uint)
.text:000003B8                 mov     eax, [ebp+var_8]
.text:000003BB                 mov     ecx, [ebp+var_4]
.text:000003BE                 mov     edx, [ebp+var_C]
.text:000003C1                 sub     edx, [ecx+eax*4+4]
.text:000003C5                 mov     ecx, 10h
.text:000003CA                 sub     ecx, [ebp+var_8]
.text:000003CD                 shr     edx, cl
.text:000003CF                 mov     eax, [ebp+var_8]
.text:000003D2                 mov     ecx, [ebp+var_4]
.text:000003D5                 add     edx, [ecx+eax*4+48h]
.text:000003D9                 mov     [ebp+var_14], edx
.text:000003DC                 mov     edx, [ebp+var_4]
.text:000003DF                 mov     eax, [ebp+var_14]
.text:000003E2                 cmp     eax, [edx+90h]
.text:000003E8                 jb      short loc_3EF
.text:000003EA                 or      eax, 0FFFFFFFFh
.text:000003ED                 jmp     short loc_3FE
.text:000003EF ; ---------------------------------------------------------------------------
.text:000003EF
.text:000003EF loc_3EF:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)+A8j
.text:000003EF                 mov     ecx, [ebp+var_4]
.text:000003F2                 mov     edx, [ecx+94h]
.text:000003F8                 mov     eax, [ebp+var_14]
.text:000003FB                 mov     eax, [edx+eax*4]
.text:000003FE
.text:000003FE loc_3FE:                                ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)+6Aj
.text:000003FE                                         ; NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)+ADj
.text:000003FE                 add     esp, 14h
.text:00000401                 cmp     ebp, esp
.text:00000403                 call    __RTC_CheckEsp
.text:00000408                 mov     esp, ebp
.text:0000040A                 pop     ebp
.text:0000040B                 retn    4
.text:0000040B ?DecodeSymbol@CDecoder@NHuffman@NImplode@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z endp
.text:0000040B
.text:0000040B ; ---------------------------------------------------------------------------
.text:0000040E                 align 10h
.text:0000040E _text           ends
.text:0000040E
.rtc$TMZ:00000410 ; ===========================================================================
.rtc$TMZ:00000410
.rtc$TMZ:00000410 ; Segment type: Pure data
.rtc$TMZ:00000410 ; Segment permissions: Read
.rtc$TMZ:00000410 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000410                 assume cs:_rtc$TMZ
.rtc$TMZ:00000410                 ;org 410h
.rtc$TMZ:00000410 ; COMDAT (pick any)
.rtc$TMZ:00000410 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000410 _rtc$TMZ        ends
.rtc$TMZ:00000410
.rtc$IMZ:00000414 ; ===========================================================================
.rtc$IMZ:00000414
.rtc$IMZ:00000414 ; Segment type: Pure data
.rtc$IMZ:00000414 ; Segment permissions: Read
.rtc$IMZ:00000414 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000414                 assume cs:_rtc$IMZ
.rtc$IMZ:00000414                 ;org 414h
.rtc$IMZ:00000414 ; COMDAT (pick any)
.rtc$IMZ:00000414 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000414 _rtc$IMZ        ends
.rtc$IMZ:00000414
.text:00000418 ; ===========================================================================
.text:00000418
.text:00000418 ; Segment type: Pure code
.text:00000418 ; Segment permissions: Read/Execute
.text:00000418 _text           segment para public 'CODE' use32
.text:00000418                 assume cs:_text
.text:00000418                 ;org 418h
.text:00000418 ; COMDAT (pick any)
.text:00000418                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000418
.text:00000418 ; =============== S U B R O U T I N E =======================================
.text:00000418
.text:00000418 ; Attributes: bp-based frame
.text:00000418
.text:00000418 ; public: unsigned int __thiscall NBitl::CDecoder<class CInBuffer>::GetValue(unsigned int)
.text:00000418                 public ?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z
.text:00000418 ?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z proc near
.text:00000418                                         ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)+29p
.text:00000418
.text:00000418 var_4           = dword ptr -4
.text:00000418 arg_0           = dword ptr  8
.text:00000418
.text:00000418                 push    ebp
.text:00000419                 mov     ebp, esp
.text:0000041B                 push    ecx
.text:0000041C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000423                 mov     [ebp+var_4], ecx
.text:00000426                 mov     ecx, [ebp+var_4]
.text:00000429                 call    ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::Normalize(void)
.text:0000042E                 mov     eax, [ebp+var_4]
.text:00000431                 mov     ecx, 8
.text:00000436                 sub     ecx, [eax]
.text:00000438                 mov     edx, [ebp+var_4]
.text:0000043B                 mov     eax, [edx+4]
.text:0000043E                 shr     eax, cl
.text:00000440                 and     eax, 0FFFFFFh
.text:00000445                 mov     ecx, 18h
.text:0000044A                 sub     ecx, [ebp+arg_0]
.text:0000044D                 shr     eax, cl
.text:0000044F                 add     esp, 4
.text:00000452                 cmp     ebp, esp
.text:00000454                 call    __RTC_CheckEsp
.text:00000459                 mov     esp, ebp
.text:0000045B                 pop     ebp
.text:0000045C                 retn    4
.text:0000045C ?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z endp
.text:0000045C
.text:0000045C ; ---------------------------------------------------------------------------
.text:0000045F                 align 10h
.text:0000045F _text           ends
.text:0000045F
.text:00000460 ; ===========================================================================
.text:00000460
.text:00000460 ; Segment type: Pure code
.text:00000460 ; Segment permissions: Read/Execute
.text:00000460 _text           segment para public 'CODE' use32
.text:00000460                 assume cs:_text
.text:00000460                 ;org 460h
.text:00000460 ; COMDAT (pick any)
.text:00000460                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000460
.text:00000460 ; =============== S U B R O U T I N E =======================================
.text:00000460
.text:00000460 ; Attributes: bp-based frame
.text:00000460
.text:00000460 ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::MovePos(unsigned int)
.text:00000460                 public ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z
.text:00000460 ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z proc near
.text:00000460                                         ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)+73p
.text:00000460
.text:00000460 var_4           = dword ptr -4
.text:00000460 arg_0           = dword ptr  8
.text:00000460
.text:00000460                 push    ebp
.text:00000461                 mov     ebp, esp
.text:00000463                 push    ecx
.text:00000464                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000046B                 mov     [ebp+var_4], ecx
.text:0000046E                 mov     eax, [ebp+var_4]
.text:00000471                 mov     ecx, [eax]
.text:00000473                 add     ecx, [ebp+arg_0]
.text:00000476                 mov     edx, [ebp+var_4]
.text:00000479                 mov     [edx], ecx
.text:0000047B                 mov     eax, [ebp+var_4]
.text:0000047E                 mov     edx, [eax+30h]
.text:00000481                 mov     ecx, [ebp+arg_0]
.text:00000484                 shr     edx, cl
.text:00000486                 mov     eax, [ebp+var_4]
.text:00000489                 mov     [eax+30h], edx
.text:0000048C                 mov     esp, ebp
.text:0000048E                 pop     ebp
.text:0000048F                 retn    4
.text:0000048F ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z endp
.text:0000048F
.text:0000048F ; ---------------------------------------------------------------------------
.text:00000492                 align 4
.text:00000492 _text           ends
.text:00000492
.text:00000494 ; ===========================================================================
.text:00000494
.text:00000494 ; Segment type: Pure code
.text:00000494 ; Segment permissions: Read/Execute
.text:00000494 _text           segment para public 'CODE' use32
.text:00000494                 assume cs:_text
.text:00000494                 ;org 494h
.text:00000494 ; COMDAT (pick any)
.text:00000494                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000494
.text:00000494 ; =============== S U B R O U T I N E =======================================
.text:00000494
.text:00000494 ; Attributes: bp-based frame
.text:00000494
.text:00000494 ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::Normalize(void)
.text:00000494                 public ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:00000494 ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:00000494                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::GetValue(uint)+11p
.text:00000494
.text:00000494 var_8           = dword ptr -8
.text:00000494 var_4           = dword ptr -4
.text:00000494
.text:00000494                 push    ebp
.text:00000495                 mov     ebp, esp
.text:00000497                 sub     esp, 8
.text:0000049A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000004A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004A8                 mov     [ebp+var_4], ecx
.text:000004AB                 jmp     short loc_4BA
.text:000004AD ; ---------------------------------------------------------------------------
.text:000004AD
.text:000004AD loc_4AD:                                ; CODE XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+74j
.text:000004AD                 mov     eax, [ebp+var_4]
.text:000004B0                 mov     ecx, [eax]
.text:000004B2                 sub     ecx, 8
.text:000004B5                 mov     edx, [ebp+var_4]
.text:000004B8                 mov     [edx], ecx
.text:000004BA
.text:000004BA loc_4BA:                                ; CODE XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+17j
.text:000004BA                 mov     eax, [ebp+var_4]
.text:000004BD                 cmp     dword ptr [eax], 8
.text:000004C0                 jb      short loc_50A
.text:000004C2                 mov     ecx, [ebp+var_4]
.text:000004C5                 add     ecx, 8          ; this
.text:000004C8                 call    ?ReadByte@CInBufferBase@@QAEEXZ ; CInBufferBase::ReadByte(void)
.text:000004CD                 mov     byte ptr [ebp+var_8+3], al
.text:000004D0                 movzx   edx, byte ptr [ebp+var_8+3]
.text:000004D4                 mov     eax, [ebp+var_4]
.text:000004D7                 mov     ecx, 20h ; ' '
.text:000004DC                 sub     ecx, [eax]
.text:000004DE                 shl     edx, cl
.text:000004E0                 mov     ecx, [ebp+var_4]
.text:000004E3                 or      edx, [ecx+30h]
.text:000004E6                 mov     eax, [ebp+var_4]
.text:000004E9                 mov     [eax+30h], edx
.text:000004EC                 mov     ecx, [ebp+var_4]
.text:000004EF                 mov     edx, [ecx+4]
.text:000004F2                 shl     edx, 8
.text:000004F5                 movzx   eax, byte ptr [ebp+var_8+3]
.text:000004F9                 movzx   ecx, byte ptr ds:?kInvertTable@NBitl@@3PAEA[eax] ; uchar * NBitl::kInvertTable
.text:00000500                 or      edx, ecx
.text:00000502                 mov     eax, [ebp+var_4]
.text:00000505                 mov     [eax+4], edx
.text:00000508                 jmp     short loc_4AD
.text:0000050A ; ---------------------------------------------------------------------------
.text:0000050A
.text:0000050A loc_50A:                                ; CODE XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+2Cj
.text:0000050A                 add     esp, 8
.text:0000050D                 cmp     ebp, esp
.text:0000050F                 call    __RTC_CheckEsp
.text:00000514                 mov     esp, ebp
.text:00000516                 pop     ebp
.text:00000517                 retn
.text:00000517 ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:00000517
.text:00000517 _text           ends
.text:00000517
.text:00000518 ; ===========================================================================
.text:00000518
.text:00000518 ; Segment type: Pure code
.text:00000518 ; Segment permissions: Read/Execute
.text:00000518 _text           segment para public 'CODE' use32
.text:00000518                 assume cs:_text
.text:00000518                 ;org 518h
.text:00000518 ; COMDAT (pick any)
.text:00000518                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000518
.text:00000518 ; =============== S U B R O U T I N E =======================================
.text:00000518
.text:00000518 ; Attributes: bp-based frame
.text:00000518
.text:00000518 ; unsigned __int8 __thiscall CInBufferBase::ReadByte(CInBufferBase *__hidden this)
.text:00000518                 public ?ReadByte@CInBufferBase@@QAEEXZ
.text:00000518 ?ReadByte@CInBufferBase@@QAEEXZ proc near
.text:00000518                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+34p
.text:00000518
.text:00000518 var_8           = dword ptr -8
.text:00000518 var_4           = dword ptr -4
.text:00000518
.text:00000518                 push    ebp
.text:00000519                 mov     ebp, esp
.text:0000051B                 sub     esp, 8
.text:0000051E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000525                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000052C                 mov     [ebp+var_4], ecx
.text:0000052F                 mov     eax, [ebp+var_4]
.text:00000532                 mov     ecx, [ebp+var_4]
.text:00000535                 mov     edx, [eax]
.text:00000537                 cmp     edx, [ecx+4]
.text:0000053A                 jb      short loc_546
.text:0000053C                 mov     ecx, [ebp+var_4] ; this
.text:0000053F                 call    ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ ; CInBufferBase::ReadByte_FromNewBlock(void)
.text:00000544                 jmp     short loc_560
.text:00000546 ; ---------------------------------------------------------------------------
.text:00000546
.text:00000546 loc_546:                                ; CODE XREF: CInBufferBase::ReadByte(void)+22j
.text:00000546                 mov     eax, [ebp+var_4]
.text:00000549                 mov     ecx, [eax]
.text:0000054B                 mov     dl, [ecx]
.text:0000054D                 mov     byte ptr [ebp+var_8+3], dl
.text:00000550                 mov     eax, [ebp+var_4]
.text:00000553                 mov     ecx, [eax]
.text:00000555                 add     ecx, 1
.text:00000558                 mov     edx, [ebp+var_4]
.text:0000055B                 mov     [edx], ecx
.text:0000055D                 mov     al, byte ptr [ebp+var_8+3]
.text:00000560
.text:00000560 loc_560:                                ; CODE XREF: CInBufferBase::ReadByte(void)+2Cj
.text:00000560                 add     esp, 8
.text:00000563                 cmp     ebp, esp
.text:00000565                 call    __RTC_CheckEsp
.text:0000056A                 mov     esp, ebp
.text:0000056C                 pop     ebp
.text:0000056D                 retn
.text:0000056D ?ReadByte@CInBufferBase@@QAEEXZ endp
.text:0000056D
.text:0000056D _text           ends
.text:0000056D
UNDEF:00000570 ; ===========================================================================
UNDEF:00000570
UNDEF:00000570 ; Segment type: Externs
UNDEF:00000570 ; UNDEF
UNDEF:00000570 ; void *__cdecl operator new(unsigned int)
UNDEF:00000570                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::CDecoder(uint)+3Dp
UNDEF:00000574                 extrn __RTC_CheckEsp:near
UNDEF:00000574                                         ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::CDecoder(uint)+5Cp
UNDEF:00000574                                         ; NCompress::NImplode::NHuffman::CDecoder::~CDecoder(void)+34p ...
UNDEF:00000578                 extrn __RTC_Shutdown:near
UNDEF:00000578                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000057C                 extrn __RTC_InitBase:near
UNDEF:0000057C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000580 ; void __cdecl operator delete(void *)
UNDEF:00000580                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::~CDecoder(void)+27p
UNDEF:00000584                 extrn ___security_cookie:near
UNDEF:00000584                                         ; DATA XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+1Er
UNDEF:00000588 ; __fastcall __security_check_cookie(x)
UNDEF:00000588                 extrn @__security_check_cookie@4:near
UNDEF:00000588                                         ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+24Cp
UNDEF:0000058C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000058C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000058C                                         ; CODE XREF: NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)+23Fp
UNDEF:00000590 ; unsigned char * NBitl::kInvertTable
UNDEF:00000590                 extrn ?kInvertTable@NBitl@@3PAEA:near
UNDEF:00000590                                         ; DATA XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+65r
UNDEF:00000594 ; unsigned __int8 __thiscall CInBufferBase::ReadByte_FromNewBlock(CInBufferBase *__hidden this)
UNDEF:00000594                 extrn ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ:near
UNDEF:00000594                                         ; CODE XREF: CInBufferBase::ReadByte(void)+27p
UNDEF:00000594
UNDEF:00000594
UNDEF:00000594                 end