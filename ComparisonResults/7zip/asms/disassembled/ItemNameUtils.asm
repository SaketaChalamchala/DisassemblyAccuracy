.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 893BB53F2D845CC0870144A6FB29C51A
.text:00000000 ; Input CRC32 : 58CCF4FC
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ItemNameUtils.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __stdcall NArchive::NItemName::ReplaceToOsPathSeparator(NArchive::NItemName *this, wchar_t *)
.text:00000000                 public ?ReplaceToOsPathSeparator@NItemName@NArchive@@YGXPA_W@Z
.text:00000000 ?ReplaceToOsPathSeparator@NItemName@NArchive@@YGXPA_W@Z proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 this            = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B
.text:0000000B loc_B:                                  ; CODE XREF: NArchive::NItemName::ReplaceToOsPathSeparator(wchar_t *)+3Cj
.text:0000000B                 mov     eax, [ebp+this]
.text:0000000E                 mov     cx, [eax]
.text:00000011                 mov     word ptr [ebp+var_4], cx
.text:00000015                 movzx   edx, word ptr [ebp+var_4]
.text:00000019                 test    edx, edx
.text:0000001B                 jnz     short loc_1F
.text:0000001D                 jmp     short loc_3E
.text:0000001F ; ---------------------------------------------------------------------------
.text:0000001F
.text:0000001F loc_1F:                                 ; CODE XREF: NArchive::NItemName::ReplaceToOsPathSeparator(wchar_t *)+1Bj
.text:0000001F                 movzx   eax, word ptr [ebp+var_4]
.text:00000023                 cmp     eax, 2Fh ; '/'
.text:00000026                 jnz     short loc_33
.text:00000028                 mov     ecx, 5Ch ; '\'
.text:0000002D                 mov     edx, [ebp+this]
.text:00000030                 mov     [edx], cx
.text:00000033
.text:00000033 loc_33:                                 ; CODE XREF: NArchive::NItemName::ReplaceToOsPathSeparator(wchar_t *)+26j
.text:00000033                 mov     eax, [ebp+this]
.text:00000036                 add     eax, 2
.text:00000039                 mov     [ebp+this], eax
.text:0000003C                 jmp     short loc_B
.text:0000003E ; ---------------------------------------------------------------------------
.text:0000003E
.text:0000003E loc_3E:                                 ; CODE XREF: NArchive::NItemName::ReplaceToOsPathSeparator(wchar_t *)+1Dj
.text:0000003E                 mov     esp, ebp
.text:00000040                 pop     ebp
.text:00000041                 retn    4
.text:00000041 ?ReplaceToOsPathSeparator@NItemName@NArchive@@YGXPA_W@Z endp
.text:00000041
.text:00000041 ; ---------------------------------------------------------------------------
.text:00000044                 align 10h
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; class UString __stdcall NArchive::NItemName::MakeLegalName(class UString const &)
.text:00000050                 public ?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.text:00000050 ?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z proc near
.text:00000050
.text:00000050 var_24          = dword ptr -24h
.text:00000050 var_20          = dword ptr -20h
.text:00000050 var_1C          = dword ptr -1Ch
.text:00000050 var_18          = dword ptr -18h
.text:00000050 var_14          = dword ptr -14h
.text:00000050 var_10          = dword ptr -10h
.text:00000050 var_C           = dword ptr -0Ch
.text:00000050 var_4           = dword ptr -4
.text:00000050 arg_0           = dword ptr  8
.text:00000050 arg_4           = dword ptr  0Ch
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 push    0FFFFFFFFh
.text:00000055                 push    offset __ehhandler$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.text:0000005A                 mov     eax, large fs:0
.text:00000060                 push    eax
.text:00000061                 sub     esp, 18h
.text:00000064                 mov     eax, 0CCCCCCCCh
.text:00000069                 mov     [ebp+var_24], eax
.text:0000006C                 mov     [ebp+var_20], eax
.text:0000006F                 mov     [ebp+var_1C], eax
.text:00000072                 mov     [ebp+var_18], eax
.text:00000075                 mov     [ebp+var_14], eax
.text:00000078                 mov     [ebp+var_10], eax
.text:0000007B                 mov     eax, dword ptr ds:___security_cookie
.text:00000080                 xor     eax, ebp
.text:00000082                 push    eax
.text:00000083                 lea     eax, [ebp+var_C]
.text:00000086                 mov     large fs:0, eax
.text:0000008C                 mov     [ebp+var_24], 0
.text:00000093                 mov     eax, [ebp+arg_4]
.text:00000096                 push    eax
.text:00000097                 lea     ecx, [ebp+var_1C]
.text:0000009A                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000009F                 mov     [ebp+var_4], 1
.text:000000A6                 push    2Fh ; '/'       ; wchar_t
.text:000000A8                 push    5Ch ; '\'       ; wchar_t
.text:000000AA                 lea     ecx, [ebp+var_1C] ; this
.text:000000AD                 call    ?Replace@UString@@QAEX_W0@Z ; UString::Replace(wchar_t,wchar_t)
.text:000000B2                 lea     ecx, [ebp+var_1C]
.text:000000B5                 push    ecx
.text:000000B6                 mov     ecx, [ebp+arg_0]
.text:000000B9                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000000BE                 mov     edx, [ebp+var_24]
.text:000000C1                 or      edx, 1
.text:000000C4                 mov     [ebp+var_24], edx
.text:000000C7                 mov     byte ptr [ebp+var_4], 0
.text:000000CB                 lea     ecx, [ebp+var_1C] ; this
.text:000000CE                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000000D3                 mov     eax, [ebp+arg_0]
.text:000000D6                 push    edx
.text:000000D7                 mov     ecx, ebp
.text:000000D9                 push    eax
.text:000000DA                 lea     edx, $LN9
.text:000000E0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000000E5                 pop     eax
.text:000000E6                 pop     edx
.text:000000E7                 mov     ecx, [ebp+var_C]
.text:000000EA                 mov     large fs:0, ecx
.text:000000F1                 pop     ecx
.text:000000F2                 add     esp, 24h
.text:000000F5                 cmp     ebp, esp
.text:000000F7                 call    __RTC_CheckEsp
.text:000000FC                 mov     esp, ebp
.text:000000FE                 pop     ebp
.text:000000FF                 retn    8
.text:000000FF ?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z endp
.text:000000FF
.text:000000FF ; ---------------------------------------------------------------------------
.text:00000102                 align 4
.text:00000104 $LN9            dd 1                    ; DATA XREF: NArchive::NItemName::MakeLegalName(UString const &)+8Ao
.text:00000108                 dd offset $LN8
.text:0000010C $LN8            dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:00000108o
.text:00000114                 dd offset $LN6          ; "zipName"
.text:00000118 $LN6            db 'zipName',0          ; DATA XREF: .text:00000114o
.text:00000120
.text:00000120 ; =============== S U B R O U T I N E =======================================
.text:00000120
.text:00000120 ; Attributes: bp-based frame
.text:00000120
.text:00000120 ; class UString __stdcall NArchive::NItemName::GetOSName(class UString const &)
.text:00000120                 public ?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.text:00000120 ?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z proc near
.text:00000120                                         ; CODE XREF: NArchive::NItemName::GetOSName2(UString const &)+77p
.text:00000120
.text:00000120 var_24          = dword ptr -24h
.text:00000120 var_20          = dword ptr -20h
.text:00000120 var_1C          = dword ptr -1Ch
.text:00000120 var_18          = dword ptr -18h
.text:00000120 var_14          = dword ptr -14h
.text:00000120 var_10          = dword ptr -10h
.text:00000120 var_C           = dword ptr -0Ch
.text:00000120 var_4           = dword ptr -4
.text:00000120 arg_0           = dword ptr  8
.text:00000120 arg_4           = dword ptr  0Ch
.text:00000120
.text:00000120                 push    ebp
.text:00000121                 mov     ebp, esp
.text:00000123                 push    0FFFFFFFFh
.text:00000125                 push    offset __ehhandler$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.text:0000012A                 mov     eax, large fs:0
.text:00000130                 push    eax
.text:00000131                 sub     esp, 18h
.text:00000134                 mov     eax, 0CCCCCCCCh
.text:00000139                 mov     [ebp+var_24], eax
.text:0000013C                 mov     [ebp+var_20], eax
.text:0000013F                 mov     [ebp+var_1C], eax
.text:00000142                 mov     [ebp+var_18], eax
.text:00000145                 mov     [ebp+var_14], eax
.text:00000148                 mov     [ebp+var_10], eax
.text:0000014B                 mov     eax, dword ptr ds:___security_cookie
.text:00000150                 xor     eax, ebp
.text:00000152                 push    eax
.text:00000153                 lea     eax, [ebp+var_C]
.text:00000156                 mov     large fs:0, eax
.text:0000015C                 mov     [ebp+var_24], 0
.text:00000163                 mov     eax, [ebp+arg_4]
.text:00000166                 push    eax
.text:00000167                 lea     ecx, [ebp+var_1C]
.text:0000016A                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000016F                 mov     [ebp+var_4], 1
.text:00000176                 push    5Ch ; '\'       ; wchar_t
.text:00000178                 push    2Fh ; '/'       ; wchar_t
.text:0000017A                 lea     ecx, [ebp+var_1C] ; this
.text:0000017D                 call    ?Replace@UString@@QAEX_W0@Z ; UString::Replace(wchar_t,wchar_t)
.text:00000182                 lea     ecx, [ebp+var_1C]
.text:00000185                 push    ecx
.text:00000186                 mov     ecx, [ebp+arg_0]
.text:00000189                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000018E                 mov     edx, [ebp+var_24]
.text:00000191                 or      edx, 1
.text:00000194                 mov     [ebp+var_24], edx
.text:00000197                 mov     byte ptr [ebp+var_4], 0
.text:0000019B                 lea     ecx, [ebp+var_1C] ; this
.text:0000019E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000001A3                 mov     eax, [ebp+arg_0]
.text:000001A6                 push    edx
.text:000001A7                 mov     ecx, ebp
.text:000001A9                 push    eax
.text:000001AA                 lea     edx, $LN9_0
.text:000001B0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001B5                 pop     eax
.text:000001B6                 pop     edx
.text:000001B7                 mov     ecx, [ebp+var_C]
.text:000001BA                 mov     large fs:0, ecx
.text:000001C1                 pop     ecx
.text:000001C2                 add     esp, 24h
.text:000001C5                 cmp     ebp, esp
.text:000001C7                 call    __RTC_CheckEsp
.text:000001CC                 mov     esp, ebp
.text:000001CE                 pop     ebp
.text:000001CF                 retn    8
.text:000001CF ?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z endp
.text:000001CF
.text:000001CF ; ---------------------------------------------------------------------------
.text:000001D2                 align 4
.text:000001D4 $LN9_0          dd 1                    ; DATA XREF: NArchive::NItemName::GetOSName(UString const &)+8Ao
.text:000001D8                 dd offset $LN8_0
.text:000001DC $LN8_0          dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:000001D8o
.text:000001E4                 dd offset $LN6_0        ; "newName"
.text:000001E8 $LN6_0          db 'newName',0          ; DATA XREF: .text:000001E4o
.text:000001F0
.text:000001F0 ; =============== S U B R O U T I N E =======================================
.text:000001F0
.text:000001F0 ; Attributes: bp-based frame
.text:000001F0
.text:000001F0 ; class UString __stdcall NArchive::NItemName::GetOSName2(class UString const &)
.text:000001F0                 public ?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.text:000001F0 ?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z proc near
.text:000001F0
.text:000001F0 var_24          = dword ptr -24h
.text:000001F0 var_20          = dword ptr -20h
.text:000001F0 var_1C          = dword ptr -1Ch
.text:000001F0 var_18          = dword ptr -18h
.text:000001F0 var_14          = dword ptr -14h
.text:000001F0 var_10          = dword ptr -10h
.text:000001F0 var_C           = dword ptr -0Ch
.text:000001F0 var_4           = dword ptr -4
.text:000001F0 arg_0           = dword ptr  8
.text:000001F0 arg_4           = dword ptr  0Ch
.text:000001F0
.text:000001F0                 push    ebp
.text:000001F1                 mov     ebp, esp
.text:000001F3                 push    0FFFFFFFFh
.text:000001F5                 push    offset __ehhandler$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.text:000001FA                 mov     eax, large fs:0
.text:00000200                 push    eax
.text:00000201                 sub     esp, 18h
.text:00000204                 mov     eax, 0CCCCCCCCh
.text:00000209                 mov     [ebp+var_24], eax
.text:0000020C                 mov     [ebp+var_20], eax
.text:0000020F                 mov     [ebp+var_1C], eax
.text:00000212                 mov     [ebp+var_18], eax
.text:00000215                 mov     [ebp+var_14], eax
.text:00000218                 mov     [ebp+var_10], eax
.text:0000021B                 mov     eax, dword ptr ds:___security_cookie
.text:00000220                 xor     eax, ebp
.text:00000222                 push    eax
.text:00000223                 lea     eax, [ebp+var_C]
.text:00000226                 mov     large fs:0, eax
.text:0000022C                 mov     [ebp+var_24], 0
.text:00000233                 mov     ecx, [ebp+arg_4] ; this
.text:00000236                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000023B                 movzx   eax, al
.text:0000023E                 test    eax, eax
.text:00000240                 jz      short loc_25F
.text:00000242                 mov     ecx, [ebp+arg_0]
.text:00000245                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000024A                 mov     [ebp+var_4], 0
.text:00000251                 mov     ecx, [ebp+var_24]
.text:00000254                 or      ecx, 1
.text:00000257                 mov     [ebp+var_24], ecx
.text:0000025A                 mov     eax, [ebp+arg_0]
.text:0000025D                 jmp     short loc_2AF
.text:0000025F ; ---------------------------------------------------------------------------
.text:0000025F
.text:0000025F loc_25F:                                ; CODE XREF: NArchive::NItemName::GetOSName2(UString const &)+50j
.text:0000025F                 mov     edx, [ebp+arg_4]
.text:00000262                 push    edx
.text:00000263                 lea     eax, [ebp+var_1C]
.text:00000266                 push    eax
.text:00000267                 call    ?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ; NArchive::NItemName::GetOSName(UString const &)
.text:0000026C                 mov     [ebp+var_4], 1
.text:00000273                 lea     ecx, [ebp+var_1C] ; this
.text:00000276                 call    ?Back@UString@@QBE_WXZ ; UString::Back(void)
.text:0000027B                 movzx   ecx, ax
.text:0000027E                 cmp     ecx, 5Ch ; '\'
.text:00000281                 jnz     short loc_28B
.text:00000283                 lea     ecx, [ebp+var_1C] ; this
.text:00000286                 call    ?DeleteBack@UString@@QAEXXZ ; UString::DeleteBack(void)
.text:0000028B
.text:0000028B loc_28B:                                ; CODE XREF: NArchive::NItemName::GetOSName2(UString const &)+91j
.text:0000028B                 lea     edx, [ebp+var_1C]
.text:0000028E                 push    edx
.text:0000028F                 mov     ecx, [ebp+arg_0]
.text:00000292                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00000297                 mov     eax, [ebp+var_24]
.text:0000029A                 or      eax, 1
.text:0000029D                 mov     [ebp+var_24], eax
.text:000002A0                 mov     byte ptr [ebp+var_4], 0
.text:000002A4                 lea     ecx, [ebp+var_1C] ; this
.text:000002A7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000002AC                 mov     eax, [ebp+arg_0]
.text:000002AF
.text:000002AF loc_2AF:                                ; CODE XREF: NArchive::NItemName::GetOSName2(UString const &)+6Dj
.text:000002AF                 push    edx
.text:000002B0                 mov     ecx, ebp
.text:000002B2                 push    eax
.text:000002B3                 lea     edx, $LN11
.text:000002B9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002BE                 pop     eax
.text:000002BF                 pop     edx
.text:000002C0                 mov     ecx, [ebp+var_C]
.text:000002C3                 mov     large fs:0, ecx
.text:000002CA                 pop     ecx
.text:000002CB                 add     esp, 24h
.text:000002CE                 cmp     ebp, esp
.text:000002D0                 call    __RTC_CheckEsp
.text:000002D5                 mov     esp, ebp
.text:000002D7                 pop     ebp
.text:000002D8                 retn    8
.text:000002D8 ?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z endp
.text:000002D8
.text:000002D8 ; ---------------------------------------------------------------------------
.text:000002DB                 align 4
.text:000002DC $LN11           dd 1                    ; DATA XREF: NArchive::NItemName::GetOSName2(UString const &)+C3o
.text:000002E0                 dd offset $LN10
.text:000002E4 $LN10           dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:000002E0o
.text:000002EC                 dd offset $LN8_1        ; "newName"
.text:000002F0 $LN8_1          db 'newName',0          ; DATA XREF: .text:000002ECo
.text:000002F8                 align 10h
.text:00000300
.text:00000300 ; =============== S U B R O U T I N E =======================================
.text:00000300
.text:00000300 ; Attributes: bp-based frame
.text:00000300
.text:00000300 ; void __stdcall NArchive::NItemName::ConvertToOSName2(NArchive::NItemName *this, struct UString *)
.text:00000300                 public ?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z
.text:00000300 ?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z proc near
.text:00000300
.text:00000300 this            = dword ptr  8
.text:00000300
.text:00000300                 push    ebp
.text:00000301                 mov     ebp, esp
.text:00000303                 mov     ecx, [ebp+this] ; this
.text:00000306                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000030B                 movzx   eax, al
.text:0000030E                 test    eax, eax
.text:00000310                 jnz     short loc_336
.text:00000312                 push    5Ch ; '\'       ; wchar_t
.text:00000314                 push    2Fh ; '/'       ; wchar_t
.text:00000316                 mov     ecx, [ebp+this] ; this
.text:00000319                 call    ?Replace@UString@@QAEX_W0@Z ; UString::Replace(wchar_t,wchar_t)
.text:0000031E                 mov     ecx, [ebp+this] ; this
.text:00000321                 call    ?Back@UString@@QBE_WXZ ; UString::Back(void)
.text:00000326                 movzx   ecx, ax
.text:00000329                 cmp     ecx, 5Ch ; '\'
.text:0000032C                 jnz     short loc_336
.text:0000032E                 mov     ecx, [ebp+this] ; this
.text:00000331                 call    ?DeleteBack@UString@@QAEXXZ ; UString::DeleteBack(void)
.text:00000336
.text:00000336 loc_336:                                ; CODE XREF: NArchive::NItemName::ConvertToOSName2(UString &)+10j
.text:00000336                                         ; NArchive::NItemName::ConvertToOSName2(UString &)+2Cj
.text:00000336                 cmp     ebp, esp
.text:00000338                 call    __RTC_CheckEsp
.text:0000033D                 pop     ebp
.text:0000033E                 retn    4
.text:0000033E ?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z endp
.text:0000033E
.text:0000033E ; ---------------------------------------------------------------------------
.text:00000341                 align 10h
.text:00000350
.text:00000350 ; =============== S U B R O U T I N E =======================================
.text:00000350
.text:00000350 ; Attributes: bp-based frame
.text:00000350
.text:00000350 ; bool __stdcall NArchive::NItemName::HasTailSlash(NArchive::NItemName *this, const struct AString *, unsigned int)
.text:00000350                 public ?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z
.text:00000350 ?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z proc near
.text:00000350
.text:00000350 var_4           = dword ptr -4
.text:00000350 this            = dword ptr  8
.text:00000350 arg_4           = dword ptr  0Ch
.text:00000350
.text:00000350                 push    ebp
.text:00000351                 mov     ebp, esp
.text:00000353                 push    ecx
.text:00000354                 push    esi
.text:00000355                 push    edi
.text:00000356                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000035D                 mov     ecx, [ebp+this] ; this
.text:00000360                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00000365                 movzx   eax, al
.text:00000368                 test    eax, eax
.text:0000036A                 jz      short loc_370
.text:0000036C                 xor     al, al
.text:0000036E                 jmp     short loc_3B7
.text:00000370 ; ---------------------------------------------------------------------------
.text:00000370
.text:00000370 loc_370:                                ; CODE XREF: NArchive::NItemName::HasTailSlash(AString const &,uint)+1Aj
.text:00000370                 mov     esi, esp
.text:00000372                 push    0               ; dwFlags
.text:00000374                 mov     ecx, [ebp+this]
.text:00000377                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000037C                 mov     edi, eax
.text:0000037E                 mov     ecx, [ebp+this] ; this
.text:00000381                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000386                 add     edi, eax
.text:00000388                 push    edi             ; lpCurrentChar
.text:00000389                 mov     ecx, [ebp+this]
.text:0000038C                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000391                 push    eax             ; lpStart
.text:00000392                 movzx   ecx, word ptr [ebp+arg_4]
.text:00000396                 push    ecx             ; CodePage
.text:00000397                 call    dword ptr ds:__imp__CharPrevExA@16 ; CharPrevExA(x,x,x,x)
.text:0000039D                 cmp     esi, esp
.text:0000039F                 call    __RTC_CheckEsp
.text:000003A4                 mov     [ebp+var_4], eax
.text:000003A7                 mov     edx, [ebp+var_4]
.text:000003AA                 movsx   eax, byte ptr [edx]
.text:000003AD                 xor     ecx, ecx
.text:000003AF                 cmp     eax, 2Fh ; '/'
.text:000003B2                 setz    cl
.text:000003B5                 mov     al, cl
.text:000003B7
.text:000003B7 loc_3B7:                                ; CODE XREF: NArchive::NItemName::HasTailSlash(AString const &,uint)+1Ej
.text:000003B7                 pop     edi
.text:000003B8                 pop     esi
.text:000003B9                 add     esp, 4
.text:000003BC                 cmp     ebp, esp
.text:000003BE                 call    __RTC_CheckEsp
.text:000003C3                 mov     esp, ebp
.text:000003C5                 pop     ebp
.text:000003C6                 retn    8
.text:000003C6 ?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z endp
.text:000003C6
.text:000003C6 ; ---------------------------------------------------------------------------
.text:000003C9                 align 4
.text:000003C9 _text           ends
.text:000003C9
.rtc$TMZ:000003CC ; ===========================================================================
.rtc$TMZ:000003CC
.rtc$TMZ:000003CC ; Segment type: Pure data
.rtc$TMZ:000003CC ; Segment permissions: Read
.rtc$TMZ:000003CC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000003CC                 assume cs:_rtc$TMZ
.rtc$TMZ:000003CC                 ;org 3CCh
.rtc$TMZ:000003CC ; COMDAT (pick any)
.rtc$TMZ:000003CC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000003CC _rtc$TMZ        ends
.rtc$TMZ:000003CC
.rtc$IMZ:000003D0 ; ===========================================================================
.rtc$IMZ:000003D0
.rtc$IMZ:000003D0 ; Segment type: Pure data
.rtc$IMZ:000003D0 ; Segment permissions: Read
.rtc$IMZ:000003D0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000003D0                 assume cs:_rtc$IMZ
.rtc$IMZ:000003D0                 ;org 3D0h
.rtc$IMZ:000003D0 ; COMDAT (pick any)
.rtc$IMZ:000003D0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000003D0 _rtc$IMZ        ends
.rtc$IMZ:000003D0
.text$x:000003D4 ; ===========================================================================
.text$x:000003D4
.text$x:000003D4 ; Segment type: Pure code
.text$x:000003D4 ; Segment permissions: Read/Execute
.text$x:000003D4 _text$x         segment para public 'CODE' use32
.text$x:000003D4                 assume cs:_text$x
.text$x:000003D4                 ;org 3D4h
.text$x:000003D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000003D4
.text$x:000003D4 ; =============== S U B R O U T I N E =======================================
.text$x:000003D4
.text$x:000003D4
.text$x:000003D4 __unwindfunclet$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0 proc near
.text$x:000003D4                                         ; DATA XREF: .xdata$x:00000494o
.text$x:000003D4                 lea     ecx, [ebp-1Ch]  ; this
.text$x:000003D7                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000003D7 __unwindfunclet$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0 endp
.text$x:000003D7
.text$x:000003DC
.text$x:000003DC ; =============== S U B R O U T I N E =======================================
.text$x:000003DC
.text$x:000003DC
.text$x:000003DC __unwindfunclet$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1 proc near
.text$x:000003DC                                         ; DATA XREF: .xdata$x:0000048Co
.text$x:000003DC                 mov     eax, [ebp-24h]
.text$x:000003DF                 and     eax, 1
.text$x:000003E2                 jz      locret_3F4
.text$x:000003E8                 and     dword ptr [ebp-24h], 0FFFFFFFEh
.text$x:000003EC                 mov     ecx, [ebp+8]    ; this
.text$x:000003EF                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000003F4 ; ---------------------------------------------------------------------------
.text$x:000003F4
.text$x:000003F4 locret_3F4:                             ; CODE XREF: __unwindfunclet$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1+6j
.text$x:000003F4                 retn
.text$x:000003F4 __unwindfunclet$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1 endp
.text$x:000003F4
.text$x:000003F5
.text$x:000003F5 ; =============== S U B R O U T I N E =======================================
.text$x:000003F5
.text$x:000003F5
.text$x:000003F5 __ehhandler$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z proc near
.text$x:000003F5                                         ; DATA XREF: NArchive::NItemName::MakeLegalName(UString const &)+5o
.text$x:000003F5
.text$x:000003F5 arg_4           = dword ptr  8
.text$x:000003F5
.text$x:000003F5                 mov     edx, [esp+arg_4]
.text$x:000003F9                 lea     eax, [edx+0Ch]
.text$x:000003FC                 mov     ecx, [edx-1Ch]
.text$x:000003FF                 xor     ecx, eax
.text$x:00000401                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000406                 mov     eax, offset __ehfuncinfo$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.text$x:0000040B                 jmp     ___CxxFrameHandler3
.text$x:0000040B __ehhandler$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z endp
.text$x:0000040B
.text$x:00000410
.text$x:00000410 ; =============== S U B R O U T I N E =======================================
.text$x:00000410
.text$x:00000410
.text$x:00000410 __unwindfunclet$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0 proc near
.text$x:00000410                                         ; DATA XREF: .xdata$x:000004C8o
.text$x:00000410                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00000413                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000413 __unwindfunclet$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0 endp
.text$x:00000413
.text$x:00000418
.text$x:00000418 ; =============== S U B R O U T I N E =======================================
.text$x:00000418
.text$x:00000418
.text$x:00000418 __unwindfunclet$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1 proc near
.text$x:00000418                                         ; DATA XREF: .xdata$x:000004C0o
.text$x:00000418                 mov     eax, [ebp-24h]
.text$x:0000041B                 and     eax, 1
.text$x:0000041E                 jz      locret_430
.text$x:00000424                 and     dword ptr [ebp-24h], 0FFFFFFFEh
.text$x:00000428                 mov     ecx, [ebp+8]    ; this
.text$x:0000042B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000430 ; ---------------------------------------------------------------------------
.text$x:00000430
.text$x:00000430 locret_430:                             ; CODE XREF: __unwindfunclet$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1+6j
.text$x:00000430                 retn
.text$x:00000430 __unwindfunclet$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1 endp
.text$x:00000430
.text$x:00000431
.text$x:00000431 ; =============== S U B R O U T I N E =======================================
.text$x:00000431
.text$x:00000431
.text$x:00000431 __ehhandler$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z proc near
.text$x:00000431                                         ; DATA XREF: NArchive::NItemName::GetOSName(UString const &)+5o
.text$x:00000431
.text$x:00000431 arg_4           = dword ptr  8
.text$x:00000431
.text$x:00000431                 mov     edx, [esp+arg_4]
.text$x:00000435                 lea     eax, [edx+0Ch]
.text$x:00000438                 mov     ecx, [edx-1Ch]
.text$x:0000043B                 xor     ecx, eax
.text$x:0000043D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000442                 mov     eax, offset __ehfuncinfo$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.text$x:00000447                 jmp     ___CxxFrameHandler3
.text$x:00000447 __ehhandler$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z endp
.text$x:00000447
.text$x:0000044C
.text$x:0000044C ; =============== S U B R O U T I N E =======================================
.text$x:0000044C
.text$x:0000044C
.text$x:0000044C __unwindfunclet$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0 proc near
.text$x:0000044C                                         ; DATA XREF: .xdata$x:000004F4o
.text$x:0000044C                 mov     eax, [ebp-24h]
.text$x:0000044F                 and     eax, 1
.text$x:00000452                 jz      locret_464
.text$x:00000458                 and     dword ptr [ebp-24h], 0FFFFFFFEh
.text$x:0000045C                 mov     ecx, [ebp+8]    ; this
.text$x:0000045F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000464 ; ---------------------------------------------------------------------------
.text$x:00000464
.text$x:00000464 locret_464:                             ; CODE XREF: __unwindfunclet$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0+6j
.text$x:00000464                 retn
.text$x:00000464 __unwindfunclet$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0 endp
.text$x:00000464
.text$x:00000465
.text$x:00000465 ; =============== S U B R O U T I N E =======================================
.text$x:00000465
.text$x:00000465
.text$x:00000465 __unwindfunclet$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1 proc near
.text$x:00000465                                         ; DATA XREF: .xdata$x:000004FCo
.text$x:00000465                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00000468                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000468 __unwindfunclet$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1 endp
.text$x:00000468
.text$x:0000046D
.text$x:0000046D ; =============== S U B R O U T I N E =======================================
.text$x:0000046D
.text$x:0000046D
.text$x:0000046D __ehhandler$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z proc near
.text$x:0000046D                                         ; DATA XREF: NArchive::NItemName::GetOSName2(UString const &)+5o
.text$x:0000046D
.text$x:0000046D arg_4           = dword ptr  8
.text$x:0000046D
.text$x:0000046D                 mov     edx, [esp+arg_4]
.text$x:00000471                 lea     eax, [edx+0Ch]
.text$x:00000474                 mov     ecx, [edx-1Ch]
.text$x:00000477                 xor     ecx, eax
.text$x:00000479                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000047E                 mov     eax, offset __ehfuncinfo$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.text$x:00000483                 jmp     ___CxxFrameHandler3
.text$x:00000483 __ehhandler$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z endp
.text$x:00000483
.text$x:00000483 _text$x         ends
.text$x:00000483
.xdata$x:00000488 ; ===========================================================================
.xdata$x:00000488
.xdata$x:00000488 ; Segment type: Pure data
.xdata$x:00000488 ; Segment permissions: Read
.xdata$x:00000488 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000488                 assume cs:_xdata$x
.xdata$x:00000488                 ;org 488h
.xdata$x:00000488 __unwindtable$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z db 0FFh
.xdata$x:00000488                                         ; DATA XREF: .xdata$x:000004A0o
.xdata$x:00000489                 db 0FFh
.xdata$x:0000048A                 db 0FFh
.xdata$x:0000048B                 db 0FFh
.xdata$x:0000048C                 dd offset __unwindfunclet$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1
.xdata$x:00000490                 db    0
.xdata$x:00000491                 db    0
.xdata$x:00000492                 db    0
.xdata$x:00000493                 db    0
.xdata$x:00000494                 dd offset __unwindfunclet$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0
.xdata$x:00000498 __ehfuncinfo$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z db  22h ; "
.xdata$x:00000498                                         ; DATA XREF: __ehhandler$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z+11o
.xdata$x:00000499                 db    5
.xdata$x:0000049A                 db  93h ; ô
.xdata$x:0000049B                 db  19h
.xdata$x:0000049C                 db    2
.xdata$x:0000049D                 db    0
.xdata$x:0000049E                 db    0
.xdata$x:0000049F                 db    0
.xdata$x:000004A0                 dd offset __unwindtable$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.xdata$x:000004A4                 db    0
.xdata$x:000004A5                 db    0
.xdata$x:000004A6                 db    0
.xdata$x:000004A7                 db    0
.xdata$x:000004A8                 db    0
.xdata$x:000004A9                 db    0
.xdata$x:000004AA                 db    0
.xdata$x:000004AB                 db    0
.xdata$x:000004AC                 db    0
.xdata$x:000004AD                 db    0
.xdata$x:000004AE                 db    0
.xdata$x:000004AF                 db    0
.xdata$x:000004B0                 db    0
.xdata$x:000004B1                 db    0
.xdata$x:000004B2                 db    0
.xdata$x:000004B3                 db    0
.xdata$x:000004B4                 db    0
.xdata$x:000004B5                 db    0
.xdata$x:000004B6                 db    0
.xdata$x:000004B7                 db    0
.xdata$x:000004B8                 db    1
.xdata$x:000004B9                 db    0
.xdata$x:000004BA                 db    0
.xdata$x:000004BB                 db    0
.xdata$x:000004BC __unwindtable$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z db 0FFh
.xdata$x:000004BC                                         ; DATA XREF: .xdata$x:000004D4o
.xdata$x:000004BD                 db 0FFh
.xdata$x:000004BE                 db 0FFh
.xdata$x:000004BF                 db 0FFh
.xdata$x:000004C0                 dd offset __unwindfunclet$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1
.xdata$x:000004C4                 align 8
.xdata$x:000004C8                 dd offset __unwindfunclet$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0
.xdata$x:000004CC __ehfuncinfo$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z db  22h ; "
.xdata$x:000004CC                                         ; DATA XREF: __ehhandler$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z+11o
.xdata$x:000004CD                 db    5
.xdata$x:000004CE                 db  93h ; ô
.xdata$x:000004CF                 db  19h
.xdata$x:000004D0                 db    2
.xdata$x:000004D1                 db    0
.xdata$x:000004D2                 db    0
.xdata$x:000004D3                 db    0
.xdata$x:000004D4                 dd offset __unwindtable$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.xdata$x:000004D8                 db    0
.xdata$x:000004D9                 db    0
.xdata$x:000004DA                 db    0
.xdata$x:000004DB                 db    0
.xdata$x:000004DC                 db    0
.xdata$x:000004DD                 db    0
.xdata$x:000004DE                 db    0
.xdata$x:000004DF                 db    0
.xdata$x:000004E0                 db    0
.xdata$x:000004E1                 db    0
.xdata$x:000004E2                 db    0
.xdata$x:000004E3                 db    0
.xdata$x:000004E4                 db    0
.xdata$x:000004E5                 db    0
.xdata$x:000004E6                 db    0
.xdata$x:000004E7                 db    0
.xdata$x:000004E8                 db    0
.xdata$x:000004E9                 db    0
.xdata$x:000004EA                 db    0
.xdata$x:000004EB                 db    0
.xdata$x:000004EC                 db    1
.xdata$x:000004ED                 db    0
.xdata$x:000004EE                 db    0
.xdata$x:000004EF                 db    0
.xdata$x:000004F0 __unwindtable$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z db 0FFh
.xdata$x:000004F0                                         ; DATA XREF: .xdata$x:00000508o
.xdata$x:000004F1                 db 0FFh
.xdata$x:000004F2                 db 0FFh
.xdata$x:000004F3                 db 0FFh
.xdata$x:000004F4                 dd offset __unwindfunclet$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0
.xdata$x:000004F8                 db    0
.xdata$x:000004F9                 db    0
.xdata$x:000004FA                 db    0
.xdata$x:000004FB                 db    0
.xdata$x:000004FC                 dd offset __unwindfunclet$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1
.xdata$x:00000500 __ehfuncinfo$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z db  22h ; "
.xdata$x:00000500                                         ; DATA XREF: __ehhandler$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z+11o
.xdata$x:00000501                 db    5
.xdata$x:00000502                 db  93h ; ô
.xdata$x:00000503                 db  19h
.xdata$x:00000504                 db    2
.xdata$x:00000505                 db    0
.xdata$x:00000506                 db    0
.xdata$x:00000507                 db    0
.xdata$x:00000508                 dd offset __unwindtable$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.xdata$x:0000050C                 align 20h
.xdata$x:00000520                 db    1
.xdata$x:00000521                 db    0
.xdata$x:00000522                 db    0
.xdata$x:00000523                 db    0
.xdata$x:00000523 _xdata$x        ends
.xdata$x:00000523
.text:00000524 ; ===========================================================================
.text:00000524
.text:00000524 ; Segment type: Pure code
.text:00000524 ; Segment permissions: Read/Execute
.text:00000524 _text           segment para public 'CODE' use32
.text:00000524                 assume cs:_text
.text:00000524                 ;org 524h
.text:00000524 ; COMDAT (pick any)
.text:00000524                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000524
.text:00000524 ; =============== S U B R O U T I N E =======================================
.text:00000524
.text:00000524 ; Attributes: bp-based frame
.text:00000524
.text:00000524 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00000524                 public ??1UString@@QAE@XZ
.text:00000524 ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::NItemName::MakeLegalName(UString const &)+7Ep
.text:00000524                                         ; NArchive::NItemName::GetOSName(UString const &)+7Ep ...
.text:00000524
.text:00000524 var_8           = dword ptr -8
.text:00000524 var_4           = dword ptr -4
.text:00000524
.text:00000524                 push    ebp
.text:00000525                 mov     ebp, esp
.text:00000527                 sub     esp, 8
.text:0000052A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000531                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000538                 mov     [ebp+var_4], ecx
.text:0000053B                 mov     eax, [ebp+var_4]
.text:0000053E                 mov     ecx, [eax]
.text:00000540                 mov     [ebp+var_8], ecx
.text:00000543                 mov     edx, [ebp+var_8]
.text:00000546                 push    edx             ; void *
.text:00000547                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000054C                 add     esp, 4
.text:0000054F                 add     esp, 8
.text:00000552                 cmp     ebp, esp
.text:00000554                 call    __RTC_CheckEsp
.text:00000559                 mov     esp, ebp
.text:0000055B                 pop     ebp
.text:0000055C                 retn
.text:0000055C ??1UString@@QAE@XZ endp
.text:0000055C
.text:0000055C ; ---------------------------------------------------------------------------
.text:0000055D                 align 10h
.text:0000055D _text           ends
.text:0000055D
.text:00000560 ; ===========================================================================
.text:00000560
.text:00000560 ; Segment type: Pure code
.text:00000560 ; Segment permissions: Read/Execute
.text:00000560 _text           segment para public 'CODE' use32
.text:00000560                 assume cs:_text
.text:00000560                 ;org 560h
.text:00000560 ; COMDAT (pick any)
.text:00000560                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000560
.text:00000560 ; =============== S U B R O U T I N E =======================================
.text:00000560
.text:00000560 ; Attributes: bp-based frame
.text:00000560
.text:00000560 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00000560                 public ?IsEmpty@UString@@QBE_NXZ
.text:00000560 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NArchive::NItemName::GetOSName2(UString const &)+46p
.text:00000560                                         ; NArchive::NItemName::ConvertToOSName2(UString &)+6p
.text:00000560
.text:00000560 var_4           = dword ptr -4
.text:00000560
.text:00000560                 push    ebp
.text:00000561                 mov     ebp, esp
.text:00000563                 push    ecx
.text:00000564                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000056B                 mov     [ebp+var_4], ecx
.text:0000056E                 mov     eax, [ebp+var_4]
.text:00000571                 xor     ecx, ecx
.text:00000573                 cmp     dword ptr [eax+4], 0
.text:00000577                 setz    cl
.text:0000057A                 mov     al, cl
.text:0000057C                 mov     esp, ebp
.text:0000057E                 pop     ebp
.text:0000057F                 retn
.text:0000057F ?IsEmpty@UString@@QBE_NXZ endp
.text:0000057F
.text:0000057F _text           ends
.text:0000057F
.text:00000580 ; ===========================================================================
.text:00000580
.text:00000580 ; Segment type: Pure code
.text:00000580 ; Segment permissions: Read/Execute
.text:00000580 _text           segment para public 'CODE' use32
.text:00000580                 assume cs:_text
.text:00000580                 ;org 580h
.text:00000580 ; COMDAT (pick any)
.text:00000580                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000580
.text:00000580 ; =============== S U B R O U T I N E =======================================
.text:00000580
.text:00000580 ; Attributes: bp-based frame
.text:00000580
.text:00000580 ; wchar_t __thiscall UString::Back(UString *__hidden this)
.text:00000580                 public ?Back@UString@@QBE_WXZ
.text:00000580 ?Back@UString@@QBE_WXZ proc near        ; CODE XREF: NArchive::NItemName::GetOSName2(UString const &)+86p
.text:00000580                                         ; NArchive::NItemName::ConvertToOSName2(UString &)+21p
.text:00000580
.text:00000580 var_4           = dword ptr -4
.text:00000580
.text:00000580                 push    ebp
.text:00000581                 mov     ebp, esp
.text:00000583                 push    ecx
.text:00000584                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000058B                 mov     [ebp+var_4], ecx
.text:0000058E                 mov     eax, [ebp+var_4]
.text:00000591                 mov     ecx, [eax+4]
.text:00000594                 mov     edx, [ebp+var_4]
.text:00000597                 mov     eax, [edx]
.text:00000599                 mov     ax, [eax+ecx*2-2]
.text:0000059E                 mov     esp, ebp
.text:000005A0                 pop     ebp
.text:000005A1                 retn
.text:000005A1 ?Back@UString@@QBE_WXZ endp
.text:000005A1
.text:000005A1 ; ---------------------------------------------------------------------------
.text:000005A2                 align 4
.text:000005A2 _text           ends
.text:000005A2
.text:000005A4 ; ===========================================================================
.text:000005A4
.text:000005A4 ; Segment type: Pure code
.text:000005A4 ; Segment permissions: Read/Execute
.text:000005A4 _text           segment para public 'CODE' use32
.text:000005A4                 assume cs:_text
.text:000005A4                 ;org 5A4h
.text:000005A4 ; COMDAT (pick any)
.text:000005A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000005A4
.text:000005A4 ; =============== S U B R O U T I N E =======================================
.text:000005A4
.text:000005A4 ; Attributes: bp-based frame
.text:000005A4
.text:000005A4 ; void __thiscall UString::DeleteBack(UString *__hidden this)
.text:000005A4                 public ?DeleteBack@UString@@QAEXXZ
.text:000005A4 ?DeleteBack@UString@@QAEXXZ proc near   ; CODE XREF: NArchive::NItemName::GetOSName2(UString const &)+96p
.text:000005A4                                         ; NArchive::NItemName::ConvertToOSName2(UString &)+31p
.text:000005A4
.text:000005A4 var_8           = dword ptr -8
.text:000005A4 var_4           = dword ptr -4
.text:000005A4
.text:000005A4                 push    ebp
.text:000005A5                 mov     ebp, esp
.text:000005A7                 sub     esp, 8
.text:000005AA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005B8                 mov     [ebp+var_4], ecx
.text:000005BB                 mov     eax, [ebp+var_4]
.text:000005BE                 mov     ecx, [eax+4]
.text:000005C1                 sub     ecx, 1
.text:000005C4                 mov     [ebp+var_8], ecx
.text:000005C7                 mov     edx, [ebp+var_4]
.text:000005CA                 mov     eax, [ebp+var_8]
.text:000005CD                 mov     [edx+4], eax
.text:000005D0                 mov     ecx, [ebp+var_4]
.text:000005D3                 mov     edx, [ecx]
.text:000005D5                 xor     eax, eax
.text:000005D7                 mov     ecx, [ebp+var_8]
.text:000005DA                 mov     [edx+ecx*2], ax
.text:000005DE                 mov     esp, ebp
.text:000005E0                 pop     ebp
.text:000005E1                 retn
.text:000005E1 ?DeleteBack@UString@@QAEXXZ endp
.text:000005E1
.text:000005E1 ; ---------------------------------------------------------------------------
.text:000005E2                 align 4
.text:000005E2 _text           ends
.text:000005E2
.text:000005E4 ; ===========================================================================
.text:000005E4
.text:000005E4 ; Segment type: Pure code
.text:000005E4 ; Segment permissions: Read/Execute
.text:000005E4 _text           segment para public 'CODE' use32
.text:000005E4                 assume cs:_text
.text:000005E4                 ;org 5E4h
.text:000005E4 ; COMDAT (pick any)
.text:000005E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000005E4
.text:000005E4 ; =============== S U B R O U T I N E =======================================
.text:000005E4
.text:000005E4 ; Attributes: bp-based frame
.text:000005E4
.text:000005E4 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:000005E4                 public ?Len@AString@@QBEIXZ
.text:000005E4 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::NItemName::HasTailSlash(AString const &,uint)+31p
.text:000005E4
.text:000005E4 var_4           = dword ptr -4
.text:000005E4
.text:000005E4                 push    ebp
.text:000005E5                 mov     ebp, esp
.text:000005E7                 push    ecx
.text:000005E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005EF                 mov     [ebp+var_4], ecx
.text:000005F2                 mov     eax, [ebp+var_4]
.text:000005F5                 mov     eax, [eax+4]
.text:000005F8                 mov     esp, ebp
.text:000005FA                 pop     ebp
.text:000005FB                 retn
.text:000005FB ?Len@AString@@QBEIXZ endp
.text:000005FB
.text:000005FB _text           ends
.text:000005FB
.text:000005FC ; ===========================================================================
.text:000005FC
.text:000005FC ; Segment type: Pure code
.text:000005FC ; Segment permissions: Read/Execute
.text:000005FC _text           segment para public 'CODE' use32
.text:000005FC                 assume cs:_text
.text:000005FC                 ;org 5FCh
.text:000005FC ; COMDAT (pick any)
.text:000005FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000005FC
.text:000005FC ; =============== S U B R O U T I N E =======================================
.text:000005FC
.text:000005FC ; Attributes: bp-based frame
.text:000005FC
.text:000005FC ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:000005FC                 public ?IsEmpty@AString@@QBE_NXZ
.text:000005FC ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: NArchive::NItemName::HasTailSlash(AString const &,uint)+10p
.text:000005FC
.text:000005FC var_4           = dword ptr -4
.text:000005FC
.text:000005FC                 push    ebp
.text:000005FD                 mov     ebp, esp
.text:000005FF                 push    ecx
.text:00000600                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000607                 mov     [ebp+var_4], ecx
.text:0000060A                 mov     eax, [ebp+var_4]
.text:0000060D                 xor     ecx, ecx
.text:0000060F                 cmp     dword ptr [eax+4], 0
.text:00000613                 setz    cl
.text:00000616                 mov     al, cl
.text:00000618                 mov     esp, ebp
.text:0000061A                 pop     ebp
.text:0000061B                 retn
.text:0000061B ?IsEmpty@AString@@QBE_NXZ endp
.text:0000061B
.text:0000061B _text           ends
.text:0000061B
.text:0000061C ; ===========================================================================
.text:0000061C
.text:0000061C ; Segment type: Pure code
.text:0000061C ; Segment permissions: Read/Execute
.text:0000061C _text           segment para public 'CODE' use32
.text:0000061C                 assume cs:_text
.text:0000061C                 ;org 61Ch
.text:0000061C ; COMDAT (pick any)
.text:0000061C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000061C
.text:0000061C ; =============== S U B R O U T I N E =======================================
.text:0000061C
.text:0000061C ; Attributes: bp-based frame
.text:0000061C
.text:0000061C ; public: __thiscall AString::operator char const *(void)const
.text:0000061C                 public ??BAString@@QBEPBDXZ
.text:0000061C ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NArchive::NItemName::HasTailSlash(AString const &,uint)+27p
.text:0000061C                                         ; NArchive::NItemName::HasTailSlash(AString const &,uint)+3Cp
.text:0000061C
.text:0000061C var_4           = dword ptr -4
.text:0000061C
.text:0000061C                 push    ebp
.text:0000061D                 mov     ebp, esp
.text:0000061F                 push    ecx
.text:00000620                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000627                 mov     [ebp+var_4], ecx
.text:0000062A                 mov     eax, [ebp+var_4]
.text:0000062D                 mov     eax, [eax]
.text:0000062F                 mov     esp, ebp
.text:00000631                 pop     ebp
.text:00000632                 retn
.text:00000632 ??BAString@@QBEPBDXZ endp
.text:00000632
.text:00000632 _text           ends
.text:00000632
UNDEF:00000640 ; ===========================================================================
UNDEF:00000640
UNDEF:00000640 ; Segment type: Externs
UNDEF:00000640 ; UNDEF
UNDEF:00000640                 extrn __RTC_Shutdown:near
UNDEF:00000640                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000644                 extrn __RTC_InitBase:near
UNDEF:00000644                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000648 ; void __thiscall UString::Replace(UString *__hidden this, wchar_t, wchar_t)
UNDEF:00000648                 extrn ?Replace@UString@@QAEX_W0@Z:near
UNDEF:00000648                                         ; CODE XREF: NArchive::NItemName::MakeLegalName(UString const &)+5Dp
UNDEF:00000648                                         ; NArchive::NItemName::GetOSName(UString const &)+5Dp ...
UNDEF:0000064C ; public: __thiscall UString::UString(class UString const &)
UNDEF:0000064C                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:0000064C                                         ; CODE XREF: NArchive::NItemName::MakeLegalName(UString const &)+4Ap
UNDEF:0000064C                                         ; NArchive::NItemName::MakeLegalName(UString const &)+69p ...
UNDEF:00000650                 extrn ___security_cookie:near
UNDEF:00000650                                         ; DATA XREF: NArchive::NItemName::MakeLegalName(UString const &)+2Br
UNDEF:00000650                                         ; NArchive::NItemName::GetOSName(UString const &)+2Br ...
UNDEF:00000654                 extrn ___CxxFrameHandler3:near
UNDEF:00000654                                         ; CODE XREF: __ehhandler$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z+16j
UNDEF:00000654                                         ; __ehhandler$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z+16j ...
UNDEF:00000658 ; __fastcall __security_check_cookie(x)
UNDEF:00000658                 extrn @__security_check_cookie@4:near
UNDEF:00000658                                         ; CODE XREF: __ehhandler$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z+Cp
UNDEF:00000658                                         ; __ehhandler$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z+Cp ...
UNDEF:0000065C                 extrn __RTC_CheckEsp:near
UNDEF:0000065C                                         ; CODE XREF: NArchive::NItemName::MakeLegalName(UString const &)+A7p
UNDEF:0000065C                                         ; NArchive::NItemName::GetOSName(UString const &)+A7p ...
UNDEF:00000660 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000660                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000660                                         ; CODE XREF: NArchive::NItemName::MakeLegalName(UString const &)+90p
UNDEF:00000660                                         ; NArchive::NItemName::GetOSName(UString const &)+90p ...
UNDEF:00000664 ; void __cdecl operator delete(void *)
UNDEF:00000664                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:00000668 ; public: __thiscall UString::UString(void)
UNDEF:00000668                 extrn ??0UString@@QAE@XZ:near
UNDEF:00000668                                         ; CODE XREF: NArchive::NItemName::GetOSName2(UString const &)+55p
UNDEF:0000066C ; LPSTR __stdcall CharPrevExA(WORD CodePage, LPCSTR lpStart, LPCSTR lpCurrentChar, DWORD dwFlags)
UNDEF:0000066C                 extrn __imp__CharPrevExA@16:near
UNDEF:0000066C                                         ; CODE XREF: NArchive::NItemName::HasTailSlash(AString const &,uint)+47p
UNDEF:0000066C                                         ; DATA XREF: NArchive::NItemName::HasTailSlash(AString const &,uint)+47r
UNDEF:0000066C
UNDEF:0000066C
UNDEF:0000066C                 end