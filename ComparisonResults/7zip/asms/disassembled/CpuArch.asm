.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 7FBEB9BDC5BC0846ABB0037C277AD5C7
.rdata:00000000 ; Input CRC32 : 19368E8F
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\CpuArch.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kVendors       db  47h ; G             ; DATA XREF: x86cpuid_GetFirm(x)+32o
.rdata:00000001                 db  65h ; e
.rdata:00000002                 db  6Eh ; n
.rdata:00000003                 db  75h ; u
.rdata:00000004                 db  69h ; i
.rdata:00000005                 db  6Eh ; n
.rdata:00000006                 db  65h ; e
.rdata:00000007                 db  49h ; I
.rdata:00000008                 db  6Eh ; n
.rdata:00000009                 db  74h ; t
.rdata:0000000A                 db  65h ; e
.rdata:0000000B                 db  6Ch ; l
.rdata:0000000C                 db  41h ; A
.rdata:0000000D                 db  75h ; u
.rdata:0000000E                 db  74h ; t
.rdata:0000000F                 db  68h ; h
.rdata:00000010                 db  65h ; e
.rdata:00000011                 db  6Eh ; n
.rdata:00000012                 db  74h ; t
.rdata:00000013                 db  69h ; i
.rdata:00000014                 db  63h ; c
.rdata:00000015                 db  41h ; A
.rdata:00000016                 db  4Dh ; M
.rdata:00000017                 db  44h ; D
.rdata:00000018                 db  43h ; C
.rdata:00000019                 db  65h ; e
.rdata:0000001A                 db  6Eh ; n
.rdata:0000001B                 db  74h ; t
.rdata:0000001C                 db  61h ; a
.rdata:0000001D                 db  75h ; u
.rdata:0000001E                 db  72h ; r
.rdata:0000001F                 db  48h ; H
.rdata:00000020                 db  61h ; a
.rdata:00000021                 db  75h ; u
.rdata:00000022                 db  6Ch ; l
.rdata:00000023                 db  73h ; s
.rdata:00000023 _rdata          ends
.rdata:00000023
.text:00000024 ; ===========================================================================
.text:00000024
.text:00000024 ; Segment type: Pure code
.text:00000024 ; Segment permissions: Read/Execute
.text:00000024 _text           segment para public 'CODE' use32
.text:00000024                 assume cs:_text
.text:00000024                 ;org 24h
.text:00000024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000024
.text:00000024 ; =============== S U B R O U T I N E =======================================
.text:00000024
.text:00000024 ; Attributes: bp-based frame
.text:00000024
.text:00000024 ; __stdcall MyCPUID(x, x, x, x, x)
.text:00000024                 public _MyCPUID@20
.text:00000024 _MyCPUID@20     proc near               ; CODE XREF: x86cpuid_CheckAndRead(x)+3Ep
.text:00000024                                         ; x86cpuid_CheckAndRead(x)+61p
.text:00000024
.text:00000024 var_10          = dword ptr -10h
.text:00000024 var_C           = dword ptr -0Ch
.text:00000024 var_8           = dword ptr -8
.text:00000024 var_4           = dword ptr -4
.text:00000024 arg_0           = dword ptr  8
.text:00000024 arg_4           = dword ptr  0Ch
.text:00000024 arg_8           = dword ptr  10h
.text:00000024 arg_C           = dword ptr  14h
.text:00000024 arg_10          = dword ptr  18h
.text:00000024
.text:00000024                 push    ebp
.text:00000025                 mov     ebp, esp
.text:00000027                 sub     esp, 10h
.text:0000002A                 push    ebx
.text:0000002B                 mov     eax, 0CCCCCCCCh
.text:00000030                 mov     [ebp+var_10], eax
.text:00000033                 mov     [ebp+var_C], eax
.text:00000036                 mov     [ebp+var_8], eax
.text:00000039                 mov     [ebp+var_4], eax
.text:0000003C                 xor     ebx, ebx
.text:0000003E                 xor     ecx, ecx
.text:00000040                 xor     edx, edx
.text:00000042                 mov     eax, [ebp+arg_0]
.text:00000045                 cpuid
.text:00000047                 mov     [ebp+var_4], eax
.text:0000004A                 mov     [ebp+var_8], ebx
.text:0000004D                 mov     [ebp+var_C], ecx
.text:00000050                 mov     [ebp+var_10], edx
.text:00000053                 mov     eax, [ebp+arg_4]
.text:00000056                 mov     ecx, [ebp+var_4]
.text:00000059                 mov     [eax], ecx
.text:0000005B                 mov     edx, [ebp+arg_8]
.text:0000005E                 mov     eax, [ebp+var_8]
.text:00000061                 mov     [edx], eax
.text:00000063                 mov     ecx, [ebp+arg_C]
.text:00000066                 mov     edx, [ebp+var_C]
.text:00000069                 mov     [ecx], edx
.text:0000006B                 mov     eax, [ebp+arg_10]
.text:0000006E                 mov     ecx, [ebp+var_10]
.text:00000071                 mov     [eax], ecx
.text:00000073                 pop     ebx
.text:00000074                 add     esp, 10h
.text:00000077                 cmp     ebp, esp
.text:00000079                 call    __RTC_CheckEsp
.text:0000007E                 mov     esp, ebp
.text:00000080                 pop     ebp
.text:00000081                 retn    14h
.text:00000081 _MyCPUID@20     endp
.text:00000081
.text:00000084
.text:00000084 ; =============== S U B R O U T I N E =======================================
.text:00000084
.text:00000084 ; Attributes: bp-based frame
.text:00000084
.text:00000084 ; __stdcall x86cpuid_CheckAndRead(x)
.text:00000084                 public _x86cpuid_CheckAndRead@4
.text:00000084 _x86cpuid_CheckAndRead@4 proc near      ; CODE XREF: CPU_Is_InOrder()+24p
.text:00000084                                         ; CPU_Is_Aes_Supported()+31p
.text:00000084
.text:00000084 arg_0           = dword ptr  8
.text:00000084
.text:00000084                 push    ebp
.text:00000085                 mov     ebp, esp
.text:00000087                 push    40000h
.text:0000008C                 call    _CheckFlag@4    ; CheckFlag(x)
.text:00000091                 test    eax, eax
.text:00000093                 jz      short loc_A3
.text:00000095                 push    200000h
.text:0000009A                 call    _CheckFlag@4    ; CheckFlag(x)
.text:0000009F                 test    eax, eax
.text:000000A1                 jnz     short loc_A7
.text:000000A3
.text:000000A3 loc_A3:                                 ; CODE XREF: x86cpuid_CheckAndRead(x)+Fj
.text:000000A3                 xor     eax, eax
.text:000000A5                 jmp     short loc_EF
.text:000000A7 ; ---------------------------------------------------------------------------
.text:000000A7
.text:000000A7 loc_A7:                                 ; CODE XREF: x86cpuid_CheckAndRead(x)+1Dj
.text:000000A7                 mov     eax, [ebp+arg_0]
.text:000000AA                 add     eax, 8
.text:000000AD                 push    eax
.text:000000AE                 mov     ecx, [ebp+arg_0]
.text:000000B1                 add     ecx, 0Ch
.text:000000B4                 push    ecx
.text:000000B5                 mov     edx, [ebp+arg_0]
.text:000000B8                 add     edx, 4
.text:000000BB                 push    edx
.text:000000BC                 mov     eax, [ebp+arg_0]
.text:000000BF                 push    eax
.text:000000C0                 push    0
.text:000000C2                 call    _MyCPUID@20     ; MyCPUID(x,x,x,x,x)
.text:000000C7                 mov     ecx, [ebp+arg_0]
.text:000000CA                 add     ecx, 1Ch
.text:000000CD                 push    ecx
.text:000000CE                 mov     edx, [ebp+arg_0]
.text:000000D1                 add     edx, 18h
.text:000000D4                 push    edx
.text:000000D5                 mov     eax, [ebp+arg_0]
.text:000000D8                 add     eax, 14h
.text:000000DB                 push    eax
.text:000000DC                 mov     ecx, [ebp+arg_0]
.text:000000DF                 add     ecx, 10h
.text:000000E2                 push    ecx
.text:000000E3                 push    1
.text:000000E5                 call    _MyCPUID@20     ; MyCPUID(x,x,x,x,x)
.text:000000EA                 mov     eax, 1
.text:000000EF
.text:000000EF loc_EF:                                 ; CODE XREF: x86cpuid_CheckAndRead(x)+21j
.text:000000EF                 cmp     ebp, esp
.text:000000F1                 call    __RTC_CheckEsp
.text:000000F6                 pop     ebp
.text:000000F7                 retn    4
.text:000000F7 _x86cpuid_CheckAndRead@4 endp
.text:000000F7
.text:000000F7 ; ---------------------------------------------------------------------------
.text:000000FA                 db 0Ah dup(0CCh)
.text:00000104
.text:00000104 ; =============== S U B R O U T I N E =======================================
.text:00000104
.text:00000104 ; Attributes: bp-based frame
.text:00000104
.text:00000104 ; __stdcall CheckFlag(x)
.text:00000104 _CheckFlag@4    proc near               ; CODE XREF: x86cpuid_CheckAndRead(x)+8p
.text:00000104                                         ; x86cpuid_CheckAndRead(x)+16p
.text:00000104
.text:00000104 arg_0           = dword ptr  8
.text:00000104
.text:00000104                 push    ebp
.text:00000105                 mov     ebp, esp
.text:00000107                 pushf
.text:00000108                 pop     eax
.text:00000109                 mov     edx, eax
.text:0000010B                 xor     eax, [ebp+arg_0]
.text:0000010E                 push    eax
.text:0000010F                 popf
.text:00000110                 pushf
.text:00000111                 pop     eax
.text:00000112                 xor     eax, edx
.text:00000114                 push    edx
.text:00000115                 popf
.text:00000116                 and     [ebp+arg_0], eax
.text:00000119                 mov     eax, [ebp+arg_0]
.text:0000011C                 cmp     ebp, esp
.text:0000011E                 call    __RTC_CheckEsp
.text:00000123                 pop     ebp
.text:00000124                 retn    4
.text:00000124 _CheckFlag@4    endp
.text:00000124
.text:00000124 ; ---------------------------------------------------------------------------
.text:00000127                 db 0Dh dup(0CCh)
.text:00000134
.text:00000134 ; =============== S U B R O U T I N E =======================================
.text:00000134
.text:00000134 ; Attributes: bp-based frame
.text:00000134
.text:00000134 ; __stdcall x86cpuid_GetFirm(x)
.text:00000134                 public _x86cpuid_GetFirm@4
.text:00000134 _x86cpuid_GetFirm@4 proc near           ; CODE XREF: CPU_Is_InOrder()+6Ep
.text:00000134
.text:00000134 var_8           = dword ptr -8
.text:00000134 var_4           = dword ptr -4
.text:00000134 arg_0           = dword ptr  8
.text:00000134
.text:00000134                 push    ebp
.text:00000135                 mov     ebp, esp
.text:00000137                 sub     esp, 8
.text:0000013A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000141                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000148                 mov     [ebp+var_4], 0
.text:0000014F                 jmp     short loc_15A
.text:00000151 ; ---------------------------------------------------------------------------
.text:00000151
.text:00000151 loc_151:                                ; CODE XREF: x86cpuid_GetFirm(x):loc_19Dj
.text:00000151                 mov     eax, [ebp+var_4]
.text:00000154                 add     eax, 1
.text:00000157                 mov     [ebp+var_4], eax
.text:0000015A
.text:0000015A loc_15A:                                ; CODE XREF: x86cpuid_GetFirm(x)+1Bj
.text:0000015A                 cmp     [ebp+var_4], 3
.text:0000015E                 jnb     short loc_19F
.text:00000160                 mov     ecx, [ebp+var_4]
.text:00000163                 imul    ecx, 0Ch
.text:00000166                 add     ecx, offset _kVendors
.text:0000016C                 mov     [ebp+var_8], ecx
.text:0000016F                 mov     edx, [ebp+var_8]
.text:00000172                 mov     eax, [ebp+arg_0]
.text:00000175                 mov     ecx, [edx]
.text:00000177                 cmp     ecx, [eax+4]
.text:0000017A                 jnz     short loc_19D
.text:0000017C                 mov     edx, [ebp+var_8]
.text:0000017F                 mov     eax, [ebp+arg_0]
.text:00000182                 mov     ecx, [edx+4]
.text:00000185                 cmp     ecx, [eax+8]
.text:00000188                 jnz     short loc_19D
.text:0000018A                 mov     edx, [ebp+var_8]
.text:0000018D                 mov     eax, [ebp+arg_0]
.text:00000190                 mov     ecx, [edx+8]
.text:00000193                 cmp     ecx, [eax+0Ch]
.text:00000196                 jnz     short loc_19D
.text:00000198                 mov     eax, [ebp+var_4]
.text:0000019B                 jmp     short loc_1A2
.text:0000019D ; ---------------------------------------------------------------------------
.text:0000019D
.text:0000019D loc_19D:                                ; CODE XREF: x86cpuid_GetFirm(x)+46j
.text:0000019D                                         ; x86cpuid_GetFirm(x)+54j ...
.text:0000019D                 jmp     short loc_151
.text:0000019F ; ---------------------------------------------------------------------------
.text:0000019F
.text:0000019F loc_19F:                                ; CODE XREF: x86cpuid_GetFirm(x)+2Aj
.text:0000019F                 or      eax, 0FFFFFFFFh
.text:000001A2
.text:000001A2 loc_1A2:                                ; CODE XREF: x86cpuid_GetFirm(x)+67j
.text:000001A2                 mov     esp, ebp
.text:000001A4                 pop     ebp
.text:000001A5                 retn    4
.text:000001A5 _x86cpuid_GetFirm@4 endp
.text:000001A5
.text:000001A5 ; ---------------------------------------------------------------------------
.text:000001A8                 db 0Ch dup(0CCh)
.text:000001B4
.text:000001B4 ; =============== S U B R O U T I N E =======================================
.text:000001B4
.text:000001B4 ; Attributes: bp-based frame
.text:000001B4
.text:000001B4 ; _DWORD __stdcall CPU_Is_InOrder()
.text:000001B4                 public _CPU_Is_InOrder@0
.text:000001B4 _CPU_Is_InOrder@0 proc near
.text:000001B4
.text:000001B4 var_48          = dword ptr -48h
.text:000001B4 var_44          = dword ptr -44h
.text:000001B4 var_40          = dword ptr -40h
.text:000001B4 var_3C          = dword ptr -3Ch
.text:000001B4 var_38          = dword ptr -38h
.text:000001B4 var_34          = dword ptr -34h
.text:000001B4 var_30          = dword ptr -30h
.text:000001B4 var_28          = byte ptr -28h
.text:000001B4 var_18          = dword ptr -18h
.text:000001B4 var_4           = dword ptr -4
.text:000001B4
.text:000001B4                 push    ebp
.text:000001B5                 mov     ebp, esp
.text:000001B7                 sub     esp, 48h
.text:000001BA                 push    edi
.text:000001BB                 lea     edi, [ebp+var_48]
.text:000001BE                 mov     ecx, 12h
.text:000001C3                 mov     eax, 0CCCCCCCCh
.text:000001C8                 rep stosd
.text:000001CA                 mov     eax, dword ptr ds:___security_cookie
.text:000001CF                 xor     eax, ebp
.text:000001D1                 mov     [ebp+var_4], eax
.text:000001D4                 lea     eax, [ebp+var_28]
.text:000001D7                 push    eax
.text:000001D8                 call    _x86cpuid_CheckAndRead@4 ; x86cpuid_CheckAndRead(x)
.text:000001DD                 test    eax, eax
.text:000001DF                 jnz     short loc_1EB
.text:000001E1                 mov     eax, 1
.text:000001E6                 jmp     loc_2DF
.text:000001EB ; ---------------------------------------------------------------------------
.text:000001EB
.text:000001EB loc_1EB:                                ; CODE XREF: CPU_Is_InOrder()+2Bj
.text:000001EB                 mov     ecx, [ebp+var_18]
.text:000001EE                 shr     ecx, 10h
.text:000001F1                 and     ecx, 0FF0h
.text:000001F7                 mov     edx, [ebp+var_18]
.text:000001FA                 shr     edx, 8
.text:000001FD                 and     edx, 0Fh
.text:00000200                 or      ecx, edx
.text:00000202                 mov     [ebp+var_34], ecx
.text:00000205                 mov     eax, [ebp+var_18]
.text:00000208                 shr     eax, 0Ch
.text:0000020B                 and     eax, 0F0h
.text:00000210                 mov     ecx, [ebp+var_18]
.text:00000213                 shr     ecx, 4
.text:00000216                 and     ecx, 0Fh
.text:00000219                 or      eax, ecx
.text:0000021B                 mov     [ebp+var_38], eax
.text:0000021E                 lea     edx, [ebp+var_28]
.text:00000221                 push    edx
.text:00000222                 call    _x86cpuid_GetFirm@4 ; x86cpuid_GetFirm(x)
.text:00000227                 mov     [ebp+var_30], eax
.text:0000022A                 mov     eax, [ebp+var_30]
.text:0000022D                 mov     [ebp+var_3C], eax
.text:00000230                 cmp     [ebp+var_3C], 0
.text:00000234                 jz      short loc_247
.text:00000236                 cmp     [ebp+var_3C], 1
.text:0000023A                 jz      short loc_286
.text:0000023C                 cmp     [ebp+var_3C], 2
.text:00000240                 jz      short loc_2B3
.text:00000242                 jmp     loc_2DA
.text:00000247 ; ---------------------------------------------------------------------------
.text:00000247
.text:00000247 loc_247:                                ; CODE XREF: CPU_Is_InOrder()+80j
.text:00000247                 cmp     [ebp+var_34], 6
.text:0000024B                 jb      short loc_27A
.text:0000024D                 cmp     [ebp+var_34], 6
.text:00000251                 jnz     short loc_271
.text:00000253                 cmp     [ebp+var_38], 1Ch
.text:00000257                 jz      short loc_27A
.text:00000259                 cmp     [ebp+var_38], 26h ; '&'
.text:0000025D                 jz      short loc_27A
.text:0000025F                 cmp     [ebp+var_38], 27h ; '''
.text:00000263                 jz      short loc_27A
.text:00000265                 cmp     [ebp+var_38], 35h ; '5'
.text:00000269                 jz      short loc_27A
.text:0000026B                 cmp     [ebp+var_38], 36h ; '6'
.text:0000026F                 jz      short loc_27A
.text:00000271
.text:00000271 loc_271:                                ; CODE XREF: CPU_Is_InOrder()+9Dj
.text:00000271                 mov     [ebp+var_40], 0
.text:00000278                 jmp     short loc_281
.text:0000027A ; ---------------------------------------------------------------------------
.text:0000027A
.text:0000027A loc_27A:                                ; CODE XREF: CPU_Is_InOrder()+97j
.text:0000027A                                         ; CPU_Is_InOrder()+A3j ...
.text:0000027A                 mov     [ebp+var_40], 1
.text:00000281
.text:00000281 loc_281:                                ; CODE XREF: CPU_Is_InOrder()+C4j
.text:00000281                 mov     eax, [ebp+var_40]
.text:00000284                 jmp     short loc_2DF
.text:00000286 ; ---------------------------------------------------------------------------
.text:00000286
.text:00000286 loc_286:                                ; CODE XREF: CPU_Is_InOrder()+86j
.text:00000286                 cmp     [ebp+var_34], 5
.text:0000028A                 jb      short loc_2A7
.text:0000028C                 cmp     [ebp+var_34], 5
.text:00000290                 jnz     short loc_29E
.text:00000292                 cmp     [ebp+var_38], 6
.text:00000296                 jb      short loc_2A7
.text:00000298                 cmp     [ebp+var_38], 0Ah
.text:0000029C                 jz      short loc_2A7
.text:0000029E
.text:0000029E loc_29E:                                ; CODE XREF: CPU_Is_InOrder()+DCj
.text:0000029E                 mov     [ebp+var_44], 0
.text:000002A5                 jmp     short loc_2AE
.text:000002A7 ; ---------------------------------------------------------------------------
.text:000002A7
.text:000002A7 loc_2A7:                                ; CODE XREF: CPU_Is_InOrder()+D6j
.text:000002A7                                         ; CPU_Is_InOrder()+E2j ...
.text:000002A7                 mov     [ebp+var_44], 1
.text:000002AE
.text:000002AE loc_2AE:                                ; CODE XREF: CPU_Is_InOrder()+F1j
.text:000002AE                 mov     eax, [ebp+var_44]
.text:000002B1                 jmp     short loc_2DF
.text:000002B3 ; ---------------------------------------------------------------------------
.text:000002B3
.text:000002B3 loc_2B3:                                ; CODE XREF: CPU_Is_InOrder()+8Cj
.text:000002B3                 cmp     [ebp+var_34], 6
.text:000002B7                 jb      short loc_2CE
.text:000002B9                 cmp     [ebp+var_34], 6
.text:000002BD                 jnz     short loc_2C5
.text:000002BF                 cmp     [ebp+var_38], 0Fh
.text:000002C3                 jb      short loc_2CE
.text:000002C5
.text:000002C5 loc_2C5:                                ; CODE XREF: CPU_Is_InOrder()+109j
.text:000002C5                 mov     [ebp+var_48], 0
.text:000002CC                 jmp     short loc_2D5
.text:000002CE ; ---------------------------------------------------------------------------
.text:000002CE
.text:000002CE loc_2CE:                                ; CODE XREF: CPU_Is_InOrder()+103j
.text:000002CE                                         ; CPU_Is_InOrder()+10Fj
.text:000002CE                 mov     [ebp+var_48], 1
.text:000002D5
.text:000002D5 loc_2D5:                                ; CODE XREF: CPU_Is_InOrder()+118j
.text:000002D5                 mov     eax, [ebp+var_48]
.text:000002D8                 jmp     short loc_2DF
.text:000002DA ; ---------------------------------------------------------------------------
.text:000002DA
.text:000002DA loc_2DA:                                ; CODE XREF: CPU_Is_InOrder()+8Ej
.text:000002DA                 mov     eax, 1
.text:000002DF
.text:000002DF loc_2DF:                                ; CODE XREF: CPU_Is_InOrder()+32j
.text:000002DF                                         ; CPU_Is_InOrder()+D0j ...
.text:000002DF                 push    edx
.text:000002E0                 mov     ecx, ebp
.text:000002E2                 push    eax
.text:000002E3                 lea     edx, $LN22
.text:000002E9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002EE                 pop     eax
.text:000002EF                 pop     edx
.text:000002F0                 pop     edi
.text:000002F1                 mov     ecx, [ebp+var_4]
.text:000002F4                 xor     ecx, ebp
.text:000002F6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000002FB                 add     esp, 48h
.text:000002FE                 cmp     ebp, esp
.text:00000300                 call    __RTC_CheckEsp
.text:00000305                 mov     esp, ebp
.text:00000307                 pop     ebp
.text:00000308                 retn
.text:00000308 _CPU_Is_InOrder@0 endp
.text:00000308
.text:00000308 ; ---------------------------------------------------------------------------
.text:00000309                 align 4
.text:0000030C $LN22           dd 1                    ; DATA XREF: CPU_Is_InOrder()+12Fo
.text:00000310                 dd offset $LN21
.text:00000314 $LN21           dd 0FFFFFFD8h, 20h      ; DATA XREF: .text:00000310o
.text:0000031C                 dd offset $LN20
.text:00000320 $LN20           dd 0CCCC0070h           ; DATA XREF: .text:0000031Co
.text:00000324
.text:00000324 ; =============== S U B R O U T I N E =======================================
.text:00000324
.text:00000324 ; Attributes: bp-based frame
.text:00000324
.text:00000324 ; _DWORD __stdcall CPU_Is_Aes_Supported()
.text:00000324                 public _CPU_Is_Aes_Supported@0
.text:00000324 _CPU_Is_Aes_Supported@0 proc near
.text:00000324
.text:00000324 var_2C          = byte ptr -2Ch
.text:00000324 var_28          = byte ptr -28h
.text:00000324 var_10          = dword ptr -10h
.text:00000324 var_4           = dword ptr -4
.text:00000324
.text:00000324                 push    ebp
.text:00000325                 mov     ebp, esp
.text:00000327                 sub     esp, 2Ch
.text:0000032A                 push    edi
.text:0000032B                 lea     edi, [ebp+var_2C]
.text:0000032E                 mov     ecx, 0Bh
.text:00000333                 mov     eax, 0CCCCCCCCh
.text:00000338                 rep stosd
.text:0000033A                 mov     eax, dword ptr ds:___security_cookie
.text:0000033F                 xor     eax, ebp
.text:00000341                 mov     [ebp+var_4], eax
.text:00000344                 call    _CPU_Sys_Is_SSE_Supported@0 ; CPU_Sys_Is_SSE_Supported()
.text:00000349                 test    eax, eax
.text:0000034B                 jnz     short loc_351
.text:0000034D                 xor     eax, eax
.text:0000034F                 jmp     short loc_36B
.text:00000351 ; ---------------------------------------------------------------------------
.text:00000351
.text:00000351 loc_351:                                ; CODE XREF: CPU_Is_Aes_Supported()+27j
.text:00000351                 lea     eax, [ebp+var_28]
.text:00000354                 push    eax
.text:00000355                 call    _x86cpuid_CheckAndRead@4 ; x86cpuid_CheckAndRead(x)
.text:0000035A                 test    eax, eax
.text:0000035C                 jnz     short loc_362
.text:0000035E                 xor     eax, eax
.text:00000360                 jmp     short loc_36B
.text:00000362 ; ---------------------------------------------------------------------------
.text:00000362
.text:00000362 loc_362:                                ; CODE XREF: CPU_Is_Aes_Supported()+38j
.text:00000362                 mov     eax, [ebp+var_10]
.text:00000365                 shr     eax, 19h
.text:00000368                 and     eax, 1
.text:0000036B
.text:0000036B loc_36B:                                ; CODE XREF: CPU_Is_Aes_Supported()+2Bj
.text:0000036B                                         ; CPU_Is_Aes_Supported()+3Cj
.text:0000036B                 push    edx
.text:0000036C                 mov     ecx, ebp
.text:0000036E                 push    eax
.text:0000036F                 lea     edx, $LN7
.text:00000375                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000037A                 pop     eax
.text:0000037B                 pop     edx
.text:0000037C                 pop     edi
.text:0000037D                 mov     ecx, [ebp+var_4]
.text:00000380                 xor     ecx, ebp
.text:00000382                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000387                 add     esp, 2Ch
.text:0000038A                 cmp     ebp, esp
.text:0000038C                 call    __RTC_CheckEsp
.text:00000391                 mov     esp, ebp
.text:00000393                 pop     ebp
.text:00000394                 retn
.text:00000394 _CPU_Is_Aes_Supported@0 endp
.text:00000394
.text:00000394 ; ---------------------------------------------------------------------------
.text:00000395                 align 4
.text:00000398 $LN7            dd 1                    ; DATA XREF: CPU_Is_Aes_Supported()+4Bo
.text:0000039C                 dd offset $LN6
.text:000003A0 $LN6            dd 0FFFFFFD8h, 20h      ; DATA XREF: .text:0000039Co
.text:000003A8                 dd offset $LN5
.text:000003AC $LN5            dd 0CCCC0070h, 0CCCCCCCCh ; DATA XREF: .text:000003A8o
.text:000003B4
.text:000003B4 ; =============== S U B R O U T I N E =======================================
.text:000003B4
.text:000003B4 ; Attributes: bp-based frame
.text:000003B4
.text:000003B4 ; __stdcall CPU_Sys_Is_SSE_Supported()
.text:000003B4 _CPU_Sys_Is_SSE_Supported@0 proc near   ; CODE XREF: CPU_Is_Aes_Supported()+20p
.text:000003B4
.text:000003B4 var_A0          = byte ptr -0A0h
.text:000003B4 VersionInformation= _OSVERSIONINFOA ptr -9Ch
.text:000003B4 var_4           = dword ptr -4
.text:000003B4
.text:000003B4                 push    ebp
.text:000003B5                 mov     ebp, esp
.text:000003B7                 sub     esp, 0A0h
.text:000003BD                 push    esi
.text:000003BE                 push    edi
.text:000003BF                 lea     edi, [ebp+var_A0]
.text:000003C5                 mov     ecx, 28h ; '('
.text:000003CA                 mov     eax, 0CCCCCCCCh
.text:000003CF                 rep stosd
.text:000003D1                 mov     eax, dword ptr ds:___security_cookie
.text:000003D6                 xor     eax, ebp
.text:000003D8                 mov     [ebp+var_4], eax
.text:000003DB                 mov     [ebp+VersionInformation.dwOSVersionInfoSize], 94h ; 'ö'
.text:000003E5                 mov     esi, esp
.text:000003E7                 lea     eax, [ebp+VersionInformation]
.text:000003ED                 push    eax             ; lpVersionInformation
.text:000003EE                 call    dword ptr ds:__imp__GetVersionExA@4 ; GetVersionExA(x)
.text:000003F4                 cmp     esi, esp
.text:000003F6                 call    __RTC_CheckEsp
.text:000003FB                 test    eax, eax
.text:000003FD                 jnz     short loc_403
.text:000003FF                 xor     eax, eax
.text:00000401                 jmp     short loc_40F
.text:00000403 ; ---------------------------------------------------------------------------
.text:00000403
.text:00000403 loc_403:                                ; CODE XREF: CPU_Sys_Is_SSE_Supported()+49j
.text:00000403                 cmp     [ebp+VersionInformation.dwMajorVersion], 5
.text:0000040A                 sbb     eax, eax
.text:0000040C                 add     eax, 1
.text:0000040F
.text:0000040F loc_40F:                                ; CODE XREF: CPU_Sys_Is_SSE_Supported()+4Dj
.text:0000040F                 push    edx
.text:00000410                 mov     ecx, ebp
.text:00000412                 push    eax
.text:00000413                 lea     edx, $LN6_0
.text:00000419                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000041E                 pop     eax
.text:0000041F                 pop     edx
.text:00000420                 pop     edi
.text:00000421                 pop     esi
.text:00000422                 mov     ecx, [ebp+var_4]
.text:00000425                 xor     ecx, ebp
.text:00000427                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000042C                 add     esp, 0A0h
.text:00000432                 cmp     ebp, esp
.text:00000434                 call    __RTC_CheckEsp
.text:00000439                 mov     esp, ebp
.text:0000043B                 pop     ebp
.text:0000043C                 retn
.text:0000043C _CPU_Sys_Is_SSE_Supported@0 endp
.text:0000043C
.text:0000043C ; ---------------------------------------------------------------------------
.text:0000043D                 align 10h
.text:00000440 $LN6_0          dd 1                    ; DATA XREF: CPU_Sys_Is_SSE_Supported()+5Fo
.text:00000444                 dd offset $LN5_0
.text:00000448 $LN5_0          dd 0FFFFFF64h, 94h      ; DATA XREF: .text:00000444o
.text:00000450                 dd offset $LN4
.text:00000454 $LN4            db 76h, 69h, 0          ; DATA XREF: .text:00000450o
.text:00000457                 align 4
.text:00000457 _text           ends
.text:00000457
.rtc$TMZ:00000458 ; ===========================================================================
.rtc$TMZ:00000458
.rtc$TMZ:00000458 ; Segment type: Pure data
.rtc$TMZ:00000458 ; Segment permissions: Read
.rtc$TMZ:00000458 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000458                 assume cs:_rtc$TMZ
.rtc$TMZ:00000458                 ;org 458h
.rtc$TMZ:00000458 ; COMDAT (pick any)
.rtc$TMZ:00000458 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000458 _rtc$TMZ        ends
.rtc$TMZ:00000458
.rtc$IMZ:0000045C ; ===========================================================================
.rtc$IMZ:0000045C
.rtc$IMZ:0000045C ; Segment type: Pure data
.rtc$IMZ:0000045C ; Segment permissions: Read
.rtc$IMZ:0000045C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000045C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000045C                 ;org 45Ch
.rtc$IMZ:0000045C ; COMDAT (pick any)
.rtc$IMZ:0000045C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000045C _rtc$IMZ        ends
.rtc$IMZ:0000045C
UNDEF:00000460 ; ===========================================================================
UNDEF:00000460
UNDEF:00000460 ; Segment type: Externs
UNDEF:00000460 ; UNDEF
UNDEF:00000460                 extrn __RTC_CheckEsp:near ; CODE XREF: MyCPUID(x,x,x,x,x)+55p
UNDEF:00000460                                         ; x86cpuid_CheckAndRead(x)+6Dp ...
UNDEF:00000464                 extrn __RTC_Shutdown:near
UNDEF:00000464                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000468                 extrn __RTC_InitBase:near
UNDEF:00000468                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000046C                 extrn ___security_cookie:near
UNDEF:0000046C                                         ; DATA XREF: CPU_Is_InOrder()+16r
UNDEF:0000046C                                         ; CPU_Is_Aes_Supported()+16r ...
UNDEF:00000470 ; __fastcall __security_check_cookie(x)
UNDEF:00000470                 extrn @__security_check_cookie@4:near
UNDEF:00000470                                         ; CODE XREF: CPU_Is_InOrder()+142p
UNDEF:00000470                                         ; CPU_Is_Aes_Supported()+5Ep ...
UNDEF:00000474 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000474                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000474                                         ; CODE XREF: CPU_Is_InOrder()+135p
UNDEF:00000474                                         ; CPU_Is_Aes_Supported()+51p ...
UNDEF:00000478 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
UNDEF:00000478                 extrn __imp__GetVersionExA@4:near
UNDEF:00000478                                         ; CODE XREF: CPU_Sys_Is_SSE_Supported()+3Ap
UNDEF:00000478                                         ; DATA XREF: CPU_Sys_Is_SSE_Supported()+3Ar
UNDEF:00000478
UNDEF:00000478
UNDEF:00000478                 end