.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 06887A2F547B67F1AED262AB2DB1C9E8
.text:00000000 ; Input CRC32 : 09F403B9
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\FileStreams.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; public: __thiscall CInFileStream::CInFileStream(void)
.text:00000000                 public ??0CInFileStream@@QAE@XZ
.text:00000000 ??0CInFileStream@@QAE@XZ proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     ecx, [ebp+var_4] ; this
.text:00000011                 call    ??0IInStream@@QAE@XZ ; IInStream::IInStream(void)
.text:00000016                 mov     ecx, [ebp+var_4]
.text:00000019                 add     ecx, 4          ; this
.text:0000001C                 call    ??0IStreamGetSize@@QAE@XZ ; IStreamGetSize::IStreamGetSize(void)
.text:00000021                 mov     ecx, [ebp+var_4]
.text:00000024                 add     ecx, 8          ; this
.text:00000027                 call    ??0IStreamGetProps@@QAE@XZ ; IStreamGetProps::IStreamGetProps(void)
.text:0000002C                 mov     ecx, [ebp+var_4]
.text:0000002F                 add     ecx, 0Ch        ; this
.text:00000032                 call    ??0IStreamGetProps2@@QAE@XZ ; IStreamGetProps2::IStreamGetProps2(void)
.text:00000037                 mov     ecx, [ebp+var_4]
.text:0000003A                 add     ecx, 10h        ; this
.text:0000003D                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000042                 mov     eax, [ebp+var_4]
.text:00000045                 mov     dword ptr [eax], offset ??_7CInFileStream@@6BIInStream@@@ ; const CInFileStream::`vftable'{for `IInStream'}
.text:0000004B                 mov     ecx, [ebp+var_4]
.text:0000004E                 mov     dword ptr [ecx+4], offset ??_7CInFileStream@@6BIStreamGetSize@@@ ; const CInFileStream::`vftable'{for `IStreamGetSize'}
.text:00000055                 mov     edx, [ebp+var_4]
.text:00000058                 mov     dword ptr [edx+8], offset ??_7CInFileStream@@6BIStreamGetProps@@@ ; const CInFileStream::`vftable'{for `IStreamGetProps'}
.text:0000005F                 mov     eax, [ebp+var_4]
.text:00000062                 mov     dword ptr [eax+0Ch], offset ??_7CInFileStream@@6BIStreamGetProps2@@@ ; const CInFileStream::`vftable'{for `IStreamGetProps2'}
.text:00000069                 mov     ecx, [ebp+var_4]
.text:0000006C                 add     ecx, 18h        ; this
.text:0000006F                 call    ??0CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::CInFile(void)
.text:00000074                 mov     ecx, [ebp+var_4]
.text:00000077                 mov     dword ptr [ecx+28h], 0
.text:0000007E                 mov     dword ptr [ecx+2Ch], 0
.text:00000085                 mov     edx, [ebp+var_4]
.text:00000088                 mov     dword ptr [edx+30h], 0
.text:0000008F                 mov     dword ptr [edx+34h], 0
.text:00000096                 mov     eax, [ebp+var_4]
.text:00000099                 mov     dword ptr [eax+40h], 0
.text:000000A0                 mov     ecx, [ebp+var_4]
.text:000000A3                 mov     dword ptr [ecx+44h], 0
.text:000000AA                 mov     edx, [ebp+var_4]
.text:000000AD                 mov     byte ptr [edx+48h], 0
.text:000000B1                 mov     eax, [ebp+var_4]
.text:000000B4                 mov     dword ptr [eax+4Ch], 0
.text:000000BB                 mov     ecx, [ebp+var_4]
.text:000000BE                 mov     dword ptr [ecx+50h], 0
.text:000000C5                 mov     eax, [ebp+var_4]
.text:000000C8                 add     esp, 4
.text:000000CB                 cmp     ebp, esp
.text:000000CD                 call    __RTC_CheckEsp
.text:000000D2                 mov     esp, ebp
.text:000000D4                 pop     ebp
.text:000000D5                 retn
.text:000000D5 ??0CInFileStream@@QAE@XZ endp
.text:000000D5
.text:000000D5 ; ---------------------------------------------------------------------------
.text:000000D6                 align 10h
.text:000000E0
.text:000000E0 ; =============== S U B R O U T I N E =======================================
.text:000000E0
.text:000000E0 ; Attributes: bp-based frame
.text:000000E0
.text:000000E0 ; _DWORD __thiscall CInFileStream::~CInFileStream(CInFileStream *__hidden this)
.text:000000E0                 public ??1CInFileStream@@UAE@XZ
.text:000000E0 ??1CInFileStream@@UAE@XZ proc near      ; CODE XREF: CInFileStream::`scalar deleting destructor'(uint)+11p
.text:000000E0
.text:000000E0 var_10          = dword ptr -10h
.text:000000E0 var_C           = dword ptr -0Ch
.text:000000E0 var_4           = dword ptr -4
.text:000000E0
.text:000000E0                 push    ebp
.text:000000E1                 mov     ebp, esp
.text:000000E3                 push    0FFFFFFFFh
.text:000000E5                 push    offset __ehhandler$??1CInFileStream@@UAE@XZ
.text:000000EA                 mov     eax, large fs:0
.text:000000F0                 push    eax
.text:000000F1                 push    ecx
.text:000000F2                 push    esi
.text:000000F3                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000FA                 mov     eax, dword ptr ds:___security_cookie
.text:000000FF                 xor     eax, ebp
.text:00000101                 push    eax
.text:00000102                 lea     eax, [ebp+var_C]
.text:00000105                 mov     large fs:0, eax
.text:0000010B                 mov     [ebp+var_10], ecx
.text:0000010E                 mov     eax, [ebp+var_10]
.text:00000111                 mov     dword ptr [eax], offset ??_7CInFileStream@@6BIInStream@@@ ; const CInFileStream::`vftable'{for `IInStream'}
.text:00000117                 mov     ecx, [ebp+var_10]
.text:0000011A                 mov     dword ptr [ecx+4], offset ??_7CInFileStream@@6BIStreamGetSize@@@ ; const CInFileStream::`vftable'{for `IStreamGetSize'}
.text:00000121                 mov     edx, [ebp+var_10]
.text:00000124                 mov     dword ptr [edx+8], offset ??_7CInFileStream@@6BIStreamGetProps@@@ ; const CInFileStream::`vftable'{for `IStreamGetProps'}
.text:0000012B                 mov     eax, [ebp+var_10]
.text:0000012E                 mov     dword ptr [eax+0Ch], offset ??_7CInFileStream@@6BIStreamGetProps2@@@ ; const CInFileStream::`vftable'{for `IStreamGetProps2'}
.text:00000135                 mov     [ebp+var_4], 0
.text:0000013C                 mov     ecx, [ebp+var_10]
.text:0000013F                 mov     edx, [ecx+40h]
.text:00000142                 push    edx
.text:00000143                 call    _MidFree@4      ; MidFree(x)
.text:00000148                 mov     eax, [ebp+var_10]
.text:0000014B                 cmp     dword ptr [eax+4Ch], 0
.text:0000014F                 jz      short loc_176
.text:00000151                 mov     esi, esp
.text:00000153                 mov     ecx, [ebp+var_10]
.text:00000156                 mov     edx, [ecx+50h]
.text:00000159                 push    edx
.text:0000015A                 mov     eax, [ebp+var_10]
.text:0000015D                 mov     ecx, [eax+4Ch]
.text:00000160                 mov     edx, [ebp+var_10]
.text:00000163                 mov     eax, [edx+4Ch]
.text:00000166                 mov     edx, [ecx]
.text:00000168                 mov     ecx, eax
.text:0000016A                 mov     eax, [edx+4]
.text:0000016D                 call    eax
.text:0000016F                 cmp     esi, esp
.text:00000171                 call    __RTC_CheckEsp
.text:00000176
.text:00000176 loc_176:                                ; CODE XREF: CInFileStream::~CInFileStream(void)+6Fj
.text:00000176                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000017D                 mov     ecx, [ebp+var_10]
.text:00000180                 add     ecx, 18h        ; this
.text:00000183                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:00000188                 mov     ecx, [ebp+var_C]
.text:0000018B                 mov     large fs:0, ecx
.text:00000192                 pop     ecx
.text:00000193                 pop     esi
.text:00000194                 add     esp, 10h
.text:00000197                 cmp     ebp, esp
.text:00000199                 call    __RTC_CheckEsp
.text:0000019E                 mov     esp, ebp
.text:000001A0                 pop     ebp
.text:000001A1                 retn
.text:000001A1 ??1CInFileStream@@UAE@XZ endp
.text:000001A1
.text:000001A1 ; ---------------------------------------------------------------------------
.text:000001A2                 align 10h
.text:000001B0
.text:000001B0 ; =============== S U B R O U T I N E =======================================
.text:000001B0
.text:000001B0 ; Attributes: bp-based frame
.text:000001B0
.text:000001B0 ; __int32 __stdcall CInFileStream::Read(CInFileStream *this, void *Dst, unsigned int, unsigned int *)
.text:000001B0                 public ?Read@CInFileStream@@UAGJPAXIPAI@Z
.text:000001B0 ?Read@CInFileStream@@UAGJPAXIPAI@Z proc near ; DATA XREF: .rdata:00001138o
.text:000001B0
.text:000001B0 var_B4          = dword ptr -0B4h
.text:000001B0 var_B0          = dword ptr -0B0h
.text:000001B0 var_AC          = dword ptr -0ACh
.text:000001B0 var_A8          = dword ptr -0A8h
.text:000001B0 var_A4          = dword ptr -0A4h
.text:000001B0 var_A0          = dword ptr -0A0h
.text:000001B0 var_9C          = dword ptr -9Ch
.text:000001B0 var_98          = dword ptr -98h
.text:000001B0 var_94          = dword ptr -94h
.text:000001B0 var_90          = dword ptr -90h
.text:000001B0 var_8C          = dword ptr -8Ch
.text:000001B0 var_88          = dword ptr -88h
.text:000001B0 var_84          = dword ptr -84h
.text:000001B0 var_80          = dword ptr -80h
.text:000001B0 var_7C          = dword ptr -7Ch
.text:000001B0 var_78          = dword ptr -78h
.text:000001B0 var_74          = dword ptr -74h
.text:000001B0 var_6D          = byte ptr -6Dh
.text:000001B0 var_68          = dword ptr -68h
.text:000001B0 var_5D          = byte ptr -5Dh
.text:000001B0 var_58          = qword ptr -58h
.text:000001B0 var_49          = byte ptr -49h
.text:000001B0 var_48          = dword ptr -48h
.text:000001B0 var_41          = byte ptr -41h
.text:000001B0 var_3C          = qword ptr -3Ch
.text:000001B0 var_30          = dword ptr -30h
.text:000001B0 var_2C          = dword ptr -2Ch
.text:000001B0 var_25          = byte ptr -25h
.text:000001B0 Size            = dword ptr -24h
.text:000001B0 var_20          = dword ptr -20h
.text:000001B0 var_1C          = qword ptr -1Ch
.text:000001B0 var_14          = dword ptr -14h
.text:000001B0 var_10          = dword ptr -10h
.text:000001B0 var_C           = dword ptr -0Ch
.text:000001B0 var_8           = dword ptr -8
.text:000001B0 var_4           = dword ptr -4
.text:000001B0 this            = dword ptr  8
.text:000001B0 Dst             = dword ptr  0Ch
.text:000001B0 arg_8           = dword ptr  10h
.text:000001B0 arg_C           = dword ptr  14h
.text:000001B0
.text:000001B0                 push    ebp
.text:000001B1                 mov     ebp, esp
.text:000001B3                 sub     esp, 0B4h
.text:000001B9                 push    esi
.text:000001BA                 push    edi
.text:000001BB                 lea     edi, [ebp+var_B4]
.text:000001C1                 mov     ecx, 2Dh ; '-'
.text:000001C6                 mov     eax, 0CCCCCCCCh
.text:000001CB                 rep stosd
.text:000001CD                 cmp     [ebp+arg_C], 0
.text:000001D1                 jz      short loc_1DC
.text:000001D3                 mov     eax, [ebp+arg_C]
.text:000001D6                 mov     dword ptr [eax], 0
.text:000001DC
.text:000001DC loc_1DC:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+21j
.text:000001DC                 cmp     [ebp+arg_8], 0
.text:000001E0                 jnz     short loc_1E9
.text:000001E2                 xor     eax, eax
.text:000001E4                 jmp     loc_715
.text:000001E9 ; ---------------------------------------------------------------------------
.text:000001E9
.text:000001E9 loc_1E9:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+30j
.text:000001E9                 mov     ecx, [ebp+this]
.text:000001EC                 movzx   edx, byte ptr [ecx+1Ch]
.text:000001F0                 test    edx, edx
.text:000001F2                 jz      loc_658
.text:000001F8                 mov     eax, [ebp+this]
.text:000001FB                 movzx   ecx, byte ptr [eax+1Dh]
.text:000001FF                 test    ecx, ecx
.text:00000201                 jz      loc_2CA
.text:00000207                 mov     edx, [ebp+this]
.text:0000020A                 mov     eax, [ebp+this]
.text:0000020D                 mov     [ebp+var_78], edx
.text:00000210                 mov     [ebp+var_7C], eax
.text:00000213                 mov     ecx, [ebp+var_78]
.text:00000216                 mov     edx, [ebp+var_7C]
.text:00000219                 mov     eax, [ecx+2Ch]
.text:0000021C                 cmp     eax, [edx+24h]
.text:0000021F                 jb      short loc_283
.text:00000221                 ja      short loc_231
.text:00000223                 mov     ecx, [ebp+var_78]
.text:00000226                 mov     edx, [ebp+var_7C]
.text:00000229                 mov     eax, [ecx+28h]
.text:0000022C                 cmp     eax, [edx+20h]
.text:0000022F                 jb      short loc_283
.text:00000231
.text:00000231 loc_231:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+71j
.text:00000231                 mov     ecx, [ebp+this]
.text:00000234                 mov     edx, [ebp+this]
.text:00000237                 mov     [ebp+var_80], ecx
.text:0000023A                 mov     [ebp+var_84], edx
.text:00000240                 mov     eax, [ebp+var_80]
.text:00000243                 mov     ecx, [ebp+var_84]
.text:00000249                 mov     edx, [eax+28h]
.text:0000024C                 cmp     edx, [ecx+20h]
.text:0000024F                 jnz     short loc_26E
.text:00000251                 mov     eax, [ebp+var_80]
.text:00000254                 mov     ecx, [ebp+var_84]
.text:0000025A                 mov     edx, [eax+2Ch]
.text:0000025D                 cmp     edx, [ecx+24h]
.text:00000260                 jnz     short loc_26E
.text:00000262                 mov     [ebp+var_88], 0
.text:0000026C                 jmp     short loc_278
.text:0000026E ; ---------------------------------------------------------------------------
.text:0000026E
.text:0000026E loc_26E:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+9Fj
.text:0000026E                                         ; CInFileStream::Read(void *,uint,uint *)+B0j
.text:0000026E                 mov     [ebp+var_88], 80004005h
.text:00000278
.text:00000278 loc_278:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+BCj
.text:00000278                 mov     eax, [ebp+var_88]
.text:0000027E                 jmp     loc_715
.text:00000283 ; ---------------------------------------------------------------------------
.text:00000283
.text:00000283 loc_283:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+6Fj
.text:00000283                                         ; CInFileStream::Read(void *,uint,uint *)+7Fj
.text:00000283                 mov     eax, [ebp+this]
.text:00000286                 mov     ecx, [ebp+this]
.text:00000289                 mov     edx, [eax+20h]
.text:0000028C                 sub     edx, [ecx+28h]
.text:0000028F                 mov     eax, [eax+24h]
.text:00000292                 sbb     eax, [ecx+2Ch]
.text:00000295                 mov     [ebp+var_8], edx
.text:00000298                 mov     [ebp+var_4], eax
.text:0000029B                 mov     ecx, [ebp+arg_8]
.text:0000029E                 xor     edx, edx
.text:000002A0                 mov     [ebp+var_90], ecx
.text:000002A6                 mov     [ebp+var_8C], edx
.text:000002AC                 mov     eax, [ebp+var_8C]
.text:000002B2                 cmp     eax, [ebp+var_4]
.text:000002B5                 jb      short loc_2CA
.text:000002B7                 ja      short loc_2C4
.text:000002B9                 mov     ecx, [ebp+var_90]
.text:000002BF                 cmp     ecx, [ebp+var_8]
.text:000002C2                 jbe     short loc_2CA
.text:000002C4
.text:000002C4 loc_2C4:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+107j
.text:000002C4                 mov     edx, [ebp+var_8]
.text:000002C7                 mov     [ebp+arg_8], edx
.text:000002CA
.text:000002CA loc_2CA:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+51j
.text:000002CA                                         ; CInFileStream::Read(void *,uint,uint *)+105j ...
.text:000002CA                 mov     [ebp+var_C], 3FFFFh
.text:000002D1                 mov     [ebp+var_14], 0FFFC0000h
.text:000002D8                 mov     [ebp+var_10], 0FFFFFFFFh
.text:000002DF                 mov     eax, [ebp+this]
.text:000002E2                 mov     ecx, [eax+28h]
.text:000002E5                 and     ecx, 0FFFC0000h
.text:000002EB                 mov     edx, [eax+2Ch]
.text:000002EE                 mov     dword ptr [ebp+var_1C], ecx
.text:000002F1                 mov     dword ptr [ebp+var_1C+4], edx
.text:000002F4                 mov     eax, [ebp+this]
.text:000002F7                 cmp     dword ptr [eax+44h], 0
.text:000002FB                 jbe     loc_3B0
.text:00000301                 mov     ecx, [ebp+this]
.text:00000304                 mov     [ebp+var_94], ecx
.text:0000030A                 mov     edx, [ebp+var_94]
.text:00000310                 mov     eax, [edx+38h]
.text:00000313                 cmp     eax, dword ptr [ebp+var_1C]
.text:00000316                 jnz     loc_3B0
.text:0000031C                 mov     ecx, [ebp+var_94]
.text:00000322                 mov     edx, [ecx+3Ch]
.text:00000325                 cmp     edx, dword ptr [ebp+var_1C+4]
.text:00000328                 jnz     loc_3B0
.text:0000032E                 mov     eax, [ebp+this]
.text:00000331                 mov     ecx, [eax+28h]
.text:00000334                 and     ecx, 3FFFFh
.text:0000033A                 mov     [ebp+var_20], ecx
.text:0000033D                 mov     edx, [ebp+this]
.text:00000340                 mov     eax, [ebp+var_20]
.text:00000343                 cmp     eax, [edx+44h]
.text:00000346                 jb      short loc_34F
.text:00000348                 xor     eax, eax
.text:0000034A                 jmp     loc_715
.text:0000034F ; ---------------------------------------------------------------------------
.text:0000034F
.text:0000034F loc_34F:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+196j
.text:0000034F                 mov     ecx, [ebp+arg_8]
.text:00000352                 push    ecx
.text:00000353                 mov     edx, [ebp+this]
.text:00000356                 mov     eax, [edx+44h]
.text:00000359                 sub     eax, [ebp+var_20]
.text:0000035C                 push    eax
.text:0000035D                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:00000362                 mov     [ebp+Size], eax
.text:00000365                 mov     ecx, [ebp+Size]
.text:00000368                 push    ecx             ; Size
.text:00000369                 mov     edx, [ebp+this]
.text:0000036C                 mov     eax, [edx+40h]
.text:0000036F                 add     eax, [ebp+var_20]
.text:00000372                 push    eax             ; Src
.text:00000373                 mov     ecx, [ebp+Dst]
.text:00000376                 push    ecx             ; Dst
.text:00000377                 call    _memcpy
.text:0000037C                 add     esp, 0Ch
.text:0000037F                 mov     edx, [ebp+Size]
.text:00000382                 xor     eax, eax
.text:00000384                 mov     ecx, [ebp+this]
.text:00000387                 add     edx, [ecx+28h]
.text:0000038A                 adc     eax, [ecx+2Ch]
.text:0000038D                 mov     ecx, [ebp+this]
.text:00000390                 mov     [ecx+28h], edx
.text:00000393                 mov     [ecx+2Ch], eax
.text:00000396                 cmp     [ebp+arg_C], 0
.text:0000039A                 jz      short loc_3A9
.text:0000039C                 mov     edx, [ebp+arg_C]
.text:0000039F                 mov     eax, [edx]
.text:000003A1                 add     eax, [ebp+Size]
.text:000003A4                 mov     ecx, [ebp+arg_C]
.text:000003A7                 mov     [ecx], eax
.text:000003A9
.text:000003A9 loc_3A9:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+1EAj
.text:000003A9                 xor     eax, eax
.text:000003AB                 jmp     loc_715
.text:000003B0 ; ---------------------------------------------------------------------------
.text:000003B0
.text:000003B0 loc_3B0:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+14Bj
.text:000003B0                                         ; CInFileStream::Read(void *,uint,uint *)+166j ...
.text:000003B0                 mov     [ebp+var_25], 0
.text:000003B4                 mov     edx, [ebp+this]
.text:000003B7                 mov     eax, [edx+28h]
.text:000003BA                 and     eax, 3FFFFh
.text:000003BF                 mov     ecx, [edx+2Ch]
.text:000003C2                 and     ecx, 0
.text:000003C5                 mov     [ebp+var_9C], eax
.text:000003CB                 mov     [ebp+var_98], ecx
.text:000003D1                 mov     edx, [ebp+var_9C]
.text:000003D7                 or      edx, [ebp+var_98]
.text:000003DD                 jnz     short loc_3E9
.text:000003DF                 mov     eax, [ebp+Dst]
.text:000003E2                 and     eax, 3FFFFh
.text:000003E7                 jz      short loc_3F2
.text:000003E9
.text:000003E9 loc_3E9:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+22Dj
.text:000003E9                 mov     [ebp+var_25], 1
.text:000003ED                 jmp     loc_480
.text:000003F2 ; ---------------------------------------------------------------------------
.text:000003F2
.text:000003F2 loc_3F2:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+237j
.text:000003F2                 mov     ecx, [ebp+arg_8]
.text:000003F5                 xor     edx, edx
.text:000003F7                 mov     eax, [ebp+this]
.text:000003FA                 add     ecx, [eax+28h]
.text:000003FD                 adc     edx, [eax+2Ch]
.text:00000400                 mov     [ebp+var_30], ecx
.text:00000403                 mov     [ebp+var_2C], edx
.text:00000406                 mov     ecx, [ebp+var_30]
.text:00000409                 and     ecx, 3FFFFh
.text:0000040F                 mov     edx, [ebp+var_2C]
.text:00000412                 and     edx, 0
.text:00000415                 mov     [ebp+var_A4], ecx
.text:0000041B                 mov     [ebp+var_A0], edx
.text:00000421                 mov     eax, [ebp+var_A4]
.text:00000427                 or      eax, [ebp+var_A0]
.text:0000042D                 jz      short loc_480
.text:0000042F                 mov     ecx, [ebp+var_30]
.text:00000432                 and     ecx, 0FFFC0000h
.text:00000438                 mov     edx, [ebp+var_2C]
.text:0000043B                 mov     [ebp+var_30], ecx
.text:0000043E                 mov     [ebp+var_2C], edx
.text:00000441                 mov     eax, [ebp+this]
.text:00000444                 mov     [ebp+var_A8], eax
.text:0000044A                 mov     ecx, [ebp+var_A8]
.text:00000450                 mov     edx, [ebp+var_2C]
.text:00000453                 cmp     edx, [ecx+2Ch]
.text:00000456                 ja      short loc_46E
.text:00000458                 jb      short loc_468
.text:0000045A                 mov     eax, [ebp+var_A8]
.text:00000460                 mov     ecx, [ebp+var_30]
.text:00000463                 cmp     ecx, [eax+28h]
.text:00000466                 ja      short loc_46E
.text:00000468
.text:00000468 loc_468:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+2A8j
.text:00000468                 mov     [ebp+var_25], 1
.text:0000046C                 jmp     short loc_480
.text:0000046E ; ---------------------------------------------------------------------------
.text:0000046E
.text:0000046E loc_46E:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+2A6j
.text:0000046E                                         ; CInFileStream::Read(void *,uint,uint *)+2B6j
.text:0000046E                 mov     edx, [ebp+this]
.text:00000471                 mov     eax, [ebp+var_30]
.text:00000474                 sub     eax, [edx+28h]
.text:00000477                 mov     ecx, [ebp+var_2C]
.text:0000047A                 sbb     ecx, [edx+2Ch]
.text:0000047D                 mov     [ebp+arg_8], eax
.text:00000480
.text:00000480 loc_480:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+23Dj
.text:00000480                                         ; CInFileStream::Read(void *,uint,uint *)+27Dj ...
.text:00000480                 movzx   edx, [ebp+var_25]
.text:00000484                 test    edx, edx
.text:00000486                 jnz     short loc_48D
.text:00000488                 jmp     loc_5CA
.text:0000048D ; ---------------------------------------------------------------------------
.text:0000048D
.text:0000048D loc_48D:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+2D6j
.text:0000048D                 mov     eax, [ebp+this]
.text:00000490                 mov     [ebp+var_AC], eax
.text:00000496                 mov     ecx, [ebp+var_AC]
.text:0000049C                 mov     edx, dword ptr [ebp+var_1C]
.text:0000049F                 cmp     edx, [ecx+30h]
.text:000004A2                 jnz     short loc_4B2
.text:000004A4                 mov     eax, [ebp+var_AC]
.text:000004AA                 mov     ecx, dword ptr [ebp+var_1C+4]
.text:000004AD                 cmp     ecx, [eax+34h]
.text:000004B0                 jz      short loc_4F4
.text:000004B2
.text:000004B2 loc_4B2:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+2F2j
.text:000004B2                 lea     edx, [ebp+var_3C]
.text:000004B5                 push    edx             ; unsigned __int64 *
.text:000004B6                 push    0               ; unsigned __int32
.text:000004B8                 mov     eax, dword ptr [ebp+var_1C+4]
.text:000004BB                 push    eax
.text:000004BC                 mov     ecx, dword ptr [ebp+var_1C]
.text:000004BF                 push    ecx             ; __int64
.text:000004C0                 mov     ecx, [ebp+this]
.text:000004C3                 add     ecx, 18h        ; this
.text:000004C6                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)
.text:000004CB                 mov     [ebp+var_41], al
.text:000004CE                 movzx   edx, [ebp+var_41]
.text:000004D2                 test    edx, edx
.text:000004D4                 jnz     short loc_4E5
.text:000004D6                 movzx   eax, [ebp+var_41]
.text:000004DA                 push    eax
.text:000004DB                 call    ?ConvertBoolToHRESULT@@YGJ_N@Z ; ConvertBoolToHRESULT(bool)
.text:000004E0                 jmp     loc_715
.text:000004E5 ; ---------------------------------------------------------------------------
.text:000004E5
.text:000004E5 loc_4E5:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+324j
.text:000004E5                 mov     ecx, [ebp+this]
.text:000004E8                 mov     edx, dword ptr [ebp+var_3C]
.text:000004EB                 mov     [ecx+30h], edx
.text:000004EE                 mov     eax, dword ptr [ebp+var_3C+4]
.text:000004F1                 mov     [ecx+34h], eax
.text:000004F4
.text:000004F4 loc_4F4:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+300j
.text:000004F4                 mov     ecx, [ebp+this]
.text:000004F7                 mov     edx, dword ptr [ebp+var_1C]
.text:000004FA                 mov     [ecx+38h], edx
.text:000004FD                 mov     eax, dword ptr [ebp+var_1C+4]
.text:00000500                 mov     [ecx+3Ch], eax
.text:00000503                 mov     [ebp+var_48], 40000h
.text:0000050A                 mov     ecx, [ebp+this]
.text:0000050D                 movzx   edx, byte ptr [ecx+1Dh]
.text:00000511                 test    edx, edx
.text:00000513                 jz      short loc_538
.text:00000515                 push    0
.text:00000517                 push    40000h
.text:0000051C                 mov     eax, [ebp+this]
.text:0000051F                 mov     ecx, [ebp+this]
.text:00000522                 mov     edx, [eax+20h]
.text:00000525                 sub     edx, [ecx+30h]
.text:00000528                 mov     eax, [eax+24h]
.text:0000052B                 sbb     eax, [ecx+34h]
.text:0000052E                 push    eax
.text:0000052F                 push    edx
.text:00000530                 call    ??$MyMin@_K@@YG_K_K0@Z ; MyMin<unsigned __int64>(unsigned __int64,unsigned __int64)
.text:00000535                 mov     [ebp+var_48], eax
.text:00000538
.text:00000538 loc_538:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+363j
.text:00000538                 mov     ecx, [ebp+this]
.text:0000053B                 cmp     dword ptr [ecx+40h], 0
.text:0000053F                 jnz     short loc_564
.text:00000541                 push    40000h
.text:00000546                 call    _MidAlloc@4     ; MidAlloc(x)
.text:0000054B                 mov     edx, [ebp+this]
.text:0000054E                 mov     [edx+40h], eax
.text:00000551                 mov     eax, [ebp+this]
.text:00000554                 cmp     dword ptr [eax+40h], 0
.text:00000558                 jnz     short loc_564
.text:0000055A                 mov     eax, 8007000Eh
.text:0000055F                 jmp     loc_715
.text:00000564 ; ---------------------------------------------------------------------------
.text:00000564
.text:00000564 loc_564:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+38Fj
.text:00000564                                         ; CInFileStream::Read(void *,uint,uint *)+3A8j
.text:00000564                 mov     ecx, [ebp+this]
.text:00000567                 add     ecx, 44h ; 'D'
.text:0000056A                 push    ecx             ; unsigned int *
.text:0000056B                 mov     edx, [ebp+var_48]
.text:0000056E                 push    edx             ; unsigned int
.text:0000056F                 mov     eax, [ebp+this]
.text:00000572                 mov     ecx, [eax+40h]
.text:00000575                 push    ecx             ; void *
.text:00000576                 mov     ecx, [ebp+this]
.text:00000579                 add     ecx, 18h        ; this
.text:0000057C                 call    ?Read1@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z ; NWindows::NFile::NIO::CInFile::Read1(void *,uint,uint &)
.text:00000581                 mov     [ebp+var_49], al
.text:00000584                 movzx   edx, [ebp+var_49]
.text:00000588                 test    edx, edx
.text:0000058A                 jnz     short loc_59B
.text:0000058C                 movzx   eax, [ebp+var_49]
.text:00000590                 push    eax
.text:00000591                 call    ?ConvertBoolToHRESULT@@YGJ_N@Z ; ConvertBoolToHRESULT(bool)
.text:00000596                 jmp     loc_715
.text:0000059B ; ---------------------------------------------------------------------------
.text:0000059B
.text:0000059B loc_59B:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+3DAj
.text:0000059B                 mov     ecx, [ebp+this]
.text:0000059E                 cmp     dword ptr [ecx+44h], 0
.text:000005A2                 jnz     short loc_5AB
.text:000005A4                 xor     eax, eax
.text:000005A6                 jmp     loc_715
.text:000005AB ; ---------------------------------------------------------------------------
.text:000005AB
.text:000005AB loc_5AB:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+3F2j
.text:000005AB                 mov     edx, [ebp+this]
.text:000005AE                 mov     eax, [edx+44h]
.text:000005B1                 xor     ecx, ecx
.text:000005B3                 mov     edx, [ebp+this]
.text:000005B6                 add     eax, [edx+30h]
.text:000005B9                 adc     ecx, [edx+34h]
.text:000005BC                 mov     edx, [ebp+this]
.text:000005BF                 mov     [edx+30h], eax
.text:000005C2                 mov     [edx+34h], ecx
.text:000005C5                 jmp     loc_2CA
.text:000005CA ; ---------------------------------------------------------------------------
.text:000005CA
.text:000005CA loc_5CA:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+2D8j
.text:000005CA                 mov     eax, [ebp+this]
.text:000005CD                 mov     ecx, [ebp+this]
.text:000005D0                 mov     [ebp+var_B0], eax
.text:000005D6                 mov     [ebp+var_B4], ecx
.text:000005DC                 mov     edx, [ebp+var_B0]
.text:000005E2                 mov     eax, [ebp+var_B4]
.text:000005E8                 mov     ecx, [edx+28h]
.text:000005EB                 cmp     ecx, [eax+30h]
.text:000005EE                 jnz     short loc_604
.text:000005F0                 mov     edx, [ebp+var_B0]
.text:000005F6                 mov     eax, [ebp+var_B4]
.text:000005FC                 mov     ecx, [edx+2Ch]
.text:000005FF                 cmp     ecx, [eax+34h]
.text:00000602                 jz      short loc_658
.text:00000604
.text:00000604 loc_604:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+43Ej
.text:00000604                 lea     edx, [ebp+var_58]
.text:00000607                 push    edx             ; unsigned __int64 *
.text:00000608                 push    0               ; unsigned __int32
.text:0000060A                 mov     eax, [ebp+this]
.text:0000060D                 mov     ecx, [eax+2Ch]
.text:00000610                 push    ecx
.text:00000611                 mov     edx, [eax+28h]
.text:00000614                 push    edx             ; __int64
.text:00000615                 mov     ecx, [ebp+this]
.text:00000618                 add     ecx, 18h        ; this
.text:0000061B                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)
.text:00000620                 mov     [ebp+var_5D], al
.text:00000623                 movzx   eax, [ebp+var_5D]
.text:00000627                 test    eax, eax
.text:00000629                 jnz     short loc_63A
.text:0000062B                 movzx   ecx, [ebp+var_5D]
.text:0000062F                 push    ecx
.text:00000630                 call    ?ConvertBoolToHRESULT@@YGJ_N@Z ; ConvertBoolToHRESULT(bool)
.text:00000635                 jmp     loc_715
.text:0000063A ; ---------------------------------------------------------------------------
.text:0000063A
.text:0000063A loc_63A:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+479j
.text:0000063A                 mov     edx, [ebp+this]
.text:0000063D                 mov     eax, dword ptr [ebp+var_58]
.text:00000640                 mov     [edx+28h], eax
.text:00000643                 mov     ecx, dword ptr [ebp+var_58+4]
.text:00000646                 mov     [edx+2Ch], ecx
.text:00000649                 mov     edx, [ebp+this]
.text:0000064C                 mov     eax, dword ptr [ebp+var_58]
.text:0000064F                 mov     [edx+30h], eax
.text:00000652                 mov     ecx, dword ptr [ebp+var_58+4]
.text:00000655                 mov     [edx+34h], ecx
.text:00000658
.text:00000658 loc_658:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+42j
.text:00000658                                         ; CInFileStream::Read(void *,uint,uint *)+452j
.text:00000658                 lea     edx, [ebp+var_68]
.text:0000065B                 push    edx             ; unsigned int *
.text:0000065C                 mov     eax, [ebp+arg_8]
.text:0000065F                 push    eax             ; unsigned int
.text:00000660                 mov     ecx, [ebp+Dst]
.text:00000663                 push    ecx             ; void *
.text:00000664                 mov     ecx, [ebp+this]
.text:00000667                 add     ecx, 18h        ; this
.text:0000066A                 call    ?ReadPart@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z ; NWindows::NFile::NIO::CInFile::ReadPart(void *,uint,uint &)
.text:0000066F                 mov     [ebp+var_6D], al
.text:00000672                 cmp     [ebp+arg_C], 0
.text:00000676                 jz      short loc_680
.text:00000678                 mov     edx, [ebp+arg_C]
.text:0000067B                 mov     eax, [ebp+var_68]
.text:0000067E                 mov     [edx], eax
.text:00000680
.text:00000680 loc_680:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+4C6j
.text:00000680                 mov     ecx, [ebp+var_68]
.text:00000683                 xor     edx, edx
.text:00000685                 mov     eax, [ebp+this]
.text:00000688                 add     ecx, [eax+28h]
.text:0000068B                 adc     edx, [eax+2Ch]
.text:0000068E                 mov     eax, [ebp+this]
.text:00000691                 mov     [eax+28h], ecx
.text:00000694                 mov     [eax+2Ch], edx
.text:00000697                 mov     ecx, [ebp+var_68]
.text:0000069A                 xor     edx, edx
.text:0000069C                 mov     eax, [ebp+this]
.text:0000069F                 add     ecx, [eax+30h]
.text:000006A2                 adc     edx, [eax+34h]
.text:000006A5                 mov     eax, [ebp+this]
.text:000006A8                 mov     [eax+30h], ecx
.text:000006AB                 mov     [eax+34h], edx
.text:000006AE                 movzx   ecx, [ebp+var_6D]
.text:000006B2                 test    ecx, ecx
.text:000006B4                 jz      short loc_6BA
.text:000006B6                 xor     eax, eax
.text:000006B8                 jmp     short loc_715
.text:000006BA ; ---------------------------------------------------------------------------
.text:000006BA
.text:000006BA loc_6BA:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+504j
.text:000006BA                 mov     esi, esp
.text:000006BC                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:000006C2                 cmp     esi, esp
.text:000006C4                 call    __RTC_CheckEsp
.text:000006C9                 mov     [ebp+var_74], eax
.text:000006CC                 mov     edx, [ebp+this]
.text:000006CF                 cmp     dword ptr [edx+4Ch], 0
.text:000006D3                 jz      short loc_6FF
.text:000006D5                 mov     esi, esp
.text:000006D7                 mov     eax, [ebp+var_74]
.text:000006DA                 push    eax
.text:000006DB                 mov     ecx, [ebp+this]
.text:000006DE                 mov     edx, [ecx+50h]
.text:000006E1                 push    edx
.text:000006E2                 mov     eax, [ebp+this]
.text:000006E5                 mov     ecx, [eax+4Ch]
.text:000006E8                 mov     edx, [ebp+this]
.text:000006EB                 mov     eax, [edx+4Ch]
.text:000006EE                 mov     edx, [ecx]
.text:000006F0                 mov     ecx, eax
.text:000006F2                 mov     eax, [edx]
.text:000006F4                 call    eax
.text:000006F6                 cmp     esi, esp
.text:000006F8                 call    __RTC_CheckEsp
.text:000006FD                 jmp     short loc_715
.text:000006FF ; ---------------------------------------------------------------------------
.text:000006FF
.text:000006FF loc_6FF:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+523j
.text:000006FF                 cmp     [ebp+var_74], 0
.text:00000703                 jnz     short loc_70C
.text:00000705                 mov     eax, 80004005h
.text:0000070A                 jmp     short loc_715
.text:0000070C ; ---------------------------------------------------------------------------
.text:0000070C
.text:0000070C loc_70C:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+553j
.text:0000070C                 mov     ecx, [ebp+var_74]
.text:0000070F                 push    ecx
.text:00000710                 call    _HRESULT_FROM_WIN32@4 ; HRESULT_FROM_WIN32(x)
.text:00000715
.text:00000715 loc_715:                                ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+34j
.text:00000715                                         ; CInFileStream::Read(void *,uint,uint *)+CEj ...
.text:00000715                 push    edx
.text:00000716                 mov     ecx, ebp
.text:00000718                 push    eax
.text:00000719                 lea     edx, $LN45
.text:0000071F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000724                 pop     eax
.text:00000725                 pop     edx
.text:00000726                 pop     edi
.text:00000727                 pop     esi
.text:00000728                 add     esp, 0B4h
.text:0000072E                 cmp     ebp, esp
.text:00000730                 call    __RTC_CheckEsp
.text:00000735                 mov     esp, ebp
.text:00000737                 pop     ebp
.text:00000738                 retn    10h
.text:00000738 ?Read@CInFileStream@@UAGJPAXIPAI@Z endp
.text:00000738
.text:00000738 ; ---------------------------------------------------------------------------
.text:0000073B                 align 4
.text:0000073C $LN45           dd 3                    ; DATA XREF: CInFileStream::Read(void *,uint,uint *)+569o
.text:00000740                 dd offset $LN44
.text:00000744 $LN44           dd 0FFFFFFC4h, 8        ; DATA XREF: .text:00000740o
.text:0000074C                 dd offset $LN41         ; "realNewPosition"
.text:00000750                 dd 0FFFFFFA8h, 8
.text:00000758                 dd offset $LN42         ; "realNewPosition"
.text:0000075C                 dd 0FFFFFF98h, 4
.text:00000764                 dd offset $LN43         ; "realProcessedSize"
.text:00000768 $LN43           db 'realProcessedSize',0 ; DATA XREF: .text:00000764o
.text:0000077A $LN42           db 'realNewPosition',0  ; DATA XREF: .text:00000758o
.text:0000078A $LN41           db 'realNewPosition',0  ; DATA XREF: .text:0000074Co
.text:0000079A                 align 10h
.text:000007A0
.text:000007A0 ; =============== S U B R O U T I N E =======================================
.text:000007A0
.text:000007A0 ; Attributes: bp-based frame
.text:000007A0
.text:000007A0 ; long __stdcall ConvertBoolToHRESULT(bool)
.text:000007A0 ?ConvertBoolToHRESULT@@YGJ_N@Z proc near
.text:000007A0                                         ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+32Bp
.text:000007A0                                         ; CInFileStream::Read(void *,uint,uint *)+3E1p ...
.text:000007A0
.text:000007A0 var_4           = dword ptr -4
.text:000007A0 arg_0           = byte ptr  8
.text:000007A0
.text:000007A0                 push    ebp
.text:000007A1                 mov     ebp, esp
.text:000007A3                 push    ecx
.text:000007A4                 push    esi
.text:000007A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007AC                 movzx   eax, [ebp+arg_0]
.text:000007B0                 test    eax, eax
.text:000007B2                 jz      short loc_7B8
.text:000007B4                 xor     eax, eax
.text:000007B6                 jmp     short loc_7E0
.text:000007B8 ; ---------------------------------------------------------------------------
.text:000007B8
.text:000007B8 loc_7B8:                                ; CODE XREF: ConvertBoolToHRESULT(bool)+12j
.text:000007B8                 mov     esi, esp
.text:000007BA                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:000007C0                 cmp     esi, esp
.text:000007C2                 call    __RTC_CheckEsp
.text:000007C7                 mov     [ebp+var_4], eax
.text:000007CA                 cmp     [ebp+var_4], 0
.text:000007CE                 jnz     short loc_7D7
.text:000007D0                 mov     eax, 80004005h
.text:000007D5                 jmp     short loc_7E0
.text:000007D7 ; ---------------------------------------------------------------------------
.text:000007D7
.text:000007D7 loc_7D7:                                ; CODE XREF: ConvertBoolToHRESULT(bool)+2Ej
.text:000007D7                 mov     ecx, [ebp+var_4]
.text:000007DA                 push    ecx
.text:000007DB                 call    _HRESULT_FROM_WIN32@4 ; HRESULT_FROM_WIN32(x)
.text:000007E0
.text:000007E0 loc_7E0:                                ; CODE XREF: ConvertBoolToHRESULT(bool)+16j
.text:000007E0                                         ; ConvertBoolToHRESULT(bool)+35j
.text:000007E0                 pop     esi
.text:000007E1                 add     esp, 4
.text:000007E4                 cmp     ebp, esp
.text:000007E6                 call    __RTC_CheckEsp
.text:000007EB                 mov     esp, ebp
.text:000007ED                 pop     ebp
.text:000007EE                 retn    4
.text:000007EE ?ConvertBoolToHRESULT@@YGJ_N@Z endp
.text:000007EE
.text:000007EE ; ---------------------------------------------------------------------------
.text:000007F1                 align 10h
.text:00000800
.text:00000800 ; =============== S U B R O U T I N E =======================================
.text:00000800
.text:00000800 ; Attributes: bp-based frame
.text:00000800
.text:00000800 ; __int32 __stdcall CStdInFileStream::Read(CStdInFileStream *this, void *lpBuffer, unsigned int, unsigned int *)
.text:00000800                 public ?Read@CStdInFileStream@@UAGJPAXIPAI@Z
.text:00000800 ?Read@CStdInFileStream@@UAGJPAXIPAI@Z proc near
.text:00000800
.text:00000800 var_14          = dword ptr -14h
.text:00000800 nNumberOfBytesToRead= dword ptr -10h
.text:00000800 var_C           = dword ptr -0Ch
.text:00000800 NumberOfBytesRead= dword ptr -8
.text:00000800 var_4           = dword ptr -4
.text:00000800 this            = dword ptr  8
.text:00000800 lpBuffer        = dword ptr  0Ch
.text:00000800 arg_8           = dword ptr  10h
.text:00000800 arg_C           = dword ptr  14h
.text:00000800
.text:00000800                 push    ebp
.text:00000801                 mov     ebp, esp
.text:00000803                 sub     esp, 14h
.text:00000806                 push    esi
.text:00000807                 push    edi
.text:00000808                 mov     eax, 0CCCCCCCCh
.text:0000080D                 mov     [ebp+var_14], eax
.text:00000810                 mov     [ebp+nNumberOfBytesToRead], eax
.text:00000813                 mov     [ebp+var_C], eax
.text:00000816                 mov     [ebp+NumberOfBytesRead], eax
.text:00000819                 mov     [ebp+var_4], eax
.text:0000081C                 mov     [ebp+nNumberOfBytesToRead], 100000h
.text:00000823                 mov     eax, [ebp+nNumberOfBytesToRead]
.text:00000826                 cmp     eax, [ebp+arg_8]
.text:00000829                 jbe     short loc_831
.text:0000082B                 mov     ecx, [ebp+arg_8]
.text:0000082E                 mov     [ebp+nNumberOfBytesToRead], ecx
.text:00000831
.text:00000831 loc_831:                                ; CODE XREF: CStdInFileStream::Read(void *,uint,uint *)+29j
.text:00000831                 mov     esi, esp
.text:00000833                 push    0               ; lpOverlapped
.text:00000835                 lea     edx, [ebp+NumberOfBytesRead]
.text:00000838                 push    edx             ; lpNumberOfBytesRead
.text:00000839                 mov     eax, [ebp+nNumberOfBytesToRead]
.text:0000083C                 push    eax             ; nNumberOfBytesToRead
.text:0000083D                 mov     ecx, [ebp+lpBuffer]
.text:00000840                 push    ecx             ; lpBuffer
.text:00000841                 mov     edi, esp
.text:00000843                 push    0FFFFFFF6h      ; nStdHandle
.text:00000845                 call    dword ptr ds:__imp__GetStdHandle@4 ; GetStdHandle(x)
.text:0000084B                 cmp     edi, esp
.text:0000084D                 call    __RTC_CheckEsp
.text:00000852                 push    eax             ; hFile
.text:00000853                 call    dword ptr ds:__imp__ReadFile@20 ; ReadFile(x,x,x,x,x)
.text:00000859                 cmp     esi, esp
.text:0000085B                 call    __RTC_CheckEsp
.text:00000860                 mov     [ebp+var_14], eax
.text:00000863                 cmp     [ebp+arg_C], 0
.text:00000867                 jz      short loc_871
.text:00000869                 mov     edx, [ebp+arg_C]
.text:0000086C                 mov     eax, [ebp+NumberOfBytesRead]
.text:0000086F                 mov     [edx], eax
.text:00000871
.text:00000871 loc_871:                                ; CODE XREF: CStdInFileStream::Read(void *,uint,uint *)+67j
.text:00000871                 cmp     [ebp+var_14], 0
.text:00000875                 jnz     short loc_88F
.text:00000877                 mov     esi, esp
.text:00000879                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000087F                 cmp     esi, esp
.text:00000881                 call    __RTC_CheckEsp
.text:00000886                 cmp     eax, 6Dh ; 'm'
.text:00000889                 jnz     short loc_88F
.text:0000088B                 xor     eax, eax
.text:0000088D                 jmp     short loc_89F
.text:0000088F ; ---------------------------------------------------------------------------
.text:0000088F
.text:0000088F loc_88F:                                ; CODE XREF: CStdInFileStream::Read(void *,uint,uint *)+75j
.text:0000088F                                         ; CStdInFileStream::Read(void *,uint,uint *)+89j
.text:0000088F                 cmp     [ebp+var_14], 0
.text:00000893                 setnz   cl
.text:00000896                 movzx   edx, cl
.text:00000899                 push    edx
.text:0000089A                 call    ?ConvertBoolToHRESULT@@YGJ_N@Z ; ConvertBoolToHRESULT(bool)
.text:0000089F
.text:0000089F loc_89F:                                ; CODE XREF: CStdInFileStream::Read(void *,uint,uint *)+8Dj
.text:0000089F                 push    edx
.text:000008A0                 mov     ecx, ebp
.text:000008A2                 push    eax
.text:000008A3                 lea     edx, $LN8
.text:000008A9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008AE                 pop     eax
.text:000008AF                 pop     edx
.text:000008B0                 pop     edi
.text:000008B1                 pop     esi
.text:000008B2                 add     esp, 14h
.text:000008B5                 cmp     ebp, esp
.text:000008B7                 call    __RTC_CheckEsp
.text:000008BC                 mov     esp, ebp
.text:000008BE                 pop     ebp
.text:000008BF                 retn    10h
.text:000008BF ?Read@CStdInFileStream@@UAGJPAXIPAI@Z endp
.text:000008BF
.text:000008BF ; ---------------------------------------------------------------------------
.text:000008C2                 align 4
.text:000008C4 $LN8            dd 1                    ; DATA XREF: CStdInFileStream::Read(void *,uint,uint *)+A3o
.text:000008C8                 dd offset $LN7
.text:000008CC $LN7            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000008C8o
.text:000008D4                 dd offset $LN6          ; "realProcessedSize"
.text:000008D8 $LN6            db 'realProcessedSize',0 ; DATA XREF: .text:000008D4o
.text:000008EA                 align 10h
.text:000008F0
.text:000008F0 ; =============== S U B R O U T I N E =======================================
.text:000008F0
.text:000008F0 ; Attributes: bp-based frame
.text:000008F0
.text:000008F0 ; __int32 __stdcall CInFileStream::Seek(CInFileStream *this, __int64, unsigned __int32, unsigned __int64 *)
.text:000008F0                 public ?Seek@CInFileStream@@UAGJ_JIPA_K@Z
.text:000008F0 ?Seek@CInFileStream@@UAGJ_JIPA_K@Z proc near ; DATA XREF: .rdata:0000113Co
.text:000008F0
.text:000008F0 var_18          = dword ptr -18h
.text:000008F0 var_14          = dword ptr -14h
.text:000008F0 var_10          = dword ptr -10h
.text:000008F0 var_C           = qword ptr -0Ch
.text:000008F0 var_4           = dword ptr -4
.text:000008F0 this            = dword ptr  8
.text:000008F0 arg_4           = qword ptr  0Ch
.text:000008F0 arg_C           = dword ptr  14h
.text:000008F0 arg_10          = dword ptr  18h
.text:000008F0
.text:000008F0                 push    ebp
.text:000008F1                 mov     ebp, esp
.text:000008F3                 sub     esp, 18h
.text:000008F6                 mov     eax, 0CCCCCCCCh
.text:000008FB                 mov     [ebp+var_18], eax
.text:000008FE                 mov     [ebp+var_14], eax
.text:00000901                 mov     [ebp+var_10], eax
.text:00000904                 mov     dword ptr [ebp+var_C], eax
.text:00000907                 mov     dword ptr [ebp+var_C+4], eax
.text:0000090A                 mov     [ebp+var_4], eax
.text:0000090D                 cmp     [ebp+arg_C], 3
.text:00000911                 jb      short loc_91D
.text:00000913                 mov     eax, 80030001h
.text:00000918                 jmp     loc_A2E
.text:0000091D ; ---------------------------------------------------------------------------
.text:0000091D
.text:0000091D loc_91D:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+21j
.text:0000091D                 mov     eax, [ebp+this]
.text:00000920                 movzx   ecx, byte ptr [eax+1Ch]
.text:00000924                 test    ecx, ecx
.text:00000926                 jz      loc_9D4
.text:0000092C                 mov     edx, [ebp+this]
.text:0000092F                 movzx   eax, byte ptr [edx+1Dh]
.text:00000933                 test    eax, eax
.text:00000935                 jnz     short loc_941
.text:00000937                 cmp     [ebp+arg_C], 2
.text:0000093B                 jz      loc_9D4
.text:00000941
.text:00000941 loc_941:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+45j
.text:00000941                 mov     ecx, [ebp+arg_C]
.text:00000944                 mov     [ebp+var_18], ecx
.text:00000947                 cmp     [ebp+var_18], 0
.text:0000094B                 jz      short loc_95B
.text:0000094D                 cmp     [ebp+var_18], 1
.text:00000951                 jz      short loc_95D
.text:00000953                 cmp     [ebp+var_18], 2
.text:00000957                 jz      short loc_974
.text:00000959                 jmp     short loc_98B
.text:0000095B ; ---------------------------------------------------------------------------
.text:0000095B
.text:0000095B loc_95B:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+5Bj
.text:0000095B                 jmp     short loc_995
.text:0000095D ; ---------------------------------------------------------------------------
.text:0000095D
.text:0000095D loc_95D:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+61j
.text:0000095D                 mov     edx, [ebp+this]
.text:00000960                 mov     eax, dword ptr [ebp+arg_4]
.text:00000963                 add     eax, [edx+28h]
.text:00000966                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00000969                 adc     ecx, [edx+2Ch]
.text:0000096C                 mov     dword ptr [ebp+arg_4], eax
.text:0000096F                 mov     dword ptr [ebp+arg_4+4], ecx
.text:00000972                 jmp     short loc_995
.text:00000974 ; ---------------------------------------------------------------------------
.text:00000974
.text:00000974 loc_974:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+67j
.text:00000974                 mov     edx, [ebp+this]
.text:00000977                 mov     eax, dword ptr [ebp+arg_4]
.text:0000097A                 add     eax, [edx+20h]
.text:0000097D                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00000980                 adc     ecx, [edx+24h]
.text:00000983                 mov     dword ptr [ebp+arg_4], eax
.text:00000986                 mov     dword ptr [ebp+arg_4+4], ecx
.text:00000989                 jmp     short loc_995
.text:0000098B ; ---------------------------------------------------------------------------
.text:0000098B
.text:0000098B loc_98B:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+69j
.text:0000098B                 mov     eax, 80030001h
.text:00000990                 jmp     loc_A2E
.text:00000995 ; ---------------------------------------------------------------------------
.text:00000995
.text:00000995 loc_995:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *):loc_95Bj
.text:00000995                                         ; CInFileStream::Seek(__int64,uint,unsigned __int64 *)+82j ...
.text:00000995                 cmp     dword ptr [ebp+arg_4+4], 0
.text:00000999                 jg      short loc_9AD
.text:0000099B                 jl      short loc_9A3
.text:0000099D                 cmp     dword ptr [ebp+arg_4], 0
.text:000009A1                 jnb     short loc_9AD
.text:000009A3
.text:000009A3 loc_9A3:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+ABj
.text:000009A3                 mov     eax, 80070083h
.text:000009A8                 jmp     loc_A2E
.text:000009AD ; ---------------------------------------------------------------------------
.text:000009AD
.text:000009AD loc_9AD:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+A9j
.text:000009AD                                         ; CInFileStream::Seek(__int64,uint,unsigned __int64 *)+B1j
.text:000009AD                 mov     edx, [ebp+this]
.text:000009B0                 mov     eax, dword ptr [ebp+arg_4]
.text:000009B3                 mov     [edx+28h], eax
.text:000009B6                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:000009B9                 mov     [edx+2Ch], ecx
.text:000009BC                 cmp     [ebp+arg_10], 0
.text:000009C0                 jz      short loc_9D0
.text:000009C2                 mov     edx, [ebp+arg_10]
.text:000009C5                 mov     eax, dword ptr [ebp+arg_4]
.text:000009C8                 mov     [edx], eax
.text:000009CA                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:000009CD                 mov     [edx+4], ecx
.text:000009D0
.text:000009D0 loc_9D0:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+D0j
.text:000009D0                 xor     eax, eax
.text:000009D2                 jmp     short loc_A2E
.text:000009D4 ; ---------------------------------------------------------------------------
.text:000009D4
.text:000009D4 loc_9D4:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+36j
.text:000009D4                                         ; CInFileStream::Seek(__int64,uint,unsigned __int64 *)+4Bj
.text:000009D4                 lea     edx, [ebp+var_C]
.text:000009D7                 push    edx             ; unsigned __int64 *
.text:000009D8                 mov     eax, [ebp+arg_C]
.text:000009DB                 push    eax             ; unsigned __int32
.text:000009DC                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:000009DF                 push    ecx
.text:000009E0                 mov     edx, dword ptr [ebp+arg_4]
.text:000009E3                 push    edx             ; __int64
.text:000009E4                 mov     ecx, [ebp+this]
.text:000009E7                 add     ecx, 18h        ; this
.text:000009EA                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)
.text:000009EF                 mov     byte ptr [ebp+var_14+3], al
.text:000009F2                 mov     eax, [ebp+this]
.text:000009F5                 mov     ecx, dword ptr [ebp+var_C]
.text:000009F8                 mov     [eax+28h], ecx
.text:000009FB                 mov     edx, dword ptr [ebp+var_C+4]
.text:000009FE                 mov     [eax+2Ch], edx
.text:00000A01                 mov     eax, [ebp+this]
.text:00000A04                 mov     ecx, dword ptr [ebp+var_C]
.text:00000A07                 mov     [eax+30h], ecx
.text:00000A0A                 mov     edx, dword ptr [ebp+var_C+4]
.text:00000A0D                 mov     [eax+34h], edx
.text:00000A10                 cmp     [ebp+arg_10], 0
.text:00000A14                 jz      short loc_A24
.text:00000A16                 mov     eax, [ebp+arg_10]
.text:00000A19                 mov     ecx, dword ptr [ebp+var_C]
.text:00000A1C                 mov     [eax], ecx
.text:00000A1E                 mov     edx, dword ptr [ebp+var_C+4]
.text:00000A21                 mov     [eax+4], edx
.text:00000A24
.text:00000A24 loc_A24:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+124j
.text:00000A24                 movzx   eax, byte ptr [ebp+var_14+3]
.text:00000A28                 push    eax
.text:00000A29                 call    ?ConvertBoolToHRESULT@@YGJ_N@Z ; ConvertBoolToHRESULT(bool)
.text:00000A2E
.text:00000A2E loc_A2E:                                ; CODE XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+28j
.text:00000A2E                                         ; CInFileStream::Seek(__int64,uint,unsigned __int64 *)+A0j ...
.text:00000A2E                 push    edx
.text:00000A2F                 mov     ecx, ebp
.text:00000A31                 push    eax
.text:00000A32                 lea     edx, $LN18
.text:00000A38                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000A3D                 pop     eax
.text:00000A3E                 pop     edx
.text:00000A3F                 add     esp, 18h
.text:00000A42                 cmp     ebp, esp
.text:00000A44                 call    __RTC_CheckEsp
.text:00000A49                 mov     esp, ebp
.text:00000A4B                 pop     ebp
.text:00000A4C                 retn    14h
.text:00000A4C ?Seek@CInFileStream@@UAGJ_JIPA_K@Z endp
.text:00000A4C
.text:00000A4C ; ---------------------------------------------------------------------------
.text:00000A4F                 align 10h
.text:00000A50 $LN18           dd 1                    ; DATA XREF: CInFileStream::Seek(__int64,uint,unsigned __int64 *)+142o
.text:00000A54                 dd offset $LN17
.text:00000A58 $LN17           dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00000A54o
.text:00000A60                 dd offset $LN16         ; "realNewPosition"
.text:00000A64 $LN16           db 'realNewPosition',0  ; DATA XREF: .text:00000A60o
.text:00000A74                 align 10h
.text:00000A80
.text:00000A80 ; =============== S U B R O U T I N E =======================================
.text:00000A80
.text:00000A80 ; Attributes: bp-based frame
.text:00000A80
.text:00000A80 ; __int32 __stdcall CInFileStream::GetSize(CInFileStream *this, unsigned __int64 *)
.text:00000A80                 public ?GetSize@CInFileStream@@UAGJPA_K@Z
.text:00000A80 ?GetSize@CInFileStream@@UAGJPA_K@Z proc near ; DATA XREF: .rdata:00001124o
.text:00000A80
.text:00000A80 this            = dword ptr  8
.text:00000A80 arg_4           = dword ptr  0Ch
.text:00000A80
.text:00000A80                 push    ebp
.text:00000A81                 mov     ebp, esp
.text:00000A83                 mov     eax, [ebp+arg_4]
.text:00000A86                 push    eax             ; unsigned __int64 *
.text:00000A87                 mov     ecx, [ebp+this]
.text:00000A8A                 add     ecx, 14h        ; this
.text:00000A8D                 call    ?GetLength@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z ; NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)
.text:00000A92                 movzx   ecx, al
.text:00000A95                 push    ecx
.text:00000A96                 call    ?ConvertBoolToHRESULT@@YGJ_N@Z ; ConvertBoolToHRESULT(bool)
.text:00000A9B                 cmp     ebp, esp
.text:00000A9D                 call    __RTC_CheckEsp
.text:00000AA2                 pop     ebp
.text:00000AA3                 retn    8
.text:00000AA3 ?GetSize@CInFileStream@@UAGJPA_K@Z endp
.text:00000AA3
.text:00000AA3 ; ---------------------------------------------------------------------------
.text:00000AA6                 align 10h
.text:00000AB0
.text:00000AB0 ; =============== S U B R O U T I N E =======================================
.text:00000AB0
.text:00000AB0 ; Attributes: bp-based frame
.text:00000AB0
.text:00000AB0 ; __int32 __stdcall CInFileStream::GetProps(CInFileStream *this, unsigned __int64 *, struct _FILETIME *, struct _FILETIME *, struct _FILETIME *, unsigned int *)
.text:00000AB0                 public ?GetProps@CInFileStream@@UAGJPA_KPAU_FILETIME@@11PAI@Z
.text:00000AB0 ?GetProps@CInFileStream@@UAGJPA_KPAU_FILETIME@@11PAI@Z proc near
.text:00000AB0                                         ; DATA XREF: .rdata:00001110o
.text:00000AB0
.text:00000AB0 var_40          = byte ptr -40h
.text:00000AB0 var_3C          = _BY_HANDLE_FILE_INFORMATION ptr -3Ch
.text:00000AB0 var_4           = dword ptr -4
.text:00000AB0 this            = dword ptr  8
.text:00000AB0 arg_4           = dword ptr  0Ch
.text:00000AB0 arg_8           = dword ptr  10h
.text:00000AB0 arg_C           = dword ptr  14h
.text:00000AB0 arg_10          = dword ptr  18h
.text:00000AB0 arg_14          = dword ptr  1Ch
.text:00000AB0
.text:00000AB0                 push    ebp
.text:00000AB1                 mov     ebp, esp
.text:00000AB3                 sub     esp, 40h
.text:00000AB6                 push    esi
.text:00000AB7                 push    edi
.text:00000AB8                 lea     edi, [ebp+var_40]
.text:00000ABB                 mov     ecx, 10h
.text:00000AC0                 mov     eax, 0CCCCCCCCh
.text:00000AC5                 rep stosd
.text:00000AC7                 mov     eax, dword ptr ds:___security_cookie
.text:00000ACC                 xor     eax, ebp
.text:00000ACE                 mov     [ebp+var_4], eax
.text:00000AD1                 lea     eax, [ebp+var_3C]
.text:00000AD4                 push    eax             ; struct _BY_HANDLE_FILE_INFORMATION *
.text:00000AD5                 mov     ecx, [ebp+this]
.text:00000AD8                 add     ecx, 10h        ; this
.text:00000ADB                 call    ?GetFileInformation@CFileBase@NIO@NFile@NWindows@@QBE_NPAU_BY_HANDLE_FILE_INFORMATION@@@Z ; NWindows::NFile::NIO::CFileBase::GetFileInformation(_BY_HANDLE_FILE_INFORMATION *)
.text:00000AE0                 movzx   ecx, al
.text:00000AE3                 test    ecx, ecx
.text:00000AE5                 jz      short loc_B58
.text:00000AE7                 cmp     [ebp+arg_4], 0
.text:00000AEB                 jz      short loc_B0A
.text:00000AED                 mov     eax, [ebp+var_3C.nFileSizeHigh]
.text:00000AF0                 xor     edx, edx
.text:00000AF2                 mov     cl, 20h ; ' '
.text:00000AF4                 call    __allshl
.text:00000AF9                 mov     ecx, [ebp+var_3C.nFileSizeLow]
.text:00000AFC                 xor     esi, esi
.text:00000AFE                 add     eax, ecx
.text:00000B00                 adc     edx, esi
.text:00000B02                 mov     ecx, [ebp+arg_4]
.text:00000B05                 mov     [ecx], eax
.text:00000B07                 mov     [ecx+4], edx
.text:00000B0A
.text:00000B0A loc_B0A:                                ; CODE XREF: CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+3Bj
.text:00000B0A                 cmp     [ebp+arg_8], 0
.text:00000B0E                 jz      short loc_B1E
.text:00000B10                 mov     edx, [ebp+arg_8]
.text:00000B13                 mov     eax, [ebp+var_3C.ftCreationTime.dwLowDateTime]
.text:00000B16                 mov     [edx], eax
.text:00000B18                 mov     ecx, [ebp+var_3C.ftCreationTime.dwHighDateTime]
.text:00000B1B                 mov     [edx+4], ecx
.text:00000B1E
.text:00000B1E loc_B1E:                                ; CODE XREF: CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+5Ej
.text:00000B1E                 cmp     [ebp+arg_C], 0
.text:00000B22                 jz      short loc_B32
.text:00000B24                 mov     edx, [ebp+arg_C]
.text:00000B27                 mov     eax, [ebp+var_3C.ftLastAccessTime.dwLowDateTime]
.text:00000B2A                 mov     [edx], eax
.text:00000B2C                 mov     ecx, [ebp+var_3C.ftLastAccessTime.dwHighDateTime]
.text:00000B2F                 mov     [edx+4], ecx
.text:00000B32
.text:00000B32 loc_B32:                                ; CODE XREF: CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+72j
.text:00000B32                 cmp     [ebp+arg_10], 0
.text:00000B36                 jz      short loc_B46
.text:00000B38                 mov     edx, [ebp+arg_10]
.text:00000B3B                 mov     eax, [ebp+var_3C.ftLastWriteTime.dwLowDateTime]
.text:00000B3E                 mov     [edx], eax
.text:00000B40                 mov     ecx, [ebp+var_3C.ftLastWriteTime.dwHighDateTime]
.text:00000B43                 mov     [edx+4], ecx
.text:00000B46
.text:00000B46 loc_B46:                                ; CODE XREF: CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+86j
.text:00000B46                 cmp     [ebp+arg_14], 0
.text:00000B4A                 jz      short loc_B54
.text:00000B4C                 mov     edx, [ebp+arg_14]
.text:00000B4F                 mov     eax, [ebp+var_3C.dwFileAttributes]
.text:00000B52                 mov     [edx], eax
.text:00000B54
.text:00000B54 loc_B54:                                ; CODE XREF: CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+9Aj
.text:00000B54                 xor     eax, eax
.text:00000B56                 jmp     short loc_B67
.text:00000B58 ; ---------------------------------------------------------------------------
.text:00000B58
.text:00000B58 loc_B58:                                ; CODE XREF: CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+35j
.text:00000B58                 mov     esi, esp
.text:00000B5A                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000B60                 cmp     esi, esp
.text:00000B62                 call    __RTC_CheckEsp
.text:00000B67
.text:00000B67 loc_B67:                                ; CODE XREF: CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+A6j
.text:00000B67                 push    edx
.text:00000B68                 mov     ecx, ebp
.text:00000B6A                 push    eax
.text:00000B6B                 lea     edx, $LN11
.text:00000B71                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000B76                 pop     eax
.text:00000B77                 pop     edx
.text:00000B78                 pop     edi
.text:00000B79                 pop     esi
.text:00000B7A                 mov     ecx, [ebp+var_4]
.text:00000B7D                 xor     ecx, ebp
.text:00000B7F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000B84                 add     esp, 40h
.text:00000B87                 cmp     ebp, esp
.text:00000B89                 call    __RTC_CheckEsp
.text:00000B8E                 mov     esp, ebp
.text:00000B90                 pop     ebp
.text:00000B91                 retn    18h
.text:00000B91 ?GetProps@CInFileStream@@UAGJPA_KPAU_FILETIME@@11PAI@Z endp
.text:00000B91
.text:00000B91 ; ---------------------------------------------------------------------------
.text:00000B94 $LN11           dd 1                    ; DATA XREF: CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+BBo
.text:00000B98                 dd offset $LN10
.text:00000B9C $LN10           dd 0FFFFFFC4h, 34h      ; DATA XREF: .text:00000B98o
.text:00000BA4                 dd offset $LN9          ; "info"
.text:00000BA8 $LN9            db 'info',0             ; DATA XREF: .text:00000BA4o
.text:00000BAD                 align 10h
.text:00000BB0
.text:00000BB0 ; =============== S U B R O U T I N E =======================================
.text:00000BB0
.text:00000BB0 ; Attributes: bp-based frame
.text:00000BB0
.text:00000BB0 ; __int32 __stdcall CInFileStream::GetProps2(CInFileStream *this, struct CStreamFileProps *)
.text:00000BB0                 public ?GetProps2@CInFileStream@@UAGJPAUCStreamFileProps@@@Z
.text:00000BB0 ?GetProps2@CInFileStream@@UAGJPAUCStreamFileProps@@@Z proc near
.text:00000BB0                                         ; DATA XREF: .rdata:000010FCo
.text:00000BB0
.text:00000BB0 var_44          = dword ptr -44h
.text:00000BB0 var_3C          = _BY_HANDLE_FILE_INFORMATION ptr -3Ch
.text:00000BB0 var_4           = dword ptr -4
.text:00000BB0 this            = dword ptr  8
.text:00000BB0 arg_4           = dword ptr  0Ch
.text:00000BB0
.text:00000BB0                 push    ebp
.text:00000BB1                 mov     ebp, esp
.text:00000BB3                 sub     esp, 44h
.text:00000BB6                 push    esi
.text:00000BB7                 push    edi
.text:00000BB8                 lea     edi, [ebp+var_44]
.text:00000BBB                 mov     ecx, 11h
.text:00000BC0                 mov     eax, 0CCCCCCCCh
.text:00000BC5                 rep stosd
.text:00000BC7                 mov     eax, dword ptr ds:___security_cookie
.text:00000BCC                 xor     eax, ebp
.text:00000BCE                 mov     [ebp+var_4], eax
.text:00000BD1                 lea     eax, [ebp+var_3C]
.text:00000BD4                 push    eax             ; struct _BY_HANDLE_FILE_INFORMATION *
.text:00000BD5                 mov     ecx, [ebp+this]
.text:00000BD8                 add     ecx, 0Ch        ; this
.text:00000BDB                 call    ?GetFileInformation@CFileBase@NIO@NFile@NWindows@@QBE_NPAU_BY_HANDLE_FILE_INFORMATION@@@Z ; NWindows::NFile::NIO::CFileBase::GetFileInformation(_BY_HANDLE_FILE_INFORMATION *)
.text:00000BE0                 movzx   ecx, al
.text:00000BE3                 test    ecx, ecx
.text:00000BE5                 jz      loc_CA2
.text:00000BEB                 mov     eax, [ebp+var_3C.nFileSizeHigh]
.text:00000BEE                 xor     edx, edx
.text:00000BF0                 mov     cl, 20h ; ' '
.text:00000BF2                 call    __allshl
.text:00000BF7                 mov     ecx, [ebp+var_3C.nFileSizeLow]
.text:00000BFA                 xor     esi, esi
.text:00000BFC                 add     eax, ecx
.text:00000BFE                 adc     edx, esi
.text:00000C00                 mov     ecx, [ebp+arg_4]
.text:00000C03                 mov     [ecx], eax
.text:00000C05                 mov     [ecx+4], edx
.text:00000C08                 mov     edx, [ebp+var_3C.dwVolumeSerialNumber]
.text:00000C0B                 xor     eax, eax
.text:00000C0D                 mov     ecx, [ebp+arg_4]
.text:00000C10                 mov     [ecx+8], edx
.text:00000C13                 mov     [ecx+0Ch], eax
.text:00000C16                 mov     eax, [ebp+var_3C.nFileIndexHigh]
.text:00000C19                 xor     edx, edx
.text:00000C1B                 mov     cl, 20h ; ' '
.text:00000C1D                 call    __allshl
.text:00000C22                 mov     ecx, [ebp+var_3C.nFileIndexLow]
.text:00000C25                 xor     esi, esi
.text:00000C27                 add     eax, ecx
.text:00000C29                 adc     edx, esi
.text:00000C2B                 mov     ecx, [ebp+arg_4]
.text:00000C2E                 mov     [ecx+10h], eax
.text:00000C31                 mov     [ecx+14h], edx
.text:00000C34                 mov     edx, [ebp+arg_4]
.text:00000C37                 mov     dword ptr [edx+18h], 0
.text:00000C3E                 mov     dword ptr [edx+1Ch], 0
.text:00000C45                 mov     eax, [ebp+this]
.text:00000C48                 movzx   ecx, byte ptr [eax+3Ch]
.text:00000C4C                 test    ecx, ecx
.text:00000C4E                 jz      short loc_C58
.text:00000C50                 mov     edx, [ebp+var_3C.nNumberOfLinks]
.text:00000C53                 mov     [ebp+var_44], edx
.text:00000C56                 jmp     short loc_C5F
.text:00000C58 ; ---------------------------------------------------------------------------
.text:00000C58
.text:00000C58 loc_C58:                                ; CODE XREF: CInFileStream::GetProps2(CStreamFileProps *)+9Ej
.text:00000C58                 mov     [ebp+var_44], 1
.text:00000C5F
.text:00000C5F loc_C5F:                                ; CODE XREF: CInFileStream::GetProps2(CStreamFileProps *)+A6j
.text:00000C5F                 mov     eax, [ebp+arg_4]
.text:00000C62                 mov     ecx, [ebp+var_44]
.text:00000C65                 mov     [eax+20h], ecx
.text:00000C68                 mov     edx, [ebp+arg_4]
.text:00000C6B                 mov     eax, [ebp+var_3C.dwFileAttributes]
.text:00000C6E                 mov     [edx+24h], eax
.text:00000C71                 mov     ecx, [ebp+arg_4]
.text:00000C74                 mov     edx, [ebp+var_3C.ftCreationTime.dwLowDateTime]
.text:00000C77                 mov     [ecx+28h], edx
.text:00000C7A                 mov     eax, [ebp+var_3C.ftCreationTime.dwHighDateTime]
.text:00000C7D                 mov     [ecx+2Ch], eax
.text:00000C80                 mov     ecx, [ebp+arg_4]
.text:00000C83                 mov     edx, [ebp+var_3C.ftLastAccessTime.dwLowDateTime]
.text:00000C86                 mov     [ecx+30h], edx
.text:00000C89                 mov     eax, [ebp+var_3C.ftLastAccessTime.dwHighDateTime]
.text:00000C8C                 mov     [ecx+34h], eax
.text:00000C8F                 mov     ecx, [ebp+arg_4]
.text:00000C92                 mov     edx, [ebp+var_3C.ftLastWriteTime.dwLowDateTime]
.text:00000C95                 mov     [ecx+38h], edx
.text:00000C98                 mov     eax, [ebp+var_3C.ftLastWriteTime.dwHighDateTime]
.text:00000C9B                 mov     [ecx+3Ch], eax
.text:00000C9E                 xor     eax, eax
.text:00000CA0                 jmp     short loc_CB1
.text:00000CA2 ; ---------------------------------------------------------------------------
.text:00000CA2
.text:00000CA2 loc_CA2:                                ; CODE XREF: CInFileStream::GetProps2(CStreamFileProps *)+35j
.text:00000CA2                 mov     esi, esp
.text:00000CA4                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000CAA                 cmp     esi, esp
.text:00000CAC                 call    __RTC_CheckEsp
.text:00000CB1
.text:00000CB1 loc_CB1:                                ; CODE XREF: CInFileStream::GetProps2(CStreamFileProps *)+F0j
.text:00000CB1                 push    edx
.text:00000CB2                 mov     ecx, ebp
.text:00000CB4                 push    eax
.text:00000CB5                 lea     edx, $LN8_0
.text:00000CBB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000CC0                 pop     eax
.text:00000CC1                 pop     edx
.text:00000CC2                 pop     edi
.text:00000CC3                 pop     esi
.text:00000CC4                 mov     ecx, [ebp+var_4]
.text:00000CC7                 xor     ecx, ebp
.text:00000CC9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000CCE                 add     esp, 44h
.text:00000CD1                 cmp     ebp, esp
.text:00000CD3                 call    __RTC_CheckEsp
.text:00000CD8                 mov     esp, ebp
.text:00000CDA                 pop     ebp
.text:00000CDB                 retn    8
.text:00000CDB ?GetProps2@CInFileStream@@UAGJPAUCStreamFileProps@@@Z endp
.text:00000CDB
.text:00000CDB ; ---------------------------------------------------------------------------
.text:00000CDE                 align 10h
.text:00000CE0 $LN8_0          dd 1                    ; DATA XREF: CInFileStream::GetProps2(CStreamFileProps *)+105o
.text:00000CE4                 dd offset $LN7_0
.text:00000CE8 $LN7_0          dd 0FFFFFFC4h, 34h      ; DATA XREF: .text:00000CE4o
.text:00000CF0                 dd offset $LN6_0        ; "info"
.text:00000CF4 $LN6_0          db 'info',0             ; DATA XREF: .text:00000CF0o
.text:00000CF9                 align 10h
.text:00000D00
.text:00000D00 ; =============== S U B R O U T I N E =======================================
.text:00000D00
.text:00000D00 ; Attributes: bp-based frame
.text:00000D00
.text:00000D00 ; __int32 __thiscall COutFileStream::Close(COutFileStream *__hidden this)
.text:00000D00                 public ?Close@COutFileStream@@QAEJXZ
.text:00000D00 ?Close@COutFileStream@@QAEJXZ proc near
.text:00000D00
.text:00000D00 var_4           = dword ptr -4
.text:00000D00
.text:00000D00                 push    ebp
.text:00000D01                 mov     ebp, esp
.text:00000D03                 push    ecx
.text:00000D04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D0B                 mov     [ebp+var_4], ecx
.text:00000D0E                 mov     ecx, [ebp+var_4]
.text:00000D11                 add     ecx, 8          ; this
.text:00000D14                 call    ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close(void)
.text:00000D19                 movzx   eax, al
.text:00000D1C                 push    eax
.text:00000D1D                 call    ?ConvertBoolToHRESULT@@YGJ_N@Z ; ConvertBoolToHRESULT(bool)
.text:00000D22                 add     esp, 4
.text:00000D25                 cmp     ebp, esp
.text:00000D27                 call    __RTC_CheckEsp
.text:00000D2C                 mov     esp, ebp
.text:00000D2E                 pop     ebp
.text:00000D2F                 retn
.text:00000D2F ?Close@COutFileStream@@QAEJXZ endp
.text:00000D2F
.text:00000D30
.text:00000D30 ; =============== S U B R O U T I N E =======================================
.text:00000D30
.text:00000D30 ; Attributes: bp-based frame
.text:00000D30
.text:00000D30 ; __int32 __stdcall COutFileStream::Write(COutFileStream *this, const void *, unsigned int, unsigned int *)
.text:00000D30                 public ?Write@COutFileStream@@UAGJPBXIPAI@Z
.text:00000D30 ?Write@COutFileStream@@UAGJPBXIPAI@Z proc near
.text:00000D30
.text:00000D30 var_10          = dword ptr -10h
.text:00000D30 var_C           = dword ptr -0Ch
.text:00000D30 var_8           = dword ptr -8
.text:00000D30 var_4           = dword ptr -4
.text:00000D30 this            = dword ptr  8
.text:00000D30 arg_4           = dword ptr  0Ch
.text:00000D30 arg_8           = dword ptr  10h
.text:00000D30 arg_C           = dword ptr  14h
.text:00000D30
.text:00000D30                 push    ebp
.text:00000D31                 mov     ebp, esp
.text:00000D33                 sub     esp, 10h
.text:00000D36                 mov     eax, 0CCCCCCCCh
.text:00000D3B                 mov     [ebp+var_10], eax
.text:00000D3E                 mov     [ebp+var_C], eax
.text:00000D41                 mov     [ebp+var_8], eax
.text:00000D44                 mov     [ebp+var_4], eax
.text:00000D47                 lea     eax, [ebp+var_8]
.text:00000D4A                 push    eax             ; unsigned int *
.text:00000D4B                 mov     ecx, [ebp+arg_8]
.text:00000D4E                 push    ecx             ; unsigned int
.text:00000D4F                 mov     edx, [ebp+arg_4]
.text:00000D52                 push    edx             ; void *
.text:00000D53                 mov     ecx, [ebp+this]
.text:00000D56                 add     ecx, 8          ; this
.text:00000D59                 call    ?Write@COutFile@NIO@NFile@NWindows@@QAE_NPBXIAAI@Z ; NWindows::NFile::NIO::COutFile::Write(void const *,uint,uint &)
.text:00000D5E                 mov     byte ptr [ebp+var_10+3], al
.text:00000D61                 mov     eax, [ebp+var_8]
.text:00000D64                 xor     ecx, ecx
.text:00000D66                 mov     edx, [ebp+this]
.text:00000D69                 add     eax, [edx+18h]
.text:00000D6C                 adc     ecx, [edx+1Ch]
.text:00000D6F                 mov     edx, [ebp+this]
.text:00000D72                 mov     [edx+18h], eax
.text:00000D75                 mov     [edx+1Ch], ecx
.text:00000D78                 cmp     [ebp+arg_C], 0
.text:00000D7C                 jz      short loc_D86
.text:00000D7E                 mov     eax, [ebp+arg_C]
.text:00000D81                 mov     ecx, [ebp+var_8]
.text:00000D84                 mov     [eax], ecx
.text:00000D86
.text:00000D86 loc_D86:                                ; CODE XREF: COutFileStream::Write(void const *,uint,uint *)+4Cj
.text:00000D86                 movzx   edx, byte ptr [ebp+var_10+3]
.text:00000D8A                 push    edx
.text:00000D8B                 call    ?ConvertBoolToHRESULT@@YGJ_N@Z ; ConvertBoolToHRESULT(bool)
.text:00000D90                 push    edx
.text:00000D91                 mov     ecx, ebp
.text:00000D93                 push    eax
.text:00000D94                 lea     edx, $LN6_1
.text:00000D9A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D9F                 pop     eax
.text:00000DA0                 pop     edx
.text:00000DA1                 add     esp, 10h
.text:00000DA4                 cmp     ebp, esp
.text:00000DA6                 call    __RTC_CheckEsp
.text:00000DAB                 mov     esp, ebp
.text:00000DAD                 pop     ebp
.text:00000DAE                 retn    10h
.text:00000DAE ?Write@COutFileStream@@UAGJPBXIPAI@Z endp
.text:00000DAE
.text:00000DAE ; ---------------------------------------------------------------------------
.text:00000DB1                 align 4
.text:00000DB4 $LN6_1          dd 1                    ; DATA XREF: COutFileStream::Write(void const *,uint,uint *)+64o
.text:00000DB8                 dd offset $LN5
.text:00000DBC $LN5            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000DB8o
.text:00000DC4                 dd offset $LN4          ; "realProcessedSize"
.text:00000DC8 $LN4            db 'realProcessedSize',0 ; DATA XREF: .text:00000DC4o
.text:00000DDA                 align 10h
.text:00000DE0
.text:00000DE0 ; =============== S U B R O U T I N E =======================================
.text:00000DE0
.text:00000DE0 ; Attributes: bp-based frame
.text:00000DE0
.text:00000DE0 ; __int32 __stdcall COutFileStream::Seek(COutFileStream *this, __int64, unsigned __int32, unsigned __int64 *)
.text:00000DE0                 public ?Seek@COutFileStream@@UAGJ_JIPA_K@Z
.text:00000DE0 ?Seek@COutFileStream@@UAGJ_JIPA_K@Z proc near
.text:00000DE0
.text:00000DE0 var_14          = dword ptr -14h
.text:00000DE0 var_10          = dword ptr -10h
.text:00000DE0 var_C           = qword ptr -0Ch
.text:00000DE0 var_4           = dword ptr -4
.text:00000DE0 this            = dword ptr  8
.text:00000DE0 arg_4           = qword ptr  0Ch
.text:00000DE0 arg_C           = dword ptr  14h
.text:00000DE0 arg_10          = dword ptr  18h
.text:00000DE0
.text:00000DE0                 push    ebp
.text:00000DE1                 mov     ebp, esp
.text:00000DE3                 sub     esp, 14h
.text:00000DE6                 mov     eax, 0CCCCCCCCh
.text:00000DEB                 mov     [ebp+var_14], eax
.text:00000DEE                 mov     [ebp+var_10], eax
.text:00000DF1                 mov     dword ptr [ebp+var_C], eax
.text:00000DF4                 mov     dword ptr [ebp+var_C+4], eax
.text:00000DF7                 mov     [ebp+var_4], eax
.text:00000DFA                 cmp     [ebp+arg_C], 3
.text:00000DFE                 jb      short loc_E07
.text:00000E00                 mov     eax, 80030001h
.text:00000E05                 jmp     short loc_E43
.text:00000E07 ; ---------------------------------------------------------------------------
.text:00000E07
.text:00000E07 loc_E07:                                ; CODE XREF: COutFileStream::Seek(__int64,uint,unsigned __int64 *)+1Ej
.text:00000E07                 lea     eax, [ebp+var_C]
.text:00000E0A                 push    eax             ; unsigned __int64 *
.text:00000E0B                 mov     ecx, [ebp+arg_C]
.text:00000E0E                 push    ecx             ; unsigned __int32
.text:00000E0F                 mov     edx, dword ptr [ebp+arg_4+4]
.text:00000E12                 push    edx
.text:00000E13                 mov     eax, dword ptr [ebp+arg_4]
.text:00000E16                 push    eax             ; __int64
.text:00000E17                 mov     ecx, [ebp+this]
.text:00000E1A                 add     ecx, 8          ; this
.text:00000E1D                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)
.text:00000E22                 mov     byte ptr [ebp+var_14+3], al
.text:00000E25                 cmp     [ebp+arg_10], 0
.text:00000E29                 jz      short loc_E39
.text:00000E2B                 mov     ecx, [ebp+arg_10]
.text:00000E2E                 mov     edx, dword ptr [ebp+var_C]
.text:00000E31                 mov     [ecx], edx
.text:00000E33                 mov     eax, dword ptr [ebp+var_C+4]
.text:00000E36                 mov     [ecx+4], eax
.text:00000E39
.text:00000E39 loc_E39:                                ; CODE XREF: COutFileStream::Seek(__int64,uint,unsigned __int64 *)+49j
.text:00000E39                 movzx   ecx, byte ptr [ebp+var_14+3]
.text:00000E3D                 push    ecx
.text:00000E3E                 call    ?ConvertBoolToHRESULT@@YGJ_N@Z ; ConvertBoolToHRESULT(bool)
.text:00000E43
.text:00000E43 loc_E43:                                ; CODE XREF: COutFileStream::Seek(__int64,uint,unsigned __int64 *)+25j
.text:00000E43                 push    edx
.text:00000E44                 mov     ecx, ebp
.text:00000E46                 push    eax
.text:00000E47                 lea     edx, $LN7_1
.text:00000E4D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000E52                 pop     eax
.text:00000E53                 pop     edx
.text:00000E54                 add     esp, 14h
.text:00000E57                 cmp     ebp, esp
.text:00000E59                 call    __RTC_CheckEsp
.text:00000E5E                 mov     esp, ebp
.text:00000E60                 pop     ebp
.text:00000E61                 retn    14h
.text:00000E61 ?Seek@COutFileStream@@UAGJ_JIPA_K@Z endp
.text:00000E61
.text:00000E61 ; ---------------------------------------------------------------------------
.text:00000E64 $LN7_1          dd 1                    ; DATA XREF: COutFileStream::Seek(__int64,uint,unsigned __int64 *)+67o
.text:00000E68                 dd offset $LN6_2
.text:00000E6C $LN6_2          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00000E68o
.text:00000E74                 dd offset $LN5_0        ; "realNewPosition"
.text:00000E78 $LN5_0          db 'realNewPosition',0  ; DATA XREF: .text:00000E74o
.text:00000E88                 align 10h
.text:00000E90
.text:00000E90 ; =============== S U B R O U T I N E =======================================
.text:00000E90
.text:00000E90 ; Attributes: bp-based frame
.text:00000E90
.text:00000E90 ; __int32 __stdcall COutFileStream::SetSize(COutFileStream *this, unsigned __int64)
.text:00000E90                 public ?SetSize@COutFileStream@@UAGJ_K@Z
.text:00000E90 ?SetSize@COutFileStream@@UAGJ_K@Z proc near
.text:00000E90
.text:00000E90 var_28          = dword ptr -28h
.text:00000E90 var_20          = qword ptr -20h
.text:00000E90 var_11          = byte ptr -11h
.text:00000E90 var_C           = qword ptr -0Ch
.text:00000E90 this            = dword ptr  8
.text:00000E90 arg_4           = qword ptr  0Ch
.text:00000E90
.text:00000E90                 push    ebp
.text:00000E91                 mov     ebp, esp
.text:00000E93                 sub     esp, 28h
.text:00000E96                 push    edi
.text:00000E97                 lea     edi, [ebp+var_28]
.text:00000E9A                 mov     ecx, 0Ah
.text:00000E9F                 mov     eax, 0CCCCCCCCh
.text:00000EA4                 rep stosd
.text:00000EA6                 lea     eax, [ebp+var_C]
.text:00000EA9                 push    eax             ; unsigned __int64 *
.text:00000EAA                 push    1               ; unsigned __int32
.text:00000EAC                 push    0
.text:00000EAE                 push    0               ; __int64
.text:00000EB0                 mov     ecx, [ebp+this]
.text:00000EB3                 add     ecx, 8          ; this
.text:00000EB6                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)
.text:00000EBB                 movzx   ecx, al
.text:00000EBE                 test    ecx, ecx
.text:00000EC0                 jnz     short loc_EC9
.text:00000EC2                 mov     eax, 80004005h
.text:00000EC7                 jmp     short loc_F2D
.text:00000EC9 ; ---------------------------------------------------------------------------
.text:00000EC9
.text:00000EC9 loc_EC9:                                ; CODE XREF: COutFileStream::SetSize(unsigned __int64)+30j
.text:00000EC9                 mov     edx, dword ptr [ebp+arg_4+4]
.text:00000ECC                 push    edx
.text:00000ECD                 mov     eax, dword ptr [ebp+arg_4]
.text:00000ED0                 push    eax             ; unsigned __int64
.text:00000ED1                 mov     ecx, [ebp+this]
.text:00000ED4                 add     ecx, 8          ; this
.text:00000ED7                 call    ?SetLength@COutFile@NIO@NFile@NWindows@@QAE_N_K@Z ; NWindows::NFile::NIO::COutFile::SetLength(unsigned __int64)
.text:00000EDC                 mov     [ebp+var_11], al
.text:00000EDF                 movzx   ecx, [ebp+var_11]
.text:00000EE3                 test    ecx, ecx
.text:00000EE5                 jz      short loc_F0E
.text:00000EE7                 lea     edx, [ebp+var_20]
.text:00000EEA                 push    edx             ; unsigned __int64 *
.text:00000EEB                 mov     eax, dword ptr [ebp+var_C+4]
.text:00000EEE                 push    eax
.text:00000EEF                 mov     ecx, dword ptr [ebp+var_C]
.text:00000EF2                 push    ecx             ; unsigned __int64
.text:00000EF3                 mov     ecx, [ebp+this]
.text:00000EF6                 add     ecx, 8          ; this
.text:00000EF9                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_KAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(unsigned __int64,unsigned __int64 &)
.text:00000EFE                 movzx   edx, al
.text:00000F01                 test    edx, edx
.text:00000F03                 jz      short loc_F0E
.text:00000F05                 mov     [ebp+var_28], 1
.text:00000F0C                 jmp     short loc_F15
.text:00000F0E ; ---------------------------------------------------------------------------
.text:00000F0E
.text:00000F0E loc_F0E:                                ; CODE XREF: COutFileStream::SetSize(unsigned __int64)+55j
.text:00000F0E                                         ; COutFileStream::SetSize(unsigned __int64)+73j
.text:00000F0E                 mov     [ebp+var_28], 0
.text:00000F15
.text:00000F15 loc_F15:                                ; CODE XREF: COutFileStream::SetSize(unsigned __int64)+7Cj
.text:00000F15                 mov     al, byte ptr [ebp+var_28]
.text:00000F18                 mov     [ebp+var_11], al
.text:00000F1B                 movzx   eax, [ebp+var_11]
.text:00000F1F                 neg     eax
.text:00000F21                 sbb     eax, eax
.text:00000F23                 and     eax, 7FFFBFFBh
.text:00000F28                 add     eax, 80004005h
.text:00000F2D
.text:00000F2D loc_F2D:                                ; CODE XREF: COutFileStream::SetSize(unsigned __int64)+37j
.text:00000F2D                 push    edx
.text:00000F2E                 mov     ecx, ebp
.text:00000F30                 push    eax
.text:00000F31                 lea     edx, $LN9_0
.text:00000F37                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F3C                 pop     eax
.text:00000F3D                 pop     edx
.text:00000F3E                 pop     edi
.text:00000F3F                 add     esp, 28h
.text:00000F42                 cmp     ebp, esp
.text:00000F44                 call    __RTC_CheckEsp
.text:00000F49                 mov     esp, ebp
.text:00000F4B                 pop     ebp
.text:00000F4C                 retn    0Ch
.text:00000F4C ?SetSize@COutFileStream@@UAGJ_K@Z endp
.text:00000F4C
.text:00000F4C ; ---------------------------------------------------------------------------
.text:00000F4F                 align 10h
.text:00000F50 $LN9_0          dd 2                    ; DATA XREF: COutFileStream::SetSize(unsigned __int64)+A1o
.text:00000F54                 dd offset $LN8_1
.text:00000F58 $LN8_1          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00000F54o
.text:00000F60                 dd offset $LN6_3        ; "currentPos"
.text:00000F64                 dd 0FFFFFFE0h, 8
.text:00000F6C                 dd offset $LN7_2        ; "currentPos2"
.text:00000F70 $LN7_2          db 'currentPos2',0      ; DATA XREF: .text:00000F6Co
.text:00000F7C $LN6_3          db 'currentPos',0       ; DATA XREF: .text:00000F60o
.text:00000F87                 align 10h
.text:00000F90
.text:00000F90 ; =============== S U B R O U T I N E =======================================
.text:00000F90
.text:00000F90 ; Attributes: bp-based frame
.text:00000F90
.text:00000F90 ; __int32 __thiscall COutFileStream::GetSize(COutFileStream *this, unsigned __int64 *)
.text:00000F90                 public ?GetSize@COutFileStream@@QAEJPA_K@Z
.text:00000F90 ?GetSize@COutFileStream@@QAEJPA_K@Z proc near
.text:00000F90
.text:00000F90 var_4           = dword ptr -4
.text:00000F90 arg_0           = dword ptr  8
.text:00000F90
.text:00000F90                 push    ebp
.text:00000F91                 mov     ebp, esp
.text:00000F93                 push    ecx
.text:00000F94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F9B                 mov     [ebp+var_4], ecx
.text:00000F9E                 mov     eax, [ebp+arg_0]
.text:00000FA1                 push    eax             ; unsigned __int64 *
.text:00000FA2                 mov     ecx, [ebp+var_4]
.text:00000FA5                 add     ecx, 8          ; this
.text:00000FA8                 call    ?GetLength@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z ; NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)
.text:00000FAD                 movzx   ecx, al
.text:00000FB0                 push    ecx
.text:00000FB1                 call    ?ConvertBoolToHRESULT@@YGJ_N@Z ; ConvertBoolToHRESULT(bool)
.text:00000FB6                 add     esp, 4
.text:00000FB9                 cmp     ebp, esp
.text:00000FBB                 call    __RTC_CheckEsp
.text:00000FC0                 mov     esp, ebp
.text:00000FC2                 pop     ebp
.text:00000FC3                 retn    4
.text:00000FC3 ?GetSize@COutFileStream@@QAEJPA_K@Z endp
.text:00000FC3
.text:00000FC3 ; ---------------------------------------------------------------------------
.text:00000FC6                 align 10h
.text:00000FD0
.text:00000FD0 ; =============== S U B R O U T I N E =======================================
.text:00000FD0
.text:00000FD0 ; Attributes: bp-based frame
.text:00000FD0
.text:00000FD0 ; __int32 __stdcall CStdOutFileStream::Write(CStdOutFileStream *this, LPCVOID lpBuffer, unsigned int, unsigned int *)
.text:00000FD0                 public ?Write@CStdOutFileStream@@UAGJPBXIPAI@Z
.text:00000FD0 ?Write@CStdOutFileStream@@UAGJPBXIPAI@Z proc near
.text:00000FD0
.text:00000FD0 nNumberOfBytesToWrite= dword ptr -14h
.text:00000FD0 var_10          = dword ptr -10h
.text:00000FD0 var_C           = dword ptr -0Ch
.text:00000FD0 NumberOfBytesWritten= dword ptr -8
.text:00000FD0 var_4           = dword ptr -4
.text:00000FD0 this            = dword ptr  8
.text:00000FD0 lpBuffer        = dword ptr  0Ch
.text:00000FD0 arg_8           = dword ptr  10h
.text:00000FD0 arg_C           = dword ptr  14h
.text:00000FD0
.text:00000FD0                 push    ebp
.text:00000FD1                 mov     ebp, esp
.text:00000FD3                 sub     esp, 14h
.text:00000FD6                 push    esi
.text:00000FD7                 push    edi
.text:00000FD8                 mov     eax, 0CCCCCCCCh
.text:00000FDD                 mov     [ebp+nNumberOfBytesToWrite], eax
.text:00000FE0                 mov     [ebp+var_10], eax
.text:00000FE3                 mov     [ebp+var_C], eax
.text:00000FE6                 mov     [ebp+NumberOfBytesWritten], eax
.text:00000FE9                 mov     [ebp+var_4], eax
.text:00000FEC                 cmp     [ebp+arg_C], 0
.text:00000FF0                 jz      short loc_FFB
.text:00000FF2                 mov     eax, [ebp+arg_C]
.text:00000FF5                 mov     dword ptr [eax], 0
.text:00000FFB
.text:00000FFB loc_FFB:                                ; CODE XREF: CStdOutFileStream::Write(void const *,uint,uint *)+20j
.text:00000FFB                 mov     [ebp+var_10], 1
.text:00001002                 cmp     [ebp+arg_8], 0
.text:00001006                 jbe     loc_108F
.text:0000100C                 mov     [ebp+nNumberOfBytesToWrite], 8000h
.text:00001013                 mov     ecx, [ebp+nNumberOfBytesToWrite]
.text:00001016                 cmp     ecx, [ebp+arg_8]
.text:00001019                 jbe     short loc_1021
.text:0000101B                 mov     edx, [ebp+arg_8]
.text:0000101E                 mov     [ebp+nNumberOfBytesToWrite], edx
.text:00001021
.text:00001021 loc_1021:                               ; CODE XREF: CStdOutFileStream::Write(void const *,uint,uint *)+49j
.text:00001021                 mov     esi, esp
.text:00001023                 push    0               ; lpOverlapped
.text:00001025                 lea     eax, [ebp+NumberOfBytesWritten]
.text:00001028                 push    eax             ; lpNumberOfBytesWritten
.text:00001029                 mov     ecx, [ebp+nNumberOfBytesToWrite]
.text:0000102C                 push    ecx             ; nNumberOfBytesToWrite
.text:0000102D                 mov     edx, [ebp+lpBuffer]
.text:00001030                 push    edx             ; lpBuffer
.text:00001031                 mov     edi, esp
.text:00001033                 push    0FFFFFFF5h      ; nStdHandle
.text:00001035                 call    dword ptr ds:__imp__GetStdHandle@4 ; GetStdHandle(x)
.text:0000103B                 cmp     edi, esp
.text:0000103D                 call    __RTC_CheckEsp
.text:00001042                 push    eax             ; hFile
.text:00001043                 call    dword ptr ds:__imp__WriteFile@20 ; WriteFile(x,x,x,x,x)
.text:00001049                 cmp     esi, esp
.text:0000104B                 call    __RTC_CheckEsp
.text:00001050                 mov     [ebp+var_10], eax
.text:00001053                 mov     eax, [ebp+NumberOfBytesWritten]
.text:00001056                 xor     ecx, ecx
.text:00001058                 mov     edx, [ebp+this]
.text:0000105B                 add     eax, [edx+8]
.text:0000105E                 adc     ecx, [edx+0Ch]
.text:00001061                 mov     edx, [ebp+this]
.text:00001064                 mov     [edx+8], eax
.text:00001067                 mov     [edx+0Ch], ecx
.text:0000106A                 mov     eax, [ebp+arg_8]
.text:0000106D                 sub     eax, [ebp+NumberOfBytesWritten]
.text:00001070                 mov     [ebp+arg_8], eax
.text:00001073                 mov     ecx, [ebp+lpBuffer]
.text:00001076                 add     ecx, [ebp+NumberOfBytesWritten]
.text:00001079                 mov     [ebp+lpBuffer], ecx
.text:0000107C                 cmp     [ebp+arg_C], 0
.text:00001080                 jz      short loc_108F
.text:00001082                 mov     edx, [ebp+arg_C]
.text:00001085                 mov     eax, [edx]
.text:00001087                 add     eax, [ebp+NumberOfBytesWritten]
.text:0000108A                 mov     ecx, [ebp+arg_C]
.text:0000108D                 mov     [ecx], eax
.text:0000108F
.text:0000108F loc_108F:                               ; CODE XREF: CStdOutFileStream::Write(void const *,uint,uint *)+36j
.text:0000108F                                         ; CStdOutFileStream::Write(void const *,uint,uint *)+B0j
.text:0000108F                 cmp     [ebp+var_10], 0
.text:00001093                 setnz   dl
.text:00001096                 movzx   eax, dl
.text:00001099                 push    eax
.text:0000109A                 call    ?ConvertBoolToHRESULT@@YGJ_N@Z ; ConvertBoolToHRESULT(bool)
.text:0000109F                 push    edx
.text:000010A0                 mov     ecx, ebp
.text:000010A2                 push    eax
.text:000010A3                 lea     edx, $LN9_1
.text:000010A9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000010AE                 pop     eax
.text:000010AF                 pop     edx
.text:000010B0                 pop     edi
.text:000010B1                 pop     esi
.text:000010B2                 add     esp, 14h
.text:000010B5                 cmp     ebp, esp
.text:000010B7                 call    __RTC_CheckEsp
.text:000010BC                 mov     esp, ebp
.text:000010BE                 pop     ebp
.text:000010BF                 retn    10h
.text:000010BF ?Write@CStdOutFileStream@@UAGJPBXIPAI@Z endp
.text:000010BF
.text:000010BF ; ---------------------------------------------------------------------------
.text:000010C2                 align 4
.text:000010C4 $LN9_1          dd 1                    ; DATA XREF: CStdOutFileStream::Write(void const *,uint,uint *)+D3o
.text:000010C8                 dd offset $LN8_2
.text:000010CC $LN8_2          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000010C8o
.text:000010D4                 dd offset $LN7_3        ; "realProcessedSize"
.text:000010D8 $LN7_3          db 'realProcessedSize',0 ; DATA XREF: .text:000010D4o
.text:000010EA                 align 4
.text:000010EA _text           ends
.text:000010EA
.rdata:000010EC ; ===========================================================================
.rdata:000010EC
.rdata:000010EC ; Segment type: Pure data
.rdata:000010EC ; Segment permissions: Read
.rdata:000010EC _rdata          segment dword public 'DATA' use32
.rdata:000010EC                 assume cs:_rdata
.rdata:000010EC                 ;org 10ECh
.rdata:000010EC ; COMDAT (pick largest)
.rdata:000010EC                 dd offset ??_R4CInFileStream@@6BIStreamGetProps2@@@ ; const CInFileStream::`RTTI Complete Object Locator'{for `IStreamGetProps2'}
.rdata:000010F0                 public ??_7CInFileStream@@6BIStreamGetProps2@@@
.rdata:000010F0 ; const CInFileStream::`vftable'{for `IStreamGetProps2'}
.rdata:000010F0 ??_7CInFileStream@@6BIStreamGetProps2@@@ dd offset ?QueryInterface@CInFileStream@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:000010F0                                         ; DATA XREF: CInFileStream::CInFileStream(void)+62o
.rdata:000010F0                                         ; CInFileStream::~CInFileStream(void)+4Eo
.rdata:000010F0                                         ; [thunk]:CInFileStream::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:000010F4                 dd offset ?AddRef@CInFileStream@@WM@AGKXZ ; [thunk]:CInFileStream::AddRef`adjustor{12}' (void)
.rdata:000010F8                 dd offset ?Release@CInFileStream@@WM@AGKXZ ; [thunk]:CInFileStream::Release`adjustor{12}' (void)
.rdata:000010FC                 dd offset ?GetProps2@CInFileStream@@UAGJPAUCStreamFileProps@@@Z ; CInFileStream::GetProps2(CStreamFileProps *)
.rdata:000010FC _rdata          ends
.rdata:000010FC
.rdata:00001100 ; ===========================================================================
.rdata:00001100
.rdata:00001100 ; Segment type: Pure data
.rdata:00001100 ; Segment permissions: Read
.rdata:00001100 _rdata          segment dword public 'DATA' use32
.rdata:00001100                 assume cs:_rdata
.rdata:00001100                 ;org 1100h
.rdata:00001100 ; COMDAT (pick largest)
.rdata:00001100                 dd offset ??_R4CInFileStream@@6BIStreamGetProps@@@ ; const CInFileStream::`RTTI Complete Object Locator'{for `IStreamGetProps'}
.rdata:00001104                 public ??_7CInFileStream@@6BIStreamGetProps@@@
.rdata:00001104 ; const CInFileStream::`vftable'{for `IStreamGetProps'}
.rdata:00001104 ??_7CInFileStream@@6BIStreamGetProps@@@ dd offset ?QueryInterface@CInFileStream@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00001104                                         ; DATA XREF: CInFileStream::CInFileStream(void)+58o
.rdata:00001104                                         ; CInFileStream::~CInFileStream(void)+44o
.rdata:00001104                                         ; [thunk]:CInFileStream::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00001108                 dd offset ?AddRef@CInFileStream@@W7AGKXZ ; [thunk]:CInFileStream::AddRef`adjustor{8}' (void)
.rdata:0000110C                 dd offset ?Release@CInFileStream@@W7AGKXZ ; [thunk]:CInFileStream::Release`adjustor{8}' (void)
.rdata:00001110                 dd offset ?GetProps@CInFileStream@@UAGJPA_KPAU_FILETIME@@11PAI@Z ; CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)
.rdata:00001110 _rdata          ends
.rdata:00001110
.rdata:00001114 ; ===========================================================================
.rdata:00001114
.rdata:00001114 ; Segment type: Pure data
.rdata:00001114 ; Segment permissions: Read
.rdata:00001114 _rdata          segment dword public 'DATA' use32
.rdata:00001114                 assume cs:_rdata
.rdata:00001114                 ;org 1114h
.rdata:00001114 ; COMDAT (pick largest)
.rdata:00001114                 dd offset ??_R4CInFileStream@@6BIStreamGetSize@@@ ; const CInFileStream::`RTTI Complete Object Locator'{for `IStreamGetSize'}
.rdata:00001118                 public ??_7CInFileStream@@6BIStreamGetSize@@@
.rdata:00001118 ; const CInFileStream::`vftable'{for `IStreamGetSize'}
.rdata:00001118 ??_7CInFileStream@@6BIStreamGetSize@@@ dd offset ?QueryInterface@CInFileStream@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00001118                                         ; DATA XREF: CInFileStream::CInFileStream(void)+4Eo
.rdata:00001118                                         ; CInFileStream::~CInFileStream(void)+3Ao
.rdata:00001118                                         ; [thunk]:CInFileStream::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000111C                 dd offset ?AddRef@CInFileStream@@W3AGKXZ ; [thunk]:CInFileStream::AddRef`adjustor{4}' (void)
.rdata:00001120                 dd offset ?Release@CInFileStream@@W3AGKXZ ; [thunk]:CInFileStream::Release`adjustor{4}' (void)
.rdata:00001124                 dd offset ?GetSize@CInFileStream@@UAGJPA_K@Z ; CInFileStream::GetSize(unsigned __int64 *)
.rdata:00001124 _rdata          ends
.rdata:00001124
.rdata:00001128 ; ===========================================================================
.rdata:00001128
.rdata:00001128 ; Segment type: Pure data
.rdata:00001128 ; Segment permissions: Read
.rdata:00001128 _rdata          segment dword public 'DATA' use32
.rdata:00001128                 assume cs:_rdata
.rdata:00001128                 ;org 1128h
.rdata:00001128 ; COMDAT (pick largest)
.rdata:00001128                 dd offset ??_R4CInFileStream@@6BIInStream@@@ ; const CInFileStream::`RTTI Complete Object Locator'{for `IInStream'}
.rdata:0000112C                 public ??_7CInFileStream@@6BIInStream@@@
.rdata:0000112C ; const CInFileStream::`vftable'{for `IInStream'}
.rdata:0000112C ??_7CInFileStream@@6BIInStream@@@ dd offset ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000112C                                         ; DATA XREF: CInFileStream::CInFileStream(void)+45o
.rdata:0000112C                                         ; CInFileStream::~CInFileStream(void)+31o
.rdata:0000112C                                         ; CInFileStream::QueryInterface(_GUID const &,void * *)
.rdata:00001130                 dd offset ?AddRef@CInFileStream@@UAGKXZ ; CInFileStream::AddRef(void)
.rdata:00001134                 dd offset ?Release@CInFileStream@@UAGKXZ ; CInFileStream::Release(void)
.rdata:00001138                 dd offset ?Read@CInFileStream@@UAGJPAXIPAI@Z ; CInFileStream::Read(void *,uint,uint *)
.rdata:0000113C                 dd offset ?Seek@CInFileStream@@UAGJ_JIPA_K@Z ; CInFileStream::Seek(__int64,uint,unsigned __int64 *)
.rdata:00001140                 dd offset ??_ECInFileStream@@UAEPAXI@Z ; CInFileStream::`vector deleting destructor'(uint)
.rdata:00001140 _rdata          ends
.rdata:00001140
.rtc$TMZ:00001144 ; ===========================================================================
.rtc$TMZ:00001144
.rtc$TMZ:00001144 ; Segment type: Pure data
.rtc$TMZ:00001144 ; Segment permissions: Read
.rtc$TMZ:00001144 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001144                 assume cs:_rtc$TMZ
.rtc$TMZ:00001144                 ;org 1144h
.rtc$TMZ:00001144 ; COMDAT (pick any)
.rtc$TMZ:00001144 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001144 _rtc$TMZ        ends
.rtc$TMZ:00001144
.rtc$IMZ:00001148 ; ===========================================================================
.rtc$IMZ:00001148
.rtc$IMZ:00001148 ; Segment type: Pure data
.rtc$IMZ:00001148 ; Segment permissions: Read
.rtc$IMZ:00001148 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001148                 assume cs:_rtc$IMZ
.rtc$IMZ:00001148                 ;org 1148h
.rtc$IMZ:00001148 ; COMDAT (pick any)
.rtc$IMZ:00001148 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001148 _rtc$IMZ        ends
.rtc$IMZ:00001148
.rdata$r:0000114C ; ===========================================================================
.rdata$r:0000114C
.rdata$r:0000114C ; Segment type: Pure data
.rdata$r:0000114C ; Segment permissions: Read
.rdata$r:0000114C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000114C                 assume cs:_rdata$r
.rdata$r:0000114C                 ;org 114Ch
.rdata$r:0000114C ; COMDAT (pick any)
.rdata$r:0000114C                 public ??_R4CInFileStream@@6BIInStream@@@
.rdata$r:0000114C ; const CInFileStream::`RTTI Complete Object Locator'{for `IInStream'}
.rdata$r:0000114C ??_R4CInFileStream@@6BIInStream@@@ db    0 ; DATA XREF: .rdata:00001128o
.rdata$r:0000114D                 db    0
.rdata$r:0000114E                 db    0
.rdata$r:0000114F                 db    0
.rdata$r:00001150                 db    0
.rdata$r:00001151                 db    0
.rdata$r:00001152                 db    0
.rdata$r:00001153                 db    0
.rdata$r:00001154                 db    0
.rdata$r:00001155                 db    0
.rdata$r:00001156                 db    0
.rdata$r:00001157                 db    0
.rdata$r:00001158                 dd offset ??_R0?AVCInFileStream@@@8 ; CInFileStream `RTTI Type Descriptor'
.rdata$r:0000115C                 dd offset ??_R3CInFileStream@@8 ; CInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000115C _rdata$r        ends
.rdata$r:0000115C
.data:00001160 ; ===========================================================================
.data:00001160
.data:00001160 ; Segment type: Pure data
.data:00001160 ; Segment permissions: Read/Write
.data:00001160 _data           segment dword public 'DATA' use32
.data:00001160                 assume cs:_data
.data:00001160                 ;org 1160h
.data:00001160 ; COMDAT (pick any)
.data:00001160                 public ??_R0?AVCInFileStream@@@8
.data:00001160 ; class CInFileStream `RTTI Type Descriptor'
.data:00001160 ??_R0?AVCInFileStream@@@8 dd offset ??_7type_info@@6B@
.data:00001160                                         ; DATA XREF: .rdata$r:00001158o
.data:00001160                                         ; .rdata$r:CInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001160                                         ; const type_info::`vftable'
.data:00001164                 align 8
.data:00001168 a_?avcinfilestr db '.?AVCInFileStream@@',0
.data:00001168 _data           ends
.data:00001168
.rdata$r:0000117C ; ===========================================================================
.rdata$r:0000117C
.rdata$r:0000117C ; Segment type: Pure data
.rdata$r:0000117C ; Segment permissions: Read
.rdata$r:0000117C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000117C                 assume cs:_rdata$r
.rdata$r:0000117C                 ;org 117Ch
.rdata$r:0000117C ; COMDAT (pick any)
.rdata$r:0000117C                 public ??_R3CInFileStream@@8
.rdata$r:0000117C ; CInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000117C ??_R3CInFileStream@@8 db    0           ; DATA XREF: .rdata$r:0000115Co
.rdata$r:0000117C                                         ; .rdata$r:000011D4o ...
.rdata$r:0000117D                 db    0
.rdata$r:0000117E                 db    0
.rdata$r:0000117F                 db    0
.rdata$r:00001180                 db    5
.rdata$r:00001181                 db    0
.rdata$r:00001182                 db    0
.rdata$r:00001183                 db    0
.rdata$r:00001184                 db  0Bh
.rdata$r:00001185                 db    0
.rdata$r:00001186                 db    0
.rdata$r:00001187                 db    0
.rdata$r:00001188                 dd offset ??_R2CInFileStream@@8 ; CInFileStream::`RTTI Base Class Array'
.rdata$r:00001188 _rdata$r        ends
.rdata$r:00001188
.rdata$r:0000118C ; ===========================================================================
.rdata$r:0000118C
.rdata$r:0000118C ; Segment type: Pure data
.rdata$r:0000118C ; Segment permissions: Read
.rdata$r:0000118C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000118C                 assume cs:_rdata$r
.rdata$r:0000118C                 ;org 118Ch
.rdata$r:0000118C ; COMDAT (pick any)
.rdata$r:0000118C                 public ??_R2CInFileStream@@8
.rdata$r:0000118C ; CInFileStream::`RTTI Base Class Array'
.rdata$r:0000118C ??_R2CInFileStream@@8 dd offset ??_R1A@?0A@EA@CInFileStream@@8
.rdata$r:0000118C                                         ; DATA XREF: .rdata$r:00001188o
.rdata$r:0000118C                                         ; CInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001190                 dd offset ??_R1A@?0A@EA@IInStream@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001194                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001198                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000119C                 dd offset ??_R13?0A@EA@IStreamGetSize@@8 ; IStreamGetSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000011A0                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000011A4                 dd offset ??_R17?0A@EA@IStreamGetProps@@8 ; IStreamGetProps::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000011A8                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000011AC                 dd offset ??_R1M@?0A@EA@IStreamGetProps2@@8 ; IStreamGetProps2::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:000011B0                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:000011B4                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:000011B8                 db    0
.rdata$r:000011B9                 align 4
.rdata$r:000011B9 _rdata$r        ends
.rdata$r:000011B9
.rdata$r:000011BC ; ===========================================================================
.rdata$r:000011BC
.rdata$r:000011BC ; Segment type: Pure data
.rdata$r:000011BC ; Segment permissions: Read
.rdata$r:000011BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011BC                 assume cs:_rdata$r
.rdata$r:000011BC                 ;org 11BCh
.rdata$r:000011BC ; COMDAT (pick any)
.rdata$r:000011BC                 public ??_R1A@?0A@EA@CInFileStream@@8
.rdata$r:000011BC ; CInFileStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000011BC ??_R1A@?0A@EA@CInFileStream@@8 dd offset ??_R0?AVCInFileStream@@@8
.rdata$r:000011BC                                         ; DATA XREF: .rdata$r:CInFileStream::`RTTI Base Class Array'o
.rdata$r:000011BC                                         ; CInFileStream `RTTI Type Descriptor'
.rdata$r:000011C0                 db  0Ah
.rdata$r:000011C1                 db    0
.rdata$r:000011C2                 db    0
.rdata$r:000011C3                 db    0
.rdata$r:000011C4                 db    0
.rdata$r:000011C5                 db    0
.rdata$r:000011C6                 db    0
.rdata$r:000011C7                 db    0
.rdata$r:000011C8                 db 0FFh
.rdata$r:000011C9                 db 0FFh
.rdata$r:000011CA                 db 0FFh
.rdata$r:000011CB                 db 0FFh
.rdata$r:000011CC                 db    0
.rdata$r:000011CD                 db    0
.rdata$r:000011CE                 db    0
.rdata$r:000011CF                 db    0
.rdata$r:000011D0                 db  40h ; @
.rdata$r:000011D1                 db    0
.rdata$r:000011D2                 db    0
.rdata$r:000011D3                 db    0
.rdata$r:000011D4                 dd offset ??_R3CInFileStream@@8 ; CInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011D4 _rdata$r        ends
.rdata$r:000011D4
.rdata$r:000011D8 ; ===========================================================================
.rdata$r:000011D8
.rdata$r:000011D8 ; Segment type: Pure data
.rdata$r:000011D8 ; Segment permissions: Read
.rdata$r:000011D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011D8                 assume cs:_rdata$r
.rdata$r:000011D8                 ;org 11D8h
.rdata$r:000011D8 ; COMDAT (pick any)
.rdata$r:000011D8                 public ??_R1A@?0A@EA@IInStream@@8
.rdata$r:000011D8 ; IInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000011D8 ??_R1A@?0A@EA@IInStream@@8 dd offset ??_R0?AUIInStream@@@8
.rdata$r:000011D8                                         ; DATA XREF: .rdata$r:00001190o
.rdata$r:000011D8                                         ; .rdata$r:IInStream::`RTTI Base Class Array'o
.rdata$r:000011D8                                         ; IInStream `RTTI Type Descriptor'
.rdata$r:000011DC                 db    2
.rdata$r:000011DD                 db    0
.rdata$r:000011DE                 db    0
.rdata$r:000011DF                 db    0
.rdata$r:000011E0                 db    0
.rdata$r:000011E1                 db    0
.rdata$r:000011E2                 db    0
.rdata$r:000011E3                 db    0
.rdata$r:000011E4                 db 0FFh
.rdata$r:000011E5                 db 0FFh
.rdata$r:000011E6                 db 0FFh
.rdata$r:000011E7                 db 0FFh
.rdata$r:000011E8                 db    0
.rdata$r:000011E9                 db    0
.rdata$r:000011EA                 db    0
.rdata$r:000011EB                 db    0
.rdata$r:000011EC                 db  40h ; @
.rdata$r:000011ED                 db    0
.rdata$r:000011EE                 db    0
.rdata$r:000011EF                 db    0
.rdata$r:000011F0                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011F0 _rdata$r        ends
.rdata$r:000011F0
.data:000011F4 ; ===========================================================================
.data:000011F4
.data:000011F4 ; Segment type: Pure data
.data:000011F4 ; Segment permissions: Read/Write
.data:000011F4 _data           segment dword public 'DATA' use32
.data:000011F4                 assume cs:_data
.data:000011F4                 ;org 11F4h
.data:000011F4 ; COMDAT (pick any)
.data:000011F4                 public ??_R0?AUIInStream@@@8
.data:000011F4 ; struct IInStream `RTTI Type Descriptor'
.data:000011F4 ??_R0?AUIInStream@@@8 dd offset ??_7type_info@@6B@
.data:000011F4                                         ; DATA XREF: .rdata$r:IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000011F4                                         ; .rdata$r:00001818o
.data:000011F4                                         ; const type_info::`vftable'
.data:000011F8                 db    0
.data:000011F9                 db    0
.data:000011FA                 db    0
.data:000011FB                 db    0
.data:000011FC                 db  2Eh ; .
.data:000011FD                 db  3Fh ; ?
.data:000011FE                 db  41h ; A
.data:000011FF                 db  55h ; U
.data:00001200                 db  49h ; I
.data:00001201                 db  49h ; I
.data:00001202                 db  6Eh ; n
.data:00001203                 db  53h ; S
.data:00001204                 db  74h ; t
.data:00001205                 db  72h ; r
.data:00001206                 db  65h ; e
.data:00001207                 db  61h ; a
.data:00001208                 db  6Dh ; m
.data:00001209                 db  40h ; @
.data:0000120A                 db  40h ; @
.data:0000120B                 db    0
.data:0000120B _data           ends
.data:0000120B
.rdata$r:0000120C ; ===========================================================================
.rdata$r:0000120C
.rdata$r:0000120C ; Segment type: Pure data
.rdata$r:0000120C ; Segment permissions: Read
.rdata$r:0000120C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000120C                 assume cs:_rdata$r
.rdata$r:0000120C                 ;org 120Ch
.rdata$r:0000120C ; COMDAT (pick any)
.rdata$r:0000120C                 public ??_R3IInStream@@8
.rdata$r:0000120C ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000120C ??_R3IInStream@@8 db    0               ; DATA XREF: .rdata$r:000011F0o
.rdata$r:0000120C                                         ; .rdata$r:0000181Co
.rdata$r:0000120D                 db    0
.rdata$r:0000120E                 db    0
.rdata$r:0000120F                 db    0
.rdata$r:00001210                 db    0
.rdata$r:00001211                 db    0
.rdata$r:00001212                 db    0
.rdata$r:00001213                 db    0
.rdata$r:00001214                 db    3
.rdata$r:00001215                 db    0
.rdata$r:00001216                 db    0
.rdata$r:00001217                 db    0
.rdata$r:00001218                 dd offset ??_R2IInStream@@8 ; IInStream::`RTTI Base Class Array'
.rdata$r:00001218 _rdata$r        ends
.rdata$r:00001218
.rdata$r:0000121C ; ===========================================================================
.rdata$r:0000121C
.rdata$r:0000121C ; Segment type: Pure data
.rdata$r:0000121C ; Segment permissions: Read
.rdata$r:0000121C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000121C                 assume cs:_rdata$r
.rdata$r:0000121C                 ;org 121Ch
.rdata$r:0000121C ; COMDAT (pick any)
.rdata$r:0000121C                 public ??_R2IInStream@@8
.rdata$r:0000121C ; IInStream::`RTTI Base Class Array'
.rdata$r:0000121C ??_R2IInStream@@8 dd offset ??_R1A@?0A@EA@IInStream@@8
.rdata$r:0000121C                                         ; DATA XREF: .rdata$r:00001218o
.rdata$r:0000121C                                         ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001220                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001224                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001228                 db    0
.rdata$r:00001229                 align 4
.rdata$r:00001229 _rdata$r        ends
.rdata$r:00001229
.rdata$r:0000122C ; ===========================================================================
.rdata$r:0000122C
.rdata$r:0000122C ; Segment type: Pure data
.rdata$r:0000122C ; Segment permissions: Read
.rdata$r:0000122C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000122C                 assume cs:_rdata$r
.rdata$r:0000122C                 ;org 122Ch
.rdata$r:0000122C ; COMDAT (pick any)
.rdata$r:0000122C                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000122C ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000122C ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:0000122C                                         ; DATA XREF: .rdata$r:00001194o
.rdata$r:0000122C                                         ; .rdata$r:00001220o ...
.rdata$r:0000122C                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00001230                 db    1
.rdata$r:00001231                 db    0
.rdata$r:00001232                 db    0
.rdata$r:00001233                 db    0
.rdata$r:00001234                 db    0
.rdata$r:00001235                 db    0
.rdata$r:00001236                 db    0
.rdata$r:00001237                 db    0
.rdata$r:00001238                 db 0FFh
.rdata$r:00001239                 db 0FFh
.rdata$r:0000123A                 db 0FFh
.rdata$r:0000123B                 db 0FFh
.rdata$r:0000123C                 db    0
.rdata$r:0000123D                 db    0
.rdata$r:0000123E                 db    0
.rdata$r:0000123F                 db    0
.rdata$r:00001240                 db  40h ; @
.rdata$r:00001241                 db    0
.rdata$r:00001242                 db    0
.rdata$r:00001243                 db    0
.rdata$r:00001244                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001244 _rdata$r        ends
.rdata$r:00001244
.data:00001248 ; ===========================================================================
.data:00001248
.data:00001248 ; Segment type: Pure data
.data:00001248 ; Segment permissions: Read/Write
.data:00001248 _data           segment dword public 'DATA' use32
.data:00001248                 assume cs:_data
.data:00001248                 ;org 1248h
.data:00001248 ; COMDAT (pick any)
.data:00001248                 public ??_R0?AUISequentialInStream@@@8
.data:00001248 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00001248 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00001248                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001248                                         ; .rdata$r:000019D8o
.data:00001248                                         ; const type_info::`vftable'
.data:0000124C                 align 10h
.data:00001250 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:0000126A                 align 4
.data:0000126A _data           ends
.data:0000126A
.rdata$r:0000126C ; ===========================================================================
.rdata$r:0000126C
.rdata$r:0000126C ; Segment type: Pure data
.rdata$r:0000126C ; Segment permissions: Read
.rdata$r:0000126C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000126C                 assume cs:_rdata$r
.rdata$r:0000126C                 ;org 126Ch
.rdata$r:0000126C ; COMDAT (pick any)
.rdata$r:0000126C                 public ??_R3ISequentialInStream@@8
.rdata$r:0000126C ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000126C ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00001244o
.rdata$r:0000126C                                         ; .rdata$r:000019DCo
.rdata$r:0000126D                 db    0
.rdata$r:0000126E                 db    0
.rdata$r:0000126F                 db    0
.rdata$r:00001270                 db    0
.rdata$r:00001271                 db    0
.rdata$r:00001272                 db    0
.rdata$r:00001273                 db    0
.rdata$r:00001274                 db    2
.rdata$r:00001275                 db    0
.rdata$r:00001276                 db    0
.rdata$r:00001277                 db    0
.rdata$r:00001278                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00001278 _rdata$r        ends
.rdata$r:00001278
.rdata$r:0000127C ; ===========================================================================
.rdata$r:0000127C
.rdata$r:0000127C ; Segment type: Pure data
.rdata$r:0000127C ; Segment permissions: Read
.rdata$r:0000127C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000127C                 assume cs:_rdata$r
.rdata$r:0000127C                 ;org 127Ch
.rdata$r:0000127C ; COMDAT (pick any)
.rdata$r:0000127C                 public ??_R2ISequentialInStream@@8
.rdata$r:0000127C ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:0000127C ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000127C                                         ; DATA XREF: .rdata$r:00001278o
.rdata$r:0000127C                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001280                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001284                 db    0
.rdata$r:00001285                 align 4
.rdata$r:00001285 _rdata$r        ends
.rdata$r:00001285
.rdata$r:00001288 ; ===========================================================================
.rdata$r:00001288
.rdata$r:00001288 ; Segment type: Pure data
.rdata$r:00001288 ; Segment permissions: Read
.rdata$r:00001288 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001288                 assume cs:_rdata$r
.rdata$r:00001288                 ;org 1288h
.rdata$r:00001288 ; COMDAT (pick any)
.rdata$r:00001288                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001288 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001288 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001288                                         ; DATA XREF: .rdata$r:00001224o
.rdata$r:00001288                                         ; .rdata$r:00001280o ...
.rdata$r:00001288                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000128C                 db    0
.rdata$r:0000128D                 db    0
.rdata$r:0000128E                 db    0
.rdata$r:0000128F                 db    0
.rdata$r:00001290                 db    0
.rdata$r:00001291                 db    0
.rdata$r:00001292                 db    0
.rdata$r:00001293                 db    0
.rdata$r:00001294                 db 0FFh
.rdata$r:00001295                 db 0FFh
.rdata$r:00001296                 db 0FFh
.rdata$r:00001297                 db 0FFh
.rdata$r:00001298                 db    0
.rdata$r:00001299                 db    0
.rdata$r:0000129A                 db    0
.rdata$r:0000129B                 db    0
.rdata$r:0000129C                 db  40h ; @
.rdata$r:0000129D                 db    0
.rdata$r:0000129E                 db    0
.rdata$r:0000129F                 db    0
.rdata$r:000012A0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012A0 _rdata$r        ends
.rdata$r:000012A0
.data:000012A4 ; ===========================================================================
.data:000012A4
.data:000012A4 ; Segment type: Pure data
.data:000012A4 ; Segment permissions: Read/Write
.data:000012A4 _data           segment dword public 'DATA' use32
.data:000012A4                 assume cs:_data
.data:000012A4                 ;org 12A4h
.data:000012A4 ; COMDAT (pick any)
.data:000012A4                 public ??_R0?AUIUnknown@@@8
.data:000012A4 ; struct IUnknown `RTTI Type Descriptor'
.data:000012A4 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000012A4                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000012A4                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:000012A4                                         ; const type_info::`vftable'
.data:000012A8                 db    0
.data:000012A9                 db    0
.data:000012AA                 db    0
.data:000012AB                 db    0
.data:000012AC                 db  2Eh ; .
.data:000012AD                 db  3Fh ; ?
.data:000012AE                 db  41h ; A
.data:000012AF                 db  55h ; U
.data:000012B0                 db  49h ; I
.data:000012B1                 db  55h ; U
.data:000012B2                 db  6Eh ; n
.data:000012B3                 db  6Bh ; k
.data:000012B4                 db  6Eh ; n
.data:000012B5                 db  6Fh ; o
.data:000012B6                 db  77h ; w
.data:000012B7                 db  6Eh ; n
.data:000012B8                 db  40h ; @
.data:000012B9                 db  40h ; @
.data:000012BA                 db    0
.data:000012BB                 align 4
.data:000012BB _data           ends
.data:000012BB
.rdata$r:000012BC ; ===========================================================================
.rdata$r:000012BC
.rdata$r:000012BC ; Segment type: Pure data
.rdata$r:000012BC ; Segment permissions: Read
.rdata$r:000012BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012BC                 assume cs:_rdata$r
.rdata$r:000012BC                 ;org 12BCh
.rdata$r:000012BC ; COMDAT (pick any)
.rdata$r:000012BC                 public ??_R3IUnknown@@8
.rdata$r:000012BC ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012BC ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000012A0o
.rdata$r:000012BC                                         ; .rdata$r:000012ECo ...
.rdata$r:000012BD                 db    0
.rdata$r:000012BE                 db    0
.rdata$r:000012BF                 db    0
.rdata$r:000012C0                 db    0
.rdata$r:000012C1                 db    0
.rdata$r:000012C2                 db    0
.rdata$r:000012C3                 db    0
.rdata$r:000012C4                 db    1
.rdata$r:000012C5                 db    0
.rdata$r:000012C6                 db    0
.rdata$r:000012C7                 db    0
.rdata$r:000012C8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000012C8 _rdata$r        ends
.rdata$r:000012C8
.rdata$r:000012CC ; ===========================================================================
.rdata$r:000012CC
.rdata$r:000012CC ; Segment type: Pure data
.rdata$r:000012CC ; Segment permissions: Read
.rdata$r:000012CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012CC                 assume cs:_rdata$r
.rdata$r:000012CC                 ;org 12CCh
.rdata$r:000012CC ; COMDAT (pick any)
.rdata$r:000012CC                 public ??_R2IUnknown@@8
.rdata$r:000012CC ; IUnknown::`RTTI Base Class Array'
.rdata$r:000012CC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000012CC                                         ; DATA XREF: .rdata$r:000012C8o
.rdata$r:000012CC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000012D0                 db    0
.rdata$r:000012D1                 align 4
.rdata$r:000012D1 _rdata$r        ends
.rdata$r:000012D1
.rdata$r:000012D4 ; ===========================================================================
.rdata$r:000012D4
.rdata$r:000012D4 ; Segment type: Pure data
.rdata$r:000012D4 ; Segment permissions: Read
.rdata$r:000012D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012D4                 assume cs:_rdata$r
.rdata$r:000012D4                 ;org 12D4h
.rdata$r:000012D4 ; COMDAT (pick any)
.rdata$r:000012D4                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:000012D4 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:000012D4 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000012D4                                         ; DATA XREF: .rdata$r:00001198o
.rdata$r:000012D4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000012D8                 align 10h
.rdata$r:000012E0                 db 0FFh
.rdata$r:000012E1                 db 0FFh
.rdata$r:000012E2                 db 0FFh
.rdata$r:000012E3                 db 0FFh
.rdata$r:000012E4                 db    0
.rdata$r:000012E5                 db    0
.rdata$r:000012E6                 db    0
.rdata$r:000012E7                 db    0
.rdata$r:000012E8                 db  42h ; B
.rdata$r:000012E9                 db    0
.rdata$r:000012EA                 db    0
.rdata$r:000012EB                 db    0
.rdata$r:000012EC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012EC _rdata$r        ends
.rdata$r:000012EC
.rdata$r:000012F0 ; ===========================================================================
.rdata$r:000012F0
.rdata$r:000012F0 ; Segment type: Pure data
.rdata$r:000012F0 ; Segment permissions: Read
.rdata$r:000012F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012F0                 assume cs:_rdata$r
.rdata$r:000012F0                 ;org 12F0h
.rdata$r:000012F0 ; COMDAT (pick any)
.rdata$r:000012F0                 public ??_R13?0A@EA@IStreamGetSize@@8
.rdata$r:000012F0 ; IStreamGetSize::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000012F0 ??_R13?0A@EA@IStreamGetSize@@8 dd offset ??_R0?AUIStreamGetSize@@@8
.rdata$r:000012F0                                         ; DATA XREF: .rdata$r:0000119Co
.rdata$r:000012F0                                         ; IStreamGetSize `RTTI Type Descriptor'
.rdata$r:000012F4                 db    1
.rdata$r:000012F5                 db    0
.rdata$r:000012F6                 db    0
.rdata$r:000012F7                 db    0
.rdata$r:000012F8                 db    4
.rdata$r:000012F9                 db    0
.rdata$r:000012FA                 db    0
.rdata$r:000012FB                 db    0
.rdata$r:000012FC                 db 0FFh
.rdata$r:000012FD                 db 0FFh
.rdata$r:000012FE                 db 0FFh
.rdata$r:000012FF                 db 0FFh
.rdata$r:00001300                 db    0
.rdata$r:00001301                 db    0
.rdata$r:00001302                 db    0
.rdata$r:00001303                 db    0
.rdata$r:00001304                 db  40h ; @
.rdata$r:00001305                 db    0
.rdata$r:00001306                 db    0
.rdata$r:00001307                 db    0
.rdata$r:00001308                 dd offset ??_R3IStreamGetSize@@8 ; IStreamGetSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001308 _rdata$r        ends
.rdata$r:00001308
.data:0000130C ; ===========================================================================
.data:0000130C
.data:0000130C ; Segment type: Pure data
.data:0000130C ; Segment permissions: Read/Write
.data:0000130C _data           segment dword public 'DATA' use32
.data:0000130C                 assume cs:_data
.data:0000130C                 ;org 130Ch
.data:0000130C ; COMDAT (pick any)
.data:0000130C                 public ??_R0?AUIStreamGetSize@@@8
.data:0000130C ; struct IStreamGetSize `RTTI Type Descriptor'
.data:0000130C ??_R0?AUIStreamGetSize@@@8 dd offset ??_7type_info@@6B@
.data:0000130C                                         ; DATA XREF: .rdata$r:IStreamGetSize::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:0000130C                                         ; .rdata$r:IStreamGetSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000130C                                         ; const type_info::`vftable'
.data:00001310                 db    0
.data:00001311                 db    0
.data:00001312                 db    0
.data:00001313                 db    0
.data:00001314                 db  2Eh ; .
.data:00001315                 db  3Fh ; ?
.data:00001316                 db  41h ; A
.data:00001317                 db  55h ; U
.data:00001318                 db  49h ; I
.data:00001319                 db  53h ; S
.data:0000131A                 db  74h ; t
.data:0000131B                 db  72h ; r
.data:0000131C                 db  65h ; e
.data:0000131D                 db  61h ; a
.data:0000131E                 db  6Dh ; m
.data:0000131F                 db  47h ; G
.data:00001320                 db  65h ; e
.data:00001321                 db  74h ; t
.data:00001322                 db  53h ; S
.data:00001323                 db  69h ; i
.data:00001324                 db  7Ah ; z
.data:00001325                 db  65h ; e
.data:00001326                 db  40h ; @
.data:00001327                 db  40h ; @
.data:00001328                 db    0
.data:00001329                 align 4
.data:00001329 _data           ends
.data:00001329
.rdata$r:0000132C ; ===========================================================================
.rdata$r:0000132C
.rdata$r:0000132C ; Segment type: Pure data
.rdata$r:0000132C ; Segment permissions: Read
.rdata$r:0000132C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000132C                 assume cs:_rdata$r
.rdata$r:0000132C                 ;org 132Ch
.rdata$r:0000132C ; COMDAT (pick any)
.rdata$r:0000132C                 public ??_R3IStreamGetSize@@8
.rdata$r:0000132C ; IStreamGetSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000132C ??_R3IStreamGetSize@@8 db    0          ; DATA XREF: .rdata$r:00001308o
.rdata$r:0000132C                                         ; .rdata$r:00001360o ...
.rdata$r:0000132D                 db    0
.rdata$r:0000132E                 db    0
.rdata$r:0000132F                 db    0
.rdata$r:00001330                 db    0
.rdata$r:00001331                 db    0
.rdata$r:00001332                 db    0
.rdata$r:00001333                 db    0
.rdata$r:00001334                 db    2
.rdata$r:00001335                 db    0
.rdata$r:00001336                 db    0
.rdata$r:00001337                 db    0
.rdata$r:00001338                 dd offset ??_R2IStreamGetSize@@8 ; IStreamGetSize::`RTTI Base Class Array'
.rdata$r:00001338 _rdata$r        ends
.rdata$r:00001338
.rdata$r:0000133C ; ===========================================================================
.rdata$r:0000133C
.rdata$r:0000133C ; Segment type: Pure data
.rdata$r:0000133C ; Segment permissions: Read
.rdata$r:0000133C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000133C                 assume cs:_rdata$r
.rdata$r:0000133C                 ;org 133Ch
.rdata$r:0000133C ; COMDAT (pick any)
.rdata$r:0000133C                 public ??_R2IStreamGetSize@@8
.rdata$r:0000133C ; IStreamGetSize::`RTTI Base Class Array'
.rdata$r:0000133C ??_R2IStreamGetSize@@8 dd offset ??_R1A@?0A@EA@IStreamGetSize@@8
.rdata$r:0000133C                                         ; DATA XREF: .rdata$r:00001338o
.rdata$r:0000133C                                         ; IStreamGetSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001340                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001344                 db    0
.rdata$r:00001345                 align 4
.rdata$r:00001345 _rdata$r        ends
.rdata$r:00001345
.rdata$r:00001348 ; ===========================================================================
.rdata$r:00001348
.rdata$r:00001348 ; Segment type: Pure data
.rdata$r:00001348 ; Segment permissions: Read
.rdata$r:00001348 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001348                 assume cs:_rdata$r
.rdata$r:00001348                 ;org 1348h
.rdata$r:00001348 ; COMDAT (pick any)
.rdata$r:00001348                 public ??_R1A@?0A@EA@IStreamGetSize@@8
.rdata$r:00001348 ; IStreamGetSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001348 ??_R1A@?0A@EA@IStreamGetSize@@8 dd offset ??_R0?AUIStreamGetSize@@@8
.rdata$r:00001348                                         ; DATA XREF: .rdata$r:IStreamGetSize::`RTTI Base Class Array'o
.rdata$r:00001348                                         ; IStreamGetSize `RTTI Type Descriptor'
.rdata$r:0000134C                 db    1
.rdata$r:0000134D                 db    0
.rdata$r:0000134E                 db    0
.rdata$r:0000134F                 db    0
.rdata$r:00001350                 db    0
.rdata$r:00001351                 db    0
.rdata$r:00001352                 db    0
.rdata$r:00001353                 db    0
.rdata$r:00001354                 db 0FFh
.rdata$r:00001355                 db 0FFh
.rdata$r:00001356                 db 0FFh
.rdata$r:00001357                 db 0FFh
.rdata$r:00001358                 db    0
.rdata$r:00001359                 db    0
.rdata$r:0000135A                 db    0
.rdata$r:0000135B                 db    0
.rdata$r:0000135C                 db  40h ; @
.rdata$r:0000135D                 db    0
.rdata$r:0000135E                 db    0
.rdata$r:0000135F                 db    0
.rdata$r:00001360                 dd offset ??_R3IStreamGetSize@@8 ; IStreamGetSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001360 _rdata$r        ends
.rdata$r:00001360
.rdata$r:00001364 ; ===========================================================================
.rdata$r:00001364
.rdata$r:00001364 ; Segment type: Pure data
.rdata$r:00001364 ; Segment permissions: Read
.rdata$r:00001364 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001364                 assume cs:_rdata$r
.rdata$r:00001364                 ;org 1364h
.rdata$r:00001364 ; COMDAT (pick any)
.rdata$r:00001364                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00001364 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00001364 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001364                                         ; DATA XREF: .rdata$r:000011A0o
.rdata$r:00001364                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001368                 db    0
.rdata$r:00001369                 db    0
.rdata$r:0000136A                 db    0
.rdata$r:0000136B                 db    0
.rdata$r:0000136C                 db    4
.rdata$r:0000136D                 db    0
.rdata$r:0000136E                 db    0
.rdata$r:0000136F                 db    0
.rdata$r:00001370                 db 0FFh
.rdata$r:00001371                 db 0FFh
.rdata$r:00001372                 db 0FFh
.rdata$r:00001373                 db 0FFh
.rdata$r:00001374                 db    0
.rdata$r:00001375                 db    0
.rdata$r:00001376                 db    0
.rdata$r:00001377                 db    0
.rdata$r:00001378                 db  42h ; B
.rdata$r:00001379                 db    0
.rdata$r:0000137A                 db    0
.rdata$r:0000137B                 db    0
.rdata$r:0000137C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000137C _rdata$r        ends
.rdata$r:0000137C
.rdata$r:00001380 ; ===========================================================================
.rdata$r:00001380
.rdata$r:00001380 ; Segment type: Pure data
.rdata$r:00001380 ; Segment permissions: Read
.rdata$r:00001380 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001380                 assume cs:_rdata$r
.rdata$r:00001380                 ;org 1380h
.rdata$r:00001380 ; COMDAT (pick any)
.rdata$r:00001380                 public ??_R17?0A@EA@IStreamGetProps@@8
.rdata$r:00001380 ; IStreamGetProps::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00001380 ??_R17?0A@EA@IStreamGetProps@@8 dd offset ??_R0?AUIStreamGetProps@@@8
.rdata$r:00001380                                         ; DATA XREF: .rdata$r:000011A4o
.rdata$r:00001380                                         ; IStreamGetProps `RTTI Type Descriptor'
.rdata$r:00001384                 db    1
.rdata$r:00001385                 db    0
.rdata$r:00001386                 db    0
.rdata$r:00001387                 db    0
.rdata$r:00001388                 db    8
.rdata$r:00001389                 db    0
.rdata$r:0000138A                 db    0
.rdata$r:0000138B                 db    0
.rdata$r:0000138C                 db 0FFh
.rdata$r:0000138D                 db 0FFh
.rdata$r:0000138E                 db 0FFh
.rdata$r:0000138F                 db 0FFh
.rdata$r:00001390                 db    0
.rdata$r:00001391                 db    0
.rdata$r:00001392                 db    0
.rdata$r:00001393                 db    0
.rdata$r:00001394                 db  40h ; @
.rdata$r:00001395                 db    0
.rdata$r:00001396                 db    0
.rdata$r:00001397                 db    0
.rdata$r:00001398                 dd offset ??_R3IStreamGetProps@@8 ; IStreamGetProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001398 _rdata$r        ends
.rdata$r:00001398
.data:0000139C ; ===========================================================================
.data:0000139C
.data:0000139C ; Segment type: Pure data
.data:0000139C ; Segment permissions: Read/Write
.data:0000139C _data           segment dword public 'DATA' use32
.data:0000139C                 assume cs:_data
.data:0000139C                 ;org 139Ch
.data:0000139C ; COMDAT (pick any)
.data:0000139C                 public ??_R0?AUIStreamGetProps@@@8
.data:0000139C ; struct IStreamGetProps `RTTI Type Descriptor'
.data:0000139C ??_R0?AUIStreamGetProps@@@8 dd offset ??_7type_info@@6B@
.data:0000139C                                         ; DATA XREF: .rdata$r:IStreamGetProps::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:0000139C                                         ; .rdata$r:IStreamGetProps::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000139C                                         ; const type_info::`vftable'
.data:000013A0                 db    0
.data:000013A1                 db    0
.data:000013A2                 db    0
.data:000013A3                 db    0
.data:000013A4                 db  2Eh ; .
.data:000013A5                 db  3Fh ; ?
.data:000013A6                 db  41h ; A
.data:000013A7                 db  55h ; U
.data:000013A8                 db  49h ; I
.data:000013A9                 db  53h ; S
.data:000013AA                 db  74h ; t
.data:000013AB                 db  72h ; r
.data:000013AC                 db  65h ; e
.data:000013AD                 db  61h ; a
.data:000013AE                 db  6Dh ; m
.data:000013AF                 db  47h ; G
.data:000013B0                 db  65h ; e
.data:000013B1                 db  74h ; t
.data:000013B2                 db  50h ; P
.data:000013B3                 db  72h ; r
.data:000013B4                 db  6Fh ; o
.data:000013B5                 db  70h ; p
.data:000013B6                 db  73h ; s
.data:000013B7                 db  40h ; @
.data:000013B8                 db  40h ; @
.data:000013B9                 db    0
.data:000013BA                 align 4
.data:000013BA _data           ends
.data:000013BA
.rdata$r:000013BC ; ===========================================================================
.rdata$r:000013BC
.rdata$r:000013BC ; Segment type: Pure data
.rdata$r:000013BC ; Segment permissions: Read
.rdata$r:000013BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013BC                 assume cs:_rdata$r
.rdata$r:000013BC                 ;org 13BCh
.rdata$r:000013BC ; COMDAT (pick any)
.rdata$r:000013BC                 public ??_R3IStreamGetProps@@8
.rdata$r:000013BC ; IStreamGetProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:000013BC ??_R3IStreamGetProps@@8 db    0         ; DATA XREF: .rdata$r:00001398o
.rdata$r:000013BC                                         ; .rdata$r:000013F0o ...
.rdata$r:000013BD                 db    0
.rdata$r:000013BE                 db    0
.rdata$r:000013BF                 db    0
.rdata$r:000013C0                 db    0
.rdata$r:000013C1                 db    0
.rdata$r:000013C2                 db    0
.rdata$r:000013C3                 db    0
.rdata$r:000013C4                 db    2
.rdata$r:000013C5                 db    0
.rdata$r:000013C6                 db    0
.rdata$r:000013C7                 db    0
.rdata$r:000013C8                 dd offset ??_R2IStreamGetProps@@8 ; IStreamGetProps::`RTTI Base Class Array'
.rdata$r:000013C8 _rdata$r        ends
.rdata$r:000013C8
.rdata$r:000013CC ; ===========================================================================
.rdata$r:000013CC
.rdata$r:000013CC ; Segment type: Pure data
.rdata$r:000013CC ; Segment permissions: Read
.rdata$r:000013CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013CC                 assume cs:_rdata$r
.rdata$r:000013CC                 ;org 13CCh
.rdata$r:000013CC ; COMDAT (pick any)
.rdata$r:000013CC                 public ??_R2IStreamGetProps@@8
.rdata$r:000013CC ; IStreamGetProps::`RTTI Base Class Array'
.rdata$r:000013CC ??_R2IStreamGetProps@@8 dd offset ??_R1A@?0A@EA@IStreamGetProps@@8
.rdata$r:000013CC                                         ; DATA XREF: .rdata$r:000013C8o
.rdata$r:000013CC                                         ; IStreamGetProps::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000013D0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000013D4                 db    0
.rdata$r:000013D5                 align 4
.rdata$r:000013D5 _rdata$r        ends
.rdata$r:000013D5
.rdata$r:000013D8 ; ===========================================================================
.rdata$r:000013D8
.rdata$r:000013D8 ; Segment type: Pure data
.rdata$r:000013D8 ; Segment permissions: Read
.rdata$r:000013D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013D8                 assume cs:_rdata$r
.rdata$r:000013D8                 ;org 13D8h
.rdata$r:000013D8 ; COMDAT (pick any)
.rdata$r:000013D8                 public ??_R1A@?0A@EA@IStreamGetProps@@8
.rdata$r:000013D8 ; IStreamGetProps::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000013D8 ??_R1A@?0A@EA@IStreamGetProps@@8 dd offset ??_R0?AUIStreamGetProps@@@8
.rdata$r:000013D8                                         ; DATA XREF: .rdata$r:IStreamGetProps::`RTTI Base Class Array'o
.rdata$r:000013D8                                         ; IStreamGetProps `RTTI Type Descriptor'
.rdata$r:000013DC                 db    1
.rdata$r:000013DD                 db    0
.rdata$r:000013DE                 db    0
.rdata$r:000013DF                 db    0
.rdata$r:000013E0                 db    0
.rdata$r:000013E1                 db    0
.rdata$r:000013E2                 db    0
.rdata$r:000013E3                 db    0
.rdata$r:000013E4                 db 0FFh
.rdata$r:000013E5                 db 0FFh
.rdata$r:000013E6                 db 0FFh
.rdata$r:000013E7                 db 0FFh
.rdata$r:000013E8                 db    0
.rdata$r:000013E9                 db    0
.rdata$r:000013EA                 db    0
.rdata$r:000013EB                 db    0
.rdata$r:000013EC                 db  40h ; @
.rdata$r:000013ED                 db    0
.rdata$r:000013EE                 db    0
.rdata$r:000013EF                 db    0
.rdata$r:000013F0                 dd offset ??_R3IStreamGetProps@@8 ; IStreamGetProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:000013F0 _rdata$r        ends
.rdata$r:000013F0
.rdata$r:000013F4 ; ===========================================================================
.rdata$r:000013F4
.rdata$r:000013F4 ; Segment type: Pure data
.rdata$r:000013F4 ; Segment permissions: Read
.rdata$r:000013F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013F4                 assume cs:_rdata$r
.rdata$r:000013F4                 ;org 13F4h
.rdata$r:000013F4 ; COMDAT (pick any)
.rdata$r:000013F4                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:000013F4 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:000013F4 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000013F4                                         ; DATA XREF: .rdata$r:000011A8o
.rdata$r:000013F4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000013F8                 db    0
.rdata$r:000013F9                 db    0
.rdata$r:000013FA                 db    0
.rdata$r:000013FB                 db    0
.rdata$r:000013FC                 db    8
.rdata$r:000013FD                 db    0
.rdata$r:000013FE                 db    0
.rdata$r:000013FF                 db    0
.rdata$r:00001400                 db 0FFh
.rdata$r:00001401                 db 0FFh
.rdata$r:00001402                 db 0FFh
.rdata$r:00001403                 db 0FFh
.rdata$r:00001404                 db    0
.rdata$r:00001405                 db    0
.rdata$r:00001406                 db    0
.rdata$r:00001407                 db    0
.rdata$r:00001408                 db  42h ; B
.rdata$r:00001409                 db    0
.rdata$r:0000140A                 db    0
.rdata$r:0000140B                 db    0
.rdata$r:0000140C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000140C _rdata$r        ends
.rdata$r:0000140C
.rdata$r:00001410 ; ===========================================================================
.rdata$r:00001410
.rdata$r:00001410 ; Segment type: Pure data
.rdata$r:00001410 ; Segment permissions: Read
.rdata$r:00001410 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001410                 assume cs:_rdata$r
.rdata$r:00001410                 ;org 1410h
.rdata$r:00001410 ; COMDAT (pick any)
.rdata$r:00001410                 public ??_R1M@?0A@EA@IStreamGetProps2@@8
.rdata$r:00001410 ; IStreamGetProps2::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00001410 ??_R1M@?0A@EA@IStreamGetProps2@@8 dd offset ??_R0?AUIStreamGetProps2@@@8
.rdata$r:00001410                                         ; DATA XREF: .rdata$r:000011ACo
.rdata$r:00001410                                         ; IStreamGetProps2 `RTTI Type Descriptor'
.rdata$r:00001414                 db    1
.rdata$r:00001415                 db    0
.rdata$r:00001416                 db    0
.rdata$r:00001417                 db    0
.rdata$r:00001418                 db  0Ch
.rdata$r:00001419                 db    0
.rdata$r:0000141A                 db    0
.rdata$r:0000141B                 db    0
.rdata$r:0000141C                 db 0FFh
.rdata$r:0000141D                 db 0FFh
.rdata$r:0000141E                 db 0FFh
.rdata$r:0000141F                 db 0FFh
.rdata$r:00001420                 db    0
.rdata$r:00001421                 db    0
.rdata$r:00001422                 db    0
.rdata$r:00001423                 db    0
.rdata$r:00001424                 db  40h ; @
.rdata$r:00001425                 db    0
.rdata$r:00001426                 db    0
.rdata$r:00001427                 db    0
.rdata$r:00001428                 dd offset ??_R3IStreamGetProps2@@8 ; IStreamGetProps2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001428 _rdata$r        ends
.rdata$r:00001428
.data:0000142C ; ===========================================================================
.data:0000142C
.data:0000142C ; Segment type: Pure data
.data:0000142C ; Segment permissions: Read/Write
.data:0000142C _data           segment dword public 'DATA' use32
.data:0000142C                 assume cs:_data
.data:0000142C                 ;org 142Ch
.data:0000142C ; COMDAT (pick any)
.data:0000142C                 public ??_R0?AUIStreamGetProps2@@@8
.data:0000142C ; struct IStreamGetProps2 `RTTI Type Descriptor'
.data:0000142C ??_R0?AUIStreamGetProps2@@@8 dd offset ??_7type_info@@6B@
.data:0000142C                                         ; DATA XREF: .rdata$r:IStreamGetProps2::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:0000142C                                         ; .rdata$r:IStreamGetProps2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000142C                                         ; const type_info::`vftable'
.data:00001430                 db    0
.data:00001431                 db    0
.data:00001432                 db    0
.data:00001433                 db    0
.data:00001434                 db  2Eh ; .
.data:00001435                 db  3Fh ; ?
.data:00001436                 db  41h ; A
.data:00001437                 db  55h ; U
.data:00001438                 db  49h ; I
.data:00001439                 db  53h ; S
.data:0000143A                 db  74h ; t
.data:0000143B                 db  72h ; r
.data:0000143C                 db  65h ; e
.data:0000143D                 db  61h ; a
.data:0000143E                 db  6Dh ; m
.data:0000143F                 db  47h ; G
.data:00001440                 db  65h ; e
.data:00001441                 db  74h ; t
.data:00001442                 db  50h ; P
.data:00001443                 db  72h ; r
.data:00001444                 db  6Fh ; o
.data:00001445                 db  70h ; p
.data:00001446                 db  73h ; s
.data:00001447                 db  32h ; 2
.data:00001448                 db  40h ; @
.data:00001449                 db  40h ; @
.data:0000144A                 db    0
.data:0000144B                 align 4
.data:0000144B _data           ends
.data:0000144B
.rdata$r:0000144C ; ===========================================================================
.rdata$r:0000144C
.rdata$r:0000144C ; Segment type: Pure data
.rdata$r:0000144C ; Segment permissions: Read
.rdata$r:0000144C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000144C                 assume cs:_rdata$r
.rdata$r:0000144C                 ;org 144Ch
.rdata$r:0000144C ; COMDAT (pick any)
.rdata$r:0000144C                 public ??_R3IStreamGetProps2@@8
.rdata$r:0000144C ; IStreamGetProps2::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000144C ??_R3IStreamGetProps2@@8 db    0        ; DATA XREF: .rdata$r:00001428o
.rdata$r:0000144C                                         ; .rdata$r:00001480o ...
.rdata$r:0000144D                 db    0
.rdata$r:0000144E                 db    0
.rdata$r:0000144F                 db    0
.rdata$r:00001450                 db    0
.rdata$r:00001451                 db    0
.rdata$r:00001452                 db    0
.rdata$r:00001453                 db    0
.rdata$r:00001454                 db    2
.rdata$r:00001455                 db    0
.rdata$r:00001456                 db    0
.rdata$r:00001457                 db    0
.rdata$r:00001458                 dd offset ??_R2IStreamGetProps2@@8 ; IStreamGetProps2::`RTTI Base Class Array'
.rdata$r:00001458 _rdata$r        ends
.rdata$r:00001458
.rdata$r:0000145C ; ===========================================================================
.rdata$r:0000145C
.rdata$r:0000145C ; Segment type: Pure data
.rdata$r:0000145C ; Segment permissions: Read
.rdata$r:0000145C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000145C                 assume cs:_rdata$r
.rdata$r:0000145C                 ;org 145Ch
.rdata$r:0000145C ; COMDAT (pick any)
.rdata$r:0000145C                 public ??_R2IStreamGetProps2@@8
.rdata$r:0000145C ; IStreamGetProps2::`RTTI Base Class Array'
.rdata$r:0000145C ??_R2IStreamGetProps2@@8 dd offset ??_R1A@?0A@EA@IStreamGetProps2@@8
.rdata$r:0000145C                                         ; DATA XREF: .rdata$r:00001458o
.rdata$r:0000145C                                         ; IStreamGetProps2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001460                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001464                 db    0
.rdata$r:00001465                 align 4
.rdata$r:00001465 _rdata$r        ends
.rdata$r:00001465
.rdata$r:00001468 ; ===========================================================================
.rdata$r:00001468
.rdata$r:00001468 ; Segment type: Pure data
.rdata$r:00001468 ; Segment permissions: Read
.rdata$r:00001468 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001468                 assume cs:_rdata$r
.rdata$r:00001468                 ;org 1468h
.rdata$r:00001468 ; COMDAT (pick any)
.rdata$r:00001468                 public ??_R1A@?0A@EA@IStreamGetProps2@@8
.rdata$r:00001468 ; IStreamGetProps2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001468 ??_R1A@?0A@EA@IStreamGetProps2@@8 dd offset ??_R0?AUIStreamGetProps2@@@8
.rdata$r:00001468                                         ; DATA XREF: .rdata$r:IStreamGetProps2::`RTTI Base Class Array'o
.rdata$r:00001468                                         ; IStreamGetProps2 `RTTI Type Descriptor'
.rdata$r:0000146C                 db    1
.rdata$r:0000146D                 db    0
.rdata$r:0000146E                 db    0
.rdata$r:0000146F                 db    0
.rdata$r:00001470                 db    0
.rdata$r:00001471                 db    0
.rdata$r:00001472                 db    0
.rdata$r:00001473                 db    0
.rdata$r:00001474                 db 0FFh
.rdata$r:00001475                 db 0FFh
.rdata$r:00001476                 db 0FFh
.rdata$r:00001477                 db 0FFh
.rdata$r:00001478                 db    0
.rdata$r:00001479                 db    0
.rdata$r:0000147A                 db    0
.rdata$r:0000147B                 db    0
.rdata$r:0000147C                 db  40h ; @
.rdata$r:0000147D                 db    0
.rdata$r:0000147E                 db    0
.rdata$r:0000147F                 db    0
.rdata$r:00001480                 dd offset ??_R3IStreamGetProps2@@8 ; IStreamGetProps2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001480 _rdata$r        ends
.rdata$r:00001480
.rdata$r:00001484 ; ===========================================================================
.rdata$r:00001484
.rdata$r:00001484 ; Segment type: Pure data
.rdata$r:00001484 ; Segment permissions: Read
.rdata$r:00001484 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001484                 assume cs:_rdata$r
.rdata$r:00001484                 ;org 1484h
.rdata$r:00001484 ; COMDAT (pick any)
.rdata$r:00001484                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00001484 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00001484 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001484                                         ; DATA XREF: .rdata$r:000011B0o
.rdata$r:00001484                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001488                 db    0
.rdata$r:00001489                 db    0
.rdata$r:0000148A                 db    0
.rdata$r:0000148B                 db    0
.rdata$r:0000148C                 db  0Ch
.rdata$r:0000148D                 db    0
.rdata$r:0000148E                 db    0
.rdata$r:0000148F                 db    0
.rdata$r:00001490                 db 0FFh
.rdata$r:00001491                 db 0FFh
.rdata$r:00001492                 db 0FFh
.rdata$r:00001493                 db 0FFh
.rdata$r:00001494                 db    0
.rdata$r:00001495                 db    0
.rdata$r:00001496                 db    0
.rdata$r:00001497                 db    0
.rdata$r:00001498                 db  42h ; B
.rdata$r:00001499                 db    0
.rdata$r:0000149A                 db    0
.rdata$r:0000149B                 db    0
.rdata$r:0000149C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000149C _rdata$r        ends
.rdata$r:0000149C
.rdata$r:000014A0 ; ===========================================================================
.rdata$r:000014A0
.rdata$r:000014A0 ; Segment type: Pure data
.rdata$r:000014A0 ; Segment permissions: Read
.rdata$r:000014A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000014A0                 assume cs:_rdata$r
.rdata$r:000014A0                 ;org 14A0h
.rdata$r:000014A0 ; COMDAT (pick any)
.rdata$r:000014A0                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:000014A0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000014A0 ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000014A0                                         ; DATA XREF: .rdata$r:000011B4o
.rdata$r:000014A0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000014A4                 align 8
.rdata$r:000014A8                 db  10h
.rdata$r:000014A9                 db    0
.rdata$r:000014AA                 db    0
.rdata$r:000014AB                 db    0
.rdata$r:000014AC                 db 0FFh
.rdata$r:000014AD                 db 0FFh
.rdata$r:000014AE                 db 0FFh
.rdata$r:000014AF                 db 0FFh
.rdata$r:000014B0                 db    0
.rdata$r:000014B1                 db    0
.rdata$r:000014B2                 db    0
.rdata$r:000014B3                 db    0
.rdata$r:000014B4                 db  40h ; @
.rdata$r:000014B5                 db    0
.rdata$r:000014B6                 db    0
.rdata$r:000014B7                 db    0
.rdata$r:000014B8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000014B8 _rdata$r        ends
.rdata$r:000014B8
.data:000014BC ; ===========================================================================
.data:000014BC
.data:000014BC ; Segment type: Pure data
.data:000014BC ; Segment permissions: Read/Write
.data:000014BC _data           segment dword public 'DATA' use32
.data:000014BC                 assume cs:_data
.data:000014BC                 ;org 14BCh
.data:000014BC ; COMDAT (pick any)
.data:000014BC                 public ??_R0?AVCMyUnknownImp@@@8
.data:000014BC ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000014BC ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000014BC                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:000014BC                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000014BC                                         ; const type_info::`vftable'
.data:000014C0                 db    0
.data:000014C1                 db    0
.data:000014C2                 db    0
.data:000014C3                 db    0
.data:000014C4                 db  2Eh ; .
.data:000014C5                 db  3Fh ; ?
.data:000014C6                 db  41h ; A
.data:000014C7                 db  56h ; V
.data:000014C8                 db  43h ; C
.data:000014C9                 db  4Dh ; M
.data:000014CA                 db  79h ; y
.data:000014CB                 db  55h ; U
.data:000014CC                 db  6Eh ; n
.data:000014CD                 db  6Bh ; k
.data:000014CE                 db  6Eh ; n
.data:000014CF                 db  6Fh ; o
.data:000014D0                 db  77h ; w
.data:000014D1                 db  6Eh ; n
.data:000014D2                 db  49h ; I
.data:000014D3                 db  6Dh ; m
.data:000014D4                 db  70h ; p
.data:000014D5                 db  40h ; @
.data:000014D6                 db  40h ; @
.data:000014D7                 db    0
.data:000014D7 _data           ends
.data:000014D7
.rdata$r:000014D8 ; ===========================================================================
.rdata$r:000014D8
.rdata$r:000014D8 ; Segment type: Pure data
.rdata$r:000014D8 ; Segment permissions: Read
.rdata$r:000014D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000014D8                 assume cs:_rdata$r
.rdata$r:000014D8                 ;org 14D8h
.rdata$r:000014D8 ; COMDAT (pick any)
.rdata$r:000014D8                 public ??_R3CMyUnknownImp@@8
.rdata$r:000014D8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000014D8 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000014B8o
.rdata$r:000014D8                                         ; .rdata$r:00001508o
.rdata$r:000014D9                 db    0
.rdata$r:000014DA                 db    0
.rdata$r:000014DB                 db    0
.rdata$r:000014DC                 db    0
.rdata$r:000014DD                 db    0
.rdata$r:000014DE                 db    0
.rdata$r:000014DF                 db    0
.rdata$r:000014E0                 db    1
.rdata$r:000014E1                 db    0
.rdata$r:000014E2                 db    0
.rdata$r:000014E3                 db    0
.rdata$r:000014E4                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000014E4 _rdata$r        ends
.rdata$r:000014E4
.rdata$r:000014E8 ; ===========================================================================
.rdata$r:000014E8
.rdata$r:000014E8 ; Segment type: Pure data
.rdata$r:000014E8 ; Segment permissions: Read
.rdata$r:000014E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000014E8                 assume cs:_rdata$r
.rdata$r:000014E8                 ;org 14E8h
.rdata$r:000014E8 ; COMDAT (pick any)
.rdata$r:000014E8                 public ??_R2CMyUnknownImp@@8
.rdata$r:000014E8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000014E8 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000014E8                                         ; DATA XREF: .rdata$r:000014E4o
.rdata$r:000014E8                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000014EC                 db    0
.rdata$r:000014ED                 align 10h
.rdata$r:000014ED _rdata$r        ends
.rdata$r:000014ED
.rdata$r:000014F0 ; ===========================================================================
.rdata$r:000014F0
.rdata$r:000014F0 ; Segment type: Pure data
.rdata$r:000014F0 ; Segment permissions: Read
.rdata$r:000014F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000014F0                 assume cs:_rdata$r
.rdata$r:000014F0                 ;org 14F0h
.rdata$r:000014F0 ; COMDAT (pick any)
.rdata$r:000014F0                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000014F0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000014F0 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000014F0                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000014F0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000014F4                 db    0
.rdata$r:000014F5                 db    0
.rdata$r:000014F6                 db    0
.rdata$r:000014F7                 db    0
.rdata$r:000014F8                 db    0
.rdata$r:000014F9                 db    0
.rdata$r:000014FA                 db    0
.rdata$r:000014FB                 db    0
.rdata$r:000014FC                 db 0FFh
.rdata$r:000014FD                 db 0FFh
.rdata$r:000014FE                 db 0FFh
.rdata$r:000014FF                 db 0FFh
.rdata$r:00001500                 db    0
.rdata$r:00001501                 db    0
.rdata$r:00001502                 db    0
.rdata$r:00001503                 db    0
.rdata$r:00001504                 db  40h ; @
.rdata$r:00001505                 db    0
.rdata$r:00001506                 db    0
.rdata$r:00001507                 db    0
.rdata$r:00001508                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001508 _rdata$r        ends
.rdata$r:00001508
.rdata$r:0000150C ; ===========================================================================
.rdata$r:0000150C
.rdata$r:0000150C ; Segment type: Pure data
.rdata$r:0000150C ; Segment permissions: Read
.rdata$r:0000150C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000150C                 assume cs:_rdata$r
.rdata$r:0000150C                 ;org 150Ch
.rdata$r:0000150C ; COMDAT (pick any)
.rdata$r:0000150C                 public ??_R4CInFileStream@@6BIStreamGetSize@@@
.rdata$r:0000150C ; const CInFileStream::`RTTI Complete Object Locator'{for `IStreamGetSize'}
.rdata$r:0000150C ??_R4CInFileStream@@6BIStreamGetSize@@@ db    0
.rdata$r:0000150C                                         ; DATA XREF: .rdata:00001114o
.rdata$r:0000150D                 db    0
.rdata$r:0000150E                 db    0
.rdata$r:0000150F                 db    0
.rdata$r:00001510                 db    4
.rdata$r:00001511                 db    0
.rdata$r:00001512                 db    0
.rdata$r:00001513                 db    0
.rdata$r:00001514                 db    0
.rdata$r:00001515                 db    0
.rdata$r:00001516                 db    0
.rdata$r:00001517                 db    0
.rdata$r:00001518                 dd offset ??_R0?AVCInFileStream@@@8 ; CInFileStream `RTTI Type Descriptor'
.rdata$r:0000151C                 dd offset ??_R3CInFileStream@@8 ; CInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000151C _rdata$r        ends
.rdata$r:0000151C
.rdata$r:00001520 ; ===========================================================================
.rdata$r:00001520
.rdata$r:00001520 ; Segment type: Pure data
.rdata$r:00001520 ; Segment permissions: Read
.rdata$r:00001520 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001520                 assume cs:_rdata$r
.rdata$r:00001520                 ;org 1520h
.rdata$r:00001520 ; COMDAT (pick any)
.rdata$r:00001520                 public ??_R4CInFileStream@@6BIStreamGetProps@@@
.rdata$r:00001520 ; const CInFileStream::`RTTI Complete Object Locator'{for `IStreamGetProps'}
.rdata$r:00001520 ??_R4CInFileStream@@6BIStreamGetProps@@@ db    0
.rdata$r:00001520                                         ; DATA XREF: .rdata:00001100o
.rdata$r:00001521                 db    0
.rdata$r:00001522                 db    0
.rdata$r:00001523                 db    0
.rdata$r:00001524                 db    8
.rdata$r:00001525                 db    0
.rdata$r:00001526                 db    0
.rdata$r:00001527                 db    0
.rdata$r:00001528                 db    0
.rdata$r:00001529                 db    0
.rdata$r:0000152A                 db    0
.rdata$r:0000152B                 db    0
.rdata$r:0000152C                 dd offset ??_R0?AVCInFileStream@@@8 ; CInFileStream `RTTI Type Descriptor'
.rdata$r:00001530                 dd offset ??_R3CInFileStream@@8 ; CInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001530 _rdata$r        ends
.rdata$r:00001530
.rdata$r:00001534 ; ===========================================================================
.rdata$r:00001534
.rdata$r:00001534 ; Segment type: Pure data
.rdata$r:00001534 ; Segment permissions: Read
.rdata$r:00001534 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001534                 assume cs:_rdata$r
.rdata$r:00001534                 ;org 1534h
.rdata$r:00001534 ; COMDAT (pick any)
.rdata$r:00001534                 public ??_R4CInFileStream@@6BIStreamGetProps2@@@
.rdata$r:00001534 ; const CInFileStream::`RTTI Complete Object Locator'{for `IStreamGetProps2'}
.rdata$r:00001534 ??_R4CInFileStream@@6BIStreamGetProps2@@@ db    0
.rdata$r:00001534                                         ; DATA XREF: .rdata:000010ECo
.rdata$r:00001535                 db    0
.rdata$r:00001536                 db    0
.rdata$r:00001537                 db    0
.rdata$r:00001538                 db  0Ch
.rdata$r:00001539                 db    0
.rdata$r:0000153A                 db    0
.rdata$r:0000153B                 db    0
.rdata$r:0000153C                 db    0
.rdata$r:0000153D                 db    0
.rdata$r:0000153E                 db    0
.rdata$r:0000153F                 db    0
.rdata$r:00001540                 dd offset ??_R0?AVCInFileStream@@@8 ; CInFileStream `RTTI Type Descriptor'
.rdata$r:00001544                 dd offset ??_R3CInFileStream@@8 ; CInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001544 _rdata$r        ends
.rdata$r:00001544
.text:00001548 ; ===========================================================================
.text:00001548
.text:00001548 ; Segment type: Pure code
.text:00001548 ; Segment permissions: Read/Execute
.text:00001548 _text           segment para public 'CODE' use32
.text:00001548                 assume cs:_text
.text:00001548                 ;org 1548h
.text:00001548 ; COMDAT (pick any)
.text:00001548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001548
.text:00001548 ; =============== S U B R O U T I N E =======================================
.text:00001548
.text:00001548 ; Attributes: bp-based frame
.text:00001548
.text:00001548 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00001548                 public ??0CMyUnknownImp@@QAE@XZ
.text:00001548 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CInFileStream::CInFileStream(void)+3Dp
.text:00001548
.text:00001548 var_4           = dword ptr -4
.text:00001548
.text:00001548                 push    ebp
.text:00001549                 mov     ebp, esp
.text:0000154B                 push    ecx
.text:0000154C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001553                 mov     [ebp+var_4], ecx
.text:00001556                 mov     eax, [ebp+var_4]
.text:00001559                 mov     dword ptr [eax], 0
.text:0000155F                 mov     eax, [ebp+var_4]
.text:00001562                 mov     esp, ebp
.text:00001564                 pop     ebp
.text:00001565                 retn
.text:00001565 ??0CMyUnknownImp@@QAE@XZ endp
.text:00001565
.text:00001565 ; ---------------------------------------------------------------------------
.text:00001566                 align 4
.text:00001566 _text           ends
.text:00001566
.text:00001568 ; ===========================================================================
.text:00001568
.text:00001568 ; Segment type: Pure code
.text:00001568 ; Segment permissions: Read/Execute
.text:00001568 _text           segment para public 'CODE' use32
.text:00001568                 assume cs:_text
.text:00001568                 ;org 1568h
.text:00001568 ; COMDAT (pick any)
.text:00001568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001568
.text:00001568 ; =============== S U B R O U T I N E =======================================
.text:00001568
.text:00001568 ; Attributes: bp-based frame
.text:00001568
.text:00001568 ; __int32 __stdcall CInFileStream::QueryInterface(CInFileStream *this, const struct _GUID *Buf1, void **)
.text:00001568                 public ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z
.text:00001568 ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00001568                                         ; CODE XREF: [thunk]:CInFileStream::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00001568                                         ; [thunk]:CInFileStream::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00001568
.text:00001568 var_C           = dword ptr -0Ch
.text:00001568 var_8           = dword ptr -8
.text:00001568 var_4           = dword ptr -4
.text:00001568 this            = dword ptr  8
.text:00001568 Buf1            = dword ptr  0Ch
.text:00001568 arg_8           = dword ptr  10h
.text:00001568
.text:00001568                 push    ebp
.text:00001569                 mov     ebp, esp
.text:0000156B                 sub     esp, 0Ch
.text:0000156E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001575                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000157C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001583                 mov     eax, [ebp+arg_8]
.text:00001586                 mov     dword ptr [eax], 0
.text:0000158C                 push    offset _IID_IUnknown ; Buf2
.text:00001591                 mov     ecx, [ebp+Buf1]
.text:00001594                 push    ecx             ; Buf1
.text:00001595                 call    ___@8           ; __(x,x)
.text:0000159A                 test    eax, eax
.text:0000159C                 jz      short loc_15AB
.text:0000159E                 mov     edx, [ebp+arg_8]
.text:000015A1                 mov     eax, [ebp+this]
.text:000015A4                 mov     [edx], eax
.text:000015A6                 jmp     loc_166D
.text:000015AB ; ---------------------------------------------------------------------------
.text:000015AB
.text:000015AB loc_15AB:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+34j
.text:000015AB                 push    offset _IID_IInStream ; Buf2
.text:000015B0                 mov     ecx, [ebp+Buf1]
.text:000015B3                 push    ecx             ; Buf1
.text:000015B4                 call    ___@8           ; __(x,x)
.text:000015B9                 test    eax, eax
.text:000015BB                 jz      short loc_15CA
.text:000015BD                 mov     edx, [ebp+arg_8]
.text:000015C0                 mov     eax, [ebp+this]
.text:000015C3                 mov     [edx], eax
.text:000015C5                 jmp     loc_166D
.text:000015CA ; ---------------------------------------------------------------------------
.text:000015CA
.text:000015CA loc_15CA:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+53j
.text:000015CA                 push    offset _IID_IStreamGetSize ; Buf2
.text:000015CF                 mov     ecx, [ebp+Buf1]
.text:000015D2                 push    ecx             ; Buf1
.text:000015D3                 call    ___@8           ; __(x,x)
.text:000015D8                 test    eax, eax
.text:000015DA                 jz      short loc_15FE
.text:000015DC                 cmp     [ebp+this], 0
.text:000015E0                 jz      short loc_15ED
.text:000015E2                 mov     edx, [ebp+this]
.text:000015E5                 add     edx, 4
.text:000015E8                 mov     [ebp+var_4], edx
.text:000015EB                 jmp     short loc_15F4
.text:000015ED ; ---------------------------------------------------------------------------
.text:000015ED
.text:000015ED loc_15ED:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+78j
.text:000015ED                 mov     [ebp+var_4], 0
.text:000015F4
.text:000015F4 loc_15F4:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+83j
.text:000015F4                 mov     eax, [ebp+arg_8]
.text:000015F7                 mov     ecx, [ebp+var_4]
.text:000015FA                 mov     [eax], ecx
.text:000015FC                 jmp     short loc_166D
.text:000015FE ; ---------------------------------------------------------------------------
.text:000015FE
.text:000015FE loc_15FE:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+72j
.text:000015FE                 push    offset _IID_IStreamGetProps ; Buf2
.text:00001603                 mov     edx, [ebp+Buf1]
.text:00001606                 push    edx             ; Buf1
.text:00001607                 call    ___@8           ; __(x,x)
.text:0000160C                 test    eax, eax
.text:0000160E                 jz      short loc_1632
.text:00001610                 cmp     [ebp+this], 0
.text:00001614                 jz      short loc_1621
.text:00001616                 mov     eax, [ebp+this]
.text:00001619                 add     eax, 8
.text:0000161C                 mov     [ebp+var_8], eax
.text:0000161F                 jmp     short loc_1628
.text:00001621 ; ---------------------------------------------------------------------------
.text:00001621
.text:00001621 loc_1621:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+ACj
.text:00001621                 mov     [ebp+var_8], 0
.text:00001628
.text:00001628 loc_1628:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+B7j
.text:00001628                 mov     ecx, [ebp+arg_8]
.text:0000162B                 mov     edx, [ebp+var_8]
.text:0000162E                 mov     [ecx], edx
.text:00001630                 jmp     short loc_166D
.text:00001632 ; ---------------------------------------------------------------------------
.text:00001632
.text:00001632 loc_1632:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+A6j
.text:00001632                 push    offset _IID_IStreamGetProps2 ; Buf2
.text:00001637                 mov     eax, [ebp+Buf1]
.text:0000163A                 push    eax             ; Buf1
.text:0000163B                 call    ___@8           ; __(x,x)
.text:00001640                 test    eax, eax
.text:00001642                 jz      short loc_1666
.text:00001644                 cmp     [ebp+this], 0
.text:00001648                 jz      short loc_1655
.text:0000164A                 mov     ecx, [ebp+this]
.text:0000164D                 add     ecx, 0Ch
.text:00001650                 mov     [ebp+var_C], ecx
.text:00001653                 jmp     short loc_165C
.text:00001655 ; ---------------------------------------------------------------------------
.text:00001655
.text:00001655 loc_1655:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+E0j
.text:00001655                 mov     [ebp+var_C], 0
.text:0000165C
.text:0000165C loc_165C:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+EBj
.text:0000165C                 mov     edx, [ebp+arg_8]
.text:0000165F                 mov     eax, [ebp+var_C]
.text:00001662                 mov     [edx], eax
.text:00001664                 jmp     short loc_166D
.text:00001666 ; ---------------------------------------------------------------------------
.text:00001666
.text:00001666 loc_1666:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+DAj
.text:00001666                 mov     eax, 80004002h
.text:0000166B                 jmp     short loc_167E
.text:0000166D ; ---------------------------------------------------------------------------
.text:0000166D
.text:0000166D loc_166D:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+3Ej
.text:0000166D                                         ; CInFileStream::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:0000166D                 mov     ecx, [ebp+this]
.text:00001670                 mov     edx, [ecx+10h]
.text:00001673                 add     edx, 1
.text:00001676                 mov     eax, [ebp+this]
.text:00001679                 mov     [eax+10h], edx
.text:0000167C                 xor     eax, eax
.text:0000167E
.text:0000167E loc_167E:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+103j
.text:0000167E                 add     esp, 0Ch
.text:00001681                 cmp     ebp, esp
.text:00001683                 call    __RTC_CheckEsp
.text:00001688                 mov     esp, ebp
.text:0000168A                 pop     ebp
.text:0000168B                 retn    0Ch
.text:0000168B ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000168B
.text:0000168B ; ---------------------------------------------------------------------------
.text:0000168E                 align 10h
.text:0000168E _text           ends
.text:0000168E
.text:00001690 ; ===========================================================================
.text:00001690
.text:00001690 ; Segment type: Pure code
.text:00001690 ; Segment permissions: Read/Execute
.text:00001690 _text           segment para public 'CODE' use32
.text:00001690                 assume cs:_text
.text:00001690                 ;org 1690h
.text:00001690 ; COMDAT (pick any)
.text:00001690                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001690
.text:00001690 ; =============== S U B R O U T I N E =======================================
.text:00001690
.text:00001690 ; Attributes: bp-based frame
.text:00001690
.text:00001690 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00001690                 public ___@8
.text:00001690 ___@8           proc near               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+2Dp
.text:00001690                                         ; CInFileStream::QueryInterface(_GUID const &,void * *)+4Cp ...
.text:00001690
.text:00001690 Buf1            = dword ptr  8
.text:00001690 Buf2            = dword ptr  0Ch
.text:00001690
.text:00001690                 push    ebp
.text:00001691                 mov     ebp, esp
.text:00001693                 mov     eax, [ebp+Buf2]
.text:00001696                 push    eax             ; Buf2
.text:00001697                 mov     ecx, [ebp+Buf1]
.text:0000169A                 push    ecx             ; Buf1
.text:0000169B                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000016A0                 cmp     ebp, esp
.text:000016A2                 call    __RTC_CheckEsp
.text:000016A7                 pop     ebp
.text:000016A8                 retn    8
.text:000016A8 ___@8           endp
.text:000016A8
.text:000016A8 ; ---------------------------------------------------------------------------
.text:000016AB                 align 4
.text:000016AB _text           ends
.text:000016AB
.text:000016AC ; ===========================================================================
.text:000016AC
.text:000016AC ; Segment type: Pure code
.text:000016AC ; Segment permissions: Read/Execute
.text:000016AC _text           segment para public 'CODE' use32
.text:000016AC                 assume cs:_text
.text:000016AC                 ;org 16ACh
.text:000016AC ; COMDAT (pick any)
.text:000016AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016AC
.text:000016AC ; =============== S U B R O U T I N E =======================================
.text:000016AC
.text:000016AC ; Attributes: bp-based frame
.text:000016AC
.text:000016AC ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000016AC                 public _IsEqualGUID@8
.text:000016AC _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000016AC
.text:000016AC Buf1            = dword ptr  8
.text:000016AC Buf2            = dword ptr  0Ch
.text:000016AC
.text:000016AC                 push    ebp
.text:000016AD                 mov     ebp, esp
.text:000016AF                 push    10h             ; Size
.text:000016B1                 mov     eax, [ebp+Buf2]
.text:000016B4                 push    eax             ; Buf2
.text:000016B5                 mov     ecx, [ebp+Buf1]
.text:000016B8                 push    ecx             ; Buf1
.text:000016B9                 call    _memcmp
.text:000016BE                 add     esp, 0Ch
.text:000016C1                 neg     eax
.text:000016C3                 sbb     eax, eax
.text:000016C5                 add     eax, 1
.text:000016C8                 cmp     ebp, esp
.text:000016CA                 call    __RTC_CheckEsp
.text:000016CF                 pop     ebp
.text:000016D0                 retn    8
.text:000016D0 _IsEqualGUID@8  endp
.text:000016D0
.text:000016D0 ; ---------------------------------------------------------------------------
.text:000016D3                 align 4
.text:000016D3 _text           ends
.text:000016D3
.text:000016D4 ; ===========================================================================
.text:000016D4
.text:000016D4 ; Segment type: Pure code
.text:000016D4 ; Segment permissions: Read/Execute
.text:000016D4 _text           segment para public 'CODE' use32
.text:000016D4                 assume cs:_text
.text:000016D4                 ;org 16D4h
.text:000016D4 ; COMDAT (pick any)
.text:000016D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016D4
.text:000016D4 ; =============== S U B R O U T I N E =======================================
.text:000016D4
.text:000016D4 ; Attributes: bp-based frame
.text:000016D4
.text:000016D4 ; unsigned __int32 __stdcall CInFileStream::AddRef(CInFileStream *this)
.text:000016D4                 public ?AddRef@CInFileStream@@UAGKXZ
.text:000016D4 ?AddRef@CInFileStream@@UAGKXZ proc near ; CODE XREF: [thunk]:CInFileStream::AddRef`adjustor{12}' (void)+5j
.text:000016D4                                         ; [thunk]:CInFileStream::AddRef`adjustor{4}' (void)+5j ...
.text:000016D4
.text:000016D4 var_4           = dword ptr -4
.text:000016D4 this            = dword ptr  8
.text:000016D4
.text:000016D4                 push    ebp
.text:000016D5                 mov     ebp, esp
.text:000016D7                 push    ecx
.text:000016D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016DF                 mov     eax, [ebp+this]
.text:000016E2                 mov     ecx, [eax+10h]
.text:000016E5                 add     ecx, 1
.text:000016E8                 mov     [ebp+var_4], ecx
.text:000016EB                 mov     edx, [ebp+this]
.text:000016EE                 mov     eax, [ebp+var_4]
.text:000016F1                 mov     [edx+10h], eax
.text:000016F4                 mov     eax, [ebp+var_4]
.text:000016F7                 mov     esp, ebp
.text:000016F9                 pop     ebp
.text:000016FA                 retn    4
.text:000016FA ?AddRef@CInFileStream@@UAGKXZ endp
.text:000016FA
.text:000016FA ; ---------------------------------------------------------------------------
.text:000016FD                 align 10h
.text:000016FD _text           ends
.text:000016FD
.text:00001700 ; ===========================================================================
.text:00001700
.text:00001700 ; Segment type: Pure code
.text:00001700 ; Segment permissions: Read/Execute
.text:00001700 _text           segment para public 'CODE' use32
.text:00001700                 assume cs:_text
.text:00001700                 ;org 1700h
.text:00001700 ; COMDAT (pick any)
.text:00001700                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001700
.text:00001700 ; =============== S U B R O U T I N E =======================================
.text:00001700
.text:00001700 ; Attributes: bp-based frame
.text:00001700
.text:00001700 ; unsigned __int32 __stdcall CInFileStream::Release(CInFileStream *this)
.text:00001700                 public ?Release@CInFileStream@@UAGKXZ
.text:00001700 ?Release@CInFileStream@@UAGKXZ proc near
.text:00001700                                         ; CODE XREF: [thunk]:CInFileStream::Release`adjustor{4}' (void)+5j
.text:00001700                                         ; [thunk]:CInFileStream::Release`adjustor{8}' (void)+5j ...
.text:00001700
.text:00001700 var_10          = dword ptr -10h
.text:00001700 var_C           = dword ptr -0Ch
.text:00001700 var_8           = dword ptr -8
.text:00001700 var_4           = dword ptr -4
.text:00001700 this            = dword ptr  8
.text:00001700
.text:00001700                 push    ebp
.text:00001701                 mov     ebp, esp
.text:00001703                 sub     esp, 10h
.text:00001706                 push    esi
.text:00001707                 mov     eax, 0CCCCCCCCh
.text:0000170C                 mov     [ebp+var_10], eax
.text:0000170F                 mov     [ebp+var_C], eax
.text:00001712                 mov     [ebp+var_8], eax
.text:00001715                 mov     [ebp+var_4], eax
.text:00001718                 mov     eax, [ebp+this]
.text:0000171B                 mov     ecx, [eax+10h]
.text:0000171E                 sub     ecx, 1
.text:00001721                 mov     [ebp+var_C], ecx
.text:00001724                 mov     edx, [ebp+this]
.text:00001727                 mov     eax, [ebp+var_C]
.text:0000172A                 mov     [edx+10h], eax
.text:0000172D                 cmp     [ebp+var_C], 0
.text:00001731                 jz      short loc_173B
.text:00001733                 mov     ecx, [ebp+this]
.text:00001736                 mov     eax, [ecx+10h]
.text:00001739                 jmp     short loc_1773
.text:0000173B ; ---------------------------------------------------------------------------
.text:0000173B
.text:0000173B loc_173B:                               ; CODE XREF: CInFileStream::Release(void)+31j
.text:0000173B                 mov     edx, [ebp+this]
.text:0000173E                 mov     [ebp+var_8], edx
.text:00001741                 mov     eax, [ebp+var_8]
.text:00001744                 mov     [ebp+var_4], eax
.text:00001747                 cmp     [ebp+var_4], 0
.text:0000174B                 jz      short loc_176A
.text:0000174D                 mov     esi, esp
.text:0000174F                 push    1
.text:00001751                 mov     ecx, [ebp+var_4]
.text:00001754                 mov     edx, [ecx]
.text:00001756                 mov     ecx, [ebp+var_4]
.text:00001759                 mov     eax, [edx+14h]
.text:0000175C                 call    eax
.text:0000175E                 cmp     esi, esp
.text:00001760                 call    __RTC_CheckEsp
.text:00001765                 mov     [ebp+var_10], eax
.text:00001768                 jmp     short loc_1771
.text:0000176A ; ---------------------------------------------------------------------------
.text:0000176A
.text:0000176A loc_176A:                               ; CODE XREF: CInFileStream::Release(void)+4Bj
.text:0000176A                 mov     [ebp+var_10], 0
.text:00001771
.text:00001771 loc_1771:                               ; CODE XREF: CInFileStream::Release(void)+68j
.text:00001771                 xor     eax, eax
.text:00001773
.text:00001773 loc_1773:                               ; CODE XREF: CInFileStream::Release(void)+39j
.text:00001773                 pop     esi
.text:00001774                 add     esp, 10h
.text:00001777                 cmp     ebp, esp
.text:00001779                 call    __RTC_CheckEsp
.text:0000177E                 mov     esp, ebp
.text:00001780                 pop     ebp
.text:00001781                 retn    4
.text:00001781 ?Release@CInFileStream@@UAGKXZ endp
.text:00001781
.text:00001781 _text           ends
.text:00001781
.text:00001784 ; ===========================================================================
.text:00001784
.text:00001784 ; Segment type: Pure code
.text:00001784 ; Segment permissions: Read/Execute
.text:00001784 _text           segment para public 'CODE' use32
.text:00001784                 assume cs:_text
.text:00001784                 ;org 1784h
.text:00001784 ; COMDAT (pick any)
.text:00001784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001784
.text:00001784 ; =============== S U B R O U T I N E =======================================
.text:00001784
.text:00001784 ; Attributes: bp-based frame
.text:00001784
.text:00001784 ; public: virtual void * __thiscall CInFileStream::`scalar deleting destructor'(unsigned int)
.text:00001784                 public ??_GCInFileStream@@UAEPAXI@Z
.text:00001784 ??_GCInFileStream@@UAEPAXI@Z proc near
.text:00001784
.text:00001784 var_4           = dword ptr -4
.text:00001784 arg_0           = dword ptr  8
.text:00001784
.text:00001784                 push    ebp
.text:00001785                 mov     ebp, esp
.text:00001787                 push    ecx
.text:00001788                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000178F                 mov     [ebp+var_4], ecx
.text:00001792                 mov     ecx, [ebp+var_4] ; this
.text:00001795                 call    ??1CInFileStream@@UAE@XZ ; CInFileStream::~CInFileStream(void)
.text:0000179A                 mov     eax, [ebp+arg_0]
.text:0000179D                 and     eax, 1
.text:000017A0                 jz      short loc_17AE
.text:000017A2                 mov     ecx, [ebp+var_4]
.text:000017A5                 push    ecx             ; void *
.text:000017A6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000017AB                 add     esp, 4
.text:000017AE
.text:000017AE loc_17AE:                               ; CODE XREF: CInFileStream::`scalar deleting destructor'(uint)+1Cj
.text:000017AE                 mov     eax, [ebp+var_4]
.text:000017B1                 add     esp, 4
.text:000017B4                 cmp     ebp, esp
.text:000017B6                 call    __RTC_CheckEsp
.text:000017BB                 mov     esp, ebp
.text:000017BD                 pop     ebp
.text:000017BE                 retn    4
.text:000017BE ??_GCInFileStream@@UAEPAXI@Z endp
.text:000017BE
.text:000017BE ; ---------------------------------------------------------------------------
.text:000017C1                 align 4
.text:000017C1 _text           ends
.text:000017C1
.text:000017C4 ; ===========================================================================
.text:000017C4
.text:000017C4 ; Segment type: Pure code
.text:000017C4 ; Segment permissions: Read/Execute
.text:000017C4 _text           segment para public 'CODE' use32
.text:000017C4                 assume cs:_text
.text:000017C4                 ;org 17C4h
.text:000017C4 ; COMDAT (pick any)
.text:000017C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000017C4
.text:000017C4 ; =============== S U B R O U T I N E =======================================
.text:000017C4
.text:000017C4 ; Attributes: bp-based frame
.text:000017C4
.text:000017C4 ; _DWORD __thiscall IInStream::IInStream(IInStream *__hidden this)
.text:000017C4                 public ??0IInStream@@QAE@XZ
.text:000017C4 ??0IInStream@@QAE@XZ proc near          ; CODE XREF: CInFileStream::CInFileStream(void)+11p
.text:000017C4
.text:000017C4 var_4           = dword ptr -4
.text:000017C4
.text:000017C4                 push    ebp
.text:000017C5                 mov     ebp, esp
.text:000017C7                 push    ecx
.text:000017C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017CF                 mov     [ebp+var_4], ecx
.text:000017D2                 mov     ecx, [ebp+var_4] ; this
.text:000017D5                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:000017DA                 mov     eax, [ebp+var_4]
.text:000017DD                 mov     dword ptr [eax], offset ??_7IInStream@@6B@ ; const IInStream::`vftable'
.text:000017E3                 mov     eax, [ebp+var_4]
.text:000017E6                 add     esp, 4
.text:000017E9                 cmp     ebp, esp
.text:000017EB                 call    __RTC_CheckEsp
.text:000017F0                 mov     esp, ebp
.text:000017F2                 pop     ebp
.text:000017F3                 retn
.text:000017F3 ??0IInStream@@QAE@XZ endp
.text:000017F3
.text:000017F3 _text           ends
.text:000017F3
.rdata:000017F4 ; ===========================================================================
.rdata:000017F4
.rdata:000017F4 ; Segment type: Pure data
.rdata:000017F4 ; Segment permissions: Read
.rdata:000017F4 _rdata          segment dword public 'DATA' use32
.rdata:000017F4                 assume cs:_rdata
.rdata:000017F4                 ;org 17F4h
.rdata:000017F4 ; COMDAT (pick largest)
.rdata:000017F4                 dd offset ??_R4IInStream@@6B@ ; const IInStream::`RTTI Complete Object Locator'
.rdata:000017F8                 public ??_7IInStream@@6B@
.rdata:000017F8 ; const IInStream::`vftable'
.rdata:000017F8 ??_7IInStream@@6B@ dd offset __purecall ; DATA XREF: IInStream::IInStream(void)+19o
.rdata:000017FC                 dd offset __purecall
.rdata:00001800                 dd offset __purecall
.rdata:00001804                 dd offset __purecall
.rdata:00001808                 dd offset __purecall
.rdata:00001808 _rdata          ends
.rdata:00001808
.rdata$r:0000180C ; ===========================================================================
.rdata$r:0000180C
.rdata$r:0000180C ; Segment type: Pure data
.rdata$r:0000180C ; Segment permissions: Read
.rdata$r:0000180C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000180C                 assume cs:_rdata$r
.rdata$r:0000180C                 ;org 180Ch
.rdata$r:0000180C ; COMDAT (pick any)
.rdata$r:0000180C                 public ??_R4IInStream@@6B@
.rdata$r:0000180C ; const IInStream::`RTTI Complete Object Locator'
.rdata$r:0000180C ??_R4IInStream@@6B@ db    0             ; DATA XREF: .rdata:000017F4o
.rdata$r:0000180D                 db    0
.rdata$r:0000180E                 db    0
.rdata$r:0000180F                 db    0
.rdata$r:00001810                 db    0
.rdata$r:00001811                 db    0
.rdata$r:00001812                 db    0
.rdata$r:00001813                 db    0
.rdata$r:00001814                 db    0
.rdata$r:00001815                 db    0
.rdata$r:00001816                 db    0
.rdata$r:00001817                 db    0
.rdata$r:00001818                 dd offset ??_R0?AUIInStream@@@8 ; IInStream `RTTI Type Descriptor'
.rdata$r:0000181C                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000181C _rdata$r        ends
.rdata$r:0000181C
.text:00001820 ; ===========================================================================
.text:00001820
.text:00001820 ; Segment type: Pure code
.text:00001820 ; Segment permissions: Read/Execute
.text:00001820 _text           segment para public 'CODE' use32
.text:00001820                 assume cs:_text
.text:00001820                 ;org 1820h
.text:00001820 ; COMDAT (pick any)
.text:00001820                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001820
.text:00001820 ; =============== S U B R O U T I N E =======================================
.text:00001820
.text:00001820 ; Attributes: bp-based frame
.text:00001820
.text:00001820 ; _DWORD __thiscall IStreamGetSize::IStreamGetSize(IStreamGetSize *__hidden this)
.text:00001820                 public ??0IStreamGetSize@@QAE@XZ
.text:00001820 ??0IStreamGetSize@@QAE@XZ proc near     ; CODE XREF: CInFileStream::CInFileStream(void)+1Cp
.text:00001820
.text:00001820 var_4           = dword ptr -4
.text:00001820
.text:00001820                 push    ebp
.text:00001821                 mov     ebp, esp
.text:00001823                 push    ecx
.text:00001824                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000182B                 mov     [ebp+var_4], ecx
.text:0000182E                 mov     ecx, [ebp+var_4]
.text:00001831                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001836                 mov     eax, [ebp+var_4]
.text:00001839                 mov     dword ptr [eax], offset ??_7IStreamGetSize@@6B@ ; const IStreamGetSize::`vftable'
.text:0000183F                 mov     eax, [ebp+var_4]
.text:00001842                 add     esp, 4
.text:00001845                 cmp     ebp, esp
.text:00001847                 call    __RTC_CheckEsp
.text:0000184C                 mov     esp, ebp
.text:0000184E                 pop     ebp
.text:0000184F                 retn
.text:0000184F ??0IStreamGetSize@@QAE@XZ endp
.text:0000184F
.text:0000184F _text           ends
.text:0000184F
.rdata:00001850 ; ===========================================================================
.rdata:00001850
.rdata:00001850 ; Segment type: Pure data
.rdata:00001850 ; Segment permissions: Read
.rdata:00001850 _rdata          segment dword public 'DATA' use32
.rdata:00001850                 assume cs:_rdata
.rdata:00001850                 ;org 1850h
.rdata:00001850 ; COMDAT (pick largest)
.rdata:00001850                 dd offset ??_R4IStreamGetSize@@6B@ ; const IStreamGetSize::`RTTI Complete Object Locator'
.rdata:00001854                 public ??_7IStreamGetSize@@6B@
.rdata:00001854 ; const IStreamGetSize::`vftable'
.rdata:00001854 ??_7IStreamGetSize@@6B@ dd offset __purecall
.rdata:00001854                                         ; DATA XREF: IStreamGetSize::IStreamGetSize(void)+19o
.rdata:00001858                 dd offset __purecall
.rdata:0000185C                 dd offset __purecall
.rdata:00001860                 dd offset __purecall
.rdata:00001860 _rdata          ends
.rdata:00001860
.rdata$r:00001864 ; ===========================================================================
.rdata$r:00001864
.rdata$r:00001864 ; Segment type: Pure data
.rdata$r:00001864 ; Segment permissions: Read
.rdata$r:00001864 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001864                 assume cs:_rdata$r
.rdata$r:00001864                 ;org 1864h
.rdata$r:00001864 ; COMDAT (pick any)
.rdata$r:00001864                 public ??_R4IStreamGetSize@@6B@
.rdata$r:00001864 ; const IStreamGetSize::`RTTI Complete Object Locator'
.rdata$r:00001864 ??_R4IStreamGetSize@@6B@ db    0        ; DATA XREF: .rdata:00001850o
.rdata$r:00001865                 db    0
.rdata$r:00001866                 db    0
.rdata$r:00001867                 db    0
.rdata$r:00001868                 db    0
.rdata$r:00001869                 db    0
.rdata$r:0000186A                 db    0
.rdata$r:0000186B                 db    0
.rdata$r:0000186C                 db    0
.rdata$r:0000186D                 db    0
.rdata$r:0000186E                 db    0
.rdata$r:0000186F                 db    0
.rdata$r:00001870                 dd offset ??_R0?AUIStreamGetSize@@@8 ; IStreamGetSize `RTTI Type Descriptor'
.rdata$r:00001874                 dd offset ??_R3IStreamGetSize@@8 ; IStreamGetSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001874 _rdata$r        ends
.rdata$r:00001874
.text:00001878 ; ===========================================================================
.text:00001878
.text:00001878 ; Segment type: Pure code
.text:00001878 ; Segment permissions: Read/Execute
.text:00001878 _text           segment para public 'CODE' use32
.text:00001878                 assume cs:_text
.text:00001878                 ;org 1878h
.text:00001878 ; COMDAT (pick any)
.text:00001878                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001878
.text:00001878 ; =============== S U B R O U T I N E =======================================
.text:00001878
.text:00001878 ; Attributes: bp-based frame
.text:00001878
.text:00001878 ; public: __thiscall IUnknown::IUnknown(void)
.text:00001878                 public ??0IUnknown@@QAE@XZ
.text:00001878 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: IStreamGetSize::IStreamGetSize(void)+11p
.text:00001878                                         ; IStreamGetProps::IStreamGetProps(void)+11p ...
.text:00001878
.text:00001878 var_4           = dword ptr -4
.text:00001878
.text:00001878                 push    ebp
.text:00001879                 mov     ebp, esp
.text:0000187B                 push    ecx
.text:0000187C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001883                 mov     [ebp+var_4], ecx
.text:00001886                 mov     eax, [ebp+var_4]
.text:00001889                 mov     esp, ebp
.text:0000188B                 pop     ebp
.text:0000188C                 retn
.text:0000188C ??0IUnknown@@QAE@XZ endp
.text:0000188C
.text:0000188C ; ---------------------------------------------------------------------------
.text:0000188D                 align 10h
.text:0000188D _text           ends
.text:0000188D
.text:00001890 ; ===========================================================================
.text:00001890
.text:00001890 ; Segment type: Pure code
.text:00001890 ; Segment permissions: Read/Execute
.text:00001890 _text           segment para public 'CODE' use32
.text:00001890                 assume cs:_text
.text:00001890                 ;org 1890h
.text:00001890 ; COMDAT (pick any)
.text:00001890                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001890
.text:00001890 ; =============== S U B R O U T I N E =======================================
.text:00001890
.text:00001890 ; Attributes: bp-based frame
.text:00001890
.text:00001890 ; _DWORD __thiscall IStreamGetProps::IStreamGetProps(IStreamGetProps *__hidden this)
.text:00001890                 public ??0IStreamGetProps@@QAE@XZ
.text:00001890 ??0IStreamGetProps@@QAE@XZ proc near    ; CODE XREF: CInFileStream::CInFileStream(void)+27p
.text:00001890
.text:00001890 var_4           = dword ptr -4
.text:00001890
.text:00001890                 push    ebp
.text:00001891                 mov     ebp, esp
.text:00001893                 push    ecx
.text:00001894                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000189B                 mov     [ebp+var_4], ecx
.text:0000189E                 mov     ecx, [ebp+var_4]
.text:000018A1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000018A6                 mov     eax, [ebp+var_4]
.text:000018A9                 mov     dword ptr [eax], offset ??_7IStreamGetProps@@6B@ ; const IStreamGetProps::`vftable'
.text:000018AF                 mov     eax, [ebp+var_4]
.text:000018B2                 add     esp, 4
.text:000018B5                 cmp     ebp, esp
.text:000018B7                 call    __RTC_CheckEsp
.text:000018BC                 mov     esp, ebp
.text:000018BE                 pop     ebp
.text:000018BF                 retn
.text:000018BF ??0IStreamGetProps@@QAE@XZ endp
.text:000018BF
.text:000018BF _text           ends
.text:000018BF
.rdata:000018C0 ; ===========================================================================
.rdata:000018C0
.rdata:000018C0 ; Segment type: Pure data
.rdata:000018C0 ; Segment permissions: Read
.rdata:000018C0 _rdata          segment dword public 'DATA' use32
.rdata:000018C0                 assume cs:_rdata
.rdata:000018C0                 ;org 18C0h
.rdata:000018C0 ; COMDAT (pick largest)
.rdata:000018C0                 dd offset ??_R4IStreamGetProps@@6B@ ; const IStreamGetProps::`RTTI Complete Object Locator'
.rdata:000018C4                 public ??_7IStreamGetProps@@6B@
.rdata:000018C4 ; const IStreamGetProps::`vftable'
.rdata:000018C4 ??_7IStreamGetProps@@6B@ dd offset __purecall
.rdata:000018C4                                         ; DATA XREF: IStreamGetProps::IStreamGetProps(void)+19o
.rdata:000018C8                 dd offset __purecall
.rdata:000018CC                 dd offset __purecall
.rdata:000018D0                 dd offset __purecall
.rdata:000018D0 _rdata          ends
.rdata:000018D0
.rdata$r:000018D4 ; ===========================================================================
.rdata$r:000018D4
.rdata$r:000018D4 ; Segment type: Pure data
.rdata$r:000018D4 ; Segment permissions: Read
.rdata$r:000018D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018D4                 assume cs:_rdata$r
.rdata$r:000018D4                 ;org 18D4h
.rdata$r:000018D4 ; COMDAT (pick any)
.rdata$r:000018D4                 public ??_R4IStreamGetProps@@6B@
.rdata$r:000018D4 ; const IStreamGetProps::`RTTI Complete Object Locator'
.rdata$r:000018D4 ??_R4IStreamGetProps@@6B@ db    0       ; DATA XREF: .rdata:000018C0o
.rdata$r:000018D5                 db    0
.rdata$r:000018D6                 db    0
.rdata$r:000018D7                 db    0
.rdata$r:000018D8                 db    0
.rdata$r:000018D9                 db    0
.rdata$r:000018DA                 db    0
.rdata$r:000018DB                 db    0
.rdata$r:000018DC                 db    0
.rdata$r:000018DD                 db    0
.rdata$r:000018DE                 db    0
.rdata$r:000018DF                 db    0
.rdata$r:000018E0                 dd offset ??_R0?AUIStreamGetProps@@@8 ; IStreamGetProps `RTTI Type Descriptor'
.rdata$r:000018E4                 dd offset ??_R3IStreamGetProps@@8 ; IStreamGetProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:000018E4 _rdata$r        ends
.rdata$r:000018E4
.text:000018E8 ; ===========================================================================
.text:000018E8
.text:000018E8 ; Segment type: Pure code
.text:000018E8 ; Segment permissions: Read/Execute
.text:000018E8 _text           segment para public 'CODE' use32
.text:000018E8                 assume cs:_text
.text:000018E8                 ;org 18E8h
.text:000018E8 ; COMDAT (pick any)
.text:000018E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000018E8
.text:000018E8 ; =============== S U B R O U T I N E =======================================
.text:000018E8
.text:000018E8 ; Attributes: bp-based frame
.text:000018E8
.text:000018E8 ; _DWORD __thiscall IStreamGetProps2::IStreamGetProps2(IStreamGetProps2 *__hidden this)
.text:000018E8                 public ??0IStreamGetProps2@@QAE@XZ
.text:000018E8 ??0IStreamGetProps2@@QAE@XZ proc near   ; CODE XREF: CInFileStream::CInFileStream(void)+32p
.text:000018E8
.text:000018E8 var_4           = dword ptr -4
.text:000018E8
.text:000018E8                 push    ebp
.text:000018E9                 mov     ebp, esp
.text:000018EB                 push    ecx
.text:000018EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018F3                 mov     [ebp+var_4], ecx
.text:000018F6                 mov     ecx, [ebp+var_4]
.text:000018F9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000018FE                 mov     eax, [ebp+var_4]
.text:00001901                 mov     dword ptr [eax], offset ??_7IStreamGetProps2@@6B@ ; const IStreamGetProps2::`vftable'
.text:00001907                 mov     eax, [ebp+var_4]
.text:0000190A                 add     esp, 4
.text:0000190D                 cmp     ebp, esp
.text:0000190F                 call    __RTC_CheckEsp
.text:00001914                 mov     esp, ebp
.text:00001916                 pop     ebp
.text:00001917                 retn
.text:00001917 ??0IStreamGetProps2@@QAE@XZ endp
.text:00001917
.text:00001917 _text           ends
.text:00001917
.rdata:00001918 ; ===========================================================================
.rdata:00001918
.rdata:00001918 ; Segment type: Pure data
.rdata:00001918 ; Segment permissions: Read
.rdata:00001918 _rdata          segment dword public 'DATA' use32
.rdata:00001918                 assume cs:_rdata
.rdata:00001918                 ;org 1918h
.rdata:00001918 ; COMDAT (pick largest)
.rdata:00001918                 dd offset ??_R4IStreamGetProps2@@6B@ ; const IStreamGetProps2::`RTTI Complete Object Locator'
.rdata:0000191C                 public ??_7IStreamGetProps2@@6B@
.rdata:0000191C ; const IStreamGetProps2::`vftable'
.rdata:0000191C ??_7IStreamGetProps2@@6B@ dd offset __purecall
.rdata:0000191C                                         ; DATA XREF: IStreamGetProps2::IStreamGetProps2(void)+19o
.rdata:00001920                 dd offset __purecall
.rdata:00001924                 dd offset __purecall
.rdata:00001928                 dd offset __purecall
.rdata:00001928 _rdata          ends
.rdata:00001928
.rdata$r:0000192C ; ===========================================================================
.rdata$r:0000192C
.rdata$r:0000192C ; Segment type: Pure data
.rdata$r:0000192C ; Segment permissions: Read
.rdata$r:0000192C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000192C                 assume cs:_rdata$r
.rdata$r:0000192C                 ;org 192Ch
.rdata$r:0000192C ; COMDAT (pick any)
.rdata$r:0000192C                 public ??_R4IStreamGetProps2@@6B@
.rdata$r:0000192C ; const IStreamGetProps2::`RTTI Complete Object Locator'
.rdata$r:0000192C ??_R4IStreamGetProps2@@6B@ db    0      ; DATA XREF: .rdata:00001918o
.rdata$r:0000192D                 db    0
.rdata$r:0000192E                 db    0
.rdata$r:0000192F                 db    0
.rdata$r:00001930                 db    0
.rdata$r:00001931                 db    0
.rdata$r:00001932                 db    0
.rdata$r:00001933                 db    0
.rdata$r:00001934                 db    0
.rdata$r:00001935                 db    0
.rdata$r:00001936                 db    0
.rdata$r:00001937                 db    0
.rdata$r:00001938                 dd offset ??_R0?AUIStreamGetProps2@@@8 ; IStreamGetProps2 `RTTI Type Descriptor'
.rdata$r:0000193C                 dd offset ??_R3IStreamGetProps2@@8 ; IStreamGetProps2::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000193C _rdata$r        ends
.rdata$r:0000193C
.text:00001940 ; ===========================================================================
.text:00001940
.text:00001940 ; Segment type: Pure code
.text:00001940 ; Segment permissions: Read/Execute
.text:00001940 _text           segment para public 'CODE' use32
.text:00001940                 assume cs:_text
.text:00001940                 ;org 1940h
.text:00001940 ; COMDAT (pick any)
.text:00001940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001940
.text:00001940 ; =============== S U B R O U T I N E =======================================
.text:00001940
.text:00001940 ; Attributes: bp-based frame
.text:00001940
.text:00001940 ; _DWORD __thiscall NWindows::NFile::NIO::CInFile::CInFile(NWindows::NFile::NIO::CInFile *__hidden this)
.text:00001940                 public ??0CInFile@NIO@NFile@NWindows@@QAE@XZ
.text:00001940 ??0CInFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00001940                                         ; CODE XREF: CInFileStream::CInFileStream(void)+6Fp
.text:00001940
.text:00001940 var_4           = dword ptr -4
.text:00001940
.text:00001940                 push    ebp
.text:00001941                 mov     ebp, esp
.text:00001943                 push    ecx
.text:00001944                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000194B                 mov     [ebp+var_4], ecx
.text:0000194E                 mov     ecx, [ebp+var_4] ; this
.text:00001951                 call    ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::CFileBase(void)
.text:00001956                 mov     eax, [ebp+var_4]
.text:00001959                 add     esp, 4
.text:0000195C                 cmp     ebp, esp
.text:0000195E                 call    __RTC_CheckEsp
.text:00001963                 mov     esp, ebp
.text:00001965                 pop     ebp
.text:00001966                 retn
.text:00001966 ??0CInFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:00001966
.text:00001966 ; ---------------------------------------------------------------------------
.text:00001967                 align 4
.text:00001967 _text           ends
.text:00001967
.text:00001968 ; ===========================================================================
.text:00001968
.text:00001968 ; Segment type: Pure code
.text:00001968 ; Segment permissions: Read/Execute
.text:00001968 _text           segment para public 'CODE' use32
.text:00001968                 assume cs:_text
.text:00001968                 ;org 1968h
.text:00001968 ; COMDAT (pick any)
.text:00001968                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001968
.text:00001968 ; =============== S U B R O U T I N E =======================================
.text:00001968
.text:00001968 ; Attributes: bp-based frame
.text:00001968
.text:00001968 ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:00001968                 public ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:00001968 ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00001968                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CInFile(void)+11p
.text:00001968
.text:00001968 var_4           = dword ptr -4
.text:00001968
.text:00001968                 push    ebp
.text:00001969                 mov     ebp, esp
.text:0000196B                 push    ecx
.text:0000196C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001973                 mov     [ebp+var_4], ecx
.text:00001976                 mov     eax, [ebp+var_4]
.text:00001979                 mov     dword ptr [eax], 0FFFFFFFFh
.text:0000197F                 mov     eax, [ebp+var_4]
.text:00001982                 mov     esp, ebp
.text:00001984                 pop     ebp
.text:00001985                 retn
.text:00001985 ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:00001985
.text:00001985 ; ---------------------------------------------------------------------------
.text:00001986                 align 4
.text:00001986 _text           ends
.text:00001986
.text:00001988 ; ===========================================================================
.text:00001988
.text:00001988 ; Segment type: Pure code
.text:00001988 ; Segment permissions: Read/Execute
.text:00001988 _text           segment para public 'CODE' use32
.text:00001988                 assume cs:_text
.text:00001988                 ;org 1988h
.text:00001988 ; COMDAT (pick any)
.text:00001988                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001988
.text:00001988 ; =============== S U B R O U T I N E =======================================
.text:00001988
.text:00001988 ; Attributes: bp-based frame
.text:00001988
.text:00001988 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00001988                 public ??0ISequentialInStream@@QAE@XZ
.text:00001988 ??0ISequentialInStream@@QAE@XZ proc near
.text:00001988                                         ; CODE XREF: IInStream::IInStream(void)+11p
.text:00001988
.text:00001988 var_4           = dword ptr -4
.text:00001988
.text:00001988                 push    ebp
.text:00001989                 mov     ebp, esp
.text:0000198B                 push    ecx
.text:0000198C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001993                 mov     [ebp+var_4], ecx
.text:00001996                 mov     ecx, [ebp+var_4]
.text:00001999                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000199E                 mov     eax, [ebp+var_4]
.text:000019A1                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:000019A7                 mov     eax, [ebp+var_4]
.text:000019AA                 add     esp, 4
.text:000019AD                 cmp     ebp, esp
.text:000019AF                 call    __RTC_CheckEsp
.text:000019B4                 mov     esp, ebp
.text:000019B6                 pop     ebp
.text:000019B7                 retn
.text:000019B7 ??0ISequentialInStream@@QAE@XZ endp
.text:000019B7
.text:000019B7 _text           ends
.text:000019B7
.rdata:000019B8 ; ===========================================================================
.rdata:000019B8
.rdata:000019B8 ; Segment type: Pure data
.rdata:000019B8 ; Segment permissions: Read
.rdata:000019B8 _rdata          segment dword public 'DATA' use32
.rdata:000019B8                 assume cs:_rdata
.rdata:000019B8                 ;org 19B8h
.rdata:000019B8 ; COMDAT (pick largest)
.rdata:000019B8                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:000019BC                 public ??_7ISequentialInStream@@6B@
.rdata:000019BC ; const ISequentialInStream::`vftable'
.rdata:000019BC ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:000019BC                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:000019C0                 dd offset __purecall
.rdata:000019C4                 dd offset __purecall
.rdata:000019C8                 dd offset __purecall
.rdata:000019C8 _rdata          ends
.rdata:000019C8
.rdata$r:000019CC ; ===========================================================================
.rdata$r:000019CC
.rdata$r:000019CC ; Segment type: Pure data
.rdata$r:000019CC ; Segment permissions: Read
.rdata$r:000019CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000019CC                 assume cs:_rdata$r
.rdata$r:000019CC                 ;org 19CCh
.rdata$r:000019CC ; COMDAT (pick any)
.rdata$r:000019CC                 public ??_R4ISequentialInStream@@6B@
.rdata$r:000019CC ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:000019CC ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:000019B8o
.rdata$r:000019CD                 db    0
.rdata$r:000019CE                 db    0
.rdata$r:000019CF                 db    0
.rdata$r:000019D0                 db    0
.rdata$r:000019D1                 db    0
.rdata$r:000019D2                 db    0
.rdata$r:000019D3                 db    0
.rdata$r:000019D4                 db    0
.rdata$r:000019D5                 db    0
.rdata$r:000019D6                 db    0
.rdata$r:000019D7                 db    0
.rdata$r:000019D8                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000019DC                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000019DC _rdata$r        ends
.rdata$r:000019DC
.text$x:000019E0 ; ===========================================================================
.text$x:000019E0
.text$x:000019E0 ; Segment type: Pure code
.text$x:000019E0 ; Segment permissions: Read/Execute
.text$x:000019E0 _text$x         segment para public 'CODE' use32
.text$x:000019E0                 assume cs:_text$x
.text$x:000019E0                 ;org 19E0h
.text$x:000019E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000019E0
.text$x:000019E0 ; =============== S U B R O U T I N E =======================================
.text$x:000019E0
.text$x:000019E0
.text$x:000019E0 __unwindfunclet$??1CInFileStream@@UAE@XZ$0 proc near
.text$x:000019E0                                         ; DATA XREF: .xdata$x:00001A0Co
.text$x:000019E0                 mov     ecx, [ebp-10h]
.text$x:000019E3                 add     ecx, 18h        ; this
.text$x:000019E6                 jmp     ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text$x:000019E6 __unwindfunclet$??1CInFileStream@@UAE@XZ$0 endp
.text$x:000019E6
.text$x:000019EB
.text$x:000019EB ; =============== S U B R O U T I N E =======================================
.text$x:000019EB
.text$x:000019EB
.text$x:000019EB __ehhandler$??1CInFileStream@@UAE@XZ proc near
.text$x:000019EB                                         ; DATA XREF: CInFileStream::~CInFileStream(void)+5o
.text$x:000019EB
.text$x:000019EB arg_4           = dword ptr  8
.text$x:000019EB
.text$x:000019EB                 mov     edx, [esp+arg_4]
.text$x:000019EF                 lea     eax, [edx+0Ch]
.text$x:000019F2                 mov     ecx, [edx-0Ch]
.text$x:000019F5                 xor     ecx, eax
.text$x:000019F7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000019FC                 mov     eax, offset __ehfuncinfo$??1CInFileStream@@UAE@XZ
.text$x:00001A01                 jmp     ___CxxFrameHandler3
.text$x:00001A01 __ehhandler$??1CInFileStream@@UAE@XZ endp
.text$x:00001A01
.text$x:00001A01 ; ---------------------------------------------------------------------------
.text$x:00001A06                 align 4
.text$x:00001A06 _text$x         ends
.text$x:00001A06
.xdata$x:00001A08 ; ===========================================================================
.xdata$x:00001A08
.xdata$x:00001A08 ; Segment type: Pure data
.xdata$x:00001A08 ; Segment permissions: Read
.xdata$x:00001A08 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001A08                 assume cs:_xdata$x
.xdata$x:00001A08                 ;org 1A08h
.xdata$x:00001A08 __unwindtable$??1CInFileStream@@UAE@XZ db 0FFh
.xdata$x:00001A08                                         ; DATA XREF: .xdata$x:00001A18o
.xdata$x:00001A09                 db 0FFh
.xdata$x:00001A0A                 db 0FFh
.xdata$x:00001A0B                 db 0FFh
.xdata$x:00001A0C                 dd offset __unwindfunclet$??1CInFileStream@@UAE@XZ$0
.xdata$x:00001A10 __ehfuncinfo$??1CInFileStream@@UAE@XZ db  22h ; "
.xdata$x:00001A10                                         ; DATA XREF: __ehhandler$??1CInFileStream@@UAE@XZ+11o
.xdata$x:00001A11                 db    5
.xdata$x:00001A12                 db  93h ; ô
.xdata$x:00001A13                 db  19h
.xdata$x:00001A14                 db    1
.xdata$x:00001A15                 db    0
.xdata$x:00001A16                 db    0
.xdata$x:00001A17                 db    0
.xdata$x:00001A18                 dd offset __unwindtable$??1CInFileStream@@UAE@XZ
.xdata$x:00001A1C                 db    0
.xdata$x:00001A1D                 db    0
.xdata$x:00001A1E                 db    0
.xdata$x:00001A1F                 db    0
.xdata$x:00001A20                 db    0
.xdata$x:00001A21                 db    0
.xdata$x:00001A22                 db    0
.xdata$x:00001A23                 db    0
.xdata$x:00001A24                 db    0
.xdata$x:00001A25                 db    0
.xdata$x:00001A26                 db    0
.xdata$x:00001A27                 db    0
.xdata$x:00001A28                 db    0
.xdata$x:00001A29                 db    0
.xdata$x:00001A2A                 db    0
.xdata$x:00001A2B                 db    0
.xdata$x:00001A2C                 db    0
.xdata$x:00001A2D                 db    0
.xdata$x:00001A2E                 db    0
.xdata$x:00001A2F                 db    0
.xdata$x:00001A30                 db    1
.xdata$x:00001A31                 db    0
.xdata$x:00001A32                 db    0
.xdata$x:00001A33                 db    0
.xdata$x:00001A33 _xdata$x        ends
.xdata$x:00001A33
.text:00001A34 ; ===========================================================================
.text:00001A34
.text:00001A34 ; Segment type: Pure code
.text:00001A34 ; Segment permissions: Read/Execute
.text:00001A34 _text           segment para public 'CODE' use32
.text:00001A34                 assume cs:_text
.text:00001A34                 ;org 1A34h
.text:00001A34 ; COMDAT (pick any)
.text:00001A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A34
.text:00001A34 ; =============== S U B R O U T I N E =======================================
.text:00001A34
.text:00001A34 ; Attributes: bp-based frame
.text:00001A34
.text:00001A34 ; _DWORD __thiscall NWindows::NFile::NIO::CInFile::~CInFile(NWindows::NFile::NIO::CInFile *__hidden this)
.text:00001A34                 public ??1CInFile@NIO@NFile@NWindows@@QAE@XZ
.text:00001A34 ??1CInFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00001A34                                         ; CODE XREF: CInFileStream::~CInFileStream(void)+A3p
.text:00001A34                                         ; __unwindfunclet$??1CInFileStream@@UAE@XZ$0+6j
.text:00001A34
.text:00001A34 var_4           = dword ptr -4
.text:00001A34
.text:00001A34                 push    ebp
.text:00001A35                 mov     ebp, esp
.text:00001A37                 push    ecx
.text:00001A38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A3F                 mov     [ebp+var_4], ecx
.text:00001A42                 mov     ecx, [ebp+var_4] ; this
.text:00001A45                 call    ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::~CFileBase(void)
.text:00001A4A                 add     esp, 4
.text:00001A4D                 cmp     ebp, esp
.text:00001A4F                 call    __RTC_CheckEsp
.text:00001A54                 mov     esp, ebp
.text:00001A56                 pop     ebp
.text:00001A57                 retn
.text:00001A57 ??1CInFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:00001A57
.text:00001A57 _text           ends
.text:00001A57
.text:00001A58 ; ===========================================================================
.text:00001A58
.text:00001A58 ; Segment type: Pure code
.text:00001A58 ; Segment permissions: Read/Execute
.text:00001A58 _text           segment para public 'CODE' use32
.text:00001A58                 assume cs:_text
.text:00001A58                 ;org 1A58h
.text:00001A58 ; COMDAT (pick any)
.text:00001A58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A58
.text:00001A58 ; =============== S U B R O U T I N E =======================================
.text:00001A58
.text:00001A58 ; Attributes: bp-based frame
.text:00001A58
.text:00001A58 ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::~CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:00001A58                 public ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:00001A58 ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00001A58                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::~CInFile(void)+11p
.text:00001A58
.text:00001A58 var_4           = dword ptr -4
.text:00001A58
.text:00001A58                 push    ebp
.text:00001A59                 mov     ebp, esp
.text:00001A5B                 push    ecx
.text:00001A5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A63                 mov     [ebp+var_4], ecx
.text:00001A66                 mov     ecx, [ebp+var_4] ; this
.text:00001A69                 call    ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close(void)
.text:00001A6E                 add     esp, 4
.text:00001A71                 cmp     ebp, esp
.text:00001A73                 call    __RTC_CheckEsp
.text:00001A78                 mov     esp, ebp
.text:00001A7A                 pop     ebp
.text:00001A7B                 retn
.text:00001A7B ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:00001A7B
.text:00001A7B _text           ends
.text:00001A7B
.text:00001A7C ; ===========================================================================
.text:00001A7C
.text:00001A7C ; Segment type: Pure code
.text:00001A7C ; Segment permissions: Read/Execute
.text:00001A7C _text           segment para public 'CODE' use32
.text:00001A7C                 assume cs:_text
.text:00001A7C                 ;org 1A7Ch
.text:00001A7C ; COMDAT (pick any)
.text:00001A7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A7C
.text:00001A7C ; =============== S U B R O U T I N E =======================================
.text:00001A7C
.text:00001A7C ; Attributes: bp-based frame
.text:00001A7C
.text:00001A7C ; __stdcall HRESULT_FROM_WIN32(x)
.text:00001A7C                 public _HRESULT_FROM_WIN32@4
.text:00001A7C _HRESULT_FROM_WIN32@4 proc near         ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+560p
.text:00001A7C                                         ; ConvertBoolToHRESULT(bool)+3Bp
.text:00001A7C
.text:00001A7C var_4           = dword ptr -4
.text:00001A7C arg_0           = dword ptr  8
.text:00001A7C
.text:00001A7C                 push    ebp
.text:00001A7D                 mov     ebp, esp
.text:00001A7F                 push    ecx
.text:00001A80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A87                 cmp     [ebp+arg_0], 0
.text:00001A8B                 jg      short loc_1A95
.text:00001A8D                 mov     eax, [ebp+arg_0]
.text:00001A90                 mov     [ebp+var_4], eax
.text:00001A93                 jmp     short loc_1AAD
.text:00001A95 ; ---------------------------------------------------------------------------
.text:00001A95
.text:00001A95 loc_1A95:                               ; CODE XREF: HRESULT_FROM_WIN32(x)+Fj
.text:00001A95                 mov     ecx, [ebp+arg_0]
.text:00001A98                 and     ecx, 0FFFFh
.text:00001A9E                 or      ecx, 70000h
.text:00001AA4                 or      ecx, 80000000h
.text:00001AAA                 mov     [ebp+var_4], ecx
.text:00001AAD
.text:00001AAD loc_1AAD:                               ; CODE XREF: HRESULT_FROM_WIN32(x)+17j
.text:00001AAD                 mov     eax, [ebp+var_4]
.text:00001AB0                 mov     esp, ebp
.text:00001AB2                 pop     ebp
.text:00001AB3                 retn    4
.text:00001AB3 _HRESULT_FROM_WIN32@4 endp
.text:00001AB3
.text:00001AB3 ; ---------------------------------------------------------------------------
.text:00001AB6                 align 4
.text:00001AB6 _text           ends
.text:00001AB6
.text:00001AB8 ; ===========================================================================
.text:00001AB8
.text:00001AB8 ; Segment type: Pure code
.text:00001AB8 ; Segment permissions: Read/Execute
.text:00001AB8 _text           segment para public 'CODE' use32
.text:00001AB8                 assume cs:_text
.text:00001AB8                 ;org 1AB8h
.text:00001AB8 ; COMDAT (pick any)
.text:00001AB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AB8
.text:00001AB8 ; =============== S U B R O U T I N E =======================================
.text:00001AB8
.text:00001AB8 ; Attributes: bp-based frame
.text:00001AB8
.text:00001AB8 ; bool __thiscall NWindows::NFile::NIO::CFileBase::GetFileInformation(NWindows::NFile::NIO::CFileBase *this, struct _BY_HANDLE_FILE_INFORMATION *)
.text:00001AB8                 public ?GetFileInformation@CFileBase@NIO@NFile@NWindows@@QBE_NPAU_BY_HANDLE_FILE_INFORMATION@@@Z
.text:00001AB8 ?GetFileInformation@CFileBase@NIO@NFile@NWindows@@QBE_NPAU_BY_HANDLE_FILE_INFORMATION@@@Z proc near
.text:00001AB8                                         ; CODE XREF: CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+2Bp
.text:00001AB8                                         ; CInFileStream::GetProps2(CStreamFileProps *)+2Bp
.text:00001AB8
.text:00001AB8 var_4           = dword ptr -4
.text:00001AB8 lpFileInformation= dword ptr  8
.text:00001AB8
.text:00001AB8                 push    ebp
.text:00001AB9                 mov     ebp, esp
.text:00001ABB                 push    ecx
.text:00001ABC                 push    esi
.text:00001ABD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AC4                 mov     [ebp+var_4], ecx
.text:00001AC7                 mov     esi, esp
.text:00001AC9                 mov     eax, [ebp+lpFileInformation]
.text:00001ACC                 push    eax             ; lpFileInformation
.text:00001ACD                 mov     ecx, [ebp+var_4]
.text:00001AD0                 mov     edx, [ecx]
.text:00001AD2                 push    edx             ; hFile
.text:00001AD3                 call    dword ptr ds:__imp__GetFileInformationByHandle@8 ; GetFileInformationByHandle(x,x)
.text:00001AD9                 cmp     esi, esp
.text:00001ADB                 call    __RTC_CheckEsp
.text:00001AE0                 push    eax             ; int
.text:00001AE1                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:00001AE6                 pop     esi
.text:00001AE7                 add     esp, 4
.text:00001AEA                 cmp     ebp, esp
.text:00001AEC                 call    __RTC_CheckEsp
.text:00001AF1                 mov     esp, ebp
.text:00001AF3                 pop     ebp
.text:00001AF4                 retn    4
.text:00001AF4 ?GetFileInformation@CFileBase@NIO@NFile@NWindows@@QBE_NPAU_BY_HANDLE_FILE_INFORMATION@@@Z endp
.text:00001AF4
.text:00001AF4 ; ---------------------------------------------------------------------------
.text:00001AF7                 align 4
.text:00001AF7 _text           ends
.text:00001AF7
.text:00001AF8 ; ===========================================================================
.text:00001AF8
.text:00001AF8 ; Segment type: Pure code
.text:00001AF8 ; Segment permissions: Read/Execute
.text:00001AF8 _text           segment para public 'CODE' use32
.text:00001AF8                 assume cs:_text
.text:00001AF8                 ;org 1AF8h
.text:00001AF8 ; COMDAT (pick any)
.text:00001AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AF8
.text:00001AF8 ; =============== S U B R O U T I N E =======================================
.text:00001AF8
.text:00001AF8 ; Attributes: bp-based frame
.text:00001AF8
.text:00001AF8 ; bool __stdcall BOOLToBool(int)
.text:00001AF8                 public ?BOOLToBool@@YG_NH@Z
.text:00001AF8 ?BOOLToBool@@YG_NH@Z proc near          ; CODE XREF: NWindows::NFile::NIO::CFileBase::GetFileInformation(_BY_HANDLE_FILE_INFORMATION *)+29p
.text:00001AF8
.text:00001AF8 arg_0           = dword ptr  8
.text:00001AF8
.text:00001AF8                 push    ebp
.text:00001AF9                 mov     ebp, esp
.text:00001AFB                 xor     eax, eax
.text:00001AFD                 cmp     [ebp+arg_0], 0
.text:00001B01                 setnz   al
.text:00001B04                 pop     ebp
.text:00001B05                 retn    4
.text:00001B05 ?BOOLToBool@@YG_NH@Z endp
.text:00001B05
.text:00001B05 _text           ends
.text:00001B05
.text:00001B08 ; ===========================================================================
.text:00001B08
.text:00001B08 ; Segment type: Pure code
.text:00001B08 ; Segment permissions: Read/Execute
.text:00001B08 _text           segment para public 'CODE' use32
.text:00001B08                 assume cs:_text
.text:00001B08                 ;org 1B08h
.text:00001B08 ; COMDAT (pick any)
.text:00001B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B08
.text:00001B08 ; =============== S U B R O U T I N E =======================================
.text:00001B08
.text:00001B08 ; Attributes: bp-based frame
.text:00001B08
.text:00001B08 ; unsigned int __stdcall MyMin<unsigned int>(unsigned int, unsigned int)
.text:00001B08                 public ??$MyMin@I@@YGIII@Z
.text:00001B08 ??$MyMin@I@@YGIII@Z proc near           ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+1ADp
.text:00001B08
.text:00001B08 var_4           = dword ptr -4
.text:00001B08 arg_0           = dword ptr  8
.text:00001B08 arg_4           = dword ptr  0Ch
.text:00001B08
.text:00001B08                 push    ebp
.text:00001B09                 mov     ebp, esp
.text:00001B0B                 push    ecx
.text:00001B0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B13                 mov     eax, [ebp+arg_0]
.text:00001B16                 cmp     eax, [ebp+arg_4]
.text:00001B19                 jnb     short loc_1B23
.text:00001B1B                 mov     ecx, [ebp+arg_0]
.text:00001B1E                 mov     [ebp+var_4], ecx
.text:00001B21                 jmp     short loc_1B29
.text:00001B23 ; ---------------------------------------------------------------------------
.text:00001B23
.text:00001B23 loc_1B23:                               ; CODE XREF: MyMin<uint>(uint,uint)+11j
.text:00001B23                 mov     edx, [ebp+arg_4]
.text:00001B26                 mov     [ebp+var_4], edx
.text:00001B29
.text:00001B29 loc_1B29:                               ; CODE XREF: MyMin<uint>(uint,uint)+19j
.text:00001B29                 mov     eax, [ebp+var_4]
.text:00001B2C                 mov     esp, ebp
.text:00001B2E                 pop     ebp
.text:00001B2F                 retn    8
.text:00001B2F ??$MyMin@I@@YGIII@Z endp
.text:00001B2F
.text:00001B2F ; ---------------------------------------------------------------------------
.text:00001B32                 align 4
.text:00001B32 _text           ends
.text:00001B32
.text:00001B34 ; ===========================================================================
.text:00001B34
.text:00001B34 ; Segment type: Pure code
.text:00001B34 ; Segment permissions: Read/Execute
.text:00001B34 _text           segment para public 'CODE' use32
.text:00001B34                 assume cs:_text
.text:00001B34                 ;org 1B34h
.text:00001B34 ; COMDAT (pick any)
.text:00001B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B34
.text:00001B34 ; =============== S U B R O U T I N E =======================================
.text:00001B34
.text:00001B34 ; Attributes: bp-based frame
.text:00001B34
.text:00001B34 ; unsigned __int64 __stdcall MyMin<unsigned __int64>(unsigned __int64, unsigned __int64)
.text:00001B34                 public ??$MyMin@_K@@YG_K_K0@Z
.text:00001B34 ??$MyMin@_K@@YG_K_K0@Z proc near        ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+380p
.text:00001B34
.text:00001B34 var_8           = dword ptr -8
.text:00001B34 var_4           = dword ptr -4
.text:00001B34 arg_0           = dword ptr  8
.text:00001B34 arg_4           = dword ptr  0Ch
.text:00001B34 arg_8           = dword ptr  10h
.text:00001B34 arg_C           = dword ptr  14h
.text:00001B34
.text:00001B34                 push    ebp
.text:00001B35                 mov     ebp, esp
.text:00001B37                 sub     esp, 8
.text:00001B3A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001B41                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B48                 mov     eax, [ebp+arg_4]
.text:00001B4B                 cmp     eax, [ebp+arg_C]
.text:00001B4E                 ja      short loc_1B68
.text:00001B50                 jb      short loc_1B5A
.text:00001B52                 mov     ecx, [ebp+arg_0]
.text:00001B55                 cmp     ecx, [ebp+arg_8]
.text:00001B58                 jnb     short loc_1B68
.text:00001B5A
.text:00001B5A loc_1B5A:                               ; CODE XREF: MyMin<unsigned __int64>(unsigned __int64,unsigned __int64)+1Cj
.text:00001B5A                 mov     edx, [ebp+arg_0]
.text:00001B5D                 mov     [ebp+var_8], edx
.text:00001B60                 mov     eax, [ebp+arg_4]
.text:00001B63                 mov     [ebp+var_4], eax
.text:00001B66                 jmp     short loc_1B74
.text:00001B68 ; ---------------------------------------------------------------------------
.text:00001B68
.text:00001B68 loc_1B68:                               ; CODE XREF: MyMin<unsigned __int64>(unsigned __int64,unsigned __int64)+1Aj
.text:00001B68                                         ; MyMin<unsigned __int64>(unsigned __int64,unsigned __int64)+24j
.text:00001B68                 mov     ecx, [ebp+arg_8]
.text:00001B6B                 mov     [ebp+var_8], ecx
.text:00001B6E                 mov     edx, [ebp+arg_C]
.text:00001B71                 mov     [ebp+var_4], edx
.text:00001B74
.text:00001B74 loc_1B74:                               ; CODE XREF: MyMin<unsigned __int64>(unsigned __int64,unsigned __int64)+32j
.text:00001B74                 mov     eax, [ebp+var_8]
.text:00001B77                 mov     edx, [ebp+var_4]
.text:00001B7A                 mov     esp, ebp
.text:00001B7C                 pop     ebp
.text:00001B7D                 retn    10h
.text:00001B7D ??$MyMin@_K@@YG_K_K0@Z endp
.text:00001B7D
.text:00001B7D _text           ends
.text:00001B7D
.text:00001B80 ; ===========================================================================
.text:00001B80
.text:00001B80 ; Segment type: Pure code
.text:00001B80 ; Segment permissions: Read/Execute
.text:00001B80 _text           segment para public 'CODE' use32
.text:00001B80                 assume cs:_text
.text:00001B80                 ;org 1B80h
.text:00001B80 ; COMDAT (pick any)
.text:00001B80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B80
.text:00001B80 ; =============== S U B R O U T I N E =======================================
.text:00001B80
.text:00001B80
.text:00001B80 ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::AddRef`adjustor{12}' (void)
.text:00001B80                 public ?AddRef@CInFileStream@@WM@AGKXZ
.text:00001B80 ?AddRef@CInFileStream@@WM@AGKXZ proc near ; DATA XREF: .rdata:000010F4o
.text:00001B80
.text:00001B80 arg_0           = dword ptr  4
.text:00001B80
.text:00001B80                 sub     [esp+arg_0], 0Ch
.text:00001B85                 jmp     ?AddRef@CInFileStream@@UAGKXZ ; CInFileStream::AddRef(void)
.text:00001B85 ?AddRef@CInFileStream@@WM@AGKXZ endp
.text:00001B85
.text:00001B85 ; ---------------------------------------------------------------------------
.text:00001B8A                 align 4
.text:00001B8A _text           ends
.text:00001B8A
.text:00001B8C ; ===========================================================================
.text:00001B8C
.text:00001B8C ; Segment type: Pure code
.text:00001B8C ; Segment permissions: Read/Execute
.text:00001B8C _text           segment para public 'CODE' use32
.text:00001B8C                 assume cs:_text
.text:00001B8C                 ;org 1B8Ch
.text:00001B8C ; COMDAT (pick any)
.text:00001B8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B8C
.text:00001B8C ; =============== S U B R O U T I N E =======================================
.text:00001B8C
.text:00001B8C
.text:00001B8C ; [thunk]:public: virtual long __stdcall CInFileStream::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00001B8C                 public ?QueryInterface@CInFileStream@@W3AGJABU_GUID@@PAPAX@Z
.text:00001B8C ?QueryInterface@CInFileStream@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00001B8C                                         ; DATA XREF: .rdata:const CInFileStream::`vftable'{for `IStreamGetSize'}o
.text:00001B8C
.text:00001B8C arg_0           = dword ptr  4
.text:00001B8C
.text:00001B8C                 sub     [esp+arg_0], 4
.text:00001B91                 jmp     ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z ; CInFileStream::QueryInterface(_GUID const &,void * *)
.text:00001B91 ?QueryInterface@CInFileStream@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00001B91
.text:00001B91 ; ---------------------------------------------------------------------------
.text:00001B96                 align 4
.text:00001B96 _text           ends
.text:00001B96
.text:00001B98 ; ===========================================================================
.text:00001B98
.text:00001B98 ; Segment type: Pure code
.text:00001B98 ; Segment permissions: Read/Execute
.text:00001B98 _text           segment para public 'CODE' use32
.text:00001B98                 assume cs:_text
.text:00001B98                 ;org 1B98h
.text:00001B98 ; COMDAT (pick any)
.text:00001B98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B98
.text:00001B98 ; =============== S U B R O U T I N E =======================================
.text:00001B98
.text:00001B98
.text:00001B98 ; [thunk]:public: virtual long __stdcall CInFileStream::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00001B98                 public ?QueryInterface@CInFileStream@@W7AGJABU_GUID@@PAPAX@Z
.text:00001B98 ?QueryInterface@CInFileStream@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00001B98                                         ; DATA XREF: .rdata:const CInFileStream::`vftable'{for `IStreamGetProps'}o
.text:00001B98
.text:00001B98 arg_0           = dword ptr  4
.text:00001B98
.text:00001B98                 sub     [esp+arg_0], 8
.text:00001B9D                 jmp     ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z ; CInFileStream::QueryInterface(_GUID const &,void * *)
.text:00001B9D ?QueryInterface@CInFileStream@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00001B9D
.text:00001B9D ; ---------------------------------------------------------------------------
.text:00001BA2                 align 4
.text:00001BA2 _text           ends
.text:00001BA2
.text:00001BA4 ; ===========================================================================
.text:00001BA4
.text:00001BA4 ; Segment type: Pure code
.text:00001BA4 ; Segment permissions: Read/Execute
.text:00001BA4 _text           segment para public 'CODE' use32
.text:00001BA4                 assume cs:_text
.text:00001BA4                 ;org 1BA4h
.text:00001BA4 ; COMDAT (pick any)
.text:00001BA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BA4
.text:00001BA4 ; =============== S U B R O U T I N E =======================================
.text:00001BA4
.text:00001BA4
.text:00001BA4 ; [thunk]:public: virtual long __stdcall CInFileStream::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00001BA4                 public ?QueryInterface@CInFileStream@@WM@AGJABU_GUID@@PAPAX@Z
.text:00001BA4 ?QueryInterface@CInFileStream@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00001BA4                                         ; DATA XREF: .rdata:const CInFileStream::`vftable'{for `IStreamGetProps2'}o
.text:00001BA4
.text:00001BA4 arg_0           = dword ptr  4
.text:00001BA4
.text:00001BA4                 sub     [esp+arg_0], 0Ch
.text:00001BA9                 jmp     ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z ; CInFileStream::QueryInterface(_GUID const &,void * *)
.text:00001BA9 ?QueryInterface@CInFileStream@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00001BA9
.text:00001BA9 ; ---------------------------------------------------------------------------
.text:00001BAE                 align 10h
.text:00001BAE _text           ends
.text:00001BAE
.text:00001BB0 ; ===========================================================================
.text:00001BB0
.text:00001BB0 ; Segment type: Pure code
.text:00001BB0 ; Segment permissions: Read/Execute
.text:00001BB0 _text           segment para public 'CODE' use32
.text:00001BB0                 assume cs:_text
.text:00001BB0                 ;org 1BB0h
.text:00001BB0 ; COMDAT (pick any)
.text:00001BB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BB0
.text:00001BB0 ; =============== S U B R O U T I N E =======================================
.text:00001BB0
.text:00001BB0
.text:00001BB0 ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::Release`adjustor{4}' (void)
.text:00001BB0                 public ?Release@CInFileStream@@W3AGKXZ
.text:00001BB0 ?Release@CInFileStream@@W3AGKXZ proc near ; DATA XREF: .rdata:00001120o
.text:00001BB0
.text:00001BB0 arg_0           = dword ptr  4
.text:00001BB0
.text:00001BB0                 sub     [esp+arg_0], 4
.text:00001BB5                 jmp     ?Release@CInFileStream@@UAGKXZ ; CInFileStream::Release(void)
.text:00001BB5 ?Release@CInFileStream@@W3AGKXZ endp
.text:00001BB5
.text:00001BB5 ; ---------------------------------------------------------------------------
.text:00001BBA                 align 4
.text:00001BBA _text           ends
.text:00001BBA
.text:00001BBC ; ===========================================================================
.text:00001BBC
.text:00001BBC ; Segment type: Pure code
.text:00001BBC ; Segment permissions: Read/Execute
.text:00001BBC _text           segment para public 'CODE' use32
.text:00001BBC                 assume cs:_text
.text:00001BBC                 ;org 1BBCh
.text:00001BBC ; COMDAT (pick any)
.text:00001BBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BBC
.text:00001BBC ; =============== S U B R O U T I N E =======================================
.text:00001BBC
.text:00001BBC
.text:00001BBC ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::Release`adjustor{8}' (void)
.text:00001BBC                 public ?Release@CInFileStream@@W7AGKXZ
.text:00001BBC ?Release@CInFileStream@@W7AGKXZ proc near ; DATA XREF: .rdata:0000110Co
.text:00001BBC
.text:00001BBC arg_0           = dword ptr  4
.text:00001BBC
.text:00001BBC                 sub     [esp+arg_0], 8
.text:00001BC1                 jmp     ?Release@CInFileStream@@UAGKXZ ; CInFileStream::Release(void)
.text:00001BC1 ?Release@CInFileStream@@W7AGKXZ endp
.text:00001BC1
.text:00001BC1 ; ---------------------------------------------------------------------------
.text:00001BC6                 align 4
.text:00001BC6 _text           ends
.text:00001BC6
.text:00001BC8 ; ===========================================================================
.text:00001BC8
.text:00001BC8 ; Segment type: Pure code
.text:00001BC8 ; Segment permissions: Read/Execute
.text:00001BC8 _text           segment para public 'CODE' use32
.text:00001BC8                 assume cs:_text
.text:00001BC8                 ;org 1BC8h
.text:00001BC8 ; COMDAT (pick any)
.text:00001BC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BC8
.text:00001BC8 ; =============== S U B R O U T I N E =======================================
.text:00001BC8
.text:00001BC8
.text:00001BC8 ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::AddRef`adjustor{4}' (void)
.text:00001BC8                 public ?AddRef@CInFileStream@@W3AGKXZ
.text:00001BC8 ?AddRef@CInFileStream@@W3AGKXZ proc near ; DATA XREF: .rdata:0000111Co
.text:00001BC8
.text:00001BC8 arg_0           = dword ptr  4
.text:00001BC8
.text:00001BC8                 sub     [esp+arg_0], 4
.text:00001BCD                 jmp     ?AddRef@CInFileStream@@UAGKXZ ; CInFileStream::AddRef(void)
.text:00001BCD ?AddRef@CInFileStream@@W3AGKXZ endp
.text:00001BCD
.text:00001BCD ; ---------------------------------------------------------------------------
.text:00001BD2                 align 4
.text:00001BD2 _text           ends
.text:00001BD2
.text:00001BD4 ; ===========================================================================
.text:00001BD4
.text:00001BD4 ; Segment type: Pure code
.text:00001BD4 ; Segment permissions: Read/Execute
.text:00001BD4 _text           segment para public 'CODE' use32
.text:00001BD4                 assume cs:_text
.text:00001BD4                 ;org 1BD4h
.text:00001BD4 ; COMDAT (pick any)
.text:00001BD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BD4
.text:00001BD4 ; =============== S U B R O U T I N E =======================================
.text:00001BD4
.text:00001BD4
.text:00001BD4 ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::Release`adjustor{12}' (void)
.text:00001BD4                 public ?Release@CInFileStream@@WM@AGKXZ
.text:00001BD4 ?Release@CInFileStream@@WM@AGKXZ proc near ; DATA XREF: .rdata:000010F8o
.text:00001BD4
.text:00001BD4 arg_0           = dword ptr  4
.text:00001BD4
.text:00001BD4                 sub     [esp+arg_0], 0Ch
.text:00001BD9                 jmp     ?Release@CInFileStream@@UAGKXZ ; CInFileStream::Release(void)
.text:00001BD9 ?Release@CInFileStream@@WM@AGKXZ endp
.text:00001BD9
.text:00001BD9 ; ---------------------------------------------------------------------------
.text:00001BDE                 align 10h
.text:00001BDE _text           ends
.text:00001BDE
.text:00001BE0 ; ===========================================================================
.text:00001BE0
.text:00001BE0 ; Segment type: Pure code
.text:00001BE0 ; Segment permissions: Read/Execute
.text:00001BE0 _text           segment para public 'CODE' use32
.text:00001BE0                 assume cs:_text
.text:00001BE0                 ;org 1BE0h
.text:00001BE0 ; COMDAT (pick any)
.text:00001BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BE0
.text:00001BE0 ; =============== S U B R O U T I N E =======================================
.text:00001BE0
.text:00001BE0
.text:00001BE0 ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::AddRef`adjustor{8}' (void)
.text:00001BE0                 public ?AddRef@CInFileStream@@W7AGKXZ
.text:00001BE0 ?AddRef@CInFileStream@@W7AGKXZ proc near ; DATA XREF: .rdata:00001108o
.text:00001BE0
.text:00001BE0 arg_0           = dword ptr  4
.text:00001BE0
.text:00001BE0                 sub     [esp+arg_0], 8
.text:00001BE5                 jmp     ?AddRef@CInFileStream@@UAGKXZ ; CInFileStream::AddRef(void)
.text:00001BE5 ?AddRef@CInFileStream@@W7AGKXZ endp
.text:00001BE5
.text:00001BE5 _text           ends
.text:00001BE5
UNDEF:00001BF0 ; ===========================================================================
UNDEF:00001BF0
UNDEF:00001BF0 ; Segment type: Externs
UNDEF:00001BF0 ; UNDEF
UNDEF:00001BF0                 extrn __RTC_CheckEsp:near
UNDEF:00001BF0                                         ; CODE XREF: CInFileStream::CInFileStream(void)+CDp
UNDEF:00001BF0                                         ; CInFileStream::~CInFileStream(void)+91p ...
UNDEF:00001BF4                 extrn __RTC_Shutdown:near
UNDEF:00001BF4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001BF8                 extrn __RTC_InitBase:near
UNDEF:00001BF8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001BFC ; const type_info::`vftable'
UNDEF:00001BFC                 extrn ??_7type_info@@6B@:near
UNDEF:00001BFC                                         ; DATA XREF: .data:CInFileStream `RTTI Type Descriptor'o
UNDEF:00001BFC                                         ; .data:IInStream `RTTI Type Descriptor'o ...
UNDEF:00001C00 ; public: virtual void * __thiscall CInFileStream::`scalar deleting destructor'(unsigned int)
UNDEF:00001C00                 extrn ??_GCInFileStream@@UAEPAXI@Z_0:near
UNDEF:00001C04 ; public: virtual void * __thiscall CInFileStream::`vector deleting destructor'(unsigned int)
UNDEF:00001C04                 extrn ??_ECInFileStream@@UAEPAXI@Z:near ; weak
UNDEF:00001C04                                         ; DATA XREF: .rdata:00001140o
UNDEF:00001C08                 extrn _IID_IStreamGetProps2:near
UNDEF:00001C08                                         ; DATA XREF: CInFileStream::QueryInterface(_GUID const &,void * *):loc_1632o
UNDEF:00001C0C                 extrn _IID_IStreamGetProps:near
UNDEF:00001C0C                                         ; DATA XREF: CInFileStream::QueryInterface(_GUID const &,void * *):loc_15FEo
UNDEF:00001C10                 extrn _IID_IStreamGetSize:near
UNDEF:00001C10                                         ; DATA XREF: CInFileStream::QueryInterface(_GUID const &,void * *):loc_15CAo
UNDEF:00001C14                 extrn _IID_IInStream:near
UNDEF:00001C14                                         ; DATA XREF: CInFileStream::QueryInterface(_GUID const &,void * *):loc_15ABo
UNDEF:00001C18 ; const IID IID_IUnknown
UNDEF:00001C18                 extrn _IID_IUnknown:near
UNDEF:00001C18                                         ; DATA XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00001C1C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001C1C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001C20 ; void __cdecl operator delete(void *)
UNDEF:00001C20                 extrn ??3@YAXPAX@Z:near ; CODE XREF: CInFileStream::`scalar deleting destructor'(uint)+22p
UNDEF:00001C24                 extrn __purecall:near   ; DATA XREF: .rdata:const IInStream::`vftable'o
UNDEF:00001C24                                         ; .rdata:000017FCo ...
UNDEF:00001C28 ; __stdcall MidFree(x)
UNDEF:00001C28                 extrn _MidFree@4:near   ; CODE XREF: CInFileStream::~CInFileStream(void)+63p
UNDEF:00001C2C                 extrn ___security_cookie:near
UNDEF:00001C2C                                         ; DATA XREF: CInFileStream::~CInFileStream(void)+1Ar
UNDEF:00001C2C                                         ; CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+17r ...
UNDEF:00001C30                 extrn ___CxxFrameHandler3:near
UNDEF:00001C30                                         ; CODE XREF: __ehhandler$??1CInFileStream@@UAE@XZ+16j
UNDEF:00001C34 ; __fastcall __security_check_cookie(x)
UNDEF:00001C34                 extrn @__security_check_cookie@4:near
UNDEF:00001C34                                         ; CODE XREF: CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+CFp
UNDEF:00001C34                                         ; CInFileStream::GetProps2(CStreamFileProps *)+119p ...
UNDEF:00001C38 ; bool __thiscall NWindows::NFile::NIO::CFileBase::Close(NWindows::NFile::NIO::CFileBase *__hidden this)
UNDEF:00001C38                 extrn ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ:near
UNDEF:00001C38                                         ; CODE XREF: COutFileStream::Close(void)+14p
UNDEF:00001C38                                         ; NWindows::NFile::NIO::CFileBase::~CFileBase(void)+11p
UNDEF:00001C3C ; DWORD __stdcall GetLastError()
UNDEF:00001C3C                 extrn __imp__GetLastError@0:near
UNDEF:00001C3C                                         ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+50Cp
UNDEF:00001C3C                                         ; ConvertBoolToHRESULT(bool)+1Ap ...
UNDEF:00001C40 ; bool __thiscall NWindows::NFile::NIO::CInFile::ReadPart(NWindows::NFile::NIO::CInFile *__hidden this, void *, unsigned int, unsigned int *)
UNDEF:00001C40                 extrn ?ReadPart@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z:near
UNDEF:00001C40                                         ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+4BAp
UNDEF:00001C44 ; bool __thiscall NWindows::NFile::NIO::CInFile::Read1(NWindows::NFile::NIO::CInFile *__hidden this, void *, unsigned int, unsigned int *)
UNDEF:00001C44                 extrn ?Read1@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z:near
UNDEF:00001C44                                         ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+3CCp
UNDEF:00001C48 ; __stdcall MidAlloc(x)
UNDEF:00001C48                 extrn _MidAlloc@4:near  ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+396p
UNDEF:00001C4C ; bool __thiscall NWindows::NFile::NIO::CFileBase::Seek(NWindows::NFile::NIO::CFileBase *__hidden this, __int64, unsigned __int32, unsigned __int64 *)
UNDEF:00001C4C                 extrn ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z:near
UNDEF:00001C4C                                         ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+316p
UNDEF:00001C4C                                         ; CInFileStream::Read(void *,uint,uint *)+46Bp ...
UNDEF:00001C50 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00001C50                 extrn _memcpy:near      ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+1C7p
UNDEF:00001C54 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001C54                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001C54                                         ; CODE XREF: CInFileStream::Read(void *,uint,uint *)+56Fp
UNDEF:00001C54                                         ; CStdInFileStream::Read(void *,uint,uint *)+A9p ...
UNDEF:00001C58 ; BOOL __stdcall ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
UNDEF:00001C58                 extrn __imp__ReadFile@20:near
UNDEF:00001C58                                         ; CODE XREF: CStdInFileStream::Read(void *,uint,uint *)+53p
UNDEF:00001C58                                         ; DATA XREF: CStdInFileStream::Read(void *,uint,uint *)+53r
UNDEF:00001C5C ; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
UNDEF:00001C5C                 extrn __imp__GetStdHandle@4:near
UNDEF:00001C5C                                         ; CODE XREF: CStdInFileStream::Read(void *,uint,uint *)+45p
UNDEF:00001C5C                                         ; CStdOutFileStream::Write(void const *,uint,uint *)+65p
UNDEF:00001C5C                                         ; DATA XREF: ...
UNDEF:00001C60 ; bool __thiscall NWindows::NFile::NIO::CFileBase::GetLength(NWindows::NFile::NIO::CFileBase *__hidden this, unsigned __int64 *)
UNDEF:00001C60                 extrn ?GetLength@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z:near
UNDEF:00001C60                                         ; CODE XREF: CInFileStream::GetSize(unsigned __int64 *)+Dp
UNDEF:00001C60                                         ; COutFileStream::GetSize(unsigned __int64 *)+18p
UNDEF:00001C64                 extrn __allshl:near     ; CODE XREF: CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)+44p
UNDEF:00001C64                                         ; CInFileStream::GetProps2(CStreamFileProps *)+42p ...
UNDEF:00001C68 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
UNDEF:00001C68                 extrn __imp__GetFileInformationByHandle@8:near
UNDEF:00001C68                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::GetFileInformation(_BY_HANDLE_FILE_INFORMATION *)+1Bp
UNDEF:00001C68                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::GetFileInformation(_BY_HANDLE_FILE_INFORMATION *)+1Br
UNDEF:00001C6C ; bool __thiscall NWindows::NFile::NIO::COutFile::Write(NWindows::NFile::NIO::COutFile *__hidden this, const void *, unsigned int, unsigned int *)
UNDEF:00001C6C                 extrn ?Write@COutFile@NIO@NFile@NWindows@@QAE_NPBXIAAI@Z:near
UNDEF:00001C6C                                         ; CODE XREF: COutFileStream::Write(void const *,uint,uint *)+29p
UNDEF:00001C70 ; bool __thiscall NWindows::NFile::NIO::CFileBase::Seek(NWindows::NFile::NIO::CFileBase *__hidden this, unsigned __int64, unsigned __int64 *)
UNDEF:00001C70                 extrn ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_KAA_K@Z:near
UNDEF:00001C70                                         ; CODE XREF: COutFileStream::SetSize(unsigned __int64)+69p
UNDEF:00001C74 ; bool __thiscall NWindows::NFile::NIO::COutFile::SetLength(NWindows::NFile::NIO::COutFile *__hidden this, unsigned __int64)
UNDEF:00001C74                 extrn ?SetLength@COutFile@NIO@NFile@NWindows@@QAE_N_K@Z:near
UNDEF:00001C74                                         ; CODE XREF: COutFileStream::SetSize(unsigned __int64)+47p
UNDEF:00001C78 ; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
UNDEF:00001C78                 extrn __imp__WriteFile@20:near
UNDEF:00001C78                                         ; CODE XREF: CStdOutFileStream::Write(void const *,uint,uint *)+73p
UNDEF:00001C78                                         ; DATA XREF: CStdOutFileStream::Write(void const *,uint,uint *)+73r
UNDEF:00001C78
UNDEF:00001C78