.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 6037AD27EA8F5A57B9AC5F71C1F7924F
.text:00000000 ; Input CRC32 : A716A8E0
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\LzFindMt.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall MtSync_Init(x)
.text:00000000                 public _MtSync_Init@4
.text:00000000 _MtSync_Init@4  proc near
.text:00000000
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 mov     eax, [ebp+arg_0]
.text:00000006                 mov     dword ptr [eax+4], 1
.text:0000000D                 pop     ebp
.text:0000000E                 retn    4
.text:0000000E _MtSync_Init@4  endp
.text:0000000E
.text:0000000E ; ---------------------------------------------------------------------------
.text:00000011                 align 10h
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020 ; __stdcall BtThreadFunc(x)
.text:00000020                 public _BtThreadFunc@4
.text:00000020 _BtThreadFunc@4 proc near               ; CODE XREF: BtThreadFunc2(x)+73p
.text:00000020
.text:00000020 var_C           = dword ptr -0Ch
.text:00000020 var_8           = dword ptr -8
.text:00000020 var_4           = dword ptr -4
.text:00000020 arg_0           = dword ptr  8
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 sub     esp, 0Ch
.text:00000026                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000002D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000034                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000003B                 mov     eax, [ebp+arg_0]
.text:0000003E                 add     eax, 2Ch ; ','
.text:00000041                 mov     [ebp+var_4], eax
.text:00000044
.text:00000044 loc_44:                                 ; CODE XREF: BtThreadFunc(x):loc_D3j
.text:00000044                 mov     [ebp+var_8], 0
.text:0000004B                 mov     ecx, [ebp+var_4]
.text:0000004E                 mov     edx, [ecx+14h]
.text:00000051                 push    edx
.text:00000052                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00000057                 mov     eax, [ebp+var_4]
.text:0000005A                 add     eax, 18h
.text:0000005D                 push    eax
.text:0000005E                 call    _Event_Set@4    ; Event_Set(x)
.text:00000063
.text:00000063 loc_63:                                 ; CODE XREF: BtThreadFunc(x)+B1j
.text:00000063                 mov     ecx, [ebp+var_4]
.text:00000066                 cmp     dword ptr [ecx+8], 0
.text:0000006A                 jz      short loc_6E
.text:0000006C                 jmp     short loc_D8
.text:0000006E ; ---------------------------------------------------------------------------
.text:0000006E
.text:0000006E loc_6E:                                 ; CODE XREF: BtThreadFunc(x)+4Aj
.text:0000006E                 mov     edx, [ebp+var_4]
.text:00000071                 cmp     dword ptr [edx+0Ch], 0
.text:00000075                 jz      short loc_9D
.text:00000077                 mov     eax, [ebp+var_4]
.text:0000007A                 mov     ecx, [ebp+var_8]
.text:0000007D                 mov     [eax+48h], ecx
.text:00000080                 mov     edx, [ebp+arg_0]
.text:00000083                 add     edx, 128h
.text:00000089                 push    edx
.text:0000008A                 call    _MtSync_StopWriting@4 ; MtSync_StopWriting(x)
.text:0000008F                 mov     eax, [ebp+var_4]
.text:00000092                 add     eax, 1Ch
.text:00000095                 push    eax
.text:00000096                 call    _Event_Set@4    ; Event_Set(x)
.text:0000009B                 jmp     short loc_D3
.text:0000009D ; ---------------------------------------------------------------------------
.text:0000009D
.text:0000009D loc_9D:                                 ; CODE XREF: BtThreadFunc(x)+55j
.text:0000009D                 mov     ecx, [ebp+var_4]
.text:000000A0                 mov     edx, [ecx+20h]
.text:000000A3                 push    edx
.text:000000A4                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:000000A9                 mov     eax, [ebp+var_8]
.text:000000AC                 mov     [ebp+var_C], eax
.text:000000AF                 mov     ecx, [ebp+var_8]
.text:000000B2                 add     ecx, 1
.text:000000B5                 mov     [ebp+var_8], ecx
.text:000000B8                 mov     edx, [ebp+var_C]
.text:000000BB                 push    edx
.text:000000BC                 mov     eax, [ebp+arg_0]
.text:000000BF                 push    eax
.text:000000C0                 call    _BtFillBlock@8  ; BtFillBlock(x,x)
.text:000000C5                 mov     ecx, [ebp+var_4]
.text:000000C8                 add     ecx, 24h ; '$'
.text:000000CB                 push    ecx
.text:000000CC                 call    _Semaphore_Release1@4 ; Semaphore_Release1(x)
.text:000000D1                 jmp     short loc_63
.text:000000D3 ; ---------------------------------------------------------------------------
.text:000000D3
.text:000000D3 loc_D3:                                 ; CODE XREF: BtThreadFunc(x)+7Bj
.text:000000D3                 jmp     loc_44
.text:000000D8 ; ---------------------------------------------------------------------------
.text:000000D8
.text:000000D8 loc_D8:                                 ; CODE XREF: BtThreadFunc(x)+4Cj
.text:000000D8                 add     esp, 0Ch
.text:000000DB                 cmp     ebp, esp
.text:000000DD                 call    __RTC_CheckEsp
.text:000000E2                 mov     esp, ebp
.text:000000E4                 pop     ebp
.text:000000E5                 retn    4
.text:000000E5 _BtThreadFunc@4 endp
.text:000000E5
.text:000000E5 ; ---------------------------------------------------------------------------
.text:000000E8                 align 10h
.text:000000F0
.text:000000F0 ; =============== S U B R O U T I N E =======================================
.text:000000F0
.text:000000F0 ; Attributes: bp-based frame
.text:000000F0
.text:000000F0 ; __stdcall MtSync_StopWriting(x)
.text:000000F0 _MtSync_StopWriting@4 proc near         ; CODE XREF: BtThreadFunc(x)+6Ap
.text:000000F0                                         ; MtSync_Destruct(x)+11p ...
.text:000000F0
.text:000000F0 var_8           = dword ptr -8
.text:000000F0 var_4           = dword ptr -4
.text:000000F0 arg_0           = dword ptr  8
.text:000000F0
.text:000000F0                 push    ebp
.text:000000F1                 mov     ebp, esp
.text:000000F3                 sub     esp, 8
.text:000000F6                 push    esi
.text:000000F7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000000FE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000105                 mov     eax, [ebp+arg_0]
.text:00000108                 mov     ecx, [eax+48h]
.text:0000010B                 mov     [ebp+var_4], ecx
.text:0000010E                 mov     edx, [ebp+arg_0]
.text:00000111                 cmp     dword ptr [edx+10h], 0
.text:00000115                 jz      short loc_120
.text:00000117                 mov     eax, [ebp+arg_0]
.text:0000011A                 cmp     dword ptr [eax+4], 0
.text:0000011E                 jz      short loc_125
.text:00000120
.text:00000120 loc_120:                                ; CODE XREF: MtSync_StopWriting(x)+25j
.text:00000120                 jmp     loc_1C0
.text:00000125 ; ---------------------------------------------------------------------------
.text:00000125
.text:00000125 loc_125:                                ; CODE XREF: MtSync_StopWriting(x)+2Ej
.text:00000125                 mov     ecx, [ebp+arg_0]
.text:00000128                 mov     dword ptr [ecx+0Ch], 1
.text:0000012F                 mov     edx, [ebp+arg_0]
.text:00000132                 cmp     dword ptr [edx+2Ch], 0
.text:00000136                 jz      short loc_158
.text:00000138                 mov     eax, [ebp+arg_0]
.text:0000013B                 add     eax, 30h ; '0'
.text:0000013E                 mov     esi, esp
.text:00000140                 push    eax             ; lpCriticalSection
.text:00000141                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00000147                 cmp     esi, esp
.text:00000149                 call    __RTC_CheckEsp
.text:0000014E                 mov     ecx, [ebp+arg_0]
.text:00000151                 mov     dword ptr [ecx+2Ch], 0
.text:00000158
.text:00000158 loc_158:                                ; CODE XREF: MtSync_StopWriting(x)+46j
.text:00000158                 mov     edx, [ebp+arg_0]
.text:0000015B                 add     edx, 20h ; ' '
.text:0000015E                 push    edx
.text:0000015F                 call    _Semaphore_Release1@4 ; Semaphore_Release1(x)
.text:00000164                 mov     eax, [ebp+arg_0]
.text:00000167                 mov     ecx, [eax+1Ch]
.text:0000016A                 push    ecx
.text:0000016B                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00000170
.text:00000170 loc_170:                                ; CODE XREF: MtSync_StopWriting(x)+C4j
.text:00000170                 mov     edx, [ebp+arg_0]
.text:00000173                 mov     eax, [ebp+var_4]
.text:00000176                 mov     ecx, [edx+48h]
.text:00000179                 mov     edx, [ebp+var_4]
.text:0000017C                 add     edx, 1
.text:0000017F                 mov     [ebp+var_4], edx
.text:00000182                 cmp     eax, ecx
.text:00000184                 jz      short loc_18F
.text:00000186                 mov     [ebp+var_8], 1
.text:0000018D                 jmp     short loc_196
.text:0000018F ; ---------------------------------------------------------------------------
.text:0000018F
.text:0000018F loc_18F:                                ; CODE XREF: MtSync_StopWriting(x)+94j
.text:0000018F                 mov     [ebp+var_8], 0
.text:00000196
.text:00000196 loc_196:                                ; CODE XREF: MtSync_StopWriting(x)+9Dj
.text:00000196                 cmp     [ebp+var_8], 0
.text:0000019A                 jz      short loc_1B6
.text:0000019C                 mov     eax, [ebp+arg_0]
.text:0000019F                 mov     ecx, [eax+24h]
.text:000001A2                 push    ecx
.text:000001A3                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:000001A8                 mov     edx, [ebp+arg_0]
.text:000001AB                 add     edx, 20h ; ' '
.text:000001AE                 push    edx
.text:000001AF                 call    _Semaphore_Release1@4 ; Semaphore_Release1(x)
.text:000001B4                 jmp     short loc_170
.text:000001B6 ; ---------------------------------------------------------------------------
.text:000001B6
.text:000001B6 loc_1B6:                                ; CODE XREF: MtSync_StopWriting(x)+AAj
.text:000001B6                 mov     eax, [ebp+arg_0]
.text:000001B9                 mov     dword ptr [eax+4], 1
.text:000001C0
.text:000001C0 loc_1C0:                                ; CODE XREF: MtSync_StopWriting(x):loc_120j
.text:000001C0                 pop     esi
.text:000001C1                 add     esp, 8
.text:000001C4                 cmp     ebp, esp
.text:000001C6                 call    __RTC_CheckEsp
.text:000001CB                 mov     esp, ebp
.text:000001CD                 pop     ebp
.text:000001CE                 retn    4
.text:000001CE _MtSync_StopWriting@4 endp
.text:000001CE
.text:000001CE ; ---------------------------------------------------------------------------
.text:000001D1                 align 10h
.text:000001E0
.text:000001E0 ; =============== S U B R O U T I N E =======================================
.text:000001E0
.text:000001E0 ; Attributes: bp-based frame
.text:000001E0
.text:000001E0 ; __stdcall BtFillBlock(x, x)
.text:000001E0 _BtFillBlock@8  proc near               ; CODE XREF: BtThreadFunc(x)+A0p
.text:000001E0
.text:000001E0 var_8           = dword ptr -8
.text:000001E0 var_4           = dword ptr -4
.text:000001E0 arg_0           = dword ptr  8
.text:000001E0 arg_4           = dword ptr  0Ch
.text:000001E0
.text:000001E0                 push    ebp
.text:000001E1                 mov     ebp, esp
.text:000001E3                 sub     esp, 8
.text:000001E6                 push    esi
.text:000001E7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000001EE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001F5                 mov     eax, [ebp+arg_0]
.text:000001F8                 add     eax, 128h
.text:000001FD                 mov     [ebp+var_4], eax
.text:00000200                 mov     ecx, [ebp+var_4]
.text:00000203                 cmp     dword ptr [ecx+4], 0
.text:00000207                 jnz     short loc_229
.text:00000209                 mov     edx, [ebp+var_4]
.text:0000020C                 add     edx, 30h ; '0'
.text:0000020F                 mov     esi, esp
.text:00000211                 push    edx             ; lpCriticalSection
.text:00000212                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00000218                 cmp     esi, esp
.text:0000021A                 call    __RTC_CheckEsp
.text:0000021F                 mov     eax, [ebp+var_4]
.text:00000222                 mov     dword ptr [eax+2Ch], 1
.text:00000229
.text:00000229 loc_229:                                ; CODE XREF: BtFillBlock(x,x)+27j
.text:00000229                 mov     ecx, [ebp+arg_4]
.text:0000022C                 and     ecx, 3Fh
.text:0000022F                 shl     ecx, 0Eh
.text:00000232                 mov     edx, [ebp+arg_0]
.text:00000235                 mov     eax, [edx+4]
.text:00000238                 lea     ecx, [eax+ecx*4]
.text:0000023B                 push    ecx
.text:0000023C                 mov     edx, [ebp+arg_0]
.text:0000023F                 push    edx
.text:00000240                 call    _BtGetMatches@8 ; BtGetMatches(x,x)
.text:00000245                 mov     eax, [ebp+arg_0]
.text:00000248                 cmp     dword ptr [eax+114h], 0FFFFBFFFh
.text:00000252                 jbe     short loc_29D
.text:00000254                 mov     ecx, [ebp+arg_0]
.text:00000257                 mov     edx, [ebp+arg_0]
.text:0000025A                 mov     eax, [ecx+114h]
.text:00000260                 sub     eax, [edx+120h]
.text:00000266                 mov     [ebp+var_8], eax
.text:00000269                 mov     ecx, [ebp+arg_0]
.text:0000026C                 mov     edx, [ecx+120h]
.text:00000272                 shl     edx, 1
.text:00000274                 push    edx
.text:00000275                 mov     eax, [ebp+arg_0]
.text:00000278                 mov     ecx, [eax+108h]
.text:0000027E                 push    ecx
.text:0000027F                 mov     edx, [ebp+var_8]
.text:00000282                 push    edx
.text:00000283                 call    _MatchFinder_Normalize3@12 ; MatchFinder_Normalize3(x,x,x)
.text:00000288                 mov     eax, [ebp+arg_0]
.text:0000028B                 mov     ecx, [eax+114h]
.text:00000291                 sub     ecx, [ebp+var_8]
.text:00000294                 mov     edx, [ebp+arg_0]
.text:00000297                 mov     [edx+114h], ecx
.text:0000029D
.text:0000029D loc_29D:                                ; CODE XREF: BtFillBlock(x,x)+72j
.text:0000029D                 mov     eax, [ebp+var_4]
.text:000002A0                 cmp     dword ptr [eax+4], 0
.text:000002A4                 jnz     short loc_2C6
.text:000002A6                 mov     ecx, [ebp+var_4]
.text:000002A9                 add     ecx, 30h ; '0'
.text:000002AC                 mov     esi, esp
.text:000002AE                 push    ecx             ; lpCriticalSection
.text:000002AF                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:000002B5                 cmp     esi, esp
.text:000002B7                 call    __RTC_CheckEsp
.text:000002BC                 mov     edx, [ebp+var_4]
.text:000002BF                 mov     dword ptr [edx+2Ch], 0
.text:000002C6
.text:000002C6 loc_2C6:                                ; CODE XREF: BtFillBlock(x,x)+C4j
.text:000002C6                 pop     esi
.text:000002C7                 add     esp, 8
.text:000002CA                 cmp     ebp, esp
.text:000002CC                 call    __RTC_CheckEsp
.text:000002D1                 mov     esp, ebp
.text:000002D3                 pop     ebp
.text:000002D4                 retn    8
.text:000002D4 _BtFillBlock@8  endp
.text:000002D4
.text:000002D4 ; ---------------------------------------------------------------------------
.text:000002D7                 align 10h
.text:000002E0
.text:000002E0 ; =============== S U B R O U T I N E =======================================
.text:000002E0
.text:000002E0 ; Attributes: bp-based frame
.text:000002E0
.text:000002E0 ; __stdcall BtGetMatches(x, x)
.text:000002E0 _BtGetMatches@8 proc near               ; CODE XREF: BtFillBlock(x,x)+60p
.text:000002E0
.text:000002E0 var_30          = dword ptr -30h
.text:000002E0 var_2C          = dword ptr -2Ch
.text:000002E0 var_28          = dword ptr -28h
.text:000002E0 var_24          = dword ptr -24h
.text:000002E0 var_20          = dword ptr -20h
.text:000002E0 var_1C          = dword ptr -1Ch
.text:000002E0 var_18          = dword ptr -18h
.text:000002E0 var_14          = dword ptr -14h
.text:000002E0 var_10          = dword ptr -10h
.text:000002E0 var_C           = dword ptr -0Ch
.text:000002E0 var_8           = dword ptr -8
.text:000002E0 var_4           = dword ptr -4
.text:000002E0 arg_0           = dword ptr  8
.text:000002E0 arg_4           = dword ptr  0Ch
.text:000002E0
.text:000002E0                 push    ebp
.text:000002E1                 mov     ebp, esp
.text:000002E3                 sub     esp, 30h
.text:000002E6                 push    edi
.text:000002E7                 lea     edi, [ebp+var_30]
.text:000002EA                 mov     ecx, 0Ch
.text:000002EF                 mov     eax, 0CCCCCCCCh
.text:000002F4                 rep stosd
.text:000002F6                 mov     [ebp+var_4], 0
.text:000002FD                 mov     [ebp+var_8], 2
.text:00000304                 mov     eax, [ebp+arg_0]
.text:00000307                 mov     ecx, [eax+10Ch]
.text:0000030D                 shl     ecx, 1
.text:0000030F                 mov     edx, 4000h
.text:00000314                 sub     edx, ecx
.text:00000316                 mov     [ebp+var_C], edx
.text:00000319                 mov     eax, [ebp+arg_4]
.text:0000031C                 mov     ecx, [ebp+arg_0]
.text:0000031F                 mov     edx, [ecx+104h]
.text:00000325                 mov     [eax+4], edx
.text:00000328
.text:00000328 loc_328:                                ; CODE XREF: BtGetMatches(x,x)+9Bj
.text:00000328                                         ; BtGetMatches(x,x)+2F1j
.text:00000328                 mov     eax, [ebp+var_8]
.text:0000032B                 cmp     eax, [ebp+var_C]
.text:0000032E                 jnb     loc_5D6
.text:00000334                 mov     ecx, [ebp+arg_0]
.text:00000337                 mov     edx, [ebp+arg_0]
.text:0000033A                 mov     eax, [ecx+0FCh]
.text:00000340                 cmp     eax, [edx+100h]
.text:00000346                 jnz     loc_3D6
.text:0000034C                 mov     ecx, [ebp+arg_0]
.text:0000034F                 push    ecx
.text:00000350                 call    _MatchFinderMt_GetNextBlock_Hash@4 ; MatchFinderMt_GetNextBlock_Hash(x)
.text:00000355                 mov     edx, [ebp+arg_0]
.text:00000358                 mov     eax, [ebp+var_4]
.text:0000035B                 add     eax, [edx+104h]
.text:00000361                 mov     ecx, [ebp+arg_4]
.text:00000364                 mov     [ecx+4], eax
.text:00000367                 mov     edx, [ebp+arg_0]
.text:0000036A                 mov     eax, [ebp+arg_0]
.text:0000036D                 mov     ecx, [edx+104h]
.text:00000373                 cmp     ecx, [eax+110h]
.text:00000379                 jb      short loc_37D
.text:0000037B                 jmp     short loc_328
.text:0000037D ; ---------------------------------------------------------------------------
.text:0000037D
.text:0000037D loc_37D:                                ; CODE XREF: BtGetMatches(x,x)+99j
.text:0000037D                 mov     edx, [ebp+arg_0]
.text:00000380                 mov     eax, [ebp+var_8]
.text:00000383                 add     eax, [edx+104h]
.text:00000389                 mov     ecx, [ebp+arg_4]
.text:0000038C                 mov     [ecx], eax
.text:0000038E                 mov     edx, [ebp+var_8]
.text:00000391                 mov     eax, [ebp+arg_4]
.text:00000394                 lea     ecx, [eax+edx*4]
.text:00000397                 mov     [ebp+arg_4], ecx
.text:0000039A                 jmp     short loc_3B1
.text:0000039C ; ---------------------------------------------------------------------------
.text:0000039C
.text:0000039C loc_39C:                                ; CODE XREF: BtGetMatches(x,x)+EFj
.text:0000039C                 mov     edx, [ebp+arg_0]
.text:0000039F                 mov     eax, [edx+104h]
.text:000003A5                 sub     eax, 1
.text:000003A8                 mov     ecx, [ebp+arg_0]
.text:000003AB                 mov     [ecx+104h], eax
.text:000003B1
.text:000003B1 loc_3B1:                                ; CODE XREF: BtGetMatches(x,x)+BAj
.text:000003B1                 mov     edx, [ebp+arg_0]
.text:000003B4                 cmp     dword ptr [edx+104h], 0
.text:000003BB                 jz      short loc_3D1
.text:000003BD                 mov     eax, [ebp+arg_4]
.text:000003C0                 mov     dword ptr [eax], 0
.text:000003C6                 mov     ecx, [ebp+arg_4]
.text:000003C9                 add     ecx, 4
.text:000003CC                 mov     [ebp+arg_4], ecx
.text:000003CF                 jmp     short loc_39C
.text:000003D1 ; ---------------------------------------------------------------------------
.text:000003D1
.text:000003D1 loc_3D1:                                ; CODE XREF: BtGetMatches(x,x)+DBj
.text:000003D1                 jmp     loc_5DE
.text:000003D6 ; ---------------------------------------------------------------------------
.text:000003D6
.text:000003D6 loc_3D6:                                ; CODE XREF: BtGetMatches(x,x)+66j
.text:000003D6                 mov     edx, [ebp+arg_0]
.text:000003D9                 mov     eax, [ebp+arg_0]
.text:000003DC                 mov     ecx, [edx+100h]
.text:000003E2                 sub     ecx, [eax+0FCh]
.text:000003E8                 mov     [ebp+var_10], ecx
.text:000003EB                 mov     edx, [ebp+arg_0]
.text:000003EE                 mov     eax, [edx+10Ch]
.text:000003F4                 mov     [ebp+var_14], eax
.text:000003F7                 mov     ecx, [ebp+arg_0]
.text:000003FA                 mov     edx, [ecx+114h]
.text:00000400                 mov     [ebp+var_18], edx
.text:00000403                 mov     eax, [ebp+arg_0]
.text:00000406                 mov     ecx, [eax+11Ch]
.text:0000040C                 mov     [ebp+var_1C], ecx
.text:0000040F                 mov     edx, [ebp+arg_0]
.text:00000412                 mov     eax, [ebp+var_14]
.text:00000415                 cmp     eax, [edx+104h]
.text:0000041B                 jb      short loc_429
.text:0000041D                 mov     ecx, [ebp+arg_0]
.text:00000420                 mov     edx, [ecx+104h]
.text:00000426                 mov     [ebp+var_14], edx
.text:00000429
.text:00000429 loc_429:                                ; CODE XREF: BtGetMatches(x,x)+13Bj
.text:00000429                 mov     eax, [ebp+arg_0]
.text:0000042C                 mov     ecx, [eax+104h]
.text:00000432                 sub     ecx, [ebp+var_14]
.text:00000435                 add     ecx, 1
.text:00000438                 mov     [ebp+var_20], ecx
.text:0000043B                 mov     edx, [ebp+var_20]
.text:0000043E                 cmp     edx, [ebp+var_10]
.text:00000441                 jnb     short loc_449
.text:00000443                 mov     eax, [ebp+var_20]
.text:00000446                 mov     [ebp+var_10], eax
.text:00000449
.text:00000449 loc_449:                                ; CODE XREF: BtGetMatches(x,x)+161j
.text:00000449                 mov     ecx, [ebp+arg_0]
.text:0000044C                 mov     edx, [ecx+120h]
.text:00000452                 sub     edx, [ebp+var_1C]
.text:00000455                 mov     [ebp+var_20], edx
.text:00000458                 mov     eax, [ebp+var_20]
.text:0000045B                 cmp     eax, [ebp+var_10]
.text:0000045E                 jnb     short loc_466
.text:00000460                 mov     ecx, [ebp+var_20]
.text:00000463                 mov     [ebp+var_10], ecx
.text:00000466
.text:00000466 loc_466:                                ; CODE XREF: BtGetMatches(x,x)+17Ej
.text:00000466                                         ; BtGetMatches(x,x)+28Dj
.text:00000466                 mov     edx, [ebp+var_8]
.text:00000469                 cmp     edx, [ebp+var_C]
.text:0000046C                 jnb     loc_572
.text:00000472                 mov     eax, [ebp+var_10]
.text:00000475                 mov     ecx, [ebp+var_10]
.text:00000478                 sub     ecx, 1
.text:0000047B                 mov     [ebp+var_10], ecx
.text:0000047E                 test    eax, eax
.text:00000480                 jz      short loc_48B
.text:00000482                 mov     [ebp+var_2C], 1
.text:00000489                 jmp     short loc_492
.text:0000048B ; ---------------------------------------------------------------------------
.text:0000048B
.text:0000048B loc_48B:                                ; CODE XREF: BtGetMatches(x,x)+1A0j
.text:0000048B                 mov     [ebp+var_2C], 0
.text:00000492
.text:00000492 loc_492:                                ; CODE XREF: BtGetMatches(x,x)+1A9j
.text:00000492                 cmp     [ebp+var_2C], 0
.text:00000496                 jz      loc_572
.text:0000049C                 mov     edx, [ebp+var_8]
.text:0000049F                 mov     eax, [ebp+arg_4]
.text:000004A2                 lea     ecx, [eax+edx*4]
.text:000004A5                 mov     [ebp+var_24], ecx
.text:000004A8                 mov     edx, [ebp+arg_0]
.text:000004AB                 mov     eax, [edx+0FCh]
.text:000004B1                 mov     ecx, [ebp+arg_0]
.text:000004B4                 mov     edx, [ecx+0F8h]
.text:000004BA                 mov     ecx, [ebp+var_18]
.text:000004BD                 sub     ecx, [edx+eax*4]
.text:000004C0                 mov     [ebp+var_30], ecx
.text:000004C3                 mov     edx, [ebp+arg_0]
.text:000004C6                 mov     eax, [edx+0FCh]
.text:000004CC                 add     eax, 1
.text:000004CF                 mov     ecx, [ebp+arg_0]
.text:000004D2                 mov     [ecx+0FCh], eax
.text:000004D8                 mov     edx, [ebp+arg_0]
.text:000004DB                 mov     eax, [edx+110h]
.text:000004E1                 sub     eax, 1
.text:000004E4                 push    eax
.text:000004E5                 mov     ecx, [ebp+var_24]
.text:000004E8                 add     ecx, 4
.text:000004EB                 push    ecx
.text:000004EC                 mov     edx, [ebp+arg_0]
.text:000004EF                 mov     eax, [edx+124h]
.text:000004F5                 push    eax
.text:000004F6                 mov     ecx, [ebp+arg_0]
.text:000004F9                 mov     edx, [ecx+120h]
.text:000004FF                 push    edx
.text:00000500                 mov     eax, [ebp+var_1C]
.text:00000503                 push    eax
.text:00000504                 mov     ecx, [ebp+arg_0]
.text:00000507                 mov     edx, [ecx+108h]
.text:0000050D                 push    edx
.text:0000050E                 mov     eax, [ebp+arg_0]
.text:00000511                 mov     ecx, [eax+118h]
.text:00000517                 push    ecx
.text:00000518                 mov     edx, [ebp+var_18]
.text:0000051B                 push    edx
.text:0000051C                 mov     eax, [ebp+var_30]
.text:0000051F                 push    eax
.text:00000520                 mov     ecx, [ebp+var_14]
.text:00000523                 push    ecx
.text:00000524                 call    _GetMatchesSpec1@40 ; GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)
.text:00000529                 sub     eax, [ebp+var_24]
.text:0000052C                 sar     eax, 2
.text:0000052F                 mov     [ebp+var_28], eax
.text:00000532                 mov     edx, [ebp+var_28]
.text:00000535                 sub     edx, 1
.text:00000538                 mov     eax, [ebp+var_24]
.text:0000053B                 mov     [eax], edx
.text:0000053D                 mov     ecx, [ebp+var_8]
.text:00000540                 add     ecx, [ebp+var_28]
.text:00000543                 mov     [ebp+var_8], ecx
.text:00000546                 mov     edx, [ebp+var_1C]
.text:00000549                 add     edx, 1
.text:0000054C                 mov     [ebp+var_1C], edx
.text:0000054F                 mov     eax, [ebp+var_18]
.text:00000552                 add     eax, 1
.text:00000555                 mov     [ebp+var_18], eax
.text:00000558                 mov     ecx, [ebp+arg_0]
.text:0000055B                 mov     edx, [ecx+118h]
.text:00000561                 add     edx, 1
.text:00000564                 mov     eax, [ebp+arg_0]
.text:00000567                 mov     [eax+118h], edx
.text:0000056D                 jmp     loc_466
.text:00000572 ; ---------------------------------------------------------------------------
.text:00000572
.text:00000572 loc_572:                                ; CODE XREF: BtGetMatches(x,x)+18Cj
.text:00000572                                         ; BtGetMatches(x,x)+1B6j
.text:00000572                 mov     ecx, [ebp+arg_0]
.text:00000575                 mov     edx, [ebp+var_18]
.text:00000578                 sub     edx, [ecx+114h]
.text:0000057E                 add     edx, [ebp+var_4]
.text:00000581                 mov     [ebp+var_4], edx
.text:00000584                 mov     eax, [ebp+arg_0]
.text:00000587                 mov     ecx, [ebp+var_18]
.text:0000058A                 sub     ecx, [eax+114h]
.text:00000590                 mov     edx, [ebp+arg_0]
.text:00000593                 mov     eax, [edx+104h]
.text:00000599                 sub     eax, ecx
.text:0000059B                 mov     ecx, [ebp+arg_0]
.text:0000059E                 mov     [ecx+104h], eax
.text:000005A4                 mov     edx, [ebp+arg_0]
.text:000005A7                 mov     eax, [ebp+var_18]
.text:000005AA                 mov     [edx+114h], eax
.text:000005B0                 mov     ecx, [ebp+arg_0]
.text:000005B3                 mov     edx, [ebp+var_1C]
.text:000005B6                 cmp     edx, [ecx+120h]
.text:000005BC                 jnz     short loc_5C5
.text:000005BE                 mov     [ebp+var_1C], 0
.text:000005C5
.text:000005C5 loc_5C5:                                ; CODE XREF: BtGetMatches(x,x)+2DCj
.text:000005C5                 mov     eax, [ebp+arg_0]
.text:000005C8                 mov     ecx, [ebp+var_1C]
.text:000005CB                 mov     [eax+11Ch], ecx
.text:000005D1                 jmp     loc_328
.text:000005D6 ; ---------------------------------------------------------------------------
.text:000005D6
.text:000005D6 loc_5D6:                                ; CODE XREF: BtGetMatches(x,x)+4Ej
.text:000005D6                 mov     edx, [ebp+arg_4]
.text:000005D9                 mov     eax, [ebp+var_8]
.text:000005DC                 mov     [edx], eax
.text:000005DE
.text:000005DE loc_5DE:                                ; CODE XREF: BtGetMatches(x,x):loc_3D1j
.text:000005DE                 pop     edi
.text:000005DF                 add     esp, 30h
.text:000005E2                 cmp     ebp, esp
.text:000005E4                 call    __RTC_CheckEsp
.text:000005E9                 mov     esp, ebp
.text:000005EB                 pop     ebp
.text:000005EC                 retn    8
.text:000005EC _BtGetMatches@8 endp
.text:000005EC
.text:000005EC ; ---------------------------------------------------------------------------
.text:000005EF                 align 10h
.text:000005F0
.text:000005F0 ; =============== S U B R O U T I N E =======================================
.text:000005F0
.text:000005F0 ; Attributes: bp-based frame
.text:000005F0
.text:000005F0 ; __stdcall MatchFinderMt_GetNextBlock_Hash(x)
.text:000005F0 _MatchFinderMt_GetNextBlock_Hash@4 proc near
.text:000005F0                                         ; CODE XREF: BtGetMatches(x,x)+70p
.text:000005F0
.text:000005F0 var_4           = dword ptr -4
.text:000005F0 arg_0           = dword ptr  8
.text:000005F0
.text:000005F0                 push    ebp
.text:000005F1                 mov     ebp, esp
.text:000005F3                 push    ecx
.text:000005F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005FB                 mov     eax, [ebp+arg_0]
.text:000005FE                 add     eax, 128h
.text:00000603                 push    eax
.text:00000604                 call    _MtSync_GetNextBlock@4 ; MtSync_GetNextBlock(x)
.text:00000609                 mov     ecx, [ebp+arg_0]
.text:0000060C                 mov     edx, [ecx+170h]
.text:00000612                 sub     edx, 1
.text:00000615                 and     edx, 7
.text:00000618                 shl     edx, 0Dh
.text:0000061B                 mov     [ebp+var_4], edx
.text:0000061E                 mov     eax, [ebp+arg_0]
.text:00000621                 mov     ecx, [ebp+var_4]
.text:00000624                 mov     [eax+0FCh], ecx
.text:0000062A                 mov     edx, [ebp+arg_0]
.text:0000062D                 mov     eax, [ebp+var_4]
.text:00000630                 mov     [edx+100h], eax
.text:00000636                 mov     ecx, [ebp+arg_0]
.text:00000639                 mov     edx, [ecx+0FCh]
.text:0000063F                 mov     eax, [ebp+arg_0]
.text:00000642                 mov     ecx, [eax+0F8h]
.text:00000648                 mov     eax, [ebp+arg_0]
.text:0000064B                 mov     eax, [eax+100h]
.text:00000651                 add     eax, [ecx+edx*4]
.text:00000654                 mov     ecx, [ebp+arg_0]
.text:00000657                 mov     [ecx+100h], eax
.text:0000065D                 mov     edx, [ebp+arg_0]
.text:00000660                 mov     eax, [edx+0FCh]
.text:00000666                 add     eax, 1
.text:00000669                 mov     ecx, [ebp+arg_0]
.text:0000066C                 mov     [ecx+0FCh], eax
.text:00000672                 mov     edx, [ebp+arg_0]
.text:00000675                 mov     eax, [edx+0FCh]
.text:0000067B                 mov     ecx, [ebp+arg_0]
.text:0000067E                 mov     edx, [ecx+0F8h]
.text:00000684                 mov     ecx, [ebp+arg_0]
.text:00000687                 mov     edx, [edx+eax*4]
.text:0000068A                 mov     [ecx+104h], edx
.text:00000690                 mov     eax, [ebp+arg_0]
.text:00000693                 mov     ecx, [eax+0FCh]
.text:00000699                 add     ecx, 1
.text:0000069C                 mov     edx, [ebp+arg_0]
.text:0000069F                 mov     [edx+0FCh], ecx
.text:000006A5                 add     esp, 4
.text:000006A8                 cmp     ebp, esp
.text:000006AA                 call    __RTC_CheckEsp
.text:000006AF                 mov     esp, ebp
.text:000006B1                 pop     ebp
.text:000006B2                 retn    4
.text:000006B2 _MatchFinderMt_GetNextBlock_Hash@4 endp
.text:000006B2
.text:000006B2 ; ---------------------------------------------------------------------------
.text:000006B5                 align 10h
.text:000006C0
.text:000006C0 ; =============== S U B R O U T I N E =======================================
.text:000006C0
.text:000006C0 ; Attributes: bp-based frame
.text:000006C0
.text:000006C0 ; __stdcall MtSync_GetNextBlock(x)
.text:000006C0 _MtSync_GetNextBlock@4 proc near        ; CODE XREF: MatchFinderMt_GetNextBlock_Hash(x)+14p
.text:000006C0                                         ; MatchFinderMt_GetNextBlock_Bt(x)+1Bp
.text:000006C0
.text:000006C0 arg_0           = dword ptr  8
.text:000006C0
.text:000006C0                 push    ebp
.text:000006C1                 mov     ebp, esp
.text:000006C3                 push    esi
.text:000006C4                 mov     eax, [ebp+arg_0]
.text:000006C7                 cmp     dword ptr [eax+4], 0
.text:000006CB                 jz      short loc_727
.text:000006CD                 mov     ecx, [ebp+arg_0]
.text:000006D0                 mov     dword ptr [ecx+48h], 1
.text:000006D7                 mov     edx, [ebp+arg_0]
.text:000006DA                 mov     dword ptr [edx+4], 0
.text:000006E1                 mov     eax, [ebp+arg_0]
.text:000006E4                 mov     dword ptr [eax+0Ch], 0
.text:000006EB                 mov     ecx, [ebp+arg_0]
.text:000006EE                 mov     dword ptr [ecx+8], 0
.text:000006F5                 mov     edx, [ebp+arg_0]
.text:000006F8                 add     edx, 18h
.text:000006FB                 push    edx
.text:000006FC                 call    _Event_Reset@4  ; Event_Reset(x)
.text:00000701                 mov     eax, [ebp+arg_0]
.text:00000704                 add     eax, 1Ch
.text:00000707                 push    eax
.text:00000708                 call    _Event_Reset@4  ; Event_Reset(x)
.text:0000070D                 mov     ecx, [ebp+arg_0]
.text:00000710                 add     ecx, 14h
.text:00000713                 push    ecx
.text:00000714                 call    _Event_Set@4    ; Event_Set(x)
.text:00000719                 mov     edx, [ebp+arg_0]
.text:0000071C                 mov     eax, [edx+18h]
.text:0000071F                 push    eax
.text:00000720                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00000725                 jmp     short loc_762
.text:00000727 ; ---------------------------------------------------------------------------
.text:00000727
.text:00000727 loc_727:                                ; CODE XREF: MtSync_GetNextBlock(x)+Bj
.text:00000727                 mov     ecx, [ebp+arg_0]
.text:0000072A                 add     ecx, 30h ; '0'
.text:0000072D                 mov     esi, esp
.text:0000072F                 push    ecx             ; lpCriticalSection
.text:00000730                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00000736                 cmp     esi, esp
.text:00000738                 call    __RTC_CheckEsp
.text:0000073D                 mov     edx, [ebp+arg_0]
.text:00000740                 mov     dword ptr [edx+2Ch], 0
.text:00000747                 mov     eax, [ebp+arg_0]
.text:0000074A                 mov     ecx, [eax+48h]
.text:0000074D                 add     ecx, 1
.text:00000750                 mov     edx, [ebp+arg_0]
.text:00000753                 mov     [edx+48h], ecx
.text:00000756                 mov     eax, [ebp+arg_0]
.text:00000759                 add     eax, 20h ; ' '
.text:0000075C                 push    eax
.text:0000075D                 call    _Semaphore_Release1@4 ; Semaphore_Release1(x)
.text:00000762
.text:00000762 loc_762:                                ; CODE XREF: MtSync_GetNextBlock(x)+65j
.text:00000762                 mov     ecx, [ebp+arg_0]
.text:00000765                 mov     edx, [ecx+24h]
.text:00000768                 push    edx
.text:00000769                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:0000076E                 mov     eax, [ebp+arg_0]
.text:00000771                 add     eax, 30h ; '0'
.text:00000774                 mov     esi, esp
.text:00000776                 push    eax             ; lpCriticalSection
.text:00000777                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:0000077D                 cmp     esi, esp
.text:0000077F                 call    __RTC_CheckEsp
.text:00000784                 mov     ecx, [ebp+arg_0]
.text:00000787                 mov     dword ptr [ecx+2Ch], 1
.text:0000078E                 pop     esi
.text:0000078F                 cmp     ebp, esp
.text:00000791                 call    __RTC_CheckEsp
.text:00000796                 pop     ebp
.text:00000797                 retn    4
.text:00000797 _MtSync_GetNextBlock@4 endp
.text:00000797
.text:00000797 ; ---------------------------------------------------------------------------
.text:0000079A                 align 10h
.text:000007A0
.text:000007A0 ; =============== S U B R O U T I N E =======================================
.text:000007A0
.text:000007A0 ; Attributes: bp-based frame
.text:000007A0
.text:000007A0 ; __stdcall MatchFinderMt_Construct(x)
.text:000007A0                 public _MatchFinderMt_Construct@4
.text:000007A0 _MatchFinderMt_Construct@4 proc near
.text:000007A0
.text:000007A0 arg_0           = dword ptr  8
.text:000007A0
.text:000007A0                 push    ebp
.text:000007A1                 mov     ebp, esp
.text:000007A3                 mov     eax, [ebp+arg_0]
.text:000007A6                 mov     dword ptr [eax+0F8h], 0
.text:000007B0                 mov     ecx, [ebp+arg_0]
.text:000007B3                 add     ecx, 128h
.text:000007B9                 push    ecx
.text:000007BA                 call    _MtSync_Construct@4 ; MtSync_Construct(x)
.text:000007BF                 mov     edx, [ebp+arg_0]
.text:000007C2                 add     edx, 2Ch ; ','
.text:000007C5                 push    edx
.text:000007C6                 call    _MtSync_Construct@4 ; MtSync_Construct(x)
.text:000007CB                 cmp     ebp, esp
.text:000007CD                 call    __RTC_CheckEsp
.text:000007D2                 pop     ebp
.text:000007D3                 retn    4
.text:000007D3 _MatchFinderMt_Construct@4 endp
.text:000007D3
.text:000007D3 ; ---------------------------------------------------------------------------
.text:000007D6                 align 10h
.text:000007E0
.text:000007E0 ; =============== S U B R O U T I N E =======================================
.text:000007E0
.text:000007E0 ; Attributes: bp-based frame
.text:000007E0
.text:000007E0 ; __stdcall MtSync_Construct(x)
.text:000007E0 _MtSync_Construct@4 proc near           ; CODE XREF: MatchFinderMt_Construct(x)+1Ap
.text:000007E0                                         ; MatchFinderMt_Construct(x)+26p
.text:000007E0
.text:000007E0 arg_0           = dword ptr  8
.text:000007E0
.text:000007E0                 push    ebp
.text:000007E1                 mov     ebp, esp
.text:000007E3                 mov     eax, [ebp+arg_0]
.text:000007E6                 mov     dword ptr [eax], 0
.text:000007EC                 mov     ecx, [ebp+arg_0]
.text:000007EF                 mov     dword ptr [ecx+28h], 0
.text:000007F6                 mov     edx, [ebp+arg_0]
.text:000007F9                 mov     dword ptr [edx+2Ch], 0
.text:00000800                 mov     eax, [ebp+arg_0]
.text:00000803                 mov     dword ptr [eax+10h], 0
.text:0000080A                 mov     ecx, [ebp+arg_0]
.text:0000080D                 mov     dword ptr [ecx+14h], 0
.text:00000814                 mov     edx, [ebp+arg_0]
.text:00000817                 mov     dword ptr [edx+18h], 0
.text:0000081E                 mov     eax, [ebp+arg_0]
.text:00000821                 mov     dword ptr [eax+1Ch], 0
.text:00000828                 mov     ecx, [ebp+arg_0]
.text:0000082B                 mov     dword ptr [ecx+20h], 0
.text:00000832                 mov     edx, [ebp+arg_0]
.text:00000835                 mov     dword ptr [edx+24h], 0
.text:0000083C                 pop     ebp
.text:0000083D                 retn    4
.text:0000083D _MtSync_Construct@4 endp
.text:0000083D
.text:00000840
.text:00000840 ; =============== S U B R O U T I N E =======================================
.text:00000840
.text:00000840 ; Attributes: bp-based frame
.text:00000840
.text:00000840 ; __stdcall MatchFinderMt_Destruct(x, x)
.text:00000840                 public _MatchFinderMt_Destruct@8
.text:00000840 _MatchFinderMt_Destruct@8 proc near
.text:00000840
.text:00000840 arg_0           = dword ptr  8
.text:00000840 arg_4           = dword ptr  0Ch
.text:00000840
.text:00000840                 push    ebp
.text:00000841                 mov     ebp, esp
.text:00000843                 mov     eax, [ebp+arg_0]
.text:00000846                 add     eax, 128h
.text:0000084B                 push    eax
.text:0000084C                 call    _MtSync_Destruct@4 ; MtSync_Destruct(x)
.text:00000851                 mov     ecx, [ebp+arg_0]
.text:00000854                 add     ecx, 2Ch ; ','
.text:00000857                 push    ecx
.text:00000858                 call    _MtSync_Destruct@4 ; MtSync_Destruct(x)
.text:0000085D                 mov     edx, [ebp+arg_4]
.text:00000860                 push    edx
.text:00000861                 mov     eax, [ebp+arg_0]
.text:00000864                 push    eax
.text:00000865                 call    _MatchFinderMt_FreeMem@8 ; MatchFinderMt_FreeMem(x,x)
.text:0000086A                 cmp     ebp, esp
.text:0000086C                 call    __RTC_CheckEsp
.text:00000871                 pop     ebp
.text:00000872                 retn    8
.text:00000872 _MatchFinderMt_Destruct@8 endp
.text:00000872
.text:00000872 ; ---------------------------------------------------------------------------
.text:00000875                 align 10h
.text:00000880
.text:00000880 ; =============== S U B R O U T I N E =======================================
.text:00000880
.text:00000880 ; Attributes: bp-based frame
.text:00000880
.text:00000880 ; __stdcall MtSync_Destruct(x)
.text:00000880 _MtSync_Destruct@4 proc near            ; CODE XREF: MatchFinderMt_Destruct(x,x)+Cp
.text:00000880                                         ; MatchFinderMt_Destruct(x,x)+18p ...
.text:00000880
.text:00000880 arg_0           = dword ptr  8
.text:00000880
.text:00000880                 push    ebp
.text:00000881                 mov     ebp, esp
.text:00000883                 push    esi
.text:00000884                 mov     eax, [ebp+arg_0]
.text:00000887                 cmp     dword ptr [eax+10h], 0
.text:0000088B                 jz      short loc_8CD
.text:0000088D                 mov     ecx, [ebp+arg_0]
.text:00000890                 push    ecx
.text:00000891                 call    _MtSync_StopWriting@4 ; MtSync_StopWriting(x)
.text:00000896                 mov     edx, [ebp+arg_0]
.text:00000899                 mov     dword ptr [edx+8], 1
.text:000008A0                 mov     eax, [ebp+arg_0]
.text:000008A3                 cmp     dword ptr [eax+4], 0
.text:000008A7                 jz      short loc_8B5
.text:000008A9                 mov     ecx, [ebp+arg_0]
.text:000008AC                 add     ecx, 14h
.text:000008AF                 push    ecx
.text:000008B0                 call    _Event_Set@4    ; Event_Set(x)
.text:000008B5
.text:000008B5 loc_8B5:                                ; CODE XREF: MtSync_Destruct(x)+27j
.text:000008B5                 mov     edx, [ebp+arg_0]
.text:000008B8                 mov     eax, [edx+10h]
.text:000008BB                 push    eax
.text:000008BC                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:000008C1                 mov     ecx, [ebp+arg_0]
.text:000008C4                 add     ecx, 10h
.text:000008C7                 push    ecx
.text:000008C8                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:000008CD
.text:000008CD loc_8CD:                                ; CODE XREF: MtSync_Destruct(x)+Bj
.text:000008CD                 mov     edx, [ebp+arg_0]
.text:000008D0                 cmp     dword ptr [edx+28h], 0
.text:000008D4                 jz      short loc_8F6
.text:000008D6                 mov     eax, [ebp+arg_0]
.text:000008D9                 add     eax, 30h ; '0'
.text:000008DC                 mov     esi, esp
.text:000008DE                 push    eax             ; lpCriticalSection
.text:000008DF                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:000008E5                 cmp     esi, esp
.text:000008E7                 call    __RTC_CheckEsp
.text:000008EC                 mov     ecx, [ebp+arg_0]
.text:000008EF                 mov     dword ptr [ecx+28h], 0
.text:000008F6
.text:000008F6 loc_8F6:                                ; CODE XREF: MtSync_Destruct(x)+54j
.text:000008F6                 mov     edx, [ebp+arg_0]
.text:000008F9                 add     edx, 14h
.text:000008FC                 push    edx
.text:000008FD                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00000902                 mov     eax, [ebp+arg_0]
.text:00000905                 add     eax, 18h
.text:00000908                 push    eax
.text:00000909                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:0000090E                 mov     ecx, [ebp+arg_0]
.text:00000911                 add     ecx, 1Ch
.text:00000914                 push    ecx
.text:00000915                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:0000091A                 mov     edx, [ebp+arg_0]
.text:0000091D                 add     edx, 20h ; ' '
.text:00000920                 push    edx
.text:00000921                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00000926                 mov     eax, [ebp+arg_0]
.text:00000929                 add     eax, 24h ; '$'
.text:0000092C                 push    eax
.text:0000092D                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00000932                 mov     ecx, [ebp+arg_0]
.text:00000935                 mov     dword ptr [ecx], 0
.text:0000093B                 pop     esi
.text:0000093C                 cmp     ebp, esp
.text:0000093E                 call    __RTC_CheckEsp
.text:00000943                 pop     ebp
.text:00000944                 retn    4
.text:00000944 _MtSync_Destruct@4 endp
.text:00000944
.text:00000944 ; ---------------------------------------------------------------------------
.text:00000947                 align 10h
.text:00000950
.text:00000950 ; =============== S U B R O U T I N E =======================================
.text:00000950
.text:00000950 ; Attributes: bp-based frame
.text:00000950
.text:00000950 ; __stdcall MatchFinderMt_FreeMem(x, x)
.text:00000950 _MatchFinderMt_FreeMem@8 proc near      ; CODE XREF: MatchFinderMt_Destruct(x,x)+25p
.text:00000950
.text:00000950 arg_0           = dword ptr  8
.text:00000950 arg_4           = dword ptr  0Ch
.text:00000950
.text:00000950                 push    ebp
.text:00000951                 mov     ebp, esp
.text:00000953                 push    esi
.text:00000954                 mov     esi, esp
.text:00000956                 mov     eax, [ebp+arg_0]
.text:00000959                 mov     ecx, [eax+0F8h]
.text:0000095F                 push    ecx
.text:00000960                 mov     edx, [ebp+arg_4]
.text:00000963                 push    edx
.text:00000964                 mov     eax, [ebp+arg_4]
.text:00000967                 mov     ecx, [eax+4]
.text:0000096A                 call    ecx
.text:0000096C                 cmp     esi, esp
.text:0000096E                 call    __RTC_CheckEsp
.text:00000973                 mov     edx, [ebp+arg_0]
.text:00000976                 mov     dword ptr [edx+0F8h], 0
.text:00000980                 pop     esi
.text:00000981                 cmp     ebp, esp
.text:00000983                 call    __RTC_CheckEsp
.text:00000988                 pop     ebp
.text:00000989                 retn    8
.text:00000989 _MatchFinderMt_FreeMem@8 endp
.text:00000989
.text:00000989 ; ---------------------------------------------------------------------------
.text:0000098C                 align 10h
.text:00000990
.text:00000990 ; =============== S U B R O U T I N E =======================================
.text:00000990
.text:00000990 ; Attributes: bp-based frame
.text:00000990
.text:00000990 ; __stdcall MatchFinderMt_Create(x, x, x, x, x, x)
.text:00000990                 public _MatchFinderMt_Create@24
.text:00000990 _MatchFinderMt_Create@24 proc near
.text:00000990
.text:00000990 var_C           = dword ptr -0Ch
.text:00000990 var_8           = dword ptr -8
.text:00000990 var_4           = dword ptr -4
.text:00000990 arg_0           = dword ptr  8
.text:00000990 arg_4           = dword ptr  0Ch
.text:00000990 arg_8           = dword ptr  10h
.text:00000990 arg_C           = dword ptr  14h
.text:00000990 arg_10          = dword ptr  18h
.text:00000990 arg_14          = dword ptr  1Ch
.text:00000990
.text:00000990                 push    ebp
.text:00000991                 mov     ebp, esp
.text:00000993                 sub     esp, 0Ch
.text:00000996                 push    esi
.text:00000997                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000099E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000009A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009AC                 mov     eax, [ebp+arg_0]
.text:000009AF                 mov     ecx, [eax+178h]
.text:000009B5                 mov     [ebp+var_4], ecx
.text:000009B8                 mov     edx, [ebp+arg_0]
.text:000009BB                 mov     eax, [ebp+arg_4]
.text:000009BE                 mov     [edx+20h], eax
.text:000009C1                 mov     ecx, [ebp+arg_C]
.text:000009C4                 shl     ecx, 2
.text:000009C7                 cmp     ecx, 4000h
.text:000009CD                 jb      short loc_9D9
.text:000009CF                 mov     eax, 5
.text:000009D4                 jmp     loc_ABF
.text:000009D9 ; ---------------------------------------------------------------------------
.text:000009D9
.text:000009D9 loc_9D9:                                ; CODE XREF: MatchFinderMt_Create(x,x,x,x,x,x)+3Dj
.text:000009D9                 mov     edx, [ebp+arg_0]
.text:000009DC                 cmp     dword ptr [edx+0F8h], 0
.text:000009E3                 jnz     short loc_A32
.text:000009E5                 mov     esi, esp
.text:000009E7                 push    440000h
.text:000009EC                 mov     eax, [ebp+arg_14]
.text:000009EF                 push    eax
.text:000009F0                 mov     ecx, [ebp+arg_14]
.text:000009F3                 mov     edx, [ecx]
.text:000009F5                 call    edx
.text:000009F7                 cmp     esi, esp
.text:000009F9                 call    __RTC_CheckEsp
.text:000009FE                 mov     ecx, [ebp+arg_0]
.text:00000A01                 mov     [ecx+0F8h], eax
.text:00000A07                 mov     edx, [ebp+arg_0]
.text:00000A0A                 cmp     dword ptr [edx+0F8h], 0
.text:00000A11                 jnz     short loc_A1D
.text:00000A13                 mov     eax, 2
.text:00000A18                 jmp     loc_ABF
.text:00000A1D ; ---------------------------------------------------------------------------
.text:00000A1D
.text:00000A1D loc_A1D:                                ; CODE XREF: MatchFinderMt_Create(x,x,x,x,x,x)+81j
.text:00000A1D                 mov     eax, [ebp+arg_0]
.text:00000A20                 mov     ecx, [eax+0F8h]
.text:00000A26                 add     ecx, 40000h
.text:00000A2C                 mov     edx, [ebp+arg_0]
.text:00000A2F                 mov     [edx+4], ecx
.text:00000A32
.text:00000A32 loc_A32:                                ; CODE XREF: MatchFinderMt_Create(x,x,x,x,x,x)+53j
.text:00000A32                 mov     eax, [ebp+arg_8]
.text:00000A35                 add     eax, 110000h
.text:00000A3A                 mov     [ebp+arg_8], eax
.text:00000A3D                 mov     ecx, [ebp+arg_10]
.text:00000A40                 add     ecx, 2000h
.text:00000A46                 mov     [ebp+arg_10], ecx
.text:00000A49                 mov     edx, [ebp+arg_14]
.text:00000A4C                 push    edx
.text:00000A4D                 mov     eax, [ebp+arg_10]
.text:00000A50                 push    eax
.text:00000A51                 mov     ecx, [ebp+arg_C]
.text:00000A54                 push    ecx
.text:00000A55                 mov     edx, [ebp+arg_8]
.text:00000A58                 push    edx
.text:00000A59                 mov     eax, [ebp+arg_4]
.text:00000A5C                 push    eax
.text:00000A5D                 mov     ecx, [ebp+var_4]
.text:00000A60                 push    ecx
.text:00000A61                 call    _MatchFinder_Create@24 ; MatchFinder_Create(x,x,x,x,x,x)
.text:00000A66                 test    eax, eax
.text:00000A68                 jnz     short loc_A71
.text:00000A6A                 mov     eax, 2
.text:00000A6F                 jmp     short loc_ABF
.text:00000A71 ; ---------------------------------------------------------------------------
.text:00000A71
.text:00000A71 loc_A71:                                ; CODE XREF: MatchFinderMt_Create(x,x,x,x,x,x)+D8j
.text:00000A71                 push    8
.text:00000A73                 mov     edx, [ebp+arg_0]
.text:00000A76                 push    edx
.text:00000A77                 push    offset _HashThreadFunc2@4 ; HashThreadFunc2(x)
.text:00000A7C                 mov     eax, [ebp+arg_0]
.text:00000A7F                 add     eax, 128h
.text:00000A84                 push    eax
.text:00000A85                 call    _MtSync_Create@16 ; MtSync_Create(x,x,x,x)
.text:00000A8A                 mov     [ebp+var_8], eax
.text:00000A8D                 cmp     [ebp+var_8], 0
.text:00000A91                 jz      short loc_A98
.text:00000A93                 mov     eax, [ebp+var_8]
.text:00000A96                 jmp     short loc_ABF
.text:00000A98 ; ---------------------------------------------------------------------------
.text:00000A98
.text:00000A98 loc_A98:                                ; CODE XREF: MatchFinderMt_Create(x,x,x,x,x,x)+101j
.text:00000A98                 push    40h ; '@'
.text:00000A9A                 mov     ecx, [ebp+arg_0]
.text:00000A9D                 push    ecx
.text:00000A9E                 push    offset _BtThreadFunc2@4 ; BtThreadFunc2(x)
.text:00000AA3                 mov     edx, [ebp+arg_0]
.text:00000AA6                 add     edx, 2Ch ; ','
.text:00000AA9                 push    edx
.text:00000AAA                 call    _MtSync_Create@16 ; MtSync_Create(x,x,x,x)
.text:00000AAF                 mov     [ebp+var_C], eax
.text:00000AB2                 cmp     [ebp+var_C], 0
.text:00000AB6                 jz      short loc_ABD
.text:00000AB8                 mov     eax, [ebp+var_C]
.text:00000ABB                 jmp     short loc_ABF
.text:00000ABD ; ---------------------------------------------------------------------------
.text:00000ABD
.text:00000ABD loc_ABD:                                ; CODE XREF: MatchFinderMt_Create(x,x,x,x,x,x)+126j
.text:00000ABD                 xor     eax, eax
.text:00000ABF
.text:00000ABF loc_ABF:                                ; CODE XREF: MatchFinderMt_Create(x,x,x,x,x,x)+44j
.text:00000ABF                                         ; MatchFinderMt_Create(x,x,x,x,x,x)+88j ...
.text:00000ABF                 pop     esi
.text:00000AC0                 add     esp, 0Ch
.text:00000AC3                 cmp     ebp, esp
.text:00000AC5                 call    __RTC_CheckEsp
.text:00000ACA                 mov     esp, ebp
.text:00000ACC                 pop     ebp
.text:00000ACD                 retn    18h
.text:00000ACD _MatchFinderMt_Create@24 endp
.text:00000ACD
.text:00000AD0
.text:00000AD0 ; =============== S U B R O U T I N E =======================================
.text:00000AD0
.text:00000AD0 ; Attributes: bp-based frame
.text:00000AD0
.text:00000AD0 ; __stdcall MtSync_Create(x, x, x, x)
.text:00000AD0 _MtSync_Create@16 proc near             ; CODE XREF: MatchFinderMt_Create(x,x,x,x,x,x)+F5p
.text:00000AD0                                         ; MatchFinderMt_Create(x,x,x,x,x,x)+11Ap
.text:00000AD0
.text:00000AD0 var_4           = dword ptr -4
.text:00000AD0 arg_0           = dword ptr  8
.text:00000AD0 arg_4           = dword ptr  0Ch
.text:00000AD0 arg_8           = dword ptr  10h
.text:00000AD0 arg_C           = dword ptr  14h
.text:00000AD0
.text:00000AD0                 push    ebp
.text:00000AD1                 mov     ebp, esp
.text:00000AD3                 push    ecx
.text:00000AD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000ADB                 mov     eax, [ebp+arg_C]
.text:00000ADE                 push    eax
.text:00000ADF                 mov     ecx, [ebp+arg_8]
.text:00000AE2                 push    ecx
.text:00000AE3                 mov     edx, [ebp+arg_4]
.text:00000AE6                 push    edx
.text:00000AE7                 mov     eax, [ebp+arg_0]
.text:00000AEA                 push    eax
.text:00000AEB                 call    _MtSync_Create2@16 ; MtSync_Create2(x,x,x,x)
.text:00000AF0                 mov     [ebp+var_4], eax
.text:00000AF3                 cmp     [ebp+var_4], 0
.text:00000AF7                 jz      short loc_B02
.text:00000AF9                 mov     ecx, [ebp+arg_0]
.text:00000AFC                 push    ecx
.text:00000AFD                 call    _MtSync_Destruct@4 ; MtSync_Destruct(x)
.text:00000B02
.text:00000B02 loc_B02:                                ; CODE XREF: MtSync_Create(x,x,x,x)+27j
.text:00000B02                 mov     eax, [ebp+var_4]
.text:00000B05                 add     esp, 4
.text:00000B08                 cmp     ebp, esp
.text:00000B0A                 call    __RTC_CheckEsp
.text:00000B0F                 mov     esp, ebp
.text:00000B11                 pop     ebp
.text:00000B12                 retn    10h
.text:00000B12 _MtSync_Create@16 endp
.text:00000B12
.text:00000B12 ; ---------------------------------------------------------------------------
.text:00000B15                 align 10h
.text:00000B20
.text:00000B20 ; =============== S U B R O U T I N E =======================================
.text:00000B20
.text:00000B20 ; Attributes: bp-based frame
.text:00000B20
.text:00000B20 ; __stdcall MtSync_Create2(x, x, x, x)
.text:00000B20 _MtSync_Create2@16 proc near            ; CODE XREF: MtSync_Create(x,x,x,x)+1Bp
.text:00000B20
.text:00000B20 arg_0           = dword ptr  8
.text:00000B20 arg_4           = dword ptr  0Ch
.text:00000B20 arg_8           = dword ptr  10h
.text:00000B20 arg_C           = dword ptr  14h
.text:00000B20
.text:00000B20                 push    ebp
.text:00000B21                 mov     ebp, esp
.text:00000B23                 mov     eax, [ebp+arg_0]
.text:00000B26                 cmp     dword ptr [eax], 0
.text:00000B29                 jz      short loc_B32
.text:00000B2B                 xor     eax, eax
.text:00000B2D                 jmp     loc_C11
.text:00000B32 ; ---------------------------------------------------------------------------
.text:00000B32
.text:00000B32 loc_B32:                                ; CODE XREF: MtSync_Create2(x,x,x,x)+9j
.text:00000B32                 mov     ecx, [ebp+arg_0]
.text:00000B35                 add     ecx, 30h ; '0'
.text:00000B38                 push    ecx
.text:00000B39                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:00000B3E                 test    eax, eax
.text:00000B40                 jz      short loc_B4C
.text:00000B42                 mov     eax, 0Ch
.text:00000B47                 jmp     loc_C11
.text:00000B4C ; ---------------------------------------------------------------------------
.text:00000B4C
.text:00000B4C loc_B4C:                                ; CODE XREF: MtSync_Create2(x,x,x,x)+20j
.text:00000B4C                 mov     edx, [ebp+arg_0]
.text:00000B4F                 mov     dword ptr [edx+28h], 1
.text:00000B56                 mov     eax, [ebp+arg_0]
.text:00000B59                 add     eax, 14h
.text:00000B5C                 push    eax
.text:00000B5D                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:00000B62                 test    eax, eax
.text:00000B64                 jz      short loc_B70
.text:00000B66                 mov     eax, 0Ch
.text:00000B6B                 jmp     loc_C11
.text:00000B70 ; ---------------------------------------------------------------------------
.text:00000B70
.text:00000B70 loc_B70:                                ; CODE XREF: MtSync_Create2(x,x,x,x)+44j
.text:00000B70                 mov     ecx, [ebp+arg_0]
.text:00000B73                 add     ecx, 18h
.text:00000B76                 push    ecx
.text:00000B77                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:00000B7C                 test    eax, eax
.text:00000B7E                 jz      short loc_B8A
.text:00000B80                 mov     eax, 0Ch
.text:00000B85                 jmp     loc_C11
.text:00000B8A ; ---------------------------------------------------------------------------
.text:00000B8A
.text:00000B8A loc_B8A:                                ; CODE XREF: MtSync_Create2(x,x,x,x)+5Ej
.text:00000B8A                 mov     edx, [ebp+arg_0]
.text:00000B8D                 add     edx, 1Ch
.text:00000B90                 push    edx
.text:00000B91                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:00000B96                 test    eax, eax
.text:00000B98                 jz      short loc_BA1
.text:00000B9A                 mov     eax, 0Ch
.text:00000B9F                 jmp     short loc_C11
.text:00000BA1 ; ---------------------------------------------------------------------------
.text:00000BA1
.text:00000BA1 loc_BA1:                                ; CODE XREF: MtSync_Create2(x,x,x,x)+78j
.text:00000BA1                 mov     eax, [ebp+arg_C]
.text:00000BA4                 push    eax
.text:00000BA5                 mov     ecx, [ebp+arg_C]
.text:00000BA8                 push    ecx
.text:00000BA9                 mov     edx, [ebp+arg_0]
.text:00000BAC                 add     edx, 20h ; ' '
.text:00000BAF                 push    edx
.text:00000BB0                 call    _Semaphore_Create@12 ; Semaphore_Create(x,x,x)
.text:00000BB5                 test    eax, eax
.text:00000BB7                 jz      short loc_BC0
.text:00000BB9                 mov     eax, 0Ch
.text:00000BBE                 jmp     short loc_C11
.text:00000BC0 ; ---------------------------------------------------------------------------
.text:00000BC0
.text:00000BC0 loc_BC0:                                ; CODE XREF: MtSync_Create2(x,x,x,x)+97j
.text:00000BC0                 mov     eax, [ebp+arg_C]
.text:00000BC3                 push    eax
.text:00000BC4                 push    0
.text:00000BC6                 mov     ecx, [ebp+arg_0]
.text:00000BC9                 add     ecx, 24h ; '$'
.text:00000BCC                 push    ecx
.text:00000BCD                 call    _Semaphore_Create@12 ; Semaphore_Create(x,x,x)
.text:00000BD2                 test    eax, eax
.text:00000BD4                 jz      short loc_BDD
.text:00000BD6                 mov     eax, 0Ch
.text:00000BDB                 jmp     short loc_C11
.text:00000BDD ; ---------------------------------------------------------------------------
.text:00000BDD
.text:00000BDD loc_BDD:                                ; CODE XREF: MtSync_Create2(x,x,x,x)+B4j
.text:00000BDD                 mov     edx, [ebp+arg_0]
.text:00000BE0                 mov     dword ptr [edx+4], 1
.text:00000BE7                 mov     eax, [ebp+arg_8]
.text:00000BEA                 push    eax
.text:00000BEB                 mov     ecx, [ebp+arg_4]
.text:00000BEE                 push    ecx
.text:00000BEF                 mov     edx, [ebp+arg_0]
.text:00000BF2                 add     edx, 10h
.text:00000BF5                 push    edx
.text:00000BF6                 call    _Thread_Create@12 ; Thread_Create(x,x,x)
.text:00000BFB                 test    eax, eax
.text:00000BFD                 jz      short loc_C06
.text:00000BFF                 mov     eax, 0Ch
.text:00000C04                 jmp     short loc_C11
.text:00000C06 ; ---------------------------------------------------------------------------
.text:00000C06
.text:00000C06 loc_C06:                                ; CODE XREF: MtSync_Create2(x,x,x,x)+DDj
.text:00000C06                 mov     eax, [ebp+arg_0]
.text:00000C09                 mov     dword ptr [eax], 1
.text:00000C0F                 xor     eax, eax
.text:00000C11
.text:00000C11 loc_C11:                                ; CODE XREF: MtSync_Create2(x,x,x,x)+Dj
.text:00000C11                                         ; MtSync_Create2(x,x,x,x)+27j ...
.text:00000C11                 cmp     ebp, esp
.text:00000C13                 call    __RTC_CheckEsp
.text:00000C18                 pop     ebp
.text:00000C19                 retn    10h
.text:00000C19 _MtSync_Create2@16 endp
.text:00000C19
.text:00000C19 ; ---------------------------------------------------------------------------
.text:00000C1C                 align 10h
.text:00000C20
.text:00000C20 ; =============== S U B R O U T I N E =======================================
.text:00000C20
.text:00000C20 ; Attributes: bp-based frame
.text:00000C20
.text:00000C20 ; __stdcall HashThreadFunc2(x)
.text:00000C20 _HashThreadFunc2@4 proc near            ; DATA XREF: MatchFinderMt_Create(x,x,x,x,x,x)+E7o
.text:00000C20
.text:00000C20 arg_0           = dword ptr  8
.text:00000C20
.text:00000C20                 push    ebp
.text:00000C21                 mov     ebp, esp
.text:00000C23                 mov     eax, [ebp+arg_0]
.text:00000C26                 push    eax
.text:00000C27                 call    _HashThreadFunc@4 ; HashThreadFunc(x)
.text:00000C2C                 xor     eax, eax
.text:00000C2E                 cmp     ebp, esp
.text:00000C30                 call    __RTC_CheckEsp
.text:00000C35                 pop     ebp
.text:00000C36                 retn    4
.text:00000C36 _HashThreadFunc2@4 endp
.text:00000C36
.text:00000C36 ; ---------------------------------------------------------------------------
.text:00000C39                 align 10h
.text:00000C40
.text:00000C40 ; =============== S U B R O U T I N E =======================================
.text:00000C40
.text:00000C40 ; Attributes: bp-based frame
.text:00000C40
.text:00000C40 ; __stdcall HashThreadFunc(x)
.text:00000C40 _HashThreadFunc@4 proc near             ; CODE XREF: HashThreadFunc2(x)+7p
.text:00000C40
.text:00000C40 var_20          = dword ptr -20h
.text:00000C40 var_1C          = dword ptr -1Ch
.text:00000C40 var_18          = dword ptr -18h
.text:00000C40 var_14          = dword ptr -14h
.text:00000C40 var_10          = dword ptr -10h
.text:00000C40 var_C           = dword ptr -0Ch
.text:00000C40 var_8           = dword ptr -8
.text:00000C40 var_4           = dword ptr -4
.text:00000C40 arg_0           = dword ptr  8
.text:00000C40
.text:00000C40                 push    ebp
.text:00000C41                 mov     ebp, esp
.text:00000C43                 sub     esp, 20h
.text:00000C46                 push    esi
.text:00000C47                 mov     eax, 0CCCCCCCCh
.text:00000C4C                 mov     [ebp+var_20], eax
.text:00000C4F                 mov     [ebp+var_1C], eax
.text:00000C52                 mov     [ebp+var_18], eax
.text:00000C55                 mov     [ebp+var_14], eax
.text:00000C58                 mov     [ebp+var_10], eax
.text:00000C5B                 mov     [ebp+var_C], eax
.text:00000C5E                 mov     [ebp+var_8], eax
.text:00000C61                 mov     [ebp+var_4], eax
.text:00000C64                 mov     eax, [ebp+arg_0]
.text:00000C67                 add     eax, 128h
.text:00000C6C                 mov     [ebp+var_4], eax
.text:00000C6F
.text:00000C6F loc_C6F:                                ; CODE XREF: HashThreadFunc(x):loc_EDFj
.text:00000C6F                 mov     [ebp+var_8], 0
.text:00000C76                 mov     ecx, [ebp+var_4]
.text:00000C79                 mov     edx, [ecx+14h]
.text:00000C7C                 push    edx
.text:00000C7D                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00000C82                 mov     eax, [ebp+var_4]
.text:00000C85                 add     eax, 18h
.text:00000C88                 push    eax
.text:00000C89                 call    _Event_Set@4    ; Event_Set(x)
.text:00000C8E
.text:00000C8E loc_C8E:                                ; CODE XREF: HashThreadFunc(x)+147j
.text:00000C8E                                         ; HashThreadFunc(x)+29Aj
.text:00000C8E                 mov     ecx, [ebp+var_4]
.text:00000C91                 cmp     dword ptr [ecx+8], 0
.text:00000C95                 jz      short loc_C9C
.text:00000C97                 jmp     loc_EE4
.text:00000C9C ; ---------------------------------------------------------------------------
.text:00000C9C
.text:00000C9C loc_C9C:                                ; CODE XREF: HashThreadFunc(x)+55j
.text:00000C9C                 mov     edx, [ebp+var_4]
.text:00000C9F                 cmp     dword ptr [edx+0Ch], 0
.text:00000CA3                 jz      short loc_CBF
.text:00000CA5                 mov     eax, [ebp+var_4]
.text:00000CA8                 mov     ecx, [ebp+var_8]
.text:00000CAB                 mov     [eax+48h], ecx
.text:00000CAE                 mov     edx, [ebp+var_4]
.text:00000CB1                 add     edx, 1Ch
.text:00000CB4                 push    edx
.text:00000CB5                 call    _Event_Set@4    ; Event_Set(x)
.text:00000CBA                 jmp     loc_EDF
.text:00000CBF ; ---------------------------------------------------------------------------
.text:00000CBF
.text:00000CBF loc_CBF:                                ; CODE XREF: HashThreadFunc(x)+63j
.text:00000CBF                 mov     eax, [ebp+arg_0]
.text:00000CC2                 mov     ecx, [eax+178h]
.text:00000CC8                 mov     [ebp+var_C], ecx
.text:00000CCB                 mov     edx, [ebp+var_C]
.text:00000CCE                 push    edx
.text:00000CCF                 call    _MatchFinder_NeedMove@4 ; MatchFinder_NeedMove(x)
.text:00000CD4                 test    eax, eax
.text:00000CD6                 jz      loc_D8C
.text:00000CDC                 mov     eax, [ebp+arg_0]
.text:00000CDF                 add     eax, 5Ch ; '\'
.text:00000CE2                 mov     esi, esp
.text:00000CE4                 push    eax             ; lpCriticalSection
.text:00000CE5                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00000CEB                 cmp     esi, esp
.text:00000CED                 call    __RTC_CheckEsp
.text:00000CF2                 mov     ecx, [ebp+arg_0]
.text:00000CF5                 add     ecx, 158h
.text:00000CFB                 mov     esi, esp
.text:00000CFD                 push    ecx             ; lpCriticalSection
.text:00000CFE                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00000D04                 cmp     esi, esp
.text:00000D06                 call    __RTC_CheckEsp
.text:00000D0B                 mov     edx, [ebp+var_C]
.text:00000D0E                 push    edx
.text:00000D0F                 call    _MatchFinder_GetPointerToCurrentPos@4 ; MatchFinder_GetPointerToCurrentPos(x)
.text:00000D14                 mov     [ebp+var_10], eax
.text:00000D17                 mov     eax, [ebp+var_C]
.text:00000D1A                 push    eax
.text:00000D1B                 call    _MatchFinder_MoveBlock@4 ; MatchFinder_MoveBlock(x)
.text:00000D20                 mov     ecx, [ebp+var_C]
.text:00000D23                 push    ecx
.text:00000D24                 call    _MatchFinder_GetPointerToCurrentPos@4 ; MatchFinder_GetPointerToCurrentPos(x)
.text:00000D29                 mov     [ebp+var_14], eax
.text:00000D2C                 mov     edx, [ebp+var_10]
.text:00000D2F                 sub     edx, [ebp+var_14]
.text:00000D32                 mov     eax, [ebp+arg_0]
.text:00000D35                 mov     ecx, [eax]
.text:00000D37                 sub     ecx, edx
.text:00000D39                 mov     edx, [ebp+arg_0]
.text:00000D3C                 mov     [edx], ecx
.text:00000D3E                 mov     eax, [ebp+var_10]
.text:00000D41                 sub     eax, [ebp+var_14]
.text:00000D44                 mov     ecx, [ebp+arg_0]
.text:00000D47                 mov     edx, [ecx+118h]
.text:00000D4D                 sub     edx, eax
.text:00000D4F                 mov     eax, [ebp+arg_0]
.text:00000D52                 mov     [eax+118h], edx
.text:00000D58                 mov     ecx, [ebp+arg_0]
.text:00000D5B                 add     ecx, 5Ch ; '\'
.text:00000D5E                 mov     esi, esp
.text:00000D60                 push    ecx             ; lpCriticalSection
.text:00000D61                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00000D67                 cmp     esi, esp
.text:00000D69                 call    __RTC_CheckEsp
.text:00000D6E                 mov     edx, [ebp+arg_0]
.text:00000D71                 add     edx, 158h
.text:00000D77                 mov     esi, esp
.text:00000D79                 push    edx             ; lpCriticalSection
.text:00000D7A                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00000D80                 cmp     esi, esp
.text:00000D82                 call    __RTC_CheckEsp
.text:00000D87                 jmp     loc_C8E
.text:00000D8C ; ---------------------------------------------------------------------------
.text:00000D8C
.text:00000D8C loc_D8C:                                ; CODE XREF: HashThreadFunc(x)+96j
.text:00000D8C                 mov     eax, [ebp+var_4]
.text:00000D8F                 mov     ecx, [eax+20h]
.text:00000D92                 push    ecx
.text:00000D93                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00000D98                 mov     edx, [ebp+var_C]
.text:00000D9B                 push    edx
.text:00000D9C                 call    _MatchFinder_ReadIfRequired@4 ; MatchFinder_ReadIfRequired(x)
.text:00000DA1                 mov     eax, [ebp+var_C]
.text:00000DA4                 cmp     dword ptr [eax+4], 0FFFFDFFFh
.text:00000DAB                 jbe     short loc_DEF
.text:00000DAD                 mov     ecx, [ebp+var_C]
.text:00000DB0                 mov     edx, [ebp+var_C]
.text:00000DB3                 mov     eax, [ecx+4]
.text:00000DB6                 sub     eax, [edx+50h]
.text:00000DB9                 sub     eax, 1
.text:00000DBC                 mov     [ebp+var_18], eax
.text:00000DBF                 mov     ecx, [ebp+var_18]
.text:00000DC2                 push    ecx
.text:00000DC3                 mov     edx, [ebp+var_C]
.text:00000DC6                 push    edx
.text:00000DC7                 call    _MatchFinder_ReduceOffsets@8 ; MatchFinder_ReduceOffsets(x,x)
.text:00000DCC                 mov     eax, [ebp+var_C]
.text:00000DCF                 mov     ecx, [eax+2Ch]
.text:00000DD2                 add     ecx, 1
.text:00000DD5                 push    ecx
.text:00000DD6                 mov     edx, [ebp+var_C]
.text:00000DD9                 mov     eax, [edx+54h]
.text:00000DDC                 mov     ecx, [ebp+var_C]
.text:00000DDF                 mov     edx, [ecx+24h]
.text:00000DE2                 lea     eax, [edx+eax*4]
.text:00000DE5                 push    eax
.text:00000DE6                 mov     ecx, [ebp+var_18]
.text:00000DE9                 push    ecx
.text:00000DEA                 call    _MatchFinder_Normalize3@12 ; MatchFinder_Normalize3(x,x,x)
.text:00000DEF
.text:00000DEF loc_DEF:                                ; CODE XREF: HashThreadFunc(x)+16Bj
.text:00000DEF                 mov     edx, [ebp+var_8]
.text:00000DF2                 and     edx, 7
.text:00000DF5                 shl     edx, 0Dh
.text:00000DF8                 mov     eax, [ebp+arg_0]
.text:00000DFB                 mov     ecx, [eax+0F8h]
.text:00000E01                 lea     edx, [ecx+edx*4]
.text:00000E04                 mov     [ebp+var_1C], edx
.text:00000E07                 mov     eax, [ebp+var_8]
.text:00000E0A                 add     eax, 1
.text:00000E0D                 mov     [ebp+var_8], eax
.text:00000E10                 mov     ecx, [ebp+var_C]
.text:00000E13                 mov     edx, [ebp+var_C]
.text:00000E16                 mov     eax, [ecx+0Ch]
.text:00000E19                 sub     eax, [edx+4]
.text:00000E1C                 mov     [ebp+var_20], eax
.text:00000E1F                 mov     ecx, [ebp+var_1C]
.text:00000E22                 mov     dword ptr [ecx], 2
.text:00000E28                 mov     edx, [ebp+var_1C]
.text:00000E2B                 mov     eax, [ebp+var_20]
.text:00000E2E                 mov     [edx+4], eax
.text:00000E31                 mov     ecx, [ebp+var_C]
.text:00000E34                 mov     edx, [ebp+var_20]
.text:00000E37                 cmp     edx, [ecx+48h]
.text:00000E3A                 jb      short loc_EB2
.text:00000E3C                 mov     eax, [ebp+var_C]
.text:00000E3F                 mov     ecx, [ebp+var_20]
.text:00000E42                 sub     ecx, [eax+48h]
.text:00000E45                 add     ecx, 1
.text:00000E48                 mov     [ebp+var_20], ecx
.text:00000E4B                 cmp     [ebp+var_20], 1FFEh
.text:00000E52                 jbe     short loc_E5B
.text:00000E54                 mov     [ebp+var_20], 1FFEh
.text:00000E5B
.text:00000E5B loc_E5B:                                ; CODE XREF: HashThreadFunc(x)+212j
.text:00000E5B                 mov     edx, [ebp+var_C]
.text:00000E5E                 add     edx, 60h ; '`'
.text:00000E61                 mov     esi, esp
.text:00000E63                 push    edx
.text:00000E64                 mov     eax, [ebp+var_20]
.text:00000E67                 push    eax
.text:00000E68                 mov     ecx, [ebp+var_1C]
.text:00000E6B                 add     ecx, 8
.text:00000E6E                 push    ecx
.text:00000E6F                 mov     edx, [ebp+var_C]
.text:00000E72                 mov     eax, [edx+2Ch]
.text:00000E75                 push    eax
.text:00000E76                 mov     ecx, [ebp+var_C]
.text:00000E79                 mov     edx, [ecx+54h]
.text:00000E7C                 mov     eax, [ebp+var_C]
.text:00000E7F                 mov     ecx, [eax+24h]
.text:00000E82                 lea     edx, [ecx+edx*4]
.text:00000E85                 push    edx
.text:00000E86                 mov     eax, [ebp+var_C]
.text:00000E89                 mov     ecx, [eax+4]
.text:00000E8C                 push    ecx
.text:00000E8D                 mov     edx, [ebp+var_C]
.text:00000E90                 mov     eax, [edx]
.text:00000E92                 push    eax
.text:00000E93                 mov     ecx, [ebp+arg_0]
.text:00000E96                 mov     edx, [ecx+174h]
.text:00000E9C                 call    edx
.text:00000E9E                 cmp     esi, esp
.text:00000EA0                 call    __RTC_CheckEsp
.text:00000EA5                 mov     eax, [ebp+var_1C]
.text:00000EA8                 mov     ecx, [eax]
.text:00000EAA                 add     ecx, [ebp+var_20]
.text:00000EAD                 mov     edx, [ebp+var_1C]
.text:00000EB0                 mov     [edx], ecx
.text:00000EB2
.text:00000EB2 loc_EB2:                                ; CODE XREF: HashThreadFunc(x)+1FAj
.text:00000EB2                 mov     eax, [ebp+var_C]
.text:00000EB5                 mov     ecx, [eax+4]
.text:00000EB8                 add     ecx, [ebp+var_20]
.text:00000EBB                 mov     edx, [ebp+var_C]
.text:00000EBE                 mov     [edx+4], ecx
.text:00000EC1                 mov     eax, [ebp+var_C]
.text:00000EC4                 mov     ecx, [eax]
.text:00000EC6                 add     ecx, [ebp+var_20]
.text:00000EC9                 mov     edx, [ebp+var_C]
.text:00000ECC                 mov     [edx], ecx
.text:00000ECE                 mov     eax, [ebp+var_4]
.text:00000ED1                 add     eax, 24h ; '$'
.text:00000ED4                 push    eax
.text:00000ED5                 call    _Semaphore_Release1@4 ; Semaphore_Release1(x)
.text:00000EDA                 jmp     loc_C8E
.text:00000EDF ; ---------------------------------------------------------------------------
.text:00000EDF
.text:00000EDF loc_EDF:                                ; CODE XREF: HashThreadFunc(x)+7Aj
.text:00000EDF                 jmp     loc_C6F
.text:00000EE4 ; ---------------------------------------------------------------------------
.text:00000EE4
.text:00000EE4 loc_EE4:                                ; CODE XREF: HashThreadFunc(x)+57j
.text:00000EE4                 pop     esi
.text:00000EE5                 add     esp, 20h
.text:00000EE8                 cmp     ebp, esp
.text:00000EEA                 call    __RTC_CheckEsp
.text:00000EEF                 mov     esp, ebp
.text:00000EF1                 pop     ebp
.text:00000EF2                 retn    4
.text:00000EF2 _HashThreadFunc@4 endp
.text:00000EF2
.text:00000EF2 ; ---------------------------------------------------------------------------
.text:00000EF5                 align 10h
.text:00000F00
.text:00000F00 ; =============== S U B R O U T I N E =======================================
.text:00000F00
.text:00000F00 ; Attributes: bp-based frame
.text:00000F00
.text:00000F00 ; __stdcall BtThreadFunc2(x)
.text:00000F00 _BtThreadFunc2@4 proc near              ; DATA XREF: MatchFinderMt_Create(x,x,x,x,x,x)+10Eo
.text:00000F00
.text:00000F00 var_190         = dword ptr -190h
.text:00000F00 var_188         = byte ptr -188h
.text:00000F00 var_4           = dword ptr -4
.text:00000F00 arg_0           = dword ptr  8
.text:00000F00
.text:00000F00                 push    ebp
.text:00000F01                 mov     ebp, esp
.text:00000F03                 sub     esp, 190h
.text:00000F09                 push    edi
.text:00000F0A                 lea     edi, [ebp+var_190]
.text:00000F10                 mov     ecx, 64h ; 'd'
.text:00000F15                 mov     eax, 0CCCCCCCCh
.text:00000F1A                 rep stosd
.text:00000F1C                 mov     eax, dword ptr ds:___security_cookie
.text:00000F21                 xor     eax, ebp
.text:00000F23                 mov     [ebp+var_4], eax
.text:00000F26                 mov     [ebp+var_190], 0
.text:00000F30                 mov     [ebp+var_190], 0
.text:00000F3A                 jmp     short loc_F4B
.text:00000F3C ; ---------------------------------------------------------------------------
.text:00000F3C
.text:00000F3C loc_F3C:                                ; CODE XREF: BtThreadFunc2(x)+62j
.text:00000F3C                 mov     eax, [ebp+var_190]
.text:00000F42                 add     eax, 1
.text:00000F45                 mov     [ebp+var_190], eax
.text:00000F4B
.text:00000F4B loc_F4B:                                ; CODE XREF: BtThreadFunc2(x)+3Aj
.text:00000F4B                 cmp     [ebp+var_190], 10h
.text:00000F52                 jnb     short loc_F64
.text:00000F54                 mov     ecx, [ebp+var_190]
.text:00000F5A                 mov     [ebp+ecx+var_188], 0
.text:00000F62                 jmp     short loc_F3C
.text:00000F64 ; ---------------------------------------------------------------------------
.text:00000F64
.text:00000F64 loc_F64:                                ; CODE XREF: BtThreadFunc2(x)+52j
.text:00000F64                 movzx   edx, [ebp+var_188]
.text:00000F6B                 test    edx, edx
.text:00000F6D                 jnz     short loc_F78
.text:00000F6F                 mov     eax, [ebp+arg_0]
.text:00000F72                 push    eax
.text:00000F73                 call    _BtThreadFunc@4 ; BtThreadFunc(x)
.text:00000F78
.text:00000F78 loc_F78:                                ; CODE XREF: BtThreadFunc2(x)+6Dj
.text:00000F78                 xor     eax, eax
.text:00000F7A                 push    edx
.text:00000F7B                 mov     ecx, ebp
.text:00000F7D                 push    eax
.text:00000F7E                 lea     edx, $LN9
.text:00000F84                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F89                 pop     eax
.text:00000F8A                 pop     edx
.text:00000F8B                 pop     edi
.text:00000F8C                 mov     ecx, [ebp+var_4]
.text:00000F8F                 xor     ecx, ebp
.text:00000F91                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000F96                 add     esp, 190h
.text:00000F9C                 cmp     ebp, esp
.text:00000F9E                 call    __RTC_CheckEsp
.text:00000FA3                 mov     esp, ebp
.text:00000FA5                 pop     ebp
.text:00000FA6                 retn    4
.text:00000FA6 _BtThreadFunc2@4 endp
.text:00000FA6
.text:00000FA6 ; ---------------------------------------------------------------------------
.text:00000FA9                 align 4
.text:00000FAC $LN9            dd 1                    ; DATA XREF: BtThreadFunc2(x)+7Eo
.text:00000FB0                 dd offset $LN8
.text:00000FB4 $LN8            dd 0FFFFFE78h, 180h     ; DATA XREF: .text:00000FB0o
.text:00000FBC                 dd offset $LN7          ; "allocaDummy"
.text:00000FC0 $LN7            db 'allocaDummy',0      ; DATA XREF: .text:00000FBCo
.text:00000FCC                 align 10h
.text:00000FD0
.text:00000FD0 ; =============== S U B R O U T I N E =======================================
.text:00000FD0
.text:00000FD0 ; Attributes: bp-based frame
.text:00000FD0
.text:00000FD0 ; __stdcall MatchFinderMt_Init(x)
.text:00000FD0                 public _MatchFinderMt_Init@4
.text:00000FD0 _MatchFinderMt_Init@4 proc near         ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+17o
.text:00000FD0
.text:00000FD0 var_4           = dword ptr -4
.text:00000FD0 arg_0           = dword ptr  8
.text:00000FD0
.text:00000FD0                 push    ebp
.text:00000FD1                 mov     ebp, esp
.text:00000FD3                 push    ecx
.text:00000FD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FDB                 mov     eax, [ebp+arg_0]
.text:00000FDE                 mov     ecx, [eax+178h]
.text:00000FE4                 mov     [ebp+var_4], ecx
.text:00000FE7                 mov     edx, [ebp+arg_0]
.text:00000FEA                 mov     dword ptr [edx+0Ch], 0
.text:00000FF1                 mov     eax, [ebp+arg_0]
.text:00000FF4                 mov     dword ptr [eax+8], 0
.text:00000FFB                 mov     ecx, [ebp+arg_0]
.text:00000FFE                 mov     dword ptr [ecx+100h], 0
.text:00001008                 mov     edx, [ebp+arg_0]
.text:0000100B                 mov     dword ptr [edx+0FCh], 0
.text:00001015                 mov     eax, [ebp+var_4]
.text:00001018                 push    eax
.text:00001019                 call    _MatchFinder_Init@4 ; MatchFinder_Init(x)
.text:0000101E                 mov     ecx, [ebp+var_4]
.text:00001021                 push    ecx
.text:00001022                 call    _MatchFinder_GetPointerToCurrentPos@4 ; MatchFinder_GetPointerToCurrentPos(x)
.text:00001027                 mov     edx, [ebp+arg_0]
.text:0000102A                 mov     [edx], eax
.text:0000102C                 mov     eax, [ebp+arg_0]
.text:0000102F                 mov     dword ptr [eax+14h], 0
.text:00001036                 mov     ecx, [ebp+arg_0]
.text:00001039                 mov     edx, [ecx+20h]
.text:0000103C                 add     edx, 1
.text:0000103F                 mov     eax, [ebp+arg_0]
.text:00001042                 mov     [eax+10h], edx
.text:00001045                 mov     ecx, [ebp+arg_0]
.text:00001048                 mov     edx, [ebp+var_4]
.text:0000104B                 mov     eax, [edx+24h]
.text:0000104E                 mov     [ecx+18h], eax
.text:00001051                 mov     ecx, [ebp+arg_0]
.text:00001054                 mov     edx, [ebp+var_4]
.text:00001057                 mov     eax, [edx+54h]
.text:0000105A                 mov     [ecx+1Ch], eax
.text:0000105D                 mov     ecx, [ebp+var_4]
.text:00001060                 add     ecx, 60h ; '`'
.text:00001063                 mov     edx, [ebp+arg_0]
.text:00001066                 mov     [edx+24h], ecx
.text:00001069                 mov     eax, [ebp+arg_0]
.text:0000106C                 mov     ecx, [ebp+var_4]
.text:0000106F                 mov     edx, [ecx+28h]
.text:00001072                 mov     [eax+108h], edx
.text:00001078                 mov     eax, [ebp+arg_0]
.text:0000107B                 mov     ecx, [ebp+var_4]
.text:0000107E                 mov     edx, [ecx+20h]
.text:00001081                 mov     [eax+10Ch], edx
.text:00001087                 mov     eax, [ebp+arg_0]
.text:0000108A                 mov     ecx, [ebp+var_4]
.text:0000108D                 mov     edx, [ecx+48h]
.text:00001090                 mov     [eax+110h], edx
.text:00001096                 mov     eax, [ebp+arg_0]
.text:00001099                 mov     ecx, [ebp+var_4]
.text:0000109C                 mov     edx, [ecx+4]
.text:0000109F                 mov     [eax+114h], edx
.text:000010A5                 mov     eax, [ebp+arg_0]
.text:000010A8                 mov     ecx, [ebp+var_4]
.text:000010AB                 mov     edx, [ecx]
.text:000010AD                 mov     [eax+118h], edx
.text:000010B3                 mov     eax, [ebp+arg_0]
.text:000010B6                 mov     ecx, [ebp+var_4]
.text:000010B9                 mov     edx, [ecx+14h]
.text:000010BC                 mov     [eax+11Ch], edx
.text:000010C2                 mov     eax, [ebp+arg_0]
.text:000010C5                 mov     ecx, [ebp+var_4]
.text:000010C8                 mov     edx, [ecx+18h]
.text:000010CB                 mov     [eax+120h], edx
.text:000010D1                 mov     eax, [ebp+arg_0]
.text:000010D4                 mov     ecx, [ebp+var_4]
.text:000010D7                 mov     edx, [ecx+30h]
.text:000010DA                 mov     [eax+124h], edx
.text:000010E0                 add     esp, 4
.text:000010E3                 cmp     ebp, esp
.text:000010E5                 call    __RTC_CheckEsp
.text:000010EA                 mov     esp, ebp
.text:000010EC                 pop     ebp
.text:000010ED                 retn    4
.text:000010ED _MatchFinderMt_Init@4 endp
.text:000010ED
.text:000010F0
.text:000010F0 ; =============== S U B R O U T I N E =======================================
.text:000010F0
.text:000010F0 ; Attributes: bp-based frame
.text:000010F0
.text:000010F0 ; __stdcall MatchFinderMt_ReleaseStream(x)
.text:000010F0                 public _MatchFinderMt_ReleaseStream@4
.text:000010F0 _MatchFinderMt_ReleaseStream@4 proc near
.text:000010F0
.text:000010F0 arg_0           = dword ptr  8
.text:000010F0
.text:000010F0                 push    ebp
.text:000010F1                 mov     ebp, esp
.text:000010F3                 mov     eax, [ebp+arg_0]
.text:000010F6                 add     eax, 2Ch ; ','
.text:000010F9                 push    eax
.text:000010FA                 call    _MtSync_StopWriting@4 ; MtSync_StopWriting(x)
.text:000010FF                 cmp     ebp, esp
.text:00001101                 call    __RTC_CheckEsp
.text:00001106                 pop     ebp
.text:00001107                 retn    4
.text:00001107 _MatchFinderMt_ReleaseStream@4 endp
.text:00001107
.text:00001107 ; ---------------------------------------------------------------------------
.text:0000110A                 align 10h
.text:00001110
.text:00001110 ; =============== S U B R O U T I N E =======================================
.text:00001110
.text:00001110 ; Attributes: bp-based frame
.text:00001110
.text:00001110 ; __stdcall MatchFinderMt_CreateVTable(x, x)
.text:00001110                 public _MatchFinderMt_CreateVTable@8
.text:00001110 _MatchFinderMt_CreateVTable@8 proc near
.text:00001110
.text:00001110 var_8           = dword ptr -8
.text:00001110 var_4           = dword ptr -4
.text:00001110 arg_0           = dword ptr  8
.text:00001110 arg_4           = dword ptr  0Ch
.text:00001110
.text:00001110                 push    ebp
.text:00001111                 mov     ebp, esp
.text:00001113                 sub     esp, 8
.text:00001116                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000111D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001124                 mov     eax, [ebp+arg_4]
.text:00001127                 mov     dword ptr [eax], offset _MatchFinderMt_Init@4 ; MatchFinderMt_Init(x)
.text:0000112D                 mov     ecx, [ebp+arg_4]
.text:00001130                 mov     dword ptr [ecx+4], offset _MatchFinderMt_GetNumAvailableBytes@4 ; MatchFinderMt_GetNumAvailableBytes(x)
.text:00001137                 mov     edx, [ebp+arg_4]
.text:0000113A                 mov     dword ptr [edx+8], offset _MatchFinderMt_GetPointerToCurrentPos@4 ; MatchFinderMt_GetPointerToCurrentPos(x)
.text:00001141                 mov     eax, [ebp+arg_4]
.text:00001144                 mov     dword ptr [eax+0Ch], offset _MatchFinderMt_GetMatches@8 ; MatchFinderMt_GetMatches(x,x)
.text:0000114B                 mov     ecx, [ebp+arg_0]
.text:0000114E                 mov     edx, [ecx+178h]
.text:00001154                 mov     eax, [edx+48h]
.text:00001157                 mov     [ebp+var_4], eax
.text:0000115A                 cmp     [ebp+var_4], 2
.text:0000115E                 jz      short loc_1168
.text:00001160                 cmp     [ebp+var_4], 3
.text:00001164                 jz      short loc_1195
.text:00001166                 jmp     short loc_11B8
.text:00001168 ; ---------------------------------------------------------------------------
.text:00001168
.text:00001168 loc_1168:                               ; CODE XREF: MatchFinderMt_CreateVTable(x,x)+4Ej
.text:00001168                 mov     ecx, [ebp+arg_0]
.text:0000116B                 mov     dword ptr [ecx+174h], offset _GetHeads2@28 ; GetHeads2(x,x,x,x,x,x,x)
.text:00001175                 mov     edx, [ebp+arg_0]
.text:00001178                 mov     dword ptr [edx+28h], 0
.text:0000117F                 mov     eax, [ebp+arg_4]
.text:00001182                 mov     dword ptr [eax+10h], offset _MatchFinderMt0_Skip@8 ; MatchFinderMt0_Skip(x,x)
.text:00001189                 mov     ecx, [ebp+arg_4]
.text:0000118C                 mov     dword ptr [ecx+0Ch], offset _MatchFinderMt2_GetMatches@8 ; MatchFinderMt2_GetMatches(x,x)
.text:00001193                 jmp     short loc_11F9
.text:00001195 ; ---------------------------------------------------------------------------
.text:00001195
.text:00001195 loc_1195:                               ; CODE XREF: MatchFinderMt_CreateVTable(x,x)+54j
.text:00001195                 mov     edx, [ebp+arg_0]
.text:00001198                 mov     dword ptr [edx+174h], offset _GetHeads3@28 ; GetHeads3(x,x,x,x,x,x,x)
.text:000011A2                 mov     eax, [ebp+arg_0]
.text:000011A5                 mov     dword ptr [eax+28h], offset _MixMatches2@12 ; MixMatches2(x,x,x)
.text:000011AC                 mov     ecx, [ebp+arg_4]
.text:000011AF                 mov     dword ptr [ecx+10h], offset _MatchFinderMt2_Skip@8 ; MatchFinderMt2_Skip(x,x)
.text:000011B6                 jmp     short loc_11F9
.text:000011B8 ; ---------------------------------------------------------------------------
.text:000011B8
.text:000011B8 loc_11B8:                               ; CODE XREF: MatchFinderMt_CreateVTable(x,x)+56j
.text:000011B8                 mov     edx, [ebp+arg_0]
.text:000011BB                 mov     eax, [edx+178h]
.text:000011C1                 movzx   ecx, byte ptr [eax+1Eh]
.text:000011C5                 test    ecx, ecx
.text:000011C7                 jz      short loc_11D2
.text:000011C9                 mov     [ebp+var_8], offset _GetHeads4b@28 ; GetHeads4b(x,x,x,x,x,x,x)
.text:000011D0                 jmp     short loc_11D9
.text:000011D2 ; ---------------------------------------------------------------------------
.text:000011D2
.text:000011D2 loc_11D2:                               ; CODE XREF: MatchFinderMt_CreateVTable(x,x)+B7j
.text:000011D2                 mov     [ebp+var_8], offset _GetHeads4@28 ; GetHeads4(x,x,x,x,x,x,x)
.text:000011D9
.text:000011D9 loc_11D9:                               ; CODE XREF: MatchFinderMt_CreateVTable(x,x)+C0j
.text:000011D9                 mov     edx, [ebp+arg_0]
.text:000011DC                 mov     eax, [ebp+var_8]
.text:000011DF                 mov     [edx+174h], eax
.text:000011E5                 mov     ecx, [ebp+arg_0]
.text:000011E8                 mov     dword ptr [ecx+28h], offset _MixMatches3@12 ; MixMatches3(x,x,x)
.text:000011EF                 mov     edx, [ebp+arg_4]
.text:000011F2                 mov     dword ptr [edx+10h], offset _MatchFinderMt3_Skip@8 ; MatchFinderMt3_Skip(x,x)
.text:000011F9
.text:000011F9 loc_11F9:                               ; CODE XREF: MatchFinderMt_CreateVTable(x,x)+83j
.text:000011F9                                         ; MatchFinderMt_CreateVTable(x,x)+A6j
.text:000011F9                 mov     esp, ebp
.text:000011FB                 pop     ebp
.text:000011FC                 retn    8
.text:000011FC _MatchFinderMt_CreateVTable@8 endp
.text:000011FC
.text:000011FC ; ---------------------------------------------------------------------------
.text:000011FF                 align 10h
.text:00001200
.text:00001200 ; =============== S U B R O U T I N E =======================================
.text:00001200
.text:00001200 ; Attributes: bp-based frame
.text:00001200
.text:00001200 ; __stdcall GetHeads2(x, x, x, x, x, x, x)
.text:00001200 _GetHeads2@28   proc near               ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+5Bo
.text:00001200
.text:00001200 var_4           = dword ptr -4
.text:00001200 arg_0           = dword ptr  8
.text:00001200 arg_4           = dword ptr  0Ch
.text:00001200 arg_8           = dword ptr  10h
.text:00001200 arg_10          = dword ptr  18h
.text:00001200 arg_14          = dword ptr  1Ch
.text:00001200
.text:00001200                 push    ebp
.text:00001201                 mov     ebp, esp
.text:00001203                 push    ecx
.text:00001204                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000120B                 jmp     short loc_1216
.text:0000120D ; ---------------------------------------------------------------------------
.text:0000120D
.text:0000120D loc_120D:                               ; CODE XREF: GetHeads2(x,x,x,x,x,x,x)+69j
.text:0000120D                 mov     eax, [ebp+arg_14]
.text:00001210                 sub     eax, 1
.text:00001213                 mov     [ebp+arg_14], eax
.text:00001216
.text:00001216 loc_1216:                               ; CODE XREF: GetHeads2(x,x,x,x,x,x,x)+Bj
.text:00001216                 cmp     [ebp+arg_14], 0
.text:0000121A                 jz      short loc_126B
.text:0000121C                 mov     ecx, [ebp+arg_0]
.text:0000121F                 movzx   edx, byte ptr [ecx]
.text:00001222                 mov     eax, [ebp+arg_0]
.text:00001225                 movzx   ecx, byte ptr [eax+1]
.text:00001229                 shl     ecx, 8
.text:0000122C                 or      edx, ecx
.text:0000122E                 mov     [ebp+var_4], edx
.text:00001231                 mov     edx, [ebp+arg_0]
.text:00001234                 add     edx, 1
.text:00001237                 mov     [ebp+arg_0], edx
.text:0000123A                 mov     eax, [ebp+var_4]
.text:0000123D                 mov     ecx, [ebp+arg_8]
.text:00001240                 mov     edx, [ebp+arg_4]
.text:00001243                 sub     edx, [ecx+eax*4]
.text:00001246                 mov     eax, [ebp+arg_10]
.text:00001249                 mov     [eax], edx
.text:0000124B                 mov     ecx, [ebp+arg_10]
.text:0000124E                 add     ecx, 4
.text:00001251                 mov     [ebp+arg_10], ecx
.text:00001254                 mov     edx, [ebp+var_4]
.text:00001257                 mov     eax, [ebp+arg_8]
.text:0000125A                 mov     ecx, [ebp+arg_4]
.text:0000125D                 mov     [eax+edx*4], ecx
.text:00001260                 mov     edx, [ebp+arg_4]
.text:00001263                 add     edx, 1
.text:00001266                 mov     [ebp+arg_4], edx
.text:00001269                 jmp     short loc_120D
.text:0000126B ; ---------------------------------------------------------------------------
.text:0000126B
.text:0000126B loc_126B:                               ; CODE XREF: GetHeads2(x,x,x,x,x,x,x)+1Aj
.text:0000126B                 mov     esp, ebp
.text:0000126D                 pop     ebp
.text:0000126E                 retn    1Ch
.text:0000126E _GetHeads2@28   endp
.text:0000126E
.text:0000126E ; ---------------------------------------------------------------------------
.text:00001271                 align 10h
.text:00001280
.text:00001280 ; =============== S U B R O U T I N E =======================================
.text:00001280
.text:00001280 ; Attributes: bp-based frame
.text:00001280
.text:00001280 ; __stdcall GetHeads3(x, x, x, x, x, x, x)
.text:00001280 _GetHeads3@28   proc near               ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+88o
.text:00001280
.text:00001280 var_4           = dword ptr -4
.text:00001280 arg_0           = dword ptr  8
.text:00001280 arg_4           = dword ptr  0Ch
.text:00001280 arg_8           = dword ptr  10h
.text:00001280 arg_C           = dword ptr  14h
.text:00001280 arg_10          = dword ptr  18h
.text:00001280 arg_14          = dword ptr  1Ch
.text:00001280 arg_18          = dword ptr  20h
.text:00001280
.text:00001280                 push    ebp
.text:00001281                 mov     ebp, esp
.text:00001283                 push    ecx
.text:00001284                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000128B                 jmp     short loc_1296
.text:0000128D ; ---------------------------------------------------------------------------
.text:0000128D
.text:0000128D loc_128D:                               ; CODE XREF: GetHeads3(x,x,x,x,x,x,x)+79j
.text:0000128D                 mov     eax, [ebp+arg_14]
.text:00001290                 sub     eax, 1
.text:00001293                 mov     [ebp+arg_14], eax
.text:00001296
.text:00001296 loc_1296:                               ; CODE XREF: GetHeads3(x,x,x,x,x,x,x)+Bj
.text:00001296                 cmp     [ebp+arg_14], 0
.text:0000129A                 jz      short loc_12FB
.text:0000129C                 mov     ecx, [ebp+arg_0]
.text:0000129F                 movzx   edx, byte ptr [ecx]
.text:000012A2                 mov     eax, [ebp+arg_0]
.text:000012A5                 movzx   ecx, byte ptr [eax+1]
.text:000012A9                 mov     eax, [ebp+arg_18]
.text:000012AC                 xor     ecx, [eax+edx*4]
.text:000012AF                 mov     edx, [ebp+arg_0]
.text:000012B2                 movzx   eax, byte ptr [edx+2]
.text:000012B6                 shl     eax, 8
.text:000012B9                 xor     ecx, eax
.text:000012BB                 and     ecx, [ebp+arg_C]
.text:000012BE                 mov     [ebp+var_4], ecx
.text:000012C1                 mov     ecx, [ebp+arg_0]
.text:000012C4                 add     ecx, 1
.text:000012C7                 mov     [ebp+arg_0], ecx
.text:000012CA                 mov     edx, [ebp+var_4]
.text:000012CD                 mov     eax, [ebp+arg_8]
.text:000012D0                 mov     ecx, [ebp+arg_4]
.text:000012D3                 sub     ecx, [eax+edx*4]
.text:000012D6                 mov     edx, [ebp+arg_10]
.text:000012D9                 mov     [edx], ecx
.text:000012DB                 mov     eax, [ebp+arg_10]
.text:000012DE                 add     eax, 4
.text:000012E1                 mov     [ebp+arg_10], eax
.text:000012E4                 mov     ecx, [ebp+var_4]
.text:000012E7                 mov     edx, [ebp+arg_8]
.text:000012EA                 mov     eax, [ebp+arg_4]
.text:000012ED                 mov     [edx+ecx*4], eax
.text:000012F0                 mov     ecx, [ebp+arg_4]
.text:000012F3                 add     ecx, 1
.text:000012F6                 mov     [ebp+arg_4], ecx
.text:000012F9                 jmp     short loc_128D
.text:000012FB ; ---------------------------------------------------------------------------
.text:000012FB
.text:000012FB loc_12FB:                               ; CODE XREF: GetHeads3(x,x,x,x,x,x,x)+1Aj
.text:000012FB                 mov     esp, ebp
.text:000012FD                 pop     ebp
.text:000012FE                 retn    1Ch
.text:000012FE _GetHeads3@28   endp
.text:000012FE
.text:000012FE ; ---------------------------------------------------------------------------
.text:00001301                 align 10h
.text:00001310
.text:00001310 ; =============== S U B R O U T I N E =======================================
.text:00001310
.text:00001310 ; Attributes: bp-based frame
.text:00001310
.text:00001310 ; __stdcall GetHeads4(x, x, x, x, x, x, x)
.text:00001310 _GetHeads4@28   proc near               ; DATA XREF: MatchFinderMt_CreateVTable(x,x):loc_11D2o
.text:00001310
.text:00001310 var_4           = dword ptr -4
.text:00001310 arg_0           = dword ptr  8
.text:00001310 arg_4           = dword ptr  0Ch
.text:00001310 arg_8           = dword ptr  10h
.text:00001310 arg_C           = dword ptr  14h
.text:00001310 arg_10          = dword ptr  18h
.text:00001310 arg_14          = dword ptr  1Ch
.text:00001310 arg_18          = dword ptr  20h
.text:00001310
.text:00001310                 push    ebp
.text:00001311                 mov     ebp, esp
.text:00001313                 push    ecx
.text:00001314                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000131B                 jmp     short loc_1326
.text:0000131D ; ---------------------------------------------------------------------------
.text:0000131D
.text:0000131D loc_131D:                               ; CODE XREF: GetHeads4(x,x,x,x,x,x,x)+8Bj
.text:0000131D                 mov     eax, [ebp+arg_14]
.text:00001320                 sub     eax, 1
.text:00001323                 mov     [ebp+arg_14], eax
.text:00001326
.text:00001326 loc_1326:                               ; CODE XREF: GetHeads4(x,x,x,x,x,x,x)+Bj
.text:00001326                 cmp     [ebp+arg_14], 0
.text:0000132A                 jz      short loc_139D
.text:0000132C                 mov     ecx, [ebp+arg_0]
.text:0000132F                 movzx   edx, byte ptr [ecx]
.text:00001332                 mov     eax, [ebp+arg_0]
.text:00001335                 movzx   ecx, byte ptr [eax+1]
.text:00001339                 mov     eax, [ebp+arg_18]
.text:0000133C                 xor     ecx, [eax+edx*4]
.text:0000133F                 mov     edx, [ebp+arg_0]
.text:00001342                 movzx   eax, byte ptr [edx+2]
.text:00001346                 shl     eax, 8
.text:00001349                 xor     ecx, eax
.text:0000134B                 mov     edx, [ebp+arg_0]
.text:0000134E                 movzx   eax, byte ptr [edx+3]
.text:00001352                 mov     edx, [ebp+arg_18]
.text:00001355                 mov     eax, [edx+eax*4]
.text:00001358                 shl     eax, 5
.text:0000135B                 xor     ecx, eax
.text:0000135D                 and     ecx, [ebp+arg_C]
.text:00001360                 mov     [ebp+var_4], ecx
.text:00001363                 mov     ecx, [ebp+arg_0]
.text:00001366                 add     ecx, 1
.text:00001369                 mov     [ebp+arg_0], ecx
.text:0000136C                 mov     edx, [ebp+var_4]
.text:0000136F                 mov     eax, [ebp+arg_8]
.text:00001372                 mov     ecx, [ebp+arg_4]
.text:00001375                 sub     ecx, [eax+edx*4]
.text:00001378                 mov     edx, [ebp+arg_10]
.text:0000137B                 mov     [edx], ecx
.text:0000137D                 mov     eax, [ebp+arg_10]
.text:00001380                 add     eax, 4
.text:00001383                 mov     [ebp+arg_10], eax
.text:00001386                 mov     ecx, [ebp+var_4]
.text:00001389                 mov     edx, [ebp+arg_8]
.text:0000138C                 mov     eax, [ebp+arg_4]
.text:0000138F                 mov     [edx+ecx*4], eax
.text:00001392                 mov     ecx, [ebp+arg_4]
.text:00001395                 add     ecx, 1
.text:00001398                 mov     [ebp+arg_4], ecx
.text:0000139B                 jmp     short loc_131D
.text:0000139D ; ---------------------------------------------------------------------------
.text:0000139D
.text:0000139D loc_139D:                               ; CODE XREF: GetHeads4(x,x,x,x,x,x,x)+1Aj
.text:0000139D                 mov     esp, ebp
.text:0000139F                 pop     ebp
.text:000013A0                 retn    1Ch
.text:000013A0 _GetHeads4@28   endp
.text:000013A0
.text:000013A0 ; ---------------------------------------------------------------------------
.text:000013A3                 align 10h
.text:000013B0
.text:000013B0 ; =============== S U B R O U T I N E =======================================
.text:000013B0
.text:000013B0 ; Attributes: bp-based frame
.text:000013B0
.text:000013B0 ; __stdcall GetHeads4b(x, x, x, x, x, x, x)
.text:000013B0 _GetHeads4b@28  proc near               ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+B9o
.text:000013B0
.text:000013B0 var_4           = dword ptr -4
.text:000013B0 arg_0           = dword ptr  8
.text:000013B0 arg_4           = dword ptr  0Ch
.text:000013B0 arg_8           = dword ptr  10h
.text:000013B0 arg_C           = dword ptr  14h
.text:000013B0 arg_10          = dword ptr  18h
.text:000013B0 arg_14          = dword ptr  1Ch
.text:000013B0 arg_18          = dword ptr  20h
.text:000013B0
.text:000013B0                 push    ebp
.text:000013B1                 mov     ebp, esp
.text:000013B3                 push    ecx
.text:000013B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013BB                 jmp     short loc_13C6
.text:000013BD ; ---------------------------------------------------------------------------
.text:000013BD
.text:000013BD loc_13BD:                               ; CODE XREF: GetHeads4b(x,x,x,x,x,x,x)+85j
.text:000013BD                 mov     eax, [ebp+arg_14]
.text:000013C0                 sub     eax, 1
.text:000013C3                 mov     [ebp+arg_14], eax
.text:000013C6
.text:000013C6 loc_13C6:                               ; CODE XREF: GetHeads4b(x,x,x,x,x,x,x)+Bj
.text:000013C6                 cmp     [ebp+arg_14], 0
.text:000013CA                 jz      short loc_1437
.text:000013CC                 mov     ecx, [ebp+arg_0]
.text:000013CF                 movzx   edx, byte ptr [ecx]
.text:000013D2                 mov     eax, [ebp+arg_0]
.text:000013D5                 movzx   ecx, byte ptr [eax+1]
.text:000013D9                 mov     eax, [ebp+arg_18]
.text:000013DC                 xor     ecx, [eax+edx*4]
.text:000013DF                 mov     edx, [ebp+arg_0]
.text:000013E2                 movzx   eax, byte ptr [edx+2]
.text:000013E6                 shl     eax, 8
.text:000013E9                 xor     ecx, eax
.text:000013EB                 mov     edx, [ebp+arg_0]
.text:000013EE                 movzx   eax, byte ptr [edx+3]
.text:000013F2                 shl     eax, 10h
.text:000013F5                 xor     ecx, eax
.text:000013F7                 and     ecx, [ebp+arg_C]
.text:000013FA                 mov     [ebp+var_4], ecx
.text:000013FD                 mov     ecx, [ebp+arg_0]
.text:00001400                 add     ecx, 1
.text:00001403                 mov     [ebp+arg_0], ecx
.text:00001406                 mov     edx, [ebp+var_4]
.text:00001409                 mov     eax, [ebp+arg_8]
.text:0000140C                 mov     ecx, [ebp+arg_4]
.text:0000140F                 sub     ecx, [eax+edx*4]
.text:00001412                 mov     edx, [ebp+arg_10]
.text:00001415                 mov     [edx], ecx
.text:00001417                 mov     eax, [ebp+arg_10]
.text:0000141A                 add     eax, 4
.text:0000141D                 mov     [ebp+arg_10], eax
.text:00001420                 mov     ecx, [ebp+var_4]
.text:00001423                 mov     edx, [ebp+arg_8]
.text:00001426                 mov     eax, [ebp+arg_4]
.text:00001429                 mov     [edx+ecx*4], eax
.text:0000142C                 mov     ecx, [ebp+arg_4]
.text:0000142F                 add     ecx, 1
.text:00001432                 mov     [ebp+arg_4], ecx
.text:00001435                 jmp     short loc_13BD
.text:00001437 ; ---------------------------------------------------------------------------
.text:00001437
.text:00001437 loc_1437:                               ; CODE XREF: GetHeads4b(x,x,x,x,x,x,x)+1Aj
.text:00001437                 mov     esp, ebp
.text:00001439                 pop     ebp
.text:0000143A                 retn    1Ch
.text:0000143A _GetHeads4b@28  endp
.text:0000143A
.text:0000143A ; ---------------------------------------------------------------------------
.text:0000143D                 align 10h
.text:00001440
.text:00001440 ; =============== S U B R O U T I N E =======================================
.text:00001440
.text:00001440 ; Attributes: bp-based frame
.text:00001440
.text:00001440 ; __stdcall MatchFinderMt_GetPointerToCurrentPos(x)
.text:00001440 _MatchFinderMt_GetPointerToCurrentPos@4 proc near
.text:00001440                                         ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+2Ao
.text:00001440
.text:00001440 arg_0           = dword ptr  8
.text:00001440
.text:00001440                 push    ebp
.text:00001441                 mov     ebp, esp
.text:00001443                 mov     eax, [ebp+arg_0]
.text:00001446                 mov     eax, [eax]
.text:00001448                 pop     ebp
.text:00001449                 retn    4
.text:00001449 _MatchFinderMt_GetPointerToCurrentPos@4 endp
.text:00001449
.text:00001449 ; ---------------------------------------------------------------------------
.text:0000144C                 align 10h
.text:00001450
.text:00001450 ; =============== S U B R O U T I N E =======================================
.text:00001450
.text:00001450 ; Attributes: bp-based frame
.text:00001450
.text:00001450 ; __stdcall MatchFinderMt_GetNumAvailableBytes(x)
.text:00001450 _MatchFinderMt_GetNumAvailableBytes@4 proc near
.text:00001450                                         ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+20o
.text:00001450
.text:00001450 arg_0           = dword ptr  8
.text:00001450
.text:00001450                 push    ebp
.text:00001451                 mov     ebp, esp
.text:00001453                 mov     eax, [ebp+arg_0]
.text:00001456                 mov     ecx, [ebp+arg_0]
.text:00001459                 mov     edx, [eax+8]
.text:0000145C                 cmp     edx, [ecx+0Ch]
.text:0000145F                 jnz     short loc_146A
.text:00001461                 mov     eax, [ebp+arg_0]
.text:00001464                 push    eax
.text:00001465                 call    _MatchFinderMt_GetNextBlock_Bt@4 ; MatchFinderMt_GetNextBlock_Bt(x)
.text:0000146A
.text:0000146A loc_146A:                               ; CODE XREF: MatchFinderMt_GetNumAvailableBytes(x)+Fj
.text:0000146A                 mov     ecx, [ebp+arg_0]
.text:0000146D                 mov     eax, [ecx+14h]
.text:00001470                 cmp     ebp, esp
.text:00001472                 call    __RTC_CheckEsp
.text:00001477                 pop     ebp
.text:00001478                 retn    4
.text:00001478 _MatchFinderMt_GetNumAvailableBytes@4 endp
.text:00001478
.text:00001478 ; ---------------------------------------------------------------------------
.text:0000147B                 align 10h
.text:00001480
.text:00001480 ; =============== S U B R O U T I N E =======================================
.text:00001480
.text:00001480 ; Attributes: bp-based frame
.text:00001480
.text:00001480 ; __stdcall MatchFinderMt_GetNextBlock_Bt(x)
.text:00001480 _MatchFinderMt_GetNextBlock_Bt@4 proc near
.text:00001480                                         ; CODE XREF: MatchFinderMt_GetNumAvailableBytes(x)+15p
.text:00001480                                         ; MatchFinderMt0_Skip(x,x)+15p ...
.text:00001480
.text:00001480 var_8           = dword ptr -8
.text:00001480 var_4           = dword ptr -4
.text:00001480 arg_0           = dword ptr  8
.text:00001480
.text:00001480                 push    ebp
.text:00001481                 mov     ebp, esp
.text:00001483                 sub     esp, 8
.text:00001486                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000148D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001494                 mov     eax, [ebp+arg_0]
.text:00001497                 add     eax, 2Ch ; ','
.text:0000149A                 push    eax
.text:0000149B                 call    _MtSync_GetNextBlock@4 ; MtSync_GetNextBlock(x)
.text:000014A0                 mov     ecx, [ebp+arg_0]
.text:000014A3                 mov     edx, [ecx+74h]
.text:000014A6                 sub     edx, 1
.text:000014A9                 and     edx, 3Fh
.text:000014AC                 mov     [ebp+var_4], edx
.text:000014AF                 mov     eax, [ebp+var_4]
.text:000014B2                 shl     eax, 0Eh
.text:000014B5                 mov     [ebp+var_8], eax
.text:000014B8                 mov     ecx, [ebp+arg_0]
.text:000014BB                 mov     edx, [ebp+var_8]
.text:000014BE                 mov     [ecx+8], edx
.text:000014C1                 mov     eax, [ebp+arg_0]
.text:000014C4                 mov     ecx, [ebp+var_8]
.text:000014C7                 mov     [eax+0Ch], ecx
.text:000014CA                 mov     edx, [ebp+arg_0]
.text:000014CD                 mov     eax, [edx+8]
.text:000014D0                 mov     ecx, [ebp+arg_0]
.text:000014D3                 mov     edx, [ecx+4]
.text:000014D6                 mov     ecx, [ebp+arg_0]
.text:000014D9                 mov     ecx, [ecx+0Ch]
.text:000014DC                 add     ecx, [edx+eax*4]
.text:000014DF                 mov     edx, [ebp+arg_0]
.text:000014E2                 mov     [edx+0Ch], ecx
.text:000014E5                 mov     eax, [ebp+arg_0]
.text:000014E8                 mov     ecx, [eax+8]
.text:000014EB                 add     ecx, 1
.text:000014EE                 mov     edx, [ebp+arg_0]
.text:000014F1                 mov     [edx+8], ecx
.text:000014F4                 mov     eax, [ebp+arg_0]
.text:000014F7                 mov     ecx, [eax+8]
.text:000014FA                 mov     edx, [ebp+arg_0]
.text:000014FD                 mov     eax, [edx+4]
.text:00001500                 mov     edx, [ebp+arg_0]
.text:00001503                 mov     eax, [eax+ecx*4]
.text:00001506                 mov     [edx+14h], eax
.text:00001509                 mov     ecx, [ebp+arg_0]
.text:0000150C                 mov     edx, [ecx+8]
.text:0000150F                 add     edx, 1
.text:00001512                 mov     eax, [ebp+arg_0]
.text:00001515                 mov     [eax+8], edx
.text:00001518                 mov     ecx, [ebp+arg_0]
.text:0000151B                 cmp     dword ptr [ecx+10h], 0FFFFBFFFh
.text:00001522                 jb      short loc_152D
.text:00001524                 mov     edx, [ebp+arg_0]
.text:00001527                 push    edx
.text:00001528                 call    _MatchFinderMt_Normalize@4 ; MatchFinderMt_Normalize(x)
.text:0000152D
.text:0000152D loc_152D:                               ; CODE XREF: MatchFinderMt_GetNextBlock_Bt(x)+A2j
.text:0000152D                 add     esp, 8
.text:00001530                 cmp     ebp, esp
.text:00001532                 call    __RTC_CheckEsp
.text:00001537                 mov     esp, ebp
.text:00001539                 pop     ebp
.text:0000153A                 retn    4
.text:0000153A _MatchFinderMt_GetNextBlock_Bt@4 endp
.text:0000153A
.text:0000153A ; ---------------------------------------------------------------------------
.text:0000153D                 align 10h
.text:00001540
.text:00001540 ; =============== S U B R O U T I N E =======================================
.text:00001540
.text:00001540 ; Attributes: bp-based frame
.text:00001540
.text:00001540 ; __stdcall MatchFinderMt_Normalize(x)
.text:00001540 _MatchFinderMt_Normalize@4 proc near    ; CODE XREF: MatchFinderMt_GetNextBlock_Bt(x)+A8p
.text:00001540
.text:00001540 arg_0           = dword ptr  8
.text:00001540
.text:00001540                 push    ebp
.text:00001541                 mov     ebp, esp
.text:00001543                 mov     eax, [ebp+arg_0]
.text:00001546                 mov     ecx, [eax+1Ch]
.text:00001549                 push    ecx
.text:0000154A                 mov     edx, [ebp+arg_0]
.text:0000154D                 mov     eax, [edx+18h]
.text:00001550                 push    eax
.text:00001551                 mov     ecx, [ebp+arg_0]
.text:00001554                 mov     edx, [ebp+arg_0]
.text:00001557                 mov     eax, [ecx+10h]
.text:0000155A                 sub     eax, [edx+20h]
.text:0000155D                 sub     eax, 1
.text:00001560                 push    eax
.text:00001561                 call    _MatchFinder_Normalize3@12 ; MatchFinder_Normalize3(x,x,x)
.text:00001566                 mov     ecx, [ebp+arg_0]
.text:00001569                 mov     edx, [ecx+20h]
.text:0000156C                 add     edx, 1
.text:0000156F                 mov     eax, [ebp+arg_0]
.text:00001572                 mov     [eax+10h], edx
.text:00001575                 cmp     ebp, esp
.text:00001577                 call    __RTC_CheckEsp
.text:0000157C                 pop     ebp
.text:0000157D                 retn    4
.text:0000157D _MatchFinderMt_Normalize@4 endp
.text:0000157D
.text:00001580
.text:00001580 ; =============== S U B R O U T I N E =======================================
.text:00001580
.text:00001580 ; Attributes: bp-based frame
.text:00001580
.text:00001580 ; __stdcall MixMatches2(x, x, x)
.text:00001580 _MixMatches2@12 proc near               ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+95o
.text:00001580
.text:00001580 var_14          = dword ptr -14h
.text:00001580 var_10          = dword ptr -10h
.text:00001580 var_C           = dword ptr -0Ch
.text:00001580 var_8           = dword ptr -8
.text:00001580 var_4           = dword ptr -4
.text:00001580 arg_0           = dword ptr  8
.text:00001580 arg_4           = dword ptr  0Ch
.text:00001580 arg_8           = dword ptr  10h
.text:00001580
.text:00001580                 push    ebp
.text:00001581                 mov     ebp, esp
.text:00001583                 sub     esp, 14h
.text:00001586                 mov     eax, 0CCCCCCCCh
.text:0000158B                 mov     [ebp+var_14], eax
.text:0000158E                 mov     [ebp+var_10], eax
.text:00001591                 mov     [ebp+var_C], eax
.text:00001594                 mov     [ebp+var_8], eax
.text:00001597                 mov     [ebp+var_4], eax
.text:0000159A                 mov     eax, [ebp+arg_0]
.text:0000159D                 mov     ecx, [eax+18h]
.text:000015A0                 mov     [ebp+var_C], ecx
.text:000015A3                 mov     edx, [ebp+arg_0]
.text:000015A6                 mov     eax, [edx]
.text:000015A8                 mov     [ebp+var_10], eax
.text:000015AB                 mov     ecx, [ebp+arg_0]
.text:000015AE                 mov     edx, [ecx+10h]
.text:000015B1                 mov     [ebp+var_14], edx
.text:000015B4                 mov     eax, [ebp+var_10]
.text:000015B7                 movzx   ecx, byte ptr [eax]
.text:000015BA                 mov     edx, [ebp+arg_0]
.text:000015BD                 mov     eax, [edx+24h]
.text:000015C0                 mov     edx, [ebp+var_10]
.text:000015C3                 movzx   edx, byte ptr [edx+1]
.text:000015C7                 xor     edx, [eax+ecx*4]
.text:000015CA                 and     edx, 3FFh
.text:000015D0                 mov     [ebp+var_4], edx
.text:000015D3                 mov     eax, [ebp+var_4]
.text:000015D6                 mov     ecx, [ebp+var_C]
.text:000015D9                 mov     edx, [ecx+eax*4]
.text:000015DC                 mov     [ebp+var_8], edx
.text:000015DF                 mov     eax, [ebp+var_4]
.text:000015E2                 mov     ecx, [ebp+var_C]
.text:000015E5                 mov     edx, [ebp+var_14]
.text:000015E8                 mov     [ecx+eax*4], edx
.text:000015EB                 mov     eax, [ebp+var_8]
.text:000015EE                 cmp     eax, [ebp+arg_4]
.text:000015F1                 jb      short loc_1633
.text:000015F3                 mov     ecx, [ebp+var_8]
.text:000015F6                 sub     ecx, [ebp+var_14]
.text:000015F9                 mov     edx, [ebp+var_10]
.text:000015FC                 movzx   eax, byte ptr [edx+ecx]
.text:00001600                 mov     ecx, [ebp+var_10]
.text:00001603                 movzx   edx, byte ptr [ecx]
.text:00001606                 cmp     eax, edx
.text:00001608                 jnz     short loc_1633
.text:0000160A                 mov     eax, [ebp+arg_8]
.text:0000160D                 mov     dword ptr [eax], 2
.text:00001613                 mov     ecx, [ebp+arg_8]
.text:00001616                 add     ecx, 4
.text:00001619                 mov     [ebp+arg_8], ecx
.text:0000161C                 mov     edx, [ebp+var_14]
.text:0000161F                 sub     edx, [ebp+var_8]
.text:00001622                 sub     edx, 1
.text:00001625                 mov     eax, [ebp+arg_8]
.text:00001628                 mov     [eax], edx
.text:0000162A                 mov     ecx, [ebp+arg_8]
.text:0000162D                 add     ecx, 4
.text:00001630                 mov     [ebp+arg_8], ecx
.text:00001633
.text:00001633 loc_1633:                               ; CODE XREF: MixMatches2(x,x,x)+71j
.text:00001633                                         ; MixMatches2(x,x,x)+88j
.text:00001633                 mov     eax, [ebp+arg_8]
.text:00001636                 mov     esp, ebp
.text:00001638                 pop     ebp
.text:00001639                 retn    0Ch
.text:00001639 _MixMatches2@12 endp
.text:00001639
.text:00001639 ; ---------------------------------------------------------------------------
.text:0000163C                 align 10h
.text:00001640
.text:00001640 ; =============== S U B R O U T I N E =======================================
.text:00001640
.text:00001640 ; Attributes: bp-based frame
.text:00001640
.text:00001640 ; __stdcall MixMatches3(x, x, x)
.text:00001640 _MixMatches3@12 proc near               ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+D8o
.text:00001640
.text:00001640 var_20          = dword ptr -20h
.text:00001640 var_1C          = dword ptr -1Ch
.text:00001640 var_18          = dword ptr -18h
.text:00001640 var_14          = dword ptr -14h
.text:00001640 var_10          = dword ptr -10h
.text:00001640 var_C           = dword ptr -0Ch
.text:00001640 var_8           = dword ptr -8
.text:00001640 var_4           = dword ptr -4
.text:00001640 arg_0           = dword ptr  8
.text:00001640 arg_4           = dword ptr  0Ch
.text:00001640 arg_8           = dword ptr  10h
.text:00001640
.text:00001640                 push    ebp
.text:00001641                 mov     ebp, esp
.text:00001643                 sub     esp, 20h
.text:00001646                 mov     eax, 0CCCCCCCCh
.text:0000164B                 mov     [ebp+var_20], eax
.text:0000164E                 mov     [ebp+var_1C], eax
.text:00001651                 mov     [ebp+var_18], eax
.text:00001654                 mov     [ebp+var_14], eax
.text:00001657                 mov     [ebp+var_10], eax
.text:0000165A                 mov     [ebp+var_C], eax
.text:0000165D                 mov     [ebp+var_8], eax
.text:00001660                 mov     [ebp+var_4], eax
.text:00001663                 mov     eax, [ebp+arg_0]
.text:00001666                 mov     ecx, [eax+18h]
.text:00001669                 mov     [ebp+var_14], ecx
.text:0000166C                 mov     edx, [ebp+arg_0]
.text:0000166F                 mov     eax, [edx]
.text:00001671                 mov     [ebp+var_18], eax
.text:00001674                 mov     ecx, [ebp+arg_0]
.text:00001677                 mov     edx, [ecx+10h]
.text:0000167A                 mov     [ebp+var_1C], edx
.text:0000167D                 mov     eax, [ebp+var_18]
.text:00001680                 movzx   ecx, byte ptr [eax]
.text:00001683                 mov     edx, [ebp+arg_0]
.text:00001686                 mov     eax, [edx+24h]
.text:00001689                 mov     edx, [ebp+var_18]
.text:0000168C                 movzx   edx, byte ptr [edx+1]
.text:00001690                 xor     edx, [eax+ecx*4]
.text:00001693                 mov     [ebp+var_20], edx
.text:00001696                 mov     eax, [ebp+var_20]
.text:00001699                 and     eax, 3FFh
.text:0000169E                 mov     [ebp+var_4], eax
.text:000016A1                 mov     ecx, [ebp+var_18]
.text:000016A4                 movzx   edx, byte ptr [ecx+2]
.text:000016A8                 shl     edx, 8
.text:000016AB                 xor     edx, [ebp+var_20]
.text:000016AE                 and     edx, 0FFFFh
.text:000016B4                 mov     [ebp+var_8], edx
.text:000016B7                 mov     eax, [ebp+var_4]
.text:000016BA                 mov     ecx, [ebp+var_14]
.text:000016BD                 mov     edx, [ecx+eax*4]
.text:000016C0                 mov     [ebp+var_C], edx
.text:000016C3                 mov     eax, [ebp+var_8]
.text:000016C6                 mov     ecx, [ebp+var_14]
.text:000016C9                 mov     edx, [ecx+eax*4+1000h]
.text:000016D0                 mov     [ebp+var_10], edx
.text:000016D3                 mov     eax, [ebp+var_4]
.text:000016D6                 mov     ecx, [ebp+var_14]
.text:000016D9                 mov     edx, [ebp+var_1C]
.text:000016DC                 mov     [ecx+eax*4], edx
.text:000016DF                 mov     eax, [ebp+var_8]
.text:000016E2                 mov     ecx, [ebp+var_14]
.text:000016E5                 mov     edx, [ebp+var_1C]
.text:000016E8                 mov     [ecx+eax*4+1000h], edx
.text:000016EF                 mov     eax, [ebp+var_C]
.text:000016F2                 cmp     eax, [ebp+arg_4]
.text:000016F5                 jb      short loc_1759
.text:000016F7                 mov     ecx, [ebp+var_C]
.text:000016FA                 sub     ecx, [ebp+var_1C]
.text:000016FD                 mov     edx, [ebp+var_18]
.text:00001700                 movzx   eax, byte ptr [edx+ecx]
.text:00001704                 mov     ecx, [ebp+var_18]
.text:00001707                 movzx   edx, byte ptr [ecx]
.text:0000170A                 cmp     eax, edx
.text:0000170C                 jnz     short loc_1759
.text:0000170E                 mov     eax, [ebp+var_1C]
.text:00001711                 sub     eax, [ebp+var_C]
.text:00001714                 sub     eax, 1
.text:00001717                 mov     ecx, [ebp+arg_8]
.text:0000171A                 mov     [ecx+4], eax
.text:0000171D                 mov     edx, [ebp+var_C]
.text:00001720                 sub     edx, [ebp+var_1C]
.text:00001723                 mov     eax, [ebp+var_18]
.text:00001726                 movzx   ecx, byte ptr [eax+edx+2]
.text:0000172B                 mov     edx, [ebp+var_18]
.text:0000172E                 movzx   eax, byte ptr [edx+2]
.text:00001732                 cmp     ecx, eax
.text:00001734                 jnz     short loc_1747
.text:00001736                 mov     ecx, [ebp+arg_8]
.text:00001739                 mov     dword ptr [ecx], 3
.text:0000173F                 mov     eax, [ebp+arg_8]
.text:00001742                 add     eax, 8
.text:00001745                 jmp     short loc_17A4
.text:00001747 ; ---------------------------------------------------------------------------
.text:00001747
.text:00001747 loc_1747:                               ; CODE XREF: MixMatches3(x,x,x)+F4j
.text:00001747                 mov     edx, [ebp+arg_8]
.text:0000174A                 mov     dword ptr [edx], 2
.text:00001750                 mov     eax, [ebp+arg_8]
.text:00001753                 add     eax, 8
.text:00001756                 mov     [ebp+arg_8], eax
.text:00001759
.text:00001759 loc_1759:                               ; CODE XREF: MixMatches3(x,x,x)+B5j
.text:00001759                                         ; MixMatches3(x,x,x)+CCj
.text:00001759                 mov     ecx, [ebp+var_10]
.text:0000175C                 cmp     ecx, [ebp+arg_4]
.text:0000175F                 jb      short loc_17A1
.text:00001761                 mov     edx, [ebp+var_10]
.text:00001764                 sub     edx, [ebp+var_1C]
.text:00001767                 mov     eax, [ebp+var_18]
.text:0000176A                 movzx   ecx, byte ptr [eax+edx]
.text:0000176E                 mov     edx, [ebp+var_18]
.text:00001771                 movzx   eax, byte ptr [edx]
.text:00001774                 cmp     ecx, eax
.text:00001776                 jnz     short loc_17A1
.text:00001778                 mov     ecx, [ebp+arg_8]
.text:0000177B                 mov     dword ptr [ecx], 3
.text:00001781                 mov     edx, [ebp+arg_8]
.text:00001784                 add     edx, 4
.text:00001787                 mov     [ebp+arg_8], edx
.text:0000178A                 mov     eax, [ebp+var_1C]
.text:0000178D                 sub     eax, [ebp+var_10]
.text:00001790                 sub     eax, 1
.text:00001793                 mov     ecx, [ebp+arg_8]
.text:00001796                 mov     [ecx], eax
.text:00001798                 mov     edx, [ebp+arg_8]
.text:0000179B                 add     edx, 4
.text:0000179E                 mov     [ebp+arg_8], edx
.text:000017A1
.text:000017A1 loc_17A1:                               ; CODE XREF: MixMatches3(x,x,x)+11Fj
.text:000017A1                                         ; MixMatches3(x,x,x)+136j
.text:000017A1                 mov     eax, [ebp+arg_8]
.text:000017A4
.text:000017A4 loc_17A4:                               ; CODE XREF: MixMatches3(x,x,x)+105j
.text:000017A4                 mov     esp, ebp
.text:000017A6                 pop     ebp
.text:000017A7                 retn    0Ch
.text:000017A7 _MixMatches3@12 endp
.text:000017A7
.text:000017A7 ; ---------------------------------------------------------------------------
.text:000017AA                 align 10h
.text:000017B0
.text:000017B0 ; =============== S U B R O U T I N E =======================================
.text:000017B0
.text:000017B0 ; Attributes: bp-based frame
.text:000017B0
.text:000017B0 ; __stdcall MatchFinderMt2_GetMatches(x, x)
.text:000017B0 _MatchFinderMt2_GetMatches@8 proc near  ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+7Co
.text:000017B0
.text:000017B0 var_C           = dword ptr -0Ch
.text:000017B0 var_8           = dword ptr -8
.text:000017B0 var_4           = dword ptr -4
.text:000017B0 arg_0           = dword ptr  8
.text:000017B0 arg_4           = dword ptr  0Ch
.text:000017B0
.text:000017B0                 push    ebp
.text:000017B1                 mov     ebp, esp
.text:000017B3                 sub     esp, 0Ch
.text:000017B6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000017BD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000017C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017CB                 mov     eax, [ebp+arg_0]
.text:000017CE                 mov     ecx, [eax+8]
.text:000017D1                 mov     edx, [ebp+arg_0]
.text:000017D4                 mov     eax, [edx+4]
.text:000017D7                 lea     ecx, [eax+ecx*4]
.text:000017DA                 mov     [ebp+var_4], ecx
.text:000017DD                 mov     edx, [ebp+var_4]
.text:000017E0                 mov     eax, [edx]
.text:000017E2                 mov     [ebp+var_8], eax
.text:000017E5                 mov     ecx, [ebp+var_4]
.text:000017E8                 add     ecx, 4
.text:000017EB                 mov     [ebp+var_4], ecx
.text:000017EE                 mov     edx, [ebp+arg_0]
.text:000017F1                 mov     eax, [edx+8]
.text:000017F4                 mov     ecx, [ebp+var_8]
.text:000017F7                 lea     edx, [ecx+eax+1]
.text:000017FB                 mov     eax, [ebp+arg_0]
.text:000017FE                 mov     [eax+8], edx
.text:00001801                 mov     ecx, [ebp+arg_0]
.text:00001804                 mov     edx, [ecx+14h]
.text:00001807                 sub     edx, 1
.text:0000180A                 mov     eax, [ebp+arg_0]
.text:0000180D                 mov     [eax+14h], edx
.text:00001810                 mov     [ebp+var_C], 0
.text:00001817                 jmp     short loc_1822
.text:00001819 ; ---------------------------------------------------------------------------
.text:00001819
.text:00001819 loc_1819:                               ; CODE XREF: MatchFinderMt2_GetMatches(x,x)+B2j
.text:00001819                 mov     ecx, [ebp+var_C]
.text:0000181C                 add     ecx, 2
.text:0000181F                 mov     [ebp+var_C], ecx
.text:00001822
.text:00001822 loc_1822:                               ; CODE XREF: MatchFinderMt2_GetMatches(x,x)+67j
.text:00001822                 mov     edx, [ebp+var_C]
.text:00001825                 cmp     edx, [ebp+var_8]
.text:00001828                 jnb     short loc_1864
.text:0000182A                 mov     eax, [ebp+arg_4]
.text:0000182D                 mov     ecx, [ebp+var_4]
.text:00001830                 mov     edx, [ecx]
.text:00001832                 mov     [eax], edx
.text:00001834                 mov     eax, [ebp+arg_4]
.text:00001837                 add     eax, 4
.text:0000183A                 mov     [ebp+arg_4], eax
.text:0000183D                 mov     ecx, [ebp+var_4]
.text:00001840                 add     ecx, 4
.text:00001843                 mov     [ebp+var_4], ecx
.text:00001846                 mov     edx, [ebp+arg_4]
.text:00001849                 mov     eax, [ebp+var_4]
.text:0000184C                 mov     ecx, [eax]
.text:0000184E                 mov     [edx], ecx
.text:00001850                 mov     edx, [ebp+arg_4]
.text:00001853                 add     edx, 4
.text:00001856                 mov     [ebp+arg_4], edx
.text:00001859                 mov     eax, [ebp+var_4]
.text:0000185C                 add     eax, 4
.text:0000185F                 mov     [ebp+var_4], eax
.text:00001862                 jmp     short loc_1819
.text:00001864 ; ---------------------------------------------------------------------------
.text:00001864
.text:00001864 loc_1864:                               ; CODE XREF: MatchFinderMt2_GetMatches(x,x)+78j
.text:00001864                 mov     ecx, [ebp+arg_0]
.text:00001867                 mov     edx, [ecx+10h]
.text:0000186A                 add     edx, 1
.text:0000186D                 mov     eax, [ebp+arg_0]
.text:00001870                 mov     [eax+10h], edx
.text:00001873                 mov     ecx, [ebp+arg_0]
.text:00001876                 mov     edx, [ecx]
.text:00001878                 add     edx, 1
.text:0000187B                 mov     eax, [ebp+arg_0]
.text:0000187E                 mov     [eax], edx
.text:00001880                 mov     eax, [ebp+var_8]
.text:00001883                 mov     esp, ebp
.text:00001885                 pop     ebp
.text:00001886                 retn    8
.text:00001886 _MatchFinderMt2_GetMatches@8 endp
.text:00001886
.text:00001886 ; ---------------------------------------------------------------------------
.text:00001889                 align 10h
.text:00001890
.text:00001890 ; =============== S U B R O U T I N E =======================================
.text:00001890
.text:00001890 ; Attributes: bp-based frame
.text:00001890
.text:00001890 ; __stdcall MatchFinderMt_GetMatches(x, x)
.text:00001890 _MatchFinderMt_GetMatches@8 proc near   ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+34o
.text:00001890
.text:00001890 var_10          = dword ptr -10h
.text:00001890 var_C           = dword ptr -0Ch
.text:00001890 var_8           = dword ptr -8
.text:00001890 var_4           = dword ptr -4
.text:00001890 arg_0           = dword ptr  8
.text:00001890 arg_4           = dword ptr  0Ch
.text:00001890
.text:00001890                 push    ebp
.text:00001891                 mov     ebp, esp
.text:00001893                 sub     esp, 10h
.text:00001896                 push    esi
.text:00001897                 mov     eax, 0CCCCCCCCh
.text:0000189C                 mov     [ebp+var_10], eax
.text:0000189F                 mov     [ebp+var_C], eax
.text:000018A2                 mov     [ebp+var_8], eax
.text:000018A5                 mov     [ebp+var_4], eax
.text:000018A8                 mov     eax, [ebp+arg_0]
.text:000018AB                 mov     ecx, [eax+8]
.text:000018AE                 mov     edx, [ebp+arg_0]
.text:000018B1                 mov     eax, [edx+4]
.text:000018B4                 lea     ecx, [eax+ecx*4]
.text:000018B7                 mov     [ebp+var_4], ecx
.text:000018BA                 mov     edx, [ebp+var_4]
.text:000018BD                 mov     eax, [edx]
.text:000018BF                 mov     [ebp+var_8], eax
.text:000018C2                 mov     ecx, [ebp+var_4]
.text:000018C5                 add     ecx, 4
.text:000018C8                 mov     [ebp+var_4], ecx
.text:000018CB                 mov     edx, [ebp+arg_0]
.text:000018CE                 mov     eax, [edx+8]
.text:000018D1                 mov     ecx, [ebp+var_8]
.text:000018D4                 lea     edx, [ecx+eax+1]
.text:000018D8                 mov     eax, [ebp+arg_0]
.text:000018DB                 mov     [eax+8], edx
.text:000018DE                 cmp     [ebp+var_8], 0
.text:000018E2                 jnz     short loc_1948
.text:000018E4                 mov     ecx, [ebp+arg_0]
.text:000018E7                 mov     edx, [ecx+14h]
.text:000018EA                 mov     eax, [ebp+arg_0]
.text:000018ED                 mov     ecx, [eax+14h]
.text:000018F0                 sub     ecx, 1
.text:000018F3                 mov     eax, [ebp+arg_0]
.text:000018F6                 mov     [eax+14h], ecx
.text:000018F9                 cmp     edx, 4
.text:000018FC                 jb      short loc_1907
.text:000018FE                 mov     [ebp+var_10], 1
.text:00001905                 jmp     short loc_190E
.text:00001907 ; ---------------------------------------------------------------------------
.text:00001907
.text:00001907 loc_1907:                               ; CODE XREF: MatchFinderMt_GetMatches(x,x)+6Cj
.text:00001907                 mov     [ebp+var_10], 0
.text:0000190E
.text:0000190E loc_190E:                               ; CODE XREF: MatchFinderMt_GetMatches(x,x)+75j
.text:0000190E                 cmp     [ebp+var_10], 0
.text:00001912                 jz      short loc_1943
.text:00001914                 mov     esi, esp
.text:00001916                 mov     ecx, [ebp+arg_4]
.text:00001919                 push    ecx
.text:0000191A                 mov     edx, [ebp+arg_0]
.text:0000191D                 mov     eax, [ebp+arg_0]
.text:00001920                 mov     ecx, [edx+10h]
.text:00001923                 sub     ecx, [eax+20h]
.text:00001926                 push    ecx
.text:00001927                 mov     edx, [ebp+arg_0]
.text:0000192A                 push    edx
.text:0000192B                 mov     eax, [ebp+arg_0]
.text:0000192E                 mov     ecx, [eax+28h]
.text:00001931                 call    ecx
.text:00001933                 cmp     esi, esp
.text:00001935                 call    __RTC_CheckEsp
.text:0000193A                 sub     eax, [ebp+arg_4]
.text:0000193D                 sar     eax, 2
.text:00001940                 mov     [ebp+var_8], eax
.text:00001943
.text:00001943 loc_1943:                               ; CODE XREF: MatchFinderMt_GetMatches(x,x)+82j
.text:00001943                 jmp     loc_19CF
.text:00001948 ; ---------------------------------------------------------------------------
.text:00001948
.text:00001948 loc_1948:                               ; CODE XREF: MatchFinderMt_GetMatches(x,x)+52j
.text:00001948                 mov     edx, [ebp+arg_0]
.text:0000194B                 mov     eax, [edx+14h]
.text:0000194E                 sub     eax, 1
.text:00001951                 mov     ecx, [ebp+arg_0]
.text:00001954                 mov     [ecx+14h], eax
.text:00001957                 mov     esi, esp
.text:00001959                 mov     edx, [ebp+arg_4]
.text:0000195C                 push    edx
.text:0000195D                 mov     eax, [ebp+arg_0]
.text:00001960                 mov     ecx, [ebp+var_4]
.text:00001963                 mov     edx, [eax+10h]
.text:00001966                 sub     edx, [ecx+4]
.text:00001969                 push    edx
.text:0000196A                 mov     eax, [ebp+arg_0]
.text:0000196D                 push    eax
.text:0000196E                 mov     ecx, [ebp+arg_0]
.text:00001971                 mov     edx, [ecx+28h]
.text:00001974                 call    edx
.text:00001976                 cmp     esi, esp
.text:00001978                 call    __RTC_CheckEsp
.text:0000197D                 mov     [ebp+var_C], eax
.text:00001980
.text:00001980 loc_1980:                               ; CODE XREF: MatchFinderMt_GetMatches(x,x)+131j
.text:00001980                 mov     eax, [ebp+var_C]
.text:00001983                 mov     ecx, [ebp+var_4]
.text:00001986                 mov     edx, [ecx]
.text:00001988                 mov     [eax], edx
.text:0000198A                 mov     eax, [ebp+var_C]
.text:0000198D                 add     eax, 4
.text:00001990                 mov     [ebp+var_C], eax
.text:00001993                 mov     ecx, [ebp+var_4]
.text:00001996                 add     ecx, 4
.text:00001999                 mov     [ebp+var_4], ecx
.text:0000199C                 mov     edx, [ebp+var_C]
.text:0000199F                 mov     eax, [ebp+var_4]
.text:000019A2                 mov     ecx, [eax]
.text:000019A4                 mov     [edx], ecx
.text:000019A6                 mov     edx, [ebp+var_C]
.text:000019A9                 add     edx, 4
.text:000019AC                 mov     [ebp+var_C], edx
.text:000019AF                 mov     eax, [ebp+var_4]
.text:000019B2                 add     eax, 4
.text:000019B5                 mov     [ebp+var_4], eax
.text:000019B8                 mov     ecx, [ebp+var_8]
.text:000019BB                 sub     ecx, 2
.text:000019BE                 mov     [ebp+var_8], ecx
.text:000019C1                 jnz     short loc_1980
.text:000019C3                 mov     edx, [ebp+var_C]
.text:000019C6                 sub     edx, [ebp+arg_4]
.text:000019C9                 sar     edx, 2
.text:000019CC                 mov     [ebp+var_8], edx
.text:000019CF
.text:000019CF loc_19CF:                               ; CODE XREF: MatchFinderMt_GetMatches(x,x):loc_1943j
.text:000019CF                 mov     eax, [ebp+arg_0]
.text:000019D2                 mov     ecx, [eax+10h]
.text:000019D5                 add     ecx, 1
.text:000019D8                 mov     edx, [ebp+arg_0]
.text:000019DB                 mov     [edx+10h], ecx
.text:000019DE                 mov     eax, [ebp+arg_0]
.text:000019E1                 mov     ecx, [eax]
.text:000019E3                 add     ecx, 1
.text:000019E6                 mov     edx, [ebp+arg_0]
.text:000019E9                 mov     [edx], ecx
.text:000019EB                 mov     eax, [ebp+var_8]
.text:000019EE                 pop     esi
.text:000019EF                 add     esp, 10h
.text:000019F2                 cmp     ebp, esp
.text:000019F4                 call    __RTC_CheckEsp
.text:000019F9                 mov     esp, ebp
.text:000019FB                 pop     ebp
.text:000019FC                 retn    8
.text:000019FC _MatchFinderMt_GetMatches@8 endp
.text:000019FC
.text:000019FC ; ---------------------------------------------------------------------------
.text:000019FF                 align 10h
.text:00001A00
.text:00001A00 ; =============== S U B R O U T I N E =======================================
.text:00001A00
.text:00001A00 ; Attributes: bp-based frame
.text:00001A00
.text:00001A00 ; __stdcall MatchFinderMt0_Skip(x, x)
.text:00001A00 _MatchFinderMt0_Skip@8 proc near        ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+72o
.text:00001A00
.text:00001A00 arg_0           = dword ptr  8
.text:00001A00 arg_4           = dword ptr  0Ch
.text:00001A00
.text:00001A00                 push    ebp
.text:00001A01                 mov     ebp, esp
.text:00001A03
.text:00001A03 loc_1A03:                               ; CODE XREF: MatchFinderMt0_Skip(x,x)+6Dj
.text:00001A03                 mov     eax, [ebp+arg_0]
.text:00001A06                 mov     ecx, [ebp+arg_0]
.text:00001A09                 mov     edx, [eax+8]
.text:00001A0C                 cmp     edx, [ecx+0Ch]
.text:00001A0F                 jnz     short loc_1A1A
.text:00001A11                 mov     eax, [ebp+arg_0]
.text:00001A14                 push    eax
.text:00001A15                 call    _MatchFinderMt_GetNextBlock_Bt@4 ; MatchFinderMt_GetNextBlock_Bt(x)
.text:00001A1A
.text:00001A1A loc_1A1A:                               ; CODE XREF: MatchFinderMt0_Skip(x,x)+Fj
.text:00001A1A                 mov     ecx, [ebp+arg_0]
.text:00001A1D                 mov     edx, [ecx+14h]
.text:00001A20                 sub     edx, 1
.text:00001A23                 mov     eax, [ebp+arg_0]
.text:00001A26                 mov     [eax+14h], edx
.text:00001A29                 mov     ecx, [ebp+arg_0]
.text:00001A2C                 mov     edx, [ecx+10h]
.text:00001A2F                 add     edx, 1
.text:00001A32                 mov     eax, [ebp+arg_0]
.text:00001A35                 mov     [eax+10h], edx
.text:00001A38                 mov     ecx, [ebp+arg_0]
.text:00001A3B                 mov     edx, [ecx]
.text:00001A3D                 add     edx, 1
.text:00001A40                 mov     eax, [ebp+arg_0]
.text:00001A43                 mov     [eax], edx
.text:00001A45                 mov     ecx, [ebp+arg_0]
.text:00001A48                 mov     edx, [ecx+8]
.text:00001A4B                 mov     eax, [ebp+arg_0]
.text:00001A4E                 mov     ecx, [eax+4]
.text:00001A51                 mov     edx, [ecx+edx*4]
.text:00001A54                 mov     eax, [ebp+arg_0]
.text:00001A57                 mov     ecx, [eax+8]
.text:00001A5A                 lea     edx, [edx+ecx+1]
.text:00001A5E                 mov     eax, [ebp+arg_0]
.text:00001A61                 mov     [eax+8], edx
.text:00001A64                 mov     ecx, [ebp+arg_4]
.text:00001A67                 sub     ecx, 1
.text:00001A6A                 mov     [ebp+arg_4], ecx
.text:00001A6D                 jnz     short loc_1A03
.text:00001A6F                 cmp     ebp, esp
.text:00001A71                 call    __RTC_CheckEsp
.text:00001A76                 pop     ebp
.text:00001A77                 retn    8
.text:00001A77 _MatchFinderMt0_Skip@8 endp
.text:00001A77
.text:00001A77 ; ---------------------------------------------------------------------------
.text:00001A7A                 align 10h
.text:00001A80
.text:00001A80 ; =============== S U B R O U T I N E =======================================
.text:00001A80
.text:00001A80 ; Attributes: bp-based frame
.text:00001A80
.text:00001A80 ; __stdcall MatchFinderMt2_Skip(x, x)
.text:00001A80 _MatchFinderMt2_Skip@8 proc near        ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+9Fo
.text:00001A80
.text:00001A80 var_10          = dword ptr -10h
.text:00001A80 var_C           = dword ptr -0Ch
.text:00001A80 var_8           = dword ptr -8
.text:00001A80 var_4           = dword ptr -4
.text:00001A80 arg_0           = dword ptr  8
.text:00001A80 arg_4           = dword ptr  0Ch
.text:00001A80
.text:00001A80                 push    ebp
.text:00001A81                 mov     ebp, esp
.text:00001A83                 sub     esp, 10h
.text:00001A86                 mov     eax, 0CCCCCCCCh
.text:00001A8B                 mov     [ebp+var_10], eax
.text:00001A8E                 mov     [ebp+var_C], eax
.text:00001A91                 mov     [ebp+var_8], eax
.text:00001A94                 mov     [ebp+var_4], eax
.text:00001A97
.text:00001A97 loc_1A97:                               ; CODE XREF: MatchFinderMt2_Skip(x,x)+E1j
.text:00001A97                 mov     eax, [ebp+arg_0]
.text:00001A9A                 mov     ecx, [ebp+arg_0]
.text:00001A9D                 mov     edx, [eax+8]
.text:00001AA0                 cmp     edx, [ecx+0Ch]
.text:00001AA3                 jnz     short loc_1AAE
.text:00001AA5                 mov     eax, [ebp+arg_0]
.text:00001AA8                 push    eax
.text:00001AA9                 call    _MatchFinderMt_GetNextBlock_Bt@4 ; MatchFinderMt_GetNextBlock_Bt(x)
.text:00001AAE
.text:00001AAE loc_1AAE:                               ; CODE XREF: MatchFinderMt2_Skip(x,x)+23j
.text:00001AAE                 mov     ecx, [ebp+arg_0]
.text:00001AB1                 mov     edx, [ecx+14h]
.text:00001AB4                 mov     eax, [ebp+arg_0]
.text:00001AB7                 mov     ecx, [eax+14h]
.text:00001ABA                 sub     ecx, 1
.text:00001ABD                 mov     eax, [ebp+arg_0]
.text:00001AC0                 mov     [eax+14h], ecx
.text:00001AC3                 cmp     edx, 2
.text:00001AC6                 jb      short loc_1AD1
.text:00001AC8                 mov     [ebp+var_10], 1
.text:00001ACF                 jmp     short loc_1AD8
.text:00001AD1 ; ---------------------------------------------------------------------------
.text:00001AD1
.text:00001AD1 loc_1AD1:                               ; CODE XREF: MatchFinderMt2_Skip(x,x)+46j
.text:00001AD1                 mov     [ebp+var_10], 0
.text:00001AD8
.text:00001AD8 loc_1AD8:                               ; CODE XREF: MatchFinderMt2_Skip(x,x)+4Fj
.text:00001AD8                 cmp     [ebp+var_10], 0
.text:00001ADC                 jz      short loc_1B1D
.text:00001ADE                 mov     ecx, [ebp+arg_0]
.text:00001AE1                 mov     edx, [ecx]
.text:00001AE3                 mov     [ebp+var_4], edx
.text:00001AE6                 mov     eax, [ebp+arg_0]
.text:00001AE9                 mov     ecx, [eax+18h]
.text:00001AEC                 mov     [ebp+var_8], ecx
.text:00001AEF                 mov     edx, [ebp+var_4]
.text:00001AF2                 movzx   eax, byte ptr [edx]
.text:00001AF5                 mov     ecx, [ebp+arg_0]
.text:00001AF8                 mov     edx, [ecx+24h]
.text:00001AFB                 mov     ecx, [ebp+var_4]
.text:00001AFE                 movzx   ecx, byte ptr [ecx+1]
.text:00001B02                 xor     ecx, [edx+eax*4]
.text:00001B05                 and     ecx, 3FFh
.text:00001B0B                 mov     [ebp+var_C], ecx
.text:00001B0E                 mov     edx, [ebp+var_C]
.text:00001B11                 mov     eax, [ebp+var_8]
.text:00001B14                 mov     ecx, [ebp+arg_0]
.text:00001B17                 mov     ecx, [ecx+10h]
.text:00001B1A                 mov     [eax+edx*4], ecx
.text:00001B1D
.text:00001B1D loc_1B1D:                               ; CODE XREF: MatchFinderMt2_Skip(x,x)+5Cj
.text:00001B1D                 mov     edx, [ebp+arg_0]
.text:00001B20                 mov     eax, [edx+10h]
.text:00001B23                 add     eax, 1
.text:00001B26                 mov     ecx, [ebp+arg_0]
.text:00001B29                 mov     [ecx+10h], eax
.text:00001B2C                 mov     edx, [ebp+arg_0]
.text:00001B2F                 mov     eax, [edx]
.text:00001B31                 add     eax, 1
.text:00001B34                 mov     ecx, [ebp+arg_0]
.text:00001B37                 mov     [ecx], eax
.text:00001B39                 mov     edx, [ebp+arg_0]
.text:00001B3C                 mov     eax, [edx+8]
.text:00001B3F                 mov     ecx, [ebp+arg_0]
.text:00001B42                 mov     edx, [ecx+4]
.text:00001B45                 mov     eax, [edx+eax*4]
.text:00001B48                 mov     ecx, [ebp+arg_0]
.text:00001B4B                 mov     edx, [ecx+8]
.text:00001B4E                 lea     eax, [eax+edx+1]
.text:00001B52                 mov     ecx, [ebp+arg_0]
.text:00001B55                 mov     [ecx+8], eax
.text:00001B58                 mov     edx, [ebp+arg_4]
.text:00001B5B                 sub     edx, 1
.text:00001B5E                 mov     [ebp+arg_4], edx
.text:00001B61                 jnz     loc_1A97
.text:00001B67                 add     esp, 10h
.text:00001B6A                 cmp     ebp, esp
.text:00001B6C                 call    __RTC_CheckEsp
.text:00001B71                 mov     esp, ebp
.text:00001B73                 pop     ebp
.text:00001B74                 retn    8
.text:00001B74 _MatchFinderMt2_Skip@8 endp
.text:00001B74
.text:00001B74 ; ---------------------------------------------------------------------------
.text:00001B77                 align 10h
.text:00001B80
.text:00001B80 ; =============== S U B R O U T I N E =======================================
.text:00001B80
.text:00001B80 ; Attributes: bp-based frame
.text:00001B80
.text:00001B80 ; __stdcall MatchFinderMt3_Skip(x, x)
.text:00001B80 _MatchFinderMt3_Skip@8 proc near        ; DATA XREF: MatchFinderMt_CreateVTable(x,x)+E2o
.text:00001B80
.text:00001B80 var_18          = dword ptr -18h
.text:00001B80 var_14          = dword ptr -14h
.text:00001B80 var_10          = dword ptr -10h
.text:00001B80 var_C           = dword ptr -0Ch
.text:00001B80 var_8           = dword ptr -8
.text:00001B80 var_4           = dword ptr -4
.text:00001B80 arg_0           = dword ptr  8
.text:00001B80 arg_4           = dword ptr  0Ch
.text:00001B80
.text:00001B80                 push    ebp
.text:00001B81                 mov     ebp, esp
.text:00001B83                 sub     esp, 18h
.text:00001B86                 push    esi
.text:00001B87                 mov     eax, 0CCCCCCCCh
.text:00001B8C                 mov     [ebp+var_18], eax
.text:00001B8F                 mov     [ebp+var_14], eax
.text:00001B92                 mov     [ebp+var_10], eax
.text:00001B95                 mov     [ebp+var_C], eax
.text:00001B98                 mov     [ebp+var_8], eax
.text:00001B9B                 mov     [ebp+var_4], eax
.text:00001B9E
.text:00001B9E loc_1B9E:                               ; CODE XREF: MatchFinderMt3_Skip(x,x)+11Aj
.text:00001B9E                 mov     eax, [ebp+arg_0]
.text:00001BA1                 mov     ecx, [ebp+arg_0]
.text:00001BA4                 mov     edx, [eax+8]
.text:00001BA7                 cmp     edx, [ecx+0Ch]
.text:00001BAA                 jnz     short loc_1BB5
.text:00001BAC                 mov     eax, [ebp+arg_0]
.text:00001BAF                 push    eax
.text:00001BB0                 call    _MatchFinderMt_GetNextBlock_Bt@4 ; MatchFinderMt_GetNextBlock_Bt(x)
.text:00001BB5
.text:00001BB5 loc_1BB5:                               ; CODE XREF: MatchFinderMt3_Skip(x,x)+2Aj
.text:00001BB5                 mov     ecx, [ebp+arg_0]
.text:00001BB8                 mov     edx, [ecx+14h]
.text:00001BBB                 mov     eax, [ebp+arg_0]
.text:00001BBE                 mov     ecx, [eax+14h]
.text:00001BC1                 sub     ecx, 1
.text:00001BC4                 mov     eax, [ebp+arg_0]
.text:00001BC7                 mov     [eax+14h], ecx
.text:00001BCA                 cmp     edx, 3
.text:00001BCD                 jb      short loc_1BD8
.text:00001BCF                 mov     [ebp+var_18], 1
.text:00001BD6                 jmp     short loc_1BDF
.text:00001BD8 ; ---------------------------------------------------------------------------
.text:00001BD8
.text:00001BD8 loc_1BD8:                               ; CODE XREF: MatchFinderMt3_Skip(x,x)+4Dj
.text:00001BD8                 mov     [ebp+var_18], 0
.text:00001BDF
.text:00001BDF loc_1BDF:                               ; CODE XREF: MatchFinderMt3_Skip(x,x)+56j
.text:00001BDF                 cmp     [ebp+var_18], 0
.text:00001BE3                 jz      short loc_1C56
.text:00001BE5                 mov     ecx, [ebp+arg_0]
.text:00001BE8                 mov     edx, [ecx]
.text:00001BEA                 mov     [ebp+var_4], edx
.text:00001BED                 mov     eax, [ebp+arg_0]
.text:00001BF0                 mov     ecx, [eax+18h]
.text:00001BF3                 mov     [ebp+var_8], ecx
.text:00001BF6                 mov     edx, [ebp+var_4]
.text:00001BF9                 movzx   eax, byte ptr [edx]
.text:00001BFC                 mov     ecx, [ebp+arg_0]
.text:00001BFF                 mov     edx, [ecx+24h]
.text:00001C02                 mov     ecx, [ebp+var_4]
.text:00001C05                 movzx   ecx, byte ptr [ecx+1]
.text:00001C09                 xor     ecx, [edx+eax*4]
.text:00001C0C                 mov     [ebp+var_14], ecx
.text:00001C0F                 mov     edx, [ebp+var_14]
.text:00001C12                 and     edx, 3FFh
.text:00001C18                 mov     [ebp+var_C], edx
.text:00001C1B                 mov     eax, [ebp+var_4]
.text:00001C1E                 movzx   ecx, byte ptr [eax+2]
.text:00001C22                 shl     ecx, 8
.text:00001C25                 xor     ecx, [ebp+var_14]
.text:00001C28                 and     ecx, 0FFFFh
.text:00001C2E                 mov     [ebp+var_10], ecx
.text:00001C31                 mov     edx, [ebp+var_C]
.text:00001C34                 mov     eax, [ebp+var_8]
.text:00001C37                 mov     ecx, [ebp+arg_0]
.text:00001C3A                 mov     ecx, [ecx+10h]
.text:00001C3D                 mov     [eax+edx*4], ecx
.text:00001C40                 mov     edx, [ebp+var_10]
.text:00001C43                 mov     eax, [ebp+var_8]
.text:00001C46                 mov     ecx, [ebp+var_C]
.text:00001C49                 mov     esi, [ebp+var_8]
.text:00001C4C                 mov     ecx, [esi+ecx*4]
.text:00001C4F                 mov     [eax+edx*4+1000h], ecx
.text:00001C56
.text:00001C56 loc_1C56:                               ; CODE XREF: MatchFinderMt3_Skip(x,x)+63j
.text:00001C56                 mov     edx, [ebp+arg_0]
.text:00001C59                 mov     eax, [edx+10h]
.text:00001C5C                 add     eax, 1
.text:00001C5F                 mov     ecx, [ebp+arg_0]
.text:00001C62                 mov     [ecx+10h], eax
.text:00001C65                 mov     edx, [ebp+arg_0]
.text:00001C68                 mov     eax, [edx]
.text:00001C6A                 add     eax, 1
.text:00001C6D                 mov     ecx, [ebp+arg_0]
.text:00001C70                 mov     [ecx], eax
.text:00001C72                 mov     edx, [ebp+arg_0]
.text:00001C75                 mov     eax, [edx+8]
.text:00001C78                 mov     ecx, [ebp+arg_0]
.text:00001C7B                 mov     edx, [ecx+4]
.text:00001C7E                 mov     eax, [edx+eax*4]
.text:00001C81                 mov     ecx, [ebp+arg_0]
.text:00001C84                 mov     edx, [ecx+8]
.text:00001C87                 lea     eax, [eax+edx+1]
.text:00001C8B                 mov     ecx, [ebp+arg_0]
.text:00001C8E                 mov     [ecx+8], eax
.text:00001C91                 mov     edx, [ebp+arg_4]
.text:00001C94                 sub     edx, 1
.text:00001C97                 mov     [ebp+arg_4], edx
.text:00001C9A                 jnz     loc_1B9E
.text:00001CA0                 pop     esi
.text:00001CA1                 add     esp, 18h
.text:00001CA4                 cmp     ebp, esp
.text:00001CA6                 call    __RTC_CheckEsp
.text:00001CAB                 mov     esp, ebp
.text:00001CAD                 pop     ebp
.text:00001CAE                 retn    8
.text:00001CAE _MatchFinderMt3_Skip@8 endp
.text:00001CAE
.text:00001CAE ; ---------------------------------------------------------------------------
.text:00001CB1                 align 4
.text:00001CB1 _text           ends
.text:00001CB1
.rtc$TMZ:00001CB4 ; ===========================================================================
.rtc$TMZ:00001CB4
.rtc$TMZ:00001CB4 ; Segment type: Pure data
.rtc$TMZ:00001CB4 ; Segment permissions: Read
.rtc$TMZ:00001CB4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001CB4                 assume cs:_rtc$TMZ
.rtc$TMZ:00001CB4                 ;org 1CB4h
.rtc$TMZ:00001CB4 ; COMDAT (pick any)
.rtc$TMZ:00001CB4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001CB4 _rtc$TMZ        ends
.rtc$TMZ:00001CB4
.rtc$IMZ:00001CB8 ; ===========================================================================
.rtc$IMZ:00001CB8
.rtc$IMZ:00001CB8 ; Segment type: Pure data
.rtc$IMZ:00001CB8 ; Segment permissions: Read
.rtc$IMZ:00001CB8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001CB8                 assume cs:_rtc$IMZ
.rtc$IMZ:00001CB8                 ;org 1CB8h
.rtc$IMZ:00001CB8 ; COMDAT (pick any)
.rtc$IMZ:00001CB8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001CB8 _rtc$IMZ        ends
.rtc$IMZ:00001CB8
UNDEF:00001CC0 ; ===========================================================================
UNDEF:00001CC0
UNDEF:00001CC0 ; Segment type: Externs
UNDEF:00001CC0 ; UNDEF
UNDEF:00001CC0                 extrn __RTC_Shutdown:near
UNDEF:00001CC0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001CC4                 extrn __RTC_InitBase:near
UNDEF:00001CC4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001CC8 ; __stdcall Semaphore_Release1(x)
UNDEF:00001CC8                 extrn _Semaphore_Release1@4:near
UNDEF:00001CC8                                         ; CODE XREF: BtThreadFunc(x)+ACp
UNDEF:00001CC8                                         ; MtSync_StopWriting(x)+6Fp ...
UNDEF:00001CCC ; __stdcall Event_Set(x)
UNDEF:00001CCC                 extrn _Event_Set@4:near ; CODE XREF: BtThreadFunc(x)+3Ep
UNDEF:00001CCC                                         ; BtThreadFunc(x)+76p ...
UNDEF:00001CD0 ; __stdcall Handle_WaitObject(x)
UNDEF:00001CD0                 extrn _Handle_WaitObject@4:near
UNDEF:00001CD0                                         ; CODE XREF: BtThreadFunc(x)+32p
UNDEF:00001CD0                                         ; BtThreadFunc(x)+84p ...
UNDEF:00001CD4                 extrn __RTC_CheckEsp:near ; CODE XREF: BtThreadFunc(x)+BDp
UNDEF:00001CD4                                         ; MtSync_StopWriting(x)+59p ...
UNDEF:00001CD8 ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00001CD8                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:00001CD8                                         ; CODE XREF: MtSync_StopWriting(x)+51p
UNDEF:00001CD8                                         ; BtFillBlock(x,x)+CFp ...
UNDEF:00001CDC ; __stdcall MatchFinder_Normalize3(x, x, x)
UNDEF:00001CDC                 extrn _MatchFinder_Normalize3@12:near
UNDEF:00001CDC                                         ; CODE XREF: BtFillBlock(x,x)+A3p
UNDEF:00001CDC                                         ; HashThreadFunc(x)+1AAp ...
UNDEF:00001CE0 ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00001CE0                 extrn __imp__EnterCriticalSection@4:near
UNDEF:00001CE0                                         ; CODE XREF: BtFillBlock(x,x)+32p
UNDEF:00001CE0                                         ; MtSync_GetNextBlock(x)+B7p ...
UNDEF:00001CE4 ; __stdcall GetMatchesSpec1(x, x, x, x, x, x, x, x, x, x)
UNDEF:00001CE4                 extrn _GetMatchesSpec1@40:near
UNDEF:00001CE4                                         ; CODE XREF: BtGetMatches(x,x)+244p
UNDEF:00001CE8 ; __stdcall Event_Reset(x)
UNDEF:00001CE8                 extrn _Event_Reset@4:near
UNDEF:00001CE8                                         ; CODE XREF: MtSync_GetNextBlock(x)+3Cp
UNDEF:00001CE8                                         ; MtSync_GetNextBlock(x)+48p
UNDEF:00001CEC ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00001CEC                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:00001CEC                                         ; CODE XREF: MtSync_Destruct(x)+5Fp
UNDEF:00001CEC                                         ; DATA XREF: MtSync_Destruct(x)+5Fr
UNDEF:00001CF0 ; __stdcall HandlePtr_Close(x)
UNDEF:00001CF0                 extrn _HandlePtr_Close@4:near
UNDEF:00001CF0                                         ; CODE XREF: MtSync_Destruct(x)+48p
UNDEF:00001CF0                                         ; MtSync_Destruct(x)+7Dp ...
UNDEF:00001CF4 ; __stdcall MatchFinder_Create(x, x, x, x, x, x)
UNDEF:00001CF4                 extrn _MatchFinder_Create@24:near
UNDEF:00001CF4                                         ; CODE XREF: MatchFinderMt_Create(x,x,x,x,x,x)+D1p
UNDEF:00001CF8 ; __stdcall Thread_Create(x, x, x)
UNDEF:00001CF8                 extrn _Thread_Create@12:near
UNDEF:00001CF8                                         ; CODE XREF: MtSync_Create2(x,x,x,x)+D6p
UNDEF:00001CFC ; __stdcall Semaphore_Create(x, x, x)
UNDEF:00001CFC                 extrn _Semaphore_Create@12:near
UNDEF:00001CFC                                         ; CODE XREF: MtSync_Create2(x,x,x,x)+90p
UNDEF:00001CFC                                         ; MtSync_Create2(x,x,x,x)+ADp
UNDEF:00001D00 ; __stdcall AutoResetEvent_CreateNotSignaled(x)
UNDEF:00001D00                 extrn _AutoResetEvent_CreateNotSignaled@4:near
UNDEF:00001D00                                         ; CODE XREF: MtSync_Create2(x,x,x,x)+3Dp
UNDEF:00001D00                                         ; MtSync_Create2(x,x,x,x)+57p ...
UNDEF:00001D04 ; __stdcall CriticalSection_Init(x)
UNDEF:00001D04                 extrn _CriticalSection_Init@4:near
UNDEF:00001D04                                         ; CODE XREF: MtSync_Create2(x,x,x,x)+19p
UNDEF:00001D08 ; __stdcall MatchFinder_ReduceOffsets(x, x)
UNDEF:00001D08                 extrn _MatchFinder_ReduceOffsets@8:near
UNDEF:00001D08                                         ; CODE XREF: HashThreadFunc(x)+187p
UNDEF:00001D0C ; __stdcall MatchFinder_ReadIfRequired(x)
UNDEF:00001D0C                 extrn _MatchFinder_ReadIfRequired@4:near
UNDEF:00001D0C                                         ; CODE XREF: HashThreadFunc(x)+15Cp
UNDEF:00001D10 ; __stdcall MatchFinder_MoveBlock(x)
UNDEF:00001D10                 extrn _MatchFinder_MoveBlock@4:near
UNDEF:00001D10                                         ; CODE XREF: HashThreadFunc(x)+DBp
UNDEF:00001D14 ; __stdcall MatchFinder_GetPointerToCurrentPos(x)
UNDEF:00001D14                 extrn _MatchFinder_GetPointerToCurrentPos@4:near
UNDEF:00001D14                                         ; CODE XREF: HashThreadFunc(x)+CFp
UNDEF:00001D14                                         ; HashThreadFunc(x)+E4p ...
UNDEF:00001D18 ; __stdcall MatchFinder_NeedMove(x)
UNDEF:00001D18                 extrn _MatchFinder_NeedMove@4:near
UNDEF:00001D18                                         ; CODE XREF: HashThreadFunc(x)+8Fp
UNDEF:00001D1C                 extrn ___security_cookie:near
UNDEF:00001D1C                                         ; DATA XREF: BtThreadFunc2(x)+1Cr
UNDEF:00001D20 ; __fastcall __security_check_cookie(x)
UNDEF:00001D20                 extrn @__security_check_cookie@4:near
UNDEF:00001D20                                         ; CODE XREF: BtThreadFunc2(x)+91p
UNDEF:00001D24 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001D24                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001D24                                         ; CODE XREF: BtThreadFunc2(x)+84p
UNDEF:00001D28 ; __stdcall MatchFinder_Init(x)
UNDEF:00001D28                 extrn _MatchFinder_Init@4:near
UNDEF:00001D28                                         ; CODE XREF: MatchFinderMt_Init(x)+49p
UNDEF:00001D28
UNDEF:00001D28
UNDEF:00001D28                 end