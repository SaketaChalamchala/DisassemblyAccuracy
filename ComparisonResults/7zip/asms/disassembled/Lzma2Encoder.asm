.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : D6499E5F5E9771951036A594E00F8805
.text:00000000 ; Input CRC32 : 2DA03170
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Lzma2Encoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCompress::NLzma2::CEncoder::CEncoder(NCompress::NLzma2::CEncoder *__hidden this)
.text:00000000                 public ??0CEncoder@NLzma2@NCompress@@QAE@XZ
.text:00000000 ??0CEncoder@NLzma2@NCompress@@QAE@XZ proc near
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000014                 mov     [ebp+var_4], ecx
.text:00000017                 mov     ecx, [ebp+var_4] ; this
.text:0000001A                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:0000001F                 mov     ecx, [ebp+var_4]
.text:00000022                 add     ecx, 4          ; this
.text:00000025                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:0000002A                 mov     ecx, [ebp+var_4]
.text:0000002D                 add     ecx, 8          ; this
.text:00000030                 call    ??0ICompressWriteCoderProperties@@QAE@XZ ; ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)
.text:00000035                 mov     ecx, [ebp+var_4]
.text:00000038                 add     ecx, 0Ch        ; this
.text:0000003B                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000040                 mov     eax, [ebp+var_4]
.text:00000043                 mov     dword ptr [eax], offset ??_7CEncoder@NLzma2@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma2::CEncoder::`vftable'{for `ICompressCoder'}
.text:00000049                 mov     ecx, [ebp+var_4]
.text:0000004C                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NLzma2@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NLzma2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000053                 mov     edx, [ebp+var_4]
.text:00000056                 mov     dword ptr [edx+8], offset ??_7CEncoder@NLzma2@NCompress@@6BICompressWriteCoderProperties@@@ ; const NCompress::NLzma2::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.text:0000005D                 mov     eax, [ebp+var_4]
.text:00000060                 mov     dword ptr [eax+10h], 0
.text:00000067                 push    offset _g_BigAlloc
.text:0000006C                 push    offset _g_Alloc
.text:00000071                 call    _Lzma2Enc_Create@8 ; Lzma2Enc_Create(x,x)
.text:00000076                 mov     ecx, [ebp+var_4]
.text:00000079                 mov     [ecx+10h], eax
.text:0000007C                 mov     edx, [ebp+var_4]
.text:0000007F                 cmp     dword ptr [edx+10h], 0
.text:00000083                 jnz     short loc_9A
.text:00000085                 mov     [ebp+var_8], 1
.text:0000008C                 push    offset __TI1H
.text:00000091                 lea     eax, [ebp+var_8]
.text:00000094                 push    eax
.text:00000095                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000009A ; ---------------------------------------------------------------------------
.text:0000009A
.text:0000009A loc_9A:                                 ; CODE XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+83j
.text:0000009A                 mov     eax, [ebp+var_4]
.text:0000009D                 add     esp, 8
.text:000000A0                 cmp     ebp, esp
.text:000000A2                 call    __RTC_CheckEsp
.text:000000A7                 mov     esp, ebp
.text:000000A9                 pop     ebp
.text:000000AA                 retn
.text:000000AA ??0CEncoder@NLzma2@NCompress@@QAE@XZ endp
.text:000000AA
.text:000000AA ; ---------------------------------------------------------------------------
.text:000000AB                 align 10h
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; _DWORD __thiscall NCompress::NLzma2::CEncoder::~CEncoder(NCompress::NLzma2::CEncoder *__hidden this)
.text:000000B0                 public ??1CEncoder@NLzma2@NCompress@@UAE@XZ
.text:000000B0 ??1CEncoder@NLzma2@NCompress@@UAE@XZ proc near
.text:000000B0                                         ; CODE XREF: NCompress::NLzma2::CEncoder::`scalar deleting destructor'(uint)+11p
.text:000000B0
.text:000000B0 var_4           = dword ptr -4
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 push    ecx
.text:000000B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000BB                 mov     [ebp+var_4], ecx
.text:000000BE                 mov     eax, [ebp+var_4]
.text:000000C1                 mov     dword ptr [eax], offset ??_7CEncoder@NLzma2@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma2::CEncoder::`vftable'{for `ICompressCoder'}
.text:000000C7                 mov     ecx, [ebp+var_4]
.text:000000CA                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NLzma2@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NLzma2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:000000D1                 mov     edx, [ebp+var_4]
.text:000000D4                 mov     dword ptr [edx+8], offset ??_7CEncoder@NLzma2@NCompress@@6BICompressWriteCoderProperties@@@ ; const NCompress::NLzma2::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.text:000000DB                 mov     eax, [ebp+var_4]
.text:000000DE                 cmp     dword ptr [eax+10h], 0
.text:000000E2                 jz      short loc_F0
.text:000000E4                 mov     ecx, [ebp+var_4]
.text:000000E7                 mov     edx, [ecx+10h]
.text:000000EA                 push    edx
.text:000000EB                 call    _Lzma2Enc_Destroy@4 ; Lzma2Enc_Destroy(x)
.text:000000F0
.text:000000F0 loc_F0:                                 ; CODE XREF: NCompress::NLzma2::CEncoder::~CEncoder(void)+32j
.text:000000F0                 add     esp, 4
.text:000000F3                 cmp     ebp, esp
.text:000000F5                 call    __RTC_CheckEsp
.text:000000FA                 mov     esp, ebp
.text:000000FC                 pop     ebp
.text:000000FD                 retn
.text:000000FD ??1CEncoder@NLzma2@NCompress@@UAE@XZ endp
.text:000000FD
.text:000000FD ; ---------------------------------------------------------------------------
.text:000000FE                 align 10h
.text:00000100
.text:00000100 ; =============== S U B R O U T I N E =======================================
.text:00000100
.text:00000100 ; Attributes: bp-based frame
.text:00000100
.text:00000100 ; __int32 __stdcall NCompress::NLzma2::SetLzma2Prop(NCompress::NLzma2 *this, unsigned __int32, const struct tagPROPVARIANT *, struct CLzma2EncProps *)
.text:00000100                 public ?SetLzma2Prop@NLzma2@NCompress@@YGJKABUtagPROPVARIANT@@AAUCLzma2EncProps@@@Z
.text:00000100 ?SetLzma2Prop@NLzma2@NCompress@@YGJKABUtagPROPVARIANT@@AAUCLzma2EncProps@@@Z proc near
.text:00000100                                         ; CODE XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+5Bp
.text:00000100
.text:00000100 var_8           = dword ptr -8
.text:00000100 var_4           = dword ptr -4
.text:00000100 this            = dword ptr  8
.text:00000100 arg_4           = dword ptr  0Ch
.text:00000100 arg_8           = dword ptr  10h
.text:00000100
.text:00000100                 push    ebp
.text:00000101                 mov     ebp, esp
.text:00000103                 sub     esp, 8
.text:00000106                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000010D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000114                 mov     eax, [ebp+this]
.text:00000117                 mov     [ebp+var_8], eax
.text:0000011A                 cmp     [ebp+var_8], 4
.text:0000011E                 jz      short loc_128
.text:00000120                 cmp     [ebp+var_8], 0Dh
.text:00000124                 jz      short loc_148
.text:00000126                 jmp     short loc_168
.text:00000128 ; ---------------------------------------------------------------------------
.text:00000128
.text:00000128 loc_128:                                ; CODE XREF: NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)+1Ej
.text:00000128                 mov     ecx, [ebp+arg_4]
.text:0000012B                 movzx   edx, word ptr [ecx]
.text:0000012E                 cmp     edx, 13h
.text:00000131                 jz      short loc_13A
.text:00000133                 mov     eax, 80070057h
.text:00000138                 jmp     short loc_189
.text:0000013A ; ---------------------------------------------------------------------------
.text:0000013A
.text:0000013A loc_13A:                                ; CODE XREF: NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)+31j
.text:0000013A                 mov     eax, [ebp+arg_8]
.text:0000013D                 mov     ecx, [ebp+arg_4]
.text:00000140                 mov     edx, [ecx+8]
.text:00000143                 mov     [eax+38h], edx
.text:00000146                 jmp     short loc_187
.text:00000148 ; ---------------------------------------------------------------------------
.text:00000148
.text:00000148 loc_148:                                ; CODE XREF: NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)+24j
.text:00000148                 mov     eax, [ebp+arg_4]
.text:0000014B                 movzx   ecx, word ptr [eax]
.text:0000014E                 cmp     ecx, 13h
.text:00000151                 jz      short loc_15A
.text:00000153                 mov     eax, 80070057h
.text:00000158                 jmp     short loc_189
.text:0000015A ; ---------------------------------------------------------------------------
.text:0000015A
.text:0000015A loc_15A:                                ; CODE XREF: NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)+51j
.text:0000015A                 mov     edx, [ebp+arg_8]
.text:0000015D                 mov     eax, [ebp+arg_4]
.text:00000160                 mov     ecx, [eax+8]
.text:00000163                 mov     [edx+40h], ecx
.text:00000166                 jmp     short loc_187
.text:00000168 ; ---------------------------------------------------------------------------
.text:00000168
.text:00000168 loc_168:                                ; CODE XREF: NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)+26j
.text:00000168                 mov     edx, [ebp+arg_8]
.text:0000016B                 push    edx             ; struct tagPROPVARIANT *
.text:0000016C                 mov     eax, [ebp+arg_4]
.text:0000016F                 push    eax             ; unsigned __int32
.text:00000170                 mov     ecx, [ebp+this]
.text:00000173                 push    ecx             ; this
.text:00000174                 call    ?SetLzmaProp@NLzma@NCompress@@YGJKABUtagPROPVARIANT@@AAU_CLzmaEncProps@@@Z ; NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)
.text:00000179                 mov     [ebp+var_4], eax
.text:0000017C                 cmp     [ebp+var_4], 0
.text:00000180                 jz      short loc_187
.text:00000182                 mov     eax, [ebp+var_4]
.text:00000185                 jmp     short loc_189
.text:00000187 ; ---------------------------------------------------------------------------
.text:00000187
.text:00000187 loc_187:                                ; CODE XREF: NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)+46j
.text:00000187                                         ; NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)+66j ...
.text:00000187                 xor     eax, eax
.text:00000189
.text:00000189 loc_189:                                ; CODE XREF: NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)+38j
.text:00000189                                         ; NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)+58j ...
.text:00000189                 add     esp, 8
.text:0000018C                 cmp     ebp, esp
.text:0000018E                 call    __RTC_CheckEsp
.text:00000193                 mov     esp, ebp
.text:00000195                 pop     ebp
.text:00000196                 retn    0Ch
.text:00000196 ?SetLzma2Prop@NLzma2@NCompress@@YGJKABUtagPROPVARIANT@@AAUCLzma2EncProps@@@Z endp ; sp-analysis failed
.text:00000196
.text:00000196 ; ---------------------------------------------------------------------------
.text:00000199                 align 10h
.text:000001A0
.text:000001A0 ; =============== S U B R O U T I N E =======================================
.text:000001A0
.text:000001A0 ; Attributes: bp-based frame
.text:000001A0
.text:000001A0 ; __int32 __stdcall NCompress::NLzma2::CEncoder::SetCoderProperties(NCompress::NLzma2::CEncoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:000001A0                 public ?SetCoderProperties@CEncoder@NLzma2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:000001A0 ?SetCoderProperties@CEncoder@NLzma2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:000001A0                                         ; DATA XREF: .rdata:00000438o
.text:000001A0
.text:000001A0 var_5C          = dword ptr -5Ch
.text:000001A0 var_58          = dword ptr -58h
.text:000001A0 var_50          = tagPROPVARIANT ptr -50h
.text:000001A0 var_4           = dword ptr -4
.text:000001A0 this            = dword ptr  8
.text:000001A0 arg_4           = dword ptr  0Ch
.text:000001A0 arg_8           = dword ptr  10h
.text:000001A0 arg_C           = dword ptr  14h
.text:000001A0
.text:000001A0                 push    ebp
.text:000001A1                 mov     ebp, esp
.text:000001A3                 sub     esp, 5Ch
.text:000001A6                 push    edi
.text:000001A7                 lea     edi, [ebp+var_5C]
.text:000001AA                 mov     ecx, 17h
.text:000001AF                 mov     eax, 0CCCCCCCCh
.text:000001B4                 rep stosd
.text:000001B6                 mov     eax, dword ptr ds:___security_cookie
.text:000001BB                 xor     eax, ebp
.text:000001BD                 mov     [ebp+var_4], eax
.text:000001C0                 lea     eax, [ebp+var_50]
.text:000001C3                 push    eax
.text:000001C4                 call    _Lzma2EncProps_Init@4 ; Lzma2EncProps_Init(x)
.text:000001C9                 mov     [ebp+var_58], 0
.text:000001D0                 jmp     short loc_1DB
.text:000001D2 ; ---------------------------------------------------------------------------
.text:000001D2
.text:000001D2 loc_1D2:                                ; CODE XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_20Ej
.text:000001D2                 mov     ecx, [ebp+var_58]
.text:000001D5                 add     ecx, 1
.text:000001D8                 mov     [ebp+var_58], ecx
.text:000001DB
.text:000001DB loc_1DB:                                ; CODE XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+30j
.text:000001DB                 mov     edx, [ebp+var_58]
.text:000001DE                 cmp     edx, [ebp+arg_C]
.text:000001E1                 jnb     short loc_210
.text:000001E3                 lea     eax, [ebp+var_50]
.text:000001E6                 push    eax             ; struct tagPROPVARIANT *
.text:000001E7                 mov     ecx, [ebp+var_58]
.text:000001EA                 shl     ecx, 4
.text:000001ED                 add     ecx, [ebp+arg_8]
.text:000001F0                 push    ecx             ; unsigned __int32
.text:000001F1                 mov     edx, [ebp+var_58]
.text:000001F4                 mov     eax, [ebp+arg_4]
.text:000001F7                 mov     ecx, [eax+edx*4]
.text:000001FA                 push    ecx             ; this
.text:000001FB                 call    ?SetLzma2Prop@NLzma2@NCompress@@YGJKABUtagPROPVARIANT@@AAUCLzma2EncProps@@@Z ; NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)
.text:00000200                 mov     [ebp+var_5C], eax
.text:00000203                 cmp     [ebp+var_5C], 0
.text:00000207                 jz      short loc_20E
.text:00000209                 mov     eax, [ebp+var_5C]
.text:0000020C                 jmp     short loc_226
.text:0000020E ; ---------------------------------------------------------------------------
.text:0000020E
.text:0000020E loc_20E:                                ; CODE XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+67j
.text:0000020E                 jmp     short loc_1D2
.text:00000210 ; ---------------------------------------------------------------------------
.text:00000210
.text:00000210 loc_210:                                ; CODE XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+41j
.text:00000210                 lea     edx, [ebp+var_50]
.text:00000213                 push    edx
.text:00000214                 mov     eax, [ebp+this]
.text:00000217                 mov     ecx, [eax+0Ch]
.text:0000021A                 push    ecx
.text:0000021B                 call    _Lzma2Enc_SetProps@8 ; Lzma2Enc_SetProps(x,x)
.text:00000220                 push    eax             ; int
.text:00000221                 call    ?SResToHRESULT@@YGJH@Z ; SResToHRESULT(int)
.text:00000226
.text:00000226 loc_226:                                ; CODE XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+6Cj
.text:00000226                 push    edx
.text:00000227                 mov     ecx, ebp
.text:00000229                 push    eax
.text:0000022A                 lea     edx, $LN9
.text:00000230                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000235                 pop     eax
.text:00000236                 pop     edx
.text:00000237                 pop     edi
.text:00000238                 mov     ecx, [ebp+var_4]
.text:0000023B                 xor     ecx, ebp
.text:0000023D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000242                 add     esp, 5Ch
.text:00000245                 cmp     ebp, esp
.text:00000247                 call    __RTC_CheckEsp
.text:0000024C                 mov     esp, ebp
.text:0000024E                 pop     ebp
.text:0000024F                 retn    10h
.text:0000024F ?SetCoderProperties@CEncoder@NLzma2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:0000024F
.text:0000024F ; ---------------------------------------------------------------------------
.text:00000252                 align 4
.text:00000254 $LN9            dd 1                    ; DATA XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+8Ao
.text:00000258                 dd offset $LN8
.text:0000025C $LN8            dd 0FFFFFFB0h, 48h      ; DATA XREF: .text:00000258o
.text:00000264                 dd offset $LN7          ; "lzma2Props"
.text:00000268 $LN7            db 'lzma2Props',0       ; DATA XREF: .text:00000264o
.text:00000273                 align 10h
.text:00000280
.text:00000280 ; =============== S U B R O U T I N E =======================================
.text:00000280
.text:00000280 ; Attributes: bp-based frame
.text:00000280
.text:00000280 ; __int32 __stdcall NCompress::NLzma2::CEncoder::WriteCoderProperties(NCompress::NLzma2::CEncoder *this, struct ISequentialOutStream *)
.text:00000280                 public ?WriteCoderProperties@CEncoder@NLzma2@NCompress@@UAGJPAUISequentialOutStream@@@Z
.text:00000280 ?WriteCoderProperties@CEncoder@NLzma2@NCompress@@UAGJPAUISequentialOutStream@@@Z proc near
.text:00000280                                         ; DATA XREF: .rdata:00000424o
.text:00000280
.text:00000280 var_C           = dword ptr -0Ch
.text:00000280 var_8           = dword ptr -8
.text:00000280 var_4           = dword ptr -4
.text:00000280 this            = dword ptr  8
.text:00000280 arg_4           = dword ptr  0Ch
.text:00000280
.text:00000280                 push    ebp
.text:00000281                 mov     ebp, esp
.text:00000283                 sub     esp, 0Ch
.text:00000286                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000028D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000294                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000029B                 mov     eax, [ebp+this]
.text:0000029E                 mov     ecx, [eax+8]
.text:000002A1                 push    ecx
.text:000002A2                 call    _Lzma2Enc_WriteProperties@4 ; Lzma2Enc_WriteProperties(x)
.text:000002A7                 mov     byte ptr [ebp+var_8+3], al
.text:000002AA                 push    1               ; unsigned int
.text:000002AC                 lea     edx, [ebp+var_8+3]
.text:000002AF                 push    edx             ; void *
.text:000002B0                 mov     eax, [ebp+arg_4]
.text:000002B3                 push    eax             ; struct ISequentialOutStream *
.text:000002B4                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:000002B9                 push    edx
.text:000002BA                 mov     ecx, ebp
.text:000002BC                 push    eax
.text:000002BD                 lea     edx, $LN5
.text:000002C3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002C8                 pop     eax
.text:000002C9                 pop     edx
.text:000002CA                 add     esp, 0Ch
.text:000002CD                 cmp     ebp, esp
.text:000002CF                 call    __RTC_CheckEsp
.text:000002D4                 mov     esp, ebp
.text:000002D6                 pop     ebp
.text:000002D7                 retn    8
.text:000002D7 ?WriteCoderProperties@CEncoder@NLzma2@NCompress@@UAGJPAUISequentialOutStream@@@Z endp
.text:000002D7
.text:000002D7 ; ---------------------------------------------------------------------------
.text:000002DA                 align 4
.text:000002DC $LN5            dd 1                    ; DATA XREF: NCompress::NLzma2::CEncoder::WriteCoderProperties(ISequentialOutStream *)+3Do
.text:000002E0                 dd offset $LN4
.text:000002E4 $LN4            dd 0FFFFFFFBh, 1        ; DATA XREF: .text:000002E0o
.text:000002EC                 dd offset $LN3          ; "prop"
.text:000002F0 $LN3            db 'prop',0             ; DATA XREF: .text:000002ECo
.text:000002F5                 align 10h
.text:00000300
.text:00000300 ; =============== S U B R O U T I N E =======================================
.text:00000300
.text:00000300 ; Attributes: bp-based frame
.text:00000300
.text:00000300 ; __int32 __stdcall NCompress::NLzma2::CEncoder::Code(NCompress::NLzma2::CEncoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000300                 public ?Code@CEncoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000300 ?Code@CEncoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000300                                         ; DATA XREF: .rdata:0000044Co
.text:00000300
.text:00000300 var_58          = dword ptr -58h
.text:00000300 var_50          = byte ptr -50h
.text:00000300 var_48          = dword ptr -48h
.text:00000300 var_3C          = byte ptr -3Ch
.text:00000300 var_34          = dword ptr -34h
.text:00000300 var_1C          = byte ptr -1Ch
.text:00000300 var_14          = dword ptr -14h
.text:00000300 this            = dword ptr  8
.text:00000300 arg_4           = dword ptr  0Ch
.text:00000300 arg_8           = dword ptr  10h
.text:00000300 arg_14          = dword ptr  1Ch
.text:00000300
.text:00000300                 push    ebp
.text:00000301                 mov     ebp, esp
.text:00000303                 sub     esp, 58h
.text:00000306                 push    edi
.text:00000307                 lea     edi, [ebp+var_58]
.text:0000030A                 mov     ecx, 16h
.text:0000030F                 mov     eax, 0CCCCCCCCh
.text:00000314                 rep stosd
.text:00000316                 mov     eax, [ebp+arg_4]
.text:00000319                 push    eax             ; struct ISequentialInStream *
.text:0000031A                 lea     ecx, [ebp+var_1C] ; this
.text:0000031D                 call    ??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z ; CSeqInStreamWrap::CSeqInStreamWrap(ISequentialInStream *)
.text:00000322                 mov     ecx, [ebp+arg_8]
.text:00000325                 push    ecx             ; struct ISequentialOutStream *
.text:00000326                 lea     ecx, [ebp+var_3C] ; this
.text:00000329                 call    ??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z ; CSeqOutStreamWrap::CSeqOutStreamWrap(ISequentialOutStream *)
.text:0000032E                 mov     edx, [ebp+arg_14]
.text:00000331                 push    edx             ; struct ICompressProgressInfo *
.text:00000332                 lea     ecx, [ebp+var_50] ; this
.text:00000335                 call    ??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z ; CCompressProgressWrap::CCompressProgressWrap(ICompressProgressInfo *)
.text:0000033A                 mov     eax, [ebp+arg_14]
.text:0000033D                 neg     eax
.text:0000033F                 sbb     eax, eax
.text:00000341                 lea     ecx, [ebp+var_50]
.text:00000344                 and     eax, ecx
.text:00000346                 push    eax
.text:00000347                 lea     edx, [ebp+var_1C]
.text:0000034A                 push    edx
.text:0000034B                 lea     eax, [ebp+var_3C]
.text:0000034E                 push    eax
.text:0000034F                 mov     ecx, [ebp+this]
.text:00000352                 mov     edx, [ecx+10h]
.text:00000355                 push    edx
.text:00000356                 call    _Lzma2Enc_Encode@16 ; Lzma2Enc_Encode(x,x,x,x)
.text:0000035B                 mov     [ebp+var_58], eax
.text:0000035E                 cmp     [ebp+var_58], 8
.text:00000362                 jnz     short loc_36F
.text:00000364                 cmp     [ebp+var_14], 0
.text:00000368                 jz      short loc_36F
.text:0000036A                 mov     eax, [ebp+var_14]
.text:0000036D                 jmp     short loc_39A
.text:0000036F ; ---------------------------------------------------------------------------
.text:0000036F
.text:0000036F loc_36F:                                ; CODE XREF: NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+62j
.text:0000036F                                         ; NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+68j
.text:0000036F                 cmp     [ebp+var_58], 9
.text:00000373                 jnz     short loc_380
.text:00000375                 cmp     [ebp+var_34], 0
.text:00000379                 jz      short loc_380
.text:0000037B                 mov     eax, [ebp+var_34]
.text:0000037E                 jmp     short loc_39A
.text:00000380 ; ---------------------------------------------------------------------------
.text:00000380
.text:00000380 loc_380:                                ; CODE XREF: NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+73j
.text:00000380                                         ; NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+79j
.text:00000380                 cmp     [ebp+var_58], 0Ah
.text:00000384                 jnz     short loc_391
.text:00000386                 cmp     [ebp+var_48], 0
.text:0000038A                 jz      short loc_391
.text:0000038C                 mov     eax, [ebp+var_48]
.text:0000038F                 jmp     short loc_39A
.text:00000391 ; ---------------------------------------------------------------------------
.text:00000391
.text:00000391 loc_391:                                ; CODE XREF: NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+84j
.text:00000391                                         ; NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+8Aj
.text:00000391                 mov     eax, [ebp+var_58]
.text:00000394                 push    eax             ; int
.text:00000395                 call    ?SResToHRESULT@@YGJH@Z ; SResToHRESULT(int)
.text:0000039A
.text:0000039A loc_39A:                                ; CODE XREF: NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+6Dj
.text:0000039A                                         ; NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+7Ej ...
.text:0000039A                 push    edx
.text:0000039B                 mov     ecx, ebp
.text:0000039D                 push    eax
.text:0000039E                 lea     edx, $LN10
.text:000003A4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003A9                 pop     eax
.text:000003AA                 pop     edx
.text:000003AB                 pop     edi
.text:000003AC                 add     esp, 58h
.text:000003AF                 cmp     ebp, esp
.text:000003B1                 call    __RTC_CheckEsp
.text:000003B6                 mov     esp, ebp
.text:000003B8                 pop     ebp
.text:000003B9                 retn    18h
.text:000003B9 ?Code@CEncoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:000003B9
.text:000003B9 ; ---------------------------------------------------------------------------
.text:000003BC $LN10           dd 3                    ; DATA XREF: NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+9Eo
.text:000003C0                 dd offset $LN9_0
.text:000003C4 $LN9_0          dd 0FFFFFFE4h, 18h      ; DATA XREF: .text:000003C0o
.text:000003CC                 dd offset $LN6          ; "inWrap"
.text:000003D0                 dd 0FFFFFFC4h, 18h
.text:000003D8                 dd offset $LN7_0        ; "outWrap"
.text:000003DC                 dd 0FFFFFFB0h, 0Ch
.text:000003E4                 dd offset $LN8_0        ; "progressWrap"
.text:000003E8 $LN8_0          db 'progressWrap',0     ; DATA XREF: .text:000003E4o
.text:000003F5 $LN7_0          db 'outWrap',0          ; DATA XREF: .text:000003D8o
.text:000003FD $LN6            db 'inWrap',0           ; DATA XREF: .text:000003CCo
.text:000003FD _text           ends
.text:000003FD
.xdata$x:00000404 ; ===========================================================================
.xdata$x:00000404
.xdata$x:00000404 ; Segment type: Pure data
.xdata$x:00000404 ; Segment permissions: Read
.xdata$x:00000404 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000404                 assume cs:_xdata$x
.xdata$x:00000404                 ;org 404h
.xdata$x:00000404 ; COMDAT (pick any)
.xdata$x:00000404                 public __TI1H
.xdata$x:00000404 __TI1H          db    0                 ; DATA XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+8Co
.xdata$x:00000405                 db    0
.xdata$x:00000406                 db    0
.xdata$x:00000407                 db    0
.xdata$x:00000408                 db    0
.xdata$x:00000409                 db    0
.xdata$x:0000040A                 db    0
.xdata$x:0000040B                 db    0
.xdata$x:0000040C                 db    0
.xdata$x:0000040D                 db    0
.xdata$x:0000040E                 db    0
.xdata$x:0000040F                 db    0
.xdata$x:00000410                 dd offset __CTA1H
.xdata$x:00000410 _xdata$x        ends
.xdata$x:00000410
.rdata:00000414 ; ===========================================================================
.rdata:00000414
.rdata:00000414 ; Segment type: Pure data
.rdata:00000414 ; Segment permissions: Read
.rdata:00000414 _rdata          segment dword public 'DATA' use32
.rdata:00000414                 assume cs:_rdata
.rdata:00000414                 ;org 414h
.rdata:00000414 ; COMDAT (pick largest)
.rdata:00000414                 dd offset ??_R4CEncoder@NLzma2@NCompress@@6BICompressWriteCoderProperties@@@ ; const NCompress::NLzma2::CEncoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata:00000418                 public ??_7CEncoder@NLzma2@NCompress@@6BICompressWriteCoderProperties@@@
.rdata:00000418 ; const NCompress::NLzma2::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.rdata:00000418 ??_7CEncoder@NLzma2@NCompress@@6BICompressWriteCoderProperties@@@ dd offset ?QueryInterface@CEncoder@NLzma2@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000418                                         ; DATA XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+56o
.rdata:00000418                                         ; NCompress::NLzma2::CEncoder::~CEncoder(void)+24o
.rdata:00000418                                         ; [thunk]:NCompress::NLzma2::CEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:0000041C                 dd offset ?AddRef@CEncoder@NLzma2@NCompress@@W7AGKXZ ; [thunk]:NCompress::NLzma2::CEncoder::AddRef`adjustor{8}' (void)
.rdata:00000420                 dd offset ?Release@CEncoder@NLzma2@NCompress@@W7AGKXZ ; [thunk]:NCompress::NLzma2::CEncoder::Release`adjustor{8}' (void)
.rdata:00000424                 dd offset ?WriteCoderProperties@CEncoder@NLzma2@NCompress@@UAGJPAUISequentialOutStream@@@Z ; NCompress::NLzma2::CEncoder::WriteCoderProperties(ISequentialOutStream *)
.rdata:00000424 _rdata          ends
.rdata:00000424
.rdata:00000428 ; ===========================================================================
.rdata:00000428
.rdata:00000428 ; Segment type: Pure data
.rdata:00000428 ; Segment permissions: Read
.rdata:00000428 _rdata          segment dword public 'DATA' use32
.rdata:00000428                 assume cs:_rdata
.rdata:00000428                 ;org 428h
.rdata:00000428 ; COMDAT (pick largest)
.rdata:00000428                 dd offset ??_R4CEncoder@NLzma2@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NLzma2::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:0000042C                 public ??_7CEncoder@NLzma2@NCompress@@6BICompressSetCoderProperties@@@
.rdata:0000042C ; const NCompress::NLzma2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:0000042C ??_7CEncoder@NLzma2@NCompress@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CEncoder@NLzma2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:0000042C                                         ; DATA XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+4Co
.rdata:0000042C                                         ; NCompress::NLzma2::CEncoder::~CEncoder(void)+1Ao
.rdata:0000042C                                         ; [thunk]:NCompress::NLzma2::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000430                 dd offset ?AddRef@CEncoder@NLzma2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NLzma2::CEncoder::AddRef`adjustor{4}' (void)
.rdata:00000434                 dd offset ?Release@CEncoder@NLzma2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NLzma2::CEncoder::Release`adjustor{4}' (void)
.rdata:00000438                 dd offset ?SetCoderProperties@CEncoder@NLzma2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00000438 _rdata          ends
.rdata:00000438
.rdata:0000043C ; ===========================================================================
.rdata:0000043C
.rdata:0000043C ; Segment type: Pure data
.rdata:0000043C ; Segment permissions: Read
.rdata:0000043C _rdata          segment dword public 'DATA' use32
.rdata:0000043C                 assume cs:_rdata
.rdata:0000043C                 ;org 43Ch
.rdata:0000043C ; COMDAT (pick largest)
.rdata:0000043C                 dd offset ??_R4CEncoder@NLzma2@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma2::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00000440                 public ??_7CEncoder@NLzma2@NCompress@@6BICompressCoder@@@
.rdata:00000440 ; const NCompress::NLzma2::CEncoder::`vftable'{for `ICompressCoder'}
.rdata:00000440 ??_7CEncoder@NLzma2@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CEncoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000440                                         ; DATA XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+43o
.rdata:00000440                                         ; NCompress::NLzma2::CEncoder::~CEncoder(void)+11o
.rdata:00000440                                         ; NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)
.rdata:00000444                 dd offset ?AddRef@CEncoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CEncoder::AddRef(void)
.rdata:00000448                 dd offset ?Release@CEncoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CEncoder::Release(void)
.rdata:0000044C                 dd offset ?Code@CEncoder@NLzma2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000450                 dd offset ??_ECEncoder@NLzma2@NCompress@@UAEPAXI@Z ; NCompress::NLzma2::CEncoder::`vector deleting destructor'(uint)
.rdata:00000450 _rdata          ends
.rdata:00000450
.rtc$TMZ:00000454 ; ===========================================================================
.rtc$TMZ:00000454
.rtc$TMZ:00000454 ; Segment type: Pure data
.rtc$TMZ:00000454 ; Segment permissions: Read
.rtc$TMZ:00000454 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000454                 assume cs:_rtc$TMZ
.rtc$TMZ:00000454                 ;org 454h
.rtc$TMZ:00000454 ; COMDAT (pick any)
.rtc$TMZ:00000454 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000454 _rtc$TMZ        ends
.rtc$TMZ:00000454
.rtc$IMZ:00000458 ; ===========================================================================
.rtc$IMZ:00000458
.rtc$IMZ:00000458 ; Segment type: Pure data
.rtc$IMZ:00000458 ; Segment permissions: Read
.rtc$IMZ:00000458 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000458                 assume cs:_rtc$IMZ
.rtc$IMZ:00000458                 ;org 458h
.rtc$IMZ:00000458 ; COMDAT (pick any)
.rtc$IMZ:00000458 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000458 _rtc$IMZ        ends
.rtc$IMZ:00000458
.rdata$r:0000045C ; ===========================================================================
.rdata$r:0000045C
.rdata$r:0000045C ; Segment type: Pure data
.rdata$r:0000045C ; Segment permissions: Read
.rdata$r:0000045C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000045C                 assume cs:_rdata$r
.rdata$r:0000045C                 ;org 45Ch
.rdata$r:0000045C ; COMDAT (pick any)
.rdata$r:0000045C                 public ??_R4CEncoder@NLzma2@NCompress@@6BICompressCoder@@@
.rdata$r:0000045C ; const NCompress::NLzma2::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:0000045C ??_R4CEncoder@NLzma2@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:0000045C                                         ; DATA XREF: .rdata:0000043Co
.rdata$r:0000045D                 db    0
.rdata$r:0000045E                 db    0
.rdata$r:0000045F                 db    0
.rdata$r:00000460                 db    0
.rdata$r:00000461                 db    0
.rdata$r:00000462                 db    0
.rdata$r:00000463                 db    0
.rdata$r:00000464                 db    0
.rdata$r:00000465                 db    0
.rdata$r:00000466                 db    0
.rdata$r:00000467                 db    0
.rdata$r:00000468                 dd offset ??_R0?AVCEncoder@NLzma2@NCompress@@@8 ; NCompress::NLzma2::CEncoder `RTTI Type Descriptor'
.rdata$r:0000046C                 dd offset ??_R3CEncoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000046C _rdata$r        ends
.rdata$r:0000046C
.data:00000470 ; ===========================================================================
.data:00000470
.data:00000470 ; Segment type: Pure data
.data:00000470 ; Segment permissions: Read/Write
.data:00000470 _data           segment dword public 'DATA' use32
.data:00000470                 assume cs:_data
.data:00000470                 ;org 470h
.data:00000470 ; COMDAT (pick any)
.data:00000470                 public ??_R0?AVCEncoder@NLzma2@NCompress@@@8
.data:00000470 ; class NCompress::NLzma2::CEncoder `RTTI Type Descriptor'
.data:00000470 ??_R0?AVCEncoder@NLzma2@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000470                                         ; DATA XREF: .rdata$r:00000468o
.data:00000470                                         ; .rdata$r:NCompress::NLzma2::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000470                                         ; const type_info::`vftable'
.data:00000474                 align 8
.data:00000478 a_?avcencoder@n db '.?AVCEncoder@NLzma2@NCompress@@',0
.data:00000478 _data           ends
.data:00000478
.rdata$r:00000498 ; ===========================================================================
.rdata$r:00000498
.rdata$r:00000498 ; Segment type: Pure data
.rdata$r:00000498 ; Segment permissions: Read
.rdata$r:00000498 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000498                 assume cs:_rdata$r
.rdata$r:00000498                 ;org 498h
.rdata$r:00000498 ; COMDAT (pick any)
.rdata$r:00000498                 public ??_R3CEncoder@NLzma2@NCompress@@8
.rdata$r:00000498 ; NCompress::NLzma2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000498 ??_R3CEncoder@NLzma2@NCompress@@8 db    0 ; DATA XREF: .rdata$r:0000046Co
.rdata$r:00000498                                         ; .rdata$r:000004E4o ...
.rdata$r:00000499                 db    0
.rdata$r:0000049A                 db    0
.rdata$r:0000049B                 db    0
.rdata$r:0000049C                 db    5
.rdata$r:0000049D                 db    0
.rdata$r:0000049E                 db    0
.rdata$r:0000049F                 db    0
.rdata$r:000004A0                 db    8
.rdata$r:000004A1                 db    0
.rdata$r:000004A2                 db    0
.rdata$r:000004A3                 db    0
.rdata$r:000004A4                 dd offset ??_R2CEncoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CEncoder::`RTTI Base Class Array'
.rdata$r:000004A4 _rdata$r        ends
.rdata$r:000004A4
.rdata$r:000004A8 ; ===========================================================================
.rdata$r:000004A8
.rdata$r:000004A8 ; Segment type: Pure data
.rdata$r:000004A8 ; Segment permissions: Read
.rdata$r:000004A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004A8                 assume cs:_rdata$r
.rdata$r:000004A8                 ;org 4A8h
.rdata$r:000004A8 ; COMDAT (pick any)
.rdata$r:000004A8                 public ??_R2CEncoder@NLzma2@NCompress@@8
.rdata$r:000004A8 ; NCompress::NLzma2::CEncoder::`RTTI Base Class Array'
.rdata$r:000004A8 ??_R2CEncoder@NLzma2@NCompress@@8 dd offset ??_R1A@?0A@EA@CEncoder@NLzma2@NCompress@@8
.rdata$r:000004A8                                         ; DATA XREF: .rdata$r:000004A4o
.rdata$r:000004A8                                         ; NCompress::NLzma2::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004AC                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004B0                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000004B4                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000004B8                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000004BC                 dd offset ??_R17?0A@EA@ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000004C0                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000004C4                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:000004C8                 db    0
.rdata$r:000004C9                 align 4
.rdata$r:000004C9 _rdata$r        ends
.rdata$r:000004C9
.rdata$r:000004CC ; ===========================================================================
.rdata$r:000004CC
.rdata$r:000004CC ; Segment type: Pure data
.rdata$r:000004CC ; Segment permissions: Read
.rdata$r:000004CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004CC                 assume cs:_rdata$r
.rdata$r:000004CC                 ;org 4CCh
.rdata$r:000004CC ; COMDAT (pick any)
.rdata$r:000004CC                 public ??_R1A@?0A@EA@CEncoder@NLzma2@NCompress@@8
.rdata$r:000004CC ; NCompress::NLzma2::CEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000004CC ??_R1A@?0A@EA@CEncoder@NLzma2@NCompress@@8 dd offset ??_R0?AVCEncoder@NLzma2@NCompress@@@8
.rdata$r:000004CC                                         ; DATA XREF: .rdata$r:NCompress::NLzma2::CEncoder::`RTTI Base Class Array'o
.rdata$r:000004CC                                         ; NCompress::NLzma2::CEncoder `RTTI Type Descriptor'
.rdata$r:000004D0                 db    7
.rdata$r:000004D1                 db    0
.rdata$r:000004D2                 db    0
.rdata$r:000004D3                 db    0
.rdata$r:000004D4                 db    0
.rdata$r:000004D5                 db    0
.rdata$r:000004D6                 db    0
.rdata$r:000004D7                 db    0
.rdata$r:000004D8                 db 0FFh
.rdata$r:000004D9                 db 0FFh
.rdata$r:000004DA                 db 0FFh
.rdata$r:000004DB                 db 0FFh
.rdata$r:000004DC                 db    0
.rdata$r:000004DD                 db    0
.rdata$r:000004DE                 db    0
.rdata$r:000004DF                 db    0
.rdata$r:000004E0                 db  40h ; @
.rdata$r:000004E1                 db    0
.rdata$r:000004E2                 db    0
.rdata$r:000004E3                 db    0
.rdata$r:000004E4                 dd offset ??_R3CEncoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004E4 _rdata$r        ends
.rdata$r:000004E4
.rdata$r:000004E8 ; ===========================================================================
.rdata$r:000004E8
.rdata$r:000004E8 ; Segment type: Pure data
.rdata$r:000004E8 ; Segment permissions: Read
.rdata$r:000004E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004E8                 assume cs:_rdata$r
.rdata$r:000004E8                 ;org 4E8h
.rdata$r:000004E8 ; COMDAT (pick any)
.rdata$r:000004E8                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:000004E8 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000004E8 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:000004E8                                         ; DATA XREF: .rdata$r:000004ACo
.rdata$r:000004E8                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:000004E8                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:000004EC                 db    1
.rdata$r:000004ED                 db    0
.rdata$r:000004EE                 db    0
.rdata$r:000004EF                 db    0
.rdata$r:000004F0                 db    0
.rdata$r:000004F1                 db    0
.rdata$r:000004F2                 db    0
.rdata$r:000004F3                 db    0
.rdata$r:000004F4                 db 0FFh
.rdata$r:000004F5                 db 0FFh
.rdata$r:000004F6                 db 0FFh
.rdata$r:000004F7                 db 0FFh
.rdata$r:000004F8                 db    0
.rdata$r:000004F9                 db    0
.rdata$r:000004FA                 db    0
.rdata$r:000004FB                 db    0
.rdata$r:000004FC                 db  40h ; @
.rdata$r:000004FD                 db    0
.rdata$r:000004FE                 db    0
.rdata$r:000004FF                 db    0
.rdata$r:00000500                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000500 _rdata$r        ends
.rdata$r:00000500
.data:00000504 ; ===========================================================================
.data:00000504
.data:00000504 ; Segment type: Pure data
.data:00000504 ; Segment permissions: Read/Write
.data:00000504 _data           segment dword public 'DATA' use32
.data:00000504                 assume cs:_data
.data:00000504                 ;org 504h
.data:00000504 ; COMDAT (pick any)
.data:00000504                 public ??_R0?AUICompressCoder@@@8
.data:00000504 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00000504 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000504                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000504                                         ; .rdata$r:00000A30o
.data:00000504                                         ; const type_info::`vftable'
.data:00000508                 db    0
.data:00000509                 db    0
.data:0000050A                 db    0
.data:0000050B                 db    0
.data:0000050C                 db  2Eh ; .
.data:0000050D                 db  3Fh ; ?
.data:0000050E                 db  41h ; A
.data:0000050F                 db  55h ; U
.data:00000510                 db  49h ; I
.data:00000511                 db  43h ; C
.data:00000512                 db  6Fh ; o
.data:00000513                 db  6Dh ; m
.data:00000514                 db  70h ; p
.data:00000515                 db  72h ; r
.data:00000516                 db  65h ; e
.data:00000517                 db  73h ; s
.data:00000518                 db  73h ; s
.data:00000519                 db  43h ; C
.data:0000051A                 db  6Fh ; o
.data:0000051B                 db  64h ; d
.data:0000051C                 db  65h ; e
.data:0000051D                 db  72h ; r
.data:0000051E                 db  40h ; @
.data:0000051F                 db  40h ; @
.data:00000520                 db    0
.data:00000521                 align 4
.data:00000521 _data           ends
.data:00000521
.rdata$r:00000524 ; ===========================================================================
.rdata$r:00000524
.rdata$r:00000524 ; Segment type: Pure data
.rdata$r:00000524 ; Segment permissions: Read
.rdata$r:00000524 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000524                 assume cs:_rdata$r
.rdata$r:00000524                 ;org 524h
.rdata$r:00000524 ; COMDAT (pick any)
.rdata$r:00000524                 public ??_R3ICompressCoder@@8
.rdata$r:00000524 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000524 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00000500o
.rdata$r:00000524                                         ; .rdata$r:00000A34o
.rdata$r:00000525                 db    0
.rdata$r:00000526                 db    0
.rdata$r:00000527                 db    0
.rdata$r:00000528                 db    0
.rdata$r:00000529                 db    0
.rdata$r:0000052A                 db    0
.rdata$r:0000052B                 db    0
.rdata$r:0000052C                 db    2
.rdata$r:0000052D                 db    0
.rdata$r:0000052E                 db    0
.rdata$r:0000052F                 db    0
.rdata$r:00000530                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000530 _rdata$r        ends
.rdata$r:00000530
.rdata$r:00000534 ; ===========================================================================
.rdata$r:00000534
.rdata$r:00000534 ; Segment type: Pure data
.rdata$r:00000534 ; Segment permissions: Read
.rdata$r:00000534 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000534                 assume cs:_rdata$r
.rdata$r:00000534                 ;org 534h
.rdata$r:00000534 ; COMDAT (pick any)
.rdata$r:00000534                 public ??_R2ICompressCoder@@8
.rdata$r:00000534 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000534 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000534                                         ; DATA XREF: .rdata$r:00000530o
.rdata$r:00000534                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000538                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000053C                 db    0
.rdata$r:0000053D                 align 10h
.rdata$r:0000053D _rdata$r        ends
.rdata$r:0000053D
.rdata$r:00000540 ; ===========================================================================
.rdata$r:00000540
.rdata$r:00000540 ; Segment type: Pure data
.rdata$r:00000540 ; Segment permissions: Read
.rdata$r:00000540 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000540                 assume cs:_rdata$r
.rdata$r:00000540                 ;org 540h
.rdata$r:00000540 ; COMDAT (pick any)
.rdata$r:00000540                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000540 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000540 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000540                                         ; DATA XREF: .rdata$r:00000538o
.rdata$r:00000540                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00000540                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000544                 db    0
.rdata$r:00000545                 db    0
.rdata$r:00000546                 db    0
.rdata$r:00000547                 db    0
.rdata$r:00000548                 db    0
.rdata$r:00000549                 db    0
.rdata$r:0000054A                 db    0
.rdata$r:0000054B                 db    0
.rdata$r:0000054C                 db 0FFh
.rdata$r:0000054D                 db 0FFh
.rdata$r:0000054E                 db 0FFh
.rdata$r:0000054F                 db 0FFh
.rdata$r:00000550                 db    0
.rdata$r:00000551                 db    0
.rdata$r:00000552                 db    0
.rdata$r:00000553                 db    0
.rdata$r:00000554                 db  40h ; @
.rdata$r:00000555                 db    0
.rdata$r:00000556                 db    0
.rdata$r:00000557                 db    0
.rdata$r:00000558                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000558 _rdata$r        ends
.rdata$r:00000558
.data:0000055C ; ===========================================================================
.data:0000055C
.data:0000055C ; Segment type: Pure data
.data:0000055C ; Segment permissions: Read/Write
.data:0000055C _data           segment dword public 'DATA' use32
.data:0000055C                 assume cs:_data
.data:0000055C                 ;org 55Ch
.data:0000055C ; COMDAT (pick any)
.data:0000055C                 public ??_R0?AUIUnknown@@@8
.data:0000055C ; struct IUnknown `RTTI Type Descriptor'
.data:0000055C ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:0000055C                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000055C                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:0000055C                                         ; const type_info::`vftable'
.data:00000560                 db    0
.data:00000561                 db    0
.data:00000562                 db    0
.data:00000563                 db    0
.data:00000564                 db  2Eh ; .
.data:00000565                 db  3Fh ; ?
.data:00000566                 db  41h ; A
.data:00000567                 db  55h ; U
.data:00000568                 db  49h ; I
.data:00000569                 db  55h ; U
.data:0000056A                 db  6Eh ; n
.data:0000056B                 db  6Bh ; k
.data:0000056C                 db  6Eh ; n
.data:0000056D                 db  6Fh ; o
.data:0000056E                 db  77h ; w
.data:0000056F                 db  6Eh ; n
.data:00000570                 db  40h ; @
.data:00000571                 db  40h ; @
.data:00000572                 db    0
.data:00000573                 align 4
.data:00000573 _data           ends
.data:00000573
.rdata$r:00000574 ; ===========================================================================
.rdata$r:00000574
.rdata$r:00000574 ; Segment type: Pure data
.rdata$r:00000574 ; Segment permissions: Read
.rdata$r:00000574 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000574                 assume cs:_rdata$r
.rdata$r:00000574                 ;org 574h
.rdata$r:00000574 ; COMDAT (pick any)
.rdata$r:00000574                 public ??_R3IUnknown@@8
.rdata$r:00000574 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000574 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000558o
.rdata$r:00000574                                         ; .rdata$r:000005A4o ...
.rdata$r:00000575                 db    0
.rdata$r:00000576                 db    0
.rdata$r:00000577                 db    0
.rdata$r:00000578                 db    0
.rdata$r:00000579                 db    0
.rdata$r:0000057A                 db    0
.rdata$r:0000057B                 db    0
.rdata$r:0000057C                 db    1
.rdata$r:0000057D                 db    0
.rdata$r:0000057E                 db    0
.rdata$r:0000057F                 db    0
.rdata$r:00000580                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000580 _rdata$r        ends
.rdata$r:00000580
.rdata$r:00000584 ; ===========================================================================
.rdata$r:00000584
.rdata$r:00000584 ; Segment type: Pure data
.rdata$r:00000584 ; Segment permissions: Read
.rdata$r:00000584 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000584                 assume cs:_rdata$r
.rdata$r:00000584                 ;org 584h
.rdata$r:00000584 ; COMDAT (pick any)
.rdata$r:00000584                 public ??_R2IUnknown@@8
.rdata$r:00000584 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000584 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000584                                         ; DATA XREF: .rdata$r:00000580o
.rdata$r:00000584                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000588                 db    0
.rdata$r:00000589                 align 4
.rdata$r:00000589 _rdata$r        ends
.rdata$r:00000589
.rdata$r:0000058C ; ===========================================================================
.rdata$r:0000058C
.rdata$r:0000058C ; Segment type: Pure data
.rdata$r:0000058C ; Segment permissions: Read
.rdata$r:0000058C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000058C                 assume cs:_rdata$r
.rdata$r:0000058C                 ;org 58Ch
.rdata$r:0000058C ; COMDAT (pick any)
.rdata$r:0000058C                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:0000058C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:0000058C ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000058C                                         ; DATA XREF: .rdata$r:000004B0o
.rdata$r:0000058C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000590                 db    0
.rdata$r:00000591                 db    0
.rdata$r:00000592                 db    0
.rdata$r:00000593                 db    0
.rdata$r:00000594                 db    0
.rdata$r:00000595                 db    0
.rdata$r:00000596                 db    0
.rdata$r:00000597                 db    0
.rdata$r:00000598                 db 0FFh
.rdata$r:00000599                 db 0FFh
.rdata$r:0000059A                 db 0FFh
.rdata$r:0000059B                 db 0FFh
.rdata$r:0000059C                 db    0
.rdata$r:0000059D                 db    0
.rdata$r:0000059E                 db    0
.rdata$r:0000059F                 db    0
.rdata$r:000005A0                 db  42h ; B
.rdata$r:000005A1                 db    0
.rdata$r:000005A2                 db    0
.rdata$r:000005A3                 db    0
.rdata$r:000005A4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005A4 _rdata$r        ends
.rdata$r:000005A4
.rdata$r:000005A8 ; ===========================================================================
.rdata$r:000005A8
.rdata$r:000005A8 ; Segment type: Pure data
.rdata$r:000005A8 ; Segment permissions: Read
.rdata$r:000005A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005A8                 assume cs:_rdata$r
.rdata$r:000005A8                 ;org 5A8h
.rdata$r:000005A8 ; COMDAT (pick any)
.rdata$r:000005A8                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000005A8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000005A8 ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:000005A8                                         ; DATA XREF: .rdata$r:000004B4o
.rdata$r:000005A8                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000005AC                 db    1
.rdata$r:000005AD                 db    0
.rdata$r:000005AE                 db    0
.rdata$r:000005AF                 db    0
.rdata$r:000005B0                 db    4
.rdata$r:000005B1                 db    0
.rdata$r:000005B2                 db    0
.rdata$r:000005B3                 db    0
.rdata$r:000005B4                 db 0FFh
.rdata$r:000005B5                 db 0FFh
.rdata$r:000005B6                 db 0FFh
.rdata$r:000005B7                 db 0FFh
.rdata$r:000005B8                 db    0
.rdata$r:000005B9                 db    0
.rdata$r:000005BA                 db    0
.rdata$r:000005BB                 db    0
.rdata$r:000005BC                 db  40h ; @
.rdata$r:000005BD                 db    0
.rdata$r:000005BE                 db    0
.rdata$r:000005BF                 db    0
.rdata$r:000005C0                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005C0 _rdata$r        ends
.rdata$r:000005C0
.data:000005C4 ; ===========================================================================
.data:000005C4
.data:000005C4 ; Segment type: Pure data
.data:000005C4 ; Segment permissions: Read/Write
.data:000005C4 _data           segment dword public 'DATA' use32
.data:000005C4                 assume cs:_data
.data:000005C4                 ;org 5C4h
.data:000005C4 ; COMDAT (pick any)
.data:000005C4                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:000005C4 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:000005C4 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:000005C4                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000005C4                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000005C4                                         ; const type_info::`vftable'
.data:000005C8                 db    0
.data:000005C9                 db    0
.data:000005CA                 db    0
.data:000005CB                 db    0
.data:000005CC                 db  2Eh ; .
.data:000005CD                 db  3Fh ; ?
.data:000005CE                 db  41h ; A
.data:000005CF                 db  55h ; U
.data:000005D0                 db  49h ; I
.data:000005D1                 db  43h ; C
.data:000005D2                 db  6Fh ; o
.data:000005D3                 db  6Dh ; m
.data:000005D4                 db  70h ; p
.data:000005D5                 db  72h ; r
.data:000005D6                 db  65h ; e
.data:000005D7                 db  73h ; s
.data:000005D8                 db  73h ; s
.data:000005D9                 db  53h ; S
.data:000005DA                 db  65h ; e
.data:000005DB                 db  74h ; t
.data:000005DC                 db  43h ; C
.data:000005DD                 db  6Fh ; o
.data:000005DE                 db  64h ; d
.data:000005DF                 db  65h ; e
.data:000005E0                 db  72h ; r
.data:000005E1                 db  50h ; P
.data:000005E2                 db  72h ; r
.data:000005E3                 db  6Fh ; o
.data:000005E4                 db  70h ; p
.data:000005E5                 db  65h ; e
.data:000005E6                 db  72h ; r
.data:000005E7                 db  74h ; t
.data:000005E8                 db  69h ; i
.data:000005E9                 db  65h ; e
.data:000005EA                 db  73h ; s
.data:000005EB                 db  40h ; @
.data:000005EC                 db  40h ; @
.data:000005ED                 db    0
.data:000005EE                 align 10h
.data:000005EE _data           ends
.data:000005EE
.rdata$r:000005F0 ; ===========================================================================
.rdata$r:000005F0
.rdata$r:000005F0 ; Segment type: Pure data
.rdata$r:000005F0 ; Segment permissions: Read
.rdata$r:000005F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005F0                 assume cs:_rdata$r
.rdata$r:000005F0                 ;org 5F0h
.rdata$r:000005F0 ; COMDAT (pick any)
.rdata$r:000005F0                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:000005F0 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005F0 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:000005F0                                         ; DATA XREF: .rdata$r:000005C0o
.rdata$r:000005F0                                         ; .rdata$r:00000624o ...
.rdata$r:000005F1                 db    0
.rdata$r:000005F2                 db    0
.rdata$r:000005F3                 db    0
.rdata$r:000005F4                 db    0
.rdata$r:000005F5                 db    0
.rdata$r:000005F6                 db    0
.rdata$r:000005F7                 db    0
.rdata$r:000005F8                 db    2
.rdata$r:000005F9                 db    0
.rdata$r:000005FA                 db    0
.rdata$r:000005FB                 db    0
.rdata$r:000005FC                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:000005FC _rdata$r        ends
.rdata$r:000005FC
.rdata$r:00000600 ; ===========================================================================
.rdata$r:00000600
.rdata$r:00000600 ; Segment type: Pure data
.rdata$r:00000600 ; Segment permissions: Read
.rdata$r:00000600 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000600                 assume cs:_rdata$r
.rdata$r:00000600                 ;org 600h
.rdata$r:00000600 ; COMDAT (pick any)
.rdata$r:00000600                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00000600 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000600 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000600                                         ; DATA XREF: .rdata$r:000005FCo
.rdata$r:00000600                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000604                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000608                 db    0
.rdata$r:00000609                 align 4
.rdata$r:00000609 _rdata$r        ends
.rdata$r:00000609
.rdata$r:0000060C ; ===========================================================================
.rdata$r:0000060C
.rdata$r:0000060C ; Segment type: Pure data
.rdata$r:0000060C ; Segment permissions: Read
.rdata$r:0000060C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000060C                 assume cs:_rdata$r
.rdata$r:0000060C                 ;org 60Ch
.rdata$r:0000060C ; COMDAT (pick any)
.rdata$r:0000060C                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:0000060C ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000060C ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:0000060C                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:0000060C                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000610                 db    1
.rdata$r:00000611                 db    0
.rdata$r:00000612                 db    0
.rdata$r:00000613                 db    0
.rdata$r:00000614                 db    0
.rdata$r:00000615                 db    0
.rdata$r:00000616                 db    0
.rdata$r:00000617                 db    0
.rdata$r:00000618                 db 0FFh
.rdata$r:00000619                 db 0FFh
.rdata$r:0000061A                 db 0FFh
.rdata$r:0000061B                 db 0FFh
.rdata$r:0000061C                 db    0
.rdata$r:0000061D                 db    0
.rdata$r:0000061E                 db    0
.rdata$r:0000061F                 db    0
.rdata$r:00000620                 db  40h ; @
.rdata$r:00000621                 db    0
.rdata$r:00000622                 db    0
.rdata$r:00000623                 db    0
.rdata$r:00000624                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000624 _rdata$r        ends
.rdata$r:00000624
.rdata$r:00000628 ; ===========================================================================
.rdata$r:00000628
.rdata$r:00000628 ; Segment type: Pure data
.rdata$r:00000628 ; Segment permissions: Read
.rdata$r:00000628 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000628                 assume cs:_rdata$r
.rdata$r:00000628                 ;org 628h
.rdata$r:00000628 ; COMDAT (pick any)
.rdata$r:00000628                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00000628 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00000628 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000628                                         ; DATA XREF: .rdata$r:000004B8o
.rdata$r:00000628                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000062C                 align 10h
.rdata$r:00000630                 db    4
.rdata$r:00000631                 db    0
.rdata$r:00000632                 db    0
.rdata$r:00000633                 db    0
.rdata$r:00000634                 db 0FFh
.rdata$r:00000635                 db 0FFh
.rdata$r:00000636                 db 0FFh
.rdata$r:00000637                 db 0FFh
.rdata$r:00000638                 db    0
.rdata$r:00000639                 db    0
.rdata$r:0000063A                 db    0
.rdata$r:0000063B                 db    0
.rdata$r:0000063C                 db  42h ; B
.rdata$r:0000063D                 db    0
.rdata$r:0000063E                 db    0
.rdata$r:0000063F                 db    0
.rdata$r:00000640                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000640 _rdata$r        ends
.rdata$r:00000640
.rdata$r:00000644 ; ===========================================================================
.rdata$r:00000644
.rdata$r:00000644 ; Segment type: Pure data
.rdata$r:00000644 ; Segment permissions: Read
.rdata$r:00000644 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000644                 assume cs:_rdata$r
.rdata$r:00000644                 ;org 644h
.rdata$r:00000644 ; COMDAT (pick any)
.rdata$r:00000644                 public ??_R17?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:00000644 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00000644 ??_R17?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:00000644                                         ; DATA XREF: .rdata$r:000004BCo
.rdata$r:00000644                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00000648                 db    1
.rdata$r:00000649                 db    0
.rdata$r:0000064A                 db    0
.rdata$r:0000064B                 db    0
.rdata$r:0000064C                 db    8
.rdata$r:0000064D                 db    0
.rdata$r:0000064E                 db    0
.rdata$r:0000064F                 db    0
.rdata$r:00000650                 db 0FFh
.rdata$r:00000651                 db 0FFh
.rdata$r:00000652                 db 0FFh
.rdata$r:00000653                 db 0FFh
.rdata$r:00000654                 db    0
.rdata$r:00000655                 db    0
.rdata$r:00000656                 db    0
.rdata$r:00000657                 db    0
.rdata$r:00000658                 db  40h ; @
.rdata$r:00000659                 db    0
.rdata$r:0000065A                 db    0
.rdata$r:0000065B                 db    0
.rdata$r:0000065C                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000065C _rdata$r        ends
.rdata$r:0000065C
.data:00000660 ; ===========================================================================
.data:00000660
.data:00000660 ; Segment type: Pure data
.data:00000660 ; Segment permissions: Read/Write
.data:00000660 _data           segment dword public 'DATA' use32
.data:00000660                 assume cs:_data
.data:00000660                 ;org 660h
.data:00000660 ; COMDAT (pick any)
.data:00000660                 public ??_R0?AUICompressWriteCoderProperties@@@8
.data:00000660 ; struct ICompressWriteCoderProperties `RTTI Type Descriptor'
.data:00000660 ??_R0?AUICompressWriteCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00000660                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00000660                                         ; .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000660                                         ; const type_info::`vftable'
.data:00000664                 align 8
.data:00000668 a_?auicompressw db '.?AUICompressWriteCoderProperties@@',0
.data:00000668 _data           ends
.data:00000668
.rdata$r:0000068C ; ===========================================================================
.rdata$r:0000068C
.rdata$r:0000068C ; Segment type: Pure data
.rdata$r:0000068C ; Segment permissions: Read
.rdata$r:0000068C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000068C                 assume cs:_rdata$r
.rdata$r:0000068C                 ;org 68Ch
.rdata$r:0000068C ; COMDAT (pick any)
.rdata$r:0000068C                 public ??_R3ICompressWriteCoderProperties@@8
.rdata$r:0000068C ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000068C ??_R3ICompressWriteCoderProperties@@8 db    0
.rdata$r:0000068C                                         ; DATA XREF: .rdata$r:0000065Co
.rdata$r:0000068C                                         ; .rdata$r:000006C0o ...
.rdata$r:0000068D                 db    0
.rdata$r:0000068E                 db    0
.rdata$r:0000068F                 db    0
.rdata$r:00000690                 db    0
.rdata$r:00000691                 db    0
.rdata$r:00000692                 db    0
.rdata$r:00000693                 db    0
.rdata$r:00000694                 db    2
.rdata$r:00000695                 db    0
.rdata$r:00000696                 db    0
.rdata$r:00000697                 db    0
.rdata$r:00000698                 dd offset ??_R2ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:00000698 _rdata$r        ends
.rdata$r:00000698
.rdata$r:0000069C ; ===========================================================================
.rdata$r:0000069C
.rdata$r:0000069C ; Segment type: Pure data
.rdata$r:0000069C ; Segment permissions: Read
.rdata$r:0000069C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000069C                 assume cs:_rdata$r
.rdata$r:0000069C                 ;org 69Ch
.rdata$r:0000069C ; COMDAT (pick any)
.rdata$r:0000069C                 public ??_R2ICompressWriteCoderProperties@@8
.rdata$r:0000069C ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:0000069C ??_R2ICompressWriteCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:0000069C                                         ; DATA XREF: .rdata$r:00000698o
.rdata$r:0000069C                                         ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000006A0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000006A4                 db    0
.rdata$r:000006A5                 align 4
.rdata$r:000006A5 _rdata$r        ends
.rdata$r:000006A5
.rdata$r:000006A8 ; ===========================================================================
.rdata$r:000006A8
.rdata$r:000006A8 ; Segment type: Pure data
.rdata$r:000006A8 ; Segment permissions: Read
.rdata$r:000006A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006A8                 assume cs:_rdata$r
.rdata$r:000006A8                 ;org 6A8h
.rdata$r:000006A8 ; COMDAT (pick any)
.rdata$r:000006A8                 public ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:000006A8 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000006A8 ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:000006A8                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Array'o
.rdata$r:000006A8                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:000006AC                 db    1
.rdata$r:000006AD                 db    0
.rdata$r:000006AE                 db    0
.rdata$r:000006AF                 db    0
.rdata$r:000006B0                 db    0
.rdata$r:000006B1                 db    0
.rdata$r:000006B2                 db    0
.rdata$r:000006B3                 db    0
.rdata$r:000006B4                 db 0FFh
.rdata$r:000006B5                 db 0FFh
.rdata$r:000006B6                 db 0FFh
.rdata$r:000006B7                 db 0FFh
.rdata$r:000006B8                 db    0
.rdata$r:000006B9                 db    0
.rdata$r:000006BA                 db    0
.rdata$r:000006BB                 db    0
.rdata$r:000006BC                 db  40h ; @
.rdata$r:000006BD                 db    0
.rdata$r:000006BE                 db    0
.rdata$r:000006BF                 db    0
.rdata$r:000006C0                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006C0 _rdata$r        ends
.rdata$r:000006C0
.rdata$r:000006C4 ; ===========================================================================
.rdata$r:000006C4
.rdata$r:000006C4 ; Segment type: Pure data
.rdata$r:000006C4 ; Segment permissions: Read
.rdata$r:000006C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006C4                 assume cs:_rdata$r
.rdata$r:000006C4                 ;org 6C4h
.rdata$r:000006C4 ; COMDAT (pick any)
.rdata$r:000006C4                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:000006C4 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:000006C4 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000006C4                                         ; DATA XREF: .rdata$r:000004C0o
.rdata$r:000006C4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000006C8                 db    0
.rdata$r:000006C9                 db    0
.rdata$r:000006CA                 db    0
.rdata$r:000006CB                 db    0
.rdata$r:000006CC                 db    8
.rdata$r:000006CD                 db    0
.rdata$r:000006CE                 db    0
.rdata$r:000006CF                 db    0
.rdata$r:000006D0                 db 0FFh
.rdata$r:000006D1                 db 0FFh
.rdata$r:000006D2                 db 0FFh
.rdata$r:000006D3                 db 0FFh
.rdata$r:000006D4                 db    0
.rdata$r:000006D5                 db    0
.rdata$r:000006D6                 db    0
.rdata$r:000006D7                 db    0
.rdata$r:000006D8                 db  42h ; B
.rdata$r:000006D9                 db    0
.rdata$r:000006DA                 db    0
.rdata$r:000006DB                 db    0
.rdata$r:000006DC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006DC _rdata$r        ends
.rdata$r:000006DC
.rdata$r:000006E0 ; ===========================================================================
.rdata$r:000006E0
.rdata$r:000006E0 ; Segment type: Pure data
.rdata$r:000006E0 ; Segment permissions: Read
.rdata$r:000006E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006E0                 assume cs:_rdata$r
.rdata$r:000006E0                 ;org 6E0h
.rdata$r:000006E0 ; COMDAT (pick any)
.rdata$r:000006E0                 public ??_R1M@?0A@EA@CMyUnknownImp@@8
.rdata$r:000006E0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:000006E0 ??_R1M@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000006E0                                         ; DATA XREF: .rdata$r:000004C4o
.rdata$r:000006E0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000006E4                 align 8
.rdata$r:000006E8                 db  0Ch
.rdata$r:000006E9                 db    0
.rdata$r:000006EA                 db    0
.rdata$r:000006EB                 db    0
.rdata$r:000006EC                 db 0FFh
.rdata$r:000006ED                 db 0FFh
.rdata$r:000006EE                 db 0FFh
.rdata$r:000006EF                 db 0FFh
.rdata$r:000006F0                 db    0
.rdata$r:000006F1                 db    0
.rdata$r:000006F2                 db    0
.rdata$r:000006F3                 db    0
.rdata$r:000006F4                 db  40h ; @
.rdata$r:000006F5                 db    0
.rdata$r:000006F6                 db    0
.rdata$r:000006F7                 db    0
.rdata$r:000006F8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006F8 _rdata$r        ends
.rdata$r:000006F8
.data:000006FC ; ===========================================================================
.data:000006FC
.data:000006FC ; Segment type: Pure data
.data:000006FC ; Segment permissions: Read/Write
.data:000006FC _data           segment dword public 'DATA' use32
.data:000006FC                 assume cs:_data
.data:000006FC                 ;org 6FCh
.data:000006FC ; COMDAT (pick any)
.data:000006FC                 public ??_R0?AVCMyUnknownImp@@@8
.data:000006FC ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000006FC ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000006FC                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:000006FC                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000006FC                                         ; const type_info::`vftable'
.data:00000700                 db    0
.data:00000701                 db    0
.data:00000702                 db    0
.data:00000703                 db    0
.data:00000704                 db  2Eh ; .
.data:00000705                 db  3Fh ; ?
.data:00000706                 db  41h ; A
.data:00000707                 db  56h ; V
.data:00000708                 db  43h ; C
.data:00000709                 db  4Dh ; M
.data:0000070A                 db  79h ; y
.data:0000070B                 db  55h ; U
.data:0000070C                 db  6Eh ; n
.data:0000070D                 db  6Bh ; k
.data:0000070E                 db  6Eh ; n
.data:0000070F                 db  6Fh ; o
.data:00000710                 db  77h ; w
.data:00000711                 db  6Eh ; n
.data:00000712                 db  49h ; I
.data:00000713                 db  6Dh ; m
.data:00000714                 db  70h ; p
.data:00000715                 db  40h ; @
.data:00000716                 db  40h ; @
.data:00000717                 db    0
.data:00000717 _data           ends
.data:00000717
.rdata$r:00000718 ; ===========================================================================
.rdata$r:00000718
.rdata$r:00000718 ; Segment type: Pure data
.rdata$r:00000718 ; Segment permissions: Read
.rdata$r:00000718 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000718                 assume cs:_rdata$r
.rdata$r:00000718                 ;org 718h
.rdata$r:00000718 ; COMDAT (pick any)
.rdata$r:00000718                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000718 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000718 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000006F8o
.rdata$r:00000718                                         ; .rdata$r:00000748o
.rdata$r:00000719                 db    0
.rdata$r:0000071A                 db    0
.rdata$r:0000071B                 db    0
.rdata$r:0000071C                 db    0
.rdata$r:0000071D                 db    0
.rdata$r:0000071E                 db    0
.rdata$r:0000071F                 db    0
.rdata$r:00000720                 db    1
.rdata$r:00000721                 db    0
.rdata$r:00000722                 db    0
.rdata$r:00000723                 db    0
.rdata$r:00000724                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000724 _rdata$r        ends
.rdata$r:00000724
.rdata$r:00000728 ; ===========================================================================
.rdata$r:00000728
.rdata$r:00000728 ; Segment type: Pure data
.rdata$r:00000728 ; Segment permissions: Read
.rdata$r:00000728 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000728                 assume cs:_rdata$r
.rdata$r:00000728                 ;org 728h
.rdata$r:00000728 ; COMDAT (pick any)
.rdata$r:00000728                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000728 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000728 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000728                                         ; DATA XREF: .rdata$r:00000724o
.rdata$r:00000728                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000072C                 db    0
.rdata$r:0000072D                 align 10h
.rdata$r:0000072D _rdata$r        ends
.rdata$r:0000072D
.rdata$r:00000730 ; ===========================================================================
.rdata$r:00000730
.rdata$r:00000730 ; Segment type: Pure data
.rdata$r:00000730 ; Segment permissions: Read
.rdata$r:00000730 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000730                 assume cs:_rdata$r
.rdata$r:00000730                 ;org 730h
.rdata$r:00000730 ; COMDAT (pick any)
.rdata$r:00000730                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000730 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000730 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000730                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000730                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000734                 db    0
.rdata$r:00000735                 db    0
.rdata$r:00000736                 db    0
.rdata$r:00000737                 db    0
.rdata$r:00000738                 db    0
.rdata$r:00000739                 db    0
.rdata$r:0000073A                 db    0
.rdata$r:0000073B                 db    0
.rdata$r:0000073C                 db 0FFh
.rdata$r:0000073D                 db 0FFh
.rdata$r:0000073E                 db 0FFh
.rdata$r:0000073F                 db 0FFh
.rdata$r:00000740                 db    0
.rdata$r:00000741                 db    0
.rdata$r:00000742                 db    0
.rdata$r:00000743                 db    0
.rdata$r:00000744                 db  40h ; @
.rdata$r:00000745                 db    0
.rdata$r:00000746                 db    0
.rdata$r:00000747                 db    0
.rdata$r:00000748                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000748 _rdata$r        ends
.rdata$r:00000748
.rdata$r:0000074C ; ===========================================================================
.rdata$r:0000074C
.rdata$r:0000074C ; Segment type: Pure data
.rdata$r:0000074C ; Segment permissions: Read
.rdata$r:0000074C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000074C                 assume cs:_rdata$r
.rdata$r:0000074C                 ;org 74Ch
.rdata$r:0000074C ; COMDAT (pick any)
.rdata$r:0000074C                 public ??_R4CEncoder@NLzma2@NCompress@@6BICompressSetCoderProperties@@@
.rdata$r:0000074C ; const NCompress::NLzma2::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:0000074C ??_R4CEncoder@NLzma2@NCompress@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:0000074C                                         ; DATA XREF: .rdata:00000428o
.rdata$r:0000074D                 db    0
.rdata$r:0000074E                 db    0
.rdata$r:0000074F                 db    0
.rdata$r:00000750                 db    4
.rdata$r:00000751                 db    0
.rdata$r:00000752                 db    0
.rdata$r:00000753                 db    0
.rdata$r:00000754                 db    0
.rdata$r:00000755                 db    0
.rdata$r:00000756                 db    0
.rdata$r:00000757                 db    0
.rdata$r:00000758                 dd offset ??_R0?AVCEncoder@NLzma2@NCompress@@@8 ; NCompress::NLzma2::CEncoder `RTTI Type Descriptor'
.rdata$r:0000075C                 dd offset ??_R3CEncoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000075C _rdata$r        ends
.rdata$r:0000075C
.rdata$r:00000760 ; ===========================================================================
.rdata$r:00000760
.rdata$r:00000760 ; Segment type: Pure data
.rdata$r:00000760 ; Segment permissions: Read
.rdata$r:00000760 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000760                 assume cs:_rdata$r
.rdata$r:00000760                 ;org 760h
.rdata$r:00000760 ; COMDAT (pick any)
.rdata$r:00000760                 public ??_R4CEncoder@NLzma2@NCompress@@6BICompressWriteCoderProperties@@@
.rdata$r:00000760 ; const NCompress::NLzma2::CEncoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata$r:00000760 ??_R4CEncoder@NLzma2@NCompress@@6BICompressWriteCoderProperties@@@ db    0
.rdata$r:00000760                                         ; DATA XREF: .rdata:00000414o
.rdata$r:00000761                 db    0
.rdata$r:00000762                 db    0
.rdata$r:00000763                 db    0
.rdata$r:00000764                 db    8
.rdata$r:00000765                 db    0
.rdata$r:00000766                 db    0
.rdata$r:00000767                 db    0
.rdata$r:00000768                 db    0
.rdata$r:00000769                 db    0
.rdata$r:0000076A                 db    0
.rdata$r:0000076B                 db    0
.rdata$r:0000076C                 dd offset ??_R0?AVCEncoder@NLzma2@NCompress@@@8 ; NCompress::NLzma2::CEncoder `RTTI Type Descriptor'
.rdata$r:00000770                 dd offset ??_R3CEncoder@NLzma2@NCompress@@8 ; NCompress::NLzma2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000770 _rdata$r        ends
.rdata$r:00000770
.xdata$x:00000774 ; ===========================================================================
.xdata$x:00000774
.xdata$x:00000774 ; Segment type: Pure data
.xdata$x:00000774 ; Segment permissions: Read
.xdata$x:00000774 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000774                 assume cs:_xdata$x
.xdata$x:00000774                 ;org 774h
.xdata$x:00000774 ; COMDAT (pick any)
.xdata$x:00000774                 public __CTA1H
.xdata$x:00000774 __CTA1H         db    1                 ; DATA XREF: .xdata$x:00000410o
.xdata$x:00000775                 db    0
.xdata$x:00000776                 db    0
.xdata$x:00000777                 db    0
.xdata$x:00000778                 dd offset __CT??_R0H@84
.xdata$x:00000778 _xdata$x        ends
.xdata$x:00000778
.xdata$x:0000077C ; ===========================================================================
.xdata$x:0000077C
.xdata$x:0000077C ; Segment type: Pure data
.xdata$x:0000077C ; Segment permissions: Read
.xdata$x:0000077C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000077C                 assume cs:_xdata$x
.xdata$x:0000077C                 ;org 77Ch
.xdata$x:0000077C ; COMDAT (pick any)
.xdata$x:0000077C                 public __CT??_R0H@84
.xdata$x:0000077C __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:00000778o
.xdata$x:0000077D                 db    0
.xdata$x:0000077E                 db    0
.xdata$x:0000077F                 db    0
.xdata$x:00000780                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:00000784                 align 8
.xdata$x:00000788                 db 0FFh
.xdata$x:00000789                 db 0FFh
.xdata$x:0000078A                 db 0FFh
.xdata$x:0000078B                 db 0FFh
.xdata$x:0000078C                 db    0
.xdata$x:0000078D                 db    0
.xdata$x:0000078E                 db    0
.xdata$x:0000078F                 db    0
.xdata$x:00000790                 db    4
.xdata$x:00000791                 db    0
.xdata$x:00000792                 db    0
.xdata$x:00000793                 db    0
.xdata$x:00000794                 db    0
.xdata$x:00000795                 db    0
.xdata$x:00000796                 db    0
.xdata$x:00000797                 db    0
.xdata$x:00000797 _xdata$x        ends
.xdata$x:00000797
.data:00000798 ; ===========================================================================
.data:00000798
.data:00000798 ; Segment type: Pure data
.data:00000798 ; Segment permissions: Read/Write
.data:00000798 _data           segment dword public 'DATA' use32
.data:00000798                 assume cs:_data
.data:00000798                 ;org 798h
.data:00000798 ; COMDAT (pick any)
.data:00000798                 public ??_R0H@8
.data:00000798 ; int `RTTI Type Descriptor'
.data:00000798 ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00000780o
.data:00000798                                         ; const type_info::`vftable'
.data:0000079C                 align 10h
.data:000007A0                 db  2Eh ; .
.data:000007A1                 db  48h ; H
.data:000007A2                 db    0
.data:000007A3                 align 4
.data:000007A3 _data           ends
.data:000007A3
.text:000007A4 ; ===========================================================================
.text:000007A4
.text:000007A4 ; Segment type: Pure code
.text:000007A4 ; Segment permissions: Read/Execute
.text:000007A4 _text           segment para public 'CODE' use32
.text:000007A4                 assume cs:_text
.text:000007A4                 ;org 7A4h
.text:000007A4 ; COMDAT (pick any)
.text:000007A4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000007A4
.text:000007A4 ; =============== S U B R O U T I N E =======================================
.text:000007A4
.text:000007A4 ; Attributes: bp-based frame
.text:000007A4
.text:000007A4 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000007A4                 public ??0CMyUnknownImp@@QAE@XZ
.text:000007A4 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+3Bp
.text:000007A4
.text:000007A4 var_4           = dword ptr -4
.text:000007A4
.text:000007A4                 push    ebp
.text:000007A5                 mov     ebp, esp
.text:000007A7                 push    ecx
.text:000007A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007AF                 mov     [ebp+var_4], ecx
.text:000007B2                 mov     eax, [ebp+var_4]
.text:000007B5                 mov     dword ptr [eax], 0
.text:000007BB                 mov     eax, [ebp+var_4]
.text:000007BE                 mov     esp, ebp
.text:000007C0                 pop     ebp
.text:000007C1                 retn
.text:000007C1 ??0CMyUnknownImp@@QAE@XZ endp
.text:000007C1
.text:000007C1 ; ---------------------------------------------------------------------------
.text:000007C2                 align 4
.text:000007C2 _text           ends
.text:000007C2
.text:000007C4 ; ===========================================================================
.text:000007C4
.text:000007C4 ; Segment type: Pure code
.text:000007C4 ; Segment permissions: Read/Execute
.text:000007C4 _text           segment para public 'CODE' use32
.text:000007C4                 assume cs:_text
.text:000007C4                 ;org 7C4h
.text:000007C4 ; COMDAT (pick any)
.text:000007C4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000007C4
.text:000007C4 ; =============== S U B R O U T I N E =======================================
.text:000007C4
.text:000007C4 ; Attributes: bp-based frame
.text:000007C4
.text:000007C4 ; __int32 __stdcall NCompress::NLzma2::CEncoder::QueryInterface(NCompress::NLzma2::CEncoder *this, const struct _GUID *Buf1, void **)
.text:000007C4                 public ?QueryInterface@CEncoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:000007C4 ?QueryInterface@CEncoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000007C4                                         ; CODE XREF: [thunk]:NCompress::NLzma2::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:000007C4                                         ; [thunk]:NCompress::NLzma2::CEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:000007C4                                         ; DATA XREF: ...
.text:000007C4
.text:000007C4 var_C           = dword ptr -0Ch
.text:000007C4 var_8           = dword ptr -8
.text:000007C4 var_4           = dword ptr -4
.text:000007C4 this            = dword ptr  8
.text:000007C4 Buf1            = dword ptr  0Ch
.text:000007C4 arg_8           = dword ptr  10h
.text:000007C4
.text:000007C4                 push    ebp
.text:000007C5                 mov     ebp, esp
.text:000007C7                 sub     esp, 0Ch
.text:000007CA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000007D1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000007D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007DF                 mov     eax, [ebp+arg_8]
.text:000007E2                 mov     dword ptr [eax], 0
.text:000007E8                 push    offset _IID_IUnknown ; Buf2
.text:000007ED                 mov     ecx, [ebp+Buf1]
.text:000007F0                 push    ecx             ; Buf1
.text:000007F1                 call    ___@8           ; __(x,x)
.text:000007F6                 test    eax, eax
.text:000007F8                 jz      short loc_81C
.text:000007FA                 cmp     [ebp+this], 0
.text:000007FE                 jz      short loc_80B
.text:00000800                 mov     edx, [ebp+this]
.text:00000803                 add     edx, 4
.text:00000806                 mov     [ebp+var_4], edx
.text:00000809                 jmp     short loc_812
.text:0000080B ; ---------------------------------------------------------------------------
.text:0000080B
.text:0000080B loc_80B:                                ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+3Aj
.text:0000080B                 mov     [ebp+var_4], 0
.text:00000812
.text:00000812 loc_812:                                ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+45j
.text:00000812                 mov     eax, [ebp+arg_8]
.text:00000815                 mov     ecx, [ebp+var_4]
.text:00000818                 mov     [eax], ecx
.text:0000081A                 jmp     short loc_88B
.text:0000081C ; ---------------------------------------------------------------------------
.text:0000081C
.text:0000081C loc_81C:                                ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+34j
.text:0000081C                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:00000821                 mov     edx, [ebp+Buf1]
.text:00000824                 push    edx             ; Buf1
.text:00000825                 call    ___@8           ; __(x,x)
.text:0000082A                 test    eax, eax
.text:0000082C                 jz      short loc_850
.text:0000082E                 cmp     [ebp+this], 0
.text:00000832                 jz      short loc_83F
.text:00000834                 mov     eax, [ebp+this]
.text:00000837                 add     eax, 4
.text:0000083A                 mov     [ebp+var_8], eax
.text:0000083D                 jmp     short loc_846
.text:0000083F ; ---------------------------------------------------------------------------
.text:0000083F
.text:0000083F loc_83F:                                ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:0000083F                 mov     [ebp+var_8], 0
.text:00000846
.text:00000846 loc_846:                                ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+79j
.text:00000846                 mov     ecx, [ebp+arg_8]
.text:00000849                 mov     edx, [ebp+var_8]
.text:0000084C                 mov     [ecx], edx
.text:0000084E                 jmp     short loc_88B
.text:00000850 ; ---------------------------------------------------------------------------
.text:00000850
.text:00000850 loc_850:                                ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+68j
.text:00000850                 push    offset _IID_ICompressWriteCoderProperties ; Buf2
.text:00000855                 mov     eax, [ebp+Buf1]
.text:00000858                 push    eax             ; Buf1
.text:00000859                 call    ___@8           ; __(x,x)
.text:0000085E                 test    eax, eax
.text:00000860                 jz      short loc_884
.text:00000862                 cmp     [ebp+this], 0
.text:00000866                 jz      short loc_873
.text:00000868                 mov     ecx, [ebp+this]
.text:0000086B                 add     ecx, 8
.text:0000086E                 mov     [ebp+var_C], ecx
.text:00000871                 jmp     short loc_87A
.text:00000873 ; ---------------------------------------------------------------------------
.text:00000873
.text:00000873 loc_873:                                ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+A2j
.text:00000873                 mov     [ebp+var_C], 0
.text:0000087A
.text:0000087A loc_87A:                                ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+ADj
.text:0000087A                 mov     edx, [ebp+arg_8]
.text:0000087D                 mov     eax, [ebp+var_C]
.text:00000880                 mov     [edx], eax
.text:00000882                 jmp     short loc_88B
.text:00000884 ; ---------------------------------------------------------------------------
.text:00000884
.text:00000884 loc_884:                                ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+9Cj
.text:00000884                 mov     eax, 80004002h
.text:00000889                 jmp     short loc_89C
.text:0000088B ; ---------------------------------------------------------------------------
.text:0000088B
.text:0000088B loc_88B:                                ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+56j
.text:0000088B                                         ; NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+8Aj ...
.text:0000088B                 mov     ecx, [ebp+this]
.text:0000088E                 mov     edx, [ecx+0Ch]
.text:00000891                 add     edx, 1
.text:00000894                 mov     eax, [ebp+this]
.text:00000897                 mov     [eax+0Ch], edx
.text:0000089A                 xor     eax, eax
.text:0000089C
.text:0000089C loc_89C:                                ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+C5j
.text:0000089C                 add     esp, 0Ch
.text:0000089F                 cmp     ebp, esp
.text:000008A1                 call    __RTC_CheckEsp
.text:000008A6                 mov     esp, ebp
.text:000008A8                 pop     ebp
.text:000008A9                 retn    0Ch
.text:000008A9 ?QueryInterface@CEncoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:000008A9
.text:000008A9 _text           ends
.text:000008A9
.text:000008AC ; ===========================================================================
.text:000008AC
.text:000008AC ; Segment type: Pure code
.text:000008AC ; Segment permissions: Read/Execute
.text:000008AC _text           segment para public 'CODE' use32
.text:000008AC                 assume cs:_text
.text:000008AC                 ;org 8ACh
.text:000008AC ; COMDAT (pick any)
.text:000008AC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000008AC
.text:000008AC ; =============== S U B R O U T I N E =======================================
.text:000008AC
.text:000008AC ; Attributes: bp-based frame
.text:000008AC
.text:000008AC ; unsigned __int32 __stdcall NCompress::NLzma2::CEncoder::AddRef(NCompress::NLzma2::CEncoder *this)
.text:000008AC                 public ?AddRef@CEncoder@NLzma2@NCompress@@UAGKXZ
.text:000008AC ?AddRef@CEncoder@NLzma2@NCompress@@UAGKXZ proc near
.text:000008AC                                         ; CODE XREF: [thunk]:NCompress::NLzma2::CEncoder::AddRef`adjustor{4}' (void)+5j
.text:000008AC                                         ; [thunk]:NCompress::NLzma2::CEncoder::AddRef`adjustor{8}' (void)+5j
.text:000008AC                                         ; DATA XREF: ...
.text:000008AC
.text:000008AC var_4           = dword ptr -4
.text:000008AC this            = dword ptr  8
.text:000008AC
.text:000008AC                 push    ebp
.text:000008AD                 mov     ebp, esp
.text:000008AF                 push    ecx
.text:000008B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008B7                 mov     eax, [ebp+this]
.text:000008BA                 mov     ecx, [eax+0Ch]
.text:000008BD                 add     ecx, 1
.text:000008C0                 mov     [ebp+var_4], ecx
.text:000008C3                 mov     edx, [ebp+this]
.text:000008C6                 mov     eax, [ebp+var_4]
.text:000008C9                 mov     [edx+0Ch], eax
.text:000008CC                 mov     eax, [ebp+var_4]
.text:000008CF                 mov     esp, ebp
.text:000008D1                 pop     ebp
.text:000008D2                 retn    4
.text:000008D2 ?AddRef@CEncoder@NLzma2@NCompress@@UAGKXZ endp
.text:000008D2
.text:000008D2 ; ---------------------------------------------------------------------------
.text:000008D5                 align 4
.text:000008D5 _text           ends
.text:000008D5
.text:000008D8 ; ===========================================================================
.text:000008D8
.text:000008D8 ; Segment type: Pure code
.text:000008D8 ; Segment permissions: Read/Execute
.text:000008D8 _text           segment para public 'CODE' use32
.text:000008D8                 assume cs:_text
.text:000008D8                 ;org 8D8h
.text:000008D8 ; COMDAT (pick any)
.text:000008D8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000008D8
.text:000008D8 ; =============== S U B R O U T I N E =======================================
.text:000008D8
.text:000008D8 ; Attributes: bp-based frame
.text:000008D8
.text:000008D8 ; unsigned __int32 __stdcall NCompress::NLzma2::CEncoder::Release(NCompress::NLzma2::CEncoder *this)
.text:000008D8                 public ?Release@CEncoder@NLzma2@NCompress@@UAGKXZ
.text:000008D8 ?Release@CEncoder@NLzma2@NCompress@@UAGKXZ proc near
.text:000008D8                                         ; CODE XREF: [thunk]:NCompress::NLzma2::CEncoder::Release`adjustor{4}' (void)+5j
.text:000008D8                                         ; [thunk]:NCompress::NLzma2::CEncoder::Release`adjustor{8}' (void)+5j
.text:000008D8                                         ; DATA XREF: ...
.text:000008D8
.text:000008D8 var_10          = dword ptr -10h
.text:000008D8 var_C           = dword ptr -0Ch
.text:000008D8 var_8           = dword ptr -8
.text:000008D8 var_4           = dword ptr -4
.text:000008D8 this            = dword ptr  8
.text:000008D8
.text:000008D8                 push    ebp
.text:000008D9                 mov     ebp, esp
.text:000008DB                 sub     esp, 10h
.text:000008DE                 push    esi
.text:000008DF                 mov     eax, 0CCCCCCCCh
.text:000008E4                 mov     [ebp+var_10], eax
.text:000008E7                 mov     [ebp+var_C], eax
.text:000008EA                 mov     [ebp+var_8], eax
.text:000008ED                 mov     [ebp+var_4], eax
.text:000008F0                 mov     eax, [ebp+this]
.text:000008F3                 mov     ecx, [eax+0Ch]
.text:000008F6                 sub     ecx, 1
.text:000008F9                 mov     [ebp+var_C], ecx
.text:000008FC                 mov     edx, [ebp+this]
.text:000008FF                 mov     eax, [ebp+var_C]
.text:00000902                 mov     [edx+0Ch], eax
.text:00000905                 cmp     [ebp+var_C], 0
.text:00000909                 jz      short loc_913
.text:0000090B                 mov     ecx, [ebp+this]
.text:0000090E                 mov     eax, [ecx+0Ch]
.text:00000911                 jmp     short loc_94B
.text:00000913 ; ---------------------------------------------------------------------------
.text:00000913
.text:00000913 loc_913:                                ; CODE XREF: NCompress::NLzma2::CEncoder::Release(void)+31j
.text:00000913                 mov     edx, [ebp+this]
.text:00000916                 mov     [ebp+var_8], edx
.text:00000919                 mov     eax, [ebp+var_8]
.text:0000091C                 mov     [ebp+var_4], eax
.text:0000091F                 cmp     [ebp+var_4], 0
.text:00000923                 jz      short loc_942
.text:00000925                 mov     esi, esp
.text:00000927                 push    1
.text:00000929                 mov     ecx, [ebp+var_4]
.text:0000092C                 mov     edx, [ecx]
.text:0000092E                 mov     ecx, [ebp+var_4]
.text:00000931                 mov     eax, [edx+10h]
.text:00000934                 call    eax
.text:00000936                 cmp     esi, esp
.text:00000938                 call    __RTC_CheckEsp
.text:0000093D                 mov     [ebp+var_10], eax
.text:00000940                 jmp     short loc_949
.text:00000942 ; ---------------------------------------------------------------------------
.text:00000942
.text:00000942 loc_942:                                ; CODE XREF: NCompress::NLzma2::CEncoder::Release(void)+4Bj
.text:00000942                 mov     [ebp+var_10], 0
.text:00000949
.text:00000949 loc_949:                                ; CODE XREF: NCompress::NLzma2::CEncoder::Release(void)+68j
.text:00000949                 xor     eax, eax
.text:0000094B
.text:0000094B loc_94B:                                ; CODE XREF: NCompress::NLzma2::CEncoder::Release(void)+39j
.text:0000094B                 pop     esi
.text:0000094C                 add     esp, 10h
.text:0000094F                 cmp     ebp, esp
.text:00000951                 call    __RTC_CheckEsp
.text:00000956                 mov     esp, ebp
.text:00000958                 pop     ebp
.text:00000959                 retn    4
.text:00000959 ?Release@CEncoder@NLzma2@NCompress@@UAGKXZ endp
.text:00000959
.text:00000959 _text           ends
.text:00000959
.text:0000095C ; ===========================================================================
.text:0000095C
.text:0000095C ; Segment type: Pure code
.text:0000095C ; Segment permissions: Read/Execute
.text:0000095C _text           segment para public 'CODE' use32
.text:0000095C                 assume cs:_text
.text:0000095C                 ;org 95Ch
.text:0000095C ; COMDAT (pick any)
.text:0000095C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:0000095C
.text:0000095C ; =============== S U B R O U T I N E =======================================
.text:0000095C
.text:0000095C ; Attributes: bp-based frame
.text:0000095C
.text:0000095C ; int __stdcall __(void *Buf1, void *Buf2)
.text:0000095C                 public ___@8
.text:0000095C ___@8           proc near               ; CODE XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:0000095C                                         ; NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+61p ...
.text:0000095C
.text:0000095C Buf1            = dword ptr  8
.text:0000095C Buf2            = dword ptr  0Ch
.text:0000095C
.text:0000095C                 push    ebp
.text:0000095D                 mov     ebp, esp
.text:0000095F                 mov     eax, [ebp+Buf2]
.text:00000962                 push    eax             ; Buf2
.text:00000963                 mov     ecx, [ebp+Buf1]
.text:00000966                 push    ecx             ; Buf1
.text:00000967                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:0000096C                 cmp     ebp, esp
.text:0000096E                 call    __RTC_CheckEsp
.text:00000973                 pop     ebp
.text:00000974                 retn    8
.text:00000974 ___@8           endp
.text:00000974
.text:00000974 ; ---------------------------------------------------------------------------
.text:00000977                 align 4
.text:00000977 _text           ends
.text:00000977
.text:00000978 ; ===========================================================================
.text:00000978
.text:00000978 ; Segment type: Pure code
.text:00000978 ; Segment permissions: Read/Execute
.text:00000978 _text           segment para public 'CODE' use32
.text:00000978                 assume cs:_text
.text:00000978                 ;org 978h
.text:00000978 ; COMDAT (pick any)
.text:00000978                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000978
.text:00000978 ; =============== S U B R O U T I N E =======================================
.text:00000978
.text:00000978 ; Attributes: bp-based frame
.text:00000978
.text:00000978 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000978                 public _IsEqualGUID@8
.text:00000978 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000978
.text:00000978 Buf1            = dword ptr  8
.text:00000978 Buf2            = dword ptr  0Ch
.text:00000978
.text:00000978                 push    ebp
.text:00000979                 mov     ebp, esp
.text:0000097B                 push    10h             ; Size
.text:0000097D                 mov     eax, [ebp+Buf2]
.text:00000980                 push    eax             ; Buf2
.text:00000981                 mov     ecx, [ebp+Buf1]
.text:00000984                 push    ecx             ; Buf1
.text:00000985                 call    _memcmp
.text:0000098A                 add     esp, 0Ch
.text:0000098D                 neg     eax
.text:0000098F                 sbb     eax, eax
.text:00000991                 add     eax, 1
.text:00000994                 cmp     ebp, esp
.text:00000996                 call    __RTC_CheckEsp
.text:0000099B                 pop     ebp
.text:0000099C                 retn    8
.text:0000099C _IsEqualGUID@8  endp
.text:0000099C
.text:0000099C ; ---------------------------------------------------------------------------
.text:0000099F                 align 10h
.text:0000099F _text           ends
.text:0000099F
.text:000009A0 ; ===========================================================================
.text:000009A0
.text:000009A0 ; Segment type: Pure code
.text:000009A0 ; Segment permissions: Read/Execute
.text:000009A0 _text           segment para public 'CODE' use32
.text:000009A0                 assume cs:_text
.text:000009A0                 ;org 9A0h
.text:000009A0 ; COMDAT (pick any)
.text:000009A0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000009A0
.text:000009A0 ; =============== S U B R O U T I N E =======================================
.text:000009A0
.text:000009A0 ; Attributes: bp-based frame
.text:000009A0
.text:000009A0 ; public: virtual void * __thiscall NCompress::NLzma2::CEncoder::`scalar deleting destructor'(unsigned int)
.text:000009A0                 public ??_GCEncoder@NLzma2@NCompress@@UAEPAXI@Z
.text:000009A0 ??_GCEncoder@NLzma2@NCompress@@UAEPAXI@Z proc near
.text:000009A0
.text:000009A0 var_4           = dword ptr -4
.text:000009A0 arg_0           = dword ptr  8
.text:000009A0
.text:000009A0                 push    ebp
.text:000009A1                 mov     ebp, esp
.text:000009A3                 push    ecx
.text:000009A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009AB                 mov     [ebp+var_4], ecx
.text:000009AE                 mov     ecx, [ebp+var_4] ; this
.text:000009B1                 call    ??1CEncoder@NLzma2@NCompress@@UAE@XZ ; NCompress::NLzma2::CEncoder::~CEncoder(void)
.text:000009B6                 mov     eax, [ebp+arg_0]
.text:000009B9                 and     eax, 1
.text:000009BC                 jz      short loc_9CA
.text:000009BE                 mov     ecx, [ebp+var_4]
.text:000009C1                 push    ecx             ; void *
.text:000009C2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000009C7                 add     esp, 4
.text:000009CA
.text:000009CA loc_9CA:                                ; CODE XREF: NCompress::NLzma2::CEncoder::`scalar deleting destructor'(uint)+1Cj
.text:000009CA                 mov     eax, [ebp+var_4]
.text:000009CD                 add     esp, 4
.text:000009D0                 cmp     ebp, esp
.text:000009D2                 call    __RTC_CheckEsp
.text:000009D7                 mov     esp, ebp
.text:000009D9                 pop     ebp
.text:000009DA                 retn    4
.text:000009DA ??_GCEncoder@NLzma2@NCompress@@UAEPAXI@Z endp
.text:000009DA
.text:000009DA ; ---------------------------------------------------------------------------
.text:000009DD                 align 10h
.text:000009DD _text           ends
.text:000009DD
.text:000009E0 ; ===========================================================================
.text:000009E0
.text:000009E0 ; Segment type: Pure code
.text:000009E0 ; Segment permissions: Read/Execute
.text:000009E0 _text           segment para public 'CODE' use32
.text:000009E0                 assume cs:_text
.text:000009E0                 ;org 9E0h
.text:000009E0 ; COMDAT (pick any)
.text:000009E0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000009E0
.text:000009E0 ; =============== S U B R O U T I N E =======================================
.text:000009E0
.text:000009E0 ; Attributes: bp-based frame
.text:000009E0
.text:000009E0 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:000009E0                 public ??0ICompressCoder@@QAE@XZ
.text:000009E0 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+1Ap
.text:000009E0
.text:000009E0 var_4           = dword ptr -4
.text:000009E0
.text:000009E0                 push    ebp
.text:000009E1                 mov     ebp, esp
.text:000009E3                 push    ecx
.text:000009E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009EB                 mov     [ebp+var_4], ecx
.text:000009EE                 mov     ecx, [ebp+var_4]
.text:000009F1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000009F6                 mov     eax, [ebp+var_4]
.text:000009F9                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:000009FF                 mov     eax, [ebp+var_4]
.text:00000A02                 add     esp, 4
.text:00000A05                 cmp     ebp, esp
.text:00000A07                 call    __RTC_CheckEsp
.text:00000A0C                 mov     esp, ebp
.text:00000A0E                 pop     ebp
.text:00000A0F                 retn
.text:00000A0F ??0ICompressCoder@@QAE@XZ endp
.text:00000A0F
.text:00000A0F _text           ends
.text:00000A0F
.rdata:00000A10 ; ===========================================================================
.rdata:00000A10
.rdata:00000A10 ; Segment type: Pure data
.rdata:00000A10 ; Segment permissions: Read
.rdata:00000A10 _rdata          segment dword public 'DATA' use32
.rdata:00000A10                 assume cs:_rdata
.rdata:00000A10                 ;org 0A10h
.rdata:00000A10 ; COMDAT (pick largest)
.rdata:00000A10                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00000A14                 public ??_7ICompressCoder@@6B@
.rdata:00000A14 ; const ICompressCoder::`vftable'
.rdata:00000A14 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00000A14                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00000A18                 dd offset __purecall
.rdata:00000A1C                 dd offset __purecall
.rdata:00000A20                 dd offset __purecall
.rdata:00000A20 _rdata          ends
.rdata:00000A20
.rdata$r:00000A24 ; ===========================================================================
.rdata$r:00000A24
.rdata$r:00000A24 ; Segment type: Pure data
.rdata$r:00000A24 ; Segment permissions: Read
.rdata$r:00000A24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A24                 assume cs:_rdata$r
.rdata$r:00000A24                 ;org 0A24h
.rdata$r:00000A24 ; COMDAT (pick any)
.rdata$r:00000A24                 public ??_R4ICompressCoder@@6B@
.rdata$r:00000A24 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00000A24 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00000A10o
.rdata$r:00000A25                 db    0
.rdata$r:00000A26                 db    0
.rdata$r:00000A27                 db    0
.rdata$r:00000A28                 db    0
.rdata$r:00000A29                 db    0
.rdata$r:00000A2A                 db    0
.rdata$r:00000A2B                 db    0
.rdata$r:00000A2C                 db    0
.rdata$r:00000A2D                 db    0
.rdata$r:00000A2E                 db    0
.rdata$r:00000A2F                 db    0
.rdata$r:00000A30                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000A34                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A34 _rdata$r        ends
.rdata$r:00000A34
.text:00000A38 ; ===========================================================================
.text:00000A38
.text:00000A38 ; Segment type: Pure code
.text:00000A38 ; Segment permissions: Read/Execute
.text:00000A38 _text           segment para public 'CODE' use32
.text:00000A38                 assume cs:_text
.text:00000A38                 ;org 0A38h
.text:00000A38 ; COMDAT (pick any)
.text:00000A38                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A38
.text:00000A38 ; =============== S U B R O U T I N E =======================================
.text:00000A38
.text:00000A38 ; Attributes: bp-based frame
.text:00000A38
.text:00000A38 ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:00000A38                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:00000A38 ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:00000A38                                         ; CODE XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+25p
.text:00000A38
.text:00000A38 var_4           = dword ptr -4
.text:00000A38
.text:00000A38                 push    ebp
.text:00000A39                 mov     ebp, esp
.text:00000A3B                 push    ecx
.text:00000A3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A43                 mov     [ebp+var_4], ecx
.text:00000A46                 mov     ecx, [ebp+var_4]
.text:00000A49                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000A4E                 mov     eax, [ebp+var_4]
.text:00000A51                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:00000A57                 mov     eax, [ebp+var_4]
.text:00000A5A                 add     esp, 4
.text:00000A5D                 cmp     ebp, esp
.text:00000A5F                 call    __RTC_CheckEsp
.text:00000A64                 mov     esp, ebp
.text:00000A66                 pop     ebp
.text:00000A67                 retn
.text:00000A67 ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:00000A67
.text:00000A67 _text           ends
.text:00000A67
.rdata:00000A68 ; ===========================================================================
.rdata:00000A68
.rdata:00000A68 ; Segment type: Pure data
.rdata:00000A68 ; Segment permissions: Read
.rdata:00000A68 _rdata          segment dword public 'DATA' use32
.rdata:00000A68                 assume cs:_rdata
.rdata:00000A68                 ;org 0A68h
.rdata:00000A68 ; COMDAT (pick largest)
.rdata:00000A68                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:00000A6C                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:00000A6C ; const ICompressSetCoderProperties::`vftable'
.rdata:00000A6C ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:00000A6C                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:00000A70                 dd offset __purecall
.rdata:00000A74                 dd offset __purecall
.rdata:00000A78                 dd offset __purecall
.rdata:00000A78 _rdata          ends
.rdata:00000A78
.rdata$r:00000A7C ; ===========================================================================
.rdata$r:00000A7C
.rdata$r:00000A7C ; Segment type: Pure data
.rdata$r:00000A7C ; Segment permissions: Read
.rdata$r:00000A7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A7C                 assume cs:_rdata$r
.rdata$r:00000A7C                 ;org 0A7Ch
.rdata$r:00000A7C ; COMDAT (pick any)
.rdata$r:00000A7C                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:00000A7C ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00000A7C ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:00000A7C                                         ; DATA XREF: .rdata:00000A68o
.rdata$r:00000A7D                 db    0
.rdata$r:00000A7E                 db    0
.rdata$r:00000A7F                 db    0
.rdata$r:00000A80                 db    0
.rdata$r:00000A81                 db    0
.rdata$r:00000A82                 db    0
.rdata$r:00000A83                 db    0
.rdata$r:00000A84                 db    0
.rdata$r:00000A85                 db    0
.rdata$r:00000A86                 db    0
.rdata$r:00000A87                 db    0
.rdata$r:00000A88                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000A8C                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A8C _rdata$r        ends
.rdata$r:00000A8C
.text:00000A90 ; ===========================================================================
.text:00000A90
.text:00000A90 ; Segment type: Pure code
.text:00000A90 ; Segment permissions: Read/Execute
.text:00000A90 _text           segment para public 'CODE' use32
.text:00000A90                 assume cs:_text
.text:00000A90                 ;org 0A90h
.text:00000A90 ; COMDAT (pick any)
.text:00000A90                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A90
.text:00000A90 ; =============== S U B R O U T I N E =======================================
.text:00000A90
.text:00000A90 ; Attributes: bp-based frame
.text:00000A90
.text:00000A90 ; _DWORD __thiscall ICompressWriteCoderProperties::ICompressWriteCoderProperties(ICompressWriteCoderProperties *__hidden this)
.text:00000A90                 public ??0ICompressWriteCoderProperties@@QAE@XZ
.text:00000A90 ??0ICompressWriteCoderProperties@@QAE@XZ proc near
.text:00000A90                                         ; CODE XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+30p
.text:00000A90
.text:00000A90 var_4           = dword ptr -4
.text:00000A90
.text:00000A90                 push    ebp
.text:00000A91                 mov     ebp, esp
.text:00000A93                 push    ecx
.text:00000A94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A9B                 mov     [ebp+var_4], ecx
.text:00000A9E                 mov     ecx, [ebp+var_4]
.text:00000AA1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000AA6                 mov     eax, [ebp+var_4]
.text:00000AA9                 mov     dword ptr [eax], offset ??_7ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`vftable'
.text:00000AAF                 mov     eax, [ebp+var_4]
.text:00000AB2                 add     esp, 4
.text:00000AB5                 cmp     ebp, esp
.text:00000AB7                 call    __RTC_CheckEsp
.text:00000ABC                 mov     esp, ebp
.text:00000ABE                 pop     ebp
.text:00000ABF                 retn
.text:00000ABF ??0ICompressWriteCoderProperties@@QAE@XZ endp
.text:00000ABF
.text:00000ABF _text           ends
.text:00000ABF
.rdata:00000AC0 ; ===========================================================================
.rdata:00000AC0
.rdata:00000AC0 ; Segment type: Pure data
.rdata:00000AC0 ; Segment permissions: Read
.rdata:00000AC0 _rdata          segment dword public 'DATA' use32
.rdata:00000AC0                 assume cs:_rdata
.rdata:00000AC0                 ;org 0AC0h
.rdata:00000AC0 ; COMDAT (pick largest)
.rdata:00000AC0                 dd offset ??_R4ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata:00000AC4                 public ??_7ICompressWriteCoderProperties@@6B@
.rdata:00000AC4 ; const ICompressWriteCoderProperties::`vftable'
.rdata:00000AC4 ??_7ICompressWriteCoderProperties@@6B@ dd offset __purecall
.rdata:00000AC4                                         ; DATA XREF: ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)+19o
.rdata:00000AC8                 dd offset __purecall
.rdata:00000ACC                 dd offset __purecall
.rdata:00000AD0                 dd offset __purecall
.rdata:00000AD0 _rdata          ends
.rdata:00000AD0
.rdata$r:00000AD4 ; ===========================================================================
.rdata$r:00000AD4
.rdata$r:00000AD4 ; Segment type: Pure data
.rdata$r:00000AD4 ; Segment permissions: Read
.rdata$r:00000AD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AD4                 assume cs:_rdata$r
.rdata$r:00000AD4                 ;org 0AD4h
.rdata$r:00000AD4 ; COMDAT (pick any)
.rdata$r:00000AD4                 public ??_R4ICompressWriteCoderProperties@@6B@
.rdata$r:00000AD4 ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00000AD4 ??_R4ICompressWriteCoderProperties@@6B@ db    0
.rdata$r:00000AD4                                         ; DATA XREF: .rdata:00000AC0o
.rdata$r:00000AD5                 db    0
.rdata$r:00000AD6                 db    0
.rdata$r:00000AD7                 db    0
.rdata$r:00000AD8                 db    0
.rdata$r:00000AD9                 db    0
.rdata$r:00000ADA                 db    0
.rdata$r:00000ADB                 db    0
.rdata$r:00000ADC                 db    0
.rdata$r:00000ADD                 db    0
.rdata$r:00000ADE                 db    0
.rdata$r:00000ADF                 db    0
.rdata$r:00000AE0                 dd offset ??_R0?AUICompressWriteCoderProperties@@@8 ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00000AE4                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000AE4 _rdata$r        ends
.rdata$r:00000AE4
.text:00000AE8 ; ===========================================================================
.text:00000AE8
.text:00000AE8 ; Segment type: Pure code
.text:00000AE8 ; Segment permissions: Read/Execute
.text:00000AE8 _text           segment para public 'CODE' use32
.text:00000AE8                 assume cs:_text
.text:00000AE8                 ;org 0AE8h
.text:00000AE8 ; COMDAT (pick any)
.text:00000AE8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000AE8
.text:00000AE8 ; =============== S U B R O U T I N E =======================================
.text:00000AE8
.text:00000AE8 ; Attributes: bp-based frame
.text:00000AE8
.text:00000AE8 ; public: __thiscall IUnknown::IUnknown(void)
.text:00000AE8                 public ??0IUnknown@@QAE@XZ
.text:00000AE8 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00000AE8                                         ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)+11p ...
.text:00000AE8
.text:00000AE8 var_4           = dword ptr -4
.text:00000AE8
.text:00000AE8                 push    ebp
.text:00000AE9                 mov     ebp, esp
.text:00000AEB                 push    ecx
.text:00000AEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AF3                 mov     [ebp+var_4], ecx
.text:00000AF6                 mov     eax, [ebp+var_4]
.text:00000AF9                 mov     esp, ebp
.text:00000AFB                 pop     ebp
.text:00000AFC                 retn
.text:00000AFC ??0IUnknown@@QAE@XZ endp
.text:00000AFC
.text:00000AFC ; ---------------------------------------------------------------------------
.text:00000AFD                 align 10h
.text:00000AFD _text           ends
.text:00000AFD
.text:00000B00 ; ===========================================================================
.text:00000B00
.text:00000B00 ; Segment type: Pure code
.text:00000B00 ; Segment permissions: Read/Execute
.text:00000B00 _text           segment para public 'CODE' use32
.text:00000B00                 assume cs:_text
.text:00000B00                 ;org 0B00h
.text:00000B00 ; COMDAT (pick any)
.text:00000B00                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B00
.text:00000B00 ; =============== S U B R O U T I N E =======================================
.text:00000B00
.text:00000B00
.text:00000B00 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CEncoder::Release`adjustor{4}' (void)
.text:00000B00                 public ?Release@CEncoder@NLzma2@NCompress@@W3AGKXZ
.text:00000B00 ?Release@CEncoder@NLzma2@NCompress@@W3AGKXZ proc near
.text:00000B00                                         ; DATA XREF: .rdata:00000434o
.text:00000B00
.text:00000B00 arg_0           = dword ptr  4
.text:00000B00
.text:00000B00                 sub     [esp+arg_0], 4
.text:00000B05                 jmp     ?Release@CEncoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CEncoder::Release(void)
.text:00000B05 ?Release@CEncoder@NLzma2@NCompress@@W3AGKXZ endp
.text:00000B05
.text:00000B05 ; ---------------------------------------------------------------------------
.text:00000B0A                 align 4
.text:00000B0A _text           ends
.text:00000B0A
.text:00000B0C ; ===========================================================================
.text:00000B0C
.text:00000B0C ; Segment type: Pure code
.text:00000B0C ; Segment permissions: Read/Execute
.text:00000B0C _text           segment para public 'CODE' use32
.text:00000B0C                 assume cs:_text
.text:00000B0C                 ;org 0B0Ch
.text:00000B0C ; COMDAT (pick any)
.text:00000B0C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B0C
.text:00000B0C ; =============== S U B R O U T I N E =======================================
.text:00000B0C
.text:00000B0C
.text:00000B0C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CEncoder::Release`adjustor{8}' (void)
.text:00000B0C                 public ?Release@CEncoder@NLzma2@NCompress@@W7AGKXZ
.text:00000B0C ?Release@CEncoder@NLzma2@NCompress@@W7AGKXZ proc near
.text:00000B0C                                         ; DATA XREF: .rdata:00000420o
.text:00000B0C
.text:00000B0C arg_0           = dword ptr  4
.text:00000B0C
.text:00000B0C                 sub     [esp+arg_0], 8
.text:00000B11                 jmp     ?Release@CEncoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CEncoder::Release(void)
.text:00000B11 ?Release@CEncoder@NLzma2@NCompress@@W7AGKXZ endp
.text:00000B11
.text:00000B11 ; ---------------------------------------------------------------------------
.text:00000B16                 align 4
.text:00000B16 _text           ends
.text:00000B16
.text:00000B18 ; ===========================================================================
.text:00000B18
.text:00000B18 ; Segment type: Pure code
.text:00000B18 ; Segment permissions: Read/Execute
.text:00000B18 _text           segment para public 'CODE' use32
.text:00000B18                 assume cs:_text
.text:00000B18                 ;org 0B18h
.text:00000B18 ; COMDAT (pick any)
.text:00000B18                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B18
.text:00000B18 ; =============== S U B R O U T I N E =======================================
.text:00000B18
.text:00000B18
.text:00000B18 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CEncoder::AddRef`adjustor{4}' (void)
.text:00000B18                 public ?AddRef@CEncoder@NLzma2@NCompress@@W3AGKXZ
.text:00000B18 ?AddRef@CEncoder@NLzma2@NCompress@@W3AGKXZ proc near
.text:00000B18                                         ; DATA XREF: .rdata:00000430o
.text:00000B18
.text:00000B18 arg_0           = dword ptr  4
.text:00000B18
.text:00000B18                 sub     [esp+arg_0], 4
.text:00000B1D                 jmp     ?AddRef@CEncoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CEncoder::AddRef(void)
.text:00000B1D ?AddRef@CEncoder@NLzma2@NCompress@@W3AGKXZ endp
.text:00000B1D
.text:00000B1D ; ---------------------------------------------------------------------------
.text:00000B22                 align 4
.text:00000B22 _text           ends
.text:00000B22
.text:00000B24 ; ===========================================================================
.text:00000B24
.text:00000B24 ; Segment type: Pure code
.text:00000B24 ; Segment permissions: Read/Execute
.text:00000B24 _text           segment para public 'CODE' use32
.text:00000B24                 assume cs:_text
.text:00000B24                 ;org 0B24h
.text:00000B24 ; COMDAT (pick any)
.text:00000B24                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B24
.text:00000B24 ; =============== S U B R O U T I N E =======================================
.text:00000B24
.text:00000B24
.text:00000B24 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma2::CEncoder::AddRef`adjustor{8}' (void)
.text:00000B24                 public ?AddRef@CEncoder@NLzma2@NCompress@@W7AGKXZ
.text:00000B24 ?AddRef@CEncoder@NLzma2@NCompress@@W7AGKXZ proc near
.text:00000B24                                         ; DATA XREF: .rdata:0000041Co
.text:00000B24
.text:00000B24 arg_0           = dword ptr  4
.text:00000B24
.text:00000B24                 sub     [esp+arg_0], 8
.text:00000B29                 jmp     ?AddRef@CEncoder@NLzma2@NCompress@@UAGKXZ ; NCompress::NLzma2::CEncoder::AddRef(void)
.text:00000B29 ?AddRef@CEncoder@NLzma2@NCompress@@W7AGKXZ endp
.text:00000B29
.text:00000B29 ; ---------------------------------------------------------------------------
.text:00000B2E                 align 10h
.text:00000B2E _text           ends
.text:00000B2E
.text:00000B30 ; ===========================================================================
.text:00000B30
.text:00000B30 ; Segment type: Pure code
.text:00000B30 ; Segment permissions: Read/Execute
.text:00000B30 _text           segment para public 'CODE' use32
.text:00000B30                 assume cs:_text
.text:00000B30                 ;org 0B30h
.text:00000B30 ; COMDAT (pick any)
.text:00000B30                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B30
.text:00000B30 ; =============== S U B R O U T I N E =======================================
.text:00000B30
.text:00000B30
.text:00000B30 ; [thunk]:public: virtual long __stdcall NCompress::NLzma2::CEncoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00000B30                 public ?QueryInterface@CEncoder@NLzma2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00000B30 ?QueryInterface@CEncoder@NLzma2@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00000B30                                         ; DATA XREF: .rdata:const NCompress::NLzma2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00000B30
.text:00000B30 arg_0           = dword ptr  4
.text:00000B30
.text:00000B30                 sub     [esp+arg_0], 4
.text:00000B35                 jmp     ?QueryInterface@CEncoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00000B35 ?QueryInterface@CEncoder@NLzma2@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00000B35
.text:00000B35 ; ---------------------------------------------------------------------------
.text:00000B3A                 align 4
.text:00000B3A _text           ends
.text:00000B3A
.text:00000B3C ; ===========================================================================
.text:00000B3C
.text:00000B3C ; Segment type: Pure code
.text:00000B3C ; Segment permissions: Read/Execute
.text:00000B3C _text           segment para public 'CODE' use32
.text:00000B3C                 assume cs:_text
.text:00000B3C                 ;org 0B3Ch
.text:00000B3C ; COMDAT (pick any)
.text:00000B3C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B3C
.text:00000B3C ; =============== S U B R O U T I N E =======================================
.text:00000B3C
.text:00000B3C
.text:00000B3C ; [thunk]:public: virtual long __stdcall NCompress::NLzma2::CEncoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00000B3C                 public ?QueryInterface@CEncoder@NLzma2@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00000B3C ?QueryInterface@CEncoder@NLzma2@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00000B3C                                         ; DATA XREF: .rdata:const NCompress::NLzma2::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}o
.text:00000B3C
.text:00000B3C arg_0           = dword ptr  4
.text:00000B3C
.text:00000B3C                 sub     [esp+arg_0], 8
.text:00000B41                 jmp     ?QueryInterface@CEncoder@NLzma2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00000B41 ?QueryInterface@CEncoder@NLzma2@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00000B41
.text:00000B41 _text           ends
.text:00000B41
UNDEF:00000B50 ; ===========================================================================
UNDEF:00000B50
UNDEF:00000B50 ; Segment type: Externs
UNDEF:00000B50 ; UNDEF
UNDEF:00000B50 ; __stdcall Lzma2Enc_Create(x, x)
UNDEF:00000B50                 extrn _Lzma2Enc_Create@8:near
UNDEF:00000B50                                         ; CODE XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+71p
UNDEF:00000B54                 extrn _g_Alloc:near     ; DATA XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+6Co
UNDEF:00000B58                 extrn _g_BigAlloc:near  ; DATA XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+67o
UNDEF:00000B5C                 extrn __RTC_CheckEsp:near
UNDEF:00000B5C                                         ; CODE XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+A2p
UNDEF:00000B5C                                         ; NCompress::NLzma2::CEncoder::~CEncoder(void)+45p ...
UNDEF:00000B60                 extrn __RTC_Shutdown:near
UNDEF:00000B60                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000B64                 extrn __RTC_InitBase:near
UNDEF:00000B64                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000B68 ; __stdcall _CxxThrowException(x, x)
UNDEF:00000B68                 extrn __CxxThrowException@8:near
UNDEF:00000B68                                         ; CODE XREF: NCompress::NLzma2::CEncoder::CEncoder(void)+95p
UNDEF:00000B6C ; const type_info::`vftable'
UNDEF:00000B6C                 extrn ??_7type_info@@6B@:near
UNDEF:00000B6C                                         ; DATA XREF: .data:NCompress::NLzma2::CEncoder `RTTI Type Descriptor'o
UNDEF:00000B6C                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00000B70 ; public: virtual void * __thiscall NCompress::NLzma2::CEncoder::`scalar deleting destructor'(unsigned int)
UNDEF:00000B70                 extrn ??_GCEncoder@NLzma2@NCompress@@UAEPAXI@Z_0:near
UNDEF:00000B74 ; public: virtual void * __thiscall NCompress::NLzma2::CEncoder::`vector deleting destructor'(unsigned int)
UNDEF:00000B74                 extrn ??_ECEncoder@NLzma2@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00000B74                                         ; DATA XREF: .rdata:00000450o
UNDEF:00000B78                 extrn _IID_ICompressWriteCoderProperties:near
UNDEF:00000B78                                         ; DATA XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *):loc_850o
UNDEF:00000B7C                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:00000B7C                                         ; DATA XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *):loc_81Co
UNDEF:00000B80 ; const IID IID_IUnknown
UNDEF:00000B80                 extrn _IID_IUnknown:near
UNDEF:00000B80                                         ; DATA XREF: NCompress::NLzma2::CEncoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00000B84 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000B84                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00000B88 ; void __cdecl operator delete(void *)
UNDEF:00000B88                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NLzma2::CEncoder::`scalar deleting destructor'(uint)+22p
UNDEF:00000B8C                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00000B8C                                         ; .rdata:00000A18o ...
UNDEF:00000B90 ; __stdcall Lzma2Enc_Destroy(x)
UNDEF:00000B90                 extrn _Lzma2Enc_Destroy@4:near
UNDEF:00000B90                                         ; CODE XREF: NCompress::NLzma2::CEncoder::~CEncoder(void)+3Bp
UNDEF:00000B94 ; __int32 NCompress::NLzma::SetLzmaProp(NCompress::NLzma *__hidden this, unsigned __int32, const struct tagPROPVARIANT *, struct _CLzmaEncProps *)
UNDEF:00000B94                 extrn ?SetLzmaProp@NLzma@NCompress@@YGJKABUtagPROPVARIANT@@AAU_CLzmaEncProps@@@Z:near
UNDEF:00000B94                                         ; CODE XREF: NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)+74p
UNDEF:00000B98 ; __int32 __stdcall SResToHRESULT(int)
UNDEF:00000B98                 extrn ?SResToHRESULT@@YGJH@Z:near
UNDEF:00000B98                                         ; CODE XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+81p
UNDEF:00000B98                                         ; NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+95p
UNDEF:00000B9C ; __stdcall Lzma2Enc_SetProps(x, x)
UNDEF:00000B9C                 extrn _Lzma2Enc_SetProps@8:near
UNDEF:00000B9C                                         ; CODE XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+7Bp
UNDEF:00000BA0 ; __stdcall Lzma2EncProps_Init(x)
UNDEF:00000BA0                 extrn _Lzma2EncProps_Init@4:near
UNDEF:00000BA0                                         ; CODE XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+24p
UNDEF:00000BA4                 extrn ___security_cookie:near
UNDEF:00000BA4                                         ; DATA XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+16r
UNDEF:00000BA8 ; __fastcall __security_check_cookie(x)
UNDEF:00000BA8                 extrn @__security_check_cookie@4:near
UNDEF:00000BA8                                         ; CODE XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+9Dp
UNDEF:00000BAC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000BAC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000BAC                                         ; CODE XREF: NCompress::NLzma2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+90p
UNDEF:00000BAC                                         ; NCompress::NLzma2::CEncoder::WriteCoderProperties(ISequentialOutStream *)+43p ...
UNDEF:00000BB0 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00000BB0                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00000BB0                                         ; CODE XREF: NCompress::NLzma2::CEncoder::WriteCoderProperties(ISequentialOutStream *)+34p
UNDEF:00000BB4 ; __stdcall Lzma2Enc_WriteProperties(x)
UNDEF:00000BB4                 extrn _Lzma2Enc_WriteProperties@4:near
UNDEF:00000BB4                                         ; CODE XREF: NCompress::NLzma2::CEncoder::WriteCoderProperties(ISequentialOutStream *)+22p
UNDEF:00000BB8 ; __stdcall Lzma2Enc_Encode(x, x, x, x)
UNDEF:00000BB8                 extrn _Lzma2Enc_Encode@16:near
UNDEF:00000BB8                                         ; CODE XREF: NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+56p
UNDEF:00000BBC ; _DWORD __thiscall CCompressProgressWrap::CCompressProgressWrap(CCompressProgressWrap *__hidden this, struct ICompressProgressInfo *)
UNDEF:00000BBC                 extrn ??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z:near
UNDEF:00000BBC                                         ; CODE XREF: NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+35p
UNDEF:00000BC0 ; _DWORD __thiscall CSeqOutStreamWrap::CSeqOutStreamWrap(CSeqOutStreamWrap *__hidden this, struct ISequentialOutStream *)
UNDEF:00000BC0                 extrn ??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z:near
UNDEF:00000BC0                                         ; CODE XREF: NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+29p
UNDEF:00000BC4 ; _DWORD __thiscall CSeqInStreamWrap::CSeqInStreamWrap(CSeqInStreamWrap *__hidden this, struct ISequentialInStream *)
UNDEF:00000BC4                 extrn ??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z:near
UNDEF:00000BC4                                         ; CODE XREF: NCompress::NLzma2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1Dp
UNDEF:00000BC4
UNDEF:00000BC4