.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 2B9022D5DD15D23BED215567B93E4DE5
.text:00000000 ; Input CRC32 : 6591C1BA
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zCrc.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __fastcall CrcUpdate(x, x, x)
.text:00000000                 public @CrcUpdate@12
.text:00000000 @CrcUpdate@12   proc near
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 push    esi
.text:00000007                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000015                 mov     [ebp+var_8], edx
.text:00000018                 mov     [ebp+var_4], ecx
.text:0000001B                 mov     esi, esp
.text:0000001D                 push    offset _g_CrcTable
.text:00000022                 mov     eax, [ebp+arg_0]
.text:00000025                 push    eax
.text:00000026                 mov     edx, [ebp+var_8]
.text:00000029                 mov     ecx, [ebp+var_4]
.text:0000002C                 call    dword ptr ds:_g_CrcUpdate
.text:00000032                 cmp     esi, esp
.text:00000034                 call    __RTC_CheckEsp
.text:00000039                 pop     esi
.text:0000003A                 add     esp, 8
.text:0000003D                 cmp     ebp, esp
.text:0000003F                 call    __RTC_CheckEsp
.text:00000044                 mov     esp, ebp
.text:00000046                 pop     ebp
.text:00000047                 retn    4
.text:00000047 @CrcUpdate@12   endp
.text:00000047
.text:00000047 ; ---------------------------------------------------------------------------
.text:0000004A                 align 10h
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; __fastcall CrcCalc(x, x)
.text:00000050                 public @CrcCalc@8
.text:00000050 @CrcCalc@8      proc near
.text:00000050
.text:00000050 var_8           = dword ptr -8
.text:00000050 var_4           = dword ptr -4
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 sub     esp, 8
.text:00000056                 push    esi
.text:00000057                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000005E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000065                 mov     [ebp+var_8], edx
.text:00000068                 mov     [ebp+var_4], ecx
.text:0000006B                 mov     esi, esp
.text:0000006D                 push    offset _g_CrcTable
.text:00000072                 mov     eax, [ebp+var_8]
.text:00000075                 push    eax
.text:00000076                 mov     edx, [ebp+var_4]
.text:00000079                 or      ecx, 0FFFFFFFFh
.text:0000007C                 call    dword ptr ds:_g_CrcUpdate
.text:00000082                 cmp     esi, esp
.text:00000084                 call    __RTC_CheckEsp
.text:00000089                 xor     eax, 0FFFFFFFFh
.text:0000008C                 pop     esi
.text:0000008D                 add     esp, 8
.text:00000090                 cmp     ebp, esp
.text:00000092                 call    __RTC_CheckEsp
.text:00000097                 mov     esp, ebp
.text:00000099                 pop     ebp
.text:0000009A                 retn
.text:0000009A @CrcCalc@8      endp
.text:0000009A
.text:0000009A ; ---------------------------------------------------------------------------
.text:0000009B                 align 10h
.text:000000A0
.text:000000A0 ; =============== S U B R O U T I N E =======================================
.text:000000A0
.text:000000A0 ; Attributes: bp-based frame
.text:000000A0
.text:000000A0 ; __fastcall CrcUpdateT1(x, x, x, x)
.text:000000A0                 public @CrcUpdateT1@16
.text:000000A0 @CrcUpdateT1@16 proc near
.text:000000A0
.text:000000A0 var_10          = dword ptr -10h
.text:000000A0 var_C           = dword ptr -0Ch
.text:000000A0 var_8           = dword ptr -8
.text:000000A0 var_4           = dword ptr -4
.text:000000A0 arg_0           = dword ptr  8
.text:000000A0 arg_4           = dword ptr  0Ch
.text:000000A0
.text:000000A0                 push    ebp
.text:000000A1                 mov     ebp, esp
.text:000000A3                 sub     esp, 10h
.text:000000A6                 mov     eax, 0CCCCCCCCh
.text:000000AB                 mov     [ebp+var_10], eax
.text:000000AE                 mov     [ebp+var_C], eax
.text:000000B1                 mov     [ebp+var_8], eax
.text:000000B4                 mov     [ebp+var_4], eax
.text:000000B7                 mov     [ebp+var_8], edx
.text:000000BA                 mov     [ebp+var_4], ecx
.text:000000BD                 mov     eax, [ebp+var_8]
.text:000000C0                 mov     [ebp+var_C], eax
.text:000000C3                 mov     ecx, [ebp+var_C]
.text:000000C6                 add     ecx, [ebp+arg_0]
.text:000000C9                 mov     [ebp+var_10], ecx
.text:000000CC                 jmp     short loc_D7
.text:000000CE ; ---------------------------------------------------------------------------
.text:000000CE
.text:000000CE loc_CE:                                 ; CODE XREF: CrcUpdateT1(x,x,x,x)+5Dj
.text:000000CE                 mov     edx, [ebp+var_C]
.text:000000D1                 add     edx, 1
.text:000000D4                 mov     [ebp+var_C], edx
.text:000000D7
.text:000000D7 loc_D7:                                 ; CODE XREF: CrcUpdateT1(x,x,x,x)+2Cj
.text:000000D7                 mov     eax, [ebp+var_C]
.text:000000DA                 cmp     eax, [ebp+var_10]
.text:000000DD                 jz      short loc_FF
.text:000000DF                 mov     ecx, [ebp+var_C]
.text:000000E2                 movzx   edx, byte ptr [ecx]
.text:000000E5                 xor     edx, [ebp+var_4]
.text:000000E8                 and     edx, 0FFh
.text:000000EE                 mov     eax, [ebp+var_4]
.text:000000F1                 shr     eax, 8
.text:000000F4                 mov     ecx, [ebp+arg_4]
.text:000000F7                 xor     eax, [ecx+edx*4]
.text:000000FA                 mov     [ebp+var_4], eax
.text:000000FD                 jmp     short loc_CE
.text:000000FF ; ---------------------------------------------------------------------------
.text:000000FF
.text:000000FF loc_FF:                                 ; CODE XREF: CrcUpdateT1(x,x,x,x)+3Dj
.text:000000FF                 mov     eax, [ebp+var_4]
.text:00000102                 mov     esp, ebp
.text:00000104                 pop     ebp
.text:00000105                 retn    8
.text:00000105 @CrcUpdateT1@16 endp
.text:00000105
.text:00000105 ; ---------------------------------------------------------------------------
.text:00000108                 align 10h
.text:00000110
.text:00000110 ; =============== S U B R O U T I N E =======================================
.text:00000110
.text:00000110 ; Attributes: bp-based frame
.text:00000110
.text:00000110 ; _DWORD __cdecl CrcGenerateTable()
.text:00000110                 public @CrcGenerateTable@0
.text:00000110 @CrcGenerateTable@0 proc near
.text:00000110
.text:00000110 var_10          = dword ptr -10h
.text:00000110 var_C           = dword ptr -0Ch
.text:00000110 var_8           = dword ptr -8
.text:00000110 var_4           = dword ptr -4
.text:00000110
.text:00000110                 push    ebp
.text:00000111                 mov     ebp, esp
.text:00000113                 sub     esp, 10h
.text:00000116                 mov     eax, 0CCCCCCCCh
.text:0000011B                 mov     [ebp+var_10], eax
.text:0000011E                 mov     [ebp+var_C], eax
.text:00000121                 mov     [ebp+var_8], eax
.text:00000124                 mov     [ebp+var_4], eax
.text:00000127                 mov     [ebp+var_4], 0
.text:0000012E                 jmp     short loc_139
.text:00000130 ; ---------------------------------------------------------------------------
.text:00000130
.text:00000130 loc_130:                                ; CODE XREF: CrcGenerateTable()+7Aj
.text:00000130                 mov     eax, [ebp+var_4]
.text:00000133                 add     eax, 1
.text:00000136                 mov     [ebp+var_4], eax
.text:00000139
.text:00000139 loc_139:                                ; CODE XREF: CrcGenerateTable()+1Ej
.text:00000139                 cmp     [ebp+var_4], 100h
.text:00000140                 jnb     short loc_18C
.text:00000142                 mov     ecx, [ebp+var_4]
.text:00000145                 mov     [ebp+var_8], ecx
.text:00000148                 mov     [ebp+var_C], 0
.text:0000014F                 jmp     short loc_15A
.text:00000151 ; ---------------------------------------------------------------------------
.text:00000151
.text:00000151 loc_151:                                ; CODE XREF: CrcGenerateTable()+6Bj
.text:00000151                 mov     edx, [ebp+var_C]
.text:00000154                 add     edx, 1
.text:00000157                 mov     [ebp+var_C], edx
.text:0000015A
.text:0000015A loc_15A:                                ; CODE XREF: CrcGenerateTable()+3Fj
.text:0000015A                 cmp     [ebp+var_C], 8
.text:0000015E                 jnb     short loc_17D
.text:00000160                 mov     eax, [ebp+var_8]
.text:00000163                 shr     eax, 1
.text:00000165                 mov     ecx, [ebp+var_8]
.text:00000168                 and     ecx, 1
.text:0000016B                 sub     ecx, 1
.text:0000016E                 not     ecx
.text:00000170                 and     ecx, 0EDB88320h
.text:00000176                 xor     eax, ecx
.text:00000178                 mov     [ebp+var_8], eax
.text:0000017B                 jmp     short loc_151
.text:0000017D ; ---------------------------------------------------------------------------
.text:0000017D
.text:0000017D loc_17D:                                ; CODE XREF: CrcGenerateTable()+4Ej
.text:0000017D                 mov     edx, [ebp+var_4]
.text:00000180                 mov     eax, [ebp+var_8]
.text:00000183                 mov     dword ptr ds:_g_CrcTable[edx*4], eax
.text:0000018A                 jmp     short loc_130
.text:0000018C ; ---------------------------------------------------------------------------
.text:0000018C
.text:0000018C loc_18C:                                ; CODE XREF: CrcGenerateTable()+30j
.text:0000018C                 jmp     short loc_197
.text:0000018E ; ---------------------------------------------------------------------------
.text:0000018E
.text:0000018E loc_18E:                                ; CODE XREF: CrcGenerateTable()+BDj
.text:0000018E                 mov     ecx, [ebp+var_4]
.text:00000191                 add     ecx, 1
.text:00000194                 mov     [ebp+var_4], ecx
.text:00000197
.text:00000197 loc_197:                                ; CODE XREF: CrcGenerateTable():loc_18Cj
.text:00000197                 cmp     [ebp+var_4], 800h
.text:0000019E                 jnb     short loc_1CF
.text:000001A0                 mov     edx, [ebp+var_4]
.text:000001A3                 mov     eax, dword ptr (_g_CrcTable-400h)[edx*4]
.text:000001AA                 mov     [ebp+var_10], eax
.text:000001AD                 mov     ecx, [ebp+var_10]
.text:000001B0                 and     ecx, 0FFh
.text:000001B6                 mov     edx, [ebp+var_10]
.text:000001B9                 shr     edx, 8
.text:000001BC                 xor     edx, dword ptr ds:_g_CrcTable[ecx*4]
.text:000001C3                 mov     eax, [ebp+var_4]
.text:000001C6                 mov     dword ptr ds:_g_CrcTable[eax*4], edx
.text:000001CD                 jmp     short loc_18E
.text:000001CF ; ---------------------------------------------------------------------------
.text:000001CF
.text:000001CF loc_1CF:                                ; CODE XREF: CrcGenerateTable()+8Ej
.text:000001CF                 mov     dword ptr ds:_g_CrcUpdateT4, offset @CrcUpdateT4@16 ; CrcUpdateT4(x,x,x,x)
.text:000001D9                 mov     dword ptr ds:_g_CrcUpdate, offset @CrcUpdateT4@16 ; CrcUpdateT4(x,x,x,x)
.text:000001E3                 mov     dword ptr ds:_g_CrcUpdateT8, offset @CrcUpdateT8@16 ; CrcUpdateT8(x,x,x,x)
.text:000001ED                 call    _CPU_Is_InOrder@0 ; CPU_Is_InOrder()
.text:000001F2                 test    eax, eax
.text:000001F4                 jnz     short loc_200
.text:000001F6                 mov     dword ptr ds:_g_CrcUpdate, offset @CrcUpdateT8@16 ; CrcUpdateT8(x,x,x,x)
.text:00000200
.text:00000200 loc_200:                                ; CODE XREF: CrcGenerateTable()+E4j
.text:00000200                 add     esp, 10h
.text:00000203                 cmp     ebp, esp
.text:00000205                 call    __RTC_CheckEsp
.text:0000020A                 mov     esp, ebp
.text:0000020C                 pop     ebp
.text:0000020D                 retn
.text:0000020D @CrcGenerateTable@0 endp
.text:0000020D
.text:0000020D ; ---------------------------------------------------------------------------
.text:0000020E                 align 10h
.text:0000020E _text           ends
.text:0000020E
.rtc$TMZ:00000210 ; ===========================================================================
.rtc$TMZ:00000210
.rtc$TMZ:00000210 ; Segment type: Pure data
.rtc$TMZ:00000210 ; Segment permissions: Read
.rtc$TMZ:00000210 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000210                 assume cs:_rtc$TMZ
.rtc$TMZ:00000210                 ;org 210h
.rtc$TMZ:00000210 ; COMDAT (pick any)
.rtc$TMZ:00000210 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000210 _rtc$TMZ        ends
.rtc$TMZ:00000210
.rtc$IMZ:00000214 ; ===========================================================================
.rtc$IMZ:00000214
.rtc$IMZ:00000214 ; Segment type: Pure data
.rtc$IMZ:00000214 ; Segment permissions: Read
.rtc$IMZ:00000214 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000214                 assume cs:_rtc$IMZ
.rtc$IMZ:00000214                 ;org 214h
.rtc$IMZ:00000214 ; COMDAT (pick any)
.rtc$IMZ:00000214 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000214 _rtc$IMZ        ends
.rtc$IMZ:00000214
UNDEF:00000220 ; ===========================================================================
UNDEF:00000220
UNDEF:00000220 ; Segment type: Externs
UNDEF:00000220 ; UNDEF
UNDEF:00000220                 extrn _g_CrcUpdate:near ; CODE XREF: CrcUpdate(x,x,x)+2Cp
UNDEF:00000220                                         ; CrcCalc(x,x)+2Cp
UNDEF:00000220                                         ; DATA XREF: ...
UNDEF:00000224                 extrn _g_CrcTable:near  ; DATA XREF: CrcUpdate(x,x,x)+1Do
UNDEF:00000224                                         ; CrcCalc(x,x)+1Do ...
UNDEF:00000228                 extrn _g_CrcUpdateT4:near
UNDEF:00000228                                         ; DATA XREF: CrcGenerateTable():loc_1CFw
UNDEF:0000022C                 extrn _g_CrcUpdateT8:near ; DATA XREF: CrcGenerateTable()+D3w
UNDEF:00000230                 extrn __RTC_CheckEsp:near ; CODE XREF: CrcUpdate(x,x,x)+34p
UNDEF:00000230                                         ; CrcUpdate(x,x,x)+3Fp ...
UNDEF:00000234                 extrn __RTC_Shutdown:near
UNDEF:00000234                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000238                 extrn __RTC_InitBase:near
UNDEF:00000238                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000023C ; _DWORD __stdcall CPU_Is_InOrder()
UNDEF:0000023C                 extrn _CPU_Is_InOrder@0:near
UNDEF:0000023C                                         ; CODE XREF: CrcGenerateTable()+DDp
UNDEF:00000240 ; __fastcall CrcUpdateT8(x, x, x, x)
UNDEF:00000240                 extrn @CrcUpdateT8@16:near
UNDEF:00000240                                         ; DATA XREF: CrcGenerateTable()+D3o
UNDEF:00000240                                         ; CrcGenerateTable()+E6o
UNDEF:00000244 ; __fastcall CrcUpdateT4(x, x, x, x)
UNDEF:00000244                 extrn @CrcUpdateT4@16:near
UNDEF:00000244                                         ; DATA XREF: CrcGenerateTable():loc_1CFo
UNDEF:00000244                                         ; CrcGenerateTable()+C9o
UNDEF:00000244
UNDEF:00000244
UNDEF:00000244                 end