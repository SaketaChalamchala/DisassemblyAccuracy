.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 13914AF0C55502742CABC332F3E8E7D9
.text:00000000 ; Input CRC32 : 95AA807B
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\XzIn.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall Xz_ReadHeader(x, x)
.text:00000000                 public _Xz_ReadHeader@8
.text:00000000 _Xz_ReadHeader@8 proc near              ; CODE XREF: Xz_ReadBackward(x,x,x,x)+430p
.text:00000000
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 Buf1            = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 1Ch
.text:00000006                 mov     eax, 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_1C], eax
.text:0000000E                 mov     [ebp+var_18], eax
.text:00000011                 mov     [ebp+Buf1], eax
.text:00000014                 mov     [ebp+var_10], eax
.text:00000017                 mov     [ebp+var_C], eax
.text:0000001A                 mov     [ebp+var_8], eax
.text:0000001D                 mov     [ebp+var_4], eax
.text:00000020                 mov     eax, dword ptr ds:___security_cookie
.text:00000025                 xor     eax, ebp
.text:00000027                 mov     [ebp+var_4], eax
.text:0000002A                 push    11h
.text:0000002C                 push    0Ch
.text:0000002E                 lea     eax, [ebp+Buf1]
.text:00000031                 push    eax
.text:00000032                 mov     ecx, [ebp+arg_4]
.text:00000035                 push    ecx
.text:00000036                 call    _SeqInStream_Read2@16 ; SeqInStream_Read2(x,x,x,x)
.text:0000003B                 mov     [ebp+var_1C], eax
.text:0000003E                 cmp     [ebp+var_1C], 0
.text:00000042                 jz      short loc_49
.text:00000044                 mov     eax, [ebp+var_1C]
.text:00000047                 jmp     short loc_74
.text:00000049 ; ---------------------------------------------------------------------------
.text:00000049
.text:00000049 loc_49:                                 ; CODE XREF: Xz_ReadHeader(x,x)+42j
.text:00000049                 push    6               ; Size
.text:0000004B                 push    offset _XZ_SIG  ; Buf2
.text:00000050                 lea     edx, [ebp+Buf1]
.text:00000053                 push    edx             ; Buf1
.text:00000054                 call    _memcmp
.text:00000059                 add     esp, 0Ch
.text:0000005C                 test    eax, eax
.text:0000005E                 jz      short loc_67
.text:00000060                 mov     eax, 11h
.text:00000065                 jmp     short loc_74
.text:00000067 ; ---------------------------------------------------------------------------
.text:00000067
.text:00000067 loc_67:                                 ; CODE XREF: Xz_ReadHeader(x,x)+5Ej
.text:00000067                 lea     eax, [ebp+Buf1]
.text:0000006A                 push    eax
.text:0000006B                 mov     ecx, [ebp+arg_0]
.text:0000006E                 push    ecx
.text:0000006F                 call    _Xz_ParseHeader@8 ; Xz_ParseHeader(x,x)
.text:00000074
.text:00000074 loc_74:                                 ; CODE XREF: Xz_ReadHeader(x,x)+47j
.text:00000074                                         ; Xz_ReadHeader(x,x)+65j
.text:00000074                 push    edx
.text:00000075                 mov     ecx, ebp
.text:00000077                 push    eax
.text:00000078                 lea     edx, $LN7
.text:0000007E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000083                 pop     eax
.text:00000084                 pop     edx
.text:00000085                 mov     ecx, [ebp+var_4]
.text:00000088                 xor     ecx, ebp
.text:0000008A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000008F                 add     esp, 1Ch
.text:00000092                 cmp     ebp, esp
.text:00000094                 call    __RTC_CheckEsp
.text:00000099                 mov     esp, ebp
.text:0000009B                 pop     ebp
.text:0000009C                 retn    8
.text:0000009C _Xz_ReadHeader@8 endp
.text:0000009C
.text:0000009C ; ---------------------------------------------------------------------------
.text:0000009F                 align 10h
.text:000000A0 $LN7            dd 1                    ; DATA XREF: Xz_ReadHeader(x,x)+78o
.text:000000A4                 dd offset $LN6
.text:000000A8 $LN6            dd 0FFFFFFECh, 0Ch      ; DATA XREF: .text:000000A4o
.text:000000B0                 dd offset $LN5
.text:000000B4 $LN5            dd 676973h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000000B0o
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; __stdcall XzBlock_ReadHeader(x, x, x, x)
.text:000000C0                 public _XzBlock_ReadHeader@16
.text:000000C0 _XzBlock_ReadHeader@16 proc near
.text:000000C0
.text:000000C0 var_418         = dword ptr -418h
.text:000000C0 var_414         = dword ptr -414h
.text:000000C0 var_410         = dword ptr -410h
.text:000000C0 var_408         = byte ptr -408h
.text:000000C0 var_407         = byte ptr -407h
.text:000000C0 var_4           = dword ptr -4
.text:000000C0 arg_0           = dword ptr  8
.text:000000C0 arg_4           = dword ptr  0Ch
.text:000000C0 arg_8           = dword ptr  10h
.text:000000C0 arg_C           = dword ptr  14h
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 sub     esp, 418h
.text:000000C9                 push    edi
.text:000000CA                 lea     edi, [ebp+var_418]
.text:000000D0                 mov     ecx, 106h
.text:000000D5                 mov     eax, 0CCCCCCCCh
.text:000000DA                 rep stosd
.text:000000DC                 mov     eax, dword ptr ds:___security_cookie
.text:000000E1                 xor     eax, ebp
.text:000000E3                 mov     [ebp+var_4], eax
.text:000000E6                 mov     eax, [ebp+arg_C]
.text:000000E9                 mov     dword ptr [eax], 0
.text:000000EF                 lea     ecx, [ebp+var_408]
.text:000000F5                 push    ecx
.text:000000F6                 mov     edx, [ebp+arg_4]
.text:000000F9                 push    edx
.text:000000FA                 call    _SeqInStream_ReadByte@8 ; SeqInStream_ReadByte(x,x)
.text:000000FF                 mov     [ebp+var_414], eax
.text:00000105                 cmp     [ebp+var_414], 0
.text:0000010C                 jz      short loc_119
.text:0000010E                 mov     eax, [ebp+var_414]
.text:00000114                 jmp     loc_1A1
.text:00000119 ; ---------------------------------------------------------------------------
.text:00000119
.text:00000119 loc_119:                                ; CODE XREF: XzBlock_ReadHeader(x,x,x,x)+4Cj
.text:00000119                 movzx   eax, [ebp+var_408]
.text:00000120                 lea     ecx, ds:4[eax*4]
.text:00000127                 mov     [ebp+var_410], ecx
.text:0000012D                 cmp     [ebp+var_410], 0
.text:00000134                 jnz     short loc_14C
.text:00000136                 mov     edx, [ebp+arg_C]
.text:00000139                 mov     dword ptr [edx], 1
.text:0000013F                 mov     eax, [ebp+arg_8]
.text:00000142                 mov     dword ptr [eax], 1
.text:00000148                 xor     eax, eax
.text:0000014A                 jmp     short loc_1A1
.text:0000014C ; ---------------------------------------------------------------------------
.text:0000014C
.text:0000014C loc_14C:                                ; CODE XREF: XzBlock_ReadHeader(x,x,x,x)+74j
.text:0000014C                 mov     ecx, [ebp+arg_8]
.text:0000014F                 mov     dword ptr [ecx], 0
.text:00000155                 mov     edx, [ebp+arg_C]
.text:00000158                 mov     eax, [ebp+var_410]
.text:0000015E                 mov     [edx], eax
.text:00000160                 mov     ecx, [ebp+var_410]
.text:00000166                 sub     ecx, 1
.text:00000169                 push    ecx
.text:0000016A                 lea     edx, [ebp+var_407]
.text:00000170                 push    edx
.text:00000171                 mov     eax, [ebp+arg_4]
.text:00000174                 push    eax
.text:00000175                 call    _SeqInStream_Read@12 ; SeqInStream_Read(x,x,x)
.text:0000017A                 mov     [ebp+var_418], eax
.text:00000180                 cmp     [ebp+var_418], 0
.text:00000187                 jz      short loc_191
.text:00000189                 mov     eax, [ebp+var_418]
.text:0000018F                 jmp     short loc_1A1
.text:00000191 ; ---------------------------------------------------------------------------
.text:00000191
.text:00000191 loc_191:                                ; CODE XREF: XzBlock_ReadHeader(x,x,x,x)+C7j
.text:00000191                 lea     ecx, [ebp+var_408]
.text:00000197                 push    ecx
.text:00000198                 mov     edx, [ebp+arg_0]
.text:0000019B                 push    edx
.text:0000019C                 call    _XzBlock_Parse@8 ; XzBlock_Parse(x,x)
.text:000001A1
.text:000001A1 loc_1A1:                                ; CODE XREF: XzBlock_ReadHeader(x,x,x,x)+54j
.text:000001A1                                         ; XzBlock_ReadHeader(x,x,x,x)+8Aj ...
.text:000001A1                 push    edx
.text:000001A2                 mov     ecx, ebp
.text:000001A4                 push    eax
.text:000001A5                 lea     edx, $LN8
.text:000001AB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001B0                 pop     eax
.text:000001B1                 pop     edx
.text:000001B2                 pop     edi
.text:000001B3                 mov     ecx, [ebp+var_4]
.text:000001B6                 xor     ecx, ebp
.text:000001B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000001BD                 add     esp, 418h
.text:000001C3                 cmp     ebp, esp
.text:000001C5                 call    __RTC_CheckEsp
.text:000001CA                 mov     esp, ebp
.text:000001CC                 pop     ebp
.text:000001CD                 retn    10h
.text:000001CD _XzBlock_ReadHeader@16 endp
.text:000001CD
.text:000001CD ; ---------------------------------------------------------------------------
.text:000001D0 $LN8            dd 1                    ; DATA XREF: XzBlock_ReadHeader(x,x,x,x)+E5o
.text:000001D4                 dd offset $LN7_0
.text:000001D8 $LN7_0          dd 0FFFFFBF8h, 400h     ; DATA XREF: .text:000001D4o
.text:000001E0                 dd offset $LN6_0        ; "header"
.text:000001E4 $LN6_0          db 'header',0           ; DATA XREF: .text:000001E0o
.text:000001EB                 align 10h
.text:000001F0
.text:000001F0 ; =============== S U B R O U T I N E =======================================
.text:000001F0
.text:000001F0 ; Attributes: bp-based frame
.text:000001F0
.text:000001F0 ; __stdcall Xz_GetUnpackSize(x)
.text:000001F0                 public _Xz_GetUnpackSize@4
.text:000001F0 _Xz_GetUnpackSize@4 proc near           ; CODE XREF: Xzs_GetUnpackSize(x)+51p
.text:000001F0
.text:000001F0 var_14          = dword ptr -14h
.text:000001F0 var_10          = dword ptr -10h
.text:000001F0 var_C           = dword ptr -0Ch
.text:000001F0 var_8           = dword ptr -8
.text:000001F0 var_4           = dword ptr -4
.text:000001F0 arg_0           = dword ptr  8
.text:000001F0
.text:000001F0                 push    ebp
.text:000001F1                 mov     ebp, esp
.text:000001F3                 sub     esp, 14h
.text:000001F6                 push    esi
.text:000001F7                 mov     eax, 0CCCCCCCCh
.text:000001FC                 mov     [ebp+var_14], eax
.text:000001FF                 mov     [ebp+var_10], eax
.text:00000202                 mov     [ebp+var_C], eax
.text:00000205                 mov     [ebp+var_8], eax
.text:00000208                 mov     [ebp+var_4], eax
.text:0000020B                 mov     [ebp+var_8], 0
.text:00000212                 mov     [ebp+var_4], 0
.text:00000219                 mov     [ebp+var_C], 0
.text:00000220                 jmp     short loc_22B
.text:00000222 ; ---------------------------------------------------------------------------
.text:00000222
.text:00000222 loc_222:                                ; CODE XREF: Xz_GetUnpackSize(x)+8Bj
.text:00000222                 mov     eax, [ebp+var_C]
.text:00000225                 add     eax, 1
.text:00000228                 mov     [ebp+var_C], eax
.text:0000022B
.text:0000022B loc_22B:                                ; CODE XREF: Xz_GetUnpackSize(x)+30j
.text:0000022B                 mov     ecx, [ebp+arg_0]
.text:0000022E                 mov     edx, [ebp+var_C]
.text:00000231                 cmp     edx, [ecx+4]
.text:00000234                 jnb     short loc_27D
.text:00000236                 mov     eax, [ebp+var_C]
.text:00000239                 shl     eax, 4
.text:0000023C                 mov     ecx, [ebp+arg_0]
.text:0000023F                 mov     edx, [ecx+0Ch]
.text:00000242                 mov     ecx, [ebp+var_8]
.text:00000245                 add     ecx, [edx+eax]
.text:00000248                 mov     esi, [ebp+var_4]
.text:0000024B                 adc     esi, [edx+eax+4]
.text:0000024F                 mov     [ebp+var_14], ecx
.text:00000252                 mov     [ebp+var_10], esi
.text:00000255                 mov     edx, [ebp+var_10]
.text:00000258                 cmp     edx, [ebp+var_4]
.text:0000025B                 ja      short loc_26F
.text:0000025D                 jb      short loc_267
.text:0000025F                 mov     eax, [ebp+var_14]
.text:00000262                 cmp     eax, [ebp+var_8]
.text:00000265                 jnb     short loc_26F
.text:00000267
.text:00000267 loc_267:                                ; CODE XREF: Xz_GetUnpackSize(x)+6Dj
.text:00000267                 or      eax, 0FFFFFFFFh
.text:0000026A                 or      edx, 0FFFFFFFFh
.text:0000026D                 jmp     short loc_283
.text:0000026F ; ---------------------------------------------------------------------------
.text:0000026F
.text:0000026F loc_26F:                                ; CODE XREF: Xz_GetUnpackSize(x)+6Bj
.text:0000026F                                         ; Xz_GetUnpackSize(x)+75j
.text:0000026F                 mov     ecx, [ebp+var_14]
.text:00000272                 mov     [ebp+var_8], ecx
.text:00000275                 mov     edx, [ebp+var_10]
.text:00000278                 mov     [ebp+var_4], edx
.text:0000027B                 jmp     short loc_222
.text:0000027D ; ---------------------------------------------------------------------------
.text:0000027D
.text:0000027D loc_27D:                                ; CODE XREF: Xz_GetUnpackSize(x)+44j
.text:0000027D                 mov     eax, [ebp+var_8]
.text:00000280                 mov     edx, [ebp+var_4]
.text:00000283
.text:00000283 loc_283:                                ; CODE XREF: Xz_GetUnpackSize(x)+7Dj
.text:00000283                 pop     esi
.text:00000284                 mov     esp, ebp
.text:00000286                 pop     ebp
.text:00000287                 retn    4
.text:00000287 _Xz_GetUnpackSize@4 endp
.text:00000287
.text:00000287 ; ---------------------------------------------------------------------------
.text:0000028A                 align 10h
.text:00000290
.text:00000290 ; =============== S U B R O U T I N E =======================================
.text:00000290
.text:00000290 ; Attributes: bp-based frame
.text:00000290
.text:00000290 ; __stdcall Xz_GetPackSize(x)
.text:00000290                 public _Xz_GetPackSize@4
.text:00000290 _Xz_GetPackSize@4 proc near             ; CODE XREF: Xz_ReadBackward(x,x,x,x)+33Cp
.text:00000290
.text:00000290 var_14          = dword ptr -14h
.text:00000290 var_10          = dword ptr -10h
.text:00000290 var_C           = dword ptr -0Ch
.text:00000290 var_8           = dword ptr -8
.text:00000290 var_4           = dword ptr -4
.text:00000290 arg_0           = dword ptr  8
.text:00000290
.text:00000290                 push    ebp
.text:00000291                 mov     ebp, esp
.text:00000293                 sub     esp, 14h
.text:00000296                 mov     eax, 0CCCCCCCCh
.text:0000029B                 mov     [ebp+var_14], eax
.text:0000029E                 mov     [ebp+var_10], eax
.text:000002A1                 mov     [ebp+var_C], eax
.text:000002A4                 mov     [ebp+var_8], eax
.text:000002A7                 mov     [ebp+var_4], eax
.text:000002AA                 mov     [ebp+var_8], 0
.text:000002B1                 mov     [ebp+var_4], 0
.text:000002B8                 mov     [ebp+var_C], 0
.text:000002BF                 jmp     short loc_2CA
.text:000002C1 ; ---------------------------------------------------------------------------
.text:000002C1
.text:000002C1 loc_2C1:                                ; CODE XREF: Xz_GetPackSize(x)+94j
.text:000002C1                 mov     eax, [ebp+var_C]
.text:000002C4                 add     eax, 1
.text:000002C7                 mov     [ebp+var_C], eax
.text:000002CA
.text:000002CA loc_2CA:                                ; CODE XREF: Xz_GetPackSize(x)+2Fj
.text:000002CA                 mov     ecx, [ebp+arg_0]
.text:000002CD                 mov     edx, [ebp+var_C]
.text:000002D0                 cmp     edx, [ecx+4]
.text:000002D3                 jnb     short loc_326
.text:000002D5                 mov     eax, [ebp+var_C]
.text:000002D8                 shl     eax, 4
.text:000002DB                 mov     ecx, [ebp+arg_0]
.text:000002DE                 mov     edx, [ecx+0Ch]
.text:000002E1                 mov     ecx, [edx+eax+8]
.text:000002E5                 add     ecx, 3
.text:000002E8                 mov     edx, [edx+eax+0Ch]
.text:000002EC                 adc     edx, 0
.text:000002EF                 and     ecx, 0FFFFFFFCh
.text:000002F2                 add     ecx, [ebp+var_8]
.text:000002F5                 adc     edx, [ebp+var_4]
.text:000002F8                 mov     [ebp+var_14], ecx
.text:000002FB                 mov     [ebp+var_10], edx
.text:000002FE                 mov     eax, [ebp+var_10]
.text:00000301                 cmp     eax, [ebp+var_4]
.text:00000304                 ja      short loc_318
.text:00000306                 jb      short loc_310
.text:00000308                 mov     ecx, [ebp+var_14]
.text:0000030B                 cmp     ecx, [ebp+var_8]
.text:0000030E                 jnb     short loc_318
.text:00000310
.text:00000310 loc_310:                                ; CODE XREF: Xz_GetPackSize(x)+76j
.text:00000310                 or      eax, 0FFFFFFFFh
.text:00000313                 or      edx, 0FFFFFFFFh
.text:00000316                 jmp     short loc_32C
.text:00000318 ; ---------------------------------------------------------------------------
.text:00000318
.text:00000318 loc_318:                                ; CODE XREF: Xz_GetPackSize(x)+74j
.text:00000318                                         ; Xz_GetPackSize(x)+7Ej
.text:00000318                 mov     edx, [ebp+var_14]
.text:0000031B                 mov     [ebp+var_8], edx
.text:0000031E                 mov     eax, [ebp+var_10]
.text:00000321                 mov     [ebp+var_4], eax
.text:00000324                 jmp     short loc_2C1
.text:00000326 ; ---------------------------------------------------------------------------
.text:00000326
.text:00000326 loc_326:                                ; CODE XREF: Xz_GetPackSize(x)+43j
.text:00000326                 mov     eax, [ebp+var_8]
.text:00000329                 mov     edx, [ebp+var_4]
.text:0000032C
.text:0000032C loc_32C:                                ; CODE XREF: Xz_GetPackSize(x)+86j
.text:0000032C                 mov     esp, ebp
.text:0000032E                 pop     ebp
.text:0000032F                 retn    4
.text:0000032F _Xz_GetPackSize@4 endp
.text:0000032F
.text:0000032F ; ---------------------------------------------------------------------------
.text:00000332                 align 10h
.text:00000340
.text:00000340 ; =============== S U B R O U T I N E =======================================
.text:00000340
.text:00000340 ; Attributes: bp-based frame
.text:00000340
.text:00000340 ; __stdcall Xzs_Construct(x)
.text:00000340                 public _Xzs_Construct@4
.text:00000340 _Xzs_Construct@4 proc near
.text:00000340
.text:00000340 arg_0           = dword ptr  8
.text:00000340
.text:00000340                 push    ebp
.text:00000341                 mov     ebp, esp
.text:00000343                 mov     eax, [ebp+arg_0]
.text:00000346                 mov     dword ptr [eax+4], 0
.text:0000034D                 mov     ecx, [ebp+arg_0]
.text:00000350                 mov     dword ptr [ecx], 0
.text:00000356                 mov     edx, [ebp+arg_0]
.text:00000359                 mov     dword ptr [edx+8], 0
.text:00000360                 pop     ebp
.text:00000361                 retn    4
.text:00000361 _Xzs_Construct@4 endp
.text:00000361
.text:00000361 ; ---------------------------------------------------------------------------
.text:00000364                 align 10h
.text:00000370
.text:00000370 ; =============== S U B R O U T I N E =======================================
.text:00000370
.text:00000370 ; Attributes: bp-based frame
.text:00000370
.text:00000370 ; __stdcall Xzs_Free(x, x)
.text:00000370                 public _Xzs_Free@8
.text:00000370 _Xzs_Free@8     proc near
.text:00000370
.text:00000370 var_4           = dword ptr -4
.text:00000370 arg_0           = dword ptr  8
.text:00000370 arg_4           = dword ptr  0Ch
.text:00000370
.text:00000370                 push    ebp
.text:00000371                 mov     ebp, esp
.text:00000373                 push    ecx
.text:00000374                 push    esi
.text:00000375                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000037C                 mov     [ebp+var_4], 0
.text:00000383                 jmp     short loc_38E
.text:00000385 ; ---------------------------------------------------------------------------
.text:00000385
.text:00000385 loc_385:                                ; CODE XREF: Xzs_Free(x,x)+3Ej
.text:00000385                 mov     eax, [ebp+var_4]
.text:00000388                 add     eax, 1
.text:0000038B                 mov     [ebp+var_4], eax
.text:0000038E
.text:0000038E loc_38E:                                ; CODE XREF: Xzs_Free(x,x)+13j
.text:0000038E                 mov     ecx, [ebp+arg_0]
.text:00000391                 mov     edx, [ebp+var_4]
.text:00000394                 cmp     edx, [ecx]
.text:00000396                 jnb     short loc_3B0
.text:00000398                 mov     eax, [ebp+arg_4]
.text:0000039B                 push    eax
.text:0000039C                 mov     ecx, [ebp+var_4]
.text:0000039F                 imul    ecx, 18h
.text:000003A2                 mov     edx, [ebp+arg_0]
.text:000003A5                 add     ecx, [edx+8]
.text:000003A8                 push    ecx
.text:000003A9                 call    _Xz_Free@8      ; Xz_Free(x,x)
.text:000003AE                 jmp     short loc_385
.text:000003B0 ; ---------------------------------------------------------------------------
.text:000003B0
.text:000003B0 loc_3B0:                                ; CODE XREF: Xzs_Free(x,x)+26j
.text:000003B0                 mov     esi, esp
.text:000003B2                 mov     eax, [ebp+arg_0]
.text:000003B5                 mov     ecx, [eax+8]
.text:000003B8                 push    ecx
.text:000003B9                 mov     edx, [ebp+arg_4]
.text:000003BC                 push    edx
.text:000003BD                 mov     eax, [ebp+arg_4]
.text:000003C0                 mov     ecx, [eax+4]
.text:000003C3                 call    ecx
.text:000003C5                 cmp     esi, esp
.text:000003C7                 call    __RTC_CheckEsp
.text:000003CC                 mov     edx, [ebp+arg_0]
.text:000003CF                 mov     dword ptr [edx+4], 0
.text:000003D6                 mov     eax, [ebp+arg_0]
.text:000003D9                 mov     dword ptr [eax], 0
.text:000003DF                 mov     ecx, [ebp+arg_0]
.text:000003E2                 mov     dword ptr [ecx+8], 0
.text:000003E9                 pop     esi
.text:000003EA                 add     esp, 4
.text:000003ED                 cmp     ebp, esp
.text:000003EF                 call    __RTC_CheckEsp
.text:000003F4                 mov     esp, ebp
.text:000003F6                 pop     ebp
.text:000003F7                 retn    8
.text:000003F7 _Xzs_Free@8     endp
.text:000003F7
.text:000003F7 ; ---------------------------------------------------------------------------
.text:000003FA                 align 10h
.text:00000400
.text:00000400 ; =============== S U B R O U T I N E =======================================
.text:00000400
.text:00000400 ; Attributes: bp-based frame
.text:00000400
.text:00000400 ; __stdcall Xzs_GetNumBlocks(x)
.text:00000400                 public _Xzs_GetNumBlocks@4
.text:00000400 _Xzs_GetNumBlocks@4 proc near
.text:00000400
.text:00000400 var_C           = dword ptr -0Ch
.text:00000400 var_8           = dword ptr -8
.text:00000400 var_4           = dword ptr -4
.text:00000400 arg_0           = dword ptr  8
.text:00000400
.text:00000400                 push    ebp
.text:00000401                 mov     ebp, esp
.text:00000403                 sub     esp, 0Ch
.text:00000406                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000040D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000414                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000041B                 mov     [ebp+var_8], 0
.text:00000422                 mov     [ebp+var_4], 0
.text:00000429                 mov     [ebp+var_C], 0
.text:00000430                 jmp     short loc_43B
.text:00000432 ; ---------------------------------------------------------------------------
.text:00000432
.text:00000432 loc_432:                                ; CODE XREF: Xzs_GetNumBlocks(x)+63j
.text:00000432                 mov     eax, [ebp+var_C]
.text:00000435                 add     eax, 1
.text:00000438                 mov     [ebp+var_C], eax
.text:0000043B
.text:0000043B loc_43B:                                ; CODE XREF: Xzs_GetNumBlocks(x)+30j
.text:0000043B                 mov     ecx, [ebp+arg_0]
.text:0000043E                 mov     edx, [ebp+var_C]
.text:00000441                 cmp     edx, [ecx]
.text:00000443                 jnb     short loc_465
.text:00000445                 mov     eax, [ebp+var_C]
.text:00000448                 imul    eax, 18h
.text:0000044B                 mov     ecx, [ebp+arg_0]
.text:0000044E                 mov     edx, [ecx+8]
.text:00000451                 mov     eax, [edx+eax+4]
.text:00000455                 xor     ecx, ecx
.text:00000457                 add     eax, [ebp+var_8]
.text:0000045A                 adc     ecx, [ebp+var_4]
.text:0000045D                 mov     [ebp+var_8], eax
.text:00000460                 mov     [ebp+var_4], ecx
.text:00000463                 jmp     short loc_432
.text:00000465 ; ---------------------------------------------------------------------------
.text:00000465
.text:00000465 loc_465:                                ; CODE XREF: Xzs_GetNumBlocks(x)+43j
.text:00000465                 mov     eax, [ebp+var_8]
.text:00000468                 mov     edx, [ebp+var_4]
.text:0000046B                 mov     esp, ebp
.text:0000046D                 pop     ebp
.text:0000046E                 retn    4
.text:0000046E _Xzs_GetNumBlocks@4 endp
.text:0000046E
.text:0000046E ; ---------------------------------------------------------------------------
.text:00000471                 align 10h
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 ; __stdcall Xzs_GetUnpackSize(x)
.text:00000480                 public _Xzs_GetUnpackSize@4
.text:00000480 _Xzs_GetUnpackSize@4 proc near
.text:00000480
.text:00000480 var_14          = dword ptr -14h
.text:00000480 var_10          = dword ptr -10h
.text:00000480 var_C           = dword ptr -0Ch
.text:00000480 var_8           = dword ptr -8
.text:00000480 var_4           = dword ptr -4
.text:00000480 arg_0           = dword ptr  8
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 sub     esp, 14h
.text:00000486                 mov     eax, 0CCCCCCCCh
.text:0000048B                 mov     [ebp+var_14], eax
.text:0000048E                 mov     [ebp+var_10], eax
.text:00000491                 mov     [ebp+var_C], eax
.text:00000494                 mov     [ebp+var_8], eax
.text:00000497                 mov     [ebp+var_4], eax
.text:0000049A                 mov     [ebp+var_8], 0
.text:000004A1                 mov     [ebp+var_4], 0
.text:000004A8                 mov     [ebp+var_C], 0
.text:000004AF                 jmp     short loc_4BA
.text:000004B1 ; ---------------------------------------------------------------------------
.text:000004B1
.text:000004B1 loc_4B1:                                ; CODE XREF: Xzs_GetUnpackSize(x)+88j
.text:000004B1                 mov     eax, [ebp+var_C]
.text:000004B4                 add     eax, 1
.text:000004B7                 mov     [ebp+var_C], eax
.text:000004BA
.text:000004BA loc_4BA:                                ; CODE XREF: Xzs_GetUnpackSize(x)+2Fj
.text:000004BA                 mov     ecx, [ebp+arg_0]
.text:000004BD                 mov     edx, [ebp+var_C]
.text:000004C0                 cmp     edx, [ecx]
.text:000004C2                 jnb     short loc_50A
.text:000004C4                 mov     eax, [ebp+var_C]
.text:000004C7                 imul    eax, 18h
.text:000004CA                 mov     ecx, [ebp+arg_0]
.text:000004CD                 add     eax, [ecx+8]
.text:000004D0                 push    eax
.text:000004D1                 call    _Xz_GetUnpackSize@4 ; Xz_GetUnpackSize(x)
.text:000004D6                 add     eax, [ebp+var_8]
.text:000004D9                 adc     edx, [ebp+var_4]
.text:000004DC                 mov     [ebp+var_14], eax
.text:000004DF                 mov     [ebp+var_10], edx
.text:000004E2                 mov     edx, [ebp+var_10]
.text:000004E5                 cmp     edx, [ebp+var_4]
.text:000004E8                 ja      short loc_4FC
.text:000004EA                 jb      short loc_4F4
.text:000004EC                 mov     eax, [ebp+var_14]
.text:000004EF                 cmp     eax, [ebp+var_8]
.text:000004F2                 jnb     short loc_4FC
.text:000004F4
.text:000004F4 loc_4F4:                                ; CODE XREF: Xzs_GetUnpackSize(x)+6Aj
.text:000004F4                 or      eax, 0FFFFFFFFh
.text:000004F7                 or      edx, 0FFFFFFFFh
.text:000004FA                 jmp     short loc_510
.text:000004FC ; ---------------------------------------------------------------------------
.text:000004FC
.text:000004FC loc_4FC:                                ; CODE XREF: Xzs_GetUnpackSize(x)+68j
.text:000004FC                                         ; Xzs_GetUnpackSize(x)+72j
.text:000004FC                 mov     ecx, [ebp+var_14]
.text:000004FF                 mov     [ebp+var_8], ecx
.text:00000502                 mov     edx, [ebp+var_10]
.text:00000505                 mov     [ebp+var_4], edx
.text:00000508                 jmp     short loc_4B1
.text:0000050A ; ---------------------------------------------------------------------------
.text:0000050A
.text:0000050A loc_50A:                                ; CODE XREF: Xzs_GetUnpackSize(x)+42j
.text:0000050A                 mov     eax, [ebp+var_8]
.text:0000050D                 mov     edx, [ebp+var_4]
.text:00000510
.text:00000510 loc_510:                                ; CODE XREF: Xzs_GetUnpackSize(x)+7Aj
.text:00000510                 add     esp, 14h
.text:00000513                 cmp     ebp, esp
.text:00000515                 call    __RTC_CheckEsp
.text:0000051A                 mov     esp, ebp
.text:0000051C                 pop     ebp
.text:0000051D                 retn    4
.text:0000051D _Xzs_GetUnpackSize@4 endp
.text:0000051D
.text:00000520
.text:00000520 ; =============== S U B R O U T I N E =======================================
.text:00000520
.text:00000520 ; Attributes: bp-based frame
.text:00000520
.text:00000520 ; __stdcall Xzs_ReadBackward(x, x, x, x, x)
.text:00000520                 public _Xzs_ReadBackward@20
.text:00000520 _Xzs_ReadBackward@20 proc near
.text:00000520
.text:00000520 var_4C          = dword ptr -4Ch
.text:00000520 var_48          = dword ptr -48h
.text:00000520 Dst             = dword ptr -44h
.text:00000520 var_40          = dword ptr -40h
.text:00000520 var_3C          = dword ptr -3Ch
.text:00000520 var_38          = dword ptr -38h
.text:00000520 var_30          = dword ptr -30h
.text:00000520 var_2C          = dword ptr -2Ch
.text:00000520 var_28          = dword ptr -28h
.text:00000520 var_24          = dword ptr -24h
.text:00000520 var_20          = dword ptr -20h
.text:00000520 var_1C          = dword ptr -1Ch
.text:00000520 var_14          = dword ptr -14h
.text:00000520 var_C           = dword ptr -0Ch
.text:00000520 var_8           = dword ptr -8
.text:00000520 arg_0           = dword ptr  8
.text:00000520 arg_4           = dword ptr  0Ch
.text:00000520 arg_8           = dword ptr  10h
.text:00000520 arg_C           = dword ptr  14h
.text:00000520 arg_10          = dword ptr  18h
.text:00000520
.text:00000520                 push    ebp
.text:00000521                 mov     ebp, esp
.text:00000523                 sub     esp, 4Ch
.text:00000526                 push    esi
.text:00000527                 push    edi
.text:00000528                 lea     edi, [ebp+var_4C]
.text:0000052B                 mov     ecx, 13h
.text:00000530                 mov     eax, 0CCCCCCCCh
.text:00000535                 rep stosd
.text:00000537                 mov     [ebp+var_C], 0
.text:0000053E                 mov     [ebp+var_8], 0
.text:00000545                 mov     esi, esp
.text:00000547                 push    2
.text:00000549                 lea     eax, [ebp+var_C]
.text:0000054C                 push    eax
.text:0000054D                 mov     ecx, [ebp+arg_4]
.text:00000550                 push    ecx
.text:00000551                 mov     edx, [ebp+arg_4]
.text:00000554                 mov     eax, [edx+0Ch]
.text:00000557                 call    eax
.text:00000559                 cmp     esi, esp
.text:0000055B                 call    __RTC_CheckEsp
.text:00000560                 mov     [ebp+var_14], eax
.text:00000563                 cmp     [ebp+var_14], 0
.text:00000567                 jz      short loc_571
.text:00000569                 mov     eax, [ebp+var_14]
.text:0000056C                 jmp     loc_71D
.text:00000571 ; ---------------------------------------------------------------------------
.text:00000571
.text:00000571 loc_571:                                ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+47j
.text:00000571                 mov     ecx, [ebp+arg_8]
.text:00000574                 mov     edx, [ebp+var_C]
.text:00000577                 mov     [ecx], edx
.text:00000579                 mov     eax, [ebp+var_8]
.text:0000057C                 mov     [ecx+4], eax
.text:0000057F
.text:0000057F loc_57F:                                ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x):loc_716j
.text:0000057F                 lea     ecx, [ebp+var_30]
.text:00000582                 push    ecx
.text:00000583                 call    _Xz_Construct@4 ; Xz_Construct(x)
.text:00000588                 mov     edx, [ebp+arg_10]
.text:0000058B                 push    edx
.text:0000058C                 mov     eax, [ebp+arg_8]
.text:0000058F                 push    eax
.text:00000590                 mov     ecx, [ebp+arg_4]
.text:00000593                 push    ecx
.text:00000594                 lea     edx, [ebp+var_30]
.text:00000597                 push    edx
.text:00000598                 call    _Xz_ReadBackward@16 ; Xz_ReadBackward(x,x,x,x)
.text:0000059D                 mov     [ebp+var_38], eax
.text:000005A0                 mov     eax, [ebp+arg_8]
.text:000005A3                 mov     ecx, [eax]
.text:000005A5                 mov     [ebp+var_20], ecx
.text:000005A8                 mov     edx, [eax+4]
.text:000005AB                 mov     [ebp+var_1C], edx
.text:000005AE                 mov     eax, [ebp+var_38]
.text:000005B1                 mov     [ebp+var_3C], eax
.text:000005B4                 cmp     [ebp+var_3C], 0
.text:000005B8                 jz      short loc_5C2
.text:000005BA                 mov     eax, [ebp+var_3C]
.text:000005BD                 jmp     loc_71D
.text:000005C2 ; ---------------------------------------------------------------------------
.text:000005C2
.text:000005C2 loc_5C2:                                ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+98j
.text:000005C2                 mov     ecx, [ebp+arg_0]
.text:000005C5                 mov     edx, [ebp+arg_0]
.text:000005C8                 mov     eax, [ecx]
.text:000005CA                 cmp     eax, [edx+4]
.text:000005CD                 jnz     loc_667
.text:000005D3                 mov     ecx, [ebp+arg_0]
.text:000005D6                 mov     edx, [ecx]
.text:000005D8                 shr     edx, 2
.text:000005DB                 mov     eax, [ebp+arg_0]
.text:000005DE                 mov     ecx, [eax]
.text:000005E0                 lea     edx, [ecx+edx+1]
.text:000005E4                 mov     [ebp+var_40], edx
.text:000005E7                 mov     eax, [ebp+var_40]
.text:000005EA                 imul    eax, 18h
.text:000005ED                 mov     esi, esp
.text:000005EF                 push    eax
.text:000005F0                 mov     ecx, [ebp+arg_10]
.text:000005F3                 push    ecx
.text:000005F4                 mov     edx, [ebp+arg_10]
.text:000005F7                 mov     eax, [edx]
.text:000005F9                 call    eax
.text:000005FB                 cmp     esi, esp
.text:000005FD                 call    __RTC_CheckEsp
.text:00000602                 mov     [ebp+Dst], eax
.text:00000605                 cmp     [ebp+Dst], 0
.text:00000609                 jnz     short loc_615
.text:0000060B                 mov     eax, 2
.text:00000610                 jmp     loc_71D
.text:00000615 ; ---------------------------------------------------------------------------
.text:00000615
.text:00000615 loc_615:                                ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+E9j
.text:00000615                 mov     ecx, [ebp+arg_0]
.text:00000618                 mov     edx, [ebp+var_40]
.text:0000061B                 mov     [ecx+4], edx
.text:0000061E                 mov     eax, [ebp+arg_0]
.text:00000621                 cmp     dword ptr [eax], 0
.text:00000624                 jz      short loc_642
.text:00000626                 mov     ecx, [ebp+arg_0]
.text:00000629                 mov     edx, [ecx]
.text:0000062B                 imul    edx, 18h
.text:0000062E                 push    edx             ; Size
.text:0000062F                 mov     eax, [ebp+arg_0]
.text:00000632                 mov     ecx, [eax+8]
.text:00000635                 push    ecx             ; Src
.text:00000636                 mov     edx, [ebp+Dst]
.text:00000639                 push    edx             ; Dst
.text:0000063A                 call    _memcpy
.text:0000063F                 add     esp, 0Ch
.text:00000642
.text:00000642 loc_642:                                ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+104j
.text:00000642                 mov     esi, esp
.text:00000644                 mov     eax, [ebp+arg_0]
.text:00000647                 mov     ecx, [eax+8]
.text:0000064A                 push    ecx
.text:0000064B                 mov     edx, [ebp+arg_10]
.text:0000064E                 push    edx
.text:0000064F                 mov     eax, [ebp+arg_10]
.text:00000652                 mov     ecx, [eax+4]
.text:00000655                 call    ecx
.text:00000657                 cmp     esi, esp
.text:00000659                 call    __RTC_CheckEsp
.text:0000065E                 mov     edx, [ebp+arg_0]
.text:00000661                 mov     eax, [ebp+Dst]
.text:00000664                 mov     [edx+8], eax
.text:00000667
.text:00000667 loc_667:                                ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+ADj
.text:00000667                 mov     ecx, [ebp+arg_0]
.text:0000066A                 mov     edx, [ecx]
.text:0000066C                 imul    edx, 18h
.text:0000066F                 mov     eax, [ebp+arg_0]
.text:00000672                 mov     ecx, [eax+8]
.text:00000675                 add     ecx, edx
.text:00000677                 mov     edx, [ebp+var_30]
.text:0000067A                 mov     [ecx], edx
.text:0000067C                 mov     eax, [ebp+var_2C]
.text:0000067F                 mov     [ecx+4], eax
.text:00000682                 mov     edx, [ebp+var_28]
.text:00000685                 mov     [ecx+8], edx
.text:00000688                 mov     eax, [ebp+var_24]
.text:0000068B                 mov     [ecx+0Ch], eax
.text:0000068E                 mov     edx, [ebp+var_20]
.text:00000691                 mov     [ecx+10h], edx
.text:00000694                 mov     eax, [ebp+var_1C]
.text:00000697                 mov     [ecx+14h], eax
.text:0000069A                 mov     ecx, [ebp+arg_0]
.text:0000069D                 mov     edx, [ecx]
.text:0000069F                 add     edx, 1
.text:000006A2                 mov     eax, [ebp+arg_0]
.text:000006A5                 mov     [eax], edx
.text:000006A7                 mov     ecx, [ebp+arg_8]
.text:000006AA                 mov     [ebp+var_4C], ecx
.text:000006AD                 mov     edx, [ebp+var_4C]
.text:000006B0                 mov     eax, [ebp+var_4C]
.text:000006B3                 mov     ecx, [edx]
.text:000006B5                 or      ecx, [eax+4]
.text:000006B8                 jnz     short loc_6BC
.text:000006BA                 jmp     short loc_71B
.text:000006BC ; ---------------------------------------------------------------------------
.text:000006BC
.text:000006BC loc_6BC:                                ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+198j
.text:000006BC                 mov     edx, [ebp+arg_8]
.text:000006BF                 mov     eax, [edx+4]
.text:000006C2                 push    eax
.text:000006C3                 mov     ecx, [edx]
.text:000006C5                 push    ecx
.text:000006C6                 mov     edx, [ebp+arg_4]
.text:000006C9                 push    edx
.text:000006CA                 call    _LookInStream_SeekTo@12 ; LookInStream_SeekTo(x,x,x)
.text:000006CF                 mov     [ebp+var_48], eax
.text:000006D2                 cmp     [ebp+var_48], 0
.text:000006D6                 jz      short loc_6DD
.text:000006D8                 mov     eax, [ebp+var_48]
.text:000006DB                 jmp     short loc_71D
.text:000006DD ; ---------------------------------------------------------------------------
.text:000006DD
.text:000006DD loc_6DD:                                ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+1B6j
.text:000006DD                 cmp     [ebp+arg_C], 0
.text:000006E1                 jz      short loc_716
.text:000006E3                 mov     esi, esp
.text:000006E5                 push    0FFFFFFFFh
.text:000006E7                 push    0FFFFFFFFh
.text:000006E9                 mov     eax, [ebp+arg_8]
.text:000006EC                 mov     ecx, [ebp+var_C]
.text:000006EF                 sub     ecx, [eax]
.text:000006F1                 mov     edx, [ebp+var_8]
.text:000006F4                 sbb     edx, [eax+4]
.text:000006F7                 push    edx
.text:000006F8                 push    ecx
.text:000006F9                 mov     eax, [ebp+arg_C]
.text:000006FC                 push    eax
.text:000006FD                 mov     ecx, [ebp+arg_C]
.text:00000700                 mov     edx, [ecx]
.text:00000702                 call    edx
.text:00000704                 cmp     esi, esp
.text:00000706                 call    __RTC_CheckEsp
.text:0000070B                 test    eax, eax
.text:0000070D                 jz      short loc_716
.text:0000070F                 mov     eax, 0Ah
.text:00000714                 jmp     short loc_71D
.text:00000716 ; ---------------------------------------------------------------------------
.text:00000716
.text:00000716 loc_716:                                ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+1C1j
.text:00000716                                         ; Xzs_ReadBackward(x,x,x,x,x)+1EDj
.text:00000716                 jmp     loc_57F
.text:0000071B ; ---------------------------------------------------------------------------
.text:0000071B
.text:0000071B loc_71B:                                ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+19Aj
.text:0000071B                 xor     eax, eax
.text:0000071D
.text:0000071D loc_71D:                                ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+4Cj
.text:0000071D                                         ; Xzs_ReadBackward(x,x,x,x,x)+9Dj ...
.text:0000071D                 push    edx
.text:0000071E                 mov     ecx, ebp
.text:00000720                 push    eax
.text:00000721                 lea     edx, $LN16
.text:00000727                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000072C                 pop     eax
.text:0000072D                 pop     edx
.text:0000072E                 pop     edi
.text:0000072F                 pop     esi
.text:00000730                 add     esp, 4Ch
.text:00000733                 cmp     ebp, esp
.text:00000735                 call    __RTC_CheckEsp
.text:0000073A                 mov     esp, ebp
.text:0000073C                 pop     ebp
.text:0000073D                 retn    14h
.text:0000073D _Xzs_ReadBackward@20 endp
.text:0000073D
.text:0000073D ; ---------------------------------------------------------------------------
.text:00000740 $LN16           dd 2                    ; DATA XREF: Xzs_ReadBackward(x,x,x,x,x)+201o
.text:00000744                 dd offset $LN15
.text:00000748 $LN15           dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00000744o
.text:00000750                 dd offset $LN13         ; "endOffset"
.text:00000754                 dd 0FFFFFFD0h, 18h
.text:0000075C                 dd offset $LN14
.text:00000760 $LN14           db 73h, 74h, 0          ; DATA XREF: .text:0000075Co
.text:00000763 $LN13           db 'endOffset',0        ; DATA XREF: .text:00000750o
.text:0000076D                 align 10h
.text:00000770
.text:00000770 ; =============== S U B R O U T I N E =======================================
.text:00000770
.text:00000770 ; Attributes: bp-based frame
.text:00000770
.text:00000770 ; __stdcall Xz_ReadBackward(x, x, x, x)
.text:00000770 _Xz_ReadBackward@16 proc near           ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+78p
.text:00000770
.text:00000770 var_48C         = dword ptr -48Ch
.text:00000770 var_488         = dword ptr -488h
.text:00000770 var_484         = dword ptr -484h
.text:00000770 var_480         = dword ptr -480h
.text:00000770 var_47C         = dword ptr -47Ch
.text:00000770 var_478         = dword ptr -478h
.text:00000770 var_470         = byte ptr -470h
.text:00000770 var_46C         = dword ptr -46Ch
.text:00000770 var_460         = word ptr -460h
.text:00000770 var_458         = dword ptr -458h
.text:00000770 var_454         = dword ptr -454h
.text:00000770 var_450         = dword ptr -450h
.text:00000770 var_44C         = dword ptr -44Ch
.text:00000770 var_448         = dword ptr -448h
.text:00000770 var_444         = dword ptr -444h
.text:00000770 var_440         = dword ptr -440h
.text:00000770 var_439         = byte ptr -439h
.text:00000770 var_438         = byte ptr -438h
.text:00000770 var_34          = dword ptr -34h
.text:00000770 var_30          = dword ptr -30h
.text:00000770 var_2C          = dword ptr -2Ch
.text:00000770 var_28          = dword ptr -28h
.text:00000770 var_24          = dword ptr -24h
.text:00000770 var_1C          = dword ptr -1Ch
.text:00000770 var_18          = dword ptr -18h
.text:00000770 var_14          = byte ptr -14h
.text:00000770 var_13          = byte ptr -13h
.text:00000770 Buf1            = byte ptr -12h
.text:00000770 var_C           = dword ptr -0Ch
.text:00000770 var_8           = dword ptr -8
.text:00000770 var_4           = dword ptr -4
.text:00000770 arg_0           = dword ptr  8
.text:00000770 arg_4           = dword ptr  0Ch
.text:00000770 arg_8           = dword ptr  10h
.text:00000770 arg_C           = dword ptr  14h
.text:00000770
.text:00000770                 push    ebp
.text:00000771                 mov     ebp, esp
.text:00000773                 sub     esp, 48Ch
.text:00000779                 push    edi
.text:0000077A                 lea     edi, [ebp+var_48C]
.text:00000780                 mov     ecx, 123h
.text:00000785                 mov     eax, 0CCCCCCCCh
.text:0000078A                 rep stosd
.text:0000078C                 mov     eax, dword ptr ds:___security_cookie
.text:00000791                 xor     eax, ebp
.text:00000793                 mov     [ebp+var_4], eax
.text:00000796                 mov     eax, [ebp+arg_8]
.text:00000799                 mov     ecx, [eax]
.text:0000079B                 mov     [ebp+var_28], ecx
.text:0000079E                 mov     edx, [eax+4]
.text:000007A1                 mov     [ebp+var_24], edx
.text:000007A4                 mov     eax, [ebp+var_28]
.text:000007A7                 and     eax, 3
.text:000007AA                 mov     ecx, [ebp+var_24]
.text:000007AD                 and     ecx, 0
.text:000007B0                 mov     [ebp+var_480], eax
.text:000007B6                 mov     [ebp+var_47C], ecx
.text:000007BC                 mov     edx, [ebp+var_480]
.text:000007C2                 or      edx, [ebp+var_47C]
.text:000007C8                 jnz     short loc_7D8
.text:000007CA                 cmp     [ebp+var_24], 0
.text:000007CE                 ja      short loc_7E2
.text:000007D0                 jb      short loc_7D8
.text:000007D2                 cmp     [ebp+var_28], 0Ch
.text:000007D6                 jnb     short loc_7E2
.text:000007D8
.text:000007D8 loc_7D8:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+58j
.text:000007D8                                         ; Xz_ReadBackward(x,x,x,x)+60j
.text:000007D8                 mov     eax, 11h
.text:000007DD                 jmp     loc_BD2
.text:000007E2 ; ---------------------------------------------------------------------------
.text:000007E2
.text:000007E2 loc_7E2:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+5Ej
.text:000007E2                                         ; Xz_ReadBackward(x,x,x,x)+66j
.text:000007E2                 mov     eax, [ebp+var_28]
.text:000007E5                 sub     eax, 0Ch
.text:000007E8                 mov     ecx, [ebp+var_24]
.text:000007EB                 sbb     ecx, 0
.text:000007EE                 mov     [ebp+var_28], eax
.text:000007F1                 mov     [ebp+var_24], ecx
.text:000007F4                 push    0Ch
.text:000007F6                 lea     edx, [ebp+var_1C]
.text:000007F9                 push    edx
.text:000007FA                 mov     eax, [ebp+var_24]
.text:000007FD                 push    eax
.text:000007FE                 mov     ecx, [ebp+var_28]
.text:00000801                 push    ecx
.text:00000802                 mov     edx, [ebp+arg_4]
.text:00000805                 push    edx
.text:00000806                 call    _LookInStream_SeekRead_ForArc@20 ; LookInStream_SeekRead_ForArc(x,x,x,x,x)
.text:0000080B                 mov     [ebp+var_2C], eax
.text:0000080E                 cmp     [ebp+var_2C], 0
.text:00000812                 jz      short loc_81C
.text:00000814                 mov     eax, [ebp+var_2C]
.text:00000817                 jmp     loc_BD2
.text:0000081C ; ---------------------------------------------------------------------------
.text:0000081C
.text:0000081C loc_81C:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+A2j
.text:0000081C                 push    2               ; Size
.text:0000081E                 push    offset _XZ_FOOTER_SIG ; Buf2
.text:00000823                 lea     eax, [ebp+Buf1]
.text:00000826                 push    eax             ; Buf1
.text:00000827                 call    _memcmp
.text:0000082C                 add     esp, 0Ch
.text:0000082F                 test    eax, eax
.text:00000831                 jz      loc_9C0
.text:00000837                 mov     [ebp+var_30], 0
.text:0000083E                 mov     ecx, [ebp+var_28]
.text:00000841                 add     ecx, 0Ch
.text:00000844                 mov     edx, [ebp+var_24]
.text:00000847                 adc     edx, 0
.text:0000084A                 mov     [ebp+var_28], ecx
.text:0000084D                 mov     [ebp+var_24], edx
.text:00000850
.text:00000850 loc_850:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x):loc_93Fj
.text:00000850                 cmp     [ebp+var_24], 0
.text:00000854                 ja      short loc_85F
.text:00000856                 cmp     [ebp+var_28], 400h
.text:0000085D                 jbe     short loc_86B
.text:0000085F
.text:0000085F loc_85F:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+E4j
.text:0000085F                 mov     [ebp+var_484], 400h
.text:00000869                 jmp     short loc_874
.text:0000086B ; ---------------------------------------------------------------------------
.text:0000086B
.text:0000086B loc_86B:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+EDj
.text:0000086B                 mov     eax, [ebp+var_28]
.text:0000086E                 mov     [ebp+var_484], eax
.text:00000874
.text:00000874 loc_874:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+F9j
.text:00000874                 mov     ecx, [ebp+var_484]
.text:0000087A                 mov     [ebp+var_34], ecx
.text:0000087D                 mov     edx, [ebp+var_34]
.text:00000880                 xor     eax, eax
.text:00000882                 mov     ecx, [ebp+var_28]
.text:00000885                 sub     ecx, edx
.text:00000887                 mov     edx, [ebp+var_24]
.text:0000088A                 sbb     edx, eax
.text:0000088C                 mov     [ebp+var_28], ecx
.text:0000088F                 mov     [ebp+var_24], edx
.text:00000892                 mov     eax, [ebp+var_34]
.text:00000895                 push    eax
.text:00000896                 lea     ecx, [ebp+var_438]
.text:0000089C                 push    ecx
.text:0000089D                 mov     edx, [ebp+var_24]
.text:000008A0                 push    edx
.text:000008A1                 mov     eax, [ebp+var_28]
.text:000008A4                 push    eax
.text:000008A5                 mov     ecx, [ebp+arg_4]
.text:000008A8                 push    ecx
.text:000008A9                 call    _LookInStream_SeekRead_ForArc@20 ; LookInStream_SeekRead_ForArc(x,x,x,x,x)
.text:000008AE                 mov     [ebp+var_440], eax
.text:000008B4                 cmp     [ebp+var_440], 0
.text:000008BB                 jz      short loc_8C8
.text:000008BD                 mov     eax, [ebp+var_440]
.text:000008C3                 jmp     loc_BD2
.text:000008C8 ; ---------------------------------------------------------------------------
.text:000008C8
.text:000008C8 loc_8C8:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+14Bj
.text:000008C8                 mov     edx, [ebp+var_30]
.text:000008CB                 add     edx, [ebp+var_34]
.text:000008CE                 mov     [ebp+var_30], edx
.text:000008D1                 jmp     short loc_8DC
.text:000008D3 ; ---------------------------------------------------------------------------
.text:000008D3
.text:000008D3 loc_8D3:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x):loc_8F3j
.text:000008D3                 mov     eax, [ebp+var_34]
.text:000008D6                 sub     eax, 1
.text:000008D9                 mov     [ebp+var_34], eax
.text:000008DC
.text:000008DC loc_8DC:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+161j
.text:000008DC                 cmp     [ebp+var_34], 0
.text:000008E0                 jz      short loc_8F5
.text:000008E2                 mov     ecx, [ebp+var_34]
.text:000008E5                 movzx   edx, [ebp+ecx+var_439]
.text:000008ED                 test    edx, edx
.text:000008EF                 jz      short loc_8F3
.text:000008F1                 jmp     short loc_8F5
.text:000008F3 ; ---------------------------------------------------------------------------
.text:000008F3
.text:000008F3 loc_8F3:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+17Fj
.text:000008F3                 jmp     short loc_8D3
.text:000008F5 ; ---------------------------------------------------------------------------
.text:000008F5
.text:000008F5 loc_8F5:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+170j
.text:000008F5                                         ; Xz_ReadBackward(x,x,x,x)+181j
.text:000008F5                 cmp     [ebp+var_34], 0
.text:000008F9                 jz      short loc_920
.text:000008FB                 mov     eax, [ebp+var_34]
.text:000008FE                 and     eax, 3
.text:00000901                 jz      short loc_90D
.text:00000903                 mov     eax, 11h
.text:00000908                 jmp     loc_BD2
.text:0000090D ; ---------------------------------------------------------------------------
.text:0000090D
.text:0000090D loc_90D:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+191j
.text:0000090D                 mov     ecx, [ebp+var_34]
.text:00000910                 xor     edx, edx
.text:00000912                 add     ecx, [ebp+var_28]
.text:00000915                 adc     edx, [ebp+var_24]
.text:00000918                 mov     [ebp+var_28], ecx
.text:0000091B                 mov     [ebp+var_24], edx
.text:0000091E                 jmp     short loc_944
.text:00000920 ; ---------------------------------------------------------------------------
.text:00000920
.text:00000920 loc_920:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+189j
.text:00000920                 cmp     [ebp+var_24], 0
.text:00000924                 ja      short loc_92C
.text:00000926                 cmp     [ebp+var_28], 0Ch
.text:0000092A                 jb      short loc_935
.text:0000092C
.text:0000092C loc_92C:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+1B4j
.text:0000092C                 cmp     [ebp+var_30], 10000h
.text:00000933                 jbe     short loc_93F
.text:00000935
.text:00000935 loc_935:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+1BAj
.text:00000935                 mov     eax, 11h
.text:0000093A                 jmp     loc_BD2
.text:0000093F ; ---------------------------------------------------------------------------
.text:0000093F
.text:0000093F loc_93F:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+1C3j
.text:0000093F                 jmp     loc_850
.text:00000944 ; ---------------------------------------------------------------------------
.text:00000944
.text:00000944 loc_944:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+1AEj
.text:00000944                 cmp     [ebp+var_24], 0
.text:00000948                 ja      short loc_95C
.text:0000094A                 jb      short loc_952
.text:0000094C                 cmp     [ebp+var_28], 0Ch
.text:00000950                 jnb     short loc_95C
.text:00000952
.text:00000952 loc_952:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+1DAj
.text:00000952                 mov     eax, 11h
.text:00000957                 jmp     loc_BD2
.text:0000095C ; ---------------------------------------------------------------------------
.text:0000095C
.text:0000095C loc_95C:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+1D8j
.text:0000095C                                         ; Xz_ReadBackward(x,x,x,x)+1E0j
.text:0000095C                 mov     eax, [ebp+var_28]
.text:0000095F                 sub     eax, 0Ch
.text:00000962                 mov     ecx, [ebp+var_24]
.text:00000965                 sbb     ecx, 0
.text:00000968                 mov     [ebp+var_28], eax
.text:0000096B                 mov     [ebp+var_24], ecx
.text:0000096E                 push    0Ch
.text:00000970                 lea     edx, [ebp+var_1C]
.text:00000973                 push    edx
.text:00000974                 mov     eax, [ebp+var_24]
.text:00000977                 push    eax
.text:00000978                 mov     ecx, [ebp+var_28]
.text:0000097B                 push    ecx
.text:0000097C                 mov     edx, [ebp+arg_4]
.text:0000097F                 push    edx
.text:00000980                 call    _LookInStream_SeekRead_ForArc@20 ; LookInStream_SeekRead_ForArc(x,x,x,x,x)
.text:00000985                 mov     [ebp+var_444], eax
.text:0000098B                 cmp     [ebp+var_444], 0
.text:00000992                 jz      short loc_99F
.text:00000994                 mov     eax, [ebp+var_444]
.text:0000099A                 jmp     loc_BD2
.text:0000099F ; ---------------------------------------------------------------------------
.text:0000099F
.text:0000099F loc_99F:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+222j
.text:0000099F                 push    2               ; Size
.text:000009A1                 push    offset _XZ_FOOTER_SIG ; Buf2
.text:000009A6                 lea     eax, [ebp+Buf1]
.text:000009A9                 push    eax             ; Buf1
.text:000009AA                 call    _memcmp
.text:000009AF                 add     esp, 0Ch
.text:000009B2                 test    eax, eax
.text:000009B4                 jz      short loc_9C0
.text:000009B6                 mov     eax, 11h
.text:000009BB                 jmp     loc_BD2
.text:000009C0 ; ---------------------------------------------------------------------------
.text:000009C0
.text:000009C0 loc_9C0:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+C1j
.text:000009C0                                         ; Xz_ReadBackward(x,x,x,x)+244j
.text:000009C0                 movzx   ecx, [ebp+var_14]
.text:000009C4                 shl     ecx, 8
.text:000009C7                 movzx   edx, [ebp+var_13]
.text:000009CB                 or      ecx, edx
.text:000009CD                 mov     eax, [ebp+arg_0]
.text:000009D0                 mov     [eax], cx
.text:000009D3                 mov     ecx, [ebp+arg_0]
.text:000009D6                 movzx   edx, word ptr [ecx]
.text:000009D9                 cmp     edx, 0Fh
.text:000009DC                 jle     short loc_9E8
.text:000009DE                 mov     eax, 4
.text:000009E3                 jmp     loc_BD2
.text:000009E8 ; ---------------------------------------------------------------------------
.text:000009E8
.text:000009E8 loc_9E8:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+26Cj
.text:000009E8                 lea     ecx, [ebp+var_18]
.text:000009EB                 mov     edx, 6
.text:000009F0                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:000009F5                 cmp     [ebp+var_1C], eax
.text:000009F8                 jz      short loc_A04
.text:000009FA                 mov     eax, 10h
.text:000009FF                 jmp     loc_BD2
.text:00000A04 ; ---------------------------------------------------------------------------
.text:00000A04
.text:00000A04 loc_A04:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+288j
.text:00000A04                 mov     eax, [ebp+var_18]
.text:00000A07                 xor     edx, edx
.text:00000A09                 add     eax, 1
.text:00000A0C                 adc     edx, 0
.text:00000A0F                 mov     cl, 2
.text:00000A11                 call    __allshl
.text:00000A16                 mov     [ebp+var_C], eax
.text:00000A19                 mov     [ebp+var_8], edx
.text:00000A1C                 mov     eax, [ebp+var_24]
.text:00000A1F                 cmp     eax, [ebp+var_8]
.text:00000A22                 ja      short loc_A38
.text:00000A24                 jb      short loc_A2E
.text:00000A26                 mov     ecx, [ebp+var_28]
.text:00000A29                 cmp     ecx, [ebp+var_C]
.text:00000A2C                 jnb     short loc_A38
.text:00000A2E
.text:00000A2E loc_A2E:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+2B4j
.text:00000A2E                 mov     eax, 10h
.text:00000A33                 jmp     loc_BD2
.text:00000A38 ; ---------------------------------------------------------------------------
.text:00000A38
.text:00000A38 loc_A38:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+2B2j
.text:00000A38                                         ; Xz_ReadBackward(x,x,x,x)+2BCj
.text:00000A38                 mov     edx, [ebp+var_28]
.text:00000A3B                 sub     edx, [ebp+var_C]
.text:00000A3E                 mov     eax, [ebp+var_24]
.text:00000A41                 sbb     eax, [ebp+var_8]
.text:00000A44                 mov     [ebp+var_28], edx
.text:00000A47                 mov     [ebp+var_24], eax
.text:00000A4A                 mov     ecx, [ebp+var_24]
.text:00000A4D                 push    ecx
.text:00000A4E                 mov     edx, [ebp+var_28]
.text:00000A51                 push    edx
.text:00000A52                 mov     eax, [ebp+arg_4]
.text:00000A55                 push    eax
.text:00000A56                 call    _LookInStream_SeekTo@12 ; LookInStream_SeekTo(x,x,x)
.text:00000A5B                 mov     [ebp+var_448], eax
.text:00000A61                 cmp     [ebp+var_448], 0
.text:00000A68                 jz      short loc_A75
.text:00000A6A                 mov     eax, [ebp+var_448]
.text:00000A70                 jmp     loc_BD2
.text:00000A75 ; ---------------------------------------------------------------------------
.text:00000A75
.text:00000A75 loc_A75:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+2F8j
.text:00000A75                 mov     ecx, [ebp+arg_C]
.text:00000A78                 push    ecx
.text:00000A79                 mov     edx, [ebp+var_8]
.text:00000A7C                 push    edx
.text:00000A7D                 mov     eax, [ebp+var_C]
.text:00000A80                 push    eax
.text:00000A81                 mov     ecx, [ebp+arg_4]
.text:00000A84                 push    ecx
.text:00000A85                 mov     edx, [ebp+arg_0]
.text:00000A88                 push    edx
.text:00000A89                 call    _Xz_ReadIndex@20 ; Xz_ReadIndex(x,x,x,x,x)
.text:00000A8E                 mov     [ebp+var_44C], eax
.text:00000A94                 cmp     [ebp+var_44C], 0
.text:00000A9B                 jz      short loc_AA8
.text:00000A9D                 mov     eax, [ebp+var_44C]
.text:00000AA3                 jmp     loc_BD2
.text:00000AA8 ; ---------------------------------------------------------------------------
.text:00000AA8
.text:00000AA8 loc_AA8:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+32Bj
.text:00000AA8                 mov     eax, [ebp+arg_0]
.text:00000AAB                 push    eax
.text:00000AAC                 call    _Xz_GetPackSize@4 ; Xz_GetPackSize(x)
.text:00000AB1                 mov     [ebp+var_454], eax
.text:00000AB7                 mov     [ebp+var_450], edx
.text:00000ABD                 mov     ecx, [ebp+var_454]
.text:00000AC3                 and     ecx, [ebp+var_450]
.text:00000AC9                 cmp     ecx, 0FFFFFFFFh
.text:00000ACC                 jz      short loc_B1B
.text:00000ACE                 cmp     [ebp+var_450], 80000000h
.text:00000AD8                 ja      short loc_B1B
.text:00000ADA                 jb      short loc_AE5
.text:00000ADC                 cmp     [ebp+var_454], 0
.text:00000AE3                 jnb     short loc_B1B
.text:00000AE5
.text:00000AE5 loc_AE5:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+36Aj
.text:00000AE5                 mov     edx, [ebp+var_454]
.text:00000AEB                 add     edx, 0Ch
.text:00000AEE                 mov     eax, [ebp+var_450]
.text:00000AF4                 adc     eax, 0
.text:00000AF7                 mov     [ebp+var_48C], edx
.text:00000AFD                 mov     [ebp+var_488], eax
.text:00000B03                 mov     ecx, [ebp+var_24]
.text:00000B06                 cmp     ecx, [ebp+var_488]
.text:00000B0C                 ja      short loc_B25
.text:00000B0E                 jb      short loc_B1B
.text:00000B10                 mov     edx, [ebp+var_28]
.text:00000B13                 cmp     edx, [ebp+var_48C]
.text:00000B19                 jnb     short loc_B25
.text:00000B1B
.text:00000B1B loc_B1B:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+35Cj
.text:00000B1B                                         ; Xz_ReadBackward(x,x,x,x)+368j ...
.text:00000B1B                 mov     eax, 10h
.text:00000B20                 jmp     loc_BD2
.text:00000B25 ; ---------------------------------------------------------------------------
.text:00000B25
.text:00000B25 loc_B25:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+39Cj
.text:00000B25                                         ; Xz_ReadBackward(x,x,x,x)+3A9j
.text:00000B25                 mov     eax, [ebp+var_454]
.text:00000B2B                 add     eax, 0Ch
.text:00000B2E                 mov     ecx, [ebp+var_450]
.text:00000B34                 adc     ecx, 0
.text:00000B37                 mov     edx, [ebp+var_28]
.text:00000B3A                 sub     edx, eax
.text:00000B3C                 mov     eax, [ebp+var_24]
.text:00000B3F                 sbb     eax, ecx
.text:00000B41                 mov     [ebp+var_28], edx
.text:00000B44                 mov     [ebp+var_24], eax
.text:00000B47                 mov     ecx, [ebp+var_24]
.text:00000B4A                 push    ecx
.text:00000B4B                 mov     edx, [ebp+var_28]
.text:00000B4E                 push    edx
.text:00000B4F                 mov     eax, [ebp+arg_4]
.text:00000B52                 push    eax
.text:00000B53                 call    _LookInStream_SeekTo@12 ; LookInStream_SeekTo(x,x,x)
.text:00000B58                 mov     [ebp+var_458], eax
.text:00000B5E                 cmp     [ebp+var_458], 0
.text:00000B65                 jz      short loc_B6F
.text:00000B67                 mov     eax, [ebp+var_458]
.text:00000B6D                 jmp     short loc_BD2
.text:00000B6F ; ---------------------------------------------------------------------------
.text:00000B6F
.text:00000B6F loc_B6F:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+3F5j
.text:00000B6F                 mov     ecx, [ebp+arg_8]
.text:00000B72                 mov     edx, [ebp+var_28]
.text:00000B75                 mov     [ecx], edx
.text:00000B77                 mov     eax, [ebp+var_24]
.text:00000B7A                 mov     [ecx+4], eax
.text:00000B7D                 lea     ecx, [ebp+var_470]
.text:00000B83                 push    ecx
.text:00000B84                 call    _SecToRead_CreateVTable@4 ; SecToRead_CreateVTable(x)
.text:00000B89                 mov     edx, [ebp+arg_4]
.text:00000B8C                 mov     [ebp+var_46C], edx
.text:00000B92                 lea     eax, [ebp+var_470]
.text:00000B98                 push    eax
.text:00000B99                 lea     ecx, [ebp+var_460]
.text:00000B9F                 push    ecx
.text:00000BA0                 call    _Xz_ReadHeader@8 ; Xz_ReadHeader(x,x)
.text:00000BA5                 mov     [ebp+var_478], eax
.text:00000BAB                 cmp     [ebp+var_478], 0
.text:00000BB2                 jz      short loc_BBC
.text:00000BB4                 mov     eax, [ebp+var_478]
.text:00000BBA                 jmp     short loc_BD2
.text:00000BBC ; ---------------------------------------------------------------------------
.text:00000BBC
.text:00000BBC loc_BBC:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+442j
.text:00000BBC                 mov     edx, [ebp+arg_0]
.text:00000BBF                 movzx   eax, word ptr [edx]
.text:00000BC2                 movzx   ecx, [ebp+var_460]
.text:00000BC9                 sub     eax, ecx
.text:00000BCB                 neg     eax
.text:00000BCD                 sbb     eax, eax
.text:00000BCF                 and     eax, 10h
.text:00000BD2
.text:00000BD2 loc_BD2:                                ; CODE XREF: Xz_ReadBackward(x,x,x,x)+6Dj
.text:00000BD2                                         ; Xz_ReadBackward(x,x,x,x)+A7j ...
.text:00000BD2                 push    edx
.text:00000BD3                 mov     ecx, ebp
.text:00000BD5                 push    eax
.text:00000BD6                 lea     edx, $LN44
.text:00000BDC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BE1                 pop     eax
.text:00000BE2                 pop     edx
.text:00000BE3                 pop     edi
.text:00000BE4                 mov     ecx, [ebp+var_4]
.text:00000BE7                 xor     ecx, ebp
.text:00000BE9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000BEE                 add     esp, 48Ch
.text:00000BF4                 cmp     ebp, esp
.text:00000BF6                 call    __RTC_CheckEsp
.text:00000BFB                 mov     esp, ebp
.text:00000BFD                 pop     ebp
.text:00000BFE                 retn    10h
.text:00000BFE _Xz_ReadBackward@16 endp
.text:00000BFE
.text:00000BFE ; ---------------------------------------------------------------------------
.text:00000C01                 align 4
.text:00000C04 $LN44           dd 4                    ; DATA XREF: Xz_ReadBackward(x,x,x,x)+466o
.text:00000C08                 dd offset $LN43
.text:00000C0C $LN43           dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:00000C08o
.text:00000C14                 dd offset $LN39         ; "buf"
.text:00000C18                 dd 0FFFFFBC8h, 400h
.text:00000C20                 dd offset $LN40         ; "temp"
.text:00000C24                 dd 0FFFFFBA0h, 2
.text:00000C2C                 dd offset $LN41         ; "headerFlags"
.text:00000C30                 db 90h
.text:00000C31                 db 0FBh, 2 dup(0FFh)
.text:00000C34                 dd 8
.text:00000C38                 dd offset $LN42         ; "secToRead"
.text:00000C3C $LN42           db 'secToRead',0        ; DATA XREF: .text:00000C38o
.text:00000C46 $LN41           db 'headerFlags',0      ; DATA XREF: .text:00000C2Co
.text:00000C52 $LN40           db 'temp',0             ; DATA XREF: .text:00000C20o
.text:00000C57 $LN39           db 'buf',0              ; DATA XREF: .text:00000C14o
.text:00000C5B                 align 10h
.text:00000C60
.text:00000C60 ; =============== S U B R O U T I N E =======================================
.text:00000C60
.text:00000C60 ; Attributes: bp-based frame
.text:00000C60
.text:00000C60 ; __stdcall Xz_ReadIndex(x, x, x, x, x)
.text:00000C60 _Xz_ReadIndex@20 proc near              ; CODE XREF: Xz_ReadBackward(x,x,x,x)+319p
.text:00000C60
.text:00000C60 var_14          = dword ptr -14h
.text:00000C60 var_10          = dword ptr -10h
.text:00000C60 var_C           = dword ptr -0Ch
.text:00000C60 var_8           = dword ptr -8
.text:00000C60 var_4           = dword ptr -4
.text:00000C60 arg_0           = dword ptr  8
.text:00000C60 arg_4           = dword ptr  0Ch
.text:00000C60 arg_8           = dword ptr  10h
.text:00000C60 arg_C           = dword ptr  14h
.text:00000C60 arg_10          = dword ptr  18h
.text:00000C60
.text:00000C60                 push    ebp
.text:00000C61                 mov     ebp, esp
.text:00000C63                 sub     esp, 14h
.text:00000C66                 push    esi
.text:00000C67                 mov     eax, 0CCCCCCCCh
.text:00000C6C                 mov     [ebp+var_14], eax
.text:00000C6F                 mov     [ebp+var_10], eax
.text:00000C72                 mov     [ebp+var_C], eax
.text:00000C75                 mov     [ebp+var_8], eax
.text:00000C78                 mov     [ebp+var_4], eax
.text:00000C7B                 cmp     [ebp+arg_C], 0
.text:00000C7F                 ja      short loc_C8A
.text:00000C81                 cmp     [ebp+arg_8], 80000000h
.text:00000C88                 jbe     short loc_C94
.text:00000C8A
.text:00000C8A loc_C8A:                                ; CODE XREF: Xz_ReadIndex(x,x,x,x,x)+1Fj
.text:00000C8A                 mov     eax, 4
.text:00000C8F                 jmp     loc_D34
.text:00000C94 ; ---------------------------------------------------------------------------
.text:00000C94
.text:00000C94 loc_C94:                                ; CODE XREF: Xz_ReadIndex(x,x,x,x,x)+28j
.text:00000C94                 mov     eax, [ebp+arg_8]
.text:00000C97                 mov     [ebp+var_8], eax
.text:00000C9A                 mov     ecx, [ebp+var_8]
.text:00000C9D                 xor     edx, edx
.text:00000C9F                 mov     [ebp+var_14], ecx
.text:00000CA2                 mov     [ebp+var_10], edx
.text:00000CA5                 mov     eax, [ebp+var_14]
.text:00000CA8                 cmp     eax, [ebp+arg_8]
.text:00000CAB                 jnz     short loc_CB5
.text:00000CAD                 mov     ecx, [ebp+var_10]
.text:00000CB0                 cmp     ecx, [ebp+arg_C]
.text:00000CB3                 jz      short loc_CBC
.text:00000CB5
.text:00000CB5 loc_CB5:                                ; CODE XREF: Xz_ReadIndex(x,x,x,x,x)+4Bj
.text:00000CB5                 mov     eax, 4
.text:00000CBA                 jmp     short loc_D34
.text:00000CBC ; ---------------------------------------------------------------------------
.text:00000CBC
.text:00000CBC loc_CBC:                                ; CODE XREF: Xz_ReadIndex(x,x,x,x,x)+53j
.text:00000CBC                 mov     esi, esp
.text:00000CBE                 mov     edx, [ebp+var_8]
.text:00000CC1                 push    edx
.text:00000CC2                 mov     eax, [ebp+arg_10]
.text:00000CC5                 push    eax
.text:00000CC6                 mov     ecx, [ebp+arg_10]
.text:00000CC9                 mov     edx, [ecx]
.text:00000CCB                 call    edx
.text:00000CCD                 cmp     esi, esp
.text:00000CCF                 call    __RTC_CheckEsp
.text:00000CD4                 mov     [ebp+var_C], eax
.text:00000CD7                 cmp     [ebp+var_C], 0
.text:00000CDB                 jnz     short loc_CE4
.text:00000CDD                 mov     eax, 2
.text:00000CE2                 jmp     short loc_D34
.text:00000CE4 ; ---------------------------------------------------------------------------
.text:00000CE4
.text:00000CE4 loc_CE4:                                ; CODE XREF: Xz_ReadIndex(x,x,x,x,x)+7Bj
.text:00000CE4                 push    4
.text:00000CE6                 mov     eax, [ebp+var_8]
.text:00000CE9                 push    eax
.text:00000CEA                 mov     ecx, [ebp+var_C]
.text:00000CED                 push    ecx
.text:00000CEE                 mov     edx, [ebp+arg_4]
.text:00000CF1                 push    edx
.text:00000CF2                 call    _LookInStream_Read2@16 ; LookInStream_Read2(x,x,x,x)
.text:00000CF7                 mov     [ebp+var_4], eax
.text:00000CFA                 cmp     [ebp+var_4], 0
.text:00000CFE                 jnz     short loc_D18
.text:00000D00                 mov     eax, [ebp+arg_10]
.text:00000D03                 push    eax
.text:00000D04                 mov     ecx, [ebp+var_8]
.text:00000D07                 push    ecx
.text:00000D08                 mov     edx, [ebp+var_C]
.text:00000D0B                 push    edx
.text:00000D0C                 mov     eax, [ebp+arg_0]
.text:00000D0F                 push    eax
.text:00000D10                 call    _Xz_ReadIndex2@16 ; Xz_ReadIndex2(x,x,x,x)
.text:00000D15                 mov     [ebp+var_4], eax
.text:00000D18
.text:00000D18 loc_D18:                                ; CODE XREF: Xz_ReadIndex(x,x,x,x,x)+9Ej
.text:00000D18                 mov     esi, esp
.text:00000D1A                 mov     ecx, [ebp+var_C]
.text:00000D1D                 push    ecx
.text:00000D1E                 mov     edx, [ebp+arg_10]
.text:00000D21                 push    edx
.text:00000D22                 mov     eax, [ebp+arg_10]
.text:00000D25                 mov     ecx, [eax+4]
.text:00000D28                 call    ecx
.text:00000D2A                 cmp     esi, esp
.text:00000D2C                 call    __RTC_CheckEsp
.text:00000D31                 mov     eax, [ebp+var_4]
.text:00000D34
.text:00000D34 loc_D34:                                ; CODE XREF: Xz_ReadIndex(x,x,x,x,x)+2Fj
.text:00000D34                                         ; Xz_ReadIndex(x,x,x,x,x)+5Aj ...
.text:00000D34                 pop     esi
.text:00000D35                 add     esp, 14h
.text:00000D38                 cmp     ebp, esp
.text:00000D3A                 call    __RTC_CheckEsp
.text:00000D3F                 mov     esp, ebp
.text:00000D41                 pop     ebp
.text:00000D42                 retn    14h
.text:00000D42 _Xz_ReadIndex@20 endp
.text:00000D42
.text:00000D42 ; ---------------------------------------------------------------------------
.text:00000D45                 align 10h
.text:00000D50
.text:00000D50 ; =============== S U B R O U T I N E =======================================
.text:00000D50
.text:00000D50 ; Attributes: bp-based frame
.text:00000D50
.text:00000D50 ; __stdcall Xz_ReadIndex2(x, x, x, x)
.text:00000D50 _Xz_ReadIndex2@16 proc near             ; CODE XREF: Xz_ReadIndex(x,x,x,x,x)+B0p
.text:00000D50
.text:00000D50 var_40          = dword ptr -40h
.text:00000D50 var_3C          = dword ptr -3Ch
.text:00000D50 var_38          = dword ptr -38h
.text:00000D50 var_34          = dword ptr -34h
.text:00000D50 var_30          = dword ptr -30h
.text:00000D50 var_2C          = dword ptr -2Ch
.text:00000D50 var_28          = dword ptr -28h
.text:00000D50 var_24          = dword ptr -24h
.text:00000D50 var_1C          = dword ptr -1Ch
.text:00000D50 var_18          = dword ptr -18h
.text:00000D50 var_10          = dword ptr -10h
.text:00000D50 var_C           = dword ptr -0Ch
.text:00000D50 var_8           = dword ptr -8
.text:00000D50 var_4           = dword ptr -4
.text:00000D50 arg_0           = dword ptr  8
.text:00000D50 arg_4           = dword ptr  0Ch
.text:00000D50 arg_8           = dword ptr  10h
.text:00000D50 arg_C           = dword ptr  14h
.text:00000D50
.text:00000D50                 push    ebp
.text:00000D51                 mov     ebp, esp
.text:00000D53                 sub     esp, 40h
.text:00000D56                 push    esi
.text:00000D57                 push    edi
.text:00000D58                 lea     edi, [ebp+var_40]
.text:00000D5B                 mov     ecx, 10h
.text:00000D60                 mov     eax, 0CCCCCCCCh
.text:00000D65                 rep stosd
.text:00000D67                 mov     [ebp+var_C], 1
.text:00000D6E                 cmp     [ebp+arg_8], 5
.text:00000D72                 jb      short loc_D7E
.text:00000D74                 mov     eax, [ebp+arg_4]
.text:00000D77                 movzx   ecx, byte ptr [eax]
.text:00000D7A                 test    ecx, ecx
.text:00000D7C                 jz      short loc_D88
.text:00000D7E
.text:00000D7E loc_D7E:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+22j
.text:00000D7E                 mov     eax, 10h
.text:00000D83                 jmp     loc_F78
.text:00000D88 ; ---------------------------------------------------------------------------
.text:00000D88
.text:00000D88 loc_D88:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+2Cj
.text:00000D88                 mov     edx, [ebp+arg_8]
.text:00000D8B                 sub     edx, 4
.text:00000D8E                 mov     [ebp+arg_8], edx
.text:00000D91                 mov     edx, [ebp+arg_8]
.text:00000D94                 mov     ecx, [ebp+arg_4]
.text:00000D97                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00000D9C                 mov     [ebp+var_10], eax
.text:00000D9F                 mov     eax, [ebp+arg_4]
.text:00000DA2                 add     eax, [ebp+arg_8]
.text:00000DA5                 mov     ecx, [ebp+var_10]
.text:00000DA8                 cmp     ecx, [eax]
.text:00000DAA                 jz      short loc_DB6
.text:00000DAC                 mov     eax, 10h
.text:00000DB1                 jmp     loc_F78
.text:00000DB6 ; ---------------------------------------------------------------------------
.text:00000DB6
.text:00000DB6 loc_DB6:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+5Aj
.text:00000DB6                 lea     edx, [ebp+var_1C]
.text:00000DB9                 push    edx
.text:00000DBA                 mov     eax, [ebp+arg_8]
.text:00000DBD                 sub     eax, [ebp+var_C]
.text:00000DC0                 push    eax
.text:00000DC1                 mov     ecx, [ebp+arg_4]
.text:00000DC4                 add     ecx, [ebp+var_C]
.text:00000DC7                 push    ecx
.text:00000DC8                 call    _Xz_ReadVarInt@12 ; Xz_ReadVarInt(x,x,x)
.text:00000DCD                 mov     [ebp+var_24], eax
.text:00000DD0                 cmp     [ebp+var_24], 0
.text:00000DD4                 jnz     short loc_DE0
.text:00000DD6                 mov     eax, 10h
.text:00000DDB                 jmp     loc_F78
.text:00000DE0 ; ---------------------------------------------------------------------------
.text:00000DE0
.text:00000DE0 loc_DE0:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+84j
.text:00000DE0                 mov     edx, [ebp+var_C]
.text:00000DE3                 add     edx, [ebp+var_24]
.text:00000DE6                 mov     [ebp+var_C], edx
.text:00000DE9                 mov     eax, [ebp+var_1C]
.text:00000DEC                 mov     [ebp+var_8], eax
.text:00000DEF                 mov     ecx, [ebp+var_8]
.text:00000DF2                 xor     edx, edx
.text:00000DF4                 mov     [ebp+var_38], ecx
.text:00000DF7                 mov     [ebp+var_34], edx
.text:00000DFA                 mov     eax, [ebp+var_38]
.text:00000DFD                 cmp     eax, [ebp+var_1C]
.text:00000E00                 jnz     short loc_E14
.text:00000E02                 mov     ecx, [ebp+var_34]
.text:00000E05                 cmp     ecx, [ebp+var_18]
.text:00000E08                 jnz     short loc_E14
.text:00000E0A                 mov     edx, [ebp+var_8]
.text:00000E0D                 shl     edx, 1
.text:00000E0F                 cmp     edx, [ebp+arg_8]
.text:00000E12                 jbe     short loc_E1E
.text:00000E14
.text:00000E14 loc_E14:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+B0j
.text:00000E14                                         ; Xz_ReadIndex2(x,x,x,x)+B8j
.text:00000E14                 mov     eax, 10h
.text:00000E19                 jmp     loc_F78
.text:00000E1E ; ---------------------------------------------------------------------------
.text:00000E1E
.text:00000E1E loc_E1E:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+C2j
.text:00000E1E                 mov     eax, [ebp+arg_C]
.text:00000E21                 push    eax
.text:00000E22                 mov     ecx, [ebp+arg_0]
.text:00000E25                 push    ecx
.text:00000E26                 call    _Xz_Free@8      ; Xz_Free(x,x)
.text:00000E2B                 cmp     [ebp+var_8], 0
.text:00000E2F                 jz      loc_F2E
.text:00000E35                 mov     edx, [ebp+arg_0]
.text:00000E38                 mov     eax, [ebp+var_8]
.text:00000E3B                 mov     [edx+4], eax
.text:00000E3E                 mov     ecx, [ebp+arg_0]
.text:00000E41                 mov     edx, [ebp+var_8]
.text:00000E44                 mov     [ecx+8], edx
.text:00000E47                 mov     eax, [ebp+var_8]
.text:00000E4A                 shl     eax, 4
.text:00000E4D                 mov     esi, esp
.text:00000E4F                 push    eax
.text:00000E50                 mov     ecx, [ebp+arg_C]
.text:00000E53                 push    ecx
.text:00000E54                 mov     edx, [ebp+arg_C]
.text:00000E57                 mov     eax, [edx]
.text:00000E59                 call    eax
.text:00000E5B                 cmp     esi, esp
.text:00000E5D                 call    __RTC_CheckEsp
.text:00000E62                 mov     ecx, [ebp+arg_0]
.text:00000E65                 mov     [ecx+0Ch], eax
.text:00000E68                 mov     edx, [ebp+arg_0]
.text:00000E6B                 cmp     dword ptr [edx+0Ch], 0
.text:00000E6F                 jnz     short loc_E7B
.text:00000E71                 mov     eax, 2
.text:00000E76                 jmp     loc_F78
.text:00000E7B ; ---------------------------------------------------------------------------
.text:00000E7B
.text:00000E7B loc_E7B:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+11Fj
.text:00000E7B                 mov     [ebp+var_4], 0
.text:00000E82                 jmp     short loc_E8D
.text:00000E84 ; ---------------------------------------------------------------------------
.text:00000E84
.text:00000E84 loc_E84:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x):loc_F29j
.text:00000E84                 mov     eax, [ebp+var_4]
.text:00000E87                 add     eax, 1
.text:00000E8A                 mov     [ebp+var_4], eax
.text:00000E8D
.text:00000E8D loc_E8D:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+132j
.text:00000E8D                 mov     ecx, [ebp+var_4]
.text:00000E90                 cmp     ecx, [ebp+var_8]
.text:00000E93                 jnb     loc_F2E
.text:00000E99                 mov     edx, [ebp+var_4]
.text:00000E9C                 shl     edx, 4
.text:00000E9F                 mov     eax, [ebp+arg_0]
.text:00000EA2                 add     edx, [eax+0Ch]
.text:00000EA5                 mov     [ebp+var_28], edx
.text:00000EA8                 mov     ecx, [ebp+var_28]
.text:00000EAB                 add     ecx, 8
.text:00000EAE                 push    ecx
.text:00000EAF                 mov     edx, [ebp+arg_8]
.text:00000EB2                 sub     edx, [ebp+var_C]
.text:00000EB5                 push    edx
.text:00000EB6                 mov     eax, [ebp+arg_4]
.text:00000EB9                 add     eax, [ebp+var_C]
.text:00000EBC                 push    eax
.text:00000EBD                 call    _Xz_ReadVarInt@12 ; Xz_ReadVarInt(x,x,x)
.text:00000EC2                 mov     [ebp+var_2C], eax
.text:00000EC5                 cmp     [ebp+var_2C], 0
.text:00000EC9                 jnz     short loc_ED5
.text:00000ECB                 mov     eax, 10h
.text:00000ED0                 jmp     loc_F78
.text:00000ED5 ; ---------------------------------------------------------------------------
.text:00000ED5
.text:00000ED5 loc_ED5:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+179j
.text:00000ED5                 mov     ecx, [ebp+var_C]
.text:00000ED8                 add     ecx, [ebp+var_2C]
.text:00000EDB                 mov     [ebp+var_C], ecx
.text:00000EDE                 mov     edx, [ebp+var_28]
.text:00000EE1                 push    edx
.text:00000EE2                 mov     eax, [ebp+arg_8]
.text:00000EE5                 sub     eax, [ebp+var_C]
.text:00000EE8                 push    eax
.text:00000EE9                 mov     ecx, [ebp+arg_4]
.text:00000EEC                 add     ecx, [ebp+var_C]
.text:00000EEF                 push    ecx
.text:00000EF0                 call    _Xz_ReadVarInt@12 ; Xz_ReadVarInt(x,x,x)
.text:00000EF5                 mov     [ebp+var_30], eax
.text:00000EF8                 cmp     [ebp+var_30], 0
.text:00000EFC                 jnz     short loc_F05
.text:00000EFE                 mov     eax, 10h
.text:00000F03                 jmp     short loc_F78
.text:00000F05 ; ---------------------------------------------------------------------------
.text:00000F05
.text:00000F05 loc_F05:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+1ACj
.text:00000F05                 mov     edx, [ebp+var_C]
.text:00000F08                 add     edx, [ebp+var_30]
.text:00000F0B                 mov     [ebp+var_C], edx
.text:00000F0E                 mov     eax, [ebp+var_28]
.text:00000F11                 mov     [ebp+var_3C], eax
.text:00000F14                 mov     ecx, [ebp+var_3C]
.text:00000F17                 mov     edx, [ebp+var_3C]
.text:00000F1A                 mov     eax, [ecx+8]
.text:00000F1D                 or      eax, [edx+0Ch]
.text:00000F20                 jnz     short loc_F29
.text:00000F22                 mov     eax, 10h
.text:00000F27                 jmp     short loc_F78
.text:00000F29 ; ---------------------------------------------------------------------------
.text:00000F29
.text:00000F29 loc_F29:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+1D0j
.text:00000F29                 jmp     loc_E84
.text:00000F2E ; ---------------------------------------------------------------------------
.text:00000F2E
.text:00000F2E loc_F2E:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+DFj
.text:00000F2E                                         ; Xz_ReadIndex2(x,x,x,x)+143j ...
.text:00000F2E                 mov     ecx, [ebp+var_C]
.text:00000F31                 and     ecx, 3
.text:00000F34                 jz      short loc_F6B
.text:00000F36                 mov     edx, [ebp+arg_4]
.text:00000F39                 add     edx, [ebp+var_C]
.text:00000F3C                 movzx   eax, byte ptr [edx]
.text:00000F3F                 mov     ecx, [ebp+var_C]
.text:00000F42                 add     ecx, 1
.text:00000F45                 mov     [ebp+var_C], ecx
.text:00000F48                 test    eax, eax
.text:00000F4A                 jz      short loc_F55
.text:00000F4C                 mov     [ebp+var_40], 1
.text:00000F53                 jmp     short loc_F5C
.text:00000F55 ; ---------------------------------------------------------------------------
.text:00000F55
.text:00000F55 loc_F55:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+1FAj
.text:00000F55                 mov     [ebp+var_40], 0
.text:00000F5C
.text:00000F5C loc_F5C:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+203j
.text:00000F5C                 cmp     [ebp+var_40], 0
.text:00000F60                 jz      short loc_F69
.text:00000F62                 mov     eax, 10h
.text:00000F67                 jmp     short loc_F78
.text:00000F69 ; ---------------------------------------------------------------------------
.text:00000F69
.text:00000F69 loc_F69:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+210j
.text:00000F69                 jmp     short loc_F2E
.text:00000F6B ; ---------------------------------------------------------------------------
.text:00000F6B
.text:00000F6B loc_F6B:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+1E4j
.text:00000F6B                 mov     eax, [ebp+var_C]
.text:00000F6E                 sub     eax, [ebp+arg_8]
.text:00000F71                 neg     eax
.text:00000F73                 sbb     eax, eax
.text:00000F75                 and     eax, 10h
.text:00000F78
.text:00000F78 loc_F78:                                ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+33j
.text:00000F78                                         ; Xz_ReadIndex2(x,x,x,x)+61j ...
.text:00000F78                 push    edx
.text:00000F79                 mov     ecx, ebp
.text:00000F7B                 push    eax
.text:00000F7C                 lea     edx, $LN24
.text:00000F82                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F87                 pop     eax
.text:00000F88                 pop     edx
.text:00000F89                 pop     edi
.text:00000F8A                 pop     esi
.text:00000F8B                 add     esp, 40h
.text:00000F8E                 cmp     ebp, esp
.text:00000F90                 call    __RTC_CheckEsp
.text:00000F95                 mov     esp, ebp
.text:00000F97                 pop     ebp
.text:00000F98                 retn    10h
.text:00000F98 _Xz_ReadIndex2@16 endp
.text:00000F98
.text:00000F98 ; ---------------------------------------------------------------------------
.text:00000F9B                 align 4
.text:00000F9C $LN24           dd 1                    ; DATA XREF: Xz_ReadIndex2(x,x,x,x)+22Co
.text:00000FA0                 dd offset $LN23
.text:00000FA4 $LN23           dd 0FFFFFFE4h, 8        ; DATA XREF: .text:00000FA0o
.text:00000FAC                 dd offset $LN22         ; "numBlocks64"
.text:00000FB0 $LN22           db 'numBlocks64',0      ; DATA XREF: .text:00000FACo
.text:00000FBC                 align 10h
.text:00000FC0
.text:00000FC0 ; =============== S U B R O U T I N E =======================================
.text:00000FC0
.text:00000FC0 ; Attributes: bp-based frame
.text:00000FC0
.text:00000FC0 ; __stdcall LookInStream_SeekRead_ForArc(x, x, x, x, x)
.text:00000FC0 _LookInStream_SeekRead_ForArc@20 proc near
.text:00000FC0                                         ; CODE XREF: Xz_ReadBackward(x,x,x,x)+96p
.text:00000FC0                                         ; Xz_ReadBackward(x,x,x,x)+139p ...
.text:00000FC0
.text:00000FC0 var_4           = dword ptr -4
.text:00000FC0 arg_0           = dword ptr  8
.text:00000FC0 arg_4           = dword ptr  0Ch
.text:00000FC0 arg_8           = dword ptr  10h
.text:00000FC0 arg_C           = dword ptr  14h
.text:00000FC0 arg_10          = dword ptr  18h
.text:00000FC0
.text:00000FC0                 push    ebp
.text:00000FC1                 mov     ebp, esp
.text:00000FC3                 push    ecx
.text:00000FC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FCB                 mov     eax, [ebp+arg_8]
.text:00000FCE                 push    eax
.text:00000FCF                 mov     ecx, [ebp+arg_4]
.text:00000FD2                 push    ecx
.text:00000FD3                 mov     edx, [ebp+arg_0]
.text:00000FD6                 push    edx
.text:00000FD7                 call    _LookInStream_SeekTo@12 ; LookInStream_SeekTo(x,x,x)
.text:00000FDC                 mov     [ebp+var_4], eax
.text:00000FDF                 cmp     [ebp+var_4], 0
.text:00000FE3                 jz      short loc_FEA
.text:00000FE5                 mov     eax, [ebp+var_4]
.text:00000FE8                 jmp     short loc_FFB
.text:00000FEA ; ---------------------------------------------------------------------------
.text:00000FEA
.text:00000FEA loc_FEA:                                ; CODE XREF: LookInStream_SeekRead_ForArc(x,x,x,x,x)+23j
.text:00000FEA                 mov     eax, [ebp+arg_10]
.text:00000FED                 push    eax
.text:00000FEE                 mov     ecx, [ebp+arg_C]
.text:00000FF1                 push    ecx
.text:00000FF2                 mov     edx, [ebp+arg_0]
.text:00000FF5                 push    edx
.text:00000FF6                 call    _LookInStream_Read@12 ; LookInStream_Read(x,x,x)
.text:00000FFB
.text:00000FFB loc_FFB:                                ; CODE XREF: LookInStream_SeekRead_ForArc(x,x,x,x,x)+28j
.text:00000FFB                 add     esp, 4
.text:00000FFE                 cmp     ebp, esp
.text:00001000                 call    __RTC_CheckEsp
.text:00001005                 mov     esp, ebp
.text:00001007                 pop     ebp
.text:00001008                 retn    14h
.text:00001008 _LookInStream_SeekRead_ForArc@20 endp
.text:00001008
.text:00001008 ; ---------------------------------------------------------------------------
.text:0000100B                 align 4
.text:0000100B _text           ends
.text:0000100B
.rtc$TMZ:0000100C ; ===========================================================================
.rtc$TMZ:0000100C
.rtc$TMZ:0000100C ; Segment type: Pure data
.rtc$TMZ:0000100C ; Segment permissions: Read
.rtc$TMZ:0000100C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000100C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000100C                 ;org 100Ch
.rtc$TMZ:0000100C ; COMDAT (pick any)
.rtc$TMZ:0000100C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000100C _rtc$TMZ        ends
.rtc$TMZ:0000100C
.rtc$IMZ:00001010 ; ===========================================================================
.rtc$IMZ:00001010
.rtc$IMZ:00001010 ; Segment type: Pure data
.rtc$IMZ:00001010 ; Segment permissions: Read
.rtc$IMZ:00001010 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001010                 assume cs:_rtc$IMZ
.rtc$IMZ:00001010                 ;org 1010h
.rtc$IMZ:00001010 ; COMDAT (pick any)
.rtc$IMZ:00001010 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001010 _rtc$IMZ        ends
.rtc$IMZ:00001010
UNDEF:00001020 ; ===========================================================================
UNDEF:00001020
UNDEF:00001020 ; Segment type: Externs
UNDEF:00001020 ; UNDEF
UNDEF:00001020 ; __stdcall Xz_ParseHeader(x, x)
UNDEF:00001020                 extrn _Xz_ParseHeader@8:near
UNDEF:00001020                                         ; CODE XREF: Xz_ReadHeader(x,x)+6Fp
UNDEF:00001024 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001024                 extrn _memcmp:near      ; CODE XREF: Xz_ReadHeader(x,x)+54p
UNDEF:00001024                                         ; Xz_ReadBackward(x,x,x,x)+B7p ...
UNDEF:00001028                 extrn _XZ_SIG:near      ; DATA XREF: Xz_ReadHeader(x,x)+4Bo
UNDEF:0000102C ; __stdcall SeqInStream_Read2(x, x, x, x)
UNDEF:0000102C                 extrn _SeqInStream_Read2@16:near
UNDEF:0000102C                                         ; CODE XREF: Xz_ReadHeader(x,x)+36p
UNDEF:00001030                 extrn ___security_cookie:near
UNDEF:00001030                                         ; DATA XREF: Xz_ReadHeader(x,x)+20r
UNDEF:00001030                                         ; XzBlock_ReadHeader(x,x,x,x)+1Cr ...
UNDEF:00001034                 extrn __RTC_CheckEsp:near ; CODE XREF: Xz_ReadHeader(x,x)+94p
UNDEF:00001034                                         ; XzBlock_ReadHeader(x,x,x,x)+105p ...
UNDEF:00001038 ; __fastcall __security_check_cookie(x)
UNDEF:00001038                 extrn @__security_check_cookie@4:near
UNDEF:00001038                                         ; CODE XREF: Xz_ReadHeader(x,x)+8Ap
UNDEF:00001038                                         ; XzBlock_ReadHeader(x,x,x,x)+F8p ...
UNDEF:0000103C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000103C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000103C                                         ; CODE XREF: Xz_ReadHeader(x,x)+7Ep
UNDEF:0000103C                                         ; XzBlock_ReadHeader(x,x,x,x)+EBp ...
UNDEF:00001040                 extrn __RTC_Shutdown:near
UNDEF:00001040                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001044                 extrn __RTC_InitBase:near
UNDEF:00001044                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001048 ; __stdcall XzBlock_Parse(x, x)
UNDEF:00001048                 extrn _XzBlock_Parse@8:near
UNDEF:00001048                                         ; CODE XREF: XzBlock_ReadHeader(x,x,x,x)+DCp
UNDEF:0000104C ; __stdcall SeqInStream_Read(x, x, x)
UNDEF:0000104C                 extrn _SeqInStream_Read@12:near
UNDEF:0000104C                                         ; CODE XREF: XzBlock_ReadHeader(x,x,x,x)+B5p
UNDEF:00001050 ; __stdcall SeqInStream_ReadByte(x, x)
UNDEF:00001050                 extrn _SeqInStream_ReadByte@8:near
UNDEF:00001050                                         ; CODE XREF: XzBlock_ReadHeader(x,x,x,x)+3Ap
UNDEF:00001054 ; __stdcall Xz_Free(x, x)
UNDEF:00001054                 extrn _Xz_Free@8:near   ; CODE XREF: Xzs_Free(x,x)+39p
UNDEF:00001054                                         ; Xz_ReadIndex2(x,x,x,x)+D6p
UNDEF:00001058 ; __stdcall LookInStream_SeekTo(x, x, x)
UNDEF:00001058                 extrn _LookInStream_SeekTo@12:near
UNDEF:00001058                                         ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+1AAp
UNDEF:00001058                                         ; Xz_ReadBackward(x,x,x,x)+2E6p ...
UNDEF:0000105C ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000105C                 extrn _memcpy:near      ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+11Ap
UNDEF:00001060 ; __stdcall Xz_Construct(x)
UNDEF:00001060                 extrn _Xz_Construct@4:near
UNDEF:00001060                                         ; CODE XREF: Xzs_ReadBackward(x,x,x,x,x)+63p
UNDEF:00001064 ; __stdcall SecToRead_CreateVTable(x)
UNDEF:00001064                 extrn _SecToRead_CreateVTable@4:near
UNDEF:00001064                                         ; CODE XREF: Xz_ReadBackward(x,x,x,x)+414p
UNDEF:00001068 ; __fastcall CrcCalc(x, x)
UNDEF:00001068                 extrn @CrcCalc@8:near   ; CODE XREF: Xz_ReadBackward(x,x,x,x)+280p
UNDEF:00001068                                         ; Xz_ReadIndex2(x,x,x,x)+47p
UNDEF:0000106C                 extrn _XZ_FOOTER_SIG:near
UNDEF:0000106C                                         ; DATA XREF: Xz_ReadBackward(x,x,x,x)+AEo
UNDEF:0000106C                                         ; Xz_ReadBackward(x,x,x,x)+231o
UNDEF:00001070                 extrn __allshl:near     ; CODE XREF: Xz_ReadBackward(x,x,x,x)+2A1p
UNDEF:00001074 ; __stdcall LookInStream_Read2(x, x, x, x)
UNDEF:00001074                 extrn _LookInStream_Read2@16:near
UNDEF:00001074                                         ; CODE XREF: Xz_ReadIndex(x,x,x,x,x)+92p
UNDEF:00001078 ; __stdcall Xz_ReadVarInt(x, x, x)
UNDEF:00001078                 extrn _Xz_ReadVarInt@12:near
UNDEF:00001078                                         ; CODE XREF: Xz_ReadIndex2(x,x,x,x)+78p
UNDEF:00001078                                         ; Xz_ReadIndex2(x,x,x,x)+16Dp ...
UNDEF:0000107C ; __stdcall LookInStream_Read(x, x, x)
UNDEF:0000107C                 extrn _LookInStream_Read@12:near
UNDEF:0000107C                                         ; CODE XREF: LookInStream_SeekRead_ForArc(x,x,x,x,x)+36p
UNDEF:0000107C
UNDEF:0000107C
UNDEF:0000107C                 end