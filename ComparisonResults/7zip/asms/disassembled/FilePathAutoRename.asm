.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 05B3DFAE94E8322EF46A549750C496C9
.text:00000000 ; Input CRC32 : E234314A
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\FilePathAutoRename.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; bool __stdcall AutoRenamePath(struct UString *)
.text:00000000                 public ?AutoRenamePath@@YG_NAAVUString@@@Z
.text:00000000 ?AutoRenamePath@@YG_NAAVUString@@@Z proc near
.text:00000000
.text:00000000 var_60          = byte ptr -60h
.text:00000000 var_5D          = byte ptr -5Dh
.text:00000000 var_5C          = dword ptr -5Ch
.text:00000000 var_58          = dword ptr -58h
.text:00000000 var_54          = dword ptr -54h
.text:00000000 var_4C          = byte ptr -4Ch
.text:00000000 var_38          = dword ptr -38h
.text:00000000 var_24          = dword ptr -24h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$?AutoRenamePath@@YG_NAAVUString@@@Z
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 sub     esp, 54h
.text:00000014                 push    edi
.text:00000015                 lea     edi, [ebp+var_60]
.text:00000018                 mov     ecx, 15h
.text:0000001D                 mov     eax, 0CCCCCCCCh
.text:00000022                 rep stosd
.text:00000024                 mov     eax, dword ptr ds:___security_cookie
.text:00000029                 xor     eax, ebp
.text:0000002B                 push    eax
.text:0000002C                 lea     eax, [ebp+var_C]
.text:0000002F                 mov     large fs:0, eax
.text:00000035                 mov     ecx, [ebp+arg_0] ; this
.text:00000038                 call    ?ReverseFind_Dot@UString@@QBEHXZ ; UString::ReverseFind_Dot(void)
.text:0000003D                 mov     [ebp+var_10], eax
.text:00000040                 mov     ecx, [ebp+arg_0] ; this
.text:00000043                 call    ?ReverseFind_PathSepar@UString@@QBEHXZ ; UString::ReverseFind_PathSepar(void)
.text:00000048                 mov     [ebp+var_14], eax
.text:0000004B                 mov     eax, [ebp+arg_0]
.text:0000004E                 push    eax
.text:0000004F                 lea     ecx, [ebp+var_24]
.text:00000052                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00000057                 mov     [ebp+var_4], 0
.text:0000005E                 lea     ecx, [ebp+var_38]
.text:00000061                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000066                 mov     byte ptr [ebp+var_4], 1
.text:0000006A                 mov     ecx, [ebp+var_14]
.text:0000006D                 add     ecx, 1
.text:00000070                 cmp     [ebp+var_10], ecx
.text:00000073                 jle     short loc_96
.text:00000075                 mov     edx, [ebp+var_10]
.text:00000078                 push    edx             ; unsigned int
.text:00000079                 lea     ecx, [ebp+var_24] ; this
.text:0000007C                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00000081                 mov     eax, [ebp+var_10]
.text:00000084                 push    eax             ; unsigned int
.text:00000085                 mov     ecx, [ebp+arg_0] ; this
.text:00000088                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:0000008D                 push    eax
.text:0000008E                 lea     ecx, [ebp+var_38]
.text:00000091                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00000096
.text:00000096 loc_96:                                 ; CODE XREF: AutoRenamePath(UString &)+73j
.text:00000096                 push    5Fh ; '_'
.text:00000098                 lea     ecx, [ebp+var_24]
.text:0000009B                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:000000A0                 lea     ecx, [ebp+var_4C]
.text:000000A3                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000000A8                 mov     byte ptr [ebp+var_4], 2
.text:000000AC                 mov     [ebp+var_54], 1
.text:000000B3                 mov     [ebp+var_58], 40000000h
.text:000000BA
.text:000000BA loc_BA:                                 ; CODE XREF: AutoRenamePath(UString &):loc_FAj
.text:000000BA                 mov     ecx, [ebp+var_54]
.text:000000BD                 cmp     ecx, [ebp+var_58]
.text:000000C0                 jz      short loc_FC
.text:000000C2                 mov     edx, [ebp+var_54]
.text:000000C5                 add     edx, [ebp+var_58]
.text:000000C8                 shr     edx, 1
.text:000000CA                 mov     [ebp+var_5C], edx
.text:000000CD                 lea     eax, [ebp+var_4C]
.text:000000D0                 push    eax             ; UString *
.text:000000D1                 mov     ecx, [ebp+var_5C]
.text:000000D4                 push    ecx             ; unsigned int
.text:000000D5                 lea     edx, [ebp+var_38]
.text:000000D8                 push    edx             ; int
.text:000000D9                 lea     eax, [ebp+var_24]
.text:000000DC                 push    eax             ; int
.text:000000DD                 call    ?MakeAutoName@@YG_NABVUString@@0IAAV1@@Z ; MakeAutoName(UString const &,UString const &,uint,UString &)
.text:000000E2                 movzx   ecx, al
.text:000000E5                 test    ecx, ecx
.text:000000E7                 jz      short loc_F4
.text:000000E9                 mov     edx, [ebp+var_5C]
.text:000000EC                 add     edx, 1
.text:000000EF                 mov     [ebp+var_54], edx
.text:000000F2                 jmp     short loc_FA
.text:000000F4 ; ---------------------------------------------------------------------------
.text:000000F4
.text:000000F4 loc_F4:                                 ; CODE XREF: AutoRenamePath(UString &)+E7j
.text:000000F4                 mov     eax, [ebp+var_5C]
.text:000000F7                 mov     [ebp+var_58], eax
.text:000000FA
.text:000000FA loc_FA:                                 ; CODE XREF: AutoRenamePath(UString &)+F2j
.text:000000FA                 jmp     short loc_BA
.text:000000FC ; ---------------------------------------------------------------------------
.text:000000FC
.text:000000FC loc_FC:                                 ; CODE XREF: AutoRenamePath(UString &)+C0j
.text:000000FC                 mov     ecx, [ebp+arg_0]
.text:000000FF                 push    ecx             ; UString *
.text:00000100                 mov     edx, [ebp+var_58]
.text:00000103                 push    edx             ; unsigned int
.text:00000104                 lea     eax, [ebp+var_38]
.text:00000107                 push    eax             ; int
.text:00000108                 lea     ecx, [ebp+var_24]
.text:0000010B                 push    ecx             ; int
.text:0000010C                 call    ?MakeAutoName@@YG_NABVUString@@0IAAV1@@Z ; MakeAutoName(UString const &,UString const &,uint,UString &)
.text:00000111                 movzx   edx, al
.text:00000114                 neg     edx
.text:00000116                 sbb     edx, edx
.text:00000118                 add     edx, 1
.text:0000011B                 mov     [ebp+var_5D], dl
.text:0000011E                 mov     byte ptr [ebp+var_4], 1
.text:00000122                 lea     ecx, [ebp+var_4C] ; this
.text:00000125                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000012A                 mov     byte ptr [ebp+var_4], 0
.text:0000012E                 lea     ecx, [ebp+var_38] ; this
.text:00000131                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000136                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000013D                 lea     ecx, [ebp+var_24] ; this
.text:00000140                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000145                 mov     al, [ebp+var_5D]
.text:00000148                 push    edx
.text:00000149                 mov     ecx, ebp
.text:0000014B                 push    eax
.text:0000014C                 lea     edx, $LN16
.text:00000152                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000157                 pop     eax
.text:00000158                 pop     edx
.text:00000159                 mov     ecx, [ebp+var_C]
.text:0000015C                 mov     large fs:0, ecx
.text:00000163                 pop     ecx
.text:00000164                 pop     edi
.text:00000165                 add     esp, 60h
.text:00000168                 cmp     ebp, esp
.text:0000016A                 call    __RTC_CheckEsp
.text:0000016F                 mov     esp, ebp
.text:00000171                 pop     ebp
.text:00000172                 retn    4
.text:00000172 ?AutoRenamePath@@YG_NAAVUString@@@Z endp
.text:00000172
.text:00000172 ; ---------------------------------------------------------------------------
.text:00000175                 align 4
.text:00000178 $LN16           dd 3                    ; DATA XREF: AutoRenamePath(UString &)+14Co
.text:0000017C                 dd offset $LN15
.text:00000180 $LN15           dd 0FFFFFFDCh, 0Ch      ; DATA XREF: .text:0000017Co
.text:00000188                 dd offset $LN11         ; "name"
.text:0000018C                 dd 0FFFFFFC8h, 0Ch
.text:00000194                 dd offset $LN12         ; "extension"
.text:00000198                 dd 0FFFFFFB4h, 0Ch
.text:000001A0                 dd offset $LN13         ; "temp"
.text:000001A4 $LN13           db 'temp',0             ; DATA XREF: .text:000001A0o
.text:000001A9 $LN12           db 'extension',0        ; DATA XREF: .text:00000194o
.text:000001B3 $LN11           db 'name',0             ; DATA XREF: .text:00000188o
.text:000001B8                 align 10h
.text:000001C0
.text:000001C0 ; =============== S U B R O U T I N E =======================================
.text:000001C0
.text:000001C0 ; Attributes: bp-based frame
.text:000001C0
.text:000001C0 ; int __stdcall MakeAutoName(int, int, unsigned int, UString *)
.text:000001C0 ?MakeAutoName@@YG_NABVUString@@0IAAV1@@Z proc near
.text:000001C0                                         ; CODE XREF: AutoRenamePath(UString &)+DDp
.text:000001C0                                         ; AutoRenamePath(UString &)+10Cp
.text:000001C0
.text:000001C0 var_1C          = dword ptr -1Ch
.text:000001C0 var_18          = byte ptr -18h
.text:000001C0 var_14          = dword ptr -14h
.text:000001C0 var_10          = dword ptr -10h
.text:000001C0 var_C           = dword ptr -0Ch
.text:000001C0 var_8           = dword ptr -8
.text:000001C0 var_4           = dword ptr -4
.text:000001C0 arg_0           = dword ptr  8
.text:000001C0 arg_4           = dword ptr  0Ch
.text:000001C0 arg_8           = dword ptr  10h
.text:000001C0 arg_C           = dword ptr  14h
.text:000001C0
.text:000001C0                 push    ebp
.text:000001C1                 mov     ebp, esp
.text:000001C3                 sub     esp, 1Ch
.text:000001C6                 mov     eax, 0CCCCCCCCh
.text:000001CB                 mov     [ebp+var_1C], eax
.text:000001CE                 mov     dword ptr [ebp+var_18], eax
.text:000001D1                 mov     [ebp+var_14], eax
.text:000001D4                 mov     [ebp+var_10], eax
.text:000001D7                 mov     [ebp+var_C], eax
.text:000001DA                 mov     [ebp+var_8], eax
.text:000001DD                 mov     [ebp+var_4], eax
.text:000001E0                 mov     eax, dword ptr ds:___security_cookie
.text:000001E5                 xor     eax, ebp
.text:000001E7                 mov     [ebp+var_4], eax
.text:000001EA                 lea     eax, [ebp+var_18]
.text:000001ED                 push    eax             ; char *
.text:000001EE                 mov     ecx, [ebp+arg_8]
.text:000001F1                 push    ecx             ; unsigned int
.text:000001F2                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:000001F7                 mov     edx, [ebp+arg_0]
.text:000001FA                 push    edx
.text:000001FB                 mov     ecx, [ebp+arg_C]
.text:000001FE                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000203                 lea     eax, [ebp+var_18]
.text:00000206                 push    eax             ; char *
.text:00000207                 mov     ecx, [ebp+arg_C] ; this
.text:0000020A                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:0000020F                 mov     ecx, [ebp+arg_4]
.text:00000212                 push    ecx
.text:00000213                 mov     ecx, [ebp+arg_C]
.text:00000216                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:0000021B                 mov     ecx, [ebp+arg_C]
.text:0000021E                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000223                 push    eax             ; this
.text:00000224                 call    ?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NFind::DoesFileOrDirExist(wchar_t const *)
.text:00000229                 push    edx
.text:0000022A                 mov     ecx, ebp
.text:0000022C                 push    eax
.text:0000022D                 lea     edx, $LN5
.text:00000233                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000238                 pop     eax
.text:00000239                 pop     edx
.text:0000023A                 mov     ecx, [ebp+var_4]
.text:0000023D                 xor     ecx, ebp
.text:0000023F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000244                 add     esp, 1Ch
.text:00000247                 cmp     ebp, esp
.text:00000249                 call    __RTC_CheckEsp
.text:0000024E                 mov     esp, ebp
.text:00000250                 pop     ebp
.text:00000251                 retn    10h
.text:00000251 ?MakeAutoName@@YG_NABVUString@@0IAAV1@@Z endp
.text:00000251
.text:00000251 ; ---------------------------------------------------------------------------
.text:00000254 $LN5            dd 1                    ; DATA XREF: MakeAutoName(UString const &,UString const &,uint,UString &)+6Do
.text:00000258                 dd offset $LN4
.text:0000025C $LN4            dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00000258o
.text:00000264                 dd offset $LN3          ; "temp"
.text:00000268 $LN3            db 'temp',0             ; DATA XREF: .text:00000264o
.text:0000026D                 align 10h
.text:0000026D _text           ends
.text:0000026D
.text$x:00000270 ; ===========================================================================
.text$x:00000270
.text$x:00000270 ; Segment type: Pure code
.text$x:00000270 ; Segment permissions: Read/Execute
.text$x:00000270 _text$x         segment para public 'CODE' use32
.text$x:00000270                 assume cs:_text$x
.text$x:00000270                 ;org 270h
.text$x:00000270                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000270
.text$x:00000270 ; =============== S U B R O U T I N E =======================================
.text$x:00000270
.text$x:00000270
.text$x:00000270 __unwindfunclet$?AutoRenamePath@@YG_NAAVUString@@@Z$0 proc near
.text$x:00000270                                         ; DATA XREF: .xdata$x:000002A8o
.text$x:00000270                 lea     ecx, [ebp-24h]  ; this
.text$x:00000273                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000273 __unwindfunclet$?AutoRenamePath@@YG_NAAVUString@@@Z$0 endp
.text$x:00000273
.text$x:00000278
.text$x:00000278 ; =============== S U B R O U T I N E =======================================
.text$x:00000278
.text$x:00000278
.text$x:00000278 __unwindfunclet$?AutoRenamePath@@YG_NAAVUString@@@Z$1 proc near
.text$x:00000278                                         ; DATA XREF: .xdata$x:000002B0o
.text$x:00000278                 lea     ecx, [ebp-38h]  ; this
.text$x:0000027B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000027B __unwindfunclet$?AutoRenamePath@@YG_NAAVUString@@@Z$1 endp
.text$x:0000027B
.text$x:00000280
.text$x:00000280 ; =============== S U B R O U T I N E =======================================
.text$x:00000280
.text$x:00000280
.text$x:00000280 __unwindfunclet$?AutoRenamePath@@YG_NAAVUString@@@Z$2 proc near
.text$x:00000280                                         ; DATA XREF: .xdata$x:000002B8o
.text$x:00000280                 lea     ecx, [ebp-4Ch]  ; this
.text$x:00000283                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000283 __unwindfunclet$?AutoRenamePath@@YG_NAAVUString@@@Z$2 endp
.text$x:00000283
.text$x:00000288
.text$x:00000288 ; =============== S U B R O U T I N E =======================================
.text$x:00000288
.text$x:00000288
.text$x:00000288 __ehhandler$?AutoRenamePath@@YG_NAAVUString@@@Z proc near
.text$x:00000288                                         ; DATA XREF: AutoRenamePath(UString &)+5o
.text$x:00000288
.text$x:00000288 arg_4           = dword ptr  8
.text$x:00000288
.text$x:00000288                 mov     edx, [esp+arg_4]
.text$x:0000028C                 lea     eax, [edx+0Ch]
.text$x:0000028F                 mov     ecx, [edx-5Ch]
.text$x:00000292                 xor     ecx, eax
.text$x:00000294                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000299                 mov     eax, offset __ehfuncinfo$?AutoRenamePath@@YG_NAAVUString@@@Z
.text$x:0000029E                 jmp     ___CxxFrameHandler3
.text$x:0000029E __ehhandler$?AutoRenamePath@@YG_NAAVUString@@@Z endp
.text$x:0000029E
.text$x:0000029E ; ---------------------------------------------------------------------------
.text$x:000002A3                 align 4
.text$x:000002A3 _text$x         ends
.text$x:000002A3
.xdata$x:000002A4 ; ===========================================================================
.xdata$x:000002A4
.xdata$x:000002A4 ; Segment type: Pure data
.xdata$x:000002A4 ; Segment permissions: Read
.xdata$x:000002A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000002A4                 assume cs:_xdata$x
.xdata$x:000002A4                 ;org 2A4h
.xdata$x:000002A4 __unwindtable$?AutoRenamePath@@YG_NAAVUString@@@Z db 0FFh
.xdata$x:000002A4                                         ; DATA XREF: .xdata$x:000002C4o
.xdata$x:000002A5                 db 0FFh
.xdata$x:000002A6                 db 0FFh
.xdata$x:000002A7                 db 0FFh
.xdata$x:000002A8                 dd offset __unwindfunclet$?AutoRenamePath@@YG_NAAVUString@@@Z$0
.xdata$x:000002AC                 align 10h
.xdata$x:000002B0                 dd offset __unwindfunclet$?AutoRenamePath@@YG_NAAVUString@@@Z$1
.xdata$x:000002B4                 db    1
.xdata$x:000002B5                 db    0
.xdata$x:000002B6                 db    0
.xdata$x:000002B7                 db    0
.xdata$x:000002B8                 dd offset __unwindfunclet$?AutoRenamePath@@YG_NAAVUString@@@Z$2
.xdata$x:000002BC __ehfuncinfo$?AutoRenamePath@@YG_NAAVUString@@@Z db  22h ; "
.xdata$x:000002BC                                         ; DATA XREF: __ehhandler$?AutoRenamePath@@YG_NAAVUString@@@Z+11o
.xdata$x:000002BD                 db    5
.xdata$x:000002BE                 db  93h ; ô
.xdata$x:000002BF                 db  19h
.xdata$x:000002C0                 db    3
.xdata$x:000002C1                 db    0
.xdata$x:000002C2                 db    0
.xdata$x:000002C3                 db    0
.xdata$x:000002C4                 dd offset __unwindtable$?AutoRenamePath@@YG_NAAVUString@@@Z
.xdata$x:000002C8                 db    0
.xdata$x:000002C9                 db    0
.xdata$x:000002CA                 db    0
.xdata$x:000002CB                 db    0
.xdata$x:000002CC                 db    0
.xdata$x:000002CD                 db    0
.xdata$x:000002CE                 db    0
.xdata$x:000002CF                 db    0
.xdata$x:000002D0                 db    0
.xdata$x:000002D1                 db    0
.xdata$x:000002D2                 db    0
.xdata$x:000002D3                 db    0
.xdata$x:000002D4                 db    0
.xdata$x:000002D5                 db    0
.xdata$x:000002D6                 db    0
.xdata$x:000002D7                 db    0
.xdata$x:000002D8                 db    0
.xdata$x:000002D9                 db    0
.xdata$x:000002DA                 db    0
.xdata$x:000002DB                 db    0
.xdata$x:000002DC                 db    1
.xdata$x:000002DD                 db    0
.xdata$x:000002DE                 db    0
.xdata$x:000002DF                 db    0
.xdata$x:000002DF _xdata$x        ends
.xdata$x:000002DF
.rtc$TMZ:000002E0 ; ===========================================================================
.rtc$TMZ:000002E0
.rtc$TMZ:000002E0 ; Segment type: Pure data
.rtc$TMZ:000002E0 ; Segment permissions: Read
.rtc$TMZ:000002E0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000002E0                 assume cs:_rtc$TMZ
.rtc$TMZ:000002E0                 ;org 2E0h
.rtc$TMZ:000002E0 ; COMDAT (pick any)
.rtc$TMZ:000002E0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000002E0 _rtc$TMZ        ends
.rtc$TMZ:000002E0
.rtc$IMZ:000002E4 ; ===========================================================================
.rtc$IMZ:000002E4
.rtc$IMZ:000002E4 ; Segment type: Pure data
.rtc$IMZ:000002E4 ; Segment permissions: Read
.rtc$IMZ:000002E4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000002E4                 assume cs:_rtc$IMZ
.rtc$IMZ:000002E4                 ;org 2E4h
.rtc$IMZ:000002E4 ; COMDAT (pick any)
.rtc$IMZ:000002E4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000002E4 _rtc$IMZ        ends
.rtc$IMZ:000002E4
.text:000002E8 ; ===========================================================================
.text:000002E8
.text:000002E8 ; Segment type: Pure code
.text:000002E8 ; Segment permissions: Read/Execute
.text:000002E8 _text           segment para public 'CODE' use32
.text:000002E8                 assume cs:_text
.text:000002E8                 ;org 2E8h
.text:000002E8 ; COMDAT (pick any)
.text:000002E8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000002E8
.text:000002E8 ; =============== S U B R O U T I N E =======================================
.text:000002E8
.text:000002E8 ; Attributes: bp-based frame
.text:000002E8
.text:000002E8 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:000002E8                 public ??1UString@@QAE@XZ
.text:000002E8 ??1UString@@QAE@XZ proc near            ; CODE XREF: AutoRenamePath(UString &)+125p
.text:000002E8                                         ; AutoRenamePath(UString &)+131p ...
.text:000002E8
.text:000002E8 var_8           = dword ptr -8
.text:000002E8 var_4           = dword ptr -4
.text:000002E8
.text:000002E8                 push    ebp
.text:000002E9                 mov     ebp, esp
.text:000002EB                 sub     esp, 8
.text:000002EE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002FC                 mov     [ebp+var_4], ecx
.text:000002FF                 mov     eax, [ebp+var_4]
.text:00000302                 mov     ecx, [eax]
.text:00000304                 mov     [ebp+var_8], ecx
.text:00000307                 mov     edx, [ebp+var_8]
.text:0000030A                 push    edx             ; void *
.text:0000030B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000310                 add     esp, 4
.text:00000313                 add     esp, 8
.text:00000316                 cmp     ebp, esp
.text:00000318                 call    __RTC_CheckEsp
.text:0000031D                 mov     esp, ebp
.text:0000031F                 pop     ebp
.text:00000320                 retn
.text:00000320 ??1UString@@QAE@XZ endp
.text:00000320
.text:00000320 ; ---------------------------------------------------------------------------
.text:00000321                 align 4
.text:00000321 _text           ends
.text:00000321
.text:00000324 ; ===========================================================================
.text:00000324
.text:00000324 ; Segment type: Pure code
.text:00000324 ; Segment permissions: Read/Execute
.text:00000324 _text           segment para public 'CODE' use32
.text:00000324                 assume cs:_text
.text:00000324                 ;org 324h
.text:00000324 ; COMDAT (pick any)
.text:00000324                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000324
.text:00000324 ; =============== S U B R O U T I N E =======================================
.text:00000324
.text:00000324 ; Attributes: bp-based frame
.text:00000324
.text:00000324 ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:00000324                 public ?Ptr@UString@@QBEPB_WI@Z
.text:00000324 ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: AutoRenamePath(UString &)+88p
.text:00000324
.text:00000324 var_4           = dword ptr -4
.text:00000324 arg_0           = dword ptr  8
.text:00000324
.text:00000324                 push    ebp
.text:00000325                 mov     ebp, esp
.text:00000327                 push    ecx
.text:00000328                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000032F                 mov     [ebp+var_4], ecx
.text:00000332                 mov     eax, [ebp+var_4]
.text:00000335                 mov     ecx, [eax]
.text:00000337                 mov     edx, [ebp+arg_0]
.text:0000033A                 lea     eax, [ecx+edx*2]
.text:0000033D                 mov     esp, ebp
.text:0000033F                 pop     ebp
.text:00000340                 retn    4
.text:00000340 ?Ptr@UString@@QBEPB_WI@Z endp
.text:00000340
.text:00000340 ; ---------------------------------------------------------------------------
.text:00000343                 align 4
.text:00000343 _text           ends
.text:00000343
.text:00000344 ; ===========================================================================
.text:00000344
.text:00000344 ; Segment type: Pure code
.text:00000344 ; Segment permissions: Read/Execute
.text:00000344 _text           segment para public 'CODE' use32
.text:00000344                 assume cs:_text
.text:00000344                 ;org 344h
.text:00000344 ; COMDAT (pick any)
.text:00000344                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000344
.text:00000344 ; =============== S U B R O U T I N E =======================================
.text:00000344
.text:00000344 ; Attributes: bp-based frame
.text:00000344
.text:00000344 ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:00000344                 public ??YUString@@QAEAAV0@_W@Z
.text:00000344 ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: AutoRenamePath(UString &)+9Bp
.text:00000344
.text:00000344 var_C           = dword ptr -0Ch
.text:00000344 var_8           = dword ptr -8
.text:00000344 var_4           = dword ptr -4
.text:00000344 arg_0           = word ptr  8
.text:00000344
.text:00000344                 push    ebp
.text:00000345                 mov     ebp, esp
.text:00000347                 sub     esp, 0Ch
.text:0000034A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000351                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000358                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000035F                 mov     [ebp+var_4], ecx
.text:00000362                 mov     eax, [ebp+var_4]
.text:00000365                 mov     ecx, [ebp+var_4]
.text:00000368                 mov     edx, [eax+8]
.text:0000036B                 cmp     edx, [ecx+4]
.text:0000036E                 jnz     short loc_378
.text:00000370                 mov     ecx, [ebp+var_4] ; this
.text:00000373                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:00000378
.text:00000378 loc_378:                                ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:00000378                 mov     eax, [ebp+var_4]
.text:0000037B                 mov     ecx, [eax+4]
.text:0000037E                 mov     [ebp+var_8], ecx
.text:00000381                 mov     edx, [ebp+var_4]
.text:00000384                 mov     eax, [edx]
.text:00000386                 mov     [ebp+var_C], eax
.text:00000389                 mov     ecx, [ebp+var_8]
.text:0000038C                 mov     edx, [ebp+var_C]
.text:0000038F                 mov     ax, [ebp+arg_0]
.text:00000393                 mov     [edx+ecx*2], ax
.text:00000397                 mov     ecx, [ebp+var_8]
.text:0000039A                 add     ecx, 1
.text:0000039D                 mov     [ebp+var_8], ecx
.text:000003A0                 xor     edx, edx
.text:000003A2                 mov     eax, [ebp+var_8]
.text:000003A5                 mov     ecx, [ebp+var_C]
.text:000003A8                 mov     [ecx+eax*2], dx
.text:000003AC                 mov     edx, [ebp+var_4]
.text:000003AF                 mov     eax, [ebp+var_8]
.text:000003B2                 mov     [edx+4], eax
.text:000003B5                 mov     eax, [ebp+var_4]
.text:000003B8                 add     esp, 0Ch
.text:000003BB                 cmp     ebp, esp
.text:000003BD                 call    __RTC_CheckEsp
.text:000003C2                 mov     esp, ebp
.text:000003C4                 pop     ebp
.text:000003C5                 retn    4
.text:000003C5 ??YUString@@QAEAAV0@_W@Z endp
.text:000003C5
.text:000003C5 _text           ends
.text:000003C5
.text:000003C8 ; ===========================================================================
.text:000003C8
.text:000003C8 ; Segment type: Pure code
.text:000003C8 ; Segment permissions: Read/Execute
.text:000003C8 _text           segment para public 'CODE' use32
.text:000003C8                 assume cs:_text
.text:000003C8                 ;org 3C8h
.text:000003C8 ; COMDAT (pick any)
.text:000003C8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000003C8
.text:000003C8 ; =============== S U B R O U T I N E =======================================
.text:000003C8
.text:000003C8 ; Attributes: bp-based frame
.text:000003C8
.text:000003C8 ; int __thiscall UString::ReverseFind_Dot(UString *__hidden this)
.text:000003C8                 public ?ReverseFind_Dot@UString@@QBEHXZ
.text:000003C8 ?ReverseFind_Dot@UString@@QBEHXZ proc near
.text:000003C8                                         ; CODE XREF: AutoRenamePath(UString &)+38p
.text:000003C8
.text:000003C8 var_4           = dword ptr -4
.text:000003C8
.text:000003C8                 push    ebp
.text:000003C9                 mov     ebp, esp
.text:000003CB                 push    ecx
.text:000003CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003D3                 mov     [ebp+var_4], ecx
.text:000003D6                 push    2Eh ; '.'       ; wchar_t
.text:000003D8                 mov     ecx, [ebp+var_4] ; this
.text:000003DB                 call    ?ReverseFind@UString@@QBEH_W@Z ; UString::ReverseFind(wchar_t)
.text:000003E0                 add     esp, 4
.text:000003E3                 cmp     ebp, esp
.text:000003E5                 call    __RTC_CheckEsp
.text:000003EA                 mov     esp, ebp
.text:000003EC                 pop     ebp
.text:000003ED                 retn
.text:000003ED ?ReverseFind_Dot@UString@@QBEHXZ endp
.text:000003ED
.text:000003ED ; ---------------------------------------------------------------------------
.text:000003EE                 align 10h
.text:000003EE _text           ends
.text:000003EE
.text:000003F0 ; ===========================================================================
.text:000003F0
.text:000003F0 ; Segment type: Pure code
.text:000003F0 ; Segment permissions: Read/Execute
.text:000003F0 _text           segment para public 'CODE' use32
.text:000003F0                 assume cs:_text
.text:000003F0                 ;org 3F0h
.text:000003F0 ; COMDAT (pick any)
.text:000003F0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000003F0
.text:000003F0 ; =============== S U B R O U T I N E =======================================
.text:000003F0
.text:000003F0 ; Attributes: bp-based frame
.text:000003F0
.text:000003F0 ; void __thiscall UString::DeleteFrom(UString *this, unsigned int)
.text:000003F0                 public ?DeleteFrom@UString@@QAEXI@Z
.text:000003F0 ?DeleteFrom@UString@@QAEXI@Z proc near  ; CODE XREF: AutoRenamePath(UString &)+7Cp
.text:000003F0
.text:000003F0 var_4           = dword ptr -4
.text:000003F0 arg_0           = dword ptr  8
.text:000003F0
.text:000003F0                 push    ebp
.text:000003F1                 mov     ebp, esp
.text:000003F3                 push    ecx
.text:000003F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003FB                 mov     [ebp+var_4], ecx
.text:000003FE                 mov     eax, [ebp+var_4]
.text:00000401                 mov     ecx, [ebp+arg_0]
.text:00000404                 cmp     ecx, [eax+4]
.text:00000407                 jnb     short loc_420
.text:00000409                 mov     edx, [ebp+var_4]
.text:0000040C                 mov     eax, [ebp+arg_0]
.text:0000040F                 mov     [edx+4], eax
.text:00000412                 mov     ecx, [ebp+var_4]
.text:00000415                 mov     edx, [ecx]
.text:00000417                 xor     eax, eax
.text:00000419                 mov     ecx, [ebp+arg_0]
.text:0000041C                 mov     [edx+ecx*2], ax
.text:00000420
.text:00000420 loc_420:                                ; CODE XREF: UString::DeleteFrom(uint)+17j
.text:00000420                 mov     esp, ebp
.text:00000422                 pop     ebp
.text:00000423                 retn    4
.text:00000423 ?DeleteFrom@UString@@QAEXI@Z endp
.text:00000423
.text:00000423 ; ---------------------------------------------------------------------------
.text:00000426                 align 4
.text:00000426 _text           ends
.text:00000426
.text:00000428 ; ===========================================================================
.text:00000428
.text:00000428 ; Segment type: Pure code
.text:00000428 ; Segment permissions: Read/Execute
.text:00000428 _text           segment para public 'CODE' use32
.text:00000428                 assume cs:_text
.text:00000428                 ;org 428h
.text:00000428 ; COMDAT (pick any)
.text:00000428                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000428
.text:00000428 ; =============== S U B R O U T I N E =======================================
.text:00000428
.text:00000428 ; Attributes: bp-based frame
.text:00000428
.text:00000428 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000428                 public ??BUString@@QBEPB_WXZ
.text:00000428 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: MakeAutoName(UString const &,UString const &,uint,UString &)+5Ep
.text:00000428
.text:00000428 var_4           = dword ptr -4
.text:00000428
.text:00000428                 push    ebp
.text:00000429                 mov     ebp, esp
.text:0000042B                 push    ecx
.text:0000042C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000433                 mov     [ebp+var_4], ecx
.text:00000436                 mov     eax, [ebp+var_4]
.text:00000439                 mov     eax, [eax]
.text:0000043B                 mov     esp, ebp
.text:0000043D                 pop     ebp
.text:0000043E                 retn
.text:0000043E ??BUString@@QBEPB_WXZ endp
.text:0000043E
.text:0000043E _text           ends
.text:0000043E
UNDEF:00000440 ; ===========================================================================
UNDEF:00000440
UNDEF:00000440 ; Segment type: Externs
UNDEF:00000440 ; UNDEF
UNDEF:00000440 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:00000440                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:00000440                                         ; CODE XREF: AutoRenamePath(UString &)+91p
UNDEF:00000444 ; public: __thiscall UString::UString(void)
UNDEF:00000444                 extrn ??0UString@@QAE@XZ:near
UNDEF:00000444                                         ; CODE XREF: AutoRenamePath(UString &)+61p
UNDEF:00000444                                         ; AutoRenamePath(UString &)+A3p
UNDEF:00000448 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00000448                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00000448                                         ; CODE XREF: AutoRenamePath(UString &)+52p
UNDEF:0000044C ; int __thiscall UString::ReverseFind_PathSepar(UString *__hidden this)
UNDEF:0000044C                 extrn ?ReverseFind_PathSepar@UString@@QBEHXZ:near
UNDEF:0000044C                                         ; CODE XREF: AutoRenamePath(UString &)+43p
UNDEF:00000450                 extrn ___security_cookie:near
UNDEF:00000450                                         ; DATA XREF: AutoRenamePath(UString &)+24r
UNDEF:00000450                                         ; MakeAutoName(UString const &,UString const &,uint,UString &)+20r
UNDEF:00000454                 extrn ___CxxFrameHandler3:near
UNDEF:00000454                                         ; CODE XREF: __ehhandler$?AutoRenamePath@@YG_NAAVUString@@@Z+16j
UNDEF:00000458 ; __fastcall __security_check_cookie(x)
UNDEF:00000458                 extrn @__security_check_cookie@4:near
UNDEF:00000458                                         ; CODE XREF: MakeAutoName(UString const &,UString const &,uint,UString &)+7Fp
UNDEF:00000458                                         ; __ehhandler$?AutoRenamePath@@YG_NAAVUString@@@Z+Cp
UNDEF:0000045C                 extrn __RTC_CheckEsp:near
UNDEF:0000045C                                         ; CODE XREF: AutoRenamePath(UString &)+16Ap
UNDEF:0000045C                                         ; MakeAutoName(UString const &,UString const &,uint,UString &)+89p ...
UNDEF:00000460 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000460                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000460                                         ; CODE XREF: AutoRenamePath(UString &)+152p
UNDEF:00000460                                         ; MakeAutoName(UString const &,UString const &,uint,UString &)+73p
UNDEF:00000464                 extrn __RTC_Shutdown:near
UNDEF:00000464                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000468                 extrn __RTC_InitBase:near
UNDEF:00000468                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000046C ; void __cdecl operator delete(void *)
UNDEF:0000046C                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:00000470 ; void __thiscall UString::Grow_1(UString *__hidden this)
UNDEF:00000470                 extrn ?Grow_1@UString@@AAEXXZ:near
UNDEF:00000470                                         ; CODE XREF: UString::operator+=(wchar_t)+2Fp
UNDEF:00000474 ; int __thiscall UString::ReverseFind(UString *__hidden this, wchar_t)
UNDEF:00000474                 extrn ?ReverseFind@UString@@QBEH_W@Z:near
UNDEF:00000474                                         ; CODE XREF: UString::ReverseFind_Dot(void)+13p
UNDEF:00000478 ; bool NWindows::NFile::NFind::DoesFileOrDirExist(NWindows::NFile::NFind *__hidden this, const wchar_t *)
UNDEF:00000478                 extrn ?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:00000478                                         ; CODE XREF: MakeAutoName(UString const &,UString const &,uint,UString &)+64p
UNDEF:0000047C ; public: class UString & __thiscall UString::operator+=(class UString const &)
UNDEF:0000047C                 extrn ??YUString@@QAEAAV0@ABV0@@Z:near
UNDEF:0000047C                                         ; CODE XREF: MakeAutoName(UString const &,UString const &,uint,UString &)+56p
UNDEF:00000480 ; void __thiscall UString::AddAscii(UString *__hidden this, const char *)
UNDEF:00000480                 extrn ?AddAscii@UString@@QAEXPBD@Z:near
UNDEF:00000480                                         ; CODE XREF: MakeAutoName(UString const &,UString const &,uint,UString &)+4Ap
UNDEF:00000484 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:00000484                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:00000484                                         ; CODE XREF: MakeAutoName(UString const &,UString const &,uint,UString &)+3Ep
UNDEF:00000488 ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:00000488                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:00000488                                         ; CODE XREF: MakeAutoName(UString const &,UString const &,uint,UString &)+32p
UNDEF:00000488
UNDEF:00000488
UNDEF:00000488                 end