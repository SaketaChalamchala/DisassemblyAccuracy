.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 3F211B60F6071100743B3D53D408D5E9
.text:00000000 ; Input CRC32 : C0BD77C3
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\DummyOutStream.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall CDummyOutStream::Write(CDummyOutStream *this, const void *, unsigned int, unsigned int *)
.text:00000000                 public ?Write@CDummyOutStream@@UAGJPBXIPAI@Z
.text:00000000 ?Write@CDummyOutStream@@UAGJPBXIPAI@Z proc near
.text:00000000
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 this            = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 14h
.text:00000006                 push    esi
.text:00000007                 mov     eax, 0CCCCCCCCh
.text:0000000C                 mov     [ebp+var_14], eax
.text:0000000F                 mov     [ebp+var_10], eax
.text:00000012                 mov     [ebp+var_C], eax
.text:00000015                 mov     [ebp+var_8], eax
.text:00000018                 mov     [ebp+var_4], eax
.text:0000001B                 mov     eax, [ebp+arg_8]
.text:0000001E                 mov     [ebp+var_8], eax
.text:00000021                 mov     [ebp+var_10], 0
.text:00000028                 mov     ecx, [ebp+this]
.text:0000002B                 add     ecx, 8
.text:0000002E                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00000033                 test    eax, eax
.text:00000035                 jz      short loc_6B
.text:00000037                 mov     ecx, [ebp+this]
.text:0000003A                 add     ecx, 8
.text:0000003D                 call    ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->(void)
.text:00000042                 mov     [ebp+var_14], eax
.text:00000045                 mov     esi, esp
.text:00000047                 lea     ecx, [ebp+var_8]
.text:0000004A                 push    ecx
.text:0000004B                 mov     edx, [ebp+arg_8]
.text:0000004E                 push    edx
.text:0000004F                 mov     eax, [ebp+arg_4]
.text:00000052                 push    eax
.text:00000053                 mov     ecx, [ebp+var_14]
.text:00000056                 push    ecx
.text:00000057                 mov     edx, [ebp+var_14]
.text:0000005A                 mov     eax, [edx]
.text:0000005C                 mov     ecx, [eax+0Ch]
.text:0000005F                 call    ecx
.text:00000061                 cmp     esi, esp
.text:00000063                 call    __RTC_CheckEsp
.text:00000068                 mov     [ebp+var_10], eax
.text:0000006B
.text:0000006B loc_6B:                                 ; CODE XREF: CDummyOutStream::Write(void const *,uint,uint *)+35j
.text:0000006B                 mov     edx, [ebp+var_8]
.text:0000006E                 xor     eax, eax
.text:00000070                 mov     ecx, [ebp+this]
.text:00000073                 add     edx, [ecx+10h]
.text:00000076                 adc     eax, [ecx+14h]
.text:00000079                 mov     ecx, [ebp+this]
.text:0000007C                 mov     [ecx+10h], edx
.text:0000007F                 mov     [ecx+14h], eax
.text:00000082                 cmp     [ebp+arg_C], 0
.text:00000086                 jz      short loc_90
.text:00000088                 mov     edx, [ebp+arg_C]
.text:0000008B                 mov     eax, [ebp+var_8]
.text:0000008E                 mov     [edx], eax
.text:00000090
.text:00000090 loc_90:                                 ; CODE XREF: CDummyOutStream::Write(void const *,uint,uint *)+86j
.text:00000090                 mov     eax, [ebp+var_10]
.text:00000093                 push    edx
.text:00000094                 mov     ecx, ebp
.text:00000096                 push    eax
.text:00000097                 lea     edx, $LN7
.text:0000009D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000000A2                 pop     eax
.text:000000A3                 pop     edx
.text:000000A4                 pop     esi
.text:000000A5                 add     esp, 14h
.text:000000A8                 cmp     ebp, esp
.text:000000AA                 call    __RTC_CheckEsp
.text:000000AF                 mov     esp, ebp
.text:000000B1                 pop     ebp
.text:000000B2                 retn    10h
.text:000000B2 ?Write@CDummyOutStream@@UAGJPBXIPAI@Z endp
.text:000000B2
.text:000000B2 ; ---------------------------------------------------------------------------
.text:000000B5                 align 4
.text:000000B8 $LN7            dd 1                    ; DATA XREF: CDummyOutStream::Write(void const *,uint,uint *)+97o
.text:000000BC                 dd offset $LN6
.text:000000C0 $LN6            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000000BCo
.text:000000C8                 dd offset $LN5          ; "realProcessedSize"
.text:000000CC $LN5            db 'realProcessedSize',0 ; DATA XREF: .text:000000C8o
.text:000000DE                 align 10h
.text:000000DE _text           ends
.text:000000DE
.rtc$TMZ:000000E0 ; ===========================================================================
.rtc$TMZ:000000E0
.rtc$TMZ:000000E0 ; Segment type: Pure data
.rtc$TMZ:000000E0 ; Segment permissions: Read
.rtc$TMZ:000000E0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000000E0                 assume cs:_rtc$TMZ
.rtc$TMZ:000000E0                 ;org 0E0h
.rtc$TMZ:000000E0 ; COMDAT (pick any)
.rtc$TMZ:000000E0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000000E0 _rtc$TMZ        ends
.rtc$TMZ:000000E0
.rtc$IMZ:000000E4 ; ===========================================================================
.rtc$IMZ:000000E4
.rtc$IMZ:000000E4 ; Segment type: Pure data
.rtc$IMZ:000000E4 ; Segment permissions: Read
.rtc$IMZ:000000E4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000000E4                 assume cs:_rtc$IMZ
.rtc$IMZ:000000E4                 ;org 0E4h
.rtc$IMZ:000000E4 ; COMDAT (pick any)
.rtc$IMZ:000000E4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000000E4 _rtc$IMZ        ends
.rtc$IMZ:000000E4
.text:000000E8 ; ===========================================================================
.text:000000E8
.text:000000E8 ; Segment type: Pure code
.text:000000E8 ; Segment permissions: Read/Execute
.text:000000E8 _text           segment para public 'CODE' use32
.text:000000E8                 assume cs:_text
.text:000000E8                 ;org 0E8h
.text:000000E8 ; COMDAT (pick any)
.text:000000E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000000E8
.text:000000E8 ; =============== S U B R O U T I N E =======================================
.text:000000E8
.text:000000E8 ; Attributes: bp-based frame
.text:000000E8
.text:000000E8 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:000000E8                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:000000E8 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:000000E8                                         ; CODE XREF: CDummyOutStream::Write(void const *,uint,uint *)+2Ep
.text:000000E8
.text:000000E8 var_4           = dword ptr -4
.text:000000E8
.text:000000E8                 push    ebp
.text:000000E9                 mov     ebp, esp
.text:000000EB                 push    ecx
.text:000000EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000F3                 mov     [ebp+var_4], ecx
.text:000000F6                 mov     eax, [ebp+var_4]
.text:000000F9                 mov     eax, [eax]
.text:000000FB                 mov     esp, ebp
.text:000000FD                 pop     ebp
.text:000000FE                 retn
.text:000000FE ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:000000FE
.text:000000FE ; ---------------------------------------------------------------------------
.text:000000FF                 align 10h
.text:000000FF _text           ends
.text:000000FF
.text:00000100 ; ===========================================================================
.text:00000100
.text:00000100 ; Segment type: Pure code
.text:00000100 ; Segment permissions: Read/Execute
.text:00000100 _text           segment para public 'CODE' use32
.text:00000100                 assume cs:_text
.text:00000100                 ;org 100h
.text:00000100 ; COMDAT (pick any)
.text:00000100                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000100
.text:00000100 ; =============== S U B R O U T I N E =======================================
.text:00000100
.text:00000100 ; Attributes: bp-based frame
.text:00000100
.text:00000100 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator->(void)const
.text:00000100                 public ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00000100 ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00000100                                         ; CODE XREF: CDummyOutStream::Write(void const *,uint,uint *)+3Dp
.text:00000100
.text:00000100 var_4           = dword ptr -4
.text:00000100
.text:00000100                 push    ebp
.text:00000101                 mov     ebp, esp
.text:00000103                 push    ecx
.text:00000104                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000010B                 mov     [ebp+var_4], ecx
.text:0000010E                 mov     eax, [ebp+var_4]
.text:00000111                 mov     eax, [eax]
.text:00000113                 mov     esp, ebp
.text:00000115                 pop     ebp
.text:00000116                 retn
.text:00000116 ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:00000116
.text:00000116 _text           ends
.text:00000116
UNDEF:00000120 ; ===========================================================================
UNDEF:00000120
UNDEF:00000120 ; Segment type: Externs
UNDEF:00000120 ; UNDEF
UNDEF:00000120 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000120                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000120                                         ; CODE XREF: CDummyOutStream::Write(void const *,uint,uint *)+9Dp
UNDEF:00000124                 extrn __RTC_CheckEsp:near
UNDEF:00000124                                         ; CODE XREF: CDummyOutStream::Write(void const *,uint,uint *)+63p
UNDEF:00000124                                         ; CDummyOutStream::Write(void const *,uint,uint *)+AAp
UNDEF:00000128                 extrn __RTC_Shutdown:near
UNDEF:00000128                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000012C                 extrn __RTC_InitBase:near
UNDEF:0000012C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000012C
UNDEF:0000012C
UNDEF:0000012C                 end