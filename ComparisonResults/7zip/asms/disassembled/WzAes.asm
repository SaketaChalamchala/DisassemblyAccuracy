.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : B5A3943AF9F758F6EF462F11D2FCB23C
.text:00000000 ; Input CRC32 : F52FA942
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\WzAes.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall NCrypto::NWzAes::CBaseCoder::CryptoSetPassword(NCrypto::NWzAes::CBaseCoder *this, const unsigned __int8 *Src, size_t Size)
.text:00000000                 public ?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z
.text:00000000 ?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z proc near
.text:00000000
.text:00000000 this            = dword ptr  8
.text:00000000 Src             = dword ptr  0Ch
.text:00000000 Size            = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 cmp     [ebp+Size], 63h ; 'c'
.text:00000007                 jbe     short loc_10
.text:00000009                 mov     eax, 80070057h
.text:0000000E                 jmp     short loc_25
.text:00000010 ; ---------------------------------------------------------------------------
.text:00000010
.text:00000010 loc_10:                                 ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CryptoSetPassword(uchar const *,uint)+7j
.text:00000010                 mov     eax, [ebp+Size]
.text:00000013                 push    eax             ; Size
.text:00000014                 mov     ecx, [ebp+Src]
.text:00000017                 push    ecx             ; Src
.text:00000018                 mov     ecx, [ebp+this]
.text:0000001B                 add     ecx, 20h ; ' '
.text:0000001E                 call    ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ; CBuffer<uchar>::CopyFrom(uchar const *,uint)
.text:00000023                 xor     eax, eax
.text:00000025
.text:00000025 loc_25:                                 ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CryptoSetPassword(uchar const *,uint)+Ej
.text:00000025                 cmp     ebp, esp
.text:00000027                 call    __RTC_CheckEsp
.text:0000002C                 pop     ebp
.text:0000002D                 retn    0Ch
.text:0000002D ?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z endp
.text:0000002D
.text:00000030
.text:00000030 ; =============== S U B R O U T I N E =======================================
.text:00000030
.text:00000030 ; Attributes: bp-based frame
.text:00000030
.text:00000030 ; void __thiscall NCrypto::NWzAes::CBaseCoder::Init2(NCrypto::NWzAes::CBaseCoder *__hidden this)
.text:00000030                 public ?Init2@CBaseCoder@NWzAes@NCrypto@@IAEXXZ
.text:00000030 ?Init2@CBaseCoder@NWzAes@NCrypto@@IAEXXZ proc near
.text:00000030                                         ; CODE XREF: NCrypto::NWzAes::CEncoder::WriteHeader(ISequentialOutStream *)+44p
.text:00000030                                         ; NCrypto::NWzAes::CDecoder::Init_and_CheckPassword(void)+11p
.text:00000030
.text:00000030 var_D8          = dword ptr -0D8h
.text:00000030 var_D4          = dword ptr -0D4h
.text:00000030 var_D0          = dword ptr -0D0h
.text:00000030 var_CC          = dword ptr -0CCh
.text:00000030 var_C4          = dword ptr -0C4h
.text:00000030 var_B0          = dword ptr -0B0h
.text:00000030 var_A8          = dword ptr -0A8h
.text:00000030 var_60          = dword ptr -60h
.text:00000030 var_5C          = dword ptr -5Ch
.text:00000030 Src             = dword ptr -54h
.text:00000030 var_C           = dword ptr -0Ch
.text:00000030 var_8           = dword ptr -8
.text:00000030 var_4           = dword ptr -4
.text:00000030
.text:00000030                 push    ebp
.text:00000031                 mov     ebp, esp
.text:00000033                 sub     esp, 0D8h
.text:00000039                 push    edi
.text:0000003A                 push    ecx
.text:0000003B                 lea     edi, [ebp+var_D8]
.text:00000041                 mov     ecx, 36h ; '6'
.text:00000046                 mov     eax, 0CCCCCCCCh
.text:0000004B                 rep stosd
.text:0000004D                 pop     ecx
.text:0000004E                 mov     eax, dword ptr ds:___security_cookie
.text:00000053                 xor     eax, ebp
.text:00000055                 mov     [ebp+var_4], eax
.text:00000058                 mov     [ebp+var_8], ecx
.text:0000005B                 mov     [ebp+var_C], 11h
.text:00000062                 mov     ecx, [ebp+var_8]
.text:00000065                 add     ecx, 0Ch        ; this
.text:00000068                 call    ?GetKeySize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CKeyInfo::GetKeySize(void)
.text:0000006D                 mov     [ebp+var_5C], eax
.text:00000070                 mov     eax, [ebp+var_5C]
.text:00000073                 lea     ecx, [eax+eax+2]
.text:00000077                 mov     [ebp+var_60], ecx
.text:0000007A                 mov     edx, [ebp+var_60]
.text:0000007D                 add     edx, 3
.text:00000080                 shr     edx, 2
.text:00000083                 mov     [ebp+var_B0], edx
.text:00000089                 mov     ecx, [ebp+var_8]
.text:0000008C                 add     ecx, 0Ch        ; this
.text:0000008F                 call    ?GetNumSaltWords@CKeyInfo@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CKeyInfo::GetNumSaltWords(void)
.text:00000094                 mov     [ebp+var_CC], eax
.text:0000009A                 mov     [ebp+var_D0], 0
.text:000000A4                 jmp     short loc_B5
.text:000000A6 ; ---------------------------------------------------------------------------
.text:000000A6
.text:000000A6 loc_A6:                                 ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+BDj
.text:000000A6                 mov     eax, [ebp+var_D0]
.text:000000AC                 add     eax, 1
.text:000000AF                 mov     [ebp+var_D0], eax
.text:000000B5
.text:000000B5 loc_B5:                                 ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+74j
.text:000000B5                 mov     ecx, [ebp+var_D0]
.text:000000BB                 cmp     ecx, [ebp+var_CC]
.text:000000C1                 jnb     short loc_EF
.text:000000C3                 mov     edx, [ebp+var_D0]
.text:000000C9                 mov     eax, [ebp+var_8]
.text:000000CC                 lea     ecx, [eax+edx*4+10h]
.text:000000D0                 mov     [ebp+var_D4], ecx
.text:000000D6                 mov     edx, [ebp+var_D4]
.text:000000DC                 mov     eax, [edx]
.text:000000DE                 bswap   eax
.text:000000E0                 mov     ecx, [ebp+var_D0]
.text:000000E6                 mov     [ebp+ecx*4+var_C4], eax
.text:000000ED                 jmp     short loc_A6
.text:000000EF ; ---------------------------------------------------------------------------
.text:000000EF
.text:000000EF loc_EF:                                 ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+91j
.text:000000EF                 mov     edx, [ebp+var_B0]
.text:000000F5                 push    edx             ; unsigned int *
.text:000000F6                 lea     eax, [ebp+var_A8]
.text:000000FC                 push    eax             ; unsigned int
.text:000000FD                 push    3E8h            ; unsigned int
.text:00000102                 mov     ecx, [ebp+var_CC]
.text:00000108                 push    ecx             ; unsigned int *
.text:00000109                 lea     edx, [ebp+var_C4]
.text:0000010F                 push    edx             ; unsigned int
.text:00000110                 mov     ecx, [ebp+var_8]
.text:00000113                 add     ecx, 24h ; '$'
.text:00000116                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000011B                 push    eax             ; unsigned __int8 *
.text:0000011C                 mov     ecx, [ebp+var_8]
.text:0000011F                 add     ecx, 24h ; '$'
.text:00000122                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000127                 push    eax             ; struct NCrypto::NWzAes::CAesCtr2 *
.text:00000128                 call    ?Pbkdf2Hmac32@NSha1@NCrypto@@YGXPBEIPBIIIPAII@Z ; NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)
.text:0000012D                 mov     [ebp+var_D8], 0
.text:00000137                 jmp     short loc_148
.text:00000139 ; ---------------------------------------------------------------------------
.text:00000139
.text:00000139 loc_139:                                ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+13Fj
.text:00000139                 mov     eax, [ebp+var_D8]
.text:0000013F                 add     eax, 1
.text:00000142                 mov     [ebp+var_D8], eax
.text:00000148
.text:00000148 loc_148:                                ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+107j
.text:00000148                 mov     ecx, [ebp+var_D8]
.text:0000014E                 cmp     ecx, [ebp+var_B0]
.text:00000154                 jnb     short loc_171
.text:00000156                 mov     edx, [ebp+var_D8]
.text:0000015C                 mov     eax, [ebp+edx*4+var_A8]
.text:00000163                 bswap   eax
.text:00000165                 mov     ecx, [ebp+var_D8]
.text:0000016B                 mov     [ebp+ecx*4+Src], eax
.text:0000016F                 jmp     short loc_139
.text:00000171 ; ---------------------------------------------------------------------------
.text:00000171
.text:00000171 loc_171:                                ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+124j
.text:00000171                 mov     edx, [ebp+var_5C]
.text:00000174                 push    edx             ; unsigned int
.text:00000175                 mov     eax, [ebp+var_5C]
.text:00000178                 lea     ecx, [ebp+eax+Src]
.text:0000017C                 push    ecx             ; unsigned __int8 *
.text:0000017D                 mov     ecx, [ebp+var_8]
.text:00000180                 add     ecx, 30h ; '0'  ; this
.text:00000183                 call    ?SetKey@CHmac@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)
.text:00000188                 push    2               ; Size
.text:0000018A                 mov     edx, [ebp+var_5C]
.text:0000018D                 lea     eax, [ebp+edx*2+Src]
.text:00000191                 push    eax             ; Src
.text:00000192                 mov     ecx, [ebp+var_8]
.text:00000195                 add     ecx, 20h ; ' '
.text:00000198                 push    ecx             ; Dst
.text:00000199                 call    _memcpy
.text:0000019E                 add     esp, 0Ch
.text:000001A1                 mov     edx, [ebp+var_5C]
.text:000001A4                 push    edx
.text:000001A5                 mov     eax, [ebp+var_8]
.text:000001A8                 mov     ecx, [eax+0F4h]
.text:000001AE                 mov     edx, [ebp+var_8]
.text:000001B1                 lea     ecx, [edx+ecx*4+118h]
.text:000001B8                 lea     edx, [ebp+Src]
.text:000001BB                 call    @Aes_SetKey_Enc@12 ; Aes_SetKey_Enc(x,x,x)
.text:000001C0                 mov     eax, [ebp+var_8]
.text:000001C3                 add     eax, 0F0h ; '='
.text:000001C8                 push    eax             ; this
.text:000001C9                 call    ?AesCtr2_Init@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@@Z ; NCrypto::NWzAes::AesCtr2_Init(NCrypto::NWzAes::CAesCtr2 *)
.text:000001CE                 push    edx
.text:000001CF                 mov     ecx, ebp
.text:000001D1                 push    eax
.text:000001D2                 lea     edx, $LN13
.text:000001D8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001DD                 pop     eax
.text:000001DE                 pop     edx
.text:000001DF                 pop     edi
.text:000001E0                 mov     ecx, [ebp+var_4]
.text:000001E3                 xor     ecx, ebp
.text:000001E5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000001EA                 add     esp, 0D8h
.text:000001F0                 cmp     ebp, esp
.text:000001F2                 call    __RTC_CheckEsp
.text:000001F7                 mov     esp, ebp
.text:000001F9                 pop     ebp
.text:000001FA                 retn
.text:000001FA ?Init2@CBaseCoder@NWzAes@NCrypto@@IAEXXZ endp
.text:000001FA
.text:000001FA ; ---------------------------------------------------------------------------
.text:000001FB                 align 4
.text:000001FC $LN13           dd 3                    ; DATA XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+1A2o
.text:00000200                 dd offset $LN12
.text:00000204 $LN12           dd 0FFFFFFACh, 44h      ; DATA XREF: .text:00000200o
.text:0000020C                 dd offset $LN9          ; "dk"
.text:00000210                 dd 0FFFFFF58h, 44h
.text:00000218                 dd offset $LN10         ; "dk32"
.text:0000021C                 dd 0FFFFFF3Ch, 10h
.text:00000224                 dd offset $LN11         ; "salt"
.text:00000228 $LN11           db 'salt',0             ; DATA XREF: .text:00000224o
.text:0000022D $LN10           db 'dk32',0             ; DATA XREF: .text:00000218o
.text:00000232 $LN9            db 'dk',0               ; DATA XREF: .text:0000020Co
.text:00000235                 align 10h
.text:00000240
.text:00000240 ; =============== S U B R O U T I N E =======================================
.text:00000240
.text:00000240 ; Attributes: bp-based frame
.text:00000240
.text:00000240 ; __int32 __stdcall NCrypto::NWzAes::CBaseCoder::Init(NCrypto::NWzAes::CBaseCoder *this)
.text:00000240                 public ?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ
.text:00000240 ?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ proc near
.text:00000240
.text:00000240 this            = dword ptr  8
.text:00000240
.text:00000240                 push    ebp
.text:00000241                 mov     ebp, esp
.text:00000243                 xor     eax, eax
.text:00000245                 pop     ebp
.text:00000246                 retn    4
.text:00000246 ?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ endp
.text:00000246
.text:00000246 ; ---------------------------------------------------------------------------
.text:00000249                 align 10h
.text:00000250
.text:00000250 ; =============== S U B R O U T I N E =======================================
.text:00000250
.text:00000250 ; Attributes: bp-based frame
.text:00000250
.text:00000250 ; __int32 __thiscall NCrypto::NWzAes::CEncoder::WriteHeader(NCrypto::NWzAes::CEncoder *this, struct ISequentialOutStream *)
.text:00000250                 public ?WriteHeader@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z
.text:00000250 ?WriteHeader@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z proc near
.text:00000250
.text:00000250 var_C           = dword ptr -0Ch
.text:00000250 var_8           = dword ptr -8
.text:00000250 var_4           = dword ptr -4
.text:00000250 arg_0           = dword ptr  8
.text:00000250
.text:00000250                 push    ebp
.text:00000251                 mov     ebp, esp
.text:00000253                 sub     esp, 0Ch
.text:00000256                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000025D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000026B                 mov     [ebp+var_4], ecx
.text:0000026E                 mov     ecx, [ebp+var_4]
.text:00000271                 add     ecx, 0Ch        ; this
.text:00000274                 call    ?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CKeyInfo::GetSaltSize(void)
.text:00000279                 mov     [ebp+var_8], eax
.text:0000027C                 mov     eax, [ebp+var_8]
.text:0000027F                 push    eax             ; unsigned int
.text:00000280                 mov     ecx, [ebp+var_4]
.text:00000283                 add     ecx, 10h
.text:00000286                 push    ecx             ; unsigned __int8 *
.text:00000287                 mov     ecx, offset ?g_RandomGenerator@@3VCRandomGenerator@@A ; this
.text:0000028C                 call    ?Generate@CRandomGenerator@@QAEXPAEI@Z ; CRandomGenerator::Generate(uchar *,uint)
.text:00000291                 mov     ecx, [ebp+var_4] ; this
.text:00000294                 call    ?Init2@CBaseCoder@NWzAes@NCrypto@@IAEXXZ ; NCrypto::NWzAes::CBaseCoder::Init2(void)
.text:00000299                 mov     edx, [ebp+var_8]
.text:0000029C                 push    edx             ; unsigned int
.text:0000029D                 mov     eax, [ebp+var_4]
.text:000002A0                 add     eax, 10h
.text:000002A3                 push    eax             ; void *
.text:000002A4                 mov     ecx, [ebp+arg_0]
.text:000002A7                 push    ecx             ; struct ISequentialOutStream *
.text:000002A8                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:000002AD                 mov     [ebp+var_C], eax
.text:000002B0                 cmp     [ebp+var_C], 0
.text:000002B4                 jz      short loc_2BB
.text:000002B6                 mov     eax, [ebp+var_C]
.text:000002B9                 jmp     short loc_2CD
.text:000002BB ; ---------------------------------------------------------------------------
.text:000002BB
.text:000002BB loc_2BB:                                ; CODE XREF: NCrypto::NWzAes::CEncoder::WriteHeader(ISequentialOutStream *)+64j
.text:000002BB                 push    2               ; unsigned int
.text:000002BD                 mov     edx, [ebp+var_4]
.text:000002C0                 add     edx, 20h ; ' '
.text:000002C3                 push    edx             ; void *
.text:000002C4                 mov     eax, [ebp+arg_0]
.text:000002C7                 push    eax             ; struct ISequentialOutStream *
.text:000002C8                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:000002CD
.text:000002CD loc_2CD:                                ; CODE XREF: NCrypto::NWzAes::CEncoder::WriteHeader(ISequentialOutStream *)+69j
.text:000002CD                 add     esp, 0Ch
.text:000002D0                 cmp     ebp, esp
.text:000002D2                 call    __RTC_CheckEsp
.text:000002D7                 mov     esp, ebp
.text:000002D9                 pop     ebp
.text:000002DA                 retn    4
.text:000002DA ?WriteHeader@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z endp
.text:000002DA
.text:000002DA ; ---------------------------------------------------------------------------
.text:000002DD                 align 10h
.text:000002E0
.text:000002E0 ; =============== S U B R O U T I N E =======================================
.text:000002E0
.text:000002E0 ; Attributes: bp-based frame
.text:000002E0
.text:000002E0 ; __int32 __thiscall NCrypto::NWzAes::CEncoder::WriteFooter(NCrypto::NWzAes::CEncoder *this, struct ISequentialOutStream *)
.text:000002E0                 public ?WriteFooter@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z
.text:000002E0 ?WriteFooter@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z proc near
.text:000002E0
.text:000002E0 var_1C          = dword ptr -1Ch
.text:000002E0 var_18          = byte ptr -18h
.text:000002E0 var_14          = dword ptr -14h
.text:000002E0 var_10          = dword ptr -10h
.text:000002E0 var_C           = dword ptr -0Ch
.text:000002E0 var_8           = dword ptr -8
.text:000002E0 var_4           = dword ptr -4
.text:000002E0 arg_0           = dword ptr  8
.text:000002E0
.text:000002E0                 push    ebp
.text:000002E1                 mov     ebp, esp
.text:000002E3                 sub     esp, 1Ch
.text:000002E6                 mov     eax, 0CCCCCCCCh
.text:000002EB                 mov     [ebp+var_1C], eax
.text:000002EE                 mov     dword ptr [ebp+var_18], eax
.text:000002F1                 mov     [ebp+var_14], eax
.text:000002F4                 mov     [ebp+var_10], eax
.text:000002F7                 mov     [ebp+var_C], eax
.text:000002FA                 mov     [ebp+var_8], eax
.text:000002FD                 mov     [ebp+var_4], eax
.text:00000300                 mov     eax, dword ptr ds:___security_cookie
.text:00000305                 xor     eax, ebp
.text:00000307                 mov     [ebp+var_4], eax
.text:0000030A                 mov     [ebp+var_8], ecx
.text:0000030D                 push    0Ah             ; unsigned int
.text:0000030F                 lea     eax, [ebp+var_18]
.text:00000312                 push    eax             ; unsigned __int8 *
.text:00000313                 mov     ecx, [ebp+var_8]
.text:00000316                 add     ecx, 30h ; '0'  ; this
.text:00000319                 call    ?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z ; NCrypto::NSha1::CHmac::Final(uchar *,uint)
.text:0000031E                 push    0Ah             ; unsigned int
.text:00000320                 lea     ecx, [ebp+var_18]
.text:00000323                 push    ecx             ; void *
.text:00000324                 mov     edx, [ebp+arg_0]
.text:00000327                 push    edx             ; struct ISequentialOutStream *
.text:00000328                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:0000032D                 push    edx
.text:0000032E                 mov     ecx, ebp
.text:00000330                 push    eax
.text:00000331                 lea     edx, $LN5
.text:00000337                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000033C                 pop     eax
.text:0000033D                 pop     edx
.text:0000033E                 mov     ecx, [ebp+var_4]
.text:00000341                 xor     ecx, ebp
.text:00000343                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000348                 add     esp, 1Ch
.text:0000034B                 cmp     ebp, esp
.text:0000034D                 call    __RTC_CheckEsp
.text:00000352                 mov     esp, ebp
.text:00000354                 pop     ebp
.text:00000355                 retn    4
.text:00000355 ?WriteFooter@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z endp
.text:00000355
.text:00000355 ; ---------------------------------------------------------------------------
.text:00000358 $LN5            dd 1                    ; DATA XREF: NCrypto::NWzAes::CEncoder::WriteFooter(ISequentialOutStream *)+51o
.text:0000035C                 dd offset $LN4
.text:00000360 $LN4            dd 0FFFFFFE8h, 0Ah      ; DATA XREF: .text:0000035Co
.text:00000368                 dd offset $LN3
.text:0000036C $LN3            dd 63616Dh              ; DATA XREF: .text:00000368o
.text:00000370
.text:00000370 ; =============== S U B R O U T I N E =======================================
.text:00000370
.text:00000370 ; Attributes: bp-based frame
.text:00000370
.text:00000370 ; __int32 __thiscall NCrypto::NWzAes::CDecoder::ReadHeader(NCrypto::NWzAes::CDecoder *this, struct ISequentialInStream *)
.text:00000370                 public ?ReadHeader@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@@Z
.text:00000370 ?ReadHeader@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@@Z proc near
.text:00000370
.text:00000370 var_34          = dword ptr -34h
.text:00000370 var_30          = dword ptr -30h
.text:00000370 var_28          = byte ptr -28h
.text:00000370 var_10          = dword ptr -10h
.text:00000370 var_C           = dword ptr -0Ch
.text:00000370 var_8           = dword ptr -8
.text:00000370 var_4           = dword ptr -4
.text:00000370 arg_0           = dword ptr  8
.text:00000370
.text:00000370                 push    ebp
.text:00000371                 mov     ebp, esp
.text:00000373                 sub     esp, 34h
.text:00000376                 push    edi
.text:00000377                 push    ecx
.text:00000378                 lea     edi, [ebp+var_34]
.text:0000037B                 mov     ecx, 0Dh
.text:00000380                 mov     eax, 0CCCCCCCCh
.text:00000385                 rep stosd
.text:00000387                 pop     ecx
.text:00000388                 mov     eax, dword ptr ds:___security_cookie
.text:0000038D                 xor     eax, ebp
.text:0000038F                 mov     [ebp+var_4], eax
.text:00000392                 mov     [ebp+var_8], ecx
.text:00000395                 mov     ecx, [ebp+var_8]
.text:00000398                 add     ecx, 0Ch        ; this
.text:0000039B                 call    ?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CKeyInfo::GetSaltSize(void)
.text:000003A0                 mov     [ebp+var_C], eax
.text:000003A3                 mov     eax, [ebp+var_C]
.text:000003A6                 add     eax, 2
.text:000003A9                 mov     [ebp+var_10], eax
.text:000003AC                 mov     ecx, [ebp+var_10]
.text:000003AF                 push    ecx             ; unsigned int
.text:000003B0                 lea     edx, [ebp+var_28]
.text:000003B3                 push    edx             ; void *
.text:000003B4                 mov     eax, [ebp+arg_0]
.text:000003B7                 push    eax             ; struct ISequentialInStream *
.text:000003B8                 call    ?ReadStream_FAIL@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FAIL(ISequentialInStream *,void *,uint)
.text:000003BD                 mov     [ebp+var_30], eax
.text:000003C0                 cmp     [ebp+var_30], 0
.text:000003C4                 jz      short loc_3CB
.text:000003C6                 mov     eax, [ebp+var_30]
.text:000003C9                 jmp     short loc_429
.text:000003CB ; ---------------------------------------------------------------------------
.text:000003CB
.text:000003CB loc_3CB:                                ; CODE XREF: NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)+54j
.text:000003CB                 mov     [ebp+var_34], 0
.text:000003D2                 jmp     short loc_3DD
.text:000003D4 ; ---------------------------------------------------------------------------
.text:000003D4
.text:000003D4 loc_3D4:                                ; CODE XREF: NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)+85j
.text:000003D4                 mov     ecx, [ebp+var_34]
.text:000003D7                 add     ecx, 1
.text:000003DA                 mov     [ebp+var_34], ecx
.text:000003DD
.text:000003DD loc_3DD:                                ; CODE XREF: NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)+62j
.text:000003DD                 mov     edx, [ebp+var_34]
.text:000003E0                 cmp     edx, [ebp+var_C]
.text:000003E3                 jnb     short loc_3F7
.text:000003E5                 mov     eax, [ebp+var_8]
.text:000003E8                 add     eax, [ebp+var_34]
.text:000003EB                 mov     ecx, [ebp+var_34]
.text:000003EE                 mov     dl, [ebp+ecx+var_28]
.text:000003F2                 mov     [eax+10h], dl
.text:000003F5                 jmp     short loc_3D4
.text:000003F7 ; ---------------------------------------------------------------------------
.text:000003F7
.text:000003F7 loc_3F7:                                ; CODE XREF: NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)+73j
.text:000003F7                 mov     [ebp+var_34], 0
.text:000003FE                 jmp     short loc_409
.text:00000400 ; ---------------------------------------------------------------------------
.text:00000400
.text:00000400 loc_400:                                ; CODE XREF: NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)+B5j
.text:00000400                 mov     eax, [ebp+var_34]
.text:00000403                 add     eax, 1
.text:00000406                 mov     [ebp+var_34], eax
.text:00000409
.text:00000409 loc_409:                                ; CODE XREF: NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)+8Ej
.text:00000409                 cmp     [ebp+var_34], 2
.text:0000040D                 jnb     short loc_427
.text:0000040F                 mov     ecx, [ebp+var_C]
.text:00000412                 add     ecx, [ebp+var_34]
.text:00000415                 mov     edx, [ebp+var_8]
.text:00000418                 add     edx, [ebp+var_34]
.text:0000041B                 mov     al, [ebp+ecx+var_28]
.text:0000041F                 mov     [edx+228h], al
.text:00000425                 jmp     short loc_400
.text:00000427 ; ---------------------------------------------------------------------------
.text:00000427
.text:00000427 loc_427:                                ; CODE XREF: NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)+9Dj
.text:00000427                 xor     eax, eax
.text:00000429
.text:00000429 loc_429:                                ; CODE XREF: NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)+59j
.text:00000429                 push    edx
.text:0000042A                 mov     ecx, ebp
.text:0000042C                 push    eax
.text:0000042D                 lea     edx, $LN12_0
.text:00000433                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000438                 pop     eax
.text:00000439                 pop     edx
.text:0000043A                 pop     edi
.text:0000043B                 mov     ecx, [ebp+var_4]
.text:0000043E                 xor     ecx, ebp
.text:00000440                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000445                 add     esp, 34h
.text:00000448                 cmp     ebp, esp
.text:0000044A                 call    __RTC_CheckEsp
.text:0000044F                 mov     esp, ebp
.text:00000451                 pop     ebp
.text:00000452                 retn    4
.text:00000452 ?ReadHeader@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@@Z endp
.text:00000452
.text:00000452 ; ---------------------------------------------------------------------------
.text:00000455                 align 4
.text:00000458 $LN12_0         dd 1                    ; DATA XREF: NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)+BDo
.text:0000045C                 dd offset $LN11_0
.text:00000460 $LN11_0         dd 0FFFFFFD8h, 12h      ; DATA XREF: .text:0000045Co
.text:00000468                 dd offset $LN10_0       ; "temp"
.text:0000046C $LN10_0         db 'temp',0             ; DATA XREF: .text:00000468o
.text:00000471                 align 10h
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 ; bool __thiscall NCrypto::NWzAes::CDecoder::Init_and_CheckPassword(NCrypto::NWzAes::CDecoder *__hidden this)
.text:00000480                 public ?Init_and_CheckPassword@CDecoder@NWzAes@NCrypto@@QAE_NXZ
.text:00000480 ?Init_and_CheckPassword@CDecoder@NWzAes@NCrypto@@QAE_NXZ proc near
.text:00000480
.text:00000480 var_4           = dword ptr -4
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 push    ecx
.text:00000484                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000048B                 mov     [ebp+var_4], ecx
.text:0000048E                 mov     ecx, [ebp+var_4] ; this
.text:00000491                 call    ?Init2@CBaseCoder@NWzAes@NCrypto@@IAEXXZ ; NCrypto::NWzAes::CBaseCoder::Init2(void)
.text:00000496                 push    2
.text:00000498                 mov     eax, [ebp+var_4]
.text:0000049B                 add     eax, 228h
.text:000004A0                 push    eax
.text:000004A1                 mov     ecx, [ebp+var_4]
.text:000004A4                 add     ecx, 20h ; ' '
.text:000004A7                 push    ecx
.text:000004A8                 call    ?CompareArrays@NWzAes@NCrypto@@YG_NPBE0I@Z ; NCrypto::NWzAes::CompareArrays(uchar const *,uchar const *,uint)
.text:000004AD                 add     esp, 4
.text:000004B0                 cmp     ebp, esp
.text:000004B2                 call    __RTC_CheckEsp
.text:000004B7                 mov     esp, ebp
.text:000004B9                 pop     ebp
.text:000004BA                 retn
.text:000004BA ?Init_and_CheckPassword@CDecoder@NWzAes@NCrypto@@QAE_NXZ endp
.text:000004BA
.text:000004BA ; ---------------------------------------------------------------------------
.text:000004BB                 align 10h
.text:000004C0
.text:000004C0 ; =============== S U B R O U T I N E =======================================
.text:000004C0
.text:000004C0 ; Attributes: bp-based frame
.text:000004C0
.text:000004C0 ; bool __stdcall NCrypto::NWzAes::CompareArrays(unsigned char const *, unsigned char const *, unsigned int)
.text:000004C0 ?CompareArrays@NWzAes@NCrypto@@YG_NPBE0I@Z proc near
.text:000004C0                                         ; CODE XREF: NCrypto::NWzAes::CDecoder::Init_and_CheckPassword(void)+28p
.text:000004C0                                         ; NCrypto::NWzAes::CDecoder::CheckMac(ISequentialInStream *,bool &)+63p
.text:000004C0
.text:000004C0 var_4           = dword ptr -4
.text:000004C0 arg_0           = dword ptr  8
.text:000004C0 arg_4           = dword ptr  0Ch
.text:000004C0 arg_8           = dword ptr  10h
.text:000004C0
.text:000004C0                 push    ebp
.text:000004C1                 mov     ebp, esp
.text:000004C3                 push    ecx
.text:000004C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004CB                 mov     [ebp+var_4], 0
.text:000004D2                 jmp     short loc_4DD
.text:000004D4 ; ---------------------------------------------------------------------------
.text:000004D4
.text:000004D4 loc_4D4:                                ; CODE XREF: NCrypto::NWzAes::CompareArrays(uchar const *,uchar const *,uint):loc_4FFj
.text:000004D4                 mov     eax, [ebp+var_4]
.text:000004D7                 add     eax, 1
.text:000004DA                 mov     [ebp+var_4], eax
.text:000004DD
.text:000004DD loc_4DD:                                ; CODE XREF: NCrypto::NWzAes::CompareArrays(uchar const *,uchar const *,uint)+12j
.text:000004DD                 mov     ecx, [ebp+var_4]
.text:000004E0                 cmp     ecx, [ebp+arg_8]
.text:000004E3                 jnb     short loc_501
.text:000004E5                 mov     edx, [ebp+arg_0]
.text:000004E8                 add     edx, [ebp+var_4]
.text:000004EB                 movzx   eax, byte ptr [edx]
.text:000004EE                 mov     ecx, [ebp+arg_4]
.text:000004F1                 add     ecx, [ebp+var_4]
.text:000004F4                 movzx   edx, byte ptr [ecx]
.text:000004F7                 cmp     eax, edx
.text:000004F9                 jz      short loc_4FF
.text:000004FB                 xor     al, al
.text:000004FD                 jmp     short loc_503
.text:000004FF ; ---------------------------------------------------------------------------
.text:000004FF
.text:000004FF loc_4FF:                                ; CODE XREF: NCrypto::NWzAes::CompareArrays(uchar const *,uchar const *,uint)+39j
.text:000004FF                 jmp     short loc_4D4
.text:00000501 ; ---------------------------------------------------------------------------
.text:00000501
.text:00000501 loc_501:                                ; CODE XREF: NCrypto::NWzAes::CompareArrays(uchar const *,uchar const *,uint)+23j
.text:00000501                 mov     al, 1
.text:00000503
.text:00000503 loc_503:                                ; CODE XREF: NCrypto::NWzAes::CompareArrays(uchar const *,uchar const *,uint)+3Dj
.text:00000503                 mov     esp, ebp
.text:00000505                 pop     ebp
.text:00000506                 retn    0Ch
.text:00000506 ?CompareArrays@NWzAes@NCrypto@@YG_NPBE0I@Z endp
.text:00000506
.text:00000506 ; ---------------------------------------------------------------------------
.text:00000509                 align 10h
.text:00000510
.text:00000510 ; =============== S U B R O U T I N E =======================================
.text:00000510
.text:00000510 ; Attributes: bp-based frame
.text:00000510
.text:00000510 ; __int32 __thiscall NCrypto::NWzAes::CDecoder::CheckMac(NCrypto::NWzAes::CDecoder *this, struct ISequentialInStream *, bool *)
.text:00000510                 public ?CheckMac@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@AA_N@Z
.text:00000510 ?CheckMac@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@AA_N@Z proc near
.text:00000510
.text:00000510 var_34          = byte ptr -34h
.text:00000510 var_30          = byte ptr -30h
.text:00000510 var_20          = dword ptr -20h
.text:00000510 var_18          = byte ptr -18h
.text:00000510 var_8           = dword ptr -8
.text:00000510 var_4           = dword ptr -4
.text:00000510 arg_0           = dword ptr  8
.text:00000510 arg_4           = dword ptr  0Ch
.text:00000510
.text:00000510                 push    ebp
.text:00000511                 mov     ebp, esp
.text:00000513                 sub     esp, 34h
.text:00000516                 push    edi
.text:00000517                 push    ecx
.text:00000518                 lea     edi, [ebp+var_34]
.text:0000051B                 mov     ecx, 0Dh
.text:00000520                 mov     eax, 0CCCCCCCCh
.text:00000525                 rep stosd
.text:00000527                 pop     ecx
.text:00000528                 mov     eax, dword ptr ds:___security_cookie
.text:0000052D                 xor     eax, ebp
.text:0000052F                 mov     [ebp+var_4], eax
.text:00000532                 mov     [ebp+var_8], ecx
.text:00000535                 mov     eax, [ebp+arg_4]
.text:00000538                 mov     byte ptr [eax], 0
.text:0000053B                 push    0Ah             ; unsigned int
.text:0000053D                 lea     ecx, [ebp+var_18]
.text:00000540                 push    ecx             ; void *
.text:00000541                 mov     edx, [ebp+arg_0]
.text:00000544                 push    edx             ; struct ISequentialInStream *
.text:00000545                 call    ?ReadStream_FAIL@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FAIL(ISequentialInStream *,void *,uint)
.text:0000054A                 mov     [ebp+var_20], eax
.text:0000054D                 cmp     [ebp+var_20], 0
.text:00000551                 jz      short loc_558
.text:00000553                 mov     eax, [ebp+var_20]
.text:00000556                 jmp     short loc_57F
.text:00000558 ; ---------------------------------------------------------------------------
.text:00000558
.text:00000558 loc_558:                                ; CODE XREF: NCrypto::NWzAes::CDecoder::CheckMac(ISequentialInStream *,bool &)+41j
.text:00000558                 push    0Ah             ; unsigned int
.text:0000055A                 lea     eax, [ebp+var_30]
.text:0000055D                 push    eax             ; unsigned __int8 *
.text:0000055E                 mov     ecx, [ebp+var_8]
.text:00000561                 add     ecx, 30h ; '0'  ; this
.text:00000564                 call    ?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z ; NCrypto::NSha1::CHmac::Final(uchar *,uint)
.text:00000569                 push    0Ah
.text:0000056B                 lea     ecx, [ebp+var_30]
.text:0000056E                 push    ecx
.text:0000056F                 lea     edx, [ebp+var_18]
.text:00000572                 push    edx
.text:00000573                 call    ?CompareArrays@NWzAes@NCrypto@@YG_NPBE0I@Z ; NCrypto::NWzAes::CompareArrays(uchar const *,uchar const *,uint)
.text:00000578                 mov     ecx, [ebp+arg_4]
.text:0000057B                 mov     [ecx], al
.text:0000057D                 xor     eax, eax
.text:0000057F
.text:0000057F loc_57F:                                ; CODE XREF: NCrypto::NWzAes::CDecoder::CheckMac(ISequentialInStream *,bool &)+46j
.text:0000057F                 push    edx
.text:00000580                 mov     ecx, ebp
.text:00000582                 push    eax
.text:00000583                 lea     edx, $LN7
.text:00000589                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000058E                 pop     eax
.text:0000058F                 pop     edx
.text:00000590                 pop     edi
.text:00000591                 mov     ecx, [ebp+var_4]
.text:00000594                 xor     ecx, ebp
.text:00000596                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000059B                 add     esp, 34h
.text:0000059E                 cmp     ebp, esp
.text:000005A0                 call    __RTC_CheckEsp
.text:000005A5                 mov     esp, ebp
.text:000005A7                 pop     ebp
.text:000005A8                 retn    8
.text:000005A8 ?CheckMac@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@AA_N@Z endp
.text:000005A8
.text:000005A8 ; ---------------------------------------------------------------------------
.text:000005AB                 align 4
.text:000005AC $LN7            dd 2                    ; DATA XREF: NCrypto::NWzAes::CDecoder::CheckMac(ISequentialInStream *,bool &)+73o
.text:000005B0                 dd offset $LN6
.text:000005B4 $LN6            dd 0FFFFFFE8h, 0Ah      ; DATA XREF: .text:000005B0o
.text:000005BC                 dd offset $LN4_0        ; "mac1"
.text:000005C0                 dd 0FFFFFFD0h, 0Ah
.text:000005C8                 dd offset $LN5_0        ; "mac2"
.text:000005CC $LN5_0          db 'mac2',0             ; DATA XREF: .text:000005C8o
.text:000005D1 $LN4_0          db 'mac1',0             ; DATA XREF: .text:000005BCo
.text:000005D6                 align 10h
.text:000005E0
.text:000005E0 ; =============== S U B R O U T I N E =======================================
.text:000005E0
.text:000005E0 ; Attributes: bp-based frame
.text:000005E0
.text:000005E0 ; _DWORD __thiscall NCrypto::NWzAes::CAesCtr2::CAesCtr2(NCrypto::NWzAes::CAesCtr2 *__hidden this)
.text:000005E0                 public ??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ
.text:000005E0 ??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ proc near
.text:000005E0
.text:000005E0 var_4           = dword ptr -4
.text:000005E0
.text:000005E0                 push    ebp
.text:000005E1                 mov     ebp, esp
.text:000005E3                 push    ecx
.text:000005E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005EB                 mov     [ebp+var_4], ecx
.text:000005EE                 mov     eax, [ebp+var_4]
.text:000005F1                 add     eax, 8
.text:000005F4                 xor     ecx, ecx
.text:000005F6                 sub     ecx, eax
.text:000005F8                 and     ecx, 0Fh
.text:000005FB                 shr     ecx, 2
.text:000005FE                 mov     edx, [ebp+var_4]
.text:00000601                 mov     [edx+4], ecx
.text:00000604                 mov     eax, [ebp+var_4]
.text:00000607                 mov     esp, ebp
.text:00000609                 pop     ebp
.text:0000060A                 retn
.text:0000060A ??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ endp
.text:0000060A
.text:0000060A ; ---------------------------------------------------------------------------
.text:0000060B                 align 10h
.text:00000610
.text:00000610 ; =============== S U B R O U T I N E =======================================
.text:00000610
.text:00000610 ; Attributes: bp-based frame
.text:00000610
.text:00000610 ; void __stdcall NCrypto::NWzAes::AesCtr2_Init(NCrypto::NWzAes *this, struct NCrypto::NWzAes::CAesCtr2 *)
.text:00000610                 public ?AesCtr2_Init@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@@Z
.text:00000610 ?AesCtr2_Init@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@@Z proc near
.text:00000610                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+199p
.text:00000610
.text:00000610 var_8           = dword ptr -8
.text:00000610 var_4           = dword ptr -4
.text:00000610 this            = dword ptr  8
.text:00000610
.text:00000610                 push    ebp
.text:00000611                 mov     ebp, esp
.text:00000613                 sub     esp, 8
.text:00000616                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000061D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000624                 mov     eax, [ebp+this]
.text:00000627                 mov     ecx, [eax+4]
.text:0000062A                 mov     edx, [ebp+this]
.text:0000062D                 lea     eax, [edx+ecx*4+18h]
.text:00000631                 mov     [ebp+var_4], eax
.text:00000634                 mov     [ebp+var_8], 0
.text:0000063B                 jmp     short loc_646
.text:0000063D ; ---------------------------------------------------------------------------
.text:0000063D
.text:0000063D loc_63D:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Init(NCrypto::NWzAes::CAesCtr2 *)+49j
.text:0000063D                 mov     ecx, [ebp+var_8]
.text:00000640                 add     ecx, 1
.text:00000643                 mov     [ebp+var_8], ecx
.text:00000646
.text:00000646 loc_646:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Init(NCrypto::NWzAes::CAesCtr2 *)+2Bj
.text:00000646                 cmp     [ebp+var_8], 4
.text:0000064A                 jnb     short loc_65B
.text:0000064C                 mov     edx, [ebp+var_8]
.text:0000064F                 mov     eax, [ebp+var_4]
.text:00000652                 mov     dword ptr [eax+edx*4], 0
.text:00000659                 jmp     short loc_63D
.text:0000065B ; ---------------------------------------------------------------------------
.text:0000065B
.text:0000065B loc_65B:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Init(NCrypto::NWzAes::CAesCtr2 *)+3Aj
.text:0000065B                 mov     ecx, [ebp+this]
.text:0000065E                 mov     dword ptr [ecx], 10h
.text:00000664                 mov     esp, ebp
.text:00000666                 pop     ebp
.text:00000667                 retn    4
.text:00000667 ?AesCtr2_Init@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@@Z endp
.text:00000667
.text:00000667 ; ---------------------------------------------------------------------------
.text:0000066A                 align 10h
.text:00000670
.text:00000670 ; =============== S U B R O U T I N E =======================================
.text:00000670
.text:00000670 ; Attributes: bp-based frame
.text:00000670
.text:00000670 ; void __stdcall NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes *this, struct NCrypto::NWzAes::CAesCtr2 *, unsigned __int8 *, unsigned int)
.text:00000670                 public ?AesCtr2_Code@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@PAEI@Z
.text:00000670 ?AesCtr2_Code@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@PAEI@Z proc near
.text:00000670                                         ; CODE XREF: NCrypto::NWzAes::CEncoder::Filter(uchar *,uint)+15p
.text:00000670                                         ; NCrypto::NWzAes::CDecoder::Filter(uchar *,uint)+28p
.text:00000670
.text:00000670 var_18          = dword ptr -18h
.text:00000670 var_14          = dword ptr -14h
.text:00000670 var_10          = dword ptr -10h
.text:00000670 var_C           = dword ptr -0Ch
.text:00000670 var_8           = dword ptr -8
.text:00000670 var_4           = dword ptr -4
.text:00000670 this            = dword ptr  8
.text:00000670 arg_4           = dword ptr  0Ch
.text:00000670 arg_8           = dword ptr  10h
.text:00000670
.text:00000670                 push    ebp
.text:00000671                 mov     ebp, esp
.text:00000673                 sub     esp, 18h
.text:00000676                 push    esi
.text:00000677                 mov     eax, 0CCCCCCCCh
.text:0000067C                 mov     [ebp+var_18], eax
.text:0000067F                 mov     [ebp+var_14], eax
.text:00000682                 mov     [ebp+var_10], eax
.text:00000685                 mov     [ebp+var_C], eax
.text:00000688                 mov     [ebp+var_8], eax
.text:0000068B                 mov     [ebp+var_4], eax
.text:0000068E                 mov     eax, [ebp+this]
.text:00000691                 mov     ecx, [eax]
.text:00000693                 mov     [ebp+var_4], ecx
.text:00000696                 mov     edx, [ebp+this]
.text:00000699                 mov     eax, [edx+4]
.text:0000069C                 mov     ecx, [ebp+this]
.text:0000069F                 lea     edx, [ecx+eax*4+8]
.text:000006A3                 mov     [ebp+var_8], edx
.text:000006A6                 cmp     [ebp+arg_8], 0
.text:000006AA                 jnz     short loc_6B1
.text:000006AC                 jmp     loc_7D6
.text:000006B1 ; ---------------------------------------------------------------------------
.text:000006B1
.text:000006B1 loc_6B1:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+3Aj
.text:000006B1                 cmp     [ebp+var_4], 10h
.text:000006B5                 jz      short loc_6F6
.text:000006B7                 mov     eax, [ebp+var_8]
.text:000006BA                 mov     [ebp+var_C], eax
.text:000006BD
.text:000006BD loc_6BD:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+84j
.text:000006BD                 mov     ecx, [ebp+var_C]
.text:000006C0                 add     ecx, [ebp+var_4]
.text:000006C3                 movzx   edx, byte ptr [ecx]
.text:000006C6                 mov     eax, [ebp+arg_4]
.text:000006C9                 movzx   ecx, byte ptr [eax]
.text:000006CC                 xor     ecx, edx
.text:000006CE                 mov     edx, [ebp+arg_4]
.text:000006D1                 mov     [edx], cl
.text:000006D3                 mov     eax, [ebp+var_4]
.text:000006D6                 add     eax, 1
.text:000006D9                 mov     [ebp+var_4], eax
.text:000006DC                 mov     ecx, [ebp+arg_4]
.text:000006DF                 add     ecx, 1
.text:000006E2                 mov     [ebp+arg_4], ecx
.text:000006E5                 mov     edx, [ebp+arg_8]
.text:000006E8                 sub     edx, 1
.text:000006EB                 mov     [ebp+arg_8], edx
.text:000006EE                 jz      short loc_6F6
.text:000006F0                 cmp     [ebp+var_4], 10h
.text:000006F4                 jnz     short loc_6BD
.text:000006F6
.text:000006F6 loc_6F6:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+45j
.text:000006F6                                         ; NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+7Ej
.text:000006F6                 cmp     [ebp+arg_8], 10h
.text:000006FA                 jb      short loc_743
.text:000006FC                 mov     eax, [ebp+arg_8]
.text:000006FF                 shr     eax, 4
.text:00000702                 mov     [ebp+var_10], eax
.text:00000705                 mov     esi, esp
.text:00000707                 mov     ecx, [ebp+var_10]
.text:0000070A                 push    ecx
.text:0000070B                 mov     ecx, [ebp+var_8]
.text:0000070E                 add     ecx, 10h
.text:00000711                 mov     edx, [ebp+arg_4]
.text:00000714                 call    dword ptr ds:_g_AesCtr_Code
.text:0000071A                 cmp     esi, esp
.text:0000071C                 call    __RTC_CheckEsp
.text:00000721                 mov     edx, [ebp+var_10]
.text:00000724                 shl     edx, 4
.text:00000727                 mov     [ebp+var_10], edx
.text:0000072A                 mov     eax, [ebp+arg_4]
.text:0000072D                 add     eax, [ebp+var_10]
.text:00000730                 mov     [ebp+arg_4], eax
.text:00000733                 mov     ecx, [ebp+arg_8]
.text:00000736                 sub     ecx, [ebp+var_10]
.text:00000739                 mov     [ebp+arg_8], ecx
.text:0000073C                 mov     [ebp+var_4], 10h
.text:00000743
.text:00000743 loc_743:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+8Aj
.text:00000743                 cmp     [ebp+arg_8], 0
.text:00000747                 jz      loc_7CE
.text:0000074D                 mov     [ebp+var_14], 0
.text:00000754                 jmp     short loc_75F
.text:00000756 ; ---------------------------------------------------------------------------
.text:00000756
.text:00000756 loc_756:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+102j
.text:00000756                 mov     edx, [ebp+var_14]
.text:00000759                 add     edx, 1
.text:0000075C                 mov     [ebp+var_14], edx
.text:0000075F
.text:0000075F loc_75F:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+E4j
.text:0000075F                 cmp     [ebp+var_14], 4
.text:00000763                 jnb     short loc_774
.text:00000765                 mov     eax, [ebp+var_14]
.text:00000768                 mov     ecx, [ebp+var_8]
.text:0000076B                 mov     dword ptr [ecx+eax*4], 0
.text:00000772                 jmp     short loc_756
.text:00000774 ; ---------------------------------------------------------------------------
.text:00000774
.text:00000774 loc_774:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+F3j
.text:00000774                 mov     esi, esp
.text:00000776                 push    1
.text:00000778                 mov     ecx, [ebp+var_8]
.text:0000077B                 add     ecx, 10h
.text:0000077E                 mov     edx, [ebp+var_8]
.text:00000781                 call    dword ptr ds:_g_AesCtr_Code
.text:00000787                 cmp     esi, esp
.text:00000789                 call    __RTC_CheckEsp
.text:0000078E                 mov     edx, [ebp+var_8]
.text:00000791                 mov     [ebp+var_18], edx
.text:00000794                 mov     [ebp+var_4], 0
.text:0000079B
.text:0000079B loc_79B:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+15Cj
.text:0000079B                 mov     eax, [ebp+var_18]
.text:0000079E                 add     eax, [ebp+var_4]
.text:000007A1                 movzx   ecx, byte ptr [eax]
.text:000007A4                 mov     edx, [ebp+arg_4]
.text:000007A7                 movzx   eax, byte ptr [edx]
.text:000007AA                 xor     eax, ecx
.text:000007AC                 mov     ecx, [ebp+arg_4]
.text:000007AF                 mov     [ecx], al
.text:000007B1                 mov     edx, [ebp+var_4]
.text:000007B4                 add     edx, 1
.text:000007B7                 mov     [ebp+var_4], edx
.text:000007BA                 mov     eax, [ebp+arg_4]
.text:000007BD                 add     eax, 1
.text:000007C0                 mov     [ebp+arg_4], eax
.text:000007C3                 mov     ecx, [ebp+arg_8]
.text:000007C6                 sub     ecx, 1
.text:000007C9                 mov     [ebp+arg_8], ecx
.text:000007CC                 jnz     short loc_79B
.text:000007CE
.text:000007CE loc_7CE:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+D7j
.text:000007CE                 mov     edx, [ebp+this]
.text:000007D1                 mov     eax, [ebp+var_4]
.text:000007D4                 mov     [edx], eax
.text:000007D6
.text:000007D6 loc_7D6:                                ; CODE XREF: NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+3Cj
.text:000007D6                 pop     esi
.text:000007D7                 add     esp, 18h
.text:000007DA                 cmp     ebp, esp
.text:000007DC                 call    __RTC_CheckEsp
.text:000007E1                 mov     esp, ebp
.text:000007E3                 pop     ebp
.text:000007E4                 retn    0Ch
.text:000007E4 ?AesCtr2_Code@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@PAEI@Z endp
.text:000007E4
.text:000007E4 ; ---------------------------------------------------------------------------
.text:000007E7                 align 10h
.text:000007F0
.text:000007F0 ; =============== S U B R O U T I N E =======================================
.text:000007F0
.text:000007F0 ; Attributes: bp-based frame
.text:000007F0
.text:000007F0 ; public: virtual unsigned int __stdcall NCrypto::NWzAes::CEncoder::Filter(unsigned char *, unsigned int)
.text:000007F0                 public ?Filter@CEncoder@NWzAes@NCrypto@@UAGIPAEI@Z
.text:000007F0 ?Filter@CEncoder@NWzAes@NCrypto@@UAGIPAEI@Z proc near
.text:000007F0
.text:000007F0 arg_0           = dword ptr  8
.text:000007F0 arg_4           = dword ptr  0Ch
.text:000007F0 arg_8           = dword ptr  10h
.text:000007F0
.text:000007F0                 push    ebp             ; unsigned int
.text:000007F1                 mov     ebp, esp
.text:000007F3                 mov     eax, [ebp+arg_8]
.text:000007F6                 push    eax             ; unsigned __int8 *
.text:000007F7                 mov     ecx, [ebp+arg_4]
.text:000007FA                 push    ecx             ; struct NCrypto::NWzAes::CAesCtr2 *
.text:000007FB                 mov     edx, [ebp+arg_0]
.text:000007FE                 add     edx, 0F0h ; '='
.text:00000804                 push    edx             ; this
.text:00000805                 call    ?AesCtr2_Code@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@PAEI@Z ; NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)
.text:0000080A                 mov     eax, [ebp+arg_8]
.text:0000080D                 push    eax             ; unsigned int
.text:0000080E                 mov     ecx, [ebp+arg_4]
.text:00000811                 push    ecx             ; unsigned __int8 *
.text:00000812                 mov     ecx, [ebp+arg_0]
.text:00000815                 add     ecx, 30h ; '0'  ; this
.text:00000818                 call    ?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CHmac::Update(uchar const *,uint)
.text:0000081D                 mov     eax, [ebp+arg_8]
.text:00000820                 cmp     ebp, esp
.text:00000822                 call    __RTC_CheckEsp
.text:00000827                 pop     ebp
.text:00000828                 retn    0Ch
.text:00000828 ?Filter@CEncoder@NWzAes@NCrypto@@UAGIPAEI@Z endp
.text:00000828
.text:00000828 ; ---------------------------------------------------------------------------
.text:0000082B                 align 10h
.text:00000830
.text:00000830 ; =============== S U B R O U T I N E =======================================
.text:00000830
.text:00000830 ; Attributes: bp-based frame
.text:00000830
.text:00000830 ; public: virtual unsigned int __stdcall NCrypto::NWzAes::CDecoder::Filter(unsigned char *, unsigned int)
.text:00000830                 public ?Filter@CDecoder@NWzAes@NCrypto@@UAGIPAEI@Z
.text:00000830 ?Filter@CDecoder@NWzAes@NCrypto@@UAGIPAEI@Z proc near
.text:00000830
.text:00000830 arg_0           = dword ptr  8
.text:00000830 arg_4           = dword ptr  0Ch
.text:00000830 arg_8           = dword ptr  10h
.text:00000830
.text:00000830                 push    ebp             ; unsigned int
.text:00000831                 mov     ebp, esp
.text:00000833                 mov     eax, [ebp+arg_8]
.text:00000836                 push    eax             ; unsigned int
.text:00000837                 mov     ecx, [ebp+arg_4]
.text:0000083A                 push    ecx             ; unsigned __int8 *
.text:0000083B                 mov     ecx, [ebp+arg_0]
.text:0000083E                 add     ecx, 30h ; '0'  ; this
.text:00000841                 call    ?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CHmac::Update(uchar const *,uint)
.text:00000846                 mov     edx, [ebp+arg_8]
.text:00000849                 push    edx             ; unsigned __int8 *
.text:0000084A                 mov     eax, [ebp+arg_4]
.text:0000084D                 push    eax             ; struct NCrypto::NWzAes::CAesCtr2 *
.text:0000084E                 mov     ecx, [ebp+arg_0]
.text:00000851                 add     ecx, 0F0h ; '='
.text:00000857                 push    ecx             ; this
.text:00000858                 call    ?AesCtr2_Code@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@PAEI@Z ; NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)
.text:0000085D                 mov     eax, [ebp+arg_8]
.text:00000860                 cmp     ebp, esp
.text:00000862                 call    __RTC_CheckEsp
.text:00000867                 pop     ebp
.text:00000868                 retn    0Ch
.text:00000868 ?Filter@CDecoder@NWzAes@NCrypto@@UAGIPAEI@Z endp
.text:00000868
.text:00000868 ; ---------------------------------------------------------------------------
.text:0000086B                 align 4
.text:0000086B _text           ends
.text:0000086B
.rtc$TMZ:0000086C ; ===========================================================================
.rtc$TMZ:0000086C
.rtc$TMZ:0000086C ; Segment type: Pure data
.rtc$TMZ:0000086C ; Segment permissions: Read
.rtc$TMZ:0000086C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000086C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000086C                 ;org 86Ch
.rtc$TMZ:0000086C ; COMDAT (pick any)
.rtc$TMZ:0000086C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000086C _rtc$TMZ        ends
.rtc$TMZ:0000086C
.rtc$IMZ:00000870 ; ===========================================================================
.rtc$IMZ:00000870
.rtc$IMZ:00000870 ; Segment type: Pure data
.rtc$IMZ:00000870 ; Segment permissions: Read
.rtc$IMZ:00000870 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000870                 assume cs:_rtc$IMZ
.rtc$IMZ:00000870                 ;org 870h
.rtc$IMZ:00000870 ; COMDAT (pick any)
.rtc$IMZ:00000870 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000870 _rtc$IMZ        ends
.rtc$IMZ:00000870
.text:00000874 ; ===========================================================================
.text:00000874
.text:00000874 ; Segment type: Pure code
.text:00000874 ; Segment permissions: Read/Execute
.text:00000874 _text           segment para public 'CODE' use32
.text:00000874                 assume cs:_text
.text:00000874                 ;org 874h
.text:00000874 ; COMDAT (pick any)
.text:00000874                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000874
.text:00000874 ; =============== S U B R O U T I N E =======================================
.text:00000874
.text:00000874 ; Attributes: bp-based frame
.text:00000874
.text:00000874 ; unsigned int __thiscall NCrypto::NWzAes::CKeyInfo::GetKeySize(NCrypto::NWzAes::CKeyInfo *__hidden this)
.text:00000874                 public ?GetKeySize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ
.text:00000874 ?GetKeySize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ proc near
.text:00000874                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+38p
.text:00000874
.text:00000874 var_4           = dword ptr -4
.text:00000874
.text:00000874                 push    ebp
.text:00000875                 mov     ebp, esp
.text:00000877                 push    ecx
.text:00000878                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000087F                 mov     [ebp+var_4], ecx
.text:00000882                 mov     eax, [ebp+var_4]
.text:00000885                 mov     ecx, [eax]
.text:00000887                 lea     eax, ds:8[ecx*8]
.text:0000088E                 mov     esp, ebp
.text:00000890                 pop     ebp
.text:00000891                 retn
.text:00000891 ?GetKeySize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ endp
.text:00000891
.text:00000891 ; ---------------------------------------------------------------------------
.text:00000892                 align 4
.text:00000892 _text           ends
.text:00000892
.text:00000894 ; ===========================================================================
.text:00000894
.text:00000894 ; Segment type: Pure code
.text:00000894 ; Segment permissions: Read/Execute
.text:00000894 _text           segment para public 'CODE' use32
.text:00000894                 assume cs:_text
.text:00000894                 ;org 894h
.text:00000894 ; COMDAT (pick any)
.text:00000894                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000894
.text:00000894 ; =============== S U B R O U T I N E =======================================
.text:00000894
.text:00000894 ; Attributes: bp-based frame
.text:00000894
.text:00000894 ; unsigned int __thiscall NCrypto::NWzAes::CKeyInfo::GetNumSaltWords(NCrypto::NWzAes::CKeyInfo *__hidden this)
.text:00000894                 public ?GetNumSaltWords@CKeyInfo@NWzAes@NCrypto@@QBEIXZ
.text:00000894 ?GetNumSaltWords@CKeyInfo@NWzAes@NCrypto@@QBEIXZ proc near
.text:00000894                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+5Fp
.text:00000894
.text:00000894 var_4           = dword ptr -4
.text:00000894
.text:00000894                 push    ebp
.text:00000895                 mov     ebp, esp
.text:00000897                 push    ecx
.text:00000898                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000089F                 mov     [ebp+var_4], ecx
.text:000008A2                 mov     eax, [ebp+var_4]
.text:000008A5                 mov     eax, [eax]
.text:000008A7                 add     eax, 1
.text:000008AA                 mov     esp, ebp
.text:000008AC                 pop     ebp
.text:000008AD                 retn
.text:000008AD ?GetNumSaltWords@CKeyInfo@NWzAes@NCrypto@@QBEIXZ endp
.text:000008AD
.text:000008AD ; ---------------------------------------------------------------------------
.text:000008AE                 align 10h
.text:000008AE _text           ends
.text:000008AE
.text:000008B0 ; ===========================================================================
.text:000008B0
.text:000008B0 ; Segment type: Pure code
.text:000008B0 ; Segment permissions: Read/Execute
.text:000008B0 _text           segment para public 'CODE' use32
.text:000008B0                 assume cs:_text
.text:000008B0                 ;org 8B0h
.text:000008B0 ; COMDAT (pick any)
.text:000008B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008B0
.text:000008B0 ; =============== S U B R O U T I N E =======================================
.text:000008B0
.text:000008B0 ; Attributes: bp-based frame
.text:000008B0
.text:000008B0 ; unsigned int __thiscall NCrypto::NWzAes::CKeyInfo::GetSaltSize(NCrypto::NWzAes::CKeyInfo *__hidden this)
.text:000008B0                 public ?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ
.text:000008B0 ?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ proc near
.text:000008B0                                         ; CODE XREF: NCrypto::NWzAes::CEncoder::WriteHeader(ISequentialOutStream *)+24p
.text:000008B0                                         ; NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)+2Bp
.text:000008B0
.text:000008B0 var_4           = dword ptr -4
.text:000008B0
.text:000008B0                 push    ebp
.text:000008B1                 mov     ebp, esp
.text:000008B3                 push    ecx
.text:000008B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008BB                 mov     [ebp+var_4], ecx
.text:000008BE                 mov     eax, [ebp+var_4]
.text:000008C1                 mov     ecx, [eax]
.text:000008C3                 lea     eax, ds:4[ecx*4]
.text:000008CA                 mov     esp, ebp
.text:000008CC                 pop     ebp
.text:000008CD                 retn
.text:000008CD ?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ endp
.text:000008CD
.text:000008CD ; ---------------------------------------------------------------------------
.text:000008CE                 align 10h
.text:000008CE _text           ends
.text:000008CE
.text:000008D0 ; ===========================================================================
.text:000008D0
.text:000008D0 ; Segment type: Pure code
.text:000008D0 ; Segment permissions: Read/Execute
.text:000008D0 _text           segment para public 'CODE' use32
.text:000008D0                 assume cs:_text
.text:000008D0                 ;org 8D0h
.text:000008D0 ; COMDAT (pick any)
.text:000008D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008D0
.text:000008D0 ; =============== S U B R O U T I N E =======================================
.text:000008D0
.text:000008D0 ; Attributes: bp-based frame
.text:000008D0
.text:000008D0 ; void __thiscall NCrypto::NSha1::CHmac::Update(NCrypto::NSha1::CHmac *this, const unsigned __int8 *, unsigned int)
.text:000008D0                 public ?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z
.text:000008D0 ?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z proc near
.text:000008D0                                         ; CODE XREF: NCrypto::NWzAes::CEncoder::Filter(uchar *,uint)+28p
.text:000008D0                                         ; NCrypto::NWzAes::CDecoder::Filter(uchar *,uint)+11p
.text:000008D0
.text:000008D0 var_4           = dword ptr -4
.text:000008D0 arg_0           = dword ptr  8
.text:000008D0 arg_4           = dword ptr  0Ch
.text:000008D0
.text:000008D0                 push    ebp
.text:000008D1                 mov     ebp, esp
.text:000008D3                 push    ecx
.text:000008D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008DB                 mov     [ebp+var_4], ecx
.text:000008DE                 mov     eax, [ebp+arg_4]
.text:000008E1                 push    eax             ; unsigned int
.text:000008E2                 mov     ecx, [ebp+arg_0]
.text:000008E5                 push    ecx             ; unsigned __int8 *
.text:000008E6                 mov     ecx, [ebp+var_4] ; this
.text:000008E9                 call    ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update(uchar const *,uint)
.text:000008EE                 add     esp, 4
.text:000008F1                 cmp     ebp, esp
.text:000008F3                 call    __RTC_CheckEsp
.text:000008F8                 mov     esp, ebp
.text:000008FA                 pop     ebp
.text:000008FB                 retn    8
.text:000008FB ?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z endp
.text:000008FB
.text:000008FB ; ---------------------------------------------------------------------------
.text:000008FE                 align 10h
.text:000008FE _text           ends
.text:000008FE
.text:00000900 ; ===========================================================================
.text:00000900
.text:00000900 ; Segment type: Pure code
.text:00000900 ; Segment permissions: Read/Execute
.text:00000900 _text           segment para public 'CODE' use32
.text:00000900                 assume cs:_text
.text:00000900                 ;org 900h
.text:00000900 ; COMDAT (pick any)
.text:00000900                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000900
.text:00000900 ; =============== S U B R O U T I N E =======================================
.text:00000900
.text:00000900 ; Attributes: bp-based frame
.text:00000900
.text:00000900 ; void __thiscall NCrypto::NSha1::CContext::Update(NCrypto::NSha1::CContext *this, const unsigned __int8 *, unsigned int)
.text:00000900                 public ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z
.text:00000900 ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z proc near
.text:00000900                                         ; CODE XREF: NCrypto::NSha1::CHmac::Update(uchar const *,uint)+19p
.text:00000900
.text:00000900 var_4           = dword ptr -4
.text:00000900 arg_0           = dword ptr  8
.text:00000900 arg_4           = dword ptr  0Ch
.text:00000900
.text:00000900                 push    ebp
.text:00000901                 mov     ebp, esp
.text:00000903                 push    ecx
.text:00000904                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000090B                 mov     [ebp+var_4], ecx
.text:0000090E                 mov     eax, [ebp+arg_4]
.text:00000911                 push    eax
.text:00000912                 mov     ecx, [ebp+arg_0]
.text:00000915                 push    ecx
.text:00000916                 mov     edx, [ebp+var_4]
.text:00000919                 push    edx
.text:0000091A                 call    _Sha1_Update@12 ; Sha1_Update(x,x,x)
.text:0000091F                 add     esp, 4
.text:00000922                 cmp     ebp, esp
.text:00000924                 call    __RTC_CheckEsp
.text:00000929                 mov     esp, ebp
.text:0000092B                 pop     ebp
.text:0000092C                 retn    8
.text:0000092C ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z endp
.text:0000092C
.text:0000092C ; ---------------------------------------------------------------------------
.text:0000092F                 align 10h
.text:0000092F _text           ends
.text:0000092F
.text:00000930 ; ===========================================================================
.text:00000930
.text:00000930 ; Segment type: Pure code
.text:00000930 ; Segment permissions: Read/Execute
.text:00000930 _text           segment para public 'CODE' use32
.text:00000930                 assume cs:_text
.text:00000930                 ;org 930h
.text:00000930 ; COMDAT (pick any)
.text:00000930                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000930
.text:00000930 ; =============== S U B R O U T I N E =======================================
.text:00000930
.text:00000930 ; Attributes: bp-based frame
.text:00000930
.text:00000930 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:00000930                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:00000930 ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+F2p
.text:00000930
.text:00000930 var_4           = dword ptr -4
.text:00000930
.text:00000930                 push    ebp
.text:00000931                 mov     ebp, esp
.text:00000933                 push    ecx
.text:00000934                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000093B                 mov     [ebp+var_4], ecx
.text:0000093E                 mov     eax, [ebp+var_4]
.text:00000941                 mov     eax, [eax]
.text:00000943                 mov     esp, ebp
.text:00000945                 pop     ebp
.text:00000946                 retn
.text:00000946 ??B?$CBuffer@E@@QAEPAEXZ endp
.text:00000946
.text:00000946 ; ---------------------------------------------------------------------------
.text:00000947                 align 4
.text:00000947 _text           ends
.text:00000947
.text:00000948 ; ===========================================================================
.text:00000948
.text:00000948 ; Segment type: Pure code
.text:00000948 ; Segment permissions: Read/Execute
.text:00000948 _text           segment para public 'CODE' use32
.text:00000948                 assume cs:_text
.text:00000948                 ;org 948h
.text:00000948 ; COMDAT (pick any)
.text:00000948                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000948
.text:00000948 ; =============== S U B R O U T I N E =======================================
.text:00000948
.text:00000948 ; Attributes: bp-based frame
.text:00000948
.text:00000948 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:00000948                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:00000948 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+E6p
.text:00000948
.text:00000948 var_4           = dword ptr -4
.text:00000948
.text:00000948                 push    ebp
.text:00000949                 mov     ebp, esp
.text:0000094B                 push    ecx
.text:0000094C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000953                 mov     [ebp+var_4], ecx
.text:00000956                 mov     eax, [ebp+var_4]
.text:00000959                 mov     eax, [eax+4]
.text:0000095C                 mov     esp, ebp
.text:0000095E                 pop     ebp
.text:0000095F                 retn
.text:0000095F ?Size@?$CBuffer@E@@QBEIXZ endp
.text:0000095F
.text:0000095F _text           ends
.text:0000095F
.text:00000960 ; ===========================================================================
.text:00000960
.text:00000960 ; Segment type: Pure code
.text:00000960 ; Segment permissions: Read/Execute
.text:00000960 _text           segment para public 'CODE' use32
.text:00000960                 assume cs:_text
.text:00000960                 ;org 960h
.text:00000960 ; COMDAT (pick any)
.text:00000960                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000960
.text:00000960 ; =============== S U B R O U T I N E =======================================
.text:00000960
.text:00000960 ; Attributes: bp-based frame
.text:00000960
.text:00000960 ; int __stdcall CBuffer<unsigned char>::CopyFrom(void *Src, size_t Size)
.text:00000960                 public ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
.text:00000960 ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z proc near
.text:00000960                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CryptoSetPassword(uchar const *,uint)+1Ep
.text:00000960
.text:00000960 var_4           = dword ptr -4
.text:00000960 Src             = dword ptr  8
.text:00000960 Size            = dword ptr  0Ch
.text:00000960
.text:00000960                 push    ebp
.text:00000961                 mov     ebp, esp
.text:00000963                 push    ecx
.text:00000964                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000096B                 mov     [ebp+var_4], ecx
.text:0000096E                 mov     eax, [ebp+Size]
.text:00000971                 push    eax
.text:00000972                 mov     ecx, [ebp+var_4]
.text:00000975                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:0000097A                 cmp     [ebp+Size], 0
.text:0000097E                 jz      short loc_996
.text:00000980                 mov     ecx, [ebp+Size]
.text:00000983                 push    ecx             ; Size
.text:00000984                 mov     edx, [ebp+Src]
.text:00000987                 push    edx             ; Src
.text:00000988                 mov     eax, [ebp+var_4]
.text:0000098B                 mov     ecx, [eax]
.text:0000098D                 push    ecx             ; Dst
.text:0000098E                 call    _memcpy
.text:00000993                 add     esp, 0Ch
.text:00000996
.text:00000996 loc_996:                                ; CODE XREF: CBuffer<uchar>::CopyFrom(uchar const *,uint)+1Ej
.text:00000996                 add     esp, 4
.text:00000999                 cmp     ebp, esp
.text:0000099B                 call    __RTC_CheckEsp
.text:000009A0                 mov     esp, ebp
.text:000009A2                 pop     ebp
.text:000009A3                 retn    8
.text:000009A3 ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z endp
.text:000009A3
.text:000009A3 ; ---------------------------------------------------------------------------
.text:000009A6                 align 4
.text:000009A6 _text           ends
.text:000009A6
.text:000009A8 ; ===========================================================================
.text:000009A8
.text:000009A8 ; Segment type: Pure code
.text:000009A8 ; Segment permissions: Read/Execute
.text:000009A8 _text           segment para public 'CODE' use32
.text:000009A8                 assume cs:_text
.text:000009A8                 ;org 9A8h
.text:000009A8 ; COMDAT (pick any)
.text:000009A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000009A8
.text:000009A8 ; =============== S U B R O U T I N E =======================================
.text:000009A8
.text:000009A8 ; Attributes: bp-based frame
.text:000009A8
.text:000009A8 ; public: void __thiscall CBuffer<unsigned char>::Alloc(unsigned int)
.text:000009A8                 public ?Alloc@?$CBuffer@E@@QAEXI@Z
.text:000009A8 ?Alloc@?$CBuffer@E@@QAEXI@Z proc near   ; CODE XREF: CBuffer<uchar>::CopyFrom(uchar const *,uint)+15p
.text:000009A8
.text:000009A8 var_8           = dword ptr -8
.text:000009A8 var_4           = dword ptr -4
.text:000009A8 arg_0           = dword ptr  8
.text:000009A8
.text:000009A8                 push    ebp
.text:000009A9                 mov     ebp, esp
.text:000009AB                 sub     esp, 8
.text:000009AE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000009B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009BC                 mov     [ebp+var_4], ecx
.text:000009BF                 mov     eax, [ebp+var_4]
.text:000009C2                 mov     ecx, [ebp+arg_0]
.text:000009C5                 cmp     ecx, [eax+4]
.text:000009C8                 jz      short loc_9F8
.text:000009CA                 mov     ecx, [ebp+var_4]
.text:000009CD                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:000009D2                 cmp     [ebp+arg_0], 0
.text:000009D6                 jz      short loc_9F8
.text:000009D8                 mov     edx, [ebp+arg_0]
.text:000009DB                 push    edx             ; unsigned int
.text:000009DC                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000009E1                 add     esp, 4
.text:000009E4                 mov     [ebp+var_8], eax
.text:000009E7                 mov     eax, [ebp+var_4]
.text:000009EA                 mov     ecx, [ebp+var_8]
.text:000009ED                 mov     [eax], ecx
.text:000009EF                 mov     edx, [ebp+var_4]
.text:000009F2                 mov     eax, [ebp+arg_0]
.text:000009F5                 mov     [edx+4], eax
.text:000009F8
.text:000009F8 loc_9F8:                                ; CODE XREF: CBuffer<uchar>::Alloc(uint)+20j
.text:000009F8                                         ; CBuffer<uchar>::Alloc(uint)+2Ej
.text:000009F8                 add     esp, 8
.text:000009FB                 cmp     ebp, esp
.text:000009FD                 call    __RTC_CheckEsp
.text:00000A02                 mov     esp, ebp
.text:00000A04                 pop     ebp
.text:00000A05                 retn    4
.text:00000A05 ?Alloc@?$CBuffer@E@@QAEXI@Z endp
.text:00000A05
.text:00000A05 _text           ends
.text:00000A05
.text:00000A08 ; ===========================================================================
.text:00000A08
.text:00000A08 ; Segment type: Pure code
.text:00000A08 ; Segment permissions: Read/Execute
.text:00000A08 _text           segment para public 'CODE' use32
.text:00000A08                 assume cs:_text
.text:00000A08                 ;org 0A08h
.text:00000A08 ; COMDAT (pick any)
.text:00000A08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000A08
.text:00000A08 ; =============== S U B R O U T I N E =======================================
.text:00000A08
.text:00000A08 ; Attributes: bp-based frame
.text:00000A08
.text:00000A08 ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:00000A08                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:00000A08 ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: CBuffer<uchar>::Alloc(uint)+25p
.text:00000A08
.text:00000A08 var_8           = dword ptr -8
.text:00000A08 var_4           = dword ptr -4
.text:00000A08
.text:00000A08                 push    ebp
.text:00000A09                 mov     ebp, esp
.text:00000A0B                 sub     esp, 8
.text:00000A0E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000A15                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A1C                 mov     [ebp+var_4], ecx
.text:00000A1F                 mov     eax, [ebp+var_4]
.text:00000A22                 cmp     dword ptr [eax], 0
.text:00000A25                 jz      short loc_A44
.text:00000A27                 mov     ecx, [ebp+var_4]
.text:00000A2A                 mov     edx, [ecx]
.text:00000A2C                 mov     [ebp+var_8], edx
.text:00000A2F                 mov     eax, [ebp+var_8]
.text:00000A32                 push    eax             ; void *
.text:00000A33                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000A38                 add     esp, 4
.text:00000A3B                 mov     ecx, [ebp+var_4]
.text:00000A3E                 mov     dword ptr [ecx], 0
.text:00000A44
.text:00000A44 loc_A44:                                ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:00000A44                 mov     edx, [ebp+var_4]
.text:00000A47                 mov     dword ptr [edx+4], 0
.text:00000A4E                 add     esp, 8
.text:00000A51                 cmp     ebp, esp
.text:00000A53                 call    __RTC_CheckEsp
.text:00000A58                 mov     esp, ebp
.text:00000A5A                 pop     ebp
.text:00000A5B                 retn
.text:00000A5B ?Free@?$CBuffer@E@@QAEXXZ endp
.text:00000A5B
.text:00000A5B _text           ends
.text:00000A5B
UNDEF:00000A60 ; ===========================================================================
UNDEF:00000A60
UNDEF:00000A60 ; Segment type: Externs
UNDEF:00000A60 ; UNDEF
UNDEF:00000A60                 extrn __RTC_CheckEsp:near
UNDEF:00000A60                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CryptoSetPassword(uchar const *,uint)+27p
UNDEF:00000A60                                         ; NCrypto::NWzAes::CBaseCoder::Init2(void)+1C2p ...
UNDEF:00000A64                 extrn __RTC_Shutdown:near
UNDEF:00000A64                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000A68                 extrn __RTC_InitBase:near
UNDEF:00000A68                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000A6C ; __fastcall Aes_SetKey_Enc(x, x, x)
UNDEF:00000A6C                 extrn @Aes_SetKey_Enc@12:near
UNDEF:00000A6C                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+18Bp
UNDEF:00000A70 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00000A70                 extrn _memcpy:near      ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+169p
UNDEF:00000A70                                         ; CBuffer<uchar>::CopyFrom(uchar const *,uint)+2Ep
UNDEF:00000A74 ; void __thiscall NCrypto::NSha1::CHmac::SetKey(NCrypto::NSha1::CHmac *__hidden this, const unsigned __int8 *, unsigned int)
UNDEF:00000A74                 extrn ?SetKey@CHmac@NSha1@NCrypto@@QAEXPBEI@Z:near
UNDEF:00000A74                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+153p
UNDEF:00000A78 ; void NCrypto::NSha1::Pbkdf2Hmac32(NCrypto::NSha1 *__hidden this, const unsigned __int8 *, unsigned int, const unsigned int *, unsigned int, unsigned int, unsigned int *, unsigned int)
UNDEF:00000A78                 extrn ?Pbkdf2Hmac32@NSha1@NCrypto@@YGXPBEIPBIIIPAII@Z:near
UNDEF:00000A78                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+F8p
UNDEF:00000A7C                 extrn ___security_cookie:near
UNDEF:00000A7C                                         ; DATA XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+1Er
UNDEF:00000A7C                                         ; NCrypto::NWzAes::CEncoder::WriteFooter(ISequentialOutStream *)+20r ...
UNDEF:00000A80 ; __fastcall __security_check_cookie(x)
UNDEF:00000A80                 extrn @__security_check_cookie@4:near
UNDEF:00000A80                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+1B5p
UNDEF:00000A80                                         ; NCrypto::NWzAes::CEncoder::WriteFooter(ISequentialOutStream *)+63p ...
UNDEF:00000A84 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000A84                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000A84                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Init2(void)+1A8p
UNDEF:00000A84                                         ; NCrypto::NWzAes::CEncoder::WriteFooter(ISequentialOutStream *)+57p ...
UNDEF:00000A88 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00000A88                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00000A88                                         ; CODE XREF: NCrypto::NWzAes::CEncoder::WriteHeader(ISequentialOutStream *)+58p
UNDEF:00000A88                                         ; NCrypto::NWzAes::CEncoder::WriteHeader(ISequentialOutStream *)+78p ...
UNDEF:00000A8C ; void __thiscall CRandomGenerator::Generate(CRandomGenerator *__hidden this, unsigned __int8 *, unsigned int)
UNDEF:00000A8C                 extrn ?Generate@CRandomGenerator@@QAEXPAEI@Z:near
UNDEF:00000A8C                                         ; CODE XREF: NCrypto::NWzAes::CEncoder::WriteHeader(ISequentialOutStream *)+3Cp
UNDEF:00000A90 ; CRandomGenerator g_RandomGenerator
UNDEF:00000A90                 extrn ?g_RandomGenerator@@3VCRandomGenerator@@A:near
UNDEF:00000A90                                         ; DATA XREF: NCrypto::NWzAes::CEncoder::WriteHeader(ISequentialOutStream *)+37o
UNDEF:00000A94 ; void __thiscall NCrypto::NSha1::CHmac::Final(NCrypto::NSha1::CHmac *__hidden this, unsigned __int8 *, unsigned int)
UNDEF:00000A94                 extrn ?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z:near
UNDEF:00000A94                                         ; CODE XREF: NCrypto::NWzAes::CEncoder::WriteFooter(ISequentialOutStream *)+39p
UNDEF:00000A94                                         ; NCrypto::NWzAes::CDecoder::CheckMac(ISequentialInStream *,bool &)+54p
UNDEF:00000A98 ; __int32 __stdcall ReadStream_FAIL(struct ISequentialInStream *, void *, unsigned int)
UNDEF:00000A98                 extrn ?ReadStream_FAIL@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:00000A98                                         ; CODE XREF: NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)+48p
UNDEF:00000A98                                         ; NCrypto::NWzAes::CDecoder::CheckMac(ISequentialInStream *,bool &)+35p
UNDEF:00000A9C                 extrn _g_AesCtr_Code:near
UNDEF:00000A9C                                         ; CODE XREF: NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+A4p
UNDEF:00000A9C                                         ; NCrypto::NWzAes::AesCtr2_Code(NCrypto::NWzAes::CAesCtr2 *,uchar *,uint)+111p
UNDEF:00000A9C                                         ; DATA XREF: ...
UNDEF:00000AA0 ; __stdcall Sha1_Update(x, x, x)
UNDEF:00000AA0                 extrn _Sha1_Update@12:near
UNDEF:00000AA0                                         ; CODE XREF: NCrypto::NSha1::CContext::Update(uchar const *,uint)+1Ap
UNDEF:00000AA4 ; void *__cdecl operator new(unsigned int)
UNDEF:00000AA4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CBuffer<uchar>::Alloc(uint)+34p
UNDEF:00000AA8 ; void __cdecl operator delete(void *)
UNDEF:00000AA8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: CBuffer<uchar>::Free(void)+2Bp
UNDEF:00000AA8
UNDEF:00000AA8
UNDEF:00000AA8                 end