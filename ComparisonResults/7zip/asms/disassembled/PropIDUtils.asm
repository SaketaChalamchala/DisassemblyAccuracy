.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 293AB4DCAD68C3ABC54487944BD37B8D
.rdata:00000000 ; Input CRC32 : A87D12FB
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\PropIDUtils.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _g_WinAttribChars db 52h                ; DATA XREF: ConvertWinAttribToString(char *,uint)+3Er
.rdata:00000001 aHs8dadntslcone db 'HS8DAdNTsLCOnE_',0
.rdata:00000011                 align 4
.rdata:00000014 _kPosixTypes    db 30h                  ; DATA XREF: ConvertPosixAttribToString(char *,uint)+17r
.rdata:00000015                 db  70h ; p
.rdata:00000016                 db  63h ; c
.rdata:00000017                 db  33h ; 3
.rdata:00000018                 db  64h ; d
.rdata:00000019                 db  35h ; 5
.rdata:0000001A                 db  62h ; b
.rdata:0000001B                 db  37h ; 7
.rdata:0000001C                 db  2Dh ; -
.rdata:0000001D                 db  39h ; 9
.rdata:0000001E                 db  6Ch ; l
.rdata:0000001F                 db  42h ; B
.rdata:00000020 unk_20          db  73h ; s             ; DATA XREF: .text:000015C0o
.rdata:00000021                 db  44h ; D
.rdata:00000022                 db  45h ; E
.rdata:00000023                 db  46h ; F
.rdata:00000024 $SG67842        dd offset $SG67844      ; DATA XREF: .rdata:_sidNameso
.rdata:00000024                                         ; "Network"
.rdata:00000028 $SG67843        db 'Dialup',0           ; DATA XREF: .rdata:0000013Co
.rdata:0000002F                 align 10h
.rdata:00000030 $SG67844        db 'Network',0          ; DATA XREF: .rdata:$SG67842o
.rdata:00000030                                         ; .rdata:00000140o
.rdata:00000038 $SG67845        db 'Batch',0            ; DATA XREF: .rdata:00000144o
.rdata:0000003E                 align 10h
.rdata:00000040 $SG67846        db 'Interactive',0      ; DATA XREF: .rdata:00000148o
.rdata:0000004C $SG67847        db 'Logon',0            ; DATA XREF: .rdata:0000014Co
.rdata:00000052                 align 4
.rdata:00000054 $SG67848        db 'Service',0          ; DATA XREF: .rdata:00000150o
.rdata:0000005C $SG67849        db 'Anonymous',0        ; DATA XREF: .rdata:00000154o
.rdata:00000066                 align 4
.rdata:00000068 $SG67850        db 'Proxy',0            ; DATA XREF: .rdata:00000158o
.rdata:0000006E                 align 10h
.rdata:00000070 $SG67851        db 'EnterpriseDC',0     ; DATA XREF: .rdata:0000015Co
.rdata:0000007D                 align 10h
.rdata:00000080 $SG67852        db 'Self',0             ; DATA XREF: .rdata:00000160o
.rdata:00000085                 align 4
.rdata:00000088 $SG67853        db 'AuthenticatedUsers',0 ; DATA XREF: .rdata:00000164o
.rdata:0000009B                 align 4
.rdata:0000009C $SG67854        db 'RestrictedCode',0   ; DATA XREF: .rdata:00000168o
.rdata:000000AB                 align 4
.rdata:000000AC $SG67855        db 'TerminalServer',0   ; DATA XREF: .rdata:0000016Co
.rdata:000000BB                 align 4
.rdata:000000BC $SG67856        db 'RemoteInteractiveLogon',0 ; DATA XREF: .rdata:00000170o
.rdata:000000D3                 align 4
.rdata:000000D4 $SG67857        db 'ThisOrganization',0 ; DATA XREF: .rdata:00000174o
.rdata:000000E5                 align 4
.rdata:000000E8 $SG67858        db '16',0               ; DATA XREF: .rdata:00000178o
.rdata:000000EB                 align 4
.rdata:000000EC $SG67859        db 'IUserIIS',0         ; DATA XREF: .rdata:0000017Co
.rdata:000000F5                 align 4
.rdata:000000F8 $SG67860        db 'LocalSystem',0      ; DATA XREF: .rdata:00000180o
.rdata:00000104 $SG67861        db 'LocalService',0     ; DATA XREF: .rdata:00000184o
.rdata:00000111                 align 4
.rdata:00000114 $SG67862        db 'NetworkService',0   ; DATA XREF: .rdata:00000188o
.rdata:00000123                 align 4
.rdata:00000124 $SG67863        db 'Domains',0          ; DATA XREF: .rdata:0000018Co
.rdata:0000012C $SG67877        db 'PowerUsers',0       ; DATA XREF: .rdata:0000038Co
.rdata:00000137                 align 4
.rdata:00000138 _sidNames       dd offset $SG67842      ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &)+ECr
.rdata:0000013C                 dd offset $SG67843      ; "Dialup"
.rdata:00000140                 dd offset $SG67844      ; "Network"
.rdata:00000144                 dd offset $SG67845      ; "Batch"
.rdata:00000148                 dd offset $SG67846      ; "Interactive"
.rdata:0000014C                 dd offset $SG67847      ; "Logon"
.rdata:00000150                 dd offset $SG67848      ; "Service"
.rdata:00000154                 dd offset $SG67849      ; "Anonymous"
.rdata:00000158                 dd offset $SG67850      ; "Proxy"
.rdata:0000015C                 dd offset $SG67851      ; "EnterpriseDC"
.rdata:00000160                 dd offset $SG67852      ; "Self"
.rdata:00000164                 dd offset $SG67853      ; "AuthenticatedUsers"
.rdata:00000168                 dd offset $SG67854      ; "RestrictedCode"
.rdata:0000016C                 dd offset $SG67855      ; "TerminalServer"
.rdata:00000170                 dd offset $SG67856      ; "RemoteInteractiveLogon"
.rdata:00000174                 dd offset $SG67857      ; "ThisOrganization"
.rdata:00000178                 dd offset $SG67858      ; "16"
.rdata:0000017C                 dd offset $SG67859      ; "IUserIIS"
.rdata:00000180                 dd offset $SG67860      ; "LocalSystem"
.rdata:00000184                 dd offset $SG67861      ; "LocalService"
.rdata:00000188                 dd offset $SG67862      ; "NetworkService"
.rdata:0000018C                 dd offset $SG67863      ; "Domains"
.rdata:00000190 $SG67874        db 'Administrators',0   ; DATA XREF: .rdata:off_374o
.rdata:0000019F                 align 10h
.rdata:000001A0 $SG67875        db 'Users',0            ; DATA XREF: .rdata:0000037Co
.rdata:000001A6                 align 4
.rdata:000001A8 $SG67876        db 'Guests',0           ; DATA XREF: .rdata:00000384o
.rdata:000001AF                 align 10h
.rdata:000001B0 $SG67878        db 'AccountOperators',0 ; DATA XREF: .rdata:00000394o
.rdata:000001C1                 align 4
.rdata:000001C4 $SG67879        db 'ServerOperators',0  ; DATA XREF: .rdata:0000039Co
.rdata:000001D4 $SG67880        db 'PrintOperators',0   ; DATA XREF: .rdata:000003A4o
.rdata:000001E3                 align 4
.rdata:000001E4 $SG67881        db 'BackupOperators',0  ; DATA XREF: .rdata:000003ACo
.rdata:000001F4 $SG67882        db 'Replicators',0      ; DATA XREF: .rdata:000003B4o
.rdata:000001F4                                         ; .rdata:_sid_21_Nameso ...
.rdata:00000200 $SG67883        db 'Backup Operators',0 ; DATA XREF: .rdata:000003BCo
.rdata:00000200                                         ; .rdata:00000548o ...
.rdata:00000211                 align 4
.rdata:00000214 $SG67884        db  50h ; P             ; DATA XREF: .rdata:000003C4o
.rdata:00000215                 db  72h ; r
.rdata:00000216                 db  65h ; e
.rdata:00000217                 db  57h ; W
.rdata:00000218                 db  69h ; i
.rdata:00000219                 db  6Eh ; n
.rdata:0000021A                 db  64h ; d
.rdata:0000021B                 db  6Fh ; o
.rdata:0000021C                 db  77h ; w
.rdata:0000021D                 db  73h ; s
.rdata:0000021E                 db  32h ; 2
.rdata:0000021F                 db  30h ; 0
.rdata:00000220 a00compatibleac db '00CompatibleAccess',0 ; DATA XREF: .rdata:_sid_32_Nameso
.rdata:00000220                                         ; .rdata:00000378o ...
.rdata:00000233                 align 4
.rdata:00000234 $SG67885        db 'RemoteDesktopUsers',0 ; DATA XREF: .rdata:000003CCo
.rdata:00000234                                         ; .rdata:00000408o ...
.rdata:00000247                 align 4
.rdata:00000248 $SG67886        db 'NetworkConfigurationOperators',0
.rdata:00000248                                         ; DATA XREF: .rdata:000003D4o
.rdata:00000266                 align 4
.rdata:00000268 $SG67887        db 'IncomingForestTrustBuilders',0
.rdata:00000268                                         ; DATA XREF: .rdata:000003DCo
.rdata:00000284 $SG67888        db 'PerformanceMonitorUsers',0 ; DATA XREF: .rdata:000003E4o
.rdata:0000029C $SG67889        db 'PerformanceLogUsers',0 ; DATA XREF: .rdata:000003ECo
.rdata:000002B0 $SG67890        db 'WindowsAuthorizationAccessGroup',0
.rdata:000002B0                                         ; DATA XREF: .rdata:000003F4o
.rdata:000002D0 $SG67891        db 'TerminalServerLicenseServers',0
.rdata:000002D0                                         ; DATA XREF: .rdata:000003FCo
.rdata:000002ED                 align 10h
.rdata:000002F0 $SG67892        db 'DistributedCOMUsers',0 ; DATA XREF: .rdata:00000404o
.rdata:00000304 $SG67893        db 'CryptographicOperators',0 ; DATA XREF: .rdata:0000040Co
.rdata:0000031B                 align 4
.rdata:0000031C $SG67894        db 'EventLogReaders',0  ; DATA XREF: .rdata:00000414o
.rdata:0000032C $SG67895        db 'CertificateServiceDCOMAccess',0
.rdata:0000032C                                         ; DATA XREF: .rdata:0000041Co
.rdata:00000349                 align 4
.rdata:0000034C $SG67897        db 'Administrator',0    ; DATA XREF: .rdata:off_534o
.rdata:0000035A                 align 4
.rdata:0000035C $SG67899        db 'KRBTGT',0           ; DATA XREF: .rdata:00000544o
.rdata:00000363                 align 4
.rdata:00000364 $SG67901        db 'DomainUsers',0      ; DATA XREF: .rdata:00000554o
.rdata:00000370 _sid_32_Names   dd offset a00compatibleac
.rdata:00000370                                         ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &)+131r
.rdata:00000370                                         ; "00CompatibleAccess"
.rdata:00000374 off_374         dd offset $SG67874      ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &)+140r
.rdata:00000374                                         ; "Administrators"
.rdata:00000378                 dd offset a00compatibleac+1 ; "0CompatibleAccess"
.rdata:0000037C                 dd offset $SG67875      ; "Users"
.rdata:00000380                 dd offset a00compatibleac+2 ; "CompatibleAccess"
.rdata:00000384                 dd offset $SG67876      ; "Guests"
.rdata:00000388                 dd offset a00compatibleac+3 ; "ompatibleAccess"
.rdata:0000038C                 dd offset $SG67877      ; "PowerUsers"
.rdata:00000390                 dd offset a00compatibleac+4 ; "mpatibleAccess"
.rdata:00000394                 dd offset $SG67878      ; "AccountOperators"
.rdata:00000398                 dd offset a00compatibleac+5 ; "patibleAccess"
.rdata:0000039C                 dd offset $SG67879      ; "ServerOperators"
.rdata:000003A0                 dd offset a00compatibleac+6 ; "atibleAccess"
.rdata:000003A4                 dd offset $SG67880      ; "PrintOperators"
.rdata:000003A8                 dd offset a00compatibleac+7 ; "tibleAccess"
.rdata:000003AC                 dd offset $SG67881      ; "BackupOperators"
.rdata:000003B0                 dd offset a00compatibleac+8 ; "ibleAccess"
.rdata:000003B4                 dd offset $SG67882      ; "Replicators"
.rdata:000003B8                 dd offset a00compatibleac+9 ; "bleAccess"
.rdata:000003BC                 dd offset $SG67883      ; "Backup Operators"
.rdata:000003C0                 dd offset a00compatibleac+0Ah ; "leAccess"
.rdata:000003C4                 dd offset $SG67884
.rdata:000003C8                 dd offset a00compatibleac+0Bh ; "eAccess"
.rdata:000003CC                 dd offset $SG67885      ; "RemoteDesktopUsers"
.rdata:000003D0                 dd offset a00compatibleac+0Ch ; "Access"
.rdata:000003D4                 dd offset $SG67886      ; "NetworkConfigurationOperators"
.rdata:000003D8                 dd offset a00compatibleac+0Dh ; "ccess"
.rdata:000003DC                 dd offset $SG67887      ; "IncomingForestTrustBuilders"
.rdata:000003E0                 dd offset a00compatibleac+0Eh ; "cess"
.rdata:000003E4                 dd offset $SG67888      ; "PerformanceMonitorUsers"
.rdata:000003E8                 dd offset a00compatibleac+0Fh ; "ess"
.rdata:000003EC                 dd offset $SG67889      ; "PerformanceLogUsers"
.rdata:000003F0                 dd offset a00compatibleac+10h ; "ss"
.rdata:000003F4                 dd offset $SG67890      ; "WindowsAuthorizationAccessGroup"
.rdata:000003F8                 dd offset a00compatibleac+11h ; "s"
.rdata:000003FC                 dd offset $SG67891      ; "TerminalServerLicenseServers"
.rdata:00000400                 dd offset a00compatibleac+12h ; ""
.rdata:00000404                 dd offset $SG67892      ; "DistributedCOMUsers"
.rdata:00000408                 dd offset $SG67885+5    ; "eDesktopUsers"
.rdata:0000040C                 dd offset $SG67893      ; "CryptographicOperators"
.rdata:00000410                 dd offset $SG67885+9    ; "ktopUsers"
.rdata:00000414                 dd offset $SG67894      ; "EventLogReaders"
.rdata:00000418                 dd offset $SG67885+0Ah  ; "topUsers"
.rdata:0000041C                 dd offset $SG67895      ; "CertificateServiceDCOMAccess"
.rdata:00000420 $SG67898        db 'Guest',0            ; DATA XREF: .rdata:0000053Co
.rdata:00000426                 align 4
.rdata:00000428 $SG67900        db 'DomainAdmins',0     ; DATA XREF: .rdata:0000054Co
.rdata:00000435                 align 4
.rdata:00000438 $SG67902        db 'DomainComputers',0  ; DATA XREF: .rdata:0000055Co
.rdata:00000448 $SG67903        db 'DomainControllers',0 ; DATA XREF: .rdata:00000564o
.rdata:0000045A                 align 4
.rdata:0000045C $SG67904        db 'CertPublishers',0   ; DATA XREF: .rdata:0000056Co
.rdata:0000046B                 align 4
.rdata:0000046C $SG67905        db 'SchemaAdmins',0     ; DATA XREF: .rdata:00000574o
.rdata:00000479                 align 4
.rdata:0000047C $SG67906        db 'EnterpriseAdmins',0 ; DATA XREF: .rdata:0000057Co
.rdata:0000048D                 align 10h
.rdata:00000490 $SG67907        db 'GroupPolicyCreatorOwners',0
.rdata:00000490                                         ; DATA XREF: .rdata:00000584o
.rdata:000004A9                 align 4
.rdata:000004AC $SG67908        db 'RASandIASServers',0 ; DATA XREF: .rdata:0000058Co
.rdata:000004BD                 align 10h
.rdata:000004C0 $SG67909        db 'RASandIASServers',0 ; DATA XREF: .rdata:00000594o
.rdata:000004D1                 align 4
.rdata:000004D4 $SG67910        db 'AllowedRODCPasswordReplicationGroup',0
.rdata:000004D4                                         ; DATA XREF: .rdata:0000059Co
.rdata:000004F8 $SG67911        db 'DeniedRODCPasswordReplicationGroup',0
.rdata:000004F8                                         ; DATA XREF: .rdata:000005A4o
.rdata:0000051B                 align 4
.rdata:0000051C $SG67922        db 'TrustedInstaller',0 ; DATA XREF: .rdata:000005BCo
.rdata:0000052D                 align 10h
.rdata:00000530 _sid_21_Names   dd offset $SG67882      ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &)+187r
.rdata:00000530                                         ; "Replicators"
.rdata:00000534 off_534         dd offset $SG67897      ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &)+196r
.rdata:00000534                                         ; "Administrator"
.rdata:00000538                 dd offset $SG67882+1    ; "eplicators"
.rdata:0000053C                 dd offset $SG67898      ; "Guest"
.rdata:00000540                 dd offset $SG67882+2    ; "plicators"
.rdata:00000544                 dd offset $SG67899      ; "KRBTGT"
.rdata:00000548                 dd offset $SG67883      ; "Backup Operators"
.rdata:0000054C                 dd offset $SG67900      ; "DomainAdmins"
.rdata:00000550                 dd offset $SG67883+1    ; "ackup Operators"
.rdata:00000554                 dd offset $SG67901      ; "DomainUsers"
.rdata:00000558                 dd offset $SG67883+3    ; "kup Operators"
.rdata:0000055C                 dd offset $SG67902      ; "DomainComputers"
.rdata:00000560                 dd offset $SG67883+4    ; "up Operators"
.rdata:00000564                 dd offset $SG67903      ; "DomainControllers"
.rdata:00000568                 dd offset $SG67883+5    ; "p Operators"
.rdata:0000056C                 dd offset $SG67904      ; "CertPublishers"
.rdata:00000570                 dd offset $SG67883+6    ; " Operators"
.rdata:00000574                 dd offset $SG67905      ; "SchemaAdmins"
.rdata:00000578                 dd offset $SG67883+7    ; "Operators"
.rdata:0000057C                 dd offset $SG67906      ; "EnterpriseAdmins"
.rdata:00000580                 dd offset $SG67883+8    ; "perators"
.rdata:00000584                 dd offset $SG67907      ; "GroupPolicyCreatorOwners"
.rdata:00000588                 dd offset a00compatibleac+9 ; "bleAccess"
.rdata:0000058C                 dd offset $SG67908      ; "RASandIASServers"
.rdata:00000590                 dd offset a00compatibleac+9 ; "bleAccess"
.rdata:00000594                 dd offset $SG67909      ; "RASandIASServers"
.rdata:00000598                 dd offset $SG67885+7    ; "esktopUsers"
.rdata:0000059C                 dd offset $SG67910      ; "AllowedRODCPasswordReplicationGroup"
.rdata:000005A0                 dd offset $SG67885+8    ; "sktopUsers"
.rdata:000005A4                 dd offset $SG67911      ; "DeniedRODCPasswordReplicationGroup"
.rdata:000005A8 _services_to_name db 0B5h ; ¦           ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &)+1D7o
.rdata:000005A9                 db  89h ; ë
.rdata:000005AA                 db 0FBh ; v
.rdata:000005AB                 db  38h ; 8
.rdata:000005AC                 db  19h
.rdata:000005AD                 db  84h ; ä
.rdata:000005AE                 db 0C2h ; -
.rdata:000005AF                 db 0CBh ; -
.rdata:000005B0                 db  5Ch ; \
.rdata:000005B1                 db  6Ch ; l
.rdata:000005B2                 db  23h ; #
.rdata:000005B3                 db  6Dh ; m
.rdata:000005B4                 db  57h ; W
.rdata:000005B5                 db    0
.rdata:000005B6                 db  77h ; w
.rdata:000005B7                 db  6Eh ; n
.rdata:000005B8                 db 0C0h ; +
.rdata:000005B9                 db    2
.rdata:000005BA                 db  64h ; d
.rdata:000005BB                 db  87h ; ç
.rdata:000005BC                 dd offset $SG67922      ; "TrustedInstaller"
.rdata:000005C0 $SG67930        db 'ERROR',0            ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &)+30o
.rdata:000005C6                 align 4
.rdata:000005C8 $SG67933        db 'UNSUPPORTED',0      ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &)+51o
.rdata:000005D4 $SG67936        db 'ERROR',0            ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &)+7Co
.rdata:000005DA                 align 4
.rdata:000005DC $SG67977        db 'S-1-',0             ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &):loc_EF7o
.rdata:000005E1                 align 4
.rdata:000005E4 $SG67980        db '0x',0               ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &):loc_F35o
.rdata:000005E7                 align 4
.rdata:000005E8 $SG67998        db 'ERROR',0            ; DATA XREF: ParseOwner(AString &,uchar const *,uint,uint)+23o
.rdata:000005EE                 align 10h
.rdata:000005F0 $SG68035        db 'ERROR',0            ; DATA XREF: ConvertNtSecureToString(uchar const *,uint,AString &):loc_B66o
.rdata:000005F6                 align 4
.rdata:000005F8 $SG68039        db 'UNSUPPORTED',0      ; DATA XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+37o
.rdata:00000604 $SG68044        db 's:',0               ; DATA XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+87o
.rdata:00000607                 align 4
.rdata:00000608 $SG68045        db 'd:',0               ; DATA XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+A1o
.rdata:0000060B                 align 4
.rdata:0000060C ; char _SG68099[]
.rdata:0000060C $SG68099        db 'Junction: ',0       ; DATA XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+79o
.rdata:00000617                 align 4
.rdata:00000618 ; char _SG68102[]
.rdata:00000618 $SG68102        db ' : ',0              ; DATA XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+C6o
.rdata:00000618 _rdata          ends
.rdata:00000618
.text:0000061C ; ===========================================================================
.text:0000061C
.text:0000061C ; Segment type: Pure code
.text:0000061C ; Segment permissions: Read/Execute
.text:0000061C _text           segment para public 'CODE' use32
.text:0000061C                 assume cs:_text
.text:0000061C                 ;org 61Ch
.text:0000061C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000061C
.text:0000061C ; =============== S U B R O U T I N E =======================================
.text:0000061C
.text:0000061C ; Attributes: bp-based frame
.text:0000061C
.text:0000061C ; void __stdcall ConvertWinAttribToString(char *, unsigned int)
.text:0000061C                 public ?ConvertWinAttribToString@@YGXPADI@Z
.text:0000061C ?ConvertWinAttribToString@@YGXPADI@Z proc near
.text:0000061C                                         ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+E6p
.text:0000061C
.text:0000061C var_4           = dword ptr -4
.text:0000061C arg_0           = dword ptr  8
.text:0000061C arg_4           = dword ptr  0Ch
.text:0000061C
.text:0000061C                 push    ebp
.text:0000061D                 mov     ebp, esp
.text:0000061F                 push    ecx
.text:00000620                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000627                 mov     [ebp+var_4], 0
.text:0000062E                 jmp     short loc_639
.text:00000630 ; ---------------------------------------------------------------------------
.text:00000630
.text:00000630 loc_630:                                ; CODE XREF: ConvertWinAttribToString(char *,uint):loc_66Bj
.text:00000630                 mov     eax, [ebp+var_4]
.text:00000633                 add     eax, 1
.text:00000636                 mov     [ebp+var_4], eax
.text:00000639
.text:00000639 loc_639:                                ; CODE XREF: ConvertWinAttribToString(char *,uint)+12j
.text:00000639                 cmp     [ebp+var_4], 10h
.text:0000063D                 jge     short loc_66D
.text:0000063F                 mov     edx, 1
.text:00000644                 mov     ecx, [ebp+var_4]
.text:00000647                 shl     edx, cl
.text:00000649                 and     edx, [ebp+arg_4]
.text:0000064C                 jz      short loc_66B
.text:0000064E                 cmp     [ebp+var_4], 7
.text:00000652                 jz      short loc_66B
.text:00000654                 mov     eax, [ebp+arg_0]
.text:00000657                 mov     ecx, [ebp+var_4]
.text:0000065A                 mov     dl, _g_WinAttribChars[ecx]
.text:00000660                 mov     [eax], dl
.text:00000662                 mov     eax, [ebp+arg_0]
.text:00000665                 add     eax, 1
.text:00000668                 mov     [ebp+arg_0], eax
.text:0000066B
.text:0000066B loc_66B:                                ; CODE XREF: ConvertWinAttribToString(char *,uint)+30j
.text:0000066B                                         ; ConvertWinAttribToString(char *,uint)+36j
.text:0000066B                 jmp     short loc_630
.text:0000066D ; ---------------------------------------------------------------------------
.text:0000066D
.text:0000066D loc_66D:                                ; CODE XREF: ConvertWinAttribToString(char *,uint)+21j
.text:0000066D                 mov     ecx, [ebp+arg_0]
.text:00000670                 mov     byte ptr [ecx], 0
.text:00000673                 mov     edx, [ebp+arg_4]
.text:00000676                 shr     edx, 10h
.text:00000679                 test    edx, edx
.text:0000067B                 jz      short loc_69C
.text:0000067D                 mov     eax, [ebp+arg_0]
.text:00000680                 mov     byte ptr [eax], 20h ; ' '
.text:00000683                 mov     ecx, [ebp+arg_0]
.text:00000686                 add     ecx, 1
.text:00000689                 mov     [ebp+arg_0], ecx
.text:0000068C                 mov     edx, [ebp+arg_4]
.text:0000068F                 shr     edx, 10h
.text:00000692                 push    edx
.text:00000693                 mov     eax, [ebp+arg_0]
.text:00000696                 push    eax
.text:00000697                 call    ?ConvertPosixAttribToString@@YGXPADI@Z ; ConvertPosixAttribToString(char *,uint)
.text:0000069C
.text:0000069C loc_69C:                                ; CODE XREF: ConvertWinAttribToString(char *,uint)+5Fj
.text:0000069C                 add     esp, 4
.text:0000069F                 cmp     ebp, esp
.text:000006A1                 call    __RTC_CheckEsp
.text:000006A6                 mov     esp, ebp
.text:000006A8                 pop     ebp
.text:000006A9                 retn    8
.text:000006A9 ?ConvertWinAttribToString@@YGXPADI@Z endp
.text:000006A9
.text:000006AC
.text:000006AC ; =============== S U B R O U T I N E =======================================
.text:000006AC
.text:000006AC ; Attributes: bp-based frame
.text:000006AC
.text:000006AC ; void __stdcall ConvertPosixAttribToString(char *, unsigned int)
.text:000006AC ?ConvertPosixAttribToString@@YGXPADI@Z proc near
.text:000006AC                                         ; CODE XREF: ConvertWinAttribToString(char *,uint)+7Bp
.text:000006AC                                         ; ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+10Bp
.text:000006AC
.text:000006AC var_4           = dword ptr -4
.text:000006AC arg_0           = dword ptr  8
.text:000006AC arg_4           = dword ptr  0Ch
.text:000006AC
.text:000006AC                 push    ebp
.text:000006AD                 mov     ebp, esp
.text:000006AF                 push    ecx
.text:000006B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006B7                 mov     eax, [ebp+arg_4]
.text:000006BA                 shr     eax, 0Ch
.text:000006BD                 and     eax, 0Fh
.text:000006C0                 mov     ecx, [ebp+arg_0]
.text:000006C3                 mov     dl, _kPosixTypes[eax]
.text:000006C9                 mov     [ecx], dl
.text:000006CB                 mov     [ebp+var_4], 6
.text:000006D2                 jmp     short loc_6DD
.text:000006D4 ; ---------------------------------------------------------------------------
.text:000006D4
.text:000006D4 loc_6D4:                                ; CODE XREF: ConvertPosixAttribToString(char *,uint)+ACj
.text:000006D4                 mov     eax, [ebp+var_4]
.text:000006D7                 sub     eax, 3
.text:000006DA                 mov     [ebp+var_4], eax
.text:000006DD
.text:000006DD loc_6DD:                                ; CODE XREF: ConvertPosixAttribToString(char *,uint)+26j
.text:000006DD                 cmp     [ebp+var_4], 0
.text:000006E1                 jl      short loc_75D
.text:000006E3                 mov     ecx, [ebp+var_4]
.text:000006E6                 add     ecx, 2
.text:000006E9                 mov     edx, 1
.text:000006EE                 shl     edx, cl
.text:000006F0                 and     edx, [ebp+arg_4]
.text:000006F3                 neg     edx
.text:000006F5                 sbb     dl, dl
.text:000006F7                 and     dl, 45h
.text:000006FA                 add     dl, 2Dh ; '-'
.text:000006FD                 mov     eax, 7
.text:00000702                 sub     eax, [ebp+var_4]
.text:00000705                 mov     ecx, [ebp+arg_0]
.text:00000708                 mov     [ecx+eax], dl
.text:0000070B                 mov     ecx, [ebp+var_4]
.text:0000070E                 add     ecx, 1
.text:00000711                 mov     edx, 1
.text:00000716                 shl     edx, cl
.text:00000718                 and     edx, [ebp+arg_4]
.text:0000071B                 neg     edx
.text:0000071D                 sbb     dl, dl
.text:0000071F                 and     dl, 4Ah
.text:00000722                 add     dl, 2Dh ; '-'
.text:00000725                 mov     eax, 8
.text:0000072A                 sub     eax, [ebp+var_4]
.text:0000072D                 mov     ecx, [ebp+arg_0]
.text:00000730                 mov     [ecx+eax], dl
.text:00000733                 mov     edx, 1
.text:00000738                 mov     ecx, [ebp+var_4]
.text:0000073B                 shl     edx, cl
.text:0000073D                 and     edx, [ebp+arg_4]
.text:00000740                 neg     edx
.text:00000742                 sbb     dl, dl
.text:00000744                 and     dl, 4Bh
.text:00000747                 add     dl, 2Dh ; '-'
.text:0000074A                 mov     eax, 9
.text:0000074F                 sub     eax, [ebp+var_4]
.text:00000752                 mov     ecx, [ebp+arg_0]
.text:00000755                 mov     [ecx+eax], dl
.text:00000758                 jmp     loc_6D4
.text:0000075D ; ---------------------------------------------------------------------------
.text:0000075D
.text:0000075D loc_75D:                                ; CODE XREF: ConvertPosixAttribToString(char *,uint)+35j
.text:0000075D                 mov     edx, [ebp+arg_4]
.text:00000760                 and     edx, 800h
.text:00000766                 jz      short loc_77C
.text:00000768                 mov     eax, [ebp+arg_4]
.text:0000076B                 and     eax, 40h
.text:0000076E                 neg     eax
.text:00000770                 sbb     al, al
.text:00000772                 and     al, 20h
.text:00000774                 add     al, 53h ; 'S'
.text:00000776                 mov     ecx, [ebp+arg_0]
.text:00000779                 mov     [ecx+3], al
.text:0000077C
.text:0000077C loc_77C:                                ; CODE XREF: ConvertPosixAttribToString(char *,uint)+BAj
.text:0000077C                 mov     edx, [ebp+arg_4]
.text:0000077F                 and     edx, 400h
.text:00000785                 jz      short loc_79B
.text:00000787                 mov     eax, [ebp+arg_4]
.text:0000078A                 and     eax, 8
.text:0000078D                 neg     eax
.text:0000078F                 sbb     al, al
.text:00000791                 and     al, 20h
.text:00000793                 add     al, 53h ; 'S'
.text:00000795                 mov     ecx, [ebp+arg_0]
.text:00000798                 mov     [ecx+6], al
.text:0000079B
.text:0000079B loc_79B:                                ; CODE XREF: ConvertPosixAttribToString(char *,uint)+D9j
.text:0000079B                 mov     edx, [ebp+arg_4]
.text:0000079E                 and     edx, 200h
.text:000007A4                 jz      short loc_7BA
.text:000007A6                 mov     eax, [ebp+arg_4]
.text:000007A9                 and     eax, 1
.text:000007AC                 neg     eax
.text:000007AE                 sbb     al, al
.text:000007B0                 and     al, 20h
.text:000007B2                 add     al, 54h ; 'T'
.text:000007B4                 mov     ecx, [ebp+arg_0]
.text:000007B7                 mov     [ecx+9], al
.text:000007BA
.text:000007BA loc_7BA:                                ; CODE XREF: ConvertPosixAttribToString(char *,uint)+F8j
.text:000007BA                 mov     edx, [ebp+arg_0]
.text:000007BD                 mov     byte ptr [edx+0Ah], 0
.text:000007C1                 mov     eax, [ebp+arg_4]
.text:000007C4                 and     eax, 0FFFF0000h
.text:000007C9                 mov     [ebp+arg_4], eax
.text:000007CC                 jz      short loc_7E5
.text:000007CE                 mov     ecx, [ebp+arg_0]
.text:000007D1                 mov     byte ptr [ecx+0Ah], 20h ; ' '
.text:000007D5                 mov     edx, [ebp+arg_0]
.text:000007D8                 add     edx, 0Bh
.text:000007DB                 push    edx             ; char *
.text:000007DC                 mov     eax, [ebp+arg_4]
.text:000007DF                 push    eax             ; unsigned int
.text:000007E0                 call    ?ConvertUInt32ToHex8Digits@@YGXIPAD@Z ; ConvertUInt32ToHex8Digits(uint,char *)
.text:000007E5
.text:000007E5 loc_7E5:                                ; CODE XREF: ConvertPosixAttribToString(char *,uint)+120j
.text:000007E5                 add     esp, 4
.text:000007E8                 cmp     ebp, esp
.text:000007EA                 call    __RTC_CheckEsp
.text:000007EF                 mov     esp, ebp
.text:000007F1                 pop     ebp
.text:000007F2                 retn    8
.text:000007F2 ?ConvertPosixAttribToString@@YGXPADI@Z endp
.text:000007F2
.text:000007F2 ; ---------------------------------------------------------------------------
.text:000007F5                 db 7 dup(0CCh)
.text:000007FC
.text:000007FC ; =============== S U B R O U T I N E =======================================
.text:000007FC
.text:000007FC ; Attributes: bp-based frame
.text:000007FC
.text:000007FC ; void __stdcall ConvertPropertyToShortString(char *, const struct tagPROPVARIANT *, unsigned __int32, bool)
.text:000007FC                 public ?ConvertPropertyToShortString@@YGXPADABUtagPROPVARIANT@@K_N@Z
.text:000007FC ?ConvertPropertyToShortString@@YGXPADABUtagPROPVARIANT@@K_N@Z proc near
.text:000007FC                                         ; CODE XREF: ConvertPropertyToString(UString &,tagPROPVARIANT const &,ulong,bool)+4Dp
.text:000007FC
.text:000007FC var_30          = dword ptr -30h
.text:000007FC var_28          = qword ptr -28h
.text:000007FC var_1C          = qword ptr -1Ch
.text:000007FC var_14          = dword ptr -14h
.text:000007FC LocalFileTime   = _FILETIME ptr -0Ch
.text:000007FC Str             = dword ptr  8
.text:000007FC arg_4           = dword ptr  0Ch
.text:000007FC arg_8           = dword ptr  10h
.text:000007FC arg_C           = byte ptr  14h
.text:000007FC
.text:000007FC                 push    ebp
.text:000007FD                 mov     ebp, esp
.text:000007FF                 sub     esp, 30h
.text:00000802                 push    esi
.text:00000803                 push    edi             ; char *
.text:00000804                 lea     edi, [ebp+var_30]
.text:00000807                 mov     ecx, 0Ch
.text:0000080C                 mov     eax, 0CCCCCCCCh
.text:00000811                 rep stosd
.text:00000813                 mov     eax, [ebp+Str]
.text:00000816                 mov     byte ptr [eax], 0
.text:00000819                 mov     ecx, [ebp+arg_4]
.text:0000081C                 movzx   edx, word ptr [ecx]
.text:0000081F                 cmp     edx, 40h ; '@'
.text:00000822                 jnz     short loc_872
.text:00000824                 mov     eax, [ebp+arg_4]
.text:00000827                 cmp     dword ptr [eax+0Ch], 0
.text:0000082B                 jnz     short loc_836
.text:0000082D                 mov     ecx, [ebp+arg_4]
.text:00000830                 cmp     dword ptr [ecx+8], 0
.text:00000834                 jz      short loc_854
.text:00000836
.text:00000836 loc_836:                                ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+2Fj
.text:00000836                 mov     esi, esp
.text:00000838                 lea     edx, [ebp+LocalFileTime]
.text:0000083B                 push    edx             ; lpLocalFileTime
.text:0000083C                 mov     eax, [ebp+arg_4]
.text:0000083F                 add     eax, 8
.text:00000842                 push    eax             ; lpFileTime
.text:00000843                 call    dword ptr ds:__imp__FileTimeToLocalFileTime@8 ; FileTimeToLocalFileTime(x,x)
.text:00000849                 cmp     esi, esp
.text:0000084B                 call    __RTC_CheckEsp
.text:00000850                 test    eax, eax
.text:00000852                 jnz     short loc_859
.text:00000854
.text:00000854 loc_854:                                ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+38j
.text:00000854                 jmp     loc_9D8
.text:00000859 ; ---------------------------------------------------------------------------
.text:00000859
.text:00000859 loc_859:                                ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+56j
.text:00000859                 movzx   ecx, [ebp+arg_C]
.text:0000085D                 push    ecx             ; bool
.text:0000085E                 push    1               ; bool
.text:00000860                 mov     edx, [ebp+Str]
.text:00000863                 push    edx             ; char *
.text:00000864                 lea     eax, [ebp+LocalFileTime]
.text:00000867                 push    eax             ; struct _FILETIME *
.text:00000868                 call    ?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z ; ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)
.text:0000086D                 jmp     loc_9D8
.text:00000872 ; ---------------------------------------------------------------------------
.text:00000872
.text:00000872 loc_872:                                ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+26j
.text:00000872                 mov     ecx, [ebp+arg_8]
.text:00000875                 mov     [ebp+var_30], ecx
.text:00000878                 mov     edx, [ebp+var_30]
.text:0000087B                 sub     edx, 9
.text:0000087E                 mov     [ebp+var_30], edx
.text:00000881                 cmp     [ebp+var_30], 52h ; 'R' ; switch 83 cases
.text:00000885                 ja      $LN11           ; jumptable 00000895 default case
.text:0000088B                 mov     eax, [ebp+var_30]
.text:0000088E                 movzx   ecx, ds:$LN19[eax]
.text:00000895                 jmp     ds:$LN24[ecx*4] ; switch jump
.text:0000089C ; ---------------------------------------------------------------------------
.text:0000089C
.text:0000089C $LN10:                                  ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+99j
.text:0000089C                                         ; DATA XREF: .text:$LN24o
.text:0000089C                 mov     edx, [ebp+arg_4] ; jumptable 00000895 case 10
.text:0000089F                 movzx   eax, word ptr [edx]
.text:000008A2                 cmp     eax, 13h
.text:000008A5                 jz      short loc_8AC
.text:000008A7                 jmp     $LN11           ; jumptable 00000895 default case
.text:000008AC ; ---------------------------------------------------------------------------
.text:000008AC
.text:000008AC loc_8AC:                                ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+A9j
.text:000008AC                 mov     ecx, [ebp+Str]
.text:000008AF                 push    ecx             ; char *
.text:000008B0                 mov     edx, [ebp+arg_4]
.text:000008B3                 mov     eax, [edx+8]
.text:000008B6                 push    eax             ; unsigned int
.text:000008B7                 call    ?ConvertUInt32ToHex8Digits@@YGXIPAD@Z ; ConvertUInt32ToHex8Digits(uint,char *)
.text:000008BC                 jmp     loc_9D8
.text:000008C1 ; ---------------------------------------------------------------------------
.text:000008C1
.text:000008C1 $LN8:                                   ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+99j
.text:000008C1                                         ; DATA XREF: .text:$LN24o
.text:000008C1                 mov     ecx, [ebp+arg_4] ; jumptable 00000895 case 0
.text:000008C4                 movzx   edx, word ptr [ecx]
.text:000008C7                 cmp     edx, 13h
.text:000008CA                 jz      short loc_8D1
.text:000008CC                 jmp     $LN11           ; jumptable 00000895 default case
.text:000008D1 ; ---------------------------------------------------------------------------
.text:000008D1
.text:000008D1 loc_8D1:                                ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+CEj
.text:000008D1                 mov     eax, [ebp+arg_4]
.text:000008D4                 mov     ecx, [eax+8]
.text:000008D7                 mov     [ebp+var_14], ecx
.text:000008DA                 mov     edx, [ebp+var_14]
.text:000008DD                 push    edx             ; unsigned int
.text:000008DE                 mov     eax, [ebp+Str]
.text:000008E1                 push    eax             ; char *
.text:000008E2                 call    ?ConvertWinAttribToString@@YGXPADI@Z ; ConvertWinAttribToString(char *,uint)
.text:000008E7                 jmp     loc_9D8
.text:000008EC ; ---------------------------------------------------------------------------
.text:000008EC
.text:000008EC $LN6:                                   ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+99j
.text:000008EC                                         ; DATA XREF: .text:$LN24o
.text:000008EC                 mov     ecx, [ebp+arg_4] ; jumptable 00000895 case 44
.text:000008EF                 movzx   edx, word ptr [ecx]
.text:000008F2                 cmp     edx, 13h
.text:000008F5                 jz      short loc_8FC
.text:000008F7                 jmp     $LN11           ; jumptable 00000895 default case
.text:000008FC ; ---------------------------------------------------------------------------
.text:000008FC
.text:000008FC loc_8FC:                                ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+F9j
.text:000008FC                 mov     eax, [ebp+arg_4]
.text:000008FF                 mov     ecx, [eax+8]
.text:00000902                 push    ecx
.text:00000903                 mov     edx, [ebp+Str]
.text:00000906                 push    edx
.text:00000907                 call    ?ConvertPosixAttribToString@@YGXPADI@Z ; ConvertPosixAttribToString(char *,uint)
.text:0000090C                 jmp     loc_9D8
.text:00000911 ; ---------------------------------------------------------------------------
.text:00000911
.text:00000911 $LN4:                                   ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+99j
.text:00000911                                         ; DATA XREF: .text:$LN24o
.text:00000911                 mov     eax, [ebp+arg_4] ; jumptable 00000895 case 82
.text:00000914                 movzx   ecx, word ptr [eax]
.text:00000917                 cmp     ecx, 15h
.text:0000091A                 jz      short loc_921
.text:0000091C                 jmp     $LN11           ; jumptable 00000895 default case
.text:00000921 ; ---------------------------------------------------------------------------
.text:00000921
.text:00000921 loc_921:                                ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+11Ej
.text:00000921                 mov     edx, [ebp+Str]
.text:00000924                 push    edx             ; char *
.text:00000925                 mov     ecx, [ebp+arg_4]
.text:00000928                 mov     eax, [ecx+8]
.text:0000092B                 mov     edx, [ecx+0Ch]
.text:0000092E                 mov     cl, 30h ; '0'
.text:00000930                 call    __aullshr
.text:00000935                 push    eax             ; unsigned int
.text:00000936                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:0000093B                 mov     edx, [ebp+Str]
.text:0000093E                 push    edx             ; Str
.text:0000093F                 call    _strlen
.text:00000944                 add     esp, 4
.text:00000947                 add     eax, [ebp+Str]
.text:0000094A                 mov     [ebp+Str], eax
.text:0000094D                 mov     eax, [ebp+Str]
.text:00000950                 mov     byte ptr [eax], 2Dh ; '-'
.text:00000953                 mov     ecx, [ebp+Str]
.text:00000956                 add     ecx, 1
.text:00000959                 mov     [ebp+Str], ecx
.text:0000095C                 mov     edx, [ebp+arg_4]
.text:0000095F                 mov     eax, [edx+8]
.text:00000962                 mov     ecx, [edx+0Ch]
.text:00000965                 and     ecx, 0FFFFh
.text:0000096B                 mov     dword ptr [ebp+var_1C], eax
.text:0000096E                 mov     dword ptr [ebp+var_1C+4], ecx
.text:00000971                 mov     edx, [ebp+Str]
.text:00000974                 push    edx             ; char *
.text:00000975                 mov     eax, dword ptr [ebp+var_1C+4]
.text:00000978                 push    eax
.text:00000979                 mov     ecx, dword ptr [ebp+var_1C]
.text:0000097C                 push    ecx             ; unsigned __int64
.text:0000097D                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:00000982                 jmp     short loc_9D8
.text:00000984 ; ---------------------------------------------------------------------------
.text:00000984
.text:00000984 $LN2:                                   ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+99j
.text:00000984                                         ; DATA XREF: .text:$LN24o
.text:00000984                 mov     dword ptr [ebp+var_28], 0 ; jumptable 00000895 case 39
.text:0000098B                 mov     dword ptr [ebp+var_28+4], 0
.text:00000992                 lea     edx, [ebp+var_28]
.text:00000995                 push    edx             ; unsigned __int64 *
.text:00000996                 mov     eax, [ebp+arg_4]
.text:00000999                 push    eax             ; struct tagPROPVARIANT *
.text:0000099A                 call    ?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ; ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)
.text:0000099F                 movzx   ecx, al
.text:000009A2                 test    ecx, ecx
.text:000009A4                 jz      short $LN11     ; jumptable 00000895 default case
.text:000009A6                 mov     edx, [ebp+Str]
.text:000009A9                 mov     byte ptr [edx], 30h ; '0'
.text:000009AC                 mov     eax, [ebp+Str]
.text:000009AF                 mov     byte ptr [eax+1], 78h ; 'x'
.text:000009B3                 mov     ecx, [ebp+Str]
.text:000009B6                 add     ecx, 2
.text:000009B9                 push    ecx             ; char *
.text:000009BA                 mov     edx, [ebp+arg_4]
.text:000009BD                 mov     eax, [edx+8]
.text:000009C0                 xor     ecx, ecx
.text:000009C2                 push    ecx
.text:000009C3                 push    eax             ; unsigned __int64
.text:000009C4                 call    ?ConvertUInt64ToHex@@YGX_KPAD@Z ; ConvertUInt64ToHex(unsigned __int64,char *)
.text:000009C9                 jmp     short loc_9D8
.text:000009CB ; ---------------------------------------------------------------------------
.text:000009CB
.text:000009CB $LN11:                                  ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+89j
.text:000009CB                                         ; ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+99j ...
.text:000009CB                 mov     edx, [ebp+Str]  ; jumptable 00000895 default case
.text:000009CE                 push    edx             ; char *
.text:000009CF                 mov     eax, [ebp+arg_4]
.text:000009D2                 push    eax             ; struct tagPROPVARIANT *
.text:000009D3                 call    ?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PAD@Z ; ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)
.text:000009D8
.text:000009D8 loc_9D8:                                ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool):loc_854j
.text:000009D8                                         ; ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+71j ...
.text:000009D8                 push    edx
.text:000009D9                 mov     ecx, ebp
.text:000009DB                 push    eax
.text:000009DC                 lea     edx, $LN23
.text:000009E2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000009E7                 pop     eax
.text:000009E8                 pop     edx
.text:000009E9                 pop     edi
.text:000009EA                 pop     esi
.text:000009EB                 add     esp, 30h
.text:000009EE                 cmp     ebp, esp
.text:000009F0                 call    __RTC_CheckEsp
.text:000009F5                 mov     esp, ebp
.text:000009F7                 pop     ebp
.text:000009F8                 retn    10h
.text:000009F8 ?ConvertPropertyToShortString@@YGXPADABUtagPROPVARIANT@@K_N@Z endp
.text:000009F8
.text:000009F8 ; ---------------------------------------------------------------------------
.text:000009FB                 align 4
.text:000009FC $LN23           dd 2                    ; DATA XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+1E0o
.text:00000A00                 dd offset $LN22
.text:00000A04 $LN22           dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00000A00o
.text:00000A0C                 dd offset $LN20         ; "localFileTime"
.text:00000A10                 dd 0FFFFFFD8h, 8
.text:00000A18                 dd offset $LN21
.text:00000A1C $LN21           db 76h, 0               ; DATA XREF: .text:00000A18o
.text:00000A1E $LN20           db 'localFileTime',0    ; DATA XREF: .text:00000A0Co
.text:00000A2C $LN24           dd offset $LN8, offset $LN10, offset $LN2, offset $LN6
.text:00000A2C                                         ; DATA XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+99r
.text:00000A2C                 dd offset $LN4, offset $LN11 ; jump table for switch statement
.text:00000A44 $LN19           db      0,     5,     5,     5
.text:00000A44                                         ; DATA XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+92r
.text:00000A44                 db      5,     5,     5,     5 ; indirect table for switch statement
.text:00000A44                 db      5,     5,     1,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     2
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      3,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     5,     5
.text:00000A44                 db      5,     5,     4
.text:00000A97                 db 5 dup(0CCh)
.text:00000A9C
.text:00000A9C ; =============== S U B R O U T I N E =======================================
.text:00000A9C
.text:00000A9C ; Attributes: bp-based frame
.text:00000A9C
.text:00000A9C ; void __stdcall ConvertPropertyToString(struct UString *, const struct tagPROPVARIANT *, unsigned __int32, bool)
.text:00000A9C                 public ?ConvertPropertyToString@@YGXAAVUString@@ABUtagPROPVARIANT@@K_N@Z
.text:00000A9C ?ConvertPropertyToString@@YGXAAVUString@@ABUtagPROPVARIANT@@K_N@Z proc near
.text:00000A9C
.text:00000A9C var_4C          = byte ptr -4Ch
.text:00000A9C var_48          = byte ptr -48h
.text:00000A9C var_4           = dword ptr -4
.text:00000A9C arg_0           = dword ptr  8
.text:00000A9C arg_4           = dword ptr  0Ch
.text:00000A9C arg_8           = dword ptr  10h
.text:00000A9C arg_C           = byte ptr  14h
.text:00000A9C
.text:00000A9C                 push    ebp
.text:00000A9D                 mov     ebp, esp
.text:00000A9F                 sub     esp, 4Ch
.text:00000AA2                 push    edi
.text:00000AA3                 lea     edi, [ebp+var_4C]
.text:00000AA6                 mov     ecx, 13h
.text:00000AAB                 mov     eax, 0CCCCCCCCh
.text:00000AB0                 rep stosd
.text:00000AB2                 mov     eax, dword ptr ds:___security_cookie
.text:00000AB7                 xor     eax, ebp
.text:00000AB9                 mov     [ebp+var_4], eax
.text:00000ABC                 mov     eax, [ebp+arg_4]
.text:00000ABF                 movzx   ecx, word ptr [eax]
.text:00000AC2                 cmp     ecx, 8
.text:00000AC5                 jnz     short loc_AD8
.text:00000AC7                 mov     edx, [ebp+arg_4]
.text:00000ACA                 mov     eax, [edx+8]
.text:00000ACD                 push    eax             ; wchar_t *
.text:00000ACE                 mov     ecx, [ebp+arg_0] ; this
.text:00000AD1                 call    ?SetFromBstr@UString@@QAEXPA_W@Z ; UString::SetFromBstr(wchar_t *)
.text:00000AD6                 jmp     short loc_AFA
.text:00000AD8 ; ---------------------------------------------------------------------------
.text:00000AD8
.text:00000AD8 loc_AD8:                                ; CODE XREF: ConvertPropertyToString(UString &,tagPROPVARIANT const &,ulong,bool)+29j
.text:00000AD8                 movzx   ecx, [ebp+arg_C]
.text:00000ADC                 push    ecx             ; bool
.text:00000ADD                 mov     edx, [ebp+arg_8]
.text:00000AE0                 push    edx             ; unsigned __int32
.text:00000AE1                 mov     eax, [ebp+arg_4]
.text:00000AE4                 push    eax             ; struct tagPROPVARIANT *
.text:00000AE5                 lea     ecx, [ebp+var_48]
.text:00000AE8                 push    ecx             ; char *
.text:00000AE9                 call    ?ConvertPropertyToShortString@@YGXPADABUtagPROPVARIANT@@K_N@Z ; ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)
.text:00000AEE                 lea     edx, [ebp+var_48]
.text:00000AF1                 push    edx             ; char *
.text:00000AF2                 mov     ecx, [ebp+arg_0] ; this
.text:00000AF5                 call    ?SetFromAscii@UString@@QAEXPBD@Z ; UString::SetFromAscii(char const *)
.text:00000AFA
.text:00000AFA loc_AFA:                                ; CODE XREF: ConvertPropertyToString(UString &,tagPROPVARIANT const &,ulong,bool)+3Aj
.text:00000AFA                 push    edx
.text:00000AFB                 mov     ecx, ebp
.text:00000AFD                 push    eax
.text:00000AFE                 lea     edx, $LN6_1
.text:00000B04                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000B09                 pop     eax
.text:00000B0A                 pop     edx
.text:00000B0B                 pop     edi
.text:00000B0C                 mov     ecx, [ebp+var_4]
.text:00000B0F                 xor     ecx, ebp
.text:00000B11                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000B16                 add     esp, 4Ch
.text:00000B19                 cmp     ebp, esp
.text:00000B1B                 call    __RTC_CheckEsp
.text:00000B20                 mov     esp, ebp
.text:00000B22                 pop     ebp
.text:00000B23                 retn    10h
.text:00000B23 ?ConvertPropertyToString@@YGXAAVUString@@ABUtagPROPVARIANT@@K_N@Z endp
.text:00000B23
.text:00000B23 ; ---------------------------------------------------------------------------
.text:00000B26                 align 4
.text:00000B28 $LN6_1          dd 1                    ; DATA XREF: ConvertPropertyToString(UString &,tagPROPVARIANT const &,ulong,bool)+62o
.text:00000B2C                 dd offset $LN5_0
.text:00000B30 $LN5_0          dd 0FFFFFFB8h, 40h      ; DATA XREF: .text:00000B2Co
.text:00000B38                 dd offset $LN4_1        ; "temp"
.text:00000B3C $LN4_1          db 'temp',0             ; DATA XREF: .text:00000B38o
.text:00000B41                 db 0Bh dup(0CCh)
.text:00000B4C
.text:00000B4C ; =============== S U B R O U T I N E =======================================
.text:00000B4C
.text:00000B4C ; Attributes: bp-based frame
.text:00000B4C
.text:00000B4C ; void __stdcall ConvertNtSecureToString(const unsigned __int8 *, unsigned int, struct AString *)
.text:00000B4C                 public ?ConvertNtSecureToString@@YGXPBEIAAVAString@@@Z
.text:00000B4C ?ConvertNtSecureToString@@YGXPBEIAAVAString@@@Z proc near
.text:00000B4C
.text:00000B4C arg_0           = dword ptr  8
.text:00000B4C arg_4           = dword ptr  0Ch
.text:00000B4C arg_8           = dword ptr  10h
.text:00000B4C
.text:00000B4C                 push    ebp
.text:00000B4D                 mov     ebp, esp
.text:00000B4F                 mov     ecx, [ebp+arg_8] ; this
.text:00000B52                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00000B57                 cmp     [ebp+arg_4], 14h
.text:00000B5B                 jb      short loc_B66
.text:00000B5D                 cmp     [ebp+arg_4], 40000h
.text:00000B64                 jbe     short loc_B78
.text:00000B66
.text:00000B66 loc_B66:                                ; CODE XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+Fj
.text:00000B66                 push    offset $SG68035 ; "ERROR"
.text:00000B6B                 mov     ecx, [ebp+arg_8]
.text:00000B6E                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000B73                 jmp     loc_C1A
.text:00000B78 ; ---------------------------------------------------------------------------
.text:00000B78
.text:00000B78 loc_B78:                                ; CODE XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+18j
.text:00000B78                 mov     eax, [ebp+arg_0]
.text:00000B7B                 movzx   ecx, word ptr [eax]
.text:00000B7E                 cmp     ecx, 1
.text:00000B81                 jz      short loc_B95
.text:00000B83                 push    offset $SG68039 ; "UNSUPPORTED"
.text:00000B88                 mov     ecx, [ebp+arg_8]
.text:00000B8B                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000B90                 jmp     loc_C1A
.text:00000B95 ; ---------------------------------------------------------------------------
.text:00000B95
.text:00000B95 loc_B95:                                ; CODE XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+35j
.text:00000B95                 mov     edx, [ebp+arg_0]
.text:00000B98                 mov     eax, [edx+4]
.text:00000B9B                 push    eax
.text:00000B9C                 mov     ecx, [ebp+arg_4]
.text:00000B9F                 push    ecx
.text:00000BA0                 mov     edx, [ebp+arg_0]
.text:00000BA3                 push    edx
.text:00000BA4                 mov     eax, [ebp+arg_8]
.text:00000BA7                 push    eax
.text:00000BA8                 call    ?ParseOwner@@YGXAAVAString@@PBEII@Z ; ParseOwner(AString &,uchar const *,uint,uint)
.text:00000BAD                 push    20h ; ' '
.text:00000BAF                 mov     ecx, [ebp+arg_8]
.text:00000BB2                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00000BB7                 mov     ecx, [ebp+arg_0]
.text:00000BBA                 mov     edx, [ecx+8]
.text:00000BBD                 push    edx
.text:00000BBE                 mov     eax, [ebp+arg_4]
.text:00000BC1                 push    eax
.text:00000BC2                 mov     ecx, [ebp+arg_0]
.text:00000BC5                 push    ecx
.text:00000BC6                 mov     edx, [ebp+arg_8]
.text:00000BC9                 push    edx
.text:00000BCA                 call    ?ParseOwner@@YGXAAVAString@@PBEII@Z ; ParseOwner(AString &,uchar const *,uint,uint)
.text:00000BCF                 push    0Ch
.text:00000BD1                 push    10h
.text:00000BD3                 push    offset $SG68044 ; "s:"
.text:00000BD8                 mov     eax, [ebp+arg_4]
.text:00000BDB                 push    eax
.text:00000BDC                 mov     ecx, [ebp+arg_0]
.text:00000BDF                 push    ecx
.text:00000BE0                 mov     edx, [ebp+arg_8]
.text:00000BE3                 push    edx
.text:00000BE4                 call    ?ParseAcl@@YGXAAVAString@@PBEIPBDII@Z ; ParseAcl(AString &,uchar const *,uint,char const *,uint,uint)
.text:00000BE9                 push    10h
.text:00000BEB                 push    4
.text:00000BED                 push    offset $SG68045 ; "d:"
.text:00000BF2                 mov     eax, [ebp+arg_4]
.text:00000BF5                 push    eax
.text:00000BF6                 mov     ecx, [ebp+arg_0]
.text:00000BF9                 push    ecx
.text:00000BFA                 mov     edx, [ebp+arg_8]
.text:00000BFD                 push    edx
.text:00000BFE                 call    ?ParseAcl@@YGXAAVAString@@PBEIPBDII@Z ; ParseAcl(AString &,uchar const *,uint,char const *,uint,uint)
.text:00000C03                 push    20h ; ' '
.text:00000C05                 mov     ecx, [ebp+arg_8]
.text:00000C08                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00000C0D                 mov     eax, [ebp+arg_4]
.text:00000C10                 push    eax
.text:00000C11                 mov     ecx, [ebp+arg_8]
.text:00000C14                 push    ecx
.text:00000C15                 call    ?AddUInt32ToString@@YGXAAVAString@@I@Z ; AddUInt32ToString(AString &,uint)
.text:00000C1A
.text:00000C1A loc_C1A:                                ; CODE XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+27j
.text:00000C1A                                         ; ConvertNtSecureToString(uchar const *,uint,AString &)+44j
.text:00000C1A                 cmp     ebp, esp
.text:00000C1C                 call    __RTC_CheckEsp
.text:00000C21                 pop     ebp
.text:00000C22                 retn    0Ch
.text:00000C22 ?ConvertNtSecureToString@@YGXPBEIAAVAString@@@Z endp
.text:00000C22
.text:00000C22 ; ---------------------------------------------------------------------------
.text:00000C25                 db 7 dup(0CCh)
.text:00000C2C
.text:00000C2C ; =============== S U B R O U T I N E =======================================
.text:00000C2C
.text:00000C2C ; Attributes: bp-based frame
.text:00000C2C
.text:00000C2C ; void __stdcall ParseOwner(class AString &, unsigned char const *, unsigned int, unsigned int)
.text:00000C2C ?ParseOwner@@YGXAAVAString@@PBEII@Z proc near
.text:00000C2C                                         ; CODE XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+5Cp
.text:00000C2C                                         ; ConvertNtSecureToString(uchar const *,uint,AString &)+7Ep
.text:00000C2C
.text:00000C2C var_C           = dword ptr -0Ch
.text:00000C2C var_8           = dword ptr -8
.text:00000C2C var_4           = dword ptr -4
.text:00000C2C arg_0           = dword ptr  8
.text:00000C2C arg_4           = dword ptr  0Ch
.text:00000C2C arg_8           = dword ptr  10h
.text:00000C2C arg_C           = dword ptr  14h
.text:00000C2C
.text:00000C2C                 push    ebp
.text:00000C2D                 mov     ebp, esp
.text:00000C2F                 sub     esp, 0Ch
.text:00000C32                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000C39                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000C40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C47                 mov     eax, [ebp+arg_C]
.text:00000C4A                 cmp     eax, [ebp+arg_8]
.text:00000C4D                 jbe     short loc_C5E
.text:00000C4F                 push    offset $SG67998 ; "ERROR"
.text:00000C54                 mov     ecx, [ebp+arg_0]
.text:00000C57                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000C5C                 jmp     short loc_C80
.text:00000C5E ; ---------------------------------------------------------------------------
.text:00000C5E
.text:00000C5E loc_C5E:                                ; CODE XREF: ParseOwner(AString &,uchar const *,uint,uint)+21j
.text:00000C5E                 mov     [ebp+var_8], 0
.text:00000C65                 lea     ecx, [ebp+var_8]
.text:00000C68                 push    ecx
.text:00000C69                 mov     edx, [ebp+arg_8]
.text:00000C6C                 sub     edx, [ebp+arg_C]
.text:00000C6F                 push    edx
.text:00000C70                 mov     eax, [ebp+arg_4]
.text:00000C73                 add     eax, [ebp+arg_C]
.text:00000C76                 push    eax
.text:00000C77                 mov     ecx, [ebp+arg_0]
.text:00000C7A                 push    ecx
.text:00000C7B                 call    ?ParseSid@@YGXAAVAString@@PBEIAAI@Z ; ParseSid(AString &,uchar const *,uint,uint &)
.text:00000C80
.text:00000C80 loc_C80:                                ; CODE XREF: ParseOwner(AString &,uchar const *,uint,uint)+30j
.text:00000C80                 push    edx
.text:00000C81                 mov     ecx, ebp
.text:00000C83                 push    eax
.text:00000C84                 lea     edx, $LN6_2
.text:00000C8A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000C8F                 pop     eax
.text:00000C90                 pop     edx
.text:00000C91                 add     esp, 0Ch
.text:00000C94                 cmp     ebp, esp
.text:00000C96                 call    __RTC_CheckEsp
.text:00000C9B                 mov     esp, ebp
.text:00000C9D                 pop     ebp
.text:00000C9E                 retn    10h
.text:00000C9E ?ParseOwner@@YGXAAVAString@@PBEII@Z endp
.text:00000C9E
.text:00000C9E ; ---------------------------------------------------------------------------
.text:00000CA1                 align 4
.text:00000CA4 $LN6_2          dd 1                    ; DATA XREF: ParseOwner(AString &,uchar const *,uint,uint)+58o
.text:00000CA8                 dd offset $LN5_1
.text:00000CAC $LN5_1          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000CA8o
.text:00000CB4                 dd offset $LN4_2        ; "sidSize"
.text:00000CB8 $LN4_2          db 'sidSize',0          ; DATA XREF: .text:00000CB4o
.text:00000CC0                 db 0Ch dup(0CCh)
.text:00000CCC
.text:00000CCC ; =============== S U B R O U T I N E =======================================
.text:00000CCC
.text:00000CCC ; Attributes: bp-based frame
.text:00000CCC
.text:00000CCC ; void __stdcall ParseSid(class AString &, unsigned char const *, unsigned int, unsigned int &)
.text:00000CCC ?ParseSid@@YGXAAVAString@@PBEIAAI@Z proc near
.text:00000CCC                                         ; CODE XREF: ParseOwner(AString &,uchar const *,uint,uint)+4Fp
.text:00000CCC
.text:00000CCC var_50          = dword ptr -50h
.text:00000CCC var_4C          = dword ptr -4Ch
.text:00000CCC var_44          = byte ptr -44h
.text:00000CCC var_30          = dword ptr -30h
.text:00000CCC var_2C          = dword ptr -2Ch
.text:00000CCC var_28          = dword ptr -28h
.text:00000CCC var_24          = dword ptr -24h
.text:00000CCC var_20          = dword ptr -20h
.text:00000CCC var_1C          = dword ptr -1Ch
.text:00000CCC var_18          = dword ptr -18h
.text:00000CCC var_14          = dword ptr -14h
.text:00000CCC var_10          = dword ptr -10h
.text:00000CCC var_C           = dword ptr -0Ch
.text:00000CCC var_8           = dword ptr -8
.text:00000CCC var_4           = dword ptr -4
.text:00000CCC arg_0           = dword ptr  8
.text:00000CCC arg_4           = dword ptr  0Ch
.text:00000CCC arg_8           = dword ptr  10h
.text:00000CCC arg_C           = dword ptr  14h
.text:00000CCC
.text:00000CCC                 push    ebp
.text:00000CCD                 mov     ebp, esp
.text:00000CCF                 sub     esp, 50h
.text:00000CD2                 push    esi
.text:00000CD3                 push    edi
.text:00000CD4                 lea     edi, [ebp+var_50]
.text:00000CD7                 mov     ecx, 14h
.text:00000CDC                 mov     eax, 0CCCCCCCCh
.text:00000CE1                 rep stosd
.text:00000CE3                 mov     eax, dword ptr ds:___security_cookie
.text:00000CE8                 xor     eax, ebp
.text:00000CEA                 mov     [ebp+var_4], eax
.text:00000CED                 mov     eax, [ebp+arg_C]
.text:00000CF0                 mov     dword ptr [eax], 0
.text:00000CF6                 cmp     [ebp+arg_8], 8
.text:00000CFA                 jnb     short loc_D0E
.text:00000CFC                 push    offset $SG67930 ; "ERROR"
.text:00000D01                 mov     ecx, [ebp+arg_0]
.text:00000D04                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000D09                 jmp     loc_FB5
.text:00000D0E ; ---------------------------------------------------------------------------
.text:00000D0E
.text:00000D0E loc_D0E:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+2Ej
.text:00000D0E                 mov     ecx, [ebp+arg_4]
.text:00000D11                 movzx   edx, byte ptr [ecx]
.text:00000D14                 mov     [ebp+var_8], edx
.text:00000D17                 cmp     [ebp+var_8], 1
.text:00000D1B                 jz      short loc_D2F
.text:00000D1D                 push    offset $SG67933 ; "UNSUPPORTED"
.text:00000D22                 mov     ecx, [ebp+arg_0]
.text:00000D25                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000D2A                 jmp     loc_FB5
.text:00000D2F ; ---------------------------------------------------------------------------
.text:00000D2F
.text:00000D2F loc_D2F:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+4Fj
.text:00000D2F                 mov     eax, [ebp+arg_4]
.text:00000D32                 movzx   ecx, byte ptr [eax+1]
.text:00000D36                 mov     [ebp+var_C], ecx
.text:00000D39                 mov     edx, [ebp+var_C]
.text:00000D3C                 lea     eax, ds:8[edx*4]
.text:00000D43                 cmp     eax, [ebp+arg_8]
.text:00000D46                 jbe     short loc_D5A
.text:00000D48                 push    offset $SG67936 ; "ERROR"
.text:00000D4D                 mov     ecx, [ebp+arg_0]
.text:00000D50                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000D55                 jmp     loc_FB5
.text:00000D5A ; ---------------------------------------------------------------------------
.text:00000D5A
.text:00000D5A loc_D5A:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+7Aj
.text:00000D5A                 mov     ecx, [ebp+var_C]
.text:00000D5D                 lea     edx, ds:8[ecx*4]
.text:00000D64                 mov     eax, [ebp+arg_C]
.text:00000D67                 mov     [eax], edx
.text:00000D69                 mov     ecx, [ebp+arg_4]
.text:00000D6C                 mov     edx, [ecx+4]
.text:00000D6F                 bswap   edx
.text:00000D71                 mov     [ebp+var_10], edx
.text:00000D74                 mov     eax, [ebp+arg_4]
.text:00000D77                 movzx   ecx, byte ptr [eax+2]
.text:00000D7B                 test    ecx, ecx
.text:00000D7D                 jnz     loc_EF7
.text:00000D83                 mov     edx, [ebp+arg_4]
.text:00000D86                 movzx   eax, byte ptr [edx+3]
.text:00000D8A                 test    eax, eax
.text:00000D8C                 jnz     loc_EF7
.text:00000D92                 cmp     [ebp+var_10], 5
.text:00000D96                 jnz     loc_EF7
.text:00000D9C                 cmp     [ebp+var_C], 1
.text:00000DA0                 jb      loc_EF7
.text:00000DA6                 mov     ecx, [ebp+arg_4]
.text:00000DA9                 mov     edx, [ecx+8]
.text:00000DAC                 mov     [ebp+var_14], edx
.text:00000DAF                 cmp     [ebp+var_14], 16h
.text:00000DB3                 jnb     short loc_DCD
.text:00000DB5                 mov     eax, [ebp+var_14]
.text:00000DB8                 mov     ecx, _sidNames[eax*4]
.text:00000DBF                 push    ecx
.text:00000DC0                 mov     ecx, [ebp+arg_0]
.text:00000DC3                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000DC8                 jmp     loc_FB5
.text:00000DCD ; ---------------------------------------------------------------------------
.text:00000DCD
.text:00000DCD loc_DCD:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+E7j
.text:00000DCD                 cmp     [ebp+var_14], 20h ; ' '
.text:00000DD1                 jnz     short loc_E23
.text:00000DD3                 cmp     [ebp+var_C], 2
.text:00000DD7                 jnz     short loc_E23
.text:00000DD9                 mov     edx, [ebp+arg_4]
.text:00000DDC                 mov     eax, [edx+0Ch]
.text:00000DDF                 mov     [ebp+var_18], eax
.text:00000DE2                 mov     [ebp+var_1C], 0
.text:00000DE9                 jmp     short loc_DF4
.text:00000DEB ; ---------------------------------------------------------------------------
.text:00000DEB
.text:00000DEB loc_DEB:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &):loc_E21j
.text:00000DEB                 mov     ecx, [ebp+var_1C]
.text:00000DEE                 add     ecx, 1
.text:00000DF1                 mov     [ebp+var_1C], ecx
.text:00000DF4
.text:00000DF4 loc_DF4:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+11Dj
.text:00000DF4                 cmp     [ebp+var_1C], 16h
.text:00000DF8                 jnb     short loc_E23
.text:00000DFA                 mov     edx, [ebp+var_1C]
.text:00000DFD                 mov     eax, _sid_32_Names[edx*8]
.text:00000E04                 cmp     eax, [ebp+var_18]
.text:00000E07                 jnz     short loc_E21
.text:00000E09                 mov     ecx, [ebp+var_1C]
.text:00000E0C                 mov     edx, off_374[ecx*8]
.text:00000E13                 push    edx
.text:00000E14                 mov     ecx, [ebp+arg_0]
.text:00000E17                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000E1C                 jmp     loc_FB5
.text:00000E21 ; ---------------------------------------------------------------------------
.text:00000E21
.text:00000E21 loc_E21:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+13Bj
.text:00000E21                 jmp     short loc_DEB
.text:00000E23 ; ---------------------------------------------------------------------------
.text:00000E23
.text:00000E23 loc_E23:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+105j
.text:00000E23                                         ; ParseSid(AString &,uchar const *,uint,uint &)+10Bj ...
.text:00000E23                 cmp     [ebp+var_14], 15h
.text:00000E27                 jnz     short loc_E79
.text:00000E29                 cmp     [ebp+var_C], 5
.text:00000E2D                 jnz     short loc_E79
.text:00000E2F                 mov     eax, [ebp+arg_4]
.text:00000E32                 mov     ecx, [eax+18h]
.text:00000E35                 mov     [ebp+var_20], ecx
.text:00000E38                 mov     [ebp+var_24], 0
.text:00000E3F                 jmp     short loc_E4A
.text:00000E41 ; ---------------------------------------------------------------------------
.text:00000E41
.text:00000E41 loc_E41:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &):loc_E77j
.text:00000E41                 mov     edx, [ebp+var_24]
.text:00000E44                 add     edx, 1
.text:00000E47                 mov     [ebp+var_24], edx
.text:00000E4A
.text:00000E4A loc_E4A:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+173j
.text:00000E4A                 cmp     [ebp+var_24], 0Fh
.text:00000E4E                 jnb     short loc_E79
.text:00000E50                 mov     eax, [ebp+var_24]
.text:00000E53                 mov     ecx, _sid_21_Names[eax*8]
.text:00000E5A                 cmp     ecx, [ebp+var_20]
.text:00000E5D                 jnz     short loc_E77
.text:00000E5F                 mov     edx, [ebp+var_24]
.text:00000E62                 mov     eax, off_534[edx*8]
.text:00000E69                 push    eax
.text:00000E6A                 mov     ecx, [ebp+arg_0]
.text:00000E6D                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000E72                 jmp     loc_FB5
.text:00000E77 ; ---------------------------------------------------------------------------
.text:00000E77
.text:00000E77 loc_E77:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+191j
.text:00000E77                 jmp     short loc_E41
.text:00000E79 ; ---------------------------------------------------------------------------
.text:00000E79
.text:00000E79 loc_E79:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+15Bj
.text:00000E79                                         ; ParseSid(AString &,uchar const *,uint,uint &)+161j ...
.text:00000E79                 cmp     [ebp+var_14], 50h ; 'P'
.text:00000E7D                 jnz     short loc_EF7
.text:00000E7F                 cmp     [ebp+var_C], 6
.text:00000E83                 jnz     short loc_EF7
.text:00000E85                 mov     [ebp+var_28], 0
.text:00000E8C                 jmp     short loc_E97
.text:00000E8E ; ---------------------------------------------------------------------------
.text:00000E8E
.text:00000E8E loc_E8E:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &):loc_EF5j
.text:00000E8E                 mov     ecx, [ebp+var_28]
.text:00000E91                 add     ecx, 1
.text:00000E94                 mov     [ebp+var_28], ecx
.text:00000E97
.text:00000E97 loc_E97:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+1C0j
.text:00000E97                 cmp     [ebp+var_28], 1
.text:00000E9B                 jnb     short loc_EF7
.text:00000E9D                 mov     edx, [ebp+var_28]
.text:00000EA0                 imul    edx, 18h
.text:00000EA3                 add     edx, offset _services_to_name
.text:00000EA9                 mov     [ebp+var_2C], edx
.text:00000EAC                 mov     [ebp+var_30], 0
.text:00000EB3                 jmp     short loc_EBE
.text:00000EB5 ; ---------------------------------------------------------------------------
.text:00000EB5
.text:00000EB5 loc_EB5:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+20Dj
.text:00000EB5                 mov     eax, [ebp+var_30]
.text:00000EB8                 add     eax, 1
.text:00000EBB                 mov     [ebp+var_30], eax
.text:00000EBE
.text:00000EBE loc_EBE:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+1E7j
.text:00000EBE                 cmp     [ebp+var_30], 5
.text:00000EC2                 jge     short loc_EDB
.text:00000EC4                 mov     ecx, [ebp+var_30]
.text:00000EC7                 mov     edx, [ebp+var_2C]
.text:00000ECA                 mov     eax, [ebp+var_30]
.text:00000ECD                 mov     esi, [ebp+arg_4]
.text:00000ED0                 mov     ecx, [edx+ecx*4]
.text:00000ED3                 cmp     ecx, [esi+eax*4+0Ch]
.text:00000ED7                 jnz     short loc_EDB
.text:00000ED9                 jmp     short loc_EB5
.text:00000EDB ; ---------------------------------------------------------------------------
.text:00000EDB
.text:00000EDB loc_EDB:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+1F6j
.text:00000EDB                                         ; ParseSid(AString &,uchar const *,uint,uint &)+20Bj
.text:00000EDB                 cmp     [ebp+var_30], 5
.text:00000EDF                 jnz     short loc_EF5
.text:00000EE1                 mov     edx, [ebp+var_2C]
.text:00000EE4                 mov     eax, [edx+14h]
.text:00000EE7                 push    eax
.text:00000EE8                 mov     ecx, [ebp+arg_0]
.text:00000EEB                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000EF0                 jmp     loc_FB5
.text:00000EF5 ; ---------------------------------------------------------------------------
.text:00000EF5
.text:00000EF5 loc_EF5:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+213j
.text:00000EF5                 jmp     short loc_E8E
.text:00000EF7 ; ---------------------------------------------------------------------------
.text:00000EF7
.text:00000EF7 loc_EF7:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+B1j
.text:00000EF7                                         ; ParseSid(AString &,uchar const *,uint,uint &)+C0j ...
.text:00000EF7                 push    offset $SG67977 ; "S-1-"
.text:00000EFC                 mov     ecx, [ebp+arg_0]
.text:00000EFF                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000F04                 mov     ecx, [ebp+arg_4]
.text:00000F07                 movzx   edx, byte ptr [ecx+2]
.text:00000F0B                 test    edx, edx
.text:00000F0D                 jnz     short loc_F35
.text:00000F0F                 mov     eax, [ebp+arg_4]
.text:00000F12                 movzx   ecx, byte ptr [eax+3]
.text:00000F16                 test    ecx, ecx
.text:00000F18                 jnz     short loc_F35
.text:00000F1A                 lea     edx, [ebp+var_44]
.text:00000F1D                 push    edx             ; char *
.text:00000F1E                 mov     eax, [ebp+var_10]
.text:00000F21                 push    eax             ; unsigned int
.text:00000F22                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00000F27                 lea     ecx, [ebp+var_44]
.text:00000F2A                 push    ecx
.text:00000F2B                 mov     ecx, [ebp+arg_0]
.text:00000F2E                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000F33                 jmp     short loc_F6F
.text:00000F35 ; ---------------------------------------------------------------------------
.text:00000F35
.text:00000F35 loc_F35:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+241j
.text:00000F35                                         ; ParseSid(AString &,uchar const *,uint,uint &)+24Cj
.text:00000F35                 push    offset $SG67980 ; "0x"
.text:00000F3A                 mov     ecx, [ebp+arg_0]
.text:00000F3D                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000F42                 mov     [ebp+var_4C], 2
.text:00000F49                 jmp     short loc_F54
.text:00000F4B ; ---------------------------------------------------------------------------
.text:00000F4B
.text:00000F4B loc_F4B:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+2A1j
.text:00000F4B                 mov     edx, [ebp+var_4C]
.text:00000F4E                 add     edx, 1
.text:00000F51                 mov     [ebp+var_4C], edx
.text:00000F54
.text:00000F54 loc_F54:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+27Dj
.text:00000F54                 cmp     [ebp+var_4C], 8
.text:00000F58                 jge     short loc_F6F
.text:00000F5A                 mov     eax, [ebp+arg_4]
.text:00000F5D                 add     eax, [ebp+var_4C]
.text:00000F60                 movzx   ecx, byte ptr [eax]
.text:00000F63                 push    ecx
.text:00000F64                 mov     edx, [ebp+arg_0]
.text:00000F67                 push    edx
.text:00000F68                 call    ?AddHexToString@@YGXAAVAString@@I@Z ; AddHexToString(AString &,uint)
.text:00000F6D                 jmp     short loc_F4B
.text:00000F6F ; ---------------------------------------------------------------------------
.text:00000F6F
.text:00000F6F loc_F6F:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+267j
.text:00000F6F                                         ; ParseSid(AString &,uchar const *,uint,uint &)+28Cj
.text:00000F6F                 mov     [ebp+var_50], 0
.text:00000F76                 jmp     short loc_F81
.text:00000F78 ; ---------------------------------------------------------------------------
.text:00000F78
.text:00000F78 loc_F78:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+2E7j
.text:00000F78                 mov     eax, [ebp+var_50]
.text:00000F7B                 add     eax, 1
.text:00000F7E                 mov     [ebp+var_50], eax
.text:00000F81
.text:00000F81 loc_F81:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+2AAj
.text:00000F81                 mov     ecx, [ebp+var_50]
.text:00000F84                 cmp     ecx, [ebp+var_C]
.text:00000F87                 jnb     short loc_FB5
.text:00000F89                 push    2Dh ; '-'
.text:00000F8B                 mov     ecx, [ebp+arg_0]
.text:00000F8E                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00000F93                 lea     edx, [ebp+var_44]
.text:00000F96                 push    edx             ; char *
.text:00000F97                 mov     eax, [ebp+var_50]
.text:00000F9A                 mov     ecx, [ebp+arg_4]
.text:00000F9D                 mov     edx, [ecx+eax*4+8]
.text:00000FA1                 push    edx             ; unsigned int
.text:00000FA2                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00000FA7                 lea     eax, [ebp+var_44]
.text:00000FAA                 push    eax
.text:00000FAB                 mov     ecx, [ebp+arg_0]
.text:00000FAE                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000FB3                 jmp     short loc_F78
.text:00000FB5 ; ---------------------------------------------------------------------------
.text:00000FB5
.text:00000FB5 loc_FB5:                                ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+3Dj
.text:00000FB5                                         ; ParseSid(AString &,uchar const *,uint,uint &)+5Ej ...
.text:00000FB5                 push    edx
.text:00000FB6                 mov     ecx, ebp
.text:00000FB8                 push    eax
.text:00000FB9                 lea     edx, $LN36
.text:00000FBF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000FC4                 pop     eax
.text:00000FC5                 pop     edx
.text:00000FC6                 pop     edi
.text:00000FC7                 pop     esi
.text:00000FC8                 mov     ecx, [ebp+var_4]
.text:00000FCB                 xor     ecx, ebp
.text:00000FCD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000FD2                 add     esp, 50h
.text:00000FD5                 cmp     ebp, esp
.text:00000FD7                 call    __RTC_CheckEsp
.text:00000FDC                 mov     esp, ebp
.text:00000FDE                 pop     ebp
.text:00000FDF                 retn    10h
.text:00000FDF ?ParseSid@@YGXAAVAString@@PBEIAAI@Z endp
.text:00000FDF
.text:00000FDF ; ---------------------------------------------------------------------------
.text:00000FE2                 align 4
.text:00000FE4 $LN36           dd 1                    ; DATA XREF: ParseSid(AString &,uchar const *,uint,uint &)+2EDo
.text:00000FE8                 dd offset $LN35
.text:00000FEC $LN35           dd 0FFFFFFBCh, 10h      ; DATA XREF: .text:00000FE8o
.text:00000FF4                 dd offset $LN34
.text:00000FF8 ; ---------------------------------------------------------------------------
.text:00000FF8
.text:00000FF8 $LN34:                                  ; DATA XREF: .text:00000FF4o
.text:00000FF8                 jnb     short loc_1074
.text:00000FFA                 add     ah, cl
.text:00000FFC
.text:00000FFC ; =============== S U B R O U T I N E =======================================
.text:00000FFC
.text:00000FFC ; Attributes: bp-based frame
.text:00000FFC
.text:00000FFC ; void __stdcall AddHexToString(class AString &, unsigned int)
.text:00000FFC ?AddHexToString@@YGXAAVAString@@I@Z proc near
.text:00000FFC                                         ; CODE XREF: ParseSid(AString &,uchar const *,uint,uint &)+29Cp
.text:00000FFC
.text:00000FFC arg_0           = dword ptr  8
.text:00000FFC arg_4           = dword ptr  0Ch
.text:00000FFC
.text:00000FFC                 push    ebp
.text:00000FFD                 mov     ebp, esp
.text:00000FFF                 mov     eax, [ebp+arg_4]
.text:00001002                 shr     eax, 4
.text:00001005                 push    eax
.text:00001006                 call    ?GetHex@@YGII@Z ; GetHex(uint)
.text:0000100B                 push    eax
.text:0000100C                 mov     ecx, [ebp+arg_0]
.text:0000100F                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00001014                 mov     ecx, [ebp+arg_4]
.text:00001017                 and     ecx, 0Fh
.text:0000101A                 push    ecx
.text:0000101B                 call    ?GetHex@@YGII@Z ; GetHex(uint)
.text:00001020                 push    eax
.text:00001021                 mov     ecx, [ebp+arg_0]
.text:00001024                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00001029                 push    20h ; ' '
.text:0000102B                 mov     ecx, [ebp+arg_0]
.text:0000102E                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00001033                 cmp     ebp, esp
.text:00001035                 call    __RTC_CheckEsp
.text:0000103A                 pop     ebp
.text:0000103B                 retn    8
.text:0000103B ?AddHexToString@@YGXAAVAString@@I@Z endp
.text:0000103B
.text:0000103B ; ---------------------------------------------------------------------------
.text:0000103E                 db 0Eh dup(0CCh)
.text:0000104C
.text:0000104C ; =============== S U B R O U T I N E =======================================
.text:0000104C
.text:0000104C ; Attributes: bp-based frame
.text:0000104C
.text:0000104C ; unsigned int __stdcall GetHex(unsigned int)
.text:0000104C ?GetHex@@YGII@Z proc near               ; CODE XREF: AddHexToString(AString &,uint)+Ap
.text:0000104C                                         ; AddHexToString(AString &,uint)+1Fp ...
.text:0000104C
.text:0000104C var_4           = dword ptr -4
.text:0000104C arg_0           = dword ptr  8
.text:0000104C
.text:0000104C                 push    ebp
.text:0000104D                 mov     ebp, esp
.text:0000104F                 push    ecx
.text:00001050                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001057                 cmp     [ebp+arg_0], 0Ah
.text:0000105B                 jnb     short loc_1068
.text:0000105D                 mov     eax, [ebp+arg_0]
.text:00001060                 add     eax, 30h ; '0'
.text:00001063                 mov     [ebp+var_4], eax
.text:00001066                 jmp     short loc_1071
.text:00001068 ; ---------------------------------------------------------------------------
.text:00001068
.text:00001068 loc_1068:                               ; CODE XREF: GetHex(uint)+Fj
.text:00001068                 mov     ecx, [ebp+arg_0]
.text:0000106B                 add     ecx, 37h ; '7'
.text:0000106E                 mov     [ebp+var_4], ecx
.text:00001071
.text:00001071 loc_1071:                               ; CODE XREF: GetHex(uint)+1Aj
.text:00001071                 mov     eax, [ebp+var_4]
.text:00001074
.text:00001074 loc_1074:                               ; CODE XREF: .text:$LN34j
.text:00001074                 mov     esp, ebp
.text:00001076                 pop     ebp
.text:00001077                 retn    4
.text:00001077 ?GetHex@@YGII@Z endp
.text:00001077
.text:00001077 ; ---------------------------------------------------------------------------
.text:0000107A                 align 4
.text:0000107C
.text:0000107C ; =============== S U B R O U T I N E =======================================
.text:0000107C
.text:0000107C ; Attributes: bp-based frame
.text:0000107C
.text:0000107C ; void __stdcall AddUInt32ToString(class AString &, unsigned int)
.text:0000107C ?AddUInt32ToString@@YGXAAVAString@@I@Z proc near
.text:0000107C                                         ; CODE XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+C9p
.text:0000107C                                         ; ParseAcl(AString &,uchar const *,uint,char const *,uint,uint)+92p
.text:0000107C
.text:0000107C var_1C          = dword ptr -1Ch
.text:0000107C var_18          = byte ptr -18h
.text:0000107C var_14          = dword ptr -14h
.text:0000107C var_10          = dword ptr -10h
.text:0000107C var_C           = dword ptr -0Ch
.text:0000107C var_8           = dword ptr -8
.text:0000107C var_4           = dword ptr -4
.text:0000107C arg_0           = dword ptr  8
.text:0000107C arg_4           = dword ptr  0Ch
.text:0000107C
.text:0000107C                 push    ebp
.text:0000107D                 mov     ebp, esp
.text:0000107F                 sub     esp, 1Ch
.text:00001082                 mov     eax, 0CCCCCCCCh
.text:00001087                 mov     [ebp+var_1C], eax
.text:0000108A                 mov     dword ptr [ebp+var_18], eax
.text:0000108D                 mov     [ebp+var_14], eax
.text:00001090                 mov     [ebp+var_10], eax
.text:00001093                 mov     [ebp+var_C], eax
.text:00001096                 mov     [ebp+var_8], eax
.text:00001099                 mov     [ebp+var_4], eax
.text:0000109C                 mov     eax, dword ptr ds:___security_cookie
.text:000010A1                 xor     eax, ebp
.text:000010A3                 mov     [ebp+var_4], eax
.text:000010A6                 lea     eax, [ebp+var_18]
.text:000010A9                 push    eax             ; char *
.text:000010AA                 mov     ecx, [ebp+arg_4]
.text:000010AD                 push    ecx             ; unsigned int
.text:000010AE                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:000010B3                 lea     edx, [ebp+var_18]
.text:000010B6                 push    edx
.text:000010B7                 mov     ecx, [ebp+arg_0]
.text:000010BA                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:000010BF                 push    edx
.text:000010C0                 mov     ecx, ebp
.text:000010C2                 push    eax
.text:000010C3                 lea     edx, $LN5_2
.text:000010C9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000010CE                 pop     eax
.text:000010CF                 pop     edx
.text:000010D0                 mov     ecx, [ebp+var_4]
.text:000010D3                 xor     ecx, ebp
.text:000010D5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000010DA                 add     esp, 1Ch
.text:000010DD                 cmp     ebp, esp
.text:000010DF                 call    __RTC_CheckEsp
.text:000010E4                 mov     esp, ebp
.text:000010E6                 pop     ebp
.text:000010E7                 retn    8
.text:000010E7 ?AddUInt32ToString@@YGXAAVAString@@I@Z endp
.text:000010E7
.text:000010E7 ; ---------------------------------------------------------------------------
.text:000010EA                 align 4
.text:000010EC $LN5_2          dd 1                    ; DATA XREF: AddUInt32ToString(AString &,uint)+47o
.text:000010F0                 dd offset $LN4_3
.text:000010F4 $LN4_3          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:000010F0o
.text:000010FC                 dd offset $LN3_0
.text:00001100 $LN3_0          dd 0CC007A73h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000010FCo
.text:0000110C
.text:0000110C ; =============== S U B R O U T I N E =======================================
.text:0000110C
.text:0000110C ; Attributes: bp-based frame
.text:0000110C
.text:0000110C ; void __stdcall ParseAcl(class AString &, unsigned char const *, unsigned int, char const *, unsigned int, unsigned int)
.text:0000110C ?ParseAcl@@YGXAAVAString@@PBEIPBDII@Z proc near
.text:0000110C                                         ; CODE XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+98p
.text:0000110C                                         ; ConvertNtSecureToString(uchar const *,uint,AString &)+B2p
.text:0000110C
.text:0000110C var_C           = dword ptr -0Ch
.text:0000110C var_8           = dword ptr -8
.text:0000110C var_4           = dword ptr -4
.text:0000110C arg_0           = dword ptr  8
.text:0000110C arg_4           = dword ptr  0Ch
.text:0000110C arg_8           = dword ptr  10h
.text:0000110C arg_C           = dword ptr  14h
.text:0000110C arg_10          = dword ptr  18h
.text:0000110C arg_14          = dword ptr  1Ch
.text:0000110C
.text:0000110C                 push    ebp
.text:0000110D                 mov     ebp, esp
.text:0000110F                 sub     esp, 0Ch
.text:00001112                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001119                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001120                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001127                 mov     eax, [ebp+arg_4]
.text:0000112A                 movzx   ecx, word ptr [eax+2]
.text:0000112E                 mov     [ebp+var_4], ecx
.text:00001131                 mov     edx, [ebp+arg_10]
.text:00001134                 and     edx, [ebp+var_4]
.text:00001137                 jnz     short loc_113B
.text:00001139                 jmp     short loc_11A3
.text:0000113B ; ---------------------------------------------------------------------------
.text:0000113B
.text:0000113B loc_113B:                               ; CODE XREF: ParseAcl(AString &,uchar const *,uint,char const *,uint,uint)+2Bj
.text:0000113B                 mov     eax, [ebp+arg_4]
.text:0000113E                 add     eax, [ebp+arg_14]
.text:00001141                 mov     ecx, [eax]
.text:00001143                 mov     [ebp+var_8], ecx
.text:00001146                 push    20h ; ' '
.text:00001148                 mov     ecx, [ebp+arg_0]
.text:0000114B                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00001150                 mov     edx, [ebp+arg_C]
.text:00001153                 push    edx
.text:00001154                 mov     ecx, [ebp+arg_0]
.text:00001157                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:0000115C                 mov     eax, [ebp+var_8]
.text:0000115F                 cmp     eax, [ebp+arg_8]
.text:00001162                 jb      short loc_1166
.text:00001164                 jmp     short loc_11A3
.text:00001166 ; ---------------------------------------------------------------------------
.text:00001166
.text:00001166 loc_1166:                               ; CODE XREF: ParseAcl(AString &,uchar const *,uint,char const *,uint,uint)+56j
.text:00001166                 mov     ecx, [ebp+arg_4]
.text:00001169                 add     ecx, [ebp+var_8]
.text:0000116C                 mov     [ebp+arg_4], ecx
.text:0000116F                 mov     edx, [ebp+arg_8]
.text:00001172                 sub     edx, [ebp+var_8]
.text:00001175                 mov     [ebp+arg_8], edx
.text:00001178                 cmp     [ebp+arg_8], 8
.text:0000117C                 jnb     short loc_1180
.text:0000117E                 jmp     short loc_11A3
.text:00001180 ; ---------------------------------------------------------------------------
.text:00001180
.text:00001180 loc_1180:                               ; CODE XREF: ParseAcl(AString &,uchar const *,uint,char const *,uint,uint)+70j
.text:00001180                 mov     eax, [ebp+arg_4]
.text:00001183                 movzx   ecx, word ptr [eax]
.text:00001186                 cmp     ecx, 2
.text:00001189                 jz      short loc_118D
.text:0000118B                 jmp     short loc_11A3
.text:0000118D ; ---------------------------------------------------------------------------
.text:0000118D
.text:0000118D loc_118D:                               ; CODE XREF: ParseAcl(AString &,uchar const *,uint,char const *,uint,uint)+7Dj
.text:0000118D                 mov     edx, [ebp+arg_4]
.text:00001190                 mov     eax, [edx+4]
.text:00001193                 mov     [ebp+var_C], eax
.text:00001196                 mov     ecx, [ebp+var_C]
.text:00001199                 push    ecx
.text:0000119A                 mov     edx, [ebp+arg_0]
.text:0000119D                 push    edx
.text:0000119E                 call    ?AddUInt32ToString@@YGXAAVAString@@I@Z ; AddUInt32ToString(AString &,uint)
.text:000011A3
.text:000011A3 loc_11A3:                               ; CODE XREF: ParseAcl(AString &,uchar const *,uint,char const *,uint,uint)+2Dj
.text:000011A3                                         ; ParseAcl(AString &,uchar const *,uint,char const *,uint,uint)+58j ...
.text:000011A3                 add     esp, 0Ch
.text:000011A6                 cmp     ebp, esp
.text:000011A8                 call    __RTC_CheckEsp
.text:000011AD                 mov     esp, ebp
.text:000011AF                 pop     ebp
.text:000011B0                 retn    18h
.text:000011B0 ?ParseAcl@@YGXAAVAString@@PBEIPBDII@Z endp
.text:000011B0
.text:000011B0 ; ---------------------------------------------------------------------------
.text:000011B3                 db 9 dup(0CCh)
.text:000011BC
.text:000011BC ; =============== S U B R O U T I N E =======================================
.text:000011BC
.text:000011BC ; Attributes: bp-based frame
.text:000011BC
.text:000011BC ; bool __stdcall CheckNtSecure(const unsigned __int8 *, unsigned int)
.text:000011BC                 public ?CheckNtSecure@@YG_NPBEI@Z
.text:000011BC ?CheckNtSecure@@YG_NPBEI@Z proc near
.text:000011BC
.text:000011BC arg_0           = dword ptr  8
.text:000011BC arg_4           = dword ptr  0Ch
.text:000011BC
.text:000011BC                 push    ebp
.text:000011BD                 mov     ebp, esp
.text:000011BF                 cmp     [ebp+arg_4], 14h
.text:000011C3                 jnb     short loc_11CC
.text:000011C5                 xor     al, al
.text:000011C7                 jmp     loc_1263
.text:000011CC ; ---------------------------------------------------------------------------
.text:000011CC
.text:000011CC loc_11CC:                               ; CODE XREF: CheckNtSecure(uchar const *,uint)+7j
.text:000011CC                 mov     eax, [ebp+arg_0]
.text:000011CF                 movzx   ecx, word ptr [eax]
.text:000011D2                 cmp     ecx, 1
.text:000011D5                 jz      short loc_11DE
.text:000011D7                 mov     al, 1
.text:000011D9                 jmp     loc_1263
.text:000011DE ; ---------------------------------------------------------------------------
.text:000011DE
.text:000011DE loc_11DE:                               ; CODE XREF: CheckNtSecure(uchar const *,uint)+19j
.text:000011DE                 cmp     [ebp+arg_4], 40000h
.text:000011E5                 jbe     short loc_11EB
.text:000011E7                 xor     al, al
.text:000011E9                 jmp     short loc_1263
.text:000011EB ; ---------------------------------------------------------------------------
.text:000011EB
.text:000011EB loc_11EB:                               ; CODE XREF: CheckNtSecure(uchar const *,uint)+29j
.text:000011EB                 mov     edx, [ebp+arg_0]
.text:000011EE                 mov     eax, [edx+4]
.text:000011F1                 push    eax
.text:000011F2                 mov     ecx, [ebp+arg_4]
.text:000011F5                 push    ecx
.text:000011F6                 mov     edx, [ebp+arg_0]
.text:000011F9                 push    edx
.text:000011FA                 call    ?CheckSid@@YG_NPBEII@Z ; CheckSid(uchar const *,uint,uint)
.text:000011FF                 movzx   eax, al
.text:00001202                 test    eax, eax
.text:00001204                 jnz     short loc_120A
.text:00001206                 xor     al, al
.text:00001208                 jmp     short loc_1263
.text:0000120A ; ---------------------------------------------------------------------------
.text:0000120A
.text:0000120A loc_120A:                               ; CODE XREF: CheckNtSecure(uchar const *,uint)+48j
.text:0000120A                 mov     ecx, [ebp+arg_0]
.text:0000120D                 mov     edx, [ecx+8]
.text:00001210                 push    edx
.text:00001211                 mov     eax, [ebp+arg_4]
.text:00001214                 push    eax
.text:00001215                 mov     ecx, [ebp+arg_0]
.text:00001218                 push    ecx
.text:00001219                 call    ?CheckSid@@YG_NPBEII@Z ; CheckSid(uchar const *,uint,uint)
.text:0000121E                 movzx   edx, al
.text:00001221                 test    edx, edx
.text:00001223                 jnz     short loc_1229
.text:00001225                 xor     al, al
.text:00001227                 jmp     short loc_1263
.text:00001229 ; ---------------------------------------------------------------------------
.text:00001229
.text:00001229 loc_1229:                               ; CODE XREF: CheckNtSecure(uchar const *,uint)+67j
.text:00001229                 push    0Ch
.text:0000122B                 push    10h
.text:0000122D                 mov     eax, [ebp+arg_4]
.text:00001230                 push    eax
.text:00001231                 mov     ecx, [ebp+arg_0]
.text:00001234                 push    ecx
.text:00001235                 call    ?CheckAcl@@YG_NPBEIII@Z ; CheckAcl(uchar const *,uint,uint,uint)
.text:0000123A                 movzx   edx, al
.text:0000123D                 test    edx, edx
.text:0000123F                 jnz     short loc_1245
.text:00001241                 xor     al, al
.text:00001243                 jmp     short loc_1263
.text:00001245 ; ---------------------------------------------------------------------------
.text:00001245
.text:00001245 loc_1245:                               ; CODE XREF: CheckNtSecure(uchar const *,uint)+83j
.text:00001245                 push    10h
.text:00001247                 push    4
.text:00001249                 mov     eax, [ebp+arg_4]
.text:0000124C                 push    eax
.text:0000124D                 mov     ecx, [ebp+arg_0]
.text:00001250                 push    ecx
.text:00001251                 call    ?CheckAcl@@YG_NPBEIII@Z ; CheckAcl(uchar const *,uint,uint,uint)
.text:00001256                 movzx   edx, al
.text:00001259                 test    edx, edx
.text:0000125B                 jnz     short loc_1261
.text:0000125D                 xor     al, al
.text:0000125F                 jmp     short loc_1263
.text:00001261 ; ---------------------------------------------------------------------------
.text:00001261
.text:00001261 loc_1261:                               ; CODE XREF: CheckNtSecure(uchar const *,uint)+9Fj
.text:00001261                 mov     al, 1
.text:00001263
.text:00001263 loc_1263:                               ; CODE XREF: CheckNtSecure(uchar const *,uint)+Bj
.text:00001263                                         ; CheckNtSecure(uchar const *,uint)+1Dj ...
.text:00001263                 cmp     ebp, esp
.text:00001265                 call    __RTC_CheckEsp
.text:0000126A                 pop     ebp
.text:0000126B                 retn    8
.text:0000126B ?CheckNtSecure@@YG_NPBEI@Z endp
.text:0000126B
.text:0000126B ; ---------------------------------------------------------------------------
.text:0000126E                 db 0Eh dup(0CCh)
.text:0000127C
.text:0000127C ; =============== S U B R O U T I N E =======================================
.text:0000127C
.text:0000127C ; Attributes: bp-based frame
.text:0000127C
.text:0000127C ; bool __stdcall CheckSid(unsigned char const *, unsigned int, unsigned int)
.text:0000127C ?CheckSid@@YG_NPBEII@Z proc near        ; CODE XREF: CheckNtSecure(uchar const *,uint)+3Ep
.text:0000127C                                         ; CheckNtSecure(uchar const *,uint)+5Dp
.text:0000127C
.text:0000127C var_8           = dword ptr -8
.text:0000127C var_4           = dword ptr -4
.text:0000127C arg_0           = dword ptr  8
.text:0000127C arg_4           = dword ptr  0Ch
.text:0000127C arg_8           = dword ptr  10h
.text:0000127C
.text:0000127C                 push    ebp
.text:0000127D                 mov     ebp, esp
.text:0000127F                 sub     esp, 8
.text:00001282                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001289                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001290                 mov     eax, [ebp+arg_8]
.text:00001293                 cmp     eax, [ebp+arg_4]
.text:00001296                 jb      short loc_129C
.text:00001298                 xor     al, al
.text:0000129A                 jmp     short loc_12E4
.text:0000129C ; ---------------------------------------------------------------------------
.text:0000129C
.text:0000129C loc_129C:                               ; CODE XREF: CheckSid(uchar const *,uint,uint)+1Aj
.text:0000129C                 mov     ecx, [ebp+arg_4]
.text:0000129F                 sub     ecx, [ebp+arg_8]
.text:000012A2                 mov     [ebp+arg_4], ecx
.text:000012A5                 cmp     [ebp+arg_4], 8
.text:000012A9                 jnb     short loc_12AF
.text:000012AB                 xor     al, al
.text:000012AD                 jmp     short loc_12E4
.text:000012AF ; ---------------------------------------------------------------------------
.text:000012AF
.text:000012AF loc_12AF:                               ; CODE XREF: CheckSid(uchar const *,uint,uint)+2Dj
.text:000012AF                 mov     edx, [ebp+arg_0]
.text:000012B2                 add     edx, [ebp+arg_8]
.text:000012B5                 movzx   eax, byte ptr [edx]
.text:000012B8                 mov     [ebp+var_4], eax
.text:000012BB                 cmp     [ebp+var_4], 1
.text:000012BF                 jz      short loc_12C5
.text:000012C1                 xor     al, al
.text:000012C3                 jmp     short loc_12E4
.text:000012C5 ; ---------------------------------------------------------------------------
.text:000012C5
.text:000012C5 loc_12C5:                               ; CODE XREF: CheckSid(uchar const *,uint,uint)+43j
.text:000012C5                 mov     ecx, [ebp+arg_0]
.text:000012C8                 add     ecx, [ebp+arg_8]
.text:000012CB                 movzx   edx, byte ptr [ecx+1]
.text:000012CF                 mov     [ebp+var_8], edx
.text:000012D2                 mov     eax, [ebp+var_8]
.text:000012D5                 lea     ecx, ds:8[eax*4]
.text:000012DC                 cmp     [ebp+arg_4], ecx
.text:000012DF                 sbb     eax, eax
.text:000012E1                 add     eax, 1
.text:000012E4
.text:000012E4 loc_12E4:                               ; CODE XREF: CheckSid(uchar const *,uint,uint)+1Ej
.text:000012E4                                         ; CheckSid(uchar const *,uint,uint)+31j ...
.text:000012E4                 mov     esp, ebp
.text:000012E6                 pop     ebp
.text:000012E7                 retn    0Ch
.text:000012E7 ?CheckSid@@YG_NPBEII@Z endp
.text:000012E7
.text:000012E7 ; ---------------------------------------------------------------------------
.text:000012EA                 align 4
.text:000012EC
.text:000012EC ; =============== S U B R O U T I N E =======================================
.text:000012EC
.text:000012EC ; Attributes: bp-based frame
.text:000012EC
.text:000012EC ; bool __stdcall CheckAcl(unsigned char const *, unsigned int, unsigned int, unsigned int)
.text:000012EC ?CheckAcl@@YG_NPBEIII@Z proc near       ; CODE XREF: CheckNtSecure(uchar const *,uint)+79p
.text:000012EC                                         ; CheckNtSecure(uchar const *,uint)+95p
.text:000012EC
.text:000012EC var_C           = dword ptr -0Ch
.text:000012EC var_8           = dword ptr -8
.text:000012EC var_4           = dword ptr -4
.text:000012EC arg_0           = dword ptr  8
.text:000012EC arg_4           = dword ptr  0Ch
.text:000012EC arg_8           = dword ptr  10h
.text:000012EC arg_C           = dword ptr  14h
.text:000012EC
.text:000012EC                 push    ebp
.text:000012ED                 mov     ebp, esp
.text:000012EF                 sub     esp, 0Ch
.text:000012F2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000012F9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001300                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001307                 mov     eax, [ebp+arg_0]
.text:0000130A                 movzx   ecx, word ptr [eax+2]
.text:0000130E                 mov     [ebp+var_4], ecx
.text:00001311                 mov     edx, [ebp+arg_8]
.text:00001314                 and     edx, [ebp+var_4]
.text:00001317                 jnz     short loc_131D
.text:00001319                 mov     al, 1
.text:0000131B                 jmp     short loc_1365
.text:0000131D ; ---------------------------------------------------------------------------
.text:0000131D
.text:0000131D loc_131D:                               ; CODE XREF: CheckAcl(uchar const *,uint,uint,uint)+2Bj
.text:0000131D                 mov     eax, [ebp+arg_0]
.text:00001320                 add     eax, [ebp+arg_C]
.text:00001323                 mov     ecx, [eax]
.text:00001325                 mov     [ebp+var_8], ecx
.text:00001328                 mov     edx, [ebp+var_8]
.text:0000132B                 cmp     edx, [ebp+arg_4]
.text:0000132E                 jb      short loc_1334
.text:00001330                 xor     al, al
.text:00001332                 jmp     short loc_1365
.text:00001334 ; ---------------------------------------------------------------------------
.text:00001334
.text:00001334 loc_1334:                               ; CODE XREF: CheckAcl(uchar const *,uint,uint,uint)+42j
.text:00001334                 mov     eax, [ebp+arg_0]
.text:00001337                 add     eax, [ebp+var_8]
.text:0000133A                 mov     [ebp+arg_0], eax
.text:0000133D                 mov     ecx, [ebp+arg_4]
.text:00001340                 sub     ecx, [ebp+var_8]
.text:00001343                 mov     [ebp+arg_4], ecx
.text:00001346                 cmp     [ebp+arg_4], 8
.text:0000134A                 jnb     short loc_1350
.text:0000134C                 xor     al, al
.text:0000134E                 jmp     short loc_1365
.text:00001350 ; ---------------------------------------------------------------------------
.text:00001350
.text:00001350 loc_1350:                               ; CODE XREF: CheckAcl(uchar const *,uint,uint,uint)+5Ej
.text:00001350                 mov     edx, [ebp+arg_0]
.text:00001353                 movzx   eax, word ptr [edx+2]
.text:00001357                 mov     [ebp+var_C], eax
.text:0000135A                 mov     ecx, [ebp+var_C]
.text:0000135D                 cmp     [ebp+arg_4], ecx
.text:00001360                 sbb     eax, eax
.text:00001362                 add     eax, 1
.text:00001365
.text:00001365 loc_1365:                               ; CODE XREF: CheckAcl(uchar const *,uint,uint,uint)+2Fj
.text:00001365                                         ; CheckAcl(uchar const *,uint,uint,uint)+46j ...
.text:00001365                 mov     esp, ebp
.text:00001367                 pop     ebp
.text:00001368                 retn    10h
.text:00001368 ?CheckAcl@@YG_NPBEIII@Z endp
.text:00001368
.text:00001368 ; ---------------------------------------------------------------------------
.text:0000136B                 align 4
.text:0000136C
.text:0000136C ; =============== S U B R O U T I N E =======================================
.text:0000136C
.text:0000136C ; Attributes: bp-based frame
.text:0000136C
.text:0000136C ; bool __stdcall ConvertNtReparseToString(const unsigned __int8 *, unsigned int, struct UString *)
.text:0000136C                 public ?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z
.text:0000136C ?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z proc near
.text:0000136C
.text:0000136C var_7C          = dword ptr -7Ch
.text:0000136C var_78          = dword ptr -78h
.text:0000136C var_71          = byte ptr -71h
.text:0000136C var_70          = byte ptr -70h
.text:0000136C var_6F          = byte ptr -6Fh
.text:0000136C var_6E          = byte ptr -6Eh
.text:0000136C var_6D          = byte ptr -6Dh
.text:0000136C var_6C          = byte ptr -6Ch
.text:0000136C var_60          = dword ptr -60h
.text:0000136C var_5C          = dword ptr -5Ch
.text:0000136C var_54          = byte ptr -54h
.text:0000136C var_40          = dword ptr -40h
.text:0000136C var_3C          = dword ptr -3Ch
.text:0000136C var_34          = byte ptr -34h
.text:0000136C var_20          = byte ptr -20h
.text:0000136C var_10          = dword ptr -10h
.text:0000136C var_C           = dword ptr -0Ch
.text:0000136C var_4           = dword ptr -4
.text:0000136C arg_0           = dword ptr  8
.text:0000136C arg_4           = dword ptr  0Ch
.text:0000136C arg_8           = dword ptr  10h
.text:0000136C
.text:0000136C                 push    ebp
.text:0000136D                 mov     ebp, esp
.text:0000136F                 push    0FFFFFFFFh
.text:00001371                 push    offset __ehhandler$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z
.text:00001376                 mov     eax, large fs:0
.text:0000137C                 push    eax
.text:0000137D                 sub     esp, 70h
.text:00001380                 push    edi
.text:00001381                 lea     edi, [ebp+var_7C]
.text:00001384                 mov     ecx, 1Ch
.text:00001389                 mov     eax, 0CCCCCCCCh
.text:0000138E                 rep stosd
.text:00001390                 mov     eax, dword ptr ds:___security_cookie
.text:00001395                 xor     eax, ebp
.text:00001397                 mov     [ebp+var_10], eax
.text:0000139A                 push    eax
.text:0000139B                 lea     eax, [ebp+var_C]
.text:0000139E                 mov     large fs:0, eax
.text:000013A4                 mov     ecx, [ebp+arg_8] ; this
.text:000013A7                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:000013AC                 lea     ecx, [ebp+var_34] ; this
.text:000013AF                 call    ??0CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::CReparseAttr(void)
.text:000013B4                 mov     [ebp+var_4], 0
.text:000013BB                 mov     eax, [ebp+arg_4]
.text:000013BE                 push    eax             ; unsigned int
.text:000013BF                 mov     ecx, [ebp+arg_0]
.text:000013C2                 push    ecx             ; unsigned __int8 *
.text:000013C3                 lea     ecx, [ebp+var_34] ; this
.text:000013C6                 call    ?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z ; NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)
.text:000013CB                 movzx   edx, al
.text:000013CE                 test    edx, edx
.text:000013D0                 jz      loc_1466
.text:000013D6                 lea     ecx, [ebp+var_34] ; this
.text:000013D9                 call    ?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::CReparseAttr::IsSymLink(void)
.text:000013DE                 movzx   eax, al
.text:000013E1                 test    eax, eax
.text:000013E3                 jnz     short loc_13F2
.text:000013E5                 push    offset $SG68099 ; "Junction: "
.text:000013EA                 mov     ecx, [ebp+arg_8] ; this
.text:000013ED                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:000013F2
.text:000013F2 loc_13F2:                               ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+77j
.text:000013F2                 lea     ecx, [ebp+var_6C]
.text:000013F5                 push    ecx
.text:000013F6                 lea     ecx, [ebp+var_34]
.text:000013F9                 call    ?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ ; NWindows::NFile::CReparseAttr::GetPath(void)
.text:000013FE                 mov     [ebp+var_78], eax
.text:00001401                 mov     edx, [ebp+var_78]
.text:00001404                 mov     [ebp+var_7C], edx
.text:00001407                 mov     byte ptr [ebp+var_4], 1
.text:0000140B                 mov     eax, [ebp+var_7C]
.text:0000140E                 push    eax
.text:0000140F                 mov     ecx, [ebp+arg_8]
.text:00001412                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00001417                 mov     byte ptr [ebp+var_4], 0
.text:0000141B                 lea     ecx, [ebp+var_6C] ; this
.text:0000141E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001423                 lea     ecx, [ebp+var_34] ; this
.text:00001426                 call    ?IsOkNamePair@CReparseAttr@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::CReparseAttr::IsOkNamePair(void)
.text:0000142B                 movzx   ecx, al
.text:0000142E                 test    ecx, ecx
.text:00001430                 jnz     short loc_144B
.text:00001432                 push    offset $SG68102 ; " : "
.text:00001437                 mov     ecx, [ebp+arg_8] ; this
.text:0000143A                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:0000143F                 lea     edx, [ebp+var_20]
.text:00001442                 push    edx
.text:00001443                 mov     ecx, [ebp+arg_8]
.text:00001446                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:0000144B
.text:0000144B loc_144B:                               ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+C4j
.text:0000144B                 mov     [ebp+var_6D], 1
.text:0000144F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001456                 lea     ecx, [ebp+var_34] ; this
.text:00001459                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:0000145E                 mov     al, [ebp+var_6D]
.text:00001461                 jmp     loc_157A
.text:00001466 ; ---------------------------------------------------------------------------
.text:00001466
.text:00001466 loc_1466:                               ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+64j
.text:00001466                 cmp     [ebp+arg_4], 8
.text:0000146A                 jnb     short loc_1487
.text:0000146C                 mov     [ebp+var_6E], 0
.text:00001470                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001477                 lea     ecx, [ebp+var_34] ; this
.text:0000147A                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:0000147F                 mov     al, [ebp+var_6E]
.text:00001482                 jmp     loc_157A
.text:00001487 ; ---------------------------------------------------------------------------
.text:00001487
.text:00001487 loc_1487:                               ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+FEj
.text:00001487                 mov     eax, [ebp+arg_0]
.text:0000148A                 mov     ecx, [eax]
.text:0000148C                 mov     [ebp+var_3C], ecx
.text:0000148F                 mov     edx, [ebp+arg_0]
.text:00001492                 movzx   eax, word ptr [edx+4]
.text:00001496                 mov     [ebp+var_40], eax
.text:00001499                 mov     ecx, [ebp+var_40]
.text:0000149C                 add     ecx, 8
.text:0000149F                 cmp     ecx, [ebp+arg_4]
.text:000014A2                 jbe     short loc_14BF
.text:000014A4                 mov     [ebp+var_6F], 0
.text:000014A8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000014AF                 lea     ecx, [ebp+var_34] ; this
.text:000014B2                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:000014B7                 mov     al, [ebp+var_6F]
.text:000014BA                 jmp     loc_157A
.text:000014BF ; ---------------------------------------------------------------------------
.text:000014BF
.text:000014BF loc_14BF:                               ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+136j
.text:000014BF                 mov     edx, [ebp+arg_0]
.text:000014C2                 movzx   eax, word ptr [edx+6]
.text:000014C6                 test    eax, eax
.text:000014C8                 jz      short loc_14E5
.text:000014CA                 mov     [ebp+var_70], 0
.text:000014CE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000014D5                 lea     ecx, [ebp+var_34] ; this
.text:000014D8                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:000014DD                 mov     al, [ebp+var_70]
.text:000014E0                 jmp     loc_157A
.text:000014E5 ; ---------------------------------------------------------------------------
.text:000014E5
.text:000014E5 loc_14E5:                               ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+15Cj
.text:000014E5                 lea     ecx, [ebp+var_54]
.text:000014E8                 push    ecx             ; char *
.text:000014E9                 mov     edx, [ebp+var_3C]
.text:000014EC                 push    edx             ; unsigned int
.text:000014ED                 call    ?ConvertUInt32ToHex8Digits@@YGXIPAD@Z ; ConvertUInt32ToHex8Digits(uint,char *)
.text:000014F2                 lea     eax, [ebp+var_54]
.text:000014F5                 push    eax             ; char *
.text:000014F6                 mov     ecx, [ebp+arg_8] ; this
.text:000014F9                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:000014FE                 mov     ecx, [ebp+arg_8] ; this
.text:00001501                 call    ?Add_Space@UString@@QAEXXZ ; UString::Add_Space(void)
.text:00001506                 mov     ecx, [ebp+arg_0]
.text:00001509                 add     ecx, 8
.text:0000150C                 mov     [ebp+arg_0], ecx
.text:0000150F                 mov     [ebp+var_5C], 0
.text:00001516                 jmp     short loc_1521
.text:00001518 ; ---------------------------------------------------------------------------
.text:00001518
.text:00001518 loc_1518:                               ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+1F6j
.text:00001518                 mov     edx, [ebp+var_5C]
.text:0000151B                 add     edx, 1
.text:0000151E                 mov     [ebp+var_5C], edx
.text:00001521
.text:00001521 loc_1521:                               ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+1AAj
.text:00001521                 mov     eax, [ebp+var_5C]
.text:00001524                 cmp     eax, [ebp+var_40]
.text:00001527                 jnb     short loc_1564
.text:00001529                 mov     ecx, [ebp+arg_0]
.text:0000152C                 add     ecx, [ebp+var_5C]
.text:0000152F                 movzx   edx, byte ptr [ecx]
.text:00001532                 mov     [ebp+var_60], edx
.text:00001535                 mov     eax, [ebp+var_60]
.text:00001538                 shr     eax, 4
.text:0000153B                 and     eax, 0Fh
.text:0000153E                 push    eax
.text:0000153F                 call    ?GetHex@@YGII@Z ; GetHex(uint)
.text:00001544                 push    eax
.text:00001545                 mov     ecx, [ebp+arg_8]
.text:00001548                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:0000154D                 mov     ecx, [ebp+var_60]
.text:00001550                 and     ecx, 0Fh
.text:00001553                 push    ecx
.text:00001554                 call    ?GetHex@@YGII@Z ; GetHex(uint)
.text:00001559                 push    eax
.text:0000155A                 mov     ecx, [ebp+arg_8]
.text:0000155D                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:00001562                 jmp     short loc_1518
.text:00001564 ; ---------------------------------------------------------------------------
.text:00001564
.text:00001564 loc_1564:                               ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+1BBj
.text:00001564                 mov     [ebp+var_71], 1
.text:00001568                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000156F                 lea     ecx, [ebp+var_34] ; this
.text:00001572                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:00001577                 mov     al, [ebp+var_71]
.text:0000157A
.text:0000157A loc_157A:                               ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+F5j
.text:0000157A                                         ; ConvertNtReparseToString(uchar const *,uint,UString &)+116j ...
.text:0000157A                 push    edx
.text:0000157B                 mov     ecx, ebp
.text:0000157D                 push    eax
.text:0000157E                 lea     edx, $LN18
.text:00001584                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001589                 pop     eax
.text:0000158A                 pop     edx
.text:0000158B                 mov     ecx, [ebp+var_C]
.text:0000158E                 mov     large fs:0, ecx
.text:00001595                 pop     ecx
.text:00001596                 pop     edi
.text:00001597                 mov     ecx, [ebp+var_10]
.text:0000159A                 xor     ecx, ebp
.text:0000159C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000015A1                 add     esp, 7Ch
.text:000015A4                 cmp     ebp, esp
.text:000015A6                 call    __RTC_CheckEsp
.text:000015AB                 mov     esp, ebp
.text:000015AD                 pop     ebp
.text:000015AE                 retn    0Ch
.text:000015AE ?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z endp
.text:000015AE
.text:000015AE ; ---------------------------------------------------------------------------
.text:000015B1                 align 4
.text:000015B4 $LN18           dd 2                    ; DATA XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+212o
.text:000015B8                 dd offset $LN17
.text:000015BC $LN17           db 0CCh                 ; DATA XREF: .text:000015B8o
.text:000015BD                 db 3 dup(0FFh)
.text:000015C0                 dd offset unk_20
.text:000015C4                 dd offset $LN14         ; "attr"
.text:000015C8                 dd 0FFFFFFACh, 10h
.text:000015D0                 dd offset $LN15
.text:000015D4 $LN15           dd 786568h              ; DATA XREF: .text:000015D0o
.text:000015D8 $LN14           db 'attr',0             ; DATA XREF: .text:000015C4o
.text:000015DD                 align 10h
.text:000015DD _text           ends
.text:000015DD
.rtc$TMZ:000015E0 ; ===========================================================================
.rtc$TMZ:000015E0
.rtc$TMZ:000015E0 ; Segment type: Pure data
.rtc$TMZ:000015E0 ; Segment permissions: Read
.rtc$TMZ:000015E0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000015E0                 assume cs:_rtc$TMZ
.rtc$TMZ:000015E0                 ;org 15E0h
.rtc$TMZ:000015E0 ; COMDAT (pick any)
.rtc$TMZ:000015E0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000015E0 _rtc$TMZ        ends
.rtc$TMZ:000015E0
.rtc$IMZ:000015E4 ; ===========================================================================
.rtc$IMZ:000015E4
.rtc$IMZ:000015E4 ; Segment type: Pure data
.rtc$IMZ:000015E4 ; Segment permissions: Read
.rtc$IMZ:000015E4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000015E4                 assume cs:_rtc$IMZ
.rtc$IMZ:000015E4                 ;org 15E4h
.rtc$IMZ:000015E4 ; COMDAT (pick any)
.rtc$IMZ:000015E4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000015E4 _rtc$IMZ        ends
.rtc$IMZ:000015E4
.text:000015E8 ; ===========================================================================
.text:000015E8
.text:000015E8 ; Segment type: Pure code
.text:000015E8 ; Segment permissions: Read/Execute
.text:000015E8 _text           segment para public 'CODE' use32
.text:000015E8                 assume cs:_text
.text:000015E8                 ;org 15E8h
.text:000015E8 ; COMDAT (pick any)
.text:000015E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000015E8
.text:000015E8 ; =============== S U B R O U T I N E =======================================
.text:000015E8
.text:000015E8 ; Attributes: bp-based frame
.text:000015E8
.text:000015E8 ; bool __stdcall ConvertPropVariantToUInt64(const struct tagPROPVARIANT *, unsigned __int64 *)
.text:000015E8                 public ?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z
.text:000015E8 ?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z proc near
.text:000015E8                                         ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+19Ep
.text:000015E8
.text:000015E8 var_8           = dword ptr -8
.text:000015E8 var_4           = dword ptr -4
.text:000015E8 arg_0           = dword ptr  8
.text:000015E8 arg_4           = dword ptr  0Ch
.text:000015E8
.text:000015E8                 push    ebp
.text:000015E9                 mov     ebp, esp
.text:000015EB                 sub     esp, 8
.text:000015EE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000015F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000015FC                 mov     eax, [ebp+arg_0]
.text:000015FF                 movzx   ecx, word ptr [eax]
.text:00001602                 mov     [ebp+var_8], ecx
.text:00001605                 cmp     [ebp+var_8], 15h ; switch 22 cases
.text:00001609                 ja      short $LN1      ; jumptable 00001615 default case
.text:0000160B                 mov     edx, [ebp+var_8]
.text:0000160E                 movzx   eax, ds:$LN11_0[edx]
.text:00001615                 jmp     ds:$LN12[eax*4] ; switch jump
.text:0000161C ; ---------------------------------------------------------------------------
.text:0000161C
.text:0000161C $LN6_0:                                 ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:0000161C                                         ; DATA XREF: .text:$LN12o
.text:0000161C                 mov     ecx, [ebp+arg_4] ; jumptable 00001615 case 21
.text:0000161F                 mov     edx, [ebp+arg_0]
.text:00001622                 mov     eax, [edx+8]
.text:00001625                 mov     [ecx], eax
.text:00001627                 mov     edx, [edx+0Ch]
.text:0000162A                 mov     [ecx+4], edx
.text:0000162D                 mov     al, 1
.text:0000162F                 jmp     short loc_1686
.text:00001631 ; ---------------------------------------------------------------------------
.text:00001631
.text:00001631 $LN5:                                   ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:00001631                                         ; DATA XREF: .text:$LN12o
.text:00001631                 mov     eax, [ebp+arg_0] ; jumptable 00001615 case 19
.text:00001634                 mov     ecx, [eax+8]
.text:00001637                 xor     edx, edx
.text:00001639                 mov     eax, [ebp+arg_4]
.text:0000163C                 mov     [eax], ecx
.text:0000163E                 mov     [eax+4], edx
.text:00001641                 mov     al, 1
.text:00001643                 jmp     short loc_1686
.text:00001645 ; ---------------------------------------------------------------------------
.text:00001645
.text:00001645 $LN4_0:                                 ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:00001645                                         ; DATA XREF: .text:$LN12o
.text:00001645                 mov     ecx, [ebp+arg_0] ; jumptable 00001615 case 18
.text:00001648                 movzx   eax, word ptr [ecx+8]
.text:0000164C                 cdq
.text:0000164D                 mov     ecx, [ebp+arg_4]
.text:00001650                 mov     [ecx], eax
.text:00001652                 mov     [ecx+4], edx
.text:00001655                 mov     al, 1
.text:00001657                 jmp     short loc_1686
.text:00001659 ; ---------------------------------------------------------------------------
.text:00001659
.text:00001659 $LN3:                                   ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:00001659                                         ; DATA XREF: .text:$LN12o
.text:00001659                 mov     edx, [ebp+arg_0] ; jumptable 00001615 case 17
.text:0000165C                 movzx   eax, byte ptr [edx+8]
.text:00001660                 cdq
.text:00001661                 mov     ecx, [ebp+arg_4]
.text:00001664                 mov     [ecx], eax
.text:00001666                 mov     [ecx+4], edx
.text:00001669                 mov     al, 1
.text:0000166B                 jmp     short loc_1686
.text:0000166D ; ---------------------------------------------------------------------------
.text:0000166D
.text:0000166D $LN2_0:                                 ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:0000166D                                         ; DATA XREF: .text:$LN12o
.text:0000166D                 xor     al, al          ; jumptable 00001615 case 0
.text:0000166F                 jmp     short loc_1686
.text:00001671 ; ---------------------------------------------------------------------------
.text:00001671
.text:00001671 $LN1:                                   ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+21j
.text:00001671                                         ; ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dj
.text:00001671                                         ; DATA XREF: ...
.text:00001671                 mov     [ebp+var_4], 24E9Fh ; jumptable 00001615 default case
.text:00001678                 push    offset __TI1H
.text:0000167D                 lea     edx, [ebp+var_4]
.text:00001680                 push    edx
.text:00001681                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00001686 ; ---------------------------------------------------------------------------
.text:00001686
.text:00001686 loc_1686:                               ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+47j
.text:00001686                                         ; ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+5Bj ...
.text:00001686                 add     esp, 8
.text:00001689                 cmp     ebp, esp
.text:0000168B                 call    __RTC_CheckEsp
.text:00001690                 mov     esp, ebp
.text:00001692                 pop     ebp
.text:00001693                 retn    8
.text:00001693 ?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z endp
.text:00001693
.text:00001693 ; ---------------------------------------------------------------------------
.text:00001696                 align 4
.text:00001698 $LN12           dd offset $LN2_0        ; DATA XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+2Dr
.text:00001698                 dd offset $LN3          ; jump table for switch statement
.text:00001698                 dd offset $LN4_0
.text:00001698                 dd offset $LN5
.text:00001698                 dd offset $LN6_0
.text:00001698                 dd offset $LN1
.text:000016B0 $LN11_0         db      0,     5,     5,     5
.text:000016B0                                         ; DATA XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+26r
.text:000016B0                 db      5,     5,     5,     5 ; indirect table for switch statement
.text:000016B0                 db      5,     5,     5,     5
.text:000016B0                 db      5,     5,     5,     5
.text:000016B0                 db      5,     1,     2,     3
.text:000016B0                 db      5,     4
.text:000016C6                 align 4
.text:000016C6 _text           ends
.text:000016C6
.xdata$x:000016C8 ; ===========================================================================
.xdata$x:000016C8
.xdata$x:000016C8 ; Segment type: Pure data
.xdata$x:000016C8 ; Segment permissions: Read
.xdata$x:000016C8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000016C8                 assume cs:_xdata$x
.xdata$x:000016C8                 ;org 16C8h
.xdata$x:000016C8 ; COMDAT (pick any)
.xdata$x:000016C8                 public __TI1H
.xdata$x:000016C8 __TI1H          db    0                 ; DATA XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+90o
.xdata$x:000016C9                 db    0
.xdata$x:000016CA                 db    0
.xdata$x:000016CB                 db    0
.xdata$x:000016CC                 db    0
.xdata$x:000016CD                 db    0
.xdata$x:000016CE                 db    0
.xdata$x:000016CF                 db    0
.xdata$x:000016D0                 db    0
.xdata$x:000016D1                 db    0
.xdata$x:000016D2                 db    0
.xdata$x:000016D3                 db    0
.xdata$x:000016D4                 dd offset __CTA1H
.xdata$x:000016D4 _xdata$x        ends
.xdata$x:000016D4
.xdata$x:000016D8 ; ===========================================================================
.xdata$x:000016D8
.xdata$x:000016D8 ; Segment type: Pure data
.xdata$x:000016D8 ; Segment permissions: Read
.xdata$x:000016D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000016D8                 assume cs:_xdata$x
.xdata$x:000016D8                 ;org 16D8h
.xdata$x:000016D8 ; COMDAT (pick any)
.xdata$x:000016D8                 public __CTA1H
.xdata$x:000016D8 __CTA1H         db    1                 ; DATA XREF: .xdata$x:000016D4o
.xdata$x:000016D9                 db    0
.xdata$x:000016DA                 db    0
.xdata$x:000016DB                 db    0
.xdata$x:000016DC                 dd offset __CT??_R0H@84
.xdata$x:000016DC _xdata$x        ends
.xdata$x:000016DC
.xdata$x:000016E0 ; ===========================================================================
.xdata$x:000016E0
.xdata$x:000016E0 ; Segment type: Pure data
.xdata$x:000016E0 ; Segment permissions: Read
.xdata$x:000016E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000016E0                 assume cs:_xdata$x
.xdata$x:000016E0                 ;org 16E0h
.xdata$x:000016E0 ; COMDAT (pick any)
.xdata$x:000016E0                 public __CT??_R0H@84
.xdata$x:000016E0 __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:000016DCo
.xdata$x:000016E1                 db    0
.xdata$x:000016E2                 db    0
.xdata$x:000016E3                 db    0
.xdata$x:000016E4                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:000016E8                 db    0
.xdata$x:000016E9                 db    0
.xdata$x:000016EA                 db    0
.xdata$x:000016EB                 db    0
.xdata$x:000016EC                 db 0FFh
.xdata$x:000016ED                 db 0FFh
.xdata$x:000016EE                 db 0FFh
.xdata$x:000016EF                 db 0FFh
.xdata$x:000016F0                 db    0
.xdata$x:000016F1                 db    0
.xdata$x:000016F2                 db    0
.xdata$x:000016F3                 db    0
.xdata$x:000016F4                 db    4
.xdata$x:000016F5                 db    0
.xdata$x:000016F6                 db    0
.xdata$x:000016F7                 db    0
.xdata$x:000016F8                 db    0
.xdata$x:000016F9                 db    0
.xdata$x:000016FA                 db    0
.xdata$x:000016FB                 db    0
.xdata$x:000016FB _xdata$x        ends
.xdata$x:000016FB
.data:000016FC ; ===========================================================================
.data:000016FC
.data:000016FC ; Segment type: Pure data
.data:000016FC ; Segment permissions: Read/Write
.data:000016FC _data           segment dword public 'DATA' use32
.data:000016FC                 assume cs:_data
.data:000016FC                 ;org 16FCh
.data:000016FC ; COMDAT (pick any)
.data:000016FC                 public ??_R0H@8
.data:000016FC ; int `RTTI Type Descriptor'
.data:000016FC ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:000016E4o
.data:000016FC                                         ; const type_info::`vftable'
.data:00001700                 db    0
.data:00001701                 db    0
.data:00001702                 db    0
.data:00001703                 db    0
.data:00001704                 db  2Eh ; .
.data:00001705                 db  48h ; H
.data:00001706                 db    0
.data:00001707                 align 4
.data:00001707 _data           ends
.data:00001707
.text:00001708 ; ===========================================================================
.text:00001708
.text:00001708 ; Segment type: Pure code
.text:00001708 ; Segment permissions: Read/Execute
.text:00001708 _text           segment para public 'CODE' use32
.text:00001708                 assume cs:_text
.text:00001708                 ;org 1708h
.text:00001708 ; COMDAT (pick any)
.text:00001708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001708
.text:00001708 ; =============== S U B R O U T I N E =======================================
.text:00001708
.text:00001708 ; Attributes: bp-based frame
.text:00001708
.text:00001708 ; void __thiscall AString::Empty(AString *__hidden this)
.text:00001708                 public ?Empty@AString@@QAEXXZ
.text:00001708 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+6p
.text:00001708
.text:00001708 var_4           = dword ptr -4
.text:00001708
.text:00001708                 push    ebp
.text:00001709                 mov     ebp, esp
.text:0000170B                 push    ecx
.text:0000170C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001713                 mov     [ebp+var_4], ecx
.text:00001716                 mov     eax, [ebp+var_4]
.text:00001719                 mov     dword ptr [eax+4], 0
.text:00001720                 mov     ecx, [ebp+var_4]
.text:00001723                 mov     edx, [ecx]
.text:00001725                 mov     byte ptr [edx], 0
.text:00001728                 mov     esp, ebp
.text:0000172A                 pop     ebp
.text:0000172B                 retn
.text:0000172B ?Empty@AString@@QAEXXZ endp
.text:0000172B
.text:0000172B _text           ends
.text:0000172B
.text:0000172C ; ===========================================================================
.text:0000172C
.text:0000172C ; Segment type: Pure code
.text:0000172C ; Segment permissions: Read/Execute
.text:0000172C _text           segment para public 'CODE' use32
.text:0000172C                 assume cs:_text
.text:0000172C                 ;org 172Ch
.text:0000172C ; COMDAT (pick any)
.text:0000172C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000172C
.text:0000172C ; =============== S U B R O U T I N E =======================================
.text:0000172C
.text:0000172C ; Attributes: bp-based frame
.text:0000172C
.text:0000172C ; public: class AString & __thiscall AString::operator+=(char)
.text:0000172C                 public ??YAString@@QAEAAV0@D@Z
.text:0000172C ??YAString@@QAEAAV0@D@Z proc near       ; CODE XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+66p
.text:0000172C                                         ; ConvertNtSecureToString(uchar const *,uint,AString &)+BCp ...
.text:0000172C
.text:0000172C var_C           = dword ptr -0Ch
.text:0000172C var_8           = dword ptr -8
.text:0000172C var_4           = dword ptr -4
.text:0000172C arg_0           = byte ptr  8
.text:0000172C
.text:0000172C                 push    ebp
.text:0000172D                 mov     ebp, esp
.text:0000172F                 sub     esp, 0Ch
.text:00001732                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001739                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001740                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001747                 mov     [ebp+var_4], ecx
.text:0000174A                 mov     eax, [ebp+var_4]
.text:0000174D                 mov     ecx, [ebp+var_4]
.text:00001750                 mov     edx, [eax+8]
.text:00001753                 cmp     edx, [ecx+4]
.text:00001756                 jnz     short loc_1760
.text:00001758                 mov     ecx, [ebp+var_4] ; this
.text:0000175B                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:00001760
.text:00001760 loc_1760:                               ; CODE XREF: AString::operator+=(char)+2Aj
.text:00001760                 mov     eax, [ebp+var_4]
.text:00001763                 mov     ecx, [eax+4]
.text:00001766                 mov     [ebp+var_8], ecx
.text:00001769                 mov     edx, [ebp+var_4]
.text:0000176C                 mov     eax, [edx]
.text:0000176E                 mov     [ebp+var_C], eax
.text:00001771                 mov     ecx, [ebp+var_C]
.text:00001774                 add     ecx, [ebp+var_8]
.text:00001777                 mov     dl, [ebp+arg_0]
.text:0000177A                 mov     [ecx], dl
.text:0000177C                 mov     eax, [ebp+var_8]
.text:0000177F                 add     eax, 1
.text:00001782                 mov     [ebp+var_8], eax
.text:00001785                 mov     ecx, [ebp+var_C]
.text:00001788                 add     ecx, [ebp+var_8]
.text:0000178B                 mov     byte ptr [ecx], 0
.text:0000178E                 mov     edx, [ebp+var_4]
.text:00001791                 mov     eax, [ebp+var_8]
.text:00001794                 mov     [edx+4], eax
.text:00001797                 mov     eax, [ebp+var_4]
.text:0000179A                 add     esp, 0Ch
.text:0000179D                 cmp     ebp, esp
.text:0000179F                 call    __RTC_CheckEsp
.text:000017A4                 mov     esp, ebp
.text:000017A6                 pop     ebp
.text:000017A7                 retn    4
.text:000017A7 ??YAString@@QAEAAV0@D@Z endp
.text:000017A7
.text:000017A7 ; ---------------------------------------------------------------------------
.text:000017AA                 align 4
.text:000017AA _text           ends
.text:000017AA
.text$x:000017AC ; ===========================================================================
.text$x:000017AC
.text$x:000017AC ; Segment type: Pure code
.text$x:000017AC ; Segment permissions: Read/Execute
.text$x:000017AC _text$x         segment para public 'CODE' use32
.text$x:000017AC                 assume cs:_text$x
.text$x:000017AC                 ;org 17ACh
.text$x:000017AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000017AC
.text$x:000017AC ; =============== S U B R O U T I N E =======================================
.text$x:000017AC
.text$x:000017AC
.text$x:000017AC __unwindfunclet$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z$0 proc near
.text$x:000017AC                                         ; DATA XREF: .xdata$x:000017E8o
.text$x:000017AC                 lea     ecx, [ebp-34h]  ; this
.text$x:000017AF                 jmp     ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text$x:000017AF __unwindfunclet$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z$0 endp
.text$x:000017AF
.text$x:000017B4
.text$x:000017B4 ; =============== S U B R O U T I N E =======================================
.text$x:000017B4
.text$x:000017B4
.text$x:000017B4 __unwindfunclet$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z$1 proc near
.text$x:000017B4                                         ; DATA XREF: .xdata$x:000017F0o
.text$x:000017B4                 lea     ecx, [ebp-6Ch]  ; this
.text$x:000017B7                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000017B7 __unwindfunclet$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z$1 endp
.text$x:000017B7
.text$x:000017BC
.text$x:000017BC ; =============== S U B R O U T I N E =======================================
.text$x:000017BC
.text$x:000017BC
.text$x:000017BC __ehhandler$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z proc near
.text$x:000017BC                                         ; DATA XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+5o
.text$x:000017BC
.text$x:000017BC arg_4           = dword ptr  8
.text$x:000017BC
.text$x:000017BC                 mov     edx, [esp+arg_4]
.text$x:000017C0                 lea     eax, [edx+0Ch]
.text$x:000017C3                 mov     ecx, [edx-78h]
.text$x:000017C6                 xor     ecx, eax
.text$x:000017C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000017CD                 mov     ecx, [edx-4]
.text$x:000017D0                 xor     ecx, eax
.text$x:000017D2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000017D7                 mov     eax, offset __ehfuncinfo$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z
.text$x:000017DC                 jmp     ___CxxFrameHandler3
.text$x:000017DC __ehhandler$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z endp
.text$x:000017DC
.text$x:000017DC ; ---------------------------------------------------------------------------
.text$x:000017E1                 align 4
.text$x:000017E1 _text$x         ends
.text$x:000017E1
.xdata$x:000017E4 ; ===========================================================================
.xdata$x:000017E4
.xdata$x:000017E4 ; Segment type: Pure data
.xdata$x:000017E4 ; Segment permissions: Read
.xdata$x:000017E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000017E4                 assume cs:_xdata$x
.xdata$x:000017E4                 ;org 17E4h
.xdata$x:000017E4 __unwindtable$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z db 0FFh
.xdata$x:000017E4                                         ; DATA XREF: .xdata$x:000017FCo
.xdata$x:000017E5                 db 0FFh
.xdata$x:000017E6                 db 0FFh
.xdata$x:000017E7                 db 0FFh
.xdata$x:000017E8                 dd offset __unwindfunclet$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z$0
.xdata$x:000017EC                 align 10h
.xdata$x:000017F0                 dd offset __unwindfunclet$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z$1
.xdata$x:000017F4 __ehfuncinfo$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z db  22h ; "
.xdata$x:000017F4                                         ; DATA XREF: __ehhandler$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z+1Bo
.xdata$x:000017F5                 db    5
.xdata$x:000017F6                 db  93h ; ô
.xdata$x:000017F7                 db  19h
.xdata$x:000017F8                 db    2
.xdata$x:000017F9                 db    0
.xdata$x:000017FA                 db    0
.xdata$x:000017FB                 db    0
.xdata$x:000017FC                 dd offset __unwindtable$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z
.xdata$x:00001800                 db    0
.xdata$x:00001801                 db    0
.xdata$x:00001802                 db    0
.xdata$x:00001803                 db    0
.xdata$x:00001804                 db    0
.xdata$x:00001805                 db    0
.xdata$x:00001806                 db    0
.xdata$x:00001807                 db    0
.xdata$x:00001808                 db    0
.xdata$x:00001809                 db    0
.xdata$x:0000180A                 db    0
.xdata$x:0000180B                 db    0
.xdata$x:0000180C                 db    0
.xdata$x:0000180D                 db    0
.xdata$x:0000180E                 db    0
.xdata$x:0000180F                 db    0
.xdata$x:00001810                 db    0
.xdata$x:00001811                 db    0
.xdata$x:00001812                 db    0
.xdata$x:00001813                 db    0
.xdata$x:00001814                 db    1
.xdata$x:00001815                 db    0
.xdata$x:00001816                 db    0
.xdata$x:00001817                 db    0
.xdata$x:00001817 _xdata$x        ends
.xdata$x:00001817
.text:00001818 ; ===========================================================================
.text:00001818
.text:00001818 ; Segment type: Pure code
.text:00001818 ; Segment permissions: Read/Execute
.text:00001818 _text           segment para public 'CODE' use32
.text:00001818                 assume cs:_text
.text:00001818                 ;org 1818h
.text:00001818 ; COMDAT (pick any)
.text:00001818                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001818
.text:00001818 ; =============== S U B R O U T I N E =======================================
.text:00001818
.text:00001818 ; Attributes: bp-based frame
.text:00001818
.text:00001818 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00001818                 public ??1UString@@QAE@XZ
.text:00001818 ??1UString@@QAE@XZ proc near            ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+B2p
.text:00001818                                         ; __unwindfunclet$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z$1+3j ...
.text:00001818
.text:00001818 var_8           = dword ptr -8
.text:00001818 var_4           = dword ptr -4
.text:00001818
.text:00001818                 push    ebp
.text:00001819                 mov     ebp, esp
.text:0000181B                 sub     esp, 8
.text:0000181E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001825                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000182C                 mov     [ebp+var_4], ecx
.text:0000182F                 mov     eax, [ebp+var_4]
.text:00001832                 mov     ecx, [eax]
.text:00001834                 mov     [ebp+var_8], ecx
.text:00001837                 mov     edx, [ebp+var_8]
.text:0000183A                 push    edx             ; void *
.text:0000183B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001840                 add     esp, 4
.text:00001843                 add     esp, 8
.text:00001846                 cmp     ebp, esp
.text:00001848                 call    __RTC_CheckEsp
.text:0000184D                 mov     esp, ebp
.text:0000184F                 pop     ebp
.text:00001850                 retn
.text:00001850 ??1UString@@QAE@XZ endp
.text:00001850
.text:00001850 ; ---------------------------------------------------------------------------
.text:00001851                 align 4
.text:00001851 _text           ends
.text:00001851
.text:00001854 ; ===========================================================================
.text:00001854
.text:00001854 ; Segment type: Pure code
.text:00001854 ; Segment permissions: Read/Execute
.text:00001854 _text           segment para public 'CODE' use32
.text:00001854                 assume cs:_text
.text:00001854                 ;org 1854h
.text:00001854 ; COMDAT (pick any)
.text:00001854                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001854
.text:00001854 ; =============== S U B R O U T I N E =======================================
.text:00001854
.text:00001854 ; Attributes: bp-based frame
.text:00001854
.text:00001854 ; void __thiscall UString::Empty(UString *__hidden this)
.text:00001854                 public ?Empty@UString@@QAEXXZ
.text:00001854 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+3Bp
.text:00001854
.text:00001854 var_4           = dword ptr -4
.text:00001854
.text:00001854                 push    ebp
.text:00001855                 mov     ebp, esp
.text:00001857                 push    ecx
.text:00001858                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000185F                 mov     [ebp+var_4], ecx
.text:00001862                 mov     eax, [ebp+var_4]
.text:00001865                 mov     dword ptr [eax+4], 0
.text:0000186C                 mov     ecx, [ebp+var_4]
.text:0000186F                 mov     edx, [ecx]
.text:00001871                 xor     eax, eax
.text:00001873                 mov     [edx], ax
.text:00001876                 mov     esp, ebp
.text:00001878                 pop     ebp
.text:00001879                 retn
.text:00001879 ?Empty@UString@@QAEXXZ endp
.text:00001879
.text:00001879 ; ---------------------------------------------------------------------------
.text:0000187A                 align 4
.text:0000187A _text           ends
.text:0000187A
.text:0000187C ; ===========================================================================
.text:0000187C
.text:0000187C ; Segment type: Pure code
.text:0000187C ; Segment permissions: Read/Execute
.text:0000187C _text           segment para public 'CODE' use32
.text:0000187C                 assume cs:_text
.text:0000187C                 ;org 187Ch
.text:0000187C ; COMDAT (pick any)
.text:0000187C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000187C
.text:0000187C ; =============== S U B R O U T I N E =======================================
.text:0000187C
.text:0000187C ; Attributes: bp-based frame
.text:0000187C
.text:0000187C ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:0000187C                 public ??YUString@@QAEAAV0@_W@Z
.text:0000187C ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+1DCp
.text:0000187C                                         ; ConvertNtReparseToString(uchar const *,uint,UString &)+1F1p
.text:0000187C
.text:0000187C var_C           = dword ptr -0Ch
.text:0000187C var_8           = dword ptr -8
.text:0000187C var_4           = dword ptr -4
.text:0000187C arg_0           = word ptr  8
.text:0000187C
.text:0000187C                 push    ebp
.text:0000187D                 mov     ebp, esp
.text:0000187F                 sub     esp, 0Ch
.text:00001882                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001889                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001890                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001897                 mov     [ebp+var_4], ecx
.text:0000189A                 mov     eax, [ebp+var_4]
.text:0000189D                 mov     ecx, [ebp+var_4]
.text:000018A0                 mov     edx, [eax+8]
.text:000018A3                 cmp     edx, [ecx+4]
.text:000018A6                 jnz     short loc_18B0
.text:000018A8                 mov     ecx, [ebp+var_4] ; this
.text:000018AB                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:000018B0
.text:000018B0 loc_18B0:                               ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:000018B0                 mov     eax, [ebp+var_4]
.text:000018B3                 mov     ecx, [eax+4]
.text:000018B6                 mov     [ebp+var_8], ecx
.text:000018B9                 mov     edx, [ebp+var_4]
.text:000018BC                 mov     eax, [edx]
.text:000018BE                 mov     [ebp+var_C], eax
.text:000018C1                 mov     ecx, [ebp+var_8]
.text:000018C4                 mov     edx, [ebp+var_C]
.text:000018C7                 mov     ax, [ebp+arg_0]
.text:000018CB                 mov     [edx+ecx*2], ax
.text:000018CF                 mov     ecx, [ebp+var_8]
.text:000018D2                 add     ecx, 1
.text:000018D5                 mov     [ebp+var_8], ecx
.text:000018D8                 xor     edx, edx
.text:000018DA                 mov     eax, [ebp+var_8]
.text:000018DD                 mov     ecx, [ebp+var_C]
.text:000018E0                 mov     [ecx+eax*2], dx
.text:000018E4                 mov     edx, [ebp+var_4]
.text:000018E7                 mov     eax, [ebp+var_8]
.text:000018EA                 mov     [edx+4], eax
.text:000018ED                 mov     eax, [ebp+var_4]
.text:000018F0                 add     esp, 0Ch
.text:000018F3                 cmp     ebp, esp
.text:000018F5                 call    __RTC_CheckEsp
.text:000018FA                 mov     esp, ebp
.text:000018FC                 pop     ebp
.text:000018FD                 retn    4
.text:000018FD ??YUString@@QAEAAV0@_W@Z endp
.text:000018FD
.text:000018FD _text           ends
.text:000018FD
.text:00001900 ; ===========================================================================
.text:00001900
.text:00001900 ; Segment type: Pure code
.text:00001900 ; Segment permissions: Read/Execute
.text:00001900 _text           segment para public 'CODE' use32
.text:00001900                 assume cs:_text
.text:00001900                 ;org 1900h
.text:00001900 ; COMDAT (pick any)
.text:00001900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001900
.text:00001900 ; =============== S U B R O U T I N E =======================================
.text:00001900
.text:00001900 ; Attributes: bp-based frame
.text:00001900
.text:00001900 ; _DWORD __thiscall NWindows::NFile::CReparseAttr::CReparseAttr(NWindows::NFile::CReparseAttr *__hidden this)
.text:00001900                 public ??0CReparseAttr@NFile@NWindows@@QAE@XZ
.text:00001900 ??0CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text:00001900                                         ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+43p
.text:00001900
.text:00001900 var_10          = dword ptr -10h
.text:00001900 var_C           = dword ptr -0Ch
.text:00001900 var_4           = dword ptr -4
.text:00001900
.text:00001900                 push    ebp
.text:00001901                 mov     ebp, esp
.text:00001903                 push    0FFFFFFFFh
.text:00001905                 push    offset __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ
.text:0000190A                 mov     eax, large fs:0
.text:00001910                 push    eax
.text:00001911                 push    ecx
.text:00001912                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001919                 mov     eax, dword ptr ds:___security_cookie
.text:0000191E                 xor     eax, ebp
.text:00001920                 push    eax
.text:00001921                 lea     eax, [ebp+var_C]
.text:00001924                 mov     large fs:0, eax
.text:0000192A                 mov     [ebp+var_10], ecx
.text:0000192D                 mov     eax, [ebp+var_10]
.text:00001930                 mov     dword ptr [eax], 0
.text:00001936                 mov     ecx, [ebp+var_10]
.text:00001939                 mov     dword ptr [ecx+4], 0
.text:00001940                 mov     ecx, [ebp+var_10]
.text:00001943                 add     ecx, 8
.text:00001946                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000194B                 mov     [ebp+var_4], 0
.text:00001952                 mov     ecx, [ebp+var_10]
.text:00001955                 add     ecx, 14h
.text:00001958                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000195D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001964                 mov     eax, [ebp+var_10]
.text:00001967                 mov     ecx, [ebp+var_C]
.text:0000196A                 mov     large fs:0, ecx
.text:00001971                 pop     ecx
.text:00001972                 add     esp, 10h
.text:00001975                 cmp     ebp, esp
.text:00001977                 call    __RTC_CheckEsp
.text:0000197C                 mov     esp, ebp
.text:0000197E                 pop     ebp
.text:0000197F                 retn
.text:0000197F ??0CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text:0000197F
.text:0000197F _text           ends
.text:0000197F
.text$x:00001980 ; ===========================================================================
.text$x:00001980
.text$x:00001980 ; Segment type: Pure code
.text$x:00001980 ; Segment permissions: Read/Execute
.text$x:00001980 _text$x         segment para public 'CODE' use32
.text$x:00001980                 assume cs:_text$x
.text$x:00001980                 ;org 1980h
.text$x:00001980 ; COMDAT (pick associative to section at 1900)
.text$x:00001980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001980
.text$x:00001980 ; =============== S U B R O U T I N E =======================================
.text$x:00001980
.text$x:00001980
.text$x:00001980 __unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0 proc near
.text$x:00001980                                         ; DATA XREF: .xdata$x:000019ACo
.text$x:00001980                 mov     ecx, [ebp-10h]
.text$x:00001983                 add     ecx, 8          ; this
.text$x:00001986                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001986 __unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0 endp
.text$x:00001986
.text$x:0000198B
.text$x:0000198B ; =============== S U B R O U T I N E =======================================
.text$x:0000198B
.text$x:0000198B
.text$x:0000198B __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text$x:0000198B                                         ; DATA XREF: NWindows::NFile::CReparseAttr::CReparseAttr(void)+5o
.text$x:0000198B
.text$x:0000198B arg_4           = dword ptr  8
.text$x:0000198B
.text$x:0000198B                 mov     edx, [esp+arg_4]
.text$x:0000198F                 lea     eax, [edx+0Ch]
.text$x:00001992                 mov     ecx, [edx-8]
.text$x:00001995                 xor     ecx, eax
.text$x:00001997                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000199C                 mov     eax, offset __ehfuncinfo$??0CReparseAttr@NFile@NWindows@@QAE@XZ
.text$x:000019A1                 jmp     ___CxxFrameHandler3
.text$x:000019A1 __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text$x:000019A1
.text$x:000019A1 ; ---------------------------------------------------------------------------
.text$x:000019A6                 align 4
.text$x:000019A6 _text$x         ends
.text$x:000019A6
.xdata$x:000019A8 ; ===========================================================================
.xdata$x:000019A8
.xdata$x:000019A8 ; Segment type: Pure data
.xdata$x:000019A8 ; Segment permissions: Read
.xdata$x:000019A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000019A8                 assume cs:_xdata$x
.xdata$x:000019A8                 ;org 19A8h
.xdata$x:000019A8 ; COMDAT (pick associative to section at 1900)
.xdata$x:000019A8 __unwindtable$??0CReparseAttr@NFile@NWindows@@QAE@XZ db 0FFh
.xdata$x:000019A8                                         ; DATA XREF: .xdata$x:000019B8o
.xdata$x:000019A9                 db 0FFh
.xdata$x:000019AA                 db 0FFh
.xdata$x:000019AB                 db 0FFh
.xdata$x:000019AC                 dd offset __unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0
.xdata$x:000019B0 __ehfuncinfo$??0CReparseAttr@NFile@NWindows@@QAE@XZ db  22h ; "
.xdata$x:000019B0                                         ; DATA XREF: __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ+11o
.xdata$x:000019B1                 db    5
.xdata$x:000019B2                 db  93h ; ô
.xdata$x:000019B3                 db  19h
.xdata$x:000019B4                 db    1
.xdata$x:000019B5                 db    0
.xdata$x:000019B6                 db    0
.xdata$x:000019B7                 db    0
.xdata$x:000019B8                 dd offset __unwindtable$??0CReparseAttr@NFile@NWindows@@QAE@XZ
.xdata$x:000019BC                 db    0
.xdata$x:000019BD                 db    0
.xdata$x:000019BE                 db    0
.xdata$x:000019BF                 db    0
.xdata$x:000019C0                 db    0
.xdata$x:000019C1                 db    0
.xdata$x:000019C2                 db    0
.xdata$x:000019C3                 db    0
.xdata$x:000019C4                 db    0
.xdata$x:000019C5                 db    0
.xdata$x:000019C6                 db    0
.xdata$x:000019C7                 db    0
.xdata$x:000019C8                 db    0
.xdata$x:000019C9                 db    0
.xdata$x:000019CA                 db    0
.xdata$x:000019CB                 db    0
.xdata$x:000019CC                 db    0
.xdata$x:000019CD                 db    0
.xdata$x:000019CE                 db    0
.xdata$x:000019CF                 db    0
.xdata$x:000019D0                 db    1
.xdata$x:000019D1                 db    0
.xdata$x:000019D2                 db    0
.xdata$x:000019D3                 db    0
.xdata$x:000019D3 _xdata$x        ends
.xdata$x:000019D3
.text:000019D4 ; ===========================================================================
.text:000019D4
.text:000019D4 ; Segment type: Pure code
.text:000019D4 ; Segment permissions: Read/Execute
.text:000019D4 _text           segment para public 'CODE' use32
.text:000019D4                 assume cs:_text
.text:000019D4                 ;org 19D4h
.text:000019D4 ; COMDAT (pick any)
.text:000019D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000019D4
.text:000019D4 ; =============== S U B R O U T I N E =======================================
.text:000019D4
.text:000019D4 ; Attributes: bp-based frame
.text:000019D4
.text:000019D4 ; bool __thiscall NWindows::NFile::CReparseAttr::IsSymLink(NWindows::NFile::CReparseAttr *__hidden this)
.text:000019D4                 public ?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ
.text:000019D4 ?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ proc near
.text:000019D4                                         ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+6Dp
.text:000019D4
.text:000019D4 var_4           = dword ptr -4
.text:000019D4
.text:000019D4                 push    ebp
.text:000019D5                 mov     ebp, esp
.text:000019D7                 push    ecx
.text:000019D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019DF                 mov     [ebp+var_4], ecx
.text:000019E2                 mov     eax, [ebp+var_4]
.text:000019E5                 xor     ecx, ecx
.text:000019E7                 cmp     dword ptr [eax], 0A000000Ch
.text:000019ED                 setz    cl
.text:000019F0                 mov     al, cl
.text:000019F2                 mov     esp, ebp
.text:000019F4                 pop     ebp
.text:000019F5                 retn
.text:000019F5 ?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ endp
.text:000019F5
.text:000019F5 ; ---------------------------------------------------------------------------
.text:000019F6                 align 4
.text:000019F6 _text           ends
.text:000019F6
.text:000019F8 ; ===========================================================================
.text:000019F8
.text:000019F8 ; Segment type: Pure code
.text:000019F8 ; Segment permissions: Read/Execute
.text:000019F8 _text           segment para public 'CODE' use32
.text:000019F8                 assume cs:_text
.text:000019F8                 ;org 19F8h
.text:000019F8 ; COMDAT (pick any)
.text:000019F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000019F8
.text:000019F8 ; =============== S U B R O U T I N E =======================================
.text:000019F8
.text:000019F8 ; Attributes: bp-based frame
.text:000019F8
.text:000019F8 ; _DWORD __thiscall NWindows::NFile::CReparseAttr::~CReparseAttr(NWindows::NFile::CReparseAttr *__hidden this)
.text:000019F8                 public ??1CReparseAttr@NFile@NWindows@@QAE@XZ
.text:000019F8 ??1CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text:000019F8                                         ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+EDp
.text:000019F8                                         ; ConvertNtReparseToString(uchar const *,uint,UString &)+10Ep ...
.text:000019F8
.text:000019F8 var_10          = dword ptr -10h
.text:000019F8 var_C           = dword ptr -0Ch
.text:000019F8 var_4           = dword ptr -4
.text:000019F8
.text:000019F8                 push    ebp
.text:000019F9                 mov     ebp, esp
.text:000019FB                 push    0FFFFFFFFh
.text:000019FD                 push    offset __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ
.text:00001A02                 mov     eax, large fs:0
.text:00001A08                 push    eax
.text:00001A09                 push    ecx
.text:00001A0A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001A11                 mov     eax, dword ptr ds:___security_cookie
.text:00001A16                 xor     eax, ebp
.text:00001A18                 push    eax
.text:00001A19                 lea     eax, [ebp+var_C]
.text:00001A1C                 mov     large fs:0, eax
.text:00001A22                 mov     [ebp+var_10], ecx
.text:00001A25                 mov     [ebp+var_4], 0
.text:00001A2C                 mov     ecx, [ebp+var_10]
.text:00001A2F                 add     ecx, 14h        ; this
.text:00001A32                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001A37                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001A3E                 mov     ecx, [ebp+var_10]
.text:00001A41                 add     ecx, 8          ; this
.text:00001A44                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001A49                 mov     ecx, [ebp+var_C]
.text:00001A4C                 mov     large fs:0, ecx
.text:00001A53                 pop     ecx
.text:00001A54                 add     esp, 10h
.text:00001A57                 cmp     ebp, esp
.text:00001A59                 call    __RTC_CheckEsp
.text:00001A5E                 mov     esp, ebp
.text:00001A60                 pop     ebp
.text:00001A61                 retn
.text:00001A61 ??1CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text:00001A61
.text:00001A61 ; ---------------------------------------------------------------------------
.text:00001A62                 align 4
.text:00001A62 _text           ends
.text:00001A62
.text$x:00001A64 ; ===========================================================================
.text$x:00001A64
.text$x:00001A64 ; Segment type: Pure code
.text$x:00001A64 ; Segment permissions: Read/Execute
.text$x:00001A64 _text$x         segment para public 'CODE' use32
.text$x:00001A64                 assume cs:_text$x
.text$x:00001A64                 ;org 1A64h
.text$x:00001A64 ; COMDAT (pick associative to section at 19F8)
.text$x:00001A64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001A64
.text$x:00001A64 ; =============== S U B R O U T I N E =======================================
.text$x:00001A64
.text$x:00001A64
.text$x:00001A64 __unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0 proc near
.text$x:00001A64                                         ; DATA XREF: .xdata$x:00001A90o
.text$x:00001A64                 mov     ecx, [ebp-10h]
.text$x:00001A67                 add     ecx, 8          ; this
.text$x:00001A6A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001A6A __unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0 endp
.text$x:00001A6A
.text$x:00001A6F
.text$x:00001A6F ; =============== S U B R O U T I N E =======================================
.text$x:00001A6F
.text$x:00001A6F
.text$x:00001A6F __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text$x:00001A6F                                         ; DATA XREF: NWindows::NFile::CReparseAttr::~CReparseAttr(void)+5o
.text$x:00001A6F
.text$x:00001A6F arg_4           = dword ptr  8
.text$x:00001A6F
.text$x:00001A6F                 mov     edx, [esp+arg_4]
.text$x:00001A73                 lea     eax, [edx+0Ch]
.text$x:00001A76                 mov     ecx, [edx-8]
.text$x:00001A79                 xor     ecx, eax
.text$x:00001A7B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001A80                 mov     eax, offset __ehfuncinfo$??1CReparseAttr@NFile@NWindows@@QAE@XZ
.text$x:00001A85                 jmp     ___CxxFrameHandler3
.text$x:00001A85 __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text$x:00001A85
.text$x:00001A85 ; ---------------------------------------------------------------------------
.text$x:00001A8A                 align 4
.text$x:00001A8A _text$x         ends
.text$x:00001A8A
.xdata$x:00001A8C ; ===========================================================================
.xdata$x:00001A8C
.xdata$x:00001A8C ; Segment type: Pure data
.xdata$x:00001A8C ; Segment permissions: Read
.xdata$x:00001A8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001A8C                 assume cs:_xdata$x
.xdata$x:00001A8C                 ;org 1A8Ch
.xdata$x:00001A8C ; COMDAT (pick associative to section at 19F8)
.xdata$x:00001A8C __unwindtable$??1CReparseAttr@NFile@NWindows@@QAE@XZ db 0FFh
.xdata$x:00001A8C                                         ; DATA XREF: .xdata$x:00001A9Co
.xdata$x:00001A8D                 db 0FFh
.xdata$x:00001A8E                 db 0FFh
.xdata$x:00001A8F                 db 0FFh
.xdata$x:00001A90                 dd offset __unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0
.xdata$x:00001A94 __ehfuncinfo$??1CReparseAttr@NFile@NWindows@@QAE@XZ db  22h ; "
.xdata$x:00001A94                                         ; DATA XREF: __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ+11o
.xdata$x:00001A95                 db    5
.xdata$x:00001A96                 db  93h ; ô
.xdata$x:00001A97                 db  19h
.xdata$x:00001A98                 db    1
.xdata$x:00001A99                 db    0
.xdata$x:00001A9A                 db    0
.xdata$x:00001A9B                 db    0
.xdata$x:00001A9C                 dd offset __unwindtable$??1CReparseAttr@NFile@NWindows@@QAE@XZ
.xdata$x:00001AA0                 db    0
.xdata$x:00001AA1                 db    0
.xdata$x:00001AA2                 db    0
.xdata$x:00001AA3                 db    0
.xdata$x:00001AA4                 db    0
.xdata$x:00001AA5                 db    0
.xdata$x:00001AA6                 db    0
.xdata$x:00001AA7                 db    0
.xdata$x:00001AA8                 db    0
.xdata$x:00001AA9                 db    0
.xdata$x:00001AAA                 db    0
.xdata$x:00001AAB                 db    0
.xdata$x:00001AAC                 db    0
.xdata$x:00001AAD                 db    0
.xdata$x:00001AAE                 db    0
.xdata$x:00001AAF                 db    0
.xdata$x:00001AB0                 db    0
.xdata$x:00001AB1                 db    0
.xdata$x:00001AB2                 db    0
.xdata$x:00001AB3                 db    0
.xdata$x:00001AB4                 db    1
.xdata$x:00001AB5                 db    0
.xdata$x:00001AB6                 db    0
.xdata$x:00001AB7                 db    0
.xdata$x:00001AB7 _xdata$x        ends
.xdata$x:00001AB7
UNDEF:00001AC0 ; ===========================================================================
UNDEF:00001AC0
UNDEF:00001AC0 ; Segment type: Externs
UNDEF:00001AC0 ; UNDEF
UNDEF:00001AC0                 extrn __RTC_CheckEsp:near
UNDEF:00001AC0                                         ; CODE XREF: ConvertWinAttribToString(char *,uint)+85p
UNDEF:00001AC0                                         ; ConvertPosixAttribToString(char *,uint)+13Ep ...
UNDEF:00001AC4                 extrn __RTC_Shutdown:near
UNDEF:00001AC4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001AC8                 extrn __RTC_InitBase:near
UNDEF:00001AC8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001ACC ; void __stdcall ConvertUInt32ToHex8Digits(unsigned int, char *)
UNDEF:00001ACC                 extrn ?ConvertUInt32ToHex8Digits@@YGXIPAD@Z:near
UNDEF:00001ACC                                         ; CODE XREF: ConvertPosixAttribToString(char *,uint)+134p
UNDEF:00001ACC                                         ; ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+BBp ...
UNDEF:00001AD0 ; void __stdcall ConvertPropVariantToShortString(const struct tagPROPVARIANT *, char *)
UNDEF:00001AD0                 extrn ?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PAD@Z:near
UNDEF:00001AD0                                         ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+1D7p
UNDEF:00001AD4 ; void __stdcall ConvertUInt64ToHex(unsigned __int64, char *)
UNDEF:00001AD4                 extrn ?ConvertUInt64ToHex@@YGX_KPAD@Z:near
UNDEF:00001AD4                                         ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+1C8p
UNDEF:00001AD8 ; void __stdcall ConvertUInt64ToString(unsigned __int64, char *)
UNDEF:00001AD8                 extrn ?ConvertUInt64ToString@@YGX_KPAD@Z:near
UNDEF:00001AD8                                         ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+181p
UNDEF:00001ADC ; size_t __cdecl strlen(const char *Str)
UNDEF:00001ADC                 extrn _strlen:near      ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+143p
UNDEF:00001AE0 ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:00001AE0                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:00001AE0                                         ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+13Ap
UNDEF:00001AE0                                         ; ParseSid(AString &,uchar const *,uint,uint &)+256p ...
UNDEF:00001AE4 ; bool __stdcall ConvertFileTimeToString(const struct _FILETIME *, char *, bool, bool)
UNDEF:00001AE4                 extrn ?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z:near
UNDEF:00001AE4                                         ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+6Cp
UNDEF:00001AE8 ; BOOL __stdcall FileTimeToLocalFileTime(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime)
UNDEF:00001AE8                 extrn __imp__FileTimeToLocalFileTime@8:near
UNDEF:00001AE8                                         ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+47p
UNDEF:00001AE8                                         ; DATA XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+47r
UNDEF:00001AEC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001AEC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001AEC                                         ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+1E6p
UNDEF:00001AEC                                         ; ConvertPropertyToString(UString &,tagPROPVARIANT const &,ulong,bool)+68p ...
UNDEF:00001AF0                 extrn __aullshr:near    ; CODE XREF: ConvertPropertyToShortString(char *,tagPROPVARIANT const &,ulong,bool)+134p
UNDEF:00001AF4 ; __stdcall _CxxThrowException(x, x)
UNDEF:00001AF4                 extrn __CxxThrowException@8:near
UNDEF:00001AF4                                         ; CODE XREF: ConvertPropVariantToUInt64(tagPROPVARIANT const &,unsigned __int64 &)+99p
UNDEF:00001AF8 ; const type_info::`vftable'
UNDEF:00001AF8                 extrn ??_7type_info@@6B@:near
UNDEF:00001AF8                                         ; DATA XREF: .data:int `RTTI Type Descriptor'o
UNDEF:00001AFC ; void __thiscall UString::SetFromAscii(UString *__hidden this, const char *)
UNDEF:00001AFC                 extrn ?SetFromAscii@UString@@QAEXPBD@Z:near
UNDEF:00001AFC                                         ; CODE XREF: ConvertPropertyToString(UString &,tagPROPVARIANT const &,ulong,bool)+59p
UNDEF:00001B00 ; void __thiscall UString::SetFromBstr(UString *__hidden this, wchar_t *)
UNDEF:00001B00                 extrn ?SetFromBstr@UString@@QAEXPA_W@Z:near
UNDEF:00001B00                                         ; CODE XREF: ConvertPropertyToString(UString &,tagPROPVARIANT const &,ulong,bool)+35p
UNDEF:00001B04                 extrn ___security_cookie:near
UNDEF:00001B04                                         ; DATA XREF: ConvertPropertyToString(UString &,tagPROPVARIANT const &,ulong,bool)+16r
UNDEF:00001B04                                         ; ParseSid(AString &,uchar const *,uint,uint &)+17r ...
UNDEF:00001B08 ; __fastcall __security_check_cookie(x)
UNDEF:00001B08                 extrn @__security_check_cookie@4:near
UNDEF:00001B08                                         ; CODE XREF: ConvertPropertyToString(UString &,tagPROPVARIANT const &,ulong,bool)+75p
UNDEF:00001B08                                         ; ParseSid(AString &,uchar const *,uint,uint &)+301p ...
UNDEF:00001B0C ; public: class AString & __thiscall AString::operator+=(char const *)
UNDEF:00001B0C                 extrn ??YAString@@QAEAAV0@PBD@Z:near
UNDEF:00001B0C                                         ; CODE XREF: ConvertNtSecureToString(uchar const *,uint,AString &)+22p
UNDEF:00001B0C                                         ; ConvertNtSecureToString(uchar const *,uint,AString &)+3Fp ...
UNDEF:00001B10 ; void __thiscall AString::Grow_1(AString *__hidden this)
UNDEF:00001B10                 extrn ?Grow_1@AString@@AAEXXZ:near
UNDEF:00001B10                                         ; CODE XREF: AString::operator+=(char)+2Fp
UNDEF:00001B14 ; void __thiscall UString::Add_Space(UString *__hidden this)
UNDEF:00001B14                 extrn ?Add_Space@UString@@QAEXXZ:near
UNDEF:00001B14                                         ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+195p
UNDEF:00001B18 ; bool __thiscall NWindows::NFile::CReparseAttr::IsOkNamePair(NWindows::NFile::CReparseAttr *__hidden this)
UNDEF:00001B18                 extrn ?IsOkNamePair@CReparseAttr@NFile@NWindows@@QBE_NXZ:near
UNDEF:00001B18                                         ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+BAp
UNDEF:00001B1C ; public: class UString & __thiscall UString::operator+=(class UString const &)
UNDEF:00001B1C                 extrn ??YUString@@QAEAAV0@ABV0@@Z:near
UNDEF:00001B1C                                         ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+A6p
UNDEF:00001B1C                                         ; ConvertNtReparseToString(uchar const *,uint,UString &)+DAp
UNDEF:00001B20 ; struct UString __thiscall __high NWindows::NFile::CReparseAttr::GetPath()
UNDEF:00001B20                 extrn ?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ:near
UNDEF:00001B20                                         ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+8Dp
UNDEF:00001B24 ; void __thiscall UString::AddAscii(UString *__hidden this, const char *)
UNDEF:00001B24                 extrn ?AddAscii@UString@@QAEXPBD@Z:near
UNDEF:00001B24                                         ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+81p
UNDEF:00001B24                                         ; ConvertNtReparseToString(uchar const *,uint,UString &)+CEp ...
UNDEF:00001B28 ; bool __thiscall NWindows::NFile::CReparseAttr::Parse(NWindows::NFile::CReparseAttr *__hidden this, const unsigned __int8 *, unsigned int)
UNDEF:00001B28                 extrn ?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z:near
UNDEF:00001B28                                         ; CODE XREF: ConvertNtReparseToString(uchar const *,uint,UString &)+5Ap
UNDEF:00001B2C                 extrn ___CxxFrameHandler3:near
UNDEF:00001B2C                                         ; CODE XREF: __ehhandler$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z+20j
UNDEF:00001B2C                                         ; __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ+16j ...
UNDEF:00001B30 ; void __cdecl operator delete(void *)
UNDEF:00001B30                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:00001B34 ; void __thiscall UString::Grow_1(UString *__hidden this)
UNDEF:00001B34                 extrn ?Grow_1@UString@@AAEXXZ:near
UNDEF:00001B34                                         ; CODE XREF: UString::operator+=(wchar_t)+2Fp
UNDEF:00001B38 ; public: __thiscall UString::UString(void)
UNDEF:00001B38                 extrn ??0UString@@QAE@XZ:near
UNDEF:00001B38                                         ; CODE XREF: NWindows::NFile::CReparseAttr::CReparseAttr(void)+46p
UNDEF:00001B38                                         ; NWindows::NFile::CReparseAttr::CReparseAttr(void)+58p
UNDEF:00001B38
UNDEF:00001B38