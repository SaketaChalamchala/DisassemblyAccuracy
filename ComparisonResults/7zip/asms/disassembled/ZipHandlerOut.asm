.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 1906A58B68E46F84DC88196F72FBEE62
.rdata:00000000 ; Input CRC32 : C3DD9D57
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ZipHandlerOut.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG71292        db 'copy',0             ; DATA XREF: .rdata:00000038o
.rdata:00000005                 align 4
.rdata:00000008 $SG71293        db 'deflate',0          ; DATA XREF: .rdata:off_40o
.rdata:00000010 $SG71294        db 'deflate64',0        ; DATA XREF: .rdata:00000048o
.rdata:0000001A                 align 4
.rdata:0000001C $SG71295        db 'bzip2',0            ; DATA XREF: .rdata:00000050o
.rdata:00000022                 align 4
.rdata:00000024 $SG71296        db 'lzma',0             ; DATA XREF: .rdata:00000058o
.rdata:00000029                 align 4
.rdata:0000002C $SG71297        db 'ppmd',0             ; DATA XREF: .rdata:00000060o
.rdata:00000031                 align 4
.rdata:00000034 _k_SupportedMethods dd 0                ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1D8o
.rdata:00000034                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+2D1r
.rdata:00000038                 dd offset $SG71292      ; "copy"
.rdata:0000003C                 db    8
.rdata:0000003D                 db    0
.rdata:0000003E                 db    0
.rdata:0000003F                 db    0
.rdata:00000040 off_40          dd offset $SG71293      ; DATA XREF: .xdata$x:00002070o
.rdata:00000040                                         ; "deflate"
.rdata:00000044                 db    9
.rdata:00000045                 db    0
.rdata:00000046                 db    0
.rdata:00000047                 db    0
.rdata:00000048                 dd offset $SG71294      ; "deflate64"
.rdata:0000004C                 db  0Ch
.rdata:0000004D                 db    0
.rdata:0000004E                 db    0
.rdata:0000004F                 db    0
.rdata:00000050                 dd offset $SG71295      ; "bzip2"
.rdata:00000054                 db  0Eh
.rdata:00000055                 db    0
.rdata:00000056                 db    0
.rdata:00000057                 db    0
.rdata:00000058                 dd offset $SG71296      ; "lzma"
.rdata:0000005C                 dd offset off_60+2
.rdata:00000060 off_60          dd offset $SG71297      ; DATA XREF: .rdata:0000005Co
.rdata:00000060                                         ; "ppmd"
.rdata:00000064 ; wchar_t _SG71322
.rdata:00000064 $SG71322        dd offset $SG71357+5    ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1813o
.rdata:00000064                                         ; ""
.rdata:00000068 ; wchar_t _SG71357
.rdata:00000068 $SG71357:                               ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1A15o
.rdata:00000068                                         ; .rdata:$SG71322o
.rdata:00000068                 unicode 0, <em>,0
.rdata:0000006E                 align 10h
.rdata:00000070 ; wchar_t _SG71363
.rdata:00000070 $SG71363:                               ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+394o
.rdata:00000070                 unicode 0, <aes>,0
.rdata:00000078 ; wchar_t _SG71365
.rdata:00000078 $SG71365:                               ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3B6o
.rdata:00000078                 unicode 0, <128>,0
.rdata:00000080 ; wchar_t _SG71368
.rdata:00000080 $SG71368:                               ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1AAFo
.rdata:00000080                 unicode 0, <192>,0
.rdata:00000088 ; wchar_t _SG71372
.rdata:00000088 $SG71372:                               ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1AD0o
.rdata:00000088                 unicode 0, <256>,0
.rdata:00000090 ; wchar_t _SG71378
.rdata:00000090 $SG71378:                               ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1B3Bo
.rdata:00000090                 unicode 0, <zipcrypto>,0
.rdata:000000A4 ; wchar_t _SG71384
.rdata:000000A4 $SG71384:                               ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1B98o
.rdata:000000A4                 unicode 0, <mt>,0
.rdata:000000AA                 align 4
.rdata:000000AC ; char _SG71391[]
.rdata:000000AC $SG71391        db 'tc',0               ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1C27o
.rdata:000000AF                 align 10h
.rdata:000000B0 ; char _SG71397[]
.rdata:000000B0 $SG71397        db 'cl',0               ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1C81o
.rdata:000000B3                 align 4
.rdata:000000B4 ; char _SG71404[]
.rdata:000000B4 $SG71404        db 'cu',0               ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1CF3o
.rdata:000000B7                 align 4
.rdata:000000B8 ; char _SG71411[]
.rdata:000000B8 $SG71411        db 'cp',0               ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1D64o
.rdata:000000BB                 align 4
.rdata:000000BC $SG71415        db    0                 ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+6AEo
.rdata:000000BD                 db    0
.rdata:000000BE                 db    0
.rdata:000000BF                 db    0
.rdata:000000C0 ; char _SG71420[]
.rdata:000000C0 $SG71420        db 'rsfx',0             ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1E04o
.rdata:000000C5                 align 4
.rdata:000000C5 _rdata          ends
.rdata:000000C5
.text:000000C8 ; ===========================================================================
.text:000000C8
.text:000000C8 ; Segment type: Pure code
.text:000000C8 ; Segment permissions: Read/Execute
.text:000000C8 _text           segment para public 'CODE' use32
.text:000000C8                 assume cs:_text
.text:000000C8                 ;org 0C8h
.text:000000C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000000C8
.text:000000C8 ; =============== S U B R O U T I N E =======================================
.text:000000C8
.text:000000C8 ; Attributes: bp-based frame
.text:000000C8
.text:000000C8 ; __int32 __stdcall NArchive::NZip::CHandler::GetFileTimeType(NArchive::NZip::CHandler *this, unsigned int *)
.text:000000C8                 public ?GetFileTimeType@CHandler@NZip@NArchive@@UAGJPAI@Z
.text:000000C8 ?GetFileTimeType@CHandler@NZip@NArchive@@UAGJPAI@Z proc near
.text:000000C8
.text:000000C8 this            = dword ptr  8
.text:000000C8 arg_4           = dword ptr  0Ch
.text:000000C8
.text:000000C8                 push    ebp
.text:000000C9                 mov     ebp, esp
.text:000000CB                 mov     eax, [ebp+arg_4]
.text:000000CE                 mov     dword ptr [eax], 2
.text:000000D4                 xor     eax, eax
.text:000000D6                 pop     ebp
.text:000000D7                 retn    8
.text:000000D7 ?GetFileTimeType@CHandler@NZip@NArchive@@UAGJPAI@Z endp
.text:000000D7
.text:000000D7 ; ---------------------------------------------------------------------------
.text:000000DA                 db 0Eh dup(0CCh)
.text:000000E8
.text:000000E8 ; =============== S U B R O U T I N E =======================================
.text:000000E8
.text:000000E8 ; Attributes: bp-based frame
.text:000000E8
.text:000000E8 ; __int32 __cdecl NArchive::NZip::CHandler::UpdateItems(NArchive::NZip::CHandler *this, struct ISequentialOutStream *, unsigned int, struct IArchiveUpdateCallback *)
.text:000000E8                 public ?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:000000E8 ?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z proc near
.text:000000E8
.text:000000E8 var_3A0         = dword ptr -3A0h
.text:000000E8 var_39C         = dword ptr -39Ch
.text:000000E8 var_395         = byte ptr -395h
.text:000000E8 var_394         = dword ptr -394h
.text:000000E8 var_390         = dword ptr -390h
.text:000000E8 var_38C         = dword ptr -38Ch
.text:000000E8 var_388         = dword ptr -388h
.text:000000E8 var_384         = dword ptr -384h
.text:000000E8 var_380         = dword ptr -380h
.text:000000E8 var_379         = byte ptr -379h
.text:000000E8 var_378         = dword ptr -378h
.text:000000E8 var_371         = byte ptr -371h
.text:000000E8 var_370         = dword ptr -370h
.text:000000E8 var_36C         = dword ptr -36Ch
.text:000000E8 var_368         = dword ptr -368h
.text:000000E8 var_364         = dword ptr -364h
.text:000000E8 var_360         = dword ptr -360h
.text:000000E8 var_35C         = dword ptr -35Ch
.text:000000E8 var_358         = dword ptr -358h
.text:000000E8 var_354         = dword ptr -354h
.text:000000E8 var_350         = dword ptr -350h
.text:000000E8 var_34C         = dword ptr -34Ch
.text:000000E8 var_348         = dword ptr -348h
.text:000000E8 var_341         = byte ptr -341h
.text:000000E8 var_340         = dword ptr -340h
.text:000000E8 var_339         = byte ptr -339h
.text:000000E8 var_338         = dword ptr -338h
.text:000000E8 var_331         = byte ptr -331h
.text:000000E8 var_330         = dword ptr -330h
.text:000000E8 var_32C         = dword ptr -32Ch
.text:000000E8 var_328         = dword ptr -328h
.text:000000E8 var_324         = dword ptr -324h
.text:000000E8 var_320         = dword ptr -320h
.text:000000E8 var_31C         = word ptr -31Ch
.text:000000E8 var_319         = byte ptr -319h
.text:000000E8 var_318         = dword ptr -318h
.text:000000E8 var_314         = dword ptr -314h
.text:000000E8 var_310         = dword ptr -310h
.text:000000E8 var_30C         = dword ptr -30Ch
.text:000000E8 var_308         = dword ptr -308h
.text:000000E8 var_304         = dword ptr -304h
.text:000000E8 var_300         = dword ptr -300h
.text:000000E8 var_2FC         = dword ptr -2FCh
.text:000000E8 var_2F8         = dword ptr -2F8h
.text:000000E8 var_2F4         = dword ptr -2F4h
.text:000000E8 var_2F0         = dword ptr -2F0h
.text:000000E8 var_2EC         = dword ptr -2ECh
.text:000000E8 var_2E8         = dword ptr -2E8h
.text:000000E8 var_2E4         = dword ptr -2E4h
.text:000000E8 var_2DE         = byte ptr -2DEh
.text:000000E8 var_2DD         = byte ptr -2DDh
.text:000000E8 var_2DC         = dword ptr -2DCh
.text:000000E8 var_2D6         = byte ptr -2D6h
.text:000000E8 var_2D5         = byte ptr -2D5h
.text:000000E8 var_2D4         = dword ptr -2D4h
.text:000000E8 var_2D0         = dword ptr -2D0h
.text:000000E8 var_2CC         = dword ptr -2CCh
.text:000000E8 var_2C6         = byte ptr -2C6h
.text:000000E8 var_2C5         = byte ptr -2C5h
.text:000000E8 var_2C4         = dword ptr -2C4h
.text:000000E8 var_2B8         = dword ptr -2B8h
.text:000000E8 var_2B4         = dword ptr -2B4h
.text:000000E8 var_2B0         = byte ptr -2B0h
.text:000000E8 var_2A4         = byte ptr -2A4h
.text:000000E8 var_298         = dword ptr -298h
.text:000000E8 var_294         = dword ptr -294h
.text:000000E8 var_290         = dword ptr -290h
.text:000000E8 var_28C         = dword ptr -28Ch
.text:000000E8 var_288         = dword ptr -288h
.text:000000E8 var_284         = byte ptr -284h
.text:000000E8 var_278         = byte ptr -278h
.text:000000E8 var_26C         = dword ptr -26Ch
.text:000000E8 var_268         = byte ptr -268h
.text:000000E8 var_25C         = dword ptr -25Ch
.text:000000E8 var_258         = dword ptr -258h
.text:000000E8 var_254         = dword ptr -254h
.text:000000E8 var_250         = dword ptr -250h
.text:000000E8 var_24C         = dword ptr -24Ch
.text:000000E8 var_248         = dword ptr -248h
.text:000000E8 var_244         = dword ptr -244h
.text:000000E8 var_240         = dword ptr -240h
.text:000000E8 var_23C         = dword ptr -23Ch
.text:000000E8 var_238         = dword ptr -238h
.text:000000E8 var_234         = dword ptr -234h
.text:000000E8 var_230         = dword ptr -230h
.text:000000E8 var_22C         = dword ptr -22Ch
.text:000000E8 var_219         = byte ptr -219h
.text:000000E8 var_218         = dword ptr -218h
.text:000000E8 var_210         = dword ptr -210h
.text:000000E8 var_204         = byte ptr -204h
.text:000000E8 var_1F8         = byte ptr -1F8h
.text:000000E8 var_1E3         = byte ptr -1E3h
.text:000000E8 var_1E0         = byte ptr -1E0h
.text:000000E8 var_1D4         = byte ptr -1D4h
.text:000000E8 var_1D0         = byte ptr -1D0h
.text:000000E8 var_1C0         = dword ptr -1C0h
.text:000000E8 var_1BC         = dword ptr -1BCh
.text:000000E8 var_1B8         = byte ptr -1B8h
.text:000000E8 var_1A8         = byte ptr -1A8h
.text:000000E8 var_19C         = byte ptr -19Ch
.text:000000E8 var_194         = dword ptr -194h
.text:000000E8 var_18C         = word ptr -18Ch
.text:000000E8 var_184         = dword ptr -184h
.text:000000E8 var_180         = dword ptr -180h
.text:000000E8 var_178         = dword ptr -178h
.text:000000E8 var_174         = dword ptr -174h
.text:000000E8 var_169         = byte ptr -169h
.text:000000E8 var_161         = byte ptr -161h
.text:000000E8 var_160         = dword ptr -160h
.text:000000E8 var_15C         = word ptr -15Ch
.text:000000E8 var_155         = byte ptr -155h
.text:000000E8 LocalFileTime   = _FILETIME ptr -150h
.text:000000E8 var_144         = dword ptr -144h
.text:000000E8 var_140         = dword ptr -140h
.text:000000E8 var_13C         = dword ptr -13Ch
.text:000000E8 var_138         = dword ptr -138h
.text:000000E8 var_130         = word ptr -130h
.text:000000E8 var_128         = dword ptr -128h
.text:000000E8 var_11C         = dword ptr -11Ch
.text:000000E8 var_114         = word ptr -114h
.text:000000E8 var_10C         = word ptr -10Ch
.text:000000E8 var_100         = dword ptr -100h
.text:000000E8 var_F8          = word ptr -0F8h
.text:000000E8 var_F0          = dword ptr -0F0h
.text:000000E8 var_E4          = dword ptr -0E4h
.text:000000E8 var_DC          = word ptr -0DCh
.text:000000E8 var_D4          = dword ptr -0D4h
.text:000000E8 var_C4          = byte ptr -0C4h
.text:000000E8 var_B1          = byte ptr -0B1h
.text:000000E8 var_B0          = dword ptr -0B0h
.text:000000E8 var_A8          = dword ptr -0A8h
.text:000000E8 var_9C          = dword ptr -9Ch
.text:000000E8 var_90          = dword ptr -90h
.text:000000E8 var_84          = byte ptr -84h
.text:000000E8 var_83          = byte ptr -83h
.text:000000E8 var_82          = byte ptr -82h
.text:000000E8 var_81          = byte ptr -81h
.text:000000E8 var_80          = byte ptr -80h
.text:000000E8 var_7C          = dword ptr -7Ch
.text:000000E8 var_78          = dword ptr -78h
.text:000000E8 var_74          = dword ptr -74h
.text:000000E8 var_70          = _FILETIME ptr -70h
.text:000000E8 var_68          = dword ptr -68h
.text:000000E8 var_64          = byte ptr -64h
.text:000000E8 FileTime        = FILETIME ptr -58h
.text:000000E8 var_50          = byte ptr -50h
.text:000000E8 var_48          = byte ptr -48h
.text:000000E8 var_38          = dword ptr -38h
.text:000000E8 var_31          = byte ptr -31h
.text:000000E8 var_30          = dword ptr -30h
.text:000000E8 var_2C          = dword ptr -2Ch
.text:000000E8 var_25          = byte ptr -25h
.text:000000E8 var_20          = byte ptr -20h
.text:000000E8 var_10          = dword ptr -10h
.text:000000E8 var_C           = dword ptr -0Ch
.text:000000E8 var_4           = dword ptr -4
.text:000000E8 this            = dword ptr  8
.text:000000E8 arg_4           = dword ptr  0Ch
.text:000000E8 arg_8           = dword ptr  10h
.text:000000E8 arg_C           = dword ptr  14h
.text:000000E8
.text:000000E8 ; FUNCTION CHUNK AT .text:00001370 SIZE 00000032 BYTES
.text:000000E8
.text:000000E8                 push    ebp
.text:000000E9                 mov     ebp, esp
.text:000000EB                 push    0FFFFFFFFh
.text:000000ED                 push    offset __ehhandler$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:000000F2                 mov     eax, large fs:0
.text:000000F8                 push    eax
.text:000000F9                 push    ecx
.text:000000FA                 sub     esp, 390h
.text:00000100                 push    ebx
.text:00000101                 push    esi
.text:00000102                 push    edi
.text:00000103                 lea     edi, [ebp+var_3A0]
.text:00000109                 mov     ecx, 0E4h ; 'S'
.text:0000010E                 mov     eax, 0CCCCCCCCh
.text:00000113                 rep stosd
.text:00000115                 mov     eax, dword ptr ds:___security_cookie
.text:0000011A                 xor     eax, ebp
.text:0000011C                 push    eax             ; unsigned int *
.text:0000011D                 lea     eax, [ebp+var_C]
.text:00000120                 mov     large fs:0, eax
.text:00000126                 mov     [ebp+var_10], esp
.text:00000129                 mov     [ebp+var_2C4], 0
.text:00000133                 mov     [ebp+var_4], 0
.text:0000013A                 mov     ecx, [ebp+this]
.text:0000013D                 add     ecx, 1Ch        ; this
.text:00000140                 call    ?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::IsOpen(void)
.text:00000145                 mov     [ebp+var_2C5], al
.text:0000014B                 movzx   eax, [ebp+var_2C5]
.text:00000152                 test    eax, eax
.text:00000154                 jz      short loc_17C
.text:00000156                 mov     ecx, [ebp+this]
.text:00000159                 add     ecx, 1Ch        ; this
.text:0000015C                 call    ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::CanUpdate(void)
.text:00000161                 mov     [ebp+var_2C6], al
.text:00000167                 movzx   ecx, [ebp+var_2C6]
.text:0000016E                 test    ecx, ecx
.text:00000170                 jnz     short loc_17C
.text:00000172                 mov     eax, 80004001h
.text:00000177                 jmp     loc_1370
.text:0000017C ; ---------------------------------------------------------------------------
.text:0000017C
.text:0000017C loc_17C:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6Cj
.text:0000017C                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+88j
.text:0000017C                 lea     ecx, [ebp+var_20]
.text:0000017F                 call    ??0?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:00000184                 mov     [ebp+var_2CC], eax
.text:0000018A                 mov     byte ptr [ebp+var_4], 1
.text:0000018E                 mov     [ebp+var_25], 0
.text:00000192                 mov     [ebp+var_30], 0
.text:00000199                 mov     [ebp+var_2C], 0
.text:000001A0                 mov     [ebp+var_31], 0
.text:000001A4                 mov     [ebp+var_38], 0
.text:000001AB                 jmp     short loc_1B6
.text:000001AD ; ---------------------------------------------------------------------------
.text:000001AD
.text:000001AD loc_1AD:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+D90j
.text:000001AD                 mov     edx, [ebp+var_38]
.text:000001B0                 add     edx, 1
.text:000001B3                 mov     [ebp+var_38], edx
.text:000001B6
.text:000001B6 loc_1B6:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C3j
.text:000001B6                 mov     eax, [ebp+var_38]
.text:000001B9                 cmp     eax, [ebp+arg_8]
.text:000001BC                 jnb     loc_E7D
.text:000001C2                 lea     ecx, [ebp+var_84] ; this
.text:000001C8                 call    ??0CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::CUpdateItem(void)
.text:000001CD                 mov     [ebp+var_2D0], eax
.text:000001D3                 mov     byte ptr [ebp+var_4], 2
.text:000001D7                 cmp     [ebp+arg_C], 0
.text:000001DB                 jnz     short loc_20D
.text:000001DD                 mov     [ebp+var_22C], 80004005h
.text:000001E7                 mov     byte ptr [ebp+var_4], 1
.text:000001EB                 lea     ecx, [ebp+var_84] ; this
.text:000001F1                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:000001F6                 mov     byte ptr [ebp+var_4], 0
.text:000001FA                 lea     ecx, [ebp+var_20]
.text:000001FD                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:00000202                 mov     eax, [ebp+var_22C]
.text:00000208                 jmp     loc_1370
.text:0000020D ; ---------------------------------------------------------------------------
.text:0000020D
.text:0000020D loc_20D:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F3j
.text:0000020D                 mov     esi, esp
.text:0000020F                 lea     ecx, [ebp+var_A8]
.text:00000215                 push    ecx
.text:00000216                 lea     edx, [ebp+var_9C]
.text:0000021C                 push    edx
.text:0000021D                 lea     eax, [ebp+var_90]
.text:00000223                 push    eax
.text:00000224                 mov     ecx, [ebp+var_38]
.text:00000227                 push    ecx
.text:00000228                 mov     edx, [ebp+arg_C]
.text:0000022B                 push    edx
.text:0000022C                 mov     eax, [ebp+arg_C]
.text:0000022F                 mov     ecx, [eax]
.text:00000231                 mov     edx, [ecx+14h]
.text:00000234                 call    edx
.text:00000236                 cmp     esi, esp
.text:00000238                 call    __RTC_CheckEsp
.text:0000023D                 mov     [ebp+var_2D4], eax
.text:00000243                 mov     eax, [ebp+var_2D4]
.text:00000249                 mov     [ebp+var_B0], eax
.text:0000024F                 cmp     [ebp+var_B0], 0
.text:00000256                 jz      short loc_28A
.text:00000258                 mov     ecx, [ebp+var_B0]
.text:0000025E                 mov     [ebp+var_230], ecx
.text:00000264                 mov     byte ptr [ebp+var_4], 1
.text:00000268                 lea     ecx, [ebp+var_84] ; this
.text:0000026E                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:00000273                 mov     byte ptr [ebp+var_4], 0
.text:00000277                 lea     ecx, [ebp+var_20]
.text:0000027A                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:0000027F                 mov     eax, [ebp+var_230]
.text:00000285                 jmp     loc_1370
.text:0000028A ; ---------------------------------------------------------------------------
.text:0000028A
.text:0000028A loc_28A:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+16Ej
.text:0000028A                 mov     edx, [ebp+var_9C]
.text:00000290                 push    edx             ; int
.text:00000291                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:00000296                 mov     [ebp+var_2D5], al
.text:0000029C                 mov     al, [ebp+var_2D5]
.text:000002A2                 mov     [ebp+var_83], al
.text:000002A8                 mov     ecx, [ebp+var_90]
.text:000002AE                 push    ecx             ; int
.text:000002AF                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:000002B4                 mov     [ebp+var_2D6], al
.text:000002BA                 mov     dl, [ebp+var_2D6]
.text:000002C0                 mov     [ebp+var_84], dl
.text:000002C6                 mov     eax, [ebp+var_A8]
.text:000002CC                 mov     [ebp+var_7C], eax
.text:000002CF                 mov     ecx, [ebp+var_38]
.text:000002D2                 mov     [ebp+var_78], ecx
.text:000002D5                 xor     edx, edx
.text:000002D7                 cmp     [ebp+var_A8], 0FFFFFFFFh
.text:000002DE                 setnz   dl
.text:000002E1                 mov     [ebp+var_B1], dl
.text:000002E7                 movzx   eax, [ebp+var_B1]
.text:000002EE                 test    eax, eax
.text:000002F0                 jz      short loc_333
.text:000002F2                 cmp     [ebp+var_90], 0
.text:000002F9                 jz      short loc_333
.text:000002FB                 mov     ecx, [ebp+var_A8]
.text:00000301                 push    ecx
.text:00000302                 mov     ecx, [ebp+this]
.text:00000305                 add     ecx, 0Ch
.text:00000308                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:0000030D                 mov     [ebp+var_2DC], eax
.text:00000313                 mov     ecx, [ebp+var_2DC] ; this
.text:00000319                 call    ?IsAesEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsAesEncrypted(void)
.text:0000031E                 mov     [ebp+var_2DD], al
.text:00000324                 movzx   edx, [ebp+var_2DD]
.text:0000032B                 test    edx, edx
.text:0000032D                 jz      short loc_333
.text:0000032F                 mov     [ebp+var_25], 1
.text:00000333
.text:00000333 loc_333:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+208j
.text:00000333                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+211j ...
.text:00000333                 mov     eax, [ebp+var_9C]
.text:00000339                 push    eax             ; int
.text:0000033A                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:0000033F                 mov     [ebp+var_2DE], al
.text:00000345                 movzx   ecx, [ebp+var_2DE]
.text:0000034C                 test    ecx, ecx
.text:0000034E                 jz      loc_CF2
.text:00000354                 lea     ecx, [ebp+var_C4]
.text:0000035A                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000035F                 mov     [ebp+var_2E4], eax
.text:00000365                 mov     byte ptr [ebp+var_4], 3
.text:00000369                 lea     ecx, [ebp+var_DC] ; this
.text:0000036F                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000374                 mov     [ebp+var_2E8], eax
.text:0000037A                 mov     byte ptr [ebp+var_4], 4
.text:0000037E                 mov     esi, esp
.text:00000380                 lea     edx, [ebp+var_DC]
.text:00000386                 push    edx
.text:00000387                 push    9
.text:00000389                 mov     eax, [ebp+var_38]
.text:0000038C                 push    eax
.text:0000038D                 mov     ecx, [ebp+arg_C]
.text:00000390                 push    ecx
.text:00000391                 mov     edx, [ebp+arg_C]
.text:00000394                 mov     eax, [edx]
.text:00000396                 mov     ecx, [eax+18h]
.text:00000399                 call    ecx
.text:0000039B                 cmp     esi, esp
.text:0000039D                 call    __RTC_CheckEsp
.text:000003A2                 mov     [ebp+var_2EC], eax
.text:000003A8                 mov     edx, [ebp+var_2EC]
.text:000003AE                 mov     [ebp+var_E4], edx
.text:000003B4                 cmp     [ebp+var_E4], 0
.text:000003BB                 jz      short loc_40D
.text:000003BD                 mov     eax, [ebp+var_E4]
.text:000003C3                 mov     [ebp+var_234], eax
.text:000003C9                 mov     byte ptr [ebp+var_4], 3
.text:000003CD                 lea     ecx, [ebp+var_DC] ; this
.text:000003D3                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000003D8                 mov     byte ptr [ebp+var_4], 2
.text:000003DC                 lea     ecx, [ebp+var_C4] ; this
.text:000003E2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000003E7                 mov     byte ptr [ebp+var_4], 1
.text:000003EB                 lea     ecx, [ebp+var_84] ; this
.text:000003F1                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:000003F6                 mov     byte ptr [ebp+var_4], 0
.text:000003FA                 lea     ecx, [ebp+var_20]
.text:000003FD                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:00000402                 mov     eax, [ebp+var_234]
.text:00000408                 jmp     loc_1370
.text:0000040D ; ---------------------------------------------------------------------------
.text:0000040D
.text:0000040D loc_40D:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2D3j
.text:0000040D                 movzx   ecx, [ebp+var_DC]
.text:00000414                 test    ecx, ecx
.text:00000416                 jnz     short loc_421
.text:00000418                 mov     [ebp+var_74], 0
.text:0000041F                 jmp     short loc_486
.text:00000421 ; ---------------------------------------------------------------------------
.text:00000421
.text:00000421 loc_421:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+32Ej
.text:00000421                 movzx   edx, [ebp+var_DC]
.text:00000428                 cmp     edx, 13h
.text:0000042B                 jz      short loc_47D
.text:0000042D                 mov     [ebp+var_238], 80070057h
.text:00000437                 mov     byte ptr [ebp+var_4], 3
.text:0000043B                 lea     ecx, [ebp+var_DC] ; this
.text:00000441                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000446                 mov     byte ptr [ebp+var_4], 2
.text:0000044A                 lea     ecx, [ebp+var_C4] ; this
.text:00000450                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000455                 mov     byte ptr [ebp+var_4], 1
.text:00000459                 lea     ecx, [ebp+var_84] ; this
.text:0000045F                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:00000464                 mov     byte ptr [ebp+var_4], 0
.text:00000468                 lea     ecx, [ebp+var_20]
.text:0000046B                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:00000470                 mov     eax, [ebp+var_238]
.text:00000476                 jmp     loc_1370
.text:0000047B ; ---------------------------------------------------------------------------
.text:0000047B                 jmp     short loc_486
.text:0000047D ; ---------------------------------------------------------------------------
.text:0000047D
.text:0000047D loc_47D:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+343j
.text:0000047D                 mov     eax, [ebp+var_D4]
.text:00000483                 mov     [ebp+var_74], eax
.text:00000486
.text:00000486 loc_486:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+337j
.text:00000486                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+393j
.text:00000486                 mov     byte ptr [ebp+var_4], 3
.text:0000048A                 lea     ecx, [ebp+var_DC] ; this
.text:00000490                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000495                 lea     ecx, [ebp+var_F8] ; this
.text:0000049B                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000004A0                 mov     [ebp+var_2F0], eax
.text:000004A6                 mov     byte ptr [ebp+var_4], 5
.text:000004AA                 mov     esi, esp
.text:000004AC                 lea     ecx, [ebp+var_F8]
.text:000004B2                 push    ecx
.text:000004B3                 push    3
.text:000004B5                 mov     edx, [ebp+var_38]
.text:000004B8                 push    edx
.text:000004B9                 mov     eax, [ebp+arg_C]
.text:000004BC                 push    eax
.text:000004BD                 mov     ecx, [ebp+arg_C]
.text:000004C0                 mov     edx, [ecx]
.text:000004C2                 mov     eax, [edx+18h]
.text:000004C5                 call    eax
.text:000004C7                 cmp     esi, esp
.text:000004C9                 call    __RTC_CheckEsp
.text:000004CE                 mov     [ebp+var_2F4], eax
.text:000004D4                 mov     ecx, [ebp+var_2F4]
.text:000004DA                 mov     [ebp+var_100], ecx
.text:000004E0                 cmp     [ebp+var_100], 0
.text:000004E7                 jz      short loc_539
.text:000004E9                 mov     edx, [ebp+var_100]
.text:000004EF                 mov     [ebp+var_23C], edx
.text:000004F5                 mov     byte ptr [ebp+var_4], 3
.text:000004F9                 lea     ecx, [ebp+var_F8] ; this
.text:000004FF                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000504                 mov     byte ptr [ebp+var_4], 2
.text:00000508                 lea     ecx, [ebp+var_C4] ; this
.text:0000050E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000513                 mov     byte ptr [ebp+var_4], 1
.text:00000517                 lea     ecx, [ebp+var_84] ; this
.text:0000051D                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:00000522                 mov     byte ptr [ebp+var_4], 0
.text:00000526                 lea     ecx, [ebp+var_20]
.text:00000529                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:0000052E                 mov     eax, [ebp+var_23C]
.text:00000534                 jmp     loc_1370
.text:00000539 ; ---------------------------------------------------------------------------
.text:00000539
.text:00000539 loc_539:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3FFj
.text:00000539                 movzx   eax, [ebp+var_F8]
.text:00000540                 test    eax, eax
.text:00000542                 jnz     short loc_551
.text:00000544                 lea     ecx, [ebp+var_C4] ; this
.text:0000054A                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:0000054F                 jmp     short loc_5BF
.text:00000551 ; ---------------------------------------------------------------------------
.text:00000551
.text:00000551 loc_551:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+45Aj
.text:00000551                 movzx   ecx, [ebp+var_F8]
.text:00000558                 cmp     ecx, 8
.text:0000055B                 jz      short loc_5AD
.text:0000055D                 mov     [ebp+var_240], 80070057h
.text:00000567                 mov     byte ptr [ebp+var_4], 3
.text:0000056B                 lea     ecx, [ebp+var_F8] ; this
.text:00000571                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000576                 mov     byte ptr [ebp+var_4], 2
.text:0000057A                 lea     ecx, [ebp+var_C4] ; this
.text:00000580                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000585                 mov     byte ptr [ebp+var_4], 1
.text:00000589                 lea     ecx, [ebp+var_84] ; this
.text:0000058F                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:00000594                 mov     byte ptr [ebp+var_4], 0
.text:00000598                 lea     ecx, [ebp+var_20]
.text:0000059B                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:000005A0                 mov     eax, [ebp+var_240]
.text:000005A6                 jmp     loc_1370
.text:000005AB ; ---------------------------------------------------------------------------
.text:000005AB                 jmp     short loc_5BF
.text:000005AD ; ---------------------------------------------------------------------------
.text:000005AD
.text:000005AD loc_5AD:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+473j
.text:000005AD                 mov     edx, [ebp+var_F0]
.text:000005B3                 push    edx
.text:000005B4                 lea     ecx, [ebp+var_C4]
.text:000005BA                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:000005BF
.text:000005BF loc_5BF:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+467j
.text:000005BF                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4C3j
.text:000005BF                 mov     byte ptr [ebp+var_4], 3
.text:000005C3                 lea     ecx, [ebp+var_F8] ; this
.text:000005C9                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000005CE                 lea     ecx, [ebp+var_114] ; this
.text:000005D4                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000005D9                 mov     [ebp+var_2F8], eax
.text:000005DF                 mov     byte ptr [ebp+var_4], 6
.text:000005E3                 mov     esi, esp
.text:000005E5                 lea     eax, [ebp+var_114]
.text:000005EB                 push    eax
.text:000005EC                 push    6
.text:000005EE                 mov     ecx, [ebp+var_38]
.text:000005F1                 push    ecx
.text:000005F2                 mov     edx, [ebp+arg_C]
.text:000005F5                 push    edx
.text:000005F6                 mov     eax, [ebp+arg_C]
.text:000005F9                 mov     ecx, [eax]
.text:000005FB                 mov     edx, [ecx+18h]
.text:000005FE                 call    edx
.text:00000600                 cmp     esi, esp
.text:00000602                 call    __RTC_CheckEsp
.text:00000607                 mov     [ebp+var_2FC], eax
.text:0000060D                 mov     eax, [ebp+var_2FC]
.text:00000613                 mov     [ebp+var_11C], eax
.text:00000619                 cmp     [ebp+var_11C], 0
.text:00000620                 jz      short loc_672
.text:00000622                 mov     ecx, [ebp+var_11C]
.text:00000628                 mov     [ebp+var_244], ecx
.text:0000062E                 mov     byte ptr [ebp+var_4], 3
.text:00000632                 lea     ecx, [ebp+var_114] ; this
.text:00000638                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000063D                 mov     byte ptr [ebp+var_4], 2
.text:00000641                 lea     ecx, [ebp+var_C4] ; this
.text:00000647                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000064C                 mov     byte ptr [ebp+var_4], 1
.text:00000650                 lea     ecx, [ebp+var_84] ; this
.text:00000656                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:0000065B                 mov     byte ptr [ebp+var_4], 0
.text:0000065F                 lea     ecx, [ebp+var_20]
.text:00000662                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:00000667                 mov     eax, [ebp+var_244]
.text:0000066D                 jmp     loc_1370
.text:00000672 ; ---------------------------------------------------------------------------
.text:00000672
.text:00000672 loc_672:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+538j
.text:00000672                 movzx   edx, [ebp+var_114]
.text:00000679                 test    edx, edx
.text:0000067B                 jnz     short loc_686
.text:0000067D                 mov     [ebp+var_82], 0
.text:00000684                 jmp     short loc_6F5
.text:00000686 ; ---------------------------------------------------------------------------
.text:00000686
.text:00000686 loc_686:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+593j
.text:00000686                 movzx   eax, [ebp+var_114]
.text:0000068D                 cmp     eax, 0Bh
.text:00000690                 jz      short loc_6E2
.text:00000692                 mov     [ebp+var_248], 80070057h
.text:0000069C                 mov     byte ptr [ebp+var_4], 3
.text:000006A0                 lea     ecx, [ebp+var_114] ; this
.text:000006A6                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000006AB                 mov     byte ptr [ebp+var_4], 2
.text:000006AF                 lea     ecx, [ebp+var_C4] ; this
.text:000006B5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000006BA                 mov     byte ptr [ebp+var_4], 1
.text:000006BE                 lea     ecx, [ebp+var_84] ; this
.text:000006C4                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:000006C9                 mov     byte ptr [ebp+var_4], 0
.text:000006CD                 lea     ecx, [ebp+var_20]
.text:000006D0                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:000006D5                 mov     eax, [ebp+var_248]
.text:000006DB                 jmp     loc_1370
.text:000006E0 ; ---------------------------------------------------------------------------
.text:000006E0                 jmp     short loc_6F5
.text:000006E2 ; ---------------------------------------------------------------------------
.text:000006E2
.text:000006E2 loc_6E2:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5A8j
.text:000006E2                 movsx   ecx, [ebp+var_10C]
.text:000006E9                 neg     ecx
.text:000006EB                 sbb     ecx, ecx
.text:000006ED                 neg     ecx
.text:000006EF                 mov     [ebp+var_82], cl
.text:000006F5
.text:000006F5 loc_6F5:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+59Cj
.text:000006F5                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5F8j
.text:000006F5                 mov     byte ptr [ebp+var_4], 3
.text:000006F9                 lea     ecx, [ebp+var_114] ; this
.text:000006FF                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000704                 lea     ecx, [ebp+var_130] ; this
.text:0000070A                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000070F                 mov     [ebp+var_300], eax
.text:00000715                 mov     byte ptr [ebp+var_4], 7
.text:00000719                 mov     esi, esp
.text:0000071B                 lea     edx, [ebp+var_130]
.text:00000721                 push    edx
.text:00000722                 push    28h ; '('
.text:00000724                 mov     eax, [ebp+var_38]
.text:00000727                 push    eax
.text:00000728                 mov     ecx, [ebp+arg_C]
.text:0000072B                 push    ecx
.text:0000072C                 mov     edx, [ebp+arg_C]
.text:0000072F                 mov     eax, [edx]
.text:00000731                 mov     ecx, [eax+18h]
.text:00000734                 call    ecx
.text:00000736                 cmp     esi, esp
.text:00000738                 call    __RTC_CheckEsp
.text:0000073D                 mov     [ebp+var_304], eax
.text:00000743                 mov     edx, [ebp+var_304]
.text:00000749                 mov     [ebp+var_138], edx
.text:0000074F                 cmp     [ebp+var_138], 0
.text:00000756                 jz      short loc_7A8
.text:00000758                 mov     eax, [ebp+var_138]
.text:0000075E                 mov     [ebp+var_24C], eax
.text:00000764                 mov     byte ptr [ebp+var_4], 3
.text:00000768                 lea     ecx, [ebp+var_130] ; this
.text:0000076E                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000773                 mov     byte ptr [ebp+var_4], 2
.text:00000777                 lea     ecx, [ebp+var_C4] ; this
.text:0000077D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000782                 mov     byte ptr [ebp+var_4], 1
.text:00000786                 lea     ecx, [ebp+var_84] ; this
.text:0000078C                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:00000791                 mov     byte ptr [ebp+var_4], 0
.text:00000795                 lea     ecx, [ebp+var_20]
.text:00000798                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:0000079D                 mov     eax, [ebp+var_24C]
.text:000007A3                 jmp     loc_1370
.text:000007A8 ; ---------------------------------------------------------------------------
.text:000007A8
.text:000007A8 loc_7A8:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+66Ej
.text:000007A8                 movzx   ecx, [ebp+var_130]
.text:000007AF                 cmp     ecx, 13h
.text:000007B2                 jnz     short loc_7C8
.text:000007B4                 xor     edx, edx
.text:000007B6                 cmp     [ebp+var_128], 0
.text:000007BD                 setz    dl
.text:000007C0                 mov     [ebp+var_81], dl
.text:000007C6                 jmp     short loc_7D7
.text:000007C8 ; ---------------------------------------------------------------------------
.text:000007C8
.text:000007C8 loc_7C8:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6CAj
.text:000007C8                 mov     eax, [ebp+this]
.text:000007CB                 mov     cl, [eax+0C1h]
.text:000007D1                 mov     [ebp+var_81], cl
.text:000007D7
.text:000007D7 loc_7D7:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6DEj
.text:000007D7                 mov     byte ptr [ebp+var_4], 3
.text:000007DB                 lea     ecx, [ebp+var_130] ; this
.text:000007E1                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000007E6                 lea     edx, [ebp+FileTime]
.text:000007E9                 push    edx
.text:000007EA                 push    0Ch
.text:000007EC                 mov     eax, [ebp+var_38]
.text:000007EF                 push    eax
.text:000007F0                 mov     ecx, [ebp+arg_C]
.text:000007F3                 push    ecx
.text:000007F4                 call    ?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z ; NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)
.text:000007F9                 mov     [ebp+var_308], eax
.text:000007FF                 mov     edx, [ebp+var_308]
.text:00000805                 mov     [ebp+var_13C], edx
.text:0000080B                 cmp     [ebp+var_13C], 0
.text:00000812                 jz      short loc_855
.text:00000814                 mov     eax, [ebp+var_13C]
.text:0000081A                 mov     [ebp+var_250], eax
.text:00000820                 mov     byte ptr [ebp+var_4], 2
.text:00000824                 lea     ecx, [ebp+var_C4] ; this
.text:0000082A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000082F                 mov     byte ptr [ebp+var_4], 1
.text:00000833                 lea     ecx, [ebp+var_84] ; this
.text:00000839                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:0000083E                 mov     byte ptr [ebp+var_4], 0
.text:00000842                 lea     ecx, [ebp+var_20]
.text:00000845                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:0000084A                 mov     eax, [ebp+var_250]
.text:00000850                 jmp     loc_1370
.text:00000855 ; ---------------------------------------------------------------------------
.text:00000855
.text:00000855 loc_855:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+72Aj
.text:00000855                 lea     ecx, [ebp+var_50]
.text:00000858                 push    ecx
.text:00000859                 push    0Bh
.text:0000085B                 mov     edx, [ebp+var_38]
.text:0000085E                 push    edx
.text:0000085F                 mov     eax, [ebp+arg_C]
.text:00000862                 push    eax
.text:00000863                 call    ?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z ; NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)
.text:00000868                 mov     [ebp+var_30C], eax
.text:0000086E                 mov     ecx, [ebp+var_30C]
.text:00000874                 mov     [ebp+var_140], ecx
.text:0000087A                 cmp     [ebp+var_140], 0
.text:00000881                 jz      short loc_8C4
.text:00000883                 mov     edx, [ebp+var_140]
.text:00000889                 mov     [ebp+var_254], edx
.text:0000088F                 mov     byte ptr [ebp+var_4], 2
.text:00000893                 lea     ecx, [ebp+var_C4] ; this
.text:00000899                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000089E                 mov     byte ptr [ebp+var_4], 1
.text:000008A2                 lea     ecx, [ebp+var_84] ; this
.text:000008A8                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:000008AD                 mov     byte ptr [ebp+var_4], 0
.text:000008B1                 lea     ecx, [ebp+var_20]
.text:000008B4                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:000008B9                 mov     eax, [ebp+var_254]
.text:000008BF                 jmp     loc_1370
.text:000008C4 ; ---------------------------------------------------------------------------
.text:000008C4
.text:000008C4 loc_8C4:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+799j
.text:000008C4                 lea     eax, [ebp+var_48]
.text:000008C7                 push    eax
.text:000008C8                 push    0Ah
.text:000008CA                 mov     ecx, [ebp+var_38]
.text:000008CD                 push    ecx
.text:000008CE                 mov     edx, [ebp+arg_C]
.text:000008D1                 push    edx
.text:000008D2                 call    ?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z ; NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)
.text:000008D7                 mov     [ebp+var_310], eax
.text:000008DD                 mov     eax, [ebp+var_310]
.text:000008E3                 mov     [ebp+var_144], eax
.text:000008E9                 cmp     [ebp+var_144], 0
.text:000008F0                 jz      short loc_933
.text:000008F2                 mov     ecx, [ebp+var_144]
.text:000008F8                 mov     [ebp+var_258], ecx
.text:000008FE                 mov     byte ptr [ebp+var_4], 2
.text:00000902                 lea     ecx, [ebp+var_C4] ; this
.text:00000908                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000090D                 mov     byte ptr [ebp+var_4], 1
.text:00000911                 lea     ecx, [ebp+var_84] ; this
.text:00000917                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:0000091C                 mov     byte ptr [ebp+var_4], 0
.text:00000920                 lea     ecx, [ebp+var_20]
.text:00000923                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:00000928                 mov     eax, [ebp+var_258]
.text:0000092E                 jmp     loc_1370
.text:00000933 ; ---------------------------------------------------------------------------
.text:00000933
.text:00000933 loc_933:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+808j
.text:00000933                 mov     [ebp+LocalFileTime.dwLowDateTime], 0
.text:0000093D                 mov     [ebp+LocalFileTime.dwHighDateTime], 0
.text:00000947                 cmp     [ebp+FileTime.dwHighDateTime], 0
.text:0000094B                 jnz     short loc_953
.text:0000094D                 cmp     [ebp+FileTime.dwLowDateTime], 0
.text:00000951                 jz      short loc_9B0
.text:00000953
.text:00000953 loc_953:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+863j
.text:00000953                 mov     esi, esp
.text:00000955                 lea     edx, [ebp+LocalFileTime]
.text:0000095B                 push    edx             ; lpLocalFileTime
.text:0000095C                 lea     eax, [ebp+FileTime]
.text:0000095F                 push    eax             ; lpFileTime
.text:00000960                 call    dword ptr ds:__imp__FileTimeToLocalFileTime@8 ; FileTimeToLocalFileTime(x,x)
.text:00000966                 cmp     esi, esp
.text:00000968                 call    __RTC_CheckEsp
.text:0000096D                 test    eax, eax
.text:0000096F                 jnz     short loc_9B0
.text:00000971                 mov     [ebp+var_25C], 80070057h
.text:0000097B                 mov     byte ptr [ebp+var_4], 2
.text:0000097F                 lea     ecx, [ebp+var_C4] ; this
.text:00000985                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000098A                 mov     byte ptr [ebp+var_4], 1
.text:0000098E                 lea     ecx, [ebp+var_84] ; this
.text:00000994                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:00000999                 mov     byte ptr [ebp+var_4], 0
.text:0000099D                 lea     ecx, [ebp+var_20]
.text:000009A0                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:000009A5                 mov     eax, [ebp+var_25C]
.text:000009AB                 jmp     loc_1370
.text:000009B0 ; ---------------------------------------------------------------------------
.text:000009B0
.text:000009B0 loc_9B0:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+869j
.text:000009B0                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+887j
.text:000009B0                 lea     ecx, [ebp+var_70]
.text:000009B3                 push    ecx             ; struct _FILETIME *
.text:000009B4                 lea     edx, [ebp+LocalFileTime]
.text:000009BA                 push    edx             ; this
.text:000009BB                 call    ?FileTimeToDosTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z ; NWindows::NTime::FileTimeToDosTime(_FILETIME const &,uint &)
.text:000009C0                 lea     eax, [ebp+var_C4]
.text:000009C6                 push    eax
.text:000009C7                 lea     ecx, [ebp+var_268]
.text:000009CD                 push    ecx
.text:000009CE                 call    ?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ; NArchive::NItemName::MakeLegalName(UString const &)
.text:000009D3                 mov     [ebp+var_314], eax
.text:000009D9                 mov     edx, [ebp+var_314]
.text:000009DF                 mov     [ebp+var_318], edx
.text:000009E5                 mov     byte ptr [ebp+var_4], 8
.text:000009E9                 mov     eax, [ebp+var_318]
.text:000009EF                 push    eax
.text:000009F0                 lea     ecx, [ebp+var_C4]
.text:000009F6                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000009FB                 mov     byte ptr [ebp+var_4], 3
.text:000009FF                 lea     ecx, [ebp+var_268] ; this
.text:00000A05                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000A0A                 mov     cl, [ebp+var_82]
.text:00000A10                 mov     [ebp+var_155], cl
.text:00000A16                 mov     edx, 2Fh ; '/'
.text:00000A1B                 mov     [ebp+var_15C], dx
.text:00000A22                 lea     ecx, [ebp+var_C4] ; this
.text:00000A28                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000A2D                 mov     [ebp+var_319], al
.text:00000A33                 movzx   eax, [ebp+var_319]
.text:00000A3A                 test    eax, eax
.text:00000A3C                 jnz     short loc_AAD
.text:00000A3E                 lea     ecx, [ebp+var_C4] ; this
.text:00000A44                 call    ?Back@UString@@QBE_WXZ ; UString::Back(void)
.text:00000A49                 mov     [ebp+var_31C], ax
.text:00000A50                 movzx   ecx, [ebp+var_31C]
.text:00000A57                 cmp     ecx, 2Fh ; '/'
.text:00000A5A                 jnz     short loc_AAD
.text:00000A5C                 movzx   edx, [ebp+var_82]
.text:00000A63                 test    edx, edx
.text:00000A65                 jnz     short loc_AA6
.text:00000A67                 mov     [ebp+var_26C], 80070057h
.text:00000A71                 mov     byte ptr [ebp+var_4], 2
.text:00000A75                 lea     ecx, [ebp+var_C4] ; this
.text:00000A7B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000A80                 mov     byte ptr [ebp+var_4], 1
.text:00000A84                 lea     ecx, [ebp+var_84] ; this
.text:00000A8A                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:00000A8F                 mov     byte ptr [ebp+var_4], 0
.text:00000A93                 lea     ecx, [ebp+var_20]
.text:00000A96                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:00000A9B                 mov     eax, [ebp+var_26C]
.text:00000AA1                 jmp     loc_1370
.text:00000AA6 ; ---------------------------------------------------------------------------
.text:00000AA6
.text:00000AA6 loc_AA6:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+97Dj
.text:00000AA6                 mov     [ebp+var_155], 0
.text:00000AAD
.text:00000AAD loc_AAD:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+954j
.text:00000AAD                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+972j
.text:00000AAD                 movzx   eax, [ebp+var_155]
.text:00000AB4                 test    eax, eax
.text:00000AB6                 jz      short loc_AC5
.text:00000AB8                 push    2Fh ; '/'
.text:00000ABA                 lea     ecx, [ebp+var_C4]
.text:00000AC0                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:00000AC5
.text:00000AC5 loc_AC5:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+9CEj
.text:00000AC5                 mov     ecx, [ebp+this]
.text:00000AC8                 movzx   edx, byte ptr [ecx+0C5h]
.text:00000ACF                 test    edx, edx
.text:00000AD1                 jz      short loc_AE4
.text:00000AD3                 mov     eax, [ebp+this]
.text:00000AD6                 mov     ecx, [eax+0C8h]
.text:00000ADC                 mov     [ebp+var_320], ecx
.text:00000AE2                 jmp     short loc_AEE
.text:00000AE4 ; ---------------------------------------------------------------------------
.text:00000AE4
.text:00000AE4 loc_AE4:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+9E9j
.text:00000AE4                 mov     [ebp+var_320], 1
.text:00000AEE
.text:00000AEE loc_AEE:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+9FAj
.text:00000AEE                 mov     edx, [ebp+var_320]
.text:00000AF4                 mov     [ebp+var_160], edx
.text:00000AFA                 mov     [ebp+var_161], 1
.text:00000B01                 mov     eax, [ebp+this]
.text:00000B04                 movzx   ecx, byte ptr [eax+0C3h]
.text:00000B0B                 test    ecx, ecx
.text:00000B0D                 jnz     short loc_B21
.text:00000B0F                 mov     edx, [ebp+this]
.text:00000B12                 movzx   eax, byte ptr [edx+0C4h]
.text:00000B19                 test    eax, eax
.text:00000B1B                 jnz     loc_C47
.text:00000B21
.text:00000B21 loc_B21:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A25j
.text:00000B21                 cmp     [ebp+var_160], 0FDE9h
.text:00000B2B                 jz      loc_C47
.text:00000B31                 lea     ecx, [ebp+var_169]
.text:00000B37                 push    ecx
.text:00000B38                 push    5Fh ; '_'
.text:00000B3A                 mov     edx, [ebp+var_160]
.text:00000B40                 push    edx
.text:00000B41                 lea     eax, [ebp+var_C4]
.text:00000B47                 push    eax
.text:00000B48                 lea     ecx, [ebp+var_278]
.text:00000B4E                 push    ecx
.text:00000B4F                 call    ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z ; UnicodeStringToMultiByte(UString const &,uint,char,bool &)
.text:00000B54                 mov     [ebp+var_324], eax
.text:00000B5A                 mov     edx, [ebp+var_324]
.text:00000B60                 mov     [ebp+var_328], edx
.text:00000B66                 mov     byte ptr [ebp+var_4], 9
.text:00000B6A                 mov     eax, [ebp+var_328]
.text:00000B70                 push    eax
.text:00000B71                 lea     ecx, [ebp+var_64]
.text:00000B74                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00000B79                 mov     byte ptr [ebp+var_4], 3
.text:00000B7D                 lea     ecx, [ebp+var_278] ; this
.text:00000B83                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000B88                 mov     ecx, [ebp+this]
.text:00000B8B                 movzx   edx, byte ptr [ecx+0C3h]
.text:00000B92                 test    edx, edx
.text:00000B94                 jnz     short loc_C0D
.text:00000B96                 movzx   eax, [ebp+var_169]
.text:00000B9D                 test    eax, eax
.text:00000B9F                 jnz     short loc_C01
.text:00000BA1                 mov     ecx, [ebp+var_160]
.text:00000BA7                 push    ecx
.text:00000BA8                 lea     edx, [ebp+var_64]
.text:00000BAB                 push    edx
.text:00000BAC                 lea     eax, [ebp+var_284]
.text:00000BB2                 push    eax
.text:00000BB3                 call    ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString(AString const &,uint)
.text:00000BB8                 mov     [ebp+var_32C], eax
.text:00000BBE                 mov     ecx, [ebp+var_32C]
.text:00000BC4                 mov     [ebp+var_330], ecx
.text:00000BCA                 mov     byte ptr [ebp+var_4], 0Ah
.text:00000BCE                 mov     edx, [ebp+var_2C4]
.text:00000BD4                 or      edx, 1
.text:00000BD7                 mov     [ebp+var_2C4], edx
.text:00000BDD                 lea     eax, [ebp+var_C4]
.text:00000BE3                 push    eax             ; UString *
.text:00000BE4                 mov     ecx, [ebp+var_330]
.text:00000BEA                 push    ecx             ; UString *
.text:00000BEB                 call    ??9@YG_NABVUString@@0@Z ; operator!=(UString const &,UString const &)
.text:00000BF0                 mov     [ebp+var_331], al
.text:00000BF6                 movzx   edx, [ebp+var_331]
.text:00000BFD                 test    edx, edx
.text:00000BFF                 jz      short loc_C0D
.text:00000C01
.text:00000C01 loc_C01:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+AB7j
.text:00000C01                 mov     [ebp+var_338], 1
.text:00000C0B                 jmp     short loc_C17
.text:00000C0D ; ---------------------------------------------------------------------------
.text:00000C0D
.text:00000C0D loc_C0D:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+AACj
.text:00000C0D                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B17j
.text:00000C0D                 mov     [ebp+var_338], 0
.text:00000C17
.text:00000C17 loc_C17:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B23j
.text:00000C17                 mov     al, byte ptr [ebp+var_338]
.text:00000C1D                 mov     [ebp+var_161], al
.text:00000C23                 mov     [ebp+var_4], 3
.text:00000C2A                 mov     ecx, [ebp+var_2C4]
.text:00000C30                 and     ecx, 1
.text:00000C33                 jz      short loc_C47
.text:00000C35                 and     [ebp+var_2C4], 0FFFFFFFEh
.text:00000C3C                 lea     ecx, [ebp+var_284] ; this
.text:00000C42                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000C47
.text:00000C47 loc_C47:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A33j
.text:00000C47                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A43j ...
.text:00000C47                 movzx   edx, [ebp+var_161]
.text:00000C4E                 test    edx, edx
.text:00000C50                 jz      short loc_C84
.text:00000C52                 lea     ecx, [ebp+var_C4] ; this
.text:00000C58                 call    ?IsAscii@UString@@QBE_NXZ ; UString::IsAscii(void)
.text:00000C5D                 mov     [ebp+var_339], al
.text:00000C63                 movzx   eax, [ebp+var_339]
.text:00000C6A                 neg     eax
.text:00000C6C                 sbb     eax, eax
.text:00000C6E                 add     eax, 1
.text:00000C71                 mov     [ebp+var_80], al
.text:00000C74                 lea     ecx, [ebp+var_64]
.text:00000C77                 push    ecx             ; struct AString *
.text:00000C78                 lea     edx, [ebp+var_C4]
.text:00000C7E                 push    edx             ; struct UString *
.text:00000C7F                 call    ?ConvertUnicodeToUTF8@@YGXABVUString@@AAVAString@@@Z ; ConvertUnicodeToUTF8(UString const &,AString &)
.text:00000C84
.text:00000C84 loc_C84:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B68j
.text:00000C84                 lea     ecx, [ebp+var_64] ; this
.text:00000C87                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000C8C                 mov     [ebp+var_340], eax
.text:00000C92                 cmp     [ebp+var_340], 10000h
.text:00000C9C                 jb      short loc_CDD
.text:00000C9E                 mov     [ebp+var_288], 80070057h
.text:00000CA8                 mov     byte ptr [ebp+var_4], 2
.text:00000CAC                 lea     ecx, [ebp+var_C4] ; this
.text:00000CB2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000CB7                 mov     byte ptr [ebp+var_4], 1
.text:00000CBB                 lea     ecx, [ebp+var_84] ; this
.text:00000CC1                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:00000CC6                 mov     byte ptr [ebp+var_4], 0
.text:00000CCA                 lea     ecx, [ebp+var_20]
.text:00000CCD                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:00000CD2                 mov     eax, [ebp+var_288]
.text:00000CD8                 jmp     loc_1370
.text:00000CDD ; ---------------------------------------------------------------------------
.text:00000CDD
.text:00000CDD loc_CDD:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+BB4j
.text:00000CDD                 mov     eax, [ebp+var_38]
.text:00000CE0                 mov     [ebp+var_78], eax
.text:00000CE3                 mov     byte ptr [ebp+var_4], 2
.text:00000CE7                 lea     ecx, [ebp+var_C4] ; this
.text:00000CED                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000CF2
.text:00000CF2 loc_CF2:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+266j
.text:00000CF2                 mov     ecx, [ebp+var_90]
.text:00000CF8                 push    ecx             ; int
.text:00000CF9                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:00000CFE                 mov     [ebp+var_341], al
.text:00000D04                 movzx   edx, [ebp+var_341]
.text:00000D0B                 test    edx, edx
.text:00000D0D                 jz      loc_E5A
.text:00000D13                 lea     ecx, [ebp+var_18C] ; this
.text:00000D19                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000D1E                 mov     [ebp+var_348], eax
.text:00000D24                 mov     byte ptr [ebp+var_4], 0Bh
.text:00000D28                 mov     esi, esp
.text:00000D2A                 lea     eax, [ebp+var_18C]
.text:00000D30                 push    eax
.text:00000D31                 push    7
.text:00000D33                 mov     ecx, [ebp+var_38]
.text:00000D36                 push    ecx
.text:00000D37                 mov     edx, [ebp+arg_C]
.text:00000D3A                 push    edx
.text:00000D3B                 mov     eax, [ebp+arg_C]
.text:00000D3E                 mov     ecx, [eax]
.text:00000D40                 mov     edx, [ecx+18h]
.text:00000D43                 call    edx
.text:00000D45                 cmp     esi, esp
.text:00000D47                 call    __RTC_CheckEsp
.text:00000D4C                 mov     [ebp+var_34C], eax
.text:00000D52                 mov     eax, [ebp+var_34C]
.text:00000D58                 mov     [ebp+var_194], eax
.text:00000D5E                 cmp     [ebp+var_194], 0
.text:00000D65                 jz      short loc_DA8
.text:00000D67                 mov     ecx, [ebp+var_194]
.text:00000D6D                 mov     [ebp+var_28C], ecx
.text:00000D73                 mov     byte ptr [ebp+var_4], 2
.text:00000D77                 lea     ecx, [ebp+var_18C] ; this
.text:00000D7D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000D82                 mov     byte ptr [ebp+var_4], 1
.text:00000D86                 lea     ecx, [ebp+var_84] ; this
.text:00000D8C                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:00000D91                 mov     byte ptr [ebp+var_4], 0
.text:00000D95                 lea     ecx, [ebp+var_20]
.text:00000D98                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:00000D9D                 mov     eax, [ebp+var_28C]
.text:00000DA3                 jmp     loc_1370
.text:00000DA8 ; ---------------------------------------------------------------------------
.text:00000DA8
.text:00000DA8 loc_DA8:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C7Dj
.text:00000DA8                 movzx   edx, [ebp+var_18C]
.text:00000DAF                 cmp     edx, 15h
.text:00000DB2                 jz      short loc_DF3
.text:00000DB4                 mov     [ebp+var_290], 80070057h
.text:00000DBE                 mov     byte ptr [ebp+var_4], 2
.text:00000DC2                 lea     ecx, [ebp+var_18C] ; this
.text:00000DC8                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000DCD                 mov     byte ptr [ebp+var_4], 1
.text:00000DD1                 lea     ecx, [ebp+var_84] ; this
.text:00000DD7                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:00000DDC                 mov     byte ptr [ebp+var_4], 0
.text:00000DE0                 lea     ecx, [ebp+var_20]
.text:00000DE3                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:00000DE8                 mov     eax, [ebp+var_290]
.text:00000DEE                 jmp     loc_1370
.text:00000DF3 ; ---------------------------------------------------------------------------
.text:00000DF3
.text:00000DF3 loc_DF3:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+CCAj
.text:00000DF3                 mov     eax, [ebp+var_184]
.text:00000DF9                 mov     [ebp+var_178], eax
.text:00000DFF                 mov     ecx, [ebp+var_180]
.text:00000E05                 mov     [ebp+var_174], ecx
.text:00000E0B                 mov     edx, [ebp+var_2C]
.text:00000E0E                 cmp     edx, [ebp+var_174]
.text:00000E14                 ja      short loc_E35
.text:00000E16                 jb      short loc_E23
.text:00000E18                 mov     eax, [ebp+var_30]
.text:00000E1B                 cmp     eax, [ebp+var_178]
.text:00000E21                 jnb     short loc_E35
.text:00000E23
.text:00000E23 loc_E23:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+D2Ej
.text:00000E23                 mov     ecx, [ebp+var_178]
.text:00000E29                 mov     [ebp+var_30], ecx
.text:00000E2C                 mov     edx, [ebp+var_174]
.text:00000E32                 mov     [ebp+var_2C], edx
.text:00000E35
.text:00000E35 loc_E35:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+D2Cj
.text:00000E35                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+D39j
.text:00000E35                 mov     [ebp+var_31], 1
.text:00000E39                 mov     byte ptr [ebp+var_4], 2
.text:00000E3D                 lea     ecx, [ebp+var_18C] ; this
.text:00000E43                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000E48                 mov     eax, [ebp+var_178]
.text:00000E4E                 mov     [ebp+var_70.dwHighDateTime], eax
.text:00000E51                 mov     ecx, [ebp+var_174]
.text:00000E57                 mov     [ebp+var_68], ecx
.text:00000E5A
.text:00000E5A loc_E5A:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C25j
.text:00000E5A                 lea     edx, [ebp+var_84]
.text:00000E60                 push    edx             ; struct NArchive::NZip::CUpdateItem *
.text:00000E61                 lea     ecx, [ebp+var_20]
.text:00000E64                 call    ?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::Add(NArchive::NZip::CUpdateItem const &)
.text:00000E69                 mov     byte ptr [ebp+var_4], 1
.text:00000E6D                 lea     ecx, [ebp+var_84] ; this
.text:00000E73                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:00000E78                 jmp     loc_1AD
.text:00000E7D ; ---------------------------------------------------------------------------
.text:00000E7D
.text:00000E7D loc_E7D:                                ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+D4j
.text:00000E7D                 lea     ecx, [ebp+var_19C]
.text:00000E83                 call    ??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::CMyComPtr<ICryptoGetTextPassword2>(void)
.text:00000E88                 mov     [ebp+var_350], eax
.text:00000E8E                 mov     byte ptr [ebp+var_4], 0Ch
.text:00000E92                 mov     eax, [ebp+arg_C]
.text:00000E95                 push    eax
.text:00000E96                 lea     ecx, [ebp+var_1A8]
.text:00000E9C                 call    ??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>(IArchiveUpdateCallback *)
.text:00000EA1                 mov     byte ptr [ebp+var_4], 0Dh
.text:00000EA5                 lea     ecx, [ebp+var_19C]
.text:00000EAB                 call    ??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator&(void)
.text:00000EB0                 mov     [ebp+var_354], eax
.text:00000EB6                 mov     ecx, [ebp+var_354]
.text:00000EBC                 push    ecx
.text:00000EBD                 push    offset _IID_ICryptoGetTextPassword2
.text:00000EC2                 lea     ecx, [ebp+var_1A8]
.text:00000EC8                 call    ??$QueryInterface@UICryptoGetTextPassword2@@@?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword2@@@Z ; CMyComPtr<IArchiveUpdateCallback>::QueryInterface<ICryptoGetTextPassword2>(_GUID const &,ICryptoGetTextPassword2 * *)
.text:00000ECD                 mov     byte ptr [ebp+var_4], 0Ch
.text:00000ED1                 lea     ecx, [ebp+var_1A8]
.text:00000ED7                 call    ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>(void)
.text:00000EDC                 lea     ecx, [ebp+var_1F8] ; this
.text:00000EE2                 call    ??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(void)
.text:00000EE7                 mov     [ebp+var_358], eax
.text:00000EED                 mov     byte ptr [ebp+var_4], 0Eh
.text:00000EF1                 mov     edx, [ebp+this]
.text:00000EF4                 add     edx, 0A4h ; 'ñ'
.text:00000EFA                 push    edx
.text:00000EFB                 lea     ecx, [ebp+var_1F8]
.text:00000F01                 call    ??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CBaseProps::operator=(NArchive::NZip::CBaseProps const &)
.text:00000F06                 mov     eax, [ebp+var_30]
.text:00000F09                 mov     [ebp+var_1C0], eax
.text:00000F0F                 mov     ecx, [ebp+var_2C]
.text:00000F12                 mov     [ebp+var_1BC], ecx
.text:00000F18                 mov     dl, [ebp+var_31]
.text:00000F1B                 mov     [ebp+var_1B8], dl
.text:00000F21                 mov     [ebp+var_1D4], 0
.text:00000F28                 lea     ecx, [ebp+var_1D0] ; this
.text:00000F2E                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00000F33                 lea     ecx, [ebp+var_19C]
.text:00000F39                 call    ??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator ICryptoGetTextPassword2 *(void)
.text:00000F3E                 mov     [ebp+var_35C], eax
.text:00000F44                 cmp     [ebp+var_35C], 0
.text:00000F4B                 jz      loc_1212
.text:00000F51                 lea     ecx, [ebp+var_204] ; this
.text:00000F57                 call    ??0CMyComBSTR@@QAE@XZ ; CMyComBSTR::CMyComBSTR(void)
.text:00000F5C                 mov     [ebp+var_360], eax
.text:00000F62                 mov     byte ptr [ebp+var_4], 0Fh
.text:00000F66                 lea     ecx, [ebp+var_19C]
.text:00000F6C                 call    ??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator->(void)
.text:00000F71                 mov     [ebp+var_364], eax
.text:00000F77                 mov     eax, [ebp+var_364]
.text:00000F7D                 mov     [ebp+var_368], eax
.text:00000F83                 lea     ecx, [ebp+var_204]
.text:00000F89                 call    ??ICMyComBSTR@@QAEPAPA_WXZ ; CMyComBSTR::operator&(void)
.text:00000F8E                 mov     [ebp+var_36C], eax
.text:00000F94                 mov     esi, esp
.text:00000F96                 mov     ecx, [ebp+var_36C]
.text:00000F9C                 push    ecx
.text:00000F9D                 lea     edx, [ebp+var_210]
.text:00000FA3                 push    edx
.text:00000FA4                 mov     eax, [ebp+var_368]
.text:00000FAA                 push    eax
.text:00000FAB                 mov     ecx, [ebp+var_368]
.text:00000FB1                 mov     edx, [ecx]
.text:00000FB3                 mov     eax, [edx+0Ch]
.text:00000FB6                 call    eax
.text:00000FB8                 cmp     esi, esp
.text:00000FBA                 call    __RTC_CheckEsp
.text:00000FBF                 mov     [ebp+var_370], eax
.text:00000FC5                 mov     ecx, [ebp+var_370]
.text:00000FCB                 mov     [ebp+var_218], ecx
.text:00000FD1                 cmp     [ebp+var_218], 0
.text:00000FD8                 jz      short loc_102A
.text:00000FDA                 mov     edx, [ebp+var_218]
.text:00000FE0                 mov     [ebp+var_294], edx
.text:00000FE6                 mov     byte ptr [ebp+var_4], 0Eh
.text:00000FEA                 lea     ecx, [ebp+var_204] ; this
.text:00000FF0                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00000FF5                 mov     byte ptr [ebp+var_4], 0Ch
.text:00000FF9                 lea     ecx, [ebp+var_1F8] ; this
.text:00000FFF                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00001004                 mov     byte ptr [ebp+var_4], 1
.text:00001008                 lea     ecx, [ebp+var_19C]
.text:0000100E                 call    ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>(void)
.text:00001013                 mov     byte ptr [ebp+var_4], 0
.text:00001017                 lea     ecx, [ebp+var_20]
.text:0000101A                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:0000101F                 mov     eax, [ebp+var_294]
.text:00001025                 jmp     loc_1370
.text:0000102A ; ---------------------------------------------------------------------------
.text:0000102A
.text:0000102A loc_102A:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+EF0j
.text:0000102A                 mov     eax, [ebp+var_210]
.text:00001030                 push    eax             ; int
.text:00001031                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:00001036                 mov     [ebp+var_371], al
.text:0000103C                 mov     cl, [ebp+var_371]
.text:00001042                 mov     [ebp+var_1D4], cl
.text:00001048                 movzx   edx, [ebp+var_1D4]
.text:0000104F                 test    edx, edx
.text:00001051                 jz      loc_1203
.text:00001057                 mov     eax, [ebp+this]
.text:0000105A                 movzx   ecx, byte ptr [eax+0C0h]
.text:00001061                 test    ecx, ecx
.text:00001063                 jnz     short loc_106E
.text:00001065                 mov     dl, [ebp+var_25]
.text:00001068                 mov     [ebp+var_1E3], dl
.text:0000106E
.text:0000106E loc_106E:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F7Bj
.text:0000106E                 lea     ecx, [ebp+var_204]
.text:00001074                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:00001079                 mov     [ebp+var_378], eax
.text:0000107F                 mov     eax, [ebp+var_378]
.text:00001085                 push    eax
.text:00001086                 call    ?IsSimpleAsciiString@NZip@NArchive@@YG_NPB_W@Z ; NArchive::NZip::IsSimpleAsciiString(wchar_t const *)
.text:0000108B                 mov     [ebp+var_379], al
.text:00001091                 movzx   ecx, [ebp+var_379]
.text:00001098                 test    ecx, ecx
.text:0000109A                 jnz     short loc_10EA
.text:0000109C                 mov     [ebp+var_298], 80070057h
.text:000010A6                 mov     byte ptr [ebp+var_4], 0Eh
.text:000010AA                 lea     ecx, [ebp+var_204] ; this
.text:000010B0                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:000010B5                 mov     byte ptr [ebp+var_4], 0Ch
.text:000010B9                 lea     ecx, [ebp+var_1F8] ; this
.text:000010BF                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000010C4                 mov     byte ptr [ebp+var_4], 1
.text:000010C8                 lea     ecx, [ebp+var_19C]
.text:000010CE                 call    ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>(void)
.text:000010D3                 mov     byte ptr [ebp+var_4], 0
.text:000010D7                 lea     ecx, [ebp+var_20]
.text:000010DA                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:000010DF                 mov     eax, [ebp+var_298]
.text:000010E5                 jmp     loc_1370
.text:000010EA ; ---------------------------------------------------------------------------
.text:000010EA
.text:000010EA loc_10EA:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+FB2j
.text:000010EA                 lea     ecx, [ebp+var_204]
.text:000010F0                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:000010F5                 mov     [ebp+var_380], eax
.text:000010FB                 cmp     [ebp+var_380], 0
.text:00001102                 jz      loc_1190
.text:00001108                 lea     ecx, [ebp+var_204]
.text:0000110E                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:00001113                 mov     [ebp+var_384], eax
.text:00001119                 mov     edx, [ebp+var_384]
.text:0000111F                 push    edx
.text:00001120                 lea     ecx, [ebp+var_2A4]
.text:00001126                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:0000112B                 mov     [ebp+var_388], eax
.text:00001131                 mov     byte ptr [ebp+var_4], 10h
.text:00001135                 push    1
.text:00001137                 lea     eax, [ebp+var_2A4]
.text:0000113D                 push    eax
.text:0000113E                 lea     ecx, [ebp+var_2B0]
.text:00001144                 push    ecx
.text:00001145                 call    ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z ; UnicodeStringToMultiByte(UString const &,uint)
.text:0000114A                 mov     [ebp+var_38C], eax
.text:00001150                 mov     edx, [ebp+var_38C]
.text:00001156                 mov     [ebp+var_390], edx
.text:0000115C                 mov     byte ptr [ebp+var_4], 11h
.text:00001160                 mov     eax, [ebp+var_390]
.text:00001166                 push    eax
.text:00001167                 lea     ecx, [ebp+var_1D0]
.text:0000116D                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00001172                 mov     byte ptr [ebp+var_4], 10h
.text:00001176                 lea     ecx, [ebp+var_2B0] ; this
.text:0000117C                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001181                 mov     byte ptr [ebp+var_4], 0Fh
.text:00001185                 lea     ecx, [ebp+var_2A4] ; this
.text:0000118B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001190
.text:00001190 loc_1190:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+101Aj
.text:00001190                 movzx   ecx, [ebp+var_1E3]
.text:00001197                 test    ecx, ecx
.text:00001199                 jz      short loc_1203
.text:0000119B                 lea     ecx, [ebp+var_1D0] ; this
.text:000011A1                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000011A6                 mov     [ebp+var_394], eax
.text:000011AC                 cmp     [ebp+var_394], 63h ; 'c'
.text:000011B3                 jbe     short loc_1203
.text:000011B5                 mov     [ebp+var_2B4], 80070057h
.text:000011BF                 mov     byte ptr [ebp+var_4], 0Eh
.text:000011C3                 lea     ecx, [ebp+var_204] ; this
.text:000011C9                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:000011CE                 mov     byte ptr [ebp+var_4], 0Ch
.text:000011D2                 lea     ecx, [ebp+var_1F8] ; this
.text:000011D8                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000011DD                 mov     byte ptr [ebp+var_4], 1
.text:000011E1                 lea     ecx, [ebp+var_19C]
.text:000011E7                 call    ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>(void)
.text:000011EC                 mov     byte ptr [ebp+var_4], 0
.text:000011F0                 lea     ecx, [ebp+var_20]
.text:000011F3                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:000011F8                 mov     eax, [ebp+var_2B4]
.text:000011FE                 jmp     loc_1370
.text:00001203 ; ---------------------------------------------------------------------------
.text:00001203
.text:00001203 loc_1203:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F69j
.text:00001203                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+10B1j ...
.text:00001203                 mov     byte ptr [ebp+var_4], 0Eh
.text:00001207                 lea     ecx, [ebp+var_204] ; this
.text:0000120D                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00001212
.text:00001212 loc_1212:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E63j
.text:00001212                 mov     edx, [ebp+this]
.text:00001215                 cmp     dword ptr [edx+0BCh], 0
.text:0000121C                 jge     short loc_1236
.text:0000121E                 mov     eax, [ebp+this]
.text:00001221                 mov     ecx, [eax+0B0h]
.text:00001227                 neg     ecx
.text:00001229                 sbb     ecx, ecx
.text:0000122B                 and     ecx, 8
.text:0000122E                 mov     [ebp+var_219], cl
.text:00001234                 jmp     short loc_1245
.text:00001236 ; ---------------------------------------------------------------------------
.text:00001236
.text:00001236 loc_1236:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1134j
.text:00001236                 mov     edx, [ebp+this]
.text:00001239                 mov     al, [edx+0BCh]
.text:0000123F                 mov     [ebp+var_219], al
.text:00001245
.text:00001245 loc_1245:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+114Cj
.text:00001245                 movzx   ecx, [ebp+var_219]
.text:0000124C                 push    ecx
.text:0000124D                 lea     ecx, [ebp+var_1E0]
.text:00001253                 call    ?Add@?$CRecordVector@E@@QAEIE@Z ; CRecordVector<uchar>::Add(uchar)
.text:00001258                 movzx   edx, [ebp+var_219]
.text:0000125F                 test    edx, edx
.text:00001261                 jz      short loc_1270
.text:00001263                 push    0
.text:00001265                 lea     ecx, [ebp+var_1E0]
.text:0000126B                 call    ?Add@?$CRecordVector@E@@QAEIE@Z ; CRecordVector<uchar>::Add(uchar)
.text:00001270
.text:00001270 loc_1270:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1179j
.text:00001270                 mov     ecx, [ebp+this]
.text:00001273                 add     ecx, 1Ch        ; this
.text:00001276                 call    ?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::IsOpen(void)
.text:0000127B                 mov     [ebp+var_395], al
.text:00001281                 movzx   eax, [ebp+var_395]
.text:00001288                 test    eax, eax
.text:0000128A                 jz      short loc_129A
.text:0000128C                 mov     ecx, [ebp+this]
.text:0000128F                 add     ecx, 1Ch
.text:00001292                 mov     [ebp+var_39C], ecx
.text:00001298                 jmp     short loc_12A4
.text:0000129A ; ---------------------------------------------------------------------------
.text:0000129A
.text:0000129A loc_129A:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+11A2j
.text:0000129A                 mov     [ebp+var_39C], 0
.text:000012A4
.text:000012A4 loc_12A4:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+11B0j
.text:000012A4                 mov     edx, [ebp+arg_C]
.text:000012A7                 push    edx
.text:000012A8                 lea     eax, [ebp+var_1F8]
.text:000012AE                 push    eax
.text:000012AF                 mov     ecx, [ebp+this]
.text:000012B2                 movzx   edx, byte ptr [ecx+0C2h]
.text:000012B9                 push    edx
.text:000012BA                 mov     eax, [ebp+var_39C]
.text:000012C0                 push    eax
.text:000012C1                 mov     ecx, [ebp+arg_4]
.text:000012C4                 push    ecx
.text:000012C5                 lea     edx, [ebp+var_20]
.text:000012C8                 push    edx
.text:000012C9                 mov     eax, [ebp+this]
.text:000012CC                 add     eax, 0Ch
.text:000012CF                 push    eax
.text:000012D0                 call    ?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)
.text:000012D5                 mov     [ebp+var_3A0], eax
.text:000012DB                 mov     ecx, [ebp+var_3A0]
.text:000012E1                 mov     [ebp+var_2B8], ecx
.text:000012E7                 mov     byte ptr [ebp+var_4], 0Ch
.text:000012EB                 lea     ecx, [ebp+var_1F8] ; this
.text:000012F1                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000012F6                 mov     byte ptr [ebp+var_4], 1
.text:000012FA                 lea     ecx, [ebp+var_19C]
.text:00001300                 call    ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>(void)
.text:00001305                 mov     byte ptr [ebp+var_4], 0
.text:00001309                 lea     ecx, [ebp+var_20]
.text:0000130C                 call    ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text:00001311                 mov     eax, [ebp+var_2B8]
.text:00001317                 jmp     short loc_1370
.text:00001317 ?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z endp ; sp-analysis failed
.text:00001317
.text:00001319
.text:00001319 ; =============== S U B R O U T I N E =======================================
.text:00001319
.text:00001319
.text:00001319 __catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0 proc near
.text:00001319                                         ; DATA XREF: .xdata$x:0000206Co
.text:00001319                 mov     edx, [ebp-224h]
.text:0000131F                 mov     eax, [edx]
.text:00001321                 mov     [ebp-2BCh], eax
.text:00001327                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000132E                 mov     eax, offset $LN91
.text:00001333                 retn
.text:00001333 __catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0 endp
.text:00001333
.text:00001334 ; ---------------------------------------------------------------------------
.text:00001334                 mov     eax, offset __tryend$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2
.text:00001339                 retn
.text:0000133A
.text:0000133A ; =============== S U B R O U T I N E =======================================
.text:0000133A
.text:0000133A
.text:0000133A __catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1 proc near
.text:0000133A                                         ; DATA XREF: .xdata$x:0000207Co
.text:0000133A                 mov     dword ptr [ebp-2C0h], 8007000Eh
.text:00001344                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000134B                 mov     eax, offset $LN93
.text:00001350                 retn
.text:00001350 __catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1 endp
.text:00001350
.text:00001351 ; ---------------------------------------------------------------------------
.text:00001351                 mov     eax, offset __tryend$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2
.text:00001356                 retn
.text:00001357 ; ---------------------------------------------------------------------------
.text:00001357
.text:00001357 __tryend$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2:
.text:00001357                                         ; DATA XREF: .text:00001334o
.text:00001357                                         ; .text:00001351o
.text:00001357                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000135E                 jmp     short loc_1368
.text:00001360 ; ---------------------------------------------------------------------------
.text:00001360
.text:00001360 $LN93:                                  ; DATA XREF: __catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1+11o
.text:00001360                 mov     eax, [ebp-2C0h]
.text:00001366                 jmp     short loc_1370
.text:00001368 ; ---------------------------------------------------------------------------
.text:00001368
.text:00001368 loc_1368:                               ; CODE XREF: .text:0000135Ej
.text:00001368                 jmp     short loc_1370
.text:0000136A ; ---------------------------------------------------------------------------
.text:0000136A
.text:0000136A $LN91:                                  ; DATA XREF: __catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0+15o
.text:0000136A                 mov     eax, [ebp-2BCh]
.text:00001370 ; START OF FUNCTION CHUNK FOR ?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00001370
.text:00001370 loc_1370:                               ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+8Fj
.text:00001370                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+120j ...
.text:00001370                 push    edx
.text:00001371                 mov     ecx, ebp
.text:00001373                 push    eax
.text:00001374                 lea     edx, $LN118
.text:0000137A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000137F                 pop     eax
.text:00001380                 pop     edx
.text:00001381                 mov     ecx, [ebp+var_C]
.text:00001384                 mov     large fs:0, ecx
.text:0000138B                 pop     ecx
.text:0000138C                 pop     edi
.text:0000138D                 pop     esi
.text:0000138E                 pop     ebx
.text:0000138F                 add     esp, 3A0h
.text:00001395                 cmp     ebp, esp
.text:00001397                 call    __RTC_CheckEsp
.text:0000139C                 mov     esp, ebp
.text:0000139E                 pop     ebp
.text:0000139F                 retn    10h
.text:0000139F ; END OF FUNCTION CHUNK FOR ?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:0000139F ; ---------------------------------------------------------------------------
.text:000013A2                 align 4
.text:000013A4 $LN118          dd 13h                  ; DATA XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+128Co
.text:000013A8                 dd offset $LN117
.text:000013AC $LN117          dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:000013A8o
.text:000013B4                 dd offset $LN97         ; "updateItems"
.text:000013B8                 dd 0FFFFFF7Ch, 48h
.text:000013C0                 dd offset $LN98         ; "ui"
.text:000013C4                 dd 0FFFFFF70h, 4
.text:000013CC                 dd offset $LN99         ; "newData"
.text:000013D0                 dd 0FFFFFF64h, 4
.text:000013D8                 dd offset $LN100        ; "newProps"
.text:000013DC                 dd 0FFFFFF58h, 4
.text:000013E4                 dd offset $LN101        ; "indexInArchive"
.text:000013E8                 dd 0FFFFFF3Ch, 0Ch
.text:000013F0                 dd offset $LN102        ; "name"
.text:000013F4                 dd 0FFFFFF24h, 10h
.text:000013FC                 dd offset $LN103        ; "prop"
.text:00001400                 db 8, 0FFh
.text:00001402                 dw 0FFFFh
.text:00001404                 dd 10h
.text:00001408                 dd offset $LN104        ; "prop"
.text:0000140C                 dd 0FFFFFEECh, 10h
.text:00001414                 dd offset $LN105        ; "prop"
.text:00001418                 dd 0FFFFFED0h, 10h
.text:00001420                 dd offset $LN106        ; "prop"
.text:00001424                 dd 0FFFFFEB0h, 8
.text:0000142C                 dd offset $LN107        ; "localFileTime"
.text:00001430                 dd 0FFFFFE97h, 1
.text:00001438                 dd offset $LN108        ; "defaultCharWasUsed"
.text:0000143C                 dd 0FFFFFE74h, 10h
.text:00001444                 dd offset $LN109        ; "prop"
.text:00001448                 dd 0FFFFFE64h, 4
.text:00001450                 dd offset $LN110        ; "getTextPassword"
.text:00001454                 dd 0FFFFFE58h, 4
.text:0000145C                 dd offset $LN111        ; "udateCallBack2"
.text:00001460                 dd 0FFFFFE08h, 48h
.text:00001468                 dd offset $LN112        ; "options"
.text:0000146C                 dd 0FFFFFDFCh, 4
.text:00001474                 dd offset $LN113        ; "password"
.text:00001478                 dd 0FFFFFDF0h, 4
.text:00001480                 dd offset $LN114        ; "passwordIsDefined"
.text:00001484                 dd 0FFFFFDDCh, 4
.text:0000148C                 dd offset $LN115
.text:00001490 $LN115          db 65h, 0               ; DATA XREF: .text:0000148Co
.text:00001492 $LN114          db 'passwordIsDefined',0 ; DATA XREF: .text:00001480o
.text:000014A4 $LN113          db 'password',0         ; DATA XREF: .text:00001474o
.text:000014AD $LN112          db 'options',0          ; DATA XREF: .text:00001468o
.text:000014B5 $LN111          db 'udateCallBack2',0   ; DATA XREF: .text:0000145Co
.text:000014C4 $LN110          db 'getTextPassword',0  ; DATA XREF: .text:00001450o
.text:000014D4 $LN109          db 'prop',0             ; DATA XREF: .text:00001444o
.text:000014D9 $LN108          db 'defaultCharWasUsed',0 ; DATA XREF: .text:00001438o
.text:000014EC $LN107          db 'localFileTime',0    ; DATA XREF: .text:0000142Co
.text:000014FA $LN106          db 'prop',0             ; DATA XREF: .text:00001420o
.text:000014FF $LN105          db 'prop',0             ; DATA XREF: .text:00001414o
.text:00001504 $LN104          db 'prop',0             ; DATA XREF: .text:00001408o
.text:00001509 $LN103          db 'prop',0             ; DATA XREF: .text:000013FCo
.text:0000150E $LN102          db 'name',0             ; DATA XREF: .text:000013F0o
.text:00001513 $LN101          db 'indexInArchive',0   ; DATA XREF: .text:000013E4o
.text:00001522 $LN100          db 'newProps',0         ; DATA XREF: .text:000013D8o
.text:0000152B $LN99           db 'newData',0          ; DATA XREF: .text:000013CCo
.text:00001533 $LN98           db 'ui',0               ; DATA XREF: .text:000013C0o
.text:00001536 $LN97           db 'updateItems',0      ; DATA XREF: .text:000013B4o
.text:00001542                 align 8
.text:00001548
.text:00001548 ; =============== S U B R O U T I N E =======================================
.text:00001548
.text:00001548 ; Attributes: bp-based frame
.text:00001548
.text:00001548 ; bool __stdcall NArchive::NZip::IsSimpleAsciiString(wchar_t const *)
.text:00001548 ?IsSimpleAsciiString@NZip@NArchive@@YG_NPB_W@Z proc near
.text:00001548                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F9Ep
.text:00001548
.text:00001548 var_4           = dword ptr -4
.text:00001548 arg_0           = dword ptr  8
.text:00001548
.text:00001548                 push    ebp
.text:00001549                 mov     ebp, esp
.text:0000154B                 push    ecx
.text:0000154C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001553
.text:00001553 loc_1553:                               ; CODE XREF: NArchive::NZip::IsSimpleAsciiString(wchar_t const *):loc_1588j
.text:00001553                 mov     eax, [ebp+arg_0]
.text:00001556                 mov     cx, [eax]
.text:00001559                 mov     word ptr [ebp+var_4], cx
.text:0000155D                 mov     edx, [ebp+arg_0]
.text:00001560                 add     edx, 2
.text:00001563                 mov     [ebp+arg_0], edx
.text:00001566                 movzx   eax, word ptr [ebp+var_4]
.text:0000156A                 test    eax, eax
.text:0000156C                 jnz     short loc_1572
.text:0000156E                 mov     al, 1
.text:00001570                 jmp     short loc_158A
.text:00001572 ; ---------------------------------------------------------------------------
.text:00001572
.text:00001572 loc_1572:                               ; CODE XREF: NArchive::NZip::IsSimpleAsciiString(wchar_t const *)+24j
.text:00001572                 movzx   ecx, word ptr [ebp+var_4]
.text:00001576                 cmp     ecx, 20h ; ' '
.text:00001579                 jl      short loc_1584
.text:0000157B                 movzx   edx, word ptr [ebp+var_4]
.text:0000157F                 cmp     edx, 7Fh ; ''
.text:00001582                 jle     short loc_1588
.text:00001584
.text:00001584 loc_1584:                               ; CODE XREF: NArchive::NZip::IsSimpleAsciiString(wchar_t const *)+31j
.text:00001584                 xor     al, al
.text:00001586                 jmp     short loc_158A
.text:00001588 ; ---------------------------------------------------------------------------
.text:00001588
.text:00001588 loc_1588:                               ; CODE XREF: NArchive::NZip::IsSimpleAsciiString(wchar_t const *)+3Aj
.text:00001588                 jmp     short loc_1553
.text:0000158A ; ---------------------------------------------------------------------------
.text:0000158A
.text:0000158A loc_158A:                               ; CODE XREF: NArchive::NZip::IsSimpleAsciiString(wchar_t const *)+28j
.text:0000158A                                         ; NArchive::NZip::IsSimpleAsciiString(wchar_t const *)+3Ej
.text:0000158A                 mov     esp, ebp
.text:0000158C                 pop     ebp
.text:0000158D                 retn    4
.text:0000158D ?IsSimpleAsciiString@NZip@NArchive@@YG_NPB_W@Z endp
.text:0000158D
.text:0000158D ; ---------------------------------------------------------------------------
.text:00001590                 db 8 dup(0CCh)
.text:00001598
.text:00001598 ; =============== S U B R O U T I N E =======================================
.text:00001598
.text:00001598 ; Attributes: bp-based frame
.text:00001598
.text:00001598 ; long __stdcall NArchive::NZip::GetTime(struct IArchiveUpdateCallback *, int, unsigned long, struct _FILETIME &)
.text:00001598 ?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z proc near
.text:00001598                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+70Cp
.text:00001598                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+77Bp ...
.text:00001598
.text:00001598 var_34          = dword ptr -34h
.text:00001598 var_30          = dword ptr -30h
.text:00001598 var_2C          = dword ptr -2Ch
.text:00001598 var_28          = dword ptr -28h
.text:00001598 var_20          = word ptr -20h
.text:00001598 var_18          = dword ptr -18h
.text:00001598 var_14          = dword ptr -14h
.text:00001598 var_C           = dword ptr -0Ch
.text:00001598 var_4           = dword ptr -4
.text:00001598 arg_0           = dword ptr  8
.text:00001598 arg_4           = dword ptr  0Ch
.text:00001598 arg_8           = dword ptr  10h
.text:00001598 arg_C           = dword ptr  14h
.text:00001598
.text:00001598                 push    ebp
.text:00001599                 mov     ebp, esp
.text:0000159B                 push    0FFFFFFFFh
.text:0000159D                 push    offset __ehhandler$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z
.text:000015A2                 mov     eax, large fs:0
.text:000015A8                 push    eax
.text:000015A9                 sub     esp, 28h
.text:000015AC                 push    esi
.text:000015AD                 push    edi
.text:000015AE                 lea     edi, [ebp+var_34]
.text:000015B1                 mov     ecx, 0Ah
.text:000015B6                 mov     eax, 0CCCCCCCCh
.text:000015BB                 rep stosd
.text:000015BD                 mov     eax, dword ptr ds:___security_cookie
.text:000015C2                 xor     eax, ebp
.text:000015C4                 push    eax
.text:000015C5                 lea     eax, [ebp+var_C]
.text:000015C8                 mov     large fs:0, eax
.text:000015CE                 mov     eax, [ebp+arg_C]
.text:000015D1                 mov     dword ptr [eax], 0
.text:000015D7                 mov     ecx, [ebp+arg_C]
.text:000015DA                 mov     dword ptr [ecx+4], 0
.text:000015E1                 lea     ecx, [ebp+var_20] ; this
.text:000015E4                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000015E9                 mov     [ebp+var_4], 0
.text:000015F0                 mov     esi, esp
.text:000015F2                 lea     edx, [ebp+var_20]
.text:000015F5                 push    edx
.text:000015F6                 mov     eax, [ebp+arg_8]
.text:000015F9                 push    eax
.text:000015FA                 mov     ecx, [ebp+arg_4]
.text:000015FD                 push    ecx
.text:000015FE                 mov     edx, [ebp+arg_0]
.text:00001601                 mov     eax, [edx]
.text:00001603                 mov     ecx, [ebp+arg_0]
.text:00001606                 push    ecx
.text:00001607                 mov     edx, [eax+18h]
.text:0000160A                 call    edx
.text:0000160C                 cmp     esi, esp
.text:0000160E                 call    __RTC_CheckEsp
.text:00001613                 mov     [ebp+var_28], eax
.text:00001616                 cmp     [ebp+var_28], 0
.text:0000161A                 jz      short loc_1636
.text:0000161C                 mov     eax, [ebp+var_28]
.text:0000161F                 mov     [ebp+var_2C], eax
.text:00001622                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001629                 lea     ecx, [ebp+var_20] ; this
.text:0000162C                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001631                 mov     eax, [ebp+var_2C]
.text:00001634                 jmp     short loc_168B
.text:00001636 ; ---------------------------------------------------------------------------
.text:00001636
.text:00001636 loc_1636:                               ; CODE XREF: NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)+82j
.text:00001636                 movzx   ecx, [ebp+var_20]
.text:0000163A                 cmp     ecx, 40h ; '@'
.text:0000163D                 jnz     short loc_164F
.text:0000163F                 mov     edx, [ebp+arg_C]
.text:00001642                 mov     eax, [ebp+var_18]
.text:00001645                 mov     [edx], eax
.text:00001647                 mov     ecx, [ebp+var_14]
.text:0000164A                 mov     [edx+4], ecx
.text:0000164D                 jmp     short loc_1672
.text:0000164F ; ---------------------------------------------------------------------------
.text:0000164F
.text:0000164F loc_164F:                               ; CODE XREF: NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)+A5j
.text:0000164F                 movzx   edx, [ebp+var_20]
.text:00001653                 test    edx, edx
.text:00001655                 jz      short loc_1672
.text:00001657                 mov     [ebp+var_30], 80070057h
.text:0000165E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001665                 lea     ecx, [ebp+var_20] ; this
.text:00001668                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000166D                 mov     eax, [ebp+var_30]
.text:00001670                 jmp     short loc_168B
.text:00001672 ; ---------------------------------------------------------------------------
.text:00001672
.text:00001672 loc_1672:                               ; CODE XREF: NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)+B5j
.text:00001672                                         ; NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)+BDj
.text:00001672                 mov     [ebp+var_34], 0
.text:00001679                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001680                 lea     ecx, [ebp+var_20] ; this
.text:00001683                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001688                 mov     eax, [ebp+var_34]
.text:0000168B
.text:0000168B loc_168B:                               ; CODE XREF: NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)+9Cj
.text:0000168B                                         ; NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)+D8j
.text:0000168B                 push    edx
.text:0000168C                 mov     ecx, ebp
.text:0000168E                 push    eax
.text:0000168F                 lea     edx, $LN11
.text:00001695                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000169A                 pop     eax
.text:0000169B                 pop     edx
.text:0000169C                 mov     ecx, [ebp+var_C]
.text:0000169F                 mov     large fs:0, ecx
.text:000016A6                 pop     ecx
.text:000016A7                 pop     edi
.text:000016A8                 pop     esi
.text:000016A9                 add     esp, 34h
.text:000016AC                 cmp     ebp, esp
.text:000016AE                 call    __RTC_CheckEsp
.text:000016B3                 mov     esp, ebp
.text:000016B5                 pop     ebp
.text:000016B6                 retn    10h
.text:000016B6 ?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z endp
.text:000016B6
.text:000016B6 ; ---------------------------------------------------------------------------
.text:000016B9                 align 4
.text:000016BC $LN11           dd 1                    ; DATA XREF: NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)+F7o
.text:000016C0                 dd offset $LN10
.text:000016C4 $LN10           dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:000016C0o
.text:000016CC                 dd offset $LN8          ; "prop"
.text:000016D0 $LN8            db 'prop',0             ; DATA XREF: .text:000016CCo
.text:000016D5                 align 4
.text:000016D8
.text:000016D8 ; =============== S U B R O U T I N E =======================================
.text:000016D8
.text:000016D8 ; Attributes: bp-based frame
.text:000016D8
.text:000016D8 ; __int32 __stdcall NArchive::NZip::CHandler::SetProperties(NArchive::NZip::CHandler *this, const wchar_t *const *, const struct tagPROPVARIANT *, unsigned int)
.text:000016D8                 public ?SetProperties@CHandler@NZip@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:000016D8 ?SetProperties@CHandler@NZip@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z proc near
.text:000016D8
.text:000016D8 var_110         = dword ptr -110h
.text:000016D8 var_10C         = dword ptr -10Ch
.text:000016D8 var_108         = dword ptr -108h
.text:000016D8 var_104         = byte ptr -104h
.text:000016D8 var_F8          = dword ptr -0F8h
.text:000016D8 var_F4          = dword ptr -0F4h
.text:000016D8 var_F0          = dword ptr -0F0h
.text:000016D8 var_EC          = dword ptr -0ECh
.text:000016D8 var_E8          = byte ptr -0E8h
.text:000016D8 var_DC          = dword ptr -0DCh
.text:000016D8 var_D8          = dword ptr -0D8h
.text:000016D8 var_D4          = dword ptr -0D4h
.text:000016D8 var_D0          = dword ptr -0D0h
.text:000016D8 var_CC          = dword ptr -0CCh
.text:000016D8 var_C8          = dword ptr -0C8h
.text:000016D8 var_C4          = dword ptr -0C4h
.text:000016D8 var_C0          = dword ptr -0C0h
.text:000016D8 var_BC          = byte ptr -0BCh
.text:000016D8 var_B0          = dword ptr -0B0h
.text:000016D8 var_AC          = dword ptr -0ACh
.text:000016D8 var_A8          = dword ptr -0A8h
.text:000016D8 var_A4          = dword ptr -0A4h
.text:000016D8 var_9C          = dword ptr -9Ch
.text:000016D8 var_94          = dword ptr -94h
.text:000016D8 var_90          = dword ptr -90h
.text:000016D8 var_8C          = dword ptr -8Ch
.text:000016D8 var_88          = dword ptr -88h
.text:000016D8 var_80          = dword ptr -80h
.text:000016D8 var_70          = dword ptr -70h
.text:000016D8 var_6C          = dword ptr -6Ch
.text:000016D8 var_68          = dword ptr -68h
.text:000016D8 var_64          = dword ptr -64h
.text:000016D8 var_60          = dword ptr -60h
.text:000016D8 var_5C          = dword ptr -5Ch
.text:000016D8 var_54          = byte ptr -54h
.text:000016D8 var_40          = byte ptr -40h
.text:000016D8 var_30          = dword ptr -30h
.text:000016D8 var_28          = dword ptr -28h
.text:000016D8 var_20          = dword ptr -20h
.text:000016D8 var_18          = dword ptr -18h
.text:000016D8 var_8           = dword ptr -8
.text:000016D8 var_4           = dword ptr -4
.text:000016D8 this            = dword ptr  8
.text:000016D8 arg_4           = dword ptr  0Ch
.text:000016D8 arg_8           = dword ptr  10h
.text:000016D8 arg_C           = dword ptr  14h
.text:000016D8
.text:000016D8                 push    ebp
.text:000016D9                 mov     ebp, esp
.text:000016DB                 sub     esp, 110h
.text:000016E1                 push    edi
.text:000016E2                 lea     edi, [ebp+var_110]
.text:000016E8                 mov     ecx, 44h ; 'D'
.text:000016ED                 mov     eax, 0CCCCCCCCh
.text:000016F2                 rep stosd
.text:000016F4                 mov     ecx, [ebp+this]
.text:000016F7                 sub     ecx, 8          ; this
.text:000016FA                 call    ?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ ; NArchive::NZip::CHandler::InitMethodProps(void)
.text:000016FF                 mov     eax, [ebp+this]
.text:00001702                 mov     ecx, [eax+0B0h]
.text:00001708                 mov     [ebp+var_4], ecx
.text:0000170B                 mov     [ebp+var_8], 0
.text:00001712                 jmp     short loc_171D
.text:00001714 ; ---------------------------------------------------------------------------
.text:00001714
.text:00001714 loc_1714:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+7C8j
.text:00001714                 mov     edx, [ebp+var_8]
.text:00001717                 add     edx, 1
.text:0000171A                 mov     [ebp+var_8], edx
.text:0000171D
.text:0000171D loc_171D:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3Aj
.text:0000171D                 mov     eax, [ebp+var_8]
.text:00001720                 cmp     eax, [ebp+arg_C]
.text:00001723                 jnb     loc_1EA5
.text:00001729                 mov     ecx, [ebp+var_8]
.text:0000172C                 mov     edx, [ebp+arg_4]
.text:0000172F                 mov     eax, [edx+ecx*4]
.text:00001732                 push    eax
.text:00001733                 lea     ecx, [ebp+var_18]
.text:00001736                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:0000173B                 lea     ecx, [ebp+var_18] ; this
.text:0000173E                 call    ?MakeLower_Ascii@UString@@QAEXXZ ; UString::MakeLower_Ascii(void)
.text:00001743                 lea     ecx, [ebp+var_18] ; this
.text:00001746                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000174B                 movzx   ecx, al
.text:0000174E                 test    ecx, ecx
.text:00001750                 jz      short loc_176F
.text:00001752                 mov     [ebp+var_B0], 80070057h
.text:0000175C                 lea     ecx, [ebp+var_18] ; this
.text:0000175F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001764                 mov     eax, [ebp+var_B0]
.text:0000176A                 jmp     loc_1EA7
.text:0000176F ; ---------------------------------------------------------------------------
.text:0000176F
.text:0000176F loc_176F:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+78j
.text:0000176F                 mov     edx, [ebp+var_8]
.text:00001772                 shl     edx, 4
.text:00001775                 add     edx, [ebp+arg_8]
.text:00001778                 mov     [ebp+var_20], edx
.text:0000177B                 lea     ecx, [ebp+var_18]
.text:0000177E                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001783                 movzx   eax, word ptr [eax]
.text:00001786                 cmp     eax, 78h ; 'x'
.text:00001789                 jnz     loc_1813
.text:0000178F                 mov     [ebp+var_28], 9
.text:00001796                 push    1               ; unsigned int
.text:00001798                 lea     ecx, [ebp+var_18] ; this
.text:0000179B                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:000017A0                 push    eax
.text:000017A1                 lea     ecx, [ebp+var_BC]
.text:000017A7                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:000017AC                 lea     ecx, [ebp+var_28]
.text:000017AF                 push    ecx             ; unsigned int *
.text:000017B0                 mov     edx, [ebp+var_20]
.text:000017B3                 push    edx             ; struct tagPROPVARIANT *
.text:000017B4                 lea     eax, [ebp+var_BC]
.text:000017BA                 push    eax             ; struct UString *
.text:000017BB                 call    ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)
.text:000017C0                 mov     [ebp+var_30], eax
.text:000017C3                 lea     ecx, [ebp+var_BC] ; this
.text:000017C9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000017CE                 cmp     [ebp+var_30], 0
.text:000017D2                 jz      short loc_17F0
.text:000017D4                 mov     ecx, [ebp+var_30]
.text:000017D7                 mov     [ebp+var_C0], ecx
.text:000017DD                 lea     ecx, [ebp+var_18] ; this
.text:000017E0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000017E5                 mov     eax, [ebp+var_C0]
.text:000017EB                 jmp     loc_1EA7
.text:000017F0 ; ---------------------------------------------------------------------------
.text:000017F0
.text:000017F0 loc_17F0:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+FAj
.text:000017F0                 mov     edx, [ebp+this]
.text:000017F3                 mov     eax, [ebp+var_28]
.text:000017F6                 mov     [edx+0ACh], eax
.text:000017FC                 mov     ecx, [ebp+var_28]
.text:000017FF                 push    ecx             ; unsigned int
.text:00001800                 mov     ecx, [ebp+this]
.text:00001803                 add     ecx, 0A0h ; 'á' ; this
.text:00001809                 call    ?AddProp_Level@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_Level(uint)
.text:0000180E                 jmp     loc_1E98
.text:00001813 ; ---------------------------------------------------------------------------
.text:00001813
.text:00001813 loc_1813:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+B1j
.text:00001813                 push    offset $SG71322 ; Str2
.text:00001818                 lea     edx, [ebp+var_18]
.text:0000181B                 push    edx             ; int
.text:0000181C                 call    ??8@YG_NABVUString@@PB_W@Z ; operator==(UString const &,wchar_t const *)
.text:00001821                 movzx   eax, al
.text:00001824                 test    eax, eax
.text:00001826                 jz      loc_1A15
.text:0000182C                 mov     ecx, [ebp+var_20]
.text:0000182F                 movzx   edx, word ptr [ecx]
.text:00001832                 cmp     edx, 8
.text:00001835                 jnz     loc_1983
.text:0000183B                 mov     eax, [ebp+var_20]
.text:0000183E                 mov     ecx, [eax+8]
.text:00001841                 push    ecx
.text:00001842                 lea     ecx, [ebp+var_40]
.text:00001845                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:0000184A                 lea     ecx, [ebp+var_54]
.text:0000184D                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00001852                 lea     ecx, [ebp+var_40] ; this
.text:00001855                 call    ?MakeLower_Ascii@UString@@QAEXXZ ; UString::MakeLower_Ascii(void)
.text:0000185A                 push    3Ah ; ':'       ; wchar_t
.text:0000185C                 lea     ecx, [ebp+var_40] ; this
.text:0000185F                 call    ?Find@UString@@QBEH_W@Z ; UString::Find(wchar_t)
.text:00001864                 mov     [ebp+var_5C], eax
.text:00001867                 cmp     [ebp+var_5C], 0
.text:0000186B                 jl      short loc_1891
.text:0000186D                 mov     edx, [ebp+var_5C]
.text:00001870                 add     edx, 1
.text:00001873                 push    edx             ; unsigned int
.text:00001874                 lea     ecx, [ebp+var_40] ; this
.text:00001877                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:0000187C                 push    eax
.text:0000187D                 lea     ecx, [ebp+var_54]
.text:00001880                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001885                 mov     eax, [ebp+var_5C]
.text:00001888                 push    eax             ; unsigned int
.text:00001889                 lea     ecx, [ebp+var_40] ; this
.text:0000188C                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00001891
.text:00001891 loc_1891:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+193j
.text:00001891                 mov     [ebp+var_60], 0
.text:00001898                 jmp     short loc_18A3
.text:0000189A ; ---------------------------------------------------------------------------
.text:0000189A
.text:0000189A loc_189A:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1936j
.text:0000189A                 mov     ecx, [ebp+var_60]
.text:0000189D                 add     ecx, 1
.text:000018A0                 mov     [ebp+var_60], ecx
.text:000018A3
.text:000018A3 loc_18A3:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1C0j
.text:000018A3                 cmp     [ebp+var_60], 6
.text:000018A7                 jnb     loc_193B
.text:000018AD                 mov     edx, [ebp+var_60]
.text:000018B0                 lea     eax, _k_SupportedMethods[edx*8]
.text:000018B7                 mov     [ebp+var_64], eax
.text:000018BA                 mov     ecx, [ebp+var_64]
.text:000018BD                 mov     edx, [ecx+4]
.text:000018C0                 push    edx             ; char *
.text:000018C1                 lea     ecx, [ebp+var_40] ; this
.text:000018C4                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:000018C9                 movzx   eax, al
.text:000018CC                 test    eax, eax
.text:000018CE                 jz      short loc_1936
.text:000018D0                 lea     ecx, [ebp+var_54] ; this
.text:000018D3                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000018D8                 movzx   ecx, al
.text:000018DB                 test    ecx, ecx
.text:000018DD                 jnz     short loc_1926
.text:000018DF                 lea     edx, [ebp+var_54]
.text:000018E2                 push    edx             ; struct UString *
.text:000018E3                 mov     ecx, [ebp+this]
.text:000018E6                 add     ecx, 0A0h ; 'á' ; this
.text:000018EC                 call    ?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z ; CMethodProps::ParseParamsFromString(UString const &)
.text:000018F1                 mov     [ebp+var_68], eax
.text:000018F4                 cmp     [ebp+var_68], 0
.text:000018F8                 jz      short loc_1926
.text:000018FA                 mov     eax, [ebp+var_68]
.text:000018FD                 mov     [ebp+var_C4], eax
.text:00001903                 lea     ecx, [ebp+var_54] ; this
.text:00001906                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000190B                 lea     ecx, [ebp+var_40] ; this
.text:0000190E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001913                 lea     ecx, [ebp+var_18] ; this
.text:00001916                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000191B                 mov     eax, [ebp+var_C4]
.text:00001921                 jmp     loc_1EA7
.text:00001926 ; ---------------------------------------------------------------------------
.text:00001926
.text:00001926 loc_1926:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+205j
.text:00001926                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+220j
.text:00001926                 mov     ecx, [ebp+this]
.text:00001929                 mov     edx, [ebp+var_64]
.text:0000192C                 mov     eax, [edx]
.text:0000192E                 mov     [ecx+0B8h], eax
.text:00001934                 jmp     short loc_193B
.text:00001936 ; ---------------------------------------------------------------------------
.text:00001936
.text:00001936 loc_1936:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1F6j
.text:00001936                 jmp     loc_189A
.text:0000193B ; ---------------------------------------------------------------------------
.text:0000193B
.text:0000193B loc_193B:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1CFj
.text:0000193B                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+25Cj
.text:0000193B                 cmp     [ebp+var_60], 6
.text:0000193F                 jnz     short loc_196E
.text:00001941                 mov     [ebp+var_C8], 80070057h
.text:0000194B                 lea     ecx, [ebp+var_54] ; this
.text:0000194E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001953                 lea     ecx, [ebp+var_40] ; this
.text:00001956                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000195B                 lea     ecx, [ebp+var_18] ; this
.text:0000195E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001963                 mov     eax, [ebp+var_C8]
.text:00001969                 jmp     loc_1EA7
.text:0000196E ; ---------------------------------------------------------------------------
.text:0000196E
.text:0000196E loc_196E:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+267j
.text:0000196E                 lea     ecx, [ebp+var_54] ; this
.text:00001971                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001976                 lea     ecx, [ebp+var_40] ; this
.text:00001979                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000197E                 jmp     loc_1A10
.text:00001983 ; ---------------------------------------------------------------------------
.text:00001983
.text:00001983 loc_1983:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+15Dj
.text:00001983                 mov     ecx, [ebp+var_20]
.text:00001986                 movzx   edx, word ptr [ecx]
.text:00001989                 cmp     edx, 13h
.text:0000198C                 jnz     short loc_19F3
.text:0000198E                 mov     [ebp+var_6C], 0
.text:00001995                 jmp     short loc_19A0
.text:00001997 ; ---------------------------------------------------------------------------
.text:00001997
.text:00001997 loc_1997:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_19CCj
.text:00001997                 mov     eax, [ebp+var_6C]
.text:0000199A                 add     eax, 1
.text:0000199D                 mov     [ebp+var_6C], eax
.text:000019A0
.text:000019A0 loc_19A0:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+2BDj
.text:000019A0                 cmp     [ebp+var_6C], 6
.text:000019A4                 jnb     short loc_19CE
.text:000019A6                 mov     ecx, [ebp+var_6C]
.text:000019A9                 mov     edx, _k_SupportedMethods[ecx*8]
.text:000019B0                 mov     [ebp+var_70], edx
.text:000019B3                 mov     eax, [ebp+var_20]
.text:000019B6                 mov     ecx, [eax+8]
.text:000019B9                 cmp     ecx, [ebp+var_70]
.text:000019BC                 jnz     short loc_19CC
.text:000019BE                 mov     edx, [ebp+this]
.text:000019C1                 mov     eax, [ebp+var_70]
.text:000019C4                 mov     [edx+0B8h], eax
.text:000019CA                 jmp     short loc_19CE
.text:000019CC ; ---------------------------------------------------------------------------
.text:000019CC
.text:000019CC loc_19CC:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+2E4j
.text:000019CC                 jmp     short loc_1997
.text:000019CE ; ---------------------------------------------------------------------------
.text:000019CE
.text:000019CE loc_19CE:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+2CCj
.text:000019CE                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+2F2j
.text:000019CE                 cmp     [ebp+var_6C], 6
.text:000019D2                 jnz     short loc_19F1
.text:000019D4                 mov     [ebp+var_CC], 80070057h
.text:000019DE                 lea     ecx, [ebp+var_18] ; this
.text:000019E1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000019E6                 mov     eax, [ebp+var_CC]
.text:000019EC                 jmp     loc_1EA7
.text:000019F1 ; ---------------------------------------------------------------------------
.text:000019F1
.text:000019F1 loc_19F1:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+2FAj
.text:000019F1                 jmp     short loc_1A10
.text:000019F3 ; ---------------------------------------------------------------------------
.text:000019F3
.text:000019F3 loc_19F3:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+2B4j
.text:000019F3                 mov     [ebp+var_D0], 80070057h
.text:000019FD                 lea     ecx, [ebp+var_18] ; this
.text:00001A00                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001A05                 mov     eax, [ebp+var_D0]
.text:00001A0B                 jmp     loc_1EA7
.text:00001A10 ; ---------------------------------------------------------------------------
.text:00001A10
.text:00001A10 loc_1A10:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+2A6j
.text:00001A10                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_19F1j
.text:00001A10                 jmp     loc_1E98
.text:00001A15 ; ---------------------------------------------------------------------------
.text:00001A15
.text:00001A15 loc_1A15:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+14Ej
.text:00001A15                 push    offset $SG71357 ; "em"
.text:00001A1A                 lea     ecx, [ebp+var_18] ; this
.text:00001A1D                 call    ?IsPrefixedBy@UString@@QBE_NPB_W@Z ; UString::IsPrefixedBy(wchar_t const *)
.text:00001A22                 movzx   ecx, al
.text:00001A25                 test    ecx, ecx
.text:00001A27                 jz      loc_1B98
.text:00001A2D                 mov     edx, [ebp+var_20]
.text:00001A30                 movzx   eax, word ptr [edx]
.text:00001A33                 cmp     eax, 8
.text:00001A36                 jz      short loc_1A55
.text:00001A38                 mov     [ebp+var_D4], 80070057h
.text:00001A42                 lea     ecx, [ebp+var_18] ; this
.text:00001A45                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001A4A                 mov     eax, [ebp+var_D4]
.text:00001A50                 jmp     loc_1EA7
.text:00001A55 ; ---------------------------------------------------------------------------
.text:00001A55
.text:00001A55 loc_1A55:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+35Ej
.text:00001A55                 mov     ecx, [ebp+var_20]
.text:00001A58                 mov     edx, [ecx+8]
.text:00001A5B                 push    edx
.text:00001A5C                 lea     ecx, [ebp+var_80]
.text:00001A5F                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00001A64                 lea     ecx, [ebp+var_80] ; this
.text:00001A67                 call    ?MakeLower_Ascii@UString@@QAEXXZ ; UString::MakeLower_Ascii(void)
.text:00001A6C                 push    offset $SG71363 ; "aes"
.text:00001A71                 lea     ecx, [ebp+var_80] ; this
.text:00001A74                 call    ?IsPrefixedBy@UString@@QBE_NPB_W@Z ; UString::IsPrefixedBy(wchar_t const *)
.text:00001A79                 movzx   eax, al
.text:00001A7C                 test    eax, eax
.text:00001A7E                 jz      loc_1B3B
.text:00001A84                 push    3               ; unsigned int
.text:00001A86                 lea     ecx, [ebp+var_80] ; this
.text:00001A89                 call    ?DeleteFrontal@UString@@QAEXI@Z ; UString::DeleteFrontal(uint)
.text:00001A8E                 push    offset $SG71365 ; "128"
.text:00001A93                 lea     ecx, [ebp+var_80]
.text:00001A96                 push    ecx             ; int
.text:00001A97                 call    ??8@YG_NABVUString@@PB_W@Z ; operator==(UString const &,wchar_t const *)
.text:00001A9C                 movzx   edx, al
.text:00001A9F                 test    edx, edx
.text:00001AA1                 jz      short loc_1AAF
.text:00001AA3                 mov     eax, [ebp+this]
.text:00001AA6                 mov     byte ptr [eax+0B6h], 1
.text:00001AAD                 jmp     short loc_1B25
.text:00001AAF ; ---------------------------------------------------------------------------
.text:00001AAF
.text:00001AAF loc_1AAF:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3C9j
.text:00001AAF                 push    offset $SG71368 ; "192"
.text:00001AB4                 lea     ecx, [ebp+var_80]
.text:00001AB7                 push    ecx             ; int
.text:00001AB8                 call    ??8@YG_NABVUString@@PB_W@Z ; operator==(UString const &,wchar_t const *)
.text:00001ABD                 movzx   edx, al
.text:00001AC0                 test    edx, edx
.text:00001AC2                 jz      short loc_1AD0
.text:00001AC4                 mov     eax, [ebp+this]
.text:00001AC7                 mov     byte ptr [eax+0B6h], 2
.text:00001ACE                 jmp     short loc_1B25
.text:00001AD0 ; ---------------------------------------------------------------------------
.text:00001AD0
.text:00001AD0 loc_1AD0:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3EAj
.text:00001AD0                 push    offset $SG71372 ; "256"
.text:00001AD5                 lea     ecx, [ebp+var_80]
.text:00001AD8                 push    ecx             ; int
.text:00001AD9                 call    ??8@YG_NABVUString@@PB_W@Z ; operator==(UString const &,wchar_t const *)
.text:00001ADE                 movzx   edx, al
.text:00001AE1                 test    edx, edx
.text:00001AE3                 jnz     short loc_1AF4
.text:00001AE5                 lea     ecx, [ebp+var_80] ; this
.text:00001AE8                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001AED                 movzx   eax, al
.text:00001AF0                 test    eax, eax
.text:00001AF2                 jz      short loc_1B00
.text:00001AF4
.text:00001AF4 loc_1AF4:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+40Bj
.text:00001AF4                 mov     ecx, [ebp+this]
.text:00001AF7                 mov     byte ptr [ecx+0B6h], 3
.text:00001AFE                 jmp     short loc_1B25
.text:00001B00 ; ---------------------------------------------------------------------------
.text:00001B00
.text:00001B00 loc_1B00:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+41Aj
.text:00001B00                 mov     [ebp+var_D8], 80070057h
.text:00001B0A                 lea     ecx, [ebp+var_80] ; this
.text:00001B0D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001B12                 lea     ecx, [ebp+var_18] ; this
.text:00001B15                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001B1A                 mov     eax, [ebp+var_D8]
.text:00001B20                 jmp     loc_1EA7
.text:00001B25 ; ---------------------------------------------------------------------------
.text:00001B25
.text:00001B25 loc_1B25:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3D5j
.text:00001B25                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3F6j ...
.text:00001B25                 mov     edx, [ebp+this]
.text:00001B28                 mov     byte ptr [edx+0B5h], 1
.text:00001B2F                 mov     eax, [ebp+this]
.text:00001B32                 mov     byte ptr [eax+0BCh], 1
.text:00001B39                 jmp     short loc_1B8B
.text:00001B3B ; ---------------------------------------------------------------------------
.text:00001B3B
.text:00001B3B loc_1B3B:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3A6j
.text:00001B3B                 push    offset $SG71378 ; "zipcrypto"
.text:00001B40                 lea     ecx, [ebp+var_80]
.text:00001B43                 push    ecx             ; int
.text:00001B44                 call    ??8@YG_NABVUString@@PB_W@Z ; operator==(UString const &,wchar_t const *)
.text:00001B49                 movzx   edx, al
.text:00001B4C                 test    edx, edx
.text:00001B4E                 jz      short loc_1B66
.text:00001B50                 mov     eax, [ebp+this]
.text:00001B53                 mov     byte ptr [eax+0B5h], 0
.text:00001B5A                 mov     ecx, [ebp+this]
.text:00001B5D                 mov     byte ptr [ecx+0BCh], 1
.text:00001B64                 jmp     short loc_1B8B
.text:00001B66 ; ---------------------------------------------------------------------------
.text:00001B66
.text:00001B66 loc_1B66:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+476j
.text:00001B66                 mov     [ebp+var_DC], 80070057h
.text:00001B70                 lea     ecx, [ebp+var_80] ; this
.text:00001B73                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001B78                 lea     ecx, [ebp+var_18] ; this
.text:00001B7B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001B80                 mov     eax, [ebp+var_DC]
.text:00001B86                 jmp     loc_1EA7
.text:00001B8B ; ---------------------------------------------------------------------------
.text:00001B8B
.text:00001B8B loc_1B8B:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+461j
.text:00001B8B                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+48Cj
.text:00001B8B                 lea     ecx, [ebp+var_80] ; this
.text:00001B8E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001B93                 jmp     loc_1E98
.text:00001B98 ; ---------------------------------------------------------------------------
.text:00001B98
.text:00001B98 loc_1B98:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+34Fj
.text:00001B98                 push    offset $SG71384 ; "mt"
.text:00001B9D                 lea     ecx, [ebp+var_18] ; this
.text:00001BA0                 call    ?IsPrefixedBy@UString@@QBE_NPB_W@Z ; UString::IsPrefixedBy(wchar_t const *)
.text:00001BA5                 movzx   edx, al
.text:00001BA8                 test    edx, edx
.text:00001BAA                 jz      short loc_1C27
.text:00001BAC                 push    2               ; unsigned int
.text:00001BAE                 lea     ecx, [ebp+var_18] ; this
.text:00001BB1                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00001BB6                 push    eax
.text:00001BB7                 lea     ecx, [ebp+var_E8]
.text:00001BBD                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00001BC2                 mov     eax, [ebp+this]
.text:00001BC5                 add     eax, 0B0h ; '¦'
.text:00001BCA                 push    eax             ; unsigned int *
.text:00001BCB                 mov     ecx, [ebp+var_4]
.text:00001BCE                 push    ecx             ; unsigned int
.text:00001BCF                 mov     edx, [ebp+var_20]
.text:00001BD2                 push    edx             ; struct tagPROPVARIANT *
.text:00001BD3                 lea     eax, [ebp+var_E8]
.text:00001BD9                 push    eax             ; struct UString *
.text:00001BDA                 call    ?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z ; ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)
.text:00001BDF                 mov     [ebp+var_88], eax
.text:00001BE5                 lea     ecx, [ebp+var_E8] ; this
.text:00001BEB                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001BF0                 cmp     [ebp+var_88], 0
.text:00001BF7                 jz      short loc_1C18
.text:00001BF9                 mov     ecx, [ebp+var_88]
.text:00001BFF                 mov     [ebp+var_EC], ecx
.text:00001C05                 lea     ecx, [ebp+var_18] ; this
.text:00001C08                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001C0D                 mov     eax, [ebp+var_EC]
.text:00001C13                 jmp     loc_1EA7
.text:00001C18 ; ---------------------------------------------------------------------------
.text:00001C18
.text:00001C18 loc_1C18:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+51Fj
.text:00001C18                 mov     edx, [ebp+this]
.text:00001C1B                 mov     byte ptr [edx+0B4h], 1
.text:00001C22                 jmp     loc_1E98
.text:00001C27 ; ---------------------------------------------------------------------------
.text:00001C27
.text:00001C27 loc_1C27:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+4D2j
.text:00001C27                 push    offset $SG71391 ; "tc"
.text:00001C2C                 lea     ecx, [ebp+var_18] ; this
.text:00001C2F                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00001C34                 movzx   eax, al
.text:00001C37                 test    eax, eax
.text:00001C39                 jz      short loc_1C81
.text:00001C3B                 mov     ecx, [ebp+this]
.text:00001C3E                 add     ecx, 0BDh ; '+'
.text:00001C44                 push    ecx             ; bool *
.text:00001C45                 mov     edx, [ebp+var_20]
.text:00001C48                 push    edx             ; struct tagPROPVARIANT *
.text:00001C49                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:00001C4E                 mov     [ebp+var_8C], eax
.text:00001C54                 cmp     [ebp+var_8C], 0
.text:00001C5B                 jz      short loc_1C7C
.text:00001C5D                 mov     eax, [ebp+var_8C]
.text:00001C63                 mov     [ebp+var_F0], eax
.text:00001C69                 lea     ecx, [ebp+var_18] ; this
.text:00001C6C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001C71                 mov     eax, [ebp+var_F0]
.text:00001C77                 jmp     loc_1EA7
.text:00001C7C ; ---------------------------------------------------------------------------
.text:00001C7C
.text:00001C7C loc_1C7C:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+583j
.text:00001C7C                 jmp     loc_1E98
.text:00001C81 ; ---------------------------------------------------------------------------
.text:00001C81
.text:00001C81 loc_1C81:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+561j
.text:00001C81                 push    offset $SG71397 ; "cl"
.text:00001C86                 lea     ecx, [ebp+var_18] ; this
.text:00001C89                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00001C8E                 movzx   ecx, al
.text:00001C91                 test    ecx, ecx
.text:00001C93                 jz      short loc_1CF3
.text:00001C95                 mov     edx, [ebp+this]
.text:00001C98                 add     edx, 0BFh ; '+'
.text:00001C9E                 push    edx             ; bool *
.text:00001C9F                 mov     eax, [ebp+var_20]
.text:00001CA2                 push    eax             ; struct tagPROPVARIANT *
.text:00001CA3                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:00001CA8                 mov     [ebp+var_90], eax
.text:00001CAE                 cmp     [ebp+var_90], 0
.text:00001CB5                 jz      short loc_1CD6
.text:00001CB7                 mov     ecx, [ebp+var_90]
.text:00001CBD                 mov     [ebp+var_F4], ecx
.text:00001CC3                 lea     ecx, [ebp+var_18] ; this
.text:00001CC6                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001CCB                 mov     eax, [ebp+var_F4]
.text:00001CD1                 jmp     loc_1EA7
.text:00001CD6 ; ---------------------------------------------------------------------------
.text:00001CD6
.text:00001CD6 loc_1CD6:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+5DDj
.text:00001CD6                 mov     edx, [ebp+this]
.text:00001CD9                 movzx   eax, byte ptr [edx+0BFh]
.text:00001CE0                 test    eax, eax
.text:00001CE2                 jz      short loc_1CEE
.text:00001CE4                 mov     ecx, [ebp+this]
.text:00001CE7                 mov     byte ptr [ecx+0C0h], 0
.text:00001CEE
.text:00001CEE loc_1CEE:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+60Aj
.text:00001CEE                 jmp     loc_1E98
.text:00001CF3 ; ---------------------------------------------------------------------------
.text:00001CF3
.text:00001CF3 loc_1CF3:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+5BBj
.text:00001CF3                 push    offset $SG71404 ; "cu"
.text:00001CF8                 lea     ecx, [ebp+var_18] ; this
.text:00001CFB                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00001D00                 movzx   edx, al
.text:00001D03                 test    edx, edx
.text:00001D05                 jz      short loc_1D64
.text:00001D07                 mov     eax, [ebp+this]
.text:00001D0A                 add     eax, 0C0h ; '+'
.text:00001D0F                 push    eax             ; bool *
.text:00001D10                 mov     ecx, [ebp+var_20]
.text:00001D13                 push    ecx             ; struct tagPROPVARIANT *
.text:00001D14                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:00001D19                 mov     [ebp+var_94], eax
.text:00001D1F                 cmp     [ebp+var_94], 0
.text:00001D26                 jz      short loc_1D47
.text:00001D28                 mov     edx, [ebp+var_94]
.text:00001D2E                 mov     [ebp+var_F8], edx
.text:00001D34                 lea     ecx, [ebp+var_18] ; this
.text:00001D37                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001D3C                 mov     eax, [ebp+var_F8]
.text:00001D42                 jmp     loc_1EA7
.text:00001D47 ; ---------------------------------------------------------------------------
.text:00001D47
.text:00001D47 loc_1D47:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+64Ej
.text:00001D47                 mov     eax, [ebp+this]
.text:00001D4A                 movzx   ecx, byte ptr [eax+0C0h]
.text:00001D51                 test    ecx, ecx
.text:00001D53                 jz      short loc_1D5F
.text:00001D55                 mov     edx, [ebp+this]
.text:00001D58                 mov     byte ptr [edx+0BFh], 0
.text:00001D5F
.text:00001D5F loc_1D5F:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+67Bj
.text:00001D5F                 jmp     loc_1E98
.text:00001D64 ; ---------------------------------------------------------------------------
.text:00001D64
.text:00001D64 loc_1D64:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+62Dj
.text:00001D64                 push    offset $SG71411 ; "cp"
.text:00001D69                 lea     ecx, [ebp+var_18] ; this
.text:00001D6C                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00001D71                 movzx   eax, al
.text:00001D74                 test    eax, eax
.text:00001D76                 jz      loc_1E04
.text:00001D7C                 mov     [ebp+var_9C], 1
.text:00001D86                 push    offset $SG71415
.text:00001D8B                 lea     ecx, [ebp+var_104]
.text:00001D91                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00001D96                 lea     ecx, [ebp+var_9C]
.text:00001D9C                 push    ecx             ; unsigned int *
.text:00001D9D                 mov     edx, [ebp+var_20]
.text:00001DA0                 push    edx             ; struct tagPROPVARIANT *
.text:00001DA1                 lea     eax, [ebp+var_104]
.text:00001DA7                 push    eax             ; struct UString *
.text:00001DA8                 call    ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)
.text:00001DAD                 mov     [ebp+var_A4], eax
.text:00001DB3                 lea     ecx, [ebp+var_104] ; this
.text:00001DB9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001DBE                 cmp     [ebp+var_A4], 0
.text:00001DC5                 jz      short loc_1DE6
.text:00001DC7                 mov     ecx, [ebp+var_A4]
.text:00001DCD                 mov     [ebp+var_108], ecx
.text:00001DD3                 lea     ecx, [ebp+var_18] ; this
.text:00001DD6                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001DDB                 mov     eax, [ebp+var_108]
.text:00001DE1                 jmp     loc_1EA7
.text:00001DE6 ; ---------------------------------------------------------------------------
.text:00001DE6
.text:00001DE6 loc_1DE6:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+6EDj
.text:00001DE6                 mov     edx, [ebp+this]
.text:00001DE9                 mov     byte ptr [edx+0C1h], 1
.text:00001DF0                 mov     eax, [ebp+this]
.text:00001DF3                 mov     ecx, [ebp+var_9C]
.text:00001DF9                 mov     [eax+0C4h], ecx
.text:00001DFF                 jmp     loc_1E98
.text:00001E04 ; ---------------------------------------------------------------------------
.text:00001E04
.text:00001E04 loc_1E04:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+69Ej
.text:00001E04                 push    offset $SG71420 ; "rsfx"
.text:00001E09                 lea     ecx, [ebp+var_18] ; this
.text:00001E0C                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00001E11                 movzx   edx, al
.text:00001E14                 test    edx, edx
.text:00001E16                 jz      short loc_1E57
.text:00001E18                 mov     eax, [ebp+this]
.text:00001E1B                 add     eax, 0BEh ; '+'
.text:00001E20                 push    eax             ; bool *
.text:00001E21                 mov     ecx, [ebp+var_20]
.text:00001E24                 push    ecx             ; struct tagPROPVARIANT *
.text:00001E25                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:00001E2A                 mov     [ebp+var_A8], eax
.text:00001E30                 cmp     [ebp+var_A8], 0
.text:00001E37                 jz      short loc_1E55
.text:00001E39                 mov     edx, [ebp+var_A8]
.text:00001E3F                 mov     [ebp+var_10C], edx
.text:00001E45                 lea     ecx, [ebp+var_18] ; this
.text:00001E48                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001E4D                 mov     eax, [ebp+var_10C]
.text:00001E53                 jmp     short loc_1EA7
.text:00001E55 ; ---------------------------------------------------------------------------
.text:00001E55
.text:00001E55 loc_1E55:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+75Fj
.text:00001E55                 jmp     short loc_1E98
.text:00001E57 ; ---------------------------------------------------------------------------
.text:00001E57
.text:00001E57 loc_1E57:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+73Ej
.text:00001E57                 mov     eax, [ebp+var_20]
.text:00001E5A                 push    eax             ; struct tagPROPVARIANT *
.text:00001E5B                 lea     ecx, [ebp+var_18]
.text:00001E5E                 push    ecx             ; struct UString *
.text:00001E5F                 mov     ecx, [ebp+this]
.text:00001E62                 add     ecx, 0A0h ; 'á' ; this
.text:00001E68                 call    ?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)
.text:00001E6D                 mov     [ebp+var_AC], eax
.text:00001E73                 cmp     [ebp+var_AC], 0
.text:00001E7A                 jz      short loc_1E98
.text:00001E7C                 mov     edx, [ebp+var_AC]
.text:00001E82                 mov     [ebp+var_110], edx
.text:00001E88                 lea     ecx, [ebp+var_18] ; this
.text:00001E8B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001E90                 mov     eax, [ebp+var_110]
.text:00001E96                 jmp     short loc_1EA7
.text:00001E98 ; ---------------------------------------------------------------------------
.text:00001E98
.text:00001E98 loc_1E98:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+136j
.text:00001E98                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_1A10j ...
.text:00001E98                 lea     ecx, [ebp+var_18] ; this
.text:00001E9B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001EA0                 jmp     loc_1714
.text:00001EA5 ; ---------------------------------------------------------------------------
.text:00001EA5
.text:00001EA5 loc_1EA5:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+4Bj
.text:00001EA5                 xor     eax, eax
.text:00001EA7
.text:00001EA7 loc_1EA7:                               ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+92j
.text:00001EA7                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+113j ...
.text:00001EA7                 push    edx
.text:00001EA8                 mov     ecx, ebp
.text:00001EAA                 push    eax
.text:00001EAB                 lea     edx, $LN71
.text:00001EB1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001EB6                 pop     eax
.text:00001EB7                 pop     edx
.text:00001EB8                 pop     edi
.text:00001EB9                 add     esp, 110h
.text:00001EBF                 cmp     ebp, esp
.text:00001EC1                 call    __RTC_CheckEsp
.text:00001EC6                 mov     esp, ebp
.text:00001EC8                 pop     ebp
.text:00001EC9                 retn    10h
.text:00001EC9 ?SetProperties@CHandler@NZip@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z endp
.text:00001EC9
.text:00001EC9 ; ---------------------------------------------------------------------------
.text:00001ECC $LN71           dd 6                    ; DATA XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+7D3o
.text:00001ED0                 dd offset $LN70
.text:00001ED4 $LN70           dd 0FFFFFFE8h, 0Ch      ; DATA XREF: .text:00001ED0o
.text:00001EDC                 dd offset $LN64         ; "name"
.text:00001EE0                 dd 0FFFFFFD8h, 4
.text:00001EE8                 dd offset $LN65         ; "level"
.text:00001EEC                 dd 0FFFFFFC0h, 0Ch
.text:00001EF4                 dd offset $LN66
.text:00001EF8                 dd 0FFFFFFACh, 0Ch
.text:00001F00                 dd offset $LN67
.text:00001F04                 dd 0FFFFFF80h, 0Ch
.text:00001F0C                 dd offset $LN68
.text:00001F10                 dd 0FFFFFF64h, 4
.text:00001F18                 dd offset $LN69
.text:00001F1C $LN69           db 63h, 70h, 0          ; DATA XREF: .text:00001F18o
.text:00001F1F $LN68           db 6Dh                  ; DATA XREF: .text:00001F0Co
.text:00001F20                 db 0
.text:00001F21 $LN67           db 6Dh, 32h, 0          ; DATA XREF: .text:00001F00o
.text:00001F24 $LN66           db 6Dh, 0               ; DATA XREF: .text:00001EF4o
.text:00001F26 $LN65           db 'level',0            ; DATA XREF: .text:00001EE8o
.text:00001F2C $LN64           db 'name',0             ; DATA XREF: .text:00001EDCo
.text:00001F31                 align 4
.text:00001F31 _text           ends
.text:00001F31
.rtc$TMZ:00001F34 ; ===========================================================================
.rtc$TMZ:00001F34
.rtc$TMZ:00001F34 ; Segment type: Pure data
.rtc$TMZ:00001F34 ; Segment permissions: Read
.rtc$TMZ:00001F34 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001F34                 assume cs:_rtc$TMZ
.rtc$TMZ:00001F34                 ;org 1F34h
.rtc$TMZ:00001F34 ; COMDAT (pick any)
.rtc$TMZ:00001F34 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001F34 _rtc$TMZ        ends
.rtc$TMZ:00001F34
.rtc$IMZ:00001F38 ; ===========================================================================
.rtc$IMZ:00001F38
.rtc$IMZ:00001F38 ; Segment type: Pure data
.rtc$IMZ:00001F38 ; Segment permissions: Read
.rtc$IMZ:00001F38 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001F38                 assume cs:_rtc$IMZ
.rtc$IMZ:00001F38                 ;org 1F38h
.rtc$IMZ:00001F38 ; COMDAT (pick any)
.rtc$IMZ:00001F38 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001F38 _rtc$IMZ        ends
.rtc$IMZ:00001F38
.text$x:00001F3C ; ===========================================================================
.text$x:00001F3C
.text$x:00001F3C ; Segment type: Pure code
.text$x:00001F3C ; Segment permissions: Read/Execute
.text$x:00001F3C _text$x         segment para public 'CODE' use32
.text$x:00001F3C                 assume cs:_text$x
.text$x:00001F3C                 ;org 1F3Ch
.text$x:00001F3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001F3C
.text$x:00001F3C ; =============== S U B R O U T I N E =======================================
.text$x:00001F3C
.text$x:00001F3C
.text$x:00001F3C __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3 proc near
.text$x:00001F3C                                         ; DATA XREF: .xdata$x:000020B0o
.text$x:00001F3C                 lea     ecx, [ebp-20h]
.text$x:00001F3F                 jmp     ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)
.text$x:00001F3F __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3 endp
.text$x:00001F3F
.text$x:00001F44
.text$x:00001F44 ; =============== S U B R O U T I N E =======================================
.text$x:00001F44
.text$x:00001F44
.text$x:00001F44 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4 proc near
.text$x:00001F44                                         ; DATA XREF: .xdata$x:000020B8o
.text$x:00001F44                 lea     ecx, [ebp-84h]  ; this
.text$x:00001F4A                 jmp     ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text$x:00001F4A __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4 endp
.text$x:00001F4A
.text$x:00001F4F
.text$x:00001F4F ; =============== S U B R O U T I N E =======================================
.text$x:00001F4F
.text$x:00001F4F
.text$x:00001F4F __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5 proc near
.text$x:00001F4F                                         ; DATA XREF: .xdata$x:000020C0o
.text$x:00001F4F                 lea     ecx, [ebp-0C4h] ; this
.text$x:00001F55                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001F55 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5 endp
.text$x:00001F55
.text$x:00001F5A
.text$x:00001F5A ; =============== S U B R O U T I N E =======================================
.text$x:00001F5A
.text$x:00001F5A
.text$x:00001F5A __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6 proc near
.text$x:00001F5A                                         ; DATA XREF: .xdata$x:000020C8o
.text$x:00001F5A                 lea     ecx, [ebp-0DCh] ; this
.text$x:00001F60                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00001F60 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6 endp
.text$x:00001F60
.text$x:00001F65
.text$x:00001F65 ; =============== S U B R O U T I N E =======================================
.text$x:00001F65
.text$x:00001F65
.text$x:00001F65 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7 proc near
.text$x:00001F65                                         ; DATA XREF: .xdata$x:000020D0o
.text$x:00001F65                 lea     ecx, [ebp-0F8h] ; this
.text$x:00001F6B                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00001F6B __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7 endp
.text$x:00001F6B
.text$x:00001F70
.text$x:00001F70 ; =============== S U B R O U T I N E =======================================
.text$x:00001F70
.text$x:00001F70
.text$x:00001F70 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8 proc near
.text$x:00001F70                                         ; DATA XREF: .xdata$x:000020D8o
.text$x:00001F70                 lea     ecx, [ebp-114h] ; this
.text$x:00001F76                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00001F76 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8 endp
.text$x:00001F76
.text$x:00001F7B
.text$x:00001F7B ; =============== S U B R O U T I N E =======================================
.text$x:00001F7B
.text$x:00001F7B
.text$x:00001F7B __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9 proc near
.text$x:00001F7B                                         ; DATA XREF: .xdata$x:000020E0o
.text$x:00001F7B                 lea     ecx, [ebp-130h] ; this
.text$x:00001F81                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00001F81 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9 endp
.text$x:00001F81
.text$x:00001F86
.text$x:00001F86 ; =============== S U B R O U T I N E =======================================
.text$x:00001F86
.text$x:00001F86
.text$x:00001F86 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10 proc near
.text$x:00001F86                                         ; DATA XREF: .xdata$x:000020E8o
.text$x:00001F86                 lea     ecx, [ebp-268h] ; this
.text$x:00001F8C                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001F8C __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10 endp
.text$x:00001F8C
.text$x:00001F91
.text$x:00001F91 ; =============== S U B R O U T I N E =======================================
.text$x:00001F91
.text$x:00001F91
.text$x:00001F91 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11 proc near
.text$x:00001F91                                         ; DATA XREF: .xdata$x:000020F0o
.text$x:00001F91                 lea     ecx, [ebp-278h] ; this
.text$x:00001F97                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001F97 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11 endp
.text$x:00001F97
.text$x:00001F9C
.text$x:00001F9C ; =============== S U B R O U T I N E =======================================
.text$x:00001F9C
.text$x:00001F9C
.text$x:00001F9C __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12 proc near
.text$x:00001F9C                                         ; DATA XREF: .xdata$x:000020F8o
.text$x:00001F9C                 mov     eax, [ebp-2C4h]
.text$x:00001FA2                 and     eax, 1
.text$x:00001FA5                 jz      locret_1FBD
.text$x:00001FAB                 and     dword ptr [ebp-2C4h], 0FFFFFFFEh
.text$x:00001FB2                 lea     ecx, [ebp-284h] ; this
.text$x:00001FB8                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001FBD ; ---------------------------------------------------------------------------
.text$x:00001FBD
.text$x:00001FBD locret_1FBD:                            ; CODE XREF: __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12+9j
.text$x:00001FBD                 retn
.text$x:00001FBD __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12 endp
.text$x:00001FBD
.text$x:00001FBE
.text$x:00001FBE ; =============== S U B R O U T I N E =======================================
.text$x:00001FBE
.text$x:00001FBE
.text$x:00001FBE __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$13 proc near
.text$x:00001FBE                                         ; DATA XREF: .xdata$x:00002100o
.text$x:00001FBE                 lea     ecx, [ebp-18Ch] ; this
.text$x:00001FC4                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00001FC4 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$13 endp
.text$x:00001FC4
.text$x:00001FC9
.text$x:00001FC9 ; =============== S U B R O U T I N E =======================================
.text$x:00001FC9
.text$x:00001FC9
.text$x:00001FC9 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$14 proc near
.text$x:00001FC9                                         ; DATA XREF: .xdata$x:00002108o
.text$x:00001FC9                 lea     ecx, [ebp-19Ch]
.text$x:00001FCF                 jmp     ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>(void)
.text$x:00001FCF __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$14 endp
.text$x:00001FCF
.text$x:00001FD4
.text$x:00001FD4 ; =============== S U B R O U T I N E =======================================
.text$x:00001FD4
.text$x:00001FD4
.text$x:00001FD4 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$15 proc near
.text$x:00001FD4                                         ; DATA XREF: .xdata$x:00002110o
.text$x:00001FD4                 lea     ecx, [ebp-1A8h]
.text$x:00001FDA                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>(void)
.text$x:00001FDA __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$15 endp
.text$x:00001FDA
.text$x:00001FDF
.text$x:00001FDF ; =============== S U B R O U T I N E =======================================
.text$x:00001FDF
.text$x:00001FDF
.text$x:00001FDF __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$16 proc near
.text$x:00001FDF                                         ; DATA XREF: .xdata$x:00002118o
.text$x:00001FDF                 lea     ecx, [ebp-1F8h] ; this
.text$x:00001FE5                 jmp     ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:00001FE5 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$16 endp
.text$x:00001FE5
.text$x:00001FEA
.text$x:00001FEA ; =============== S U B R O U T I N E =======================================
.text$x:00001FEA
.text$x:00001FEA
.text$x:00001FEA __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$17 proc near
.text$x:00001FEA                                         ; DATA XREF: .xdata$x:00002120o
.text$x:00001FEA                 lea     ecx, [ebp-204h] ; this
.text$x:00001FF0                 jmp     ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text$x:00001FF0 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$17 endp
.text$x:00001FF0
.text$x:00001FF5
.text$x:00001FF5 ; =============== S U B R O U T I N E =======================================
.text$x:00001FF5
.text$x:00001FF5
.text$x:00001FF5 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$18 proc near
.text$x:00001FF5                                         ; DATA XREF: .xdata$x:00002128o
.text$x:00001FF5                 lea     ecx, [ebp-2A4h] ; this
.text$x:00001FFB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001FFB __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$18 endp
.text$x:00001FFB
.text$x:00002000
.text$x:00002000 ; =============== S U B R O U T I N E =======================================
.text$x:00002000
.text$x:00002000
.text$x:00002000 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$19 proc near
.text$x:00002000                                         ; DATA XREF: .xdata$x:00002130o
.text$x:00002000                 lea     ecx, [ebp-2B0h] ; this
.text$x:00002006                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002006 __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$19 endp
.text$x:00002006
.text$x:0000200B
.text$x:0000200B ; =============== S U B R O U T I N E =======================================
.text$x:0000200B
.text$x:0000200B
.text$x:0000200B __ehhandler$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z proc near
.text$x:0000200B                                         ; DATA XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5o
.text$x:0000200B
.text$x:0000200B arg_4           = dword ptr  8
.text$x:0000200B
.text$x:0000200B                 mov     edx, [esp+arg_4]
.text$x:0000200F                 lea     eax, [edx+0Ch]
.text$x:00002012                 mov     ecx, [edx-3A4h]
.text$x:00002018                 xor     ecx, eax
.text$x:0000201A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000201F                 mov     eax, offset __ehfuncinfo$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text$x:00002024                 jmp     ___CxxFrameHandler3
.text$x:00002024 __ehhandler$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z endp
.text$x:00002024
.text$x:00002029
.text$x:00002029 ; =============== S U B R O U T I N E =======================================
.text$x:00002029
.text$x:00002029
.text$x:00002029 __unwindfunclet$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z$0 proc near
.text$x:00002029                                         ; DATA XREF: .xdata$x:00002140o
.text$x:00002029                 lea     ecx, [ebp-20h]  ; this
.text$x:0000202C                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000202C __unwindfunclet$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z$0 endp
.text$x:0000202C
.text$x:00002031
.text$x:00002031 ; =============== S U B R O U T I N E =======================================
.text$x:00002031
.text$x:00002031
.text$x:00002031 __ehhandler$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z proc near
.text$x:00002031                                         ; DATA XREF: NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)+5o
.text$x:00002031
.text$x:00002031 arg_4           = dword ptr  8
.text$x:00002031
.text$x:00002031                 mov     edx, [esp+arg_4]
.text$x:00002035                 lea     eax, [edx+0Ch]
.text$x:00002038                 mov     ecx, [edx-34h]
.text$x:0000203B                 xor     ecx, eax
.text$x:0000203D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002042                 mov     eax, offset __ehfuncinfo$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z
.text$x:00002047                 jmp     ___CxxFrameHandler3
.text$x:00002047 __ehhandler$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z endp
.text$x:00002047
.text$x:00002047 _text$x         ends
.text$x:00002047
.xdata$x:0000204C ; ===========================================================================
.xdata$x:0000204C
.xdata$x:0000204C ; Segment type: Pure data
.xdata$x:0000204C ; Segment permissions: Read
.xdata$x:0000204C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000204C                 assume cs:_xdata$x
.xdata$x:0000204C                 ;org 204Ch
.xdata$x:0000204C __tryblocktable$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db    0
.xdata$x:0000204C                                         ; DATA XREF: .xdata$x:00002090o
.xdata$x:0000204D                 db    0
.xdata$x:0000204E                 db    0
.xdata$x:0000204F                 db    0
.xdata$x:00002050                 db  11h
.xdata$x:00002051                 db    0
.xdata$x:00002052                 db    0
.xdata$x:00002053                 db    0
.xdata$x:00002054                 db  12h
.xdata$x:00002055                 db    0
.xdata$x:00002056                 db    0
.xdata$x:00002057                 db    0
.xdata$x:00002058                 db    2
.xdata$x:00002059                 db    0
.xdata$x:0000205A                 db    0
.xdata$x:0000205B                 db    0
.xdata$x:0000205C                 dd offset __catchsym$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$20
.xdata$x:00002060 __catchsym$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$20 db    9
.xdata$x:00002060                                         ; DATA XREF: .xdata$x:0000205Co
.xdata$x:00002061                 db    0
.xdata$x:00002062                 db    0
.xdata$x:00002063                 db    0
.xdata$x:00002064                 dd offset ??_R0?AUCSystemException@@@8 ; CSystemException `RTTI Type Descriptor'
.xdata$x:00002068                 db 0DCh ; _
.xdata$x:00002069                 db 0FDh ; ²
.xdata$x:0000206A                 db 0FFh
.xdata$x:0000206B                 db 0FFh
.xdata$x:0000206C                 dd offset __catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0
.xdata$x:00002070                 dd offset off_40
.xdata$x:00002074                 db    0
.xdata$x:00002075                 db    0
.xdata$x:00002076                 db    0
.xdata$x:00002077                 db    0
.xdata$x:00002078                 db    0
.xdata$x:00002079                 db    0
.xdata$x:0000207A                 db    0
.xdata$x:0000207B                 db    0
.xdata$x:0000207C                 dd offset __catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1
.xdata$x:00002080 __ehfuncinfo$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db  22h ; "
.xdata$x:00002080                                         ; DATA XREF: __ehhandler$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z+14o
.xdata$x:00002081                 db    5
.xdata$x:00002082                 db  93h ; ô
.xdata$x:00002083                 db  19h
.xdata$x:00002084                 db  13h
.xdata$x:00002085                 db    0
.xdata$x:00002086                 db    0
.xdata$x:00002087                 db    0
.xdata$x:00002088                 dd offset __unwindtable$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.xdata$x:0000208C                 db    1
.xdata$x:0000208D                 db    0
.xdata$x:0000208E                 db    0
.xdata$x:0000208F                 db    0
.xdata$x:00002090                 dd offset __tryblocktable$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.xdata$x:00002094                 align 10h
.xdata$x:000020A0                 db    1
.xdata$x:000020A1                 db    0
.xdata$x:000020A2                 db    0
.xdata$x:000020A3                 db    0
.xdata$x:000020A4 __unwindtable$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db 0FFh
.xdata$x:000020A4                                         ; DATA XREF: .xdata$x:00002088o
.xdata$x:000020A5                 db 0FFh
.xdata$x:000020A6                 db 0FFh
.xdata$x:000020A7                 db 0FFh
.xdata$x:000020A8                 db    0
.xdata$x:000020A9                 db    0
.xdata$x:000020AA                 db    0
.xdata$x:000020AB                 db    0
.xdata$x:000020AC                 db    0
.xdata$x:000020AD                 db    0
.xdata$x:000020AE                 db    0
.xdata$x:000020AF                 db    0
.xdata$x:000020B0                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3
.xdata$x:000020B4                 db    1
.xdata$x:000020B5                 db    0
.xdata$x:000020B6                 db    0
.xdata$x:000020B7                 db    0
.xdata$x:000020B8                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4
.xdata$x:000020BC                 db    2
.xdata$x:000020BD                 db    0
.xdata$x:000020BE                 db    0
.xdata$x:000020BF                 db    0
.xdata$x:000020C0                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5
.xdata$x:000020C4                 db    3
.xdata$x:000020C5                 db    0
.xdata$x:000020C6                 db    0
.xdata$x:000020C7                 db    0
.xdata$x:000020C8                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6
.xdata$x:000020CC                 db    3
.xdata$x:000020CD                 db    0
.xdata$x:000020CE                 db    0
.xdata$x:000020CF                 db    0
.xdata$x:000020D0                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7
.xdata$x:000020D4                 db    3
.xdata$x:000020D5                 db    0
.xdata$x:000020D6                 db    0
.xdata$x:000020D7                 db    0
.xdata$x:000020D8                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8
.xdata$x:000020DC                 db    3
.xdata$x:000020DD                 db    0
.xdata$x:000020DE                 db    0
.xdata$x:000020DF                 db    0
.xdata$x:000020E0                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9
.xdata$x:000020E4                 db    3
.xdata$x:000020E5                 db    0
.xdata$x:000020E6                 db    0
.xdata$x:000020E7                 db    0
.xdata$x:000020E8                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10
.xdata$x:000020EC                 db    3
.xdata$x:000020ED                 db    0
.xdata$x:000020EE                 db    0
.xdata$x:000020EF                 db    0
.xdata$x:000020F0                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11
.xdata$x:000020F4                 db    3
.xdata$x:000020F5                 db    0
.xdata$x:000020F6                 db    0
.xdata$x:000020F7                 db    0
.xdata$x:000020F8                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12
.xdata$x:000020FC                 db    2
.xdata$x:000020FD                 db    0
.xdata$x:000020FE                 db    0
.xdata$x:000020FF                 db    0
.xdata$x:00002100                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$13
.xdata$x:00002104                 db    1
.xdata$x:00002105                 db    0
.xdata$x:00002106                 db    0
.xdata$x:00002107                 db    0
.xdata$x:00002108                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$14
.xdata$x:0000210C                 db  0Ch
.xdata$x:0000210D                 db    0
.xdata$x:0000210E                 db    0
.xdata$x:0000210F                 db    0
.xdata$x:00002110                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$15
.xdata$x:00002114                 db  0Ch
.xdata$x:00002115                 db    0
.xdata$x:00002116                 db    0
.xdata$x:00002117                 db    0
.xdata$x:00002118                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$16
.xdata$x:0000211C                 db  0Eh
.xdata$x:0000211D                 db    0
.xdata$x:0000211E                 db    0
.xdata$x:0000211F                 db    0
.xdata$x:00002120                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$17
.xdata$x:00002124                 db  0Fh
.xdata$x:00002125                 db    0
.xdata$x:00002126                 db    0
.xdata$x:00002127                 db    0
.xdata$x:00002128                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$18
.xdata$x:0000212C                 db  10h
.xdata$x:0000212D                 db    0
.xdata$x:0000212E                 db    0
.xdata$x:0000212F                 db    0
.xdata$x:00002130                 dd offset __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$19
.xdata$x:00002134                 db 0FFh
.xdata$x:00002135                 db 0FFh
.xdata$x:00002136                 db 0FFh
.xdata$x:00002137                 db 0FFh
.xdata$x:00002138                 db    0
.xdata$x:00002139                 db    0
.xdata$x:0000213A                 db    0
.xdata$x:0000213B                 db    0
.xdata$x:0000213C __unwindtable$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z db 0FFh
.xdata$x:0000213C                                         ; DATA XREF: .xdata$x:0000214Co
.xdata$x:0000213D                 db 0FFh
.xdata$x:0000213E                 db 0FFh
.xdata$x:0000213F                 db 0FFh
.xdata$x:00002140                 dd offset __unwindfunclet$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z$0
.xdata$x:00002144 __ehfuncinfo$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z db  22h ; "
.xdata$x:00002144                                         ; DATA XREF: __ehhandler$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z+11o
.xdata$x:00002145                 db    5
.xdata$x:00002146                 db  93h ; ô
.xdata$x:00002147                 db  19h
.xdata$x:00002148                 db    1
.xdata$x:00002149                 db    0
.xdata$x:0000214A                 db    0
.xdata$x:0000214B                 db    0
.xdata$x:0000214C                 dd offset __unwindtable$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z
.xdata$x:00002150                 db    0
.xdata$x:00002151                 db    0
.xdata$x:00002152                 db    0
.xdata$x:00002153                 db    0
.xdata$x:00002154                 db    0
.xdata$x:00002155                 db    0
.xdata$x:00002156                 db    0
.xdata$x:00002157                 db    0
.xdata$x:00002158                 db    0
.xdata$x:00002159                 db    0
.xdata$x:0000215A                 db    0
.xdata$x:0000215B                 db    0
.xdata$x:0000215C                 db    0
.xdata$x:0000215D                 db    0
.xdata$x:0000215E                 db    0
.xdata$x:0000215F                 db    0
.xdata$x:00002160                 db    0
.xdata$x:00002161                 db    0
.xdata$x:00002162                 db    0
.xdata$x:00002163                 db    0
.xdata$x:00002164                 db    1
.xdata$x:00002165                 db    0
.xdata$x:00002166                 db    0
.xdata$x:00002167                 db    0
.xdata$x:00002167 _xdata$x        ends
.xdata$x:00002167
.data:00002168 ; ===========================================================================
.data:00002168
.data:00002168 ; Segment type: Pure data
.data:00002168 ; Segment permissions: Read/Write
.data:00002168 _data           segment dword public 'DATA' use32
.data:00002168                 assume cs:_data
.data:00002168                 ;org 2168h
.data:00002168 ; COMDAT (pick any)
.data:00002168                 public ??_R0?AUCSystemException@@@8
.data:00002168 ; struct CSystemException `RTTI Type Descriptor'
.data:00002168 ??_R0?AUCSystemException@@@8 dd offset ??_7type_info@@6B@
.data:00002168                                         ; DATA XREF: .xdata$x:00002064o
.data:00002168                                         ; const type_info::`vftable'
.data:0000216C                 align 10h
.data:00002170 a_?aucsystemexc db '.?AUCSystemException@@',0
.data:00002187                 align 4
.data:00002187 _data           ends
.data:00002187
.text:00002188 ; ===========================================================================
.text:00002188
.text:00002188 ; Segment type: Pure code
.text:00002188 ; Segment permissions: Read/Execute
.text:00002188 _text           segment para public 'CODE' use32
.text:00002188                 assume cs:_text
.text:00002188                 ;org 2188h
.text:00002188 ; COMDAT (pick any)
.text:00002188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002188
.text:00002188 ; =============== S U B R O U T I N E =======================================
.text:00002188
.text:00002188 ; Attributes: bp-based frame
.text:00002188
.text:00002188 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00002188                 public ??1AString@@QAE@XZ
.text:00002188 ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A9Bp
.text:00002188                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1094p ...
.text:00002188
.text:00002188 var_8           = dword ptr -8
.text:00002188 var_4           = dword ptr -4
.text:00002188
.text:00002188                 push    ebp
.text:00002189                 mov     ebp, esp
.text:0000218B                 sub     esp, 8
.text:0000218E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002195                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000219C                 mov     [ebp+var_4], ecx
.text:0000219F                 mov     eax, [ebp+var_4]
.text:000021A2                 mov     ecx, [eax]
.text:000021A4                 mov     [ebp+var_8], ecx
.text:000021A7                 mov     edx, [ebp+var_8]
.text:000021AA                 push    edx             ; void *
.text:000021AB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000021B0                 add     esp, 4
.text:000021B3                 add     esp, 8
.text:000021B6                 cmp     ebp, esp
.text:000021B8                 call    __RTC_CheckEsp
.text:000021BD                 mov     esp, ebp
.text:000021BF                 pop     ebp
.text:000021C0                 retn
.text:000021C0 ??1AString@@QAE@XZ endp
.text:000021C0
.text:000021C0 ; ---------------------------------------------------------------------------
.text:000021C1                 align 4
.text:000021C1 _text           ends
.text:000021C1
.text:000021C4 ; ===========================================================================
.text:000021C4
.text:000021C4 ; Segment type: Pure code
.text:000021C4 ; Segment permissions: Read/Execute
.text:000021C4 _text           segment para public 'CODE' use32
.text:000021C4                 assume cs:_text
.text:000021C4                 ;org 21C4h
.text:000021C4 ; COMDAT (pick any)
.text:000021C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000021C4
.text:000021C4 ; =============== S U B R O U T I N E =======================================
.text:000021C4
.text:000021C4 ; Attributes: bp-based frame
.text:000021C4
.text:000021C4 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:000021C4                 public ?Len@AString@@QBEIXZ
.text:000021C4 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B9Fp
.text:000021C4                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+10B9p
.text:000021C4
.text:000021C4 var_4           = dword ptr -4
.text:000021C4
.text:000021C4                 push    ebp
.text:000021C5                 mov     ebp, esp
.text:000021C7                 push    ecx
.text:000021C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021CF                 mov     [ebp+var_4], ecx
.text:000021D2                 mov     eax, [ebp+var_4]
.text:000021D5                 mov     eax, [eax+4]
.text:000021D8                 mov     esp, ebp
.text:000021DA                 pop     ebp
.text:000021DB                 retn
.text:000021DB ?Len@AString@@QBEIXZ endp
.text:000021DB
.text:000021DB _text           ends
.text:000021DB
.text:000021DC ; ===========================================================================
.text:000021DC
.text:000021DC ; Segment type: Pure code
.text:000021DC ; Segment permissions: Read/Execute
.text:000021DC _text           segment para public 'CODE' use32
.text:000021DC                 assume cs:_text
.text:000021DC                 ;org 21DCh
.text:000021DC ; COMDAT (pick any)
.text:000021DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000021DC
.text:000021DC ; =============== S U B R O U T I N E =======================================
.text:000021DC
.text:000021DC ; Attributes: bp-based frame
.text:000021DC
.text:000021DC ; void __thiscall AString::Empty(AString *__hidden this)
.text:000021DC                 public ?Empty@AString@@QAEXXZ
.text:000021DC ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E46p
.text:000021DC
.text:000021DC var_4           = dword ptr -4
.text:000021DC
.text:000021DC                 push    ebp
.text:000021DD                 mov     ebp, esp
.text:000021DF                 push    ecx
.text:000021E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021E7                 mov     [ebp+var_4], ecx
.text:000021EA                 mov     eax, [ebp+var_4]
.text:000021ED                 mov     dword ptr [eax+4], 0
.text:000021F4                 mov     ecx, [ebp+var_4]
.text:000021F7                 mov     edx, [ecx]
.text:000021F9                 mov     byte ptr [edx], 0
.text:000021FC                 mov     esp, ebp
.text:000021FE                 pop     ebp
.text:000021FF                 retn
.text:000021FF ?Empty@AString@@QAEXXZ endp
.text:000021FF
.text:000021FF _text           ends
.text:000021FF
.text:00002200 ; ===========================================================================
.text:00002200
.text:00002200 ; Segment type: Pure code
.text:00002200 ; Segment permissions: Read/Execute
.text:00002200 _text           segment para public 'CODE' use32
.text:00002200                 assume cs:_text
.text:00002200                 ;org 2200h
.text:00002200 ; COMDAT (pick any)
.text:00002200                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002200
.text:00002200 ; =============== S U B R O U T I N E =======================================
.text:00002200
.text:00002200 ; Attributes: bp-based frame
.text:00002200
.text:00002200 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00002200                 public ??1UString@@QAE@XZ
.text:00002200 ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2FAp
.text:00002200                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+368p ...
.text:00002200
.text:00002200 var_8           = dword ptr -8
.text:00002200 var_4           = dword ptr -4
.text:00002200
.text:00002200                 push    ebp
.text:00002201                 mov     ebp, esp
.text:00002203                 sub     esp, 8
.text:00002206                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000220D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002214                 mov     [ebp+var_4], ecx
.text:00002217                 mov     eax, [ebp+var_4]
.text:0000221A                 mov     ecx, [eax]
.text:0000221C                 mov     [ebp+var_8], ecx
.text:0000221F                 mov     edx, [ebp+var_8]
.text:00002222                 push    edx             ; void *
.text:00002223                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002228                 add     esp, 4
.text:0000222B                 add     esp, 8
.text:0000222E                 cmp     ebp, esp
.text:00002230                 call    __RTC_CheckEsp
.text:00002235                 mov     esp, ebp
.text:00002237                 pop     ebp
.text:00002238                 retn
.text:00002238 ??1UString@@QAE@XZ endp
.text:00002238
.text:00002238 ; ---------------------------------------------------------------------------
.text:00002239                 align 4
.text:00002239 _text           ends
.text:00002239
.text:0000223C ; ===========================================================================
.text:0000223C
.text:0000223C ; Segment type: Pure code
.text:0000223C ; Segment permissions: Read/Execute
.text:0000223C _text           segment para public 'CODE' use32
.text:0000223C                 assume cs:_text
.text:0000223C                 ;org 223Ch
.text:0000223C ; COMDAT (pick any)
.text:0000223C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000223C
.text:0000223C ; =============== S U B R O U T I N E =======================================
.text:0000223C
.text:0000223C ; Attributes: bp-based frame
.text:0000223C
.text:0000223C ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:0000223C                 public ?IsEmpty@UString@@QBE_NXZ
.text:0000223C ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+940p
.text:0000223C                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+6Ep ...
.text:0000223C
.text:0000223C var_4           = dword ptr -4
.text:0000223C
.text:0000223C                 push    ebp
.text:0000223D                 mov     ebp, esp
.text:0000223F                 push    ecx
.text:00002240                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002247                 mov     [ebp+var_4], ecx
.text:0000224A                 mov     eax, [ebp+var_4]
.text:0000224D                 xor     ecx, ecx
.text:0000224F                 cmp     dword ptr [eax+4], 0
.text:00002253                 setz    cl
.text:00002256                 mov     al, cl
.text:00002258                 mov     esp, ebp
.text:0000225A                 pop     ebp
.text:0000225B                 retn
.text:0000225B ?IsEmpty@UString@@QBE_NXZ endp
.text:0000225B
.text:0000225B _text           ends
.text:0000225B
.text:0000225C ; ===========================================================================
.text:0000225C
.text:0000225C ; Segment type: Pure code
.text:0000225C ; Segment permissions: Read/Execute
.text:0000225C _text           segment para public 'CODE' use32
.text:0000225C                 assume cs:_text
.text:0000225C                 ;org 225Ch
.text:0000225C ; COMDAT (pick any)
.text:0000225C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000225C
.text:0000225C ; =============== S U B R O U T I N E =======================================
.text:0000225C
.text:0000225C ; Attributes: bp-based frame
.text:0000225C
.text:0000225C ; void __thiscall UString::Empty(UString *__hidden this)
.text:0000225C                 public ?Empty@UString@@QAEXXZ
.text:0000225C ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+462p
.text:0000225C
.text:0000225C var_4           = dword ptr -4
.text:0000225C
.text:0000225C                 push    ebp
.text:0000225D                 mov     ebp, esp
.text:0000225F                 push    ecx
.text:00002260                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002267                 mov     [ebp+var_4], ecx
.text:0000226A                 mov     eax, [ebp+var_4]
.text:0000226D                 mov     dword ptr [eax+4], 0
.text:00002274                 mov     ecx, [ebp+var_4]
.text:00002277                 mov     edx, [ecx]
.text:00002279                 xor     eax, eax
.text:0000227B                 mov     [edx], ax
.text:0000227E                 mov     esp, ebp
.text:00002280                 pop     ebp
.text:00002281                 retn
.text:00002281 ?Empty@UString@@QAEXXZ endp
.text:00002281
.text:00002281 ; ---------------------------------------------------------------------------
.text:00002282                 align 4
.text:00002282 _text           ends
.text:00002282
.text:00002284 ; ===========================================================================
.text:00002284
.text:00002284 ; Segment type: Pure code
.text:00002284 ; Segment permissions: Read/Execute
.text:00002284 _text           segment para public 'CODE' use32
.text:00002284                 assume cs:_text
.text:00002284                 ;org 2284h
.text:00002284 ; COMDAT (pick any)
.text:00002284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002284
.text:00002284 ; =============== S U B R O U T I N E =======================================
.text:00002284
.text:00002284 ; Attributes: bp-based frame
.text:00002284
.text:00002284 ; wchar_t __thiscall UString::Back(UString *__hidden this)
.text:00002284                 public ?Back@UString@@QBE_WXZ
.text:00002284 ?Back@UString@@QBE_WXZ proc near        ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+95Cp
.text:00002284
.text:00002284 var_4           = dword ptr -4
.text:00002284
.text:00002284                 push    ebp
.text:00002285                 mov     ebp, esp
.text:00002287                 push    ecx
.text:00002288                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000228F                 mov     [ebp+var_4], ecx
.text:00002292                 mov     eax, [ebp+var_4]
.text:00002295                 mov     ecx, [eax+4]
.text:00002298                 mov     edx, [ebp+var_4]
.text:0000229B                 mov     eax, [edx]
.text:0000229D                 mov     ax, [eax+ecx*2-2]
.text:000022A2                 mov     esp, ebp
.text:000022A4                 pop     ebp
.text:000022A5                 retn
.text:000022A5 ?Back@UString@@QBE_WXZ endp
.text:000022A5
.text:000022A5 ; ---------------------------------------------------------------------------
.text:000022A6                 align 4
.text:000022A6 _text           ends
.text:000022A6
.text:000022A8 ; ===========================================================================
.text:000022A8
.text:000022A8 ; Segment type: Pure code
.text:000022A8 ; Segment permissions: Read/Execute
.text:000022A8 _text           segment para public 'CODE' use32
.text:000022A8                 assume cs:_text
.text:000022A8                 ;org 22A8h
.text:000022A8 ; COMDAT (pick any)
.text:000022A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000022A8
.text:000022A8 ; =============== S U B R O U T I N E =======================================
.text:000022A8
.text:000022A8 ; Attributes: bp-based frame
.text:000022A8
.text:000022A8 ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:000022A8                 public ??YUString@@QAEAAV0@_W@Z
.text:000022A8 ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+9D8p
.text:000022A8
.text:000022A8 var_C           = dword ptr -0Ch
.text:000022A8 var_8           = dword ptr -8
.text:000022A8 var_4           = dword ptr -4
.text:000022A8 arg_0           = word ptr  8
.text:000022A8
.text:000022A8                 push    ebp
.text:000022A9                 mov     ebp, esp
.text:000022AB                 sub     esp, 0Ch
.text:000022AE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000022B5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000022BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000022C3                 mov     [ebp+var_4], ecx
.text:000022C6                 mov     eax, [ebp+var_4]
.text:000022C9                 mov     ecx, [ebp+var_4]
.text:000022CC                 mov     edx, [eax+8]
.text:000022CF                 cmp     edx, [ecx+4]
.text:000022D2                 jnz     short loc_22DC
.text:000022D4                 mov     ecx, [ebp+var_4] ; this
.text:000022D7                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:000022DC
.text:000022DC loc_22DC:                               ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:000022DC                 mov     eax, [ebp+var_4]
.text:000022DF                 mov     ecx, [eax+4]
.text:000022E2                 mov     [ebp+var_8], ecx
.text:000022E5                 mov     edx, [ebp+var_4]
.text:000022E8                 mov     eax, [edx]
.text:000022EA                 mov     [ebp+var_C], eax
.text:000022ED                 mov     ecx, [ebp+var_8]
.text:000022F0                 mov     edx, [ebp+var_C]
.text:000022F3                 mov     ax, [ebp+arg_0]
.text:000022F7                 mov     [edx+ecx*2], ax
.text:000022FB                 mov     ecx, [ebp+var_8]
.text:000022FE                 add     ecx, 1
.text:00002301                 mov     [ebp+var_8], ecx
.text:00002304                 xor     edx, edx
.text:00002306                 mov     eax, [ebp+var_8]
.text:00002309                 mov     ecx, [ebp+var_C]
.text:0000230C                 mov     [ecx+eax*2], dx
.text:00002310                 mov     edx, [ebp+var_4]
.text:00002313                 mov     eax, [ebp+var_8]
.text:00002316                 mov     [edx+4], eax
.text:00002319                 mov     eax, [ebp+var_4]
.text:0000231C                 add     esp, 0Ch
.text:0000231F                 cmp     ebp, esp
.text:00002321                 call    __RTC_CheckEsp
.text:00002326                 mov     esp, ebp
.text:00002328                 pop     ebp
.text:00002329                 retn    4
.text:00002329 ??YUString@@QAEAAV0@_W@Z endp
.text:00002329
.text:00002329 _text           ends
.text:00002329
.text:0000232C ; ===========================================================================
.text:0000232C
.text:0000232C ; Segment type: Pure code
.text:0000232C ; Segment permissions: Read/Execute
.text:0000232C _text           segment para public 'CODE' use32
.text:0000232C                 assume cs:_text
.text:0000232C                 ;org 232Ch
.text:0000232C ; COMDAT (pick any)
.text:0000232C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000232C
.text:0000232C ; =============== S U B R O U T I N E =======================================
.text:0000232C
.text:0000232C ; Attributes: bp-based frame
.text:0000232C
.text:0000232C ; bool __thiscall UString::IsAscii(UString *__hidden this)
.text:0000232C                 public ?IsAscii@UString@@QBE_NXZ
.text:0000232C ?IsAscii@UString@@QBE_NXZ proc near     ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B70p
.text:0000232C
.text:0000232C var_10          = dword ptr -10h
.text:0000232C var_C           = dword ptr -0Ch
.text:0000232C var_8           = dword ptr -8
.text:0000232C var_4           = dword ptr -4
.text:0000232C
.text:0000232C                 push    ebp
.text:0000232D                 mov     ebp, esp
.text:0000232F                 sub     esp, 10h
.text:00002332                 mov     eax, 0CCCCCCCCh
.text:00002337                 mov     [ebp+var_10], eax
.text:0000233A                 mov     [ebp+var_C], eax
.text:0000233D                 mov     [ebp+var_8], eax
.text:00002340                 mov     [ebp+var_4], eax
.text:00002343                 mov     [ebp+var_4], ecx
.text:00002346                 mov     ecx, [ebp+var_4] ; this
.text:00002349                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000234E                 mov     [ebp+var_8], eax
.text:00002351                 mov     eax, [ebp+var_4]
.text:00002354                 mov     ecx, [eax]
.text:00002356                 mov     [ebp+var_C], ecx
.text:00002359                 mov     [ebp+var_10], 0
.text:00002360                 jmp     short loc_236B
.text:00002362 ; ---------------------------------------------------------------------------
.text:00002362
.text:00002362 loc_2362:                               ; CODE XREF: UString::IsAscii(void):loc_2388j
.text:00002362                 mov     edx, [ebp+var_10]
.text:00002365                 add     edx, 1
.text:00002368                 mov     [ebp+var_10], edx
.text:0000236B
.text:0000236B loc_236B:                               ; CODE XREF: UString::IsAscii(void)+34j
.text:0000236B                 mov     eax, [ebp+var_10]
.text:0000236E                 cmp     eax, [ebp+var_8]
.text:00002371                 jnb     short loc_238A
.text:00002373                 mov     ecx, [ebp+var_10]
.text:00002376                 mov     edx, [ebp+var_C]
.text:00002379                 movzx   eax, word ptr [edx+ecx*2]
.text:0000237D                 cmp     eax, 80h ; 'Ç'
.text:00002382                 jl      short loc_2388
.text:00002384                 xor     al, al
.text:00002386                 jmp     short loc_238C
.text:00002388 ; ---------------------------------------------------------------------------
.text:00002388
.text:00002388 loc_2388:                               ; CODE XREF: UString::IsAscii(void)+56j
.text:00002388                 jmp     short loc_2362
.text:0000238A ; ---------------------------------------------------------------------------
.text:0000238A
.text:0000238A loc_238A:                               ; CODE XREF: UString::IsAscii(void)+45j
.text:0000238A                 mov     al, 1
.text:0000238C
.text:0000238C loc_238C:                               ; CODE XREF: UString::IsAscii(void)+5Aj
.text:0000238C                 add     esp, 10h
.text:0000238F                 cmp     ebp, esp
.text:00002391                 call    __RTC_CheckEsp
.text:00002396                 mov     esp, ebp
.text:00002398                 pop     ebp
.text:00002399                 retn
.text:00002399 ?IsAscii@UString@@QBE_NXZ endp
.text:00002399
.text:00002399 ; ---------------------------------------------------------------------------
.text:0000239A                 align 4
.text:0000239A _text           ends
.text:0000239A
.text:0000239C ; ===========================================================================
.text:0000239C
.text:0000239C ; Segment type: Pure code
.text:0000239C ; Segment permissions: Read/Execute
.text:0000239C _text           segment para public 'CODE' use32
.text:0000239C                 assume cs:_text
.text:0000239C                 ;org 239Ch
.text:0000239C ; COMDAT (pick any)
.text:0000239C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000239C
.text:0000239C ; =============== S U B R O U T I N E =======================================
.text:0000239C
.text:0000239C ; Attributes: bp-based frame
.text:0000239C
.text:0000239C ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:0000239C                 public ?Len@UString@@QBEIXZ
.text:0000239C ?Len@UString@@QBEIXZ proc near          ; CODE XREF: UString::IsAscii(void)+1Dp
.text:0000239C                                         ; operator!=(UString const &,UString const &)+Fp ...
.text:0000239C
.text:0000239C var_4           = dword ptr -4
.text:0000239C
.text:0000239C                 push    ebp
.text:0000239D                 mov     ebp, esp
.text:0000239F                 push    ecx
.text:000023A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023A7                 mov     [ebp+var_4], ecx
.text:000023AA                 mov     eax, [ebp+var_4]
.text:000023AD                 mov     eax, [eax+4]
.text:000023B0                 mov     esp, ebp
.text:000023B2                 pop     ebp
.text:000023B3                 retn
.text:000023B3 ?Len@UString@@QBEIXZ endp
.text:000023B3
.text:000023B3 _text           ends
.text:000023B3
.text:000023B4 ; ===========================================================================
.text:000023B4
.text:000023B4 ; Segment type: Pure code
.text:000023B4 ; Segment permissions: Read/Execute
.text:000023B4 _text           segment para public 'CODE' use32
.text:000023B4                 assume cs:_text
.text:000023B4                 ;org 23B4h
.text:000023B4 ; COMDAT (pick any)
.text:000023B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000023B4
.text:000023B4 ; =============== S U B R O U T I N E =======================================
.text:000023B4
.text:000023B4 ; Attributes: bp-based frame
.text:000023B4
.text:000023B4 ; int __stdcall operator!=(UString *, UString *)
.text:000023B4                 public ??9@YG_NABVUString@@0@Z
.text:000023B4 ??9@YG_NABVUString@@0@Z proc near       ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B03p
.text:000023B4
.text:000023B4 var_4           = dword ptr -4
.text:000023B4 arg_0           = dword ptr  8
.text:000023B4 arg_4           = dword ptr  0Ch
.text:000023B4
.text:000023B4                 push    ebp
.text:000023B5                 mov     ebp, esp
.text:000023B7                 push    ecx
.text:000023B8                 push    esi
.text:000023B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023C0                 mov     ecx, [ebp+arg_0] ; this
.text:000023C3                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000023C8                 mov     esi, eax
.text:000023CA                 mov     ecx, [ebp+arg_4] ; this
.text:000023CD                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000023D2                 cmp     esi, eax
.text:000023D4                 jnz     short loc_2407
.text:000023D6                 mov     ecx, [ebp+arg_4]
.text:000023D9                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000023DE                 mov     esi, esp
.text:000023E0                 push    eax             ; Str2
.text:000023E1                 mov     ecx, [ebp+arg_0]
.text:000023E4                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000023E9                 push    eax             ; Str1
.text:000023EA                 call    dword ptr ds:__imp__wcscmp
.text:000023F0                 add     esp, 8
.text:000023F3                 cmp     esi, esp
.text:000023F5                 call    __RTC_CheckEsp
.text:000023FA                 test    eax, eax
.text:000023FC                 jnz     short loc_2407
.text:000023FE                 mov     [ebp+var_4], 0
.text:00002405                 jmp     short loc_240E
.text:00002407 ; ---------------------------------------------------------------------------
.text:00002407
.text:00002407 loc_2407:                               ; CODE XREF: operator!=(UString const &,UString const &)+20j
.text:00002407                                         ; operator!=(UString const &,UString const &)+48j
.text:00002407                 mov     [ebp+var_4], 1
.text:0000240E
.text:0000240E loc_240E:                               ; CODE XREF: operator!=(UString const &,UString const &)+51j
.text:0000240E                 mov     al, byte ptr [ebp+var_4]
.text:00002411                 pop     esi
.text:00002412                 add     esp, 4
.text:00002415                 cmp     ebp, esp
.text:00002417                 call    __RTC_CheckEsp
.text:0000241C                 mov     esp, ebp
.text:0000241E                 pop     ebp
.text:0000241F                 retn    8
.text:0000241F ??9@YG_NABVUString@@0@Z endp
.text:0000241F
.text:0000241F ; ---------------------------------------------------------------------------
.text:00002422                 align 4
.text:00002422 _text           ends
.text:00002422
.text:00002424 ; ===========================================================================
.text:00002424
.text:00002424 ; Segment type: Pure code
.text:00002424 ; Segment permissions: Read/Execute
.text:00002424 _text           segment para public 'CODE' use32
.text:00002424                 assume cs:_text
.text:00002424                 ;org 2424h
.text:00002424 ; COMDAT (pick any)
.text:00002424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002424
.text:00002424 ; =============== S U B R O U T I N E =======================================
.text:00002424
.text:00002424 ; Attributes: bp-based frame
.text:00002424
.text:00002424 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00002424                 public ??BUString@@QBEPB_WXZ
.text:00002424 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+A6p
.text:00002424                                         ; operator!=(UString const &,UString const &)+25p ...
.text:00002424
.text:00002424 var_4           = dword ptr -4
.text:00002424
.text:00002424                 push    ebp
.text:00002425                 mov     ebp, esp
.text:00002427                 push    ecx
.text:00002428                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000242F                 mov     [ebp+var_4], ecx
.text:00002432                 mov     eax, [ebp+var_4]
.text:00002435                 mov     eax, [eax]
.text:00002437                 mov     esp, ebp
.text:00002439                 pop     ebp
.text:0000243A                 retn
.text:0000243A ??BUString@@QBEPB_WXZ endp
.text:0000243A
.text:0000243A ; ---------------------------------------------------------------------------
.text:0000243B                 align 4
.text:0000243B _text           ends
.text:0000243B
.text:0000243C ; ===========================================================================
.text:0000243C
.text:0000243C ; Segment type: Pure code
.text:0000243C ; Segment permissions: Read/Execute
.text:0000243C _text           segment para public 'CODE' use32
.text:0000243C                 assume cs:_text
.text:0000243C                 ;org 243Ch
.text:0000243C ; COMDAT (pick any)
.text:0000243C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000243C
.text:0000243C ; =============== S U B R O U T I N E =======================================
.text:0000243C
.text:0000243C ; Attributes: bp-based frame
.text:0000243C
.text:0000243C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:0000243C                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:0000243C ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:0000243C                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+287p
.text:0000243C                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3B3p ...
.text:0000243C
.text:0000243C var_4           = dword ptr -4
.text:0000243C
.text:0000243C                 push    ebp
.text:0000243D                 mov     ebp, esp
.text:0000243F                 push    ecx
.text:00002440                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002447                 mov     [ebp+var_4], ecx
.text:0000244A                 xor     eax, eax
.text:0000244C                 mov     ecx, [ebp+var_4]
.text:0000244F                 mov     [ecx], ax
.text:00002452                 xor     edx, edx
.text:00002454                 mov     eax, [ebp+var_4]
.text:00002457                 mov     [eax+2], dx
.text:0000245B                 mov     ecx, [ebp+var_4]
.text:0000245E                 mov     dword ptr [ecx+8], 0
.text:00002465                 mov     eax, [ebp+var_4]
.text:00002468                 mov     esp, ebp
.text:0000246A                 pop     ebp
.text:0000246B                 retn
.text:0000246B ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:0000246B
.text:0000246B _text           ends
.text:0000246B
.text:0000246C ; ===========================================================================
.text:0000246C
.text:0000246C ; Segment type: Pure code
.text:0000246C ; Segment permissions: Read/Execute
.text:0000246C _text           segment para public 'CODE' use32
.text:0000246C                 assume cs:_text
.text:0000246C                 ;org 246Ch
.text:0000246C ; COMDAT (pick any)
.text:0000246C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000246C
.text:0000246C ; =============== S U B R O U T I N E =======================================
.text:0000246C
.text:0000246C ; Attributes: bp-based frame
.text:0000246C
.text:0000246C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:0000246C                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:0000246C ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:0000246C                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2EBp
.text:0000246C                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+359p ...
.text:0000246C
.text:0000246C var_4           = dword ptr -4
.text:0000246C
.text:0000246C                 push    ebp
.text:0000246D                 mov     ebp, esp
.text:0000246F                 push    ecx
.text:00002470                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002477                 mov     [ebp+var_4], ecx
.text:0000247A                 mov     ecx, [ebp+var_4] ; this
.text:0000247D                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00002482                 add     esp, 4
.text:00002485                 cmp     ebp, esp
.text:00002487                 call    __RTC_CheckEsp
.text:0000248C                 mov     esp, ebp
.text:0000248E                 pop     ebp
.text:0000248F                 retn
.text:0000248F ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:0000248F
.text:0000248F _text           ends
.text:0000248F
.text:00002490 ; ===========================================================================
.text:00002490
.text:00002490 ; Segment type: Pure code
.text:00002490 ; Segment permissions: Read/Execute
.text:00002490 _text           segment para public 'CODE' use32
.text:00002490                 assume cs:_text
.text:00002490                 ;org 2490h
.text:00002490 ; COMDAT (pick any)
.text:00002490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002490
.text:00002490 ; =============== S U B R O U T I N E =======================================
.text:00002490
.text:00002490 ; Attributes: bp-based frame
.text:00002490
.text:00002490 ; _DWORD __thiscall CMyComBSTR::CMyComBSTR(CMyComBSTR *__hidden this)
.text:00002490                 public ??0CMyComBSTR@@QAE@XZ
.text:00002490 ??0CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E6Fp
.text:00002490
.text:00002490 var_4           = dword ptr -4
.text:00002490
.text:00002490                 push    ebp
.text:00002491                 mov     ebp, esp
.text:00002493                 push    ecx
.text:00002494                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000249B                 mov     [ebp+var_4], ecx
.text:0000249E                 mov     eax, [ebp+var_4]
.text:000024A1                 mov     dword ptr [eax], 0
.text:000024A7                 mov     eax, [ebp+var_4]
.text:000024AA                 mov     esp, ebp
.text:000024AC                 pop     ebp
.text:000024AD                 retn
.text:000024AD ??0CMyComBSTR@@QAE@XZ endp
.text:000024AD
.text:000024AD ; ---------------------------------------------------------------------------
.text:000024AE                 align 10h
.text:000024AE _text           ends
.text:000024AE
.text:000024B0 ; ===========================================================================
.text:000024B0
.text:000024B0 ; Segment type: Pure code
.text:000024B0 ; Segment permissions: Read/Execute
.text:000024B0 _text           segment para public 'CODE' use32
.text:000024B0                 assume cs:_text
.text:000024B0                 ;org 24B0h
.text:000024B0 ; COMDAT (pick any)
.text:000024B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024B0
.text:000024B0 ; =============== S U B R O U T I N E =======================================
.text:000024B0
.text:000024B0 ; Attributes: bp-based frame
.text:000024B0
.text:000024B0 ; _DWORD __thiscall CMyComBSTR::~CMyComBSTR(CMyComBSTR *__hidden this)
.text:000024B0                 public ??1CMyComBSTR@@QAE@XZ
.text:000024B0 ??1CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F08p
.text:000024B0                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+FC8p ...
.text:000024B0
.text:000024B0 var_4           = dword ptr -4
.text:000024B0
.text:000024B0                 push    ebp
.text:000024B1                 mov     ebp, esp
.text:000024B3                 push    ecx
.text:000024B4                 push    esi
.text:000024B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024BC                 mov     [ebp+var_4], ecx
.text:000024BF                 mov     esi, esp
.text:000024C1                 mov     eax, [ebp+var_4]
.text:000024C4                 mov     ecx, [eax]
.text:000024C6                 push    ecx             ; bstrString
.text:000024C7                 call    dword ptr ds:__imp__SysFreeString@4 ; SysFreeString(x)
.text:000024CD                 cmp     esi, esp
.text:000024CF                 call    __RTC_CheckEsp
.text:000024D4                 pop     esi
.text:000024D5                 add     esp, 4
.text:000024D8                 cmp     ebp, esp
.text:000024DA                 call    __RTC_CheckEsp
.text:000024DF                 mov     esp, ebp
.text:000024E1                 pop     ebp
.text:000024E2                 retn
.text:000024E2 ??1CMyComBSTR@@QAE@XZ endp
.text:000024E2
.text:000024E2 ; ---------------------------------------------------------------------------
.text:000024E3                 align 4
.text:000024E3 _text           ends
.text:000024E3
.text:000024E4 ; ===========================================================================
.text:000024E4
.text:000024E4 ; Segment type: Pure code
.text:000024E4 ; Segment permissions: Read/Execute
.text:000024E4 _text           segment para public 'CODE' use32
.text:000024E4                 assume cs:_text
.text:000024E4                 ;org 24E4h
.text:000024E4 ; COMDAT (pick any)
.text:000024E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024E4
.text:000024E4 ; =============== S U B R O U T I N E =======================================
.text:000024E4
.text:000024E4 ; Attributes: bp-based frame
.text:000024E4
.text:000024E4 ; public: wchar_t * * __thiscall CMyComBSTR::operator&(void)
.text:000024E4                 public ??ICMyComBSTR@@QAEPAPA_WXZ
.text:000024E4 ??ICMyComBSTR@@QAEPAPA_WXZ proc near    ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+EA1p
.text:000024E4
.text:000024E4 var_4           = dword ptr -4
.text:000024E4
.text:000024E4                 push    ebp
.text:000024E5                 mov     ebp, esp
.text:000024E7                 push    ecx
.text:000024E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024EF                 mov     [ebp+var_4], ecx
.text:000024F2                 mov     eax, [ebp+var_4]
.text:000024F5                 mov     esp, ebp
.text:000024F7                 pop     ebp
.text:000024F8                 retn
.text:000024F8 ??ICMyComBSTR@@QAEPAPA_WXZ endp
.text:000024F8
.text:000024F8 ; ---------------------------------------------------------------------------
.text:000024F9                 align 4
.text:000024F9 _text           ends
.text:000024F9
.text:000024FC ; ===========================================================================
.text:000024FC
.text:000024FC ; Segment type: Pure code
.text:000024FC ; Segment permissions: Read/Execute
.text:000024FC _text           segment para public 'CODE' use32
.text:000024FC                 assume cs:_text
.text:000024FC                 ;org 24FCh
.text:000024FC ; COMDAT (pick any)
.text:000024FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024FC
.text:000024FC ; =============== S U B R O U T I N E =======================================
.text:000024FC
.text:000024FC ; Attributes: bp-based frame
.text:000024FC
.text:000024FC ; public: __thiscall CMyComBSTR::operator wchar_t const *(void)const
.text:000024FC                 public ??BCMyComBSTR@@QBEPB_WXZ
.text:000024FC ??BCMyComBSTR@@QBEPB_WXZ proc near      ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F8Cp
.text:000024FC                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1008p ...
.text:000024FC
.text:000024FC var_4           = dword ptr -4
.text:000024FC
.text:000024FC                 push    ebp
.text:000024FD                 mov     ebp, esp
.text:000024FF                 push    ecx
.text:00002500                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002507                 mov     [ebp+var_4], ecx
.text:0000250A                 mov     eax, [ebp+var_4]
.text:0000250D                 mov     eax, [eax]
.text:0000250F                 mov     esp, ebp
.text:00002511                 pop     ebp
.text:00002512                 retn
.text:00002512 ??BCMyComBSTR@@QBEPB_WXZ endp
.text:00002512
.text:00002512 ; ---------------------------------------------------------------------------
.text:00002513                 align 4
.text:00002513 _text           ends
.text:00002513
.text:00002514 ; ===========================================================================
.text:00002514
.text:00002514 ; Segment type: Pure code
.text:00002514 ; Segment permissions: Read/Execute
.text:00002514 _text           segment para public 'CODE' use32
.text:00002514                 assume cs:_text
.text:00002514                 ;org 2514h
.text:00002514 ; COMDAT (pick any)
.text:00002514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002514
.text:00002514 ; =============== S U B R O U T I N E =======================================
.text:00002514
.text:00002514 ; Attributes: bp-based frame
.text:00002514
.text:00002514 ; bool __stdcall IntToBool(int)
.text:00002514                 public ?IntToBool@@YG_NH@Z
.text:00002514 ?IntToBool@@YG_NH@Z proc near           ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1A9p
.text:00002514                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1C7p ...
.text:00002514
.text:00002514 arg_0           = dword ptr  8
.text:00002514
.text:00002514                 push    ebp
.text:00002515                 mov     ebp, esp
.text:00002517                 xor     eax, eax
.text:00002519                 cmp     [ebp+arg_0], 0
.text:0000251D                 setnz   al
.text:00002520                 pop     ebp
.text:00002521                 retn    4
.text:00002521 ?IntToBool@@YG_NH@Z endp
.text:00002521
.text:00002521 _text           ends
.text:00002521
.text:00002524 ; ===========================================================================
.text:00002524
.text:00002524 ; Segment type: Pure code
.text:00002524 ; Segment permissions: Read/Execute
.text:00002524 _text           segment para public 'CODE' use32
.text:00002524                 assume cs:_text
.text:00002524                 ;org 2524h
.text:00002524 ; COMDAT (pick any)
.text:00002524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002524
.text:00002524 ; =============== S U B R O U T I N E =======================================
.text:00002524
.text:00002524 ; Attributes: bp-based frame
.text:00002524
.text:00002524 ; bool __thiscall NArchive::NZip::CLocalItem::IsAesEncrypted(NArchive::NZip::CLocalItem *__hidden this)
.text:00002524                 public ?IsAesEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ
.text:00002524 ?IsAesEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ proc near
.text:00002524                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+231p
.text:00002524
.text:00002524 var_8           = dword ptr -8
.text:00002524 var_4           = dword ptr -4
.text:00002524
.text:00002524                 push    ebp
.text:00002525                 mov     ebp, esp
.text:00002527                 sub     esp, 8
.text:0000252A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002531                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002538                 mov     [ebp+var_4], ecx
.text:0000253B                 mov     ecx, [ebp+var_4] ; this
.text:0000253E                 call    ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted(void)
.text:00002543                 movzx   eax, al
.text:00002546                 test    eax, eax
.text:00002548                 jz      short loc_256E
.text:0000254A                 mov     ecx, [ebp+var_4] ; this
.text:0000254D                 call    ?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsStrongEncrypted(void)
.text:00002552                 movzx   ecx, al
.text:00002555                 test    ecx, ecx
.text:00002557                 jnz     short loc_2565
.text:00002559                 mov     edx, [ebp+var_4]
.text:0000255C                 movzx   eax, word ptr [edx+2]
.text:00002560                 cmp     eax, 63h ; 'c'
.text:00002563                 jnz     short loc_256E
.text:00002565
.text:00002565 loc_2565:                               ; CODE XREF: NArchive::NZip::CLocalItem::IsAesEncrypted(void)+33j
.text:00002565                 mov     [ebp+var_8], 1
.text:0000256C                 jmp     short loc_2575
.text:0000256E ; ---------------------------------------------------------------------------
.text:0000256E
.text:0000256E loc_256E:                               ; CODE XREF: NArchive::NZip::CLocalItem::IsAesEncrypted(void)+24j
.text:0000256E                                         ; NArchive::NZip::CLocalItem::IsAesEncrypted(void)+3Fj
.text:0000256E                 mov     [ebp+var_8], 0
.text:00002575
.text:00002575 loc_2575:                               ; CODE XREF: NArchive::NZip::CLocalItem::IsAesEncrypted(void)+48j
.text:00002575                 mov     al, byte ptr [ebp+var_8]
.text:00002578                 add     esp, 8
.text:0000257B                 cmp     ebp, esp
.text:0000257D                 call    __RTC_CheckEsp
.text:00002582                 mov     esp, ebp
.text:00002584                 pop     ebp
.text:00002585                 retn
.text:00002585 ?IsAesEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ endp
.text:00002585
.text:00002585 ; ---------------------------------------------------------------------------
.text:00002586                 align 4
.text:00002586 _text           ends
.text:00002586
.text:00002588 ; ===========================================================================
.text:00002588
.text:00002588 ; Segment type: Pure code
.text:00002588 ; Segment permissions: Read/Execute
.text:00002588 _text           segment para public 'CODE' use32
.text:00002588                 assume cs:_text
.text:00002588                 ;org 2588h
.text:00002588 ; COMDAT (pick any)
.text:00002588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002588
.text:00002588 ; =============== S U B R O U T I N E =======================================
.text:00002588
.text:00002588 ; Attributes: bp-based frame
.text:00002588
.text:00002588 ; bool __thiscall NArchive::NZip::CLocalItem::IsEncrypted(NArchive::NZip::CLocalItem *__hidden this)
.text:00002588                 public ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ
.text:00002588 ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ proc near
.text:00002588                                         ; CODE XREF: NArchive::NZip::CLocalItem::IsAesEncrypted(void)+1Ap
.text:00002588                                         ; NArchive::NZip::CLocalItem::IsStrongEncrypted(void)+1Ap
.text:00002588
.text:00002588 var_4           = dword ptr -4
.text:00002588
.text:00002588                 push    ebp
.text:00002589                 mov     ebp, esp
.text:0000258B                 push    ecx
.text:0000258C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002593                 mov     [ebp+var_4], ecx
.text:00002596                 mov     eax, [ebp+var_4]
.text:00002599                 movzx   eax, word ptr [eax]
.text:0000259C                 and     eax, 1
.text:0000259F                 neg     eax
.text:000025A1                 sbb     eax, eax
.text:000025A3                 neg     eax
.text:000025A5                 mov     esp, ebp
.text:000025A7                 pop     ebp
.text:000025A8                 retn
.text:000025A8 ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ endp
.text:000025A8
.text:000025A8 ; ---------------------------------------------------------------------------
.text:000025A9                 align 4
.text:000025A9 _text           ends
.text:000025A9
.text:000025AC ; ===========================================================================
.text:000025AC
.text:000025AC ; Segment type: Pure code
.text:000025AC ; Segment permissions: Read/Execute
.text:000025AC _text           segment para public 'CODE' use32
.text:000025AC                 assume cs:_text
.text:000025AC                 ;org 25ACh
.text:000025AC ; COMDAT (pick any)
.text:000025AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025AC
.text:000025AC ; =============== S U B R O U T I N E =======================================
.text:000025AC
.text:000025AC ; Attributes: bp-based frame
.text:000025AC
.text:000025AC ; bool __thiscall NArchive::NZip::CLocalItem::IsStrongEncrypted(NArchive::NZip::CLocalItem *__hidden this)
.text:000025AC                 public ?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ
.text:000025AC ?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ proc near
.text:000025AC                                         ; CODE XREF: NArchive::NZip::CLocalItem::IsAesEncrypted(void)+29p
.text:000025AC
.text:000025AC var_8           = dword ptr -8
.text:000025AC var_4           = dword ptr -4
.text:000025AC
.text:000025AC                 push    ebp
.text:000025AD                 mov     ebp, esp
.text:000025AF                 sub     esp, 8
.text:000025B2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000025B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025C0                 mov     [ebp+var_4], ecx
.text:000025C3                 mov     ecx, [ebp+var_4] ; this
.text:000025C6                 call    ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted(void)
.text:000025CB                 movzx   eax, al
.text:000025CE                 test    eax, eax
.text:000025D0                 jz      short loc_25E6
.text:000025D2                 mov     ecx, [ebp+var_4]
.text:000025D5                 movzx   edx, word ptr [ecx]
.text:000025D8                 and     edx, 40h
.text:000025DB                 jz      short loc_25E6
.text:000025DD                 mov     [ebp+var_8], 1
.text:000025E4                 jmp     short loc_25ED
.text:000025E6 ; ---------------------------------------------------------------------------
.text:000025E6
.text:000025E6 loc_25E6:                               ; CODE XREF: NArchive::NZip::CLocalItem::IsStrongEncrypted(void)+24j
.text:000025E6                                         ; NArchive::NZip::CLocalItem::IsStrongEncrypted(void)+2Fj
.text:000025E6                 mov     [ebp+var_8], 0
.text:000025ED
.text:000025ED loc_25ED:                               ; CODE XREF: NArchive::NZip::CLocalItem::IsStrongEncrypted(void)+38j
.text:000025ED                 mov     al, byte ptr [ebp+var_8]
.text:000025F0                 add     esp, 8
.text:000025F3                 cmp     ebp, esp
.text:000025F5                 call    __RTC_CheckEsp
.text:000025FA                 mov     esp, ebp
.text:000025FC                 pop     ebp
.text:000025FD                 retn
.text:000025FD ?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ endp
.text:000025FD
.text:000025FD ; ---------------------------------------------------------------------------
.text:000025FE                 align 10h
.text:000025FE _text           ends
.text:000025FE
.text:00002600 ; ===========================================================================
.text:00002600
.text:00002600 ; Segment type: Pure code
.text:00002600 ; Segment permissions: Read/Execute
.text:00002600 _text           segment para public 'CODE' use32
.text:00002600                 assume cs:_text
.text:00002600                 ;org 2600h
.text:00002600 ; COMDAT (pick any)
.text:00002600                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002600
.text:00002600 ; =============== S U B R O U T I N E =======================================
.text:00002600
.text:00002600 ; Attributes: bp-based frame
.text:00002600
.text:00002600 ; bool __thiscall NArchive::NZip::CInArchive::IsOpen(NArchive::NZip::CInArchive *__hidden this)
.text:00002600                 public ?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ
.text:00002600 ?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ proc near
.text:00002600                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+58p
.text:00002600                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+118Ep
.text:00002600
.text:00002600 var_4           = dword ptr -4
.text:00002600
.text:00002600                 push    ebp
.text:00002601                 mov     ebp, esp
.text:00002603                 push    ecx
.text:00002604                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000260B                 mov     [ebp+var_4], ecx
.text:0000260E                 mov     ecx, [ebp+var_4]
.text:00002611                 add     ecx, 80h ; 'Ç'
.text:00002617                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000261C                 neg     eax
.text:0000261E                 sbb     eax, eax
.text:00002620                 neg     eax
.text:00002622                 add     esp, 4
.text:00002625                 cmp     ebp, esp
.text:00002627                 call    __RTC_CheckEsp
.text:0000262C                 mov     esp, ebp
.text:0000262E                 pop     ebp
.text:0000262F                 retn
.text:0000262F ?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ endp
.text:0000262F
.text:0000262F _text           ends
.text:0000262F
.text:00002630 ; ===========================================================================
.text:00002630
.text:00002630 ; Segment type: Pure code
.text:00002630 ; Segment permissions: Read/Execute
.text:00002630 _text           segment para public 'CODE' use32
.text:00002630                 assume cs:_text
.text:00002630                 ;org 2630h
.text:00002630 ; COMDAT (pick any)
.text:00002630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002630
.text:00002630 ; =============== S U B R O U T I N E =======================================
.text:00002630
.text:00002630 ; Attributes: bp-based frame
.text:00002630
.text:00002630 ; bool __thiscall NArchive::NZip::CInArchive::CanUpdate(NArchive::NZip::CInArchive *__hidden this)
.text:00002630                 public ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ
.text:00002630 ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ proc near
.text:00002630                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+74p
.text:00002630
.text:00002630 var_18          = dword ptr -18h
.text:00002630 var_14          = dword ptr -14h
.text:00002630 var_10          = dword ptr -10h
.text:00002630 var_C           = dword ptr -0Ch
.text:00002630 var_8           = dword ptr -8
.text:00002630 var_4           = dword ptr -4
.text:00002630
.text:00002630                 push    ebp
.text:00002631                 mov     ebp, esp
.text:00002633                 sub     esp, 18h
.text:00002636                 mov     eax, 0CCCCCCCCh
.text:0000263B                 mov     [ebp+var_18], eax
.text:0000263E                 mov     [ebp+var_14], eax
.text:00002641                 mov     [ebp+var_10], eax
.text:00002644                 mov     [ebp+var_C], eax
.text:00002647                 mov     [ebp+var_8], eax
.text:0000264A                 mov     [ebp+var_4], eax
.text:0000264D                 mov     [ebp+var_4], ecx
.text:00002650                 mov     ecx, [ebp+var_4] ; this
.text:00002653                 call    ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::AreThereErrors(void)
.text:00002658                 movzx   eax, al
.text:0000265B                 test    eax, eax
.text:0000265D                 jz      short loc_2666
.text:0000265F                 xor     al, al
.text:00002661                 jmp     loc_26E7
.text:00002666 ; ---------------------------------------------------------------------------
.text:00002666
.text:00002666 loc_2666:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+2Dj
.text:00002666                 mov     ecx, [ebp+var_4]
.text:00002669                 mov     [ebp+var_8], ecx
.text:0000266C                 mov     edx, [ebp+var_8]
.text:0000266F                 cmp     dword ptr [edx+3Ch], 0
.text:00002673                 jg      short loc_2684
.text:00002675                 jl      short loc_2680
.text:00002677                 mov     eax, [ebp+var_8]
.text:0000267A                 cmp     dword ptr [eax+38h], 0
.text:0000267E                 jnb     short loc_2684
.text:00002680
.text:00002680 loc_2680:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+45j
.text:00002680                 xor     al, al
.text:00002682                 jmp     short loc_26E7
.text:00002684 ; ---------------------------------------------------------------------------
.text:00002684
.text:00002684 loc_2684:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+43j
.text:00002684                                         ; NArchive::NZip::CInArchive::CanUpdate(void)+4Ej
.text:00002684                 mov     ecx, [ebp+var_4]
.text:00002687                 mov     edx, [ebp+var_4]
.text:0000268A                 mov     [ebp+var_C], ecx
.text:0000268D                 mov     [ebp+var_10], edx
.text:00002690                 mov     eax, [ebp+var_C]
.text:00002693                 mov     ecx, [ebp+var_10]
.text:00002696                 mov     edx, [eax+4Ch]
.text:00002699                 cmp     edx, [ecx+3Ch]
.text:0000269C                 jg      short loc_26B2
.text:0000269E                 jl      short loc_26AE
.text:000026A0                 mov     eax, [ebp+var_C]
.text:000026A3                 mov     ecx, [ebp+var_10]
.text:000026A6                 mov     edx, [eax+48h]
.text:000026A9                 cmp     edx, [ecx+38h]
.text:000026AC                 jnb     short loc_26B2
.text:000026AE
.text:000026AE loc_26AE:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+6Ej
.text:000026AE                 xor     al, al
.text:000026B0                 jmp     short loc_26E7
.text:000026B2 ; ---------------------------------------------------------------------------
.text:000026B2
.text:000026B2 loc_26B2:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+6Cj
.text:000026B2                                         ; NArchive::NZip::CInArchive::CanUpdate(void)+7Cj
.text:000026B2                 mov     ecx, [ebp+var_4]
.text:000026B5                 add     ecx, 38h ; '8'  ; this
.text:000026B8                 call    ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(void)
.text:000026BD                 mov     [ebp+var_18], eax
.text:000026C0                 mov     [ebp+var_14], edx
.text:000026C3                 mov     eax, [ebp+var_18]
.text:000026C6                 or      eax, [ebp+var_14]
.text:000026C9                 jz      short loc_26CF
.text:000026CB                 xor     al, al
.text:000026CD                 jmp     short loc_26E7
.text:000026CF ; ---------------------------------------------------------------------------
.text:000026CF
.text:000026CF loc_26CF:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+99j
.text:000026CF                 mov     ecx, [ebp+var_4]
.text:000026D2                 add     ecx, 38h ; '8'  ; this
.text:000026D5                 call    ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchiveInfo::ThereIsTail(void)
.text:000026DA                 movzx   ecx, al
.text:000026DD                 test    ecx, ecx
.text:000026DF                 jz      short loc_26E5
.text:000026E1                 xor     al, al
.text:000026E3                 jmp     short loc_26E7
.text:000026E5 ; ---------------------------------------------------------------------------
.text:000026E5
.text:000026E5 loc_26E5:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+AFj
.text:000026E5                 mov     al, 1
.text:000026E7
.text:000026E7 loc_26E7:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+31j
.text:000026E7                                         ; NArchive::NZip::CInArchive::CanUpdate(void)+52j ...
.text:000026E7                 add     esp, 18h
.text:000026EA                 cmp     ebp, esp
.text:000026EC                 call    __RTC_CheckEsp
.text:000026F1                 mov     esp, ebp
.text:000026F3                 pop     ebp
.text:000026F4                 retn
.text:000026F4 ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ endp
.text:000026F4
.text:000026F4 ; ---------------------------------------------------------------------------
.text:000026F5                 align 4
.text:000026F5 _text           ends
.text:000026F5
.text:000026F8 ; ===========================================================================
.text:000026F8
.text:000026F8 ; Segment type: Pure code
.text:000026F8 ; Segment permissions: Read/Execute
.text:000026F8 _text           segment para public 'CODE' use32
.text:000026F8                 assume cs:_text
.text:000026F8                 ;org 26F8h
.text:000026F8 ; COMDAT (pick any)
.text:000026F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000026F8
.text:000026F8 ; =============== S U B R O U T I N E =======================================
.text:000026F8
.text:000026F8 ; Attributes: bp-based frame
.text:000026F8
.text:000026F8 ; unsigned __int64 __thiscall NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(NArchive::NZip::CInArchiveInfo *__hidden this)
.text:000026F8                 public ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ
.text:000026F8 ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ proc near
.text:000026F8                                         ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+88p
.text:000026F8
.text:000026F8 var_4           = dword ptr -4
.text:000026F8
.text:000026F8                 push    ebp
.text:000026F9                 mov     ebp, esp
.text:000026FB                 push    ecx
.text:000026FC                 push    esi
.text:000026FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002704                 mov     [ebp+var_4], ecx
.text:00002707                 mov     eax, [ebp+var_4]
.text:0000270A                 movzx   ecx, byte ptr [eax+30h]
.text:0000270E                 test    ecx, ecx
.text:00002710                 jz      short loc_271D
.text:00002712                 mov     edx, [ebp+var_4]
.text:00002715                 mov     eax, [edx+28h]
.text:00002718                 mov     edx, [edx+2Ch]
.text:0000271B                 jmp     short loc_2732
.text:0000271D ; ---------------------------------------------------------------------------
.text:0000271D
.text:0000271D loc_271D:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(void)+18j
.text:0000271D                 mov     eax, [ebp+var_4]
.text:00002720                 mov     ecx, [ebp+var_4]
.text:00002723                 mov     edx, [eax+10h]
.text:00002726                 sub     edx, [ecx]
.text:00002728                 mov     esi, [eax+14h]
.text:0000272B                 sbb     esi, [ecx+4]
.text:0000272E                 mov     eax, edx
.text:00002730                 mov     edx, esi
.text:00002732
.text:00002732 loc_2732:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(void)+23j
.text:00002732                 pop     esi
.text:00002733                 mov     esp, ebp
.text:00002735                 pop     ebp
.text:00002736                 retn
.text:00002736 ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ endp
.text:00002736
.text:00002736 ; ---------------------------------------------------------------------------
.text:00002737                 align 4
.text:00002737 _text           ends
.text:00002737
.text:00002738 ; ===========================================================================
.text:00002738
.text:00002738 ; Segment type: Pure code
.text:00002738 ; Segment permissions: Read/Execute
.text:00002738 _text           segment para public 'CODE' use32
.text:00002738                 assume cs:_text
.text:00002738                 ;org 2738h
.text:00002738 ; COMDAT (pick any)
.text:00002738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002738
.text:00002738 ; =============== S U B R O U T I N E =======================================
.text:00002738
.text:00002738 ; Attributes: bp-based frame
.text:00002738
.text:00002738 ; bool __thiscall NArchive::NZip::CInArchiveInfo::ThereIsTail(NArchive::NZip::CInArchiveInfo *__hidden this)
.text:00002738                 public ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ
.text:00002738 ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ proc near
.text:00002738                                         ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+A5p
.text:00002738
.text:00002738 var_10          = dword ptr -10h
.text:00002738 var_C           = dword ptr -0Ch
.text:00002738 var_8           = dword ptr -8
.text:00002738 var_4           = dword ptr -4
.text:00002738
.text:00002738                 push    ebp
.text:00002739                 mov     ebp, esp
.text:0000273B                 sub     esp, 10h
.text:0000273E                 mov     eax, 0CCCCCCCCh
.text:00002743                 mov     [ebp+var_10], eax
.text:00002746                 mov     [ebp+var_C], eax
.text:00002749                 mov     [ebp+var_8], eax
.text:0000274C                 mov     [ebp+var_4], eax
.text:0000274F                 mov     [ebp+var_4], ecx
.text:00002752                 mov     eax, [ebp+var_4]
.text:00002755                 mov     ecx, [ebp+var_4]
.text:00002758                 mov     [ebp+var_8], eax
.text:0000275B                 mov     [ebp+var_C], ecx
.text:0000275E                 mov     edx, [ebp+var_8]
.text:00002761                 mov     eax, [ebp+var_C]
.text:00002764                 mov     ecx, [edx+24h]
.text:00002767                 cmp     ecx, [eax+1Ch]
.text:0000276A                 jb      short loc_2785
.text:0000276C                 ja      short loc_277C
.text:0000276E                 mov     edx, [ebp+var_8]
.text:00002771                 mov     eax, [ebp+var_C]
.text:00002774                 mov     ecx, [edx+20h]
.text:00002777                 cmp     ecx, [eax+18h]
.text:0000277A                 jbe     short loc_2785
.text:0000277C
.text:0000277C loc_277C:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+34j
.text:0000277C                 mov     [ebp+var_10], 1
.text:00002783                 jmp     short loc_278C
.text:00002785 ; ---------------------------------------------------------------------------
.text:00002785
.text:00002785 loc_2785:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+32j
.text:00002785                                         ; NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+42j
.text:00002785                 mov     [ebp+var_10], 0
.text:0000278C
.text:0000278C loc_278C:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+4Bj
.text:0000278C                 mov     al, byte ptr [ebp+var_10]
.text:0000278F                 mov     esp, ebp
.text:00002791                 pop     ebp
.text:00002792                 retn
.text:00002792 ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ endp
.text:00002792
.text:00002792 ; ---------------------------------------------------------------------------
.text:00002793                 align 4
.text:00002793 _text           ends
.text:00002793
.text:00002794 ; ===========================================================================
.text:00002794
.text:00002794 ; Segment type: Pure code
.text:00002794 ; Segment permissions: Read/Execute
.text:00002794 _text           segment para public 'CODE' use32
.text:00002794                 assume cs:_text
.text:00002794                 ;org 2794h
.text:00002794 ; COMDAT (pick any)
.text:00002794                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002794
.text:00002794 ; =============== S U B R O U T I N E =======================================
.text:00002794
.text:00002794 ; Attributes: bp-based frame
.text:00002794
.text:00002794 ; bool __thiscall NArchive::NZip::CInArchive::AreThereErrors(NArchive::NZip::CInArchive *__hidden this)
.text:00002794                 public ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ
.text:00002794 ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ proc near
.text:00002794                                         ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+23p
.text:00002794
.text:00002794 var_8           = dword ptr -8
.text:00002794 var_4           = dword ptr -4
.text:00002794
.text:00002794                 push    ebp
.text:00002795                 mov     ebp, esp
.text:00002797                 sub     esp, 8
.text:0000279A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000027A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027A8                 mov     [ebp+var_4], ecx
.text:000027AB                 mov     eax, [ebp+var_4]
.text:000027AE                 movzx   ecx, byte ptr [eax+7Ah]
.text:000027B2                 test    ecx, ecx
.text:000027B4                 jnz     short loc_27CA
.text:000027B6                 mov     edx, [ebp+var_4]
.text:000027B9                 movzx   eax, byte ptr [edx+7Dh]
.text:000027BD                 test    eax, eax
.text:000027BF                 jnz     short loc_27CA
.text:000027C1                 mov     [ebp+var_8], 0
.text:000027C8                 jmp     short loc_27D1
.text:000027CA ; ---------------------------------------------------------------------------
.text:000027CA
.text:000027CA loc_27CA:                               ; CODE XREF: NArchive::NZip::CInArchive::AreThereErrors(void)+20j
.text:000027CA                                         ; NArchive::NZip::CInArchive::AreThereErrors(void)+2Bj
.text:000027CA                 mov     [ebp+var_8], 1
.text:000027D1
.text:000027D1 loc_27D1:                               ; CODE XREF: NArchive::NZip::CInArchive::AreThereErrors(void)+34j
.text:000027D1                 mov     al, byte ptr [ebp+var_8]
.text:000027D4                 mov     esp, ebp
.text:000027D6                 pop     ebp
.text:000027D7                 retn
.text:000027D7 ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ endp
.text:000027D7
.text:000027D7 _text           ends
.text:000027D7
.text:000027D8 ; ===========================================================================
.text:000027D8
.text:000027D8 ; Segment type: Pure code
.text:000027D8 ; Segment permissions: Read/Execute
.text:000027D8 _text           segment para public 'CODE' use32
.text:000027D8                 assume cs:_text
.text:000027D8                 ;org 27D8h
.text:000027D8 ; COMDAT (pick any)
.text:000027D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000027D8
.text:000027D8 ; =============== S U B R O U T I N E =======================================
.text:000027D8
.text:000027D8 ; Attributes: bp-based frame
.text:000027D8
.text:000027D8 ; _DWORD __thiscall NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode *__hidden this)
.text:000027D8                 public ??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text:000027D8 ??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ proc near
.text:000027D8                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+DFAp
.text:000027D8
.text:000027D8 var_10          = dword ptr -10h
.text:000027D8 var_C           = dword ptr -0Ch
.text:000027D8 var_4           = dword ptr -4
.text:000027D8
.text:000027D8                 push    ebp
.text:000027D9                 mov     ebp, esp
.text:000027DB                 push    0FFFFFFFFh
.text:000027DD                 push    offset __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text:000027E2                 mov     eax, large fs:0
.text:000027E8                 push    eax
.text:000027E9                 push    ecx
.text:000027EA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000027F1                 mov     eax, dword ptr ds:___security_cookie
.text:000027F6                 xor     eax, ebp
.text:000027F8                 push    eax
.text:000027F9                 lea     eax, [ebp+var_C]
.text:000027FC                 mov     large fs:0, eax
.text:00002802                 mov     [ebp+var_10], ecx
.text:00002805                 mov     ecx, [ebp+var_10] ; this
.text:00002808                 call    ??0CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::CBaseProps(void)
.text:0000280D                 mov     [ebp+var_4], 0
.text:00002814                 mov     ecx, [ebp+var_10]
.text:00002817                 add     ecx, 18h
.text:0000281A                 call    ??0?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::CRecordVector<uchar>(void)
.text:0000281F                 mov     byte ptr [ebp+var_4], 1
.text:00002823                 mov     eax, [ebp+var_10]
.text:00002826                 mov     byte ptr [eax+24h], 0
.text:0000282A                 mov     ecx, [ebp+var_10]
.text:0000282D                 add     ecx, 28h ; '('
.text:00002830                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00002835                 mov     ecx, [ebp+var_10]
.text:00002838                 mov     byte ptr [ecx+40h], 0
.text:0000283C                 mov     edx, [ebp+var_10]
.text:0000283F                 mov     dword ptr [edx+38h], 0
.text:00002846                 mov     dword ptr [edx+3Ch], 0
.text:0000284D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002854                 mov     eax, [ebp+var_10]
.text:00002857                 mov     ecx, [ebp+var_C]
.text:0000285A                 mov     large fs:0, ecx
.text:00002861                 pop     ecx
.text:00002862                 add     esp, 10h
.text:00002865                 cmp     ebp, esp
.text:00002867                 call    __RTC_CheckEsp
.text:0000286C                 mov     esp, ebp
.text:0000286E                 pop     ebp
.text:0000286F                 retn
.text:0000286F ??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ endp
.text:0000286F
.text:0000286F _text           ends
.text:0000286F
.text$x:00002870 ; ===========================================================================
.text$x:00002870
.text$x:00002870 ; Segment type: Pure code
.text$x:00002870 ; Segment permissions: Read/Execute
.text$x:00002870 _text$x         segment para public 'CODE' use32
.text$x:00002870                 assume cs:_text$x
.text$x:00002870                 ;org 2870h
.text$x:00002870 ; COMDAT (pick associative to section at 27D8)
.text$x:00002870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002870
.text$x:00002870 ; =============== S U B R O U T I N E =======================================
.text$x:00002870
.text$x:00002870
.text$x:00002870 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00002870                                         ; DATA XREF: .xdata$x:000028A4o
.text$x:00002870                 mov     ecx, [ebp-10h]  ; this
.text$x:00002873                 jmp     ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text$x:00002873 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00002873
.text$x:00002878
.text$x:00002878 ; =============== S U B R O U T I N E =======================================
.text$x:00002878
.text$x:00002878
.text$x:00002878 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00002878                                         ; DATA XREF: .xdata$x:000028ACo
.text$x:00002878                 mov     ecx, [ebp-10h]
.text$x:0000287B                 add     ecx, 18h
.text$x:0000287E                 jmp     ??1?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::~CRecordVector<uchar>(void)
.text$x:0000287E __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1 endp
.text$x:0000287E
.text$x:00002883
.text$x:00002883 ; =============== S U B R O U T I N E =======================================
.text$x:00002883
.text$x:00002883
.text$x:00002883 __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ proc near
.text$x:00002883                                         ; DATA XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(void)+5o
.text$x:00002883
.text$x:00002883 arg_4           = dword ptr  8
.text$x:00002883
.text$x:00002883                 mov     edx, [esp+arg_4]
.text$x:00002887                 lea     eax, [edx+0Ch]
.text$x:0000288A                 mov     ecx, [edx-8]
.text$x:0000288D                 xor     ecx, eax
.text$x:0000288F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002894                 mov     eax, offset __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text$x:00002899                 jmp     ___CxxFrameHandler3
.text$x:00002899 __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ endp
.text$x:00002899
.text$x:00002899 ; ---------------------------------------------------------------------------
.text$x:0000289E                 align 10h
.text$x:0000289E _text$x         ends
.text$x:0000289E
.xdata$x:000028A0 ; ===========================================================================
.xdata$x:000028A0
.xdata$x:000028A0 ; Segment type: Pure data
.xdata$x:000028A0 ; Segment permissions: Read
.xdata$x:000028A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000028A0                 assume cs:_xdata$x
.xdata$x:000028A0                 ;org 28A0h
.xdata$x:000028A0 ; COMDAT (pick associative to section at 27D8)
.xdata$x:000028A0 __unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:000028A0                                         ; DATA XREF: .xdata$x:000028B8o
.xdata$x:000028A1                 db 0FFh
.xdata$x:000028A2                 db 0FFh
.xdata$x:000028A3                 db 0FFh
.xdata$x:000028A4                 dd offset __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0
.xdata$x:000028A8                 db    0
.xdata$x:000028A9                 db    0
.xdata$x:000028AA                 db    0
.xdata$x:000028AB                 db    0
.xdata$x:000028AC                 dd offset __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1
.xdata$x:000028B0 __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000028B0                                         ; DATA XREF: __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ+11o
.xdata$x:000028B1                 db    5
.xdata$x:000028B2                 db  93h ; ô
.xdata$x:000028B3                 db  19h
.xdata$x:000028B4                 db    2
.xdata$x:000028B5                 db    0
.xdata$x:000028B6                 db    0
.xdata$x:000028B7                 db    0
.xdata$x:000028B8                 dd offset __unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.xdata$x:000028BC                 db    0
.xdata$x:000028BD                 db    0
.xdata$x:000028BE                 db    0
.xdata$x:000028BF                 db    0
.xdata$x:000028C0                 db    0
.xdata$x:000028C1                 db    0
.xdata$x:000028C2                 db    0
.xdata$x:000028C3                 db    0
.xdata$x:000028C4                 db    0
.xdata$x:000028C5                 db    0
.xdata$x:000028C6                 db    0
.xdata$x:000028C7                 db    0
.xdata$x:000028C8                 db    0
.xdata$x:000028C9                 db    0
.xdata$x:000028CA                 db    0
.xdata$x:000028CB                 db    0
.xdata$x:000028CC                 db    0
.xdata$x:000028CD                 db    0
.xdata$x:000028CE                 db    0
.xdata$x:000028CF                 db    0
.xdata$x:000028D0                 db    1
.xdata$x:000028D1                 db    0
.xdata$x:000028D2                 db    0
.xdata$x:000028D3                 db    0
.xdata$x:000028D3 _xdata$x        ends
.xdata$x:000028D3
.text:000028D4 ; ===========================================================================
.text:000028D4
.text:000028D4 ; Segment type: Pure code
.text:000028D4 ; Segment permissions: Read/Execute
.text:000028D4 _text           segment para public 'CODE' use32
.text:000028D4                 assume cs:_text
.text:000028D4                 ;org 28D4h
.text:000028D4 ; COMDAT (pick any)
.text:000028D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000028D4
.text:000028D4 ; =============== S U B R O U T I N E =======================================
.text:000028D4
.text:000028D4 ; Attributes: bp-based frame
.text:000028D4
.text:000028D4 ; _DWORD __thiscall NArchive::NZip::CBaseProps::CBaseProps(NArchive::NZip::CBaseProps *__hidden this)
.text:000028D4                 public ??0CBaseProps@NZip@NArchive@@QAE@XZ
.text:000028D4 ??0CBaseProps@NZip@NArchive@@QAE@XZ proc near
.text:000028D4                                         ; CODE XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(void)+30p
.text:000028D4
.text:000028D4 var_4           = dword ptr -4
.text:000028D4
.text:000028D4                 push    ebp
.text:000028D5                 mov     ebp, esp
.text:000028D7                 push    ecx
.text:000028D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000028DF                 mov     [ebp+var_4], ecx
.text:000028E2                 mov     ecx, [ebp+var_4]
.text:000028E5                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:000028EA                 mov     eax, [ebp+var_4]
.text:000028ED                 add     esp, 4
.text:000028F0                 cmp     ebp, esp
.text:000028F2                 call    __RTC_CheckEsp
.text:000028F7                 mov     esp, ebp
.text:000028F9                 pop     ebp
.text:000028FA                 retn
.text:000028FA ??0CBaseProps@NZip@NArchive@@QAE@XZ endp
.text:000028FA
.text:000028FA ; ---------------------------------------------------------------------------
.text:000028FB                 align 4
.text:000028FB _text           ends
.text:000028FB
.text:000028FC ; ===========================================================================
.text:000028FC
.text:000028FC ; Segment type: Pure code
.text:000028FC ; Segment permissions: Read/Execute
.text:000028FC _text           segment para public 'CODE' use32
.text:000028FC                 assume cs:_text
.text:000028FC                 ;org 28FCh
.text:000028FC ; COMDAT (pick any)
.text:000028FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000028FC
.text:000028FC ; =============== S U B R O U T I N E =======================================
.text:000028FC
.text:000028FC ; Attributes: bp-based frame
.text:000028FC
.text:000028FC ; public: __thiscall CMethodProps::CMethodProps(void)
.text:000028FC                 public ??0CMethodProps@@QAE@XZ
.text:000028FC ??0CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::NZip::CBaseProps::CBaseProps(void)+11p
.text:000028FC
.text:000028FC var_4           = dword ptr -4
.text:000028FC
.text:000028FC                 push    ebp
.text:000028FD                 mov     ebp, esp
.text:000028FF                 push    ecx
.text:00002900                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002907                 mov     [ebp+var_4], ecx
.text:0000290A                 mov     ecx, [ebp+var_4]
.text:0000290D                 call    ??0CProps@@QAE@XZ ; CProps::CProps(void)
.text:00002912                 mov     eax, [ebp+var_4]
.text:00002915                 add     esp, 4
.text:00002918                 cmp     ebp, esp
.text:0000291A                 call    __RTC_CheckEsp
.text:0000291F                 mov     esp, ebp
.text:00002921                 pop     ebp
.text:00002922                 retn
.text:00002922 ??0CMethodProps@@QAE@XZ endp
.text:00002922
.text:00002922 ; ---------------------------------------------------------------------------
.text:00002923                 align 4
.text:00002923 _text           ends
.text:00002923
.text:00002924 ; ===========================================================================
.text:00002924
.text:00002924 ; Segment type: Pure code
.text:00002924 ; Segment permissions: Read/Execute
.text:00002924 _text           segment para public 'CODE' use32
.text:00002924                 assume cs:_text
.text:00002924                 ;org 2924h
.text:00002924 ; COMDAT (pick any)
.text:00002924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002924
.text:00002924 ; =============== S U B R O U T I N E =======================================
.text:00002924
.text:00002924 ; Attributes: bp-based frame
.text:00002924
.text:00002924 ; public: __thiscall CProps::CProps(void)
.text:00002924                 public ??0CProps@@QAE@XZ
.text:00002924 ??0CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::CMethodProps(void)+11p
.text:00002924
.text:00002924 var_4           = dword ptr -4
.text:00002924
.text:00002924                 push    ebp
.text:00002925                 mov     ebp, esp
.text:00002927                 push    ecx
.text:00002928                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000292F                 mov     [ebp+var_4], ecx
.text:00002932                 mov     ecx, [ebp+var_4]
.text:00002935                 call    ??0?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::CObjectVector<CProp>(void)
.text:0000293A                 mov     eax, [ebp+var_4]
.text:0000293D                 add     esp, 4
.text:00002940                 cmp     ebp, esp
.text:00002942                 call    __RTC_CheckEsp
.text:00002947                 mov     esp, ebp
.text:00002949                 pop     ebp
.text:0000294A                 retn
.text:0000294A ??0CProps@@QAE@XZ endp
.text:0000294A
.text:0000294A ; ---------------------------------------------------------------------------
.text:0000294B                 align 4
.text:0000294B _text           ends
.text:0000294B
.text:0000294C ; ===========================================================================
.text:0000294C
.text:0000294C ; Segment type: Pure code
.text:0000294C ; Segment permissions: Read/Execute
.text:0000294C _text           segment para public 'CODE' use32
.text:0000294C                 assume cs:_text
.text:0000294C                 ;org 294Ch
.text:0000294C ; COMDAT (pick any)
.text:0000294C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000294C
.text:0000294C ; =============== S U B R O U T I N E =======================================
.text:0000294C
.text:0000294C ; Attributes: bp-based frame
.text:0000294C
.text:0000294C ; _DWORD __thiscall NArchive::NZip::CBaseProps::~CBaseProps(NArchive::NZip::CBaseProps *__hidden this)
.text:0000294C                 public ??1CBaseProps@NZip@NArchive@@QAE@XZ
.text:0000294C ??1CBaseProps@NZip@NArchive@@QAE@XZ proc near
.text:0000294C                                         ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0+3j
.text:0000294C                                         ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)+58p ...
.text:0000294C
.text:0000294C var_4           = dword ptr -4
.text:0000294C
.text:0000294C                 push    ebp
.text:0000294D                 mov     ebp, esp
.text:0000294F                 push    ecx
.text:00002950                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002957                 mov     [ebp+var_4], ecx
.text:0000295A                 mov     ecx, [ebp+var_4] ; this
.text:0000295D                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:00002962                 add     esp, 4
.text:00002965                 cmp     ebp, esp
.text:00002967                 call    __RTC_CheckEsp
.text:0000296C                 mov     esp, ebp
.text:0000296E                 pop     ebp
.text:0000296F                 retn
.text:0000296F ??1CBaseProps@NZip@NArchive@@QAE@XZ endp
.text:0000296F
.text:0000296F _text           ends
.text:0000296F
.text:00002970 ; ===========================================================================
.text:00002970
.text:00002970 ; Segment type: Pure code
.text:00002970 ; Segment permissions: Read/Execute
.text:00002970 _text           segment para public 'CODE' use32
.text:00002970                 assume cs:_text
.text:00002970                 ;org 2970h
.text:00002970 ; COMDAT (pick any)
.text:00002970                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002970
.text:00002970 ; =============== S U B R O U T I N E =======================================
.text:00002970
.text:00002970 ; Attributes: bp-based frame
.text:00002970
.text:00002970 ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:00002970                 public ??1CMethodProps@@QAE@XZ
.text:00002970 ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::NZip::CBaseProps::~CBaseProps(void)+11p
.text:00002970
.text:00002970 var_4           = dword ptr -4
.text:00002970
.text:00002970                 push    ebp
.text:00002971                 mov     ebp, esp
.text:00002973                 push    ecx
.text:00002974                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000297B                 mov     [ebp+var_4], ecx
.text:0000297E                 mov     ecx, [ebp+var_4] ; this
.text:00002981                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:00002986                 add     esp, 4
.text:00002989                 cmp     ebp, esp
.text:0000298B                 call    __RTC_CheckEsp
.text:00002990                 mov     esp, ebp
.text:00002992                 pop     ebp
.text:00002993                 retn
.text:00002993 ??1CMethodProps@@QAE@XZ endp
.text:00002993
.text:00002993 _text           ends
.text:00002993
.text:00002994 ; ===========================================================================
.text:00002994
.text:00002994 ; Segment type: Pure code
.text:00002994 ; Segment permissions: Read/Execute
.text:00002994 _text           segment para public 'CODE' use32
.text:00002994                 assume cs:_text
.text:00002994                 ;org 2994h
.text:00002994 ; COMDAT (pick any)
.text:00002994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002994
.text:00002994 ; =============== S U B R O U T I N E =======================================
.text:00002994
.text:00002994 ; Attributes: bp-based frame
.text:00002994
.text:00002994 ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00002994                 public ??1CProps@@QAE@XZ
.text:00002994 ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00002994
.text:00002994 var_4           = dword ptr -4
.text:00002994
.text:00002994                 push    ebp
.text:00002995                 mov     ebp, esp
.text:00002997                 push    ecx
.text:00002998                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000299F                 mov     [ebp+var_4], ecx
.text:000029A2                 mov     ecx, [ebp+var_4]
.text:000029A5                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:000029AA                 add     esp, 4
.text:000029AD                 cmp     ebp, esp
.text:000029AF                 call    __RTC_CheckEsp
.text:000029B4                 mov     esp, ebp
.text:000029B6                 pop     ebp
.text:000029B7                 retn
.text:000029B7 ??1CProps@@QAE@XZ endp
.text:000029B7
.text:000029B7 _text           ends
.text:000029B7
.text:000029B8 ; ===========================================================================
.text:000029B8
.text:000029B8 ; Segment type: Pure code
.text:000029B8 ; Segment permissions: Read/Execute
.text:000029B8 _text           segment para public 'CODE' use32
.text:000029B8                 assume cs:_text
.text:000029B8                 ;org 29B8h
.text:000029B8 ; COMDAT (pick any)
.text:000029B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000029B8
.text:000029B8 ; =============== S U B R O U T I N E =======================================
.text:000029B8
.text:000029B8 ; Attributes: bp-based frame
.text:000029B8
.text:000029B8 ; _DWORD __thiscall NArchive::NZip::CUpdateItem::CUpdateItem(NArchive::NZip::CUpdateItem *__hidden this)
.text:000029B8                 public ??0CUpdateItem@NZip@NArchive@@QAE@XZ
.text:000029B8 ??0CUpdateItem@NZip@NArchive@@QAE@XZ proc near
.text:000029B8                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E0p
.text:000029B8
.text:000029B8 var_4           = dword ptr -4
.text:000029B8
.text:000029B8                 push    ebp
.text:000029B9                 mov     ebp, esp
.text:000029BB                 push    ecx
.text:000029BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000029C3                 mov     [ebp+var_4], ecx
.text:000029C6                 mov     eax, [ebp+var_4]
.text:000029C9                 mov     byte ptr [eax+3], 0
.text:000029CD                 mov     ecx, [ebp+var_4]
.text:000029D0                 mov     byte ptr [ecx+4], 0
.text:000029D4                 mov     edx, [ebp+var_4]
.text:000029D7                 mov     dword ptr [edx+18h], 0
.text:000029DE                 mov     dword ptr [edx+1Ch], 0
.text:000029E5                 mov     ecx, [ebp+var_4]
.text:000029E8                 add     ecx, 20h ; ' '
.text:000029EB                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000029F0                 mov     eax, [ebp+var_4]
.text:000029F3                 add     esp, 4
.text:000029F6                 cmp     ebp, esp
.text:000029F8                 call    __RTC_CheckEsp
.text:000029FD                 mov     esp, ebp
.text:000029FF                 pop     ebp
.text:00002A00                 retn
.text:00002A00 ??0CUpdateItem@NZip@NArchive@@QAE@XZ endp
.text:00002A00
.text:00002A00 ; ---------------------------------------------------------------------------
.text:00002A01                 align 4
.text:00002A01 _text           ends
.text:00002A01
.text:00002A04 ; ===========================================================================
.text:00002A04
.text:00002A04 ; Segment type: Pure code
.text:00002A04 ; Segment permissions: Read/Execute
.text:00002A04 _text           segment para public 'CODE' use32
.text:00002A04                 assume cs:_text
.text:00002A04                 ;org 2A04h
.text:00002A04 ; COMDAT (pick any)
.text:00002A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A04
.text:00002A04 ; =============== S U B R O U T I N E =======================================
.text:00002A04
.text:00002A04 ; Attributes: bp-based frame
.text:00002A04
.text:00002A04 ; _DWORD __thiscall NArchive::NZip::CUpdateItem::~CUpdateItem(NArchive::NZip::CUpdateItem *__hidden this)
.text:00002A04                 public ??1CUpdateItem@NZip@NArchive@@QAE@XZ
.text:00002A04 ??1CUpdateItem@NZip@NArchive@@QAE@XZ proc near
.text:00002A04                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+109p
.text:00002A04                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+186p ...
.text:00002A04
.text:00002A04 var_4           = dword ptr -4
.text:00002A04
.text:00002A04                 push    ebp
.text:00002A05                 mov     ebp, esp
.text:00002A07                 push    ecx
.text:00002A08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A0F                 mov     [ebp+var_4], ecx
.text:00002A12                 mov     ecx, [ebp+var_4]
.text:00002A15                 add     ecx, 20h ; ' '  ; this
.text:00002A18                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00002A1D                 add     esp, 4
.text:00002A20                 cmp     ebp, esp
.text:00002A22                 call    __RTC_CheckEsp
.text:00002A27                 mov     esp, ebp
.text:00002A29                 pop     ebp
.text:00002A2A                 retn
.text:00002A2A ??1CUpdateItem@NZip@NArchive@@QAE@XZ endp
.text:00002A2A
.text:00002A2A ; ---------------------------------------------------------------------------
.text:00002A2B                 align 4
.text:00002A2B _text           ends
.text:00002A2B
.text:00002A2C ; ===========================================================================
.text:00002A2C
.text:00002A2C ; Segment type: Pure code
.text:00002A2C ; Segment permissions: Read/Execute
.text:00002A2C _text           segment para public 'CODE' use32
.text:00002A2C                 assume cs:_text
.text:00002A2C                 ;org 2A2Ch
.text:00002A2C ; COMDAT (pick any)
.text:00002A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A2C
.text:00002A2C ; =============== S U B R O U T I N E =======================================
.text:00002A2C
.text:00002A2C ; Attributes: bp-based frame
.text:00002A2C
.text:00002A2C ; _DWORD __thiscall NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode *__hidden this)
.text:00002A2C                 public ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text:00002A2C ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ proc near
.text:00002A2C                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F17p
.text:00002A2C                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+FD7p ...
.text:00002A2C
.text:00002A2C var_10          = dword ptr -10h
.text:00002A2C var_C           = dword ptr -0Ch
.text:00002A2C var_4           = dword ptr -4
.text:00002A2C
.text:00002A2C                 push    ebp
.text:00002A2D                 mov     ebp, esp
.text:00002A2F                 push    0FFFFFFFFh
.text:00002A31                 push    offset __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text:00002A36                 mov     eax, large fs:0
.text:00002A3C                 push    eax
.text:00002A3D                 push    ecx
.text:00002A3E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002A45                 mov     eax, dword ptr ds:___security_cookie
.text:00002A4A                 xor     eax, ebp
.text:00002A4C                 push    eax
.text:00002A4D                 lea     eax, [ebp+var_C]
.text:00002A50                 mov     large fs:0, eax
.text:00002A56                 mov     [ebp+var_10], ecx
.text:00002A59                 mov     [ebp+var_4], 1
.text:00002A60                 mov     ecx, [ebp+var_10]
.text:00002A63                 add     ecx, 28h ; '('  ; this
.text:00002A66                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00002A6B                 mov     byte ptr [ebp+var_4], 0
.text:00002A6F                 mov     ecx, [ebp+var_10]
.text:00002A72                 add     ecx, 18h
.text:00002A75                 call    ??1?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::~CRecordVector<uchar>(void)
.text:00002A7A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002A81                 mov     ecx, [ebp+var_10] ; this
.text:00002A84                 call    ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text:00002A89                 mov     ecx, [ebp+var_C]
.text:00002A8C                 mov     large fs:0, ecx
.text:00002A93                 pop     ecx
.text:00002A94                 add     esp, 10h
.text:00002A97                 cmp     ebp, esp
.text:00002A99                 call    __RTC_CheckEsp
.text:00002A9E                 mov     esp, ebp
.text:00002AA0                 pop     ebp
.text:00002AA1                 retn
.text:00002AA1 ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ endp
.text:00002AA1
.text:00002AA1 ; ---------------------------------------------------------------------------
.text:00002AA2                 align 4
.text:00002AA2 _text           ends
.text:00002AA2
.text$x:00002AA4 ; ===========================================================================
.text$x:00002AA4
.text$x:00002AA4 ; Segment type: Pure code
.text$x:00002AA4 ; Segment permissions: Read/Execute
.text$x:00002AA4 _text$x         segment para public 'CODE' use32
.text$x:00002AA4                 assume cs:_text$x
.text$x:00002AA4                 ;org 2AA4h
.text$x:00002AA4 ; COMDAT (pick associative to section at 2A2C)
.text$x:00002AA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002AA4
.text$x:00002AA4 ; =============== S U B R O U T I N E =======================================
.text$x:00002AA4
.text$x:00002AA4
.text$x:00002AA4 __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00002AA4                                         ; DATA XREF: .xdata$x:00002AD8o
.text$x:00002AA4                 mov     ecx, [ebp-10h]  ; this
.text$x:00002AA7                 jmp     ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text$x:00002AA7 __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00002AA7
.text$x:00002AAC
.text$x:00002AAC ; =============== S U B R O U T I N E =======================================
.text$x:00002AAC
.text$x:00002AAC
.text$x:00002AAC __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00002AAC                                         ; DATA XREF: .xdata$x:00002AE0o
.text$x:00002AAC                 mov     ecx, [ebp-10h]
.text$x:00002AAF                 add     ecx, 18h
.text$x:00002AB2                 jmp     ??1?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::~CRecordVector<uchar>(void)
.text$x:00002AB2 __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00002AB2
.text$x:00002AB7
.text$x:00002AB7 ; =============== S U B R O U T I N E =======================================
.text$x:00002AB7
.text$x:00002AB7
.text$x:00002AB7 __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ proc near
.text$x:00002AB7                                         ; DATA XREF: NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)+5o
.text$x:00002AB7
.text$x:00002AB7 arg_4           = dword ptr  8
.text$x:00002AB7
.text$x:00002AB7                 mov     edx, [esp+arg_4]
.text$x:00002ABB                 lea     eax, [edx+0Ch]
.text$x:00002ABE                 mov     ecx, [edx-8]
.text$x:00002AC1                 xor     ecx, eax
.text$x:00002AC3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002AC8                 mov     eax, offset __ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text$x:00002ACD                 jmp     ___CxxFrameHandler3
.text$x:00002ACD __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ endp
.text$x:00002ACD
.text$x:00002ACD ; ---------------------------------------------------------------------------
.text$x:00002AD2                 align 4
.text$x:00002AD2 _text$x         ends
.text$x:00002AD2
.xdata$x:00002AD4 ; ===========================================================================
.xdata$x:00002AD4
.xdata$x:00002AD4 ; Segment type: Pure data
.xdata$x:00002AD4 ; Segment permissions: Read
.xdata$x:00002AD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002AD4                 assume cs:_xdata$x
.xdata$x:00002AD4                 ;org 2AD4h
.xdata$x:00002AD4 ; COMDAT (pick associative to section at 2A2C)
.xdata$x:00002AD4 __unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00002AD4                                         ; DATA XREF: .xdata$x:00002AECo
.xdata$x:00002AD5                 db 0FFh
.xdata$x:00002AD6                 db 0FFh
.xdata$x:00002AD7                 db 0FFh
.xdata$x:00002AD8                 dd offset __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0
.xdata$x:00002ADC                 align 10h
.xdata$x:00002AE0                 dd offset __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1
.xdata$x:00002AE4 __ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00002AE4                                         ; DATA XREF: __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00002AE5                 db    5
.xdata$x:00002AE6                 db  93h ; ô
.xdata$x:00002AE7                 db  19h
.xdata$x:00002AE8                 db    2
.xdata$x:00002AE9                 db    0
.xdata$x:00002AEA                 db    0
.xdata$x:00002AEB                 db    0
.xdata$x:00002AEC                 dd offset __unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.xdata$x:00002AF0                 db    0
.xdata$x:00002AF1                 db    0
.xdata$x:00002AF2                 db    0
.xdata$x:00002AF3                 db    0
.xdata$x:00002AF4                 db    0
.xdata$x:00002AF5                 db    0
.xdata$x:00002AF6                 db    0
.xdata$x:00002AF7                 db    0
.xdata$x:00002AF8                 db    0
.xdata$x:00002AF9                 db    0
.xdata$x:00002AFA                 db    0
.xdata$x:00002AFB                 db    0
.xdata$x:00002AFC                 db    0
.xdata$x:00002AFD                 db    0
.xdata$x:00002AFE                 db    0
.xdata$x:00002AFF                 db    0
.xdata$x:00002B00                 db    0
.xdata$x:00002B01                 db    0
.xdata$x:00002B02                 db    0
.xdata$x:00002B03                 db    0
.xdata$x:00002B04                 db    1
.xdata$x:00002B05                 db    0
.xdata$x:00002B06                 db    0
.xdata$x:00002B07                 db    0
.xdata$x:00002B07 _xdata$x        ends
.xdata$x:00002B07
.text:00002B08 ; ===========================================================================
.text:00002B08
.text:00002B08 ; Segment type: Pure code
.text:00002B08 ; Segment permissions: Read/Execute
.text:00002B08 _text           segment para public 'CODE' use32
.text:00002B08                 assume cs:_text
.text:00002B08                 ;org 2B08h
.text:00002B08 ; COMDAT (pick any)
.text:00002B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B08
.text:00002B08 ; =============== S U B R O U T I N E =======================================
.text:00002B08
.text:00002B08 ; Attributes: bp-based frame
.text:00002B08
.text:00002B08 ; public: struct NArchive::NZip::CBaseProps & __thiscall NArchive::NZip::CBaseProps::operator=(struct NArchive::NZip::CBaseProps const &)
.text:00002B08                 public ??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z
.text:00002B08 ??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z proc near
.text:00002B08                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E19p
.text:00002B08
.text:00002B08 var_4           = dword ptr -4
.text:00002B08 arg_0           = dword ptr  8
.text:00002B08
.text:00002B08                 push    ebp
.text:00002B09                 mov     ebp, esp
.text:00002B0B                 push    ecx
.text:00002B0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B13                 mov     [ebp+var_4], ecx
.text:00002B16                 mov     eax, [ebp+arg_0]
.text:00002B19                 push    eax
.text:00002B1A                 mov     ecx, [ebp+var_4]
.text:00002B1D                 call    ??4CMethodProps@@QAEAAV0@ABV0@@Z ; CMethodProps::operator=(CMethodProps const &)
.text:00002B22                 mov     ecx, [ebp+var_4]
.text:00002B25                 mov     edx, [ebp+arg_0]
.text:00002B28                 mov     eax, [edx+0Ch]
.text:00002B2B                 mov     [ecx+0Ch], eax
.text:00002B2E                 mov     ecx, [ebp+var_4]
.text:00002B31                 mov     edx, [ebp+arg_0]
.text:00002B34                 mov     eax, [edx+10h]
.text:00002B37                 mov     [ecx+10h], eax
.text:00002B3A                 mov     ecx, [ebp+var_4]
.text:00002B3D                 mov     edx, [ebp+arg_0]
.text:00002B40                 mov     al, [edx+14h]
.text:00002B43                 mov     [ecx+14h], al
.text:00002B46                 mov     ecx, [ebp+var_4]
.text:00002B49                 mov     edx, [ebp+arg_0]
.text:00002B4C                 mov     al, [edx+15h]
.text:00002B4F                 mov     [ecx+15h], al
.text:00002B52                 mov     ecx, [ebp+var_4]
.text:00002B55                 mov     edx, [ebp+arg_0]
.text:00002B58                 mov     al, [edx+16h]
.text:00002B5B                 mov     [ecx+16h], al
.text:00002B5E                 mov     eax, [ebp+var_4]
.text:00002B61                 add     esp, 4
.text:00002B64                 cmp     ebp, esp
.text:00002B66                 call    __RTC_CheckEsp
.text:00002B6B                 mov     esp, ebp
.text:00002B6D                 pop     ebp
.text:00002B6E                 retn    4
.text:00002B6E ??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z endp
.text:00002B6E
.text:00002B6E ; ---------------------------------------------------------------------------
.text:00002B71                 align 4
.text:00002B71 _text           ends
.text:00002B71
.text:00002B74 ; ===========================================================================
.text:00002B74
.text:00002B74 ; Segment type: Pure code
.text:00002B74 ; Segment permissions: Read/Execute
.text:00002B74 _text           segment para public 'CODE' use32
.text:00002B74                 assume cs:_text
.text:00002B74                 ;org 2B74h
.text:00002B74 ; COMDAT (pick any)
.text:00002B74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B74
.text:00002B74 ; =============== S U B R O U T I N E =======================================
.text:00002B74
.text:00002B74 ; Attributes: bp-based frame
.text:00002B74
.text:00002B74 ; public: class CMethodProps & __thiscall CMethodProps::operator=(class CMethodProps const &)
.text:00002B74                 public ??4CMethodProps@@QAEAAV0@ABV0@@Z
.text:00002B74 ??4CMethodProps@@QAEAAV0@ABV0@@Z proc near
.text:00002B74                                         ; CODE XREF: NArchive::NZip::CBaseProps::operator=(NArchive::NZip::CBaseProps const &)+15p
.text:00002B74
.text:00002B74 var_4           = dword ptr -4
.text:00002B74 arg_0           = dword ptr  8
.text:00002B74
.text:00002B74                 push    ebp
.text:00002B75                 mov     ebp, esp
.text:00002B77                 push    ecx
.text:00002B78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B7F                 mov     [ebp+var_4], ecx
.text:00002B82                 mov     eax, [ebp+arg_0]
.text:00002B85                 push    eax
.text:00002B86                 mov     ecx, [ebp+var_4]
.text:00002B89                 call    ??4CProps@@QAEAAU0@ABU0@@Z ; CProps::operator=(CProps const &)
.text:00002B8E                 mov     eax, [ebp+var_4]
.text:00002B91                 add     esp, 4
.text:00002B94                 cmp     ebp, esp
.text:00002B96                 call    __RTC_CheckEsp
.text:00002B9B                 mov     esp, ebp
.text:00002B9D                 pop     ebp
.text:00002B9E                 retn    4
.text:00002B9E ??4CMethodProps@@QAEAAV0@ABV0@@Z endp
.text:00002B9E
.text:00002B9E ; ---------------------------------------------------------------------------
.text:00002BA1                 align 4
.text:00002BA1 _text           ends
.text:00002BA1
.text:00002BA4 ; ===========================================================================
.text:00002BA4
.text:00002BA4 ; Segment type: Pure code
.text:00002BA4 ; Segment permissions: Read/Execute
.text:00002BA4 _text           segment para public 'CODE' use32
.text:00002BA4                 assume cs:_text
.text:00002BA4                 ;org 2BA4h
.text:00002BA4 ; COMDAT (pick any)
.text:00002BA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BA4
.text:00002BA4 ; =============== S U B R O U T I N E =======================================
.text:00002BA4
.text:00002BA4 ; Attributes: bp-based frame
.text:00002BA4
.text:00002BA4 ; public: struct CProps & __thiscall CProps::operator=(struct CProps const &)
.text:00002BA4                 public ??4CProps@@QAEAAU0@ABU0@@Z
.text:00002BA4 ??4CProps@@QAEAAU0@ABU0@@Z proc near    ; CODE XREF: CMethodProps::operator=(CMethodProps const &)+15p
.text:00002BA4
.text:00002BA4 var_4           = dword ptr -4
.text:00002BA4 arg_0           = dword ptr  8
.text:00002BA4
.text:00002BA4                 push    ebp
.text:00002BA5                 mov     ebp, esp
.text:00002BA7                 push    ecx
.text:00002BA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BAF                 mov     [ebp+var_4], ecx
.text:00002BB2                 mov     eax, [ebp+arg_0]
.text:00002BB5                 push    eax
.text:00002BB6                 mov     ecx, [ebp+var_4]
.text:00002BB9                 call    ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)
.text:00002BBE                 mov     eax, [ebp+var_4]
.text:00002BC1                 add     esp, 4
.text:00002BC4                 cmp     ebp, esp
.text:00002BC6                 call    __RTC_CheckEsp
.text:00002BCB                 mov     esp, ebp
.text:00002BCD                 pop     ebp
.text:00002BCE                 retn    4
.text:00002BCE ??4CProps@@QAEAAU0@ABU0@@Z endp
.text:00002BCE
.text:00002BCE ; ---------------------------------------------------------------------------
.text:00002BD1                 align 4
.text:00002BD1 _text           ends
.text:00002BD1
.text:00002BD4 ; ===========================================================================
.text:00002BD4
.text:00002BD4 ; Segment type: Pure code
.text:00002BD4 ; Segment permissions: Read/Execute
.text:00002BD4 _text           segment para public 'CODE' use32
.text:00002BD4                 assume cs:_text
.text:00002BD4                 ;org 2BD4h
.text:00002BD4 ; COMDAT (pick any)
.text:00002BD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BD4
.text:00002BD4 ; =============== S U B R O U T I N E =======================================
.text:00002BD4
.text:00002BD4 ; Attributes: bp-based frame
.text:00002BD4
.text:00002BD4 ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:00002BD4                 public ?Ptr@UString@@QBEPB_WI@Z
.text:00002BD4 ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+C3p
.text:00002BD4                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+19Fp ...
.text:00002BD4
.text:00002BD4 var_4           = dword ptr -4
.text:00002BD4 arg_0           = dword ptr  8
.text:00002BD4
.text:00002BD4                 push    ebp
.text:00002BD5                 mov     ebp, esp
.text:00002BD7                 push    ecx
.text:00002BD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BDF                 mov     [ebp+var_4], ecx
.text:00002BE2                 mov     eax, [ebp+var_4]
.text:00002BE5                 mov     ecx, [eax]
.text:00002BE7                 mov     edx, [ebp+arg_0]
.text:00002BEA                 lea     eax, [ecx+edx*2]
.text:00002BED                 mov     esp, ebp
.text:00002BEF                 pop     ebp
.text:00002BF0                 retn    4
.text:00002BF0 ?Ptr@UString@@QBEPB_WI@Z endp
.text:00002BF0
.text:00002BF0 ; ---------------------------------------------------------------------------
.text:00002BF3                 align 4
.text:00002BF3 _text           ends
.text:00002BF3
.text:00002BF4 ; ===========================================================================
.text:00002BF4
.text:00002BF4 ; Segment type: Pure code
.text:00002BF4 ; Segment permissions: Read/Execute
.text:00002BF4 _text           segment para public 'CODE' use32
.text:00002BF4                 assume cs:_text
.text:00002BF4                 ;org 2BF4h
.text:00002BF4 ; COMDAT (pick any)
.text:00002BF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BF4
.text:00002BF4 ; =============== S U B R O U T I N E =======================================
.text:00002BF4
.text:00002BF4 ; Attributes: bp-based frame
.text:00002BF4
.text:00002BF4 ; void __thiscall UString::MakeLower_Ascii(UString *__hidden this)
.text:00002BF4                 public ?MakeLower_Ascii@UString@@QAEXXZ
.text:00002BF4 ?MakeLower_Ascii@UString@@QAEXXZ proc near
.text:00002BF4                                         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+66p
.text:00002BF4                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+17Dp ...
.text:00002BF4
.text:00002BF4 var_4           = dword ptr -4
.text:00002BF4
.text:00002BF4                 push    ebp
.text:00002BF5                 mov     ebp, esp
.text:00002BF7                 push    ecx
.text:00002BF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BFF                 mov     [ebp+var_4], ecx
.text:00002C02                 mov     eax, [ebp+var_4]
.text:00002C05                 mov     ecx, [eax]
.text:00002C07                 push    ecx             ; wchar_t *
.text:00002C08                 call    ?MyStringLower_Ascii@@YGXPA_W@Z ; MyStringLower_Ascii(wchar_t *)
.text:00002C0D                 add     esp, 4
.text:00002C10                 cmp     ebp, esp
.text:00002C12                 call    __RTC_CheckEsp
.text:00002C17                 mov     esp, ebp
.text:00002C19                 pop     ebp
.text:00002C1A                 retn
.text:00002C1A ?MakeLower_Ascii@UString@@QAEXXZ endp
.text:00002C1A
.text:00002C1A ; ---------------------------------------------------------------------------
.text:00002C1B                 align 4
.text:00002C1B _text           ends
.text:00002C1B
.text:00002C1C ; ===========================================================================
.text:00002C1C
.text:00002C1C ; Segment type: Pure code
.text:00002C1C ; Segment permissions: Read/Execute
.text:00002C1C _text           segment para public 'CODE' use32
.text:00002C1C                 assume cs:_text
.text:00002C1C                 ;org 2C1Ch
.text:00002C1C ; COMDAT (pick any)
.text:00002C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C1C
.text:00002C1C ; =============== S U B R O U T I N E =======================================
.text:00002C1C
.text:00002C1C ; Attributes: bp-based frame
.text:00002C1C
.text:00002C1C ; bool __thiscall UString::IsEqualTo(UString *this, const char *)
.text:00002C1C                 public ?IsEqualTo@UString@@QBE_NPBD@Z
.text:00002C1C ?IsEqualTo@UString@@QBE_NPBD@Z proc near
.text:00002C1C                                         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1ECp
.text:00002C1C                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+557p ...
.text:00002C1C
.text:00002C1C var_4           = dword ptr -4
.text:00002C1C arg_0           = dword ptr  8
.text:00002C1C
.text:00002C1C                 push    ebp
.text:00002C1D                 mov     ebp, esp
.text:00002C1F                 push    ecx
.text:00002C20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C27                 mov     [ebp+var_4], ecx
.text:00002C2A                 mov     eax, [ebp+arg_0]
.text:00002C2D                 push    eax             ; char *
.text:00002C2E                 mov     ecx, [ebp+var_4]
.text:00002C31                 mov     edx, [ecx]
.text:00002C33                 push    edx             ; wchar_t *
.text:00002C34                 call    ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqual_Ascii(wchar_t const *,char const *)
.text:00002C39                 add     esp, 4
.text:00002C3C                 cmp     ebp, esp
.text:00002C3E                 call    __RTC_CheckEsp
.text:00002C43                 mov     esp, ebp
.text:00002C45                 pop     ebp
.text:00002C46                 retn    4
.text:00002C46 ?IsEqualTo@UString@@QBE_NPBD@Z endp
.text:00002C46
.text:00002C46 ; ---------------------------------------------------------------------------
.text:00002C49                 align 4
.text:00002C49 _text           ends
.text:00002C49
.text:00002C4C ; ===========================================================================
.text:00002C4C
.text:00002C4C ; Segment type: Pure code
.text:00002C4C ; Segment permissions: Read/Execute
.text:00002C4C _text           segment para public 'CODE' use32
.text:00002C4C                 assume cs:_text
.text:00002C4C                 ;org 2C4Ch
.text:00002C4C ; COMDAT (pick any)
.text:00002C4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C4C
.text:00002C4C ; =============== S U B R O U T I N E =======================================
.text:00002C4C
.text:00002C4C ; Attributes: bp-based frame
.text:00002C4C
.text:00002C4C ; bool __thiscall UString::IsPrefixedBy(UString *this, const wchar_t *)
.text:00002C4C                 public ?IsPrefixedBy@UString@@QBE_NPB_W@Z
.text:00002C4C ?IsPrefixedBy@UString@@QBE_NPB_W@Z proc near
.text:00002C4C                                         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+345p
.text:00002C4C                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+39Cp ...
.text:00002C4C
.text:00002C4C var_4           = dword ptr -4
.text:00002C4C arg_0           = dword ptr  8
.text:00002C4C
.text:00002C4C                 push    ebp
.text:00002C4D                 mov     ebp, esp
.text:00002C4F                 push    ecx
.text:00002C50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C57                 mov     [ebp+var_4], ecx
.text:00002C5A                 mov     eax, [ebp+arg_0]
.text:00002C5D                 push    eax             ; wchar_t *
.text:00002C5E                 mov     ecx, [ebp+var_4]
.text:00002C61                 mov     edx, [ecx]
.text:00002C63                 push    edx             ; wchar_t *
.text:00002C64                 call    ?IsString1PrefixedByString2@@YG_NPB_W0@Z ; IsString1PrefixedByString2(wchar_t const *,wchar_t const *)
.text:00002C69                 add     esp, 4
.text:00002C6C                 cmp     ebp, esp
.text:00002C6E                 call    __RTC_CheckEsp
.text:00002C73                 mov     esp, ebp
.text:00002C75                 pop     ebp
.text:00002C76                 retn    4
.text:00002C76 ?IsPrefixedBy@UString@@QBE_NPB_W@Z endp
.text:00002C76
.text:00002C76 ; ---------------------------------------------------------------------------
.text:00002C79                 align 4
.text:00002C79 _text           ends
.text:00002C79
.text:00002C7C ; ===========================================================================
.text:00002C7C
.text:00002C7C ; Segment type: Pure code
.text:00002C7C ; Segment permissions: Read/Execute
.text:00002C7C _text           segment para public 'CODE' use32
.text:00002C7C                 assume cs:_text
.text:00002C7C                 ;org 2C7Ch
.text:00002C7C ; COMDAT (pick any)
.text:00002C7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C7C
.text:00002C7C ; =============== S U B R O U T I N E =======================================
.text:00002C7C
.text:00002C7C ; Attributes: bp-based frame
.text:00002C7C
.text:00002C7C ; int __thiscall UString::Find(UString *this, wchar_t)
.text:00002C7C                 public ?Find@UString@@QBEH_W@Z
.text:00002C7C ?Find@UString@@QBEH_W@Z proc near       ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+187p
.text:00002C7C
.text:00002C7C var_4           = dword ptr -4
.text:00002C7C arg_0           = word ptr  8
.text:00002C7C
.text:00002C7C                 push    ebp
.text:00002C7D                 mov     ebp, esp
.text:00002C7F                 push    ecx
.text:00002C80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C87                 mov     [ebp+var_4], ecx
.text:00002C8A                 movzx   eax, [ebp+arg_0]
.text:00002C8E                 push    eax             ; wchar_t
.text:00002C8F                 mov     ecx, [ebp+var_4]
.text:00002C92                 mov     edx, [ecx]
.text:00002C94                 push    edx             ; wchar_t *
.text:00002C95                 call    ?FindCharPosInString@@YGHPB_W_W@Z ; FindCharPosInString(wchar_t const *,wchar_t)
.text:00002C9A                 add     esp, 4
.text:00002C9D                 cmp     ebp, esp
.text:00002C9F                 call    __RTC_CheckEsp
.text:00002CA4                 mov     esp, ebp
.text:00002CA6                 pop     ebp
.text:00002CA7                 retn    4
.text:00002CA7 ?Find@UString@@QBEH_W@Z endp
.text:00002CA7
.text:00002CA7 ; ---------------------------------------------------------------------------
.text:00002CAA                 align 4
.text:00002CAA _text           ends
.text:00002CAA
.text:00002CAC ; ===========================================================================
.text:00002CAC
.text:00002CAC ; Segment type: Pure code
.text:00002CAC ; Segment permissions: Read/Execute
.text:00002CAC _text           segment para public 'CODE' use32
.text:00002CAC                 assume cs:_text
.text:00002CAC                 ;org 2CACh
.text:00002CAC ; COMDAT (pick any)
.text:00002CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002CAC
.text:00002CAC ; =============== S U B R O U T I N E =======================================
.text:00002CAC
.text:00002CAC ; Attributes: bp-based frame
.text:00002CAC
.text:00002CAC ; void __thiscall UString::DeleteFrom(UString *this, unsigned int)
.text:00002CAC                 public ?DeleteFrom@UString@@QAEXI@Z
.text:00002CAC ?DeleteFrom@UString@@QAEXI@Z proc near  ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1B4p
.text:00002CAC
.text:00002CAC var_4           = dword ptr -4
.text:00002CAC arg_0           = dword ptr  8
.text:00002CAC
.text:00002CAC                 push    ebp
.text:00002CAD                 mov     ebp, esp
.text:00002CAF                 push    ecx
.text:00002CB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CB7                 mov     [ebp+var_4], ecx
.text:00002CBA                 mov     eax, [ebp+var_4]
.text:00002CBD                 mov     ecx, [ebp+arg_0]
.text:00002CC0                 cmp     ecx, [eax+4]
.text:00002CC3                 jnb     short loc_2CDC
.text:00002CC5                 mov     edx, [ebp+var_4]
.text:00002CC8                 mov     eax, [ebp+arg_0]
.text:00002CCB                 mov     [edx+4], eax
.text:00002CCE                 mov     ecx, [ebp+var_4]
.text:00002CD1                 mov     edx, [ecx]
.text:00002CD3                 xor     eax, eax
.text:00002CD5                 mov     ecx, [ebp+arg_0]
.text:00002CD8                 mov     [edx+ecx*2], ax
.text:00002CDC
.text:00002CDC loc_2CDC:                               ; CODE XREF: UString::DeleteFrom(uint)+17j
.text:00002CDC                 mov     esp, ebp
.text:00002CDE                 pop     ebp
.text:00002CDF                 retn    4
.text:00002CDF ?DeleteFrom@UString@@QAEXI@Z endp
.text:00002CDF
.text:00002CDF ; ---------------------------------------------------------------------------
.text:00002CE2                 align 4
.text:00002CE2 _text           ends
.text:00002CE2
.text:00002CE4 ; ===========================================================================
.text:00002CE4
.text:00002CE4 ; Segment type: Pure code
.text:00002CE4 ; Segment permissions: Read/Execute
.text:00002CE4 _text           segment para public 'CODE' use32
.text:00002CE4                 assume cs:_text
.text:00002CE4                 ;org 2CE4h
.text:00002CE4 ; COMDAT (pick any)
.text:00002CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002CE4
.text:00002CE4 ; =============== S U B R O U T I N E =======================================
.text:00002CE4
.text:00002CE4 ; Attributes: bp-based frame
.text:00002CE4
.text:00002CE4 ; int __stdcall operator==(int, wchar_t *Str2)
.text:00002CE4                 public ??8@YG_NABVUString@@PB_W@Z
.text:00002CE4 ??8@YG_NABVUString@@PB_W@Z proc near    ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+144p
.text:00002CE4                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3BFp ...
.text:00002CE4
.text:00002CE4 arg_0           = dword ptr  8
.text:00002CE4 Str2            = dword ptr  0Ch
.text:00002CE4
.text:00002CE4                 push    ebp
.text:00002CE5                 mov     ebp, esp
.text:00002CE7                 push    esi
.text:00002CE8                 mov     esi, esp
.text:00002CEA                 mov     eax, [ebp+Str2]
.text:00002CED                 push    eax             ; Str2
.text:00002CEE                 mov     ecx, [ebp+arg_0]
.text:00002CF1                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002CF6                 push    eax             ; Str1
.text:00002CF7                 call    dword ptr ds:__imp__wcscmp
.text:00002CFD                 add     esp, 8
.text:00002D00                 cmp     esi, esp
.text:00002D02                 call    __RTC_CheckEsp
.text:00002D07                 neg     eax
.text:00002D09                 sbb     eax, eax
.text:00002D0B                 add     eax, 1
.text:00002D0E                 pop     esi
.text:00002D0F                 cmp     ebp, esp
.text:00002D11                 call    __RTC_CheckEsp
.text:00002D16                 pop     ebp
.text:00002D17                 retn    8
.text:00002D17 ??8@YG_NABVUString@@PB_W@Z endp
.text:00002D17
.text:00002D17 ; ---------------------------------------------------------------------------
.text:00002D1A                 align 4
.text:00002D1A _text           ends
.text:00002D1A
.text:00002D1C ; ===========================================================================
.text:00002D1C
.text:00002D1C ; Segment type: Pure code
.text:00002D1C ; Segment permissions: Read/Execute
.text:00002D1C _text           segment para public 'CODE' use32
.text:00002D1C                 assume cs:_text
.text:00002D1C                 ;org 2D1Ch
.text:00002D1C ; COMDAT (pick any)
.text:00002D1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D1C
.text:00002D1C ; =============== S U B R O U T I N E =======================================
.text:00002D1C
.text:00002D1C ; Attributes: bp-based frame
.text:00002D1C
.text:00002D1C ; void __thiscall CMethodProps::AddProp_Level(CMethodProps *this, unsigned int)
.text:00002D1C                 public ?AddProp_Level@CMethodProps@@QAEXI@Z
.text:00002D1C ?AddProp_Level@CMethodProps@@QAEXI@Z proc near
.text:00002D1C                                         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+131p
.text:00002D1C
.text:00002D1C var_4           = dword ptr -4
.text:00002D1C arg_0           = dword ptr  8
.text:00002D1C
.text:00002D1C                 push    ebp
.text:00002D1D                 mov     ebp, esp
.text:00002D1F                 push    ecx
.text:00002D20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D27                 mov     [ebp+var_4], ecx
.text:00002D2A                 mov     eax, [ebp+arg_0]
.text:00002D2D                 push    eax             ; unsigned int
.text:00002D2E                 push    0Fh             ; unsigned __int32
.text:00002D30                 mov     ecx, [ebp+var_4] ; this
.text:00002D33                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00002D38                 add     esp, 4
.text:00002D3B                 cmp     ebp, esp
.text:00002D3D                 call    __RTC_CheckEsp
.text:00002D42                 mov     esp, ebp
.text:00002D44                 pop     ebp
.text:00002D45                 retn    4
.text:00002D45 ?AddProp_Level@CMethodProps@@QAEXI@Z endp
.text:00002D45
.text:00002D45 _text           ends
.text:00002D45
.text:00002D48 ; ===========================================================================
.text:00002D48
.text:00002D48 ; Segment type: Pure code
.text:00002D48 ; Segment permissions: Read/Execute
.text:00002D48 _text           segment para public 'CODE' use32
.text:00002D48                 assume cs:_text
.text:00002D48                 ;org 2D48h
.text:00002D48 ; COMDAT (pick any)
.text:00002D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D48
.text:00002D48 ; =============== S U B R O U T I N E =======================================
.text:00002D48
.text:00002D48 ; Attributes: bp-based frame
.text:00002D48
.text:00002D48 ; void __thiscall NArchive::NZip::CHandler::InitMethodProps(NArchive::NZip::CHandler *__hidden this)
.text:00002D48                 public ?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ
.text:00002D48 ?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ proc near
.text:00002D48                                         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+22p
.text:00002D48
.text:00002D48 var_4           = dword ptr -4
.text:00002D48
.text:00002D48                 push    ebp
.text:00002D49                 mov     ebp, esp
.text:00002D4B                 push    ecx
.text:00002D4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D53                 mov     [ebp+var_4], ecx
.text:00002D56                 mov     ecx, [ebp+var_4]
.text:00002D59                 add     ecx, 0A8h ; '¿' ; this
.text:00002D5F                 call    ?Init@CBaseProps@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CBaseProps::Init(void)
.text:00002D64                 mov     eax, [ebp+var_4]
.text:00002D67                 mov     dword ptr [eax+0C0h], 0FFFFFFFFh
.text:00002D71                 mov     ecx, [ebp+var_4]
.text:00002D74                 mov     byte ptr [ecx+0C4h], 0
.text:00002D7B                 mov     edx, [ebp+var_4]
.text:00002D7E                 mov     byte ptr [edx+0C5h], 1
.text:00002D85                 mov     eax, [ebp+var_4]
.text:00002D88                 mov     byte ptr [eax+0C6h], 0
.text:00002D8F                 mov     ecx, [ebp+var_4]
.text:00002D92                 mov     byte ptr [ecx+0C7h], 0
.text:00002D99                 mov     edx, [ebp+var_4]
.text:00002D9C                 mov     byte ptr [edx+0C8h], 0
.text:00002DA3                 mov     eax, [ebp+var_4]
.text:00002DA6                 mov     byte ptr [eax+0C9h], 0
.text:00002DAD                 mov     ecx, [ebp+var_4]
.text:00002DB0                 mov     dword ptr [ecx+0CCh], 1
.text:00002DBA                 add     esp, 4
.text:00002DBD                 cmp     ebp, esp
.text:00002DBF                 call    __RTC_CheckEsp
.text:00002DC4                 mov     esp, ebp
.text:00002DC6                 pop     ebp
.text:00002DC7                 retn
.text:00002DC7 ?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ endp
.text:00002DC7
.text:00002DC7 _text           ends
.text:00002DC7
.text:00002DC8 ; ===========================================================================
.text:00002DC8
.text:00002DC8 ; Segment type: Pure code
.text:00002DC8 ; Segment permissions: Read/Execute
.text:00002DC8 _text           segment para public 'CODE' use32
.text:00002DC8                 assume cs:_text
.text:00002DC8                 ;org 2DC8h
.text:00002DC8 ; COMDAT (pick any)
.text:00002DC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002DC8
.text:00002DC8 ; =============== S U B R O U T I N E =======================================
.text:00002DC8
.text:00002DC8 ; Attributes: bp-based frame
.text:00002DC8
.text:00002DC8 ; void __thiscall NArchive::NZip::CBaseProps::Init(NArchive::NZip::CBaseProps *this)
.text:00002DC8                 public ?Init@CBaseProps@NZip@NArchive@@QAEXXZ
.text:00002DC8 ?Init@CBaseProps@NZip@NArchive@@QAEXXZ proc near
.text:00002DC8                                         ; CODE XREF: NArchive::NZip::CHandler::InitMethodProps(void)+17p
.text:00002DC8
.text:00002DC8 var_4           = dword ptr -4
.text:00002DC8
.text:00002DC8                 push    ebp
.text:00002DC9                 mov     ebp, esp
.text:00002DCB                 push    ecx             ; this
.text:00002DCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DD3                 mov     [ebp+var_4], ecx
.text:00002DD6                 mov     ecx, [ebp+var_4] ; this
.text:00002DD9                 call    ?Clear@CProps@@QAEXXZ ; CProps::Clear(void)
.text:00002DDE                 mov     eax, [ebp+var_4]
.text:00002DE1                 mov     dword ptr [eax+0Ch], 0FFFFFFFFh
.text:00002DE8                 call    ?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ ; NWindows::NSystem::GetNumberOfProcessors(void)
.text:00002DED                 mov     ecx, [ebp+var_4]
.text:00002DF0                 mov     [ecx+10h], eax
.text:00002DF3                 mov     edx, [ebp+var_4]
.text:00002DF6                 mov     byte ptr [edx+14h], 0
.text:00002DFA                 mov     eax, [ebp+var_4]
.text:00002DFD                 mov     byte ptr [eax+15h], 0
.text:00002E01                 mov     ecx, [ebp+var_4]
.text:00002E04                 mov     byte ptr [ecx+16h], 3
.text:00002E08                 add     esp, 4
.text:00002E0B                 cmp     ebp, esp
.text:00002E0D                 call    __RTC_CheckEsp
.text:00002E12                 mov     esp, ebp
.text:00002E14                 pop     ebp
.text:00002E15                 retn
.text:00002E15 ?Init@CBaseProps@NZip@NArchive@@QAEXXZ endp
.text:00002E15
.text:00002E15 ; ---------------------------------------------------------------------------
.text:00002E16                 align 4
.text:00002E16 _text           ends
.text:00002E16
.text:00002E18 ; ===========================================================================
.text:00002E18
.text:00002E18 ; Segment type: Pure code
.text:00002E18 ; Segment permissions: Read/Execute
.text:00002E18 _text           segment para public 'CODE' use32
.text:00002E18                 assume cs:_text
.text:00002E18                 ;org 2E18h
.text:00002E18 ; COMDAT (pick any)
.text:00002E18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E18
.text:00002E18 ; =============== S U B R O U T I N E =======================================
.text:00002E18
.text:00002E18 ; Attributes: bp-based frame
.text:00002E18
.text:00002E18 ; void __thiscall CProps::Clear(CProps *__hidden this)
.text:00002E18                 public ?Clear@CProps@@QAEXXZ
.text:00002E18 ?Clear@CProps@@QAEXXZ proc near         ; CODE XREF: NArchive::NZip::CBaseProps::Init(void)+11p
.text:00002E18
.text:00002E18 var_4           = dword ptr -4
.text:00002E18
.text:00002E18                 push    ebp
.text:00002E19                 mov     ebp, esp
.text:00002E1B                 push    ecx
.text:00002E1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E23                 mov     [ebp+var_4], ecx
.text:00002E26                 mov     ecx, [ebp+var_4]
.text:00002E29                 call    ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ; CObjectVector<CProp>::Clear(void)
.text:00002E2E                 add     esp, 4
.text:00002E31                 cmp     ebp, esp
.text:00002E33                 call    __RTC_CheckEsp
.text:00002E38                 mov     esp, ebp
.text:00002E3A                 pop     ebp
.text:00002E3B                 retn
.text:00002E3B ?Clear@CProps@@QAEXXZ endp
.text:00002E3B
.text:00002E3B _text           ends
.text:00002E3B
.text:00002E3C ; ===========================================================================
.text:00002E3C
.text:00002E3C ; Segment type: Pure code
.text:00002E3C ; Segment permissions: Read/Execute
.text:00002E3C _text           segment para public 'CODE' use32
.text:00002E3C                 assume cs:_text
.text:00002E3C                 ;org 2E3Ch
.text:00002E3C ; COMDAT (pick any)
.text:00002E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E3C
.text:00002E3C ; =============== S U B R O U T I N E =======================================
.text:00002E3C
.text:00002E3C ; Attributes: bp-based frame
.text:00002E3C
.text:00002E3C ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:00002E3C                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00002E3C ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00002E3C                                         ; CODE XREF: NArchive::NZip::CInArchive::IsOpen(void)+17p
.text:00002E3C
.text:00002E3C var_4           = dword ptr -4
.text:00002E3C
.text:00002E3C                 push    ebp
.text:00002E3D                 mov     ebp, esp
.text:00002E3F                 push    ecx
.text:00002E40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E47                 mov     [ebp+var_4], ecx
.text:00002E4A                 mov     eax, [ebp+var_4]
.text:00002E4D                 mov     eax, [eax]
.text:00002E4F                 mov     esp, ebp
.text:00002E51                 pop     ebp
.text:00002E52                 retn
.text:00002E52 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00002E52
.text:00002E52 ; ---------------------------------------------------------------------------
.text:00002E53                 align 4
.text:00002E53 _text           ends
.text:00002E53
.text:00002E54 ; ===========================================================================
.text:00002E54
.text:00002E54 ; Segment type: Pure code
.text:00002E54 ; Segment permissions: Read/Execute
.text:00002E54 _text           segment para public 'CODE' use32
.text:00002E54                 assume cs:_text
.text:00002E54                 ;org 2E54h
.text:00002E54 ; COMDAT (pick any)
.text:00002E54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E54
.text:00002E54 ; =============== S U B R O U T I N E =======================================
.text:00002E54
.text:00002E54 ; Attributes: bp-based frame
.text:00002E54
.text:00002E54 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(void)
.text:00002E54                 public ??0?$CObjectVector@UCProp@@@@QAE@XZ
.text:00002E54 ??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00002E54                                         ; CODE XREF: CProps::CProps(void)+11p
.text:00002E54
.text:00002E54 var_4           = dword ptr -4
.text:00002E54
.text:00002E54                 push    ebp
.text:00002E55                 mov     ebp, esp
.text:00002E57                 push    ecx
.text:00002E58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E5F                 mov     [ebp+var_4], ecx
.text:00002E62                 mov     ecx, [ebp+var_4]
.text:00002E65                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00002E6A                 mov     eax, [ebp+var_4]
.text:00002E6D                 add     esp, 4
.text:00002E70                 cmp     ebp, esp
.text:00002E72                 call    __RTC_CheckEsp
.text:00002E77                 mov     esp, ebp
.text:00002E79                 pop     ebp
.text:00002E7A                 retn
.text:00002E7A ??0?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00002E7A
.text:00002E7A ; ---------------------------------------------------------------------------
.text:00002E7B                 align 4
.text:00002E7B _text           ends
.text:00002E7B
.text:00002E7C ; ===========================================================================
.text:00002E7C
.text:00002E7C ; Segment type: Pure code
.text:00002E7C ; Segment permissions: Read/Execute
.text:00002E7C _text           segment para public 'CODE' use32
.text:00002E7C                 assume cs:_text
.text:00002E7C                 ;org 2E7Ch
.text:00002E7C ; COMDAT (pick any)
.text:00002E7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E7C
.text:00002E7C ; =============== S U B R O U T I N E =======================================
.text:00002E7C
.text:00002E7C ; Attributes: bp-based frame
.text:00002E7C
.text:00002E7C ; public: class CObjectVector<struct CProp> & __thiscall CObjectVector<struct CProp>::operator=(class CObjectVector<struct CProp> const &)
.text:00002E7C                 public ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.text:00002E7C ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z proc near
.text:00002E7C                                         ; CODE XREF: CProps::operator=(CProps const &)+15p
.text:00002E7C
.text:00002E7C var_24          = dword ptr -24h
.text:00002E7C var_20          = dword ptr -20h
.text:00002E7C var_1C          = dword ptr -1Ch
.text:00002E7C var_18          = dword ptr -18h
.text:00002E7C var_14          = dword ptr -14h
.text:00002E7C var_10          = dword ptr -10h
.text:00002E7C var_C           = dword ptr -0Ch
.text:00002E7C var_4           = dword ptr -4
.text:00002E7C arg_0           = dword ptr  8
.text:00002E7C
.text:00002E7C                 push    ebp
.text:00002E7D                 mov     ebp, esp
.text:00002E7F                 push    0FFFFFFFFh
.text:00002E81                 push    offset __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.text:00002E86                 mov     eax, large fs:0
.text:00002E8C                 push    eax
.text:00002E8D                 sub     esp, 18h
.text:00002E90                 mov     eax, 0CCCCCCCCh
.text:00002E95                 mov     [ebp+var_24], eax
.text:00002E98                 mov     [ebp+var_20], eax
.text:00002E9B                 mov     [ebp+var_1C], eax
.text:00002E9E                 mov     [ebp+var_18], eax
.text:00002EA1                 mov     [ebp+var_14], eax
.text:00002EA4                 mov     [ebp+var_10], eax
.text:00002EA7                 mov     eax, dword ptr ds:___security_cookie
.text:00002EAC                 xor     eax, ebp
.text:00002EAE                 push    eax
.text:00002EAF                 lea     eax, [ebp+var_C]
.text:00002EB2                 mov     large fs:0, eax
.text:00002EB8                 mov     [ebp+var_10], ecx
.text:00002EBB                 mov     eax, [ebp+arg_0]
.text:00002EBE                 cmp     eax, [ebp+var_10]
.text:00002EC1                 jnz     short loc_2ECB
.text:00002EC3                 mov     eax, [ebp+var_10]
.text:00002EC6                 jmp     loc_2F5D
.text:00002ECB ; ---------------------------------------------------------------------------
.text:00002ECB
.text:00002ECB loc_2ECB:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+45j
.text:00002ECB                 mov     ecx, [ebp+var_10]
.text:00002ECE                 call    ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ; CObjectVector<CProp>::Clear(void)
.text:00002ED3                 mov     ecx, [ebp+arg_0]
.text:00002ED6                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:00002EDB                 mov     [ebp+var_14], eax
.text:00002EDE                 mov     ecx, [ebp+var_14]
.text:00002EE1                 push    ecx
.text:00002EE2                 mov     ecx, [ebp+var_10]
.text:00002EE5                 call    ?Reserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Reserve(uint)
.text:00002EEA                 mov     [ebp+var_18], 0
.text:00002EF1                 jmp     short loc_2EFC
.text:00002EF3 ; ---------------------------------------------------------------------------
.text:00002EF3
.text:00002EF3 loc_2EF3:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+DCj
.text:00002EF3                 mov     edx, [ebp+var_18]
.text:00002EF6                 add     edx, 1
.text:00002EF9                 mov     [ebp+var_18], edx
.text:00002EFC
.text:00002EFC loc_2EFC:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+75j
.text:00002EFC                 mov     eax, [ebp+var_18]
.text:00002EFF                 cmp     eax, [ebp+var_14]
.text:00002F02                 jnb     short loc_2F5A
.text:00002F04                 push    18h             ; unsigned int
.text:00002F06                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002F0B                 add     esp, 4
.text:00002F0E                 mov     [ebp+var_20], eax
.text:00002F11                 mov     [ebp+var_4], 0
.text:00002F18                 cmp     [ebp+var_20], 0
.text:00002F1C                 jz      short loc_2F38
.text:00002F1E                 mov     ecx, [ebp+var_18]
.text:00002F21                 push    ecx
.text:00002F22                 mov     ecx, [ebp+arg_0]
.text:00002F25                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00002F2A                 push    eax             ; struct CProp *
.text:00002F2B                 mov     ecx, [ebp+var_20] ; this
.text:00002F2E                 call    ??0CProp@@QAE@ABU0@@Z ; CProp::CProp(CProp const &)
.text:00002F33                 mov     [ebp+var_24], eax
.text:00002F36                 jmp     short loc_2F3F
.text:00002F38 ; ---------------------------------------------------------------------------
.text:00002F38
.text:00002F38 loc_2F38:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+A0j
.text:00002F38                 mov     [ebp+var_24], 0
.text:00002F3F
.text:00002F3F loc_2F3F:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+BAj
.text:00002F3F                 mov     edx, [ebp+var_24]
.text:00002F42                 mov     [ebp+var_1C], edx
.text:00002F45                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002F4C                 mov     eax, [ebp+var_1C]
.text:00002F4F                 push    eax
.text:00002F50                 mov     ecx, [ebp+var_10]
.text:00002F53                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00002F58                 jmp     short loc_2EF3
.text:00002F5A ; ---------------------------------------------------------------------------
.text:00002F5A
.text:00002F5A loc_2F5A:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+86j
.text:00002F5A                 mov     eax, [ebp+var_10]
.text:00002F5D
.text:00002F5D loc_2F5D:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+4Aj
.text:00002F5D                 mov     ecx, [ebp+var_C]
.text:00002F60                 mov     large fs:0, ecx
.text:00002F67                 pop     ecx
.text:00002F68                 add     esp, 24h
.text:00002F6B                 cmp     ebp, esp
.text:00002F6D                 call    __RTC_CheckEsp
.text:00002F72                 mov     esp, ebp
.text:00002F74                 pop     ebp
.text:00002F75                 retn    4
.text:00002F75 ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z endp
.text:00002F75
.text:00002F75 _text           ends
.text:00002F75
.text$x:00002F78 ; ===========================================================================
.text$x:00002F78
.text$x:00002F78 ; Segment type: Pure code
.text$x:00002F78 ; Segment permissions: Read/Execute
.text$x:00002F78 _text$x         segment para public 'CODE' use32
.text$x:00002F78                 assume cs:_text$x
.text$x:00002F78                 ;org 2F78h
.text$x:00002F78 ; COMDAT (pick associative to section at 2E7C)
.text$x:00002F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002F78
.text$x:00002F78 ; =============== S U B R O U T I N E =======================================
.text$x:00002F78
.text$x:00002F78
.text$x:00002F78 __unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0 proc near
.text$x:00002F78                                         ; DATA XREF: .xdata$x:00002FA4o
.text$x:00002F78                 mov     eax, [ebp-20h]
.text$x:00002F7B                 push    eax             ; void *
.text$x:00002F7C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002F81                 pop     ecx
.text$x:00002F82                 retn
.text$x:00002F82 __unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0 endp
.text$x:00002F82
.text$x:00002F83
.text$x:00002F83 ; =============== S U B R O U T I N E =======================================
.text$x:00002F83
.text$x:00002F83
.text$x:00002F83 __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z proc near
.text$x:00002F83                                         ; DATA XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+5o
.text$x:00002F83
.text$x:00002F83 arg_4           = dword ptr  8
.text$x:00002F83
.text$x:00002F83                 mov     edx, [esp+arg_4]
.text$x:00002F87                 lea     eax, [edx+0Ch]
.text$x:00002F8A                 mov     ecx, [edx-1Ch]
.text$x:00002F8D                 xor     ecx, eax
.text$x:00002F8F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002F94                 mov     eax, offset __ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.text$x:00002F99                 jmp     ___CxxFrameHandler3
.text$x:00002F99 __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z endp
.text$x:00002F99
.text$x:00002F99 ; ---------------------------------------------------------------------------
.text$x:00002F9E                 align 10h
.text$x:00002F9E _text$x         ends
.text$x:00002F9E
.xdata$x:00002FA0 ; ===========================================================================
.xdata$x:00002FA0
.xdata$x:00002FA0 ; Segment type: Pure data
.xdata$x:00002FA0 ; Segment permissions: Read
.xdata$x:00002FA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002FA0                 assume cs:_xdata$x
.xdata$x:00002FA0                 ;org 2FA0h
.xdata$x:00002FA0 ; COMDAT (pick associative to section at 2E7C)
.xdata$x:00002FA0 __unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z db 0FFh
.xdata$x:00002FA0                                         ; DATA XREF: .xdata$x:00002FB0o
.xdata$x:00002FA1                 db 0FFh
.xdata$x:00002FA2                 db 0FFh
.xdata$x:00002FA3                 db 0FFh
.xdata$x:00002FA4                 dd offset __unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0
.xdata$x:00002FA8 __ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z db  22h ; "
.xdata$x:00002FA8                                         ; DATA XREF: __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z+11o
.xdata$x:00002FA9                 db    5
.xdata$x:00002FAA                 db  93h ; ô
.xdata$x:00002FAB                 db  19h
.xdata$x:00002FAC                 db    1
.xdata$x:00002FAD                 db    0
.xdata$x:00002FAE                 db    0
.xdata$x:00002FAF                 db    0
.xdata$x:00002FB0                 dd offset __unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.xdata$x:00002FB4                 db    0
.xdata$x:00002FB5                 db    0
.xdata$x:00002FB6                 db    0
.xdata$x:00002FB7                 db    0
.xdata$x:00002FB8                 db    0
.xdata$x:00002FB9                 db    0
.xdata$x:00002FBA                 db    0
.xdata$x:00002FBB                 db    0
.xdata$x:00002FBC                 db    0
.xdata$x:00002FBD                 db    0
.xdata$x:00002FBE                 db    0
.xdata$x:00002FBF                 db    0
.xdata$x:00002FC0                 db    0
.xdata$x:00002FC1                 db    0
.xdata$x:00002FC2                 db    0
.xdata$x:00002FC3                 db    0
.xdata$x:00002FC4                 db    0
.xdata$x:00002FC5                 db    0
.xdata$x:00002FC6                 db    0
.xdata$x:00002FC7                 db    0
.xdata$x:00002FC8                 db    1
.xdata$x:00002FC9                 db    0
.xdata$x:00002FCA                 db    0
.xdata$x:00002FCB                 db    0
.xdata$x:00002FCB _xdata$x        ends
.xdata$x:00002FCB
.text:00002FCC ; ===========================================================================
.text:00002FCC
.text:00002FCC ; Segment type: Pure code
.text:00002FCC ; Segment permissions: Read/Execute
.text:00002FCC _text           segment para public 'CODE' use32
.text:00002FCC                 assume cs:_text
.text:00002FCC                 ;org 2FCCh
.text:00002FCC ; COMDAT (pick any)
.text:00002FCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002FCC
.text:00002FCC ; =============== S U B R O U T I N E =======================================
.text:00002FCC
.text:00002FCC ; Attributes: bp-based frame
.text:00002FCC
.text:00002FCC ; public: unsigned int __thiscall CObjectVector<struct CProp>::Size(void)const
.text:00002FCC                 public ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
.text:00002FCC ?Size@?$CObjectVector@UCProp@@@@QBEIXZ proc near
.text:00002FCC                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+5Ap
.text:00002FCC
.text:00002FCC var_4           = dword ptr -4
.text:00002FCC
.text:00002FCC                 push    ebp
.text:00002FCD                 mov     ebp, esp
.text:00002FCF                 push    ecx
.text:00002FD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FD7                 mov     [ebp+var_4], ecx
.text:00002FDA                 mov     ecx, [ebp+var_4]
.text:00002FDD                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00002FE2                 add     esp, 4
.text:00002FE5                 cmp     ebp, esp
.text:00002FE7                 call    __RTC_CheckEsp
.text:00002FEC                 mov     esp, ebp
.text:00002FEE                 pop     ebp
.text:00002FEF                 retn
.text:00002FEF ?Size@?$CObjectVector@UCProp@@@@QBEIXZ endp
.text:00002FEF
.text:00002FEF _text           ends
.text:00002FEF
.text:00002FF0 ; ===========================================================================
.text:00002FF0
.text:00002FF0 ; Segment type: Pure code
.text:00002FF0 ; Segment permissions: Read/Execute
.text:00002FF0 _text           segment para public 'CODE' use32
.text:00002FF0                 assume cs:_text
.text:00002FF0                 ;org 2FF0h
.text:00002FF0 ; COMDAT (pick any)
.text:00002FF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002FF0
.text:00002FF0 ; =============== S U B R O U T I N E =======================================
.text:00002FF0
.text:00002FF0 ; Attributes: bp-based frame
.text:00002FF0
.text:00002FF0 ; public: struct CProp const & __thiscall CObjectVector<struct CProp>::operator[](unsigned int)const
.text:00002FF0                 public ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
.text:00002FF0 ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z proc near
.text:00002FF0                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+A9p
.text:00002FF0
.text:00002FF0 var_4           = dword ptr -4
.text:00002FF0 arg_0           = dword ptr  8
.text:00002FF0
.text:00002FF0                 push    ebp
.text:00002FF1                 mov     ebp, esp
.text:00002FF3                 push    ecx
.text:00002FF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FFB                 mov     [ebp+var_4], ecx
.text:00002FFE                 mov     eax, [ebp+arg_0]
.text:00003001                 push    eax
.text:00003002                 mov     ecx, [ebp+var_4]
.text:00003005                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000300A                 mov     eax, [eax]
.text:0000300C                 add     esp, 4
.text:0000300F                 cmp     ebp, esp
.text:00003011                 call    __RTC_CheckEsp
.text:00003016                 mov     esp, ebp
.text:00003018                 pop     ebp
.text:00003019                 retn    4
.text:00003019 ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z endp
.text:00003019
.text:00003019 _text           ends
.text:00003019
.text:0000301C ; ===========================================================================
.text:0000301C
.text:0000301C ; Segment type: Pure code
.text:0000301C ; Segment permissions: Read/Execute
.text:0000301C _text           segment para public 'CODE' use32
.text:0000301C                 assume cs:_text
.text:0000301C                 ;org 301Ch
.text:0000301C ; COMDAT (pick any)
.text:0000301C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000301C
.text:0000301C ; =============== S U B R O U T I N E =======================================
.text:0000301C
.text:0000301C ; Attributes: bp-based frame
.text:0000301C
.text:0000301C ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:0000301C                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:0000301C ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:0000301C                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:0000301C
.text:0000301C var_20          = dword ptr -20h
.text:0000301C var_1C          = dword ptr -1Ch
.text:0000301C var_18          = dword ptr -18h
.text:0000301C var_14          = dword ptr -14h
.text:0000301C var_10          = dword ptr -10h
.text:0000301C var_C           = dword ptr -0Ch
.text:0000301C var_4           = dword ptr -4
.text:0000301C
.text:0000301C                 push    ebp
.text:0000301D                 mov     ebp, esp
.text:0000301F                 push    0FFFFFFFFh
.text:00003021                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00003026                 mov     eax, large fs:0
.text:0000302C                 push    eax
.text:0000302D                 sub     esp, 14h
.text:00003030                 mov     eax, 0CCCCCCCCh
.text:00003035                 mov     [ebp+var_20], eax
.text:00003038                 mov     [ebp+var_1C], eax
.text:0000303B                 mov     [ebp+var_18], eax
.text:0000303E                 mov     [ebp+var_14], eax
.text:00003041                 mov     [ebp+var_10], eax
.text:00003044                 mov     eax, dword ptr ds:___security_cookie
.text:00003049                 xor     eax, ebp
.text:0000304B                 push    eax
.text:0000304C                 lea     eax, [ebp+var_C]
.text:0000304F                 mov     large fs:0, eax
.text:00003055                 mov     [ebp+var_10], ecx
.text:00003058                 mov     [ebp+var_4], 0
.text:0000305F                 mov     ecx, [ebp+var_10]
.text:00003062                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00003067                 mov     [ebp+var_14], eax
.text:0000306A
.text:0000306A loc_306A:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_30ACj
.text:0000306A                 cmp     [ebp+var_14], 0
.text:0000306E                 jz      short loc_30AE
.text:00003070                 mov     eax, [ebp+var_14]
.text:00003073                 sub     eax, 1
.text:00003076                 mov     [ebp+var_14], eax
.text:00003079                 mov     ecx, [ebp+var_14]
.text:0000307C                 push    ecx
.text:0000307D                 mov     ecx, [ebp+var_10]
.text:00003080                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00003085                 mov     edx, [eax]
.text:00003087                 mov     [ebp+var_1C], edx
.text:0000308A                 mov     eax, [ebp+var_1C]
.text:0000308D                 mov     [ebp+var_18], eax
.text:00003090                 cmp     [ebp+var_18], 0
.text:00003094                 jz      short loc_30A5
.text:00003096                 push    1
.text:00003098                 mov     ecx, [ebp+var_18]
.text:0000309B                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:000030A0                 mov     [ebp+var_20], eax
.text:000030A3                 jmp     short loc_30AC
.text:000030A5 ; ---------------------------------------------------------------------------
.text:000030A5
.text:000030A5 loc_30A5:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:000030A5                 mov     [ebp+var_20], 0
.text:000030AC
.text:000030AC loc_30AC:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:000030AC                 jmp     short loc_306A
.text:000030AE ; ---------------------------------------------------------------------------
.text:000030AE
.text:000030AE loc_30AE:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:000030AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000030B5                 mov     ecx, [ebp+var_10]
.text:000030B8                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000030BD                 mov     ecx, [ebp+var_C]
.text:000030C0                 mov     large fs:0, ecx
.text:000030C7                 pop     ecx
.text:000030C8                 add     esp, 20h
.text:000030CB                 cmp     ebp, esp
.text:000030CD                 call    __RTC_CheckEsp
.text:000030D2                 mov     esp, ebp
.text:000030D4                 pop     ebp
.text:000030D5                 retn
.text:000030D5 ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:000030D5
.text:000030D5 ; ---------------------------------------------------------------------------
.text:000030D6                 align 4
.text:000030D6 _text           ends
.text:000030D6
.text$x:000030D8 ; ===========================================================================
.text$x:000030D8
.text$x:000030D8 ; Segment type: Pure code
.text$x:000030D8 ; Segment permissions: Read/Execute
.text$x:000030D8 _text$x         segment para public 'CODE' use32
.text$x:000030D8                 assume cs:_text$x
.text$x:000030D8                 ;org 30D8h
.text$x:000030D8 ; COMDAT (pick associative to section at 301C)
.text$x:000030D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000030D8
.text$x:000030D8 ; =============== S U B R O U T I N E =======================================
.text$x:000030D8
.text$x:000030D8
.text$x:000030D8 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:000030D8                                         ; DATA XREF: .xdata$x:00003100o
.text$x:000030D8                 mov     ecx, [ebp-10h]
.text$x:000030DB                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000030DB __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:000030DB
.text$x:000030E0
.text$x:000030E0 ; =============== S U B R O U T I N E =======================================
.text$x:000030E0
.text$x:000030E0
.text$x:000030E0 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:000030E0                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:000030E0
.text$x:000030E0 arg_4           = dword ptr  8
.text$x:000030E0
.text$x:000030E0                 mov     edx, [esp+arg_4]
.text$x:000030E4                 lea     eax, [edx+0Ch]
.text$x:000030E7                 mov     ecx, [edx-18h]
.text$x:000030EA                 xor     ecx, eax
.text$x:000030EC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000030F1                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:000030F6                 jmp     ___CxxFrameHandler3
.text$x:000030F6 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:000030F6
.text$x:000030F6 ; ---------------------------------------------------------------------------
.text$x:000030FB                 align 4
.text$x:000030FB _text$x         ends
.text$x:000030FB
.xdata$x:000030FC ; ===========================================================================
.xdata$x:000030FC
.xdata$x:000030FC ; Segment type: Pure data
.xdata$x:000030FC ; Segment permissions: Read
.xdata$x:000030FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000030FC                 assume cs:_xdata$x
.xdata$x:000030FC                 ;org 30FCh
.xdata$x:000030FC ; COMDAT (pick associative to section at 301C)
.xdata$x:000030FC __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:000030FC                                         ; DATA XREF: .xdata$x:0000310Co
.xdata$x:000030FD                 db 0FFh
.xdata$x:000030FE                 db 0FFh
.xdata$x:000030FF                 db 0FFh
.xdata$x:00003100                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:00003104 __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:00003104                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:00003105                 db    5
.xdata$x:00003106                 db  93h ; ô
.xdata$x:00003107                 db  19h
.xdata$x:00003108                 db    1
.xdata$x:00003109                 db    0
.xdata$x:0000310A                 db    0
.xdata$x:0000310B                 db    0
.xdata$x:0000310C                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:00003110                 db    0
.xdata$x:00003111                 db    0
.xdata$x:00003112                 db    0
.xdata$x:00003113                 db    0
.xdata$x:00003114                 db    0
.xdata$x:00003115                 db    0
.xdata$x:00003116                 db    0
.xdata$x:00003117                 db    0
.xdata$x:00003118                 db    0
.xdata$x:00003119                 db    0
.xdata$x:0000311A                 db    0
.xdata$x:0000311B                 db    0
.xdata$x:0000311C                 db    0
.xdata$x:0000311D                 db    0
.xdata$x:0000311E                 db    0
.xdata$x:0000311F                 db    0
.xdata$x:00003120                 db    0
.xdata$x:00003121                 db    0
.xdata$x:00003122                 db    0
.xdata$x:00003123                 db    0
.xdata$x:00003124                 db    1
.xdata$x:00003125                 db    0
.xdata$x:00003126                 db    0
.xdata$x:00003127                 db    0
.xdata$x:00003127 _xdata$x        ends
.xdata$x:00003127
.text:00003128 ; ===========================================================================
.text:00003128
.text:00003128 ; Segment type: Pure code
.text:00003128 ; Segment permissions: Read/Execute
.text:00003128 _text           segment para public 'CODE' use32
.text:00003128                 assume cs:_text
.text:00003128                 ;org 3128h
.text:00003128 ; COMDAT (pick any)
.text:00003128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003128
.text:00003128 ; =============== S U B R O U T I N E =======================================
.text:00003128
.text:00003128 ; Attributes: bp-based frame
.text:00003128
.text:00003128 ; public: void __thiscall CObjectVector<struct CProp>::Clear(void)
.text:00003128                 public ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ
.text:00003128 ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ proc near
.text:00003128                                         ; CODE XREF: CProps::Clear(void)+11p
.text:00003128                                         ; CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+52p
.text:00003128
.text:00003128 var_14          = dword ptr -14h
.text:00003128 var_10          = dword ptr -10h
.text:00003128 var_C           = dword ptr -0Ch
.text:00003128 var_8           = dword ptr -8
.text:00003128 var_4           = dword ptr -4
.text:00003128
.text:00003128                 push    ebp
.text:00003129                 mov     ebp, esp
.text:0000312B                 sub     esp, 14h
.text:0000312E                 mov     eax, 0CCCCCCCCh
.text:00003133                 mov     [ebp+var_14], eax
.text:00003136                 mov     [ebp+var_10], eax
.text:00003139                 mov     [ebp+var_C], eax
.text:0000313C                 mov     [ebp+var_8], eax
.text:0000313F                 mov     [ebp+var_4], eax
.text:00003142                 mov     [ebp+var_4], ecx
.text:00003145                 mov     ecx, [ebp+var_4]
.text:00003148                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000314D                 mov     [ebp+var_8], eax
.text:00003150
.text:00003150 loc_3150:                               ; CODE XREF: CObjectVector<CProp>::Clear(void):loc_3192j
.text:00003150                 cmp     [ebp+var_8], 0
.text:00003154                 jz      short loc_3194
.text:00003156                 mov     eax, [ebp+var_8]
.text:00003159                 sub     eax, 1
.text:0000315C                 mov     [ebp+var_8], eax
.text:0000315F                 mov     ecx, [ebp+var_8]
.text:00003162                 push    ecx
.text:00003163                 mov     ecx, [ebp+var_4]
.text:00003166                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000316B                 mov     edx, [eax]
.text:0000316D                 mov     [ebp+var_10], edx
.text:00003170                 mov     eax, [ebp+var_10]
.text:00003173                 mov     [ebp+var_C], eax
.text:00003176                 cmp     [ebp+var_C], 0
.text:0000317A                 jz      short loc_318B
.text:0000317C                 push    1
.text:0000317E                 mov     ecx, [ebp+var_C]
.text:00003181                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:00003186                 mov     [ebp+var_14], eax
.text:00003189                 jmp     short loc_3192
.text:0000318B ; ---------------------------------------------------------------------------
.text:0000318B
.text:0000318B loc_318B:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+52j
.text:0000318B                 mov     [ebp+var_14], 0
.text:00003192
.text:00003192 loc_3192:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+61j
.text:00003192                 jmp     short loc_3150
.text:00003194 ; ---------------------------------------------------------------------------
.text:00003194
.text:00003194 loc_3194:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+2Cj
.text:00003194                 mov     ecx, [ebp+var_4]
.text:00003197                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:0000319C                 add     esp, 14h
.text:0000319F                 cmp     ebp, esp
.text:000031A1                 call    __RTC_CheckEsp
.text:000031A6                 mov     esp, ebp
.text:000031A8                 pop     ebp
.text:000031A9                 retn
.text:000031A9 ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ endp
.text:000031A9
.text:000031A9 ; ---------------------------------------------------------------------------
.text:000031AA                 align 4
.text:000031AA _text           ends
.text:000031AA
.text:000031AC ; ===========================================================================
.text:000031AC
.text:000031AC ; Segment type: Pure code
.text:000031AC ; Segment permissions: Read/Execute
.text:000031AC _text           segment para public 'CODE' use32
.text:000031AC                 assume cs:_text
.text:000031AC                 ;org 31ACh
.text:000031AC ; COMDAT (pick any)
.text:000031AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031AC
.text:000031AC ; =============== S U B R O U T I N E =======================================
.text:000031AC
.text:000031AC ; Attributes: bp-based frame
.text:000031AC
.text:000031AC ; public: __thiscall CRecordVector<unsigned char>::CRecordVector<unsigned char>(void)
.text:000031AC                 public ??0?$CRecordVector@E@@QAE@XZ
.text:000031AC ??0?$CRecordVector@E@@QAE@XZ proc near  ; CODE XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(void)+42p
.text:000031AC
.text:000031AC var_4           = dword ptr -4
.text:000031AC
.text:000031AC                 push    ebp
.text:000031AD                 mov     ebp, esp
.text:000031AF                 push    ecx
.text:000031B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031B7                 mov     [ebp+var_4], ecx
.text:000031BA                 mov     eax, [ebp+var_4]
.text:000031BD                 mov     dword ptr [eax], 0
.text:000031C3                 mov     ecx, [ebp+var_4]
.text:000031C6                 mov     dword ptr [ecx+4], 0
.text:000031CD                 mov     edx, [ebp+var_4]
.text:000031D0                 mov     dword ptr [edx+8], 0
.text:000031D7                 mov     eax, [ebp+var_4]
.text:000031DA                 mov     esp, ebp
.text:000031DC                 pop     ebp
.text:000031DD                 retn
.text:000031DD ??0?$CRecordVector@E@@QAE@XZ endp
.text:000031DD
.text:000031DD ; ---------------------------------------------------------------------------
.text:000031DE                 align 10h
.text:000031DE _text           ends
.text:000031DE
.text:000031E0 ; ===========================================================================
.text:000031E0
.text:000031E0 ; Segment type: Pure code
.text:000031E0 ; Segment permissions: Read/Execute
.text:000031E0 _text           segment para public 'CODE' use32
.text:000031E0                 assume cs:_text
.text:000031E0                 ;org 31E0h
.text:000031E0 ; COMDAT (pick any)
.text:000031E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031E0
.text:000031E0 ; =============== S U B R O U T I N E =======================================
.text:000031E0
.text:000031E0 ; Attributes: bp-based frame
.text:000031E0
.text:000031E0 ; public: __thiscall CRecordVector<unsigned char>::~CRecordVector<unsigned char>(void)
.text:000031E0                 public ??1?$CRecordVector@E@@QAE@XZ
.text:000031E0 ??1?$CRecordVector@E@@QAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1+6j
.text:000031E0                                         ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)+49p ...
.text:000031E0
.text:000031E0 var_8           = dword ptr -8
.text:000031E0 var_4           = dword ptr -4
.text:000031E0
.text:000031E0                 push    ebp
.text:000031E1                 mov     ebp, esp
.text:000031E3                 sub     esp, 8
.text:000031E6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000031ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031F4                 mov     [ebp+var_4], ecx
.text:000031F7                 mov     eax, [ebp+var_4]
.text:000031FA                 mov     ecx, [eax]
.text:000031FC                 mov     [ebp+var_8], ecx
.text:000031FF                 mov     edx, [ebp+var_8]
.text:00003202                 push    edx             ; void *
.text:00003203                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003208                 add     esp, 4
.text:0000320B                 add     esp, 8
.text:0000320E                 cmp     ebp, esp
.text:00003210                 call    __RTC_CheckEsp
.text:00003215                 mov     esp, ebp
.text:00003217                 pop     ebp
.text:00003218                 retn
.text:00003218 ??1?$CRecordVector@E@@QAE@XZ endp
.text:00003218
.text:00003218 ; ---------------------------------------------------------------------------
.text:00003219                 align 4
.text:00003219 _text           ends
.text:00003219
.text:0000321C ; ===========================================================================
.text:0000321C
.text:0000321C ; Segment type: Pure code
.text:0000321C ; Segment permissions: Read/Execute
.text:0000321C _text           segment para public 'CODE' use32
.text:0000321C                 assume cs:_text
.text:0000321C                 ;org 321Ch
.text:0000321C ; COMDAT (pick any)
.text:0000321C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000321C
.text:0000321C ; =============== S U B R O U T I N E =======================================
.text:0000321C
.text:0000321C ; Attributes: bp-based frame
.text:0000321C
.text:0000321C ; public: unsigned int __thiscall CRecordVector<unsigned char>::Add(unsigned char)
.text:0000321C                 public ?Add@?$CRecordVector@E@@QAEIE@Z
.text:0000321C ?Add@?$CRecordVector@E@@QAEIE@Z proc near
.text:0000321C                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+116Bp
.text:0000321C                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1183p
.text:0000321C
.text:0000321C var_8           = dword ptr -8
.text:0000321C var_4           = dword ptr -4
.text:0000321C arg_0           = byte ptr  8
.text:0000321C
.text:0000321C                 push    ebp
.text:0000321D                 mov     ebp, esp
.text:0000321F                 sub     esp, 8
.text:00003222                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003229                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003230                 mov     [ebp+var_4], ecx
.text:00003233                 mov     ecx, [ebp+var_4]
.text:00003236                 call    ?ReserveOnePosition@?$CRecordVector@E@@AAEXXZ ; CRecordVector<uchar>::ReserveOnePosition(void)
.text:0000323B                 mov     eax, [ebp+var_4]
.text:0000323E                 mov     ecx, [eax]
.text:00003240                 mov     edx, [ebp+var_4]
.text:00003243                 mov     eax, [edx+4]
.text:00003246                 mov     dl, [ebp+arg_0]
.text:00003249                 mov     [ecx+eax], dl
.text:0000324C                 mov     eax, [ebp+var_4]
.text:0000324F                 mov     ecx, [eax+4]
.text:00003252                 mov     [ebp+var_8], ecx
.text:00003255                 mov     edx, [ebp+var_4]
.text:00003258                 mov     eax, [edx+4]
.text:0000325B                 add     eax, 1
.text:0000325E                 mov     ecx, [ebp+var_4]
.text:00003261                 mov     [ecx+4], eax
.text:00003264                 mov     eax, [ebp+var_8]
.text:00003267                 add     esp, 8
.text:0000326A                 cmp     ebp, esp
.text:0000326C                 call    __RTC_CheckEsp
.text:00003271                 mov     esp, ebp
.text:00003273                 pop     ebp
.text:00003274                 retn    4
.text:00003274 ?Add@?$CRecordVector@E@@QAEIE@Z endp
.text:00003274
.text:00003274 ; ---------------------------------------------------------------------------
.text:00003277                 align 4
.text:00003277 _text           ends
.text:00003277
.text:00003278 ; ===========================================================================
.text:00003278
.text:00003278 ; Segment type: Pure code
.text:00003278 ; Segment permissions: Read/Execute
.text:00003278 _text           segment para public 'CODE' use32
.text:00003278                 assume cs:_text
.text:00003278                 ;org 3278h
.text:00003278 ; COMDAT (pick any)
.text:00003278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003278
.text:00003278 ; =============== S U B R O U T I N E =======================================
.text:00003278
.text:00003278 ; Attributes: bp-based frame
.text:00003278
.text:00003278 ; public: class NArchive::NZip::CItemEx & __thiscall CObjectVector<class NArchive::NZip::CItemEx>::operator[](unsigned int)
.text:00003278                 public ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z
.text:00003278 ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z proc near
.text:00003278                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+220p
.text:00003278
.text:00003278 var_4           = dword ptr -4
.text:00003278 arg_0           = dword ptr  8
.text:00003278
.text:00003278                 push    ebp
.text:00003279                 mov     ebp, esp
.text:0000327B                 push    ecx
.text:0000327C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003283                 mov     [ebp+var_4], ecx
.text:00003286                 mov     eax, [ebp+arg_0]
.text:00003289                 push    eax
.text:0000328A                 mov     ecx, [ebp+var_4]
.text:0000328D                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00003292                 mov     eax, [eax]
.text:00003294                 add     esp, 4
.text:00003297                 cmp     ebp, esp
.text:00003299                 call    __RTC_CheckEsp
.text:0000329E                 mov     esp, ebp
.text:000032A0                 pop     ebp
.text:000032A1                 retn    4
.text:000032A1 ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z endp
.text:000032A1
.text:000032A1 _text           ends
.text:000032A1
.text:000032A4 ; ===========================================================================
.text:000032A4
.text:000032A4 ; Segment type: Pure code
.text:000032A4 ; Segment permissions: Read/Execute
.text:000032A4 _text           segment para public 'CODE' use32
.text:000032A4                 assume cs:_text
.text:000032A4                 ;org 32A4h
.text:000032A4 ; COMDAT (pick any)
.text:000032A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000032A4
.text:000032A4 ; =============== S U B R O U T I N E =======================================
.text:000032A4
.text:000032A4 ; Attributes: bp-based frame
.text:000032A4
.text:000032A4 ; public: __thiscall CObjectVector<struct NArchive::NZip::CUpdateItem>::CObjectVector<struct NArchive::NZip::CUpdateItem>(void)
.text:000032A4                 public ??0?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ
.text:000032A4 ??0?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ proc near
.text:000032A4                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+97p
.text:000032A4
.text:000032A4 var_4           = dword ptr -4
.text:000032A4
.text:000032A4                 push    ebp
.text:000032A5                 mov     ebp, esp
.text:000032A7                 push    ecx
.text:000032A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000032AF                 mov     [ebp+var_4], ecx
.text:000032B2                 mov     ecx, [ebp+var_4]
.text:000032B5                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000032BA                 mov     eax, [ebp+var_4]
.text:000032BD                 add     esp, 4
.text:000032C0                 cmp     ebp, esp
.text:000032C2                 call    __RTC_CheckEsp
.text:000032C7                 mov     esp, ebp
.text:000032C9                 pop     ebp
.text:000032CA                 retn
.text:000032CA ??0?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ endp
.text:000032CA
.text:000032CA ; ---------------------------------------------------------------------------
.text:000032CB                 align 4
.text:000032CB _text           ends
.text:000032CB
.text:000032CC ; ===========================================================================
.text:000032CC
.text:000032CC ; Segment type: Pure code
.text:000032CC ; Segment permissions: Read/Execute
.text:000032CC _text           segment para public 'CODE' use32
.text:000032CC                 assume cs:_text
.text:000032CC                 ;org 32CCh
.text:000032CC ; COMDAT (pick any)
.text:000032CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000032CC
.text:000032CC ; =============== S U B R O U T I N E =======================================
.text:000032CC
.text:000032CC ; Attributes: bp-based frame
.text:000032CC
.text:000032CC ; int __stdcall CObjectVector<NArchive::NZip::CUpdateItem>::Add(struct NArchive::NZip::CUpdateItem *)
.text:000032CC                 public ?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z
.text:000032CC ?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z proc near
.text:000032CC                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+D7Cp
.text:000032CC
.text:000032CC var_1C          = dword ptr -1Ch
.text:000032CC var_18          = dword ptr -18h
.text:000032CC var_14          = dword ptr -14h
.text:000032CC var_10          = dword ptr -10h
.text:000032CC var_C           = dword ptr -0Ch
.text:000032CC var_4           = dword ptr -4
.text:000032CC arg_0           = dword ptr  8
.text:000032CC
.text:000032CC                 push    ebp
.text:000032CD                 mov     ebp, esp
.text:000032CF                 push    0FFFFFFFFh
.text:000032D1                 push    offset __ehhandler$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z
.text:000032D6                 mov     eax, large fs:0
.text:000032DC                 push    eax
.text:000032DD                 sub     esp, 10h
.text:000032E0                 mov     eax, 0CCCCCCCCh
.text:000032E5                 mov     [ebp+var_1C], eax
.text:000032E8                 mov     [ebp+var_18], eax
.text:000032EB                 mov     [ebp+var_14], eax
.text:000032EE                 mov     [ebp+var_10], eax
.text:000032F1                 mov     eax, dword ptr ds:___security_cookie
.text:000032F6                 xor     eax, ebp
.text:000032F8                 push    eax
.text:000032F9                 lea     eax, [ebp+var_C]
.text:000032FC                 mov     large fs:0, eax
.text:00003302                 mov     [ebp+var_10], ecx
.text:00003305                 push    48h ; 'H'       ; unsigned int
.text:00003307                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000330C                 add     esp, 4
.text:0000330F                 mov     [ebp+var_18], eax
.text:00003312                 mov     [ebp+var_4], 0
.text:00003319                 cmp     [ebp+var_18], 0
.text:0000331D                 jz      short loc_3330
.text:0000331F                 mov     eax, [ebp+arg_0]
.text:00003322                 push    eax             ; struct NArchive::NZip::CUpdateItem *
.text:00003323                 mov     ecx, [ebp+var_18] ; this
.text:00003326                 call    ??0CUpdateItem@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CUpdateItem::CUpdateItem(NArchive::NZip::CUpdateItem const &)
.text:0000332B                 mov     [ebp+var_1C], eax
.text:0000332E                 jmp     short loc_3337
.text:00003330 ; ---------------------------------------------------------------------------
.text:00003330
.text:00003330 loc_3330:                               ; CODE XREF: CObjectVector<NArchive::NZip::CUpdateItem>::Add(NArchive::NZip::CUpdateItem const &)+51j
.text:00003330                 mov     [ebp+var_1C], 0
.text:00003337
.text:00003337 loc_3337:                               ; CODE XREF: CObjectVector<NArchive::NZip::CUpdateItem>::Add(NArchive::NZip::CUpdateItem const &)+62j
.text:00003337                 mov     ecx, [ebp+var_1C]
.text:0000333A                 mov     [ebp+var_14], ecx
.text:0000333D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003344                 mov     edx, [ebp+var_14]
.text:00003347                 push    edx
.text:00003348                 mov     ecx, [ebp+var_10]
.text:0000334B                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00003350                 mov     ecx, [ebp+var_C]
.text:00003353                 mov     large fs:0, ecx
.text:0000335A                 pop     ecx
.text:0000335B                 add     esp, 1Ch
.text:0000335E                 cmp     ebp, esp
.text:00003360                 call    __RTC_CheckEsp
.text:00003365                 mov     esp, ebp
.text:00003367                 pop     ebp
.text:00003368                 retn    4
.text:00003368 ?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z endp
.text:00003368
.text:00003368 ; ---------------------------------------------------------------------------
.text:0000336B                 align 4
.text:0000336B _text           ends
.text:0000336B
.text$x:0000336C ; ===========================================================================
.text$x:0000336C
.text$x:0000336C ; Segment type: Pure code
.text$x:0000336C ; Segment permissions: Read/Execute
.text$x:0000336C _text$x         segment para public 'CODE' use32
.text$x:0000336C                 assume cs:_text$x
.text$x:0000336C                 ;org 336Ch
.text$x:0000336C ; COMDAT (pick associative to section at 32CC)
.text$x:0000336C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000336C
.text$x:0000336C ; =============== S U B R O U T I N E =======================================
.text$x:0000336C
.text$x:0000336C
.text$x:0000336C __unwindfunclet$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z$0 proc near
.text$x:0000336C                                         ; DATA XREF: .xdata$x:00003398o
.text$x:0000336C                 mov     eax, [ebp-18h]
.text$x:0000336F                 push    eax             ; void *
.text$x:00003370                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003375                 pop     ecx
.text$x:00003376                 retn
.text$x:00003376 __unwindfunclet$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z$0 endp
.text$x:00003376
.text$x:00003377
.text$x:00003377 ; =============== S U B R O U T I N E =======================================
.text$x:00003377
.text$x:00003377
.text$x:00003377 __ehhandler$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z proc near
.text$x:00003377                                         ; DATA XREF: CObjectVector<NArchive::NZip::CUpdateItem>::Add(NArchive::NZip::CUpdateItem const &)+5o
.text$x:00003377
.text$x:00003377 arg_4           = dword ptr  8
.text$x:00003377
.text$x:00003377                 mov     edx, [esp+arg_4]
.text$x:0000337B                 lea     eax, [edx+0Ch]
.text$x:0000337E                 mov     ecx, [edx-14h]
.text$x:00003381                 xor     ecx, eax
.text$x:00003383                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003388                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z
.text$x:0000338D                 jmp     ___CxxFrameHandler3
.text$x:0000338D __ehhandler$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z endp
.text$x:0000338D
.text$x:0000338D ; ---------------------------------------------------------------------------
.text$x:00003392                 align 4
.text$x:00003392 _text$x         ends
.text$x:00003392
.xdata$x:00003394 ; ===========================================================================
.xdata$x:00003394
.xdata$x:00003394 ; Segment type: Pure data
.xdata$x:00003394 ; Segment permissions: Read
.xdata$x:00003394 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003394                 assume cs:_xdata$x
.xdata$x:00003394                 ;org 3394h
.xdata$x:00003394 ; COMDAT (pick associative to section at 32CC)
.xdata$x:00003394 __unwindtable$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z db 0FFh
.xdata$x:00003394                                         ; DATA XREF: .xdata$x:000033A4o
.xdata$x:00003395                 db 0FFh
.xdata$x:00003396                 db 0FFh
.xdata$x:00003397                 db 0FFh
.xdata$x:00003398                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z$0
.xdata$x:0000339C __ehfuncinfo$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z db  22h ; "
.xdata$x:0000339C                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z+11o
.xdata$x:0000339D                 db    5
.xdata$x:0000339E                 db  93h ; ô
.xdata$x:0000339F                 db  19h
.xdata$x:000033A0                 db    1
.xdata$x:000033A1                 db    0
.xdata$x:000033A2                 db    0
.xdata$x:000033A3                 db    0
.xdata$x:000033A4                 dd offset __unwindtable$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z
.xdata$x:000033A8                 db    0
.xdata$x:000033A9                 db    0
.xdata$x:000033AA                 db    0
.xdata$x:000033AB                 db    0
.xdata$x:000033AC                 db    0
.xdata$x:000033AD                 db    0
.xdata$x:000033AE                 db    0
.xdata$x:000033AF                 db    0
.xdata$x:000033B0                 db    0
.xdata$x:000033B1                 db    0
.xdata$x:000033B2                 db    0
.xdata$x:000033B3                 db    0
.xdata$x:000033B4                 db    0
.xdata$x:000033B5                 db    0
.xdata$x:000033B6                 db    0
.xdata$x:000033B7                 db    0
.xdata$x:000033B8                 db    0
.xdata$x:000033B9                 db    0
.xdata$x:000033BA                 db    0
.xdata$x:000033BB                 db    0
.xdata$x:000033BC                 db    1
.xdata$x:000033BD                 db    0
.xdata$x:000033BE                 db    0
.xdata$x:000033BF                 db    0
.xdata$x:000033BF _xdata$x        ends
.xdata$x:000033BF
.text:000033C0 ; ===========================================================================
.text:000033C0
.text:000033C0 ; Segment type: Pure code
.text:000033C0 ; Segment permissions: Read/Execute
.text:000033C0 _text           segment para public 'CODE' use32
.text:000033C0                 assume cs:_text
.text:000033C0                 ;org 33C0h
.text:000033C0 ; COMDAT (pick any)
.text:000033C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033C0
.text:000033C0 ; =============== S U B R O U T I N E =======================================
.text:000033C0
.text:000033C0 ; Attributes: bp-based frame
.text:000033C0
.text:000033C0 ; public: __thiscall CObjectVector<struct NArchive::NZip::CUpdateItem>::~CObjectVector<struct NArchive::NZip::CUpdateItem>(void)
.text:000033C0                 public ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ
.text:000033C0 ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ proc near
.text:000033C0                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+115p
.text:000033C0                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+192p ...
.text:000033C0
.text:000033C0 var_20          = dword ptr -20h
.text:000033C0 var_1C          = dword ptr -1Ch
.text:000033C0 var_18          = dword ptr -18h
.text:000033C0 var_14          = dword ptr -14h
.text:000033C0 var_10          = dword ptr -10h
.text:000033C0 var_C           = dword ptr -0Ch
.text:000033C0 var_4           = dword ptr -4
.text:000033C0
.text:000033C0                 push    ebp
.text:000033C1                 mov     ebp, esp
.text:000033C3                 push    0FFFFFFFFh
.text:000033C5                 push    offset __ehhandler$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ
.text:000033CA                 mov     eax, large fs:0
.text:000033D0                 push    eax
.text:000033D1                 sub     esp, 14h
.text:000033D4                 mov     eax, 0CCCCCCCCh
.text:000033D9                 mov     [ebp+var_20], eax
.text:000033DC                 mov     [ebp+var_1C], eax
.text:000033DF                 mov     [ebp+var_18], eax
.text:000033E2                 mov     [ebp+var_14], eax
.text:000033E5                 mov     [ebp+var_10], eax
.text:000033E8                 mov     eax, dword ptr ds:___security_cookie
.text:000033ED                 xor     eax, ebp
.text:000033EF                 push    eax
.text:000033F0                 lea     eax, [ebp+var_C]
.text:000033F3                 mov     large fs:0, eax
.text:000033F9                 mov     [ebp+var_10], ecx
.text:000033FC                 mov     [ebp+var_4], 0
.text:00003403                 mov     ecx, [ebp+var_10]
.text:00003406                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000340B                 mov     [ebp+var_14], eax
.text:0000340E
.text:0000340E loc_340E:                               ; CODE XREF: CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void):loc_3450j
.text:0000340E                 cmp     [ebp+var_14], 0
.text:00003412                 jz      short loc_3452
.text:00003414                 mov     eax, [ebp+var_14]
.text:00003417                 sub     eax, 1
.text:0000341A                 mov     [ebp+var_14], eax
.text:0000341D                 mov     ecx, [ebp+var_14]
.text:00003420                 push    ecx
.text:00003421                 mov     ecx, [ebp+var_10]
.text:00003424                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00003429                 mov     edx, [eax]
.text:0000342B                 mov     [ebp+var_1C], edx
.text:0000342E                 mov     eax, [ebp+var_1C]
.text:00003431                 mov     [ebp+var_18], eax
.text:00003434                 cmp     [ebp+var_18], 0
.text:00003438                 jz      short loc_3449
.text:0000343A                 push    1
.text:0000343C                 mov     ecx, [ebp+var_18]
.text:0000343F                 call    ??_GCUpdateItem@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CUpdateItem::`scalar deleting destructor'(uint)
.text:00003444                 mov     [ebp+var_20], eax
.text:00003447                 jmp     short loc_3450
.text:00003449 ; ---------------------------------------------------------------------------
.text:00003449
.text:00003449 loc_3449:                               ; CODE XREF: CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)+78j
.text:00003449                 mov     [ebp+var_20], 0
.text:00003450
.text:00003450 loc_3450:                               ; CODE XREF: CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)+87j
.text:00003450                 jmp     short loc_340E
.text:00003452 ; ---------------------------------------------------------------------------
.text:00003452
.text:00003452 loc_3452:                               ; CODE XREF: CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)+52j
.text:00003452                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003459                 mov     ecx, [ebp+var_10]
.text:0000345C                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00003461                 mov     ecx, [ebp+var_C]
.text:00003464                 mov     large fs:0, ecx
.text:0000346B                 pop     ecx
.text:0000346C                 add     esp, 20h
.text:0000346F                 cmp     ebp, esp
.text:00003471                 call    __RTC_CheckEsp
.text:00003476                 mov     esp, ebp
.text:00003478                 pop     ebp
.text:00003479                 retn
.text:00003479 ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ endp
.text:00003479
.text:00003479 ; ---------------------------------------------------------------------------
.text:0000347A                 align 4
.text:0000347A _text           ends
.text:0000347A
.text$x:0000347C ; ===========================================================================
.text$x:0000347C
.text$x:0000347C ; Segment type: Pure code
.text$x:0000347C ; Segment permissions: Read/Execute
.text$x:0000347C _text$x         segment para public 'CODE' use32
.text$x:0000347C                 assume cs:_text$x
.text$x:0000347C                 ;org 347Ch
.text$x:0000347C ; COMDAT (pick associative to section at 33C0)
.text$x:0000347C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000347C
.text$x:0000347C ; =============== S U B R O U T I N E =======================================
.text$x:0000347C
.text$x:0000347C
.text$x:0000347C __unwindfunclet$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ$0 proc near
.text$x:0000347C                                         ; DATA XREF: .xdata$x:000034A4o
.text$x:0000347C                 mov     ecx, [ebp-10h]
.text$x:0000347F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000347F __unwindfunclet$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ$0 endp
.text$x:0000347F
.text$x:00003484
.text$x:00003484 ; =============== S U B R O U T I N E =======================================
.text$x:00003484
.text$x:00003484
.text$x:00003484 __ehhandler$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ proc near
.text$x:00003484                                         ; DATA XREF: CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)+5o
.text$x:00003484
.text$x:00003484 arg_4           = dword ptr  8
.text$x:00003484
.text$x:00003484                 mov     edx, [esp+arg_4]
.text$x:00003488                 lea     eax, [edx+0Ch]
.text$x:0000348B                 mov     ecx, [edx-18h]
.text$x:0000348E                 xor     ecx, eax
.text$x:00003490                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003495                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ
.text$x:0000349A                 jmp     ___CxxFrameHandler3
.text$x:0000349A __ehhandler$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ endp
.text$x:0000349A
.text$x:0000349A ; ---------------------------------------------------------------------------
.text$x:0000349F                 align 10h
.text$x:0000349F _text$x         ends
.text$x:0000349F
.xdata$x:000034A0 ; ===========================================================================
.xdata$x:000034A0
.xdata$x:000034A0 ; Segment type: Pure data
.xdata$x:000034A0 ; Segment permissions: Read
.xdata$x:000034A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000034A0                 assume cs:_xdata$x
.xdata$x:000034A0                 ;org 34A0h
.xdata$x:000034A0 ; COMDAT (pick associative to section at 33C0)
.xdata$x:000034A0 __unwindtable$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:000034A0                                         ; DATA XREF: .xdata$x:000034B0o
.xdata$x:000034A1                 db 0FFh
.xdata$x:000034A2                 db 0FFh
.xdata$x:000034A3                 db 0FFh
.xdata$x:000034A4                 dd offset __unwindfunclet$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ$0
.xdata$x:000034A8 __ehfuncinfo$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:000034A8                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ+11o
.xdata$x:000034A9                 db    5
.xdata$x:000034AA                 db  93h ; ô
.xdata$x:000034AB                 db  19h
.xdata$x:000034AC                 db    1
.xdata$x:000034AD                 db    0
.xdata$x:000034AE                 db    0
.xdata$x:000034AF                 db    0
.xdata$x:000034B0                 dd offset __unwindtable$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ
.xdata$x:000034B4                 db    0
.xdata$x:000034B5                 db    0
.xdata$x:000034B6                 db    0
.xdata$x:000034B7                 db    0
.xdata$x:000034B8                 db    0
.xdata$x:000034B9                 db    0
.xdata$x:000034BA                 db    0
.xdata$x:000034BB                 db    0
.xdata$x:000034BC                 db    0
.xdata$x:000034BD                 db    0
.xdata$x:000034BE                 db    0
.xdata$x:000034BF                 db    0
.xdata$x:000034C0                 db    0
.xdata$x:000034C1                 db    0
.xdata$x:000034C2                 db    0
.xdata$x:000034C3                 db    0
.xdata$x:000034C4                 db    0
.xdata$x:000034C5                 db    0
.xdata$x:000034C6                 db    0
.xdata$x:000034C7                 db    0
.xdata$x:000034C8                 db    1
.xdata$x:000034C9                 db    0
.xdata$x:000034CA                 db    0
.xdata$x:000034CB                 db    0
.xdata$x:000034CB _xdata$x        ends
.xdata$x:000034CB
.text:000034CC ; ===========================================================================
.text:000034CC
.text:000034CC ; Segment type: Pure code
.text:000034CC ; Segment permissions: Read/Execute
.text:000034CC _text           segment para public 'CODE' use32
.text:000034CC                 assume cs:_text
.text:000034CC                 ;org 34CCh
.text:000034CC ; COMDAT (pick any)
.text:000034CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034CC
.text:000034CC ; =============== S U B R O U T I N E =======================================
.text:000034CC
.text:000034CC ; Attributes: bp-based frame
.text:000034CC
.text:000034CC ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword2>::CMyComPtr<struct ICryptoGetTextPassword2>(void)
.text:000034CC                 public ??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ
.text:000034CC ??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ proc near
.text:000034CC                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+D9Bp
.text:000034CC
.text:000034CC var_4           = dword ptr -4
.text:000034CC
.text:000034CC                 push    ebp
.text:000034CD                 mov     ebp, esp
.text:000034CF                 push    ecx
.text:000034D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034D7                 mov     [ebp+var_4], ecx
.text:000034DA                 mov     eax, [ebp+var_4]
.text:000034DD                 mov     dword ptr [eax], 0
.text:000034E3                 mov     eax, [ebp+var_4]
.text:000034E6                 mov     esp, ebp
.text:000034E8                 pop     ebp
.text:000034E9                 retn
.text:000034E9 ??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ endp
.text:000034E9
.text:000034E9 ; ---------------------------------------------------------------------------
.text:000034EA                 align 4
.text:000034EA _text           ends
.text:000034EA
.text:000034EC ; ===========================================================================
.text:000034EC
.text:000034EC ; Segment type: Pure code
.text:000034EC ; Segment permissions: Read/Execute
.text:000034EC _text           segment para public 'CODE' use32
.text:000034EC                 assume cs:_text
.text:000034EC                 ;org 34ECh
.text:000034EC ; COMDAT (pick any)
.text:000034EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034EC
.text:000034EC ; =============== S U B R O U T I N E =======================================
.text:000034EC
.text:000034EC ; Attributes: bp-based frame
.text:000034EC
.text:000034EC ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword2>::~CMyComPtr<struct ICryptoGetTextPassword2>(void)
.text:000034EC                 public ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ
.text:000034EC ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ proc near
.text:000034EC                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F26p
.text:000034EC                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+FE6p ...
.text:000034EC
.text:000034EC var_4           = dword ptr -4
.text:000034EC
.text:000034EC                 push    ebp
.text:000034ED                 mov     ebp, esp
.text:000034EF                 push    ecx
.text:000034F0                 push    esi
.text:000034F1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034F8                 mov     [ebp+var_4], ecx
.text:000034FB                 mov     eax, [ebp+var_4]
.text:000034FE                 cmp     dword ptr [eax], 0
.text:00003501                 jz      short loc_351E
.text:00003503                 mov     ecx, [ebp+var_4]
.text:00003506                 mov     edx, [ecx]
.text:00003508                 mov     eax, [ebp+var_4]
.text:0000350B                 mov     ecx, [eax]
.text:0000350D                 mov     edx, [edx]
.text:0000350F                 mov     esi, esp
.text:00003511                 push    ecx
.text:00003512                 mov     eax, [edx+8]
.text:00003515                 call    eax
.text:00003517                 cmp     esi, esp
.text:00003519                 call    __RTC_CheckEsp
.text:0000351E
.text:0000351E loc_351E:                               ; CODE XREF: CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>(void)+15j
.text:0000351E                 pop     esi
.text:0000351F                 add     esp, 4
.text:00003522                 cmp     ebp, esp
.text:00003524                 call    __RTC_CheckEsp
.text:00003529                 mov     esp, ebp
.text:0000352B                 pop     ebp
.text:0000352C                 retn
.text:0000352C ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ endp
.text:0000352C
.text:0000352C ; ---------------------------------------------------------------------------
.text:0000352D                 align 10h
.text:0000352D _text           ends
.text:0000352D
.text:00003530 ; ===========================================================================
.text:00003530
.text:00003530 ; Segment type: Pure code
.text:00003530 ; Segment permissions: Read/Execute
.text:00003530 _text           segment para public 'CODE' use32
.text:00003530                 assume cs:_text
.text:00003530                 ;org 3530h
.text:00003530 ; COMDAT (pick any)
.text:00003530                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003530
.text:00003530 ; =============== S U B R O U T I N E =======================================
.text:00003530
.text:00003530 ; Attributes: bp-based frame
.text:00003530
.text:00003530 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword2>::operator struct ICryptoGetTextPassword2 *(void)const
.text:00003530                 public ??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ
.text:00003530 ??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ proc near
.text:00003530                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E51p
.text:00003530
.text:00003530 var_4           = dword ptr -4
.text:00003530
.text:00003530                 push    ebp
.text:00003531                 mov     ebp, esp
.text:00003533                 push    ecx
.text:00003534                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000353B                 mov     [ebp+var_4], ecx
.text:0000353E                 mov     eax, [ebp+var_4]
.text:00003541                 mov     eax, [eax]
.text:00003543                 mov     esp, ebp
.text:00003545                 pop     ebp
.text:00003546                 retn
.text:00003546 ??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ endp
.text:00003546
.text:00003546 ; ---------------------------------------------------------------------------
.text:00003547                 align 4
.text:00003547 _text           ends
.text:00003547
.text:00003548 ; ===========================================================================
.text:00003548
.text:00003548 ; Segment type: Pure code
.text:00003548 ; Segment permissions: Read/Execute
.text:00003548 _text           segment para public 'CODE' use32
.text:00003548                 assume cs:_text
.text:00003548                 ;org 3548h
.text:00003548 ; COMDAT (pick any)
.text:00003548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003548
.text:00003548 ; =============== S U B R O U T I N E =======================================
.text:00003548
.text:00003548 ; Attributes: bp-based frame
.text:00003548
.text:00003548 ; public: struct ICryptoGetTextPassword2 * * __thiscall CMyComPtr<struct ICryptoGetTextPassword2>::operator&(void)
.text:00003548                 public ??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ
.text:00003548 ??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ proc near
.text:00003548                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+DC3p
.text:00003548
.text:00003548 var_4           = dword ptr -4
.text:00003548
.text:00003548                 push    ebp
.text:00003549                 mov     ebp, esp
.text:0000354B                 push    ecx
.text:0000354C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003553                 mov     [ebp+var_4], ecx
.text:00003556                 mov     eax, [ebp+var_4]
.text:00003559                 mov     esp, ebp
.text:0000355B                 pop     ebp
.text:0000355C                 retn
.text:0000355C ??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ endp
.text:0000355C
.text:0000355C ; ---------------------------------------------------------------------------
.text:0000355D                 align 10h
.text:0000355D _text           ends
.text:0000355D
.text:00003560 ; ===========================================================================
.text:00003560
.text:00003560 ; Segment type: Pure code
.text:00003560 ; Segment permissions: Read/Execute
.text:00003560 _text           segment para public 'CODE' use32
.text:00003560                 assume cs:_text
.text:00003560                 ;org 3560h
.text:00003560 ; COMDAT (pick any)
.text:00003560                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003560
.text:00003560 ; =============== S U B R O U T I N E =======================================
.text:00003560
.text:00003560 ; Attributes: bp-based frame
.text:00003560
.text:00003560 ; public: struct ICryptoGetTextPassword2 * __thiscall CMyComPtr<struct ICryptoGetTextPassword2>::operator->(void)const
.text:00003560                 public ??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ
.text:00003560 ??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ proc near
.text:00003560                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E84p
.text:00003560
.text:00003560 var_4           = dword ptr -4
.text:00003560
.text:00003560                 push    ebp
.text:00003561                 mov     ebp, esp
.text:00003563                 push    ecx
.text:00003564                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000356B                 mov     [ebp+var_4], ecx
.text:0000356E                 mov     eax, [ebp+var_4]
.text:00003571                 mov     eax, [eax]
.text:00003573                 mov     esp, ebp
.text:00003575                 pop     ebp
.text:00003576                 retn
.text:00003576 ??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ endp
.text:00003576
.text:00003576 ; ---------------------------------------------------------------------------
.text:00003577                 align 4
.text:00003577 _text           ends
.text:00003577
.text:00003578 ; ===========================================================================
.text:00003578
.text:00003578 ; Segment type: Pure code
.text:00003578 ; Segment permissions: Read/Execute
.text:00003578 _text           segment para public 'CODE' use32
.text:00003578                 assume cs:_text
.text:00003578                 ;org 3578h
.text:00003578 ; COMDAT (pick any)
.text:00003578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003578
.text:00003578 ; =============== S U B R O U T I N E =======================================
.text:00003578
.text:00003578 ; Attributes: bp-based frame
.text:00003578
.text:00003578 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallback>::CMyComPtr<struct IArchiveUpdateCallback>(struct IArchiveUpdateCallback *)
.text:00003578                 public ??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z
.text:00003578 ??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z proc near
.text:00003578                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+DB4p
.text:00003578
.text:00003578 var_4           = dword ptr -4
.text:00003578 arg_0           = dword ptr  8
.text:00003578
.text:00003578                 push    ebp
.text:00003579                 mov     ebp, esp
.text:0000357B                 push    ecx
.text:0000357C                 push    esi
.text:0000357D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003584                 mov     [ebp+var_4], ecx
.text:00003587                 mov     eax, [ebp+var_4]
.text:0000358A                 mov     ecx, [ebp+arg_0]
.text:0000358D                 mov     [eax], ecx
.text:0000358F                 cmp     [ebp+arg_0], 0
.text:00003593                 jz      short loc_35AC
.text:00003595                 mov     edx, [ebp+arg_0]
.text:00003598                 mov     eax, [edx]
.text:0000359A                 mov     esi, esp
.text:0000359C                 mov     ecx, [ebp+arg_0]
.text:0000359F                 push    ecx
.text:000035A0                 mov     edx, [eax+4]
.text:000035A3                 call    edx
.text:000035A5                 cmp     esi, esp
.text:000035A7                 call    __RTC_CheckEsp
.text:000035AC
.text:000035AC loc_35AC:                               ; CODE XREF: CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>(IArchiveUpdateCallback *)+1Bj
.text:000035AC                 mov     eax, [ebp+var_4]
.text:000035AF                 pop     esi
.text:000035B0                 add     esp, 4
.text:000035B3                 cmp     ebp, esp
.text:000035B5                 call    __RTC_CheckEsp
.text:000035BA                 mov     esp, ebp
.text:000035BC                 pop     ebp
.text:000035BD                 retn    4
.text:000035BD ??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z endp
.text:000035BD
.text:000035BD _text           ends
.text:000035BD
.text:000035C0 ; ===========================================================================
.text:000035C0
.text:000035C0 ; Segment type: Pure code
.text:000035C0 ; Segment permissions: Read/Execute
.text:000035C0 _text           segment para public 'CODE' use32
.text:000035C0                 assume cs:_text
.text:000035C0                 ;org 35C0h
.text:000035C0 ; COMDAT (pick any)
.text:000035C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035C0
.text:000035C0 ; =============== S U B R O U T I N E =======================================
.text:000035C0
.text:000035C0 ; Attributes: bp-based frame
.text:000035C0
.text:000035C0 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallback>::~CMyComPtr<struct IArchiveUpdateCallback>(void)
.text:000035C0                 public ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ
.text:000035C0 ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ proc near
.text:000035C0                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+DEFp
.text:000035C0                                         ; __unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$15+6j
.text:000035C0
.text:000035C0 var_4           = dword ptr -4
.text:000035C0
.text:000035C0                 push    ebp
.text:000035C1                 mov     ebp, esp
.text:000035C3                 push    ecx
.text:000035C4                 push    esi
.text:000035C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035CC                 mov     [ebp+var_4], ecx
.text:000035CF                 mov     eax, [ebp+var_4]
.text:000035D2                 cmp     dword ptr [eax], 0
.text:000035D5                 jz      short loc_35F2
.text:000035D7                 mov     ecx, [ebp+var_4]
.text:000035DA                 mov     edx, [ecx]
.text:000035DC                 mov     eax, [ebp+var_4]
.text:000035DF                 mov     ecx, [eax]
.text:000035E1                 mov     edx, [edx]
.text:000035E3                 mov     esi, esp
.text:000035E5                 push    ecx
.text:000035E6                 mov     eax, [edx+8]
.text:000035E9                 call    eax
.text:000035EB                 cmp     esi, esp
.text:000035ED                 call    __RTC_CheckEsp
.text:000035F2
.text:000035F2 loc_35F2:                               ; CODE XREF: CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>(void)+15j
.text:000035F2                 pop     esi
.text:000035F3                 add     esp, 4
.text:000035F6                 cmp     ebp, esp
.text:000035F8                 call    __RTC_CheckEsp
.text:000035FD                 mov     esp, ebp
.text:000035FF                 pop     ebp
.text:00003600                 retn
.text:00003600 ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ endp
.text:00003600
.text:00003600 ; ---------------------------------------------------------------------------
.text:00003601                 align 4
.text:00003601 _text           ends
.text:00003601
.text:00003604 ; ===========================================================================
.text:00003604
.text:00003604 ; Segment type: Pure code
.text:00003604 ; Segment permissions: Read/Execute
.text:00003604 _text           segment para public 'CODE' use32
.text:00003604                 assume cs:_text
.text:00003604                 ;org 3604h
.text:00003604 ; COMDAT (pick any)
.text:00003604                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003604
.text:00003604 ; =============== S U B R O U T I N E =======================================
.text:00003604
.text:00003604 ; Attributes: bp-based frame
.text:00003604
.text:00003604 ; _DWORD __thiscall CProp::CProp(CProp *this, const struct CProp *)
.text:00003604                 public ??0CProp@@QAE@ABU0@@Z
.text:00003604 ??0CProp@@QAE@ABU0@@Z proc near         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+B2p
.text:00003604
.text:00003604 var_4           = dword ptr -4
.text:00003604 arg_0           = dword ptr  8
.text:00003604
.text:00003604                 push    ebp
.text:00003605                 mov     ebp, esp
.text:00003607                 push    ecx
.text:00003608                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000360F                 mov     [ebp+var_4], ecx
.text:00003612                 mov     eax, [ebp+var_4]
.text:00003615                 mov     ecx, [ebp+arg_0]
.text:00003618                 mov     edx, [ecx]
.text:0000361A                 mov     [eax], edx
.text:0000361C                 mov     eax, [ebp+var_4]
.text:0000361F                 mov     ecx, [ebp+arg_0]
.text:00003622                 mov     dl, [ecx+4]
.text:00003625                 mov     [eax+4], dl
.text:00003628                 mov     eax, [ebp+arg_0]
.text:0000362B                 add     eax, 8
.text:0000362E                 push    eax             ; struct NWindows::NCOM::CPropVariant *
.text:0000362F                 mov     ecx, [ebp+var_4]
.text:00003632                 add     ecx, 8          ; this
.text:00003635                 call    ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant const &)
.text:0000363A                 mov     eax, [ebp+var_4]
.text:0000363D                 add     esp, 4
.text:00003640                 cmp     ebp, esp
.text:00003642                 call    __RTC_CheckEsp
.text:00003647                 mov     esp, ebp
.text:00003649                 pop     ebp
.text:0000364A                 retn    4
.text:0000364A ??0CProp@@QAE@ABU0@@Z endp
.text:0000364A
.text:0000364A ; ---------------------------------------------------------------------------
.text:0000364D                 align 10h
.text:0000364D _text           ends
.text:0000364D
.text:00003650 ; ===========================================================================
.text:00003650
.text:00003650 ; Segment type: Pure code
.text:00003650 ; Segment permissions: Read/Execute
.text:00003650 _text           segment para public 'CODE' use32
.text:00003650                 assume cs:_text
.text:00003650                 ;org 3650h
.text:00003650 ; COMDAT (pick any)
.text:00003650                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003650
.text:00003650 ; =============== S U B R O U T I N E =======================================
.text:00003650
.text:00003650 ; Attributes: bp-based frame
.text:00003650
.text:00003650 ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:00003650                 public ??_GCProp@@QAEPAXI@Z
.text:00003650 ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:00003650                                         ; CObjectVector<CProp>::Clear(void)+59p
.text:00003650
.text:00003650 var_4           = dword ptr -4
.text:00003650 arg_0           = dword ptr  8
.text:00003650
.text:00003650                 push    ebp
.text:00003651                 mov     ebp, esp
.text:00003653                 push    ecx
.text:00003654                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000365B                 mov     [ebp+var_4], ecx
.text:0000365E                 mov     ecx, [ebp+var_4] ; this
.text:00003661                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:00003666                 mov     eax, [ebp+arg_0]
.text:00003669                 and     eax, 1
.text:0000366C                 jz      short loc_367A
.text:0000366E                 mov     ecx, [ebp+var_4]
.text:00003671                 push    ecx             ; void *
.text:00003672                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003677                 add     esp, 4
.text:0000367A
.text:0000367A loc_367A:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:0000367A                 mov     eax, [ebp+var_4]
.text:0000367D                 add     esp, 4
.text:00003680                 cmp     ebp, esp
.text:00003682                 call    __RTC_CheckEsp
.text:00003687                 mov     esp, ebp
.text:00003689                 pop     ebp
.text:0000368A                 retn    4
.text:0000368A ??_GCProp@@QAEPAXI@Z endp
.text:0000368A
.text:0000368A ; ---------------------------------------------------------------------------
.text:0000368D                 align 10h
.text:0000368D _text           ends
.text:0000368D
.text:00003690 ; ===========================================================================
.text:00003690
.text:00003690 ; Segment type: Pure code
.text:00003690 ; Segment permissions: Read/Execute
.text:00003690 _text           segment para public 'CODE' use32
.text:00003690                 assume cs:_text
.text:00003690                 ;org 3690h
.text:00003690 ; COMDAT (pick any)
.text:00003690                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003690
.text:00003690 ; =============== S U B R O U T I N E =======================================
.text:00003690
.text:00003690 ; Attributes: bp-based frame
.text:00003690
.text:00003690 ; _DWORD __thiscall NArchive::NZip::CUpdateItem::CUpdateItem(NArchive::NZip::CUpdateItem *this, const struct NArchive::NZip::CUpdateItem *)
.text:00003690                 public ??0CUpdateItem@NZip@NArchive@@QAE@ABU012@@Z
.text:00003690 ??0CUpdateItem@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:00003690                                         ; CODE XREF: CObjectVector<NArchive::NZip::CUpdateItem>::Add(NArchive::NZip::CUpdateItem const &)+5Ap
.text:00003690
.text:00003690 var_4           = dword ptr -4
.text:00003690 arg_0           = dword ptr  8
.text:00003690
.text:00003690                 push    ebp
.text:00003691                 mov     ebp, esp
.text:00003693                 push    ecx
.text:00003694                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000369B                 mov     [ebp+var_4], ecx
.text:0000369E                 mov     eax, [ebp+var_4]
.text:000036A1                 mov     ecx, [ebp+arg_0]
.text:000036A4                 mov     dl, [ecx]
.text:000036A6                 mov     [eax], dl
.text:000036A8                 mov     eax, [ebp+var_4]
.text:000036AB                 mov     ecx, [ebp+arg_0]
.text:000036AE                 mov     dl, [ecx+1]
.text:000036B1                 mov     [eax+1], dl
.text:000036B4                 mov     eax, [ebp+var_4]
.text:000036B7                 mov     ecx, [ebp+arg_0]
.text:000036BA                 mov     dl, [ecx+2]
.text:000036BD                 mov     [eax+2], dl
.text:000036C0                 mov     eax, [ebp+var_4]
.text:000036C3                 mov     ecx, [ebp+arg_0]
.text:000036C6                 mov     dl, [ecx+3]
.text:000036C9                 mov     [eax+3], dl
.text:000036CC                 mov     eax, [ebp+var_4]
.text:000036CF                 mov     ecx, [ebp+arg_0]
.text:000036D2                 mov     dl, [ecx+4]
.text:000036D5                 mov     [eax+4], dl
.text:000036D8                 mov     eax, [ebp+var_4]
.text:000036DB                 mov     ecx, [ebp+arg_0]
.text:000036DE                 mov     edx, [ecx+8]
.text:000036E1                 mov     [eax+8], edx
.text:000036E4                 mov     eax, [ebp+var_4]
.text:000036E7                 mov     ecx, [ebp+arg_0]
.text:000036EA                 mov     edx, [ecx+0Ch]
.text:000036ED                 mov     [eax+0Ch], edx
.text:000036F0                 mov     eax, [ebp+var_4]
.text:000036F3                 mov     ecx, [ebp+arg_0]
.text:000036F6                 mov     edx, [ecx+10h]
.text:000036F9                 mov     [eax+10h], edx
.text:000036FC                 mov     eax, [ebp+var_4]
.text:000036FF                 mov     ecx, [ebp+arg_0]
.text:00003702                 mov     edx, [ecx+14h]
.text:00003705                 mov     [eax+14h], edx
.text:00003708                 mov     eax, [ebp+var_4]
.text:0000370B                 mov     ecx, [ebp+arg_0]
.text:0000370E                 mov     edx, [ecx+18h]
.text:00003711                 mov     [eax+18h], edx
.text:00003714                 mov     ecx, [ecx+1Ch]
.text:00003717                 mov     [eax+1Ch], ecx
.text:0000371A                 mov     edx, [ebp+arg_0]
.text:0000371D                 add     edx, 20h ; ' '
.text:00003720                 push    edx
.text:00003721                 mov     ecx, [ebp+var_4]
.text:00003724                 add     ecx, 20h ; ' '
.text:00003727                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:0000372C                 mov     eax, [ebp+arg_0]
.text:0000372F                 mov     ecx, [eax+2Ch]
.text:00003732                 mov     edx, [eax+30h]
.text:00003735                 mov     eax, [ebp+var_4]
.text:00003738                 mov     [eax+2Ch], ecx
.text:0000373B                 mov     [eax+30h], edx
.text:0000373E                 mov     ecx, [ebp+arg_0]
.text:00003741                 mov     edx, [ecx+34h]
.text:00003744                 mov     eax, [ecx+38h]
.text:00003747                 mov     ecx, [ebp+var_4]
.text:0000374A                 mov     [ecx+34h], edx
.text:0000374D                 mov     [ecx+38h], eax
.text:00003750                 mov     edx, [ebp+arg_0]
.text:00003753                 mov     eax, [edx+3Ch]
.text:00003756                 mov     ecx, [edx+40h]
.text:00003759                 mov     edx, [ebp+var_4]
.text:0000375C                 mov     [edx+3Ch], eax
.text:0000375F                 mov     [edx+40h], ecx
.text:00003762                 mov     eax, [ebp+var_4]
.text:00003765                 add     esp, 4
.text:00003768                 cmp     ebp, esp
.text:0000376A                 call    __RTC_CheckEsp
.text:0000376F                 mov     esp, ebp
.text:00003771                 pop     ebp
.text:00003772                 retn    4
.text:00003772 ??0CUpdateItem@NZip@NArchive@@QAE@ABU012@@Z endp
.text:00003772
.text:00003772 ; ---------------------------------------------------------------------------
.text:00003775                 align 4
.text:00003775 _text           ends
.text:00003775
.text:00003778 ; ===========================================================================
.text:00003778
.text:00003778 ; Segment type: Pure code
.text:00003778 ; Segment permissions: Read/Execute
.text:00003778 _text           segment para public 'CODE' use32
.text:00003778                 assume cs:_text
.text:00003778                 ;org 3778h
.text:00003778 ; COMDAT (pick any)
.text:00003778                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003778
.text:00003778 ; =============== S U B R O U T I N E =======================================
.text:00003778
.text:00003778 ; Attributes: bp-based frame
.text:00003778
.text:00003778 ; public: void * __thiscall NArchive::NZip::CUpdateItem::`scalar deleting destructor'(unsigned int)
.text:00003778                 public ??_GCUpdateItem@NZip@NArchive@@QAEPAXI@Z
.text:00003778 ??_GCUpdateItem@NZip@NArchive@@QAEPAXI@Z proc near
.text:00003778                                         ; CODE XREF: CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>(void)+7Fp
.text:00003778
.text:00003778 var_4           = dword ptr -4
.text:00003778 arg_0           = dword ptr  8
.text:00003778
.text:00003778                 push    ebp
.text:00003779                 mov     ebp, esp
.text:0000377B                 push    ecx
.text:0000377C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003783                 mov     [ebp+var_4], ecx
.text:00003786                 mov     ecx, [ebp+var_4] ; this
.text:00003789                 call    ??1CUpdateItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CUpdateItem::~CUpdateItem(void)
.text:0000378E                 mov     eax, [ebp+arg_0]
.text:00003791                 and     eax, 1
.text:00003794                 jz      short loc_37A2
.text:00003796                 mov     ecx, [ebp+var_4]
.text:00003799                 push    ecx             ; void *
.text:0000379A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000379F                 add     esp, 4
.text:000037A2
.text:000037A2 loc_37A2:                               ; CODE XREF: NArchive::NZip::CUpdateItem::`scalar deleting destructor'(uint)+1Cj
.text:000037A2                 mov     eax, [ebp+var_4]
.text:000037A5                 add     esp, 4
.text:000037A8                 cmp     ebp, esp
.text:000037AA                 call    __RTC_CheckEsp
.text:000037AF                 mov     esp, ebp
.text:000037B1                 pop     ebp
.text:000037B2                 retn    4
.text:000037B2 ??_GCUpdateItem@NZip@NArchive@@QAEPAXI@Z endp
.text:000037B2
.text:000037B2 ; ---------------------------------------------------------------------------
.text:000037B5                 align 4
.text:000037B5 _text           ends
.text:000037B5
.text:000037B8 ; ===========================================================================
.text:000037B8
.text:000037B8 ; Segment type: Pure code
.text:000037B8 ; Segment permissions: Read/Execute
.text:000037B8 _text           segment para public 'CODE' use32
.text:000037B8                 assume cs:_text
.text:000037B8                 ;org 37B8h
.text:000037B8 ; COMDAT (pick any)
.text:000037B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037B8
.text:000037B8 ; =============== S U B R O U T I N E =======================================
.text:000037B8
.text:000037B8 ; Attributes: bp-based frame
.text:000037B8
.text:000037B8 ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:000037B8                 public ??1CProp@@QAE@XZ
.text:000037B8 ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:000037B8
.text:000037B8 var_4           = dword ptr -4
.text:000037B8
.text:000037B8                 push    ebp
.text:000037B9                 mov     ebp, esp
.text:000037BB                 push    ecx
.text:000037BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037C3                 mov     [ebp+var_4], ecx
.text:000037C6                 mov     ecx, [ebp+var_4]
.text:000037C9                 add     ecx, 8          ; this
.text:000037CC                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000037D1                 add     esp, 4
.text:000037D4                 cmp     ebp, esp
.text:000037D6                 call    __RTC_CheckEsp
.text:000037DB                 mov     esp, ebp
.text:000037DD                 pop     ebp
.text:000037DE                 retn
.text:000037DE ??1CProp@@QAE@XZ endp
.text:000037DE
.text:000037DE ; ---------------------------------------------------------------------------
.text:000037DF                 align 10h
.text:000037DF _text           ends
.text:000037DF
.text:000037E0 ; ===========================================================================
.text:000037E0
.text:000037E0 ; Segment type: Pure code
.text:000037E0 ; Segment permissions: Read/Execute
.text:000037E0 _text           segment para public 'CODE' use32
.text:000037E0                 assume cs:_text
.text:000037E0                 ;org 37E0h
.text:000037E0 ; COMDAT (pick any)
.text:000037E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037E0
.text:000037E0 ; =============== S U B R O U T I N E =======================================
.text:000037E0
.text:000037E0 ; Attributes: bp-based frame
.text:000037E0
.text:000037E0 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:000037E0                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:000037E0 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:000037E0                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(void)+11p
.text:000037E0                                         ; CObjectVector<NArchive::NZip::CUpdateItem>::CObjectVector<NArchive::NZip::CUpdateItem>(void)+11p
.text:000037E0
.text:000037E0 var_4           = dword ptr -4
.text:000037E0
.text:000037E0                 push    ebp
.text:000037E1                 mov     ebp, esp
.text:000037E3                 push    ecx
.text:000037E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037EB                 mov     [ebp+var_4], ecx
.text:000037EE                 mov     eax, [ebp+var_4]
.text:000037F1                 mov     dword ptr [eax], 0
.text:000037F7                 mov     ecx, [ebp+var_4]
.text:000037FA                 mov     dword ptr [ecx+4], 0
.text:00003801                 mov     edx, [ebp+var_4]
.text:00003804                 mov     dword ptr [edx+8], 0
.text:0000380B                 mov     eax, [ebp+var_4]
.text:0000380E                 mov     esp, ebp
.text:00003810                 pop     ebp
.text:00003811                 retn
.text:00003811 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00003811
.text:00003811 ; ---------------------------------------------------------------------------
.text:00003812                 align 4
.text:00003812 _text           ends
.text:00003812
.text:00003814 ; ===========================================================================
.text:00003814
.text:00003814 ; Segment type: Pure code
.text:00003814 ; Segment permissions: Read/Execute
.text:00003814 _text           segment para public 'CODE' use32
.text:00003814                 assume cs:_text
.text:00003814                 ;org 3814h
.text:00003814 ; COMDAT (pick any)
.text:00003814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003814
.text:00003814 ; =============== S U B R O U T I N E =======================================
.text:00003814
.text:00003814 ; Attributes: bp-based frame
.text:00003814
.text:00003814 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00003814                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00003814 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00003814                                         ; CODE XREF: CObjectVector<CProp>::Size(void)+11p
.text:00003814                                         ; CObjectVector<CProp>::~CObjectVector<CProp>(void)+46p ...
.text:00003814
.text:00003814 var_4           = dword ptr -4
.text:00003814
.text:00003814                 push    ebp
.text:00003815                 mov     ebp, esp
.text:00003817                 push    ecx
.text:00003818                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000381F                 mov     [ebp+var_4], ecx
.text:00003822                 mov     eax, [ebp+var_4]
.text:00003825                 mov     eax, [eax+4]
.text:00003828                 mov     esp, ebp
.text:0000382A                 pop     ebp
.text:0000382B                 retn
.text:0000382B ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:0000382B
.text:0000382B _text           ends
.text:0000382B
.text:0000382C ; ===========================================================================
.text:0000382C
.text:0000382C ; Segment type: Pure code
.text:0000382C ; Segment permissions: Read/Execute
.text:0000382C _text           segment para public 'CODE' use32
.text:0000382C                 assume cs:_text
.text:0000382C                 ;org 382Ch
.text:0000382C ; COMDAT (pick any)
.text:0000382C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000382C
.text:0000382C ; =============== S U B R O U T I N E =======================================
.text:0000382C
.text:0000382C ; Attributes: bp-based frame
.text:0000382C
.text:0000382C ; public: void __thiscall CRecordVector<void *>::Reserve(unsigned int)
.text:0000382C                 public ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
.text:0000382C ?Reserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:0000382C                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+69p
.text:0000382C
.text:0000382C var_10          = dword ptr -10h
.text:0000382C var_C           = dword ptr -0Ch
.text:0000382C Dst             = dword ptr -8
.text:0000382C var_4           = dword ptr -4
.text:0000382C arg_0           = dword ptr  8
.text:0000382C
.text:0000382C                 push    ebp
.text:0000382D                 mov     ebp, esp
.text:0000382F                 sub     esp, 10h
.text:00003832                 mov     eax, 0CCCCCCCCh
.text:00003837                 mov     [ebp+var_10], eax
.text:0000383A                 mov     [ebp+var_C], eax
.text:0000383D                 mov     [ebp+Dst], eax
.text:00003840                 mov     [ebp+var_4], eax
.text:00003843                 mov     [ebp+var_4], ecx
.text:00003846                 mov     eax, [ebp+var_4]
.text:00003849                 mov     ecx, [ebp+arg_0]
.text:0000384C                 cmp     ecx, [eax+8]
.text:0000384F                 jbe     short loc_38C0
.text:00003851                 xor     ecx, ecx
.text:00003853                 mov     eax, [ebp+arg_0]
.text:00003856                 mov     edx, 4
.text:0000385B                 mul     edx
.text:0000385D                 seto    cl
.text:00003860                 neg     ecx
.text:00003862                 or      ecx, eax
.text:00003864                 push    ecx             ; unsigned int
.text:00003865                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000386A                 add     esp, 4
.text:0000386D                 mov     [ebp+var_C], eax
.text:00003870                 mov     eax, [ebp+var_C]
.text:00003873                 mov     [ebp+Dst], eax
.text:00003876                 mov     ecx, [ebp+var_4]
.text:00003879                 cmp     dword ptr [ecx+4], 0
.text:0000387D                 jz      short loc_389B
.text:0000387F                 mov     edx, [ebp+var_4]
.text:00003882                 mov     eax, [edx+4]
.text:00003885                 shl     eax, 2
.text:00003888                 push    eax             ; Size
.text:00003889                 mov     ecx, [ebp+var_4]
.text:0000388C                 mov     edx, [ecx]
.text:0000388E                 push    edx             ; Src
.text:0000388F                 mov     eax, [ebp+Dst]
.text:00003892                 push    eax             ; Dst
.text:00003893                 call    _memcpy
.text:00003898                 add     esp, 0Ch
.text:0000389B
.text:0000389B loc_389B:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+51j
.text:0000389B                 mov     ecx, [ebp+var_4]
.text:0000389E                 mov     edx, [ecx]
.text:000038A0                 mov     [ebp+var_10], edx
.text:000038A3                 mov     eax, [ebp+var_10]
.text:000038A6                 push    eax             ; void *
.text:000038A7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000038AC                 add     esp, 4
.text:000038AF                 mov     ecx, [ebp+var_4]
.text:000038B2                 mov     edx, [ebp+Dst]
.text:000038B5                 mov     [ecx], edx
.text:000038B7                 mov     eax, [ebp+var_4]
.text:000038BA                 mov     ecx, [ebp+arg_0]
.text:000038BD                 mov     [eax+8], ecx
.text:000038C0
.text:000038C0 loc_38C0:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+23j
.text:000038C0                 add     esp, 10h
.text:000038C3                 cmp     ebp, esp
.text:000038C5                 call    __RTC_CheckEsp
.text:000038CA                 mov     esp, ebp
.text:000038CC                 pop     ebp
.text:000038CD                 retn    4
.text:000038CD ?Reserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:000038CD
.text:000038CD _text           ends
.text:000038CD
.text:000038D0 ; ===========================================================================
.text:000038D0
.text:000038D0 ; Segment type: Pure code
.text:000038D0 ; Segment permissions: Read/Execute
.text:000038D0 _text           segment para public 'CODE' use32
.text:000038D0                 assume cs:_text
.text:000038D0                 ;org 38D0h
.text:000038D0 ; COMDAT (pick any)
.text:000038D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000038D0
.text:000038D0 ; =============== S U B R O U T I N E =======================================
.text:000038D0
.text:000038D0 ; Attributes: bp-based frame
.text:000038D0
.text:000038D0 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000038D0                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:000038D0 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:000038D0                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+9Cp
.text:000038D0                                         ; __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0+3j ...
.text:000038D0
.text:000038D0 var_8           = dword ptr -8
.text:000038D0 var_4           = dword ptr -4
.text:000038D0
.text:000038D0                 push    ebp
.text:000038D1                 mov     ebp, esp
.text:000038D3                 sub     esp, 8
.text:000038D6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000038DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038E4                 mov     [ebp+var_4], ecx
.text:000038E7                 mov     eax, [ebp+var_4]
.text:000038EA                 mov     ecx, [eax]
.text:000038EC                 mov     [ebp+var_8], ecx
.text:000038EF                 mov     edx, [ebp+var_8]
.text:000038F2                 push    edx             ; void *
.text:000038F3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000038F8                 add     esp, 4
.text:000038FB                 add     esp, 8
.text:000038FE                 cmp     ebp, esp
.text:00003900                 call    __RTC_CheckEsp
.text:00003905                 mov     esp, ebp
.text:00003907                 pop     ebp
.text:00003908                 retn
.text:00003908 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00003908
.text:00003908 ; ---------------------------------------------------------------------------
.text:00003909                 align 4
.text:00003909 _text           ends
.text:00003909
.text:0000390C ; ===========================================================================
.text:0000390C
.text:0000390C ; Segment type: Pure code
.text:0000390C ; Segment permissions: Read/Execute
.text:0000390C _text           segment para public 'CODE' use32
.text:0000390C                 assume cs:_text
.text:0000390C                 ;org 390Ch
.text:0000390C ; COMDAT (pick any)
.text:0000390C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000390C
.text:0000390C ; =============== S U B R O U T I N E =======================================
.text:0000390C
.text:0000390C ; Attributes: bp-based frame
.text:0000390C
.text:0000390C ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:0000390C                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:0000390C ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:0000390C                                         ; CODE XREF: CObjectVector<CProp>::Clear(void)+6Fp
.text:0000390C
.text:0000390C var_4           = dword ptr -4
.text:0000390C
.text:0000390C                 push    ebp
.text:0000390D                 mov     ebp, esp
.text:0000390F                 push    ecx
.text:00003910                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003917                 mov     [ebp+var_4], ecx
.text:0000391A                 mov     eax, [ebp+var_4]
.text:0000391D                 mov     dword ptr [eax+4], 0
.text:00003924                 mov     esp, ebp
.text:00003926                 pop     ebp
.text:00003927                 retn
.text:00003927 ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:00003927
.text:00003927 _text           ends
.text:00003927
.text:00003928 ; ===========================================================================
.text:00003928
.text:00003928 ; Segment type: Pure code
.text:00003928 ; Segment permissions: Read/Execute
.text:00003928 _text           segment para public 'CODE' use32
.text:00003928                 assume cs:_text
.text:00003928                 ;org 3928h
.text:00003928 ; COMDAT (pick any)
.text:00003928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003928
.text:00003928 ; =============== S U B R O U T I N E =======================================
.text:00003928
.text:00003928 ; Attributes: bp-based frame
.text:00003928
.text:00003928 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00003928                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00003928 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00003928                                         ; CODE XREF: CObjectVector<NArchive::NZip::CUpdateItem>::Add(NArchive::NZip::CUpdateItem const &)+7Fp
.text:00003928
.text:00003928 var_8           = dword ptr -8
.text:00003928 var_4           = dword ptr -4
.text:00003928 arg_0           = dword ptr  8
.text:00003928
.text:00003928                 push    ebp
.text:00003929                 mov     ebp, esp
.text:0000392B                 sub     esp, 8
.text:0000392E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003935                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000393C                 mov     [ebp+var_4], ecx
.text:0000393F                 mov     ecx, [ebp+var_4]
.text:00003942                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00003947                 mov     eax, [ebp+var_4]
.text:0000394A                 mov     ecx, [eax+4]
.text:0000394D                 mov     edx, [ebp+var_4]
.text:00003950                 mov     eax, [edx]
.text:00003952                 mov     edx, [ebp+arg_0]
.text:00003955                 mov     [eax+ecx*4], edx
.text:00003958                 mov     eax, [ebp+var_4]
.text:0000395B                 mov     ecx, [eax+4]
.text:0000395E                 mov     [ebp+var_8], ecx
.text:00003961                 mov     edx, [ebp+var_4]
.text:00003964                 mov     eax, [edx+4]
.text:00003967                 add     eax, 1
.text:0000396A                 mov     ecx, [ebp+var_4]
.text:0000396D                 mov     [ecx+4], eax
.text:00003970                 mov     eax, [ebp+var_8]
.text:00003973                 add     esp, 8
.text:00003976                 cmp     ebp, esp
.text:00003978                 call    __RTC_CheckEsp
.text:0000397D                 mov     esp, ebp
.text:0000397F                 pop     ebp
.text:00003980                 retn    4
.text:00003980 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00003980
.text:00003980 ; ---------------------------------------------------------------------------
.text:00003983                 align 4
.text:00003983 _text           ends
.text:00003983
.text:00003984 ; ===========================================================================
.text:00003984
.text:00003984 ; Segment type: Pure code
.text:00003984 ; Segment permissions: Read/Execute
.text:00003984 _text           segment para public 'CODE' use32
.text:00003984                 assume cs:_text
.text:00003984                 ;org 3984h
.text:00003984 ; COMDAT (pick any)
.text:00003984                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003984
.text:00003984 ; =============== S U B R O U T I N E =======================================
.text:00003984
.text:00003984 ; Attributes: bp-based frame
.text:00003984
.text:00003984 ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:00003984                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:00003984 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:00003984                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+D7p
.text:00003984
.text:00003984 var_4           = dword ptr -4
.text:00003984 arg_0           = dword ptr  8
.text:00003984
.text:00003984                 push    ebp
.text:00003985                 mov     ebp, esp
.text:00003987                 push    ecx
.text:00003988                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000398F                 mov     [ebp+var_4], ecx
.text:00003992                 mov     eax, [ebp+var_4]
.text:00003995                 mov     ecx, [eax+4]
.text:00003998                 mov     edx, [ebp+var_4]
.text:0000399B                 mov     eax, [edx]
.text:0000399D                 mov     edx, [ebp+arg_0]
.text:000039A0                 mov     [eax+ecx*4], edx
.text:000039A3                 mov     eax, [ebp+var_4]
.text:000039A6                 mov     ecx, [eax+4]
.text:000039A9                 add     ecx, 1
.text:000039AC                 mov     edx, [ebp+var_4]
.text:000039AF                 mov     [edx+4], ecx
.text:000039B2                 mov     esp, ebp
.text:000039B4                 pop     ebp
.text:000039B5                 retn    4
.text:000039B5 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:000039B5
.text:000039B5 _text           ends
.text:000039B5
.text:000039B8 ; ===========================================================================
.text:000039B8
.text:000039B8 ; Segment type: Pure code
.text:000039B8 ; Segment permissions: Read/Execute
.text:000039B8 _text           segment para public 'CODE' use32
.text:000039B8                 assume cs:_text
.text:000039B8                 ;org 39B8h
.text:000039B8 ; COMDAT (pick any)
.text:000039B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000039B8
.text:000039B8 ; =============== S U B R O U T I N E =======================================
.text:000039B8
.text:000039B8 ; Attributes: bp-based frame
.text:000039B8
.text:000039B8 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:000039B8                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:000039B8 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:000039B8                                         ; CODE XREF: CObjectVector<CProp>::operator[](uint)+15p
.text:000039B8
.text:000039B8 var_4           = dword ptr -4
.text:000039B8 arg_0           = dword ptr  8
.text:000039B8
.text:000039B8                 push    ebp
.text:000039B9                 mov     ebp, esp
.text:000039BB                 push    ecx
.text:000039BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039C3                 mov     [ebp+var_4], ecx
.text:000039C6                 mov     eax, [ebp+var_4]
.text:000039C9                 mov     ecx, [eax]
.text:000039CB                 mov     edx, [ebp+arg_0]
.text:000039CE                 lea     eax, [ecx+edx*4]
.text:000039D1                 mov     esp, ebp
.text:000039D3                 pop     ebp
.text:000039D4                 retn    4
.text:000039D4 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:000039D4
.text:000039D4 ; ---------------------------------------------------------------------------
.text:000039D7                 align 4
.text:000039D7 _text           ends
.text:000039D7
.text:000039D8 ; ===========================================================================
.text:000039D8
.text:000039D8 ; Segment type: Pure code
.text:000039D8 ; Segment permissions: Read/Execute
.text:000039D8 _text           segment para public 'CODE' use32
.text:000039D8                 assume cs:_text
.text:000039D8                 ;org 39D8h
.text:000039D8 ; COMDAT (pick any)
.text:000039D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000039D8
.text:000039D8 ; =============== S U B R O U T I N E =======================================
.text:000039D8
.text:000039D8 ; Attributes: bp-based frame
.text:000039D8
.text:000039D8 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:000039D8                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:000039D8 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:000039D8                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p
.text:000039D8                                         ; CObjectVector<CProp>::Clear(void)+3Ep ...
.text:000039D8
.text:000039D8 var_4           = dword ptr -4
.text:000039D8 arg_0           = dword ptr  8
.text:000039D8
.text:000039D8                 push    ebp
.text:000039D9                 mov     ebp, esp
.text:000039DB                 push    ecx
.text:000039DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039E3                 mov     [ebp+var_4], ecx
.text:000039E6                 mov     eax, [ebp+var_4]
.text:000039E9                 mov     ecx, [eax]
.text:000039EB                 mov     edx, [ebp+arg_0]
.text:000039EE                 lea     eax, [ecx+edx*4]
.text:000039F1                 mov     esp, ebp
.text:000039F3                 pop     ebp
.text:000039F4                 retn    4
.text:000039F4 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:000039F4
.text:000039F4 ; ---------------------------------------------------------------------------
.text:000039F7                 align 4
.text:000039F7 _text           ends
.text:000039F7
.text:000039F8 ; ===========================================================================
.text:000039F8
.text:000039F8 ; Segment type: Pure code
.text:000039F8 ; Segment permissions: Read/Execute
.text:000039F8 _text           segment para public 'CODE' use32
.text:000039F8                 assume cs:_text
.text:000039F8                 ;org 39F8h
.text:000039F8 ; COMDAT (pick any)
.text:000039F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000039F8
.text:000039F8 ; =============== S U B R O U T I N E =======================================
.text:000039F8
.text:000039F8 ; Attributes: bp-based frame
.text:000039F8
.text:000039F8 ; private: void __thiscall CRecordVector<unsigned char>::ReserveOnePosition(void)
.text:000039F8                 public ?ReserveOnePosition@?$CRecordVector@E@@AAEXXZ
.text:000039F8 ?ReserveOnePosition@?$CRecordVector@E@@AAEXXZ proc near
.text:000039F8                                         ; CODE XREF: CRecordVector<uchar>::Add(uchar)+1Ap
.text:000039F8
.text:000039F8 var_14          = dword ptr -14h
.text:000039F8 var_10          = dword ptr -10h
.text:000039F8 Dst             = dword ptr -0Ch
.text:000039F8 var_8           = dword ptr -8
.text:000039F8 var_4           = dword ptr -4
.text:000039F8
.text:000039F8                 push    ebp
.text:000039F9                 mov     ebp, esp
.text:000039FB                 sub     esp, 14h
.text:000039FE                 mov     eax, 0CCCCCCCCh
.text:00003A03                 mov     [ebp+var_14], eax
.text:00003A06                 mov     [ebp+var_10], eax
.text:00003A09                 mov     [ebp+Dst], eax
.text:00003A0C                 mov     [ebp+var_8], eax
.text:00003A0F                 mov     [ebp+var_4], eax
.text:00003A12                 mov     [ebp+var_4], ecx
.text:00003A15                 mov     eax, [ebp+var_4]
.text:00003A18                 mov     ecx, [ebp+var_4]
.text:00003A1B                 mov     edx, [eax+4]
.text:00003A1E                 cmp     edx, [ecx+8]
.text:00003A21                 jnz     short loc_3A95
.text:00003A23                 mov     eax, [ebp+var_4]
.text:00003A26                 mov     ecx, [eax+8]
.text:00003A29                 shr     ecx, 2
.text:00003A2C                 mov     edx, [ebp+var_4]
.text:00003A2F                 mov     eax, [edx+8]
.text:00003A32                 lea     ecx, [eax+ecx+1]
.text:00003A36                 mov     [ebp+var_8], ecx
.text:00003A39                 mov     edx, [ebp+var_8]
.text:00003A3C                 push    edx             ; unsigned int
.text:00003A3D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003A42                 add     esp, 4
.text:00003A45                 mov     [ebp+var_10], eax
.text:00003A48                 mov     eax, [ebp+var_10]
.text:00003A4B                 mov     [ebp+Dst], eax
.text:00003A4E                 mov     ecx, [ebp+var_4]
.text:00003A51                 cmp     dword ptr [ecx+4], 0
.text:00003A55                 jz      short loc_3A70
.text:00003A57                 mov     edx, [ebp+var_4]
.text:00003A5A                 mov     eax, [edx+4]
.text:00003A5D                 push    eax             ; Size
.text:00003A5E                 mov     ecx, [ebp+var_4]
.text:00003A61                 mov     edx, [ecx]
.text:00003A63                 push    edx             ; Src
.text:00003A64                 mov     eax, [ebp+Dst]
.text:00003A67                 push    eax             ; Dst
.text:00003A68                 call    _memcpy
.text:00003A6D                 add     esp, 0Ch
.text:00003A70
.text:00003A70 loc_3A70:                               ; CODE XREF: CRecordVector<uchar>::ReserveOnePosition(void)+5Dj
.text:00003A70                 mov     ecx, [ebp+var_4]
.text:00003A73                 mov     edx, [ecx]
.text:00003A75                 mov     [ebp+var_14], edx
.text:00003A78                 mov     eax, [ebp+var_14]
.text:00003A7B                 push    eax             ; void *
.text:00003A7C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003A81                 add     esp, 4
.text:00003A84                 mov     ecx, [ebp+var_4]
.text:00003A87                 mov     edx, [ebp+Dst]
.text:00003A8A                 mov     [ecx], edx
.text:00003A8C                 mov     eax, [ebp+var_4]
.text:00003A8F                 mov     ecx, [ebp+var_8]
.text:00003A92                 mov     [eax+8], ecx
.text:00003A95
.text:00003A95 loc_3A95:                               ; CODE XREF: CRecordVector<uchar>::ReserveOnePosition(void)+29j
.text:00003A95                 add     esp, 14h
.text:00003A98                 cmp     ebp, esp
.text:00003A9A                 call    __RTC_CheckEsp
.text:00003A9F                 mov     esp, ebp
.text:00003AA1                 pop     ebp
.text:00003AA2                 retn
.text:00003AA2 ?ReserveOnePosition@?$CRecordVector@E@@AAEXXZ endp
.text:00003AA2
.text:00003AA2 ; ---------------------------------------------------------------------------
.text:00003AA3                 align 4
.text:00003AA3 _text           ends
.text:00003AA3
.text:00003AA4 ; ===========================================================================
.text:00003AA4
.text:00003AA4 ; Segment type: Pure code
.text:00003AA4 ; Segment permissions: Read/Execute
.text:00003AA4 _text           segment para public 'CODE' use32
.text:00003AA4                 assume cs:_text
.text:00003AA4                 ;org 3AA4h
.text:00003AA4 ; COMDAT (pick any)
.text:00003AA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003AA4
.text:00003AA4 ; =============== S U B R O U T I N E =======================================
.text:00003AA4
.text:00003AA4 ; Attributes: bp-based frame
.text:00003AA4
.text:00003AA4 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00003AA4                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00003AA4 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00003AA4                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00003AA4
.text:00003AA4 var_14          = dword ptr -14h
.text:00003AA4 var_10          = dword ptr -10h
.text:00003AA4 Dst             = dword ptr -0Ch
.text:00003AA4 var_8           = dword ptr -8
.text:00003AA4 var_4           = dword ptr -4
.text:00003AA4
.text:00003AA4                 push    ebp
.text:00003AA5                 mov     ebp, esp
.text:00003AA7                 sub     esp, 14h
.text:00003AAA                 mov     eax, 0CCCCCCCCh
.text:00003AAF                 mov     [ebp+var_14], eax
.text:00003AB2                 mov     [ebp+var_10], eax
.text:00003AB5                 mov     [ebp+Dst], eax
.text:00003AB8                 mov     [ebp+var_8], eax
.text:00003ABB                 mov     [ebp+var_4], eax
.text:00003ABE                 mov     [ebp+var_4], ecx
.text:00003AC1                 mov     eax, [ebp+var_4]
.text:00003AC4                 mov     ecx, [ebp+var_4]
.text:00003AC7                 mov     edx, [eax+4]
.text:00003ACA                 cmp     edx, [ecx+8]
.text:00003ACD                 jnz     loc_3B58
.text:00003AD3                 mov     eax, [ebp+var_4]
.text:00003AD6                 mov     ecx, [eax+8]
.text:00003AD9                 shr     ecx, 2
.text:00003ADC                 mov     edx, [ebp+var_4]
.text:00003ADF                 mov     eax, [edx+8]
.text:00003AE2                 lea     ecx, [eax+ecx+1]
.text:00003AE6                 mov     [ebp+var_8], ecx
.text:00003AE9                 xor     ecx, ecx
.text:00003AEB                 mov     eax, [ebp+var_8]
.text:00003AEE                 mov     edx, 4
.text:00003AF3                 mul     edx
.text:00003AF5                 seto    cl
.text:00003AF8                 neg     ecx
.text:00003AFA                 or      ecx, eax
.text:00003AFC                 push    ecx             ; unsigned int
.text:00003AFD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003B02                 add     esp, 4
.text:00003B05                 mov     [ebp+var_10], eax
.text:00003B08                 mov     eax, [ebp+var_10]
.text:00003B0B                 mov     [ebp+Dst], eax
.text:00003B0E                 mov     ecx, [ebp+var_4]
.text:00003B11                 cmp     dword ptr [ecx+4], 0
.text:00003B15                 jz      short loc_3B33
.text:00003B17                 mov     edx, [ebp+var_4]
.text:00003B1A                 mov     eax, [edx+4]
.text:00003B1D                 shl     eax, 2
.text:00003B20                 push    eax             ; Size
.text:00003B21                 mov     ecx, [ebp+var_4]
.text:00003B24                 mov     edx, [ecx]
.text:00003B26                 push    edx             ; Src
.text:00003B27                 mov     eax, [ebp+Dst]
.text:00003B2A                 push    eax             ; Dst
.text:00003B2B                 call    _memcpy
.text:00003B30                 add     esp, 0Ch
.text:00003B33
.text:00003B33 loc_3B33:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00003B33                 mov     ecx, [ebp+var_4]
.text:00003B36                 mov     edx, [ecx]
.text:00003B38                 mov     [ebp+var_14], edx
.text:00003B3B                 mov     eax, [ebp+var_14]
.text:00003B3E                 push    eax             ; void *
.text:00003B3F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003B44                 add     esp, 4
.text:00003B47                 mov     ecx, [ebp+var_4]
.text:00003B4A                 mov     edx, [ebp+Dst]
.text:00003B4D                 mov     [ecx], edx
.text:00003B4F                 mov     eax, [ebp+var_4]
.text:00003B52                 mov     ecx, [ebp+var_8]
.text:00003B55                 mov     [eax+8], ecx
.text:00003B58
.text:00003B58 loc_3B58:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00003B58                 add     esp, 14h
.text:00003B5B                 cmp     ebp, esp
.text:00003B5D                 call    __RTC_CheckEsp
.text:00003B62                 mov     esp, ebp
.text:00003B64                 pop     ebp
.text:00003B65                 retn
.text:00003B65 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00003B65
.text:00003B65 ; ---------------------------------------------------------------------------
.text:00003B66                 align 4
.text:00003B66 _text           ends
.text:00003B66
.text:00003B68 ; ===========================================================================
.text:00003B68
.text:00003B68 ; Segment type: Pure code
.text:00003B68 ; Segment permissions: Read/Execute
.text:00003B68 _text           segment para public 'CODE' use32
.text:00003B68                 assume cs:_text
.text:00003B68                 ;org 3B68h
.text:00003B68 ; COMDAT (pick any)
.text:00003B68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003B68
.text:00003B68 ; =============== S U B R O U T I N E =======================================
.text:00003B68
.text:00003B68 ; Attributes: bp-based frame
.text:00003B68
.text:00003B68 ; public: long __thiscall CMyComPtr<struct IArchiveUpdateCallback>::QueryInterface<struct ICryptoGetTextPassword2>(struct _GUID const &, struct ICryptoGetTextPassword2 * *)const
.text:00003B68                 public ??$QueryInterface@UICryptoGetTextPassword2@@@?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword2@@@Z
.text:00003B68 ??$QueryInterface@UICryptoGetTextPassword2@@@?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword2@@@Z proc near
.text:00003B68                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+DE0p
.text:00003B68
.text:00003B68 var_4           = dword ptr -4
.text:00003B68 arg_0           = dword ptr  8
.text:00003B68 arg_4           = dword ptr  0Ch
.text:00003B68
.text:00003B68                 push    ebp
.text:00003B69                 mov     ebp, esp
.text:00003B6B                 push    ecx
.text:00003B6C                 push    esi
.text:00003B6D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B74                 mov     [ebp+var_4], ecx
.text:00003B77                 mov     esi, esp
.text:00003B79                 mov     eax, [ebp+arg_4]
.text:00003B7C                 push    eax
.text:00003B7D                 mov     ecx, [ebp+arg_0]
.text:00003B80                 push    ecx
.text:00003B81                 mov     edx, [ebp+var_4]
.text:00003B84                 mov     eax, [edx]
.text:00003B86                 mov     ecx, [ebp+var_4]
.text:00003B89                 mov     edx, [ecx]
.text:00003B8B                 mov     eax, [eax]
.text:00003B8D                 push    edx
.text:00003B8E                 mov     ecx, [eax]
.text:00003B90                 call    ecx
.text:00003B92                 cmp     esi, esp
.text:00003B94                 call    __RTC_CheckEsp
.text:00003B99                 pop     esi
.text:00003B9A                 add     esp, 4
.text:00003B9D                 cmp     ebp, esp
.text:00003B9F                 call    __RTC_CheckEsp
.text:00003BA4                 mov     esp, ebp
.text:00003BA6                 pop     ebp
.text:00003BA7                 retn    8
.text:00003BA7 ??$QueryInterface@UICryptoGetTextPassword2@@@?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword2@@@Z endp
.text:00003BA7
.text:00003BA7 _text           ends
.text:00003BA7
UNDEF:00003BB0 ; ===========================================================================
UNDEF:00003BB0
UNDEF:00003BB0 ; Segment type: Externs
UNDEF:00003BB0 ; UNDEF
UNDEF:00003BB0                 extrn __RTC_Shutdown:near
UNDEF:00003BB0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00003BB4                 extrn __RTC_InitBase:near
UNDEF:00003BB4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00003BB8 ; long __stdcall NArchive::NZip::Update(class CObjectVector<class NArchive::NZip::CItemEx> const &, class CObjectVector<struct NArchive::NZip::CUpdateItem> const &, struct ISequentialOutStream *, class NArchive::NZip::CInArchive *, bool, struct NArchive::NZip::CCompressionMethodMode *, struct IArchiveUpdateCallback *)
UNDEF:00003BB8                 extrn ?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z:near
UNDEF:00003BB8                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+11E8p
UNDEF:00003BBC ; struct AString __stdcall __high UnicodeStringToMultiByte(const struct UString *, unsigned int)
UNDEF:00003BBC                 extrn ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z:near
UNDEF:00003BBC                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+105Dp
UNDEF:00003BC0 ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:00003BC0                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:00003BC0                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+103Ep
UNDEF:00003BC0                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+5Ep ...
UNDEF:00003BC4                 extrn _IID_ICryptoGetTextPassword2:near
UNDEF:00003BC4                                         ; DATA XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+DD5o
UNDEF:00003BC8 ; void __stdcall ConvertUnicodeToUTF8(const struct UString *, struct AString *)
UNDEF:00003BC8                 extrn ?ConvertUnicodeToUTF8@@YGXABVUString@@AAVAString@@@Z:near
UNDEF:00003BC8                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B97p
UNDEF:00003BCC ; struct UString __stdcall __high MultiByteToUnicodeString(const struct AString *, unsigned int)
UNDEF:00003BCC                 extrn ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z:near
UNDEF:00003BCC                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+ACBp
UNDEF:00003BD0 ; public: class AString & __thiscall AString::operator=(class AString const &)
UNDEF:00003BD0                 extrn ??4AString@@QAEAAV0@ABV0@@Z:near
UNDEF:00003BD0                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A8Cp
UNDEF:00003BD0                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1085p
UNDEF:00003BD4 ; struct AString __stdcall __high UnicodeStringToMultiByte(const struct UString *, unsigned int, char, bool *)
UNDEF:00003BD4                 extrn ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z:near
UNDEF:00003BD4                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A67p
UNDEF:00003BD8 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:00003BD8                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:00003BD8                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+90Ep
UNDEF:00003BDC ; struct UString __stdcall __high NArchive::NItemName::MakeLegalName(const struct UString *)
UNDEF:00003BDC                 extrn ?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z:near
UNDEF:00003BDC                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+8E6p
UNDEF:00003BE0 ; bool NWindows::NTime::FileTimeToDosTime(NWindows::NTime *__hidden this, const struct _FILETIME *, unsigned int *)
UNDEF:00003BE0                 extrn ?FileTimeToDosTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z:near
UNDEF:00003BE0                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+8D3p
UNDEF:00003BE4 ; BOOL __stdcall FileTimeToLocalFileTime(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime)
UNDEF:00003BE4                 extrn __imp__FileTimeToLocalFileTime@8:near
UNDEF:00003BE4                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+878p
UNDEF:00003BE4                                         ; DATA XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+878r
UNDEF:00003BE8 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:00003BE8                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:00003BE8                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4D2p
UNDEF:00003BE8                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1A8p
UNDEF:00003BEC ; public: __thiscall UString::UString(void)
UNDEF:00003BEC                 extrn ??0UString@@QAE@XZ:near
UNDEF:00003BEC                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+272p
UNDEF:00003BEC                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+175p
UNDEF:00003BF0                 extrn ___security_cookie:near
UNDEF:00003BF0                                         ; DATA XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2Dr
UNDEF:00003BF0                                         ; NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)+25r ...
UNDEF:00003BF4                 extrn ___CxxFrameHandler3:near
UNDEF:00003BF4                                         ; CODE XREF: __ehhandler$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z+19j
UNDEF:00003BF4                                         ; __ehhandler$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z+16j ...
UNDEF:00003BF8 ; __fastcall __security_check_cookie(x)
UNDEF:00003BF8                 extrn @__security_check_cookie@4:near
UNDEF:00003BF8                                         ; CODE XREF: __ehhandler$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z+Fp
UNDEF:00003BF8                                         ; __ehhandler$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z+Cp ...
UNDEF:00003BFC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00003BFC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00003BFC                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1292p
UNDEF:00003BFC                                         ; NArchive::NZip::GetTime(IArchiveUpdateCallback *,int,ulong,_FILETIME &)+FDp ...
UNDEF:00003C00                 extrn __RTC_CheckEsp:near
UNDEF:00003C00                                         ; CODE XREF: NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+150p
UNDEF:00003C00                                         ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2B5p ...
UNDEF:00003C04 ; const type_info::`vftable'
UNDEF:00003C04                 extrn ??_7type_info@@6B@:near
UNDEF:00003C04                                         ; DATA XREF: .data:CSystemException `RTTI Type Descriptor'o
UNDEF:00003C08 ; void __cdecl operator delete(void *)
UNDEF:00003C08                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:00003C08                                         ; UString::~UString(void)+23p ...
UNDEF:00003C0C ; void __thiscall UString::Grow_1(UString *__hidden this)
UNDEF:00003C0C                 extrn ?Grow_1@UString@@AAEXXZ:near
UNDEF:00003C0C                                         ; CODE XREF: UString::operator+=(wchar_t)+2Fp
UNDEF:00003C10 ; int __cdecl _wcscmp(const wchar_t *Str1, const wchar_t *Str2)
UNDEF:00003C10                 extrn __imp__wcscmp:near
UNDEF:00003C10                                         ; CODE XREF: operator!=(UString const &,UString const &)+36p
UNDEF:00003C10                                         ; operator==(UString const &,wchar_t const *)+13p
UNDEF:00003C10                                         ; DATA XREF: ...
UNDEF:00003C14 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00003C14                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00003C14                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00003C18 ; void __stdcall SysFreeString(BSTR bstrString)
UNDEF:00003C18                 extrn __imp__SysFreeString@4:near
UNDEF:00003C18                                         ; CODE XREF: CMyComBSTR::~CMyComBSTR(void)+17p
UNDEF:00003C18                                         ; DATA XREF: CMyComBSTR::~CMyComBSTR(void)+17r
UNDEF:00003C1C ; public: __thiscall AString::AString(void)
UNDEF:00003C1C                 extrn ??0AString@@QAE@XZ:near
UNDEF:00003C1C                                         ; CODE XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(void)+58p
UNDEF:00003C1C                                         ; NArchive::NZip::CUpdateItem::CUpdateItem(void)+33p
UNDEF:00003C20 ; __int32 __thiscall CMethodProps::ParseParamsFromPROPVARIANT(CMethodProps *__hidden this, const struct UString *, const struct tagPROPVARIANT *)
UNDEF:00003C20                 extrn ?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z:near
UNDEF:00003C20                                         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+790p
UNDEF:00003C24 ; __int32 __stdcall PROPVARIANT_to_bool(const struct tagPROPVARIANT *, bool *)
UNDEF:00003C24                 extrn ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z:near
UNDEF:00003C24                                         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+571p
UNDEF:00003C24                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+5CBp ...
UNDEF:00003C28 ; __int32 __stdcall ParseMtProp(const struct UString *, const struct tagPROPVARIANT *, unsigned int, unsigned int *)
UNDEF:00003C28                 extrn ?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z:near
UNDEF:00003C28                                         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+502p
UNDEF:00003C2C ; void __thiscall UString::DeleteFrontal(UString *__hidden this, unsigned int)
UNDEF:00003C2C                 extrn ?DeleteFrontal@UString@@QAEXI@Z:near
UNDEF:00003C2C                                         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3B1p
UNDEF:00003C30 ; __int32 __thiscall CMethodProps::ParseParamsFromString(CMethodProps *__hidden this, const struct UString *)
UNDEF:00003C30                 extrn ?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z:near
UNDEF:00003C30                                         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+214p
UNDEF:00003C34 ; __int32 __stdcall ParsePropToUInt32(const struct UString *, const struct tagPROPVARIANT *, unsigned int *)
UNDEF:00003C34                 extrn ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z:near
UNDEF:00003C34                                         ; CODE XREF: NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+E3p
UNDEF:00003C34                                         ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+6D0p
UNDEF:00003C38 ; void __stdcall MyStringLower_Ascii(wchar_t *)
UNDEF:00003C38                 extrn ?MyStringLower_Ascii@@YGXPA_W@Z:near
UNDEF:00003C38                                         ; CODE XREF: UString::MakeLower_Ascii(void)+14p
UNDEF:00003C3C ; bool __stdcall StringsAreEqual_Ascii(const wchar_t *, const char *)
UNDEF:00003C3C                 extrn ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:near
UNDEF:00003C3C                                         ; CODE XREF: UString::IsEqualTo(char const *)+18p
UNDEF:00003C40 ; bool __stdcall IsString1PrefixedByString2(const wchar_t *, const wchar_t *)
UNDEF:00003C40                 extrn ?IsString1PrefixedByString2@@YG_NPB_W0@Z:near
UNDEF:00003C40                                         ; CODE XREF: UString::IsPrefixedBy(wchar_t const *)+18p
UNDEF:00003C44 ; int __stdcall FindCharPosInString(const wchar_t *, wchar_t)
UNDEF:00003C44                 extrn ?FindCharPosInString@@YGHPB_W_W@Z:near
UNDEF:00003C44                                         ; CODE XREF: UString::Find(wchar_t)+19p
UNDEF:00003C48 ; void __thiscall CProps::AddProp32(CProps *__hidden this, unsigned __int32, unsigned int)
UNDEF:00003C48                 extrn ?AddProp32@CProps@@QAEXKI@Z:near
UNDEF:00003C48                                         ; CODE XREF: CMethodProps::AddProp_Level(uint)+17p
UNDEF:00003C4C ; unsigned int NWindows::NSystem::GetNumberOfProcessors(NWindows::NSystem *__hidden this)
UNDEF:00003C4C                 extrn ?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ:near
UNDEF:00003C4C                                         ; CODE XREF: NArchive::NZip::CBaseProps::Init(void)+20p
UNDEF:00003C50 ; void *__cdecl operator new(unsigned int)
UNDEF:00003C50                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+8Ap
UNDEF:00003C50                                         ; CObjectVector<NArchive::NZip::CUpdateItem>::Add(NArchive::NZip::CUpdateItem const &)+3Bp ...
UNDEF:00003C54 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this, const struct NWindows::NCOM::CPropVariant *)
UNDEF:00003C54                 extrn ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:near
UNDEF:00003C54                                         ; CODE XREF: CProp::CProp(CProp const &)+31p
UNDEF:00003C58 ; public: __thiscall AString::AString(class AString const &)
UNDEF:00003C58                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:00003C58                                         ; CODE XREF: NArchive::NZip::CUpdateItem::CUpdateItem(NArchive::NZip::CUpdateItem const &)+97p
UNDEF:00003C5C ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00003C5C                 extrn _memcpy:near      ; CODE XREF: CRecordVector<void *>::Reserve(uint)+67p
UNDEF:00003C5C                                         ; CRecordVector<uchar>::ReserveOnePosition(void)+70p ...
UNDEF:00003C5C
UNDEF:00003C5C
UNDEF:00003C5C                 end