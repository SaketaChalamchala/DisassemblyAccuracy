.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 75D16FCB5F7CFC025CA358E2B20DAFA7
.rdata:00000000 ; Input CRC32 : 15E60826
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\DeltaFilter.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG66644        db 'Delta',0            ; DATA XREF: .rdata:00000018o
.rdata:00000006                 align 4
.rdata:00000008 ; struct CCodecInfo g_CodecInfo
.rdata:00000008 _g_CodecInfo    dd offset ?CreateDec@@YGPAXXZ
.rdata:00000008                                         ; DATA XREF: CRegisterCodecDelta::CRegisterCodecDelta(void)+Eo
.rdata:00000008                                         ; CreateDec(void)
.rdata:0000000C                 dd offset ?CreateEnc@@YGPAXXZ ; CreateEnc(void)
.rdata:00000010                 db    3
.rdata:00000011                 db    0
.rdata:00000012                 db    0
.rdata:00000013                 db    0
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 dd offset $SG66644      ; "Delta"
.rdata:0000001C                 db    1
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020                 db    1
.rdata:00000021                 db    0
.rdata:00000022                 db    0
.rdata:00000023                 db    0
.rdata:00000024                 db    0
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000027 _rdata          ends
.rdata:00000027
.text:00000028 ; ===========================================================================
.text:00000028
.text:00000028 ; Segment type: Pure code
.text:00000028 ; Segment permissions: Read/Execute
.text:00000028 _text           segment para public 'CODE' use32
.text:00000028                 assume cs:_text
.text:00000028                 ;org 28h
.text:00000028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000028
.text:00000028 ; =============== S U B R O U T I N E =======================================
.text:00000028
.text:00000028 ; Attributes: bp-based frame
.text:00000028
.text:00000028 ; __int32 __stdcall CDeltaEncoder::Init(CDeltaEncoder *this)
.text:00000028                 public ?Init@CDeltaEncoder@@UAGJXZ
.text:00000028 ?Init@CDeltaEncoder@@UAGJXZ proc near   ; DATA XREF: .rdata:00000AF4o
.text:00000028
.text:00000028 this            = dword ptr  8
.text:00000028
.text:00000028                 push    ebp
.text:00000029                 mov     ebp, esp
.text:0000002B                 mov     ecx, [ebp+this]
.text:0000002E                 add     ecx, 0Ch        ; this
.text:00000031                 call    ?DeltaInit@CDelta@@QAEXXZ ; CDelta::DeltaInit(void)
.text:00000036                 xor     eax, eax
.text:00000038                 cmp     ebp, esp
.text:0000003A                 call    __RTC_CheckEsp
.text:0000003F                 pop     ebp
.text:00000040                 retn    4
.text:00000040 ?Init@CDeltaEncoder@@UAGJXZ endp
.text:00000040
.text:00000040 ; ---------------------------------------------------------------------------
.text:00000043                 align 8
.text:00000048
.text:00000048 ; =============== S U B R O U T I N E =======================================
.text:00000048
.text:00000048 ; Attributes: bp-based frame
.text:00000048
.text:00000048 ; public: virtual unsigned int __stdcall CDeltaEncoder::Filter(unsigned char *, unsigned int)
.text:00000048                 public ?Filter@CDeltaEncoder@@UAGIPAEI@Z
.text:00000048 ?Filter@CDeltaEncoder@@UAGIPAEI@Z proc near ; DATA XREF: .rdata:00000AF8o
.text:00000048
.text:00000048 arg_0           = dword ptr  8
.text:00000048 arg_4           = dword ptr  0Ch
.text:00000048 arg_8           = dword ptr  10h
.text:00000048
.text:00000048                 push    ebp
.text:00000049                 mov     ebp, esp
.text:0000004B                 mov     eax, [ebp+arg_8]
.text:0000004E                 push    eax
.text:0000004F                 mov     ecx, [ebp+arg_4]
.text:00000052                 push    ecx
.text:00000053                 mov     edx, [ebp+arg_0]
.text:00000056                 mov     eax, [edx+0Ch]
.text:00000059                 push    eax
.text:0000005A                 mov     ecx, [ebp+arg_0]
.text:0000005D                 add     ecx, 10h
.text:00000060                 push    ecx
.text:00000061                 call    _Delta_Encode@16 ; Delta_Encode(x,x,x,x)
.text:00000066                 mov     eax, [ebp+arg_8]
.text:00000069                 cmp     ebp, esp
.text:0000006B                 call    __RTC_CheckEsp
.text:00000070                 pop     ebp
.text:00000071                 retn    0Ch
.text:00000071 ?Filter@CDeltaEncoder@@UAGIPAEI@Z endp
.text:00000071
.text:00000071 ; ---------------------------------------------------------------------------
.text:00000074                 align 8
.text:00000078
.text:00000078 ; =============== S U B R O U T I N E =======================================
.text:00000078
.text:00000078 ; Attributes: bp-based frame
.text:00000078
.text:00000078 ; __int32 __stdcall CDeltaEncoder::SetCoderProperties(CDeltaEncoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:00000078                 public ?SetCoderProperties@CDeltaEncoder@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:00000078 ?SetCoderProperties@CDeltaEncoder@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:00000078                                         ; DATA XREF: .rdata:00000AE0o
.text:00000078
.text:00000078 var_14          = dword ptr -14h
.text:00000078 var_10          = dword ptr -10h
.text:00000078 var_C           = dword ptr -0Ch
.text:00000078 var_8           = dword ptr -8
.text:00000078 var_4           = dword ptr -4
.text:00000078 this            = dword ptr  8
.text:00000078 arg_4           = dword ptr  0Ch
.text:00000078 arg_8           = dword ptr  10h
.text:00000078 arg_C           = dword ptr  14h
.text:00000078
.text:00000078                 push    ebp
.text:00000079                 mov     ebp, esp
.text:0000007B                 sub     esp, 14h
.text:0000007E                 mov     eax, 0CCCCCCCCh
.text:00000083                 mov     [ebp+var_14], eax
.text:00000086                 mov     [ebp+var_10], eax
.text:00000089                 mov     [ebp+var_C], eax
.text:0000008C                 mov     [ebp+var_8], eax
.text:0000008F                 mov     [ebp+var_4], eax
.text:00000092                 mov     eax, [ebp+this]
.text:00000095                 mov     ecx, [eax+8]
.text:00000098                 mov     [ebp+var_4], ecx
.text:0000009B                 mov     [ebp+var_8], 0
.text:000000A2                 jmp     short loc_AD
.text:000000A4 ; ---------------------------------------------------------------------------
.text:000000A4
.text:000000A4 loc_A4:                                 ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+5Bj
.text:000000A4                                         ; CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_12Dj
.text:000000A4                 mov     edx, [ebp+var_8]
.text:000000A7                 add     edx, 1
.text:000000AA                 mov     [ebp+var_8], edx
.text:000000AD
.text:000000AD loc_AD:                                 ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+2Aj
.text:000000AD                 mov     eax, [ebp+var_8]
.text:000000B0                 cmp     eax, [ebp+arg_C]
.text:000000B3                 jnb     short loc_132
.text:000000B5                 mov     ecx, [ebp+var_8]
.text:000000B8                 shl     ecx, 4
.text:000000BB                 add     ecx, [ebp+arg_8]
.text:000000BE                 mov     [ebp+var_C], ecx
.text:000000C1                 mov     edx, [ebp+var_8]
.text:000000C4                 mov     eax, [ebp+arg_4]
.text:000000C7                 mov     ecx, [eax+edx*4]
.text:000000CA                 mov     [ebp+var_10], ecx
.text:000000CD                 cmp     [ebp+var_10], 10h
.text:000000D1                 jb      short loc_D5
.text:000000D3                 jmp     short loc_A4
.text:000000D5 ; ---------------------------------------------------------------------------
.text:000000D5
.text:000000D5 loc_D5:                                 ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+59j
.text:000000D5                 mov     edx, [ebp+var_C]
.text:000000D8                 movzx   eax, word ptr [edx]
.text:000000DB                 cmp     eax, 13h
.text:000000DE                 jz      short loc_E7
.text:000000E0                 mov     eax, 80070057h
.text:000000E5                 jmp     short loc_13D
.text:000000E7 ; ---------------------------------------------------------------------------
.text:000000E7
.text:000000E7 loc_E7:                                 ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+66j
.text:000000E7                 mov     ecx, [ebp+var_10]
.text:000000EA                 mov     [ebp+var_14], ecx
.text:000000ED                 cmp     [ebp+var_14], 0
.text:000000F1                 jz      short loc_101
.text:000000F3                 cmp     [ebp+var_14], 0Dh
.text:000000F7                 jz      short loc_122
.text:000000F9                 cmp     [ebp+var_14], 0Fh
.text:000000FD                 jz      short loc_124
.text:000000FF                 jmp     short loc_126
.text:00000101 ; ---------------------------------------------------------------------------
.text:00000101
.text:00000101 loc_101:                                ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+79j
.text:00000101                 mov     edx, [ebp+var_C]
.text:00000104                 mov     eax, [edx+8]
.text:00000107                 mov     [ebp+var_4], eax
.text:0000010A
.text:0000010A loc_10A:                                ; DATA XREF: .rdata$r:00000738o
.text:0000010A                 cmp     [ebp+var_4], 1
.text:0000010E                 jb      short loc_119
.text:00000110
.text:00000110 loc_110:                                ; DATA XREF: .rdata$r:00000CC0o
.text:00000110                 cmp     [ebp+var_4], 100h
.text:00000117                 jbe     short loc_120
.text:00000119
.text:00000119 loc_119:                                ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+96j
.text:00000119                 mov     eax, 80070057h
.text:0000011E                 jmp     short loc_13D
.text:00000120 ; ---------------------------------------------------------------------------
.text:00000120
.text:00000120 loc_120:                                ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+9Fj
.text:00000120                 jmp     short loc_12D
.text:00000122 ; ---------------------------------------------------------------------------
.text:00000122
.text:00000122 loc_122:                                ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+7Fj
.text:00000122                 jmp     short loc_12D
.text:00000124 ; ---------------------------------------------------------------------------
.text:00000124
.text:00000124 loc_124:                                ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+85j
.text:00000124                 jmp     short loc_12D
.text:00000126 ; ---------------------------------------------------------------------------
.text:00000126
.text:00000126 loc_126:                                ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+87j
.text:00000126                 mov     eax, 80070057h
.text:0000012B                 jmp     short loc_13D
.text:0000012D ; ---------------------------------------------------------------------------
.text:0000012D
.text:0000012D loc_12D:                                ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_120j
.text:0000012D                                         ; CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_122j ...
.text:0000012D                 jmp     loc_A4
.text:00000132 ; ---------------------------------------------------------------------------
.text:00000132
.text:00000132 loc_132:                                ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+3Bj
.text:00000132                 mov     ecx, [ebp+this]
.text:00000135                 mov     edx, [ebp+var_4]
.text:00000138                 mov     [ecx+8], edx
.text:0000013B                 xor     eax, eax
.text:0000013D
.text:0000013D loc_13D:                                ; CODE XREF: CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+6Dj
.text:0000013D                                         ; CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A6j ...
.text:0000013D                 mov     esp, ebp
.text:0000013F                 pop     ebp
.text:00000140                 retn    10h
.text:00000140 ?SetCoderProperties@CDeltaEncoder@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:00000140
.text:00000140 ; ---------------------------------------------------------------------------
.text:00000143                 align 8
.text:00000148
.text:00000148 ; =============== S U B R O U T I N E =======================================
.text:00000148
.text:00000148 ; Attributes: bp-based frame
.text:00000148
.text:00000148 ; __int32 __stdcall CDeltaEncoder::WriteCoderProperties(CDeltaEncoder *this, struct ISequentialOutStream *)
.text:00000148                 public ?WriteCoderProperties@CDeltaEncoder@@UAGJPAUISequentialOutStream@@@Z
.text:00000148 ?WriteCoderProperties@CDeltaEncoder@@UAGJPAUISequentialOutStream@@@Z proc near
.text:00000148                                         ; DATA XREF: .rdata:00000ACCo
.text:00000148
.text:00000148 var_C           = dword ptr -0Ch
.text:00000148 var_8           = dword ptr -8
.text:00000148 var_4           = dword ptr -4
.text:00000148 this            = dword ptr  8
.text:00000148 arg_4           = dword ptr  0Ch
.text:00000148
.text:00000148                 push    ebp
.text:00000149                 mov     ebp, esp
.text:0000014B                 sub     esp, 0Ch
.text:0000014E                 push    esi
.text:0000014F                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000156                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000015D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000164                 mov     eax, [ebp+this]
.text:00000167                 mov     ecx, [eax+4]
.text:0000016A                 sub     ecx, 1
.text:0000016D                 mov     byte ptr [ebp+var_8+3], cl
.text:00000170                 mov     esi, esp
.text:00000172                 push    0
.text:00000174                 push    1
.text:00000176                 lea     edx, [ebp+var_8+3]
.text:00000179                 push    edx
.text:0000017A                 mov     eax, [ebp+arg_4]
.text:0000017D                 mov     ecx, [eax]
.text:0000017F                 mov     edx, [ebp+arg_4]
.text:00000182                 push    edx
.text:00000183                 mov     eax, [ecx+0Ch]
.text:00000186                 call    eax
.text:00000188                 cmp     esi, esp
.text:0000018A                 call    __RTC_CheckEsp
.text:0000018F                 push    edx
.text:00000190                 mov     ecx, ebp
.text:00000192                 push    eax
.text:00000193                 lea     edx, $LN5
.text:00000199                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000019E                 pop     eax
.text:0000019F                 pop     edx
.text:000001A0                 pop     esi
.text:000001A1                 add     esp, 0Ch
.text:000001A4                 cmp     ebp, esp
.text:000001A6                 call    __RTC_CheckEsp
.text:000001AB                 mov     esp, ebp
.text:000001AD                 pop     ebp
.text:000001AE                 retn    8
.text:000001AE ?WriteCoderProperties@CDeltaEncoder@@UAGJPAUISequentialOutStream@@@Z endp
.text:000001AE
.text:000001AE ; ---------------------------------------------------------------------------
.text:000001B1                 align 4
.text:000001B4 $LN5            dd 1                    ; DATA XREF: CDeltaEncoder::WriteCoderProperties(ISequentialOutStream *)+4Bo
.text:000001B8                 dd offset $LN4
.text:000001BC $LN4            dd 0FFFFFFFBh, 1        ; DATA XREF: .text:000001B8o
.text:000001C4                 dd offset $LN3          ; "prop"
.text:000001C8 $LN3            db 'prop',0             ; DATA XREF: .text:000001C4o
.text:000001CD                 db 0Bh dup(0CCh)
.text:000001D8
.text:000001D8 ; =============== S U B R O U T I N E =======================================
.text:000001D8
.text:000001D8 ; Attributes: bp-based frame
.text:000001D8
.text:000001D8 ; __int32 __stdcall CDeltaDecoder::Init(CDeltaDecoder *this)
.text:000001D8                 public ?Init@CDeltaDecoder@@UAGJXZ
.text:000001D8 ?Init@CDeltaDecoder@@UAGJXZ proc near   ; DATA XREF: .rdata:000004E4o
.text:000001D8
.text:000001D8 this            = dword ptr  8
.text:000001D8
.text:000001D8                 push    ebp
.text:000001D9                 mov     ebp, esp
.text:000001DB                 mov     ecx, [ebp+this]
.text:000001DE                 add     ecx, 8          ; this
.text:000001E1                 call    ?DeltaInit@CDelta@@QAEXXZ ; CDelta::DeltaInit(void)
.text:000001E6                 xor     eax, eax
.text:000001E8                 cmp     ebp, esp
.text:000001EA                 call    __RTC_CheckEsp
.text:000001EF                 pop     ebp
.text:000001F0                 retn    4
.text:000001F0 ?Init@CDeltaDecoder@@UAGJXZ endp
.text:000001F0
.text:000001F0 ; ---------------------------------------------------------------------------
.text:000001F3                 align 8
.text:000001F8
.text:000001F8 ; =============== S U B R O U T I N E =======================================
.text:000001F8
.text:000001F8 ; Attributes: bp-based frame
.text:000001F8
.text:000001F8 ; public: virtual unsigned int __stdcall CDeltaDecoder::Filter(unsigned char *, unsigned int)
.text:000001F8                 public ?Filter@CDeltaDecoder@@UAGIPAEI@Z
.text:000001F8 ?Filter@CDeltaDecoder@@UAGIPAEI@Z proc near ; DATA XREF: .rdata:000004E8o
.text:000001F8
.text:000001F8 arg_0           = dword ptr  8
.text:000001F8 arg_4           = dword ptr  0Ch
.text:000001F8 arg_8           = dword ptr  10h
.text:000001F8
.text:000001F8                 push    ebp
.text:000001F9                 mov     ebp, esp
.text:000001FB                 mov     eax, [ebp+arg_8]
.text:000001FE                 push    eax
.text:000001FF                 mov     ecx, [ebp+arg_4]
.text:00000202                 push    ecx
.text:00000203                 mov     edx, [ebp+arg_0]
.text:00000206                 mov     eax, [edx+8]
.text:00000209                 push    eax
.text:0000020A                 mov     ecx, [ebp+arg_0]
.text:0000020D                 add     ecx, 0Ch
.text:00000210                 push    ecx
.text:00000211                 call    _Delta_Decode@16 ; Delta_Decode(x,x,x,x)
.text:00000216                 mov     eax, [ebp+arg_8]
.text:00000219                 cmp     ebp, esp
.text:0000021B                 call    __RTC_CheckEsp
.text:00000220                 pop     ebp
.text:00000221                 retn    0Ch
.text:00000221 ?Filter@CDeltaDecoder@@UAGIPAEI@Z endp
.text:00000221
.text:00000221 ; ---------------------------------------------------------------------------
.text:00000224                 align 8
.text:00000228
.text:00000228 ; =============== S U B R O U T I N E =======================================
.text:00000228
.text:00000228 ; Attributes: bp-based frame
.text:00000228
.text:00000228 ; __int32 __stdcall CDeltaDecoder::SetDecoderProperties2(CDeltaDecoder *this, const unsigned __int8 *, unsigned int)
.text:00000228                 public ?SetDecoderProperties2@CDeltaDecoder@@UAGJPBEI@Z
.text:00000228 ?SetDecoderProperties2@CDeltaDecoder@@UAGJPBEI@Z proc near
.text:00000228                                         ; DATA XREF: .rdata:000004D0o
.text:00000228
.text:00000228 this            = dword ptr  8
.text:00000228 arg_4           = dword ptr  0Ch
.text:00000228 arg_8           = dword ptr  10h
.text:00000228
.text:00000228                 push    ebp
.text:00000229                 mov     ebp, esp
.text:0000022B                 cmp     [ebp+arg_8], 1
.text:0000022F                 jz      short loc_238
.text:00000231                 mov     eax, 80070057h
.text:00000236                 jmp     short loc_249
.text:00000238 ; ---------------------------------------------------------------------------
.text:00000238
.text:00000238 loc_238:                                ; CODE XREF: CDeltaDecoder::SetDecoderProperties2(uchar const *,uint)+7j
.text:00000238                 mov     eax, [ebp+arg_4]
.text:0000023B                 movzx   ecx, byte ptr [eax]
.text:0000023E                 add     ecx, 1
.text:00000241                 mov     edx, [ebp+this]
.text:00000244                 mov     [edx+4], ecx
.text:00000247                 xor     eax, eax
.text:00000249
.text:00000249 loc_249:                                ; CODE XREF: CDeltaDecoder::SetDecoderProperties2(uchar const *,uint)+Ej
.text:00000249                 pop     ebp
.text:0000024A                 retn    0Ch
.text:0000024A ?SetDecoderProperties2@CDeltaDecoder@@UAGJPBEI@Z endp
.text:0000024A
.text:0000024A ; ---------------------------------------------------------------------------
.text:0000024D                 db 0Bh dup(0CCh)
.text:00000258
.text:00000258 ; =============== S U B R O U T I N E =======================================
.text:00000258
.text:00000258 ; Attributes: bp-based frame
.text:00000258
.text:00000258 ; void * __stdcall CreateDec(void)
.text:00000258 ?CreateDec@@YGPAXXZ proc near           ; DATA XREF: .rdata:_g_CodecInfoo
.text:00000258
.text:00000258 var_18          = dword ptr -18h
.text:00000258 var_14          = dword ptr -14h
.text:00000258 var_10          = dword ptr -10h
.text:00000258 var_C           = dword ptr -0Ch
.text:00000258 var_4           = dword ptr -4
.text:00000258
.text:00000258                 push    ebp
.text:00000259                 mov     ebp, esp
.text:0000025B                 push    0FFFFFFFFh
.text:0000025D                 push    offset __ehhandler$?CreateDec@@YGPAXXZ
.text:00000262                 mov     eax, large fs:0
.text:00000268                 push    eax
.text:00000269                 sub     esp, 0Ch
.text:0000026C                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00000273                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000027A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000281                 mov     eax, dword ptr ds:___security_cookie
.text:00000286                 xor     eax, ebp
.text:00000288                 push    eax
.text:00000289                 lea     eax, [ebp+var_C]
.text:0000028C                 mov     large fs:0, eax
.text:00000292                 push    110h            ; unsigned int
.text:00000297                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000029C                 add     esp, 4
.text:0000029F                 mov     [ebp+var_14], eax
.text:000002A2                 mov     [ebp+var_4], 0
.text:000002A9                 cmp     [ebp+var_14], 0
.text:000002AD                 jz      short loc_2BC
.text:000002AF                 mov     ecx, [ebp+var_14]
.text:000002B2                 call    ??0CDeltaDecoder@@QAE@XZ ; CDeltaDecoder::CDeltaDecoder(void)
.text:000002B7                 mov     [ebp+var_18], eax
.text:000002BA                 jmp     short loc_2C3
.text:000002BC ; ---------------------------------------------------------------------------
.text:000002BC
.text:000002BC loc_2BC:                                ; CODE XREF: CreateDec(void)+55j
.text:000002BC                 mov     [ebp+var_18], 0
.text:000002C3
.text:000002C3 loc_2C3:                                ; CODE XREF: CreateDec(void)+62j
.text:000002C3                 mov     eax, [ebp+var_18]
.text:000002C6                 mov     [ebp+var_10], eax
.text:000002C9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002D0                 mov     eax, [ebp+var_10]
.text:000002D3                 mov     ecx, [ebp+var_C]
.text:000002D6                 mov     large fs:0, ecx
.text:000002DD                 pop     ecx
.text:000002DE                 add     esp, 18h
.text:000002E1                 cmp     ebp, esp
.text:000002E3                 call    __RTC_CheckEsp
.text:000002E8                 mov     esp, ebp
.text:000002EA                 pop     ebp
.text:000002EB                 retn
.text:000002EB ?CreateDec@@YGPAXXZ endp
.text:000002EB
.text:000002EB ; ---------------------------------------------------------------------------
.text:000002EC                 db 0Ch dup(0CCh)
.text:000002F8
.text:000002F8 ; =============== S U B R O U T I N E =======================================
.text:000002F8
.text:000002F8 ; Attributes: bp-based frame
.text:000002F8
.text:000002F8 ; void * __stdcall CreateEnc(void)
.text:000002F8 ?CreateEnc@@YGPAXXZ proc near           ; DATA XREF: .rdata:0000000Co
.text:000002F8
.text:000002F8 var_18          = dword ptr -18h
.text:000002F8 var_14          = dword ptr -14h
.text:000002F8 var_10          = dword ptr -10h
.text:000002F8 var_C           = dword ptr -0Ch
.text:000002F8 var_4           = dword ptr -4
.text:000002F8
.text:000002F8                 push    ebp
.text:000002F9                 mov     ebp, esp
.text:000002FB                 push    0FFFFFFFFh
.text:000002FD                 push    offset __ehhandler$?CreateEnc@@YGPAXXZ
.text:00000302                 mov     eax, large fs:0
.text:00000308                 push    eax
.text:00000309                 sub     esp, 0Ch
.text:0000030C                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00000313                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000031A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000321                 mov     eax, dword ptr ds:___security_cookie
.text:00000326                 xor     eax, ebp
.text:00000328                 push    eax
.text:00000329                 lea     eax, [ebp+var_C]
.text:0000032C                 mov     large fs:0, eax
.text:00000332                 push    114h            ; unsigned int
.text:00000337                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000033C                 add     esp, 4
.text:0000033F                 mov     [ebp+var_14], eax
.text:00000342                 mov     [ebp+var_4], 0
.text:00000349                 cmp     [ebp+var_14], 0
.text:0000034D                 jz      short loc_35C
.text:0000034F                 mov     ecx, [ebp+var_14]
.text:00000352                 call    ??0CDeltaEncoder@@QAE@XZ ; CDeltaEncoder::CDeltaEncoder(void)
.text:00000357                 mov     [ebp+var_18], eax
.text:0000035A                 jmp     short loc_363
.text:0000035C ; ---------------------------------------------------------------------------
.text:0000035C
.text:0000035C loc_35C:                                ; CODE XREF: CreateEnc(void)+55j
.text:0000035C                 mov     [ebp+var_18], 0
.text:00000363
.text:00000363 loc_363:                                ; CODE XREF: CreateEnc(void)+62j
.text:00000363                 mov     eax, [ebp+var_18]
.text:00000366                 mov     [ebp+var_10], eax
.text:00000369                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000370                 mov     eax, [ebp+var_10]
.text:00000373                 mov     ecx, [ebp+var_C]
.text:00000376                 mov     large fs:0, ecx
.text:0000037D                 pop     ecx
.text:0000037E                 add     esp, 18h
.text:00000381                 cmp     ebp, esp
.text:00000383                 call    __RTC_CheckEsp
.text:00000388                 mov     esp, ebp
.text:0000038A                 pop     ebp
.text:0000038B                 retn
.text:0000038B ?CreateEnc@@YGPAXXZ endp
.text:0000038B
.text:0000038B _text           ends
.text:0000038B
.rtc$TMZ:0000038C ; ===========================================================================
.rtc$TMZ:0000038C
.rtc$TMZ:0000038C ; Segment type: Pure data
.rtc$TMZ:0000038C ; Segment permissions: Read
.rtc$TMZ:0000038C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000038C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000038C                 ;org 38Ch
.rtc$TMZ:0000038C ; COMDAT (pick any)
.rtc$TMZ:0000038C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000038C _rtc$TMZ        ends
.rtc$TMZ:0000038C
.rtc$IMZ:00000390 ; ===========================================================================
.rtc$IMZ:00000390
.rtc$IMZ:00000390 ; Segment type: Pure data
.rtc$IMZ:00000390 ; Segment permissions: Read
.rtc$IMZ:00000390 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000390                 assume cs:_rtc$IMZ
.rtc$IMZ:00000390                 ;org 390h
.rtc$IMZ:00000390 ; COMDAT (pick any)
.rtc$IMZ:00000390 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000390 _rtc$IMZ        ends
.rtc$IMZ:00000390
.text:00000394 ; ===========================================================================
.text:00000394
.text:00000394 ; Segment type: Pure code
.text:00000394 ; Segment permissions: Read/Execute
.text:00000394 _text           segment para public 'CODE' use32
.text:00000394                 assume cs:_text
.text:00000394                 ;org 394h
.text:00000394 ; COMDAT (pick any)
.text:00000394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000394
.text:00000394 ; =============== S U B R O U T I N E =======================================
.text:00000394
.text:00000394 ; Attributes: bp-based frame
.text:00000394
.text:00000394 ; void __thiscall CDelta::DeltaInit(CDelta *__hidden this)
.text:00000394                 public ?DeltaInit@CDelta@@QAEXXZ
.text:00000394 ?DeltaInit@CDelta@@QAEXXZ proc near     ; CODE XREF: CDeltaEncoder::Init(void)+9p
.text:00000394                                         ; CDeltaDecoder::Init(void)+9p
.text:00000394
.text:00000394 var_4           = dword ptr -4
.text:00000394
.text:00000394                 push    ebp
.text:00000395                 mov     ebp, esp
.text:00000397                 push    ecx
.text:00000398                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000039F                 mov     [ebp+var_4], ecx
.text:000003A2                 mov     eax, [ebp+var_4]
.text:000003A5                 add     eax, 4
.text:000003A8                 push    eax
.text:000003A9                 call    _Delta_Init@4   ; Delta_Init(x)
.text:000003AE                 add     esp, 4
.text:000003B1                 cmp     ebp, esp
.text:000003B3                 call    __RTC_CheckEsp
.text:000003B8                 mov     esp, ebp
.text:000003BA                 pop     ebp
.text:000003BB                 retn
.text:000003BB ?DeltaInit@CDelta@@QAEXXZ endp
.text:000003BB
.text:000003BB _text           ends
.text:000003BB
.text$x:000003BC ; ===========================================================================
.text$x:000003BC
.text$x:000003BC ; Segment type: Pure code
.text$x:000003BC ; Segment permissions: Read/Execute
.text$x:000003BC _text$x         segment para public 'CODE' use32
.text$x:000003BC                 assume cs:_text$x
.text$x:000003BC                 ;org 3BCh
.text$x:000003BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000003BC
.text$x:000003BC ; =============== S U B R O U T I N E =======================================
.text$x:000003BC
.text$x:000003BC
.text$x:000003BC __unwindfunclet$?CreateDec@@YGPAXXZ$0 proc near
.text$x:000003BC                                         ; DATA XREF: .xdata$x:0000040Co
.text$x:000003BC                 mov     eax, [ebp-14h]
.text$x:000003BF                 push    eax             ; void *
.text$x:000003C0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000003C5                 pop     ecx
.text$x:000003C6                 retn
.text$x:000003C6 __unwindfunclet$?CreateDec@@YGPAXXZ$0 endp
.text$x:000003C6
.text$x:000003C7
.text$x:000003C7 ; =============== S U B R O U T I N E =======================================
.text$x:000003C7
.text$x:000003C7
.text$x:000003C7 __ehhandler$?CreateDec@@YGPAXXZ proc near ; DATA XREF: CreateDec(void)+5o
.text$x:000003C7
.text$x:000003C7 arg_4           = dword ptr  8
.text$x:000003C7
.text$x:000003C7                 mov     edx, [esp+arg_4]
.text$x:000003CB                 lea     eax, [edx+0Ch]
.text$x:000003CE                 mov     ecx, [edx-10h]
.text$x:000003D1                 xor     ecx, eax
.text$x:000003D3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000003D8                 mov     eax, offset __ehfuncinfo$?CreateDec@@YGPAXXZ
.text$x:000003DD                 jmp     ___CxxFrameHandler3
.text$x:000003DD __ehhandler$?CreateDec@@YGPAXXZ endp
.text$x:000003DD
.text$x:000003E2
.text$x:000003E2 ; =============== S U B R O U T I N E =======================================
.text$x:000003E2
.text$x:000003E2
.text$x:000003E2 __unwindfunclet$?CreateEnc@@YGPAXXZ$0 proc near
.text$x:000003E2                                         ; DATA XREF: .xdata$x:00000438o
.text$x:000003E2                 mov     eax, [ebp-14h]
.text$x:000003E5                 push    eax             ; void *
.text$x:000003E6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000003EB                 pop     ecx
.text$x:000003EC                 retn
.text$x:000003EC __unwindfunclet$?CreateEnc@@YGPAXXZ$0 endp
.text$x:000003EC
.text$x:000003ED
.text$x:000003ED ; =============== S U B R O U T I N E =======================================
.text$x:000003ED
.text$x:000003ED
.text$x:000003ED __ehhandler$?CreateEnc@@YGPAXXZ proc near ; DATA XREF: CreateEnc(void)+5o
.text$x:000003ED
.text$x:000003ED arg_4           = dword ptr  8
.text$x:000003ED
.text$x:000003ED                 mov     edx, [esp+arg_4]
.text$x:000003F1                 lea     eax, [edx+0Ch]
.text$x:000003F4                 mov     ecx, [edx-10h]
.text$x:000003F7                 xor     ecx, eax
.text$x:000003F9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000003FE                 mov     eax, offset __ehfuncinfo$?CreateEnc@@YGPAXXZ
.text$x:00000403                 jmp     ___CxxFrameHandler3
.text$x:00000403 __ehhandler$?CreateEnc@@YGPAXXZ endp
.text$x:00000403
.text$x:00000403 _text$x         ends
.text$x:00000403
.xdata$x:00000408 ; ===========================================================================
.xdata$x:00000408
.xdata$x:00000408 ; Segment type: Pure data
.xdata$x:00000408 ; Segment permissions: Read
.xdata$x:00000408 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000408                 assume cs:_xdata$x
.xdata$x:00000408                 ;org 408h
.xdata$x:00000408 __unwindtable$?CreateDec@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:00000418o
.xdata$x:00000409                 db 0FFh
.xdata$x:0000040A                 db 0FFh
.xdata$x:0000040B                 db 0FFh
.xdata$x:0000040C                 dd offset __unwindfunclet$?CreateDec@@YGPAXXZ$0
.xdata$x:00000410 __ehfuncinfo$?CreateDec@@YGPAXXZ db  22h ; "
.xdata$x:00000410                                         ; DATA XREF: __ehhandler$?CreateDec@@YGPAXXZ+11o
.xdata$x:00000411                 db    5
.xdata$x:00000412                 db  93h ; ô
.xdata$x:00000413                 db  19h
.xdata$x:00000414                 db    1
.xdata$x:00000415                 db    0
.xdata$x:00000416                 db    0
.xdata$x:00000417                 db    0
.xdata$x:00000418                 dd offset __unwindtable$?CreateDec@@YGPAXXZ
.xdata$x:0000041C                 db    0
.xdata$x:0000041D                 db    0
.xdata$x:0000041E                 db    0
.xdata$x:0000041F                 db    0
.xdata$x:00000420                 db    0
.xdata$x:00000421                 db    0
.xdata$x:00000422                 db    0
.xdata$x:00000423                 db    0
.xdata$x:00000424                 db    0
.xdata$x:00000425                 db    0
.xdata$x:00000426                 db    0
.xdata$x:00000427                 db    0
.xdata$x:00000428                 db    0
.xdata$x:00000429                 db    0
.xdata$x:0000042A                 db    0
.xdata$x:0000042B                 db    0
.xdata$x:0000042C                 db    0
.xdata$x:0000042D                 db    0
.xdata$x:0000042E                 db    0
.xdata$x:0000042F                 db    0
.xdata$x:00000430                 db    1
.xdata$x:00000431                 db    0
.xdata$x:00000432                 db    0
.xdata$x:00000433                 db    0
.xdata$x:00000434 __unwindtable$?CreateEnc@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:00000444o
.xdata$x:00000435                 db 0FFh
.xdata$x:00000436                 db 0FFh
.xdata$x:00000437                 db 0FFh
.xdata$x:00000438                 dd offset __unwindfunclet$?CreateEnc@@YGPAXXZ$0
.xdata$x:0000043C __ehfuncinfo$?CreateEnc@@YGPAXXZ db  22h ; "
.xdata$x:0000043C                                         ; DATA XREF: __ehhandler$?CreateEnc@@YGPAXXZ+11o
.xdata$x:0000043D                 db    5
.xdata$x:0000043E                 db  93h ; ô
.xdata$x:0000043F                 db  19h
.xdata$x:00000440                 db    1
.xdata$x:00000441                 db    0
.xdata$x:00000442                 db    0
.xdata$x:00000443                 db    0
.xdata$x:00000444                 dd offset __unwindtable$?CreateEnc@@YGPAXXZ
.xdata$x:00000448                 db    0
.xdata$x:00000449                 db    0
.xdata$x:0000044A                 db    0
.xdata$x:0000044B                 db    0
.xdata$x:0000044C                 db    0
.xdata$x:0000044D                 db    0
.xdata$x:0000044E                 db    0
.xdata$x:0000044F                 db    0
.xdata$x:00000450                 db    0
.xdata$x:00000451                 db    0
.xdata$x:00000452                 db    0
.xdata$x:00000453                 db    0
.xdata$x:00000454                 db    0
.xdata$x:00000455                 db    0
.xdata$x:00000456                 db    0
.xdata$x:00000457                 db    0
.xdata$x:00000458                 db    0
.xdata$x:00000459                 db    0
.xdata$x:0000045A                 db    0
.xdata$x:0000045B                 db    0
.xdata$x:0000045C                 db    1
.xdata$x:0000045D                 db    0
.xdata$x:0000045E                 db    0
.xdata$x:0000045F                 db    0
.xdata$x:0000045F _xdata$x        ends
.xdata$x:0000045F
.text:00000460 ; ===========================================================================
.text:00000460
.text:00000460 ; Segment type: Pure code
.text:00000460 ; Segment permissions: Read/Execute
.text:00000460 _text           segment para public 'CODE' use32
.text:00000460                 assume cs:_text
.text:00000460                 ;org 460h
.text:00000460 ; COMDAT (pick any)
.text:00000460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000460
.text:00000460 ; =============== S U B R O U T I N E =======================================
.text:00000460
.text:00000460 ; Attributes: bp-based frame
.text:00000460
.text:00000460 ; public: __thiscall CDeltaDecoder::CDeltaDecoder(void)
.text:00000460                 public ??0CDeltaDecoder@@QAE@XZ
.text:00000460 ??0CDeltaDecoder@@QAE@XZ proc near      ; CODE XREF: CreateDec(void)+5Ap
.text:00000460
.text:00000460 var_4           = dword ptr -4
.text:00000460
.text:00000460                 push    ebp
.text:00000461                 mov     ebp, esp
.text:00000463                 push    ecx
.text:00000464                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000046B                 mov     [ebp+var_4], ecx
.text:0000046E                 mov     ecx, [ebp+var_4] ; this
.text:00000471                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:00000476                 mov     ecx, [ebp+var_4]
.text:00000479                 add     ecx, 4          ; this
.text:0000047C                 call    ??0ICompressSetDecoderProperties2@@QAE@XZ ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)
.text:00000481                 mov     ecx, [ebp+var_4]
.text:00000484                 add     ecx, 8          ; this
.text:00000487                 call    ??0CDelta@@QAE@XZ ; CDelta::CDelta(void)
.text:0000048C                 mov     ecx, [ebp+var_4]
.text:0000048F                 add     ecx, 10Ch       ; this
.text:00000495                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000049A                 mov     eax, [ebp+var_4]
.text:0000049D                 mov     dword ptr [eax], offset ??_7CDeltaDecoder@@6BICompressFilter@@@ ; const CDeltaDecoder::`vftable'{for `ICompressFilter'}
.text:000004A3                 mov     ecx, [ebp+var_4]
.text:000004A6                 mov     dword ptr [ecx+4], offset ??_7CDeltaDecoder@@6BICompressSetDecoderProperties2@@@ ; const CDeltaDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.text:000004AD                 mov     eax, [ebp+var_4]
.text:000004B0                 add     esp, 4
.text:000004B3                 cmp     ebp, esp
.text:000004B5                 call    __RTC_CheckEsp
.text:000004BA                 mov     esp, ebp
.text:000004BC                 pop     ebp
.text:000004BD                 retn
.text:000004BD ??0CDeltaDecoder@@QAE@XZ endp
.text:000004BD
.text:000004BD ; ---------------------------------------------------------------------------
.text:000004BE                 align 10h
.text:000004BE _text           ends
.text:000004BE
.rdata:000004C0 ; ===========================================================================
.rdata:000004C0
.rdata:000004C0 ; Segment type: Pure data
.rdata:000004C0 ; Segment permissions: Read
.rdata:000004C0 _rdata          segment dword public 'DATA' use32
.rdata:000004C0                 assume cs:_rdata
.rdata:000004C0                 ;org 4C0h
.rdata:000004C0 ; COMDAT (pick largest)
.rdata:000004C0                 dd offset ??_R4CDeltaDecoder@@6BICompressSetDecoderProperties2@@@ ; const CDeltaDecoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata:000004C4                 public ??_7CDeltaDecoder@@6BICompressSetDecoderProperties2@@@
.rdata:000004C4 ; const CDeltaDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.rdata:000004C4 ??_7CDeltaDecoder@@6BICompressSetDecoderProperties2@@@ dd offset ?QueryInterface@CDeltaDecoder@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000004C4                                         ; DATA XREF: CDeltaDecoder::CDeltaDecoder(void)+46o
.rdata:000004C4                                         ; [thunk]:CDeltaDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000004C8                 dd offset ?AddRef@CDeltaDecoder@@W3AGKXZ ; [thunk]:CDeltaDecoder::AddRef`adjustor{4}' (void)
.rdata:000004CC                 dd offset ?Release@CDeltaDecoder@@W3AGKXZ ; [thunk]:CDeltaDecoder::Release`adjustor{4}' (void)
.rdata:000004D0                 dd offset ?SetDecoderProperties2@CDeltaDecoder@@UAGJPBEI@Z ; CDeltaDecoder::SetDecoderProperties2(uchar const *,uint)
.rdata:000004D0 _rdata          ends
.rdata:000004D0
.rdata:000004D4 ; ===========================================================================
.rdata:000004D4
.rdata:000004D4 ; Segment type: Pure data
.rdata:000004D4 ; Segment permissions: Read
.rdata:000004D4 _rdata          segment dword public 'DATA' use32
.rdata:000004D4                 assume cs:_rdata
.rdata:000004D4                 ;org 4D4h
.rdata:000004D4 ; COMDAT (pick largest)
.rdata:000004D4                 dd offset ??_R4CDeltaDecoder@@6BICompressFilter@@@ ; const CDeltaDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:000004D8                 public ??_7CDeltaDecoder@@6BICompressFilter@@@
.rdata:000004D8 ; const CDeltaDecoder::`vftable'{for `ICompressFilter'}
.rdata:000004D8 ??_7CDeltaDecoder@@6BICompressFilter@@@ dd offset ?QueryInterface@CDeltaDecoder@@UAGJABU_GUID@@PAPAX@Z
.rdata:000004D8                                         ; DATA XREF: CDeltaDecoder::CDeltaDecoder(void)+3Do
.rdata:000004D8                                         ; CDeltaDecoder::QueryInterface(_GUID const &,void * *)
.rdata:000004DC                 dd offset ?AddRef@CDeltaDecoder@@UAGKXZ ; CDeltaDecoder::AddRef(void)
.rdata:000004E0                 dd offset ?Release@CDeltaDecoder@@UAGKXZ ; CDeltaDecoder::Release(void)
.rdata:000004E4                 dd offset ?Init@CDeltaDecoder@@UAGJXZ ; CDeltaDecoder::Init(void)
.rdata:000004E8                 dd offset ?Filter@CDeltaDecoder@@UAGIPAEI@Z ; CDeltaDecoder::Filter(uchar *,uint)
.rdata:000004E8 _rdata          ends
.rdata:000004E8
.rdata$r:000004EC ; ===========================================================================
.rdata$r:000004EC
.rdata$r:000004EC ; Segment type: Pure data
.rdata$r:000004EC ; Segment permissions: Read
.rdata$r:000004EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004EC                 assume cs:_rdata$r
.rdata$r:000004EC                 ;org 4ECh
.rdata$r:000004EC ; COMDAT (pick any)
.rdata$r:000004EC                 public ??_R4CDeltaDecoder@@6BICompressFilter@@@
.rdata$r:000004EC ; const CDeltaDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:000004EC ??_R4CDeltaDecoder@@6BICompressFilter@@@ db    0
.rdata$r:000004EC                                         ; DATA XREF: .rdata:000004D4o
.rdata$r:000004ED                 db    0
.rdata$r:000004EE                 db    0
.rdata$r:000004EF                 db    0
.rdata$r:000004F0                 db    0
.rdata$r:000004F1                 db    0
.rdata$r:000004F2                 db    0
.rdata$r:000004F3                 db    0
.rdata$r:000004F4                 db    0
.rdata$r:000004F5                 db    0
.rdata$r:000004F6                 db    0
.rdata$r:000004F7                 db    0
.rdata$r:000004F8                 dd offset ??_R0?AVCDeltaDecoder@@@8 ; CDeltaDecoder `RTTI Type Descriptor'
.rdata$r:000004FC                 dd offset ??_R3CDeltaDecoder@@8 ; CDeltaDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004FC _rdata$r        ends
.rdata$r:000004FC
.data:00000500 ; ===========================================================================
.data:00000500
.data:00000500 ; Segment type: Pure data
.data:00000500 ; Segment permissions: Read/Write
.data:00000500 _data           segment dword public 'DATA' use32
.data:00000500                 assume cs:_data
.data:00000500                 ;org 500h
.data:00000500 ; COMDAT (pick any)
.data:00000500                 public ??_R0?AVCDeltaDecoder@@@8
.data:00000500 ; class CDeltaDecoder `RTTI Type Descriptor'
.data:00000500 ??_R0?AVCDeltaDecoder@@@8 dd offset ??_7type_info@@6B@
.data:00000500                                         ; DATA XREF: .rdata$r:000004F8o
.data:00000500                                         ; .rdata$r:CDeltaDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000500                                         ; const type_info::`vftable'
.data:00000504                 align 8
.data:00000508 a_?avcdeltadeco db '.?AVCDeltaDecoder@@',0
.data:00000508 _data           ends
.data:00000508
.rdata$r:0000051C ; ===========================================================================
.rdata$r:0000051C
.rdata$r:0000051C ; Segment type: Pure data
.rdata$r:0000051C ; Segment permissions: Read
.rdata$r:0000051C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000051C                 assume cs:_rdata$r
.rdata$r:0000051C                 ;org 51Ch
.rdata$r:0000051C ; COMDAT (pick any)
.rdata$r:0000051C                 public ??_R3CDeltaDecoder@@8
.rdata$r:0000051C ; CDeltaDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000051C ??_R3CDeltaDecoder@@8 db    0           ; DATA XREF: .rdata$r:000004FCo
.rdata$r:0000051C                                         ; .rdata$r:00000564o ...
.rdata$r:0000051D                 db    0
.rdata$r:0000051E                 db    0
.rdata$r:0000051F                 db    0
.rdata$r:00000520                 db    1
.rdata$r:00000521                 db    0
.rdata$r:00000522                 db    0
.rdata$r:00000523                 db    0
.rdata$r:00000524                 db    7
.rdata$r:00000525                 db    0
.rdata$r:00000526                 db    0
.rdata$r:00000527                 db    0
.rdata$r:00000528                 dd offset ??_R2CDeltaDecoder@@8 ; CDeltaDecoder::`RTTI Base Class Array'
.rdata$r:00000528 _rdata$r        ends
.rdata$r:00000528
.rdata$r:0000052C ; ===========================================================================
.rdata$r:0000052C
.rdata$r:0000052C ; Segment type: Pure data
.rdata$r:0000052C ; Segment permissions: Read
.rdata$r:0000052C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000052C                 assume cs:_rdata$r
.rdata$r:0000052C                 ;org 52Ch
.rdata$r:0000052C ; COMDAT (pick any)
.rdata$r:0000052C                 public ??_R2CDeltaDecoder@@8
.rdata$r:0000052C ; CDeltaDecoder::`RTTI Base Class Array'
.rdata$r:0000052C ??_R2CDeltaDecoder@@8 dd offset ??_R1A@?0A@EA@CDeltaDecoder@@8
.rdata$r:0000052C                                         ; DATA XREF: .rdata$r:00000528o
.rdata$r:0000052C                                         ; CDeltaDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000530                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000534                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000538                 dd offset ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000053C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000540                 dd offset ??_R17?0A@EN@CDelta@@8 ; CDelta::`RTTI Base Class Descriptor at (8,-1,0,77)'
.rdata$r:00000544                 dd offset ??_R1BAM@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (268,-1,0,64)'
.rdata$r:00000548                 db    0
.rdata$r:00000549                 align 4
.rdata$r:00000549 _rdata$r        ends
.rdata$r:00000549
.rdata$r:0000054C ; ===========================================================================
.rdata$r:0000054C
.rdata$r:0000054C ; Segment type: Pure data
.rdata$r:0000054C ; Segment permissions: Read
.rdata$r:0000054C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000054C                 assume cs:_rdata$r
.rdata$r:0000054C                 ;org 54Ch
.rdata$r:0000054C ; COMDAT (pick any)
.rdata$r:0000054C                 public ??_R1A@?0A@EA@CDeltaDecoder@@8
.rdata$r:0000054C ; CDeltaDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000054C ??_R1A@?0A@EA@CDeltaDecoder@@8 dd offset ??_R0?AVCDeltaDecoder@@@8
.rdata$r:0000054C                                         ; DATA XREF: .rdata$r:CDeltaDecoder::`RTTI Base Class Array'o
.rdata$r:0000054C                                         ; CDeltaDecoder `RTTI Type Descriptor'
.rdata$r:00000550                 db    6
.rdata$r:00000551                 db    0
.rdata$r:00000552                 db    0
.rdata$r:00000553                 db    0
.rdata$r:00000554                 db    0
.rdata$r:00000555                 db    0
.rdata$r:00000556                 db    0
.rdata$r:00000557                 db    0
.rdata$r:00000558                 db 0FFh
.rdata$r:00000559                 db 0FFh
.rdata$r:0000055A                 db 0FFh
.rdata$r:0000055B                 db 0FFh
.rdata$r:0000055C                 db    0
.rdata$r:0000055D                 db    0
.rdata$r:0000055E                 db    0
.rdata$r:0000055F                 db    0
.rdata$r:00000560                 db  40h ; @
.rdata$r:00000561                 db    0
.rdata$r:00000562                 db    0
.rdata$r:00000563                 db    0
.rdata$r:00000564                 dd offset ??_R3CDeltaDecoder@@8 ; CDeltaDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000564 _rdata$r        ends
.rdata$r:00000564
.rdata$r:00000568 ; ===========================================================================
.rdata$r:00000568
.rdata$r:00000568 ; Segment type: Pure data
.rdata$r:00000568 ; Segment permissions: Read
.rdata$r:00000568 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000568                 assume cs:_rdata$r
.rdata$r:00000568                 ;org 568h
.rdata$r:00000568 ; COMDAT (pick any)
.rdata$r:00000568                 public ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00000568 ; ICompressFilter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000568 ??_R1A@?0A@EA@ICompressFilter@@8 dd offset ??_R0?AUICompressFilter@@@8
.rdata$r:00000568                                         ; DATA XREF: .rdata$r:00000530o
.rdata$r:00000568                                         ; .rdata$r:ICompressFilter::`RTTI Base Class Array'o ...
.rdata$r:00000568                                         ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:0000056C                 db    1
.rdata$r:0000056D                 db    0
.rdata$r:0000056E                 db    0
.rdata$r:0000056F                 db    0
.rdata$r:00000570                 db    0
.rdata$r:00000571                 db    0
.rdata$r:00000572                 db    0
.rdata$r:00000573                 db    0
.rdata$r:00000574                 db 0FFh
.rdata$r:00000575                 db 0FFh
.rdata$r:00000576                 db 0FFh
.rdata$r:00000577                 db 0FFh
.rdata$r:00000578                 db    0
.rdata$r:00000579                 db    0
.rdata$r:0000057A                 db    0
.rdata$r:0000057B                 db    0
.rdata$r:0000057C                 db  40h ; @
.rdata$r:0000057D                 db    0
.rdata$r:0000057E                 db    0
.rdata$r:0000057F                 db    0
.rdata$r:00000580                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000580 _rdata$r        ends
.rdata$r:00000580
.data:00000584 ; ===========================================================================
.data:00000584
.data:00000584 ; Segment type: Pure data
.data:00000584 ; Segment permissions: Read/Write
.data:00000584 _data           segment dword public 'DATA' use32
.data:00000584                 assume cs:_data
.data:00000584                 ;org 584h
.data:00000584 ; COMDAT (pick any)
.data:00000584                 public ??_R0?AUICompressFilter@@@8
.data:00000584 ; struct ICompressFilter `RTTI Type Descriptor'
.data:00000584 ??_R0?AUICompressFilter@@@8 dd offset ??_7type_info@@6B@
.data:00000584                                         ; DATA XREF: .rdata$r:ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000584                                         ; .rdata$r:000009D0o
.data:00000584                                         ; const type_info::`vftable'
.data:00000588                 db    0
.data:00000589                 db    0
.data:0000058A                 db    0
.data:0000058B                 db    0
.data:0000058C                 db  2Eh ; .
.data:0000058D                 db  3Fh ; ?
.data:0000058E                 db  41h ; A
.data:0000058F                 db  55h ; U
.data:00000590                 db  49h ; I
.data:00000591                 db  43h ; C
.data:00000592                 db  6Fh ; o
.data:00000593                 db  6Dh ; m
.data:00000594                 db  70h ; p
.data:00000595                 db  72h ; r
.data:00000596                 db  65h ; e
.data:00000597                 db  73h ; s
.data:00000598                 db  73h ; s
.data:00000599                 db  46h ; F
.data:0000059A                 db  69h ; i
.data:0000059B                 db  6Ch ; l
.data:0000059C                 db  74h ; t
.data:0000059D                 db  65h ; e
.data:0000059E                 db  72h ; r
.data:0000059F                 db  40h ; @
.data:000005A0                 db  40h ; @
.data:000005A1                 db    0
.data:000005A2                 align 4
.data:000005A2 _data           ends
.data:000005A2
.rdata$r:000005A4 ; ===========================================================================
.rdata$r:000005A4
.rdata$r:000005A4 ; Segment type: Pure data
.rdata$r:000005A4 ; Segment permissions: Read
.rdata$r:000005A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005A4                 assume cs:_rdata$r
.rdata$r:000005A4                 ;org 5A4h
.rdata$r:000005A4 ; COMDAT (pick any)
.rdata$r:000005A4                 public ??_R3ICompressFilter@@8
.rdata$r:000005A4 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005A4 ??_R3ICompressFilter@@8 db    0         ; DATA XREF: .rdata$r:00000580o
.rdata$r:000005A4                                         ; .rdata$r:000009D4o
.rdata$r:000005A5                 db    0
.rdata$r:000005A6                 db    0
.rdata$r:000005A7                 db    0
.rdata$r:000005A8                 db    0
.rdata$r:000005A9                 db    0
.rdata$r:000005AA                 db    0
.rdata$r:000005AB                 db    0
.rdata$r:000005AC                 db    2
.rdata$r:000005AD                 db    0
.rdata$r:000005AE                 db    0
.rdata$r:000005AF                 db    0
.rdata$r:000005B0                 dd offset ??_R2ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:000005B0 _rdata$r        ends
.rdata$r:000005B0
.rdata$r:000005B4 ; ===========================================================================
.rdata$r:000005B4
.rdata$r:000005B4 ; Segment type: Pure data
.rdata$r:000005B4 ; Segment permissions: Read
.rdata$r:000005B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005B4                 assume cs:_rdata$r
.rdata$r:000005B4                 ;org 5B4h
.rdata$r:000005B4 ; COMDAT (pick any)
.rdata$r:000005B4                 public ??_R2ICompressFilter@@8
.rdata$r:000005B4 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:000005B4 ??_R2ICompressFilter@@8 dd offset ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:000005B4                                         ; DATA XREF: .rdata$r:000005B0o
.rdata$r:000005B4                                         ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000005B8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000005BC                 db    0
.rdata$r:000005BD                 align 10h
.rdata$r:000005BD _rdata$r        ends
.rdata$r:000005BD
.rdata$r:000005C0 ; ===========================================================================
.rdata$r:000005C0
.rdata$r:000005C0 ; Segment type: Pure data
.rdata$r:000005C0 ; Segment permissions: Read
.rdata$r:000005C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005C0                 assume cs:_rdata$r
.rdata$r:000005C0                 ;org 5C0h
.rdata$r:000005C0 ; COMDAT (pick any)
.rdata$r:000005C0                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000005C0 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000005C0 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000005C0                                         ; DATA XREF: .rdata$r:000005B8o
.rdata$r:000005C0                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:000005C0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000005C4                 db    0
.rdata$r:000005C5                 db    0
.rdata$r:000005C6                 db    0
.rdata$r:000005C7                 db    0
.rdata$r:000005C8                 db    0
.rdata$r:000005C9                 db    0
.rdata$r:000005CA                 db    0
.rdata$r:000005CB                 db    0
.rdata$r:000005CC                 db 0FFh
.rdata$r:000005CD                 db 0FFh
.rdata$r:000005CE                 db 0FFh
.rdata$r:000005CF                 db 0FFh
.rdata$r:000005D0                 db    0
.rdata$r:000005D1                 db    0
.rdata$r:000005D2                 db    0
.rdata$r:000005D3                 db    0
.rdata$r:000005D4                 db  40h ; @
.rdata$r:000005D5                 db    0
.rdata$r:000005D6                 db    0
.rdata$r:000005D7                 db    0
.rdata$r:000005D8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005D8 _rdata$r        ends
.rdata$r:000005D8
.data:000005DC ; ===========================================================================
.data:000005DC
.data:000005DC ; Segment type: Pure data
.data:000005DC ; Segment permissions: Read/Write
.data:000005DC _data           segment dword public 'DATA' use32
.data:000005DC                 assume cs:_data
.data:000005DC                 ;org 5DCh
.data:000005DC ; COMDAT (pick any)
.data:000005DC                 public ??_R0?AUIUnknown@@@8
.data:000005DC ; struct IUnknown `RTTI Type Descriptor'
.data:000005DC ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000005DC                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000005DC                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:000005DC                                         ; const type_info::`vftable'
.data:000005E0                 db    0
.data:000005E1                 db    0
.data:000005E2                 db    0
.data:000005E3                 db    0
.data:000005E4                 db  2Eh ; .
.data:000005E5                 db  3Fh ; ?
.data:000005E6                 db  41h ; A
.data:000005E7                 db  55h ; U
.data:000005E8                 db  49h ; I
.data:000005E9                 db  55h ; U
.data:000005EA                 db  6Eh ; n
.data:000005EB                 db  6Bh ; k
.data:000005EC                 db  6Eh ; n
.data:000005ED                 db  6Fh ; o
.data:000005EE                 db  77h ; w
.data:000005EF                 db  6Eh ; n
.data:000005F0                 db  40h ; @
.data:000005F1                 db  40h ; @
.data:000005F2                 db    0
.data:000005F3                 align 4
.data:000005F3 _data           ends
.data:000005F3
.rdata$r:000005F4 ; ===========================================================================
.rdata$r:000005F4
.rdata$r:000005F4 ; Segment type: Pure data
.rdata$r:000005F4 ; Segment permissions: Read
.rdata$r:000005F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005F4                 assume cs:_rdata$r
.rdata$r:000005F4                 ;org 5F4h
.rdata$r:000005F4 ; COMDAT (pick any)
.rdata$r:000005F4                 public ??_R3IUnknown@@8
.rdata$r:000005F4 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005F4 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000005D8o
.rdata$r:000005F4                                         ; .rdata$r:00000624o ...
.rdata$r:000005F5                 db    0
.rdata$r:000005F6                 db    0
.rdata$r:000005F7                 db    0
.rdata$r:000005F8                 db    0
.rdata$r:000005F9                 db    0
.rdata$r:000005FA                 db    0
.rdata$r:000005FB                 db    0
.rdata$r:000005FC                 db    1
.rdata$r:000005FD                 db    0
.rdata$r:000005FE                 db    0
.rdata$r:000005FF                 db    0
.rdata$r:00000600                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000600 _rdata$r        ends
.rdata$r:00000600
.rdata$r:00000604 ; ===========================================================================
.rdata$r:00000604
.rdata$r:00000604 ; Segment type: Pure data
.rdata$r:00000604 ; Segment permissions: Read
.rdata$r:00000604 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000604                 assume cs:_rdata$r
.rdata$r:00000604                 ;org 604h
.rdata$r:00000604 ; COMDAT (pick any)
.rdata$r:00000604                 public ??_R2IUnknown@@8
.rdata$r:00000604 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000604 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000604                                         ; DATA XREF: .rdata$r:00000600o
.rdata$r:00000604                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000608                 db    0
.rdata$r:00000609                 align 4
.rdata$r:00000609 _rdata$r        ends
.rdata$r:00000609
.rdata$r:0000060C ; ===========================================================================
.rdata$r:0000060C
.rdata$r:0000060C ; Segment type: Pure data
.rdata$r:0000060C ; Segment permissions: Read
.rdata$r:0000060C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000060C                 assume cs:_rdata$r
.rdata$r:0000060C                 ;org 60Ch
.rdata$r:0000060C ; COMDAT (pick any)
.rdata$r:0000060C                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:0000060C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:0000060C ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000060C                                         ; DATA XREF: .rdata$r:00000534o
.rdata$r:0000060C                                         ; .rdata$r:00000B44o
.rdata$r:0000060C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000610                 db    0
.rdata$r:00000611                 db    0
.rdata$r:00000612                 db    0
.rdata$r:00000613                 db    0
.rdata$r:00000614                 db    0
.rdata$r:00000615                 db    0
.rdata$r:00000616                 db    0
.rdata$r:00000617                 db    0
.rdata$r:00000618                 db 0FFh
.rdata$r:00000619                 db 0FFh
.rdata$r:0000061A                 db 0FFh
.rdata$r:0000061B                 db 0FFh
.rdata$r:0000061C                 db    0
.rdata$r:0000061D                 db    0
.rdata$r:0000061E                 db    0
.rdata$r:0000061F                 db    0
.rdata$r:00000620                 db  42h ; B
.rdata$r:00000621                 db    0
.rdata$r:00000622                 db    0
.rdata$r:00000623                 db    0
.rdata$r:00000624                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000624 _rdata$r        ends
.rdata$r:00000624
.rdata$r:00000628 ; ===========================================================================
.rdata$r:00000628
.rdata$r:00000628 ; Segment type: Pure data
.rdata$r:00000628 ; Segment permissions: Read
.rdata$r:00000628 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000628                 assume cs:_rdata$r
.rdata$r:00000628                 ;org 628h
.rdata$r:00000628 ; COMDAT (pick any)
.rdata$r:00000628                 public ??_R13?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00000628 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000628 ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:00000628                                         ; DATA XREF: .rdata$r:00000538o
.rdata$r:00000628                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:0000062C                 db    1
.rdata$r:0000062D                 db    0
.rdata$r:0000062E                 db    0
.rdata$r:0000062F                 db    0
.rdata$r:00000630                 db    4
.rdata$r:00000631                 db    0
.rdata$r:00000632                 db    0
.rdata$r:00000633                 db    0
.rdata$r:00000634                 db 0FFh
.rdata$r:00000635                 db 0FFh
.rdata$r:00000636                 db 0FFh
.rdata$r:00000637                 db 0FFh
.rdata$r:00000638                 db    0
.rdata$r:00000639                 db    0
.rdata$r:0000063A                 db    0
.rdata$r:0000063B                 db    0
.rdata$r:0000063C                 db  40h ; @
.rdata$r:0000063D                 db    0
.rdata$r:0000063E                 db    0
.rdata$r:0000063F                 db    0
.rdata$r:00000640                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000640 _rdata$r        ends
.rdata$r:00000640
.data:00000644 ; ===========================================================================
.data:00000644
.data:00000644 ; Segment type: Pure data
.data:00000644 ; Segment permissions: Read/Write
.data:00000644 _data           segment dword public 'DATA' use32
.data:00000644                 assume cs:_data
.data:00000644                 ;org 644h
.data:00000644 ; COMDAT (pick any)
.data:00000644                 public ??_R0?AUICompressSetDecoderProperties2@@@8
.data:00000644 ; struct ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.data:00000644 ??_R0?AUICompressSetDecoderProperties2@@@8 dd offset ??_7type_info@@6B@
.data:00000644                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000644                                         ; .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000644                                         ; const type_info::`vftable'
.data:00000648                 db    0
.data:00000649                 db    0
.data:0000064A                 db    0
.data:0000064B                 db    0
.data:0000064C                 db  2Eh ; .
.data:0000064D                 db  3Fh ; ?
.data:0000064E                 db  41h ; A
.data:0000064F                 db  55h ; U
.data:00000650                 db  49h ; I
.data:00000651                 db  43h ; C
.data:00000652                 db  6Fh ; o
.data:00000653                 db  6Dh ; m
.data:00000654                 db  70h ; p
.data:00000655                 db  72h ; r
.data:00000656                 db  65h ; e
.data:00000657                 db  73h ; s
.data:00000658                 db  73h ; s
.data:00000659                 db  53h ; S
.data:0000065A                 db  65h ; e
.data:0000065B                 db  74h ; t
.data:0000065C                 db  44h ; D
.data:0000065D                 db  65h ; e
.data:0000065E                 db  63h ; c
.data:0000065F                 db  6Fh ; o
.data:00000660                 db  64h ; d
.data:00000661                 db  65h ; e
.data:00000662                 db  72h ; r
.data:00000663                 db  50h ; P
.data:00000664                 db  72h ; r
.data:00000665                 db  6Fh ; o
.data:00000666                 db  70h ; p
.data:00000667                 db  65h ; e
.data:00000668                 db  72h ; r
.data:00000669                 db  74h ; t
.data:0000066A                 db  69h ; i
.data:0000066B                 db  65h ; e
.data:0000066C                 db  73h ; s
.data:0000066D                 db  32h ; 2
.data:0000066E                 db  40h ; @
.data:0000066F                 db  40h ; @
.data:00000670                 db    0
.data:00000671                 align 4
.data:00000671 _data           ends
.data:00000671
.rdata$r:00000674 ; ===========================================================================
.rdata$r:00000674
.rdata$r:00000674 ; Segment type: Pure data
.rdata$r:00000674 ; Segment permissions: Read
.rdata$r:00000674 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000674                 assume cs:_rdata$r
.rdata$r:00000674                 ;org 674h
.rdata$r:00000674 ; COMDAT (pick any)
.rdata$r:00000674                 public ??_R3ICompressSetDecoderProperties2@@8
.rdata$r:00000674 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000674 ??_R3ICompressSetDecoderProperties2@@8 db    0
.rdata$r:00000674                                         ; DATA XREF: .rdata$r:00000640o
.rdata$r:00000674                                         ; .rdata$r:000006A8o ...
.rdata$r:00000675                 db    0
.rdata$r:00000676                 db    0
.rdata$r:00000677                 db    0
.rdata$r:00000678                 db    0
.rdata$r:00000679                 db    0
.rdata$r:0000067A                 db    0
.rdata$r:0000067B                 db    0
.rdata$r:0000067C                 db    2
.rdata$r:0000067D                 db    0
.rdata$r:0000067E                 db    0
.rdata$r:0000067F                 db    0
.rdata$r:00000680                 dd offset ??_R2ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:00000680 _rdata$r        ends
.rdata$r:00000680
.rdata$r:00000684 ; ===========================================================================
.rdata$r:00000684
.rdata$r:00000684 ; Segment type: Pure data
.rdata$r:00000684 ; Segment permissions: Read
.rdata$r:00000684 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000684                 assume cs:_rdata$r
.rdata$r:00000684                 ;org 684h
.rdata$r:00000684 ; COMDAT (pick any)
.rdata$r:00000684                 public ??_R2ICompressSetDecoderProperties2@@8
.rdata$r:00000684 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:00000684 ??_R2ICompressSetDecoderProperties2@@8 dd offset ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00000684                                         ; DATA XREF: .rdata$r:00000680o
.rdata$r:00000684                                         ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000688                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000068C                 db    0
.rdata$r:0000068D                 align 10h
.rdata$r:0000068D _rdata$r        ends
.rdata$r:0000068D
.rdata$r:00000690 ; ===========================================================================
.rdata$r:00000690
.rdata$r:00000690 ; Segment type: Pure data
.rdata$r:00000690 ; Segment permissions: Read
.rdata$r:00000690 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000690                 assume cs:_rdata$r
.rdata$r:00000690                 ;org 690h
.rdata$r:00000690 ; COMDAT (pick any)
.rdata$r:00000690                 public ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00000690 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000690 ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:00000690                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Array'o
.rdata$r:00000690                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00000694                 db    1
.rdata$r:00000695                 db    0
.rdata$r:00000696                 db    0
.rdata$r:00000697                 db    0
.rdata$r:00000698                 db    0
.rdata$r:00000699                 db    0
.rdata$r:0000069A                 db    0
.rdata$r:0000069B                 db    0
.rdata$r:0000069C                 db 0FFh
.rdata$r:0000069D                 db 0FFh
.rdata$r:0000069E                 db 0FFh
.rdata$r:0000069F                 db 0FFh
.rdata$r:000006A0                 db    0
.rdata$r:000006A1                 db    0
.rdata$r:000006A2                 db    0
.rdata$r:000006A3                 db    0
.rdata$r:000006A4                 db  40h ; @
.rdata$r:000006A5                 db    0
.rdata$r:000006A6                 db    0
.rdata$r:000006A7                 db    0
.rdata$r:000006A8                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006A8 _rdata$r        ends
.rdata$r:000006A8
.rdata$r:000006AC ; ===========================================================================
.rdata$r:000006AC
.rdata$r:000006AC ; Segment type: Pure data
.rdata$r:000006AC ; Segment permissions: Read
.rdata$r:000006AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006AC                 assume cs:_rdata$r
.rdata$r:000006AC                 ;org 6ACh
.rdata$r:000006AC ; COMDAT (pick any)
.rdata$r:000006AC                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000006AC ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000006AC ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000006AC                                         ; DATA XREF: .rdata$r:0000053Co
.rdata$r:000006AC                                         ; .rdata$r:00000B4Co
.rdata$r:000006AC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000006B0                 db    0
.rdata$r:000006B1                 db    0
.rdata$r:000006B2                 db    0
.rdata$r:000006B3                 db    0
.rdata$r:000006B4                 db    4
.rdata$r:000006B5                 db    0
.rdata$r:000006B6                 db    0
.rdata$r:000006B7                 db    0
.rdata$r:000006B8                 db 0FFh
.rdata$r:000006B9                 db 0FFh
.rdata$r:000006BA                 db 0FFh
.rdata$r:000006BB                 db 0FFh
.rdata$r:000006BC                 db    0
.rdata$r:000006BD                 db    0
.rdata$r:000006BE                 db    0
.rdata$r:000006BF                 db    0
.rdata$r:000006C0                 db  42h ; B
.rdata$r:000006C1                 db    0
.rdata$r:000006C2                 db    0
.rdata$r:000006C3                 db    0
.rdata$r:000006C4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006C4 _rdata$r        ends
.rdata$r:000006C4
.rdata$r:000006C8 ; ===========================================================================
.rdata$r:000006C8
.rdata$r:000006C8 ; Segment type: Pure data
.rdata$r:000006C8 ; Segment permissions: Read
.rdata$r:000006C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006C8                 assume cs:_rdata$r
.rdata$r:000006C8                 ;org 6C8h
.rdata$r:000006C8 ; COMDAT (pick any)
.rdata$r:000006C8                 public ??_R17?0A@EN@CDelta@@8
.rdata$r:000006C8 ; CDelta::`RTTI Base Class Descriptor at (8, -1, 0, 77)'
.rdata$r:000006C8 ??_R17?0A@EN@CDelta@@8 dd offset ??_R0?AUCDelta@@@8
.rdata$r:000006C8                                         ; DATA XREF: .rdata$r:00000540o
.rdata$r:000006C8                                         ; CDelta `RTTI Type Descriptor'
.rdata$r:000006CC                 align 10h
.rdata$r:000006D0                 db    8
.rdata$r:000006D1                 db    0
.rdata$r:000006D2                 db    0
.rdata$r:000006D3                 db    0
.rdata$r:000006D4                 db 0FFh
.rdata$r:000006D5                 db 0FFh
.rdata$r:000006D6                 db 0FFh
.rdata$r:000006D7                 db 0FFh
.rdata$r:000006D8                 db    0
.rdata$r:000006D9                 db    0
.rdata$r:000006DA                 db    0
.rdata$r:000006DB                 db    0
.rdata$r:000006DC                 db  4Dh ; M
.rdata$r:000006DD                 db    0
.rdata$r:000006DE                 db    0
.rdata$r:000006DF                 db    0
.rdata$r:000006E0                 dd offset ??_R3CDelta@@8 ; CDelta::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006E0 _rdata$r        ends
.rdata$r:000006E0
.data:000006E4 ; ===========================================================================
.data:000006E4
.data:000006E4 ; Segment type: Pure data
.data:000006E4 ; Segment permissions: Read/Write
.data:000006E4 _data           segment dword public 'DATA' use32
.data:000006E4                 assume cs:_data
.data:000006E4                 ;org 6E4h
.data:000006E4 ; COMDAT (pick any)
.data:000006E4                 public ??_R0?AUCDelta@@@8
.data:000006E4 ; struct CDelta `RTTI Type Descriptor'
.data:000006E4 ??_R0?AUCDelta@@@8 dd offset ??_7type_info@@6B@
.data:000006E4                                         ; DATA XREF: .rdata$r:CDelta::`RTTI Base Class Descriptor at (8,-1,0,77)'o
.data:000006E4                                         ; .rdata$r:CDelta::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000006E4                                         ; const type_info::`vftable'
.data:000006E8                 db    0
.data:000006E9                 db    0
.data:000006EA                 db    0
.data:000006EB                 db    0
.data:000006EC                 db  2Eh ; .
.data:000006ED                 db  3Fh ; ?
.data:000006EE                 db  41h ; A
.data:000006EF                 db  55h ; U
.data:000006F0                 db  43h ; C
.data:000006F1                 db  44h ; D
.data:000006F2                 db  65h ; e
.data:000006F3                 db  6Ch ; l
.data:000006F4                 db  74h ; t
.data:000006F5                 db  61h ; a
.data:000006F6                 db  40h ; @
.data:000006F7                 db  40h ; @
.data:000006F8                 db    0
.data:000006F9                 align 4
.data:000006F9 _data           ends
.data:000006F9
.rdata$r:000006FC ; ===========================================================================
.rdata$r:000006FC
.rdata$r:000006FC ; Segment type: Pure data
.rdata$r:000006FC ; Segment permissions: Read
.rdata$r:000006FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006FC                 assume cs:_rdata$r
.rdata$r:000006FC                 ;org 6FCh
.rdata$r:000006FC ; COMDAT (pick any)
.rdata$r:000006FC                 public ??_R3CDelta@@8
.rdata$r:000006FC ; CDelta::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006FC ??_R3CDelta@@8  db    0                 ; DATA XREF: .rdata$r:000006E0o
.rdata$r:000006FC                                         ; .rdata$r:0000072Co ...
.rdata$r:000006FD                 db    0
.rdata$r:000006FE                 db    0
.rdata$r:000006FF                 db    0
.rdata$r:00000700                 db    0
.rdata$r:00000701                 db    0
.rdata$r:00000702                 db    0
.rdata$r:00000703                 db    0
.rdata$r:00000704                 db    1
.rdata$r:00000705                 db    0
.rdata$r:00000706                 db    0
.rdata$r:00000707                 db    0
.rdata$r:00000708                 dd offset ??_R2CDelta@@8 ; CDelta::`RTTI Base Class Array'
.rdata$r:00000708 _rdata$r        ends
.rdata$r:00000708
.rdata$r:0000070C ; ===========================================================================
.rdata$r:0000070C
.rdata$r:0000070C ; Segment type: Pure data
.rdata$r:0000070C ; Segment permissions: Read
.rdata$r:0000070C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000070C                 assume cs:_rdata$r
.rdata$r:0000070C                 ;org 70Ch
.rdata$r:0000070C ; COMDAT (pick any)
.rdata$r:0000070C                 public ??_R2CDelta@@8
.rdata$r:0000070C ; CDelta::`RTTI Base Class Array'
.rdata$r:0000070C ??_R2CDelta@@8  dd offset ??_R1A@?0A@EA@CDelta@@8
.rdata$r:0000070C                                         ; DATA XREF: .rdata$r:00000708o
.rdata$r:0000070C                                         ; CDelta::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000710                 db    0
.rdata$r:00000711                 align 4
.rdata$r:00000711 _rdata$r        ends
.rdata$r:00000711
.rdata$r:00000714 ; ===========================================================================
.rdata$r:00000714
.rdata$r:00000714 ; Segment type: Pure data
.rdata$r:00000714 ; Segment permissions: Read
.rdata$r:00000714 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000714                 assume cs:_rdata$r
.rdata$r:00000714                 ;org 714h
.rdata$r:00000714 ; COMDAT (pick any)
.rdata$r:00000714                 public ??_R1A@?0A@EA@CDelta@@8
.rdata$r:00000714 ; CDelta::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000714 ??_R1A@?0A@EA@CDelta@@8 dd offset ??_R0?AUCDelta@@@8
.rdata$r:00000714                                         ; DATA XREF: .rdata$r:CDelta::`RTTI Base Class Array'o
.rdata$r:00000714                                         ; CDelta `RTTI Type Descriptor'
.rdata$r:00000718                 align 10h
.rdata$r:00000720                 db 0FFh
.rdata$r:00000721                 db 0FFh
.rdata$r:00000722                 db 0FFh
.rdata$r:00000723                 db 0FFh
.rdata$r:00000724                 db    0
.rdata$r:00000725                 db    0
.rdata$r:00000726                 db    0
.rdata$r:00000727                 db    0
.rdata$r:00000728                 db  40h ; @
.rdata$r:00000729                 db    0
.rdata$r:0000072A                 db    0
.rdata$r:0000072B                 db    0
.rdata$r:0000072C                 dd offset ??_R3CDelta@@8 ; CDelta::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000072C _rdata$r        ends
.rdata$r:0000072C
.rdata$r:00000730 ; ===========================================================================
.rdata$r:00000730
.rdata$r:00000730 ; Segment type: Pure data
.rdata$r:00000730 ; Segment permissions: Read
.rdata$r:00000730 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000730                 assume cs:_rdata$r
.rdata$r:00000730                 ;org 730h
.rdata$r:00000730 ; COMDAT (pick any)
.rdata$r:00000730                 public ??_R1BAM@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000730 ; CMyUnknownImp::`RTTI Base Class Descriptor at (268, -1, 0, 64)'
.rdata$r:00000730 ??_R1BAM@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000730                                         ; DATA XREF: .rdata$r:00000544o
.rdata$r:00000730                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000734                 align 8
.rdata$r:00000738                 dd offset loc_10A+2
.rdata$r:0000073C                 db 0FFh
.rdata$r:0000073D                 db 0FFh
.rdata$r:0000073E                 db 0FFh
.rdata$r:0000073F                 db 0FFh
.rdata$r:00000740                 db    0
.rdata$r:00000741                 db    0
.rdata$r:00000742                 db    0
.rdata$r:00000743                 db    0
.rdata$r:00000744                 db  40h ; @
.rdata$r:00000745                 db    0
.rdata$r:00000746                 db    0
.rdata$r:00000747                 db    0
.rdata$r:00000748                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000748 _rdata$r        ends
.rdata$r:00000748
.data:0000074C ; ===========================================================================
.data:0000074C
.data:0000074C ; Segment type: Pure data
.data:0000074C ; Segment permissions: Read/Write
.data:0000074C _data           segment dword public 'DATA' use32
.data:0000074C                 assume cs:_data
.data:0000074C                 ;org 74Ch
.data:0000074C ; COMDAT (pick any)
.data:0000074C                 public ??_R0?AVCMyUnknownImp@@@8
.data:0000074C ; class CMyUnknownImp `RTTI Type Descriptor'
.data:0000074C ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:0000074C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (268,-1,0,64)'o
.data:0000074C                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000074C                                         ; const type_info::`vftable'
.data:00000750                 db    0
.data:00000751                 db    0
.data:00000752                 db    0
.data:00000753                 db    0
.data:00000754                 db  2Eh ; .
.data:00000755                 db  3Fh ; ?
.data:00000756                 db  41h ; A
.data:00000757                 db  56h ; V
.data:00000758                 db  43h ; C
.data:00000759                 db  4Dh ; M
.data:0000075A                 db  79h ; y
.data:0000075B                 db  55h ; U
.data:0000075C                 db  6Eh ; n
.data:0000075D                 db  6Bh ; k
.data:0000075E                 db  6Eh ; n
.data:0000075F                 db  6Fh ; o
.data:00000760                 db  77h ; w
.data:00000761                 db  6Eh ; n
.data:00000762                 db  49h ; I
.data:00000763                 db  6Dh ; m
.data:00000764                 db  70h ; p
.data:00000765                 db  40h ; @
.data:00000766                 db  40h ; @
.data:00000767                 db    0
.data:00000767 _data           ends
.data:00000767
.rdata$r:00000768 ; ===========================================================================
.rdata$r:00000768
.rdata$r:00000768 ; Segment type: Pure data
.rdata$r:00000768 ; Segment permissions: Read
.rdata$r:00000768 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000768                 assume cs:_rdata$r
.rdata$r:00000768                 ;org 768h
.rdata$r:00000768 ; COMDAT (pick any)
.rdata$r:00000768                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000768 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000768 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000748o
.rdata$r:00000768                                         ; .rdata$r:00000798o ...
.rdata$r:00000769                 db    0
.rdata$r:0000076A                 db    0
.rdata$r:0000076B                 db    0
.rdata$r:0000076C                 db    0
.rdata$r:0000076D                 db    0
.rdata$r:0000076E                 db    0
.rdata$r:0000076F                 db    0
.rdata$r:00000770                 db    1
.rdata$r:00000771                 db    0
.rdata$r:00000772                 db    0
.rdata$r:00000773                 db    0
.rdata$r:00000774                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000774 _rdata$r        ends
.rdata$r:00000774
.rdata$r:00000778 ; ===========================================================================
.rdata$r:00000778
.rdata$r:00000778 ; Segment type: Pure data
.rdata$r:00000778 ; Segment permissions: Read
.rdata$r:00000778 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000778                 assume cs:_rdata$r
.rdata$r:00000778                 ;org 778h
.rdata$r:00000778 ; COMDAT (pick any)
.rdata$r:00000778                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000778 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000778 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000778                                         ; DATA XREF: .rdata$r:00000774o
.rdata$r:00000778                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000077C                 db    0
.rdata$r:0000077D                 align 10h
.rdata$r:0000077D _rdata$r        ends
.rdata$r:0000077D
.rdata$r:00000780 ; ===========================================================================
.rdata$r:00000780
.rdata$r:00000780 ; Segment type: Pure data
.rdata$r:00000780 ; Segment permissions: Read
.rdata$r:00000780 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000780                 assume cs:_rdata$r
.rdata$r:00000780                 ;org 780h
.rdata$r:00000780 ; COMDAT (pick any)
.rdata$r:00000780                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000780 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000780 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000780                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000780                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000784                 db    0
.rdata$r:00000785                 db    0
.rdata$r:00000786                 db    0
.rdata$r:00000787                 db    0
.rdata$r:00000788                 db    0
.rdata$r:00000789                 db    0
.rdata$r:0000078A                 db    0
.rdata$r:0000078B                 db    0
.rdata$r:0000078C                 db 0FFh
.rdata$r:0000078D                 db 0FFh
.rdata$r:0000078E                 db 0FFh
.rdata$r:0000078F                 db 0FFh
.rdata$r:00000790                 db    0
.rdata$r:00000791                 db    0
.rdata$r:00000792                 db    0
.rdata$r:00000793                 db    0
.rdata$r:00000794                 db  40h ; @
.rdata$r:00000795                 db    0
.rdata$r:00000796                 db    0
.rdata$r:00000797                 db    0
.rdata$r:00000798                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000798 _rdata$r        ends
.rdata$r:00000798
.rdata$r:0000079C ; ===========================================================================
.rdata$r:0000079C
.rdata$r:0000079C ; Segment type: Pure data
.rdata$r:0000079C ; Segment permissions: Read
.rdata$r:0000079C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000079C                 assume cs:_rdata$r
.rdata$r:0000079C                 ;org 79Ch
.rdata$r:0000079C ; COMDAT (pick any)
.rdata$r:0000079C                 public ??_R4CDeltaDecoder@@6BICompressSetDecoderProperties2@@@
.rdata$r:0000079C ; const CDeltaDecoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata$r:0000079C ??_R4CDeltaDecoder@@6BICompressSetDecoderProperties2@@@ db    0
.rdata$r:0000079C                                         ; DATA XREF: .rdata:000004C0o
.rdata$r:0000079D                 db    0
.rdata$r:0000079E                 db    0
.rdata$r:0000079F                 db    0
.rdata$r:000007A0                 db    4
.rdata$r:000007A1                 db    0
.rdata$r:000007A2                 db    0
.rdata$r:000007A3                 db    0
.rdata$r:000007A4                 db    0
.rdata$r:000007A5                 db    0
.rdata$r:000007A6                 db    0
.rdata$r:000007A7                 db    0
.rdata$r:000007A8                 dd offset ??_R0?AVCDeltaDecoder@@@8 ; CDeltaDecoder `RTTI Type Descriptor'
.rdata$r:000007AC                 dd offset ??_R3CDeltaDecoder@@8 ; CDeltaDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007AC _rdata$r        ends
.rdata$r:000007AC
.text:000007B0 ; ===========================================================================
.text:000007B0
.text:000007B0 ; Segment type: Pure code
.text:000007B0 ; Segment permissions: Read/Execute
.text:000007B0 _text           segment para public 'CODE' use32
.text:000007B0                 assume cs:_text
.text:000007B0                 ;org 7B0h
.text:000007B0 ; COMDAT (pick any)
.text:000007B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007B0
.text:000007B0 ; =============== S U B R O U T I N E =======================================
.text:000007B0
.text:000007B0 ; Attributes: bp-based frame
.text:000007B0
.text:000007B0 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000007B0                 public ??0CMyUnknownImp@@QAE@XZ
.text:000007B0 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CDeltaDecoder::CDeltaDecoder(void)+35p
.text:000007B0                                         ; CDeltaEncoder::CDeltaEncoder(void)+40p
.text:000007B0
.text:000007B0 var_4           = dword ptr -4
.text:000007B0
.text:000007B0                 push    ebp
.text:000007B1                 mov     ebp, esp
.text:000007B3                 push    ecx
.text:000007B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007BB                 mov     [ebp+var_4], ecx
.text:000007BE                 mov     eax, [ebp+var_4]
.text:000007C1                 mov     dword ptr [eax], 0
.text:000007C7                 mov     eax, [ebp+var_4]
.text:000007CA                 mov     esp, ebp
.text:000007CC                 pop     ebp
.text:000007CD                 retn
.text:000007CD ??0CMyUnknownImp@@QAE@XZ endp
.text:000007CD
.text:000007CD ; ---------------------------------------------------------------------------
.text:000007CE                 align 10h
.text:000007CE _text           ends
.text:000007CE
.text:000007D0 ; ===========================================================================
.text:000007D0
.text:000007D0 ; Segment type: Pure code
.text:000007D0 ; Segment permissions: Read/Execute
.text:000007D0 _text           segment para public 'CODE' use32
.text:000007D0                 assume cs:_text
.text:000007D0                 ;org 7D0h
.text:000007D0 ; COMDAT (pick any)
.text:000007D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007D0
.text:000007D0 ; =============== S U B R O U T I N E =======================================
.text:000007D0
.text:000007D0 ; Attributes: bp-based frame
.text:000007D0
.text:000007D0 ; _DWORD __thiscall CDelta::CDelta(CDelta *__hidden this)
.text:000007D0                 public ??0CDelta@@QAE@XZ
.text:000007D0 ??0CDelta@@QAE@XZ proc near             ; CODE XREF: CDeltaDecoder::CDeltaDecoder(void)+27p
.text:000007D0                                         ; CDeltaEncoder::CDeltaEncoder(void)+32p
.text:000007D0
.text:000007D0 var_4           = dword ptr -4
.text:000007D0
.text:000007D0                 push    ebp
.text:000007D1                 mov     ebp, esp
.text:000007D3                 push    ecx
.text:000007D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007DB                 mov     [ebp+var_4], ecx
.text:000007DE                 mov     eax, [ebp+var_4]
.text:000007E1                 mov     dword ptr [eax], 1
.text:000007E7                 mov     eax, [ebp+var_4]
.text:000007EA                 mov     esp, ebp
.text:000007EC                 pop     ebp
.text:000007ED                 retn
.text:000007ED ??0CDelta@@QAE@XZ endp
.text:000007ED
.text:000007ED ; ---------------------------------------------------------------------------
.text:000007EE                 align 10h
.text:000007EE _text           ends
.text:000007EE
.text:000007F0 ; ===========================================================================
.text:000007F0
.text:000007F0 ; Segment type: Pure code
.text:000007F0 ; Segment permissions: Read/Execute
.text:000007F0 _text           segment para public 'CODE' use32
.text:000007F0                 assume cs:_text
.text:000007F0                 ;org 7F0h
.text:000007F0 ; COMDAT (pick any)
.text:000007F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007F0
.text:000007F0 ; =============== S U B R O U T I N E =======================================
.text:000007F0
.text:000007F0 ; Attributes: bp-based frame
.text:000007F0
.text:000007F0 ; __int32 __stdcall CDeltaDecoder::QueryInterface(CDeltaDecoder *this, const struct _GUID *Buf1, void **)
.text:000007F0                 public ?QueryInterface@CDeltaDecoder@@UAGJABU_GUID@@PAPAX@Z
.text:000007F0 ?QueryInterface@CDeltaDecoder@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000007F0                                         ; CODE XREF: [thunk]:CDeltaDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:000007F0                                         ; DATA XREF: .rdata:const CDeltaDecoder::`vftable'{for `ICompressFilter'}o
.text:000007F0
.text:000007F0 var_8           = dword ptr -8
.text:000007F0 var_4           = dword ptr -4
.text:000007F0 this            = dword ptr  8
.text:000007F0 Buf1            = dword ptr  0Ch
.text:000007F0 arg_8           = dword ptr  10h
.text:000007F0
.text:000007F0                 push    ebp
.text:000007F1                 mov     ebp, esp
.text:000007F3                 sub     esp, 8
.text:000007F6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000007FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000804                 mov     eax, [ebp+arg_8]
.text:00000807                 mov     dword ptr [eax], 0
.text:0000080D                 push    offset _IID_IUnknown ; Buf2
.text:00000812                 mov     ecx, [ebp+Buf1]
.text:00000815                 push    ecx             ; Buf1
.text:00000816                 call    ___@8           ; __(x,x)
.text:0000081B                 test    eax, eax
.text:0000081D                 jz      short loc_841
.text:0000081F                 cmp     [ebp+this], 0
.text:00000823                 jz      short loc_830
.text:00000825                 mov     edx, [ebp+this]
.text:00000828                 add     edx, 4
.text:0000082B                 mov     [ebp+var_4], edx
.text:0000082E                 jmp     short loc_837
.text:00000830 ; ---------------------------------------------------------------------------
.text:00000830
.text:00000830 loc_830:                                ; CODE XREF: CDeltaDecoder::QueryInterface(_GUID const &,void * *)+33j
.text:00000830                 mov     [ebp+var_4], 0
.text:00000837
.text:00000837 loc_837:                                ; CODE XREF: CDeltaDecoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:00000837                 mov     eax, [ebp+arg_8]
.text:0000083A                 mov     ecx, [ebp+var_4]
.text:0000083D                 mov     [eax], ecx
.text:0000083F                 jmp     short loc_87C
.text:00000841 ; ---------------------------------------------------------------------------
.text:00000841
.text:00000841 loc_841:                                ; CODE XREF: CDeltaDecoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00000841                 push    offset _IID_ICompressSetDecoderProperties2 ; Buf2
.text:00000846                 mov     edx, [ebp+Buf1]
.text:00000849                 push    edx             ; Buf1
.text:0000084A                 call    ___@8           ; __(x,x)
.text:0000084F                 test    eax, eax
.text:00000851                 jz      short loc_875
.text:00000853                 cmp     [ebp+this], 0
.text:00000857                 jz      short loc_864
.text:00000859                 mov     eax, [ebp+this]
.text:0000085C                 add     eax, 4
.text:0000085F                 mov     [ebp+var_8], eax
.text:00000862                 jmp     short loc_86B
.text:00000864 ; ---------------------------------------------------------------------------
.text:00000864
.text:00000864 loc_864:                                ; CODE XREF: CDeltaDecoder::QueryInterface(_GUID const &,void * *)+67j
.text:00000864                 mov     [ebp+var_8], 0
.text:0000086B
.text:0000086B loc_86B:                                ; CODE XREF: CDeltaDecoder::QueryInterface(_GUID const &,void * *)+72j
.text:0000086B                 mov     ecx, [ebp+arg_8]
.text:0000086E                 mov     edx, [ebp+var_8]
.text:00000871                 mov     [ecx], edx
.text:00000873                 jmp     short loc_87C
.text:00000875 ; ---------------------------------------------------------------------------
.text:00000875
.text:00000875 loc_875:                                ; CODE XREF: CDeltaDecoder::QueryInterface(_GUID const &,void * *)+61j
.text:00000875                 mov     eax, 80004002h
.text:0000087A                 jmp     short loc_893
.text:0000087C ; ---------------------------------------------------------------------------
.text:0000087C
.text:0000087C loc_87C:                                ; CODE XREF: CDeltaDecoder::QueryInterface(_GUID const &,void * *)+4Fj
.text:0000087C                                         ; CDeltaDecoder::QueryInterface(_GUID const &,void * *)+83j
.text:0000087C                 mov     eax, [ebp+this]
.text:0000087F                 mov     ecx, [eax+10Ch]
.text:00000885                 add     ecx, 1
.text:00000888                 mov     edx, [ebp+this]
.text:0000088B                 mov     [edx+10Ch], ecx
.text:00000891                 xor     eax, eax
.text:00000893
.text:00000893 loc_893:                                ; CODE XREF: CDeltaDecoder::QueryInterface(_GUID const &,void * *)+8Aj
.text:00000893                 add     esp, 8
.text:00000896                 cmp     ebp, esp
.text:00000898                 call    __RTC_CheckEsp
.text:0000089D                 mov     esp, ebp
.text:0000089F                 pop     ebp
.text:000008A0                 retn    0Ch
.text:000008A0 ?QueryInterface@CDeltaDecoder@@UAGJABU_GUID@@PAPAX@Z endp
.text:000008A0
.text:000008A0 ; ---------------------------------------------------------------------------
.text:000008A3                 align 4
.text:000008A3 _text           ends
.text:000008A3
.text:000008A4 ; ===========================================================================
.text:000008A4
.text:000008A4 ; Segment type: Pure code
.text:000008A4 ; Segment permissions: Read/Execute
.text:000008A4 _text           segment para public 'CODE' use32
.text:000008A4                 assume cs:_text
.text:000008A4                 ;org 8A4h
.text:000008A4 ; COMDAT (pick any)
.text:000008A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008A4
.text:000008A4 ; =============== S U B R O U T I N E =======================================
.text:000008A4
.text:000008A4 ; Attributes: bp-based frame
.text:000008A4
.text:000008A4 ; int __stdcall __(void *Buf1, void *Buf2)
.text:000008A4                 public ___@8
.text:000008A4 ___@8           proc near               ; CODE XREF: CDeltaDecoder::QueryInterface(_GUID const &,void * *)+26p
.text:000008A4                                         ; CDeltaDecoder::QueryInterface(_GUID const &,void * *)+5Ap ...
.text:000008A4
.text:000008A4 Buf1            = dword ptr  8
.text:000008A4 Buf2            = dword ptr  0Ch
.text:000008A4
.text:000008A4                 push    ebp
.text:000008A5                 mov     ebp, esp
.text:000008A7                 mov     eax, [ebp+Buf2]
.text:000008AA                 push    eax             ; Buf2
.text:000008AB                 mov     ecx, [ebp+Buf1]
.text:000008AE                 push    ecx             ; Buf1
.text:000008AF                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000008B4                 cmp     ebp, esp
.text:000008B6                 call    __RTC_CheckEsp
.text:000008BB                 pop     ebp
.text:000008BC                 retn    8
.text:000008BC ___@8           endp
.text:000008BC
.text:000008BC ; ---------------------------------------------------------------------------
.text:000008BF                 align 10h
.text:000008BF _text           ends
.text:000008BF
.text:000008C0 ; ===========================================================================
.text:000008C0
.text:000008C0 ; Segment type: Pure code
.text:000008C0 ; Segment permissions: Read/Execute
.text:000008C0 _text           segment para public 'CODE' use32
.text:000008C0                 assume cs:_text
.text:000008C0                 ;org 8C0h
.text:000008C0 ; COMDAT (pick any)
.text:000008C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008C0
.text:000008C0 ; =============== S U B R O U T I N E =======================================
.text:000008C0
.text:000008C0 ; Attributes: bp-based frame
.text:000008C0
.text:000008C0 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000008C0                 public _IsEqualGUID@8
.text:000008C0 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000008C0
.text:000008C0 Buf1            = dword ptr  8
.text:000008C0 Buf2            = dword ptr  0Ch
.text:000008C0
.text:000008C0                 push    ebp
.text:000008C1                 mov     ebp, esp
.text:000008C3                 push    10h             ; Size
.text:000008C5                 mov     eax, [ebp+Buf2]
.text:000008C8                 push    eax             ; Buf2
.text:000008C9                 mov     ecx, [ebp+Buf1]
.text:000008CC                 push    ecx             ; Buf1
.text:000008CD                 call    _memcmp
.text:000008D2                 add     esp, 0Ch
.text:000008D5                 neg     eax
.text:000008D7                 sbb     eax, eax
.text:000008D9                 add     eax, 1
.text:000008DC                 cmp     ebp, esp
.text:000008DE                 call    __RTC_CheckEsp
.text:000008E3                 pop     ebp
.text:000008E4                 retn    8
.text:000008E4 _IsEqualGUID@8  endp
.text:000008E4
.text:000008E4 ; ---------------------------------------------------------------------------
.text:000008E7                 align 4
.text:000008E7 _text           ends
.text:000008E7
.text:000008E8 ; ===========================================================================
.text:000008E8
.text:000008E8 ; Segment type: Pure code
.text:000008E8 ; Segment permissions: Read/Execute
.text:000008E8 _text           segment para public 'CODE' use32
.text:000008E8                 assume cs:_text
.text:000008E8                 ;org 8E8h
.text:000008E8 ; COMDAT (pick any)
.text:000008E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008E8
.text:000008E8 ; =============== S U B R O U T I N E =======================================
.text:000008E8
.text:000008E8 ; Attributes: bp-based frame
.text:000008E8
.text:000008E8 ; unsigned __int32 __stdcall CDeltaDecoder::AddRef(CDeltaDecoder *this)
.text:000008E8                 public ?AddRef@CDeltaDecoder@@UAGKXZ
.text:000008E8 ?AddRef@CDeltaDecoder@@UAGKXZ proc near ; CODE XREF: [thunk]:CDeltaDecoder::AddRef`adjustor{4}' (void)+5j
.text:000008E8                                         ; DATA XREF: .rdata:000004DCo
.text:000008E8
.text:000008E8 var_4           = dword ptr -4
.text:000008E8 this            = dword ptr  8
.text:000008E8
.text:000008E8                 push    ebp
.text:000008E9                 mov     ebp, esp
.text:000008EB                 push    ecx
.text:000008EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008F3                 mov     eax, [ebp+this]
.text:000008F6                 mov     ecx, [eax+10Ch]
.text:000008FC                 add     ecx, 1
.text:000008FF                 mov     [ebp+var_4], ecx
.text:00000902                 mov     edx, [ebp+this]
.text:00000905                 mov     eax, [ebp+var_4]
.text:00000908                 mov     [edx+10Ch], eax
.text:0000090E                 mov     eax, [ebp+var_4]
.text:00000911                 mov     esp, ebp
.text:00000913                 pop     ebp
.text:00000914                 retn    4
.text:00000914 ?AddRef@CDeltaDecoder@@UAGKXZ endp
.text:00000914
.text:00000914 ; ---------------------------------------------------------------------------
.text:00000917                 align 4
.text:00000917 _text           ends
.text:00000917
.text:00000918 ; ===========================================================================
.text:00000918
.text:00000918 ; Segment type: Pure code
.text:00000918 ; Segment permissions: Read/Execute
.text:00000918 _text           segment para public 'CODE' use32
.text:00000918                 assume cs:_text
.text:00000918                 ;org 918h
.text:00000918 ; COMDAT (pick any)
.text:00000918                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000918
.text:00000918 ; =============== S U B R O U T I N E =======================================
.text:00000918
.text:00000918 ; Attributes: bp-based frame
.text:00000918
.text:00000918 ; unsigned __int32 __stdcall CDeltaDecoder::Release(CDeltaDecoder *this)
.text:00000918                 public ?Release@CDeltaDecoder@@UAGKXZ
.text:00000918 ?Release@CDeltaDecoder@@UAGKXZ proc near
.text:00000918                                         ; CODE XREF: [thunk]:CDeltaDecoder::Release`adjustor{4}' (void)+5j
.text:00000918                                         ; DATA XREF: .rdata:000004E0o
.text:00000918
.text:00000918 var_8           = dword ptr -8
.text:00000918 var_4           = dword ptr -4
.text:00000918 this            = dword ptr  8
.text:00000918
.text:00000918                 push    ebp
.text:00000919                 mov     ebp, esp
.text:0000091B                 sub     esp, 8
.text:0000091E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000925                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000092C                 mov     eax, [ebp+this]
.text:0000092F                 mov     ecx, [eax+10Ch]
.text:00000935                 sub     ecx, 1
.text:00000938                 mov     [ebp+var_8], ecx
.text:0000093B                 mov     edx, [ebp+this]
.text:0000093E                 mov     eax, [ebp+var_8]
.text:00000941                 mov     [edx+10Ch], eax
.text:00000947                 cmp     [ebp+var_8], 0
.text:0000094B                 jz      short loc_958
.text:0000094D                 mov     ecx, [ebp+this]
.text:00000950                 mov     eax, [ecx+10Ch]
.text:00000956                 jmp     short loc_96C
.text:00000958 ; ---------------------------------------------------------------------------
.text:00000958
.text:00000958 loc_958:                                ; CODE XREF: CDeltaDecoder::Release(void)+33j
.text:00000958                 mov     edx, [ebp+this]
.text:0000095B                 mov     [ebp+var_4], edx
.text:0000095E                 mov     eax, [ebp+var_4]
.text:00000961                 push    eax             ; void *
.text:00000962                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000967                 add     esp, 4
.text:0000096A                 xor     eax, eax
.text:0000096C
.text:0000096C loc_96C:                                ; CODE XREF: CDeltaDecoder::Release(void)+3Ej
.text:0000096C                 add     esp, 8
.text:0000096F                 cmp     ebp, esp
.text:00000971                 call    __RTC_CheckEsp
.text:00000976                 mov     esp, ebp
.text:00000978                 pop     ebp
.text:00000979                 retn    4
.text:00000979 ?Release@CDeltaDecoder@@UAGKXZ endp
.text:00000979
.text:00000979 _text           ends
.text:00000979
.text:0000097C ; ===========================================================================
.text:0000097C
.text:0000097C ; Segment type: Pure code
.text:0000097C ; Segment permissions: Read/Execute
.text:0000097C _text           segment para public 'CODE' use32
.text:0000097C                 assume cs:_text
.text:0000097C                 ;org 97Ch
.text:0000097C ; COMDAT (pick any)
.text:0000097C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000097C
.text:0000097C ; =============== S U B R O U T I N E =======================================
.text:0000097C
.text:0000097C ; Attributes: bp-based frame
.text:0000097C
.text:0000097C ; _DWORD __thiscall ICompressFilter::ICompressFilter(ICompressFilter *__hidden this)
.text:0000097C                 public ??0ICompressFilter@@QAE@XZ
.text:0000097C ??0ICompressFilter@@QAE@XZ proc near    ; CODE XREF: CDeltaDecoder::CDeltaDecoder(void)+11p
.text:0000097C                                         ; CDeltaEncoder::CDeltaEncoder(void)+11p
.text:0000097C
.text:0000097C var_4           = dword ptr -4
.text:0000097C
.text:0000097C                 push    ebp
.text:0000097D                 mov     ebp, esp
.text:0000097F                 push    ecx
.text:00000980                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000987                 mov     [ebp+var_4], ecx
.text:0000098A                 mov     ecx, [ebp+var_4]
.text:0000098D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000992                 mov     eax, [ebp+var_4]
.text:00000995                 mov     dword ptr [eax], offset ??_7ICompressFilter@@6B@ ; const ICompressFilter::`vftable'
.text:0000099B                 mov     eax, [ebp+var_4]
.text:0000099E                 add     esp, 4
.text:000009A1                 cmp     ebp, esp
.text:000009A3                 call    __RTC_CheckEsp
.text:000009A8                 mov     esp, ebp
.text:000009AA                 pop     ebp
.text:000009AB                 retn
.text:000009AB ??0ICompressFilter@@QAE@XZ endp
.text:000009AB
.text:000009AB _text           ends
.text:000009AB
.rdata:000009AC ; ===========================================================================
.rdata:000009AC
.rdata:000009AC ; Segment type: Pure data
.rdata:000009AC ; Segment permissions: Read
.rdata:000009AC _rdata          segment dword public 'DATA' use32
.rdata:000009AC                 assume cs:_rdata
.rdata:000009AC                 ;org 9ACh
.rdata:000009AC ; COMDAT (pick largest)
.rdata:000009AC                 dd offset ??_R4ICompressFilter@@6B@ ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata:000009B0                 public ??_7ICompressFilter@@6B@
.rdata:000009B0 ; const ICompressFilter::`vftable'
.rdata:000009B0 ??_7ICompressFilter@@6B@ dd offset __purecall
.rdata:000009B0                                         ; DATA XREF: ICompressFilter::ICompressFilter(void)+19o
.rdata:000009B4                 dd offset __purecall
.rdata:000009B8                 dd offset __purecall
.rdata:000009BC                 dd offset __purecall
.rdata:000009C0                 dd offset __purecall
.rdata:000009C0 _rdata          ends
.rdata:000009C0
.rdata$r:000009C4 ; ===========================================================================
.rdata$r:000009C4
.rdata$r:000009C4 ; Segment type: Pure data
.rdata$r:000009C4 ; Segment permissions: Read
.rdata$r:000009C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009C4                 assume cs:_rdata$r
.rdata$r:000009C4                 ;org 9C4h
.rdata$r:000009C4 ; COMDAT (pick any)
.rdata$r:000009C4                 public ??_R4ICompressFilter@@6B@
.rdata$r:000009C4 ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata$r:000009C4 ??_R4ICompressFilter@@6B@ db    0       ; DATA XREF: .rdata:000009ACo
.rdata$r:000009C5                 db    0
.rdata$r:000009C6                 db    0
.rdata$r:000009C7                 db    0
.rdata$r:000009C8                 db    0
.rdata$r:000009C9                 db    0
.rdata$r:000009CA                 db    0
.rdata$r:000009CB                 db    0
.rdata$r:000009CC                 db    0
.rdata$r:000009CD                 db    0
.rdata$r:000009CE                 db    0
.rdata$r:000009CF                 db    0
.rdata$r:000009D0                 dd offset ??_R0?AUICompressFilter@@@8 ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:000009D4                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009D4 _rdata$r        ends
.rdata$r:000009D4
.text:000009D8 ; ===========================================================================
.text:000009D8
.text:000009D8 ; Segment type: Pure code
.text:000009D8 ; Segment permissions: Read/Execute
.text:000009D8 _text           segment para public 'CODE' use32
.text:000009D8                 assume cs:_text
.text:000009D8                 ;org 9D8h
.text:000009D8 ; COMDAT (pick any)
.text:000009D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009D8
.text:000009D8 ; =============== S U B R O U T I N E =======================================
.text:000009D8
.text:000009D8 ; Attributes: bp-based frame
.text:000009D8
.text:000009D8 ; _DWORD __thiscall ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(ICompressSetDecoderProperties2 *__hidden this)
.text:000009D8                 public ??0ICompressSetDecoderProperties2@@QAE@XZ
.text:000009D8 ??0ICompressSetDecoderProperties2@@QAE@XZ proc near
.text:000009D8                                         ; CODE XREF: CDeltaDecoder::CDeltaDecoder(void)+1Cp
.text:000009D8
.text:000009D8 var_4           = dword ptr -4
.text:000009D8
.text:000009D8                 push    ebp
.text:000009D9                 mov     ebp, esp
.text:000009DB                 push    ecx
.text:000009DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009E3                 mov     [ebp+var_4], ecx
.text:000009E6                 mov     ecx, [ebp+var_4]
.text:000009E9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000009EE                 mov     eax, [ebp+var_4]
.text:000009F1                 mov     dword ptr [eax], offset ??_7ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`vftable'
.text:000009F7                 mov     eax, [ebp+var_4]
.text:000009FA                 add     esp, 4
.text:000009FD                 cmp     ebp, esp
.text:000009FF                 call    __RTC_CheckEsp
.text:00000A04                 mov     esp, ebp
.text:00000A06                 pop     ebp
.text:00000A07                 retn
.text:00000A07 ??0ICompressSetDecoderProperties2@@QAE@XZ endp
.text:00000A07
.text:00000A07 _text           ends
.text:00000A07
.rdata:00000A08 ; ===========================================================================
.rdata:00000A08
.rdata:00000A08 ; Segment type: Pure data
.rdata:00000A08 ; Segment permissions: Read
.rdata:00000A08 _rdata          segment dword public 'DATA' use32
.rdata:00000A08                 assume cs:_rdata
.rdata:00000A08                 ;org 0A08h
.rdata:00000A08 ; COMDAT (pick largest)
.rdata:00000A08                 dd offset ??_R4ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata:00000A0C                 public ??_7ICompressSetDecoderProperties2@@6B@
.rdata:00000A0C ; const ICompressSetDecoderProperties2::`vftable'
.rdata:00000A0C ??_7ICompressSetDecoderProperties2@@6B@ dd offset __purecall
.rdata:00000A0C                                         ; DATA XREF: ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+19o
.rdata:00000A10                 dd offset __purecall
.rdata:00000A14                 dd offset __purecall
.rdata:00000A18                 dd offset __purecall
.rdata:00000A18 _rdata          ends
.rdata:00000A18
.rdata$r:00000A1C ; ===========================================================================
.rdata$r:00000A1C
.rdata$r:00000A1C ; Segment type: Pure data
.rdata$r:00000A1C ; Segment permissions: Read
.rdata$r:00000A1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A1C                 assume cs:_rdata$r
.rdata$r:00000A1C                 ;org 0A1Ch
.rdata$r:00000A1C ; COMDAT (pick any)
.rdata$r:00000A1C                 public ??_R4ICompressSetDecoderProperties2@@6B@
.rdata$r:00000A1C ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata$r:00000A1C ??_R4ICompressSetDecoderProperties2@@6B@ db    0
.rdata$r:00000A1C                                         ; DATA XREF: .rdata:00000A08o
.rdata$r:00000A1D                 db    0
.rdata$r:00000A1E                 db    0
.rdata$r:00000A1F                 db    0
.rdata$r:00000A20                 db    0
.rdata$r:00000A21                 db    0
.rdata$r:00000A22                 db    0
.rdata$r:00000A23                 db    0
.rdata$r:00000A24                 db    0
.rdata$r:00000A25                 db    0
.rdata$r:00000A26                 db    0
.rdata$r:00000A27                 db    0
.rdata$r:00000A28                 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8 ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00000A2C                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A2C _rdata$r        ends
.rdata$r:00000A2C
.text:00000A30 ; ===========================================================================
.text:00000A30
.text:00000A30 ; Segment type: Pure code
.text:00000A30 ; Segment permissions: Read/Execute
.text:00000A30 _text           segment para public 'CODE' use32
.text:00000A30                 assume cs:_text
.text:00000A30                 ;org 0A30h
.text:00000A30 ; COMDAT (pick any)
.text:00000A30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A30
.text:00000A30 ; =============== S U B R O U T I N E =======================================
.text:00000A30
.text:00000A30 ; Attributes: bp-based frame
.text:00000A30
.text:00000A30 ; public: __thiscall IUnknown::IUnknown(void)
.text:00000A30                 public ??0IUnknown@@QAE@XZ
.text:00000A30 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressFilter::ICompressFilter(void)+11p
.text:00000A30                                         ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+11p ...
.text:00000A30
.text:00000A30 var_4           = dword ptr -4
.text:00000A30
.text:00000A30                 push    ebp
.text:00000A31                 mov     ebp, esp
.text:00000A33                 push    ecx
.text:00000A34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A3B                 mov     [ebp+var_4], ecx
.text:00000A3E                 mov     eax, [ebp+var_4]
.text:00000A41                 mov     esp, ebp
.text:00000A43                 pop     ebp
.text:00000A44                 retn
.text:00000A44 ??0IUnknown@@QAE@XZ endp
.text:00000A44
.text:00000A44 ; ---------------------------------------------------------------------------
.text:00000A45                 align 4
.text:00000A45 _text           ends
.text:00000A45
.text:00000A48 ; ===========================================================================
.text:00000A48
.text:00000A48 ; Segment type: Pure code
.text:00000A48 ; Segment permissions: Read/Execute
.text:00000A48 _text           segment para public 'CODE' use32
.text:00000A48                 assume cs:_text
.text:00000A48                 ;org 0A48h
.text:00000A48 ; COMDAT (pick any)
.text:00000A48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A48
.text:00000A48 ; =============== S U B R O U T I N E =======================================
.text:00000A48
.text:00000A48 ; Attributes: bp-based frame
.text:00000A48
.text:00000A48 ; public: __thiscall CDeltaEncoder::CDeltaEncoder(void)
.text:00000A48                 public ??0CDeltaEncoder@@QAE@XZ
.text:00000A48 ??0CDeltaEncoder@@QAE@XZ proc near      ; CODE XREF: CreateEnc(void)+5Ap
.text:00000A48
.text:00000A48 var_4           = dword ptr -4
.text:00000A48
.text:00000A48                 push    ebp
.text:00000A49                 mov     ebp, esp
.text:00000A4B                 push    ecx
.text:00000A4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A53                 mov     [ebp+var_4], ecx
.text:00000A56                 mov     ecx, [ebp+var_4] ; this
.text:00000A59                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:00000A5E                 mov     ecx, [ebp+var_4]
.text:00000A61                 add     ecx, 4          ; this
.text:00000A64                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:00000A69                 mov     ecx, [ebp+var_4]
.text:00000A6C                 add     ecx, 8          ; this
.text:00000A6F                 call    ??0ICompressWriteCoderProperties@@QAE@XZ ; ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)
.text:00000A74                 mov     ecx, [ebp+var_4]
.text:00000A77                 add     ecx, 0Ch        ; this
.text:00000A7A                 call    ??0CDelta@@QAE@XZ ; CDelta::CDelta(void)
.text:00000A7F                 mov     ecx, [ebp+var_4]
.text:00000A82                 add     ecx, 110h       ; this
.text:00000A88                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000A8D                 mov     eax, [ebp+var_4]
.text:00000A90                 mov     dword ptr [eax], offset ??_7CDeltaEncoder@@6BICompressFilter@@@ ; const CDeltaEncoder::`vftable'{for `ICompressFilter'}
.text:00000A96                 mov     ecx, [ebp+var_4]
.text:00000A99                 mov     dword ptr [ecx+4], offset ??_7CDeltaEncoder@@6BICompressSetCoderProperties@@@ ; const CDeltaEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000AA0                 mov     edx, [ebp+var_4]
.text:00000AA3                 mov     dword ptr [edx+8], offset ??_7CDeltaEncoder@@6BICompressWriteCoderProperties@@@ ; const CDeltaEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.text:00000AAA                 mov     eax, [ebp+var_4]
.text:00000AAD                 add     esp, 4
.text:00000AB0                 cmp     ebp, esp
.text:00000AB2                 call    __RTC_CheckEsp
.text:00000AB7                 mov     esp, ebp
.text:00000AB9                 pop     ebp
.text:00000ABA                 retn
.text:00000ABA ??0CDeltaEncoder@@QAE@XZ endp
.text:00000ABA
.text:00000ABA ; ---------------------------------------------------------------------------
.text:00000ABB                 align 4
.text:00000ABB _text           ends
.text:00000ABB
.rdata:00000ABC ; ===========================================================================
.rdata:00000ABC
.rdata:00000ABC ; Segment type: Pure data
.rdata:00000ABC ; Segment permissions: Read
.rdata:00000ABC _rdata          segment dword public 'DATA' use32
.rdata:00000ABC                 assume cs:_rdata
.rdata:00000ABC                 ;org 0ABCh
.rdata:00000ABC ; COMDAT (pick largest)
.rdata:00000ABC                 dd offset ??_R4CDeltaEncoder@@6BICompressWriteCoderProperties@@@ ; const CDeltaEncoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata:00000AC0                 public ??_7CDeltaEncoder@@6BICompressWriteCoderProperties@@@
.rdata:00000AC0 ; const CDeltaEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.rdata:00000AC0 ??_7CDeltaEncoder@@6BICompressWriteCoderProperties@@@ dd offset ?QueryInterface@CDeltaEncoder@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000AC0                                         ; DATA XREF: CDeltaEncoder::CDeltaEncoder(void)+5Bo
.rdata:00000AC0                                         ; [thunk]:CDeltaEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000AC4                 dd offset ?AddRef@CDeltaEncoder@@W7AGKXZ ; [thunk]:CDeltaEncoder::AddRef`adjustor{8}' (void)
.rdata:00000AC8                 dd offset ?Release@CDeltaEncoder@@W7AGKXZ ; [thunk]:CDeltaEncoder::Release`adjustor{8}' (void)
.rdata:00000ACC                 dd offset ?WriteCoderProperties@CDeltaEncoder@@UAGJPAUISequentialOutStream@@@Z ; CDeltaEncoder::WriteCoderProperties(ISequentialOutStream *)
.rdata:00000ACC _rdata          ends
.rdata:00000ACC
.rdata:00000AD0 ; ===========================================================================
.rdata:00000AD0
.rdata:00000AD0 ; Segment type: Pure data
.rdata:00000AD0 ; Segment permissions: Read
.rdata:00000AD0 _rdata          segment dword public 'DATA' use32
.rdata:00000AD0                 assume cs:_rdata
.rdata:00000AD0                 ;org 0AD0h
.rdata:00000AD0 ; COMDAT (pick largest)
.rdata:00000AD0                 dd offset ??_R4CDeltaEncoder@@6BICompressSetCoderProperties@@@ ; const CDeltaEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00000AD4                 public ??_7CDeltaEncoder@@6BICompressSetCoderProperties@@@
.rdata:00000AD4 ; const CDeltaEncoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00000AD4 ??_7CDeltaEncoder@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CDeltaEncoder@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000AD4                                         ; DATA XREF: CDeltaEncoder::CDeltaEncoder(void)+51o
.rdata:00000AD4                                         ; [thunk]:CDeltaEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000AD8                 dd offset ?AddRef@CDeltaEncoder@@W3AGKXZ ; [thunk]:CDeltaEncoder::AddRef`adjustor{4}' (void)
.rdata:00000ADC                 dd offset ?Release@CDeltaEncoder@@W3AGKXZ ; [thunk]:CDeltaEncoder::Release`adjustor{4}' (void)
.rdata:00000AE0                 dd offset ?SetCoderProperties@CDeltaEncoder@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; CDeltaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00000AE0 _rdata          ends
.rdata:00000AE0
.rdata:00000AE4 ; ===========================================================================
.rdata:00000AE4
.rdata:00000AE4 ; Segment type: Pure data
.rdata:00000AE4 ; Segment permissions: Read
.rdata:00000AE4 _rdata          segment dword public 'DATA' use32
.rdata:00000AE4                 assume cs:_rdata
.rdata:00000AE4                 ;org 0AE4h
.rdata:00000AE4 ; COMDAT (pick largest)
.rdata:00000AE4                 dd offset ??_R4CDeltaEncoder@@6BICompressFilter@@@ ; const CDeltaEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:00000AE8                 public ??_7CDeltaEncoder@@6BICompressFilter@@@
.rdata:00000AE8 ; const CDeltaEncoder::`vftable'{for `ICompressFilter'}
.rdata:00000AE8 ??_7CDeltaEncoder@@6BICompressFilter@@@ dd offset ?QueryInterface@CDeltaEncoder@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000AE8                                         ; DATA XREF: CDeltaEncoder::CDeltaEncoder(void)+48o
.rdata:00000AE8                                         ; CDeltaEncoder::QueryInterface(_GUID const &,void * *)
.rdata:00000AEC                 dd offset ?AddRef@CDeltaEncoder@@UAGKXZ ; CDeltaEncoder::AddRef(void)
.rdata:00000AF0                 dd offset ?Release@CDeltaEncoder@@UAGKXZ ; CDeltaEncoder::Release(void)
.rdata:00000AF4                 dd offset ?Init@CDeltaEncoder@@UAGJXZ ; CDeltaEncoder::Init(void)
.rdata:00000AF8                 dd offset ?Filter@CDeltaEncoder@@UAGIPAEI@Z ; CDeltaEncoder::Filter(uchar *,uint)
.rdata:00000AF8 _rdata          ends
.rdata:00000AF8
.rdata$r:00000AFC ; ===========================================================================
.rdata$r:00000AFC
.rdata$r:00000AFC ; Segment type: Pure data
.rdata$r:00000AFC ; Segment permissions: Read
.rdata$r:00000AFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AFC                 assume cs:_rdata$r
.rdata$r:00000AFC                 ;org 0AFCh
.rdata$r:00000AFC ; COMDAT (pick any)
.rdata$r:00000AFC                 public ??_R4CDeltaEncoder@@6BICompressFilter@@@
.rdata$r:00000AFC ; const CDeltaEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00000AFC ??_R4CDeltaEncoder@@6BICompressFilter@@@ db    0
.rdata$r:00000AFC                                         ; DATA XREF: .rdata:00000AE4o
.rdata$r:00000AFD                 db    0
.rdata$r:00000AFE                 db    0
.rdata$r:00000AFF                 db    0
.rdata$r:00000B00                 db    0
.rdata$r:00000B01                 db    0
.rdata$r:00000B02                 db    0
.rdata$r:00000B03                 db    0
.rdata$r:00000B04                 db    0
.rdata$r:00000B05                 db    0
.rdata$r:00000B06                 db    0
.rdata$r:00000B07                 db    0
.rdata$r:00000B08                 dd offset ??_R0?AVCDeltaEncoder@@@8 ; CDeltaEncoder `RTTI Type Descriptor'
.rdata$r:00000B0C                 dd offset ??_R3CDeltaEncoder@@8 ; CDeltaEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B0C _rdata$r        ends
.rdata$r:00000B0C
.data:00000B10 ; ===========================================================================
.data:00000B10
.data:00000B10 ; Segment type: Pure data
.data:00000B10 ; Segment permissions: Read/Write
.data:00000B10 _data           segment dword public 'DATA' use32
.data:00000B10                 assume cs:_data
.data:00000B10                 ;org 0B10h
.data:00000B10 ; COMDAT (pick any)
.data:00000B10                 public ??_R0?AVCDeltaEncoder@@@8
.data:00000B10 ; class CDeltaEncoder `RTTI Type Descriptor'
.data:00000B10 ??_R0?AVCDeltaEncoder@@@8 dd offset ??_7type_info@@6B@
.data:00000B10                                         ; DATA XREF: .rdata$r:00000B08o
.data:00000B10                                         ; .rdata$r:CDeltaEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000B10                                         ; const type_info::`vftable'
.data:00000B14                 align 8
.data:00000B18 a_?avcdeltaenco db '.?AVCDeltaEncoder@@',0
.data:00000B18 _data           ends
.data:00000B18
.rdata$r:00000B2C ; ===========================================================================
.rdata$r:00000B2C
.rdata$r:00000B2C ; Segment type: Pure data
.rdata$r:00000B2C ; Segment permissions: Read
.rdata$r:00000B2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B2C                 assume cs:_rdata$r
.rdata$r:00000B2C                 ;org 0B2Ch
.rdata$r:00000B2C ; COMDAT (pick any)
.rdata$r:00000B2C                 public ??_R3CDeltaEncoder@@8
.rdata$r:00000B2C ; CDeltaEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B2C ??_R3CDeltaEncoder@@8 db    0           ; DATA XREF: .rdata$r:00000B0Co
.rdata$r:00000B2C                                         ; .rdata$r:00000B7Co ...
.rdata$r:00000B2D                 db    0
.rdata$r:00000B2E                 db    0
.rdata$r:00000B2F                 db    0
.rdata$r:00000B30                 db    5
.rdata$r:00000B31                 db    0
.rdata$r:00000B32                 db    0
.rdata$r:00000B33                 db    0
.rdata$r:00000B34                 db    9
.rdata$r:00000B35                 db    0
.rdata$r:00000B36                 db    0
.rdata$r:00000B37                 db    0
.rdata$r:00000B38                 dd offset ??_R2CDeltaEncoder@@8 ; CDeltaEncoder::`RTTI Base Class Array'
.rdata$r:00000B38 _rdata$r        ends
.rdata$r:00000B38
.rdata$r:00000B3C ; ===========================================================================
.rdata$r:00000B3C
.rdata$r:00000B3C ; Segment type: Pure data
.rdata$r:00000B3C ; Segment permissions: Read
.rdata$r:00000B3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B3C                 assume cs:_rdata$r
.rdata$r:00000B3C                 ;org 0B3Ch
.rdata$r:00000B3C ; COMDAT (pick any)
.rdata$r:00000B3C                 public ??_R2CDeltaEncoder@@8
.rdata$r:00000B3C ; CDeltaEncoder::`RTTI Base Class Array'
.rdata$r:00000B3C ??_R2CDeltaEncoder@@8 dd offset ??_R1A@?0A@EA@CDeltaEncoder@@8
.rdata$r:00000B3C                                         ; DATA XREF: .rdata$r:00000B38o
.rdata$r:00000B3C                                         ; CDeltaEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000B40                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000B44                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000B48                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000B4C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000B50                 dd offset ??_R17?0A@EA@ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000B54                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000B58                 dd offset ??_R1M@?0A@EN@CDelta@@8 ; CDelta::`RTTI Base Class Descriptor at (12,-1,0,77)'
.rdata$r:00000B5C                 dd offset ??_R1BBA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (272,-1,0,64)'
.rdata$r:00000B60                 db    0
.rdata$r:00000B61                 align 4
.rdata$r:00000B61 _rdata$r        ends
.rdata$r:00000B61
.rdata$r:00000B64 ; ===========================================================================
.rdata$r:00000B64
.rdata$r:00000B64 ; Segment type: Pure data
.rdata$r:00000B64 ; Segment permissions: Read
.rdata$r:00000B64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B64                 assume cs:_rdata$r
.rdata$r:00000B64                 ;org 0B64h
.rdata$r:00000B64 ; COMDAT (pick any)
.rdata$r:00000B64                 public ??_R1A@?0A@EA@CDeltaEncoder@@8
.rdata$r:00000B64 ; CDeltaEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000B64 ??_R1A@?0A@EA@CDeltaEncoder@@8 dd offset ??_R0?AVCDeltaEncoder@@@8
.rdata$r:00000B64                                         ; DATA XREF: .rdata$r:CDeltaEncoder::`RTTI Base Class Array'o
.rdata$r:00000B64                                         ; CDeltaEncoder `RTTI Type Descriptor'
.rdata$r:00000B68                 db    8
.rdata$r:00000B69                 db    0
.rdata$r:00000B6A                 db    0
.rdata$r:00000B6B                 db    0
.rdata$r:00000B6C                 db    0
.rdata$r:00000B6D                 db    0
.rdata$r:00000B6E                 db    0
.rdata$r:00000B6F                 db    0
.rdata$r:00000B70                 db 0FFh
.rdata$r:00000B71                 db 0FFh
.rdata$r:00000B72                 db 0FFh
.rdata$r:00000B73                 db 0FFh
.rdata$r:00000B74                 db    0
.rdata$r:00000B75                 db    0
.rdata$r:00000B76                 db    0
.rdata$r:00000B77                 db    0
.rdata$r:00000B78                 db  40h ; @
.rdata$r:00000B79                 db    0
.rdata$r:00000B7A                 db    0
.rdata$r:00000B7B                 db    0
.rdata$r:00000B7C                 dd offset ??_R3CDeltaEncoder@@8 ; CDeltaEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B7C _rdata$r        ends
.rdata$r:00000B7C
.rdata$r:00000B80 ; ===========================================================================
.rdata$r:00000B80
.rdata$r:00000B80 ; Segment type: Pure data
.rdata$r:00000B80 ; Segment permissions: Read
.rdata$r:00000B80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B80                 assume cs:_rdata$r
.rdata$r:00000B80                 ;org 0B80h
.rdata$r:00000B80 ; COMDAT (pick any)
.rdata$r:00000B80                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000B80 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000B80 ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00000B80                                         ; DATA XREF: .rdata$r:00000B48o
.rdata$r:00000B80                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000B84                 db    1
.rdata$r:00000B85                 db    0
.rdata$r:00000B86                 db    0
.rdata$r:00000B87                 db    0
.rdata$r:00000B88                 db    4
.rdata$r:00000B89                 db    0
.rdata$r:00000B8A                 db    0
.rdata$r:00000B8B                 db    0
.rdata$r:00000B8C                 db 0FFh
.rdata$r:00000B8D                 db 0FFh
.rdata$r:00000B8E                 db 0FFh
.rdata$r:00000B8F                 db 0FFh
.rdata$r:00000B90                 db    0
.rdata$r:00000B91                 db    0
.rdata$r:00000B92                 db    0
.rdata$r:00000B93                 db    0
.rdata$r:00000B94                 db  40h ; @
.rdata$r:00000B95                 db    0
.rdata$r:00000B96                 db    0
.rdata$r:00000B97                 db    0
.rdata$r:00000B98                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B98 _rdata$r        ends
.rdata$r:00000B98
.data:00000B9C ; ===========================================================================
.data:00000B9C
.data:00000B9C ; Segment type: Pure data
.data:00000B9C ; Segment permissions: Read/Write
.data:00000B9C _data           segment dword public 'DATA' use32
.data:00000B9C                 assume cs:_data
.data:00000B9C                 ;org 0B9Ch
.data:00000B9C ; COMDAT (pick any)
.data:00000B9C                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:00000B9C ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:00000B9C ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00000B9C                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000B9C                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000B9C                                         ; const type_info::`vftable'
.data:00000BA0                 db    0
.data:00000BA1                 db    0
.data:00000BA2                 db    0
.data:00000BA3                 db    0
.data:00000BA4                 db  2Eh ; .
.data:00000BA5                 db  3Fh ; ?
.data:00000BA6                 db  41h ; A
.data:00000BA7                 db  55h ; U
.data:00000BA8                 db  49h ; I
.data:00000BA9                 db  43h ; C
.data:00000BAA                 db  6Fh ; o
.data:00000BAB                 db  6Dh ; m
.data:00000BAC                 db  70h ; p
.data:00000BAD                 db  72h ; r
.data:00000BAE                 db  65h ; e
.data:00000BAF                 db  73h ; s
.data:00000BB0                 db  73h ; s
.data:00000BB1                 db  53h ; S
.data:00000BB2                 db  65h ; e
.data:00000BB3                 db  74h ; t
.data:00000BB4                 db  43h ; C
.data:00000BB5                 db  6Fh ; o
.data:00000BB6                 db  64h ; d
.data:00000BB7                 db  65h ; e
.data:00000BB8                 db  72h ; r
.data:00000BB9                 db  50h ; P
.data:00000BBA                 db  72h ; r
.data:00000BBB                 db  6Fh ; o
.data:00000BBC                 db  70h ; p
.data:00000BBD                 db  65h ; e
.data:00000BBE                 db  72h ; r
.data:00000BBF                 db  74h ; t
.data:00000BC0                 db  69h ; i
.data:00000BC1                 db  65h ; e
.data:00000BC2                 db  73h ; s
.data:00000BC3                 db  40h ; @
.data:00000BC4                 db  40h ; @
.data:00000BC5                 db    0
.data:00000BC6                 align 4
.data:00000BC6 _data           ends
.data:00000BC6
.rdata$r:00000BC8 ; ===========================================================================
.rdata$r:00000BC8
.rdata$r:00000BC8 ; Segment type: Pure data
.rdata$r:00000BC8 ; Segment permissions: Read
.rdata$r:00000BC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BC8                 assume cs:_rdata$r
.rdata$r:00000BC8                 ;org 0BC8h
.rdata$r:00000BC8 ; COMDAT (pick any)
.rdata$r:00000BC8                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:00000BC8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000BC8 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:00000BC8                                         ; DATA XREF: .rdata$r:00000B98o
.rdata$r:00000BC8                                         ; .rdata$r:00000BFCo ...
.rdata$r:00000BC9                 db    0
.rdata$r:00000BCA                 db    0
.rdata$r:00000BCB                 db    0
.rdata$r:00000BCC                 db    0
.rdata$r:00000BCD                 db    0
.rdata$r:00000BCE                 db    0
.rdata$r:00000BCF                 db    0
.rdata$r:00000BD0                 db    2
.rdata$r:00000BD1                 db    0
.rdata$r:00000BD2                 db    0
.rdata$r:00000BD3                 db    0
.rdata$r:00000BD4                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000BD4 _rdata$r        ends
.rdata$r:00000BD4
.rdata$r:00000BD8 ; ===========================================================================
.rdata$r:00000BD8
.rdata$r:00000BD8 ; Segment type: Pure data
.rdata$r:00000BD8 ; Segment permissions: Read
.rdata$r:00000BD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BD8                 assume cs:_rdata$r
.rdata$r:00000BD8                 ;org 0BD8h
.rdata$r:00000BD8 ; COMDAT (pick any)
.rdata$r:00000BD8                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00000BD8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000BD8 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000BD8                                         ; DATA XREF: .rdata$r:00000BD4o
.rdata$r:00000BD8                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000BDC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000BE0                 db    0
.rdata$r:00000BE1                 align 4
.rdata$r:00000BE1 _rdata$r        ends
.rdata$r:00000BE1
.rdata$r:00000BE4 ; ===========================================================================
.rdata$r:00000BE4
.rdata$r:00000BE4 ; Segment type: Pure data
.rdata$r:00000BE4 ; Segment permissions: Read
.rdata$r:00000BE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BE4                 assume cs:_rdata$r
.rdata$r:00000BE4                 ;org 0BE4h
.rdata$r:00000BE4 ; COMDAT (pick any)
.rdata$r:00000BE4                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000BE4 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000BE4 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00000BE4                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:00000BE4                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000BE8                 db    1
.rdata$r:00000BE9                 db    0
.rdata$r:00000BEA                 db    0
.rdata$r:00000BEB                 db    0
.rdata$r:00000BEC                 db    0
.rdata$r:00000BED                 db    0
.rdata$r:00000BEE                 db    0
.rdata$r:00000BEF                 db    0
.rdata$r:00000BF0                 db 0FFh
.rdata$r:00000BF1                 db 0FFh
.rdata$r:00000BF2                 db 0FFh
.rdata$r:00000BF3                 db 0FFh
.rdata$r:00000BF4                 db    0
.rdata$r:00000BF5                 db    0
.rdata$r:00000BF6                 db    0
.rdata$r:00000BF7                 db    0
.rdata$r:00000BF8                 db  40h ; @
.rdata$r:00000BF9                 db    0
.rdata$r:00000BFA                 db    0
.rdata$r:00000BFB                 db    0
.rdata$r:00000BFC                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000BFC _rdata$r        ends
.rdata$r:00000BFC
.rdata$r:00000C00 ; ===========================================================================
.rdata$r:00000C00
.rdata$r:00000C00 ; Segment type: Pure data
.rdata$r:00000C00 ; Segment permissions: Read
.rdata$r:00000C00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C00                 assume cs:_rdata$r
.rdata$r:00000C00                 ;org 0C00h
.rdata$r:00000C00 ; COMDAT (pick any)
.rdata$r:00000C00                 public ??_R17?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:00000C00 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00000C00 ??_R17?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:00000C00                                         ; DATA XREF: .rdata$r:00000B50o
.rdata$r:00000C00                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00000C04                 db    1
.rdata$r:00000C05                 db    0
.rdata$r:00000C06                 db    0
.rdata$r:00000C07                 db    0
.rdata$r:00000C08                 db    8
.rdata$r:00000C09                 db    0
.rdata$r:00000C0A                 db    0
.rdata$r:00000C0B                 db    0
.rdata$r:00000C0C                 db 0FFh
.rdata$r:00000C0D                 db 0FFh
.rdata$r:00000C0E                 db 0FFh
.rdata$r:00000C0F                 db 0FFh
.rdata$r:00000C10                 db    0
.rdata$r:00000C11                 db    0
.rdata$r:00000C12                 db    0
.rdata$r:00000C13                 db    0
.rdata$r:00000C14                 db  40h ; @
.rdata$r:00000C15                 db    0
.rdata$r:00000C16                 db    0
.rdata$r:00000C17                 db    0
.rdata$r:00000C18                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C18 _rdata$r        ends
.rdata$r:00000C18
.data:00000C1C ; ===========================================================================
.data:00000C1C
.data:00000C1C ; Segment type: Pure data
.data:00000C1C ; Segment permissions: Read/Write
.data:00000C1C _data           segment dword public 'DATA' use32
.data:00000C1C                 assume cs:_data
.data:00000C1C                 ;org 0C1Ch
.data:00000C1C ; COMDAT (pick any)
.data:00000C1C                 public ??_R0?AUICompressWriteCoderProperties@@@8
.data:00000C1C ; struct ICompressWriteCoderProperties `RTTI Type Descriptor'
.data:00000C1C ??_R0?AUICompressWriteCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00000C1C                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00000C1C                                         ; .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000C1C                                         ; const type_info::`vftable'
.data:00000C20                 db    0
.data:00000C21                 db    0
.data:00000C22                 db    0
.data:00000C23                 db    0
.data:00000C24                 db  2Eh ; .
.data:00000C25                 db  3Fh ; ?
.data:00000C26                 db  41h ; A
.data:00000C27                 db  55h ; U
.data:00000C28                 db  49h ; I
.data:00000C29                 db  43h ; C
.data:00000C2A                 db  6Fh ; o
.data:00000C2B                 db  6Dh ; m
.data:00000C2C                 db  70h ; p
.data:00000C2D                 db  72h ; r
.data:00000C2E                 db  65h ; e
.data:00000C2F                 db  73h ; s
.data:00000C30                 db  73h ; s
.data:00000C31                 db  57h ; W
.data:00000C32                 db  72h ; r
.data:00000C33                 db  69h ; i
.data:00000C34                 db  74h ; t
.data:00000C35                 db  65h ; e
.data:00000C36                 db  43h ; C
.data:00000C37                 db  6Fh ; o
.data:00000C38                 db  64h ; d
.data:00000C39                 db  65h ; e
.data:00000C3A                 db  72h ; r
.data:00000C3B                 db  50h ; P
.data:00000C3C                 db  72h ; r
.data:00000C3D                 db  6Fh ; o
.data:00000C3E                 db  70h ; p
.data:00000C3F                 db  65h ; e
.data:00000C40                 db  72h ; r
.data:00000C41                 db  74h ; t
.data:00000C42                 db  69h ; i
.data:00000C43                 db  65h ; e
.data:00000C44                 db  73h ; s
.data:00000C45                 db  40h ; @
.data:00000C46                 db  40h ; @
.data:00000C47                 db    0
.data:00000C47 _data           ends
.data:00000C47
.rdata$r:00000C48 ; ===========================================================================
.rdata$r:00000C48
.rdata$r:00000C48 ; Segment type: Pure data
.rdata$r:00000C48 ; Segment permissions: Read
.rdata$r:00000C48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C48                 assume cs:_rdata$r
.rdata$r:00000C48                 ;org 0C48h
.rdata$r:00000C48 ; COMDAT (pick any)
.rdata$r:00000C48                 public ??_R3ICompressWriteCoderProperties@@8
.rdata$r:00000C48 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C48 ??_R3ICompressWriteCoderProperties@@8 db    0
.rdata$r:00000C48                                         ; DATA XREF: .rdata$r:00000C18o
.rdata$r:00000C48                                         ; .rdata$r:00000C7Co ...
.rdata$r:00000C49                 db    0
.rdata$r:00000C4A                 db    0
.rdata$r:00000C4B                 db    0
.rdata$r:00000C4C                 db    0
.rdata$r:00000C4D                 db    0
.rdata$r:00000C4E                 db    0
.rdata$r:00000C4F                 db    0
.rdata$r:00000C50                 db    2
.rdata$r:00000C51                 db    0
.rdata$r:00000C52                 db    0
.rdata$r:00000C53                 db    0
.rdata$r:00000C54                 dd offset ??_R2ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:00000C54 _rdata$r        ends
.rdata$r:00000C54
.rdata$r:00000C58 ; ===========================================================================
.rdata$r:00000C58
.rdata$r:00000C58 ; Segment type: Pure data
.rdata$r:00000C58 ; Segment permissions: Read
.rdata$r:00000C58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C58                 assume cs:_rdata$r
.rdata$r:00000C58                 ;org 0C58h
.rdata$r:00000C58 ; COMDAT (pick any)
.rdata$r:00000C58                 public ??_R2ICompressWriteCoderProperties@@8
.rdata$r:00000C58 ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:00000C58 ??_R2ICompressWriteCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:00000C58                                         ; DATA XREF: .rdata$r:00000C54o
.rdata$r:00000C58                                         ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000C5C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000C60                 db    0
.rdata$r:00000C61                 align 4
.rdata$r:00000C61 _rdata$r        ends
.rdata$r:00000C61
.rdata$r:00000C64 ; ===========================================================================
.rdata$r:00000C64
.rdata$r:00000C64 ; Segment type: Pure data
.rdata$r:00000C64 ; Segment permissions: Read
.rdata$r:00000C64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C64                 assume cs:_rdata$r
.rdata$r:00000C64                 ;org 0C64h
.rdata$r:00000C64 ; COMDAT (pick any)
.rdata$r:00000C64                 public ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:00000C64 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000C64 ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:00000C64                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Array'o
.rdata$r:00000C64                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00000C68                 db    1
.rdata$r:00000C69                 db    0
.rdata$r:00000C6A                 db    0
.rdata$r:00000C6B                 db    0
.rdata$r:00000C6C                 db    0
.rdata$r:00000C6D                 db    0
.rdata$r:00000C6E                 db    0
.rdata$r:00000C6F                 db    0
.rdata$r:00000C70                 db 0FFh
.rdata$r:00000C71                 db 0FFh
.rdata$r:00000C72                 db 0FFh
.rdata$r:00000C73                 db 0FFh
.rdata$r:00000C74                 db    0
.rdata$r:00000C75                 db    0
.rdata$r:00000C76                 db    0
.rdata$r:00000C77                 db    0
.rdata$r:00000C78                 db  40h ; @
.rdata$r:00000C79                 db    0
.rdata$r:00000C7A                 db    0
.rdata$r:00000C7B                 db    0
.rdata$r:00000C7C                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C7C _rdata$r        ends
.rdata$r:00000C7C
.rdata$r:00000C80 ; ===========================================================================
.rdata$r:00000C80
.rdata$r:00000C80 ; Segment type: Pure data
.rdata$r:00000C80 ; Segment permissions: Read
.rdata$r:00000C80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C80                 assume cs:_rdata$r
.rdata$r:00000C80                 ;org 0C80h
.rdata$r:00000C80 ; COMDAT (pick any)
.rdata$r:00000C80                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00000C80 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00000C80 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000C80                                         ; DATA XREF: .rdata$r:00000B54o
.rdata$r:00000C80                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000C84                 align 8
.rdata$r:00000C88                 db    8
.rdata$r:00000C89                 db    0
.rdata$r:00000C8A                 db    0
.rdata$r:00000C8B                 db    0
.rdata$r:00000C8C                 db 0FFh
.rdata$r:00000C8D                 db 0FFh
.rdata$r:00000C8E                 db 0FFh
.rdata$r:00000C8F                 db 0FFh
.rdata$r:00000C90                 db    0
.rdata$r:00000C91                 db    0
.rdata$r:00000C92                 db    0
.rdata$r:00000C93                 db    0
.rdata$r:00000C94                 db  42h ; B
.rdata$r:00000C95                 db    0
.rdata$r:00000C96                 db    0
.rdata$r:00000C97                 db    0
.rdata$r:00000C98                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C98 _rdata$r        ends
.rdata$r:00000C98
.rdata$r:00000C9C ; ===========================================================================
.rdata$r:00000C9C
.rdata$r:00000C9C ; Segment type: Pure data
.rdata$r:00000C9C ; Segment permissions: Read
.rdata$r:00000C9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C9C                 assume cs:_rdata$r
.rdata$r:00000C9C                 ;org 0C9Ch
.rdata$r:00000C9C ; COMDAT (pick any)
.rdata$r:00000C9C                 public ??_R1M@?0A@EN@CDelta@@8
.rdata$r:00000C9C ; CDelta::`RTTI Base Class Descriptor at (12, -1, 0, 77)'
.rdata$r:00000C9C ??_R1M@?0A@EN@CDelta@@8 dd offset ??_R0?AUCDelta@@@8
.rdata$r:00000C9C                                         ; DATA XREF: .rdata$r:00000B58o
.rdata$r:00000C9C                                         ; CDelta `RTTI Type Descriptor'
.rdata$r:00000CA0                 db    0
.rdata$r:00000CA1                 db    0
.rdata$r:00000CA2                 db    0
.rdata$r:00000CA3                 db    0
.rdata$r:00000CA4                 db  0Ch
.rdata$r:00000CA5                 db    0
.rdata$r:00000CA6                 db    0
.rdata$r:00000CA7                 db    0
.rdata$r:00000CA8                 db 0FFh
.rdata$r:00000CA9                 db 0FFh
.rdata$r:00000CAA                 db 0FFh
.rdata$r:00000CAB                 db 0FFh
.rdata$r:00000CAC                 db    0
.rdata$r:00000CAD                 db    0
.rdata$r:00000CAE                 db    0
.rdata$r:00000CAF                 db    0
.rdata$r:00000CB0                 db  4Dh ; M
.rdata$r:00000CB1                 db    0
.rdata$r:00000CB2                 db    0
.rdata$r:00000CB3                 db    0
.rdata$r:00000CB4                 dd offset ??_R3CDelta@@8 ; CDelta::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000CB4 _rdata$r        ends
.rdata$r:00000CB4
.rdata$r:00000CB8 ; ===========================================================================
.rdata$r:00000CB8
.rdata$r:00000CB8 ; Segment type: Pure data
.rdata$r:00000CB8 ; Segment permissions: Read
.rdata$r:00000CB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000CB8                 assume cs:_rdata$r
.rdata$r:00000CB8                 ;org 0CB8h
.rdata$r:00000CB8 ; COMDAT (pick any)
.rdata$r:00000CB8                 public ??_R1BBA@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000CB8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (272, -1, 0, 64)'
.rdata$r:00000CB8 ??_R1BBA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000CB8                                         ; DATA XREF: .rdata$r:00000B5Co
.rdata$r:00000CB8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000CBC                 align 10h
.rdata$r:00000CC0                 dd offset loc_110
.rdata$r:00000CC4                 db 0FFh
.rdata$r:00000CC5                 db 0FFh
.rdata$r:00000CC6                 db 0FFh
.rdata$r:00000CC7                 db 0FFh
.rdata$r:00000CC8                 db    0
.rdata$r:00000CC9                 db    0
.rdata$r:00000CCA                 db    0
.rdata$r:00000CCB                 db    0
.rdata$r:00000CCC                 db  40h ; @
.rdata$r:00000CCD                 db    0
.rdata$r:00000CCE                 db    0
.rdata$r:00000CCF                 db    0
.rdata$r:00000CD0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000CD0 _rdata$r        ends
.rdata$r:00000CD0
.rdata$r:00000CD4 ; ===========================================================================
.rdata$r:00000CD4
.rdata$r:00000CD4 ; Segment type: Pure data
.rdata$r:00000CD4 ; Segment permissions: Read
.rdata$r:00000CD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000CD4                 assume cs:_rdata$r
.rdata$r:00000CD4                 ;org 0CD4h
.rdata$r:00000CD4 ; COMDAT (pick any)
.rdata$r:00000CD4                 public ??_R4CDeltaEncoder@@6BICompressSetCoderProperties@@@
.rdata$r:00000CD4 ; const CDeltaEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00000CD4 ??_R4CDeltaEncoder@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00000CD4                                         ; DATA XREF: .rdata:00000AD0o
.rdata$r:00000CD5                 db    0
.rdata$r:00000CD6                 db    0
.rdata$r:00000CD7                 db    0
.rdata$r:00000CD8                 db    4
.rdata$r:00000CD9                 db    0
.rdata$r:00000CDA                 db    0
.rdata$r:00000CDB                 db    0
.rdata$r:00000CDC                 db    0
.rdata$r:00000CDD                 db    0
.rdata$r:00000CDE                 db    0
.rdata$r:00000CDF                 db    0
.rdata$r:00000CE0                 dd offset ??_R0?AVCDeltaEncoder@@@8 ; CDeltaEncoder `RTTI Type Descriptor'
.rdata$r:00000CE4                 dd offset ??_R3CDeltaEncoder@@8 ; CDeltaEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000CE4 _rdata$r        ends
.rdata$r:00000CE4
.rdata$r:00000CE8 ; ===========================================================================
.rdata$r:00000CE8
.rdata$r:00000CE8 ; Segment type: Pure data
.rdata$r:00000CE8 ; Segment permissions: Read
.rdata$r:00000CE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000CE8                 assume cs:_rdata$r
.rdata$r:00000CE8                 ;org 0CE8h
.rdata$r:00000CE8 ; COMDAT (pick any)
.rdata$r:00000CE8                 public ??_R4CDeltaEncoder@@6BICompressWriteCoderProperties@@@
.rdata$r:00000CE8 ; const CDeltaEncoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata$r:00000CE8 ??_R4CDeltaEncoder@@6BICompressWriteCoderProperties@@@ db    0
.rdata$r:00000CE8                                         ; DATA XREF: .rdata:00000ABCo
.rdata$r:00000CE9                 db    0
.rdata$r:00000CEA                 db    0
.rdata$r:00000CEB                 db    0
.rdata$r:00000CEC                 db    8
.rdata$r:00000CED                 db    0
.rdata$r:00000CEE                 db    0
.rdata$r:00000CEF                 db    0
.rdata$r:00000CF0                 db    0
.rdata$r:00000CF1                 db    0
.rdata$r:00000CF2                 db    0
.rdata$r:00000CF3                 db    0
.rdata$r:00000CF4                 dd offset ??_R0?AVCDeltaEncoder@@@8 ; CDeltaEncoder `RTTI Type Descriptor'
.rdata$r:00000CF8                 dd offset ??_R3CDeltaEncoder@@8 ; CDeltaEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000CF8 _rdata$r        ends
.rdata$r:00000CF8
.text:00000CFC ; ===========================================================================
.text:00000CFC
.text:00000CFC ; Segment type: Pure code
.text:00000CFC ; Segment permissions: Read/Execute
.text:00000CFC _text           segment para public 'CODE' use32
.text:00000CFC                 assume cs:_text
.text:00000CFC                 ;org 0CFCh
.text:00000CFC ; COMDAT (pick any)
.text:00000CFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CFC
.text:00000CFC ; =============== S U B R O U T I N E =======================================
.text:00000CFC
.text:00000CFC ; Attributes: bp-based frame
.text:00000CFC
.text:00000CFC ; __int32 __stdcall CDeltaEncoder::QueryInterface(CDeltaEncoder *this, const struct _GUID *Buf1, void **)
.text:00000CFC                 public ?QueryInterface@CDeltaEncoder@@UAGJABU_GUID@@PAPAX@Z
.text:00000CFC ?QueryInterface@CDeltaEncoder@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000CFC                                         ; CODE XREF: [thunk]:CDeltaEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00000CFC                                         ; [thunk]:CDeltaEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:00000CFC                                         ; DATA XREF: ...
.text:00000CFC
.text:00000CFC var_C           = dword ptr -0Ch
.text:00000CFC var_8           = dword ptr -8
.text:00000CFC var_4           = dword ptr -4
.text:00000CFC this            = dword ptr  8
.text:00000CFC Buf1            = dword ptr  0Ch
.text:00000CFC arg_8           = dword ptr  10h
.text:00000CFC
.text:00000CFC                 push    ebp
.text:00000CFD                 mov     ebp, esp
.text:00000CFF                 sub     esp, 0Ch
.text:00000D02                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000D09                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000D10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D17                 mov     eax, [ebp+arg_8]
.text:00000D1A                 mov     dword ptr [eax], 0
.text:00000D20                 push    offset _IID_IUnknown ; Buf2
.text:00000D25                 mov     ecx, [ebp+Buf1]
.text:00000D28                 push    ecx             ; Buf1
.text:00000D29                 call    ___@8           ; __(x,x)
.text:00000D2E                 test    eax, eax
.text:00000D30                 jz      short loc_D54
.text:00000D32                 cmp     [ebp+this], 0
.text:00000D36                 jz      short loc_D43
.text:00000D38                 mov     edx, [ebp+this]
.text:00000D3B                 add     edx, 4
.text:00000D3E                 mov     [ebp+var_4], edx
.text:00000D41                 jmp     short loc_D4A
.text:00000D43 ; ---------------------------------------------------------------------------
.text:00000D43
.text:00000D43 loc_D43:                                ; CODE XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *)+3Aj
.text:00000D43                 mov     [ebp+var_4], 0
.text:00000D4A
.text:00000D4A loc_D4A:                                ; CODE XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *)+45j
.text:00000D4A                 mov     eax, [ebp+arg_8]
.text:00000D4D                 mov     ecx, [ebp+var_4]
.text:00000D50                 mov     [eax], ecx
.text:00000D52                 jmp     short loc_DC3
.text:00000D54 ; ---------------------------------------------------------------------------
.text:00000D54
.text:00000D54 loc_D54:                                ; CODE XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *)+34j
.text:00000D54                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:00000D59                 mov     edx, [ebp+Buf1]
.text:00000D5C                 push    edx             ; Buf1
.text:00000D5D                 call    ___@8           ; __(x,x)
.text:00000D62                 test    eax, eax
.text:00000D64                 jz      short loc_D88
.text:00000D66                 cmp     [ebp+this], 0
.text:00000D6A                 jz      short loc_D77
.text:00000D6C                 mov     eax, [ebp+this]
.text:00000D6F                 add     eax, 4
.text:00000D72                 mov     [ebp+var_8], eax
.text:00000D75                 jmp     short loc_D7E
.text:00000D77 ; ---------------------------------------------------------------------------
.text:00000D77
.text:00000D77 loc_D77:                                ; CODE XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:00000D77                 mov     [ebp+var_8], 0
.text:00000D7E
.text:00000D7E loc_D7E:                                ; CODE XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *)+79j
.text:00000D7E                 mov     ecx, [ebp+arg_8]
.text:00000D81                 mov     edx, [ebp+var_8]
.text:00000D84                 mov     [ecx], edx
.text:00000D86                 jmp     short loc_DC3
.text:00000D88 ; ---------------------------------------------------------------------------
.text:00000D88
.text:00000D88 loc_D88:                                ; CODE XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *)+68j
.text:00000D88                 push    offset _IID_ICompressWriteCoderProperties ; Buf2
.text:00000D8D                 mov     eax, [ebp+Buf1]
.text:00000D90                 push    eax             ; Buf1
.text:00000D91                 call    ___@8           ; __(x,x)
.text:00000D96                 test    eax, eax
.text:00000D98                 jz      short loc_DBC
.text:00000D9A                 cmp     [ebp+this], 0
.text:00000D9E                 jz      short loc_DAB
.text:00000DA0                 mov     ecx, [ebp+this]
.text:00000DA3                 add     ecx, 8
.text:00000DA6                 mov     [ebp+var_C], ecx
.text:00000DA9                 jmp     short loc_DB2
.text:00000DAB ; ---------------------------------------------------------------------------
.text:00000DAB
.text:00000DAB loc_DAB:                                ; CODE XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *)+A2j
.text:00000DAB                 mov     [ebp+var_C], 0
.text:00000DB2
.text:00000DB2 loc_DB2:                                ; CODE XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *)+ADj
.text:00000DB2                 mov     edx, [ebp+arg_8]
.text:00000DB5                 mov     eax, [ebp+var_C]
.text:00000DB8                 mov     [edx], eax
.text:00000DBA                 jmp     short loc_DC3
.text:00000DBC ; ---------------------------------------------------------------------------
.text:00000DBC
.text:00000DBC loc_DBC:                                ; CODE XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *)+9Cj
.text:00000DBC                 mov     eax, 80004002h
.text:00000DC1                 jmp     short loc_DDA
.text:00000DC3 ; ---------------------------------------------------------------------------
.text:00000DC3
.text:00000DC3 loc_DC3:                                ; CODE XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *)+56j
.text:00000DC3                                         ; CDeltaEncoder::QueryInterface(_GUID const &,void * *)+8Aj ...
.text:00000DC3                 mov     ecx, [ebp+this]
.text:00000DC6                 mov     edx, [ecx+110h]
.text:00000DCC                 add     edx, 1
.text:00000DCF                 mov     eax, [ebp+this]
.text:00000DD2                 mov     [eax+110h], edx
.text:00000DD8                 xor     eax, eax
.text:00000DDA
.text:00000DDA loc_DDA:                                ; CODE XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *)+C5j
.text:00000DDA                 add     esp, 0Ch
.text:00000DDD                 cmp     ebp, esp
.text:00000DDF                 call    __RTC_CheckEsp
.text:00000DE4                 mov     esp, ebp
.text:00000DE6                 pop     ebp
.text:00000DE7                 retn    0Ch
.text:00000DE7 ?QueryInterface@CDeltaEncoder@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000DE7
.text:00000DE7 ; ---------------------------------------------------------------------------
.text:00000DEA                 align 4
.text:00000DEA _text           ends
.text:00000DEA
.text:00000DEC ; ===========================================================================
.text:00000DEC
.text:00000DEC ; Segment type: Pure code
.text:00000DEC ; Segment permissions: Read/Execute
.text:00000DEC _text           segment para public 'CODE' use32
.text:00000DEC                 assume cs:_text
.text:00000DEC                 ;org 0DECh
.text:00000DEC ; COMDAT (pick any)
.text:00000DEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000DEC
.text:00000DEC ; =============== S U B R O U T I N E =======================================
.text:00000DEC
.text:00000DEC ; Attributes: bp-based frame
.text:00000DEC
.text:00000DEC ; unsigned __int32 __stdcall CDeltaEncoder::AddRef(CDeltaEncoder *this)
.text:00000DEC                 public ?AddRef@CDeltaEncoder@@UAGKXZ
.text:00000DEC ?AddRef@CDeltaEncoder@@UAGKXZ proc near ; CODE XREF: [thunk]:CDeltaEncoder::AddRef`adjustor{4}' (void)+5j
.text:00000DEC                                         ; [thunk]:CDeltaEncoder::AddRef`adjustor{8}' (void)+5j
.text:00000DEC                                         ; DATA XREF: ...
.text:00000DEC
.text:00000DEC var_4           = dword ptr -4
.text:00000DEC this            = dword ptr  8
.text:00000DEC
.text:00000DEC                 push    ebp
.text:00000DED                 mov     ebp, esp
.text:00000DEF                 push    ecx
.text:00000DF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DF7                 mov     eax, [ebp+this]
.text:00000DFA                 mov     ecx, [eax+110h]
.text:00000E00                 add     ecx, 1
.text:00000E03                 mov     [ebp+var_4], ecx
.text:00000E06                 mov     edx, [ebp+this]
.text:00000E09                 mov     eax, [ebp+var_4]
.text:00000E0C                 mov     [edx+110h], eax
.text:00000E12                 mov     eax, [ebp+var_4]
.text:00000E15                 mov     esp, ebp
.text:00000E17                 pop     ebp
.text:00000E18                 retn    4
.text:00000E18 ?AddRef@CDeltaEncoder@@UAGKXZ endp
.text:00000E18
.text:00000E18 ; ---------------------------------------------------------------------------
.text:00000E1B                 align 4
.text:00000E1B _text           ends
.text:00000E1B
.text:00000E1C ; ===========================================================================
.text:00000E1C
.text:00000E1C ; Segment type: Pure code
.text:00000E1C ; Segment permissions: Read/Execute
.text:00000E1C _text           segment para public 'CODE' use32
.text:00000E1C                 assume cs:_text
.text:00000E1C                 ;org 0E1Ch
.text:00000E1C ; COMDAT (pick any)
.text:00000E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E1C
.text:00000E1C ; =============== S U B R O U T I N E =======================================
.text:00000E1C
.text:00000E1C ; Attributes: bp-based frame
.text:00000E1C
.text:00000E1C ; unsigned __int32 __stdcall CDeltaEncoder::Release(CDeltaEncoder *this)
.text:00000E1C                 public ?Release@CDeltaEncoder@@UAGKXZ
.text:00000E1C ?Release@CDeltaEncoder@@UAGKXZ proc near
.text:00000E1C                                         ; CODE XREF: [thunk]:CDeltaEncoder::Release`adjustor{4}' (void)+5j
.text:00000E1C                                         ; [thunk]:CDeltaEncoder::Release`adjustor{8}' (void)+5j
.text:00000E1C                                         ; DATA XREF: ...
.text:00000E1C
.text:00000E1C var_8           = dword ptr -8
.text:00000E1C var_4           = dword ptr -4
.text:00000E1C this            = dword ptr  8
.text:00000E1C
.text:00000E1C                 push    ebp
.text:00000E1D                 mov     ebp, esp
.text:00000E1F                 sub     esp, 8
.text:00000E22                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000E29                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E30                 mov     eax, [ebp+this]
.text:00000E33                 mov     ecx, [eax+110h]
.text:00000E39                 sub     ecx, 1
.text:00000E3C                 mov     [ebp+var_8], ecx
.text:00000E3F                 mov     edx, [ebp+this]
.text:00000E42                 mov     eax, [ebp+var_8]
.text:00000E45                 mov     [edx+110h], eax
.text:00000E4B                 cmp     [ebp+var_8], 0
.text:00000E4F                 jz      short loc_E5C
.text:00000E51                 mov     ecx, [ebp+this]
.text:00000E54                 mov     eax, [ecx+110h]
.text:00000E5A                 jmp     short loc_E70
.text:00000E5C ; ---------------------------------------------------------------------------
.text:00000E5C
.text:00000E5C loc_E5C:                                ; CODE XREF: CDeltaEncoder::Release(void)+33j
.text:00000E5C                 mov     edx, [ebp+this]
.text:00000E5F                 mov     [ebp+var_4], edx
.text:00000E62                 mov     eax, [ebp+var_4]
.text:00000E65                 push    eax             ; void *
.text:00000E66                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000E6B                 add     esp, 4
.text:00000E6E                 xor     eax, eax
.text:00000E70
.text:00000E70 loc_E70:                                ; CODE XREF: CDeltaEncoder::Release(void)+3Ej
.text:00000E70                 add     esp, 8
.text:00000E73                 cmp     ebp, esp
.text:00000E75                 call    __RTC_CheckEsp
.text:00000E7A                 mov     esp, ebp
.text:00000E7C                 pop     ebp
.text:00000E7D                 retn    4
.text:00000E7D ?Release@CDeltaEncoder@@UAGKXZ endp
.text:00000E7D
.text:00000E7D _text           ends
.text:00000E7D
.text:00000E80 ; ===========================================================================
.text:00000E80
.text:00000E80 ; Segment type: Pure code
.text:00000E80 ; Segment permissions: Read/Execute
.text:00000E80 _text           segment para public 'CODE' use32
.text:00000E80                 assume cs:_text
.text:00000E80                 ;org 0E80h
.text:00000E80 ; COMDAT (pick any)
.text:00000E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E80
.text:00000E80 ; =============== S U B R O U T I N E =======================================
.text:00000E80
.text:00000E80 ; Attributes: bp-based frame
.text:00000E80
.text:00000E80 ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:00000E80                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:00000E80 ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:00000E80                                         ; CODE XREF: CDeltaEncoder::CDeltaEncoder(void)+1Cp
.text:00000E80
.text:00000E80 var_4           = dword ptr -4
.text:00000E80
.text:00000E80                 push    ebp
.text:00000E81                 mov     ebp, esp
.text:00000E83                 push    ecx
.text:00000E84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E8B                 mov     [ebp+var_4], ecx
.text:00000E8E                 mov     ecx, [ebp+var_4]
.text:00000E91                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000E96                 mov     eax, [ebp+var_4]
.text:00000E99                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:00000E9F                 mov     eax, [ebp+var_4]
.text:00000EA2                 add     esp, 4
.text:00000EA5                 cmp     ebp, esp
.text:00000EA7                 call    __RTC_CheckEsp
.text:00000EAC                 mov     esp, ebp
.text:00000EAE                 pop     ebp
.text:00000EAF                 retn
.text:00000EAF ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:00000EAF
.text:00000EAF _text           ends
.text:00000EAF
.rdata:00000EB0 ; ===========================================================================
.rdata:00000EB0
.rdata:00000EB0 ; Segment type: Pure data
.rdata:00000EB0 ; Segment permissions: Read
.rdata:00000EB0 _rdata          segment dword public 'DATA' use32
.rdata:00000EB0                 assume cs:_rdata
.rdata:00000EB0                 ;org 0EB0h
.rdata:00000EB0 ; COMDAT (pick largest)
.rdata:00000EB0                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:00000EB4                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:00000EB4 ; const ICompressSetCoderProperties::`vftable'
.rdata:00000EB4 ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:00000EB4                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:00000EB8                 dd offset __purecall
.rdata:00000EBC                 dd offset __purecall
.rdata:00000EC0                 dd offset __purecall
.rdata:00000EC0 _rdata          ends
.rdata:00000EC0
.rdata$r:00000EC4 ; ===========================================================================
.rdata$r:00000EC4
.rdata$r:00000EC4 ; Segment type: Pure data
.rdata$r:00000EC4 ; Segment permissions: Read
.rdata$r:00000EC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EC4                 assume cs:_rdata$r
.rdata$r:00000EC4                 ;org 0EC4h
.rdata$r:00000EC4 ; COMDAT (pick any)
.rdata$r:00000EC4                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:00000EC4 ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00000EC4 ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:00000EC4                                         ; DATA XREF: .rdata:00000EB0o
.rdata$r:00000EC5                 db    0
.rdata$r:00000EC6                 db    0
.rdata$r:00000EC7                 db    0
.rdata$r:00000EC8                 db    0
.rdata$r:00000EC9                 db    0
.rdata$r:00000ECA                 db    0
.rdata$r:00000ECB                 db    0
.rdata$r:00000ECC                 db    0
.rdata$r:00000ECD                 db    0
.rdata$r:00000ECE                 db    0
.rdata$r:00000ECF                 db    0
.rdata$r:00000ED0                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000ED4                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000ED4 _rdata$r        ends
.rdata$r:00000ED4
.text:00000ED8 ; ===========================================================================
.text:00000ED8
.text:00000ED8 ; Segment type: Pure code
.text:00000ED8 ; Segment permissions: Read/Execute
.text:00000ED8 _text           segment para public 'CODE' use32
.text:00000ED8                 assume cs:_text
.text:00000ED8                 ;org 0ED8h
.text:00000ED8 ; COMDAT (pick any)
.text:00000ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000ED8
.text:00000ED8 ; =============== S U B R O U T I N E =======================================
.text:00000ED8
.text:00000ED8 ; Attributes: bp-based frame
.text:00000ED8
.text:00000ED8 ; _DWORD __thiscall ICompressWriteCoderProperties::ICompressWriteCoderProperties(ICompressWriteCoderProperties *__hidden this)
.text:00000ED8                 public ??0ICompressWriteCoderProperties@@QAE@XZ
.text:00000ED8 ??0ICompressWriteCoderProperties@@QAE@XZ proc near
.text:00000ED8                                         ; CODE XREF: CDeltaEncoder::CDeltaEncoder(void)+27p
.text:00000ED8
.text:00000ED8 var_4           = dword ptr -4
.text:00000ED8
.text:00000ED8                 push    ebp
.text:00000ED9                 mov     ebp, esp
.text:00000EDB                 push    ecx
.text:00000EDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EE3                 mov     [ebp+var_4], ecx
.text:00000EE6                 mov     ecx, [ebp+var_4]
.text:00000EE9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000EEE                 mov     eax, [ebp+var_4]
.text:00000EF1                 mov     dword ptr [eax], offset ??_7ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`vftable'
.text:00000EF7                 mov     eax, [ebp+var_4]
.text:00000EFA                 add     esp, 4
.text:00000EFD                 cmp     ebp, esp
.text:00000EFF                 call    __RTC_CheckEsp
.text:00000F04                 mov     esp, ebp
.text:00000F06                 pop     ebp
.text:00000F07                 retn
.text:00000F07 ??0ICompressWriteCoderProperties@@QAE@XZ endp
.text:00000F07
.text:00000F07 _text           ends
.text:00000F07
.rdata:00000F08 ; ===========================================================================
.rdata:00000F08
.rdata:00000F08 ; Segment type: Pure data
.rdata:00000F08 ; Segment permissions: Read
.rdata:00000F08 _rdata          segment dword public 'DATA' use32
.rdata:00000F08                 assume cs:_rdata
.rdata:00000F08                 ;org 0F08h
.rdata:00000F08 ; COMDAT (pick largest)
.rdata:00000F08                 dd offset ??_R4ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata:00000F0C                 public ??_7ICompressWriteCoderProperties@@6B@
.rdata:00000F0C ; const ICompressWriteCoderProperties::`vftable'
.rdata:00000F0C ??_7ICompressWriteCoderProperties@@6B@ dd offset __purecall
.rdata:00000F0C                                         ; DATA XREF: ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)+19o
.rdata:00000F10                 dd offset __purecall
.rdata:00000F14                 dd offset __purecall
.rdata:00000F18                 dd offset __purecall
.rdata:00000F18 _rdata          ends
.rdata:00000F18
.rdata$r:00000F1C ; ===========================================================================
.rdata$r:00000F1C
.rdata$r:00000F1C ; Segment type: Pure data
.rdata$r:00000F1C ; Segment permissions: Read
.rdata$r:00000F1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F1C                 assume cs:_rdata$r
.rdata$r:00000F1C                 ;org 0F1Ch
.rdata$r:00000F1C ; COMDAT (pick any)
.rdata$r:00000F1C                 public ??_R4ICompressWriteCoderProperties@@6B@
.rdata$r:00000F1C ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00000F1C ??_R4ICompressWriteCoderProperties@@6B@ db    0
.rdata$r:00000F1C                                         ; DATA XREF: .rdata:00000F08o
.rdata$r:00000F1D                 db    0
.rdata$r:00000F1E                 db    0
.rdata$r:00000F1F                 db    0
.rdata$r:00000F20                 db    0
.rdata$r:00000F21                 db    0
.rdata$r:00000F22                 db    0
.rdata$r:00000F23                 db    0
.rdata$r:00000F24                 db    0
.rdata$r:00000F25                 db    0
.rdata$r:00000F26                 db    0
.rdata$r:00000F27                 db    0
.rdata$r:00000F28                 dd offset ??_R0?AUICompressWriteCoderProperties@@@8 ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00000F2C                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F2C _rdata$r        ends
.rdata$r:00000F2C
.text:00000F30 ; ===========================================================================
.text:00000F30
.text:00000F30 ; Segment type: Pure code
.text:00000F30 ; Segment permissions: Read/Execute
.text:00000F30 _text           segment para public 'CODE' use32
.text:00000F30                 assume cs:_text
.text:00000F30                 ;org 0F30h
.text:00000F30 ; COMDAT (pick any)
.text:00000F30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F30
.text:00000F30 ; =============== S U B R O U T I N E =======================================
.text:00000F30
.text:00000F30
.text:00000F30 ; [thunk]:public: virtual unsigned long __stdcall CDeltaDecoder::AddRef`adjustor{4}' (void)
.text:00000F30                 public ?AddRef@CDeltaDecoder@@W3AGKXZ
.text:00000F30 ?AddRef@CDeltaDecoder@@W3AGKXZ proc near ; DATA XREF: .rdata:000004C8o
.text:00000F30
.text:00000F30 arg_0           = dword ptr  4
.text:00000F30
.text:00000F30                 sub     [esp+arg_0], 4
.text:00000F35                 jmp     ?AddRef@CDeltaDecoder@@UAGKXZ ; CDeltaDecoder::AddRef(void)
.text:00000F35 ?AddRef@CDeltaDecoder@@W3AGKXZ endp
.text:00000F35
.text:00000F35 ; ---------------------------------------------------------------------------
.text:00000F3A                 align 4
.text:00000F3A _text           ends
.text:00000F3A
.text:00000F3C ; ===========================================================================
.text:00000F3C
.text:00000F3C ; Segment type: Pure code
.text:00000F3C ; Segment permissions: Read/Execute
.text:00000F3C _text           segment para public 'CODE' use32
.text:00000F3C                 assume cs:_text
.text:00000F3C                 ;org 0F3Ch
.text:00000F3C ; COMDAT (pick any)
.text:00000F3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F3C
.text:00000F3C ; =============== S U B R O U T I N E =======================================
.text:00000F3C
.text:00000F3C
.text:00000F3C ; [thunk]:public: virtual unsigned long __stdcall CDeltaEncoder::Release`adjustor{4}' (void)
.text:00000F3C                 public ?Release@CDeltaEncoder@@W3AGKXZ
.text:00000F3C ?Release@CDeltaEncoder@@W3AGKXZ proc near ; DATA XREF: .rdata:00000ADCo
.text:00000F3C
.text:00000F3C arg_0           = dword ptr  4
.text:00000F3C
.text:00000F3C                 sub     [esp+arg_0], 4
.text:00000F41                 jmp     ?Release@CDeltaEncoder@@UAGKXZ ; CDeltaEncoder::Release(void)
.text:00000F41 ?Release@CDeltaEncoder@@W3AGKXZ endp
.text:00000F41
.text:00000F41 ; ---------------------------------------------------------------------------
.text:00000F46                 align 4
.text:00000F46 _text           ends
.text:00000F46
.text:00000F48 ; ===========================================================================
.text:00000F48
.text:00000F48 ; Segment type: Pure code
.text:00000F48 ; Segment permissions: Read/Execute
.text:00000F48 _text           segment para public 'CODE' use32
.text:00000F48                 assume cs:_text
.text:00000F48                 ;org 0F48h
.text:00000F48 ; COMDAT (pick any)
.text:00000F48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F48
.text:00000F48 ; =============== S U B R O U T I N E =======================================
.text:00000F48
.text:00000F48
.text:00000F48 ; [thunk]:public: virtual long __stdcall CDeltaDecoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00000F48                 public ?QueryInterface@CDeltaDecoder@@W3AGJABU_GUID@@PAPAX@Z
.text:00000F48 ?QueryInterface@CDeltaDecoder@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00000F48                                         ; DATA XREF: .rdata:const CDeltaDecoder::`vftable'{for `ICompressSetDecoderProperties2'}o
.text:00000F48
.text:00000F48 arg_0           = dword ptr  4
.text:00000F48
.text:00000F48                 sub     [esp+arg_0], 4
.text:00000F4D                 jmp     ?QueryInterface@CDeltaDecoder@@UAGJABU_GUID@@PAPAX@Z ; CDeltaDecoder::QueryInterface(_GUID const &,void * *)
.text:00000F4D ?QueryInterface@CDeltaDecoder@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00000F4D
.text:00000F4D ; ---------------------------------------------------------------------------
.text:00000F52                 align 4
.text:00000F52 _text           ends
.text:00000F52
.text:00000F54 ; ===========================================================================
.text:00000F54
.text:00000F54 ; Segment type: Pure code
.text:00000F54 ; Segment permissions: Read/Execute
.text:00000F54 _text           segment para public 'CODE' use32
.text:00000F54                 assume cs:_text
.text:00000F54                 ;org 0F54h
.text:00000F54 ; COMDAT (pick any)
.text:00000F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F54
.text:00000F54 ; =============== S U B R O U T I N E =======================================
.text:00000F54
.text:00000F54
.text:00000F54 ; [thunk]:public: virtual unsigned long __stdcall CDeltaEncoder::Release`adjustor{8}' (void)
.text:00000F54                 public ?Release@CDeltaEncoder@@W7AGKXZ
.text:00000F54 ?Release@CDeltaEncoder@@W7AGKXZ proc near ; DATA XREF: .rdata:00000AC8o
.text:00000F54
.text:00000F54 arg_0           = dword ptr  4
.text:00000F54
.text:00000F54                 sub     [esp+arg_0], 8
.text:00000F59                 jmp     ?Release@CDeltaEncoder@@UAGKXZ ; CDeltaEncoder::Release(void)
.text:00000F59 ?Release@CDeltaEncoder@@W7AGKXZ endp
.text:00000F59
.text:00000F59 ; ---------------------------------------------------------------------------
.text:00000F5E                 align 10h
.text:00000F5E _text           ends
.text:00000F5E
.text:00000F60 ; ===========================================================================
.text:00000F60
.text:00000F60 ; Segment type: Pure code
.text:00000F60 ; Segment permissions: Read/Execute
.text:00000F60 _text           segment para public 'CODE' use32
.text:00000F60                 assume cs:_text
.text:00000F60                 ;org 0F60h
.text:00000F60 ; COMDAT (pick any)
.text:00000F60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F60
.text:00000F60 ; =============== S U B R O U T I N E =======================================
.text:00000F60
.text:00000F60
.text:00000F60 ; [thunk]:public: virtual unsigned long __stdcall CDeltaEncoder::AddRef`adjustor{4}' (void)
.text:00000F60                 public ?AddRef@CDeltaEncoder@@W3AGKXZ
.text:00000F60 ?AddRef@CDeltaEncoder@@W3AGKXZ proc near ; DATA XREF: .rdata:00000AD8o
.text:00000F60
.text:00000F60 arg_0           = dword ptr  4
.text:00000F60
.text:00000F60                 sub     [esp+arg_0], 4
.text:00000F65                 jmp     ?AddRef@CDeltaEncoder@@UAGKXZ ; CDeltaEncoder::AddRef(void)
.text:00000F65 ?AddRef@CDeltaEncoder@@W3AGKXZ endp
.text:00000F65
.text:00000F65 ; ---------------------------------------------------------------------------
.text:00000F6A                 align 4
.text:00000F6A _text           ends
.text:00000F6A
.text:00000F6C ; ===========================================================================
.text:00000F6C
.text:00000F6C ; Segment type: Pure code
.text:00000F6C ; Segment permissions: Read/Execute
.text:00000F6C _text           segment para public 'CODE' use32
.text:00000F6C                 assume cs:_text
.text:00000F6C                 ;org 0F6Ch
.text:00000F6C ; COMDAT (pick any)
.text:00000F6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F6C
.text:00000F6C ; =============== S U B R O U T I N E =======================================
.text:00000F6C
.text:00000F6C
.text:00000F6C ; [thunk]:public: virtual unsigned long __stdcall CDeltaEncoder::AddRef`adjustor{8}' (void)
.text:00000F6C                 public ?AddRef@CDeltaEncoder@@W7AGKXZ
.text:00000F6C ?AddRef@CDeltaEncoder@@W7AGKXZ proc near ; DATA XREF: .rdata:00000AC4o
.text:00000F6C
.text:00000F6C arg_0           = dword ptr  4
.text:00000F6C
.text:00000F6C                 sub     [esp+arg_0], 8
.text:00000F71                 jmp     ?AddRef@CDeltaEncoder@@UAGKXZ ; CDeltaEncoder::AddRef(void)
.text:00000F71 ?AddRef@CDeltaEncoder@@W7AGKXZ endp
.text:00000F71
.text:00000F71 ; ---------------------------------------------------------------------------
.text:00000F76                 align 4
.text:00000F76 _text           ends
.text:00000F76
.text:00000F78 ; ===========================================================================
.text:00000F78
.text:00000F78 ; Segment type: Pure code
.text:00000F78 ; Segment permissions: Read/Execute
.text:00000F78 _text           segment para public 'CODE' use32
.text:00000F78                 assume cs:_text
.text:00000F78                 ;org 0F78h
.text:00000F78 ; COMDAT (pick any)
.text:00000F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F78
.text:00000F78 ; =============== S U B R O U T I N E =======================================
.text:00000F78
.text:00000F78
.text:00000F78 ; [thunk]:public: virtual unsigned long __stdcall CDeltaDecoder::Release`adjustor{4}' (void)
.text:00000F78                 public ?Release@CDeltaDecoder@@W3AGKXZ
.text:00000F78 ?Release@CDeltaDecoder@@W3AGKXZ proc near ; DATA XREF: .rdata:000004CCo
.text:00000F78
.text:00000F78 arg_0           = dword ptr  4
.text:00000F78
.text:00000F78                 sub     [esp+arg_0], 4
.text:00000F7D                 jmp     ?Release@CDeltaDecoder@@UAGKXZ ; CDeltaDecoder::Release(void)
.text:00000F7D ?Release@CDeltaDecoder@@W3AGKXZ endp
.text:00000F7D
.text:00000F7D ; ---------------------------------------------------------------------------
.text:00000F82                 align 4
.text:00000F82 _text           ends
.text:00000F82
.text:00000F84 ; ===========================================================================
.text:00000F84
.text:00000F84 ; Segment type: Pure code
.text:00000F84 ; Segment permissions: Read/Execute
.text:00000F84 _text           segment para public 'CODE' use32
.text:00000F84                 assume cs:_text
.text:00000F84                 ;org 0F84h
.text:00000F84 ; COMDAT (pick any)
.text:00000F84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F84
.text:00000F84 ; =============== S U B R O U T I N E =======================================
.text:00000F84
.text:00000F84
.text:00000F84 ; [thunk]:public: virtual long __stdcall CDeltaEncoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00000F84                 public ?QueryInterface@CDeltaEncoder@@W3AGJABU_GUID@@PAPAX@Z
.text:00000F84 ?QueryInterface@CDeltaEncoder@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00000F84                                         ; DATA XREF: .rdata:const CDeltaEncoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00000F84
.text:00000F84 arg_0           = dword ptr  4
.text:00000F84
.text:00000F84                 sub     [esp+arg_0], 4
.text:00000F89                 jmp     ?QueryInterface@CDeltaEncoder@@UAGJABU_GUID@@PAPAX@Z ; CDeltaEncoder::QueryInterface(_GUID const &,void * *)
.text:00000F89 ?QueryInterface@CDeltaEncoder@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00000F89
.text:00000F89 ; ---------------------------------------------------------------------------
.text:00000F8E                 align 10h
.text:00000F8E _text           ends
.text:00000F8E
.text:00000F90 ; ===========================================================================
.text:00000F90
.text:00000F90 ; Segment type: Pure code
.text:00000F90 ; Segment permissions: Read/Execute
.text:00000F90 _text           segment para public 'CODE' use32
.text:00000F90                 assume cs:_text
.text:00000F90                 ;org 0F90h
.text:00000F90 ; COMDAT (pick any)
.text:00000F90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F90
.text:00000F90 ; =============== S U B R O U T I N E =======================================
.text:00000F90
.text:00000F90
.text:00000F90 ; [thunk]:public: virtual long __stdcall CDeltaEncoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00000F90                 public ?QueryInterface@CDeltaEncoder@@W7AGJABU_GUID@@PAPAX@Z
.text:00000F90 ?QueryInterface@CDeltaEncoder@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00000F90                                         ; DATA XREF: .rdata:const CDeltaEncoder::`vftable'{for `ICompressWriteCoderProperties'}o
.text:00000F90
.text:00000F90 arg_0           = dword ptr  4
.text:00000F90
.text:00000F90                 sub     [esp+arg_0], 8
.text:00000F95                 jmp     ?QueryInterface@CDeltaEncoder@@UAGJABU_GUID@@PAPAX@Z ; CDeltaEncoder::QueryInterface(_GUID const &,void * *)
.text:00000F95 ?QueryInterface@CDeltaEncoder@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00000F95
.text:00000F95 ; ---------------------------------------------------------------------------
.text:00000F9A                 align 4
.text:00000F9A _text           ends
.text:00000F9A
.text$yc:00000F9C ; ===========================================================================
.text$yc:00000F9C
.text$yc:00000F9C ; Segment type: Pure code
.text$yc:00000F9C ; Segment permissions: Read/Execute
.text$yc:00000F9C _text$yc        segment para public 'CODE' use32
.text$yc:00000F9C                 assume cs:_text$yc
.text$yc:00000F9C                 ;org 0F9Ch
.text$yc:00000F9C ; COMDAT (pick any)
.text$yc:00000F9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00000F9C
.text$yc:00000F9C ; =============== S U B R O U T I N E =======================================
.text$yc:00000F9C
.text$yc:00000F9C ; Attributes: bp-based frame
.text$yc:00000F9C
.text$yc:00000F9C ; void __cdecl `dynamic initializer for 'g_RegisterCodec''(void)
.text$yc:00000F9C ??__Eg_RegisterCodec@@YAXXZ proc near   ; DATA XREF: .CRT$XCU:_g_RegisterCodec$initializer$o
.text$yc:00000F9C                 push    ebp
.text$yc:00000F9D                 mov     ebp, esp
.text$yc:00000F9F                 mov     ecx, offset _g_RegisterCodec ; this
.text$yc:00000FA4                 call    ??0CRegisterCodecDelta@@QAE@XZ ; CRegisterCodecDelta::CRegisterCodecDelta(void)
.text$yc:00000FA9                 cmp     ebp, esp
.text$yc:00000FAB                 call    __RTC_CheckEsp
.text$yc:00000FB0                 pop     ebp
.text$yc:00000FB1                 retn
.text$yc:00000FB1 ??__Eg_RegisterCodec@@YAXXZ endp
.text$yc:00000FB1
.text$yc:00000FB1 ; ---------------------------------------------------------------------------
.text$yc:00000FB2                 align 4
.text$yc:00000FB2 _text$yc        ends
.text$yc:00000FB2
.text:00000FB4 ; ===========================================================================
.text:00000FB4
.text:00000FB4 ; Segment type: Pure code
.text:00000FB4 ; Segment permissions: Read/Execute
.text:00000FB4 _text           segment para public 'CODE' use32
.text:00000FB4                 assume cs:_text
.text:00000FB4                 ;org 0FB4h
.text:00000FB4 ; COMDAT (pick any)
.text:00000FB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FB4
.text:00000FB4 ; =============== S U B R O U T I N E =======================================
.text:00000FB4
.text:00000FB4 ; Attributes: bp-based frame
.text:00000FB4
.text:00000FB4 ; _DWORD __thiscall CRegisterCodecDelta::CRegisterCodecDelta(CRegisterCodecDelta *__hidden this)
.text:00000FB4                 public ??0CRegisterCodecDelta@@QAE@XZ
.text:00000FB4 ??0CRegisterCodecDelta@@QAE@XZ proc near
.text:00000FB4                                         ; CODE XREF: `dynamic initializer for 'g_RegisterCodec''(void)+8p
.text:00000FB4
.text:00000FB4 var_4           = dword ptr -4
.text:00000FB4
.text:00000FB4                 push    ebp
.text:00000FB5                 mov     ebp, esp
.text:00000FB7                 push    ecx
.text:00000FB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FBF                 mov     [ebp+var_4], ecx
.text:00000FC2                 push    offset _g_CodecInfo ; struct CCodecInfo *
.text:00000FC7                 call    ?RegisterCodec@@YGXPBUCCodecInfo@@@Z ; RegisterCodec(CCodecInfo const *)
.text:00000FCC                 mov     eax, [ebp+var_4]
.text:00000FCF                 add     esp, 4
.text:00000FD2                 cmp     ebp, esp
.text:00000FD4                 call    __RTC_CheckEsp
.text:00000FD9                 mov     esp, ebp
.text:00000FDB                 pop     ebp
.text:00000FDC                 retn
.text:00000FDC ??0CRegisterCodecDelta@@QAE@XZ endp
.text:00000FDC
.text:00000FDC ; ---------------------------------------------------------------------------
.text:00000FDD                 align 10h
.text:00000FDD _text           ends
.text:00000FDD
.bss:00000FE0 ; ===========================================================================
.bss:00000FE0
.bss:00000FE0 ; Segment type: Uninitialized
.bss:00000FE0 ; Segment permissions: Read/Write
.bss:00000FE0 _bss            segment byte public 'BSS' use32
.bss:00000FE0                 assume cs:_bss
.bss:00000FE0                 ;org 0FE0h
.bss:00000FE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000FE0 ; CRegisterCodecDelta g_RegisterCodec
.bss:00000FE0 _g_RegisterCodec db    ? ;              ; DATA XREF: `dynamic initializer for 'g_RegisterCodec''(void)+3o
.bss:00000FE1                 align 4
.bss:00000FE1 _bss            ends
.bss:00000FE1
.CRT$XCU:00000FE4 ; ===========================================================================
.CRT$XCU:00000FE4
.CRT$XCU:00000FE4 ; Segment type: Pure data
.CRT$XCU:00000FE4 ; Segment permissions: Read
.CRT$XCU:00000FE4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00000FE4                 assume cs:_CRT$XCU
.CRT$XCU:00000FE4                 ;org 0FE4h
.CRT$XCU:00000FE4 _g_RegisterCodec$initializer$ dd offset ??__Eg_RegisterCodec@@YAXXZ ; `dynamic initializer for 'g_RegisterCodec''(void)
.CRT$XCU:00000FE4 _CRT$XCU        ends
.CRT$XCU:00000FE4
UNDEF:00000FF0 ; ===========================================================================
UNDEF:00000FF0
UNDEF:00000FF0 ; Segment type: Externs
UNDEF:00000FF0 ; UNDEF
UNDEF:00000FF0                 extrn __RTC_CheckEsp:near
UNDEF:00000FF0                                         ; CODE XREF: CDeltaEncoder::Init(void)+12p
UNDEF:00000FF0                                         ; CDeltaEncoder::Filter(uchar *,uint)+23p ...
UNDEF:00000FF4                 extrn __RTC_Shutdown:near
UNDEF:00000FF4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000FF8                 extrn __RTC_InitBase:near
UNDEF:00000FF8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000FFC ; __stdcall Delta_Init(x)
UNDEF:00000FFC                 extrn _Delta_Init@4:near
UNDEF:00000FFC                                         ; CODE XREF: CDelta::DeltaInit(void)+15p
UNDEF:00001000 ; __stdcall Delta_Encode(x, x, x, x)
UNDEF:00001000                 extrn _Delta_Encode@16:near
UNDEF:00001000                                         ; CODE XREF: CDeltaEncoder::Filter(uchar *,uint)+19p
UNDEF:00001004 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001004                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001004                                         ; CODE XREF: CDeltaEncoder::WriteCoderProperties(ISequentialOutStream *)+51p
UNDEF:00001008 ; __stdcall Delta_Decode(x, x, x, x)
UNDEF:00001008                 extrn _Delta_Decode@16:near
UNDEF:00001008                                         ; CODE XREF: CDeltaDecoder::Filter(uchar *,uint)+19p
UNDEF:0000100C ; void __cdecl operator delete(void *)
UNDEF:0000100C                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateDec@@YGPAXXZ$0+4p
UNDEF:0000100C                                         ; __unwindfunclet$?CreateEnc@@YGPAXXZ$0+4p ...
UNDEF:00001010 ; void *__cdecl operator new(unsigned int)
UNDEF:00001010                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateDec(void)+3Fp
UNDEF:00001010                                         ; CreateEnc(void)+3Fp
UNDEF:00001014                 extrn ___security_cookie:near
UNDEF:00001014                                         ; DATA XREF: CreateDec(void)+29r
UNDEF:00001014                                         ; CreateEnc(void)+29r
UNDEF:00001018                 extrn ___CxxFrameHandler3:near
UNDEF:00001018                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+16j
UNDEF:00001018                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+16j
UNDEF:0000101C ; __fastcall __security_check_cookie(x)
UNDEF:0000101C                 extrn @__security_check_cookie@4:near
UNDEF:0000101C                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+Cp
UNDEF:0000101C                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+Cp
UNDEF:00001020 ; const type_info::`vftable'
UNDEF:00001020                 extrn ??_7type_info@@6B@:near
UNDEF:00001020                                         ; DATA XREF: .data:CDeltaDecoder `RTTI Type Descriptor'o
UNDEF:00001020                                         ; .data:ICompressFilter `RTTI Type Descriptor'o ...
UNDEF:00001024                 extrn _IID_ICompressSetDecoderProperties2:near
UNDEF:00001024                                         ; DATA XREF: CDeltaDecoder::QueryInterface(_GUID const &,void * *):loc_841o
UNDEF:00001028 ; const IID IID_IUnknown
UNDEF:00001028                 extrn _IID_IUnknown:near
UNDEF:00001028                                         ; DATA XREF: CDeltaDecoder::QueryInterface(_GUID const &,void * *)+1Do
UNDEF:00001028                                         ; CDeltaEncoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:0000102C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000102C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001030                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressFilter::`vftable'o
UNDEF:00001030                                         ; .rdata:000009B4o ...
UNDEF:00001034                 extrn _IID_ICompressWriteCoderProperties:near
UNDEF:00001034                                         ; DATA XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *):loc_D88o
UNDEF:00001038                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:00001038                                         ; DATA XREF: CDeltaEncoder::QueryInterface(_GUID const &,void * *):loc_D54o
UNDEF:0000103C ; void __stdcall RegisterCodec(const struct CCodecInfo *)
UNDEF:0000103C                 extrn ?RegisterCodec@@YGXPBUCCodecInfo@@@Z:near
UNDEF:0000103C                                         ; CODE XREF: CRegisterCodecDelta::CRegisterCodecDelta(void)+13p
UNDEF:0000103C
UNDEF:0000103C
UNDEF:0000103C                 end